Assumptions:
A, B, C, D, E, F, G, H: Point
f, g, h, i, j: Line
c: Circle
distinct(A, B, C, D, E, F, G, H)
distinct(f, g, h, i, j)
f == Line(A, B)
c == Circle(A, B, C)
g == external_angle_bisector(A, C, B)
D in g, c
h == internal_angle_bisector(C, A, D)
i == internal_angle_bisector(C, B, D)
j == internal_angle_bisector(A, D, B)
E == line_intersection(f, j)
F == line_intersection(h, i)
G == midpoint(B, F)
H == center(c)

Embedding:
C := {"x": "0.396200019762455390992528236893122084438800811767578125", "y": "-1.5271157609670418242586720225517638027667999267578125"}
B := {"x": "0.5154753578420916415581132241641171276569366455078125", "y": "-0.483543243410542833427001596646732650697231292724609375"}
A := {"x": "-0.476465596167570837327076560541172511875629425048828125", "y": "-1.8099288904035180092222390157985500991344451904296875"}
c := {"center": {"x": "-0.28240512198537251438187913977991738019953583169431589809613565170456084076284911609392437216792912956504959897950285595395730694420317691362592469905294033845775578898361393955071990001082849993028031012454883265747496968654599861119910073733733454930372876568804502187678915842604358200755952248577810079560215459551021124919639317627210906436217387487462391330529310657587201463141052194611303536894165784707273390328377275171455451120612442559188438505152879708192825556699922894975910622517334037384982532292418614054604241020598285986798333555592191277515602211968115527099337346766281298120869323300355745919005958497956289235214165113523259131763770033162667785409345081112245395646232556979225550640412539193997625045903893030588942276857189635250529032112883398628772380657594096947714756041711364262175610428576826588403786155895964198042352848466448666565613545586077107854189334335105390114747986559035422721807880519380141043899534763973806906707909055744320416477826870976380892505339465561375257124776921553754546660314321322940542453965454742532178012194242533053162099772154679845774806002751296981943982246912282195649996314360093368741549182221106013239046538555770298805121209115924127144796470117795135039695999420582565323273233594580221456840642795918288552630254195848317792587354189134650965444409549997376748598768677682926797286141870536111660955932801708622301635878387638287938888596143364599650157648215793829614843973661722038365250701463439761489718070153002527430564191775610830546886090454896397645278583177342655240910508017344334218380259052475801201574447084196540861218344628681643040832997384938319847658995162379469188418106871580859058906866892609809279776324457473651380671895561627070554212595854636419585326557238234691667861858374679972270799524490941052229401473690091487805929697414349059603519892519474467927901461935229634845764022213520243848059960205097526273644626399730726157349051082467783908237118847639000247013507476411831795610041302806325679", "y": "-0.92095188648870259755755023314182348874849443125165304562976741925681393811581275384431752922351354228354688362605359533109158620839464804955282902576509692448622643484689846896506389279590824386030395912325218507360296633108445436900182494186339416061104032114139046381024922433688602943166633586826454687370214991766788143886092206954892834953570967620391364402463190959345491941742976345655263663146234220838714094389310777938734100062868959524745833506044065415034072688629515463913389503393005268666176206135774245251192551052252506410187144556409192374957118629708623728326862557946239765152328565989129932358613442903091958304293354606011270715321744439963364272646803178578635427714525160454759173297378988081500248011647963503323775280274210670838649655365354683524773928003431986838725838016297395450991188168471484397306083687445216486754681587401087459955797344079510743400158701697843280213901894379707009979010220055557526679083348653345089839877016375229147088627243165264344068348394043995821520958643061661984900522075920958061346247006443882987717078677998869180341113127651839660817268651837322825410447528546983778023830567284870689496458215509084040275593806440191365670473603445780659377615214145791505866139407717242757059636931533837418993397086828905278566825158988849601898725503165283242953463778347315788845562703648643634847730934113839857640032211438007058415007148990251951159293883847033013767868619249588583147019563934012682274674430715611235647055872148650001145679092824723904344092960585154217572134539906906294102674479579683177223114524880722025335359758108877477525477765329422699755221481987828446242444533234217982178825173260420797968914218233557851428330998346147616384212449397376081943783749871272478911008934816381543334333207325800984384153117749413020116687232583770630661668528416015466569207189109407623776396395062592556299014635239555095855111637992206429372819742511153867440844396396400773093929729645871839634161888002152339360171161835338009192"}, "radius_squared": "0.82793958112918139761535619116408008132296532199248515553547375722904020735558021036729520442344357523930241680865022685371641998485806920649955676895558978907807485583845735992066997134064422727119349148908318867990685403067486409064454999963344495489980221039904346080276312688058456549806842311458307930678736560250748144019067502017600559872479258153487526614377190468839708304151668783283502967965404960774398191050145257198884138929276703725144750584728518622217299224485681480334988529174724125018558713514538031734133236559830809214126805705172473104846938861946332398426547416276434327039423179702733955834153986311554479789273141575476699049317514175911674057974736235951568733906927897499992922696408498404828058968161661230080872911463216526568517389230336920768074808323920610892339164724550990636544381271576621467819732802518943115237039868369414484428413183387755516887812428946989288100611750557877842730770787191617107100142392938300353635497697937561045203966041047307193044220106933089771380892239969210708462500584451079151291313265018136396282865997206046589865578066517099104123393663536778756821435078612705614710861676109220281127959534475236935315721865897370595043143050988958604821910228386513428526702315471844315620535152654056409477626013424141499204577741094409974811898166221860595950280542101435168921057791893595063724860372292474315983336692601152358891220287688593349295078217968365143280218308844403439381122992042057099641117152684111244902395968234024532445013691011899748664643789619505984176173715070556724413083224769807358368494962978813490829973981359629528665215734471922525284817693711547293318525142607009869079510407135252757366585526373309644427413143068002986896303886504268178997772673097390725037791753100789555925864520457250785986294647859088701037165400305560065936690290269905373383021928574164775750507678000213113637532989789635777515183823670209183534425407205618365766454098913184305017630158367527641203259504566036107695590217968033612784"}
g := {"point": {"x": "0.396200019762455390992528236893122084438800811767578125", "y": "-1.5271157609670418242586720225517638027667999267578125"}, "direction": {"x": "-1.0648470136897764337720749504420332183804982342392191474642633402893706153525131011651003620429419749398109758150709583921749707664719156337737659373746697250024916506633202911374410425166662949005839925148761473687440099893748927214473106200182553731827895230615067790235735868750721412662749470331900632269007790047763512045766935278797131220927290666414117178360991712147973670279196380098917613255776082673600341719336917036347486811290312374384812328395945984535422919673063907664291777276386595180083200394598478565464872313204832061446348966020572549319479673397780364925839634658230206726166083280423729152632459365058768956466450528497629899263883202778758592211071595589623197961523547805088827588575732201747664780837109866453494455891919577226942578053875355659122119502645401683289767015978000746227470483637516316264656579039123259787979726280834795548324578946423740985625932994949794721070960128471681493175524796109894024709916149729927842980956104724797001918807100953648963532960142402035956049014833142534024898998135585015508116320665971427511008755351141060451947376453012963966846663309183249222089140959438829571164988628321569049047038562659279760453985361729601509594501670443220046313259803800648047254017642449719097278454508343532581828337295433931119647604281561065247289197515416175333847971988924904791011056573425002077951265428809591694428541011161235860949271141939375995197173507563075948309982448238731038862053746039563099078993140143893245899687847235979619000404026948900756644671829465452535288336445711540512887289709167076282645114370881937454534514872824236575918695909440353928465550477021279080702094951430990923611079605317624623015015634850120156517273499778681442943007253974410439650721820665806673303859552248987440383300297658542555046135352650822320327905118032845323381402604141340240815687586158119231697922182434469707249015364639403394552632473873377286136410874497850737290493459228288443085981389148822275758619037999373874618800913864116098", "y": "-1.3018256576957304501672874635098185470664083965772071536912931010179746478568266117689122384013311818863408576290524177542846707603684849992951186968273734532101305946587287669432677061005546960830179622062717942465745259048928492883572319081209015403041698535035795810043286179951416351528280832839049006598646244275207769220565859238839859964485351979165984049832602432263773952260694874582628918961333347035755867470339359542149541685907310927864718782728593824696285805040372035088409121555211114476078477712536654012783010024349582578976787738081288693445933202545895769591802391537796143502453984903262567223890357081944081912899508372665565474337410836036933722283642817629232548788826905275456285034357570414267463448092762978315937055633740503444934920519104878661594393355383364620014261086040840084850539232549728841964163064894459194757578604834674028543366476201188796720676021175045976515675409129362694128152077972868605969516427419161486554132696982982734048465381150592168866365840860208352919531295154541561660335191284698852494927304307811269430634964150833250702733959488456780480824726466432751586058007017813941746028571983240127777974248838201878624027265973806471790861778275899311805177441825619392936398410647120466430184151117844410514601858057338713692663302676229513863643829418755703374652318234474085400744978346005270962842831429569905925761780021827552375280666460988615468550223266276568245145461316712259005885967074134348706898678930247809162346796561739432165423719710322108862674180001879657281670354873760300576763170258925453059933802461863043890032057421019534743349822057844150101068425500087972557908416090892182205613210887629373265635695956598453860236089866894202895280707479159150854379684977911301558920560009243401006840606701868988883509995226026576049994768240884458230341994213699576699722944406578888853265381989744583824988519826816309213223868804167827121278970591617246975067292172613511879617304743762911038160560033650466112884463163408377472"}}
D := {"x": "0.44627476036462454422724126438049596378480651354476178099314298600582638469211323207025570962151829012902033606275282611053584833412140432273105148446467329291960255546760694960959255151304235957358666377601108982500256366767229353221133414214335325686657413794680637022222804936394380552316220839735441985582616674315229727163794998990887398351565604852118039140058540273504249765973203380161218353274667821278414763988498201930173661285858207434188259382221480433000373352469264433598868820000309329547663673185586217187360442011590618746033347709342986652274518637458098161074713428951146790699344485186495437536493813365605971187697631875243309338538655178303457541826365274739599236434639321911514336296928400269705358831020870702642802836041028553479327323018176861877457035644468990640516630751669692851714099056681304671713038102397498200526205646729984704315642300225004642112796237096503774136870006862499341801012102209715008288155546747416255286952018705391150216582323652309209141778325498309374573802927580214040492663625840655254694454385739361787419970933499112265782347874149629204984202502153874951523776379979402333754298758806264686289446062452479800572540534064129640429412738292727777850356907826067971500994952582203738731785642281091819680477331018254014502351002013998384750378075373969596366054325847058691722251250626664831861189896737416797230304524560300212593328807539882971215714723018835954773609242724335785772171740797311727422025414414528281298735209126041790241179871453071623391845775707986022865956890472859610289856621517206827120375049218988133889597812535664125914501012256249364700452760893430585184839845359217558758955846058016587700090004104691971253428489413199252257552695661417035641861820684199425959627455832500958039529499571414237540547654262655070482914004945863723030130408038047416144810373159297160248518121970008269631475841522786791924327133659258895498541870498735105024156802820228346462547621432583523053543514466597727850808377054686857995", "y": "-1.4658970306890852499419369837260597544389522727350689287371322005230509206935688531762585946544535357058630049285956565601977743069913058216706054504775133071795999817606488270440084982458705077911997856187756861440056660600375400466306170557934340371226212038227925738511163832268317700591433246507357148104289445293635544878481301487953972481564258986357023855840766645550239060205055085875702588203203037704556036470882854403750228067409645240440155024462839425848177480721292523348048736392528532033223849979358914473885306820741152806909199883357842215253179990197966270230951814499398587994868729095858977487750684164011678181599327612720386402683256263838788083509295460115415881867106945217420272190114482144788486542940374476833477974258792552988007037515910749937196106274433407767453155706311279043364899818149057256902797443048188259436870978018632961287348385582084750943879579347665693115740498530176231879299273248868372772573669887579452297354283246146869807318366447841767285543300006526461886024731773240089677874872661926091299890542175089628282655586134766856320164007351948144460668601423692827969533044284253732861022963914373315531501430252480183471230429736379648038904136992938364892146615354956631140242160560941538568487542894475648241193847127887158326954564443445750786524487106789967138688166518124474918441805937944986103567791579847228446543503970229894146779082133997217270642369554463495444268830012380092575602186882807823689502136956457123848269763275968056866127217889513338274803745677692635597137237273314020074897936050108318913451813763193841018816343007192849176526655629562411205091856625917634165190548269688814946067560293505217841053216490450453459038230665123185852935701968311189800764347240458845179126635341197946971208419587587351336303905064583778798481704694934630789769357970250333683376367301608485093027041901487221756436428924634834942385192862203756925457286443855143934207055695844539014514148963280819719830590071358886517591155027817229052"}
j := {"point": {"x": "0.44627476036462454422724126438049596378480651354476178099314298600582638469211323207025570962151829012902033606275282611053584833412140432273105148446467329291960255546760694960959255151304235957358666377601108982500256366767229353221133414214335325686657413794680637022222804936394380552316220839735441985582616674315229727163794998990887398351565604852118039140058540273504249765973203380161218353274667821278414763988498201930173661285858207434188259382221480433000373352469264433598868820000309329547663673185586217187360442011590618746033347709342986652274518637458098161074713428951146790699344485186495437536493813365605971187697631875243309338538655178303457541826365274739599236434639321911514336296928400269705358831020870702642802836041028553479327323018176861877457035644468990640516630751669692851714099056681304671713038102397498200526205646729984704315642300225004642112796237096503774136870006862499341801012102209715008288155546747416255286952018705391150216582323652309209141778325498309374573802927580214040492663625840655254694454385739361787419970933499112265782347874149629204984202502153874951523776379979402333754298758806264686289446062452479800572540534064129640429412738292727777850356907826067971500994952582203738731785642281091819680477331018254014502351002013998384750378075373969596366054325847058691722251250626664831861189896737416797230304524560300212593328807539882971215714723018835954773609242724335785772171740797311727422025414414528281298735209126041790241179871453071623391845775707986022865956890472859610289856621517206827120375049218988133889597812535664125914501012256249364700452760893430585184839845359217558758955846058016587700090004104691971253428489413199252257552695661417035641861820684199425959627455832500958039529499571414237540547654262655070482914004945863723030130408038047416144810373159297160248518121970008269631475841522786791924327133659258895498541870498735105024156802820228346462547621432583523053543514466597727850808377054686857995", "y": "-1.4658970306890852499419369837260597544389522727350689287371322005230509206935688531762585946544535357058630049285956565601977743069913058216706054504775133071795999817606488270440084982458705077911997856187756861440056660600375400466306170557934340371226212038227925738511163832268317700591433246507357148104289445293635544878481301487953972481564258986357023855840766645550239060205055085875702588203203037704556036470882854403750228067409645240440155024462839425848177480721292523348048736392528532033223849979358914473885306820741152806909199883357842215253179990197966270230951814499398587994868729095858977487750684164011678181599327612720386402683256263838788083509295460115415881867106945217420272190114482144788486542940374476833477974258792552988007037515910749937196106274433407767453155706311279043364899818149057256902797443048188259436870978018632961287348385582084750943879579347665693115740498530176231879299273248868372772573669887579452297354283246146869807318366447841767285543300006526461886024731773240089677874872661926091299890542175089628282655586134766856320164007351948144460668601423692827969533044284253732861022963914373315531501430252480183471230429736379648038904136992938364892146615354956631140242160560941538568487542894475648241193847127887158326954564443445750786524487106789967138688166518124474918441805937944986103567791579847228446543503970229894146779082133997217270642369554463495444268830012380092575602186882807823689502136956457123848269763275968056866127217889513338274803745677692635597137237273314020074897936050108318913451813763193841018816343007192849176526655629562411205091856625917634165190548269688814946067560293505217841053216490450453459038230665123185852935701968311189800764347240458845179126635341197946971208419587587351336303905064583778798481704694934630789769357970250333683376367301608485093027041901487221756436428924634834942385192862203756925457286443855143934207055695844539014514148963280819719830590071358886517591155027817229052"}, "direction": {"x": "-0.86672424455082566130092936212465211761321884026802862425394982437836236149816400437286695711161794975878476075106081811767734893750528297140366328187826561050296637569290709793084705032301861454822814390857704172179484162929248232341725289860939541131990764730055634237459174225264312534571028186845433144346284091558278456684274427882208353171502960096589456580862543272334599556961138381373154224495853824653113909368471858452260454926663909153274930855736332355794843224458290626131873381604661209464039259161065296986003667769911122644364045005176675796482846619095490042857382633596377668227659089778069828103206441824890791632963069612161985099092671371035576376218263408613099708621659898777896618718304693026067699656593981244149999275145973847475922847791883410937303903295466413873187746827170713500792042073068693836380224686822776216166427562497160382932253707802905333643227812676693900468981507851040858810454659499340971459961231555472369338212255854903376473347557330104997618581364580404694713456607544581021542784011721747814077109126657507550606962977704857765693844922787688237389758288722354534327808771771953046541312765398979566273577603063715994672706445727606110921295785421801484906395348498018582821363167936567182580212701367906516404349325080205887584830880522924699734266702487316877122210714230924612177485610512743947000121044437536521959209067553971927574706143659752451073433774363200324308165009788775917215242406021446674354777706555597216521477253190823609420060599651582729164178751425590620634246483753558373007449362746530641439521247685812717855023077789772348002281208517420385458925635957217226376384423725829470216917392344225956813100848202521257807807395269423253275961596750332270138908647223675169357315446472745997009640057251392256565319084154065947104710121921705310289214800636880081162235105878776459035811193049728392244133422407637893366454948349452246278136656869529408358073527910255251205893172109049319881126363835552999325384678495786492245", "y": "0.64818197931510290018100808518399147137824503951589712367845632507324636951257782719300211348095430223226885136703587070151165223669632229286890372520607636652627441769610726701256621995151126303771129235153336487082946434033260653400037290567088958352900018453452440271410465845803784063243559271293236332108182744234582259028368993869693839097074598910115436193516550569318302342478275463475618544664288490984608938873342440156260552124166132092475846032779059617962655687731587344010504406420120512317002369994183891843163509932143297208070316189097353778882150728515744091357257879331883225456974979098306234235994854570540478349681603339994464240120962256008725741970545781313105071797454866762647148854516558932306543649707243136891605388939692623694409966107732684563464943781699609387449524301987829033795667395625251858172973042432387395564607838631845961468839827225451043771757515613779768443005713713369137092656496365918609018419250726942989863903776445313364653537297666300068332281979016990621659292036674096829240315071041579668893455579054828339794501317023109362522415756855216700749220356364026103495775719036841120337992893963361296595710764173460791317571480152477948712304776077623955165098718147538700324767095384904922578587104655318921658413360910958850028627530508369574687344436656276536368864668559540353959971914960424959037582478629905173341057510794247191238219887001349035160139866343700764575661721799562316302149674299658067141201336285295812104032390730266717240793694780023524188923988072586349358745379996738729137464715165976796938641905689060888402948801016687110100911979257725034480223582515175046398869959303281256576302277522986119777563039149597820398941700382617255578855011452746277140640060218357600418688899839522180651405471335963209225687086838746945284249780427475508561939262676246307340058567203721553451340513641128927309683249021320615829759631604435193448911432882935776180321389957990296243619666968290099515908212077664079609875579691588145019"}}
i := {"point": {"x": "0.5154753578420916415581132241641171276569366455078125", "y": "-0.483543243410542833427001596646732650697231292724609375"}, "direction": {"x": "-0.18382542946680146077233416165024157607980485372649560813578180455619347606027917014845584759126790350959737669214864485760139419017027338171653949074598816219456773768020704636641260048711232392841993915517227121625182942471885980341287777859994030086241967662309246111615037769514249741875004132805432822964897812715835222776779482670295563077514014450651148312936364167999908629565266742920582922459357971098326534400700783201665039257967874476690699735493137881286124583879513340592893789976238480067563091612650418414430060059776017301103604418575283078414608205902488182106740934757304551001440996264821700134474576476426040190012736182372915979870481122722096680138692219954473983344530421471248650124740945102718706002193503382033456428633501533602808342676811855174083422622324948403830315370114665155688293460642439023082018474432164152153032330801416362990639476443359875136336012730546370997693786311813096767532374220516343924382390346286626281002960464269472968769744090890028130547636756328939894848084414174086221492824266686016963844489286104990183345729941245270022635883580857953346359459073003780485697687671674129236693924052702157555353116498156502605954717292127693223894467356931575858437027101352945641643837219736397615971309088818308343570854320600810672209214409300220824103410405179493541925414606060148838173614304458639732940209883545897132641543289338070083513026296985755148972695176280751691927915771146711107431421360338041444186642966611756471157976822029647884589596852158836214426782581259540713633565530106916488893653719245752805376026524609457515662246385380383511354229729292343379130204649636972388995957506694624146252088238059320845622985040893994218442065109002467418437613601268971477307058523436273460432736414837450314993544149097059641204681763121472875680985897227910285717842333929390144228330821935414891371539080709067025127174497520464067801205385543695307974353653434760978371629105268271294193804311920202442954229457667076301940400137187531318", "y": "-1.9910596499830373443664851829633188632593668706964903008130644760954140294758157841436065924957016315016316294645936020900801701514504086634116927449498893591713365690131168263832807262023168991738773035939348381470255783065508317759289083523125815463950436506431237518999522812147463437833257608960970914531915888996961100985231763357478095723331673682081188745687282933976348053705526298358378967510514916807408433682030477091580656049619959116156502556062055980001322128100327374113550444868814556167975989005869549817335909156541839446856394698451578047448720401795979777315399370601807766825856070918373411459694850401719419216160329930425433728651127262658573181205385701072368417130498072117894607530509085584738312659733193582844861872410262753297374068819634656968942563981271219123509017016864494209125935025236560917071280230571697039391019585032423798319288341828720696811876016992208147478037400810265097743393783349994893707976513678701576422383624357414161414407181618079464358704493866322242555779389457860995779137809393122600413321571015147542972627981791388322357929544998749976890704425182997418239790686128277224938355872302833769898617806072711273919481091267099294325596301746661600731165233688578947922373371066845452387476191614974719448094431625421848719922042315987208617352766541853556718172553963496529715522372321659603800711673899967080482956447333854473123569797593455494061153951689893360186550432378263227039405379332643074683297281025253844373368009581895278209734350199672760742238599543000624281647083674683405734543176374385031224170147255052313254445984175680612937227928192954712021463891992055477216491511763577462769595500070263908348795742643304787148089537145792603920018639807451914854309879687192589299715848999882413701265351325793042158351224500185572028953802239645177207546486714558446053522127168792099220866516080947743781976681760584256299550975434729683543864500789885469714726998867340925597247051898358720763012458044007266923377748651579055791"}}
h := {"point": {"x": "-0.476465596167570837327076560541172511875629425048828125", "y": "-1.8099288904035180092222390157985500991344451904296875"}, "direction": {"x": "1.8882848837735284470121102471976321671103776268583761943797305160748812166660315112503299350272208633171114504526625688241634832193884843117136070050341954655753903702313894193233956956962763944602854235461137159866570325049579883885360095638165545134635287992597193939796953041743166244472706404240361987912356340153124416189025369837392414009622152221755329323916817517938167517514503361222216122019131126500331941337213572897037659080335855673332578731154690264721728286424450910416816635845217961574208756363004703422713921816371074919125777107436881576719659424767832247013008500601566221497673189765266484573218470462594761217717647295411640885824394278810678911316004810130657476825592868480487987106162557284097792412534707375326685685365919844313222024648986356175068152507215096893905370910118924722347903401312032088464649287437094465833830940509062052925611030566435843237648661180343811497876367864067173371864887787855033724888930957449516004919812519518627275240812197808626468812372683809824014588950384016684567495496717930808523559586090841729228368913958351357972163883023002460995658234766371849506591344758355957770342873333382312720568550623496907894364640479686480846100970468537978183080093914437584831425928726402409210755109943764366431175474872123067743641694160366841976138595503438529993077058485312054865327176464837970727854846048842925441753838771605323444448359133110856047444129699719324389644567305068471745629896405066084888749858551973237984022625294533091247809752423717725719920389967801626509322278689204457378111437433442571452254901501582755234341040286405392910947150021749978813475904108618824096500050654321414642815942451589927462126391146569403446776895534761961698221655665407304027130206767560388676165995147245529712523597086068246512296261763746473170075831151345473526301408135136315935982556519151232653000832504667322254781667558368044585245893101574151574355956869744151291427926541228961137956030069065142978409854288946891560079551468968684339", "y": "0.65764011132352727309499184630969014553461321623923040527046684714399820424096764762199179222745049411091327198241886460056506773597193284027669078359449462359193986432626231665420341238994823194948931596615151459535617095690227494306161989056397239960881387665078099361913376960803587398917823428886804667961716796235155323568267585313037358748637784870154022788674841678132140449811206456882042447758329330313830402845576861947587612745884525588000086594217896954601528735113726745346854075572283118672906046722091139850952264920157355944705745292936197826670178244708894400323809378817007849666772490525483154478640890384892699373477596623856915509261787280554709108602535546632236253270712198839725516891076875313408457465997161104349989000299602009261204593325495049910585864326668442410517199808093219777538780875279758514404145108531741015370466596066179845535678036173923765957626057812447731338294920186046649998475906764371975275186667592422140177506351885250802373703149896825449411290231119237458473384427962972720908247778280573117530153239802144400455959818637086807979941221840611282703503227537079010335489618322819886063420842957970584294317057797563890422385219945117570074548764583949813984766594209059529727417675397881131662788807089055649553798640699731159137220205323951487692501461974566225609735146979863263001451936656663615250164518320603533015139689113688451427128858739850341901566779842474186936742794845940130028782782708828846366992587317170025461992288415669620773243591962298430074409151228190930740475943684623509112109636179407358993275418312436517489145694408124079597941737408478871522768962274281784773445960585468569147777651099936634037167469332452090431253344418421605408015579500344702317567948276046658985526975546909828541199285996436947887291227614170358499580992415563673511545643205192476391078520976516513443003812056649257490255780090566107708468832498436850255435005422773181961048838129462429653623298926121559550103749640631390073750502408417139763"}}
f := {"point": {"x": "-0.476465596167570837327076560541172511875629425048828125", "y": "-1.8099288904035180092222390157985500991344451904296875"}, "direction": {"x": "0.991940954009662478885189784705289639532566070556640625", "y": "1.326385646992975175795237419151817448437213897705078125"}}
H := {"x": "-0.28240512198537251438187913977991738019953583169431589809613565170456084076284911609392437216792912956504959897950285595395730694420317691362592469905294033845775578898361393955071990001082849993028031012454883265747496968654599861119910073733733454930372876568804502187678915842604358200755952248577810079560215459551021124919639317627210906436217387487462391330529310657587201463141052194611303536894165784707273390328377275171455451120612442559188438505152879708192825556699922894975910622517334037384982532292418614054604241020598285986798333555592191277515602211968115527099337346766281298120869323300355745919005958497956289235214165113523259131763770033162667785409345081112245395646232556979225550640412539193997625045903893030588942276857189635250529032112883398628772380657594096947714756041711364262175610428576826588403786155895964198042352848466448666565613545586077107854189334335105390114747986559035422721807880519380141043899534763973806906707909055744320416477826870976380892505339465561375257124776921553754546660314321322940542453965454742532178012194242533053162099772154679845774806002751296981943982246912282195649996314360093368741549182221106013239046538555770298805121209115924127144796470117795135039695999420582565323273233594580221456840642795918288552630254195848317792587354189134650965444409549997376748598768677682926797286141870536111660955932801708622301635878387638287938888596143364599650157648215793829614843973661722038365250701463439761489718070153002527430564191775610830546886090454896397645278583177342655240910508017344334218380259052475801201574447084196540861218344628681643040832997384938319847658995162379469188418106871580859058906866892609809279776324457473651380671895561627070554212595854636419585326557238234691667861858374679972270799524490941052229401473690091487805929697414349059603519892519474467927901461935229634845764022213520243848059960205097526273644626399730726157349051082467783908237118847639000247013507476411831795610041302806325679", "y": "-0.92095188648870259755755023314182348874849443125165304562976741925681393811581275384431752922351354228354688362605359533109158620839464804955282902576509692448622643484689846896506389279590824386030395912325218507360296633108445436900182494186339416061104032114139046381024922433688602943166633586826454687370214991766788143886092206954892834953570967620391364402463190959345491941742976345655263663146234220838714094389310777938734100062868959524745833506044065415034072688629515463913389503393005268666176206135774245251192551052252506410187144556409192374957118629708623728326862557946239765152328565989129932358613442903091958304293354606011270715321744439963364272646803178578635427714525160454759173297378988081500248011647963503323775280274210670838649655365354683524773928003431986838725838016297395450991188168471484397306083687445216486754681587401087459955797344079510743400158701697843280213901894379707009979010220055557526679083348653345089839877016375229147088627243165264344068348394043995821520958643061661984900522075920958061346247006443882987717078677998869180341113127651839660817268651837322825410447528546983778023830567284870689496458215509084040275593806440191365670473603445780659377615214145791505866139407717242757059636931533837418993397086828905278566825158988849601898725503165283242953463778347315788845562703648643634847730934113839857640032211438007058415007148990251951159293883847033013767868619249588583147019563934012682274674430715611235647055872148650001145679092824723904344092960585154217572134539906906294102674479579683177223114524880722025335359758108877477525477765329422699755221481987828446242444533234217982178825173260420797968914218233557851428330998346147616384212449397376081943783749871272478911008934816381543334333207325800984384153117749413020116687232583770630661668528416015466569207189109407623776396395062592556299014635239555095855111637992206429372819742511153867440844396396400773093929729645871839634161888002152339360171161835338009192"}
F := {"x": "0.42190284900225960461670309652331508247489518839012059123590925105728456505954323162652487097514859738341635248610507432001382029929071574819795218939356213192996114544676171323157708337917812409234551636264106099607964012521894525178109179481486422344027708455474990958383768584145380535360789689902435733242758889681377718974956605162904470654186414919976968662160554884363249787873219139094649418443930267597488740754878193560350277956406121248677106951943078486729253802069147983260464120812261934198507712850355638278544778093022277631468542572837288344987250407928428653993775191486409011483934036638630008113084655111033774858322715549563112490586701471744258407841302015650587711536534057048688877286806237270071302895130572609353625362501173837549285298388627487738639996625559583287739526696710571900391790727024491995343247238197990679684586911174992488640723705239283611605384382818249098304485992863766332028322689783017140730072910818774711178855266158838617460335713735165922119550616668204278817367767683053323989596039811307178616399335750798131473233248578100539751886838237902106053088766164991830961917478306964300419362277466465802256047700491211555386481996340557275173106341058049952885172068954088170236139461987131800376837311178636491787993044968753835667328573616741569370223255067211036003481554762525777806472076223954360499680613761887882820238202740866023928331321544192270727559748174155880453274355628157821597089006034534505968581372506278919652190154477651483384451234196476289453698533599694418822537420563401763860097796170235863679746083048903621373735945166739352183618708232195412383883289023475834841909406260794303392497554653515330419857240269905526618082039343062509676299929947666675336195577971323762515794125256109444395680603905780913654918737109465319946431868398227069123618527695825146840175073669506590145956759949800337567144525814222152556216262653617592214410715480836877024223844049702219415674336837176249371041650415535801111571638744170750065", "y": "-1.4970507175346145028712856381867028911169748380458156196203664566679637579813545429452463075060924270987750805080360843193017665219803749650758453471099536852674785465567963543972552149105093294248112000374624581270595560076478029083551190969911094603744649128287586634556419944978141829635736696515428177759478823331290636104044974496709267128277235042245625824077660469796793788641634234270792014003954640618298739755503449570644152564708132879343907772763265337623146894560921507653319272559528273440567431490766525338618424517448540109476872647761452670584078682824566970380739249249381086203422518651288086202779213845875378553628873726288448073310692160675516119384439978584154782308077878292457301416524516440802552378421886121857095238714420699779401808732201800050019842726145354967815220966658399203366074865895060729448798633100480704819851989030847036424189220637678491952395580462535883688199772437559922929422552189807653690294905111749116849082845449670687766439194478335371023426910915568585496132599071146013150013968393573195076281121330803275757046842773074143465155870596623510117503564755129858855344084728781375838014621020844213367397497629543842924979644506242242362009029753607081821979302720499845436597110757289590245227697107896218742118473709850179284578676474389808140101009514196827437019348111725518001149324668748436441332552620044167743913430746707157658675427280737401201580286112940388699040896940123676304272086099375815421472175670368978991209042409984183380457784289029443505140426884006414812298569692318763542089966709040617487229329864986191113590007935642779439162624939899743366227845705648140350666273874904515054480182186888490414236259988807319228880982450593609210042537053870596054312600114696978835586770949365977075844890152131187304618499666150287178942764972750304943439678204957676357162687472914805238627742224368607994098745069108130397059575584460620759592768767142130561803239118271983582849221830076010448839863718434972909275767115783631611"}
G := {"x": "0.46868910342217562308740816034371610506591591694896654561795462552864228252977161581326243548757429869170817624305253716000691014964535787409897609469678106596498057272338085661578854168958906204617275818132053049803982006260947262589054589740743211172013854227737495479191884292072690267680394844951217866621379444840688859487478302581452235327093207459988484331080277442181624893936609569547324709221965133798744370377439096780175138978203060624338553475971539243364626901034573991630232060406130967099253856425177819139272389046511138815734271286418644172493625203964214326996887595743204505741967018319315004056542327555516887429161357774781556245293350735872129203920651007825293855768267028524344438643403118635035651447565286304676812681250586918774642649194313743869319998312779791643869763348355285950195895363512245997671623619098995339842293455587496244320361852619641805802692191409124549152242996431883166014161344891508570365036455409387355589427633079419308730167856867582961059775308334102139408683883841526661994798019905653589308199667875399065736616624289050269875943419118951053026544383082495915480958739153482150209681138733232901128023850245605777693240998170278637586553170529024976442586034477044085118069730993565900188418655589318245893996522484376917833664286808370784685111627533605518001740777381262888903236038111977180249840306880943941410119101370433011964165660772096135363779874087077940226637177814078910798544503017267252984290686253139459826095077238825741692225617098238144726849266799847209411268710281700881930048898085117931839873041524451810686867972583369676091809354116097706191941644511737917420954703130397151696248777326757665209928620134952763309041019671531254838149964973833337668097788985661881257897062628054722197840301952890456827459368554732659973215934199113534561809263847912573420087536834753295072978379974900168783572262907111076278108131326808796107205357740418438512111922024851109707837168418588124685520825207767900555785819372085375033", "y": "-0.99029698047257866814914361741671777090710306538521249731018322833398187899067727147262315375304621354938754025401804215965088326099018748253792267355497684263373927327839817719862760745525466471240560001873122906352977800382390145417755954849555473018723245641437933172782099724890709148178683482577140888797394116656453180520224872483546335641386175211228129120388302348983968943208171171353960070019773203091493698777517247853220762823540664396719538863816326688115734472804607538266596362797641367202837157453832626693092122587242700547384363238807263352920393414122834851903696246246905431017112593256440431013896069229376892768144368631442240366553460803377580596922199892920773911540389391462286507082622582204012761892109430609285476193572103498897009043661009000250099213630726774839076104833291996016830374329475303647243993165502403524099259945154235182120946103188392459761977902312679418440998862187799614647112760949038268451474525558745584245414227248353438832195972391676855117134554577842927480662995355730065750069841967865975381405606654016378785234213865370717325779352983117550587517823775649294276720423643906879190073105104221066836987488147719214624898222531211211810045148768035409109896513602499227182985553786447951226138485539481093710592368549250896422893382371949040700505047570984137185096740558627590005746623343742182206662763100220838719567153733535788293377136403687006007901430564701943495204484700618381521360430496879077107360878351844894956045212049920916902288921445147217525702134420032074061492848461593817710449833545203087436146649324930955567950039678213897195813124699498716831139228528240701753331369374522575272400910934442452071181299944036596144404912252968046050212685269352980271563000573484894177933854746829885379224450760655936523092498330751435894713824863751524717198391024788381785813437364574026193138711121843039970493725345540651985297877922303103797963843835710652809016195591359917914246109150380052244199318592174864546378835578918158053"}
E := {"x": "0.019504880837260402115518331811472307890653610229492187499999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", "y": "-1.1467360669070304213246203062226413749158382415771484375"}

Need to prove:
concyclic(B, E, G, H)

Proof:
By line_definition on E, A, f we get f == Line(A, E)
By line_definition on A, F, h we get h == Line(A, F)
By line_definition on B, E, f we get f == Line(B, E)
By line_definition on D, E, j we get j == Line(D, E)
By line_definition on B, F, i we get i == Line(B, F)
By line_definition on D, C, g we get g == Line(C, D)
By line_intersection_definition on B, f, i we get B == line_intersection(f, i)
By circle_definition on A, C, D, c we get c == Circle(A, C, D)
By line_intersection_definition on D, j, g we get D == line_intersection(g, j)
By circle_definition on B, D, C, c we get c == Circle(B, C, D)
By line_intersection_definition on A, f, h we get A == line_intersection(f, h)
By circle_definition on A, D, B, c we get c == Circle(A, B, D)
By line_unique_intersection_v1 on j, g, D, C we get C not in j
By line_unique_intersection_v1 on j, f, E, B we get B not in j
By line_unique_intersection_v1 on g, j, D, E we get E not in g
By line_unique_intersection_v1 on f, j, E, D we get D not in f
By line_unique_intersection_v1 on j, f, E, A we get A not in j
By line_unique_intersection_v1 on h, i, F, B we get B not in h
By line_unique_intersection_v1 on f, i, B, F we get F not in f
By line_unique_intersection_v1 on i, f, B, E we get E not in i
By line_unique_intersection_v1 on i, h, F, A we get A not in i
By line_unique_intersection_v1 on h, f, A, E we get E not in h
By between_imply_not_between on B, G, F we get collinear_and_not_between(F, B, G)
By between_imply_not_between on F, G, B we get collinear_and_not_between(B, F, G)
By circle_radius_v0_r on A, c we get radius(c) == distance(A, center(c))
By circle_radius_v0_r on C, c we get radius(c) == distance(C, center(c))
By circle_radius_v0_r on B, c we get radius(c) == distance(B, center(c))
By circle_radius_v0_r on D, c we get radius(c) == distance(D, center(c))
By center_not_on_circle on c we get center(c) not in c
By different_points_v1 on B, A we get 0 != distance(A, B)
By in_imply_collinear on E, B, A we get collinear(A, B, E)
By angle_bisector_draw_angle_v0 on C, A, D we get exists(Line(A, C), Line(A, D))
By in_imply_concyclic on A, C, B, D we get concyclic(A, B, C, D)
By angle_bisector_draw_angle_v0 on A, D, B we get exists(Line(A, D), Line(B, D))
By angle_bisector_draw_angle_v0 on B, D, A we get exists(Line(A, D), Line(B, D))
By angle_bisector_draw_angle_v1 on A, C, B we get exists(Line(A, C), Line(B, C))
By not_in_line_equivalent_to_not_collinear_v0_r on C, B, A we get C not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on F, A, B we get F not in Line(A, B)
By angle_bisector_draw_angle_v0 on C, B, D we get exists(Line(B, C), Line(B, D))
By angle_bisector_draw_angle_v0 on D, A, C we get exists(Line(A, C), Line(A, D))
By angle_bisector_draw_angle_v1 on B, C, A we get exists(Line(A, C), Line(B, C))
By not_in_line_equivalent_to_not_collinear_v0_r on H, A, B we get H not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on G, A, B we get G not in Line(A, B)
By angle_bisector_draw_angle_v0 on D, B, C we get exists(Line(B, C), Line(B, D))
By not_in_line_equivalent_to_not_collinear_v0_r on D, B, A we get D not in Line(A, B)
By angles_on_chord_v0 on D, B, A, C, c we get angle(D, A, B) == angle(D, C, B) mod 360
By power_of_a_point_on_circle on B, c we get 0 == power_of_a_point(B, c)
By power_of_a_point_in_circle on C, c we get 0 == power_of_a_point(C, c)
By power_of_a_point_on_circle on A, c we get 0 == power_of_a_point(A, c)
By power_of_a_point_in_circle on D, c we get 0 == power_of_a_point(D, c)
By angle_to_center on D, B, A, c we get 2 * angle(D, B, A) == angle(D, center(c), A) mod 360
By angles_on_chord_v1 on A, B, D, C, c we get angle(A, C, B) == angle(A, D, B) mod 360
By angles_on_chord_v3 on D, A, B, C, c we get angle(D, B, A) == angle(D, C, A) + 180 mod 360
By angle_to_center on A, B, C, c we get 2 * angle(A, B, C) == angle(A, center(c), C) mod 360
By angles_on_chord_v2 on C, B, A, D, c we get angle(C, A, B) == angle(C, D, B) + 180 mod 360
By angles_on_chord_v1 on B, D, A, C, c we get angle(B, A, D) == angle(B, C, D) mod 360
By angles_on_chord_v0 on A, C, B, D, c we get angle(A, B, C) == angle(A, D, C) mod 360
By angles_on_chord_v3 on A, D, C, B, c we get angle(A, C, D) == angle(A, B, D) + 180 mod 360
By angles_on_chord_v2 on D, A, C, B, c we get angle(D, C, A) == angle(D, B, A) + 180 mod 360
By angles_on_chord_v1 on D, C, A, B, c we get angle(D, A, C) == angle(D, B, C) mod 360
By angles_on_chord_v3 on B, C, A, D, c we get angle(B, A, C) == angle(B, D, C) + 180 mod 360
By angles_on_chord_v3 on C, B, D, A, c we get angle(C, D, B) == angle(C, A, B) + 180 mod 360
By angles_on_chord_v0 on C, D, A, B, c we get angle(C, A, D) == angle(C, B, D) mod 360
By angles_on_chord_v0 on B, A, C, D, c we get angle(B, C, A) == angle(B, D, A) mod 360
By angles_on_chord_v2 on B, C, D, A, c we get angle(B, D, C) == angle(B, A, C) + 180 mod 360
By angles_on_chord_v1 on C, A, D, B, c we get angle(C, B, A) == angle(C, D, A) mod 360
By angle_to_center on C, B, A, c we get 2 * angle(C, B, A) == angle(C, center(c), A) mod 360
By angle_to_center on C, B, D, c we get 2 * angle(C, B, D) == angle(C, center(c), D) mod 360
By angle_to_center on B, D, A, c we get 2 * angle(B, D, A) == angle(B, center(c), A) mod 360
By angle_to_center on D, A, C, c we get 2 * angle(D, A, C) == angle(D, center(c), C) mod 360
By angles_on_chord_v2 on A, D, B, C, c we get angle(A, B, D) == angle(A, C, D) + 180 mod 360
By angle_to_center on B, A, C, c we get 2 * angle(B, A, C) == angle(B, center(c), C) mod 360
By angle_to_center on B, C, A, c we get 2 * angle(B, C, A) == angle(B, center(c), A) mod 360
By angle_to_center on A, C, D, c we get 2 * angle(A, C, D) == angle(A, center(c), D) mod 360
By angle_to_center on B, A, D, c we get 2 * angle(B, A, D) == angle(B, center(c), D) mod 360
By angle_to_center on C, D, B, c we get 2 * angle(C, D, B) == angle(C, center(c), B) mod 360
By angle_to_center on D, C, B, c we get 2 * angle(D, C, B) == angle(D, center(c), B) mod 360
By angle_to_center on A, D, C, c we get 2 * angle(A, D, C) == angle(A, center(c), C) mod 360
By angle_to_center on A, C, B, c we get 2 * angle(A, C, B) == angle(A, center(c), B) mod 360
By angle_to_center on A, D, B, c we get 2 * angle(A, D, B) == angle(A, center(c), B) mod 360
By angle_to_center on C, A, D, c we get 2 * angle(C, A, D) == angle(C, center(c), D) mod 360
By angle_to_center on C, A, B, c we get 2 * angle(C, A, B) == angle(C, center(c), B) mod 360
By angle_to_center on D, A, B, c we get 2 * angle(D, A, B) == angle(D, center(c), B) mod 360
By angle_to_center on B, C, D, c we get 2 * angle(B, C, D) == angle(B, center(c), D) mod 360
By angle_to_center on D, B, C, c we get 2 * angle(D, B, C) == angle(D, center(c), C) mod 360
By angle_to_center on C, D, A, c we get 2 * angle(C, D, A) == angle(C, center(c), A) mod 360
By angle_to_center on A, B, D, c we get 2 * angle(A, B, D) == angle(A, center(c), D) mod 360
By angle_to_center on B, D, C, c we get 2 * angle(B, D, C) == angle(B, center(c), C) mod 360
By angle_to_center on D, C, A, c we get 2 * angle(D, C, A) == angle(D, center(c), A) mod 360
By same_angle_v1 on B, F, G, A we get angle(F, B, A) == angle(G, B, A) mod 360
By log_of_2_times_distance on F, B, B, G we get log(distance(B, F)) == 0.6931471805599453 + log(distance(B, G))
By collinear_definition on F, G, B we get G in Line(B, F), B in Line(F, G), Line(B, F) == Line(F, G), 0 == 2 * angle(G, F, B) mod 360
By collinear_definition on G, F, B we get F in Line(B, G), B in Line(F, G), Line(B, G) == Line(F, G), 0 == 2 * angle(F, G, B) mod 360
By collinear_definition on F, B, G we get B in Line(F, G), G in Line(B, F), Line(B, F) == Line(F, G), 0 == 2 * angle(B, F, G) mod 360
By log_of_2_times_distance on B, F, F, G we get log(distance(B, F)) == 0.6931471805599453 + log(distance(F, G))
By collinear_definition on B, F, G we get F in Line(B, G), G in Line(B, F), Line(B, F) == Line(B, G), 0 == 2 * angle(F, B, G) mod 360
By collinear_definition on G, B, F we get B in Line(F, G), F in Line(B, G), Line(B, G) == Line(F, G), 0 == 2 * angle(B, G, F) mod 360
By collinear_definition on B, G, F we get G in Line(B, F), F in Line(B, G), Line(B, F) == Line(B, G), 0 == 2 * angle(G, B, F) mod 360
By isosceles_triangle_properties on G, B, F we get distance(B, G) == distance(F, G), angle(B, F, G) == angle(G, B, F) mod 360
By isosceles_triangle_properties on G, F, B we get distance(B, G) == distance(F, G), angle(F, B, G) == angle(G, F, B) mod 360
By between_implies_angles on F, G, B we get 180 == angle(F, G, B) mod 360, 0 == angle(G, B, F) mod 360, 0 == angle(B, F, G) mod 360
By between_implies_angles on B, G, F we get 180 == angle(B, G, F) mod 360, 0 == angle(G, F, B) mod 360, 0 == angle(F, B, G) mod 360
By line_unique_intersection_v1 on h, i, F, G we get G not in h
By same_angle_v0 on B, F, G, D we get angle(F, B, D) == angle(G, B, D) mod 360
By same_angle_v1 on B, F, G, C we get angle(F, B, C) == angle(G, B, C) mod 360
By different_points_v1 on D, C we get 0 != distance(C, D)
By same_angle_v1 on B, G, F, H we get angle(F, B, H) == angle(G, B, H) mod 360
By different_points_v1 on B, H we get 0 != distance(B, H)
By same_angle_v0 on B, A, E, F we get angle(A, B, F) == angle(E, B, F) mod 360
By different_points_v1 on E, B we get 0 != distance(B, E)
By different_points_v1 on D, A we get 0 != distance(A, D)
By same_angle_v0 on B, A, E, D we get angle(A, B, D) == angle(E, B, D) mod 360
By different_points_v1 on A, E we get 0 != distance(A, E)
By different_points_v1 on D, E we get 0 != distance(D, E)
By different_points_v1 on F, A we get 0 != distance(A, F)
By different_points_v1 on H, A we get 0 != distance(A, H)
By different_points_v1 on A, C we get 0 != distance(A, C)
By same_angle_v0 on F, G, B, A we get angle(B, F, A) == angle(G, F, A) mod 360
By different_points_v1 on B, D we get 0 != distance(B, D)
By different_points_v1 on C, H we get 0 != distance(C, H)
By same_angle_v1 on A, B, E, D we get angle(B, A, D) == angle(E, A, D) mod 360
By different_points_v1 on H, D we get 0 != distance(D, H)
By different_points_v1 on B, C we get 0 != distance(B, C)
By same_angle_v0 on B, E, A, G we get angle(A, B, G) == angle(E, B, G) mod 360
By same_angle_v0 on B, E, A, C we get angle(A, B, C) == angle(E, B, C) mod 360
By same_angle_v1 on B, G, F, E we get angle(F, B, E) == angle(G, B, E) mod 360
By same_angle_v1 on A, E, B, C we get angle(B, A, C) == angle(E, A, C) mod 360
By probably_between_and_collinear_implies_between on B, E, A we get between(A, E, B)
By reverse_direction on A, D we get 180 == direction(A, D) - direction(D, A) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on G, B, H we get G not in Line(B, H)
By not_in_line_equivalent_to_not_collinear_v0_r on G, C, D we get G not in Line(C, D)
By line_inequality on Line(D, H), f, H we get f != Line(D, H)
By reverse_direction on B, F we get 180 == direction(B, F) - direction(F, B) mod 360
By reverse_direction on G, B we get 180 == direction(G, B) - direction(B, G) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on E, H, A we get E not in Line(A, H)
By not_in_line_equivalent_to_not_collinear_v0_r on C, A, D we get C not in Line(A, D)
By reverse_direction on D, A we get 180 == direction(D, A) - direction(A, D) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on F, A, D we get F not in Line(A, D)
By reverse_direction on A, C we get 180 == direction(A, C) - direction(C, A) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on F, C, B we get F not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on B, A, D we get B not in Line(A, D)
By reverse_direction on B, C we get 180 == direction(B, C) - direction(C, B) mod 360
By internal_angle_bisector_definition_v0 on C, G, D, B we get angle(C, B, G) == angle(G, B, D) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on H, C, D we get H not in Line(C, D)
By line_inequality on Line(A, C), i, A we get i != Line(A, C)
By external_angle_bisector_definition_v0 on B, D, A, C we get 180 == angle(B, C, D) + angle(A, C, D) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on F, H, D we get F not in Line(D, H)
By not_in_line_equivalent_to_not_collinear_v0_r on C, G, F we get C not in Line(F, G)
By internal_angle_bisector_definition_v0 on D, G, C, B we get angle(D, B, G) == angle(G, B, C) mod 360
By reverse_direction on B, D we get 180 == direction(B, D) - direction(D, B) mod 360
By reverse_direction on A, B we get 180 == direction(A, B) - direction(B, A) mod 360
By line_inequality on Line(B, C), j, C we get j != Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on H, G, F we get H not in Line(F, G)
By not_in_line_equivalent_to_not_collinear_v0_r on G, C, A we get G not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on E, B, D we get E not in Line(B, D)
By reverse_direction on D, B we get 180 == direction(D, B) - direction(B, D) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on A, C, B we get A not in Line(B, C)
By reverse_direction on F, G we get 180 == direction(F, G) - direction(G, F) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on C, D, B we get C not in Line(B, D)
By internal_angle_bisector_definition_v0 on D, F, C, B we get angle(D, B, F) == angle(F, B, C) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on H, B, D we get H not in Line(B, D)
By internal_angle_bisector_definition_v0 on C, F, D, B we get angle(C, B, F) == angle(F, B, D) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on E, B, H we get E not in Line(B, H)
By not_in_line_equivalent_to_not_collinear_v0_r on C, F, A we get C not in Line(A, F)
By not_in_line_equivalent_to_not_collinear_v0_r on B, H, D we get B not in Line(D, H)
By not_in_line_equivalent_to_not_collinear_v0_r on C, H, A we get C not in Line(A, H)
By reverse_direction on F, B we get 180 == direction(F, B) - direction(B, F) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on H, B, G we get H not in Line(B, G)
By not_in_line_equivalent_to_not_collinear_v0_r on H, A, D we get H not in Line(A, D)
By reverse_direction on B, G we get 180 == direction(B, G) - direction(G, B) mod 360
By reverse_direction on D, C we get 180 == direction(D, C) - direction(C, D) mod 360
By reverse_direction on B, A we get 180 == direction(B, A) - direction(A, B) mod 360
By reverse_direction on C, D we get 180 == direction(C, D) - direction(D, C) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on H, A, C we get H not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on G, B, C we get G not in Line(B, C)
By reverse_direction on C, B we get 180 == direction(C, B) - direction(B, C) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on A, D, B we get A not in Line(B, D)
By reverse_direction on C, A we get 180 == direction(C, A) - direction(A, C) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on F, C, D we get F not in Line(C, D)
By reverse_direction on G, F we get 180 == direction(G, F) - direction(F, G) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on D, F, A we get D not in Line(A, F)
By not_in_line_equivalent_to_not_collinear_v0_r on F, C, A we get F not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on H, B, C we get H not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on A, B, H we get A not in Line(B, H)
By line_inequality on Line(B, C), h, B we get h != Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on E, D, A we get E not in Line(A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on F, D, E we get F not in Line(D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on D, C, B we get D not in Line(B, C)
By line_inequality on Line(B, D), h, B we get h != Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on B, C, A we get B not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on B, H, C we get B not in Line(C, H)
By not_in_line_equivalent_to_not_collinear_v0_r on B, D, C we get B not in Line(C, D)
By not_in_line_equivalent_to_not_collinear_v0_r on H, B, F we get H not in Line(B, F)
By not_in_line_equivalent_to_not_collinear_v0_r on D, B, H we get D not in Line(B, H)
By not_in_line_equivalent_to_not_collinear_v0_r on G, B, D we get G not in Line(B, D)
By line_inequality on Line(C, H), j, C we get j != Line(C, H)
By not_in_line_equivalent_to_not_collinear_v0_r on E, C, B we get E not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on G, A, H we get G not in Line(A, H)
By not_in_line_equivalent_to_not_collinear_v0_r on E, H, C we get E not in Line(C, H)
By not_in_line_equivalent_to_not_collinear_v0_r on C, D, H we get C not in Line(D, H)
By not_in_line_equivalent_to_not_collinear_v0_r on B, A, H we get B not in Line(A, H)
By not_in_line_equivalent_to_not_collinear_v0_r on D, A, C we get D not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on F, D, B we get F not in Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on G, E, D we get G not in Line(D, E)
By line_circle_intersection_has_at_most_two_points_0 on B, A, E, c we get E not in c
By not_in_line_equivalent_to_not_collinear_v0_r on D, G, B we get D not in Line(B, G)
By not_in_line_equivalent_to_not_collinear_v0_r on D, F, G we get D not in Line(F, G)
By not_in_line_equivalent_to_not_collinear_v0_r on F, B, H we get F not in Line(B, H)
By not_in_line_equivalent_to_not_collinear_v0_r on E, A, C we get E not in Line(A, C)
By line_inequality on Line(B, H), h, B we get h != Line(B, H)
By not_in_line_equivalent_to_not_collinear_v0_r on A, C, H we get A not in Line(C, H)
By not_in_line_equivalent_to_not_collinear_v0_r on C, G, B we get C not in Line(B, G)
By not_in_line_equivalent_to_not_collinear_v0_r on G, D, H we get G not in Line(D, H)
By not_in_line_equivalent_to_not_collinear_v0_r on G, D, A we get G not in Line(A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on C, B, F we get C not in Line(B, F)
By not_in_line_equivalent_to_not_collinear_v0_r on A, C, D we get A not in Line(C, D)
By line_inequality on Line(C, H), f, C we get f != Line(C, H)
By not_in_line_equivalent_to_not_collinear_v0_r on H, F, A we get H not in Line(A, F)
By line_inequality on Line(A, C), j, A we get j != Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on G, A, F we get G not in Line(A, F)
By line_inequality on Line(A, H), f, H we get f != Line(A, H)
By line_inequality on Line(A, H), i, A we get i != Line(A, H)
By not_in_line_equivalent_to_not_collinear_v0_r on G, H, C we get G not in Line(C, H)
By line_inequality on Line(B, D), f, D we get f != Line(B, D)
By line_inequality on Line(A, H), j, A we get j != Line(A, H)
By line_inequality on Line(A, D), j, A we get j != Line(A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on D, F, B we get D not in Line(B, F)
By not_in_line_equivalent_to_not_collinear_v0_r on F, H, C we get F not in Line(C, H)
By line_inequality on Line(B, H), f, H we get f != Line(B, H)
By line_inequality on Line(A, D), i, A we get i != Line(A, D)
By line_inequality on Line(B, D), j, B we get j != Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on C, B, H we get C not in Line(B, H)
By not_in_line_equivalent_to_not_collinear_v0_r on D, H, A we get D not in Line(A, H)
By line_inequality on Line(A, D), f, D we get f != Line(A, D)
By line_inequality on Line(A, C), f, C we get f != Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on A, H, D we get A not in Line(D, H)
By line_inequality on Line(B, H), j, B we get j != Line(B, H)
By not_in_line_equivalent_to_not_collinear_v0_r on D, C, H we get D not in Line(C, H)
By line_inequality on Line(B, C), f, C we get f != Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on F, A, H we get F not in Line(A, H)
By same_angle_v0 on A, B, E, H we get angle(B, A, H) == angle(E, A, H) mod 360
By same_angle_v1 on B, E, A, H we get angle(A, B, H) == angle(E, B, H) mod 360
By same_angle_v1 on A, E, B, F we get angle(B, A, F) == angle(E, A, F) mod 360
By internal_angle_bisector_definition_v0_r on F, G, F, B we get Line(B, G) == internal_angle_bisector(F, B, F)
By internal_angle_bisector_definition_v0_r on B, G, B, F we get Line(F, G) == internal_angle_bisector(B, F, B)
By collinear_definition on B, A, E we get A in Line(B, E), E in Line(A, B), Line(A, B) == Line(B, E), 0 == 2 * angle(A, B, E) mod 360
By internal_angle_bisector_definition_v0_r on G, B, G, F we get Line(B, F) == internal_angle_bisector(G, F, G)
By internal_angle_bisector_definition_v0 on C, F, D, A we get angle(C, A, F) == angle(F, A, D) mod 360
By reverse_direction on H, C we get 180 == direction(H, C) - direction(C, H) mod 360
By internal_angle_bisector_definition_v0 on D, F, C, A we get angle(D, A, F) == angle(F, A, C) mod 360
By collinear_definition on A, B, E we get B in Line(A, E), E in Line(A, B), Line(A, B) == Line(A, E), 0 == 2 * angle(B, A, E) mod 360
By reverse_direction on H, B we get 180 == direction(H, B) - direction(B, H) mod 360
By internal_angle_bisector_definition_v0_r on B, F, B, G we get Line(F, G) == internal_angle_bisector(B, G, B)
By internal_angle_bisector_definition_v0_r on G, F, G, B we get Line(B, F) == internal_angle_bisector(G, B, G)
By collinear_definition on A, E, B we get E in Line(A, B), B in Line(A, E), Line(A, B) == Line(A, E), 0 == 2 * angle(E, A, B) mod 360
By internal_angle_bisector_definition_v0_r on F, B, F, G we get Line(B, G) == internal_angle_bisector(F, G, F)
By reverse_direction on H, A we get 180 == direction(H, A) - direction(A, H) mod 360
By reverse_direction on H, D we get 180 == direction(H, D) - direction(D, H) mod 360
By internal_angle_bisector_definition_v0 on A, E, B, D we get angle(A, D, E) == angle(E, D, B) mod 360
By collinear_definition on B, E, A we get E in Line(A, B), A in Line(B, E), Line(A, B) == Line(B, E), 0 == 2 * angle(E, B, A) mod 360
By internal_angle_bisector_definition_v0 on B, E, A, D we get angle(B, D, E) == angle(E, D, A) mod 360
By same_angle_v2 on E, A, B, D we get angle(A, E, D) == angle(B, E, D) + 180 mod 360
By sas_anti_congruence on B, H, C, C, H, B we get anti_congruent_triangles(B, C, H, C, B, H)
By sss_anti_congruence_v1 on B, H, A, A, H, B we get anti_congruent_triangles(A, B, H, B, A, H)
By sss_anti_congruence_v1 on H, A, B, H, B, A we get anti_congruent_triangles(A, B, H, B, A, H)
By isosceles_triangle_properties on H, C, D we get distance(C, H) == distance(D, H), angle(C, D, H) == angle(H, C, D) mod 360
By sss_anti_congruence_v1 on B, H, A, A, H, B we get anti_congruent_triangles(A, B, H, B, A, H)
By sas_anti_congruence on A, H, D, D, H, A we get anti_congruent_triangles(A, D, H, D, A, H)
By isosceles_triangle_properties on H, B, A we get distance(A, H) == distance(B, H), angle(B, A, H) == angle(H, B, A) mod 360
By isosceles_triangle_properties on H, A, C we get distance(A, H) == distance(C, H), angle(A, C, H) == angle(H, A, C) mod 360
By isosceles_triangle_properties on H, A, B we get distance(A, H) == distance(B, H), angle(A, B, H) == angle(H, A, B) mod 360
By sss_anti_congruence_v1 on A, B, H, B, A, H we get anti_congruent_triangles(A, B, H, B, A, H)
By sss_anti_congruence_v1 on A, B, H, B, A, H we get anti_congruent_triangles(A, B, H, B, A, H)
By sas_anti_congruence on C, H, B, B, H, C we get anti_congruent_triangles(B, C, H, C, B, H)
By sss_anti_congruence_v1 on A, B, H, B, A, H we get anti_congruent_triangles(A, B, H, B, A, H)
By sss_anti_congruence_v1 on H, A, B, H, B, A we get anti_congruent_triangles(A, B, H, B, A, H)
By sss_anti_congruence_v1 on B, H, A, A, H, B we get anti_congruent_triangles(A, B, H, B, A, H)
By sss_anti_congruence_v0 on H, B, A, H, A, B we get anti_congruent_triangles(A, B, H, B, A, H)
By isosceles_triangle_properties on H, A, D we get distance(A, H) == distance(D, H), angle(A, D, H) == angle(H, A, D) mod 360
By isosceles_triangle_properties on H, B, C we get distance(B, H) == distance(C, H), angle(B, C, H) == angle(H, B, C) mod 360
By sss_anti_congruence_v1 on H, A, B, H, B, A we get anti_congruent_triangles(A, B, H, B, A, H)
By sss_anti_congruence_v0 on A, H, B, B, H, A we get anti_congruent_triangles(A, B, H, B, A, H)
By sas_anti_congruence on A, H, C, C, H, A we get anti_congruent_triangles(A, C, H, C, A, H)
By sss_anti_congruence_v1 on B, H, A, A, H, B we get anti_congruent_triangles(A, B, H, B, A, H)
By sas_anti_congruence on D, H, B, B, H, D we get anti_congruent_triangles(B, D, H, D, B, H)
By sas_anti_congruence on A, H, B, B, H, A we get anti_congruent_triangles(A, B, H, B, A, H)
By sss_anti_congruence_v0 on B, A, H, A, B, H we get anti_congruent_triangles(A, B, H, B, A, H)
By isosceles_triangle_properties on H, D, B we get distance(B, H) == distance(D, H), angle(D, B, H) == angle(H, D, B) mod 360
By sss_anti_congruence_v0 on A, H, B, B, H, A we get anti_congruent_triangles(A, B, H, B, A, H)
By sas_anti_congruence on D, H, A, A, H, D we get anti_congruent_triangles(A, D, H, D, A, H)
By isosceles_triangle_properties on H, D, C we get distance(C, H) == distance(D, H), angle(D, C, H) == angle(H, D, C) mod 360
By sss_anti_congruence_v1 on A, B, H, B, A, H we get anti_congruent_triangles(A, B, H, B, A, H)
By collinear_definition on E, A, B we get A in Line(B, E), B in Line(A, E), Line(A, E) == Line(B, E), 0 == 2 * angle(A, E, B) mod 360
By sss_anti_congruence_v1 on B, H, A, A, H, B we get anti_congruent_triangles(A, B, H, B, A, H)
By sss_anti_congruence_v1 on H, A, B, H, B, A we get anti_congruent_triangles(A, B, H, B, A, H)
By sss_anti_congruence_v1 on B, H, A, A, H, B we get anti_congruent_triangles(A, B, H, B, A, H)
By sss_anti_congruence_v0 on B, A, H, A, B, H we get anti_congruent_triangles(A, B, H, B, A, H)
By sss_anti_congruence_v0 on H, B, A, H, A, B we get anti_congruent_triangles(A, B, H, B, A, H)
By isosceles_triangle_properties on H, C, A we get distance(A, H) == distance(C, H), angle(C, A, H) == angle(H, C, A) mod 360
By isosceles_triangle_properties on H, B, D we get distance(B, H) == distance(D, H), angle(B, D, H) == angle(H, B, D) mod 360
By sss_anti_congruence_v1 on H, A, B, H, B, A we get anti_congruent_triangles(A, B, H, B, A, H)
By sss_anti_congruence_v0 on H, B, A, H, A, B we get anti_congruent_triangles(A, B, H, B, A, H)
By sss_anti_congruence_v1 on A, B, H, B, A, H we get anti_congruent_triangles(A, B, H, B, A, H)
By sas_anti_congruence on D, H, C, C, H, D we get anti_congruent_triangles(C, D, H, D, C, H)
By sss_anti_congruence_v0 on B, A, H, A, B, H we get anti_congruent_triangles(A, B, H, B, A, H)
By sss_anti_congruence_v0 on H, B, A, H, A, B we get anti_congruent_triangles(A, B, H, B, A, H)
By sas_anti_congruence on C, H, A, A, H, C we get anti_congruent_triangles(A, C, H, C, A, H)
By sss_anti_congruence_v0 on A, H, B, B, H, A we get anti_congruent_triangles(A, B, H, B, A, H)
By sas_anti_congruence on C, H, D, D, H, C we get anti_congruent_triangles(C, D, H, D, C, H)
By sss_anti_congruence_v0 on H, B, A, H, A, B we get anti_congruent_triangles(A, B, H, B, A, H)
By sss_anti_congruence_v0 on B, A, H, A, B, H we get anti_congruent_triangles(A, B, H, B, A, H)
By sss_anti_congruence_v0 on B, A, H, A, B, H we get anti_congruent_triangles(A, B, H, B, A, H)
By isosceles_triangle_properties on H, D, A we get distance(A, H) == distance(D, H), angle(D, A, H) == angle(H, D, A) mod 360
By sas_anti_congruence on B, H, A, A, H, B we get anti_congruent_triangles(A, B, H, B, A, H)
By sss_anti_congruence_v1 on H, A, B, H, B, A we get anti_congruent_triangles(A, B, H, B, A, H)
By sss_anti_congruence_v0 on B, A, H, A, B, H we get anti_congruent_triangles(A, B, H, B, A, H)
By sss_anti_congruence_v1 on A, B, H, B, A, H we get anti_congruent_triangles(A, B, H, B, A, H)
By sas_anti_congruence on B, H, D, D, H, B we get anti_congruent_triangles(B, D, H, D, B, H)
By sss_anti_congruence_v0 on A, H, B, B, H, A we get anti_congruent_triangles(A, B, H, B, A, H)
By collinear_definition on E, B, A we get B in Line(A, E), A in Line(B, E), Line(A, E) == Line(B, E), 0 == 2 * angle(B, E, A) mod 360
By sss_anti_congruence_v0 on H, B, A, H, A, B we get anti_congruent_triangles(A, B, H, B, A, H)
By isosceles_triangle_properties on H, C, B we get distance(B, H) == distance(C, H), angle(C, B, H) == angle(H, C, B) mod 360
By sss_anti_congruence_v0 on A, H, B, B, H, A we get anti_congruent_triangles(A, B, H, B, A, H)
By sss_anti_congruence_v0 on A, H, B, B, H, A we get anti_congruent_triangles(A, B, H, B, A, H)
By chords_on_equal_angles_v1 on A, C, D, B, C, D, c we get distance(A, D) == distance(B, D)
By line_intersection_definition on A, Line(A, D), f we get A == line_intersection(f, Line(A, D))
By line_intersection_definition on B, f, Line(B, C) we get B == line_intersection(f, Line(B, C))
By line_intersection_definition on A, f, Line(A, H) we get A == line_intersection(f, Line(A, H))
By line_intersection_definition on D, Line(B, D), j we get D == line_intersection(j, Line(B, D))
By line_intersection_definition on B, Line(B, D), f we get B == line_intersection(f, Line(B, D))
By line_intersection_definition on D, Line(A, D), j we get D == line_intersection(j, Line(A, D))
By line_intersection_definition on A, Line(A, C), f we get A == line_intersection(f, Line(A, C))
By line_intersection_definition on B, Line(B, H), f we get B == line_intersection(f, Line(B, H))
By perpendicular_direction_conditions_v0 on A, E, H, D we get perpendicular(Line(A, E), Line(D, H))
By perpendicular_direction_conditions_v0 on B, A, D, H we get perpendicular(Line(A, B), Line(D, H))
By perpendicular_direction_conditions_v0 on A, E, D, E we get perpendicular(Line(A, E), Line(D, E))
By perpendicular_direction_conditions_v0 on D, E, A, B we get perpendicular(Line(A, B), Line(D, E))
By perpendicular_direction_conditions_v0 on B, E, D, H we get perpendicular(Line(B, E), Line(D, H))
By perpendicular_direction_conditions_v0 on B, E, D, E we get perpendicular(Line(B, E), Line(D, E))
By between_imply_not_between on A, E, B we get collinear_and_not_between(B, A, E)
By between_imply_not_between on B, E, A we get collinear_and_not_between(A, B, E)
By divide_by_2_mod_180_v0 on F, A, D, C, B, G we get angle(C, B, G) == angle(F, A, D) mod 360
By divide_by_2_mod_180_v0 on F, A, D, F, B, D we get angle(F, A, D) == angle(F, B, D) mod 360
By divide_by_2_mod_180_v0 on F, A, D, C, B, F we get angle(C, B, F) == angle(F, A, D) mod 360
By divide_by_2_mod_180_v1 on E, D, B, H, A, D we get angle(E, D, B) == angle(H, A, D) mod 360
By divide_by_2_mod_180_v0 on G, B, D, F, A, D we get angle(F, A, D) == angle(G, B, D) mod 360
By divide_by_2_mod_180_v1 on D, B, F, F, A, C we get angle(D, B, F) == angle(F, A, C) mod 360
By divide_by_2_mod_180_v1 on F, B, C, D, A, F we get angle(D, A, F) == angle(F, B, C) mod 360
By divide_by_2_mod_180_v0 on E, D, A, B, D, H we get angle(B, D, H) == angle(E, D, A) mod 360
By anti_congruence_from_anti_similar_triangles on H, A, D, H, B, D we get anti_congruent_triangles(A, D, H, B, D, H)
By divide_by_2_mod_180_v1 on H, D, B, E, D, B we get angle(E, D, B) == angle(H, D, B) mod 360
By divide_by_2_mod_180_v1 on H, D, B, A, D, E we get angle(A, D, E) == angle(H, D, B) mod 360
By divide_by_2_mod_180_v1 on F, A, C, F, B, C we get angle(F, A, C) == angle(F, B, C) mod 360
By divide_by_2_mod_180_v0 on B, D, E, H, B, D we get angle(B, D, E) == angle(H, B, D) mod 360
By divide_by_2_mod_180_v0 on G, B, D, C, A, F we get angle(C, A, F) == angle(G, B, D) mod 360
By divide_by_2_mod_180_v0 on F, B, D, C, A, F we get angle(C, A, F) == angle(F, B, D) mod 360
By divide_by_2_mod_180_v0 on H, D, A, B, D, E we get angle(B, D, E) == angle(H, D, A) mod 360
By asa_congruence on H, D, A, H, B, D we get congruent_triangles(A, D, H, D, B, H)
By divide_by_2_mod_180_v1 on E, D, B, A, D, H we get angle(A, D, H) == angle(E, D, B) mod 360
By divide_by_2_mod_180_v0 on B, D, E, D, A, H we get angle(B, D, E) == angle(D, A, H) mod 360
By reverse_direction on F, A we get 180 == direction(F, A) - direction(A, F) mod 360
By divide_by_2_mod_180_v0 on C, A, F, C, B, F we get angle(C, A, F) == angle(C, B, F) mod 360
By divide_by_2_mod_180_v1 on F, A, C, G, B, C we get angle(F, A, C) == angle(G, B, C) mod 360
By divide_by_2_mod_180_v1 on D, A, F, D, B, F we get angle(D, A, F) == angle(D, B, F) mod 360
By divide_by_2_mod_180_v1 on F, A, C, D, B, G we get angle(D, B, G) == angle(F, A, C) mod 360
By line_inequality on Line(A, D), Line(B, C), A we get Line(A, D) != Line(B, C)
By line_inequality on Line(B, C), Line(B, D), C we get Line(B, C) != Line(B, D)
By asa_anti_congruence on D, H, B, D, H, A we get anti_congruent_triangles(A, D, H, B, D, H)
By divide_by_2_mod_180_v0 on E, D, A, H, B, D we get angle(E, D, A) == angle(H, B, D) mod 360
By divide_by_2_mod_180_v1 on D, A, F, D, B, G we get angle(D, A, F) == angle(D, B, G) mod 360
By asa_anti_congruence on B, A, D, A, B, D we get anti_congruent_triangles(A, B, D, B, A, D)
By divide_by_2_mod_180_v0 on E, D, A, H, D, A we get angle(E, D, A) == angle(H, D, A) mod 360
By divide_by_2_mod_180_v0 on C, B, G, C, A, F we get angle(C, A, F) == angle(C, B, G) mod 360
By line_inequality on i, Line(D, H), F we get i != Line(D, H)
By divide_by_2_mod_180_v0 on B, D, E, B, D, H we get angle(B, D, E) == angle(B, D, H) mod 360
By asa_congruence on D, H, A, B, H, D we get congruent_triangles(A, D, H, D, B, H)
By sas_anti_congruence on D, H, A, D, H, B we get anti_congruent_triangles(A, D, H, B, D, H)
By divide_by_2_mod_180_v1 on D, A, F, G, B, C we get angle(D, A, F) == angle(G, B, C) mod 360
By divide_by_2_mod_180_v1 on H, A, D, A, D, E we get angle(A, D, E) == angle(H, A, D) mod 360
By divide_by_2_mod_180_v0 on E, D, A, D, A, H we get angle(D, A, H) == angle(E, D, A) mod 360
By divide_by_2_mod_180_v1 on A, D, E, D, B, H we get angle(A, D, E) == angle(D, B, H) mod 360
By asa_anti_congruence on H, D, A, H, D, B we get anti_congruent_triangles(A, D, H, B, D, H)
By divide_by_2_mod_180_v1 on E, D, B, D, B, H we get angle(D, B, H) == angle(E, D, B) mod 360
By line_inequality on g, Line(A, C), D we get g != Line(A, C)
By sas_anti_congruence on D, H, B, D, H, A we get anti_congruent_triangles(A, D, H, B, D, H)
By line_inequality on i, Line(C, H), B we get i != Line(C, H)
By line_inequality on i, Line(B, C), G we get i != Line(B, C)
By line_inequality on Line(C, H), Line(B, D), C we get Line(B, D) != Line(C, H)
By sas_anti_congruence on B, H, D, A, H, D we get anti_congruent_triangles(A, D, H, B, D, H)
By congruence_from_similar_triangles on H, A, D, H, D, B we get congruent_triangles(A, D, H, D, B, H)
By line_inequality on Line(D, H), Line(B, C), H we get Line(B, C) != Line(D, H)
By asa_congruence on H, A, D, H, D, B we get congruent_triangles(A, D, H, D, B, H)
By congruence_from_similar_triangles on D, H, A, B, H, D we get congruent_triangles(A, D, H, D, B, H)
By asa_anti_congruence on H, A, D, H, B, D we get anti_congruent_triangles(A, D, H, B, D, H)
By asa_congruence on A, H, D, D, H, B we get congruent_triangles(A, D, H, D, B, H)
By anti_congruence_from_anti_similar_triangles on H, B, D, H, A, D we get anti_congruent_triangles(A, D, H, B, D, H)
By reverse_direction on A, E we get 180 == direction(A, E) - direction(E, A) mod 360
By reverse_direction on D, E we get 180 == direction(D, E) - direction(E, D) mod 360
By congruence_from_similar_triangles on B, H, D, D, H, A we get congruent_triangles(A, D, H, D, B, H)
By divide_by_2_mod_180_v1 on A, D, E, A, D, H we get angle(A, D, E) == angle(A, D, H) mod 360
By isosceles_triangle_from_angles on D, B, A we get isosceles_triangle(D, A, B)
By congruence_from_similar_triangles on A, H, D, D, H, B we get congruent_triangles(A, D, H, D, B, H)
By aa_anti_similarity on E, D, A, E, D, B we get anti_similar_triangles(A, D, E, B, D, E)
By anti_congruence_from_anti_similar_triangles on A, B, D, B, A, D we get anti_congruent_triangles(A, B, D, B, A, D)
By anti_congruence_from_anti_similar_triangles on H, D, A, H, D, B we get anti_congruent_triangles(A, D, H, B, D, H)
By line_inequality on h, Line(A, C), F we get h != Line(A, C)
By anti_congruence_from_anti_similar_triangles on H, D, B, H, D, A we get anti_congruent_triangles(A, D, H, B, D, H)
By asa_congruence on D, H, B, A, H, D we get congruent_triangles(A, D, H, D, B, H)
By line_inequality on Line(C, H), Line(A, D), H we get Line(A, D) != Line(C, H)
By aa_anti_similarity on E, A, D, E, B, D we get anti_similar_triangles(A, D, E, B, D, E)
By line_inequality on Line(A, C), Line(A, D), C we get Line(A, C) != Line(A, D)
By sas_anti_congruence on A, H, D, B, H, D we get anti_congruent_triangles(A, D, H, B, D, H)
By line_inequality on g, Line(C, H), D we get g != Line(C, H)
By reverse_direction on E, D we get 180 == direction(E, D) - direction(D, E) mod 360
By asa_anti_congruence on D, H, A, D, H, B we get anti_congruent_triangles(A, D, H, B, D, H)
By aa_anti_similarity on E, D, B, E, D, A we get anti_similar_triangles(A, D, E, B, D, E)
By asa_anti_congruence on B, H, D, A, H, D we get anti_congruent_triangles(A, D, H, B, D, H)
By asa_congruence on H, D, B, H, A, D we get congruent_triangles(A, D, H, D, B, H)
By sas_congruence on B, H, D, D, H, A we get congruent_triangles(A, D, H, D, B, H)
By congruence_from_similar_triangles on H, D, B, H, A, D we get congruent_triangles(A, D, H, D, B, H)
By line_inequality on Line(C, H), Line(A, C), H we get Line(A, C) != Line(C, H)
By line_inequality on Line(D, H), h, D we get h != Line(D, H)
By line_inequality on Line(B, H), g, H we get g != Line(B, H)
By reverse_direction on E, A we get 180 == direction(E, A) - direction(A, E) mod 360
By anti_congruence_from_anti_similar_triangles on B, H, D, A, H, D we get anti_congruent_triangles(A, D, H, B, D, H)
By asa_anti_congruence on A, B, D, B, A, D we get anti_congruent_triangles(A, B, D, B, A, D)
By line_inequality on Line(A, H), Line(B, D), H we get Line(A, H) != Line(B, D)
By asa_anti_congruence on H, D, B, H, D, A we get anti_congruent_triangles(A, D, H, B, D, H)
By between_imply_segment_sum on B, E, A we get distance(A, B) == distance(B, E) + distance(A, E)
By anti_congruence_from_anti_similar_triangles on B, A, D, A, B, D we get anti_congruent_triangles(A, B, D, B, A, D)
By line_inequality on g, Line(D, H), C we get g != Line(D, H)
By congruence_from_similar_triangles on D, H, B, A, H, D we get congruent_triangles(A, D, H, D, B, H)
By line_inequality on Line(C, H), Line(A, H), C we get Line(A, H) != Line(C, H)
By internal_angle_bisector_definition_v0_r on B, H, A, D we get Line(D, H) == internal_angle_bisector(A, D, B)
By line_inequality on Line(B, D), Line(B, H), D we get Line(B, D) != Line(B, H)
By sas_congruence on D, H, B, A, H, D we get congruent_triangles(A, D, H, D, B, H)
By anti_congruence_from_anti_similar_triangles on D, H, B, D, H, A we get anti_congruent_triangles(A, D, H, B, D, H)
By asa_congruence on H, B, D, H, D, A we get congruent_triangles(A, D, H, D, B, H)
By reverse_direction on E, B we get 180 == direction(E, B) - direction(B, E) mod 360
By sas_congruence on D, H, A, B, H, D we get congruent_triangles(A, D, H, D, B, H)
By asa_anti_congruence on A, H, D, B, H, D we get anti_congruent_triangles(A, D, H, B, D, H)
By reverse_direction on B, E we get 180 == direction(B, E) - direction(E, B) mod 360
By anti_congruence_from_anti_similar_triangles on D, H, A, D, H, B we get anti_congruent_triangles(A, D, H, B, D, H)
By line_inequality on Line(A, D), g, A we get g != Line(A, D)
By aa_anti_similarity on E, B, D, E, A, D we get anti_similar_triangles(A, D, E, B, D, E)
By congruence_from_similar_triangles on H, D, A, H, B, D we get congruent_triangles(A, D, H, D, B, H)
By asa_congruence on B, H, D, D, H, A we get congruent_triangles(A, D, H, D, B, H)
By congruence_from_similar_triangles on H, B, D, H, D, A we get congruent_triangles(A, D, H, D, B, H)
By anti_congruence_from_anti_similar_triangles on A, H, D, B, H, D we get anti_congruent_triangles(A, D, H, B, D, H)
By line_inequality on Line(A, C), Line(B, C), A we get Line(A, C) != Line(B, C)
By line_inequality on Line(D, H), Line(C, H), D we get Line(C, H) != Line(D, H)
By asa_anti_congruence on H, B, D, H, A, D we get anti_congruent_triangles(A, D, H, B, D, H)
By reverse_direction on A, F we get 180 == direction(A, F) - direction(F, A) mod 360
By line_inequality on Line(A, H), g, H we get g != Line(A, H)
By sas_congruence on A, H, D, D, H, B we get congruent_triangles(A, D, H, D, B, H)
By isosceles_triangle_from_angles on D, A, B we get isosceles_triangle(D, A, B)
By line_inequality on Line(A, H), Line(B, C), A we get Line(A, H) != Line(B, C)
By line_inequality on Line(B, C), Line(C, H), B we get Line(B, C) != Line(C, H)
By line_inequality on Line(A, C), Line(B, D), A we get Line(A, C) != Line(B, D)
By line_inequality on Line(B, H), Line(A, D), H we get Line(A, D) != Line(B, H)
By line_inequality on Line(D, H), Line(A, C), D we get Line(A, C) != Line(D, H)
By line_inequality on Line(C, H), h, C we get h != Line(C, H)
By line_inequality on Line(B, H), Line(A, H), B we get Line(A, H) != Line(B, H)
By line_inequality on Line(A, C), Line(B, H), A we get Line(A, C) != Line(B, H)
By line_inequality on Line(D, H), Line(B, D), H we get Line(B, D) != Line(D, H)
By line_inequality on i, Line(B, D), F we get i != Line(B, D)
By line_inequality on Line(A, D), Line(B, D), A we get Line(A, D) != Line(B, D)
By line_inequality on Line(B, C), g, B we get g != Line(B, C)
By line_inequality on Line(A, C), Line(A, H), C we get Line(A, C) != Line(A, H)
By line_inequality on Line(D, H), Line(B, H), D we get Line(B, H) != Line(D, H)
By line_inequality on Line(B, H), i, H we get i != Line(B, H)
By line_inequality on Line(B, H), Line(C, H), B we get Line(B, H) != Line(C, H)
By line_inequality on Line(A, D), Line(A, H), D we get Line(A, D) != Line(A, H)
By line_inequality on Line(D, H), Line(A, D), H we get Line(A, D) != Line(D, H)
By line_inequality on Line(A, D), h, D we get h != Line(A, D)
By line_inequality on Line(B, C), Line(B, H), C we get Line(B, C) != Line(B, H)
By line_inequality on Line(A, H), h, H we get h != Line(A, H)
By line_inequality on Line(D, H), Line(A, H), D we get Line(A, H) != Line(D, H)
By line_inequality on Line(B, D), g, B we get g != Line(B, D)
By tangent_chord_angle_v1 on D, A, H, B we get tangent(Line(B, D), Circle(A, D, H))
By tangent_chord_angle_v1 on D, B, H, A we get tangent(Line(A, D), Circle(B, D, H))
By internal_angle_bisector_definition_v0_r on A, D, B, H we get Line(D, H) == internal_angle_bisector(A, H, B)
By internal_angle_bisector_definition_v0_r on B, A, B, E we get Line(A, E) == internal_angle_bisector(B, E, B)
By internal_angle_bisector_definition_v0_r on E, A, E, B we get Line(A, B) == internal_angle_bisector(E, B, E)
By internal_angle_bisector_definition_v0_r on A, E, A, B we get Line(B, E) == internal_angle_bisector(A, B, A)
By internal_angle_bisector_definition_v0_r on E, B, E, A we get Line(A, B) == internal_angle_bisector(E, A, E)
By internal_angle_bisector_definition_v0_r on A, B, A, E we get Line(B, E) == internal_angle_bisector(A, E, A)
By internal_angle_bisector_definition_v0_r on B, E, B, A we get Line(A, E) == internal_angle_bisector(B, A, B)
By anti_similar_triangle_basic_properties on H, D, C, H, C, D we get not_collinear(C, D, H), not_collinear(C, D, H), angle(H, D, C) == 0 - angle(H, C, D) mod 360, angle(D, C, H) == 0 - angle(C, D, H) mod 360, angle(C, H, D) == 0 - angle(D, H, C) mod 360, log(distance(C, H)) + log(distance(C, D)) == log(distance(D, H)) + log(distance(C, D)), log(distance(C, D)) + log(distance(C, H)) == log(distance(C, D)) + log(distance(D, H)), log(distance(C, H)) + log(distance(C, H)) == log(distance(D, H)) + log(distance(D, H))
By anti_similar_triangle_basic_properties on H, B, A, H, A, B we get not_collinear(A, B, H), not_collinear(A, B, H), angle(H, B, A) == 0 - angle(H, A, B) mod 360, angle(B, A, H) == 0 - angle(A, B, H) mod 360, angle(A, H, B) == 0 - angle(B, H, A) mod 360, log(distance(A, H)) + log(distance(A, B)) == log(distance(B, H)) + log(distance(A, B)), log(distance(A, B)) + log(distance(A, H)) == log(distance(A, B)) + log(distance(B, H)), log(distance(A, H)) + log(distance(A, H)) == log(distance(B, H)) + log(distance(B, H))
By anti_similar_triangle_basic_properties on H, B, C, H, C, B we get not_collinear(B, C, H), not_collinear(B, C, H), angle(H, B, C) == 0 - angle(H, C, B) mod 360, angle(B, C, H) == 0 - angle(C, B, H) mod 360, angle(C, H, B) == 0 - angle(B, H, C) mod 360, log(distance(B, H)) + log(distance(B, C)) == log(distance(C, H)) + log(distance(B, C)), log(distance(B, C)) + log(distance(B, H)) == log(distance(B, C)) + log(distance(C, H)), log(distance(B, H)) + log(distance(B, H)) == log(distance(C, H)) + log(distance(C, H))
By anti_similar_triangle_basic_properties on H, A, D, H, D, A we get not_collinear(A, D, H), not_collinear(A, D, H), angle(H, A, D) == 0 - angle(H, D, A) mod 360, angle(A, D, H) == 0 - angle(D, A, H) mod 360, angle(D, H, A) == 0 - angle(A, H, D) mod 360, log(distance(A, H)) + log(distance(A, D)) == log(distance(D, H)) + log(distance(A, D)), log(distance(A, D)) + log(distance(A, H)) == log(distance(A, D)) + log(distance(D, H)), log(distance(A, H)) + log(distance(A, H)) == log(distance(D, H)) + log(distance(D, H))
By anti_similar_triangle_basic_properties on H, B, D, H, D, B we get not_collinear(B, D, H), not_collinear(B, D, H), angle(H, B, D) == 0 - angle(H, D, B) mod 360, angle(B, D, H) == 0 - angle(D, B, H) mod 360, angle(D, H, B) == 0 - angle(B, H, D) mod 360, log(distance(B, H)) + log(distance(B, D)) == log(distance(D, H)) + log(distance(B, D)), log(distance(B, D)) + log(distance(B, H)) == log(distance(B, D)) + log(distance(D, H)), log(distance(B, H)) + log(distance(B, H)) == log(distance(D, H)) + log(distance(D, H))
By anti_similar_triangle_basic_properties on B, A, D, A, B, D we get not_collinear(A, B, D), not_collinear(A, B, D), angle(B, A, D) == 0 - angle(A, B, D) mod 360, angle(A, D, B) == 0 - angle(B, D, A) mod 360, angle(D, B, A) == 0 - angle(D, A, B) mod 360, log(distance(A, B)) + log(distance(A, D)) == log(distance(A, B)) + log(distance(B, D)), log(distance(A, D)) + log(distance(A, D)) == log(distance(B, D)) + log(distance(B, D)), log(distance(A, D)) + log(distance(A, B)) == log(distance(B, D)) + log(distance(A, B))
By anti_similar_triangle_basic_properties on H, C, A, H, A, C we get not_collinear(A, C, H), not_collinear(A, C, H), angle(H, C, A) == 0 - angle(H, A, C) mod 360, angle(C, A, H) == 0 - angle(A, C, H) mod 360, angle(A, H, C) == 0 - angle(C, H, A) mod 360, log(distance(A, H)) + log(distance(A, C)) == log(distance(C, H)) + log(distance(A, C)), log(distance(A, C)) + log(distance(A, H)) == log(distance(A, C)) + log(distance(C, H)), log(distance(A, H)) + log(distance(A, H)) == log(distance(C, H)) + log(distance(C, H))
By power_of_a_point_definition on E, B, A, c we get log(power_of_a_point(E, c)) == log(distance(B, E)) + log(distance(A, E))
By anti_similar_triangle_basic_properties on H, A, D, H, B, D we get not_collinear(A, D, H), not_collinear(B, D, H), angle(H, A, D) == 0 - angle(H, B, D) mod 360, angle(A, D, H) == 0 - angle(B, D, H) mod 360, angle(D, H, A) == 0 - angle(D, H, B) mod 360, log(distance(A, H)) + log(distance(B, D)) == log(distance(B, H)) + log(distance(A, D)), log(distance(A, D)) + log(distance(D, H)) == log(distance(B, D)) + log(distance(D, H)), log(distance(D, H)) + log(distance(A, H)) == log(distance(D, H)) + log(distance(B, H))
By similar_triangle_basic_properties on D, H, B, A, H, D we get not_collinear(B, D, H), not_collinear(A, D, H), angle(A, H, D) == angle(D, H, B) mod 360, angle(H, B, D) == angle(H, D, A) mod 360, angle(B, D, H) == angle(D, A, H) mod 360, log(distance(A, H)) + log(distance(B, H)) == log(distance(D, H)) + log(distance(D, H)), log(distance(B, H)) + log(distance(A, D)) == log(distance(D, H)) + log(distance(B, D)), log(distance(A, D)) + log(distance(D, H)) == log(distance(B, D)) + log(distance(A, H))
By similar_triangle_basic_properties on B, H, D, D, H, A we get not_collinear(B, D, H), not_collinear(A, D, H), angle(B, H, D) == angle(D, H, A) mod 360, angle(H, A, D) == angle(H, D, B) mod 360, angle(A, D, H) == angle(D, B, H) mod 360, log(distance(B, H)) + log(distance(A, H)) == log(distance(D, H)) + log(distance(D, H)), log(distance(A, H)) + log(distance(B, D)) == log(distance(D, H)) + log(distance(A, D)), log(distance(A, D)) + log(distance(B, H)) == log(distance(B, D)) + log(distance(D, H))
By anti_similar_triangle_basic_properties on A, H, D, B, H, D we get not_collinear(A, D, H), not_collinear(B, D, H), angle(A, H, D) == 0 - angle(B, H, D) mod 360, angle(H, D, A) == 0 - angle(H, D, B) mod 360, angle(D, A, H) == 0 - angle(D, B, H) mod 360, log(distance(A, H)) + log(distance(D, H)) == log(distance(B, H)) + log(distance(D, H)), log(distance(D, H)) + log(distance(A, D)) == log(distance(D, H)) + log(distance(B, D)), log(distance(A, D)) + log(distance(B, H)) == log(distance(B, D)) + log(distance(A, H))
By concyclic_sufficient_conditions_v0 on A, F, B, C we get concyclic(A, B, C, F)
By concyclic_sufficient_conditions_v0 on A, F, B, D we get concyclic(A, B, D, F)
By line_definition on H, E, j we get j == Line(E, H)
By line_intersection_definition on H, Line(B, H), Line(C, H) we get H == line_intersection(Line(B, H), Line(C, H))
By concurrent_sufficient_conditions on Line(B, D), i, f we get concurrent(f, i, Line(B, D))
By line_intersection_definition on H, j, Line(B, H) we get H == line_intersection(j, Line(B, H))
By line_intersection_definition on A, Line(A, C), Line(A, H) we get A == line_intersection(Line(A, C), Line(A, H))
By concurrent_sufficient_conditions on Line(A, C), Line(A, H), f we get concurrent(f, Line(A, C), Line(A, H))
By line_intersection_definition on B, i, Line(B, D) we get B == line_intersection(i, Line(B, D))
By concurrent_sufficient_conditions on Line(B, D), Line(A, D), j we get concurrent(j, Line(A, D), Line(B, D))
By line_intersection_definition on H, Line(A, H), Line(C, H) we get H == line_intersection(Line(A, H), Line(C, H))
By line_intersection_definition on D, Line(A, D), g we get D == line_intersection(g, Line(A, D))
By concurrent_sufficient_conditions on Line(A, D), h, f we get concurrent(f, h, Line(A, D))
By line_intersection_definition on B, Line(B, C), Line(B, H) we get B == line_intersection(Line(B, C), Line(B, H))
By line_intersection_definition on A, h, Line(A, C) we get A == line_intersection(h, Line(A, C))
By line_intersection_definition on C, g, Line(C, H) we get C == line_intersection(g, Line(C, H))
By line_intersection_definition on D, g, Line(B, D) we get D == line_intersection(g, Line(B, D))
By line_intersection_definition on H, Line(B, H), Line(A, H) we get H == line_intersection(Line(A, H), Line(B, H))
By perpendicular_line_definition on A, f, j we get f == perpendicular_line(A, j)
By concurrent_sufficient_conditions on h, Line(A, H), f we get concurrent(f, h, Line(A, H))
By line_intersection_definition on C, Line(C, H), Line(B, C) we get C == line_intersection(Line(B, C), Line(C, H))
By line_intersection_definition on C, Line(A, C), Line(C, H) we get C == line_intersection(Line(A, C), Line(C, H))
By line_intersection_definition on B, Line(B, H), Line(B, D) we get B == line_intersection(Line(B, D), Line(B, H))
By line_intersection_definition on A, Line(A, C), Line(A, D) we get A == line_intersection(Line(A, C), Line(A, D))
By line_intersection_definition on A, h, Line(A, D) we get A == line_intersection(h, Line(A, D))
By line_intersection_definition on B, Line(B, C), Line(B, D) we get B == line_intersection(Line(B, C), Line(B, D))
By perpendicular_line_definition on E, j, f we get j == perpendicular_line(E, f)
By line_intersection_definition on H, j, Line(C, H) we get H == line_intersection(j, Line(C, H))
By line_intersection_definition on H, j, Line(A, H) we get H == line_intersection(j, Line(A, H))
By line_intersection_definition on D, Line(B, D), Line(A, D) we get D == line_intersection(Line(A, D), Line(B, D))
By concurrent_sufficient_conditions on Line(A, H), Line(A, C), f we get concurrent(f, Line(A, C), Line(A, H))
By concurrent_sufficient_conditions on Line(A, D), g, j we get concurrent(g, j, Line(A, D))
By concurrent_sufficient_conditions on Line(B, C), Line(B, D), f we get concurrent(f, Line(B, C), Line(B, D))
By concurrent_sufficient_conditions on Line(A, H), h, f we get concurrent(f, h, Line(A, H))
By concurrent_sufficient_conditions on i, Line(B, H), f we get concurrent(f, i, Line(B, H))
By perpendicular_line_definition on E, f, j we get f == perpendicular_line(E, j)
By concurrent_sufficient_conditions on Line(B, D), Line(B, C), f we get concurrent(f, Line(B, C), Line(B, D))
By concurrent_sufficient_conditions on Line(B, H), Line(B, C), f we get concurrent(f, Line(B, C), Line(B, H))
By line_intersection_definition on B, Line(B, H), i we get B == line_intersection(i, Line(B, H))
By line_intersection_definition on A, Line(A, H), h we get A == line_intersection(h, Line(A, H))
By concurrent_sufficient_conditions on i, Line(B, D), f we get concurrent(f, i, Line(B, D))
By line_intersection_definition on C, Line(A, C), g we get C == line_intersection(g, Line(A, C))
By line_intersection_definition on A, Line(A, D), Line(A, H) we get A == line_intersection(Line(A, D), Line(A, H))
By line_intersection_definition on C, Line(B, C), g we get C == line_intersection(g, Line(B, C))
By concurrent_sufficient_conditions on Line(A, C), h, f we get concurrent(f, h, Line(A, C))
By concurrent_sufficient_conditions on Line(B, C), i, f we get concurrent(f, i, Line(B, C))
By concurrent_sufficient_conditions on g, Line(A, D), j we get concurrent(g, j, Line(A, D))
By perpendicular_line_definition on B, f, j we get f == perpendicular_line(B, j)
By line_intersection_definition on B, i, Line(B, C) we get B == line_intersection(i, Line(B, C))
By perpendicular_line_definition on H, j, f we get j == perpendicular_line(H, f)
By concurrent_sufficient_conditions on Line(A, D), Line(A, H), f we get concurrent(f, Line(A, D), Line(A, H))
By perpendicular_line_definition on D, j, f we get j == perpendicular_line(D, f)
By concurrent_sufficient_conditions on h, Line(A, C), f we get concurrent(f, h, Line(A, C))
By concurrent_sufficient_conditions on Line(A, D), Line(B, D), j we get concurrent(j, Line(A, D), Line(B, D))
By concurrent_sufficient_conditions on Line(B, D), g, j we get concurrent(g, j, Line(B, D))
By concurrent_sufficient_conditions on Line(B, D), Line(B, H), f we get concurrent(f, Line(B, D), Line(B, H))
By concurrent_sufficient_conditions on Line(B, H), Line(B, D), f we get concurrent(f, Line(B, D), Line(B, H))
By line_intersection_definition on C, Line(A, C), Line(B, C) we get C == line_intersection(Line(A, C), Line(B, C))
By concurrent_sufficient_conditions on Line(B, C), Line(B, H), f we get concurrent(f, Line(B, C), Line(B, H))
By concurrent_sufficient_conditions on Line(A, C), Line(A, D), f we get concurrent(f, Line(A, C), Line(A, D))
By concurrent_sufficient_conditions on g, Line(B, D), j we get concurrent(g, j, Line(B, D))
By concurrent_sufficient_conditions on Line(A, H), Line(A, D), f we get concurrent(f, Line(A, D), Line(A, H))
By concurrent_sufficient_conditions on h, Line(A, D), f we get concurrent(f, h, Line(A, D))
By concurrent_sufficient_conditions on i, Line(B, C), f we get concurrent(f, i, Line(B, C))
By concurrent_sufficient_conditions on Line(B, H), i, f we get concurrent(f, i, Line(B, H))
By concurrent_sufficient_conditions on Line(A, D), Line(A, C), f we get concurrent(f, Line(A, C), Line(A, D))
By same_angle_converse_v0 on D, H, E, A we get collinear(D, E, H)
By projection_definition on B, E, j we get E == projection(B, j)
By anti_congruence_from_anti_similar_triangles on E, D, A, E, D, B we get anti_congruent_triangles(A, D, E, B, D, E)
By projection_definition on A, E, j we get E == projection(A, j)
By projection_definition on D, E, f we get E == projection(D, f)
By asa_anti_congruence on E, D, A, E, D, B we get anti_congruent_triangles(A, D, E, B, D, E)
By perpendicular_angle_conditions_v0 on D, E, B we get angle(D, E, B) == orientation(B, D, E) mod 360
By anti_congruence_from_anti_similar_triangles on B, D, E, A, D, E we get anti_congruent_triangles(A, D, E, B, D, E)
By anti_congruence_from_anti_similar_triangles on D, B, E, D, A, E we get anti_congruent_triangles(A, D, E, B, D, E)
By asa_anti_congruence on D, E, A, D, E, B we get anti_congruent_triangles(A, D, E, B, D, E)
By anti_congruence_from_anti_similar_triangles on D, A, E, D, B, E we get anti_congruent_triangles(A, D, E, B, D, E)
By asa_anti_congruence on A, D, E, B, D, E we get anti_congruent_triangles(A, D, E, B, D, E)
By perpendicular_angle_conditions_v0 on A, E, D we get angle(A, E, D) == orientation(A, E, D) mod 360
By asa_anti_congruence on D, A, E, D, B, E we get anti_congruent_triangles(A, D, E, B, D, E)
By sas_anti_congruence on A, D, E, B, D, E we get anti_congruent_triangles(A, D, E, B, D, E)
By perpendicular_angle_conditions_v0 on D, E, A we get angle(D, E, A) == orientation(A, D, E) mod 360
By asa_anti_congruence on B, D, E, A, D, E we get anti_congruent_triangles(A, D, E, B, D, E)
By sas_anti_congruence on E, D, A, E, D, B we get anti_congruent_triangles(A, D, E, B, D, E)
By perpendicular_angle_conditions_v0 on B, E, D we get angle(B, E, D) == orientation(B, E, D) mod 360
By asa_anti_congruence on D, B, E, D, A, E we get anti_congruent_triangles(A, D, E, B, D, E)
By asa_anti_congruence on D, E, B, D, E, A we get anti_congruent_triangles(A, D, E, B, D, E)
By anti_congruence_from_anti_similar_triangles on D, E, B, D, E, A we get anti_congruent_triangles(A, D, E, B, D, E)
By asa_anti_congruence on E, D, B, E, D, A we get anti_congruent_triangles(A, D, E, B, D, E)
By anti_congruence_from_anti_similar_triangles on A, D, E, B, D, E we get anti_congruent_triangles(A, D, E, B, D, E)
By anti_congruence_from_anti_similar_triangles on E, D, B, E, D, A we get anti_congruent_triangles(A, D, E, B, D, E)
By sas_anti_congruence on E, D, B, E, D, A we get anti_congruent_triangles(A, D, E, B, D, E)
By sas_anti_congruence on B, D, E, A, D, E we get anti_congruent_triangles(A, D, E, B, D, E)
By anti_congruence_from_anti_similar_triangles on D, E, A, D, E, B we get anti_congruent_triangles(A, D, E, B, D, E)
By power_of_a_point_in_circle on D, Circle(A, D, H) we get 0 == power_of_a_point(D, Circle(A, D, H))
By power_of_a_point_in_circle on D, Circle(B, D, H) we get 0 == power_of_a_point(D, Circle(B, D, H))
By anti_similar_triangle_basic_properties on D, B, E, D, A, E we get not_collinear(B, D, E), not_collinear(A, D, E), angle(D, B, E) == 0 - angle(D, A, E) mod 360, angle(B, E, D) == 0 - angle(A, E, D) mod 360, angle(E, D, B) == 0 - angle(E, D, A) mod 360, log(distance(A, D)) + log(distance(B, E)) == log(distance(B, D)) + log(distance(A, E)), log(distance(A, E)) + log(distance(D, E)) == log(distance(B, E)) + log(distance(D, E)), log(distance(D, E)) + log(distance(A, D)) == log(distance(D, E)) + log(distance(B, D))
By power_of_a_point_in_circle on A, Circle(A, D, H) we get 0 == power_of_a_point(A, Circle(A, D, H))
By external_angle_bisector_definition_v0_r on D, A, D, E we get Line(A, E) == external_angle_bisector(D, E, D)
By external_angle_bisector_definition_v0_r on A, D, A, E we get Line(D, E) == external_angle_bisector(A, E, A)
By power_of_a_point_in_circle on B, Circle(B, D, H) we get 0 == power_of_a_point(B, Circle(B, D, H))
By external_angle_bisector_definition_v0_r on B, D, B, E we get Line(D, E) == external_angle_bisector(B, E, B)
By anti_similar_triangle_basic_properties on B, D, E, A, D, E we get not_collinear(B, D, E), not_collinear(A, D, E), angle(B, D, E) == 0 - angle(A, D, E) mod 360, angle(D, E, B) == 0 - angle(D, E, A) mod 360, angle(E, B, D) == 0 - angle(E, A, D) mod 360, log(distance(A, D)) + log(distance(D, E)) == log(distance(B, D)) + log(distance(D, E)), log(distance(D, E)) + log(distance(A, E)) == log(distance(D, E)) + log(distance(B, E)), log(distance(A, E)) + log(distance(B, D)) == log(distance(B, E)) + log(distance(A, D))
By power_of_a_point_in_circle on H, Circle(A, D, H) we get 0 == power_of_a_point(H, Circle(A, D, H))
By external_angle_bisector_definition_v0_r on D, B, D, E we get Line(B, E) == external_angle_bisector(D, E, D)
By internal_angle_bisector_definition_v0_r on B, D, A, E we get Line(D, E) == internal_angle_bisector(A, E, B)
By power_of_a_point_in_circle on H, Circle(B, D, H) we get 0 == power_of_a_point(H, Circle(B, D, H))
By draw_point_of_tangency on Line(B, D), Circle(A, D, H) we get exists(line_circle_tangent_point(Line(B, D), Circle(A, D, H)))
By draw_point_of_tangency on Line(A, D), Circle(B, D, H) we get exists(line_circle_tangent_point(Line(A, D), Circle(B, D, H)))
By power_of_a_point_tangent on A, D, Circle(B, D, H) we get 2 * log(distance(A, D)) == log(power_of_a_point(A, Circle(B, D, H)))
By altitude_definition on D, E, B, j we get j == altitude(D, B, E)
By altitude_definition on A, D, H, f we get f == altitude(A, D, H)
By altitude_definition on B, D, E, f we get f == altitude(B, D, E)
By altitude_definition on B, H, D, f we get f == altitude(B, D, H)
By altitude_definition on H, E, B, j we get j == altitude(H, B, E)
By altitude_definition on H, E, A, j we get j == altitude(H, A, E)
By altitude_definition on D, A, E, j we get j == altitude(D, A, E)
By altitude_definition on A, E, D, f we get f == altitude(A, D, E)
By altitude_definition on H, A, B, j we get j == altitude(H, A, B)
By altitude_definition on D, B, A, j we get j == altitude(D, A, B)
By power_of_a_point_tangent on B, D, Circle(A, D, H) we get 2 * log(distance(B, D)) == log(power_of_a_point(B, Circle(A, D, H)))
By perpendicular_bisector_sufficient_conditions on B, A, D, H we get Line(D, H) == perpendicular_bisector(A, B)
By isosceles_triangle_altitude_v2 on H, B, A we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, H, B), perpendicular_line(H, Line(A, B)))
By isosceles_triangle_altitude_v2 on D, A, B we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, D, B), perpendicular_line(D, Line(A, B)))
By isosceles_triangle_altitude_v2 on H, A, B we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, H, B), perpendicular_line(H, Line(A, B)))
By isosceles_triangle_altitude_v2 on D, B, A we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, D, B), perpendicular_line(D, Line(A, B)))
By midpoint_definition_v0 on B, A, E we get E == midpoint(A, B)
By median_definition on D, B, A, j we get j == median(D, A, B)
By median_definition on H, A, B, j we get j == median(H, A, B)
By same_angle_v0 on D, E, H, C we get angle(E, D, C) == angle(H, D, C) mod 360
By projection_definition on H, E, f we get E == projection(H, f)
By between_imply_not_between on A, midpoint(A, B), B we get collinear_and_not_between(B, A, midpoint(A, B))
By between_imply_not_between on B, midpoint(A, B), A we get collinear_and_not_between(A, B, midpoint(A, B))
By same_angle_v2 on E, H, D, A we get angle(H, E, A) == angle(D, E, A) + 180 mod 360
By same_angle_v0 on H, D, E, B we get angle(D, H, B) == angle(E, H, B) mod 360
By same_angle_v2 on E, B, A, H we get angle(B, E, H) == angle(A, E, H) + 180 mod 360
By different_points_v1 on H, E we get 0 != distance(E, H)
By same_angle_v1 on H, D, E, A we get angle(D, H, A) == angle(E, H, A) mod 360
By perpendicular_direction_conditions_v0_r on E, H, A, B we get 180 == 2 * direction(E, H) - 2 * direction(A, B) mod 360
By same_angle_v1 on H, E, D, C we get angle(D, H, C) == angle(E, H, C) mod 360
By perpendicular_direction_conditions_v0_r on H, E, B, A we get 180 == 2 * direction(H, E) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on E, B, E, H we get 180 == 2 * direction(E, B) - 2 * direction(E, H) mod 360
By perpendicular_direction_conditions_v0_r on B, E, E, H we get 180 == 2 * direction(B, E) - 2 * direction(E, H) mod 360
By orthocenter_concurrency on D, A, E we get orthocenter(A, D, E) in altitude(D, A, E), orthocenter(A, D, E) in altitude(A, D, E), orthocenter(A, D, E) in altitude(E, A, D)
By same_angle_v2 on E, D, H, B we get angle(D, E, B) == angle(H, E, B) + 180 mod 360
By perpendicular_direction_conditions_v0_r on B, E, H, E we get 180 == 2 * direction(B, E) - 2 * direction(H, E) mod 360
By perpendicular_direction_conditions_v0_r on E, H, E, A we get 180 == 2 * direction(E, H) - 2 * direction(E, A) mod 360
By perpendicular_direction_conditions_v0_r on E, H, B, A we get 180 == 2 * direction(E, H) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on H, E, A, B we get 180 == 2 * direction(H, E) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on E, A, E, H we get 180 == 2 * direction(E, A) - 2 * direction(E, H) mod 360
By perpendicular_direction_conditions_v0_r on E, H, B, E we get 180 == 2 * direction(E, H) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on E, B, H, E we get 180 == 2 * direction(E, B) - 2 * direction(H, E) mod 360
By perpendicular_direction_conditions_v0_r on H, E, E, A we get 180 == 2 * direction(H, E) - 2 * direction(E, A) mod 360
By perpendicular_direction_conditions_v0_r on H, E, B, E we get 180 == 2 * direction(H, E) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on H, E, A, E we get 180 == 2 * direction(H, E) - 2 * direction(A, E) mod 360
By perpendicular_direction_conditions_v0_r on E, H, E, B we get 180 == 2 * direction(E, H) - 2 * direction(E, B) mod 360
By orthocenter_concurrency on D, B, E we get orthocenter(B, D, E) in altitude(D, B, E), orthocenter(B, D, E) in altitude(B, D, E), orthocenter(B, D, E) in altitude(E, B, D)
By perpendicular_direction_conditions_v0_r on A, B, E, H we get 180 == 2 * direction(A, B) - 2 * direction(E, H) mod 360
By perpendicular_direction_conditions_v0_r on A, E, H, E we get 180 == 2 * direction(A, E) - 2 * direction(H, E) mod 360
By perpendicular_direction_conditions_v0_r on A, E, E, H we get 180 == 2 * direction(A, E) - 2 * direction(E, H) mod 360
By perpendicular_direction_conditions_v0_r on A, B, H, E we get 180 == 2 * direction(A, B) - 2 * direction(H, E) mod 360
By perpendicular_direction_conditions_v0_r on B, A, H, E we get 180 == 2 * direction(B, A) - 2 * direction(H, E) mod 360
By perpendicular_direction_conditions_v0_r on H, E, E, B we get 180 == 2 * direction(H, E) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on E, A, H, E we get 180 == 2 * direction(E, A) - 2 * direction(H, E) mod 360
By perpendicular_direction_conditions_v0_r on B, A, E, H we get 180 == 2 * direction(B, A) - 2 * direction(E, H) mod 360
By in_imply_collinear on midpoint(A, B), H, D we get collinear(D, H, midpoint(A, B))
By perpendicular_direction_conditions_v0_r on E, H, A, E we get 180 == 2 * direction(E, H) - 2 * direction(A, E) mod 360
By probably_between_and_collinear_implies_between on D, E, H we get between(D, E, H)
By in_imply_collinear on midpoint(A, B), E, H we get collinear(E, H, midpoint(A, B))
By tangent_point_is_unique on line_circle_tangent_point(Line(B, D), Circle(A, D, H)), D, Circle(A, D, H), Line(B, D) we get D == line_circle_tangent_point(Line(B, D), Circle(A, D, H))
By in_imply_collinear on line_circle_tangent_point(Line(B, D), Circle(A, D, H)), B, D we get collinear(B, D, line_circle_tangent_point(Line(B, D), Circle(A, D, H)))
By in_imply_collinear on midpoint(A, B), E, D we get collinear(D, E, midpoint(A, B))
By concyclic_definition_0 on D, B, A, F we get F in Circle(A, B, D)
By in_imply_collinear on line_circle_tangent_point(Line(A, D), Circle(B, D, H)), A, D we get collinear(A, D, line_circle_tangent_point(Line(A, D), Circle(B, D, H)))
By line_circle_intersection_has_at_most_two_points_0 on A, B, midpoint(A, B), c we get midpoint(A, B) not in c
By concyclic_definition_0 on B, A, C, F we get F in Circle(A, B, C)
By line_containment_inequality on line_circle_tangent_point(Line(B, D), Circle(A, D, H)), E, Line(B, D) we get E != line_circle_tangent_point(Line(B, D), Circle(A, D, H))
By collinear_definition on D, E, H we get E in Line(D, H), H in Line(D, E), Line(D, E) == Line(D, H), 0 == 2 * angle(E, D, H) mod 360
By in_imply_concyclic on H, B, D, line_circle_tangent_point(Line(A, D), Circle(B, D, H)) we get concyclic(B, D, H, line_circle_tangent_point(Line(A, D), Circle(B, D, H)))
By tangent_point_is_unique on line_circle_tangent_point(Line(A, D), Circle(B, D, H)), D, Circle(B, D, H), Line(A, D) we get D == line_circle_tangent_point(Line(A, D), Circle(B, D, H))
By log_of_2_times_distance on B, A, B, E we get log(distance(A, B)) == 0.6931471805599453 + log(distance(B, E))
By log_of_2_times_distance on B, A, E, A we get log(distance(A, B)) == 0.6931471805599453 + log(distance(A, E))
By in_imply_concyclic on A, H, D, line_circle_tangent_point(Line(B, D), Circle(A, D, H)) we get concyclic(A, D, H, line_circle_tangent_point(Line(B, D), Circle(A, D, H)))
By line_containment_inequality on line_circle_tangent_point(Line(B, D), Circle(A, D, H)), A, Line(B, D) we get A != line_circle_tangent_point(Line(B, D), Circle(A, D, H))
By collinear_definition on D, H, E we get H in Line(D, E), E in Line(D, H), Line(D, E) == Line(D, H), 0 == 2 * angle(H, D, E) mod 360
By line_containment_inequality on line_circle_tangent_point(Line(A, D), Circle(B, D, H)), B, Line(A, D) we get B != line_circle_tangent_point(Line(A, D), Circle(B, D, H))
By line_containment_inequality on line_circle_tangent_point(Line(B, D), Circle(A, D, H)), H, Line(B, D) we get H != line_circle_tangent_point(Line(B, D), Circle(A, D, H))
By line_containment_inequality on line_circle_tangent_point(Line(B, D), Circle(A, D, H)), F, Line(B, D) we get F != line_circle_tangent_point(Line(B, D), Circle(A, D, H))
By line_circle_intersection_has_at_most_two_points_0 on D, H, E, Circle(B, D, H) we get E not in Circle(B, D, H)
By line_circle_intersection_has_at_most_two_points_0 on D, H, E, Circle(A, D, H) we get E not in Circle(A, D, H)
By line_containment_inequality on line_circle_tangent_point(Line(B, D), Circle(A, D, H)), G, Line(B, D) we get G != line_circle_tangent_point(Line(B, D), Circle(A, D, H))
By line_containment_inequality on line_circle_tangent_point(Line(B, D), Circle(A, D, H)), C, Line(B, D) we get C != line_circle_tangent_point(Line(B, D), Circle(A, D, H))
By line_containment_inequality on midpoint(A, B), F, j we get F != midpoint(A, B)
By line_containment_inequality on line_circle_tangent_point(Line(A, D), Circle(B, D, H)), G, Line(A, D) we get G != line_circle_tangent_point(Line(A, D), Circle(B, D, H))
By line_containment_inequality on line_circle_tangent_point(Line(A, D), Circle(B, D, H)), H, Line(A, D) we get H != line_circle_tangent_point(Line(A, D), Circle(B, D, H))
By line_containment_inequality on line_circle_tangent_point(Line(A, D), Circle(B, D, H)), E, Line(A, D) we get E != line_circle_tangent_point(Line(A, D), Circle(B, D, H))
By line_containment_inequality on line_circle_tangent_point(Line(A, D), Circle(B, D, H)), C, Line(A, D) we get C != line_circle_tangent_point(Line(A, D), Circle(B, D, H))
By line_containment_inequality on midpoint(A, B), G, j we get G != midpoint(A, B)
By line_containment_inequality on line_circle_tangent_point(Line(A, D), Circle(B, D, H)), F, Line(A, D) we get F != line_circle_tangent_point(Line(A, D), Circle(B, D, H))
By line_containment_inequality on midpoint(A, B), C, j we get C != midpoint(A, B)
By concyclic_definition_1 on A, B, D, F we get Circle(A, B, D) == Circle(B, D, F)
By concyclic_definition_0 on D, F, B, A we get A in Circle(B, D, F)
By internal_angle_bisector_definition_v0 on B, H, A, E we get angle(B, E, H) == angle(H, E, A) mod 360
By perpendicular_angle_conditions_v0 on H, E, B we get angle(H, E, B) == orientation(B, H, E) mod 360
By collinear_definition on H, E, D we get E in Line(D, H), D in Line(E, H), Line(D, H) == Line(E, H), 0 == 2 * angle(E, H, D) mod 360
By log_of_2_times_distance on A, B, midpoint(A, B), A we get log(distance(A, B)) == 0.6931471805599453 + log(distance(A, midpoint(A, B)))
By concyclic_definition_0 on F, B, A, C we get C in Circle(A, B, F)
By power_of_a_point_in_circle on line_circle_tangent_point(Line(B, D), Circle(A, D, H)), Circle(A, D, H) we get 0 == power_of_a_point(line_circle_tangent_point(Line(B, D), Circle(A, D, H)), Circle(A, D, H))
By concyclic_definition_1 on A, B, C, F we get Circle(A, B, C) == Circle(B, C, F)
By concyclic_definition_0 on F, A, D, B we get B in Circle(A, D, F)
By concyclic_definition_0 on C, F, B, A we get A in Circle(B, C, F)
By collinear_definition on B, midpoint(A, B), A we get midpoint(A, B) in Line(A, B), A in Line(B, midpoint(A, B)), Line(A, B) == Line(B, midpoint(A, B)), 0 == 2 * angle(midpoint(A, B), B, A) mod 360
By concyclic_definition_0 on A, F, B, D we get D in Circle(A, B, F)
By isosceles_triangle_midpoint on D, A, B we get midpoint(A, B) in median(D, A, B)
By power_of_a_point_on_circle on line_circle_tangent_point(Line(A, D), Circle(B, D, H)), Circle(B, D, H) we get 0 == power_of_a_point(line_circle_tangent_point(Line(A, D), Circle(B, D, H)), Circle(B, D, H))
By collinear_definition on A, B, midpoint(A, B) we get B in Line(A, midpoint(A, B)), midpoint(A, B) in Line(A, B), Line(A, B) == Line(A, midpoint(A, B)), 0 == 2 * angle(B, A, midpoint(A, B)) mod 360
By concyclic_definition_0 on A, C, F, B we get B in Circle(A, C, F)
By collinear_definition on E, H, D we get H in Line(D, E), D in Line(E, H), Line(D, E) == Line(E, H), 0 == 2 * angle(H, E, D) mod 360
By collinear_definition on B, A, midpoint(A, B) we get A in Line(B, midpoint(A, B)), midpoint(A, B) in Line(A, B), Line(A, B) == Line(B, midpoint(A, B)), 0 == 2 * angle(A, B, midpoint(A, B)) mod 360
By concyclic_definition_1 on F, A, B, C we get Circle(A, B, C) == Circle(A, B, F)
By concyclic_definition_1 on B, C, A, F we get Circle(A, B, C) == Circle(A, C, F)
By perpendicular_angle_conditions_v0 on H, E, A we get angle(H, E, A) == orientation(A, H, E) mod 360
By internal_angle_bisector_definition_v0 on A, H, B, E we get angle(A, E, H) == angle(H, E, B) mod 360
By concyclic_definition_1 on D, B, A, F we get Circle(A, B, D) == Circle(A, B, F)
By concyclic_definition_1 on B, D, A, F we get Circle(A, B, D) == Circle(A, D, F)
By perpendicular_bisector_properties on B, A we get perpendicular(Line(A, B), perpendicular_bisector(A, B)), midpoint(A, B) == line_intersection(Line(A, B), perpendicular_bisector(A, B))
By isosceles_triangle_midpoint on H, A, B we get midpoint(A, B) in median(H, A, B)
By collinear_definition on A, midpoint(A, B), B we get midpoint(A, B) in Line(A, B), B in Line(A, midpoint(A, B)), Line(A, B) == Line(A, midpoint(A, B)), 0 == 2 * angle(midpoint(A, B), A, B) mod 360
By external_angle_bisector_definition_v0 on B, H, B, E we get 180 == angle(B, E, H) + angle(B, E, H) mod 360
By collinear_definition on H, D, E we get D in Line(E, H), E in Line(D, H), Line(D, H) == Line(E, H), 0 == 2 * angle(D, H, E) mod 360
By external_angle_bisector_definition_v0 on A, H, A, E we get 180 == angle(A, E, H) + angle(A, E, H) mod 360
By internal_angle_bisector_definition_v0 on B, E, A, H we get angle(B, H, E) == angle(E, H, A) mod 360
By perpendicular_angle_conditions_v0 on A, E, H we get angle(A, E, H) == orientation(A, E, H) mod 360
By log_of_2_times_distance on B, A, B, midpoint(A, B) we get log(distance(A, B)) == 0.6931471805599453 + log(distance(B, midpoint(A, B)))
By perpendicular_angle_conditions_v0 on B, E, H we get angle(B, E, H) == orientation(B, E, H) mod 360
By collinear_definition on E, D, H we get D in Line(E, H), H in Line(D, E), Line(D, E) == Line(E, H), 0 == 2 * angle(D, E, H) mod 360
By internal_angle_bisector_definition_v0 on A, E, B, H we get angle(A, H, E) == angle(E, H, B) mod 360
By isosceles_triangle_altitude_v1 on midpoint(A, B), A, B we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, midpoint(A, B), B), perpendicular_line(midpoint(A, B), Line(A, B)))
By isosceles_triangle_altitude_v3 on midpoint(A, B), B, A we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, midpoint(A, B), B), perpendicular_line(midpoint(A, B), Line(A, B)))
By isosceles_triangle_altitude_v1 on midpoint(A, B), B, A we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, midpoint(A, B), B), perpendicular_line(midpoint(A, B), Line(A, B)))
By isosceles_triangle_altitude_v3 on midpoint(A, B), A, B we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, midpoint(A, B), B), perpendicular_line(midpoint(A, B), Line(A, B)))
By concyclic_definition_1 on C, A, F, B we get Circle(A, B, F) == Circle(A, C, F)
By concyclic_definition_1 on A, B, F, C we get Circle(A, B, F) == Circle(B, C, F)
By sas_anti_similarity on E, A, H, E, B, H we get anti_similar_triangles(A, E, H, B, E, H)
By concyclic_definition_1 on A, C, F, B we get Circle(A, C, F) == Circle(B, C, F)
By sas_anti_congruence on E, B, H, E, A, H we get anti_congruent_triangles(A, E, H, B, E, H)
By concyclic_definition_1 on B, A, F, D we get Circle(A, B, F) == Circle(A, D, F)
By sas_anti_congruence on E, A, H, E, B, H we get anti_congruent_triangles(A, E, H, B, E, H)
By collinear_definition on midpoint(A, B), B, A we get B in Line(A, midpoint(A, B)), A in Line(B, midpoint(A, B)), Line(A, midpoint(A, B)) == Line(B, midpoint(A, B)), 0 == 2 * angle(B, midpoint(A, B), A) mod 360
By concyclic_definition_1 on A, B, F, D we get Circle(A, B, F) == Circle(B, D, F)
By concyclic_definition_1 on B, D, F, A we get Circle(A, D, F) == Circle(B, D, F)
By isosceles_triangle_properties on midpoint(A, B), A, B we get distance(A, midpoint(A, B)) == distance(B, midpoint(A, B)), angle(A, B, midpoint(A, B)) == angle(midpoint(A, B), A, B) mod 360
By altitude_definition on B, E, H, f we get f == altitude(B, E, H)
By sas_anti_similarity on E, B, H, E, A, H we get anti_similar_triangles(A, E, H, B, E, H)
By sas_anti_congruence on H, B, E, H, A, E we get anti_congruent_triangles(A, E, H, B, E, H)
By sas_anti_similarity on H, B, E, H, A, E we get anti_similar_triangles(A, E, H, B, E, H)
By collinear_definition on midpoint(A, B), A, B we get A in Line(B, midpoint(A, B)), B in Line(A, midpoint(A, B)), Line(A, midpoint(A, B)) == Line(B, midpoint(A, B)), 0 == 2 * angle(A, midpoint(A, B), B) mod 360
By sas_anti_congruence on H, A, E, H, B, E we get anti_congruent_triangles(A, E, H, B, E, H)
By altitude_definition on A, H, E, f we get f == altitude(A, E, H)
By isosceles_triangle_properties on midpoint(A, B), B, A we get distance(A, midpoint(A, B)) == distance(B, midpoint(A, B)), angle(B, A, midpoint(A, B)) == angle(midpoint(A, B), B, A) mod 360
By sas_anti_similarity on H, A, E, H, B, E we get anti_similar_triangles(A, E, H, B, E, H)
By between_implies_angles on A, midpoint(A, B), B we get 180 == angle(A, midpoint(A, B), B) mod 360, 0 == angle(midpoint(A, B), B, A) mod 360, 0 == angle(B, A, midpoint(A, B)) mod 360
By between_implies_angles on B, midpoint(A, B), A we get 180 == angle(B, midpoint(A, B), A) mod 360, 0 == angle(midpoint(A, B), A, B) mod 360, 0 == angle(A, B, midpoint(A, B)) mod 360
By line_intersection_definition on orthocenter(B, D, E), j, f we get orthocenter(B, D, E) == line_intersection(f, j)
By line_intersection_definition on orthocenter(A, D, E), f, j we get orthocenter(A, D, E) == line_intersection(f, j)
By chords_on_equal_angles_v0 on F, B, D, C, A, F, c we get distance(C, F) == distance(D, F)
By circle_definition on D, F, C, c we get c == Circle(C, D, F)
By perpendicular_line_definition on orthocenter(A, D, E), altitude(E, A, D), Line(A, D) we get altitude(E, A, D) == perpendicular_line(orthocenter(A, D, E), Line(A, D))
By perpendicular_line_definition on D, Line(B, D), altitude(E, B, D) we get Line(B, D) == perpendicular_line(D, altitude(E, B, D))
By perpendicular_line_definition on D, Line(A, D), altitude(E, A, D) we get Line(A, D) == perpendicular_line(D, altitude(E, A, D))
By line_unique_intersection_v0 on j, f, orthocenter(A, D, E), E we get E == orthocenter(A, D, E)
By perpendicular_line_definition on orthocenter(B, D, E), j, f we get j == perpendicular_line(orthocenter(B, D, E), f)
By angles_on_chord_v0 on A, F, B, D, c we get angle(A, B, F) == angle(A, D, F) mod 360
By perpendicular_line_definition on orthocenter(A, D, E), f, j we get f == perpendicular_line(orthocenter(A, D, E), j)
By perpendicular_line_definition on B, Line(B, D), altitude(E, B, D) we get Line(B, D) == perpendicular_line(B, altitude(E, B, D))
By perpendicular_line_definition on orthocenter(B, D, E), altitude(E, B, D), Line(B, D) we get altitude(E, B, D) == perpendicular_line(orthocenter(B, D, E), Line(B, D))
By perpendicular_line_definition on orthocenter(B, D, E), f, j we get f == perpendicular_line(orthocenter(B, D, E), j)
By perpendicular_line_definition on orthocenter(A, D, E), j, f we get j == perpendicular_line(orthocenter(A, D, E), f)
By perpendicular_line_definition on A, Line(A, D), altitude(E, A, D) we get Line(A, D) == perpendicular_line(A, altitude(E, A, D))
By line_unique_intersection_v0 on j, f, orthocenter(A, D, E), orthocenter(B, D, E) we get orthocenter(A, D, E) == orthocenter(B, D, E)
By angles_on_chord_v0 on C, F, D, A, c we get angle(C, A, F) == angle(C, D, F) mod 360
By line_unique_intersection_v0 on j, f, orthocenter(B, D, E), E we get E == orthocenter(B, D, E)
By angles_on_chord_v0 on B, C, F, D, c we get angle(B, D, C) == angle(B, F, C) mod 360
By angles_on_chord_v1 on B, D, A, F, c we get angle(B, A, D) == angle(B, F, D) mod 360
By circle_radius_v0_r on F, c we get radius(c) == distance(F, center(c))
By angles_on_chord_v1 on C, A, B, F, c we get angle(C, B, A) == angle(C, F, A) mod 360
By angles_on_chord_v1 on F, C, B, D, c we get angle(F, B, C) == angle(F, D, C) mod 360
By angles_on_chord_v1 on C, B, F, D, c we get angle(C, D, B) == angle(C, F, B) mod 360
By angles_on_chord_v1 on D, F, C, A, c we get angle(D, A, F) == angle(D, C, F) mod 360
By angles_on_chord_v1 on A, D, F, C, c we get angle(A, C, D) == angle(A, F, D) mod 360
By angles_on_chord_v0 on D, B, F, A, c we get angle(D, A, B) == angle(D, F, B) mod 360
By angles_on_chord_v0 on A, C, B, F, c we get angle(A, B, C) == angle(A, F, C) mod 360
By angles_on_chord_v0 on F, B, C, A, c we get angle(F, A, B) == angle(F, C, B) mod 360
By angles_on_chord_v3 on F, A, B, C, c we get angle(F, B, A) == angle(F, C, A) + 180 mod 360
By angles_on_chord_v1 on C, A, D, F, c we get angle(C, D, A) == angle(C, F, A) mod 360
By angles_on_chord_v0 on F, D, C, B, c we get angle(F, B, D) == angle(F, C, D) mod 360
By angles_on_chord_v0 on F, D, A, C, c we get angle(F, A, D) == angle(F, C, D) mod 360
By angles_on_chord_v3 on C, B, F, A, c we get angle(C, F, B) == angle(C, A, B) + 180 mod 360
By angles_on_chord_v3 on A, F, C, B, c we get angle(A, C, F) == angle(A, B, F) + 180 mod 360
By angles_on_chord_v2 on B, F, D, A, c we get angle(B, D, F) == angle(B, A, F) + 180 mod 360
By angles_on_chord_v0 on D, B, F, C, c we get angle(D, C, B) == angle(D, F, B) mod 360
By angles_on_chord_v1 on B, D, F, C, c we get angle(B, C, D) == angle(B, F, D) mod 360
By angles_on_chord_v1 on B, F, A, C, c we get angle(B, A, F) == angle(B, C, F) mod 360
By angle_to_center on F, B, A, c we get 2 * angle(F, B, A) == angle(F, center(c), A) mod 360
By angles_on_chord_v0 on D, A, F, C, c we get angle(D, C, A) == angle(D, F, A) mod 360
By angles_on_chord_v0 on A, C, F, D, c we get angle(A, D, C) == angle(A, F, C) mod 360
By angles_on_chord_v2 on F, A, C, B, c we get angle(F, C, A) == angle(F, B, A) + 180 mod 360
By angles_on_chord_v1 on D, F, B, C, c we get angle(D, B, F) == angle(D, C, F) mod 360
By angles_on_chord_v0 on C, F, B, D, c we get angle(C, B, F) == angle(C, D, F) mod 360
By angles_on_chord_v3 on A, D, F, B, c we get angle(A, F, D) == angle(A, B, D) + 180 mod 360
By angles_on_chord_v2 on B, C, F, A, c we get angle(B, F, C) == angle(B, A, C) + 180 mod 360
By angles_on_chord_v1 on F, A, D, B, c we get angle(F, B, A) == angle(F, D, A) mod 360
By angles_on_chord_v3 on D, A, B, F, c we get angle(D, B, A) == angle(D, F, A) + 180 mod 360
By angles_on_chord_v1 on F, C, D, A, c we get angle(F, A, C) == angle(F, D, C) mod 360
By angle_to_center on A, F, D, c we get 2 * angle(A, F, D) == angle(A, center(c), D) mod 360
By angles_on_chord_v2 on F, B, A, D, c we get angle(F, A, B) == angle(F, D, B) + 180 mod 360
By angles_on_chord_v2 on D, A, F, B, c we get angle(D, F, A) == angle(D, B, A) + 180 mod 360
By angles_on_chord_v3 on B, C, A, F, c we get angle(B, A, C) == angle(B, F, C) + 180 mod 360
By angle_to_center on B, A, F, c we get 2 * angle(B, A, F) == angle(B, center(c), F) mod 360
By angles_on_chord_v2 on C, B, A, F, c we get angle(C, A, B) == angle(C, F, B) + 180 mod 360
By angles_on_chord_v3 on F, B, D, A, c we get angle(F, D, B) == angle(F, A, B) + 180 mod 360
By angles_on_chord_v3 on B, F, A, D, c we get angle(B, A, F) == angle(B, D, F) + 180 mod 360
By angle_to_center on F, B, C, c we get 2 * angle(F, B, C) == angle(F, center(c), C) mod 360
By angle_to_center on C, F, A, c we get 2 * angle(C, F, A) == angle(C, center(c), A) mod 360
By angle_to_center on A, B, F, c we get 2 * angle(A, B, F) == angle(A, center(c), F) mod 360
By angle_to_center on F, A, C, c we get 2 * angle(F, A, C) == angle(F, center(c), C) mod 360
By angles_on_chord_v2 on A, D, B, F, c we get angle(A, B, D) == angle(A, F, D) + 180 mod 360
By angles_on_chord_v2 on A, F, B, C, c we get angle(A, B, F) == angle(A, C, F) + 180 mod 360
By angle_to_center on C, A, F, c we get 2 * angle(C, A, F) == angle(C, center(c), F) mod 360
By angle_to_center on B, F, D, c we get 2 * angle(B, F, D) == angle(B, center(c), D) mod 360
By angle_to_center on C, B, F, c we get 2 * angle(C, B, F) == angle(C, center(c), F) mod 360
By angle_to_center on D, F, B, c we get 2 * angle(D, F, B) == angle(D, center(c), B) mod 360
By angle_to_center on D, B, F, c we get 2 * angle(D, B, F) == angle(D, center(c), F) mod 360
By angle_to_center on F, A, B, c we get 2 * angle(F, A, B) == angle(F, center(c), B) mod 360
By angle_to_center on D, F, A, c we get 2 * angle(D, F, A) == angle(D, center(c), A) mod 360
By angle_to_center on B, F, C, c we get 2 * angle(B, F, C) == angle(B, center(c), C) mod 360
By angle_to_center on D, A, F, c we get 2 * angle(D, A, F) == angle(D, center(c), F) mod 360
By angle_to_center on C, F, B, c we get 2 * angle(C, F, B) == angle(C, center(c), B) mod 360
By angle_to_center on F, A, D, c we get 2 * angle(F, A, D) == angle(F, center(c), D) mod 360
By angle_to_center on F, B, D, c we get 2 * angle(F, B, D) == angle(F, center(c), D) mod 360
By angle_to_center on A, F, C, c we get 2 * angle(A, F, C) == angle(A, center(c), C) mod 360
By between_imply_not_between on H, E, D we get collinear_and_not_between(D, H, E)
By between_imply_not_between on D, E, H we get collinear_and_not_between(E, D, H)
By angles_on_chord_v2 on C, D, B, F, c we get angle(C, B, D) == angle(C, F, D) + 180 mod 360
By angles_on_chord_v3 on A, F, C, D, c we get angle(A, C, F) == angle(A, D, F) + 180 mod 360
By angles_on_chord_v2 on C, D, A, F, c we get angle(C, A, D) == angle(C, F, D) + 180 mod 360
By angles_on_chord_v3 on D, C, B, F, c we get angle(D, B, C) == angle(D, F, C) + 180 mod 360
By angles_on_chord_v3 on D, C, A, F, c we get angle(D, A, C) == angle(D, F, C) + 180 mod 360
By angles_on_chord_v2 on D, C, F, B, c we get angle(D, F, C) == angle(D, B, C) + 180 mod 360
By angle_to_center on F, D, A, c we get 2 * angle(F, D, A) == angle(F, center(c), A) mod 360
By angles_on_chord_v2 on F, B, C, D, c we get angle(F, C, B) == angle(F, D, B) + 180 mod 360
By angles_on_chord_v3 on F, A, D, C, c we get angle(F, D, A) == angle(F, C, A) + 180 mod 360
By angles_on_chord_v3 on C, D, F, A, c we get angle(C, F, D) == angle(C, A, D) + 180 mod 360
By angles_on_chord_v3 on F, B, D, C, c we get angle(F, D, B) == angle(F, C, B) + 180 mod 360
By angle_to_center on F, D, B, c we get 2 * angle(F, D, B) == angle(F, center(c), B) mod 360
By angles_on_chord_v2 on B, F, D, C, c we get angle(B, D, F) == angle(B, C, F) + 180 mod 360
By angle_to_center on F, C, D, c we get 2 * angle(F, C, D) == angle(F, center(c), D) mod 360
By angle_to_center on F, D, C, c we get 2 * angle(F, D, C) == angle(F, center(c), C) mod 360
By angles_on_chord_v2 on A, F, D, C, c we get angle(A, D, F) == angle(A, C, F) + 180 mod 360
By angle_to_center on B, D, F, c we get 2 * angle(B, D, F) == angle(B, center(c), F) mod 360
By angle_to_center on D, F, C, c we get 2 * angle(D, F, C) == angle(D, center(c), C) mod 360
By angles_on_chord_v2 on D, C, F, A, c we get angle(D, F, C) == angle(D, A, C) + 180 mod 360
By angles_on_chord_v2 on F, A, C, D, c we get angle(F, C, A) == angle(F, D, A) + 180 mod 360
By angle_to_center on C, D, F, c we get 2 * angle(C, D, F) == angle(C, center(c), F) mod 360
By angle_to_center on D, C, F, c we get 2 * angle(D, C, F) == angle(D, center(c), F) mod 360
By angles_on_chord_v3 on B, F, C, D, c we get angle(B, C, F) == angle(B, D, F) + 180 mod 360
By angles_on_chord_v3 on C, D, F, B, c we get angle(C, F, D) == angle(C, B, D) + 180 mod 360
By angle_to_center on F, C, A, c we get 2 * angle(F, C, A) == angle(F, center(c), A) mod 360
By angle_to_center on A, D, F, c we get 2 * angle(A, D, F) == angle(A, center(c), F) mod 360
By angle_to_center on C, F, D, c we get 2 * angle(C, F, D) == angle(C, center(c), D) mod 360
By angle_to_center on F, C, B, c we get 2 * angle(F, C, B) == angle(F, center(c), B) mod 360
By angle_to_center on B, C, F, c we get 2 * angle(B, C, F) == angle(B, center(c), F) mod 360
By angle_to_center on A, C, F, c we get 2 * angle(A, C, F) == angle(A, center(c), F) mod 360
By orthocenter_concurrency on H, A, E we get orthocenter(A, E, H) in altitude(H, A, E), orthocenter(A, E, H) in altitude(A, E, H), orthocenter(A, E, H) in altitude(E, A, H)
By orthocenter_concurrency on B, H, E we get orthocenter(B, E, H) in altitude(B, E, H), orthocenter(B, E, H) in altitude(H, B, E), orthocenter(B, E, H) in altitude(E, B, H)
By in_imply_collinear on orthocenter(A, D, E), B, A we get collinear(A, B, orthocenter(A, D, E))
By in_imply_concyclic on B, D, C, F we get concyclic(B, C, D, F)
By in_imply_collinear on orthocenter(A, D, E), D, H we get collinear(D, H, orthocenter(A, D, E))
By in_imply_collinear on orthocenter(A, D, E), A, E we get collinear(A, E, orthocenter(A, D, E))
By in_imply_collinear on orthocenter(B, D, E), E, A we get collinear(A, E, orthocenter(B, D, E))
By in_imply_collinear on orthocenter(B, D, E), E, D we get collinear(D, E, orthocenter(B, D, E))
By in_imply_collinear on orthocenter(B, D, E), E, B we get collinear(B, E, orthocenter(B, D, E))
By in_imply_collinear on orthocenter(A, D, E), H, E we get collinear(E, H, orthocenter(A, D, E))
By line_inequality on altitude(E, A, D), Line(A, D), E we get Line(A, D) != altitude(E, A, D)
By in_imply_collinear on orthocenter(B, D, E), E, H we get collinear(E, H, orthocenter(B, D, E))
By in_imply_collinear on orthocenter(A, D, E), E, D we get collinear(D, E, orthocenter(A, D, E))
By in_imply_concyclic on A, F, C, D we get concyclic(A, C, D, F)
By in_imply_collinear on orthocenter(B, D, E), D, H we get collinear(D, H, orthocenter(B, D, E))
By in_imply_collinear on orthocenter(A, D, E), B, E we get collinear(B, E, orthocenter(A, D, E))
By in_imply_collinear on orthocenter(B, D, E), A, B we get collinear(A, B, orthocenter(B, D, E))
By line_containment_inequality on orthocenter(B, D, E), C, f we get C != orthocenter(B, D, E)
By line_inequality on altitude(E, B, D), Line(A, C), E we get Line(A, C) != altitude(E, B, D)
By line_containment_inequality on orthocenter(A, D, E), G, f we get G != orthocenter(A, D, E)
By point_on_perpendicular_bisector on A, B, orthocenter(A, D, E), j we get distance(A, orthocenter(A, D, E)) == distance(B, orthocenter(A, D, E))
By line_inequality on altitude(E, B, D), Line(A, D), E we get Line(A, D) != altitude(E, B, D)
By line_inequality on altitude(E, A, D), h, E we get h != altitude(E, A, D)
By line_containment_inequality on orthocenter(A, D, E), B, j we get B != orthocenter(A, D, E)
By line_inequality on altitude(E, B, D), Line(A, H), E we get Line(A, H) != altitude(E, B, D)
By line_inequality on altitude(E, A, D), Line(A, H), E we get Line(A, H) != altitude(E, A, D)
By point_on_perpendicular_bisector on A, B, orthocenter(B, D, E), j we get distance(A, orthocenter(B, D, E)) == distance(B, orthocenter(B, D, E))
By line_circle_intersection_has_at_most_two_points_0 on B, F, G, c we get G not in c
By between_imply_segment_sum on D, E, H we get distance(D, H) == distance(D, E) + distance(E, H)
By line_inequality on altitude(E, B, D), Line(B, D), E we get Line(B, D) != altitude(E, B, D)
By line_containment_inequality on orthocenter(B, D, E), B, j we get B != orthocenter(B, D, E)
By line_inequality on altitude(E, A, D), Line(B, D), E we get Line(B, D) != altitude(E, A, D)
By line_inequality on altitude(E, B, D), Line(C, H), E we get Line(C, H) != altitude(E, B, D)
By line_containment_inequality on orthocenter(B, D, E), F, j we get F != orthocenter(B, D, E)
By line_containment_inequality on orthocenter(B, D, E), H, f we get H != orthocenter(B, D, E)
By line_containment_inequality on orthocenter(A, D, E), C, j we get C != orthocenter(A, D, E)
By line_inequality on altitude(E, B, D), h, E we get h != altitude(E, B, D)
By line_inequality on altitude(E, A, D), Line(A, C), E we get Line(A, C) != altitude(E, A, D)
By line_containment_inequality on orthocenter(A, D, E), F, j we get F != orthocenter(A, D, E)
By line_inequality on altitude(E, B, D), g, E we get g != altitude(E, B, D)
By line_containment_inequality on orthocenter(B, D, E), G, j we get G != orthocenter(B, D, E)
By line_inequality on altitude(E, A, D), g, E we get g != altitude(E, A, D)
By line_inequality on altitude(E, B, D), Line(B, H), E we get Line(B, H) != altitude(E, B, D)
By line_containment_inequality on orthocenter(B, D, E), D, f we get D != orthocenter(B, D, E)
By line_containment_inequality on orthocenter(A, D, E), H, f we get H != orthocenter(A, D, E)
By line_inequality on altitude(E, A, D), i, E we get i != altitude(E, A, D)
By line_inequality on altitude(E, B, D), Line(B, C), E we get Line(B, C) != altitude(E, B, D)
By line_inequality on altitude(E, A, D), Line(C, H), E we get Line(C, H) != altitude(E, A, D)
By line_inequality on altitude(E, A, D), Line(B, C), E we get Line(B, C) != altitude(E, A, D)
By line_inequality on altitude(E, A, D), Line(B, H), E we get Line(B, H) != altitude(E, A, D)
By line_containment_inequality on orthocenter(A, D, E), D, f we get D != orthocenter(A, D, E)
By line_containment_inequality on orthocenter(B, D, E), A, j we get A != orthocenter(B, D, E)
By line_inequality on altitude(E, B, D), i, E we get i != altitude(E, B, D)
By line_containment_inequality on orthocenter(A, D, E), A, j we get A != orthocenter(A, D, E)
By internal_angle_bisector_definition_v0_r on E, D, E, H we get Line(D, H) == internal_angle_bisector(E, H, E)
By internal_angle_bisector_definition_v0_r on H, B, D, E we get Line(B, E) == internal_angle_bisector(D, E, H)
By external_angle_bisector_definition_v0_r on H, B, H, E we get Line(B, E) == external_angle_bisector(H, E, H)
By external_angle_bisector_definition_v0_r on H, A, H, E we get Line(A, E) == external_angle_bisector(H, E, H)
By power_of_a_point_on_circle on F, c we get 0 == power_of_a_point(F, c)
By internal_angle_bisector_definition_v0_r on H, D, H, E we get Line(D, E) == internal_angle_bisector(H, E, H)
By internal_angle_bisector_definition_v0_r on D, H, D, E we get Line(E, H) == internal_angle_bisector(D, E, D)
By perpendicular_lines_draw_intersection on altitude(E, B, D), Line(B, D) we get exists(line_intersection(Line(B, D), altitude(E, B, D)))
By internal_angle_bisector_definition_v0_r on E, H, E, D we get Line(D, H) == internal_angle_bisector(E, D, E)
By internal_angle_bisector_definition_v0_r on D, E, D, H we get Line(E, H) == internal_angle_bisector(D, H, D)
By internal_angle_bisector_definition_v0_r on H, A, D, E we get Line(A, E) == internal_angle_bisector(D, E, H)
By internal_angle_bisector_definition_v0_r on H, E, H, D we get Line(D, E) == internal_angle_bisector(H, D, H)
By perpendicular_lines_draw_intersection on altitude(E, A, D), Line(A, D) we get exists(line_intersection(Line(A, D), altitude(E, A, D)))
By sas_similarity on G, B, E, F, B, A we get similar_triangles(A, B, F, E, B, G)
By sas_similarity on A, B, F, E, B, G we get similar_triangles(A, B, F, E, B, G)
By sas_similarity on F, B, A, G, B, E we get similar_triangles(A, B, F, E, B, G)
By sas_similarity on E, B, G, A, B, F we get similar_triangles(A, B, F, E, B, G)
By power_of_a_point_definition on E, D, H, Circle(B, D, H) we get log(distance(D, E)) + log(distance(E, H)) == log(power_of_a_point(E, Circle(B, D, H)))
By power_of_a_point_definition on E, D, H, Circle(A, D, H) we get log(distance(D, E)) + log(distance(E, H)) == log(power_of_a_point(E, Circle(A, D, H)))
By concyclic_sufficient_conditions_v1 on B, G, E, H we get concyclic(B, E, G, H)
By line_intersection_definition on orthocenter(A, E, H), j, f we get orthocenter(A, E, H) == line_intersection(f, j)
By line_intersection_definition on orthocenter(B, E, H), f, j we get orthocenter(B, E, H) == line_intersection(f, j)
By perpendicular_line_definition on H, Line(A, H), altitude(E, A, H) we get Line(A, H) == perpendicular_line(H, altitude(E, A, H))
By perpendicular_line_definition on line_intersection(Line(B, D), altitude(E, B, D)), Line(B, D), altitude(E, B, D) we get Line(B, D) == perpendicular_line(line_intersection(Line(B, D), altitude(E, B, D)), altitude(E, B, D))
By perpendicular_line_definition on H, Line(B, H), altitude(E, B, H) we get Line(B, H) == perpendicular_line(H, altitude(E, B, H))
By perpendicular_line_definition on orthocenter(A, E, H), j, f we get j == perpendicular_line(orthocenter(A, E, H), f)
By median_definition on E, B, F, Line(E, G) we get Line(E, G) == median(E, B, F)
By median_definition on G, A, B, Line(E, G) we get Line(E, G) == median(G, A, B)
By perpendicular_line_definition on orthocenter(B, E, H), altitude(E, B, H), Line(B, H) we get altitude(E, B, H) == perpendicular_line(orthocenter(B, E, H), Line(B, H))
By perpendicular_line_definition on B, Line(B, H), altitude(E, B, H) we get Line(B, H) == perpendicular_line(B, altitude(E, B, H))
By perpendicular_line_definition on line_intersection(Line(A, D), altitude(E, A, D)), Line(A, D), altitude(E, A, D) we get Line(A, D) == perpendicular_line(line_intersection(Line(A, D), altitude(E, A, D)), altitude(E, A, D))
By perpendicular_line_definition on line_intersection(Line(A, D), altitude(E, A, D)), altitude(E, A, D), Line(A, D) we get altitude(E, A, D) == perpendicular_line(line_intersection(Line(A, D), altitude(E, A, D)), Line(A, D))
By perpendicular_line_definition on orthocenter(A, E, H), f, j we get f == perpendicular_line(orthocenter(A, E, H), j)
By perpendicular_line_definition on orthocenter(A, E, H), altitude(E, A, H), Line(A, H) we get altitude(E, A, H) == perpendicular_line(orthocenter(A, E, H), Line(A, H))
By perpendicular_line_definition on orthocenter(B, E, H), f, j we get f == perpendicular_line(orthocenter(B, E, H), j)
By perpendicular_line_definition on line_intersection(Line(B, D), altitude(E, B, D)), altitude(E, B, D), Line(B, D) we get altitude(E, B, D) == perpendicular_line(line_intersection(Line(B, D), altitude(E, B, D)), Line(B, D))
By perpendicular_line_definition on A, Line(A, H), altitude(E, A, H) we get Line(A, H) == perpendicular_line(A, altitude(E, A, H))
By perpendicular_line_definition on orthocenter(B, E, H), j, f we get j == perpendicular_line(orthocenter(B, E, H), f)
By line_unique_intersection_v0 on j, f, orthocenter(A, E, H), orthocenter(B, E, H) we get orthocenter(A, E, H) == orthocenter(B, E, H)
By line_unique_intersection_v0 on j, f, E, orthocenter(A, E, H) we get E == orthocenter(A, E, H)
By line_unique_intersection_v0 on j, f, E, orthocenter(B, E, H) we get E == orthocenter(B, E, H)
By same_angle_v2 on E, D, H, G we get angle(D, E, G) == angle(H, E, G) + 180 mod 360
By same_angle_v1 on F, G, B, D we get angle(B, F, D) == angle(G, F, D) mod 360
By same_angle_v3 on G, B, F, E we get angle(B, G, E) == angle(F, G, E) + 180 mod 360
By perpendicular_direction_conditions_v0 on C, D, H, F we get perpendicular(Line(C, D), Line(F, H))
By same_angle_v0 on F, B, G, C we get angle(B, F, C) == angle(G, F, C) mod 360
By same_angle_v0 on D, H, E, F we get angle(E, D, F) == angle(H, D, F) mod 360
By same_angle_v3 on E, A, B, G we get angle(A, E, G) == angle(B, E, G) + 180 mod 360
By same_angle_v1 on H, E, D, F we get angle(D, H, F) == angle(E, H, F) mod 360
By different_points_v1 on D, F we get 0 != distance(D, F)
By different_points_v1 on F, C we get 0 != distance(C, F)
By different_points_v1 on G, E we get 0 != distance(E, G)
By same_angle_v0 on F, G, B, H we get angle(B, F, H) == angle(G, F, H) mod 360
By in_imply_collinear on orthocenter(B, E, H), E, H we get collinear(E, H, orthocenter(B, E, H))
By in_imply_collinear on line_intersection(Line(B, D), altitude(E, B, D)), D, B we get collinear(B, D, line_intersection(Line(B, D), altitude(E, B, D)))
By in_imply_collinear on orthocenter(B, E, H), B, E we get collinear(B, E, orthocenter(B, E, H))
By in_imply_collinear on line_intersection(Line(A, D), altitude(E, A, D)), D, A we get collinear(A, D, line_intersection(Line(A, D), altitude(E, A, D)))
By in_imply_collinear on orthocenter(A, E, H), H, D we get collinear(D, H, orthocenter(A, E, H))
By in_imply_collinear on orthocenter(A, E, H), H, E we get collinear(E, H, orthocenter(A, E, H))
By in_imply_collinear on orthocenter(B, E, H), E, D we get collinear(D, E, orthocenter(B, E, H))
By in_imply_collinear on orthocenter(A, E, H), B, A we get collinear(A, B, orthocenter(A, E, H))
By in_imply_collinear on orthocenter(A, E, H), E, A we get collinear(A, E, orthocenter(A, E, H))
By in_imply_collinear on orthocenter(B, E, H), H, D we get collinear(D, H, orthocenter(B, E, H))
By in_imply_collinear on orthocenter(B, E, H), E, A we get collinear(A, E, orthocenter(B, E, H))
By in_imply_collinear on orthocenter(A, E, H), E, B we get collinear(B, E, orthocenter(A, E, H))
By in_imply_collinear on orthocenter(B, E, H), A, B we get collinear(A, B, orthocenter(B, E, H))
By in_imply_collinear on orthocenter(A, E, H), E, D we get collinear(D, E, orthocenter(A, E, H))
By line_inequality on Line(C, F), f, F we get f != Line(C, F)
By point_on_perpendicular_bisector on B, A, orthocenter(B, E, H), j we get distance(A, orthocenter(B, E, H)) == distance(B, orthocenter(B, E, H))
By point_on_perpendicular_bisector on A, B, orthocenter(A, E, H), j we get distance(A, orthocenter(A, E, H)) == distance(B, orthocenter(A, E, H))
By not_in_line_equivalent_to_not_collinear_v0_r on A, F, H we get A not in Line(F, H)
By line_inequality on altitude(E, A, H), Line(B, C), E we get Line(B, C) != altitude(E, A, H)
By line_inequality on Line(F, H), i, H we get i != Line(F, H)
By line_containment_inequality on orthocenter(A, E, H), G, j we get G != orthocenter(A, E, H)
By line_inequality on Line(F, H), Line(B, C), H we get Line(B, C) != Line(F, H)
By line_inequality on Line(E, G), Line(A, H), G we get Line(A, H) != Line(E, G)
By line_inequality on Line(F, H), Line(C, H), F we get Line(C, H) != Line(F, H)
By line_containment_inequality on line_intersection(Line(A, D), altitude(E, A, D)), H, Line(A, D) we get H != line_intersection(Line(A, D), altitude(E, A, D))
By line_inequality on Line(E, G), h, G we get h != Line(E, G)
By line_inequality on Line(C, F), g, F we get g != Line(C, F)
By not_in_line_equivalent_to_not_collinear_v0_r on H, G, E we get H not in Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on D, F, H we get D not in Line(F, H)
By line_containment_inequality on line_intersection(Line(A, D), altitude(E, A, D)), E, Line(A, D) we get E != line_intersection(Line(A, D), altitude(E, A, D))
By not_in_line_equivalent_to_not_collinear_v0_r on B, C, F we get B not in Line(C, F)
By line_inequality on Line(C, F), Line(A, H), C we get Line(A, H) != Line(C, F)
By not_in_line_equivalent_to_not_collinear_v0_r on A, G, E we get A not in Line(E, G)
By line_inequality on Line(D, F), j, F we get j != Line(D, F)
By line_inequality on altitude(E, B, H), Line(B, H), E we get Line(B, H) != altitude(E, B, H)
By line_inequality on altitude(E, A, H), Line(B, H), E we get Line(B, H) != altitude(E, A, H)
By line_inequality on Line(D, F), f, D we get f != Line(D, F)
By line_containment_inequality on line_intersection(Line(B, D), altitude(E, B, D)), E, Line(B, D) we get E != line_intersection(Line(B, D), altitude(E, B, D))
By line_containment_inequality on orthocenter(B, E, H), H, f we get H != orthocenter(B, E, H)
By line_inequality on Line(C, F), i, C we get i != Line(C, F)
By line_inequality on Line(C, F), j, F we get j != Line(C, F)
By not_in_line_equivalent_to_not_collinear_v0_r on B, G, E we get B not in Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on G, F, D we get G not in Line(D, F)
By line_inequality on Line(F, H), Line(B, D), H we get Line(B, D) != Line(F, H)
By line_inequality on Line(F, H), Line(A, H), F we get Line(A, H) != Line(F, H)
By line_inequality on Line(C, F), Line(B, D), F we get Line(B, D) != Line(C, F)
By line_inequality on Line(D, F), i, D we get i != Line(D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on E, H, F we get E not in Line(F, H)
By line_inequality on Line(E, G), g, G we get g != Line(E, G)
By line_containment_inequality on orthocenter(A, E, H), H, f we get H != orthocenter(A, E, H)
By line_inequality on Line(F, H), f, F we get f != Line(F, H)
By line_inequality on altitude(E, A, H), Line(A, C), E we get Line(A, C) != altitude(E, A, H)
By line_inequality on Line(F, H), g, F we get g != Line(F, H)
By line_inequality on Line(E, G), Line(C, H), G we get Line(C, H) != Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on C, E, G we get C not in Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on C, F, H we get C not in Line(F, H)
By line_containment_inequality on orthocenter(A, E, H), D, f we get D != orthocenter(A, E, H)
By line_inequality on Line(E, G), Line(B, H), E we get Line(B, H) != Line(E, G)
By line_inequality on Line(D, F), Line(A, H), F we get Line(A, H) != Line(D, F)
By line_inequality on Line(D, F), Line(A, C), D we get Line(A, C) != Line(D, F)
By line_inequality on altitude(E, B, H), Line(A, H), E we get Line(A, H) != altitude(E, B, H)
By not_in_line_equivalent_to_not_collinear_v0_r on B, H, F we get B not in Line(F, H)
By line_inequality on Line(F, H), Line(A, D), F we get Line(A, D) != Line(F, H)
By not_in_line_equivalent_to_not_collinear_v0_r on H, F, D we get H not in Line(D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on A, F, D we get A not in Line(D, F)
By line_containment_inequality on orthocenter(B, E, H), G, j we get G != orthocenter(B, E, H)
By line_containment_inequality on orthocenter(B, E, H), D, f we get D != orthocenter(B, E, H)
By line_inequality on Line(D, F), Line(B, C), D we get Line(B, C) != Line(D, F)
By line_containment_inequality on orthocenter(A, E, H), C, f we get C != orthocenter(A, E, H)
By line_inequality on Line(F, H), Line(A, C), H we get Line(A, C) != Line(F, H)
By not_in_line_equivalent_to_not_collinear_v0_r on E, F, C we get E not in Line(C, F)
By line_inequality on Line(E, G), i, E we get i != Line(E, G)
By line_inequality on Line(D, F), h, D we get h != Line(D, F)
By line_containment_inequality on line_intersection(Line(A, D), altitude(E, A, D)), F, Line(A, D) we get F != line_intersection(Line(A, D), altitude(E, A, D))
By not_in_line_equivalent_to_not_collinear_v0_r on E, D, F we get E not in Line(D, F)
By line_inequality on altitude(E, A, H), Line(A, H), E we get Line(A, H) != altitude(E, A, H)
By line_containment_inequality on line_intersection(Line(A, D), altitude(E, A, D)), G, Line(A, D) we get G != line_intersection(Line(A, D), altitude(E, A, D))
By line_inequality on Line(E, G), Line(A, D), E we get Line(A, D) != Line(E, G)
By line_inequality on Line(D, F), Line(B, H), F we get Line(B, H) != Line(D, F)
By line_containment_inequality on line_intersection(Line(A, D), altitude(E, A, D)), B, Line(A, D) we get B != line_intersection(Line(A, D), altitude(E, A, D))
By line_inequality on Line(E, G), f, G we get f != Line(E, G)
By line_inequality on Line(E, G), Line(A, C), E we get Line(A, C) != Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on A, F, C we get A not in Line(C, F)
By line_containment_inequality on orthocenter(A, E, H), F, j we get F != orthocenter(A, E, H)
By line_inequality on Line(C, F), Line(A, D), F we get Line(A, D) != Line(C, F)
By line_containment_inequality on line_intersection(Line(B, D), altitude(E, B, D)), A, Line(B, D) we get A != line_intersection(Line(B, D), altitude(E, B, D))
By line_containment_inequality on orthocenter(B, E, H), F, f we get F != orthocenter(B, E, H)
By not_in_line_equivalent_to_not_collinear_v0_r on H, F, C we get H not in Line(C, F)
By line_containment_inequality on orthocenter(B, E, H), A, j we get A != orthocenter(B, E, H)
By line_inequality on Line(E, G), Line(B, D), G we get Line(B, D) != Line(E, G)
By line_inequality on altitude(E, B, H), i, E we get i != altitude(E, B, H)
By line_containment_inequality on orthocenter(A, E, H), B, j we get B != orthocenter(A, E, H)
By line_inequality on Line(F, H), Line(B, H), F we get Line(B, H) != Line(F, H)
By line_inequality on altitude(E, A, H), i, E we get i != altitude(E, A, H)
By line_inequality on altitude(E, A, H), Line(B, D), E we get Line(B, D) != altitude(E, A, H)
By line_inequality on Line(D, F), Line(C, H), D we get Line(C, H) != Line(D, F)
By line_inequality on Line(C, F), Line(B, H), F we get Line(B, H) != Line(C, F)
By not_in_line_equivalent_to_not_collinear_v0_r on G, F, H we get G not in Line(F, H)
By line_inequality on Line(C, F), Line(C, H), F we get Line(C, F) != Line(C, H)
By line_inequality on Line(C, F), Line(A, C), F we get Line(A, C) != Line(C, F)
By line_inequality on altitude(E, A, H), h, E we get h != altitude(E, A, H)
By not_in_line_equivalent_to_not_collinear_v0_r on D, G, E we get D not in Line(E, G)
By line_containment_inequality on line_intersection(Line(B, D), altitude(E, B, D)), F, Line(B, D) we get F != line_intersection(Line(B, D), altitude(E, B, D))
By line_inequality on Line(C, F), Line(B, C), F we get Line(B, C) != Line(C, F)
By line_inequality on altitude(E, B, H), Line(B, C), E we get Line(B, C) != altitude(E, B, H)
By line_inequality on Line(C, F), h, C we get h != Line(C, F)
By line_inequality on altitude(E, B, H), Line(A, C), E we get Line(A, C) != altitude(E, B, H)
By line_containment_inequality on orthocenter(B, E, H), C, f we get C != orthocenter(B, E, H)
By line_inequality on Line(E, G), Line(B, C), G we get Line(B, C) != Line(E, G)
By line_inequality on altitude(E, B, H), h, E we get h != altitude(E, B, H)
By not_in_line_equivalent_to_not_collinear_v0_r on F, G, E we get F not in Line(E, G)
By line_inequality on altitude(E, B, H), g, E we get g != altitude(E, B, H)
By not_in_line_equivalent_to_not_collinear_v0_r on D, C, F we get D not in Line(C, F)
By line_inequality on altitude(E, B, H), Line(C, H), E we get Line(C, H) != altitude(E, B, H)
By line_inequality on altitude(E, A, H), g, E we get g != altitude(E, A, H)
By line_inequality on Line(D, F), Line(B, D), F we get Line(B, D) != Line(D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on C, D, F we get C not in Line(D, F)
By line_inequality on Line(F, H), h, H we get h != Line(F, H)
By line_containment_inequality on orthocenter(B, E, H), B, j we get B != orthocenter(B, E, H)
By line_containment_inequality on orthocenter(A, E, H), A, j we get A != orthocenter(A, E, H)
By line_containment_inequality on line_intersection(Line(B, D), altitude(E, B, D)), G, Line(B, D) we get G != line_intersection(Line(B, D), altitude(E, B, D))
By line_inequality on Line(D, F), g, F we get g != Line(D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on B, F, D we get B not in Line(D, F)
By line_inequality on altitude(E, B, H), Line(B, D), E we get Line(B, D) != altitude(E, B, H)
By line_inequality on Line(D, F), Line(A, D), F we get Line(A, D) != Line(D, F)
By line_containment_inequality on line_intersection(Line(B, D), altitude(E, B, D)), H, Line(B, D) we get H != line_intersection(Line(B, D), altitude(E, B, D))
By line_inequality on altitude(E, A, H), Line(C, H), E we get Line(C, H) != altitude(E, A, H)
By line_inequality on Line(E, G), j, G we get j != Line(E, G)
By line_inequality on Line(F, H), j, F we get j != Line(F, H)
By not_in_line_equivalent_to_not_collinear_v0_r on G, C, F we get G not in Line(C, F)
By line_inequality on altitude(E, B, H), Line(A, D), E we get Line(A, D) != altitude(E, B, H)
By line_containment_inequality on line_intersection(Line(A, D), altitude(E, A, D)), C, Line(A, D) we get C != line_intersection(Line(A, D), altitude(E, A, D))
By line_inequality on altitude(E, A, H), Line(A, D), E we get Line(A, D) != altitude(E, A, H)
By line_containment_inequality on line_intersection(Line(B, D), altitude(E, B, D)), C, Line(B, D) we get C != line_intersection(Line(B, D), altitude(E, B, D))
By sss_anti_congruence_v1 on F, H, A, A, H, F we get anti_congruent_triangles(A, F, H, F, A, H)
By tangent_chord_angle_v1 on F, C, H, D we get tangent(Line(D, F), Circle(C, F, H))
By sss_anti_congruence_v0 on C, H, F, D, H, F we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_anti_congruence_v1 on H, F, B, H, B, F we get anti_congruent_triangles(B, F, H, F, B, H)
By sss_congruence_v0 on D, F, H, F, C, H we get congruent_triangles(C, F, H, F, D, H)
By sss_anti_congruence_v1 on F, D, H, D, F, H we get anti_congruent_triangles(D, F, H, F, D, H)
By sss_anti_congruence_v1 on H, C, F, H, D, F we get anti_congruent_triangles(C, F, H, D, F, H)
By isosceles_triangle_midpoint on H, B, F we get midpoint(B, F) in median(H, B, F)
By sss_anti_congruence_v1 on C, F, H, F, C, H we get anti_congruent_triangles(C, F, H, F, C, H)
By sss_anti_congruence_v0 on D, F, H, F, D, H we get anti_congruent_triangles(D, F, H, F, D, H)
By sss_congruence_v1 on H, F, D, H, C, F we get congruent_triangles(C, F, H, F, D, H)
By sas_anti_congruence on F, H, A, A, H, F we get anti_congruent_triangles(A, F, H, F, A, H)
By sss_congruence_v0 on F, C, H, D, F, H we get congruent_triangles(C, F, H, F, D, H)
By sss_congruence_v1 on C, F, H, F, D, H we get congruent_triangles(C, F, H, F, D, H)
By sss_anti_congruence_v1 on F, B, H, B, F, H we get anti_congruent_triangles(B, F, H, F, B, H)
By sss_anti_congruence_v1 on A, F, H, F, A, H we get anti_congruent_triangles(A, F, H, F, A, H)
By sas_anti_congruence on F, H, C, F, H, D we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_congruence_v1 on F, D, H, C, F, H we get congruent_triangles(C, F, H, F, D, H)
By sss_anti_congruence_v0 on H, D, F, H, C, F we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_anti_congruence_v0 on D, F, H, C, F, H we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_anti_congruence_v1 on H, C, F, H, F, C we get anti_congruent_triangles(C, F, H, F, C, H)
By sss_anti_congruence_v1 on H, C, F, H, F, C we get anti_congruent_triangles(C, F, H, F, C, H)
By sss_anti_congruence_v1 on H, C, F, H, F, C we get anti_congruent_triangles(C, F, H, F, C, H)
By sss_anti_congruence_v0 on F, H, D, D, H, F we get anti_congruent_triangles(D, F, H, F, D, H)
By sss_anti_congruence_v0 on H, D, F, H, C, F we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_anti_congruence_v0 on A, H, F, F, H, A we get anti_congruent_triangles(A, F, H, F, A, H)
By sss_congruence_v0 on C, H, F, F, H, D we get congruent_triangles(C, F, H, F, D, H)
By sss_anti_congruence_v1 on F, D, H, D, F, H we get anti_congruent_triangles(D, F, H, F, D, H)
By sss_congruence_v0 on F, C, H, D, F, H we get congruent_triangles(C, F, H, F, D, H)
By sss_anti_congruence_v0 on H, F, A, H, A, F we get anti_congruent_triangles(A, F, H, F, A, H)
By sss_anti_congruence_v1 on H, A, F, H, F, A we get anti_congruent_triangles(A, F, H, F, A, H)
By sss_anti_congruence_v0 on A, H, F, F, H, A we get anti_congruent_triangles(A, F, H, F, A, H)
By sss_congruence_v0 on H, F, C, H, D, F we get congruent_triangles(C, F, H, F, D, H)
By sss_anti_congruence_v1 on F, B, H, B, F, H we get anti_congruent_triangles(B, F, H, F, B, H)
By sss_anti_congruence_v1 on C, F, H, D, F, H we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_anti_congruence_v0 on H, F, C, H, F, D we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_anti_congruence_v0 on F, H, D, F, H, C we get anti_congruent_triangles(C, F, H, D, F, H)
By tangent_chord_angle_v1 on F, D, H, C we get tangent(Line(C, F), Circle(D, F, H))
By sss_anti_congruence_v0 on F, H, D, D, H, F we get anti_congruent_triangles(D, F, H, F, D, H)
By sss_anti_congruence_v1 on F, H, A, A, H, F we get anti_congruent_triangles(A, F, H, F, A, H)
By sss_anti_congruence_v1 on H, F, D, H, F, C we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_anti_congruence_v0 on F, A, H, A, F, H we get anti_congruent_triangles(A, F, H, F, A, H)
By reverse_direction on H, F we get 180 == direction(H, F) - direction(F, H) mod 360
By external_angle_bisector_definition_v0_r on B, D, A, F we get Line(D, F) == external_angle_bisector(A, F, B)
By sss_anti_congruence_v0 on B, F, H, F, B, H we get anti_congruent_triangles(B, F, H, F, B, H)
By sss_congruence_v0 on D, F, H, F, C, H we get congruent_triangles(C, F, H, F, D, H)
By sss_anti_congruence_v1 on F, H, A, A, H, F we get anti_congruent_triangles(A, F, H, F, A, H)
By sss_anti_congruence_v1 on H, A, F, H, F, A we get anti_congruent_triangles(A, F, H, F, A, H)
By sas_anti_congruence on B, H, F, F, H, B we get anti_congruent_triangles(B, F, H, F, B, H)
By sss_anti_congruence_v0 on F, H, B, B, H, F we get anti_congruent_triangles(B, F, H, F, B, H)
By sss_anti_congruence_v1 on B, H, F, F, H, B we get anti_congruent_triangles(B, F, H, F, B, H)
By sss_congruence_v1 on C, F, H, F, D, H we get congruent_triangles(C, F, H, F, D, H)
By isosceles_triangle_properties on H, F, A we get distance(A, H) == distance(F, H), angle(F, A, H) == angle(H, F, A) mod 360
By sss_anti_congruence_v1 on D, H, F, F, H, D we get anti_congruent_triangles(D, F, H, F, D, H)
By sss_congruence_v0 on H, D, F, H, F, C we get congruent_triangles(C, F, H, F, D, H)
By sss_anti_congruence_v1 on F, B, H, B, F, H we get anti_congruent_triangles(B, F, H, F, B, H)
By isosceles_triangle_properties on H, F, C we get distance(C, H) == distance(F, H), angle(F, C, H) == angle(H, F, C) mod 360
By sss_anti_congruence_v1 on F, D, H, D, F, H we get anti_congruent_triangles(D, F, H, F, D, H)
By sss_anti_congruence_v1 on F, B, H, B, F, H we get anti_congruent_triangles(B, F, H, F, B, H)
By sss_anti_congruence_v1 on B, H, F, F, H, B we get anti_congruent_triangles(B, F, H, F, B, H)
By sss_anti_congruence_v1 on H, F, D, H, D, F we get anti_congruent_triangles(D, F, H, F, D, H)
By sss_anti_congruence_v0 on C, H, F, D, H, F we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_congruence_v0 on F, H, D, C, H, F we get congruent_triangles(C, F, H, F, D, H)
By sss_anti_congruence_v0 on H, D, F, H, F, D we get anti_congruent_triangles(D, F, H, F, D, H)
By sss_congruence_v0 on F, H, D, C, H, F we get congruent_triangles(C, F, H, F, D, H)
By sas_anti_congruence on F, H, D, F, H, C we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_anti_congruence_v1 on H, F, D, H, D, F we get anti_congruent_triangles(D, F, H, F, D, H)
By sss_anti_congruence_v0 on H, F, C, H, C, F we get anti_congruent_triangles(C, F, H, F, C, H)
By sss_anti_congruence_v1 on D, H, F, F, H, D we get anti_congruent_triangles(D, F, H, F, D, H)
By sas_congruence on F, H, D, C, H, F we get congruent_triangles(C, F, H, F, D, H)
By sss_anti_congruence_v0 on D, F, H, C, F, H we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_anti_congruence_v0 on F, C, H, C, F, H we get anti_congruent_triangles(C, F, H, F, C, H)
By sss_congruence_v1 on C, F, H, F, D, H we get congruent_triangles(C, F, H, F, D, H)
By sas_anti_congruence on A, H, F, F, H, A we get anti_congruent_triangles(A, F, H, F, A, H)
By sss_congruence_v1 on D, H, F, F, H, C we get congruent_triangles(C, F, H, F, D, H)
By sss_anti_congruence_v1 on D, H, F, C, H, F we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_anti_congruence_v0 on H, B, F, H, F, B we get anti_congruent_triangles(B, F, H, F, B, H)
By sas_anti_congruence on F, H, D, D, H, F we get anti_congruent_triangles(D, F, H, F, D, H)
By isosceles_triangle_properties on H, A, F we get distance(A, H) == distance(F, H), angle(A, F, H) == angle(H, A, F) mod 360
By sss_anti_congruence_v0 on F, A, H, A, F, H we get anti_congruent_triangles(A, F, H, F, A, H)
By sss_anti_congruence_v0 on H, D, F, H, F, D we get anti_congruent_triangles(D, F, H, F, D, H)
By sss_anti_congruence_v0 on F, H, B, B, H, F we get anti_congruent_triangles(B, F, H, F, B, H)
By sss_anti_congruence_v1 on H, F, B, H, B, F we get anti_congruent_triangles(B, F, H, F, B, H)
By sss_anti_congruence_v1 on F, H, C, F, H, D we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_anti_congruence_v1 on F, H, C, F, H, D we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_anti_congruence_v1 on F, H, C, F, H, D we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_anti_congruence_v0 on D, F, H, C, F, H we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_anti_congruence_v1 on H, F, D, H, D, F we get anti_congruent_triangles(D, F, H, F, D, H)
By sss_anti_congruence_v0 on C, H, F, F, H, C we get anti_congruent_triangles(C, F, H, F, C, H)
By sss_anti_congruence_v1 on H, A, F, H, F, A we get anti_congruent_triangles(A, F, H, F, A, H)
By sss_anti_congruence_v0 on B, F, H, F, B, H we get anti_congruent_triangles(B, F, H, F, B, H)
By sss_congruence_v0 on D, F, H, F, C, H we get congruent_triangles(C, F, H, F, D, H)
By sss_congruence_v0 on F, C, H, D, F, H we get congruent_triangles(C, F, H, F, D, H)
By sss_anti_congruence_v0 on H, F, C, H, F, D we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_anti_congruence_v1 on D, H, F, F, H, D we get anti_congruent_triangles(D, F, H, F, D, H)
By sss_congruence_v1 on H, C, F, H, F, D we get congruent_triangles(C, F, H, F, D, H)
By internal_angle_bisector_definition_v0_r on C, F, D, H we get Line(F, H) == internal_angle_bisector(C, H, D)
By sss_anti_congruence_v0 on D, F, H, C, F, H we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_anti_congruence_v1 on H, F, D, H, F, C we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_anti_congruence_v0 on F, C, H, C, F, H we get anti_congruent_triangles(C, F, H, F, C, H)
By sss_anti_congruence_v1 on D, H, F, C, H, F we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_anti_congruence_v1 on F, D, H, F, C, H we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_anti_congruence_v1 on H, F, D, H, F, C we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_anti_congruence_v0 on B, F, H, F, B, H we get anti_congruent_triangles(B, F, H, F, B, H)
By sss_congruence_v0 on F, H, D, C, H, F we get congruent_triangles(C, F, H, F, D, H)
By sss_congruence_v0 on H, F, C, H, D, F we get congruent_triangles(C, F, H, F, D, H)
By sas_anti_congruence on F, H, B, B, H, F we get anti_congruent_triangles(B, F, H, F, B, H)
By sss_congruence_v1 on D, H, F, F, H, C we get congruent_triangles(C, F, H, F, D, H)
By sss_anti_congruence_v1 on F, D, H, F, C, H we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_congruence_v0 on H, D, F, H, F, C we get congruent_triangles(C, F, H, F, D, H)
By sss_anti_congruence_v0 on F, H, B, B, H, F we get anti_congruent_triangles(B, F, H, F, B, H)
By sss_anti_congruence_v0 on F, A, H, A, F, H we get anti_congruent_triangles(A, F, H, F, A, H)
By sss_anti_congruence_v0 on F, H, D, D, H, F we get anti_congruent_triangles(D, F, H, F, D, H)
By sss_anti_congruence_v0 on H, D, F, H, F, D we get anti_congruent_triangles(D, F, H, F, D, H)
By sss_anti_congruence_v1 on H, F, D, H, F, C we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_anti_congruence_v0 on H, D, F, H, F, D we get anti_congruent_triangles(D, F, H, F, D, H)
By sss_anti_congruence_v0 on F, C, H, F, D, H we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_congruence_v0 on H, D, F, H, F, C we get congruent_triangles(C, F, H, F, D, H)
By sss_anti_congruence_v1 on A, F, H, F, A, H we get anti_congruent_triangles(A, F, H, F, A, H)
By sss_congruence_v1 on C, F, H, F, D, H we get congruent_triangles(C, F, H, F, D, H)
By sss_anti_congruence_v0 on F, C, H, C, F, H we get anti_congruent_triangles(C, F, H, F, C, H)
By sss_anti_congruence_v1 on F, H, C, F, H, D we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_anti_congruence_v1 on A, F, H, F, A, H we get anti_congruent_triangles(A, F, H, F, A, H)
By sss_anti_congruence_v1 on B, H, F, F, H, B we get anti_congruent_triangles(B, F, H, F, B, H)
By sas_anti_congruence on F, H, C, C, H, F we get anti_congruent_triangles(C, F, H, F, C, H)
By sss_anti_congruence_v1 on C, F, H, F, C, H we get anti_congruent_triangles(C, F, H, F, C, H)
By sss_anti_congruence_v0 on D, F, H, C, F, H we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_anti_congruence_v0 on D, F, H, F, D, H we get anti_congruent_triangles(D, F, H, F, D, H)
By sss_anti_congruence_v0 on F, H, D, D, H, F we get anti_congruent_triangles(D, F, H, F, D, H)
By isosceles_triangle_properties on H, F, D we get distance(D, H) == distance(F, H), angle(F, D, H) == angle(H, F, D) mod 360
By sss_anti_congruence_v0 on H, B, F, H, F, B we get anti_congruent_triangles(B, F, H, F, B, H)
By sss_anti_congruence_v1 on C, F, H, D, F, H we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_anti_congruence_v0 on C, H, F, F, H, C we get anti_congruent_triangles(C, F, H, F, C, H)
By sss_anti_congruence_v1 on H, C, F, H, D, F we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_anti_congruence_v0 on F, C, H, F, D, H we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_congruence_v1 on D, H, F, F, H, C we get congruent_triangles(C, F, H, F, D, H)
By sss_anti_congruence_v1 on F, D, H, F, C, H we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_anti_congruence_v1 on H, C, F, H, D, F we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_anti_congruence_v1 on H, F, D, H, D, F we get anti_congruent_triangles(D, F, H, F, D, H)
By sss_anti_congruence_v0 on A, H, F, F, H, A we get anti_congruent_triangles(A, F, H, F, A, H)
By sss_anti_congruence_v1 on C, F, H, F, C, H we get anti_congruent_triangles(C, F, H, F, C, H)
By sss_anti_congruence_v1 on F, D, H, F, C, H we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_anti_congruence_v1 on F, H, C, C, H, F we get anti_congruent_triangles(C, F, H, F, C, H)
By sss_congruence_v0 on C, H, F, F, H, D we get congruent_triangles(C, F, H, F, D, H)
By sss_anti_congruence_v1 on F, H, C, C, H, F we get anti_congruent_triangles(C, F, H, F, C, H)
By sss_congruence_v1 on F, D, H, C, F, H we get congruent_triangles(C, F, H, F, D, H)
By isosceles_triangle_properties on H, C, F we get distance(C, H) == distance(F, H), angle(C, F, H) == angle(H, C, F) mod 360
By sss_congruence_v1 on D, H, F, F, H, C we get congruent_triangles(C, F, H, F, D, H)
By sss_anti_congruence_v0 on H, B, F, H, F, B we get anti_congruent_triangles(B, F, H, F, B, H)
By sss_anti_congruence_v0 on H, D, F, H, F, D we get anti_congruent_triangles(D, F, H, F, D, H)
By sss_anti_congruence_v1 on H, A, F, H, F, A we get anti_congruent_triangles(A, F, H, F, A, H)
By sss_anti_congruence_v0 on C, H, F, F, H, C we get anti_congruent_triangles(C, F, H, F, C, H)
By isosceles_triangle_properties on H, F, B we get distance(B, H) == distance(F, H), angle(F, B, H) == angle(H, F, B) mod 360
By sss_anti_congruence_v0 on F, C, H, F, D, H we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_anti_congruence_v1 on F, H, A, A, H, F we get anti_congruent_triangles(A, F, H, F, A, H)
By sss_congruence_v0 on H, D, F, H, F, C we get congruent_triangles(C, F, H, F, D, H)
By sss_anti_congruence_v0 on C, H, F, D, H, F we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_congruence_v0 on D, F, H, F, C, H we get congruent_triangles(C, F, H, F, D, H)
By sss_congruence_v0 on C, H, F, F, H, D we get congruent_triangles(C, F, H, F, D, H)
By sss_anti_congruence_v1 on F, D, H, D, F, H we get anti_congruent_triangles(D, F, H, F, D, H)
By sss_anti_congruence_v1 on H, C, F, H, F, C we get anti_congruent_triangles(C, F, H, F, C, H)
By sss_anti_congruence_v0 on D, F, H, C, F, H we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_congruence_v0 on H, D, F, H, F, C we get congruent_triangles(C, F, H, F, D, H)
By sss_anti_congruence_v1 on B, H, F, F, H, B we get anti_congruent_triangles(B, F, H, F, B, H)
By sss_anti_congruence_v0 on H, F, A, H, A, F we get anti_congruent_triangles(A, F, H, F, A, H)
By sss_anti_congruence_v0 on F, C, H, C, F, H we get anti_congruent_triangles(C, F, H, F, C, H)
By sss_congruence_v0 on H, F, C, H, D, F we get congruent_triangles(C, F, H, F, D, H)
By sss_congruence_v1 on C, F, H, F, D, H we get congruent_triangles(C, F, H, F, D, H)
By sss_anti_congruence_v1 on A, F, H, F, A, H we get anti_congruent_triangles(A, F, H, F, A, H)
By sss_anti_congruence_v1 on H, A, F, H, F, A we get anti_congruent_triangles(A, F, H, F, A, H)
By sss_anti_congruence_v1 on F, D, H, D, F, H we get anti_congruent_triangles(D, F, H, F, D, H)
By sss_congruence_v0 on D, F, H, F, C, H we get congruent_triangles(C, F, H, F, D, H)
By sss_congruence_v0 on F, C, H, D, F, H we get congruent_triangles(C, F, H, F, D, H)
By sss_anti_congruence_v1 on H, F, D, H, D, F we get anti_congruent_triangles(D, F, H, F, D, H)
By sss_anti_congruence_v0 on H, F, A, H, A, F we get anti_congruent_triangles(A, F, H, F, A, H)
By sss_congruence_v0 on H, F, C, H, D, F we get congruent_triangles(C, F, H, F, D, H)
By sss_anti_congruence_v0 on H, F, A, H, A, F we get anti_congruent_triangles(A, F, H, F, A, H)
By sss_anti_congruence_v1 on F, D, H, F, C, H we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_anti_congruence_v1 on D, H, F, C, H, F we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_anti_congruence_v1 on D, H, F, F, H, D we get anti_congruent_triangles(D, F, H, F, D, H)
By sss_anti_congruence_v1 on F, H, A, A, H, F we get anti_congruent_triangles(A, F, H, F, A, H)
By sas_anti_congruence on C, H, F, F, H, C we get anti_congruent_triangles(C, F, H, F, C, H)
By sss_congruence_v1 on H, F, D, H, C, F we get congruent_triangles(C, F, H, F, D, H)
By isosceles_triangle_properties on H, D, F we get distance(D, H) == distance(F, H), angle(D, F, H) == angle(H, D, F) mod 360
By sss_anti_congruence_v0 on H, F, C, H, F, D we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_congruence_v0 on F, H, D, C, H, F we get congruent_triangles(C, F, H, F, D, H)
By sss_anti_congruence_v0 on D, F, H, F, D, H we get anti_congruent_triangles(D, F, H, F, D, H)
By sss_anti_congruence_v0 on F, H, B, B, H, F we get anti_congruent_triangles(B, F, H, F, B, H)
By sss_anti_congruence_v0 on A, H, F, F, H, A we get anti_congruent_triangles(A, F, H, F, A, H)
By sss_anti_congruence_v0 on F, H, B, B, H, F we get anti_congruent_triangles(B, F, H, F, B, H)
By sss_anti_congruence_v1 on H, C, F, H, F, C we get anti_congruent_triangles(C, F, H, F, C, H)
By sss_anti_congruence_v1 on F, B, H, B, F, H we get anti_congruent_triangles(B, F, H, F, B, H)
By sss_congruence_v0 on H, D, F, H, F, C we get congruent_triangles(C, F, H, F, D, H)
By sss_anti_congruence_v0 on F, C, H, F, D, H we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_anti_congruence_v0 on H, F, C, H, C, F we get anti_congruent_triangles(C, F, H, F, C, H)
By sss_congruence_v1 on H, C, F, H, F, D we get congruent_triangles(C, F, H, F, D, H)
By sss_anti_congruence_v1 on H, C, F, H, D, F we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_anti_congruence_v1 on H, F, D, H, F, C we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_anti_congruence_v0 on F, H, D, D, H, F we get anti_congruent_triangles(D, F, H, F, D, H)
By sss_anti_congruence_v1 on C, F, H, D, F, H we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_congruence_v1 on H, C, F, H, F, D we get congruent_triangles(C, F, H, F, D, H)
By sss_congruence_v1 on H, F, D, H, C, F we get congruent_triangles(C, F, H, F, D, H)
By sss_anti_congruence_v0 on C, H, F, D, H, F we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_anti_congruence_v0 on H, B, F, H, F, B we get anti_congruent_triangles(B, F, H, F, B, H)
By sss_anti_congruence_v0 on H, F, A, H, A, F we get anti_congruent_triangles(A, F, H, F, A, H)
By sas_congruence on C, H, F, F, H, D we get congruent_triangles(C, F, H, F, D, H)
By sss_congruence_v1 on C, F, H, F, D, H we get congruent_triangles(C, F, H, F, D, H)
By sss_anti_congruence_v1 on C, F, H, F, C, H we get anti_congruent_triangles(C, F, H, F, C, H)
By sss_congruence_v1 on D, H, F, F, H, C we get congruent_triangles(C, F, H, F, D, H)
By sss_anti_congruence_v1 on C, F, H, F, C, H we get anti_congruent_triangles(C, F, H, F, C, H)
By sss_anti_congruence_v0 on A, H, F, F, H, A we get anti_congruent_triangles(A, F, H, F, A, H)
By sss_anti_congruence_v0 on F, H, D, F, H, C we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_anti_congruence_v0 on H, B, F, H, F, B we get anti_congruent_triangles(B, F, H, F, B, H)
By sss_anti_congruence_v1 on F, H, C, C, H, F we get anti_congruent_triangles(C, F, H, F, C, H)
By sss_anti_congruence_v1 on A, F, H, F, A, H we get anti_congruent_triangles(A, F, H, F, A, H)
By sas_anti_congruence on C, H, F, D, H, F we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_anti_congruence_v1 on H, F, D, H, F, C we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_anti_congruence_v1 on H, A, F, H, F, A we get anti_congruent_triangles(A, F, H, F, A, H)
By sss_anti_congruence_v1 on C, F, H, D, F, H we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_congruence_v1 on F, D, H, C, F, H we get congruent_triangles(C, F, H, F, D, H)
By sss_anti_congruence_v1 on B, H, F, F, H, B we get anti_congruent_triangles(B, F, H, F, B, H)
By sss_congruence_v1 on F, D, H, C, F, H we get congruent_triangles(C, F, H, F, D, H)
By sss_anti_congruence_v0 on F, C, H, C, F, H we get anti_congruent_triangles(C, F, H, F, C, H)
By sss_anti_congruence_v1 on B, H, F, F, H, B we get anti_congruent_triangles(B, F, H, F, B, H)
By sss_congruence_v1 on H, C, F, H, F, D we get congruent_triangles(C, F, H, F, D, H)
By sss_anti_congruence_v0 on D, F, H, F, D, H we get anti_congruent_triangles(D, F, H, F, D, H)
By sss_anti_congruence_v1 on F, D, H, D, F, H we get anti_congruent_triangles(D, F, H, F, D, H)
By sss_anti_congruence_v0 on C, H, F, F, H, C we get anti_congruent_triangles(C, F, H, F, C, H)
By isosceles_triangle_properties on H, B, F we get distance(B, H) == distance(F, H), angle(B, F, H) == angle(H, B, F) mod 360
By sss_anti_congruence_v0 on A, H, F, F, H, A we get anti_congruent_triangles(A, F, H, F, A, H)
By sas_congruence on D, H, F, F, H, C we get congruent_triangles(C, F, H, F, D, H)
By sss_anti_congruence_v0 on H, F, C, H, C, F we get anti_congruent_triangles(C, F, H, F, C, H)
By sss_anti_congruence_v0 on H, D, F, H, F, D we get anti_congruent_triangles(D, F, H, F, D, H)
By sas_anti_congruence on D, H, F, C, H, F we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_anti_congruence_v0 on H, B, F, H, F, B we get anti_congruent_triangles(B, F, H, F, B, H)
By sss_anti_congruence_v0 on H, F, C, H, F, D we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_anti_congruence_v1 on H, C, F, H, D, F we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_anti_congruence_v1 on H, C, F, H, D, F we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_congruence_v1 on F, H, C, D, H, F we get congruent_triangles(C, F, H, F, D, H)
By sss_anti_congruence_v0 on F, C, H, C, F, H we get anti_congruent_triangles(C, F, H, F, C, H)
By sss_anti_congruence_v1 on F, H, C, C, H, F we get anti_congruent_triangles(C, F, H, F, C, H)
By sss_anti_congruence_v0 on F, A, H, A, F, H we get anti_congruent_triangles(A, F, H, F, A, H)
By sss_congruence_v1 on H, F, D, H, C, F we get congruent_triangles(C, F, H, F, D, H)
By sss_anti_congruence_v1 on C, F, H, D, F, H we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_congruence_v1 on H, F, D, H, C, F we get congruent_triangles(C, F, H, F, D, H)
By sss_anti_congruence_v0 on F, H, D, F, H, C we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_anti_congruence_v0 on H, D, F, H, C, F we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_anti_congruence_v1 on H, F, B, H, B, F we get anti_congruent_triangles(B, F, H, F, B, H)
By sss_anti_congruence_v1 on F, D, H, F, C, H we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_anti_congruence_v1 on F, H, C, C, H, F we get anti_congruent_triangles(C, F, H, F, C, H)
By sss_anti_congruence_v0 on F, A, H, A, F, H we get anti_congruent_triangles(A, F, H, F, A, H)
By sss_anti_congruence_v1 on D, H, F, C, H, F we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_anti_congruence_v1 on H, F, D, H, D, F we get anti_congruent_triangles(D, F, H, F, D, H)
By sss_anti_congruence_v1 on D, H, F, C, H, F we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_anti_congruence_v0 on H, D, F, H, C, F we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_anti_congruence_v0 on D, F, H, F, D, H we get anti_congruent_triangles(D, F, H, F, D, H)
By sss_congruence_v1 on F, D, H, C, F, H we get congruent_triangles(C, F, H, F, D, H)
By sss_anti_congruence_v0 on H, F, C, H, C, F we get anti_congruent_triangles(C, F, H, F, C, H)
By sss_anti_congruence_v1 on H, F, B, H, B, F we get anti_congruent_triangles(B, F, H, F, B, H)
By sss_anti_congruence_v1 on F, H, C, F, H, D we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_congruence_v1 on F, H, C, D, H, F we get congruent_triangles(C, F, H, F, D, H)
By sss_congruence_v0 on C, H, F, F, H, D we get congruent_triangles(C, F, H, F, D, H)
By sss_anti_congruence_v1 on F, H, C, C, H, F we get anti_congruent_triangles(C, F, H, F, C, H)
By sss_congruence_v1 on D, H, F, F, H, C we get congruent_triangles(C, F, H, F, D, H)
By sss_anti_congruence_v0 on F, H, B, B, H, F we get anti_congruent_triangles(B, F, H, F, B, H)
By sss_congruence_v1 on H, F, D, H, C, F we get congruent_triangles(C, F, H, F, D, H)
By sss_anti_congruence_v1 on H, C, F, H, F, C we get anti_congruent_triangles(C, F, H, F, C, H)
By sss_anti_congruence_v1 on C, F, H, F, C, H we get anti_congruent_triangles(C, F, H, F, C, H)
By sss_anti_congruence_v1 on H, F, B, H, B, F we get anti_congruent_triangles(B, F, H, F, B, H)
By sss_anti_congruence_v0 on H, F, A, H, A, F we get anti_congruent_triangles(A, F, H, F, A, H)
By sss_anti_congruence_v0 on F, C, H, F, D, H we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_anti_congruence_v0 on C, H, F, F, H, C we get anti_congruent_triangles(C, F, H, F, C, H)
By sss_anti_congruence_v0 on F, H, D, D, H, F we get anti_congruent_triangles(D, F, H, F, D, H)
By sss_anti_congruence_v0 on D, F, H, F, D, H we get anti_congruent_triangles(D, F, H, F, D, H)
By sss_anti_congruence_v0 on H, F, C, H, C, F we get anti_congruent_triangles(C, F, H, F, C, H)
By sss_congruence_v0 on C, H, F, F, H, D we get congruent_triangles(C, F, H, F, D, H)
By sss_anti_congruence_v0 on H, F, C, H, F, D we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_congruence_v0 on H, F, C, H, D, F we get congruent_triangles(C, F, H, F, D, H)
By sas_congruence on F, H, C, D, H, F we get congruent_triangles(C, F, H, F, D, H)
By sss_anti_congruence_v0 on B, F, H, F, B, H we get anti_congruent_triangles(B, F, H, F, B, H)
By sss_anti_congruence_v1 on A, F, H, F, A, H we get anti_congruent_triangles(A, F, H, F, A, H)
By sss_congruence_v0 on F, C, H, D, F, H we get congruent_triangles(C, F, H, F, D, H)
By sss_anti_congruence_v1 on F, H, C, F, H, D we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_anti_congruence_v0 on F, A, H, A, F, H we get anti_congruent_triangles(A, F, H, F, A, H)
By sss_anti_congruence_v0 on H, D, F, H, C, F we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_anti_congruence_v0 on F, C, H, F, D, H we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_anti_congruence_v0 on F, H, D, F, H, C we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_congruence_v1 on F, H, C, D, H, F we get congruent_triangles(C, F, H, F, D, H)
By perpendicular_lines_draw_intersection on Line(B, H), altitude(E, B, H) we get exists(line_intersection(Line(B, H), altitude(E, B, H)))
By sss_congruence_v1 on H, C, F, H, F, D we get congruent_triangles(C, F, H, F, D, H)
By sss_anti_congruence_v1 on D, H, F, F, H, D we get anti_congruent_triangles(D, F, H, F, D, H)
By sss_anti_congruence_v1 on H, F, B, H, B, F we get anti_congruent_triangles(B, F, H, F, B, H)
By sss_congruence_v0 on F, H, D, C, H, F we get congruent_triangles(C, F, H, F, D, H)
By sss_anti_congruence_v1 on D, H, F, C, H, F we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_anti_congruence_v0 on F, H, D, F, H, C we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_anti_congruence_v0 on H, F, C, H, F, D we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_congruence_v0 on D, F, H, F, C, H we get congruent_triangles(C, F, H, F, D, H)
By sss_congruence_v0 on F, H, D, C, H, F we get congruent_triangles(C, F, H, F, D, H)
By sss_anti_congruence_v1 on D, H, F, F, H, D we get anti_congruent_triangles(D, F, H, F, D, H)
By sss_anti_congruence_v1 on F, B, H, B, F, H we get anti_congruent_triangles(B, F, H, F, B, H)
By sss_anti_congruence_v0 on H, F, C, H, C, F we get anti_congruent_triangles(C, F, H, F, C, H)
By sss_anti_congruence_v0 on B, F, H, F, B, H we get anti_congruent_triangles(B, F, H, F, B, H)
By sss_congruence_v1 on H, C, F, H, F, D we get congruent_triangles(C, F, H, F, D, H)
By sss_congruence_v1 on F, H, C, D, H, F we get congruent_triangles(C, F, H, F, D, H)
By sss_anti_congruence_v0 on C, H, F, D, H, F we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_congruence_v1 on F, H, C, D, H, F we get congruent_triangles(C, F, H, F, D, H)
By sss_anti_congruence_v1 on C, F, H, D, F, H we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_congruence_v1 on F, D, H, C, F, H we get congruent_triangles(C, F, H, F, D, H)
By sas_anti_congruence on D, H, F, F, H, D we get anti_congruent_triangles(D, F, H, F, D, H)
By sss_anti_congruence_v0 on C, H, F, D, H, F we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_anti_congruence_v0 on F, H, D, F, H, C we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_anti_congruence_v0 on C, H, F, F, H, C we get anti_congruent_triangles(C, F, H, F, C, H)
By sss_anti_congruence_v0 on B, F, H, F, B, H we get anti_congruent_triangles(B, F, H, F, B, H)
By sss_anti_congruence_v0 on H, D, F, H, C, F we get anti_congruent_triangles(C, F, H, D, F, H)
By sss_anti_congruence_v1 on F, H, A, A, H, F we get anti_congruent_triangles(A, F, H, F, A, H)
By sss_congruence_v0 on H, F, C, H, D, F we get congruent_triangles(C, F, H, F, D, H)
By sss_congruence_v0 on C, H, F, F, H, D we get congruent_triangles(C, F, H, F, D, H)
By sss_congruence_v0 on F, C, H, D, F, H we get congruent_triangles(C, F, H, F, D, H)
By sss_congruence_v1 on F, H, C, D, H, F we get congruent_triangles(C, F, H, F, D, H)
By perpendicular_lines_draw_intersection on altitude(E, A, H), Line(A, H) we get exists(line_intersection(Line(A, H), altitude(E, A, H)))
By anti_similar_triangle_basic_properties on D, F, C, C, F, D we get not_collinear(C, D, F), not_collinear(C, D, F), angle(D, F, C) == 0 - angle(C, F, D) mod 360, angle(F, C, D) == 0 - angle(F, D, C) mod 360, angle(C, D, F) == 0 - angle(D, C, F) mod 360, log(distance(C, F)) + log(distance(C, F)) == log(distance(D, F)) + log(distance(D, F)), log(distance(C, F)) + log(distance(C, D)) == log(distance(D, F)) + log(distance(C, D)), log(distance(C, D)) + log(distance(C, F)) == log(distance(C, D)) + log(distance(D, F))
By similar_triangle_basic_properties on G, E, B, F, A, B we get not_collinear(B, E, G), not_collinear(A, B, F), angle(F, A, B) == angle(G, E, B) mod 360, angle(A, B, F) == angle(E, B, G) mod 360, angle(B, F, A) == angle(B, G, E) mod 360, log(distance(A, F)) + log(distance(B, E)) == log(distance(E, G)) + log(distance(A, B)), log(distance(A, B)) + log(distance(B, G)) == log(distance(B, E)) + log(distance(B, F)), log(distance(B, F)) + log(distance(E, G)) == log(distance(B, G)) + log(distance(A, F))
By similar_triangle_basic_properties on G, B, E, F, B, A we get not_collinear(B, E, G), not_collinear(A, B, F), angle(F, B, A) == angle(G, B, E) mod 360, angle(B, A, F) == angle(B, E, G) mod 360, angle(A, F, B) == angle(E, G, B) mod 360, log(distance(B, F)) + log(distance(B, E)) == log(distance(B, G)) + log(distance(A, B)), log(distance(A, B)) + log(distance(E, G)) == log(distance(B, E)) + log(distance(A, F)), log(distance(A, F)) + log(distance(B, G)) == log(distance(E, G)) + log(distance(B, F))
By power_of_a_point_definition on G, B, F, c we get log(power_of_a_point(G, c)) == log(distance(B, G)) + log(distance(F, G))
By perpendicular_bisector_sufficient_conditions on C, D, F, H we get Line(F, H) == perpendicular_bisector(C, D)
