Assumptions:
A, B, C, D, E, F, G: Point
f, g, h: Line
c: Circle
distinct(A, B, C, D, E, F, G)
distinct(f, g, h)
f == Line(B, C)
g == parallel_line(A, f)
D == midpoint(A, B)
E == projection(C, g)
c == Circle(B, C, E)
h == external_angle_bisector(A, E, B)
F == midpoint(B, E)
G in h, c

Embedding:
C := {"x": "0.547207272132566036049183821887709200382232666015625", "y": "0.698465542336072164886218160972930490970611572265625"}
B := {"x": "1.2535664984185979076158901079907082021236419677734375", "y": "-1.1821706168638328460218644977430813014507293701171875"}
f := {"point": {"x": "1.2535664984185979076158901079907082021236419677734375", "y": "-1.1821706168638328460218644977430813014507293701171875"}, "direction": {"x": "-0.7063592262860318715667062861029990017414093017578125", "y": "1.8806361591999050109080826587160117924213409423828125"}}
A := {"x": "-0.2871888318650317462044085914385505020618438720703125", "y": "3.11700640087570146619100341922603547573089599609375"}
g := {"point": {"x": "-0.2871888318650317462044085914385505020618438720703125", "y": "3.11700640087570146619100341922603547573089599609375"}, "direction": {"x": "-0.7063592262860318715667062861029990017414093017578125", "y": "1.8806361591999050109080826587160117924213409423828125"}}
E := {"x": "0.61205673177769816569005918431041483610887575763885878860164085060170896918037015015246441795252460595137581898394153332852213968934307794997419878179626460836173531238812844817761244377176661328626009273707153878135116835148491137079085417016386399379096611625604554451629824389261409232519018575274024711388721322979324924326946005881938023891301373327469118893016713482972980685062349938150806123645323289285580168272962305064423547060587401282287901223523945504238647054612919922397329883273148147807083469429009017498409505089339434375518326511406053870673242690491911943451684760272695044973918500711980171326143726942689635716025154410741793343125835502406113475122070669356497567003924170709814045476603777713157651134277087608480154217461296009346865772050453071364302773755459030914747871853049549171602029930827770376271518260855168668221228982789842835086803705652219422859631775248557929303995829814256608620359280980111994189292673971551378864029892102125841629734599402583695943900215165731704782565501430042267091361547834897453276757318227108337951320207598349375776276678073728364594200588796365518537904613094851179526885063778729968548797323609492792388111320498216572872293412854269998479821555595954670117824922988913899527087354575763759002029534140760432179373266507132712502448874890988855722968529385245867104000723942762103154410361022888440281765852111879306343326784367255684962341853535131821249086530038090619958445480386772031047279186602248903893631061240990342136246493250118010039264329394545947563914044609343816446691073700976999160301684883618613382246484351017705094628192698684511583758551653331518415776574940628356045802123720640152122640294302009928841008736018234164335866133533240173152521044830105746440358192210436288417567889962332870181330892460040778416148989046206545986703348142303038939784500740844572202785224572853175581669028260408020117266459051266664717913042536113409475074097219179452543753875631147184496263319969874918304873074916823367893", "y": "0.7228227333407856149054249965245844531763874316552607839178167573024468411083959662643022628061855460147087981488689362513861031182607640902639741718106603391001269138000068256050481010769468793102405863849101051876069542934797199197379342385852414110299885695470284548008815427641730320285622748350696791583254857943076503211933627469224094427362228220502771683158371371685647824902529033545169454137535334152314101115537264742379121466979110630458945005583400500488680079264573885212210639512833110230676511895277147490051497913807758162921141882798664855725723516738044895448510833958444827913784004918512489121635759231651988080639072501984942281171155863291298305269450714236403872683628942620501322193124797469379343170454333759648443586985984934936462923398852628714027534025490416706183407067648036312263549774893792824233323900664683278345078840339297900896137095772484989665457119310365719269169219096158778262274353771685776681334961569744514789559426782346199225262615976814214557953496719072346428572614674779740704706272305653017712580068407328711449415848727524043156467439884187005452894693241868255563888052773277843533289431709228131483003714991472059481080674168433678984285273007078907261175255157437235673871471161735341738620100239361980093839848503576696936392302697580740562816493006267203169975585926131895874036124859138400961261632279384440089834332831316543969248194684117292625954638366015882319308090732348578262687465760880427352450351062422334899451469258465382952457904678391379253305363744802536694238795579137120040023518445245108409235243315192371859347810590420331128818096040339764955046898147922305600590165060259330329772390802512943411440914088926380302153560462145295144328708041599137903588197081599044332789387550464056096789834980805632769929442394448019903750917095093211181090402879685236422322656651172149254644553999238810171638315277989129952247560176601641744984888751166064148920171029278828454328727328590738969421644268129482541385830091003762321"}
c := {"center": {"x": "0.93281161509814803665297464615056151911625886270614814430082042530085448459018507507623220897626230297568790949197076666426106984467153897498709939089813230418086765619406422408880622188588330664313004636853576939067558417574245568539542708508193199689548305812802277225814912194630704616259509287637012355694360661489662462163473002940969011945650686663734559446508356741486490342531174969075403061822661644642790084136481152532211773530293700641143950611761972752119323527306459961198664941636574073903541734714504508749204752544669717187759163255703026935336621345245955971725842380136347522486959250355990085663071863471344817858012577205370896671562917751203056737561035334678248783501962085354907022738301888856578825567138543804240077108730648004673432886025226535682151386877729515457373935926524774585801014965413885188135759130427584334110614491394921417543401852826109711429815887624278964651997914907128304310179640490055997094646336985775689432014946051062920814867299701291847971950107582865852391282750715021133545680773917448726638378659113554168975660103799174687888138339036864182297100294398182759268952306547425589763442531889364984274398661804746396194055660249108286436146706427134999239910777797977335058912461494456949763543677287881879501014767070380216089686633253566356251224437445494427861484264692622933552000361971381051577205180511444220140882926055939653171663392183627842481170926767565910624543265019045309979222740193386015523639593301124451946815530620495171068123246625059005019632164697272973781957022304671908223345536850488499580150842441809306691123242175508852547314096349342255791879275826665759207888287470314178022901061860320076061320147151004964420504368009117082167933066766620086576260522415052873220179096105218144208783944981166435090665446230020389208074494523103272993351674071151519469892250370422286101392612286426587790834514130204010058633229525633332358956521268056704737537048609589726271876937815573592248131659984937459152436537458411683947", "y": "-0.22967394176152361555821975060924842413717096923096335804109162134877657944580201686784886859690722699264560092556553187430694844086961795486801291409466983044993654309999658719747594946152656034487970680754494740619652285326014004013103288070737929448500571522648577259955922861791348398571886258246516042083725710284617483940331862653879527863188858897486141584208143141571760875487354832274152729312323329238429494422313676288104392665104446847705274972082997497556599603677130573938946802435834448846617440523614262549742510430961209185394290586006675721371382416309775522757445830207775860431079975407437554391821203841740059596804637490075288594144220683543508473652746428817980636581855286897493389034376012653103284147728331201757782065070075325317685383005736856429862329872547916469082964661759818438682251125531035878833380496676583608274605798303510495519314521137575051672714403448171403654153904519206108688628231141571116593325192151277426052202866088269003873686920115928927210232516404638267857136926626101296476468638471734911437099657963356442752920756362379784217662800579064972735526533790658722180559736133610782333552841453859342584981425042639702594596629157831605078573634964605463694123724212813821630642644191323291306899498803190099530800757482116515318038486512096297185917534968663984150122070369340520629819375704307995193691838603077799550828335843417280153759026579413536870226808169920588403459546338257108686562671195597863237748244687888325502742653707673085237710476608043103733473181275987316528806022104314399799882407773774457953823783424038140703260947047898344355909519798301175224765509260388471997049174698703348351138045987435282942795429555368098489232197689273524278356459792004310482059014592004778336053062247679719516050825095971836150352788027759900481245414524533944094547985601573817888386716744139253726777230003805949141808423610054350238762199116991791275075556244169679255399144853605857728356363357046305152891778659352587293070849544981188395"}, "radius_squared": "1.0101336112548694395261660510934499637385539966791436260572298146164467833234667878985799470649414414464319543023722352014799290753993360897131158717787676899763399665128991663320272487418595938317129624475837326637720717784677043589534973881947313518130957153065633279532545254553575665945839372590944526640328586048618826196923190694498224352845020000119531062538513942975855389320493559942312431831724987160637309500254337113483955639411458962252376944203207842501356547644403762326584406668542036325812857446528180159513485104782166494572519082786171028890014581723396789050831516739585054987328547216809391517268781095961028123258073792773747642630888762860766553554077114217386792734364153591645428287692170936180990603587260785051790787164013618256498535410964379757690878888597642723311017782215536685622222110008475718679792903655803255319803821600488454760299816625540331963662969247191970291107366835816347285738214323474993082181010899346254334538739391051233812970544092347008460704352684711830766741327956533802461072900098691604743603295752293056693041821896637523443311596193116359445928099011875168957789300972216385679300009171662727074702605411723947697504108713800525063189757617427380385190244946582775213904871632881637307048989078409284574357645585898018137226421253538772589012278659715867672177383305019134046441203979723663349717395434321307383708165966287495412749246762217449238947326704812231314061594163286787934187927351651342530723633758647908967604560959621455090043268082997758399977137929526330499162190377906944464749888771768271614160302608219206015374580430124356013465771355459769114654539323081347202520848333647923290233905475913173750430688873820456758053773204190491424399553250025082218426441944996063162641984228111922475906681467751280089994666952146148543140319674122148772613225362547145246901464326712360373392028909093615073881849565434355550812645457542921669883927636878601525315672178817517703457457275376683838263033699468291640841701745483209093"}
h := {"point": {"x": "0.61205673177769816569005918431041483610887575763885878860164085060170896918037015015246441795252460595137581898394153332852213968934307794997419878179626460836173531238812844817761244377176661328626009273707153878135116835148491137079085417016386399379096611625604554451629824389261409232519018575274024711388721322979324924326946005881938023891301373327469118893016713482972980685062349938150806123645323289285580168272962305064423547060587401282287901223523945504238647054612919922397329883273148147807083469429009017498409505089339434375518326511406053870673242690491911943451684760272695044973918500711980171326143726942689635716025154410741793343125835502406113475122070669356497567003924170709814045476603777713157651134277087608480154217461296009346865772050453071364302773755459030914747871853049549171602029930827770376271518260855168668221228982789842835086803705652219422859631775248557929303995829814256608620359280980111994189292673971551378864029892102125841629734599402583695943900215165731704782565501430042267091361547834897453276757318227108337951320207598349375776276678073728364594200588796365518537904613094851179526885063778729968548797323609492792388111320498216572872293412854269998479821555595954670117824922988913899527087354575763759002029534140760432179373266507132712502448874890988855722968529385245867104000723942762103154410361022888440281765852111879306343326784367255684962341853535131821249086530038090619958445480386772031047279186602248903893631061240990342136246493250118010039264329394545947563914044609343816446691073700976999160301684883618613382246484351017705094628192698684511583758551653331518415776574940628356045802123720640152122640294302009928841008736018234164335866133533240173152521044830105746440358192210436288417567889962332870181330892460040778416148989046206545986703348142303038939784500740844572202785224572853175581669028260408020117266459051266664717913042536113409475074097219179452543753875631147184496263319969874918304873074916823367893", "y": "0.7228227333407856149054249965245844531763874316552607839178167573024468411083959662643022628061855460147087981488689362513861031182607640902639741718106603391001269138000068256050481010769468793102405863849101051876069542934797199197379342385852414110299885695470284548008815427641730320285622748350696791583254857943076503211933627469224094427362228220502771683158371371685647824902529033545169454137535334152314101115537264742379121466979110630458945005583400500488680079264573885212210639512833110230676511895277147490051497913807758162921141882798664855725723516738044895448510833958444827913784004918512489121635759231651988080639072501984942281171155863291298305269450714236403872683628942620501322193124797469379343170454333759648443586985984934936462923398852628714027534025490416706183407067648036312263549774893792824233323900664683278345078840339297900896137095772484989665457119310365719269169219096158778262274353771685776681334961569744514789559426782346199225262615976814214557953496719072346428572614674779740704706272305653017712580068407328711449415848727524043156467439884187005452894693241868255563888052773277843533289431709228131483003714991472059481080674168433678984285273007078907261175255157437235673871471161735341738620100239361980093839848503576696936392302697580740562816493006267203169975585926131895874036124859138400961261632279384440089834332831316543969248194684117292625954638366015882319308090732348578262687465760880427352450351062422334899451469258465382952457904678391379253305363744802536694238795579137120040023518445245108409235243315192371859347810590420331128818096040339764955046898147922305600590165060259330329772390802512943411440914088926380302153560462145295144328708041599137903588197081599044332789387550464056096789834980805632769929442394448019903750917095093211181090402879685236422322656651172149254644553999238810171638315277989129952247560176601641744984888751166064148920171029278828454328727328590738969421644268129482541385830091003762321"}, "direction": {"x": "-0.67075439415041998631823005483408535910564062486925723893309656034780919796675476453802531434189410329983761115878446151505593613412152720455345776555459593925986666437493750802633832351516659078150612644081891504157536253630330602109601070469209343861649720500702877762865820875261342125692828584127327965300077763937734466721021940615570791703983344104383633475741900756593758993422772792211872418055448395561131013237600062483557481549758802227330454274393456044546470461936516913691122467561087325928406551878603730175061852151111983996841873745991973890785821544800713989218318318331036924736066431075052191041198033895208912373728756175428042339196574752846190819396802468057976516868662168971878503554539856887072126677729188888423648512264780210799043203185484576580884666633250692466142844494497939451446345097010486075030331377601669026308478330103072019408189395836193433751437830591628311441586052427715203197509214994369970777453059265842448469138170615136830265596692452722995941670685384406077639541933965588991441724950590824908345163493823688434542201738800808902144065520706152563732624428008832272946342832757782786055615426439939667232730022369892649148372982908536453806093590992912983646233744484813060291789709741337255262605968510665231126563231819913176687502419170064615721354365227193260499786358366550299818625814026542952704128719979142346241496014231555383147588670931415435328016857759378479867300835220791803418200387868563665537809291087206245630693417543779051690036163903569224093501500373357940571980122283302165519269069335265031731931182027592003938197761893774498714021132104130176228044519725187221348605181548811737508137468215017681372704059085574134246766783158138832068898980621123948961515637771088791433570795221769345848920169252840125182975029727044341903475335248420689805910792803168751583641191790989346339389846509985742126090645653050188920972181677123968243812799717259559328298554568747629872041974536990425423253719864134476641812307937078506681", "y": "1.8838525801517494601177836295246367976976690642859388638801795436548566071148308158769625381002873275821183699514445228530025030349792060911940124048696640495762435721886366241915203965055255307320817498195334033543277079572567946648063303427177212815622014840591783132224582689215492394844061492135363232960123826851249128070280397079205655675361365743460327592697596778282732269733437391673331765124918099332133819192868365919746713654729270782141186853851781512293859957906613757659473902988663111410858157113424380914121261156323255244491114406765423683669624306244125581468905171590157156983101515117118003984431524515155630933403926637702630152417871019765355924900103036729785729716429535848442257865642249281780862277730406069009507302080613481716921487651719635970265985494055967437984520634921215622527004922590442990354257663043708123876308158979144631062160639470411264595561376048960758767826159073507907202916273631962324513427890692133533592392585438873813585343771282298615146944368393392279526524045611883014831303597136518720499290915497268181411593826829972018612206856260672533378999185441560151288593687971815177154646667818326656943407509075532508179334753229961087888936661319099172818233860641079030614149471647988830072702448480752347923606981828440052501119772068731383580013655317640157429492967822640094146896018645060372836108560173181220428333692243027024487407616764565570393918702243417545901291057184232246997386262061029354058774526124642812059414077287097896055380077228421151858285894664566121255961223325238635889681290709580740339895668910835282121142209906372385224590459155126124795449213148446189041418854761021107743922511589408047794021986696596080918855623753383039841755143796152738432752248313671593782854415423129844460599628982390095941022979812406282081776119702610069115167627898294304036856039700135301111034133961068116138552433083697445915230876601671143951477248214433813359920743963135065960313104318077575918537336527988535227255973669045978856"}}
G := {"x": "1.2862011414402008201588550983462237024136452646524349794563763340582478365811445349479625757393515704750259077484693348261809386519172957858954598290809266043924120342343861030505908218235490193614983653670925946163897422901205468266117266680683559906591442844029727611126340456108711114348604444936083375563552365853726052379675194963187667510149849266067182042737143825568134844456166124160319019427161705361234649142426991530853260506991825403840701356109870836576273942489126463477619710852691988622579381773821193952106731422996585699856094028226810345404445407874359049580312825653057341734142133363162903738963846080427094219713207945122395913604602136435045858475853028548409702702206027376996939477234644551436922497584644878493748863356669694531367585650731646857986072884625111712201492124366500501464164063830741649239701743347649916918832535561564088266778252810912786986851185028818497136432269843634669165037821898345512485906157506077226362590141703883844944521430346145086183840989293424805530631286159287986141127966830773279982710667600347925053388405537742361134974680320365445098129532071700523246542578816921018567541707258514362460729699952761867074676935936067939773734730321014172702469517415445839382044562087657959329788221442404496906557990637916934315838984644950445812108465503360810626278924140699346113778286656039945019876550082220320698012678143407167930052497548976105131618528184128592297648367535840944368531399865744613696872140746901117391494086363460276642662965723710960247157318507391702338166923488378357563673967059903842764373273509980417011517701958892399853716739583641553286116530453460676030364262260001305453623571798808719837125369542051464879694390568744493867204006132726348432798827535525522940076413278593470154457671825079969771144669643338872765988200392915094726938569290940971840208685757838693744368751320898535428777139254473146675186739638161769414357682611836737504354170888107779279894364641435064101581875426018156984472954148869005344", "y": "-1.1705509017975365185352581046892092231749977360210935942102380994680692365223648688417454841847533671714748615231246019237022660165984742745469280123854549182675089495876010326740677512485536384610200798811674007744511014044174119933910859105769110423349902548946405011218272160987967862364526201228206683559441600469992962218646907560139992999485713567269155894798128428250876943559057039631939128599531479920552285194416606546616407135921380602640653224005710850785169665053689129144353877414539718054880304053361362592649833427784924894004012050600719235251183196259396131797961448630744060702630994315131638714192421542700124680545526895467151830547689479559161985497872401487673907039213209103902803404220958971104719721453299233841022867868652244401480583116026702406393591622725424623420201355411642402856986823970912491757355250327558945553741740829086754379514339272223606740040257848403543175127267685440075145760302392037741378145783804960023000730440030379317923224286558360863885267580724843541922202691681500377888409002417334798199474878848970286693614865341950230209485147831145052264667558244829526073481938634544992245512922451432195138707013612909157755071241949837697586940208374816635664950489036349048114581042217734347040527392566066934039362308924722827255633007340645058419706018508222776407175144982063423057589902291991471190728459925050192892260098499188678359324224578476573356096790725723315770700016502555128911501983233146533569752276742418919201217708547170187581531432177908633645563838254430306953208113639999965371219423391805061854504013886655332638702637093423917614297733443796105596725916044803922961260770340886453222069859594574300363442419727225556767296240458999031619139895221588204930209503295175577547871671566987568435758087602587266809689106527929831824364112299034772094271417761919216620880088852763178398487237364733199997584271750522995248333772673658472499472994923522226098656926327433754079881049629921184705288317823390605666534727748929248246"}
F := {"x": "0.93281161509814803665297464615056151911625886270614814430082042530085448459018507507623220897626230297568790949197076666426106984467153897498709939089813230418086765619406422408880622188588330664313004636853576939067558417574245568539542708508193199689548305812802277225814912194630704616259509287637012355694360661489662462163473002940969011945650686663734559446508356741486490342531174969075403061822661644642790084136481152532211773530293700641143950611761972752119323527306459961198664941636574073903541734714504508749204752544669717187759163255703026935336621345245955971725842380136347522486959250355990085663071863471344817858012577205370896671562917751203056737561035334678248783501962085354907022738301888856578825567138543804240077108730648004673432886025226535682151386877729515457373935926524774585801014965413885188135759130427584334110614491394921417543401852826109711429815887624278964651997914907128304310179640490055997094646336985775689432014946051062920814867299701291847971950107582865852391282750715021133545680773917448726638378659113554168975660103799174687888138339036864182297100294398182759268952306547425589763442531889364984274398661804746396194055660249108286436146706427134999239910777797977335058912461494456949763543677287881879501014767070380216089686633253566356251224437445494427861484264692622933552000361971381051577205180511444220140882926055939653171663392183627842481170926767565910624543265019045309979222740193386015523639593301124451946815530620495171068123246625059005019632164697272973781957022304671908223345536850488499580150842441809306691123242175508852547314096349342255791879275826665759207888287470314178022901061860320076061320147151004964420504368009117082167933066766620086576260522415052873220179096105218144208783944981166435090665446230020389208074494523103272993351674071151519469892250370422286101392612286426587790834514130204010058633229525633332358956521268056704737537048609589726271876937815573592248131659984937459152436537458411683946", "y": "-0.22967394176152361555821975060924842413717096923096335804109162134877657944580201686784886859690722699264560092556553187430694844086961795486801291409466983044993654309999658719747594946152656034487970680754494740619652285326014004013103288070737929448500571522648577259955922861791348398571886258246516042083725710284617483940331862653879527863188858897486141584208143141571760875487354832274152729312323329238429494422313676288104392665104446847705274972082997497556599603677130573938946802435834448846617440523614262549742510430961209185394290586006675721371382416309775522757445830207775860431079975407437554391821203841740059596804637490075288594144220683543508473652746428817980636581855286897493389034376012653103284147728331201757782065070075325317685383005736856429862329872547916469082964661759818438682251125531035878833380496676583608274605798303510495519314521137575051672714403448171403654153904519206108688628231141571116593325192151277426052202866088269003873686920115928927210232516404638267857136926626101296476468638471734911437099657963356442752920756362379784217662800579064972735526533790658722180559736133610782333552841453859342584981425042639702594596629157831605078573634964605463694123724212813821630642644191323291306899498803190099530800757482116515318038486512096297185917534968663984150122070369340520629819375704307995193691838603077799550828335843417280153759026579413536870226808169920588403459546338257108686562671195597863237748244687888325502742653707673085237710476608043103733473181275987316528806022104314399799882407773774457953823783424038140703260947047898344355909519798301175224765509260388471997049174698703348351138045987435282942795429555368098489232197689273524278356459792004310482059014592004778336053062247679719516050825095971836150352788027759900481245414524533944094547985601573817888386716744139253726777230003805949141808423610054350238762199116991791275075556244169679255399144853605857728356363357046305152891778659352587293070849544981188395"}
D := {"x": "0.4831888332767830807057407582760788500308990478515625", "y": "0.96741789200593431008456946074147708714008331298828125"}

Need to prove:
collinear(D, F, G)

Proof:
By line_definition on A, E, g we get g == Line(A, E)
By line_definition on E, C, perpendicular_line(C, g) we get Line(C, E) == perpendicular_line(C, g)
By line_definition on E, G, h we get h == Line(E, G)
By circle_definition on C, G, E, c we get c == Circle(C, E, G)
By circle_definition on B, E, G, c we get c == Circle(B, E, G)
By perpendicular_line_definition on E, g, perpendicular_line(C, g) we get g == perpendicular_line(E, perpendicular_line(C, g))
By line_intersection_definition on E, g, h we get E == line_intersection(g, h)
By circle_definition on B, G, C, c we get c == Circle(B, C, G)
By perpendicular_line_definition on A, g, perpendicular_line(C, g) we get g == perpendicular_line(A, perpendicular_line(C, g))
By perpendicular_line_definition on E, perpendicular_line(C, g), g we get perpendicular_line(C, g) == perpendicular_line(E, g)
By line_unique_intersection_v1 on h, g, E, A we get A not in h
By line_unique_intersection_v1 on g, h, E, G we get G not in g
By between_imply_not_between on B, D, A we get collinear_and_not_between(A, B, D)
By between_imply_not_between on A, D, B we get collinear_and_not_between(B, A, D)
By between_imply_not_between on B, F, E we get collinear_and_not_between(E, B, F)
By between_imply_not_between on E, F, B we get collinear_and_not_between(B, E, F)
By parallel_line_definition on E, g, f we get g == parallel_line(E, f)
By parallel_line_definition on C, f, g we get f == parallel_line(C, g)
By parallel_line_definition on B, f, g we get f == parallel_line(B, g)
By different_points_v1 on B, C we get 0 != distance(B, C)
By in_imply_concyclic on C, E, B, G we get concyclic(B, C, E, G)
By double_perpendicular_and_parallel_v0_r on g, perpendicular_line(C, g), f we get perpendicular(f, perpendicular_line(C, g))
By not_in_line_equivalent_to_not_collinear_v0_r on G, C, B we get G not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on E, C, B we get E not in Line(B, C)
By angle_bisector_draw_angle_v1 on A, E, B we get exists(Line(A, E), Line(B, E))
By not_in_line_equivalent_to_not_collinear_v0_r on F, B, C we get F not in Line(B, C)
By angle_bisector_draw_angle_v1 on B, E, A we get exists(Line(A, E), Line(B, E))
By not_in_line_equivalent_to_not_collinear_v0_r on A, C, B we get A not in Line(B, C)
By line_circle_intersection_has_at_most_two_points_0 on E, B, F, c we get F not in c
By not_in_line_equivalent_to_not_collinear_v0_r on D, C, B we get D not in Line(B, C)
By power_of_a_point_in_circle on C, c we get 0 == power_of_a_point(C, c)
By power_of_a_point_in_circle on B, c we get 0 == power_of_a_point(B, c)
By angles_on_chord_v2 on C, G, E, B, c we get angle(C, E, G) == angle(C, B, G) + 180 mod 360
By power_of_a_point_on_circle on E, c we get 0 == power_of_a_point(E, c)
By angles_on_chord_v0 on G, E, C, B, c we get angle(G, B, E) == angle(G, C, E) mod 360
By power_of_a_point_in_circle on G, c we get 0 == power_of_a_point(G, c)
By angles_on_chord_v3 on B, E, G, C, c we get angle(B, G, E) == angle(B, C, E) + 180 mod 360
By angles_on_chord_v1 on E, G, C, B, c we get angle(E, B, G) == angle(E, C, G) mod 360
By angles_on_chord_v0 on E, C, B, G, c we get angle(E, B, C) == angle(E, G, C) mod 360
By angles_on_chord_v2 on E, B, G, C, c we get angle(E, G, B) == angle(E, C, B) + 180 mod 360
By angles_on_chord_v0 on C, B, G, E, c we get angle(C, E, B) == angle(C, G, B) mod 360
By angles_on_chord_v1 on C, E, G, B, c we get angle(C, B, E) == angle(C, G, E) mod 360
By angles_on_chord_v2 on G, C, B, E, c we get angle(G, B, C) == angle(G, E, C) + 180 mod 360
By angles_on_chord_v3 on G, C, E, B, c we get angle(G, E, C) == angle(G, B, C) + 180 mod 360
By angles_on_chord_v2 on B, E, C, G, c we get angle(B, C, E) == angle(B, G, E) + 180 mod 360
By angles_on_chord_v3 on E, B, C, G, c we get angle(E, C, B) == angle(E, G, B) + 180 mod 360
By angles_on_chord_v1 on B, C, G, E, c we get angle(B, E, C) == angle(B, G, C) mod 360
By angles_on_chord_v0 on B, G, E, C, c we get angle(B, C, G) == angle(B, E, G) mod 360
By angles_on_chord_v3 on C, G, B, E, c we get angle(C, B, G) == angle(C, E, G) + 180 mod 360
By angles_on_chord_v1 on G, B, C, E, c we get angle(G, C, B) == angle(G, E, B) mod 360
By same_angle_v0 on B, E, F, C we get angle(E, B, C) == angle(F, B, C) mod 360
By same_angle_v0 on B, D, A, C we get angle(A, B, C) == angle(D, B, C) mod 360
By log_of_2_times_distance on E, B, B, F we get log(distance(B, E)) == 0.6931471805599453 + log(distance(B, F))
By collinear_definition on F, E, B we get E in Line(B, F), B in Line(E, F), Line(B, F) == Line(E, F), 0 == 2 * angle(E, F, B) mod 360
By collinear_definition on B, F, E we get F in Line(B, E), E in Line(B, F), Line(B, E) == Line(B, F), 0 == 2 * angle(F, B, E) mod 360
By collinear_definition on E, F, B we get F in Line(B, E), B in Line(E, F), Line(B, E) == Line(E, F), 0 == 2 * angle(F, E, B) mod 360
By collinear_definition on D, A, B we get A in Line(B, D), B in Line(A, D), Line(A, D) == Line(B, D), 0 == 2 * angle(A, D, B) mod 360
By collinear_definition on F, B, E we get B in Line(E, F), E in Line(B, F), Line(B, F) == Line(E, F), 0 == 2 * angle(B, F, E) mod 360
By log_of_2_times_distance on B, A, A, D we get log(distance(A, B)) == 0.6931471805599453 + log(distance(A, D))
By log_of_2_times_distance on E, B, F, E we get log(distance(B, E)) == 0.6931471805599453 + log(distance(E, F))
By collinear_definition on A, D, B we get D in Line(A, B), B in Line(A, D), Line(A, B) == Line(A, D), 0 == 2 * angle(D, A, B) mod 360
By collinear_definition on B, E, F we get E in Line(B, F), F in Line(B, E), Line(B, E) == Line(B, F), 0 == 2 * angle(E, B, F) mod 360
By collinear_definition on A, B, D we get B in Line(A, D), D in Line(A, B), Line(A, B) == Line(A, D), 0 == 2 * angle(B, A, D) mod 360
By collinear_definition on E, B, F we get B in Line(E, F), F in Line(B, E), Line(B, E) == Line(E, F), 0 == 2 * angle(B, E, F) mod 360
By collinear_definition on D, B, A we get B in Line(A, D), A in Line(B, D), Line(A, D) == Line(B, D), 0 == 2 * angle(B, D, A) mod 360
By collinear_definition on B, D, A we get D in Line(A, B), A in Line(B, D), Line(A, B) == Line(B, D), 0 == 2 * angle(D, B, A) mod 360
By collinear_definition on B, A, D we get A in Line(B, D), D in Line(A, B), Line(A, B) == Line(B, D), 0 == 2 * angle(A, B, D) mod 360
By log_of_2_times_distance on A, B, B, D we get log(distance(A, B)) == 0.6931471805599453 + log(distance(B, D))
By isosceles_triangle_properties on D, A, B we get distance(A, D) == distance(B, D), angle(A, B, D) == angle(D, A, B) mod 360
By isosceles_triangle_properties on D, B, A we get distance(A, D) == distance(B, D), angle(B, A, D) == angle(D, B, A) mod 360
By isosceles_triangle_properties on F, E, B we get distance(B, F) == distance(E, F), angle(E, B, F) == angle(F, E, B) mod 360
By isosceles_triangle_properties on F, B, E we get distance(B, F) == distance(E, F), angle(B, E, F) == angle(F, B, E) mod 360
By between_implies_angles on B, F, E we get 180 == angle(B, F, E) mod 360, 0 == angle(F, E, B) mod 360, 0 == angle(E, B, F) mod 360
By between_implies_angles on B, D, A we get 180 == angle(B, D, A) mod 360, 0 == angle(D, A, B) mod 360, 0 == angle(A, B, D) mod 360
By between_implies_angles on E, F, B we get 180 == angle(E, F, B) mod 360, 0 == angle(F, B, E) mod 360, 0 == angle(B, E, F) mod 360
By between_implies_angles on A, D, B we get 180 == angle(A, D, B) mod 360, 0 == angle(D, B, A) mod 360, 0 == angle(B, A, D) mod 360
By perpendicular_line_definition on E, Line(C, E), f we get Line(C, E) == perpendicular_line(E, f)
By perpendicular_line_definition on B, f, Line(C, E) we get f == perpendicular_line(B, Line(C, E))
By perpendicular_line_definition on C, f, Line(C, E) we get f == perpendicular_line(C, Line(C, E))
By perpendicular_line_definition on C, Line(C, E), f we get Line(C, E) == perpendicular_line(C, f)
By same_angle_v1 on B, D, A, F we get angle(A, B, F) == angle(D, B, F) mod 360
By same_angle_v0 on B, E, F, A we get angle(E, B, A) == angle(F, B, A) mod 360
By same_angle_v0 on B, E, F, D we get angle(E, B, D) == angle(F, B, D) mod 360
By same_angle_v0 on E, B, F, G we get angle(B, E, G) == angle(F, E, G) mod 360
By same_angle_v1 on B, F, E, G we get angle(E, B, G) == angle(F, B, G) mod 360
By same_angle_v1 on B, A, D, G we get angle(A, B, G) == angle(D, B, G) mod 360
By perpendicular_direction_conditions_v0_r on E, C, C, B we get 180 == 2 * direction(E, C) - 2 * direction(C, B) mod 360
By same_angle_v1 on B, D, A, E we get angle(A, B, E) == angle(D, B, E) mod 360
By same_angle_v1 on E, F, B, C we get angle(B, E, C) == angle(F, E, C) mod 360
By projection_definition on A, E, Line(C, E) we get E == projection(A, Line(C, E))
By perpendicular_direction_conditions_v0_r on B, C, E, C we get 180 == 2 * direction(B, C) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on C, E, B, C we get 180 == 2 * direction(C, E) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on B, C, C, E we get 180 == 2 * direction(B, C) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on C, E, C, B we get 180 == 2 * direction(C, E) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on C, B, E, C we get 180 == 2 * direction(C, B) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on C, B, C, E we get 180 == 2 * direction(C, B) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on E, C, B, C we get 180 == 2 * direction(E, C) - 2 * direction(B, C) mod 360
By same_angle_v1 on E, B, F, A we get angle(B, E, A) == angle(F, E, A) mod 360
By different_points_v1 on G, C we get 0 != distance(C, G)
By different_points_v1 on G, E we get 0 != distance(E, G)
By different_points_v1 on E, A we get 0 != distance(A, E)
By different_points_v1 on B, G we get 0 != distance(B, G)
By different_points_v1 on C, E we get 0 != distance(C, E)
By perpendicular_direction_conditions_v0_r on A, E, C, E we get 180 == 2 * direction(A, E) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on E, C, A, E we get 180 == 2 * direction(E, C) - 2 * direction(A, E) mod 360
By same_angle_v0 on A, D, B, E we get angle(B, A, E) == angle(D, A, E) mod 360
By projection_definition on E, C, f we get C == projection(E, f)
By perpendicular_direction_conditions_v0_r on C, E, E, A we get 180 == 2 * direction(C, E) - 2 * direction(E, A) mod 360
By perpendicular_direction_conditions_v0_r on A, E, E, C we get 180 == 2 * direction(A, E) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on E, A, E, C we get 180 == 2 * direction(E, A) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on E, A, C, E we get 180 == 2 * direction(E, A) - 2 * direction(C, E) mod 360
By projection_definition on B, C, Line(C, E) we get C == projection(B, Line(C, E))
By perpendicular_direction_conditions_v0_r on C, E, A, E we get 180 == 2 * direction(C, E) - 2 * direction(A, E) mod 360
By perpendicular_direction_conditions_v0_r on E, C, E, A we get 180 == 2 * direction(E, C) - 2 * direction(E, A) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on E, A, D we get E not in Line(A, D)
By reverse_direction on G, E we get 180 == direction(G, E) - direction(E, G) mod 360
By reverse_direction on C, G we get 180 == direction(C, G) - direction(G, C) mod 360
By reverse_direction on G, C we get 180 == direction(G, C) - direction(C, G) mod 360
By reverse_direction on E, B we get 180 == direction(E, B) - direction(B, E) mod 360
By reverse_direction on C, E we get 180 == direction(C, E) - direction(E, C) mod 360
By reverse_direction on F, E we get 180 == direction(F, E) - direction(E, F) mod 360
By line_inequality on Line(C, G), g, G we get g != Line(C, G)
By not_in_line_equivalent_to_not_collinear_v0_r on C, E, F we get C not in Line(E, F)
By perpendicular_angle_conditions_v0 on B, C, E we get angle(B, C, E) == orientation(B, C, E) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on D, B, F we get D not in Line(B, F)
By reverse_direction on E, F we get 180 == direction(E, F) - direction(F, E) mod 360
By reverse_direction on D, B we get 180 == direction(D, B) - direction(B, D) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on C, B, A we get C not in Line(A, B)
By reverse_direction on D, A we get 180 == direction(D, A) - direction(A, D) mod 360
By reverse_direction on B, G we get 180 == direction(B, G) - direction(G, B) mod 360
By reverse_direction on B, F we get 180 == direction(B, F) - direction(F, B) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on C, E, B we get C not in Line(B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on A, C, E we get A not in Line(C, E)
By reverse_direction on B, D we get 180 == direction(B, D) - direction(D, B) mod 360
By reverse_direction on A, B we get 180 == direction(A, B) - direction(B, A) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on A, F, E we get A not in Line(E, F)
By reverse_direction on C, B we get 180 == direction(C, B) - direction(B, C) mod 360
By perpendicular_angle_conditions_v0 on E, C, B we get angle(E, C, B) == orientation(B, E, C) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on D, G, E we get D not in Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on B, G, E we get B not in Line(E, G)
By reverse_direction on B, E we get 180 == direction(B, E) - direction(E, B) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on D, F, E we get D not in Line(E, F)
By line_inequality on Line(C, G), f, G we get f != Line(C, G)
By reverse_direction on B, C we get 180 == direction(B, C) - direction(C, B) mod 360
By reverse_direction on B, A we get 180 == direction(B, A) - direction(A, B) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on C, B, D we get C not in Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on F, B, D we get F not in Line(B, D)
By reverse_direction on A, D we get 180 == direction(A, D) - direction(D, A) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on E, G, B we get E not in Line(B, G)
By reverse_direction on G, B we get 180 == direction(G, B) - direction(B, G) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on B, E, C we get B not in Line(C, E)
By not_in_line_equivalent_to_not_collinear_v0_r on D, G, B we get D not in Line(B, G)
By reverse_direction on F, B we get 180 == direction(F, B) - direction(B, F) mod 360
By reverse_direction on E, G we get 180 == direction(E, G) - direction(G, E) mod 360
By line_inequality on Line(B, E), f, E we get f != Line(B, E)
By reverse_direction on E, C we get 180 == direction(E, C) - direction(C, E) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on G, F, E we get G not in Line(E, F)
By not_in_line_equivalent_to_not_collinear_v0_r on B, E, A we get B not in Line(A, E)
By not_in_line_equivalent_to_not_collinear_v0_r on C, E, G we get C not in Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on G, F, B we get G not in Line(B, F)
By not_in_line_equivalent_to_not_collinear_v0_r on G, E, C we get G not in Line(C, E)
By not_in_line_equivalent_to_not_collinear_v0_r on F, C, E we get F not in Line(C, E)
By not_in_line_equivalent_to_not_collinear_v0_r on D, C, E we get D not in Line(C, E)
By line_inequality on Line(A, B), h, A we get h != Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on A, C, G we get A not in Line(C, G)
By not_in_line_equivalent_to_not_collinear_v0_r on G, D, B we get G not in Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on C, B, G we get C not in Line(B, G)
By line_inequality on Line(B, G), f, G we get f != Line(B, G)
By not_in_line_equivalent_to_not_collinear_v0_r on B, G, C we get B not in Line(C, G)
By not_in_line_equivalent_to_not_collinear_v0_r on D, G, C we get D not in Line(C, G)
By not_in_line_equivalent_to_not_collinear_v0_r on A, E, B we get A not in Line(B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on C, F, B we get C not in Line(B, F)
By not_in_line_equivalent_to_not_collinear_v0_r on F, E, A we get F not in Line(A, E)
By not_in_line_equivalent_to_not_collinear_v0_r on G, A, B we get G not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on D, E, B we get D not in Line(B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on G, A, D we get G not in Line(A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on F, G, C we get F not in Line(C, G)
By line_inequality on Line(A, B), f, A we get f != Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on A, G, B we get A not in Line(B, G)
By line_inequality on Line(C, E), f, E we get f != Line(C, E)
By not_in_line_equivalent_to_not_collinear_v0_r on E, A, B we get E not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on E, G, C we get E not in Line(C, G)
By not_in_line_equivalent_to_not_collinear_v0_r on D, E, A we get D not in Line(A, E)
By not_in_line_equivalent_to_not_collinear_v0_r on C, A, D we get C not in Line(A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on F, D, A we get F not in Line(A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on F, E, G we get F not in Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on E, D, B we get E not in Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on F, B, A we get F not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on A, F, B we get A not in Line(B, F)
By not_in_line_equivalent_to_not_collinear_v0_r on G, B, E we get G not in Line(B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on C, A, E we get C not in Line(A, E)
By line_inequality on Line(B, G), g, G we get g != Line(B, G)
By not_in_line_equivalent_to_not_collinear_v0_r on F, G, B we get F not in Line(B, G)
By parallel_line_angles_reverse_v1 on E, A, B, C we get angle(C, B, A) == angle(E, A, B) mod 360
By perpendicular_lines_draw_intersection on Line(C, E), f we get exists(line_intersection(f, Line(C, E)))
By parallel_line_angles_reverse_v0 on A, E, C, B we get angle(A, E, C) == angle(B, C, E) mod 360
By internal_angle_bisector_definition_v0_r on A, D, A, B we get Line(B, D) == internal_angle_bisector(A, B, A)
By parallel_line_angles_reverse_v2 on A, E, B, C we get angle(A, E, B) == angle(C, B, E) + 180 mod 360
By perpendicular_angle_conditions_v0 on C, E, A we get angle(C, E, A) == orientation(A, C, E) mod 360
By parallel_line_angles_reverse_v3 on C, B, E, A we get angle(C, B, E) == angle(A, E, B) + 180 mod 360
By external_angle_bisector_definition_v0 on B, G, A, E we get 180 == angle(B, E, G) + angle(A, E, G) mod 360
By internal_angle_bisector_definition_v0_r on E, B, E, F we get Line(B, F) == internal_angle_bisector(E, F, E)
By internal_angle_bisector_definition_v0_r on B, F, B, E we get Line(E, F) == internal_angle_bisector(B, E, B)
By internal_angle_bisector_definition_v0_r on F, E, F, B we get Line(B, E) == internal_angle_bisector(F, B, F)
By internal_angle_bisector_definition_v0_r on F, B, F, E we get Line(B, E) == internal_angle_bisector(F, E, F)
By internal_angle_bisector_definition_v0_r on B, E, B, F we get Line(E, F) == internal_angle_bisector(B, F, B)
By perpendicular_angle_conditions_v0 on A, E, C we get angle(A, E, C) == orientation(A, E, C) mod 360
By internal_angle_bisector_definition_v0_r on B, D, B, A we get Line(A, D) == internal_angle_bisector(B, A, B)
By internal_angle_bisector_definition_v0_r on B, A, B, D we get Line(A, D) == internal_angle_bisector(B, D, B)
By altitude_definition on A, C, E, g we get g == altitude(A, C, E)
By internal_angle_bisector_definition_v0_r on D, B, D, A we get Line(A, B) == internal_angle_bisector(D, A, D)
By internal_angle_bisector_definition_v0_r on A, B, A, D we get Line(B, D) == internal_angle_bisector(A, D, A)
By internal_angle_bisector_definition_v0_r on D, A, D, B we get Line(A, B) == internal_angle_bisector(D, B, D)
By internal_angle_bisector_definition_v0_r on E, F, E, B we get Line(B, F) == internal_angle_bisector(E, B, E)
By right_triangle_circumcenter_v1 on E, C, B we get midpoint(B, E) == circumcenter(B, C, E)
By altitude_definition on E, C, B, Line(C, E) we get Line(C, E) == altitude(E, B, C)
By altitude_definition on B, E, C, f we get f == altitude(B, C, E)
By power_of_a_point_definition on F, B, E, c we get log(power_of_a_point(F, c)) == log(distance(B, F)) + log(distance(E, F))
By altitude_definition on C, E, A, Line(C, E) we get Line(C, E) == altitude(C, A, E)
By chords_on_equal_angles_v0 on C, E, G, G, B, E, c we get distance(C, G) == distance(E, G)
By line_intersection_definition on B, f, Line(B, G) we get B == line_intersection(f, Line(B, G))
By line_intersection_definition on B, Line(A, B), f we get B == line_intersection(f, Line(A, B))
By line_intersection_definition on C, f, Line(C, G) we get C == line_intersection(f, Line(C, G))
By line_intersection_definition on B, Line(B, E), f we get B == line_intersection(f, Line(B, E))
By perpendicular_direction_conditions_v0 on G, E, B, G we get perpendicular(Line(B, G), Line(E, G))
By circle_radius_v0_r on B, c we get radius(c) == distance(B, center(c))
By circle_radius_v0_r on G, c we get radius(c) == distance(G, center(c))
By circle_radius_v0_r on C, c we get radius(c) == distance(C, center(c))
By circle_radius_v0_r on E, c we get radius(c) == distance(E, center(c))
By angle_to_center on E, B, G, c we get 2 * angle(E, B, G) == angle(E, center(c), G) mod 360
By angle_to_center on E, B, C, c we get 2 * angle(E, B, C) == angle(E, center(c), C) mod 360
By angle_to_center on C, G, B, c we get 2 * angle(C, G, B) == angle(C, center(c), B) mod 360
By angle_to_center on B, G, C, c we get 2 * angle(B, G, C) == angle(B, center(c), C) mod 360
By angle_to_center on B, C, G, c we get 2 * angle(B, C, G) == angle(B, center(c), G) mod 360
By angle_to_center on G, C, B, c we get 2 * angle(G, C, B) == angle(G, center(c), B) mod 360
By angle_to_center on C, E, B, c we get 2 * angle(C, E, B) == angle(C, center(c), B) mod 360
By angle_to_center on C, E, G, c we get 2 * angle(C, E, G) == angle(C, center(c), G) mod 360
By angle_to_center on E, G, C, c we get 2 * angle(E, G, C) == angle(E, center(c), C) mod 360
By angle_to_center on C, B, E, c we get 2 * angle(C, B, E) == angle(C, center(c), E) mod 360
By angle_to_center on G, E, C, c we get 2 * angle(G, E, C) == angle(G, center(c), C) mod 360
By angle_to_center on E, C, G, c we get 2 * angle(E, C, G) == angle(E, center(c), G) mod 360
By angle_to_center on C, B, G, c we get 2 * angle(C, B, G) == angle(C, center(c), G) mod 360
By angle_to_center on G, C, E, c we get 2 * angle(G, C, E) == angle(G, center(c), E) mod 360
By angle_to_center on B, E, G, c we get 2 * angle(B, E, G) == angle(B, center(c), G) mod 360
By angle_to_center on G, B, E, c we get 2 * angle(G, B, E) == angle(G, center(c), E) mod 360
By angle_to_center on G, B, C, c we get 2 * angle(G, B, C) == angle(G, center(c), C) mod 360
By angle_to_center on G, E, B, c we get 2 * angle(G, E, B) == angle(G, center(c), B) mod 360
By angle_to_center on C, G, E, c we get 2 * angle(C, G, E) == angle(C, center(c), E) mod 360
By angle_to_center on B, E, C, c we get 2 * angle(B, E, C) == angle(B, center(c), C) mod 360
By orthocenter_concurrency on A, C, E we get orthocenter(A, C, E) in altitude(A, C, E), orthocenter(A, C, E) in altitude(C, A, E), orthocenter(A, C, E) in altitude(E, A, C)
By orthocenter_concurrency on E, B, C we get orthocenter(B, C, E) in altitude(E, B, C), orthocenter(B, C, E) in altitude(B, C, E), orthocenter(B, C, E) in altitude(C, B, E)
By line_inequality on Line(C, G), Line(C, E), G we get Line(C, E) != Line(C, G)
By line_inequality on Line(C, E), Line(A, B), E we get Line(A, B) != Line(C, E)
By line_inequality on Line(B, G), Line(C, E), B we get Line(B, G) != Line(C, E)
By anti_congruence_from_anti_similar_triangles on C, E, G, E, C, G we get anti_congruent_triangles(C, E, G, E, C, G)
By anti_congruence_from_anti_similar_triangles on E, C, G, C, E, G we get anti_congruent_triangles(C, E, G, E, C, G)
By isosceles_triangle_from_angles on G, C, E we get isosceles_triangle(G, C, E)
By line_inequality on Line(B, E), h, B we get h != Line(B, E)
By line_inequality on Line(C, G), Line(B, G), C we get Line(B, G) != Line(C, G)
By isosceles_triangle_from_angles on G, E, C we get isosceles_triangle(G, C, E)
By line_inequality on h, Line(C, E), G we get h != Line(C, E)
By line_inequality on Line(A, B), Line(B, G), A we get Line(A, B) != Line(B, G)
By line_inequality on Line(A, B), Line(C, G), A we get Line(A, B) != Line(C, G)
By asa_anti_congruence on C, E, G, E, C, G we get anti_congruent_triangles(C, E, G, E, C, G)
By line_inequality on Line(C, E), Line(B, E), C we get Line(B, E) != Line(C, E)
By line_inequality on Line(B, G), h, B we get h != Line(B, G)
By line_inequality on Line(A, B), Line(B, E), A we get Line(A, B) != Line(B, E)
By asa_anti_congruence on E, C, G, C, E, G we get anti_congruent_triangles(C, E, G, E, C, G)
By line_inequality on Line(B, E), g, F we get g != Line(B, E)
By line_inequality on Line(C, G), Line(B, E), C we get Line(B, E) != Line(C, G)
By line_inequality on Line(A, B), g, D we get g != Line(A, B)
By line_inequality on Line(C, E), g, C we get g != Line(C, E)
By line_inequality on Line(B, G), Line(B, E), G we get Line(B, E) != Line(B, G)
By line_inequality on h, Line(C, G), E we get h != Line(C, G)
By external_angle_bisector_definition_v0_r on F, G, A, E we get Line(E, G) == external_angle_bisector(A, E, F)
By external_angle_bisector_definition_v0_r on C, A, C, E we get Line(A, E) == external_angle_bisector(C, E, C)
By external_angle_bisector_definition_v0_r on F, G, C, B we get Line(B, G) == external_angle_bisector(C, B, F)
By external_angle_bisector_definition_v0_r on A, C, A, E we get Line(C, E) == external_angle_bisector(A, E, A)
By external_angle_bisector_definition_v0_r on E, B, E, G we get Line(B, G) == external_angle_bisector(E, G, E)
By external_angle_bisector_definition_v0_r on C, G, E, B we get Line(B, G) == external_angle_bisector(C, B, E)
By external_angle_bisector_definition_v0_r on B, E, B, C we get Line(C, E) == external_angle_bisector(B, C, B)
By external_angle_bisector_definition_v0_r on E, B, E, C we get Line(B, C) == external_angle_bisector(E, C, E)
By external_angle_bisector_definition_v0_r on B, E, B, G we get Line(E, G) == external_angle_bisector(B, G, B)
By sas_similarity on A, B, E, D, B, F we get similar_triangles(A, B, E, D, B, F)
By sas_similarity on E, B, A, F, B, D we get similar_triangles(A, B, E, D, B, F)
By sas_similarity on F, B, D, E, B, A we get similar_triangles(A, B, E, D, B, F)
By sas_similarity on D, B, F, A, B, E we get similar_triangles(A, B, E, D, B, F)
By anti_similar_triangle_basic_properties on E, C, G, C, E, G we get not_collinear(C, E, G), not_collinear(C, E, G), angle(E, C, G) == 0 - angle(C, E, G) mod 360, angle(C, G, E) == 0 - angle(E, G, C) mod 360, angle(G, E, C) == 0 - angle(G, C, E) mod 360, log(distance(C, E)) + log(distance(C, G)) == log(distance(C, E)) + log(distance(E, G)), log(distance(C, G)) + log(distance(C, G)) == log(distance(E, G)) + log(distance(E, G)), log(distance(C, G)) + log(distance(C, E)) == log(distance(E, G)) + log(distance(C, E))
By line_intersection_definition on orthocenter(A, C, E), g, Line(C, E) we get orthocenter(A, C, E) == line_intersection(g, Line(C, E))
By line_intersection_definition on orthocenter(B, C, E), Line(C, E), f we get orthocenter(B, C, E) == line_intersection(f, Line(C, E))
By concurrent_sufficient_conditions on Line(B, G), Line(A, B), f we get concurrent(f, Line(A, B), Line(B, G))
By line_intersection_definition on G, h, Line(B, G) we get G == line_intersection(h, Line(B, G))
By perpendicular_line_definition on orthocenter(B, C, E), Line(C, E), f we get Line(C, E) == perpendicular_line(orthocenter(B, C, E), f)
By perpendicular_line_definition on F, Line(B, E), altitude(C, B, E) we get Line(B, E) == perpendicular_line(F, altitude(C, B, E))
By line_intersection_definition on A, Line(A, B), g we get A == line_intersection(g, Line(A, B))
By perpendicular_line_definition on A, Line(A, C), altitude(E, A, C) we get Line(A, C) == perpendicular_line(A, altitude(E, A, C))
By line_intersection_definition on B, Line(B, G), Line(B, E) we get B == line_intersection(Line(B, E), Line(B, G))
By line_intersection_definition on E, h, Line(B, E) we get E == line_intersection(h, Line(B, E))
By concurrent_sufficient_conditions on Line(C, E), Line(C, G), f we get concurrent(f, Line(C, E), Line(C, G))
By perpendicular_line_definition on E, Line(B, E), altitude(C, B, E) we get Line(B, E) == perpendicular_line(E, altitude(C, B, E))
By perpendicular_line_definition on G, h, Line(B, G) we get h == perpendicular_line(G, Line(B, G))
By median_definition on G, B, E, Line(F, G) we get Line(F, G) == median(G, B, E)
By line_intersection_definition on B, Line(B, G), Line(A, B) we get B == line_intersection(Line(A, B), Line(B, G))
By concurrent_sufficient_conditions on Line(C, G), Line(C, E), f we get concurrent(f, Line(C, E), Line(C, G))
By concurrent_sufficient_conditions on Line(B, E), Line(A, B), f we get concurrent(f, Line(A, B), Line(B, E))
By line_intersection_definition on E, Line(C, E), h we get E == line_intersection(h, Line(C, E))
By line_intersection_definition on G, Line(B, G), Line(C, G) we get G == line_intersection(Line(B, G), Line(C, G))
By median_definition on F, A, B, Line(D, F) we get Line(D, F) == median(F, A, B)
By perpendicular_line_definition on C, Line(A, C), altitude(E, A, C) we get Line(A, C) == perpendicular_line(C, altitude(E, A, C))
By line_intersection_definition on C, Line(C, G), Line(C, E) we get C == line_intersection(Line(C, E), Line(C, G))
By line_intersection_definition on E, Line(C, E), Line(B, E) we get E == line_intersection(Line(B, E), Line(C, E))
By line_intersection_definition on G, Line(C, G), h we get G == line_intersection(h, Line(C, G))
By concurrent_sufficient_conditions on Line(B, G), Line(B, E), f we get concurrent(f, Line(B, E), Line(B, G))
By concurrent_sufficient_conditions on h, Line(C, E), g we get concurrent(g, h, Line(C, E))
By line_intersection_definition on E, Line(B, E), g we get E == line_intersection(g, Line(B, E))
By perpendicular_line_definition on G, Line(B, G), h we get Line(B, G) == perpendicular_line(G, h)
By perpendicular_line_definition on E, h, Line(B, G) we get h == perpendicular_line(E, Line(B, G))
By perpendicular_line_definition on orthocenter(A, C, E), g, Line(C, E) we get g == perpendicular_line(orthocenter(A, C, E), Line(C, E))
By perpendicular_line_definition on orthocenter(B, C, E), Line(C, E), g we get Line(C, E) == perpendicular_line(orthocenter(B, C, E), g)
By line_intersection_definition on B, Line(A, B), Line(B, E) we get B == line_intersection(Line(A, B), Line(B, E))
By concurrent_sufficient_conditions on Line(C, E), h, g we get concurrent(g, h, Line(C, E))
By median_definition on D, E, B, Line(D, F) we get Line(D, F) == median(D, B, E)
By perpendicular_line_definition on B, Line(B, G), h we get Line(B, G) == perpendicular_line(B, h)
By concurrent_sufficient_conditions on Line(A, B), Line(B, G), f we get concurrent(f, Line(A, B), Line(B, G))
By perpendicular_line_definition on orthocenter(B, C, E), altitude(C, B, E), Line(B, E) we get altitude(C, B, E) == perpendicular_line(orthocenter(B, C, E), Line(B, E))
By perpendicular_line_definition on orthocenter(A, C, E), Line(C, E), f we get Line(C, E) == perpendicular_line(orthocenter(A, C, E), f)
By perpendicular_line_definition on orthocenter(B, C, E), f, Line(C, E) we get f == perpendicular_line(orthocenter(B, C, E), Line(C, E))
By concurrent_sufficient_conditions on Line(B, E), Line(B, G), f we get concurrent(f, Line(B, E), Line(B, G))
By perpendicular_line_definition on B, Line(B, E), altitude(C, B, E) we get Line(B, E) == perpendicular_line(B, altitude(C, B, E))
By median_definition on C, E, B, Line(C, F) we get Line(C, F) == median(C, B, E)
By concurrent_sufficient_conditions on Line(A, B), Line(B, E), f we get concurrent(f, Line(A, B), Line(B, E))
By perpendicular_line_definition on orthocenter(A, C, E), Line(C, E), g we get Line(C, E) == perpendicular_line(orthocenter(A, C, E), g)
By perpendicular_line_definition on orthocenter(A, C, E), altitude(E, A, C), Line(A, C) we get altitude(E, A, C) == perpendicular_line(orthocenter(A, C, E), Line(A, C))
By line_unique_intersection_v0 on f, Line(C, E), C, orthocenter(B, C, E) we get C == orthocenter(B, C, E)
By line_unique_intersection_v0 on g, Line(C, E), E, orthocenter(A, C, E) we get E == orthocenter(A, C, E)
By same_angle_v2 on D, B, A, F we get angle(B, D, F) == angle(A, D, F) + 180 mod 360
By same_angle_converse_v1 on F, D, G, B we get collinear(D, F, G)
By perpendicular_direction_conditions_v0 on C, E, F, G we get perpendicular(Line(C, E), Line(F, G))
By same_angle_v2 on F, E, B, D we get angle(E, F, D) == angle(B, F, D) + 180 mod 360
By perpendicular_direction_conditions_v0 on D, F, E, C we get perpendicular(Line(C, E), Line(D, F))
By parallel_line_definition on orthocenter(A, C, E), g, f we get g == parallel_line(orthocenter(A, C, E), f)
By parallel_line_definition on orthocenter(B, C, E), f, g we get f == parallel_line(orthocenter(B, C, E), g)
By different_points_v1 on A, C we get 0 != distance(A, C)
By different_points_v1 on D, F we get 0 != distance(D, F)
By same_angle_v1 on A, B, D, C we get angle(B, A, C) == angle(D, A, C) mod 360
By projection_definition on E, G, Line(B, G) we get G == projection(E, Line(B, G))
By projection_definition on B, G, h we get G == projection(B, h)
By in_imply_collinear on orthocenter(B, C, E), B, C we get collinear(B, C, orthocenter(B, C, E))
By in_imply_collinear on orthocenter(A, C, E), E, A we get collinear(A, E, orthocenter(A, C, E))
By in_imply_collinear on orthocenter(A, C, E), C, E we get collinear(C, E, orthocenter(A, C, E))
By line_containment_inequality on orthocenter(B, C, E), F, f we get F != orthocenter(B, C, E)
By in_imply_collinear on orthocenter(B, C, E), C, E we get collinear(C, E, orthocenter(B, C, E))
By line_inequality on Line(F, G), h, F we get h != Line(F, G)
By line_containment_inequality on orthocenter(B, C, E), E, f we get E != orthocenter(B, C, E)
By line_inequality on Line(A, C), Line(A, B), C we get Line(A, B) != Line(A, C)
By line_inequality on Line(C, F), h, F we get h != Line(C, F)
By not_in_line_equivalent_to_not_collinear_v0_r on B, F, G we get B not in Line(F, G)
By line_inequality on Line(A, C), h, C we get h != Line(A, C)
By line_inequality on Line(F, G), Line(C, E), F we get Line(C, E) != Line(F, G)
By line_containment_inequality on orthocenter(A, C, E), C, g we get C != orthocenter(A, C, E)
By line_inequality on Line(D, F), h, F we get h != Line(D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on F, C, A we get F not in Line(A, C)
By line_inequality on Line(F, G), g, G we get g != Line(F, G)
By not_in_line_equivalent_to_not_collinear_v0_r on E, A, C we get E not in Line(A, C)
By line_inequality on altitude(E, A, C), Line(B, G), E we get Line(B, G) != altitude(E, A, C)
By line_inequality on Line(C, F), Line(A, B), C we get Line(A, B) != Line(C, F)
By line_inequality on Line(D, F), Line(C, E), D we get Line(C, E) != Line(D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on B, A, C we get B not in Line(A, C)
By line_inequality on Line(F, G), f, G we get f != Line(F, G)
By not_in_line_equivalent_to_not_collinear_v0_r on C, F, G we get C not in Line(F, G)
By line_inequality on Line(F, G), Line(B, E), G we get Line(B, E) != Line(F, G)
By line_inequality on altitude(C, B, E), Line(B, E), C we get Line(B, E) != altitude(C, B, E)
By line_inequality on Line(D, F), g, F we get g != Line(D, F)
By line_inequality on Line(A, C), Line(C, E), A we get Line(A, C) != Line(C, E)
By line_inequality on Line(D, F), Line(A, B), F we get Line(A, B) != Line(D, F)
By line_containment_inequality on orthocenter(B, C, E), A, Line(C, E) we get A != orthocenter(B, C, E)
By not_in_line_equivalent_to_not_collinear_v0_r on A, F, C we get A not in Line(C, F)
By not_in_line_equivalent_to_not_collinear_v0_r on E, F, C we get E not in Line(C, F)
By line_containment_inequality on orthocenter(B, C, E), B, Line(C, E) we get B != orthocenter(B, C, E)
By line_containment_inequality on orthocenter(A, C, E), D, Line(C, E) we get D != orthocenter(A, C, E)
By line_inequality on Line(A, C), Line(B, G), C we get Line(A, C) != Line(B, G)
By line_inequality on Line(C, F), g, C we get g != Line(C, F)
By line_inequality on Line(C, F), Line(C, E), F we get Line(C, E) != Line(C, F)
By line_inequality on Line(D, F), Line(B, E), D we get Line(B, E) != Line(D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on E, F, G we get E not in Line(F, G)
By line_inequality on altitude(C, B, E), Line(B, G), C we get Line(B, G) != altitude(C, B, E)
By line_containment_inequality on orthocenter(A, C, E), A, Line(C, E) we get A != orthocenter(A, C, E)
By line_containment_inequality on orthocenter(B, C, E), G, f we get G != orthocenter(B, C, E)
By line_containment_inequality on orthocenter(A, C, E), B, g we get B != orthocenter(A, C, E)
By line_inequality on altitude(E, A, C), Line(C, G), E we get Line(C, G) != altitude(E, A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on D, C, F we get D not in Line(C, F)
By not_in_line_equivalent_to_not_collinear_v0_r on C, D, F we get C not in Line(D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on B, F, C we get B not in Line(C, F)
By line_inequality on Line(F, G), Line(A, B), G we get Line(A, B) != Line(F, G)
By line_inequality on Line(A, C), Line(C, G), A we get Line(A, C) != Line(C, G)
By not_in_line_equivalent_to_not_collinear_v0_r on G, C, A we get G not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on D, C, A we get D not in Line(A, C)
By line_inequality on Line(C, F), Line(B, G), F we get Line(B, G) != Line(C, F)
By line_inequality on altitude(E, A, C), f, E we get f != altitude(E, A, C)
By line_containment_inequality on orthocenter(A, C, E), F, Line(C, E) we get F != orthocenter(A, C, E)
By line_inequality on altitude(C, B, E), Line(A, B), C we get Line(A, B) != altitude(C, B, E)
By line_inequality on altitude(C, B, E), h, C we get h != altitude(C, B, E)
By line_inequality on Line(F, G), Line(B, G), F we get Line(B, G) != Line(F, G)
By not_in_line_equivalent_to_not_collinear_v0_r on E, F, D we get E not in Line(D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on G, C, F we get G not in Line(C, F)
By line_inequality on altitude(C, B, E), g, C we get g != altitude(C, B, E)
By line_inequality on Line(C, F), f, F we get f != Line(C, F)
By not_in_line_equivalent_to_not_collinear_v0_r on A, D, F we get A not in Line(D, F)
By line_inequality on Line(A, C), g, C we get g != Line(A, C)
By line_inequality on Line(D, F), Line(C, G), D we get Line(C, G) != Line(D, F)
By line_inequality on Line(D, F), Line(B, G), D we get Line(B, G) != Line(D, F)
By line_inequality on Line(A, C), Line(B, E), C we get Line(A, C) != Line(B, E)
By line_inequality on Line(A, C), f, A we get f != Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on A, F, G we get A not in Line(F, G)
By line_inequality on Line(F, G), Line(C, G), F we get Line(C, G) != Line(F, G)
By not_in_line_equivalent_to_not_collinear_v0_r on B, D, F we get B not in Line(D, F)
By line_containment_inequality on orthocenter(A, C, E), G, Line(C, E) we get G != orthocenter(A, C, E)
By line_containment_inequality on orthocenter(B, C, E), D, Line(C, E) we get D != orthocenter(B, C, E)
By line_inequality on altitude(E, A, C), Line(A, B), E we get Line(A, B) != altitude(E, A, C)
By line_inequality on Line(C, F), Line(C, G), F we get Line(C, F) != Line(C, G)
By line_inequality on Line(C, F), Line(B, E), C we get Line(B, E) != Line(C, F)
By line_inequality on Line(D, F), f, D we get f != Line(D, F)
By aa_similarity on C, G, E, G, F, B we get similar_triangles(B, F, G, E, G, C)
By sss_anti_congruence_v0 on F, C, E, F, E, C we get anti_congruent_triangles(C, E, F, E, C, F)
By tangent_chord_angle_v1 on F, C, B, G we get tangent(Line(F, G), Circle(B, C, F))
By internal_angle_bisector_definition_v0_r on E, G, C, F we get Line(F, G) == internal_angle_bisector(C, F, E)
By tangent_chord_angle_v1 on G, C, F, E we get tangent(Line(E, G), Circle(C, F, G))
By sss_anti_congruence_v1 on F, C, B, F, B, C we get anti_congruent_triangles(B, C, F, C, B, F)
By sss_anti_congruence_v1 on C, B, F, B, C, F we get anti_congruent_triangles(B, C, F, C, B, F)
By tangent_chord_angle_v1 on G, E, F, C we get tangent(Line(C, G), Circle(E, F, G))
By sss_anti_congruence_v1 on G, F, B, B, F, G we get anti_congruent_triangles(B, F, G, G, F, B)
By isosceles_triangle_properties on F, E, C we get distance(C, F) == distance(E, F), angle(E, C, F) == angle(F, E, C) mod 360
By sss_anti_congruence_v0 on F, B, C, F, C, B we get anti_congruent_triangles(B, C, F, C, B, F)
By log_of_2_times_distance on B, E, F, G we get log(distance(B, E)) == 0.6931471805599453 + log(distance(F, G))
By isogonal_conjugate_sufficient_conditions_v3 on B, F, C, G, G we get G == isogonal_conjugate(G, B, C, F)
By isosceles_triangle_properties on F, G, B we get distance(B, F) == distance(F, G), angle(F, G, B) == angle(G, B, F) mod 360
By external_angle_bisector_definition_v0_r on B, G, C, F we get Line(F, G) == external_angle_bisector(B, F, C)
By aa_anti_similarity on E, C, G, G, B, F we get anti_similar_triangles(B, F, G, C, G, E)
By sss_anti_congruence_v0 on F, G, B, F, B, G we get anti_congruent_triangles(B, F, G, G, F, B)
By sss_anti_congruence_v0 on F, G, B, F, B, G we get anti_congruent_triangles(B, F, G, G, F, B)
By sss_anti_congruence_v0 on F, E, G, F, G, E we get anti_congruent_triangles(E, F, G, G, F, E)
By sss_anti_congruence_v1 on B, G, F, G, B, F we get anti_congruent_triangles(B, F, G, G, F, B)
By sss_anti_congruence_v0 on C, F, B, B, F, C we get anti_congruent_triangles(B, C, F, C, B, F)
By sss_anti_congruence_v0 on B, F, G, G, F, B we get anti_congruent_triangles(B, F, G, G, F, B)
By sss_anti_congruence_v0 on G, B, F, B, G, F we get anti_congruent_triangles(B, F, G, G, F, B)
By sss_anti_congruence_v0 on G, F, E, E, F, G we get anti_congruent_triangles(E, F, G, G, F, E)
By sss_anti_congruence_v1 on C, B, F, B, C, F we get anti_congruent_triangles(B, C, F, C, B, F)
By aa_anti_similarity on G, F, B, E, G, C we get anti_similar_triangles(B, F, G, C, G, E)
By sss_anti_congruence_v1 on B, F, C, C, F, B we get anti_congruent_triangles(B, C, F, C, B, F)
By sss_anti_congruence_v0 on C, F, B, B, F, C we get anti_congruent_triangles(B, C, F, C, B, F)
By sss_anti_congruence_v1 on G, E, F, E, G, F we get anti_congruent_triangles(E, F, G, G, F, E)
By sss_anti_congruence_v1 on F, C, B, F, B, C we get anti_congruent_triangles(B, C, F, C, B, F)
By sss_anti_congruence_v0 on F, C, E, F, E, C we get anti_congruent_triangles(C, E, F, E, C, F)
By sas_anti_congruence on G, F, B, B, F, G we get anti_congruent_triangles(B, F, G, G, F, B)
By sss_anti_congruence_v1 on C, F, E, E, F, C we get anti_congruent_triangles(C, E, F, E, C, F)
By sss_anti_congruence_v1 on F, B, G, F, G, B we get anti_congruent_triangles(B, F, G, G, F, B)
By sss_anti_congruence_v0 on G, F, E, E, F, G we get anti_congruent_triangles(E, F, G, G, F, E)
By isosceles_triangle_properties on F, G, E we get distance(E, F) == distance(F, G), angle(F, G, E) == angle(G, E, F) mod 360
By isosceles_triangle_properties on F, C, B we get distance(B, F) == distance(C, F), angle(C, B, F) == angle(F, C, B) mod 360
By sss_anti_congruence_v0 on F, G, B, F, B, G we get anti_congruent_triangles(B, F, G, G, F, B)
By sss_anti_congruence_v0 on F, B, C, F, C, B we get anti_congruent_triangles(B, C, F, C, B, F)
By sss_anti_congruence_v1 on E, C, F, C, E, F we get anti_congruent_triangles(C, E, F, E, C, F)
By sss_anti_congruence_v1 on B, G, F, G, B, F we get anti_congruent_triangles(B, F, G, G, F, B)
By sss_anti_congruence_v1 on E, F, G, G, F, E we get anti_congruent_triangles(E, F, G, G, F, E)
By sss_anti_congruence_v1 on E, C, F, C, E, F we get anti_congruent_triangles(C, E, F, E, C, F)
By sss_anti_congruence_v0 on C, F, B, B, F, C we get anti_congruent_triangles(B, C, F, C, B, F)
By sss_anti_congruence_v1 on F, C, B, F, B, C we get anti_congruent_triangles(B, C, F, C, B, F)
By sss_anti_congruence_v0 on B, F, G, G, F, B we get anti_congruent_triangles(B, F, G, G, F, B)
By sss_anti_congruence_v0 on C, E, F, E, C, F we get anti_congruent_triangles(C, E, F, E, C, F)
By sss_anti_congruence_v0 on F, E, G, F, G, E we get anti_congruent_triangles(E, F, G, G, F, E)
By sss_anti_congruence_v0 on F, B, C, F, C, B we get anti_congruent_triangles(B, C, F, C, B, F)
By sss_anti_congruence_v0 on F, E, G, F, G, E we get anti_congruent_triangles(E, F, G, G, F, E)
By sss_anti_congruence_v1 on B, F, C, C, F, B we get anti_congruent_triangles(B, C, F, C, B, F)
By sss_anti_congruence_v0 on G, B, F, B, G, F we get anti_congruent_triangles(B, F, G, G, F, B)
By sss_anti_congruence_v1 on F, B, G, F, G, B we get anti_congruent_triangles(B, F, G, G, F, B)
By sss_anti_congruence_v1 on G, F, B, B, F, G we get anti_congruent_triangles(B, F, G, G, F, B)
By sss_anti_congruence_v0 on F, G, B, F, B, G we get anti_congruent_triangles(B, F, G, G, F, B)
By isosceles_triangle_properties on F, C, E we get distance(C, F) == distance(E, F), angle(C, E, F) == angle(F, C, E) mod 360
By sss_anti_congruence_v0 on B, F, G, G, F, B we get anti_congruent_triangles(B, F, G, G, F, B)
By sss_anti_congruence_v1 on F, G, E, F, E, G we get anti_congruent_triangles(E, F, G, G, F, E)
By sss_anti_congruence_v1 on F, G, E, F, E, G we get anti_congruent_triangles(E, F, G, G, F, E)
By sss_anti_congruence_v1 on F, B, G, F, G, B we get anti_congruent_triangles(B, F, G, G, F, B)
By sss_anti_congruence_v1 on F, E, C, F, C, E we get anti_congruent_triangles(C, E, F, E, C, F)
By sss_anti_congruence_v0 on G, B, F, B, G, F we get anti_congruent_triangles(B, F, G, G, F, B)
By sss_anti_congruence_v0 on E, G, F, G, E, F we get anti_congruent_triangles(E, F, G, G, F, E)
By sss_anti_congruence_v0 on G, B, F, B, G, F we get anti_congruent_triangles(B, F, G, G, F, B)
By sss_anti_congruence_v0 on E, F, C, C, F, E we get anti_congruent_triangles(C, E, F, E, C, F)
By aa_anti_similarity on G, B, F, E, C, G we get anti_similar_triangles(B, F, G, C, G, E)
By sss_anti_congruence_v1 on C, B, F, B, C, F we get anti_congruent_triangles(B, C, F, C, B, F)
By log_of_2_times_distance on E, B, F, C we get log(distance(B, E)) == 0.6931471805599453 + log(distance(C, F))
By aa_similarity on C, E, G, G, B, F we get similar_triangles(B, F, G, E, G, C)
By sss_anti_congruence_v0 on G, F, E, E, F, G we get anti_congruent_triangles(E, F, G, G, F, E)
By sss_anti_congruence_v1 on F, E, C, F, C, E we get anti_congruent_triangles(C, E, F, E, C, F)
By sss_anti_congruence_v1 on G, E, F, E, G, F we get anti_congruent_triangles(E, F, G, G, F, E)
By sss_anti_congruence_v1 on G, E, F, E, G, F we get anti_congruent_triangles(E, F, G, G, F, E)
By sss_anti_congruence_v0 on C, F, B, B, F, C we get anti_congruent_triangles(B, C, F, C, B, F)
By sss_anti_congruence_v1 on C, F, E, E, F, C we get anti_congruent_triangles(C, E, F, E, C, F)
By sss_anti_congruence_v0 on B, C, F, C, B, F we get anti_congruent_triangles(B, C, F, C, B, F)
By sss_anti_congruence_v0 on G, F, E, E, F, G we get anti_congruent_triangles(E, F, G, G, F, E)
By sss_anti_congruence_v0 on F, E, G, F, G, E we get anti_congruent_triangles(E, F, G, G, F, E)
By sss_anti_congruence_v1 on B, F, C, C, F, B we get anti_congruent_triangles(B, C, F, C, B, F)
By sss_anti_congruence_v0 on E, F, C, C, F, E we get anti_congruent_triangles(C, E, F, E, C, F)
By sss_anti_congruence_v0 on C, F, B, B, F, C we get anti_congruent_triangles(B, C, F, C, B, F)
By sss_anti_congruence_v1 on C, F, E, E, F, C we get anti_congruent_triangles(C, E, F, E, C, F)
By sss_anti_congruence_v1 on C, B, F, B, C, F we get anti_congruent_triangles(B, C, F, C, B, F)
By sss_anti_congruence_v0 on F, C, E, F, E, C we get anti_congruent_triangles(C, E, F, E, C, F)
By sss_anti_congruence_v0 on E, F, C, C, F, E we get anti_congruent_triangles(C, E, F, E, C, F)
By sss_anti_congruence_v1 on B, G, F, G, B, F we get anti_congruent_triangles(B, F, G, G, F, B)
By sss_anti_congruence_v0 on E, G, F, G, E, F we get anti_congruent_triangles(E, F, G, G, F, E)
By sss_anti_congruence_v1 on F, E, C, F, C, E we get anti_congruent_triangles(C, E, F, E, C, F)
By sas_anti_congruence on C, F, E, E, F, C we get anti_congruent_triangles(C, E, F, E, C, F)
By sss_anti_congruence_v0 on F, G, B, F, B, G we get anti_congruent_triangles(B, F, G, G, F, B)
By sss_anti_congruence_v0 on C, E, F, E, C, F we get anti_congruent_triangles(C, E, F, E, C, F)
By sss_anti_congruence_v1 on C, B, F, B, C, F we get anti_congruent_triangles(B, C, F, C, B, F)
By sss_anti_congruence_v0 on G, F, E, E, F, G we get anti_congruent_triangles(E, F, G, G, F, E)
By sss_anti_congruence_v0 on E, G, F, G, E, F we get anti_congruent_triangles(E, F, G, G, F, E)
By sss_anti_congruence_v0 on F, B, C, F, C, B we get anti_congruent_triangles(B, C, F, C, B, F)
By sss_anti_congruence_v0 on C, E, F, E, C, F we get anti_congruent_triangles(C, E, F, E, C, F)
By sas_anti_congruence on B, F, C, C, F, B we get anti_congruent_triangles(B, C, F, C, B, F)
By sss_anti_congruence_v1 on B, F, C, C, F, B we get anti_congruent_triangles(B, C, F, C, B, F)
By sss_anti_congruence_v0 on E, F, C, C, F, E we get anti_congruent_triangles(C, E, F, E, C, F)
By sss_anti_congruence_v1 on F, B, G, F, G, B we get anti_congruent_triangles(B, F, G, G, F, B)
By sss_anti_congruence_v1 on B, G, F, G, B, F we get anti_congruent_triangles(B, F, G, G, F, B)
By sss_anti_congruence_v0 on E, F, C, C, F, E we get anti_congruent_triangles(C, E, F, E, C, F)
By sss_anti_congruence_v1 on F, E, C, F, C, E we get anti_congruent_triangles(C, E, F, E, C, F)
By sss_anti_congruence_v1 on F, E, C, F, C, E we get anti_congruent_triangles(C, E, F, E, C, F)
By sas_anti_congruence on E, F, G, G, F, E we get anti_congruent_triangles(E, F, G, G, F, E)
By perpendicular_lines_draw_intersection on Line(B, E), altitude(C, B, E) we get exists(line_intersection(Line(B, E), altitude(C, B, E)))
By sss_anti_congruence_v1 on E, F, G, G, F, E we get anti_congruent_triangles(E, F, G, G, F, E)
By sss_anti_congruence_v1 on F, E, C, F, C, E we get anti_congruent_triangles(C, E, F, E, C, F)
By sas_anti_congruence on E, F, C, C, F, E we get anti_congruent_triangles(C, E, F, E, C, F)
By sss_anti_congruence_v0 on E, G, F, G, E, F we get anti_congruent_triangles(E, F, G, G, F, E)
By sss_anti_congruence_v1 on E, F, G, G, F, E we get anti_congruent_triangles(E, F, G, G, F, E)
By sss_anti_congruence_v0 on B, C, F, C, B, F we get anti_congruent_triangles(B, C, F, C, B, F)
By sss_anti_congruence_v1 on G, F, B, B, F, G we get anti_congruent_triangles(B, F, G, G, F, B)
By sss_anti_congruence_v1 on F, C, B, F, B, C we get anti_congruent_triangles(B, C, F, C, B, F)
By reverse_direction on F, G we get 180 == direction(F, G) - direction(G, F) mod 360
By sss_anti_congruence_v0 on E, G, F, G, E, F we get anti_congruent_triangles(E, F, G, G, F, E)
By sss_anti_congruence_v0 on F, B, C, F, C, B we get anti_congruent_triangles(B, C, F, C, B, F)
By sss_anti_congruence_v1 on G, E, F, E, G, F we get anti_congruent_triangles(E, F, G, G, F, E)
By sss_anti_congruence_v1 on F, C, B, F, B, C we get anti_congruent_triangles(B, C, F, C, B, F)
By sss_anti_congruence_v1 on E, C, F, C, E, F we get anti_congruent_triangles(C, E, F, E, C, F)
By sss_anti_congruence_v1 on E, F, G, G, F, E we get anti_congruent_triangles(E, F, G, G, F, E)
By aa_similarity on G, F, B, C, G, E we get similar_triangles(B, F, G, E, G, C)
By sss_anti_congruence_v0 on B, C, F, C, B, F we get anti_congruent_triangles(B, C, F, C, B, F)
By sss_anti_congruence_v0 on C, E, F, E, C, F we get anti_congruent_triangles(C, E, F, E, C, F)
By sss_anti_congruence_v1 on E, C, F, C, E, F we get anti_congruent_triangles(C, E, F, E, C, F)
By sss_anti_congruence_v1 on G, E, F, E, G, F we get anti_congruent_triangles(E, F, G, G, F, E)
By sss_anti_congruence_v1 on B, G, F, G, B, F we get anti_congruent_triangles(B, F, G, G, F, B)
By sss_anti_congruence_v0 on B, F, G, G, F, B we get anti_congruent_triangles(B, F, G, G, F, B)
By sss_anti_congruence_v1 on G, F, B, B, F, G we get anti_congruent_triangles(B, F, G, G, F, B)
By aa_anti_similarity on E, G, C, G, F, B we get anti_similar_triangles(B, F, G, C, G, E)
By sss_anti_congruence_v1 on F, C, B, F, B, C we get anti_congruent_triangles(B, C, F, C, B, F)
By aa_similarity on G, B, F, C, E, G we get similar_triangles(B, F, G, E, G, C)
By sss_anti_congruence_v1 on C, F, E, E, F, C we get anti_congruent_triangles(C, E, F, E, C, F)
By isosceles_triangle_properties on F, B, C we get distance(B, F) == distance(C, F), angle(B, C, F) == angle(F, B, C) mod 360
By sss_anti_congruence_v1 on G, E, F, E, G, F we get anti_congruent_triangles(E, F, G, G, F, E)
By sas_anti_congruence on B, F, G, G, F, B we get anti_congruent_triangles(B, F, G, G, F, B)
By sss_anti_congruence_v1 on C, F, E, E, F, C we get anti_congruent_triangles(C, E, F, E, C, F)
By isosceles_triangle_properties on F, B, G we get distance(B, F) == distance(F, G), angle(B, G, F) == angle(F, B, G) mod 360
By sss_anti_congruence_v0 on G, F, E, E, F, G we get anti_congruent_triangles(E, F, G, G, F, E)
By sss_anti_congruence_v0 on F, C, E, F, E, C we get anti_congruent_triangles(C, E, F, E, C, F)
By sss_anti_congruence_v0 on F, E, G, F, G, E we get anti_congruent_triangles(E, F, G, G, F, E)
By sss_anti_congruence_v1 on G, F, B, B, F, G we get anti_congruent_triangles(B, F, G, G, F, B)
By sss_anti_congruence_v1 on F, G, E, F, E, G we get anti_congruent_triangles(E, F, G, G, F, E)
By sss_anti_congruence_v0 on C, E, F, E, C, F we get anti_congruent_triangles(C, E, F, E, C, F)
By sss_anti_congruence_v1 on F, G, E, F, E, G we get anti_congruent_triangles(E, F, G, G, F, E)
By sss_anti_congruence_v0 on F, C, E, F, E, C we get anti_congruent_triangles(C, E, F, E, C, F)
By sss_anti_congruence_v0 on G, B, F, B, G, F we get anti_congruent_triangles(B, F, G, G, F, B)
By sss_anti_congruence_v1 on B, F, C, C, F, B we get anti_congruent_triangles(B, C, F, C, B, F)
By sss_anti_congruence_v1 on G, F, B, B, F, G we get anti_congruent_triangles(B, F, G, G, F, B)
By sas_anti_congruence on G, F, E, E, F, G we get anti_congruent_triangles(E, F, G, G, F, E)
By sss_anti_congruence_v0 on F, B, C, F, C, B we get anti_congruent_triangles(B, C, F, C, B, F)
By sas_anti_congruence on C, F, B, B, F, C we get anti_congruent_triangles(B, C, F, C, B, F)
By sss_anti_congruence_v1 on E, F, G, G, F, E we get anti_congruent_triangles(E, F, G, G, F, E)
By sss_anti_congruence_v1 on F, B, G, F, G, B we get anti_congruent_triangles(B, F, G, G, F, B)
By isosceles_triangle_properties on F, E, G we get distance(E, F) == distance(F, G), angle(E, G, F) == angle(F, E, G) mod 360
By sss_anti_congruence_v0 on C, F, B, B, F, C we get anti_congruent_triangles(B, C, F, C, B, F)
By sss_anti_congruence_v0 on B, F, G, G, F, B we get anti_congruent_triangles(B, F, G, G, F, B)
By sss_anti_congruence_v1 on E, C, F, C, E, F we get anti_congruent_triangles(C, E, F, E, C, F)
By sss_anti_congruence_v1 on F, G, E, F, E, G we get anti_congruent_triangles(E, F, G, G, F, E)
By sss_anti_congruence_v0 on F, C, E, F, E, C we get anti_congruent_triangles(C, E, F, E, C, F)
By sss_anti_congruence_v1 on F, G, E, F, E, G we get anti_congruent_triangles(E, F, G, G, F, E)
By sss_anti_congruence_v0 on B, C, F, C, B, F we get anti_congruent_triangles(B, C, F, C, B, F)
By sss_anti_congruence_v0 on E, F, C, C, F, E we get anti_congruent_triangles(C, E, F, E, C, F)
By sss_anti_congruence_v1 on B, G, F, G, B, F we get anti_congruent_triangles(B, F, G, G, F, B)
By sss_anti_congruence_v0 on F, G, B, F, B, G we get anti_congruent_triangles(B, F, G, G, F, B)
By sss_anti_congruence_v0 on B, F, G, G, F, B we get anti_congruent_triangles(B, F, G, G, F, B)
By sss_anti_congruence_v1 on C, F, E, E, F, C we get anti_congruent_triangles(C, E, F, E, C, F)
By sss_anti_congruence_v1 on B, F, C, C, F, B we get anti_congruent_triangles(B, C, F, C, B, F)
By sss_anti_congruence_v0 on E, G, F, G, E, F we get anti_congruent_triangles(E, F, G, G, F, E)
By sss_anti_congruence_v1 on E, C, F, C, E, F we get anti_congruent_triangles(C, E, F, E, C, F)
By sss_anti_congruence_v0 on G, B, F, B, G, F we get anti_congruent_triangles(B, F, G, G, F, B)
By sss_anti_congruence_v1 on E, F, G, G, F, E we get anti_congruent_triangles(E, F, G, G, F, E)
By sss_anti_congruence_v0 on F, E, G, F, G, E we get anti_congruent_triangles(E, F, G, G, F, E)
By sss_anti_congruence_v1 on F, B, G, F, G, B we get anti_congruent_triangles(B, F, G, G, F, B)
By sss_anti_congruence_v0 on B, C, F, C, B, F we get anti_congruent_triangles(B, C, F, C, B, F)
By perpendicular_lines_draw_intersection on Line(B, G), h we get exists(line_intersection(h, Line(B, G)))
By reverse_direction on F, C we get 180 == direction(F, C) - direction(C, F) mod 360
By sss_anti_congruence_v0 on C, E, F, E, C, F we get anti_congruent_triangles(C, E, F, E, C, F)
By sss_anti_congruence_v0 on B, C, F, C, B, F we get anti_congruent_triangles(B, C, F, C, B, F)
By sss_anti_congruence_v1 on C, B, F, B, C, F we get anti_congruent_triangles(B, C, F, C, B, F)
By right_triangle_circumcenter_v1 on E, G, B we get midpoint(B, E) == circumcenter(B, E, G)
By perpendicular_lines_draw_intersection on Line(A, C), altitude(E, A, C) we get exists(line_intersection(Line(A, C), altitude(E, A, C)))
By sss_congruence_v0 on F, G, C, F, E, G we get congruent_triangles(C, F, G, G, F, E)
By similar_triangle_basic_properties on B, F, D, B, E, A we get not_collinear(B, D, F), not_collinear(A, B, E), angle(B, E, A) == angle(B, F, D) mod 360, angle(E, A, B) == angle(F, D, B) mod 360, angle(A, B, E) == angle(D, B, F) mod 360, log(distance(B, E)) + log(distance(D, F)) == log(distance(B, F)) + log(distance(A, E)), log(distance(A, E)) + log(distance(B, D)) == log(distance(D, F)) + log(distance(A, B)), log(distance(A, B)) + log(distance(B, F)) == log(distance(B, D)) + log(distance(B, E))
By sss_anti_congruence_v1 on F, C, G, F, E, G we get anti_congruent_triangles(C, F, G, E, F, G)
By sas_anti_congruence on G, F, E, G, F, C we get anti_congruent_triangles(C, F, G, E, F, G)
By altitude_definition on E, G, B, h we get h == altitude(E, B, G)
By sss_anti_congruence_v1 on C, G, F, G, C, F we get anti_congruent_triangles(C, F, G, G, F, C)
By sss_anti_congruence_v1 on G, F, C, G, F, E we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_congruence_v1 on F, G, E, F, C, G we get congruent_triangles(C, F, G, G, F, E)
By sss_congruence_v0 on C, F, G, G, F, E we get congruent_triangles(C, F, G, G, F, E)
By sas_anti_congruence on G, F, C, C, F, G we get anti_congruent_triangles(C, F, G, G, F, C)
By sss_congruence_v0 on C, F, G, G, F, E we get congruent_triangles(C, F, G, G, F, E)
By sss_anti_congruence_v0 on G, F, E, G, F, C we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_congruence_v1 on G, E, F, C, G, F we get congruent_triangles(C, F, G, G, F, E)
By sss_congruence_v0 on G, C, F, E, G, F we get congruent_triangles(C, F, G, G, F, E)
By sss_anti_congruence_v1 on F, C, G, F, G, C we get anti_congruent_triangles(C, F, G, G, F, C)
By sss_anti_congruence_v0 on C, F, G, E, F, G we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_congruence_v0 on F, E, G, F, G, C we get congruent_triangles(C, F, G, G, F, E)
By sss_anti_congruence_v1 on C, G, F, G, C, F we get anti_congruent_triangles(C, F, G, G, F, C)
By sss_anti_congruence_v0 on F, G, C, F, C, G we get anti_congruent_triangles(C, F, G, G, F, C)
By sss_congruence_v0 on C, F, G, G, F, E we get congruent_triangles(C, F, G, G, F, E)
By sss_anti_congruence_v1 on G, F, C, C, F, G we get anti_congruent_triangles(C, F, G, G, F, C)
By sss_anti_congruence_v1 on G, E, F, G, C, F we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_congruence_v1 on F, C, G, F, G, E we get congruent_triangles(C, F, G, G, F, E)
By sss_anti_congruence_v1 on G, F, C, G, F, E we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_anti_congruence_v1 on G, E, F, G, C, F we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_congruence_v0 on F, G, C, F, E, G we get congruent_triangles(C, F, G, G, F, E)
By sss_anti_congruence_v1 on C, G, F, E, G, F we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_congruence_v0 on G, F, E, C, F, G we get congruent_triangles(C, F, G, G, F, E)
By parallel_line_angles_reverse_v2 on B, C, A, E we get angle(B, C, A) == angle(E, A, C) + 180 mod 360
By sas_anti_congruence on C, F, G, G, F, C we get anti_congruent_triangles(C, F, G, G, F, C)
By sss_congruence_v1 on F, G, E, F, C, G we get congruent_triangles(C, F, G, G, F, E)
By sss_congruence_v1 on C, G, F, G, E, F we get congruent_triangles(C, F, G, G, F, E)
By sss_anti_congruence_v0 on G, C, F, C, G, F we get anti_congruent_triangles(C, F, G, G, F, C)
By sss_anti_congruence_v0 on F, E, G, F, C, G we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_congruence_v0 on E, G, F, G, C, F we get congruent_triangles(C, F, G, G, F, E)
By sss_anti_congruence_v1 on F, G, E, F, G, C we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_anti_congruence_v0 on G, C, F, G, E, F we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_anti_congruence_v0 on F, E, G, F, C, G we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_congruence_v0 on G, F, E, C, F, G we get congruent_triangles(C, F, G, G, F, E)
By sss_anti_congruence_v0 on F, G, C, F, C, G we get anti_congruent_triangles(C, F, G, G, F, C)
By altitude_definition on B, E, G, Line(B, G) we get Line(B, G) == altitude(B, E, G)
By sss_anti_congruence_v1 on F, C, G, F, G, C we get anti_congruent_triangles(C, F, G, G, F, C)
By sss_anti_congruence_v1 on G, E, F, G, C, F we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_congruence_v0 on F, E, G, F, G, C we get congruent_triangles(C, F, G, G, F, E)
By sss_congruence_v1 on F, C, G, F, G, E we get congruent_triangles(C, F, G, G, F, E)
By sas_congruence on C, F, G, G, F, E we get congruent_triangles(C, F, G, G, F, E)
By sss_anti_congruence_v0 on C, F, G, E, F, G we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_anti_congruence_v1 on C, G, F, G, C, F we get anti_congruent_triangles(C, F, G, G, F, C)
By sss_congruence_v0 on G, C, F, E, G, F we get congruent_triangles(C, F, G, G, F, E)
By sss_anti_congruence_v0 on F, E, G, F, C, G we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_anti_congruence_v1 on G, F, C, C, F, G we get anti_congruent_triangles(C, F, G, G, F, C)
By sss_congruence_v1 on C, G, F, G, E, F we get congruent_triangles(C, F, G, G, F, E)
By sss_anti_congruence_v1 on E, F, G, C, F, G we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_congruence_v0 on G, F, E, C, F, G we get congruent_triangles(C, F, G, G, F, E)
By sss_congruence_v0 on G, F, E, C, F, G we get congruent_triangles(C, F, G, G, F, E)
By sss_anti_congruence_v1 on E, F, G, C, F, G we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_congruence_v0 on E, G, F, G, C, F we get congruent_triangles(C, F, G, G, F, E)
By sss_congruence_v1 on F, C, G, F, G, E we get congruent_triangles(C, F, G, G, F, E)
By altitude_definition on C, E, F, altitude(C, B, E) we get altitude(C, B, E) == altitude(C, E, F)
By sss_congruence_v1 on F, G, E, F, C, G we get congruent_triangles(C, F, G, G, F, E)
By sss_anti_congruence_v0 on G, C, F, C, G, F we get anti_congruent_triangles(C, F, G, G, F, C)
By sss_congruence_v1 on E, F, G, G, F, C we get congruent_triangles(C, F, G, G, F, E)
By sss_anti_congruence_v0 on C, F, G, E, F, G we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_anti_congruence_v1 on F, G, E, F, G, C we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_congruence_v0 on F, E, G, F, G, C we get congruent_triangles(C, F, G, G, F, E)
By sss_anti_congruence_v0 on G, C, F, C, G, F we get anti_congruent_triangles(C, F, G, G, F, C)
By sss_anti_congruence_v1 on F, C, G, F, G, C we get anti_congruent_triangles(C, F, G, G, F, C)
By sss_anti_congruence_v0 on G, C, F, G, E, F we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_congruence_v1 on G, E, F, C, G, F we get congruent_triangles(C, F, G, G, F, E)
By sss_congruence_v1 on F, C, G, F, G, E we get congruent_triangles(C, F, G, G, F, E)
By sss_anti_congruence_v0 on G, C, F, G, E, F we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_congruence_v1 on F, G, E, F, C, G we get congruent_triangles(C, F, G, G, F, E)
By isosceles_triangle_properties on F, C, G we get distance(C, F) == distance(F, G), angle(C, G, F) == angle(F, C, G) mod 360
By sss_anti_congruence_v1 on C, G, F, G, C, F we get anti_congruent_triangles(C, F, G, G, F, C)
By sss_anti_congruence_v0 on C, F, G, G, F, C we get anti_congruent_triangles(C, F, G, G, F, C)
By sas_anti_congruence on G, F, C, G, F, E we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_anti_congruence_v0 on G, C, F, C, G, F we get anti_congruent_triangles(C, F, G, G, F, C)
By sss_congruence_v1 on E, F, G, G, F, C we get congruent_triangles(C, F, G, G, F, E)
By sss_anti_congruence_v0 on F, E, G, F, C, G we get anti_congruent_triangles(C, F, G, E, F, G)
By altitude_definition on C, B, F, altitude(C, B, E) we get altitude(C, B, E) == altitude(C, B, F)
By sss_anti_congruence_v0 on G, F, E, G, F, C we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_anti_congruence_v1 on C, G, F, E, G, F we get anti_congruent_triangles(C, F, G, E, F, G)
By similar_triangle_basic_properties on B, A, E, B, D, F we get not_collinear(A, B, E), not_collinear(B, D, F), angle(B, A, E) == angle(B, D, F) mod 360, angle(A, E, B) == angle(D, F, B) mod 360, angle(E, B, A) == angle(F, B, D) mod 360, log(distance(A, B)) + log(distance(D, F)) == log(distance(B, D)) + log(distance(A, E)), log(distance(A, E)) + log(distance(B, F)) == log(distance(D, F)) + log(distance(B, E)), log(distance(B, E)) + log(distance(B, D)) == log(distance(B, F)) + log(distance(A, B))
By sss_congruence_v1 on G, F, C, E, F, G we get congruent_triangles(C, F, G, G, F, E)
By sss_anti_congruence_v1 on F, G, E, F, G, C we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_anti_congruence_v1 on C, G, F, E, G, F we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_anti_congruence_v1 on G, F, C, G, F, E we get anti_congruent_triangles(C, F, G, E, F, G)
By parallel_line_angles_reverse_v3 on E, A, C, B we get angle(E, A, C) == angle(B, C, A) + 180 mod 360
By sss_congruence_v1 on E, F, G, G, F, C we get congruent_triangles(C, F, G, G, F, E)
By sss_anti_congruence_v0 on C, F, G, G, F, C we get anti_congruent_triangles(C, F, G, G, F, C)
By sss_congruence_v0 on G, C, F, E, G, F we get congruent_triangles(C, F, G, G, F, E)
By sss_anti_congruence_v0 on C, F, G, G, F, C we get anti_congruent_triangles(C, F, G, G, F, C)
By sss_congruence_v0 on E, G, F, G, C, F we get congruent_triangles(C, F, G, G, F, E)
By sss_anti_congruence_v1 on G, F, C, C, F, G we get anti_congruent_triangles(C, F, G, G, F, C)
By sss_anti_congruence_v1 on F, C, G, F, G, C we get anti_congruent_triangles(C, F, G, G, F, C)
By sss_anti_congruence_v0 on E, G, F, C, G, F we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_anti_congruence_v1 on G, F, C, G, F, E we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_congruence_v1 on E, F, G, G, F, C we get congruent_triangles(C, F, G, G, F, E)
By sss_anti_congruence_v0 on G, F, E, G, F, C we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_anti_congruence_v1 on F, G, E, F, G, C we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_congruence_v0 on G, F, E, C, F, G we get congruent_triangles(C, F, G, G, F, E)
By sss_congruence_v1 on G, F, C, E, F, G we get congruent_triangles(C, F, G, G, F, E)
By sss_anti_congruence_v0 on C, F, G, E, F, G we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_congruence_v0 on F, E, G, F, G, C we get congruent_triangles(C, F, G, G, F, E)
By sss_congruence_v1 on F, C, G, F, G, E we get congruent_triangles(C, F, G, G, F, E)
By sss_anti_congruence_v0 on F, G, C, F, C, G we get anti_congruent_triangles(C, F, G, G, F, C)
By sss_congruence_v0 on E, G, F, G, C, F we get congruent_triangles(C, F, G, G, F, E)
By sss_anti_congruence_v1 on C, G, F, G, C, F we get anti_congruent_triangles(C, F, G, G, F, C)
By sss_anti_congruence_v0 on F, G, C, F, G, E we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_anti_congruence_v0 on F, E, G, F, C, G we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_anti_congruence_v1 on F, G, E, F, G, C we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_anti_congruence_v0 on G, C, F, C, G, F we get anti_congruent_triangles(C, F, G, G, F, C)
By sss_anti_congruence_v1 on G, E, F, G, C, F we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_anti_congruence_v1 on C, G, F, E, G, F we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_congruence_v0 on F, G, C, F, E, G we get congruent_triangles(C, F, G, G, F, E)
By sss_congruence_v0 on G, C, F, E, G, F we get congruent_triangles(C, F, G, G, F, E)
By sss_congruence_v1 on F, C, G, F, G, E we get congruent_triangles(C, F, G, G, F, E)
By sss_anti_congruence_v0 on G, C, F, C, G, F we get anti_congruent_triangles(C, F, G, G, F, C)
By sss_congruence_v1 on G, F, C, E, F, G we get congruent_triangles(C, F, G, G, F, E)
By sss_anti_congruence_v1 on G, F, C, C, F, G we get anti_congruent_triangles(C, F, G, G, F, C)
By sss_congruence_v0 on F, E, G, F, G, C we get congruent_triangles(C, F, G, G, F, E)
By sss_congruence_v0 on C, F, G, G, F, E we get congruent_triangles(C, F, G, G, F, E)
By sss_anti_congruence_v1 on E, F, G, C, F, G we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_anti_congruence_v1 on F, C, G, F, E, G we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_anti_congruence_v1 on C, G, F, G, C, F we get anti_congruent_triangles(C, F, G, G, F, C)
By sss_congruence_v0 on G, F, E, C, F, G we get congruent_triangles(C, F, G, G, F, E)
By sss_anti_congruence_v0 on G, C, F, G, E, F we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_anti_congruence_v0 on G, C, F, G, E, F we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_congruence_v0 on F, G, C, F, E, G we get congruent_triangles(C, F, G, G, F, E)
By sss_anti_congruence_v0 on C, F, G, G, F, C we get anti_congruent_triangles(C, F, G, G, F, C)
By sss_anti_congruence_v1 on C, G, F, E, G, F we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_anti_congruence_v1 on E, F, G, C, F, G we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_congruence_v0 on F, G, C, F, E, G we get congruent_triangles(C, F, G, G, F, E)
By sss_congruence_v1 on G, E, F, C, G, F we get congruent_triangles(C, F, G, G, F, E)
By sss_congruence_v0 on F, E, G, F, G, C we get congruent_triangles(C, F, G, G, F, E)
By sss_congruence_v1 on G, E, F, C, G, F we get congruent_triangles(C, F, G, G, F, E)
By sss_anti_congruence_v0 on G, F, E, G, F, C we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_anti_congruence_v0 on F, G, C, F, G, E we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_anti_congruence_v1 on F, C, G, F, G, C we get anti_congruent_triangles(C, F, G, G, F, C)
By sss_anti_congruence_v0 on F, E, G, F, C, G we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_anti_congruence_v0 on E, G, F, C, G, F we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_anti_congruence_v1 on G, F, C, C, F, G we get anti_congruent_triangles(C, F, G, G, F, C)
By sas_congruence on G, F, C, E, F, G we get congruent_triangles(C, F, G, G, F, E)
By sss_anti_congruence_v0 on G, C, F, G, E, F we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_anti_congruence_v0 on F, G, C, F, G, E we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_congruence_v1 on C, G, F, G, E, F we get congruent_triangles(C, F, G, G, F, E)
By sss_congruence_v0 on F, G, C, F, E, G we get congruent_triangles(C, F, G, G, F, E)
By sas_anti_congruence on E, F, G, C, F, G we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_congruence_v1 on G, F, C, E, F, G we get congruent_triangles(C, F, G, G, F, E)
By sss_anti_congruence_v1 on C, G, F, E, G, F we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_congruence_v0 on E, G, F, G, C, F we get congruent_triangles(C, F, G, G, F, E)
By sss_anti_congruence_v0 on G, F, E, G, F, C we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_anti_congruence_v1 on G, E, F, G, C, F we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_congruence_v0 on E, G, F, G, C, F we get congruent_triangles(C, F, G, G, F, E)
By sss_anti_congruence_v1 on F, C, G, F, G, C we get anti_congruent_triangles(C, F, G, G, F, C)
By sss_anti_congruence_v0 on E, G, F, C, G, F we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_anti_congruence_v1 on E, F, G, C, F, G we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_congruence_v1 on G, F, C, E, F, G we get congruent_triangles(C, F, G, G, F, E)
By sss_anti_congruence_v0 on E, G, F, C, G, F we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_anti_congruence_v0 on C, F, G, E, F, G we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_anti_congruence_v0 on F, G, C, F, G, E we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_anti_congruence_v0 on G, F, E, G, F, C we get anti_congruent_triangles(C, F, G, E, F, G)
By sas_anti_congruence on C, F, G, E, F, G we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_congruence_v1 on F, G, E, F, C, G we get congruent_triangles(C, F, G, G, F, E)
By sss_congruence_v0 on C, F, G, G, F, E we get congruent_triangles(C, F, G, G, F, E)
By sss_anti_congruence_v1 on F, C, G, F, E, G we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_congruence_v1 on C, G, F, G, E, F we get congruent_triangles(C, F, G, G, F, E)
By sss_anti_congruence_v1 on F, C, G, F, E, G we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_anti_congruence_v0 on F, G, C, F, G, E we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_anti_congruence_v0 on E, G, F, C, G, F we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_anti_congruence_v1 on E, F, G, C, F, G we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_anti_congruence_v0 on C, F, G, G, F, C we get anti_congruent_triangles(C, F, G, G, F, C)
By sss_anti_congruence_v1 on F, C, G, F, E, G we get anti_congruent_triangles(C, F, G, E, F, G)
By sas_congruence on E, F, G, G, F, C we get congruent_triangles(C, F, G, G, F, E)
By sss_congruence_v1 on E, F, G, G, F, C we get congruent_triangles(C, F, G, G, F, E)
By sss_anti_congruence_v1 on G, F, C, G, F, E we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_congruence_v1 on F, G, E, F, C, G we get congruent_triangles(C, F, G, G, F, E)
By sss_congruence_v1 on C, G, F, G, E, F we get congruent_triangles(C, F, G, G, F, E)
By sss_congruence_v1 on G, E, F, C, G, F we get congruent_triangles(C, F, G, G, F, E)
By sss_anti_congruence_v0 on F, G, C, F, C, G we get anti_congruent_triangles(C, F, G, G, F, C)
By sss_anti_congruence_v0 on E, G, F, C, G, F we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_anti_congruence_v1 on F, C, G, F, E, G we get anti_congruent_triangles(C, F, G, E, F, G)
By isosceles_triangle_properties on F, G, C we get distance(C, F) == distance(F, G), angle(F, G, C) == angle(G, C, F) mod 360
By sss_congruence_v1 on E, F, G, G, F, C we get congruent_triangles(C, F, G, G, F, E)
By sss_anti_congruence_v0 on C, F, G, E, F, G we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_anti_congruence_v0 on F, G, C, F, G, E we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_anti_congruence_v1 on F, G, E, F, G, C we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_congruence_v1 on G, E, F, C, G, F we get congruent_triangles(C, F, G, G, F, E)
By sss_congruence_v0 on G, C, F, E, G, F we get congruent_triangles(C, F, G, G, F, E)
By sss_anti_congruence_v1 on G, F, C, C, F, G we get anti_congruent_triangles(C, F, G, G, F, C)
By sss_anti_congruence_v0 on F, G, C, F, C, G we get anti_congruent_triangles(C, F, G, G, F, C)
By sss_anti_congruence_v0 on F, G, C, F, C, G we get anti_congruent_triangles(C, F, G, G, F, C)
By sas_congruence on G, F, E, C, F, G we get congruent_triangles(C, F, G, G, F, E)
By sss_congruence_v0 on G, C, F, E, G, F we get congruent_triangles(C, F, G, G, F, E)
By sss_congruence_v1 on G, F, C, E, F, G we get congruent_triangles(C, F, G, G, F, E)
By sss_anti_congruence_v1 on G, E, F, G, C, F we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_anti_congruence_v1 on G, F, C, G, F, E we get anti_congruent_triangles(C, F, G, E, F, G)
By sss_congruence_v0 on C, F, G, G, F, E we get congruent_triangles(C, F, G, G, F, E)
By sss_congruence_v1 on C, G, F, G, E, F we get congruent_triangles(C, F, G, G, F, E)
By sss_anti_congruence_v0 on C, F, G, G, F, C we get anti_congruent_triangles(C, F, G, G, F, C)
By perpendicular_bisector_sufficient_conditions on E, C, G, F we get Line(F, G) == perpendicular_bisector(C, E)
