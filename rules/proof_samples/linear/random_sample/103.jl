Assumptions:
A, B, C, D, E, F: Point
f: Line
c, d: Circle
distinct(A, B, C, D, E, F)
distinct(c, d)
A in c
B in c
C == midpoint(A, B)
D == center(c)
d == Circle(B, C, D)
E == center(d)
f == external_angle_bisector(A, D, E)
F in f, d

Embedding:
c := {"center": {"x": "-0.266102929830950907241771119515760801732540130615234375", "y": "0.230155420343837679997278655719128437340259552001953125"}, "radius_squared": "0.02173757676325598076072509456935222260653972625732421875"}
D := {"x": "-0.266102929830950907241771119515760801732540130615234375", "y": "0.230155420343837679997278655719128437340259552001953125"}
B := {"x": "-0.22631487062520254001756283471059571536322114971162631213477886952135688406316558031460427109810877498782234342347002030380985710210565503407716691525459623225275997366830847948308275503020164593847436355695450819037997227315657248082468990348502294919899455592773894176121033792121113081800166027619938233479452343827746738742256535835863354522380204820337708101532387903049778260696582238208564853619269530711391318144291744558665095351301405235384718249609487359412682433693852047529667150482894553528590119178848022082768992839931210322628578566899633349990688302849717703769759887187484869666371418250284901479637183489234512341245883298491607796329815214325374031623827115360915441549610895415448716870838604269741773104392864786217106148696196460561657688789423502203334235810705473537478740138651421537243826580670978339832072681913971307394552134763039167511388581696319379319289842150315404916765359916118408616670493264245394776102955461809326189302162183373906762641323525344547926440535218591608123258420256408645380913790618166585018730845200107734652985559840986965503085031125073455551004449332312374990598767569761336759342616074053853941796687201944787273709740035184136611396380205009927624796840293164027352846962439025559948157325512916030651180760920362122510623836346936891875309622778708390488607157856595309253370243295157385211547560103952460172716671483031309219916925987717284527098220425004068927111879309226980245154212251183630909553118746188785101596473685264020063684561735438762621204836062615622079925482716192428402825855799217173994983468670755555537244836955340164832720184320753284029343445430475696586874614108581819774060457136759981087362791351907843621716000730545490913904825031019041480311306391862517584767503833164638631306572911092452212099182206078269926750479715133225774878768096781959540084636995315453542178004172637801552778241847887858178609971011063431564950126809112550886681849448154711975707040403771626845212246082140377792314363302306918437", "y": "0.3721219202932829483080984340806648906405902902224667132136199216051951093017203932197148540751222382437152808591046179636412364812147393860265219297402935472089081866322169372162374773540239502996047875019283152145185607984435935018799969315043743236863763016155888475625079455280916090682568148292947370091584162276149350330477560726608394126870309174286757754432729558931406857046200552631806613177782441696985447415361661194629737701541269894294356924487621046111440827011808463878669166703964261904855025275231049169852787866348316484062429121637430891424861158769191838972481708766861955899054763944733266246628347891057939743627400982664237829655132932940856997743572894491409728585045676341803631441582880551852799600838408254005608566032226970235094484519656020720728750565859632103724107368150894361055106516867758823461750051502234825427798268142091181319114299150696061654302446215696624351602887402503808647850583611654969492768629207834769309573838156200856599562348149897318042029361662341629064603025456999414343958234389184255386554138315304003751325895208705863831800458938023567352281921398763097676360983508841383754617537371424832054233602164225652589470299207242281912489378089038915460855626316186967981206116202783021297863221285286374457980713233125745742219412954663639386793883959839762627231020253004457448151574451850872520410670419368210970670230459988647120423868717245403810078387837017978900328234533632850113272622293605243340320868748522065458342714731816307202510275696913201877036578340218778594480919873614422154829506091590247292874185455043887830955995217679020241588137767527296835876275721980430544757730221147425593631231353061599356921980419144197094392444513903760033003024020174074008191848985203868310275917125231242822682383138533831198896836020492259104864743379125411203458441322660001477447662200490765068479204588112482086187990023674725185834877199761079821310282725067170739606232248834772978991503915176442517685219437244839474309403990708471347"}
A := {"x": "-0.40677022669211426908795049876419806373144992527375305411556685121285244287673068408709396729578830209946539519828203717002805814241257820168302816623738502293402631364359843245167327310334427838647976838011724261445099614281688346328495718254410707938405266525664376049864721666405889070890843393007004394382824072228306532492108479223037626951647137163822279087918164769114854425931072459759427166687489215136925064811714286186924066285554482828873779884336008911773610541799325415906260546378829704543143291408964247758113271910987108416051549999157988169275270170372864032662987296685932501289765734438699676814292090432545916824467374794711083055750988590502664623420741692979483385263591917188847846502014651217201994713756030982243288161066371876689861869635560376682092413686254114185924904738727643299894586561696689584076784037866601285580153004557468723887181497852397659278654661356488114582077171970994905833295271890347988554663399285095925786193748739521704169885189097927322533630281953154498587617752997600280080686756209683520590137054573791182642902251413263061743101551327762361739175463289472102813018565310726799844805003897518695297811932471485474885081342073835291507642677673814261709513379579472097802895643646802938796296981527966651523645458690683560035087398752059494870580998449090550174746464521567210425641926754882744372793113002480368929412971440418883862872571887696909443359646600850275393353155045558540346027269299491311359559840919154356828259813272734142699910205621547987056562969458966290405174577388795885551474331409398974567873470441556607002234634272252168581561764281828687620156862137723088821801798202436437788522869048249197135042953321797333204115973303865085471071881871072725792890629910032688944836230008481227756109197361176437090437858690139409571037786718651734917968296809488056774358945233705557454120851627136944583861122066455096811797904488242418674223946284300003504808072431945146236263635976353732736910908012289127604511055567422490694", "y": "0.27431748955520187043075557644341655901357873748828210599052949280179062623935120403861782163795339870506533419739378987609083354255007739587217187358976993825576720397212532374402413365609562501106121602732063959887928915697905326122950216224224090624155127214338802014679426883488496329365144642302534484450247490782859965182460945730584015623371634014042762812166011233461692549768202099438762397903722276544302716089894804739220868669685999495634794641847590042112148061880155091525773348722079271626124440304366228389974667031482551375642183058310611409722562986341400499662649088049719560967926425315488873014763206779847063891270415375770025149978133883594070411208030469337537042722667537393860894715281583406734865741128102019644759045431368813564429319183669321154141027292343093223009499038669429411364864915347284583888408458107514821474408093894233185755609185418306434984316502920249713960243590117822569685702067449755179139235570517104936701556336675165271582313794700366183934796920845686394360003313319074631127406658907852490730647647539189671126620970818949359595887681039876124630689700856392173875945833039532474970007564758934824090680142583252596491654600400247230723613022666032227474925992851918048548605098175464753195662129150701096178879670560539775903582263015882538426079252107594896105326870811931180008557468986508042750990169873091184166170537244151430312434571812484119454214065967196177746543007793922007507321822782858771758655622000481193338132102014153247934722361360349444331687612301857181649895298923879774786785750730203277163636888990349090407902551590875562681816984472997814588997420272410819630217160766581794751561939671254907847511130769957591797212183424180111975667369859957045495889886720047550310845443661052690985653241996150122009866930890991399837272080238677668751910302686293704402561639355468386187199695208648256557028426049075770744654568923900316920674504754739330605958912788170887801069650981824350089491659281372917119844791124160814451"}
C := {"x": "-0.31654254865865840455275666673739688954733553749268968312517286036710466346994813220084911919694853854364386931087602873691895762225911661788009754074599062759339314365595345596737801406677296216247706596853587540241548420798672797205482354301456501429152361059219135112992877729263501076345504710313471313931138208028026635617182507529450490737013670992079993594725276336082316343313827348983996010153379372924158191478003015372794580818427944032129249066972748135593146487746588731717963848430862129035866705293906134920441132375459159369340064283028810759632979236611290868216373591936708685478068576344492289146964636960890214582856629046601345426040401902414019327522284404170199413406601406302148281686426627743471883909074447884230197154881284168625759779212491939442713324748479793861701822438689532418569206571183833961954428359890286296487352569660253945699285039774358519298972251753401759749421265943556657224982882577296691665383177373452625987747955461447805466263256311635935230035408585873053355438086627004462730800273413925052804433949886949458647943905627125013623093291226417908645089956310892238901808666440244068302073809985786274619804309836715131079395541054509714059519528939412094667155109936318062577871303042914249372227153520441341087413109805522841272855617549498193372945310613899470331676811189081259839506085025020064792170336553216414551064821461725096541394748937707096985228933512927172160232517177392760295590740775337471134556479832671570964928143478999081381797383678493374838883902760790956242550030052494156977150093604308074281428469556156081269739735613796166707140974301290985824750153784099392704338206155509128781291663092504589111202872336852588412915987017205288192488353451045883636600968150947603264801866920822933193707885136134444651268520448108839748894133216892480346423532453135008157221791114510505498149427899887373068319681957171477495203937749652925119587036546706277195744960940049929105985338190062679791061577047214752698412709434864704566", "y": "0.3232197049242424093694270052620407248270845138553744096020747072034928677705357986291663378565378184743903075282492039198660350118824083909493469016650317427323376953021711304801308055050597876553330017646244774066989249777113233815547495468733076149639637868794884338546511071814882861809541306261600409268304455677217673424361827649833397844603736287845517017824665341138788056011510381287841426484077334675707859512175570834275912284254934921928918194336190025161327816599911986515623250788086094533733734652833836004425127284748285810813323713734246016198558728701665944469373308785916955997923703238141076774052334284521323066377221260120620172326473160650132019432187970712581716428656215040594860456555519446263143087475609227985042235287681925795768708219011476418071426647546970713012528636008918651095796504201243640925295448656493153787619538765757249947337608846263352576367048253860797873813623207143032808210395178315243703346093129772631489864735911858691878896863809966968217754526873455134250301678394453438728349450139984752229809451534611485431993996145300399895694613521005589907675445742201157531977783406397315625809146923659157231650808211275456119317879623633502492425340177821069104174112800689386418033313010164748308714717100178242037934340144589861666288819628125946614700904585299626118881853667098787724503660675250838397754843703338664693643642092201895075833662949246907877749897216868798337491267656512525432002402285945560258093215474285092396077962466615815997991255916474073155102669785202248379735224883001199816754040582305287504618937177039398435873125188383288254884918107413539147388008874610756253889723148902802534393712660093545070836546748069978137056831428160885615284880503084889278890418828604311670680230745668255960623853669074421699941764554795699544295975701496589039324735795644685958851913068018801843599587054488653870945416314291151130150167046075555756688866600270551900101061763825930879549234506679438763317192682691065593146941551562276396"}
d := {"center": {"x": "-0.24620890022807672362966697711317825854788064016343034356738943476067844203158279015730213554905438749391117171173501015190492855105282751703858345762729811612637998683415423974154137751510082296923718177847725409518998613657828624041234495174251147459949727796386947088060516896060556540900083013809969116739726171913873369371128267917931677261190102410168854050766193951524889130348291119104282426809634765355695659072145872279332547675650702617692359124804743679706341216846926023764833575241447276764295059589424011041384496419965605161314289283449816674995344151424858851884879943593742434833185709125142450739818591744617256170622941649245803898164907607162687015811913557680457720774805447707724358435419302134870886552196432393108553074348098230280828844394711751101667117905352736768739370069325710768621913290335489169916036340956985653697276067381519583755694290848159689659644921075157702458382679958059204308335246632122697388051477730904663094651081091686953381320661762672273963220267609295804061629210128204322690456895309083292509365422600053867326492779920493482751542515562536727775502224666156187495299383784880668379671308037026926970898343600972393636854870017592068305698190102504963812398420146582013676423481219512779974078662756458015325590380460181061255311918173468445937654811389354195244303578928297654626685121647578692605773780051976230086358335741515654609958462993858642263549110212502034463555939654613490122577106125591815454776559373094392550798236842632010031842280867719381310602418031307811039962741358096214201412927899608586997491734335377777768622418477670082416360092160376642014671722715237848293437307054290909887030228568379990543681395675953921810858000365272745456952412515509520740155653195931258792383751916582319315653286455546226106049591103039134963375239857566612887439384048390979770042318497657726771089002086318900776389120923943929089304985505531715782475063404556275443340924724077355987853520201885813422606123041070188896157181651153459219", "y": "0.30113867031856031415268854489989666399042492111220991910680996080259755465086019660985742703756111912185764042955230898182061824060736969301326096487014677360445409331610846860811873867701197514980239375096415760725928039922179675093999846575218716184318815080779442378125397276404580453412840741464736850457920811380746751652387803633041970634351545871433788772163647794657034285231002763159033065888912208484927237076808305973148688507706349471471784622438105230557204135059042319393345833519821309524275126376155245849263939331741582420312145608187154457124305793845959194862408543834309779495273819723666331233141739455289698718137004913321189148275664664704284988717864472457048642925228381709018157207914402759263998004192041270028042830161134851175472422598280103603643752829298160518620536840754471805275532584338794117308750257511174127138991340710455906595571495753480308271512231078483121758014437012519043239252918058274847463843146039173846547869190781004282997811740749486590210146808311708145323015127284997071719791171945921276932770691576520018756629476043529319159002294690117836761409606993815488381804917544206918773087686857124160271168010821128262947351496036211409562446890445194577304278131580934839906030581013915106489316106426431872289903566165628728711097064773318196933969419799198813136155101265022287240757872259254362602053352096841054853351152299943235602119343586227019050391939185089894501641172668164250566363111468026216701604343742610327291713573659081536012551378484566009385182891701093892972404599368072110774147530457951236464370927275219439154779976088395101207940688837636484179381378609902152723788651105737127968156156765307996784609902095720985471962222569518800165015120100870370040959244926019341551379585626156214113411915692669155994484180102461295524323716895627056017292206613300007387238311002453825342396022940562410430939950118373625929174385998805399106551413625335853698031161244173864894957519575882212588426097186224197371547019953542356735"}, "radius_squared": "0.0054343941908139951901812736423380556516349315643310546875000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"}
E := {"x": "-0.24620890022807672362966697711317825854788064016343034356738943476067844203158279015730213554905438749391117171173501015190492855105282751703858345762729811612637998683415423974154137751510082296923718177847725409518998613657828624041234495174251147459949727796386947088060516896060556540900083013809969116739726171913873369371128267917931677261190102410168854050766193951524889130348291119104282426809634765355695659072145872279332547675650702617692359124804743679706341216846926023764833575241447276764295059589424011041384496419965605161314289283449816674995344151424858851884879943593742434833185709125142450739818591744617256170622941649245803898164907607162687015811913557680457720774805447707724358435419302134870886552196432393108553074348098230280828844394711751101667117905352736768739370069325710768621913290335489169916036340956985653697276067381519583755694290848159689659644921075157702458382679958059204308335246632122697388051477730904663094651081091686953381320661762672273963220267609295804061629210128204322690456895309083292509365422600053867326492779920493482751542515562536727775502224666156187495299383784880668379671308037026926970898343600972393636854870017592068305698190102504963812398420146582013676423481219512779974078662756458015325590380460181061255311918173468445937654811389354195244303578928297654626685121647578692605773780051976230086358335741515654609958462993858642263549110212502034463555939654613490122577106125591815454776559373094392550798236842632010031842280867719381310602418031307811039962741358096214201412927899608586997491734335377777768622418477670082416360092160376642014671722715237848293437307054290909887030228568379990543681395675953921810858000365272745456952412515509520740155653195931258792383751916582319315653286455546226106049591103039134963375239857566612887439384048390979770042318497657726771089002086318900776389120923943929089304985505531715782475063404556275443340924724077355987853520201885813422606123041070188896157181651153459219", "y": "0.30113867031856031415268854489989666399042492111220991910680996080259755465086019660985742703756111912185764042955230898182061824060736969301326096487014677360445409331610846860811873867701197514980239375096415760725928039922179675093999846575218716184318815080779442378125397276404580453412840741464736850457920811380746751652387803633041970634351545871433788772163647794657034285231002763159033065888912208484927237076808305973148688507706349471471784622438105230557204135059042319393345833519821309524275126376155245849263939331741582420312145608187154457124305793845959194862408543834309779495273819723666331233141739455289698718137004913321189148275664664704284988717864472457048642925228381709018157207914402759263998004192041270028042830161134851175472422598280103603643752829298160518620536840754471805275532584338794117308750257511174127138991340710455906595571495753480308271512231078483121758014437012519043239252918058274847463843146039173846547869190781004282997811740749486590210146808311708145323015127284997071719791171945921276932770691576520018756629476043529319159002294690117836761409606993815488381804917544206918773087686857124160271168010821128262947351496036211409562446890445194577304278131580934839906030581013915106489316106426431872289903566165628728711097064773318196933969419799198813136155101265022287240757872259254362602053352096841054853351152299943235602119343586227019050391939185089894501641172668164250566363111468026216701604343742610327291713573659081536012551378484566009385182891701093892972404599368072110774147530457951236464370927275219439154779976088395101207940688837636484179381378609902152723788651105737127968156156765307996784609902095720985471962222569518800165015120100870370040959244926019341551379585626156214113411915692669155994484180102461295524323716895627056017292206613300007387238311002453825342396022940562410430939950118373625929174385998805399106551413625335853698031161244173864894957519575882212588426097186224197371547019953542356735"}
f := {"point": {"x": "-0.266102929830950907241771119515760801732540130615234375", "y": "0.230155420343837679997278655719128437340259552001953125"}, "direction": {"x": "-1.2239515100777095580329177668995554493259377095597214024663659835991469095132709329599736778625716995938819992320084038828704225690762874223999374884433964731679862496546373096604514395506576370043006363577049755152390206894492225756052873205979809682120090599779576515576521074853423870039723751319346054778265087177830193535114247986536864144351871944015332513201208160634473253209568186510715747553190352370648817669114414902901167614156806143577390528726492721152208034096838956179443576380351001792788930063501812104523098627501566135664282293080890527132946875903613401501641110334278069470783411804218017811213114868636114647078457454586571128096018857741168155345361453456644923235188197738833133305020288083145467745799378397094780420522732009158106670470562268391993551526223611012021460863378454112877820155656597339424083811035285954018678091325964125089829583692152822382762290388885827857040140621152338395396238091271541041904772933747393309269214793355698211024822370157567752589743236596724423036427043361837735231182314033297037067228482571807249120062271794173297341367033797555964617009123553898731706016527596128121142192472448587211674273978021027418606579689168853302853033522817071960916545708912923438845470943508668245205259357299736727579516742632333073161952056207274710147373857507585568229861216556442774596358868562011657902247596788237851246218987915520088494413760990021162722851018160009504650449794007961832467122405335601625430742981936785527212531554476212343753815385968327638229050279248394079007915879708823137917471171840522445281070493321042138498687587860691193228799030955077906910259092178816899867610647367941407048810709732019043041074713436413923187478489685335736577036663560721908442177816194258539947810923330132509672207888257513411859448166243585669584985967380333566199957556810156538768008399493683663282830168944739627810029639775160324522018727668456980558056231638872251342051625105761723403863009094579769604905948619905009206180453652408737", "y": "-0.66336562850358482930082431327287268253405425277781093246363307242902091953464299629995777193207879051869432979257804532165261843112251132476201238107018929306562860834224877284011258430065523424101986343765280376074176460641439786776862056230858170529242832232452618947537861289581952179283772441957216937851683074855831303346841960620017423829629442095039017078778420806266057717039267345524346103374178675886932033962121512337425536267298468683774930245085806917549773399770595658284596921161537090207320497852202860970502200153166218219171950960582141981657464183984170752549915796315959737916008301648654937052990514975104685283927143680125739113269516150652633154400136800383991470047735792525857144278161079816749644022026665490113043468997771588224922242623843174771738701741403320438193415562263034932346413615852454210330955539458706544594901236118602380357718387154484496419179018283556675905736745296236833630175632124604149409310999912203959492086100225819741491927088950172599653898716187383207707503743483363116155294298917733651865211404599469893268830634256704245739597772088727977249210954362229208454710560897559054285470597293844246284128137848700757307981187225648296743179932993842867335338031735615222964184497211110600152379855103932845313631085939701030444925294953539787024627481828116909684216602563156022778206054023715197397066367570579501588068666511104730580957866605069523763810773803754595915879910370748512084960068838188338995116904765056575266646295952916516264532392509576440754464691539800914755126539068989773119143615926586116614995765722124785124518474328559841298014059241663667233064675344639429300651704087077284839092826840841886374920657232048752313325774903557903702284613060942994774733613923260034577598715971919587404560704331201392048414004772922804903807171269368952573680017112522080370399881471624024754918950735103761783523999165959262519931013258771619469845848705417668136312406587200742167138982877312173826945542017688532011411685636887712487"}}
F := {"x": "-0.17587525179749504270657728748895962754842574283417100400960600915425222059321744811375515190116023644417847411259399156689089947984653841619706937450860560465936683001235502351570474096342868377599729758841863278796448806516984450876986636047045793490747094533554759063128156062857612005454661317306466919548314135799720103125074028306412863785366533828257714506807111566967461917382754889224568843465890157787233126666288729185870514532873461203255469182636739223819535945947263315811703302052032424492723413884941887162327860464472050953288514283870822590357709066238426835553386295250776184188302841905792612332672546528344297758389254251890262370289413311911354704101542711190716028143009489113300435184411976526269889195318416901986908993814912291935897909576931562760620911062225679675776917699961889118674620009487144377877644322023685010907199565102785221812103541921960860020317590396913645167344093972561751391687610686948703110719778088356700201554206721926101296378067213708612696405126632718554767820333629404182650113517204241532214296895313158276005041654213861951879991739898655546905914493021420136088790101129517268457268806088267579321992377365229656194314198980674422551876851265597832957641730356845964774975659396111310575930171992474689563767651114839281237768218797438698502364312164808920156930346667514049413864158270137320419377223550736045621651850021306212678522177050010187541869286912076896766879362131834219949563471475846159774996638913517214136668330206264938681887178056945387782320933301824665837375452663698271425675762194909099713554999114599474267505101341543998125579210019462298204593291646376303882536407953072690992768794044255391976159919015055255208800013713340202721416471579973157843710338240914914319965636912341705437598687774958007560830661757969430177856346498240745428455235643646951382862845880804948044028576272750428484458559890716380683406033261410506445363090262406273690936888508104782869721702213708947054150669034925625093901653867442213872", "y": "0.2790576357128782189359500845377526031537653283690454286115452144017022415311845945905485162185844197693249733308554140437752014693323309950771750280752618044765704913300458067361066718489641626442717857373038378078196358207322701203252473846310667087224125147361004137078568383466033228873026842031346960823279706598931676906115733076774996282266572886441240736608064217792618801034690171343965186693705107021277587903186090360353825417286334972365438730151431020950113010411896477363045915915878167371121290622397213165427660581600030673249105407903184875226302430067525894503108399980944999901131060706592189472576013606536616677250179722543617657328659772290724978311384923778828012156389461301208770985027361105589656513362799026020566330744545044439325776300644544302657323918312661390711578732141975709959310012666515182536454602845741671640178729376333931371776690304432709077935397961835826477789264195360775839640188433339725789422536078062137819709102244342164720665484339930349824274834788886494814301347062545975615608784249199503156744686780692518319331899063405463936105845417017977444606475656561940144383200102444068128808390447765674822582793952950196470152419583608779420064037911217846356681513515497581563172803192618272989148504185108132420046373088535884075930593326537692772092979374540136508349166585905669723647913776600034122655826716029546277026588367786752044590205767998495932328490620149180562836966877120324681270220007659683082227653274236973062264752265200491204519019780439128721933908555016530214745694990613222338075465509284959788255248278004489395082870029295731986703219660113757688488266847369674290868007072244623059237518692968054286085433671074218957335613085742874417718143517089184729301430156599556639595686379562986862058529469459409498955071465696559560568767677628822164133705527015315518595749132471963224879617533623828215242573709383574055684710153685524064621416124796618839505170485008842099442269408497003754368026754553773881162462439146194951"}

Need to prove:
collinear(C, E, F)

Proof:
By line_definition on D, F, f we get f == Line(D, F)
By circle_definition on B, D, F, d we get d == Circle(B, D, F)
By circle_definition on C, B, F, d we get d == Circle(B, C, F)
By circle_definition on D, F, C, d we get d == Circle(C, D, F)
By between_imply_not_between on A, C, B we get collinear_and_not_between(B, A, C)
By between_imply_not_between on B, C, A we get collinear_and_not_between(A, B, C)
By circle_radius_v0_r on C, d we get radius(d) == distance(C, center(d))
By circle_radius_v0_r on D, d we get radius(d) == distance(D, center(d))
By circle_radius_v0_r on B, c we get radius(c) == distance(B, center(c))
By circle_radius_v0_r on F, d we get radius(d) == distance(F, center(d))
By circle_radius_v0_r on B, d we get radius(d) == distance(B, center(d))
By circle_radius_v0_r on A, c we get radius(c) == distance(A, center(c))
By center_not_on_circle on c we get center(c) not in c
By center_not_on_circle on d we get center(d) not in d
By in_imply_concyclic on B, C, D, F we get concyclic(B, C, D, F)
By line_circle_intersection_has_at_most_two_points_0 on B, A, C, c we get C not in c
By angle_bisector_draw_angle_v1 on A, D, E we get exists(Line(A, D), Line(D, E))
By angle_bisector_draw_angle_v1 on E, D, A we get exists(Line(A, D), Line(D, E))
By line_circle_intersection_has_at_most_two_points_0 on C, B, A, d we get A not in d
By power_of_a_point_in_circle on C, d we get 0 == power_of_a_point(C, d)
By power_of_a_point_in_circle on B, d we get 0 == power_of_a_point(B, d)
By power_of_a_point_in_circle on A, c we get 0 == power_of_a_point(A, c)
By power_of_a_point_on_circle on D, d we get 0 == power_of_a_point(D, d)
By power_of_a_point_in_circle on B, c we get 0 == power_of_a_point(B, c)
By power_of_a_point_on_circle on F, d we get 0 == power_of_a_point(F, d)
By angle_to_center on C, B, F, d we get 2 * angle(C, B, F) == angle(C, center(d), F) mod 360
By angles_on_chord_v1 on B, F, D, C, d we get angle(B, C, F) == angle(B, D, F) mod 360
By angles_on_chord_v0 on F, B, C, D, d we get angle(F, C, B) == angle(F, D, B) mod 360
By angles_on_chord_v1 on F, D, B, C, d we get angle(F, B, D) == angle(F, C, D) mod 360
By angle_to_center on F, B, C, d we get 2 * angle(F, B, C) == angle(F, center(d), C) mod 360
By angles_on_chord_v3 on B, D, C, F, d we get angle(B, C, D) == angle(B, F, D) + 180 mod 360
By angles_on_chord_v2 on C, F, B, D, d we get angle(C, B, F) == angle(C, D, F) + 180 mod 360
By angles_on_chord_v1 on D, C, B, F, d we get angle(D, B, C) == angle(D, F, C) mod 360
By angles_on_chord_v0 on C, D, B, F, d we get angle(C, B, D) == angle(C, F, D) mod 360
By angles_on_chord_v2 on B, D, F, C, d we get angle(B, F, D) == angle(B, C, D) + 180 mod 360
By angles_on_chord_v0 on D, F, B, C, d we get angle(D, B, F) == angle(D, C, F) mod 360
By angles_on_chord_v0 on B, C, F, D, d we get angle(B, D, C) == angle(B, F, C) mod 360
By angles_on_chord_v3 on F, C, B, D, d we get angle(F, B, C) == angle(F, D, C) + 180 mod 360
By angles_on_chord_v2 on F, C, D, B, d we get angle(F, D, C) == angle(F, B, C) + 180 mod 360
By angles_on_chord_v3 on C, F, D, B, d we get angle(C, D, F) == angle(C, B, F) + 180 mod 360
By angles_on_chord_v1 on C, B, F, D, d we get angle(C, D, B) == angle(C, F, B) mod 360
By angles_on_chord_v2 on D, B, C, F, d we get angle(D, C, B) == angle(D, F, B) + 180 mod 360
By angle_to_center on F, D, B, d we get 2 * angle(F, D, B) == angle(F, center(d), B) mod 360
By angle_to_center on B, F, C, d we get 2 * angle(B, F, C) == angle(B, center(d), C) mod 360
By angle_to_center on B, C, F, d we get 2 * angle(B, C, F) == angle(B, center(d), F) mod 360
By angles_on_chord_v3 on D, B, F, C, d we get angle(D, F, B) == angle(D, C, B) + 180 mod 360
By angle_to_center on C, D, F, d we get 2 * angle(C, D, F) == angle(C, center(d), F) mod 360
By angle_to_center on D, C, F, d we get 2 * angle(D, C, F) == angle(D, center(d), F) mod 360
By angle_to_center on C, F, D, d we get 2 * angle(C, F, D) == angle(C, center(d), D) mod 360
By angle_to_center on F, C, B, d we get 2 * angle(F, C, B) == angle(F, center(d), B) mod 360
By angle_to_center on C, F, B, d we get 2 * angle(C, F, B) == angle(C, center(d), B) mod 360
By angle_to_center on C, D, B, d we get 2 * angle(C, D, B) == angle(C, center(d), B) mod 360
By angle_to_center on C, B, D, d we get 2 * angle(C, B, D) == angle(C, center(d), D) mod 360
By angle_to_center on D, B, C, d we get 2 * angle(D, B, C) == angle(D, center(d), C) mod 360
By angle_to_center on F, B, D, d we get 2 * angle(F, B, D) == angle(F, center(d), D) mod 360
By angle_to_center on B, C, D, d we get 2 * angle(B, C, D) == angle(B, center(d), D) mod 360
By angle_to_center on D, F, B, d we get 2 * angle(D, F, B) == angle(D, center(d), B) mod 360
By angle_to_center on D, F, C, d we get 2 * angle(D, F, C) == angle(D, center(d), C) mod 360
By angle_to_center on F, C, D, d we get 2 * angle(F, C, D) == angle(F, center(d), D) mod 360
By angle_to_center on B, D, C, d we get 2 * angle(B, D, C) == angle(B, center(d), C) mod 360
By angle_to_center on B, D, F, d we get 2 * angle(B, D, F) == angle(B, center(d), F) mod 360
By angle_to_center on B, F, D, d we get 2 * angle(B, F, D) == angle(B, center(d), D) mod 360
By angle_to_center on D, C, B, d we get 2 * angle(D, C, B) == angle(D, center(d), B) mod 360
By angle_to_center on D, B, F, d we get 2 * angle(D, B, F) == angle(D, center(d), F) mod 360
By angle_to_center on F, D, C, d we get 2 * angle(F, D, C) == angle(F, center(d), C) mod 360
By collinear_definition on C, A, B we get A in Line(B, C), B in Line(A, C), Line(A, C) == Line(B, C), 0 == 2 * angle(A, C, B) mod 360
By log_of_2_times_distance on B, A, A, C we get log(distance(A, B)) == 0.6931471805599453 + log(distance(A, C))
By collinear_definition on B, C, A we get C in Line(A, B), A in Line(B, C), Line(A, B) == Line(B, C), 0 == 2 * angle(C, B, A) mod 360
By collinear_definition on C, B, A we get B in Line(A, C), A in Line(B, C), Line(A, C) == Line(B, C), 0 == 2 * angle(B, C, A) mod 360
By collinear_definition on A, C, B we get C in Line(A, B), B in Line(A, C), Line(A, B) == Line(A, C), 0 == 2 * angle(C, A, B) mod 360
By collinear_definition on A, B, C we get B in Line(A, C), C in Line(A, B), Line(A, B) == Line(A, C), 0 == 2 * angle(B, A, C) mod 360
By log_of_2_times_distance on B, A, B, C we get log(distance(A, B)) == 0.6931471805599453 + log(distance(B, C))
By collinear_definition on B, A, C we get A in Line(B, C), C in Line(A, B), Line(A, B) == Line(B, C), 0 == 2 * angle(A, B, C) mod 360
By isosceles_triangle_properties on C, B, A we get distance(A, C) == distance(B, C), angle(B, A, C) == angle(C, B, A) mod 360
By isosceles_triangle_properties on C, A, B we get distance(A, C) == distance(B, C), angle(A, B, C) == angle(C, A, B) mod 360
By between_implies_angles on B, C, A we get 180 == angle(B, C, A) mod 360, 0 == angle(C, A, B) mod 360, 0 == angle(A, B, C) mod 360
By between_implies_angles on A, C, B we get 180 == angle(A, C, B) mod 360, 0 == angle(C, B, A) mod 360, 0 == angle(B, A, C) mod 360
By median_definition on E, A, B, Line(C, E) we get Line(C, E) == median(E, A, B)
By median_definition on D, A, B, Line(C, D) we get Line(C, D) == median(D, A, B)
By median_definition on F, B, A, Line(C, F) we get Line(C, F) == median(F, A, B)
By same_angle_v2 on C, A, B, F we get angle(A, C, F) == angle(B, C, F) + 180 mod 360
By same_angle_v0 on B, C, A, D we get angle(A, B, D) == angle(C, B, D) mod 360
By same_angle_v3 on C, A, B, D we get angle(A, C, D) == angle(B, C, D) + 180 mod 360
By same_angle_v0 on B, C, A, F we get angle(A, B, F) == angle(C, B, F) mod 360
By different_points_v1 on E, B we get 0 != distance(B, E)
By different_points_v1 on D, B we get 0 != distance(B, D)
By different_points_v1 on C, D we get 0 != distance(C, D)
By different_points_v1 on C, F we get 0 != distance(C, F)
By different_points_v1 on F, E we get 0 != distance(E, F)
By different_points_v1 on A, D we get 0 != distance(A, D)
By different_points_v1 on B, F we get 0 != distance(B, F)
By different_points_v1 on E, D we get 0 != distance(D, E)
By different_points_v1 on F, D we get 0 != distance(D, F)
By different_points_v1 on C, E we get 0 != distance(C, E)
By same_angle_v0 on B, A, C, E we get angle(A, B, E) == angle(C, B, E) mod 360
By same_angle_v3 on C, A, B, E we get angle(A, C, E) == angle(B, C, E) + 180 mod 360
By same_angle_v1 on A, C, B, D we get angle(B, A, D) == angle(C, A, D) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on A, D, B we get A not in Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on F, D, A we get F not in Line(A, D)
By reverse_direction on C, F we get 180 == direction(C, F) - direction(F, C) mod 360
By reverse_direction on B, D we get 180 == direction(B, D) - direction(D, B) mod 360
By reverse_direction on B, C we get 180 == direction(B, C) - direction(C, B) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on E, B, F we get E not in Line(B, F)
By reverse_direction on C, A we get 180 == direction(C, A) - direction(A, C) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on D, B, C we get D not in Line(B, C)
By reverse_direction on B, F we get 180 == direction(B, F) - direction(F, B) mod 360
By reverse_direction on D, F we get 180 == direction(D, F) - direction(F, D) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on F, B, A we get F not in Line(A, B)
By reverse_direction on A, C we get 180 == direction(A, C) - direction(C, A) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on B, F, C we get B not in Line(C, F)
By not_in_line_equivalent_to_not_collinear_v0_r on D, C, E we get D not in Line(C, E)
By not_in_line_equivalent_to_not_collinear_v0_r on B, C, E we get B not in Line(C, E)
By not_in_line_equivalent_to_not_collinear_v0_r on A, B, E we get A not in Line(B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on A, E, F we get A not in Line(E, F)
By not_in_line_equivalent_to_not_collinear_v0_r on F, C, A we get F not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on A, F, C we get A not in Line(C, F)
By not_in_line_equivalent_to_not_collinear_v0_r on F, E, D we get F not in Line(D, E)
By reverse_direction on D, B we get 180 == direction(D, B) - direction(B, D) mod 360
By reverse_direction on B, A we get 180 == direction(B, A) - direction(A, B) mod 360
By reverse_direction on F, D we get 180 == direction(F, D) - direction(D, F) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on E, A, C we get E not in Line(A, C)
By reverse_direction on F, C we get 180 == direction(F, C) - direction(C, F) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on B, C, D we get B not in Line(C, D)
By reverse_direction on C, D we get 180 == direction(C, D) - direction(D, C) mod 360
By reverse_direction on C, B we get 180 == direction(C, B) - direction(B, C) mod 360
By reverse_direction on A, B we get 180 == direction(A, B) - direction(B, A) mod 360
By reverse_direction on F, B we get 180 == direction(F, B) - direction(B, F) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on C, F, D we get C not in Line(D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on D, C, F we get D not in Line(C, F)
By reverse_direction on D, C we get 180 == direction(D, C) - direction(C, D) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on F, D, C we get F not in Line(C, D)
By not_in_line_equivalent_to_not_collinear_v0_r on A, B, F we get A not in Line(B, F)
By not_in_line_equivalent_to_not_collinear_v0_r on C, E, D we get C not in Line(D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on A, D, E we get A not in Line(D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on A, D, F we get A not in Line(D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on E, A, B we get E not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on F, D, B we get F not in Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on F, B, E we get F not in Line(B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on C, F, B we get C not in Line(B, F)
By not_in_line_equivalent_to_not_collinear_v0_r on B, F, E we get B not in Line(E, F)
By not_in_line_equivalent_to_not_collinear_v0_r on C, B, E we get C not in Line(B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on C, B, D we get C not in Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on E, C, D we get E not in Line(C, D)
By not_in_line_equivalent_to_not_collinear_v0_r on C, D, A we get C not in Line(A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on D, A, C we get D not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on B, A, D we get B not in Line(A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on D, B, A we get D not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on E, F, D we get E not in Line(D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on E, A, D we get E not in Line(A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on D, B, F we get D not in Line(B, F)
By not_in_line_equivalent_to_not_collinear_v0_r on A, D, C we get A not in Line(C, D)
By not_in_line_equivalent_to_not_collinear_v0_r on F, B, C we get F not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on D, E, F we get D not in Line(E, F)
By not_in_line_equivalent_to_not_collinear_v0_r on E, B, C we get E not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on B, F, D we get B not in Line(D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on A, C, E we get A not in Line(C, E)
By reverse_direction on E, B we get 180 == direction(E, B) - direction(B, E) mod 360
By internal_angle_bisector_definition_v0_r on A, B, A, C we get Line(B, C) == internal_angle_bisector(A, C, A)
By reverse_direction on E, D we get 180 == direction(E, D) - direction(D, E) mod 360
By internal_angle_bisector_definition_v0_r on C, B, C, A we get Line(A, B) == internal_angle_bisector(C, A, C)
By radical_axis_definition_v0_r on B, d, c we get B in radical_axis(c, d)
By internal_angle_bisector_definition_v0_r on C, A, C, B we get Line(A, B) == internal_angle_bisector(C, B, C)
By reverse_direction on E, F we get 180 == direction(E, F) - direction(F, E) mod 360
By isosceles_triangle_midpoint on D, B, A we get midpoint(A, B) in median(D, A, B)
By internal_angle_bisector_definition_v0_r on B, A, B, C we get Line(A, C) == internal_angle_bisector(B, C, B)
By isosceles_triangle_properties on D, A, B we get distance(A, D) == distance(B, D), angle(A, B, D) == angle(D, A, B) mod 360
By reverse_direction on E, C we get 180 == direction(E, C) - direction(C, E) mod 360
By isosceles_triangle_properties on D, B, A we get distance(A, D) == distance(B, D), angle(B, A, D) == angle(D, B, A) mod 360
By internal_angle_bisector_definition_v0_r on B, C, B, A we get Line(A, C) == internal_angle_bisector(B, A, B)
By internal_angle_bisector_definition_v0_r on A, C, A, B we get Line(B, C) == internal_angle_bisector(A, B, A)
By isosceles_triangle_properties on E, C, B we get distance(B, E) == distance(C, E), angle(C, B, E) == angle(E, C, B) mod 360
By sss_anti_congruence_v0 on D, A, B, D, B, A we get anti_congruent_triangles(A, B, D, B, A, D)
By sss_anti_congruence_v0 on B, D, A, A, D, B we get anti_congruent_triangles(A, B, D, B, A, D)
By sss_anti_congruence_v0 on C, B, E, B, C, E we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v0 on C, B, E, B, C, E we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v1 on E, B, C, E, C, B we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v1 on B, A, D, A, B, D we get anti_congruent_triangles(A, B, D, B, A, D)
By perpendicular_bisector_sufficient_conditions on B, A, D, C we get Line(C, D) == perpendicular_bisector(A, B)
By sss_anti_congruence_v0 on D, A, B, D, B, A we get anti_congruent_triangles(A, B, D, B, A, D)
By sss_anti_congruence_v0 on C, B, E, B, C, E we get anti_congruent_triangles(B, C, E, C, B, E)
By sas_anti_congruence on C, E, B, B, E, C we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v1 on B, A, D, A, B, D we get anti_congruent_triangles(A, B, D, B, A, D)
By external_angle_bisector_definition_v0 on A, F, E, D we get 180 == angle(A, D, F) + angle(E, D, F) mod 360
By isosceles_triangle_properties on E, C, F we get distance(C, E) == distance(E, F), angle(C, F, E) == angle(E, C, F) mod 360
By sss_anti_congruence_v1 on D, B, A, D, A, B we get anti_congruent_triangles(A, B, D, B, A, D)
By sss_anti_congruence_v0 on E, C, B, E, B, C we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v0 on A, B, D, B, A, D we get anti_congruent_triangles(A, B, D, B, A, D)
By sss_anti_congruence_v0 on B, E, C, C, E, B we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v0 on B, D, A, A, D, B we get anti_congruent_triangles(A, B, D, B, A, D)
By sss_anti_congruence_v0 on E, C, B, E, B, C we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v0 on D, A, B, D, B, A we get anti_congruent_triangles(A, B, D, B, A, D)
By sss_anti_congruence_v0 on A, B, D, B, A, D we get anti_congruent_triangles(A, B, D, B, A, D)
By sss_anti_congruence_v1 on D, B, A, D, A, B we get anti_congruent_triangles(A, B, D, B, A, D)
By isosceles_triangle_properties on E, D, F we get distance(D, E) == distance(E, F), angle(D, F, E) == angle(E, D, F) mod 360
By isosceles_triangle_properties on E, F, D we get distance(D, E) == distance(E, F), angle(E, F, D) == angle(F, D, E) mod 360
By sss_anti_congruence_v1 on A, D, B, B, D, A we get anti_congruent_triangles(A, B, D, B, A, D)
By sss_anti_congruence_v1 on A, D, B, B, D, A we get anti_congruent_triangles(A, B, D, B, A, D)
By isosceles_triangle_properties on E, B, D we get distance(B, E) == distance(D, E), angle(B, D, E) == angle(E, B, D) mod 360
By sss_anti_congruence_v0 on D, A, B, D, B, A we get anti_congruent_triangles(A, B, D, B, A, D)
By sss_anti_congruence_v0 on B, D, A, A, D, B we get anti_congruent_triangles(A, B, D, B, A, D)
By sss_anti_congruence_v1 on E, B, C, E, C, B we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v1 on D, B, A, D, A, B we get anti_congruent_triangles(A, B, D, B, A, D)
By isosceles_triangle_properties on E, C, D we get distance(C, E) == distance(D, E), angle(C, D, E) == angle(E, C, D) mod 360
By sss_anti_congruence_v1 on C, E, B, B, E, C we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v0 on B, E, C, C, E, B we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v1 on E, B, C, E, C, B we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v0 on A, B, D, B, A, D we get anti_congruent_triangles(A, B, D, B, A, D)
By sss_anti_congruence_v1 on A, D, B, B, D, A we get anti_congruent_triangles(A, B, D, B, A, D)
By sss_anti_congruence_v1 on B, A, D, A, B, D we get anti_congruent_triangles(A, B, D, B, A, D)
By sss_anti_congruence_v1 on B, C, E, C, B, E we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v0 on B, E, C, C, E, B we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v1 on E, B, C, E, C, B we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v0 on B, D, A, A, D, B we get anti_congruent_triangles(A, B, D, B, A, D)
By sss_anti_congruence_v1 on E, B, C, E, C, B we get anti_congruent_triangles(B, C, E, C, B, E)
By sas_anti_congruence on B, E, F, F, E, B we get anti_congruent_triangles(B, E, F, F, E, B)
By sss_anti_congruence_v1 on C, E, B, B, E, C we get anti_congruent_triangles(B, C, E, C, B, E)
By isosceles_triangle_properties on E, F, B we get distance(B, E) == distance(E, F), angle(E, F, B) == angle(F, B, E) mod 360
By sss_anti_congruence_v0 on B, D, A, A, D, B we get anti_congruent_triangles(A, B, D, B, A, D)
By sss_anti_congruence_v1 on B, C, E, C, B, E we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v0 on D, A, B, D, B, A we get anti_congruent_triangles(A, B, D, B, A, D)
By sss_anti_congruence_v1 on B, A, D, A, B, D we get anti_congruent_triangles(A, B, D, B, A, D)
By sas_anti_congruence on D, E, F, F, E, D we get anti_congruent_triangles(D, E, F, F, E, D)
By isosceles_triangle_properties on E, B, F we get distance(B, E) == distance(E, F), angle(B, F, E) == angle(E, B, F) mod 360
By isosceles_triangle_properties on E, D, C we get distance(C, E) == distance(D, E), angle(D, C, E) == angle(E, D, C) mod 360
By isosceles_triangle_properties on E, D, B we get distance(B, E) == distance(D, E), angle(D, B, E) == angle(E, D, B) mod 360
By sss_anti_congruence_v0 on E, C, B, E, B, C we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v0 on A, B, D, B, A, D we get anti_congruent_triangles(A, B, D, B, A, D)
By sss_anti_congruence_v1 on B, A, D, A, B, D we get anti_congruent_triangles(A, B, D, B, A, D)
By sas_anti_congruence on D, E, C, C, E, D we get anti_congruent_triangles(C, D, E, D, C, E)
By sss_anti_congruence_v1 on C, E, B, B, E, C we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v1 on C, E, B, B, E, C we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v1 on B, C, E, C, B, E we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v0 on B, E, C, C, E, B we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v1 on B, A, D, A, B, D we get anti_congruent_triangles(A, B, D, B, A, D)
By sss_anti_congruence_v1 on A, D, B, B, D, A we get anti_congruent_triangles(A, B, D, B, A, D)
By sas_anti_congruence on F, E, D, D, E, F we get anti_congruent_triangles(D, E, F, F, E, D)
By sss_anti_congruence_v0 on C, B, E, B, C, E we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v0 on B, E, C, C, E, B we get anti_congruent_triangles(B, C, E, C, B, E)
By sas_anti_congruence on B, E, C, C, E, B we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v1 on D, B, A, D, A, B we get anti_congruent_triangles(A, B, D, B, A, D)
By sss_anti_congruence_v1 on D, B, A, D, A, B we get anti_congruent_triangles(A, B, D, B, A, D)
By isosceles_triangle_properties on E, B, C we get distance(B, E) == distance(C, E), angle(B, C, E) == angle(E, B, C) mod 360
By sss_anti_congruence_v1 on A, D, B, B, D, A we get anti_congruent_triangles(A, B, D, B, A, D)
By sas_anti_congruence on F, E, B, B, E, F we get anti_congruent_triangles(B, E, F, F, E, B)
By sss_anti_congruence_v0 on A, B, D, B, A, D we get anti_congruent_triangles(A, B, D, B, A, D)
By power_of_a_point_definition on A, B, C, d we get log(power_of_a_point(A, d)) == log(distance(A, B)) + log(distance(A, C))
By sss_anti_congruence_v1 on B, C, E, C, B, E we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v0 on E, C, B, E, B, C we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v1 on D, B, A, D, A, B we get anti_congruent_triangles(A, B, D, B, A, D)
By sss_anti_congruence_v0 on C, B, E, B, C, E we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v0 on B, D, A, A, D, B we get anti_congruent_triangles(A, B, D, B, A, D)
By sss_anti_congruence_v0 on E, C, B, E, B, C we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v1 on C, E, B, B, E, C we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v1 on A, D, B, B, D, A we get anti_congruent_triangles(A, B, D, B, A, D)
By sss_anti_congruence_v0 on B, E, C, C, E, B we get anti_congruent_triangles(B, C, E, C, B, E)
By isosceles_triangle_properties on E, F, C we get distance(C, E) == distance(E, F), angle(E, F, C) == angle(F, C, E) mod 360
By sss_anti_congruence_v0 on A, B, D, B, A, D we get anti_congruent_triangles(A, B, D, B, A, D)
By sas_anti_congruence on C, E, D, D, E, C we get anti_congruent_triangles(C, D, E, D, C, E)
By sss_anti_congruence_v0 on C, B, E, B, C, E we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v0 on E, C, B, E, B, C we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v1 on B, C, E, C, B, E we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v1 on C, E, B, B, E, C we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v1 on B, C, E, C, B, E we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v1 on E, B, C, E, C, B we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v0 on D, A, B, D, B, A we get anti_congruent_triangles(A, B, D, B, A, D)
By power_of_a_point_definition on C, A, B, c we get log(power_of_a_point(C, c)) == log(distance(A, C)) + log(distance(B, C))
By radical_axis_is_perpendicular_to_center_line on radical_axis(c, d), c, d we get perpendicular(radical_axis(c, d), Line(center(c), center(d)))
By perpendicular_line_definition on D, Line(C, D), Line(A, B) we get Line(C, D) == perpendicular_line(D, Line(A, B))
By perpendicular_line_definition on C, Line(A, B), Line(C, D) we get Line(A, B) == perpendicular_line(C, Line(C, D))
By perpendicular_line_definition on A, Line(A, B), Line(C, D) we get Line(A, B) == perpendicular_line(A, Line(C, D))
By perpendicular_line_definition on B, Line(A, B), Line(C, D) we get Line(A, B) == perpendicular_line(B, Line(C, D))
By perpendicular_direction_conditions_v0_r on C, D, C, B we get 180 == 2 * direction(C, D) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on B, C, D, C we get 180 == 2 * direction(B, C) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on C, D, B, A we get 180 == 2 * direction(C, D) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on C, A, C, D we get 180 == 2 * direction(C, A) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on D, C, B, C we get 180 == 2 * direction(D, C) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on C, A, D, C we get 180 == 2 * direction(C, A) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on A, B, D, C we get 180 == 2 * direction(A, B) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on B, A, D, C we get 180 == 2 * direction(B, A) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on C, D, C, A we get 180 == 2 * direction(C, D) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on B, C, C, D we get 180 == 2 * direction(B, C) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on D, C, A, C we get 180 == 2 * direction(D, C) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on C, D, B, C we get 180 == 2 * direction(C, D) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on C, D, A, B we get 180 == 2 * direction(C, D) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on B, A, C, D we get 180 == 2 * direction(B, A) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on D, C, A, B we get 180 == 2 * direction(D, C) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on D, C, C, B we get 180 == 2 * direction(D, C) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on A, B, C, D we get 180 == 2 * direction(A, B) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on D, C, C, A we get 180 == 2 * direction(D, C) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on A, C, D, C we get 180 == 2 * direction(A, C) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on D, C, B, A we get 180 == 2 * direction(D, C) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on C, B, D, C we get 180 == 2 * direction(C, B) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on A, C, C, D we get 180 == 2 * direction(A, C) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on C, D, A, C we get 180 == 2 * direction(C, D) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on C, B, C, D we get 180 == 2 * direction(C, B) - 2 * direction(C, D) mod 360
By projection_definition on A, C, Line(C, D) we get C == projection(A, Line(C, D))
By projection_definition on D, C, Line(A, B) we get C == projection(D, Line(A, B))
By sss_anti_congruence_v0 on C, D, A, C, D, B we get anti_congruent_triangles(A, C, D, B, C, D)
By projection_definition on B, C, Line(C, D) we get C == projection(B, Line(C, D))
By sas_anti_congruence on C, A, D, C, B, D we get anti_congruent_triangles(A, C, D, B, C, D)
By sss_anti_congruence_v1 on D, C, A, D, C, B we get anti_congruent_triangles(A, C, D, B, C, D)
By line_inequality on Line(A, D), Line(E, F), D we get Line(A, D) != Line(E, F)
By line_inequality on Line(B, D), Line(A, B), D we get Line(A, B) != Line(B, D)
By sas_anti_congruence on D, B, C, D, A, C we get anti_congruent_triangles(A, C, D, B, C, D)
By line_inequality on Line(C, D), Line(A, D), C we get Line(A, D) != Line(C, D)
By sss_anti_congruence_v1 on C, D, B, C, D, A we get anti_congruent_triangles(A, C, D, B, C, D)
By line_inequality on Line(A, D), Line(B, E), A we get Line(A, D) != Line(B, E)
By sss_anti_congruence_v0 on D, A, C, D, B, C we get anti_congruent_triangles(A, C, D, B, C, D)
By perpendicular_angle_conditions_v0 on D, C, B we get angle(D, C, B) == orientation(B, D, C) mod 360
By sss_anti_congruence_v1 on D, C, A, D, C, B we get anti_congruent_triangles(A, C, D, B, C, D)
By sss_anti_congruence_v1 on D, B, C, D, A, C we get anti_congruent_triangles(A, C, D, B, C, D)
By sss_anti_congruence_v1 on C, D, B, C, D, A we get anti_congruent_triangles(A, C, D, B, C, D)
By line_inequality on Line(A, B), Line(C, D), B we get Line(A, B) != Line(C, D)
By line_inequality on Line(A, D), Line(C, E), D we get Line(A, D) != Line(C, E)
By sss_anti_congruence_v0 on A, C, D, B, C, D we get anti_congruent_triangles(A, C, D, B, C, D)
By line_inequality on Line(C, F), Line(D, E), F we get Line(C, F) != Line(D, E)
By sss_anti_congruence_v0 on A, C, D, B, C, D we get anti_congruent_triangles(A, C, D, B, C, D)
By sss_anti_congruence_v0 on C, B, D, C, A, D we get anti_congruent_triangles(A, C, D, B, C, D)
By sss_anti_congruence_v0 on B, D, C, A, D, C we get anti_congruent_triangles(A, C, D, B, C, D)
By sss_anti_congruence_v0 on D, C, B, D, C, A we get anti_congruent_triangles(A, C, D, B, C, D)
By line_inequality on Line(A, B), Line(D, E), A we get Line(A, B) != Line(D, E)
By sss_anti_congruence_v0 on D, C, B, D, C, A we get anti_congruent_triangles(A, C, D, B, C, D)
By sss_anti_congruence_v1 on B, C, D, A, C, D we get anti_congruent_triangles(A, C, D, B, C, D)
By sas_anti_congruence on D, A, C, D, B, C we get anti_congruent_triangles(A, C, D, B, C, D)
By line_inequality on Line(B, E), f, B we get f != Line(B, E)
By sss_anti_congruence_v0 on C, B, D, C, A, D we get anti_congruent_triangles(A, C, D, B, C, D)
By sss_anti_congruence_v1 on A, D, C, B, D, C we get anti_congruent_triangles(A, C, D, B, C, D)
By line_inequality on Line(B, F), Line(C, F), B we get Line(B, F) != Line(C, F)
By sss_anti_congruence_v1 on C, D, B, C, D, A we get anti_congruent_triangles(A, C, D, B, C, D)
By line_inequality on f, Line(D, E), F we get f != Line(D, E)
By sss_anti_congruence_v1 on A, D, C, B, D, C we get anti_congruent_triangles(A, C, D, B, C, D)
By sss_anti_congruence_v0 on A, C, D, B, C, D we get anti_congruent_triangles(A, C, D, B, C, D)
By line_inequality on Line(B, F), Line(C, D), B we get Line(B, F) != Line(C, D)
By line_inequality on Line(A, D), Line(A, B), D we get Line(A, B) != Line(A, D)
By sss_anti_congruence_v1 on A, D, C, B, D, C we get anti_congruent_triangles(A, C, D, B, C, D)
By sss_anti_congruence_v0 on D, A, C, D, B, C we get anti_congruent_triangles(A, C, D, B, C, D)
By line_inequality on Line(A, B), f, A we get f != Line(A, B)
By line_inequality on Line(A, B), Line(C, F), A we get Line(A, B) != Line(C, F)
By sss_anti_congruence_v1 on D, C, A, D, C, B we get anti_congruent_triangles(A, C, D, B, C, D)
By reverse_direction on D, A we get 180 == direction(D, A) - direction(A, D) mod 360
By sss_anti_congruence_v1 on D, B, C, D, A, C we get anti_congruent_triangles(A, C, D, B, C, D)
By perpendicular_angle_conditions_v0 on A, C, D we get angle(A, C, D) == orientation(A, C, D) mod 360
By sss_anti_congruence_v0 on C, B, D, C, A, D we get anti_congruent_triangles(A, C, D, B, C, D)
By sss_anti_congruence_v1 on B, C, D, A, C, D we get anti_congruent_triangles(A, C, D, B, C, D)
By sss_anti_congruence_v1 on D, B, C, D, A, C we get anti_congruent_triangles(A, C, D, B, C, D)
By sss_anti_congruence_v1 on C, A, D, C, B, D we get anti_congruent_triangles(A, C, D, B, C, D)
By sss_anti_congruence_v1 on C, A, D, C, B, D we get anti_congruent_triangles(A, C, D, B, C, D)
By line_inequality on Line(A, D), Line(D, E), A we get Line(A, D) != Line(D, E)
By sss_anti_congruence_v0 on C, D, A, C, D, B we get anti_congruent_triangles(A, C, D, B, C, D)
By sss_anti_congruence_v1 on A, D, C, B, D, C we get anti_congruent_triangles(A, C, D, B, C, D)
By sss_anti_congruence_v1 on B, C, D, A, C, D we get anti_congruent_triangles(A, C, D, B, C, D)
By line_inequality on Line(A, B), Line(B, E), A we get Line(A, B) != Line(B, E)
By line_inequality on f, Line(C, D), F we get f != Line(C, D)
By sss_anti_congruence_v1 on D, B, C, D, A, C we get anti_congruent_triangles(A, C, D, B, C, D)
By sss_anti_congruence_v0 on C, B, D, C, A, D we get anti_congruent_triangles(A, C, D, B, C, D)
By sss_anti_congruence_v1 on B, C, D, A, C, D we get anti_congruent_triangles(A, C, D, B, C, D)
By sss_anti_congruence_v0 on C, D, A, C, D, B we get anti_congruent_triangles(A, C, D, B, C, D)
By line_inequality on Line(B, D), f, B we get f != Line(B, D)
By sss_anti_congruence_v1 on C, A, D, C, B, D we get anti_congruent_triangles(A, C, D, B, C, D)
By line_inequality on f, Line(B, F), D we get f != Line(B, F)
By line_inequality on Line(B, E), Line(B, F), E we get Line(B, E) != Line(B, F)
By sss_anti_congruence_v1 on C, D, B, C, D, A we get anti_congruent_triangles(A, C, D, B, C, D)
By sss_anti_congruence_v0 on A, C, D, B, C, D we get anti_congruent_triangles(A, C, D, B, C, D)
By sss_anti_congruence_v0 on C, B, D, C, A, D we get anti_congruent_triangles(A, C, D, B, C, D)
By line_inequality on Line(C, E), f, E we get f != Line(C, E)
By reverse_direction on A, D we get 180 == direction(A, D) - direction(D, A) mod 360
By sss_anti_congruence_v1 on D, C, A, D, C, B we get anti_congruent_triangles(A, C, D, B, C, D)
By sss_anti_congruence_v0 on D, C, B, D, C, A we get anti_congruent_triangles(A, C, D, B, C, D)
By sas_anti_congruence on C, B, D, C, A, D we get anti_congruent_triangles(A, C, D, B, C, D)
By sss_anti_congruence_v1 on D, C, A, D, C, B we get anti_congruent_triangles(A, C, D, B, C, D)
By line_inequality on Line(C, F), Line(B, E), F we get Line(B, E) != Line(C, F)
By line_inequality on Line(E, F), Line(B, F), E we get Line(B, F) != Line(E, F)
By sss_anti_congruence_v0 on D, C, B, D, C, A we get anti_congruent_triangles(A, C, D, B, C, D)
By perpendicular_angle_conditions_v0 on B, C, D we get angle(B, C, D) == orientation(B, C, D) mod 360
By sss_anti_congruence_v0 on D, A, C, D, B, C we get anti_congruent_triangles(A, C, D, B, C, D)
By sss_anti_congruence_v1 on C, D, B, C, D, A we get anti_congruent_triangles(A, C, D, B, C, D)
By sss_anti_congruence_v0 on C, D, A, C, D, B we get anti_congruent_triangles(A, C, D, B, C, D)
By sss_anti_congruence_v1 on D, C, A, D, C, B we get anti_congruent_triangles(A, C, D, B, C, D)
By sss_anti_congruence_v0 on A, C, D, B, C, D we get anti_congruent_triangles(A, C, D, B, C, D)
By sss_anti_congruence_v0 on D, A, C, D, B, C we get anti_congruent_triangles(A, C, D, B, C, D)
By sss_anti_congruence_v1 on A, D, C, B, D, C we get anti_congruent_triangles(A, C, D, B, C, D)
By line_inequality on Line(B, D), Line(C, F), B we get Line(B, D) != Line(C, F)
By sss_anti_congruence_v0 on B, D, C, A, D, C we get anti_congruent_triangles(A, C, D, B, C, D)
By sss_anti_congruence_v1 on C, A, D, C, B, D we get anti_congruent_triangles(A, C, D, B, C, D)
By sss_anti_congruence_v0 on D, C, B, D, C, A we get anti_congruent_triangles(A, C, D, B, C, D)
By line_inequality on f, Line(C, F), D we get f != Line(C, F)
By sss_anti_congruence_v0 on B, D, C, A, D, C we get anti_congruent_triangles(A, C, D, B, C, D)
By sss_anti_congruence_v1 on C, A, D, C, B, D we get anti_congruent_triangles(A, C, D, B, C, D)
By sss_anti_congruence_v1 on C, A, D, C, B, D we get anti_congruent_triangles(A, C, D, B, C, D)
By sss_anti_congruence_v0 on B, D, C, A, D, C we get anti_congruent_triangles(A, C, D, B, C, D)
By sss_anti_congruence_v1 on A, D, C, B, D, C we get anti_congruent_triangles(A, C, D, B, C, D)
By sss_anti_congruence_v1 on D, B, C, D, A, C we get anti_congruent_triangles(A, C, D, B, C, D)
By perpendicular_angle_conditions_v0 on D, C, A we get angle(D, C, A) == orientation(A, D, C) mod 360
By sss_anti_congruence_v0 on D, A, C, D, B, C we get anti_congruent_triangles(A, C, D, B, C, D)
By sss_anti_congruence_v0 on D, A, C, D, B, C we get anti_congruent_triangles(A, C, D, B, C, D)
By sss_anti_congruence_v0 on C, D, A, C, D, B we get anti_congruent_triangles(A, C, D, B, C, D)
By sss_anti_congruence_v0 on C, D, A, C, D, B we get anti_congruent_triangles(A, C, D, B, C, D)
By sss_anti_congruence_v0 on C, B, D, C, A, D we get anti_congruent_triangles(A, C, D, B, C, D)
By sss_anti_congruence_v1 on B, C, D, A, C, D we get anti_congruent_triangles(A, C, D, B, C, D)
By sss_anti_congruence_v1 on C, D, B, C, D, A we get anti_congruent_triangles(A, C, D, B, C, D)
By sss_anti_congruence_v1 on D, B, C, D, A, C we get anti_congruent_triangles(A, C, D, B, C, D)
By line_inequality on Line(C, D), Line(B, E), C we get Line(B, E) != Line(C, D)
By sss_anti_congruence_v0 on B, D, C, A, D, C we get anti_congruent_triangles(A, C, D, B, C, D)
By sss_anti_congruence_v0 on B, D, C, A, D, C we get anti_congruent_triangles(A, C, D, B, C, D)
By sss_anti_congruence_v1 on B, C, D, A, C, D we get anti_congruent_triangles(A, C, D, B, C, D)
By line_inequality on Line(B, F), Line(C, E), B we get Line(B, F) != Line(C, E)
By sss_anti_congruence_v0 on D, C, B, D, C, A we get anti_congruent_triangles(A, C, D, B, C, D)
By sss_anti_congruence_v0 on A, C, D, B, C, D we get anti_congruent_triangles(A, C, D, B, C, D)
By line_inequality on Line(B, D), Line(B, F), D we get Line(B, D) != Line(B, F)
By line_inequality on Line(C, F), Line(C, D), F we get Line(C, D) != Line(C, F)
By line_inequality on Line(E, F), Line(C, D), E we get Line(C, D) != Line(E, F)
By line_inequality on Line(A, D), Line(B, F), D we get Line(A, D) != Line(B, F)
By line_inequality on radical_axis(c, d), Line(C, E), B we get Line(C, E) != radical_axis(c, d)
By line_inequality on Line(A, B), Line(B, F), A we get Line(A, B) != Line(B, F)
By line_inequality on Line(B, E), Line(E, F), B we get Line(B, E) != Line(E, F)
By line_inequality on Line(C, E), Line(B, E), C we get Line(B, E) != Line(C, E)
By line_inequality on Line(D, E), Line(C, D), E we get Line(C, D) != Line(D, E)
By line_inequality on Line(A, B), Line(E, F), A we get Line(A, B) != Line(E, F)
By line_inequality on Line(A, D), Line(C, F), D we get Line(A, D) != Line(C, F)
By line_inequality on Line(C, D), Line(C, E), D we get Line(C, D) != Line(C, E)
By line_inequality on radical_axis(c, d), Line(E, F), B we get Line(E, F) != radical_axis(c, d)
By line_inequality on Line(E, F), Line(D, E), F we get Line(D, E) != Line(E, F)
By line_inequality on Line(C, D), Line(B, D), C we get Line(B, D) != Line(C, D)
By line_inequality on Line(A, B), Line(C, E), B we get Line(A, B) != Line(C, E)
By line_inequality on Line(B, D), Line(C, E), B we get Line(B, D) != Line(C, E)
By line_inequality on Line(D, E), Line(C, E), D we get Line(C, E) != Line(D, E)
By line_inequality on Line(D, E), Line(B, F), E we get Line(B, F) != Line(D, E)
By line_inequality on radical_axis(c, d), Line(A, D), B we get Line(A, D) != radical_axis(c, d)
By line_inequality on Line(B, D), Line(E, F), B we get Line(B, D) != Line(E, F)
By line_inequality on radical_axis(c, d), Line(C, F), B we get Line(C, F) != radical_axis(c, d)
By line_inequality on Line(E, F), f, E we get f != Line(E, F)
By line_inequality on radical_axis(c, d), Line(C, D), B we get Line(C, D) != radical_axis(c, d)
By line_inequality on Line(B, D), Line(A, D), B we get Line(A, D) != Line(B, D)
By line_inequality on radical_axis(c, d), f, B we get f != radical_axis(c, d)
By line_inequality on Line(A, D), f, A we get f != Line(A, D)
By perpendicular_lines_draw_intersection on Line(A, B), Line(C, D) we get exists(line_intersection(Line(A, B), Line(C, D)))
By perpendicular_bisector_properties on B, A we get perpendicular(Line(A, B), perpendicular_bisector(A, B)), midpoint(A, B) == line_intersection(Line(A, B), perpendicular_bisector(A, B))
By isosceles_triangle_altitude_v1 on C, B, A we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, C, B), perpendicular_line(C, Line(A, B)))
By isosceles_triangle_altitude_v1 on C, A, B we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, C, B), perpendicular_line(C, Line(A, B)))
By isosceles_triangle_altitude_v3 on C, A, B we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, C, B), perpendicular_line(C, Line(A, B)))
By isosceles_triangle_altitude_v3 on C, B, A we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, C, B), perpendicular_line(C, Line(A, B)))
By anti_similar_triangle_basic_properties on E, C, B, E, B, C we get not_collinear(B, C, E), not_collinear(B, C, E), angle(E, C, B) == 0 - angle(E, B, C) mod 360, angle(C, B, E) == 0 - angle(B, C, E) mod 360, angle(B, E, C) == 0 - angle(C, E, B) mod 360, log(distance(B, E)) + log(distance(B, C)) == log(distance(C, E)) + log(distance(B, C)), log(distance(B, C)) + log(distance(B, E)) == log(distance(B, C)) + log(distance(C, E)), log(distance(B, E)) + log(distance(B, E)) == log(distance(C, E)) + log(distance(C, E))
By anti_similar_triangle_basic_properties on D, A, B, D, B, A we get not_collinear(A, B, D), not_collinear(A, B, D), angle(D, A, B) == 0 - angle(D, B, A) mod 360, angle(A, B, D) == 0 - angle(B, A, D) mod 360, angle(B, D, A) == 0 - angle(A, D, B) mod 360, log(distance(A, D)) + log(distance(A, B)) == log(distance(B, D)) + log(distance(A, B)), log(distance(A, B)) + log(distance(A, D)) == log(distance(A, B)) + log(distance(B, D)), log(distance(A, D)) + log(distance(A, D)) == log(distance(B, D)) + log(distance(B, D))
By altitude_definition on D, C, A, Line(C, D) we get Line(C, D) == altitude(D, A, C)
By altitude_definition on A, D, C, Line(A, B) we get Line(A, B) == altitude(A, C, D)
By isosceles_triangle_altitude_v0 on D, A, B we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, D, B), perpendicular_line(D, Line(A, B)))
By altitude_definition on D, B, A, Line(C, D) we get Line(C, D) == altitude(D, A, B)
By altitude_definition on B, D, C, Line(A, B) we get Line(A, B) == altitude(B, C, D)
By altitude_definition on D, C, B, Line(C, D) we get Line(C, D) == altitude(D, B, C)
By isosceles_triangle_altitude_v3 on D, B, A we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, D, B), perpendicular_line(D, Line(A, B)))
By isosceles_triangle_altitude_v0 on D, B, A we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, D, B), perpendicular_line(D, Line(A, B)))
By isosceles_triangle_altitude_v3 on D, A, B we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, D, B), perpendicular_line(D, Line(A, B)))
By anti_similar_triangle_basic_properties on D, F, E, F, D, E we get not_collinear(D, E, F), not_collinear(D, E, F), angle(D, F, E) == 0 - angle(F, D, E) mod 360, angle(F, E, D) == 0 - angle(D, E, F) mod 360, angle(E, D, F) == 0 - angle(E, F, D) mod 360, log(distance(D, F)) + log(distance(D, E)) == log(distance(D, F)) + log(distance(E, F)), log(distance(D, E)) + log(distance(D, E)) == log(distance(E, F)) + log(distance(E, F)), log(distance(D, E)) + log(distance(D, F)) == log(distance(E, F)) + log(distance(D, F))
By anti_similar_triangle_basic_properties on F, E, B, B, E, F we get not_collinear(B, E, F), not_collinear(B, E, F), angle(F, E, B) == 0 - angle(B, E, F) mod 360, angle(E, B, F) == 0 - angle(E, F, B) mod 360, angle(B, F, E) == 0 - angle(F, B, E) mod 360, log(distance(B, E)) + log(distance(B, E)) == log(distance(E, F)) + log(distance(E, F)), log(distance(B, E)) + log(distance(B, F)) == log(distance(E, F)) + log(distance(B, F)), log(distance(B, F)) + log(distance(B, E)) == log(distance(B, F)) + log(distance(E, F))
By anti_similar_triangle_basic_properties on E, D, C, E, C, D we get not_collinear(C, D, E), not_collinear(C, D, E), angle(E, D, C) == 0 - angle(E, C, D) mod 360, angle(D, C, E) == 0 - angle(C, D, E) mod 360, angle(C, E, D) == 0 - angle(D, E, C) mod 360, log(distance(C, E)) + log(distance(C, D)) == log(distance(D, E)) + log(distance(C, D)), log(distance(C, D)) + log(distance(C, E)) == log(distance(C, D)) + log(distance(D, E)), log(distance(C, E)) + log(distance(C, E)) == log(distance(D, E)) + log(distance(D, E))
By line_intersection_definition on D, Line(A, D), Line(C, D) we get D == line_intersection(Line(A, D), Line(C, D))
By perpendicular_line_definition on D, Line(D, E), radical_axis(c, d) we get Line(D, E) == perpendicular_line(D, radical_axis(c, d))
By line_intersection_definition on B, Line(B, D), Line(B, F) we get B == line_intersection(Line(B, D), Line(B, F))
By line_intersection_definition on D, Line(C, D), Line(B, D) we get D == line_intersection(Line(B, D), Line(C, D))
By line_intersection_definition on D, Line(D, E), Line(C, D) we get D == line_intersection(Line(C, D), Line(D, E))
By line_intersection_definition on B, Line(B, F), Line(B, E) we get B == line_intersection(Line(B, E), Line(B, F))
By line_intersection_definition on B, Line(B, D), Line(A, B) we get B == line_intersection(Line(A, B), Line(B, D))
By perpendicular_line_definition on B, radical_axis(c, d), Line(D, E) we get radical_axis(c, d) == perpendicular_line(B, Line(D, E))
By line_intersection_definition on F, f, Line(C, F) we get F == line_intersection(f, Line(C, F))
By line_intersection_definition on D, Line(A, D), Line(B, D) we get D == line_intersection(Line(A, D), Line(B, D))
By line_intersection_definition on D, Line(D, E), f we get D == line_intersection(f, Line(D, E))
By line_intersection_definition on B, Line(A, B), Line(B, E) we get B == line_intersection(Line(A, B), Line(B, E))
By line_intersection_definition on F, Line(E, F), f we get F == line_intersection(f, Line(E, F))
By line_intersection_definition on F, Line(B, F), Line(C, F) we get F == line_intersection(Line(B, F), Line(C, F))
By line_intersection_definition on E, Line(C, E), Line(B, E) we get E == line_intersection(Line(B, E), Line(C, E))
By line_intersection_definition on F, Line(E, F), Line(B, F) we get F == line_intersection(Line(B, F), Line(E, F))
By line_intersection_definition on D, Line(B, D), f we get D == line_intersection(f, Line(B, D))
By line_intersection_definition on E, Line(C, E), Line(D, E) we get E == line_intersection(Line(C, E), Line(D, E))
By line_intersection_definition on D, Line(C, D), f we get D == line_intersection(f, Line(C, D))
By line_intersection_definition on B, Line(A, B), Line(B, F) we get B == line_intersection(Line(A, B), Line(B, F))
By line_intersection_definition on F, Line(B, F), f we get F == line_intersection(f, Line(B, F))
By perpendicular_line_definition on E, Line(D, E), radical_axis(c, d) we get Line(D, E) == perpendicular_line(E, radical_axis(c, d))
By line_intersection_definition on D, Line(D, E), Line(A, D) we get D == line_intersection(Line(A, D), Line(D, E))
By line_intersection_definition on E, Line(E, F), Line(D, E) we get E == line_intersection(Line(D, E), Line(E, F))
By line_intersection_definition on D, f, Line(A, D) we get D == line_intersection(f, Line(A, D))
By line_intersection_definition on C, Line(A, B), Line(C, E) we get C == line_intersection(Line(A, B), Line(C, E))
By line_intersection_definition on C, Line(C, E), Line(C, D) we get C == line_intersection(Line(C, D), Line(C, E))
By line_intersection_definition on C, Line(A, B), Line(C, F) we get C == line_intersection(Line(A, B), Line(C, F))
By line_intersection_definition on A, Line(A, B), Line(A, D) we get A == line_intersection(Line(A, B), Line(A, D))
By line_intersection_definition on E, Line(B, E), Line(E, F) we get E == line_intersection(Line(B, E), Line(E, F))
By line_intersection_definition on C, Line(C, F), Line(C, D) we get C == line_intersection(Line(C, D), Line(C, F))
By same_angle_converse_v1 on E, B, D, F we get collinear(B, D, E)
By perpendicular_direction_conditions_v0 on F, D, F, B we get perpendicular(Line(B, F), Line(D, F))
By divide_by_2_mod_180_v1 on B, A, D, B, C, E we get angle(B, A, D) == angle(B, C, E) mod 360
By divide_by_2_mod_180_v2 on F, E, B, A, D, B we get angle(F, E, B) == angle(A, D, B) + 180 mod 360
By divide_by_2_mod_180_v0 on F, D, C, A, B, F we get angle(A, B, F) == angle(F, D, C) mod 360
By divide_by_2_mod_180_v3 on F, C, A, E, F, D we get angle(F, C, A) == angle(E, F, D) + 180 mod 360
By divide_by_2_mod_180_v0 on C, F, D, E, C, B we get angle(C, F, D) == angle(E, C, B) mod 360
By divide_by_2_mod_180_v1 on D, F, E, B, C, F we get angle(B, C, F) == angle(D, F, E) mod 360
By divide_by_2_mod_180_v1 on E, B, C, D, F, C we get angle(D, F, C) == angle(E, B, C) mod 360
By orthocenter_concurrency on A, D, C we get orthocenter(A, C, D) in altitude(A, C, D), orthocenter(A, C, D) in altitude(D, A, C), orthocenter(A, C, D) in altitude(C, A, D)
By divide_by_2_mod_180_v2 on A, C, E, C, A, D we get angle(A, C, E) == angle(C, A, D) + 180 mod 360
By divide_by_2_mod_180_v1 on B, C, E, D, B, C we get angle(B, C, E) == angle(D, B, C) mod 360
By divide_by_2_mod_180_v2 on A, C, E, B, A, D we get angle(A, C, E) == angle(B, A, D) + 180 mod 360
By orthocenter_concurrency on D, B, C we get orthocenter(B, C, D) in altitude(D, B, C), orthocenter(B, C, D) in altitude(B, C, D), orthocenter(B, C, D) in altitude(C, B, D)
By divide_by_2_mod_180_v1 on C, A, D, E, B, C we get angle(C, A, D) == angle(E, B, C) mod 360
By divide_by_2_mod_180_v1 on B, C, E, D, F, C we get angle(B, C, E) == angle(D, F, C) mod 360
By divide_by_2_mod_180_v0 on B, E, C, D, E, F we get angle(B, E, C) == angle(D, E, F) mod 360
By divide_by_2_mod_180_v1 on C, D, F, F, B, C we get angle(C, D, F) == angle(F, B, C) mod 360
By divide_by_2_mod_180_v0 on D, C, E, C, D, A we get angle(C, D, A) == angle(D, C, E) mod 360
By divide_by_2_mod_180_v0 on D, A, C, A, B, E we get angle(A, B, E) == angle(D, A, C) mod 360
By divide_by_2_mod_180_v0 on D, B, F, B, F, E we get angle(B, F, E) == angle(D, B, F) mod 360
By divide_by_2_mod_180_v1 on D, B, C, E, B, A we get angle(D, B, C) == angle(E, B, A) mod 360
By divide_by_2_mod_180_v0 on C, B, D, A, B, E we get angle(A, B, E) == angle(C, B, D) mod 360
By divide_by_2_mod_180_v0 on C, B, F, F, D, C we get angle(C, B, F) == angle(F, D, C) mod 360
By divide_by_2_mod_180_v1 on F, C, D, E, F, B we get angle(E, F, B) == angle(F, C, D) mod 360
By divide_by_2_mod_180_v1 on D, B, C, E, B, C we get angle(D, B, C) == angle(E, B, C) mod 360
By divide_by_2_mod_180_v1 on D, B, A, B, C, E we get angle(B, C, E) == angle(D, B, A) mod 360
By divide_by_2_mod_180_v0 on E, B, F, D, B, F we get angle(D, B, F) == angle(E, B, F) mod 360
By divide_by_2_mod_180_v3 on D, B, A, A, C, E we get angle(D, B, A) == angle(A, C, E) + 180 mod 360
By divide_by_2_mod_180_v1 on F, C, D, F, B, E we get angle(F, B, E) == angle(F, C, D) mod 360
By divide_by_2_mod_180_v1 on E, B, A, C, A, D we get angle(C, A, D) == angle(E, B, A) mod 360
By divide_by_2_mod_180_v0 on D, A, B, C, B, E we get angle(C, B, E) == angle(D, A, B) mod 360
By divide_by_2_mod_180_v2 on F, D, E, F, C, A we get angle(F, D, E) == angle(F, C, A) + 180 mod 360
By divide_by_2_mod_180_v2 on F, D, C, C, D, F we get angle(F, D, C) == angle(C, D, F) + 180 mod 360
By divide_by_2_mod_180_v2 on A, B, D, E, C, A we get angle(A, B, D) == angle(E, C, A) + 180 mod 360
By divide_by_2_mod_180_v2 on C, B, F, F, B, A we get angle(C, B, F) == angle(F, B, A) + 180 mod 360
By divide_by_2_mod_180_v0 on B, D, C, D, C, E we get angle(B, D, C) == angle(D, C, E) mod 360
By divide_by_2_mod_180_v0 on A, B, D, C, B, E we get angle(A, B, D) == angle(C, B, E) mod 360
By divide_by_2_mod_180_v0 on D, A, B, E, C, B we get angle(D, A, B) == angle(E, C, B) mod 360
By divide_by_2_mod_180_v3 on A, D, F, F, D, B we get angle(A, D, F) == angle(F, D, B) + 180 mod 360
By divide_by_2_mod_180_v0 on F, D, B, F, D, E we get angle(F, D, B) == angle(F, D, E) mod 360
By divide_by_2_mod_180_v2 on B, D, A, B, E, F we get angle(B, D, A) == angle(B, E, F) + 180 mod 360
By divide_by_2_mod_180_v1 on C, D, B, C, D, E we get angle(C, D, B) == angle(C, D, E) mod 360
By divide_by_2_mod_180_v2 on A, B, F, F, B, A we get angle(A, B, F) == angle(F, B, A) + 180 mod 360
By divide_by_2_mod_180_v0 on F, D, A, A, C, F we get angle(A, C, F) == angle(F, D, A) mod 360
By divide_by_2_mod_180_v0 on E, F, D, F, D, B we get angle(E, F, D) == angle(F, D, B) mod 360
By divide_by_2_mod_180_v2 on F, E, B, C, E, B we get angle(F, E, B) == angle(C, E, B) + 180 mod 360
By divide_by_2_mod_180_v0 on D, A, C, C, B, E we get angle(C, B, E) == angle(D, A, C) mod 360
By divide_by_2_mod_180_v3 on B, C, F, F, D, A we get angle(B, C, F) == angle(F, D, A) + 180 mod 360
By divide_by_2_mod_180_v2 on E, F, D, F, C, A we get angle(E, F, D) == angle(F, C, A) + 180 mod 360
By divide_by_2_mod_180_v3 on C, A, D, A, C, E we get angle(C, A, D) == angle(A, C, E) + 180 mod 360
By divide_by_2_mod_180_v3 on F, B, A, C, B, F we get angle(F, B, A) == angle(C, B, F) + 180 mod 360
By divide_by_2_mod_180_v1 on E, B, C, B, A, D we get angle(B, A, D) == angle(E, B, C) mod 360
By divide_by_2_mod_180_v0 on F, C, B, F, D, E we get angle(F, C, B) == angle(F, D, E) mod 360
By divide_by_2_mod_180_v1 on E, B, C, D, B, A we get angle(D, B, A) == angle(E, B, C) mod 360
By divide_by_2_mod_180_v2 on C, E, D, F, E, D we get angle(C, E, D) == angle(F, E, D) + 180 mod 360
By divide_by_2_mod_180_v1 on B, D, F, E, D, F we get angle(B, D, F) == angle(E, D, F) mod 360
By divide_by_2_mod_180_v1 on F, E, D, A, D, B we get angle(A, D, B) == angle(F, E, D) mod 360
By divide_by_2_mod_180_v1 on E, C, D, C, D, B we get angle(C, D, B) == angle(E, C, D) mod 360
By divide_by_2_mod_180_v2 on A, C, F, E, D, F we get angle(A, C, F) == angle(E, D, F) + 180 mod 360
By divide_by_2_mod_180_v3 on D, E, C, D, E, F we get angle(D, E, C) == angle(D, E, F) + 180 mod 360
By divide_by_2_mod_180_v1 on D, B, A, E, B, A we get angle(D, B, A) == angle(E, B, A) mod 360
By divide_by_2_mod_180_v3 on B, E, F, B, E, C we get angle(B, E, F) == angle(B, E, C) + 180 mod 360
By divide_by_2_mod_180_v2 on A, C, E, D, F, C we get angle(A, C, E) == angle(D, F, C) + 180 mod 360
By divide_by_2_mod_180_v1 on D, F, E, B, D, F we get angle(B, D, F) == angle(D, F, E) mod 360
By sas_anti_similarity on C, E, B, B, D, A we get anti_similar_triangles(A, B, D, B, C, E)
By divide_by_2_mod_180_v3 on A, D, F, F, C, B we get angle(A, D, F) == angle(F, C, B) + 180 mod 360
By divide_by_2_mod_180_v2 on D, E, F, D, E, C we get angle(D, E, F) == angle(D, E, C) + 180 mod 360
By divide_by_2_mod_180_v1 on D, E, C, B, E, F we get angle(B, E, F) == angle(D, E, C) mod 360
By divide_by_2_mod_180_v1 on B, C, E, C, A, D we get angle(B, C, E) == angle(C, A, D) mod 360
By divide_by_2_mod_180_v2 on F, C, B, A, D, F we get angle(F, C, B) == angle(A, D, F) + 180 mod 360
By divide_by_2_mod_180_v3 on F, C, A, F, D, E we get angle(F, C, A) == angle(F, D, E) + 180 mod 360
By divide_by_2_mod_180_v0 on D, E, F, B, D, A we get angle(B, D, A) == angle(D, E, F) mod 360
By divide_by_2_mod_180_v3 on E, C, A, D, A, B we get angle(E, C, A) == angle(D, A, B) + 180 mod 360
By divide_by_2_mod_180_v3 on D, F, E, A, C, F we get angle(D, F, E) == angle(A, C, F) + 180 mod 360
By divide_by_2_mod_180_v1 on A, D, C, E, C, D we get angle(A, D, C) == angle(E, C, D) mod 360
By divide_by_2_mod_180_v3 on B, E, F, B, D, A we get angle(B, E, F) == angle(B, D, A) + 180 mod 360
By divide_by_2_mod_180_v3 on C, D, F, F, D, C we get angle(C, D, F) == angle(F, D, C) + 180 mod 360
By divide_by_2_mod_180_v1 on F, B, E, F, B, D we get angle(F, B, D) == angle(F, B, E) mod 360
By divide_by_2_mod_180_v1 on E, C, D, C, F, B we get angle(C, F, B) == angle(E, C, D) mod 360
By divide_by_2_mod_180_v0 on F, C, B, E, F, D we get angle(E, F, D) == angle(F, C, B) mod 360
By divide_by_2_mod_180_v2 on F, D, B, A, D, F we get angle(F, D, B) == angle(A, D, F) + 180 mod 360
By divide_by_2_mod_180_v1 on C, E, B, F, E, D we get angle(C, E, B) == angle(F, E, D) mod 360
By divide_by_2_mod_180_v2 on A, C, F, D, F, E we get angle(A, C, F) == angle(D, F, E) + 180 mod 360
By divide_by_2_mod_180_v1 on E, B, A, B, A, D we get angle(B, A, D) == angle(E, B, A) mod 360
By divide_by_2_mod_180_v1 on F, B, A, C, D, F we get angle(C, D, F) == angle(F, B, A) mod 360
By divide_by_2_mod_180_v0 on E, D, C, B, D, C we get angle(B, D, C) == angle(E, D, C) mod 360
By divide_by_2_mod_180_v0 on A, B, D, E, C, B we get angle(A, B, D) == angle(E, C, B) mod 360
By divide_by_2_mod_180_v3 on F, B, A, A, B, F we get angle(F, B, A) == angle(A, B, F) + 180 mod 360
By divide_by_2_mod_180_v2 on A, C, E, D, B, A we get angle(A, C, E) == angle(D, B, A) + 180 mod 360
By divide_by_2_mod_180_v2 on D, A, C, E, C, A we get angle(D, A, C) == angle(E, C, A) + 180 mod 360
By divide_by_2_mod_180_v0 on D, A, B, A, B, E we get angle(A, B, E) == angle(D, A, B) mod 360
By divide_by_2_mod_180_v1 on E, D, F, B, C, F we get angle(B, C, F) == angle(E, D, F) mod 360
By divide_by_2_mod_180_v2 on A, C, E, D, B, C we get angle(A, C, E) == angle(D, B, C) + 180 mod 360
By divide_by_2_mod_180_v1 on F, B, D, E, F, B we get angle(E, F, B) == angle(F, B, D) mod 360
By divide_by_2_mod_180_v3 on C, E, B, F, E, B we get angle(C, E, B) == angle(F, E, B) + 180 mod 360
By divide_by_2_mod_180_v3 on D, B, C, A, C, E we get angle(D, B, C) == angle(A, C, E) + 180 mod 360
By divide_by_2_mod_180_v0 on D, A, C, E, C, B we get angle(D, A, C) == angle(E, C, B) mod 360
By divide_by_2_mod_180_v2 on C, B, F, F, B, C we get angle(C, B, F) == angle(F, B, C) + 180 mod 360
By divide_by_2_mod_180_v0 on C, B, E, C, B, D we get angle(C, B, D) == angle(C, B, E) mod 360
By divide_by_2_mod_180_v0 on F, E, B, C, E, D we get angle(C, E, D) == angle(F, E, B) mod 360
By divide_by_2_mod_180_v0 on E, D, C, C, D, A we get angle(C, D, A) == angle(E, D, C) mod 360
By divide_by_2_mod_180_v0 on C, F, D, A, B, E we get angle(A, B, E) == angle(C, F, D) mod 360
By divide_by_2_mod_180_v0 on E, C, B, C, B, D we get angle(C, B, D) == angle(E, C, B) mod 360
By divide_by_2_mod_180_v0 on A, B, E, A, B, D we get angle(A, B, D) == angle(A, B, E) mod 360
By divide_by_2_mod_180_v3 on F, B, C, C, B, F we get angle(F, B, C) == angle(C, B, F) + 180 mod 360
By divide_by_2_mod_180_v0 on B, F, E, D, C, F we get angle(B, F, E) == angle(D, C, F) mod 360
By divide_by_2_mod_180_v0 on B, F, C, D, C, E we get angle(B, F, C) == angle(D, C, E) mod 360
By divide_by_2_mod_180_v1 on C, F, B, C, D, E we get angle(C, D, E) == angle(C, F, B) mod 360
By divide_by_2_mod_180_v3 on F, E, D, C, E, D we get angle(F, E, D) == angle(C, E, D) + 180 mod 360
By divide_by_2_mod_180_v0 on D, C, F, E, B, F we get angle(D, C, F) == angle(E, B, F) mod 360
By divide_by_2_mod_180_v3 on F, B, C, A, B, F we get angle(F, B, C) == angle(A, B, F) + 180 mod 360
By divide_by_2_mod_180_v2 on D, A, B, E, C, A we get angle(D, A, B) == angle(E, C, A) + 180 mod 360
By parallel_line_angles_v1 on A, D, F, E we get parallel(Line(A, D), Line(E, F))
By divide_by_2_mod_180_v1 on A, D, F, F, C, A we get angle(A, D, F) == angle(F, C, A) mod 360
By divide_by_2_mod_180_v2 on F, D, A, B, C, F we get angle(F, D, A) == angle(B, C, F) + 180 mod 360
By divide_by_2_mod_180_v1 on A, D, C, C, D, E we get angle(A, D, C) == angle(C, D, E) mod 360
By divide_by_2_mod_180_v2 on C, F, D, E, C, A we get angle(C, F, D) == angle(E, C, A) + 180 mod 360
By divide_by_2_mod_180_v0 on B, F, C, E, D, C we get angle(B, F, C) == angle(E, D, C) mod 360
By divide_by_2_mod_180_v2 on B, E, C, B, E, F we get angle(B, E, C) == angle(B, E, F) + 180 mod 360
By divide_by_2_mod_180_v2 on F, D, A, B, D, F we get angle(F, D, A) == angle(B, D, F) + 180 mod 360
By divide_by_2_mod_180_v3 on B, D, F, F, D, A we get angle(B, D, F) == angle(F, D, A) + 180 mod 360
By divide_by_2_mod_180_v3 on E, C, A, A, B, D we get angle(E, C, A) == angle(A, B, D) + 180 mod 360
By divide_by_2_mod_180_v1 on E, B, A, D, F, C we get angle(D, F, C) == angle(E, B, A) mod 360
By divide_by_2_mod_180_v3 on B, A, D, A, C, E we get angle(B, A, D) == angle(A, C, E) + 180 mod 360
By divide_by_2_mod_180_v3 on E, C, A, D, A, C we get angle(E, C, A) == angle(D, A, C) + 180 mod 360
By divide_by_2_mod_180_v3 on A, D, B, F, E, B we get angle(A, D, B) == angle(F, E, B) + 180 mod 360
By divide_by_2_mod_180_v3 on E, C, A, C, F, D we get angle(E, C, A) == angle(C, F, D) + 180 mod 360
By divide_by_2_mod_180_v3 on E, C, A, C, B, D we get angle(E, C, A) == angle(C, B, D) + 180 mod 360
By divide_by_2_mod_180_v2 on A, B, F, F, B, C we get angle(A, B, F) == angle(F, B, C) + 180 mod 360
By divide_by_2_mod_180_v0 on C, F, D, C, B, E we get angle(C, B, E) == angle(C, F, D) mod 360
By divide_by_2_mod_180_v3 on E, D, F, A, C, F we get angle(E, D, F) == angle(A, C, F) + 180 mod 360
By divide_by_2_mod_180_v3 on D, F, C, A, C, E we get angle(D, F, C) == angle(A, C, E) + 180 mod 360
By sas_similarity on B, D, A, B, E, C we get similar_triangles(A, B, D, C, B, E)
By divide_by_2_mod_180_v2 on C, B, D, E, C, A we get angle(C, B, D) == angle(E, C, A) + 180 mod 360
By sas_similarity on C, E, B, A, D, B we get similar_triangles(A, B, D, C, B, E)
By sas_similarity on A, D, B, C, E, B we get similar_triangles(A, B, D, C, B, E)
By sas_anti_similarity on B, D, A, C, E, B we get anti_similar_triangles(A, B, D, B, C, E)
By sas_anti_similarity on B, E, C, A, D, B we get anti_similar_triangles(A, B, D, B, C, E)
By sas_similarity on B, E, C, B, D, A we get similar_triangles(A, B, D, C, B, E)
By sas_anti_similarity on A, D, B, B, E, C we get anti_similar_triangles(A, B, D, B, C, E)
By external_angle_bisector_definition_v0_r on D, B, D, C we get Line(B, C) == external_angle_bisector(D, C, D)
By external_angle_bisector_definition_v0_r on D, B, D, F we get Line(B, F) == external_angle_bisector(D, F, D)
By external_angle_bisector_definition_v0_r on A, D, A, C we get Line(C, D) == external_angle_bisector(A, C, A)
By external_angle_bisector_definition_v0_r on B, D, B, C we get Line(C, D) == external_angle_bisector(B, C, B)
By internal_angle_bisector_definition_v0_r on C, F, C, E we get Line(E, F) == internal_angle_bisector(C, E, C)
By external_angle_bisector_definition_v0_r on B, D, B, F we get Line(D, F) == external_angle_bisector(B, F, B)
By external_angle_bisector_definition_v0_r on D, A, D, C we get Line(A, C) == external_angle_bisector(D, C, D)
By internal_angle_bisector_definition_v0_r on D, B, D, E we get Line(B, E) == internal_angle_bisector(D, E, D)
By internal_angle_bisector_definition_v0_r on D, E, D, B we get Line(B, E) == internal_angle_bisector(D, B, D)
By internal_angle_bisector_definition_v0_r on F, C, F, E we get Line(C, E) == internal_angle_bisector(F, E, F)
By internal_angle_bisector_definition_v0_r on B, E, B, D we get Line(D, E) == internal_angle_bisector(B, D, B)
By internal_angle_bisector_definition_v0_r on B, D, B, E we get Line(D, E) == internal_angle_bisector(B, E, B)
By internal_angle_bisector_definition_v0_r on E, D, E, B we get Line(B, D) == internal_angle_bisector(E, B, E)
By perpendicular_lines_draw_intersection on Line(D, E), radical_axis(c, d) we get exists(line_intersection(Line(D, E), radical_axis(c, d)))
By internal_angle_bisector_definition_v0_r on E, B, E, D we get Line(B, D) == internal_angle_bisector(E, D, E)
By line_intersection_definition on orthocenter(B, C, D), Line(C, D), Line(A, B) we get orthocenter(B, C, D) == line_intersection(Line(A, B), Line(C, D))
By line_intersection_definition on orthocenter(A, C, D), Line(C, D), Line(A, B) we get orthocenter(A, C, D) == line_intersection(Line(A, B), Line(C, D))
By perpendicular_line_definition on B, Line(B, F), f we get Line(B, F) == perpendicular_line(B, f)
By perpendicular_line_definition on A, Line(A, D), altitude(C, A, D) we get Line(A, D) == perpendicular_line(A, altitude(C, A, D))
By perpendicular_line_definition on line_intersection(Line(D, E), radical_axis(c, d)), Line(D, E), radical_axis(c, d) we get Line(D, E) == perpendicular_line(line_intersection(Line(D, E), radical_axis(c, d)), radical_axis(c, d))
By perpendicular_line_definition on orthocenter(B, C, D), altitude(C, B, D), Line(B, D) we get altitude(C, B, D) == perpendicular_line(orthocenter(B, C, D), Line(B, D))
By perpendicular_line_definition on orthocenter(A, C, D), Line(C, D), Line(A, B) we get Line(C, D) == perpendicular_line(orthocenter(A, C, D), Line(A, B))
By perpendicular_line_definition on orthocenter(A, C, D), altitude(C, A, D), Line(A, D) we get altitude(C, A, D) == perpendicular_line(orthocenter(A, C, D), Line(A, D))
By perpendicular_line_definition on D, Line(B, D), altitude(C, B, D) we get Line(B, D) == perpendicular_line(D, altitude(C, B, D))
By perpendicular_line_definition on D, f, Line(B, F) we get f == perpendicular_line(D, Line(B, F))
By perpendicular_line_definition on F, f, Line(B, F) we get f == perpendicular_line(F, Line(B, F))
By perpendicular_line_definition on line_intersection(Line(D, E), radical_axis(c, d)), radical_axis(c, d), Line(D, E) we get radical_axis(c, d) == perpendicular_line(line_intersection(Line(D, E), radical_axis(c, d)), Line(D, E))
By perpendicular_line_definition on orthocenter(B, C, D), Line(C, D), Line(A, B) we get Line(C, D) == perpendicular_line(orthocenter(B, C, D), Line(A, B))
By perpendicular_line_definition on orthocenter(B, C, D), Line(A, B), Line(C, D) we get Line(A, B) == perpendicular_line(orthocenter(B, C, D), Line(C, D))
By perpendicular_line_definition on orthocenter(A, C, D), Line(A, B), Line(C, D) we get Line(A, B) == perpendicular_line(orthocenter(A, C, D), Line(C, D))
By perpendicular_line_definition on B, Line(B, D), altitude(C, B, D) we get Line(B, D) == perpendicular_line(B, altitude(C, B, D))
By perpendicular_line_definition on D, Line(A, D), altitude(C, A, D) we get Line(A, D) == perpendicular_line(D, altitude(C, A, D))
By perpendicular_line_definition on F, Line(B, F), f we get Line(B, F) == perpendicular_line(F, f)
By line_unique_intersection_v0 on Line(C, D), Line(A, B), orthocenter(A, C, D), orthocenter(B, C, D) we get orthocenter(A, C, D) == orthocenter(B, C, D)
By line_unique_intersection_v0 on Line(A, B), Line(C, D), orthocenter(A, C, D), C we get C == orthocenter(A, C, D)
By line_unique_intersection_v0 on Line(C, D), Line(A, B), C, orthocenter(B, C, D) we get C == orthocenter(B, C, D)
By same_angle_converse_v1 on E, F, C, D we get collinear(C, E, F)
By perpendicular_direction_conditions_v0 on B, A, B, F we get perpendicular(Line(A, B), Line(B, F))
By perpendicular_direction_conditions_v0 on C, D, D, F we get perpendicular(Line(C, D), Line(D, F))
By perpendicular_direction_conditions_v0 on B, C, F, B we get perpendicular(Line(B, C), Line(B, F))
By same_angle_v0 on D, B, E, A we get angle(B, D, A) == angle(E, D, A) mod 360
By perpendicular_direction_conditions_v0 on C, A, B, F we get perpendicular(Line(A, C), Line(B, F))
By parallel_line_definition on D, Line(A, D), Line(E, F) we get Line(A, D) == parallel_line(D, Line(E, F))
By parallel_line_definition on A, Line(A, D), Line(E, F) we get Line(A, D) == parallel_line(A, Line(E, F))
By parallel_line_definition on F, Line(E, F), Line(A, D) we get Line(E, F) == parallel_line(F, Line(A, D))
By parallel_line_definition on E, Line(E, F), Line(A, D) we get Line(E, F) == parallel_line(E, Line(A, D))
By divide_by_2_mod_180_v0 on B, F, E, D, C, E we get angle(B, F, E) == angle(D, C, E) mod 360
By divide_by_2_mod_180_v3 on D, B, A, F, D, A we get angle(D, B, A) == angle(F, D, A) + 180 mod 360
By divide_by_2_mod_180_v3 on D, B, C, F, D, A we get angle(D, B, C) == angle(F, D, A) + 180 mod 360
By divide_by_2_mod_180_v1 on C, D, F, D, C, A we get angle(C, D, F) == angle(D, C, A) mod 360
By probably_between_and_collinear_implies_between on B, E, D we get between(B, E, D)
By in_imply_collinear on orthocenter(B, C, D), A, B we get collinear(A, B, orthocenter(B, C, D))
By divide_by_2_mod_180_v0 on F, C, B, C, B, E we get angle(C, B, E) == angle(F, C, B) mod 360
By divide_by_2_mod_180_v0 on D, C, F, B, D, C we get angle(B, D, C) == angle(D, C, F) mod 360
By divide_by_2_mod_180_v3 on A, D, F, E, C, B we get angle(A, D, F) == angle(E, C, B) + 180 mod 360
By divide_by_2_mod_180_v2 on F, D, A, D, B, A we get angle(F, D, A) == angle(D, B, A) + 180 mod 360
By divide_by_2_mod_180_v3 on D, F, C, F, D, A we get angle(D, F, C) == angle(F, D, A) + 180 mod 360
By divide_by_2_mod_180_v1 on C, D, F, D, F, B we get angle(C, D, F) == angle(D, F, B) mod 360
By divide_by_2_mod_180_v0 on F, C, B, D, A, B we get angle(D, A, B) == angle(F, C, B) mod 360
By divide_by_2_mod_180_v0 on C, D, A, D, B, F we get angle(C, D, A) == angle(D, B, F) mod 360
By divide_by_2_mod_180_v1 on E, B, A, B, C, F we get angle(B, C, F) == angle(E, B, A) mod 360
By divide_by_2_mod_180_v1 on D, B, A, E, D, F we get angle(D, B, A) == angle(E, D, F) mod 360
By divide_by_2_mod_180_v0 on C, D, A, B, F, E we get angle(B, F, E) == angle(C, D, A) mod 360
By projection_definition on D, F, Line(B, F) we get F == projection(D, Line(B, F))
By divide_by_2_mod_180_v3 on F, B, A, D, C, B we get angle(F, B, A) == angle(D, C, B) + 180 mod 360
By divide_by_2_mod_180_v0 on F, D, C, D, C, B we get angle(D, C, B) == angle(F, D, C) mod 360
By divide_by_2_mod_180_v0 on D, A, B, F, D, E we get angle(D, A, B) == angle(F, D, E) mod 360
By projection_definition on B, F, f we get F == projection(B, f)
By divide_by_2_mod_180_v2 on F, D, C, D, C, A we get angle(F, D, C) == angle(D, C, A) + 180 mod 360
By divide_by_2_mod_180_v1 on F, C, D, E, C, D we get angle(E, C, D) == angle(F, C, D) mod 360
By divide_by_2_mod_180_v0 on E, F, D, C, B, E we get angle(C, B, E) == angle(E, F, D) mod 360
By divide_by_2_mod_180_v1 on C, D, E, E, F, B we get angle(C, D, E) == angle(E, F, B) mod 360
By divide_by_2_mod_180_v1 on B, D, F, E, B, A we get angle(B, D, F) == angle(E, B, A) mod 360
By divide_by_2_mod_180_v1 on E, D, F, C, A, D we get angle(C, A, D) == angle(E, D, F) mod 360
By divide_by_2_mod_180_v2 on B, F, D, C, D, F we get angle(B, F, D) == angle(C, D, F) + 180 mod 360
By divide_by_2_mod_180_v2 on C, B, F, D, C, A we get angle(C, B, F) == angle(D, C, A) + 180 mod 360
By divide_by_2_mod_180_v3 on F, B, C, A, C, D we get angle(F, B, C) == angle(A, C, D) + 180 mod 360
By divide_by_2_mod_180_v3 on D, C, A, F, D, C we get angle(D, C, A) == angle(F, D, C) + 180 mod 360
By divide_by_2_mod_180_v2 on A, C, E, E, D, F we get angle(A, C, E) == angle(E, D, F) + 180 mod 360
By in_imply_collinear on orthocenter(B, C, D), C, B we get collinear(B, C, orthocenter(B, C, D))
By divide_by_2_mod_180_v0 on A, C, F, A, C, E we get angle(A, C, E) == angle(A, C, F) mod 360
By in_imply_collinear on orthocenter(B, C, D), C, A we get collinear(A, C, orthocenter(B, C, D))
By divide_by_2_mod_180_v3 on B, D, F, A, C, E we get angle(B, D, F) == angle(A, C, E) + 180 mod 360
By divide_by_2_mod_180_v0 on A, B, E, E, F, D we get angle(A, B, E) == angle(E, F, D) mod 360
By divide_by_2_mod_180_v0 on B, D, C, B, F, E we get angle(B, D, C) == angle(B, F, E) mod 360
By divide_by_2_mod_180_v1 on E, B, A, D, F, E we get angle(D, F, E) == angle(E, B, A) mod 360
By divide_by_2_mod_180_v3 on A, D, F, A, B, E we get angle(A, D, F) == angle(A, B, E) + 180 mod 360
By divide_by_2_mod_180_v0 on E, F, D, C, F, D we get angle(C, F, D) == angle(E, F, D) mod 360
By divide_by_2_mod_180_v1 on E, C, A, F, C, A we get angle(E, C, A) == angle(F, C, A) mod 360
By divide_by_2_mod_180_v1 on F, C, D, C, D, B we get angle(C, D, B) == angle(F, C, D) mod 360
By sas_similarity on D, E, C, B, E, F we get similar_triangles(B, E, F, D, E, C)
By in_imply_collinear on orthocenter(A, C, D), A, B we get collinear(A, B, orthocenter(A, C, D))
By divide_by_2_mod_180_v1 on E, F, B, C, D, B we get angle(C, D, B) == angle(E, F, B) mod 360
By divide_by_2_mod_180_v0 on A, B, E, F, D, B we get angle(A, B, E) == angle(F, D, B) mod 360
By in_imply_collinear on orthocenter(A, C, D), C, B we get collinear(B, C, orthocenter(A, C, D))
By divide_by_2_mod_180_v1 on B, C, F, C, A, D we get angle(B, C, F) == angle(C, A, D) mod 360
By parallel_line_angles_reverse_v1 on A, D, E, F we get angle(A, D, E) == angle(F, E, D) mod 360
By divide_by_2_mod_180_v1 on F, B, D, C, D, B we get angle(C, D, B) == angle(F, B, D) mod 360
By divide_by_2_mod_180_v2 on F, D, A, B, A, D we get angle(F, D, A) == angle(B, A, D) + 180 mod 360
By divide_by_2_mod_180_v0 on D, A, C, F, D, E we get angle(D, A, C) == angle(F, D, E) mod 360
By divide_by_2_mod_180_v1 on B, C, E, B, C, F we get angle(B, C, E) == angle(B, C, F) mod 360
By divide_by_2_mod_180_v0 on C, D, A, D, C, F we get angle(C, D, A) == angle(D, C, F) mod 360
By divide_by_2_mod_180_v1 on B, C, E, D, F, E we get angle(B, C, E) == angle(D, F, E) mod 360
By divide_by_2_mod_180_v1 on F, B, D, A, D, C we get angle(A, D, C) == angle(F, B, D) mod 360
By divide_by_2_mod_180_v2 on A, B, E, F, C, A we get angle(A, B, E) == angle(F, C, A) + 180 mod 360
By divide_by_2_mod_180_v1 on E, C, D, F, B, E we get angle(E, C, D) == angle(F, B, E) mod 360
By divide_by_2_mod_180_v3 on B, C, E, F, D, A we get angle(B, C, E) == angle(F, D, A) + 180 mod 360
By divide_by_2_mod_180_v2 on C, B, F, D, F, B we get angle(C, B, F) == angle(D, F, B) + 180 mod 360
By divide_by_2_mod_180_v1 on E, D, F, E, B, A we get angle(E, B, A) == angle(E, D, F) mod 360
By divide_by_2_mod_180_v1 on E, F, B, A, D, C we get angle(A, D, C) == angle(E, F, B) mod 360
By divide_by_2_mod_180_v2 on B, F, D, F, B, A we get angle(B, F, D) == angle(F, B, A) + 180 mod 360
By divide_by_2_mod_180_v0 on F, D, A, A, C, E we get angle(A, C, E) == angle(F, D, A) mod 360
By divide_by_2_mod_180_v1 on E, B, C, E, D, F we get angle(E, B, C) == angle(E, D, F) mod 360
By divide_by_2_mod_180_v2 on A, C, E, D, F, E we get angle(A, C, E) == angle(D, F, E) + 180 mod 360
By divide_by_2_mod_180_v3 on B, C, D, F, D, C we get angle(B, C, D) == angle(F, D, C) + 180 mod 360
By in_imply_collinear on line_intersection(Line(D, E), radical_axis(c, d)), E, D we get collinear(D, E, line_intersection(Line(D, E), radical_axis(c, d)))
By divide_by_2_mod_180_v1 on F, B, E, A, D, C we get angle(A, D, C) == angle(F, B, E) mod 360
By divide_by_2_mod_180_v1 on E, C, D, F, B, D we get angle(E, C, D) == angle(F, B, D) mod 360
By divide_by_2_mod_180_v0 on A, B, D, F, D, E we get angle(A, B, D) == angle(F, D, E) mod 360
By divide_by_2_mod_180_v0 on E, B, F, E, D, C we get angle(E, B, F) == angle(E, D, C) mod 360
By divide_by_2_mod_180_v0 on D, A, B, E, F, D we get angle(D, A, B) == angle(E, F, D) mod 360
By divide_by_2_mod_180_v1 on D, C, A, F, B, A we get angle(D, C, A) == angle(F, B, A) mod 360
By divide_by_2_mod_180_v0 on C, B, F, A, C, D we get angle(A, C, D) == angle(C, B, F) mod 360
By divide_by_2_mod_180_v1 on D, F, B, F, B, A we get angle(D, F, B) == angle(F, B, A) mod 360
By divide_by_2_mod_180_v0 on B, F, D, C, B, F we get angle(B, F, D) == angle(C, B, F) mod 360
By divide_by_2_mod_180_v1 on B, A, D, D, F, E we get angle(B, A, D) == angle(D, F, E) mod 360
By in_imply_collinear on orthocenter(A, C, D), C, A we get collinear(A, C, orthocenter(A, C, D))
By divide_by_2_mod_180_v1 on B, C, F, B, A, D we get angle(B, A, D) == angle(B, C, F) mod 360
By divide_by_2_mod_180_v1 on D, F, E, C, A, D we get angle(C, A, D) == angle(D, F, E) mod 360
By divide_by_2_mod_180_v2 on E, C, B, A, D, F we get angle(E, C, B) == angle(A, D, F) + 180 mod 360
By similar_triangle_basic_properties on B, D, A, B, E, C we get not_collinear(A, B, D), not_collinear(B, C, E), angle(B, D, A) == angle(B, E, C) mod 360, angle(D, A, B) == angle(E, C, B) mod 360, angle(A, B, D) == angle(C, B, E) mod 360, log(distance(B, D)) + log(distance(C, E)) == log(distance(B, E)) + log(distance(A, D)), log(distance(A, D)) + log(distance(B, C)) == log(distance(C, E)) + log(distance(A, B)), log(distance(A, B)) + log(distance(B, E)) == log(distance(B, C)) + log(distance(B, D))
By anti_similar_triangle_basic_properties on A, B, D, B, C, E we get not_collinear(A, B, D), not_collinear(B, C, E), angle(A, B, D) == 0 - angle(B, C, E) mod 360, angle(B, D, A) == 0 - angle(C, E, B) mod 360, angle(D, A, B) == 0 - angle(E, B, C) mod 360, log(distance(A, B)) + log(distance(C, E)) == log(distance(B, C)) + log(distance(B, D)), log(distance(B, D)) + log(distance(B, E)) == log(distance(C, E)) + log(distance(A, D)), log(distance(A, D)) + log(distance(B, C)) == log(distance(B, E)) + log(distance(A, B))
By divide_by_2_mod_180_v0 on A, C, D, A, B, F we get angle(A, B, F) == angle(A, C, D) mod 360
By divide_by_2_mod_180_v3 on D, F, E, A, C, E we get angle(D, F, E) == angle(A, C, E) + 180 mod 360
By divide_by_2_mod_180_v3 on D, F, C, A, C, F we get angle(D, F, C) == angle(A, C, F) + 180 mod 360
By divide_by_2_mod_180_v3 on E, B, A, A, C, F we get angle(E, B, A) == angle(A, C, F) + 180 mod 360
By divide_by_2_mod_180_v1 on F, C, D, A, D, C we get angle(A, D, C) == angle(F, C, D) mod 360
By divide_by_2_mod_180_v1 on B, A, D, E, D, F we get angle(B, A, D) == angle(E, D, F) mod 360
By in_imply_collinear on orthocenter(B, C, D), D, C we get collinear(C, D, orthocenter(B, C, D))
By in_imply_collinear on orthocenter(A, C, D), D, C we get collinear(C, D, orthocenter(A, C, D))
By divide_by_2_mod_180_v3 on C, D, F, D, C, B we get angle(C, D, F) == angle(D, C, B) + 180 mod 360
By divide_by_2_mod_180_v3 on C, D, F, A, C, D we get angle(C, D, F) == angle(A, C, D) + 180 mod 360
By divide_by_2_mod_180_v1 on D, F, C, B, C, F we get angle(B, C, F) == angle(D, F, C) mod 360
By divide_by_2_mod_180_v3 on D, B, C, A, C, F we get angle(D, B, C) == angle(A, C, F) + 180 mod 360
By divide_by_2_mod_180_v2 on D, C, B, F, B, A we get angle(D, C, B) == angle(F, B, A) + 180 mod 360
By divide_by_2_mod_180_v0 on E, F, D, A, B, D we get angle(A, B, D) == angle(E, F, D) mod 360
By divide_by_2_mod_180_v2 on A, C, D, F, B, A we get angle(A, C, D) == angle(F, B, A) + 180 mod 360
By divide_by_2_mod_180_v2 on A, C, F, D, B, C we get angle(A, C, F) == angle(D, B, C) + 180 mod 360
By divide_by_2_mod_180_v0 on B, F, D, A, B, F we get angle(A, B, F) == angle(B, F, D) mod 360
By divide_by_2_mod_180_v3 on F, C, A, A, B, E we get angle(F, C, A) == angle(A, B, E) + 180 mod 360
By divide_by_2_mod_180_v0 on C, B, D, F, D, E we get angle(C, B, D) == angle(F, D, E) mod 360
By divide_by_2_mod_180_v1 on B, C, F, D, B, A we get angle(B, C, F) == angle(D, B, A) mod 360
By divide_by_2_mod_180_v0 on D, C, E, D, B, F we get angle(D, B, F) == angle(D, C, E) mod 360
By divide_by_2_mod_180_v0 on C, B, D, F, C, B we get angle(C, B, D) == angle(F, C, B) mod 360
By divide_by_2_mod_180_v2 on D, A, C, F, C, A we get angle(D, A, C) == angle(F, C, A) + 180 mod 360
By divide_by_2_mod_180_v1 on D, B, A, D, F, E we get angle(D, B, A) == angle(D, F, E) mod 360
By divide_by_2_mod_180_v3 on E, C, A, F, D, B we get angle(E, C, A) == angle(F, D, B) + 180 mod 360
By divide_by_2_mod_180_v1 on F, C, D, C, F, B we get angle(C, F, B) == angle(F, C, D) mod 360
By divide_by_2_mod_180_v3 on B, A, D, A, C, F we get angle(B, A, D) == angle(A, C, F) + 180 mod 360
By divide_by_2_mod_180_v3 on D, F, B, C, B, F we get angle(D, F, B) == angle(C, B, F) + 180 mod 360
By divide_by_2_mod_180_v1 on C, F, B, F, B, D we get angle(C, F, B) == angle(F, B, D) mod 360
By divide_by_2_mod_180_v1 on C, D, B, F, B, E we get angle(C, D, B) == angle(F, B, E) mod 360
By divide_by_2_mod_180_v2 on A, B, D, A, D, F we get angle(A, B, D) == angle(A, D, F) + 180 mod 360
By divide_by_2_mod_180_v1 on D, F, E, E, B, C we get angle(D, F, E) == angle(E, B, C) mod 360
By divide_by_2_mod_180_v1 on A, D, F, E, C, A we get angle(A, D, F) == angle(E, C, A) mod 360
By divide_by_2_mod_180_v0 on F, D, C, A, C, D we get angle(A, C, D) == angle(F, D, C) mod 360
By divide_by_2_mod_180_v0 on F, D, B, D, A, C we get angle(D, A, C) == angle(F, D, B) mod 360
By divide_by_2_mod_180_v3 on E, B, C, A, C, F we get angle(E, B, C) == angle(A, C, F) + 180 mod 360
By divide_by_2_mod_180_v0 on D, C, F, D, C, E we get angle(D, C, E) == angle(D, C, F) mod 360
By divide_by_2_mod_180_v2 on A, B, D, F, C, A we get angle(A, B, D) == angle(F, C, A) + 180 mod 360
By divide_by_2_mod_180_v1 on C, D, E, F, C, D we get angle(C, D, E) == angle(F, C, D) mod 360
By divide_by_2_mod_180_v1 on D, B, C, D, F, E we get angle(D, B, C) == angle(D, F, E) mod 360
By divide_by_2_mod_180_v1 on D, F, C, D, F, E we get angle(D, F, C) == angle(D, F, E) mod 360
By divide_by_2_mod_180_v0 on F, D, B, C, F, D we get angle(C, F, D) == angle(F, D, B) mod 360
By divide_by_2_mod_180_v2 on A, B, F, B, C, D we get angle(A, B, F) == angle(B, C, D) + 180 mod 360
By divide_by_2_mod_180_v1 on E, B, C, B, D, F we get angle(B, D, F) == angle(E, B, C) mod 360
By divide_by_2_mod_180_v1 on B, A, D, B, D, F we get angle(B, A, D) == angle(B, D, F) mod 360
By divide_by_2_mod_180_v1 on B, C, D, F, B, A we get angle(B, C, D) == angle(F, B, A) mod 360
By divide_by_2_mod_180_v3 on E, B, C, F, D, A we get angle(E, B, C) == angle(F, D, A) + 180 mod 360
By divide_by_2_mod_180_v3 on A, D, F, D, A, B we get angle(A, D, F) == angle(D, A, B) + 180 mod 360
By divide_by_2_mod_180_v3 on E, C, A, E, F, D we get angle(E, C, A) == angle(E, F, D) + 180 mod 360
By divide_by_2_mod_180_v2 on F, D, A, D, B, C we get angle(F, D, A) == angle(D, B, C) + 180 mod 360
By divide_by_2_mod_180_v1 on B, D, F, D, B, C we get angle(B, D, F) == angle(D, B, C) mod 360
By divide_by_2_mod_180_v3 on B, C, F, A, C, E we get angle(B, C, F) == angle(A, C, E) + 180 mod 360
By divide_by_2_mod_180_v3 on B, A, D, F, D, A we get angle(B, A, D) == angle(F, D, A) + 180 mod 360
By divide_by_2_mod_180_v1 on D, F, C, E, D, F we get angle(D, F, C) == angle(E, D, F) mod 360
By divide_by_2_mod_180_v2 on A, B, F, D, C, A we get angle(A, B, F) == angle(D, C, A) + 180 mod 360
By divide_by_2_mod_180_v0 on F, C, B, D, A, C we get angle(D, A, C) == angle(F, C, B) mod 360
By divide_by_2_mod_180_v3 on D, C, A, C, B, F we get angle(D, C, A) == angle(C, B, F) + 180 mod 360
By divide_by_2_mod_180_v1 on B, C, D, C, D, F we get angle(B, C, D) == angle(C, D, F) mod 360
By divide_by_2_mod_180_v0 on B, F, D, F, D, C we get angle(B, F, D) == angle(F, D, C) mod 360
By divide_by_2_mod_180_v3 on B, C, D, C, B, F we get angle(B, C, D) == angle(C, B, F) + 180 mod 360
By divide_by_2_mod_180_v2 on C, B, D, F, C, A we get angle(C, B, D) == angle(F, C, A) + 180 mod 360
By divide_by_2_mod_180_v2 on A, C, E, B, C, F we get angle(A, C, E) == angle(B, C, F) + 180 mod 360
By sas_similarity on F, E, D, C, E, B we get similar_triangles(B, C, E, D, F, E)
By divide_by_2_mod_180_v0 on C, B, D, F, D, B we get angle(C, B, D) == angle(F, D, B) mod 360
By divide_by_2_mod_180_v2 on A, C, D, C, D, F we get angle(A, C, D) == angle(C, D, F) + 180 mod 360
By divide_by_2_mod_180_v0 on E, F, D, E, C, B we get angle(E, C, B) == angle(E, F, D) mod 360
By divide_by_2_mod_180_v2 on A, C, F, C, A, D we get angle(A, C, F) == angle(C, A, D) + 180 mod 360
By divide_by_2_mod_180_v2 on A, C, F, D, B, A we get angle(A, C, F) == angle(D, B, A) + 180 mod 360
By divide_by_2_mod_180_v0 on C, B, F, D, C, B we get angle(C, B, F) == angle(D, C, B) mod 360
By divide_by_2_mod_180_v3 on A, D, F, C, B, E we get angle(A, D, F) == angle(C, B, E) + 180 mod 360
By sas_similarity on B, E, C, D, E, F we get similar_triangles(B, C, E, D, F, E)
By divide_by_2_mod_180_v1 on C, F, B, F, B, E we get angle(C, F, B) == angle(F, B, E) mod 360
By divide_by_2_mod_180_v1 on D, F, C, B, D, F we get angle(B, D, F) == angle(D, F, C) mod 360
By sas_similarity on F, E, B, C, E, D we get similar_triangles(B, E, F, D, E, C)
By divide_by_2_mod_180_v0 on E, B, F, D, C, E we get angle(D, C, E) == angle(E, B, F) mod 360
By sas_congruence on B, E, F, D, E, C we get congruent_triangles(B, E, F, D, E, C)
By divide_by_2_mod_180_v0 on F, D, E, C, F, D we get angle(C, F, D) == angle(F, D, E) mod 360
By divide_by_2_mod_180_v1 on B, C, E, B, D, F we get angle(B, C, E) == angle(B, D, F) mod 360
By divide_by_2_mod_180_v1 on D, F, B, F, B, C we get angle(D, F, B) == angle(F, B, C) mod 360
By divide_by_2_mod_180_v2 on A, C, F, E, B, A we get angle(A, C, F) == angle(E, B, A) + 180 mod 360
By divide_by_2_mod_180_v0 on E, D, C, D, B, F we get angle(D, B, F) == angle(E, D, C) mod 360
By divide_by_2_mod_180_v2 on C, B, F, B, C, D we get angle(C, B, F) == angle(B, C, D) + 180 mod 360
By divide_by_2_mod_180_v0 on D, A, B, F, D, B we get angle(D, A, B) == angle(F, D, B) mod 360
By divide_by_2_mod_180_v1 on D, B, A, B, D, F we get angle(B, D, F) == angle(D, B, A) mod 360
By sas_similarity on F, E, D, A, D, B we get similar_triangles(A, B, D, F, D, E)
By divide_by_2_mod_180_v0 on F, D, B, E, C, B we get angle(E, C, B) == angle(F, D, B) mod 360
By divide_by_2_mod_180_v3 on F, C, A, D, A, C we get angle(F, C, A) == angle(D, A, C) + 180 mod 360
By divide_by_2_mod_180_v0 on A, B, E, F, C, B we get angle(A, B, E) == angle(F, C, B) mod 360
By divide_by_2_mod_180_v2 on C, B, E, F, C, A we get angle(C, B, E) == angle(F, C, A) + 180 mod 360
By divide_by_2_mod_180_v0 on A, B, D, F, C, B we get angle(A, B, D) == angle(F, C, B) mod 360
By divide_by_2_mod_180_v0 on D, A, C, E, F, D we get angle(D, A, C) == angle(E, F, D) mod 360
By divide_by_2_mod_180_v1 on E, D, F, B, C, E we get angle(B, C, E) == angle(E, D, F) mod 360
By divide_by_2_mod_180_v3 on A, D, F, D, A, C we get angle(A, D, F) == angle(D, A, C) + 180 mod 360
By divide_by_2_mod_180_v0 on F, C, B, E, C, B we get angle(E, C, B) == angle(F, C, B) mod 360
By sas_anti_congruence on C, E, B, D, E, F we get anti_congruent_triangles(B, C, E, F, D, E)
By divide_by_2_mod_180_v2 on A, C, F, D, F, C we get angle(A, C, F) == angle(D, F, C) + 180 mod 360
By divide_by_2_mod_180_v3 on D, C, A, A, B, F we get angle(D, C, A) == angle(A, B, F) + 180 mod 360
By divide_by_2_mod_180_v2 on F, D, B, E, C, A we get angle(F, D, B) == angle(E, C, A) + 180 mod 360
By divide_by_2_mod_180_v2 on A, C, D, F, B, C we get angle(A, C, D) == angle(F, B, C) + 180 mod 360
By divide_by_2_mod_180_v0 on C, B, D, E, F, D we get angle(C, B, D) == angle(E, F, D) mod 360
By divide_by_2_mod_180_v3 on A, D, F, A, B, D we get angle(A, D, F) == angle(A, B, D) + 180 mod 360
By divide_by_2_mod_180_v2 on D, C, B, C, D, F we get angle(D, C, B) == angle(C, D, F) + 180 mod 360
By divide_by_2_mod_180_v0 on B, F, C, B, F, E we get angle(B, F, C) == angle(B, F, E) mod 360
By divide_by_2_mod_180_v2 on F, D, A, D, F, C we get angle(F, D, A) == angle(D, F, C) + 180 mod 360
By divide_by_2_mod_180_v3 on D, F, B, F, D, C we get angle(D, F, B) == angle(F, D, C) + 180 mod 360
By divide_by_2_mod_180_v2 on F, D, C, D, F, B we get angle(F, D, C) == angle(D, F, B) + 180 mod 360
By divide_by_2_mod_180_v1 on D, B, C, E, D, F we get angle(D, B, C) == angle(E, D, F) mod 360
By divide_by_2_mod_180_v0 on D, B, F, B, F, C we get angle(B, F, C) == angle(D, B, F) mod 360
By divide_by_2_mod_180_v0 on D, C, F, E, D, C we get angle(D, C, F) == angle(E, D, C) mod 360
By divide_by_2_mod_180_v2 on A, B, F, D, F, B we get angle(A, B, F) == angle(D, F, B) + 180 mod 360
By divide_by_2_mod_180_v0 on F, D, E, E, C, B we get angle(E, C, B) == angle(F, D, E) mod 360
By divide_by_2_mod_180_v2 on C, B, D, A, D, F we get angle(C, B, D) == angle(A, D, F) + 180 mod 360
By divide_by_2_mod_180_v0 on C, F, D, F, C, B we get angle(C, F, D) == angle(F, C, B) mod 360
By divide_by_2_mod_180_v0 on A, B, D, F, D, B we get angle(A, B, D) == angle(F, D, B) mod 360
By divide_by_2_mod_180_v0 on D, B, F, B, D, C we get angle(B, D, C) == angle(D, B, F) mod 360
By divide_by_2_mod_180_v0 on A, B, F, D, C, B we get angle(A, B, F) == angle(D, C, B) mod 360
By divide_by_2_mod_180_v1 on D, C, A, F, B, C we get angle(D, C, A) == angle(F, B, C) mod 360
By divide_by_2_mod_180_v2 on F, D, E, E, C, A we get angle(F, D, E) == angle(E, C, A) + 180 mod 360
By divide_by_2_mod_180_v3 on A, D, F, C, B, D we get angle(A, D, F) == angle(C, B, D) + 180 mod 360
By line_inequality on altitude(C, A, D), f, C we get f != altitude(C, A, D)
By collinear_definition on B, E, D we get E in Line(B, D), D in Line(B, E), Line(B, D) == Line(B, E), 0 == 2 * angle(E, B, D) mod 360
By divide_by_2_mod_180_v2 on D, C, B, F, B, C we get angle(D, C, B) == angle(F, B, C) + 180 mod 360
By divide_by_2_mod_180_v2 on F, D, A, C, A, D we get angle(F, D, A) == angle(C, A, D) + 180 mod 360
By parallel_line_angles_v1 on D, A, C, E we get parallel(Line(A, D), Line(C, E))
By divide_by_2_mod_180_v2 on A, C, E, B, D, F we get angle(A, C, E) == angle(B, D, F) + 180 mod 360
By divide_by_2_mod_180_v3 on F, C, A, C, B, E we get angle(F, C, A) == angle(C, B, E) + 180 mod 360
By divide_by_2_mod_180_v2 on F, D, C, B, C, D we get angle(F, D, C) == angle(B, C, D) + 180 mod 360
By divide_by_2_mod_180_v0 on E, D, C, B, F, E we get angle(B, F, E) == angle(E, D, C) mod 360
By divide_by_2_mod_180_v3 on C, D, F, B, F, D we get angle(C, D, F) == angle(B, F, D) + 180 mod 360
By divide_by_2_mod_180_v2 on A, C, F, B, A, D we get angle(A, C, F) == angle(B, A, D) + 180 mod 360
By divide_by_2_mod_180_v3 on F, B, A, B, F, D we get angle(F, B, A) == angle(B, F, D) + 180 mod 360
By divide_by_2_mod_180_v0 on B, D, C, E, B, F we get angle(B, D, C) == angle(E, B, F) mod 360
By divide_by_2_mod_180_v3 on F, B, A, A, C, D we get angle(F, B, A) == angle(A, C, D) + 180 mod 360
By divide_by_2_mod_180_v2 on D, A, B, A, D, F we get angle(D, A, B) == angle(A, D, F) + 180 mod 360
By divide_by_2_mod_180_v3 on C, A, D, A, C, F we get angle(C, A, D) == angle(A, C, F) + 180 mod 360
By divide_by_2_mod_180_v2 on D, A, B, F, C, A we get angle(D, A, B) == angle(F, C, A) + 180 mod 360
By divide_by_2_mod_180_v3 on E, C, A, F, C, B we get angle(E, C, A) == angle(F, C, B) + 180 mod 360
By divide_by_2_mod_180_v3 on F, B, C, B, F, D we get angle(F, B, C) == angle(B, F, D) + 180 mod 360
By divide_by_2_mod_180_v1 on C, A, D, B, D, F we get angle(B, D, F) == angle(C, A, D) mod 360
By divide_by_2_mod_180_v2 on A, C, F, B, C, E we get angle(A, C, F) == angle(B, C, E) + 180 mod 360
By divide_by_2_mod_180_v3 on C, A, D, F, D, A we get angle(C, A, D) == angle(F, D, A) + 180 mod 360
By divide_by_2_mod_180_v1 on E, B, C, B, C, F we get angle(B, C, F) == angle(E, B, C) mod 360
By divide_by_2_mod_180_v3 on D, F, B, A, B, F we get angle(D, F, B) == angle(A, B, F) + 180 mod 360
By divide_by_2_mod_180_v3 on E, C, A, F, D, E we get angle(E, C, A) == angle(F, D, E) + 180 mod 360
By sas_anti_similarity on C, E, D, B, E, F we get anti_similar_triangles(B, E, F, C, E, D)
By divide_by_2_mod_180_v3 on A, D, F, C, F, D we get angle(A, D, F) == angle(C, F, D) + 180 mod 360
By divide_by_2_mod_180_v0 on A, B, E, F, D, E we get angle(A, B, E) == angle(F, D, E) mod 360
By divide_by_2_mod_180_v3 on F, C, A, D, A, B we get angle(F, C, A) == angle(D, A, B) + 180 mod 360
By divide_by_2_mod_180_v3 on B, C, E, A, C, F we get angle(B, C, E) == angle(A, C, F) + 180 mod 360
By divide_by_2_mod_180_v0 on C, B, E, F, D, E we get angle(C, B, E) == angle(F, D, E) mod 360
By divide_by_2_mod_180_v0 on C, B, E, F, D, B we get angle(C, B, E) == angle(F, D, B) mod 360
By divide_by_2_mod_180_v3 on F, C, A, A, B, D we get angle(F, C, A) == angle(A, B, D) + 180 mod 360
By divide_by_2_mod_180_v0 on E, B, F, B, F, C we get angle(B, F, C) == angle(E, B, F) mod 360
By divide_by_2_mod_180_v2 on F, C, B, E, C, A we get angle(F, C, B) == angle(E, C, A) + 180 mod 360
By divide_by_2_mod_180_v2 on A, C, F, E, B, C we get angle(A, C, F) == angle(E, B, C) + 180 mod 360
By similar_triangle_basic_properties on D, B, A, E, B, C we get not_collinear(A, B, D), not_collinear(B, C, E), angle(D, B, A) == angle(E, B, C) mod 360, angle(B, A, D) == angle(B, C, E) mod 360, angle(A, D, B) == angle(C, E, B) mod 360, log(distance(B, D)) + log(distance(B, C)) == log(distance(B, E)) + log(distance(A, B)), log(distance(A, B)) + log(distance(C, E)) == log(distance(B, C)) + log(distance(A, D)), log(distance(A, D)) + log(distance(B, E)) == log(distance(C, E)) + log(distance(B, D))
By divide_by_2_mod_180_v1 on C, D, E, F, B, D we get angle(C, D, E) == angle(F, B, D) mod 360
By divide_by_2_mod_180_v2 on C, F, D, F, C, A we get angle(C, F, D) == angle(F, C, A) + 180 mod 360
By divide_by_2_mod_180_v3 on F, C, A, E, C, B we get angle(F, C, A) == angle(E, C, B) + 180 mod 360
By divide_by_2_mod_180_v3 on E, D, F, A, C, E we get angle(E, D, F) == angle(A, C, E) + 180 mod 360
By sas_anti_congruence on D, E, C, F, E, B we get anti_congruent_triangles(B, E, F, C, E, D)
By divide_by_2_mod_180_v1 on B, C, D, F, B, C we get angle(B, C, D) == angle(F, B, C) mod 360
By divide_by_2_mod_180_v2 on D, A, C, A, D, F we get angle(D, A, C) == angle(A, D, F) + 180 mod 360
By point_on_perpendicular_bisector on B, A, orthocenter(B, C, D), Line(C, D) we get distance(A, orthocenter(B, C, D)) == distance(B, orthocenter(B, C, D))
By divide_by_2_mod_180_v2 on E, F, D, E, C, A we get angle(E, F, D) == angle(E, C, A) + 180 mod 360
By divide_by_2_mod_180_v1 on E, F, B, C, F, B we get angle(C, F, B) == angle(E, F, B) mod 360
By divide_by_2_mod_180_v2 on F, D, A, B, C, E we get angle(F, D, A) == angle(B, C, E) + 180 mod 360
By sas_anti_similarity on F, E, D, B, D, A we get anti_similar_triangles(A, B, D, D, F, E)
By sas_similarity on B, E, F, D, E, C we get similar_triangles(B, E, F, D, E, C)
By divide_by_2_mod_180_v0 on E, B, F, C, D, A we get angle(C, D, A) == angle(E, B, F) mod 360
By sas_congruence on D, E, C, B, E, F we get congruent_triangles(B, E, F, D, E, C)
By divide_by_2_mod_180_v1 on B, C, F, D, B, C we get angle(B, C, F) == angle(D, B, C) mod 360
By divide_by_2_mod_180_v2 on F, D, A, E, B, A we get angle(F, D, A) == angle(E, B, A) + 180 mod 360
By divide_by_2_mod_180_v2 on E, C, B, F, C, A we get angle(E, C, B) == angle(F, C, A) + 180 mod 360
By divide_by_2_mod_180_v3 on B, C, D, A, B, F we get angle(B, C, D) == angle(A, B, F) + 180 mod 360
By sas_anti_similarity on B, E, F, C, E, D we get anti_similar_triangles(B, E, F, C, E, D)
By point_on_perpendicular_bisector on A, B, orthocenter(A, C, D), Line(C, D) we get distance(A, orthocenter(A, C, D)) == distance(B, orthocenter(A, C, D))
By sas_similarity on A, D, B, F, E, D we get similar_triangles(A, B, D, F, D, E)
By divide_by_2_mod_180_v2 on C, B, E, A, D, F we get angle(C, B, E) == angle(A, D, F) + 180 mod 360
By sas_anti_congruence on C, E, D, B, E, F we get anti_congruent_triangles(B, E, F, C, E, D)
By sas_anti_similarity on D, E, F, A, D, B we get anti_similar_triangles(A, B, D, D, F, E)
By divide_by_2_mod_180_v2 on C, F, D, A, D, F we get angle(C, F, D) == angle(A, D, F) + 180 mod 360
By divide_by_2_mod_180_v3 on F, C, A, C, B, D we get angle(F, C, A) == angle(C, B, D) + 180 mod 360
By divide_by_2_mod_180_v0 on B, F, C, D, C, F we get angle(B, F, C) == angle(D, C, F) mod 360
By sas_anti_congruence on F, E, B, D, E, C we get anti_congruent_triangles(B, E, F, C, E, D)
By divide_by_2_mod_180_v2 on F, D, A, E, B, C we get angle(F, D, A) == angle(E, B, C) + 180 mod 360
By line_containment_inequality on line_intersection(Line(D, E), radical_axis(c, d)), C, Line(D, E) we get C != line_intersection(Line(D, E), radical_axis(c, d))
By sas_anti_congruence on B, E, C, F, E, D we get anti_congruent_triangles(B, C, E, F, D, E)
By line_containment_inequality on orthocenter(B, C, D), F, Line(A, B) we get F != orthocenter(B, C, D)
By divide_by_2_mod_180_v3 on E, B, A, F, D, A we get angle(E, B, A) == angle(F, D, A) + 180 mod 360
By sas_congruence on F, E, B, C, E, D we get congruent_triangles(B, E, F, D, E, C)
By sas_congruence on C, E, D, F, E, B we get congruent_triangles(B, E, F, D, E, C)
By sas_similarity on C, E, B, F, E, D we get similar_triangles(B, C, E, D, F, E)
By double_perpendicular_and_parallel_v0_r on Line(A, D), altitude(C, A, D), Line(E, F) we get perpendicular(Line(E, F), altitude(C, A, D))
By divide_by_2_mod_180_v3 on D, B, A, A, C, F we get angle(D, B, A) == angle(A, C, F) + 180 mod 360
By divide_by_2_mod_180_v2 on A, B, E, A, D, F we get angle(A, B, E) == angle(A, D, F) + 180 mod 360
By line_containment_inequality on orthocenter(A, C, D), D, Line(A, B) we get D != orthocenter(A, C, D)
By sas_anti_similarity on F, E, B, D, E, C we get anti_similar_triangles(B, E, F, C, E, D)
By divide_by_2_mod_180_v2 on B, F, D, F, B, C we get angle(B, F, D) == angle(F, B, C) + 180 mod 360
By anti_similar_triangle_basic_properties on C, B, E, B, A, D we get not_collinear(B, C, E), not_collinear(A, B, D), angle(C, B, E) == 0 - angle(B, A, D) mod 360, angle(B, E, C) == 0 - angle(A, D, B) mod 360, angle(E, C, B) == 0 - angle(D, B, A) mod 360, log(distance(A, B)) + log(distance(B, E)) == log(distance(B, C)) + log(distance(A, D)), log(distance(A, D)) + log(distance(C, E)) == log(distance(B, E)) + log(distance(B, D)), log(distance(B, D)) + log(distance(B, C)) == log(distance(C, E)) + log(distance(A, B))
By sas_similarity on D, E, F, B, D, A we get similar_triangles(A, B, D, F, D, E)
By sas_congruence on B, E, C, D, E, F we get congruent_triangles(B, C, E, D, F, E)
By sas_anti_similarity on D, E, C, F, E, B we get anti_similar_triangles(B, E, F, C, E, D)
By divide_by_2_mod_180_v3 on F, C, A, C, F, D we get angle(F, C, A) == angle(C, F, D) + 180 mod 360
By collinear_definition on E, B, D we get B in Line(D, E), D in Line(B, E), Line(B, E) == Line(D, E), 0 == 2 * angle(B, E, D) mod 360
By divide_by_2_mod_180_v3 on F, B, C, D, C, B we get angle(F, B, C) == angle(D, C, B) + 180 mod 360
By sas_similarity on C, E, D, F, E, B we get similar_triangles(B, E, F, D, E, C)
By sas_congruence on F, E, D, C, E, B we get congruent_triangles(B, C, E, D, F, E)
By sas_congruence on C, E, B, F, E, D we get congruent_triangles(B, C, E, D, F, E)
By sas_similarity on D, E, F, B, E, C we get similar_triangles(B, C, E, D, F, E)
By sas_anti_similarity on B, E, C, F, E, D we get anti_similar_triangles(B, C, E, F, D, E)
By line_containment_inequality on line_intersection(Line(D, E), radical_axis(c, d)), F, Line(D, E) we get F != line_intersection(Line(D, E), radical_axis(c, d))
By sas_similarity on B, D, A, D, E, F we get similar_triangles(A, B, D, F, D, E)
By sas_anti_similarity on A, D, B, D, E, F we get anti_similar_triangles(A, B, D, D, F, E)
By sas_anti_similarity on D, E, F, C, E, B we get anti_similar_triangles(B, C, E, F, D, E)
By line_inequality on altitude(C, B, D), Line(D, E), C we get Line(D, E) != altitude(C, B, D)
By collinear_definition on D, E, B we get E in Line(B, D), B in Line(D, E), Line(B, D) == Line(D, E), 0 == 2 * angle(E, D, B) mod 360
By line_containment_inequality on line_intersection(Line(D, E), radical_axis(c, d)), A, Line(D, E) we get A != line_intersection(Line(D, E), radical_axis(c, d))
By sas_congruence on D, E, F, B, E, C we get congruent_triangles(B, C, E, D, F, E)
By sas_anti_congruence on D, E, F, C, E, B we get anti_congruent_triangles(B, C, E, F, D, E)
By sas_anti_similarity on B, D, A, F, E, D we get anti_similar_triangles(A, B, D, D, F, E)
By sas_anti_similarity on C, E, B, D, E, F we get anti_similar_triangles(B, C, E, F, D, E)
By line_inequality on altitude(C, A, D), Line(B, F), C we get Line(B, F) != altitude(C, A, D)
By sas_anti_congruence on B, E, F, C, E, D we get anti_congruent_triangles(B, E, F, C, E, D)
By sas_anti_similarity on F, E, D, B, E, C we get anti_similar_triangles(B, C, E, F, D, E)
By sas_anti_congruence on F, E, D, B, E, C we get anti_congruent_triangles(B, C, E, F, D, E)
By line_inequality on altitude(C, B, D), Line(A, D), C we get Line(A, D) != altitude(C, B, D)
By line_containment_inequality on orthocenter(A, C, D), A, Line(C, D) we get A != orthocenter(A, C, D)
By line_containment_inequality on orthocenter(A, C, D), E, Line(A, B) we get E != orthocenter(A, C, D)
By line_containment_inequality on orthocenter(B, C, D), E, Line(C, D) we get E != orthocenter(B, C, D)
By line_containment_inequality on orthocenter(A, C, D), F, Line(A, B) we get F != orthocenter(A, C, D)
By line_inequality on altitude(C, B, D), Line(B, D), C we get Line(B, D) != altitude(C, B, D)
By line_inequality on altitude(C, A, D), Line(D, E), C we get Line(D, E) != altitude(C, A, D)
By line_inequality on altitude(C, A, D), Line(B, E), C we get Line(B, E) != altitude(C, A, D)
By line_containment_inequality on orthocenter(B, C, D), A, Line(C, D) we get A != orthocenter(B, C, D)
By line_inequality on altitude(C, A, D), Line(B, D), C we get Line(B, D) != altitude(C, A, D)
By line_containment_inequality on orthocenter(B, C, D), B, Line(C, D) we get B != orthocenter(B, C, D)
By line_inequality on altitude(C, A, D), Line(A, D), C we get Line(A, D) != altitude(C, A, D)
By line_inequality on altitude(C, B, D), Line(B, F), C we get Line(B, F) != altitude(C, B, D)
By line_containment_inequality on orthocenter(A, C, D), B, Line(C, D) we get B != orthocenter(A, C, D)
By line_inequality on altitude(C, B, D), Line(B, E), C we get Line(B, E) != altitude(C, B, D)
By line_inequality on altitude(C, B, D), f, C we get f != altitude(C, B, D)
By line_containment_inequality on orthocenter(B, C, D), D, Line(A, B) we get D != orthocenter(B, C, D)
By external_angle_bisector_definition_v0_r on F, C, F, D we get Line(C, D) == external_angle_bisector(F, D, F)
By external_angle_bisector_definition_v0_r on C, F, C, B we get Line(B, F) == external_angle_bisector(C, B, C)
By external_angle_bisector_definition_v0_r on C, F, A, B we get Line(B, F) == external_angle_bisector(A, B, C)
By external_angle_bisector_definition_v0_r on F, C, F, B we get Line(B, C) == external_angle_bisector(F, B, F)
By external_angle_bisector_definition_v0_r on B, F, A, D we get Line(D, F) == external_angle_bisector(A, D, B)
By external_angle_bisector_definition_v0_r on A, F, A, B we get Line(B, F) == external_angle_bisector(A, B, A)
By external_angle_bisector_definition_v0_r on C, F, C, D we get Line(D, F) == external_angle_bisector(C, D, C)
By internal_angle_bisector_definition_v0_r on F, E, F, C we get Line(C, E) == internal_angle_bisector(F, C, F)
By internal_angle_bisector_definition_v0_r on E, F, E, C we get Line(C, F) == internal_angle_bisector(E, C, E)
By perpendicular_lines_draw_intersection on altitude(C, B, D), Line(B, D) we get exists(line_intersection(Line(B, D), altitude(C, B, D)))
By external_angle_bisector_definition_v0_r on F, A, F, B we get Line(A, B) == external_angle_bisector(F, B, F)
By internal_angle_bisector_definition_v0_r on E, C, E, F we get Line(C, F) == internal_angle_bisector(E, F, E)
By internal_angle_bisector_definition_v0_r on E, C, A, D we get Line(C, D) == internal_angle_bisector(A, D, E)
By internal_angle_bisector_definition_v0_r on C, E, C, F we get Line(E, F) == internal_angle_bisector(C, F, C)
By perpendicular_lines_draw_intersection on Line(A, D), altitude(C, A, D) we get exists(line_intersection(Line(A, D), altitude(C, A, D)))
By altitude_definition on D, F, B, f we get f == altitude(D, B, F)
By altitude_definition on B, F, D, Line(B, F) we get Line(B, F) == altitude(B, D, F)
By power_of_a_point_definition on E, B, D, d we get log(power_of_a_point(E, d)) == log(distance(B, E)) + log(distance(D, E))
By radical_axis_definition_v0 on line_intersection(Line(D, E), radical_axis(c, d)), d, c we get power_of_a_point(line_intersection(Line(D, E), radical_axis(c, d)), c) == power_of_a_point(line_intersection(Line(D, E), radical_axis(c, d)), d)
