Assumptions:
A, B, C, D, E, F, G, H: Point
f, g, h, i: Line
c, d, e: Circle
distinct(A, B, C, D, E, F, G, H)
distinct(f, g, h, i)
distinct(c, d, e)
f == Line(A, B)
g == Line(B, C)
h == parallel_line(C, f)
c == Circle(A, B, C)
D in h, c
i == Line(A, D)
E == center(c)
F == midpoint(A, D)
G == line_intersection(g, i)
d == Circle(C, D, F)
e == Circle(E, F, G)
H in e, d

Embedding:
C := {"x": "-0.024204461971476687320858900420716963708400726318359375", "y": "-0.065389281039394731021019424588303081691265106201171875"}
B := {"x": "-0.039024117312750246366892525884395581670105457305908203125", "y": "0.5718637385135341144604126384365372359752655029296875"}
A := {"x": "-0.381507499218881995783902993935043923556804656982421875", "y": "-0.204854409090857003672425662443856708705425262451171875"}
c := {"center": {"x": "-0.35153908451835538462537192979828629772830195216751873196030732985821563855013912486188100372487032570871270761739936674292012669304518425766911468900152789759742162265984447475048597824766752382066474655054461062451162909760106190276799057642380288798226925983605996551457615469220644390723035270569972150351891432562389922872453405501844947878151697697364390221213812644565224856080794178252398550616995530896773912945910070316244783299061482751416366822911612367269372596247857676372793316930323717766432082755810458626654644211929448149968389380276710241800780888608931439126018048789838203477711533250743371210495901697314088100280404581565125756173456259342247607677915938435590099465200373840274581388907383726356176695825481102266011281148016598933335355867713503709939096049895427629990136238459192181720011871029486720883884773226974740550677394511548907009607344561133618794779023938201166537883226666546113102527382786415632019373420653256692623287605693144933376720924740492313278634482679209062035085410229605474736669664672231807114807212366762341761670107245588503899423746462662500380983170144379356348932854159716113063933322172880359483568981905194129831567370686055419563913818128650063848406997541545264442895688557217888084602189561432420166963346486434361410206603277169218940202653705402952429531058868406849336171951337090760398691899023559970518822549803921954660367980206970976937375799452549690344109059544285388927276321960686210465320336157312315807889552704735540152264732936475741924381443133462698383543718903084706465629843685539379197532716195941480486200053909672085904994551206439409180215750180626913960001790117754865858172616596829343426128344377623265465899478703635185725543044502383563581002385649172127975164505565454129747675186859377713325013413126896628349859922841571915203595424024502181577530976520018375275051128313668319327310353377229927503686217730744620923554480298265240831043229515228134799160393434804064431313538135852107844097110107376647438", "y": "0.24579720876114275988212549149665096899613163915307090732830460864776521687588600331389742541083763156154084783325520482058096136964111951548485961384265006652626821816613620636092036805697533524601759174401518119640067167770558224005695809081966611818593341602275772751159254103770577614102488653700138099520416107635979082478089563452658801539659432125729225880177809300004198085139731502398535235257540576377806903029997576225990284573649696962642311848437457639981877465116882358589528545544039875697203838213884724314568178109791135473966454654790304736343186943789473232608336979199499464531284885070866829923746605118163384281920660350828293162574697557442118787615769611392751022224803374719290510767326568848066918525085059456247883219335756892064828854419853314257170542468482024521534088990934979939063812688909275348028536933474605184906647330282494465606986560751864471320723658391089252001802112449687959698134118797559792980611376952177344889342680687055045803384616388055682081807592769735396369915635356690730033584951346538621700795351138378597479894389627983233091450873099208282008028824847224909074551491924085760421113116773402373156338338426138775358568405029410187339039833151135765561199335565618141980335167703059782467509699959999901817068075698841570313163641873762577718886801553102269432729734029223362909225984266649585432808529916802892164843149331139205956455709442341965803687438622181398085869544668947379231496187973246151742397967408510256910224385402614790528891258612534007488991871186877116297616646028736827415515156019493208959631876820927136790209518620072123332642097963694481339332997423455164604432496544537377315142831021564953396744853069284370921190242586909527865071087294143769447099284731907787314871593972825969999011352578955975453560296204712039974664355319443972241578964812658413289886197822661287156563440254921542988081092407858134534246403256930367561457845576247599656357653918544363358255135964189971223385873115114286019990885714518452328"}, "radius_squared": "0.20398498655228757147802517762710007579714436230293869708515346314419872978379837730805451631157903031551183866376344470165529505375002460895566962938412650895328060853209050634612740029219769470322405094341776862278202998010290034550027687497076654007547560928786283386079774775901099576496204161028873397966679120103925692507816271983007039401145349884338135581859180010286344806689685290943761975709024956808931315258368246440181036182034950518541982909621028232184905553194321107932742062802451530780687675188079112256185528733069414161857661547211347899388157213237579955250686373380891771177717994574855726993640858315605020852402481732605043888863681424463598400597775178802089574924280534303478706090184066378103343273175662484753681627146056181582563693334258251956900584249303564811369386055012943843241891019594193853964833935598784710071309651136704100807000912170006459934907279560629933939220173548504133037440634850390527440064816208432841344564410300579589319240040465222657006213801079311324105276082517041435984857172703209051377692337368972778176456602306927875724461966967637968465053222225954939286101764097665926180911380530020291966001724701696016968393779583488964473613598180642705303219489895904790568829395336088725508037199727512091014107456609616255834791496264812970321667844615639569821444289665469387397868050207918713748835042267278858274966762210362719642547341645685549859429072714168414052471624574036164488690738293648443834399551357955566703842729619716240497293144530198993455271745442518781897701926616280538654080677821314377117661936527783850153756713664599917288267268484664757448099724017059945216761203834930461650152870247184972565428596241425593370880884403551747658445698474410639084640617334089311476223087367110936507222047994555512889054637817610369481779924760604213400312855242275568118005888456448431016204981165072931841352173706523364578121771015669643654749178736622300380818436265602337217287107765420735765994771980863353288573289380114679719"}
f := {"point": {"x": "-0.381507499218881995783902993935043923556804656982421875", "y": "-0.204854409090857003672425662443856708705425262451171875"}, "direction": {"x": "0.342483381906131749417010468050648341886699199676513671875", "y": "0.776718147604391118132838300880393944680690765380859375"}}
h := {"point": {"x": "-0.024204461971476687320858900420716963708400726318359375", "y": "-0.065389281039394731021019424588303081691265106201171875"}, "direction": {"x": "0.342483381906131749417010468050648341886699199676513671875", "y": "0.776718147604391118132838300880393944680690765380859375"}}
D := {"x": "0.09898694612617032339274756788821179655100497208142529373579686191144963293539114912540463491655568585049103232343383742433582722874142660022201477525844189184970294590279276963813563757320047132935080539247976972974258106331555198555721377176809614752955450362708014279533357286982585749437096537454659300105452124348822893861601878781145453539882192745656254568212778533391807592197549896711859612281577172687445847919146003222482885688376248058870956710877186908978025903413738043644872849542803491032431590465932762899752038458475819585028018304573230187529679373779084670775598683969624513046903758538731717013577562852685720627931812651805070224514971138406572888325180092621469628300832756633916458067286662273099578991871134740189205314173108304197346406980762464589849326623987744907305148677362500696235142634855200574366526793463247836873876844470764433609256347411380679050073595588085672755132764070588017876354391926059726957980324459323564106371844320978319523013786281829915467652465490551434204522039932936344688709154377719081031494135850845057448925758925307004766538094116249300152054314365798460737950510258606735385762945195133065577432685477213752056868696698620498274577303327441919411041145299896540382539250337723869601251570927839821494237949618576720190800944448203210759458185702240599131531899079081277918621005184270933340635784246251144079225835565285740367196187708990760189394723816684297220756822367306235803710286652475299218505809978721082148978973194458495996753613187312252867062081290588573748258843570487582938993513268397769603686706080033116352600927259554055204726833173823000223776083358956731211262953356657656936382182791753626330094399537545227920482213403303493343316969447580331270776428731993068281519292508471868347862420268710504711745579768708977123244742574552719885586897477654362325515445148188930191664089988903757028128127577281966928156042252429834184714257857756408160792739812846211139895293878152602019634450408941898695513762274764742118", "y": "0.21399654424017002392739657441960802623799624578048265676074124023545850375630936359675705319498644703157108149660177837760087414349064303459743153014977186340974223891715131374601265942936755298884321765016781583472213554921818536103600693614797585951499195306902413174141221438373456767961025181327674183402860925843602590608869487652190784881739997945357977288180497374529945965079771182958992009094936142863646681810761155228145282009615729407485423224919151158649569744513274550853965984894697182675700246792019188537922728085651085806160551674883740332266028157010403129221725990762554438458211283494065778865507141341252680258401683266389873656391205512329585529334686781887746079585579599819267147017853755911910940976883918905630648573467867596233617043391996572172689949999029435597600416738114979371411494322742960429536847813516473219456622714352575676166611993805654658706274013460874273791862439064840523766576049281506525690068661569728017250048374290042639814427937242544790658368865575677443064834666940966487274325807011380424321648622753283745985908514222135669405746857857854970013249261454327165094750991043515016648280333780383624110678997499011657899759232241763774947819731346446036151530357271769211335545239656840572271578072641583245863666437573286071422727735614305081050608609432404819645390698772719371155775224773868755311792334681023480024009966835157692698383146056196438063815913331422310894687560631972161890252526294064209337094900478341388960852012843665028383676513038511419128303631950936633230209788947466335151207286642029608374972424562817578717067161311328901865787643227134559371155177628045451251039902517136368574953701960273744422740825580289108873046614103243016373331573286307052895082000448792566497626233636966532733309360131135871491467436698843474079342230648993859363747563732669564704897854362451157596535999165869091624752280277780682761008193781587203071540664941658500187173557093422580347548794171162285814324277979601597524384269830705204856"}
i := {"point": {"x": "-0.381507499218881995783902993935043923556804656982421875", "y": "-0.204854409090857003672425662443856708705425262451171875"}, "direction": {"x": "0.48049444534505231917665056182325572010780962906384716873579686191144963293539114912540463491655568585049103232343383742433582722874142660022201477525844189184970294590279276963813563757320047132935080539247976972974258106331555198555721377176809614752955450362708014279533357286982585749437096537454659300105452124348822893861601878781145453539882192745656254568212778533391807592197549896711859612281577172687445847919146003222482885688376248058870956710877186908978025903413738043644872849542803491032431590465932762899752038458475819585028018304573230187529679373779084670775598683969624513046903758538731717013577562852685720627931812651805070224514971138406572888325180092621469628300832756633916458067286662273099578991871134740189205314173108304197346406980762464589849326623987744907305148677362500696235142634855200574366526793463247836873876844470764433609256347411380679050073595588085672755132764070588017876354391926059726957980324459323564106371844320978319523013786281829915467652465490551434204522039932936344688709154377719081031494135850845057448925758925307004766538094116249300152054314365798460737950510258606735385762945195133065577432685477213752056868696698620498274577303327441919411041145299896540382539250337723869601251570927839821494237949618576720190800944448203210759458185702240599131531899079081277918621005184270933340635784246251144079225835565285740367196187708990760189394723816684297220756822367306235803710286652475299218505809978721082148978973194458495996753613187312252867062081290588573748258843570487582938993513268397769603686706080033116352600927259554055204726833173823000223776083358956731211262953356657656936382182791753626330094399537545227920482213403303493343316969447580331270776428731993068281519292508471868347862420268710504711745579768708977123244742574552719885586897477654362325515445148188930191664089988903757028128127577281966928156042252429834184714257857756408160792739812846211139895293878152602019634450408941898695513762274764742118", "y": "0.41885095333102702759982223686346473494342150823165453176074124023545850375630936359675705319498644703157108149660177837760087414349064303459743153014977186340974223891715131374601265942936755298884321765016781583472213554921818536103600693614797585951499195306902413174141221438373456767961025181327674183402860925843602590608869487652190784881739997945357977288180497374529945965079771182958992009094936142863646681810761155228145282009615729407485423224919151158649569744513274550853965984894697182675700246792019188537922728085651085806160551674883740332266028157010403129221725990762554438458211283494065778865507141341252680258401683266389873656391205512329585529334686781887746079585579599819267147017853755911910940976883918905630648573467867596233617043391996572172689949999029435597600416738114979371411494322742960429536847813516473219456622714352575676166611993805654658706274013460874273791862439064840523766576049281506525690068661569728017250048374290042639814427937242544790658368865575677443064834666940966487274325807011380424321648622753283745985908514222135669405746857857854970013249261454327165094750991043515016648280333780383624110678997499011657899759232241763774947819731346446036151530357271769211335545239656840572271578072641583245863666437573286071422727735614305081050608609432404819645390698772719371155775224773868755311792334681023480024009966835157692698383146056196438063815913331422310894687560631972161890252526294064209337094900478341388960852012843665028383676513038511419128303631950936633230209788947466335151207286642029608374972424562817578717067161311328901865787643227134559371155177628045451251039902517136368574953701960273744422740825580289108873046614103243016373331573286307052895082000448792566497626233636966532733309360131135871491467436698843474079342230648993859363747563732669564704897854362451157596535999165869091624752280277780682761008193781587203071540664941658500187173557093422580347548794171162285814324277979601597524384269830705204856"}}
g := {"point": {"x": "-0.039024117312750246366892525884395581670105457305908203125", "y": "0.5718637385135341144604126384365372359752655029296875"}, "direction": {"x": "0.014819655341273559046033625463678617961704730987548828125", "y": "-0.637253019552928845481432063024840317666530609130859375"}}
G := {"x": "-0.028124910851688757336525083456265442783112084021849979921781633593968130638040030737327233174363988976865616925122282494694202859095548090057494124518802344080965016522780747380525244717235008702016382425238130423490071491636160596204208857138271953120427164663366982076486906911755546456874615869165661156462926752125178414394541674612732915204418254883293581576167369113189799039795295559585804286060860204870706115460227171300722603809905607472911500787314220846839996613674929814595191719674669300930755359595967868169233599558511402270344020368392787039361753178607860957536045678230871429207831112309404510669111084695105098255931395800672186778623181171390019074273826653447176417710821438875210607402892909666662095282922296679715887229125752194449707976582169368091808247791149746400173215860560062841828099024248237397450920406799637700557685996917311073494461905290556822770477187394269027559001296211476054362798758108560819435683912350412957687242144211880331081087219200319027042981809316090162427840087619021989369214265878229361114342042099392292392471855729608229334572867413962296923272586244779276773032593299556636336840582755491348557252184739110179684048192922393571352000546945718759572004808493504294912202011657249413481641433198767526308894218271550270706190237886571799907740767768062358973396046673870356207680562701425230944597316182331688722471047736654651902707065711467185668580183154984106187360805985542518224931145025132610424304522668615690386375518381728195167005043109312212834426900670638934695368297467917119713369663752628302032154404384783270566258409245065996316599041322980523166341518477887445236711141065771859274949519151909707623125865927064665550102284756190066009426185498154815321261520822152554082469522267976229431744121424538290339017003378036618989949483853220093840875251503858866417547951738362512009504914697290917584395265879302654310027709659375452580267798863425244123725078815935347805358424060801727963202574980196340591101253793346840568", "y": "0.10319209480138389228483590298170942178490113529792061949512774340753119149444213737679064388953231415255335694983419641185400267618187285060059941300682739016941742418381632075215930102127838655298696996659357195153472602392155478803167647229188460439641276586362845174566170373146479016776404101527966548825967494246415210068821852431347709759305176551855666269352657521529998282653012252402890234772563463969614901059440797849243001396271362826451215561517103177633905718252741622546257221898525393020501129120731434724360322049076615556946208393991052076482574205330304342230168568289837424466740363237265490237350420204837444422578284232539366025534260525090906268257590610736980185265219650572646349795059631143679788940281526429535937584495552230722136065407158872768445781631996878917300543421645664156623914817975689275179685848065495239204250882978343838700547195112567416509023239661316921626322608142588625710985430280534295325650869206610325860291070452210921836463424690133047938770247846515061332344719420602105026776287935921436002335932136398769007720621744059887270088572761366998942034250919303889793872509685173468650966238095426151995449241127923096590000391071411425460551687239687894062256650919622004733329209558986123233090130235613164775396110195702701480231690963477421043973372861360213418825501002453139182239081226072576284870397414045443223072389523737104587035462350285815030681262991019787080643501573099992527801744463657741890682222842018442487378282655735218468451793286974222678650350421910227559759260912167106650493960194205314437489275948906541059354987625444394331999564414420619763063706824013285545493410071870081720254261570968976431705188192741909221225323829240229632697801807992276119226636073668189694806511025280463716397871236665813669718735187393948344493535988877562349932832479889481269852962439861470944277904428114231690341094069558599411618522593794505169321262959524465179386855066646083970896197783317656559487754605851983219453044302609942574"}
F := {"x": "-0.14126027654635583619557771302341606350289984245049829063210156904427518353230442543729768254172215707475448383828308128783208638562928669988899261237077905407514852704860361518093218121339976433532459730376011513512870946834222400722139311411595192623522274818645992860233321356508707125281451731272670349947273937825588553069199060609427273230058903627171872715893610733304096203901225051644070193859211413656277076040426998388758557155811875970564521644561406545510987048293130978177563575228598254483784204767033618550123980770762090207485990847713384906235160313110457664612200658015187743476548120730634141493211218573657139686034093674097464887742514430796713555837409953689265185849583621683041770966356668863450210504064432629905397342913445847901326796509618767705075336688006127546347425661318749651882428682572399712816736603268376081563061577764617783195371826294309660474963202205957163622433617964705991061822804036970136521009837770338217946814077839510840238493106859085042266173767254724282897738980033531827655645422811140459484252932074577471275537120537346497616730952941875349923972842817100769631024744870696632307118527402433467211283657261393123971565651650689750862711348336279040294479427350051729808730374831138065199374214536080089252881025190711639904599527775898394620270907148879700434234050460459361040689497407864533329682107876874427960387082217357129816401906145504619905302638091657851389621588816346882098144856673762350390747095010639458925510513402770752001623193406343873566468959354705713125870578214756208530503243365801115198156646959983441823699536370222972397636583413088499888111958320521634394368523321671171531808908604123186834952800231227386039758893298348253328341515276209834364611785634003465859240353745764065826068789865644747644127210115645511438377628712723640057206551261172818837242277425905534904167955005548121485935936211359016535921978873785082907642871071121795919603630093576894430052353060923698990182774795529050652243118862617628941", "y": "0.0045710675746565101274854559878756587662854916646553908803706201177292518781546817983785265974932235157855407483008891888004370717453215172987157650748859317048711194585756568730063297146837764944216088250839079173610677746090926805180034680739879297574959765345120658707061071918672838398051259066383709170143046292180129530443474382609539244086999897267898864409024868726497298253988559147949600454746807143182334090538057761407264100480786470374271161245957557932478487225663727542698299244734859133785012339600959426896136404282554290308027583744187016613301407850520156461086299538127721922910564174703288943275357067062634012920084163319493682819560275616479276466734339094387303979278979990963357350892687795595547048844195945281532428673393379811680852169599828608634497499951471779880020836905748968570574716137148021476842390675823660972831135717628783808330599690282732935313700673043713689593121953242026188328802464075326284503433078486400862502418714502131990721396862127239532918443278783872153241733347048324363716290350569021216082431137664187299295425711106783470287342892892748500662463072716358254737549552175750832414016689019181205533949874950582894987961612088188747390986567322301807576517863588460566777261982842028613578903632079162293183321878664303571136386780715254052530430471620240982269534938635968557788761238693437765589616734051174001200498341757884634919157302809821903190795666571115544734378031598608094512626314703210466854745023917069448042600642183251419183825651925570956415181597546831661510489447373316757560364332101480418748621228140878935853358065566445093289382161356727968557758881402272562551995125856818428747685098013687221137041279014455443652330705162150818666578664315352644754100022439628324881311681848326636665468006556793574573371834942173703967111532449692968187378186633478235244892718122557879826799958293454581237614013889034138050409689079360153577033247082925009358677854671129017377439708558114290716213898980079876219213491535260242803"}
E := {"x": "-0.35153908451835538462537192979828629772830195216751873196030732985821563855013912486188100372487032570871270761739936674292012669304518425766911468900152789759742162265984447475048597824766752382066474655054461062451162909760106190276799057642380288798226925983605996551457615469220644390723035270569972150351891432562389922872453405501844947878151697697364390221213812644565224856080794178252398550616995530896773912945910070316244783299061482751416366822911612367269372596247857676372793316930323717766432082755810458626654644211929448149968389380276710241800780888608931439126018048789838203477711533250743371210495901697314088100280404581565125756173456259342247607677915938435590099465200373840274581388907383726356176695825481102266011281148016598933335355867713503709939096049895427629990136238459192181720011871029486720883884773226974740550677394511548907009607344561133618794779023938201166537883226666546113102527382786415632019373420653256692623287605693144933376720924740492313278634482679209062035085410229605474736669664672231807114807212366762341761670107245588503899423746462662500380983170144379356348932854159716113063933322172880359483568981905194129831567370686055419563913818128650063848406997541545264442895688557217888084602189561432420166963346486434361410206603277169218940202653705402952429531058868406849336171951337090760398691899023559970518822549803921954660367980206970976937375799452549690344109059544285388927276321960686210465320336157312315807889552704735540152264732936475741924381443133462698383543718903084706465629843685539379197532716195941480486200053909672085904994551206439409180215750180626913960001790117754865858172616596829343426128344377623265465899478703635185725543044502383563581002385649172127975164505565454129747675186859377713325013413126896628349859922841571915203595424024502181577530976520018375275051128313668319327310353377229927503686217730744620923554480298265240831043229515228134799160393434804064431313538135852107844097110107376647438", "y": "0.24579720876114275988212549149665096899613163915307090732830460864776521687588600331389742541083763156154084783325520482058096136964111951548485961384265006652626821816613620636092036805697533524601759174401518119640067167770558224005695809081966611818593341602275772751159254103770577614102488653700138099520416107635979082478089563452658801539659432125729225880177809300004198085139731502398535235257540576377806903029997576225990284573649696962642311848437457639981877465116882358589528545544039875697203838213884724314568178109791135473966454654790304736343186943789473232608336979199499464531284885070866829923746605118163384281920660350828293162574697557442118787615769611392751022224803374719290510767326568848066918525085059456247883219335756892064828854419853314257170542468482024521534088990934979939063812688909275348028536933474605184906647330282494465606986560751864471320723658391089252001802112449687959698134118797559792980611376952177344889342680687055045803384616388055682081807592769735396369915635356690730033584951346538621700795351138378597479894389627983233091450873099208282008028824847224909074551491924085760421113116773402373156338338426138775358568405029410187339039833151135765561199335565618141980335167703059782467509699959999901817068075698841570313163641873762577718886801553102269432729734029223362909225984266649585432808529916802892164843149331139205956455709442341965803687438622181398085869544668947379231496187973246151742397967408510256910224385402614790528891258612534007488991871186877116297616646028736827415515156019493208959631876820927136790209518620072123332642097963694481339332997423455164604432496544537377315142831021564953396744853069284370921190242586909527865071087294143769447099284731907787314871593972825969999011352578955975453560296204712039974664355319443972241578964812658413289886197822661287156563440254921542988081092407858134534246403256930367561457845576247599656357653918544363358255135964189971223385873115114286019990885714518452328"}
e := {"center": {"x": "-0.18983199768502207098094850662727587025570701809468435594104448172609188459408957779960411844961715734278916227126082461880716477607036617386330440676016512083919331959131261106550561148245126626134056448789137052400085029461861124948609971678103742055134821224971347379553153080198099518205248428743269132999092053887453882155953786481559119699296761592846874189415274777942102380030161867105489489611540775691922262245966393723158521840026021749353758450821517225976686128807675328916156244448895323929753809357703622721789002083890294188501395708557994472868478103234858767439811308306462673199247322240841911138703505083412298962936772080816172217017887188240624757552649301890153870618141258863897821064598337346511193112058855385118800002030295909189153076762965220259559960414505201135003728912257599232951410886727155230314488406953469255303222997101640007179526767545094650535913371338814034646891678143846859269403629298635856981470905944148994196005910057166483242414823330262107991466331805409039138934709495753836836795545630027371613120708288350785500458646409274663416440516602029365036655214384428642013118056744835888348808690224214747169647100189552573899986094989147388349556936411610969902803739195447846967057944861471414716383166440654586398926384156794694240412813532913199465488365241104594163435331767896942478470003803616641746575815320896569695534827288793709925319343389058847752116908884024050481422570071419820374884718231599735753875394212086942423263552271454179834482618623703481603912066600263295926540274324938209218483405030401104700374078317209903771412947417089342768327227669368730748424951014207829241836452112166025892833784256010157094220465485164866010454853589627096163242831526099522556564268865693691691705728896125876345424799500915771179457556732350145124427435613446962293841474587444034109642885846927313238000809891698705542874939982580096467344494348341083090790630092303882621707868698410834789848117920442118613816897816935870951603617743355665747", "y": "0.17449465178126332608348069723918019539051638722549576341171617602764820418516407034534403465018497285704710239154470061621748202291149618304272951342473872834784282117497626355653983453912686089950228085530437657396769885081356851404431728155577536129117309094319308962862712238458528315439446377614052324173191800941197146273455707942003255649482304338792446074765233410767098183896371877400712735015052020173710902044719187037616642984960529894546763704977280408807891591684811990567892883721282634358852483667308079519464250079433875515456331524390678406412880574559888787419252773744668444499012624154066160080548512661500414352249472291683829594054479041266512527936680111064865603745011512645968430281193099995873353732683292942891910401915654561393482459913506093512808162050239451719417316206290322047843863753442482311604111390770050212055449106630419152153766877932215943914873449026203086814062360296138292704559774539047044153131123079393835374816875569632983819924020539094365010288920308125228851130177388646417530180619641230028851565641637388683243807505686021560180769722930287640475031537883264399434212000804629614536039677434414262575893789777030935974284398050410806399795760195411829811727993242620073356832188631022952850299915097806533296232092947272135896697666418619999381430087207231241425777617515838251045732532746361080858839463665424167693957769427438155271745585896313890417184350806600592583256523121023685879648966218451946816540095125264349698801334029175004498671525949754115083821110804393671928687953470451967033004558106849261698560576384916838924782253122758258832320831189057550551198352123734225074962953308203729517698546296266964914225020631013140071207783208074878748884444551068022783162960402787988504839052499053216857704611907810894561639515696052994159578945654160767295755898646273947279869580131261379050420672341517887339211093238708366972932462925362436365389554267886032417872254492595223664575666873753813891436813860483134619721965008564197451"}, "radius_squared": "0.031233236563992153690287946566709216106908211326652171357056006098005920863846878234688511938582277779743697334461712657530309239002598327806732872213089264513894464764567496297913213908616590777964908620842016444630447302692124084551095921963199367178119051075303293831746185872523338434518715927926284401327653627193194256205349917802508805219366715933405681149978115802519042744490764388118472435479625356263773718625279177852372589433436632442650665438005893367087796056649931814711688079727232311305326524361291418772398212570541501119672789394802780360487643441278234860808417085773094830303021778779856131600058152249348456596499189260817965848045123246212776117853502919285390050534428220959412451336646672018602643874155405188335790653560882273009097336560541742374377706701446823703256500821640384107336501328987851363752985455850593475203870938836166776594677438619574774365028451184656754849733835177822045334168304731979320211259479567310313414367253969548286657335692608611512866426186611962291413517953543914219644717232685806477617734744242119294868435232232618296299539779055993843701856982046146222740280223632595075718153126536878159638147024464841662706003986936323127611396311024436054145459597856001953598782270593147404757923428104666242490290322083290440426746165811216148460676620730655204728172792921717229420979841128240442916730354594981971349806939810630939596816531124151838312458842126949893309367977543293053562823739025748822532855858297163420808701026908628274380696671548429519152264486570234447671694477346114586630842068908492412571734793679845366818645624853568705514766270270536907221832830185994919893839025285938473484806964026871874222355574640280120057594553998147860189749129164450714566732945925420490833882507903029279338785493384392511431934696696896327989509605041235782892166986707472115685697457251428113480130408020592762771642314086507803975133258898919518278899010621541080556223795464188388386366996498476158052219288216076499461425541288556304018"}
d := {"center": {"x": "-0.0081479772405306806479475223019153161157135632906436342750427416979435014497114234301543740043189618472458106434456550817912559371833754891098406171007588619219293066664594508729266299053706709386418509676055503985547037584077785168528225707282984531724557446896362990857856661926214312782351509025720815552092677263896346792788029882645797785269832551347313711031697992074419589213723492582582192514459360352875556617289399922445134628141866470262203569097398896197950728824578659805014938065469883753818232351170131696362379985486866537898536973412547143625773915536382367899452388115175016776957096215591629935950287373754369530179343315073419600450622357440196758214478694747750144509062717275430631583195276493962856306969252962171639039001425895211591633425195886551926138502656838458847263451396813374995939274667021703320640104117932976588080750940824734513188626799175570550493715028797029920627988975677486979371955269078931895487775813821172106910645616691799001992710400084280741062370554341145815583624349319235093133623333710649809888167463585339134017999848934827032971211766965700334030711717419245033982385513025171460479808452816180713169805834381040408654447145658874880949278957734443043777958079842370461388372382152552132506199202085389111312139114326186427960704538071807384355000836902837740612148264901345196961918606631523002723902720932988070583521622327244067853552297441579423510007477571500543490500885504513585277748764217590070856543962243760169876370697665996296681018634125481556016097797814008542469461160697295962129127506994895705921476688714258544036408816941923521112364103923032303269446306440643873073551453984072008802229339747423273154146570475523238279029578635203473719772664683906244587064189328315774198914175524591152291351662088406698209672612575247120620595005845597491729429525644558679573314003571912658293367062917956735328029030411584018457987456709032383381451125217870370764148156970577054431949932307626847880963922851958425584385389727018266078", "y": "0.094383535603474645691600577481453089383382797129775372114546268658232586034397376650106052202023269103976688467317915966730526618544192498261155034775887996463001279377744989504899093021552087958328620303322633494779546082352877129000259932563660277059126516993452611683401184743080359276916267886710911353792430899344715311068483890285549050640152593877374904964172562276140452986326865516348780936341012742371265160150076392965097981294206191035632760649023065125241554059516264333280752838373515923706836203433479292859251119989815788801114112389767899169993318281047255796361082716458344982913689461261082672217325809380081385652781041959596683679918048935646836672952276299908956025001767186270363939623292175690351056409328619331501980303857329229483876453678827693235620923050238999439407083279236214071857333014971100274675745967769142982304366557849497144081621139515328902358122188886231859489091904805242971111736894424895836961505962754051833731610240410806501901315306443962893802139962451682192256113786184608124129957883826419943339043567314920770554217351093204387294635092948065887337601998335387264621536622968234435709839937403014336665089284820583004858388050097864820996553618893253132189588904877563012002064552169900501440277802987210582482598262422023678053733114315359285477269886856482394798340899390250423382148822595479794758185918215828837836763912277234902451699394232935638518500970549904849656274608594839582561807089409008703899469523919130906538176446945922853823365079038870180493964051136681519673854247630660862041457536228004947181507764129565195461603168610573252794851306148314276173069939691958710314137809831021605407929459144492176649890508725217672177185681999375831317600963430006290738735122302636857160278761179577432933522052483447350704809241198693780891194739811403841477380760249197973478649199189710159500054458843252242706854362889624151871890680956304724110250994641441259162571874722917186119178447187714743811258896222465442304789725421636181977"}, "radius_squared": "0.025785163639911059944658330675534854807270145469331083587149465611733970634792140263681815461030265698868876110558487269156760870558721953681223940620245385337546627567173892809122046178431125179763252363155068515001979459851142564009034779685591720208063547820413279813799334635879041700896721213011458001858273668796760924516588879030944736269317421838727152527306093320370900194221300745816055412559787189804004155782773752814145768059817523362465439736679829488950670565883440251923069358665175512024335459938576378174633741881130492307360021613214939680708344144394842246417761887264324986806141000062699148869763415356715059407665775185373610597439117936516633706672624601648892815753133903948163312305979011802526946200256744376025973771600543581456935420649244432377256575954165082474005177200128801684458716815417178169575585657436386453690631471661812647332672000529889590030583710237254849089412762624299086123099040158864149201135203884263796364541169238968799239818410840718963030984805438631259774380005895240955179053498108049961619875805743870255489709341565435563370753493445973023178573102648726063383918403249400460060130300186478932537206012131380088620015993126160147563397584339320293998787392452884698186728098739657528381212004482026310641431325618054524800934246386369391352931978139554606016060501464163404345367636992204994013614149066190971284035297855837960557708485222505398618037825652918684204703842478351960766555483730768964437788831745908581853430532312817210221924587033480485921051883210016372153412201653924734265699380087906263939675602141725175872016599203277322120172049523984316549066382465333887319649340388289669706883632660596254143004981941547106873931752432641586460711517580397585774257375663214613148834886543005428417025393446697503244219692259183829463136334719090923561415011427077487045704877266460571119109025282487343462882871252686439834294570329382910600912101139290463518900686158377497617976604168007948043072750543519152544073492397165183149"}
H := {"x": "-0.0316142896421134668438757131525562726892530918121337890625", "y": "0.2532372287370696917196966069241170771420001983642578125"}

Need to prove:
collinear(C, G, H)

Proof:
By line_definition on A, G, i we get i == Line(A, G)
By line_definition on G, B, g we get g == Line(B, G)
By line_definition on D, G, i we get i == Line(D, G)
By line_definition on G, C, g we get g == Line(C, G)
By line_definition on D, C, h we get h == Line(C, D)
By circle_definition on H, F, E, e we get e == Circle(E, F, H)
By circle_definition on D, C, B, c we get c == Circle(B, C, D)
By line_intersection_definition on D, i, h we get D == line_intersection(h, i)
By circle_definition on H, C, D, d we get d == Circle(C, D, H)
By line_intersection_definition on B, g, f we get B == line_intersection(f, g)
By circle_definition on B, A, D, c we get c == Circle(A, B, D)
By line_intersection_definition on C, g, h we get C == line_intersection(g, h)
By circle_definition on H, D, F, d we get d == Circle(D, F, H)
By circle_definition on H, E, G, e we get e == Circle(E, G, H)
By line_intersection_definition on A, f, i we get A == line_intersection(f, i)
By circle_definition on C, H, F, d we get d == Circle(C, F, H)
By circle_definition on A, C, D, c we get c == Circle(A, C, D)
By circle_definition on F, G, H, e we get e == Circle(F, G, H)
By line_unique_intersection_v1 on i, h, D, C we get C not in i
By line_unique_intersection_v1 on f, g, B, G we get G not in f
By line_unique_intersection_v1 on h, i, D, G we get G not in h
By line_unique_intersection_v1 on g, i, G, D we get D not in g
By line_unique_intersection_v1 on h, g, C, B we get B not in h
By line_unique_intersection_v1 on h, i, D, A we get A not in h
By line_unique_intersection_v1 on g, f, B, A we get A not in g
By line_unique_intersection_v1 on i, f, A, B we get B not in i
By line_unique_intersection_v1 on f, i, A, D we get D not in f
By line_unique_intersection_v1 on f, g, B, C we get C not in f
By between_implies_orientation on G, D, F, A we get orientation(A, G, F) == orientation(D, F, G) mod 360, orientation(A, G, D) == orientation(D, F, G) mod 360
By between_implies_orientation on G, A, F, D we get orientation(A, F, G) == orientation(D, G, F) mod 360, orientation(A, D, G) == orientation(A, F, G) mod 360
By between_imply_not_between on A, F, D we get collinear_and_not_between(D, A, F)
By between_imply_not_between on D, F, A we get collinear_and_not_between(A, D, F)
By parallel_line_definition on A, f, h we get f == parallel_line(A, h)
By circle_radius_v0_r on C, c we get radius(c) == distance(C, center(c))
By circle_radius_v0_r on A, c we get radius(c) == distance(A, center(c))
By circle_radius_v0_r on D, c we get radius(c) == distance(D, center(c))
By parallel_line_definition on D, h, f we get h == parallel_line(D, f)
By parallel_line_definition on B, f, h we get f == parallel_line(B, h)
By circle_radius_v0_r on B, c we get radius(c) == distance(B, center(c))
By center_not_on_circle on c we get center(c) not in c
By different_points_v1 on A, B we get 0 != distance(A, B)
By different_points_v1 on A, D we get 0 != distance(A, D)
By different_points_v1 on B, C we get 0 != distance(B, C)
By in_imply_collinear on G, A, D we get collinear(A, D, G)
By in_imply_concyclic on A, C, B, D we get concyclic(A, B, C, D)
By not_in_line_equivalent_to_not_collinear_v0_r on D, C, B we get D not in Line(B, C)
By circle_circle_intersection_has_at_most_two_points_0 on D, C, B, c, d we get B not in d
By in_imply_collinear on G, B, C we get collinear(B, C, G)
By in_imply_concyclic on C, F, D, H we get concyclic(C, D, F, H)
By in_imply_concyclic on E, F, G, H we get concyclic(E, F, G, H)
By not_in_line_equivalent_to_not_collinear_v0_r on F, B, C we get F not in Line(B, C)
By circle_circle_intersection_has_at_most_two_points_0 on H, F, D, d, e we get D not in e
By circle_circle_intersection_has_at_most_two_points_0 on H, F, C, d, e we get C not in e
By not_in_line_equivalent_to_not_collinear_v0_r on F, B, A we get F not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on C, A, B we get C not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on D, B, A we get D not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on A, B, C we get A not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on B, D, A we get B not in Line(A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on G, B, A we get G not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on H, D, A we get H not in Line(A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on E, D, A we get E not in Line(A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on E, B, A we get E not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on H, B, A we get H not in Line(A, B)
By circle_circle_intersection_has_at_most_two_points_0 on H, F, G, e, d we get G not in d
By line_circle_intersection_has_at_most_two_points_0 on A, D, F, c we get F not in c
By circle_circle_intersection_has_at_most_two_points_0 on F, H, E, e, d we get E not in d
By line_circle_intersection_has_at_most_two_points_0 on D, F, A, d we get A not in d
By not_in_line_equivalent_to_not_collinear_v0_r on E, B, C we get E not in Line(B, C)
By circle_circle_intersection_has_at_most_two_points_0 on C, D, H, d, c we get H not in c
By not_in_line_equivalent_to_not_collinear_v0_r on C, A, D we get C not in Line(A, D)
By power_of_a_point_on_circle on C, c we get 0 == power_of_a_point(C, c)
By power_of_a_point_in_circle on H, d we get 0 == power_of_a_point(H, d)
By power_of_a_point_in_circle on D, c we get 0 == power_of_a_point(D, c)
By power_of_a_point_in_circle on A, c we get 0 == power_of_a_point(A, c)
By power_of_a_point_in_circle on E, e we get 0 == power_of_a_point(E, e)
By power_of_a_point_in_circle on H, e we get 0 == power_of_a_point(H, e)
By power_of_a_point_on_circle on D, d we get 0 == power_of_a_point(D, d)
By power_of_a_point_in_circle on F, d we get 0 == power_of_a_point(F, d)
By power_of_a_point_on_circle on G, e we get 0 == power_of_a_point(G, e)
By power_of_a_point_on_circle on F, e we get 0 == power_of_a_point(F, e)
By power_of_a_point_in_circle on C, d we get 0 == power_of_a_point(C, d)
By angles_on_chord_v1 on G, F, E, H, e we get angle(G, E, F) == angle(G, H, F) mod 360
By power_of_a_point_on_circle on B, c we get 0 == power_of_a_point(B, c)
By angles_on_chord_v1 on D, C, H, F, d we get angle(D, F, C) == angle(D, H, C) mod 360
By angles_on_chord_v2 on H, F, G, E, e we get angle(H, G, F) == angle(H, E, F) + 180 mod 360
By angles_on_chord_v0 on H, E, F, G, e we get angle(H, F, E) == angle(H, G, E) mod 360
By angles_on_chord_v3 on G, E, H, F, e we get angle(G, H, E) == angle(G, F, E) + 180 mod 360
By angles_on_chord_v1 on C, F, H, D, d we get angle(C, D, F) == angle(C, H, F) mod 360
By angles_on_chord_v3 on D, F, H, C, d we get angle(D, H, F) == angle(D, C, F) + 180 mod 360
By angles_on_chord_v1 on H, G, F, E, e we get angle(H, E, G) == angle(H, F, G) mod 360
By angles_on_chord_v1 on D, C, A, B, c we get angle(D, A, C) == angle(D, B, C) mod 360
By angles_on_chord_v3 on F, D, C, H, d we get angle(F, C, D) == angle(F, H, D) + 180 mod 360
By angles_on_chord_v3 on H, C, F, D, d we get angle(H, F, C) == angle(H, D, C) + 180 mod 360
By angles_on_chord_v0 on C, D, B, A, c we get angle(C, A, D) == angle(C, B, D) mod 360
By angles_on_chord_v0 on D, H, C, F, d we get angle(D, C, H) == angle(D, F, H) mod 360
By angles_on_chord_v0 on H, F, D, C, d we get angle(H, C, F) == angle(H, D, F) mod 360
By angles_on_chord_v0 on G, H, F, E, e we get angle(G, E, H) == angle(G, F, H) mod 360
By angles_on_chord_v3 on A, D, C, B, c we get angle(A, C, D) == angle(A, B, D) + 180 mod 360
By angles_on_chord_v2 on A, D, B, C, c we get angle(A, B, D) == angle(A, C, D) + 180 mod 360
By angles_on_chord_v0 on C, D, F, H, d we get angle(C, F, D) == angle(C, H, D) mod 360
By angles_on_chord_v0 on E, F, H, G, e we get angle(E, G, F) == angle(E, H, F) mod 360
By angles_on_chord_v1 on A, B, C, D, c we get angle(A, C, B) == angle(A, D, B) mod 360
By angles_on_chord_v0 on A, C, B, D, c we get angle(A, B, C) == angle(A, D, C) mod 360
By angles_on_chord_v3 on D, A, B, C, c we get angle(D, B, A) == angle(D, C, A) + 180 mod 360
By angle_to_center on A, B, D, c we get 2 * angle(A, B, D) == angle(A, center(c), D) mod 360
By angles_on_chord_v2 on D, F, C, H, d we get angle(D, C, F) == angle(D, H, F) + 180 mod 360
By angles_on_chord_v1 on E, H, G, F, e we get angle(E, F, H) == angle(E, G, H) mod 360
By angles_on_chord_v0 on D, B, A, C, c we get angle(D, A, B) == angle(D, C, B) mod 360
By angles_on_chord_v1 on C, A, D, B, c we get angle(C, B, A) == angle(C, D, A) mod 360
By angles_on_chord_v1 on H, D, F, C, d we get angle(H, C, D) == angle(H, F, D) mod 360
By angles_on_chord_v0 on B, A, D, C, c we get angle(B, C, A) == angle(B, D, A) mod 360
By angles_on_chord_v1 on F, E, H, G, e we get angle(F, G, E) == angle(F, H, E) mod 360
By angles_on_chord_v2 on G, E, F, H, e we get angle(G, F, E) == angle(G, H, E) + 180 mod 360
By angle_to_center on A, C, D, c we get 2 * angle(A, C, D) == angle(A, center(c), D) mod 360
By angles_on_chord_v2 on D, A, C, B, c we get angle(D, C, A) == angle(D, B, A) + 180 mod 360
By angles_on_chord_v0 on F, C, H, D, d we get angle(F, D, C) == angle(F, H, C) mod 360
By angles_on_chord_v2 on C, H, F, D, d we get angle(C, F, H) == angle(C, D, H) + 180 mod 360
By angles_on_chord_v3 on F, H, G, E, e we get angle(F, G, H) == angle(F, E, H) + 180 mod 360
By angles_on_chord_v3 on B, C, A, D, c we get angle(B, A, C) == angle(B, D, C) + 180 mod 360
By angles_on_chord_v3 on H, F, E, G, e we get angle(H, E, F) == angle(H, G, F) + 180 mod 360
By angles_on_chord_v2 on C, B, A, D, c we get angle(C, A, B) == angle(C, D, B) + 180 mod 360
By angles_on_chord_v3 on E, G, F, H, e we get angle(E, F, G) == angle(E, H, G) + 180 mod 360
By angles_on_chord_v2 on E, G, H, F, e we get angle(E, H, G) == angle(E, F, G) + 180 mod 360
By angles_on_chord_v2 on B, C, D, A, c we get angle(B, D, C) == angle(B, A, C) + 180 mod 360
By angles_on_chord_v2 on F, H, E, G, e we get angle(F, E, H) == angle(F, G, H) + 180 mod 360
By angles_on_chord_v1 on B, D, A, C, c we get angle(B, A, D) == angle(B, C, D) mod 360
By angles_on_chord_v0 on F, G, E, H, e we get angle(F, E, G) == angle(F, H, G) mod 360
By angles_on_chord_v1 on F, H, D, C, d we get angle(F, C, H) == angle(F, D, H) mod 360
By angles_on_chord_v2 on F, D, H, C, d we get angle(F, H, D) == angle(F, C, D) + 180 mod 360
By angles_on_chord_v3 on C, B, D, A, c we get angle(C, D, B) == angle(C, A, B) + 180 mod 360
By angles_on_chord_v3 on C, H, D, F, d we get angle(C, D, H) == angle(C, F, H) + 180 mod 360
By angle_to_center on B, C, A, c we get 2 * angle(B, C, A) == angle(B, center(c), A) mod 360
By angle_to_center on C, A, B, c we get 2 * angle(C, A, B) == angle(C, center(c), B) mod 360
By angle_to_center on A, D, C, c we get 2 * angle(A, D, C) == angle(A, center(c), C) mod 360
By angles_on_chord_v2 on H, C, D, F, d we get angle(H, D, C) == angle(H, F, C) + 180 mod 360
By angle_to_center on B, C, D, c we get 2 * angle(B, C, D) == angle(B, center(c), D) mod 360
By angle_to_center on B, D, C, c we get 2 * angle(B, D, C) == angle(B, center(c), C) mod 360
By angle_to_center on C, B, D, c we get 2 * angle(C, B, D) == angle(C, center(c), D) mod 360
By angle_to_center on C, D, A, c we get 2 * angle(C, D, A) == angle(C, center(c), A) mod 360
By angle_to_center on A, B, C, c we get 2 * angle(A, B, C) == angle(A, center(c), C) mod 360
By angle_to_center on A, C, B, c we get 2 * angle(A, C, B) == angle(A, center(c), B) mod 360
By angle_to_center on D, B, C, c we get 2 * angle(D, B, C) == angle(D, center(c), C) mod 360
By angle_to_center on C, B, A, c we get 2 * angle(C, B, A) == angle(C, center(c), A) mod 360
By angle_to_center on D, A, C, c we get 2 * angle(D, A, C) == angle(D, center(c), C) mod 360
By angle_to_center on A, D, B, c we get 2 * angle(A, D, B) == angle(A, center(c), B) mod 360
By angle_to_center on D, C, B, c we get 2 * angle(D, C, B) == angle(D, center(c), B) mod 360
By angle_to_center on B, A, C, c we get 2 * angle(B, A, C) == angle(B, center(c), C) mod 360
By angle_to_center on D, C, A, c we get 2 * angle(D, C, A) == angle(D, center(c), A) mod 360
By angle_to_center on B, D, A, c we get 2 * angle(B, D, A) == angle(B, center(c), A) mod 360
By angle_to_center on C, A, D, c we get 2 * angle(C, A, D) == angle(C, center(c), D) mod 360
By angle_to_center on D, B, A, c we get 2 * angle(D, B, A) == angle(D, center(c), A) mod 360
By angle_to_center on C, D, B, c we get 2 * angle(C, D, B) == angle(C, center(c), B) mod 360
By angle_to_center on B, A, D, c we get 2 * angle(B, A, D) == angle(B, center(c), D) mod 360
By angle_to_center on D, A, B, c we get 2 * angle(D, A, B) == angle(D, center(c), B) mod 360
By same_angle_v0 on A, F, D, B we get angle(D, A, B) == angle(F, A, B) mod 360
By log_of_2_times_distance on A, D, D, F we get log(distance(A, D)) == 0.6931471805599453 + log(distance(D, F))
By log_of_2_times_distance on A, D, A, F we get log(distance(A, D)) == 0.6931471805599453 + log(distance(A, F))
By collinear_definition on D, A, F we get A in Line(D, F), F in Line(A, D), Line(A, D) == Line(D, F), 0 == 2 * angle(A, D, F) mod 360
By collinear_definition on F, D, A we get D in Line(A, F), A in Line(D, F), Line(A, F) == Line(D, F), 0 == 2 * angle(D, F, A) mod 360
By collinear_definition on D, F, A we get F in Line(A, D), A in Line(D, F), Line(A, D) == Line(D, F), 0 == 2 * angle(F, D, A) mod 360
By collinear_definition on A, D, F we get D in Line(A, F), F in Line(A, D), Line(A, D) == Line(A, F), 0 == 2 * angle(D, A, F) mod 360
By collinear_definition on A, F, D we get F in Line(A, D), D in Line(A, F), Line(A, D) == Line(A, F), 0 == 2 * angle(F, A, D) mod 360
By collinear_definition on F, A, D we get A in Line(D, F), D in Line(A, F), Line(A, F) == Line(D, F), 0 == 2 * angle(A, F, D) mod 360
By isosceles_triangle_properties on F, D, A we get distance(A, F) == distance(D, F), angle(D, A, F) == angle(F, D, A) mod 360
By isosceles_triangle_properties on F, A, D we get distance(A, F) == distance(D, F), angle(A, D, F) == angle(F, A, D) mod 360
By between_implies_angles on D, F, A we get 180 == angle(D, F, A) mod 360, 0 == angle(F, A, D) mod 360, 0 == angle(A, D, F) mod 360
By between_implies_angles on A, F, D we get 180 == angle(A, F, D) mod 360, 0 == angle(F, D, A) mod 360, 0 == angle(D, A, F) mod 360
By line_definition on F, G, i we get i == Line(F, G)
By angles_on_equal_chords_v0 on A, B, C, D, A, B, c we get angle(A, B, C) == angle(D, A, B) mod 360
By angles_on_equal_chords_v1 on D, B, A, B, A, C, c we get angle(B, A, C) == angle(D, B, A) mod 360
By angles_on_equal_chords_v1 on C, B, A, B, C, D, c we get angle(B, C, D) == angle(C, B, A) mod 360
By angles_on_equal_chords_v0 on A, B, D, C, A, B, c we get angle(A, B, D) == angle(C, A, B) mod 360
By angles_on_equal_chords_v0 on D, A, B, A, D, C, c we get angle(A, D, C) == angle(D, A, B) mod 360
By angles_on_equal_chords_v1 on A, C, D, C, D, B, c we get angle(A, C, D) == angle(C, D, B) mod 360
By angles_on_equal_chords_v1 on C, D, A, B, A, D, c we get angle(B, A, D) == angle(C, D, A) mod 360
By angles_on_equal_chords_v1 on C, B, A, B, A, D, c we get angle(B, A, D) == angle(C, B, A) mod 360
By angles_on_equal_chords_v2 on A, B, D, C, D, B, c we get angle(A, B, D) == angle(C, D, B) + 180 mod 360
By angles_on_equal_chords_v0 on A, B, C, D, C, B, c we get angle(A, B, C) == angle(D, C, B) mod 360
By angles_on_equal_chords_v3 on B, A, C, D, C, A, c we get angle(B, A, C) == angle(D, C, A) + 180 mod 360
By angles_on_equal_chords_v3 on D, B, A, B, D, C, c we get angle(D, B, A) == angle(B, D, C) + 180 mod 360
By angles_on_equal_chords_v3 on C, D, B, A, B, D, c we get angle(C, D, B) == angle(A, B, D) + 180 mod 360
By angles_on_equal_chords_v2 on C, A, B, A, C, D, c we get angle(C, A, B) == angle(A, C, D) + 180 mod 360
By angles_on_equal_chords_v0 on D, C, B, A, D, C, c we get angle(A, D, C) == angle(D, C, B) mod 360
By angles_on_equal_chords_v0 on D, C, A, B, D, C, c we get angle(B, D, C) == angle(D, C, A) mod 360
By angles_on_equal_chords_v2 on B, D, C, D, B, A, c we get angle(B, D, C) == angle(D, B, A) + 180 mod 360
By angles_on_equal_chords_v2 on D, C, A, B, A, C, c we get angle(D, C, A) == angle(B, A, C) + 180 mod 360
By angles_on_equal_chords_v1 on B, C, D, C, D, A, c we get angle(B, C, D) == angle(C, D, A) mod 360
By angles_on_equal_chords_v3 on A, C, D, C, A, B, c we get angle(A, C, D) == angle(C, A, B) + 180 mod 360
By radical_axis_of_intersecting_circles_v0 on F, H, e, d we get Line(F, H) == radical_axis(d, e)
By radical_axis_of_intersecting_circles_v0 on D, C, c, d we get Line(C, D) == radical_axis(c, d)
By median_definition on C, A, D, Line(C, F) we get Line(C, F) == median(C, A, D)
By median_definition on H, D, A, Line(F, H) we get Line(F, H) == median(H, A, D)
By median_definition on E, D, A, Line(E, F) we get Line(E, F) == median(E, A, D)
By line_unique_intersection_v1 on h, i, D, F we get F not in h
By same_angle_v2 on F, D, A, E we get angle(D, F, E) == angle(A, F, E) + 180 mod 360
By same_angle_v1 on A, D, F, C we get angle(D, A, C) == angle(F, A, C) mod 360
By same_angle_v1 on D, F, A, B we get angle(A, D, B) == angle(F, D, B) mod 360
By same_angle_v1 on D, A, F, H we get angle(A, D, H) == angle(F, D, H) mod 360
By same_angle_v3 on F, D, A, H we get angle(D, F, H) == angle(A, F, H) + 180 mod 360
By same_angle_v3 on F, A, D, C we get angle(A, F, C) == angle(D, F, C) + 180 mod 360
By different_points_v1 on E, G we get 0 != distance(E, G)
By different_points_v1 on D, H we get 0 != distance(D, H)
By different_points_v1 on E, F we get 0 != distance(E, F)
By different_points_v1 on C, A we get 0 != distance(A, C)
By different_points_v1 on H, E we get 0 != distance(E, H)
By different_points_v1 on D, E we get 0 != distance(D, E)
By same_angle_v1 on A, D, G, C we get angle(D, A, C) == angle(G, A, C) mod 360
By different_points_v1 on C, F we get 0 != distance(C, F)
By different_points_v1 on D, G we get 0 != distance(D, G)
By different_points_v1 on B, G we get 0 != distance(B, G)
By same_angle_v1 on D, G, A, H we get angle(A, D, H) == angle(G, D, H) mod 360
By different_points_v1 on F, H we get 0 != distance(F, H)
By different_points_v1 on D, C we get 0 != distance(C, D)
By different_points_v1 on C, E we get 0 != distance(C, E)
By different_points_v1 on A, E we get 0 != distance(A, E)
By different_points_v1 on B, E we get 0 != distance(B, E)
By same_angle_v0 on A, D, G, B we get angle(D, A, B) == angle(G, A, B) mod 360
By different_points_v1 on G, F we get 0 != distance(F, G)
By different_points_v1 on H, C we get 0 != distance(C, H)
By different_points_v1 on D, B we get 0 != distance(B, D)
By different_points_v1 on G, C we get 0 != distance(C, G)
By different_points_v1 on H, G we get 0 != distance(G, H)
By different_points_v1 on A, G we get 0 != distance(A, G)
By same_angle_v0 on C, B, G, A we get angle(B, C, A) == angle(G, C, A) mod 360
By same_angle_v0 on C, G, B, F we get angle(B, C, F) == angle(G, C, F) mod 360
By same_angle_v0 on A, F, D, E we get angle(D, A, E) == angle(F, A, E) mod 360
By same_angle_v1 on D, A, F, E we get angle(A, D, E) == angle(F, D, E) mod 360
By same_angle_v0 on B, G, C, D we get angle(C, B, D) == angle(G, B, D) mod 360
By same_angle_v1 on C, B, G, D we get angle(B, C, D) == angle(G, C, D) mod 360
By same_angle_v1 on D, A, G, B we get angle(A, D, B) == angle(G, D, B) mod 360
By same_angle_v1 on B, C, G, A we get angle(C, B, A) == angle(G, B, A) mod 360
By same_angle_v0 on D, G, A, C we get angle(A, D, C) == angle(G, D, C) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on A, G, H we get A not in Line(G, H)
By probably_between_and_collinear_implies_between on A, G, D we get between(A, G, D)
By not_in_line_equivalent_to_not_collinear_v0_r on B, A, C we get B not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on H, G, F we get H not in Line(F, G)
By reverse_direction on F, C we get 180 == direction(F, C) - direction(C, F) mod 360
By reverse_direction on F, A we get 180 == direction(F, A) - direction(A, F) mod 360
By probably_between_and_collinear_implies_between on B, G, C we get between(B, G, C)
By not_in_line_equivalent_to_not_collinear_v0_r on E, D, B we get E not in Line(B, D)
By in_imply_collinear on F, D, G we get collinear(D, F, G)
By reverse_direction on E, H we get 180 == direction(E, H) - direction(H, E) mod 360
By in_imply_collinear on G, F, A we get collinear(A, F, G)
By not_in_line_equivalent_to_not_collinear_v0_r on G, C, F we get G not in Line(C, F)
By not_in_line_equivalent_to_not_collinear_v0_r on E, A, C we get E not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on C, E, D we get C not in Line(D, E)
By reverse_direction on H, F we get 180 == direction(H, F) - direction(F, H) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on B, F, G we get B not in Line(F, G)
By line_inequality on Line(B, E), h, B we get h != Line(B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on B, F, E we get B not in Line(E, F)
By not_in_line_equivalent_to_not_collinear_v0_r on B, D, H we get B not in Line(D, H)
By not_in_line_equivalent_to_not_collinear_v0_r on D, C, A we get D not in Line(A, C)
By line_inequality on Line(B, D), g, D we get g != Line(B, D)
By line_inequality on Line(A, C), g, A we get g != Line(A, C)
By reverse_direction on C, F we get 180 == direction(C, F) - direction(F, C) mod 360
By isosceles_trapezoids_are_concyclic_v1 on A, B, C, D we get isosceles_trapezoid(A, B, C, D)
By not_in_line_equivalent_to_not_collinear_v0_r on B, E, A we get B not in Line(A, E)
By reverse_direction on G, H we get 180 == direction(G, H) - direction(H, G) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on F, E, G we get F not in Line(E, G)
By reverse_direction on B, A we get 180 == direction(B, A) - direction(A, B) mod 360
By reverse_direction on H, E we get 180 == direction(H, E) - direction(E, H) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on C, D, H we get C not in Line(D, H)
By reverse_direction on C, B we get 180 == direction(C, B) - direction(B, C) mod 360
By line_inequality on Line(A, E), h, A we get h != Line(A, E)
By not_in_line_equivalent_to_not_collinear_v0_r on C, F, E we get C not in Line(E, F)
By not_in_line_equivalent_to_not_collinear_v0_r on G, B, D we get G not in Line(B, D)
By isosceles_trapezoids_are_concyclic_v1 on D, C, A, B we get isosceles_trapezoid(A, B, D, C)
By not_in_line_equivalent_to_not_collinear_v0_r on G, A, C we get G not in Line(A, C)
By reverse_direction on D, B we get 180 == direction(D, B) - direction(B, D) mod 360
By line_inequality on Line(D, H), i, H we get i != Line(D, H)
By reverse_direction on G, F we get 180 == direction(G, F) - direction(F, G) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on G, F, H we get G not in Line(F, H)
By reverse_direction on G, E we get 180 == direction(G, E) - direction(E, G) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on F, E, B we get F not in Line(B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on D, E, C we get D not in Line(C, E)
By reverse_direction on A, C we get 180 == direction(A, C) - direction(C, A) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on G, E, B we get G not in Line(B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on E, H, C we get E not in Line(C, H)
By reverse_direction on H, C we get 180 == direction(H, C) - direction(C, H) mod 360
By isosceles_trapezoids_are_concyclic_v1 on A, B, D, C we get isosceles_trapezoid(A, B, D, C)
By line_inequality on Line(E, H), f, E we get f != Line(E, H)
By not_in_line_equivalent_to_not_collinear_v0_r on F, D, C we get F not in Line(C, D)
By not_in_line_equivalent_to_not_collinear_v0_r on A, B, E we get A not in Line(B, E)
By reverse_direction on B, D we get 180 == direction(B, D) - direction(D, B) mod 360
By reverse_direction on A, B we get 180 == direction(A, B) - direction(B, A) mod 360
By line_inequality on Line(E, F), f, F we get f != Line(E, F)
By reverse_direction on F, G we get 180 == direction(F, G) - direction(G, F) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on H, E, B we get H not in Line(B, E)
By reverse_direction on A, F we get 180 == direction(A, F) - direction(F, A) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on B, E, D we get B not in Line(D, E)
By reverse_direction on A, D we get 180 == direction(A, D) - direction(D, A) mod 360
By reverse_direction on H, G we get 180 == direction(H, G) - direction(G, H) mod 360
By line_inequality on Line(A, C), i, C we get i != Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on H, D, E we get H not in Line(D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on C, F, H we get C not in Line(F, H)
By isosceles_trapezoids_are_concyclic_v1 on C, D, B, A we get isosceles_trapezoid(B, A, C, D)
By reverse_direction on C, H we get 180 == direction(C, H) - direction(H, C) mod 360
By reverse_direction on H, D we get 180 == direction(H, D) - direction(D, H) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on B, H, E we get B not in Line(E, H)
By reverse_direction on C, A we get 180 == direction(C, A) - direction(A, C) mod 360
By reverse_direction on B, C we get 180 == direction(B, C) - direction(C, B) mod 360
By reverse_direction on C, D we get 180 == direction(C, D) - direction(D, C) mod 360
By line_inequality on Line(B, E), g, E we get g != Line(B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on H, A, E we get H not in Line(A, E)
By reverse_direction on D, F we get 180 == direction(D, F) - direction(F, D) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on A, B, D we get A not in Line(B, D)
By reverse_direction on F, E we get 180 == direction(F, E) - direction(E, F) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on H, E, C we get H not in Line(C, E)
By isosceles_trapezoids_are_concyclic_v1 on B, A, C, D we get isosceles_trapezoid(B, A, C, D)
By line_inequality on Line(G, H), f, G we get f != Line(G, H)
By line_inequality on Line(E, G), f, E we get f != Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on G, E, D we get G not in Line(D, E)
By isosceles_trapezoids_are_concyclic_v1 on C, D, A, B we get isosceles_trapezoid(A, B, C, D)
By not_in_line_equivalent_to_not_collinear_v0_r on F, D, H we get F not in Line(D, H)
By reverse_direction on E, F we get 180 == direction(E, F) - direction(F, E) mod 360
By reverse_direction on D, H we get 180 == direction(D, H) - direction(H, D) mod 360
By reverse_direction on F, D we get 180 == direction(F, D) - direction(D, F) mod 360
By isosceles_trapezoids_are_concyclic_v1 on B, A, D, C we get isosceles_trapezoid(B, A, D, C)
By isosceles_trapezoids_are_concyclic_v1 on D, C, B, A we get isosceles_trapezoid(B, A, D, C)
By line_inequality on Line(C, E), i, C we get i != Line(C, E)
By reverse_direction on D, A we get 180 == direction(D, A) - direction(A, D) mod 360
By reverse_direction on F, H we get 180 == direction(F, H) - direction(H, F) mod 360
By reverse_direction on D, C we get 180 == direction(D, C) - direction(C, D) mod 360
By reverse_direction on E, G we get 180 == direction(E, G) - direction(G, E) mod 360
By line_inequality on Line(A, E), g, E we get g != Line(A, E)
By line_inequality on Line(B, E), f, E we get f != Line(B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on H, D, C we get H not in Line(C, D)
By not_in_line_equivalent_to_not_collinear_v0_r on F, E, C we get F not in Line(C, E)
By not_in_line_equivalent_to_not_collinear_v0_r on B, C, E we get B not in Line(C, E)
By not_in_line_equivalent_to_not_collinear_v0_r on F, C, H we get F not in Line(C, H)
By not_in_line_equivalent_to_not_collinear_v0_r on A, C, E we get A not in Line(C, E)
By line_inequality on Line(A, E), i, E we get i != Line(A, E)
By line_inequality on Line(E, F), g, E we get g != Line(E, F)
By not_in_line_equivalent_to_not_collinear_v0_r on G, E, A we get G not in Line(A, E)
By not_in_line_equivalent_to_not_collinear_v0_r on H, E, G we get H not in Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on D, H, C we get D not in Line(C, H)
By not_in_line_equivalent_to_not_collinear_v0_r on F, E, D we get F not in Line(D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on G, D, H we get G not in Line(D, H)
By not_in_line_equivalent_to_not_collinear_v0_r on A, E, F we get A not in Line(E, F)
By line_inequality on Line(C, E), f, E we get f != Line(C, E)
By not_in_line_equivalent_to_not_collinear_v0_r on A, H, D we get A not in Line(D, H)
By not_in_line_equivalent_to_not_collinear_v0_r on B, H, F we get B not in Line(F, H)
By not_in_line_equivalent_to_not_collinear_v0_r on E, H, D we get E not in Line(D, H)
By not_in_line_equivalent_to_not_collinear_v0_r on F, C, A we get F not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on C, F, G we get C not in Line(F, G)
By not_in_line_equivalent_to_not_collinear_v0_r on F, B, D we get F not in Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on H, D, B we get H not in Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on E, H, G we get E not in Line(G, H)
By not_in_line_equivalent_to_not_collinear_v0_r on G, C, E we get G not in Line(C, E)
By line_circle_intersection_has_at_most_two_points_0 on C, B, G, c we get G not in c
By line_inequality on Line(C, E), g, E we get g != Line(C, E)
By not_in_line_equivalent_to_not_collinear_v0_r on D, E, H we get D not in Line(E, H)
By not_in_line_equivalent_to_not_collinear_v0_r on C, A, E we get C not in Line(A, E)
By not_in_line_equivalent_to_not_collinear_v0_r on D, H, G we get D not in Line(G, H)
By line_inequality on Line(D, E), g, D we get g != Line(D, E)
By line_inequality on Line(F, H), f, H we get f != Line(F, H)
By line_inequality on Line(D, H), g, D we get g != Line(D, H)
By not_in_line_equivalent_to_not_collinear_v0_r on A, C, F we get A not in Line(C, F)
By line_inequality on Line(D, H), f, H we get f != Line(D, H)
By not_in_line_equivalent_to_not_collinear_v0_r on E, H, F we get E not in Line(F, H)
By line_inequality on Line(E, H), i, E we get i != Line(E, H)
By line_inequality on Line(C, F), g, F we get g != Line(C, F)
By line_inequality on Line(E, H), g, E we get g != Line(E, H)
By line_inequality on Line(F, G), f, F we get f != Line(F, G)
By line_inequality on Line(E, G), i, E we get i != Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on D, C, F we get D not in Line(C, F)
By not_in_line_equivalent_to_not_collinear_v0_r on B, G, E we get B not in Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on A, H, F we get A not in Line(F, H)
By not_in_line_equivalent_to_not_collinear_v0_r on F, E, A we get F not in Line(A, E)
By not_in_line_equivalent_to_not_collinear_v0_r on F, H, G we get F not in Line(G, H)
By not_in_line_equivalent_to_not_collinear_v0_r on C, G, E we get C not in Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on E, F, G we get E not in Line(F, G)
By not_in_line_equivalent_to_not_collinear_v0_r on H, E, F we get H not in Line(E, F)
By line_inequality on Line(C, H), i, C we get i != Line(C, H)
By not_in_line_equivalent_to_not_collinear_v0_r on C, D, B we get C not in Line(B, D)
By line_inequality on Line(G, H), h, G we get h != Line(G, H)
By line_inequality on Line(F, G), h, G we get h != Line(F, G)
By not_in_line_equivalent_to_not_collinear_v0_r on E, F, C we get E not in Line(C, F)
By line_inequality on Line(B, D), h, B we get h != Line(B, D)
By line_inequality on Line(A, C), h, A we get h != Line(A, C)
By line_inequality on Line(E, G), g, E we get g != Line(E, G)
By line_inequality on Line(A, E), f, E we get f != Line(A, E)
By not_in_line_equivalent_to_not_collinear_v0_r on C, E, H we get C not in Line(E, H)
By not_in_line_equivalent_to_not_collinear_v0_r on B, F, C we get B not in Line(C, F)
By line_inequality on Line(B, D), i, B we get i != Line(B, D)
By line_inequality on Line(E, F), i, E we get i != Line(E, F)
By not_in_line_equivalent_to_not_collinear_v0_r on D, G, E we get D not in Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on D, H, F we get D not in Line(F, H)
By line_inequality on Line(F, H), g, F we get g != Line(F, H)
By not_in_line_equivalent_to_not_collinear_v0_r on D, E, A we get D not in Line(A, E)
By line_inequality on Line(C, H), f, H we get f != Line(C, H)
By not_in_line_equivalent_to_not_collinear_v0_r on G, E, H we get G not in Line(E, H)
By not_in_line_equivalent_to_not_collinear_v0_r on G, E, F we get G not in Line(E, F)
By line_inequality on Line(F, G), g, F we get g != Line(F, G)
By not_in_line_equivalent_to_not_collinear_v0_r on D, E, F we get D not in Line(E, F)
By not_in_line_equivalent_to_not_collinear_v0_r on F, H, E we get F not in Line(E, H)
By not_in_line_equivalent_to_not_collinear_v0_r on E, D, C we get E not in Line(C, D)
By not_in_line_equivalent_to_not_collinear_v0_r on D, B, E we get D not in Line(B, E)
By line_inequality on Line(B, E), i, E we get i != Line(B, E)
By line_inequality on Line(B, D), f, D we get f != Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on H, A, C we get H not in Line(A, C)
By line_inequality on Line(D, E), i, E we get i != Line(D, E)
By line_inequality on Line(E, G), h, G we get h != Line(E, G)
By line_inequality on Line(C, F), i, C we get i != Line(C, F)
By line_inequality on Line(D, E), f, D we get f != Line(D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on A, E, D we get A not in Line(D, E)
By line_inequality on Line(C, F), f, F we get f != Line(C, F)
By not_in_line_equivalent_to_not_collinear_v0_r on H, C, F we get H not in Line(C, F)
By not_in_line_equivalent_to_not_collinear_v0_r on A, E, H we get A not in Line(E, H)
By line_inequality on Line(F, H), i, H we get i != Line(F, H)
By not_in_line_equivalent_to_not_collinear_v0_r on A, H, C we get A not in Line(C, H)
By not_in_line_equivalent_to_not_collinear_v0_r on A, E, G we get A not in Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on C, B, E we get C not in Line(B, E)
By line_inequality on Line(G, H), i, H we get i != Line(G, H)
By line_inequality on Line(A, C), f, C we get f != Line(A, C)
By same_angle_v0 on C, B, G, E we get angle(B, C, E) == angle(G, C, E) mod 360
By same_angle_v0 on A, D, G, E we get angle(D, A, E) == angle(G, A, E) mod 360
By same_angle_v3 on G, D, A, E we get angle(D, G, E) == angle(A, G, E) + 180 mod 360
By same_angle_v3 on G, B, C, E we get angle(B, G, E) == angle(C, G, E) + 180 mod 360
By same_angle_v1 on D, A, G, E we get angle(A, D, E) == angle(G, D, E) mod 360
By same_angle_v1 on B, C, G, E we get angle(C, B, E) == angle(G, B, E) mod 360
By same_angle_v3 on G, B, C, F we get angle(B, G, F) == angle(C, G, F) + 180 mod 360
By same_angle_v2 on G, D, A, H we get angle(D, G, H) == angle(A, G, H) + 180 mod 360
By internal_angle_bisector_definition_v0_r on D, F, D, A we get Line(A, F) == internal_angle_bisector(D, A, D)
By radical_axis_definition_v0_r on C, d, c we get C in radical_axis(c, d)
By reverse_direction on E, A we get 180 == direction(E, A) - direction(A, E) mod 360
By collinear_definition on B, G, C we get G in Line(B, C), C in Line(B, G), Line(B, C) == Line(B, G), 0 == 2 * angle(G, B, C) mod 360
By radical_axis_definition_v0_r on F, e, d we get F in radical_axis(d, e)
By isosceles_triangle_midpoint on E, D, A we get midpoint(A, D) in median(E, A, D)
By internal_angle_bisector_definition_v0_r on A, F, A, D we get Line(D, F) == internal_angle_bisector(A, D, A)
By internal_angle_bisector_definition_v0_r on F, A, F, D we get Line(A, D) == internal_angle_bisector(F, D, F)
By radical_axis_definition_v0_r on D, c, d we get D in radical_axis(c, d)
By internal_angle_bisector_definition_v0_r on F, D, F, A we get Line(A, D) == internal_angle_bisector(F, A, F)
By internal_angle_bisector_definition_v0_r on A, D, A, F we get Line(D, F) == internal_angle_bisector(A, F, A)
By reverse_direction on E, D we get 180 == direction(E, D) - direction(D, E) mod 360
By collinear_definition on C, B, G we get B in Line(C, G), G in Line(B, C), Line(B, C) == Line(C, G), 0 == 2 * angle(B, C, G) mod 360
By collinear_definition on A, D, G we get D in Line(A, G), G in Line(A, D), Line(A, D) == Line(A, G), 0 == 2 * angle(D, A, G) mod 360
By collinear_definition on D, G, A we get G in Line(A, D), A in Line(D, G), Line(A, D) == Line(D, G), 0 == 2 * angle(G, D, A) mod 360
By radical_axis_definition_v0_r on H, e, d we get H in radical_axis(d, e)
By collinear_definition on A, G, D we get G in Line(A, D), D in Line(A, G), Line(A, D) == Line(A, G), 0 == 2 * angle(G, A, D) mod 360
By collinear_definition on D, A, G we get A in Line(D, G), G in Line(A, D), Line(A, D) == Line(D, G), 0 == 2 * angle(A, D, G) mod 360
By reverse_direction on E, C we get 180 == direction(E, C) - direction(C, E) mod 360
By internal_angle_bisector_definition_v0_r on D, A, D, F we get Line(A, F) == internal_angle_bisector(D, F, D)
By collinear_definition on B, C, G we get C in Line(B, G), G in Line(B, C), Line(B, C) == Line(B, G), 0 == 2 * angle(C, B, G) mod 360
By collinear_definition on C, G, B we get G in Line(B, C), B in Line(C, G), Line(B, C) == Line(C, G), 0 == 2 * angle(G, C, B) mod 360
By reverse_direction on E, B we get 180 == direction(E, B) - direction(B, E) mod 360
By same_angle_v3 on G, B, C, A we get angle(B, G, A) == angle(C, G, A) + 180 mod 360
By same_angle_v3 on G, C, B, D we get angle(C, G, D) == angle(B, G, D) + 180 mod 360
By same_angle_v3 on G, A, D, C we get angle(A, G, C) == angle(D, G, C) + 180 mod 360
By same_angle_v3 on G, D, A, B we get angle(D, G, B) == angle(A, G, B) + 180 mod 360
By sss_anti_congruence_v0 on B, C, E, C, B, E we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v0 on A, E, D, D, E, A we get anti_congruent_triangles(A, D, E, D, A, E)
By sss_anti_congruence_v1 on B, E, A, A, E, B we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v1 on E, C, B, E, B, C we get anti_congruent_triangles(B, C, E, C, B, E)
By isosceles_triangle_properties on E, A, C we get distance(A, E) == distance(C, E), angle(A, C, E) == angle(E, A, C) mod 360
By sss_anti_congruence_v1 on D, E, A, A, E, D we get anti_congruent_triangles(A, D, E, D, A, E)
By sas_anti_congruence on D, E, B, B, E, D we get anti_congruent_triangles(B, D, E, D, B, E)
By sss_anti_congruence_v0 on E, D, A, E, A, D we get anti_congruent_triangles(A, D, E, D, A, E)
By sss_anti_congruence_v1 on A, D, E, D, A, E we get anti_congruent_triangles(A, D, E, D, A, E)
By sss_anti_congruence_v1 on E, A, B, E, B, A we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v1 on E, A, D, E, D, A we get anti_congruent_triangles(A, D, E, D, A, E)
By sss_anti_congruence_v1 on B, E, C, C, E, B we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v1 on B, E, C, C, E, B we get anti_congruent_triangles(B, C, E, C, B, E)
By collinear_definition on G, D, A we get D in Line(A, G), A in Line(D, G), Line(A, G) == Line(D, G), 0 == 2 * angle(D, G, A) mod 360
By sas_anti_congruence on C, E, D, D, E, C we get anti_congruent_triangles(C, D, E, D, C, E)
By power_of_a_point_definition on A, F, D, d we get log(power_of_a_point(A, d)) == log(distance(A, F)) + log(distance(A, D))
By sss_anti_congruence_v1 on C, B, E, B, C, E we get anti_congruent_triangles(B, C, E, C, B, E)
By collinear_definition on G, A, D we get A in Line(D, G), D in Line(A, G), Line(A, G) == Line(D, G), 0 == 2 * angle(A, G, D) mod 360
By sss_anti_congruence_v0 on E, B, A, E, A, B we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v0 on A, E, D, D, E, A we get anti_congruent_triangles(A, D, E, D, A, E)
By sss_anti_congruence_v1 on E, A, D, E, D, A we get anti_congruent_triangles(A, D, E, D, A, E)
By perpendicular_bisector_sufficient_conditions on A, D, E, F we get Line(E, F) == perpendicular_bisector(A, D)
By sss_anti_congruence_v0 on E, B, A, E, A, B we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v0 on E, D, A, E, A, D we get anti_congruent_triangles(A, D, E, D, A, E)
By sss_anti_congruence_v0 on C, E, B, B, E, C we get anti_congruent_triangles(B, C, E, C, B, E)
By isosceles_triangle_properties on E, C, A we get distance(A, E) == distance(C, E), angle(C, A, E) == angle(E, C, A) mod 360
By sss_anti_congruence_v0 on B, A, E, A, B, E we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v1 on E, A, B, E, B, A we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v0 on E, B, C, E, C, B we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v0 on A, E, B, B, E, A we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v0 on B, C, E, C, B, E we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v0 on A, E, B, B, E, A we get anti_congruent_triangles(A, B, E, B, A, E)
By sas_anti_congruence on C, E, B, B, E, C we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v0 on E, D, A, E, A, D we get anti_congruent_triangles(A, D, E, D, A, E)
By sss_anti_congruence_v1 on E, A, B, E, B, A we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v1 on A, B, E, B, A, E we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v1 on E, A, D, E, D, A we get anti_congruent_triangles(A, D, E, D, A, E)
By isosceles_triangle_properties on E, C, B we get distance(B, E) == distance(C, E), angle(C, B, E) == angle(E, C, B) mod 360
By sss_anti_congruence_v1 on A, B, E, B, A, E we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v0 on E, B, C, E, C, B we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v0 on A, E, D, D, E, A we get anti_congruent_triangles(A, D, E, D, A, E)
By sss_anti_congruence_v0 on D, A, E, A, D, E we get anti_congruent_triangles(A, D, E, D, A, E)
By sss_anti_congruence_v1 on B, E, A, A, E, B we get anti_congruent_triangles(A, B, E, B, A, E)
By isosceles_triangle_properties on E, B, C we get distance(B, E) == distance(C, E), angle(B, C, E) == angle(E, B, C) mod 360
By sss_anti_congruence_v0 on E, D, A, E, A, D we get anti_congruent_triangles(A, D, E, D, A, E)
By sss_anti_congruence_v0 on C, E, B, B, E, C we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v0 on E, B, A, E, A, B we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v0 on A, E, B, B, E, A we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v1 on B, E, A, A, E, B we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v1 on A, B, E, B, A, E we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v1 on A, D, E, D, A, E we get anti_congruent_triangles(A, D, E, D, A, E)
By sss_anti_congruence_v1 on B, E, C, C, E, B we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v0 on C, E, B, B, E, C we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v1 on A, B, E, B, A, E we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v1 on A, D, E, D, A, E we get anti_congruent_triangles(A, D, E, D, A, E)
By sss_anti_congruence_v1 on D, E, A, A, E, D we get anti_congruent_triangles(A, D, E, D, A, E)
By sss_anti_congruence_v1 on D, E, A, A, E, D we get anti_congruent_triangles(A, D, E, D, A, E)
By sss_anti_congruence_v1 on A, D, E, D, A, E we get anti_congruent_triangles(A, D, E, D, A, E)
By sss_anti_congruence_v0 on E, B, C, E, C, B we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v1 on D, E, A, A, E, D we get anti_congruent_triangles(A, D, E, D, A, E)
By sas_anti_congruence on D, E, C, C, E, D we get anti_congruent_triangles(C, D, E, D, C, E)
By sas_anti_congruence on C, E, A, A, E, C we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v0 on E, D, A, E, A, D we get anti_congruent_triangles(A, D, E, D, A, E)
By isosceles_triangle_properties on E, B, A we get distance(A, E) == distance(B, E), angle(B, A, E) == angle(E, B, A) mod 360
By sss_anti_congruence_v1 on B, E, A, A, E, B we get anti_congruent_triangles(A, B, E, B, A, E)
By isosceles_triangle_properties on E, A, B we get distance(A, E) == distance(B, E), angle(A, B, E) == angle(E, A, B) mod 360
By sss_anti_congruence_v0 on D, A, E, A, D, E we get anti_congruent_triangles(A, D, E, D, A, E)
By sss_anti_congruence_v0 on B, A, E, A, B, E we get anti_congruent_triangles(A, B, E, B, A, E)
By sas_anti_congruence on A, E, C, C, E, A we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v0 on B, A, E, A, B, E we get anti_congruent_triangles(A, B, E, B, A, E)
By isosceles_triangle_properties on E, D, A we get distance(A, E) == distance(D, E), angle(D, A, E) == angle(E, D, A) mod 360
By sss_anti_congruence_v0 on D, A, E, A, D, E we get anti_congruent_triangles(A, D, E, D, A, E)
By sss_anti_congruence_v0 on D, A, E, A, D, E we get anti_congruent_triangles(A, D, E, D, A, E)
By sas_anti_congruence on A, E, B, B, E, A we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v0 on A, E, B, B, E, A we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v0 on A, E, D, D, E, A we get anti_congruent_triangles(A, D, E, D, A, E)
By sss_anti_congruence_v0 on B, C, E, C, B, E we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v1 on B, E, A, A, E, B we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v1 on E, A, D, E, D, A we get anti_congruent_triangles(A, D, E, D, A, E)
By sss_anti_congruence_v1 on E, A, B, E, B, A we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v1 on C, B, E, B, C, E we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v1 on C, B, E, B, C, E we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v1 on E, C, B, E, B, C we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v1 on A, D, E, D, A, E we get anti_congruent_triangles(A, D, E, D, A, E)
By sss_anti_congruence_v1 on E, A, D, E, D, A we get anti_congruent_triangles(A, D, E, D, A, E)
By sss_anti_congruence_v1 on E, C, B, E, B, C we get anti_congruent_triangles(B, C, E, C, B, E)
By isosceles_triangle_properties on E, D, C we get distance(C, E) == distance(D, E), angle(D, C, E) == angle(E, D, C) mod 360
By sss_anti_congruence_v0 on B, C, E, C, B, E we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v1 on B, E, A, A, E, B we get anti_congruent_triangles(A, B, E, B, A, E)
By sas_anti_congruence on D, E, A, A, E, D we get anti_congruent_triangles(A, D, E, D, A, E)
By sss_anti_congruence_v0 on B, A, E, A, B, E we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v1 on A, B, E, B, A, E we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v1 on E, C, B, E, B, C we get anti_congruent_triangles(B, C, E, C, B, E)
By isosceles_triangle_properties on E, C, D we get distance(C, E) == distance(D, E), angle(C, D, E) == angle(E, C, D) mod 360
By sss_anti_congruence_v0 on B, A, E, A, B, E we get anti_congruent_triangles(A, B, E, B, A, E)
By collinear_definition on G, B, C we get B in Line(C, G), C in Line(B, G), Line(B, G) == Line(C, G), 0 == 2 * angle(B, G, C) mod 360
By sss_anti_congruence_v0 on B, C, E, C, B, E we get anti_congruent_triangles(B, C, E, C, B, E)
By isosceles_triangle_properties on E, B, D we get distance(B, E) == distance(D, E), angle(B, D, E) == angle(E, B, D) mod 360
By sss_anti_congruence_v1 on D, E, A, A, E, D we get anti_congruent_triangles(A, D, E, D, A, E)
By sss_anti_congruence_v0 on A, E, D, D, E, A we get anti_congruent_triangles(A, D, E, D, A, E)
By sss_anti_congruence_v0 on E, B, A, E, A, B we get anti_congruent_triangles(A, B, E, B, A, E)
By isosceles_triangle_properties on E, A, D we get distance(A, E) == distance(D, E), angle(A, D, E) == angle(E, A, D) mod 360
By sas_anti_congruence on B, E, C, C, E, B we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v1 on E, A, B, E, B, A we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v0 on C, E, B, B, E, C we get anti_congruent_triangles(B, C, E, C, B, E)
By sas_anti_congruence on B, E, D, D, E, B we get anti_congruent_triangles(B, D, E, D, B, E)
By sss_anti_congruence_v0 on E, B, C, E, C, B we get anti_congruent_triangles(B, C, E, C, B, E)
By sas_anti_congruence on B, E, A, A, E, B we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v0 on E, D, A, E, A, D we get anti_congruent_triangles(A, D, E, D, A, E)
By isosceles_triangle_properties on E, D, B we get distance(B, E) == distance(D, E), angle(D, B, E) == angle(E, D, B) mod 360
By sss_anti_congruence_v0 on E, B, A, E, A, B we get anti_congruent_triangles(A, B, E, B, A, E)
By sas_anti_congruence on A, E, D, D, E, A we get anti_congruent_triangles(A, D, E, D, A, E)
By sss_anti_congruence_v1 on E, A, D, E, D, A we get anti_congruent_triangles(A, D, E, D, A, E)
By sss_anti_congruence_v1 on E, C, B, E, B, C we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v1 on B, E, C, C, E, B we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v1 on A, B, E, B, A, E we get anti_congruent_triangles(A, B, E, B, A, E)
By collinear_definition on G, C, B we get C in Line(B, G), B in Line(C, G), Line(B, G) == Line(C, G), 0 == 2 * angle(C, G, B) mod 360
By sss_anti_congruence_v1 on A, D, E, D, A, E we get anti_congruent_triangles(A, D, E, D, A, E)
By sss_anti_congruence_v0 on E, B, C, E, C, B we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v1 on C, B, E, B, C, E we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v1 on E, C, B, E, B, C we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v1 on C, B, E, B, C, E we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v0 on A, E, B, B, E, A we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v0 on E, B, C, E, C, B we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v0 on B, A, E, A, B, E we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v1 on D, E, A, A, E, D we get anti_congruent_triangles(A, D, E, D, A, E)
By sss_anti_congruence_v0 on D, A, E, A, D, E we get anti_congruent_triangles(A, D, E, D, A, E)
By sss_anti_congruence_v1 on C, B, E, B, C, E we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v0 on C, E, B, B, E, C we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v0 on C, E, B, B, E, C we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v1 on E, A, B, E, B, A we get anti_congruent_triangles(A, B, E, B, A, E)
By power_of_a_point_definition on F, D, A, c we get log(power_of_a_point(F, c)) == log(distance(D, F)) + log(distance(A, F))
By sss_anti_congruence_v0 on A, E, D, D, E, A we get anti_congruent_triangles(A, D, E, D, A, E)
By sss_anti_congruence_v1 on B, E, C, C, E, B we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v0 on A, E, B, B, E, A we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v1 on B, E, C, C, E, B we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v0 on D, A, E, A, D, E we get anti_congruent_triangles(A, D, E, D, A, E)
By sss_anti_congruence_v0 on E, B, A, E, A, B we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v0 on B, C, E, C, B, E we get anti_congruent_triangles(B, C, E, C, B, E)
By concyclic_sufficient_conditions_v0 on E, C, G, A we get concyclic(A, C, E, G)
By concyclic_sufficient_conditions_v0 on E, B, G, D we get concyclic(B, D, E, G)
By line_intersection_definition on F, Line(F, H), i we get F == line_intersection(i, Line(F, H))
By line_intersection_definition on A, i, Line(A, C) we get A == line_intersection(i, Line(A, C))
By line_intersection_definition on C, g, Line(A, C) we get C == line_intersection(g, Line(A, C))
By line_intersection_definition on F, i, Line(E, F) we get F == line_intersection(i, Line(E, F))
By line_intersection_definition on C, g, Line(C, E) we get C == line_intersection(g, Line(C, E))
By line_intersection_definition on F, Line(C, F), i we get F == line_intersection(i, Line(C, F))
By perpendicular_line_definition on E, Line(E, F), i we get Line(E, F) == perpendicular_line(E, i)
By line_intersection_definition on G, Line(G, H), i we get G == line_intersection(i, Line(G, H))
By line_intersection_definition on B, g, Line(B, E) we get B == line_intersection(g, Line(B, E))
By line_intersection_definition on C, Line(C, F), g we get C == line_intersection(g, Line(C, F))
By line_intersection_definition on D, i, Line(D, E) we get D == line_intersection(i, Line(D, E))
By line_intersection_definition on G, Line(E, G), i we get G == line_intersection(i, Line(E, G))
By perpendicular_line_definition on F, i, Line(E, F) we get i == perpendicular_line(F, Line(E, F))
By line_intersection_definition on D, Line(D, H), i we get D == line_intersection(i, Line(D, H))
By line_intersection_definition on A, f, Line(A, C) we get A == line_intersection(f, Line(A, C))
By perpendicular_line_definition on G, i, Line(E, F) we get i == perpendicular_line(G, Line(E, F))
By line_intersection_definition on D, Line(B, D), i we get D == line_intersection(i, Line(B, D))
By line_intersection_definition on G, Line(E, G), g we get G == line_intersection(g, Line(E, G))
By line_intersection_definition on D, h, Line(B, D) we get D == line_intersection(h, Line(B, D))
By perpendicular_line_definition on D, i, Line(E, F) we get i == perpendicular_line(D, Line(E, F))
By line_intersection_definition on B, Line(B, D), g we get B == line_intersection(g, Line(B, D))
By line_intersection_definition on C, Line(A, C), h we get C == line_intersection(h, Line(A, C))
By line_intersection_definition on B, Line(B, E), f we get B == line_intersection(f, Line(B, E))
By perpendicular_line_definition on A, i, Line(E, F) we get i == perpendicular_line(A, Line(E, F))
By line_intersection_definition on B, Line(B, D), f we get B == line_intersection(f, Line(B, D))
By line_intersection_definition on A, Line(A, E), i we get A == line_intersection(i, Line(A, E))
By line_intersection_definition on A, f, Line(A, E) we get A == line_intersection(f, Line(A, E))
By same_angle_v1 on G, F, A, E we get angle(A, G, E) == angle(F, G, E) mod 360
By same_angle_v2 on F, G, A, E we get angle(G, F, E) == angle(A, F, E) + 180 mod 360
By perpendicular_direction_conditions_v0_r on E, F, G, A we get 180 == 2 * direction(E, F) - 2 * direction(G, A) mod 360
By same_angle_v3 on G, F, D, C we get angle(F, G, C) == angle(D, G, C) + 180 mod 360
By perpendicular_direction_conditions_v0_r on E, F, G, D we get 180 == 2 * direction(E, F) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on G, A, F, E we get 180 == 2 * direction(G, A) - 2 * direction(F, E) mod 360
By same_angle_v2 on G, D, F, B we get angle(D, G, B) == angle(F, G, B) + 180 mod 360
By same_angle_v0 on G, F, A, C we get angle(A, G, C) == angle(F, G, C) mod 360
By same_angle_v2 on F, G, A, H we get angle(G, F, H) == angle(A, F, H) + 180 mod 360
By perpendicular_direction_conditions_v0_r on F, D, E, F we get 180 == 2 * direction(F, D) - 2 * direction(E, F) mod 360
By same_angle_v0 on F, D, G, E we get angle(D, F, E) == angle(G, F, E) mod 360
By same_angle_v1 on G, A, F, B we get angle(A, G, B) == angle(F, G, B) mod 360
By same_angle_v2 on G, D, F, H we get angle(D, G, H) == angle(F, G, H) + 180 mod 360
By same_angle_v1 on G, F, A, H we get angle(A, G, H) == angle(F, G, H) mod 360
By same_angle_v1 on F, G, D, C we get angle(D, F, C) == angle(G, F, C) mod 360
By perpendicular_direction_conditions_v0_r on E, F, D, G we get 180 == 2 * direction(E, F) - 2 * direction(D, G) mod 360
By same_angle_v2 on F, A, G, C we get angle(A, F, C) == angle(G, F, C) + 180 mod 360
By perpendicular_direction_conditions_v0_r on E, F, A, F we get 180 == 2 * direction(E, F) - 2 * direction(A, F) mod 360
By same_angle_v0 on F, D, G, H we get angle(D, F, H) == angle(G, F, H) mod 360
By perpendicular_direction_conditions_v0_r on F, E, F, D we get 180 == 2 * direction(F, E) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on D, G, E, F we get 180 == 2 * direction(D, G) - 2 * direction(E, F) mod 360
By between_implies_orientation on H, B, G, C we get orientation(B, G, H) == orientation(C, H, G) mod 360, orientation(B, C, H) == orientation(B, G, H) mod 360
By same_angle_v2 on G, D, F, E we get angle(D, G, E) == angle(F, G, E) + 180 mod 360
By perpendicular_direction_conditions_v0_r on F, E, G, A we get 180 == 2 * direction(F, E) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on E, F, A, D we get 180 == 2 * direction(E, F) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on F, E, A, F we get 180 == 2 * direction(F, E) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on A, F, F, E we get 180 == 2 * direction(A, F) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on G, A, E, F we get 180 == 2 * direction(G, A) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on E, F, G, F we get 180 == 2 * direction(E, F) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on F, A, E, F we get 180 == 2 * direction(F, A) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on G, F, E, F we get 180 == 2 * direction(G, F) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on D, F, F, E we get 180 == 2 * direction(D, F) - 2 * direction(F, E) mod 360
By between_implies_orientation on F, D, G, A we get orientation(A, F, G) == orientation(D, G, F) mod 360, orientation(A, F, D) == orientation(D, G, F) mod 360
By perpendicular_direction_conditions_v0_r on F, E, D, F we get 180 == 2 * direction(F, E) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on G, D, E, F we get 180 == 2 * direction(G, D) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on D, A, F, E we get 180 == 2 * direction(D, A) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on A, D, E, F we get 180 == 2 * direction(A, D) - 2 * direction(E, F) mod 360
By between_implies_orientation on F, A, G, D we get orientation(A, G, F) == orientation(D, F, G) mod 360, orientation(A, D, F) == orientation(A, G, F) mod 360
By perpendicular_direction_conditions_v0_r on A, F, E, F we get 180 == 2 * direction(A, F) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on F, E, A, D we get 180 == 2 * direction(F, E) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on G, F, F, E we get 180 == 2 * direction(G, F) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on F, G, F, E we get 180 == 2 * direction(F, G) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on F, E, G, D we get 180 == 2 * direction(F, E) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on D, G, F, E we get 180 == 2 * direction(D, G) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on E, F, F, G we get 180 == 2 * direction(E, F) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on F, A, F, E we get 180 == 2 * direction(F, A) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on E, F, D, F we get 180 == 2 * direction(E, F) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on G, D, F, E we get 180 == 2 * direction(G, D) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on E, F, F, D we get 180 == 2 * direction(E, F) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on A, G, F, E we get 180 == 2 * direction(A, G) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on E, F, A, G we get 180 == 2 * direction(E, F) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on D, F, E, F we get 180 == 2 * direction(D, F) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on F, E, D, A we get 180 == 2 * direction(F, E) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on F, E, G, F we get 180 == 2 * direction(F, E) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on F, E, F, A we get 180 == 2 * direction(F, E) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on E, F, F, A we get 180 == 2 * direction(E, F) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on F, G, E, F we get 180 == 2 * direction(F, G) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on F, E, D, G we get 180 == 2 * direction(F, E) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on F, E, F, G we get 180 == 2 * direction(F, E) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on A, D, F, E we get 180 == 2 * direction(A, D) - 2 * direction(F, E) mod 360
By between_implies_orientation on H, C, G, B we get orientation(B, H, G) == orientation(C, G, H) mod 360, orientation(B, H, C) == orientation(C, G, H) mod 360
By perpendicular_direction_conditions_v0_r on E, F, D, A we get 180 == 2 * direction(E, F) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on A, G, E, F we get 180 == 2 * direction(A, G) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on F, E, A, G we get 180 == 2 * direction(F, E) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on F, D, F, E we get 180 == 2 * direction(F, D) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on D, A, E, F we get 180 == 2 * direction(D, A) - 2 * direction(E, F) mod 360
By between_imply_not_between on D, G, A we get collinear_and_not_between(A, D, G)
By between_imply_not_between on B, G, C we get collinear_and_not_between(C, B, G)
By between_imply_not_between on A, G, D we get collinear_and_not_between(D, A, G)
By circle_radius_v0_r on H, d we get radius(d) == distance(H, center(d))
By between_imply_not_between on C, G, B we get collinear_and_not_between(B, C, G)
By circle_radius_v0_r on E, e we get radius(e) == distance(E, center(e))
By circle_radius_v0_r on C, d we get radius(d) == distance(C, center(d))
By circle_radius_v0_r on F, d we get radius(d) == distance(F, center(d))
By circle_radius_v0_r on F, e we get radius(e) == distance(F, center(e))
By circle_radius_v0_r on H, e we get radius(e) == distance(H, center(e))
By circle_radius_v0_r on D, d we get radius(d) == distance(D, center(d))
By circle_radius_v0_r on G, e we get radius(e) == distance(G, center(e))
By angle_to_center on G, F, E, e we get 2 * angle(G, F, E) == angle(G, center(e), E) mod 360
By angle_to_center on C, H, F, d we get 2 * angle(C, H, F) == angle(C, center(d), F) mod 360
By angle_to_center on F, E, H, e we get 2 * angle(F, E, H) == angle(F, center(e), H) mod 360
By angle_to_center on E, H, G, e we get 2 * angle(E, H, G) == angle(E, center(e), G) mod 360
By angle_to_center on F, H, E, e we get 2 * angle(F, H, E) == angle(F, center(e), E) mod 360
By angle_to_center on D, H, C, d we get 2 * angle(D, H, C) == angle(D, center(d), C) mod 360
By angle_to_center on E, F, G, e we get 2 * angle(E, F, G) == angle(E, center(e), G) mod 360
By angle_to_center on D, F, C, d we get 2 * angle(D, F, C) == angle(D, center(d), C) mod 360
By angle_to_center on H, E, G, e we get 2 * angle(H, E, G) == angle(H, center(e), G) mod 360
By angle_to_center on F, D, H, d we get 2 * angle(F, D, H) == angle(F, center(d), H) mod 360
By angle_to_center on F, H, D, d we get 2 * angle(F, H, D) == angle(F, center(d), D) mod 360
By angle_to_center on H, G, E, e we get 2 * angle(H, G, E) == angle(H, center(e), E) mod 360
By angle_to_center on F, E, G, e we get 2 * angle(F, E, G) == angle(F, center(e), G) mod 360
By angle_to_center on E, G, F, e we get 2 * angle(E, G, F) == angle(E, center(e), F) mod 360
By angle_to_center on G, E, H, e we get 2 * angle(G, E, H) == angle(G, center(e), H) mod 360
By angle_to_center on F, H, G, e we get 2 * angle(F, H, G) == angle(F, center(e), G) mod 360
By angle_to_center on C, D, F, d we get 2 * angle(C, D, F) == angle(C, center(d), F) mod 360
By angle_to_center on F, G, H, e we get 2 * angle(F, G, H) == angle(F, center(e), H) mod 360
By angle_to_center on H, F, E, e we get 2 * angle(H, F, E) == angle(H, center(e), E) mod 360
By angle_to_center on H, F, D, d we get 2 * angle(H, F, D) == angle(H, center(d), D) mod 360
By angle_to_center on F, C, H, d we get 2 * angle(F, C, H) == angle(F, center(d), H) mod 360
By angle_to_center on C, D, H, d we get 2 * angle(C, D, H) == angle(C, center(d), H) mod 360
By angle_to_center on H, F, C, d we get 2 * angle(H, F, C) == angle(H, center(d), C) mod 360
By angle_to_center on D, C, F, d we get 2 * angle(D, C, F) == angle(D, center(d), F) mod 360
By angle_to_center on G, E, F, e we get 2 * angle(G, E, F) == angle(G, center(e), F) mod 360
By angle_to_center on H, D, C, d we get 2 * angle(H, D, C) == angle(H, center(d), C) mod 360
By angle_to_center on H, D, F, d we get 2 * angle(H, D, F) == angle(H, center(d), F) mod 360
By angle_to_center on C, F, H, d we get 2 * angle(C, F, H) == angle(C, center(d), H) mod 360
By angle_to_center on G, F, H, e we get 2 * angle(G, F, H) == angle(G, center(e), H) mod 360
By angle_to_center on H, F, G, e we get 2 * angle(H, F, G) == angle(H, center(e), G) mod 360
By angle_to_center on D, C, H, d we get 2 * angle(D, C, H) == angle(D, center(d), H) mod 360
By angle_to_center on C, H, D, d we get 2 * angle(C, H, D) == angle(C, center(d), D) mod 360
By angle_to_center on G, H, F, e we get 2 * angle(G, H, F) == angle(G, center(e), F) mod 360
By angle_to_center on H, E, F, e we get 2 * angle(H, E, F) == angle(H, center(e), F) mod 360
By angle_to_center on D, F, H, d we get 2 * angle(D, F, H) == angle(D, center(d), H) mod 360
By angle_to_center on F, D, C, d we get 2 * angle(F, D, C) == angle(F, center(d), C) mod 360
By angle_to_center on F, H, C, d we get 2 * angle(F, H, C) == angle(F, center(d), C) mod 360
By angle_to_center on E, G, H, e we get 2 * angle(E, G, H) == angle(E, center(e), H) mod 360
By angle_to_center on F, G, E, e we get 2 * angle(F, G, E) == angle(F, center(e), E) mod 360
By angle_to_center on H, C, D, d we get 2 * angle(H, C, D) == angle(H, center(d), D) mod 360
By angle_to_center on D, H, F, d we get 2 * angle(D, H, F) == angle(D, center(d), F) mod 360
By angle_to_center on C, F, D, d we get 2 * angle(C, F, D) == angle(C, center(d), D) mod 360
By angle_to_center on H, G, F, e we get 2 * angle(H, G, F) == angle(H, center(e), F) mod 360
By angle_to_center on E, H, F, e we get 2 * angle(E, H, F) == angle(E, center(e), F) mod 360
By angle_to_center on H, C, F, d we get 2 * angle(H, C, F) == angle(H, center(d), F) mod 360
By angle_to_center on G, H, E, e we get 2 * angle(G, H, E) == angle(G, center(e), E) mod 360
By angle_to_center on F, C, D, d we get 2 * angle(F, C, D) == angle(F, center(d), D) mod 360
By angle_to_center on E, F, H, e we get 2 * angle(E, F, H) == angle(E, center(e), H) mod 360
By center_not_on_circle on d we get center(d) not in d
By center_not_on_circle on e we get center(e) not in e
By projection_definition on D, F, Line(E, F) we get F == projection(D, Line(E, F))
By projection_definition on E, F, i we get F == projection(E, i)
By projection_definition on A, F, Line(E, F) we get F == projection(A, Line(E, F))
By perpendicular_angle_conditions_v0 on E, F, G we get angle(E, F, G) == orientation(E, F, G) mod 360
By projection_definition on G, F, Line(E, F) we get F == projection(G, Line(E, F))
By asa_anti_congruence on A, B, G, B, A, G we get anti_congruent_triangles(A, B, G, B, A, G)
By probably_between_and_collinear_implies_between on F, G, D we get between(D, G, F)
By probably_between_and_collinear_implies_between on A, F, G we get between(A, F, G)
By sss_anti_congruence_v1 on A, F, E, D, F, E we get anti_congruent_triangles(A, E, F, D, E, F)
By internal_angle_bisector_definition_v0 on D, G, D, F we get angle(D, F, G) == angle(G, F, D) mod 360
By sss_anti_congruence_v0 on F, E, D, F, E, A we get anti_congruent_triangles(A, E, F, D, E, F)
By line_inequality on Line(G, H), Line(F, H), G we get Line(F, H) != Line(G, H)
By line_inequality on Line(E, G), Line(E, H), G we get Line(E, G) != Line(E, H)
By line_inequality on Line(G, H), Line(C, F), H we get Line(C, F) != Line(G, H)
By sss_anti_congruence_v1 on E, F, D, E, F, A we get anti_congruent_triangles(A, E, F, D, E, F)
By asa_anti_congruence on D, C, G, C, D, G we get anti_congruent_triangles(C, D, G, D, C, G)
By line_inequality on Line(C, F), Line(B, E), C we get Line(B, E) != Line(C, F)
By anti_congruence_from_anti_similar_triangles on C, D, G, D, C, G we get anti_congruent_triangles(C, D, G, D, C, G)
By sss_anti_congruence_v0 on E, D, F, E, A, F we get anti_congruent_triangles(A, E, F, D, E, F)
By sss_anti_congruence_v0 on F, E, D, F, E, A we get anti_congruent_triangles(A, E, F, D, E, F)
By sss_anti_congruence_v1 on E, A, F, E, D, F we get anti_congruent_triangles(A, E, F, D, E, F)
By line_inequality on Line(B, D), Line(G, H), D we get Line(B, D) != Line(G, H)
By sss_anti_congruence_v1 on F, E, A, F, E, D we get anti_congruent_triangles(A, E, F, D, E, F)
By sss_anti_congruence_v1 on F, D, E, F, A, E we get anti_congruent_triangles(A, E, F, D, E, F)
By anti_congruence_from_anti_similar_triangles on D, C, G, C, D, G we get anti_congruent_triangles(C, D, G, D, C, G)
By sss_anti_congruence_v1 on E, F, D, E, F, A we get anti_congruent_triangles(A, E, F, D, E, F)
By sss_anti_congruence_v0 on E, F, A, E, F, D we get anti_congruent_triangles(A, E, F, D, E, F)
By line_inequality on Line(E, H), Line(B, D), E we get Line(B, D) != Line(E, H)
By collinear_definition on F, D, G we get D in Line(F, G), G in Line(D, F), Line(D, F) == Line(F, G), 0 == 2 * angle(D, F, G) mod 360
By line_inequality on Line(A, E), Line(F, H), E we get Line(A, E) != Line(F, H)
By line_inequality on Line(D, E), Line(A, E), D we get Line(A, E) != Line(D, E)
By line_inequality on Line(E, F), Line(E, G), F we get Line(E, F) != Line(E, G)
By asa_anti_congruence on C, D, G, D, C, G we get anti_congruent_triangles(C, D, G, D, C, G)
By line_inequality on Line(D, H), Line(E, G), H we get Line(D, H) != Line(E, G)
By sas_anti_congruence on F, D, E, F, A, E we get anti_congruent_triangles(A, E, F, D, E, F)
By line_inequality on h, Line(D, H), C we get h != Line(D, H)
By sss_anti_congruence_v1 on F, D, E, F, A, E we get anti_congruent_triangles(A, E, F, D, E, F)
By internal_angle_bisector_definition_v0 on A, G, A, F we get angle(A, F, G) == angle(G, F, A) mod 360
By sas_anti_congruence on E, A, F, E, D, F we get anti_congruent_triangles(A, E, F, D, E, F)
By sss_anti_congruence_v1 on F, E, A, F, E, D we get anti_congruent_triangles(A, E, F, D, E, F)
By reverse_direction on G, C we get 180 == direction(G, C) - direction(C, G) mod 360
By sss_anti_congruence_v1 on D, E, F, A, E, F we get anti_congruent_triangles(A, E, F, D, E, F)
By sss_anti_congruence_v0 on E, F, A, E, F, D we get anti_congruent_triangles(A, E, F, D, E, F)
By reverse_direction on C, G we get 180 == direction(C, G) - direction(G, C) mod 360
By reverse_direction on A, G we get 180 == direction(A, G) - direction(G, A) mod 360
By sss_anti_congruence_v1 on D, E, F, A, E, F we get anti_congruent_triangles(A, E, F, D, E, F)
By sss_anti_congruence_v0 on A, E, F, D, E, F we get anti_congruent_triangles(A, E, F, D, E, F)
By line_inequality on Line(E, F), Line(A, C), E we get Line(A, C) != Line(E, F)
By line_inequality on Line(C, E), Line(E, F), C we get Line(C, E) != Line(E, F)
By line_inequality on Line(A, C), Line(B, E), C we get Line(A, C) != Line(B, E)
By sss_anti_congruence_v1 on E, F, D, E, F, A we get anti_congruent_triangles(A, E, F, D, E, F)
By sss_anti_congruence_v0 on E, F, A, E, F, D we get anti_congruent_triangles(A, E, F, D, E, F)
By isosceles_trapezoid_properties on B, A, D, C we get parallel(Line(A, B), Line(C, D)), distance(A, D) == distance(B, C), angle(B, A, D) == angle(C, B, A), angle(A, D, C) == angle(D, C, B)
By sss_anti_congruence_v0 on D, F, E, A, F, E we get anti_congruent_triangles(A, E, F, D, E, F)
By isosceles_trapezoids_contain_isosceles_triangles on C, D, A, B we get isosceles_triangle(line_intersection(Line(A, D), Line(B, C)), C, D), isosceles_triangle(line_intersection(Line(A, D), Line(B, C)), A, B)
By isosceles_trapezoids_contain_isosceles_triangles on A, B, C, D we get isosceles_triangle(line_intersection(Line(A, D), Line(B, C)), A, B), isosceles_triangle(line_intersection(Line(A, D), Line(B, C)), C, D)
By sss_anti_congruence_v0 on F, E, D, F, E, A we get anti_congruent_triangles(A, E, F, D, E, F)
By sss_anti_congruence_v1 on A, F, E, D, F, E we get anti_congruent_triangles(A, E, F, D, E, F)
By sss_anti_congruence_v0 on E, D, F, E, A, F we get anti_congruent_triangles(A, E, F, D, E, F)
By line_inequality on Line(G, H), Line(A, C), H we get Line(A, C) != Line(G, H)
By isosceles_triangle_from_angles on G, B, A we get isosceles_triangle(G, A, B)
By sss_anti_congruence_v0 on E, D, F, E, A, F we get anti_congruent_triangles(A, E, F, D, E, F)
By internal_angle_bisector_definition_v0 on F, G, F, A we get angle(F, A, G) == angle(G, A, F) mod 360
By isosceles_trapezoids_contain_isosceles_triangles on D, C, B, A we get isosceles_triangle(line_intersection(Line(A, D), Line(B, C)), C, D), isosceles_triangle(line_intersection(Line(A, D), Line(B, C)), A, B)
By line_inequality on Line(C, F), Line(A, E), F we get Line(A, E) != Line(C, F)
By line_inequality on Line(C, F), Line(E, G), C we get Line(C, F) != Line(E, G)
By internal_angle_bisector_definition_v0 on F, G, F, D we get angle(F, D, G) == angle(G, D, F) mod 360
By sss_anti_congruence_v1 on F, E, A, F, E, D we get anti_congruent_triangles(A, E, F, D, E, F)
By isosceles_trapezoids_contain_isosceles_triangles on B, A, D, C we get isosceles_triangle(line_intersection(Line(A, D), Line(B, C)), A, B), isosceles_triangle(line_intersection(Line(A, D), Line(B, C)), C, D)
By sss_anti_congruence_v0 on D, F, E, A, F, E we get anti_congruent_triangles(A, E, F, D, E, F)
By collinear_definition on A, F, G we get F in Line(A, G), G in Line(A, F), Line(A, F) == Line(A, G), 0 == 2 * angle(F, A, G) mod 360
By isosceles_trapezoid_properties on A, B, D, C we get parallel(Line(A, B), Line(C, D)), distance(A, C) == distance(B, D), angle(A, B, D) == angle(C, A, B), angle(B, D, C) == angle(D, C, A)
By collinear_definition on D, F, G we get F in Line(D, G), G in Line(D, F), Line(D, F) == Line(D, G), 0 == 2 * angle(F, D, G) mod 360
By asa_anti_congruence on A, C, G, B, D, G we get anti_congruent_triangles(A, C, G, B, D, G)
By sss_anti_congruence_v0 on F, E, D, F, E, A we get anti_congruent_triangles(A, E, F, D, E, F)
By collinear_definition on D, G, F we get G in Line(D, F), F in Line(D, G), Line(D, F) == Line(D, G), 0 == 2 * angle(G, D, F) mod 360
By between_imply_segment_sum on A, G, D we get distance(A, D) == distance(A, G) + distance(D, G)
By sss_anti_congruence_v0 on D, F, E, A, F, E we get anti_congruent_triangles(A, E, F, D, E, F)
By sss_anti_congruence_v1 on E, A, F, E, D, F we get anti_congruent_triangles(A, E, F, D, E, F)
By isosceles_triangle_from_angles on G, A, B we get isosceles_triangle(G, A, B)
By sss_anti_congruence_v0 on D, F, E, A, F, E we get anti_congruent_triangles(A, E, F, D, E, F)
By line_inequality on Line(C, H), Line(E, F), H we get Line(C, H) != Line(E, F)
By line_inequality on Line(D, E), Line(F, H), D we get Line(D, E) != Line(F, H)
By line_inequality on Line(A, E), Line(D, H), A we get Line(A, E) != Line(D, H)
By sss_anti_congruence_v0 on A, E, F, D, E, F we get anti_congruent_triangles(A, E, F, D, E, F)
By line_inequality on Line(C, E), Line(A, C), E we get Line(A, C) != Line(C, E)
By line_inequality on Line(G, H), Line(C, E), H we get Line(C, E) != Line(G, H)
By asa_anti_congruence on B, A, G, A, B, G we get anti_congruent_triangles(A, B, G, B, A, G)
By sss_anti_congruence_v1 on E, A, F, E, D, F we get anti_congruent_triangles(A, E, F, D, E, F)
By line_inequality on Line(F, H), Line(C, E), F we get Line(C, E) != Line(F, H)
By line_inequality on Line(C, E), Line(B, D), E we get Line(B, D) != Line(C, E)
By sss_anti_congruence_v0 on E, F, A, E, F, D we get anti_congruent_triangles(A, E, F, D, E, F)
By line_inequality on Line(F, H), Line(C, F), H we get Line(C, F) != Line(F, H)
By collinear_definition on A, G, F we get G in Line(A, F), F in Line(A, G), Line(A, F) == Line(A, G), 0 == 2 * angle(G, A, F) mod 360
By line_inequality on Line(F, H), Line(B, D), H we get Line(B, D) != Line(F, H)
By sss_anti_congruence_v1 on E, A, F, E, D, F we get anti_congruent_triangles(A, E, F, D, E, F)
By sss_anti_congruence_v1 on A, F, E, D, F, E we get anti_congruent_triangles(A, E, F, D, E, F)
By sss_anti_congruence_v0 on F, A, E, F, D, E we get anti_congruent_triangles(A, E, F, D, E, F)
By perpendicular_angle_conditions_v0 on E, F, D we get angle(E, F, D) == orientation(D, E, F) mod 360
By sss_anti_congruence_v0 on F, A, E, F, D, E we get anti_congruent_triangles(A, E, F, D, E, F)
By anti_congruence_from_anti_similar_triangles on A, B, G, B, A, G we get anti_congruent_triangles(A, B, G, B, A, G)
By sss_anti_congruence_v0 on E, D, F, E, A, F we get anti_congruent_triangles(A, E, F, D, E, F)
By sss_anti_congruence_v1 on E, A, F, E, D, F we get anti_congruent_triangles(A, E, F, D, E, F)
By reverse_direction on D, G we get 180 == direction(D, G) - direction(G, D) mod 360
By collinear_definition on G, A, F we get A in Line(F, G), F in Line(A, G), Line(A, G) == Line(F, G), 0 == 2 * angle(A, G, F) mod 360
By line_inequality on Line(A, C), Line(E, H), A we get Line(A, C) != Line(E, H)
By sss_anti_congruence_v0 on F, A, E, F, D, E we get anti_congruent_triangles(A, E, F, D, E, F)
By sss_anti_congruence_v0 on E, F, A, E, F, D we get anti_congruent_triangles(A, E, F, D, E, F)
By isosceles_triangle_from_angles on G, C, D we get isosceles_triangle(G, C, D)
By sss_anti_congruence_v1 on F, D, E, F, A, E we get anti_congruent_triangles(A, E, F, D, E, F)
By anti_congruence_from_anti_similar_triangles on B, A, G, A, B, G we get anti_congruent_triangles(A, B, G, B, A, G)
By asa_anti_congruence on C, A, G, D, B, G we get anti_congruent_triangles(A, C, G, B, D, G)
By reverse_direction on G, B we get 180 == direction(G, B) - direction(B, G) mod 360
By reverse_direction on B, G we get 180 == direction(B, G) - direction(G, B) mod 360
By perpendicular_angle_conditions_v0 on D, F, E we get angle(D, F, E) == orientation(D, F, E) mod 360
By sss_anti_congruence_v1 on E, F, D, E, F, A we get anti_congruent_triangles(A, E, F, D, E, F)
By sss_anti_congruence_v0 on A, E, F, D, E, F we get anti_congruent_triangles(A, E, F, D, E, F)
By line_inequality on Line(C, E), Line(E, H), C we get Line(C, E) != Line(E, H)
By sas_anti_congruence on F, A, E, F, D, E we get anti_congruent_triangles(A, E, F, D, E, F)
By reverse_direction on G, D we get 180 == direction(G, D) - direction(D, G) mod 360
By between_imply_segment_sum on C, G, B we get distance(B, C) == distance(C, G) + distance(B, G)
By sss_anti_congruence_v0 on E, F, A, E, F, D we get anti_congruent_triangles(A, E, F, D, E, F)
By isosceles_trapezoid_properties on C, D, B, A we get parallel(Line(A, B), Line(C, D)), distance(A, C) == distance(B, D), angle(A, C, D) == angle(C, D, B), angle(B, A, C) == angle(D, B, A)
By line_inequality on Line(C, E), Line(E, G), C we get Line(C, E) != Line(E, G)
By sss_anti_congruence_v1 on A, F, E, D, F, E we get anti_congruent_triangles(A, E, F, D, E, F)
By line_inequality on Line(E, H), Line(A, E), H we get Line(A, E) != Line(E, H)
By sss_anti_congruence_v1 on D, E, F, A, E, F we get anti_congruent_triangles(A, E, F, D, E, F)
By line_inequality on Line(C, H), Line(D, E), C we get Line(C, H) != Line(D, E)
By asa_anti_congruence on B, D, G, A, C, G we get anti_congruent_triangles(A, C, G, B, D, G)
By sss_anti_congruence_v1 on F, E, A, F, E, D we get anti_congruent_triangles(A, E, F, D, E, F)
By line_inequality on Line(D, H), Line(G, H), D we get Line(D, H) != Line(G, H)
By line_inequality on Line(E, H), Line(D, H), E we get Line(D, H) != Line(E, H)
By isosceles_trapezoid_properties on A, B, C, D we get parallel(Line(A, B), Line(C, D)), distance(A, D) == distance(B, C), angle(A, B, C) == angle(D, A, B), angle(B, C, D) == angle(C, D, A)
By line_inequality on Line(C, F), Line(D, H), C we get Line(C, F) != Line(D, H)
By sss_anti_congruence_v0 on F, E, D, F, E, A we get anti_congruent_triangles(A, E, F, D, E, F)
By sss_anti_congruence_v1 on E, F, D, E, F, A we get anti_congruent_triangles(A, E, F, D, E, F)
By line_inequality on Line(C, E), h, E we get h != Line(C, E)
By line_inequality on Line(B, E), Line(D, H), E we get Line(B, E) != Line(D, H)
By collinear_definition on F, G, A we get G in Line(A, F), A in Line(F, G), Line(A, F) == Line(F, G), 0 == 2 * angle(G, F, A) mod 360
By line_inequality on Line(A, C), Line(E, G), C we get Line(A, C) != Line(E, G)
By collinear_definition on G, F, A we get F in Line(A, G), A in Line(F, G), Line(A, G) == Line(F, G), 0 == 2 * angle(F, G, A) mod 360
By sss_anti_congruence_v0 on A, E, F, D, E, F we get anti_congruent_triangles(A, E, F, D, E, F)
By sas_anti_congruence on E, D, F, E, A, F we get anti_congruent_triangles(A, E, F, D, E, F)
By line_inequality on Line(E, F), Line(B, D), E we get Line(B, D) != Line(E, F)
By line_inequality on Line(A, E), Line(E, G), A we get Line(A, E) != Line(E, G)
By line_inequality on Line(E, F), Line(F, H), E we get Line(E, F) != Line(F, H)
By sss_anti_congruence_v0 on D, F, E, A, F, E we get anti_congruent_triangles(A, E, F, D, E, F)
By line_inequality on Line(D, H), Line(C, E), H we get Line(C, E) != Line(D, H)
By line_inequality on Line(C, F), Line(D, E), C we get Line(C, F) != Line(D, E)
By sss_anti_congruence_v0 on A, E, F, D, E, F we get anti_congruent_triangles(A, E, F, D, E, F)
By isosceles_triangle_from_angles on G, D, C we get isosceles_triangle(G, C, D)
By sss_anti_congruence_v1 on A, F, E, D, F, E we get anti_congruent_triangles(A, E, F, D, E, F)
By anti_congruence_from_anti_similar_triangles on D, B, G, C, A, G we get anti_congruent_triangles(A, C, G, B, D, G)
By line_inequality on h, Line(E, H), D we get h != Line(E, H)
By line_inequality on Line(A, C), Line(B, D), C we get Line(A, C) != Line(B, D)
By reverse_direction on G, A we get 180 == direction(G, A) - direction(A, G) mod 360
By line_inequality on Line(G, H), Line(E, F), H we get Line(E, F) != Line(G, H)
By line_inequality on Line(G, H), Line(E, H), G we get Line(E, H) != Line(G, H)
By sss_anti_congruence_v0 on F, A, E, F, D, E we get anti_congruent_triangles(A, E, F, D, E, F)
By sss_anti_congruence_v0 on A, E, F, D, E, F we get anti_congruent_triangles(A, E, F, D, E, F)
By sss_anti_congruence_v1 on D, E, F, A, E, F we get anti_congruent_triangles(A, E, F, D, E, F)
By sss_anti_congruence_v0 on E, D, F, E, A, F we get anti_congruent_triangles(A, E, F, D, E, F)
By line_inequality on Line(F, H), Line(E, G), F we get Line(E, G) != Line(F, H)
By anti_congruence_from_anti_similar_triangles on B, D, G, A, C, G we get anti_congruent_triangles(A, C, G, B, D, G)
By anti_congruence_from_anti_similar_triangles on A, C, G, B, D, G we get anti_congruent_triangles(A, C, G, B, D, G)
By asa_anti_congruence on D, B, G, C, A, G we get anti_congruent_triangles(A, C, G, B, D, G)
By sss_anti_congruence_v1 on D, E, F, A, E, F we get anti_congruent_triangles(A, E, F, D, E, F)
By line_inequality on Line(E, F), Line(B, E), F we get Line(B, E) != Line(E, F)
By sss_anti_congruence_v1 on A, F, E, D, F, E we get anti_congruent_triangles(A, E, F, D, E, F)
By sss_anti_congruence_v1 on F, D, E, F, A, E we get anti_congruent_triangles(A, E, F, D, E, F)
By sss_anti_congruence_v0 on F, E, D, F, E, A we get anti_congruent_triangles(A, E, F, D, E, F)
By perpendicular_angle_conditions_v0 on A, F, E we get angle(A, F, E) == orientation(A, F, E) mod 360
By anti_congruence_from_anti_similar_triangles on C, A, G, D, B, G we get anti_congruent_triangles(A, C, G, B, D, G)
By collinear_definition on G, F, D we get F in Line(D, G), D in Line(F, G), Line(D, G) == Line(F, G), 0 == 2 * angle(F, G, D) mod 360
By sss_anti_congruence_v1 on F, E, A, F, E, D we get anti_congruent_triangles(A, E, F, D, E, F)
By perpendicular_angle_conditions_v0 on E, F, A we get angle(E, F, A) == orientation(A, E, F) mod 360
By line_inequality on Line(E, H), Line(B, E), H we get Line(B, E) != Line(E, H)
By collinear_definition on F, G, D we get G in Line(D, F), D in Line(F, G), Line(D, F) == Line(F, G), 0 == 2 * angle(G, F, D) mod 360
By sss_anti_congruence_v0 on D, F, E, A, F, E we get anti_congruent_triangles(A, E, F, D, E, F)
By sss_anti_congruence_v0 on F, A, E, F, D, E we get anti_congruent_triangles(A, E, F, D, E, F)
By line_inequality on Line(C, H), Line(E, G), C we get Line(C, H) != Line(E, G)
By line_inequality on Line(D, H), Line(A, C), H we get Line(A, C) != Line(D, H)
By sss_anti_congruence_v0 on F, A, E, F, D, E we get anti_congruent_triangles(A, E, F, D, E, F)
By sss_anti_congruence_v0 on E, D, F, E, A, F we get anti_congruent_triangles(A, E, F, D, E, F)
By line_inequality on Line(D, E), Line(E, H), D we get Line(D, E) != Line(E, H)
By sss_anti_congruence_v1 on F, E, A, F, E, D we get anti_congruent_triangles(A, E, F, D, E, F)
By line_inequality on Line(G, H), Line(E, G), H we get Line(E, G) != Line(G, H)
By sss_anti_congruence_v1 on E, A, F, E, D, F we get anti_congruent_triangles(A, E, F, D, E, F)
By collinear_definition on F, A, G we get A in Line(F, G), G in Line(A, F), Line(A, F) == Line(F, G), 0 == 2 * angle(A, F, G) mod 360
By perpendicular_angle_conditions_v0 on G, F, E we get angle(G, F, E) == orientation(E, G, F) mod 360
By sss_anti_congruence_v1 on D, E, F, A, E, F we get anti_congruent_triangles(A, E, F, D, E, F)
By line_inequality on Line(C, H), h, H we get h != Line(C, H)
By line_inequality on Line(D, E), Line(B, D), E we get Line(B, D) != Line(D, E)
By line_inequality on Line(C, H), Line(E, H), C we get Line(C, H) != Line(E, H)
By line_inequality on Line(F, H), h, F we get h != Line(F, H)
By sss_anti_congruence_v1 on F, D, E, F, A, E we get anti_congruent_triangles(A, E, F, D, E, F)
By sss_anti_congruence_v1 on F, D, E, F, A, E we get anti_congruent_triangles(A, E, F, D, E, F)
By collinear_definition on G, D, F we get D in Line(F, G), F in Line(D, G), Line(D, G) == Line(F, G), 0 == 2 * angle(D, G, F) mod 360
By sss_anti_congruence_v1 on E, F, D, E, F, A we get anti_congruent_triangles(A, E, F, D, E, F)
By line_inequality on Line(B, D), Line(C, H), D we get Line(B, D) != Line(C, H)
By line_inequality on Line(C, F), Line(C, E), F we get Line(C, E) != Line(C, F)
By line_inequality on Line(E, F), h, E we get h != Line(E, F)
By line_inequality on Line(G, H), Line(A, E), G we get Line(A, E) != Line(G, H)
By line_inequality on Line(A, E), Line(C, H), E we get Line(A, E) != Line(C, H)
By line_inequality on Line(C, E), Line(A, E), C we get Line(A, E) != Line(C, E)
By line_inequality on Line(B, E), Line(F, H), E we get Line(B, E) != Line(F, H)
By line_inequality on Line(A, C), Line(C, H), A we get Line(A, C) != Line(C, H)
By line_inequality on Line(C, F), Line(E, H), F we get Line(C, F) != Line(E, H)
By line_inequality on Line(A, C), Line(D, E), C we get Line(A, C) != Line(D, E)
By line_inequality on Line(D, H), Line(F, H), D we get Line(D, H) != Line(F, H)
By line_inequality on Line(G, H), Line(B, E), H we get Line(B, E) != Line(G, H)
By line_inequality on Line(D, H), Line(C, H), D we get Line(C, H) != Line(D, H)
By line_inequality on Line(C, F), Line(B, D), C we get Line(B, D) != Line(C, F)
By line_inequality on Line(C, H), Line(F, H), C we get Line(C, H) != Line(F, H)
By line_inequality on Line(E, H), Line(E, F), H we get Line(E, F) != Line(E, H)
By line_inequality on Line(E, F), Line(D, H), F we get Line(D, H) != Line(E, F)
By line_inequality on Line(F, H), Line(A, C), F we get Line(A, C) != Line(F, H)
By line_inequality on Line(B, D), Line(D, H), B we get Line(B, D) != Line(D, H)
By line_inequality on Line(C, H), Line(B, E), H we get Line(B, E) != Line(C, H)
By line_inequality on Line(C, F), h, F we get h != Line(C, F)
By line_inequality on Line(A, E), Line(A, C), E we get Line(A, C) != Line(A, E)
By line_inequality on Line(E, G), Line(B, D), G we get Line(B, D) != Line(E, G)
By line_inequality on Line(C, F), Line(A, C), F we get Line(A, C) != Line(C, F)
By line_inequality on Line(G, H), Line(D, E), H we get Line(D, E) != Line(G, H)
By line_inequality on Line(A, E), Line(E, F), A we get Line(A, E) != Line(E, F)
By line_inequality on Line(E, F), Line(C, F), E we get Line(C, F) != Line(E, F)
By line_inequality on Line(B, E), Line(D, E), B we get Line(B, E) != Line(D, E)
By line_inequality on Line(F, H), Line(E, H), F we get Line(E, H) != Line(F, H)
By line_inequality on Line(D, E), Line(E, F), D we get Line(D, E) != Line(E, F)
By line_inequality on Line(C, E), Line(B, E), C we get Line(B, E) != Line(C, E)
By line_inequality on Line(B, D), Line(A, E), D we get Line(A, E) != Line(B, D)
By line_inequality on Line(B, D), Line(B, E), D we get Line(B, D) != Line(B, E)
By line_inequality on Line(C, E), Line(D, E), C we get Line(C, E) != Line(D, E)
By line_inequality on Line(C, H), Line(C, F), H we get Line(C, F) != Line(C, H)
By line_inequality on Line(C, H), Line(C, E), H we get Line(C, E) != Line(C, H)
By line_inequality on Line(B, E), Line(E, G), B we get Line(B, E) != Line(E, G)
By line_circle_intersection_has_at_most_two_points_0 on G, F, A, e we get A not in e
By line_inequality on h, Line(D, E), C we get h != Line(D, E)
By line_inequality on Line(D, E), Line(D, H), E we get Line(D, E) != Line(D, H)
By line_inequality on Line(A, E), Line(B, E), A we get Line(A, E) != Line(B, E)
By line_inequality on Line(D, E), Line(E, G), D we get Line(D, E) != Line(E, G)
By internal_angle_bisector_definition_v0_r on B, G, B, C we get Line(C, G) == internal_angle_bisector(B, C, B)
By internal_angle_bisector_definition_v0_r on C, B, C, G we get Line(B, G) == internal_angle_bisector(C, G, C)
By internal_angle_bisector_definition_v0_r on G, D, G, A we get Line(A, D) == internal_angle_bisector(G, A, G)
By internal_angle_bisector_definition_v0_r on G, C, G, B we get Line(B, C) == internal_angle_bisector(G, B, G)
By perpendicular_lines_draw_intersection on i, Line(E, F) we get exists(line_intersection(i, Line(E, F)))
By perpendicular_bisector_properties on D, A we get perpendicular(Line(A, D), perpendicular_bisector(A, D)), midpoint(A, D) == line_intersection(Line(A, D), perpendicular_bisector(A, D))
By internal_angle_bisector_definition_v0_r on C, G, C, B we get Line(B, G) == internal_angle_bisector(C, B, C)
By isosceles_triangle_altitude_v1 on F, A, D we get identical(perpendicular_bisector(A, D), internal_angle_bisector(A, F, D), perpendicular_line(F, Line(A, D)))
By internal_angle_bisector_definition_v0_r on G, D, F, A we get Line(A, D) == internal_angle_bisector(F, A, G)
By log_of_2_times_distance on B, C, A, F we get log(distance(B, C)) == 0.6931471805599453 + log(distance(A, F))
By internal_angle_bisector_definition_v0_r on G, A, F, D we get Line(A, D) == internal_angle_bisector(F, D, G)
By internal_angle_bisector_definition_v0_r on A, D, A, G we get Line(D, G) == internal_angle_bisector(A, G, A)
By internal_angle_bisector_definition_v0_r on G, B, G, C we get Line(B, C) == internal_angle_bisector(G, C, G)
By internal_angle_bisector_definition_v0_r on G, A, G, D we get Line(A, D) == internal_angle_bisector(G, D, G)
By log_of_2_times_distance on B, C, F, D we get log(distance(B, C)) == 0.6931471805599453 + log(distance(D, F))
By internal_angle_bisector_definition_v0_r on B, C, B, G we get Line(C, G) == internal_angle_bisector(B, G, B)
By internal_angle_bisector_definition_v0_r on D, A, D, G we get Line(A, G) == internal_angle_bisector(D, G, D)
By isosceles_triangle_altitude_v1 on F, D, A we get identical(perpendicular_bisector(A, D), internal_angle_bisector(A, F, D), perpendicular_line(F, Line(A, D)))
By altitude_definition on E, A, G, Line(E, F) we get Line(E, F) == altitude(E, A, G)
By anti_similar_triangle_basic_properties on A, D, E, D, A, E we get not_collinear(A, D, E), not_collinear(A, D, E), angle(A, D, E) == 0 - angle(D, A, E) mod 360, angle(D, E, A) == 0 - angle(A, E, D) mod 360, angle(E, A, D) == 0 - angle(E, D, A) mod 360, log(distance(A, D)) + log(distance(A, E)) == log(distance(A, D)) + log(distance(D, E)), log(distance(A, E)) + log(distance(A, E)) == log(distance(D, E)) + log(distance(D, E)), log(distance(A, E)) + log(distance(A, D)) == log(distance(D, E)) + log(distance(A, D))
By altitude_definition on G, F, E, i we get i == altitude(G, E, F)
By altitude_definition on A, E, F, i we get i == altitude(A, E, F)
By altitude_definition on E, A, D, Line(E, F) we get Line(E, F) == altitude(E, A, D)
By altitude_definition on E, F, G, Line(E, F) we get Line(E, F) == altitude(E, F, G)
By altitude_definition on D, F, E, i we get i == altitude(D, E, F)
By altitude_definition on E, A, F, Line(E, F) we get Line(E, F) == altitude(E, A, F)
By altitude_definition on E, G, D, Line(E, F) we get Line(E, F) == altitude(E, D, G)
By altitude_definition on E, D, F, Line(E, F) we get Line(E, F) == altitude(E, D, F)
By isosceles_triangle_altitude_v0 on E, A, D we get identical(perpendicular_bisector(A, D), internal_angle_bisector(A, E, D), perpendicular_line(E, Line(A, D)))
By isosceles_triangle_altitude_v3 on F, D, A we get identical(perpendicular_bisector(A, D), internal_angle_bisector(A, F, D), perpendicular_line(F, Line(A, D)))
By isosceles_triangle_altitude_v3 on E, D, A we get identical(perpendicular_bisector(A, D), internal_angle_bisector(A, E, D), perpendicular_line(E, Line(A, D)))
By isosceles_triangle_altitude_v3 on F, A, D we get identical(perpendicular_bisector(A, D), internal_angle_bisector(A, F, D), perpendicular_line(F, Line(A, D)))
By isosceles_triangle_altitude_v3 on E, A, D we get identical(perpendicular_bisector(A, D), internal_angle_bisector(A, E, D), perpendicular_line(E, Line(A, D)))
By isosceles_triangle_altitude_v0 on E, D, A we get identical(perpendicular_bisector(A, D), internal_angle_bisector(A, E, D), perpendicular_line(E, Line(A, D)))
By anti_similar_triangle_basic_properties on A, C, E, C, A, E we get not_collinear(A, C, E), not_collinear(A, C, E), angle(A, C, E) == 0 - angle(C, A, E) mod 360, angle(C, E, A) == 0 - angle(A, E, C) mod 360, angle(E, A, C) == 0 - angle(E, C, A) mod 360, log(distance(A, C)) + log(distance(A, E)) == log(distance(A, C)) + log(distance(C, E)), log(distance(A, E)) + log(distance(A, E)) == log(distance(C, E)) + log(distance(C, E)), log(distance(A, E)) + log(distance(A, C)) == log(distance(C, E)) + log(distance(A, C))
By anti_similar_triangle_basic_properties on E, D, B, E, B, D we get not_collinear(B, D, E), not_collinear(B, D, E), angle(E, D, B) == 0 - angle(E, B, D) mod 360, angle(D, B, E) == 0 - angle(B, D, E) mod 360, angle(B, E, D) == 0 - angle(D, E, B) mod 360, log(distance(B, E)) + log(distance(B, D)) == log(distance(D, E)) + log(distance(B, D)), log(distance(B, D)) + log(distance(B, E)) == log(distance(B, D)) + log(distance(D, E)), log(distance(B, E)) + log(distance(B, E)) == log(distance(D, E)) + log(distance(D, E))
By anti_similar_triangle_basic_properties on G, D, C, G, C, D we get not_collinear(C, D, G), not_collinear(C, D, G), angle(G, D, C) == 0 - angle(G, C, D) mod 360, angle(D, C, G) == 0 - angle(C, D, G) mod 360, angle(C, G, D) == 0 - angle(D, G, C) mod 360, log(distance(C, G)) + log(distance(C, D)) == log(distance(D, G)) + log(distance(C, D)), log(distance(C, D)) + log(distance(C, G)) == log(distance(C, D)) + log(distance(D, G)), log(distance(C, G)) + log(distance(C, G)) == log(distance(D, G)) + log(distance(D, G))
By anti_similar_triangle_basic_properties on D, E, C, C, E, D we get not_collinear(C, D, E), not_collinear(C, D, E), angle(D, E, C) == 0 - angle(C, E, D) mod 360, angle(E, C, D) == 0 - angle(E, D, C) mod 360, angle(C, D, E) == 0 - angle(D, C, E) mod 360, log(distance(C, E)) + log(distance(C, E)) == log(distance(D, E)) + log(distance(D, E)), log(distance(C, E)) + log(distance(C, D)) == log(distance(D, E)) + log(distance(C, D)), log(distance(C, D)) + log(distance(C, E)) == log(distance(C, D)) + log(distance(D, E))
By anti_similar_triangle_basic_properties on B, C, E, C, B, E we get not_collinear(B, C, E), not_collinear(B, C, E), angle(B, C, E) == 0 - angle(C, B, E) mod 360, angle(C, E, B) == 0 - angle(B, E, C) mod 360, angle(E, B, C) == 0 - angle(E, C, B) mod 360, log(distance(B, C)) + log(distance(B, E)) == log(distance(B, C)) + log(distance(C, E)), log(distance(B, E)) + log(distance(B, E)) == log(distance(C, E)) + log(distance(C, E)), log(distance(B, E)) + log(distance(B, C)) == log(distance(C, E)) + log(distance(B, C))
By anti_similar_triangle_basic_properties on E, B, A, E, A, B we get not_collinear(A, B, E), not_collinear(A, B, E), angle(E, B, A) == 0 - angle(E, A, B) mod 360, angle(B, A, E) == 0 - angle(A, B, E) mod 360, angle(A, E, B) == 0 - angle(B, E, A) mod 360, log(distance(A, E)) + log(distance(A, B)) == log(distance(B, E)) + log(distance(A, B)), log(distance(A, B)) + log(distance(A, E)) == log(distance(A, B)) + log(distance(B, E)), log(distance(A, E)) + log(distance(A, E)) == log(distance(B, E)) + log(distance(B, E))
By anti_similar_triangle_basic_properties on G, B, A, G, A, B we get not_collinear(A, B, G), not_collinear(A, B, G), angle(G, B, A) == 0 - angle(G, A, B) mod 360, angle(B, A, G) == 0 - angle(A, B, G) mod 360, angle(A, G, B) == 0 - angle(B, G, A) mod 360, log(distance(A, G)) + log(distance(A, B)) == log(distance(B, G)) + log(distance(A, B)), log(distance(A, B)) + log(distance(A, G)) == log(distance(A, B)) + log(distance(B, G)), log(distance(A, G)) + log(distance(A, G)) == log(distance(B, G)) + log(distance(B, G))
By power_of_a_point_definition on D, G, F, e we get log(power_of_a_point(D, e)) == log(distance(D, G)) + log(distance(D, F))
By power_of_a_point_definition on G, B, C, c we get log(power_of_a_point(G, c)) == log(distance(B, G)) + log(distance(C, G))
By power_of_a_point_definition on G, D, A, c we get log(power_of_a_point(G, c)) == log(distance(D, G)) + log(distance(A, G))
By anti_similar_triangle_basic_properties on D, C, B, C, D, A we get not_collinear(B, C, D), not_collinear(A, C, D), angle(D, C, B) == 0 - angle(C, D, A) mod 360, angle(C, B, D) == 0 - angle(D, A, C) mod 360, angle(B, D, C) == 0 - angle(A, C, D) mod 360, log(distance(C, D)) + log(distance(A, D)) == log(distance(C, D)) + log(distance(B, C)), log(distance(A, D)) + log(distance(B, D)) == log(distance(B, C)) + log(distance(A, C)), log(distance(A, C)) + log(distance(C, D)) == log(distance(B, D)) + log(distance(C, D))
By anti_similar_triangle_basic_properties on B, A, C, A, B, D we get not_collinear(A, B, C), not_collinear(A, B, D), angle(B, A, C) == 0 - angle(A, B, D) mod 360, angle(A, C, B) == 0 - angle(B, D, A) mod 360, angle(C, B, A) == 0 - angle(D, A, B) mod 360, log(distance(A, B)) + log(distance(A, C)) == log(distance(A, B)) + log(distance(B, D)), log(distance(A, C)) + log(distance(A, D)) == log(distance(B, D)) + log(distance(B, C)), log(distance(A, D)) + log(distance(A, B)) == log(distance(B, C)) + log(distance(A, B))
By anti_similar_triangle_basic_properties on C, D, B, D, C, A we get not_collinear(B, C, D), not_collinear(A, C, D), angle(C, D, B) == 0 - angle(D, C, A) mod 360, angle(D, B, C) == 0 - angle(C, A, D) mod 360, angle(B, C, D) == 0 - angle(A, D, C) mod 360, log(distance(C, D)) + log(distance(A, C)) == log(distance(C, D)) + log(distance(B, D)), log(distance(A, C)) + log(distance(B, C)) == log(distance(B, D)) + log(distance(A, D)), log(distance(A, D)) + log(distance(C, D)) == log(distance(B, C)) + log(distance(C, D))
By power_of_a_point_definition on G, D, F, d we get log(power_of_a_point(G, d)) == log(distance(D, G)) + log(distance(F, G))
By similar_triangle_basic_properties on B, E, C, D, E, A we get not_collinear(B, C, E), not_collinear(A, D, E), angle(B, E, C) == angle(D, E, A) mod 360, angle(E, A, D) == angle(E, C, B) mod 360, angle(A, D, E) == angle(C, B, E) mod 360, log(distance(B, E)) + log(distance(A, E)) == log(distance(D, E)) + log(distance(C, E)), log(distance(A, E)) + log(distance(B, C)) == log(distance(C, E)) + log(distance(A, D)), log(distance(A, D)) + log(distance(B, E)) == log(distance(B, C)) + log(distance(D, E))
By similar_triangle_basic_properties on B, C, E, D, A, E we get not_collinear(B, C, E), not_collinear(A, D, E), angle(B, C, E) == angle(D, A, E) mod 360, angle(A, E, D) == angle(C, E, B) mod 360, angle(E, B, C) == angle(E, D, A) mod 360, log(distance(A, D)) + log(distance(C, E)) == log(distance(B, C)) + log(distance(A, E)), log(distance(A, E)) + log(distance(B, E)) == log(distance(C, E)) + log(distance(D, E)), log(distance(B, E)) + log(distance(A, D)) == log(distance(D, E)) + log(distance(B, C))
By anti_similar_triangle_basic_properties on E, A, D, E, B, C we get not_collinear(A, D, E), not_collinear(B, C, E), angle(E, A, D) == 0 - angle(E, B, C) mod 360, angle(A, D, E) == 0 - angle(B, C, E) mod 360, angle(D, E, A) == 0 - angle(C, E, B) mod 360, log(distance(A, E)) + log(distance(B, C)) == log(distance(B, E)) + log(distance(A, D)), log(distance(A, D)) + log(distance(C, E)) == log(distance(B, C)) + log(distance(D, E)), log(distance(C, E)) + log(distance(A, E)) == log(distance(D, E)) + log(distance(B, E))
By anti_similar_triangle_basic_properties on D, A, E, C, B, E we get not_collinear(A, D, E), not_collinear(B, C, E), angle(D, A, E) == 0 - angle(C, B, E) mod 360, angle(A, E, D) == 0 - angle(B, E, C) mod 360, angle(E, D, A) == 0 - angle(E, C, B) mod 360, log(distance(A, D)) + log(distance(B, E)) == log(distance(B, C)) + log(distance(A, E)), log(distance(A, E)) + log(distance(C, E)) == log(distance(B, E)) + log(distance(D, E)), log(distance(C, E)) + log(distance(A, D)) == log(distance(D, E)) + log(distance(B, C))
By similar_triangle_basic_properties on G, A, B, G, D, C we get not_collinear(A, B, G), not_collinear(C, D, G), angle(G, A, B) == angle(G, D, C) mod 360, angle(A, B, G) == angle(D, C, G) mod 360, angle(B, G, A) == angle(C, G, D) mod 360, log(distance(A, G)) + log(distance(C, D)) == log(distance(D, G)) + log(distance(A, B)), log(distance(A, B)) + log(distance(C, G)) == log(distance(C, D)) + log(distance(B, G)), log(distance(B, G)) + log(distance(D, G)) == log(distance(C, G)) + log(distance(A, G))
By similar_triangle_basic_properties on C, E, A, B, E, D we get not_collinear(A, C, E), not_collinear(B, D, E), angle(B, E, D) == angle(C, E, A) mod 360, angle(E, A, C) == angle(E, D, B) mod 360, angle(A, C, E) == angle(D, B, E) mod 360, log(distance(B, E)) + log(distance(A, E)) == log(distance(C, E)) + log(distance(D, E)), log(distance(A, E)) + log(distance(B, D)) == log(distance(D, E)) + log(distance(A, C)), log(distance(A, C)) + log(distance(B, E)) == log(distance(B, D)) + log(distance(C, E))
By anti_similar_triangle_basic_properties on D, B, E, C, A, E we get not_collinear(B, D, E), not_collinear(A, C, E), angle(D, B, E) == 0 - angle(C, A, E) mod 360, angle(B, E, D) == 0 - angle(A, E, C) mod 360, angle(E, D, B) == 0 - angle(E, C, A) mod 360, log(distance(A, C)) + log(distance(B, E)) == log(distance(B, D)) + log(distance(A, E)), log(distance(A, E)) + log(distance(D, E)) == log(distance(B, E)) + log(distance(C, E)), log(distance(C, E)) + log(distance(B, D)) == log(distance(D, E)) + log(distance(A, C))
By similar_triangle_basic_properties on A, G, B, D, G, C we get not_collinear(A, B, G), not_collinear(C, D, G), angle(A, G, B) == angle(D, G, C) mod 360, angle(G, B, A) == angle(G, C, D) mod 360, angle(B, A, G) == angle(C, D, G) mod 360, log(distance(A, G)) + log(distance(C, G)) == log(distance(D, G)) + log(distance(B, G)), log(distance(B, G)) + log(distance(C, D)) == log(distance(C, G)) + log(distance(A, B)), log(distance(A, B)) + log(distance(D, G)) == log(distance(C, D)) + log(distance(A, G))
By anti_similar_triangle_basic_properties on C, D, G, A, B, G we get not_collinear(C, D, G), not_collinear(A, B, G), angle(C, D, G) == 0 - angle(A, B, G) mod 360, angle(D, G, C) == 0 - angle(B, G, A) mod 360, angle(G, C, D) == 0 - angle(G, A, B) mod 360, log(distance(A, B)) + log(distance(D, G)) == log(distance(C, D)) + log(distance(B, G)), log(distance(B, G)) + log(distance(C, G)) == log(distance(D, G)) + log(distance(A, G)), log(distance(A, G)) + log(distance(C, D)) == log(distance(C, G)) + log(distance(A, B))
By similar_triangle_basic_properties on E, C, A, E, B, D we get not_collinear(A, C, E), not_collinear(B, D, E), angle(E, B, D) == angle(E, C, A) mod 360, angle(B, D, E) == angle(C, A, E) mod 360, angle(A, E, C) == angle(D, E, B) mod 360, log(distance(B, E)) + log(distance(A, C)) == log(distance(C, E)) + log(distance(B, D)), log(distance(A, C)) + log(distance(D, E)) == log(distance(B, D)) + log(distance(A, E)), log(distance(A, E)) + log(distance(B, E)) == log(distance(D, E)) + log(distance(C, E))
By anti_similar_triangle_basic_properties on B, A, G, D, C, G we get not_collinear(A, B, G), not_collinear(C, D, G), angle(B, A, G) == 0 - angle(D, C, G) mod 360, angle(A, G, B) == 0 - angle(C, G, D) mod 360, angle(G, B, A) == 0 - angle(G, D, C) mod 360, log(distance(A, B)) + log(distance(C, G)) == log(distance(C, D)) + log(distance(A, G)), log(distance(A, G)) + log(distance(D, G)) == log(distance(C, G)) + log(distance(B, G)), log(distance(B, G)) + log(distance(C, D)) == log(distance(D, G)) + log(distance(A, B))
By anti_similar_triangle_basic_properties on D, B, G, C, A, G we get not_collinear(B, D, G), not_collinear(A, C, G), angle(D, B, G) == 0 - angle(C, A, G) mod 360, angle(B, G, D) == 0 - angle(A, G, C) mod 360, angle(G, D, B) == 0 - angle(G, C, A) mod 360, log(distance(A, C)) + log(distance(B, G)) == log(distance(B, D)) + log(distance(A, G)), log(distance(A, G)) + log(distance(D, G)) == log(distance(B, G)) + log(distance(C, G)), log(distance(C, G)) + log(distance(B, D)) == log(distance(D, G)) + log(distance(A, C))
By anti_similar_triangle_basic_properties on D, G, B, C, G, A we get not_collinear(B, D, G), not_collinear(A, C, G), angle(D, G, B) == 0 - angle(C, G, A) mod 360, angle(G, B, D) == 0 - angle(G, A, C) mod 360, angle(B, D, G) == 0 - angle(A, C, G) mod 360, log(distance(C, G)) + log(distance(B, G)) == log(distance(D, G)) + log(distance(A, G)), log(distance(A, G)) + log(distance(B, D)) == log(distance(B, G)) + log(distance(A, C)), log(distance(A, C)) + log(distance(D, G)) == log(distance(B, D)) + log(distance(C, G))
By anti_similar_triangle_basic_properties on B, D, E, A, C, E we get not_collinear(B, D, E), not_collinear(A, C, E), angle(B, D, E) == 0 - angle(A, C, E) mod 360, angle(D, E, B) == 0 - angle(C, E, A) mod 360, angle(E, B, D) == 0 - angle(E, A, C) mod 360, log(distance(A, C)) + log(distance(D, E)) == log(distance(B, D)) + log(distance(C, E)), log(distance(C, E)) + log(distance(B, E)) == log(distance(D, E)) + log(distance(A, E)), log(distance(A, E)) + log(distance(B, D)) == log(distance(B, E)) + log(distance(A, C))
By concyclic_sufficient_conditions_v0 on F, G, C, center(d) we get concyclic(C, F, G, center(d))
By line_intersection_definition on H, Line(E, H), Line(D, H) we get H == line_intersection(Line(D, H), Line(E, H))
By line_intersection_definition on E, Line(E, G), Line(E, H) we get E == line_intersection(Line(E, G), Line(E, H))
By concurrent_sufficient_conditions on Line(C, E), Line(A, C), g we get concurrent(g, Line(A, C), Line(C, E))
By line_intersection_definition on F, Line(F, H), Line(E, F) we get F == line_intersection(Line(E, F), Line(F, H))
By line_intersection_definition on E, Line(B, E), Line(C, E) we get E == line_intersection(Line(B, E), Line(C, E))
By line_intersection_definition on F, Line(C, F), Line(E, F) we get F == line_intersection(Line(C, F), Line(E, F))
By line_intersection_definition on C, Line(C, E), Line(C, F) we get C == line_intersection(Line(C, E), Line(C, F))
By line_intersection_definition on E, Line(D, E), Line(E, G) we get E == line_intersection(Line(D, E), Line(E, G))
By concurrent_sufficient_conditions on Line(C, E), h, g we get concurrent(g, h, Line(C, E))
By concurrent_sufficient_conditions on Line(F, H), Line(C, F), i we get concurrent(i, Line(C, F), Line(F, H))
By line_intersection_definition on D, Line(D, E), h we get D == line_intersection(h, Line(D, E))
By line_intersection_definition on C, Line(A, C), Line(C, H) we get C == line_intersection(Line(A, C), Line(C, H))
By concurrent_sufficient_conditions on Line(B, E), Line(B, D), f we get concurrent(f, Line(B, D), Line(B, E))
By line_intersection_definition on A, Line(A, C), Line(A, E) we get A == line_intersection(Line(A, C), Line(A, E))
By concurrent_sufficient_conditions on Line(B, D), Line(B, E), f we get concurrent(f, Line(B, D), Line(B, E))
By line_intersection_definition on E, Line(E, F), Line(C, E) we get E == line_intersection(Line(C, E), Line(E, F))
By line_intersection_definition on C, Line(C, F), Line(A, C) we get C == line_intersection(Line(A, C), Line(C, F))
By concurrent_sufficient_conditions on h, Line(C, F), g we get concurrent(g, h, Line(C, F))
By line_intersection_definition on H, Line(F, H), Line(C, H) we get H == line_intersection(Line(C, H), Line(F, H))
By line_intersection_definition on C, h, Line(C, E) we get C == line_intersection(h, Line(C, E))
By line_intersection_definition on E, Line(A, E), Line(B, E) we get E == line_intersection(Line(A, E), Line(B, E))
By concurrent_sufficient_conditions on Line(A, C), Line(C, E), g we get concurrent(g, Line(A, C), Line(C, E))
By concurrent_sufficient_conditions on Line(A, C), Line(A, E), i we get concurrent(i, Line(A, C), Line(A, E))
By line_intersection_definition on E, Line(E, F), Line(A, E) we get E == line_intersection(Line(A, E), Line(E, F))
By line_intersection_definition on E, Line(B, E), Line(E, F) we get E == line_intersection(Line(B, E), Line(E, F))
By line_intersection_definition on C, h, Line(C, F) we get C == line_intersection(h, Line(C, F))
By line_intersection_definition on E, Line(E, H), Line(E, F) we get E == line_intersection(Line(E, F), Line(E, H))
By line_intersection_definition on C, Line(A, C), Line(C, E) we get C == line_intersection(Line(A, C), Line(C, E))
By line_intersection_definition on C, Line(C, F), Line(C, H) we get C == line_intersection(Line(C, F), Line(C, H))
By concurrent_sufficient_conditions on Line(D, H), h, i we get concurrent(h, i, Line(D, H))
By concurrent_sufficient_conditions on Line(C, F), h, g we get concurrent(g, h, Line(C, F))
By line_intersection_definition on E, Line(E, G), Line(E, F) we get E == line_intersection(Line(E, F), Line(E, G))
By line_intersection_definition on E, Line(A, E), Line(E, H) we get E == line_intersection(Line(A, E), Line(E, H))
By line_intersection_definition on E, Line(C, E), Line(D, E) we get E == line_intersection(Line(C, E), Line(D, E))
By concurrent_sufficient_conditions on Line(D, E), Line(B, D), i we get concurrent(i, Line(B, D), Line(D, E))
By concurrent_sufficient_conditions on Line(E, G), Line(G, H), i we get concurrent(i, Line(E, G), Line(G, H))
By line_intersection_definition on E, Line(D, E), Line(A, E) we get E == line_intersection(Line(A, E), Line(D, E))
By line_intersection_definition on E, Line(E, H), Line(C, E) we get E == line_intersection(Line(C, E), Line(E, H))
By line_intersection_definition on E, Line(C, E), Line(E, G) we get E == line_intersection(Line(C, E), Line(E, G))
By line_intersection_definition on E, Line(E, G), Line(A, E) we get E == line_intersection(Line(A, E), Line(E, G))
By line_intersection_definition on H, Line(C, H), Line(D, H) we get H == line_intersection(Line(C, H), Line(D, H))
By line_intersection_definition on E, Line(E, F), Line(D, E) we get E == line_intersection(Line(D, E), Line(E, F))
By line_intersection_definition on C, Line(C, E), Line(C, H) we get C == line_intersection(Line(C, E), Line(C, H))
By concurrent_sufficient_conditions on Line(D, H), Line(D, E), i we get concurrent(i, Line(D, E), Line(D, H))
By line_intersection_definition on D, Line(D, H), Line(B, D) we get D == line_intersection(Line(B, D), Line(D, H))
By concurrent_sufficient_conditions on Line(B, D), Line(D, H), i we get concurrent(i, Line(B, D), Line(D, H))
By line_intersection_definition on D, Line(D, H), h we get D == line_intersection(h, Line(D, H))
By line_intersection_definition on D, Line(D, E), Line(B, D) we get D == line_intersection(Line(B, D), Line(D, E))
By line_intersection_definition on H, Line(G, H), Line(D, H) we get H == line_intersection(Line(D, H), Line(G, H))
By line_intersection_definition on G, Line(G, H), Line(E, G) we get G == line_intersection(Line(E, G), Line(G, H))
By concurrent_sufficient_conditions on Line(B, E), Line(B, D), g we get concurrent(g, Line(B, D), Line(B, E))
By concurrent_sufficient_conditions on h, Line(C, E), g we get concurrent(g, h, Line(C, E))
By line_intersection_definition on H, Line(E, H), Line(G, H) we get H == line_intersection(Line(E, H), Line(G, H))
By concurrent_sufficient_conditions on Line(C, F), Line(C, E), g we get concurrent(g, Line(C, E), Line(C, F))
By line_intersection_definition on H, Line(G, H), Line(F, H) we get H == line_intersection(Line(F, H), Line(G, H))
By line_intersection_definition on D, Line(D, H), Line(D, E) we get D == line_intersection(Line(D, E), Line(D, H))
By line_intersection_definition on E, Line(D, E), Line(E, H) we get E == line_intersection(Line(D, E), Line(E, H))
By line_intersection_definition on B, Line(B, E), Line(B, D) we get B == line_intersection(Line(B, D), Line(B, E))
By concurrent_sufficient_conditions on Line(B, D), Line(D, E), i we get concurrent(i, Line(B, D), Line(D, E))
By line_intersection_definition on H, Line(E, H), Line(C, H) we get H == line_intersection(Line(C, H), Line(E, H))
By line_intersection_definition on H, Line(F, H), Line(E, H) we get H == line_intersection(Line(E, H), Line(F, H))
By line_intersection_definition on E, Line(B, E), Line(D, E) we get E == line_intersection(Line(B, E), Line(D, E))
By concurrent_sufficient_conditions on Line(G, H), Line(E, G), i we get concurrent(i, Line(E, G), Line(G, H))
By concurrent_sufficient_conditions on Line(D, H), Line(B, D), i we get concurrent(i, Line(B, D), Line(D, H))
By line_intersection_definition on H, Line(F, H), Line(D, H) we get H == line_intersection(Line(D, H), Line(F, H))
By concurrent_sufficient_conditions on Line(B, D), Line(B, E), g we get concurrent(g, Line(B, D), Line(B, E))
By line_intersection_definition on C, h, Line(C, H) we get C == line_intersection(h, Line(C, H))
By concurrent_sufficient_conditions on Line(E, F), Line(F, H), i we get concurrent(i, Line(E, F), Line(F, H))
By line_intersection_definition on E, Line(E, G), Line(B, E) we get E == line_intersection(Line(B, E), Line(E, G))
By line_intersection_definition on E, Line(E, H), Line(B, E) we get E == line_intersection(Line(B, E), Line(E, H))
By concurrent_sufficient_conditions on Line(C, E), Line(C, F), g we get concurrent(g, Line(C, E), Line(C, F))
By concurrent_sufficient_conditions on Line(A, E), Line(A, C), i we get concurrent(i, Line(A, C), Line(A, E))
By concurrent_sufficient_conditions on Line(F, H), Line(E, F), i we get concurrent(i, Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(A, C), Line(A, E), f we get concurrent(f, Line(A, C), Line(A, E))
By concurrent_sufficient_conditions on Line(A, C), Line(C, F), g we get concurrent(g, Line(A, C), Line(C, F))
By line_intersection_definition on F, Line(C, F), Line(F, H) we get F == line_intersection(Line(C, F), Line(F, H))
By concurrent_sufficient_conditions on Line(D, E), h, i we get concurrent(h, i, Line(D, E))
By concurrent_sufficient_conditions on h, Line(D, E), i we get concurrent(h, i, Line(D, E))
By concurrent_sufficient_conditions on h, Line(D, H), i we get concurrent(h, i, Line(D, H))
By concurrent_sufficient_conditions on Line(C, F), Line(E, F), i we get concurrent(i, Line(C, F), Line(E, F))
By concurrent_sufficient_conditions on Line(C, F), Line(F, H), i we get concurrent(i, Line(C, F), Line(F, H))
By concurrent_sufficient_conditions on Line(C, F), Line(A, C), g we get concurrent(g, Line(A, C), Line(C, F))
By line_intersection_definition on E, Line(A, E), Line(C, E) we get E == line_intersection(Line(A, E), Line(C, E))
By concurrent_sufficient_conditions on Line(A, E), Line(A, C), f we get concurrent(f, Line(A, C), Line(A, E))
By concurrent_sufficient_conditions on Line(E, F), Line(C, F), i we get concurrent(i, Line(C, F), Line(E, F))
By concurrent_sufficient_conditions on Line(D, E), Line(D, H), i we get concurrent(i, Line(D, E), Line(D, H))
By same_angle_converse_v1 on center(e), E, G, H we get collinear(E, G, center(e))
By perpendicular_direction_conditions_v0 on E, H, G, H we get perpendicular(Line(E, H), Line(G, H))
By between_implies_orientation on A, F, G, D we get orientation(A, F, G) == orientation(A, G, D) mod 360, orientation(A, F, D) == orientation(A, F, G) mod 360
By between_implies_orientation on D, A, F, G we get orientation(A, F, D) == orientation(D, F, G) mod 360, orientation(A, F, D) == orientation(A, G, D) mod 360
By between_implies_orientation on A, D, G, F we get orientation(A, D, G) == orientation(A, G, F) mod 360, orientation(A, D, F) == orientation(A, D, G) mod 360
By between_implies_orientation on D, G, F, A we get orientation(A, D, F) == orientation(D, G, F) mod 360, orientation(A, D, G) == orientation(D, G, F) mod 360
By between_imply_not_between on A, F, G we get collinear_and_not_between(F, A, G)
By between_imply_not_between on D, G, F we get collinear_and_not_between(F, D, G)
By between_imply_not_between on G, F, A we get collinear_and_not_between(A, G, F)
By between_imply_not_between on F, G, D we get collinear_and_not_between(D, F, G)
By different_points_v1 on center(d), F we get 0 != distance(F, center(d))
By different_points_v1 on center(e), E we get 0 != distance(E, center(e))
By different_points_v1 on H, center(e) we get 0 != distance(H, center(e))
By different_points_v1 on C, center(d) we get 0 != distance(C, center(d))
By different_points_v1 on G, center(e) we get 0 != distance(G, center(e))
By different_points_v1 on center(e), F we get 0 != distance(F, center(e))
By different_points_v1 on D, center(d) we get 0 != distance(D, center(d))
By different_points_v1 on center(d), H we get 0 != distance(H, center(d))
By orthocenter_concurrency on E, G, F we get orthocenter(E, F, G) in altitude(E, F, G), orthocenter(E, F, G) in altitude(G, E, F), orthocenter(E, F, G) in altitude(F, E, G)
By orthocenter_concurrency on D, E, F we get orthocenter(D, E, F) in altitude(D, E, F), orthocenter(D, E, F) in altitude(E, D, F), orthocenter(D, E, F) in altitude(F, D, E)
By orthocenter_concurrency on A, E, F we get orthocenter(A, E, F) in altitude(A, E, F), orthocenter(A, E, F) in altitude(E, A, F), orthocenter(A, E, F) in altitude(F, A, E)
By divide_by_2_mod_180_v2 on A, E, F, A, C, D we get angle(A, E, F) == angle(A, C, D) + 180 mod 360
By sas_anti_congruence on G, D, E, G, C, E we get anti_congruent_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v1 on G, E, A, G, E, B we get anti_congruent_triangles(A, E, G, B, E, G)
By divide_by_2_mod_180_v1 on B, A, C, D, E, F we get angle(B, A, C) == angle(D, E, F) mod 360
By sss_anti_congruence_v0 on E, G, A, E, G, B we get anti_congruent_triangles(A, E, G, B, E, G)
By sss_anti_congruence_v0 on B, G, E, A, G, E we get anti_congruent_triangles(A, E, G, B, E, G)
By sss_anti_congruence_v0 on E, B, G, E, A, G we get anti_congruent_triangles(A, E, G, B, E, G)
By divide_by_2_mod_180_v0 on A, E, F, A, B, D we get angle(A, B, D) == angle(A, E, F) mod 360
By sss_anti_congruence_v0 on E, B, G, E, A, G we get anti_congruent_triangles(A, E, G, B, E, G)
By divide_by_2_mod_180_v1 on D, B, A, D, E, F we get angle(D, B, A) == angle(D, E, F) mod 360
By sss_anti_congruence_v1 on A, G, E, B, G, E we get anti_congruent_triangles(A, E, G, B, E, G)
By divide_by_2_mod_180_v1 on F, E, A, B, A, C we get angle(B, A, C) == angle(F, E, A) mod 360
By divide_by_2_mod_180_v2 on A, E, F, C, D, B we get angle(A, E, F) == angle(C, D, B) + 180 mod 360
By sss_anti_congruence_v0 on A, E, G, B, E, G we get anti_congruent_triangles(A, E, G, B, E, G)
By between_imply_segment_sum on F, G, D we get distance(D, F) == distance(F, G) + distance(D, G)
By sss_anti_congruence_v1 on E, A, G, E, B, G we get anti_congruent_triangles(A, E, G, B, E, G)
By divide_by_2_mod_180_v2 on D, C, A, D, E, F we get angle(D, C, A) == angle(D, E, F) + 180 mod 360
By sss_anti_congruence_v0 on B, G, E, A, G, E we get anti_congruent_triangles(A, E, G, B, E, G)
By sss_anti_congruence_v0 on B, G, E, A, G, E we get anti_congruent_triangles(A, E, G, B, E, G)
By sss_anti_congruence_v0 on G, E, B, G, E, A we get anti_congruent_triangles(A, E, G, B, E, G)
By sss_anti_congruence_v1 on E, G, B, E, G, A we get anti_congruent_triangles(A, E, G, B, E, G)
By divide_by_2_mod_180_v2 on B, D, C, F, E, A we get angle(B, D, C) == angle(F, E, A) + 180 mod 360
By divide_by_2_mod_180_v3 on D, E, F, B, D, C we get angle(D, E, F) == angle(B, D, C) + 180 mod 360
By line_inequality on Line(F, center(d)), Line(A, E), F we get Line(A, E) != Line(F, center(d))
By sss_anti_congruence_v1 on E, G, D, E, G, C we get anti_congruent_triangles(C, E, G, D, E, G)
By line_inequality on Line(E, center(e)), Line(G, H), E we get Line(G, H) != Line(E, center(e))
By sss_anti_congruence_v1 on E, G, B, E, G, A we get anti_congruent_triangles(A, E, G, B, E, G)
By divide_by_2_mod_180_v0 on F, E, D, A, B, D we get angle(A, B, D) == angle(F, E, D) mod 360
By sss_anti_congruence_v0 on G, C, E, G, D, E we get anti_congruent_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v1 on D, E, G, C, E, G we get anti_congruent_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v1 on E, C, G, E, D, G we get anti_congruent_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v0 on B, G, E, A, G, E we get anti_congruent_triangles(A, E, G, B, E, G)
By divide_by_2_mod_180_v3 on C, D, B, F, E, D we get angle(C, D, B) == angle(F, E, D) + 180 mod 360
By divide_by_2_mod_180_v3 on D, E, F, D, C, A we get angle(D, E, F) == angle(D, C, A) + 180 mod 360
By sss_anti_congruence_v0 on C, E, G, D, E, G we get anti_congruent_triangles(C, E, G, D, E, G)
By divide_by_2_mod_180_v0 on C, A, B, F, E, D we get angle(C, A, B) == angle(F, E, D) mod 360
By divide_by_2_mod_180_v0 on A, E, F, C, A, B we get angle(A, E, F) == angle(C, A, B) mod 360
By sss_anti_congruence_v0 on C, E, G, D, E, G we get anti_congruent_triangles(C, E, G, D, E, G)
By divide_by_2_mod_180_v2 on F, E, D, A, C, D we get angle(F, E, D) == angle(A, C, D) + 180 mod 360
By divide_by_2_mod_180_v2 on D, C, A, F, E, A we get angle(D, C, A) == angle(F, E, A) + 180 mod 360
By sas_anti_similarity on G, A, E, G, B, E we get anti_similar_triangles(A, E, G, B, E, G)
By sss_anti_congruence_v0 on E, G, C, E, G, D we get anti_congruent_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v1 on B, E, G, A, E, G we get anti_congruent_triangles(A, E, G, B, E, G)
By divide_by_2_mod_180_v3 on A, C, D, F, E, D we get angle(A, C, D) == angle(F, E, D) + 180 mod 360
By sss_anti_congruence_v1 on G, E, A, G, E, B we get anti_congruent_triangles(A, E, G, B, E, G)
By sss_anti_congruence_v1 on E, C, G, E, D, G we get anti_congruent_triangles(C, E, G, D, E, G)
By divide_by_2_mod_180_v3 on F, E, A, D, C, A we get angle(F, E, A) == angle(D, C, A) + 180 mod 360
By sss_anti_congruence_v1 on E, A, G, E, B, G we get anti_congruent_triangles(A, E, G, B, E, G)
By divide_by_2_mod_180_v3 on F, E, A, B, D, C we get angle(F, E, A) == angle(B, D, C) + 180 mod 360
By divide_by_2_mod_180_v2 on B, D, C, D, E, F we get angle(B, D, C) == angle(D, E, F) + 180 mod 360
By divide_by_2_mod_180_v3 on A, C, D, A, E, F we get angle(A, C, D) == angle(A, E, F) + 180 mod 360
By sss_anti_congruence_v1 on E, A, G, E, B, G we get anti_congruent_triangles(A, E, G, B, E, G)
By divide_by_2_mod_180_v1 on F, E, A, D, B, A we get angle(D, B, A) == angle(F, E, A) mod 360
By line_inequality on Line(H, center(d)), Line(A, C), H we get Line(A, C) != Line(H, center(d))
By sss_anti_congruence_v1 on G, B, E, G, A, E we get anti_congruent_triangles(A, E, G, B, E, G)
By sas_anti_similarity on E, B, G, E, A, G we get anti_similar_triangles(A, E, G, B, E, G)
By divide_by_2_mod_180_v3 on C, D, B, A, E, F we get angle(C, D, B) == angle(A, E, F) + 180 mod 360
By sas_anti_congruence on E, D, G, E, C, G we get anti_congruent_triangles(C, E, G, D, E, G)
By sas_anti_similarity on E, D, G, E, C, G we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v0 on G, A, E, G, B, E we get anti_congruent_triangles(A, E, G, B, E, G)
By sss_anti_congruence_v0 on E, D, G, E, C, G we get anti_congruent_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v1 on G, E, A, G, E, B we get anti_congruent_triangles(A, E, G, B, E, G)
By line_inequality on Line(H, center(d)), Line(E, F), H we get Line(E, F) != Line(H, center(d))
By sss_anti_congruence_v0 on G, C, E, G, D, E we get anti_congruent_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v0 on C, E, G, D, E, G we get anti_congruent_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v0 on B, G, E, A, G, E we get anti_congruent_triangles(A, E, G, B, E, G)
By sss_anti_congruence_v1 on C, G, E, D, G, E we get anti_congruent_triangles(C, E, G, D, E, G)
By line_inequality on Line(D, center(d)), Line(E, F), D we get Line(E, F) != Line(D, center(d))
By divide_by_2_mod_180_v2 on F, E, D, C, D, B we get angle(F, E, D) == angle(C, D, B) + 180 mod 360
By sss_anti_congruence_v1 on G, B, E, G, A, E we get anti_congruent_triangles(A, E, G, B, E, G)
By sss_anti_congruence_v1 on G, E, C, G, E, D we get anti_congruent_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v1 on E, G, D, E, G, C we get anti_congruent_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v1 on B, E, G, A, E, G we get anti_congruent_triangles(A, E, G, B, E, G)
By sss_anti_congruence_v1 on B, E, G, A, E, G we get anti_congruent_triangles(A, E, G, B, E, G)
By sss_anti_congruence_v0 on A, E, G, B, E, G we get anti_congruent_triangles(A, E, G, B, E, G)
By sss_anti_congruence_v0 on E, G, A, E, G, B we get anti_congruent_triangles(A, E, G, B, E, G)
By sss_anti_congruence_v1 on G, E, A, G, E, B we get anti_congruent_triangles(A, E, G, B, E, G)
By sas_anti_similarity on E, A, G, E, B, G we get anti_similar_triangles(A, E, G, B, E, G)
By sss_anti_congruence_v0 on G, E, D, G, E, C we get anti_congruent_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v1 on E, G, D, E, G, C we get anti_congruent_triangles(C, E, G, D, E, G)
By line_inequality on Line(G, center(e)), Line(E, F), G we get Line(E, F) != Line(G, center(e))
By sas_anti_similarity on G, D, E, G, C, E we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v1 on E, C, G, E, D, G we get anti_congruent_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v0 on G, C, E, G, D, E we get anti_congruent_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v1 on D, E, G, C, E, G we get anti_congruent_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v1 on E, G, D, E, G, C we get anti_congruent_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v0 on E, B, G, E, A, G we get anti_congruent_triangles(A, E, G, B, E, G)
By sss_anti_congruence_v1 on B, E, G, A, E, G we get anti_congruent_triangles(A, E, G, B, E, G)
By line_inequality on Line(C, center(d)), Line(A, E), C we get Line(A, E) != Line(C, center(d))
By sss_anti_congruence_v0 on D, G, E, C, G, E we get anti_congruent_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v0 on E, D, G, E, C, G we get anti_congruent_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v0 on G, E, D, G, E, C we get anti_congruent_triangles(C, E, G, D, E, G)
By sas_anti_congruence on G, A, E, G, B, E we get anti_congruent_triangles(A, E, G, B, E, G)
By sss_anti_congruence_v0 on E, G, A, E, G, B we get anti_congruent_triangles(A, E, G, B, E, G)
By sss_anti_congruence_v1 on G, B, E, G, A, E we get anti_congruent_triangles(A, E, G, B, E, G)
By sss_anti_congruence_v0 on D, G, E, C, G, E we get anti_congruent_triangles(C, E, G, D, E, G)
By line_inequality on Line(F, center(e)), g, F we get g != Line(F, center(e))
By sss_anti_congruence_v0 on D, G, E, C, G, E we get anti_congruent_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v1 on E, G, D, E, G, C we get anti_congruent_triangles(C, E, G, D, E, G)
By between_imply_segment_sum on G, F, A we get distance(A, G) == distance(F, G) + distance(A, F)
By sss_anti_congruence_v0 on G, E, B, G, E, A we get anti_congruent_triangles(A, E, G, B, E, G)
By sss_anti_congruence_v1 on G, E, C, G, E, D we get anti_congruent_triangles(C, E, G, D, E, G)
By line_inequality on Line(C, center(d)), f, C we get f != Line(C, center(d))
By sss_anti_congruence_v1 on G, B, E, G, A, E we get anti_congruent_triangles(A, E, G, B, E, G)
By sss_anti_congruence_v1 on E, G, B, E, G, A we get anti_congruent_triangles(A, E, G, B, E, G)
By sss_anti_congruence_v1 on B, E, G, A, E, G we get anti_congruent_triangles(A, E, G, B, E, G)
By line_inequality on Line(H, center(e)), Line(E, F), H we get Line(E, F) != Line(H, center(e))
By sss_anti_congruence_v0 on D, G, E, C, G, E we get anti_congruent_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v1 on C, G, E, D, G, E we get anti_congruent_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v0 on G, A, E, G, B, E we get anti_congruent_triangles(A, E, G, B, E, G)
By line_inequality on Line(F, center(e)), Line(B, E), F we get Line(B, E) != Line(F, center(e))
By sss_anti_congruence_v1 on G, E, C, G, E, D we get anti_congruent_triangles(C, E, G, D, E, G)
By line_inequality on Line(D, center(d)), g, D we get g != Line(D, center(d))
By line_inequality on Line(E, center(e)), Line(D, H), E we get Line(D, H) != Line(E, center(e))
By sss_anti_congruence_v1 on A, G, E, B, G, E we get anti_congruent_triangles(A, E, G, B, E, G)
By sss_anti_congruence_v1 on G, E, C, G, E, D we get anti_congruent_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v1 on E, A, G, E, B, G we get anti_congruent_triangles(A, E, G, B, E, G)
By line_inequality on Line(F, center(d)), g, F we get g != Line(F, center(d))
By sss_anti_congruence_v1 on D, E, G, C, E, G we get anti_congruent_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v0 on E, G, C, E, G, D we get anti_congruent_triangles(C, E, G, D, E, G)
By line_inequality on Line(F, center(e)), Line(C, E), F we get Line(C, E) != Line(F, center(e))
By line_inequality on Line(G, center(e)), Line(E, H), G we get Line(E, H) != Line(G, center(e))
By sss_anti_congruence_v0 on G, E, D, G, E, C we get anti_congruent_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v1 on E, A, G, E, B, G we get anti_congruent_triangles(A, E, G, B, E, G)
By sss_anti_congruence_v1 on D, E, G, C, E, G we get anti_congruent_triangles(C, E, G, D, E, G)
By line_inequality on Line(C, center(d)), Line(D, E), C we get Line(D, E) != Line(C, center(d))
By sss_anti_congruence_v1 on C, G, E, D, G, E we get anti_congruent_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v1 on A, G, E, B, G, E we get anti_congruent_triangles(A, E, G, B, E, G)
By sss_anti_congruence_v1 on G, B, E, G, A, E we get anti_congruent_triangles(A, E, G, B, E, G)
By line_inequality on Line(F, center(e)), Line(A, E), F we get Line(A, E) != Line(F, center(e))
By sss_anti_congruence_v0 on G, A, E, G, B, E we get anti_congruent_triangles(A, E, G, B, E, G)
By sss_anti_congruence_v1 on G, D, E, G, C, E we get anti_congruent_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v1 on E, G, B, E, G, A we get anti_congruent_triangles(A, E, G, B, E, G)
By sss_anti_congruence_v0 on A, E, G, B, E, G we get anti_congruent_triangles(A, E, G, B, E, G)
By sss_anti_congruence_v0 on E, D, G, E, C, G we get anti_congruent_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v0 on G, E, D, G, E, C we get anti_congruent_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v0 on E, D, G, E, C, G we get anti_congruent_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v0 on A, E, G, B, E, G we get anti_congruent_triangles(A, E, G, B, E, G)
By sss_anti_congruence_v0 on E, G, C, E, G, D we get anti_congruent_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v0 on D, G, E, C, G, E we get anti_congruent_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v0 on G, E, B, G, E, A we get anti_congruent_triangles(A, E, G, B, E, G)
By sss_anti_congruence_v1 on G, B, E, G, A, E we get anti_congruent_triangles(A, E, G, B, E, G)
By sss_anti_congruence_v1 on C, G, E, D, G, E we get anti_congruent_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v0 on D, G, E, C, G, E we get anti_congruent_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v0 on C, E, G, D, E, G we get anti_congruent_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v1 on A, G, E, B, G, E we get anti_congruent_triangles(A, E, G, B, E, G)
By sss_anti_congruence_v0 on G, C, E, G, D, E we get anti_congruent_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v1 on D, E, G, C, E, G we get anti_congruent_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v1 on G, D, E, G, C, E we get anti_congruent_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v1 on E, G, D, E, G, C we get anti_congruent_triangles(C, E, G, D, E, G)
By line_inequality on Line(C, center(d)), Line(E, G), C we get Line(E, G) != Line(C, center(d))
By sss_anti_congruence_v0 on G, A, E, G, B, E we get anti_congruent_triangles(A, E, G, B, E, G)
By sss_anti_congruence_v0 on E, B, G, E, A, G we get anti_congruent_triangles(A, E, G, B, E, G)
By sss_anti_congruence_v1 on G, E, A, G, E, B we get anti_congruent_triangles(A, E, G, B, E, G)
By sss_anti_congruence_v0 on G, A, E, G, B, E we get anti_congruent_triangles(A, E, G, B, E, G)
By sas_anti_congruence on G, B, E, G, A, E we get anti_congruent_triangles(A, E, G, B, E, G)
By sss_anti_congruence_v1 on E, C, G, E, D, G we get anti_congruent_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v1 on E, G, B, E, G, A we get anti_congruent_triangles(A, E, G, B, E, G)
By sss_anti_congruence_v1 on G, D, E, G, C, E we get anti_congruent_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v1 on E, A, G, E, B, G we get anti_congruent_triangles(A, E, G, B, E, G)
By sss_anti_congruence_v0 on C, E, G, D, E, G we get anti_congruent_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v0 on B, G, E, A, G, E we get anti_congruent_triangles(A, E, G, B, E, G)
By sas_anti_congruence on E, A, G, E, B, G we get anti_congruent_triangles(A, E, G, B, E, G)
By line_inequality on Line(F, center(e)), Line(E, H), F we get Line(E, H) != Line(F, center(e))
By sss_anti_congruence_v1 on E, G, B, E, G, A we get anti_congruent_triangles(A, E, G, B, E, G)
By sss_anti_congruence_v1 on A, G, E, B, G, E we get anti_congruent_triangles(A, E, G, B, E, G)
By sss_anti_congruence_v1 on G, D, E, G, C, E we get anti_congruent_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v1 on C, G, E, D, G, E we get anti_congruent_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v0 on G, A, E, G, B, E we get anti_congruent_triangles(A, E, G, B, E, G)
By sss_anti_congruence_v0 on E, G, A, E, G, B we get anti_congruent_triangles(A, E, G, B, E, G)
By sss_anti_congruence_v1 on D, E, G, C, E, G we get anti_congruent_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v0 on E, G, C, E, G, D we get anti_congruent_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v0 on E, G, C, E, G, D we get anti_congruent_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v0 on G, C, E, G, D, E we get anti_congruent_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v0 on C, E, G, D, E, G we get anti_congruent_triangles(C, E, G, D, E, G)
By sas_anti_similarity on G, B, E, G, A, E we get anti_similar_triangles(A, E, G, B, E, G)
By line_inequality on Line(G, center(e)), Line(C, F), G we get Line(C, F) != Line(G, center(e))
By sss_anti_congruence_v1 on E, C, G, E, D, G we get anti_congruent_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v0 on E, G, C, E, G, D we get anti_congruent_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v0 on A, E, G, B, E, G we get anti_congruent_triangles(A, E, G, B, E, G)
By sss_anti_congruence_v0 on A, E, G, B, E, G we get anti_congruent_triangles(A, E, G, B, E, G)
By sss_anti_congruence_v0 on G, E, B, G, E, A we get anti_congruent_triangles(A, E, G, B, E, G)
By sss_anti_congruence_v1 on E, C, G, E, D, G we get anti_congruent_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v0 on E, D, G, E, C, G we get anti_congruent_triangles(C, E, G, D, E, G)
By line_inequality on Line(D, center(d)), Line(G, H), D we get Line(G, H) != Line(D, center(d))
By line_inequality on Line(F, center(d)), Line(D, H), F we get Line(D, H) != Line(F, center(d))
By line_inequality on Line(D, center(d)), f, D we get f != Line(D, center(d))
By sss_anti_congruence_v0 on E, B, G, E, A, G we get anti_congruent_triangles(A, E, G, B, E, G)
By sas_anti_congruence on E, B, G, E, A, G we get anti_congruent_triangles(A, E, G, B, E, G)
By sss_anti_congruence_v0 on E, D, G, E, C, G we get anti_congruent_triangles(C, E, G, D, E, G)
By sas_anti_similarity on E, C, G, E, D, G we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v1 on G, E, C, G, E, D we get anti_congruent_triangles(C, E, G, D, E, G)
By sas_anti_similarity on G, C, E, G, D, E we get anti_similar_triangles(C, E, G, D, E, G)
By line_inequality on Line(G, center(e)), Line(B, D), G we get Line(B, D) != Line(G, center(e))
By sss_anti_congruence_v0 on G, E, D, G, E, C we get anti_congruent_triangles(C, E, G, D, E, G)
By line_inequality on Line(E, center(e)), Line(C, H), E we get Line(C, H) != Line(E, center(e))
By sss_anti_congruence_v0 on G, E, D, G, E, C we get anti_congruent_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v0 on E, G, A, E, G, B we get anti_congruent_triangles(A, E, G, B, E, G)
By sss_anti_congruence_v1 on A, G, E, B, G, E we get anti_congruent_triangles(A, E, G, B, E, G)
By sss_anti_congruence_v1 on B, E, G, A, E, G we get anti_congruent_triangles(A, E, G, B, E, G)
By sss_anti_congruence_v0 on G, E, B, G, E, A we get anti_congruent_triangles(A, E, G, B, E, G)
By sss_anti_congruence_v1 on G, D, E, G, C, E we get anti_congruent_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v1 on C, G, E, D, G, E we get anti_congruent_triangles(C, E, G, D, E, G)
By line_inequality on Line(F, center(d)), Line(B, D), F we get Line(B, D) != Line(F, center(d))
By sas_anti_congruence on G, C, E, G, D, E we get anti_congruent_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v1 on G, E, A, G, E, B we get anti_congruent_triangles(A, E, G, B, E, G)
By sas_anti_congruence on E, C, G, E, D, G we get anti_congruent_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v0 on E, G, A, E, G, B we get anti_congruent_triangles(A, E, G, B, E, G)
By sss_anti_congruence_v0 on G, E, B, G, E, A we get anti_congruent_triangles(A, E, G, B, E, G)
By sss_anti_congruence_v1 on G, E, C, G, E, D we get anti_congruent_triangles(C, E, G, D, E, G)
By line_inequality on Line(D, center(d)), Line(B, E), D we get Line(B, E) != Line(D, center(d))
By sss_anti_congruence_v0 on G, C, E, G, D, E we get anti_congruent_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v0 on E, B, G, E, A, G we get anti_congruent_triangles(A, E, G, B, E, G)
By sss_anti_congruence_v1 on G, D, E, G, C, E we get anti_congruent_triangles(C, E, G, D, E, G)
By line_inequality on Line(D, center(d)), Line(E, G), D we get Line(E, G) != Line(D, center(d))
By line_inequality on Line(D, center(d)), Line(C, F), D we get Line(C, F) != Line(D, center(d))
By line_inequality on Line(C, center(d)), Line(B, E), C we get Line(B, E) != Line(C, center(d))
By line_inequality on Line(E, center(e)), Line(A, C), E we get Line(A, C) != Line(E, center(e))
By line_inequality on Line(H, center(d)), h, H we get h != Line(H, center(d))
By line_inequality on Line(G, center(e)), h, G we get h != Line(G, center(e))
By line_inequality on Line(D, center(d)), Line(C, E), D we get Line(C, E) != Line(D, center(d))
By line_inequality on Line(H, center(e)), Line(E, G), H we get Line(E, G) != Line(H, center(e))
By line_inequality on Line(H, center(e)), h, H we get h != Line(H, center(e))
By line_inequality on Line(E, center(e)), h, E we get h != Line(E, center(e))
By line_inequality on Line(F, center(d)), Line(A, C), F we get Line(A, C) != Line(F, center(d))
By line_inequality on Line(F, center(e)), Line(G, H), F we get Line(G, H) != Line(F, center(e))
By line_inequality on Line(G, center(e)), Line(D, E), G we get Line(D, E) != Line(G, center(e))
By line_inequality on Line(C, center(d)), Line(B, D), C we get Line(B, D) != Line(C, center(d))
By line_inequality on Line(C, center(d)), Line(E, H), C we get Line(E, H) != Line(C, center(d))
By line_inequality on Line(H, center(d)), Line(C, E), H we get Line(C, E) != Line(H, center(d))
By line_inequality on Line(F, center(e)), Line(E, G), F we get Line(E, G) != Line(F, center(e))
By line_inequality on Line(F, center(e)), Line(C, H), F we get Line(C, H) != Line(F, center(e))
By line_inequality on Line(F, center(d)), Line(E, H), F we get Line(E, H) != Line(F, center(d))
By line_inequality on Line(H, center(d)), Line(B, D), H we get Line(B, D) != Line(H, center(d))
By line_inequality on Line(H, center(d)), i, H we get i != Line(H, center(d))
By line_inequality on Line(H, center(d)), f, H we get f != Line(H, center(d))
By line_inequality on Line(H, center(e)), Line(D, E), H we get Line(D, E) != Line(H, center(e))
By line_inequality on Line(G, center(e)), Line(B, E), G we get Line(B, E) != Line(G, center(e))
By line_inequality on Line(F, center(d)), Line(E, G), F we get Line(E, G) != Line(F, center(d))
By line_inequality on Line(H, center(e)), Line(B, D), H we get Line(B, D) != Line(H, center(e))
By line_inequality on Line(H, center(d)), Line(A, E), H we get Line(A, E) != Line(H, center(d))
By line_inequality on Line(F, center(e)), Line(A, C), F we get Line(A, C) != Line(F, center(e))
By line_inequality on Line(D, center(d)), Line(A, C), D we get Line(A, C) != Line(D, center(d))
By line_inequality on Line(E, center(e)), g, E we get g != Line(E, center(e))
By line_inequality on Line(F, center(e)), h, F we get h != Line(F, center(e))
By line_inequality on Line(E, center(e)), f, E we get f != Line(E, center(e))
By line_inequality on Line(H, center(d)), Line(B, E), H we get Line(B, E) != Line(H, center(d))
By line_inequality on Line(G, center(e)), Line(A, E), G we get Line(A, E) != Line(G, center(e))
By line_inequality on Line(F, center(e)), f, F we get f != Line(F, center(e))
By line_inequality on Line(C, center(d)), Line(E, F), C we get Line(E, F) != Line(C, center(d))
By line_inequality on Line(E, center(e)), Line(B, D), E we get Line(B, D) != Line(E, center(e))
By line_inequality on Line(G, center(e)), Line(D, H), G we get Line(D, H) != Line(G, center(e))
By line_inequality on Line(F, center(e)), Line(B, D), F we get Line(B, D) != Line(F, center(e))
By line_inequality on Line(H, center(e)), Line(B, E), H we get Line(B, E) != Line(H, center(e))
By line_inequality on Line(H, center(e)), f, H we get f != Line(H, center(e))
By line_inequality on Line(H, center(e)), i, H we get i != Line(H, center(e))
By line_inequality on Line(F, center(d)), f, F we get f != Line(F, center(d))
By line_inequality on Line(C, center(d)), i, C we get i != Line(C, center(d))
By line_inequality on Line(C, center(d)), Line(D, H), C we get Line(D, H) != Line(C, center(d))
By line_inequality on Line(F, center(d)), Line(C, E), F we get Line(C, E) != Line(F, center(d))
By line_inequality on Line(F, center(e)), Line(D, E), F we get Line(D, E) != Line(F, center(e))
By line_inequality on Line(E, center(e)), i, E we get i != Line(E, center(e))
By line_inequality on Line(H, center(d)), Line(C, F), H we get Line(C, F) != Line(H, center(d))
By line_inequality on Line(H, center(d)), Line(D, E), H we get Line(D, E) != Line(H, center(d))
By line_inequality on Line(F, center(d)), Line(C, H), F we get Line(C, H) != Line(F, center(d))
By line_inequality on Line(E, center(e)), Line(C, F), E we get Line(C, F) != Line(E, center(e))
By line_inequality on Line(G, center(e)), Line(C, E), G we get Line(C, E) != Line(G, center(e))
By line_inequality on Line(C, center(d)), Line(F, H), C we get Line(F, H) != Line(C, center(d))
By line_inequality on Line(H, center(e)), Line(C, F), H we get Line(C, F) != Line(H, center(e))
By line_inequality on Line(F, center(d)), Line(G, H), F we get Line(G, H) != Line(F, center(d))
By line_inequality on Line(H, center(d)), Line(E, G), H we get Line(E, G) != Line(H, center(d))
By line_inequality on Line(D, center(d)), Line(C, H), D we get Line(C, H) != Line(D, center(d))
By line_inequality on Line(G, center(e)), Line(F, H), G we get Line(F, H) != Line(G, center(e))
By line_inequality on Line(G, center(e)), Line(A, C), G we get Line(A, C) != Line(G, center(e))
By line_inequality on Line(E, center(e)), Line(F, H), E we get Line(F, H) != Line(E, center(e))
By line_inequality on Line(H, center(e)), Line(A, C), H we get Line(A, C) != Line(H, center(e))
By line_inequality on Line(H, center(e)), Line(C, E), H we get Line(C, E) != Line(H, center(e))
By line_inequality on Line(D, center(d)), Line(A, E), D we get Line(A, E) != Line(D, center(d))
By line_inequality on Line(F, center(d)), h, F we get h != Line(F, center(d))
By line_inequality on Line(D, center(d)), Line(F, H), D we get Line(F, H) != Line(D, center(d))
By line_inequality on Line(H, center(e)), Line(A, E), H we get Line(A, E) != Line(H, center(e))
By line_inequality on Line(G, center(e)), f, G we get f != Line(G, center(e))
By line_inequality on Line(F, center(e)), Line(D, H), F we get Line(D, H) != Line(F, center(e))
By line_inequality on Line(F, center(d)), Line(B, E), F we get Line(B, E) != Line(F, center(d))
By line_inequality on Line(D, center(d)), Line(E, H), D we get Line(E, H) != Line(D, center(d))
By line_inequality on Line(F, center(d)), Line(D, E), F we get Line(D, E) != Line(F, center(d))
By external_angle_bisector_definition_v0_r on G, D, A, F we get Line(D, F) == external_angle_bisector(A, F, G)
By internal_angle_bisector_definition_v0_r on F, G, A, D we get Line(D, G) == internal_angle_bisector(A, D, F)
By external_angle_bisector_definition_v0_r on D, A, F, G we get Line(A, G) == external_angle_bisector(D, G, F)
By external_angle_bisector_definition_v0_r on D, F, A, G we get Line(F, G) == external_angle_bisector(A, G, D)
By concyclic_definition_0 on C, E, G, A we get A in Circle(C, E, G)
By external_angle_bisector_definition_v0_r on E, D, E, F we get Line(D, F) == external_angle_bisector(E, F, E)
By concyclic_definition_0 on G, E, D, B we get B in Circle(D, E, G)
By external_angle_bisector_definition_v0_r on G, E, D, F we get Line(E, F) == external_angle_bisector(D, F, G)
By external_angle_bisector_definition_v0_r on D, G, A, F we get Line(F, G) == external_angle_bisector(A, F, D)
By concyclic_definition_0 on G, A, C, E we get E in Circle(A, C, G)
By external_angle_bisector_definition_v0_r on G, E, G, F we get Line(E, F) == external_angle_bisector(G, F, G)
By concyclic_definition_0 on C, A, E, G we get G in Circle(A, C, E)
By concyclic_definition_0 on B, E, G, D we get D in Circle(B, E, G)
By concyclic_definition_0 on D, B, G, E we get E in Circle(B, D, G)
By internal_angle_bisector_definition_v0_r on A, D, F, G we get Line(D, G) == internal_angle_bisector(A, G, F)
By internal_angle_bisector_definition_v0_r on D, A, G, F we get Line(A, F) == internal_angle_bisector(D, F, G)
By concyclic_definition_0 on D, B, E, G we get G in Circle(B, D, E)
By concyclic_definition_0 on A, G, E, C we get C in Circle(A, E, G)
By external_angle_bisector_definition_v0_r on D, E, D, F we get Line(E, F) == external_angle_bisector(D, F, D)
By external_angle_bisector_definition_v0_r on E, G, E, F we get Line(F, G) == external_angle_bisector(E, F, E)
By reverse_direction on center(d), F we get 180 == direction(center(d), F) - direction(F, center(d)) mod 360
By internal_angle_bisector_definition_v0_r on F, D, F, G we get Line(D, G) == internal_angle_bisector(F, G, F)
By reverse_direction on center(d), H we get 180 == direction(center(d), H) - direction(H, center(d)) mod 360
By external_angle_bisector_definition_v0_r on E, G, E, H we get Line(G, H) == external_angle_bisector(E, H, E)
By external_angle_bisector_definition_v0_r on G, E, G, H we get Line(E, H) == external_angle_bisector(G, H, G)
By reverse_direction on center(d), C we get 180 == direction(center(d), C) - direction(C, center(d)) mod 360
By internal_angle_bisector_definition_v0_r on D, F, G, A we get Line(A, F) == internal_angle_bisector(D, A, G)
By external_angle_bisector_definition_v0_r on A, E, A, F we get Line(E, F) == external_angle_bisector(A, F, A)
By internal_angle_bisector_definition_v0_r on G, A, G, F we get Line(A, F) == internal_angle_bisector(G, F, G)
By internal_angle_bisector_definition_v0_r on E, G, E, center(e) we get Line(G, center(e)) == internal_angle_bisector(E, center(e), E)
By reverse_direction on center(e), F we get 180 == direction(center(e), F) - direction(F, center(e)) mod 360
By internal_angle_bisector_definition_v0_r on A, E, G, F we get Line(E, F) == internal_angle_bisector(A, F, G)
By reverse_direction on center(e), H we get 180 == direction(center(e), H) - direction(H, center(e)) mod 360
By reverse_direction on center(e), E we get 180 == direction(center(e), E) - direction(E, center(e)) mod 360
By reverse_direction on center(e), G we get 180 == direction(center(e), G) - direction(G, center(e)) mod 360
By external_angle_bisector_definition_v0_r on E, A, E, F we get Line(A, F) == external_angle_bisector(E, F, E)
By internal_angle_bisector_definition_v0_r on G, D, G, F we get Line(D, F) == internal_angle_bisector(G, F, G)
By internal_angle_bisector_definition_v0_r on G, E, G, center(e) we get Line(E, center(e)) == internal_angle_bisector(G, center(e), G)
By internal_angle_bisector_definition_v0_r on F, G, D, A we get Line(A, G) == internal_angle_bisector(D, A, F)
By internal_angle_bisector_definition_v0_r on F, A, F, G we get Line(A, G) == internal_angle_bisector(F, G, F)
By reverse_direction on center(d), D we get 180 == direction(center(d), D) - direction(D, center(d)) mod 360
By internal_angle_bisector_definition_v0_r on A, F, G, D we get Line(D, F) == internal_angle_bisector(A, D, G)
By concyclic_definition_1 on B, G, E, D we get Circle(B, E, G) == Circle(D, E, G)
By isosceles_triangle_properties on center(e), F, H we get distance(F, center(e)) == distance(H, center(e)), angle(F, H, center(e)) == angle(center(e), F, H) mod 360
By concyclic_definition_1 on A, G, E, C we get Circle(A, E, G) == Circle(C, E, G)
By concyclic_definition_1 on C, G, A, E we get Circle(A, C, G) == Circle(A, E, G)
By concyclic_definition_1 on B, D, G, E we get Circle(B, D, G) == Circle(D, E, G)
By isosceles_triangle_properties on center(e), G, F we get distance(F, center(e)) == distance(G, center(e)), angle(G, F, center(e)) == angle(center(e), G, F) mod 360
By isosceles_triangle_properties on center(d), D, F we get distance(D, center(d)) == distance(F, center(d)), angle(D, F, center(d)) == angle(center(d), D, F) mod 360
By isosceles_triangle_properties on center(d), F, D we get distance(D, center(d)) == distance(F, center(d)), angle(F, D, center(d)) == angle(center(d), F, D) mod 360
By isosceles_triangle_properties on center(e), G, H we get distance(G, center(e)) == distance(H, center(e)), angle(G, H, center(e)) == angle(center(e), G, H) mod 360
By concyclic_definition_1 on E, C, A, G we get Circle(A, C, E) == Circle(A, C, G)
By concyclic_definition_1 on C, E, A, G we get Circle(A, C, E) == Circle(A, E, G)
By isosceles_triangle_properties on center(e), F, G we get distance(F, center(e)) == distance(G, center(e)), angle(F, G, center(e)) == angle(center(e), F, G) mod 360
By concyclic_definition_1 on D, B, G, E we get Circle(B, D, G) == Circle(B, E, G)
By isosceles_triangle_properties on center(d), C, F we get distance(C, center(d)) == distance(F, center(d)), angle(C, F, center(d)) == angle(center(d), C, F) mod 360
By isosceles_triangle_properties on center(e), E, G we get distance(E, center(e)) == distance(G, center(e)), angle(E, G, center(e)) == angle(center(e), E, G) mod 360
By isosceles_triangle_properties on center(d), D, C we get distance(C, center(d)) == distance(D, center(d)), angle(D, C, center(d)) == angle(center(d), D, C) mod 360
By concyclic_definition_1 on G, E, C, A we get Circle(A, C, E) == Circle(C, E, G)
By concyclic_definition_1 on E, B, D, G we get Circle(B, D, E) == Circle(B, D, G)
By isosceles_triangle_properties on center(d), F, C we get distance(C, center(d)) == distance(F, center(d)), angle(F, C, center(d)) == angle(center(d), F, C) mod 360
By concyclic_definition_1 on A, G, C, E we get Circle(A, C, G) == Circle(C, E, G)
By isosceles_triangle_properties on center(e), E, H we get distance(E, center(e)) == distance(H, center(e)), angle(E, H, center(e)) == angle(center(e), E, H) mod 360
By concyclic_definition_1 on G, E, D, B we get Circle(B, D, E) == Circle(D, E, G)
By isosceles_triangle_properties on center(e), F, E we get distance(E, center(e)) == distance(F, center(e)), angle(F, E, center(e)) == angle(center(e), F, E) mod 360
By isosceles_triangle_properties on center(d), C, D we get distance(C, center(d)) == distance(D, center(d)), angle(C, D, center(d)) == angle(center(d), C, D) mod 360
By isosceles_triangle_properties on center(d), H, C we get distance(C, center(d)) == distance(H, center(d)), angle(H, C, center(d)) == angle(center(d), H, C) mod 360
By isosceles_triangle_properties on center(e), H, E we get distance(E, center(e)) == distance(H, center(e)), angle(H, E, center(e)) == angle(center(e), H, E) mod 360
By isosceles_triangle_properties on center(d), F, H we get distance(F, center(d)) == distance(H, center(d)), angle(F, H, center(d)) == angle(center(d), F, H) mod 360
By concyclic_definition_1 on G, B, E, D we get Circle(B, D, E) == Circle(B, E, G)
By isosceles_triangle_properties on center(e), G, E we get distance(E, center(e)) == distance(G, center(e)), angle(G, E, center(e)) == angle(center(e), G, E) mod 360
By isosceles_triangle_properties on center(d), H, F we get distance(F, center(d)) == distance(H, center(d)), angle(H, F, center(d)) == angle(center(d), H, F) mod 360
By isosceles_triangle_properties on center(e), H, G we get distance(G, center(e)) == distance(H, center(e)), angle(H, G, center(e)) == angle(center(e), H, G) mod 360
By isosceles_triangle_properties on center(d), H, D we get distance(D, center(d)) == distance(H, center(d)), angle(H, D, center(d)) == angle(center(d), H, D) mod 360
By isosceles_triangle_properties on center(e), E, F we get distance(E, center(e)) == distance(F, center(e)), angle(E, F, center(e)) == angle(center(e), E, F) mod 360
By isosceles_triangle_properties on center(d), D, H we get distance(D, center(d)) == distance(H, center(d)), angle(D, H, center(d)) == angle(center(d), D, H) mod 360
By isosceles_triangle_properties on center(e), H, F we get distance(F, center(e)) == distance(H, center(e)), angle(H, F, center(e)) == angle(center(e), H, F) mod 360
By isosceles_triangle_properties on center(d), C, H we get distance(C, center(d)) == distance(H, center(d)), angle(C, H, center(d)) == angle(center(d), C, H) mod 360
By power_of_a_point_definition on A, G, F, e we get log(power_of_a_point(A, e)) == log(distance(A, G)) + log(distance(A, F))
By perpendicular_bisector_sufficient_conditions on C, D, E, G we get Line(E, G) == perpendicular_bisector(C, D)
By perpendicular_bisector_sufficient_conditions on A, B, E, G we get Line(E, G) == perpendicular_bisector(A, B)
By line_intersection_definition on orthocenter(D, E, F), i, Line(E, F) we get orthocenter(D, E, F) == line_intersection(i, Line(E, F))
By line_intersection_definition on orthocenter(A, E, F), Line(E, F), i we get orthocenter(A, E, F) == line_intersection(i, Line(E, F))
By line_intersection_definition on orthocenter(E, F, G), Line(E, F), i we get orthocenter(E, F, G) == line_intersection(i, Line(E, F))
By angles_on_chord_v0 on C, G, A, E, Circle(A, C, E) we get angle(C, A, G) == angle(C, E, G) mod 360
By angles_on_chord_v2 on D, E, G, B, Circle(B, D, E) we get angle(D, G, E) == angle(D, B, E) + 180 mod 360
By angles_on_chord_v3 on G, A, E, C, Circle(A, C, E) we get angle(G, E, A) == angle(G, C, A) + 180 mod 360
By angles_on_chord_v2 on G, B, E, D, Circle(B, D, E) we get angle(G, E, B) == angle(G, D, B) + 180 mod 360
By angles_on_chord_v3 on E, D, G, B, Circle(B, D, E) we get angle(E, G, D) == angle(E, B, D) + 180 mod 360
By angles_on_chord_v1 on D, G, E, B, Circle(B, D, E) we get angle(D, B, G) == angle(D, E, G) mod 360
By angles_on_chord_v3 on B, G, E, D, Circle(B, D, E) we get angle(B, E, G) == angle(B, D, G) + 180 mod 360
By angles_on_chord_v0 on B, E, D, G, Circle(B, D, E) we get angle(B, D, E) == angle(B, G, E) mod 360
By angles_on_chord_v2 on A, G, E, C, Circle(A, C, E) we get angle(A, E, G) == angle(A, C, G) + 180 mod 360
By angles_on_chord_v1 on G, C, A, E, Circle(A, C, E) we get angle(G, A, C) == angle(G, E, C) mod 360
By angles_on_chord_v2 on B, G, D, E, Circle(B, D, E) we get angle(B, D, G) == angle(B, E, G) + 180 mod 360
By angles_on_chord_v3 on E, C, A, G, Circle(A, C, E) we get angle(E, A, C) == angle(E, G, C) + 180 mod 360
By angles_on_chord_v3 on D, E, B, G, Circle(B, D, E) we get angle(D, B, E) == angle(D, G, E) + 180 mod 360
By angles_on_chord_v2 on G, A, C, E, Circle(A, C, E) we get angle(G, C, A) == angle(G, E, A) + 180 mod 360
By angles_on_chord_v3 on G, B, D, E, Circle(B, D, E) we get angle(G, D, B) == angle(G, E, B) + 180 mod 360
By angles_on_chord_v1 on A, E, C, G, Circle(A, C, E) we get angle(A, C, E) == angle(A, G, E) mod 360
By angles_on_chord_v0 on E, A, C, G, Circle(A, C, E) we get angle(E, C, A) == angle(E, G, A) mod 360
By angles_on_chord_v2 on C, E, A, G, Circle(A, C, E) we get angle(C, A, E) == angle(C, G, E) + 180 mod 360
By angles_on_chord_v2 on E, C, G, A, Circle(A, C, E) we get angle(E, G, C) == angle(E, A, C) + 180 mod 360
By angles_on_chord_v0 on G, D, E, B, Circle(B, D, E) we get angle(G, B, D) == angle(G, E, D) mod 360
By angles_on_chord_v3 on A, G, C, E, Circle(A, C, E) we get angle(A, C, G) == angle(A, E, G) + 180 mod 360
By angles_on_chord_v1 on E, B, G, D, Circle(B, D, E) we get angle(E, D, B) == angle(E, G, B) mod 360
By angles_on_chord_v2 on E, D, B, G, Circle(B, D, E) we get angle(E, B, D) == angle(E, G, D) + 180 mod 360
By angles_on_chord_v3 on C, E, G, A, Circle(A, C, E) we get angle(C, G, E) == angle(C, A, E) + 180 mod 360
By perpendicular_line_definition on orthocenter(E, F, G), altitude(F, E, G), Line(E, G) we get altitude(F, E, G) == perpendicular_line(orthocenter(E, F, G), Line(E, G))
By perpendicular_line_definition on D, Line(D, E), altitude(F, D, E) we get Line(D, E) == perpendicular_line(D, altitude(F, D, E))
By perpendicular_line_definition on midpoint(C, D), Line(E, G), f we get Line(E, G) == perpendicular_line(midpoint(C, D), f)
By perpendicular_line_definition on H, Line(E, H), Line(G, H) we get Line(E, H) == perpendicular_line(H, Line(G, H))
By perpendicular_line_definition on G, Line(E, G), f we get Line(E, G) == perpendicular_line(G, f)
By perpendicular_line_definition on A, f, Line(E, G) we get f == perpendicular_line(A, Line(E, G))
By perpendicular_line_definition on midpoint(C, D), Line(E, G), altitude(F, E, G) we get Line(E, G) == perpendicular_line(midpoint(C, D), altitude(F, E, G))
By median_definition on G, C, D, Line(E, G) we get Line(E, G) == median(G, C, D)
By perpendicular_line_definition on A, Line(A, E), altitude(F, A, E) we get Line(A, E) == perpendicular_line(A, altitude(F, A, E))
By perpendicular_line_definition on orthocenter(A, E, F), altitude(F, A, E), Line(A, E) we get altitude(F, A, E) == perpendicular_line(orthocenter(A, E, F), Line(A, E))
By perpendicular_line_definition on G, Line(E, G), h we get Line(E, G) == perpendicular_line(G, h)
By line_unique_intersection_v0 on Line(E, F), i, orthocenter(D, E, F), orthocenter(A, E, F) we get orthocenter(A, E, F) == orthocenter(D, E, F)
By perpendicular_line_definition on midpoint(A, B), Line(E, G), altitude(F, E, G) we get Line(E, G) == perpendicular_line(midpoint(A, B), altitude(F, E, G))
By perpendicular_line_definition on orthocenter(D, E, F), altitude(F, D, E), Line(D, E) we get altitude(F, D, E) == perpendicular_line(orthocenter(D, E, F), Line(D, E))
By perpendicular_line_definition on orthocenter(A, E, F), Line(E, F), i we get Line(E, F) == perpendicular_line(orthocenter(A, E, F), i)
By perpendicular_line_definition on G, Line(E, G), altitude(F, E, G) we get Line(E, G) == perpendicular_line(G, altitude(F, E, G))
By median_definition on E, B, A, Line(E, G) we get Line(E, G) == median(E, A, B)
By perpendicular_line_definition on orthocenter(D, E, F), Line(E, F), i we get Line(E, F) == perpendicular_line(orthocenter(D, E, F), i)
By perpendicular_line_definition on E, Line(E, G), f we get Line(E, G) == perpendicular_line(E, f)
By perpendicular_line_definition on orthocenter(A, E, F), i, Line(E, F) we get i == perpendicular_line(orthocenter(A, E, F), Line(E, F))
By perpendicular_line_definition on orthocenter(E, F, G), Line(E, F), i we get Line(E, F) == perpendicular_line(orthocenter(E, F, G), i)
By median_definition on E, D, C, Line(E, G) we get Line(E, G) == median(E, C, D)
By median_definition on G, B, A, Line(E, G) we get Line(E, G) == median(G, A, B)
By perpendicular_line_definition on G, Line(G, H), Line(E, H) we get Line(G, H) == perpendicular_line(G, Line(E, H))
By perpendicular_line_definition on E, Line(E, G), altitude(F, E, G) we get Line(E, G) == perpendicular_line(E, altitude(F, E, G))
By perpendicular_line_definition on E, Line(E, H), Line(G, H) we get Line(E, H) == perpendicular_line(E, Line(G, H))
By perpendicular_line_definition on E, Line(E, G), h we get Line(E, G) == perpendicular_line(E, h)
By perpendicular_line_definition on orthocenter(D, E, F), i, Line(E, F) we get i == perpendicular_line(orthocenter(D, E, F), Line(E, F))
By perpendicular_line_definition on orthocenter(E, F, G), i, Line(E, F) we get i == perpendicular_line(orthocenter(E, F, G), Line(E, F))
By perpendicular_line_definition on E, Line(A, E), altitude(F, A, E) we get Line(A, E) == perpendicular_line(E, altitude(F, A, E))
By perpendicular_line_definition on D, h, Line(E, G) we get h == perpendicular_line(D, Line(E, G))
By perpendicular_line_definition on midpoint(A, B), Line(E, G), h we get Line(E, G) == perpendicular_line(midpoint(A, B), h)
By perpendicular_line_definition on C, h, Line(E, G) we get h == perpendicular_line(C, Line(E, G))
By perpendicular_line_definition on E, Line(D, E), altitude(F, D, E) we get Line(D, E) == perpendicular_line(E, altitude(F, D, E))
By perpendicular_line_definition on H, Line(G, H), Line(E, H) we get Line(G, H) == perpendicular_line(H, Line(E, H))
By perpendicular_line_definition on B, f, Line(E, G) we get f == perpendicular_line(B, Line(E, G))
By line_unique_intersection_v0 on i, Line(E, F), orthocenter(D, E, F), orthocenter(E, F, G) we get orthocenter(D, E, F) == orthocenter(E, F, G)
By line_unique_intersection_v0 on Line(E, F), i, F, orthocenter(A, E, F) we get F == orthocenter(A, E, F)
By line_unique_intersection_v0 on Line(E, F), i, orthocenter(A, E, F), orthocenter(E, F, G) we get orthocenter(A, E, F) == orthocenter(E, F, G)
By line_unique_intersection_v0 on Line(E, F), i, F, orthocenter(E, F, G) we get F == orthocenter(E, F, G)
By line_unique_intersection_v0 on Line(E, F), i, F, orthocenter(D, E, F) we get F == orthocenter(D, E, F)
By between_imply_not_between on C, midpoint(C, D), D we get collinear_and_not_between(D, C, midpoint(C, D))
By perpendicular_direction_conditions_v0 on C, H, H, E we get perpendicular(Line(C, H), Line(E, H))
By perpendicular_direction_conditions_v0 on B, A, E, center(e) we get perpendicular(Line(A, B), Line(E, center(e)))
By perpendicular_direction_conditions_v0 on E, center(e), C, D we get perpendicular(Line(C, D), Line(E, center(e)))
By perpendicular_direction_conditions_v0 on G, center(e), A, B we get perpendicular(Line(A, B), Line(G, center(e)))
By perpendicular_direction_conditions_v0 on C, D, center(e), G we get perpendicular(Line(C, D), Line(G, center(e)))
By between_imply_not_between on A, midpoint(A, B), B we get collinear_and_not_between(B, A, midpoint(A, B))
By between_imply_not_between on D, midpoint(C, D), C we get collinear_and_not_between(C, D, midpoint(C, D))
By between_imply_not_between on B, midpoint(A, B), A we get collinear_and_not_between(A, B, midpoint(A, B))
By divide_by_2_mod_180_v1 on A, G, E, D, B, E we get angle(A, G, E) == angle(D, B, E) mod 360
By divide_by_2_mod_180_v1 on E, G, B, D, B, E we get angle(D, B, E) == angle(E, G, B) mod 360
By double_perpendicular_and_parallel_v0 on h, Line(E, G), altitude(F, E, G) we get parallel(h, altitude(F, E, G))
By divide_by_2_mod_180_v1 on F, G, E, A, C, E we get angle(A, C, E) == angle(F, G, E) mod 360
By in_imply_collinear on orthocenter(D, E, F), D, F we get collinear(D, F, orthocenter(D, E, F))
By divide_by_2_mod_180_v1 on A, C, E, E, G, B we get angle(A, C, E) == angle(E, G, B) mod 360
By in_imply_collinear on orthocenter(A, E, F), G, A we get collinear(A, G, orthocenter(A, E, F))
By divide_by_2_mod_180_v2 on G, E, B, F, D, B we get angle(G, E, B) == angle(F, D, B) + 180 mod 360
By projection_definition on G, H, Line(E, H) we get H == projection(G, Line(E, H))
By projection_definition on E, H, Line(G, H) we get H == projection(E, Line(G, H))
By divide_by_2_mod_180_v2 on B, C, A, B, E, G we get angle(B, C, A) == angle(B, E, G) + 180 mod 360
By divide_by_2_mod_180_v0 on E, G, F, B, D, E we get angle(B, D, E) == angle(E, G, F) mod 360
By in_imply_collinear on orthocenter(A, E, F), F, G we get collinear(F, G, orthocenter(A, E, F))
By in_imply_collinear on orthocenter(D, E, F), F, E we get collinear(E, F, orthocenter(D, E, F))
By in_imply_collinear on orthocenter(A, E, F), D, G we get collinear(D, G, orthocenter(A, E, F))
By divide_by_2_mod_180_v1 on B, A, G, G, E, F we get angle(B, A, G) == angle(G, E, F) mod 360
By divide_by_2_mod_180_v0 on C, A, D, G, E, D we get angle(C, A, D) == angle(G, E, D) mod 360
By divide_by_2_mod_180_v1 on D, B, G, G, E, C we get angle(D, B, G) == angle(G, E, C) mod 360
By divide_by_2_mod_180_v2 on D, G, E, E, A, C we get angle(D, G, E) == angle(E, A, C) + 180 mod 360
By divide_by_2_mod_180_v3 on C, G, E, E, B, D we get angle(C, G, E) == angle(E, B, D) + 180 mod 360
By divide_by_2_mod_180_v0 on D, A, B, F, E, G we get angle(D, A, B) == angle(F, E, G) mod 360
By in_imply_collinear on orthocenter(A, E, F), D, F we get collinear(D, F, orthocenter(A, E, F))
By divide_by_2_mod_180_v0 on B, D, E, E, G, A we get angle(B, D, E) == angle(E, G, A) mod 360
By divide_by_2_mod_180_v0 on F, E, G, F, A, B we get angle(F, A, B) == angle(F, E, G) mod 360
By divide_by_2_mod_180_v0 on F, H, G, D, C, G we get angle(D, C, G) == angle(F, H, G) mod 360
By divide_by_2_mod_180_v0 on G, E, D, C, A, G we get angle(C, A, G) == angle(G, E, D) mod 360
By divide_by_2_mod_180_v3 on B, E, G, G, C, A we get angle(B, E, G) == angle(G, C, A) + 180 mod 360
By in_imply_collinear on orthocenter(E, F, G), A, F we get collinear(A, F, orthocenter(E, F, G))
By in_imply_collinear on orthocenter(E, F, G), E, F we get collinear(E, F, orthocenter(E, F, G))
By divide_by_2_mod_180_v0 on E, B, D, E, G, F we get angle(E, B, D) == angle(E, G, F) mod 360
By divide_by_2_mod_180_v1 on B, A, F, G, H, F we get angle(B, A, F) == angle(G, H, F) mod 360
By divide_by_2_mod_180_v3 on B, E, G, B, C, A we get angle(B, E, G) == angle(B, C, A) + 180 mod 360
By divide_by_2_mod_180_v0 on F, H, G, G, D, C we get angle(F, H, G) == angle(G, D, C) mod 360
By divide_by_2_mod_180_v3 on G, D, B, A, E, G we get angle(G, D, B) == angle(A, E, G) + 180 mod 360
By in_imply_collinear on orthocenter(D, E, F), A, G we get collinear(A, G, orthocenter(D, E, F))
By in_imply_collinear on orthocenter(E, F, G), D, A we get collinear(A, D, orthocenter(E, F, G))
By divide_by_2_mod_180_v0 on F, E, G, D, C, G we get angle(D, C, G) == angle(F, E, G) mod 360
By divide_by_2_mod_180_v2 on A, E, G, A, D, B we get angle(A, E, G) == angle(A, D, B) + 180 mod 360
By divide_by_2_mod_180_v0 on F, H, G, D, C, B we get angle(D, C, B) == angle(F, H, G) mod 360
By divide_by_2_mod_180_v1 on G, E, F, C, H, F we get angle(C, H, F) == angle(G, E, F) mod 360
By in_imply_collinear on orthocenter(D, E, F), A, F we get collinear(A, F, orthocenter(D, E, F))
By in_imply_collinear on orthocenter(A, E, F), F, E we get collinear(E, F, orthocenter(A, E, F))
By in_imply_collinear on orthocenter(D, E, F), G, D we get collinear(D, G, orthocenter(D, E, F))
By divide_by_2_mod_180_v1 on G, E, F, C, B, A we get angle(C, B, A) == angle(G, E, F) mod 360
By divide_by_2_mod_180_v1 on C, D, G, G, E, F we get angle(C, D, G) == angle(G, E, F) mod 360
By divide_by_2_mod_180_v1 on G, C, D, G, H, F we get angle(G, C, D) == angle(G, H, F) mod 360
By divide_by_2_mod_180_v1 on D, B, C, G, E, C we get angle(D, B, C) == angle(G, E, C) mod 360
By divide_by_2_mod_180_v2 on A, E, G, F, D, B we get angle(A, E, G) == angle(F, D, B) + 180 mod 360
By in_imply_collinear on orthocenter(A, E, F), A, D we get collinear(A, D, orthocenter(A, E, F))
By divide_by_2_mod_180_v0 on G, D, C, F, E, G we get angle(F, E, G) == angle(G, D, C) mod 360
By divide_by_2_mod_180_v3 on A, C, B, A, E, G we get angle(A, C, B) == angle(A, E, G) + 180 mod 360
By in_imply_collinear on orthocenter(D, E, F), F, G we get collinear(F, G, orthocenter(D, E, F))
By in_imply_collinear on midpoint(A, B), G, E we get collinear(E, G, midpoint(A, B))
By in_imply_collinear on orthocenter(E, F, G), F, D we get collinear(D, F, orthocenter(E, F, G))
By in_imply_collinear on orthocenter(A, E, F), A, F we get collinear(A, F, orthocenter(A, E, F))
By divide_by_2_mod_180_v2 on B, D, F, G, E, A we get angle(B, D, F) == angle(G, E, A) + 180 mod 360
By divide_by_2_mod_180_v0 on F, H, C, F, E, G we get angle(F, E, G) == angle(F, H, C) mod 360
By divide_by_2_mod_180_v1 on E, A, C, F, G, E we get angle(E, A, C) == angle(F, G, E) mod 360
By divide_by_2_mod_180_v1 on E, A, C, E, G, B we get angle(E, A, C) == angle(E, G, B) mod 360
By divide_by_2_mod_180_v2 on B, C, A, G, E, A we get angle(B, C, A) == angle(G, E, A) + 180 mod 360
By divide_by_2_mod_180_v2 on A, E, G, A, C, B we get angle(A, E, G) == angle(A, C, B) + 180 mod 360
By in_imply_collinear on orthocenter(D, E, F), A, D we get collinear(A, D, orthocenter(D, E, F))
By divide_by_2_mod_180_v2 on E, B, D, C, G, E we get angle(E, B, D) == angle(C, G, E) + 180 mod 360
By divide_by_2_mod_180_v0 on F, E, G, A, B, C we get angle(A, B, C) == angle(F, E, G) mod 360
By divide_by_2_mod_180_v0 on C, A, E, E, G, F we get angle(C, A, E) == angle(E, G, F) mod 360
By divide_by_2_mod_180_v1 on D, B, C, D, E, G we get angle(D, B, C) == angle(D, E, G) mod 360
By divide_by_2_mod_180_v0 on E, B, D, B, G, E we get angle(B, G, E) == angle(E, B, D) mod 360
By divide_by_2_mod_180_v1 on A, G, E, E, D, B we get angle(A, G, E) == angle(E, D, B) mod 360
By divide_by_2_mod_180_v1 on F, G, E, D, B, E we get angle(D, B, E) == angle(F, G, E) mod 360
By divide_by_2_mod_180_v3 on A, C, B, G, E, B we get angle(A, C, B) == angle(G, E, B) + 180 mod 360
By in_imply_collinear on orthocenter(E, F, G), G, F we get collinear(F, G, orthocenter(E, F, G))
By in_imply_collinear on orthocenter(E, F, G), G, D we get collinear(D, G, orthocenter(E, F, G))
By divide_by_2_mod_180_v2 on B, D, F, B, E, G we get angle(B, D, F) == angle(B, E, G) + 180 mod 360
By in_imply_collinear on orthocenter(E, F, G), G, A we get collinear(A, G, orthocenter(E, F, G))
By divide_by_2_mod_180_v0 on F, D, C, F, E, G we get angle(F, D, C) == angle(F, E, G) mod 360
By divide_by_2_mod_180_v1 on G, H, F, B, A, D we get angle(B, A, D) == angle(G, H, F) mod 360
By divide_by_2_mod_180_v1 on D, A, C, G, E, C we get angle(D, A, C) == angle(G, E, C) mod 360
By divide_by_2_mod_180_v0 on B, G, E, C, A, E we get angle(B, G, E) == angle(C, A, E) mod 360
By divide_by_2_mod_180_v1 on C, D, A, G, E, F we get angle(C, D, A) == angle(G, E, F) mod 360
By divide_by_2_mod_180_v0 on C, E, G, C, B, D we get angle(C, B, D) == angle(C, E, G) mod 360
By line_inequality on altitude(F, A, E), Line(B, D), F we get Line(B, D) != altitude(F, A, E)
By divide_by_2_mod_180_v0 on E, C, A, E, G, F we get angle(E, C, A) == angle(E, G, F) mod 360
By line_inequality on altitude(F, E, G), h, F we get h != altitude(F, E, G)
By divide_by_2_mod_180_v1 on E, D, B, F, H, E we get angle(E, D, B) == angle(F, H, E) mod 360
By divide_by_2_mod_180_v3 on G, E, A, B, D, A we get angle(G, E, A) == angle(B, D, A) + 180 mod 360
By divide_by_2_mod_180_v1 on B, C, D, G, H, F we get angle(B, C, D) == angle(G, H, F) mod 360
By divide_by_2_mod_180_v1 on G, H, F, C, D, A we get angle(C, D, A) == angle(G, H, F) mod 360
By in_imply_collinear on midpoint(C, D), E, G we get collinear(E, G, midpoint(C, D))
By divide_by_2_mod_180_v3 on B, E, G, B, D, A we get angle(B, E, G) == angle(B, D, A) + 180 mod 360
By collinear_definition on G, E, center(e) we get E in Line(G, center(e)), center(e) in Line(E, G), Line(E, G) == Line(G, center(e)), 0 == 2 * angle(E, G, center(e)) mod 360
By divide_by_2_mod_180_v0 on E, C, A, B, G, E we get angle(B, G, E) == angle(E, C, A) mod 360
By point_on_perpendicular_bisector on A, D, orthocenter(E, F, G), Line(E, F) we get distance(A, orthocenter(E, F, G)) == distance(D, orthocenter(E, F, G))
By divide_by_2_mod_180_v0 on F, H, G, F, D, C we get angle(F, D, C) == angle(F, H, G) mod 360
By divide_by_2_mod_180_v1 on G, H, F, B, A, G we get angle(B, A, G) == angle(G, H, F) mod 360
By double_perpendicular_and_parallel_v0 on altitude(F, E, G), Line(E, G), f we get parallel(f, altitude(F, E, G))
By divide_by_2_mod_180_v0 on G, E, D, C, A, F we get angle(C, A, F) == angle(G, E, D) mod 360
By divide_by_2_mod_180_v1 on G, E, F, C, D, F we get angle(C, D, F) == angle(G, E, F) mod 360
By divide_by_2_mod_180_v1 on C, D, F, G, H, F we get angle(C, D, F) == angle(G, H, F) mod 360
By divide_by_2_mod_180_v0 on G, A, B, F, E, G we get angle(F, E, G) == angle(G, A, B) mod 360
By divide_by_2_mod_180_v2 on B, D, E, C, G, E we get angle(B, D, E) == angle(C, G, E) + 180 mod 360
By divide_by_2_mod_180_v1 on G, C, D, G, E, F we get angle(G, C, D) == angle(G, E, F) mod 360
By divide_by_2_mod_180_v0 on C, A, E, E, G, A we get angle(C, A, E) == angle(E, G, A) mod 360
By divide_by_2_mod_180_v0 on F, E, G, A, D, C we get angle(A, D, C) == angle(F, E, G) mod 360
By divide_by_2_mod_180_v0 on F, H, G, A, B, G we get angle(A, B, G) == angle(F, H, G) mod 360
By divide_by_2_mod_180_v0 on E, C, A, E, H, F we get angle(E, C, A) == angle(E, H, F) mod 360
By divide_by_2_mod_180_v2 on A, E, G, G, D, B we get angle(A, E, G) == angle(G, D, B) + 180 mod 360
By divide_by_2_mod_180_v2 on B, D, G, G, E, A we get angle(B, D, G) == angle(G, E, A) + 180 mod 360
By divide_by_2_mod_180_v1 on G, E, F, G, B, A we get angle(G, B, A) == angle(G, E, F) mod 360
By divide_by_2_mod_180_v0 on E, G, A, E, B, D we get angle(E, B, D) == angle(E, G, A) mod 360
By divide_by_2_mod_180_v1 on G, H, F, G, B, A we get angle(G, B, A) == angle(G, H, F) mod 360
By divide_by_2_mod_180_v2 on E, C, A, E, G, D we get angle(E, C, A) == angle(E, G, D) + 180 mod 360
By divide_by_2_mod_180_v3 on G, E, A, B, D, F we get angle(G, E, A) == angle(B, D, F) + 180 mod 360
By divide_by_2_mod_180_v1 on G, E, C, F, A, C we get angle(F, A, C) == angle(G, E, C) mod 360
By divide_by_2_mod_180_v0 on A, B, G, F, E, G we get angle(A, B, G) == angle(F, E, G) mod 360
By divide_by_2_mod_180_v1 on G, H, F, C, D, G we get angle(C, D, G) == angle(G, H, F) mod 360
By divide_by_2_mod_180_v0 on C, E, G, C, A, D we get angle(C, A, D) == angle(C, E, G) mod 360
By line_inequality on altitude(F, E, G), f, F we get f != altitude(F, E, G)
By divide_by_2_mod_180_v1 on G, E, F, B, C, D we get angle(B, C, D) == angle(G, E, F) mod 360
By divide_by_2_mod_180_v3 on F, D, B, A, E, G we get angle(F, D, B) == angle(A, E, G) + 180 mod 360
By divide_by_2_mod_180_v0 on F, H, G, G, A, B we get angle(F, H, G) == angle(G, A, B) mod 360
By divide_by_2_mod_180_v1 on F, H, E, D, B, E we get angle(D, B, E) == angle(F, H, E) mod 360
By divide_by_2_mod_180_v3 on G, E, A, B, C, A we get angle(G, E, A) == angle(B, C, A) + 180 mod 360
By divide_by_2_mod_180_v3 on C, G, E, B, D, E we get angle(C, G, E) == angle(B, D, E) + 180 mod 360
By divide_by_2_mod_180_v1 on G, E, F, B, A, D we get angle(B, A, D) == angle(G, E, F) mod 360
By divide_by_2_mod_180_v1 on F, H, E, E, A, C we get angle(E, A, C) == angle(F, H, E) mod 360
By divide_by_2_mod_180_v2 on B, D, A, B, E, G we get angle(B, D, A) == angle(B, E, G) + 180 mod 360
By divide_by_2_mod_180_v1 on D, E, G, G, A, C we get angle(D, E, G) == angle(G, A, C) mod 360
By divide_by_2_mod_180_v1 on E, D, B, F, G, E we get angle(E, D, B) == angle(F, G, E) mod 360
By divide_by_2_mod_180_v1 on B, A, F, G, E, F we get angle(B, A, F) == angle(G, E, F) mod 360
By divide_by_2_mod_180_v3 on B, E, G, B, D, F we get angle(B, E, G) == angle(B, D, F) + 180 mod 360
By divide_by_2_mod_180_v0 on F, H, G, F, H, C we get angle(F, H, C) == angle(F, H, G) mod 360
By divide_by_2_mod_180_v3 on E, D, B, D, G, E we get angle(E, D, B) == angle(D, G, E) + 180 mod 360
By divide_by_2_mod_180_v3 on A, D, B, G, E, B we get angle(A, D, B) == angle(G, E, B) + 180 mod 360
By divide_by_2_mod_180_v0 on F, H, G, D, A, B we get angle(D, A, B) == angle(F, H, G) mod 360
By divide_by_2_mod_180_v0 on F, H, G, A, B, C we get angle(A, B, C) == angle(F, H, G) mod 360
By divide_by_2_mod_180_v1 on C, B, A, G, H, F we get angle(C, B, A) == angle(G, H, F) mod 360
By divide_by_2_mod_180_v1 on D, A, C, D, E, G we get angle(D, A, C) == angle(D, E, G) mod 360
By divide_by_2_mod_180_v0 on E, H, F, E, B, D we get angle(E, B, D) == angle(E, H, F) mod 360
By divide_by_2_mod_180_v2 on B, D, E, E, G, D we get angle(B, D, E) == angle(E, G, D) + 180 mod 360
By point_on_perpendicular_bisector on A, B, midpoint(C, D), Line(E, G) we get distance(A, midpoint(C, D)) == distance(B, midpoint(C, D))
By divide_by_2_mod_180_v0 on C, A, F, C, E, G we get angle(C, A, F) == angle(C, E, G) mod 360
By divide_by_2_mod_180_v3 on A, C, G, G, E, B we get angle(A, C, G) == angle(G, E, B) + 180 mod 360
By point_on_perpendicular_bisector on A, D, orthocenter(A, E, F), Line(E, F) we get distance(A, orthocenter(A, E, F)) == distance(D, orthocenter(A, E, F))
By divide_by_2_mod_180_v2 on E, C, A, C, G, E we get angle(E, C, A) == angle(C, G, E) + 180 mod 360
By divide_by_2_mod_180_v2 on E, G, C, E, D, B we get angle(E, G, C) == angle(E, D, B) + 180 mod 360
By divide_by_2_mod_180_v1 on F, H, E, A, C, E we get angle(A, C, E) == angle(F, H, E) mod 360
By divide_by_2_mod_180_v0 on G, E, D, C, B, D we get angle(C, B, D) == angle(G, E, D) mod 360
By divide_by_2_mod_180_v3 on E, A, C, D, G, E we get angle(E, A, C) == angle(D, G, E) + 180 mod 360
By divide_by_2_mod_180_v0 on F, H, G, A, D, C we get angle(A, D, C) == angle(F, H, G) mod 360
By divide_by_2_mod_180_v3 on E, G, D, E, C, A we get angle(E, G, D) == angle(E, C, A) + 180 mod 360
By divide_by_2_mod_180_v1 on D, E, G, F, A, C we get angle(D, E, G) == angle(F, A, C) mod 360
By divide_by_2_mod_180_v3 on D, B, E, E, G, C we get angle(D, B, E) == angle(E, G, C) + 180 mod 360
By divide_by_2_mod_180_v1 on A, G, E, E, A, C we get angle(A, G, E) == angle(E, A, C) mod 360
By divide_by_2_mod_180_v2 on G, C, A, B, E, G we get angle(G, C, A) == angle(B, E, G) + 180 mod 360
By divide_by_2_mod_180_v3 on A, C, E, D, G, E we get angle(A, C, E) == angle(D, G, E) + 180 mod 360
By divide_by_2_mod_180_v0 on E, H, F, B, D, E we get angle(B, D, E) == angle(E, H, F) mod 360
By divide_by_2_mod_180_v1 on G, H, F, C, H, F we get angle(C, H, F) == angle(G, H, F) mod 360
By divide_by_2_mod_180_v2 on G, E, B, A, C, B we get angle(G, E, B) == angle(A, C, B) + 180 mod 360
By point_on_perpendicular_bisector on D, C, midpoint(A, B), Line(E, G) we get distance(C, midpoint(A, B)) == distance(D, midpoint(A, B))
By divide_by_2_mod_180_v3 on E, D, B, E, G, C we get angle(E, D, B) == angle(E, G, C) + 180 mod 360
By divide_by_2_mod_180_v3 on A, C, E, E, G, C we get angle(A, C, E) == angle(E, G, C) + 180 mod 360
By divide_by_2_mod_180_v2 on E, G, C, D, B, E we get angle(E, G, C) == angle(D, B, E) + 180 mod 360
By divide_by_2_mod_180_v0 on D, C, B, F, E, G we get angle(D, C, B) == angle(F, E, G) mod 360
By divide_by_2_mod_180_v0 on C, A, E, E, H, F we get angle(C, A, E) == angle(E, H, F) mod 360
By divide_by_2_mod_180_v3 on E, G, D, C, A, E we get angle(E, G, D) == angle(C, A, E) + 180 mod 360
By divide_by_2_mod_180_v0 on G, B, D, C, E, G we get angle(C, E, G) == angle(G, B, D) mod 360
By divide_by_2_mod_180_v2 on G, E, B, A, D, B we get angle(G, E, B) == angle(A, D, B) + 180 mod 360
By divide_by_2_mod_180_v3 on A, D, B, A, E, G we get angle(A, D, B) == angle(A, E, G) + 180 mod 360
By line_inequality on altitude(F, E, G), Line(C, H), F we get Line(C, H) != altitude(F, E, G)
By collinear_definition on E, center(e), G we get center(e) in Line(E, G), G in Line(E, center(e)), Line(E, G) == Line(E, center(e)), 0 == 2 * angle(center(e), E, G) mod 360
By divide_by_2_mod_180_v2 on C, A, E, E, G, D we get angle(C, A, E) == angle(E, G, D) + 180 mod 360
By line_containment_inequality on orthocenter(A, E, F), B, i we get B != orthocenter(A, E, F)
By divide_by_2_mod_180_v3 on C, G, E, E, C, A we get angle(C, G, E) == angle(E, C, A) + 180 mod 360
By point_on_perpendicular_bisector on D, A, orthocenter(D, E, F), Line(E, F) we get distance(A, orthocenter(D, E, F)) == distance(D, orthocenter(D, E, F))
By divide_by_2_mod_180_v3 on E, G, D, B, D, E we get angle(E, G, D) == angle(B, D, E) + 180 mod 360
By divide_by_2_mod_180_v2 on E, G, C, A, C, E we get angle(E, G, C) == angle(A, C, E) + 180 mod 360
By line_containment_inequality on orthocenter(A, E, F), C, i we get C != orthocenter(A, E, F)
By divide_by_2_mod_180_v3 on F, D, B, G, E, B we get angle(F, D, B) == angle(G, E, B) + 180 mod 360
By line_containment_inequality on orthocenter(E, F, G), H, i we get H != orthocenter(E, F, G)
By divide_by_2_mod_180_v0 on F, A, B, F, H, G we get angle(F, A, B) == angle(F, H, G) mod 360
By divide_by_2_mod_180_v2 on B, D, A, G, E, A we get angle(B, D, A) == angle(G, E, A) + 180 mod 360
By line_circle_intersection_has_at_most_two_points_0 on G, E, center(e), Circle(B, D, E) we get center(e) not in Circle(B, D, E)
By divide_by_2_mod_180_v2 on G, E, B, A, C, G we get angle(G, E, B) == angle(A, C, G) + 180 mod 360
By divide_by_2_mod_180_v3 on G, E, A, B, D, G we get angle(G, E, A) == angle(B, D, G) + 180 mod 360
By divide_by_2_mod_180_v2 on D, G, E, E, D, B we get angle(D, G, E) == angle(E, D, B) + 180 mod 360
By line_inequality on altitude(F, D, E), f, F we get f != altitude(F, D, E)
By line_inequality on altitude(F, A, E), Line(B, E), F we get Line(B, E) != altitude(F, A, E)
By line_inequality on altitude(F, D, E), g, F we get g != altitude(F, D, E)
By divide_by_2_mod_180_v2 on D, G, E, A, C, E we get angle(D, G, E) == angle(A, C, E) + 180 mod 360
By line_inequality on altitude(F, A, E), Line(E, H), F we get Line(E, H) != altitude(F, A, E)
By collinear_definition on center(e), E, G we get E in Line(G, center(e)), G in Line(E, center(e)), Line(E, center(e)) == Line(G, center(e)), 0 == 2 * angle(E, center(e), G) mod 360
By line_inequality on altitude(F, E, G), Line(D, H), F we get Line(D, H) != altitude(F, E, G)
By line_containment_inequality on midpoint(C, D), H, Line(E, G) we get H != midpoint(C, D)
By line_containment_inequality on orthocenter(D, E, F), B, Line(E, F) we get B != orthocenter(D, E, F)
By line_containment_inequality on orthocenter(E, F, G), A, Line(E, F) we get A != orthocenter(E, F, G)
By line_circle_intersection_has_at_most_two_points_0 on D, C, midpoint(C, D), d we get midpoint(C, D) not in d
By line_containment_inequality on orthocenter(E, F, G), B, i we get B != orthocenter(E, F, G)
By line_inequality on altitude(F, A, E), g, F we get g != altitude(F, A, E)
By line_containment_inequality on orthocenter(D, E, F), C, i we get C != orthocenter(D, E, F)
By line_circle_intersection_has_at_most_two_points_0 on A, G, D, Circle(A, C, E) we get D not in Circle(A, C, E)
By line_circle_intersection_has_at_most_two_points_0 on C, D, midpoint(C, D), c we get midpoint(C, D) not in c
By line_circle_intersection_has_at_most_two_points_0 on G, D, F, Circle(B, D, E) we get F not in Circle(B, D, E)
By line_containment_inequality on orthocenter(A, E, F), E, i we get E != orthocenter(A, E, F)
By line_circle_intersection_has_at_most_two_points_0 on G, B, C, Circle(B, D, E) we get C not in Circle(B, D, E)
By line_containment_inequality on orthocenter(D, E, F), A, Line(E, F) we get A != orthocenter(D, E, F)
By line_circle_intersection_has_at_most_two_points_0 on A, G, F, Circle(A, C, E) we get F not in Circle(A, C, E)
By line_inequality on altitude(F, D, E), Line(E, H), F we get Line(E, H) != altitude(F, D, E)
By line_circle_intersection_has_at_most_two_points_0 on G, E, center(e), Circle(A, C, E) we get center(e) not in Circle(A, C, E)
By line_circle_intersection_has_at_most_two_points_0 on D, G, A, Circle(B, D, E) we get A not in Circle(B, D, E)
By line_inequality on altitude(F, A, E), Line(C, E), F we get Line(C, E) != altitude(F, A, E)
By line_inequality on altitude(F, A, E), Line(C, H), F we get Line(C, H) != altitude(F, A, E)
By line_containment_inequality on midpoint(A, B), C, Line(E, G) we get C != midpoint(A, B)
By line_inequality on altitude(F, D, E), Line(D, E), F we get Line(D, E) != altitude(F, D, E)
By line_circle_intersection_has_at_most_two_points_0 on C, G, B, Circle(A, C, E) we get B not in Circle(A, C, E)
By line_inequality on altitude(F, E, G), Line(A, E), F we get Line(A, E) != altitude(F, E, G)
By line_inequality on altitude(F, A, E), h, F we get h != altitude(F, A, E)
By line_containment_inequality on orthocenter(E, F, G), C, Line(E, F) we get C != orthocenter(E, F, G)
By line_inequality on altitude(F, E, G), Line(D, E), F we get Line(D, E) != altitude(F, E, G)
By line_inequality on altitude(F, A, E), Line(A, C), F we get Line(A, C) != altitude(F, A, E)
By line_inequality on altitude(F, A, E), Line(D, H), F we get Line(D, H) != altitude(F, A, E)
By line_containment_inequality on midpoint(A, B), H, Line(E, G) we get H != midpoint(A, B)
By line_containment_inequality on orthocenter(A, E, F), D, Line(E, F) we get D != orthocenter(A, E, F)
By line_containment_inequality on orthocenter(E, F, G), E, i we get E != orthocenter(E, F, G)
By line_inequality on altitude(F, D, E), Line(B, D), F we get Line(B, D) != altitude(F, D, E)
By line_inequality on altitude(F, D, E), Line(G, H), F we get Line(G, H) != altitude(F, D, E)
By line_containment_inequality on orthocenter(D, E, F), E, i we get E != orthocenter(D, E, F)
By line_inequality on altitude(F, D, E), h, F we get h != altitude(F, D, E)
By line_inequality on altitude(F, D, E), Line(B, E), F we get Line(B, E) != altitude(F, D, E)
By line_containment_inequality on orthocenter(D, E, F), G, Line(E, F) we get G != orthocenter(D, E, F)
By line_inequality on altitude(F, D, E), Line(D, H), F we get Line(D, H) != altitude(F, D, E)
By line_inequality on altitude(F, E, G), Line(G, H), F we get Line(G, H) != altitude(F, E, G)
By line_circle_intersection_has_at_most_two_points_0 on B, A, midpoint(A, B), c we get midpoint(A, B) not in c
By line_inequality on altitude(F, D, E), Line(C, E), F we get Line(C, E) != altitude(F, D, E)
By line_containment_inequality on midpoint(A, B), D, Line(E, G) we get D != midpoint(A, B)
By line_containment_inequality on midpoint(A, B), F, Line(E, G) we get F != midpoint(A, B)
By line_inequality on altitude(F, D, E), Line(E, G), F we get Line(E, G) != altitude(F, D, E)
By line_inequality on altitude(F, E, G), Line(B, E), F we get Line(B, E) != altitude(F, E, G)
By line_containment_inequality on orthocenter(E, F, G), D, Line(E, F) we get D != orthocenter(E, F, G)
By line_inequality on altitude(F, E, G), Line(E, G), F we get Line(E, G) != altitude(F, E, G)
By line_containment_inequality on midpoint(C, D), A, Line(E, G) we get A != midpoint(C, D)
By line_inequality on altitude(F, E, G), Line(C, E), F we get Line(C, E) != altitude(F, E, G)
By line_inequality on altitude(F, D, E), Line(A, E), F we get Line(A, E) != altitude(F, D, E)
By line_containment_inequality on orthocenter(D, E, F), H, Line(E, F) we get H != orthocenter(D, E, F)
By line_containment_inequality on orthocenter(A, E, F), G, Line(E, F) we get G != orthocenter(A, E, F)
By line_inequality on altitude(F, A, E), Line(G, H), F we get Line(G, H) != altitude(F, A, E)
By line_containment_inequality on orthocenter(A, E, F), H, i we get H != orthocenter(A, E, F)
By line_inequality on altitude(F, E, G), Line(A, C), F we get Line(A, C) != altitude(F, E, G)
By line_containment_inequality on midpoint(C, D), B, Line(E, G) we get B != midpoint(C, D)
By line_inequality on altitude(F, A, E), Line(D, E), F we get Line(D, E) != altitude(F, A, E)
By line_containment_inequality on midpoint(C, D), F, Line(E, G) we get F != midpoint(C, D)
By line_inequality on altitude(F, D, E), Line(C, H), F we get Line(C, H) != altitude(F, D, E)
By line_inequality on altitude(F, A, E), Line(A, E), F we get Line(A, E) != altitude(F, A, E)
By line_inequality on altitude(F, E, G), g, F we get g != altitude(F, E, G)
By line_inequality on altitude(F, A, E), f, F we get f != altitude(F, A, E)
By line_inequality on altitude(F, A, E), Line(E, G), F we get Line(E, G) != altitude(F, A, E)
By line_inequality on altitude(F, E, G), Line(E, H), F we get Line(E, H) != altitude(F, E, G)
By line_containment_inequality on orthocenter(A, E, F), A, Line(E, F) we get A != orthocenter(A, E, F)
By line_inequality on altitude(F, D, E), Line(A, C), F we get Line(A, C) != altitude(F, D, E)
By line_containment_inequality on orthocenter(E, F, G), G, Line(E, F) we get G != orthocenter(E, F, G)
By line_inequality on altitude(F, E, G), Line(B, D), F we get Line(B, D) != altitude(F, E, G)
By line_containment_inequality on orthocenter(D, E, F), D, Line(E, F) we get D != orthocenter(D, E, F)
By circumcenter_perpendicular_bisectors on B, A, D we get circumcenter(A, B, D) in perpendicular_bisector(A, B), circumcenter(A, B, D) in perpendicular_bisector(A, D), circumcenter(A, B, D) in perpendicular_bisector(B, D)
By external_angle_bisector_definition_v0_r on C, E, A, G we get Line(E, G) == external_angle_bisector(A, G, C)
By circumcenter_perpendicular_bisectors on C, D, A we get circumcenter(A, C, D) in perpendicular_bisector(C, D), circumcenter(A, C, D) in perpendicular_bisector(A, D), circumcenter(A, C, D) in perpendicular_bisector(A, C)
By external_angle_bisector_definition_v0_r on C, E, F, G we get Line(E, G) == external_angle_bisector(C, G, F)
By external_angle_bisector_definition_v0_r on B, E, D, G we get Line(E, G) == external_angle_bisector(B, G, D)
By internal_angle_bisector_definition_v0_r on D, G, C, E we get Line(E, G) == internal_angle_bisector(C, E, D)
By power_of_a_point_in_circle on E, Circle(B, D, E) we get 0 == power_of_a_point(E, Circle(B, D, E))
By concyclic_definition_0 on G, C, F, center(d) we get center(d) in Circle(C, F, G)
By isosceles_triangle_midpoint on E, B, A we get midpoint(A, B) in median(E, A, B)
By internal_angle_bisector_definition_v0_r on center(e), G, center(e), E we get Line(E, G) == internal_angle_bisector(center(e), E, center(e))
By collinear_definition on C, midpoint(C, D), D we get midpoint(C, D) in Line(C, D), D in Line(C, midpoint(C, D)), Line(C, D) == Line(C, midpoint(C, D)), 0 == 2 * angle(midpoint(C, D), C, D) mod 360
By isosceles_triangle_midpoint on G, B, A we get midpoint(A, B) in median(G, A, B)
By log_of_2_times_distance on B, A, midpoint(A, B), B we get log(distance(A, B)) == 0.6931471805599453 + log(distance(B, midpoint(A, B)))
By power_of_a_point_on_circle on B, Circle(B, D, E) we get 0 == power_of_a_point(B, Circle(B, D, E))
By power_of_a_point_in_circle on A, Circle(A, C, E) we get 0 == power_of_a_point(A, Circle(A, C, E))
By concyclic_definition_0 on F, center(d), C, G we get G in Circle(C, F, center(d))
By internal_angle_bisector_definition_v0_r on C, E, D, G we get Line(E, G) == internal_angle_bisector(C, G, D)
By power_of_a_point_in_circle on D, Circle(B, D, E) we get 0 == power_of_a_point(D, Circle(B, D, E))
By power_of_a_point_on_circle on G, Circle(B, D, E) we get 0 == power_of_a_point(G, Circle(B, D, E))
By log_of_2_times_distance on A, B, midpoint(A, B), A we get log(distance(A, B)) == 0.6931471805599453 + log(distance(A, midpoint(A, B)))
By isosceles_triangle_altitude_v3 on midpoint(C, D), C, D we get identical(perpendicular_bisector(C, D), internal_angle_bisector(C, midpoint(C, D), D), perpendicular_line(midpoint(C, D), Line(C, D)))
By perpendicular_lines_draw_intersection on Line(E, G), altitude(F, E, G) we get exists(line_intersection(Line(E, G), altitude(F, E, G)))
By internal_angle_bisector_definition_v0_r on E, center(e), E, G we get Line(G, center(e)) == internal_angle_bisector(E, G, E)
By internal_angle_bisector_definition_v0_r on A, E, B, G we get Line(E, G) == internal_angle_bisector(A, G, B)
By collinear_definition on A, B, midpoint(A, B) we get B in Line(A, midpoint(A, B)), midpoint(A, B) in Line(A, B), Line(A, B) == Line(A, midpoint(A, B)), 0 == 2 * angle(B, A, midpoint(A, B)) mod 360
By power_of_a_point_in_circle on G, Circle(A, C, E) we get 0 == power_of_a_point(G, Circle(A, C, E))
By internal_angle_bisector_definition_v0_r on B, E, F, G we get Line(E, G) == internal_angle_bisector(B, G, F)
By isosceles_triangle_midpoint on G, D, C we get midpoint(C, D) in median(G, C, D)
By collinear_definition on B, A, midpoint(A, B) we get A in Line(B, midpoint(A, B)), midpoint(A, B) in Line(A, B), Line(A, B) == Line(B, midpoint(A, B)), 0 == 2 * angle(A, B, midpoint(A, B)) mod 360
By log_of_2_times_distance on D, C, midpoint(C, D), D we get log(distance(C, D)) == 0.6931471805599453 + log(distance(D, midpoint(C, D)))
By log_of_2_times_distance on C, D, C, midpoint(C, D) we get log(distance(C, D)) == 0.6931471805599453 + log(distance(C, midpoint(C, D)))
By perpendicular_lines_draw_intersection on f, Line(E, G) we get exists(line_intersection(f, Line(E, G)))
By isosceles_triangle_midpoint on E, C, D we get midpoint(C, D) in median(E, C, D)
By isosceles_triangle_altitude_v3 on midpoint(A, B), B, A we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, midpoint(A, B), B), perpendicular_line(midpoint(A, B), Line(A, B)))
By isosceles_triangle_altitude_v1 on midpoint(C, D), D, C we get identical(perpendicular_bisector(C, D), internal_angle_bisector(C, midpoint(C, D), D), perpendicular_line(midpoint(C, D), Line(C, D)))
By power_of_a_point_on_circle on E, Circle(A, C, E) we get 0 == power_of_a_point(E, Circle(A, C, E))
By power_of_a_point_in_circle on C, Circle(A, C, E) we get 0 == power_of_a_point(C, Circle(A, C, E))
By collinear_definition on B, midpoint(A, B), A we get midpoint(A, B) in Line(A, B), A in Line(B, midpoint(A, B)), Line(A, B) == Line(B, midpoint(A, B)), 0 == 2 * angle(midpoint(A, B), B, A) mod 360
By internal_angle_bisector_definition_v0_r on A, G, B, E we get Line(E, G) == internal_angle_bisector(A, E, B)
By collinear_definition on C, D, midpoint(C, D) we get D in Line(C, midpoint(C, D)), midpoint(C, D) in Line(C, D), Line(C, D) == Line(C, midpoint(C, D)), 0 == 2 * angle(D, C, midpoint(C, D)) mod 360
By collinear_definition on D, C, midpoint(C, D) we get C in Line(D, midpoint(C, D)), midpoint(C, D) in Line(C, D), Line(C, D) == Line(D, midpoint(C, D)), 0 == 2 * angle(C, D, midpoint(C, D)) mod 360
By collinear_definition on A, midpoint(A, B), B we get midpoint(A, B) in Line(A, B), B in Line(A, midpoint(A, B)), Line(A, B) == Line(A, midpoint(A, B)), 0 == 2 * angle(midpoint(A, B), A, B) mod 360
By isosceles_triangle_altitude_v1 on midpoint(C, D), C, D we get identical(perpendicular_bisector(C, D), internal_angle_bisector(C, midpoint(C, D), D), perpendicular_line(midpoint(C, D), Line(C, D)))
By perpendicular_bisector_properties on A, B we get perpendicular(Line(A, B), perpendicular_bisector(A, B)), midpoint(A, B) == line_intersection(Line(A, B), perpendicular_bisector(A, B))
By perpendicular_bisector_properties on C, D we get perpendicular(Line(C, D), perpendicular_bisector(C, D)), midpoint(C, D) == line_intersection(Line(C, D), perpendicular_bisector(C, D))
By internal_angle_bisector_definition_v0_r on G, center(e), G, E we get Line(E, center(e)) == internal_angle_bisector(G, E, G)
By perpendicular_lines_draw_intersection on altitude(F, A, E), Line(A, E) we get exists(line_intersection(Line(A, E), altitude(F, A, E)))
By internal_angle_bisector_definition_v0_r on center(e), E, center(e), G we get Line(E, G) == internal_angle_bisector(center(e), G, center(e))
By collinear_definition on D, midpoint(C, D), C we get midpoint(C, D) in Line(C, D), C in Line(D, midpoint(C, D)), Line(C, D) == Line(D, midpoint(C, D)), 0 == 2 * angle(midpoint(C, D), D, C) mod 360
By perpendicular_lines_draw_intersection on altitude(F, D, E), Line(D, E) we get exists(line_intersection(Line(D, E), altitude(F, D, E)))
By isosceles_triangle_altitude_v1 on midpoint(A, B), A, B we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, midpoint(A, B), B), perpendicular_line(midpoint(A, B), Line(A, B)))
By perpendicular_lines_draw_intersection on Line(E, G), h we get exists(line_intersection(h, Line(E, G)))
By isosceles_triangle_altitude_v3 on midpoint(A, B), A, B we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, midpoint(A, B), B), perpendicular_line(midpoint(A, B), Line(A, B)))
By isosceles_triangle_altitude_v1 on midpoint(A, B), B, A we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, midpoint(A, B), B), perpendicular_line(midpoint(A, B), Line(A, B)))
By isosceles_triangle_altitude_v3 on midpoint(C, D), D, C we get identical(perpendicular_bisector(C, D), internal_angle_bisector(C, midpoint(C, D), D), perpendicular_line(midpoint(C, D), Line(C, D)))
By altitude_definition on E, H, G, Line(E, H) we get Line(E, H) == altitude(E, G, H)
By concyclic_definition_1 on G, F, C, center(d) we get Circle(C, F, G) == Circle(C, F, center(d))
By altitude_definition on E, C, D, Line(E, G) we get Line(E, G) == altitude(E, C, D)
By altitude_definition on G, B, A, Line(E, G) we get Line(E, G) == altitude(G, A, B)
By collinear_definition on midpoint(A, B), B, A we get B in Line(A, midpoint(A, B)), A in Line(B, midpoint(A, B)), Line(A, midpoint(A, B)) == Line(B, midpoint(A, B)), 0 == 2 * angle(B, midpoint(A, B), A) mod 360
By isosceles_triangle_altitude_v3 on E, A, B we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, E, B), perpendicular_line(E, Line(A, B)))
By collinear_definition on midpoint(C, D), D, C we get D in Line(C, midpoint(C, D)), C in Line(D, midpoint(C, D)), Line(C, midpoint(C, D)) == Line(D, midpoint(C, D)), 0 == 2 * angle(D, midpoint(C, D), C) mod 360
By altitude_definition on G, D, C, Line(E, G) we get Line(E, G) == altitude(G, C, D)
By altitude_definition on B, E, G, f we get f == altitude(B, E, G)
By isosceles_triangle_properties on midpoint(A, B), B, A we get distance(A, midpoint(A, B)) == distance(B, midpoint(A, B)), angle(B, A, midpoint(A, B)) == angle(midpoint(A, B), B, A) mod 360
By altitude_definition on E, A, B, Line(E, G) we get Line(E, G) == altitude(E, A, B)
By isosceles_triangle_altitude_v3 on G, D, C we get identical(perpendicular_bisector(C, D), internal_angle_bisector(C, G, D), perpendicular_line(G, Line(C, D)))
By isosceles_triangle_altitude_v3 on E, C, D we get identical(perpendicular_bisector(C, D), internal_angle_bisector(C, E, D), perpendicular_line(E, Line(C, D)))
By altitude_definition on D, E, G, h we get h == altitude(D, E, G)
By collinear_definition on midpoint(A, B), A, B we get A in Line(B, midpoint(A, B)), B in Line(A, midpoint(A, B)), Line(A, midpoint(A, B)) == Line(B, midpoint(A, B)), 0 == 2 * angle(A, midpoint(A, B), B) mod 360
By altitude_definition on C, G, E, h we get h == altitude(C, E, G)
By altitude_definition on A, E, G, f we get f == altitude(A, E, G)
By isosceles_triangle_properties on midpoint(C, D), D, C we get distance(C, midpoint(C, D)) == distance(D, midpoint(C, D)), angle(D, C, midpoint(C, D)) == angle(midpoint(C, D), D, C) mod 360
By isosceles_triangle_altitude_v3 on center(d), D, C we get identical(perpendicular_bisector(C, D), internal_angle_bisector(C, center(d), D), perpendicular_line(center(d), Line(C, D)))
By altitude_definition on G, H, E, Line(G, H) we get Line(G, H) == altitude(G, E, H)
By collinear_definition on midpoint(C, D), C, D we get C in Line(D, midpoint(C, D)), D in Line(C, midpoint(C, D)), Line(C, midpoint(C, D)) == Line(D, midpoint(C, D)), 0 == 2 * angle(C, midpoint(C, D), D) mod 360
By isosceles_triangle_altitude_v3 on E, B, A we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, E, B), perpendicular_line(E, Line(A, B)))
By isosceles_triangle_properties on midpoint(A, B), A, B we get distance(A, midpoint(A, B)) == distance(B, midpoint(A, B)), angle(A, B, midpoint(A, B)) == angle(midpoint(A, B), A, B) mod 360
By isosceles_triangle_properties on midpoint(C, D), C, D we get distance(C, midpoint(C, D)) == distance(D, midpoint(C, D)), angle(C, D, midpoint(C, D)) == angle(midpoint(C, D), C, D) mod 360
By isosceles_triangle_altitude_v3 on G, C, D we get identical(perpendicular_bisector(C, D), internal_angle_bisector(C, G, D), perpendicular_line(G, Line(C, D)))
By isosceles_triangle_altitude_v3 on E, D, C we get identical(perpendicular_bisector(C, D), internal_angle_bisector(C, E, D), perpendicular_line(E, Line(C, D)))
By isosceles_triangle_altitude_v3 on center(d), C, D we get identical(perpendicular_bisector(C, D), internal_angle_bisector(C, center(d), D), perpendicular_line(center(d), Line(C, D)))
By isosceles_triangle_altitude_v3 on G, A, B we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, G, B), perpendicular_line(G, Line(A, B)))
By isosceles_triangle_altitude_v3 on G, B, A we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, G, B), perpendicular_line(G, Line(A, B)))
By between_implies_angles on B, midpoint(A, B), A we get 180 == angle(B, midpoint(A, B), A) mod 360, 0 == angle(midpoint(A, B), A, B) mod 360, 0 == angle(A, B, midpoint(A, B)) mod 360
By between_implies_angles on D, midpoint(C, D), C we get 180 == angle(D, midpoint(C, D), C) mod 360, 0 == angle(midpoint(C, D), C, D) mod 360, 0 == angle(C, D, midpoint(C, D)) mod 360
By power_of_a_point_definition on center(e), E, G, e we get log(power_of_a_point(center(e), e)) == log(distance(E, center(e))) + log(distance(G, center(e)))
By between_implies_angles on C, midpoint(C, D), D we get 180 == angle(C, midpoint(C, D), D) mod 360, 0 == angle(midpoint(C, D), D, C) mod 360, 0 == angle(D, C, midpoint(C, D)) mod 360
By between_implies_angles on A, midpoint(A, B), B we get 180 == angle(A, midpoint(A, B), B) mod 360, 0 == angle(midpoint(A, B), B, A) mod 360, 0 == angle(B, A, midpoint(A, B)) mod 360
By line_definition on center(d), E, Line(E, G) we get Line(E, G) == Line(E, center(d))
By line_definition on center(d), center(e), Line(E, G) we get Line(E, G) == Line(center(d), center(e))
By perpendicular_line_definition on H, Line(C, H), Line(E, H) we get Line(C, H) == perpendicular_line(H, Line(E, H))
By line_intersection_definition on center(d), Line(E, G), Line(H, center(d)) we get center(d) == line_intersection(Line(E, G), Line(H, center(d)))
By line_intersection_definition on center(e), Line(E, G), Line(H, center(e)) we get center(e) == line_intersection(Line(E, G), Line(H, center(e)))
By perpendicular_line_definition on line_intersection(Line(E, G), altitude(F, E, G)), Line(E, G), altitude(F, E, G) we get Line(E, G) == perpendicular_line(line_intersection(Line(E, G), altitude(F, E, G)), altitude(F, E, G))
By perpendicular_line_definition on center(e), Line(E, G), f we get Line(E, G) == perpendicular_line(center(e), f)
By perpendicular_line_definition on line_intersection(Line(D, E), altitude(F, D, E)), altitude(F, D, E), Line(D, E) we get altitude(F, D, E) == perpendicular_line(line_intersection(Line(D, E), altitude(F, D, E)), Line(D, E))
By perpendicular_line_definition on C, Line(A, C), perpendicular_bisector(A, C) we get Line(A, C) == perpendicular_line(C, perpendicular_bisector(A, C))
By perpendicular_line_definition on A, Line(A, C), perpendicular_bisector(A, C) we get Line(A, C) == perpendicular_line(A, perpendicular_bisector(A, C))
By perpendicular_line_definition on line_intersection(Line(D, E), altitude(F, D, E)), Line(D, E), altitude(F, D, E) we get Line(D, E) == perpendicular_line(line_intersection(Line(D, E), altitude(F, D, E)), altitude(F, D, E))
By perpendicular_line_definition on line_intersection(Line(A, E), altitude(F, A, E)), altitude(F, A, E), Line(A, E) we get altitude(F, A, E) == perpendicular_line(line_intersection(Line(A, E), altitude(F, A, E)), Line(A, E))
By perpendicular_line_definition on B, Line(B, D), perpendicular_bisector(B, D) we get Line(B, D) == perpendicular_line(B, perpendicular_bisector(B, D))
By perpendicular_line_definition on C, Line(C, H), Line(E, H) we get Line(C, H) == perpendicular_line(C, Line(E, H))
By perpendicular_line_definition on line_intersection(Line(E, G), altitude(F, E, G)), Line(E, G), f we get Line(E, G) == perpendicular_line(line_intersection(Line(E, G), altitude(F, E, G)), f)
By perpendicular_line_definition on line_intersection(Line(E, G), altitude(F, E, G)), Line(E, G), h we get Line(E, G) == perpendicular_line(line_intersection(Line(E, G), altitude(F, E, G)), h)
By perpendicular_line_definition on D, Line(B, D), perpendicular_bisector(B, D) we get Line(B, D) == perpendicular_line(D, perpendicular_bisector(B, D))
By line_intersection_definition on center(e), Line(E, G), Line(F, center(e)) we get center(e) == line_intersection(Line(E, G), Line(F, center(e)))
By perpendicular_line_definition on center(e), Line(E, G), h we get Line(E, G) == perpendicular_line(center(e), h)
By line_intersection_definition on center(d), Line(C, center(d)), Line(E, G) we get center(d) == line_intersection(Line(E, G), Line(C, center(d)))
By perpendicular_line_definition on E, Line(E, H), Line(C, H) we get Line(E, H) == perpendicular_line(E, Line(C, H))
By median_definition on E, B, D, perpendicular_bisector(B, D) we get median(E, B, D) == perpendicular_bisector(B, D)
By perpendicular_line_definition on line_intersection(Line(A, E), altitude(F, A, E)), Line(A, E), altitude(F, A, E) we get Line(A, E) == perpendicular_line(line_intersection(Line(A, E), altitude(F, A, E)), altitude(F, A, E))
By perpendicular_line_definition on center(e), Line(E, G), altitude(F, E, G) we get Line(E, G) == perpendicular_line(center(e), altitude(F, E, G))
By perpendicular_line_definition on E, perpendicular_bisector(A, C), Line(A, C) we get perpendicular_bisector(A, C) == perpendicular_line(E, Line(A, C))
By median_definition on E, A, C, perpendicular_bisector(A, C) we get median(E, A, C) == perpendicular_bisector(A, C)
By midpoint_definition_v0 on E, G, center(e) we get center(e) == midpoint(E, G)
By perpendicular_line_definition on center(d), Line(E, G), altitude(F, E, G) we get Line(E, G) == perpendicular_line(center(d), altitude(F, E, G))
By perpendicular_line_definition on midpoint(C, D), h, Line(E, G) we get h == perpendicular_line(midpoint(C, D), Line(E, G))
By perpendicular_line_definition on H, Line(E, H), Line(C, H) we get Line(E, H) == perpendicular_line(H, Line(C, H))
By line_intersection_definition on center(d), Line(F, center(d)), Line(E, G) we get center(d) == line_intersection(Line(E, G), Line(F, center(d)))
By line_intersection_definition on center(d), Line(D, center(d)), Line(E, G) we get center(d) == line_intersection(Line(E, G), Line(D, center(d)))
By perpendicular_line_definition on midpoint(A, B), f, Line(E, G) we get f == perpendicular_line(midpoint(A, B), Line(E, G))
By perpendicular_line_definition on line_intersection(Line(E, G), altitude(F, E, G)), altitude(F, E, G), Line(E, G) we get altitude(F, E, G) == perpendicular_line(line_intersection(Line(E, G), altitude(F, E, G)), Line(E, G))
By perpendicular_line_definition on E, perpendicular_bisector(B, D), Line(B, D) we get perpendicular_bisector(B, D) == perpendicular_line(E, Line(B, D))
By perpendicular_line_definition on center(d), Line(E, G), f we get Line(E, G) == perpendicular_line(center(d), f)
By line_unique_intersection_v1 on Line(C, F), h, C, midpoint(C, D) we get midpoint(C, D) not in Line(C, F)
By line_unique_intersection_v1 on Line(E, H), Line(E, G), E, midpoint(A, B) we get midpoint(A, B) not in Line(E, H)
By line_unique_intersection_v1 on Line(C, E), Line(E, G), E, midpoint(A, B) we get midpoint(A, B) not in Line(C, E)
By line_unique_intersection_v1 on Line(A, C), f, A, midpoint(A, B) we get midpoint(A, B) not in Line(A, C)
By line_unique_intersection_v1 on Line(C, center(d)), Line(E, G), center(d), center(e) we get center(e) not in Line(C, center(d))
By line_unique_intersection_v1 on Line(C, E), h, C, midpoint(C, D) we get midpoint(C, D) not in Line(C, E)
By line_unique_intersection_v1 on Line(A, E), f, A, midpoint(A, B) we get midpoint(A, B) not in Line(A, E)
By line_unique_intersection_v1 on i, Line(E, G), G, midpoint(A, B) we get midpoint(A, B) not in i
By line_unique_intersection_v1 on Line(B, E), Line(E, G), E, center(d) we get center(d) not in Line(B, E)
By line_unique_intersection_v1 on Line(H, center(d)), Line(E, G), center(d), center(e) we get center(e) not in Line(H, center(d))
By line_unique_intersection_v1 on g, Line(E, G), G, midpoint(C, D) we get midpoint(C, D) not in g
By line_unique_intersection_v1 on Line(D, E), Line(E, G), E, midpoint(A, B) we get midpoint(A, B) not in Line(D, E)
By line_unique_intersection_v1 on Line(H, center(d)), Line(E, G), center(d), E we get E not in Line(H, center(d))
By line_unique_intersection_v1 on Line(F, center(d)), Line(E, G), center(d), E we get E not in Line(F, center(d))
By line_unique_intersection_v1 on Line(D, E), Line(E, G), E, center(d) we get center(d) not in Line(D, E)
By line_unique_intersection_v1 on Line(B, E), Line(E, G), E, center(e) we get center(e) not in Line(B, E)
By line_unique_intersection_v1 on Line(F, center(d)), Line(E, G), center(d), center(e) we get center(e) not in Line(F, center(d))
By line_unique_intersection_v1 on Line(F, center(e)), Line(E, G), center(e), E we get E not in Line(F, center(e))
By line_unique_intersection_v1 on Line(A, E), Line(E, G), E, midpoint(C, D) we get midpoint(C, D) not in Line(A, E)
By line_unique_intersection_v1 on Line(C, E), Line(E, G), E, center(e) we get center(e) not in Line(C, E)
By line_unique_intersection_v1 on Line(D, center(d)), Line(E, G), center(d), E we get E not in Line(D, center(d))
By line_unique_intersection_v1 on Line(B, E), f, B, midpoint(A, B) we get midpoint(A, B) not in Line(B, E)
By line_unique_intersection_v1 on Line(A, E), Line(E, G), E, center(d) we get center(d) not in Line(A, E)
By line_unique_intersection_v1 on Line(E, F), Line(E, G), E, center(d) we get center(d) not in Line(E, F)
By line_unique_intersection_v1 on Line(H, center(e)), Line(E, G), center(e), center(d) we get center(d) not in Line(H, center(e))
By line_unique_intersection_v1 on Line(H, center(e)), Line(E, G), center(e), E we get E not in Line(H, center(e))
By line_unique_intersection_v1 on Line(C, H), h, C, midpoint(C, D) we get midpoint(C, D) not in Line(C, H)
By line_unique_intersection_v1 on Line(A, E), Line(E, G), E, center(e) we get center(e) not in Line(A, E)
By line_unique_intersection_v1 on Line(G, H), Line(E, G), G, midpoint(C, D) we get midpoint(C, D) not in Line(G, H)
By line_unique_intersection_v1 on Line(A, C), h, C, midpoint(C, D) we get midpoint(C, D) not in Line(A, C)
By line_unique_intersection_v1 on Line(C, E), Line(E, G), E, center(d) we get center(d) not in Line(C, E)
By line_unique_intersection_v1 on Line(D, center(d)), Line(E, G), center(d), center(e) we get center(e) not in Line(D, center(d))
By line_unique_intersection_v1 on i, Line(E, G), G, center(e) we get center(e) not in i
By line_unique_intersection_v1 on Line(E, H), Line(E, G), E, center(e) we get center(e) not in Line(E, H)
By line_unique_intersection_v1 on Line(E, H), Line(E, G), E, center(d) we get center(d) not in Line(E, H)
By line_unique_intersection_v1 on g, f, B, midpoint(A, B) we get midpoint(A, B) not in g
By line_unique_intersection_v1 on Line(B, D), h, D, midpoint(C, D) we get midpoint(C, D) not in Line(B, D)
By line_unique_intersection_v1 on Line(G, H), Line(E, G), G, midpoint(A, B) we get midpoint(A, B) not in Line(G, H)
By line_unique_intersection_v1 on Line(G, H), Line(E, G), G, center(e) we get center(e) not in Line(G, H)
By line_unique_intersection_v1 on Line(D, H), h, D, midpoint(C, D) we get midpoint(C, D) not in Line(D, H)
By line_unique_intersection_v1 on Line(D, E), Line(E, G), E, midpoint(C, D) we get midpoint(C, D) not in Line(D, E)
By line_unique_intersection_v1 on i, h, D, midpoint(C, D) we get midpoint(C, D) not in i
By line_unique_intersection_v1 on Line(F, center(e)), Line(E, G), center(e), center(d) we get center(d) not in Line(F, center(e))
By line_unique_intersection_v1 on Line(E, H), Line(E, G), E, midpoint(C, D) we get midpoint(C, D) not in Line(E, H)
By line_unique_intersection_v1 on Line(D, E), Line(E, G), E, center(e) we get center(e) not in Line(D, E)
By line_unique_intersection_v1 on Line(E, F), Line(E, G), E, midpoint(C, D) we get midpoint(C, D) not in Line(E, F)
By line_unique_intersection_v1 on Line(E, F), Line(E, G), E, center(e) we get center(e) not in Line(E, F)
By line_unique_intersection_v1 on Line(F, center(e)), Line(E, G), center(e), G we get G not in Line(F, center(e))
By line_unique_intersection_v1 on Line(E, F), Line(E, G), E, midpoint(A, B) we get midpoint(A, B) not in Line(E, F)
By line_unique_intersection_v1 on Line(B, E), Line(E, G), E, midpoint(C, D) we get midpoint(C, D) not in Line(B, E)
By line_unique_intersection_v1 on Line(H, center(e)), Line(E, G), center(e), G we get G not in Line(H, center(e))
By line_unique_intersection_v1 on g, Line(E, G), G, center(e) we get center(e) not in g
By line_unique_intersection_v1 on Line(B, D), f, B, midpoint(A, B) we get midpoint(A, B) not in Line(B, D)
By line_unique_intersection_v1 on Line(C, center(d)), Line(E, G), center(d), E we get E not in Line(C, center(d))
By same_angle_converse_v0 on H, G, C, F we get collinear(C, G, H)
By perpendicular_direction_conditions_v0_r on center(e), G, midpoint(C, D), D we get 180 == 2 * direction(center(e), G) - 2 * direction(midpoint(C, D), D) mod 360
By between_implies_orientation on midpoint(C, D), D, G, A we get orientation(A, midpoint(C, D), G) == orientation(D, G, midpoint(C, D)) mod 360, orientation(A, midpoint(C, D), D) == orientation(D, G, midpoint(C, D)) mod 360
By collinear_and_not_between_implies_orientation on midpoint(C, D), D, A, F we get orientation(A, D, midpoint(C, D)) == orientation(A, F, midpoint(C, D)) mod 360
By collinear_and_not_between_implies_orientation on A, midpoint(C, D), D, C we get orientation(A, D, C) == orientation(A, D, midpoint(C, D)) mod 360
By projection_definition on A, midpoint(A, B), Line(E, G) we get midpoint(A, B) == projection(A, Line(E, G))
By collinear_and_not_between_implies_orientation on midpoint(A, B), G, A, D we get orientation(A, D, midpoint(A, B)) == orientation(A, G, midpoint(A, B)) mod 360
By between_implies_orientation on H, B, midpoint(A, B), A we get orientation(A, H, midpoint(A, B)) == orientation(B, midpoint(A, B), H) mod 360, orientation(A, H, B) == orientation(B, midpoint(A, B), H) mod 360
By collinear_and_not_between_implies_orientation on midpoint(A, B), F, G, A we get orientation(A, midpoint(A, B), G) == orientation(F, midpoint(A, B), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), A, G, E we get 180 == 2 * direction(midpoint(A, B), A) - 2 * direction(G, E) mod 360
By perpendicular_direction_conditions_v0_r on G, E, midpoint(C, D), D we get 180 == 2 * direction(G, E) - 2 * direction(midpoint(C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), D, G, center(e) we get 180 == 2 * direction(midpoint(C, D), D) - 2 * direction(G, center(e)) mod 360
By collinear_and_not_between_implies_orientation on A, D, C, midpoint(C, D) we get orientation(A, C, D) == orientation(A, C, midpoint(C, D)) mod 360
By between_implies_orientation on A, C, midpoint(C, D), D we get orientation(A, C, midpoint(C, D)) == orientation(A, midpoint(C, D), D) mod 360, orientation(A, C, D) == orientation(A, C, midpoint(C, D)) mod 360
By collinear_and_not_between_implies_orientation on midpoint(A, B), G, C, B we get orientation(B, midpoint(A, B), C) == orientation(C, G, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), D, center(e), G we get 180 == 2 * direction(midpoint(C, D), D) - 2 * direction(center(e), G) mod 360
By perpendicular_direction_conditions_v0_r on center(e), E, midpoint(C, D), D we get 180 == 2 * direction(center(e), E) - 2 * direction(midpoint(C, D), D) mod 360
By collinear_and_not_between_implies_orientation on midpoint(C, D), F, A, G we get orientation(A, F, midpoint(C, D)) == orientation(A, G, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on center(e), G, midpoint(A, B), A we get 180 == 2 * direction(center(e), G) - 2 * direction(midpoint(A, B), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), C, G, E we get 180 == 2 * direction(midpoint(C, D), C) - 2 * direction(G, E) mod 360
By collinear_and_not_between_implies_orientation on F, midpoint(C, D), D, C we get orientation(C, F, D) == orientation(D, midpoint(C, D), F) mod 360
By perpendicular_direction_conditions_v0_r on G, center(e), midpoint(C, D), C we get 180 == 2 * direction(G, center(e)) - 2 * direction(midpoint(C, D), C) mod 360
By collinear_and_not_between_implies_orientation on midpoint(C, D), B, C, G we get orientation(B, midpoint(C, D), C) == orientation(C, G, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on center(e), G, midpoint(C, D), C we get 180 == 2 * direction(center(e), G) - 2 * direction(midpoint(C, D), C) mod 360
By collinear_and_not_between_implies_orientation on midpoint(A, B), G, A, F we get orientation(A, F, midpoint(A, B)) == orientation(A, G, midpoint(A, B)) mod 360
By collinear_and_not_between_implies_orientation on G, C, D, midpoint(C, D) we get orientation(C, G, D) == orientation(D, midpoint(C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), B, G, E we get 180 == 2 * direction(midpoint(A, B), B) - 2 * direction(G, E) mod 360
By collinear_and_not_between_implies_orientation on D, A, B, midpoint(A, B) we get orientation(A, D, B) == orientation(B, midpoint(A, B), D) mod 360
By collinear_and_not_between_implies_orientation on midpoint(C, D), G, D, F we get orientation(D, F, midpoint(C, D)) == orientation(D, G, midpoint(C, D)) mod 360
By between_implies_orientation on H, C, midpoint(C, D), D we get orientation(C, midpoint(C, D), H) == orientation(D, H, midpoint(C, D)) mod 360, orientation(C, D, H) == orientation(C, midpoint(C, D), H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), B, E, G we get 180 == 2 * direction(midpoint(A, B), B) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), D, center(e), E we get 180 == 2 * direction(midpoint(C, D), D) - 2 * direction(center(e), E) mod 360
By collinear_and_not_between_implies_orientation on midpoint(C, D), D, F, G we get orientation(D, midpoint(C, D), F) == orientation(F, G, midpoint(C, D)) mod 360
By between_implies_orientation on E, D, midpoint(C, D), C we get orientation(C, E, midpoint(C, D)) == orientation(D, midpoint(C, D), E) mod 360, orientation(C, E, D) == orientation(D, midpoint(C, D), E) mod 360
By perpendicular_direction_conditions_v0_r on G, E, midpoint(A, B), B we get 180 == 2 * direction(G, E) - 2 * direction(midpoint(A, B), B) mod 360
By between_implies_orientation on midpoint(A, B), G, F, A we get orientation(A, midpoint(A, B), F) == orientation(F, midpoint(A, B), G) mod 360, orientation(A, midpoint(A, B), G) == orientation(F, midpoint(A, B), G) mod 360
By between_implies_orientation on D, A, midpoint(A, B), B we get orientation(A, midpoint(A, B), D) == orientation(B, D, midpoint(A, B)) mod 360, orientation(A, B, D) == orientation(A, midpoint(A, B), D) mod 360
By projection_definition on G, midpoint(C, D), h we get midpoint(C, D) == projection(G, h)
By collinear_and_not_between_implies_orientation on G, midpoint(C, D), C, D we get orientation(C, D, G) == orientation(C, midpoint(C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on center(e), E, midpoint(C, D), C we get 180 == 2 * direction(center(e), E) - 2 * direction(midpoint(C, D), C) mod 360
By collinear_and_not_between_implies_orientation on midpoint(A, B), A, D, F we get orientation(A, midpoint(A, B), D) == orientation(D, F, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), C, E, center(e) we get 180 == 2 * direction(midpoint(C, D), C) - 2 * direction(E, center(e)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), C, G, center(e) we get 180 == 2 * direction(midpoint(C, D), C) - 2 * direction(G, center(e)) mod 360
By collinear_and_not_between_implies_orientation on C, B, A, midpoint(A, B) we get orientation(A, B, C) == orientation(A, midpoint(A, B), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), B, G, center(e) we get 180 == 2 * direction(midpoint(A, B), B) - 2 * direction(G, center(e)) mod 360
By collinear_and_not_between_implies_orientation on midpoint(A, B), C, B, G we get orientation(B, C, midpoint(A, B)) == orientation(B, G, midpoint(A, B)) mod 360
By between_implies_orientation on B, C, midpoint(C, D), D we get orientation(B, C, midpoint(C, D)) == orientation(B, midpoint(C, D), D) mod 360, orientation(B, C, D) == orientation(B, C, midpoint(C, D)) mod 360
By collinear_and_not_between_implies_orientation on H, midpoint(A, B), A, B we get orientation(A, B, H) == orientation(A, midpoint(A, B), H) mod 360
By between_implies_orientation on midpoint(A, B), F, G, D we get orientation(D, midpoint(A, B), G) == orientation(F, G, midpoint(A, B)) mod 360, orientation(D, midpoint(A, B), F) == orientation(F, G, midpoint(A, B)) mod 360
By between_imply_not_between on B, midpoint(B, D), D we get collinear_and_not_between(D, B, midpoint(B, D))
By between_implies_orientation on C, A, midpoint(A, B), B we get orientation(A, midpoint(A, B), C) == orientation(B, C, midpoint(A, B)) mod 360, orientation(A, B, C) == orientation(A, midpoint(A, B), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), A, E, G we get 180 == 2 * direction(midpoint(A, B), A) - 2 * direction(E, G) mod 360
By collinear_and_not_between_implies_orientation on midpoint(A, B), F, A, D we get orientation(A, D, midpoint(A, B)) == orientation(A, F, midpoint(A, B)) mod 360
By collinear_and_not_between_implies_orientation on G, B, A, midpoint(A, B) we get orientation(A, B, G) == orientation(A, midpoint(A, B), G) mod 360
By collinear_and_not_between_implies_orientation on F, D, C, midpoint(C, D) we get orientation(C, D, F) == orientation(C, midpoint(C, D), F) mod 360
By perpendicular_direction_conditions_v0_r on E, center(e), midpoint(C, D), D we get 180 == 2 * direction(E, center(e)) - 2 * direction(midpoint(C, D), D) mod 360
By between_implies_orientation on midpoint(C, D), F, G, D we get orientation(D, midpoint(C, D), G) == orientation(F, G, midpoint(C, D)) mod 360, orientation(D, midpoint(C, D), F) == orientation(F, G, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), A, center(e), E we get 180 == 2 * direction(midpoint(A, B), A) - 2 * direction(center(e), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), B, E, center(e) we get 180 == 2 * direction(midpoint(A, B), B) - 2 * direction(E, center(e)) mod 360
By collinear_and_not_between_implies_orientation on midpoint(A, B), G, D, F we get orientation(D, F, midpoint(A, B)) == orientation(D, G, midpoint(A, B)) mod 360
By between_implies_orientation on F, D, midpoint(C, D), C we get orientation(C, F, midpoint(C, D)) == orientation(D, midpoint(C, D), F) mod 360, orientation(C, F, D) == orientation(D, midpoint(C, D), F) mod 360
By collinear_and_not_between_implies_orientation on C, A, B, midpoint(A, B) we get orientation(A, C, B) == orientation(B, midpoint(A, B), C) mod 360
By perpendicular_direction_conditions_v0_r on G, center(e), midpoint(C, D), D we get 180 == 2 * direction(G, center(e)) - 2 * direction(midpoint(C, D), D) mod 360
By collinear_and_not_between_implies_orientation on B, C, D, midpoint(C, D) we get orientation(B, D, C) == orientation(B, D, midpoint(C, D)) mod 360
By between_implies_orientation on midpoint(A, B), A, G, D we get orientation(A, G, midpoint(A, B)) == orientation(D, midpoint(A, B), G) mod 360, orientation(A, D, midpoint(A, B)) == orientation(A, G, midpoint(A, B)) mod 360
By collinear_and_not_between_implies_orientation on midpoint(A, B), A, D, G we get orientation(A, midpoint(A, B), D) == orientation(D, G, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), B, center(e), E we get 180 == 2 * direction(midpoint(A, B), B) - 2 * direction(center(e), E) mod 360
By between_implies_orientation on G, B, midpoint(A, B), A we get orientation(A, G, midpoint(A, B)) == orientation(B, midpoint(A, B), G) mod 360, orientation(A, G, B) == orientation(B, midpoint(A, B), G) mod 360
By between_implies_orientation on midpoint(A, B), C, G, B we get orientation(B, midpoint(A, B), G) == orientation(C, G, midpoint(A, B)) mod 360, orientation(B, midpoint(A, B), C) == orientation(C, G, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), A, E, center(e) we get 180 == 2 * direction(midpoint(A, B), A) - 2 * direction(E, center(e)) mod 360
By collinear_and_not_between_implies_orientation on midpoint(C, D), G, A, D we get orientation(A, D, midpoint(C, D)) == orientation(A, G, midpoint(C, D)) mod 360
By between_implies_orientation on midpoint(A, B), D, G, A we get orientation(A, midpoint(A, B), G) == orientation(D, G, midpoint(A, B)) mod 360, orientation(A, midpoint(A, B), D) == orientation(D, G, midpoint(A, B)) mod 360
By collinear_and_not_between_implies_orientation on H, midpoint(C, D), D, C we get orientation(C, H, D) == orientation(D, midpoint(C, D), H) mod 360
By between_implies_orientation on F, B, midpoint(A, B), A we get orientation(A, F, midpoint(A, B)) == orientation(B, midpoint(A, B), F) mod 360, orientation(A, F, B) == orientation(B, midpoint(A, B), F) mod 360
By perpendicular_direction_conditions_v0_r on E, G, midpoint(A, B), A we get 180 == 2 * direction(E, G) - 2 * direction(midpoint(A, B), A) mod 360
By between_implies_orientation on midpoint(A, B), A, F, D we get orientation(A, F, midpoint(A, B)) == orientation(D, midpoint(A, B), F) mod 360, orientation(A, D, midpoint(A, B)) == orientation(A, F, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), A, G, center(e) we get 180 == 2 * direction(midpoint(A, B), A) - 2 * direction(G, center(e)) mod 360
By collinear_and_not_between_implies_orientation on midpoint(C, D), F, G, A we get orientation(A, midpoint(C, D), G) == orientation(F, midpoint(C, D), G) mod 360
By between_implies_orientation on E, B, midpoint(A, B), A we get orientation(A, E, midpoint(A, B)) == orientation(B, midpoint(A, B), E) mod 360, orientation(A, E, B) == orientation(B, midpoint(A, B), E) mod 360
By projection_definition on C, midpoint(C, D), Line(E, G) we get midpoint(C, D) == projection(C, Line(E, G))
By projection_definition on B, midpoint(A, B), Line(E, G) we get midpoint(A, B) == projection(B, Line(E, G))
By between_implies_orientation on F, A, midpoint(A, B), B we get orientation(A, midpoint(A, B), F) == orientation(B, F, midpoint(A, B)) mod 360, orientation(A, B, F) == orientation(A, midpoint(A, B), F) mod 360
By collinear_and_not_between_implies_orientation on E, midpoint(A, B), A, B we get orientation(A, B, E) == orientation(A, midpoint(A, B), E) mod 360
By between_implies_orientation on A, D, midpoint(C, D), C we get orientation(A, D, midpoint(C, D)) == orientation(A, midpoint(C, D), C) mod 360, orientation(A, D, C) == orientation(A, D, midpoint(C, D)) mod 360
By collinear_and_not_between_implies_orientation on midpoint(C, D), G, B, C we get orientation(B, C, midpoint(C, D)) == orientation(B, G, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on center(e), E, midpoint(A, B), A we get 180 == 2 * direction(center(e), E) - 2 * direction(midpoint(A, B), A) mod 360
By between_imply_not_between on C, midpoint(A, C), A we get collinear_and_not_between(A, C, midpoint(A, C))
By perpendicular_direction_conditions_v0_r on midpoint(C, D), C, E, G we get 180 == 2 * direction(midpoint(C, D), C) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on G, E, midpoint(A, B), A we get 180 == 2 * direction(G, E) - 2 * direction(midpoint(A, B), A) mod 360
By collinear_and_not_between_implies_orientation on midpoint(C, D), A, D, F we get orientation(A, midpoint(C, D), D) == orientation(D, F, midpoint(C, D)) mod 360
By between_implies_orientation on midpoint(C, D), G, F, A we get orientation(A, midpoint(C, D), F) == orientation(F, midpoint(C, D), G) mod 360, orientation(A, midpoint(C, D), G) == orientation(F, midpoint(C, D), G) mod 360
By projection_definition on G, midpoint(A, B), f we get midpoint(A, B) == projection(G, f)
By between_implies_orientation on G, D, midpoint(C, D), C we get orientation(C, G, midpoint(C, D)) == orientation(D, midpoint(C, D), G) mod 360, orientation(C, G, D) == orientation(D, midpoint(C, D), G) mod 360
By between_implies_orientation on midpoint(A, B), D, F, A we get orientation(A, midpoint(A, B), F) == orientation(D, F, midpoint(A, B)) mod 360, orientation(A, midpoint(A, B), D) == orientation(D, F, midpoint(A, B)) mod 360
By between_implies_orientation on G, A, midpoint(A, B), B we get orientation(A, midpoint(A, B), G) == orientation(B, G, midpoint(A, B)) mod 360, orientation(A, B, G) == orientation(A, midpoint(A, B), G) mod 360
By between_implies_orientation on midpoint(C, D), D, F, A we get orientation(A, midpoint(C, D), F) == orientation(D, F, midpoint(C, D)) mod 360, orientation(A, midpoint(C, D), D) == orientation(D, F, midpoint(C, D)) mod 360
By projection_definition on D, midpoint(C, D), Line(E, G) we get midpoint(C, D) == projection(D, Line(E, G))
By between_implies_orientation on H, A, midpoint(A, B), B we get orientation(A, midpoint(A, B), H) == orientation(B, H, midpoint(A, B)) mod 360, orientation(A, B, H) == orientation(A, midpoint(A, B), H) mod 360
By between_implies_orientation on midpoint(A, B), B, G, C we get orientation(B, G, midpoint(A, B)) == orientation(C, midpoint(A, B), G) mod 360, orientation(B, C, midpoint(A, B)) == orientation(B, G, midpoint(A, B)) mod 360
By between_implies_orientation on C, B, midpoint(A, B), A we get orientation(A, C, midpoint(A, B)) == orientation(B, midpoint(A, B), C) mod 360, orientation(A, C, B) == orientation(B, midpoint(A, B), C) mod 360
By between_implies_orientation on G, C, midpoint(C, D), D we get orientation(C, midpoint(C, D), G) == orientation(D, G, midpoint(C, D)) mod 360, orientation(C, D, G) == orientation(C, midpoint(C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), B, center(e), G we get 180 == 2 * direction(midpoint(A, B), B) - 2 * direction(center(e), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), C, center(e), E we get 180 == 2 * direction(midpoint(C, D), C) - 2 * direction(center(e), E) mod 360
By between_implies_orientation on midpoint(A, B), A, F, G we get orientation(A, F, midpoint(A, B)) == orientation(F, G, midpoint(A, B)) mod 360, orientation(A, F, midpoint(A, B)) == orientation(A, G, midpoint(A, B)) mod 360
By between_implies_orientation on F, C, midpoint(C, D), D we get orientation(C, midpoint(C, D), F) == orientation(D, F, midpoint(C, D)) mod 360, orientation(C, D, F) == orientation(C, midpoint(C, D), F) mod 360
By perpendicular_direction_conditions_v0_r on G, center(e), midpoint(A, B), A we get 180 == 2 * direction(G, center(e)) - 2 * direction(midpoint(A, B), A) mod 360
By projection_definition on E, midpoint(C, D), h we get midpoint(C, D) == projection(E, h)
By collinear_and_not_between_implies_orientation on E, midpoint(C, D), C, D we get orientation(C, D, E) == orientation(C, midpoint(C, D), E) mod 360
By perpendicular_direction_conditions_v0_r on E, G, midpoint(C, D), C we get 180 == 2 * direction(E, G) - 2 * direction(midpoint(C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on E, center(e), midpoint(C, D), C we get 180 == 2 * direction(E, center(e)) - 2 * direction(midpoint(C, D), C) mod 360
By between_implies_orientation on midpoint(A, B), D, G, F we get orientation(D, G, midpoint(A, B)) == orientation(F, midpoint(A, B), G) mod 360, orientation(D, F, midpoint(A, B)) == orientation(D, G, midpoint(A, B)) mod 360
By between_implies_orientation on E, C, midpoint(C, D), D we get orientation(C, midpoint(C, D), E) == orientation(D, E, midpoint(C, D)) mod 360, orientation(C, D, E) == orientation(C, midpoint(C, D), E) mod 360
By between_implies_orientation on B, D, midpoint(C, D), C we get orientation(B, D, midpoint(C, D)) == orientation(B, midpoint(C, D), C) mod 360, orientation(B, D, C) == orientation(B, D, midpoint(C, D)) mod 360
By between_implies_orientation on midpoint(C, D), A, F, G we get orientation(A, F, midpoint(C, D)) == orientation(F, G, midpoint(C, D)) mod 360, orientation(A, F, midpoint(C, D)) == orientation(A, G, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), C, center(e), G we get 180 == 2 * direction(midpoint(C, D), C) - 2 * direction(center(e), G) mod 360
By perpendicular_direction_conditions_v0_r on E, G, midpoint(A, B), B we get 180 == 2 * direction(E, G) - 2 * direction(midpoint(A, B), B) mod 360
By perpendicular_direction_conditions_v0_r on center(e), E, midpoint(A, B), B we get 180 == 2 * direction(center(e), E) - 2 * direction(midpoint(A, B), B) mod 360
By between_implies_orientation on midpoint(C, D), C, G, B we get orientation(B, midpoint(C, D), G) == orientation(C, G, midpoint(C, D)) mod 360, orientation(B, midpoint(C, D), C) == orientation(C, G, midpoint(C, D)) mod 360
By projection_definition on E, midpoint(A, B), f we get midpoint(A, B) == projection(E, f)
By between_implies_orientation on midpoint(C, D), D, G, F we get orientation(D, G, midpoint(C, D)) == orientation(F, midpoint(C, D), G) mod 360, orientation(D, F, midpoint(C, D)) == orientation(D, G, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on center(e), G, midpoint(A, B), B we get 180 == 2 * direction(center(e), G) - 2 * direction(midpoint(A, B), B) mod 360
By between_implies_orientation on midpoint(C, D), A, G, D we get orientation(A, G, midpoint(C, D)) == orientation(D, midpoint(C, D), G) mod 360, orientation(A, D, midpoint(C, D)) == orientation(A, G, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), D, G, E we get 180 == 2 * direction(midpoint(C, D), D) - 2 * direction(G, E) mod 360
By between_implies_orientation on H, D, midpoint(C, D), C we get orientation(C, H, midpoint(C, D)) == orientation(D, midpoint(C, D), H) mod 360, orientation(C, H, D) == orientation(D, midpoint(C, D), H) mod 360
By between_implies_orientation on midpoint(C, D), B, G, C we get orientation(B, G, midpoint(C, D)) == orientation(C, midpoint(C, D), G) mod 360, orientation(B, C, midpoint(C, D)) == orientation(B, G, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on E, center(e), midpoint(A, B), A we get 180 == 2 * direction(E, center(e)) - 2 * direction(midpoint(A, B), A) mod 360
By perpendicular_direction_conditions_v0_r on G, E, midpoint(C, D), C we get 180 == 2 * direction(G, E) - 2 * direction(midpoint(C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on E, G, midpoint(C, D), D we get 180 == 2 * direction(E, G) - 2 * direction(midpoint(C, D), D) mod 360
By between_implies_orientation on E, A, midpoint(A, B), B we get orientation(A, midpoint(A, B), E) == orientation(B, E, midpoint(A, B)) mod 360, orientation(A, B, E) == orientation(A, midpoint(A, B), E) mod 360
By perpendicular_direction_conditions_v0_r on E, center(e), midpoint(A, B), B we get 180 == 2 * direction(E, center(e)) - 2 * direction(midpoint(A, B), B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), D, E, center(e) we get 180 == 2 * direction(midpoint(C, D), D) - 2 * direction(E, center(e)) mod 360
By perpendicular_direction_conditions_v0_r on G, center(e), midpoint(A, B), B we get 180 == 2 * direction(G, center(e)) - 2 * direction(midpoint(A, B), B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), D, E, G we get 180 == 2 * direction(midpoint(C, D), D) - 2 * direction(E, G) mod 360
By between_implies_orientation on D, B, midpoint(A, B), A we get orientation(A, D, midpoint(A, B)) == orientation(B, midpoint(A, B), D) mod 360, orientation(A, D, B) == orientation(B, midpoint(A, B), D) mod 360
By between_implies_orientation on midpoint(C, D), A, F, D we get orientation(A, F, midpoint(C, D)) == orientation(D, midpoint(C, D), F) mod 360, orientation(A, D, midpoint(C, D)) == orientation(A, F, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), A, center(e), G we get 180 == 2 * direction(midpoint(A, B), A) - 2 * direction(center(e), G) mod 360
By between_imply_not_between on D, midpoint(B, D), B we get collinear_and_not_between(B, D, midpoint(B, D))
By parallel_line_definition on midpoint(C, D), h, f we get h == parallel_line(midpoint(C, D), f)
By between_imply_not_between on A, midpoint(A, C), C we get collinear_and_not_between(C, A, midpoint(A, C))
By parallel_line_definition on B, f, altitude(F, E, G) we get f == parallel_line(B, altitude(F, E, G))
By parallel_line_definition on F, altitude(F, E, G), f we get altitude(F, E, G) == parallel_line(F, f)
By parallel_line_definition on F, altitude(F, E, G), h we get altitude(F, E, G) == parallel_line(F, h)
By parallel_line_definition on midpoint(C, D), h, altitude(F, E, G) we get h == parallel_line(midpoint(C, D), altitude(F, E, G))
By parallel_line_definition on line_intersection(Line(E, G), altitude(F, E, G)), altitude(F, E, G), f we get altitude(F, E, G) == parallel_line(line_intersection(Line(E, G), altitude(F, E, G)), f)
By parallel_line_definition on C, h, altitude(F, E, G) we get h == parallel_line(C, altitude(F, E, G))
By parallel_line_definition on midpoint(A, B), f, altitude(F, E, G) we get f == parallel_line(midpoint(A, B), altitude(F, E, G))
By parallel_line_definition on A, f, altitude(F, E, G) we get f == parallel_line(A, altitude(F, E, G))
By parallel_line_definition on midpoint(A, B), f, h we get f == parallel_line(midpoint(A, B), h)
By parallel_line_definition on D, h, altitude(F, E, G) we get h == parallel_line(D, altitude(F, E, G))
By parallel_line_definition on line_intersection(Line(E, G), altitude(F, E, G)), altitude(F, E, G), h we get altitude(F, E, G) == parallel_line(line_intersection(Line(E, G), altitude(F, E, G)), h)
By different_points_v1 on G, midpoint(C, D) we get 0 != distance(G, midpoint(C, D))
By perpendicular_direction_conditions_v0_r on midpoint(A, B), G, midpoint(C, D), C we get 180 == 2 * direction(midpoint(A, B), G) - 2 * direction(midpoint(C, D), C) mod 360
By different_points_v1 on midpoint(A, B), G we get 0 != distance(G, midpoint(A, B))
By perpendicular_direction_conditions_v0_r on D, C, E, midpoint(A, B) we get 180 == 2 * direction(D, C) - 2 * direction(E, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(A, B), E, midpoint(C, D) we get 180 == 2 * direction(B, midpoint(A, B)) - 2 * direction(E, midpoint(C, D)) mod 360
By different_points_v1 on midpoint(C, D), E we get 0 != distance(E, midpoint(C, D))
By perpendicular_direction_conditions_v0_r on E, midpoint(A, B), midpoint(A, B), B we get 180 == 2 * direction(E, midpoint(A, B)) - 2 * direction(midpoint(A, B), B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), G, C, midpoint(C, D) we get 180 == 2 * direction(midpoint(A, B), G) - 2 * direction(C, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(C, D), B, midpoint(A, B) we get 180 == 2 * direction(G, midpoint(C, D)) - 2 * direction(B, midpoint(A, B)) mod 360
By different_points_v1 on midpoint(A, B), E we get 0 != distance(E, midpoint(A, B))
By perpendicular_direction_conditions_v0_r on A, midpoint(A, B), midpoint(C, D), G we get 180 == 2 * direction(A, midpoint(A, B)) - 2 * direction(midpoint(C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), D, E, midpoint(A, B) we get 180 == 2 * direction(midpoint(C, D), D) - 2 * direction(E, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on A, B, G, midpoint(A, B) we get 180 == 2 * direction(A, B) - 2 * direction(G, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), B, midpoint(A, B), E we get 180 == 2 * direction(midpoint(A, B), B) - 2 * direction(midpoint(A, B), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), E, C, midpoint(C, D) we get 180 == 2 * direction(midpoint(A, B), E) - 2 * direction(C, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(C, D), midpoint(A, B), B we get 180 == 2 * direction(E, midpoint(C, D)) - 2 * direction(midpoint(A, B), B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), E, A, B we get 180 == 2 * direction(midpoint(C, D), E) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(C, D), B, A we get 180 == 2 * direction(E, midpoint(C, D)) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(C, D), A, B we get 180 == 2 * direction(G, midpoint(C, D)) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), A, midpoint(C, D), E we get 180 == 2 * direction(midpoint(A, B), A) - 2 * direction(midpoint(C, D), E) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(A, B), A, midpoint(A, B) we get 180 == 2 * direction(E, midpoint(A, B)) - 2 * direction(A, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on A, B, midpoint(C, D), E we get 180 == 2 * direction(A, B) - 2 * direction(midpoint(C, D), E) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(A, B), A, midpoint(A, B) we get 180 == 2 * direction(G, midpoint(A, B)) - 2 * direction(A, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), E, A, B we get 180 == 2 * direction(midpoint(A, B), E) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on B, A, midpoint(C, D), E we get 180 == 2 * direction(B, A) - 2 * direction(midpoint(C, D), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), E, B, A we get 180 == 2 * direction(midpoint(C, D), E) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), B, E, midpoint(A, B) we get 180 == 2 * direction(midpoint(A, B), B) - 2 * direction(E, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), D, midpoint(C, D), G we get 180 == 2 * direction(midpoint(C, D), D) - 2 * direction(midpoint(C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(A, B), midpoint(C, D), D we get 180 == 2 * direction(G, midpoint(A, B)) - 2 * direction(midpoint(C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), C, G, midpoint(A, B) we get 180 == 2 * direction(midpoint(C, D), C) - 2 * direction(G, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), C, midpoint(C, D), G we get 180 == 2 * direction(midpoint(C, D), C) - 2 * direction(midpoint(C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(C, D), midpoint(C, D), G we get 180 == 2 * direction(C, midpoint(C, D)) - 2 * direction(midpoint(C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(C, D), midpoint(A, B), A we get 180 == 2 * direction(G, midpoint(C, D)) - 2 * direction(midpoint(A, B), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), E, midpoint(C, D), C we get 180 == 2 * direction(midpoint(C, D), E) - 2 * direction(midpoint(C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on B, A, G, midpoint(A, B) we get 180 == 2 * direction(B, A) - 2 * direction(G, midpoint(A, B)) mod 360
By in_imply_collinear on line_intersection(Line(E, G), altitude(F, E, G)), midpoint(A, B), G we get collinear(G, midpoint(A, B), line_intersection(Line(E, G), altitude(F, E, G)))
By perpendicular_direction_conditions_v0_r on midpoint(A, B), G, A, midpoint(A, B) we get 180 == 2 * direction(midpoint(A, B), G) - 2 * direction(A, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), G, midpoint(C, D), C we get 180 == 2 * direction(midpoint(C, D), G) - 2 * direction(midpoint(C, D), C) mod 360
By orthocenter_concurrency on E, A, G we get orthocenter(A, E, G) in altitude(E, A, G), orthocenter(A, E, G) in altitude(A, E, G), orthocenter(A, E, G) in altitude(G, A, E)
By perpendicular_direction_conditions_v0_r on E, midpoint(C, D), midpoint(A, B), A we get 180 == 2 * direction(E, midpoint(C, D)) - 2 * direction(midpoint(A, B), A) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(A, B), midpoint(A, B), E we get 180 == 2 * direction(A, midpoint(A, B)) - 2 * direction(midpoint(A, B), E) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(C, D), midpoint(C, D), D we get 180 == 2 * direction(E, midpoint(C, D)) - 2 * direction(midpoint(C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on D, C, G, midpoint(C, D) we get 180 == 2 * direction(D, C) - 2 * direction(G, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), G, midpoint(A, B), B we get 180 == 2 * direction(midpoint(A, B), G) - 2 * direction(midpoint(A, B), B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), E, midpoint(C, D), C we get 180 == 2 * direction(midpoint(A, B), E) - 2 * direction(midpoint(C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), B, G, midpoint(A, B) we get 180 == 2 * direction(midpoint(A, B), B) - 2 * direction(G, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), E, B, A we get 180 == 2 * direction(midpoint(A, B), E) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(A, B), midpoint(A, B), B we get 180 == 2 * direction(G, midpoint(A, B)) - 2 * direction(midpoint(A, B), B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), G, B, A we get 180 == 2 * direction(midpoint(C, D), G) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), B, G, midpoint(C, D) we get 180 == 2 * direction(midpoint(A, B), B) - 2 * direction(G, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(C, D), midpoint(A, B), B we get 180 == 2 * direction(G, midpoint(C, D)) - 2 * direction(midpoint(A, B), B) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(C, D), G, midpoint(A, B) we get 180 == 2 * direction(C, midpoint(C, D)) - 2 * direction(G, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(A, B), midpoint(A, B), G we get 180 == 2 * direction(B, midpoint(A, B)) - 2 * direction(midpoint(A, B), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), D, G, midpoint(A, B) we get 180 == 2 * direction(midpoint(C, D), D) - 2 * direction(G, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), G, A, midpoint(A, B) we get 180 == 2 * direction(midpoint(C, D), G) - 2 * direction(A, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(C, D), B, A we get 180 == 2 * direction(G, midpoint(C, D)) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), G, midpoint(A, B), B we get 180 == 2 * direction(midpoint(C, D), G) - 2 * direction(midpoint(A, B), B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), G, B, midpoint(A, B) we get 180 == 2 * direction(midpoint(A, B), G) - 2 * direction(B, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), D, midpoint(C, D), E we get 180 == 2 * direction(midpoint(C, D), D) - 2 * direction(midpoint(C, D), E) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(C, D), G, midpoint(C, D) we get 180 == 2 * direction(C, midpoint(C, D)) - 2 * direction(G, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), A, midpoint(A, B), E we get 180 == 2 * direction(midpoint(A, B), A) - 2 * direction(midpoint(A, B), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), G, midpoint(A, B), A we get 180 == 2 * direction(midpoint(C, D), G) - 2 * direction(midpoint(A, B), A) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(A, B), midpoint(A, B), G we get 180 == 2 * direction(A, midpoint(A, B)) - 2 * direction(midpoint(A, B), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), E, midpoint(A, B), B we get 180 == 2 * direction(midpoint(C, D), E) - 2 * direction(midpoint(A, B), B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), C, E, midpoint(C, D) we get 180 == 2 * direction(midpoint(C, D), C) - 2 * direction(E, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(C, D), G, midpoint(A, B) we get 180 == 2 * direction(D, midpoint(C, D)) - 2 * direction(G, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), E, C, midpoint(C, D) we get 180 == 2 * direction(midpoint(C, D), E) - 2 * direction(C, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(C, D), midpoint(A, B), E we get 180 == 2 * direction(D, midpoint(C, D)) - 2 * direction(midpoint(A, B), E) mod 360
By perpendicular_direction_conditions_v0_r on B, A, midpoint(A, B), E we get 180 == 2 * direction(B, A) - 2 * direction(midpoint(A, B), E) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(A, B), C, midpoint(C, D) we get 180 == 2 * direction(E, midpoint(A, B)) - 2 * direction(C, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(A, B), B, A we get 180 == 2 * direction(G, midpoint(A, B)) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(C, D), C, midpoint(C, D) we get 180 == 2 * direction(G, midpoint(C, D)) - 2 * direction(C, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(C, D), E, midpoint(C, D) we get 180 == 2 * direction(C, midpoint(C, D)) - 2 * direction(E, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), G, C, D we get 180 == 2 * direction(midpoint(C, D), G) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(C, D), A, midpoint(A, B) we get 180 == 2 * direction(G, midpoint(C, D)) - 2 * direction(A, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), D, G, midpoint(C, D) we get 180 == 2 * direction(midpoint(C, D), D) - 2 * direction(G, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(C, D), midpoint(C, D), G we get 180 == 2 * direction(D, midpoint(C, D)) - 2 * direction(midpoint(C, D), G) mod 360
By projection_definition on E, H, Line(C, H) we get H == projection(E, Line(C, H))
By perpendicular_direction_conditions_v0_r on G, midpoint(A, B), A, B we get 180 == 2 * direction(G, midpoint(A, B)) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on B, A, G, midpoint(C, D) we get 180 == 2 * direction(B, A) - 2 * direction(G, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), C, G, midpoint(C, D) we get 180 == 2 * direction(midpoint(C, D), C) - 2 * direction(G, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(C, D), D, C we get 180 == 2 * direction(G, midpoint(C, D)) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(A, B), G, midpoint(C, D) we get 180 == 2 * direction(B, midpoint(A, B)) - 2 * direction(G, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on B, A, midpoint(A, B), G we get 180 == 2 * direction(B, A) - 2 * direction(midpoint(A, B), G) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(A, B), midpoint(C, D), E we get 180 == 2 * direction(A, midpoint(A, B)) - 2 * direction(midpoint(C, D), E) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(A, B), C, midpoint(C, D) we get 180 == 2 * direction(G, midpoint(A, B)) - 2 * direction(C, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(A, B), midpoint(A, B), A we get 180 == 2 * direction(G, midpoint(A, B)) - 2 * direction(midpoint(A, B), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), G, D, C we get 180 == 2 * direction(midpoint(A, B), G) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), A, G, midpoint(A, B) we get 180 == 2 * direction(midpoint(A, B), A) - 2 * direction(G, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(A, B), D, midpoint(C, D) we get 180 == 2 * direction(E, midpoint(A, B)) - 2 * direction(D, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), E, D, C we get 180 == 2 * direction(midpoint(C, D), E) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on B, A, E, midpoint(A, B) we get 180 == 2 * direction(B, A) - 2 * direction(E, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(A, B), midpoint(C, D), D we get 180 == 2 * direction(E, midpoint(A, B)) - 2 * direction(midpoint(C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(C, D), midpoint(C, D), D we get 180 == 2 * direction(G, midpoint(C, D)) - 2 * direction(midpoint(C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on A, B, E, midpoint(C, D) we get 180 == 2 * direction(A, B) - 2 * direction(E, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(A, B), midpoint(A, B), E we get 180 == 2 * direction(B, midpoint(A, B)) - 2 * direction(midpoint(A, B), E) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(A, B), A, B we get 180 == 2 * direction(E, midpoint(A, B)) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on C, D, E, midpoint(A, B) we get 180 == 2 * direction(C, D) - 2 * direction(E, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), G, D, midpoint(C, D) we get 180 == 2 * direction(midpoint(C, D), G) - 2 * direction(D, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), G, B, A we get 180 == 2 * direction(midpoint(A, B), G) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), E, D, midpoint(C, D) we get 180 == 2 * direction(midpoint(A, B), E) - 2 * direction(D, midpoint(C, D)) mod 360
By orthocenter_concurrency on D, E, G we get orthocenter(D, E, G) in altitude(D, E, G), orthocenter(D, E, G) in altitude(E, D, G), orthocenter(D, E, G) in altitude(G, D, E)
By perpendicular_direction_conditions_v0_r on midpoint(C, D), D, midpoint(A, B), E we get 180 == 2 * direction(midpoint(C, D), D) - 2 * direction(midpoint(A, B), E) mod 360
By perpendicular_direction_conditions_v0_r on C, D, midpoint(A, B), G we get 180 == 2 * direction(C, D) - 2 * direction(midpoint(A, B), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), E, B, midpoint(A, B) we get 180 == 2 * direction(midpoint(A, B), E) - 2 * direction(B, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(A, B), B, A we get 180 == 2 * direction(E, midpoint(A, B)) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on D, C, midpoint(A, B), E we get 180 == 2 * direction(D, C) - 2 * direction(midpoint(A, B), E) mod 360
By perpendicular_direction_conditions_v0_r on A, B, G, midpoint(C, D) we get 180 == 2 * direction(A, B) - 2 * direction(G, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(C, D), G, midpoint(C, D) we get 180 == 2 * direction(D, midpoint(C, D)) - 2 * direction(G, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(C, D), midpoint(A, B), E we get 180 == 2 * direction(C, midpoint(C, D)) - 2 * direction(midpoint(A, B), E) mod 360
By perpendicular_direction_conditions_v0_r on C, D, G, midpoint(C, D) we get 180 == 2 * direction(C, D) - 2 * direction(G, midpoint(C, D)) mod 360
By in_imply_collinear on center(d), E, midpoint(C, D) we get collinear(E, center(d), midpoint(C, D))
By perpendicular_direction_conditions_v0_r on midpoint(A, B), G, A, B we get 180 == 2 * direction(midpoint(A, B), G) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(A, B), C, D we get 180 == 2 * direction(G, midpoint(A, B)) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on B, A, E, midpoint(C, D) we get 180 == 2 * direction(B, A) - 2 * direction(E, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), B, E, midpoint(C, D) we get 180 == 2 * direction(midpoint(A, B), B) - 2 * direction(E, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(C, D), midpoint(C, D), E we get 180 == 2 * direction(D, midpoint(C, D)) - 2 * direction(midpoint(C, D), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), G, A, B we get 180 == 2 * direction(midpoint(C, D), G) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(A, B), E, midpoint(A, B) we get 180 == 2 * direction(A, midpoint(A, B)) - 2 * direction(E, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(C, D), E, midpoint(C, D) we get 180 == 2 * direction(D, midpoint(C, D)) - 2 * direction(E, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(C, D), D, midpoint(C, D) we get 180 == 2 * direction(E, midpoint(C, D)) - 2 * direction(D, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), C, midpoint(A, B), G we get 180 == 2 * direction(midpoint(C, D), C) - 2 * direction(midpoint(A, B), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), E, D, midpoint(C, D) we get 180 == 2 * direction(midpoint(C, D), E) - 2 * direction(D, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(C, D), D, midpoint(C, D) we get 180 == 2 * direction(G, midpoint(C, D)) - 2 * direction(D, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(C, D), midpoint(C, D), E we get 180 == 2 * direction(C, midpoint(C, D)) - 2 * direction(midpoint(C, D), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), E, C, D we get 180 == 2 * direction(midpoint(A, B), E) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on D, C, G, midpoint(A, B) we get 180 == 2 * direction(D, C) - 2 * direction(G, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), E, midpoint(A, B), A we get 180 == 2 * direction(midpoint(A, B), E) - 2 * direction(midpoint(A, B), A) mod 360
By in_imply_collinear on midpoint(A, B), E, center(e) we get collinear(E, center(e), midpoint(A, B))
By perpendicular_direction_conditions_v0_r on B, midpoint(A, B), midpoint(C, D), G we get 180 == 2 * direction(B, midpoint(A, B)) - 2 * direction(midpoint(C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(C, D), C, D we get 180 == 2 * direction(E, midpoint(C, D)) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), D, midpoint(A, B), G we get 180 == 2 * direction(midpoint(C, D), D) - 2 * direction(midpoint(A, B), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), G, B, midpoint(A, B) we get 180 == 2 * direction(midpoint(C, D), G) - 2 * direction(B, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(C, D), midpoint(A, B), G we get 180 == 2 * direction(C, midpoint(C, D)) - 2 * direction(midpoint(A, B), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), E, B, midpoint(A, B) we get 180 == 2 * direction(midpoint(C, D), E) - 2 * direction(B, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), C, E, midpoint(A, B) we get 180 == 2 * direction(midpoint(C, D), C) - 2 * direction(E, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on D, C, midpoint(C, D), E we get 180 == 2 * direction(D, C) - 2 * direction(midpoint(C, D), E) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(C, D), midpoint(C, D), C we get 180 == 2 * direction(G, midpoint(C, D)) - 2 * direction(midpoint(C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(A, B), D, C we get 180 == 2 * direction(E, midpoint(A, B)) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), A, midpoint(A, B), G we get 180 == 2 * direction(midpoint(A, B), A) - 2 * direction(midpoint(A, B), G) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(A, B), midpoint(C, D), C we get 180 == 2 * direction(G, midpoint(A, B)) - 2 * direction(midpoint(C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(A, B), E, midpoint(C, D) we get 180 == 2 * direction(A, midpoint(A, B)) - 2 * direction(E, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, D, midpoint(C, D), G we get 180 == 2 * direction(C, D) - 2 * direction(midpoint(C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on D, C, E, midpoint(C, D) we get 180 == 2 * direction(D, C) - 2 * direction(E, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), G, D, midpoint(C, D) we get 180 == 2 * direction(midpoint(A, B), G) - 2 * direction(D, midpoint(C, D)) mod 360
By orthocenter_concurrency on E, G, H we get orthocenter(E, G, H) in altitude(E, G, H), orthocenter(E, G, H) in altitude(G, E, H), orthocenter(E, G, H) in altitude(H, E, G)
By perpendicular_direction_conditions_v0_r on E, midpoint(A, B), C, D we get 180 == 2 * direction(E, midpoint(A, B)) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), E, C, D we get 180 == 2 * direction(midpoint(C, D), E) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(A, B), midpoint(A, B), A we get 180 == 2 * direction(E, midpoint(A, B)) - 2 * direction(midpoint(A, B), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), E, midpoint(C, D), D we get 180 == 2 * direction(midpoint(A, B), E) - 2 * direction(midpoint(C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(A, B), B, midpoint(A, B) we get 180 == 2 * direction(E, midpoint(A, B)) - 2 * direction(B, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on C, D, midpoint(A, B), E we get 180 == 2 * direction(C, D) - 2 * direction(midpoint(A, B), E) mod 360
By perpendicular_direction_conditions_v0_r on B, A, midpoint(C, D), G we get 180 == 2 * direction(B, A) - 2 * direction(midpoint(C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(C, D), C, D we get 180 == 2 * direction(G, midpoint(C, D)) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), B, midpoint(A, B), G we get 180 == 2 * direction(midpoint(A, B), B) - 2 * direction(midpoint(A, B), G) mod 360
By perpendicular_direction_conditions_v0_r on C, D, G, midpoint(A, B) we get 180 == 2 * direction(C, D) - 2 * direction(G, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), E, midpoint(A, B), A we get 180 == 2 * direction(midpoint(C, D), E) - 2 * direction(midpoint(A, B), A) mod 360
By perpendicular_direction_conditions_v0_r on C, D, E, midpoint(C, D) we get 180 == 2 * direction(C, D) - 2 * direction(E, midpoint(C, D)) mod 360
By projection_definition on C, H, Line(E, H) we get H == projection(C, Line(E, H))
By perpendicular_direction_conditions_v0_r on E, midpoint(C, D), B, midpoint(A, B) we get 180 == 2 * direction(E, midpoint(C, D)) - 2 * direction(B, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), E, A, midpoint(A, B) we get 180 == 2 * direction(midpoint(A, B), E) - 2 * direction(A, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on A, B, E, midpoint(A, B) we get 180 == 2 * direction(A, B) - 2 * direction(E, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(A, B), D, midpoint(C, D) we get 180 == 2 * direction(G, midpoint(A, B)) - 2 * direction(D, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(A, B), B, midpoint(A, B) we get 180 == 2 * direction(G, midpoint(A, B)) - 2 * direction(B, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(A, B), midpoint(C, D), C we get 180 == 2 * direction(E, midpoint(A, B)) - 2 * direction(midpoint(C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on A, B, midpoint(A, B), E we get 180 == 2 * direction(A, B) - 2 * direction(midpoint(A, B), E) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(A, B), E, midpoint(A, B) we get 180 == 2 * direction(B, midpoint(A, B)) - 2 * direction(E, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on A, B, midpoint(A, B), G we get 180 == 2 * direction(A, B) - 2 * direction(midpoint(A, B), G) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(A, B), midpoint(C, D), E we get 180 == 2 * direction(B, midpoint(A, B)) - 2 * direction(midpoint(C, D), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), G, C, midpoint(C, D) we get 180 == 2 * direction(midpoint(C, D), G) - 2 * direction(C, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), E, D, C we get 180 == 2 * direction(midpoint(A, B), E) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(A, B), G, midpoint(A, B) we get 180 == 2 * direction(A, midpoint(A, B)) - 2 * direction(G, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on A, B, midpoint(C, D), G we get 180 == 2 * direction(A, B) - 2 * direction(midpoint(C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(C, D), midpoint(A, B), G we get 180 == 2 * direction(D, midpoint(C, D)) - 2 * direction(midpoint(A, B), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), D, E, midpoint(C, D) we get 180 == 2 * direction(midpoint(C, D), D) - 2 * direction(E, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), E, midpoint(A, B), B we get 180 == 2 * direction(midpoint(A, B), E) - 2 * direction(midpoint(A, B), B) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(A, B), D, C we get 180 == 2 * direction(G, midpoint(A, B)) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(C, D), D, C we get 180 == 2 * direction(E, midpoint(C, D)) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), G, midpoint(A, B), A we get 180 == 2 * direction(midpoint(A, B), G) - 2 * direction(midpoint(A, B), A) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(C, D), A, B we get 180 == 2 * direction(E, midpoint(C, D)) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), A, midpoint(C, D), G we get 180 == 2 * direction(midpoint(A, B), A) - 2 * direction(midpoint(C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(A, B), G, midpoint(C, D) we get 180 == 2 * direction(A, midpoint(A, B)) - 2 * direction(G, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), E, midpoint(C, D), D we get 180 == 2 * direction(midpoint(C, D), E) - 2 * direction(midpoint(C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(C, D), E, midpoint(A, B) we get 180 == 2 * direction(C, midpoint(C, D)) - 2 * direction(E, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), G, C, D we get 180 == 2 * direction(midpoint(A, B), G) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), G, D, C we get 180 == 2 * direction(midpoint(C, D), G) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), B, midpoint(C, D), G we get 180 == 2 * direction(midpoint(A, B), B) - 2 * direction(midpoint(C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(C, D), midpoint(C, D), C we get 180 == 2 * direction(E, midpoint(C, D)) - 2 * direction(midpoint(C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), A, E, midpoint(A, B) we get 180 == 2 * direction(midpoint(A, B), A) - 2 * direction(E, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(C, D), E, midpoint(A, B) we get 180 == 2 * direction(D, midpoint(C, D)) - 2 * direction(E, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), E, A, midpoint(A, B) we get 180 == 2 * direction(midpoint(C, D), E) - 2 * direction(A, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(C, D), C, midpoint(C, D) we get 180 == 2 * direction(E, midpoint(C, D)) - 2 * direction(C, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, C, midpoint(C, D), G we get 180 == 2 * direction(D, C) - 2 * direction(midpoint(C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), C, midpoint(C, D), E we get 180 == 2 * direction(midpoint(C, D), C) - 2 * direction(midpoint(C, D), E) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(C, D), A, midpoint(A, B) we get 180 == 2 * direction(E, midpoint(C, D)) - 2 * direction(A, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on D, C, midpoint(A, B), G we get 180 == 2 * direction(D, C) - 2 * direction(midpoint(A, B), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), B, midpoint(C, D), E we get 180 == 2 * direction(midpoint(A, B), B) - 2 * direction(midpoint(C, D), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), A, G, midpoint(C, D) we get 180 == 2 * direction(midpoint(A, B), A) - 2 * direction(G, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(A, B), G, midpoint(A, B) we get 180 == 2 * direction(B, midpoint(A, B)) - 2 * direction(G, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), G, midpoint(C, D), D we get 180 == 2 * direction(midpoint(A, B), G) - 2 * direction(midpoint(C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on C, D, midpoint(C, D), E we get 180 == 2 * direction(C, D) - 2 * direction(midpoint(C, D), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), A, E, midpoint(C, D) we get 180 == 2 * direction(midpoint(A, B), A) - 2 * direction(E, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), C, midpoint(A, B), E we get 180 == 2 * direction(midpoint(C, D), C) - 2 * direction(midpoint(A, B), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), G, midpoint(C, D), D we get 180 == 2 * direction(midpoint(C, D), G) - 2 * direction(midpoint(C, D), D) mod 360
By in_imply_collinear on center(e), E, midpoint(C, D) we get collinear(E, center(e), midpoint(C, D))
By in_imply_collinear on midpoint(C, D), G, center(e) we get collinear(G, center(e), midpoint(C, D))
By in_imply_collinear on line_intersection(Line(E, G), altitude(F, E, G)), E, center(e) we get collinear(E, center(e), line_intersection(Line(E, G), altitude(F, E, G)))
By not_in_line_equivalent_to_not_collinear_v0 on G, midpoint(C, D), D we get not_collinear(D, G, midpoint(C, D)), exists(Line(D, midpoint(C, D)))
By in_imply_collinear on midpoint(C, D), G, midpoint(A, B) we get collinear(G, midpoint(A, B), midpoint(C, D))
By in_imply_collinear on midpoint(A, B), G, center(e) we get collinear(G, center(e), midpoint(A, B))
By in_imply_collinear on midpoint(C, D), E, midpoint(A, B) we get collinear(E, midpoint(A, B), midpoint(C, D))
By in_imply_collinear on center(d), midpoint(A, B), E we get collinear(E, center(d), midpoint(A, B))
By in_imply_collinear on line_intersection(Line(E, G), altitude(F, E, G)), E, midpoint(A, B) we get collinear(E, midpoint(A, B), line_intersection(Line(E, G), altitude(F, E, G)))
By in_imply_collinear on line_intersection(Line(D, E), altitude(F, D, E)), E, D we get collinear(D, E, line_intersection(Line(D, E), altitude(F, D, E)))
By in_imply_collinear on line_intersection(Line(E, G), altitude(F, E, G)), midpoint(C, D), E we get collinear(E, midpoint(C, D), line_intersection(Line(E, G), altitude(F, E, G)))
By in_imply_collinear on center(d), E, center(e) we get collinear(E, center(d), center(e))
By not_in_line_equivalent_to_not_collinear_v0 on D, midpoint(C, D), E we get not_collinear(D, E, midpoint(C, D)), exists(Line(E, midpoint(C, D)))
By not_in_line_equivalent_to_not_collinear_v0 on A, midpoint(C, D), D we get not_collinear(A, D, midpoint(C, D)), exists(Line(D, midpoint(C, D)))
By in_imply_collinear on line_intersection(Line(A, E), altitude(F, A, E)), A, E we get collinear(A, E, line_intersection(Line(A, E), altitude(F, A, E)))
By in_imply_collinear on center(d), G, E we get collinear(E, G, center(d))
By external_angle_bisector_definition_v0 on F, center(e), C, G we get 180 == angle(F, G, center(e)) + angle(C, G, center(e)) mod 360
By in_imply_collinear on center(d), G, center(e) we get collinear(G, center(d), center(e))
By not_in_line_equivalent_to_not_collinear_v0 on B, midpoint(C, D), E we get not_collinear(B, E, midpoint(C, D)), exists(Line(E, midpoint(C, D)))
By point_on_perpendicular_bisector on D, C, line_intersection(Line(E, G), altitude(F, E, G)), Line(E, G) we get distance(C, line_intersection(Line(E, G), altitude(F, E, G))) == distance(D, line_intersection(Line(E, G), altitude(F, E, G)))
By in_imply_collinear on line_intersection(Line(E, G), altitude(F, E, G)), G, midpoint(C, D) we get collinear(G, midpoint(C, D), line_intersection(Line(E, G), altitude(F, E, G)))
By in_imply_collinear on line_intersection(Line(E, G), altitude(F, E, G)), E, G we get collinear(E, G, line_intersection(Line(E, G), altitude(F, E, G)))
By external_angle_bisector_definition_v0 on B, center(e), D, G we get 180 == angle(B, G, center(e)) + angle(D, G, center(e)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on H, G, midpoint(C, D) we get not_collinear(G, H, midpoint(C, D)), exists(Line(G, midpoint(C, D)))
By in_imply_collinear on center(d), G, midpoint(A, B) we get collinear(G, center(d), midpoint(A, B))
By in_imply_collinear on center(d), midpoint(C, D), G we get collinear(G, center(d), midpoint(C, D))
By internal_angle_bisector_definition_v0 on F, center(e), B, G we get angle(F, G, center(e)) == angle(center(e), G, B) mod 360
By in_imply_collinear on line_intersection(Line(E, G), altitude(F, E, G)), G, center(e) we get collinear(G, center(e), line_intersection(Line(E, G), altitude(F, E, G)))
By not_in_line_equivalent_to_not_collinear_v0 on D, midpoint(A, B), A we get not_collinear(A, D, midpoint(A, B)), exists(Line(A, midpoint(A, B)))
By line_inequality on perpendicular_bisector(A, C), h, E we get h != perpendicular_bisector(A, C)
By not_in_line_equivalent_to_not_collinear_v0 on C, center(e), E we get not_collinear(C, E, center(e)), exists(Line(E, center(e)))
By line_inequality on perpendicular_bisector(B, D), Line(C, F), E we get Line(C, F) != perpendicular_bisector(B, D)
By line_inequality on perpendicular_bisector(A, C), Line(B, D), E we get Line(B, D) != perpendicular_bisector(A, C)
By reverse_direction on D, midpoint(C, D) we get 180 == direction(D, midpoint(C, D)) - direction(midpoint(C, D), D) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on A, center(e), E we get not_collinear(A, E, center(e)), exists(Line(E, center(e)))
By line_circle_intersection_has_at_most_two_points_0 on G, F, A, Circle(C, F, G) we get A not in Circle(C, F, G)
By not_in_line_equivalent_to_not_collinear_v0 on F, midpoint(A, B), G we get not_collinear(F, G, midpoint(A, B)), exists(Line(G, midpoint(A, B)))
By not_in_line_equivalent_to_not_collinear_v0 on C, G, midpoint(C, D) we get not_collinear(C, G, midpoint(C, D)), exists(Line(G, midpoint(C, D)))
By not_in_line_equivalent_to_not_collinear_v0 on D, E, center(e) we get not_collinear(D, E, center(e)), exists(Line(E, center(e)))
By not_in_line_equivalent_to_not_collinear_v0 on F, C, midpoint(C, D) we get not_collinear(C, F, midpoint(C, D)), exists(Line(C, midpoint(C, D)))
By internal_angle_bisector_definition_v0 on B, center(e), A, G we get angle(B, G, center(e)) == angle(center(e), G, A) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on C, A, midpoint(A, B) we get not_collinear(A, C, midpoint(A, B)), exists(Line(A, midpoint(A, B)))
By not_in_line_equivalent_to_not_collinear_v0 on H, D, midpoint(C, D) we get not_collinear(D, H, midpoint(C, D)), exists(Line(D, midpoint(C, D)))
By not_in_line_equivalent_to_not_collinear_v0 on H, C, midpoint(C, D) we get not_collinear(C, H, midpoint(C, D)), exists(Line(C, midpoint(C, D)))
By external_angle_bisector_definition_v0 on A, center(e), C, G we get 180 == angle(A, G, center(e)) + angle(C, G, center(e)) mod 360
By internal_angle_bisector_definition_v0 on C, center(e), D, E we get angle(C, E, center(e)) == angle(center(e), E, D) mod 360
By point_on_perpendicular_bisector on D, C, center(e), Line(E, G) we get distance(C, center(e)) == distance(D, center(e))
By internal_angle_bisector_definition_v0 on D, center(e), C, G we get angle(D, G, center(e)) == angle(center(e), G, C) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on H, E, center(e) we get not_collinear(E, H, center(e)), exists(Line(E, center(e)))
By line_containment_inequality on line_intersection(Line(D, E), altitude(F, D, E)), C, Line(D, E) we get C != line_intersection(Line(D, E), altitude(F, D, E))
By not_in_line_equivalent_to_not_collinear_v0 on C, E, midpoint(C, D) we get not_collinear(C, E, midpoint(C, D)), exists(Line(E, midpoint(C, D)))
By not_in_line_equivalent_to_not_collinear_v0 on A, E, midpoint(A, B) we get not_collinear(A, E, midpoint(A, B)), exists(Line(E, midpoint(A, B)))
By not_in_line_equivalent_to_not_collinear_v0 on C, G, midpoint(A, B) we get not_collinear(C, G, midpoint(A, B)), exists(Line(G, midpoint(A, B)))
By not_in_line_equivalent_to_not_collinear_v0 on F, B, midpoint(A, B) we get not_collinear(B, F, midpoint(A, B)), exists(Line(B, midpoint(A, B)))
By not_in_line_equivalent_to_not_collinear_v0 on F, E, midpoint(C, D) we get not_collinear(E, F, midpoint(C, D)), exists(Line(E, midpoint(C, D)))
By line_containment_inequality on line_intersection(Line(A, E), altitude(F, A, E)), H, Line(A, E) we get H != line_intersection(Line(A, E), altitude(F, A, E))
By internal_angle_bisector_definition_v0 on A, center(e), B, E we get angle(A, E, center(e)) == angle(center(e), E, B) mod 360
By point_on_perpendicular_bisector on B, A, line_intersection(Line(E, G), altitude(F, E, G)), Line(E, G) we get distance(A, line_intersection(Line(E, G), altitude(F, E, G))) == distance(B, line_intersection(Line(E, G), altitude(F, E, G)))
By double_perpendicular_and_parallel_v0 on Line(G, H), Line(E, H), Line(C, H) we get parallel(Line(C, H), Line(G, H))
By not_in_line_equivalent_to_not_collinear_v0 on C, center(e), G we get not_collinear(C, G, center(e)), exists(Line(G, center(e)))
By reverse_direction on midpoint(A, B), A we get 180 == direction(midpoint(A, B), A) - direction(A, midpoint(A, B)) mod 360
By point_on_perpendicular_bisector on A, B, center(d), Line(E, G) we get distance(A, center(d)) == distance(B, center(d))
By internal_angle_bisector_definition_v0 on B, center(e), F, G we get angle(B, G, center(e)) == angle(center(e), G, F) mod 360
By reverse_direction on midpoint(A, B), B we get 180 == direction(midpoint(A, B), B) - direction(B, midpoint(A, B)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on F, A, midpoint(A, B) we get not_collinear(A, F, midpoint(A, B)), exists(Line(A, midpoint(A, B)))
By not_in_line_equivalent_to_not_collinear_v0 on C, B, midpoint(A, B) we get not_collinear(B, C, midpoint(A, B)), exists(Line(B, midpoint(A, B)))
By internal_angle_bisector_definition_v0 on C, center(e), D, G we get angle(C, G, center(e)) == angle(center(e), G, D) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on F, E, midpoint(A, B) we get not_collinear(E, F, midpoint(A, B)), exists(Line(E, midpoint(A, B)))
By reverse_direction on C, midpoint(C, D) we get 180 == direction(C, midpoint(C, D)) - direction(midpoint(C, D), C) mod 360
By internal_angle_bisector_definition_v0 on D, center(e), C, E we get angle(D, E, center(e)) == angle(center(e), E, C) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on G, midpoint(A, B), A we get not_collinear(A, G, midpoint(A, B)), exists(Line(A, midpoint(A, B)))
By perpendicular_angle_conditions_v0 on C, H, E we get angle(C, H, E) == orientation(C, H, E) mod 360
By line_inequality on perpendicular_bisector(B, D), Line(B, D), E we get Line(B, D) != perpendicular_bisector(B, D)
By not_in_line_equivalent_to_not_collinear_v0 on B, E, center(e) we get not_collinear(B, E, center(e)), exists(Line(E, center(e)))
By not_in_line_equivalent_to_not_collinear_v0 on F, G, center(e) we get not_collinear(F, G, center(e)), exists(Line(G, center(e)))
By not_in_line_equivalent_to_not_collinear_v0 on G, B, midpoint(A, B) we get not_collinear(B, G, midpoint(A, B)), exists(Line(B, midpoint(A, B)))
By reverse_direction on midpoint(C, D), D we get 180 == direction(midpoint(C, D), D) - direction(D, midpoint(C, D)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on B, midpoint(C, D), G we get not_collinear(B, G, midpoint(C, D)), exists(Line(G, midpoint(C, D)))
By line_inequality on perpendicular_bisector(B, D), Line(C, H), E we get Line(C, H) != perpendicular_bisector(B, D)
By reverse_direction on midpoint(C, D), C we get 180 == direction(midpoint(C, D), C) - direction(C, midpoint(C, D)) mod 360
By reverse_direction on B, midpoint(A, B) we get 180 == direction(B, midpoint(A, B)) - direction(midpoint(A, B), B) mod 360
By line_inequality on perpendicular_bisector(B, D), g, E we get g != perpendicular_bisector(B, D)
By not_in_line_equivalent_to_not_collinear_v0 on E, midpoint(A, B), B we get not_collinear(B, E, midpoint(A, B)), exists(Line(B, midpoint(A, B)))
By not_in_line_equivalent_to_not_collinear_v0 on D, midpoint(A, B), G we get not_collinear(D, G, midpoint(A, B)), exists(Line(G, midpoint(A, B)))
By not_in_line_equivalent_to_not_collinear_v0 on A, midpoint(C, D), G we get not_collinear(A, G, midpoint(C, D)), exists(Line(G, midpoint(C, D)))
By line_containment_inequality on line_intersection(Line(A, E), altitude(F, A, E)), B, Line(A, E) we get B != line_intersection(Line(A, E), altitude(F, A, E))
By line_circle_intersection_has_at_most_two_points_0 on C, G, B, Circle(C, F, G) we get B not in Circle(C, F, G)
By reverse_direction on A, midpoint(A, B) we get 180 == direction(A, midpoint(A, B)) - direction(midpoint(A, B), A) mod 360
By perpendicular_angle_conditions_v0 on E, H, C we get angle(E, H, C) == orientation(C, E, H) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on H, midpoint(A, B), G we get not_collinear(G, H, midpoint(A, B)), exists(Line(G, midpoint(A, B)))
By internal_angle_bisector_definition_v0 on B, center(e), A, E we get angle(B, E, center(e)) == angle(center(e), E, A) mod 360
By internal_angle_bisector_definition_v0 on A, center(e), B, G we get angle(A, G, center(e)) == angle(center(e), G, B) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on H, G, center(e) we get not_collinear(G, H, center(e)), exists(Line(G, center(e)))
By not_in_line_equivalent_to_not_collinear_v0 on H, midpoint(A, B), B we get not_collinear(B, H, midpoint(A, B)), exists(Line(B, midpoint(A, B)))
By not_in_line_equivalent_to_not_collinear_v0 on F, midpoint(C, D), G we get not_collinear(F, G, midpoint(C, D)), exists(Line(G, midpoint(C, D)))
By line_containment_inequality on line_intersection(Line(A, E), altitude(F, A, E)), G, Line(A, E) we get G != line_intersection(Line(A, E), altitude(F, A, E))
By line_inequality on perpendicular_bisector(A, C), Line(A, C), E we get Line(A, C) != perpendicular_bisector(A, C)
By point_on_perpendicular_bisector on B, A, center(e), Line(E, G) we get distance(A, center(e)) == distance(B, center(e))
By not_in_line_equivalent_to_not_collinear_v0 on A, C, midpoint(C, D) we get not_collinear(A, C, midpoint(C, D)), exists(Line(C, midpoint(C, D)))
By not_in_line_equivalent_to_not_collinear_v0 on D, E, midpoint(A, B) we get not_collinear(D, E, midpoint(A, B)), exists(Line(E, midpoint(A, B)))
By not_in_line_equivalent_to_not_collinear_v0 on F, midpoint(C, D), D we get not_collinear(D, F, midpoint(C, D)), exists(Line(D, midpoint(C, D)))
By not_in_line_equivalent_to_not_collinear_v0 on H, midpoint(C, D), E we get not_collinear(E, H, midpoint(C, D)), exists(Line(E, midpoint(C, D)))
By not_in_line_equivalent_to_not_collinear_v0 on F, E, center(e) we get not_collinear(E, F, center(e)), exists(Line(E, center(e)))
By line_containment_inequality on line_intersection(Line(E, G), altitude(F, E, G)), F, Line(E, G) we get F != line_intersection(Line(E, G), altitude(F, E, G))
By line_inequality on perpendicular_bisector(B, D), f, E we get f != perpendicular_bisector(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on C, F, center(d) we get C not in Line(F, center(d))
By not_in_line_equivalent_to_not_collinear_v0 on B, midpoint(C, D), D we get not_collinear(B, D, midpoint(C, D)), exists(Line(D, midpoint(C, D)))
By line_inequality on perpendicular_bisector(B, D), h, E we get h != perpendicular_bisector(B, D)
By not_in_line_equivalent_to_not_collinear_v0 on B, midpoint(C, D), C we get not_collinear(B, C, midpoint(C, D)), exists(Line(C, midpoint(C, D)))
By not_in_line_equivalent_to_not_collinear_v0 on H, E, midpoint(A, B) we get not_collinear(E, H, midpoint(A, B)), exists(Line(E, midpoint(A, B)))
By line_circle_intersection_has_at_most_two_points_0 on G, E, midpoint(A, B), Circle(B, D, E) we get midpoint(A, B) not in Circle(B, D, E)
By not_in_line_equivalent_to_not_collinear_v0 on A, G, center(e) we get not_collinear(A, G, center(e)), exists(Line(G, center(e)))
By line_circle_intersection_has_at_most_two_points_0 on C, A, midpoint(A, C), Circle(A, C, E) we get midpoint(A, C) not in Circle(A, C, E)
By not_in_line_equivalent_to_not_collinear_v0 on A, E, midpoint(C, D) we get not_collinear(A, E, midpoint(C, D)), exists(Line(E, midpoint(C, D)))
By not_in_line_equivalent_to_not_collinear_v0 on D, center(e), G we get not_collinear(D, G, center(e)), exists(Line(G, center(e)))
By line_circle_intersection_has_at_most_two_points_0 on D, B, midpoint(B, D), c we get midpoint(B, D) not in c
By not_in_line_equivalent_to_not_collinear_v0 on H, A, midpoint(A, B) we get not_collinear(A, H, midpoint(A, B)), exists(Line(A, midpoint(A, B)))
By line_containment_inequality on center(e), A, Line(E, G) we get A != center(e)
By not_in_line_equivalent_to_not_collinear_v0_r on F, C, center(d) we get F not in Line(C, center(d))
By line_inequality on perpendicular_bisector(A, C), Line(D, H), E we get Line(D, H) != perpendicular_bisector(A, C)
By not_in_line_equivalent_to_not_collinear_v0 on C, midpoint(A, B), E we get not_collinear(C, E, midpoint(A, B)), exists(Line(E, midpoint(A, B)))
By line_containment_inequality on center(e), C, Line(E, G) we get C != center(e)
By not_in_line_equivalent_to_not_collinear_v0 on D, midpoint(A, B), B we get not_collinear(B, D, midpoint(A, B)), exists(Line(B, midpoint(A, B)))
By line_containment_inequality on line_intersection(Line(D, E), altitude(F, D, E)), A, Line(D, E) we get A != line_intersection(Line(D, E), altitude(F, D, E))
By line_inequality on perpendicular_bisector(B, D), Line(G, H), E we get Line(G, H) != perpendicular_bisector(B, D)
By not_in_line_equivalent_to_not_collinear_v0 on B, G, center(e) we get not_collinear(B, G, center(e)), exists(Line(G, center(e)))
By line_containment_inequality on center(e), B, Line(E, G) we get B != center(e)
By line_circle_intersection_has_at_most_two_points_0 on G, E, midpoint(C, D), Circle(A, C, E) we get midpoint(C, D) not in Circle(A, C, E)
By line_circle_intersection_has_at_most_two_points_0 on B, D, midpoint(B, D), Circle(B, D, E) we get midpoint(B, D) not in Circle(B, D, E)
By line_inequality on perpendicular_bisector(B, D), i, E we get i != perpendicular_bisector(B, D)
By line_inequality on perpendicular_bisector(A, C), Line(C, F), E we get Line(C, F) != perpendicular_bisector(A, C)
By line_containment_inequality on line_intersection(Line(A, E), altitude(F, A, E)), F, Line(A, E) we get F != line_intersection(Line(A, E), altitude(F, A, E))
By line_containment_inequality on line_intersection(Line(D, E), altitude(F, D, E)), H, Line(D, E) we get H != line_intersection(Line(D, E), altitude(F, D, E))
By line_containment_inequality on center(d), B, Line(E, G) we get B != center(d)
By line_circle_intersection_has_at_most_two_points_0 on E, G, midpoint(C, D), e we get midpoint(C, D) not in e
By line_inequality on perpendicular_bisector(A, C), g, E we get g != perpendicular_bisector(A, C)
By line_inequality on perpendicular_bisector(A, C), i, E we get i != perpendicular_bisector(A, C)
By line_circle_intersection_has_at_most_two_points_0 on G, E, midpoint(A, B), Circle(A, C, E) we get midpoint(A, B) not in Circle(A, C, E)
By line_containment_inequality on line_intersection(Line(D, E), altitude(F, D, E)), B, Line(D, E) we get B != line_intersection(Line(D, E), altitude(F, D, E))
By line_circle_intersection_has_at_most_two_points_0 on C, A, midpoint(A, C), c we get midpoint(A, C) not in c
By line_containment_inequality on line_intersection(Line(E, G), altitude(F, E, G)), D, Line(E, G) we get D != line_intersection(Line(E, G), altitude(F, E, G))
By not_in_line_equivalent_to_not_collinear_v0_r on center(d), F, C we get center(d) not in Line(C, F)
By line_containment_inequality on line_intersection(Line(A, E), altitude(F, A, E)), C, Line(A, E) we get C != line_intersection(Line(A, E), altitude(F, A, E))
By line_containment_inequality on line_intersection(Line(E, G), altitude(F, E, G)), C, Line(E, G) we get C != line_intersection(Line(E, G), altitude(F, E, G))
By line_containment_inequality on center(d), A, Line(E, G) we get A != center(d)
By line_containment_inequality on line_intersection(Line(A, E), altitude(F, A, E)), D, Line(A, E) we get D != line_intersection(Line(A, E), altitude(F, A, E))
By line_circle_intersection_has_at_most_two_points_0 on F, G, D, Circle(C, F, G) we get D not in Circle(C, F, G)
By line_containment_inequality on line_intersection(Line(E, G), altitude(F, E, G)), B, Line(E, G) we get B != line_intersection(Line(E, G), altitude(F, E, G))
By line_inequality on perpendicular_bisector(B, D), Line(F, H), E we get Line(F, H) != perpendicular_bisector(B, D)
By line_inequality on perpendicular_bisector(B, D), Line(D, H), E we get Line(D, H) != perpendicular_bisector(B, D)
By line_circle_intersection_has_at_most_two_points_0 on E, G, midpoint(C, D), Circle(B, D, E) we get midpoint(C, D) not in Circle(B, D, E)
By line_inequality on perpendicular_bisector(A, C), f, E we get f != perpendicular_bisector(A, C)
By line_containment_inequality on line_intersection(Line(E, G), altitude(F, E, G)), A, Line(E, G) we get A != line_intersection(Line(E, G), altitude(F, E, G))
By line_containment_inequality on line_intersection(Line(D, E), altitude(F, D, E)), F, Line(D, E) we get F != line_intersection(Line(D, E), altitude(F, D, E))
By line_containment_inequality on line_intersection(Line(D, E), altitude(F, D, E)), G, Line(D, E) we get G != line_intersection(Line(D, E), altitude(F, D, E))
By line_circle_intersection_has_at_most_two_points_0 on E, G, midpoint(A, B), e we get midpoint(A, B) not in e
By line_inequality on perpendicular_bisector(A, C), Line(F, H), E we get Line(F, H) != perpendicular_bisector(A, C)
By line_containment_inequality on center(e), D, Line(E, G) we get D != center(e)
By line_inequality on perpendicular_bisector(A, C), Line(G, H), E we get Line(G, H) != perpendicular_bisector(A, C)
By line_containment_inequality on line_intersection(Line(E, G), altitude(F, E, G)), H, Line(E, G) we get H != line_intersection(Line(E, G), altitude(F, E, G))
By line_inequality on perpendicular_bisector(A, C), Line(C, H), E we get Line(C, H) != perpendicular_bisector(A, C)
By line_inequality on perpendicular_bisector(B, D), Line(A, C), E we get Line(A, C) != perpendicular_bisector(B, D)
By circumcenter_perpendicular_bisectors on C, A, B we get circumcenter(A, B, C) in perpendicular_bisector(A, C), circumcenter(A, B, C) in perpendicular_bisector(A, B), circumcenter(A, B, C) in perpendicular_bisector(B, C)
By circumcenter_perpendicular_bisectors on C, D, B we get circumcenter(B, C, D) in perpendicular_bisector(C, D), circumcenter(B, C, D) in perpendicular_bisector(B, D), circumcenter(B, C, D) in perpendicular_bisector(B, C)
By internal_angle_bisector_definition_v0 on A, midpoint(C, D), B, E we get angle(A, E, midpoint(C, D)) == angle(midpoint(C, D), E, B) mod 360
By internal_angle_bisector_definition_v0 on C, midpoint(A, B), D, E we get angle(C, E, midpoint(A, B)) == angle(midpoint(A, B), E, D) mod 360
By log_of_2_times_distance on C, A, D, midpoint(B, D) we get log(distance(A, C)) == 0.6931471805599453 + log(distance(D, midpoint(B, D)))
By perpendicular_angle_conditions_v0 on A, midpoint(A, B), G we get angle(A, midpoint(A, B), G) == orientation(A, midpoint(A, B), G) mod 360
By log_of_2_times_distance on A, C, midpoint(B, D), B we get log(distance(A, C)) == 0.6931471805599453 + log(distance(B, midpoint(B, D)))
By internal_angle_bisector_definition_v0 on D, midpoint(A, B), C, E we get angle(D, E, midpoint(A, B)) == angle(midpoint(A, B), E, C) mod 360
By internal_angle_bisector_definition_v0 on D, E, C, midpoint(C, D) we get angle(D, midpoint(C, D), E) == angle(E, midpoint(C, D), C) mod 360
By internal_angle_bisector_definition_v0_r on C, D, C, midpoint(C, D) we get Line(D, midpoint(C, D)) == internal_angle_bisector(C, midpoint(C, D), C)
By internal_angle_bisector_definition_v0 on center(e), midpoint(A, B), center(e), E we get angle(center(e), E, midpoint(A, B)) == angle(midpoint(A, B), E, center(e)) mod 360
By internal_angle_bisector_definition_v0_r on C, midpoint(C, D), C, D we get Line(D, midpoint(C, D)) == internal_angle_bisector(C, D, C)
By collinear_definition on A, C, midpoint(A, C) we get C in Line(A, midpoint(A, C)), midpoint(A, C) in Line(A, C), Line(A, C) == Line(A, midpoint(A, C)), 0 == 2 * angle(C, A, midpoint(A, C)) mod 360
By power_of_a_point_in_circle on C, Circle(C, F, G) we get 0 == power_of_a_point(C, Circle(C, F, G))
By internal_angle_bisector_definition_v0 on A, E, B, midpoint(A, B) we get angle(A, midpoint(A, B), E) == angle(E, midpoint(A, B), B) mod 360
By internal_angle_bisector_definition_v0 on D, midpoint(A, B), C, G we get angle(D, G, midpoint(A, B)) == angle(midpoint(A, B), G, C) mod 360
By perpendicular_angle_conditions_v0 on C, midpoint(C, D), G we get angle(C, midpoint(C, D), G) == orientation(C, midpoint(C, D), G) mod 360
By internal_angle_bisector_definition_v0_r on D, midpoint(C, D), D, C we get Line(C, midpoint(C, D)) == internal_angle_bisector(D, C, D)
By internal_angle_bisector_definition_v0_r on B, midpoint(A, B), B, A we get Line(A, midpoint(A, B)) == internal_angle_bisector(B, A, B)
By log_of_2_times_distance on D, B, B, midpoint(B, D) we get log(distance(B, D)) == 0.6931471805599453 + log(distance(B, midpoint(B, D)))
By log_of_2_times_distance on D, B, C, midpoint(A, C) we get log(distance(B, D)) == 0.6931471805599453 + log(distance(C, midpoint(A, C)))
By internal_angle_bisector_definition_v0 on B, midpoint(C, D), A, G we get angle(B, G, midpoint(C, D)) == angle(midpoint(C, D), G, A) mod 360
By isosceles_triangle_midpoint on E, C, A we get midpoint(A, C) in median(E, A, C)
By log_of_2_times_distance on B, D, D, midpoint(B, D) we get log(distance(B, D)) == 0.6931471805599453 + log(distance(D, midpoint(B, D)))
By internal_angle_bisector_definition_v0_r on D, C, D, midpoint(C, D) we get Line(C, midpoint(C, D)) == internal_angle_bisector(D, midpoint(C, D), D)
By internal_angle_bisector_definition_v0 on D, G, C, midpoint(C, D) we get angle(D, midpoint(C, D), G) == angle(G, midpoint(C, D), C) mod 360
By internal_angle_bisector_definition_v0 on A, midpoint(C, D), B, G we get angle(A, G, midpoint(C, D)) == angle(midpoint(C, D), G, B) mod 360
By power_of_a_point_on_circle on F, Circle(C, F, G) we get 0 == power_of_a_point(F, Circle(C, F, G))
By perpendicular_lines_draw_intersection on perpendicular_bisector(A, C), Line(A, C) we get exists(line_intersection(Line(A, C), perpendicular_bisector(A, C)))
By internal_angle_bisector_definition_v0 on A, midpoint(A, B), B, E we get angle(A, E, midpoint(A, B)) == angle(midpoint(A, B), E, B) mod 360
By internal_angle_bisector_definition_v0 on B, E, A, midpoint(A, B) we get angle(B, midpoint(A, B), E) == angle(E, midpoint(A, B), A) mod 360
By isosceles_triangle_altitude_v1 on midpoint(A, B), C, D we get identical(perpendicular_bisector(C, D), internal_angle_bisector(C, midpoint(A, B), D), perpendicular_line(midpoint(A, B), Line(C, D)))
By internal_angle_bisector_definition_v0 on C, G, D, midpoint(C, D) we get angle(C, midpoint(C, D), G) == angle(G, midpoint(C, D), D) mod 360
By external_angle_bisector_definition_v0 on A, midpoint(C, D), C, G we get 180 == angle(A, G, midpoint(C, D)) + angle(C, G, midpoint(C, D)) mod 360
By external_angle_bisector_definition_v0 on D, midpoint(A, B), B, G we get 180 == angle(D, G, midpoint(A, B)) + angle(B, G, midpoint(A, B)) mod 360
By perpendicular_angle_conditions_v0 on G, midpoint(A, B), A we get angle(G, midpoint(A, B), A) == orientation(A, G, midpoint(A, B)) mod 360
By internal_angle_bisector_definition_v0 on C, E, D, midpoint(C, D) we get angle(C, midpoint(C, D), E) == angle(E, midpoint(C, D), D) mod 360
By internal_angle_bisector_definition_v0 on C, midpoint(C, D), D, E we get angle(C, E, midpoint(C, D)) == angle(midpoint(C, D), E, D) mod 360
By isosceles_triangle_altitude_v3 on midpoint(B, D), B, D we get identical(perpendicular_bisector(B, D), internal_angle_bisector(B, midpoint(B, D), D), perpendicular_line(midpoint(B, D), Line(B, D)))
By perpendicular_angle_conditions_v0 on D, midpoint(C, D), E we get angle(D, midpoint(C, D), E) == orientation(D, midpoint(C, D), E) mod 360
By collinear_definition on C, midpoint(A, C), A we get midpoint(A, C) in Line(A, C), A in Line(C, midpoint(A, C)), Line(A, C) == Line(C, midpoint(A, C)), 0 == 2 * angle(midpoint(A, C), C, A) mod 360
By perpendicular_angle_conditions_v0 on G, midpoint(C, D), D we get angle(G, midpoint(C, D), D) == orientation(D, G, midpoint(C, D)) mod 360
By external_angle_bisector_definition_v0 on B, midpoint(C, D), D, G we get 180 == angle(B, G, midpoint(C, D)) + angle(D, G, midpoint(C, D)) mod 360
By internal_angle_bisector_definition_v0 on A, G, B, midpoint(A, B) we get angle(A, midpoint(A, B), G) == angle(G, midpoint(A, B), B) mod 360
By collinear_definition on E, G, midpoint(A, B) we get G in Line(E, midpoint(A, B)), midpoint(A, B) in Line(E, G), Line(E, G) == Line(E, midpoint(A, B)), 0 == 2 * angle(G, E, midpoint(A, B)) mod 360
By internal_angle_bisector_definition_v0_r on B, A, B, midpoint(A, B) we get Line(A, midpoint(A, B)) == internal_angle_bisector(B, midpoint(A, B), B)
By isosceles_triangle_altitude_v1 on midpoint(C, D), A, B we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, midpoint(C, D), B), perpendicular_line(midpoint(C, D), Line(A, B)))
By internal_angle_bisector_definition_v0 on D, midpoint(C, D), C, G we get angle(D, G, midpoint(C, D)) == angle(midpoint(C, D), G, C) mod 360
By perpendicular_bisector_properties on B, D we get perpendicular(Line(B, D), perpendicular_bisector(B, D)), midpoint(B, D) == line_intersection(Line(B, D), perpendicular_bisector(B, D))
By collinear_definition on E, midpoint(A, B), G we get midpoint(A, B) in Line(E, G), G in Line(E, midpoint(A, B)), Line(E, G) == Line(E, midpoint(A, B)), 0 == 2 * angle(midpoint(A, B), E, G) mod 360
By collinear_definition on A, midpoint(A, C), C we get midpoint(A, C) in Line(A, C), C in Line(A, midpoint(A, C)), Line(A, C) == Line(A, midpoint(A, C)), 0 == 2 * angle(midpoint(A, C), A, C) mod 360
By isosceles_triangle_midpoint on E, D, B we get midpoint(B, D) in median(E, B, D)
By log_of_2_times_distance on B, D, A, midpoint(A, C) we get log(distance(B, D)) == 0.6931471805599453 + log(distance(A, midpoint(A, C)))
By perpendicular_angle_conditions_v0 on B, midpoint(A, B), E we get angle(B, midpoint(A, B), E) == orientation(B, midpoint(A, B), E) mod 360
By power_of_a_point_on_circle on G, Circle(C, F, G) we get 0 == power_of_a_point(G, Circle(C, F, G))
By internal_angle_bisector_definition_v0 on B, G, A, midpoint(A, B) we get angle(B, midpoint(A, B), G) == angle(G, midpoint(A, B), A) mod 360
By internal_angle_bisector_definition_v0 on center(e), midpoint(A, B), center(e), G we get angle(center(e), G, midpoint(A, B)) == angle(midpoint(A, B), G, center(e)) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(C, D), D, midpoint(C, D), C we get Line(C, D) == internal_angle_bisector(midpoint(C, D), C, midpoint(C, D))
By internal_angle_bisector_definition_v0 on D, midpoint(C, D), C, E we get angle(D, E, midpoint(C, D)) == angle(midpoint(C, D), E, C) mod 360
By internal_angle_bisector_definition_v0 on G, midpoint(C, D), G, E we get angle(G, E, midpoint(C, D)) == angle(midpoint(C, D), E, G) mod 360
By perpendicular_angle_conditions_v0 on G, midpoint(A, B), B we get angle(G, midpoint(A, B), B) == orientation(B, G, midpoint(A, B)) mod 360
By isosceles_triangle_altitude_v3 on midpoint(B, D), D, B we get identical(perpendicular_bisector(B, D), internal_angle_bisector(B, midpoint(B, D), D), perpendicular_line(midpoint(B, D), Line(B, D)))
By isosceles_triangle_altitude_v3 on midpoint(A, C), C, A we get identical(perpendicular_bisector(A, C), internal_angle_bisector(A, midpoint(A, C), C), perpendicular_line(midpoint(A, C), Line(A, C)))
By power_of_a_point_in_circle on center(d), Circle(C, F, G) we get 0 == power_of_a_point(center(d), Circle(C, F, G))
By external_angle_bisector_definition_v0 on F, midpoint(A, B), C, G we get 180 == angle(F, G, midpoint(A, B)) + angle(C, G, midpoint(A, B)) mod 360
By collinear_definition on G, midpoint(A, B), E we get midpoint(A, B) in Line(E, G), E in Line(G, midpoint(A, B)), Line(E, G) == Line(G, midpoint(A, B)), 0 == 2 * angle(midpoint(A, B), G, E) mod 360
By collinear_definition on G, E, midpoint(A, B) we get E in Line(G, midpoint(A, B)), midpoint(A, B) in Line(E, G), Line(E, G) == Line(G, midpoint(A, B)), 0 == 2 * angle(E, G, midpoint(A, B)) mod 360
By internal_angle_bisector_definition_v0 on C, midpoint(C, D), D, G we get angle(C, G, midpoint(C, D)) == angle(midpoint(C, D), G, D) mod 360
By internal_angle_bisector_definition_v0 on F, midpoint(A, B), B, G we get angle(F, G, midpoint(A, B)) == angle(midpoint(A, B), G, B) mod 360
By collinear_definition on B, D, midpoint(B, D) we get D in Line(B, midpoint(B, D)), midpoint(B, D) in Line(B, D), Line(B, D) == Line(B, midpoint(B, D)), 0 == 2 * angle(D, B, midpoint(B, D)) mod 360
By collinear_definition on G, midpoint(C, D), E we get midpoint(C, D) in Line(E, G), E in Line(G, midpoint(C, D)), Line(E, G) == Line(G, midpoint(C, D)), 0 == 2 * angle(midpoint(C, D), G, E) mod 360
By perpendicular_bisector_properties on C, A we get perpendicular(Line(A, C), perpendicular_bisector(A, C)), midpoint(A, C) == line_intersection(Line(A, C), perpendicular_bisector(A, C))
By internal_angle_bisector_definition_v0_r on midpoint(A, B), A, midpoint(A, B), B we get Line(A, B) == internal_angle_bisector(midpoint(A, B), B, midpoint(A, B))
By log_of_2_times_distance on A, C, C, midpoint(A, C) we get log(distance(A, C)) == 0.6931471805599453 + log(distance(C, midpoint(A, C)))
By internal_angle_bisector_definition_v0 on E, midpoint(A, B), E, G we get angle(E, G, midpoint(A, B)) == angle(midpoint(A, B), G, E) mod 360
By internal_angle_bisector_definition_v0 on A, midpoint(A, B), B, G we get angle(A, G, midpoint(A, B)) == angle(midpoint(A, B), G, B) mod 360
By internal_angle_bisector_definition_v0 on F, midpoint(C, D), B, G we get angle(F, G, midpoint(C, D)) == angle(midpoint(C, D), G, B) mod 360
By collinear_definition on D, B, midpoint(B, D) we get B in Line(D, midpoint(B, D)), midpoint(B, D) in Line(B, D), Line(B, D) == Line(D, midpoint(B, D)), 0 == 2 * angle(B, D, midpoint(B, D)) mod 360
By collinear_definition on B, midpoint(B, D), D we get midpoint(B, D) in Line(B, D), D in Line(B, midpoint(B, D)), Line(B, D) == Line(B, midpoint(B, D)), 0 == 2 * angle(midpoint(B, D), B, D) mod 360
By perpendicular_angle_conditions_v0 on D, midpoint(C, D), G we get angle(D, midpoint(C, D), G) == orientation(D, midpoint(C, D), G) mod 360
By internal_angle_bisector_definition_v0 on center(e), midpoint(C, D), center(e), E we get angle(center(e), E, midpoint(C, D)) == angle(midpoint(C, D), E, center(e)) mod 360
By perpendicular_angle_conditions_v0 on E, midpoint(C, D), C we get angle(E, midpoint(C, D), C) == orientation(C, E, midpoint(C, D)) mod 360
By collinear_definition on G, E, midpoint(C, D) we get E in Line(G, midpoint(C, D)), midpoint(C, D) in Line(E, G), Line(E, G) == Line(G, midpoint(C, D)), 0 == 2 * angle(E, G, midpoint(C, D)) mod 360
By log_of_2_times_distance on C, A, A, midpoint(A, C) we get log(distance(A, C)) == 0.6931471805599453 + log(distance(A, midpoint(A, C)))
By internal_angle_bisector_definition_v0 on center(e), midpoint(C, D), center(e), G we get angle(center(e), G, midpoint(C, D)) == angle(midpoint(C, D), G, center(e)) mod 360
By collinear_definition on E, midpoint(C, D), G we get midpoint(C, D) in Line(E, G), G in Line(E, midpoint(C, D)), Line(E, G) == Line(E, midpoint(C, D)), 0 == 2 * angle(midpoint(C, D), E, G) mod 360
By internal_angle_bisector_definition_v0_r on A, B, A, midpoint(A, B) we get Line(B, midpoint(A, B)) == internal_angle_bisector(A, midpoint(A, B), A)
By internal_angle_bisector_definition_v0 on B, midpoint(C, D), F, G we get angle(B, G, midpoint(C, D)) == angle(midpoint(C, D), G, F) mod 360
By perpendicular_angle_conditions_v0 on C, midpoint(C, D), E we get angle(C, midpoint(C, D), E) == orientation(C, midpoint(C, D), E) mod 360
By external_angle_bisector_definition_v0 on A, midpoint(A, B), C, G we get 180 == angle(A, G, midpoint(A, B)) + angle(C, G, midpoint(A, B)) mod 360
By internal_angle_bisector_definition_v0_r on A, midpoint(A, B), A, B we get Line(B, midpoint(A, B)) == internal_angle_bisector(A, B, A)
By isosceles_triangle_altitude_v1 on midpoint(C, D), B, A we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, midpoint(C, D), B), perpendicular_line(midpoint(C, D), Line(A, B)))
By perpendicular_angle_conditions_v0 on G, midpoint(C, D), C we get angle(G, midpoint(C, D), C) == orientation(C, G, midpoint(C, D)) mod 360
By internal_angle_bisector_definition_v0 on G, midpoint(A, B), G, E we get angle(G, E, midpoint(A, B)) == angle(midpoint(A, B), E, G) mod 360
By perpendicular_angle_conditions_v0 on E, midpoint(A, B), B we get angle(E, midpoint(A, B), B) == orientation(B, E, midpoint(A, B)) mod 360
By perpendicular_angle_conditions_v0 on E, midpoint(A, B), A we get angle(E, midpoint(A, B), A) == orientation(A, E, midpoint(A, B)) mod 360
By external_angle_bisector_definition_v0 on F, midpoint(C, D), C, G we get 180 == angle(F, G, midpoint(C, D)) + angle(C, G, midpoint(C, D)) mod 360
By perpendicular_angle_conditions_v0 on E, midpoint(C, D), D we get angle(E, midpoint(C, D), D) == orientation(D, E, midpoint(C, D)) mod 360
By internal_angle_bisector_definition_v0 on E, midpoint(C, D), E, G we get angle(E, G, midpoint(C, D)) == angle(midpoint(C, D), G, E) mod 360
By collinear_definition on C, A, midpoint(A, C) we get A in Line(C, midpoint(A, C)), midpoint(A, C) in Line(A, C), Line(A, C) == Line(C, midpoint(A, C)), 0 == 2 * angle(A, C, midpoint(A, C)) mod 360
By internal_angle_bisector_definition_v0 on C, midpoint(A, B), D, G we get angle(C, G, midpoint(A, B)) == angle(midpoint(A, B), G, D) mod 360
By isosceles_triangle_altitude_v1 on midpoint(A, B), D, C we get identical(perpendicular_bisector(C, D), internal_angle_bisector(C, midpoint(A, B), D), perpendicular_line(midpoint(A, B), Line(C, D)))
By internal_angle_bisector_definition_v0 on B, midpoint(A, B), A, G we get angle(B, G, midpoint(A, B)) == angle(midpoint(A, B), G, A) mod 360
By internal_angle_bisector_definition_v0 on B, midpoint(C, D), A, E we get angle(B, E, midpoint(C, D)) == angle(midpoint(C, D), E, A) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(C, D), C, midpoint(C, D), D we get Line(C, D) == internal_angle_bisector(midpoint(C, D), D, midpoint(C, D))
By internal_angle_bisector_definition_v0 on B, midpoint(A, B), F, G we get angle(B, G, midpoint(A, B)) == angle(midpoint(A, B), G, F) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(A, B), B, midpoint(A, B), A we get Line(A, B) == internal_angle_bisector(midpoint(A, B), A, midpoint(A, B))
By perpendicular_angle_conditions_v0 on A, midpoint(A, B), E we get angle(A, midpoint(A, B), E) == orientation(A, midpoint(A, B), E) mod 360
By collinear_definition on E, G, midpoint(C, D) we get G in Line(E, midpoint(C, D)), midpoint(C, D) in Line(E, G), Line(E, G) == Line(E, midpoint(C, D)), 0 == 2 * angle(G, E, midpoint(C, D)) mod 360
By internal_angle_bisector_definition_v0 on B, midpoint(A, B), A, E we get angle(B, E, midpoint(A, B)) == angle(midpoint(A, B), E, A) mod 360
By collinear_definition on D, midpoint(B, D), B we get midpoint(B, D) in Line(B, D), B in Line(D, midpoint(B, D)), Line(B, D) == Line(D, midpoint(B, D)), 0 == 2 * angle(midpoint(B, D), D, B) mod 360
By perpendicular_angle_conditions_v0 on B, midpoint(A, B), G we get angle(B, midpoint(A, B), G) == orientation(B, midpoint(A, B), G) mod 360
By isosceles_triangle_altitude_v1 on midpoint(A, C), C, A we get identical(perpendicular_bisector(A, C), internal_angle_bisector(A, midpoint(A, C), C), perpendicular_line(midpoint(A, C), Line(A, C)))
By isosceles_triangle_altitude_v1 on midpoint(B, D), B, D we get identical(perpendicular_bisector(B, D), internal_angle_bisector(B, midpoint(B, D), D), perpendicular_line(midpoint(B, D), Line(B, D)))
By perpendicular_lines_draw_intersection on perpendicular_bisector(B, D), Line(B, D) we get exists(line_intersection(Line(B, D), perpendicular_bisector(B, D)))
By isosceles_triangle_altitude_v1 on midpoint(B, D), D, B we get identical(perpendicular_bisector(B, D), internal_angle_bisector(B, midpoint(B, D), D), perpendicular_line(midpoint(B, D), Line(B, D)))
By isosceles_triangle_altitude_v3 on midpoint(A, C), A, C we get identical(perpendicular_bisector(A, C), internal_angle_bisector(A, midpoint(A, C), C), perpendicular_line(midpoint(A, C), Line(A, C)))
By isosceles_triangle_altitude_v1 on midpoint(A, C), A, C we get identical(perpendicular_bisector(A, C), internal_angle_bisector(A, midpoint(A, C), C), perpendicular_line(midpoint(A, C), Line(A, C)))
By power_of_a_point_definition on center(e), G, E, Circle(A, C, E) we get log(power_of_a_point(center(e), Circle(A, C, E))) == log(distance(G, center(e))) + log(distance(E, center(e)))
By power_of_a_point_definition on B, G, C, Circle(A, C, E) we get log(distance(B, G)) + log(distance(B, C)) == log(power_of_a_point(B, Circle(A, C, E)))
By radical_axis_definition_v0 on midpoint(C, D), d, c we get power_of_a_point(midpoint(C, D), c) == power_of_a_point(midpoint(C, D), d)
By isosceles_triangle_properties on midpoint(A, B), D, C we get distance(C, midpoint(A, B)) == distance(D, midpoint(A, B)), angle(D, C, midpoint(A, B)) == angle(midpoint(A, B), D, C) mod 360
By collinear_definition on midpoint(B, D), D, B we get D in Line(B, midpoint(B, D)), B in Line(D, midpoint(B, D)), Line(B, midpoint(B, D)) == Line(D, midpoint(B, D)), 0 == 2 * angle(D, midpoint(B, D), B) mod 360
By collinear_definition on midpoint(A, B), G, E we get G in Line(E, midpoint(A, B)), E in Line(G, midpoint(A, B)), Line(E, midpoint(A, B)) == Line(G, midpoint(A, B)), 0 == 2 * angle(G, midpoint(A, B), E) mod 360
By power_of_a_point_definition on midpoint(C, D), D, C, c we get log(power_of_a_point(midpoint(C, D), c)) == log(distance(D, midpoint(C, D))) + log(distance(C, midpoint(C, D)))
By altitude_definition on E, D, B, perpendicular_bisector(B, D) we get altitude(E, B, D) == perpendicular_bisector(B, D)
By power_of_a_point_definition on F, A, G, Circle(A, C, E) we get log(distance(A, F)) + log(distance(F, G)) == log(power_of_a_point(F, Circle(A, C, E)))
By power_of_a_point_definition on center(e), G, E, Circle(B, D, E) we get log(power_of_a_point(center(e), Circle(B, D, E))) == log(distance(G, center(e))) + log(distance(E, center(e)))
By power_of_a_point_definition on D, G, A, Circle(A, C, E) we get log(distance(D, G)) + log(distance(A, D)) == log(power_of_a_point(D, Circle(A, C, E)))
By altitude_definition on E, C, H, Line(E, H) we get Line(E, H) == altitude(E, C, H)
By altitude_definition on E, A, C, perpendicular_bisector(A, C) we get altitude(E, A, C) == perpendicular_bisector(A, C)
By isosceles_triangle_properties on midpoint(C, D), B, A we get distance(A, midpoint(C, D)) == distance(B, midpoint(C, D)), angle(B, A, midpoint(C, D)) == angle(midpoint(C, D), B, A) mod 360
By isosceles_triangle_properties on midpoint(A, C), C, A we get distance(A, midpoint(A, C)) == distance(C, midpoint(A, C)), angle(C, A, midpoint(A, C)) == angle(midpoint(A, C), C, A) mod 360
By isosceles_triangle_properties on midpoint(C, D), A, B we get distance(A, midpoint(C, D)) == distance(B, midpoint(C, D)), angle(A, B, midpoint(C, D)) == angle(midpoint(C, D), A, B) mod 360
By isosceles_triangle_properties on midpoint(A, C), A, C we get distance(A, midpoint(A, C)) == distance(C, midpoint(A, C)), angle(A, C, midpoint(A, C)) == angle(midpoint(A, C), A, C) mod 360
By isosceles_triangle_properties on midpoint(B, D), B, D we get distance(B, midpoint(B, D)) == distance(D, midpoint(B, D)), angle(B, D, midpoint(B, D)) == angle(midpoint(B, D), B, D) mod 360
By power_of_a_point_definition on C, B, G, Circle(B, D, E) we get log(distance(B, C)) + log(distance(C, G)) == log(power_of_a_point(C, Circle(B, D, E)))
By isosceles_triangle_altitude_v3 on midpoint(C, D), A, B we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, midpoint(C, D), B), perpendicular_line(midpoint(C, D), Line(A, B)))
By altitude_definition on C, E, H, Line(C, H) we get Line(C, H) == altitude(C, E, H)
By collinear_definition on midpoint(B, D), B, D we get B in Line(D, midpoint(B, D)), D in Line(B, midpoint(B, D)), Line(B, midpoint(B, D)) == Line(D, midpoint(B, D)), 0 == 2 * angle(B, midpoint(B, D), D) mod 360
By collinear_definition on midpoint(C, D), E, G we get E in Line(G, midpoint(C, D)), G in Line(E, midpoint(C, D)), Line(E, midpoint(C, D)) == Line(G, midpoint(C, D)), 0 == 2 * angle(E, midpoint(C, D), G) mod 360
By collinear_definition on midpoint(A, C), C, A we get C in Line(A, midpoint(A, C)), A in Line(C, midpoint(A, C)), Line(A, midpoint(A, C)) == Line(C, midpoint(A, C)), 0 == 2 * angle(C, midpoint(A, C), A) mod 360
By isosceles_triangle_properties on midpoint(A, B), C, D we get distance(C, midpoint(A, B)) == distance(D, midpoint(A, B)), angle(C, D, midpoint(A, B)) == angle(midpoint(A, B), C, D) mod 360
By collinear_definition on midpoint(A, B), E, G we get E in Line(G, midpoint(A, B)), G in Line(E, midpoint(A, B)), Line(E, midpoint(A, B)) == Line(G, midpoint(A, B)), 0 == 2 * angle(E, midpoint(A, B), G) mod 360
By isosceles_triangle_altitude_v3 on E, C, A we get identical(perpendicular_bisector(A, C), internal_angle_bisector(A, E, C), perpendicular_line(E, Line(A, C)))
By power_of_a_point_definition on A, D, G, Circle(B, D, E) we get log(distance(A, D)) + log(distance(A, G)) == log(power_of_a_point(A, Circle(B, D, E)))
By power_of_a_point_definition on F, D, G, Circle(B, D, E) we get log(distance(D, F)) + log(distance(F, G)) == log(power_of_a_point(F, Circle(B, D, E)))
By isosceles_triangle_altitude_v3 on E, B, D we get identical(perpendicular_bisector(B, D), internal_angle_bisector(B, E, D), perpendicular_line(E, Line(B, D)))
By power_of_a_point_definition on midpoint(A, B), B, A, c we get log(power_of_a_point(midpoint(A, B), c)) == log(distance(B, midpoint(A, B))) + log(distance(A, midpoint(A, B)))
By power_of_a_point_definition on midpoint(C, D), D, C, d we get log(power_of_a_point(midpoint(C, D), d)) == log(distance(D, midpoint(C, D))) + log(distance(C, midpoint(C, D)))
By collinear_definition on midpoint(A, C), A, C we get A in Line(C, midpoint(A, C)), C in Line(A, midpoint(A, C)), Line(A, midpoint(A, C)) == Line(C, midpoint(A, C)), 0 == 2 * angle(A, midpoint(A, C), C) mod 360
By collinear_definition on midpoint(C, D), G, E we get G in Line(E, midpoint(C, D)), E in Line(G, midpoint(C, D)), Line(E, midpoint(C, D)) == Line(G, midpoint(C, D)), 0 == 2 * angle(G, midpoint(C, D), E) mod 360
By isosceles_triangle_properties on midpoint(B, D), D, B we get distance(B, midpoint(B, D)) == distance(D, midpoint(B, D)), angle(D, B, midpoint(B, D)) == angle(midpoint(B, D), D, B) mod 360
By isosceles_triangle_altitude_v3 on E, D, B we get identical(perpendicular_bisector(B, D), internal_angle_bisector(B, E, D), perpendicular_line(E, Line(B, D)))
By isosceles_triangle_altitude_v3 on midpoint(A, B), D, C we get identical(perpendicular_bisector(C, D), internal_angle_bisector(C, midpoint(A, B), D), perpendicular_line(midpoint(A, B), Line(C, D)))
By isosceles_triangle_altitude_v3 on midpoint(A, B), C, D we get identical(perpendicular_bisector(C, D), internal_angle_bisector(C, midpoint(A, B), D), perpendicular_line(midpoint(A, B), Line(C, D)))
By isosceles_triangle_altitude_v3 on E, A, C we get identical(perpendicular_bisector(A, C), internal_angle_bisector(A, E, C), perpendicular_line(E, Line(A, C)))
By isosceles_triangle_altitude_v3 on midpoint(C, D), B, A we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, midpoint(C, D), B), perpendicular_line(midpoint(C, D), Line(A, B)))
By anti_similar_triangle_basic_properties on center(d), F, C, center(d), C, F we get not_collinear(C, F, center(d)), not_collinear(C, F, center(d)), angle(center(d), F, C) == 0 - angle(center(d), C, F) mod 360, angle(F, C, center(d)) == 0 - angle(C, F, center(d)) mod 360, angle(C, center(d), F) == 0 - angle(F, center(d), C) mod 360, log(distance(C, center(d))) + log(distance(C, F)) == log(distance(F, center(d))) + log(distance(C, F)), log(distance(C, F)) + log(distance(C, center(d))) == log(distance(C, F)) + log(distance(F, center(d))), log(distance(C, center(d))) + log(distance(C, center(d))) == log(distance(F, center(d))) + log(distance(F, center(d)))
By between_implies_angles on D, midpoint(B, D), B we get 180 == angle(D, midpoint(B, D), B) mod 360, 0 == angle(midpoint(B, D), B, D) mod 360, 0 == angle(B, D, midpoint(B, D)) mod 360
By between_implies_angles on C, midpoint(A, C), A we get 180 == angle(C, midpoint(A, C), A) mod 360, 0 == angle(midpoint(A, C), A, C) mod 360, 0 == angle(A, C, midpoint(A, C)) mod 360
By between_implies_angles on A, midpoint(A, C), C we get 180 == angle(A, midpoint(A, C), C) mod 360, 0 == angle(midpoint(A, C), C, A) mod 360, 0 == angle(C, A, midpoint(A, C)) mod 360
By between_implies_angles on B, midpoint(B, D), D we get 180 == angle(B, midpoint(B, D), D) mod 360, 0 == angle(midpoint(B, D), D, B) mod 360, 0 == angle(D, B, midpoint(B, D)) mod 360
