Assumptions:
A, B, C, D, E, F, G: Point
f, g, h: Line
c: Circle
distinct(A, B, C, D, E, F, G)
distinct(f, g, h)
D == midpoint(A, C)
f == internal_angle_bisector(A, C, B)
g == external_angle_bisector(C, B, D)
h == external_angle_bisector(A, C, B)
E == line_intersection(f, g)
c == Circle(C, D, E)
F in h, c
G == center(c)

Embedding:
C := {"x": "-0.96543978637262040098931947795790620148181915283203125", "y": "-0.06663810442025401570287357344568590633571147918701171875"}
A := {"x": "2.429075771097959801636534393765032291412353515625", "y": "0.1220348234789494223928585370231303386390209197998046875"}
D := {"x": "0.731817992362669700323607457903563044965267181396484375", "y": "0.027698359529347703344992481788722216151654720306396484375"}
B := {"x": "-0.90980211340892702676086400970234535634517669677734375", "y": "-0.91146557139393913349323383954470045864582061767578125"}
g := {"point": {"x": "-0.90980211340892702676086400970234535634517669677734375", "y": "-0.91146557139393913349323383954470045864582061767578125"}, "direction": {"x": "-0.93370805559493912044717011454253070257124644909987851275348779938151986227896026605438300975249265114987089763340709161891201398701329151619445063062116681377573280324848831970722610892414215617761449364422225424124129581997602461595266461677556666003269026566459639075618113012851369287046846840900862167184997341927000207857596303896124256406912694111130163740763718781216442679494100095583621972552650638731240684706162400732404042686062029161758971707843766613889435052975529606218085059164983907984385363521701072925796469442246546316084132722097234249197385250668635827995463637001297386504704993951710333812998787080995770647861031394687903276678641745677576313520176030494935984246810017977229818127931263170389628894450815433071078229760160411119761841980355211939509782546368659359127953078500748383460700124519024013917404122429109434627626312753622128038628889163077267707687259089973562170355844353221383947991337712818994262432205758644068168071220897780373177923255556657702598489574134598374854367494775606203006885601723645220668114549139204448378111778723119819022658748736535751278824726044868099768351163811329644920923265740681850740653137652902505068689468581735966889808604799073575097561443196528641457768240139147666665359133622901698820596379932571613670598864248973089067033353583304680826667386245340948782713759753937861223342668737719707475224069067587171522740947598092986673386351676592971529396131024613698278362723057908472435498500246782617580948722778640914379136073398770163671337416439138638022988562031285478297884470977559364184410967674613754230748418100843503829353270915627788486546260933237275802393294224455554191882483587857037947975531534041514180624534909755269608825367529481176274064356259337583494824056288897468918373649382615920197898563129581900817109543841652626799368346982257123339366523117372935001718801782527336338896951365758531804526149204763365019853579936273414858079934880659294125631615412137646019760796722473117330996440456656126918", "y": "0.50126301541396756267817685394698897978189570264871772686413567878772034221039527382197467229680189943578106792469528515123161165853562761901571996657974945748852139634497331859836788637055420609392704741813937741518598652084019704541651832842064409200144109904766991754553349930947362569482049366575951192635672310658108201040061443122114792684400253594270525714738835261075405821397373298003574655995313765387790149697309468817969350481193005142762249062492812194641974422934389585220073729530637544008185222096092447891141955515940674699269880167792212840180184426112259764211694117266109312208224527594437729259020585821462979709244552562152557626000962175400758499489960497996940829568378141494824266052896344052273342268415318232601592041844441175142625364113594450792254176173968444275717470537182800189631313675242881047958898185081562497106829302638123610744583020316505081620219046681689968353723038637970430368914558637540220394462388042058127578250007984549121129492325933415523028660866085350977977273662150832651313342932532523313082847222514597951533187268078930641132502680524232823052162155540946069835000744655520589601788621851949495841578338266552470965227770067700654929516047253132639362488087158515117526866775548288927949435709142957020289508381296823379058525257633417132489611349086009720240702539416008792064447057020678487137541768371282663667303178320734506929787699465922682579948309922958508653840355967710721978801842734609995311680313166658526736111900748760110701521626398210464052248900001061891164630950156684442573198537835114890204463506608265230462176781340455505299075046484770903014749364732171943730519790224393526684120218952156999020898194093523834307669541627657091096575637282341903720898749801873080472017006702078775770474274833938843295900411134794683683599705667062113559427951662774188845637072768097747589288518160192154623664729322464190714614093259740175674658909648641955156544433332155160255246809246872357606315569567486471930092220406336224177"}}
f := {"point": {"x": "-0.96543978637262040098931947795790620148181915283203125", "y": "-0.06663810442025401570287357344568590633571147918701171875"}, "direction": {"x": "1.0641734022800438643338883676622084367040397252851590680892618010458205818846034882749360398898530817482054623014832179168704818130916266580788887764267084770991279873675532901940786542637528947206349678500409846077796051211142284493959283544875786031388929169192216827177707710963107611111064112421721322726698857130331164584588498844019102989850467519741435574131390601022822096121264861731999976159790921352525146862383400825061541874194947855045092352135979582721214233960937928849525988715228114061409741223230805402508335621976689255079973202086027559166172844651607442089641148091586190827079109076252965565279816380795386871968105947220317098006546757253658089118951526651011356995246856940656374977460966440586946724823613395039907490538835864095651261881823607158133273625556588312752711454457357726924866322730543070980737221483709967766895341587497766993332440267376450107513252321662947883004817391672649803570493003832112358868301881920843430739252670385504587638208964352496815207726930654214429605116883377701760697941570218640276831382878152715486882444177818071284301915455870138455447455248358379702995093080723527019594379082235547878075072406610349083325287813654546720166329435448722375527638831047447869122912658838830494272241629116170020980552352375050773279594258253904378333033739972954012692990802811305257749194113797539833103073385050122799150271869302880967368400462321943441431659134068462707509247290177884454747704909986093414821931852472588228194740292602830703485575397217363741292072695243866686207676251658153808066682109040300977011071233823534858962912254142311918805051299027767187158787220065161894149012624057898810873699180325790629403513690254831272052285066206201958863487167459946642128733210480710595707628546702093425399293332821410134570349961821945948115479310792473132997024866447729165289240514344666374255427032461250708652939694248492454763514815737043515677583205783722808212329076953579558440794730228563051787729238664677115914543384488427868", "y": "-0.94234242815020252932992835937225892463937089065729378173238530460110014257565038818469121696910512270062938340190855825905845567953069390623809462030053406372292748298588446852067138789864175212613079352604901873865613380024435688634257406385237968423666042319992569700262383326426878996829514090413109286827745101670186297310908241913929627393991742765235686033406868108197393652426616625027833754517419526597525396346127417719455067683287647896163988865571437520686195589133074284258769750697228272061331484617210354548722898430468675496802547923798106968375692622459454547444157123355306688312974131323865063697197564631719438559942035006962915445307272096223039133876236730182552976341544269918904909686638695274705119554442182277923178760719385431122273160867152070144620909521048505803860938108783587641200730215401377517440566075007200227361128644085040332982905400897831535428832125321968835054450009618676019866659913447911545977970279729526429715952718360011438595556112579692108813666047817806591535552680659908598408152151432896684429411915344416804634752518759018293381535452002852442953793069766627288939346123380836066439255464946987232027803484570877528319521032817935560571604614537423170822547453243612414179050593193966000605049879956138807528874942328413384658076800612528644360652403477636698678148082068327891413496099375838988629326702238992068962894464104583591872952203143766426763135779283313039333227363597973464610042953175880131709767243590015230718062268130221648528537063284728713111439200314517381655829933119438430386728447685538993873103072756493172736629463273231839377476414981757460399948073924940912465587477973156983183010369703597703722732553756713165841145037455249185449232930681203903679716473756381491340333541257763449494253945772126669508813501053857885649713952929224248243063795494799800542588568392262749667487364464265766217944560310928650714942775120480935410302589150637123136301783667741676043008093271067373852392560168926261526863732564094492184"}}
E := {"x": "1.3719352781498608221620465034704869724450783648511839791686349295484938560995007834327479546438103081212110223605116754530767618390740773740967483651439265082058403956095110372603575784051302396297179691226617828724508318771612679217185238551677441445539168851866568655061005456827970725087039517029474919037427204640283852847048348190985927196967314781999159793943263744249300330753503173753806031466698235161651768784990762436716008876052452572533494827673505709179963722496762115547915801768844575020983800084811274874217316848150585220094597933266159206585792219097435003547258022744382322667321940755329265927216852767542859442029208773099977656427103264910357673635831155358022486554556725212330592652268698241239472086134611528352844957647449907809516692375952822633439487055769389127583651320855298066098317872524871785415198308148176947273318589291756792615575098533781169224382885436457428265710323681442169341190743383164876999765667245575121299442566974180320776795909706578600876957655844104131605836517018826369644386408267336640542097427641189298718966927134004813940669985236951558403343033591653536643305457703754437865464463129399442415811042935519746769860259339474949884512596364892430086607119700893003178684202980807597502878005542469198503383663503319033429101910878580551645615737593021877903274508417500931343726240880407733304712981814131098749245573074429961817381169968292641248017796529149472893262987912579626140524259661361225402320990531934911203956861933787903991766679360198206897473110744671789681746253799853437273563442052421032768552493979604769834724660745952831872438538315002561788452525117619575999640912129478375739208803378740848094909524257919461586016778093727744683600071251246768796162735097259169323668458268712003800414704962671778685890885494583688349841711352347736695817237823441351483595859652395098886157333407922591964222340036545030840504008847164545043006789245476228230252107789241138962690516068262224761373172252241212030840398443437965096", "y": "-2.1364208006243274553399657090908020825843342608763761214623729492579164466494876294831384326554112433371330389289374514157412767688545845435934178792532764807537051352338271875373783094891848639294090639413226548178119896504581393447649771101317733512813307502234443233477818658177415818180526663620776394777748155763334046857956820745332389649798928931345533653189374426832388958977230713097955665923430448534442784959584752541377106727737236547441246447704981930161196712142163188407454289339646596913561658985592370427535155743318515866073727267492816012924704653843162207831448344465410292003719856539464643631828808960479456103595171118158122631239008679008747041574851688559607452909800310363680001387376370713120827613234996666781932891309598247047357528572977684411048147721504687369601399182649508786188473922858966545869499896524071692877093234088147626225774139510468126725094544378763909203828081985762060065142312868954430687067479782413201531470406260781208634543006030493124245175794730423017729550667617286059201402893315991411749479461089114522171244395690082122328346232169527949679986101398387442409124346303937614161984325491112876301605366631956248534565477987703779092833306278948786178820141682035431167873873610648098871223343736395988640365086824669001262759694901749667469874591499848265381437254694182044981797793068562882590648729052364623125580082212428370887267480452822657392084655544186886582109450972798509892145793652120391706539482525366347593913942298316261297319903098932311728514375494335266183923385805516762933967559932025202074758221885451416588234260376903302482752775445669965577666949913023853530738361592360126632169364023578860936199493230754171804131768743862844332804092547370573058740993501286509201845524448917277970691394740988755563362786717548942215881339768275698401667800425145401074213401433792214584929182697251775636255123335661001236745817671433760712994278910498925742395137988592952970402889564394980310290389252714699609649705423638680062"}
c := {"center": {"x": "-0.04131742567254627637378899217225277549784856357075093470541933080018271682082731854249779888011910628388608099565026060641708665164503502220308702474901732857901567857487282517710357360419613772107756490317864904674562933215037087799284075875473909777118623584315400193274060140172305015513915680562387059930890742432319651571795497039916236081795847503333521772579767148308338608614403955615670223220612748593071391856680085621006064474719646888788573958476428702481018959778124332285446811025897299859880460184901044719128864683801894967290351621244435170129049997219643992684824273281801913635706794583190379146664069337906094001079823462939043929517526236730995661962303565107455327559639212273980854357746421988446384252799881894842688547597293312150216580149826720482251557924364622425491505153974300466016205570319666206884216296258295967015559860747647177647801314974169112779777838245727937817930884263844824102170186324578558055288558306317591364607046700629074220164357407946068772278227010130983116694523706545882420783831012999748049578384993811767342528975745596368192600349423425626269385753635106604807615286430183381986369389225356059889366596432421357418155711984406429447018157005706196123835081490191170074188830341047627822961636165230852637349718376665154974372188186328304403877197166178636013761929386037096254791766522274193504732184258928937789857936854073722060067779832244504290373634882380467154305891437461417683099065021881181606517773820257027557696585047007118487027934340011377250907263282520746785189568234293639178832367915317329759961825357741670743314794927588396317280235423511355296406454701883934096570148225402532296677006879660738527869156136491347841289964799378367772388681491781964248468159789818974584382999165940304120949253669296545200310419483091261253441619609780109320308732741877174809959268553706198925036099411657683602146846059319802489283150716984558450285121739428702491989999108624529347275174055982018240254908264803012255910451681523066529", "y": "-1.3777132928385262429252016946764667354507074244091805269202192239124816154269317556165070195258974737572911514414078048301954250496088935771474579695471460958800867571501288975224772614878496929426493601671866916129674129600390402661098387694498459322214355640970051955808134411779346955424215744599688587857623187487388633874886849773108352342591061306379231740517752814006741567952794968775540907101364839610717535897917694402648188211435283479099924870374342293722516031903961889121729510071332445349729446940751948912906353157655569449112611794542172852482299937723477931130573491083491456026600527938511805326794908993305555975914575109415671184350536127069784264881281815010104422854763199570821688106995731153491431489334781688558550924935882004641005106025242158013282881249787119976848717848399167833595141634803064144298739838334255438666129533344602647082304914707333640143228638360806646378227265868004342989318460574106179721350668249457437241869663204930091979322052279267194328470409020970342678922265883245004403560315052908188851762665937501096434662870691694962179059102312526592110635037778106130849218017110713100320166996475151515713934656116922781216681739137994148471413551251310501654551208579467037929165095724854374503799252324676167283977939061870267482197027161790960418102169796190854573992850769970189484159777321419144313444286262444756041030836673462337497960063721589406253942483345378237782795528289885420868156292661916771732752407542114652080001371390972973515826770366347752694892001012230161343162838494500055849437039320589234666967816203088107365307932049624503695981381407259567402936006566484465277739430072221892184499183096279027127361586555849880067916652860474464141509228142616378365239243893858807828417281589344623799942044330415043146122551399288308844528304868046571494669516103037702780976637085854446417551040797596284593050553836891262840696035093492500713858380667221054713053143679608709976610324584256838832163869513771787153865345289725032949"}, "radius_squared": "2.5729202872318859269757168050547627236377912882740923414540379562328983641337003250996862098380173676419855925163964914772926021257510948253730977098100362381344872647150802178836556611785775036081680240388415749221613721958986347655164492103305106696144449210165137228181255128102829844986753872330075711571591074346779583605683681177309715634255616282825998986511053760416372988937398020306261118267657584798924984950319853952842799226713762928568330429983222492102494708103932622505258088772192031072092707227950244737027543053997230888468887266497465062528914090162690114957635529522116825645856427476819685912042259553901244813248714497226999230372567274854280051725555111864132748688850526280834005685534491038745199645838902150913348860145369781100431204539371382814719323242751851557513210658282207680025991265849601463693826531375449701207829219285898356962840987750993837211491557580603699553507310335214359973656713343039361137436707069256004842693065013233365710857495040533416856334944927458751345571476210950113794974623156173498277680944316034367895388275250812340397538950093903041675682185102877495833621065171174151278895327621173747870548647726264267343203367004724889237798987077819506637174524511493350902102118903643455675069561869186648855846983774812218765521895337892240621408738641848996738151451277999902311949414097447970943834212557704554808009013802173829019791254420975422843348619806537363336364487508659451049952623526829401495505251318395815963616094877348593705044589854415199703873149564717321229691207544831208948951188292294928820793602429684690197860759101188914923790578924878795054759352630223411112159943174313750021798717782610881807977218024461095633677083817414420600245394700829644969492271482369605590842244504985358573780724410406324027591295843946285408499845356782884314186365643285602591199740071720453201168900248640072615385455173755096626230971613834162435725945863685017265201533082628387547290733175157261406306769972464189034291889290757311064"}
h := {"point": {"x": "-0.96543978637262040098931947795790620148181915283203125", "y": "-0.06663810442025401570287357344568590633571147918701171875"}, "direction": {"x": "0.93274441248468900839915327099535164125262974475231777788982092651307435625678560220251647538379134623241825262078682013179210465554645308430794346119180265822381579964639908615392569633883603134675648668567432062192896541257504505230358297987333035387358077416106726467568695031738407494728782884687192485007692043246625180179602519458180314053547885115623118444095429094560541578798907530807648450113913748784127537652563950043883853091298617744825962724710200428874760087611787958150192677290478785044569970508290247828972942542625517144432580640526934274603981865549861799951737979733702036390012277116953155361719382408269578943022269205257960048363569625024825989457001351531732109044812540962949711836740244483439992681818305714460005524940285127333971152106325487245436274681470709706055483847560218690862341953030601276020141762891228428854966918617336230473059097490754061922689343414211750712778564469536792655351791496318019985859198992166260367824377509919000162406134735942602754438657034801494204061922808987875576489216935189640278692562816624750787680216437703994417045289457727602886434992853442280716819980527687160574160754864556003479443829366220758110616169986039423770445344480841641608146537217125486418076365947841139839467316661761873353436737184297868350665367967744009047614294117208600589873770673185670845477149819685200540682967679868084394346831046459881688291088228950484207228903898249829748782493448277547156496081150945063948457091698179752605785413360872082365757125164849883212089457465695636915492813156727933597157589609814233595245945305884476601719346396398983816535057167215929453212073970758863151049482291999749130774247850549703127357717039133876114149567982913486358802288579782924678645165691811902767856613407008360692894139936895891487809900637164115557982574805716394011782344498819680252028691702207676078024561967536675347111378261194969716016853241671324835453969960752717562827464748143822310077271288961815464136159418946510389571481745445643516", "y": "1.0533345047829244273816199225126259785554086321319559466642514682357480676259200978309105584036250323346813135874550990113390692552621842546841280666908715933386963425292638842691845707597848792099205998960266443184958811850658206500870872088568377632395038318320769240743662009026621890332269305915209506008899497091772787309274889840965182423541824756499253712864013627912283690187589500920279955593929623413094491236193837310065187962104495774702638540902797303603062880213900794419511191683074486418089420996456845398650947979061834214207003341941741405360548100697671071957144399397340108178780892167123590316368012908287411500861247326973781207389333766198566844172818916917046403453988096481368076244411400451045468251060491192911240881800238157689346265928534072088737564136413682644482706634067676680168324562481385144620480341678745282926434295956304881442775617205110834277167479950241056130516835421113153018151610719243863857145580099558146871040254793864016988830455585528803027154862061002056300796776833394424977603151938926600028474344404124533981390592149744332747041366071159091347234164383171254833723136541773949361548505208422250797116586868247017040137541907419048389009404496282882585669638559916480155577193500199196558915682549243973106223593189938244738503474293530730911590491325540529731418961226912555799138351710990589971341985383499493463971479248590587680670416861670513590417616103555320801920871485700560881727286960550141130169094176815438463368587484500763735387209729442468477285147623392345002720637275332181966946946364220119229872541709732251759823349060165563591226376866488363134232751762302252912174236112150103025636837593774516076901253286043549803836512970181481872567882353365623877917560239237601973439249351365315405716887569303232724542797036202315594068821637412479872669023371055877815931412356862664696056912585397514742630950060876045128720651113425686264189907667782007061124864607138656889330175735986721849636000759943694619683857662627882126"}}
G := {"x": "-0.04131742567254627637378899217225277549784856357075093470541933080018271682082731854249779888011910628388608099565026060641708665164503502220308702474901732857901567857487282517710357360419613772107756490317864904674562933215037087799284075875473909777118623584315400193274060140172305015513915680562387059930890742432319651571795497039916236081795847503333521772579767148308338608614403955615670223220612748593071391856680085621006064474719646888788573958476428702481018959778124332285446811025897299859880460184901044719128864683801894967290351621244435170129049997219643992684824273281801913635706794583190379146664069337906094001079823462939043929517526236730995661962303565107455327559639212273980854357746421988446384252799881894842688547597293312150216580149826720482251557924364622425491505153974300466016205570319666206884216296258295967015559860747647177647801314974169112779777838245727937817930884263844824102170186324578558055288558306317591364607046700629074220164357407946068772278227010130983116694523706545882420783831012999748049578384993811767342528975745596368192600349423425626269385753635106604807615286430183381986369389225356059889366596432421357418155711984406429447018157005706196123835081490191170074188830341047627822961636165230852637349718376665154974372188186328304403877197166178636013761929386037096254791766522274193504732184258928937789857936854073722060067779832244504290373634882380467154305891437461417683099065021881181606517773820257027557696585047007118487027934340011377250907263282520746785189568234293639178832367915317329759961825357741670743314794927588396317280235423511355296406454701883934096570148225402532296677006879660738527869156136491347841289964799378367772388681491781964248468159789818974584382999165940304120949253669296545200310419483091261253441619609780109320308732741877174809959268553706198925036099411657683602146846059319802489283150716984558450285121739428702491989999108624529347275174055982018240254908264803012255910451681523066529", "y": "-1.3777132928385262429252016946764667354507074244091805269202192239124816154269317556165070195258974737572911514414078048301954250496088935771474579695471460958800867571501288975224772614878496929426493601671866916129674129600390402661098387694498459322214355640970051955808134411779346955424215744599688587857623187487388633874886849773108352342591061306379231740517752814006741567952794968775540907101364839610717535897917694402648188211435283479099924870374342293722516031903961889121729510071332445349729446940751948912906353157655569449112611794542172852482299937723477931130573491083491456026600527938511805326794908993305555975914575109415671184350536127069784264881281815010104422854763199570821688106995731153491431489334781688558550924935882004641005106025242158013282881249787119976848717848399167833595141634803064144298739838334255438666129533344602647082304914707333640143228638360806646378227265868004342989318460574106179721350668249457437241869663204930091979322052279267194328470409020970342678922265883245004403560315052908188851762665937501096434662870691694962179059102312526592110635037778106130849218017110713100320166996475151515713934656116922781216681739137994148471413551251310501654551208579467037929165095724854374503799252324676167283977939061870267482197027161790960418102169796190854573992850769970189484159777321419144313444286262444756041030836673462337497960063721589406253942483345378237782795528289885420868156292661916771732752407542114652080001371390972973515826770366347752694892001012230161343162838494500055849437039320589234666967816203088107365307932049624503695981381407259567402936006566484465277739430072221892184499183096279027127361586555849880067916652860474464141509228142616378365239243893858807828417281589344623799942044330415043146122551399288308844528304868046571494669516103037702780976637085854446417551040797596284593050553836891262840696035093492500713858380667221054713053143679608709976610324584256838832163869513771787153865345289725032949"}
F := {"x": "-1.45457012949495337490962448781499252344077549199268584857947359114885928974115542051774355240404852068898318435181219666591093514236414741850292241464196116536387175275925668761456472561352251507187309892901908096594209054146200967770420537267722234009628935687296486937158174848624317281898226531419523310236053531267477831614074475989691744133264842826658641484592171739109680524763839648769400761108207848802660471563267795609172217709963819502912096193687914496761675144523869820050051639740240349929598921217914838180430897849109642135526682575150462406116022185413638020842228774007427053944632996719673417565496666351240782422451734656877864423306085122565568060282918683795135520664845676671267635238179826389287489366945879073213826671669085702395600084059181667298897986406423136126819523516501581593015589865888050267920415673998361406764305614412862281451353615286149917803384530856030158292965005342111341616247806480805886108233789068386395723639763143061356208287811881678146314133012461303282291754217601355461285431744699365901520131046399516521874727222831240875791900551216366836572201843186748576048285149897911142627383409744706543936843622220040182534914017363562357739162277660336693113741359989312371935219690490171230674703327755153690308536071786520644239763485158462125263911770262576051060268942947083505946845941848625720056594186659168863072171604452447062293947259347415421060925235056255663241241662000719096771440726657374617236245452959863167154961789431893276891722662282004823476545634011759390387841674467121651093299156354844987205448590511531039833876197314705111358945853997048328477338160579963628189549417745588821985442047546729958004833554852177311542747710536034182380778075496031616458563670552229642405450581019000646246045556965310877259529693912019406005300352743037585598789843718167864455877133631363386711645532902541286846517092484089913383606389905614567330638135933619687286501076109660448321455508794586284094241539052018144820224887797425784", "y": "-0.61900578505272503051043768026213138831708058794198493237806549856704678420437588174987560639638370417744926395387815824464957333036320261070149805984101571100646837906643060750757621348651452195588965639305072840812283626961994118745470042876791851316154037797056606781384501653812780926679048255786007809374982192114432208918168788008843150353831936814129298278461312011810941769283592244531261482792992306869922868362506362639192696951333304107586032930437026572838353516657605898360047308030182937858972348959115273982775505719926230321514963215915296920398952216037936544296986377015726200494811993375589670217610090261316558482339791006732197374620635751308214881877119414606013927997260887779633748266150915938620353654345667103351689585621657622346526834775066316155176147780695525840960365141488268810018093467471617427279797801444391844551658326010576679388356899041991535613627323428493835526264497502466259134946082792579287556338567165016729522689201490789753241010985280412644117650233115176676282938641492039496057177367898249659540458707858876706980813456933078020297719724555252345412839741578248192893116879174885864783496674591901551262639456018893138987980002882845178499937962236722171302822754768986446904563178390606501363751609129563459275907912990715337016343594218322533663297480925334437665484468457583339865217615742754060362398434725248889564815911344963041086526469903561551158003111465695889834816056069723318441667916717131517589653325588629565660888004836296857343336376337631936612696265301250565024022911834833487649065187091532672591774105207247981423816037223457049092099873688491692282050632199450770247404985520836577368290021689791933185236798809455883317015369770860839502143637378621836717374942864311064549890387297719696291926939198413307288823160810276754731752699678174445876712317809300044877398727379166782501728988979407935498459843381215244446462525155512407147224824239431836837111493706244669828177596041186973540373497748288746980809851558113858344"}

Need to prove:
collinear(B, F, G)

Proof:
By line_definition on E, C, f we get f == Line(C, E)
By line_definition on C, F, h we get h == Line(C, F)
By line_definition on E, B, g we get g == Line(B, E)
By circle_definition on E, F, C, c we get c == Circle(C, E, F)
By circle_definition on F, E, D, c we get c == Circle(D, E, F)
By circle_definition on C, F, D, c we get c == Circle(C, D, F)
By line_intersection_definition on C, h, f we get C == line_intersection(f, h)
By between_imply_not_between on C, D, A we get collinear_and_not_between(A, C, D)
By between_imply_not_between on A, D, C we get collinear_and_not_between(C, A, D)
By circle_radius_v0_r on C, c we get radius(c) == distance(C, center(c))
By circle_radius_v0_r on F, c we get radius(c) == distance(F, center(c))
By circle_radius_v0_r on D, c we get radius(c) == distance(D, center(c))
By circle_radius_v0_r on E, c we get radius(c) == distance(E, center(c))
By angle_bisector_draw_angle_v0 on B, C, A we get exists(Line(A, C), Line(B, C))
By in_imply_concyclic on D, E, C, F we get concyclic(C, D, E, F)
By angle_bisectors_are_perpendicular on B, C, A we get perpendicular(external_angle_bisector(A, C, B), internal_angle_bisector(A, C, B))
By angle_bisector_draw_angle_v1 on C, B, D we get exists(Line(B, C), Line(B, D))
By angle_bisector_draw_angle_v0 on A, C, B we get exists(Line(A, C), Line(B, C))
By angle_bisector_draw_angle_v1 on A, C, B we get exists(Line(A, C), Line(B, C))
By angle_bisector_draw_angle_v1 on D, B, C we get exists(Line(B, C), Line(B, D))
By angle_bisector_draw_angle_v1 on B, C, A we get exists(Line(A, C), Line(B, C))
By power_of_a_point_on_circle on E, c we get 0 == power_of_a_point(E, c)
By power_of_a_point_on_circle on F, c we get 0 == power_of_a_point(F, c)
By power_of_a_point_on_circle on C, c we get 0 == power_of_a_point(C, c)
By angles_on_chord_v2 on F, D, C, E, c we get angle(F, C, D) == angle(F, E, D) + 180 mod 360
By power_of_a_point_on_circle on D, c we get 0 == power_of_a_point(D, c)
By angles_on_chord_v1 on D, E, F, C, c we get angle(D, C, E) == angle(D, F, E) mod 360
By angles_on_chord_v0 on D, C, F, E, c we get angle(D, E, C) == angle(D, F, C) mod 360
By angles_on_chord_v3 on D, F, C, E, c we get angle(D, C, F) == angle(D, E, F) + 180 mod 360
By angles_on_chord_v2 on C, E, D, F, c we get angle(C, D, E) == angle(C, F, E) + 180 mod 360
By angles_on_chord_v3 on C, E, F, D, c we get angle(C, F, E) == angle(C, D, E) + 180 mod 360
By angles_on_chord_v1 on C, D, F, E, c we get angle(C, E, D) == angle(C, F, D) mod 360
By angles_on_chord_v3 on E, C, D, F, c we get angle(E, D, C) == angle(E, F, C) + 180 mod 360
By angles_on_chord_v1 on E, F, C, D, c we get angle(E, C, F) == angle(E, D, F) mod 360
By angles_on_chord_v0 on C, F, D, E, c we get angle(C, D, F) == angle(C, E, F) mod 360
By angles_on_chord_v0 on E, D, C, F, c we get angle(E, C, D) == angle(E, F, D) mod 360
By angles_on_chord_v2 on E, C, F, D, c we get angle(E, F, C) == angle(E, D, C) + 180 mod 360
By angles_on_chord_v3 on F, D, E, C, c we get angle(F, E, D) == angle(F, C, D) + 180 mod 360
By angles_on_chord_v0 on F, E, D, C, c we get angle(F, C, E) == angle(F, D, E) mod 360
By angle_to_center on D, E, F, c we get 2 * angle(D, E, F) == angle(D, center(c), F) mod 360
By angle_to_center on E, D, C, c we get 2 * angle(E, D, C) == angle(E, center(c), C) mod 360
By angle_to_center on D, C, E, c we get 2 * angle(D, C, E) == angle(D, center(c), E) mod 360
By angle_to_center on F, D, E, c we get 2 * angle(F, D, E) == angle(F, center(c), E) mod 360
By angle_to_center on D, C, F, c we get 2 * angle(D, C, F) == angle(D, center(c), F) mod 360
By angles_on_chord_v1 on F, C, E, D, c we get angle(F, D, C) == angle(F, E, C) mod 360
By angles_on_chord_v2 on D, F, E, C, c we get angle(D, E, F) == angle(D, C, F) + 180 mod 360
By angle_to_center on C, E, D, c we get 2 * angle(C, E, D) == angle(C, center(c), D) mod 360
By angle_to_center on F, D, C, c we get 2 * angle(F, D, C) == angle(F, center(c), C) mod 360
By angle_to_center on F, E, C, c we get 2 * angle(F, E, C) == angle(F, center(c), C) mod 360
By angle_to_center on C, E, F, c we get 2 * angle(C, E, F) == angle(C, center(c), F) mod 360
By angle_to_center on C, D, E, c we get 2 * angle(C, D, E) == angle(C, center(c), E) mod 360
By angle_to_center on C, F, E, c we get 2 * angle(C, F, E) == angle(C, center(c), E) mod 360
By angle_to_center on C, F, D, c we get 2 * angle(C, F, D) == angle(C, center(c), D) mod 360
By angle_to_center on E, C, D, c we get 2 * angle(E, C, D) == angle(E, center(c), D) mod 360
By angle_to_center on F, C, E, c we get 2 * angle(F, C, E) == angle(F, center(c), E) mod 360
By angle_to_center on E, F, C, c we get 2 * angle(E, F, C) == angle(E, center(c), C) mod 360
By angle_to_center on E, C, F, c we get 2 * angle(E, C, F) == angle(E, center(c), F) mod 360
By angle_to_center on D, F, E, c we get 2 * angle(D, F, E) == angle(D, center(c), E) mod 360
By angle_to_center on D, F, C, c we get 2 * angle(D, F, C) == angle(D, center(c), C) mod 360
By angle_to_center on F, C, D, c we get 2 * angle(F, C, D) == angle(F, center(c), D) mod 360
By angle_to_center on E, F, D, c we get 2 * angle(E, F, D) == angle(E, center(c), D) mod 360
By angle_to_center on C, D, F, c we get 2 * angle(C, D, F) == angle(C, center(c), F) mod 360
By angle_to_center on E, D, F, c we get 2 * angle(E, D, F) == angle(E, center(c), F) mod 360
By angle_to_center on D, E, C, c we get 2 * angle(D, E, C) == angle(D, center(c), C) mod 360
By angle_to_center on F, E, D, c we get 2 * angle(F, E, D) == angle(F, center(c), D) mod 360
By log_of_2_times_distance on A, C, A, D we get log(distance(A, C)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(A, D))
By collinear_definition on C, D, A we get D in Line(A, C), A in Line(C, D), Line(A, C) == Line(C, D), 0 == 2 * angle(D, C, A) mod 360
By collinear_definition on C, A, D we get A in Line(C, D), D in Line(A, C), Line(A, C) == Line(C, D), 0 == 2 * angle(A, C, D) mod 360
By collinear_definition on D, C, A we get C in Line(A, D), A in Line(C, D), Line(A, D) == Line(C, D), 0 == 2 * angle(C, D, A) mod 360
By collinear_definition on D, A, C we get A in Line(C, D), C in Line(A, D), Line(A, D) == Line(C, D), 0 == 2 * angle(A, D, C) mod 360
By collinear_definition on A, C, D we get C in Line(A, D), D in Line(A, C), Line(A, C) == Line(A, D), 0 == 2 * angle(C, A, D) mod 360
By log_of_2_times_distance on A, C, C, D we get log(distance(A, C)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(C, D))
By collinear_definition on A, D, C we get D in Line(A, C), C in Line(A, D), Line(A, C) == Line(A, D), 0 == 2 * angle(D, A, C) mod 360
By power_of_a_point_definition on A, C, D, c we get log(power_of_a_point(A, c)) == log(distance(A, C)) + log(distance(A, D))
By between_implies_angles on C, D, A we get 180 == angle(C, D, A) mod 360, 0 == angle(D, A, C) mod 360, 0 == angle(A, C, D) mod 360
By between_implies_angles on A, D, C we get 180 == angle(A, D, C) mod 360, 0 == angle(D, C, A) mod 360, 0 == angle(C, A, D) mod 360
By median_definition on B, A, C, Line(B, D) we get Line(B, D) == median(B, A, C)
By line_intersection_definition on B, g, Line(B, C) we get B == line_intersection(g, Line(B, C))
By line_intersection_definition on C, f, Line(C, G) we get C == line_intersection(f, Line(C, G))
By line_intersection_definition on B, Line(B, D), Line(B, C) we get B == line_intersection(Line(B, C), Line(B, D))
By line_intersection_definition on D, Line(D, F), Line(A, C) we get D == line_intersection(Line(A, C), Line(D, F))
By line_intersection_definition on D, Line(D, E), Line(B, D) we get D == line_intersection(Line(B, D), Line(D, E))
By line_intersection_definition on D, Line(D, E), Line(A, C) we get D == line_intersection(Line(A, C), Line(D, E))
By line_intersection_definition on B, Line(B, D), g we get B == line_intersection(g, Line(B, D))
By line_intersection_definition on C, Line(B, C), Line(A, C) we get C == line_intersection(Line(A, C), Line(B, C))
By line_intersection_definition on E, Line(E, F), Line(D, E) we get E == line_intersection(Line(D, E), Line(E, F))
By line_intersection_definition on C, Line(B, C), f we get C == line_intersection(f, Line(B, C))
By line_intersection_definition on E, f, Line(E, F) we get E == line_intersection(f, Line(E, F))
By line_intersection_definition on E, Line(E, G), Line(D, E) we get E == line_intersection(Line(D, E), Line(E, G))
By line_intersection_definition on F, h, Line(E, F) we get F == line_intersection(h, Line(E, F))
By median_definition on G, A, C, Line(D, G) we get Line(D, G) == median(G, A, C)
By line_intersection_definition on G, Line(D, G), Line(F, G) we get G == line_intersection(Line(D, G), Line(F, G))
By line_intersection_definition on F, h, Line(F, G) we get F == line_intersection(h, Line(F, G))
By median_definition on E, A, C, Line(D, E) we get Line(D, E) == median(E, A, C)
By line_intersection_definition on D, Line(D, G), Line(A, C) we get D == line_intersection(Line(A, C), Line(D, G))
By line_intersection_definition on D, Line(D, E), Line(D, F) we get D == line_intersection(Line(D, E), Line(D, F))
By line_intersection_definition on G, Line(E, G), Line(C, G) we get G == line_intersection(Line(C, G), Line(E, G))
By line_intersection_definition on C, Line(C, G), Line(A, C) we get C == line_intersection(Line(A, C), Line(C, G))
By line_intersection_definition on C, Line(A, C), h we get C == line_intersection(h, Line(A, C))
By line_intersection_definition on C, Line(A, C), f we get C == line_intersection(f, Line(A, C))
By perpendicular_line_definition on F, h, f we get h == perpendicular_line(F, f)
By perpendicular_line_definition on E, f, h we get f == perpendicular_line(E, h)
By line_intersection_definition on F, Line(D, F), Line(E, F) we get F == line_intersection(Line(D, F), Line(E, F))
By median_definition on F, C, A, Line(D, F) we get Line(D, F) == median(F, A, C)
By line_intersection_definition on E, f, Line(E, G) we get E == line_intersection(f, Line(E, G))
By line_intersection_definition on F, Line(F, G), Line(D, F) we get F == line_intersection(Line(D, F), Line(F, G))
By line_intersection_definition on E, Line(D, E), g we get E == line_intersection(g, Line(D, E))
By line_intersection_definition on D, Line(D, F), Line(D, G) we get D == line_intersection(Line(D, F), Line(D, G))
By line_intersection_definition on D, Line(D, G), Line(B, D) we get D == line_intersection(Line(B, D), Line(D, G))
By line_intersection_definition on G, Line(C, G), Line(F, G) we get G == line_intersection(Line(C, G), Line(F, G))
By line_intersection_definition on C, h, Line(C, G) we get C == line_intersection(h, Line(C, G))
By line_intersection_definition on E, f, Line(D, E) we get E == line_intersection(f, Line(D, E))
By line_intersection_definition on C, Line(B, C), h we get C == line_intersection(h, Line(B, C))
By line_intersection_definition on G, Line(D, G), Line(C, G) we get G == line_intersection(Line(C, G), Line(D, G))
By line_intersection_definition on F, Line(D, F), h we get F == line_intersection(h, Line(D, F))
By perpendicular_line_definition on C, h, f we get h == perpendicular_line(C, f)
By line_intersection_definition on D, Line(B, D), Line(D, F) we get D == line_intersection(Line(B, D), Line(D, F))
By line_intersection_definition on D, Line(D, E), Line(D, G) we get D == line_intersection(Line(D, E), Line(D, G))
By line_intersection_definition on G, Line(E, G), Line(D, G) we get G == line_intersection(Line(D, G), Line(E, G))
By line_intersection_definition on D, Line(B, D), Line(A, C) we get D == line_intersection(Line(A, C), Line(B, D))
By line_intersection_definition on C, Line(B, C), Line(C, G) we get C == line_intersection(Line(B, C), Line(C, G))
By perpendicular_line_definition on C, f, h we get f == perpendicular_line(C, h)
By same_angle_v3 on D, C, A, F we get angle(C, D, F) == angle(A, D, F) + 180 mod 360
By same_angle_v1 on C, A, D, E we get angle(A, C, E) == angle(D, C, E) mod 360
By perpendicular_direction_conditions_v0_r on C, F, C, E we get 180 == 2 * direction(C, F) - 2 * direction(C, E) mod 360
By same_angle_v1 on C, D, A, F we get angle(A, C, F) == angle(D, C, F) mod 360
By perpendicular_direction_conditions_v0_r on E, C, F, C we get 180 == 2 * direction(E, C) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on C, E, C, F we get 180 == 2 * direction(C, E) - 2 * direction(C, F) mod 360
By same_angle_v2 on D, C, A, E we get angle(C, D, E) == angle(A, D, E) + 180 mod 360
By perpendicular_direction_conditions_v0_r on F, C, E, C we get 180 == 2 * direction(F, C) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on E, C, C, F we get 180 == 2 * direction(E, C) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on C, E, F, C we get 180 == 2 * direction(C, E) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on F, C, C, E we get 180 == 2 * direction(F, C) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on C, F, E, C we get 180 == 2 * direction(C, F) - 2 * direction(E, C) mod 360
By same_angle_v2 on D, C, A, B we get angle(C, D, B) == angle(A, D, B) + 180 mod 360
By same_angle_v1 on C, D, A, G we get angle(A, C, G) == angle(D, C, G) mod 360
By projection_definition on E, C, h we get C == projection(E, h)
By same_angle_v2 on D, C, A, G we get angle(C, D, G) == angle(A, D, G) + 180 mod 360
By same_angle_v1 on C, A, D, B we get angle(A, C, B) == angle(D, C, B) mod 360
By projection_definition on F, C, f we get C == projection(F, f)
By perpendicular_angle_conditions_v0 on E, C, F we get angle(E, C, F) == orientation(C, F, E) mod 360
By reverse_direction on C, E we get 180 == direction(C, E) - direction(E, C) mod 360
By perpendicular_angle_conditions_v0 on F, C, E we get angle(F, C, E) == orientation(C, E, F) mod 360
By reverse_direction on A, C we get 180 == direction(A, C) - direction(C, A) mod 360
By reverse_direction on C, F we get 180 == direction(C, F) - direction(F, C) mod 360
By reverse_direction on D, A we get 180 == direction(D, A) - direction(A, D) mod 360
By reverse_direction on F, E we get 180 == direction(F, E) - direction(E, F) mod 360
By reverse_direction on F, C we get 180 == direction(F, C) - direction(C, F) mod 360
By reverse_direction on D, E we get 180 == direction(D, E) - direction(E, D) mod 360
By reverse_direction on D, F we get 180 == direction(D, F) - direction(F, D) mod 360
By reverse_direction on E, C we get 180 == direction(E, C) - direction(C, E) mod 360
By reverse_direction on C, A we get 180 == direction(C, A) - direction(A, C) mod 360
By reverse_direction on F, D we get 180 == direction(F, D) - direction(D, F) mod 360
By reverse_direction on D, C we get 180 == direction(D, C) - direction(C, D) mod 360
By reverse_direction on C, D we get 180 == direction(C, D) - direction(D, C) mod 360
By reverse_direction on E, F we get 180 == direction(E, F) - direction(F, E) mod 360
By reverse_direction on E, D we get 180 == direction(E, D) - direction(D, E) mod 360
By reverse_direction on A, D we get 180 == direction(A, D) - direction(D, A) mod 360
By internal_angle_bisector_definition_v0_r on A, D, A, C we get Line(C, D) == internal_angle_bisector(A, C, A)
By external_angle_bisector_definition_v0 on B, F, A, C we get 180 == angle(B, C, F) + angle(A, C, F) mod 360
By reverse_direction on G, E we get 180 == direction(G, E) - direction(E, G) mod 360
By reverse_direction on G, C we get 180 == direction(G, C) - direction(C, G) mod 360
By internal_angle_bisector_definition_v0_r on C, D, C, A we get Line(A, D) == internal_angle_bisector(C, A, C)
By internal_angle_bisector_definition_v0_r on D, C, D, A we get Line(A, C) == internal_angle_bisector(D, A, D)
By internal_angle_bisector_definition_v0_r on A, C, A, D we get Line(C, D) == internal_angle_bisector(A, D, A)
By reverse_direction on G, D we get 180 == direction(G, D) - direction(D, G) mod 360
By internal_angle_bisector_definition_v0_r on C, A, C, D we get Line(A, D) == internal_angle_bisector(C, D, C)
By internal_angle_bisector_definition_v0 on B, E, A, C we get angle(B, C, E) == angle(E, C, A) mod 360
By internal_angle_bisector_definition_v0 on A, E, B, C we get angle(A, C, E) == angle(E, C, B) mod 360
By internal_angle_bisector_definition_v0_r on D, A, D, C we get Line(A, C) == internal_angle_bisector(D, C, D)
By reverse_direction on G, F we get 180 == direction(G, F) - direction(F, G) mod 360
By altitude_definition on E, F, C, f we get f == altitude(E, C, F)
By sss_anti_congruence_v0 on G, C, D, G, D, C we get anti_congruent_triangles(C, D, G, D, C, G)
By sss_anti_congruence_v0 on G, C, D, G, D, C we get anti_congruent_triangles(C, D, G, D, C, G)
By isosceles_triangle_properties on G, C, F we get distance(C, G) == distance(F, G), angle(C, F, G) == angle(G, C, F) mod 360
By sss_anti_congruence_v0 on C, D, G, D, C, G we get anti_congruent_triangles(C, D, G, D, C, G)
By sss_anti_congruence_v1 on G, D, C, G, C, D we get anti_congruent_triangles(C, D, G, D, C, G)
By sss_anti_congruence_v1 on D, C, G, C, D, G we get anti_congruent_triangles(C, D, G, D, C, G)
By sas_anti_congruence on C, G, E, E, G, C we get anti_congruent_triangles(C, E, G, E, C, G)
By isosceles_triangle_properties on G, D, F we get distance(D, G) == distance(F, G), angle(D, F, G) == angle(G, D, F) mod 360
By sss_anti_congruence_v0 on C, D, G, D, C, G we get anti_congruent_triangles(C, D, G, D, C, G)
By sss_anti_congruence_v0 on G, C, D, G, D, C we get anti_congruent_triangles(C, D, G, D, C, G)
By sss_anti_congruence_v0 on D, G, C, C, G, D we get anti_congruent_triangles(C, D, G, D, C, G)
By altitude_definition on F, E, C, h we get h == altitude(F, C, E)
By sas_anti_congruence on C, G, F, F, G, C we get anti_congruent_triangles(C, F, G, F, C, G)
By sss_anti_congruence_v0 on C, D, G, D, C, G we get anti_congruent_triangles(C, D, G, D, C, G)
By sss_anti_congruence_v0 on D, G, C, C, G, D we get anti_congruent_triangles(C, D, G, D, C, G)
By isosceles_triangle_properties on G, E, D we get distance(D, G) == distance(E, G), angle(E, D, G) == angle(G, E, D) mod 360
By sss_anti_congruence_v1 on G, D, C, G, C, D we get anti_congruent_triangles(C, D, G, D, C, G)
By sas_anti_congruence on F, G, D, D, G, F we get anti_congruent_triangles(D, F, G, F, D, G)
By isosceles_triangle_properties on G, E, C we get distance(C, G) == distance(E, G), angle(E, C, G) == angle(G, E, C) mod 360
By sss_anti_congruence_v1 on C, G, D, D, G, C we get anti_congruent_triangles(C, D, G, D, C, G)
By sss_anti_congruence_v0 on D, G, C, C, G, D we get anti_congruent_triangles(C, D, G, D, C, G)
By sss_anti_congruence_v0 on C, D, G, D, C, G we get anti_congruent_triangles(C, D, G, D, C, G)
By sss_anti_congruence_v1 on C, G, D, D, G, C we get anti_congruent_triangles(C, D, G, D, C, G)
By sss_anti_congruence_v1 on D, C, G, C, D, G we get anti_congruent_triangles(C, D, G, D, C, G)
By sss_anti_congruence_v1 on D, C, G, C, D, G we get anti_congruent_triangles(C, D, G, D, C, G)
By sas_anti_congruence on C, G, D, D, G, C we get anti_congruent_triangles(C, D, G, D, C, G)
By isosceles_triangle_properties on G, F, D we get distance(D, G) == distance(F, G), angle(F, D, G) == angle(G, F, D) mod 360
By sas_anti_congruence on E, G, D, D, G, E we get anti_congruent_triangles(D, E, G, E, D, G)
By isosceles_triangle_properties on G, F, C we get distance(C, G) == distance(F, G), angle(F, C, G) == angle(G, F, C) mod 360
By isosceles_triangle_properties on G, D, C we get distance(C, G) == distance(D, G), angle(D, C, G) == angle(G, D, C) mod 360
By isosceles_triangle_properties on G, C, E we get distance(C, G) == distance(E, G), angle(C, E, G) == angle(G, C, E) mod 360
By sss_anti_congruence_v0 on D, G, C, C, G, D we get anti_congruent_triangles(C, D, G, D, C, G)
By sss_anti_congruence_v0 on D, G, C, C, G, D we get anti_congruent_triangles(C, D, G, D, C, G)
By sss_anti_congruence_v0 on G, C, D, G, D, C we get anti_congruent_triangles(C, D, G, D, C, G)
By sas_anti_congruence on D, G, C, C, G, D we get anti_congruent_triangles(C, D, G, D, C, G)
By sss_anti_congruence_v1 on D, C, G, C, D, G we get anti_congruent_triangles(C, D, G, D, C, G)
By sss_anti_congruence_v0 on G, C, D, G, D, C we get anti_congruent_triangles(C, D, G, D, C, G)
By sss_anti_congruence_v0 on G, C, D, G, D, C we get anti_congruent_triangles(C, D, G, D, C, G)
By sas_anti_congruence on D, G, F, F, G, D we get anti_congruent_triangles(D, F, G, F, D, G)
By sss_anti_congruence_v1 on G, D, C, G, C, D we get anti_congruent_triangles(C, D, G, D, C, G)
By isosceles_triangle_properties on G, C, D we get distance(C, G) == distance(D, G), angle(C, D, G) == angle(G, C, D) mod 360
By sss_anti_congruence_v1 on D, C, G, C, D, G we get anti_congruent_triangles(C, D, G, D, C, G)
By sss_anti_congruence_v1 on D, C, G, C, D, G we get anti_congruent_triangles(C, D, G, D, C, G)
By sss_anti_congruence_v0 on D, G, C, C, G, D we get anti_congruent_triangles(C, D, G, D, C, G)
By sas_anti_congruence on F, G, C, C, G, F we get anti_congruent_triangles(C, F, G, F, C, G)
By sss_anti_congruence_v1 on G, D, C, G, C, D we get anti_congruent_triangles(C, D, G, D, C, G)
By sss_anti_congruence_v1 on C, G, D, D, G, C we get anti_congruent_triangles(C, D, G, D, C, G)
By sss_anti_congruence_v1 on G, D, C, G, C, D we get anti_congruent_triangles(C, D, G, D, C, G)
By sas_anti_congruence on E, G, C, C, G, E we get anti_congruent_triangles(C, E, G, E, C, G)
By isosceles_triangle_properties on G, D, E we get distance(D, G) == distance(E, G), angle(D, E, G) == angle(G, D, E) mod 360
By sas_anti_congruence on D, G, E, E, G, D we get anti_congruent_triangles(D, E, G, E, D, G)
By sss_anti_congruence_v1 on C, G, D, D, G, C we get anti_congruent_triangles(C, D, G, D, C, G)
By sss_anti_congruence_v0 on C, D, G, D, C, G we get anti_congruent_triangles(C, D, G, D, C, G)
By sss_anti_congruence_v0 on C, D, G, D, C, G we get anti_congruent_triangles(C, D, G, D, C, G)
By sss_anti_congruence_v1 on C, G, D, D, G, C we get anti_congruent_triangles(C, D, G, D, C, G)
By sss_anti_congruence_v1 on C, G, D, D, G, C we get anti_congruent_triangles(C, D, G, D, C, G)
By sss_anti_congruence_v1 on G, D, C, G, C, D we get anti_congruent_triangles(C, D, G, D, C, G)
By external_angle_bisector_definition_v0 on D, E, C, B we get 180 == angle(D, B, E) + angle(C, B, E) mod 360
By concurrent_sufficient_conditions on Line(D, F), Line(E, F), h we get concurrent(h, Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on g, f, Line(D, E) we get concurrent(f, g, Line(D, E))
By concurrent_sufficient_conditions on f, h, Line(C, G) we get concurrent(f, h, Line(C, G))
By concurrent_sufficient_conditions on Line(D, F), Line(A, C), Line(D, E) we get concurrent(Line(A, C), Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(E, F), Line(D, E), f we get concurrent(f, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(D, F), Line(D, E), Line(D, G) we get concurrent(Line(D, E), Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on h, Line(C, G), Line(B, C) we get concurrent(h, Line(B, C), Line(C, G))
By concurrent_sufficient_conditions on Line(B, C), f, Line(A, C) we get concurrent(f, Line(A, C), Line(B, C))
By concurrent_sufficient_conditions on Line(A, C), Line(D, G), Line(B, D) we get concurrent(Line(A, C), Line(B, D), Line(D, G))
By concurrent_sufficient_conditions on Line(B, C), f, h we get concurrent(f, h, Line(B, C))
By concurrent_sufficient_conditions on Line(C, G), Line(B, C), Line(A, C) we get concurrent(Line(A, C), Line(B, C), Line(C, G))
By concurrent_sufficient_conditions on Line(A, C), Line(D, E), Line(D, G) we get concurrent(Line(A, C), Line(D, E), Line(D, G))
By concurrent_sufficient_conditions on Line(A, C), h, f we get concurrent(f, h, Line(A, C))
By concurrent_sufficient_conditions on Line(D, G), Line(D, E), Line(A, C) we get concurrent(Line(A, C), Line(D, E), Line(D, G))
By concurrent_sufficient_conditions on Line(F, G), Line(D, G), Line(C, G) we get concurrent(Line(C, G), Line(D, G), Line(F, G))
By concurrent_sufficient_conditions on Line(B, C), h, f we get concurrent(f, h, Line(B, C))
By concurrent_sufficient_conditions on Line(B, C), Line(C, G), Line(A, C) we get concurrent(Line(A, C), Line(B, C), Line(C, G))
By concurrent_sufficient_conditions on Line(C, G), Line(B, C), h we get concurrent(h, Line(B, C), Line(C, G))
By concurrent_sufficient_conditions on Line(A, C), Line(B, C), h we get concurrent(h, Line(A, C), Line(B, C))
By concurrent_sufficient_conditions on Line(A, C), f, Line(C, G) we get concurrent(f, Line(A, C), Line(C, G))
By concurrent_sufficient_conditions on Line(D, E), Line(B, D), Line(D, G) we get concurrent(Line(B, D), Line(D, E), Line(D, G))
By concurrent_sufficient_conditions on Line(D, F), Line(D, E), Line(A, C) we get concurrent(Line(A, C), Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on f, h, Line(A, C) we get concurrent(f, h, Line(A, C))
By concurrent_sufficient_conditions on Line(B, C), Line(A, C), Line(C, G) we get concurrent(Line(A, C), Line(B, C), Line(C, G))
By concurrent_sufficient_conditions on Line(D, G), Line(A, C), Line(D, F) we get concurrent(Line(A, C), Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on Line(D, E), g, f we get concurrent(f, g, Line(D, E))
By concurrent_sufficient_conditions on Line(D, F), Line(D, E), Line(B, D) we get concurrent(Line(B, D), Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(D, F), Line(B, D), Line(D, E) we get concurrent(Line(B, D), Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(B, C), Line(C, G), h we get concurrent(h, Line(B, C), Line(C, G))
By concurrent_sufficient_conditions on h, Line(B, C), Line(C, G) we get concurrent(h, Line(B, C), Line(C, G))
By concurrent_sufficient_conditions on Line(B, C), Line(A, C), f we get concurrent(f, Line(A, C), Line(B, C))
By concurrent_sufficient_conditions on Line(D, G), Line(E, G), Line(C, G) we get concurrent(Line(C, G), Line(D, G), Line(E, G))
By concurrent_sufficient_conditions on Line(B, D), Line(D, G), Line(A, C) we get concurrent(Line(A, C), Line(B, D), Line(D, G))
By concurrent_sufficient_conditions on Line(D, E), Line(A, C), Line(D, G) we get concurrent(Line(A, C), Line(D, E), Line(D, G))
By concurrent_sufficient_conditions on Line(A, C), Line(D, F), Line(B, D) we get concurrent(Line(A, C), Line(B, D), Line(D, F))
By concurrent_sufficient_conditions on Line(D, E), f, Line(E, G) we get concurrent(f, Line(D, E), Line(E, G))
By concurrent_sufficient_conditions on Line(B, D), Line(D, F), Line(D, E) we get concurrent(Line(B, D), Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(D, F), Line(B, D), Line(D, G) we get concurrent(Line(B, D), Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on Line(C, G), f, h we get concurrent(f, h, Line(C, G))
By concurrent_sufficient_conditions on Line(A, C), Line(D, G), Line(D, E) we get concurrent(Line(A, C), Line(D, E), Line(D, G))
By concurrent_sufficient_conditions on Line(F, G), h, Line(D, F) we get concurrent(h, Line(D, F), Line(F, G))
By concurrent_sufficient_conditions on Line(D, F), Line(F, G), h we get concurrent(h, Line(D, F), Line(F, G))
By concurrent_sufficient_conditions on Line(E, F), h, Line(D, F) we get concurrent(h, Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on Line(F, G), Line(D, F), h we get concurrent(h, Line(D, F), Line(F, G))
By concurrent_sufficient_conditions on Line(C, G), Line(B, C), f we get concurrent(f, Line(B, C), Line(C, G))
By concurrent_sufficient_conditions on Line(B, D), Line(D, F), Line(A, C) we get concurrent(Line(A, C), Line(B, D), Line(D, F))
By concurrent_sufficient_conditions on Line(D, E), Line(A, C), Line(D, F) we get concurrent(Line(A, C), Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on h, Line(D, F), Line(F, G) we get concurrent(h, Line(D, F), Line(F, G))
By concurrent_sufficient_conditions on Line(D, G), Line(D, F), Line(A, C) we get concurrent(Line(A, C), Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on Line(A, C), Line(B, D), Line(D, F) we get concurrent(Line(A, C), Line(B, D), Line(D, F))
By concurrent_sufficient_conditions on Line(A, C), Line(D, F), Line(D, E) we get concurrent(Line(A, C), Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(C, G), h, Line(B, C) we get concurrent(h, Line(B, C), Line(C, G))
By concurrent_sufficient_conditions on Line(A, C), Line(B, D), Line(D, E) we get concurrent(Line(A, C), Line(B, D), Line(D, E))
By concurrent_sufficient_conditions on Line(D, G), Line(C, G), Line(E, G) we get concurrent(Line(C, G), Line(D, G), Line(E, G))
By concurrent_sufficient_conditions on h, f, Line(B, C) we get concurrent(f, h, Line(B, C))
By concurrent_sufficient_conditions on Line(A, C), Line(D, F), Line(D, G) we get concurrent(Line(A, C), Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on f, Line(A, C), h we get concurrent(f, h, Line(A, C))
By concurrent_sufficient_conditions on Line(D, E), Line(E, G), f we get concurrent(f, Line(D, E), Line(E, G))
By concurrent_sufficient_conditions on Line(B, C), Line(C, G), f we get concurrent(f, Line(B, C), Line(C, G))
By concurrent_sufficient_conditions on Line(C, G), h, Line(A, C) we get concurrent(h, Line(A, C), Line(C, G))
By concurrent_sufficient_conditions on Line(B, D), Line(D, E), Line(D, G) we get concurrent(Line(B, D), Line(D, E), Line(D, G))
By concurrent_sufficient_conditions on Line(D, F), Line(D, G), Line(A, C) we get concurrent(Line(A, C), Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on Line(C, G), Line(D, G), Line(F, G) we get concurrent(Line(C, G), Line(D, G), Line(F, G))
By concurrent_sufficient_conditions on h, Line(B, C), Line(A, C) we get concurrent(h, Line(A, C), Line(B, C))
By concurrent_sufficient_conditions on f, Line(E, F), Line(D, E) we get concurrent(f, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(D, G), Line(D, E), Line(D, F) we get concurrent(Line(D, E), Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on Line(D, E), f, Line(E, F) we get concurrent(f, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(D, E), Line(A, C), Line(B, D) we get concurrent(Line(A, C), Line(B, D), Line(D, E))
By concurrent_sufficient_conditions on f, Line(D, E), Line(E, F) we get concurrent(f, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(A, C), Line(C, G), f we get concurrent(f, Line(A, C), Line(C, G))
By concurrent_sufficient_conditions on Line(E, G), Line(D, E), f we get concurrent(f, Line(D, E), Line(E, G))
By concurrent_sufficient_conditions on Line(B, C), Line(B, D), g we get concurrent(g, Line(B, C), Line(B, D))
By concurrent_sufficient_conditions on h, f, Line(A, C) we get concurrent(f, h, Line(A, C))
By concurrent_sufficient_conditions on f, Line(E, G), Line(D, E) we get concurrent(f, Line(D, E), Line(E, G))
By concurrent_sufficient_conditions on Line(B, C), g, Line(B, D) we get concurrent(g, Line(B, C), Line(B, D))
By concurrent_sufficient_conditions on Line(D, E), Line(D, F), Line(D, G) we get concurrent(Line(D, E), Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on g, Line(D, E), f we get concurrent(f, g, Line(D, E))
By concurrent_sufficient_conditions on Line(D, E), Line(D, G), Line(D, F) we get concurrent(Line(D, E), Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on Line(C, G), f, Line(B, C) we get concurrent(f, Line(B, C), Line(C, G))
By concurrent_sufficient_conditions on Line(B, C), f, Line(C, G) we get concurrent(f, Line(B, C), Line(C, G))
By concurrent_sufficient_conditions on Line(B, C), Line(A, C), h we get concurrent(h, Line(A, C), Line(B, C))
By concurrent_sufficient_conditions on Line(D, G), Line(F, G), Line(C, G) we get concurrent(Line(C, G), Line(D, G), Line(F, G))
By concurrent_sufficient_conditions on Line(A, C), Line(B, C), Line(C, G) we get concurrent(Line(A, C), Line(B, C), Line(C, G))
By concurrent_sufficient_conditions on f, Line(C, G), Line(A, C) we get concurrent(f, Line(A, C), Line(C, G))
By concurrent_sufficient_conditions on Line(D, F), Line(D, G), Line(D, E) we get concurrent(Line(D, E), Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on Line(D, F), Line(B, D), Line(A, C) we get concurrent(Line(A, C), Line(B, D), Line(D, F))
By concurrent_sufficient_conditions on Line(D, E), Line(E, F), f we get concurrent(f, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(A, C), f, Line(B, C) we get concurrent(f, Line(A, C), Line(B, C))
By concurrent_sufficient_conditions on Line(D, G), Line(B, D), Line(D, F) we get concurrent(Line(B, D), Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on Line(D, E), Line(D, F), Line(A, C) we get concurrent(Line(A, C), Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(E, G), Line(D, G), Line(C, G) we get concurrent(Line(C, G), Line(D, G), Line(E, G))
By concurrent_sufficient_conditions on h, Line(A, C), Line(B, C) we get concurrent(h, Line(A, C), Line(B, C))
By concurrent_sufficient_conditions on Line(C, G), f, Line(A, C) we get concurrent(f, Line(A, C), Line(C, G))
By concurrent_sufficient_conditions on Line(A, C), Line(C, G), Line(B, C) we get concurrent(Line(A, C), Line(B, C), Line(C, G))
By concurrent_sufficient_conditions on f, Line(D, E), g we get concurrent(f, g, Line(D, E))
By concurrent_sufficient_conditions on Line(D, E), Line(D, F), Line(B, D) we get concurrent(Line(B, D), Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(D, E), Line(B, D), Line(A, C) we get concurrent(Line(A, C), Line(B, D), Line(D, E))
By concurrent_sufficient_conditions on Line(D, G), Line(A, C), Line(B, D) we get concurrent(Line(A, C), Line(B, D), Line(D, G))
By concurrent_sufficient_conditions on Line(D, G), Line(D, F), Line(B, D) we get concurrent(Line(B, D), Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on h, Line(D, F), Line(E, F) we get concurrent(h, Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on f, Line(A, C), Line(C, G) we get concurrent(f, Line(A, C), Line(C, G))
By concurrent_sufficient_conditions on Line(E, F), f, Line(D, E) we get concurrent(f, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(A, C), Line(D, G), Line(D, F) we get concurrent(Line(A, C), Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on Line(B, D), Line(B, C), g we get concurrent(g, Line(B, C), Line(B, D))
By concurrent_sufficient_conditions on Line(D, G), Line(B, D), Line(A, C) we get concurrent(Line(A, C), Line(B, D), Line(D, G))
By concurrent_sufficient_conditions on Line(D, E), Line(B, D), Line(D, F) we get concurrent(Line(B, D), Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(D, E), Line(D, G), Line(B, D) we get concurrent(Line(B, D), Line(D, E), Line(D, G))
By concurrent_sufficient_conditions on Line(E, F), Line(D, F), h we get concurrent(h, Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on Line(D, F), Line(D, G), Line(B, D) we get concurrent(Line(B, D), Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on Line(D, G), Line(B, D), Line(D, E) we get concurrent(Line(B, D), Line(D, E), Line(D, G))
By concurrent_sufficient_conditions on Line(B, D), Line(A, C), Line(D, G) we get concurrent(Line(A, C), Line(B, D), Line(D, G))
By concurrent_sufficient_conditions on f, Line(A, C), Line(B, C) we get concurrent(f, Line(A, C), Line(B, C))
By concurrent_sufficient_conditions on h, f, Line(C, G) we get concurrent(f, h, Line(C, G))
By concurrent_sufficient_conditions on Line(A, C), h, Line(B, C) we get concurrent(h, Line(A, C), Line(B, C))
By concurrent_sufficient_conditions on Line(D, G), Line(D, F), Line(D, E) we get concurrent(Line(D, E), Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on Line(D, F), h, Line(E, F) we get concurrent(h, Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on Line(A, C), Line(D, E), Line(B, D) we get concurrent(Line(A, C), Line(B, D), Line(D, E))
By concurrent_sufficient_conditions on Line(D, E), Line(D, G), Line(A, C) we get concurrent(Line(A, C), Line(D, E), Line(D, G))
By concurrent_sufficient_conditions on h, Line(A, C), Line(C, G) we get concurrent(h, Line(A, C), Line(C, G))
By concurrent_sufficient_conditions on Line(D, F), h, Line(F, G) we get concurrent(h, Line(D, F), Line(F, G))
By concurrent_sufficient_conditions on f, Line(D, E), Line(E, G) we get concurrent(f, Line(D, E), Line(E, G))
By concurrent_sufficient_conditions on Line(B, D), Line(D, F), Line(D, G) we get concurrent(Line(B, D), Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on Line(D, G), Line(A, C), Line(D, E) we get concurrent(Line(A, C), Line(D, E), Line(D, G))
By concurrent_sufficient_conditions on Line(B, D), Line(D, E), Line(A, C) we get concurrent(Line(A, C), Line(B, D), Line(D, E))
By concurrent_sufficient_conditions on Line(F, G), Line(C, G), Line(D, G) we get concurrent(Line(C, G), Line(D, G), Line(F, G))
By concurrent_sufficient_conditions on g, Line(B, D), Line(B, C) we get concurrent(g, Line(B, C), Line(B, D))
By concurrent_sufficient_conditions on Line(C, G), Line(E, G), Line(D, G) we get concurrent(Line(C, G), Line(D, G), Line(E, G))
By concurrent_sufficient_conditions on Line(D, E), f, g we get concurrent(f, g, Line(D, E))
By concurrent_sufficient_conditions on f, h, Line(B, C) we get concurrent(f, h, Line(B, C))
By concurrent_sufficient_conditions on Line(B, D), Line(D, E), Line(D, F) we get concurrent(Line(B, D), Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(D, F), Line(A, C), Line(D, G) we get concurrent(Line(A, C), Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on f, Line(B, C), h we get concurrent(f, h, Line(B, C))
By concurrent_sufficient_conditions on f, Line(C, G), Line(B, C) we get concurrent(f, Line(B, C), Line(C, G))
By concurrent_sufficient_conditions on Line(B, C), h, Line(A, C) we get concurrent(h, Line(A, C), Line(B, C))
By concurrent_sufficient_conditions on Line(B, C), h, Line(C, G) we get concurrent(h, Line(B, C), Line(C, G))
By concurrent_sufficient_conditions on Line(B, D), Line(A, C), Line(D, F) we get concurrent(Line(A, C), Line(B, D), Line(D, F))
By concurrent_sufficient_conditions on Line(D, G), Line(D, E), Line(B, D) we get concurrent(Line(B, D), Line(D, E), Line(D, G))
By concurrent_sufficient_conditions on f, Line(C, G), h we get concurrent(f, h, Line(C, G))
By concurrent_sufficient_conditions on Line(A, C), Line(B, D), Line(D, G) we get concurrent(Line(A, C), Line(B, D), Line(D, G))
By concurrent_sufficient_conditions on Line(E, G), f, Line(D, E) we get concurrent(f, Line(D, E), Line(E, G))
By concurrent_sufficient_conditions on h, Line(A, C), f we get concurrent(f, h, Line(A, C))
By concurrent_sufficient_conditions on Line(C, G), Line(D, G), Line(E, G) we get concurrent(Line(C, G), Line(D, G), Line(E, G))
By concurrent_sufficient_conditions on Line(D, F), Line(A, C), Line(B, D) we get concurrent(Line(A, C), Line(B, D), Line(D, F))
By concurrent_sufficient_conditions on g, Line(B, C), Line(B, D) we get concurrent(g, Line(B, C), Line(B, D))
By concurrent_sufficient_conditions on Line(C, G), Line(F, G), Line(D, G) we get concurrent(Line(C, G), Line(D, G), Line(F, G))
By concurrent_sufficient_conditions on Line(C, G), Line(A, C), h we get concurrent(h, Line(A, C), Line(C, G))
By concurrent_sufficient_conditions on Line(B, D), g, Line(B, C) we get concurrent(g, Line(B, C), Line(B, D))
By concurrent_sufficient_conditions on f, Line(B, C), Line(A, C) we get concurrent(f, Line(A, C), Line(B, C))
By concurrent_sufficient_conditions on h, Line(C, G), f we get concurrent(f, h, Line(C, G))
By concurrent_sufficient_conditions on Line(A, C), Line(D, E), Line(D, F) we get concurrent(Line(A, C), Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(A, C), f, h we get concurrent(f, h, Line(A, C))
By concurrent_sufficient_conditions on Line(A, C), h, Line(C, G) we get concurrent(h, Line(A, C), Line(C, G))
By concurrent_sufficient_conditions on h, Line(C, G), Line(A, C) we get concurrent(h, Line(A, C), Line(C, G))
By concurrent_sufficient_conditions on Line(A, C), Line(B, C), f we get concurrent(f, Line(A, C), Line(B, C))
By concurrent_sufficient_conditions on h, Line(F, G), Line(D, F) we get concurrent(h, Line(D, F), Line(F, G))
By concurrent_sufficient_conditions on Line(A, C), Line(C, G), h we get concurrent(h, Line(A, C), Line(C, G))
By concurrent_sufficient_conditions on Line(E, G), Line(C, G), Line(D, G) we get concurrent(Line(C, G), Line(D, G), Line(E, G))
By concurrent_sufficient_conditions on Line(C, G), Line(A, C), f we get concurrent(f, Line(A, C), Line(C, G))
By concurrent_sufficient_conditions on h, Line(B, C), f we get concurrent(f, h, Line(B, C))
By concurrent_sufficient_conditions on Line(D, G), Line(C, G), Line(F, G) we get concurrent(Line(C, G), Line(D, G), Line(F, G))
By concurrent_sufficient_conditions on f, g, Line(D, E) we get concurrent(f, g, Line(D, E))
By concurrent_sufficient_conditions on f, Line(B, C), Line(C, G) we get concurrent(f, Line(B, C), Line(C, G))
By concurrent_sufficient_conditions on Line(B, D), Line(D, G), Line(D, E) we get concurrent(Line(B, D), Line(D, E), Line(D, G))
By concurrent_sufficient_conditions on Line(B, D), Line(A, C), Line(D, E) we get concurrent(Line(A, C), Line(B, D), Line(D, E))
By concurrent_sufficient_conditions on Line(C, G), h, f we get concurrent(f, h, Line(C, G))
By concurrent_sufficient_conditions on h, Line(E, F), Line(D, F) we get concurrent(h, Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on Line(B, D), Line(D, G), Line(D, F) we get concurrent(Line(B, D), Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on Line(C, G), Line(A, C), Line(B, C) we get concurrent(Line(A, C), Line(B, C), Line(C, G))
By perpendicular_direction_conditions_v0 on F, D, D, E we get perpendicular(Line(D, E), Line(D, F))
By same_angle_converse_v1 on G, E, F, D we get collinear(E, F, G)
By divide_by_2_mod_180_v1 on E, C, B, G, D, F we get angle(E, C, B) == angle(G, D, F) mod 360
By divide_by_2_mod_180_v1 on B, C, F, G, E, D we get angle(B, C, F) == angle(G, E, D) mod 360
By divide_by_2_mod_180_v1 on A, D, E, G, C, F we get angle(A, D, E) == angle(G, C, F) mod 360
By divide_by_2_mod_180_v1 on F, E, C, G, E, C we get angle(F, E, C) == angle(G, E, C) mod 360
By divide_by_2_mod_180_v0 on E, F, D, F, D, G we get angle(E, F, D) == angle(F, D, G) mod 360
By divide_by_2_mod_180_v1 on D, C, E, G, D, F we get angle(D, C, E) == angle(G, D, F) mod 360
By divide_by_2_mod_180_v3 on E, D, G, F, C, D we get angle(E, D, G) == angle(F, C, D) + 180 mod 360
By divide_by_2_mod_180_v1 on D, F, G, A, C, E we get angle(A, C, E) == angle(D, F, G) mod 360
By divide_by_2_mod_180_v0 on C, D, F, C, E, G we get angle(C, D, F) == angle(C, E, G) mod 360
By divide_by_2_mod_180_v0 on E, F, C, F, C, G we get angle(E, F, C) == angle(F, C, G) mod 360
By divide_by_2_mod_180_v0 on G, F, D, E, F, D we get angle(E, F, D) == angle(G, F, D) mod 360
By divide_by_2_mod_180_v2 on C, D, E, G, C, F we get angle(C, D, E) == angle(G, C, F) + 180 mod 360
By divide_by_2_mod_180_v1 on G, D, F, D, F, E we get angle(D, F, E) == angle(G, D, F) mod 360
By divide_by_2_mod_180_v0 on G, F, C, E, F, C we get angle(E, F, C) == angle(G, F, C) mod 360
By divide_by_2_mod_180_v0 on E, C, D, G, F, D we get angle(E, C, D) == angle(G, F, D) mod 360
By divide_by_2_mod_180_v3 on D, C, F, G, D, E we get angle(D, C, F) == angle(G, D, E) + 180 mod 360
By divide_by_2_mod_180_v0 on C, E, G, C, E, F we get angle(C, E, F) == angle(C, E, G) mod 360
By divide_by_2_mod_180_v1 on E, D, G, F, E, D we get angle(E, D, G) == angle(F, E, D) mod 360
By divide_by_2_mod_180_v1 on C, F, E, G, C, F we get angle(C, F, E) == angle(G, C, F) mod 360
By divide_by_2_mod_180_v1 on A, C, E, G, D, F we get angle(A, C, E) == angle(G, D, F) mod 360
By divide_by_2_mod_180_v2 on G, F, C, E, D, C we get angle(G, F, C) == angle(E, D, C) + 180 mod 360
By divide_by_2_mod_180_v0 on F, D, G, E, C, A we get angle(E, C, A) == angle(F, D, G) mod 360
By divide_by_2_mod_180_v3 on A, C, F, G, D, E we get angle(A, C, F) == angle(G, D, E) + 180 mod 360
By divide_by_2_mod_180_v2 on D, E, G, A, C, F we get angle(D, E, G) == angle(A, C, F) + 180 mod 360
By divide_by_2_mod_180_v2 on D, E, G, D, C, F we get angle(D, E, G) == angle(D, C, F) + 180 mod 360
By divide_by_2_mod_180_v3 on A, C, F, D, E, G we get angle(A, C, F) == angle(D, E, G) + 180 mod 360
By divide_by_2_mod_180_v2 on G, D, E, A, C, F we get angle(G, D, E) == angle(A, C, F) + 180 mod 360
By divide_by_2_mod_180_v0 on G, D, E, F, C, B we get angle(F, C, B) == angle(G, D, E) mod 360
By divide_by_2_mod_180_v0 on C, E, F, G, C, E we get angle(C, E, F) == angle(G, C, E) mod 360
By divide_by_2_mod_180_v1 on A, D, E, C, F, G we get angle(A, D, E) == angle(C, F, G) mod 360
By divide_by_2_mod_180_v3 on G, E, C, F, D, A we get angle(G, E, C) == angle(F, D, A) + 180 mod 360
By divide_by_2_mod_180_v0 on D, E, F, D, E, G we get angle(D, E, F) == angle(D, E, G) mod 360
By divide_by_2_mod_180_v3 on G, E, D, F, C, D we get angle(G, E, D) == angle(F, C, D) + 180 mod 360
By reverse_direction on B, C we get 180 == direction(B, C) - direction(C, B) mod 360
By divide_by_2_mod_180_v0 on F, C, B, D, E, G we get angle(D, E, G) == angle(F, C, B) mod 360
By divide_by_2_mod_180_v1 on F, E, C, E, C, G we get angle(E, C, G) == angle(F, E, C) mod 360
By divide_by_2_mod_180_v1 on C, F, G, C, F, E we get angle(C, F, E) == angle(C, F, G) mod 360
By divide_by_2_mod_180_v2 on F, D, A, E, C, G we get angle(F, D, A) == angle(E, C, G) + 180 mod 360
By divide_by_2_mod_180_v0 on C, D, F, G, C, E we get angle(C, D, F) == angle(G, C, E) mod 360
By divide_by_2_mod_180_v2 on F, C, D, E, D, G we get angle(F, C, D) == angle(E, D, G) + 180 mod 360
By divide_by_2_mod_180_v0 on B, C, E, F, D, G we get angle(B, C, E) == angle(F, D, G) mod 360
By divide_by_2_mod_180_v3 on E, D, C, F, C, G we get angle(E, D, C) == angle(F, C, G) + 180 mod 360
By divide_by_2_mod_180_v1 on E, C, B, D, F, G we get angle(D, F, G) == angle(E, C, B) mod 360
By divide_by_2_mod_180_v2 on F, C, A, G, E, D we get angle(F, C, A) == angle(G, E, D) + 180 mod 360
By divide_by_2_mod_180_v2 on F, C, D, G, E, D we get angle(F, C, D) == angle(G, E, D) + 180 mod 360
By divide_by_2_mod_180_v1 on D, F, E, D, F, G we get angle(D, F, E) == angle(D, F, G) mod 360
By divide_by_2_mod_180_v3 on G, E, D, F, C, A we get angle(G, E, D) == angle(F, C, A) + 180 mod 360
By divide_by_2_mod_180_v2 on G, D, E, D, C, F we get angle(G, D, E) == angle(D, C, F) + 180 mod 360
By divide_by_2_mod_180_v3 on C, F, G, C, D, E we get angle(C, F, G) == angle(C, D, E) + 180 mod 360
By divide_by_2_mod_180_v3 on A, D, F, C, E, G we get angle(A, D, F) == angle(C, E, G) + 180 mod 360
By divide_by_2_mod_180_v2 on F, D, A, G, E, C we get angle(F, D, A) == angle(G, E, C) + 180 mod 360
By divide_by_2_mod_180_v2 on C, E, G, A, D, F we get angle(C, E, G) == angle(A, D, F) + 180 mod 360
By divide_by_2_mod_180_v0 on E, D, A, G, F, C we get angle(E, D, A) == angle(G, F, C) mod 360
By divide_by_2_mod_180_v1 on E, C, G, F, D, C we get angle(E, C, G) == angle(F, D, C) mod 360
By divide_by_2_mod_180_v0 on F, C, G, E, D, A we get angle(E, D, A) == angle(F, C, G) mod 360
By divide_by_2_mod_180_v1 on F, D, C, G, E, C we get angle(F, D, C) == angle(G, E, C) mod 360
By divide_by_2_mod_180_v1 on G, E, D, F, E, D we get angle(F, E, D) == angle(G, E, D) mod 360
By divide_by_2_mod_180_v2 on F, C, G, E, D, C we get angle(F, C, G) == angle(E, D, C) + 180 mod 360
By divide_by_2_mod_180_v1 on D, F, G, D, C, E we get angle(D, C, E) == angle(D, F, G) mod 360
By divide_by_2_mod_180_v3 on E, C, G, F, D, A we get angle(E, C, G) == angle(F, D, A) + 180 mod 360
By divide_by_2_mod_180_v1 on E, D, G, B, C, F we get angle(B, C, F) == angle(E, D, G) mod 360
By divide_by_2_mod_180_v3 on G, C, F, C, D, E we get angle(G, C, F) == angle(C, D, E) + 180 mod 360
By divide_by_2_mod_180_v2 on C, D, E, C, F, G we get angle(C, D, E) == angle(C, F, G) + 180 mod 360
By divide_by_2_mod_180_v0 on G, F, D, B, C, E we get angle(B, C, E) == angle(G, F, D) mod 360
By divide_by_2_mod_180_v0 on E, C, D, F, D, G we get angle(E, C, D) == angle(F, D, G) mod 360
By divide_by_2_mod_180_v0 on G, F, D, E, C, A we get angle(E, C, A) == angle(G, F, D) mod 360
By divide_by_2_mod_180_v2 on G, C, E, A, D, F we get angle(G, C, E) == angle(A, D, F) + 180 mod 360
By divide_by_2_mod_180_v0 on D, E, F, G, D, E we get angle(D, E, F) == angle(G, D, E) mod 360
By divide_by_2_mod_180_v3 on E, D, C, G, F, C we get angle(E, D, C) == angle(G, F, C) + 180 mod 360
By divide_by_2_mod_180_v2 on F, C, A, E, D, G we get angle(F, C, A) == angle(E, D, G) + 180 mod 360
By divide_by_2_mod_180_v3 on D, C, F, D, E, G we get angle(D, C, F) == angle(D, E, G) + 180 mod 360
By divide_by_2_mod_180_v3 on A, D, F, G, C, E we get angle(A, D, F) == angle(G, C, E) + 180 mod 360
By reverse_direction on C, B we get 180 == direction(C, B) - direction(B, C) mod 360
By divide_by_2_mod_180_v3 on E, D, G, F, C, A we get angle(E, D, G) == angle(F, C, A) + 180 mod 360
By reverse_direction on D, B we get 180 == direction(D, B) - direction(B, D) mod 360
By reverse_direction on B, D we get 180 == direction(B, D) - direction(D, B) mod 360
By external_angle_bisector_definition_v0_r on F, E, F, D we get Line(D, E) == external_angle_bisector(F, D, F)
By internal_angle_bisector_definition_v0_r on E, F, E, G we get Line(F, G) == internal_angle_bisector(E, G, E)
By internal_angle_bisector_definition_v0_r on B, E, D, C we get Line(C, E) == internal_angle_bisector(B, C, D)
By external_angle_bisector_definition_v0_r on D, F, B, C we get Line(C, F) == external_angle_bisector(B, C, D)
By external_angle_bisector_definition_v0_r on E, F, E, D we get Line(D, F) == external_angle_bisector(E, D, E)
By internal_angle_bisector_definition_v0_r on F, E, F, G we get Line(E, G) == internal_angle_bisector(F, G, F)
By external_angle_bisector_definition_v0_r on F, E, F, C we get Line(C, E) == external_angle_bisector(F, C, F)
By external_angle_bisector_definition_v0_r on E, F, E, C we get Line(C, F) == external_angle_bisector(E, C, E)
By reverse_direction on B, E we get 180 == direction(B, E) - direction(E, B) mod 360
By anti_similar_triangle_basic_properties on D, G, C, C, G, D we get angle(D, G, C) == 0 - angle(C, G, D) mod 360, angle(G, C, D) == 0 - angle(G, D, C) mod 360, angle(C, D, G) == 0 - angle(D, C, G) mod 360, log(distance(C, G)) + log(distance(C, G)) == log(distance(D, G)) + log(distance(D, G)), log(distance(C, G)) + log(distance(C, D)) == log(distance(D, G)) + log(distance(C, D)), log(distance(C, D)) + log(distance(C, G)) == log(distance(C, D)) + log(distance(D, G))
By anti_similar_triangle_basic_properties on G, C, E, G, E, C we get angle(G, C, E) == 0 - angle(G, E, C) mod 360, angle(C, E, G) == 0 - angle(E, C, G) mod 360, angle(E, G, C) == 0 - angle(C, G, E) mod 360, log(distance(C, G)) + log(distance(C, E)) == log(distance(E, G)) + log(distance(C, E)), log(distance(C, E)) + log(distance(C, G)) == log(distance(C, E)) + log(distance(E, G)), log(distance(C, G)) + log(distance(C, G)) == log(distance(E, G)) + log(distance(E, G))
By anti_similar_triangle_basic_properties on G, F, D, G, D, F we get angle(G, F, D) == 0 - angle(G, D, F) mod 360, angle(F, D, G) == 0 - angle(D, F, G) mod 360, angle(D, G, F) == 0 - angle(F, G, D) mod 360, log(distance(D, G)) + log(distance(D, F)) == log(distance(F, G)) + log(distance(D, F)), log(distance(D, F)) + log(distance(D, G)) == log(distance(D, F)) + log(distance(F, G)), log(distance(D, G)) + log(distance(D, G)) == log(distance(F, G)) + log(distance(F, G))
By anti_similar_triangle_basic_properties on D, E, G, E, D, G we get angle(D, E, G) == 0 - angle(E, D, G) mod 360, angle(E, G, D) == 0 - angle(D, G, E) mod 360, angle(G, D, E) == 0 - angle(G, E, D) mod 360, log(distance(D, E)) + log(distance(D, G)) == log(distance(D, E)) + log(distance(E, G)), log(distance(D, G)) + log(distance(D, G)) == log(distance(E, G)) + log(distance(E, G)), log(distance(D, G)) + log(distance(D, E)) == log(distance(E, G)) + log(distance(D, E))
By anti_similar_triangle_basic_properties on G, F, C, G, C, F we get angle(G, F, C) == 0 - angle(G, C, F) mod 360, angle(F, C, G) == 0 - angle(C, F, G) mod 360, angle(C, G, F) == 0 - angle(F, G, C) mod 360, log(distance(C, G)) + log(distance(C, F)) == log(distance(F, G)) + log(distance(C, F)), log(distance(C, F)) + log(distance(C, G)) == log(distance(C, F)) + log(distance(F, G)), log(distance(C, G)) + log(distance(C, G)) == log(distance(F, G)) + log(distance(F, G))
By perpendicular_line_definition on E, Line(D, E), Line(D, F) we get Line(D, E) == perpendicular_line(E, Line(D, F))
By perpendicular_line_definition on D, Line(D, E), Line(D, F) we get Line(D, E) == perpendicular_line(D, Line(D, F))
By perpendicular_line_definition on F, Line(D, F), Line(D, E) we get Line(D, F) == perpendicular_line(F, Line(D, E))
By perpendicular_line_definition on D, Line(D, F), Line(D, E) we get Line(D, F) == perpendicular_line(D, Line(D, E))
By projection_definition on F, D, Line(D, E) we get D == projection(F, Line(D, E))
By probably_between_and_collinear_implies_between on F, G, E we get between(E, G, F)
By projection_definition on E, D, Line(D, F) we get D == projection(E, Line(D, F))
By collinear_definition on E, G, F we get G in Line(E, F), F in Line(E, G), Line(E, F) == Line(E, G), 0 == 2 * angle(G, E, F) mod 360
By collinear_definition on G, E, F we get E in Line(F, G), F in Line(E, G), Line(E, G) == Line(F, G), 0 == 2 * angle(E, G, F) mod 360
By collinear_definition on F, E, G we get E in Line(F, G), G in Line(E, F), Line(E, F) == Line(F, G), 0 == 2 * angle(E, F, G) mod 360
By collinear_definition on E, F, G we get F in Line(E, G), G in Line(E, F), Line(E, F) == Line(E, G), 0 == 2 * angle(F, E, G) mod 360
By collinear_definition on F, G, E we get G in Line(E, F), E in Line(F, G), Line(E, F) == Line(F, G), 0 == 2 * angle(G, F, E) mod 360
By altitude_definition on E, D, F, Line(D, E) we get Line(D, E) == altitude(E, D, F)
By altitude_definition on F, E, D, Line(D, F) we get Line(D, F) == altitude(F, D, E)
By power_of_a_point_definition on G, F, E, c we get log(power_of_a_point(G, c)) == log(distance(F, G)) + log(distance(E, G))
By excenter_concurrency on C, D, B we get excenter(C, B, D) in external_angle_bisector(B, D, C), excenter(C, B, D) in external_angle_bisector(C, B, D), excenter(C, B, D) in internal_angle_bisector(B, C, D)
By excenter_concurrency_alternate on D, C, B we get excenter(D, B, C) in external_angle_bisector(B, C, D), excenter(D, B, C) in external_angle_bisector(C, B, D), excenter(D, B, C) in internal_angle_bisector(B, D, C)
By line_definition on E, D, external_angle_bisector(B, D, C) we get Line(D, E) == external_angle_bisector(B, D, C)
By line_definition on B, excenter(D, B, C), g we get g == Line(B, excenter(D, B, C))
By median_definition on E, C, A, external_angle_bisector(B, D, C) we get median(E, A, C) == external_angle_bisector(B, D, C)
By line_definition on excenter(D, B, C), E, g we get g == Line(E, excenter(D, B, C))
By line_definition on C, excenter(D, B, C), h we get h == Line(C, excenter(D, B, C))
By line_definition on excenter(D, B, C), D, internal_angle_bisector(B, D, C) we get internal_angle_bisector(B, D, C) == Line(D, excenter(D, B, C))
By midpoint_definition_v0 on E, F, G we get G == midpoint(E, F)
By line_intersection_definition on D, external_angle_bisector(B, D, C), Line(A, C) we get D == line_intersection(Line(A, C), external_angle_bisector(B, D, C))
By line_intersection_definition on D, external_angle_bisector(B, D, C), Line(D, F) we get D == line_intersection(Line(D, F), external_angle_bisector(B, D, C))
By line_intersection_definition on D, internal_angle_bisector(B, D, C), Line(B, D) we get D == line_intersection(Line(B, D), internal_angle_bisector(B, D, C))
By line_intersection_definition on D, internal_angle_bisector(B, D, C), Line(D, G) we get D == line_intersection(Line(D, G), internal_angle_bisector(B, D, C))
By line_intersection_definition on D, external_angle_bisector(B, D, C), internal_angle_bisector(B, D, C) we get D == line_intersection(external_angle_bisector(B, D, C), internal_angle_bisector(B, D, C))
By median_definition on excenter(D, B, C), A, C, internal_angle_bisector(B, D, C) we get internal_angle_bisector(B, D, C) == median(excenter(D, B, C), A, C)
By line_intersection_definition on E, Line(E, F), external_angle_bisector(B, D, C) we get E == line_intersection(Line(E, F), external_angle_bisector(B, D, C))
By perpendicular_line_definition on excenter(D, B, C), h, f we get h == perpendicular_line(excenter(D, B, C), f)
By line_intersection_definition on D, Line(D, G), external_angle_bisector(B, D, C) we get D == line_intersection(Line(D, G), external_angle_bisector(B, D, C))
By line_intersection_definition on D, Line(A, C), internal_angle_bisector(B, D, C) we get D == line_intersection(Line(A, C), internal_angle_bisector(B, D, C))
By concurrent_sufficient_conditions on Line(E, F), external_angle_bisector(B, D, C), f we get concurrent(f, Line(E, F), external_angle_bisector(B, D, C))
By concurrent_sufficient_conditions on external_angle_bisector(B, D, C), Line(E, F), f we get concurrent(f, Line(E, F), external_angle_bisector(B, D, C))
By line_intersection_definition on D, Line(B, D), external_angle_bisector(B, D, C) we get D == line_intersection(Line(B, D), external_angle_bisector(B, D, C))
By line_intersection_definition on D, internal_angle_bisector(B, D, C), Line(D, E) we get D == line_intersection(Line(D, E), internal_angle_bisector(B, D, C))
By between_imply_not_between on F, G, E we get collinear_and_not_between(E, F, G)
By between_imply_not_between on E, G, F we get collinear_and_not_between(F, E, G)
By in_imply_collinear on excenter(D, B, C), E, B we get collinear(B, E, excenter(D, B, C))
By in_imply_collinear on excenter(D, B, C), F, C we get collinear(C, F, excenter(D, B, C))
By between_imply_segment_sum on E, G, F we get distance(E, F) == distance(E, G) + distance(F, G)
By angle_bisectors_are_perpendicular on C, D, B we get perpendicular(external_angle_bisector(B, D, C), internal_angle_bisector(B, D, C))
By internal_angle_bisector_definition_v0_r on G, F, G, E we get Line(E, F) == internal_angle_bisector(G, E, G)
By internal_angle_bisector_definition_v0_r on G, E, G, F we get Line(E, F) == internal_angle_bisector(G, F, G)
By internal_angle_bisector_definition_v0_r on E, G, E, F we get Line(F, G) == internal_angle_bisector(E, F, E)
By internal_angle_bisector_definition_v0_r on F, G, F, E we get Line(E, G) == internal_angle_bisector(F, E, F)
By altitude_definition on excenter(D, B, C), E, C, h we get h == altitude(excenter(D, B, C), C, E)
By incenter_concurrency on B, D, C we get incenter(B, C, D) in internal_angle_bisector(B, D, C), incenter(B, C, D) in internal_angle_bisector(B, C, D), incenter(B, C, D) in internal_angle_bisector(C, B, D)
By excenter_concurrency_alternate on B, C, D we get excenter(B, C, D) in external_angle_bisector(B, C, D), excenter(B, C, D) in external_angle_bisector(B, D, C), excenter(B, C, D) in internal_angle_bisector(C, B, D)
By concurrent_sufficient_conditions on Line(A, C), Line(B, D), internal_angle_bisector(B, D, C) we get concurrent(Line(A, C), Line(B, D), internal_angle_bisector(B, D, C))
By line_definition on incenter(B, C, D), excenter(B, C, D), internal_angle_bisector(C, B, D) we get internal_angle_bisector(C, B, D) == Line(excenter(B, C, D), incenter(B, C, D))
By line_definition on E, incenter(B, C, D), f we get f == Line(E, incenter(B, C, D))
By concurrent_sufficient_conditions on internal_angle_bisector(B, D, C), Line(D, G), Line(A, C) we get concurrent(Line(A, C), Line(D, G), internal_angle_bisector(B, D, C))
By line_definition on excenter(B, C, D), F, h we get h == Line(F, excenter(B, C, D))
By concurrent_sufficient_conditions on internal_angle_bisector(B, D, C), Line(A, C), Line(B, D) we get concurrent(Line(A, C), Line(B, D), internal_angle_bisector(B, D, C))
By concurrent_sufficient_conditions on Line(B, D), internal_angle_bisector(B, D, C), Line(A, C) we get concurrent(Line(A, C), Line(B, D), internal_angle_bisector(B, D, C))
By concurrent_sufficient_conditions on Line(A, C), internal_angle_bisector(B, D, C), Line(B, D) we get concurrent(Line(A, C), Line(B, D), internal_angle_bisector(B, D, C))
By concurrent_sufficient_conditions on Line(D, G), Line(D, E), internal_angle_bisector(B, D, C) we get concurrent(Line(D, E), Line(D, G), internal_angle_bisector(B, D, C))
By line_definition on B, excenter(B, C, D), internal_angle_bisector(C, B, D) we get internal_angle_bisector(C, B, D) == Line(B, excenter(B, C, D))
By concurrent_sufficient_conditions on internal_angle_bisector(B, D, C), Line(D, E), Line(D, G) we get concurrent(Line(D, E), Line(D, G), internal_angle_bisector(B, D, C))
By concurrent_sufficient_conditions on Line(D, E), Line(D, G), internal_angle_bisector(B, D, C) we get concurrent(Line(D, E), Line(D, G), internal_angle_bisector(B, D, C))
By line_definition on E, excenter(B, C, D), Line(D, E) we get Line(D, E) == Line(E, excenter(B, C, D))
By concurrent_sufficient_conditions on Line(D, E), Line(A, C), internal_angle_bisector(B, D, C) we get concurrent(Line(A, C), Line(D, E), internal_angle_bisector(B, D, C))
By line_definition on C, incenter(B, C, D), f we get f == Line(C, incenter(B, C, D))
By line_definition on excenter(B, C, D), excenter(D, B, C), h we get h == Line(excenter(B, C, D), excenter(D, B, C))
By concurrent_sufficient_conditions on Line(D, E), Line(B, D), internal_angle_bisector(B, D, C) we get concurrent(Line(B, D), Line(D, E), internal_angle_bisector(B, D, C))
By concurrent_sufficient_conditions on Line(D, E), internal_angle_bisector(B, D, C), Line(D, G) we get concurrent(Line(D, E), Line(D, G), internal_angle_bisector(B, D, C))
By concurrent_sufficient_conditions on internal_angle_bisector(B, D, C), Line(D, E), Line(A, C) we get concurrent(Line(A, C), Line(D, E), internal_angle_bisector(B, D, C))
By concurrent_sufficient_conditions on internal_angle_bisector(B, D, C), Line(D, G), Line(B, D) we get concurrent(Line(B, D), Line(D, G), internal_angle_bisector(B, D, C))
By concurrent_sufficient_conditions on Line(D, G), Line(A, C), internal_angle_bisector(B, D, C) we get concurrent(Line(A, C), Line(D, G), internal_angle_bisector(B, D, C))
By line_definition on incenter(B, C, D), D, internal_angle_bisector(B, D, C) we get internal_angle_bisector(B, D, C) == Line(D, incenter(B, C, D))
By concurrent_sufficient_conditions on Line(D, E), internal_angle_bisector(B, D, C), Line(A, C) we get concurrent(Line(A, C), Line(D, E), internal_angle_bisector(B, D, C))
By concurrent_sufficient_conditions on Line(A, C), internal_angle_bisector(B, D, C), Line(D, G) we get concurrent(Line(A, C), Line(D, G), internal_angle_bisector(B, D, C))
By line_definition on excenter(B, C, D), D, Line(D, E) we get Line(D, E) == Line(D, excenter(B, C, D))
By concurrent_sufficient_conditions on internal_angle_bisector(B, D, C), Line(A, C), Line(D, E) we get concurrent(Line(A, C), Line(D, E), internal_angle_bisector(B, D, C))
By concurrent_sufficient_conditions on Line(B, D), Line(A, C), internal_angle_bisector(B, D, C) we get concurrent(Line(A, C), Line(B, D), internal_angle_bisector(B, D, C))
By concurrent_sufficient_conditions on Line(A, C), Line(D, G), internal_angle_bisector(B, D, C) we get concurrent(Line(A, C), Line(D, G), internal_angle_bisector(B, D, C))
By concurrent_sufficient_conditions on Line(D, G), internal_angle_bisector(B, D, C), Line(B, D) we get concurrent(Line(B, D), Line(D, G), internal_angle_bisector(B, D, C))
By concurrent_sufficient_conditions on Line(D, G), internal_angle_bisector(B, D, C), Line(D, E) we get concurrent(Line(D, E), Line(D, G), internal_angle_bisector(B, D, C))
By line_definition on excenter(D, B, C), incenter(B, C, D), internal_angle_bisector(B, D, C) we get internal_angle_bisector(B, D, C) == Line(excenter(D, B, C), incenter(B, C, D))
By concurrent_sufficient_conditions on internal_angle_bisector(B, D, C), Line(B, D), Line(D, G) we get concurrent(Line(B, D), Line(D, G), internal_angle_bisector(B, D, C))
By line_definition on C, excenter(B, C, D), h we get h == Line(C, excenter(B, C, D))
By perpendicular_line_definition on D, internal_angle_bisector(B, D, C), Line(D, E) we get internal_angle_bisector(B, D, C) == perpendicular_line(D, Line(D, E))
By concurrent_sufficient_conditions on internal_angle_bisector(B, D, C), Line(B, D), Line(D, E) we get concurrent(Line(B, D), Line(D, E), internal_angle_bisector(B, D, C))
By line_definition on incenter(B, C, D), B, internal_angle_bisector(C, B, D) we get internal_angle_bisector(C, B, D) == Line(B, incenter(B, C, D))
By concurrent_sufficient_conditions on Line(B, D), Line(D, E), internal_angle_bisector(B, D, C) we get concurrent(Line(B, D), Line(D, E), internal_angle_bisector(B, D, C))
By concurrent_sufficient_conditions on internal_angle_bisector(B, D, C), Line(D, E), Line(B, D) we get concurrent(Line(B, D), Line(D, E), internal_angle_bisector(B, D, C))
By concurrent_sufficient_conditions on Line(A, C), Line(D, E), internal_angle_bisector(B, D, C) we get concurrent(Line(A, C), Line(D, E), internal_angle_bisector(B, D, C))
By concurrent_sufficient_conditions on Line(D, E), internal_angle_bisector(B, D, C), Line(B, D) we get concurrent(Line(B, D), Line(D, E), internal_angle_bisector(B, D, C))
By concurrent_sufficient_conditions on Line(A, C), internal_angle_bisector(B, D, C), Line(D, E) we get concurrent(Line(A, C), Line(D, E), internal_angle_bisector(B, D, C))
By concurrent_sufficient_conditions on Line(D, G), Line(B, D), internal_angle_bisector(B, D, C) we get concurrent(Line(B, D), Line(D, G), internal_angle_bisector(B, D, C))
By concurrent_sufficient_conditions on internal_angle_bisector(B, D, C), Line(B, D), Line(A, C) we get concurrent(Line(A, C), Line(B, D), internal_angle_bisector(B, D, C))
By concurrent_sufficient_conditions on Line(B, D), Line(D, G), internal_angle_bisector(B, D, C) we get concurrent(Line(B, D), Line(D, G), internal_angle_bisector(B, D, C))
By concurrent_sufficient_conditions on Line(B, D), internal_angle_bisector(B, D, C), Line(D, G) we get concurrent(Line(B, D), Line(D, G), internal_angle_bisector(B, D, C))
By concurrent_sufficient_conditions on Line(B, D), internal_angle_bisector(B, D, C), Line(D, E) we get concurrent(Line(B, D), Line(D, E), internal_angle_bisector(B, D, C))
By concurrent_sufficient_conditions on internal_angle_bisector(B, D, C), Line(D, G), Line(D, E) we get concurrent(Line(D, E), Line(D, G), internal_angle_bisector(B, D, C))
By concurrent_sufficient_conditions on internal_angle_bisector(B, D, C), Line(A, C), Line(D, G) we get concurrent(Line(A, C), Line(D, G), internal_angle_bisector(B, D, C))
By concurrent_sufficient_conditions on Line(D, G), internal_angle_bisector(B, D, C), Line(A, C) we get concurrent(Line(A, C), Line(D, G), internal_angle_bisector(B, D, C))
By perpendicular_line_definition on excenter(D, B, C), internal_angle_bisector(B, D, C), Line(D, E) we get internal_angle_bisector(B, D, C) == perpendicular_line(excenter(D, B, C), Line(D, E))
By line_intersection_definition on B, internal_angle_bisector(C, B, D), Line(B, C) we get B == line_intersection(Line(B, C), internal_angle_bisector(C, B, D))
By perpendicular_line_definition on excenter(B, C, D), h, f we get h == perpendicular_line(excenter(B, C, D), f)
By perpendicular_line_definition on E, Line(D, E), internal_angle_bisector(B, D, C) we get Line(D, E) == perpendicular_line(E, internal_angle_bisector(B, D, C))
By median_definition on D, F, E, Line(D, G) we get Line(D, G) == median(D, E, F)
By perpendicular_line_definition on excenter(B, C, D), Line(D, E), internal_angle_bisector(B, D, C) we get Line(D, E) == perpendicular_line(excenter(B, C, D), internal_angle_bisector(B, D, C))
By line_intersection_definition on B, internal_angle_bisector(C, B, D), g we get B == line_intersection(g, internal_angle_bisector(C, B, D))
By perpendicular_line_definition on excenter(B, C, D), Line(D, E), Line(D, F) we get Line(D, E) == perpendicular_line(excenter(B, C, D), Line(D, F))
By perpendicular_line_definition on D, Line(D, E), internal_angle_bisector(B, D, C) we get Line(D, E) == perpendicular_line(D, internal_angle_bisector(B, D, C))
By median_definition on excenter(B, C, D), A, C, Line(D, E) we get Line(D, E) == median(excenter(B, C, D), A, C)
By median_definition on C, F, E, Line(C, G) we get Line(C, G) == median(C, E, F)
By line_intersection_definition on B, Line(B, D), internal_angle_bisector(C, B, D) we get B == line_intersection(Line(B, D), internal_angle_bisector(C, B, D))
By perpendicular_line_definition on incenter(B, C, D), f, h we get f == perpendicular_line(incenter(B, C, D), h)
By median_definition on incenter(B, C, D), A, C, internal_angle_bisector(B, D, C) we get internal_angle_bisector(B, D, C) == median(incenter(B, C, D), A, C)
By perpendicular_line_definition on incenter(B, C, D), internal_angle_bisector(B, D, C), Line(D, E) we get internal_angle_bisector(B, D, C) == perpendicular_line(incenter(B, C, D), Line(D, E))
By projection_definition on excenter(D, B, C), C, f we get C == projection(excenter(D, B, C), f)
By perpendicular_direction_conditions_v0_r on E, D, D, excenter(D, B, C) we get 180 == 2 * direction(E, D) - 2 * direction(D, excenter(D, B, C)) mod 360
By projection_definition on excenter(D, B, C), D, Line(D, E) we get D == projection(excenter(D, B, C), Line(D, E))
By projection_definition on E, D, internal_angle_bisector(B, D, C) we get D == projection(E, internal_angle_bisector(B, D, C))
By perpendicular_direction_conditions_v0_r on C, E, C, excenter(D, B, C) we get 180 == 2 * direction(C, E) - 2 * direction(C, excenter(D, B, C)) mod 360
By in_imply_collinear on incenter(B, C, D), E, C we get collinear(C, E, incenter(B, C, D))
By perpendicular_direction_conditions_v0_r on E, C, C, excenter(D, B, C) we get 180 == 2 * direction(E, C) - 2 * direction(C, excenter(D, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on C, excenter(D, B, C), E, C we get 180 == 2 * direction(C, excenter(D, B, C)) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on D, excenter(D, B, C), D, E we get 180 == 2 * direction(D, excenter(D, B, C)) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on E, C, excenter(D, B, C), C we get 180 == 2 * direction(E, C) - 2 * direction(excenter(D, B, C), C) mod 360
By perpendicular_direction_conditions_v0_r on excenter(D, B, C), D, E, D we get 180 == 2 * direction(excenter(D, B, C), D) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on D, excenter(D, B, C), E, D we get 180 == 2 * direction(D, excenter(D, B, C)) - 2 * direction(E, D) mod 360
By in_imply_collinear on excenter(B, C, D), E, D we get collinear(D, E, excenter(B, C, D))
By perpendicular_direction_conditions_v0_r on D, E, D, excenter(D, B, C) we get 180 == 2 * direction(D, E) - 2 * direction(D, excenter(D, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on E, D, excenter(D, B, C), D we get 180 == 2 * direction(E, D) - 2 * direction(excenter(D, B, C), D) mod 360
By perpendicular_direction_conditions_v0_r on C, excenter(D, B, C), C, E we get 180 == 2 * direction(C, excenter(D, B, C)) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on excenter(D, B, C), C, C, E we get 180 == 2 * direction(excenter(D, B, C), C) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on excenter(D, B, C), C, E, C we get 180 == 2 * direction(excenter(D, B, C), C) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on C, E, excenter(D, B, C), C we get 180 == 2 * direction(C, E) - 2 * direction(excenter(D, B, C), C) mod 360
By perpendicular_direction_conditions_v0_r on D, E, excenter(D, B, C), D we get 180 == 2 * direction(D, E) - 2 * direction(excenter(D, B, C), D) mod 360
By perpendicular_direction_conditions_v0_r on excenter(D, B, C), D, D, E we get 180 == 2 * direction(excenter(D, B, C), D) - 2 * direction(D, E) mod 360
By in_imply_collinear on excenter(B, C, D), excenter(D, B, C), C we get collinear(C, excenter(B, C, D), excenter(D, B, C))
By in_imply_collinear on incenter(B, C, D), excenter(D, B, C), D we get collinear(D, excenter(D, B, C), incenter(B, C, D))
By external_angle_bisector_definition_v0 on C, E, B, D we get 180 == angle(C, D, E) + angle(B, D, E) mod 360
By in_imply_collinear on excenter(B, C, D), F, C we get collinear(C, F, excenter(B, C, D))
By double_perpendicular_and_parallel_v0 on internal_angle_bisector(B, D, C), Line(D, E), Line(D, F) we get parallel(Line(D, F), internal_angle_bisector(B, D, C))
By angle_bisectors_are_perpendicular on C, B, D we get perpendicular(external_angle_bisector(C, B, D), internal_angle_bisector(C, B, D))
By right_triangle_circumcenter_v1 on E, C, F we get midpoint(E, F) == circumcenter(C, E, F)
By collinear_definition on B, excenter(D, B, C), E we get excenter(D, B, C) in Line(B, E), E in Line(B, excenter(D, B, C)), Line(B, E) == Line(B, excenter(D, B, C)), 0 == 2 * angle(excenter(D, B, C), B, E) mod 360
By log_of_2_times_distance on F, E, G, E we get log(distance(E, F)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(E, G))
By external_angle_bisector_definition_v0 on D, excenter(D, B, C), B, C we get 180 == angle(D, C, excenter(D, B, C)) + angle(B, C, excenter(D, B, C)) mod 360
By collinear_definition on B, E, excenter(D, B, C) we get E in Line(B, excenter(D, B, C)), excenter(D, B, C) in Line(B, E), Line(B, E) == Line(B, excenter(D, B, C)), 0 == 2 * angle(E, B, excenter(D, B, C)) mod 360
By external_angle_bisector_definition_v0 on D, excenter(D, B, C), C, B we get 180 == angle(D, B, excenter(D, B, C)) + angle(C, B, excenter(D, B, C)) mod 360
By collinear_definition on E, excenter(D, B, C), B we get excenter(D, B, C) in Line(B, E), B in Line(E, excenter(D, B, C)), Line(B, E) == Line(E, excenter(D, B, C)), 0 == 2 * angle(excenter(D, B, C), E, B) mod 360
By log_of_2_times_distance on F, E, G, C we get log(distance(E, F)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(C, G))
By perpendicular_angle_conditions_v0 on excenter(D, B, C), C, E we get angle(excenter(D, B, C), C, E) == orientation(C, E, excenter(D, B, C)) mod 360
By internal_angle_bisector_definition_v0 on B, excenter(D, B, C), C, D we get angle(B, D, excenter(D, B, C)) == angle(excenter(D, B, C), D, C) mod 360
By external_angle_bisector_definition_v0 on E, excenter(D, B, C), E, C we get 180 == angle(E, C, excenter(D, B, C)) + angle(E, C, excenter(D, B, C)) mod 360
By log_of_2_times_distance on F, E, D, G we get log(distance(E, F)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(D, G))
By right_triangle_circumcenter_v1 on E, D, F we get midpoint(E, F) == circumcenter(D, E, F)
By collinear_definition on C, excenter(D, B, C), F we get excenter(D, B, C) in Line(C, F), F in Line(C, excenter(D, B, C)), Line(C, F) == Line(C, excenter(D, B, C)), 0 == 2 * angle(excenter(D, B, C), C, F) mod 360
By perpendicular_angle_conditions_v0 on E, C, excenter(D, B, C) we get angle(E, C, excenter(D, B, C)) == orientation(C, excenter(D, B, C), E) mod 360
By internal_angle_bisector_definition_v0 on C, excenter(D, B, C), B, D we get angle(C, D, excenter(D, B, C)) == angle(excenter(D, B, C), D, B) mod 360
By perpendicular_angle_conditions_v0 on excenter(D, B, C), D, E we get angle(excenter(D, B, C), D, E) == orientation(D, E, excenter(D, B, C)) mod 360
By log_of_2_times_distance on F, E, F, G we get log(distance(E, F)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(F, G))
By collinear_definition on C, F, excenter(D, B, C) we get F in Line(C, excenter(D, B, C)), excenter(D, B, C) in Line(C, F), Line(C, F) == Line(C, excenter(D, B, C)), 0 == 2 * angle(F, C, excenter(D, B, C)) mod 360
By external_angle_bisector_definition_v0 on A, excenter(D, B, C), B, C we get 180 == angle(A, C, excenter(D, B, C)) + angle(B, C, excenter(D, B, C)) mod 360
By collinear_definition on E, B, excenter(D, B, C) we get B in Line(E, excenter(D, B, C)), excenter(D, B, C) in Line(B, E), Line(B, E) == Line(E, excenter(D, B, C)), 0 == 2 * angle(B, E, excenter(D, B, C)) mod 360
By perpendicular_angle_conditions_v0 on E, D, excenter(D, B, C) we get angle(E, D, excenter(D, B, C)) == orientation(D, excenter(D, B, C), E) mod 360
By altitude_definition on E, C, excenter(D, B, C), f we get f == altitude(E, C, excenter(D, B, C))
By altitude_definition on incenter(B, C, D), C, F, f we get f == altitude(incenter(B, C, D), C, F)
By altitude_definition on excenter(B, C, D), C, E, h we get h == altitude(excenter(B, C, D), C, E)
By altitude_definition on E, D, excenter(D, B, C), Line(D, E) we get Line(D, E) == altitude(E, D, excenter(D, B, C))
By altitude_definition on incenter(B, C, D), C, excenter(D, B, C), f we get f == altitude(incenter(B, C, D), C, excenter(D, B, C))
By altitude_definition on incenter(B, C, D), E, D, internal_angle_bisector(B, D, C) we get internal_angle_bisector(B, D, C) == altitude(incenter(B, C, D), D, E)
By altitude_definition on excenter(B, C, D), D, excenter(D, B, C), Line(D, E) we get Line(D, E) == altitude(excenter(B, C, D), D, excenter(D, B, C))
By collinear_definition on excenter(D, B, C), B, E we get B in Line(E, excenter(D, B, C)), E in Line(B, excenter(D, B, C)), Line(B, excenter(D, B, C)) == Line(E, excenter(D, B, C)), 0 == 2 * angle(B, excenter(D, B, C), E) mod 360
By altitude_definition on excenter(B, C, D), F, D, Line(D, E) we get Line(D, E) == altitude(excenter(B, C, D), D, F)
By collinear_definition on excenter(D, B, C), E, B we get E in Line(B, excenter(D, B, C)), B in Line(E, excenter(D, B, C)), Line(B, excenter(D, B, C)) == Line(E, excenter(D, B, C)), 0 == 2 * angle(E, excenter(D, B, C), B) mod 360
By altitude_definition on excenter(D, B, C), E, D, internal_angle_bisector(B, D, C) we get internal_angle_bisector(B, D, C) == altitude(excenter(D, B, C), D, E)
By line_definition on G, B, g we get g == Line(B, G)
By concurrent_sufficient_conditions on Line(B, D), internal_angle_bisector(C, B, D), g we get concurrent(g, Line(B, D), internal_angle_bisector(C, B, D))
By concurrent_sufficient_conditions on internal_angle_bisector(C, B, D), Line(B, D), Line(B, C) we get concurrent(Line(B, C), Line(B, D), internal_angle_bisector(C, B, D))
By concurrent_sufficient_conditions on internal_angle_bisector(C, B, D), Line(B, C), Line(B, D) we get concurrent(Line(B, C), Line(B, D), internal_angle_bisector(C, B, D))
By concurrent_sufficient_conditions on g, Line(B, D), internal_angle_bisector(C, B, D) we get concurrent(g, Line(B, D), internal_angle_bisector(C, B, D))
By concurrent_sufficient_conditions on Line(B, C), internal_angle_bisector(C, B, D), g we get concurrent(g, Line(B, C), internal_angle_bisector(C, B, D))
By concurrent_sufficient_conditions on internal_angle_bisector(C, B, D), g, Line(B, C) we get concurrent(g, Line(B, C), internal_angle_bisector(C, B, D))
By concurrent_sufficient_conditions on internal_angle_bisector(C, B, D), g, Line(B, D) we get concurrent(g, Line(B, D), internal_angle_bisector(C, B, D))
By concurrent_sufficient_conditions on Line(B, D), internal_angle_bisector(C, B, D), Line(B, C) we get concurrent(Line(B, C), Line(B, D), internal_angle_bisector(C, B, D))
By concurrent_sufficient_conditions on g, internal_angle_bisector(C, B, D), Line(B, C) we get concurrent(g, Line(B, C), internal_angle_bisector(C, B, D))
By concurrent_sufficient_conditions on Line(B, C), g, internal_angle_bisector(C, B, D) we get concurrent(g, Line(B, C), internal_angle_bisector(C, B, D))
By concurrent_sufficient_conditions on Line(B, D), g, internal_angle_bisector(C, B, D) we get concurrent(g, Line(B, D), internal_angle_bisector(C, B, D))
By concurrent_sufficient_conditions on internal_angle_bisector(C, B, D), Line(B, D), g we get concurrent(g, Line(B, D), internal_angle_bisector(C, B, D))
By concurrent_sufficient_conditions on g, internal_angle_bisector(C, B, D), Line(B, D) we get concurrent(g, Line(B, D), internal_angle_bisector(C, B, D))
By concurrent_sufficient_conditions on Line(B, D), Line(B, C), internal_angle_bisector(C, B, D) we get concurrent(Line(B, C), Line(B, D), internal_angle_bisector(C, B, D))
By concurrent_sufficient_conditions on internal_angle_bisector(C, B, D), Line(B, C), g we get concurrent(g, Line(B, C), internal_angle_bisector(C, B, D))
By concurrent_sufficient_conditions on g, Line(B, C), internal_angle_bisector(C, B, D) we get concurrent(g, Line(B, C), internal_angle_bisector(C, B, D))
By concurrent_sufficient_conditions on Line(B, C), Line(B, D), internal_angle_bisector(C, B, D) we get concurrent(Line(B, C), Line(B, D), internal_angle_bisector(C, B, D))
By concurrent_sufficient_conditions on Line(B, C), internal_angle_bisector(C, B, D), Line(B, D) we get concurrent(Line(B, C), Line(B, D), internal_angle_bisector(C, B, D))
By perpendicular_line_definition on F, g, internal_angle_bisector(C, B, D) we get g == perpendicular_line(F, internal_angle_bisector(C, B, D))
By perpendicular_line_definition on excenter(B, C, D), internal_angle_bisector(C, B, D), g we get internal_angle_bisector(C, B, D) == perpendicular_line(excenter(B, C, D), g)
By perpendicular_line_definition on B, g, internal_angle_bisector(C, B, D) we get g == perpendicular_line(B, internal_angle_bisector(C, B, D))
By perpendicular_line_definition on G, g, internal_angle_bisector(C, B, D) we get g == perpendicular_line(G, internal_angle_bisector(C, B, D))
By perpendicular_line_definition on incenter(B, C, D), internal_angle_bisector(C, B, D), g we get internal_angle_bisector(C, B, D) == perpendicular_line(incenter(B, C, D), g)
By perpendicular_line_definition on E, g, internal_angle_bisector(C, B, D) we get g == perpendicular_line(E, internal_angle_bisector(C, B, D))
By perpendicular_line_definition on B, internal_angle_bisector(C, B, D), g we get perpendicular_line(B, g) == internal_angle_bisector(C, B, D)
By same_angle_v1 on E, B, F, C we get angle(B, E, C) == angle(F, E, C) mod 360
By same_angle_v0 on F, E, B, C we get angle(B, F, C) == angle(E, F, C) mod 360
By same_angle_v2 on B, E, F, D we get angle(E, B, D) == angle(F, B, D) + 180 mod 360
By same_angle_v0 on F, E, B, D we get angle(B, F, D) == angle(E, F, D) mod 360
By same_angle_v2 on B, E, F, C we get angle(E, B, C) == angle(F, B, C) + 180 mod 360
By same_angle_v1 on E, F, B, D we get angle(B, E, D) == angle(F, E, D) mod 360
By projection_definition on incenter(B, C, D), D, Line(D, E) we get D == projection(incenter(B, C, D), Line(D, E))
By projection_definition on excenter(B, C, D), D, Line(D, F) we get D == projection(excenter(B, C, D), Line(D, F))
By projection_definition on incenter(B, C, D), C, h we get C == projection(incenter(B, C, D), h)
By projection_definition on excenter(B, C, D), C, f we get C == projection(excenter(B, C, D), f)
By perpendicular_direction_conditions_v0_r on incenter(B, C, D), B, F, E we get 180 == 2 * direction(incenter(B, C, D), B) - 2 * direction(F, E) mod 360
By in_imply_collinear on B, G, F we get collinear(B, F, G)
By perpendicular_direction_conditions_v0_r on G, F, B, incenter(B, C, D) we get 180 == 2 * direction(G, F) - 2 * direction(B, incenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on E, incenter(B, C, D), C, F we get 180 == 2 * direction(E, incenter(B, C, D)) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, C, D), B, E, F we get 180 == 2 * direction(excenter(B, C, D), B) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on B, F, B, incenter(B, C, D) we get 180 == 2 * direction(B, F) - 2 * direction(B, incenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on B, incenter(B, C, D), B, E we get 180 == 2 * direction(B, incenter(B, C, D)) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on F, B, B, excenter(B, C, D) we get 180 == 2 * direction(F, B) - 2 * direction(B, excenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on F, excenter(B, C, D), E, C we get 180 == 2 * direction(F, excenter(B, C, D)) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, C, D), F, C, E we get 180 == 2 * direction(excenter(B, C, D), F) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on E, C, excenter(B, C, D), C we get 180 == 2 * direction(E, C) - 2 * direction(excenter(B, C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on E, F, B, excenter(B, C, D) we get 180 == 2 * direction(E, F) - 2 * direction(B, excenter(B, C, D)) mod 360
By in_imply_collinear on B, excenter(B, C, D), incenter(B, C, D) we get collinear(B, excenter(B, C, D), incenter(B, C, D))
By perpendicular_direction_conditions_v0_r on excenter(B, C, D), B, F, B we get 180 == 2 * direction(excenter(B, C, D), B) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, C, D), B, E, G we get 180 == 2 * direction(excenter(B, C, D), B) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on B, incenter(B, C, D), E, F we get 180 == 2 * direction(B, incenter(B, C, D)) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on D, E, incenter(B, C, D), F we get 180 == 2 * direction(D, E) - 2 * direction(incenter(B, C, D), F) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, C, D), incenter(B, C, D), F, E we get 180 == 2 * direction(excenter(B, C, D), incenter(B, C, D)) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on F, G, B, excenter(B, C, D) we get 180 == 2 * direction(F, G) - 2 * direction(B, excenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on incenter(B, C, D), excenter(B, C, D), E, F we get 180 == 2 * direction(incenter(B, C, D), excenter(B, C, D)) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on B, F, incenter(B, C, D), excenter(B, C, D) we get 180 == 2 * direction(B, F) - 2 * direction(incenter(B, C, D), excenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on incenter(B, C, D), B, G, E we get 180 == 2 * direction(incenter(B, C, D), B) - 2 * direction(G, E) mod 360
By perpendicular_direction_conditions_v0_r on B, excenter(B, C, D), E, G we get 180 == 2 * direction(B, excenter(B, C, D)) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on E, D, incenter(B, C, D), F we get 180 == 2 * direction(E, D) - 2 * direction(incenter(B, C, D), F) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, C, D), B, G, E we get 180 == 2 * direction(excenter(B, C, D), B) - 2 * direction(G, E) mod 360
By perpendicular_direction_conditions_v0_r on E, incenter(B, C, D), F, C we get 180 == 2 * direction(E, incenter(B, C, D)) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, C, D), B, G, F we get 180 == 2 * direction(excenter(B, C, D), B) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on E, excenter(B, C, D), D, F we get 180 == 2 * direction(E, excenter(B, C, D)) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, C, D), B, B, E we get 180 == 2 * direction(excenter(B, C, D), B) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on D, incenter(B, C, D), D, E we get 180 == 2 * direction(D, incenter(B, C, D)) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on E, C, C, excenter(B, C, D) we get 180 == 2 * direction(E, C) - 2 * direction(C, excenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, excenter(B, C, D), E, C we get 180 == 2 * direction(C, excenter(B, C, D)) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, C, D), E, F, D we get 180 == 2 * direction(excenter(B, C, D), E) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on B, incenter(B, C, D), E, G we get 180 == 2 * direction(B, incenter(B, C, D)) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on F, D, E, excenter(B, C, D) we get 180 == 2 * direction(F, D) - 2 * direction(E, excenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on B, F, excenter(B, C, D), B we get 180 == 2 * direction(B, F) - 2 * direction(excenter(B, C, D), B) mod 360
By perpendicular_direction_conditions_v0_r on incenter(B, C, D), C, F, C we get 180 == 2 * direction(incenter(B, C, D), C) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on D, E, incenter(B, C, D), D we get 180 == 2 * direction(D, E) - 2 * direction(incenter(B, C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on B, F, B, excenter(B, C, D) we get 180 == 2 * direction(B, F) - 2 * direction(B, excenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, F, incenter(B, C, D), C we get 180 == 2 * direction(C, F) - 2 * direction(incenter(B, C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on incenter(B, C, D), B, E, F we get 180 == 2 * direction(incenter(B, C, D), B) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, C, D), incenter(B, C, D), G, E we get 180 == 2 * direction(excenter(B, C, D), incenter(B, C, D)) - 2 * direction(G, E) mod 360
By perpendicular_direction_conditions_v0_r on incenter(B, C, D), D, D, E we get 180 == 2 * direction(incenter(B, C, D), D) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on D, F, excenter(B, C, D), E we get 180 == 2 * direction(D, F) - 2 * direction(excenter(B, C, D), E) mod 360
By perpendicular_direction_conditions_v0_r on E, B, B, excenter(B, C, D) we get 180 == 2 * direction(E, B) - 2 * direction(B, excenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on B, E, B, excenter(B, C, D) we get 180 == 2 * direction(B, E) - 2 * direction(B, excenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on E, G, excenter(B, C, D), incenter(B, C, D) we get 180 == 2 * direction(E, G) - 2 * direction(excenter(B, C, D), incenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on B, excenter(B, C, D), G, E we get 180 == 2 * direction(B, excenter(B, C, D)) - 2 * direction(G, E) mod 360
By perpendicular_direction_conditions_v0_r on F, E, B, excenter(B, C, D) we get 180 == 2 * direction(F, E) - 2 * direction(B, excenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on G, E, excenter(B, C, D), incenter(B, C, D) we get 180 == 2 * direction(G, E) - 2 * direction(excenter(B, C, D), incenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on incenter(B, C, D), excenter(B, C, D), F, G we get 180 == 2 * direction(incenter(B, C, D), excenter(B, C, D)) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on B, excenter(B, C, D), F, G we get 180 == 2 * direction(B, excenter(B, C, D)) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on G, F, excenter(B, C, D), incenter(B, C, D) we get 180 == 2 * direction(G, F) - 2 * direction(excenter(B, C, D), incenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on E, D, D, incenter(B, C, D) we get 180 == 2 * direction(E, D) - 2 * direction(D, incenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on E, G, excenter(B, C, D), B we get 180 == 2 * direction(E, G) - 2 * direction(excenter(B, C, D), B) mod 360
By perpendicular_direction_conditions_v0_r on D, E, D, incenter(B, C, D) we get 180 == 2 * direction(D, E) - 2 * direction(D, incenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, E, excenter(B, C, D), C we get 180 == 2 * direction(C, E) - 2 * direction(excenter(B, C, D), C) mod 360
By projection_definition on excenter(B, C, D), B, g we get B == projection(excenter(B, C, D), g)
By perpendicular_direction_conditions_v0_r on E, B, B, incenter(B, C, D) we get 180 == 2 * direction(E, B) - 2 * direction(B, incenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on F, G, excenter(B, C, D), B we get 180 == 2 * direction(F, G) - 2 * direction(excenter(B, C, D), B) mod 360
By perpendicular_direction_conditions_v0_r on E, B, incenter(B, C, D), excenter(B, C, D) we get 180 == 2 * direction(E, B) - 2 * direction(incenter(B, C, D), excenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, F, incenter(B, C, D), E we get 180 == 2 * direction(C, F) - 2 * direction(incenter(B, C, D), E) mod 360
By perpendicular_direction_conditions_v0_r on incenter(B, C, D), excenter(B, C, D), B, F we get 180 == 2 * direction(incenter(B, C, D), excenter(B, C, D)) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on E, F, excenter(B, C, D), B we get 180 == 2 * direction(E, F) - 2 * direction(excenter(B, C, D), B) mod 360
By perpendicular_direction_conditions_v0_r on E, D, incenter(B, C, D), D we get 180 == 2 * direction(E, D) - 2 * direction(incenter(B, C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on G, F, excenter(B, C, D), B we get 180 == 2 * direction(G, F) - 2 * direction(excenter(B, C, D), B) mod 360
By perpendicular_direction_conditions_v0_r on F, G, incenter(B, C, D), B we get 180 == 2 * direction(F, G) - 2 * direction(incenter(B, C, D), B) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, C, D), incenter(B, C, D), F, G we get 180 == 2 * direction(excenter(B, C, D), incenter(B, C, D)) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on E, D, F, incenter(B, C, D) we get 180 == 2 * direction(E, D) - 2 * direction(F, incenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, excenter(B, C, D), F, D we get 180 == 2 * direction(D, excenter(B, C, D)) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on B, excenter(B, C, D), F, B we get 180 == 2 * direction(B, excenter(B, C, D)) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on incenter(B, C, D), excenter(B, C, D), G, E we get 180 == 2 * direction(incenter(B, C, D), excenter(B, C, D)) - 2 * direction(G, E) mod 360
By perpendicular_direction_conditions_v0_r on incenter(B, C, D), D, E, D we get 180 == 2 * direction(incenter(B, C, D), D) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on F, C, E, incenter(B, C, D) we get 180 == 2 * direction(F, C) - 2 * direction(E, incenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, F, C, incenter(B, C, D) we get 180 == 2 * direction(C, F) - 2 * direction(C, incenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on G, F, incenter(B, C, D), excenter(B, C, D) we get 180 == 2 * direction(G, F) - 2 * direction(incenter(B, C, D), excenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on F, B, incenter(B, C, D), B we get 180 == 2 * direction(F, B) - 2 * direction(incenter(B, C, D), B) mod 360
By perpendicular_direction_conditions_v0_r on D, E, F, incenter(B, C, D) we get 180 == 2 * direction(D, E) - 2 * direction(F, incenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on incenter(B, C, D), B, F, B we get 180 == 2 * direction(incenter(B, C, D), B) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on B, excenter(B, C, D), E, B we get 180 == 2 * direction(B, excenter(B, C, D)) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, C, D), incenter(B, C, D), E, F we get 180 == 2 * direction(excenter(B, C, D), incenter(B, C, D)) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on F, C, incenter(B, C, D), E we get 180 == 2 * direction(F, C) - 2 * direction(incenter(B, C, D), E) mod 360
By perpendicular_direction_conditions_v0_r on F, D, D, excenter(B, C, D) we get 180 == 2 * direction(F, D) - 2 * direction(D, excenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on F, E, B, incenter(B, C, D) we get 180 == 2 * direction(F, E) - 2 * direction(B, incenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, C, D), C, E, C we get 180 == 2 * direction(excenter(B, C, D), C) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, C, D), incenter(B, C, D), E, B we get 180 == 2 * direction(excenter(B, C, D), incenter(B, C, D)) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on F, E, excenter(B, C, D), B we get 180 == 2 * direction(F, E) - 2 * direction(excenter(B, C, D), B) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, C, D), B, E, B we get 180 == 2 * direction(excenter(B, C, D), B) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on B, incenter(B, C, D), E, B we get 180 == 2 * direction(B, incenter(B, C, D)) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on incenter(B, C, D), F, E, D we get 180 == 2 * direction(incenter(B, C, D), F) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on F, E, incenter(B, C, D), B we get 180 == 2 * direction(F, E) - 2 * direction(incenter(B, C, D), B) mod 360
By perpendicular_direction_conditions_v0_r on E, B, incenter(B, C, D), B we get 180 == 2 * direction(E, B) - 2 * direction(incenter(B, C, D), B) mod 360
By perpendicular_direction_conditions_v0_r on F, B, B, incenter(B, C, D) we get 180 == 2 * direction(F, B) - 2 * direction(B, incenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on B, E, excenter(B, C, D), B we get 180 == 2 * direction(B, E) - 2 * direction(excenter(B, C, D), B) mod 360
By perpendicular_direction_conditions_v0_r on B, incenter(B, C, D), F, G we get 180 == 2 * direction(B, incenter(B, C, D)) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, C, D), D, F, D we get 180 == 2 * direction(excenter(B, C, D), D) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on E, B, excenter(B, C, D), B we get 180 == 2 * direction(E, B) - 2 * direction(excenter(B, C, D), B) mod 360
By perpendicular_direction_conditions_v0_r on F, incenter(B, C, D), E, D we get 180 == 2 * direction(F, incenter(B, C, D)) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on incenter(B, C, D), B, E, G we get 180 == 2 * direction(incenter(B, C, D), B) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on incenter(B, C, D), B, G, F we get 180 == 2 * direction(incenter(B, C, D), B) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on E, G, B, incenter(B, C, D) we get 180 == 2 * direction(E, G) - 2 * direction(B, incenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on E, G, incenter(B, C, D), B we get 180 == 2 * direction(E, G) - 2 * direction(incenter(B, C, D), B) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, C, D), B, B, F we get 180 == 2 * direction(excenter(B, C, D), B) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on E, excenter(B, C, D), F, D we get 180 == 2 * direction(E, excenter(B, C, D)) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on F, incenter(B, C, D), D, E we get 180 == 2 * direction(F, incenter(B, C, D)) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on D, incenter(B, C, D), E, D we get 180 == 2 * direction(D, incenter(B, C, D)) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on incenter(B, C, D), excenter(B, C, D), F, B we get 180 == 2 * direction(incenter(B, C, D), excenter(B, C, D)) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on F, G, excenter(B, C, D), incenter(B, C, D) we get 180 == 2 * direction(F, G) - 2 * direction(excenter(B, C, D), incenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on incenter(B, C, D), excenter(B, C, D), G, F we get 180 == 2 * direction(incenter(B, C, D), excenter(B, C, D)) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on B, E, incenter(B, C, D), excenter(B, C, D) we get 180 == 2 * direction(B, E) - 2 * direction(incenter(B, C, D), excenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on G, E, incenter(B, C, D), B we get 180 == 2 * direction(G, E) - 2 * direction(incenter(B, C, D), B) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, C, D), incenter(B, C, D), F, B we get 180 == 2 * direction(excenter(B, C, D), incenter(B, C, D)) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on incenter(B, C, D), C, C, F we get 180 == 2 * direction(incenter(B, C, D), C) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on B, excenter(B, C, D), F, E we get 180 == 2 * direction(B, excenter(B, C, D)) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on incenter(B, C, D), excenter(B, C, D), E, B we get 180 == 2 * direction(incenter(B, C, D), excenter(B, C, D)) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on B, excenter(B, C, D), E, F we get 180 == 2 * direction(B, excenter(B, C, D)) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on F, G, B, incenter(B, C, D) we get 180 == 2 * direction(F, G) - 2 * direction(B, incenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, C, D), B, F, E we get 180 == 2 * direction(excenter(B, C, D), B) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on C, F, E, incenter(B, C, D) we get 180 == 2 * direction(C, F) - 2 * direction(E, incenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on B, incenter(B, C, D), G, E we get 180 == 2 * direction(B, incenter(B, C, D)) - 2 * direction(G, E) mod 360
By perpendicular_direction_conditions_v0_r on incenter(B, C, D), E, C, F we get 180 == 2 * direction(incenter(B, C, D), E) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on B, incenter(B, C, D), F, B we get 180 == 2 * direction(B, incenter(B, C, D)) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, C, D), incenter(B, C, D), B, E we get 180 == 2 * direction(excenter(B, C, D), incenter(B, C, D)) - 2 * direction(B, E) mod 360
By projection_definition on incenter(B, C, D), B, g we get B == projection(incenter(B, C, D), g)
By perpendicular_direction_conditions_v0_r on F, excenter(B, C, D), C, E we get 180 == 2 * direction(F, excenter(B, C, D)) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, C, D), B, F, G we get 180 == 2 * direction(excenter(B, C, D), B) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on F, G, incenter(B, C, D), excenter(B, C, D) we get 180 == 2 * direction(F, G) - 2 * direction(incenter(B, C, D), excenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, C, D), incenter(B, C, D), B, F we get 180 == 2 * direction(excenter(B, C, D), incenter(B, C, D)) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on G, E, B, excenter(B, C, D) we get 180 == 2 * direction(G, E) - 2 * direction(B, excenter(B, C, D)) mod 360
By projection_definition on F, B, internal_angle_bisector(C, B, D) we get B == projection(F, internal_angle_bisector(C, B, D))
By perpendicular_direction_conditions_v0_r on incenter(B, C, D), B, B, E we get 180 == 2 * direction(incenter(B, C, D), B) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on E, G, B, excenter(B, C, D) we get 180 == 2 * direction(E, G) - 2 * direction(B, excenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on F, C, incenter(B, C, D), C we get 180 == 2 * direction(F, C) - 2 * direction(incenter(B, C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on incenter(B, C, D), excenter(B, C, D), B, E we get 180 == 2 * direction(incenter(B, C, D), excenter(B, C, D)) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on G, E, excenter(B, C, D), B we get 180 == 2 * direction(G, E) - 2 * direction(excenter(B, C, D), B) mod 360
By perpendicular_direction_conditions_v0_r on E, C, excenter(B, C, D), F we get 180 == 2 * direction(E, C) - 2 * direction(excenter(B, C, D), F) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, C, D), F, E, C we get 180 == 2 * direction(excenter(B, C, D), F) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on F, D, excenter(B, C, D), E we get 180 == 2 * direction(F, D) - 2 * direction(excenter(B, C, D), E) mod 360
By perpendicular_direction_conditions_v0_r on D, F, E, excenter(B, C, D) we get 180 == 2 * direction(D, F) - 2 * direction(E, excenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on E, B, excenter(B, C, D), incenter(B, C, D) we get 180 == 2 * direction(E, B) - 2 * direction(excenter(B, C, D), incenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on G, F, B, excenter(B, C, D) we get 180 == 2 * direction(G, F) - 2 * direction(B, excenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on G, F, incenter(B, C, D), B we get 180 == 2 * direction(G, F) - 2 * direction(incenter(B, C, D), B) mod 360
By perpendicular_direction_conditions_v0_r on B, excenter(B, C, D), G, F we get 180 == 2 * direction(B, excenter(B, C, D)) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on F, B, excenter(B, C, D), B we get 180 == 2 * direction(F, B) - 2 * direction(excenter(B, C, D), B) mod 360
By perpendicular_direction_conditions_v0_r on E, F, excenter(B, C, D), incenter(B, C, D) we get 180 == 2 * direction(E, F) - 2 * direction(excenter(B, C, D), incenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on E, F, incenter(B, C, D), B we get 180 == 2 * direction(E, F) - 2 * direction(incenter(B, C, D), B) mod 360
By perpendicular_direction_conditions_v0_r on E, F, B, incenter(B, C, D) we get 180 == 2 * direction(E, F) - 2 * direction(B, incenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on F, E, incenter(B, C, D), excenter(B, C, D) we get 180 == 2 * direction(F, E) - 2 * direction(incenter(B, C, D), excenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on G, E, B, incenter(B, C, D) we get 180 == 2 * direction(G, E) - 2 * direction(B, incenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on E, C, F, excenter(B, C, D) we get 180 == 2 * direction(E, C) - 2 * direction(F, excenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on B, excenter(B, C, D), B, F we get 180 == 2 * direction(B, excenter(B, C, D)) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, C, D), incenter(B, C, D), E, G we get 180 == 2 * direction(excenter(B, C, D), incenter(B, C, D)) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on incenter(B, C, D), B, E, B we get 180 == 2 * direction(incenter(B, C, D), B) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on C, incenter(B, C, D), F, C we get 180 == 2 * direction(C, incenter(B, C, D)) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, C, D), C, C, E we get 180 == 2 * direction(excenter(B, C, D), C) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on C, E, F, excenter(B, C, D) we get 180 == 2 * direction(C, E) - 2 * direction(F, excenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on B, incenter(B, C, D), F, E we get 180 == 2 * direction(B, incenter(B, C, D)) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on D, excenter(B, C, D), D, F we get 180 == 2 * direction(D, excenter(B, C, D)) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on B, E, B, incenter(B, C, D) we get 180 == 2 * direction(B, E) - 2 * direction(B, incenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, F, D, excenter(B, C, D) we get 180 == 2 * direction(D, F) - 2 * direction(D, excenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on E, F, incenter(B, C, D), excenter(B, C, D) we get 180 == 2 * direction(E, F) - 2 * direction(incenter(B, C, D), excenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on B, incenter(B, C, D), G, F we get 180 == 2 * direction(B, incenter(B, C, D)) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, C, D), E, D, F we get 180 == 2 * direction(excenter(B, C, D), E) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on F, B, excenter(B, C, D), incenter(B, C, D) we get 180 == 2 * direction(F, B) - 2 * direction(excenter(B, C, D), incenter(B, C, D)) mod 360
By projection_definition on E, B, internal_angle_bisector(C, B, D) we get B == projection(E, internal_angle_bisector(C, B, D))
By perpendicular_direction_conditions_v0_r on C, E, C, excenter(B, C, D) we get 180 == 2 * direction(C, E) - 2 * direction(C, excenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, E, excenter(B, C, D), F we get 180 == 2 * direction(C, E) - 2 * direction(excenter(B, C, D), F) mod 360
By perpendicular_direction_conditions_v0_r on B, E, excenter(B, C, D), incenter(B, C, D) we get 180 == 2 * direction(B, E) - 2 * direction(excenter(B, C, D), incenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on F, E, excenter(B, C, D), incenter(B, C, D) we get 180 == 2 * direction(F, E) - 2 * direction(excenter(B, C, D), incenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on B, F, incenter(B, C, D), B we get 180 == 2 * direction(B, F) - 2 * direction(incenter(B, C, D), B) mod 360
By perpendicular_direction_conditions_v0_r on C, incenter(B, C, D), C, F we get 180 == 2 * direction(C, incenter(B, C, D)) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on B, incenter(B, C, D), B, F we get 180 == 2 * direction(B, incenter(B, C, D)) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on incenter(B, C, D), excenter(B, C, D), E, G we get 180 == 2 * direction(incenter(B, C, D), excenter(B, C, D)) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on B, excenter(B, C, D), B, E we get 180 == 2 * direction(B, excenter(B, C, D)) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on incenter(B, C, D), excenter(B, C, D), F, E we get 180 == 2 * direction(incenter(B, C, D), excenter(B, C, D)) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, C, D), incenter(B, C, D), G, F we get 180 == 2 * direction(excenter(B, C, D), incenter(B, C, D)) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on B, F, excenter(B, C, D), incenter(B, C, D) we get 180 == 2 * direction(B, F) - 2 * direction(excenter(B, C, D), incenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on F, B, incenter(B, C, D), excenter(B, C, D) we get 180 == 2 * direction(F, B) - 2 * direction(incenter(B, C, D), excenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, C, D), D, D, F we get 180 == 2 * direction(excenter(B, C, D), D) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on incenter(B, C, D), F, D, E we get 180 == 2 * direction(incenter(B, C, D), F) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on D, F, excenter(B, C, D), D we get 180 == 2 * direction(D, F) - 2 * direction(excenter(B, C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on F, C, C, incenter(B, C, D) we get 180 == 2 * direction(F, C) - 2 * direction(C, incenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on incenter(B, C, D), E, F, C we get 180 == 2 * direction(incenter(B, C, D), E) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on incenter(B, C, D), B, F, G we get 180 == 2 * direction(incenter(B, C, D), B) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on incenter(B, C, D), B, B, F we get 180 == 2 * direction(incenter(B, C, D), B) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on E, G, incenter(B, C, D), excenter(B, C, D) we get 180 == 2 * direction(E, G) - 2 * direction(incenter(B, C, D), excenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on B, E, incenter(B, C, D), B we get 180 == 2 * direction(B, E) - 2 * direction(incenter(B, C, D), B) mod 360
By perpendicular_direction_conditions_v0_r on G, E, incenter(B, C, D), excenter(B, C, D) we get 180 == 2 * direction(G, E) - 2 * direction(incenter(B, C, D), excenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on F, D, excenter(B, C, D), D we get 180 == 2 * direction(F, D) - 2 * direction(excenter(B, C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on C, excenter(B, C, D), C, E we get 180 == 2 * direction(C, excenter(B, C, D)) - 2 * direction(C, E) mod 360
By probably_between_and_collinear_implies_between on E, B, F we get between(E, B, F)
By divide_by_2_mod_180_v0 on G, C, A, E, B, D we get angle(E, B, D) == angle(G, C, A) mod 360
By divide_by_2_mod_180_v0 on G, D, A, D, B, F we get angle(D, B, F) == angle(G, D, A) mod 360
By divide_by_2_mod_180_v0 on D, B, F, E, B, C we get angle(D, B, F) == angle(E, B, C) mod 360
By divide_by_2_mod_180_v3 on F, B, C, G, D, A we get angle(F, B, C) == angle(G, D, A) + 180 mod 360
By divide_by_2_mod_180_v2 on D, B, F, D, C, G we get angle(D, B, F) == angle(D, C, G) + 180 mod 360
By divide_by_2_mod_180_v3 on G, D, C, D, B, F we get angle(G, D, C) == angle(D, B, F) + 180 mod 360
By divide_by_2_mod_180_v0 on G, C, D, C, B, F we get angle(C, B, F) == angle(G, C, D) mod 360
By divide_by_2_mod_180_v0 on C, D, G, E, B, D we get angle(C, D, G) == angle(E, B, D) mod 360
By in_imply_collinear on G, B, E we get collinear(B, E, G)
By divide_by_2_mod_180_v2 on G, D, A, D, B, E we get angle(G, D, A) == angle(D, B, E) + 180 mod 360
By divide_by_2_mod_180_v3 on D, C, G, E, B, C we get angle(D, C, G) == angle(E, B, C) + 180 mod 360
By divide_by_2_mod_180_v0 on E, B, D, G, C, D we get angle(E, B, D) == angle(G, C, D) mod 360
By divide_by_2_mod_180_v1 on F, B, C, D, C, G we get angle(D, C, G) == angle(F, B, C) mod 360
By divide_by_2_mod_180_v1 on A, C, G, F, B, C we get angle(A, C, G) == angle(F, B, C) mod 360
By divide_by_2_mod_180_v0 on E, B, D, C, B, F we get angle(C, B, F) == angle(E, B, D) mod 360
By divide_by_2_mod_180_v0 on C, B, F, C, D, G we get angle(C, B, F) == angle(C, D, G) mod 360
By divide_by_2_mod_180_v1 on C, B, E, F, B, D we get angle(C, B, E) == angle(F, B, D) mod 360
By divide_by_2_mod_180_v3 on A, D, G, C, B, F we get angle(A, D, G) == angle(C, B, F) + 180 mod 360
By internal_angle_bisector_definition_v0 on G, B, G, E we get angle(B, E, G) == angle(G, E, B) mod 360
By divide_by_2_mod_180_v3 on C, B, E, C, D, G we get angle(C, B, E) == angle(C, D, G) + 180 mod 360
By divide_by_2_mod_180_v3 on D, C, G, D, B, F we get angle(D, C, G) == angle(D, B, F) + 180 mod 360
By divide_by_2_mod_180_v2 on C, B, F, A, D, G we get angle(C, B, F) == angle(A, D, G) + 180 mod 360
By divide_by_2_mod_180_v1 on D, B, E, G, D, C we get angle(D, B, E) == angle(G, D, C) mod 360
By divide_by_2_mod_180_v1 on A, D, G, C, B, E we get angle(A, D, G) == angle(C, B, E) mod 360
By divide_by_2_mod_180_v2 on E, B, C, A, C, G we get angle(E, B, C) == angle(A, C, G) + 180 mod 360
By divide_by_2_mod_180_v1 on D, B, E, D, C, G we get angle(D, B, E) == angle(D, C, G) mod 360
By divide_by_2_mod_180_v2 on G, C, A, F, B, D we get angle(G, C, A) == angle(F, B, D) + 180 mod 360
By divide_by_2_mod_180_v0 on E, B, C, G, D, A we get angle(E, B, C) == angle(G, D, A) mod 360
By divide_by_2_mod_180_v3 on C, B, E, G, C, A we get angle(C, B, E) == angle(G, C, A) + 180 mod 360
By divide_by_2_mod_180_v0 on C, B, F, G, C, A we get angle(C, B, F) == angle(G, C, A) mod 360
By divide_by_2_mod_180_v3 on C, B, E, C, B, F we get angle(C, B, E) == angle(C, B, F) + 180 mod 360
By divide_by_2_mod_180_v2 on C, D, G, F, B, D we get angle(C, D, G) == angle(F, B, D) + 180 mod 360
By divide_by_2_mod_180_v1 on A, D, G, F, B, D we get angle(A, D, G) == angle(F, B, D) mod 360
By divide_by_2_mod_180_v1 on D, B, E, A, C, G we get angle(A, C, G) == angle(D, B, E) mod 360
By divide_by_2_mod_180_v2 on E, B, C, D, C, G we get angle(E, B, C) == angle(D, C, G) + 180 mod 360
By internal_angle_bisector_definition_v0 on G, B, G, F we get angle(B, F, G) == angle(G, F, B) mod 360
By divide_by_2_mod_180_v3 on D, B, E, G, D, A we get angle(D, B, E) == angle(G, D, A) + 180 mod 360
By divide_by_2_mod_180_v3 on G, D, C, E, B, C we get angle(G, D, C) == angle(E, B, C) + 180 mod 360
By divide_by_2_mod_180_v2 on G, D, A, F, B, C we get angle(G, D, A) == angle(F, B, C) + 180 mod 360
By divide_by_2_mod_180_v3 on F, B, C, E, B, C we get angle(F, B, C) == angle(E, B, C) + 180 mod 360
By divide_by_2_mod_180_v3 on A, C, G, E, B, C we get angle(A, C, G) == angle(E, B, C) + 180 mod 360
By divide_by_2_mod_180_v1 on F, B, C, G, D, C we get angle(F, B, C) == angle(G, D, C) mod 360
By divide_by_2_mod_180_v1 on F, B, C, D, B, E we get angle(D, B, E) == angle(F, B, C) mod 360
By divide_by_2_mod_180_v2 on E, B, C, G, D, C we get angle(E, B, C) == angle(G, D, C) + 180 mod 360
By divide_by_2_mod_180_v3 on C, B, E, G, C, D we get angle(C, B, E) == angle(G, C, D) + 180 mod 360
By divide_by_2_mod_180_v3 on F, B, D, G, C, A we get angle(F, B, D) == angle(G, C, A) + 180 mod 360
By divide_by_2_mod_180_v2 on D, B, F, D, B, E we get angle(D, B, F) == angle(D, B, E) + 180 mod 360
By divide_by_2_mod_180_v3 on F, B, D, C, D, G we get angle(F, B, D) == angle(C, D, G) + 180 mod 360
By divide_by_2_mod_180_v3 on A, D, G, E, B, D we get angle(A, D, G) == angle(E, B, D) + 180 mod 360
By divide_by_2_mod_180_v2 on D, B, F, A, C, G we get angle(D, B, F) == angle(A, C, G) + 180 mod 360
By divide_by_2_mod_180_v2 on G, C, A, C, B, E we get angle(G, C, A) == angle(C, B, E) + 180 mod 360
By divide_by_2_mod_180_v3 on F, B, D, E, B, D we get angle(F, B, D) == angle(E, B, D) + 180 mod 360
By divide_by_2_mod_180_v2 on G, C, D, F, B, D we get angle(G, C, D) == angle(F, B, D) + 180 mod 360
By divide_by_2_mod_180_v2 on C, B, F, C, B, E we get angle(C, B, F) == angle(C, B, E) + 180 mod 360
By divide_by_2_mod_180_v2 on E, B, D, A, D, G we get angle(E, B, D) == angle(A, D, G) + 180 mod 360
By divide_by_2_mod_180_v3 on D, B, E, D, B, F we get angle(D, B, E) == angle(D, B, F) + 180 mod 360
By divide_by_2_mod_180_v2 on D, B, F, G, D, C we get angle(D, B, F) == angle(G, D, C) + 180 mod 360
By divide_by_2_mod_180_v2 on G, C, D, C, B, E we get angle(G, C, D) == angle(C, B, E) + 180 mod 360
By divide_by_2_mod_180_v2 on C, D, G, C, B, E we get angle(C, D, G) == angle(C, B, E) + 180 mod 360
By divide_by_2_mod_180_v3 on A, C, G, D, B, F we get angle(A, C, G) == angle(D, B, F) + 180 mod 360
By reverse_direction on B, F we get 180 == direction(B, F) - direction(F, B) mod 360
By divide_by_2_mod_180_v3 on F, B, D, G, C, D we get angle(F, B, D) == angle(G, C, D) + 180 mod 360
By reverse_direction on F, B we get 180 == direction(F, B) - direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on F, excenter(B, C, D), C, incenter(B, C, D) we get 180 == 2 * direction(F, excenter(B, C, D)) - 2 * direction(C, incenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on incenter(B, C, D), C, C, excenter(B, C, D) we get 180 == 2 * direction(incenter(B, C, D), C) - 2 * direction(C, excenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, incenter(B, C, D), excenter(B, C, D), F we get 180 == 2 * direction(C, incenter(B, C, D)) - 2 * direction(excenter(B, C, D), F) mod 360
By perpendicular_direction_conditions_v0_r on F, incenter(B, C, D), D, excenter(B, C, D) we get 180 == 2 * direction(F, incenter(B, C, D)) - 2 * direction(D, excenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, C, D), D, D, incenter(B, C, D) we get 180 == 2 * direction(excenter(B, C, D), D) - 2 * direction(D, incenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on incenter(B, C, D), E, C, excenter(B, C, D) we get 180 == 2 * direction(incenter(B, C, D), E) - 2 * direction(C, excenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on F, excenter(B, C, D), incenter(B, C, D), C we get 180 == 2 * direction(F, excenter(B, C, D)) - 2 * direction(incenter(B, C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, C, D), D, F, incenter(B, C, D) we get 180 == 2 * direction(excenter(B, C, D), D) - 2 * direction(F, incenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on E, excenter(B, C, D), D, incenter(B, C, D) we get 180 == 2 * direction(E, excenter(B, C, D)) - 2 * direction(D, incenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on incenter(B, C, D), F, D, excenter(B, C, D) we get 180 == 2 * direction(incenter(B, C, D), F) - 2 * direction(D, excenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on E, incenter(B, C, D), excenter(B, C, D), F we get 180 == 2 * direction(E, incenter(B, C, D)) - 2 * direction(excenter(B, C, D), F) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, C, D), D, incenter(B, C, D), D we get 180 == 2 * direction(excenter(B, C, D), D) - 2 * direction(incenter(B, C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on incenter(B, C, D), E, excenter(B, C, D), F we get 180 == 2 * direction(incenter(B, C, D), E) - 2 * direction(excenter(B, C, D), F) mod 360
By perpendicular_direction_conditions_v0_r on F, incenter(B, C, D), excenter(B, C, D), E we get 180 == 2 * direction(F, incenter(B, C, D)) - 2 * direction(excenter(B, C, D), E) mod 360
By perpendicular_direction_conditions_v0_r on C, excenter(B, C, D), incenter(B, C, D), E we get 180 == 2 * direction(C, excenter(B, C, D)) - 2 * direction(incenter(B, C, D), E) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, C, D), E, D, incenter(B, C, D) we get 180 == 2 * direction(excenter(B, C, D), E) - 2 * direction(D, incenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, C, D), C, incenter(B, C, D), E we get 180 == 2 * direction(excenter(B, C, D), C) - 2 * direction(incenter(B, C, D), E) mod 360
By perpendicular_direction_conditions_v0_r on F, incenter(B, C, D), E, excenter(B, C, D) we get 180 == 2 * direction(F, incenter(B, C, D)) - 2 * direction(E, excenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on E, excenter(B, C, D), incenter(B, C, D), F we get 180 == 2 * direction(E, excenter(B, C, D)) - 2 * direction(incenter(B, C, D), F) mod 360
By perpendicular_direction_conditions_v0_r on incenter(B, C, D), C, F, excenter(B, C, D) we get 180 == 2 * direction(incenter(B, C, D), C) - 2 * direction(F, excenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on incenter(B, C, D), F, excenter(B, C, D), E we get 180 == 2 * direction(incenter(B, C, D), F) - 2 * direction(excenter(B, C, D), E) mod 360
By perpendicular_direction_conditions_v0_r on F, excenter(B, C, D), incenter(B, C, D), E we get 180 == 2 * direction(F, excenter(B, C, D)) - 2 * direction(incenter(B, C, D), E) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, C, D), C, C, incenter(B, C, D) we get 180 == 2 * direction(excenter(B, C, D), C) - 2 * direction(C, incenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, C, D), C, E, incenter(B, C, D) we get 180 == 2 * direction(excenter(B, C, D), C) - 2 * direction(E, incenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, excenter(B, C, D), F, incenter(B, C, D) we get 180 == 2 * direction(D, excenter(B, C, D)) - 2 * direction(F, incenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, C, D), F, E, incenter(B, C, D) we get 180 == 2 * direction(excenter(B, C, D), F) - 2 * direction(E, incenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on F, incenter(B, C, D), excenter(B, C, D), D we get 180 == 2 * direction(F, incenter(B, C, D)) - 2 * direction(excenter(B, C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, C, D), C, incenter(B, C, D), C we get 180 == 2 * direction(excenter(B, C, D), C) - 2 * direction(incenter(B, C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on D, incenter(B, C, D), D, excenter(B, C, D) we get 180 == 2 * direction(D, incenter(B, C, D)) - 2 * direction(D, excenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on incenter(B, C, D), F, E, excenter(B, C, D) we get 180 == 2 * direction(incenter(B, C, D), F) - 2 * direction(E, excenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, excenter(B, C, D), E, incenter(B, C, D) we get 180 == 2 * direction(C, excenter(B, C, D)) - 2 * direction(E, incenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on incenter(B, C, D), D, excenter(B, C, D), E we get 180 == 2 * direction(incenter(B, C, D), D) - 2 * direction(excenter(B, C, D), E) mod 360
By perpendicular_direction_conditions_v0_r on D, incenter(B, C, D), E, excenter(B, C, D) we get 180 == 2 * direction(D, incenter(B, C, D)) - 2 * direction(E, excenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on E, incenter(B, C, D), F, excenter(B, C, D) we get 180 == 2 * direction(E, incenter(B, C, D)) - 2 * direction(F, excenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on incenter(B, C, D), D, D, excenter(B, C, D) we get 180 == 2 * direction(incenter(B, C, D), D) - 2 * direction(D, excenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on E, incenter(B, C, D), C, excenter(B, C, D) we get 180 == 2 * direction(E, incenter(B, C, D)) - 2 * direction(C, excenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, C, D), F, incenter(B, C, D), E we get 180 == 2 * direction(excenter(B, C, D), F) - 2 * direction(incenter(B, C, D), E) mod 360
By perpendicular_direction_conditions_v0_r on D, incenter(B, C, D), excenter(B, C, D), D we get 180 == 2 * direction(D, incenter(B, C, D)) - 2 * direction(excenter(B, C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on D, excenter(B, C, D), D, incenter(B, C, D) we get 180 == 2 * direction(D, excenter(B, C, D)) - 2 * direction(D, incenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on E, excenter(B, C, D), F, incenter(B, C, D) we get 180 == 2 * direction(E, excenter(B, C, D)) - 2 * direction(F, incenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, excenter(B, C, D), incenter(B, C, D), F we get 180 == 2 * direction(D, excenter(B, C, D)) - 2 * direction(incenter(B, C, D), F) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, C, D), E, F, incenter(B, C, D) we get 180 == 2 * direction(excenter(B, C, D), E) - 2 * direction(F, incenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on incenter(B, C, D), C, excenter(B, C, D), C we get 180 == 2 * direction(incenter(B, C, D), C) - 2 * direction(excenter(B, C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on incenter(B, C, D), D, excenter(B, C, D), D we get 180 == 2 * direction(incenter(B, C, D), D) - 2 * direction(excenter(B, C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on D, incenter(B, C, D), excenter(B, C, D), E we get 180 == 2 * direction(D, incenter(B, C, D)) - 2 * direction(excenter(B, C, D), E) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, C, D), F, incenter(B, C, D), C we get 180 == 2 * direction(excenter(B, C, D), F) - 2 * direction(incenter(B, C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on incenter(B, C, D), D, E, excenter(B, C, D) we get 180 == 2 * direction(incenter(B, C, D), D) - 2 * direction(E, excenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on F, excenter(B, C, D), E, incenter(B, C, D) we get 180 == 2 * direction(F, excenter(B, C, D)) - 2 * direction(E, incenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, incenter(B, C, D), excenter(B, C, D), C we get 180 == 2 * direction(C, incenter(B, C, D)) - 2 * direction(excenter(B, C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on E, incenter(B, C, D), excenter(B, C, D), C we get 180 == 2 * direction(E, incenter(B, C, D)) - 2 * direction(excenter(B, C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on E, excenter(B, C, D), incenter(B, C, D), D we get 180 == 2 * direction(E, excenter(B, C, D)) - 2 * direction(incenter(B, C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on incenter(B, C, D), E, excenter(B, C, D), C we get 180 == 2 * direction(incenter(B, C, D), E) - 2 * direction(excenter(B, C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on C, incenter(B, C, D), C, excenter(B, C, D) we get 180 == 2 * direction(C, incenter(B, C, D)) - 2 * direction(C, excenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, C, D), F, C, incenter(B, C, D) we get 180 == 2 * direction(excenter(B, C, D), F) - 2 * direction(C, incenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, C, D), E, incenter(B, C, D), F we get 180 == 2 * direction(excenter(B, C, D), E) - 2 * direction(incenter(B, C, D), F) mod 360
By perpendicular_direction_conditions_v0_r on C, excenter(B, C, D), incenter(B, C, D), C we get 180 == 2 * direction(C, excenter(B, C, D)) - 2 * direction(incenter(B, C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on incenter(B, C, D), E, F, excenter(B, C, D) we get 180 == 2 * direction(incenter(B, C, D), E) - 2 * direction(F, excenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on incenter(B, C, D), C, excenter(B, C, D), F we get 180 == 2 * direction(incenter(B, C, D), C) - 2 * direction(excenter(B, C, D), F) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, C, D), D, incenter(B, C, D), F we get 180 == 2 * direction(excenter(B, C, D), D) - 2 * direction(incenter(B, C, D), F) mod 360
By perpendicular_direction_conditions_v0_r on D, excenter(B, C, D), incenter(B, C, D), D we get 180 == 2 * direction(D, excenter(B, C, D)) - 2 * direction(incenter(B, C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, C, D), E, incenter(B, C, D), D we get 180 == 2 * direction(excenter(B, C, D), E) - 2 * direction(incenter(B, C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on C, incenter(B, C, D), F, excenter(B, C, D) we get 180 == 2 * direction(C, incenter(B, C, D)) - 2 * direction(F, excenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, excenter(B, C, D), C, incenter(B, C, D) we get 180 == 2 * direction(C, excenter(B, C, D)) - 2 * direction(C, incenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on incenter(B, C, D), F, excenter(B, C, D), D we get 180 == 2 * direction(incenter(B, C, D), F) - 2 * direction(excenter(B, C, D), D) mod 360
By external_angle_bisector_definition_v0_r on B, F, A, D we get Line(D, F) == external_angle_bisector(A, D, B)
By collinear_definition on C, E, incenter(B, C, D) we get E in Line(C, incenter(B, C, D)), incenter(B, C, D) in Line(C, E), Line(C, E) == Line(C, incenter(B, C, D)), 0 == 2 * angle(E, C, incenter(B, C, D)) mod 360
By internal_angle_bisector_definition_v0_r on B, E, A, D we get Line(D, E) == internal_angle_bisector(A, D, B)
By perpendicular_angle_conditions_v0 on E, B, excenter(B, C, D) we get angle(E, B, excenter(B, C, D)) == orientation(B, excenter(B, C, D), E) mod 360
By perpendicular_angle_conditions_v0 on excenter(B, C, D), C, E we get angle(excenter(B, C, D), C, E) == orientation(C, E, excenter(B, C, D)) mod 360
By external_angle_bisector_definition_v0 on B, excenter(B, C, D), C, D we get 180 == angle(B, D, excenter(B, C, D)) + angle(C, D, excenter(B, C, D)) mod 360
By internal_angle_bisector_definition_v0 on C, incenter(B, C, D), B, D we get angle(C, D, incenter(B, C, D)) == angle(incenter(B, C, D), D, B) mod 360
By perpendicular_angle_conditions_v0 on incenter(B, C, D), C, F we get angle(incenter(B, C, D), C, F) == orientation(C, F, incenter(B, C, D)) mod 360
By internal_angle_bisector_definition_v0 on D, incenter(B, C, D), C, B we get angle(D, B, incenter(B, C, D)) == angle(incenter(B, C, D), B, C) mod 360
By perpendicular_angle_conditions_v0 on F, B, incenter(B, C, D) we get angle(F, B, incenter(B, C, D)) == orientation(B, incenter(B, C, D), F) mod 360
By collinear_definition on C, F, excenter(B, C, D) we get F in Line(C, excenter(B, C, D)), excenter(B, C, D) in Line(C, F), Line(C, F) == Line(C, excenter(B, C, D)), 0 == 2 * angle(F, C, excenter(B, C, D)) mod 360
By internal_angle_bisector_definition_v0 on C, excenter(B, C, D), D, B we get angle(C, B, excenter(B, C, D)) == angle(excenter(B, C, D), B, D) mod 360
By perpendicular_angle_conditions_v0 on incenter(B, C, D), B, F we get angle(incenter(B, C, D), B, F) == orientation(B, F, incenter(B, C, D)) mod 360
By external_angle_bisector_definition_v0 on F, incenter(B, C, D), F, C we get 180 == angle(F, C, incenter(B, C, D)) + angle(F, C, incenter(B, C, D)) mod 360
By internal_angle_bisector_definition_v0 on B, incenter(B, C, D), C, D we get angle(B, D, incenter(B, C, D)) == angle(incenter(B, C, D), D, C) mod 360
By collinear_definition on D, F, incenter(B, C, D) we get F in Line(D, incenter(B, C, D)), incenter(B, C, D) in Line(D, F), Line(D, F) == Line(D, incenter(B, C, D)), 0 == 2 * angle(F, D, incenter(B, C, D)) mod 360
By internal_angle_bisector_definition_v0_r on B, E, B, F we get Line(E, F) == internal_angle_bisector(B, F, B)
By collinear_definition on E, D, excenter(B, C, D) we get D in Line(E, excenter(B, C, D)), excenter(B, C, D) in Line(D, E), Line(D, E) == Line(E, excenter(B, C, D)), 0 == 2 * angle(D, E, excenter(B, C, D)) mod 360
By internal_angle_bisector_definition_v0 on B, incenter(B, C, D), A, C we get angle(B, C, incenter(B, C, D)) == angle(incenter(B, C, D), C, A) mod 360
By perpendicular_angle_conditions_v0 on E, C, excenter(B, C, D) we get angle(E, C, excenter(B, C, D)) == orientation(C, excenter(B, C, D), E) mod 360
By collinear_definition on D, incenter(B, C, D), F we get incenter(B, C, D) in Line(D, F), F in Line(D, incenter(B, C, D)), Line(D, F) == Line(D, incenter(B, C, D)), 0 == 2 * angle(incenter(B, C, D), D, F) mod 360
By collinear_definition on D, excenter(B, C, D), E we get excenter(B, C, D) in Line(D, E), E in Line(D, excenter(B, C, D)), Line(D, E) == Line(D, excenter(B, C, D)), 0 == 2 * angle(excenter(B, C, D), D, E) mod 360
By perpendicular_angle_conditions_v0 on excenter(B, C, D), B, E we get angle(excenter(B, C, D), B, E) == orientation(B, E, excenter(B, C, D)) mod 360
By internal_angle_bisector_definition_v0 on D, incenter(B, C, D), B, C we get angle(D, C, incenter(B, C, D)) == angle(incenter(B, C, D), C, B) mod 360
By external_angle_bisector_definition_v0 on B, excenter(B, C, D), D, C we get 180 == angle(B, C, excenter(B, C, D)) + angle(D, C, excenter(B, C, D)) mod 360
By internal_angle_bisector_definition_v0_r on B, F, B, E we get Line(E, F) == internal_angle_bisector(B, E, B)
By external_angle_bisector_definition_v0 on E, incenter(B, C, D), E, D we get 180 == angle(E, D, incenter(B, C, D)) + angle(E, D, incenter(B, C, D)) mod 360
By external_angle_bisector_definition_v0 on B, excenter(B, C, D), A, C we get 180 == angle(B, C, excenter(B, C, D)) + angle(A, C, excenter(B, C, D)) mod 360
By collinear_definition on F, excenter(B, C, D), C we get excenter(B, C, D) in Line(C, F), C in Line(F, excenter(B, C, D)), Line(C, F) == Line(F, excenter(B, C, D)), 0 == 2 * angle(excenter(B, C, D), F, C) mod 360
By internal_angle_bisector_definition_v0_r on E, F, E, B we get Line(B, F) == internal_angle_bisector(E, B, E)
By collinear_definition on E, incenter(B, C, D), C we get incenter(B, C, D) in Line(C, E), C in Line(E, incenter(B, C, D)), Line(C, E) == Line(E, incenter(B, C, D)), 0 == 2 * angle(incenter(B, C, D), E, C) mod 360
By internal_angle_bisector_definition_v0 on B, incenter(B, C, D), D, C we get angle(B, C, incenter(B, C, D)) == angle(incenter(B, C, D), C, D) mod 360
By internal_angle_bisector_definition_v0 on D, excenter(B, C, D), C, B we get angle(D, B, excenter(B, C, D)) == angle(excenter(B, C, D), B, C) mod 360
By collinear_definition on C, incenter(B, C, D), E we get incenter(B, C, D) in Line(C, E), E in Line(C, incenter(B, C, D)), Line(C, E) == Line(C, incenter(B, C, D)), 0 == 2 * angle(incenter(B, C, D), C, E) mod 360
By perpendicular_angle_conditions_v0 on F, C, incenter(B, C, D) we get angle(F, C, incenter(B, C, D)) == orientation(C, incenter(B, C, D), F) mod 360
By perpendicular_angle_conditions_v0 on incenter(B, C, D), B, E we get angle(incenter(B, C, D), B, E) == orientation(B, E, incenter(B, C, D)) mod 360
By perpendicular_angle_conditions_v0 on E, B, incenter(B, C, D) we get angle(E, B, incenter(B, C, D)) == orientation(B, incenter(B, C, D), E) mod 360
By perpendicular_angle_conditions_v0 on F, B, excenter(B, C, D) we get angle(F, B, excenter(B, C, D)) == orientation(B, excenter(B, C, D), F) mod 360
By external_angle_bisector_definition_v0 on E, excenter(B, C, D), E, C we get 180 == angle(E, C, excenter(B, C, D)) + angle(E, C, excenter(B, C, D)) mod 360
By perpendicular_angle_conditions_v0 on F, D, excenter(B, C, D) we get angle(F, D, excenter(B, C, D)) == orientation(D, excenter(B, C, D), F) mod 360
By internal_angle_bisector_definition_v0_r on F, E, F, B we get Line(B, E) == internal_angle_bisector(F, B, F)
By collinear_definition on F, incenter(B, C, D), D we get incenter(B, C, D) in Line(D, F), D in Line(F, incenter(B, C, D)), Line(D, F) == Line(F, incenter(B, C, D)), 0 == 2 * angle(incenter(B, C, D), F, D) mod 360
By external_angle_bisector_definition_v0 on F, excenter(B, C, D), F, D we get 180 == angle(F, D, excenter(B, C, D)) + angle(F, D, excenter(B, C, D)) mod 360
By collinear_definition on E, C, incenter(B, C, D) we get C in Line(E, incenter(B, C, D)), incenter(B, C, D) in Line(C, E), Line(C, E) == Line(E, incenter(B, C, D)), 0 == 2 * angle(C, E, incenter(B, C, D)) mod 360
By internal_angle_bisector_definition_v0 on A, incenter(B, C, D), B, C we get angle(A, C, incenter(B, C, D)) == angle(incenter(B, C, D), C, B) mod 360
By perpendicular_angle_conditions_v0 on excenter(B, C, D), B, F we get angle(excenter(B, C, D), B, F) == orientation(B, F, excenter(B, C, D)) mod 360
By perpendicular_angle_conditions_v0 on excenter(B, C, D), D, F we get angle(excenter(B, C, D), D, F) == orientation(D, F, excenter(B, C, D)) mod 360
By collinear_definition on F, C, excenter(B, C, D) we get C in Line(F, excenter(B, C, D)), excenter(B, C, D) in Line(C, F), Line(C, F) == Line(F, excenter(B, C, D)), 0 == 2 * angle(C, F, excenter(B, C, D)) mod 360
By collinear_definition on D, E, excenter(B, C, D) we get E in Line(D, excenter(B, C, D)), excenter(B, C, D) in Line(D, E), Line(D, E) == Line(D, excenter(B, C, D)), 0 == 2 * angle(E, D, excenter(B, C, D)) mod 360
By internal_angle_bisector_definition_v0_r on F, F, F, C we get Line(C, F) == internal_angle_bisector(F, C, F)
By perpendicular_angle_conditions_v0 on incenter(B, C, D), D, E we get angle(incenter(B, C, D), D, E) == orientation(D, E, incenter(B, C, D)) mod 360
By collinear_definition on C, excenter(B, C, D), F we get excenter(B, C, D) in Line(C, F), F in Line(C, excenter(B, C, D)), Line(C, F) == Line(C, excenter(B, C, D)), 0 == 2 * angle(excenter(B, C, D), C, F) mod 360
By collinear_definition on F, D, incenter(B, C, D) we get D in Line(F, incenter(B, C, D)), incenter(B, C, D) in Line(D, F), Line(D, F) == Line(F, incenter(B, C, D)), 0 == 2 * angle(D, F, incenter(B, C, D)) mod 360
By internal_angle_bisector_definition_v0 on C, incenter(B, C, D), D, B we get angle(C, B, incenter(B, C, D)) == angle(incenter(B, C, D), B, D) mod 360
By collinear_definition on E, excenter(B, C, D), D we get excenter(B, C, D) in Line(D, E), D in Line(E, excenter(B, C, D)), Line(D, E) == Line(E, excenter(B, C, D)), 0 == 2 * angle(excenter(B, C, D), E, D) mod 360
By perpendicular_angle_conditions_v0 on E, D, incenter(B, C, D) we get angle(E, D, incenter(B, C, D)) == orientation(D, incenter(B, C, D), E) mod 360
By altitude_definition on excenter(B, C, D), G, F, internal_angle_bisector(C, B, D) we get internal_angle_bisector(C, B, D) == altitude(excenter(B, C, D), F, G)
By collinear_definition on excenter(B, C, D), D, E we get D in Line(E, excenter(B, C, D)), E in Line(D, excenter(B, C, D)), Line(D, excenter(B, C, D)) == Line(E, excenter(B, C, D)), 0 == 2 * angle(D, excenter(B, C, D), E) mod 360
By altitude_definition on E, C, excenter(B, C, D), f we get f == altitude(E, C, excenter(B, C, D))
By altitude_definition on incenter(B, C, D), D, excenter(B, C, D), Line(D, F) we get Line(D, F) == altitude(incenter(B, C, D), D, excenter(B, C, D))
By altitude_definition on incenter(B, C, D), excenter(B, C, D), C, f we get f == altitude(incenter(B, C, D), C, excenter(B, C, D))
By altitude_definition on incenter(B, C, D), E, excenter(B, C, D), Line(D, F) we get Line(D, F) == altitude(incenter(B, C, D), E, excenter(B, C, D))
By altitude_definition on excenter(B, C, D), incenter(B, C, D), F, Line(D, E) we get Line(D, E) == altitude(excenter(B, C, D), F, incenter(B, C, D))
By altitude_definition on incenter(B, C, D), F, E, internal_angle_bisector(C, B, D) we get internal_angle_bisector(C, B, D) == altitude(incenter(B, C, D), E, F)
By perpendicular_angle_conditions_v0 on excenter(B, C, D), C, incenter(B, C, D) we get angle(excenter(B, C, D), C, incenter(B, C, D)) == orientation(C, incenter(B, C, D), excenter(B, C, D)) mod 360
By altitude_definition on E, incenter(B, C, D), F, Line(D, E) we get Line(D, E) == altitude(E, F, incenter(B, C, D))
By collinear_definition on incenter(B, C, D), C, E we get C in Line(E, incenter(B, C, D)), E in Line(C, incenter(B, C, D)), Line(C, incenter(B, C, D)) == Line(E, incenter(B, C, D)), 0 == 2 * angle(C, incenter(B, C, D), E) mod 360
By altitude_definition on G, excenter(B, C, D), incenter(B, C, D), g we get g == altitude(G, excenter(B, C, D), incenter(B, C, D))
By altitude_definition on incenter(B, C, D), E, G, internal_angle_bisector(C, B, D) we get internal_angle_bisector(C, B, D) == altitude(incenter(B, C, D), E, G)
By altitude_definition on excenter(B, C, D), B, F, internal_angle_bisector(C, B, D) we get internal_angle_bisector(C, B, D) == altitude(excenter(B, C, D), B, F)
By collinear_definition on incenter(B, C, D), F, D we get F in Line(D, incenter(B, C, D)), D in Line(F, incenter(B, C, D)), Line(D, incenter(B, C, D)) == Line(F, incenter(B, C, D)), 0 == 2 * angle(F, incenter(B, C, D), D) mod 360
By altitude_definition on incenter(B, C, D), excenter(B, C, D), F, f we get f == altitude(incenter(B, C, D), F, excenter(B, C, D))
By altitude_definition on F, E, excenter(B, C, D), Line(D, F) we get Line(D, F) == altitude(F, E, excenter(B, C, D))
By altitude_definition on E, incenter(B, C, D), excenter(B, C, D), g we get g == altitude(E, excenter(B, C, D), incenter(B, C, D))
By collinear_definition on incenter(B, C, D), D, F we get D in Line(F, incenter(B, C, D)), F in Line(D, incenter(B, C, D)), Line(D, incenter(B, C, D)) == Line(F, incenter(B, C, D)), 0 == 2 * angle(D, incenter(B, C, D), F) mod 360
By altitude_definition on G, incenter(B, C, D), B, g we get g == altitude(G, B, incenter(B, C, D))
By collinear_definition on excenter(B, C, D), C, F we get C in Line(F, excenter(B, C, D)), F in Line(C, excenter(B, C, D)), Line(C, excenter(B, C, D)) == Line(F, excenter(B, C, D)), 0 == 2 * angle(C, excenter(B, C, D), F) mod 360
By altitude_definition on incenter(B, C, D), E, B, internal_angle_bisector(C, B, D) we get internal_angle_bisector(C, B, D) == altitude(incenter(B, C, D), B, E)
By altitude_definition on excenter(B, C, D), F, E, internal_angle_bisector(C, B, D) we get internal_angle_bisector(C, B, D) == altitude(excenter(B, C, D), E, F)
By altitude_definition on E, B, excenter(B, C, D), g we get g == altitude(E, B, excenter(B, C, D))
By altitude_definition on excenter(B, C, D), incenter(B, C, D), D, Line(D, E) we get Line(D, E) == altitude(excenter(B, C, D), D, incenter(B, C, D))
By altitude_definition on E, F, excenter(B, C, D), f we get f == altitude(E, F, excenter(B, C, D))
By altitude_definition on excenter(B, C, D), C, incenter(B, C, D), h we get h == altitude(excenter(B, C, D), C, incenter(B, C, D))
By altitude_definition on incenter(B, C, D), F, B, internal_angle_bisector(C, B, D) we get internal_angle_bisector(C, B, D) == altitude(incenter(B, C, D), B, F)
By altitude_definition on G, B, excenter(B, C, D), g we get g == altitude(G, B, excenter(B, C, D))
By altitude_definition on E, D, incenter(B, C, D), Line(D, E) we get Line(D, E) == altitude(E, D, incenter(B, C, D))
By perpendicular_angle_conditions_v0 on excenter(B, C, D), D, incenter(B, C, D) we get angle(excenter(B, C, D), D, incenter(B, C, D)) == orientation(D, incenter(B, C, D), excenter(B, C, D)) mod 360
By altitude_definition on excenter(B, C, D), incenter(B, C, D), E, h we get h == altitude(excenter(B, C, D), E, incenter(B, C, D))
By altitude_definition on F, excenter(B, C, D), D, Line(D, F) we get Line(D, F) == altitude(F, D, excenter(B, C, D))
By altitude_definition on F, C, incenter(B, C, D), h we get h == altitude(F, C, incenter(B, C, D))
By altitude_definition on E, B, incenter(B, C, D), g we get g == altitude(E, B, incenter(B, C, D))
By altitude_definition on F, incenter(B, C, D), E, h we get h == altitude(F, E, incenter(B, C, D))
By altitude_definition on excenter(B, C, D), E, G, internal_angle_bisector(C, B, D) we get internal_angle_bisector(C, B, D) == altitude(excenter(B, C, D), E, G)
By collinear_definition on incenter(B, C, D), E, C we get E in Line(C, incenter(B, C, D)), C in Line(E, incenter(B, C, D)), Line(C, incenter(B, C, D)) == Line(E, incenter(B, C, D)), 0 == 2 * angle(E, incenter(B, C, D), C) mod 360
By perpendicular_angle_conditions_v0 on incenter(B, C, D), D, excenter(B, C, D) we get angle(incenter(B, C, D), D, excenter(B, C, D)) == orientation(D, excenter(B, C, D), incenter(B, C, D)) mod 360
By perpendicular_angle_conditions_v0 on incenter(B, C, D), C, excenter(B, C, D) we get angle(incenter(B, C, D), C, excenter(B, C, D)) == orientation(C, excenter(B, C, D), incenter(B, C, D)) mod 360
By altitude_definition on excenter(B, C, D), E, B, internal_angle_bisector(C, B, D) we get internal_angle_bisector(C, B, D) == altitude(excenter(B, C, D), B, E)
By altitude_definition on F, excenter(B, C, D), B, g we get g == altitude(F, B, excenter(B, C, D))
By altitude_definition on F, B, incenter(B, C, D), g we get g == altitude(F, B, incenter(B, C, D))
By altitude_definition on F, incenter(B, C, D), excenter(B, C, D), g we get g == altitude(F, excenter(B, C, D), incenter(B, C, D))
By altitude_definition on incenter(B, C, D), F, G, internal_angle_bisector(C, B, D) we get internal_angle_bisector(C, B, D) == altitude(incenter(B, C, D), F, G)
By collinear_definition on excenter(B, C, D), F, C we get F in Line(C, excenter(B, C, D)), C in Line(F, excenter(B, C, D)), Line(C, excenter(B, C, D)) == Line(F, excenter(B, C, D)), 0 == 2 * angle(F, excenter(B, C, D), C) mod 360
By collinear_definition on excenter(B, C, D), E, D we get E in Line(D, excenter(B, C, D)), D in Line(E, excenter(B, C, D)), Line(D, excenter(B, C, D)) == Line(E, excenter(B, C, D)), 0 == 2 * angle(E, excenter(B, C, D), D) mod 360
By power_of_a_point_definition on B, F, E, c we get log(power_of_a_point(B, c)) == log(distance(B, F)) + log(distance(B, E))
By power_of_a_point_definition on excenter(B, C, D), F, C, c we get log(power_of_a_point(excenter(B, C, D), c)) == log(distance(F, excenter(B, C, D))) + log(distance(C, excenter(B, C, D)))
By power_of_a_point_definition on incenter(B, C, D), D, F, c we get log(power_of_a_point(incenter(B, C, D), c)) == log(distance(D, incenter(B, C, D))) + log(distance(F, incenter(B, C, D)))
By power_of_a_point_definition on excenter(B, C, D), E, D, c we get log(power_of_a_point(excenter(B, C, D), c)) == log(distance(E, excenter(B, C, D))) + log(distance(D, excenter(B, C, D)))
By power_of_a_point_definition on incenter(B, C, D), E, C, c we get log(power_of_a_point(incenter(B, C, D), c)) == log(distance(E, incenter(B, C, D))) + log(distance(C, incenter(B, C, D)))
