Assumptions:
A, B, C, D, E, F, G, H, I: Point
f, g, h, i: Line
c: Circle
distinct(A, B, C, D, E, F, G, H, I)
distinct(f, g, h, i)
f == Line(B, C)
g == Line(A, C)
D == projection(A, f)
E == projection(B, g)
h == Line(A, D)
i == Line(B, E)
F == line_intersection(h, i)
G == midpoint(A, B)
c == Circle(C, D, E)
H == center(c)
I == midpoint(A, F)

Embedding:
g := {"point": {"x": "6.030684357002787265855658915825188159942626953125", "y": "6.85823943545592928927590037346817553043365478515625"}, "direction": {"x": "-2.373468413104732999130419557332061231136322021484375", "y": "5.7728385907516948094553299597464501857757568359375"}}
f := {"point": {"x": "4.51855514475628172732513121445663273334503173828125", "y": "7.86056824474256732315780027420260012149810791015625"}, "direction": {"x": "-7.0334577593823350838420083164237439632415771484375", "y": "2.357865648413624004575694925733841955661773681640625"}}
B := {"x": "0.954454229165944305805106477736125334641716516343921468767497011398415196481437305919826030731201171875", "y": "9.05538186328457963686657232547650438372289319315490866534390577806401534388669460895471274852752685546875"}
E := {"x": "4.5239556758937854290480545547129585388760235233194559715889032147870562717425369414115628489910735737089672004897624992178669482216638279318193361732386544339359446725458206844221216006326475718781598211399264881361721095285740815365926842187763578103168328556316678262385473224428363881373174505186564926589424289414930702030195666980052648956211081758067372668752849531988178181901095061568802733886455920904668137869945118928040645470744644714657935885831355482492898222827552746930885503763681273557695714251763239939813883809394934656386549113910382075585017163673419160438386563242291074154453168445745296518745358723002346424670039873599793591907391087496477645812920283699104571808945749507748469153623259474379211449756652192780230275291526942688571858831283039866489286096157156158534767073748498023685351931777075359688744182954465518328667152229098627807607132368604373421628188539342148251191951071739602475273249105705714100173329295011671277253616859903401649160991568592741959979770796914184132610808732922119823353132530043416921935971500915338518534323256066168211281866141517641374149147868880619290189487308731496988549340076140965719087083107741979964024453676968838567450958159676906679154197859348128694173994680749806502222964080232159714550273046831635223916095380898103866849571220772420589952394806072408121613482132549661704612989115863018578379646449975081071318407235751022892446843699005173039070258482266090870451057909996992549574697986143767856133338733999641181440790272034735904014070415068159421979899777410791614778944204431179938209474256354934269230251759182210291001641710656075255767084185597683549414286575954519090243856958173752818201222911849180556623341535851856190338916758374260340560886576281450260029354728079192638163022665023960595907717020430221670130249102181491208288931412549871448649053147766848795035413966581755284186475949248805277252175898542757301840591400799880358551431283581372109663173854606676294858323721503075887336399797612043602", "y": "10.522961252722697617593190934218070883527597200768801396462385235190013394452517747387991105231109319008862250657098585350984962651459806747785882867667989115780761693215067120805656253184230563516781202723091399717818214804169719858717130321093432900117435002733321087829204708281588526293271696882987870921392530313634302881740940846814958327538619915094868738485450587675040410914141372972752893695660479179558804524029171871186898740217103362840651735072594665586816212062285104359707829554832608492881645361041737468259462524217448823360018642128370374917385286443782476231340524334141302284523107894019821949225859844437146456705196713584184198316721936164033080356009992877001346752599116294442895250140622935376621097823172800654000895705736472147975165420538180756500249741030744398285037322904779522678161469385327406344991788963019713382879685047348624452751572117836687938902141195590543844968448889774576731890534007524229117761612031115931727136816898179726344604670735920498167690438925643947434599174874950572770230319926939459280977508677984067756423659432080031568958007698272640077723172795369385134318210369506192699575420735584462967561054662531018742811830934556263644763918978955888842310217290670541989418962345694265081123775194630475531465490845063810837385764285936266671637772514974037578367468748603426015204938628683551421688384870731147837000591251069573162586942320452159004698107789630623747827313935097821645312428094195623453093479366928080354595345325565034858138988695005554958441879935638879661614289218429460602882332953660811444050003152624273821944575949391708308667784059457046998092482364073006396440307333705526349124011619635157766192984894572008336150579264127895174956680534507742882905538867270575837638106947850227015807999051021601666074329370018273899146079106078180170753160143282516606208283956800848303496740312817359356085812580892392141668739195159684012263786297604548568956839364170953845226135917546388324821662253760698767710293084504319087"}
A := {"x": "4.4669050730914428864018610016195493693461036877123537509938167440203603264657219764872211695903413139863227465526748413321810734370630156920148547032338131618374745168327383208186977555435897492484083671723053944306553270993935703409130364281201893805221410333872826334751990994680547026376173178898314030827631356582059174787144296525031737080942057368493119893174592961738255561069115227852357577386733819021367030587287530971147134050650053483784762424530867569467256744430628453580484088134146675973043388489923508429341029376778102915822370834147638876772704616704661448680404039499959578121671224673848627286872269716042767783671732383987008546000659612339280017981892054560035390743836478615307460250211902473011373775012271598980191313176921227859406327693091699604401228873382837259201528490233022595284694008499568578002474963460836525914734696633793434458751883094212094390060752670055114105544990096207773046272794078358647338518371094847447677136385159478070693074084738917746745812512217001169732728369120947112828601002832847825084460301063690946582858387548807029622864758381161651167552761523850219636397729301189883844297181603505728588681310333805833931712361408421108278004324761892796730841137769262783321165533413776911697165229802018951721559516293739584013205732945321238318790161428187773840081464402314029784860897662894524899801488633814884033936126508312118544084254872926810418619263322454720115041825335945113392497143464502572030906759279955100955701711257056273312602655561068599034754644508977233242434607829148329928235069804743116873585341498174340164291797886153453837396270663716400251746735387947660644318320513205326805917847080431479109840424389993378735259897791994775824108606403790441794590982502744529685632185153481974251484918631048991669024704478754270667561030074701994211920693256766802681761794766247316447002152796684525433925575337358555812418229898207639140021765858934042461825713158015605096971089659572046408460197722474081592642692855553036123", "y": "10.661721861317524112084308899279683880999129858951652630370609863694508585019465307466653217270489307685192061903908119857989698484808420488012729004485214101328198152409247711647803700508576174890249005371337328424717618343618925095607085760111504036606808327622833393849963434257724895594750299358377081736330151746999673839128669022803799847139909639696974145357833477131869524527907163712368177991816862995321239915547851670239890649689997258224040400704652875504304919818830645766917886757042933964707534250420072054232073864453891201436352571525464436161855309315863505076267438203715811861898432624204032848149383296084547663269075900080621115719632580100032568207883445196491537618379311992730592283665884787783494686254287151884206096685222984316077613017845415588804076118559035754469824466335854247660060331417055467581142344041714812572990522314074998286269013370392904018963684050984796189805837528716820545979473410778575225509840456836665235891753879533623489242581761546352125038203532673889063454285183011984210200507247731075819695625839239619990861615768850814687595421015416716827202270619314327461844904788431089184674605264113368389734891942634555728608687047878710701031577785131980523890409429649149263198740913313310074312984790475650904723575974925999296888361518667280885293000311544910503412253130456285157218144125511246582961215449147464596181147122595695987426611295056093400922259710561859327595671794495234174196468023199896396349553730070806511547592915562316461779784968539075558756392547758468667467497900866522473370244321809904596127593099864432561262933531930746731842498271794314939540003552031189242305335091353745530975706101705766541455400228827436888907126442659784052641833234667684422931476227165924635005084303270131824755925485519918572536625628795611609168813841693129844901898076830012033972007157464560464490554311250578527352669796483677571017741183973630269215805289778278485058855860720019872422695144896435082608057614050085886612442449160416405"}
D := {"x": "3.627947651485247634058286250159441046574201132663783730126515659937908866072776368870339014111032723699272386197845956803457245673488825720355418830534525571620242304188310889630995380288923044583855668015320017747941472368506501159974601244982813899827998436289317595772203151655131353577954930586137294196506950632760311212765163270466979496088478734924743436264711971333006006551010452332720734939633275113889211058532425542769721315306910702067153745585402523209717204543976687098050974192411621269972969595947138065048634103182415808314812392464992067169420019586173056413205974712484411382567665334024565682409708159837888390586691769227696973661581553123764735608955104348208273960552046594029221386901080478043221853493333582220039321705671502561129435042026024710898025140926842989344664967761181896075078952541203386203345874084841400742208314817495182993796150324785396627269544063397639028896488086636367094542912928537607552617897119445375617148680621148898122197234399256897753596400292820111267045229404984709478405173064088371099932452444326758283708180858971985939880254539864929266732374240792069001806949834975038947600302127560001084747826393249817039278340397179146604722802217300071813800681670460655673974610354185800633152594197280939742861820684083718069458180126137640112294365554024930062970433130607942608117252731993907636808856478194815493696802479313153766542759305672528477678300483620032233985406566456754321245484315120398573581385584948148770225182175558708346553366370250577822441286127726633267812337927437860546788700184212043058394374041687972169389435712536872085952940260939654097386698661985776704083484709160918786121221533921287346378745445709384278276018199646478214665745944281331525493546648996296832115428568083341386799644566008259312892741198062178152455149272110572053255573692320953197905515692459462792897513538234735541620706209391931260174511750577572335309633170553955849480750009842680439206588634437364001081829841220126428846128690127668674", "y": "8.1591316095118115185605819831274261953885329534864466718599688671196328215254827495053217577937922527087701542107974545492682810911255507540387421389331479555462075091085323842022448251018935294703547744423109761284341443359466278084265737318146762973500286615231387389114231859810329258275252601642654465191990576458395175275336452449398772619197287323053869151289673188918541711797476652993570614808169251108438301463720888604710795184032811636605828858196364702579337477918994141088269683318268383758812883785372542265067914374795836883424631578469023969810491626007953586999014219459486636743977135955394773545691489874834214277311445620518452650485306306893058802705525277580009586314187717939946969298230464520413408913572549028989923627785847934963668981600947848865587968767019908448171609317117532440906740248740270551246773951326162180115944438860900178583966188504259256203457310369329755004721149407952493492148826202741544027048348144408164446518558015823085210382090607050614917921977623056025250475475709846388509561344954567617432640216946296060169853352093914061081925409914807827646896344681447819176618452446664793263413136395975409845646121018477176583006156887095633835349771749525602739277175709079747453405078359623966654712260308492622631348277674081910989581093175627661393922207643535925517538227988387197432747305365294649161985033904786795434619566844092557948408210720129980608598143172578068803918231877774141112829584068872702809884574259255638457095833462860457670524126259176884258712873451326431399925365882529388669001680316914565003520684457237047441726393178836988056126902776063777086833760184622540618141001986921378456268071886406327764070549704675776634330390203953914820821384045153606228006099070943594834559955129020161418452911040929310210679579816649124624617989311461352610555718835108015500368724356939132894136137912540587521486352485136774152064711340516475962569153770364647689771793569231594378162831193440408758618640745353790191915264724393009749"}
C := {"x": "5.7944379067615362509730225072901154341025566480548648376154404355301792685645653527028864969537618711881008428578440300513795959938949871550678645498936831544027928841192348187284159238025006189249457714642864620442574445188102465511963484805053724646600603646686918532146117380187865563956239506346402788668890835592111445756398487954688092542750183974521472425393508771650843322712105664735234784148099814162469136894624023016857098892880702798621137378767198546087283350921059517914815218872125922733900099107487872343046002906569541883942413254406028016803205506746161641496901599852431113471917248460200814430202936756135440746586934905189289651346917936161363529297051090936418955000701672173766410533349783949627968171679597545760575109372460420616679207313095097436964400714313991183644040413006051312108081188792160494746992829996856917129512765599278159172823817853708733905240136922352235708324399089019542970805543038749969812750300941202092977926384026716072186226520644336752552009361787410910642727955097980231663353623883685809056596389886163703372528782080987409176877093532176147327724234035435591238786414781306422535734755747013011488283766296336380568822910992088636002983151087886616375350200608389594186709541178354533950469199488256708181029578241844268880816114823744685228606330664110294361766204463860055207612899049313887761591896782500080113237519586909814338035557435767529407416757823115690942493758783951497366384378176825399516968326383597164471603779269808420761538220512175680034834812726104214321661610244531978414066337145917874486788021336653020150446461459280203836288375068500414801800684884949726908992239801664707537919472460344298685048258994727849822821838641325797995954791929256078622887503192813377432937791221298275661903614415874269583016315926832970194647568777052248516628817184404767805164757450652882328895016520925606490257390694321469366496081946846664992515895273259639227524168855823500614280056612636766972714065796524338983446151473685684531", "y": "7.4328468822417035298556910415143433401621723070132053254693394651543234866674779129463444637857848824662595220949501712610042241559635879368171232316489707672033237050108212896209292151317459541263210088502072011078167661390809800455086750357930504850113852756670944256756247919678081791871337352032479619725656849999372092924749948226420735320787994565846194171179464660375224477590570253027184820674763894067631421134966010356391743406578486890854236899561185967861273508881046986157382227244996282072054963148001189391854530796439355789889092774302481854641131950743414847704508006385557841059847332666460814983390269326451409627050286110708150289459381969642714640953622288399416311119676871084066975070435029354643115470477215037137789013511387988733807887236944062298987443705591732275145970789162885806856817388201183084940749836740685494833990244346614538826760070073593261602061037150676554490281934913323379066246399359895905155971061893321170744360827564678568070747627613968043873101421677485937177877272925321068813231930230087368226687523259260011888104763693071555371102275827539539365510280667828360274074121866202413581404421742516123298812059403718598388593104996006072650136531587476527234137352288417219228163956987565026766779623012901814455223868938315587694833839817172656654509696817126018171228104523080019388925870044838031329754068130623747088711905124238579469480765525307598380623205949283857062014933610921128824833272454531659521333556821446968936616426407289117196430938763561065749823120964413054161982606008219112744977705677181011613028768556358484513886105044351082228092641623769719213135559352330819458348694697399679667445709329201509207543693136879411385357695826870981955440378530402650615043377881816822714717911155765238954177359112171327349149629134132636447653508335238120127680169186301889664296311656813853822089930129330586646138786475551184651907503415908068317758766198674464380980915424610029556216188205316828034722121240894684583156629770774730852"}
c := {"center": {"x": "5.0991343208293466030698681073681317942128946107412702784495166508317092736254645275209776868549766137747469958595427297134434024875358214199424906666820978319049799769990397270250739375221907102090954623533909638212079029002018856467503601847809085876140014323386335830981502870227402849220407182278824591662246710173596889403786724147349667690673744959266399762579416622401541922468396350807540160353193885777889214816327838289004724297944121588593916624101744623015025355945872685627747515256407912497193867353943939914413331527512707751029858982904157583871828025013001775057249923688775677806824144806813046538603764287338575675320981633591900329267460930757103579048901582823907645381938132256807194909368247693364237684840607032696513553167857087832841880188570733022293737525256032358798988221486625318365002079532660148218904457984647860988279695614628469161901980361286365173289655417469184522280270207976905828410006535764621461085785566845160913258816943246940497478976992779279959493323422762478134932252996426598936117712519506344262862517308652768670009705281380435067014154200075564802364701809531523488361247496759800144504228211883954428311861300091131682458430413234440841180241800555666053683340325023072565580686513946767774144386686991685122749983109868267978789205527243792936047806808857159398445283108275596732471332263398207928397697659134444025941793877817466800021884040065429545020130469963922020529988866734719380355034749408417281330271623011702429070278843396559080846653879224888026505506543713338564246414001601737925512195060440199156919530877725117654538323693288539268391107587774497869665438858100435069958211762099746064606643523510791574835283114764322096193275579285343917705465938931492664474898261604282567343390869895587153858970362861777029287299643462496111872032185347285129147604697331866553165909605025260345413702852196349735289066154823380514954697339872610141793806079872721769359122987496025635279800741318492152151109704897512951547607099535607223", "y": "8.9532097382887316229981332277267019964049674724991454768369211030599314776946912372366708982434241698129557843372367304838039816408712264040733216089652269926661426263588076471766906131396092647705005146152172256047725592789458464016580620269210433257206930263080539732173064673230578420262092647883644300865809871493306483992590404337677286007047632472116974965985338208363637938702341628091176077734395916654351389364120659685054847041916634721420425864295237743572064903264785443282454574499686011167372473385720944241373099438655595265918831735617502112961019252699363509561741490123584400645536472838231791461579327893729137961385164894357317296038543395037570752033148550129808939952581727576602178426400253545774777564349982554150181222213492748055814631939156990676368243875555739282990426028769573742093272565682657839964369435507011761474666372036808753792005853936570471920142508256286520109061860369708119529930826824997146951057811850932909509359325757007935494440538506187048206070021936673744304732487563194507264356061092241528708619589015418197778334164707618253981370149676597974076881289982495585658264635290869252244144660175936186258879727107613960291533504744790900028331262709192472357669791944256854228577378881860635860912121916272392531115816914780827516487031631694542061240948802876531862674041296291234061513869762377456250383167505002667506449014760862625058607617349912068865538065539792990022482790657633814766897045907166434977633567613829480195276115830565850000828186046935191758298909763019076442087955619580644221864056212918319353818479469947396372670656651299842483501513498672516202081793888281649539343720017742936882020767662291227581032785100072276705094926523378844932476247685413013146416170761916658252410949546930512556573302830035463874663243425057642695191413445230964869470969642336055658455147023971992841970758174439237363533324280237413730752169471079404332524205365967138945209507037426172992319113873280683997517270769458466033898151692679333062"}, "radius_squared": "2.7949502906576381020496459894403899385526540138062006961382706309914722630458593851559612316906239213784518808104633007655399391571104077647756575226001935705129392480176158840063762475091987262034619152607786091258732662090621573688201237593998555255267851069621691659409769507936731141176421991528006160070901114847568867233505557157490138920984981913202448390718883852186589761837691001539298640400155097768634591208970252041738333955383957084938883799669784776891682031206250303089112686125112410490965012519918425676941931691638551245650679986599806481686556474278370443131390627526694693045495961425810856852728766685137667915931585488455973414589587701945812642093398831151575858804756730812496787824358948741548946292743831379984035857136307473796395982466514433294166968679274618747909599825412465219862002392073755265925144159958001126019908434797812839000857005068427094424719973515174630409035443001383306995234286997119043741995930645780789896738810860061280079502799824990505640958668043154035583842156896973623019316059475051347610990838548694204802463422060942469860854332834362890265454664528622988583476279565924244531894014102575646414043711226750031269138907807959976239233757777853145343173674081789410685532297474664505916373983760966984218599890463052256378962199982655175031070191452040182294147811114426390236560733928747565817277535837039512988377530920209346304628078024188350231940468496995599107540323693689628508361667171012646239045820357845685261460399647914780208581018231484141879026787152074054186184569091459847480198516188310908429352491412897732086729729799187073194478254556022354672695181664332138803503356299896234834927522130378910962637095368279855292986705686904939522624972386815725066545341482262932241932577597834232990084350011653837830559418974746708023769056867983703211234454279306513499236069087566221001635852485879564941208563363275251640510758796730782514705960811472655848126430964443643269005798819240059381258364228062169416647802510584426725"}
i := {"point": {"x": "0.954454229165944305805106477736125334641716516343921468767497011398415196481437305919826030731201171875", "y": "9.05538186328457963686657232547650438372289319315490866534390577806401534388669460895471274852752685546875"}, "direction": {"x": "3.5695014467278411232429480769768332042343070069755345028214062033886410752610996354917368182598724018339672004897624992178669482216638279318193361732386544339359446725458206844221216006326475718781598211399264881361721095285740815365926842187763578103168328556316678262385473224428363881373174505186564926589424289414930702030195666980052648956211081758067372668752849531988178181901095061568802733886455920904668137869945118928040645470744644714657935885831355482492898222827552746930885503763681273557695714251763239939813883809394934656386549113910382075585017163673419160438386563242291074154453168445745296518745358723002346424670039873599793591907391087496477645812920283699104571808945749507748469153623259474379211449756652192780230275291526942688571858831283039866489286096157156158534767073748498023685351931777075359688744182954465518328667152229098627807607132368604373421628188539342148251191951071739602475273249105705714100173329295011671277253616859903401649160991568592741959979770796914184132610808732922119823353132530043416921935971500915338518534323256066168211281866141517641374149147868880619290189487308731496988549340076140965719087083107741979964024453676968838567450958159676906679154197859348128694173994680749806502222964080232159714550273046831635223916095380898103866849571220772420589952394806072408121613482132549661704612989115863018578379646449975081071318407235751022892446843699005173039070258482266090870451057909996992549574697986143767856133338733999641181440790272034735904014070415068159421979899777410791614778944204431179938209474256354934269230251759182210291001641710656075255767084185597683549414286575954519090243856958173752818201222911849180556623341535851856190338916758374260340560886576281450260029354728079192638163022665023960595907717020430221670130249102181491208288931412549871448649053147766848795035413966581755284186475949248805277252175898542757301840591400799880358551431283581372109663173854606676294858323721503075887336399797612043602", "y": "1.4675793894381179807266186087415664998047040076138927311184794571259980505658231384332783567035824635401122506570985853509849626514598067477858828676679891157807616932150671208056562531842305635167812027230913997178182148041697198587171303210934329001174350027333210878292047082815885262932716968829878709213925303136343028817409408468149583275386199150948687384854505876750404109141413729727528936956604791795588045240291718711868987402171033628406517350725946655868162120622851043597078295548326084928816453610417374682594625242174488233600186421283703749173852864437824762313405243341413022845231078940198219492258598444371464567051967135841841983167219361640330803560099928770013467525991162944428952501406229353766210978231728006540008957057364721479751654205381807565002497410307443982850373229047795226781614693853274063449917889630197133828796850473486244527515721178366879389021411955905438449684488897745767318905340075242291177616120311159317271368168981797263446046707359204981676904389256439474345991748749505727702303199269394592809775086779840677564236594320800315689580076982726400777231727953693851343182103695061926995754207355844629675610546625310187428118309345562636447639189789558888423102172906705419894189623456942650811237751946304755314654908450638108373857642859362666716377725149740375783674687486034260152049386286835514216883848707311478370005912510695731625869423204521590046981077896306237478273139350978216453124280941956234530934793669280803545953453255650348581389886950055549584418799356388796616142892184294606028823329536608114440500031526242738219445759493917083086677840594570469980924823640730063964403073337055263491240116196351577661929848945720083361505792641278951749566805345077428829055388672705758376381069478502270158079990510216016660743293700182738991460791060781801707531601432825166062082839568008483034967403128173593560858125808923921416687391951596840122637862976045485689568393641709538452261359175463883248216622537606987677102930845043190871"}}
h := {"point": {"x": "4.4669050730914428864018610016195493693461036877123537509938167440203603264657219764872211695903413139863227465526748413321810734370630156920148547032338131618374745168327383208186977555435897492484083671723053944306553270993935703409130364281201893805221410333872826334751990994680547026376173178898314030827631356582059174787144296525031737080942057368493119893174592961738255561069115227852357577386733819021367030587287530971147134050650053483784762424530867569467256744430628453580484088134146675973043388489923508429341029376778102915822370834147638876772704616704661448680404039499959578121671224673848627286872269716042767783671732383987008546000659612339280017981892054560035390743836478615307460250211902473011373775012271598980191313176921227859406327693091699604401228873382837259201528490233022595284694008499568578002474963460836525914734696633793434458751883094212094390060752670055114105544990096207773046272794078358647338518371094847447677136385159478070693074084738917746745812512217001169732728369120947112828601002832847825084460301063690946582858387548807029622864758381161651167552761523850219636397729301189883844297181603505728588681310333805833931712361408421108278004324761892796730841137769262783321165533413776911697165229802018951721559516293739584013205732945321238318790161428187773840081464402314029784860897662894524899801488633814884033936126508312118544084254872926810418619263322454720115041825335945113392497143464502572030906759279955100955701711257056273312602655561068599034754644508977233242434607829148329928235069804743116873585341498174340164291797886153453837396270663716400251746735387947660644318320513205326805917847080431479109840424389993378735259897791994775824108606403790441794590982502744529685632185153481974251484918631048991669024704478754270667561030074701994211920693256766802681761794766247316447002152796684525433925575337358555812418229898207639140021765858934042461825713158015605096971089659572046408460197722474081592642692855553036123", "y": "10.661721861317524112084308899279683880999129858951652630370609863694508585019465307466653217270489307685192061903908119857989698484808420488012729004485214101328198152409247711647803700508576174890249005371337328424717618343618925095607085760111504036606808327622833393849963434257724895594750299358377081736330151746999673839128669022803799847139909639696974145357833477131869524527907163712368177991816862995321239915547851670239890649689997258224040400704652875504304919818830645766917886757042933964707534250420072054232073864453891201436352571525464436161855309315863505076267438203715811861898432624204032848149383296084547663269075900080621115719632580100032568207883445196491537618379311992730592283665884787783494686254287151884206096685222984316077613017845415588804076118559035754469824466335854247660060331417055467581142344041714812572990522314074998286269013370392904018963684050984796189805837528716820545979473410778575225509840456836665235891753879533623489242581761546352125038203532673889063454285183011984210200507247731075819695625839239619990861615768850814687595421015416716827202270619314327461844904788431089184674605264113368389734891942634555728608687047878710701031577785131980523890409429649149263198740913313310074312984790475650904723575974925999296888361518667280885293000311544910503412253130456285157218144125511246582961215449147464596181147122595695987426611295056093400922259710561859327595671794495234174196468023199896396349553730070806511547592915562316461779784968539075558756392547758468667467497900866522473370244321809904596127593099864432561262933531930746731842498271794314939540003552031189242305335091353745530975706101705766541455400228827436888907126442659784052641833234667684422931476227165924635005084303270131824755925485519918572536625628795611609168813841693129844901898076830012033972007157464560464490554311250578527352669796483677571017741183973630269215805289778278485058855860720019872422695144896435082608057614050085886612442449160416405"}, "direction": {"x": "-0.83895742160619525234357475146010832277190255504857002086730108408245146039294560761688215547930859028705036035482888452872382776357418997165943587269928759021723221264442743118770237525466670466455269915698537668271385473088706918093843518313737548069414259709796503770299594781292334905966238730369410888625618502544560626594926638203619421200572700192456855305274732484081954955590107045251502279904010678824749200019632755434499208975809464631132249686768423373700846989908615825999743462100304632733136925304521277788546883449539448326742469094977182050785044208429308845483442923751154642959945713336029704627751881176638838778048146917100388093848440811016326618923410110779526511383160126750152463812010976925791552400789357767797980961202062022481119772728314524954209774641144073657548788126212036345339044830875347159690162226124225184926515484588416045207903798463581281173653120360787238165801092298441021008436647929825718123393999003936915056495789479890894711017407463487692098485092888000570622760750711000180445492721919641140851357766204233637457765789590871702240622129825123585002290191159295296183282309514394943682941603279057177412030464013076635389289574366296422307763025888920785928343210646562265814194298719189053656392878292095542929413094529024033186239316839448371958465058879384732103771330962346037036883703429554485317129238518667290969681017151805808786566618162015256418362584862543977751877596713775701800423003132985862950929034304736132534498895014691898470689918585628208103417832317109005643112285547697244603480679626226862896416010812946184703974407607847329778668680543198592778797487680898936034834734215961389447056317412186056460529699328995359524997157955299936774511469609771265396555160127815613644778994726485603834884729709663985400972924981324891430095373535962736793649563335572707027066378416526885180270174143371700177185132434392432106731123924319157869254341533944839670182130595888007049052033151984063976418993102728173041814059542763493836", "y": "-2.5025902518057125935237269161522576856105969054652059585106409965748757634939825579613314594766970549764219076931106653087214173936828697339739868655520661457819906433007153274455588754066826454198942309290263522962834740076722972871805120282968277392567796660996946549385402482766919697672250391941116352171310941011601563115950237778639225852201809073915872302288661582400153533481594984130111165109999378844774097691757628097688111312867160945634575148850164052463711720269312316580909184252160955888262458718828178277252824269743075130938894136785620391808061467150681463763660162577671481875007190286645554935802343086011262355379313380287758506711019494107266879373309174384905789869605401987358953538428383357421537948970322489852137339066381908197107148577506307022452792418570449096526635346241010035693863065430284124564649489090985945613960784279849804278723945199669783986179530140518206893337225879215711967645907905044208228050056423958487912398980779513149682043727008412906332460057703682865384067376120273453592443727522743140764316041446100139738762805594594085794028800239359340625126361511695455441830595437646098583332916245158274051702798407868380703080713591691473174966006101794202499626918587411745178582330773509134088417587596263886415887482075178081979302522011045147459007795471913179516584303316175654139434135889817816667627120586687850527191904381864401925857902230430953400624453933040524472038486067178200629135096163126261153610963041452426658380095692762706947273723426213871328851052026258255274749613126135836064700762901184480957755246541407278170902942140470479262298079941879372308566275335689351804912348926616076853488989130651337650483452583598592254740874222643925705596948301523238001308663200715651515490887903681156829106343814269875514686676471306991467070149105469945838463261933192104839351347217706471750769405199965197752040345479700001558112700499219826729588899127418137160816765037968604346064120255523942067461935395147068674209159767211154306"}}
F := {"x": "4.4038307348971569551667137074461481543232325734276757192835928661332392786863637023390688767561913563613931488612414293755072089811766556848171167834705125094071670698788446353217319512418808014932451532424954655981583612815935247423043718890564447105679425000085753129816888360266940134484574858211246394655602584755082333051174960340011242838597305944011327099765324473152240522224687036879845536558287957393309292738031653561152349703007540378566695869436290699942767360970685853340679811640689902260487635600400007485780660148455873618117304711402287150940450543279841908617598247525120242141731041153425278647004591818541710604055028361994511007188003925352843628800752074711396335763174592339847979285386711437100507198001616519632451996963253755049004553064046368607623074336198073533953936029967199324621922970273159801690816085972438804847046625629978779150980142868863996441339173912586133336236141326934268686014470032779273109421270192488228848591249859777808808731433341221807366977285058114045627136550894872966208881801155326879469128644731141833967490628481773460957151214867974982277005169583627455737936080212213177753273700676754897368339956303845882796093949834380245679377332513224715732016480041656550944451831849539001597819573885726662064470387977892267076762296230742900643489282953604024435124361752691138257329765477482528095203498535768807938646068168725119262008210644363329682623503116812153098566218949517941394325691321991435045692216862426240386536778416984697400155087246274096018176200361322462806831217758671497436958052974962523827051040418797215158630185927296874700493840107048580937530192831251143230924183722534784591293814586677284464622307234800794369564712517244889839456139948606906706062293330395187701748990518492898645814326309849284475558283360092022029096495593642321741666392210258965301167061759397638361932389183467092980320741615325291663413312732898555291071716886485804311194077119168550656279544870000217331588153613270686919649062725385529915", "y": "10.473572594335759716140575413939060652647762637985085628204502740965539468721904561526997332701063457159652046579523289706603739125778864871329519986281483218128961547706794004732452011147472575414680020380227250101728352418810712757807449018049036166430000776949013520758988142678307504865284794373480898200596289298724087506043086044893383669330727037838775576079121175635205139981411300315516733479402793924107135759327530901371795067725478255198661482902928951928285629764852390040752692175437574026268998362344069909089166808087183474194857069693252237128090655465531217141897497386161096023122561301000276793976838646100686629572004367800648430261770482043242686311267481186020156878548658406913738178236547773690643965822275007116257343091559750737782137664136991905374904404551974629083488126837626167732972774316413259498798903427333802811534249972700296875725163779954768223822397936189648572784178582609285999361525429009838874614456180854464827435782394933730291813344939840605253903862219586155143158770220106794571548019195439568919055165477157638366856356572216495259163802352565640878825229929716281104245514871553609090688489860935624921894739481150932219447390449357572740652599383090841748120223160009648922899080077615624495504462081964297060700776489124606733814022344621642746797220078862704555411997806950244873410186947991688117101226687938158792418612439748667064773446917451653935045292513030212298295064770434650070896081935980121043393357840621199145393580525384258280522543333030931776677469856162509872219330523094217569875040674865562709460819038353630823145520825824860273891038537357531319102802842423247962033874533808619409659582599538094595452187706326514202483215721988670790951211684042337567778896364201649379010398793809578615896924654789960040017685771598264894272931855522380961126177009837022165261398239113013186185158621954788808092786208492364280959683552625074034728964453325981350943809865024231642842203954124453996031242029802224748463967361458393527"}
I := {"x": "4.4353679039942999207842873545328487618346681305700147351387048050767998025760428394131450231732663351738579477069581353538441412091198356884159857433521628356223207933557914780702148533927352753708267602074004300144068441904935475416087041585883170455450417666979289732284439677473743580430374018554780212741616970668570753919159628432521489959769681656252223496469958717445248041646901132366101556972510888207338161662659592266149741876828796931175729146983579134705012052700657153460581949887418289116765512045161757957560844762616988266969837772774963013856577579992251678649001143512539910131701132913636952966938430767292239193863380372990759776594331768846061823391322064635715863253505535477577719767799306955055940486506944059306321655070087491454205440378569034106012151604790455396577732260100110959953308489386364189846645524716637665380890661131886106804866012981538045415699963291320623720890565711571020866143632055568960223969820643667838262863817509627939750902759040069777056394898637557607679932460007910039518741401994087352276794472897416390275174508015290245290007986624568316722278965553738837687166904756701530798785441140130312978510633318825858363903155621400676978690828637558756231428808905459667132808682631657956647492401843872806893014952135815925544984014588032069481139722190895899137602913077502584021095331570188526497502493584791845986291097338518618903046232758645070050621383219633436606804022142731527393411417393247003538299488071190670671119244837020485356378871403671347526465422435149848024632912793909913682596561389852820350318190958485777661460991906725164268945055385382490594638464109599401937621252117870055698605830833554381787231365812397086552412305154619832831782373176198674250326637916569858693690587835987436448649622470449138072291493919423146348328762834172157976793542733512883991464428262822477404467270990075809207123158476341923737915771315553097215546741372709923386509895138592077876625317264786131870024175667872384256145877790469283019", "y": "10.567647227826641914112442156609372266823446248468369129287556302330024026870684934496825274985776382422422054241715704782296718805293642679671124495383348659728579850058020858190127855828024375152464512875782289263222985381214818926707267389080270101518404552285923457304475788468016200230017546865928989968463220522861880672585877533848591758235318338767874860718477326383537332254659232013942455735609828459714187837437691285805842858707737756711350941803790913716295274791841517903835289466240253995488266306382070981660620336270537337815604820609358336644972982390697361109082467794938453942510496962602154821063110971092617146420540133940634772990701531071637627259575463191255847248463985199822165230951216280737069326038281079500231719888391367526929875340991203747089490261555505191776656296586740207696516552866734363539970623734524307692262386143387647580997088575173836121393040993587222381295008055663053272670499419894207050062148318845565031663768137233676890527963350693478689471032876130022103306527701559389390874263221585322369375395658198629178858986170533654973379611683991178853013750274515304283045209829992349137681547562524496655814815711892743974028038748618141720842088584111411136005316294829399093048910495464467284908723436219973982712176232025303015351191931644461816045110195203807529412125468703265015314165536751467350031221068542811694299879781172181526100029106253873667983776111796035812945368282464942122546274979590008719871455785346002828470586720473287371151164150785003667716931201960489269843414211980370021622642498337733652794206069109031692204227178877803502866768404575923129321403197227218602169604812581182470317644350621930568453793967576975545695171082324227421796522459355010995355186295683787007007741548539855220326425070154939306277155700196938251720872848607755403014037543333517099616702698288786825337856466602683667722728002488020925988712368299352151972384871552129918001332862872125757632449549510444539319649821926155317538204905309404966"}
H := {"x": "5.0991343208293466030698681073681317942128946107412702784495166508317092736254645275209776868549766137747469958595427297134434024875358214199424906666820978319049799769990397270250739375221907102090954623533909638212079029002018856467503601847809085876140014323386335830981502870227402849220407182278824591662246710173596889403786724147349667690673744959266399762579416622401541922468396350807540160353193885777889214816327838289004724297944121588593916624101744623015025355945872685627747515256407912497193867353943939914413331527512707751029858982904157583871828025013001775057249923688775677806824144806813046538603764287338575675320981633591900329267460930757103579048901582823907645381938132256807194909368247693364237684840607032696513553167857087832841880188570733022293737525256032358798988221486625318365002079532660148218904457984647860988279695614628469161901980361286365173289655417469184522280270207976905828410006535764621461085785566845160913258816943246940497478976992779279959493323422762478134932252996426598936117712519506344262862517308652768670009705281380435067014154200075564802364701809531523488361247496759800144504228211883954428311861300091131682458430413234440841180241800555666053683340325023072565580686513946767774144386686991685122749983109868267978789205527243792936047806808857159398445283108275596732471332263398207928397697659134444025941793877817466800021884040065429545020130469963922020529988866734719380355034749408417281330271623011702429070278843396559080846653879224888026505506543713338564246414001601737925512195060440199156919530877725117654538323693288539268391107587774497869665438858100435069958211762099746064606643523510791574835283114764322096193275579285343917705465938931492664474898261604282567343390869895587153858970362861777029287299643462496111872032185347285129147604697331866553165909605025260345413702852196349735289066154823380514954697339872610141793806079872721769359122987496025635279800741318492152151109704897512951547607099535607223", "y": "8.9532097382887316229981332277267019964049674724991454768369211030599314776946912372366708982434241698129557843372367304838039816408712264040733216089652269926661426263588076471766906131396092647705005146152172256047725592789458464016580620269210433257206930263080539732173064673230578420262092647883644300865809871493306483992590404337677286007047632472116974965985338208363637938702341628091176077734395916654351389364120659685054847041916634721420425864295237743572064903264785443282454574499686011167372473385720944241373099438655595265918831735617502112961019252699363509561741490123584400645536472838231791461579327893729137961385164894357317296038543395037570752033148550129808939952581727576602178426400253545774777564349982554150181222213492748055814631939156990676368243875555739282990426028769573742093272565682657839964369435507011761474666372036808753792005853936570471920142508256286520109061860369708119529930826824997146951057811850932909509359325757007935494440538506187048206070021936673744304732487563194507264356061092241528708619589015418197778334164707618253981370149676597974076881289982495585658264635290869252244144660175936186258879727107613960291533504744790900028331262709192472357669791944256854228577378881860635860912121916272392531115816914780827516487031631694542061240948802876531862674041296291234061513869762377456250383167505002667506449014760862625058607617349912068865538065539792990022482790657633814766897045907166434977633567613829480195276115830565850000828186046935191758298909763019076442087955619580644221864056212918319353818479469947396372670656651299842483501513498672516202081793888281649539343720017742936882020767662291227581032785100072276705094926523378844932476247685413013146416170761916658252410949546930512556573302830035463874663243425057642695191413445230964869470969642336055658455147023971992841970758174439237363533324280237413730752169471079404332524205365967138945209507037426172992319113873280683997517270769458466033898151692679333062"}
G := {"x": "2.7106796511286935961034837396778373519939101020281376098806568777093877614735796412035236001607712429306613732763374206660905367185315078460074273516169065809187372584163691604093488777717948746242041835861526972153276635496967851704565182140600946902610705166936413167375995497340273513188086589449157015413815678291029587393572148262515868540471028684246559946587296480869127780534557613926178788693366909510683515293643765485573567025325026741892381212265433784733628372215314226790242044067073337986521694244961754214670514688389051457911185417073819438386352308352330724340202019749979789060835612336924313643436134858021383891835866191993504273000329806169640008990946027280017695371918239307653730125105951236505686887506135799490095656588460613929703163846545849802200614436691418629600764245116511297642347004249784289001237481730418262957367348316896717229375941547106047195030376335027557052772495048103886523136397039179323669259185547423723838568192579739035346537042369458873372906256108500584866364184560473556414300501416423912542230150531845473291429193774403514811432379190580825583776380761925109818198864650594941922148590801752864294340655166902916965856180704210554139002162380946398365420568884631391660582766706888455848582614901009475860779758146869792006602866472660619159395080714093886920040732201157014892430448831447262449900744316907442016968063254156059272042127436463405209309631661227360057520912667972556696248571732251286015453379639977550477850855628528136656301327780534299517377322254488616621217303914574164964117534902371558436792670749087170082145898943076726918698135331858200125873367693973830322159160256602663402958923540215739554920212194996689367629948895997387912054303201895220897295491251372264842816092576740987125742459315524495834512352239377135333780515037350997105960346628383401340880897383123658223501076398342262716962787668679277906209114949103819570010882929467021230912856579007802548485544829786023204230098861237040796321346427776518062", "y": "9.8585518623010518744754406123780941323610115260532806478572578208792619644530799582106829828990080815769710309519540599289948492424042102440063645022426070506640990762046238558239018502542880874451245026856686642123588091718094625478035428800557520183034041638114166969249817171288624477973751496791885408681650758734998369195643345114018999235699548198484870726789167385659347622639535818561840889959084314976606199577739258351199453248449986291120202003523264377521524599094153228834589433785214669823537671252100360271160369322269456007181762857627322180809276546579317525381337191018579059309492163121020164240746916480422738316345379500403105578598162900500162841039417225982457688091896559963652961418329423938917473431271435759421030483426114921580388065089227077944020380592795178772349122331679271238300301657085277337905711720208574062864952611570374991431345066851964520094818420254923980949029187643584102729897367053892876127549202284183326179458769397668117446212908807731760625191017663369445317271425915059921051002536238655379098478129196198099954308078844254073437977105077083584136011353096571637309224523942155445923373026320566841948674459713172778643043435239393553505157888925659902619452047148245746315993704566566550371564923952378254523617879874629996484441807593336404426465001557724552517061265652281425786090720627556232914806077245737322980905735612978479937133056475280467004611298552809296637978358972476170870982340115999481981747768650354032557737964577811582308898924842695377793781962738792343337337489504332612366851221609049522980637965499322162806314667659653733659212491358971574697700017760155946211526675456768727654878530508528832707277001144137184444535632213298920263209166173338422114657381135829623175025421516350659123779627427599592862683128143978058045844069208465649224509490384150060169860035787322802322452771556252892636763348982418387855088705919868151346079026448891392425294279303600099362113475724482175413040288070250429433062212245802082027"}

Need to prove:
concyclic(E, G, H, I)

Proof:
By line_definition on B, F, i we get i == Line(B, F)
By line_definition on D, A, perpendicular_line(A, f) we get Line(A, D) == perpendicular_line(A, f)
By line_definition on C, E, g we get g == Line(C, E)
By line_definition on D, C, f we get f == Line(C, D)
By line_definition on E, A, g we get g == Line(A, E)
By line_definition on D, F, h we get h == Line(D, F)
By line_definition on B, D, f we get f == Line(B, D)
By line_definition on E, F, i we get i == Line(E, F)
By line_definition on A, F, h we get h == Line(A, F)
By line_definition on E, B, perpendicular_line(B, g) we get Line(B, E) == perpendicular_line(B, g)
By line_intersection_definition on A, h, g we get A == line_intersection(g, h)
By line_intersection_definition on E, i, g we get E == line_intersection(g, i)
By line_intersection_definition on A, g, perpendicular_line(A, f) we get A == line_intersection(g, perpendicular_line(A, f))
By line_intersection_definition on D, f, h we get D == line_intersection(f, h)
By line_intersection_definition on C, f, g we get C == line_intersection(f, g)
By perpendicular_line_definition on E, perpendicular_line(B, g), g we get perpendicular_line(B, g) == perpendicular_line(E, g)
By perpendicular_line_definition on B, f, perpendicular_line(A, f) we get f == perpendicular_line(B, perpendicular_line(A, f))
By perpendicular_line_definition on E, g, perpendicular_line(B, g) we get g == perpendicular_line(E, perpendicular_line(B, g))
By perpendicular_line_definition on C, f, perpendicular_line(A, f) we get f == perpendicular_line(C, perpendicular_line(A, f))
By perpendicular_line_definition on A, g, perpendicular_line(B, g) we get g == perpendicular_line(A, perpendicular_line(B, g))
By line_intersection_definition on B, perpendicular_line(B, g), f we get B == line_intersection(f, perpendicular_line(B, g))
By perpendicular_line_definition on C, g, perpendicular_line(B, g) we get g == perpendicular_line(C, perpendicular_line(B, g))
By perpendicular_line_definition on D, perpendicular_line(A, f), f we get perpendicular_line(A, f) == perpendicular_line(D, f)
By line_intersection_definition on B, i, f we get B == line_intersection(f, i)
By perpendicular_line_definition on D, f, perpendicular_line(A, f) we get f == perpendicular_line(D, perpendicular_line(A, f))
By line_uniqueness on A, D, h, perpendicular_line(A, f) we get h == perpendicular_line(A, f)
By line_uniqueness on E, B, perpendicular_line(B, g), i we get i == perpendicular_line(B, g)
By between_imply_not_between on B, G, A we get collinear_and_not_between(A, B, G)
By between_imply_not_between on A, I, F we get collinear_and_not_between(F, A, I)
By between_imply_not_between on A, G, B we get collinear_and_not_between(B, A, G)
By between_imply_not_between on F, I, A we get collinear_and_not_between(A, F, I)
By circle_radius_v0_r on C, c we get radius(c) == distance(C, center(c))
By circle_radius_v0_r on D, c we get radius(c) == distance(D, center(c))
By circle_radius_v0_r on E, c we get radius(c) == distance(E, center(c))
By in_imply_collinear on F, E, B we get collinear(B, E, F)
By in_imply_collinear on E, C, A we get collinear(A, C, E)
By in_imply_collinear on D, B, C we get collinear(B, C, D)
By in_imply_collinear on F, D, A we get collinear(A, D, F)
By power_of_a_point_on_circle on E, c we get 0 == power_of_a_point(E, c)
By power_of_a_point_in_circle on C, c we get 0 == power_of_a_point(C, c)
By power_of_a_point_on_circle on D, c we get 0 == power_of_a_point(D, c)
By angle_to_center on E, D, C, c we get 2 * angle(E, D, C) == angle(E, center(c), C) mod 360
By angle_to_center on E, C, D, c we get 2 * angle(E, C, D) == angle(E, center(c), D) mod 360
By angle_to_center on D, E, C, c we get 2 * angle(D, E, C) == angle(D, center(c), C) mod 360
By angle_to_center on C, D, E, c we get 2 * angle(C, D, E) == angle(C, center(c), E) mod 360
By angle_to_center on D, C, E, c we get 2 * angle(D, C, E) == angle(D, center(c), E) mod 360
By angle_to_center on C, E, D, c we get 2 * angle(C, E, D) == angle(C, center(c), D) mod 360
By same_angle_v1 on B, A, G, E we get angle(A, B, E) == angle(G, B, E) mod 360
By same_angle_v0 on A, I, F, C we get angle(F, A, C) == angle(I, A, C) mod 360
By same_angle_v0 on A, G, B, D we get angle(B, A, D) == angle(G, A, D) mod 360
By same_angle_v1 on B, G, A, C we get angle(A, B, C) == angle(G, B, C) mod 360
By same_angle_v0 on A, G, B, C we get angle(B, A, C) == angle(G, A, C) mod 360
By collinear_definition on G, A, B we get A in Line(B, G), B in Line(A, G), Line(A, G) == Line(B, G), 0 == 2 * angle(A, G, B) mod 360
By collinear_definition on I, A, F we get A in Line(F, I), F in Line(A, I), Line(A, I) == Line(F, I), 0 == 2 * angle(A, I, F) mod 360
By log_of_2_times_distance on A, F, I, A we get log(distance(A, F)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(A, I))
By collinear_definition on G, B, A we get B in Line(A, G), A in Line(B, G), Line(A, G) == Line(B, G), 0 == 2 * angle(B, G, A) mod 360
By collinear_definition on A, I, F we get I in Line(A, F), F in Line(A, I), Line(A, F) == Line(A, I), 0 == 2 * angle(I, A, F) mod 360
By log_of_2_times_distance on B, A, G, B we get log(distance(A, B)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(B, G))
By collinear_definition on B, G, A we get G in Line(A, B), A in Line(B, G), Line(A, B) == Line(B, G), 0 == 2 * angle(G, B, A) mod 360
By log_of_2_times_distance on B, A, A, G we get log(distance(A, B)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(A, G))
By log_of_2_times_distance on F, A, F, I we get log(distance(A, F)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(F, I))
By altitude_definition on B, A, C, perpendicular_line(B, g) we get altitude(B, A, C) == perpendicular_line(B, g)
By collinear_definition on I, F, A we get F in Line(A, I), A in Line(F, I), Line(A, I) == Line(F, I), 0 == 2 * angle(F, I, A) mod 360
By collinear_definition on B, A, G we get A in Line(B, G), G in Line(A, B), Line(A, B) == Line(B, G), 0 == 2 * angle(A, B, G) mod 360
By collinear_definition on F, A, I we get A in Line(F, I), I in Line(A, F), Line(A, F) == Line(F, I), 0 == 2 * angle(A, F, I) mod 360
By collinear_definition on A, G, B we get G in Line(A, B), B in Line(A, G), Line(A, B) == Line(A, G), 0 == 2 * angle(G, A, B) mod 360
By collinear_definition on F, I, A we get I in Line(A, F), A in Line(F, I), Line(A, F) == Line(F, I), 0 == 2 * angle(I, F, A) mod 360
By altitude_definition on A, B, C, perpendicular_line(A, f) we get altitude(A, B, C) == perpendicular_line(A, f)
By collinear_definition on A, F, I we get F in Line(A, I), I in Line(A, F), Line(A, F) == Line(A, I), 0 == 2 * angle(F, A, I) mod 360
By collinear_definition on A, B, G we get B in Line(A, G), G in Line(A, B), Line(A, B) == Line(A, G), 0 == 2 * angle(B, A, G) mod 360
By between_implies_angles on B, G, A we get 180 == angle(B, G, A) mod 360, 0 == angle(G, A, B) mod 360, 0 == angle(A, B, G) mod 360
By between_implies_angles on A, I, F we get 180 == angle(A, I, F) mod 360, 0 == angle(I, F, A) mod 360, 0 == angle(F, A, I) mod 360
By between_implies_angles on F, I, A we get 180 == angle(F, I, A) mod 360, 0 == angle(I, A, F) mod 360, 0 == angle(A, F, I) mod 360
By between_implies_angles on A, G, B we get 180 == angle(A, G, B) mod 360, 0 == angle(G, B, A) mod 360, 0 == angle(B, A, G) mod 360
By line_definition on I, D, h we get h == Line(D, I)
By line_intersection_definition on D, Line(D, H), h we get D == line_intersection(h, Line(D, H))
By line_intersection_definition on H, Line(E, H), Line(D, H) we get H == line_intersection(Line(D, H), Line(E, H))
By line_intersection_definition on D, h, Line(D, E) we get D == line_intersection(h, Line(D, E))
By line_intersection_definition on E, g, Line(E, H) we get E == line_intersection(g, Line(E, H))
By line_intersection_definition on A, g, Line(A, B) we get A == line_intersection(g, Line(A, B))
By line_intersection_definition on B, Line(A, B), f we get B == line_intersection(f, Line(A, B))
By line_intersection_definition on E, Line(E, H), i we get E == line_intersection(i, Line(E, H))
By line_intersection_definition on C, Line(C, H), f we get C == line_intersection(f, Line(C, H))
By line_intersection_definition on H, Line(E, H), Line(C, H) we get H == line_intersection(Line(C, H), Line(E, H))
By line_intersection_definition on D, Line(D, H), f we get D == line_intersection(f, Line(D, H))
By line_intersection_definition on E, Line(E, H), Line(D, E) we get E == line_intersection(Line(D, E), Line(E, H))
By perpendicular_line_definition on F, i, g we get i == perpendicular_line(F, g)
By line_intersection_definition on C, g, Line(C, H) we get C == line_intersection(g, Line(C, H))
By line_intersection_definition on E, i, Line(D, E) we get E == line_intersection(i, Line(D, E))
By line_intersection_definition on E, g, Line(D, E) we get E == line_intersection(g, Line(D, E))
By perpendicular_line_definition on F, h, f we get h == perpendicular_line(F, f)
By line_intersection_definition on H, Line(D, H), Line(C, H) we get H == line_intersection(Line(C, H), Line(D, H))
By line_intersection_definition on B, Line(A, B), i we get B == line_intersection(i, Line(A, B))
By line_intersection_definition on A, h, Line(A, B) we get A == line_intersection(h, Line(A, B))
By line_intersection_definition on D, Line(D, E), Line(D, H) we get D == line_intersection(Line(D, E), Line(D, H))
By perpendicular_line_definition on I, h, f we get h == perpendicular_line(I, f)
By line_intersection_definition on D, f, Line(D, E) we get D == line_intersection(f, Line(D, E))
By same_angle_v1 on A, I, F, B we get angle(F, A, B) == angle(I, A, B) mod 360
By perpendicular_direction_conditions_v0_r on I, A, C, D we get 180 == 2 * direction(I, A) - 2 * direction(C, D) mod 360
By same_angle_v0 on A, D, F, C we get angle(D, A, C) == angle(F, A, C) mod 360
By projection_definition on C, E, i we get E == projection(C, i)
By same_angle_v1 on A, D, F, B we get angle(D, A, B) == angle(F, A, B) mod 360
By same_angle_v1 on A, F, D, G we get angle(D, A, G) == angle(F, A, G) mod 360
By perpendicular_direction_conditions_v0_r on A, F, C, D we get 180 == 2 * direction(A, F) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on A, I, C, D we get 180 == 2 * direction(A, I) - 2 * direction(C, D) mod 360
By projection_definition on A, E, i we get E == projection(A, i)
By same_angle_v1 on A, I, F, G we get angle(F, A, G) == angle(I, A, G) mod 360
By perpendicular_direction_conditions_v0_r on F, I, C, D we get 180 == 2 * direction(F, I) - 2 * direction(C, D) mod 360
By same_angle_v0 on A, B, G, I we get angle(B, A, I) == angle(G, A, I) mod 360
By perpendicular_direction_conditions_v0_r on A, F, B, C we get 180 == 2 * direction(A, F) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on F, I, D, C we get 180 == 2 * direction(F, I) - 2 * direction(D, C) mod 360
By same_angle_v0 on A, G, B, F we get angle(B, A, F) == angle(G, A, F) mod 360
By perpendicular_direction_conditions_v0_r on F, A, B, C we get 180 == 2 * direction(F, A) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on I, F, B, C we get 180 == 2 * direction(I, F) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on B, C, F, I we get 180 == 2 * direction(B, C) - 2 * direction(F, I) mod 360
By perpendicular_direction_conditions_v0_r on D, C, A, D we get 180 == 2 * direction(D, C) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on C, D, I, A we get 180 == 2 * direction(C, D) - 2 * direction(I, A) mod 360
By perpendicular_direction_conditions_v0_r on C, D, F, A we get 180 == 2 * direction(C, D) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on B, C, F, A we get 180 == 2 * direction(B, C) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on C, D, A, I we get 180 == 2 * direction(C, D) - 2 * direction(A, I) mod 360
By perpendicular_direction_conditions_v0_r on I, A, D, C we get 180 == 2 * direction(I, A) - 2 * direction(D, C) mod 360
By projection_definition on C, D, h we get D == projection(C, h)
By perpendicular_direction_conditions_v0_r on A, D, C, D we get 180 == 2 * direction(A, D) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on C, D, A, D we get 180 == 2 * direction(C, D) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on F, I, B, C we get 180 == 2 * direction(F, I) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on E, C, B, E we get 180 == 2 * direction(E, C) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on C, D, I, F we get 180 == 2 * direction(C, D) - 2 * direction(I, F) mod 360
By perpendicular_direction_conditions_v0_r on I, F, D, C we get 180 == 2 * direction(I, F) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on A, D, B, C we get 180 == 2 * direction(A, D) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on B, C, A, D we get 180 == 2 * direction(B, C) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on B, C, A, I we get 180 == 2 * direction(B, C) - 2 * direction(A, I) mod 360
By perpendicular_direction_conditions_v0_r on C, E, B, E we get 180 == 2 * direction(C, E) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on D, C, F, I we get 180 == 2 * direction(D, C) - 2 * direction(F, I) mod 360
By perpendicular_direction_conditions_v0_r on A, I, B, C we get 180 == 2 * direction(A, I) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on D, C, I, F we get 180 == 2 * direction(D, C) - 2 * direction(I, F) mod 360
By perpendicular_direction_conditions_v0_r on D, C, A, I we get 180 == 2 * direction(D, C) - 2 * direction(A, I) mod 360
By perpendicular_direction_conditions_v0_r on B, E, A, C we get 180 == 2 * direction(B, E) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on B, C, I, A we get 180 == 2 * direction(B, C) - 2 * direction(I, A) mod 360
By perpendicular_direction_conditions_v0_r on A, D, D, C we get 180 == 2 * direction(A, D) - 2 * direction(D, C) mod 360
By projection_definition on B, D, h we get D == projection(B, h)
By perpendicular_direction_conditions_v0_r on B, E, C, E we get 180 == 2 * direction(B, E) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on F, A, D, C we get 180 == 2 * direction(F, A) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on A, I, D, C we get 180 == 2 * direction(A, I) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on D, C, F, A we get 180 == 2 * direction(D, C) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on D, C, A, F we get 180 == 2 * direction(D, C) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on I, A, B, C we get 180 == 2 * direction(I, A) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on A, C, B, E we get 180 == 2 * direction(A, C) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on C, D, F, I we get 180 == 2 * direction(C, D) - 2 * direction(F, I) mod 360
By perpendicular_direction_conditions_v0_r on B, C, A, F we get 180 == 2 * direction(B, C) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on C, D, A, F we get 180 == 2 * direction(C, D) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on A, F, D, C we get 180 == 2 * direction(A, F) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on D, C, I, A we get 180 == 2 * direction(D, C) - 2 * direction(I, A) mod 360
By perpendicular_direction_conditions_v0_r on I, F, C, D we get 180 == 2 * direction(I, F) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on B, C, I, F we get 180 == 2 * direction(B, C) - 2 * direction(I, F) mod 360
By perpendicular_direction_conditions_v0_r on B, E, E, C we get 180 == 2 * direction(B, E) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on F, A, C, D we get 180 == 2 * direction(F, A) - 2 * direction(C, D) mod 360
By projection_definition on F, E, g we get E == projection(F, g)
By same_angle_v3 on E, A, C, D we get angle(A, E, D) == angle(C, E, D) + 180 mod 360
By perpendicular_direction_conditions_v0_r on I, A, C, B we get 180 == 2 * direction(I, A) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on I, F, D, B we get 180 == 2 * direction(I, F) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on A, C, F, B we get 180 == 2 * direction(A, C) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on B, D, I, F we get 180 == 2 * direction(B, D) - 2 * direction(I, F) mod 360
By same_angle_v1 on A, C, E, I we get angle(C, A, I) == angle(E, A, I) mod 360
By same_angle_v1 on A, C, E, F we get angle(C, A, F) == angle(E, A, F) mod 360
By same_angle_v0 on A, G, B, E we get angle(B, A, E) == angle(G, A, E) mod 360
By perpendicular_direction_conditions_v0_r on B, F, A, C we get 180 == 2 * direction(B, F) - 2 * direction(A, C) mod 360
By same_angle_v1 on B, G, A, F we get angle(A, B, F) == angle(G, B, F) mod 360
By same_angle_v0 on B, C, D, E we get angle(C, B, E) == angle(D, B, E) mod 360
By same_angle_v3 on D, C, B, E we get angle(C, D, E) == angle(B, D, E) + 180 mod 360
By same_angle_v0 on A, I, F, E we get angle(F, A, E) == angle(I, A, E) mod 360
By perpendicular_direction_conditions_v0_r on C, B, A, D we get 180 == 2 * direction(C, B) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on C, E, F, E we get 180 == 2 * direction(C, E) - 2 * direction(F, E) mod 360
By same_angle_v1 on B, F, E, C we get angle(E, B, C) == angle(F, B, C) mod 360
By same_angle_v1 on B, A, G, D we get angle(A, B, D) == angle(G, B, D) mod 360
By perpendicular_direction_conditions_v0_r on B, E, E, A we get 180 == 2 * direction(B, E) - 2 * direction(E, A) mod 360
By same_angle_v0 on B, F, E, G we get angle(E, B, G) == angle(F, B, G) mod 360
By same_angle_v0 on B, E, F, A we get angle(E, B, A) == angle(F, B, A) mod 360
By perpendicular_direction_conditions_v0_r on E, C, F, E we get 180 == 2 * direction(E, C) - 2 * direction(F, E) mod 360
By same_angle_v0 on F, I, A, B we get angle(A, F, B) == angle(I, F, B) mod 360
By perpendicular_direction_conditions_v0_r on F, I, B, D we get 180 == 2 * direction(F, I) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on C, B, A, I we get 180 == 2 * direction(C, B) - 2 * direction(A, I) mod 360
By perpendicular_direction_conditions_v0_r on D, C, F, D we get 180 == 2 * direction(D, C) - 2 * direction(F, D) mod 360
By same_angle_v1 on A, E, C, B we get angle(C, A, B) == angle(E, A, B) mod 360
By perpendicular_direction_conditions_v0_r on F, D, B, C we get 180 == 2 * direction(F, D) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on E, B, E, C we get 180 == 2 * direction(E, B) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on B, F, C, E we get 180 == 2 * direction(B, F) - 2 * direction(C, E) mod 360
By same_angle_v0 on C, A, E, D we get angle(A, C, D) == angle(E, C, D) mod 360
By perpendicular_direction_conditions_v0_r on D, B, A, I we get 180 == 2 * direction(D, B) - 2 * direction(A, I) mod 360
By same_angle_v1 on C, D, B, E we get angle(B, C, E) == angle(D, C, E) mod 360
By perpendicular_direction_conditions_v0_r on D, B, F, I we get 180 == 2 * direction(D, B) - 2 * direction(F, I) mod 360
By same_angle_v1 on A, E, C, D we get angle(C, A, D) == angle(E, A, D) mod 360
By perpendicular_direction_conditions_v0_r on C, B, A, F we get 180 == 2 * direction(C, B) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on A, C, F, E we get 180 == 2 * direction(A, C) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on F, E, C, E we get 180 == 2 * direction(F, E) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on E, A, B, E we get 180 == 2 * direction(E, A) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on C, D, D, A we get 180 == 2 * direction(C, D) - 2 * direction(D, A) mod 360
By same_angle_v1 on F, A, I, E we get angle(A, F, E) == angle(I, F, E) mod 360
By same_angle_v0 on A, D, F, E we get angle(D, A, E) == angle(F, A, E) mod 360
By perpendicular_direction_conditions_v0_r on F, A, B, D we get 180 == 2 * direction(F, A) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on B, D, F, I we get 180 == 2 * direction(B, D) - 2 * direction(F, I) mod 360
By perpendicular_direction_conditions_v0_r on C, E, F, B we get 180 == 2 * direction(C, E) - 2 * direction(F, B) mod 360
By same_angle_v0 on B, D, C, G we get angle(C, B, G) == angle(D, B, G) mod 360
By perpendicular_direction_conditions_v0_r on I, F, B, D we get 180 == 2 * direction(I, F) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on E, F, A, C we get 180 == 2 * direction(E, F) - 2 * direction(A, C) mod 360
By probably_between_and_collinear_implies_between on E, F, B we get between(B, F, E)
By perpendicular_direction_conditions_v0_r on E, C, B, F we get 180 == 2 * direction(E, C) - 2 * direction(B, F) mod 360
By same_angle_v1 on A, E, C, G we get angle(C, A, G) == angle(E, A, G) mod 360
By perpendicular_direction_conditions_v0_r on A, D, C, B we get 180 == 2 * direction(A, D) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on E, B, C, E we get 180 == 2 * direction(E, B) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on C, B, F, A we get 180 == 2 * direction(C, B) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on F, B, A, C we get 180 == 2 * direction(F, B) - 2 * direction(A, C) mod 360
By same_angle_v0 on B, C, D, A we get angle(C, B, A) == angle(D, B, A) mod 360
By perpendicular_direction_conditions_v0_r on D, B, A, F we get 180 == 2 * direction(D, B) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on C, E, E, B we get 180 == 2 * direction(C, E) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on F, A, D, B we get 180 == 2 * direction(F, A) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on F, E, A, C we get 180 == 2 * direction(F, E) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on C, B, I, F we get 180 == 2 * direction(C, B) - 2 * direction(I, F) mod 360
By perpendicular_direction_conditions_v0_r on C, D, F, D we get 180 == 2 * direction(C, D) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on A, F, B, D we get 180 == 2 * direction(A, F) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on E, C, E, B we get 180 == 2 * direction(E, C) - 2 * direction(E, B) mod 360
By orthocenter_concurrency on B, A, C we get orthocenter(A, B, C) in altitude(B, A, C), orthocenter(A, B, C) in altitude(A, B, C), orthocenter(A, B, C) in altitude(C, A, B)
By perpendicular_direction_conditions_v0_r on D, A, B, C we get 180 == 2 * direction(D, A) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on E, C, F, B we get 180 == 2 * direction(E, C) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on D, B, F, A we get 180 == 2 * direction(D, B) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on E, F, C, E we get 180 == 2 * direction(E, F) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on C, E, B, F we get 180 == 2 * direction(C, E) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on F, A, C, B we get 180 == 2 * direction(F, A) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on B, F, E, C we get 180 == 2 * direction(B, F) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on D, C, D, A we get 180 == 2 * direction(D, C) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on B, D, A, I we get 180 == 2 * direction(B, D) - 2 * direction(A, I) mod 360
By perpendicular_direction_conditions_v0_r on C, D, D, F we get 180 == 2 * direction(C, D) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on F, D, D, C we get 180 == 2 * direction(F, D) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on A, F, D, B we get 180 == 2 * direction(A, F) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on A, C, E, B we get 180 == 2 * direction(A, C) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on A, I, B, D we get 180 == 2 * direction(A, I) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on B, C, D, F we get 180 == 2 * direction(B, C) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on D, A, D, C we get 180 == 2 * direction(D, A) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on F, I, C, B we get 180 == 2 * direction(F, I) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on D, F, C, D we get 180 == 2 * direction(D, F) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on B, C, D, A we get 180 == 2 * direction(B, C) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on B, D, A, D we get 180 == 2 * direction(B, D) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on D, B, I, A we get 180 == 2 * direction(D, B) - 2 * direction(I, A) mod 360
By perpendicular_direction_conditions_v0_r on A, C, E, F we get 180 == 2 * direction(A, C) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on D, C, D, F we get 180 == 2 * direction(D, C) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on B, D, F, A we get 180 == 2 * direction(B, D) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on C, B, F, I we get 180 == 2 * direction(C, B) - 2 * direction(F, I) mod 360
By perpendicular_direction_conditions_v0_r on B, C, F, D we get 180 == 2 * direction(B, C) - 2 * direction(F, D) mod 360
By probably_between_and_collinear_implies_between on C, D, B we get between(B, D, C)
By perpendicular_direction_conditions_v0_r on A, I, D, B we get 180 == 2 * direction(A, I) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on F, B, E, C we get 180 == 2 * direction(F, B) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on D, F, B, C we get 180 == 2 * direction(D, F) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on E, B, A, C we get 180 == 2 * direction(E, B) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on A, C, B, F we get 180 == 2 * direction(A, C) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on D, B, I, F we get 180 == 2 * direction(D, B) - 2 * direction(I, F) mod 360
By perpendicular_direction_conditions_v0_r on B, D, A, F we get 180 == 2 * direction(B, D) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on B, E, A, E we get 180 == 2 * direction(B, E) - 2 * direction(A, E) mod 360
By perpendicular_direction_conditions_v0_r on A, D, B, D we get 180 == 2 * direction(A, D) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on I, F, C, B we get 180 == 2 * direction(I, F) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on F, B, C, E we get 180 == 2 * direction(F, B) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on F, E, E, C we get 180 == 2 * direction(F, E) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on A, E, B, E we get 180 == 2 * direction(A, E) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on A, D, D, B we get 180 == 2 * direction(A, D) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on A, I, C, B we get 180 == 2 * direction(A, I) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on C, A, B, E we get 180 == 2 * direction(C, A) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on E, F, E, C we get 180 == 2 * direction(E, F) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on E, C, E, F we get 180 == 2 * direction(E, C) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on C, E, E, F we get 180 == 2 * direction(C, E) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on B, D, I, A we get 180 == 2 * direction(B, D) - 2 * direction(I, A) mod 360
By perpendicular_direction_conditions_v0_r on D, A, C, D we get 180 == 2 * direction(D, A) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on A, F, C, B we get 180 == 2 * direction(A, F) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on F, I, D, B we get 180 == 2 * direction(F, I) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on I, A, B, D we get 180 == 2 * direction(I, A) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on C, B, I, A we get 180 == 2 * direction(C, B) - 2 * direction(I, A) mod 360
By perpendicular_direction_conditions_v0_r on D, B, A, D we get 180 == 2 * direction(D, B) - 2 * direction(A, D) mod 360
By projection_definition on F, D, f we get D == projection(F, f)
By perpendicular_direction_conditions_v0_r on F, D, C, D we get 180 == 2 * direction(F, D) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on B, E, C, A we get 180 == 2 * direction(B, E) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on D, F, D, C we get 180 == 2 * direction(D, F) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on I, A, D, B we get 180 == 2 * direction(I, A) - 2 * direction(D, B) mod 360
By probably_between_and_collinear_implies_between on A, F, D we get between(A, F, D)
By in_imply_collinear on D, I, F we get collinear(D, F, I)
By probably_between_and_collinear_implies_between on C, E, A we get between(A, E, C)
By in_imply_collinear on I, D, A we get collinear(A, D, I)
By reverse_direction on D, E we get 180 == direction(D, E) - direction(E, D) mod 360
By reverse_direction on A, F we get 180 == direction(A, F) - direction(F, A) mod 360
By reverse_direction on A, B we get 180 == direction(A, B) - direction(B, A) mod 360
By reverse_direction on I, A we get 180 == direction(I, A) - direction(A, I) mod 360
By reverse_direction on C, E we get 180 == direction(C, E) - direction(E, C) mod 360
By reverse_direction on E, D we get 180 == direction(E, D) - direction(D, E) mod 360
By reverse_direction on G, B we get 180 == direction(G, B) - direction(B, G) mod 360
By reverse_direction on F, I we get 180 == direction(F, I) - direction(I, F) mod 360
By collinear_definition on A, D, F we get D in Line(A, F), F in Line(A, D), Line(A, D) == Line(A, F), 0 == 2 * angle(D, A, F) mod 360
By reverse_direction on D, C we get 180 == direction(D, C) - direction(C, D) mod 360
By reverse_direction on B, A we get 180 == direction(B, A) - direction(A, B) mod 360
By reverse_direction on C, D we get 180 == direction(C, D) - direction(D, C) mod 360
By reverse_direction on A, G we get 180 == direction(A, G) - direction(G, A) mod 360
By reverse_direction on E, C we get 180 == direction(E, C) - direction(C, E) mod 360
By reverse_direction on G, A we get 180 == direction(G, A) - direction(A, G) mod 360
By collinear_definition on A, F, D we get F in Line(A, D), D in Line(A, F), Line(A, D) == Line(A, F), 0 == 2 * angle(F, A, D) mod 360
By reverse_direction on A, I we get 180 == direction(A, I) - direction(I, A) mod 360
By reverse_direction on I, F we get 180 == direction(I, F) - direction(F, I) mod 360
By reverse_direction on F, A we get 180 == direction(F, A) - direction(A, F) mod 360
By reverse_direction on B, G we get 180 == direction(B, G) - direction(G, B) mod 360
By same_angle_v1 on C, B, D, H we get angle(B, C, H) == angle(D, C, H) mod 360
By perpendicular_direction_conditions_v0_r on E, A, B, F we get 180 == 2 * direction(E, A) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on E, A, F, E we get 180 == 2 * direction(E, A) - 2 * direction(F, E) mod 360
By same_angle_v2 on F, E, B, I we get angle(E, F, I) == angle(B, F, I) + 180 mod 360
By perpendicular_angle_conditions_v0 on F, D, C we get angle(F, D, C) == orientation(C, F, D) mod 360
By same_angle_v3 on E, A, C, H we get angle(A, E, H) == angle(C, E, H) + 180 mod 360
By same_angle_v2 on F, E, B, A we get angle(E, F, A) == angle(B, F, A) + 180 mod 360
By perpendicular_direction_conditions_v0_r on C, A, F, B we get 180 == 2 * direction(C, A) - 2 * direction(F, B) mod 360
By same_angle_v0 on C, E, A, H we get angle(A, C, H) == angle(E, C, H) mod 360
By same_angle_v2 on D, C, B, F we get angle(C, D, F) == angle(B, D, F) + 180 mod 360
By same_angle_v2 on D, C, B, H we get angle(C, D, H) == angle(B, D, H) + 180 mod 360
By perpendicular_direction_conditions_v0_r on E, F, C, A we get 180 == 2 * direction(E, F) - 2 * direction(C, A) mod 360
By same_angle_v3 on F, D, A, E we get angle(D, F, E) == angle(A, F, E) + 180 mod 360
By same_angle_v3 on F, A, D, B we get angle(A, F, B) == angle(D, F, B) + 180 mod 360
By perpendicular_direction_conditions_v0_r on B, F, A, E we get 180 == 2 * direction(B, F) - 2 * direction(A, E) mod 360
By same_angle_v1 on D, F, A, E we get angle(A, D, E) == angle(F, D, E) mod 360
By same_angle_v1 on C, B, D, A we get angle(B, C, A) == angle(D, C, A) mod 360
By same_angle_v1 on B, E, F, D we get angle(E, B, D) == angle(F, B, D) mod 360
By same_angle_v3 on E, A, C, F we get angle(A, E, F) == angle(C, E, F) + 180 mod 360
By perpendicular_direction_conditions_v0_r on B, F, C, A we get 180 == 2 * direction(B, F) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on E, A, F, B we get 180 == 2 * direction(E, A) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on F, B, C, A we get 180 == 2 * direction(F, B) - 2 * direction(C, A) mod 360
By same_angle_v0 on E, B, F, C we get angle(B, E, C) == angle(F, E, C) mod 360
By same_angle_v1 on D, A, F, C we get angle(A, D, C) == angle(F, D, C) mod 360
By same_angle_v0 on E, F, B, D we get angle(B, E, D) == angle(F, E, D) mod 360
By same_angle_v0 on B, C, D, F we get angle(C, B, F) == angle(D, B, F) mod 360
By perpendicular_direction_conditions_v0_r on F, E, C, A we get 180 == 2 * direction(F, E) - 2 * direction(C, A) mod 360
By same_angle_v0 on C, E, A, B we get angle(A, C, B) == angle(E, C, B) mod 360
By perpendicular_direction_conditions_v0_r on D, A, C, B we get 180 == 2 * direction(D, A) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on B, F, E, A we get 180 == 2 * direction(B, F) - 2 * direction(E, A) mod 360
By same_angle_v3 on E, A, C, B we get angle(A, E, B) == angle(C, E, B) + 180 mod 360
By perpendicular_direction_conditions_v0_r on B, D, F, D we get 180 == 2 * direction(B, D) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on A, E, E, B we get 180 == 2 * direction(A, E) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on D, B, D, A we get 180 == 2 * direction(D, B) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on E, F, A, E we get 180 == 2 * direction(E, F) - 2 * direction(A, E) mod 360
By perpendicular_direction_conditions_v0_r on D, A, D, B we get 180 == 2 * direction(D, A) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on F, D, D, B we get 180 == 2 * direction(F, D) - 2 * direction(D, B) mod 360
By same_angle_v2 on D, C, B, A we get angle(C, D, A) == angle(B, D, A) + 180 mod 360
By perpendicular_direction_conditions_v0_r on F, B, E, A we get 180 == 2 * direction(F, B) - 2 * direction(E, A) mod 360
By perpendicular_direction_conditions_v0_r on D, F, C, B we get 180 == 2 * direction(D, F) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on D, F, B, D we get 180 == 2 * direction(D, F) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on E, B, C, A we get 180 == 2 * direction(E, B) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on B, D, D, A we get 180 == 2 * direction(B, D) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on F, B, A, E we get 180 == 2 * direction(F, B) - 2 * direction(A, E) mod 360
By perpendicular_direction_conditions_v0_r on D, B, F, D we get 180 == 2 * direction(D, B) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on C, A, E, B we get 180 == 2 * direction(C, A) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on A, E, F, B we get 180 == 2 * direction(A, E) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on A, E, B, F we get 180 == 2 * direction(A, E) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on C, B, D, A we get 180 == 2 * direction(C, B) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on C, B, F, D we get 180 == 2 * direction(C, B) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on E, A, E, B we get 180 == 2 * direction(E, A) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on D, F, D, B we get 180 == 2 * direction(D, F) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on B, D, D, F we get 180 == 2 * direction(B, D) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on D, A, B, D we get 180 == 2 * direction(D, A) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on A, E, F, E we get 180 == 2 * direction(A, E) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on F, E, E, A we get 180 == 2 * direction(F, E) - 2 * direction(E, A) mod 360
By perpendicular_direction_conditions_v0_r on C, A, F, E we get 180 == 2 * direction(C, A) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on F, E, A, E we get 180 == 2 * direction(F, E) - 2 * direction(A, E) mod 360
By perpendicular_direction_conditions_v0_r on C, B, D, F we get 180 == 2 * direction(C, B) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on A, E, E, F we get 180 == 2 * direction(A, E) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on E, F, E, A we get 180 == 2 * direction(E, F) - 2 * direction(E, A) mod 360
By perpendicular_direction_conditions_v0_r on E, A, E, F we get 180 == 2 * direction(E, A) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on C, A, E, F we get 180 == 2 * direction(C, A) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on F, D, B, D we get 180 == 2 * direction(F, D) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on D, B, D, F we get 180 == 2 * direction(D, B) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on C, A, B, F we get 180 == 2 * direction(C, A) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on E, B, E, A we get 180 == 2 * direction(E, B) - 2 * direction(E, A) mod 360
By perpendicular_direction_conditions_v0_r on E, B, A, E we get 180 == 2 * direction(E, B) - 2 * direction(A, E) mod 360
By perpendicular_direction_conditions_v0_r on F, D, C, B we get 180 == 2 * direction(F, D) - 2 * direction(C, B) mod 360
By perpendicular_angle_conditions_v0 on C, D, A we get angle(C, D, A) == orientation(A, C, D) mod 360
By perpendicular_angle_conditions_v0 on C, E, F we get angle(C, E, F) == orientation(C, E, F) mod 360
By collinear_definition on C, A, E we get A in Line(C, E), E in Line(A, C), Line(A, C) == Line(C, E), 0 == 2 * angle(A, C, E) mod 360
By collinear_definition on E, A, C we get A in Line(C, E), C in Line(A, E), Line(A, E) == Line(C, E), 0 == 2 * angle(A, E, C) mod 360
By internal_angle_bisector_definition_v0_r on G, B, G, A we get Line(A, B) == internal_angle_bisector(G, A, G)
By reverse_direction on H, D we get 180 == direction(H, D) - direction(D, H) mod 360
By collinear_definition on F, A, D we get A in Line(D, F), D in Line(A, F), Line(A, F) == Line(D, F), 0 == 2 * angle(A, F, D) mod 360
By collinear_definition on B, F, E we get F in Line(B, E), E in Line(B, F), Line(B, E) == Line(B, F), 0 == 2 * angle(F, B, E) mod 360
By internal_angle_bisector_definition_v0_r on A, I, A, F we get Line(F, I) == internal_angle_bisector(A, F, A)
By collinear_definition on E, C, A we get C in Line(A, E), A in Line(C, E), Line(A, E) == Line(C, E), 0 == 2 * angle(C, E, A) mod 360
By collinear_definition on F, D, A we get D in Line(A, F), A in Line(D, F), Line(A, F) == Line(D, F), 0 == 2 * angle(D, F, A) mod 360
By collinear_definition on A, C, E we get C in Line(A, E), E in Line(A, C), Line(A, C) == Line(A, E), 0 == 2 * angle(C, A, E) mod 360
By perpendicular_angle_conditions_v0 on C, D, F we get angle(C, D, F) == orientation(C, D, F) mod 360
By internal_angle_bisector_definition_v0_r on F, I, F, A we get Line(A, I) == internal_angle_bisector(F, A, F)
By reverse_direction on A, C we get 180 == direction(A, C) - direction(C, A) mod 360
By internal_angle_bisector_definition_v0_r on A, B, A, G we get Line(B, G) == internal_angle_bisector(A, G, A)
By internal_angle_bisector_definition_v0_r on B, G, B, A we get Line(A, G) == internal_angle_bisector(B, A, B)
By internal_angle_bisector_definition_v0_r on B, A, B, G we get Line(A, G) == internal_angle_bisector(B, G, B)
By reverse_direction on A, D we get 180 == direction(A, D) - direction(D, A) mod 360
By collinear_definition on C, E, A we get E in Line(A, C), A in Line(C, E), Line(A, C) == Line(C, E), 0 == 2 * angle(E, C, A) mod 360
By reverse_direction on B, C we get 180 == direction(B, C) - direction(C, B) mod 360
By collinear_definition on A, E, C we get E in Line(A, C), C in Line(A, E), Line(A, C) == Line(A, E), 0 == 2 * angle(E, A, C) mod 360
By perpendicular_angle_conditions_v0 on A, D, C we get angle(A, D, C) == orientation(A, D, C) mod 360
By internal_angle_bisector_definition_v0_r on I, F, I, A we get Line(A, F) == internal_angle_bisector(I, A, I)
By perpendicular_angle_conditions_v0 on B, E, C we get angle(B, E, C) == orientation(B, E, C) mod 360
By internal_angle_bisector_definition_v0_r on A, F, A, I we get Line(F, I) == internal_angle_bisector(A, I, A)
By internal_angle_bisector_definition_v0_r on F, A, F, I we get Line(A, I) == internal_angle_bisector(F, I, F)
By collinear_definition on C, D, B we get D in Line(B, C), B in Line(C, D), Line(B, C) == Line(C, D), 0 == 2 * angle(D, C, B) mod 360
By collinear_definition on C, B, D we get B in Line(C, D), D in Line(B, C), Line(B, C) == Line(C, D), 0 == 2 * angle(B, C, D) mod 360
By collinear_definition on D, C, B we get C in Line(B, D), B in Line(C, D), Line(B, D) == Line(C, D), 0 == 2 * angle(C, D, B) mod 360
By perpendicular_angle_conditions_v0 on C, E, B we get angle(C, E, B) == orientation(B, C, E) mod 360
By internal_angle_bisector_definition_v0_r on G, A, G, B we get Line(A, B) == internal_angle_bisector(G, B, G)
By collinear_definition on B, E, F we get E in Line(B, F), F in Line(B, E), Line(B, E) == Line(B, F), 0 == 2 * angle(E, B, F) mod 360
By internal_angle_bisector_definition_v0_r on I, A, I, F we get Line(A, F) == internal_angle_bisector(I, F, I)
By perpendicular_angle_conditions_v0 on F, E, C we get angle(F, E, C) == orientation(C, F, E) mod 360
By internal_angle_bisector_definition_v0_r on A, G, A, B we get Line(B, G) == internal_angle_bisector(A, B, A)
By collinear_definition on B, D, C we get D in Line(B, C), C in Line(B, D), Line(B, C) == Line(B, D), 0 == 2 * angle(D, B, C) mod 360
By collinear_definition on B, C, D we get C in Line(B, D), D in Line(B, C), Line(B, C) == Line(B, D), 0 == 2 * angle(C, B, D) mod 360
By reverse_direction on B, E we get 180 == direction(B, E) - direction(E, B) mod 360
By reverse_direction on H, E we get 180 == direction(H, E) - direction(E, H) mod 360
By collinear_definition on D, B, C we get B in Line(C, D), C in Line(B, D), Line(B, D) == Line(C, D), 0 == 2 * angle(B, D, C) mod 360
By reverse_direction on H, C we get 180 == direction(H, C) - direction(C, H) mod 360
By same_angle_v3 on F, B, E, D we get angle(B, F, D) == angle(E, F, D) + 180 mod 360
By same_angle_v1 on D, F, A, H we get angle(A, D, H) == angle(F, D, H) mod 360
By same_angle_v1 on E, F, B, A we get angle(B, E, A) == angle(F, E, A) mod 360
By same_angle_v0 on D, A, F, B we get angle(A, D, B) == angle(F, D, B) mod 360
By same_angle_v0 on E, B, F, H we get angle(B, E, H) == angle(F, E, H) mod 360
By altitude_definition on A, E, F, g we get g == altitude(A, E, F)
By isosceles_triangle_properties on H, C, D we get distance(C, H) == distance(D, H), angle(C, D, H) == angle(H, C, D) mod 360
By altitude_definition on F, C, A, i we get i == altitude(F, A, C)
By altitude_definition on F, C, D, h we get h == altitude(F, C, D)
By altitude_definition on B, E, C, i we get i == altitude(B, C, E)
By altitude_definition on C, F, I, f we get f == altitude(C, F, I)
By altitude_definition on B, A, F, f we get f == altitude(B, A, F)
By perpendicular_angle_conditions_v0 on A, D, B we get angle(A, D, B) == orientation(A, D, B) mod 360
By altitude_definition on C, I, A, f we get f == altitude(C, A, I)
By altitude_definition on F, A, E, i we get i == altitude(F, A, E)
By isosceles_triangle_properties on H, D, E we get distance(D, H) == distance(E, H), angle(D, E, H) == angle(H, D, E) mod 360
By sas_anti_congruence on D, H, C, C, H, D we get anti_congruent_triangles(C, D, H, D, C, H)
By altitude_definition on C, F, B, g we get g == altitude(C, B, F)
By altitude_definition on F, D, B, h we get h == altitude(F, B, D)
By altitude_definition on C, F, E, g we get g == altitude(C, E, F)
By altitude_definition on F, C, E, i we get i == altitude(F, C, E)
By altitude_definition on B, I, F, f we get f == altitude(B, F, I)
By perpendicular_angle_conditions_v0 on F, D, B we get angle(F, D, B) == orientation(B, F, D) mod 360
By perpendicular_angle_conditions_v0 on A, E, B we get angle(A, E, B) == orientation(A, E, B) mod 360
By isosceles_triangle_properties on H, E, D we get distance(D, H) == distance(E, H), angle(E, D, H) == angle(H, E, D) mod 360
By collinear_definition on D, A, F we get A in Line(D, F), F in Line(A, D), Line(A, D) == Line(D, F), 0 == 2 * angle(A, D, F) mod 360
By sas_anti_congruence on C, H, E, E, H, C we get anti_congruent_triangles(C, E, H, E, C, H)
By altitude_definition on B, A, I, f we get f == altitude(B, A, I)
By collinear_definition on F, E, B we get E in Line(B, F), B in Line(E, F), Line(B, F) == Line(E, F), 0 == 2 * angle(E, F, B) mod 360
By altitude_definition on F, C, B, h we get h == altitude(F, B, C)
By altitude_definition on A, D, C, h we get h == altitude(A, C, D)
By perpendicular_angle_conditions_v0 on B, D, F we get angle(B, D, F) == orientation(B, D, F) mod 360
By altitude_definition on C, A, F, f we get f == altitude(C, A, F)
By altitude_definition on I, C, B, h we get h == altitude(I, B, C)
By sas_anti_congruence on D, H, E, E, H, D we get anti_congruent_triangles(D, E, H, E, D, H)
By altitude_definition on C, D, F, f we get f == altitude(C, D, F)
By altitude_definition on I, D, B, h we get h == altitude(I, B, D)
By isosceles_triangle_properties on H, D, C we get distance(C, H) == distance(D, H), angle(D, C, H) == angle(H, D, C) mod 360
By altitude_definition on A, E, B, g we get g == altitude(A, B, E)
By perpendicular_angle_conditions_v0 on B, E, A we get angle(B, E, A) == orientation(A, B, E) mod 360
By altitude_definition on C, A, D, f we get f == altitude(C, A, D)
By altitude_definition on B, D, F, f we get f == altitude(B, D, F)
By altitude_definition on C, E, B, g we get g == altitude(C, B, E)
By altitude_definition on A, B, F, g we get g == altitude(A, B, F)
By collinear_definition on E, B, F we get B in Line(E, F), F in Line(B, E), Line(B, E) == Line(E, F), 0 == 2 * angle(B, E, F) mod 360
By sas_anti_congruence on C, H, D, D, H, C we get anti_congruent_triangles(C, D, H, D, C, H)
By isosceles_triangle_properties on H, C, E we get distance(C, H) == distance(E, H), angle(C, E, H) == angle(H, C, E) mod 360
By altitude_definition on A, D, B, h we get h == altitude(A, B, D)
By perpendicular_angle_conditions_v0 on B, D, A we get angle(B, D, A) == orientation(A, B, D) mod 360
By perpendicular_angle_conditions_v0 on F, E, A we get angle(F, E, A) == orientation(A, F, E) mod 360
By altitude_definition on I, C, D, h we get h == altitude(I, C, D)
By isosceles_triangle_properties on H, E, C we get distance(C, H) == distance(E, H), angle(E, C, H) == angle(H, E, C) mod 360
By altitude_definition on B, D, A, f we get f == altitude(B, A, D)
By altitude_definition on B, E, A, i we get i == altitude(B, A, E)
By collinear_definition on E, F, B we get F in Line(B, E), B in Line(E, F), Line(B, E) == Line(E, F), 0 == 2 * angle(F, E, B) mod 360
By sas_anti_congruence on E, H, D, D, H, E we get anti_congruent_triangles(D, E, H, E, D, H)
By collinear_definition on F, B, E we get B in Line(E, F), E in Line(B, F), Line(B, F) == Line(E, F), 0 == 2 * angle(B, F, E) mod 360
By sas_anti_congruence on E, H, C, C, H, E we get anti_congruent_triangles(C, E, H, E, C, H)
By collinear_definition on D, F, A we get F in Line(A, D), A in Line(D, F), Line(A, D) == Line(D, F), 0 == 2 * angle(F, D, A) mod 360
By right_triangle_circumcenter_v1 on B, E, A we get midpoint(A, B) == circumcenter(A, B, E)
By perpendicular_angle_conditions_v0 on A, E, F we get angle(A, E, F) == orientation(A, E, F) mod 360
By right_triangle_circumcenter_v1 on A, D, B we get midpoint(A, B) == circumcenter(A, B, D)
By right_triangle_circumcenter_v1 on F, E, A we get midpoint(A, F) == circumcenter(A, E, F)
By power_of_a_point_definition on A, C, E, c we get log(power_of_a_point(A, c)) == log(distance(A, C)) + log(distance(A, E))
By power_of_a_point_definition on B, D, C, c we get log(power_of_a_point(B, c)) == log(distance(B, D)) + log(distance(B, C))
By concurrent_sufficient_conditions on g, i, Line(E, H) we get concurrent(g, i, Line(E, H))
By concurrent_sufficient_conditions on Line(A, B), g, h we get concurrent(g, h, Line(A, B))
By concurrent_sufficient_conditions on h, Line(D, E), f we get concurrent(f, h, Line(D, E))
By concurrent_sufficient_conditions on i, g, Line(D, E) we get concurrent(g, i, Line(D, E))
By concyclic_sufficient_conditions_v0 on A, D, B, E we get concyclic(A, B, D, E)
By concurrent_sufficient_conditions on Line(D, E), f, h we get concurrent(f, h, Line(D, E))
By concurrent_sufficient_conditions on f, Line(A, B), i we get concurrent(f, i, Line(A, B))
By concyclic_sufficient_conditions_v1 on C, E, F, D we get concyclic(C, D, E, F)
By concurrent_sufficient_conditions on f, g, Line(C, H) we get concurrent(f, g, Line(C, H))
By concurrent_sufficient_conditions on i, Line(E, H), Line(D, E) we get concurrent(i, Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on h, g, Line(A, B) we get concurrent(g, h, Line(A, B))
By concurrent_sufficient_conditions on Line(D, E), i, Line(E, H) we get concurrent(i, Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on i, Line(E, H), g we get concurrent(g, i, Line(E, H))
By concurrent_sufficient_conditions on g, h, Line(A, B) we get concurrent(g, h, Line(A, B))
By concurrent_sufficient_conditions on i, Line(D, E), g we get concurrent(g, i, Line(D, E))
By concurrent_sufficient_conditions on g, Line(D, E), i we get concurrent(g, i, Line(D, E))
By line_definition on D, orthocenter(A, B, C), h we get h == Line(D, orthocenter(A, B, C))
By concurrent_sufficient_conditions on Line(D, E), h, Line(D, H) we get concurrent(h, Line(D, E), Line(D, H))
By concurrent_sufficient_conditions on Line(E, H), Line(C, H), Line(D, H) we get concurrent(Line(C, H), Line(D, H), Line(E, H))
By concurrent_sufficient_conditions on i, Line(D, E), Line(E, H) we get concurrent(i, Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on f, Line(D, E), h we get concurrent(f, h, Line(D, E))
By concurrent_sufficient_conditions on Line(D, H), Line(D, E), f we get concurrent(f, Line(D, E), Line(D, H))
By concurrent_sufficient_conditions on Line(D, H), Line(D, E), h we get concurrent(h, Line(D, E), Line(D, H))
By concurrent_sufficient_conditions on Line(C, H), Line(D, H), Line(E, H) we get concurrent(Line(C, H), Line(D, H), Line(E, H))
By concurrent_sufficient_conditions on f, i, Line(A, B) we get concurrent(f, i, Line(A, B))
By concurrent_sufficient_conditions on f, Line(D, H), h we get concurrent(f, h, Line(D, H))
By concurrent_sufficient_conditions on Line(D, E), Line(E, H), g we get concurrent(g, Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on Line(C, H), Line(E, H), Line(D, H) we get concurrent(Line(C, H), Line(D, H), Line(E, H))
By line_definition on orthocenter(A, B, C), B, i we get i == Line(B, orthocenter(A, B, C))
By line_intersection_definition on orthocenter(A, B, C), i, h we get orthocenter(A, B, C) == line_intersection(h, i)
By line_definition on E, orthocenter(A, B, C), i we get i == Line(E, orthocenter(A, B, C))
By concurrent_sufficient_conditions on Line(D, E), h, f we get concurrent(f, h, Line(D, E))
By concurrent_sufficient_conditions on Line(C, H), g, f we get concurrent(f, g, Line(C, H))
By concurrent_sufficient_conditions on Line(D, E), Line(E, H), i we get concurrent(i, Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on Line(D, H), f, Line(D, E) we get concurrent(f, Line(D, E), Line(D, H))
By line_definition on I, orthocenter(A, B, C), h we get h == Line(I, orthocenter(A, B, C))
By concurrent_sufficient_conditions on i, g, Line(E, H) we get concurrent(g, i, Line(E, H))
By concurrent_sufficient_conditions on g, Line(D, E), Line(E, H) we get concurrent(g, Line(D, E), Line(E, H))
By line_definition on orthocenter(A, B, C), C, altitude(C, A, B) we get altitude(C, A, B) == Line(C, orthocenter(A, B, C))
By line_definition on A, orthocenter(A, B, C), h we get h == Line(A, orthocenter(A, B, C))
By concurrent_sufficient_conditions on Line(A, B), i, f we get concurrent(f, i, Line(A, B))
By concurrent_sufficient_conditions on g, Line(C, H), f we get concurrent(f, g, Line(C, H))
By concurrent_sufficient_conditions on h, Line(A, B), g we get concurrent(g, h, Line(A, B))
By concurrent_sufficient_conditions on Line(D, H), f, h we get concurrent(f, h, Line(D, H))
By concurrent_sufficient_conditions on Line(E, H), g, i we get concurrent(g, i, Line(E, H))
By concurrent_sufficient_conditions on f, h, Line(D, H) we get concurrent(f, h, Line(D, H))
By concurrent_sufficient_conditions on i, f, Line(A, B) we get concurrent(f, i, Line(A, B))
By concurrent_sufficient_conditions on Line(D, H), Line(E, H), Line(C, H) we get concurrent(Line(C, H), Line(D, H), Line(E, H))
By concurrent_sufficient_conditions on Line(D, E), Line(D, H), f we get concurrent(f, Line(D, E), Line(D, H))
By concurrent_sufficient_conditions on h, f, Line(D, E) we get concurrent(f, h, Line(D, E))
By concurrent_sufficient_conditions on Line(D, H), h, f we get concurrent(f, h, Line(D, H))
By concurrent_sufficient_conditions on Line(D, H), Line(C, H), Line(E, H) we get concurrent(Line(C, H), Line(D, H), Line(E, H))
By concurrent_sufficient_conditions on Line(D, E), Line(D, H), h we get concurrent(h, Line(D, E), Line(D, H))
By concurrent_sufficient_conditions on Line(D, E), f, Line(D, H) we get concurrent(f, Line(D, E), Line(D, H))
By concurrent_sufficient_conditions on Line(C, H), f, g we get concurrent(f, g, Line(C, H))
By concurrent_sufficient_conditions on Line(E, H), g, Line(D, E) we get concurrent(g, Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on Line(E, H), Line(D, E), i we get concurrent(i, Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on g, i, Line(D, E) we get concurrent(g, i, Line(D, E))
By concurrent_sufficient_conditions on Line(D, E), g, i we get concurrent(g, i, Line(D, E))
By concurrent_sufficient_conditions on Line(E, H), i, g we get concurrent(g, i, Line(E, H))
By concurrent_sufficient_conditions on g, Line(E, H), i we get concurrent(g, i, Line(E, H))
By concurrent_sufficient_conditions on Line(E, H), Line(D, E), g we get concurrent(g, Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on Line(D, H), h, Line(D, E) we get concurrent(h, Line(D, E), Line(D, H))
By concurrent_sufficient_conditions on Line(D, E), i, g we get concurrent(g, i, Line(D, E))
By concurrent_sufficient_conditions on h, f, Line(D, H) we get concurrent(f, h, Line(D, H))
By concurrent_sufficient_conditions on g, Line(A, B), h we get concurrent(g, h, Line(A, B))
By concurrent_sufficient_conditions on g, Line(E, H), Line(D, E) we get concurrent(g, Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on Line(E, H), Line(D, H), Line(C, H) we get concurrent(Line(C, H), Line(D, H), Line(E, H))
By concurrent_sufficient_conditions on Line(E, H), i, Line(D, E) we get concurrent(i, Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on f, Line(D, H), Line(D, E) we get concurrent(f, Line(D, E), Line(D, H))
By concurrent_sufficient_conditions on h, Line(D, H), f we get concurrent(f, h, Line(D, H))
By concurrent_sufficient_conditions on Line(A, B), h, g we get concurrent(g, h, Line(A, B))
By concurrent_sufficient_conditions on h, Line(D, E), Line(D, H) we get concurrent(h, Line(D, E), Line(D, H))
By concurrent_sufficient_conditions on Line(D, E), g, Line(E, H) we get concurrent(g, Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on h, Line(D, H), Line(D, E) we get concurrent(h, Line(D, E), Line(D, H))
By concurrent_sufficient_conditions on i, Line(A, B), f we get concurrent(f, i, Line(A, B))
By concurrent_sufficient_conditions on Line(A, B), f, i we get concurrent(f, i, Line(A, B))
By concurrent_sufficient_conditions on f, Line(C, H), g we get concurrent(f, g, Line(C, H))
By concurrent_sufficient_conditions on g, f, Line(C, H) we get concurrent(f, g, Line(C, H))
By concurrent_sufficient_conditions on f, h, Line(D, E) we get concurrent(f, h, Line(D, E))
By concurrent_sufficient_conditions on f, Line(D, E), Line(D, H) we get concurrent(f, Line(D, E), Line(D, H))
By perpendicular_line_definition on orthocenter(A, B, C), h, f we get h == perpendicular_line(orthocenter(A, B, C), f)
By line_intersection_definition on C, altitude(C, A, B), f we get C == line_intersection(f, altitude(C, A, B))
By radical_axis_of_intersecting_circles_v0 on A, E, Circle(A, E, F), Circle(A, B, E) we get Line(A, E) == radical_axis(Circle(A, B, E), Circle(A, E, F))
By line_intersection_definition on orthocenter(A, B, C), i, altitude(C, A, B) we get orthocenter(A, B, C) == line_intersection(i, altitude(C, A, B))
By perpendicular_line_definition on orthocenter(A, B, C), i, g we get i == perpendicular_line(orthocenter(A, B, C), g)
By perpendicular_line_definition on G, Line(A, B), altitude(C, A, B) we get Line(A, B) == perpendicular_line(G, altitude(C, A, B))
By perpendicular_line_definition on orthocenter(A, B, C), altitude(C, A, B), Line(A, B) we get altitude(C, A, B) == perpendicular_line(orthocenter(A, B, C), Line(A, B))
By line_intersection_definition on C, g, altitude(C, A, B) we get C == line_intersection(g, altitude(C, A, B))
By perpendicular_line_definition on B, Line(A, B), altitude(C, A, B) we get Line(A, B) == perpendicular_line(B, altitude(C, A, B))
By perpendicular_line_definition on A, Line(A, B), altitude(C, A, B) we get Line(A, B) == perpendicular_line(A, altitude(C, A, B))
By line_intersection_definition on orthocenter(A, B, C), altitude(C, A, B), h we get orthocenter(A, B, C) == line_intersection(h, altitude(C, A, B))
By line_unique_intersection on h, i, orthocenter(A, B, C), F we get F == orthocenter(A, B, C)
By between_imply_not_between on E, F, B we get collinear_and_not_between(B, E, F)
By between_imply_not_between on A, F, D we get collinear_and_not_between(D, A, F)
By projection_definition on I, D, f we get D == projection(I, f)
By between_imply_not_between on B, D, C we get collinear_and_not_between(C, B, D)
By between_imply_not_between on A, E, C we get collinear_and_not_between(C, A, E)
By between_imply_not_between on C, E, A we get collinear_and_not_between(A, C, E)
By between_imply_not_between on B, F, E we get collinear_and_not_between(E, B, F)
By between_imply_not_between on D, F, A we get collinear_and_not_between(A, D, F)
By between_imply_not_between on C, D, B we get collinear_and_not_between(B, C, D)
By circle_radius_v0_r on F, Circle(A, E, F) we get radius(Circle(A, E, F)) == distance(F, center(Circle(A, E, F)))
By circle_radius_v0_r on A, Circle(A, E, F) we get radius(Circle(A, E, F)) == distance(A, center(Circle(A, E, F)))
By circle_radius_v0_r on D, Circle(A, B, D) we get radius(Circle(A, B, D)) == distance(D, center(Circle(A, B, D)))
By circle_radius_v0_r on A, Circle(A, B, E) we get radius(Circle(A, B, E)) == distance(A, center(Circle(A, B, E)))
By circle_radius_v0_r on B, Circle(A, B, D) we get radius(Circle(A, B, D)) == distance(B, center(Circle(A, B, D)))
By circle_radius_v0_r on A, Circle(A, B, D) we get radius(Circle(A, B, D)) == distance(A, center(Circle(A, B, D)))
By circle_radius_v0_r on B, Circle(A, B, E) we get radius(Circle(A, B, E)) == distance(B, center(Circle(A, B, E)))
By circle_radius_v0_r on E, Circle(A, E, F) we get radius(Circle(A, E, F)) == distance(E, center(Circle(A, E, F)))
By circle_radius_v0_r on E, Circle(A, B, E) we get radius(Circle(A, B, E)) == distance(E, center(Circle(A, B, E)))
By angle_to_center on E, B, A, Circle(A, B, E) we get 2 * angle(E, B, A) == angle(E, center(Circle(A, B, E)), A) mod 360
By angle_to_center on F, A, E, Circle(A, E, F) we get 2 * angle(F, A, E) == angle(F, center(Circle(A, E, F)), E) mod 360
By angle_to_center on A, B, D, Circle(A, B, D) we get 2 * angle(A, B, D) == angle(A, center(Circle(A, B, D)), D) mod 360
By angle_to_center on E, A, F, Circle(A, E, F) we get 2 * angle(E, A, F) == angle(E, center(Circle(A, E, F)), F) mod 360
By angle_to_center on A, F, E, Circle(A, E, F) we get 2 * angle(A, F, E) == angle(A, center(Circle(A, E, F)), E) mod 360
By angle_to_center on E, A, B, Circle(A, B, E) we get 2 * angle(E, A, B) == angle(E, center(Circle(A, B, E)), B) mod 360
By angle_to_center on E, F, A, Circle(A, E, F) we get 2 * angle(E, F, A) == angle(E, center(Circle(A, E, F)), A) mod 360
By angle_to_center on D, A, B, Circle(A, B, D) we get 2 * angle(D, A, B) == angle(D, center(Circle(A, B, D)), B) mod 360
By angle_to_center on D, B, A, Circle(A, B, D) we get 2 * angle(D, B, A) == angle(D, center(Circle(A, B, D)), A) mod 360
By angle_to_center on B, A, D, Circle(A, B, D) we get 2 * angle(B, A, D) == angle(B, center(Circle(A, B, D)), D) mod 360
By angle_to_center on B, A, E, Circle(A, B, E) we get 2 * angle(B, A, E) == angle(B, center(Circle(A, B, E)), E) mod 360
By same_angle_v2 on D, C, B, I we get angle(C, D, I) == angle(B, D, I) + 180 mod 360
By angle_to_center on A, B, E, Circle(A, B, E) we get 2 * angle(A, B, E) == angle(A, center(Circle(A, B, E)), E) mod 360
By divide_by_2_mod_180_v1 on D, E, F, B, C, H we get angle(B, C, H) == angle(D, E, F) mod 360
By same_angle_v1 on D, F, I, H we get angle(F, D, H) == angle(I, D, H) mod 360
By same_angle_v0 on D, F, I, B we get angle(F, D, B) == angle(I, D, B) mod 360
By perpendicular_direction_conditions_v0_r on D, C, D, I we get 180 == 2 * direction(D, C) - 2 * direction(D, I) mod 360
By perpendicular_direction_conditions_v0_r on D, I, D, C we get 180 == 2 * direction(D, I) - 2 * direction(D, C) mod 360
By orthocenter_concurrency on A, B, F we get orthocenter(A, B, F) in altitude(A, B, F), orthocenter(A, B, F) in altitude(B, A, F), orthocenter(A, B, F) in altitude(F, A, B)
By same_angle_v1 on D, A, I, C we get angle(A, D, C) == angle(I, D, C) mod 360
By same_angle_v0 on D, A, I, B we get angle(A, D, B) == angle(I, D, B) mod 360
By same_angle_v1 on D, I, A, E we get angle(A, D, E) == angle(I, D, E) mod 360
By divide_by_2_mod_180_v0 on F, A, E, D, E, H we get angle(D, E, H) == angle(F, A, E) mod 360
By perpendicular_direction_conditions_v0_r on B, D, D, I we get 180 == 2 * direction(B, D) - 2 * direction(D, I) mod 360
By divide_by_2_mod_180_v0 on A, C, H, E, D, A we get angle(A, C, H) == angle(E, D, A) mod 360
By same_angle_v1 on D, I, F, C we get angle(F, D, C) == angle(I, D, C) mod 360
By same_angle_v1 on D, A, I, H we get angle(A, D, H) == angle(I, D, H) mod 360
By divide_by_2_mod_180_v0 on B, E, H, C, D, E we get angle(B, E, H) == angle(C, D, E) mod 360
By perpendicular_direction_conditions_v0_r on D, C, I, D we get 180 == 2 * direction(D, C) - 2 * direction(I, D) mod 360
By perpendicular_direction_conditions_v0_r on B, C, D, I we get 180 == 2 * direction(B, C) - 2 * direction(D, I) mod 360
By divide_by_2_mod_180_v1 on C, E, H, F, D, E we get angle(C, E, H) == angle(F, D, E) mod 360
By perpendicular_direction_conditions_v0_r on I, D, D, B we get 180 == 2 * direction(I, D) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on B, D, I, D we get 180 == 2 * direction(B, D) - 2 * direction(I, D) mod 360
By orthocenter_concurrency on F, C, B we get orthocenter(B, C, F) in altitude(F, B, C), orthocenter(B, C, F) in altitude(C, B, F), orthocenter(B, C, F) in altitude(B, C, F)
By in_imply_collinear on orthocenter(A, B, C), E, B we get collinear(B, E, orthocenter(A, B, C))
By same_angle_v1 on D, F, I, E we get angle(F, D, E) == angle(I, D, E) mod 360
By perpendicular_direction_conditions_v0_r on I, D, D, C we get 180 == 2 * direction(I, D) - 2 * direction(D, C) mod 360
By divide_by_2_mod_180_v1 on H, D, C, D, E, B we get angle(D, E, B) == angle(H, D, C) mod 360
By perpendicular_direction_conditions_v0_r on C, D, D, I we get 180 == 2 * direction(C, D) - 2 * direction(D, I) mod 360
By perpendicular_direction_conditions_v0_r on C, B, I, D we get 180 == 2 * direction(C, B) - 2 * direction(I, D) mod 360
By perpendicular_direction_conditions_v0_r on D, I, C, B we get 180 == 2 * direction(D, I) - 2 * direction(C, B) mod 360
By divide_by_2_mod_180_v1 on E, A, F, H, E, D we get angle(E, A, F) == angle(H, E, D) mod 360
By perpendicular_direction_conditions_v0_r on D, B, D, I we get 180 == 2 * direction(D, B) - 2 * direction(D, I) mod 360
By divide_by_2_mod_180_v2 on A, C, D, B, F, A we get angle(A, C, D) == angle(B, F, A) + 180 mod 360
By orthocenter_concurrency on F, C, A we get orthocenter(A, C, F) in altitude(F, A, C), orthocenter(A, C, F) in altitude(C, A, F), orthocenter(A, C, F) in altitude(A, C, F)
By divide_by_2_mod_180_v1 on E, D, H, E, B, D we get angle(E, B, D) == angle(E, D, H) mod 360
By perpendicular_direction_conditions_v0_r on D, B, I, D we get 180 == 2 * direction(D, B) - 2 * direction(I, D) mod 360
By perpendicular_direction_conditions_v0_r on B, C, I, D we get 180 == 2 * direction(B, C) - 2 * direction(I, D) mod 360
By perpendicular_direction_conditions_v0_r on I, D, B, C we get 180 == 2 * direction(I, D) - 2 * direction(B, C) mod 360
By probably_between_and_collinear_implies_between on I, F, D we get between(D, F, I)
By divide_by_2_mod_180_v0 on H, D, E, D, B, F we get angle(D, B, F) == angle(H, D, E) mod 360
By perpendicular_direction_conditions_v0_r on D, I, B, C we get 180 == 2 * direction(D, I) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on I, D, C, B we get 180 == 2 * direction(I, D) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on I, D, C, D we get 180 == 2 * direction(I, D) - 2 * direction(C, D) mod 360
By divide_by_2_mod_180_v0 on E, F, I, E, C, B we get angle(E, C, B) == angle(E, F, I) mod 360
By perpendicular_direction_conditions_v0_r on C, D, I, D we get 180 == 2 * direction(C, D) - 2 * direction(I, D) mod 360
By perpendicular_direction_conditions_v0_r on D, I, D, B we get 180 == 2 * direction(D, I) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on I, D, B, D we get 180 == 2 * direction(I, D) - 2 * direction(B, D) mod 360
By divide_by_2_mod_180_v0 on E, C, B, B, F, D we get angle(B, F, D) == angle(E, C, B) mod 360
By perpendicular_direction_conditions_v0_r on D, I, B, D we get 180 == 2 * direction(D, I) - 2 * direction(B, D) mod 360
By divide_by_2_mod_180_v0 on C, D, H, B, E, D we get angle(B, E, D) == angle(C, D, H) mod 360
By perpendicular_direction_conditions_v0_r on C, B, D, I we get 180 == 2 * direction(C, B) - 2 * direction(D, I) mod 360
By divide_by_2_mod_180_v1 on B, C, E, D, F, B we get angle(B, C, E) == angle(D, F, B) mod 360
By divide_by_2_mod_180_v0 on E, F, I, A, C, D we get angle(A, C, D) == angle(E, F, I) mod 360
By perpendicular_direction_conditions_v0_r on D, I, C, D we get 180 == 2 * direction(D, I) - 2 * direction(C, D) mod 360
By divide_by_2_mod_180_v2 on E, D, A, H, E, A we get angle(E, D, A) == angle(H, E, A) + 180 mod 360
By divide_by_2_mod_180_v0 on B, F, D, A, C, D we get angle(A, C, D) == angle(B, F, D) mod 360
By in_imply_collinear on orthocenter(A, B, C), A, I we get collinear(A, I, orthocenter(A, B, C))
By divide_by_2_mod_180_v3 on F, D, H, A, E, D we get angle(F, D, H) == angle(A, E, D) + 180 mod 360
By divide_by_2_mod_180_v1 on D, C, E, I, F, E we get angle(D, C, E) == angle(I, F, E) mod 360
By probably_between_and_collinear_implies_between on D, I, A we get between(A, I, D)
By divide_by_2_mod_180_v1 on E, D, H, F, B, D we get angle(E, D, H) == angle(F, B, D) mod 360
By divide_by_2_mod_180_v0 on D, E, H, D, B, E we get angle(D, B, E) == angle(D, E, H) mod 360
By in_imply_collinear on orthocenter(A, B, C), D, I we get collinear(D, I, orthocenter(A, B, C))
By divide_by_2_mod_180_v1 on H, E, D, E, A, I we get angle(E, A, I) == angle(H, E, D) mod 360
By divide_by_2_mod_180_v2 on I, F, B, B, C, A we get angle(I, F, B) == angle(B, C, A) + 180 mod 360
By divide_by_2_mod_180_v3 on D, C, A, A, F, B we get angle(D, C, A) == angle(A, F, B) + 180 mod 360
By divide_by_2_mod_180_v3 on D, E, F, H, D, B we get angle(D, E, F) == angle(H, D, B) + 180 mod 360
By divide_by_2_mod_180_v3 on D, C, E, D, F, E we get angle(D, C, E) == angle(D, F, E) + 180 mod 360
By divide_by_2_mod_180_v1 on C, A, I, H, E, D we get angle(C, A, I) == angle(H, E, D) mod 360
By in_imply_collinear on orthocenter(A, B, C), E, F we get collinear(E, F, orthocenter(A, B, C))
By divide_by_2_mod_180_v2 on D, F, E, B, C, E we get angle(D, F, E) == angle(B, C, E) + 180 mod 360
By divide_by_2_mod_180_v1 on H, E, D, C, A, D we get angle(C, A, D) == angle(H, E, D) mod 360
By divide_by_2_mod_180_v2 on A, C, D, B, F, I we get angle(A, C, D) == angle(B, F, I) + 180 mod 360
By divide_by_2_mod_180_v0 on C, B, F, D, E, H we get angle(C, B, F) == angle(D, E, H) mod 360
By divide_by_2_mod_180_v1 on H, E, F, E, D, C we get angle(E, D, C) == angle(H, E, F) mod 360
By in_imply_collinear on orthocenter(A, B, C), D, F we get collinear(D, F, orthocenter(A, B, C))
By divide_by_2_mod_180_v2 on H, D, B, D, E, F we get angle(H, D, B) == angle(D, E, F) + 180 mod 360
By in_imply_collinear on orthocenter(A, B, C), I, F we get collinear(F, I, orthocenter(A, B, C))
By divide_by_2_mod_180_v1 on D, C, H, D, E, F we get angle(D, C, H) == angle(D, E, F) mod 360
By divide_by_2_mod_180_v0 on E, F, A, E, C, D we get angle(E, C, D) == angle(E, F, A) mod 360
By divide_by_2_mod_180_v1 on C, A, D, E, D, H we get angle(C, A, D) == angle(E, D, H) mod 360
By divide_by_2_mod_180_v1 on H, E, D, E, B, C we get angle(E, B, C) == angle(H, E, D) mod 360
By divide_by_2_mod_180_v0 on E, C, D, E, F, I we get angle(E, C, D) == angle(E, F, I) mod 360
By divide_by_2_mod_180_v1 on H, E, D, C, A, F we get angle(C, A, F) == angle(H, E, D) mod 360
By divide_by_2_mod_180_v3 on B, C, A, I, F, B we get angle(B, C, A) == angle(I, F, B) + 180 mod 360
By divide_by_2_mod_180_v2 on E, C, B, E, F, D we get angle(E, C, B) == angle(E, F, D) + 180 mod 360
By divide_by_2_mod_180_v1 on E, D, H, F, B, C we get angle(E, D, H) == angle(F, B, C) mod 360
By divide_by_2_mod_180_v1 on F, D, H, C, E, D we get angle(C, E, D) == angle(F, D, H) mod 360
By divide_by_2_mod_180_v1 on D, E, F, H, D, C we get angle(D, E, F) == angle(H, D, C) mod 360
By reverse_direction on F, B we get 180 == direction(F, B) - direction(B, F) mod 360
By divide_by_2_mod_180_v2 on H, D, B, D, E, B we get angle(H, D, B) == angle(D, E, B) + 180 mod 360
By divide_by_2_mod_180_v3 on B, C, E, I, F, B we get angle(B, C, E) == angle(I, F, B) + 180 mod 360
By divide_by_2_mod_180_v1 on F, D, E, H, C, E we get angle(F, D, E) == angle(H, C, E) mod 360
By divide_by_2_mod_180_v0 on E, D, F, E, C, H we get angle(E, C, H) == angle(E, D, F) mod 360
By divide_by_2_mod_180_v1 on A, F, E, D, C, E we get angle(A, F, E) == angle(D, C, E) mod 360
By divide_by_2_mod_180_v2 on A, F, B, D, C, A we get angle(A, F, B) == angle(D, C, A) + 180 mod 360
By divide_by_2_mod_180_v3 on B, D, H, B, E, D we get angle(B, D, H) == angle(B, E, D) + 180 mod 360
By in_imply_collinear on orthocenter(A, B, C), D, A we get collinear(A, D, orthocenter(A, B, C))
By divide_by_2_mod_180_v0 on E, C, B, E, F, A we get angle(E, C, B) == angle(E, F, A) mod 360
By divide_by_2_mod_180_v3 on B, D, H, F, E, D we get angle(B, D, H) == angle(F, E, D) + 180 mod 360
By divide_by_2_mod_180_v1 on E, A, D, H, E, D we get angle(E, A, D) == angle(H, E, D) mod 360
By divide_by_2_mod_180_v2 on A, C, B, E, F, D we get angle(A, C, B) == angle(E, F, D) + 180 mod 360
By in_imply_collinear on orthocenter(A, B, C), F, A we get collinear(A, F, orthocenter(A, B, C))
By divide_by_2_mod_180_v1 on E, A, D, E, D, H we get angle(E, A, D) == angle(E, D, H) mod 360
By collinear_definition on F, D, I we get D in Line(F, I), I in Line(D, F), Line(D, F) == Line(F, I), 0 == 2 * angle(D, F, I) mod 360
By divide_by_2_mod_180_v2 on A, E, D, F, D, H we get angle(A, E, D) == angle(F, D, H) + 180 mod 360
By divide_by_2_mod_180_v2 on A, F, B, D, C, E we get angle(A, F, B) == angle(D, C, E) + 180 mod 360
By divide_by_2_mod_180_v3 on B, D, E, B, E, H we get angle(B, D, E) == angle(B, E, H) + 180 mod 360
By aa_similarity on C, A, D, F, B, D we get similar_triangles(A, C, D, B, F, D)
By in_imply_collinear on orthocenter(A, B, C), B, F we get collinear(B, F, orthocenter(A, B, C))
By between_imply_segment_sum on D, F, A we get distance(A, D) == distance(D, F) + distance(A, F)
By divide_by_2_mod_180_v1 on A, D, E, H, C, A we get angle(A, D, E) == angle(H, C, A) mod 360
By divide_by_2_mod_180_v0 on B, F, D, E, C, D we get angle(B, F, D) == angle(E, C, D) mod 360
By divide_by_2_mod_180_v1 on D, E, B, B, C, H we get angle(B, C, H) == angle(D, E, B) mod 360
By divide_by_2_mod_180_v1 on D, C, A, D, F, B we get angle(D, C, A) == angle(D, F, B) mod 360
By divide_by_2_mod_180_v0 on F, E, D, H, C, B we get angle(F, E, D) == angle(H, C, B) mod 360
By divide_by_2_mod_180_v2 on E, C, B, B, F, I we get angle(E, C, B) == angle(B, F, I) + 180 mod 360
By divide_by_2_mod_180_v2 on A, C, B, B, F, I we get angle(A, C, B) == angle(B, F, I) + 180 mod 360
By divide_by_2_mod_180_v0 on I, A, C, H, D, E we get angle(H, D, E) == angle(I, A, C) mod 360
By divide_by_2_mod_180_v3 on B, C, A, A, F, B we get angle(B, C, A) == angle(A, F, B) + 180 mod 360
By divide_by_2_mod_180_v3 on B, F, A, A, C, B we get angle(B, F, A) == angle(A, C, B) + 180 mod 360
By divide_by_2_mod_180_v0 on H, D, F, D, E, C we get angle(D, E, C) == angle(H, D, F) mod 360
By divide_by_2_mod_180_v0 on F, A, C, H, D, E we get angle(F, A, C) == angle(H, D, E) mod 360
By divide_by_2_mod_180_v2 on D, F, E, D, C, E we get angle(D, F, E) == angle(D, C, E) + 180 mod 360
By divide_by_2_mod_180_v1 on H, E, D, E, B, D we get angle(E, B, D) == angle(H, E, D) mod 360
By divide_by_2_mod_180_v0 on H, C, D, B, E, D we get angle(B, E, D) == angle(H, C, D) mod 360
By divide_by_2_mod_180_v3 on H, E, A, E, D, A we get angle(H, E, A) == angle(E, D, A) + 180 mod 360
By divide_by_2_mod_180_v2 on I, F, B, D, C, A we get angle(I, F, B) == angle(D, C, A) + 180 mod 360
By divide_by_2_mod_180_v3 on D, C, E, A, F, B we get angle(D, C, E) == angle(A, F, B) + 180 mod 360
By divide_by_2_mod_180_v0 on C, D, H, F, E, D we get angle(C, D, H) == angle(F, E, D) mod 360
By divide_by_2_mod_180_v1 on A, D, E, C, E, H we get angle(A, D, E) == angle(C, E, H) mod 360
By divide_by_2_mod_180_v0 on I, A, C, D, E, H we get angle(D, E, H) == angle(I, A, C) mod 360
By divide_by_2_mod_180_v0 on D, E, H, D, A, C we get angle(D, A, C) == angle(D, E, H) mod 360
By aa_similarity on C, B, E, F, A, E we get similar_triangles(A, E, F, B, E, C)
By divide_by_2_mod_180_v0 on F, A, C, D, E, H we get angle(D, E, H) == angle(F, A, C) mod 360
By between_imply_segment_sum on B, F, E we get distance(B, E) == distance(B, F) + distance(E, F)
By divide_by_2_mod_180_v0 on H, E, C, E, D, A we get angle(E, D, A) == angle(H, E, C) mod 360
By divide_by_2_mod_180_v2 on B, E, H, B, D, E we get angle(B, E, H) == angle(B, D, E) + 180 mod 360
By divide_by_2_mod_180_v1 on E, D, C, H, E, B we get angle(E, D, C) == angle(H, E, B) mod 360
By divide_by_2_mod_180_v2 on I, F, B, B, C, E we get angle(I, F, B) == angle(B, C, E) + 180 mod 360
By divide_by_2_mod_180_v0 on A, C, D, E, F, A we get angle(A, C, D) == angle(E, F, A) mod 360
By divide_by_2_mod_180_v3 on A, D, E, A, E, H we get angle(A, D, E) == angle(A, E, H) + 180 mod 360
By divide_by_2_mod_180_v0 on D, A, C, H, D, E we get angle(D, A, C) == angle(H, D, E) mod 360
By divide_by_2_mod_180_v3 on H, E, B, E, D, B we get angle(H, E, B) == angle(E, D, B) + 180 mod 360
By divide_by_2_mod_180_v3 on E, F, D, E, C, D we get angle(E, F, D) == angle(E, C, D) + 180 mod 360
By divide_by_2_mod_180_v1 on H, C, A, F, D, E we get angle(F, D, E) == angle(H, C, A) mod 360
By divide_by_2_mod_180_v0 on H, C, D, F, E, D we get angle(F, E, D) == angle(H, C, D) mod 360
By divide_by_2_mod_180_v1 on A, D, H, C, E, D we get angle(A, D, H) == angle(C, E, D) mod 360
By divide_by_2_mod_180_v1 on C, A, I, E, D, H we get angle(C, A, I) == angle(E, D, H) mod 360
By divide_by_2_mod_180_v2 on A, F, B, B, C, A we get angle(A, F, B) == angle(B, C, A) + 180 mod 360
By divide_by_2_mod_180_v2 on F, E, D, B, D, H we get angle(F, E, D) == angle(B, D, H) + 180 mod 360
By divide_by_2_mod_180_v2 on H, D, F, D, E, A we get angle(H, D, F) == angle(D, E, A) + 180 mod 360
By divide_by_2_mod_180_v3 on B, C, E, A, F, B we get angle(B, C, E) == angle(A, F, B) + 180 mod 360
By divide_by_2_mod_180_v0 on H, D, E, F, A, E we get angle(F, A, E) == angle(H, D, E) mod 360
By divide_by_2_mod_180_v3 on E, F, D, A, C, D we get angle(E, F, D) == angle(A, C, D) + 180 mod 360
By divide_by_2_mod_180_v0 on H, D, E, C, B, F we get angle(C, B, F) == angle(H, D, E) mod 360
By divide_by_2_mod_180_v3 on D, C, A, D, F, E we get angle(D, C, A) == angle(D, F, E) + 180 mod 360
By divide_by_2_mod_180_v3 on B, F, I, E, C, B we get angle(B, F, I) == angle(E, C, B) + 180 mod 360
By divide_by_2_mod_180_v0 on H, E, C, E, D, F we get angle(E, D, F) == angle(H, E, C) mod 360
By divide_by_2_mod_180_v0 on B, F, D, A, C, B we get angle(A, C, B) == angle(B, F, D) mod 360
By divide_by_2_mod_180_v0 on H, C, B, B, E, D we get angle(B, E, D) == angle(H, C, B) mod 360
By divide_by_2_mod_180_v3 on B, F, A, E, C, B we get angle(B, F, A) == angle(E, C, B) + 180 mod 360
By divide_by_2_mod_180_v0 on D, E, H, D, A, E we get angle(D, A, E) == angle(D, E, H) mod 360
By divide_by_2_mod_180_v1 on E, A, I, E, D, H we get angle(E, A, I) == angle(E, D, H) mod 360
By divide_by_2_mod_180_v3 on B, F, I, A, C, B we get angle(B, F, I) == angle(A, C, B) + 180 mod 360
By divide_by_2_mod_180_v1 on B, C, A, I, F, E we get angle(B, C, A) == angle(I, F, E) mod 360
By divide_by_2_mod_180_v0 on H, D, E, C, B, E we get angle(C, B, E) == angle(H, D, E) mod 360
By divide_by_2_mod_180_v3 on A, D, H, A, E, D we get angle(A, D, H) == angle(A, E, D) + 180 mod 360
By divide_by_2_mod_180_v1 on I, F, E, D, C, A we get angle(D, C, A) == angle(I, F, E) mod 360
By divide_by_2_mod_180_v0 on H, D, E, D, B, E we get angle(D, B, E) == angle(H, D, E) mod 360
By divide_by_2_mod_180_v1 on F, B, D, H, E, D we get angle(F, B, D) == angle(H, E, D) mod 360
By divide_by_2_mod_180_v1 on B, C, E, A, F, E we get angle(A, F, E) == angle(B, C, E) mod 360
By between_imply_segment_sum on C, D, B we get distance(B, C) == distance(C, D) + distance(B, D)
By divide_by_2_mod_180_v2 on H, D, A, D, E, A we get angle(H, D, A) == angle(D, E, A) + 180 mod 360
By divide_by_2_mod_180_v2 on E, C, D, E, F, D we get angle(E, C, D) == angle(E, F, D) + 180 mod 360
By divide_by_2_mod_180_v0 on D, A, E, H, D, E we get angle(D, A, E) == angle(H, D, E) mod 360
By divide_by_2_mod_180_v1 on H, C, E, A, D, E we get angle(A, D, E) == angle(H, C, E) mod 360
By divide_by_2_mod_180_v1 on D, E, B, D, C, H we get angle(D, C, H) == angle(D, E, B) mod 360
By divide_by_2_mod_180_v1 on E, D, H, E, B, C we get angle(E, B, C) == angle(E, D, H) mod 360
By divide_by_2_mod_180_v0 on E, D, A, E, C, H we get angle(E, C, H) == angle(E, D, A) mod 360
By divide_by_2_mod_180_v1 on E, D, H, E, A, F we get angle(E, A, F) == angle(E, D, H) mod 360
By divide_by_2_mod_180_v1 on H, E, D, F, B, C we get angle(F, B, C) == angle(H, E, D) mod 360
By divide_by_2_mod_180_v3 on B, C, A, D, F, E we get angle(B, C, A) == angle(D, F, E) + 180 mod 360
By divide_by_2_mod_180_v3 on B, C, E, D, F, E we get angle(B, C, E) == angle(D, F, E) + 180 mod 360
By divide_by_2_mod_180_v1 on D, F, B, B, C, A we get angle(B, C, A) == angle(D, F, B) mod 360
By divide_by_2_mod_180_v2 on E, D, F, H, E, A we get angle(E, D, F) == angle(H, E, A) + 180 mod 360
By reverse_direction on F, E we get 180 == direction(F, E) - direction(E, F) mod 360
By aa_similarity on C, E, B, F, E, A we get similar_triangles(A, E, F, B, E, C)
By divide_by_2_mod_180_v3 on E, F, D, E, C, B we get angle(E, F, D) == angle(E, C, B) + 180 mod 360
By divide_by_2_mod_180_v2 on A, F, B, B, C, E we get angle(A, F, B) == angle(B, C, E) + 180 mod 360
By divide_by_2_mod_180_v0 on E, F, A, A, C, B we get angle(A, C, B) == angle(E, F, A) mod 360
By divide_by_2_mod_180_v0 on I, A, E, D, E, H we get angle(D, E, H) == angle(I, A, E) mod 360
By divide_by_2_mod_180_v3 on H, E, F, E, D, B we get angle(H, E, F) == angle(E, D, B) + 180 mod 360
By divide_by_2_mod_180_v2 on A, C, B, B, F, A we get angle(A, C, B) == angle(B, F, A) + 180 mod 360
By divide_by_2_mod_180_v3 on D, C, E, I, F, B we get angle(D, C, E) == angle(I, F, B) + 180 mod 360
By divide_by_2_mod_180_v0 on D, E, H, C, B, E we get angle(C, B, E) == angle(D, E, H) mod 360
By divide_by_2_mod_180_v1 on D, F, B, D, C, E we get angle(D, C, E) == angle(D, F, B) mod 360
By divide_by_2_mod_180_v3 on D, E, A, H, D, F we get angle(D, E, A) == angle(H, D, F) + 180 mod 360
By reverse_direction on E, F we get 180 == direction(E, F) - direction(F, E) mod 360
By collinear_definition on A, I, D we get I in Line(A, D), D in Line(A, I), Line(A, D) == Line(A, I), 0 == 2 * angle(I, A, D) mod 360
By divide_by_2_mod_180_v3 on B, F, A, A, C, D we get angle(B, F, A) == angle(A, C, D) + 180 mod 360
By aa_similarity on F, B, D, C, A, D we get similar_triangles(A, C, D, B, F, D)
By divide_by_2_mod_180_v2 on E, D, B, H, E, F we get angle(E, D, B) == angle(H, E, F) + 180 mod 360
By divide_by_2_mod_180_v0 on D, B, F, D, E, H we get angle(D, B, F) == angle(D, E, H) mod 360
By divide_by_2_mod_180_v2 on E, C, D, B, F, A we get angle(E, C, D) == angle(B, F, A) + 180 mod 360
By divide_by_2_mod_180_v2 on A, C, D, E, F, D we get angle(A, C, D) == angle(E, F, D) + 180 mod 360
By divide_by_2_mod_180_v3 on E, F, D, A, C, B we get angle(E, F, D) == angle(A, C, B) + 180 mod 360
By divide_by_2_mod_180_v1 on E, D, H, C, A, F we get angle(C, A, F) == angle(E, D, H) mod 360
By divide_by_2_mod_180_v2 on E, C, D, B, F, I we get angle(E, C, D) == angle(B, F, I) + 180 mod 360
By divide_by_2_mod_180_v0 on H, D, E, I, A, E we get angle(H, D, E) == angle(I, A, E) mod 360
By divide_by_2_mod_180_v3 on B, D, E, F, E, H we get angle(B, D, E) == angle(F, E, H) + 180 mod 360
By divide_by_2_mod_180_v1 on A, F, E, B, C, A we get angle(A, F, E) == angle(B, C, A) mod 360
By divide_by_2_mod_180_v3 on B, F, A, E, C, D we get angle(B, F, A) == angle(E, C, D) + 180 mod 360
By divide_by_2_mod_180_v2 on B, E, D, B, D, H we get angle(B, E, D) == angle(B, D, H) + 180 mod 360
By divide_by_2_mod_180_v3 on D, E, B, H, D, B we get angle(D, E, B) == angle(H, D, B) + 180 mod 360
By divide_by_2_mod_180_v0 on A, C, B, E, F, I we get angle(A, C, B) == angle(E, F, I) mod 360
By divide_by_2_mod_180_v3 on B, F, I, A, C, D we get angle(B, F, I) == angle(A, C, D) + 180 mod 360
By divide_by_2_mod_180_v0 on D, E, C, H, D, A we get angle(D, E, C) == angle(H, D, A) mod 360
By divide_by_2_mod_180_v2 on E, D, B, H, E, B we get angle(E, D, B) == angle(H, E, B) + 180 mod 360
By aa_similarity on F, D, B, C, D, A we get similar_triangles(A, C, D, B, F, D)
By divide_by_2_mod_180_v3 on D, C, A, I, F, B we get angle(D, C, A) == angle(I, F, B) + 180 mod 360
By divide_by_2_mod_180_v3 on H, E, A, E, D, F we get angle(H, E, A) == angle(E, D, F) + 180 mod 360
By divide_by_2_mod_180_v0 on F, E, H, C, D, E we get angle(C, D, E) == angle(F, E, H) mod 360
By divide_by_2_mod_180_v2 on E, C, B, B, F, A we get angle(E, C, B) == angle(B, F, A) + 180 mod 360
By divide_by_2_mod_180_v2 on A, E, D, A, D, H we get angle(A, E, D) == angle(A, D, H) + 180 mod 360
By divide_by_2_mod_180_v0 on E, D, F, A, C, H we get angle(A, C, H) == angle(E, D, F) mod 360
By divide_by_2_mod_180_v1 on B, C, E, I, F, E we get angle(B, C, E) == angle(I, F, E) mod 360
By divide_by_2_mod_180_v3 on D, E, A, H, D, A we get angle(D, E, A) == angle(H, D, A) + 180 mod 360
By divide_by_2_mod_180_v2 on D, F, E, D, C, A we get angle(D, F, E) == angle(D, C, A) + 180 mod 360
By divide_by_2_mod_180_v1 on D, C, A, A, F, E we get angle(A, F, E) == angle(D, C, A) mod 360
By divide_by_2_mod_180_v2 on D, F, E, B, C, A we get angle(D, F, E) == angle(B, C, A) + 180 mod 360
By aa_similarity on C, D, A, F, D, B we get similar_triangles(A, C, D, B, F, D)
By divide_by_2_mod_180_v2 on F, E, H, B, D, E we get angle(F, E, H) == angle(B, D, E) + 180 mod 360
By aa_anti_similarity on F, A, E, C, A, D we get anti_similar_triangles(A, C, D, A, F, E)
By collinear_definition on A, D, I we get D in Line(A, I), I in Line(A, D), Line(A, D) == Line(A, I), 0 == 2 * angle(D, A, I) mod 360
By divide_by_2_mod_180_v3 on F, D, E, A, E, H we get angle(F, D, E) == angle(A, E, H) + 180 mod 360
By between_imply_segment_sum on A, E, C we get distance(A, C) == distance(A, E) + distance(C, E)
By divide_by_2_mod_180_v2 on A, E, H, F, D, E we get angle(A, E, H) == angle(F, D, E) + 180 mod 360
By divide_by_2_mod_180_v2 on I, F, B, D, C, E we get angle(I, F, B) == angle(D, C, E) + 180 mod 360
By internal_angle_bisector_definition_v0 on I, D, I, A we get angle(D, A, I) == angle(I, A, D) mod 360
By divide_by_2_mod_180_v3 on B, F, I, E, C, D we get angle(B, F, I) == angle(E, C, D) + 180 mod 360
By aa_anti_similarity on F, E, A, C, D, A we get anti_similar_triangles(A, C, D, A, F, E)
By aa_similarity on F, A, E, C, B, E we get similar_triangles(A, E, F, B, E, C)
By divide_by_2_mod_180_v2 on A, E, H, A, D, E we get angle(A, E, H) == angle(A, D, E) + 180 mod 360
By aa_anti_similarity on C, A, D, F, A, E we get anti_similar_triangles(A, C, D, A, F, E)
By aa_anti_similarity on F, B, D, C, B, E we get anti_similar_triangles(B, C, E, B, F, D)
By internal_angle_bisector_definition_v0 on I, D, I, F we get angle(D, F, I) == angle(I, F, D) mod 360
By collinear_definition on F, I, D we get I in Line(D, F), D in Line(F, I), Line(D, F) == Line(F, I), 0 == 2 * angle(I, F, D) mod 360
By aa_similarity on F, E, A, C, E, B we get similar_triangles(A, E, F, B, E, C)
By aa_anti_similarity on C, D, A, F, E, A we get anti_similar_triangles(A, C, D, A, F, E)
By aa_anti_similarity on F, D, B, C, E, B we get anti_similar_triangles(B, C, E, B, F, D)
By aa_anti_similarity on C, B, E, F, B, D we get anti_similar_triangles(B, C, E, B, F, D)
By aa_anti_similarity on C, E, B, F, D, B we get anti_similar_triangles(B, C, E, B, F, D)
By reverse_direction on B, F we get 180 == direction(B, F) - direction(F, B) mod 360
By external_angle_bisector_definition_v0_r on A, B, A, D we get Line(B, D) == external_angle_bisector(A, D, A)
By internal_angle_bisector_definition_v0_r on D, F, D, A we get Line(A, F) == internal_angle_bisector(D, A, D)
By external_angle_bisector_definition_v0_r on A, F, A, E we get Line(E, F) == external_angle_bisector(A, E, A)
By external_angle_bisector_definition_v0_r on C, F, C, D we get Line(D, F) == external_angle_bisector(C, D, C)
By external_angle_bisector_definition_v0_r on B, C, F, E we get Line(C, E) == external_angle_bisector(B, E, F)
By internal_angle_bisector_definition_v0_r on E, F, E, B we get Line(B, F) == internal_angle_bisector(E, B, E)
By external_angle_bisector_definition_v0_r on B, A, B, E we get Line(A, E) == external_angle_bisector(B, E, B)
By external_angle_bisector_definition_v0_r on F, C, F, E we get Line(C, E) == external_angle_bisector(F, E, F)
By internal_angle_bisector_definition_v0_r on B, A, C, D we get Line(A, D) == internal_angle_bisector(B, D, C)
By external_angle_bisector_definition_v0_r on B, F, B, D we get Line(D, F) == external_angle_bisector(B, D, B)
By power_of_a_point_in_circle on E, Circle(A, E, F) we get 0 == power_of_a_point(E, Circle(A, E, F))
By external_angle_bisector_definition_v0_r on F, B, A, D we get Line(B, D) == external_angle_bisector(A, D, F)
By external_angle_bisector_definition_v0_r on B, A, B, D we get Line(A, D) == external_angle_bisector(B, D, B)
By internal_angle_bisector_definition_v0_r on C, A, C, E we get Line(A, E) == internal_angle_bisector(C, E, C)
By external_angle_bisector_definition_v0_r on A, C, A, D we get Line(C, D) == external_angle_bisector(A, D, A)
By external_angle_bisector_definition_v0_r on F, C, A, D we get Line(C, D) == external_angle_bisector(A, D, F)
By external_angle_bisector_definition_v0_r on I, A, D, F we get Line(A, F) == external_angle_bisector(D, F, I)
By external_angle_bisector_definition_v0_r on A, B, A, E we get Line(B, E) == external_angle_bisector(A, E, A)
By power_of_a_point_on_circle on A, Circle(A, B, E) we get 0 == power_of_a_point(A, Circle(A, B, E))
By external_angle_bisector_definition_v0_r on F, A, B, E we get Line(A, E) == external_angle_bisector(B, E, F)
By internal_angle_bisector_definition_v0_r on C, B, C, D we get Line(B, D) == internal_angle_bisector(C, D, C)
By external_angle_bisector_definition_v0_r on F, A, F, E we get Line(A, E) == external_angle_bisector(F, E, F)
By external_angle_bisector_definition_v0_r on F, B, F, D we get Line(B, D) == external_angle_bisector(F, D, F)
By external_angle_bisector_definition_v0_r on C, B, C, E we get Line(B, E) == external_angle_bisector(C, E, C)
By external_angle_bisector_definition_v0_r on C, F, C, E we get Line(E, F) == external_angle_bisector(C, E, C)
By internal_angle_bisector_definition_v0_r on B, F, B, E we get Line(E, F) == internal_angle_bisector(B, E, B)
By collinear_definition on D, A, I we get A in Line(D, I), I in Line(A, D), Line(A, D) == Line(D, I), 0 == 2 * angle(A, D, I) mod 360
By internal_angle_bisector_definition_v0_r on E, C, E, A we get Line(A, C) == internal_angle_bisector(E, A, E)
By power_of_a_point_on_circle on B, Circle(A, B, E) we get 0 == power_of_a_point(B, Circle(A, B, E))
By external_angle_bisector_definition_v0_r on B, C, B, E we get Line(C, E) == external_angle_bisector(B, E, B)
By internal_angle_bisector_definition_v0_r on F, A, F, D we get Line(A, D) == internal_angle_bisector(F, D, F)
By external_angle_bisector_definition_v0_r on C, A, C, D we get Line(A, D) == external_angle_bisector(C, D, C)
By perpendicular_angle_conditions_v0 on I, D, C we get angle(I, D, C) == orientation(C, I, D) mod 360
By internal_angle_bisector_definition_v0 on A, D, A, I we get angle(A, I, D) == angle(D, I, A) mod 360
By internal_angle_bisector_definition_v0_r on A, F, A, D we get Line(D, F) == internal_angle_bisector(A, D, A)
By internal_angle_bisector_definition_v0_r on C, B, A, E we get Line(B, E) == internal_angle_bisector(A, E, C)
By internal_angle_bisector_definition_v0 on F, D, F, I we get angle(D, I, F) == angle(F, I, D) mod 360
By internal_angle_bisector_definition_v0_r on B, C, B, D we get Line(C, D) == internal_angle_bisector(B, D, B)
By internal_angle_bisector_definition_v0_r on D, C, D, B we get Line(B, C) == internal_angle_bisector(D, B, D)
By internal_angle_bisector_definition_v0_r on A, F, C, E we get Line(E, F) == internal_angle_bisector(A, E, C)
By internal_angle_bisector_definition_v0_r on F, B, F, E we get Line(B, E) == internal_angle_bisector(F, E, F)
By collinear_definition on D, I, A we get I in Line(A, D), A in Line(D, I), Line(A, D) == Line(D, I), 0 == 2 * angle(I, D, A) mod 360
By collinear_definition on D, F, I we get F in Line(D, I), I in Line(D, F), Line(D, F) == Line(D, I), 0 == 2 * angle(F, D, I) mod 360
By internal_angle_bisector_definition_v0_r on A, E, A, C we get Line(C, E) == internal_angle_bisector(A, C, A)
By internal_angle_bisector_definition_v0_r on E, A, E, C we get Line(A, C) == internal_angle_bisector(E, C, E)
By perpendicular_angle_conditions_v0 on I, D, B we get angle(I, D, B) == orientation(B, I, D) mod 360
By perpendicular_angle_conditions_v0 on B, D, I we get angle(B, D, I) == orientation(B, D, I) mod 360
By collinear_definition on I, D, A we get D in Line(A, I), A in Line(D, I), Line(A, I) == Line(D, I), 0 == 2 * angle(D, I, A) mod 360
By power_of_a_point_on_circle on D, Circle(A, B, D) we get 0 == power_of_a_point(D, Circle(A, B, D))
By internal_angle_bisector_definition_v0_r on B, F, C, D we get Line(D, F) == internal_angle_bisector(B, D, C)
By internal_angle_bisector_definition_v0_r on I, F, D, A we get Line(A, F) == internal_angle_bisector(D, A, I)
By power_of_a_point_in_circle on E, Circle(A, B, E) we get 0 == power_of_a_point(E, Circle(A, B, E))
By power_of_a_point_in_circle on B, Circle(A, B, D) we get 0 == power_of_a_point(B, Circle(A, B, D))
By internal_angle_bisector_definition_v0_r on B, D, B, C we get Line(C, D) == internal_angle_bisector(B, C, B)
By collinear_definition on I, D, F we get D in Line(F, I), F in Line(D, I), Line(D, I) == Line(F, I), 0 == 2 * angle(D, I, F) mod 360
By internal_angle_bisector_definition_v0_r on E, B, E, F we get Line(B, F) == internal_angle_bisector(E, F, E)
By collinear_definition on D, I, F we get I in Line(D, F), F in Line(D, I), Line(D, F) == Line(D, I), 0 == 2 * angle(I, D, F) mod 360
By internal_angle_bisector_definition_v0_r on D, A, D, F we get Line(A, F) == internal_angle_bisector(D, F, D)
By power_of_a_point_in_circle on A, Circle(A, E, F) we get 0 == power_of_a_point(A, Circle(A, E, F))
By collinear_definition on I, A, D we get A in Line(D, I), D in Line(A, I), Line(A, I) == Line(D, I), 0 == 2 * angle(A, I, D) mod 360
By perpendicular_angle_conditions_v0 on C, D, I we get angle(C, D, I) == orientation(C, D, I) mod 360
By internal_angle_bisector_definition_v0_r on F, E, F, B we get Line(B, E) == internal_angle_bisector(F, B, F)
By internal_angle_bisector_definition_v0_r on A, C, A, E we get Line(C, E) == internal_angle_bisector(A, E, A)
By external_angle_bisector_definition_v0_r on F, C, F, D we get Line(C, D) == external_angle_bisector(F, D, F)
By internal_angle_bisector_definition_v0_r on B, E, B, F we get Line(E, F) == internal_angle_bisector(B, F, B)
By power_of_a_point_in_circle on F, Circle(A, E, F) we get 0 == power_of_a_point(F, Circle(A, E, F))
By power_of_a_point_in_circle on A, Circle(A, B, D) we get 0 == power_of_a_point(A, Circle(A, B, D))
By internal_angle_bisector_definition_v0_r on D, B, D, C we get Line(B, C) == internal_angle_bisector(D, C, D)
By collinear_definition on I, F, D we get F in Line(D, I), D in Line(F, I), Line(D, I) == Line(F, I), 0 == 2 * angle(F, I, D) mod 360
By internal_angle_bisector_definition_v0_r on C, E, C, A we get Line(A, E) == internal_angle_bisector(C, A, C)
By internal_angle_bisector_definition_v0_r on C, D, C, B we get Line(B, D) == internal_angle_bisector(C, B, C)
By perpendicular_lines_draw_intersection on altitude(C, A, B), Line(A, B) we get exists(line_intersection(Line(A, B), altitude(C, A, B)))
By altitude_definition on B, I, D, f we get f == altitude(B, D, I)
By altitude_definition on C, I, D, f we get f == altitude(C, D, I)
By altitude_definition on orthocenter(A, B, C), E, A, i we get i == altitude(orthocenter(A, B, C), A, E)
By power_of_a_point_definition on G, A, B, Circle(A, B, D) we get log(distance(A, G)) + log(distance(B, G)) == log(power_of_a_point(G, Circle(A, B, D)))
By altitude_definition on orthocenter(A, B, C), B, G, altitude(C, A, B) we get altitude(C, A, B) == altitude(orthocenter(A, B, C), B, G)
By altitude_definition on orthocenter(A, B, C), C, D, h we get h == altitude(orthocenter(A, B, C), C, D)
By altitude_definition on orthocenter(A, B, C), D, B, h we get h == altitude(orthocenter(A, B, C), B, D)
By sas_similarity on I, A, G, F, A, B we get similar_triangles(A, B, F, A, G, I)
By altitude_definition on orthocenter(A, B, C), C, B, h we get h == altitude(orthocenter(A, B, C), B, C)
By sas_similarity on G, A, I, B, A, F we get similar_triangles(A, B, F, A, G, I)
By altitude_definition on orthocenter(A, B, C), A, G, altitude(C, A, B) we get altitude(C, A, B) == altitude(orthocenter(A, B, C), A, G)
By altitude_definition on orthocenter(A, B, C), A, B, altitude(C, A, B) we get altitude(C, A, B) == altitude(orthocenter(A, B, C), A, B)
By sas_similarity on F, A, B, I, A, G we get similar_triangles(A, B, F, A, G, I)
By altitude_definition on C, G, B, altitude(C, A, B) we get altitude(C, A, B) == altitude(C, B, G)
By power_of_a_point_definition on G, B, A, Circle(A, B, E) we get log(distance(B, G)) + log(distance(A, G)) == log(power_of_a_point(G, Circle(A, B, E)))
By sas_similarity on B, A, F, G, A, I we get similar_triangles(A, B, F, A, G, I)
By altitude_definition on C, G, A, altitude(C, A, B) we get altitude(C, A, B) == altitude(C, A, G)
By altitude_definition on orthocenter(A, B, C), E, C, i we get i == altitude(orthocenter(A, B, C), C, E)
By power_of_a_point_definition on I, A, F, Circle(A, E, F) we get log(distance(A, I)) + log(distance(F, I)) == log(power_of_a_point(I, Circle(A, E, F)))
By altitude_definition on orthocenter(A, B, C), C, A, i we get i == altitude(orthocenter(A, B, C), A, C)
By anti_similar_triangle_basic_properties on F, B, D, F, A, E we get angle(F, B, D) == 0 - angle(F, A, E) mod 360, angle(B, D, F) == 0 - angle(A, E, F) mod 360, angle(D, F, B) == 0 - angle(E, F, A) mod 360, log(distance(A, F)) + log(distance(B, D)) == log(distance(B, F)) + log(distance(A, E)), log(distance(A, E)) + log(distance(D, F)) == log(distance(B, D)) + log(distance(E, F)), log(distance(D, F)) + log(distance(A, F)) == log(distance(E, F)) + log(distance(B, F))
By anti_similar_triangle_basic_properties on C, E, H, E, C, H we get angle(C, E, H) == 0 - angle(E, C, H) mod 360, angle(E, H, C) == 0 - angle(C, H, E) mod 360, angle(H, C, E) == 0 - angle(H, E, C) mod 360, log(distance(C, E)) + log(distance(C, H)) == log(distance(C, E)) + log(distance(E, H)), log(distance(C, H)) + log(distance(C, H)) == log(distance(E, H)) + log(distance(E, H)), log(distance(C, H)) + log(distance(C, E)) == log(distance(E, H)) + log(distance(C, E))
By anti_similar_triangle_basic_properties on D, H, E, E, H, D we get angle(D, H, E) == 0 - angle(E, H, D) mod 360, angle(H, E, D) == 0 - angle(H, D, E) mod 360, angle(E, D, H) == 0 - angle(D, E, H) mod 360, log(distance(D, H)) + log(distance(D, H)) == log(distance(E, H)) + log(distance(E, H)), log(distance(D, H)) + log(distance(D, E)) == log(distance(E, H)) + log(distance(D, E)), log(distance(D, E)) + log(distance(D, H)) == log(distance(D, E)) + log(distance(E, H))
By anti_similar_triangle_basic_properties on E, A, F, D, B, F we get angle(E, A, F) == 0 - angle(D, B, F) mod 360, angle(A, F, E) == 0 - angle(B, F, D) mod 360, angle(F, E, A) == 0 - angle(F, D, B) mod 360, log(distance(A, E)) + log(distance(B, F)) == log(distance(B, D)) + log(distance(A, F)), log(distance(A, F)) + log(distance(D, F)) == log(distance(B, F)) + log(distance(E, F)), log(distance(D, F)) + log(distance(A, E)) == log(distance(E, F)) + log(distance(B, D))
By anti_similar_triangle_basic_properties on D, H, C, C, H, D we get angle(D, H, C) == 0 - angle(C, H, D) mod 360, angle(H, C, D) == 0 - angle(H, D, C) mod 360, angle(C, D, H) == 0 - angle(D, C, H) mod 360, log(distance(C, H)) + log(distance(C, H)) == log(distance(D, H)) + log(distance(D, H)), log(distance(C, H)) + log(distance(C, D)) == log(distance(D, H)) + log(distance(C, D)), log(distance(C, D)) + log(distance(C, H)) == log(distance(C, D)) + log(distance(D, H))
By power_of_a_point_definition on C, E, A, Circle(A, B, E) we get log(distance(C, E)) + log(distance(A, C)) == log(power_of_a_point(C, Circle(A, B, E)))
By power_of_a_point_definition on F, A, D, Circle(A, B, D) we get log(distance(A, F)) + log(distance(D, F)) == log(power_of_a_point(F, Circle(A, B, D)))
By power_of_a_point_definition on C, E, A, Circle(A, E, F) we get log(distance(C, E)) + log(distance(A, C)) == log(power_of_a_point(C, Circle(A, E, F)))
By power_of_a_point_definition on I, D, A, Circle(A, B, D) we get log(distance(D, I)) + log(distance(A, I)) == log(power_of_a_point(I, Circle(A, B, D)))
By power_of_a_point_definition on C, D, B, Circle(A, B, D) we get log(distance(C, D)) + log(distance(B, C)) == log(power_of_a_point(C, Circle(A, B, D)))
By anti_similar_triangle_basic_properties on C, E, B, C, D, A we get angle(C, E, B) == 0 - angle(C, D, A) mod 360, angle(E, B, C) == 0 - angle(D, A, C) mod 360, angle(B, C, E) == 0 - angle(A, C, D) mod 360, log(distance(C, D)) + log(distance(B, E)) == log(distance(C, E)) + log(distance(A, D)), log(distance(A, D)) + log(distance(B, C)) == log(distance(B, E)) + log(distance(A, C)), log(distance(A, C)) + log(distance(C, E)) == log(distance(B, C)) + log(distance(C, D))
By anti_similar_triangle_basic_properties on D, C, A, E, C, B we get angle(D, C, A) == 0 - angle(E, C, B) mod 360, angle(C, A, D) == 0 - angle(C, B, E) mod 360, angle(A, D, C) == 0 - angle(B, E, C) mod 360, log(distance(C, D)) + log(distance(B, C)) == log(distance(C, E)) + log(distance(A, C)), log(distance(A, C)) + log(distance(B, E)) == log(distance(B, C)) + log(distance(A, D)), log(distance(A, D)) + log(distance(C, E)) == log(distance(B, E)) + log(distance(C, D))
By power_of_a_point_definition on D, A, F, Circle(A, E, F) we get log(distance(A, D)) + log(distance(D, F)) == log(power_of_a_point(D, Circle(A, E, F)))
By power_of_a_point_definition on F, E, B, Circle(A, B, E) we get log(distance(E, F)) + log(distance(B, F)) == log(power_of_a_point(F, Circle(A, B, E)))
By power_of_a_point_definition on B, F, E, Circle(A, E, F) we get log(distance(B, F)) + log(distance(B, E)) == log(power_of_a_point(B, Circle(A, E, F)))
By radical_axis_is_perpendicular_to_center_line on g, Circle(A, B, E), Circle(A, E, F) we get perpendicular(g, Line(center(Circle(A, B, E)), center(Circle(A, E, F))))
By line_definition on orthocenter(B, C, F), I, h we get h == Line(I, orthocenter(B, C, F))
By line_definition on orthocenter(A, C, F), A, Line(A, B) we get Line(A, B) == Line(A, orthocenter(A, C, F))
By line_definition on orthocenter(A, B, F), orthocenter(A, C, F), f we get f == Line(orthocenter(A, B, F), orthocenter(A, C, F))
By line_definition on orthocenter(A, B, F), line_intersection(Line(A, B), Line(C, F)), Line(C, F) we get Line(C, F) == Line(orthocenter(A, B, F), line_intersection(Line(A, B), Line(C, F)))
By line_definition on orthocenter(B, C, F), E, g we get g == Line(E, orthocenter(B, C, F))
By line_definition on orthocenter(A, B, F), F, Line(C, F) we get Line(C, F) == Line(F, orthocenter(A, B, F))
By line_definition on D, orthocenter(B, C, F), h we get h == Line(D, orthocenter(B, C, F))
By line_intersection_definition on orthocenter(B, C, F), Line(A, B), h we get orthocenter(B, C, F) == line_intersection(h, Line(A, B))
By line_definition on line_intersection(Line(A, B), Line(C, F)), G, Line(A, B) we get Line(A, B) == Line(G, line_intersection(Line(A, B), Line(C, F)))
By line_definition on D, orthocenter(A, C, F), f we get f == Line(D, orthocenter(A, C, F))
By line_definition on E, orthocenter(A, B, F), g we get g == Line(E, orthocenter(A, B, F))
By line_definition on B, orthocenter(A, B, F), f we get f == Line(B, orthocenter(A, B, F))
By line_definition on C, line_intersection(Line(A, B), Line(C, F)), Line(C, F) we get Line(C, F) == Line(C, line_intersection(Line(A, B), Line(C, F)))
By line_intersection_definition on orthocenter(A, C, F), Line(A, B), f we get orthocenter(A, C, F) == line_intersection(f, Line(A, B))
By line_intersection_definition on orthocenter(A, C, F), i, f we get orthocenter(A, C, F) == line_intersection(f, i)
By concurrent_sufficient_conditions on i, Line(C, F), h we get concurrent(h, i, Line(C, F))
By line_definition on F, orthocenter(B, C, F), h we get h == Line(F, orthocenter(B, C, F))
By line_definition on G, orthocenter(A, C, F), Line(A, B) we get Line(A, B) == Line(G, orthocenter(A, C, F))
By line_intersection_definition on orthocenter(A, B, F), Line(C, F), f we get orthocenter(A, B, F) == line_intersection(f, Line(C, F))
By concurrent_sufficient_conditions on f, Line(C, F), g we get concurrent(f, g, Line(C, F))
By line_intersection_definition on orthocenter(B, C, F), Line(A, B), g we get orthocenter(B, C, F) == line_intersection(g, Line(A, B))
By line_definition on F, line_intersection(Line(A, B), Line(C, F)), Line(C, F) we get Line(C, F) == Line(F, line_intersection(Line(A, B), Line(C, F)))
By line_definition on line_intersection(Line(A, B), Line(C, F)), orthocenter(B, C, F), Line(A, B) we get Line(A, B) == Line(orthocenter(B, C, F), line_intersection(Line(A, B), Line(C, F)))
By concurrent_sufficient_conditions on i, h, Line(C, F) we get concurrent(h, i, Line(C, F))
By line_intersection_definition on orthocenter(B, C, F), g, h we get orthocenter(B, C, F) == line_intersection(g, h)
By line_definition on orthocenter(A, C, F), orthocenter(B, C, F), Line(A, B) we get Line(A, B) == Line(orthocenter(A, C, F), orthocenter(B, C, F))
By line_definition on orthocenter(B, C, F), G, Line(A, B) we get Line(A, B) == Line(G, orthocenter(B, C, F))
By line_intersection_definition on orthocenter(A, B, F), g, Line(C, F) we get orthocenter(A, B, F) == line_intersection(g, Line(C, F))
By line_definition on B, orthocenter(B, C, F), Line(A, B) we get Line(A, B) == Line(B, orthocenter(B, C, F))
By line_intersection_definition on orthocenter(A, C, F), i, Line(A, B) we get orthocenter(A, C, F) == line_intersection(i, Line(A, B))
By line_definition on orthocenter(A, B, F), orthocenter(B, C, F), g we get g == Line(orthocenter(A, B, F), orthocenter(B, C, F))
By line_intersection_definition on orthocenter(A, B, F), g, f we get orthocenter(A, B, F) == line_intersection(f, g)
By concurrent_sufficient_conditions on Line(C, F), h, i we get concurrent(h, i, Line(C, F))
By line_definition on D, orthocenter(A, B, F), f we get f == Line(D, orthocenter(A, B, F))
By line_definition on C, orthocenter(A, C, F), f we get f == Line(C, orthocenter(A, C, F))
By line_definition on orthocenter(A, C, F), line_intersection(Line(A, B), Line(C, F)), Line(A, B) we get Line(A, B) == Line(orthocenter(A, C, F), line_intersection(Line(A, B), Line(C, F)))
By line_definition on B, line_intersection(Line(A, B), Line(C, F)), Line(A, B) we get Line(A, B) == Line(B, line_intersection(Line(A, B), Line(C, F)))
By line_definition on orthocenter(B, C, F), C, g we get g == Line(C, orthocenter(B, C, F))
By concurrent_sufficient_conditions on h, i, Line(C, F) we get concurrent(h, i, Line(C, F))
By line_definition on F, orthocenter(A, C, F), i we get i == Line(F, orthocenter(A, C, F))
By line_definition on orthocenter(A, C, F), E, i we get i == Line(E, orthocenter(A, C, F))
By concurrent_sufficient_conditions on g, f, Line(C, F) we get concurrent(f, g, Line(C, F))
By concurrent_sufficient_conditions on Line(C, F), f, g we get concurrent(f, g, Line(C, F))
By concurrent_sufficient_conditions on g, Line(C, F), f we get concurrent(f, g, Line(C, F))
By concurrent_sufficient_conditions on Line(C, F), g, f we get concurrent(f, g, Line(C, F))
By line_definition on orthocenter(A, B, F), A, g we get g == Line(A, orthocenter(A, B, F))
By concurrent_sufficient_conditions on h, Line(C, F), i we get concurrent(h, i, Line(C, F))
By line_definition on A, line_intersection(Line(A, B), Line(C, F)), Line(A, B) we get Line(A, B) == Line(A, line_intersection(Line(A, B), Line(C, F)))
By concurrent_sufficient_conditions on Line(C, F), i, h we get concurrent(h, i, Line(C, F))
By concurrent_sufficient_conditions on f, g, Line(C, F) we get concurrent(f, g, Line(C, F))
By perpendicular_line_definition on orthocenter(B, C, F), Line(A, B), Line(C, F) we get Line(A, B) == perpendicular_line(orthocenter(B, C, F), Line(C, F))
By line_intersection_definition on D, Line(D, H), Line(D, G) we get D == line_intersection(Line(D, G), Line(D, H))
By median_definition on E, A, B, Line(E, G) we get Line(E, G) == median(E, A, B)
By line_intersection_definition on E, i, Line(E, I) we get E == line_intersection(i, Line(E, I))
By line_intersection_definition on E, Line(E, G), Line(E, I) we get E == line_intersection(Line(E, G), Line(E, I))
By line_intersection_definition on E, Line(E, G), Line(D, E) we get E == line_intersection(Line(D, E), Line(E, G))
By line_intersection_definition on G, Line(G, I), Line(D, G) we get G == line_intersection(Line(D, G), Line(G, I))
By line_intersection_definition on G, Line(E, G), Line(D, G) we get G == line_intersection(Line(D, G), Line(E, G))
By median_definition on I, A, B, Line(G, I) we get Line(G, I) == median(I, A, B)
By median_definition on E, F, A, Line(E, I) we get Line(E, I) == median(E, A, F)
By line_intersection_definition on E, Line(E, H), Line(E, G) we get E == line_intersection(Line(E, G), Line(E, H))
By line_intersection_definition on D, Line(D, G), f we get D == line_intersection(f, Line(D, G))
By line_intersection_definition on D, h, Line(D, G) we get D == line_intersection(h, Line(D, G))
By line_intersection_definition on G, Line(E, G), Line(A, B) we get G == line_intersection(Line(A, B), Line(E, G))
By median_definition on D, A, B, Line(D, G) we get Line(D, G) == median(D, A, B)
By line_intersection_definition on D, Line(D, G), Line(D, E) we get D == line_intersection(Line(D, E), Line(D, G))
By line_intersection_definition on E, Line(E, G), g we get E == line_intersection(g, Line(E, G))
By line_intersection_definition on I, h, Line(G, I) we get I == line_intersection(h, Line(G, I))
By line_intersection_definition on I, Line(E, I), h we get I == line_intersection(h, Line(E, I))
By line_intersection_definition on E, Line(E, H), Line(E, I) we get E == line_intersection(Line(E, H), Line(E, I))
By line_intersection_definition on E, Line(E, I), g we get E == line_intersection(g, Line(E, I))
By line_intersection_definition on I, Line(E, I), Line(G, I) we get I == line_intersection(Line(E, I), Line(G, I))
By perpendicular_line_definition on orthocenter(A, C, F), i, g we get i == perpendicular_line(orthocenter(A, C, F), g)
By line_intersection_definition on E, Line(E, I), Line(D, E) we get E == line_intersection(Line(D, E), Line(E, I))
By perpendicular_line_definition on orthocenter(B, C, F), g, i we get g == perpendicular_line(orthocenter(B, C, F), i)
By line_intersection_definition on G, Line(E, G), Line(G, I) we get G == line_intersection(Line(E, G), Line(G, I))
By perpendicular_line_definition on orthocenter(A, B, F), Line(C, F), Line(A, B) we get Line(C, F) == perpendicular_line(orthocenter(A, B, F), Line(A, B))
By perpendicular_line_definition on orthocenter(A, C, F), f, h we get f == perpendicular_line(orthocenter(A, C, F), h)
By perpendicular_line_definition on orthocenter(B, C, F), h, f we get h == perpendicular_line(orthocenter(B, C, F), f)
By line_intersection_definition on G, Line(A, B), Line(G, I) we get G == line_intersection(Line(A, B), Line(G, I))
By perpendicular_line_definition on orthocenter(A, C, F), Line(A, B), Line(C, F) we get Line(A, B) == perpendicular_line(orthocenter(A, C, F), Line(C, F))
By perpendicular_line_definition on orthocenter(A, B, F), f, h we get f == perpendicular_line(orthocenter(A, B, F), h)
By line_intersection_definition on G, Line(D, G), Line(A, B) we get G == line_intersection(Line(A, B), Line(D, G))
By line_intersection_definition on E, Line(E, G), i we get E == line_intersection(i, Line(E, G))
By perpendicular_line_definition on line_intersection(Line(A, B), Line(C, F)), Line(A, B), Line(C, F) we get Line(A, B) == perpendicular_line(line_intersection(Line(A, B), Line(C, F)), Line(C, F))
By median_definition on G, F, A, Line(G, I) we get Line(G, I) == median(G, A, F)
By perpendicular_line_definition on line_intersection(Line(A, B), Line(C, F)), Line(C, F), Line(A, B) we get Line(C, F) == perpendicular_line(line_intersection(Line(A, B), Line(C, F)), Line(A, B))
By perpendicular_line_definition on orthocenter(A, B, F), g, i we get g == perpendicular_line(orthocenter(A, B, F), i)
By line_unique_intersection on g, f, orthocenter(A, B, F), C we get C == orthocenter(A, B, F)
By line_unique_intersection on g, h, orthocenter(B, C, F), A we get A == orthocenter(B, C, F)
By line_unique_intersection on Line(A, B), f, orthocenter(A, C, F), B we get B == orthocenter(A, C, F)
By circle_radius_v0 on E, Circle(A, B, D) we get E in Circle(A, B, D)
By circle_radius_v0 on D, Circle(A, B, E) we get D in Circle(A, B, E)
By same_angle_v2 on I, A, D, G we get angle(A, I, G) == angle(D, I, G) + 180 mod 360
By perpendicular_direction_conditions_v0 on G, I, E, A we get perpendicular(Line(A, E), Line(G, I))
By perpendicular_direction_conditions_v0 on G, I, C, A we get perpendicular(Line(A, C), Line(G, I))
By same_angle_v0 on I, F, D, E we get angle(D, I, E) == angle(F, I, E) mod 360
By same_angle_v3 on I, D, A, E we get angle(D, I, E) == angle(A, I, E) + 180 mod 360
By perpendicular_direction_conditions_v0 on G, I, C, E we get perpendicular(Line(C, E), Line(G, I))
By same_angle_v1 on I, F, D, G we get angle(D, I, G) == angle(F, I, G) mod 360
By same_angle_v3 on G, B, A, I we get angle(B, G, I) == angle(A, G, I) + 180 mod 360
By same_angle_v2 on I, A, F, G we get angle(A, I, G) == angle(F, I, G) + 180 mod 360
By between_imply_not_between on I, F, D we get collinear_and_not_between(D, I, F)
By between_imply_not_between on D, I, A we get collinear_and_not_between(A, D, I)
By between_imply_not_between on D, F, I we get collinear_and_not_between(F, D, I)
By between_imply_not_between on A, I, D we get collinear_and_not_between(D, A, I)
By circle_by_three_points_and_center on G, A, D, E we get G == center(Circle(A, D, E))
By circle_by_three_points_and_center on G, B, E, D we get G == center(Circle(B, D, E))
By same_angle_v1 on E, B, F, I we get angle(B, E, I) == angle(F, E, I) mod 360
By same_angle_v3 on F, B, E, C we get angle(B, F, C) == angle(E, F, C) + 180 mod 360
By same_angle_v3 on E, A, C, G we get angle(A, E, G) == angle(C, E, G) + 180 mod 360
By perpendicular_direction_conditions_v0_r on A, B, C, F we get 180 == 2 * direction(A, B) - 2 * direction(C, F) mod 360
By same_angle_v0 on C, A, E, F we get angle(A, C, F) == angle(E, C, F) mod 360
By same_angle_v1 on C, D, B, F we get angle(B, C, F) == angle(D, C, F) mod 360
By same_angle_v1 on F, A, I, C we get angle(A, F, C) == angle(I, F, C) mod 360
By same_angle_v0 on D, A, F, G we get angle(A, D, G) == angle(F, D, G) mod 360
By same_angle_v0 on D, F, I, G we get angle(F, D, G) == angle(I, D, G) mod 360
By same_angle_v2 on E, A, C, I we get angle(A, E, I) == angle(C, E, I) + 180 mod 360
By same_angle_v0 on D, A, I, G we get angle(A, D, G) == angle(I, D, G) mod 360
By in_imply_collinear on orthocenter(A, B, F), C, B we get collinear(B, C, orthocenter(A, B, F))
By same_angle_v1 on E, F, B, G we get angle(B, E, G) == angle(F, E, G) mod 360
By perpendicular_direction_conditions_v0_r on G, A, C, F we get 180 == 2 * direction(G, A) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on A, G, C, F we get 180 == 2 * direction(A, G) - 2 * direction(C, F) mod 360
By same_angle_v2 on F, D, I, C we get angle(D, F, C) == angle(I, F, C) + 180 mod 360
By same_angle_v2 on F, D, A, C we get angle(D, F, C) == angle(A, F, C) + 180 mod 360
By same_angle_v3 on D, C, B, G we get angle(C, D, G) == angle(B, D, G) + 180 mod 360
By perpendicular_direction_conditions_v0_r on F, C, B, G we get 180 == 2 * direction(F, C) - 2 * direction(B, G) mod 360
By in_imply_collinear on orthocenter(B, C, F), I, A we get collinear(A, I, orthocenter(B, C, F))
By in_imply_collinear on orthocenter(A, B, F), D, B we get collinear(B, D, orthocenter(A, B, F))
By perpendicular_direction_conditions_v0_r on C, F, B, G we get 180 == 2 * direction(C, F) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on C, F, G, A we get 180 == 2 * direction(C, F) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on B, A, F, C we get 180 == 2 * direction(B, A) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on C, F, A, B we get 180 == 2 * direction(C, F) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on F, C, A, B we get 180 == 2 * direction(F, C) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on F, C, A, G we get 180 == 2 * direction(F, C) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on A, B, F, C we get 180 == 2 * direction(A, B) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on A, G, F, C we get 180 == 2 * direction(A, G) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on C, F, A, G we get 180 == 2 * direction(C, F) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on G, B, C, F we get 180 == 2 * direction(G, B) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on C, F, B, A we get 180 == 2 * direction(C, F) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on F, C, B, A we get 180 == 2 * direction(F, C) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on B, A, C, F we get 180 == 2 * direction(B, A) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on C, F, G, B we get 180 == 2 * direction(C, F) - 2 * direction(G, B) mod 360
By in_imply_collinear on line_intersection(Line(A, B), Line(C, F)), G, A we get collinear(A, G, line_intersection(Line(A, B), Line(C, F)))
By perpendicular_direction_conditions_v0_r on G, B, F, C we get 180 == 2 * direction(G, B) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on G, A, F, C we get 180 == 2 * direction(G, A) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on B, G, F, C we get 180 == 2 * direction(B, G) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on B, G, C, F we get 180 == 2 * direction(B, G) - 2 * direction(C, F) mod 360
By similar_triangle_basic_properties on E, C, B, E, F, A we get angle(E, C, B) == angle(E, F, A) mod 360, angle(C, B, E) == angle(F, A, E) mod 360, angle(A, E, F) == angle(B, E, C) mod 360, log(distance(C, E)) + log(distance(A, F)) == log(distance(E, F)) + log(distance(B, C)), log(distance(A, F)) + log(distance(B, E)) == log(distance(B, C)) + log(distance(A, E)), log(distance(A, E)) + log(distance(C, E)) == log(distance(B, E)) + log(distance(E, F))
By perpendicular_direction_conditions_v0_r on F, C, G, B we get 180 == 2 * direction(F, C) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on F, C, G, A we get 180 == 2 * direction(F, C) - 2 * direction(G, A) mod 360
By in_imply_collinear on orthocenter(A, B, F), C, F we get collinear(C, F, orthocenter(A, B, F))
By in_imply_collinear on line_intersection(Line(A, B), Line(C, F)), C, F we get collinear(C, F, line_intersection(Line(A, B), Line(C, F)))
By in_imply_collinear on orthocenter(B, C, F), B, G we get collinear(B, G, orthocenter(B, C, F))
By in_imply_collinear on orthocenter(A, C, F), D, C we get collinear(C, D, orthocenter(A, C, F))
By in_imply_collinear on orthocenter(B, C, F), I, D we get collinear(D, I, orthocenter(B, C, F))
By in_imply_collinear on orthocenter(A, C, F), B, F we get collinear(B, F, orthocenter(A, C, F))
By in_imply_collinear on orthocenter(B, C, F), A, F we get collinear(A, F, orthocenter(B, C, F))
By in_imply_collinear on orthocenter(A, C, F), E, F we get collinear(E, F, orthocenter(A, C, F))
By in_imply_collinear on line_intersection(Line(A, B), Line(C, F)), B, A we get collinear(A, B, line_intersection(Line(A, B), Line(C, F)))
By in_imply_collinear on orthocenter(A, C, F), B, A we get collinear(A, B, orthocenter(A, C, F))
By in_imply_collinear on line_intersection(Line(A, B), Line(C, F)), B, G we get collinear(B, G, line_intersection(Line(A, B), Line(C, F)))
By in_imply_collinear on orthocenter(A, B, F), A, E we get collinear(A, E, orthocenter(A, B, F))
By in_imply_collinear on orthocenter(A, C, F), C, B we get collinear(B, C, orthocenter(A, C, F))
By in_imply_collinear on orthocenter(B, C, F), A, B we get collinear(A, B, orthocenter(B, C, F))
By in_imply_collinear on orthocenter(A, B, F), C, D we get collinear(C, D, orthocenter(A, B, F))
By in_imply_collinear on orthocenter(B, C, F), A, G we get collinear(A, G, orthocenter(B, C, F))
By in_imply_collinear on orthocenter(B, C, F), E, C we get collinear(C, E, orthocenter(B, C, F))
By in_imply_collinear on orthocenter(A, C, F), G, A we get collinear(A, G, orthocenter(A, C, F))
By in_imply_collinear on orthocenter(B, C, F), I, F we get collinear(F, I, orthocenter(B, C, F))
By in_imply_collinear on orthocenter(A, B, F), A, C we get collinear(A, C, orthocenter(A, B, F))
By sas_anti_similarity on D, F, E, B, F, A we get anti_similar_triangles(A, B, F, E, D, F)
By in_imply_collinear on orthocenter(A, B, F), C, E we get collinear(C, E, orthocenter(A, B, F))
By in_imply_collinear on orthocenter(B, C, F), A, D we get collinear(A, D, orthocenter(B, C, F))
By sas_anti_similarity on D, C, E, A, C, B we get anti_similar_triangles(A, B, C, D, E, C)
By in_imply_collinear on orthocenter(B, C, F), E, A we get collinear(A, E, orthocenter(B, C, F))
By in_imply_collinear on orthocenter(B, C, F), D, F we get collinear(D, F, orthocenter(B, C, F))
By in_imply_collinear on orthocenter(B, C, F), C, A we get collinear(A, C, orthocenter(B, C, F))
By in_imply_collinear on orthocenter(A, C, F), G, B we get collinear(B, G, orthocenter(A, C, F))
By in_imply_collinear on orthocenter(A, C, F), D, B we get collinear(B, D, orthocenter(A, C, F))
By in_imply_collinear on orthocenter(A, C, F), E, B we get collinear(B, E, orthocenter(A, C, F))
By similar_triangle_basic_properties on D, C, A, D, F, B we get angle(D, C, A) == angle(D, F, B) mod 360, angle(C, A, D) == angle(F, B, D) mod 360, angle(A, D, C) == angle(B, D, F) mod 360, log(distance(C, D)) + log(distance(B, F)) == log(distance(D, F)) + log(distance(A, C)), log(distance(A, C)) + log(distance(B, D)) == log(distance(B, F)) + log(distance(A, D)), log(distance(A, D)) + log(distance(D, F)) == log(distance(B, D)) + log(distance(C, D))
By concyclic_definition_1 on D, B, A, E we get Circle(A, B, D) == Circle(A, B, E)
By anti_similar_triangle_basic_properties on F, E, A, C, D, A we get angle(F, E, A) == 0 - angle(C, D, A) mod 360, angle(E, A, F) == 0 - angle(D, A, C) mod 360, angle(A, F, E) == 0 - angle(A, C, D) mod 360, log(distance(C, D)) + log(distance(A, E)) == log(distance(E, F)) + log(distance(A, D)), log(distance(A, D)) + log(distance(A, F)) == log(distance(A, E)) + log(distance(A, C)), log(distance(A, C)) + log(distance(E, F)) == log(distance(A, F)) + log(distance(C, D))
By sas_anti_similarity on B, C, A, E, C, D we get anti_similar_triangles(A, B, C, D, E, C)
By similar_triangle_basic_properties on C, E, B, F, E, A we get angle(C, E, B) == angle(F, E, A) mod 360, angle(E, A, F) == angle(E, B, C) mod 360, angle(A, F, E) == angle(B, C, E) mod 360, log(distance(C, E)) + log(distance(A, E)) == log(distance(E, F)) + log(distance(B, E)), log(distance(A, E)) + log(distance(B, C)) == log(distance(B, E)) + log(distance(A, F)), log(distance(A, F)) + log(distance(C, E)) == log(distance(B, C)) + log(distance(E, F))
By similar_triangle_basic_properties on B, F, D, A, C, D we get angle(A, C, D) == angle(B, F, D) mod 360, angle(C, D, A) == angle(F, D, B) mod 360, angle(D, A, C) == angle(D, B, F) mod 360, log(distance(A, C)) + log(distance(D, F)) == log(distance(B, F)) + log(distance(C, D)), log(distance(C, D)) + log(distance(B, D)) == log(distance(D, F)) + log(distance(A, D)), log(distance(A, D)) + log(distance(B, F)) == log(distance(B, D)) + log(distance(A, C))
By anti_similar_triangle_basic_properties on F, D, B, C, E, B we get angle(F, D, B) == 0 - angle(C, E, B) mod 360, angle(D, B, F) == 0 - angle(E, B, C) mod 360, angle(B, F, D) == 0 - angle(B, C, E) mod 360, log(distance(C, E)) + log(distance(B, D)) == log(distance(D, F)) + log(distance(B, E)), log(distance(B, D)) + log(distance(B, C)) == log(distance(B, E)) + log(distance(B, F)), log(distance(B, C)) + log(distance(D, F)) == log(distance(B, F)) + log(distance(C, E))
By reverse_direction on D, I we get 180 == direction(D, I) - direction(I, D) mod 360
By between_imply_segment_sum on D, F, I we get distance(D, I) == distance(D, F) + distance(F, I)
By anti_similar_triangle_basic_properties on E, C, B, D, F, B we get angle(E, C, B) == 0 - angle(D, F, B) mod 360, angle(C, B, E) == 0 - angle(F, B, D) mod 360, angle(B, E, C) == 0 - angle(B, D, F) mod 360, log(distance(C, E)) + log(distance(B, F)) == log(distance(D, F)) + log(distance(B, C)), log(distance(B, C)) + log(distance(B, D)) == log(distance(B, F)) + log(distance(B, E)), log(distance(B, D)) + log(distance(C, E)) == log(distance(B, E)) + log(distance(D, F))
By anti_similar_triangle_basic_properties on A, E, F, A, D, C we get angle(A, E, F) == 0 - angle(A, D, C) mod 360, angle(E, F, A) == 0 - angle(D, C, A) mod 360, angle(F, A, E) == 0 - angle(C, A, D) mod 360, log(distance(A, D)) + log(distance(E, F)) == log(distance(A, E)) + log(distance(C, D)), log(distance(C, D)) + log(distance(A, F)) == log(distance(E, F)) + log(distance(A, C)), log(distance(A, C)) + log(distance(A, E)) == log(distance(A, F)) + log(distance(A, D))
By sas_anti_similarity on A, F, B, E, F, D we get anti_similar_triangles(A, B, F, E, D, F)
By between_implies_angles on D, F, I we get 180 == angle(D, F, I) mod 360, 0 == angle(F, I, D) mod 360, 0 == angle(I, D, F) mod 360
By sas_anti_similarity on B, F, A, D, F, E we get anti_similar_triangles(A, B, F, E, D, F)
By between_imply_segment_sum on A, I, D we get distance(A, D) == distance(A, I) + distance(D, I)
By between_implies_angles on A, I, D we get 180 == angle(A, I, D) mod 360, 0 == angle(I, D, A) mod 360, 0 == angle(D, A, I) mod 360
By sas_anti_similarity on E, F, D, A, F, B we get anti_similar_triangles(A, B, F, E, D, F)
By sas_anti_similarity on A, C, B, D, C, E we get anti_similar_triangles(A, B, C, D, E, C)
By reverse_direction on I, D we get 180 == direction(I, D) - direction(D, I) mod 360
By concyclic_definition_0 on D, E, C, F we get F in Circle(C, D, E)
By between_implies_angles on I, F, D we get 180 == angle(I, F, D) mod 360, 0 == angle(F, D, I) mod 360, 0 == angle(D, I, F) mod 360
By sas_anti_similarity on E, C, D, B, C, A we get anti_similar_triangles(A, B, C, D, E, C)
By between_implies_angles on D, I, A we get 180 == angle(D, I, A) mod 360, 0 == angle(I, A, D) mod 360, 0 == angle(A, D, I) mod 360
By sss_anti_congruence_v0 on E, F, I, F, E, I we get anti_congruent_triangles(E, F, I, F, E, I)
By external_angle_bisector_definition_v0_r on I, B, I, D we get Line(B, D) == external_angle_bisector(I, D, I)
By external_angle_bisector_definition_v0_r on A, B, I, D we get Line(B, D) == external_angle_bisector(A, D, I)
By sss_anti_congruence_v1 on B, E, G, E, B, G we get anti_congruent_triangles(B, E, G, E, B, G)
By external_angle_bisector_definition_v0_r on D, I, A, F we get Line(F, I) == external_angle_bisector(A, F, D)
By sss_anti_congruence_v0 on A, D, G, D, A, G we get anti_congruent_triangles(A, D, G, D, A, G)
By sss_anti_congruence_v0 on E, F, I, F, E, I we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v1 on B, E, G, E, B, G we get anti_congruent_triangles(B, E, G, E, B, G)
By external_angle_bisector_definition_v0_r on I, C, A, D we get Line(C, D) == external_angle_bisector(A, D, I)
By similar_triangle_basic_properties on G, A, I, B, A, F we get angle(B, A, F) == angle(G, A, I) mod 360, angle(A, F, B) == angle(A, I, G) mod 360, angle(F, B, A) == angle(I, G, A) mod 360, log(distance(A, B)) + log(distance(A, I)) == log(distance(A, G)) + log(distance(A, F)), log(distance(A, F)) + log(distance(G, I)) == log(distance(A, I)) + log(distance(B, F)), log(distance(B, F)) + log(distance(A, G)) == log(distance(G, I)) + log(distance(A, B))
By radical_axis_definition_v0_r on A, Circle(A, B, D), Circle(A, E, F) we get A in radical_axis(Circle(A, B, D), Circle(A, E, F))
By similar_triangle_basic_properties on F, A, B, I, A, G we get angle(F, A, B) == angle(I, A, G) mod 360, angle(A, B, F) == angle(A, G, I) mod 360, angle(B, F, A) == angle(G, I, A) mod 360, log(distance(A, F)) + log(distance(A, G)) == log(distance(A, I)) + log(distance(A, B)), log(distance(A, B)) + log(distance(G, I)) == log(distance(A, G)) + log(distance(B, F)), log(distance(B, F)) + log(distance(A, I)) == log(distance(G, I)) + log(distance(A, F))
By isosceles_triangle_properties on I, A, E we get distance(A, I) == distance(E, I), angle(A, E, I) == angle(I, A, E) mod 360
By sss_anti_congruence_v0 on B, G, D, D, G, B we get anti_congruent_triangles(B, D, G, D, B, G)
By external_angle_bisector_definition_v0_r on F, B, I, D we get Line(B, D) == external_angle_bisector(F, D, I)
By internal_angle_bisector_definition_v0_r on D, A, D, I we get Line(A, I) == internal_angle_bisector(D, I, D)
By sss_anti_congruence_v1 on E, A, I, A, E, I we get anti_congruent_triangles(A, E, I, E, A, I)
By reverse_direction on I, E we get 180 == direction(I, E) - direction(E, I) mod 360
By sss_anti_congruence_v1 on I, F, E, I, E, F we get anti_congruent_triangles(E, F, I, F, E, I)
By concyclic_definition_1 on E, A, D, B we get Circle(A, B, D) == Circle(A, D, E)
By external_angle_bisector_definition_v0_r on I, C, F, D we get Line(C, D) == external_angle_bisector(F, D, I)
By sss_anti_congruence_v1 on E, A, I, A, E, I we get anti_congruent_triangles(A, E, I, E, A, I)
By concyclic_definition_0 on F, D, E, C we get C in Circle(D, E, F)
By sss_anti_congruence_v1 on G, E, A, G, A, E we get anti_congruent_triangles(A, E, G, E, A, G)
By sss_anti_congruence_v0 on A, D, G, D, A, G we get anti_congruent_triangles(A, D, G, D, A, G)
By sss_anti_congruence_v0 on E, F, I, F, E, I we get anti_congruent_triangles(E, F, I, F, E, I)
By reverse_direction on G, E we get 180 == direction(G, E) - direction(E, G) mod 360
By sss_anti_congruence_v1 on G, D, A, G, A, D we get anti_congruent_triangles(A, D, G, D, A, G)
By sss_anti_congruence_v1 on I, F, E, I, E, F we get anti_congruent_triangles(E, F, I, F, E, I)
By concyclic_definition_1 on D, B, E, A we get Circle(A, B, E) == Circle(B, D, E)
By sss_anti_congruence_v1 on D, G, B, B, G, D we get anti_congruent_triangles(B, D, G, D, B, G)
By sss_anti_congruence_v0 on B, G, E, E, G, B we get anti_congruent_triangles(B, E, G, E, B, G)
By sss_anti_congruence_v1 on E, I, F, F, I, E we get anti_congruent_triangles(E, F, I, F, E, I)
By internal_angle_bisector_definition_v0_r on A, D, I, F we get Line(D, F) == internal_angle_bisector(A, F, I)
By sas_anti_congruence on B, G, D, D, G, B we get anti_congruent_triangles(B, D, G, D, B, G)
By internal_angle_bisector_definition_v0_r on I, F, I, D we get Line(D, F) == internal_angle_bisector(I, D, I)
By sss_anti_congruence_v1 on E, G, B, B, G, E we get anti_congruent_triangles(B, E, G, E, B, G)
By sss_anti_congruence_v0 on G, E, B, G, B, E we get anti_congruent_triangles(B, E, G, E, B, G)
By internal_angle_bisector_definition_v0_r on A, I, F, D we get Line(D, I) == internal_angle_bisector(A, D, F)
By sss_anti_congruence_v0 on G, D, B, G, B, D we get anti_congruent_triangles(B, D, G, D, B, G)
By concyclic_definition_0 on D, A, E, B we get B in Circle(A, D, E)
By sss_anti_congruence_v1 on I, F, E, I, E, F we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v0 on B, G, E, E, G, B we get anti_congruent_triangles(B, E, G, E, B, G)
By sss_anti_congruence_v0 on E, G, A, A, G, E we get anti_congruent_triangles(A, E, G, E, A, G)
By sss_anti_congruence_v0 on A, E, G, E, A, G we get anti_congruent_triangles(A, E, G, E, A, G)
By sas_anti_congruence on D, G, A, A, G, D we get anti_congruent_triangles(A, D, G, D, A, G)
By sss_anti_congruence_v0 on E, G, A, A, G, E we get anti_congruent_triangles(A, E, G, E, A, G)
By sss_anti_congruence_v0 on D, G, A, A, G, D we get anti_congruent_triangles(A, D, G, D, A, G)
By isosceles_triangle_properties on G, E, A we get distance(A, G) == distance(E, G), angle(E, A, G) == angle(G, E, A) mod 360
By concyclic_definition_1 on E, C, D, F we get Circle(C, D, E) == Circle(C, D, F)
By internal_angle_bisector_definition_v0_r on D, F, D, I we get Line(F, I) == internal_angle_bisector(D, I, D)
By sss_anti_congruence_v1 on E, G, B, B, G, E we get anti_congruent_triangles(B, E, G, E, B, G)
By sas_anti_congruence on A, G, E, E, G, A we get anti_congruent_triangles(A, E, G, E, A, G)
By sss_anti_congruence_v0 on I, E, F, I, F, E we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v1 on B, E, G, E, B, G we get anti_congruent_triangles(B, E, G, E, B, G)
By sss_anti_congruence_v1 on D, G, B, B, G, D we get anti_congruent_triangles(B, D, G, D, B, G)
By sss_anti_congruence_v0 on D, B, G, B, D, G we get anti_congruent_triangles(B, D, G, D, B, G)
By sss_anti_congruence_v1 on E, I, F, F, I, E we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v0 on E, I, A, A, I, E we get anti_congruent_triangles(A, E, I, E, A, I)
By sss_anti_congruence_v0 on E, F, I, F, E, I we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v1 on I, E, A, I, A, E we get anti_congruent_triangles(A, E, I, E, A, I)
By aa_anti_similarity on D, H, E, E, I, A we get anti_similar_triangles(A, E, I, E, D, H)
By concyclic_definition_1 on A, B, D, E we get Circle(A, B, D) == Circle(B, D, E)
By sss_anti_congruence_v0 on A, E, I, E, A, I we get anti_congruent_triangles(A, E, I, E, A, I)
By external_angle_bisector_definition_v0_r on A, D, F, I we get Line(D, I) == external_angle_bisector(A, I, F)
By sss_anti_congruence_v0 on E, G, A, A, G, E we get anti_congruent_triangles(A, E, G, E, A, G)
By sss_anti_congruence_v0 on I, E, F, I, F, E we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v1 on A, G, D, D, G, A we get anti_congruent_triangles(A, D, G, D, A, G)
By sss_anti_congruence_v0 on A, D, G, D, A, G we get anti_congruent_triangles(A, D, G, D, A, G)
By sss_anti_congruence_v1 on E, I, F, F, I, E we get anti_congruent_triangles(E, F, I, F, E, I)
By concyclic_definition_0 on E, D, B, A we get A in Circle(B, D, E)
By aa_anti_similarity on E, I, A, D, H, E we get anti_similar_triangles(A, E, I, E, D, H)
By radical_axis_definition_v0_r on D, c, Circle(A, B, D) we get D in radical_axis(c, Circle(A, B, D))
By sss_anti_congruence_v0 on D, G, A, A, G, D we get anti_congruent_triangles(A, D, G, D, A, G)
By aa_similarity on E, I, A, E, H, D we get similar_triangles(A, E, I, D, E, H)
By internal_angle_bisector_definition_v0_r on D, I, F, A we get Line(A, I) == internal_angle_bisector(D, A, F)
By isosceles_triangle_properties on I, E, A we get distance(A, I) == distance(E, I), angle(E, A, I) == angle(I, E, A) mod 360
By sss_anti_congruence_v0 on I, E, F, I, F, E we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v1 on E, A, G, A, E, G we get anti_congruent_triangles(A, E, G, E, A, G)
By radical_axis_definition_v0_r on E, c, Circle(A, E, F) we get E in radical_axis(c, Circle(A, E, F))
By sss_anti_congruence_v0 on G, A, E, G, E, A we get anti_congruent_triangles(A, E, G, E, A, G)
By sss_anti_congruence_v0 on G, E, B, G, B, E we get anti_congruent_triangles(B, E, G, E, B, G)
By sss_anti_congruence_v0 on A, D, G, D, A, G we get anti_congruent_triangles(A, D, G, D, A, G)
By sss_anti_congruence_v0 on G, A, E, G, E, A we get anti_congruent_triangles(A, E, G, E, A, G)
By sss_anti_congruence_v1 on E, I, F, F, I, E we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v1 on G, B, D, G, D, B we get anti_congruent_triangles(B, D, G, D, B, G)
By sss_anti_congruence_v0 on E, G, A, A, G, E we get anti_congruent_triangles(A, E, G, E, A, G)
By sss_anti_congruence_v0 on G, A, D, G, D, A we get anti_congruent_triangles(A, D, G, D, A, G)
By concyclic_definition_1 on D, A, E, B we get Circle(A, B, E) == Circle(A, D, E)
By sss_anti_congruence_v1 on G, B, D, G, D, B we get anti_congruent_triangles(B, D, G, D, B, G)
By internal_angle_bisector_definition_v0_r on I, D, F, A we get Line(A, D) == internal_angle_bisector(F, A, I)
By sss_anti_congruence_v1 on E, A, I, A, E, I we get anti_congruent_triangles(A, E, I, E, A, I)
By sss_anti_congruence_v0 on D, B, G, B, D, G we get anti_congruent_triangles(B, D, G, D, B, G)
By concyclic_definition_0 on E, F, C, D we get D in Circle(C, E, F)
By concyclic_definition_0 on F, C, D, E we get E in Circle(C, D, F)
By aa_similarity on E, H, D, E, I, A we get similar_triangles(A, E, I, D, E, H)
By sss_anti_congruence_v1 on F, E, I, E, F, I we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v1 on B, D, G, D, B, G we get anti_congruent_triangles(B, D, G, D, B, G)
By sss_anti_congruence_v0 on I, A, E, I, E, A we get anti_congruent_triangles(A, E, I, E, A, I)
By log_of_2_times_distance on A, B, D, G we get log(distance(A, B)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(D, G))
By sss_anti_congruence_v1 on D, A, G, A, D, G we get anti_congruent_triangles(A, D, G, D, A, G)
By sss_anti_congruence_v0 on F, I, E, E, I, F we get anti_congruent_triangles(E, F, I, F, E, I)
By aa_similarity on E, D, H, E, A, I we get similar_triangles(A, E, I, D, E, H)
By sss_anti_congruence_v0 on F, I, E, E, I, F we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v1 on E, I, F, F, I, E we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v1 on G, E, A, G, A, E we get anti_congruent_triangles(A, E, G, E, A, G)
By sss_anti_congruence_v1 on A, I, E, E, I, A we get anti_congruent_triangles(A, E, I, E, A, I)
By sss_anti_congruence_v0 on I, A, E, I, E, A we get anti_congruent_triangles(A, E, I, E, A, I)
By sss_anti_congruence_v1 on G, B, E, G, E, B we get anti_congruent_triangles(B, E, G, E, B, G)
By sss_anti_congruence_v0 on A, D, G, D, A, G we get anti_congruent_triangles(A, D, G, D, A, G)
By sss_anti_congruence_v1 on I, E, A, I, A, E we get anti_congruent_triangles(A, E, I, E, A, I)
By external_angle_bisector_definition_v0_r on I, C, I, D we get Line(C, D) == external_angle_bisector(I, D, I)
By sas_anti_congruence on E, G, A, A, G, E we get anti_congruent_triangles(A, E, G, E, A, G)
By isosceles_triangle_properties on G, D, B we get distance(B, G) == distance(D, G), angle(D, B, G) == angle(G, D, B) mod 360
By isosceles_triangle_properties on G, B, E we get distance(B, G) == distance(E, G), angle(B, E, G) == angle(G, B, E) mod 360
By sss_anti_congruence_v0 on I, A, E, I, E, A we get anti_congruent_triangles(A, E, I, E, A, I)
By sss_anti_congruence_v1 on E, A, G, A, E, G we get anti_congruent_triangles(A, E, G, E, A, G)
By sss_anti_congruence_v0 on D, G, A, A, G, D we get anti_congruent_triangles(A, D, G, D, A, G)
By sss_anti_congruence_v0 on A, E, I, E, A, I we get anti_congruent_triangles(A, E, I, E, A, I)
By sas_anti_congruence on A, I, E, E, I, A we get anti_congruent_triangles(A, E, I, E, A, I)
By sss_anti_congruence_v0 on B, G, D, D, G, B we get anti_congruent_triangles(B, D, G, D, B, G)
By radical_axis_definition_v0_r on E, Circle(A, B, E), c we get E in radical_axis(c, Circle(A, B, E))
By sss_anti_congruence_v0 on G, E, B, G, B, E we get anti_congruent_triangles(B, E, G, E, B, G)
By concyclic_definition_1 on C, D, E, F we get Circle(C, D, E) == Circle(D, E, F)
By sss_anti_congruence_v1 on G, B, E, G, E, B we get anti_congruent_triangles(B, E, G, E, B, G)
By sss_anti_congruence_v0 on D, G, A, A, G, D we get anti_congruent_triangles(A, D, G, D, A, G)
By sss_anti_congruence_v0 on G, A, E, G, E, A we get anti_congruent_triangles(A, E, G, E, A, G)
By sss_anti_congruence_v1 on I, E, A, I, A, E we get anti_congruent_triangles(A, E, I, E, A, I)
By sss_anti_congruence_v1 on A, G, D, D, G, A we get anti_congruent_triangles(A, D, G, D, A, G)
By sss_anti_congruence_v0 on D, B, G, B, D, G we get anti_congruent_triangles(B, D, G, D, B, G)
By internal_angle_bisector_definition_v0_r on I, A, I, D we get Line(A, D) == internal_angle_bisector(I, D, I)
By internal_angle_bisector_definition_v0_r on I, A, F, D we get Line(A, D) == internal_angle_bisector(F, D, I)
By sss_anti_congruence_v1 on A, G, D, D, G, A we get anti_congruent_triangles(A, D, G, D, A, G)
By sss_anti_congruence_v1 on A, I, E, E, I, A we get anti_congruent_triangles(A, E, I, E, A, I)
By sss_anti_congruence_v0 on A, E, G, E, A, G we get anti_congruent_triangles(A, E, G, E, A, G)
By sss_anti_congruence_v0 on F, I, E, E, I, F we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v1 on E, A, G, A, E, G we get anti_congruent_triangles(A, E, G, E, A, G)
By sss_anti_congruence_v0 on B, G, D, D, G, B we get anti_congruent_triangles(B, D, G, D, B, G)
By sss_anti_congruence_v1 on G, B, E, G, E, B we get anti_congruent_triangles(B, E, G, E, B, G)
By sss_anti_congruence_v1 on I, E, A, I, A, E we get anti_congruent_triangles(A, E, I, E, A, I)
By sss_anti_congruence_v1 on F, E, I, E, F, I we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v1 on G, B, E, G, E, B we get anti_congruent_triangles(B, E, G, E, B, G)
By aa_similarity on E, A, I, E, D, H we get similar_triangles(A, E, I, D, E, H)
By sas_anti_congruence on D, G, B, B, G, D we get anti_congruent_triangles(B, D, G, D, B, G)
By sss_anti_congruence_v1 on D, A, G, A, D, G we get anti_congruent_triangles(A, D, G, D, A, G)
By sss_anti_congruence_v0 on E, I, A, A, I, E we get anti_congruent_triangles(A, E, I, E, A, I)
By sss_anti_congruence_v0 on I, A, E, I, E, A we get anti_congruent_triangles(A, E, I, E, A, I)
By sss_anti_congruence_v1 on E, G, B, B, G, E we get anti_congruent_triangles(B, E, G, E, B, G)
By sss_anti_congruence_v0 on E, B, G, B, E, G we get anti_congruent_triangles(B, E, G, E, B, G)
By sss_anti_congruence_v0 on G, A, D, G, D, A we get anti_congruent_triangles(A, D, G, D, A, G)
By concyclic_definition_1 on F, C, E, D we get Circle(C, D, E) == Circle(C, E, F)
By sas_anti_congruence on F, I, E, E, I, F we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v1 on A, G, E, E, G, A we get anti_congruent_triangles(A, E, G, E, A, G)
By sss_anti_congruence_v0 on E, B, G, B, E, G we get anti_congruent_triangles(B, E, G, E, B, G)
By sss_anti_congruence_v1 on E, A, I, A, E, I we get anti_congruent_triangles(A, E, I, E, A, I)
By log_of_2_times_distance on B, A, G, E we get log(distance(A, B)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(E, G))
By sss_anti_congruence_v1 on A, G, E, E, G, A we get anti_congruent_triangles(A, E, G, E, A, G)
By sss_anti_congruence_v0 on E, B, G, B, E, G we get anti_congruent_triangles(B, E, G, E, B, G)
By sss_anti_congruence_v1 on G, E, A, G, A, E we get anti_congruent_triangles(A, E, G, E, A, G)
By aa_anti_similarity on E, A, I, D, E, H we get anti_similar_triangles(A, E, I, E, D, H)
By sss_anti_congruence_v1 on E, A, G, A, E, G we get anti_congruent_triangles(A, E, G, E, A, G)
By sss_anti_congruence_v1 on B, E, G, E, B, G we get anti_congruent_triangles(B, E, G, E, B, G)
By sas_anti_congruence on B, G, E, E, G, B we get anti_congruent_triangles(B, E, G, E, B, G)
By sss_anti_congruence_v1 on I, E, A, I, A, E we get anti_congruent_triangles(A, E, I, E, A, I)
By sss_anti_congruence_v0 on E, G, A, A, G, E we get anti_congruent_triangles(A, E, G, E, A, G)
By sss_anti_congruence_v0 on E, B, G, B, E, G we get anti_congruent_triangles(B, E, G, E, B, G)
By sss_anti_congruence_v1 on D, G, B, B, G, D we get anti_congruent_triangles(B, D, G, D, B, G)
By sss_anti_congruence_v0 on B, G, D, D, G, B we get anti_congruent_triangles(B, D, G, D, B, G)
By sss_anti_congruence_v1 on G, D, A, G, A, D we get anti_congruent_triangles(A, D, G, D, A, G)
By sas_anti_congruence on E, I, F, F, I, E we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v0 on B, G, E, E, G, B we get anti_congruent_triangles(B, E, G, E, B, G)
By aa_anti_similarity on D, E, H, E, A, I we get anti_similar_triangles(A, E, I, E, D, H)
By sss_anti_congruence_v0 on A, E, G, E, A, G we get anti_congruent_triangles(A, E, G, E, A, G)
By internal_angle_bisector_definition_v0_r on I, F, A, D we get Line(D, F) == internal_angle_bisector(A, D, I)
By sss_anti_congruence_v0 on B, G, E, E, G, B we get anti_congruent_triangles(B, E, G, E, B, G)
By sss_anti_congruence_v1 on G, B, D, G, D, B we get anti_congruent_triangles(B, D, G, D, B, G)
By sss_anti_congruence_v1 on B, D, G, D, B, G we get anti_congruent_triangles(B, D, G, D, B, G)
By sss_anti_congruence_v1 on E, G, B, B, G, E we get anti_congruent_triangles(B, E, G, E, B, G)
By sss_anti_congruence_v1 on A, G, E, E, G, A we get anti_congruent_triangles(A, E, G, E, A, G)
By sss_anti_congruence_v1 on D, G, B, B, G, D we get anti_congruent_triangles(B, D, G, D, B, G)
By sss_anti_congruence_v1 on F, E, I, E, F, I we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v1 on I, F, E, I, E, F we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v0 on A, E, I, E, A, I we get anti_congruent_triangles(A, E, I, E, A, I)
By sss_anti_congruence_v0 on G, E, B, G, B, E we get anti_congruent_triangles(B, E, G, E, B, G)
By sss_anti_congruence_v1 on E, A, I, A, E, I we get anti_congruent_triangles(A, E, I, E, A, I)
By sss_anti_congruence_v0 on G, D, B, G, B, D we get anti_congruent_triangles(B, D, G, D, B, G)
By sss_anti_congruence_v0 on E, I, A, A, I, E we get anti_congruent_triangles(A, E, I, E, A, I)
By sas_anti_congruence on E, G, B, B, G, E we get anti_congruent_triangles(B, E, G, E, B, G)
By sss_anti_congruence_v0 on A, E, I, E, A, I we get anti_congruent_triangles(A, E, I, E, A, I)
By sss_anti_congruence_v1 on G, D, A, G, A, D we get anti_congruent_triangles(A, D, G, D, A, G)
By sss_anti_congruence_v1 on A, G, D, D, G, A we get anti_congruent_triangles(A, D, G, D, A, G)
By sss_anti_congruence_v0 on G, A, D, G, D, A we get anti_congruent_triangles(A, D, G, D, A, G)
By sss_anti_congruence_v0 on E, I, A, A, I, E we get anti_congruent_triangles(A, E, I, E, A, I)
By sss_anti_congruence_v0 on I, E, F, I, F, E we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v1 on E, A, I, A, E, I we get anti_congruent_triangles(A, E, I, E, A, I)
By isosceles_triangle_properties on G, B, D we get distance(B, G) == distance(D, G), angle(B, D, G) == angle(G, B, D) mod 360
By sss_anti_congruence_v1 on E, G, B, B, G, E we get anti_congruent_triangles(B, E, G, E, B, G)
By sss_anti_congruence_v1 on A, I, E, E, I, A we get anti_congruent_triangles(A, E, I, E, A, I)
By sss_anti_congruence_v1 on G, B, D, G, D, B we get anti_congruent_triangles(B, D, G, D, B, G)
By sss_anti_congruence_v0 on E, I, A, A, I, E we get anti_congruent_triangles(A, E, I, E, A, I)
By sss_anti_congruence_v1 on G, E, A, G, A, E we get anti_congruent_triangles(A, E, G, E, A, G)
By sss_anti_congruence_v1 on A, G, E, E, G, A we get anti_congruent_triangles(A, E, G, E, A, G)
By sss_anti_congruence_v1 on I, F, E, I, E, F we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v1 on G, B, E, G, E, B we get anti_congruent_triangles(B, E, G, E, B, G)
By sss_anti_congruence_v1 on D, G, B, B, G, D we get anti_congruent_triangles(B, D, G, D, B, G)
By sss_anti_congruence_v1 on B, D, G, D, B, G we get anti_congruent_triangles(B, D, G, D, B, G)
By isosceles_triangle_properties on I, E, F we get distance(E, I) == distance(F, I), angle(E, F, I) == angle(I, E, F) mod 360
By sss_anti_congruence_v0 on F, I, E, E, I, F we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v0 on A, E, G, E, A, G we get anti_congruent_triangles(A, E, G, E, A, G)
By sss_anti_congruence_v1 on A, G, D, D, G, A we get anti_congruent_triangles(A, D, G, D, A, G)
By sss_anti_congruence_v0 on A, E, I, E, A, I we get anti_congruent_triangles(A, E, I, E, A, I)
By sss_anti_congruence_v1 on E, G, B, B, G, E we get anti_congruent_triangles(B, E, G, E, B, G)
By sss_anti_congruence_v1 on I, F, E, I, E, F we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v0 on D, B, G, B, D, G we get anti_congruent_triangles(B, D, G, D, B, G)
By log_of_2_times_distance on F, A, I, E we get log(distance(A, F)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(E, I))
By sss_anti_congruence_v0 on G, A, E, G, E, A we get anti_congruent_triangles(A, E, G, E, A, G)
By sss_anti_congruence_v0 on D, G, A, A, G, D we get anti_congruent_triangles(A, D, G, D, A, G)
By sss_anti_congruence_v1 on A, I, E, E, I, A we get anti_congruent_triangles(A, E, I, E, A, I)
By sss_anti_congruence_v0 on G, E, B, G, B, E we get anti_congruent_triangles(B, E, G, E, B, G)
By sas_anti_congruence on A, G, D, D, G, A we get anti_congruent_triangles(A, D, G, D, A, G)
By sss_anti_congruence_v0 on B, G, D, D, G, B we get anti_congruent_triangles(B, D, G, D, B, G)
By sss_anti_congruence_v0 on A, E, G, E, A, G we get anti_congruent_triangles(A, E, G, E, A, G)
By sss_anti_congruence_v1 on B, D, G, D, B, G we get anti_congruent_triangles(B, D, G, D, B, G)
By sss_anti_congruence_v1 on F, E, I, E, F, I we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v1 on G, E, A, G, A, E we get anti_congruent_triangles(A, E, G, E, A, G)
By sss_anti_congruence_v1 on G, B, D, G, D, B we get anti_congruent_triangles(B, D, G, D, B, G)
By sss_anti_congruence_v0 on E, F, I, F, E, I we get anti_congruent_triangles(E, F, I, F, E, I)
By reverse_direction on G, D we get 180 == direction(G, D) - direction(D, G) mod 360
By sss_anti_congruence_v1 on B, D, G, D, B, G we get anti_congruent_triangles(B, D, G, D, B, G)
By sss_anti_congruence_v0 on A, E, G, E, A, G we get anti_congruent_triangles(A, E, G, E, A, G)
By sss_anti_congruence_v0 on E, B, G, B, E, G we get anti_congruent_triangles(B, E, G, E, B, G)
By sss_anti_congruence_v1 on G, D, A, G, A, D we get anti_congruent_triangles(A, D, G, D, A, G)
By sss_anti_congruence_v0 on B, G, E, E, G, B we get anti_congruent_triangles(B, E, G, E, B, G)
By sss_anti_congruence_v1 on A, I, E, E, I, A we get anti_congruent_triangles(A, E, I, E, A, I)
By sss_anti_congruence_v0 on D, B, G, B, D, G we get anti_congruent_triangles(B, D, G, D, B, G)
By sss_anti_congruence_v1 on F, E, I, E, F, I we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v0 on I, E, F, I, F, E we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v0 on E, I, A, A, I, E we get anti_congruent_triangles(A, E, I, E, A, I)
By sss_anti_congruence_v1 on E, I, F, F, I, E we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v0 on F, I, E, E, I, F we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v1 on G, B, D, G, D, B we get anti_congruent_triangles(B, D, G, D, B, G)
By isosceles_triangle_properties on G, D, A we get distance(A, G) == distance(D, G), angle(D, A, G) == angle(G, D, A) mod 360
By sss_anti_congruence_v1 on B, E, G, E, B, G we get anti_congruent_triangles(B, E, G, E, B, G)
By isosceles_triangle_properties on G, A, D we get distance(A, G) == distance(D, G), angle(A, D, G) == angle(G, A, D) mod 360
By sss_anti_congruence_v1 on B, D, G, D, B, G we get anti_congruent_triangles(B, D, G, D, B, G)
By sss_anti_congruence_v0 on A, E, I, E, A, I we get anti_congruent_triangles(A, E, I, E, A, I)
By isosceles_triangle_properties on G, A, E we get distance(A, G) == distance(E, G), angle(A, E, G) == angle(G, A, E) mod 360
By sss_anti_congruence_v0 on B, G, E, E, G, B we get anti_congruent_triangles(B, E, G, E, B, G)
By sss_anti_congruence_v0 on G, D, B, G, B, D we get anti_congruent_triangles(B, D, G, D, B, G)
By sss_anti_congruence_v0 on G, D, B, G, B, D we get anti_congruent_triangles(B, D, G, D, B, G)
By sss_anti_congruence_v0 on G, A, E, G, E, A we get anti_congruent_triangles(A, E, G, E, A, G)
By sss_anti_congruence_v0 on D, G, A, A, G, D we get anti_congruent_triangles(A, D, G, D, A, G)
By sss_anti_congruence_v0 on D, B, G, B, D, G we get anti_congruent_triangles(B, D, G, D, B, G)
By sss_anti_congruence_v1 on G, E, A, G, A, E we get anti_congruent_triangles(A, E, G, E, A, G)
By sss_anti_congruence_v0 on G, A, E, G, E, A we get anti_congruent_triangles(A, E, G, E, A, G)
By sss_anti_congruence_v0 on G, E, B, G, B, E we get anti_congruent_triangles(B, E, G, E, B, G)
By sss_anti_congruence_v1 on A, G, D, D, G, A we get anti_congruent_triangles(A, D, G, D, A, G)
By sas_anti_congruence on E, I, A, A, I, E we get anti_congruent_triangles(A, E, I, E, A, I)
By sss_anti_congruence_v1 on A, I, E, E, I, A we get anti_congruent_triangles(A, E, I, E, A, I)
By sss_anti_congruence_v1 on G, D, A, G, A, D we get anti_congruent_triangles(A, D, G, D, A, G)
By sss_anti_congruence_v1 on A, G, E, E, G, A we get anti_congruent_triangles(A, E, G, E, A, G)
By sss_anti_congruence_v0 on G, A, D, G, D, A we get anti_congruent_triangles(A, D, G, D, A, G)
By sss_anti_congruence_v0 on G, D, B, G, B, D we get anti_congruent_triangles(B, D, G, D, B, G)
By isosceles_triangle_properties on G, E, B we get distance(B, G) == distance(E, G), angle(E, B, G) == angle(G, E, B) mod 360
By sss_anti_congruence_v0 on G, D, B, G, B, D we get anti_congruent_triangles(B, D, G, D, B, G)
By sss_anti_congruence_v0 on G, A, D, G, D, A we get anti_congruent_triangles(A, D, G, D, A, G)
By sss_anti_congruence_v1 on D, A, G, A, D, G we get anti_congruent_triangles(A, D, G, D, A, G)
By sss_anti_congruence_v0 on E, G, A, A, G, E we get anti_congruent_triangles(A, E, G, E, A, G)
By sss_anti_congruence_v0 on I, A, E, I, E, A we get anti_congruent_triangles(A, E, I, E, A, I)
By sss_anti_congruence_v1 on B, E, G, E, B, G we get anti_congruent_triangles(B, E, G, E, B, G)
By altitude_definition on G, F, C, Line(A, B) we get Line(A, B) == altitude(G, C, F)
By sss_anti_congruence_v0 on A, D, G, D, A, G we get anti_congruent_triangles(A, D, G, D, A, G)
By sss_anti_congruence_v0 on E, F, I, F, E, I we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v0 on I, E, F, I, F, E we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v1 on F, E, I, E, F, I we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v1 on G, D, A, G, A, D we get anti_congruent_triangles(A, D, G, D, A, G)
By sss_anti_congruence_v1 on D, G, B, B, G, D we get anti_congruent_triangles(B, D, G, D, B, G)
By sss_anti_congruence_v0 on E, B, G, B, E, G we get anti_congruent_triangles(B, E, G, E, B, G)
By sss_anti_congruence_v0 on I, A, E, I, E, A we get anti_congruent_triangles(A, E, I, E, A, I)
By sss_anti_congruence_v1 on G, B, E, G, E, B we get anti_congruent_triangles(B, E, G, E, B, G)
By sss_anti_congruence_v1 on D, A, G, A, D, G we get anti_congruent_triangles(A, D, G, D, A, G)
By sss_anti_congruence_v1 on D, A, G, A, D, G we get anti_congruent_triangles(A, D, G, D, A, G)
By sss_anti_congruence_v1 on I, E, A, I, A, E we get anti_congruent_triangles(A, E, I, E, A, I)
By sss_anti_congruence_v1 on D, A, G, A, D, G we get anti_congruent_triangles(A, D, G, D, A, G)
By sss_anti_congruence_v0 on F, I, E, E, I, F we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v1 on A, G, E, E, G, A we get anti_congruent_triangles(A, E, G, E, A, G)
By sss_anti_congruence_v1 on E, A, G, A, E, G we get anti_congruent_triangles(A, E, G, E, A, G)
By sss_anti_congruence_v1 on E, A, G, A, E, G we get anti_congruent_triangles(A, E, G, E, A, G)
By sss_anti_congruence_v0 on G, A, D, G, D, A we get anti_congruent_triangles(A, D, G, D, A, G)
By isosceles_triangle_properties on I, F, E we get distance(E, I) == distance(F, I), angle(F, E, I) == angle(I, F, E) mod 360
By sss_anti_congruence_v0 on B, G, D, D, G, B we get anti_congruent_triangles(B, D, G, D, B, G)
By isosceles_triangle_properties on G, E, D we get distance(D, G) == distance(E, G), angle(E, D, G) == angle(G, E, D) mod 360
By altitude_definition on orthocenter(A, B, F), F, E, g we get g == altitude(orthocenter(A, B, F), E, F)
By altitude_definition on orthocenter(B, C, F), B, E, g we get g == altitude(orthocenter(B, C, F), B, E)
By altitude_definition on orthocenter(A, B, F), A, I, f we get f == altitude(orthocenter(A, B, F), A, I)
By sss_anti_congruence_v1 on E, G, D, D, G, E we get anti_congruent_triangles(D, E, G, E, D, G)
By concyclic_definition_1 on D, E, F, C we get Circle(C, E, F) == Circle(D, E, F)
By altitude_definition on orthocenter(A, B, F), I, D, f we get f == altitude(orthocenter(A, B, F), D, I)
By sss_anti_congruence_v1 on G, D, E, G, E, D we get anti_congruent_triangles(D, E, G, E, D, G)
By altitude_definition on orthocenter(A, C, F), E, A, i we get i == altitude(orthocenter(A, C, F), A, E)
By altitude_definition on orthocenter(A, C, F), E, C, i we get i == altitude(orthocenter(A, C, F), C, E)
By altitude_definition on orthocenter(A, C, F), A, I, f we get f == altitude(orthocenter(A, C, F), A, I)
By altitude_definition on orthocenter(B, C, F), E, F, g we get g == altitude(orthocenter(B, C, F), E, F)
By altitude_definition on orthocenter(A, C, F), D, I, f we get f == altitude(orthocenter(A, C, F), D, I)
By sss_anti_congruence_v1 on E, G, D, D, G, E we get anti_congruent_triangles(D, E, G, E, D, G)
By altitude_definition on orthocenter(B, C, F), D, C, h we get h == altitude(orthocenter(B, C, F), C, D)
By sss_anti_congruence_v1 on D, E, G, E, D, G we get anti_congruent_triangles(D, E, G, E, D, G)
By concyclic_definition_1 on B, E, D, A we get Circle(A, D, E) == Circle(B, D, E)
By sss_anti_congruence_v1 on D, E, G, E, D, G we get anti_congruent_triangles(D, E, G, E, D, G)
By radical_axis_definition_v0 on orthocenter(A, B, F), Circle(A, B, E), Circle(A, E, F) we get power_of_a_point(orthocenter(A, B, F), Circle(A, B, E)) == power_of_a_point(orthocenter(A, B, F), Circle(A, E, F))
By sss_anti_congruence_v1 on G, D, E, G, E, D we get anti_congruent_triangles(D, E, G, E, D, G)
By altitude_definition on orthocenter(B, C, F), D, B, h we get h == altitude(orthocenter(B, C, F), B, D)
By altitude_definition on orthocenter(A, B, F), A, D, f we get f == altitude(orthocenter(A, B, F), A, D)
By sss_anti_congruence_v1 on D, E, G, E, D, G we get anti_congruent_triangles(D, E, G, E, D, G)
By isosceles_triangle_properties on G, D, E we get distance(D, G) == distance(E, G), angle(D, E, G) == angle(G, D, E) mod 360
By concyclic_definition_1 on C, F, D, E we get Circle(C, D, F) == Circle(D, E, F)
By altitude_definition on orthocenter(B, C, F), B, F, g we get g == altitude(orthocenter(B, C, F), B, F)
By sss_anti_congruence_v1 on D, E, G, E, D, G we get anti_congruent_triangles(D, E, G, E, D, G)
By sss_anti_congruence_v0 on D, G, E, E, G, D we get anti_congruent_triangles(D, E, G, E, D, G)
By altitude_definition on orthocenter(A, B, F), B, A, Line(C, F) we get Line(C, F) == altitude(orthocenter(A, B, F), A, B)
By sss_anti_congruence_v1 on G, D, E, G, E, D we get anti_congruent_triangles(D, E, G, E, D, G)
By sss_anti_congruence_v0 on D, G, E, E, G, D we get anti_congruent_triangles(D, E, G, E, D, G)
By sss_anti_congruence_v0 on G, E, D, G, D, E we get anti_congruent_triangles(D, E, G, E, D, G)
By sss_anti_congruence_v1 on E, G, D, D, G, E we get anti_congruent_triangles(D, E, G, E, D, G)
By sss_anti_congruence_v1 on D, E, G, E, D, G we get anti_congruent_triangles(D, E, G, E, D, G)
By sss_anti_congruence_v0 on G, E, D, G, D, E we get anti_congruent_triangles(D, E, G, E, D, G)
By altitude_definition on orthocenter(A, B, F), G, A, Line(C, F) we get Line(C, F) == altitude(orthocenter(A, B, F), A, G)
By altitude_definition on orthocenter(A, C, F), I, F, f we get f == altitude(orthocenter(A, C, F), F, I)
By sss_anti_congruence_v0 on D, G, E, E, G, D we get anti_congruent_triangles(D, E, G, E, D, G)
By altitude_definition on orthocenter(A, B, F), F, D, f we get f == altitude(orthocenter(A, B, F), D, F)
By altitude_definition on orthocenter(B, C, F), C, F, Line(A, B) we get Line(A, B) == altitude(orthocenter(B, C, F), C, F)
By altitude_definition on orthocenter(A, C, F), C, F, Line(A, B) we get Line(A, B) == altitude(orthocenter(A, C, F), C, F)
By altitude_definition on orthocenter(A, B, F), B, E, g we get g == altitude(orthocenter(A, B, F), B, E)
By sss_anti_congruence_v0 on G, E, D, G, D, E we get anti_congruent_triangles(D, E, G, E, D, G)
By sss_anti_congruence_v1 on E, G, D, D, G, E we get anti_congruent_triangles(D, E, G, E, D, G)
By sss_anti_congruence_v0 on E, D, G, D, E, G we get anti_congruent_triangles(D, E, G, E, D, G)
By sss_anti_congruence_v0 on E, D, G, D, E, G we get anti_congruent_triangles(D, E, G, E, D, G)
By altitude_definition on orthocenter(A, C, F), A, D, f we get f == altitude(orthocenter(A, C, F), A, D)
By altitude_definition on orthocenter(B, C, F), B, C, h we get h == altitude(orthocenter(B, C, F), B, C)
By sss_anti_congruence_v0 on G, E, D, G, D, E we get anti_congruent_triangles(D, E, G, E, D, G)
By altitude_definition on orthocenter(A, C, F), F, A, f we get f == altitude(orthocenter(A, C, F), A, F)
By concyclic_definition_1 on D, C, F, E we get Circle(C, D, F) == Circle(C, E, F)
By sss_anti_congruence_v0 on E, D, G, D, E, G we get anti_congruent_triangles(D, E, G, E, D, G)
By sss_anti_congruence_v0 on G, E, D, G, D, E we get anti_congruent_triangles(D, E, G, E, D, G)
By radical_axis_definition_v0 on orthocenter(B, C, F), Circle(A, E, F), Circle(A, B, E) we get power_of_a_point(orthocenter(B, C, F), Circle(A, B, E)) == power_of_a_point(orthocenter(B, C, F), Circle(A, E, F))
By sss_anti_congruence_v1 on D, E, G, E, D, G we get anti_congruent_triangles(D, E, G, E, D, G)
By altitude_definition on orthocenter(A, C, F), C, A, i we get i == altitude(orthocenter(A, C, F), A, C)
By sss_anti_congruence_v0 on D, G, E, E, G, D we get anti_congruent_triangles(D, E, G, E, D, G)
By altitude_definition on orthocenter(A, B, F), F, I, f we get f == altitude(orthocenter(A, B, F), F, I)
By sss_anti_congruence_v1 on E, G, D, D, G, E we get anti_congruent_triangles(D, E, G, E, D, G)
By sss_anti_congruence_v0 on G, E, D, G, D, E we get anti_congruent_triangles(D, E, G, E, D, G)
By sss_anti_congruence_v0 on E, D, G, D, E, G we get anti_congruent_triangles(D, E, G, E, D, G)
By sss_anti_congruence_v1 on G, D, E, G, E, D we get anti_congruent_triangles(D, E, G, E, D, G)
By altitude_definition on orthocenter(A, B, F), B, F, g we get g == altitude(orthocenter(A, B, F), B, F)
By sss_anti_congruence_v0 on D, G, E, E, G, D we get anti_congruent_triangles(D, E, G, E, D, G)
By altitude_definition on orthocenter(A, B, F), B, G, Line(C, F) we get Line(C, F) == altitude(orthocenter(A, B, F), B, G)
By sss_anti_congruence_v0 on E, D, G, D, E, G we get anti_congruent_triangles(D, E, G, E, D, G)
By altitude_definition on orthocenter(A, B, F), A, F, f we get f == altitude(orthocenter(A, B, F), A, F)
By sss_anti_congruence_v1 on G, D, E, G, E, D we get anti_congruent_triangles(D, E, G, E, D, G)
By sss_anti_congruence_v1 on G, D, E, G, E, D we get anti_congruent_triangles(D, E, G, E, D, G)
By sss_anti_congruence_v0 on D, G, E, E, G, D we get anti_congruent_triangles(D, E, G, E, D, G)
By altitude_definition on orthocenter(A, C, F), D, F, f we get f == altitude(orthocenter(A, C, F), D, F)
By sss_anti_congruence_v1 on E, G, D, D, G, E we get anti_congruent_triangles(D, E, G, E, D, G)
By sss_anti_congruence_v0 on E, D, G, D, E, G we get anti_congruent_triangles(D, E, G, E, D, G)
By perpendicular_bisector_sufficient_conditions on E, A, G, I we get Line(G, I) == perpendicular_bisector(A, E)
By concyclic_sufficient_conditions_v1 on E, G, D, H we get concyclic(D, E, G, H)
By concurrent_sufficient_conditions on Line(E, H), i, Line(E, G) we get concurrent(i, Line(E, G), Line(E, H))
By concurrent_sufficient_conditions on Line(E, G), Line(E, H), i we get concurrent(i, Line(E, G), Line(E, H))
By concurrent_sufficient_conditions on Line(E, I), Line(D, E), g we get concurrent(g, Line(D, E), Line(E, I))
By concyclic_sufficient_conditions_v1 on E, I, D, H we get concyclic(D, E, H, I)
By concurrent_sufficient_conditions on Line(E, H), Line(E, G), Line(E, I) we get concurrent(Line(E, G), Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on Line(D, H), Line(D, G), h we get concurrent(h, Line(D, G), Line(D, H))
By concurrent_sufficient_conditions on h, Line(D, E), Line(D, G) we get concurrent(h, Line(D, E), Line(D, G))
By concurrent_sufficient_conditions on Line(D, E), Line(E, G), Line(E, H) we get concurrent(Line(D, E), Line(E, G), Line(E, H))
By concurrent_sufficient_conditions on Line(E, I), Line(E, H), Line(D, E) we get concurrent(Line(D, E), Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on Line(D, G), Line(E, G), Line(G, I) we get concurrent(Line(D, G), Line(E, G), Line(G, I))
By concurrent_sufficient_conditions on Line(E, G), Line(D, E), i we get concurrent(i, Line(D, E), Line(E, G))
By radical_axis_of_intersecting_circles_v1 on D, E, c, Circle(A, B, D) we get Line(D, E) == radical_axis(c, Circle(A, B, D))
By concurrent_sufficient_conditions on Line(E, G), Line(A, B), Line(G, I) we get concurrent(Line(A, B), Line(E, G), Line(G, I))
By concurrent_sufficient_conditions on g, Line(E, H), Line(E, I) we get concurrent(g, Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on Line(D, E), Line(E, I), Line(E, G) we get concurrent(Line(D, E), Line(E, G), Line(E, I))
By concurrent_sufficient_conditions on Line(D, H), h, Line(D, G) we get concurrent(h, Line(D, G), Line(D, H))
By concurrent_sufficient_conditions on Line(D, G), Line(A, B), Line(G, I) we get concurrent(Line(A, B), Line(D, G), Line(G, I))
By concurrent_sufficient_conditions on g, i, Line(E, I) we get concurrent(g, i, Line(E, I))
By concurrent_sufficient_conditions on g, Line(E, I), i we get concurrent(g, i, Line(E, I))
By concurrent_sufficient_conditions on Line(D, E), g, Line(E, G) we get concurrent(g, Line(D, E), Line(E, G))
By concyclic_sufficient_conditions_v0 on D, I, E, G we get concyclic(D, E, G, I)
By concurrent_sufficient_conditions on i, Line(E, G), g we get concurrent(g, i, Line(E, G))
By concurrent_sufficient_conditions on Line(E, I), g, Line(E, H) we get concurrent(g, Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on Line(E, I), Line(E, H), Line(E, G) we get concurrent(Line(E, G), Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on Line(E, I), h, Line(G, I) we get concurrent(h, Line(E, I), Line(G, I))
By concurrent_sufficient_conditions on Line(E, G), Line(D, E), Line(E, H) we get concurrent(Line(D, E), Line(E, G), Line(E, H))
By concurrent_sufficient_conditions on h, Line(D, G), Line(D, E) we get concurrent(h, Line(D, E), Line(D, G))
By concurrent_sufficient_conditions on Line(E, I), Line(E, G), g we get concurrent(g, Line(E, G), Line(E, I))
By concurrent_sufficient_conditions on Line(D, E), g, Line(E, I) we get concurrent(g, Line(D, E), Line(E, I))
By concurrent_sufficient_conditions on Line(E, G), Line(A, B), Line(D, G) we get concurrent(Line(A, B), Line(D, G), Line(E, G))
By concurrent_sufficient_conditions on i, Line(E, I), g we get concurrent(g, i, Line(E, I))
By concurrent_sufficient_conditions on Line(E, G), g, Line(E, I) we get concurrent(g, Line(E, G), Line(E, I))
By concurrent_sufficient_conditions on Line(E, I), i, g we get concurrent(g, i, Line(E, I))
By concurrent_sufficient_conditions on f, Line(D, G), Line(D, E) we get concurrent(f, Line(D, E), Line(D, G))
By concurrent_sufficient_conditions on Line(D, E), Line(E, G), Line(E, I) we get concurrent(Line(D, E), Line(E, G), Line(E, I))
By concurrent_sufficient_conditions on Line(D, E), Line(E, I), i we get concurrent(i, Line(D, E), Line(E, I))
By concurrent_sufficient_conditions on Line(E, G), g, Line(D, E) we get concurrent(g, Line(D, E), Line(E, G))
By concurrent_sufficient_conditions on Line(E, G), Line(E, I), g we get concurrent(g, Line(E, G), Line(E, I))
By concurrent_sufficient_conditions on i, Line(E, I), Line(D, E) we get concurrent(i, Line(D, E), Line(E, I))
By concurrent_sufficient_conditions on h, Line(D, H), Line(D, G) we get concurrent(h, Line(D, G), Line(D, H))
By circle_intersection_is_on_radical_axis on F, Circle(A, E, F), c we get F in radical_axis(c, Circle(A, E, F))
By concurrent_sufficient_conditions on Line(E, H), i, Line(E, I) we get concurrent(i, Line(E, H), Line(E, I))
By radical_axis_of_intersecting_circles_v0 on E, F, c, Circle(A, E, F) we get Line(E, F) == radical_axis(c, Circle(A, E, F))
By concurrent_sufficient_conditions on Line(D, E), Line(D, G), h we get concurrent(h, Line(D, E), Line(D, G))
By concurrent_sufficient_conditions on h, f, Line(D, G) we get concurrent(f, h, Line(D, G))
By concurrent_sufficient_conditions on Line(D, G), Line(D, E), h we get concurrent(h, Line(D, E), Line(D, G))
By concurrent_sufficient_conditions on Line(D, E), Line(E, I), Line(E, H) we get concurrent(Line(D, E), Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on i, Line(E, G), Line(E, I) we get concurrent(i, Line(E, G), Line(E, I))
By concurrent_sufficient_conditions on g, Line(D, E), Line(E, I) we get concurrent(g, Line(D, E), Line(E, I))
By concurrent_sufficient_conditions on Line(D, E), h, Line(D, G) we get concurrent(h, Line(D, E), Line(D, G))
By concurrent_sufficient_conditions on Line(D, G), Line(D, H), h we get concurrent(h, Line(D, G), Line(D, H))
By concurrent_sufficient_conditions on Line(D, E), i, Line(E, I) we get concurrent(i, Line(D, E), Line(E, I))
By line_definition on I, midpoint(A, E), Line(G, I) we get Line(G, I) == Line(I, midpoint(A, E))
By concurrent_sufficient_conditions on i, Line(E, H), Line(E, G) we get concurrent(i, Line(E, G), Line(E, H))
By concurrent_sufficient_conditions on Line(E, G), Line(E, H), Line(E, I) we get concurrent(Line(E, G), Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on i, Line(E, G), Line(D, E) we get concurrent(i, Line(D, E), Line(E, G))
By concurrent_sufficient_conditions on i, g, Line(E, G) we get concurrent(g, i, Line(E, G))
By concurrent_sufficient_conditions on Line(E, G), i, Line(E, I) we get concurrent(i, Line(E, G), Line(E, I))
By concurrent_sufficient_conditions on Line(E, I), i, Line(D, E) we get concurrent(i, Line(D, E), Line(E, I))
By concurrent_sufficient_conditions on Line(D, G), Line(A, B), Line(E, G) we get concurrent(Line(A, B), Line(D, G), Line(E, G))
By concurrent_sufficient_conditions on Line(G, I), Line(D, G), Line(A, B) we get concurrent(Line(A, B), Line(D, G), Line(G, I))
By concurrent_sufficient_conditions on Line(E, I), g, Line(D, E) we get concurrent(g, Line(D, E), Line(E, I))
By concurrent_sufficient_conditions on Line(E, H), g, Line(E, G) we get concurrent(g, Line(E, G), Line(E, H))
By concurrent_sufficient_conditions on Line(E, G), Line(D, E), g we get concurrent(g, Line(D, E), Line(E, G))
By concurrent_sufficient_conditions on Line(E, I), Line(G, I), h we get concurrent(h, Line(E, I), Line(G, I))
By concurrent_sufficient_conditions on Line(G, I), Line(A, B), Line(D, G) we get concurrent(Line(A, B), Line(D, G), Line(G, I))
By concurrent_sufficient_conditions on Line(E, I), Line(E, H), i we get concurrent(i, Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on Line(E, G), Line(E, I), Line(E, H) we get concurrent(Line(E, G), Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on Line(E, I), Line(D, E), i we get concurrent(i, Line(D, E), Line(E, I))
By concurrent_sufficient_conditions on Line(E, H), Line(E, G), g we get concurrent(g, Line(E, G), Line(E, H))
By concurrent_sufficient_conditions on Line(G, I), Line(E, G), Line(D, G) we get concurrent(Line(D, G), Line(E, G), Line(G, I))
By concurrent_sufficient_conditions on Line(D, G), h, Line(D, H) we get concurrent(h, Line(D, G), Line(D, H))
By concurrent_sufficient_conditions on Line(D, E), i, Line(E, G) we get concurrent(i, Line(D, E), Line(E, G))
By concurrent_sufficient_conditions on Line(D, E), f, Line(D, G) we get concurrent(f, Line(D, E), Line(D, G))
By concurrent_sufficient_conditions on Line(D, E), Line(E, G), g we get concurrent(g, Line(D, E), Line(E, G))
By concurrent_sufficient_conditions on g, Line(E, I), Line(E, G) we get concurrent(g, Line(E, G), Line(E, I))
By concurrent_sufficient_conditions on Line(E, G), Line(D, E), Line(E, I) we get concurrent(Line(D, E), Line(E, G), Line(E, I))
By concurrent_sufficient_conditions on Line(E, G), Line(D, G), Line(G, I) we get concurrent(Line(D, G), Line(E, G), Line(G, I))
By concurrent_sufficient_conditions on Line(D, E), Line(E, I), g we get concurrent(g, Line(D, E), Line(E, I))
By concurrent_sufficient_conditions on Line(E, G), g, Line(E, H) we get concurrent(g, Line(E, G), Line(E, H))
By concurrent_sufficient_conditions on Line(E, I), Line(E, H), g we get concurrent(g, Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on Line(G, I), Line(A, B), Line(E, G) we get concurrent(Line(A, B), Line(E, G), Line(G, I))
By concurrent_sufficient_conditions on Line(D, G), Line(G, I), Line(A, B) we get concurrent(Line(A, B), Line(D, G), Line(G, I))
By concurrent_sufficient_conditions on Line(E, G), i, Line(E, H) we get concurrent(i, Line(E, G), Line(E, H))
By concurrent_sufficient_conditions on Line(E, H), Line(D, E), Line(E, G) we get concurrent(Line(D, E), Line(E, G), Line(E, H))
By concurrent_sufficient_conditions on Line(E, H), Line(D, E), Line(E, I) we get concurrent(Line(D, E), Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on g, Line(E, G), i we get concurrent(g, i, Line(E, G))
By concurrent_sufficient_conditions on f, Line(D, G), Line(D, H) we get concurrent(f, Line(D, G), Line(D, H))
By concurrent_sufficient_conditions on Line(D, G), Line(G, I), Line(E, G) we get concurrent(Line(D, G), Line(E, G), Line(G, I))
By concurrent_sufficient_conditions on g, Line(E, G), Line(E, I) we get concurrent(g, Line(E, G), Line(E, I))
By concurrent_sufficient_conditions on Line(D, G), f, Line(D, E) we get concurrent(f, Line(D, E), Line(D, G))
By concurrent_sufficient_conditions on Line(A, B), Line(D, G), Line(E, G) we get concurrent(Line(A, B), Line(D, G), Line(E, G))
By concurrent_sufficient_conditions on Line(E, I), Line(D, E), Line(E, G) we get concurrent(Line(D, E), Line(E, G), Line(E, I))
By concurrent_sufficient_conditions on Line(E, G), Line(E, I), Line(D, E) we get concurrent(Line(D, E), Line(E, G), Line(E, I))
By concurrent_sufficient_conditions on i, Line(D, E), Line(E, I) we get concurrent(i, Line(D, E), Line(E, I))
By concurrent_sufficient_conditions on Line(E, G), i, g we get concurrent(g, i, Line(E, G))
By concurrent_sufficient_conditions on Line(E, I), Line(E, G), Line(D, E) we get concurrent(Line(D, E), Line(E, G), Line(E, I))
By concurrent_sufficient_conditions on Line(D, G), Line(D, H), Line(D, E) we get concurrent(Line(D, E), Line(D, G), Line(D, H))
By concurrent_sufficient_conditions on Line(E, G), Line(D, G), Line(A, B) we get concurrent(Line(A, B), Line(D, G), Line(E, G))
By concurrent_sufficient_conditions on i, Line(E, I), Line(E, G) we get concurrent(i, Line(E, G), Line(E, I))
By concurrent_sufficient_conditions on Line(A, B), Line(G, I), Line(D, G) we get concurrent(Line(A, B), Line(D, G), Line(G, I))
By concurrent_sufficient_conditions on Line(D, E), Line(D, G), Line(D, H) we get concurrent(Line(D, E), Line(D, G), Line(D, H))
By concurrent_sufficient_conditions on Line(E, G), Line(E, H), g we get concurrent(g, Line(E, G), Line(E, H))
By concurrent_sufficient_conditions on Line(E, I), Line(E, G), Line(E, H) we get concurrent(Line(E, G), Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on Line(E, I), Line(E, G), i we get concurrent(i, Line(E, G), Line(E, I))
By concurrent_sufficient_conditions on Line(E, H), g, Line(E, I) we get concurrent(g, Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on Line(E, I), g, Line(E, G) we get concurrent(g, Line(E, G), Line(E, I))
By concurrent_sufficient_conditions on f, Line(D, G), h we get concurrent(f, h, Line(D, G))
By concurrent_sufficient_conditions on Line(E, H), Line(E, I), i we get concurrent(i, Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on g, Line(E, I), Line(E, H) we get concurrent(g, Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on i, Line(E, I), Line(E, H) we get concurrent(i, Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on g, i, Line(E, G) we get concurrent(g, i, Line(E, G))
By concurrent_sufficient_conditions on g, Line(E, G), Line(E, H) we get concurrent(g, Line(E, G), Line(E, H))
By concurrent_sufficient_conditions on Line(A, B), Line(G, I), Line(E, G) we get concurrent(Line(A, B), Line(E, G), Line(G, I))
By concurrent_sufficient_conditions on i, g, Line(E, I) we get concurrent(g, i, Line(E, I))
By concurrent_sufficient_conditions on Line(E, H), Line(E, G), Line(D, E) we get concurrent(Line(D, E), Line(E, G), Line(E, H))
By concurrent_sufficient_conditions on h, Line(G, I), Line(E, I) we get concurrent(h, Line(E, I), Line(G, I))
By concurrent_sufficient_conditions on i, Line(D, E), Line(E, G) we get concurrent(i, Line(D, E), Line(E, G))
By concurrent_sufficient_conditions on f, Line(D, E), Line(D, G) we get concurrent(f, Line(D, E), Line(D, G))
By concurrent_sufficient_conditions on Line(D, G), Line(D, H), f we get concurrent(f, Line(D, G), Line(D, H))
By concurrent_sufficient_conditions on h, Line(D, G), f we get concurrent(f, h, Line(D, G))
By concurrent_sufficient_conditions on Line(D, G), Line(D, E), f we get concurrent(f, Line(D, E), Line(D, G))
By concurrent_sufficient_conditions on Line(D, G), f, h we get concurrent(f, h, Line(D, G))
By concurrent_sufficient_conditions on f, Line(D, H), Line(D, G) we get concurrent(f, Line(D, G), Line(D, H))
By concurrent_sufficient_conditions on g, Line(E, G), Line(D, E) we get concurrent(g, Line(D, E), Line(E, G))
By concurrent_sufficient_conditions on Line(E, H), Line(E, G), i we get concurrent(i, Line(E, G), Line(E, H))
By concurrent_sufficient_conditions on Line(A, B), Line(E, G), Line(D, G) we get concurrent(Line(A, B), Line(D, G), Line(E, G))
By concurrent_sufficient_conditions on Line(E, I), g, i we get concurrent(g, i, Line(E, I))
By concurrent_sufficient_conditions on Line(D, G), h, f we get concurrent(f, h, Line(D, G))
By concurrent_sufficient_conditions on Line(E, G), g, i we get concurrent(g, i, Line(E, G))
By concurrent_sufficient_conditions on Line(D, E), Line(D, H), Line(D, G) we get concurrent(Line(D, E), Line(D, G), Line(D, H))
By concurrent_sufficient_conditions on Line(E, G), Line(G, I), Line(A, B) we get concurrent(Line(A, B), Line(E, G), Line(G, I))
By concurrent_sufficient_conditions on Line(D, G), Line(E, G), Line(A, B) we get concurrent(Line(A, B), Line(D, G), Line(E, G))
By concurrent_sufficient_conditions on Line(D, E), Line(E, H), Line(E, G) we get concurrent(Line(D, E), Line(E, G), Line(E, H))
By concurrent_sufficient_conditions on Line(D, H), Line(D, G), Line(D, E) we get concurrent(Line(D, E), Line(D, G), Line(D, H))
By concurrent_sufficient_conditions on Line(E, I), i, Line(E, H) we get concurrent(i, Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on Line(E, H), Line(E, I), Line(E, G) we get concurrent(Line(E, G), Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on g, Line(D, E), Line(E, G) we get concurrent(g, Line(D, E), Line(E, G))
By concurrent_sufficient_conditions on Line(E, I), i, Line(E, G) we get concurrent(i, Line(E, G), Line(E, I))
By concurrent_sufficient_conditions on Line(D, G), h, Line(D, E) we get concurrent(h, Line(D, E), Line(D, G))
By concurrent_sufficient_conditions on Line(E, I), Line(D, E), Line(E, H) we get concurrent(Line(D, E), Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on Line(A, B), Line(D, G), Line(G, I) we get concurrent(Line(A, B), Line(D, G), Line(G, I))
By concurrent_sufficient_conditions on Line(D, H), Line(D, G), f we get concurrent(f, Line(D, G), Line(D, H))
By concurrent_sufficient_conditions on Line(G, I), Line(E, G), Line(A, B) we get concurrent(Line(A, B), Line(E, G), Line(G, I))
By concurrent_sufficient_conditions on i, Line(E, G), Line(E, H) we get concurrent(i, Line(E, G), Line(E, H))
By concurrent_sufficient_conditions on f, h, Line(D, G) we get concurrent(f, h, Line(D, G))
By concurrent_sufficient_conditions on Line(D, G), f, Line(D, H) we get concurrent(f, Line(D, G), Line(D, H))
By line_definition on G, midpoint(A, E), Line(G, I) we get Line(G, I) == Line(G, midpoint(A, E))
By concurrent_sufficient_conditions on Line(G, I), Line(E, I), h we get concurrent(h, Line(E, I), Line(G, I))
By concurrent_sufficient_conditions on Line(D, E), Line(D, G), f we get concurrent(f, Line(D, E), Line(D, G))
By concurrent_sufficient_conditions on Line(D, H), f, Line(D, G) we get concurrent(f, Line(D, G), Line(D, H))
By concurrent_sufficient_conditions on h, Line(D, G), Line(D, H) we get concurrent(h, Line(D, G), Line(D, H))
By concurrent_sufficient_conditions on Line(D, H), Line(D, E), Line(D, G) we get concurrent(Line(D, E), Line(D, G), Line(D, H))
By concurrent_sufficient_conditions on Line(E, G), i, Line(D, E) we get concurrent(i, Line(D, E), Line(E, G))
By concurrent_sufficient_conditions on h, Line(E, I), Line(G, I) we get concurrent(h, Line(E, I), Line(G, I))
By concurrent_sufficient_conditions on Line(E, G), Line(E, H), Line(D, E) we get concurrent(Line(D, E), Line(E, G), Line(E, H))
By concurrent_sufficient_conditions on Line(G, I), h, Line(E, I) we get concurrent(h, Line(E, I), Line(G, I))
By concurrent_sufficient_conditions on Line(D, E), Line(E, H), Line(E, I) we get concurrent(Line(D, E), Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on g, Line(E, I), Line(D, E) we get concurrent(g, Line(D, E), Line(E, I))
By concurrent_sufficient_conditions on Line(E, H), Line(E, I), Line(D, E) we get concurrent(Line(D, E), Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on Line(D, E), Line(E, G), i we get concurrent(i, Line(D, E), Line(E, G))
By concurrent_sufficient_conditions on Line(A, B), Line(E, G), Line(G, I) we get concurrent(Line(A, B), Line(E, G), Line(G, I))
By concurrent_sufficient_conditions on Line(E, G), Line(E, I), i we get concurrent(i, Line(E, G), Line(E, I))
By concurrent_sufficient_conditions on Line(G, I), Line(D, G), Line(E, G) we get concurrent(Line(D, G), Line(E, G), Line(G, I))
By concurrent_sufficient_conditions on i, Line(E, H), Line(E, I) we get concurrent(i, Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on Line(E, H), Line(E, I), g we get concurrent(g, Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on Line(D, G), Line(D, E), Line(D, H) we get concurrent(Line(D, E), Line(D, G), Line(D, H))
By concurrent_sufficient_conditions on Line(E, G), Line(G, I), Line(D, G) we get concurrent(Line(D, G), Line(E, G), Line(G, I))
By concurrent_sufficient_conditions on g, Line(E, H), Line(E, G) we get concurrent(g, Line(E, G), Line(E, H))
By angles_on_chord_v1 on D, F, C, E, c we get angle(D, C, F) == angle(D, E, F) mod 360
By angles_on_chord_v1 on C, D, F, E, c we get angle(C, E, D) == angle(C, F, D) mod 360
By angles_on_chord_v1 on E, C, D, F, c we get angle(E, D, C) == angle(E, F, C) mod 360
By angles_on_chord_v0 on E, F, C, D, c we get angle(E, C, F) == angle(E, D, F) mod 360
By angles_on_chord_v0 on D, C, F, E, c we get angle(D, E, C) == angle(D, F, C) mod 360
By angles_on_chord_v1 on F, E, D, C, c we get angle(F, C, E) == angle(F, D, E) mod 360
By angles_on_chord_v0 on C, E, F, D, c we get angle(C, D, E) == angle(C, F, E) mod 360
By angles_on_chord_v0 on F, D, C, E, c we get angle(F, C, D) == angle(F, E, D) mod 360
By median_definition on I, E, A, Line(G, I) we get Line(G, I) == median(I, A, E)
By perpendicular_line_definition on I, Line(G, I), g we get Line(G, I) == perpendicular_line(I, g)
By median_definition on midpoint(A, E), B, A, Line(G, I) we get Line(G, I) == median(midpoint(A, E), A, B)
By line_intersection_definition on E, radical_axis(c, Circle(A, B, D)), i we get E == line_intersection(i, radical_axis(c, Circle(A, B, D)))
By median_definition on G, E, A, Line(G, I) we get Line(G, I) == median(G, A, E)
By line_intersection_definition on E, radical_axis(c, Circle(A, E, F)), Line(E, I) we get E == line_intersection(Line(E, I), radical_axis(c, Circle(A, E, F)))
By line_intersection_definition on D, radical_axis(c, Circle(A, B, D)), Line(D, H) we get D == line_intersection(Line(D, H), radical_axis(c, Circle(A, B, D)))
By line_intersection_definition on E, g, radical_axis(c, Circle(A, B, D)) we get E == line_intersection(g, radical_axis(c, Circle(A, B, D)))
By line_intersection_definition on D, Line(D, G), radical_axis(c, Circle(A, B, D)) we get D == line_intersection(Line(D, G), radical_axis(c, Circle(A, B, D)))
By line_intersection_definition on E, Line(D, E), radical_axis(c, Circle(A, E, F)) we get E == line_intersection(Line(D, E), radical_axis(c, Circle(A, E, F)))
By line_intersection_definition on E, radical_axis(c, Circle(A, B, D)), Line(E, G) we get E == line_intersection(Line(E, G), radical_axis(c, Circle(A, B, D)))
By line_intersection_definition on E, Line(E, I), radical_axis(c, Circle(A, B, D)) we get E == line_intersection(Line(E, I), radical_axis(c, Circle(A, B, D)))
By perpendicular_line_definition on G, Line(G, I), g we get Line(G, I) == perpendicular_line(G, g)
By line_intersection_definition on D, f, radical_axis(c, Circle(A, B, D)) we get D == line_intersection(f, radical_axis(c, Circle(A, B, D)))
By line_intersection_definition on D, radical_axis(c, Circle(A, B, D)), h we get D == line_intersection(h, radical_axis(c, Circle(A, B, D)))
By line_intersection_definition on E, Line(E, H), radical_axis(c, Circle(A, B, D)) we get E == line_intersection(Line(E, H), radical_axis(c, Circle(A, B, D)))
By line_intersection_definition on E, Line(E, H), radical_axis(c, Circle(A, E, F)) we get E == line_intersection(Line(E, H), radical_axis(c, Circle(A, E, F)))
By perpendicular_line_definition on A, g, Line(G, I) we get g == perpendicular_line(A, Line(G, I))
By line_intersection_definition on E, radical_axis(c, Circle(A, E, F)), Line(E, G) we get E == line_intersection(Line(E, G), radical_axis(c, Circle(A, E, F)))
By perpendicular_line_definition on C, g, Line(G, I) we get g == perpendicular_line(C, Line(G, I))
By line_intersection_definition on E, radical_axis(c, Circle(A, E, F)), radical_axis(c, Circle(A, B, D)) we get E == line_intersection(radical_axis(c, Circle(A, B, D)), radical_axis(c, Circle(A, E, F)))
By line_intersection_definition on E, g, radical_axis(c, Circle(A, E, F)) we get E == line_intersection(g, radical_axis(c, Circle(A, E, F)))
By perpendicular_line_definition on E, g, Line(G, I) we get g == perpendicular_line(E, Line(G, I))
By median_definition on midpoint(A, E), F, A, Line(G, I) we get Line(G, I) == median(midpoint(A, E), A, F)
By circle_radius_v0_r on F, c we get radius(c) == distance(F, center(c))
By angle_to_center on C, D, F, c we get 2 * angle(C, D, F) == angle(C, center(c), F) mod 360
By angle_to_center on F, C, D, c we get 2 * angle(F, C, D) == angle(F, center(c), D) mod 360
By angle_to_center on C, E, F, c we get 2 * angle(C, E, F) == angle(C, center(c), F) mod 360
By angle_to_center on D, C, F, c we get 2 * angle(D, C, F) == angle(D, center(c), F) mod 360
By angle_to_center on F, D, C, c we get 2 * angle(F, D, C) == angle(F, center(c), C) mod 360
By angle_to_center on F, C, E, c we get 2 * angle(F, C, E) == angle(F, center(c), E) mod 360
By angle_to_center on F, D, E, c we get 2 * angle(F, D, E) == angle(F, center(c), E) mod 360
By angle_to_center on F, E, D, c we get 2 * angle(F, E, D) == angle(F, center(c), D) mod 360
By angle_to_center on F, E, C, c we get 2 * angle(F, E, C) == angle(F, center(c), C) mod 360
By angle_to_center on E, D, F, c we get 2 * angle(E, D, F) == angle(E, center(c), F) mod 360
By angle_to_center on E, C, F, c we get 2 * angle(E, C, F) == angle(E, center(c), F) mod 360
By angle_to_center on D, E, F, c we get 2 * angle(D, E, F) == angle(D, center(c), F) mod 360
By perpendicular_direction_conditions_v0 on D, G, H, D we get perpendicular(Line(D, G), Line(D, H))
By perpendicular_direction_conditions_v0 on H, C, B, G we get perpendicular(Line(B, G), Line(C, H))
By perpendicular_direction_conditions_v0 on C, H, A, G we get perpendicular(Line(A, G), Line(C, H))
By perpendicular_direction_conditions_v0 on G, E, E, H we get perpendicular(Line(E, G), Line(E, H))
By perpendicular_direction_conditions_v0 on C, H, A, B we get perpendicular(Line(A, B), Line(C, H))
By projection_definition on B, line_intersection(Line(A, B), Line(C, F)), Line(C, F) we get projection(B, Line(C, F)) == line_intersection(Line(A, B), Line(C, F))
By projection_definition on A, line_intersection(Line(A, B), Line(C, F)), Line(C, F) we get projection(A, Line(C, F)) == line_intersection(Line(A, B), Line(C, F))
By projection_definition on C, line_intersection(Line(A, B), Line(C, F)), Line(A, B) we get projection(C, Line(A, B)) == line_intersection(Line(A, B), Line(C, F))
By projection_definition on F, line_intersection(Line(A, B), Line(C, F)), Line(A, B) we get projection(F, Line(A, B)) == line_intersection(Line(A, B), Line(C, F))
By projection_definition on G, line_intersection(Line(A, B), Line(C, F)), Line(C, F) we get projection(G, Line(C, F)) == line_intersection(Line(A, B), Line(C, F))
By between_imply_not_between on E, midpoint(A, E), A we get collinear_and_not_between(A, E, midpoint(A, E))
By between_imply_not_between on A, midpoint(A, E), E we get collinear_and_not_between(E, A, midpoint(A, E))
By perpendicular_direction_conditions_v0_r on B, line_intersection(Line(A, B), Line(C, F)), F, C we get 180 == 2 * direction(B, line_intersection(Line(A, B), Line(C, F))) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on G, A, line_intersection(Line(A, B), Line(C, F)), F we get 180 == 2 * direction(G, A) - 2 * direction(line_intersection(Line(A, B), Line(C, F)), F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, B), Line(C, F)), C, B, A we get 180 == 2 * direction(line_intersection(Line(A, B), Line(C, F)), C) - 2 * direction(B, A) mod 360
By divide_by_2_mod_180_v1 on B, C, F, F, A, B we get angle(B, C, F) == angle(F, A, B) mod 360
By perpendicular_direction_conditions_v0_r on C, F, line_intersection(Line(A, B), Line(C, F)), A we get 180 == 2 * direction(C, F) - 2 * direction(line_intersection(Line(A, B), Line(C, F)), A) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(Line(A, B), Line(C, F)), A, G we get 180 == 2 * direction(C, line_intersection(Line(A, B), Line(C, F))) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on G, A, F, line_intersection(Line(A, B), Line(C, F)) we get 180 == 2 * direction(G, A) - 2 * direction(F, line_intersection(Line(A, B), Line(C, F))) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(Line(A, B), Line(C, F)), A, B we get 180 == 2 * direction(C, line_intersection(Line(A, B), Line(C, F))) - 2 * direction(A, B) mod 360
By tangent_chord_angle_v1 on E, A, B, H we get tangent(Line(E, H), Circle(A, B, E))
By perpendicular_direction_conditions_v0_r on A, B, F, line_intersection(Line(A, B), Line(C, F)) we get 180 == 2 * direction(A, B) - 2 * direction(F, line_intersection(Line(A, B), Line(C, F))) mod 360
By sss_anti_similarity_v1 on G, I, A, G, I, E we get anti_similar_triangles(A, G, I, E, G, I)
By divide_by_2_mod_180_v1 on A, B, D, C, F, D we get angle(A, B, D) == angle(C, F, D) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(Line(A, B), Line(C, F)), G, A we get 180 == 2 * direction(C, line_intersection(Line(A, B), Line(C, F))) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(Line(A, B), Line(C, F)), F, C we get 180 == 2 * direction(A, line_intersection(Line(A, B), Line(C, F))) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(A, B), Line(C, F)), B, G we get 180 == 2 * direction(F, line_intersection(Line(A, B), Line(C, F))) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, B), Line(C, F)), C, B, G we get 180 == 2 * direction(line_intersection(Line(A, B), Line(C, F)), C) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, B), Line(C, F)), A, C, F we get 180 == 2 * direction(line_intersection(Line(A, B), Line(C, F)), A) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, B), Line(C, F)), F, A, G we get 180 == 2 * direction(line_intersection(Line(A, B), Line(C, F)), F) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, B), Line(C, F)), B, C, F we get 180 == 2 * direction(line_intersection(Line(A, B), Line(C, F)), B) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(A, B), Line(C, F)), G, A we get 180 == 2 * direction(F, line_intersection(Line(A, B), Line(C, F))) - 2 * direction(G, A) mod 360
By divide_by_2_mod_180_v0 on E, C, F, E, D, I we get angle(E, C, F) == angle(E, D, I) mod 360
By perpendicular_direction_conditions_v0_r on A, G, line_intersection(Line(A, B), Line(C, F)), C we get 180 == 2 * direction(A, G) - 2 * direction(line_intersection(Line(A, B), Line(C, F)), C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, B), Line(C, F)), F, G, B we get 180 == 2 * direction(line_intersection(Line(A, B), Line(C, F)), F) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on F, C, line_intersection(Line(A, B), Line(C, F)), B we get 180 == 2 * direction(F, C) - 2 * direction(line_intersection(Line(A, B), Line(C, F)), B) mod 360
By divide_by_2_mod_180_v3 on A, D, H, C, F, A we get angle(A, D, H) == angle(C, F, A) + 180 mod 360
By perpendicular_direction_conditions_v0_r on C, F, line_intersection(Line(A, B), Line(C, F)), G we get 180 == 2 * direction(C, F) - 2 * direction(line_intersection(Line(A, B), Line(C, F)), G) mod 360
By divide_by_2_mod_180_v0 on D, F, C, G, D, B we get angle(D, F, C) == angle(G, D, B) mod 360
By perpendicular_direction_conditions_v0_r on C, F, A, line_intersection(Line(A, B), Line(C, F)) we get 180 == 2 * direction(C, F) - 2 * direction(A, line_intersection(Line(A, B), Line(C, F))) mod 360
By perpendicular_direction_conditions_v0_r on F, C, G, line_intersection(Line(A, B), Line(C, F)) we get 180 == 2 * direction(F, C) - 2 * direction(G, line_intersection(Line(A, B), Line(C, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, B), Line(C, F)), F, A, B we get 180 == 2 * direction(line_intersection(Line(A, B), Line(C, F)), F) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on B, G, C, line_intersection(Line(A, B), Line(C, F)) we get 180 == 2 * direction(B, G) - 2 * direction(C, line_intersection(Line(A, B), Line(C, F))) mod 360
By perpendicular_direction_conditions_v0_r on A, G, line_intersection(Line(A, B), Line(C, F)), F we get 180 == 2 * direction(A, G) - 2 * direction(line_intersection(Line(A, B), Line(C, F)), F) mod 360
By perpendicular_direction_conditions_v0_r on F, C, B, line_intersection(Line(A, B), Line(C, F)) we get 180 == 2 * direction(F, C) - 2 * direction(B, line_intersection(Line(A, B), Line(C, F))) mod 360
By perpendicular_direction_conditions_v0_r on C, F, G, line_intersection(Line(A, B), Line(C, F)) we get 180 == 2 * direction(C, F) - 2 * direction(G, line_intersection(Line(A, B), Line(C, F))) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(A, B), Line(C, F)), A, G we get 180 == 2 * direction(F, line_intersection(Line(A, B), Line(C, F))) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on G, B, line_intersection(Line(A, B), Line(C, F)), F we get 180 == 2 * direction(G, B) - 2 * direction(line_intersection(Line(A, B), Line(C, F)), F) mod 360
By perpendicular_direction_conditions_v0_r on B, G, line_intersection(Line(A, B), Line(C, F)), F we get 180 == 2 * direction(B, G) - 2 * direction(line_intersection(Line(A, B), Line(C, F)), F) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(Line(A, B), Line(C, F)), B, A we get 180 == 2 * direction(C, line_intersection(Line(A, B), Line(C, F))) - 2 * direction(B, A) mod 360
By divide_by_2_mod_180_v0 on I, G, A, A, C, F we get angle(A, C, F) == angle(I, G, A) mod 360
By divide_by_2_mod_180_v0 on F, C, B, G, A, F we get angle(F, C, B) == angle(G, A, F) mod 360
By anti_similar_triangle_basic_properties on E, F, I, D, E, G we get angle(E, F, I) == 0 - angle(D, E, G) mod 360, angle(F, I, E) == 0 - angle(E, G, D) mod 360, angle(I, E, F) == 0 - angle(G, D, E) mod 360, log(distance(D, E)) + log(distance(F, I)) == log(distance(E, F)) + log(distance(E, G)), log(distance(E, G)) + log(distance(E, I)) == log(distance(F, I)) + log(distance(D, G)), log(distance(D, G)) + log(distance(E, F)) == log(distance(E, I)) + log(distance(D, E))
By perpendicular_direction_conditions_v0_r on C, F, B, line_intersection(Line(A, B), Line(C, F)) we get 180 == 2 * direction(C, F) - 2 * direction(B, line_intersection(Line(A, B), Line(C, F))) mod 360
By tangent_chord_angle_v1 on D, B, A, H we get tangent(Line(D, H), Circle(A, B, D))
By perpendicular_direction_conditions_v0_r on B, A, line_intersection(Line(A, B), Line(C, F)), C we get 180 == 2 * direction(B, A) - 2 * direction(line_intersection(Line(A, B), Line(C, F)), C) mod 360
By perpendicular_direction_conditions_v0_r on C, F, line_intersection(Line(A, B), Line(C, F)), B we get 180 == 2 * direction(C, F) - 2 * direction(line_intersection(Line(A, B), Line(C, F)), B) mod 360
By perpendicular_direction_conditions_v0_r on G, A, C, line_intersection(Line(A, B), Line(C, F)) we get 180 == 2 * direction(G, A) - 2 * direction(C, line_intersection(Line(A, B), Line(C, F))) mod 360
By perpendicular_direction_conditions_v0_r on F, C, A, line_intersection(Line(A, B), Line(C, F)) we get 180 == 2 * direction(F, C) - 2 * direction(A, line_intersection(Line(A, B), Line(C, F))) mod 360
By perpendicular_direction_conditions_v0_r on A, G, C, line_intersection(Line(A, B), Line(C, F)) we get 180 == 2 * direction(A, G) - 2 * direction(C, line_intersection(Line(A, B), Line(C, F))) mod 360
By perpendicular_direction_conditions_v0_r on A, B, line_intersection(Line(A, B), Line(C, F)), F we get 180 == 2 * direction(A, B) - 2 * direction(line_intersection(Line(A, B), Line(C, F)), F) mod 360
By divide_by_2_mod_180_v0 on F, B, G, A, C, F we get angle(A, C, F) == angle(F, B, G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, B), Line(C, F)), C, G, B we get 180 == 2 * direction(line_intersection(Line(A, B), Line(C, F)), C) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on B, A, line_intersection(Line(A, B), Line(C, F)), F we get 180 == 2 * direction(B, A) - 2 * direction(line_intersection(Line(A, B), Line(C, F)), F) mod 360
By perpendicular_direction_conditions_v0_r on A, G, F, line_intersection(Line(A, B), Line(C, F)) we get 180 == 2 * direction(A, G) - 2 * direction(F, line_intersection(Line(A, B), Line(C, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, B), Line(C, F)), B, F, C we get 180 == 2 * direction(line_intersection(Line(A, B), Line(C, F)), B) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(Line(A, B), Line(C, F)), C, F we get 180 == 2 * direction(G, line_intersection(Line(A, B), Line(C, F))) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, B), Line(C, F)), C, A, G we get 180 == 2 * direction(line_intersection(Line(A, B), Line(C, F)), C) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(Line(A, B), Line(C, F)), B, G we get 180 == 2 * direction(C, line_intersection(Line(A, B), Line(C, F))) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on G, B, line_intersection(Line(A, B), Line(C, F)), C we get 180 == 2 * direction(G, B) - 2 * direction(line_intersection(Line(A, B), Line(C, F)), C) mod 360
By perpendicular_direction_conditions_v0_r on A, B, C, line_intersection(Line(A, B), Line(C, F)) we get 180 == 2 * direction(A, B) - 2 * direction(C, line_intersection(Line(A, B), Line(C, F))) mod 360
By divide_by_2_mod_180_v1 on B, C, F, I, A, G we get angle(B, C, F) == angle(I, A, G) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(Line(A, B), Line(C, F)), C, F we get 180 == 2 * direction(A, line_intersection(Line(A, B), Line(C, F))) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(Line(A, B), Line(C, F)), C, F we get 180 == 2 * direction(B, line_intersection(Line(A, B), Line(C, F))) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(Line(A, B), Line(C, F)), G, B we get 180 == 2 * direction(C, line_intersection(Line(A, B), Line(C, F))) - 2 * direction(G, B) mod 360
By divide_by_2_mod_180_v1 on D, E, A, A, F, C we get angle(A, F, C) == angle(D, E, A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, B), Line(C, F)), F, B, G we get 180 == 2 * direction(line_intersection(Line(A, B), Line(C, F)), F) - 2 * direction(B, G) mod 360
By divide_by_2_mod_180_v2 on G, E, C, E, F, C we get angle(G, E, C) == angle(E, F, C) + 180 mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, B), Line(C, F)), A, F, C we get 180 == 2 * direction(line_intersection(Line(A, B), Line(C, F)), A) - 2 * direction(F, C) mod 360
By divide_by_2_mod_180_v0 on F, C, B, H, C, D we get angle(F, C, B) == angle(H, C, D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, B), Line(C, F)), F, G, A we get 180 == 2 * direction(line_intersection(Line(A, B), Line(C, F)), F) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, B), Line(C, F)), F, B, A we get 180 == 2 * direction(line_intersection(Line(A, B), Line(C, F)), F) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, B), Line(C, F)), G, C, F we get 180 == 2 * direction(line_intersection(Line(A, B), Line(C, F)), G) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on F, C, line_intersection(Line(A, B), Line(C, F)), A we get 180 == 2 * direction(F, C) - 2 * direction(line_intersection(Line(A, B), Line(C, F)), A) mod 360
By sss_anti_similarity_v0 on I, E, G, F, A, B we get anti_similar_triangles(A, B, F, E, G, I)
By divide_by_2_mod_180_v1 on F, C, E, A, B, E we get angle(A, B, E) == angle(F, C, E) mod 360
By perpendicular_direction_conditions_v0_r on G, B, F, line_intersection(Line(A, B), Line(C, F)) we get 180 == 2 * direction(G, B) - 2 * direction(F, line_intersection(Line(A, B), Line(C, F))) mod 360
By divide_by_2_mod_180_v1 on C, F, D, A, B, C we get angle(A, B, C) == angle(C, F, D) mod 360
By divide_by_2_mod_180_v2 on C, F, I, G, B, D we get angle(C, F, I) == angle(G, B, D) + 180 mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(A, B), Line(C, F)), B, A we get 180 == 2 * direction(F, line_intersection(Line(A, B), Line(C, F))) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on A, B, line_intersection(Line(A, B), Line(C, F)), C we get 180 == 2 * direction(A, B) - 2 * direction(line_intersection(Line(A, B), Line(C, F)), C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, B), Line(C, F)), C, G, A we get 180 == 2 * direction(line_intersection(Line(A, B), Line(C, F)), C) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on B, G, F, line_intersection(Line(A, B), Line(C, F)) we get 180 == 2 * direction(B, G) - 2 * direction(F, line_intersection(Line(A, B), Line(C, F))) mod 360
By perpendicular_direction_conditions_v0_r on B, G, line_intersection(Line(A, B), Line(C, F)), C we get 180 == 2 * direction(B, G) - 2 * direction(line_intersection(Line(A, B), Line(C, F)), C) mod 360
By divide_by_2_mod_180_v2 on H, D, F, I, F, C we get angle(H, D, F) == angle(I, F, C) + 180 mod 360
By divide_by_2_mod_180_v2 on C, D, E, C, F, B we get angle(C, D, E) == angle(C, F, B) + 180 mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, B), Line(C, F)), G, F, C we get 180 == 2 * direction(line_intersection(Line(A, B), Line(C, F)), G) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on G, A, line_intersection(Line(A, B), Line(C, F)), C we get 180 == 2 * direction(G, A) - 2 * direction(line_intersection(Line(A, B), Line(C, F)), C) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(A, B), Line(C, F)), A, B we get 180 == 2 * direction(F, line_intersection(Line(A, B), Line(C, F))) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, B), Line(C, F)), C, A, B we get 180 == 2 * direction(line_intersection(Line(A, B), Line(C, F)), C) - 2 * direction(A, B) mod 360
By divide_by_2_mod_180_v0 on C, F, E, B, A, E we get angle(B, A, E) == angle(C, F, E) mod 360
By perpendicular_direction_conditions_v0_r on B, A, C, line_intersection(Line(A, B), Line(C, F)) we get 180 == 2 * direction(B, A) - 2 * direction(C, line_intersection(Line(A, B), Line(C, F))) mod 360
By perpendicular_direction_conditions_v0_r on G, B, C, line_intersection(Line(A, B), Line(C, F)) we get 180 == 2 * direction(G, B) - 2 * direction(C, line_intersection(Line(A, B), Line(C, F))) mod 360
By perpendicular_direction_conditions_v0_r on B, A, F, line_intersection(Line(A, B), Line(C, F)) we get 180 == 2 * direction(B, A) - 2 * direction(F, line_intersection(Line(A, B), Line(C, F))) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(A, B), Line(C, F)), G, B we get 180 == 2 * direction(F, line_intersection(Line(A, B), Line(C, F))) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(Line(A, B), Line(C, F)), F, C we get 180 == 2 * direction(G, line_intersection(Line(A, B), Line(C, F))) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on F, C, line_intersection(Line(A, B), Line(C, F)), G we get 180 == 2 * direction(F, C) - 2 * direction(line_intersection(Line(A, B), Line(C, F)), G) mod 360
By divide_by_2_mod_180_v0 on B, E, D, F, C, D we get angle(B, E, D) == angle(F, C, D) mod 360
By divide_by_2_mod_180_v2 on C, F, A, F, D, H we get angle(C, F, A) == angle(F, D, H) + 180 mod 360
By divide_by_2_mod_180_v0 on E, C, F, E, D, A we get angle(E, C, F) == angle(E, D, A) mod 360
By similar_triangle_basic_properties on F, I, E, D, G, E we get angle(D, G, E) == angle(F, I, E) mod 360, angle(G, E, D) == angle(I, E, F) mod 360, angle(E, D, G) == angle(E, F, I) mod 360, log(distance(D, G)) + log(distance(E, I)) == log(distance(F, I)) + log(distance(E, G)), log(distance(E, G)) + log(distance(E, F)) == log(distance(E, I)) + log(distance(D, E)), log(distance(D, E)) + log(distance(F, I)) == log(distance(E, F)) + log(distance(D, G))
By divide_by_2_mod_180_v1 on C, A, B, E, F, C we get angle(C, A, B) == angle(E, F, C) mod 360
By divide_by_2_mod_180_v1 on B, E, G, F, C, E we get angle(B, E, G) == angle(F, C, E) mod 360
By divide_by_2_mod_180_v2 on C, F, I, I, D, H we get angle(C, F, I) == angle(I, D, H) + 180 mod 360
By divide_by_2_mod_180_v1 on B, C, F, H, D, C we get angle(B, C, F) == angle(H, D, C) mod 360
By divide_by_2_mod_180_v2 on D, E, C, I, F, C we get angle(D, E, C) == angle(I, F, C) + 180 mod 360
By divide_by_2_mod_180_v2 on B, A, C, C, F, B we get angle(B, A, C) == angle(C, F, B) + 180 mod 360
By sas_anti_similarity on D, A, E, C, A, F we get anti_similar_triangles(A, C, F, A, D, E)
By divide_by_2_mod_180_v1 on G, B, C, C, F, D we get angle(C, F, D) == angle(G, B, C) mod 360
By divide_by_2_mod_180_v3 on G, B, D, C, F, A we get angle(G, B, D) == angle(C, F, A) + 180 mod 360
By divide_by_2_mod_180_v2 on C, B, G, I, F, C we get angle(C, B, G) == angle(I, F, C) + 180 mod 360
By sss_anti_similarity_v0 on I, E, G, I, A, G we get anti_similar_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v0 on G, A, I, G, E, I we get anti_similar_triangles(A, G, I, E, G, I)
By divide_by_2_mod_180_v1 on D, E, B, B, C, F we get angle(B, C, F) == angle(D, E, B) mod 360
By divide_by_2_mod_180_v3 on C, F, B, F, E, H we get angle(C, F, B) == angle(F, E, H) + 180 mod 360
By divide_by_2_mod_180_v3 on G, D, C, D, F, C we get angle(G, D, C) == angle(D, F, C) + 180 mod 360
By divide_by_2_mod_180_v1 on F, C, A, G, B, E we get angle(F, C, A) == angle(G, B, E) mod 360
By divide_by_2_mod_180_v0 on A, C, F, E, D, F we get angle(A, C, F) == angle(E, D, F) mod 360
By divide_by_2_mod_180_v1 on D, A, G, D, C, F we get angle(D, A, G) == angle(D, C, F) mod 360
By divide_by_2_mod_180_v3 on A, D, H, C, F, I we get angle(A, D, H) == angle(C, F, I) + 180 mod 360
By divide_by_2_mod_180_v0 on G, A, I, F, C, D we get angle(F, C, D) == angle(G, A, I) mod 360
By divide_by_2_mod_180_v0 on C, B, A, D, F, C we get angle(C, B, A) == angle(D, F, C) mod 360
By divide_by_2_mod_180_v1 on G, D, C, A, F, C we get angle(A, F, C) == angle(G, D, C) mod 360
By divide_by_2_mod_180_v3 on C, F, B, B, A, C we get angle(C, F, B) == angle(B, A, C) + 180 mod 360
By divide_by_2_mod_180_v2 on C, B, G, A, F, C we get angle(C, B, G) == angle(A, F, C) + 180 mod 360
By divide_by_2_mod_180_v0 on D, B, A, D, F, C we get angle(D, B, A) == angle(D, F, C) mod 360
By divide_by_2_mod_180_v0 on A, C, F, E, C, H we get angle(A, C, F) == angle(E, C, H) mod 360
By divide_by_2_mod_180_v1 on F, A, B, D, C, F we get angle(D, C, F) == angle(F, A, B) mod 360
By divide_by_2_mod_180_v2 on C, B, A, I, F, C we get angle(C, B, A) == angle(I, F, C) + 180 mod 360
By divide_by_2_mod_180_v0 on H, E, C, E, C, F we get angle(E, C, F) == angle(H, E, C) mod 360
By tangent_chord_angle_v1 on D, C, E, G we get tangent(Line(D, G), Circle(C, D, E))
By divide_by_2_mod_180_v0 on B, A, F, F, C, D we get angle(B, A, F) == angle(F, C, D) mod 360
By divide_by_2_mod_180_v0 on A, E, D, C, F, I we get angle(A, E, D) == angle(C, F, I) mod 360
By divide_by_2_mod_180_v3 on F, C, E, B, G, I we get angle(F, C, E) == angle(B, G, I) + 180 mod 360
By parallel_line_angles_v1 on I, G, B, F we get parallel(Line(B, F), Line(G, I))
By divide_by_2_mod_180_v1 on I, D, H, C, F, D we get angle(C, F, D) == angle(I, D, H) mod 360
By divide_by_2_mod_180_v2 on C, F, A, A, B, D we get angle(C, F, A) == angle(A, B, D) + 180 mod 360
By divide_by_2_mod_180_v0 on G, E, F, A, C, F we get angle(A, C, F) == angle(G, E, F) mod 360
By divide_by_2_mod_180_v1 on F, C, A, F, E, G we get angle(F, C, A) == angle(F, E, G) mod 360
By divide_by_2_mod_180_v3 on C, F, D, A, E, D we get angle(C, F, D) == angle(A, E, D) + 180 mod 360
By divide_by_2_mod_180_v0 on E, D, A, A, C, F we get angle(A, C, F) == angle(E, D, A) mod 360
By divide_by_2_mod_180_v2 on A, E, H, F, C, A we get angle(A, E, H) == angle(F, C, A) + 180 mod 360
By divide_by_2_mod_180_v3 on I, F, C, C, B, G we get angle(I, F, C) == angle(C, B, G) + 180 mod 360
By divide_by_2_mod_180_v0 on C, F, E, F, E, H we get angle(C, F, E) == angle(F, E, H) mod 360
By divide_by_2_mod_180_v3 on A, F, C, C, B, G we get angle(A, F, C) == angle(C, B, G) + 180 mod 360
By divide_by_2_mod_180_v1 on F, C, A, G, B, F we get angle(F, C, A) == angle(G, B, F) mod 360
By sss_anti_similarity_v0 on I, G, A, I, G, E we get anti_similar_triangles(A, G, I, E, G, I)
By divide_by_2_mod_180_v0 on D, F, C, D, B, G we get angle(D, B, G) == angle(D, F, C) mod 360
By divide_by_2_mod_180_v2 on A, E, G, C, F, B we get angle(A, E, G) == angle(C, F, B) + 180 mod 360
By divide_by_2_mod_180_v0 on I, D, G, F, C, B we get angle(F, C, B) == angle(I, D, G) mod 360
By tangent_chord_angle_v1 on E, D, F, G we get tangent(Line(E, G), Circle(D, E, F))
By divide_by_2_mod_180_v0 on G, E, F, E, C, F we get angle(E, C, F) == angle(G, E, F) mod 360
By divide_by_2_mod_180_v2 on B, F, C, H, E, B we get angle(B, F, C) == angle(H, E, B) + 180 mod 360
By divide_by_2_mod_180_v1 on D, C, F, G, D, F we get angle(D, C, F) == angle(G, D, F) mod 360
By sas_similarity on C, E, F, B, E, A we get similar_triangles(A, B, E, F, C, E)
By divide_by_2_mod_180_v1 on G, E, A, E, F, C we get angle(E, F, C) == angle(G, E, A) mod 360
By divide_by_2_mod_180_v1 on D, C, F, H, D, C we get angle(D, C, F) == angle(H, D, C) mod 360
By divide_by_2_mod_180_v1 on B, C, F, D, A, G we get angle(B, C, F) == angle(D, A, G) mod 360
By divide_by_2_mod_180_v0 on B, E, H, C, F, E we get angle(B, E, H) == angle(C, F, E) mod 360
By divide_by_2_mod_180_v3 on I, F, C, D, B, G we get angle(I, F, C) == angle(D, B, G) + 180 mod 360
By tangent_chord_angle_v1 on D, E, F, G we get tangent(Line(D, G), Circle(D, E, F))
By divide_by_2_mod_180_v0 on F, E, D, F, C, B we get angle(F, C, B) == angle(F, E, D) mod 360
By divide_by_2_mod_180_v1 on E, A, G, E, F, C we get angle(E, A, G) == angle(E, F, C) mod 360
By divide_by_2_mod_180_v3 on B, D, G, C, F, I we get angle(B, D, G) == angle(C, F, I) + 180 mod 360
By divide_by_2_mod_180_v2 on H, D, I, A, F, C we get angle(H, D, I) == angle(A, F, C) + 180 mod 360
By divide_by_2_mod_180_v1 on F, C, E, H, C, A we get angle(F, C, E) == angle(H, C, A) mod 360
By divide_by_2_mod_180_v2 on D, F, C, D, E, A we get angle(D, F, C) == angle(D, E, A) + 180 mod 360
By sss_anti_similarity_v1 on G, E, I, G, A, I we get anti_similar_triangles(A, G, I, E, G, I)
By divide_by_2_mod_180_v0 on F, C, B, F, D, G we get angle(F, C, B) == angle(F, D, G) mod 360
By divide_by_2_mod_180_v0 on G, A, D, F, C, B we get angle(F, C, B) == angle(G, A, D) mod 360
By divide_by_2_mod_180_v0 on F, C, B, A, D, G we get angle(A, D, G) == angle(F, C, B) mod 360
By anti_similar_triangle_basic_properties on E, I, A, D, H, E we get angle(E, I, A) == 0 - angle(D, H, E) mod 360, angle(I, A, E) == 0 - angle(H, E, D) mod 360, angle(A, E, I) == 0 - angle(E, D, H) mod 360, log(distance(D, H)) + log(distance(A, I)) == log(distance(E, I)) + log(distance(E, H)), log(distance(A, I)) + log(distance(D, E)) == log(distance(E, H)) + log(distance(A, E)), log(distance(A, E)) + log(distance(D, H)) == log(distance(D, E)) + log(distance(E, I))
By divide_by_2_mod_180_v2 on H, D, I, I, F, C we get angle(H, D, I) == angle(I, F, C) + 180 mod 360
By divide_by_2_mod_180_v2 on H, D, A, I, F, C we get angle(H, D, A) == angle(I, F, C) + 180 mod 360
By divide_by_2_mod_180_v0 on A, C, H, A, C, F we get angle(A, C, F) == angle(A, C, H) mod 360
By divide_by_2_mod_180_v1 on C, E, H, F, C, E we get angle(C, E, H) == angle(F, C, E) mod 360
By divide_by_2_mod_180_v1 on B, C, H, B, C, F we get angle(B, C, F) == angle(B, C, H) mod 360
By divide_by_2_mod_180_v3 on E, A, G, B, F, C we get angle(E, A, G) == angle(B, F, C) + 180 mod 360
By divide_by_2_mod_180_v1 on I, A, B, D, C, F we get angle(D, C, F) == angle(I, A, B) mod 360
By divide_by_2_mod_180_v0 on A, C, F, G, E, B we get angle(A, C, F) == angle(G, E, B) mod 360
By divide_by_2_mod_180_v3 on G, B, C, C, F, A we get angle(G, B, C) == angle(C, F, A) + 180 mod 360
By sss_anti_similarity_v1 on E, I, G, A, F, B we get anti_similar_triangles(A, B, F, E, G, I)
By divide_by_2_mod_180_v0 on D, F, C, H, D, A we get angle(D, F, C) == angle(H, D, A) mod 360
By divide_by_2_mod_180_v0 on F, D, G, F, C, D we get angle(F, C, D) == angle(F, D, G) mod 360
By divide_by_2_mod_180_v0 on F, C, B, B, E, D we get angle(B, E, D) == angle(F, C, B) mod 360
By sss_anti_similarity_v1 on G, I, A, G, I, E we get anti_similar_triangles(A, G, I, E, G, I)
By divide_by_2_mod_180_v0 on F, C, B, B, A, D we get angle(B, A, D) == angle(F, C, B) mod 360
By divide_by_2_mod_180_v2 on H, D, F, A, F, C we get angle(H, D, F) == angle(A, F, C) + 180 mod 360
By divide_by_2_mod_180_v1 on A, G, I, F, C, E we get angle(A, G, I) == angle(F, C, E) mod 360
By divide_by_2_mod_180_v3 on C, A, G, B, F, C we get angle(C, A, G) == angle(B, F, C) + 180 mod 360
By divide_by_2_mod_180_v1 on B, C, F, G, D, A we get angle(B, C, F) == angle(G, D, A) mod 360
By sss_anti_similarity_v0 on A, I, G, E, I, G we get anti_similar_triangles(A, G, I, E, G, I)
By divide_by_2_mod_180_v0 on F, C, D, G, A, F we get angle(F, C, D) == angle(G, A, F) mod 360
By similar_triangle_basic_properties on E, I, A, E, H, D we get angle(E, H, D) == angle(E, I, A) mod 360, angle(H, D, E) == angle(I, A, E) mod 360, angle(A, E, I) == angle(D, E, H) mod 360, log(distance(E, H)) + log(distance(A, I)) == log(distance(E, I)) + log(distance(D, H)), log(distance(A, I)) + log(distance(D, E)) == log(distance(D, H)) + log(distance(A, E)), log(distance(A, E)) + log(distance(E, H)) == log(distance(D, E)) + log(distance(E, I))
By divide_by_2_mod_180_v1 on B, E, G, F, C, A we get angle(B, E, G) == angle(F, C, A) mod 360
By divide_by_2_mod_180_v1 on F, A, G, B, C, F we get angle(B, C, F) == angle(F, A, G) mod 360
By similar_triangle_basic_properties on D, G, A, D, H, C we get angle(D, G, A) == angle(D, H, C) mod 360, angle(G, A, D) == angle(H, C, D) mod 360, angle(A, D, G) == angle(C, D, H) mod 360, log(distance(D, G)) + log(distance(C, H)) == log(distance(D, H)) + log(distance(A, G)), log(distance(A, G)) + log(distance(C, D)) == log(distance(C, H)) + log(distance(A, D)), log(distance(A, D)) + log(distance(D, H)) == log(distance(C, D)) + log(distance(D, G))
By divide_by_2_mod_180_v3 on I, G, B, A, C, F we get angle(I, G, B) == angle(A, C, F) + 180 mod 360
By divide_by_2_mod_180_v0 on F, C, D, G, A, D we get angle(F, C, D) == angle(G, A, D) mod 360
By in_imply_collinear on midpoint(A, E), I, G we get collinear(G, I, midpoint(A, E))
By divide_by_2_mod_180_v2 on G, D, B, A, F, C we get angle(G, D, B) == angle(A, F, C) + 180 mod 360
By divide_by_2_mod_180_v3 on C, A, B, B, F, C we get angle(C, A, B) == angle(B, F, C) + 180 mod 360
By divide_by_2_mod_180_v0 on B, A, F, F, C, B we get angle(B, A, F) == angle(F, C, B) mod 360
By divide_by_2_mod_180_v2 on C, F, E, C, E, G we get angle(C, F, E) == angle(C, E, G) + 180 mod 360
By divide_by_2_mod_180_v2 on C, F, A, A, D, H we get angle(C, F, A) == angle(A, D, H) + 180 mod 360
By divide_by_2_mod_180_v3 on A, B, D, C, F, I we get angle(A, B, D) == angle(C, F, I) + 180 mod 360
By divide_by_2_mod_180_v0 on G, E, C, B, F, C we get angle(B, F, C) == angle(G, E, C) mod 360
By sss_anti_similarity_v1 on F, A, B, I, E, G we get anti_similar_triangles(A, B, F, E, G, I)
By divide_by_2_mod_180_v3 on B, D, E, C, F, E we get angle(B, D, E) == angle(C, F, E) + 180 mod 360
By divide_by_2_mod_180_v2 on D, B, G, I, F, C we get angle(D, B, G) == angle(I, F, C) + 180 mod 360
By divide_by_2_mod_180_v3 on C, F, B, B, A, E we get angle(C, F, B) == angle(B, A, E) + 180 mod 360
By divide_by_2_mod_180_v0 on B, A, D, F, C, D we get angle(B, A, D) == angle(F, C, D) mod 360
By divide_by_2_mod_180_v3 on H, E, A, E, C, F we get angle(H, E, A) == angle(E, C, F) + 180 mod 360
By divide_by_2_mod_180_v0 on D, F, C, C, B, G we get angle(C, B, G) == angle(D, F, C) mod 360
By divide_by_2_mod_180_v0 on C, F, E, G, A, E we get angle(C, F, E) == angle(G, A, E) mod 360
By divide_by_2_mod_180_v3 on I, F, C, H, D, I we get angle(I, F, C) == angle(H, D, I) + 180 mod 360
By divide_by_2_mod_180_v0 on F, C, D, I, D, G we get angle(F, C, D) == angle(I, D, G) mod 360
By divide_by_2_mod_180_v3 on D, E, A, D, F, C we get angle(D, E, A) == angle(D, F, C) + 180 mod 360
By divide_by_2_mod_180_v3 on A, F, C, G, D, B we get angle(A, F, C) == angle(G, D, B) + 180 mod 360
By divide_by_2_mod_180_v1 on B, D, G, C, F, D we get angle(B, D, G) == angle(C, F, D) mod 360
By divide_by_2_mod_180_v0 on I, G, A, E, C, F we get angle(E, C, F) == angle(I, G, A) mod 360
By divide_by_2_mod_180_v3 on F, C, A, B, G, I we get angle(F, C, A) == angle(B, G, I) + 180 mod 360
By divide_by_2_mod_180_v3 on D, C, F, H, D, B we get angle(D, C, F) == angle(H, D, B) + 180 mod 360
By divide_by_2_mod_180_v1 on H, C, A, F, C, A we get angle(F, C, A) == angle(H, C, A) mod 360
By divide_by_2_mod_180_v0 on F, C, B, G, A, I we get angle(F, C, B) == angle(G, A, I) mod 360
By divide_by_2_mod_180_v0 on E, C, F, G, E, B we get angle(E, C, F) == angle(G, E, B) mod 360
By divide_by_2_mod_180_v0 on C, D, G, C, F, A we get angle(C, D, G) == angle(C, F, A) mod 360
By divide_by_2_mod_180_v3 on C, E, D, C, F, I we get angle(C, E, D) == angle(C, F, I) + 180 mod 360
By divide_by_2_mod_180_v1 on I, D, E, F, C, A we get angle(F, C, A) == angle(I, D, E) mod 360
By divide_by_2_mod_180_v1 on F, C, A, A, D, E we get angle(A, D, E) == angle(F, C, A) mod 360
By divide_by_2_mod_180_v1 on A, B, F, F, C, E we get angle(A, B, F) == angle(F, C, E) mod 360
By tangent_chord_angle_v1 on E, B, D, H we get tangent(Line(E, H), Circle(B, D, E))
By tangent_chord_angle_v1 on D, A, E, H we get tangent(Line(D, H), Circle(A, D, E))
By divide_by_2_mod_180_v0 on C, F, E, G, A, C we get angle(C, F, E) == angle(G, A, C) mod 360
By anti_similar_triangle_basic_properties on A, I, E, E, H, D we get angle(A, I, E) == 0 - angle(E, H, D) mod 360, angle(I, E, A) == 0 - angle(H, D, E) mod 360, angle(E, A, I) == 0 - angle(D, E, H) mod 360, log(distance(A, I)) + log(distance(D, H)) == log(distance(E, H)) + log(distance(E, I)), log(distance(D, H)) + log(distance(A, E)) == log(distance(E, I)) + log(distance(D, E)), log(distance(A, E)) + log(distance(E, H)) == log(distance(D, E)) + log(distance(A, I))
By divide_by_2_mod_180_v0 on E, C, F, F, B, G we get angle(E, C, F) == angle(F, B, G) mod 360
By divide_by_2_mod_180_v1 on F, C, A, H, C, E we get angle(F, C, A) == angle(H, C, E) mod 360
By divide_by_2_mod_180_v0 on F, C, D, A, D, G we get angle(A, D, G) == angle(F, C, D) mod 360
By divide_by_2_mod_180_v1 on D, C, H, B, C, F we get angle(B, C, F) == angle(D, C, H) mod 360
By divide_by_2_mod_180_v2 on G, D, B, I, F, C we get angle(G, D, B) == angle(I, F, C) + 180 mod 360
By divide_by_2_mod_180_v1 on D, C, F, D, C, H we get angle(D, C, F) == angle(D, C, H) mod 360
By divide_by_2_mod_180_v1 on F, C, A, A, G, I we get angle(A, G, I) == angle(F, C, A) mod 360
By divide_by_2_mod_180_v1 on I, D, E, F, C, E we get angle(F, C, E) == angle(I, D, E) mod 360
By divide_by_2_mod_180_v2 on C, F, A, I, D, H we get angle(C, F, A) == angle(I, D, H) + 180 mod 360
By divide_by_2_mod_180_v1 on A, D, H, C, F, D we get angle(A, D, H) == angle(C, F, D) mod 360
By sss_anti_congruence_v1 on G, E, I, G, A, I we get anti_congruent_triangles(A, G, I, E, G, I)
By divide_by_2_mod_180_v0 on E, D, B, B, F, C we get angle(B, F, C) == angle(E, D, B) mod 360
By divide_by_2_mod_180_v3 on G, E, A, B, F, C we get angle(G, E, A) == angle(B, F, C) + 180 mod 360
By divide_by_2_mod_180_v1 on G, B, E, F, C, E we get angle(F, C, E) == angle(G, B, E) mod 360
By divide_by_2_mod_180_v1 on F, D, H, C, F, D we get angle(C, F, D) == angle(F, D, H) mod 360
By tangent_chord_angle_v1 on D, B, E, H we get tangent(Line(D, H), Circle(B, D, E))
By divide_by_2_mod_180_v2 on C, F, A, C, E, D we get angle(C, F, A) == angle(C, E, D) + 180 mod 360
By tangent_chord_angle_v1 on E, C, D, G we get tangent(Line(E, G), Circle(C, D, E))
By divide_by_2_mod_180_v3 on I, F, C, H, D, A we get angle(I, F, C) == angle(H, D, A) + 180 mod 360
By divide_by_2_mod_180_v1 on G, D, I, B, C, F we get angle(B, C, F) == angle(G, D, I) mod 360
By sss_anti_similarity_v1 on F, A, B, I, E, G we get anti_similar_triangles(A, B, F, E, G, I)
By divide_by_2_mod_180_v1 on D, C, F, D, A, B we get angle(D, A, B) == angle(D, C, F) mod 360
By divide_by_2_mod_180_v2 on D, F, C, G, D, C we get angle(D, F, C) == angle(G, D, C) + 180 mod 360
By divide_by_2_mod_180_v0 on B, A, C, C, F, E we get angle(B, A, C) == angle(C, F, E) mod 360
By divide_by_2_mod_180_v2 on B, F, C, H, E, F we get angle(B, F, C) == angle(H, E, F) + 180 mod 360
By tangent_chord_angle_v1 on E, A, D, H we get tangent(Line(E, H), Circle(A, D, E))
By divide_by_2_mod_180_v2 on C, F, I, C, E, D we get angle(C, F, I) == angle(C, E, D) + 180 mod 360
By divide_by_2_mod_180_v0 on F, B, A, E, C, F we get angle(E, C, F) == angle(F, B, A) mod 360
By divide_by_2_mod_180_v0 on H, E, C, A, C, F we get angle(A, C, F) == angle(H, E, C) mod 360
By divide_by_2_mod_180_v1 on B, D, E, C, F, B we get angle(B, D, E) == angle(C, F, B) mod 360
By divide_by_2_mod_180_v1 on D, C, F, G, D, I we get angle(D, C, F) == angle(G, D, I) mod 360
By divide_by_2_mod_180_v3 on E, F, C, G, E, C we get angle(E, F, C) == angle(G, E, C) + 180 mod 360
By divide_by_2_mod_180_v1 on G, B, F, F, C, E we get angle(F, C, E) == angle(G, B, F) mod 360
By divide_by_2_mod_180_v3 on G, B, C, C, F, I we get angle(G, B, C) == angle(C, F, I) + 180 mod 360
By divide_by_2_mod_180_v1 on G, D, F, B, C, F we get angle(B, C, F) == angle(G, D, F) mod 360
By divide_by_2_mod_180_v1 on E, F, C, H, E, F we get angle(E, F, C) == angle(H, E, F) mod 360
By anti_similar_triangle_basic_properties on G, E, B, H, C, E we get angle(G, E, B) == 0 - angle(H, C, E) mod 360, angle(E, B, G) == 0 - angle(C, E, H) mod 360, angle(B, G, E) == 0 - angle(E, H, C) mod 360, log(distance(C, H)) + log(distance(B, E)) == log(distance(E, G)) + log(distance(C, E)), log(distance(B, E)) + log(distance(E, H)) == log(distance(C, E)) + log(distance(B, G)), log(distance(B, G)) + log(distance(C, H)) == log(distance(E, H)) + log(distance(E, G))
By sss_anti_similarity_v0 on I, G, A, I, G, E we get anti_similar_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v1 on G, E, I, B, A, F we get anti_similar_triangles(A, B, F, E, G, I)
By divide_by_2_mod_180_v1 on D, E, F, B, C, F we get angle(B, C, F) == angle(D, E, F) mod 360
By divide_by_2_mod_180_v0 on E, C, F, E, B, A we get angle(E, B, A) == angle(E, C, F) mod 360
By divide_by_2_mod_180_v1 on D, C, F, G, D, A we get angle(D, C, F) == angle(G, D, A) mod 360
By sss_anti_congruence_v0 on I, E, G, I, A, G we get anti_congruent_triangles(A, G, I, E, G, I)
By divide_by_2_mod_180_v2 on A, C, F, I, G, B we get angle(A, C, F) == angle(I, G, B) + 180 mod 360
By divide_by_2_mod_180_v3 on I, D, H, C, F, I we get angle(I, D, H) == angle(C, F, I) + 180 mod 360
By divide_by_2_mod_180_v0 on F, C, D, B, A, I we get angle(B, A, I) == angle(F, C, D) mod 360
By divide_by_2_mod_180_v1 on F, C, E, F, E, G we get angle(F, C, E) == angle(F, E, G) mod 360
By sss_anti_similarity_v1 on B, F, A, G, I, E we get anti_similar_triangles(A, B, F, E, G, I)
By divide_by_2_mod_180_v0 on E, C, H, E, C, F we get angle(E, C, F) == angle(E, C, H) mod 360
By sss_anti_congruence_v1 on I, G, E, I, G, A we get anti_congruent_triangles(A, G, I, E, G, I)
By anti_similar_triangle_basic_properties on G, B, E, H, E, C we get angle(G, B, E) == 0 - angle(H, E, C) mod 360, angle(B, E, G) == 0 - angle(E, C, H) mod 360, angle(E, G, B) == 0 - angle(C, H, E) mod 360, log(distance(B, G)) + log(distance(C, E)) == log(distance(E, H)) + log(distance(B, E)), log(distance(B, E)) + log(distance(C, H)) == log(distance(C, E)) + log(distance(E, G)), log(distance(C, H)) + log(distance(B, G)) == log(distance(E, G)) + log(distance(E, H))
By divide_by_2_mod_180_v0 on F, C, B, C, D, H we get angle(C, D, H) == angle(F, C, B) mod 360
By divide_by_2_mod_180_v2 on C, F, I, F, D, H we get angle(C, F, I) == angle(F, D, H) + 180 mod 360
By divide_by_2_mod_180_v0 on C, F, I, C, D, G we get angle(C, D, G) == angle(C, F, I) mod 360
By divide_by_2_mod_180_v3 on B, D, H, F, C, D we get angle(B, D, H) == angle(F, C, D) + 180 mod 360
By divide_by_2_mod_180_v1 on A, B, E, F, C, A we get angle(A, B, E) == angle(F, C, A) mod 360
By sss_anti_congruence_v1 on A, G, I, E, G, I we get anti_congruent_triangles(A, G, I, E, G, I)
By divide_by_2_mod_180_v2 on A, C, F, H, E, A we get angle(A, C, F) == angle(H, E, A) + 180 mod 360
By divide_by_2_mod_180_v0 on E, D, I, A, C, F we get angle(A, C, F) == angle(E, D, I) mod 360
By divide_by_2_mod_180_v2 on C, D, G, C, F, D we get angle(C, D, G) == angle(C, F, D) + 180 mod 360
By divide_by_2_mod_180_v0 on A, C, H, E, C, F we get angle(A, C, H) == angle(E, C, F) mod 360
By sss_anti_congruence_v0 on I, G, A, I, G, E we get anti_congruent_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v1 on E, I, G, A, I, G we get anti_similar_triangles(A, G, I, E, G, I)
By divide_by_2_mod_180_v0 on A, C, F, F, B, A we get angle(A, C, F) == angle(F, B, A) mod 360
By sss_anti_congruence_v0 on A, I, G, E, I, G we get anti_congruent_triangles(A, G, I, E, G, I)
By divide_by_2_mod_180_v1 on G, B, D, C, F, D we get angle(C, F, D) == angle(G, B, D) mod 360
By divide_by_2_mod_180_v3 on F, D, H, C, F, A we get angle(F, D, H) == angle(C, F, A) + 180 mod 360
By divide_by_2_mod_180_v1 on I, F, C, G, D, C we get angle(G, D, C) == angle(I, F, C) mod 360
By anti_similar_triangle_basic_properties on D, C, H, A, D, G we get angle(D, C, H) == 0 - angle(A, D, G) mod 360, angle(C, H, D) == 0 - angle(D, G, A) mod 360, angle(H, D, C) == 0 - angle(G, A, D) mod 360, log(distance(A, D)) + log(distance(C, H)) == log(distance(C, D)) + log(distance(D, G)), log(distance(C, H)) + log(distance(A, G)) == log(distance(D, G)) + log(distance(D, H)), log(distance(A, G)) + log(distance(C, D)) == log(distance(D, H)) + log(distance(A, D))
By sss_anti_similarity_v0 on G, I, E, B, F, A we get anti_similar_triangles(A, B, F, E, G, I)
By divide_by_2_mod_180_v3 on H, E, F, B, F, C we get angle(H, E, F) == angle(B, F, C) + 180 mod 360
By divide_by_2_mod_180_v3 on I, F, C, D, E, C we get angle(I, F, C) == angle(D, E, C) + 180 mod 360
By divide_by_2_mod_180_v2 on B, A, E, C, F, B we get angle(B, A, E) == angle(C, F, B) + 180 mod 360
By divide_by_2_mod_180_v1 on C, F, B, C, E, G we get angle(C, E, G) == angle(C, F, B) mod 360
By divide_by_2_mod_180_v2 on B, G, I, F, C, E we get angle(B, G, I) == angle(F, C, E) + 180 mod 360
By divide_by_2_mod_180_v3 on C, F, B, G, A, C we get angle(C, F, B) == angle(G, A, C) + 180 mod 360
By sss_anti_similarity_v1 on B, F, A, G, I, E we get anti_similar_triangles(A, B, F, E, G, I)
By divide_by_2_mod_180_v3 on I, G, B, E, C, F we get angle(I, G, B) == angle(E, C, F) + 180 mod 360
By divide_by_2_mod_180_v2 on B, F, C, C, A, B we get angle(B, F, C) == angle(C, A, B) + 180 mod 360
By sss_anti_similarity_v1 on G, I, A, G, I, E we get anti_similar_triangles(A, G, I, E, G, I)
By divide_by_2_mod_180_v2 on D, B, A, I, F, C we get angle(D, B, A) == angle(I, F, C) + 180 mod 360
By sss_anti_similarity_v1 on E, I, G, A, F, B we get anti_similar_triangles(A, B, F, E, G, I)
By sss_anti_similarity_v1 on I, A, G, I, E, G we get anti_similar_triangles(A, G, I, E, G, I)
By divide_by_2_mod_180_v2 on A, E, H, F, C, E we get angle(A, E, H) == angle(F, C, E) + 180 mod 360
By divide_by_2_mod_180_v1 on D, C, F, I, A, G we get angle(D, C, F) == angle(I, A, G) mod 360
By similar_triangle_basic_properties on B, E, G, C, E, H we get angle(B, E, G) == angle(C, E, H) mod 360, angle(E, G, B) == angle(E, H, C) mod 360, angle(G, B, E) == angle(H, C, E) mod 360, log(distance(B, E)) + log(distance(E, H)) == log(distance(C, E)) + log(distance(E, G)), log(distance(E, G)) + log(distance(C, H)) == log(distance(E, H)) + log(distance(B, G)), log(distance(B, G)) + log(distance(C, E)) == log(distance(C, H)) + log(distance(B, E))
By divide_by_2_mod_180_v2 on C, F, A, A, B, C we get angle(C, F, A) == angle(A, B, C) + 180 mod 360
By divide_by_2_mod_180_v3 on I, F, C, D, B, A we get angle(I, F, C) == angle(D, B, A) + 180 mod 360
By sss_anti_congruence_v0 on G, I, E, G, I, A we get anti_congruent_triangles(A, G, I, E, G, I)
By anti_similar_triangle_basic_properties on D, H, C, A, G, D we get angle(D, H, C) == 0 - angle(A, G, D) mod 360, angle(H, C, D) == 0 - angle(G, D, A) mod 360, angle(C, D, H) == 0 - angle(D, A, G) mod 360, log(distance(A, G)) + log(distance(C, H)) == log(distance(D, H)) + log(distance(D, G)), log(distance(C, H)) + log(distance(A, D)) == log(distance(D, G)) + log(distance(C, D)), log(distance(A, D)) + log(distance(D, H)) == log(distance(C, D)) + log(distance(A, G))
By divide_by_2_mod_180_v0 on C, D, H, F, C, D we get angle(C, D, H) == angle(F, C, D) mod 360
By divide_by_2_mod_180_v2 on E, D, B, E, F, C we get angle(E, D, B) == angle(E, F, C) + 180 mod 360
By sss_anti_congruence_v0 on I, E, G, I, A, G we get anti_congruent_triangles(A, G, I, E, G, I)
By anti_similar_triangle_basic_properties on F, D, E, I, G, A we get angle(F, D, E) == 0 - angle(I, G, A) mod 360, angle(D, E, F) == 0 - angle(G, A, I) mod 360, angle(E, F, D) == 0 - angle(A, I, G) mod 360, log(distance(D, F)) + log(distance(A, G)) == log(distance(G, I)) + log(distance(D, E)), log(distance(A, G)) + log(distance(E, F)) == log(distance(D, E)) + log(distance(A, I)), log(distance(A, I)) + log(distance(D, F)) == log(distance(E, F)) + log(distance(G, I))
By sss_anti_congruence_v0 on I, G, A, I, G, E we get anti_congruent_triangles(A, G, I, E, G, I)
By divide_by_2_mod_180_v3 on A, F, C, H, D, A we get angle(A, F, C) == angle(H, D, A) + 180 mod 360
By sss_anti_congruence_v1 on A, G, I, E, G, I we get anti_congruent_triangles(A, G, I, E, G, I)
By divide_by_2_mod_180_v3 on C, F, B, C, D, E we get angle(C, F, B) == angle(C, D, E) + 180 mod 360
By sss_anti_similarity_v0 on I, E, G, I, A, G we get anti_similar_triangles(A, G, I, E, G, I)
By similar_triangle_basic_properties on G, D, E, I, F, E we get angle(G, D, E) == angle(I, F, E) mod 360, angle(D, E, G) == angle(F, E, I) mod 360, angle(E, G, D) == angle(E, I, F) mod 360, log(distance(D, G)) + log(distance(E, F)) == log(distance(F, I)) + log(distance(D, E)), log(distance(D, E)) + log(distance(E, I)) == log(distance(E, F)) + log(distance(E, G)), log(distance(E, G)) + log(distance(F, I)) == log(distance(E, I)) + log(distance(D, G))
By sss_anti_similarity_v0 on F, B, A, I, G, E we get anti_similar_triangles(A, B, F, E, G, I)
By divide_by_2_mod_180_v3 on I, F, C, C, B, A we get angle(I, F, C) == angle(C, B, A) + 180 mod 360
By divide_by_2_mod_180_v3 on A, B, C, C, F, A we get angle(A, B, C) == angle(C, F, A) + 180 mod 360
By anti_similar_triangle_basic_properties on D, C, E, A, C, B we get angle(D, C, E) == 0 - angle(A, C, B) mod 360, angle(C, E, D) == 0 - angle(C, B, A) mod 360, angle(E, D, C) == 0 - angle(B, A, C) mod 360, log(distance(A, C)) + log(distance(C, E)) == log(distance(C, D)) + log(distance(B, C)), log(distance(B, C)) + log(distance(D, E)) == log(distance(C, E)) + log(distance(A, B)), log(distance(A, B)) + log(distance(C, D)) == log(distance(D, E)) + log(distance(A, C))
By divide_by_2_mod_180_v3 on C, F, D, C, D, G we get angle(C, F, D) == angle(C, D, G) + 180 mod 360
By divide_by_2_mod_180_v3 on F, C, E, A, E, H we get angle(F, C, E) == angle(A, E, H) + 180 mod 360
By sss_anti_similarity_v1 on I, G, E, I, G, A we get anti_similar_triangles(A, G, I, E, G, I)
By divide_by_2_mod_180_v2 on C, F, A, B, D, G we get angle(C, F, A) == angle(B, D, G) + 180 mod 360
By sss_anti_similarity_v0 on G, A, I, G, E, I we get anti_similar_triangles(A, G, I, E, G, I)
By divide_by_2_mod_180_v1 on B, C, F, I, A, B we get angle(B, C, F) == angle(I, A, B) mod 360
By divide_by_2_mod_180_v0 on B, A, I, F, C, B we get angle(B, A, I) == angle(F, C, B) mod 360
By divide_by_2_mod_180_v0 on H, D, I, D, F, C we get angle(D, F, C) == angle(H, D, I) mod 360
By divide_by_2_mod_180_v3 on H, E, A, A, C, F we get angle(H, E, A) == angle(A, C, F) + 180 mod 360
By sss_anti_similarity_v0 on G, I, E, B, F, A we get anti_similar_triangles(A, B, F, E, G, I)
By divide_by_2_mod_180_v1 on H, C, E, F, C, E we get angle(F, C, E) == angle(H, C, E) mod 360
By divide_by_2_mod_180_v2 on B, F, C, G, E, A we get angle(B, F, C) == angle(G, E, A) + 180 mod 360
By divide_by_2_mod_180_v0 on H, C, D, F, C, D we get angle(F, C, D) == angle(H, C, D) mod 360
By divide_by_2_mod_180_v2 on C, F, I, G, B, C we get angle(C, F, I) == angle(G, B, C) + 180 mod 360
By divide_by_2_mod_180_v1 on D, C, F, B, C, H we get angle(B, C, H) == angle(D, C, F) mod 360
By divide_by_2_mod_180_v2 on E, C, F, H, E, A we get angle(E, C, F) == angle(H, E, A) + 180 mod 360
By sss_anti_similarity_v1 on I, A, G, I, E, G we get anti_similar_triangles(A, G, I, E, G, I)
By divide_by_2_mod_180_v2 on D, E, C, A, F, C we get angle(D, E, C) == angle(A, F, C) + 180 mod 360
By divide_by_2_mod_180_v1 on A, D, E, F, C, E we get angle(A, D, E) == angle(F, C, E) mod 360
By divide_by_2_mod_180_v3 on F, C, A, A, E, H we get angle(F, C, A) == angle(A, E, H) + 180 mod 360
By divide_by_2_mod_180_v0 on H, D, F, D, F, C we get angle(D, F, C) == angle(H, D, F) mod 360
By sss_anti_congruence_v0 on E, G, I, A, G, I we get anti_congruent_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v0 on G, I, E, B, F, A we get anti_similar_triangles(A, B, F, E, G, I)
By divide_by_2_mod_180_v3 on A, F, C, D, B, G we get angle(A, F, C) == angle(D, B, G) + 180 mod 360
By divide_by_2_mod_180_v3 on A, B, D, C, F, A we get angle(A, B, D) == angle(C, F, A) + 180 mod 360
By divide_by_2_mod_180_v2 on E, C, F, I, G, B we get angle(E, C, F) == angle(I, G, B) + 180 mod 360
By sss_anti_similarity_v1 on F, A, B, I, E, G we get anti_similar_triangles(A, B, F, E, G, I)
By divide_by_2_mod_180_v3 on A, F, C, H, D, F we get angle(A, F, C) == angle(H, D, F) + 180 mod 360
By divide_by_2_mod_180_v2 on C, F, I, A, B, C we get angle(C, F, I) == angle(A, B, C) + 180 mod 360
By divide_by_2_mod_180_v3 on F, D, H, C, F, I we get angle(F, D, H) == angle(C, F, I) + 180 mod 360
By sss_anti_similarity_v0 on G, I, E, G, I, A we get anti_similar_triangles(A, G, I, E, G, I)
By divide_by_2_mod_180_v2 on B, F, C, E, D, C we get angle(B, F, C) == angle(E, D, C) + 180 mod 360
By reverse_direction on C, F we get 180 == direction(C, F) - direction(F, C) mod 360
By divide_by_2_mod_180_v2 on G, A, C, C, F, B we get angle(G, A, C) == angle(C, F, B) + 180 mod 360
By divide_by_2_mod_180_v2 on F, C, B, B, D, H we get angle(F, C, B) == angle(B, D, H) + 180 mod 360
By divide_by_2_mod_180_v3 on A, F, C, D, E, C we get angle(A, F, C) == angle(D, E, C) + 180 mod 360
By sss_anti_similarity_v1 on E, I, G, A, I, G we get anti_similar_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v1 on B, F, A, G, I, E we get anti_similar_triangles(A, B, F, E, G, I)
By divide_by_2_mod_180_v1 on B, C, F, D, A, B we get angle(B, C, F) == angle(D, A, B) mod 360
By divide_by_2_mod_180_v2 on B, F, C, C, A, G we get angle(B, F, C) == angle(C, A, G) + 180 mod 360
By sas_similarity on F, E, C, A, E, B we get similar_triangles(A, B, E, F, C, E)
By similar_triangle_basic_properties on B, G, E, C, H, E we get angle(B, G, E) == angle(C, H, E) mod 360, angle(G, E, B) == angle(H, E, C) mod 360, angle(E, B, G) == angle(E, C, H) mod 360, log(distance(B, G)) + log(distance(E, H)) == log(distance(C, H)) + log(distance(E, G)), log(distance(E, G)) + log(distance(C, E)) == log(distance(E, H)) + log(distance(B, E)), log(distance(B, E)) + log(distance(C, H)) == log(distance(C, E)) + log(distance(B, G))
By sss_anti_similarity_v0 on I, E, G, F, A, B we get anti_similar_triangles(A, B, F, E, G, I)
By divide_by_2_mod_180_v3 on B, C, F, H, D, B we get angle(B, C, F) == angle(H, D, B) + 180 mod 360
By sas_anti_similarity on F, B, C, D, B, E we get anti_similar_triangles(B, C, F, B, E, D)
By divide_by_2_mod_180_v0 on A, E, D, C, F, A we get angle(A, E, D) == angle(C, F, A) mod 360
By anti_similar_triangle_basic_properties on E, D, G, F, E, I we get angle(E, D, G) == 0 - angle(F, E, I) mod 360, angle(D, G, E) == 0 - angle(E, I, F) mod 360, angle(G, E, D) == 0 - angle(I, F, E) mod 360, log(distance(D, E)) + log(distance(E, I)) == log(distance(E, F)) + log(distance(D, G)), log(distance(D, G)) + log(distance(F, I)) == log(distance(E, I)) + log(distance(E, G)), log(distance(E, G)) + log(distance(E, F)) == log(distance(F, I)) + log(distance(D, E))
By divide_by_2_mod_180_v0 on A, C, F, E, B, A we get angle(A, C, F) == angle(E, B, A) mod 360
By divide_by_2_mod_180_v3 on E, D, C, B, F, C we get angle(E, D, C) == angle(B, F, C) + 180 mod 360
By sss_anti_similarity_v0 on I, E, G, F, A, B we get anti_similar_triangles(A, B, F, E, G, I)
By divide_by_2_mod_180_v3 on A, F, C, D, B, A we get angle(A, F, C) == angle(D, B, A) + 180 mod 360
By divide_by_2_mod_180_v2 on C, F, A, G, B, D we get angle(C, F, A) == angle(G, B, D) + 180 mod 360
By divide_by_2_mod_180_v2 on B, F, C, E, A, G we get angle(B, F, C) == angle(E, A, G) + 180 mod 360
By sss_anti_congruence_v1 on I, A, G, I, E, G we get anti_congruent_triangles(A, G, I, E, G, I)
By divide_by_2_mod_180_v2 on G, A, E, C, F, B we get angle(G, A, E) == angle(C, F, B) + 180 mod 360
By divide_by_2_mod_180_v2 on C, F, I, B, D, G we get angle(C, F, I) == angle(B, D, G) + 180 mod 360
By divide_by_2_mod_180_v1 on D, C, F, D, E, B we get angle(D, C, F) == angle(D, E, B) mod 360
By sas_similarity on A, D, B, C, D, F we get similar_triangles(A, B, D, C, F, D)
By sss_anti_congruence_v1 on I, G, E, I, G, A we get anti_congruent_triangles(A, G, I, E, G, I)
By divide_by_2_mod_180_v1 on F, A, G, D, C, F we get angle(D, C, F) == angle(F, A, G) mod 360
By anti_similar_triangle_basic_properties on D, F, E, B, F, A we get angle(D, F, E) == 0 - angle(B, F, A) mod 360, angle(F, E, D) == 0 - angle(F, A, B) mod 360, angle(E, D, F) == 0 - angle(A, B, F) mod 360, log(distance(B, F)) + log(distance(E, F)) == log(distance(D, F)) + log(distance(A, F)), log(distance(A, F)) + log(distance(D, E)) == log(distance(E, F)) + log(distance(A, B)), log(distance(A, B)) + log(distance(D, F)) == log(distance(D, E)) + log(distance(B, F))
By sss_anti_similarity_v1 on G, I, A, G, I, E we get anti_similar_triangles(A, G, I, E, G, I)
By sss_anti_congruence_v0 on A, I, G, E, I, G we get anti_congruent_triangles(A, G, I, E, G, I)
By divide_by_2_mod_180_v2 on C, F, I, A, B, D we get angle(C, F, I) == angle(A, B, D) + 180 mod 360
By sas_similarity on B, D, A, F, D, C we get similar_triangles(A, B, D, C, F, D)
By sss_anti_congruence_v1 on E, I, G, A, I, G we get anti_congruent_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v1 on E, I, G, A, I, G we get anti_similar_triangles(A, G, I, E, G, I)
By anti_similar_triangle_basic_properties on A, F, B, E, F, D we get angle(A, F, B) == 0 - angle(E, F, D) mod 360, angle(F, B, A) == 0 - angle(F, D, E) mod 360, angle(B, A, F) == 0 - angle(D, E, F) mod 360, log(distance(A, F)) + log(distance(D, F)) == log(distance(E, F)) + log(distance(B, F)), log(distance(B, F)) + log(distance(D, E)) == log(distance(D, F)) + log(distance(A, B)), log(distance(A, B)) + log(distance(E, F)) == log(distance(D, E)) + log(distance(A, F))
By sss_anti_similarity_v0 on G, I, E, B, F, A we get anti_similar_triangles(A, B, F, E, G, I)
By sss_anti_similarity_v1 on I, G, E, I, G, A we get anti_similar_triangles(A, G, I, E, G, I)
By divide_by_2_mod_180_v3 on E, F, C, E, D, B we get angle(E, F, C) == angle(E, D, B) + 180 mod 360
By sss_anti_congruence_v1 on I, A, G, I, E, G we get anti_congruent_triangles(A, G, I, E, G, I)
By sas_anti_similarity on F, A, C, E, A, D we get anti_similar_triangles(A, C, F, A, D, E)
By sss_anti_similarity_v0 on E, G, I, A, G, I we get anti_similar_triangles(A, G, I, E, G, I)
By divide_by_2_mod_180_v3 on C, F, B, G, A, E we get angle(C, F, B) == angle(G, A, E) + 180 mod 360
By sss_anti_similarity_v0 on E, G, I, A, B, F we get anti_similar_triangles(A, B, F, E, G, I)
By divide_by_2_mod_180_v2 on H, D, B, D, C, F we get angle(H, D, B) == angle(D, C, F) + 180 mod 360
By divide_by_2_mod_180_v3 on H, E, B, B, F, C we get angle(H, E, B) == angle(B, F, C) + 180 mod 360
By divide_by_2_mod_180_v3 on A, F, C, H, D, I we get angle(A, F, C) == angle(H, D, I) + 180 mod 360
By divide_by_2_mod_180_v2 on D, B, A, A, F, C we get angle(D, B, A) == angle(A, F, C) + 180 mod 360
By divide_by_2_mod_180_v1 on I, F, C, D, E, A we get angle(D, E, A) == angle(I, F, C) mod 360
By divide_by_2_mod_180_v2 on C, F, I, A, D, H we get angle(C, F, I) == angle(A, D, H) + 180 mod 360
By divide_by_2_mod_180_v0 on A, E, G, C, F, E we get angle(A, E, G) == angle(C, F, E) mod 360
By divide_by_2_mod_180_v3 on I, F, C, H, D, F we get angle(I, F, C) == angle(H, D, F) + 180 mod 360
By sss_anti_similarity_v1 on I, G, E, F, B, A we get anti_similar_triangles(A, B, F, E, G, I)
By similar_triangle_basic_properties on D, C, H, D, A, G we get angle(D, A, G) == angle(D, C, H) mod 360, angle(A, G, D) == angle(C, H, D) mod 360, angle(G, D, A) == angle(H, D, C) mod 360, log(distance(A, D)) + log(distance(C, H)) == log(distance(C, D)) + log(distance(A, G)), log(distance(A, G)) + log(distance(D, H)) == log(distance(C, H)) + log(distance(D, G)), log(distance(D, G)) + log(distance(C, D)) == log(distance(D, H)) + log(distance(A, D))
By sss_anti_congruence_v1 on A, G, I, E, G, I we get anti_congruent_triangles(A, G, I, E, G, I)
By sss_anti_congruence_v1 on I, G, E, I, G, A we get anti_congruent_triangles(A, G, I, E, G, I)
By sss_anti_congruence_v0 on A, I, G, E, I, G we get anti_congruent_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v0 on G, I, E, B, F, A we get anti_similar_triangles(A, B, F, E, G, I)
By sss_anti_congruence_v1 on E, I, G, A, I, G we get anti_congruent_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v0 on B, A, F, G, E, I we get anti_similar_triangles(A, B, F, E, G, I)
By divide_by_2_mod_180_v1 on F, D, E, F, C, A we get angle(F, C, A) == angle(F, D, E) mod 360
By sas_anti_similarity on C, B, F, E, B, D we get anti_similar_triangles(B, C, F, B, E, D)
By divide_by_2_mod_180_v3 on A, F, C, C, B, A we get angle(A, F, C) == angle(C, B, A) + 180 mod 360
By sss_anti_similarity_v1 on F, A, B, I, E, G we get anti_similar_triangles(A, B, F, E, G, I)
By divide_by_2_mod_180_v2 on H, D, A, A, F, C we get angle(H, D, A) == angle(A, F, C) + 180 mod 360
By sss_anti_similarity_v0 on E, G, I, A, B, F we get anti_similar_triangles(A, B, F, E, G, I)
By sss_anti_similarity_v1 on G, E, I, G, A, I we get anti_similar_triangles(A, G, I, E, G, I)
By divide_by_2_mod_180_v2 on B, E, H, C, F, B we get angle(B, E, H) == angle(C, F, B) + 180 mod 360
By divide_by_2_mod_180_v3 on C, E, G, C, F, E we get angle(C, E, G) == angle(C, F, E) + 180 mod 360
By divide_by_2_mod_180_v2 on C, B, A, A, F, C we get angle(C, B, A) == angle(A, F, C) + 180 mod 360
By sas_similarity on B, E, A, C, E, F we get similar_triangles(A, B, E, F, C, E)
By similar_triangle_basic_properties on E, D, H, E, A, I we get angle(E, A, I) == angle(E, D, H) mod 360, angle(A, I, E) == angle(D, H, E) mod 360, angle(H, E, D) == angle(I, E, A) mod 360, log(distance(A, E)) + log(distance(D, H)) == log(distance(D, E)) + log(distance(A, I)), log(distance(A, I)) + log(distance(E, H)) == log(distance(D, H)) + log(distance(E, I)), log(distance(E, H)) + log(distance(A, E)) == log(distance(E, I)) + log(distance(D, E))
By sss_anti_similarity_v1 on A, G, I, E, G, I we get anti_similar_triangles(A, G, I, E, G, I)
By divide_by_2_mod_180_v0 on A, C, F, E, B, G we get angle(A, C, F) == angle(E, B, G) mod 360
By divide_by_2_mod_180_v2 on D, B, G, A, F, C we get angle(D, B, G) == angle(A, F, C) + 180 mod 360
By sss_anti_congruence_v0 on E, G, I, A, G, I we get anti_congruent_triangles(A, G, I, E, G, I)
By divide_by_2_mod_180_v1 on H, E, B, E, F, C we get angle(E, F, C) == angle(H, E, B) mod 360
By divide_by_2_mod_180_v0 on F, C, B, H, C, B we get angle(F, C, B) == angle(H, C, B) mod 360
By divide_by_2_mod_180_v0 on F, C, D, H, C, B we get angle(F, C, D) == angle(H, C, B) mod 360
By divide_by_2_mod_180_v3 on C, E, D, C, F, A we get angle(C, E, D) == angle(C, F, A) + 180 mod 360
By sss_anti_congruence_v0 on I, E, G, I, A, G we get anti_congruent_triangles(A, G, I, E, G, I)
By divide_by_2_mod_180_v1 on C, E, H, F, C, A we get angle(C, E, H) == angle(F, C, A) mod 360
By sss_anti_similarity_v0 on I, E, G, F, A, B we get anti_similar_triangles(A, B, F, E, G, I)
By sss_anti_similarity_v0 on A, F, B, E, I, G we get anti_similar_triangles(A, B, F, E, G, I)
By sss_anti_similarity_v1 on F, A, B, I, E, G we get anti_similar_triangles(A, B, F, E, G, I)
By divide_by_2_mod_180_v3 on I, F, C, G, D, B we get angle(I, F, C) == angle(G, D, B) + 180 mod 360
By sss_anti_congruence_v0 on G, A, I, G, E, I we get anti_congruent_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v1 on B, F, A, G, I, E we get anti_similar_triangles(A, B, F, E, G, I)
By sss_anti_similarity_v0 on I, G, A, I, G, E we get anti_similar_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v1 on G, E, I, G, A, I we get anti_similar_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v0 on E, G, I, A, G, I we get anti_similar_triangles(A, G, I, E, G, I)
By divide_by_2_mod_180_v2 on C, F, E, B, D, E we get angle(C, F, E) == angle(B, D, E) + 180 mod 360
By divide_by_2_mod_180_v3 on A, B, C, C, F, I we get angle(A, B, C) == angle(C, F, I) + 180 mod 360
By sas_anti_similarity on E, A, D, F, A, C we get anti_similar_triangles(A, C, F, A, D, E)
By divide_by_2_mod_180_v3 on C, F, B, B, E, H we get angle(C, F, B) == angle(B, E, H) + 180 mod 360
By sss_anti_similarity_v1 on G, I, A, G, I, E we get anti_similar_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v1 on I, A, G, I, E, G we get anti_similar_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v1 on I, A, G, I, E, G we get anti_similar_triangles(A, G, I, E, G, I)
By divide_by_2_mod_180_v2 on H, D, B, B, C, F we get angle(H, D, B) == angle(B, C, F) + 180 mod 360
By sss_anti_similarity_v0 on E, G, I, A, G, I we get anti_similar_triangles(A, G, I, E, G, I)
By divide_by_2_mod_180_v1 on E, F, C, C, A, G we get angle(C, A, G) == angle(E, F, C) mod 360
By divide_by_2_mod_180_v2 on F, E, H, C, F, B we get angle(F, E, H) == angle(C, F, B) + 180 mod 360
By anti_similar_triangle_basic_properties on D, E, C, A, B, C we get angle(D, E, C) == 0 - angle(A, B, C) mod 360, angle(E, C, D) == 0 - angle(B, C, A) mod 360, angle(C, D, E) == 0 - angle(C, A, B) mod 360, log(distance(A, B)) + log(distance(C, E)) == log(distance(D, E)) + log(distance(B, C)), log(distance(B, C)) + log(distance(C, D)) == log(distance(C, E)) + log(distance(A, C)), log(distance(A, C)) + log(distance(D, E)) == log(distance(C, D)) + log(distance(A, B))
By sss_anti_similarity_v0 on F, B, A, I, G, E we get anti_similar_triangles(A, B, F, E, G, I)
By sss_anti_similarity_v1 on E, I, G, A, F, B we get anti_similar_triangles(A, B, F, E, G, I)
By sss_anti_similarity_v0 on A, I, G, E, I, G we get anti_similar_triangles(A, G, I, E, G, I)
By anti_similar_triangle_basic_properties on A, G, I, E, D, F we get angle(A, G, I) == 0 - angle(E, D, F) mod 360, angle(G, I, A) == 0 - angle(D, F, E) mod 360, angle(I, A, G) == 0 - angle(F, E, D) mod 360, log(distance(A, G)) + log(distance(D, F)) == log(distance(D, E)) + log(distance(G, I)), log(distance(D, F)) + log(distance(A, I)) == log(distance(G, I)) + log(distance(E, F)), log(distance(A, I)) + log(distance(D, E)) == log(distance(E, F)) + log(distance(A, G))
By divide_by_2_mod_180_v3 on G, B, D, C, F, I we get angle(G, B, D) == angle(C, F, I) + 180 mod 360
By sss_anti_similarity_v0 on G, I, E, G, I, A we get anti_similar_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v1 on G, E, I, B, A, F we get anti_similar_triangles(A, B, F, E, G, I)
By divide_by_2_mod_180_v2 on B, F, C, E, A, B we get angle(B, F, C) == angle(E, A, B) + 180 mod 360
By sss_anti_similarity_v0 on G, I, E, G, I, A we get anti_similar_triangles(A, G, I, E, G, I)
By sss_anti_congruence_v1 on G, I, A, G, I, E we get anti_congruent_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v0 on E, G, I, A, G, I we get anti_similar_triangles(A, G, I, E, G, I)
By divide_by_2_mod_180_v1 on F, C, A, A, B, F we get angle(A, B, F) == angle(F, C, A) mod 360
By sss_anti_congruence_v1 on G, E, I, G, A, I we get anti_congruent_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v1 on E, I, G, A, F, B we get anti_similar_triangles(A, B, F, E, G, I)
By sss_anti_similarity_v1 on A, B, F, E, G, I we get anti_similar_triangles(A, B, F, E, G, I)
By divide_by_2_mod_180_v0 on E, C, F, E, B, G we get angle(E, B, G) == angle(E, C, F) mod 360
By sss_anti_congruence_v1 on G, E, I, G, A, I we get anti_congruent_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v1 on A, B, F, E, G, I we get anti_similar_triangles(A, B, F, E, G, I)
By sas_similarity on C, D, F, A, D, B we get similar_triangles(A, B, D, C, F, D)
By sss_anti_similarity_v0 on G, I, E, G, I, A we get anti_similar_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v1 on A, B, F, E, G, I we get anti_similar_triangles(A, B, F, E, G, I)
By divide_by_2_mod_180_v2 on F, C, D, B, D, H we get angle(F, C, D) == angle(B, D, H) + 180 mod 360
By divide_by_2_mod_180_v2 on A, E, D, C, F, D we get angle(A, E, D) == angle(C, F, D) + 180 mod 360
By sss_anti_similarity_v0 on G, A, I, G, E, I we get anti_similar_triangles(A, G, I, E, G, I)
By divide_by_2_mod_180_v3 on B, D, H, F, C, B we get angle(B, D, H) == angle(F, C, B) + 180 mod 360
By sss_anti_similarity_v0 on B, A, F, G, E, I we get anti_similar_triangles(A, B, F, E, G, I)
By sss_anti_congruence_v0 on I, E, G, I, A, G we get anti_congruent_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v1 on G, E, I, G, A, I we get anti_similar_triangles(A, G, I, E, G, I)
By sas_similarity on A, E, B, F, E, C we get similar_triangles(A, B, E, F, C, E)
By divide_by_2_mod_180_v3 on B, D, G, C, F, A we get angle(B, D, G) == angle(C, F, A) + 180 mod 360
By sss_anti_congruence_v0 on E, G, I, A, G, I we get anti_congruent_triangles(A, G, I, E, G, I)
By sss_anti_congruence_v0 on I, G, A, I, G, E we get anti_congruent_triangles(A, G, I, E, G, I)
By divide_by_2_mod_180_v2 on B, G, I, F, C, A we get angle(B, G, I) == angle(F, C, A) + 180 mod 360
By sss_anti_similarity_v1 on E, I, G, A, F, B we get anti_similar_triangles(A, B, F, E, G, I)
By sss_anti_similarity_v0 on E, G, I, A, B, F we get anti_similar_triangles(A, B, F, E, G, I)
By sss_anti_similarity_v1 on G, E, I, B, A, F we get anti_similar_triangles(A, B, F, E, G, I)
By sss_anti_congruence_v0 on G, A, I, G, E, I we get anti_congruent_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v1 on I, G, E, F, B, A we get anti_similar_triangles(A, B, F, E, G, I)
By sss_anti_similarity_v1 on E, I, G, A, I, G we get anti_similar_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v0 on G, I, E, G, I, A we get anti_similar_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v1 on G, E, I, B, A, F we get anti_similar_triangles(A, B, F, E, G, I)
By reverse_direction on F, C we get 180 == direction(F, C) - direction(C, F) mod 360
By sss_anti_congruence_v1 on G, I, A, G, I, E we get anti_congruent_triangles(A, G, I, E, G, I)
By sss_anti_congruence_v1 on I, A, G, I, E, G we get anti_congruent_triangles(A, G, I, E, G, I)
By sss_anti_congruence_v0 on E, G, I, A, G, I we get anti_congruent_triangles(A, G, I, E, G, I)
By sss_anti_congruence_v1 on E, I, G, A, I, G we get anti_congruent_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v1 on A, G, I, E, G, I we get anti_similar_triangles(A, G, I, E, G, I)
By double_perpendicular_and_parallel_v0 on i, g, Line(G, I) we get parallel(i, Line(G, I))
By sss_anti_similarity_v0 on F, B, A, I, G, E we get anti_similar_triangles(A, B, F, E, G, I)
By sss_anti_congruence_v1 on I, G, E, I, G, A we get anti_congruent_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v0 on B, A, F, G, E, I we get anti_similar_triangles(A, B, F, E, G, I)
By sss_anti_congruence_v0 on G, I, E, G, I, A we get anti_congruent_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v1 on I, G, E, I, G, A we get anti_similar_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v1 on I, G, E, I, G, A we get anti_similar_triangles(A, G, I, E, G, I)
By divide_by_2_mod_180_v3 on I, D, H, C, F, A we get angle(I, D, H) == angle(C, F, A) + 180 mod 360
By divide_by_2_mod_180_v3 on E, A, B, B, F, C we get angle(E, A, B) == angle(B, F, C) + 180 mod 360
By sss_anti_similarity_v1 on I, A, G, I, E, G we get anti_similar_triangles(A, G, I, E, G, I)
By sss_anti_congruence_v0 on I, E, G, I, A, G we get anti_congruent_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v0 on A, F, B, E, I, G we get anti_similar_triangles(A, B, F, E, G, I)
By sss_anti_similarity_v1 on G, E, I, B, A, F we get anti_similar_triangles(A, B, F, E, G, I)
By sss_anti_similarity_v0 on G, I, E, G, I, A we get anti_similar_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v0 on G, I, E, B, F, A we get anti_similar_triangles(A, B, F, E, G, I)
By sss_anti_similarity_v0 on A, I, G, E, I, G we get anti_similar_triangles(A, G, I, E, G, I)
By sss_anti_congruence_v0 on G, A, I, G, E, I we get anti_congruent_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v1 on G, E, I, G, A, I we get anti_similar_triangles(A, G, I, E, G, I)
By sss_anti_congruence_v1 on I, A, G, I, E, G we get anti_congruent_triangles(A, G, I, E, G, I)
By sss_anti_congruence_v1 on G, I, A, G, I, E we get anti_congruent_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v0 on I, E, G, I, A, G we get anti_similar_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v1 on I, A, G, I, E, G we get anti_similar_triangles(A, G, I, E, G, I)
By divide_by_2_mod_180_v2 on C, F, A, G, B, C we get angle(C, F, A) == angle(G, B, C) + 180 mod 360
By sss_anti_similarity_v1 on E, I, G, A, I, G we get anti_similar_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v1 on G, E, I, B, A, F we get anti_similar_triangles(A, B, F, E, G, I)
By sss_anti_similarity_v0 on F, B, A, I, G, E we get anti_similar_triangles(A, B, F, E, G, I)
By divide_by_2_mod_180_v3 on C, F, B, A, E, G we get angle(C, F, B) == angle(A, E, G) + 180 mod 360
By sas_anti_similarity on E, B, D, C, B, F we get anti_similar_triangles(B, C, F, B, E, D)
By sss_anti_similarity_v1 on B, F, A, G, I, E we get anti_similar_triangles(A, B, F, E, G, I)
By sss_anti_congruence_v0 on A, I, G, E, I, G we get anti_congruent_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v0 on E, G, I, A, B, F we get anti_similar_triangles(A, B, F, E, G, I)
By sss_anti_similarity_v1 on G, I, A, G, I, E we get anti_similar_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v0 on E, G, I, A, G, I we get anti_similar_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v0 on F, B, A, I, G, E we get anti_similar_triangles(A, B, F, E, G, I)
By sss_anti_congruence_v0 on A, I, G, E, I, G we get anti_congruent_triangles(A, G, I, E, G, I)
By sss_anti_congruence_v0 on G, I, E, G, I, A we get anti_congruent_triangles(A, G, I, E, G, I)
By sss_anti_congruence_v0 on G, A, I, G, E, I we get anti_congruent_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v1 on I, G, E, F, B, A we get anti_similar_triangles(A, B, F, E, G, I)
By sss_anti_similarity_v1 on I, G, E, F, B, A we get anti_similar_triangles(A, B, F, E, G, I)
By sss_anti_similarity_v1 on A, G, I, E, G, I we get anti_similar_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v0 on E, G, I, A, B, F we get anti_similar_triangles(A, B, F, E, G, I)
By sss_anti_congruence_v1 on G, E, I, G, A, I we get anti_congruent_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v0 on G, A, I, G, E, I we get anti_similar_triangles(A, G, I, E, G, I)
By sss_anti_congruence_v0 on E, G, I, A, G, I we get anti_congruent_triangles(A, G, I, E, G, I)
By parallel_line_angles_v1 on I, G, B, E we get parallel(Line(B, E), Line(G, I))
By sss_anti_congruence_v1 on I, G, E, I, G, A we get anti_congruent_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v0 on E, G, I, A, G, I we get anti_similar_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v1 on I, G, E, F, B, A we get anti_similar_triangles(A, B, F, E, G, I)
By sss_anti_similarity_v0 on A, F, B, E, I, G we get anti_similar_triangles(A, B, F, E, G, I)
By sss_anti_congruence_v0 on I, G, A, I, G, E we get anti_congruent_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v1 on E, I, G, A, I, G we get anti_similar_triangles(A, G, I, E, G, I)
By sss_anti_congruence_v0 on I, G, A, I, G, E we get anti_congruent_triangles(A, G, I, E, G, I)
By sss_anti_congruence_v1 on I, G, E, I, G, A we get anti_congruent_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v1 on I, G, E, I, G, A we get anti_similar_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v0 on B, A, F, G, E, I we get anti_similar_triangles(A, B, F, E, G, I)
By sss_anti_congruence_v1 on G, I, A, G, I, E we get anti_congruent_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v0 on I, G, A, I, G, E we get anti_similar_triangles(A, G, I, E, G, I)
By sss_anti_congruence_v1 on I, A, G, I, E, G we get anti_congruent_triangles(A, G, I, E, G, I)
By parallel_line_angles_v0 on E, F, I, G we get parallel(Line(E, F), Line(G, I))
By sss_anti_congruence_v0 on G, I, E, G, I, A we get anti_congruent_triangles(A, G, I, E, G, I)
By sss_anti_congruence_v1 on E, I, G, A, I, G we get anti_congruent_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v0 on A, F, B, E, I, G we get anti_similar_triangles(A, B, F, E, G, I)
By sss_anti_congruence_v1 on A, G, I, E, G, I we get anti_congruent_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v0 on F, B, A, I, G, E we get anti_similar_triangles(A, B, F, E, G, I)
By sss_anti_similarity_v1 on A, G, I, E, G, I we get anti_similar_triangles(A, G, I, E, G, I)
By sas_similarity on F, D, C, B, D, A we get similar_triangles(A, B, D, C, F, D)
By sss_anti_similarity_v1 on A, G, I, E, G, I we get anti_similar_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v1 on G, E, I, G, A, I we get anti_similar_triangles(A, G, I, E, G, I)
By sss_anti_congruence_v1 on E, I, G, A, I, G we get anti_congruent_triangles(A, G, I, E, G, I)
By sas_anti_similarity on C, A, F, D, A, E we get anti_similar_triangles(A, C, F, A, D, E)
By sss_anti_congruence_v0 on E, G, I, A, G, I we get anti_congruent_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v0 on I, E, G, I, A, G we get anti_similar_triangles(A, G, I, E, G, I)
By sss_anti_congruence_v1 on G, I, A, G, I, E we get anti_congruent_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v0 on I, E, G, F, A, B we get anti_similar_triangles(A, B, F, E, G, I)
By sss_anti_congruence_v1 on A, G, I, E, G, I we get anti_congruent_triangles(A, G, I, E, G, I)
By sss_anti_congruence_v0 on I, E, G, I, A, G we get anti_congruent_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v0 on I, E, G, I, A, G we get anti_similar_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v1 on A, B, F, E, G, I we get anti_similar_triangles(A, B, F, E, G, I)
By sss_anti_congruence_v0 on G, A, I, G, E, I we get anti_congruent_triangles(A, G, I, E, G, I)
By sss_anti_congruence_v0 on I, G, A, I, G, E we get anti_congruent_triangles(A, G, I, E, G, I)
By sss_anti_congruence_v1 on E, I, G, A, I, G we get anti_congruent_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v0 on I, E, G, I, A, G we get anti_similar_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v0 on I, G, A, I, G, E we get anti_similar_triangles(A, G, I, E, G, I)
By sss_anti_congruence_v0 on G, A, I, G, E, I we get anti_congruent_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v0 on G, A, I, G, E, I we get anti_similar_triangles(A, G, I, E, G, I)
By sss_anti_congruence_v1 on A, G, I, E, G, I we get anti_congruent_triangles(A, G, I, E, G, I)
By sss_anti_congruence_v1 on G, I, A, G, I, E we get anti_congruent_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v1 on A, G, I, E, G, I we get anti_similar_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v0 on A, I, G, E, I, G we get anti_similar_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v0 on B, A, F, G, E, I we get anti_similar_triangles(A, B, F, E, G, I)
By sss_anti_similarity_v0 on G, A, I, G, E, I we get anti_similar_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v1 on A, B, F, E, G, I we get anti_similar_triangles(A, B, F, E, G, I)
By sss_anti_congruence_v1 on G, E, I, G, A, I we get anti_congruent_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v1 on I, G, E, I, G, A we get anti_similar_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v1 on A, B, F, E, G, I we get anti_similar_triangles(A, B, F, E, G, I)
By sas_anti_similarity on D, B, E, F, B, C we get anti_similar_triangles(B, C, F, B, E, D)
By sss_anti_similarity_v0 on A, I, G, E, I, G we get anti_similar_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v1 on B, F, A, G, I, E we get anti_similar_triangles(A, B, F, E, G, I)
By sss_anti_similarity_v0 on A, I, G, E, I, G we get anti_similar_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v0 on I, E, G, F, A, B we get anti_similar_triangles(A, B, F, E, G, I)
By sss_anti_similarity_v1 on I, G, E, F, B, A we get anti_similar_triangles(A, B, F, E, G, I)
By sss_anti_congruence_v0 on G, I, E, G, I, A we get anti_congruent_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v1 on E, I, G, A, F, B we get anti_similar_triangles(A, B, F, E, G, I)
By sss_anti_congruence_v0 on A, I, G, E, I, G we get anti_congruent_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v0 on A, F, B, E, I, G we get anti_similar_triangles(A, B, F, E, G, I)
By sss_anti_similarity_v0 on I, G, A, I, G, E we get anti_similar_triangles(A, G, I, E, G, I)
By sss_anti_congruence_v1 on G, E, I, G, A, I we get anti_congruent_triangles(A, G, I, E, G, I)
By sss_anti_congruence_v1 on I, A, G, I, E, G we get anti_congruent_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v0 on E, G, I, A, B, F we get anti_similar_triangles(A, B, F, E, G, I)
By sss_anti_similarity_v1 on F, A, B, I, E, G we get anti_similar_triangles(A, B, F, E, G, I)
By sss_anti_congruence_v0 on G, I, E, G, I, A we get anti_congruent_triangles(A, G, I, E, G, I)
By sss_anti_similarity_v0 on B, A, F, G, E, I we get anti_similar_triangles(A, B, F, E, G, I)
By sss_anti_similarity_v0 on A, F, B, E, I, G we get anti_similar_triangles(A, B, F, E, G, I)
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, B), Line(C, F)), B, C, line_intersection(Line(A, B), Line(C, F)) we get 180 == 2 * direction(line_intersection(Line(A, B), Line(C, F)), B) - 2 * direction(C, line_intersection(Line(A, B), Line(C, F))) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(Line(A, B), Line(C, F)), B, line_intersection(Line(A, B), Line(C, F)) we get 180 == 2 * direction(C, line_intersection(Line(A, B), Line(C, F))) - 2 * direction(B, line_intersection(Line(A, B), Line(C, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, B), Line(C, F)), F, B, line_intersection(Line(A, B), Line(C, F)) we get 180 == 2 * direction(line_intersection(Line(A, B), Line(C, F)), F) - 2 * direction(B, line_intersection(Line(A, B), Line(C, F))) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(Line(A, B), Line(C, F)), F, line_intersection(Line(A, B), Line(C, F)) we get 180 == 2 * direction(A, line_intersection(Line(A, B), Line(C, F))) - 2 * direction(F, line_intersection(Line(A, B), Line(C, F))) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(Line(A, B), Line(C, F)), line_intersection(Line(A, B), Line(C, F)), C we get 180 == 2 * direction(G, line_intersection(Line(A, B), Line(C, F))) - 2 * direction(line_intersection(Line(A, B), Line(C, F)), C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, B), Line(C, F)), A, F, line_intersection(Line(A, B), Line(C, F)) we get 180 == 2 * direction(line_intersection(Line(A, B), Line(C, F)), A) - 2 * direction(F, line_intersection(Line(A, B), Line(C, F))) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(Line(A, B), Line(C, F)), line_intersection(Line(A, B), Line(C, F)), G we get 180 == 2 * direction(C, line_intersection(Line(A, B), Line(C, F))) - 2 * direction(line_intersection(Line(A, B), Line(C, F)), G) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(Line(A, B), Line(C, F)), C, line_intersection(Line(A, B), Line(C, F)) we get 180 == 2 * direction(B, line_intersection(Line(A, B), Line(C, F))) - 2 * direction(C, line_intersection(Line(A, B), Line(C, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, B), Line(C, F)), C, G, line_intersection(Line(A, B), Line(C, F)) we get 180 == 2 * direction(line_intersection(Line(A, B), Line(C, F)), C) - 2 * direction(G, line_intersection(Line(A, B), Line(C, F))) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(Line(A, B), Line(C, F)), G, line_intersection(Line(A, B), Line(C, F)) we get 180 == 2 * direction(C, line_intersection(Line(A, B), Line(C, F))) - 2 * direction(G, line_intersection(Line(A, B), Line(C, F))) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(Line(A, B), Line(C, F)), C, line_intersection(Line(A, B), Line(C, F)) we get 180 == 2 * direction(G, line_intersection(Line(A, B), Line(C, F))) - 2 * direction(C, line_intersection(Line(A, B), Line(C, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, B), Line(C, F)), G, line_intersection(Line(A, B), Line(C, F)), F we get 180 == 2 * direction(line_intersection(Line(A, B), Line(C, F)), G) - 2 * direction(line_intersection(Line(A, B), Line(C, F)), F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, B), Line(C, F)), B, F, line_intersection(Line(A, B), Line(C, F)) we get 180 == 2 * direction(line_intersection(Line(A, B), Line(C, F)), B) - 2 * direction(F, line_intersection(Line(A, B), Line(C, F))) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(A, B), Line(C, F)), A, line_intersection(Line(A, B), Line(C, F)) we get 180 == 2 * direction(F, line_intersection(Line(A, B), Line(C, F))) - 2 * direction(A, line_intersection(Line(A, B), Line(C, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, B), Line(C, F)), F, line_intersection(Line(A, B), Line(C, F)), A we get 180 == 2 * direction(line_intersection(Line(A, B), Line(C, F)), F) - 2 * direction(line_intersection(Line(A, B), Line(C, F)), A) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(Line(A, B), Line(C, F)), line_intersection(Line(A, B), Line(C, F)), C we get 180 == 2 * direction(A, line_intersection(Line(A, B), Line(C, F))) - 2 * direction(line_intersection(Line(A, B), Line(C, F)), C) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(Line(A, B), Line(C, F)), C, line_intersection(Line(A, B), Line(C, F)) we get 180 == 2 * direction(A, line_intersection(Line(A, B), Line(C, F))) - 2 * direction(C, line_intersection(Line(A, B), Line(C, F))) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(Line(A, B), Line(C, F)), line_intersection(Line(A, B), Line(C, F)), A we get 180 == 2 * direction(C, line_intersection(Line(A, B), Line(C, F))) - 2 * direction(line_intersection(Line(A, B), Line(C, F)), A) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(Line(A, B), Line(C, F)), F, line_intersection(Line(A, B), Line(C, F)) we get 180 == 2 * direction(G, line_intersection(Line(A, B), Line(C, F))) - 2 * direction(F, line_intersection(Line(A, B), Line(C, F))) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(A, B), Line(C, F)), line_intersection(Line(A, B), Line(C, F)), A we get 180 == 2 * direction(F, line_intersection(Line(A, B), Line(C, F))) - 2 * direction(line_intersection(Line(A, B), Line(C, F)), A) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(Line(A, B), Line(C, F)), line_intersection(Line(A, B), Line(C, F)), C we get 180 == 2 * direction(B, line_intersection(Line(A, B), Line(C, F))) - 2 * direction(line_intersection(Line(A, B), Line(C, F)), C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, B), Line(C, F)), C, B, line_intersection(Line(A, B), Line(C, F)) we get 180 == 2 * direction(line_intersection(Line(A, B), Line(C, F)), C) - 2 * direction(B, line_intersection(Line(A, B), Line(C, F))) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(Line(A, B), Line(C, F)), line_intersection(Line(A, B), Line(C, F)), F we get 180 == 2 * direction(B, line_intersection(Line(A, B), Line(C, F))) - 2 * direction(line_intersection(Line(A, B), Line(C, F)), F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, B), Line(C, F)), C, line_intersection(Line(A, B), Line(C, F)), A we get 180 == 2 * direction(line_intersection(Line(A, B), Line(C, F)), C) - 2 * direction(line_intersection(Line(A, B), Line(C, F)), A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, B), Line(C, F)), F, G, line_intersection(Line(A, B), Line(C, F)) we get 180 == 2 * direction(line_intersection(Line(A, B), Line(C, F)), F) - 2 * direction(G, line_intersection(Line(A, B), Line(C, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, B), Line(C, F)), F, A, line_intersection(Line(A, B), Line(C, F)) we get 180 == 2 * direction(line_intersection(Line(A, B), Line(C, F)), F) - 2 * direction(A, line_intersection(Line(A, B), Line(C, F))) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(Line(A, B), Line(C, F)), line_intersection(Line(A, B), Line(C, F)), F we get 180 == 2 * direction(G, line_intersection(Line(A, B), Line(C, F))) - 2 * direction(line_intersection(Line(A, B), Line(C, F)), F) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(A, B), Line(C, F)), line_intersection(Line(A, B), Line(C, F)), G we get 180 == 2 * direction(F, line_intersection(Line(A, B), Line(C, F))) - 2 * direction(line_intersection(Line(A, B), Line(C, F)), G) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(Line(A, B), Line(C, F)), line_intersection(Line(A, B), Line(C, F)), B we get 180 == 2 * direction(C, line_intersection(Line(A, B), Line(C, F))) - 2 * direction(line_intersection(Line(A, B), Line(C, F)), B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, B), Line(C, F)), G, line_intersection(Line(A, B), Line(C, F)), C we get 180 == 2 * direction(line_intersection(Line(A, B), Line(C, F)), G) - 2 * direction(line_intersection(Line(A, B), Line(C, F)), C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, B), Line(C, F)), G, C, line_intersection(Line(A, B), Line(C, F)) we get 180 == 2 * direction(line_intersection(Line(A, B), Line(C, F)), G) - 2 * direction(C, line_intersection(Line(A, B), Line(C, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, B), Line(C, F)), F, line_intersection(Line(A, B), Line(C, F)), B we get 180 == 2 * direction(line_intersection(Line(A, B), Line(C, F)), F) - 2 * direction(line_intersection(Line(A, B), Line(C, F)), B) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(Line(A, B), Line(C, F)), F, line_intersection(Line(A, B), Line(C, F)) we get 180 == 2 * direction(B, line_intersection(Line(A, B), Line(C, F))) - 2 * direction(F, line_intersection(Line(A, B), Line(C, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, B), Line(C, F)), C, line_intersection(Line(A, B), Line(C, F)), B we get 180 == 2 * direction(line_intersection(Line(A, B), Line(C, F)), C) - 2 * direction(line_intersection(Line(A, B), Line(C, F)), B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, B), Line(C, F)), C, line_intersection(Line(A, B), Line(C, F)), G we get 180 == 2 * direction(line_intersection(Line(A, B), Line(C, F)), C) - 2 * direction(line_intersection(Line(A, B), Line(C, F)), G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, B), Line(C, F)), F, line_intersection(Line(A, B), Line(C, F)), G we get 180 == 2 * direction(line_intersection(Line(A, B), Line(C, F)), F) - 2 * direction(line_intersection(Line(A, B), Line(C, F)), G) mod 360
By collinear_definition on B, line_intersection(Line(A, B), Line(C, F)), A we get line_intersection(Line(A, B), Line(C, F)) in Line(A, B), A in Line(B, line_intersection(Line(A, B), Line(C, F))), Line(A, B) == Line(B, line_intersection(Line(A, B), Line(C, F))), 0 == 2 * angle(line_intersection(Line(A, B), Line(C, F)), B, A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, B), Line(C, F)), A, line_intersection(Line(A, B), Line(C, F)), C we get 180 == 2 * direction(line_intersection(Line(A, B), Line(C, F)), A) - 2 * direction(line_intersection(Line(A, B), Line(C, F)), C) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(Line(A, B), Line(C, F)), A, line_intersection(Line(A, B), Line(C, F)) we get 180 == 2 * direction(C, line_intersection(Line(A, B), Line(C, F))) - 2 * direction(A, line_intersection(Line(A, B), Line(C, F))) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(A, B), Line(C, F)), G, line_intersection(Line(A, B), Line(C, F)) we get 180 == 2 * direction(F, line_intersection(Line(A, B), Line(C, F))) - 2 * direction(G, line_intersection(Line(A, B), Line(C, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, B), Line(C, F)), C, A, line_intersection(Line(A, B), Line(C, F)) we get 180 == 2 * direction(line_intersection(Line(A, B), Line(C, F)), C) - 2 * direction(A, line_intersection(Line(A, B), Line(C, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, B), Line(C, F)), B, line_intersection(Line(A, B), Line(C, F)), C we get 180 == 2 * direction(line_intersection(Line(A, B), Line(C, F)), B) - 2 * direction(line_intersection(Line(A, B), Line(C, F)), C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, B), Line(C, F)), A, line_intersection(Line(A, B), Line(C, F)), F we get 180 == 2 * direction(line_intersection(Line(A, B), Line(C, F)), A) - 2 * direction(line_intersection(Line(A, B), Line(C, F)), F) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(A, B), Line(C, F)), line_intersection(Line(A, B), Line(C, F)), B we get 180 == 2 * direction(F, line_intersection(Line(A, B), Line(C, F))) - 2 * direction(line_intersection(Line(A, B), Line(C, F)), B) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(Line(A, B), Line(C, F)), line_intersection(Line(A, B), Line(C, F)), F we get 180 == 2 * direction(A, line_intersection(Line(A, B), Line(C, F))) - 2 * direction(line_intersection(Line(A, B), Line(C, F)), F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, B), Line(C, F)), A, C, line_intersection(Line(A, B), Line(C, F)) we get 180 == 2 * direction(line_intersection(Line(A, B), Line(C, F)), A) - 2 * direction(C, line_intersection(Line(A, B), Line(C, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, B), Line(C, F)), B, line_intersection(Line(A, B), Line(C, F)), F we get 180 == 2 * direction(line_intersection(Line(A, B), Line(C, F)), B) - 2 * direction(line_intersection(Line(A, B), Line(C, F)), F) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(A, B), Line(C, F)), B, line_intersection(Line(A, B), Line(C, F)) we get 180 == 2 * direction(F, line_intersection(Line(A, B), Line(C, F))) - 2 * direction(B, line_intersection(Line(A, B), Line(C, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, B), Line(C, F)), G, F, line_intersection(Line(A, B), Line(C, F)) we get 180 == 2 * direction(line_intersection(Line(A, B), Line(C, F)), G) - 2 * direction(F, line_intersection(Line(A, B), Line(C, F))) mod 360
By collinear_definition on G, B, line_intersection(Line(A, B), Line(C, F)) we get B in Line(G, line_intersection(Line(A, B), Line(C, F))), line_intersection(Line(A, B), Line(C, F)) in Line(B, G), Line(B, G) == Line(G, line_intersection(Line(A, B), Line(C, F))), 0 == 2 * angle(B, G, line_intersection(Line(A, B), Line(C, F))) mod 360
By internal_angle_bisector_definition_v0 on A, line_intersection(Line(A, B), Line(C, F)), A, G we get angle(A, G, line_intersection(Line(A, B), Line(C, F))) == angle(line_intersection(Line(A, B), Line(C, F)), G, A) mod 360
By internal_angle_bisector_definition_v0 on G, line_intersection(Line(A, B), Line(C, F)), G, A we get angle(G, A, line_intersection(Line(A, B), Line(C, F))) == angle(line_intersection(Line(A, B), Line(C, F)), A, G) mod 360
By log_of_2_times_distance on E, A, midpoint(A, E), A we get log(distance(A, E)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(A, midpoint(A, E)))
By collinear_definition on B, line_intersection(Line(A, B), Line(C, F)), G we get line_intersection(Line(A, B), Line(C, F)) in Line(B, G), G in Line(B, line_intersection(Line(A, B), Line(C, F))), Line(B, G) == Line(B, line_intersection(Line(A, B), Line(C, F))), 0 == 2 * angle(line_intersection(Line(A, B), Line(C, F)), B, G) mod 360
By power_of_a_point_on_circle on F, c we get 0 == power_of_a_point(F, c)
By isosceles_triangle_midpoint on G, E, A we get midpoint(A, E) in median(G, A, E)
By external_angle_bisector_definition_v0_r on D, F, A, I we get Line(F, I) == external_angle_bisector(A, I, D)
By collinear_definition on E, midpoint(A, E), A we get midpoint(A, E) in Line(A, E), A in Line(E, midpoint(A, E)), Line(A, E) == Line(E, midpoint(A, E)), 0 == 2 * angle(midpoint(A, E), E, A) mod 360
By collinear_definition on G, A, line_intersection(Line(A, B), Line(C, F)) we get A in Line(G, line_intersection(Line(A, B), Line(C, F))), line_intersection(Line(A, B), Line(C, F)) in Line(A, G), Line(A, G) == Line(G, line_intersection(Line(A, B), Line(C, F))), 0 == 2 * angle(A, G, line_intersection(Line(A, B), Line(C, F))) mod 360
By collinear_definition on A, line_intersection(Line(A, B), Line(C, F)), G we get line_intersection(Line(A, B), Line(C, F)) in Line(A, G), G in Line(A, line_intersection(Line(A, B), Line(C, F))), Line(A, G) == Line(A, line_intersection(Line(A, B), Line(C, F))), 0 == 2 * angle(line_intersection(Line(A, B), Line(C, F)), A, G) mod 360
By collinear_definition on F, C, line_intersection(Line(A, B), Line(C, F)) we get C in Line(F, line_intersection(Line(A, B), Line(C, F))), line_intersection(Line(A, B), Line(C, F)) in Line(C, F), Line(C, F) == Line(F, line_intersection(Line(A, B), Line(C, F))), 0 == 2 * angle(C, F, line_intersection(Line(A, B), Line(C, F))) mod 360
By isosceles_triangle_midpoint on I, A, E we get midpoint(A, E) in median(I, A, E)
By log_of_2_times_distance on A, E, midpoint(A, E), E we get log(distance(A, E)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(E, midpoint(A, E)))
By collinear_definition on G, line_intersection(Line(A, B), Line(C, F)), B we get line_intersection(Line(A, B), Line(C, F)) in Line(B, G), B in Line(G, line_intersection(Line(A, B), Line(C, F))), Line(B, G) == Line(G, line_intersection(Line(A, B), Line(C, F))), 0 == 2 * angle(line_intersection(Line(A, B), Line(C, F)), G, B) mod 360
By collinear_definition on E, A, midpoint(A, E) we get A in Line(E, midpoint(A, E)), midpoint(A, E) in Line(A, E), Line(A, E) == Line(E, midpoint(A, E)), 0 == 2 * angle(A, E, midpoint(A, E)) mod 360
By collinear_definition on A, midpoint(A, E), E we get midpoint(A, E) in Line(A, E), E in Line(A, midpoint(A, E)), Line(A, E) == Line(A, midpoint(A, E)), 0 == 2 * angle(midpoint(A, E), A, E) mod 360
By internal_angle_bisector_definition_v0_r on D, A, F, I we get Line(A, I) == internal_angle_bisector(D, I, F)
By collinear_definition on C, line_intersection(Line(A, B), Line(C, F)), F we get line_intersection(Line(A, B), Line(C, F)) in Line(C, F), F in Line(C, line_intersection(Line(A, B), Line(C, F))), Line(C, F) == Line(C, line_intersection(Line(A, B), Line(C, F))), 0 == 2 * angle(line_intersection(Line(A, B), Line(C, F)), C, F) mod 360
By internal_angle_bisector_definition_v0 on B, line_intersection(Line(A, B), Line(C, F)), B, A we get angle(B, A, line_intersection(Line(A, B), Line(C, F))) == angle(line_intersection(Line(A, B), Line(C, F)), A, B) mod 360
By internal_angle_bisector_definition_v0 on G, line_intersection(Line(A, B), Line(C, F)), G, B we get angle(G, B, line_intersection(Line(A, B), Line(C, F))) == angle(line_intersection(Line(A, B), Line(C, F)), B, G) mod 360
By collinear_definition on B, A, line_intersection(Line(A, B), Line(C, F)) we get A in Line(B, line_intersection(Line(A, B), Line(C, F))), line_intersection(Line(A, B), Line(C, F)) in Line(A, B), Line(A, B) == Line(B, line_intersection(Line(A, B), Line(C, F))), 0 == 2 * angle(A, B, line_intersection(Line(A, B), Line(C, F))) mod 360
By collinear_definition on A, line_intersection(Line(A, B), Line(C, F)), B we get line_intersection(Line(A, B), Line(C, F)) in Line(A, B), B in Line(A, line_intersection(Line(A, B), Line(C, F))), Line(A, B) == Line(A, line_intersection(Line(A, B), Line(C, F))), 0 == 2 * angle(line_intersection(Line(A, B), Line(C, F)), A, B) mod 360
By collinear_definition on B, G, line_intersection(Line(A, B), Line(C, F)) we get G in Line(B, line_intersection(Line(A, B), Line(C, F))), line_intersection(Line(A, B), Line(C, F)) in Line(B, G), Line(B, G) == Line(B, line_intersection(Line(A, B), Line(C, F))), 0 == 2 * angle(G, B, line_intersection(Line(A, B), Line(C, F))) mod 360
By collinear_definition on C, F, line_intersection(Line(A, B), Line(C, F)) we get F in Line(C, line_intersection(Line(A, B), Line(C, F))), line_intersection(Line(A, B), Line(C, F)) in Line(C, F), Line(C, F) == Line(C, line_intersection(Line(A, B), Line(C, F))), 0 == 2 * angle(F, C, line_intersection(Line(A, B), Line(C, F))) mod 360
By collinear_definition on A, E, midpoint(A, E) we get E in Line(A, midpoint(A, E)), midpoint(A, E) in Line(A, E), Line(A, E) == Line(A, midpoint(A, E)), 0 == 2 * angle(E, A, midpoint(A, E)) mod 360
By internal_angle_bisector_definition_v0 on B, line_intersection(Line(A, B), Line(C, F)), B, G we get angle(B, G, line_intersection(Line(A, B), Line(C, F))) == angle(line_intersection(Line(A, B), Line(C, F)), G, B) mod 360
By collinear_definition on F, line_intersection(Line(A, B), Line(C, F)), C we get line_intersection(Line(A, B), Line(C, F)) in Line(C, F), C in Line(F, line_intersection(Line(A, B), Line(C, F))), Line(C, F) == Line(F, line_intersection(Line(A, B), Line(C, F))), 0 == 2 * angle(line_intersection(Line(A, B), Line(C, F)), F, C) mod 360
By collinear_definition on A, G, line_intersection(Line(A, B), Line(C, F)) we get G in Line(A, line_intersection(Line(A, B), Line(C, F))), line_intersection(Line(A, B), Line(C, F)) in Line(A, G), Line(A, G) == Line(A, line_intersection(Line(A, B), Line(C, F))), 0 == 2 * angle(G, A, line_intersection(Line(A, B), Line(C, F))) mod 360
By collinear_definition on A, B, line_intersection(Line(A, B), Line(C, F)) we get B in Line(A, line_intersection(Line(A, B), Line(C, F))), line_intersection(Line(A, B), Line(C, F)) in Line(A, B), Line(A, B) == Line(A, line_intersection(Line(A, B), Line(C, F))), 0 == 2 * angle(B, A, line_intersection(Line(A, B), Line(C, F))) mod 360
By internal_angle_bisector_definition_v0 on A, line_intersection(Line(A, B), Line(C, F)), A, B we get angle(A, B, line_intersection(Line(A, B), Line(C, F))) == angle(line_intersection(Line(A, B), Line(C, F)), B, A) mod 360
By collinear_definition on G, line_intersection(Line(A, B), Line(C, F)), A we get line_intersection(Line(A, B), Line(C, F)) in Line(A, G), A in Line(G, line_intersection(Line(A, B), Line(C, F))), Line(A, G) == Line(G, line_intersection(Line(A, B), Line(C, F))), 0 == 2 * angle(line_intersection(Line(A, B), Line(C, F)), G, A) mod 360
By perpendicular_lines_draw_intersection on Line(G, I), g we get exists(line_intersection(g, Line(G, I)))
By perpendicular_bisector_properties on E, A we get perpendicular(Line(A, E), perpendicular_bisector(A, E)), midpoint(A, E) == line_intersection(Line(A, E), perpendicular_bisector(A, E))
By altitude_definition on A, line_intersection(Line(A, B), Line(C, F)), C, Line(A, B) we get Line(A, B) == altitude(A, C, line_intersection(Line(A, B), Line(C, F)))
By altitude_definition on C, G, line_intersection(Line(A, B), Line(C, F)), Line(C, F) we get Line(C, F) == altitude(C, G, line_intersection(Line(A, B), Line(C, F)))
By altitude_definition on F, B, line_intersection(Line(A, B), Line(C, F)), Line(C, F) we get Line(C, F) == altitude(F, B, line_intersection(Line(A, B), Line(C, F)))
By perpendicular_angle_conditions_v0 on G, line_intersection(Line(A, B), Line(C, F)), C we get angle(G, line_intersection(Line(A, B), Line(C, F)), C) == orientation(C, G, line_intersection(Line(A, B), Line(C, F))) mod 360
By altitude_definition on G, E, C, Line(G, I) we get Line(G, I) == altitude(G, C, E)
By altitude_definition on I, E, C, Line(G, I) we get Line(G, I) == altitude(I, C, E)
By altitude_definition on A, line_intersection(Line(A, B), Line(C, F)), F, Line(A, B) we get Line(A, B) == altitude(A, F, line_intersection(Line(A, B), Line(C, F)))
By collinear_definition on line_intersection(Line(A, B), Line(C, F)), G, B we get G in Line(B, line_intersection(Line(A, B), Line(C, F))), B in Line(G, line_intersection(Line(A, B), Line(C, F))), Line(B, line_intersection(Line(A, B), Line(C, F))) == Line(G, line_intersection(Line(A, B), Line(C, F))), 0 == 2 * angle(G, line_intersection(Line(A, B), Line(C, F)), B) mod 360
By altitude_definition on I, A, C, Line(G, I) we get Line(G, I) == altitude(I, A, C)
By altitude_definition on A, G, I, g we get g == altitude(A, G, I)
By altitude_definition on B, line_intersection(Line(A, B), Line(C, F)), C, Line(A, B) we get Line(A, B) == altitude(B, C, line_intersection(Line(A, B), Line(C, F)))
By isosceles_triangle_altitude_v3 on I, E, A we get identical(perpendicular_bisector(A, E), internal_angle_bisector(A, I, E), perpendicular_line(I, Line(A, E)))
By altitude_definition on E, I, G, g we get g == altitude(E, G, I)
By altitude_definition on G, A, E, Line(G, I) we get Line(G, I) == altitude(G, A, E)
By altitude_definition on F, A, line_intersection(Line(A, B), Line(C, F)), Line(C, F) we get Line(C, F) == altitude(F, A, line_intersection(Line(A, B), Line(C, F)))
By collinear_definition on line_intersection(Line(A, B), Line(C, F)), C, F we get C in Line(F, line_intersection(Line(A, B), Line(C, F))), F in Line(C, line_intersection(Line(A, B), Line(C, F))), Line(C, line_intersection(Line(A, B), Line(C, F))) == Line(F, line_intersection(Line(A, B), Line(C, F))), 0 == 2 * angle(C, line_intersection(Line(A, B), Line(C, F)), F) mod 360
By isosceles_triangle_altitude_v3 on I, A, E we get identical(perpendicular_bisector(A, E), internal_angle_bisector(A, I, E), perpendicular_line(I, Line(A, E)))
By collinear_definition on line_intersection(Line(A, B), Line(C, F)), A, B we get A in Line(B, line_intersection(Line(A, B), Line(C, F))), B in Line(A, line_intersection(Line(A, B), Line(C, F))), Line(A, line_intersection(Line(A, B), Line(C, F))) == Line(B, line_intersection(Line(A, B), Line(C, F))), 0 == 2 * angle(A, line_intersection(Line(A, B), Line(C, F)), B) mod 360
By perpendicular_angle_conditions_v0 on C, line_intersection(Line(A, B), Line(C, F)), A we get angle(C, line_intersection(Line(A, B), Line(C, F)), A) == orientation(A, C, line_intersection(Line(A, B), Line(C, F))) mod 360
By perpendicular_angle_conditions_v0 on C, line_intersection(Line(A, B), Line(C, F)), G we get angle(C, line_intersection(Line(A, B), Line(C, F)), G) == orientation(C, line_intersection(Line(A, B), Line(C, F)), G) mod 360
By altitude_definition on F, G, line_intersection(Line(A, B), Line(C, F)), Line(C, F) we get Line(C, F) == altitude(F, G, line_intersection(Line(A, B), Line(C, F)))
By collinear_definition on midpoint(A, E), E, A we get E in Line(A, midpoint(A, E)), A in Line(E, midpoint(A, E)), Line(A, midpoint(A, E)) == Line(E, midpoint(A, E)), 0 == 2 * angle(E, midpoint(A, E), A) mod 360
By collinear_definition on line_intersection(Line(A, B), Line(C, F)), G, A we get G in Line(A, line_intersection(Line(A, B), Line(C, F))), A in Line(G, line_intersection(Line(A, B), Line(C, F))), Line(A, line_intersection(Line(A, B), Line(C, F))) == Line(G, line_intersection(Line(A, B), Line(C, F))), 0 == 2 * angle(G, line_intersection(Line(A, B), Line(C, F)), A) mod 360
By altitude_definition on C, line_intersection(Line(A, B), Line(C, F)), B, Line(C, F) we get Line(C, F) == altitude(C, B, line_intersection(Line(A, B), Line(C, F)))
By collinear_definition on midpoint(A, E), A, E we get A in Line(E, midpoint(A, E)), E in Line(A, midpoint(A, E)), Line(A, midpoint(A, E)) == Line(E, midpoint(A, E)), 0 == 2 * angle(A, midpoint(A, E), E) mod 360
By perpendicular_angle_conditions_v0 on C, line_intersection(Line(A, B), Line(C, F)), B we get angle(C, line_intersection(Line(A, B), Line(C, F)), B) == orientation(B, C, line_intersection(Line(A, B), Line(C, F))) mod 360
By altitude_definition on I, A, E, Line(G, I) we get Line(G, I) == altitude(I, A, E)
By perpendicular_angle_conditions_v0 on F, line_intersection(Line(A, B), Line(C, F)), G we get angle(F, line_intersection(Line(A, B), Line(C, F)), G) == orientation(F, line_intersection(Line(A, B), Line(C, F)), G) mod 360
By perpendicular_angle_conditions_v0 on G, line_intersection(Line(A, B), Line(C, F)), F we get angle(G, line_intersection(Line(A, B), Line(C, F)), F) == orientation(F, G, line_intersection(Line(A, B), Line(C, F))) mod 360
By collinear_definition on line_intersection(Line(A, B), Line(C, F)), A, G we get A in Line(G, line_intersection(Line(A, B), Line(C, F))), G in Line(A, line_intersection(Line(A, B), Line(C, F))), Line(A, line_intersection(Line(A, B), Line(C, F))) == Line(G, line_intersection(Line(A, B), Line(C, F))), 0 == 2 * angle(A, line_intersection(Line(A, B), Line(C, F)), G) mod 360
By perpendicular_angle_conditions_v0 on A, line_intersection(Line(A, B), Line(C, F)), F we get angle(A, line_intersection(Line(A, B), Line(C, F)), F) == orientation(A, line_intersection(Line(A, B), Line(C, F)), F) mod 360
By collinear_definition on line_intersection(Line(A, B), Line(C, F)), B, A we get B in Line(A, line_intersection(Line(A, B), Line(C, F))), A in Line(B, line_intersection(Line(A, B), Line(C, F))), Line(A, line_intersection(Line(A, B), Line(C, F))) == Line(B, line_intersection(Line(A, B), Line(C, F))), 0 == 2 * angle(B, line_intersection(Line(A, B), Line(C, F)), A) mod 360
By collinear_definition on line_intersection(Line(A, B), Line(C, F)), F, C we get F in Line(C, line_intersection(Line(A, B), Line(C, F))), C in Line(F, line_intersection(Line(A, B), Line(C, F))), Line(C, line_intersection(Line(A, B), Line(C, F))) == Line(F, line_intersection(Line(A, B), Line(C, F))), 0 == 2 * angle(F, line_intersection(Line(A, B), Line(C, F)), C) mod 360
By altitude_definition on G, C, line_intersection(Line(A, B), Line(C, F)), Line(A, B) we get Line(A, B) == altitude(G, C, line_intersection(Line(A, B), Line(C, F)))
By altitude_definition on G, F, line_intersection(Line(A, B), Line(C, F)), Line(A, B) we get Line(A, B) == altitude(G, F, line_intersection(Line(A, B), Line(C, F)))
By perpendicular_angle_conditions_v0 on F, line_intersection(Line(A, B), Line(C, F)), A we get angle(F, line_intersection(Line(A, B), Line(C, F)), A) == orientation(A, F, line_intersection(Line(A, B), Line(C, F))) mod 360
By altitude_definition on G, C, A, Line(G, I) we get Line(G, I) == altitude(G, A, C)
By perpendicular_angle_conditions_v0 on A, line_intersection(Line(A, B), Line(C, F)), C we get angle(A, line_intersection(Line(A, B), Line(C, F)), C) == orientation(A, line_intersection(Line(A, B), Line(C, F)), C) mod 360
By perpendicular_angle_conditions_v0 on B, line_intersection(Line(A, B), Line(C, F)), C we get angle(B, line_intersection(Line(A, B), Line(C, F)), C) == orientation(B, line_intersection(Line(A, B), Line(C, F)), C) mod 360
By perpendicular_angle_conditions_v0 on B, line_intersection(Line(A, B), Line(C, F)), F we get angle(B, line_intersection(Line(A, B), Line(C, F)), F) == orientation(B, line_intersection(Line(A, B), Line(C, F)), F) mod 360
By altitude_definition on C, A, line_intersection(Line(A, B), Line(C, F)), Line(C, F) we get Line(C, F) == altitude(C, A, line_intersection(Line(A, B), Line(C, F)))
By altitude_definition on B, F, line_intersection(Line(A, B), Line(C, F)), Line(A, B) we get Line(A, B) == altitude(B, F, line_intersection(Line(A, B), Line(C, F)))
By perpendicular_angle_conditions_v0 on F, line_intersection(Line(A, B), Line(C, F)), B we get angle(F, line_intersection(Line(A, B), Line(C, F)), B) == orientation(B, F, line_intersection(Line(A, B), Line(C, F))) mod 360
By altitude_definition on C, I, G, g we get g == altitude(C, G, I)
By collinear_definition on line_intersection(Line(A, B), Line(C, F)), B, G we get B in Line(G, line_intersection(Line(A, B), Line(C, F))), G in Line(B, line_intersection(Line(A, B), Line(C, F))), Line(B, line_intersection(Line(A, B), Line(C, F))) == Line(G, line_intersection(Line(A, B), Line(C, F))), 0 == 2 * angle(B, line_intersection(Line(A, B), Line(C, F)), G) mod 360
By power_of_a_point_definition on I, D, F, c we get log(power_of_a_point(I, c)) == log(distance(D, I)) + log(distance(F, I))
By isosceles_triangle_altitude_v3 on G, A, E we get identical(perpendicular_bisector(A, E), internal_angle_bisector(A, G, E), perpendicular_line(G, Line(A, E)))
By isosceles_triangle_altitude_v3 on G, E, A we get identical(perpendicular_bisector(A, E), internal_angle_bisector(A, G, E), perpendicular_line(G, Line(A, E)))
By right_triangle_circumcenter_v1 on A, line_intersection(Line(A, B), Line(C, F)), F we get midpoint(A, F) == circumcenter(A, F, line_intersection(Line(A, B), Line(C, F)))
By power_of_a_point_definition on midpoint(A, E), A, E, Circle(A, E, F) we get log(power_of_a_point(midpoint(A, E), Circle(A, E, F))) == log(distance(A, midpoint(A, E))) + log(distance(E, midpoint(A, E)))
By between_implies_angles on A, midpoint(A, E), E we get 180 == angle(A, midpoint(A, E), E) mod 360, 0 == angle(midpoint(A, E), E, A) mod 360, 0 == angle(E, A, midpoint(A, E)) mod 360
By power_of_a_point_definition on line_intersection(Line(A, B), Line(C, F)), C, F, c we get log(power_of_a_point(line_intersection(Line(A, B), Line(C, F)), c)) == log(distance(C, line_intersection(Line(A, B), Line(C, F)))) + log(distance(F, line_intersection(Line(A, B), Line(C, F))))
By between_implies_angles on E, midpoint(A, E), A we get 180 == angle(E, midpoint(A, E), A) mod 360, 0 == angle(midpoint(A, E), A, E) mod 360, 0 == angle(A, E, midpoint(A, E)) mod 360
By power_of_a_point_definition on line_intersection(Line(A, B), Line(C, F)), A, B, Circle(A, B, D) we get log(power_of_a_point(line_intersection(Line(A, B), Line(C, F)), Circle(A, B, D))) == log(distance(A, line_intersection(Line(A, B), Line(C, F)))) + log(distance(B, line_intersection(Line(A, B), Line(C, F))))
By power_of_a_point_definition on midpoint(A, E), A, E, Circle(A, B, D) we get log(power_of_a_point(midpoint(A, E), Circle(A, B, D))) == log(distance(A, midpoint(A, E))) + log(distance(E, midpoint(A, E)))
By perpendicular_line_definition on C, Line(C, H), Line(A, B) we get Line(C, H) == perpendicular_line(C, Line(A, B))
By line_definition on C, midpoint(A, E), g we get g == Line(C, midpoint(A, E))
By perpendicular_line_definition on E, Line(E, G), Line(E, H) we get Line(E, G) == perpendicular_line(E, Line(E, H))
By perpendicular_line_definition on midpoint(A, E), g, i we get g == perpendicular_line(midpoint(A, E), i)
By line_intersection_definition on F, Line(F, H), h we get F == line_intersection(h, Line(F, H))
By perpendicular_line_definition on G, Line(D, G), Line(D, H) we get Line(D, G) == perpendicular_line(G, Line(D, H))
By perpendicular_line_definition on H, Line(E, H), Line(E, G) we get Line(E, H) == perpendicular_line(H, Line(E, G))
By perpendicular_line_definition on D, Line(D, G), Line(D, H) we get Line(D, G) == perpendicular_line(D, Line(D, H))
By perpendicular_line_definition on D, Line(D, H), Line(D, G) we get Line(D, H) == perpendicular_line(D, Line(D, G))
By perpendicular_line_definition on E, Line(E, H), Line(E, G) we get Line(E, H) == perpendicular_line(E, Line(E, G))
By perpendicular_line_definition on H, Line(C, H), Line(A, B) we get Line(C, H) == perpendicular_line(H, Line(A, B))
By perpendicular_line_definition on midpoint(A, E), g, Line(G, I) we get g == perpendicular_line(midpoint(A, E), Line(G, I))
By perpendicular_line_definition on B, Line(A, B), Line(C, H) we get Line(A, B) == perpendicular_line(B, Line(C, H))
By line_intersection_definition on H, Line(F, H), Line(D, H) we get H == line_intersection(Line(D, H), Line(F, H))
By perpendicular_line_definition on G, Line(A, B), Line(C, H) we get Line(A, B) == perpendicular_line(G, Line(C, H))
By perpendicular_line_definition on projection(A, Line(C, F)), Line(A, B), Line(C, H) we get Line(A, B) == perpendicular_line(projection(A, Line(C, F)), Line(C, H))
By line_intersection_definition on F, i, Line(F, H) we get F == line_intersection(i, Line(F, H))
By perpendicular_line_definition on H, Line(D, H), Line(D, G) we get Line(D, H) == perpendicular_line(H, Line(D, G))
By line_intersection_definition on H, Line(F, H), Line(E, H) we get H == line_intersection(Line(E, H), Line(F, H))
By perpendicular_line_definition on G, Line(E, G), Line(E, H) we get Line(E, G) == perpendicular_line(G, Line(E, H))
By tangents_angle_bisector on H, D, E, Circle(A, B, D) we get angle(D, H, center(Circle(A, B, D))) == angle(center(Circle(A, B, D)), H, E) mod 360
By perpendicular_line_definition on A, Line(A, B), Line(C, H) we get Line(A, B) == perpendicular_line(A, Line(C, H))
By tangents_angle_bisector on G, E, D, c we get angle(E, G, center(c)) == angle(center(c), G, D) mod 360
By tangents_angle_bisector on H, E, D, Circle(A, B, D) we get angle(E, H, center(Circle(A, B, D))) == angle(center(Circle(A, B, D)), H, D) mod 360
By tangents_angle_bisector on G, D, E, c we get angle(D, G, center(c)) == angle(center(c), G, E) mod 360
By same_angle_converse_v1 on H, F, C, E we get collinear(C, F, H)
By same_angle_converse_v1 on E, midpoint(A, E), C, A we get collinear(C, E, midpoint(A, E))
By perpendicular_direction_conditions_v0 on H, F, projection(A, Line(C, F)), B we get perpendicular(Line(F, H), Line(B, projection(A, Line(C, F))))
By same_angle_converse_v0 on A, midpoint(A, E), C, E we get collinear(A, C, midpoint(A, E))
By perpendicular_direction_conditions_v0_r on midpoint(A, E), E, G, I we get 180 == 2 * direction(midpoint(A, E), E) - 2 * direction(G, I) mod 360
By perpendicular_direction_conditions_v0 on H, F, B, A we get perpendicular(Line(A, B), Line(F, H))
By perpendicular_direction_conditions_v0_r on B, E, midpoint(A, E), A we get 180 == 2 * direction(B, E) - 2 * direction(midpoint(A, E), A) mod 360
By perpendicular_direction_conditions_v0 on H, F, projection(A, Line(C, F)), A we get perpendicular(Line(F, H), Line(A, projection(A, Line(C, F))))
By perpendicular_direction_conditions_v0 on H, F, A, G we get perpendicular(Line(A, G), Line(F, H))
By perpendicular_direction_conditions_v0_r on I, G, midpoint(A, E), A we get 180 == 2 * direction(I, G) - 2 * direction(midpoint(A, E), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, E), A, B, F we get 180 == 2 * direction(midpoint(A, E), A) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0 on H, F, projection(A, Line(C, F)), G we get perpendicular(Line(F, H), Line(G, projection(A, Line(C, F))))
By projection_definition on I, midpoint(A, E), g we get midpoint(A, E) == projection(I, g)
By perpendicular_direction_conditions_v0 on G, B, H, F we get perpendicular(Line(B, G), Line(F, H))
By projection_definition on E, midpoint(A, E), Line(G, I) we get midpoint(A, E) == projection(E, Line(G, I))
By perpendicular_direction_conditions_v0_r on G, I, midpoint(A, E), E we get 180 == 2 * direction(G, I) - 2 * direction(midpoint(A, E), E) mod 360
By perpendicular_direction_conditions_v0_r on B, E, midpoint(A, E), E we get 180 == 2 * direction(B, E) - 2 * direction(midpoint(A, E), E) mod 360
By perpendicular_direction_conditions_v0_r on I, G, midpoint(A, E), E we get 180 == 2 * direction(I, G) - 2 * direction(midpoint(A, E), E) mod 360
By projection_definition on G, midpoint(A, E), g we get midpoint(A, E) == projection(G, g)
By perpendicular_direction_conditions_v0_r on E, F, midpoint(A, E), E we get 180 == 2 * direction(E, F) - 2 * direction(midpoint(A, E), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, E), A, I, G we get 180 == 2 * direction(midpoint(A, E), A) - 2 * direction(I, G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, E), E, I, G we get 180 == 2 * direction(midpoint(A, E), E) - 2 * direction(I, G) mod 360
By perpendicular_direction_conditions_v0_r on G, I, midpoint(A, E), A we get 180 == 2 * direction(G, I) - 2 * direction(midpoint(A, E), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, E), A, E, B we get 180 == 2 * direction(midpoint(A, E), A) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, E), A, F, B we get 180 == 2 * direction(midpoint(A, E), A) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on F, B, midpoint(A, E), E we get 180 == 2 * direction(F, B) - 2 * direction(midpoint(A, E), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, E), E, F, E we get 180 == 2 * direction(midpoint(A, E), E) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on E, B, midpoint(A, E), E we get 180 == 2 * direction(E, B) - 2 * direction(midpoint(A, E), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, E), A, G, I we get 180 == 2 * direction(midpoint(A, E), A) - 2 * direction(G, I) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, E), E, B, E we get 180 == 2 * direction(midpoint(A, E), E) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, E), A, E, F we get 180 == 2 * direction(midpoint(A, E), A) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on B, F, midpoint(A, E), E we get 180 == 2 * direction(B, F) - 2 * direction(midpoint(A, E), E) mod 360
By projection_definition on A, midpoint(A, E), Line(G, I) we get midpoint(A, E) == projection(A, Line(G, I))
By perpendicular_direction_conditions_v0_r on midpoint(A, E), E, B, F we get 180 == 2 * direction(midpoint(A, E), E) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, E), A, F, E we get 180 == 2 * direction(midpoint(A, E), A) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on B, F, midpoint(A, E), A we get 180 == 2 * direction(B, F) - 2 * direction(midpoint(A, E), A) mod 360
By perpendicular_direction_conditions_v0_r on F, E, midpoint(A, E), A we get 180 == 2 * direction(F, E) - 2 * direction(midpoint(A, E), A) mod 360
By perpendicular_direction_conditions_v0_r on E, B, midpoint(A, E), A we get 180 == 2 * direction(E, B) - 2 * direction(midpoint(A, E), A) mod 360
By perpendicular_direction_conditions_v0_r on F, E, midpoint(A, E), E we get 180 == 2 * direction(F, E) - 2 * direction(midpoint(A, E), E) mod 360
By perpendicular_direction_conditions_v0_r on E, F, midpoint(A, E), A we get 180 == 2 * direction(E, F) - 2 * direction(midpoint(A, E), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, E), A, B, E we get 180 == 2 * direction(midpoint(A, E), A) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, E), E, E, F we get 180 == 2 * direction(midpoint(A, E), E) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, E), E, F, B we get 180 == 2 * direction(midpoint(A, E), E) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on F, B, midpoint(A, E), A we get 180 == 2 * direction(F, B) - 2 * direction(midpoint(A, E), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, E), E, E, B we get 180 == 2 * direction(midpoint(A, E), E) - 2 * direction(E, B) mod 360
By parallel_line_definition on I, Line(G, I), i we get Line(G, I) == parallel_line(I, i)
By parallel_line_definition on F, i, Line(G, I) we get i == parallel_line(F, Line(G, I))
By parallel_line_definition on midpoint(A, E), Line(G, I), i we get Line(G, I) == parallel_line(midpoint(A, E), i)
By parallel_line_definition on G, Line(G, I), i we get Line(G, I) == parallel_line(G, i)
By circle_radius_v0_r on projection(A, Line(C, F)), Circle(A, F, projection(A, Line(C, F))) we get radius(Circle(A, F, projection(A, Line(C, F)))) == distance(projection(A, Line(C, F)), center(Circle(A, F, projection(A, Line(C, F)))))
By circle_radius_v0_r on F, Circle(A, F, projection(A, Line(C, F))) we get radius(Circle(A, F, projection(A, Line(C, F)))) == distance(F, center(Circle(A, F, projection(A, Line(C, F)))))
By parallel_line_definition on E, i, Line(G, I) we get i == parallel_line(E, Line(G, I))
By parallel_line_definition on B, i, Line(G, I) we get i == parallel_line(B, Line(G, I))
By circle_radius_v0_r on A, Circle(A, F, projection(A, Line(C, F))) we get radius(Circle(A, F, projection(A, Line(C, F)))) == distance(A, center(Circle(A, F, projection(A, Line(C, F)))))
By angle_to_center on A, F, projection(A, Line(C, F)), Circle(A, F, projection(A, Line(C, F))) we get 2 * angle(A, F, projection(A, Line(C, F))) == angle(A, center(Circle(A, F, projection(A, Line(C, F)))), projection(A, Line(C, F))) mod 360
By tangent_lengths_equal on H, Line(D, H), Line(E, H), Circle(A, B, D) we get distance(H, line_circle_tangent_point(Line(D, H), Circle(A, B, D))) == distance(H, line_circle_tangent_point(Line(E, H), Circle(A, B, D)))
By angle_to_center on projection(A, Line(C, F)), F, A, Circle(A, F, projection(A, Line(C, F))) we get 2 * angle(projection(A, Line(C, F)), F, A) == angle(projection(A, Line(C, F)), center(Circle(A, F, projection(A, Line(C, F)))), A) mod 360
By tangent_lengths_equal on G, Line(E, G), Line(D, G), c we get distance(G, line_circle_tangent_point(Line(D, G), c)) == distance(G, line_circle_tangent_point(Line(E, G), c))
By angle_to_center on F, A, projection(A, Line(C, F)), Circle(A, F, projection(A, Line(C, F))) we get 2 * angle(F, A, projection(A, Line(C, F))) == angle(F, center(Circle(A, F, projection(A, Line(C, F)))), projection(A, Line(C, F))) mod 360
By angle_to_center on projection(A, Line(C, F)), A, F, Circle(A, F, projection(A, Line(C, F))) we get 2 * angle(projection(A, Line(C, F)), A, F) == angle(projection(A, Line(C, F)), center(Circle(A, F, projection(A, Line(C, F)))), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, E), G, E, midpoint(A, E) we get 180 == 2 * direction(midpoint(A, E), G) - 2 * direction(E, midpoint(A, E)) mod 360
By same_angle_v1 on F, A, I, H we get angle(A, F, H) == angle(I, F, H) mod 360
By perpendicular_direction_conditions_v0_r on I, midpoint(A, E), A, midpoint(A, E) we get 180 == 2 * direction(I, midpoint(A, E)) - 2 * direction(A, midpoint(A, E)) mod 360
By perpendicular_direction_conditions_v0_r on A, C, midpoint(A, E), I we get 180 == 2 * direction(A, C) - 2 * direction(midpoint(A, E), I) mod 360
By same_angle_v3 on F, D, A, H we get angle(D, F, H) == angle(A, F, H) + 180 mod 360
By orthocenter_concurrency on G, C, A we get orthocenter(A, C, G) in altitude(G, A, C), orthocenter(A, C, G) in altitude(C, A, G), orthocenter(A, C, G) in altitude(A, C, G)
By same_angle_v2 on F, B, E, H we get angle(B, F, H) == angle(E, F, H) + 180 mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, E), E, midpoint(A, E), G we get 180 == 2 * direction(midpoint(A, E), E) - 2 * direction(midpoint(A, E), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, E), I, E, A we get 180 == 2 * direction(midpoint(A, E), I) - 2 * direction(E, A) mod 360
By same_angle_v2 on F, D, I, H we get angle(D, F, H) == angle(I, F, H) + 180 mod 360
By perpendicular_direction_conditions_v0_r on A, C, G, midpoint(A, E) we get 180 == 2 * direction(A, C) - 2 * direction(G, midpoint(A, E)) mod 360
By perpendicular_direction_conditions_v0_r on C, A, midpoint(A, E), G we get 180 == 2 * direction(C, A) - 2 * direction(midpoint(A, E), G) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(A, E), I, midpoint(A, E) we get 180 == 2 * direction(A, midpoint(A, E)) - 2 * direction(I, midpoint(A, E)) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(A, E), C, A we get 180 == 2 * direction(G, midpoint(A, E)) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, E), G, E, A we get 180 == 2 * direction(midpoint(A, E), G) - 2 * direction(E, A) mod 360
By orthocenter_concurrency on I, C, A we get orthocenter(A, C, I) in altitude(I, A, C), orthocenter(A, C, I) in altitude(C, A, I), orthocenter(A, C, I) in altitude(A, C, I)
By projection_definition on H, E, Line(E, G) we get E == projection(H, Line(E, G))
By perpendicular_direction_conditions_v0_r on A, midpoint(A, E), midpoint(A, E), G we get 180 == 2 * direction(A, midpoint(A, E)) - 2 * direction(midpoint(A, E), G) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(A, E), G, midpoint(A, E) we get 180 == 2 * direction(A, midpoint(A, E)) - 2 * direction(G, midpoint(A, E)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, E), G, A, midpoint(A, E) we get 180 == 2 * direction(midpoint(A, E), G) - 2 * direction(A, midpoint(A, E)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, E), I, A, E we get 180 == 2 * direction(midpoint(A, E), I) - 2 * direction(A, E) mod 360
By perpendicular_direction_conditions_v0_r on E, C, I, midpoint(A, E) we get 180 == 2 * direction(E, C) - 2 * direction(I, midpoint(A, E)) mod 360
By perpendicular_direction_conditions_v0_r on C, E, I, midpoint(A, E) we get 180 == 2 * direction(C, E) - 2 * direction(I, midpoint(A, E)) mod 360
By perpendicular_direction_conditions_v0_r on E, A, midpoint(A, E), I we get 180 == 2 * direction(E, A) - 2 * direction(midpoint(A, E), I) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, E), I, E, midpoint(A, E) we get 180 == 2 * direction(midpoint(A, E), I) - 2 * direction(E, midpoint(A, E)) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(A, E), midpoint(A, E), A we get 180 == 2 * direction(G, midpoint(A, E)) - 2 * direction(midpoint(A, E), A) mod 360
By perpendicular_direction_conditions_v0_r on A, C, midpoint(A, E), G we get 180 == 2 * direction(A, C) - 2 * direction(midpoint(A, E), G) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(A, E), midpoint(A, E), G we get 180 == 2 * direction(E, midpoint(A, E)) - 2 * direction(midpoint(A, E), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, E), G, C, E we get 180 == 2 * direction(midpoint(A, E), G) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, E), E, G, midpoint(A, E) we get 180 == 2 * direction(midpoint(A, E), E) - 2 * direction(G, midpoint(A, E)) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(A, E), A, midpoint(A, E) we get 180 == 2 * direction(G, midpoint(A, E)) - 2 * direction(A, midpoint(A, E)) mod 360
By perpendicular_direction_conditions_v0_r on C, E, midpoint(A, E), G we get 180 == 2 * direction(C, E) - 2 * direction(midpoint(A, E), G) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(A, E), E, C we get 180 == 2 * direction(G, midpoint(A, E)) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(A, E), A, C we get 180 == 2 * direction(G, midpoint(A, E)) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on E, A, G, midpoint(A, E) we get 180 == 2 * direction(E, A) - 2 * direction(G, midpoint(A, E)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, E), A, I, midpoint(A, E) we get 180 == 2 * direction(midpoint(A, E), A) - 2 * direction(I, midpoint(A, E)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, E), I, midpoint(A, E), E we get 180 == 2 * direction(midpoint(A, E), I) - 2 * direction(midpoint(A, E), E) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(A, E), E, A we get 180 == 2 * direction(G, midpoint(A, E)) - 2 * direction(E, A) mod 360
By perpendicular_direction_conditions_v0_r on I, midpoint(A, E), midpoint(A, E), A we get 180 == 2 * direction(I, midpoint(A, E)) - 2 * direction(midpoint(A, E), A) mod 360
By perpendicular_direction_conditions_v0_r on A, E, I, midpoint(A, E) we get 180 == 2 * direction(A, E) - 2 * direction(I, midpoint(A, E)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, E), I, C, A we get 180 == 2 * direction(midpoint(A, E), I) - 2 * direction(C, A) mod 360
By projection_definition on G, E, Line(E, H) we get E == projection(G, Line(E, H))
By perpendicular_direction_conditions_v0_r on I, midpoint(A, E), E, midpoint(A, E) we get 180 == 2 * direction(I, midpoint(A, E)) - 2 * direction(E, midpoint(A, E)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(A, E), I, midpoint(A, E) we get 180 == 2 * direction(E, midpoint(A, E)) - 2 * direction(I, midpoint(A, E)) mod 360
By perpendicular_direction_conditions_v0_r on I, midpoint(A, E), E, A we get 180 == 2 * direction(I, midpoint(A, E)) - 2 * direction(E, A) mod 360
By perpendicular_direction_conditions_v0_r on I, midpoint(A, E), E, C we get 180 == 2 * direction(I, midpoint(A, E)) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on A, E, midpoint(A, E), G we get 180 == 2 * direction(A, E) - 2 * direction(midpoint(A, E), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, E), I, midpoint(A, E), A we get 180 == 2 * direction(midpoint(A, E), I) - 2 * direction(midpoint(A, E), A) mod 360
By perpendicular_direction_conditions_v0_r on A, E, midpoint(A, E), I we get 180 == 2 * direction(A, E) - 2 * direction(midpoint(A, E), I) mod 360
By perpendicular_direction_conditions_v0_r on E, C, midpoint(A, E), I we get 180 == 2 * direction(E, C) - 2 * direction(midpoint(A, E), I) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(A, E), midpoint(A, E), E we get 180 == 2 * direction(G, midpoint(A, E)) - 2 * direction(midpoint(A, E), E) mod 360
By perpendicular_direction_conditions_v0_r on C, A, midpoint(A, E), I we get 180 == 2 * direction(C, A) - 2 * direction(midpoint(A, E), I) mod 360
By projection_definition on G, D, Line(D, H) we get D == projection(G, Line(D, H))
By perpendicular_direction_conditions_v0_r on midpoint(A, E), A, midpoint(A, E), G we get 180 == 2 * direction(midpoint(A, E), A) - 2 * direction(midpoint(A, E), G) mod 360
By perpendicular_direction_conditions_v0_r on E, C, midpoint(A, E), G we get 180 == 2 * direction(E, C) - 2 * direction(midpoint(A, E), G) mod 360
By perpendicular_direction_conditions_v0_r on A, C, I, midpoint(A, E) we get 180 == 2 * direction(A, C) - 2 * direction(I, midpoint(A, E)) mod 360
By perpendicular_direction_conditions_v0_r on C, A, I, midpoint(A, E) we get 180 == 2 * direction(C, A) - 2 * direction(I, midpoint(A, E)) mod 360
By perpendicular_direction_conditions_v0_r on E, C, G, midpoint(A, E) we get 180 == 2 * direction(E, C) - 2 * direction(G, midpoint(A, E)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, E), A, midpoint(A, E), I we get 180 == 2 * direction(midpoint(A, E), A) - 2 * direction(midpoint(A, E), I) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(A, E), A, E we get 180 == 2 * direction(G, midpoint(A, E)) - 2 * direction(A, E) mod 360
By perpendicular_direction_conditions_v0_r on C, A, G, midpoint(A, E) we get 180 == 2 * direction(C, A) - 2 * direction(G, midpoint(A, E)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, E), A, G, midpoint(A, E) we get 180 == 2 * direction(midpoint(A, E), A) - 2 * direction(G, midpoint(A, E)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, E), G, midpoint(A, E), E we get 180 == 2 * direction(midpoint(A, E), G) - 2 * direction(midpoint(A, E), E) mod 360
By perpendicular_direction_conditions_v0_r on E, A, midpoint(A, E), G we get 180 == 2 * direction(E, A) - 2 * direction(midpoint(A, E), G) mod 360
By projection_definition on H, D, Line(D, G) we get D == projection(H, Line(D, G))
By projection_definition on midpoint(A, E), E, i we get E == projection(midpoint(A, E), i)
By perpendicular_direction_conditions_v0_r on midpoint(A, E), G, E, C we get 180 == 2 * direction(midpoint(A, E), G) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on I, midpoint(A, E), midpoint(A, E), E we get 180 == 2 * direction(I, midpoint(A, E)) - 2 * direction(midpoint(A, E), E) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(A, E), midpoint(A, E), I we get 180 == 2 * direction(E, midpoint(A, E)) - 2 * direction(midpoint(A, E), I) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(A, E), midpoint(A, E), I we get 180 == 2 * direction(A, midpoint(A, E)) - 2 * direction(midpoint(A, E), I) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, E), I, A, midpoint(A, E) we get 180 == 2 * direction(midpoint(A, E), I) - 2 * direction(A, midpoint(A, E)) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(A, E), C, E we get 180 == 2 * direction(G, midpoint(A, E)) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on C, E, midpoint(A, E), I we get 180 == 2 * direction(C, E) - 2 * direction(midpoint(A, E), I) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, E), E, I, midpoint(A, E) we get 180 == 2 * direction(midpoint(A, E), E) - 2 * direction(I, midpoint(A, E)) mod 360
By perpendicular_direction_conditions_v0_r on C, E, G, midpoint(A, E) we get 180 == 2 * direction(C, E) - 2 * direction(G, midpoint(A, E)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(A, E), G, midpoint(A, E) we get 180 == 2 * direction(E, midpoint(A, E)) - 2 * direction(G, midpoint(A, E)) mod 360
By perpendicular_direction_conditions_v0_r on E, A, I, midpoint(A, E) we get 180 == 2 * direction(E, A) - 2 * direction(I, midpoint(A, E)) mod 360
By perpendicular_direction_conditions_v0_r on A, E, G, midpoint(A, E) we get 180 == 2 * direction(A, E) - 2 * direction(G, midpoint(A, E)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, E), I, C, E we get 180 == 2 * direction(midpoint(A, E), I) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(A, E), E, midpoint(A, E) we get 180 == 2 * direction(G, midpoint(A, E)) - 2 * direction(E, midpoint(A, E)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, E), I, E, C we get 180 == 2 * direction(midpoint(A, E), I) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on I, midpoint(A, E), C, E we get 180 == 2 * direction(I, midpoint(A, E)) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, E), G, A, C we get 180 == 2 * direction(midpoint(A, E), G) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, E), G, midpoint(A, E), A we get 180 == 2 * direction(midpoint(A, E), G) - 2 * direction(midpoint(A, E), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, E), I, A, C we get 180 == 2 * direction(midpoint(A, E), I) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, E), G, A, E we get 180 == 2 * direction(midpoint(A, E), G) - 2 * direction(A, E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, E), G, C, A we get 180 == 2 * direction(midpoint(A, E), G) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on I, midpoint(A, E), A, C we get 180 == 2 * direction(I, midpoint(A, E)) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, E), E, midpoint(A, E), I we get 180 == 2 * direction(midpoint(A, E), E) - 2 * direction(midpoint(A, E), I) mod 360
By perpendicular_direction_conditions_v0_r on I, midpoint(A, E), A, E we get 180 == 2 * direction(I, midpoint(A, E)) - 2 * direction(A, E) mod 360
By perpendicular_direction_conditions_v0_r on I, midpoint(A, E), C, A we get 180 == 2 * direction(I, midpoint(A, E)) - 2 * direction(C, A) mod 360
By altitude_definition on C, projection(A, Line(C, F)), B, Line(C, H) we get Line(C, H) == altitude(C, B, projection(A, Line(C, F)))
By perpendicular_angle_conditions_v0 on midpoint(A, E), E, B we get angle(midpoint(A, E), E, B) == orientation(B, midpoint(A, E), E) mod 360
By external_angle_bisector_definition_v0 on F, midpoint(A, E), B, E we get 180 == angle(F, E, midpoint(A, E)) + angle(B, E, midpoint(A, E)) mod 360
By perpendicular_angle_conditions_v0 on midpoint(A, E), E, F we get angle(midpoint(A, E), E, F) == orientation(E, F, midpoint(A, E)) mod 360
By altitude_definition on C, G, A, Line(C, H) we get Line(C, H) == altitude(C, A, G)
By reverse_direction on projection(A, Line(C, F)), A we get 180 == direction(projection(A, Line(C, F)), A) - direction(A, projection(A, Line(C, F))) mod 360
By reverse_direction on projection(A, Line(C, F)), B we get 180 == direction(projection(A, Line(C, F)), B) - direction(B, projection(A, Line(C, F))) mod 360
By reverse_direction on projection(A, Line(C, F)), G we get 180 == direction(projection(A, Line(C, F)), G) - direction(G, projection(A, Line(C, F))) mod 360
By double_perpendicular_and_parallel_v0 on Line(C, F), Line(A, B), Line(C, H) we get parallel(Line(C, F), Line(C, H))
By perpendicular_angle_conditions_v0 on G, D, H we get angle(G, D, H) == orientation(D, H, G) mod 360
By altitude_definition on C, G, B, Line(C, H) we get Line(C, H) == altitude(C, B, G)
By perpendicular_angle_conditions_v0 on G, E, H we get angle(G, E, H) == orientation(E, H, G) mod 360
By altitude_definition on C, B, A, Line(C, H) we get Line(C, H) == altitude(C, A, B)
By reverse_direction on A, midpoint(A, E) we get 180 == direction(A, midpoint(A, E)) - direction(midpoint(A, E), A) mod 360
By altitude_definition on C, G, projection(A, Line(C, F)), Line(C, H) we get Line(C, H) == altitude(C, G, projection(A, Line(C, F)))
By perpendicular_angle_conditions_v0 on F, E, midpoint(A, E) we get angle(F, E, midpoint(A, E)) == orientation(E, midpoint(A, E), F) mod 360
By reverse_direction on E, midpoint(A, E) we get 180 == direction(E, midpoint(A, E)) - direction(midpoint(A, E), E) mod 360
By internal_angle_bisector_definition_v0 on C, midpoint(A, E), C, A we get angle(C, A, midpoint(A, E)) == angle(midpoint(A, E), A, C) mod 360
By altitude_definition on C, A, projection(A, Line(C, F)), Line(C, H) we get Line(C, H) == altitude(C, A, projection(A, Line(C, F)))
By internal_angle_bisector_definition_v0 on C, midpoint(A, E), C, E we get angle(C, E, midpoint(A, E)) == angle(midpoint(A, E), E, C) mod 360
By perpendicular_angle_conditions_v0 on B, E, midpoint(A, E) we get angle(B, E, midpoint(A, E)) == orientation(B, E, midpoint(A, E)) mod 360
By external_angle_bisector_definition_v0 on F, midpoint(A, E), F, E we get 180 == angle(F, E, midpoint(A, E)) + angle(F, E, midpoint(A, E)) mod 360
By reverse_direction on B, projection(A, Line(C, F)) we get 180 == direction(B, projection(A, Line(C, F))) - direction(projection(A, Line(C, F)), B) mod 360
By reverse_direction on midpoint(A, E), A we get 180 == direction(midpoint(A, E), A) - direction(A, midpoint(A, E)) mod 360
By reverse_direction on projection(A, Line(C, F)), C we get 180 == direction(projection(A, Line(C, F)), C) - direction(C, projection(A, Line(C, F))) mod 360
By reverse_direction on projection(A, Line(C, F)), F we get 180 == direction(projection(A, Line(C, F)), F) - direction(F, projection(A, Line(C, F))) mod 360
By reverse_direction on A, projection(A, Line(C, F)) we get 180 == direction(A, projection(A, Line(C, F))) - direction(projection(A, Line(C, F)), A) mod 360
By reverse_direction on midpoint(A, E), E we get 180 == direction(midpoint(A, E), E) - direction(E, midpoint(A, E)) mod 360
By reverse_direction on G, projection(A, Line(C, F)) we get 180 == direction(G, projection(A, Line(C, F))) - direction(projection(A, Line(C, F)), G) mod 360
By reverse_direction on C, projection(A, Line(C, F)) we get 180 == direction(C, projection(A, Line(C, F))) - direction(projection(A, Line(C, F)), C) mod 360
By perpendicular_angle_conditions_v0 on H, E, G we get angle(H, E, G) == orientation(E, G, H) mod 360
By perpendicular_angle_conditions_v0 on H, D, G we get angle(H, D, G) == orientation(D, G, H) mod 360
By reverse_direction on F, projection(A, Line(C, F)) we get 180 == direction(F, projection(A, Line(C, F))) - direction(projection(A, Line(C, F)), F) mod 360
By external_angle_bisector_definition_v0 on B, midpoint(A, E), B, E we get 180 == angle(B, E, midpoint(A, E)) + angle(B, E, midpoint(A, E)) mod 360
By concyclic_definition_0 on H, D, E, G we get G in Circle(D, E, H)
By external_angle_bisector_definition_v0_r on A, projection(A, Line(C, F)), B, G we get external_angle_bisector(A, G, B) == Line(G, projection(A, Line(C, F)))
By concyclic_definition_0 on D, E, I, G we get G in Circle(D, E, I)
By concyclic_definition_0 on G, I, D, E we get E in Circle(D, G, I)
By external_angle_bisector_definition_v0_r on A, F, A, projection(A, Line(C, F)) we get Line(F, projection(A, Line(C, F))) == external_angle_bisector(A, projection(A, Line(C, F)), A)
By internal_angle_bisector_definition_v0_r on A, B, A, projection(A, Line(C, F)) we get Line(B, projection(A, Line(C, F))) == internal_angle_bisector(A, projection(A, Line(C, F)), A)
By sas_similarity on A, E, G, F, E, H we get similar_triangles(A, E, G, F, E, H)
By external_angle_bisector_definition_v0_r on E, G, F, I we get Line(G, I) == external_angle_bisector(E, I, F)
By sss_anti_congruence_v0 on F, E, H, E, F, H we get anti_congruent_triangles(E, F, H, F, E, H)
By similar_triangle_basic_properties on E, B, A, E, C, F we get angle(E, B, A) == angle(E, C, F) mod 360, angle(B, A, E) == angle(C, F, E) mod 360, angle(A, E, B) == angle(F, E, C) mod 360, log(distance(B, E)) + log(distance(C, F)) == log(distance(C, E)) + log(distance(A, B)), log(distance(A, B)) + log(distance(E, F)) == log(distance(C, F)) + log(distance(A, E)), log(distance(A, E)) + log(distance(C, E)) == log(distance(E, F)) + log(distance(B, E))
By internal_angle_bisector_definition_v0_r on A, G, A, projection(A, Line(C, F)) we get Line(G, projection(A, Line(C, F))) == internal_angle_bisector(A, projection(A, Line(C, F)), A)
By concyclic_definition_0 on H, G, E, D we get D in Circle(E, G, H)
By similar_triangle_basic_properties on B, D, A, F, D, C we get angle(B, D, A) == angle(F, D, C) mod 360, angle(D, A, B) == angle(D, C, F) mod 360, angle(A, B, D) == angle(C, F, D) mod 360, log(distance(B, D)) + log(distance(C, D)) == log(distance(D, F)) + log(distance(A, D)), log(distance(A, D)) + log(distance(C, F)) == log(distance(C, D)) + log(distance(A, B)), log(distance(A, B)) + log(distance(D, F)) == log(distance(C, F)) + log(distance(B, D))
By external_angle_bisector_definition_v0_r on C, G, C, projection(A, Line(C, F)) we get Line(G, projection(A, Line(C, F))) == external_angle_bisector(C, projection(A, Line(C, F)), C)
By anti_similar_triangle_basic_properties on E, D, A, F, C, A we get angle(E, D, A) == 0 - angle(F, C, A) mod 360, angle(D, A, E) == 0 - angle(C, A, F) mod 360, angle(A, E, D) == 0 - angle(A, F, C) mod 360, log(distance(C, F)) + log(distance(A, D)) == log(distance(D, E)) + log(distance(A, C)), log(distance(A, C)) + log(distance(A, E)) == log(distance(A, D)) + log(distance(A, F)), log(distance(A, E)) + log(distance(C, F)) == log(distance(A, F)) + log(distance(D, E))
By concyclic_definition_0 on G, E, D, I we get I in Circle(D, E, G)
By aa_anti_similarity on E, G, A, F, H, E we get anti_similar_triangles(A, E, G, E, F, H)
By external_angle_bisector_definition_v0_r on C, A, midpoint(A, E), E we get Line(A, E) == external_angle_bisector(C, E, midpoint(A, E))
By concyclic_definition_0 on G, D, E, H we get H in Circle(D, E, G)
By sss_anti_congruence_v0 on H, D, F, H, F, D we get anti_congruent_triangles(D, F, H, F, D, H)
By similar_triangle_basic_properties on B, E, A, C, E, F we get angle(B, E, A) == angle(C, E, F) mod 360, angle(E, A, B) == angle(E, F, C) mod 360, angle(A, B, E) == angle(F, C, E) mod 360, log(distance(B, E)) + log(distance(E, F)) == log(distance(C, E)) + log(distance(A, E)), log(distance(A, E)) + log(distance(C, F)) == log(distance(E, F)) + log(distance(A, B)), log(distance(A, B)) + log(distance(C, E)) == log(distance(C, F)) + log(distance(B, E))
By sss_anti_congruence_v1 on F, D, H, D, F, H we get anti_congruent_triangles(D, F, H, F, D, H)
By external_angle_bisector_definition_v0_r on C, B, C, projection(A, Line(C, F)) we get Line(B, projection(A, Line(C, F))) == external_angle_bisector(C, projection(A, Line(C, F)), C)
By sss_anti_congruence_v0 on F, E, H, E, F, H we get anti_congruent_triangles(E, F, H, F, E, H)
By power_of_a_point_on_circle on A, Circle(A, F, projection(A, Line(C, F))) we get 0 == power_of_a_point(A, Circle(A, F, projection(A, Line(C, F))))
By sss_anti_congruence_v1 on H, E, F, H, F, E we get anti_congruent_triangles(E, F, H, F, E, H)
By external_angle_bisector_definition_v0_r on F, G, F, projection(A, Line(C, F)) we get Line(G, projection(A, Line(C, F))) == external_angle_bisector(F, projection(A, Line(C, F)), F)
By sss_anti_congruence_v0 on H, D, F, H, F, D we get anti_congruent_triangles(D, F, H, F, D, H)
By aa_similarity on F, D, H, B, D, G we get similar_triangles(B, D, G, F, D, H)
By concyclic_definition_0 on D, E, H, I we get I in Circle(D, E, H)
By sss_anti_congruence_v1 on F, D, H, D, F, H we get anti_congruent_triangles(D, F, H, F, D, H)
By internal_angle_bisector_definition_v0_r on projection(A, Line(C, F)), F, projection(A, Line(C, F)), C we get Line(C, F) == internal_angle_bisector(projection(A, Line(C, F)), C, projection(A, Line(C, F)))
By sss_anti_congruence_v0 on D, F, H, F, D, H we get anti_congruent_triangles(D, F, H, F, D, H)
By perpendicular_angle_conditions_v0 on G, midpoint(A, E), A we get angle(G, midpoint(A, E), A) == orientation(A, G, midpoint(A, E)) mod 360
By sss_anti_congruence_v1 on F, H, E, E, H, F we get anti_congruent_triangles(E, F, H, F, E, H)
By perpendicular_angle_conditions_v0 on E, midpoint(A, E), I we get angle(E, midpoint(A, E), I) == orientation(E, midpoint(A, E), I) mod 360
By sss_anti_congruence_v0 on H, D, F, H, F, D we get anti_congruent_triangles(D, F, H, F, D, H)
By external_angle_bisector_definition_v0_r on C, A, C, projection(A, Line(C, F)) we get Line(A, projection(A, Line(C, F))) == external_angle_bisector(C, projection(A, Line(C, F)), C)
By external_angle_bisector_definition_v0_r on B, I, E, G we get Line(G, I) == external_angle_bisector(B, G, E)
By sss_anti_congruence_v1 on F, D, H, D, F, H we get anti_congruent_triangles(D, F, H, F, D, H)
By sas_similarity on B, D, G, F, D, H we get similar_triangles(B, D, G, F, D, H)
By external_angle_bisector_definition_v0_r on E, G, D, I we get Line(G, I) == external_angle_bisector(D, I, E)
By external_angle_bisector_definition_v0_r on G, F, G, projection(A, Line(C, F)) we get Line(F, projection(A, Line(C, F))) == external_angle_bisector(G, projection(A, Line(C, F)), G)
By anti_similar_triangle_basic_properties on C, F, A, D, E, A we get angle(C, F, A) == 0 - angle(D, E, A) mod 360, angle(F, A, C) == 0 - angle(E, A, D) mod 360, angle(A, C, F) == 0 - angle(A, D, E) mod 360, log(distance(C, F)) + log(distance(A, E)) == log(distance(D, E)) + log(distance(A, F)), log(distance(A, E)) + log(distance(A, C)) == log(distance(A, F)) + log(distance(A, D)), log(distance(A, C)) + log(distance(D, E)) == log(distance(A, D)) + log(distance(C, F))
By sss_anti_congruence_v0 on F, E, H, E, F, H we get anti_congruent_triangles(E, F, H, F, E, H)
By external_angle_bisector_definition_v0_r on F, B, F, projection(A, Line(C, F)) we get Line(B, projection(A, Line(C, F))) == external_angle_bisector(F, projection(A, Line(C, F)), F)
By sss_anti_congruence_v0 on H, F, E, H, E, F we get anti_congruent_triangles(E, F, H, F, E, H)
By sss_anti_congruence_v0 on D, F, H, F, D, H we get anti_congruent_triangles(D, F, H, F, D, H)
By anti_similar_triangle_basic_properties on B, C, F, B, E, D we get angle(B, C, F) == 0 - angle(B, E, D) mod 360, angle(C, F, B) == 0 - angle(E, D, B) mod 360, angle(F, B, C) == 0 - angle(D, B, E) mod 360, log(distance(B, C)) + log(distance(D, E)) == log(distance(B, E)) + log(distance(C, F)), log(distance(C, F)) + log(distance(B, D)) == log(distance(D, E)) + log(distance(B, F)), log(distance(B, D)) + log(distance(B, C)) == log(distance(B, F)) + log(distance(B, E))
By internal_angle_bisector_definition_v0_r on projection(A, Line(C, F)), C, projection(A, Line(C, F)), F we get Line(C, F) == internal_angle_bisector(projection(A, Line(C, F)), F, projection(A, Line(C, F)))
By external_angle_bisector_definition_v0_r on F, A, F, projection(A, Line(C, F)) we get Line(A, projection(A, Line(C, F))) == external_angle_bisector(F, projection(A, Line(C, F)), F)
By sss_anti_congruence_v0 on H, F, E, H, E, F we get anti_congruent_triangles(E, F, H, F, E, H)
By sss_anti_congruence_v1 on H, F, D, H, D, F we get anti_congruent_triangles(D, F, H, F, D, H)
By concyclic_definition_0 on I, E, D, H we get H in Circle(D, E, I)
By external_angle_bisector_definition_v0_r on A, C, A, projection(A, Line(C, F)) we get Line(C, projection(A, Line(C, F))) == external_angle_bisector(A, projection(A, Line(C, F)), A)
By external_angle_bisector_definition_v0_r on B, C, B, projection(A, Line(C, F)) we get Line(C, projection(A, Line(C, F))) == external_angle_bisector(B, projection(A, Line(C, F)), B)
By internal_angle_bisector_definition_v0_r on B, projection(A, Line(C, F)), G, A we get internal_angle_bisector(B, A, G) == Line(A, projection(A, Line(C, F)))
By internal_angle_bisector_definition_v0_r on A, projection(A, Line(C, F)), G, B we get internal_angle_bisector(A, B, G) == Line(B, projection(A, Line(C, F)))
By sas_anti_similarity on D, B, G, F, D, H we get anti_similar_triangles(B, D, G, D, F, H)
By external_angle_bisector_definition_v0_r on G, C, G, projection(A, Line(C, F)) we get Line(C, projection(A, Line(C, F))) == external_angle_bisector(G, projection(A, Line(C, F)), G)
By sss_anti_congruence_v1 on E, F, H, F, E, H we get anti_congruent_triangles(E, F, H, F, E, H)
By concyclic_definition_0 on I, H, E, D we get D in Circle(E, H, I)
By aa_anti_similarity on D, G, B, F, H, D we get anti_similar_triangles(B, D, G, D, F, H)
By sss_anti_congruence_v1 on D, H, F, F, H, D we get anti_congruent_triangles(D, F, H, F, D, H)
By sas_anti_similarity on G, B, D, H, D, F we get anti_similar_triangles(B, D, G, D, F, H)
By internal_angle_bisector_definition_v0_r on F, C, F, projection(A, Line(C, F)) we get Line(C, projection(A, Line(C, F))) == internal_angle_bisector(F, projection(A, Line(C, F)), F)
By similar_triangle_basic_properties on C, D, F, A, D, B we get angle(A, D, B) == angle(C, D, F) mod 360, angle(D, B, A) == angle(D, F, C) mod 360, angle(B, A, D) == angle(F, C, D) mod 360, log(distance(A, D)) + log(distance(D, F)) == log(distance(C, D)) + log(distance(B, D)), log(distance(B, D)) + log(distance(C, F)) == log(distance(D, F)) + log(distance(A, B)), log(distance(A, B)) + log(distance(C, D)) == log(distance(C, F)) + log(distance(A, D))
By aa_anti_similarity on F, H, D, D, G, B we get anti_similar_triangles(B, D, G, D, F, H)
By sss_anti_congruence_v0 on H, F, E, H, E, F we get anti_congruent_triangles(E, F, H, F, E, H)
By sas_similarity on H, D, F, G, D, B we get similar_triangles(B, D, G, F, D, H)
By internal_angle_bisector_definition_v0_r on projection(A, Line(C, F)), A, projection(A, Line(C, F)), B we get Line(A, B) == internal_angle_bisector(projection(A, Line(C, F)), B, projection(A, Line(C, F)))
By perpendicular_angle_conditions_v0 on A, midpoint(A, E), I we get angle(A, midpoint(A, E), I) == orientation(A, midpoint(A, E), I) mod 360
By internal_angle_bisector_definition_v0_r on E, A, E, midpoint(A, E) we get Line(A, midpoint(A, E)) == internal_angle_bisector(E, midpoint(A, E), E)
By isosceles_triangle_properties on H, F, D we get distance(D, H) == distance(F, H), angle(F, D, H) == angle(H, F, D) mod 360
By anti_similar_triangle_basic_properties on B, F, C, B, D, E we get angle(B, F, C) == 0 - angle(B, D, E) mod 360, angle(F, C, B) == 0 - angle(D, E, B) mod 360, angle(C, B, F) == 0 - angle(E, B, D) mod 360, log(distance(B, D)) + log(distance(C, F)) == log(distance(B, F)) + log(distance(D, E)), log(distance(C, F)) + log(distance(B, E)) == log(distance(D, E)) + log(distance(B, C)), log(distance(B, C)) + log(distance(B, D)) == log(distance(B, E)) + log(distance(B, F))
By sss_anti_congruence_v0 on F, E, H, E, F, H we get anti_congruent_triangles(E, F, H, F, E, H)
By external_angle_bisector_definition_v0_r on B, F, B, projection(A, Line(C, F)) we get Line(F, projection(A, Line(C, F))) == external_angle_bisector(B, projection(A, Line(C, F)), B)
By sas_anti_similarity on E, A, G, F, E, H we get anti_similar_triangles(A, E, G, E, F, H)
By isosceles_triangle_properties on H, E, F we get distance(E, H) == distance(F, H), angle(E, F, H) == angle(H, E, F) mod 360
By sss_anti_congruence_v0 on H, D, F, H, F, D we get anti_congruent_triangles(D, F, H, F, D, H)
By sas_anti_similarity on G, A, E, H, E, F we get anti_similar_triangles(A, E, G, E, F, H)
By sss_anti_congruence_v1 on F, D, H, D, F, H we get anti_congruent_triangles(D, F, H, F, D, H)
By aa_similarity on F, H, E, A, G, E we get similar_triangles(A, E, G, F, E, H)
By sss_anti_congruence_v1 on H, F, D, H, D, F we get anti_congruent_triangles(D, F, H, F, D, H)
By sss_anti_congruence_v1 on E, F, H, F, E, H we get anti_congruent_triangles(E, F, H, F, E, H)
By sas_anti_congruence on F, H, E, E, H, F we get anti_congruent_triangles(E, F, H, F, E, H)
By sas_similarity on G, D, B, H, D, F we get similar_triangles(B, D, G, F, D, H)
By sss_anti_congruence_v1 on D, H, F, F, H, D we get anti_congruent_triangles(D, F, H, F, D, H)
By internal_angle_bisector_definition_v0 on E, midpoint(A, E), A, G we get angle(E, G, midpoint(A, E)) == angle(midpoint(A, E), G, A) mod 360
By sas_anti_similarity on F, E, H, E, A, G we get anti_similar_triangles(A, E, G, E, F, H)
By concyclic_definition_0 on I, D, H, E we get E in Circle(D, H, I)
By aa_similarity on B, D, G, F, D, H we get similar_triangles(B, D, G, F, D, H)
By aa_anti_similarity on E, A, G, F, E, H we get anti_similar_triangles(A, E, G, E, F, H)
By reverse_direction on H, F we get 180 == direction(H, F) - direction(F, H) mod 360
By sss_anti_congruence_v1 on D, H, F, F, H, D we get anti_congruent_triangles(D, F, H, F, D, H)
By internal_angle_bisector_definition_v0 on A, midpoint(A, E), E, G we get angle(A, G, midpoint(A, E)) == angle(midpoint(A, E), G, E) mod 360
By sss_anti_congruence_v0 on D, F, H, F, D, H we get anti_congruent_triangles(D, F, H, F, D, H)
By internal_angle_bisector_definition_v0_r on projection(A, Line(C, F)), B, projection(A, Line(C, F)), G we get Line(B, G) == internal_angle_bisector(projection(A, Line(C, F)), G, projection(A, Line(C, F)))
By concyclic_definition_0 on I, E, G, D we get D in Circle(E, G, I)
By collinear_definition on I, G, midpoint(A, E) we get G in Line(I, midpoint(A, E)), midpoint(A, E) in Line(G, I), Line(G, I) == Line(I, midpoint(A, E)), 0 == 2 * angle(G, I, midpoint(A, E)) mod 360
By internal_angle_bisector_definition_v0_r on B, G, B, projection(A, Line(C, F)) we get Line(G, projection(A, Line(C, F))) == internal_angle_bisector(B, projection(A, Line(C, F)), B)
By internal_angle_bisector_definition_v0_r on C, E, midpoint(A, E), A we get Line(A, E) == internal_angle_bisector(C, A, midpoint(A, E))
By internal_angle_bisector_definition_v0_r on B, A, B, projection(A, Line(C, F)) we get Line(A, projection(A, Line(C, F))) == internal_angle_bisector(B, projection(A, Line(C, F)), B)
By aa_similarity on F, H, D, B, G, D we get similar_triangles(B, D, G, F, D, H)
By sas_similarity on F, E, H, A, E, G we get similar_triangles(A, E, G, F, E, H)
By sss_anti_congruence_v0 on H, F, E, H, E, F we get anti_congruent_triangles(E, F, H, F, E, H)
By aa_anti_similarity on F, H, E, E, G, A we get anti_similar_triangles(A, E, G, E, F, H)
By internal_angle_bisector_definition_v0_r on projection(A, Line(C, F)), A, projection(A, Line(C, F)), G we get Line(A, G) == internal_angle_bisector(projection(A, Line(C, F)), G, projection(A, Line(C, F)))
By sas_anti_congruence on E, H, F, F, H, E we get anti_congruent_triangles(E, F, H, F, E, H)
By sss_anti_congruence_v0 on E, H, F, F, H, E we get anti_congruent_triangles(E, F, H, F, E, H)
By draw_point_of_tangency on Line(E, G), c we get exists(line_circle_tangent_point(Line(E, G), c))
By sss_anti_congruence_v0 on F, E, H, E, F, H we get anti_congruent_triangles(E, F, H, F, E, H)
By sss_anti_congruence_v0 on F, H, D, D, H, F we get anti_congruent_triangles(D, F, H, F, D, H)
By perpendicular_angle_conditions_v0 on I, midpoint(A, E), A we get angle(I, midpoint(A, E), A) == orientation(A, I, midpoint(A, E)) mod 360
By internal_angle_bisector_definition_v0_r on C, projection(A, Line(C, F)), C, F we get internal_angle_bisector(C, F, C) == Line(F, projection(A, Line(C, F)))
By sss_anti_congruence_v0 on F, H, D, D, H, F we get anti_congruent_triangles(D, F, H, F, D, H)
By sss_anti_congruence_v0 on E, H, F, F, H, E we get anti_congruent_triangles(E, F, H, F, E, H)
By sas_anti_congruence on F, H, D, D, H, F we get anti_congruent_triangles(D, F, H, F, D, H)
By sss_anti_congruence_v0 on H, F, E, H, E, F we get anti_congruent_triangles(E, F, H, F, E, H)
By aa_anti_similarity on F, E, H, E, A, G we get anti_similar_triangles(A, E, G, E, F, H)
By sss_anti_congruence_v1 on E, F, H, F, E, H we get anti_congruent_triangles(E, F, H, F, E, H)
By internal_angle_bisector_definition_v0_r on midpoint(A, E), A, midpoint(A, E), E we get Line(A, E) == internal_angle_bisector(midpoint(A, E), E, midpoint(A, E))
By isosceles_triangle_properties on H, D, F we get distance(D, H) == distance(F, H), angle(D, F, H) == angle(H, D, F) mod 360
By perpendicular_angle_conditions_v0 on G, midpoint(A, E), E we get angle(G, midpoint(A, E), E) == orientation(E, G, midpoint(A, E)) mod 360
By internal_angle_bisector_definition_v0 on E, midpoint(A, E), A, I we get angle(E, I, midpoint(A, E)) == angle(midpoint(A, E), I, A) mod 360
By isosceles_triangle_properties on H, F, E we get distance(E, H) == distance(F, H), angle(F, E, H) == angle(H, F, E) mod 360
By sss_anti_congruence_v1 on F, H, E, E, H, F we get anti_congruent_triangles(E, F, H, F, E, H)
By sss_anti_congruence_v1 on E, F, H, F, E, H we get anti_congruent_triangles(E, F, H, F, E, H)
By internal_angle_bisector_definition_v0_r on F, projection(A, Line(C, F)), F, C we get internal_angle_bisector(F, C, F) == Line(C, projection(A, Line(C, F)))
By sss_anti_congruence_v0 on E, H, F, F, H, E we get anti_congruent_triangles(E, F, H, F, E, H)
By internal_angle_bisector_definition_v0_r on C, F, C, H we get Line(F, H) == internal_angle_bisector(C, H, C)
By sss_anti_congruence_v1 on F, H, E, E, H, F we get anti_congruent_triangles(E, F, H, F, E, H)
By sss_anti_congruence_v1 on H, F, D, H, D, F we get anti_congruent_triangles(D, F, H, F, D, H)
By internal_angle_bisector_definition_v0 on A, midpoint(A, E), E, I we get angle(A, I, midpoint(A, E)) == angle(midpoint(A, E), I, E) mod 360
By sss_anti_congruence_v0 on F, H, D, D, H, F we get anti_congruent_triangles(D, F, H, F, D, H)
By sss_anti_congruence_v1 on F, H, E, E, H, F we get anti_congruent_triangles(E, F, H, F, E, H)
By sss_anti_congruence_v1 on H, E, F, H, F, E we get anti_congruent_triangles(E, F, H, F, E, H)
By sss_anti_congruence_v1 on H, E, F, H, F, E we get anti_congruent_triangles(E, F, H, F, E, H)
By aa_anti_similarity on D, B, G, F, D, H we get anti_similar_triangles(B, D, G, D, F, H)
By sss_anti_congruence_v1 on H, E, F, H, F, E we get anti_congruent_triangles(E, F, H, F, E, H)
By sss_anti_congruence_v1 on D, H, F, F, H, D we get anti_congruent_triangles(D, F, H, F, D, H)
By power_of_a_point_on_circle on projection(A, Line(C, F)), Circle(A, F, projection(A, Line(C, F))) we get 0 == power_of_a_point(projection(A, Line(C, F)), Circle(A, F, projection(A, Line(C, F))))
By aa_similarity on B, G, D, F, H, D we get similar_triangles(B, D, G, F, D, H)
By sss_anti_congruence_v1 on F, D, H, D, F, H we get anti_congruent_triangles(D, F, H, F, D, H)
By sas_anti_congruence on D, H, F, F, H, D we get anti_congruent_triangles(D, F, H, F, D, H)
By perpendicular_angle_conditions_v0 on E, midpoint(A, E), G we get angle(E, midpoint(A, E), G) == orientation(E, midpoint(A, E), G) mod 360
By internal_angle_bisector_definition_v0_r on G, A, G, projection(A, Line(C, F)) we get Line(A, projection(A, Line(C, F))) == internal_angle_bisector(G, projection(A, Line(C, F)), G)
By internal_angle_bisector_definition_v0_r on F, C, F, H we get Line(C, H) == internal_angle_bisector(F, H, F)
By sss_anti_congruence_v0 on D, F, H, F, D, H we get anti_congruent_triangles(D, F, H, F, D, H)
By collinear_definition on G, midpoint(A, E), I we get midpoint(A, E) in Line(G, I), I in Line(G, midpoint(A, E)), Line(G, I) == Line(G, midpoint(A, E)), 0 == 2 * angle(midpoint(A, E), G, I) mod 360
By sss_anti_congruence_v0 on F, E, H, E, F, H we get anti_congruent_triangles(E, F, H, F, E, H)
By sas_similarity on F, D, H, B, D, G we get similar_triangles(B, D, G, F, D, H)
By aa_similarity on A, G, E, F, H, E we get similar_triangles(A, E, G, F, E, H)
By internal_angle_bisector_definition_v0_r on A, E, A, midpoint(A, E) we get Line(E, midpoint(A, E)) == internal_angle_bisector(A, midpoint(A, E), A)
By sss_anti_congruence_v0 on H, D, F, H, F, D we get anti_congruent_triangles(D, F, H, F, D, H)
By aa_anti_similarity on F, D, H, D, B, G we get anti_similar_triangles(B, D, G, D, F, H)
By internal_angle_bisector_definition_v0_r on projection(A, Line(C, F)), G, projection(A, Line(C, F)), B we get Line(B, G) == internal_angle_bisector(projection(A, Line(C, F)), B, projection(A, Line(C, F)))
By aa_similarity on A, E, G, F, E, H we get similar_triangles(A, E, G, F, E, H)
By sas_anti_similarity on F, D, H, D, B, G we get anti_similar_triangles(B, D, G, D, F, H)
By sas_similarity on H, E, F, G, E, A we get similar_triangles(A, E, G, F, E, H)
By sss_anti_congruence_v0 on F, H, D, D, H, F we get anti_congruent_triangles(D, F, H, F, D, H)
By sss_anti_congruence_v1 on H, F, D, H, D, F we get anti_congruent_triangles(D, F, H, F, D, H)
By sss_anti_congruence_v1 on H, E, F, H, F, E we get anti_congruent_triangles(E, F, H, F, E, H)
By concyclic_definition_0 on H, D, G, E we get E in Circle(D, G, H)
By sss_anti_congruence_v1 on E, F, H, F, E, H we get anti_congruent_triangles(E, F, H, F, E, H)
By sas_similarity on G, E, A, H, E, F we get similar_triangles(A, E, G, F, E, H)
By perpendicular_angle_conditions_v0 on A, midpoint(A, E), G we get angle(A, midpoint(A, E), G) == orientation(A, midpoint(A, E), G) mod 360
By sss_anti_congruence_v1 on H, F, D, H, D, F we get anti_congruent_triangles(D, F, H, F, D, H)
By sss_anti_congruence_v1 on F, D, H, D, F, H we get anti_congruent_triangles(D, F, H, F, D, H)
By internal_angle_bisector_definition_v0_r on projection(A, Line(C, F)), B, projection(A, Line(C, F)), A we get Line(A, B) == internal_angle_bisector(projection(A, Line(C, F)), A, projection(A, Line(C, F)))
By sss_anti_congruence_v0 on E, H, F, F, H, E we get anti_congruent_triangles(E, F, H, F, E, H)
By internal_angle_bisector_definition_v0_r on midpoint(A, E), E, midpoint(A, E), A we get Line(A, E) == internal_angle_bisector(midpoint(A, E), A, midpoint(A, E))
By sss_anti_congruence_v1 on F, H, E, E, H, F we get anti_congruent_triangles(E, F, H, F, E, H)
By sss_anti_congruence_v0 on H, D, F, H, F, D we get anti_congruent_triangles(D, F, H, F, D, H)
By sss_anti_congruence_v1 on H, F, D, H, D, F we get anti_congruent_triangles(D, F, H, F, D, H)
By sss_anti_congruence_v0 on E, H, F, F, H, E we get anti_congruent_triangles(E, F, H, F, E, H)
By sss_anti_congruence_v1 on F, H, E, E, H, F we get anti_congruent_triangles(E, F, H, F, E, H)
By sss_anti_congruence_v1 on H, E, F, H, F, E we get anti_congruent_triangles(E, F, H, F, E, H)
By sss_anti_congruence_v0 on E, H, F, F, H, E we get anti_congruent_triangles(E, F, H, F, E, H)
By sas_anti_similarity on H, D, F, G, B, D we get anti_similar_triangles(B, D, G, D, F, H)
By sss_anti_congruence_v0 on F, H, D, D, H, F we get anti_congruent_triangles(D, F, H, F, D, H)
By collinear_definition on I, midpoint(A, E), G we get midpoint(A, E) in Line(G, I), G in Line(I, midpoint(A, E)), Line(G, I) == Line(I, midpoint(A, E)), 0 == 2 * angle(midpoint(A, E), I, G) mod 360
By internal_angle_bisector_definition_v0_r on G, B, G, projection(A, Line(C, F)) we get Line(B, projection(A, Line(C, F))) == internal_angle_bisector(G, projection(A, Line(C, F)), G)
By sss_anti_congruence_v1 on D, H, F, F, H, D we get anti_congruent_triangles(D, F, H, F, D, H)
By internal_angle_bisector_definition_v0_r on C, F, C, projection(A, Line(C, F)) we get Line(F, projection(A, Line(C, F))) == internal_angle_bisector(C, projection(A, Line(C, F)), C)
By collinear_definition on G, I, midpoint(A, E) we get I in Line(G, midpoint(A, E)), midpoint(A, E) in Line(G, I), Line(G, I) == Line(G, midpoint(A, E)), 0 == 2 * angle(I, G, midpoint(A, E)) mod 360
By sss_anti_congruence_v1 on E, F, H, F, E, H we get anti_congruent_triangles(E, F, H, F, E, H)
By perpendicular_angle_conditions_v0 on I, midpoint(A, E), E we get angle(I, midpoint(A, E), E) == orientation(E, I, midpoint(A, E)) mod 360
By aa_similarity on F, E, H, A, E, G we get similar_triangles(A, E, G, F, E, H)
By power_of_a_point_in_circle on F, Circle(A, F, projection(A, Line(C, F))) we get 0 == power_of_a_point(F, Circle(A, F, projection(A, Line(C, F))))
By sss_anti_congruence_v0 on F, H, D, D, H, F we get anti_congruent_triangles(D, F, H, F, D, H)
By sss_anti_congruence_v0 on D, F, H, F, D, H we get anti_congruent_triangles(D, F, H, F, D, H)
By draw_point_of_tangency on Line(D, H), Circle(A, B, D) we get exists(line_circle_tangent_point(Line(D, H), Circle(A, B, D)))
By sss_anti_congruence_v0 on D, F, H, F, D, H we get anti_congruent_triangles(D, F, H, F, D, H)
By sss_anti_congruence_v0 on H, F, E, H, E, F we get anti_congruent_triangles(E, F, H, F, E, H)
By sas_anti_similarity on H, E, F, G, A, E we get anti_similar_triangles(A, E, G, E, F, H)
By internal_angle_bisector_definition_v0_r on projection(A, Line(C, F)), G, projection(A, Line(C, F)), A we get Line(A, G) == internal_angle_bisector(projection(A, Line(C, F)), A, projection(A, Line(C, F)))
By sss_anti_congruence_v1 on D, H, F, F, H, D we get anti_congruent_triangles(D, F, H, F, D, H)
By perpendicular_lines_draw_intersection on Line(C, H), Line(A, B) we get exists(line_intersection(Line(A, B), Line(C, H)))
By draw_point_of_tangency on Line(E, H), Circle(A, B, D) we get exists(line_circle_tangent_point(Line(E, H), Circle(A, B, D)))
By draw_point_of_tangency on Line(D, G), c we get exists(line_circle_tangent_point(Line(D, G), c))
By concyclic_definition_1 on E, D, H, G we get Circle(D, E, H) == Circle(D, G, H)
By concyclic_definition_1 on H, E, G, D we get Circle(D, E, G) == Circle(E, G, H)
By concyclic_definition_1 on I, D, H, E we get Circle(D, E, H) == Circle(D, H, I)
By altitude_definition on C, G, midpoint(A, E), g we get g == altitude(C, G, midpoint(A, E))
By concyclic_definition_1 on E, H, G, D we get Circle(D, G, H) == Circle(E, G, H)
By concyclic_definition_1 on I, D, E, G we get Circle(D, E, G) == Circle(D, E, I)
By concyclic_definition_1 on E, I, D, H we get Circle(D, E, I) == Circle(D, H, I)
By altitude_definition on G, midpoint(A, E), E, Line(G, I) we get Line(G, I) == altitude(G, E, midpoint(A, E))
By concyclic_definition_1 on D, G, E, I we get Circle(D, E, G) == Circle(E, G, I)
By concyclic_definition_1 on I, G, D, E we get Circle(D, E, G) == Circle(D, G, I)
By altitude_definition on B, C, H, Line(A, B) we get Line(A, B) == altitude(B, C, H)
By concyclic_definition_1 on G, E, H, D we get Circle(D, E, H) == Circle(E, G, H)
By power_of_a_point_tangent on H, D, Circle(A, B, D) we get 2 * log(distance(D, H)) == log(power_of_a_point(H, Circle(A, B, D)))
By altitude_definition on F, midpoint(A, E), E, i we get i == altitude(F, E, midpoint(A, E))
By concyclic_definition_1 on E, G, D, H we get Circle(D, E, G) == Circle(D, G, H)
By altitude_definition on H, G, E, Line(E, H) we get Line(E, H) == altitude(H, E, G)
By altitude_definition on I, midpoint(A, E), E, Line(G, I) we get Line(G, I) == altitude(I, E, midpoint(A, E))
By altitude_definition on H, projection(A, Line(C, F)), G, Line(C, H) we get Line(C, H) == altitude(H, G, projection(A, Line(C, F)))
By altitude_definition on A, G, midpoint(A, E), g we get g == altitude(A, G, midpoint(A, E))
By altitude_definition on C, midpoint(A, E), I, g we get g == altitude(C, I, midpoint(A, E))
By altitude_definition on A, I, midpoint(A, E), g we get g == altitude(A, I, midpoint(A, E))
By power_of_a_point_tangent on G, D, c we get log(power_of_a_point(G, c)) == 2 * log(distance(D, G))
By altitude_definition on B, A, midpoint(A, E), i we get i == altitude(B, A, midpoint(A, E))
By altitude_definition on G, H, C, Line(A, B) we get Line(A, B) == altitude(G, C, H)
By concyclic_definition_1 on I, H, E, D we get Circle(D, E, H) == Circle(E, H, I)
By altitude_definition on H, projection(A, Line(C, F)), A, Line(C, H) we get Line(C, H) == altitude(H, A, projection(A, Line(C, F)))
By concyclic_definition_1 on E, H, I, D we get Circle(D, H, I) == Circle(E, H, I)
By altitude_definition on A, C, H, Line(A, B) we get Line(A, B) == altitude(A, C, H)
By concyclic_definition_1 on G, E, I, D we get Circle(D, E, I) == Circle(E, G, I)
By power_of_a_point_tangent on H, E, Circle(A, B, D) we get 2 * log(distance(E, H)) == log(power_of_a_point(H, Circle(A, B, D)))
By concyclic_definition_1 on H, E, I, D we get Circle(D, E, I) == Circle(E, H, I)
By altitude_definition on H, G, B, Line(C, H) we get Line(C, H) == altitude(H, B, G)
By concyclic_definition_1 on E, G, I, D we get Circle(D, G, I) == Circle(E, G, I)
By power_of_a_point_tangent on G, E, c we get log(power_of_a_point(G, c)) == 2 * log(distance(E, G))
By altitude_definition on midpoint(A, E), E, F, g we get g == altitude(midpoint(A, E), E, F)
By altitude_definition on G, midpoint(A, E), A, Line(G, I) we get Line(G, I) == altitude(G, A, midpoint(A, E))
By power_of_a_point_definition on B, A, projection(A, Line(C, F)), Circle(A, F, projection(A, Line(C, F))) we get log(distance(A, B)) + log(distance(B, projection(A, Line(C, F)))) == log(power_of_a_point(B, Circle(A, F, projection(A, Line(C, F)))))
By concyclic_definition_1 on H, D, E, G we get Circle(D, E, G) == Circle(D, E, H)
By altitude_definition on H, A, G, Line(C, H) we get Line(C, H) == altitude(H, A, G)
By altitude_definition on I, A, midpoint(A, E), Line(G, I) we get Line(G, I) == altitude(I, A, midpoint(A, E))
By collinear_definition on midpoint(A, E), I, G we get I in Line(G, midpoint(A, E)), G in Line(I, midpoint(A, E)), Line(G, midpoint(A, E)) == Line(I, midpoint(A, E)), 0 == 2 * angle(I, midpoint(A, E), G) mod 360
By altitude_definition on E, midpoint(A, E), G, g we get g == altitude(E, G, midpoint(A, E))
By altitude_definition on H, D, G, Line(D, H) we get Line(D, H) == altitude(H, D, G)
By altitude_definition on B, E, midpoint(A, E), i we get i == altitude(B, E, midpoint(A, E))
By altitude_definition on midpoint(A, E), B, E, g we get g == altitude(midpoint(A, E), B, E)
By power_of_a_point_definition on D, F, A, Circle(A, F, projection(A, Line(C, F))) we get log(distance(D, F)) + log(distance(A, D)) == log(power_of_a_point(D, Circle(A, F, projection(A, Line(C, F)))))
By altitude_definition on H, B, projection(A, Line(C, F)), Line(C, H) we get Line(C, H) == altitude(H, B, projection(A, Line(C, F)))
By concyclic_definition_1 on E, I, D, G we get Circle(D, E, I) == Circle(D, G, I)
By altitude_definition on F, A, midpoint(A, E), i we get i == altitude(F, A, midpoint(A, E))
By altitude_definition on H, B, A, Line(C, H) we get Line(C, H) == altitude(H, A, B)
By concyclic_definition_1 on H, E, D, I we get Circle(D, E, H) == Circle(D, E, I)
By altitude_definition on G, D, H, Line(D, G) we get Line(D, G) == altitude(G, D, H)
By altitude_definition on midpoint(A, E), F, B, g we get g == altitude(midpoint(A, E), B, F)
By power_of_a_point_definition on I, F, A, Circle(A, F, projection(A, Line(C, F))) we get log(distance(F, I)) + log(distance(A, I)) == log(power_of_a_point(I, Circle(A, F, projection(A, Line(C, F)))))
By collinear_definition on midpoint(A, E), G, I we get G in Line(I, midpoint(A, E)), I in Line(G, midpoint(A, E)), Line(G, midpoint(A, E)) == Line(I, midpoint(A, E)), 0 == 2 * angle(G, midpoint(A, E), I) mod 360
By altitude_definition on G, H, E, Line(E, G) we get Line(E, G) == altitude(G, E, H)
By altitude_definition on E, midpoint(A, E), I, g we get g == altitude(E, I, midpoint(A, E))
By power_of_a_point_definition on G, A, projection(A, Line(C, F)), Circle(A, F, projection(A, Line(C, F))) we get log(distance(A, G)) + log(distance(G, projection(A, Line(C, F)))) == log(power_of_a_point(G, Circle(A, F, projection(A, Line(C, F)))))
By power_of_a_point_definition on C, projection(A, Line(C, F)), F, Circle(A, F, projection(A, Line(C, F))) we get log(distance(C, projection(A, Line(C, F)))) + log(distance(C, F)) == log(power_of_a_point(C, Circle(A, F, projection(A, Line(C, F)))))
By line_definition on orthocenter(A, C, I), midpoint(A, E), Line(G, I) we get Line(G, I) == Line(midpoint(A, E), orthocenter(A, C, I))
By concurrent_sufficient_conditions on Line(F, H), h, i we get concurrent(h, i, Line(F, H))
By line_definition on orthocenter(A, C, G), C, Line(C, F) we get Line(C, F) == Line(C, orthocenter(A, C, G))
By line_definition on H, projection(A, Line(C, F)), Line(C, F) we get Line(C, F) == Line(H, projection(A, Line(C, F)))
By line_definition on H, line_circle_tangent_point(Line(D, H), Circle(A, B, D)), Line(D, H) we get Line(D, H) == Line(H, line_circle_tangent_point(Line(D, H), Circle(A, B, D)))
By concurrent_sufficient_conditions on Line(D, H), Line(F, H), Line(E, H) we get concurrent(Line(D, H), Line(E, H), Line(F, H))
By line_definition on orthocenter(A, C, G), H, Line(C, F) we get Line(C, F) == Line(H, orthocenter(A, C, G))
By concurrent_sufficient_conditions on h, Line(F, H), i we get concurrent(h, i, Line(F, H))
By line_definition on projection(A, Line(C, F)), orthocenter(A, C, G), Line(C, F) we get Line(C, F) == Line(orthocenter(A, C, G), projection(A, Line(C, F)))
By line_definition on I, orthocenter(A, C, G), Line(G, I) we get Line(G, I) == Line(I, orthocenter(A, C, G))
By line_definition on orthocenter(A, C, G), orthocenter(A, C, I), Line(G, I) we get Line(G, I) == Line(orthocenter(A, C, G), orthocenter(A, C, I))
By tangent_definition_from_perpendicularity_v0 on line_circle_tangent_point(Line(D, G), c), Line(D, G), c we get perpendicular(Line(D, G), Line(center(c), line_circle_tangent_point(Line(D, G), c)))
By concurrent_sufficient_conditions on i, h, Line(F, H) we get concurrent(h, i, Line(F, H))
By concurrent_sufficient_conditions on h, i, Line(F, H) we get concurrent(h, i, Line(F, H))
By radical_axis_is_perpendicular_to_center_line on Line(D, E), Circle(A, B, D), c we get perpendicular(Line(D, E), Line(center(c), center(Circle(A, B, D))))
By line_definition on D, orthocenter(A, C, I), f we get f == Line(D, orthocenter(A, C, I))
By line_definition on orthocenter(A, C, I), A, altitude(A, C, I) we get altitude(A, C, I) == Line(A, orthocenter(A, C, I))
By line_definition on F, orthocenter(A, C, G), Line(C, F) we get Line(C, F) == Line(F, orthocenter(A, C, G))
By line_definition on I, orthocenter(A, C, I), Line(G, I) we get Line(G, I) == Line(I, orthocenter(A, C, I))
By line_definition on line_circle_tangent_point(Line(E, G), c), G, Line(E, G) we get Line(E, G) == Line(G, line_circle_tangent_point(Line(E, G), c))
By concurrent_sufficient_conditions on Line(F, H), i, h we get concurrent(h, i, Line(F, H))
By line_definition on line_circle_tangent_point(Line(D, G), c), G, Line(D, G) we get Line(D, G) == Line(G, line_circle_tangent_point(Line(D, G), c))
By line_definition on H, line_circle_tangent_point(Line(E, H), Circle(A, B, D)), Line(E, H) we get Line(E, H) == Line(H, line_circle_tangent_point(Line(E, H), Circle(A, B, D)))
By perpendicular_line_definition on H, Line(F, H), Line(A, B) we get Line(F, H) == perpendicular_line(H, Line(A, B))
By line_definition on midpoint(A, E), orthocenter(A, C, G), Line(G, I) we get Line(G, I) == Line(midpoint(A, E), orthocenter(A, C, G))
By perpendicular_line_definition on F, Line(F, H), Line(A, B) we get Line(F, H) == perpendicular_line(F, Line(A, B))
By line_definition on B, orthocenter(A, C, I), f we get f == Line(B, orthocenter(A, C, I))
By concurrent_sufficient_conditions on Line(E, H), Line(D, H), Line(F, H) we get concurrent(Line(D, H), Line(E, H), Line(F, H))
By tangent_definition_from_perpendicularity_v0 on line_circle_tangent_point(Line(E, H), Circle(A, B, D)), Line(E, H), Circle(A, B, D) we get perpendicular(Line(E, H), Line(center(Circle(A, B, D)), line_circle_tangent_point(Line(E, H), Circle(A, B, D))))
By concurrent_sufficient_conditions on Line(F, H), Line(E, H), Line(D, H) we get concurrent(Line(D, H), Line(E, H), Line(F, H))
By line_definition on G, orthocenter(A, C, G), Line(G, I) we get Line(G, I) == Line(G, orthocenter(A, C, G))
By concurrent_sufficient_conditions on Line(D, H), Line(E, H), Line(F, H) we get concurrent(Line(D, H), Line(E, H), Line(F, H))
By concurrent_sufficient_conditions on Line(F, H), Line(D, H), Line(E, H) we get concurrent(Line(D, H), Line(E, H), Line(F, H))
By line_definition on C, orthocenter(A, C, I), f we get f == Line(C, orthocenter(A, C, I))
By line_definition on F, H, Line(C, F) we get Line(C, F) == Line(F, H)
By concurrent_sufficient_conditions on i, Line(F, H), h we get concurrent(h, i, Line(F, H))
By line_definition on G, orthocenter(A, C, I), Line(G, I) we get Line(G, I) == Line(G, orthocenter(A, C, I))
By concurrent_sufficient_conditions on Line(E, H), Line(F, H), Line(D, H) we get concurrent(Line(D, H), Line(E, H), Line(F, H))
By line_definition on A, orthocenter(A, C, G), altitude(A, C, G) we get altitude(A, C, G) == Line(A, orthocenter(A, C, G))
By tangent_definition_from_perpendicularity_v0 on line_circle_tangent_point(Line(E, G), c), Line(E, G), c we get perpendicular(Line(E, G), Line(center(c), line_circle_tangent_point(Line(E, G), c)))
By tangent_definition_from_perpendicularity_v0 on line_circle_tangent_point(Line(D, H), Circle(A, B, D)), Line(D, H), Circle(A, B, D) we get perpendicular(Line(D, H), Line(center(Circle(A, B, D)), line_circle_tangent_point(Line(D, H), Circle(A, B, D))))
By angles_on_chord_v1 on D, G, I, H, Circle(D, E, G) we get angle(D, H, G) == angle(D, I, G) mod 360
By angles_on_chord_v2 on E, G, H, I, Circle(D, E, G) we get angle(E, H, G) == angle(E, I, G) + 180 mod 360
By angles_on_chord_v0 on G, D, E, H, Circle(D, E, G) we get angle(G, E, D) == angle(G, H, D) mod 360
By angles_on_chord_v0 on E, G, H, D, Circle(D, E, G) we get angle(E, D, G) == angle(E, H, G) mod 360
By angles_on_chord_v2 on H, I, G, E, Circle(D, E, G) we get angle(H, G, I) == angle(H, E, I) + 180 mod 360
By angles_on_chord_v0 on G, D, I, H, Circle(D, E, G) we get angle(G, H, D) == angle(G, I, D) mod 360
By angles_on_chord_v1 on H, D, G, E, Circle(D, E, G) we get angle(H, E, D) == angle(H, G, D) mod 360
By angles_on_chord_v2 on I, D, E, G, Circle(D, E, G) we get angle(I, E, D) == angle(I, G, D) + 180 mod 360
By angles_on_chord_v2 on H, I, D, E, Circle(D, E, G) we get angle(H, D, I) == angle(H, E, I) + 180 mod 360
By angles_on_chord_v3 on D, I, E, G, Circle(D, E, G) we get angle(D, E, I) == angle(D, G, I) + 180 mod 360
By angles_on_chord_v3 on I, D, G, E, Circle(D, E, G) we get angle(I, G, D) == angle(I, E, D) + 180 mod 360
By angles_on_chord_v3 on G, E, H, I, Circle(D, E, G) we get angle(G, H, E) == angle(G, I, E) + 180 mod 360
By angles_on_chord_v3 on I, H, G, E, Circle(D, E, G) we get angle(I, G, H) == angle(I, E, H) + 180 mod 360
By angles_on_chord_v2 on G, E, I, H, Circle(D, E, G) we get angle(G, I, E) == angle(G, H, E) + 180 mod 360
By angles_on_chord_v1 on G, E, D, H, Circle(D, E, G) we get angle(G, D, E) == angle(G, H, E) mod 360
By angles_on_chord_v1 on E, H, D, G, Circle(D, E, G) we get angle(E, D, H) == angle(E, G, H) mod 360
By angles_on_chord_v3 on I, H, D, E, Circle(D, E, G) we get angle(I, D, H) == angle(I, E, H) + 180 mod 360
By angles_on_chord_v0 on D, H, E, G, Circle(D, E, G) we get angle(D, E, H) == angle(D, G, H) mod 360
By angles_on_chord_v0 on H, I, G, D, Circle(D, E, G) we get angle(H, D, I) == angle(H, G, I) mod 360
By angles_on_chord_v0 on H, E, G, D, Circle(D, E, G) we get angle(H, D, E) == angle(H, G, E) mod 360
By angles_on_chord_v3 on E, G, I, H, Circle(D, E, G) we get angle(E, I, G) == angle(E, H, G) + 180 mod 360
By angles_on_chord_v2 on I, H, E, G, Circle(D, E, G) we get angle(I, E, H) == angle(I, G, H) + 180 mod 360
By angles_on_chord_v1 on I, H, D, G, Circle(D, E, G) we get angle(I, D, H) == angle(I, G, H) mod 360
By angles_on_chord_v2 on D, I, G, E, Circle(D, E, G) we get angle(D, G, I) == angle(D, E, I) + 180 mod 360
By angles_on_chord_v3 on H, I, E, G, Circle(D, E, G) we get angle(H, E, I) == angle(H, G, I) + 180 mod 360
By angles_on_chord_v3 on H, I, E, D, Circle(D, E, G) we get angle(H, E, I) == angle(H, D, I) + 180 mod 360
By angles_on_chord_v1 on D, G, E, H, Circle(D, E, G) we get angle(D, E, G) == angle(D, H, G) mod 360
By angles_on_chord_v2 on I, H, E, D, Circle(D, E, G) we get angle(I, E, H) == angle(I, D, H) + 180 mod 360
By perpendicular_line_definition on orthocenter(A, C, I), altitude(A, C, I), Line(C, I) we get altitude(A, C, I) == perpendicular_line(orthocenter(A, C, I), Line(C, I))
By line_intersection_definition on G, Line(G, H), Line(C, G) we get G == line_intersection(Line(C, G), Line(G, H))
By circle_definition on line_circle_tangent_point(Line(D, G), c), line_circle_tangent_point(Line(E, G), c), F, c we get c == Circle(F, line_circle_tangent_point(Line(D, G), c), line_circle_tangent_point(Line(E, G), c))
By circle_definition on D, B, line_circle_tangent_point(Line(E, H), Circle(A, B, D)), Circle(A, B, D) we get Circle(A, B, D) == Circle(B, D, line_circle_tangent_point(Line(E, H), Circle(A, B, D)))
By circle_definition on line_circle_tangent_point(Line(D, H), Circle(A, B, D)), A, E, Circle(A, B, D) we get Circle(A, B, D) == Circle(A, E, line_circle_tangent_point(Line(D, H), Circle(A, B, D)))
By circle_definition on line_circle_tangent_point(Line(D, H), Circle(A, B, D)), B, E, Circle(A, B, D) we get Circle(A, B, D) == Circle(B, E, line_circle_tangent_point(Line(D, H), Circle(A, B, D)))
By line_intersection_definition on orthocenter(A, C, G), Line(G, I), altitude(A, C, G) we get orthocenter(A, C, G) == line_intersection(Line(G, I), altitude(A, C, G))
By circle_definition on F, line_circle_tangent_point(Line(E, G), c), C, c we get c == Circle(C, F, line_circle_tangent_point(Line(E, G), c))
By line_intersection_definition on I, h, Line(C, I) we get I == line_intersection(h, Line(C, I))
By radical_axis_of_intersecting_circles_v0 on E, D, c, Circle(D, E, G) we get Line(D, E) == radical_axis(c, Circle(D, E, G))
By line_intersection_definition on C, Line(C, F), Line(C, I) we get C == line_intersection(Line(C, F), Line(C, I))
By circle_definition on line_circle_tangent_point(Line(E, G), c), D, F, c we get c == Circle(D, F, line_circle_tangent_point(Line(E, G), c))
By perpendicular_line_definition on line_circle_tangent_point(Line(D, H), Circle(A, B, D)), Line(D, H), Line(D, G) we get Line(D, H) == perpendicular_line(line_circle_tangent_point(Line(D, H), Circle(A, B, D)), Line(D, G))
By median_definition on orthocenter(A, C, G), A, F, Line(G, I) we get Line(G, I) == median(orthocenter(A, C, G), A, F)
By line_intersection_definition on A, altitude(A, C, G), g we get A == line_intersection(g, altitude(A, C, G))
By line_intersection_definition on A, h, altitude(A, C, I) we get A == line_intersection(h, altitude(A, C, I))
By perpendicular_line_definition on orthocenter(A, C, G), altitude(A, C, G), Line(C, G) we get altitude(A, C, G) == perpendicular_line(orthocenter(A, C, G), Line(C, G))
By circle_definition on E, line_circle_tangent_point(Line(D, G), c), F, c we get c == Circle(E, F, line_circle_tangent_point(Line(D, G), c))
By line_intersection_definition on C, Line(C, I), g we get C == line_intersection(g, Line(C, I))
By median_definition on orthocenter(A, C, I), A, F, Line(G, I) we get Line(G, I) == median(orthocenter(A, C, I), A, F)
By perpendicular_line_definition on G, Line(C, G), altitude(A, C, G) we get Line(C, G) == perpendicular_line(G, altitude(A, C, G))
By circle_definition on B, line_circle_tangent_point(Line(D, H), Circle(A, B, D)), line_circle_tangent_point(Line(E, H), Circle(A, B, D)), Circle(A, B, D) we get Circle(A, B, D) == Circle(B, line_circle_tangent_point(Line(D, H), Circle(A, B, D)), line_circle_tangent_point(Line(E, H), Circle(A, B, D)))
By circle_definition on B, line_circle_tangent_point(Line(D, H), Circle(A, B, D)), A, Circle(A, B, D) we get Circle(A, B, D) == Circle(A, B, line_circle_tangent_point(Line(D, H), Circle(A, B, D)))
By line_intersection_definition on orthocenter(A, C, I), altitude(A, C, I), f we get orthocenter(A, C, I) == line_intersection(f, altitude(A, C, I))
By line_intersection_definition on H, Line(G, H), Line(C, F) we get H == line_intersection(Line(C, F), Line(G, H))
By circle_definition on line_circle_tangent_point(Line(E, G), c), line_circle_tangent_point(Line(D, G), c), C, c we get c == Circle(C, line_circle_tangent_point(Line(D, G), c), line_circle_tangent_point(Line(E, G), c))
By circle_definition on I, H, G, Circle(D, E, G) we get Circle(D, E, G) == Circle(G, H, I)
By line_intersection_definition on C, Line(C, G), Line(C, I) we get C == line_intersection(Line(C, G), Line(C, I))
By perpendicular_line_definition on C, Line(C, I), altitude(A, C, I) we get Line(C, I) == perpendicular_line(C, altitude(A, C, I))
By line_intersection_definition on orthocenter(A, C, G), Line(C, F), Line(G, I) we get orthocenter(A, C, G) == line_intersection(Line(C, F), Line(G, I))
By circle_definition on C, F, line_circle_tangent_point(Line(D, G), c), c we get c == Circle(C, F, line_circle_tangent_point(Line(D, G), c))
By median_definition on C, A, B, Line(C, G) we get Line(C, G) == median(C, A, B)
By perpendicular_line_definition on orthocenter(A, C, I), f, h we get f == perpendicular_line(orthocenter(A, C, I), h)
By line_intersection_definition on H, Line(F, H), Line(G, H) we get H == line_intersection(Line(F, H), Line(G, H))
By line_intersection_definition on C, Line(C, G), f we get C == line_intersection(f, Line(C, G))
By perpendicular_line_definition on projection(A, Line(C, F)), Line(A, B), Line(F, H) we get Line(A, B) == perpendicular_line(projection(A, Line(C, F)), Line(F, H))
By midpoint_definition_v0 on C, F, H we get H == midpoint(C, F)
By line_intersection_definition on C, f, Line(C, I) we get C == line_intersection(f, Line(C, I))
By line_intersection_definition on A, altitude(A, C, I), g we get A == line_intersection(g, altitude(A, C, I))
By median_definition on line_circle_tangent_point(Line(D, G), c), A, B, Line(D, G) we get Line(D, G) == median(line_circle_tangent_point(Line(D, G), c), A, B)
By line_intersection_definition on projection(A, Line(C, F)), Line(C, F), Line(I, projection(A, Line(C, F))) we get projection(A, Line(C, F)) == line_intersection(Line(C, F), Line(I, projection(A, Line(C, F))))
By circle_definition on line_circle_tangent_point(Line(E, G), c), D, C, c we get c == Circle(C, D, line_circle_tangent_point(Line(E, G), c))
By line_intersection_definition on G, Line(G, I), Line(C, G) we get G == line_intersection(Line(C, G), Line(G, I))
By circle_definition on A, line_circle_tangent_point(Line(D, H), Circle(A, B, D)), line_circle_tangent_point(Line(E, H), Circle(A, B, D)), Circle(A, B, D) we get Circle(A, B, D) == Circle(A, line_circle_tangent_point(Line(D, H), Circle(A, B, D)), line_circle_tangent_point(Line(E, H), Circle(A, B, D)))
By median_definition on orthocenter(A, C, G), E, A, Line(G, I) we get Line(G, I) == median(orthocenter(A, C, G), A, E)
By line_intersection_definition on A, altitude(A, C, I), altitude(A, C, G) we get A == line_intersection(altitude(A, C, G), altitude(A, C, I))
By perpendicular_line_definition on I, Line(C, I), altitude(A, C, I) we get Line(C, I) == perpendicular_line(I, altitude(A, C, I))
By line_intersection_definition on H, Line(E, H), Line(G, H) we get H == line_intersection(Line(E, H), Line(G, H))
By perpendicular_line_definition on B, Line(A, B), Line(F, H) we get Line(A, B) == perpendicular_line(B, Line(F, H))
By line_intersection_definition on projection(A, Line(C, F)), Line(A, B), Line(I, projection(A, Line(C, F))) we get projection(A, Line(C, F)) == line_intersection(Line(A, B), Line(I, projection(A, Line(C, F))))
By circle_definition on E, C, line_circle_tangent_point(Line(D, G), c), c we get c == Circle(C, E, line_circle_tangent_point(Line(D, G), c))
By line_intersection_definition on A, h, altitude(A, C, G) we get A == line_intersection(h, altitude(A, C, G))
By median_definition on orthocenter(A, C, I), A, E, Line(G, I) we get Line(G, I) == median(orthocenter(A, C, I), A, E)
By perpendicular_line_definition on G, Line(A, B), Line(F, H) we get Line(A, B) == perpendicular_line(G, Line(F, H))
By median_definition on line_circle_tangent_point(Line(E, G), c), B, A, Line(E, G) we get Line(E, G) == median(line_circle_tangent_point(Line(E, G), c), A, B)
By line_intersection_definition on I, Line(I, projection(A, Line(C, F))), h we get I == line_intersection(h, Line(I, projection(A, Line(C, F))))
By circle_definition on line_circle_tangent_point(Line(E, H), Circle(A, B, D)), B, A, Circle(A, B, D) we get Circle(A, B, D) == Circle(A, B, line_circle_tangent_point(Line(E, H), Circle(A, B, D)))
By median_definition on projection(A, Line(C, F)), F, A, Line(I, projection(A, Line(C, F))) we get Line(I, projection(A, Line(C, F))) == median(projection(A, Line(C, F)), A, F)
By line_intersection_definition on H, Line(D, H), Line(G, H) we get H == line_intersection(Line(D, H), Line(G, H))
By line_intersection_definition on orthocenter(A, C, G), Line(C, F), altitude(A, C, G) we get orthocenter(A, C, G) == line_intersection(Line(C, F), altitude(A, C, G))
By circle_definition on line_circle_tangent_point(Line(E, H), Circle(A, B, D)), D, A, Circle(A, B, D) we get Circle(A, B, D) == Circle(A, D, line_circle_tangent_point(Line(E, H), Circle(A, B, D)))
By line_intersection_definition on I, Line(G, I), Line(I, projection(A, Line(C, F))) we get I == line_intersection(Line(G, I), Line(I, projection(A, Line(C, F))))
By line_intersection_definition on A, Line(A, B), altitude(A, C, G) we get A == line_intersection(Line(A, B), altitude(A, C, G))
By line_intersection_definition on C, Line(C, G), Line(C, F) we get C == line_intersection(Line(C, F), Line(C, G))
By line_intersection_definition on I, Line(C, I), Line(I, projection(A, Line(C, F))) we get I == line_intersection(Line(C, I), Line(I, projection(A, Line(C, F))))
By line_intersection_definition on orthocenter(A, C, I), Line(G, I), f we get orthocenter(A, C, I) == line_intersection(f, Line(G, I))
By perpendicular_line_definition on line_circle_tangent_point(Line(D, G), c), Line(D, G), Line(D, H) we get Line(D, G) == perpendicular_line(line_circle_tangent_point(Line(D, G), c), Line(D, H))
By line_intersection_definition on I, Line(I, projection(A, Line(C, F))), Line(E, I) we get I == line_intersection(Line(E, I), Line(I, projection(A, Line(C, F))))
By line_intersection_definition on A, Line(A, B), altitude(A, C, I) we get A == line_intersection(Line(A, B), altitude(A, C, I))
By median_definition on orthocenter(A, C, I), A, B, Line(G, I) we get Line(G, I) == median(orthocenter(A, C, I), A, B)
By perpendicular_line_definition on orthocenter(A, C, G), Line(G, I), g we get Line(G, I) == perpendicular_line(orthocenter(A, C, G), g)
By median_definition on orthocenter(A, C, G), A, B, Line(G, I) we get Line(G, I) == median(orthocenter(A, C, G), A, B)
By line_intersection_definition on C, Line(C, G), g we get C == line_intersection(g, Line(C, G))
By line_intersection_definition on I, Line(E, I), Line(C, I) we get I == line_intersection(Line(C, I), Line(E, I))
By line_intersection_definition on G, Line(C, G), Line(A, B) we get G == line_intersection(Line(A, B), Line(C, G))
By perpendicular_line_definition on orthocenter(A, C, I), Line(G, I), g we get Line(G, I) == perpendicular_line(orthocenter(A, C, I), g)
By radical_axis_of_intersecting_circles_v0 on D, E, Circle(A, B, D), Circle(D, E, G) we get Line(D, E) == radical_axis(Circle(A, B, D), Circle(D, E, G))
By perpendicular_line_definition on line_circle_tangent_point(Line(E, G), c), Line(E, G), Line(E, H) we get Line(E, G) == perpendicular_line(line_circle_tangent_point(Line(E, G), c), Line(E, H))
By line_intersection_definition on orthocenter(A, C, I), Line(G, I), altitude(A, C, I) we get orthocenter(A, C, I) == line_intersection(Line(G, I), altitude(A, C, I))
By median_definition on C, F, A, Line(C, I) we get Line(C, I) == median(C, A, F)
By line_intersection_definition on G, Line(G, H), Line(A, B) we get G == line_intersection(Line(A, B), Line(G, H))
By line_intersection_definition on G, Line(G, H), Line(G, I) we get G == line_intersection(Line(G, H), Line(G, I))
By line_intersection_definition on G, Line(C, G), Line(D, G) we get G == line_intersection(Line(C, G), Line(D, G))
By line_intersection_definition on I, Line(C, I), Line(G, I) we get I == line_intersection(Line(C, I), Line(G, I))
By line_intersection_definition on G, Line(E, G), Line(G, H) we get G == line_intersection(Line(E, G), Line(G, H))
By line_intersection_definition on G, Line(D, G), Line(G, H) we get G == line_intersection(Line(D, G), Line(G, H))
By perpendicular_line_definition on A, Line(A, B), Line(F, H) we get Line(A, B) == perpendicular_line(A, Line(F, H))
By median_definition on H, B, A, Line(G, H) we get Line(G, H) == median(H, A, B)
By line_intersection_definition on G, Line(C, G), Line(E, G) we get G == line_intersection(Line(C, G), Line(E, G))
By perpendicular_line_definition on C, Line(C, G), altitude(A, C, G) we get Line(C, G) == perpendicular_line(C, altitude(A, C, G))
By perpendicular_line_definition on line_circle_tangent_point(Line(E, H), Circle(A, B, D)), Line(E, H), Line(E, G) we get Line(E, H) == perpendicular_line(line_circle_tangent_point(Line(E, H), Circle(A, B, D)), Line(E, G))
By perpendicular_line_definition on orthocenter(A, C, G), Line(C, F), Line(A, B) we get Line(C, F) == perpendicular_line(orthocenter(A, C, G), Line(A, B))
By circle_radius_v0 on E, Circle(A, F, projection(A, Line(C, F))) we get E in Circle(A, F, projection(A, Line(C, F)))
By angles_on_chord_v0 on H, E, I, G, Circle(D, E, G) we get angle(H, G, E) == angle(H, I, E) mod 360
By angles_on_chord_v0 on G, H, E, I, Circle(D, E, G) we get angle(G, E, H) == angle(G, I, H) mod 360
By circle_radius_v0 on projection(A, Line(C, F)), Circle(A, E, F) we get projection(A, Line(C, F)) in Circle(A, E, F)
By circle_radius_v0_r on line_circle_tangent_point(Line(D, H), Circle(A, B, D)), Circle(A, B, D) we get radius(Circle(A, B, D)) == distance(center(Circle(A, B, D)), line_circle_tangent_point(Line(D, H), Circle(A, B, D)))
By angles_on_chord_v1 on G, I, E, H, Circle(D, E, G) we get angle(G, E, I) == angle(G, H, I) mod 360
By circle_radius_v0_r on line_circle_tangent_point(Line(D, G), c), c we get radius(c) == distance(center(c), line_circle_tangent_point(Line(D, G), c))
By circle_radius_v0_r on line_circle_tangent_point(Line(E, H), Circle(A, B, D)), Circle(A, B, D) we get radius(Circle(A, B, D)) == distance(center(Circle(A, B, D)), line_circle_tangent_point(Line(E, H), Circle(A, B, D)))
By angles_on_chord_v1 on H, G, I, E, Circle(D, E, G) we get angle(H, E, G) == angle(H, I, G) mod 360
By circle_radius_v0_r on line_circle_tangent_point(Line(E, G), c), c we get radius(c) == distance(center(c), line_circle_tangent_point(Line(E, G), c))
By angles_on_chord_v0 on I, D, H, E, Circle(D, E, G) we get angle(I, E, D) == angle(I, H, D) mod 360
By angles_on_chord_v2 on G, H, I, D, Circle(D, E, G) we get angle(G, I, H) == angle(G, D, H) + 180 mod 360
By angles_on_chord_v0 on H, E, I, D, Circle(D, E, G) we get angle(H, D, E) == angle(H, I, E) mod 360
By angles_on_chord_v1 on I, E, H, D, Circle(D, E, G) we get angle(I, D, E) == angle(I, H, E) mod 360
By angles_on_chord_v3 on I, D, G, H, Circle(D, E, G) we get angle(I, G, D) == angle(I, H, D) + 180 mod 360
By angles_on_chord_v3 on H, G, I, D, Circle(D, E, G) we get angle(H, I, G) == angle(H, D, G) + 180 mod 360
By angles_on_chord_v0 on E, I, H, G, Circle(D, E, G) we get angle(E, G, I) == angle(E, H, I) mod 360
By angles_on_chord_v0 on E, I, H, D, Circle(D, E, G) we get angle(E, D, I) == angle(E, H, I) mod 360
By angles_on_chord_v1 on D, I, H, E, Circle(D, E, G) we get angle(D, E, I) == angle(D, H, I) mod 360
By angles_on_chord_v0 on D, H, I, G, Circle(D, E, G) we get angle(D, G, H) == angle(D, I, H) mod 360
By angles_on_chord_v0 on D, H, E, I, Circle(D, E, G) we get angle(D, E, H) == angle(D, I, H) mod 360
By angles_on_chord_v1 on G, I, D, H, Circle(D, E, G) we get angle(G, D, I) == angle(G, H, I) mod 360
By angles_on_chord_v1 on H, D, G, I, Circle(D, E, G) we get angle(H, G, D) == angle(H, I, D) mod 360
By angles_on_chord_v0 on I, G, H, E, Circle(D, E, G) we get angle(I, E, G) == angle(I, H, G) mod 360
By angles_on_chord_v1 on E, H, I, G, Circle(D, E, G) we get angle(E, G, H) == angle(E, I, H) mod 360
By angles_on_chord_v3 on D, I, H, G, Circle(D, E, G) we get angle(D, H, I) == angle(D, G, I) + 180 mod 360
By angles_on_chord_v2 on H, G, D, I, Circle(D, E, G) we get angle(H, D, G) == angle(H, I, G) + 180 mod 360
By angles_on_chord_v1 on I, E, G, H, Circle(D, E, G) we get angle(I, G, E) == angle(I, H, E) mod 360
By angles_on_chord_v2 on D, I, G, H, Circle(D, E, G) we get angle(D, G, I) == angle(D, H, I) + 180 mod 360
By angles_on_chord_v3 on G, H, D, I, Circle(D, E, G) we get angle(G, D, H) == angle(G, I, H) + 180 mod 360
By angles_on_chord_v0 on I, G, D, H, Circle(D, E, G) we get angle(I, D, G) == angle(I, H, G) mod 360
By angles_on_chord_v1 on E, H, D, I, Circle(D, E, G) we get angle(E, D, H) == angle(E, I, H) mod 360
By angles_on_chord_v1 on H, D, E, I, Circle(D, E, G) we get angle(H, E, D) == angle(H, I, D) mod 360
By angles_on_chord_v2 on I, D, H, G, Circle(D, E, G) we get angle(I, H, D) == angle(I, G, D) + 180 mod 360
By same_angle_v3 on H, F, C, G we get angle(F, H, G) == angle(C, H, G) + 180 mod 360
By perpendicular_direction_conditions_v0 on E, D, H, G we get perpendicular(Line(D, E), Line(G, H))
By same_angle_v3 on G, B, A, H we get angle(B, G, H) == angle(A, G, H) + 180 mod 360
By projection_definition on C, midpoint(A, E), Line(G, I) we get midpoint(A, E) == projection(C, Line(G, I))
By parallel_line_definition on orthocenter(A, C, G), Line(G, I), i we get Line(G, I) == parallel_line(orthocenter(A, C, G), i)
By circle_by_three_points_and_center on I, E, projection(A, Line(C, F)), A we get I == center(Circle(A, E, projection(A, Line(C, F))))
By parallel_line_definition on orthocenter(A, C, I), Line(G, I), i we get Line(G, I) == parallel_line(orthocenter(A, C, I), i)
By angle_to_center on B, A, line_circle_tangent_point(Line(E, H), Circle(A, B, D)), Circle(A, B, D) we get angle(B, center(Circle(A, B, D)), line_circle_tangent_point(Line(E, H), Circle(A, B, D))) == 2 * angle(B, A, line_circle_tangent_point(Line(E, H), Circle(A, B, D))) mod 360
By angle_to_center on F, line_circle_tangent_point(Line(D, G), c), C, c we get angle(F, center(c), C) == 2 * angle(F, line_circle_tangent_point(Line(D, G), c), C) mod 360
By angle_to_center on F, line_circle_tangent_point(Line(E, G), c), D, c we get angle(F, center(c), D) == 2 * angle(F, line_circle_tangent_point(Line(E, G), c), D) mod 360
By circle_by_three_points_and_center on I, projection(A, Line(C, F)), F, E we get I == center(Circle(E, F, projection(A, Line(C, F))))
By angle_to_center on line_circle_tangent_point(Line(E, G), c), D, C, c we get angle(line_circle_tangent_point(Line(E, G), c), center(c), C) == 2 * angle(line_circle_tangent_point(Line(E, G), c), D, C) mod 360
By angle_to_center on C, line_circle_tangent_point(Line(D, G), c), E, c we get angle(C, center(c), E) == 2 * angle(C, line_circle_tangent_point(Line(D, G), c), E) mod 360
By angle_to_center on B, D, line_circle_tangent_point(Line(E, H), Circle(A, B, D)), Circle(A, B, D) we get angle(B, center(Circle(A, B, D)), line_circle_tangent_point(Line(E, H), Circle(A, B, D))) == 2 * angle(B, D, line_circle_tangent_point(Line(E, H), Circle(A, B, D))) mod 360
By angle_to_center on E, F, line_circle_tangent_point(Line(D, G), c), c we get angle(E, center(c), line_circle_tangent_point(Line(D, G), c)) == 2 * angle(E, F, line_circle_tangent_point(Line(D, G), c)) mod 360
By angle_to_center on E, C, line_circle_tangent_point(Line(D, G), c), c we get angle(E, center(c), line_circle_tangent_point(Line(D, G), c)) == 2 * angle(E, C, line_circle_tangent_point(Line(D, G), c)) mod 360
By angle_to_center on A, line_circle_tangent_point(Line(E, H), Circle(A, B, D)), B, Circle(A, B, D) we get angle(A, center(Circle(A, B, D)), B) == 2 * angle(A, line_circle_tangent_point(Line(E, H), Circle(A, B, D)), B) mod 360
By angle_to_center on line_circle_tangent_point(Line(D, H), Circle(A, B, D)), A, B, Circle(A, B, D) we get angle(line_circle_tangent_point(Line(D, H), Circle(A, B, D)), center(Circle(A, B, D)), B) == 2 * angle(line_circle_tangent_point(Line(D, H), Circle(A, B, D)), A, B) mod 360
By angle_to_center on B, A, line_circle_tangent_point(Line(D, H), Circle(A, B, D)), Circle(A, B, D) we get angle(B, center(Circle(A, B, D)), line_circle_tangent_point(Line(D, H), Circle(A, B, D))) == 2 * angle(B, A, line_circle_tangent_point(Line(D, H), Circle(A, B, D))) mod 360
By angle_to_center on A, line_circle_tangent_point(Line(D, H), Circle(A, B, D)), B, Circle(A, B, D) we get angle(A, center(Circle(A, B, D)), B) == 2 * angle(A, line_circle_tangent_point(Line(D, H), Circle(A, B, D)), B) mod 360
By angle_to_center on E, line_circle_tangent_point(Line(D, G), c), F, c we get angle(E, center(c), F) == 2 * angle(E, line_circle_tangent_point(Line(D, G), c), F) mod 360
By angle_to_center on C, line_circle_tangent_point(Line(E, G), c), D, c we get angle(C, center(c), D) == 2 * angle(C, line_circle_tangent_point(Line(E, G), c), D) mod 360
By angle_to_center on line_circle_tangent_point(Line(D, H), Circle(A, B, D)), E, B, Circle(A, B, D) we get angle(line_circle_tangent_point(Line(D, H), Circle(A, B, D)), center(Circle(A, B, D)), B) == 2 * angle(line_circle_tangent_point(Line(D, H), Circle(A, B, D)), E, B) mod 360
By angle_to_center on D, line_circle_tangent_point(Line(E, H), Circle(A, B, D)), B, Circle(A, B, D) we get angle(D, center(Circle(A, B, D)), B) == 2 * angle(D, line_circle_tangent_point(Line(E, H), Circle(A, B, D)), B) mod 360
By angle_to_center on F, C, line_circle_tangent_point(Line(E, G), c), c we get angle(F, center(c), line_circle_tangent_point(Line(E, G), c)) == 2 * angle(F, C, line_circle_tangent_point(Line(E, G), c)) mod 360
By angle_to_center on line_circle_tangent_point(Line(D, G), c), E, F, c we get angle(line_circle_tangent_point(Line(D, G), c), center(c), F) == 2 * angle(line_circle_tangent_point(Line(D, G), c), E, F) mod 360
By angle_to_center on D, C, line_circle_tangent_point(Line(E, G), c), c we get angle(D, center(c), line_circle_tangent_point(Line(E, G), c)) == 2 * angle(D, C, line_circle_tangent_point(Line(E, G), c)) mod 360
By angle_to_center on line_circle_tangent_point(Line(E, H), Circle(A, B, D)), B, D, Circle(A, B, D) we get angle(line_circle_tangent_point(Line(E, H), Circle(A, B, D)), center(Circle(A, B, D)), D) == 2 * angle(line_circle_tangent_point(Line(E, H), Circle(A, B, D)), B, D) mod 360
By angle_to_center on C, D, line_circle_tangent_point(Line(E, G), c), c we get angle(C, center(c), line_circle_tangent_point(Line(E, G), c)) == 2 * angle(C, D, line_circle_tangent_point(Line(E, G), c)) mod 360
By angle_to_center on F, E, line_circle_tangent_point(Line(D, G), c), c we get angle(F, center(c), line_circle_tangent_point(Line(D, G), c)) == 2 * angle(F, E, line_circle_tangent_point(Line(D, G), c)) mod 360
By angle_to_center on line_circle_tangent_point(Line(E, H), Circle(A, B, D)), D, B, Circle(A, B, D) we get angle(line_circle_tangent_point(Line(E, H), Circle(A, B, D)), center(Circle(A, B, D)), B) == 2 * angle(line_circle_tangent_point(Line(E, H), Circle(A, B, D)), D, B) mod 360
By angle_to_center on line_circle_tangent_point(Line(E, G), c), C, D, c we get angle(line_circle_tangent_point(Line(E, G), c), center(c), D) == 2 * angle(line_circle_tangent_point(Line(E, G), c), C, D) mod 360
By angle_to_center on B, E, line_circle_tangent_point(Line(D, H), Circle(A, B, D)), Circle(A, B, D) we get angle(B, center(Circle(A, B, D)), line_circle_tangent_point(Line(D, H), Circle(A, B, D))) == 2 * angle(B, E, line_circle_tangent_point(Line(D, H), Circle(A, B, D))) mod 360
By angle_to_center on F, C, line_circle_tangent_point(Line(D, G), c), c we get angle(F, center(c), line_circle_tangent_point(Line(D, G), c)) == 2 * angle(F, C, line_circle_tangent_point(Line(D, G), c)) mod 360
By angle_to_center on A, D, line_circle_tangent_point(Line(E, H), Circle(A, B, D)), Circle(A, B, D) we get angle(A, center(Circle(A, B, D)), line_circle_tangent_point(Line(E, H), Circle(A, B, D))) == 2 * angle(A, D, line_circle_tangent_point(Line(E, H), Circle(A, B, D))) mod 360
By angle_to_center on line_circle_tangent_point(Line(D, H), Circle(A, B, D)), B, A, Circle(A, B, D) we get angle(line_circle_tangent_point(Line(D, H), Circle(A, B, D)), center(Circle(A, B, D)), A) == 2 * angle(line_circle_tangent_point(Line(D, H), Circle(A, B, D)), B, A) mod 360
By angle_to_center on F, line_circle_tangent_point(Line(E, G), c), C, c we get angle(F, center(c), C) == 2 * angle(F, line_circle_tangent_point(Line(E, G), c), C) mod 360
By angle_to_center on A, B, line_circle_tangent_point(Line(E, H), Circle(A, B, D)), Circle(A, B, D) we get angle(A, center(Circle(A, B, D)), line_circle_tangent_point(Line(E, H), Circle(A, B, D))) == 2 * angle(A, B, line_circle_tangent_point(Line(E, H), Circle(A, B, D))) mod 360
By angle_to_center on F, D, line_circle_tangent_point(Line(E, G), c), c we get angle(F, center(c), line_circle_tangent_point(Line(E, G), c)) == 2 * angle(F, D, line_circle_tangent_point(Line(E, G), c)) mod 360
By angle_to_center on B, line_circle_tangent_point(Line(D, H), Circle(A, B, D)), A, Circle(A, B, D) we get angle(B, center(Circle(A, B, D)), A) == 2 * angle(B, line_circle_tangent_point(Line(D, H), Circle(A, B, D)), A) mod 360
By angle_to_center on line_circle_tangent_point(Line(E, G), c), D, F, c we get angle(line_circle_tangent_point(Line(E, G), c), center(c), F) == 2 * angle(line_circle_tangent_point(Line(E, G), c), D, F) mod 360
By angle_to_center on line_circle_tangent_point(Line(E, G), c), F, C, c we get angle(line_circle_tangent_point(Line(E, G), c), center(c), C) == 2 * angle(line_circle_tangent_point(Line(E, G), c), F, C) mod 360
By same_angle_v3 on I, D, A, C we get angle(D, I, C) == angle(A, I, C) + 180 mod 360
By angle_to_center on E, line_circle_tangent_point(Line(D, G), c), C, c we get angle(E, center(c), C) == 2 * angle(E, line_circle_tangent_point(Line(D, G), c), C) mod 360
By angle_to_center on line_circle_tangent_point(Line(D, G), c), F, C, c we get angle(line_circle_tangent_point(Line(D, G), c), center(c), C) == 2 * angle(line_circle_tangent_point(Line(D, G), c), F, C) mod 360
By angle_to_center on A, B, line_circle_tangent_point(Line(D, H), Circle(A, B, D)), Circle(A, B, D) we get angle(A, center(Circle(A, B, D)), line_circle_tangent_point(Line(D, H), Circle(A, B, D))) == 2 * angle(A, B, line_circle_tangent_point(Line(D, H), Circle(A, B, D))) mod 360
By angle_to_center on D, line_circle_tangent_point(Line(E, G), c), F, c we get angle(D, center(c), F) == 2 * angle(D, line_circle_tangent_point(Line(E, G), c), F) mod 360
By angle_to_center on line_circle_tangent_point(Line(D, G), c), C, E, c we get angle(line_circle_tangent_point(Line(D, G), c), center(c), E) == 2 * angle(line_circle_tangent_point(Line(D, G), c), C, E) mod 360
By angle_to_center on line_circle_tangent_point(Line(D, G), c), E, C, c we get angle(line_circle_tangent_point(Line(D, G), c), center(c), C) == 2 * angle(line_circle_tangent_point(Line(D, G), c), E, C) mod 360
By angle_to_center on D, A, line_circle_tangent_point(Line(E, H), Circle(A, B, D)), Circle(A, B, D) we get angle(D, center(Circle(A, B, D)), line_circle_tangent_point(Line(E, H), Circle(A, B, D))) == 2 * angle(D, A, line_circle_tangent_point(Line(E, H), Circle(A, B, D))) mod 360
By angle_to_center on line_circle_tangent_point(Line(E, H), Circle(A, B, D)), A, B, Circle(A, B, D) we get angle(line_circle_tangent_point(Line(E, H), Circle(A, B, D)), center(Circle(A, B, D)), B) == 2 * angle(line_circle_tangent_point(Line(E, H), Circle(A, B, D)), A, B) mod 360
By angle_to_center on line_circle_tangent_point(Line(E, H), Circle(A, B, D)), D, A, Circle(A, B, D) we get angle(line_circle_tangent_point(Line(E, H), Circle(A, B, D)), center(Circle(A, B, D)), A) == 2 * angle(line_circle_tangent_point(Line(E, H), Circle(A, B, D)), D, A) mod 360
By angle_to_center on B, line_circle_tangent_point(Line(E, H), Circle(A, B, D)), A, Circle(A, B, D) we get angle(B, center(Circle(A, B, D)), A) == 2 * angle(B, line_circle_tangent_point(Line(E, H), Circle(A, B, D)), A) mod 360
By angle_to_center on line_circle_tangent_point(Line(E, H), Circle(A, B, D)), A, D, Circle(A, B, D) we get angle(line_circle_tangent_point(Line(E, H), Circle(A, B, D)), center(Circle(A, B, D)), D) == 2 * angle(line_circle_tangent_point(Line(E, H), Circle(A, B, D)), A, D) mod 360
By angle_to_center on B, line_circle_tangent_point(Line(E, H), Circle(A, B, D)), D, Circle(A, B, D) we get angle(B, center(Circle(A, B, D)), D) == 2 * angle(B, line_circle_tangent_point(Line(E, H), Circle(A, B, D)), D) mod 360
By angle_to_center on D, B, line_circle_tangent_point(Line(E, H), Circle(A, B, D)), Circle(A, B, D) we get angle(D, center(Circle(A, B, D)), line_circle_tangent_point(Line(E, H), Circle(A, B, D))) == 2 * angle(D, B, line_circle_tangent_point(Line(E, H), Circle(A, B, D))) mod 360
By angle_to_center on C, line_circle_tangent_point(Line(E, G), c), F, c we get angle(C, center(c), F) == 2 * angle(C, line_circle_tangent_point(Line(E, G), c), F) mod 360
By angle_to_center on line_circle_tangent_point(Line(D, G), c), C, F, c we get angle(line_circle_tangent_point(Line(D, G), c), center(c), F) == 2 * angle(line_circle_tangent_point(Line(D, G), c), C, F) mod 360
By angle_to_center on A, line_circle_tangent_point(Line(E, H), Circle(A, B, D)), D, Circle(A, B, D) we get angle(A, center(Circle(A, B, D)), D) == 2 * angle(A, line_circle_tangent_point(Line(E, H), Circle(A, B, D)), D) mod 360
By angle_to_center on A, E, line_circle_tangent_point(Line(D, H), Circle(A, B, D)), Circle(A, B, D) we get angle(A, center(Circle(A, B, D)), line_circle_tangent_point(Line(D, H), Circle(A, B, D))) == 2 * angle(A, E, line_circle_tangent_point(Line(D, H), Circle(A, B, D))) mod 360
By angle_to_center on line_circle_tangent_point(Line(D, H), Circle(A, B, D)), E, A, Circle(A, B, D) we get angle(line_circle_tangent_point(Line(D, H), Circle(A, B, D)), center(Circle(A, B, D)), A) == 2 * angle(line_circle_tangent_point(Line(D, H), Circle(A, B, D)), E, A) mod 360
By angle_to_center on D, line_circle_tangent_point(Line(E, G), c), C, c we get angle(D, center(c), C) == 2 * angle(D, line_circle_tangent_point(Line(E, G), c), C) mod 360
By angle_to_center on C, line_circle_tangent_point(Line(D, G), c), F, c we get angle(C, center(c), F) == 2 * angle(C, line_circle_tangent_point(Line(D, G), c), F) mod 360
By angle_to_center on C, F, line_circle_tangent_point(Line(E, G), c), c we get angle(C, center(c), line_circle_tangent_point(Line(E, G), c)) == 2 * angle(C, F, line_circle_tangent_point(Line(E, G), c)) mod 360
By angle_to_center on line_circle_tangent_point(Line(E, G), c), F, D, c we get angle(line_circle_tangent_point(Line(E, G), c), center(c), D) == 2 * angle(line_circle_tangent_point(Line(E, G), c), F, D) mod 360
By angle_to_center on line_circle_tangent_point(Line(D, G), c), F, E, c we get angle(line_circle_tangent_point(Line(D, G), c), center(c), E) == 2 * angle(line_circle_tangent_point(Line(D, G), c), F, E) mod 360
By angle_to_center on C, E, line_circle_tangent_point(Line(D, G), c), c we get angle(C, center(c), line_circle_tangent_point(Line(D, G), c)) == 2 * angle(C, E, line_circle_tangent_point(Line(D, G), c)) mod 360
By angle_to_center on D, F, line_circle_tangent_point(Line(E, G), c), c we get angle(D, center(c), line_circle_tangent_point(Line(E, G), c)) == 2 * angle(D, F, line_circle_tangent_point(Line(E, G), c)) mod 360
By angle_to_center on line_circle_tangent_point(Line(E, G), c), C, F, c we get angle(line_circle_tangent_point(Line(E, G), c), center(c), F) == 2 * angle(line_circle_tangent_point(Line(E, G), c), C, F) mod 360
By angle_to_center on D, line_circle_tangent_point(Line(E, H), Circle(A, B, D)), A, Circle(A, B, D) we get angle(D, center(Circle(A, B, D)), A) == 2 * angle(D, line_circle_tangent_point(Line(E, H), Circle(A, B, D)), A) mod 360
By angle_to_center on F, line_circle_tangent_point(Line(D, G), c), E, c we get angle(F, center(c), E) == 2 * angle(F, line_circle_tangent_point(Line(D, G), c), E) mod 360
By angle_to_center on line_circle_tangent_point(Line(E, H), Circle(A, B, D)), B, A, Circle(A, B, D) we get angle(line_circle_tangent_point(Line(E, H), Circle(A, B, D)), center(Circle(A, B, D)), A) == 2 * angle(line_circle_tangent_point(Line(E, H), Circle(A, B, D)), B, A) mod 360
By angle_to_center on C, F, line_circle_tangent_point(Line(D, G), c), c we get angle(C, center(c), line_circle_tangent_point(Line(D, G), c)) == 2 * angle(C, F, line_circle_tangent_point(Line(D, G), c)) mod 360
By same_angle_v1 on C, F, H, I we get angle(F, C, I) == angle(H, C, I) mod 360
By perpendicular_direction_conditions_v0_r on B, E, C, midpoint(A, E) we get 180 == 2 * direction(B, E) - 2 * direction(C, midpoint(A, E)) mod 360
By same_angle_v0 on C, E, A, G we get angle(A, C, G) == angle(E, C, G) mod 360
By same_angle_v0 on C, E, A, I we get angle(A, C, I) == angle(E, C, I) mod 360
By divide_by_2_mod_180_v0 on I, E, F, E, H, G we get angle(E, H, G) == angle(I, E, F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, E), I, C, midpoint(A, E) we get 180 == 2 * direction(midpoint(A, E), I) - 2 * direction(C, midpoint(A, E)) mod 360
By same_angle_v2 on I, F, A, C we get angle(F, I, C) == angle(A, I, C) + 180 mod 360
By perpendicular_direction_conditions_v0_r on F, B, C, midpoint(A, E) we get 180 == 2 * direction(F, B) - 2 * direction(C, midpoint(A, E)) mod 360
By same_angle_v3 on G, B, A, C we get angle(B, G, C) == angle(A, G, C) + 180 mod 360
By same_angle_v1 on C, B, D, G we get angle(B, C, G) == angle(D, C, G) mod 360
By same_angle_v0 on I, F, D, C we get angle(D, I, C) == angle(F, I, C) mod 360
By perpendicular_direction_conditions_v0_r on E, B, midpoint(A, E), C we get 180 == 2 * direction(E, B) - 2 * direction(midpoint(A, E), C) mod 360
By same_angle_v1 on C, B, D, I we get angle(B, C, I) == angle(D, C, I) mod 360
By perpendicular_direction_conditions_v0_r on I, G, midpoint(A, E), C we get 180 == 2 * direction(I, G) - 2 * direction(midpoint(A, E), C) mod 360
By same_angle_v0 on C, H, F, G we get angle(F, C, G) == angle(H, C, G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, E), C, midpoint(A, E), I we get 180 == 2 * direction(midpoint(A, E), C) - 2 * direction(midpoint(A, E), I) mod 360
By divide_by_2_mod_180_v0 on E, H, G, I, E, B we get angle(E, H, G) == angle(I, E, B) mod 360
By divide_by_2_mod_180_v0 on D, G, H, I, A, E we get angle(D, G, H) == angle(I, A, E) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(A, E), E, F we get 180 == 2 * direction(C, midpoint(A, E)) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(A, E), G, I we get 180 == 2 * direction(C, midpoint(A, E)) - 2 * direction(G, I) mod 360
By in_imply_collinear on orthocenter(A, C, G), midpoint(A, E), G we get collinear(G, midpoint(A, E), orthocenter(A, C, G))
By perpendicular_direction_conditions_v0_r on C, midpoint(A, E), G, midpoint(A, E) we get 180 == 2 * direction(C, midpoint(A, E)) - 2 * direction(G, midpoint(A, E)) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(A, E), midpoint(A, E), C we get 180 == 2 * direction(G, midpoint(A, E)) - 2 * direction(midpoint(A, E), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, E), C, I, midpoint(A, E) we get 180 == 2 * direction(midpoint(A, E), C) - 2 * direction(I, midpoint(A, E)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, E), C, F, E we get 180 == 2 * direction(midpoint(A, E), C) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, E), C, E, F we get 180 == 2 * direction(midpoint(A, E), C) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, E), C, B, F we get 180 == 2 * direction(midpoint(A, E), C) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, E), C, B, E we get 180 == 2 * direction(midpoint(A, E), C) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on B, F, midpoint(A, E), C we get 180 == 2 * direction(B, F) - 2 * direction(midpoint(A, E), C) mod 360
By in_imply_concyclic on A, E, D, line_circle_tangent_point(Line(D, H), Circle(A, B, D)) we get concyclic(A, D, E, line_circle_tangent_point(Line(D, H), Circle(A, B, D)))
By perpendicular_direction_conditions_v0_r on F, E, midpoint(A, E), C we get 180 == 2 * direction(F, E) - 2 * direction(midpoint(A, E), C) mod 360
By probably_between_and_collinear_implies_between on C, H, F we get between(C, H, F)
By perpendicular_direction_conditions_v0_r on C, midpoint(A, E), F, E we get 180 == 2 * direction(C, midpoint(A, E)) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, E), C, F, B we get 180 == 2 * direction(midpoint(A, E), C) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, E), C, midpoint(A, E), G we get 180 == 2 * direction(midpoint(A, E), C) - 2 * direction(midpoint(A, E), G) mod 360
By divide_by_2_mod_180_v0 on H, D, E, D, G, H we get angle(D, G, H) == angle(H, D, E) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(A, E), midpoint(A, E), G we get 180 == 2 * direction(C, midpoint(A, E)) - 2 * direction(midpoint(A, E), G) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(A, E), C, midpoint(A, E) we get 180 == 2 * direction(G, midpoint(A, E)) - 2 * direction(C, midpoint(A, E)) mod 360
By perpendicular_direction_conditions_v0_r on G, I, C, midpoint(A, E) we get 180 == 2 * direction(G, I) - 2 * direction(C, midpoint(A, E)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, E), C, G, midpoint(A, E) we get 180 == 2 * direction(midpoint(A, E), C) - 2 * direction(G, midpoint(A, E)) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(A, E), B, E we get 180 == 2 * direction(C, midpoint(A, E)) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on I, midpoint(A, E), midpoint(A, E), C we get 180 == 2 * direction(I, midpoint(A, E)) - 2 * direction(midpoint(A, E), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, E), C, I, G we get 180 == 2 * direction(midpoint(A, E), C) - 2 * direction(I, G) mod 360
By perpendicular_direction_conditions_v0_r on B, F, C, midpoint(A, E) we get 180 == 2 * direction(B, F) - 2 * direction(C, midpoint(A, E)) mod 360
By divide_by_2_mod_180_v0 on I, E, F, G, H, D we get angle(G, H, D) == angle(I, E, F) mod 360
By perpendicular_direction_conditions_v0_r on B, E, midpoint(A, E), C we get 180 == 2 * direction(B, E) - 2 * direction(midpoint(A, E), C) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(A, E), F, B we get 180 == 2 * direction(C, midpoint(A, E)) - 2 * direction(F, B) mod 360
By divide_by_2_mod_180_v1 on G, H, E, B, C, A we get angle(B, C, A) == angle(G, H, E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, E), G, C, midpoint(A, E) we get 180 == 2 * direction(midpoint(A, E), G) - 2 * direction(C, midpoint(A, E)) mod 360
By perpendicular_direction_conditions_v0_r on F, E, C, midpoint(A, E) we get 180 == 2 * direction(F, E) - 2 * direction(C, midpoint(A, E)) mod 360
By perpendicular_direction_conditions_v0_r on I, midpoint(A, E), C, midpoint(A, E) we get 180 == 2 * direction(I, midpoint(A, E)) - 2 * direction(C, midpoint(A, E)) mod 360
By perpendicular_direction_conditions_v0_r on E, F, midpoint(A, E), C we get 180 == 2 * direction(E, F) - 2 * direction(midpoint(A, E), C) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(A, E), E, B we get 180 == 2 * direction(C, midpoint(A, E)) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(A, E), midpoint(A, E), I we get 180 == 2 * direction(C, midpoint(A, E)) - 2 * direction(midpoint(A, E), I) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(A, E), B, F we get 180 == 2 * direction(C, midpoint(A, E)) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on E, B, C, midpoint(A, E) we get 180 == 2 * direction(E, B) - 2 * direction(C, midpoint(A, E)) mod 360
By perpendicular_direction_conditions_v0_r on G, I, midpoint(A, E), C we get 180 == 2 * direction(G, I) - 2 * direction(midpoint(A, E), C) mod 360
By perpendicular_direction_conditions_v0_r on F, B, midpoint(A, E), C we get 180 == 2 * direction(F, B) - 2 * direction(midpoint(A, E), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, E), C, G, I we get 180 == 2 * direction(midpoint(A, E), C) - 2 * direction(G, I) mod 360
By divide_by_2_mod_180_v0 on E, C, D, G, H, D we get angle(E, C, D) == angle(G, H, D) mod 360
By perpendicular_direction_conditions_v0_r on I, G, C, midpoint(A, E) we get 180 == 2 * direction(I, G) - 2 * direction(C, midpoint(A, E)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, E), I, midpoint(A, E), C we get 180 == 2 * direction(midpoint(A, E), I) - 2 * direction(midpoint(A, E), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, E), C, E, B we get 180 == 2 * direction(midpoint(A, E), C) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(A, E), I, midpoint(A, E) we get 180 == 2 * direction(C, midpoint(A, E)) - 2 * direction(I, midpoint(A, E)) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(A, E), I, G we get 180 == 2 * direction(C, midpoint(A, E)) - 2 * direction(I, G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, E), G, midpoint(A, E), C we get 180 == 2 * direction(midpoint(A, E), G) - 2 * direction(midpoint(A, E), C) mod 360
By perpendicular_direction_conditions_v0_r on E, F, C, midpoint(A, E) we get 180 == 2 * direction(E, F) - 2 * direction(C, midpoint(A, E)) mod 360
By divide_by_2_mod_180_v1 on E, G, H, C, A, I we get angle(C, A, I) == angle(E, G, H) mod 360
By in_imply_collinear on orthocenter(A, C, I), D, C we get collinear(C, D, orthocenter(A, C, I))
By divide_by_2_mod_180_v0 on E, H, G, E, C, B we get angle(E, C, B) == angle(E, H, G) mod 360
By divide_by_2_mod_180_v3 on B, F, I, G, H, D we get angle(B, F, I) == angle(G, H, D) + 180 mod 360
By divide_by_2_mod_180_v2 on E, H, G, B, F, A we get angle(E, H, G) == angle(B, F, A) + 180 mod 360
By divide_by_2_mod_180_v1 on E, G, H, F, B, C we get angle(E, G, H) == angle(F, B, C) mod 360
By divide_by_2_mod_180_v2 on E, H, G, B, F, I we get angle(E, H, G) == angle(B, F, I) + 180 mod 360
By in_imply_concyclic on A, E, D, line_circle_tangent_point(Line(E, H), Circle(A, B, D)) we get concyclic(A, D, E, line_circle_tangent_point(Line(E, H), Circle(A, B, D)))
By divide_by_2_mod_180_v1 on E, A, F, H, G, D we get angle(E, A, F) == angle(H, G, D) mod 360
By divide_by_2_mod_180_v0 on D, G, H, D, A, E we get angle(D, A, E) == angle(D, G, H) mod 360
By divide_by_2_mod_180_v1 on F, B, C, H, G, D we get angle(F, B, C) == angle(H, G, D) mod 360
By divide_by_2_mod_180_v1 on A, F, E, G, H, E we get angle(A, F, E) == angle(G, H, E) mod 360
By divide_by_2_mod_180_v1 on E, A, I, H, G, D we get angle(E, A, I) == angle(H, G, D) mod 360
By in_imply_collinear on line_circle_tangent_point(Line(D, G), c), G, D we get collinear(D, G, line_circle_tangent_point(Line(D, G), c))
By in_imply_collinear on orthocenter(A, C, I), G, midpoint(A, E) we get collinear(G, midpoint(A, E), orthocenter(A, C, I))
By divide_by_2_mod_180_v0 on E, H, G, G, I, D we get angle(E, H, G) == angle(G, I, D) mod 360
By in_imply_collinear on orthocenter(A, C, G), C, projection(A, Line(C, F)) we get collinear(C, orthocenter(A, C, G), projection(A, Line(C, F)))
By in_imply_collinear on orthocenter(A, C, G), G, I we get collinear(G, I, orthocenter(A, C, G))
By reverse_direction on midpoint(A, E), I we get 180 == direction(midpoint(A, E), I) - direction(I, midpoint(A, E)) mod 360
By divide_by_2_mod_180_v1 on D, H, G, D, F, B we get angle(D, F, B) == angle(D, H, G) mod 360
By divide_by_2_mod_180_v0 on D, E, H, H, G, E we get angle(D, E, H) == angle(H, G, E) mod 360
By divide_by_2_mod_180_v0 on G, H, D, E, F, A we get angle(E, F, A) == angle(G, H, D) mod 360
By in_imply_collinear on H, projection(A, Line(C, F)), C we get collinear(C, H, projection(A, Line(C, F)))
By divide_by_2_mod_180_v3 on B, F, I, E, H, G we get angle(B, F, I) == angle(E, H, G) + 180 mod 360
By divide_by_2_mod_180_v1 on D, H, G, F, I, G we get angle(D, H, G) == angle(F, I, G) mod 360
By divide_by_2_mod_180_v1 on H, G, D, C, A, F we get angle(C, A, F) == angle(H, G, D) mod 360
By in_imply_collinear on orthocenter(A, C, I), I, G we get collinear(G, I, orthocenter(A, C, I))
By in_imply_concyclic on D, E, B, line_circle_tangent_point(Line(E, H), Circle(A, B, D)) we get concyclic(B, D, E, line_circle_tangent_point(Line(E, H), Circle(A, B, D)))
By divide_by_2_mod_180_v1 on B, C, E, G, H, E we get angle(B, C, E) == angle(G, H, E) mod 360
By divide_by_2_mod_180_v1 on H, G, D, C, A, I we get angle(C, A, I) == angle(H, G, D) mod 360
By divide_by_2_mod_180_v1 on D, H, G, B, C, A we get angle(B, C, A) == angle(D, H, G) mod 360
By divide_by_2_mod_180_v2 on I, F, B, D, H, G we get angle(I, F, B) == angle(D, H, G) + 180 mod 360
By divide_by_2_mod_180_v0 on C, B, E, H, G, E we get angle(C, B, E) == angle(H, G, E) mod 360
By divide_by_2_mod_180_v0 on E, H, G, E, F, A we get angle(E, F, A) == angle(E, H, G) mod 360
By in_imply_collinear on orthocenter(A, C, G), F, C we get collinear(C, F, orthocenter(A, C, G))
By divide_by_2_mod_180_v1 on E, G, H, C, A, D we get angle(C, A, D) == angle(E, G, H) mod 360
By divide_by_2_mod_180_v0 on F, A, C, D, G, H we get angle(D, G, H) == angle(F, A, C) mod 360
By divide_by_2_mod_180_v2 on I, E, C, E, G, H we get angle(I, E, C) == angle(E, G, H) + 180 mod 360
By in_imply_concyclic on I, E, H, G we get concyclic(E, G, H, I)
By divide_by_2_mod_180_v0 on D, G, H, D, A, C we get angle(D, A, C) == angle(D, G, H) mod 360
By in_imply_collinear on orthocenter(A, C, G), C, H we get collinear(C, H, orthocenter(A, C, G))
By divide_by_2_mod_180_v0 on H, G, E, D, A, E we get angle(D, A, E) == angle(H, G, E) mod 360
By divide_by_2_mod_180_v0 on A, E, I, H, G, E we get angle(A, E, I) == angle(H, G, E) mod 360
By divide_by_2_mod_180_v1 on E, B, C, E, G, H we get angle(E, B, C) == angle(E, G, H) mod 360
By in_imply_collinear on orthocenter(A, C, I), C, B we get collinear(B, C, orthocenter(A, C, I))
By divide_by_2_mod_180_v1 on H, G, D, E, B, C we get angle(E, B, C) == angle(H, G, D) mod 360
By divide_by_2_mod_180_v1 on D, H, G, G, D, E we get angle(D, H, G) == angle(G, D, E) mod 360
By divide_by_2_mod_180_v0 on H, G, E, F, A, E we get angle(F, A, E) == angle(H, G, E) mod 360
By sas_anti_similarity on G, D, H, A, E, F we get anti_similar_triangles(A, E, F, G, D, H)
By tangent_point_is_unique on D, line_circle_tangent_point(Line(D, H), Circle(A, B, D)), Circle(A, B, D), Line(D, H) we get D == line_circle_tangent_point(Line(D, H), Circle(A, B, D))
By divide_by_2_mod_180_v1 on E, A, F, E, G, H we get angle(E, A, F) == angle(E, G, H) mod 360
By in_imply_collinear on line_circle_tangent_point(Line(E, G), c), G, E we get collinear(E, G, line_circle_tangent_point(Line(E, G), c))
By in_imply_collinear on line_circle_tangent_point(Line(D, H), Circle(A, B, D)), D, H we get collinear(D, H, line_circle_tangent_point(Line(D, H), Circle(A, B, D)))
By in_imply_collinear on orthocenter(A, C, I), midpoint(A, E), I we get collinear(I, midpoint(A, E), orthocenter(A, C, I))
By divide_by_2_mod_180_v0 on H, G, E, I, A, C we get angle(H, G, E) == angle(I, A, C) mod 360
By divide_by_2_mod_180_v2 on A, I, G, D, H, G we get angle(A, I, G) == angle(D, H, G) + 180 mod 360
By divide_by_2_mod_180_v3 on H, G, D, I, E, C we get angle(H, G, D) == angle(I, E, C) + 180 mod 360
By in_imply_collinear on orthocenter(A, C, G), I, midpoint(A, E) we get collinear(I, midpoint(A, E), orthocenter(A, C, G))
By in_imply_collinear on H, projection(A, Line(C, F)), F we get collinear(F, H, projection(A, Line(C, F)))
By divide_by_2_mod_180_v1 on E, G, H, H, E, D we get angle(E, G, H) == angle(H, E, D) mod 360
By in_imply_collinear on orthocenter(A, C, G), F, projection(A, Line(C, F)) we get collinear(F, orthocenter(A, C, G), projection(A, Line(C, F)))
By divide_by_2_mod_180_v2 on E, H, G, E, F, D we get angle(E, H, G) == angle(E, F, D) + 180 mod 360
By divide_by_2_mod_180_v2 on A, I, G, G, H, E we get angle(A, I, G) == angle(G, H, E) + 180 mod 360
By divide_by_2_mod_180_v1 on E, G, H, E, A, D we get angle(E, A, D) == angle(E, G, H) mod 360
By divide_by_2_mod_180_v3 on C, E, I, D, G, H we get angle(C, E, I) == angle(D, G, H) + 180 mod 360
By divide_by_2_mod_180_v1 on D, C, A, G, H, E we get angle(D, C, A) == angle(G, H, E) mod 360
By tangent_point_is_unique on E, line_circle_tangent_point(Line(E, H), Circle(A, B, D)), Circle(A, B, D), Line(E, H) we get E == line_circle_tangent_point(Line(E, H), Circle(A, B, D))
By in_imply_concyclic on F, E, D, line_circle_tangent_point(Line(E, G), c) we get concyclic(D, E, F, line_circle_tangent_point(Line(E, G), c))
By divide_by_2_mod_180_v3 on B, F, A, E, H, G we get angle(B, F, A) == angle(E, H, G) + 180 mod 360
By divide_by_2_mod_180_v3 on E, G, H, I, E, C we get angle(E, G, H) == angle(I, E, C) + 180 mod 360
By in_imply_concyclic on I, D, H, G we get concyclic(D, G, H, I)
By in_imply_collinear on line_circle_tangent_point(Line(E, H), Circle(A, B, D)), H, E we get collinear(E, H, line_circle_tangent_point(Line(E, H), Circle(A, B, D)))
By divide_by_2_mod_180_v1 on H, G, D, I, E, A we get angle(H, G, D) == angle(I, E, A) mod 360
By divide_by_2_mod_180_v0 on D, G, H, A, E, I we get angle(A, E, I) == angle(D, G, H) mod 360
By divide_by_2_mod_180_v1 on D, E, G, G, H, E we get angle(D, E, G) == angle(G, H, E) mod 360
By in_imply_collinear on orthocenter(A, C, I), D, B we get collinear(B, D, orthocenter(A, C, I))
By divide_by_2_mod_180_v0 on E, H, G, E, C, D we get angle(E, C, D) == angle(E, H, G) mod 360
By point_on_perpendicular_bisector on E, A, orthocenter(A, C, I), Line(G, I) we get distance(A, orthocenter(A, C, I)) == distance(E, orthocenter(A, C, I))
By divide_by_2_mod_180_v1 on A, F, E, D, H, G we get angle(A, F, E) == angle(D, H, G) mod 360
By divide_by_2_mod_180_v1 on F, B, D, E, G, H we get angle(E, G, H) == angle(F, B, D) mod 360
By divide_by_2_mod_180_v3 on D, H, G, A, I, G we get angle(D, H, G) == angle(A, I, G) + 180 mod 360
By divide_by_2_mod_180_v0 on H, G, E, D, A, C we get angle(D, A, C) == angle(H, G, E) mod 360
By divide_by_2_mod_180_v0 on E, F, I, G, H, D we get angle(E, F, I) == angle(G, H, D) mod 360
By divide_by_2_mod_180_v1 on B, E, I, G, H, E we get angle(B, E, I) == angle(G, H, E) mod 360
By divide_by_2_mod_180_v1 on D, I, G, G, H, E we get angle(D, I, G) == angle(G, H, E) mod 360
By tangent_point_is_unique on D, line_circle_tangent_point(Line(D, G), c), c, Line(D, G) we get D == line_circle_tangent_point(Line(D, G), c)
By in_imply_concyclic on E, C, D, line_circle_tangent_point(Line(D, G), c) we get concyclic(C, D, E, line_circle_tangent_point(Line(D, G), c))
By sas_anti_similarity on C, E, B, H, D, G we get anti_similar_triangles(B, C, E, G, H, D)
By divide_by_2_mod_180_v1 on E, G, H, C, A, F we get angle(C, A, F) == angle(E, G, H) mod 360
By altitude_definition on F, G, projection(A, Line(C, F)), Line(F, H) we get Line(F, H) == altitude(F, G, projection(A, Line(C, F)))
By in_imply_concyclic on C, E, F, line_circle_tangent_point(Line(D, G), c) we get concyclic(C, E, F, line_circle_tangent_point(Line(D, G), c))
By divide_by_2_mod_180_v0 on I, A, E, H, G, E we get angle(H, G, E) == angle(I, A, E) mod 360
By divide_by_2_mod_180_v0 on E, H, G, G, I, F we get angle(E, H, G) == angle(G, I, F) mod 360
By divide_by_2_mod_180_v0 on G, H, D, I, E, B we get angle(G, H, D) == angle(I, E, B) mod 360
By divide_by_2_mod_180_v3 on D, H, G, A, F, B we get angle(D, H, G) == angle(A, F, B) + 180 mod 360
By sas_anti_similarity on C, D, A, H, E, G we get anti_similar_triangles(A, C, D, G, H, E)
By divide_by_2_mod_180_v1 on D, C, E, G, H, E we get angle(D, C, E) == angle(G, H, E) mod 360
By divide_by_2_mod_180_v2 on I, E, C, H, G, D we get angle(I, E, C) == angle(H, G, D) + 180 mod 360
By divide_by_2_mod_180_v1 on D, C, E, D, H, G we get angle(D, C, E) == angle(D, H, G) mod 360
By divide_by_2_mod_180_v2 on G, H, D, B, F, I we get angle(G, H, D) == angle(B, F, I) + 180 mod 360
By divide_by_2_mod_180_v0 on H, G, E, D, B, F we get angle(D, B, F) == angle(H, G, E) mod 360
By divide_by_2_mod_180_v0 on G, I, F, G, H, D we get angle(G, H, D) == angle(G, I, F) mod 360
By sas_similarity on B, E, C, G, E, H we get similar_triangles(B, C, E, G, H, E)
By divide_by_2_mod_180_v1 on G, H, E, I, F, E we get angle(G, H, E) == angle(I, F, E) mod 360
By divide_by_2_mod_180_v0 on D, G, H, I, A, C we get angle(D, G, H) == angle(I, A, C) mod 360
By divide_by_2_mod_180_v1 on E, G, H, E, A, I we get angle(E, A, I) == angle(E, G, H) mod 360
By divide_by_2_mod_180_v3 on D, H, G, D, F, E we get angle(D, H, G) == angle(D, F, E) + 180 mod 360
By tangent_point_is_unique on E, line_circle_tangent_point(Line(E, G), c), c, Line(E, G) we get E == line_circle_tangent_point(Line(E, G), c)
By divide_by_2_mod_180_v1 on C, A, D, H, G, D we get angle(C, A, D) == angle(H, G, D) mod 360
By divide_by_2_mod_180_v1 on E, D, H, H, G, D we get angle(E, D, H) == angle(H, G, D) mod 360
By divide_by_2_mod_180_v1 on B, E, I, D, H, G we get angle(B, E, I) == angle(D, H, G) mod 360
By divide_by_2_mod_180_v2 on G, H, D, E, F, D we get angle(G, H, D) == angle(E, F, D) + 180 mod 360
By divide_by_2_mod_180_v0 on B, F, D, E, H, G we get angle(B, F, D) == angle(E, H, G) mod 360
By divide_by_2_mod_180_v0 on G, E, D, E, H, G we get angle(E, H, G) == angle(G, E, D) mod 360
By divide_by_2_mod_180_v3 on D, H, G, G, I, E we get angle(D, H, G) == angle(G, I, E) + 180 mod 360
By in_imply_concyclic on D, C, E, line_circle_tangent_point(Line(E, G), c) we get concyclic(C, D, E, line_circle_tangent_point(Line(E, G), c))
By divide_by_2_mod_180_v0 on E, H, G, A, C, B we get angle(A, C, B) == angle(E, H, G) mod 360
By divide_by_2_mod_180_v0 on C, B, F, D, G, H we get angle(C, B, F) == angle(D, G, H) mod 360
By divide_by_2_mod_180_v1 on D, H, G, D, C, A we get angle(D, C, A) == angle(D, H, G) mod 360
By point_on_perpendicular_bisector on E, A, orthocenter(A, C, G), Line(G, I) we get distance(A, orthocenter(A, C, G)) == distance(E, orthocenter(A, C, G))
By in_imply_concyclic on F, E, D, line_circle_tangent_point(Line(D, G), c) we get concyclic(D, E, F, line_circle_tangent_point(Line(D, G), c))
By divide_by_2_mod_180_v2 on H, G, E, C, E, I we get angle(H, G, E) == angle(C, E, I) + 180 mod 360
By in_imply_concyclic on A, B, E, line_circle_tangent_point(Line(E, H), Circle(A, B, D)) we get concyclic(A, B, E, line_circle_tangent_point(Line(E, H), Circle(A, B, D)))
By divide_by_2_mod_180_v3 on E, F, D, G, H, D we get angle(E, F, D) == angle(G, H, D) + 180 mod 360
By sas_similarity on G, E, H, B, E, C we get similar_triangles(B, C, E, G, H, E)
By divide_by_2_mod_180_v3 on G, H, E, A, I, G we get angle(G, H, E) == angle(A, I, G) + 180 mod 360
By in_imply_concyclic on C, F, E, line_circle_tangent_point(Line(E, G), c) we get concyclic(C, E, F, line_circle_tangent_point(Line(E, G), c))
By divide_by_2_mod_180_v1 on E, G, H, E, B, D we get angle(E, B, D) == angle(E, G, H) mod 360
By altitude_definition on F, B, projection(A, Line(C, F)), Line(F, H) we get Line(F, H) == altitude(F, B, projection(A, Line(C, F)))
By sas_similarity on H, D, G, C, D, A we get similar_triangles(A, C, D, G, H, D)
By in_imply_concyclic on E, B, D, line_circle_tangent_point(Line(D, H), Circle(A, B, D)) we get concyclic(B, D, E, line_circle_tangent_point(Line(D, H), Circle(A, B, D)))
By in_imply_concyclic on D, A, B, line_circle_tangent_point(Line(E, H), Circle(A, B, D)) we get concyclic(A, B, D, line_circle_tangent_point(Line(E, H), Circle(A, B, D)))
By divide_by_2_mod_180_v2 on I, F, B, G, H, E we get angle(I, F, B) == angle(G, H, E) + 180 mod 360
By divide_by_2_mod_180_v2 on G, H, D, B, F, A we get angle(G, H, D) == angle(B, F, A) + 180 mod 360
By sas_similarity on H, E, G, F, E, A we get similar_triangles(A, E, F, G, E, H)
By sas_anti_similarity on A, E, F, G, D, H we get anti_similar_triangles(A, E, F, G, D, H)
By divide_by_2_mod_180_v3 on G, I, A, E, H, G we get angle(G, I, A) == angle(E, H, G) + 180 mod 360
By divide_by_2_mod_180_v1 on D, H, G, B, C, E we get angle(B, C, E) == angle(D, H, G) mod 360
By divide_by_2_mod_180_v1 on D, H, G, I, F, E we get angle(D, H, G) == angle(I, F, E) mod 360
By divide_by_2_mod_180_v0 on H, G, E, C, B, F we get angle(C, B, F) == angle(H, G, E) mod 360
By divide_by_2_mod_180_v0 on D, B, E, H, G, E we get angle(D, B, E) == angle(H, G, E) mod 360
By sas_anti_similarity on H, D, G, C, E, B we get anti_similar_triangles(B, C, E, G, H, D)
By divide_by_2_mod_180_v2 on A, F, B, G, H, E we get angle(A, F, B) == angle(G, H, E) + 180 mod 360
By in_imply_concyclic on B, A, E, line_circle_tangent_point(Line(D, H), Circle(A, B, D)) we get concyclic(A, B, E, line_circle_tangent_point(Line(D, H), Circle(A, B, D)))
By divide_by_2_mod_180_v3 on B, F, A, G, H, D we get angle(B, F, A) == angle(G, H, D) + 180 mod 360
By divide_by_2_mod_180_v0 on F, A, C, H, G, E we get angle(F, A, C) == angle(H, G, E) mod 360
By divide_by_2_mod_180_v0 on D, G, H, F, A, E we get angle(D, G, H) == angle(F, A, E) mod 360
By divide_by_2_mod_180_v0 on E, H, G, A, C, D we get angle(A, C, D) == angle(E, H, G) mod 360
By sas_similarity on G, D, H, A, D, C we get similar_triangles(A, C, D, G, H, D)
By divide_by_2_mod_180_v0 on B, F, D, G, H, D we get angle(B, F, D) == angle(G, H, D) mod 360
By divide_by_2_mod_180_v3 on C, E, I, H, G, E we get angle(C, E, I) == angle(H, G, E) + 180 mod 360
By divide_by_2_mod_180_v1 on F, E, I, D, H, G we get angle(D, H, G) == angle(F, E, I) mod 360
By divide_by_2_mod_180_v0 on D, G, H, C, B, E we get angle(C, B, E) == angle(D, G, H) mod 360
By divide_by_2_mod_180_v1 on F, I, G, G, H, E we get angle(F, I, G) == angle(G, H, E) mod 360
By divide_by_2_mod_180_v0 on D, G, H, D, B, F we get angle(D, B, F) == angle(D, G, H) mod 360
By sas_anti_similarity on F, D, B, H, E, G we get anti_similar_triangles(B, D, F, G, E, H)
By divide_by_2_mod_180_v0 on G, H, D, E, C, B we get angle(E, C, B) == angle(G, H, D) mod 360
By divide_by_2_mod_180_v0 on G, H, D, A, C, B we get angle(A, C, B) == angle(G, H, D) mod 360
By sas_similarity on H, E, G, C, E, B we get similar_triangles(B, C, E, G, H, E)
By divide_by_2_mod_180_v2 on D, F, E, D, H, G we get angle(D, F, E) == angle(D, H, G) + 180 mod 360
By divide_by_2_mod_180_v1 on G, H, E, D, F, B we get angle(D, F, B) == angle(G, H, E) mod 360
By divide_by_2_mod_180_v2 on D, F, E, G, H, E we get angle(D, F, E) == angle(G, H, E) + 180 mod 360
By divide_by_2_mod_180_v2 on G, H, D, E, I, G we get angle(G, H, D) == angle(E, I, G) + 180 mod 360
By divide_by_2_mod_180_v2 on E, H, G, G, I, A we get angle(E, H, G) == angle(G, I, A) + 180 mod 360
By sas_similarity on C, E, B, H, E, G we get similar_triangles(B, C, E, G, H, E)
By divide_by_2_mod_180_v3 on G, I, A, G, H, D we get angle(G, I, A) == angle(G, H, D) + 180 mod 360
By divide_by_2_mod_180_v3 on G, H, E, D, F, E we get angle(G, H, E) == angle(D, F, E) + 180 mod 360
By divide_by_2_mod_180_v1 on E, G, H, I, E, A we get angle(E, G, H) == angle(I, E, A) mod 360
By aa_anti_similarity on E, G, midpoint(A, E), A, G, midpoint(A, E) we get anti_similar_triangles(A, G, midpoint(A, E), E, G, midpoint(A, E))
By divide_by_2_mod_180_v1 on F, B, D, H, G, D we get angle(F, B, D) == angle(H, G, D) mod 360
By collinear_definition on H, F, C we get F in Line(C, H), C in Line(F, H), Line(C, H) == Line(F, H), 0 == 2 * angle(F, H, C) mod 360
By divide_by_2_mod_180_v2 on A, F, B, D, H, G we get angle(A, F, B) == angle(D, H, G) + 180 mod 360
By divide_by_2_mod_180_v0 on E, H, G, E, F, I we get angle(E, F, I) == angle(E, H, G) mod 360
By divide_by_2_mod_180_v3 on D, H, G, I, F, B we get angle(D, H, G) == angle(I, F, B) + 180 mod 360
By divide_by_2_mod_180_v0 on G, H, D, E, D, G we get angle(E, D, G) == angle(G, H, D) mod 360
By divide_by_2_mod_180_v1 on E, A, D, H, G, D we get angle(E, A, D) == angle(H, G, D) mod 360
By external_angle_bisector_definition_v0 on B, midpoint(A, E), E, G we get 180 == angle(B, G, midpoint(A, E)) + angle(E, G, midpoint(A, E)) mod 360
By divide_by_2_mod_180_v2 on G, H, D, G, I, A we get angle(G, H, D) == angle(G, I, A) + 180 mod 360
By double_perpendicular_and_parallel_v0 on Line(C, F), Line(A, B), Line(F, H) we get parallel(Line(C, F), Line(F, H))
By sas_anti_similarity on F, E, A, H, D, G we get anti_similar_triangles(A, E, F, G, D, H)
By divide_by_2_mod_180_v1 on F, E, I, G, H, E we get angle(F, E, I) == angle(G, H, E) mod 360
By divide_by_2_mod_180_v3 on G, H, E, I, F, B we get angle(G, H, E) == angle(I, F, B) + 180 mod 360
By in_imply_concyclic on B, A, D, line_circle_tangent_point(Line(D, H), Circle(A, B, D)) we get concyclic(A, B, D, line_circle_tangent_point(Line(D, H), Circle(A, B, D)))
By collinear_definition on C, F, H we get F in Line(C, H), H in Line(C, F), Line(C, F) == Line(C, H), 0 == 2 * angle(F, C, H) mod 360
By divide_by_2_mod_180_v0 on D, G, H, D, B, E we get angle(D, B, E) == angle(D, G, H) mod 360
By external_angle_bisector_definition_v0 on D, midpoint(A, E), E, I we get 180 == angle(D, I, midpoint(A, E)) + angle(E, I, midpoint(A, E)) mod 360
By altitude_definition on F, B, G, Line(F, H) we get Line(F, H) == altitude(F, B, G)
By sas_similarity on H, D, G, F, D, B we get similar_triangles(B, D, F, G, D, H)
By divide_by_2_mod_180_v1 on E, B, D, H, G, D we get angle(E, B, D) == angle(H, G, D) mod 360
By aa_anti_similarity on A, G, midpoint(A, E), E, G, midpoint(A, E) we get anti_similar_triangles(A, G, midpoint(A, E), E, G, midpoint(A, E))
By divide_by_2_mod_180_v2 on D, G, H, C, E, I we get angle(D, G, H) == angle(C, E, I) + 180 mod 360
By aa_anti_similarity on E, midpoint(A, E), I, A, midpoint(A, E), I we get anti_similar_triangles(A, I, midpoint(A, E), E, I, midpoint(A, E))
By sas_similarity on A, E, F, G, E, H we get similar_triangles(A, E, F, G, E, H)
By sas_anti_similarity on G, E, H, A, D, C we get anti_similar_triangles(A, C, D, G, H, E)
By divide_by_2_mod_180_v3 on E, F, D, E, H, G we get angle(E, F, D) == angle(E, H, G) + 180 mod 360
By altitude_definition on F, projection(A, Line(C, F)), A, Line(F, H) we get Line(F, H) == altitude(F, A, projection(A, Line(C, F)))
By divide_by_2_mod_180_v2 on G, I, E, D, H, G we get angle(G, I, E) == angle(D, H, G) + 180 mod 360
By divide_by_2_mod_180_v3 on E, I, G, G, H, D we get angle(E, I, G) == angle(G, H, D) + 180 mod 360
By sas_anti_similarity on G, D, H, B, E, C we get anti_similar_triangles(B, C, E, G, H, D)
By altitude_definition on H, B, A, Line(F, H) we get Line(F, H) == altitude(H, A, B)
By divide_by_2_mod_180_v3 on G, H, E, A, F, B we get angle(G, H, E) == angle(A, F, B) + 180 mod 360
By external_angle_bisector_definition_v0 on F, midpoint(A, E), E, I we get 180 == angle(F, I, midpoint(A, E)) + angle(E, I, midpoint(A, E)) mod 360
By reverse_direction on H, G we get 180 == direction(H, G) - direction(G, H) mod 360
By in_imply_concyclic on C, D, F, line_circle_tangent_point(Line(E, G), c) we get concyclic(C, D, F, line_circle_tangent_point(Line(E, G), c))
By sas_anti_similarity on H, E, G, F, D, B we get anti_similar_triangles(B, D, F, G, E, H)
By sas_similarity on G, E, H, A, E, F we get similar_triangles(A, E, F, G, E, H)
By collinear_definition on F, H, C we get H in Line(C, F), C in Line(F, H), Line(C, F) == Line(F, H), 0 == 2 * angle(H, F, C) mod 360
By sas_anti_similarity on A, D, C, G, E, H we get anti_similar_triangles(A, C, D, G, H, E)
By in_imply_concyclic on F, D, C, line_circle_tangent_point(Line(D, G), c) we get concyclic(C, D, F, line_circle_tangent_point(Line(D, G), c))
By altitude_definition on F, G, A, Line(F, H) we get Line(F, H) == altitude(F, A, G)
By aa_anti_similarity on E, I, midpoint(A, E), A, I, midpoint(A, E) we get anti_similar_triangles(A, I, midpoint(A, E), E, I, midpoint(A, E))
By sas_similarity on B, D, F, G, D, H we get similar_triangles(B, D, F, G, D, H)
By altitude_definition on F, A, B, Line(F, H) we get Line(F, H) == altitude(F, A, B)
By altitude_definition on H, A, projection(A, Line(C, F)), Line(F, H) we get Line(F, H) == altitude(H, A, projection(A, Line(C, F)))
By aa_anti_similarity on A, I, midpoint(A, E), E, I, midpoint(A, E) we get anti_similar_triangles(A, I, midpoint(A, E), E, I, midpoint(A, E))
By internal_angle_bisector_definition_v0 on F, H, F, C we get angle(F, C, H) == angle(H, C, F) mod 360
By altitude_definition on H, B, G, Line(F, H) we get Line(F, H) == altitude(H, B, G)
By sas_similarity on A, D, C, G, D, H we get similar_triangles(A, C, D, G, H, D)
By internal_angle_bisector_definition_v0 on projection(A, Line(C, F)), H, projection(A, Line(C, F)), C we get angle(H, C, projection(A, Line(C, F))) == angle(projection(A, Line(C, F)), C, H) mod 360
By collinear_definition on F, C, H we get C in Line(F, H), H in Line(C, F), Line(C, F) == Line(F, H), 0 == 2 * angle(C, F, H) mod 360
By aa_anti_similarity on A, midpoint(A, E), I, E, midpoint(A, E), I we get anti_similar_triangles(A, I, midpoint(A, E), E, I, midpoint(A, E))
By altitude_definition on H, projection(A, Line(C, F)), B, Line(F, H) we get Line(F, H) == altitude(H, B, projection(A, Line(C, F)))
By reverse_direction on midpoint(A, E), G we get 180 == direction(midpoint(A, E), G) - direction(G, midpoint(A, E)) mod 360
By altitude_definition on H, projection(A, Line(C, F)), G, Line(F, H) we get Line(F, H) == altitude(H, G, projection(A, Line(C, F)))
By reverse_direction on I, midpoint(A, E) we get 180 == direction(I, midpoint(A, E)) - direction(midpoint(A, E), I) mod 360
By collinear_definition on C, H, F we get H in Line(C, F), F in Line(C, H), Line(C, F) == Line(C, H), 0 == 2 * angle(H, C, F) mod 360
By sas_anti_similarity on G, E, H, B, D, F we get anti_similar_triangles(B, D, F, G, E, H)
By altitude_definition on H, A, G, Line(F, H) we get Line(F, H) == altitude(H, A, G)
By sas_anti_similarity on H, E, G, C, D, A we get anti_similar_triangles(A, C, D, G, H, E)
By reverse_direction on G, H we get 180 == direction(G, H) - direction(H, G) mod 360
By aa_anti_similarity on E, midpoint(A, E), G, A, midpoint(A, E), G we get anti_similar_triangles(A, G, midpoint(A, E), E, G, midpoint(A, E))
By sas_similarity on F, D, B, H, D, G we get similar_triangles(B, D, F, G, D, H)
By sas_anti_similarity on H, D, G, F, E, A we get anti_similar_triangles(A, E, F, G, D, H)
By sas_anti_similarity on B, D, F, G, E, H we get anti_similar_triangles(B, D, F, G, E, H)
By sas_similarity on G, D, H, B, D, F we get similar_triangles(B, D, F, G, D, H)
By sas_similarity on C, D, A, H, D, G we get similar_triangles(A, C, D, G, H, D)
By sas_similarity on F, E, A, H, E, G we get similar_triangles(A, E, F, G, E, H)
By aa_anti_similarity on A, midpoint(A, E), G, E, midpoint(A, E), G we get anti_similar_triangles(A, G, midpoint(A, E), E, G, midpoint(A, E))
By reverse_direction on G, midpoint(A, E) we get 180 == direction(G, midpoint(A, E)) - direction(midpoint(A, E), G) mod 360
By sas_anti_similarity on B, E, C, G, D, H we get anti_similar_triangles(B, C, E, G, H, D)
By angle_to_center on line_circle_tangent_point(Line(D, H), Circle(A, B, D)), line_circle_tangent_point(Line(E, H), Circle(A, B, D)), A, Circle(A, B, D) we get angle(line_circle_tangent_point(Line(D, H), Circle(A, B, D)), center(Circle(A, B, D)), A) == 2 * angle(line_circle_tangent_point(Line(D, H), Circle(A, B, D)), line_circle_tangent_point(Line(E, H), Circle(A, B, D)), A) mod 360
By angle_to_center on C, line_circle_tangent_point(Line(D, G), c), line_circle_tangent_point(Line(E, G), c), c we get angle(C, center(c), line_circle_tangent_point(Line(E, G), c)) == 2 * angle(C, line_circle_tangent_point(Line(D, G), c), line_circle_tangent_point(Line(E, G), c)) mod 360
By angle_to_center on F, line_circle_tangent_point(Line(D, G), c), line_circle_tangent_point(Line(E, G), c), c we get angle(F, center(c), line_circle_tangent_point(Line(E, G), c)) == 2 * angle(F, line_circle_tangent_point(Line(D, G), c), line_circle_tangent_point(Line(E, G), c)) mod 360
By angle_to_center on line_circle_tangent_point(Line(E, G), c), line_circle_tangent_point(Line(D, G), c), F, c we get angle(line_circle_tangent_point(Line(E, G), c), center(c), F) == 2 * angle(line_circle_tangent_point(Line(E, G), c), line_circle_tangent_point(Line(D, G), c), F) mod 360
By angle_to_center on E, B, line_circle_tangent_point(Line(D, H), Circle(A, B, D)), Circle(A, B, D) we get angle(E, center(Circle(A, B, D)), line_circle_tangent_point(Line(D, H), Circle(A, B, D))) == 2 * angle(E, B, line_circle_tangent_point(Line(D, H), Circle(A, B, D))) mod 360
By angle_to_center on E, A, line_circle_tangent_point(Line(D, H), Circle(A, B, D)), Circle(A, B, D) we get angle(E, center(Circle(A, B, D)), line_circle_tangent_point(Line(D, H), Circle(A, B, D))) == 2 * angle(E, A, line_circle_tangent_point(Line(D, H), Circle(A, B, D))) mod 360
By angle_to_center on B, line_circle_tangent_point(Line(D, H), Circle(A, B, D)), E, Circle(A, B, D) we get angle(B, center(Circle(A, B, D)), E) == 2 * angle(B, line_circle_tangent_point(Line(D, H), Circle(A, B, D)), E) mod 360
By angle_to_center on E, line_circle_tangent_point(Line(D, H), Circle(A, B, D)), A, Circle(A, B, D) we get angle(E, center(Circle(A, B, D)), A) == 2 * angle(E, line_circle_tangent_point(Line(D, H), Circle(A, B, D)), A) mod 360
By angle_to_center on line_circle_tangent_point(Line(E, H), Circle(A, B, D)), line_circle_tangent_point(Line(D, H), Circle(A, B, D)), B, Circle(A, B, D) we get angle(line_circle_tangent_point(Line(E, H), Circle(A, B, D)), center(Circle(A, B, D)), B) == 2 * angle(line_circle_tangent_point(Line(E, H), Circle(A, B, D)), line_circle_tangent_point(Line(D, H), Circle(A, B, D)), B) mod 360
By angle_to_center on E, line_circle_tangent_point(Line(D, H), Circle(A, B, D)), B, Circle(A, B, D) we get angle(E, center(Circle(A, B, D)), B) == 2 * angle(E, line_circle_tangent_point(Line(D, H), Circle(A, B, D)), B) mod 360
By angle_to_center on B, line_circle_tangent_point(Line(D, H), Circle(A, B, D)), line_circle_tangent_point(Line(E, H), Circle(A, B, D)), Circle(A, B, D) we get angle(B, center(Circle(A, B, D)), line_circle_tangent_point(Line(E, H), Circle(A, B, D))) == 2 * angle(B, line_circle_tangent_point(Line(D, H), Circle(A, B, D)), line_circle_tangent_point(Line(E, H), Circle(A, B, D))) mod 360
By angle_to_center on line_circle_tangent_point(Line(D, G), c), line_circle_tangent_point(Line(E, G), c), F, c we get angle(line_circle_tangent_point(Line(D, G), c), center(c), F) == 2 * angle(line_circle_tangent_point(Line(D, G), c), line_circle_tangent_point(Line(E, G), c), F) mod 360
By angle_to_center on line_circle_tangent_point(Line(D, H), Circle(A, B, D)), A, E, Circle(A, B, D) we get angle(line_circle_tangent_point(Line(D, H), Circle(A, B, D)), center(Circle(A, B, D)), E) == 2 * angle(line_circle_tangent_point(Line(D, H), Circle(A, B, D)), A, E) mod 360
By angle_to_center on A, line_circle_tangent_point(Line(D, H), Circle(A, B, D)), E, Circle(A, B, D) we get angle(A, center(Circle(A, B, D)), E) == 2 * angle(A, line_circle_tangent_point(Line(D, H), Circle(A, B, D)), E) mod 360
By angle_to_center on line_circle_tangent_point(Line(D, G), c), line_circle_tangent_point(Line(E, G), c), C, c we get angle(line_circle_tangent_point(Line(D, G), c), center(c), C) == 2 * angle(line_circle_tangent_point(Line(D, G), c), line_circle_tangent_point(Line(E, G), c), C) mod 360
By angle_to_center on F, line_circle_tangent_point(Line(E, G), c), line_circle_tangent_point(Line(D, G), c), c we get angle(F, center(c), line_circle_tangent_point(Line(D, G), c)) == 2 * angle(F, line_circle_tangent_point(Line(E, G), c), line_circle_tangent_point(Line(D, G), c)) mod 360
By angle_to_center on B, line_circle_tangent_point(Line(E, H), Circle(A, B, D)), line_circle_tangent_point(Line(D, H), Circle(A, B, D)), Circle(A, B, D) we get angle(B, center(Circle(A, B, D)), line_circle_tangent_point(Line(D, H), Circle(A, B, D))) == 2 * angle(B, line_circle_tangent_point(Line(E, H), Circle(A, B, D)), line_circle_tangent_point(Line(D, H), Circle(A, B, D))) mod 360
By angle_to_center on line_circle_tangent_point(Line(E, H), Circle(A, B, D)), line_circle_tangent_point(Line(D, H), Circle(A, B, D)), A, Circle(A, B, D) we get angle(line_circle_tangent_point(Line(E, H), Circle(A, B, D)), center(Circle(A, B, D)), A) == 2 * angle(line_circle_tangent_point(Line(E, H), Circle(A, B, D)), line_circle_tangent_point(Line(D, H), Circle(A, B, D)), A) mod 360
By angle_to_center on line_circle_tangent_point(Line(E, G), c), line_circle_tangent_point(Line(D, G), c), C, c we get angle(line_circle_tangent_point(Line(E, G), c), center(c), C) == 2 * angle(line_circle_tangent_point(Line(E, G), c), line_circle_tangent_point(Line(D, G), c), C) mod 360
By angle_to_center on A, line_circle_tangent_point(Line(E, H), Circle(A, B, D)), line_circle_tangent_point(Line(D, H), Circle(A, B, D)), Circle(A, B, D) we get angle(A, center(Circle(A, B, D)), line_circle_tangent_point(Line(D, H), Circle(A, B, D))) == 2 * angle(A, line_circle_tangent_point(Line(E, H), Circle(A, B, D)), line_circle_tangent_point(Line(D, H), Circle(A, B, D))) mod 360
By angle_to_center on line_circle_tangent_point(Line(D, H), Circle(A, B, D)), B, E, Circle(A, B, D) we get angle(line_circle_tangent_point(Line(D, H), Circle(A, B, D)), center(Circle(A, B, D)), E) == 2 * angle(line_circle_tangent_point(Line(D, H), Circle(A, B, D)), B, E) mod 360
By angle_to_center on line_circle_tangent_point(Line(D, H), Circle(A, B, D)), line_circle_tangent_point(Line(E, H), Circle(A, B, D)), B, Circle(A, B, D) we get angle(line_circle_tangent_point(Line(D, H), Circle(A, B, D)), center(Circle(A, B, D)), B) == 2 * angle(line_circle_tangent_point(Line(D, H), Circle(A, B, D)), line_circle_tangent_point(Line(E, H), Circle(A, B, D)), B) mod 360
By angle_to_center on A, line_circle_tangent_point(Line(D, H), Circle(A, B, D)), line_circle_tangent_point(Line(E, H), Circle(A, B, D)), Circle(A, B, D) we get angle(A, center(Circle(A, B, D)), line_circle_tangent_point(Line(E, H), Circle(A, B, D))) == 2 * angle(A, line_circle_tangent_point(Line(D, H), Circle(A, B, D)), line_circle_tangent_point(Line(E, H), Circle(A, B, D))) mod 360
By angle_to_center on C, line_circle_tangent_point(Line(E, G), c), line_circle_tangent_point(Line(D, G), c), c we get angle(C, center(c), line_circle_tangent_point(Line(D, G), c)) == 2 * angle(C, line_circle_tangent_point(Line(E, G), c), line_circle_tangent_point(Line(D, G), c)) mod 360
By external_angle_bisector_definition_v0_r on midpoint(A, E), B, A, E we get Line(B, E) == external_angle_bisector(A, E, midpoint(A, E))
By external_angle_bisector_definition_v0_r on C, midpoint(A, E), A, E we get external_angle_bisector(A, E, C) == Line(E, midpoint(A, E))
By anti_similar_triangle_basic_properties on D, B, G, F, D, H we get angle(D, B, G) == 0 - angle(F, D, H) mod 360, angle(B, G, D) == 0 - angle(D, H, F) mod 360, angle(G, D, B) == 0 - angle(H, F, D) mod 360, log(distance(B, D)) + log(distance(D, H)) == log(distance(D, F)) + log(distance(B, G)), log(distance(B, G)) + log(distance(F, H)) == log(distance(D, H)) + log(distance(D, G)), log(distance(D, G)) + log(distance(D, F)) == log(distance(F, H)) + log(distance(B, D))
By external_angle_bisector_definition_v0_r on E, G, E, midpoint(A, E) we get Line(G, midpoint(A, E)) == external_angle_bisector(E, midpoint(A, E), E)
By external_angle_bisector_definition_v0_r on G, A, G, midpoint(A, E) we get Line(A, midpoint(A, E)) == external_angle_bisector(G, midpoint(A, E), G)
By internal_angle_bisector_definition_v0 on E, C, E, midpoint(A, E) we get angle(C, midpoint(A, E), E) == angle(E, midpoint(A, E), C) mod 360
By perpendicular_angle_conditions_v0 on C, midpoint(A, E), G we get angle(C, midpoint(A, E), G) == orientation(C, midpoint(A, E), G) mod 360
By external_angle_bisector_definition_v0_r on midpoint(A, E), F, midpoint(A, E), E we get Line(E, F) == external_angle_bisector(midpoint(A, E), E, midpoint(A, E))
By external_angle_bisector_definition_v0_r on A, G, A, midpoint(A, E) we get Line(G, midpoint(A, E)) == external_angle_bisector(A, midpoint(A, E), A)
By anti_similar_triangle_basic_properties on H, E, G, H, D, G we get angle(H, E, G) == 0 - angle(H, D, G) mod 360, angle(E, G, H) == 0 - angle(D, G, H) mod 360, angle(G, H, E) == 0 - angle(G, H, D) mod 360, log(distance(D, H)) + log(distance(E, G)) == log(distance(E, H)) + log(distance(D, G)), log(distance(D, G)) + log(distance(G, H)) == log(distance(E, G)) + log(distance(G, H)), log(distance(G, H)) + log(distance(D, H)) == log(distance(G, H)) + log(distance(E, H))
By anti_similar_triangle_basic_properties on G, E, A, H, F, E we get angle(G, E, A) == 0 - angle(H, F, E) mod 360, angle(E, A, G) == 0 - angle(F, E, H) mod 360, angle(A, G, E) == 0 - angle(E, H, F) mod 360, log(distance(E, G)) + log(distance(E, F)) == log(distance(F, H)) + log(distance(A, E)), log(distance(A, E)) + log(distance(E, H)) == log(distance(E, F)) + log(distance(A, G)), log(distance(A, G)) + log(distance(F, H)) == log(distance(E, H)) + log(distance(E, G))
By power_of_a_point_on_circle on line_circle_tangent_point(Line(E, G), c), c we get 0 == power_of_a_point(line_circle_tangent_point(Line(E, G), c), c)
By sas_anti_congruence on projection(A, Line(C, F)), I, F, F, I, projection(A, Line(C, F)) we get anti_congruent_triangles(F, I, projection(A, Line(C, F)), projection(A, Line(C, F)), I, F)
By external_angle_bisector_definition_v0_r on E, I, E, midpoint(A, E) we get Line(I, midpoint(A, E)) == external_angle_bisector(E, midpoint(A, E), E)
By anti_similar_triangle_basic_properties on E, H, F, F, H, E we get angle(E, H, F) == 0 - angle(F, H, E) mod 360, angle(H, F, E) == 0 - angle(H, E, F) mod 360, angle(F, E, H) == 0 - angle(E, F, H) mod 360, log(distance(E, H)) + log(distance(E, H)) == log(distance(F, H)) + log(distance(F, H)), log(distance(E, H)) + log(distance(E, F)) == log(distance(F, H)) + log(distance(E, F)), log(distance(E, F)) + log(distance(E, H)) == log(distance(E, F)) + log(distance(F, H))
By collinear_definition on midpoint(A, E), C, E we get C in Line(E, midpoint(A, E)), E in Line(C, midpoint(A, E)), Line(C, midpoint(A, E)) == Line(E, midpoint(A, E)), 0 == 2 * angle(C, midpoint(A, E), E) mod 360
By external_angle_bisector_definition_v0_r on G, H, G, E we get Line(E, H) == external_angle_bisector(G, E, G)
By similar_triangle_basic_properties on E, F, H, E, A, G we get angle(E, A, G) == angle(E, F, H) mod 360, angle(A, G, E) == angle(F, H, E) mod 360, angle(G, E, A) == angle(H, E, F) mod 360, log(distance(A, E)) + log(distance(F, H)) == log(distance(E, F)) + log(distance(A, G)), log(distance(A, G)) + log(distance(E, H)) == log(distance(F, H)) + log(distance(E, G)), log(distance(E, G)) + log(distance(E, F)) == log(distance(E, H)) + log(distance(A, E))
By anti_similar_triangle_basic_properties on H, D, F, G, B, D we get angle(H, D, F) == 0 - angle(G, B, D) mod 360, angle(D, F, H) == 0 - angle(B, D, G) mod 360, angle(F, H, D) == 0 - angle(D, G, B) mod 360, log(distance(B, G)) + log(distance(D, F)) == log(distance(D, H)) + log(distance(B, D)), log(distance(B, D)) + log(distance(F, H)) == log(distance(D, F)) + log(distance(D, G)), log(distance(D, G)) + log(distance(D, H)) == log(distance(F, H)) + log(distance(B, G))
By external_angle_bisector_definition_v0_r on midpoint(A, E), F, A, E we get Line(E, F) == external_angle_bisector(A, E, midpoint(A, E))
By collinear_definition on midpoint(A, E), A, C we get A in Line(C, midpoint(A, E)), C in Line(A, midpoint(A, E)), Line(A, midpoint(A, E)) == Line(C, midpoint(A, E)), 0 == 2 * angle(A, midpoint(A, E), C) mod 360
By external_angle_bisector_definition_v0_r on I, A, I, midpoint(A, E) we get Line(A, midpoint(A, E)) == external_angle_bisector(I, midpoint(A, E), I)
By sas_anti_congruence on A, I, projection(A, Line(C, F)), projection(A, Line(C, F)), I, A we get anti_congruent_triangles(A, I, projection(A, Line(C, F)), projection(A, Line(C, F)), I, A)
By internal_angle_bisector_definition_v0_r on midpoint(A, E), C, E, A we get Line(A, C) == internal_angle_bisector(E, A, midpoint(A, E))
By anti_similar_triangle_basic_properties on D, H, F, F, H, D we get angle(D, H, F) == 0 - angle(F, H, D) mod 360, angle(H, F, D) == 0 - angle(H, D, F) mod 360, angle(F, D, H) == 0 - angle(D, F, H) mod 360, log(distance(D, H)) + log(distance(D, H)) == log(distance(F, H)) + log(distance(F, H)), log(distance(D, H)) + log(distance(D, F)) == log(distance(F, H)) + log(distance(D, F)), log(distance(D, F)) + log(distance(D, H)) == log(distance(D, F)) + log(distance(F, H))
By radical_axis_definition_v0_r on A, Circle(A, B, D), Circle(A, F, projection(A, Line(C, F))) we get A in radical_axis(Circle(A, B, D), Circle(A, F, projection(A, Line(C, F))))
By power_of_a_point_on_circle on H, Circle(D, E, G) we get 0 == power_of_a_point(H, Circle(D, E, G))
By external_angle_bisector_definition_v0_r on G, E, G, midpoint(A, E) we get Line(E, midpoint(A, E)) == external_angle_bisector(G, midpoint(A, E), G)
By external_angle_bisector_definition_v0_r on I, E, I, midpoint(A, E) we get Line(E, midpoint(A, E)) == external_angle_bisector(I, midpoint(A, E), I)
By power_of_a_point_on_circle on I, Circle(D, E, G) we get 0 == power_of_a_point(I, Circle(D, E, G))
By external_angle_bisector_definition_v0_r on A, I, A, midpoint(A, E) we get Line(I, midpoint(A, E)) == external_angle_bisector(A, midpoint(A, E), A)
By power_of_a_point_on_circle on line_circle_tangent_point(Line(E, H), Circle(A, B, D)), Circle(A, B, D) we get 0 == power_of_a_point(line_circle_tangent_point(Line(E, H), Circle(A, B, D)), Circle(A, B, D))
By anti_similar_triangle_basic_properties on A, E, G, E, F, H we get angle(A, E, G) == 0 - angle(E, F, H) mod 360, angle(E, G, A) == 0 - angle(F, H, E) mod 360, angle(G, A, E) == 0 - angle(H, E, F) mod 360, log(distance(A, E)) + log(distance(F, H)) == log(distance(E, F)) + log(distance(E, G)), log(distance(E, G)) + log(distance(E, H)) == log(distance(F, H)) + log(distance(A, G)), log(distance(A, G)) + log(distance(E, F)) == log(distance(E, H)) + log(distance(A, E))
By similar_triangle_basic_properties on A, E, G, F, E, H we get angle(A, E, G) == angle(F, E, H) mod 360, angle(E, G, A) == angle(E, H, F) mod 360, angle(G, A, E) == angle(H, F, E) mod 360, log(distance(A, E)) + log(distance(E, H)) == log(distance(E, F)) + log(distance(E, G)), log(distance(E, G)) + log(distance(F, H)) == log(distance(E, H)) + log(distance(A, G)), log(distance(A, G)) + log(distance(E, F)) == log(distance(F, H)) + log(distance(A, E))
By internal_angle_bisector_definition_v0_r on E, midpoint(A, E), C, A we get internal_angle_bisector(C, A, E) == Line(A, midpoint(A, E))
By power_of_a_point_in_circle on G, Circle(D, E, G) we get 0 == power_of_a_point(G, Circle(D, E, G))
By external_angle_bisector_definition_v0_r on H, G, H, E we get Line(E, G) == external_angle_bisector(H, E, H)
By collinear_definition on midpoint(A, E), E, C we get E in Line(C, midpoint(A, E)), C in Line(E, midpoint(A, E)), Line(C, midpoint(A, E)) == Line(E, midpoint(A, E)), 0 == 2 * angle(E, midpoint(A, E), C) mod 360
By log_of_2_times_distance on A, F, I, projection(A, Line(C, F)) we get log(distance(A, F)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(I, projection(A, Line(C, F))))
By collinear_definition on C, midpoint(A, E), E we get midpoint(A, E) in Line(C, E), E in Line(C, midpoint(A, E)), Line(C, E) == Line(C, midpoint(A, E)), 0 == 2 * angle(midpoint(A, E), C, E) mod 360
By external_angle_bisector_definition_v0_r on midpoint(A, E), B, midpoint(A, E), E we get Line(B, E) == external_angle_bisector(midpoint(A, E), E, midpoint(A, E))
By internal_angle_bisector_definition_v0 on A, C, A, midpoint(A, E) we get angle(A, midpoint(A, E), C) == angle(C, midpoint(A, E), A) mod 360
By internal_angle_bisector_definition_v0_r on A, G, E, midpoint(A, E) we get Line(G, midpoint(A, E)) == internal_angle_bisector(A, midpoint(A, E), E)
By sas_anti_congruence on projection(A, Line(C, F)), I, A, A, I, projection(A, Line(C, F)) we get anti_congruent_triangles(A, I, projection(A, Line(C, F)), projection(A, Line(C, F)), I, A)
By similar_triangle_basic_properties on H, D, F, G, D, B we get angle(G, D, B) == angle(H, D, F) mod 360, angle(D, B, G) == angle(D, F, H) mod 360, angle(B, G, D) == angle(F, H, D) mod 360, log(distance(D, G)) + log(distance(D, F)) == log(distance(D, H)) + log(distance(B, D)), log(distance(B, D)) + log(distance(F, H)) == log(distance(D, F)) + log(distance(B, G)), log(distance(B, G)) + log(distance(D, H)) == log(distance(F, H)) + log(distance(D, G))
By collinear_definition on C, A, midpoint(A, E) we get A in Line(C, midpoint(A, E)), midpoint(A, E) in Line(A, C), Line(A, C) == Line(C, midpoint(A, E)), 0 == 2 * angle(A, C, midpoint(A, E)) mod 360
By radical_axis_definition_v0_r on F, Circle(A, F, projection(A, Line(C, F))), c we get F in radical_axis(c, Circle(A, F, projection(A, Line(C, F))))
By internal_angle_bisector_definition_v0_r on E, G, D, H we get Line(G, H) == internal_angle_bisector(D, H, E)
By power_of_a_point_in_circle on line_circle_tangent_point(Line(D, G), c), c we get 0 == power_of_a_point(line_circle_tangent_point(Line(D, G), c), c)
By external_angle_bisector_definition_v0_r on H, G, H, D we get Line(D, G) == external_angle_bisector(H, D, H)
By collinear_definition on midpoint(A, E), C, A we get C in Line(A, midpoint(A, E)), A in Line(C, midpoint(A, E)), Line(A, midpoint(A, E)) == Line(C, midpoint(A, E)), 0 == 2 * angle(C, midpoint(A, E), A) mod 360
By internal_angle_bisector_definition_v0 on A, midpoint(A, E), A, C we get angle(A, C, midpoint(A, E)) == angle(midpoint(A, E), C, A) mod 360
By external_angle_bisector_definition_v0_r on G, H, G, D we get Line(D, H) == external_angle_bisector(G, D, G)
By internal_angle_bisector_definition_v0_r on A, C, midpoint(A, E), E we get Line(C, E) == internal_angle_bisector(A, E, midpoint(A, E))
By isosceles_triangle_properties on I, projection(A, Line(C, F)), A we get distance(A, I) == distance(I, projection(A, Line(C, F))), angle(I, projection(A, Line(C, F)), A) == angle(projection(A, Line(C, F)), A, I) mod 360
By power_of_a_point_on_circle on D, Circle(D, E, G) we get 0 == power_of_a_point(D, Circle(D, E, G))
By internal_angle_bisector_definition_v0_r on midpoint(A, E), F, C, E we get Line(E, F) == internal_angle_bisector(C, E, midpoint(A, E))
By similar_triangle_basic_properties on H, F, D, G, B, D we get angle(G, B, D) == angle(H, F, D) mod 360, angle(B, D, G) == angle(F, D, H) mod 360, angle(D, G, B) == angle(D, H, F) mod 360, log(distance(B, G)) + log(distance(D, F)) == log(distance(F, H)) + log(distance(B, D)), log(distance(B, D)) + log(distance(D, H)) == log(distance(D, F)) + log(distance(D, G)), log(distance(D, G)) + log(distance(F, H)) == log(distance(D, H)) + log(distance(B, G))
By internal_angle_bisector_definition_v0_r on G, midpoint(A, E), G, I we get internal_angle_bisector(G, I, G) == Line(I, midpoint(A, E))
By internal_angle_bisector_definition_v0_r on I, midpoint(A, E), I, G we get internal_angle_bisector(I, G, I) == Line(G, midpoint(A, E))
By perpendicular_angle_conditions_v0 on C, midpoint(A, E), I we get angle(C, midpoint(A, E), I) == orientation(C, midpoint(A, E), I) mod 360
By power_of_a_point_in_circle on E, Circle(D, E, G) we get 0 == power_of_a_point(E, Circle(D, E, G))
By sas_anti_congruence on F, I, projection(A, Line(C, F)), projection(A, Line(C, F)), I, F we get anti_congruent_triangles(F, I, projection(A, Line(C, F)), projection(A, Line(C, F)), I, F)
By internal_angle_bisector_definition_v0_r on midpoint(A, E), B, C, E we get Line(B, E) == internal_angle_bisector(C, E, midpoint(A, E))
By internal_angle_bisector_definition_v0_r on G, I, G, midpoint(A, E) we get Line(I, midpoint(A, E)) == internal_angle_bisector(G, midpoint(A, E), G)
By perpendicular_angle_conditions_v0 on G, midpoint(A, E), C we get angle(G, midpoint(A, E), C) == orientation(C, G, midpoint(A, E)) mod 360
By internal_angle_bisector_definition_v0_r on D, H, E, G we get Line(G, H) == internal_angle_bisector(D, G, E)
By internal_angle_bisector_definition_v0_r on midpoint(A, E), I, midpoint(A, E), G we get Line(G, I) == internal_angle_bisector(midpoint(A, E), G, midpoint(A, E))
By perpendicular_angle_conditions_v0 on I, midpoint(A, E), C we get angle(I, midpoint(A, E), C) == orientation(C, I, midpoint(A, E)) mod 360
By internal_angle_bisector_definition_v0_r on I, G, I, midpoint(A, E) we get Line(G, midpoint(A, E)) == internal_angle_bisector(I, midpoint(A, E), I)
By internal_angle_bisector_definition_v0_r on midpoint(A, E), G, midpoint(A, E), I we get Line(G, I) == internal_angle_bisector(midpoint(A, E), I, midpoint(A, E))
By power_of_a_point_on_circle on line_circle_tangent_point(Line(D, H), Circle(A, B, D)), Circle(A, B, D) we get 0 == power_of_a_point(line_circle_tangent_point(Line(D, H), Circle(A, B, D)), Circle(A, B, D))
By isosceles_triangle_properties on I, projection(A, Line(C, F)), F we get distance(F, I) == distance(I, projection(A, Line(C, F))), angle(I, projection(A, Line(C, F)), F) == angle(projection(A, Line(C, F)), F, I) mod 360
By reverse_direction on I, projection(A, Line(C, F)) we get 180 == direction(I, projection(A, Line(C, F))) - direction(projection(A, Line(C, F)), I) mod 360
By isosceles_triangle_properties on I, A, projection(A, Line(C, F)) we get distance(A, I) == distance(I, projection(A, Line(C, F))), angle(A, projection(A, Line(C, F)), I) == angle(I, A, projection(A, Line(C, F))) mod 360
By internal_angle_bisector_definition_v0_r on A, I, E, midpoint(A, E) we get Line(I, midpoint(A, E)) == internal_angle_bisector(A, midpoint(A, E), E)
By collinear_definition on C, midpoint(A, E), A we get midpoint(A, E) in Line(A, C), A in Line(C, midpoint(A, E)), Line(A, C) == Line(C, midpoint(A, E)), 0 == 2 * angle(midpoint(A, E), C, A) mod 360
By internal_angle_bisector_definition_v0 on E, midpoint(A, E), E, C we get angle(E, C, midpoint(A, E)) == angle(midpoint(A, E), C, E) mod 360
By collinear_definition on C, E, midpoint(A, E) we get E in Line(C, midpoint(A, E)), midpoint(A, E) in Line(C, E), Line(C, E) == Line(C, midpoint(A, E)), 0 == 2 * angle(E, C, midpoint(A, E)) mod 360
By isosceles_triangle_properties on I, F, projection(A, Line(C, F)) we get distance(F, I) == distance(I, projection(A, Line(C, F))), angle(F, projection(A, Line(C, F)), I) == angle(I, F, projection(A, Line(C, F))) mod 360
By perpendicular_lines_draw_intersection on altitude(A, C, G), Line(C, G) we get exists(line_intersection(Line(C, G), altitude(A, C, G)))
By perpendicular_lines_draw_intersection on Line(C, I), altitude(A, C, I) we get exists(line_intersection(Line(C, I), altitude(A, C, I)))
By perpendicular_lines_draw_intersection on Line(A, B), Line(F, H) we get exists(line_intersection(Line(A, B), Line(F, H)))
By angle_to_center on line_circle_tangent_point(Line(E, H), Circle(A, B, D)), A, line_circle_tangent_point(Line(D, H), Circle(A, B, D)), Circle(A, B, D) we get angle(line_circle_tangent_point(Line(E, H), Circle(A, B, D)), center(Circle(A, B, D)), line_circle_tangent_point(Line(D, H), Circle(A, B, D))) == 2 * angle(line_circle_tangent_point(Line(E, H), Circle(A, B, D)), A, line_circle_tangent_point(Line(D, H), Circle(A, B, D))) mod 360
By angle_to_center on line_circle_tangent_point(Line(D, H), Circle(A, B, D)), A, line_circle_tangent_point(Line(E, H), Circle(A, B, D)), Circle(A, B, D) we get angle(line_circle_tangent_point(Line(D, H), Circle(A, B, D)), center(Circle(A, B, D)), line_circle_tangent_point(Line(E, H), Circle(A, B, D))) == 2 * angle(line_circle_tangent_point(Line(D, H), Circle(A, B, D)), A, line_circle_tangent_point(Line(E, H), Circle(A, B, D))) mod 360
By angle_to_center on line_circle_tangent_point(Line(D, H), Circle(A, B, D)), B, line_circle_tangent_point(Line(E, H), Circle(A, B, D)), Circle(A, B, D) we get angle(line_circle_tangent_point(Line(D, H), Circle(A, B, D)), center(Circle(A, B, D)), line_circle_tangent_point(Line(E, H), Circle(A, B, D))) == 2 * angle(line_circle_tangent_point(Line(D, H), Circle(A, B, D)), B, line_circle_tangent_point(Line(E, H), Circle(A, B, D))) mod 360
By angle_to_center on line_circle_tangent_point(Line(E, G), c), C, line_circle_tangent_point(Line(D, G), c), c we get angle(line_circle_tangent_point(Line(E, G), c), center(c), line_circle_tangent_point(Line(D, G), c)) == 2 * angle(line_circle_tangent_point(Line(E, G), c), C, line_circle_tangent_point(Line(D, G), c)) mod 360
By angle_to_center on line_circle_tangent_point(Line(E, G), c), F, line_circle_tangent_point(Line(D, G), c), c we get angle(line_circle_tangent_point(Line(E, G), c), center(c), line_circle_tangent_point(Line(D, G), c)) == 2 * angle(line_circle_tangent_point(Line(E, G), c), F, line_circle_tangent_point(Line(D, G), c)) mod 360
By angle_to_center on line_circle_tangent_point(Line(D, G), c), F, line_circle_tangent_point(Line(E, G), c), c we get angle(line_circle_tangent_point(Line(D, G), c), center(c), line_circle_tangent_point(Line(E, G), c)) == 2 * angle(line_circle_tangent_point(Line(D, G), c), F, line_circle_tangent_point(Line(E, G), c)) mod 360
By angle_to_center on line_circle_tangent_point(Line(E, H), Circle(A, B, D)), B, line_circle_tangent_point(Line(D, H), Circle(A, B, D)), Circle(A, B, D) we get angle(line_circle_tangent_point(Line(E, H), Circle(A, B, D)), center(Circle(A, B, D)), line_circle_tangent_point(Line(D, H), Circle(A, B, D))) == 2 * angle(line_circle_tangent_point(Line(E, H), Circle(A, B, D)), B, line_circle_tangent_point(Line(D, H), Circle(A, B, D))) mod 360
By angle_to_center on line_circle_tangent_point(Line(D, G), c), C, line_circle_tangent_point(Line(E, G), c), c we get angle(line_circle_tangent_point(Line(D, G), c), center(c), line_circle_tangent_point(Line(E, G), c)) == 2 * angle(line_circle_tangent_point(Line(D, G), c), C, line_circle_tangent_point(Line(E, G), c)) mod 360
By altitude_definition on orthocenter(A, C, I), midpoint(A, E), C, Line(G, I) we get Line(G, I) == altitude(orthocenter(A, C, I), C, midpoint(A, E))
By altitude_definition on orthocenter(A, C, G), C, A, Line(G, I) we get Line(G, I) == altitude(orthocenter(A, C, G), A, C)
By altitude_definition on orthocenter(A, C, I), I, A, f we get f == altitude(orthocenter(A, C, I), A, I)
By power_of_a_point_definition on F, I, D, Circle(D, E, G) we get log(distance(F, I)) + log(distance(D, F)) == log(power_of_a_point(F, Circle(D, E, G)))
By altitude_definition on G, midpoint(A, E), C, Line(G, I) we get Line(G, I) == altitude(G, C, midpoint(A, E))
By altitude_definition on orthocenter(A, C, G), E, C, Line(G, I) we get Line(G, I) == altitude(orthocenter(A, C, G), C, E)
By altitude_definition on G, H, F, Line(A, B) we get Line(A, B) == altitude(G, F, H)
By altitude_definition on orthocenter(A, C, I), I, C, altitude(A, C, I) we get altitude(A, C, I) == altitude(orthocenter(A, C, I), C, I)
By altitude_definition on orthocenter(A, C, I), midpoint(A, E), A, Line(G, I) we get Line(G, I) == altitude(orthocenter(A, C, I), A, midpoint(A, E))
By altitude_definition on I, midpoint(A, E), C, Line(G, I) we get Line(G, I) == altitude(I, C, midpoint(A, E))
By altitude_definition on orthocenter(A, C, I), E, C, Line(G, I) we get Line(G, I) == altitude(orthocenter(A, C, I), C, E)
By altitude_definition on orthocenter(A, C, G), projection(A, Line(C, F)), B, Line(C, F) we get Line(C, F) == altitude(orthocenter(A, C, G), B, projection(A, Line(C, F)))
By altitude_definition on orthocenter(A, C, G), projection(A, Line(C, F)), A, Line(C, F) we get Line(C, F) == altitude(orthocenter(A, C, G), A, projection(A, Line(C, F)))
By altitude_definition on B, H, F, Line(A, B) we get Line(A, B) == altitude(B, F, H)
By altitude_definition on orthocenter(A, C, G), A, B, Line(C, F) we get Line(C, F) == altitude(orthocenter(A, C, G), A, B)
By altitude_definition on orthocenter(A, C, I), E, A, Line(G, I) we get Line(G, I) == altitude(orthocenter(A, C, I), A, E)
By power_of_a_point_definition on A, I, D, Circle(D, E, G) we get log(distance(A, I)) + log(distance(A, D)) == log(power_of_a_point(A, Circle(D, E, G)))
By altitude_definition on orthocenter(A, C, I), F, A, f we get f == altitude(orthocenter(A, C, I), A, F)
By altitude_definition on orthocenter(A, C, I), I, D, f we get f == altitude(orthocenter(A, C, I), D, I)
By altitude_definition on orthocenter(A, C, I), A, D, f we get f == altitude(orthocenter(A, C, I), A, D)
By altitude_definition on orthocenter(A, C, G), A, G, Line(C, F) we get Line(C, F) == altitude(orthocenter(A, C, G), A, G)
By altitude_definition on orthocenter(A, C, I), I, F, f we get f == altitude(orthocenter(A, C, I), F, I)
By altitude_definition on orthocenter(A, C, G), midpoint(A, E), A, Line(G, I) we get Line(G, I) == altitude(orthocenter(A, C, G), A, midpoint(A, E))
By altitude_definition on orthocenter(A, C, G), E, A, Line(G, I) we get Line(G, I) == altitude(orthocenter(A, C, G), A, E)
By altitude_definition on orthocenter(A, C, G), midpoint(A, E), E, Line(G, I) we get Line(G, I) == altitude(orthocenter(A, C, G), E, midpoint(A, E))
By altitude_definition on orthocenter(A, C, I), F, D, f we get f == altitude(orthocenter(A, C, I), D, F)
By altitude_definition on orthocenter(A, C, I), midpoint(A, E), E, Line(G, I) we get Line(G, I) == altitude(orthocenter(A, C, I), E, midpoint(A, E))
By altitude_definition on A, H, F, Line(A, B) we get Line(A, B) == altitude(A, F, H)
By altitude_definition on B, C, midpoint(A, E), i we get i == altitude(B, C, midpoint(A, E))
By altitude_definition on orthocenter(A, C, I), C, A, Line(G, I) we get Line(G, I) == altitude(orthocenter(A, C, I), A, C)
By altitude_definition on orthocenter(A, C, G), midpoint(A, E), C, Line(G, I) we get Line(G, I) == altitude(orthocenter(A, C, G), C, midpoint(A, E))
By altitude_definition on orthocenter(A, C, G), G, C, altitude(A, C, G) we get altitude(A, C, G) == altitude(orthocenter(A, C, G), C, G)
By altitude_definition on F, C, midpoint(A, E), i we get i == altitude(F, C, midpoint(A, E))
By altitude_definition on orthocenter(A, C, G), G, projection(A, Line(C, F)), Line(C, F) we get Line(C, F) == altitude(orthocenter(A, C, G), G, projection(A, Line(C, F)))
By altitude_definition on orthocenter(A, C, G), B, G, Line(C, F) we get Line(C, F) == altitude(orthocenter(A, C, G), B, G)
By power_of_a_point_definition on H, F, C, c we get log(power_of_a_point(H, c)) == log(distance(F, H)) + log(distance(C, H))
By perpendicular_bisector_sufficient_conditions on E, D, G, H we get Line(G, H) == perpendicular_bisector(D, E)
By power_of_a_point_definition on midpoint(A, E), C, E, c we get log(power_of_a_point(midpoint(A, E), c)) == log(distance(C, midpoint(A, E))) + log(distance(E, midpoint(A, E)))
By power_of_a_point_definition on midpoint(A, E), I, G, Circle(D, E, G) we get log(power_of_a_point(midpoint(A, E), Circle(D, E, G))) == log(distance(I, midpoint(A, E))) + log(distance(G, midpoint(A, E)))
