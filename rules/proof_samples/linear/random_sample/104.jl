Assumptions:
A, B, C, D, E, F, G, H, I, J: Point
f, g, h, i, j, k: Line
c, d: Circle
distinct(A, B, C, D, E, F, G, H, I, J)
distinct(f, g, h, i, j, k)
distinct(c, d)
f == Line(A, B)
g == Line(B, C)
h == Line(A, C)
D == projection(A, g)
E == projection(B, h)
F == projection(C, f)
i == Line(A, D)
j == Line(B, E)
k == Line(C, F)
G == line_intersection(i, j)
H in k
c == Circle(A, G, H)
I in c
d == Circle(A, D, I)
J in g, d

Embedding:
B := {"x": "1.76851819326759684969374575302936136722564697265625", "y": "0.159734037403170658908635459738434292376041412353515625"}
A := {"x": "-0.5868794097042002722020015426096506416797637939453125", "y": "0.27186770349981437266961847853963263332843780517578125"}
f := {"point": {"x": "-0.5868794097042002722020015426096506416797637939453125", "y": "0.27186770349981437266961847853963263332843780517578125"}, "direction": {"x": "2.3553976029717971218957472956390120089054107666015625", "y": "-0.112133666096643713760983018801198340952396392822265625"}}
C := {"x": "-0.454804368529978686463977055609575472772121429443359375", "y": "0.92685660228691812978496500363689847290515899658203125"}
F := {"x": "-0.48621464553636865658579328468909682577607397071383816257707849031091647483700213015134395509573653815602371680822829365518867496754253579444395360262735527381034943784863392406229221655597782380017229422458798245645914153959783075442889240653180123534538688938695788442193009018597633898927587833849006881428513109201938209683238299085728441125652104174163141949737855901272221895468607829978538643513929168267467392660495969687285386295432511916120321367481159112931876493965844606889689810929162190396609073022358165662661163989774483762752508039777992118640658512701579893372416843624841567314888131106191192839032760014365687414820342258731769986413660413802189709814102555162396024165962544633590619464448988485507352395595218147289152459549818074374327701272934242176106702855314538992578387823896811780994415894659382780917521911269060146082265242359366669208660090527494783968257045370579821699351079295276663147647563982466814904467446137261064159066788269351633458560849862482351982202334780871056175103953410167057739830586811620593906866280212760916202159069275921423792539191978176991182687940184636775665083913128521547841215888865158881858000875912545859540226397984062860460802468070139643788340196656951518784034859958527079357371872419283609051602784211103763563518953238156953994667542301190291169995852858245413051808255752079420300437877960368111020915899062965068201509762730319612847093779811464238952476160931388894631819116019283184780899825724180878395706035481301478471865784534307507200462314234382403074184696667339334873904589524049932424370251061224850221308907269924310753305708316578160004464600255839695166204912826347560331737106967823096922584467320879401003408524806174382964101716986230302953315494182963800752205232284879785239347574640044485992518699098445751837846659958834387855261879010430114865280978516564949686454300351994317462131877669522113849322956014255508310468371034573400313681263230825177109346256338172944457350887656500974451914118951536282576", "y": "0.26707534528451726162879561919156710401097110707757300718477545363440302161607698080190187710331083221519406235287635538498602695980443611238861833433694644677693681820871771888739971065528212082418095340796903393045170297987291887083442129091571106888441307324408511013014795742584574833809841800204197265669401606788619541180186870323823701885889374632816275439845862986001041700693047706988595819501636082488030870264514481135606477040974014647474127111086660331731314556685340854812578915659019190226998440286276600335404423822484679791704096933142815845009164979786631099790833827974688818161744581982428168137144062523644607273813773695642100311171565285413627301939845273200309094972691419814702603194591789432174527834947107188061280923535349257409720634313390842314531535853040762126982183834182967746822430870584484595539052017262803135045335548439358455567871163093505284904591253238917406098734444256361511674942490748839468487445051651513613705391227542600613689441614857547533877349818557766100546437924921498329670935960240395290626411647964054483394986145881220730097023332701995972083413072081125032723610064381665290289972565410183099431732374278277183235055378650198634535397638457063100964060766799420295837642505756653389874420213630402549398962102650203705621534843049074584724211172740285716970457131031227541279507908268268598490764268014386825712593176972327918737026870554801430989906329435648680280719092268498505784670959219514929010598854483693814543105858761816061763177692551963031367693357821364948663527481660207252266481388081464075066542604330990482276031077024190294823600756077222604809469542484586621561235648682122954340218281011922608007906809355583880028485131837187411797151470272510541522097119082296122907499909608347162282363490743973976275349334903187988391897571424885359628443154584383562010685731923537913085331509590608447667371687848198624856304950692764818627833887626398711882479834893792970911388281197022385239657540289989209909065115897318898796"}
k := {"point": {"x": "-0.454804368529978686463977055609575472772121429443359375", "y": "0.92685660228691812978496500363689847290515899658203125"}, "direction": {"x": "-0.031410277006389970121816229079521353003952541270478787577078490310916474837002130151343955095736538156023716808228293655188674967542535794443953602627355273810349437848633924062292216555977823800172294224587982456459141539597830754428892406531801235345386889386957884421930090185976338989275878338490068814285131092019382096832382990857284411256521041741631419497378559012722218954686078299785386435139291682674673926604959696872853862954325119161203213674811591129318764939658446068896898109291621903966090730223581656626611639897744837627525080397779921186406585127015798933724168436248415673148881311061911928390327600143656874148203422587317699864136604138021897098141025551623960241659625446335906194644489884855073523955952181472891524595498180743743277012729342421761067028553145389925783878238968117809944158946593827809175219112690601460822652423593666692086600905274947839682570453705798216993510792952766631476475639824668149044674461372610641590667882693516334585608498624823519822023347808710561751039534101670577398305868116205939068662802127609162021590692759214237925391919781769911826879401846367756650839131285215478412158888651588818580008759125458595402263979840628604608024680701396437883401966569515187840348599585270793573718724192836090516027842111037635635189532381569539946675423011902911699958528582454130518082557520794203004378779603681110209158990629650682015097627303196128470937798114642389524761609313888946318191160192831847808998257241808783957060354813014784718657845343075072004623142343824030741846966673393348739045895240499324243702510612248502213089072699243107533057083165781600044646002558396951662049128263475603317371069678230969225844673208794010034085248061743829641017169862303029533154941829638007522052322848797852393475746400444859925186990984457518378466599588343878552618790104301148652809785165649496864543003519943174621318776695221138493229560142555083104683710345734003136812632308251771093462563381729444573508876565009744519141189515362825757", "y": "-0.65978125700240086815616938444533136889418788950445824281522454636559697838392301919809812289668916778480593764712364461501397304019556388761138166566305355322306318179128228111260028934471787917581904659203096606954829702012708112916557870908428893111558692675591488986985204257415425166190158199795802734330598393211380458819813129676176298114110625367183724560154137013998958299306952293011404180498363917511969129735485518864393522959025985352525872888913339668268685443314659145187421084340980809773001559713723399664595576177515320208295903066857184154990835020213368900209166172025311181838255418017571831862855937476355392726186226304357899688828434714586372698060154726799690905027308580185297396805408210567825472165052892811938719076464650742590279365686609157685468464146959237873017816165817032253177569129415515404460947982737196864954664451560641544432128836906494715095408746761082593901265555743638488325057509251160531512554948348486386294608772457399386310558385142452466122650181442233899453562075078501670329064039759604709373588352035945516605013854118779269902976667298004027916586927918874967276389935618334709710027434589816900568267625721722816764944621349801365464602361542936899035939233200579704162357494243346610125579786369597450601037897349796294378465156950925415275788827259714283029542868968772458720492091731731401509235731985613174287406823027672081262973129445198569010093670564351319719280907731501494215329040780485070989401145516306185456894141238183938236822307448036968632306642178635051336472518339792747733518611918535924933457395669009517723968922975809705176399243922777395190530457515413378438764351317877045659781718988077391992093190644416119971514868162812588202848529727489458477902880917703877092500090391652837717636509256026023724650665096812011608102428575114640371556845415616437989314268076462086914668490409391552332628312151801375143695049307235181372166112373601288117520165106207029088611718802977614760342459710010790090934884102681101204"}}
h := {"point": {"x": "-0.5868794097042002722020015426096506416797637939453125", "y": "0.27186770349981437266961847853963263332843780517578125"}, "direction": {"x": "0.132075041174221585738024487000075168907642364501953125", "y": "0.65498889878710375711534652509726583957672119140625"}}
E := {"x": "-0.51657725011629815973756448151873924133253418718684315658599807793696798079615406794707658863929439678939022444465243333570154328676604086427227300517081786876859987044466580916880894438459678780440442047332631557066763828773293795466756654245969257047536591791785736583551381508110535867848155773376352033459659145638315410774909597507433936480686547642621303252284887703821092249817474579938720943646956882756799861440956529237597165848968373773888969415461236250912393363853429296613736326715392018904011855657582295989170080283776063544032070040442905538099630490626281907848665877195628887926881689093057841273754674904944535242651740916218254367437142379114399126106119655882204313648204879885740849264582819144992801213103702831622016606949992381752982911384482831254032860603500261323796534131116232971149793515616433503113279461263036768215800464998291895616583984280112737545224217654006856999456356272954229809473587933516332547286684891567888531812382875759243276071157498302856130570612876063402193638809478420186500443382167919295727440813206750548940019155853219982272772789307667503434569182438825172079104673189537277776004456829935450373675286639418653853281979703717319287628159567567124178358206635450722905713202806818985828387511646024418380470374561302911968214486512354144736235420010474800858339701939064858479513224995786865238153554652168757842468843996689457183335974022302018125299173353464020125701387881380180849765592919502797863026201878957972267542941149011234679283229741316452416094982141919155732791170838350527158881536624704317145246711246486781919216716120586667163659930069363338509489840789662931166995368079739793058910309253298128198356687605622369028096588858248492940142619924662008273224622678448779285136591431413741357773084347514298004669112886075336701258120809664869281566064302114196316786304126492377414643438634515538518665538586470569153186844135633393929781602428656039789881180943706001177955689540928321175894415148764709352059325025272780041", "y": "0.62051142665484992866263179053123929809913420661257175891297829586984356170895591354753457187621138428636645787623632569966024587900672661611924263322051379666538174909229391400405131829864279290587340449888113355074261474055316924586573813567530696057865360693760433749697918169149885515357584984531815518956733696135502497651078692199176676308768395105892461732868529762909625590326870281417585736783945337977984505265146699146313059639511542297369020034651256194540302676634505903973475718505370099899164829579270315711301958408771202312403230971120007537647752288621131303028867009518157065299015759944812450692171404353003564630559758899771529191458407577917168646532971862944099133131472995737031568172130054906229648720661024187059263879469162020878386142686149835576475000505321780596067589641004445551791318156799913411168111461700433294083841059953803036515688635258834511522581233933741768445890634735571933539733898699536762185142189938478858719270254218346385245270681094269766062424694638665076159255591561532521510685509866389454471779030925174691866169749925980589369527079026903972033995907791559703707753034192643676068337254055713110481052680626286452572779176267205841135101650159127651973159481067570890749115046979329076743214051186850457144381945937891993877083334210506290146087808544586786097286300423456020392414488514097352979481103501302140154777958025962835168686504805075048751620809246453093233033548277346603688646396298647809544123612218965146027085420152324607100527120126043354515722939436312695444515337615345634322301738921978215342959095556817415928307161654046782560241135384809134989552206302817557131452779604238119390542387318681561006556855090137934983914030374328893453458180134731167721666993091031047841361229283571606839839817894887946363617913676653371112166419287528545036696391750962734954990186193328306137151987246747884154664793952929656501763950573412900103125927007124634252284288445091149824084043597586300249044996402446726071985801481449626786"}
j := {"point": {"x": "1.76851819326759684969374575302936136722564697265625", "y": "0.159734037403170658908635459738434292376041412353515625"}, "direction": {"x": "-2.2850954433838950094313102345481006085581811598430931565859980779369679807961540679470765886392943967893902244446524333357015432867660408642722730051708178687685998704446658091688089443845967878044044204733263155706676382877329379546675665424596925704753659179178573658355138150811053586784815577337635203345965914563831541077490959750743393648068654764262130325228488770382109224981747457993872094364695688275679986144095652923759716584896837377388896941546123625091239336385342929661373632671539201890401185565758229598917008028377606354403207004044290553809963049062628190784866587719562888792688168909305784127375467490494453524265174091621825436743714237911439912610611965588220431364820487988574084926458281914499280121310370283162201660694999238175298291138448283125403286060350026132379653413111623297114979351561643350311327946126303676821580046499829189561658398428011273754522421765400685699945635627295422980947358793351633254728668489156788853181238287575924327607115749830285613057061287606340219363880947842018650044338216791929572744081320675054894001915585321998227277278930766750343456918243882517207910467318953727777600445682993545037367528663941865385328197970371731928762815956756712417835820663545072290571320280681898582838751164602441838047037456130291196821448651235414473623542001047480085833970193906485847951322499578686523815355465216875784246884399668945718333597402230201812529917335346402012570138788138018084976559291950279786302620187895797226754294114901123467928322974131645241609498214191915573279117083835052715888153662470431714524671124648678191921671612058666716365993006936333850948984078966293116699536807973979305891030925329812819835668760562236902809658885824849294014261992466200827322462267844877928513659143141374135777308434751429800466911288607533670125812080966486928156606430211419631678630412649237741464343863451553851866553858647056915318684413563339392978160242865603978988118094370600117795568954092832117589441514876470935205932502527278004", "y": "0.46077738925167926975399633079280500572309279425905613391297829586984356170895591354753457187621138428636645787623632569966024587900672661611924263322051379666538174909229391400405131829864279290587340449888113355074261474055316924586573813567530696057865360693760433749697918169149885515357584984531815518956733696135502497651078692199176676308768395105892461732868529762909625590326870281417585736783945337977984505265146699146313059639511542297369020034651256194540302676634505903973475718505370099899164829579270315711301958408771202312403230971120007537647752288621131303028867009518157065299015759944812450692171404353003564630559758899771529191458407577917168646532971862944099133131472995737031568172130054906229648720661024187059263879469162020878386142686149835576475000505321780596067589641004445551791318156799913411168111461700433294083841059953803036515688635258834511522581233933741768445890634735571933539733898699536762185142189938478858719270254218346385245270681094269766062424694638665076159255591561532521510685509866389454471779030925174691866169749925980589369527079026903972033995907791559703707753034192643676068337254055713110481052680626286452572779176267205841135101650159127651973159481067570890749115046979329076743214051186850457144381945937891993877083334210506290146087808544586786097286300423456020392414488514097352979481103501302140154777958025962835168686504805075048751620809246453093233033548277346603688646396298647809544123612218965146027085420152324607100527120126043354515722939436312695444515337615345634322301738921978215342959095556817415928307161654046782560241135384809134989552206302817557131452779604238119390542387318681561006556855090137934983914030374328893453458180134731167721666993091031047841361229283571606839839817894887946363617913676653371112166419287528545036696391750962734954990186193328306137151987246747884154664793952929656501763950573412900103125927007124634252284288445091149824084043597586300249044996402446726071985801481449626786"}}
g := {"point": {"x": "1.76851819326759684969374575302936136722564697265625", "y": "0.159734037403170658908635459738434292376041412353515625"}, "direction": {"x": "-2.223322561797575536157722808638936839997768402099609375", "y": "0.767122564883747470876329543898464180529117584228515625"}}
D := {"x": "-0.37087718701969729471736887081624373764552770182813146238375949004286143965955191516740094673601941906565268566531699249351172818104874316815451762835546631817390370756562260907648877620328366203516544500498507261400719651407358973340030108389333238979179638169051144605355844251560240395738844896757940116153550663275996060934652699658619793315931502816931002872021523203275260529477457234844054770461790504457917794289447915321252932095399411976676060703984009611078526232550031390208964180011609429573094668790490824221440155972935333645749640875115820613386358126791753891251480598998745184477399066017647933447775611754386060324753018591024170563671511034814624057789585276199574209153160995210331826080281928800310326464662635102642073156539730751381166215105245568413166509400996698442225713930964593977486508423238196332389816546952300377483919445512683616218663323860398487275434137245271516543003387679995880781643376595477811802857483906702873328698408714906522769628313371806001274634580165891852107124412605362903408483616329022466616294900383867423849480094445087405505361311476937412266674298407463745522827256495089796964742551340182562202823290614958320444147023797777101936815997666902909239337203718432422103636119502839452467353563865788115485828825630426086050004566373964299056989863108303081616017337232750607875738988013357349390860723469646729084556339020315171334102758646003908555704319224943653311547974834766239877569262823924943514855844028904300083418380848935508417921326841924067322417142309080138937397932972763292454596910871642172917721638901199610212909817985446274581961120932753750625345085867484671218873190482295107386249571624201066789834661555169878151314362374472957211070480837829369325274742826199896732185835456892784668656887518947449653638608390989562037621332560268203687260986429425970040229611351217604665535537439032865205225863194035749135520338696988529248041271681516381953431769243935381037892203395050311697337077159664318215433464764956145144", "y": "0.89789884516706183137409225289395167150996971931674954541325842609001926092335927469693270951668277716499906248291826656330976768005212381085100503510193282534913618777999489724495977742512372301180732016231495849545347882872353292049780468568692697872746592527126862980711170251403700757267294633963797446795707771558239588225279534932517115784403482874076657888646538239669131712840510068356741546535863624581782194754047321346771080043318587786628608695873983049131364808082131733269481642292557977758487496687587104383790404532305908326508126950241837506742568601438346088348347177065514690470518771005890886277007314032696644800955732280135719465621755946844482922615092175832528638454469325161105865235120830360548669010195458230070887518577479376997240464044784935414455783403780802846549482058001815335595343965310823626183931547909431240539593207607064971146753676320490973113578981017694097128939572807449050630210174474182654953992577712700531975029723691351839378344766309396771235418411463814806194714255575867094989769313404290906987303118326407182904749486982531622857359064852020044361136188758827858540182904674810753481838276029943849896147975172873246514583414993403090029783644723838114958240546362547699629926031299407783921881586653541756352612467354580371707028248346773558462071415037741119270902353990931645173096615602951026941043895121464821263568190549815593729632373297822092844716568050989585463555627529525632067378238723609725025216188006278012402677737415824042498231171688964524891518495695389068133823465692610699669631714623698872991776211764454814765517175289761160973609113339726528672582473311411026613045880800836735346972553740430905067819971322097099217918283673163285414890874125357788861107431853520292800976945377276969029478425712844365465047164625866762552952632316635683450145534392007502501752452456378370243551812421781935498952423119519909344874608943783419896648198135491375193315663632096853965939719059759997571556820966408573216674154852546262443"}
i := {"point": {"x": "-0.5868794097042002722020015426096506416797637939453125", "y": "0.27186770349981437266961847853963263332843780517578125"}, "direction": {"x": "0.21600222268450297748463267179340690403423609211718103761624050995713856034044808483259905326398058093434731433468300750648827181895125683184548237164453368182609629243437739092351122379671633796483455499501492738599280348592641026659969891610666761020820361830948855394644155748439759604261155103242059883846449336724003939065347300341380206684068497183068997127978476796724739470522542765155945229538209495542082205710552084678747067904600588023323939296015990388921473767449968609791035819988390570426905331209509175778559844027064666354250359124884179386613641873208246108748519401001254815522600933982352066552224388245613939675246981408975829436328488965185375942210414723800425790846839004789668173919718071199689673535337364897357926843460269248618833784894754431586833490599003301557774286069035406022513491576761803667610183453047699622516080554487316383781336676139601512724565862754728483456996612320004119218356623404522188197142516093297126671301591285093477230371686628193998725365419834108147892875587394637096591516383670977533383705099616132576150519905554912594494638688523062587733325701592536254477172743504910203035257448659817437797176709385041679555852976202222898063184002333097090760662796281567577896363880497160547532646436134211884514171174369573913949995433626035700943010136891696918383982662767249392124261011986642650609139276530353270915443660979684828665897241353996091444295680775056346688452025165233760122430737176075056485144155971095699916581619151064491582078673158075932677582857690919861062602067027236707545403089128357827082278361098800389787090182014553725418038879067246249374654914132515328781126809517704892613750428375798933210165338444830121848685637625527042788929519162170630674725257173800103267814164543107215331343112481052550346361391609010437962378667439731796312739013570574029959770388648782395334464462560967134794774136805964250864479661303011470751958728318483618046568230756064618962107796604949688302662922840335681784566535235043854856", "y": "0.62603114166724745870447377435431903818153191414096829541325842609001926092335927469693270951668277716499906248291826656330976768005212381085100503510193282534913618777999489724495977742512372301180732016231495849545347882872353292049780468568692697872746592527126862980711170251403700757267294633963797446795707771558239588225279534932517115784403482874076657888646538239669131712840510068356741546535863624581782194754047321346771080043318587786628608695873983049131364808082131733269481642292557977758487496687587104383790404532305908326508126950241837506742568601438346088348347177065514690470518771005890886277007314032696644800955732280135719465621755946844482922615092175832528638454469325161105865235120830360548669010195458230070887518577479376997240464044784935414455783403780802846549482058001815335595343965310823626183931547909431240539593207607064971146753676320490973113578981017694097128939572807449050630210174474182654953992577712700531975029723691351839378344766309396771235418411463814806194714255575867094989769313404290906987303118326407182904749486982531622857359064852020044361136188758827858540182904674810753481838276029943849896147975172873246514583414993403090029783644723838114958240546362547699629926031299407783921881586653541756352612467354580371707028248346773558462071415037741119270902353990931645173096615602951026941043895121464821263568190549815593729632373297822092844716568050989585463555627529525632067378238723609725025216188006278012402677737415824042498231171688964524891518495695389068133823465692610699669631714623698872991776211764454814765517175289761160973609113339726528672582473311411026613045880800836735346972553740430905067819971322097099217918283673163285414890874125357788861107431853520292800976945377276969029478425712844365465047164625866762552952632316635683450145534392007502501752452456378370243551812421781935498952423119519909344874608943783419896648198135491375193315663632096853965939719059759997571556820966408573216674154852546262443"}}
H := {"x": "-0.6755272716469153181975779131112367489605066423017723059204144751250919132994569542547090526363150414345352265936667566994989055508581286493817117925509542353406711056149234927793173079472983442436958400306398929285028037305236493656142207426802979164181796286159340193819731695192656778100091311637549003621214087876843396349905367717734954595368510177833340498269615961827935524770529940743614642883341900741485075270202758966140505603497390858457054192102871067587501748183769885850981241580316667779779351024058741953192907765032708358213735507048997275046554006439779957589984953850543718695047927143118002307977578461008677457282811924076744074623696466353162497032677178941689125891804909135156163920847263544489906070746758106057305874179554000385522196707415085658339603368928401924703923144710184796295320325966956789229112343271359112581967906854811080180541539003928301264808539007588245515588740217847723155448511368245531717920535368925650933624986326630386821065801456402037792113309520209887523907913192340818916176698657331120622338405177851262657224194582401459899662757312393961035643851300647205841724155663825957735168590995543112222214931825463907693599232463589260219914222580240153976350394958638639910277130999193354135539117873067716652169362911449098537117382588628220248614071601890486287964976616182241992222904708297843940490732531703680265055659643727659377899497336811626905008799685161124178781002155286902584769823762224369408206201277682166602931033340372882850360116416043936227487277449936572269403098357723156690082201040891243232862809074364366189189066733956036642308032815989099111648504597671293248536355403076604903864892284831044335800517442452080460851942507772468309226884632850304961850172246952438811636184524731637675839739885326011212850558599391845603566843400041015719045710854229825153504182279407135362886594629920635013437314158166292912916634101392498085530400525410370170452928334267726166198329351996777367116366761428137729256963407320289846", "y": "-3.709486924326537041413808918638090070114019172983462654518706917791416620457391411629701668443325810523875410004701659712890930368778289933942671764384723946073261333201559761728611972776605825439632374175384359611445315707744769919682948038139441812869451717413790911857486293916352926667104481335105074046110591619033757243658584667608757859267003504873793671951218185464617735803445251075710973972563721644162576700364916824756459192799873262723107247091635244337628771909322473336784576301933975828556647562855137759660148662602227218936686086115198447304812558824820943937703791442442550744308988416090694271418942528965987284282281884906907014003825914096104244032493253922973364024070076094762928467190045924687271979430875317796005472257008960903557307660701632932960995147384173483385522136692846956224360631259847191345499482653493581561085528558907141435114566889588797393989728216667603037630952874639541938829941318469482871261378927073541338094264583776763915505617224736665171114282744089986511635963508007558810319612823052795121480858738252305003828038693809991021360790524073618582963341101455410528829576141868666363765129243302342448757212873209956220237617737412728761592546234774144837658468747493520977256116582540683076554803449011823979065010844340145094078044315329005408895369616113165945166034772182890194799354715772780794654822255865045711166075265590437919664137397602999767664737189409148305086770472033696761620637491398740654393014087825921763685162186446592220596105007100704719874276011606255715669450826599151864305038701461821516118673563752038791673029842322096715605485059835024070386307109701730271117450871561385608522644576509860894200471022885042256899025465250284459851571978446584892785116043435237257410070003687433143372702427090152052665402164063833714879715921615081279418891664481596640840380112198162250945061317937415763301282064910172490646631701182619656240275727565199503293555718496549232589061423093789309288181133833164667813323837183826431"}
G := {"x": "-0.46983726692995722746826040120416282604523869533618460759005949460426676100203522729047601750165819230962861128886391806221205494699765331481444549068032214325130920105241837400945399178904762317318887968263483744717765950590221231110307693030249046436808244861614775238007029688651849049946988185077613282475978114714037129672032233815631245973697557946771907252419136754765951685224880523471790562678862979459056185821204974813840430068159331261424174084242606326649488889549080666590325783115382866245674714603288953313687633351348211267665929151340363730250455275724663787788746010362440178484051535433784606234025942310415668957281606730706542125288540996817220464702197788176373688063429662719409777221228312115400851685709782890253429963869194027164507939406126075076804973637456459094522444982923775495929145289964904482612475783924476467517560726497266647434110413728012765938868590939025705870364998237964167323138257753841018519646206776390993972190837497845060253434832922645464530868900139678514716917356319197118741426327817650941784808979024878323122138140399066339031600656461358378056673655600099295382873580459037916926938671475681566526936448477375252909309234972735848046853995665482023125088141464681471064152222315880903896818348607579203824243447404323850766886780196141029435911231144053043905263505366051314928868534490376507557380592927521008274317660372743928735446495052112463046387406425550272340613727550194895422628194294891741703200613662900160951335818402119409401216414590586383015885739893080112377907703524836970947770109687592668106595787182314735338890357499170971302999232734336511427647443615942971008629283574421651726611258152655824758059647093480688639163911426249621760858975697389011290596114654645443084614300662710235749666970724363505504425307250234968514331926070344564083523739141028488953905556174130643543243638347344982591020726698146621787885293461131420149710269305303519871955679552179526936319773970154597574666379104164443691625343784915758915", "y": "0.611086556683389660197624169826339118736749859674337083364551256891775793507311610739384798639385845396696517530290529156616981475678161028736390908687633084610723855615134139863971031758646298933621551480314772402093560886225829094434862304699584043326528663055806077404433749697887298506818556178074033690838494712171074356047287302513864235554602455357571292098405570392698126059755425670597264591433585500596283435059437288482495778856497813597606981277916065084225320343681352096302469567000419726563993731048070552397179485453117629337380235730010336340297096242596379951160326352485452691110093762442172202456207895590624023827569612461526268284773400246716268001950436935706141317489908648898667372926199807776753816467512736722700525502710930069547120372809465267026950446908423554960382819337874696036949933592147510611552109588396799708025929507099364958429879192046472429659438049998064047182640769574908422760077665646221257756979481494225132592683549785330207431490890232872288860303722933920433931509810570489545433005923655778618056355710379110796308050775390160362622102943318838014843132151300498830416630900324833112803927194736066672505366891042258931752074964257390182890079464033984833503638646046584458771052550144217544221511905969609367289668948465433071036065541101562178095969535604657892955602334294605204856338593489385854954092800270460784957051497289679630477422460860151326591427248898474919486103843739314829286741508717924157199370502946285226757153567790106007010441432725013989188741853292352059919292720943197766912334071263207404882991212483874874636163778624479476505683692239854637962510573530116536732558990946683381600670947734841043141860262559037805394712355174822563241044065784523196596732779118412782813049533563792712344975766992587718626969219001418327270132061534155104574045639586185014825664455297012416767172305201751774951683438890007076467633192618793594868041686937589896457990541869209038711605182205675247154111792012308889868908620298441464"}
c := {"center": {"x": "6.1717263629273660216496782942144125369870318239428255177248644392028175142994410136420604321823984429076856943555680409688939725265011733425927772546598389283743453994737908129952730041054761884134055601586825812764111702470488938444484615348487547678159587756919261238099648515567407547502650590746119335876201094264298143516398388309218437701315122102661404637379043162261702415738755973826410471866056851027047190708939751259307978496592033436928791295787869683667525555522545966670483710844230856687716264269835552334315618332432589436616703542432981813487477236213766810610562699481877991075797423228310769688298702884479216552135919663464672893735572950159138976764890110591181315596828516864029511138938584394229957415714510855487328501806540298641774603029693696246159751318127177045273877750853811225203542735501754775869376210803776176624121963675136667628294479313599361703056570453048714706481750088101791633843087112307949074017689661180450301390458125107746987328258353867726773456554993016074264154132184040144062928683609117452910759551048756083843893092980046683048419967176932081097166317219995035230856320977048104153653066426215921673653177576131237354534538251363207597657300216725898843745592926765926446792388884205954805159082569621039808787827629783807461655660990192948528204438442797347804736824731697434253556573275481174622130970353623949586284116981362803563227675247394376847680629678722486382969313622490255228868590285255412914839969316854991952433209079894029529939179270470680849205713005345994381104614823758151452611494515620366594670210640884263233055482125041451434850038363283174428617627819202851449568535821278917413669437092367208762097017645325965568041804428687518911957051215130549435470194267267727845769284966864488212516651463781824724778734637488251574283403696482771795823813042948575552304722191293467822837818082632750870448963665092668910605735326943428992514486534734824006402216022391023653184011301492270121266681044791777815418732810754212054", "y": "-1.870281968327942546830640407983311603683844335713143666637233312316677633027003029709828541460946725739151741234854735421691509262160919485631804545656183457694638072192432930068014484120676850533189224259842613798953219556887085452782568847650207978336735668472096961297783125151056350746590721910962983154580752643914462821976356348743067882222698772321214353950797214803650936970122287164701367704283207249701858282470281355758752110571751093201196509361041967457887339828159323951848765216499790136718003134475964723801410257273441185331309882134994831829851451878701810024419836823757273654444953118778913898771896052204687988086215193769236865857613299876641865999024781532146929341255045675550666313536900096111623091766243631638649737248644534965226439813595267366486524776545788222519808590331062651981525033203926244694223945205801600145987035246450317520785060403976763785170280975000967976408679615212545788619961167176889371121510259252887433703658225107334896284254554883563855569848138533039783034245094714755227283497038172110690971822144810444601845974612304919818688948528340580992578433924349750584791684549837583443598036402631966663747316554478870534123962517871304908554960267983007583248180676976707770614473724927891227889244047015195316355165525767283464481967229449218910952015232197671053522198832852697397571830703255307072522953599864769607521474251355160184761288769569924336704286375550762540256948078130342585356629245641037921400314748526857386621423216104946996494779283637493005405629073353823970040353639528401116543832964368396297558504393758062562681918110687760261747158153880072681018744713234941731633720504526658309199664526132579478429069868720481097302643822412588718379477967107738401701633610440793608593475233218103643827512116503706140686515390499290836364933969232922447712977180206907492587167772351493791616413847399124112524158280554996461766183403690603202565979156531205051771004729065395480644197408897162376422944103993845555065545689850779268"}, "radius_squared": "50.267557206360497849688186531780270233123017014505717752219979842249225969157034957399894090223989003377597242402161497287591879568519244362865404117052143988048199123492274954442866369690876415576386962906008587148819252490684757335760063651880420783953878608360582675704010671109374470425496020161451283649973656468878270976331174516299997740054690210398272368856961260421846398838511112701570863914841442505132786992915594307404186016134268372216157122873237415635485812414094774841102069762570942378919534905503322837628497183143921991916673291312895700556975949412782606811056813798453749228481345399410098772502490238648270416177101693969876152988593839004271534210814983636227925729967340583970644066860688014962972617441462017413363137698578318884332433147331012015386546308524525318171690882316165728833785567243510375896848989852428541807018840697867711732005143644161370677289428217980123677309812368628458857231792144845589057390095166502051894562591392251018716103822146046266146443915409969759383027163498341099010114724714084741077319475789322482534035428461748474804640577110988847233921970990161105273181715818059954725993553416583596750267260057359018162222124194834298877826266181494901274128627233997938822555319290788939007498249456504369419076001939518211622342277109288216419518201572564739959492555730418816135081780952535693731096394729935038055941060726382110711834520175452648787893864889595963584088615382301690057622531942557884690252447633726321800918937297206874429690055192049465062469794017453108946697194076928605548091934582666857384274821121498960670718167576409220172818558997710296670028785251176107160581729004290806227180781305749803401094841296714602126871545399907916322701660652704971346672218970456757182532839429828643361308351644285331383894692176624080325000164018668018778906487133942201652849243942740117930012547889459240931511338390081180663838780996356776536082003272762666895683638191775911732026222834152511401646064628898273412109199259046653013"}
I := {"x": "9.1706609309855298889350651005109109287220126042703991565180115753494781185241830275148710420788908771705555059262575326569575254275954233330997593445987237247303109746159130520340400578109975667566506111358802652381903460762751907983170070240672141998807174376865893856655754193957999123203864648279794280814459665725699119215744482955740380169427929615694889456002051996625010105842020937666310799258003413039457798566864610576076272556797931570413002369619102396550974417338460780319898072777520862230278058957166013210399015937112652977722125767502572545931073737138188458913805816062017404484969670326893182011777024218384391809319379721398063386921400743583542627569151685418403455167746144289966513893473789296318661982217798786713140214663007159339747807716869339336631824254181884317707951730434992277445360644755203844030936736956509106729466519358358930656823466013662141014957038344512361586053159191439623238565193929793249988392582703128595768923262328279471647938350790025343574789848875634334180917685434458968386039679789493835608875258997860168945077510189382150931172991544354896268331806798398790734344044066086536741898641582258289301085847373058690049582109646200875495247776227326249918244056227705900140563532208780097513968483160972882066269989777279244297424566164147905993281057040915145919294962166676026293642775655301772384165984136766274800079080715883962235227600513963563151976891100193933231912075090687113634252519813071799030681673900449282124947900443782288595390203259441226218777399963233937032016739395099562609891369793517952411891276747192865613095942666082034141710598056627539215162649640136228560846216468910396076128873045607224924829835991880129128818752156689517330158756166322043540059291432449163357050203007762682020164528045500289163923256839913474174005610336710326379177017613463066781659099962071946355884823643075877522021079259400361383292698597390999653163989700915686681638793444130582120922927150202181417206155941416076428637740634726306858", "y": "-8.294762388009077504757845589811791265030382971738955777937669643252280531354912090806308407330219129535571434420233941416788000735806542675407920571476565699625880211103286006707773830578639414741705069233966675182695243548415059423689472855877029311012366636701584884706741014715741214587142485784786377603979439805060023586964194863875172197346476442783734243999047759363674971446749993686601811247276703241296343338930594140121056248511638385188587238107326718285112021608833051003477541486351764228448049059765268381454267537168628681730035804210937324706810217696734598871153917847437098141867934312939765539385843431653069205291196549384575433671625096258835073189950117675741427446161728413848419891086170628546964165461966450434589909152239404700367118094280649302404931053570612094860369010457478562359948814607214389370206970449464930711903659409664157888481041894492480727616817492750376970396143683044878045482838883296301209018114367898180730385792978531672380493831541847583648210635477392512550534458070576118760408562241187457557734629190182909860203276143473474990592600149140189416896863201550124204694784742512345679233101541934400651651121344641175655515181762081911713036412701155186645324841023700070764722500176823646264624478010723969689517921474559457092878289084250261753744059363557037252654240405100102278320934011992271634186203972990317752729749452359644911420291536777279373495270425496567438793066846561508181818932980663608200649931135466608132856161488775480072312879952716025934797698134256320953562610314873798759096604112660289168188698665799655109003928755811657080845100237682359498028650289619656502808512878882953030647194444533122589805844415444903603632217249154522696246765108492842521377802167040970251851882481794080948654600497101319167713683230459401025372242681721103515335546395302768207264583568404308866380506598216437038647293256479694015035276623345474700973374796854441833394219001578896507532559201627836341933399314930171353513410417770214502"}
d := {"center": {"x": "6.2798617193941452588429261282762693580897691661271257114387773625126963926993938307141601688244111316745391522580217870913998404010242797646659400836113322504846223677788957749484367606077468653068984849044866326726448020133239243472434955041567354203051949548606859559393483958448024850475384043140773180638705984544554309515826249658795712208143778262843509741684542220776333869821277932070054478419499109297961120946644714539048757528813410250096109920077620527857992250009801583437154834737569025569072108041523875666559877149270744163184507158274678488641184701144270976293777867031745666943140251520846703474366785079312778495220995018684305106272395333086426754523317092323330902089090596373346314740233261064405373651820631193509586719245386460805130894203715176132155841178273877609653063241480942025684741980591719479745737211667077661045319709399261836038996748674669435309076529180462815827858960157933307297468524246140586846821958414037436988590533919611166473060494779692724937218608440268228225302599566023456911303893731963751991631470198405956468768164011031198429392572044620555529397327825690661176827978847509310395639316126811641873857821119154651678352947915413977870825726755830579266717248537985106903686397782761947435267389990438677092283796479164566796348189488558670166940132645861615508480581533532091023698999957529765140541482421694346008872551192949602156201696923505331286213029221133096184989369749244956085435504617685981418552479249529121740883418393015900208737640973543869207923129568754383533979574674814762204203934916046072913640967406349145727052344345085268480280807021432463916856458769111644618450773258903478858490775533506054551828201871813986973043021552471231302906494949748317123991364006893653385183307171827489929748992602331431740081356217816519673409916737955970445337192273421934447669517164153591923973917410721723492547963566176692168420103844341588401879402137669862465690464280960894442734301288797674010531443839922277824152084723250567948", "y": "-1.7471139207166308709428488592034438196750472353591306952650104708787471105470053275864846959143343934455996862559534779301629024734402313492900955956974459329793312914570837064133498019933648312243936195026983879881670924437905570503566851685363769379586351350636255717137134089890540024684139675934089319928389119000233257564178482827823686302061830969165340466676352375535276794166413771567546214440624366060050333271988918217804818873299466198202937107352488673665824957723018734737199010486284516874983596359198995706211097484172386343972126838679262618388865356262412968715458544693250484812378792405207554437882115706949417296011636612632020941319610262310744448373911266949685023243243450746093449229294145106733941654607046523142694822840046715205492678908106246487138855750252937572977513244293052661207207546568006551440349620655313557119257528283907130230950236498673062522802758241878298832952806827433366027933997320305143526446962853459435961980341105492083120617705404742281719700017038131658730372334991685130700253451926324413728051721387491910424504432599936385117329162703973388153112603128972004569761279347143615030038683723858522383905499151412230738076859186563262731204982203848226656245857909686925664418458495627526608425405099514937438825332223329040580741807751461330724157571247299454610133557309233993674127726811905330784913437631335286118927250861712617012244766019913580461900741756866179689761354290758829473425976447129982104886699780521361808568765505692833027729835842220737440611699088180980967530227037638313610964999933988297247044202704760374143412278207332668233572627842103627894395664881763558990774382507450654728955006998378183315549174172017612650273668483599715853593910162859408636059720213638045440692816377454111850556069178735558114324028523942844379297171302011110660078834611386477381379058098140810731585014844124028285988255069788161059376205390923209398964929411960912399116003291710316725015295779826288311353922273154676131891032514738613543"}, "radius_squared": "51.228420532974496561727172620370960607696116135589686485389549099473869056056785494752621619436734339782839281041837586209122814870204545232595207016319850288521037100161325741485813720905510962283385719438775572619966101434600340862793079041918905413854268931028902329321827303198788769763778600518758595841023112817344873908291791085888478195943143395638146066369020247384347656769706372827084682451766858128548023696436918127491110436117706818028885477993179379741303844065496577523085456692015923693006629250290107083154469525707275336313393050795703134359368332475972237029100444235722055128427062831404572308554628982637881058027413383085140557150868062432308969276009783894622112882248085580402558249176042343817138793407120791187188445485407319229607303384120436135844214720844254747413127700787163385725953424419268143876526675261744694521731263713179433277573217432996347138552616777268926057116263487215209540891023948447715618282085785933259181273240016448980911881184992749918820408710206453170916083218596238525993233968770779602221564356329405219178419362265909211762185864134246322600679190894531058817038445034449903820724644205784736293489823584958061630794609472813035999813892908920380311351112362837548550895958793589636269720896749155096205786118153556604177776143192951663075584331482793797752705381110353558526731350445025311935073277453152713024451586625918846198172430177921426732445457461555304015834815306666714900067497880198413128742968298219345778089290429488316184665467957690058993145377208147194480277608881168161118422234530837348466883234587683640800273050270290533346385080630296064214088802972450857886432146963120321267692818121298656698514411375755259121148977019274065849055032045765226029318688162537934933807775274580780450261418437159508071928188108729526763287013761657572758330532412130317005747569899694537911572313433067820524392945248367825876117562286779857383439488816938199067838066764515947137295586644307733196530705543637678167718337200004530687"}
J := {"x": "13.14660284849249078988785379916218935785930212619956392287755472502539278539878766142832033764882226334907830451604357418279968080204855952933188016722266450096924473555779154989687352121549373061379696980897326534528960402664784869448699100831347084061038990972137191187869679168960497009507680862815463612774119690891086190316524993175914244162875565256870194833690844415526677396425558641401089568389982185959222418932894290780975150576268205001922198401552410557159845000196031668743096694751380511381442160830477513331197542985414883263690143165493569772823694022885419525875557340634913338862805030416934069487335701586255569904419900373686102125447906661728535090466341846466618041781811927466926294804665221288107473036412623870191734384907729216102617884074303522643116823565477552193061264829618840513694839611834389594914744233341553220906394187985236720779934973493388706181530583609256316557179203158666145949370484922811736936439168280748739771810678392223329461209895593854498744372168805364564506051991320469138226077874639275039832629403968119129375363280220623968587851440892411110587946556513813223536559576950186207912786322536232837477156422383093033567058958308279557416514535116611585334344970759702138073727955655238948705347799808773541845675929583291335926963789771173403338802652917232310169611630670641820473979999150595302810829648433886920177451023858992043124033938470106625724260584422661923699787394984899121708710092353719628371049584990582434817668367860318004174752819470877384158462591375087670679591493496295244084078698320921458272819348126982914541046886901705369605616140428649278337129175382232892369015465178069577169815510670121091036564037436279739460860431049424626058129898994966342479827280137873067703666143436549798594979852046628634801627124356330393468198334759119408906743845468438688953390343283071838479478348214434469850959271323533843368402076886831768037588042753397249313809285619217888854686025775953480210628876798445556483041694465011359", "y": "-3.7660955449330761145553161969465202726785322758940426405300209417574942210940106551729693918286687868911993725119069558603258049468804626985801911913948918659586625829141674128266996039867296624487872390053967759763341848875811141007133703370727538759172702701272511434274268179781080049368279351868178639856778238000466515128356965655647372604123661938330680933352704751070553588332827543135092428881248732120100666543977836435609637746598932396405874214704977347331649915446037469474398020972569033749967192718397991412422194968344772687944253677358525236777730712524825937430917089386500969624757584810415108875764231413898834592023273225264041882639220524621488896747822533899370046486486901492186898458588290213467883309214093046285389645680093430410985357816212492974277711500505875145955026488586105322414415093136013102880699241310627114238515056567814260461900472997346125045605516483756597665905613654866732055867994640610287052893925706918871923960682210984166241235410809484563439400034076263317460744669983370261400506903852648827456103442774983820849008865199872770234658325407946776306225206257944009139522558694287230060077367447717044767810998302824461476153718373126525462409964407696453312491715819373851328836916991255053216850810199029874877650664446658081161483615502922661448315142494598909220267114618467987348255453623810661569826875262670572237854501723425234024489532039827160923801483513732359379522708581517658946851952894259964209773399561042723617137531011385666055459671684441474881223398176361961935060454075276627221929999867976594494088405409520748286824556414665336467145255684207255788791329763527117981548765014901309457910013996756366631098348344035225300547336967199431707187820325718817272119440427276090881385632754908223701112138357471116228648057047885688758594342604022221320157669222772954762758116196281621463170029688248056571976510139576322118752410781846418797929858823921824798232006583420633450030591559652576622707844546309352263782065029477227085"}

Need to prove:
concyclic(C, H, I, J)

Proof:
By line_definition on J, B, g we get g == Line(B, J)
By line_definition on J, C, g we get g == Line(C, J)
By line_definition on D, B, g we get g == Line(B, D)
By line_definition on C, F, perpendicular_line(C, f) we get Line(C, F) == perpendicular_line(C, f)
By line_definition on J, D, g we get g == Line(D, J)
By line_definition on B, E, perpendicular_line(B, h) we get Line(B, E) == perpendicular_line(B, h)
By line_definition on F, A, f we get f == Line(A, F)
By line_definition on C, D, g we get g == Line(C, D)
By line_definition on C, H, k we get k == Line(C, H)
By line_definition on G, E, j we get j == Line(E, G)
By line_definition on A, D, perpendicular_line(A, g) we get Line(A, D) == perpendicular_line(A, g)
By line_definition on H, F, k we get k == Line(F, H)
By line_definition on C, E, h we get h == Line(C, E)
By line_definition on F, B, f we get f == Line(B, F)
By line_definition on A, E, h we get h == Line(A, E)
By line_definition on A, G, i we get i == Line(A, G)
By line_definition on D, G, i we get i == Line(D, G)
By line_definition on B, G, j we get j == Line(B, G)
By circle_definition on H, G, I, c we get c == Circle(G, H, I)
By circle_definition on J, A, D, d we get d == Circle(A, D, J)
By line_intersection_definition on A, h, f we get A == line_intersection(f, h)
By circle_definition on I, G, A, c we get c == Circle(A, G, I)
By circle_definition on J, D, I, d we get d == Circle(D, I, J)
By perpendicular_line_definition on F, f, perpendicular_line(C, f) we get f == perpendicular_line(F, perpendicular_line(C, f))
By circle_definition on I, A, H, c we get c == Circle(A, H, I)
By line_intersection_definition on C, k, h we get C == line_intersection(h, k)
By line_intersection_definition on A, i, f we get A == line_intersection(f, i)
By perpendicular_line_definition on B, g, perpendicular_line(A, g) we get g == perpendicular_line(B, perpendicular_line(A, g))
By circle_definition on J, I, A, d we get d == Circle(A, I, J)
By line_intersection_definition on B, g, f we get B == line_intersection(f, g)
By line_unique_intersection_v1 on f, j, B, G we get G not in f
By line_intersection_definition on F, k, f we get F == line_intersection(f, k)
By line_intersection_definition on C, g, k we get C == line_intersection(g, k)
By line_intersection_definition on C, g, h we get C == line_intersection(g, h)
By perpendicular_line_definition on D, g, perpendicular_line(A, g) we get g == perpendicular_line(D, perpendicular_line(A, g))
By perpendicular_line_definition on C, g, perpendicular_line(A, g) we get g == perpendicular_line(C, perpendicular_line(A, g))
By perpendicular_line_definition on A, h, perpendicular_line(B, h) we get h == perpendicular_line(A, perpendicular_line(B, h))
By line_intersection_definition on B, g, j we get B == line_intersection(g, j)
By line_intersection_definition on A, h, i we get A == line_intersection(h, i)
By line_intersection_definition on E, h, j we get E == line_intersection(h, j)
By line_intersection_definition on D, g, i we get D == line_intersection(g, i)
By perpendicular_line_definition on B, f, perpendicular_line(C, f) we get f == perpendicular_line(B, perpendicular_line(C, f))
By perpendicular_line_definition on F, perpendicular_line(C, f), f we get perpendicular_line(C, f) == perpendicular_line(F, f)
By perpendicular_line_definition on C, h, perpendicular_line(B, h) we get h == perpendicular_line(C, perpendicular_line(B, h))
By line_intersection_definition on B, f, j we get B == line_intersection(f, j)
By perpendicular_line_definition on A, f, perpendicular_line(C, f) we get f == perpendicular_line(A, perpendicular_line(C, f))
By perpendicular_line_definition on D, perpendicular_line(A, g), g we get perpendicular_line(A, g) == perpendicular_line(D, g)
By perpendicular_line_definition on E, perpendicular_line(B, h), h we get perpendicular_line(B, h) == perpendicular_line(E, h)
By line_uniqueness on D, A, i, perpendicular_line(A, g) we get i == perpendicular_line(A, g)
By perpendicular_line_definition on E, h, perpendicular_line(B, h) we get h == perpendicular_line(E, perpendicular_line(B, h))
By perpendicular_line_definition on J, g, perpendicular_line(A, g) we get g == perpendicular_line(J, perpendicular_line(A, g))
By line_uniqueness on F, C, perpendicular_line(C, f), k we get k == perpendicular_line(C, f)
By line_uniqueness on B, E, j, perpendicular_line(B, h) we get j == perpendicular_line(B, h)
By line_unique_intersection_v1 on f, g, B, D we get D not in f
By line_unique_intersection_v1 on j, g, B, J we get J not in j
By line_unique_intersection_v1 on k, h, C, A we get A not in k
By line_unique_intersection_v1 on k, h, C, E we get E not in k
By line_unique_intersection_v1 on j, h, E, A we get A not in j
By line_unique_intersection_v1 on i, f, A, F we get F not in i
By line_unique_intersection_v1 on j, h, E, C we get C not in j
By line_unique_intersection_v1 on g, j, B, E we get E not in g
By line_unique_intersection_v1 on h, g, C, J we get J not in h
By line_unique_intersection_v1 on f, k, F, H we get H not in f
By line_unique_intersection_v1 on k, f, F, B we get B not in k
By line_unique_intersection_v1 on g, j, B, G we get G not in g
By line_unique_intersection_v1 on f, h, A, C we get C not in f
By line_unique_intersection_v1 on g, k, C, F we get F not in g
By line_unique_intersection_v1 on h, i, A, G we get G not in h
By line_unique_intersection_v1 on g, h, C, A we get A not in g
By line_unique_intersection_v1 on i, h, A, E we get E not in i
By line_unique_intersection_v1 on i, g, D, J we get J not in i
By line_unique_intersection_v1 on i, h, A, C we get C not in i
By line_unique_intersection_v1 on h, g, C, B we get B not in h
By line_unique_intersection_v1 on j, g, B, D we get D not in j
By line_unique_intersection_v1 on h, i, A, D we get D not in h
By line_unique_intersection_v1 on i, g, D, B we get B not in i
By line_unique_intersection_v1 on f, j, B, E we get E not in f
By line_unique_intersection_v1 on j, f, B, F we get F not in j
By line_unique_intersection_v1 on h, k, C, F we get F not in h
By line_unique_intersection_v1 on k, g, C, J we get J not in k
By line_unique_intersection_v1 on h, k, C, H we get H not in h
By line_unique_intersection_v1 on k, g, C, D we get D not in k
By line_unique_intersection_v1 on g, k, C, H we get H not in g
By line_unique_intersection_v1 on f, g, B, J we get J not in f
By different_points_v1 on C, F we get 0 != distance(C, F)
By different_points_v1 on A, D we get 0 != distance(A, D)
By different_points_v1 on A, C we get 0 != distance(A, C)
By different_points_v1 on E, B we get 0 != distance(B, E)
By different_points_v1 on B, C we get 0 != distance(B, C)
By different_points_v1 on B, A we get 0 != distance(A, B)
By in_imply_collinear on G, A, D we get collinear(A, D, G)
By in_imply_collinear on G, E, B we get collinear(B, E, G)
By in_imply_collinear on H, F, C we get collinear(C, F, H)
By not_in_line_equivalent_to_not_collinear_v0_r on F, C, B we get F not in Line(B, C)
By in_imply_concyclic on I, A, D, J we get concyclic(A, D, I, J)
By in_imply_collinear on J, C, B we get collinear(B, C, J)
By in_imply_collinear on D, C, B we get collinear(B, C, D)
By in_imply_collinear on F, B, A we get collinear(A, B, F)
By in_imply_collinear on E, A, C we get collinear(A, C, E)
By not_in_line_equivalent_to_not_collinear_v0_r on J, E, B we get J not in Line(B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on D, F, C we get D not in Line(C, F)
By not_in_line_equivalent_to_not_collinear_v0_r on I, C, B we get I not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on G, B, C we get G not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on J, C, A we get J not in Line(A, C)
By circle_circle_intersection_has_at_most_two_points_0 on I, A, G, c, d we get G not in d
By circle_circle_intersection_has_at_most_two_points_0 on A, I, D, d, c we get D not in c
By not_in_line_equivalent_to_not_collinear_v0_r on I, D, A we get I not in Line(A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on H, E, B we get H not in Line(B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on E, A, D we get E not in Line(A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on I, E, B we get I not in Line(B, E)
By in_imply_concyclic on A, H, G, I we get concyclic(A, G, H, I)
By not_in_line_equivalent_to_not_collinear_v0_r on D, A, C we get D not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on E, A, B we get E not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on I, F, C we get I not in Line(C, F)
By not_in_line_equivalent_to_not_collinear_v0_r on A, B, E we get A not in Line(B, E)
By circle_circle_intersection_has_at_most_two_points_0 on I, A, J, d, c we get J not in c
By not_in_line_equivalent_to_not_collinear_v0_r on H, B, A we get H not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on A, C, B we get A not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on E, B, C we get E not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on B, A, D we get B not in Line(A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on F, A, D we get F not in Line(A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on J, A, B we get J not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on B, A, C we get B not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on G, A, C we get G not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on J, F, C we get J not in Line(C, F)
By not_in_line_equivalent_to_not_collinear_v0_r on C, E, B we get C not in Line(B, E)
By circle_circle_intersection_has_at_most_two_points_0 on A, I, H, c, d we get H not in d
By not_in_line_equivalent_to_not_collinear_v0_r on H, C, A we get H not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on B, C, F we get B not in Line(C, F)
By not_in_line_equivalent_to_not_collinear_v0_r on C, B, A we get C not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on H, B, C we get H not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on D, B, E we get D not in Line(B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on I, A, B we get I not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on A, C, F we get A not in Line(C, F)
By not_in_line_equivalent_to_not_collinear_v0_r on I, C, A we get I not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on C, A, D we get C not in Line(A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on F, E, B we get F not in Line(B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on D, A, B we get D not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on J, D, A we get J not in Line(A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on H, A, D we get H not in Line(A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on F, C, A we get F not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on G, A, B we get G not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on E, F, C we get E not in Line(C, F)
By power_of_a_point_on_circle on I, d we get 0 == power_of_a_point(I, d)
By power_of_a_point_on_circle on I, c we get 0 == power_of_a_point(I, c)
By power_of_a_point_on_circle on A, c we get 0 == power_of_a_point(A, c)
By power_of_a_point_on_circle on J, d we get 0 == power_of_a_point(J, d)
By power_of_a_point_in_circle on H, c we get 0 == power_of_a_point(H, c)
By power_of_a_point_on_circle on A, d we get 0 == power_of_a_point(A, d)
By power_of_a_point_in_circle on G, c we get 0 == power_of_a_point(G, c)
By power_of_a_point_in_circle on D, d we get 0 == power_of_a_point(D, d)
By angles_on_chord_v3 on G, H, A, I, c we get angle(G, A, H) == angle(G, I, H) + 180 mod 360
By angles_on_chord_v0 on H, I, A, G, c we get angle(H, A, I) == angle(H, G, I) mod 360
By angles_on_chord_v2 on D, I, J, A, d we get angle(D, J, I) == angle(D, A, I) + 180 mod 360
By angles_on_chord_v0 on G, A, I, H, c we get angle(G, H, A) == angle(G, I, A) mod 360
By angles_on_chord_v1 on D, J, I, A, d we get angle(D, A, J) == angle(D, I, J) mod 360
By angles_on_chord_v1 on A, G, I, H, c we get angle(A, H, G) == angle(A, I, G) mod 360
By angles_on_chord_v3 on I, A, G, H, c we get angle(I, G, A) == angle(I, H, A) + 180 mod 360
By angles_on_chord_v1 on J, I, D, A, d we get angle(J, A, I) == angle(J, D, I) mod 360
By angles_on_chord_v0 on I, G, H, A, c we get angle(I, A, G) == angle(I, H, G) mod 360
By angles_on_chord_v1 on I, H, A, G, c we get angle(I, A, H) == angle(I, G, H) mod 360
By angles_on_chord_v2 on G, H, I, A, c we get angle(G, I, H) == angle(G, A, H) + 180 mod 360
By angles_on_chord_v1 on A, D, I, J, d we get angle(A, I, D) == angle(A, J, D) mod 360
By angles_on_chord_v2 on H, G, A, I, c we get angle(H, A, G) == angle(H, I, G) + 180 mod 360
By angles_on_chord_v1 on I, A, J, D, d we get angle(I, D, A) == angle(I, J, A) mod 360
By angles_on_chord_v3 on A, J, I, D, d we get angle(A, I, J) == angle(A, D, J) + 180 mod 360
By angles_on_chord_v0 on A, H, G, I, c we get angle(A, G, H) == angle(A, I, H) mod 360
By angles_on_chord_v3 on D, I, A, J, d we get angle(D, A, I) == angle(D, J, I) + 180 mod 360
By angles_on_chord_v0 on J, D, I, A, d we get angle(J, A, D) == angle(J, I, D) mod 360
By angles_on_chord_v2 on A, J, D, I, d we get angle(A, D, J) == angle(A, I, J) + 180 mod 360
By angles_on_chord_v3 on H, G, I, A, c we get angle(H, I, G) == angle(H, A, G) + 180 mod 360
By angles_on_chord_v0 on A, I, D, J, d we get angle(A, D, I) == angle(A, J, I) mod 360
By angles_on_chord_v0 on I, J, A, D, d we get angle(I, A, J) == angle(I, D, J) mod 360
By angles_on_chord_v0 on D, A, I, J, d we get angle(D, I, A) == angle(D, J, A) mod 360
By angles_on_chord_v2 on I, D, A, J, d we get angle(I, A, D) == angle(I, J, D) + 180 mod 360
By angles_on_chord_v1 on G, I, A, H, c we get angle(G, A, I) == angle(G, H, I) mod 360
By angles_on_chord_v1 on H, A, I, G, c we get angle(H, G, A) == angle(H, I, A) mod 360
By angles_on_chord_v3 on I, D, J, A, d we get angle(I, J, D) == angle(I, A, D) + 180 mod 360
By angles_on_chord_v2 on J, A, I, D, d we get angle(J, I, A) == angle(J, D, A) + 180 mod 360
By angles_on_chord_v3 on A, I, H, G, c we get angle(A, H, I) == angle(A, G, I) + 180 mod 360
By angles_on_chord_v2 on A, I, G, H, c we get angle(A, G, I) == angle(A, H, I) + 180 mod 360
By angles_on_chord_v3 on J, A, D, I, d we get angle(J, D, A) == angle(J, I, A) + 180 mod 360
By angles_on_chord_v2 on I, A, H, G, c we get angle(I, H, A) == angle(I, G, A) + 180 mod 360
By altitude_definition on A, B, C, perpendicular_line(A, g) we get altitude(A, B, C) == perpendicular_line(A, g)
By altitude_definition on B, C, A, perpendicular_line(B, h) we get altitude(B, A, C) == perpendicular_line(B, h)
By altitude_definition on C, A, B, perpendicular_line(C, f) we get altitude(C, A, B) == perpendicular_line(C, f)
By orthocenter_concurrency on C, B, A we get orthocenter(A, B, C) in altitude(C, A, B), orthocenter(A, B, C) in altitude(B, A, C), orthocenter(A, B, C) in altitude(A, B, C)
By radical_axis_of_intersecting_circles_v0 on I, A, c, d we get Line(A, I) == radical_axis(c, d)
By perpendicular_line_definition on G, j, h we get j == perpendicular_line(G, h)
By perpendicular_line_definition on H, k, f we get k == perpendicular_line(H, f)
By perpendicular_line_definition on G, i, g we get i == perpendicular_line(G, g)
By perpendicular_direction_conditions_v0_r on G, A, D, J we get 180 == 2 * direction(G, A) - 2 * direction(D, J) mod 360
By perpendicular_direction_conditions_v0_r on A, G, D, J we get 180 == 2 * direction(A, G) - 2 * direction(D, J) mod 360
By same_angle_v1 on A, D, G, H we get angle(D, A, H) == angle(G, A, H) mod 360
By perpendicular_direction_conditions_v0_r on A, D, D, J we get 180 == 2 * direction(A, D) - 2 * direction(D, J) mod 360
By perpendicular_direction_conditions_v0_r on G, A, J, D we get 180 == 2 * direction(G, A) - 2 * direction(J, D) mod 360
By perpendicular_direction_conditions_v0_r on D, J, A, D we get 180 == 2 * direction(D, J) - 2 * direction(A, D) mod 360
By projection_definition on J, D, i we get D == projection(J, i)
By perpendicular_direction_conditions_v0_r on D, A, J, D we get 180 == 2 * direction(D, A) - 2 * direction(J, D) mod 360
By same_angle_v1 on A, D, G, I we get angle(D, A, I) == angle(G, A, I) mod 360
By perpendicular_direction_conditions_v0_r on D, J, D, A we get 180 == 2 * direction(D, J) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on D, A, D, J we get 180 == 2 * direction(D, A) - 2 * direction(D, J) mod 360
By same_angle_v1 on A, G, D, J we get angle(D, A, J) == angle(G, A, J) mod 360
By projection_definition on B, D, i we get D == projection(B, i)
By perpendicular_direction_conditions_v0_r on J, D, A, G we get 180 == 2 * direction(J, D) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on D, J, A, G we get 180 == 2 * direction(D, J) - 2 * direction(A, G) mod 360
By projection_definition on A, E, j we get E == projection(A, j)
By perpendicular_direction_conditions_v0_r on J, D, D, A we get 180 == 2 * direction(J, D) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on J, D, A, D we get 180 == 2 * direction(J, D) - 2 * direction(A, D) mod 360
By projection_definition on A, F, k we get F == projection(A, k)
By projection_definition on B, F, k we get F == projection(B, k)
By perpendicular_direction_conditions_v0_r on A, G, J, D we get 180 == 2 * direction(A, G) - 2 * direction(J, D) mod 360
By perpendicular_direction_conditions_v0_r on D, J, G, A we get 180 == 2 * direction(D, J) - 2 * direction(G, A) mod 360
By projection_definition on C, E, j we get E == projection(C, j)
By projection_definition on C, D, i we get D == projection(C, i)
By perpendicular_direction_conditions_v0_r on J, D, G, A we get 180 == 2 * direction(J, D) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on A, D, J, D we get 180 == 2 * direction(A, D) - 2 * direction(J, D) mod 360
By different_points_v1 on I, J we get 0 != distance(I, J)
By different_points_v1 on G, E we get 0 != distance(E, G)
By different_points_v1 on A, G we get 0 != distance(A, G)
By different_points_v1 on B, G we get 0 != distance(B, G)
By different_points_v1 on A, H we get 0 != distance(A, H)
By different_points_v1 on A, J we get 0 != distance(A, J)
By different_points_v1 on J, D we get 0 != distance(D, J)
By same_angle_v3 on G, A, D, I we get angle(A, G, I) == angle(D, G, I) + 180 mod 360
By different_points_v1 on J, C we get 0 != distance(C, J)
By different_points_v1 on E, C we get 0 != distance(C, E)
By different_points_v1 on D, C we get 0 != distance(C, D)
By different_points_v1 on H, F we get 0 != distance(F, H)
By different_points_v1 on F, B we get 0 != distance(B, F)
By different_points_v1 on J, B we get 0 != distance(B, J)
By different_points_v1 on F, A we get 0 != distance(A, F)
By different_points_v1 on I, A we get 0 != distance(A, I)
By different_points_v1 on H, I we get 0 != distance(H, I)
By different_points_v1 on G, I we get 0 != distance(G, I)
By different_points_v1 on H, G we get 0 != distance(G, H)
By perpendicular_direction_conditions_v0_r on D, J, D, G we get 180 == 2 * direction(D, J) - 2 * direction(D, G) mod 360
By different_points_v1 on G, D we get 0 != distance(D, G)
By different_points_v1 on C, H we get 0 != distance(C, H)
By different_points_v1 on A, E we get 0 != distance(A, E)
By same_angle_v3 on G, A, D, H we get angle(A, G, H) == angle(D, G, H) + 180 mod 360
By different_points_v1 on I, D we get 0 != distance(D, I)
By different_points_v1 on B, D we get 0 != distance(B, D)
By perpendicular_direction_conditions_v0_r on B, D, D, A we get 180 == 2 * direction(B, D) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on D, G, J, D we get 180 == 2 * direction(D, G) - 2 * direction(J, D) mod 360
By perpendicular_direction_conditions_v0_r on A, G, B, J we get 180 == 2 * direction(A, G) - 2 * direction(B, J) mod 360
By perpendicular_direction_conditions_v0_r on A, G, B, C we get 180 == 2 * direction(A, G) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on J, C, A, D we get 180 == 2 * direction(J, C) - 2 * direction(A, D) mod 360
By same_angle_v1 on A, G, D, F we get angle(D, A, F) == angle(G, A, F) mod 360
By perpendicular_direction_conditions_v0_r on B, C, D, A we get 180 == 2 * direction(B, C) - 2 * direction(D, A) mod 360
By same_angle_v0 on A, D, G, C we get angle(D, A, C) == angle(G, A, C) mod 360
By probably_between_and_collinear_implies_between on B, F, A we get between(A, F, B)
By same_angle_v1 on A, D, G, B we get angle(D, A, B) == angle(G, A, B) mod 360
By perpendicular_direction_conditions_v0_r on C, B, A, D we get 180 == 2 * direction(C, B) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on G, D, J, D we get 180 == 2 * direction(G, D) - 2 * direction(J, D) mod 360
By perpendicular_direction_conditions_v0_r on B, D, A, D we get 180 == 2 * direction(B, D) - 2 * direction(A, D) mod 360
By same_angle_v0 on D, A, G, I we get angle(A, D, I) == angle(G, D, I) mod 360
By perpendicular_direction_conditions_v0_r on G, D, D, J we get 180 == 2 * direction(G, D) - 2 * direction(D, J) mod 360
By perpendicular_direction_conditions_v0_r on A, G, J, B we get 180 == 2 * direction(A, G) - 2 * direction(J, B) mod 360
By perpendicular_direction_conditions_v0_r on J, D, D, G we get 180 == 2 * direction(J, D) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on D, A, D, B we get 180 == 2 * direction(D, A) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on G, A, C, J we get 180 == 2 * direction(G, A) - 2 * direction(C, J) mod 360
By same_angle_v0 on D, A, G, J we get angle(A, D, J) == angle(G, D, J) mod 360
By perpendicular_direction_conditions_v0_r on G, A, C, D we get 180 == 2 * direction(G, A) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on D, A, C, D we get 180 == 2 * direction(D, A) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on A, D, B, J we get 180 == 2 * direction(A, D) - 2 * direction(B, J) mod 360
By projection_definition on G, D, g we get D == projection(G, g)
By same_angle_v0 on A, D, G, E we get angle(D, A, E) == angle(G, A, E) mod 360
By perpendicular_direction_conditions_v0_r on D, G, D, J we get 180 == 2 * direction(D, G) - 2 * direction(D, J) mod 360
By perpendicular_direction_conditions_v0_r on C, J, A, D we get 180 == 2 * direction(C, J) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on A, G, J, C we get 180 == 2 * direction(A, G) - 2 * direction(J, C) mod 360
By perpendicular_direction_conditions_v0_r on D, A, C, B we get 180 == 2 * direction(D, A) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on A, G, D, C we get 180 == 2 * direction(A, G) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on C, J, G, A we get 180 == 2 * direction(C, J) - 2 * direction(G, A) mod 360
By probably_between_and_collinear_implies_between on J, B, C we get between(C, B, J)
By perpendicular_direction_conditions_v0_r on A, G, B, D we get 180 == 2 * direction(A, G) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on C, D, A, G we get 180 == 2 * direction(C, D) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on D, B, A, G we get 180 == 2 * direction(D, B) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on G, A, D, C we get 180 == 2 * direction(G, A) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on B, J, G, A we get 180 == 2 * direction(B, J) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on D, C, A, G we get 180 == 2 * direction(D, C) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on G, A, J, C we get 180 == 2 * direction(G, A) - 2 * direction(J, C) mod 360
By perpendicular_direction_conditions_v0_r on G, A, C, B we get 180 == 2 * direction(G, A) - 2 * direction(C, B) mod 360
By probably_between_and_collinear_implies_between on A, E, C we get between(A, E, C)
By perpendicular_direction_conditions_v0_r on C, B, G, A we get 180 == 2 * direction(C, B) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on B, D, A, G we get 180 == 2 * direction(B, D) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on D, C, D, A we get 180 == 2 * direction(D, C) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on C, D, G, A we get 180 == 2 * direction(C, D) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on C, J, A, G we get 180 == 2 * direction(C, J) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on G, A, J, B we get 180 == 2 * direction(G, A) - 2 * direction(J, B) mod 360
By perpendicular_direction_conditions_v0_r on D, C, G, A we get 180 == 2 * direction(D, C) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on D, A, B, J we get 180 == 2 * direction(D, A) - 2 * direction(B, J) mod 360
By perpendicular_direction_conditions_v0_r on D, A, C, J we get 180 == 2 * direction(D, A) - 2 * direction(C, J) mod 360
By perpendicular_direction_conditions_v0_r on D, A, D, C we get 180 == 2 * direction(D, A) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on J, C, D, A we get 180 == 2 * direction(J, C) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on A, D, C, D we get 180 == 2 * direction(A, D) - 2 * direction(C, D) mod 360
By projection_definition on H, F, f we get F == projection(H, f)
By in_imply_collinear on J, D, C we get collinear(C, D, J)
By perpendicular_direction_conditions_v0_r on A, D, C, B we get 180 == 2 * direction(A, D) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on A, D, J, C we get 180 == 2 * direction(A, D) - 2 * direction(J, C) mod 360
By perpendicular_direction_conditions_v0_r on D, A, B, C we get 180 == 2 * direction(D, A) - 2 * direction(B, C) mod 360
By probably_between_and_collinear_implies_between on A, G, D we get between(A, G, D)
By perpendicular_direction_conditions_v0_r on A, D, B, D we get 180 == 2 * direction(A, D) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on C, D, D, A we get 180 == 2 * direction(C, D) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on B, C, A, D we get 180 == 2 * direction(B, C) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on G, A, D, B we get 180 == 2 * direction(G, A) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on A, G, D, B we get 180 == 2 * direction(A, G) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on J, D, G, D we get 180 == 2 * direction(J, D) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on D, B, G, A we get 180 == 2 * direction(D, B) - 2 * direction(G, A) mod 360
By projection_definition on G, E, h we get E == projection(G, h)
By perpendicular_direction_conditions_v0_r on A, D, C, J we get 180 == 2 * direction(A, D) - 2 * direction(C, J) mod 360
By perpendicular_direction_conditions_v0_r on B, J, A, G we get 180 == 2 * direction(B, J) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on A, D, D, C we get 180 == 2 * direction(A, D) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on C, D, A, D we get 180 == 2 * direction(C, D) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on C, J, D, A we get 180 == 2 * direction(C, J) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on C, B, D, A we get 180 == 2 * direction(C, B) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on D, B, A, D we get 180 == 2 * direction(D, B) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on G, A, B, D we get 180 == 2 * direction(G, A) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on B, C, A, G we get 180 == 2 * direction(B, C) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on B, C, G, A we get 180 == 2 * direction(B, C) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on A, G, C, D we get 180 == 2 * direction(A, G) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on D, J, G, D we get 180 == 2 * direction(D, J) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on D, A, B, D we get 180 == 2 * direction(D, A) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on B, D, G, A we get 180 == 2 * direction(B, D) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on D, C, A, D we get 180 == 2 * direction(D, C) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on J, B, A, G we get 180 == 2 * direction(J, B) - 2 * direction(A, G) mod 360
By probably_between_and_collinear_implies_between on B, G, E we get between(B, G, E)
By perpendicular_direction_conditions_v0_r on A, D, B, C we get 180 == 2 * direction(A, D) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on J, B, A, D we get 180 == 2 * direction(J, B) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on A, D, D, B we get 180 == 2 * direction(A, D) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on A, G, C, J we get 180 == 2 * direction(A, G) - 2 * direction(C, J) mod 360
By perpendicular_direction_conditions_v0_r on A, D, J, B we get 180 == 2 * direction(A, D) - 2 * direction(J, B) mod 360
By perpendicular_direction_conditions_v0_r on D, A, J, B we get 180 == 2 * direction(D, A) - 2 * direction(J, B) mod 360
By perpendicular_direction_conditions_v0_r on G, A, B, C we get 180 == 2 * direction(G, A) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on J, C, G, A we get 180 == 2 * direction(J, C) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on A, G, C, B we get 180 == 2 * direction(A, G) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on B, J, A, D we get 180 == 2 * direction(B, J) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on D, B, D, A we get 180 == 2 * direction(D, B) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on G, A, B, J we get 180 == 2 * direction(G, A) - 2 * direction(B, J) mod 360
By perpendicular_direction_conditions_v0_r on J, B, G, A we get 180 == 2 * direction(J, B) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on J, B, D, A we get 180 == 2 * direction(J, B) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on B, J, D, A we get 180 == 2 * direction(B, J) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on C, B, A, G we get 180 == 2 * direction(C, B) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on D, A, J, C we get 180 == 2 * direction(D, A) - 2 * direction(J, C) mod 360
By perpendicular_direction_conditions_v0_r on J, C, A, G we get 180 == 2 * direction(J, C) - 2 * direction(A, G) mod 360
By in_imply_collinear on B, D, J we get collinear(B, D, J)
By probably_between_and_collinear_implies_between on B, D, C we get between(B, D, C)
By reverse_direction on J, A we get 180 == direction(J, A) - direction(A, J) mod 360
By probably_between_and_collinear_implies_between on C, F, H we get between(C, F, H)
By not_in_line_equivalent_to_not_collinear_v0_r on E, D, I we get E not in Line(D, I)
By reverse_direction on A, H we get 180 == direction(A, H) - direction(H, A) mod 360
By reverse_direction on A, D we get 180 == direction(A, D) - direction(D, A) mod 360
By perpendicular_angle_conditions_v0 on J, D, A we get angle(J, D, A) == orientation(A, J, D) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on H, I, G we get H not in Line(G, I)
By reverse_direction on I, H we get 180 == direction(I, H) - direction(H, I) mod 360
By reverse_direction on I, J we get 180 == direction(I, J) - direction(J, I) mod 360
By reverse_direction on J, I we get 180 == direction(J, I) - direction(I, J) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on B, A, H we get B not in Line(A, H)
By not_in_line_equivalent_to_not_collinear_v0_r on J, I, G we get J not in Line(G, I)
By reverse_direction on G, I we get 180 == direction(G, I) - direction(I, G) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on I, G, H we get I not in Line(G, H)
By reverse_direction on G, A we get 180 == direction(G, A) - direction(A, G) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on F, A, H we get F not in Line(A, H)
By not_in_line_equivalent_to_not_collinear_v0_r on F, A, J we get F not in Line(A, J)
By not_in_line_equivalent_to_not_collinear_v0_r on D, I, J we get D not in Line(I, J)
By not_in_line_equivalent_to_not_collinear_v0_r on H, J, I we get H not in Line(I, J)
By line_inequality on Line(H, I), h, H we get h != Line(H, I)
By reverse_direction on D, A we get 180 == direction(D, A) - direction(A, D) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on C, I, G we get C not in Line(G, I)
By not_in_line_equivalent_to_not_collinear_v0_r on A, J, I we get A not in Line(I, J)
By reverse_direction on A, G we get 180 == direction(A, G) - direction(G, A) mod 360
By line_inequality on Line(I, J), j, I we get j != Line(I, J)
By reverse_direction on H, G we get 180 == direction(H, G) - direction(G, H) mod 360
By reverse_direction on I, D we get 180 == direction(I, D) - direction(D, I) mod 360
By reverse_direction on I, A we get 180 == direction(I, A) - direction(A, I) mod 360
By reverse_direction on D, I we get 180 == direction(D, I) - direction(I, D) mod 360
By reverse_direction on J, D we get 180 == direction(J, D) - direction(D, J) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on E, H, I we get E not in Line(H, I)
By not_in_line_equivalent_to_not_collinear_v0_r on J, H, I we get J not in Line(H, I)
By line_inequality on Line(I, J), k, I we get k != Line(I, J)
By not_in_line_equivalent_to_not_collinear_v0_r on A, I, H we get A not in Line(H, I)
By line_inequality on Line(H, I), j, H we get j != Line(H, I)
By not_in_line_equivalent_to_not_collinear_v0_r on F, A, I we get F not in Line(A, I)
By reverse_direction on G, H we get 180 == direction(G, H) - direction(H, G) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on B, H, G we get B not in Line(G, H)
By reverse_direction on H, A we get 180 == direction(H, A) - direction(A, H) mod 360
By reverse_direction on A, J we get 180 == direction(A, J) - direction(J, A) mod 360
By line_inequality on Line(A, H), k, A we get k != Line(A, H)
By not_in_line_equivalent_to_not_collinear_v0_r on J, H, G we get J not in Line(G, H)
By not_in_line_equivalent_to_not_collinear_v0_r on G, D, I we get G not in Line(D, I)
By collinear_definition on A, D, G we get D in Line(A, G), G in Line(A, D), Line(A, D) == Line(A, G), 0 == 2 * angle(D, A, G) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on E, I, A we get E not in Line(A, I)
By reverse_direction on A, I we get 180 == direction(A, I) - direction(I, A) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on C, I, A we get C not in Line(A, I)
By line_inequality on Line(G, I), f, G we get f != Line(G, I)
By not_in_line_equivalent_to_not_collinear_v0_r on F, I, H we get F not in Line(H, I)
By reverse_direction on H, I we get 180 == direction(H, I) - direction(I, H) mod 360
By perpendicular_angle_conditions_v0 on A, D, J we get angle(A, D, J) == orientation(A, D, J) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on J, A, I we get J not in Line(A, I)
By not_in_line_equivalent_to_not_collinear_v0_r on B, I, J we get B not in Line(I, J)
By line_inequality on Line(G, I), h, I we get h != Line(G, I)
By collinear_definition on A, G, D we get G in Line(A, D), D in Line(A, G), Line(A, D) == Line(A, G), 0 == 2 * angle(G, A, D) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on C, I, J we get C not in Line(I, J)
By line_inequality on Line(D, I), j, D we get j != Line(D, I)
By not_in_line_equivalent_to_not_collinear_v0_r on A, G, I we get A not in Line(G, I)
By not_in_line_equivalent_to_not_collinear_v0_r on G, J, I we get G not in Line(I, J)
By reverse_direction on I, G we get 180 == direction(I, G) - direction(G, I) mod 360
By reverse_direction on D, J we get 180 == direction(D, J) - direction(J, D) mod 360
By line_inequality on Line(D, I), h, D we get h != Line(D, I)
By not_in_line_equivalent_to_not_collinear_v0_r on H, A, I we get H not in Line(A, I)
By not_in_line_equivalent_to_not_collinear_v0_r on I, A, J we get I not in Line(A, J)
By not_in_line_equivalent_to_not_collinear_v0_r on D, A, J we get D not in Line(A, J)
By line_inequality on Line(G, I), g, G we get g != Line(G, I)
By line_inequality on Line(A, H), g, A we get g != Line(A, H)
By not_in_line_equivalent_to_not_collinear_v0_r on C, A, H we get C not in Line(A, H)
By not_in_line_equivalent_to_not_collinear_v0_r on E, I, G we get E not in Line(G, I)
By line_inequality on Line(H, I), f, I we get f != Line(H, I)
By not_in_line_equivalent_to_not_collinear_v0_r on B, I, H we get B not in Line(H, I)
By line_inequality on Line(A, I), k, A we get k != Line(A, I)
By line_inequality on Line(G, H), i, H we get i != Line(G, H)
By not_in_line_equivalent_to_not_collinear_v0_r on J, A, H we get J not in Line(A, H)
By not_in_line_equivalent_to_not_collinear_v0_r on F, G, I we get F not in Line(G, I)
By not_in_line_equivalent_to_not_collinear_v0_r on C, I, D we get C not in Line(D, I)
By line_inequality on Line(D, I), f, I we get f != Line(D, I)
By not_in_line_equivalent_to_not_collinear_v0_r on E, J, A we get E not in Line(A, J)
By line_inequality on Line(I, J), i, J we get i != Line(I, J)
By not_in_line_equivalent_to_not_collinear_v0_r on I, H, A we get I not in Line(A, H)
By line_inequality on Line(A, J), i, J we get i != Line(A, J)
By not_in_line_equivalent_to_not_collinear_v0_r on G, H, I we get G not in Line(H, I)
By not_in_line_equivalent_to_not_collinear_v0_r on G, I, A we get G not in Line(A, I)
By not_in_line_equivalent_to_not_collinear_v0_r on G, A, J we get G not in Line(A, J)
By not_in_line_equivalent_to_not_collinear_v0_r on H, J, A we get H not in Line(A, J)
By not_in_line_equivalent_to_not_collinear_v0_r on G, H, A we get G not in Line(A, H)
By line_inequality on Line(I, J), h, J we get h != Line(I, J)
By not_in_line_equivalent_to_not_collinear_v0_r on B, I, D we get B not in Line(D, I)
By not_in_line_equivalent_to_not_collinear_v0_r on J, I, D we get J not in Line(D, I)
By line_inequality on Line(A, J), j, A we get j != Line(A, J)
By line_inequality on Line(A, I), g, A we get g != Line(A, I)
By line_inequality on Line(G, I), j, I we get j != Line(G, I)
By line_inequality on Line(H, I), g, H we get g != Line(H, I)
By line_inequality on Line(D, I), g, I we get g != Line(D, I)
By line_inequality on Line(A, J), k, J we get k != Line(A, J)
By not_in_line_equivalent_to_not_collinear_v0_r on H, D, I we get H not in Line(D, I)
By line_inequality on Line(G, H), h, H we get h != Line(G, H)
By line_inequality on Line(A, I), j, A we get j != Line(A, I)
By line_inequality on Line(A, J), f, J we get f != Line(A, J)
By not_in_line_equivalent_to_not_collinear_v0_r on E, H, G we get E not in Line(G, H)
By not_in_line_equivalent_to_not_collinear_v0_r on F, J, I we get F not in Line(I, J)
By line_inequality on Line(A, I), h, I we get h != Line(A, I)
By line_inequality on Line(A, J), g, A we get g != Line(A, J)
By line_inequality on Line(A, H), j, H we get j != Line(A, H)
By not_in_line_equivalent_to_not_collinear_v0_r on A, G, H we get A not in Line(G, H)
By not_in_line_equivalent_to_not_collinear_v0_r on E, H, A we get E not in Line(A, H)
By not_in_line_equivalent_to_not_collinear_v0_r on C, A, J we get C not in Line(A, J)
By not_in_line_equivalent_to_not_collinear_v0_r on A, I, D we get A not in Line(D, I)
By line_inequality on Line(G, H), g, H we get g != Line(G, H)
By line_inequality on Line(I, J), f, J we get f != Line(I, J)
By line_inequality on Line(A, H), f, H we get f != Line(A, H)
By not_in_line_equivalent_to_not_collinear_v0_r on D, G, H we get D not in Line(G, H)
By line_inequality on Line(D, I), k, D we get k != Line(D, I)
By line_inequality on Line(I, J), g, I we get g != Line(I, J)
By line_inequality on Line(A, H), i, H we get i != Line(A, H)
By line_inequality on Line(A, H), h, H we get h != Line(A, H)
By not_in_line_equivalent_to_not_collinear_v0_r on F, D, I we get F not in Line(D, I)
By not_in_line_equivalent_to_not_collinear_v0_r on C, H, I we get C not in Line(H, I)
By line_inequality on Line(H, I), k, I we get k != Line(H, I)
By line_inequality on Line(G, I), k, I we get k != Line(G, I)
By not_in_line_equivalent_to_not_collinear_v0_r on B, J, A we get B not in Line(A, J)
By not_in_line_equivalent_to_not_collinear_v0_r on D, I, A we get D not in Line(A, I)
By not_in_line_equivalent_to_not_collinear_v0_r on B, A, I we get B not in Line(A, I)
By line_inequality on Line(H, I), i, H we get i != Line(H, I)
By line_inequality on Line(G, I), i, I we get i != Line(G, I)
By not_in_line_equivalent_to_not_collinear_v0_r on E, J, I we get E not in Line(I, J)
By not_in_line_equivalent_to_not_collinear_v0_r on D, A, H we get D not in Line(A, H)
By line_inequality on Line(A, I), f, I we get f != Line(A, I)
By line_inequality on Line(A, J), h, J we get h != Line(A, J)
By line_inequality on Line(G, H), j, H we get j != Line(G, H)
By not_in_line_equivalent_to_not_collinear_v0_r on D, H, I we get D not in Line(H, I)
By line_inequality on Line(G, H), f, G we get f != Line(G, H)
By not_in_line_equivalent_to_not_collinear_v0_r on B, G, I we get B not in Line(G, I)
By not_in_line_equivalent_to_not_collinear_v0_r on D, I, G we get D not in Line(G, I)
By line_inequality on Line(D, I), i, I we get i != Line(D, I)
By line_inequality on Line(A, I), i, I we get i != Line(A, I)
By same_angle_v3 on G, E, B, H we get angle(E, G, H) == angle(B, G, H) + 180 mod 360
By same_angle_v1 on A, E, C, H we get angle(C, A, H) == angle(E, A, H) mod 360
By perpendicular_direction_conditions_v0_r on E, A, E, B we get 180 == 2 * direction(E, A) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on B, E, A, E we get 180 == 2 * direction(B, E) - 2 * direction(A, E) mod 360
By perpendicular_direction_conditions_v0_r on B, E, C, E we get 180 == 2 * direction(B, E) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on B, A, C, F we get 180 == 2 * direction(B, A) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on D, G, C, J we get 180 == 2 * direction(D, G) - 2 * direction(C, J) mod 360
By same_angle_v0 on J, B, C, A we get angle(B, J, A) == angle(C, J, A) mod 360
By same_angle_v2 on G, D, A, E we get angle(D, G, E) == angle(A, G, E) + 180 mod 360
By perpendicular_direction_conditions_v0_r on E, A, B, G we get 180 == 2 * direction(E, A) - 2 * direction(B, G) mod 360
By same_angle_v1 on A, E, C, J we get angle(C, A, J) == angle(E, A, J) mod 360
By perpendicular_direction_conditions_v0_r on F, H, A, B we get 180 == 2 * direction(F, H) - 2 * direction(A, B) mod 360
By same_angle_v1 on A, E, C, I we get angle(C, A, I) == angle(E, A, I) mod 360
By perpendicular_direction_conditions_v0_r on G, E, A, C we get 180 == 2 * direction(G, E) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on A, B, C, H we get 180 == 2 * direction(A, B) - 2 * direction(C, H) mod 360
By same_angle_v3 on D, C, B, A we get angle(C, D, A) == angle(B, D, A) + 180 mod 360
By same_angle_v0 on A, B, F, G we get angle(B, A, G) == angle(F, A, G) mod 360
By perpendicular_direction_conditions_v0_r on B, G, E, A we get 180 == 2 * direction(B, G) - 2 * direction(E, A) mod 360
By same_angle_v3 on G, E, B, A we get angle(E, G, A) == angle(B, G, A) + 180 mod 360
By perpendicular_direction_conditions_v0_r on B, C, G, D we get 180 == 2 * direction(B, C) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on J, B, G, D we get 180 == 2 * direction(J, B) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on B, A, F, H we get 180 == 2 * direction(B, A) - 2 * direction(F, H) mod 360
By same_angle_v2 on D, C, B, I we get angle(C, D, I) == angle(B, D, I) + 180 mod 360
By perpendicular_direction_conditions_v0_r on B, A, H, C we get 180 == 2 * direction(B, A) - 2 * direction(H, C) mod 360
By same_angle_v1 on A, B, F, I we get angle(B, A, I) == angle(F, A, I) mod 360
By perpendicular_direction_conditions_v0_r on C, A, G, E we get 180 == 2 * direction(C, A) - 2 * direction(G, E) mod 360
By same_angle_v0 on J, C, B, I we get angle(B, J, I) == angle(C, J, I) mod 360
By perpendicular_direction_conditions_v0_r on G, E, A, E we get 180 == 2 * direction(G, E) - 2 * direction(A, E) mod 360
By perpendicular_direction_conditions_v0_r on A, C, G, E we get 180 == 2 * direction(A, C) - 2 * direction(G, E) mod 360
By perpendicular_direction_conditions_v0_r on C, J, G, D we get 180 == 2 * direction(C, J) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on B, F, C, H we get 180 == 2 * direction(B, F) - 2 * direction(C, H) mod 360
By perpendicular_direction_conditions_v0_r on H, F, B, A we get 180 == 2 * direction(H, F) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on B, G, E, C we get 180 == 2 * direction(B, G) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on E, C, E, G we get 180 == 2 * direction(E, C) - 2 * direction(E, G) mod 360
By same_angle_v1 on A, B, F, H we get angle(B, A, H) == angle(F, A, H) mod 360
By perpendicular_direction_conditions_v0_r on D, G, J, C we get 180 == 2 * direction(D, G) - 2 * direction(J, C) mod 360
By same_angle_v0 on A, B, F, D we get angle(B, A, D) == angle(F, A, D) mod 360
By perpendicular_direction_conditions_v0_r on E, C, G, B we get 180 == 2 * direction(E, C) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on C, H, B, A we get 180 == 2 * direction(C, H) - 2 * direction(B, A) mod 360
By same_angle_v2 on G, E, B, I we get angle(E, G, I) == angle(B, G, I) + 180 mod 360
By perpendicular_direction_conditions_v0_r on F, H, F, B we get 180 == 2 * direction(F, H) - 2 * direction(F, B) mod 360
By same_angle_v0 on D, A, G, B we get angle(A, D, B) == angle(G, D, B) mod 360
By perpendicular_direction_conditions_v0_r on E, C, E, B we get 180 == 2 * direction(E, C) - 2 * direction(E, B) mod 360
By same_angle_v2 on G, A, D, B we get angle(A, G, B) == angle(D, G, B) + 180 mod 360
By perpendicular_direction_conditions_v0_r on E, B, E, A we get 180 == 2 * direction(E, B) - 2 * direction(E, A) mod 360
By same_angle_v1 on A, F, B, J we get angle(B, A, J) == angle(F, A, J) mod 360
By perpendicular_direction_conditions_v0_r on B, C, D, G we get 180 == 2 * direction(B, C) - 2 * direction(D, G) mod 360
By same_angle_v1 on H, C, F, I we get angle(C, H, I) == angle(F, H, I) mod 360
By perpendicular_direction_conditions_v0_r on B, G, C, A we get 180 == 2 * direction(B, G) - 2 * direction(C, A) mod 360
By same_angle_v1 on A, E, C, D we get angle(C, A, D) == angle(E, A, D) mod 360
By perpendicular_direction_conditions_v0_r on E, B, C, A we get 180 == 2 * direction(E, B) - 2 * direction(C, A) mod 360
By same_angle_v1 on A, C, E, G we get angle(C, A, G) == angle(E, A, G) mod 360
By perpendicular_direction_conditions_v0_r on B, E, C, A we get 180 == 2 * direction(B, E) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on G, E, E, C we get 180 == 2 * direction(G, E) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on A, E, G, B we get 180 == 2 * direction(A, E) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on H, C, F, A we get 180 == 2 * direction(H, C) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on E, G, E, A we get 180 == 2 * direction(E, G) - 2 * direction(E, A) mod 360
By perpendicular_direction_conditions_v0_r on A, F, H, C we get 180 == 2 * direction(A, F) - 2 * direction(H, C) mod 360
By perpendicular_direction_conditions_v0_r on C, J, D, G we get 180 == 2 * direction(C, J) - 2 * direction(D, G) mod 360
By same_angle_v0 on H, C, F, A we get angle(C, H, A) == angle(F, H, A) mod 360
By perpendicular_direction_conditions_v0_r on G, D, C, D we get 180 == 2 * direction(G, D) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on C, F, A, B we get 180 == 2 * direction(C, F) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on D, G, C, D we get 180 == 2 * direction(D, G) - 2 * direction(C, D) mod 360
By same_angle_v1 on D, A, G, C we get angle(A, D, C) == angle(G, D, C) mod 360
By perpendicular_direction_conditions_v0_r on C, A, B, E we get 180 == 2 * direction(C, A) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on C, D, D, G we get 180 == 2 * direction(C, D) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on A, F, H, F we get 180 == 2 * direction(A, F) - 2 * direction(H, F) mod 360
By perpendicular_direction_conditions_v0_r on B, A, C, H we get 180 == 2 * direction(B, A) - 2 * direction(C, H) mod 360
By perpendicular_direction_conditions_v0_r on D, G, D, B we get 180 == 2 * direction(D, G) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on F, H, B, A we get 180 == 2 * direction(F, H) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on E, G, C, A we get 180 == 2 * direction(E, G) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on A, F, F, H we get 180 == 2 * direction(A, F) - 2 * direction(F, H) mod 360
By perpendicular_direction_conditions_v0_r on F, C, A, F we get 180 == 2 * direction(F, C) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on A, F, F, C we get 180 == 2 * direction(A, F) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on B, G, A, E we get 180 == 2 * direction(B, G) - 2 * direction(A, E) mod 360
By perpendicular_direction_conditions_v0_r on E, B, A, E we get 180 == 2 * direction(E, B) - 2 * direction(A, E) mod 360
By perpendicular_direction_conditions_v0_r on A, E, B, G we get 180 == 2 * direction(A, E) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on D, B, G, D we get 180 == 2 * direction(D, B) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on C, E, G, E we get 180 == 2 * direction(C, E) - 2 * direction(G, E) mod 360
By perpendicular_direction_conditions_v0_r on C, D, G, D we get 180 == 2 * direction(C, D) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on C, F, F, A we get 180 == 2 * direction(C, F) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on G, D, C, J we get 180 == 2 * direction(G, D) - 2 * direction(C, J) mod 360
By perpendicular_direction_conditions_v0_r on G, D, J, B we get 180 == 2 * direction(G, D) - 2 * direction(J, B) mod 360
By perpendicular_direction_conditions_v0_r on E, A, G, E we get 180 == 2 * direction(E, A) - 2 * direction(G, E) mod 360
By perpendicular_direction_conditions_v0_r on C, H, A, F we get 180 == 2 * direction(C, H) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on A, C, G, B we get 180 == 2 * direction(A, C) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on C, F, F, B we get 180 == 2 * direction(C, F) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on B, E, A, C we get 180 == 2 * direction(B, E) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on B, G, A, C we get 180 == 2 * direction(B, G) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on H, F, A, F we get 180 == 2 * direction(H, F) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on B, J, G, D we get 180 == 2 * direction(B, J) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on C, A, B, G we get 180 == 2 * direction(C, A) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on C, F, B, A we get 180 == 2 * direction(C, F) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on C, H, F, B we get 180 == 2 * direction(C, H) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on G, D, B, C we get 180 == 2 * direction(G, D) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on F, A, H, F we get 180 == 2 * direction(F, A) - 2 * direction(H, F) mod 360
By perpendicular_direction_conditions_v0_r on C, B, D, G we get 180 == 2 * direction(C, B) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on F, A, C, F we get 180 == 2 * direction(F, A) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on F, A, F, H we get 180 == 2 * direction(F, A) - 2 * direction(F, H) mod 360
By perpendicular_direction_conditions_v0_r on D, G, D, C we get 180 == 2 * direction(D, G) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on F, A, F, C we get 180 == 2 * direction(F, A) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on E, C, G, E we get 180 == 2 * direction(E, C) - 2 * direction(G, E) mod 360
By perpendicular_direction_conditions_v0_r on C, H, B, F we get 180 == 2 * direction(C, H) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on B, F, H, C we get 180 == 2 * direction(B, F) - 2 * direction(H, C) mod 360
By perpendicular_direction_conditions_v0_r on H, F, F, A we get 180 == 2 * direction(H, F) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on D, B, D, G we get 180 == 2 * direction(D, B) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on E, B, E, C we get 180 == 2 * direction(E, B) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on G, D, C, B we get 180 == 2 * direction(G, D) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on C, F, A, F we get 180 == 2 * direction(C, F) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on D, C, D, G we get 180 == 2 * direction(D, C) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on H, C, A, B we get 180 == 2 * direction(H, C) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on A, E, G, E we get 180 == 2 * direction(A, E) - 2 * direction(G, E) mod 360
By perpendicular_direction_conditions_v0_r on J, C, D, G we get 180 == 2 * direction(J, C) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on B, F, F, C we get 180 == 2 * direction(B, F) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on D, G, B, D we get 180 == 2 * direction(D, G) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on C, H, F, A we get 180 == 2 * direction(C, H) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on E, C, B, G we get 180 == 2 * direction(E, C) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on B, D, D, G we get 180 == 2 * direction(B, D) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on C, A, E, B we get 180 == 2 * direction(C, A) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on A, E, E, G we get 180 == 2 * direction(A, E) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on C, E, E, B we get 180 == 2 * direction(C, E) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on B, E, E, C we get 180 == 2 * direction(B, E) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on A, B, F, C we get 180 == 2 * direction(A, B) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on B, J, D, G we get 180 == 2 * direction(B, J) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on F, C, B, F we get 180 == 2 * direction(F, C) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on C, A, G, B we get 180 == 2 * direction(C, A) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on A, B, H, F we get 180 == 2 * direction(A, B) - 2 * direction(H, F) mod 360
By perpendicular_direction_conditions_v0_r on F, H, F, A we get 180 == 2 * direction(F, H) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on B, E, E, A we get 180 == 2 * direction(B, E) - 2 * direction(E, A) mod 360
By perpendicular_direction_conditions_v0_r on E, G, A, C we get 180 == 2 * direction(E, G) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on G, B, E, A we get 180 == 2 * direction(G, B) - 2 * direction(E, A) mod 360
By perpendicular_direction_conditions_v0_r on F, B, C, H we get 180 == 2 * direction(F, B) - 2 * direction(C, H) mod 360
By perpendicular_direction_conditions_v0_r on G, B, C, E we get 180 == 2 * direction(G, B) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on C, A, E, G we get 180 == 2 * direction(C, A) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on E, A, G, B we get 180 == 2 * direction(E, A) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on D, G, B, C we get 180 == 2 * direction(D, G) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on F, C, F, A we get 180 == 2 * direction(F, C) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on H, C, F, B we get 180 == 2 * direction(H, C) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on G, D, B, D we get 180 == 2 * direction(G, D) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on D, G, C, B we get 180 == 2 * direction(D, G) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on G, D, D, C we get 180 == 2 * direction(G, D) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on D, C, G, D we get 180 == 2 * direction(D, C) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on F, C, F, B we get 180 == 2 * direction(F, C) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on G, B, A, C we get 180 == 2 * direction(G, B) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on E, G, C, E we get 180 == 2 * direction(E, G) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on F, B, H, F we get 180 == 2 * direction(F, B) - 2 * direction(H, F) mod 360
By perpendicular_direction_conditions_v0_r on G, B, E, C we get 180 == 2 * direction(G, B) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on B, F, H, F we get 180 == 2 * direction(B, F) - 2 * direction(H, F) mod 360
By perpendicular_direction_conditions_v0_r on A, B, C, F we get 180 == 2 * direction(A, B) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on E, B, A, C we get 180 == 2 * direction(E, B) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on A, C, B, E we get 180 == 2 * direction(A, C) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on G, E, E, A we get 180 == 2 * direction(G, E) - 2 * direction(E, A) mod 360
By perpendicular_direction_conditions_v0_r on H, C, B, F we get 180 == 2 * direction(H, C) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on A, E, E, B we get 180 == 2 * direction(A, E) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on F, B, C, F we get 180 == 2 * direction(F, B) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on A, B, F, H we get 180 == 2 * direction(A, B) - 2 * direction(F, H) mod 360
By perpendicular_direction_conditions_v0_r on F, H, B, F we get 180 == 2 * direction(F, H) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on G, B, A, E we get 180 == 2 * direction(G, B) - 2 * direction(A, E) mod 360
By perpendicular_direction_conditions_v0_r on C, H, A, B we get 180 == 2 * direction(C, H) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on B, G, C, E we get 180 == 2 * direction(B, G) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on C, B, G, D we get 180 == 2 * direction(C, B) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on B, A, H, F we get 180 == 2 * direction(B, A) - 2 * direction(H, F) mod 360
By perpendicular_direction_conditions_v0_r on C, E, B, G we get 180 == 2 * direction(C, E) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on D, G, J, B we get 180 == 2 * direction(D, G) - 2 * direction(J, B) mod 360
By perpendicular_direction_conditions_v0_r on E, A, B, E we get 180 == 2 * direction(E, A) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on G, B, C, A we get 180 == 2 * direction(G, B) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on E, C, B, E we get 180 == 2 * direction(E, C) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on H, C, A, F we get 180 == 2 * direction(H, C) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on C, E, E, G we get 180 == 2 * direction(C, E) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on F, C, A, B we get 180 == 2 * direction(F, C) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on A, F, C, F we get 180 == 2 * direction(A, F) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on C, E, B, E we get 180 == 2 * direction(C, E) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on B, F, C, F we get 180 == 2 * direction(B, F) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on H, F, A, B we get 180 == 2 * direction(H, F) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on F, H, A, F we get 180 == 2 * direction(F, H) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on J, B, D, G we get 180 == 2 * direction(J, B) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on E, G, E, C we get 180 == 2 * direction(E, G) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on H, F, B, F we get 180 == 2 * direction(H, F) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on G, D, D, B we get 180 == 2 * direction(G, D) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on G, E, C, A we get 180 == 2 * direction(G, E) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on G, E, C, E we get 180 == 2 * direction(G, E) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on G, D, B, J we get 180 == 2 * direction(G, D) - 2 * direction(B, J) mod 360
By perpendicular_direction_conditions_v0_r on F, A, C, H we get 180 == 2 * direction(F, A) - 2 * direction(C, H) mod 360
By perpendicular_direction_conditions_v0_r on H, C, B, A we get 180 == 2 * direction(H, C) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on H, F, F, B we get 180 == 2 * direction(H, F) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on A, F, C, H we get 180 == 2 * direction(A, F) - 2 * direction(C, H) mod 360
By perpendicular_direction_conditions_v0_r on F, B, F, H we get 180 == 2 * direction(F, B) - 2 * direction(F, H) mod 360
By perpendicular_direction_conditions_v0_r on D, G, B, J we get 180 == 2 * direction(D, G) - 2 * direction(B, J) mod 360
By perpendicular_direction_conditions_v0_r on F, C, B, A we get 180 == 2 * direction(F, C) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on B, F, F, H we get 180 == 2 * direction(B, F) - 2 * direction(F, H) mod 360
By perpendicular_direction_conditions_v0_r on A, E, B, E we get 180 == 2 * direction(A, E) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on E, B, C, E we get 180 == 2 * direction(E, B) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on A, C, E, G we get 180 == 2 * direction(A, C) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on B, D, G, D we get 180 == 2 * direction(B, D) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on G, D, J, C we get 180 == 2 * direction(G, D) - 2 * direction(J, C) mod 360
By perpendicular_direction_conditions_v0_r on A, B, H, C we get 180 == 2 * direction(A, B) - 2 * direction(H, C) mod 360
By perpendicular_direction_conditions_v0_r on C, F, B, F we get 180 == 2 * direction(C, F) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on A, C, B, G we get 180 == 2 * direction(A, C) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on E, A, E, G we get 180 == 2 * direction(E, A) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on A, C, E, B we get 180 == 2 * direction(A, C) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on F, A, H, C we get 180 == 2 * direction(F, A) - 2 * direction(H, C) mod 360
By perpendicular_direction_conditions_v0_r on E, G, A, E we get 180 == 2 * direction(E, G) - 2 * direction(A, E) mod 360
By perpendicular_direction_conditions_v0_r on F, B, F, C we get 180 == 2 * direction(F, B) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on B, A, F, C we get 180 == 2 * direction(B, A) - 2 * direction(F, C) mod 360
By radical_axis_definition_v0_r on I, c, d we get I in radical_axis(c, d)
By perpendicular_direction_conditions_v0_r on F, B, H, C we get 180 == 2 * direction(F, B) - 2 * direction(H, C) mod 360
By perpendicular_direction_conditions_v0_r on J, C, G, D we get 180 == 2 * direction(J, C) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on C, E, G, B we get 180 == 2 * direction(C, E) - 2 * direction(G, B) mod 360
By perpendicular_angle_conditions_v0 on B, D, A we get angle(B, D, A) == orientation(A, B, D) mod 360
By collinear_definition on G, A, D we get A in Line(D, G), D in Line(A, G), Line(A, G) == Line(D, G), 0 == 2 * angle(A, G, D) mod 360
By collinear_definition on D, G, A we get G in Line(A, D), A in Line(D, G), Line(A, D) == Line(D, G), 0 == 2 * angle(G, D, A) mod 360
By radical_axis_definition_v0_r on A, d, c we get A in radical_axis(c, d)
By perpendicular_angle_conditions_v0 on A, D, B we get angle(A, D, B) == orientation(A, D, B) mod 360
By perpendicular_angle_conditions_v0 on J, D, G we get angle(J, D, G) == orientation(D, G, J) mod 360
By collinear_definition on G, D, A we get D in Line(A, G), A in Line(D, G), Line(A, G) == Line(D, G), 0 == 2 * angle(D, G, A) mod 360
By perpendicular_angle_conditions_v0 on G, D, J we get angle(G, D, J) == orientation(D, J, G) mod 360
By collinear_definition on D, A, G we get A in Line(D, G), G in Line(A, D), Line(A, D) == Line(D, G), 0 == 2 * angle(A, D, G) mod 360
By perpendicular_angle_conditions_v0 on A, D, C we get angle(A, D, C) == orientation(A, D, C) mod 360
By perpendicular_angle_conditions_v0 on C, D, A we get angle(C, D, A) == orientation(A, C, D) mod 360
By same_angle_v1 on C, D, B, H we get angle(B, C, H) == angle(D, C, H) mod 360
By same_angle_v0 on B, E, G, A we get angle(E, B, A) == angle(G, B, A) mod 360
By same_angle_v0 on E, B, G, C we get angle(B, E, C) == angle(G, E, C) mod 360
By same_angle_v0 on B, D, C, F we get angle(C, B, F) == angle(D, B, F) mod 360
By same_angle_v2 on F, H, C, B we get angle(H, F, B) == angle(C, F, B) + 180 mod 360
By same_angle_v1 on B, F, A, G we get angle(A, B, G) == angle(F, B, G) mod 360
By same_angle_v3 on F, C, H, A we get angle(C, F, A) == angle(H, F, A) + 180 mod 360
By same_angle_v2 on F, B, A, C we get angle(B, F, C) == angle(A, F, C) + 180 mod 360
By same_angle_v1 on B, G, E, D we get angle(E, B, D) == angle(G, B, D) mod 360
By same_angle_v2 on E, A, C, G we get angle(A, E, G) == angle(C, E, G) + 180 mod 360
By same_angle_v0 on C, A, E, H we get angle(A, C, H) == angle(E, C, H) mod 360
By same_angle_v0 on C, H, F, B we get angle(F, C, B) == angle(H, C, B) mod 360
By same_angle_v1 on C, H, F, E we get angle(F, C, E) == angle(H, C, E) mod 360
By same_angle_v2 on D, C, B, G we get angle(C, D, G) == angle(B, D, G) + 180 mod 360
By same_angle_v0 on B, D, C, G we get angle(C, B, G) == angle(D, B, G) mod 360
By same_angle_v3 on G, B, E, D we get angle(B, G, D) == angle(E, G, D) + 180 mod 360
By same_angle_v1 on B, A, F, E we get angle(A, B, E) == angle(F, B, E) mod 360
By same_angle_v0 on B, D, C, A we get angle(C, B, A) == angle(D, B, A) mod 360
By same_angle_v1 on A, E, C, B we get angle(C, A, B) == angle(E, A, B) mod 360
By same_angle_v1 on B, F, A, C we get angle(A, B, C) == angle(F, B, C) mod 360
By same_angle_v0 on B, A, F, J we get angle(A, B, J) == angle(F, B, J) mod 360
By same_angle_v0 on A, F, B, E we get angle(B, A, E) == angle(F, A, E) mod 360
By same_angle_v0 on C, F, H, D we get angle(F, C, D) == angle(H, C, D) mod 360
By same_angle_v3 on E, A, C, B we get angle(A, E, B) == angle(C, E, B) + 180 mod 360
By same_angle_v1 on C, B, J, A we get angle(B, C, A) == angle(J, C, A) mod 360
By same_angle_v0 on B, C, D, E we get angle(C, B, E) == angle(D, B, E) mod 360
By same_angle_v0 on C, E, A, F we get angle(A, C, F) == angle(E, C, F) mod 360
By same_angle_v3 on F, A, B, H we get angle(A, F, H) == angle(B, F, H) + 180 mod 360
By same_angle_v1 on E, B, G, A we get angle(B, E, A) == angle(G, E, A) mod 360
By same_angle_v0 on A, F, B, C we get angle(B, A, C) == angle(F, A, C) mod 360
By same_angle_v2 on B, C, J, A we get angle(C, B, A) == angle(J, B, A) + 180 mod 360
By same_angle_v1 on C, D, B, F we get angle(B, C, F) == angle(D, C, F) mod 360
By same_angle_v1 on C, B, J, H we get angle(B, C, H) == angle(J, C, H) mod 360
By same_angle_v1 on A, E, C, F we get angle(C, A, F) == angle(E, A, F) mod 360
By same_angle_v1 on C, F, H, A we get angle(F, C, A) == angle(H, C, A) mod 360
By same_angle_v2 on B, C, J, G we get angle(C, B, G) == angle(J, B, G) + 180 mod 360
By same_angle_v1 on C, B, D, E we get angle(B, C, E) == angle(D, C, E) mod 360
By same_angle_v1 on B, E, G, C we get angle(E, B, C) == angle(G, B, C) mod 360
By same_angle_v0 on C, A, E, D we get angle(A, C, D) == angle(E, C, D) mod 360
By same_angle_v1 on B, F, A, D we get angle(A, B, D) == angle(F, B, D) mod 360
By same_angle_v2 on B, C, J, F we get angle(C, B, F) == angle(J, B, F) + 180 mod 360
By same_angle_v0 on B, E, G, J we get angle(E, B, J) == angle(G, B, J) mod 360
By same_angle_v1 on C, B, J, F we get angle(B, C, F) == angle(J, C, F) mod 360
By same_angle_v3 on B, C, J, E we get angle(C, B, E) == angle(J, B, E) + 180 mod 360
By same_angle_v0 on C, H, F, J we get angle(F, C, J) == angle(H, C, J) mod 360
By same_angle_v0 on B, G, E, F we get angle(E, B, F) == angle(G, B, F) mod 360
By same_angle_v1 on C, B, J, E we get angle(B, C, E) == angle(J, C, E) mod 360
By same_angle_v1 on C, B, D, A we get angle(B, C, A) == angle(D, C, A) mod 360
By same_angle_v0 on C, A, E, B we get angle(A, C, B) == angle(E, C, B) mod 360
By same_angle_v0 on C, E, A, J we get angle(A, C, J) == angle(E, C, J) mod 360
By altitude_definition on G, J, B, i we get i == altitude(G, B, J)
By altitude_definition on B, G, A, g we get g == altitude(B, A, G)
By altitude_definition on J, D, G, g we get g == altitude(J, D, G)
By collinear_definition on F, A, B we get A in Line(B, F), B in Line(A, F), Line(A, F) == Line(B, F), 0 == 2 * angle(A, F, B) mod 360
By perpendicular_angle_conditions_v0 on H, F, A we get angle(H, F, A) == orientation(A, H, F) mod 360
By perpendicular_angle_conditions_v0 on G, D, B we get angle(G, D, B) == orientation(B, G, D) mod 360
By altitude_definition on B, H, F, f we get f == altitude(B, F, H)
By altitude_definition on A, J, D, i we get i == altitude(A, D, J)
By altitude_definition on C, G, B, h we get h == altitude(C, B, G)
By altitude_definition on B, E, A, j we get j == altitude(B, A, E)
By perpendicular_angle_conditions_v0 on C, F, B we get angle(C, F, B) == orientation(B, C, F) mod 360
By perpendicular_angle_conditions_v0 on A, F, C we get angle(A, F, C) == orientation(A, F, C) mod 360
By perpendicular_angle_conditions_v0 on B, F, H we get angle(B, F, H) == orientation(B, F, H) mod 360
By altitude_definition on G, C, A, j we get j == altitude(G, A, C)
By altitude_definition on G, C, D, i we get i == altitude(G, C, D)
By altitude_definition on J, D, A, g we get g == altitude(J, A, D)
By altitude_definition on A, D, B, i we get i == altitude(A, B, D)
By collinear_definition on H, F, C we get F in Line(C, H), C in Line(F, H), Line(C, H) == Line(F, H), 0 == 2 * angle(F, H, C) mod 360
By collinear_definition on J, C, B we get C in Line(B, J), B in Line(C, J), Line(B, J) == Line(C, J), 0 == 2 * angle(C, J, B) mod 360
By altitude_definition on B, H, C, f we get f == altitude(B, C, H)
By perpendicular_angle_conditions_v0 on C, F, A we get angle(C, F, A) == orientation(A, C, F) mod 360
By altitude_definition on B, F, C, f we get f == altitude(B, C, F)
By altitude_definition on A, J, B, i we get i == altitude(A, B, J)
By altitude_definition on A, C, F, f we get f == altitude(A, C, F)
By perpendicular_angle_conditions_v0 on C, D, G we get angle(C, D, G) == orientation(C, D, G) mod 360
By collinear_definition on A, E, C we get E in Line(A, C), C in Line(A, E), Line(A, C) == Line(A, E), 0 == 2 * angle(E, A, C) mod 360
By altitude_definition on G, C, J, i we get i == altitude(G, C, J)
By perpendicular_angle_conditions_v0 on A, E, G we get angle(A, E, G) == orientation(A, E, G) mod 360
By altitude_definition on C, A, F, k we get k == altitude(C, A, F)
By perpendicular_angle_conditions_v0 on G, D, C we get angle(G, D, C) == orientation(C, G, D) mod 360
By altitude_definition on A, C, H, f we get f == altitude(A, C, H)
By collinear_definition on B, G, E we get G in Line(B, E), E in Line(B, G), Line(B, E) == Line(B, G), 0 == 2 * angle(G, B, E) mod 360
By altitude_definition on G, C, B, i we get i == altitude(G, B, C)
By perpendicular_angle_conditions_v0 on G, E, A we get angle(G, E, A) == orientation(A, G, E) mod 360
By collinear_definition on E, G, B we get G in Line(B, E), B in Line(E, G), Line(B, E) == Line(E, G), 0 == 2 * angle(G, E, B) mod 360
By collinear_definition on B, A, F we get A in Line(B, F), F in Line(A, B), Line(A, B) == Line(B, F), 0 == 2 * angle(A, B, F) mod 360
By altitude_definition on C, D, G, g we get g == altitude(C, D, G)
By altitude_definition on A, J, C, i we get i == altitude(A, C, J)
By altitude_definition on G, A, E, j we get j == altitude(G, A, E)
By collinear_definition on C, B, J we get B in Line(C, J), J in Line(B, C), Line(B, C) == Line(C, J), 0 == 2 * angle(B, C, J) mod 360
By perpendicular_angle_conditions_v0 on B, E, C we get angle(B, E, C) == orientation(B, E, C) mod 360
By collinear_definition on C, F, H we get F in Line(C, H), H in Line(C, F), Line(C, F) == Line(C, H), 0 == 2 * angle(F, C, H) mod 360
By altitude_definition on A, C, D, i we get i == altitude(A, C, D)
By altitude_definition on A, G, E, h we get h == altitude(A, E, G)
By altitude_definition on C, E, B, h we get h == altitude(C, B, E)
By altitude_definition on J, A, G, g we get g == altitude(J, A, G)
By collinear_definition on F, H, C we get H in Line(C, F), C in Line(F, H), Line(C, F) == Line(F, H), 0 == 2 * angle(H, F, C) mod 360
By collinear_definition on B, D, C we get D in Line(B, C), C in Line(B, D), Line(B, C) == Line(B, D), 0 == 2 * angle(D, B, C) mod 360
By altitude_definition on C, G, A, g we get g == altitude(C, A, G)
By collinear_definition on C, B, D we get B in Line(C, D), D in Line(B, C), Line(B, C) == Line(C, D), 0 == 2 * angle(B, C, D) mod 360
By collinear_definition on J, B, C we get B in Line(C, J), C in Line(B, J), Line(B, J) == Line(C, J), 0 == 2 * angle(B, J, C) mod 360
By collinear_definition on C, A, E we get A in Line(C, E), E in Line(A, C), Line(A, C) == Line(C, E), 0 == 2 * angle(A, C, E) mod 360
By perpendicular_angle_conditions_v0 on C, E, G we get angle(C, E, G) == orientation(C, E, G) mod 360
By collinear_definition on F, C, H we get C in Line(F, H), H in Line(C, F), Line(C, F) == Line(F, H), 0 == 2 * angle(C, F, H) mod 360
By altitude_definition on H, B, F, k we get k == altitude(H, B, F)
By collinear_definition on E, B, G we get B in Line(E, G), G in Line(B, E), Line(B, E) == Line(E, G), 0 == 2 * angle(B, E, G) mod 360
By altitude_definition on G, B, D, i we get i == altitude(G, B, D)
By perpendicular_angle_conditions_v0 on A, E, B we get angle(A, E, B) == orientation(A, E, B) mod 360
By altitude_definition on C, E, G, h we get h == altitude(C, E, G)
By collinear_definition on A, F, B we get F in Line(A, B), B in Line(A, F), Line(A, B) == Line(A, F), 0 == 2 * angle(F, A, B) mod 360
By collinear_definition on A, B, F we get B in Line(A, F), F in Line(A, B), Line(A, B) == Line(A, F), 0 == 2 * angle(B, A, F) mod 360
By altitude_definition on A, H, F, f we get f == altitude(A, F, H)
By altitude_definition on B, D, A, g we get g == altitude(B, A, D)
By altitude_definition on A, G, B, h we get h == altitude(A, B, G)
By collinear_definition on C, E, A we get E in Line(A, C), A in Line(C, E), Line(A, C) == Line(C, E), 0 == 2 * angle(E, C, A) mod 360
By altitude_definition on G, J, D, i we get i == altitude(G, D, J)
By altitude_definition on A, E, B, h we get h == altitude(A, B, E)
By collinear_definition on E, C, A we get C in Line(A, E), A in Line(C, E), Line(A, E) == Line(C, E), 0 == 2 * angle(C, E, A) mod 360
By altitude_definition on G, E, C, j we get j == altitude(G, C, E)
By collinear_definition on C, H, F we get H in Line(C, F), F in Line(C, H), Line(C, F) == Line(C, H), 0 == 2 * angle(H, C, F) mod 360
By altitude_definition on H, B, A, k we get k == altitude(H, A, B)
By altitude_definition on B, E, C, j we get j == altitude(B, C, E)
By collinear_definition on D, C, B we get C in Line(B, D), B in Line(C, D), Line(B, D) == Line(C, D), 0 == 2 * angle(C, D, B) mod 360
By collinear_definition on B, F, A we get F in Line(A, B), A in Line(B, F), Line(A, B) == Line(B, F), 0 == 2 * angle(F, B, A) mod 360
By collinear_definition on C, D, B we get D in Line(B, C), B in Line(C, D), Line(B, C) == Line(C, D), 0 == 2 * angle(D, C, B) mod 360
By perpendicular_angle_conditions_v0 on B, E, A we get angle(B, E, A) == orientation(A, B, E) mod 360
By collinear_definition on G, B, E we get B in Line(E, G), E in Line(B, G), Line(B, G) == Line(E, G), 0 == 2 * angle(B, G, E) mod 360
By collinear_definition on G, E, B we get E in Line(B, G), B in Line(E, G), Line(B, G) == Line(E, G), 0 == 2 * angle(E, G, B) mod 360
By altitude_definition on B, D, G, g we get g == altitude(B, D, G)
By collinear_definition on B, C, D we get C in Line(B, D), D in Line(B, C), Line(B, C) == Line(B, D), 0 == 2 * angle(C, B, D) mod 360
By altitude_definition on C, A, D, g we get g == altitude(C, A, D)
By collinear_definition on E, A, C we get A in Line(C, E), C in Line(A, E), Line(A, E) == Line(C, E), 0 == 2 * angle(A, E, C) mod 360
By collinear_definition on D, B, C we get B in Line(C, D), C in Line(B, D), Line(B, D) == Line(C, D), 0 == 2 * angle(B, D, C) mod 360
By perpendicular_angle_conditions_v0 on B, D, G we get angle(B, D, G) == orientation(B, D, G) mod 360
By collinear_definition on B, J, C we get J in Line(B, C), C in Line(B, J), Line(B, C) == Line(B, J), 0 == 2 * angle(J, B, C) mod 360
By altitude_definition on H, A, F, k we get k == altitude(H, A, F)
By altitude_definition on C, F, B, k we get k == altitude(C, B, F)
By collinear_definition on B, E, G we get E in Line(B, G), G in Line(B, E), Line(B, E) == Line(B, G), 0 == 2 * angle(E, B, G) mod 360
By collinear_definition on H, C, F we get C in Line(F, H), F in Line(C, H), Line(C, H) == Line(F, H), 0 == 2 * angle(C, H, F) mod 360
By perpendicular_angle_conditions_v0 on B, F, C we get angle(B, F, C) == orientation(B, F, C) mod 360
By perpendicular_angle_conditions_v0 on H, F, B we get angle(H, F, B) == orientation(B, H, F) mod 360
By perpendicular_angle_conditions_v0 on A, F, H we get angle(A, F, H) == orientation(A, F, H) mod 360
By collinear_definition on F, B, A we get B in Line(A, F), A in Line(B, F), Line(A, F) == Line(B, F), 0 == 2 * angle(B, F, A) mod 360
By collinear_definition on C, J, B we get J in Line(B, C), B in Line(C, J), Line(B, C) == Line(C, J), 0 == 2 * angle(J, C, B) mod 360
By collinear_definition on B, C, J we get C in Line(B, J), J in Line(B, C), Line(B, C) == Line(B, J), 0 == 2 * angle(C, B, J) mod 360
By perpendicular_angle_conditions_v0 on G, E, C we get angle(G, E, C) == orientation(C, G, E) mod 360
By collinear_definition on A, C, E we get C in Line(A, E), E in Line(A, C), Line(A, C) == Line(A, E), 0 == 2 * angle(C, A, E) mod 360
By perpendicular_angle_conditions_v0 on C, E, B we get angle(C, E, B) == orientation(B, C, E) mod 360
By power_of_a_point_definition on G, A, D, d we get log(power_of_a_point(G, d)) == log(distance(A, G)) + log(distance(D, G))
By power_of_a_point_definition on D, A, G, c we get log(power_of_a_point(D, c)) == log(distance(A, D)) + log(distance(D, G))
By concyclic_sufficient_conditions_v1 on G, E, C, D we get concyclic(C, D, E, G)
By concyclic_sufficient_conditions_v0 on B, E, A, D we get concyclic(A, B, D, E)
By line_intersection_definition on orthocenter(A, B, C), j, i we get orthocenter(A, B, C) == line_intersection(i, j)
By concyclic_sufficient_conditions_v0 on A, F, C, D we get concyclic(A, C, D, F)
By concyclic_sufficient_conditions_v0 on B, F, C, E we get concyclic(B, C, E, F)
By line_intersection_definition on J, Line(I, J), g we get J == line_intersection(g, Line(I, J))
By line_intersection_definition on orthocenter(A, B, C), k, i we get orthocenter(A, B, C) == line_intersection(i, k)
By line_intersection_definition on G, i, Line(G, H) we get G == line_intersection(i, Line(G, H))
By line_intersection_definition on A, h, Line(A, H) we get A == line_intersection(h, Line(A, H))
By line_intersection_definition on G, Line(G, I), j we get G == line_intersection(j, Line(G, I))
By line_intersection_definition on H, Line(A, H), k we get H == line_intersection(k, Line(A, H))
By line_intersection_definition on A, Line(A, I), h we get A == line_intersection(h, Line(A, I))
By line_intersection_definition on orthocenter(A, B, C), j, k we get orthocenter(A, B, C) == line_intersection(j, k)
By line_intersection_definition on A, Line(A, H), f we get A == line_intersection(f, Line(A, H))
By line_intersection_definition on D, i, Line(D, I) we get D == line_intersection(i, Line(D, I))
By line_intersection_definition on A, i, Line(A, J) we get A == line_intersection(i, Line(A, J))
By line_intersection_definition on A, Line(A, I), i we get A == line_intersection(i, Line(A, I))
By line_intersection_definition on G, Line(G, I), i we get G == line_intersection(i, Line(G, I))
By line_intersection_definition on A, f, Line(A, I) we get A == line_intersection(f, Line(A, I))
By line_intersection_definition on A, Line(A, H), i we get A == line_intersection(i, Line(A, H))
By line_intersection_definition on D, Line(D, I), g we get D == line_intersection(g, Line(D, I))
By line_intersection_definition on J, g, Line(A, J) we get J == line_intersection(g, Line(A, J))
By perpendicular_line_definition on orthocenter(A, B, C), i, g we get i == perpendicular_line(orthocenter(A, B, C), g)
By line_intersection_definition on A, Line(A, J), h we get A == line_intersection(h, Line(A, J))
By line_intersection_definition on A, Line(A, J), f we get A == line_intersection(f, Line(A, J))
By line_intersection_definition on H, k, Line(H, I) we get H == line_intersection(k, Line(H, I))
By line_intersection_definition on G, Line(G, H), j we get G == line_intersection(j, Line(G, H))
By perpendicular_line_definition on orthocenter(A, B, C), k, f we get k == perpendicular_line(orthocenter(A, B, C), f)
By perpendicular_line_definition on orthocenter(A, B, C), j, h we get j == perpendicular_line(orthocenter(A, B, C), h)
By line_unique_intersection_v0 on j, i, orthocenter(A, B, C), G we get G == orthocenter(A, B, C)
By perpendicular_direction_conditions_v0 on I, J, A, I we get perpendicular(Line(A, I), Line(I, J))
By same_angle_v0 on J, D, B, A we get angle(B, J, A) == angle(D, J, A) mod 360
By same_angle_v0 on J, B, D, I we get angle(B, J, I) == angle(D, J, I) mod 360
By same_angle_v0 on J, D, C, A we get angle(C, J, A) == angle(D, J, A) mod 360
By same_angle_v0 on J, D, C, I we get angle(C, J, I) == angle(D, J, I) mod 360
By between_implies_orientation on J, C, D, B we get orientation(B, J, D) == orientation(C, D, J) mod 360, orientation(B, J, C) == orientation(C, D, J) mod 360
By between_imply_not_between on C, E, A we get collinear_and_not_between(A, C, E)
By between_implies_orientation on G, H, F, C we get orientation(C, G, F) == orientation(F, G, H) mod 360, orientation(C, G, H) == orientation(F, G, H) mod 360
By between_implies_orientation on G, C, F, H we get orientation(C, F, G) == orientation(F, H, G) mod 360, orientation(C, F, G) == orientation(C, H, G) mod 360
By between_imply_not_between on B, D, C we get collinear_and_not_between(C, B, D)
By between_implies_orientation on J, B, D, C we get orientation(B, D, J) == orientation(C, J, D) mod 360, orientation(B, C, J) == orientation(B, D, J) mod 360
By between_implies_orientation on D, J, B, C we get orientation(B, C, D) == orientation(B, D, J) mod 360, orientation(B, D, J) == orientation(C, D, J) mod 360
By between_imply_not_between on E, G, B we get collinear_and_not_between(B, E, G)
By between_imply_not_between on J, B, C we get collinear_and_not_between(B, J, C)
By between_implies_orientation on D, C, B, J we get orientation(B, D, C) == orientation(B, J, D) mod 360, orientation(B, D, C) == orientation(C, J, D) mod 360
By between_imply_not_between on C, B, J we get collinear_and_not_between(B, C, J)
By between_imply_not_between on A, E, C we get collinear_and_not_between(C, A, E)
By circle_radius_v0_r on I, c we get radius(c) == distance(I, center(c))
By between_imply_not_between on H, F, C we get collinear_and_not_between(C, H, F)
By between_imply_not_between on A, F, B we get collinear_and_not_between(B, A, F)
By between_imply_not_between on C, D, B we get collinear_and_not_between(B, C, D)
By between_imply_not_between on B, G, E we get collinear_and_not_between(E, B, G)
By between_imply_not_between on A, G, D we get collinear_and_not_between(D, A, G)
By between_imply_not_between on D, G, A we get collinear_and_not_between(A, D, G)
By between_imply_not_between on B, F, A we get collinear_and_not_between(A, B, F)
By between_imply_not_between on C, F, H we get collinear_and_not_between(F, C, H)
By circle_radius_v0_r on A, c we get radius(c) == distance(A, center(c))
By circle_radius_v0_r on A, d we get radius(d) == distance(A, center(d))
By circle_radius_v0_r on H, c we get radius(c) == distance(H, center(c))
By circle_radius_v0_r on G, c we get radius(c) == distance(G, center(c))
By circle_radius_v0_r on D, d we get radius(d) == distance(D, center(d))
By circle_radius_v0_r on J, d we get radius(d) == distance(J, center(d))
By angle_to_center on A, G, H, c we get 2 * angle(A, G, H) == angle(A, center(c), H) mod 360
By circle_radius_v0_r on I, d we get radius(d) == distance(I, center(d))
By angle_to_center on H, I, G, c we get 2 * angle(H, I, G) == angle(H, center(c), G) mod 360
By angle_to_center on A, J, D, d we get 2 * angle(A, J, D) == angle(A, center(d), D) mod 360
By angle_to_center on A, I, G, c we get 2 * angle(A, I, G) == angle(A, center(c), G) mod 360
By angle_to_center on D, A, I, d we get 2 * angle(D, A, I) == angle(D, center(d), I) mod 360
By angle_to_center on D, J, A, d we get 2 * angle(D, J, A) == angle(D, center(d), A) mod 360
By orthocenter_concurrency on A, C, F we get orthocenter(A, C, F) in altitude(A, C, F), orthocenter(A, C, F) in altitude(C, A, F), orthocenter(A, C, F) in altitude(F, A, C)
By angle_to_center on J, I, D, d we get 2 * angle(J, I, D) == angle(J, center(d), D) mod 360
By angle_to_center on I, A, J, d we get 2 * angle(I, A, J) == angle(I, center(d), J) mod 360
By angle_to_center on G, I, H, c we get 2 * angle(G, I, H) == angle(G, center(c), H) mod 360
By angle_to_center on A, I, J, d we get 2 * angle(A, I, J) == angle(A, center(d), J) mod 360
By angle_to_center on D, I, A, d we get 2 * angle(D, I, A) == angle(D, center(d), A) mod 360
By angle_to_center on A, D, J, d we get 2 * angle(A, D, J) == angle(A, center(d), J) mod 360
By angle_to_center on I, H, A, c we get 2 * angle(I, H, A) == angle(I, center(c), A) mod 360
By angle_to_center on I, J, A, d we get 2 * angle(I, J, A) == angle(I, center(d), A) mod 360
By angle_to_center on I, A, G, c we get 2 * angle(I, A, G) == angle(I, center(c), G) mod 360
By angle_to_center on D, I, J, d we get 2 * angle(D, I, J) == angle(D, center(d), J) mod 360
By angle_to_center on J, D, I, d we get 2 * angle(J, D, I) == angle(J, center(d), I) mod 360
By center_not_on_circle on c we get center(c) not in c
By angle_to_center on A, J, I, d we get 2 * angle(A, J, I) == angle(A, center(d), I) mod 360
By angle_to_center on A, G, I, c we get 2 * angle(A, G, I) == angle(A, center(c), I) mod 360
By angle_to_center on A, D, I, d we get 2 * angle(A, D, I) == angle(A, center(d), I) mod 360
By angle_to_center on H, A, G, c we get 2 * angle(H, A, G) == angle(H, center(c), G) mod 360
By angle_to_center on A, I, D, d we get 2 * angle(A, I, D) == angle(A, center(d), D) mod 360
By angle_to_center on I, G, A, c we get 2 * angle(I, G, A) == angle(I, center(c), A) mod 360
By angle_to_center on A, H, I, c we get 2 * angle(A, H, I) == angle(A, center(c), I) mod 360
By angle_to_center on I, J, D, d we get 2 * angle(I, J, D) == angle(I, center(d), D) mod 360
By angle_to_center on G, H, I, c we get 2 * angle(G, H, I) == angle(G, center(c), I) mod 360
By angle_to_center on I, D, A, d we get 2 * angle(I, D, A) == angle(I, center(d), A) mod 360
By angle_to_center on G, I, A, c we get 2 * angle(G, I, A) == angle(G, center(c), A) mod 360
By angle_to_center on J, I, A, d we get 2 * angle(J, I, A) == angle(J, center(d), A) mod 360
By angle_to_center on I, A, D, d we get 2 * angle(I, A, D) == angle(I, center(d), D) mod 360
By angle_to_center on I, A, H, c we get 2 * angle(I, A, H) == angle(I, center(c), H) mod 360
By angle_to_center on H, A, I, c we get 2 * angle(H, A, I) == angle(H, center(c), I) mod 360
By angle_to_center on H, G, A, c we get 2 * angle(H, G, A) == angle(H, center(c), A) mod 360
By angle_to_center on I, G, H, c we get 2 * angle(I, G, H) == angle(I, center(c), H) mod 360
By angle_to_center on D, J, I, d we get 2 * angle(D, J, I) == angle(D, center(d), I) mod 360
By angle_to_center on G, H, A, c we get 2 * angle(G, H, A) == angle(G, center(c), A) mod 360
By angle_to_center on G, A, I, c we get 2 * angle(G, A, I) == angle(G, center(c), I) mod 360
By angle_to_center on H, G, I, c we get 2 * angle(H, G, I) == angle(H, center(c), I) mod 360
By angle_to_center on I, D, J, d we get 2 * angle(I, D, J) == angle(I, center(d), J) mod 360
By angle_to_center on J, A, D, d we get 2 * angle(J, A, D) == angle(J, center(d), D) mod 360
By angle_to_center on A, H, G, c we get 2 * angle(A, H, G) == angle(A, center(c), G) mod 360
By angle_to_center on D, A, J, d we get 2 * angle(D, A, J) == angle(D, center(d), J) mod 360
By angle_to_center on J, D, A, d we get 2 * angle(J, D, A) == angle(J, center(d), A) mod 360
By angle_to_center on G, A, H, c we get 2 * angle(G, A, H) == angle(G, center(c), H) mod 360
By angle_to_center on H, I, A, c we get 2 * angle(H, I, A) == angle(H, center(c), A) mod 360
By angle_to_center on J, A, I, d we get 2 * angle(J, A, I) == angle(J, center(d), I) mod 360
By angle_to_center on A, I, H, c we get 2 * angle(A, I, H) == angle(A, center(c), H) mod 360
By angle_to_center on I, H, G, c we get 2 * angle(I, H, G) == angle(I, center(c), G) mod 360
By center_not_on_circle on d we get center(d) not in d
By divide_by_2_mod_180_v0 on D, B, E, D, A, E we get angle(D, A, E) == angle(D, B, E) mod 360
By divide_by_2_mod_180_v0 on E, C, H, G, B, A we get angle(E, C, H) == angle(G, B, A) mod 360
By orthocenter_concurrency on C, B, F we get orthocenter(B, C, F) in altitude(C, B, F), orthocenter(B, C, F) in altitude(B, C, F), orthocenter(B, C, F) in altitude(F, B, C)
By orthocenter_concurrency on C, G, E we get orthocenter(C, E, G) in altitude(C, E, G), orthocenter(C, E, G) in altitude(G, C, E), orthocenter(C, E, G) in altitude(E, C, G)
By orthocenter_concurrency on H, A, F we get orthocenter(A, F, H) in altitude(H, A, F), orthocenter(A, F, H) in altitude(A, F, H), orthocenter(A, F, H) in altitude(F, A, H)
By reverse_direction on C, J we get 180 == direction(C, J) - direction(J, C) mod 360
By orthocenter_concurrency on A, G, E we get orthocenter(A, E, G) in altitude(A, E, G), orthocenter(A, E, G) in altitude(G, A, E), orthocenter(A, E, G) in altitude(E, A, G)
By orthocenter_concurrency on A, B, E we get orthocenter(A, B, E) in altitude(A, B, E), orthocenter(A, B, E) in altitude(B, A, E), orthocenter(A, B, E) in altitude(E, A, B)
By in_imply_collinear on orthocenter(A, B, C), C, H we get collinear(C, H, orthocenter(A, B, C))
By divide_by_2_mod_180_v3 on I, J, B, I, A, G we get angle(I, J, B) == angle(I, A, G) + 180 mod 360
By orthocenter_concurrency on B, C, E we get orthocenter(B, C, E) in altitude(B, C, E), orthocenter(B, C, E) in altitude(C, B, E), orthocenter(B, C, E) in altitude(E, B, C)
By divide_by_2_mod_180_v1 on A, J, C, A, J, D we get angle(A, J, C) == angle(A, J, D) mod 360
By orthocenter_concurrency on C, G, A we get orthocenter(A, C, G) in altitude(C, A, G), orthocenter(A, C, G) in altitude(G, A, C), orthocenter(A, C, G) in altitude(A, C, G)
By orthocenter_concurrency on B, A, G we get orthocenter(A, B, G) in altitude(B, A, G), orthocenter(A, B, G) in altitude(A, B, G), orthocenter(A, B, G) in altitude(G, A, B)
By in_imply_collinear on orthocenter(A, B, C), B, G we get collinear(B, G, orthocenter(A, B, C))
By orthocenter_concurrency on A, J, D we get orthocenter(A, D, J) in altitude(A, D, J), orthocenter(A, D, J) in altitude(J, A, D), orthocenter(A, D, J) in altitude(D, A, J)
By orthocenter_concurrency on H, B, F we get orthocenter(B, F, H) in altitude(H, B, F), orthocenter(B, F, H) in altitude(B, F, H), orthocenter(B, F, H) in altitude(F, B, H)
By divide_by_2_mod_180_v0 on G, A, E, D, B, E we get angle(D, B, E) == angle(G, A, E) mod 360
By divide_by_2_mod_180_v1 on D, C, A, A, G, E we get angle(A, G, E) == angle(D, C, A) mod 360
By orthocenter_concurrency on J, G, D we get orthocenter(D, G, J) in altitude(J, D, G), orthocenter(D, G, J) in altitude(G, D, J), orthocenter(D, G, J) in altitude(D, G, J)
By orthocenter_concurrency on G, C, B we get orthocenter(B, C, G) in altitude(G, B, C), orthocenter(B, C, G) in altitude(C, B, G), orthocenter(B, C, G) in altitude(B, C, G)
By orthocenter_concurrency on B, G, D we get orthocenter(B, D, G) in altitude(B, D, G), orthocenter(B, D, G) in altitude(G, B, D), orthocenter(B, D, G) in altitude(D, B, G)
By divide_by_2_mod_180_v1 on E, A, D, G, B, C we get angle(E, A, D) == angle(G, B, C) mod 360
By orthocenter_concurrency on A, C, D we get orthocenter(A, C, D) in altitude(A, C, D), orthocenter(A, C, D) in altitude(C, A, D), orthocenter(A, C, D) in altitude(D, A, C)
By orthocenter_concurrency on B, A, D we get orthocenter(A, B, D) in altitude(B, A, D), orthocenter(A, B, D) in altitude(A, B, D), orthocenter(A, B, D) in altitude(D, A, B)
By divide_by_2_mod_180_v2 on I, A, D, I, J, C we get angle(I, A, D) == angle(I, J, C) + 180 mod 360
By divide_by_2_mod_180_v0 on H, C, D, B, A, D we get angle(B, A, D) == angle(H, C, D) mod 360
By aa_anti_similarity on C, F, B, A, D, B we get anti_similar_triangles(A, B, D, C, B, F)
By probably_between_and_collinear_implies_between on J, B, D we get between(D, B, J)
By orthocenter_concurrency on C, G, D we get orthocenter(C, D, G) in altitude(C, D, G), orthocenter(C, D, G) in altitude(G, C, D), orthocenter(C, D, G) in altitude(D, C, G)
By divide_by_2_mod_180_v0 on B, A, G, F, C, D we get angle(B, A, G) == angle(F, C, D) mod 360
By divide_by_2_mod_180_v2 on D, A, C, J, B, E we get angle(D, A, C) == angle(J, B, E) + 180 mod 360
By divide_by_2_mod_180_v2 on E, C, B, B, G, A we get angle(E, C, B) == angle(B, G, A) + 180 mod 360
By divide_by_2_mod_180_v0 on E, B, F, E, C, H we get angle(E, B, F) == angle(E, C, H) mod 360
By divide_by_2_mod_180_v1 on H, C, A, A, B, E we get angle(A, B, E) == angle(H, C, A) mod 360
By divide_by_2_mod_180_v0 on C, B, E, G, A, C we get angle(C, B, E) == angle(G, A, C) mod 360
By divide_by_2_mod_180_v1 on F, C, E, A, B, G we get angle(A, B, G) == angle(F, C, E) mod 360
By divide_by_2_mod_180_v1 on F, C, E, A, B, E we get angle(A, B, E) == angle(F, C, E) mod 360
By divide_by_2_mod_180_v1 on I, J, C, I, J, D we get angle(I, J, C) == angle(I, J, D) mod 360
By divide_by_2_mod_180_v0 on A, C, D, B, G, D we get angle(A, C, D) == angle(B, G, D) mod 360
By divide_by_2_mod_180_v1 on D, C, F, G, A, F we get angle(D, C, F) == angle(G, A, F) mod 360
By divide_by_2_mod_180_v1 on B, C, H, G, A, F we get angle(B, C, H) == angle(G, A, F) mod 360
By divide_by_2_mod_180_v0 on E, C, D, E, G, A we get angle(E, C, D) == angle(E, G, A) mod 360
By divide_by_2_mod_180_v0 on B, G, D, A, C, B we get angle(A, C, B) == angle(B, G, D) mod 360
By divide_by_2_mod_180_v0 on E, C, B, E, G, A we get angle(E, C, B) == angle(E, G, A) mod 360
By divide_by_2_mod_180_v3 on J, C, E, A, G, B we get angle(J, C, E) == angle(A, G, B) + 180 mod 360
By divide_by_2_mod_180_v1 on I, J, B, I, J, D we get angle(I, J, B) == angle(I, J, D) mod 360
By divide_by_2_mod_180_v1 on C, A, G, G, B, C we get angle(C, A, G) == angle(G, B, C) mod 360
By divide_by_2_mod_180_v1 on E, B, D, C, A, D we get angle(C, A, D) == angle(E, B, D) mod 360
By divide_by_2_mod_180_v1 on E, B, C, C, A, G we get angle(C, A, G) == angle(E, B, C) mod 360
By divide_by_2_mod_180_v3 on J, C, A, D, G, E we get angle(J, C, A) == angle(D, G, E) + 180 mod 360
By divide_by_2_mod_180_v1 on A, G, E, D, C, E we get angle(A, G, E) == angle(D, C, E) mod 360
By divide_by_2_mod_180_v3 on J, B, E, G, A, C we get angle(J, B, E) == angle(G, A, C) + 180 mod 360
By divide_by_2_mod_180_v0 on B, A, G, F, C, J we get angle(B, A, G) == angle(F, C, J) mod 360
By divide_by_2_mod_180_v2 on A, G, B, B, C, A we get angle(A, G, B) == angle(B, C, A) + 180 mod 360
By divide_by_2_mod_180_v2 on D, G, E, D, C, A we get angle(D, G, E) == angle(D, C, A) + 180 mod 360
By probably_between_and_collinear_implies_between on C, D, J we get between(C, D, J)
By in_imply_collinear on orthocenter(A, B, C), E, G we get collinear(E, G, orthocenter(A, B, C))
By reverse_direction on H, C we get 180 == direction(H, C) - direction(C, H) mod 360
By divide_by_2_mod_180_v0 on E, C, F, E, B, A we get angle(E, B, A) == angle(E, C, F) mod 360
By divide_by_2_mod_180_v1 on D, A, B, B, C, H we get angle(B, C, H) == angle(D, A, B) mod 360
By in_imply_collinear on orthocenter(A, B, C), G, A we get collinear(A, G, orthocenter(A, B, C))
By divide_by_2_mod_180_v0 on H, C, B, B, A, D we get angle(B, A, D) == angle(H, C, B) mod 360
By divide_by_2_mod_180_v1 on A, G, E, B, C, E we get angle(A, G, E) == angle(B, C, E) mod 360
By in_imply_collinear on orthocenter(A, B, C), H, F we get collinear(F, H, orthocenter(A, B, C))
By divide_by_2_mod_180_v1 on B, C, A, A, G, E we get angle(A, G, E) == angle(B, C, A) mod 360
By divide_by_2_mod_180_v3 on J, C, A, A, G, B we get angle(J, C, A) == angle(A, G, B) + 180 mod 360
By divide_by_2_mod_180_v0 on E, C, F, G, B, F we get angle(E, C, F) == angle(G, B, F) mod 360
By divide_by_2_mod_180_v0 on G, B, F, A, C, H we get angle(A, C, H) == angle(G, B, F) mod 360
By divide_by_2_mod_180_v3 on B, G, A, A, C, D we get angle(B, G, A) == angle(A, C, D) + 180 mod 360
By divide_by_2_mod_180_v1 on G, A, B, J, C, H we get angle(G, A, B) == angle(J, C, H) mod 360
By divide_by_2_mod_180_v3 on B, C, E, A, G, B we get angle(B, C, E) == angle(A, G, B) + 180 mod 360
By divide_by_2_mod_180_v1 on G, A, B, B, C, F we get angle(B, C, F) == angle(G, A, B) mod 360
By divide_by_2_mod_180_v0 on E, B, F, A, C, F we get angle(A, C, F) == angle(E, B, F) mod 360
By divide_by_2_mod_180_v2 on G, B, J, C, A, G we get angle(G, B, J) == angle(C, A, G) + 180 mod 360
By divide_by_2_mod_180_v1 on A, B, E, F, C, A we get angle(A, B, E) == angle(F, C, A) mod 360
By divide_by_2_mod_180_v2 on A, C, B, E, G, D we get angle(A, C, B) == angle(E, G, D) + 180 mod 360
By divide_by_2_mod_180_v0 on E, B, A, A, C, H we get angle(A, C, H) == angle(E, B, A) mod 360
By divide_by_2_mod_180_v1 on G, B, C, C, A, D we get angle(C, A, D) == angle(G, B, C) mod 360
By divide_by_2_mod_180_v0 on F, A, D, F, C, B we get angle(F, A, D) == angle(F, C, B) mod 360
By in_imply_collinear on orthocenter(A, B, C), B, E we get collinear(B, E, orthocenter(A, B, C))
By divide_by_2_mod_180_v2 on I, A, G, I, J, B we get angle(I, A, G) == angle(I, J, B) + 180 mod 360
By divide_by_2_mod_180_v1 on F, C, E, F, B, E we get angle(F, B, E) == angle(F, C, E) mod 360
By divide_by_2_mod_180_v0 on A, C, F, G, B, F we get angle(A, C, F) == angle(G, B, F) mod 360
By in_imply_collinear on orthocenter(A, B, C), G, D we get collinear(D, G, orthocenter(A, B, C))
By divide_by_2_mod_180_v3 on C, A, G, E, B, J we get angle(C, A, G) == angle(E, B, J) + 180 mod 360
By divide_by_2_mod_180_v2 on G, B, J, E, A, G we get angle(G, B, J) == angle(E, A, G) + 180 mod 360
By divide_by_2_mod_180_v1 on F, B, G, F, C, A we get angle(F, B, G) == angle(F, C, A) mod 360
By divide_by_2_mod_180_v3 on E, G, D, A, C, D we get angle(E, G, D) == angle(A, C, D) + 180 mod 360
By divide_by_2_mod_180_v3 on G, H, I, C, J, I we get angle(G, H, I) == angle(C, J, I) + 180 mod 360
By divide_by_2_mod_180_v3 on E, A, G, E, B, J we get angle(E, A, G) == angle(E, B, J) + 180 mod 360
By divide_by_2_mod_180_v1 on C, A, D, G, B, D we get angle(C, A, D) == angle(G, B, D) mod 360
By divide_by_2_mod_180_v1 on B, C, H, D, A, F we get angle(B, C, H) == angle(D, A, F) mod 360
By divide_by_2_mod_180_v1 on D, A, F, D, C, H we get angle(D, A, F) == angle(D, C, H) mod 360
By divide_by_2_mod_180_v1 on E, A, G, G, B, C we get angle(E, A, G) == angle(G, B, C) mod 360
By divide_by_2_mod_180_v1 on B, C, H, G, A, B we get angle(B, C, H) == angle(G, A, B) mod 360
By divide_by_2_mod_180_v1 on E, A, D, G, B, D we get angle(E, A, D) == angle(G, B, D) mod 360
By aa_anti_similarity on B, E, C, A, D, C we get anti_similar_triangles(A, C, D, B, C, E)
By divide_by_2_mod_180_v1 on F, B, G, F, C, E we get angle(F, B, G) == angle(F, C, E) mod 360
By divide_by_2_mod_180_v1 on J, C, A, D, G, B we get angle(D, G, B) == angle(J, C, A) mod 360
By divide_by_2_mod_180_v1 on D, G, B, D, C, A we get angle(D, C, A) == angle(D, G, B) mod 360
By divide_by_2_mod_180_v3 on B, C, A, D, G, E we get angle(B, C, A) == angle(D, G, E) + 180 mod 360
By divide_by_2_mod_180_v0 on G, B, A, E, C, F we get angle(E, C, F) == angle(G, B, A) mod 360
By divide_by_2_mod_180_v0 on G, B, A, A, C, H we get angle(A, C, H) == angle(G, B, A) mod 360
By aa_anti_similarity on C, A, D, G, A, E we get anti_similar_triangles(A, C, D, A, G, E)
By divide_by_2_mod_180_v2 on G, A, E, J, B, E we get angle(G, A, E) == angle(J, B, E) + 180 mod 360
By divide_by_2_mod_180_v1 on D, A, F, B, C, F we get angle(B, C, F) == angle(D, A, F) mod 360
By divide_by_2_mod_180_v1 on A, J, B, A, I, D we get angle(A, I, D) == angle(A, J, B) mod 360
By in_imply_collinear on orthocenter(A, B, C), A, D we get collinear(A, D, orthocenter(A, B, C))
By divide_by_2_mod_180_v2 on E, C, D, B, G, A we get angle(E, C, D) == angle(B, G, A) + 180 mod 360
By divide_by_2_mod_180_v2 on E, B, J, C, A, G we get angle(E, B, J) == angle(C, A, G) + 180 mod 360
By divide_by_2_mod_180_v1 on H, C, E, A, B, G we get angle(A, B, G) == angle(H, C, E) mod 360
By divide_by_2_mod_180_v1 on A, G, E, J, C, A we get angle(A, G, E) == angle(J, C, A) mod 360
By divide_by_2_mod_180_v1 on D, G, B, B, C, E we get angle(B, C, E) == angle(D, G, B) mod 360
By divide_by_2_mod_180_v3 on J, B, G, G, A, C we get angle(J, B, G) == angle(G, A, C) + 180 mod 360
By divide_by_2_mod_180_v3 on D, C, E, D, G, E we get angle(D, C, E) == angle(D, G, E) + 180 mod 360
By divide_by_2_mod_180_v3 on G, A, I, B, J, I we get angle(G, A, I) == angle(B, J, I) + 180 mod 360
By between_imply_segment_sum on C, E, A we get distance(A, C) == distance(C, E) + distance(A, E)
By divide_by_2_mod_180_v0 on F, C, B, F, A, G we get angle(F, A, G) == angle(F, C, B) mod 360
By divide_by_2_mod_180_v0 on B, A, D, H, C, J we get angle(B, A, D) == angle(H, C, J) mod 360
By divide_by_2_mod_180_v0 on F, A, D, H, C, J we get angle(F, A, D) == angle(H, C, J) mod 360
By divide_by_2_mod_180_v1 on E, A, D, E, B, C we get angle(E, A, D) == angle(E, B, C) mod 360
By divide_by_2_mod_180_v0 on F, A, G, H, C, D we get angle(F, A, G) == angle(H, C, D) mod 360
By divide_by_2_mod_180_v0 on D, B, G, G, A, C we get angle(D, B, G) == angle(G, A, C) mod 360
By divide_by_2_mod_180_v2 on I, A, G, I, J, C we get angle(I, A, G) == angle(I, J, C) + 180 mod 360
By in_imply_collinear on orthocenter(A, B, C), C, F we get collinear(C, F, orthocenter(A, B, C))
By divide_by_2_mod_180_v2 on D, G, E, B, C, E we get angle(D, G, E) == angle(B, C, E) + 180 mod 360
By divide_by_2_mod_180_v0 on E, G, A, E, C, J we get angle(E, C, J) == angle(E, G, A) mod 360
By divide_by_2_mod_180_v0 on D, A, C, D, B, E we get angle(D, A, C) == angle(D, B, E) mod 360
By divide_by_2_mod_180_v0 on F, C, J, B, A, D we get angle(B, A, D) == angle(F, C, J) mod 360
By divide_by_2_mod_180_v2 on D, A, E, J, B, E we get angle(D, A, E) == angle(J, B, E) + 180 mod 360
By divide_by_2_mod_180_v1 on F, B, E, H, C, A we get angle(F, B, E) == angle(H, C, A) mod 360
By divide_by_2_mod_180_v3 on D, A, I, C, J, I we get angle(D, A, I) == angle(C, J, I) + 180 mod 360
By divide_by_2_mod_180_v1 on G, B, D, C, A, G we get angle(C, A, G) == angle(G, B, D) mod 360
By divide_by_2_mod_180_v2 on E, C, B, E, G, D we get angle(E, C, B) == angle(E, G, D) + 180 mod 360
By divide_by_2_mod_180_v1 on A, J, B, A, J, D we get angle(A, J, B) == angle(A, J, D) mod 360
By divide_by_2_mod_180_v3 on B, G, A, A, C, J we get angle(B, G, A) == angle(A, C, J) + 180 mod 360
By divide_by_2_mod_180_v0 on F, C, J, F, A, G we get angle(F, A, G) == angle(F, C, J) mod 360
By divide_by_2_mod_180_v0 on G, A, E, C, B, G we get angle(C, B, G) == angle(G, A, E) mod 360
By aa_anti_similarity on G, D, B, C, E, B we get anti_similar_triangles(B, C, E, B, G, D)
By divide_by_2_mod_180_v3 on B, C, E, D, G, E we get angle(B, C, E) == angle(D, G, E) + 180 mod 360
By divide_by_2_mod_180_v2 on A, C, J, E, G, D we get angle(A, C, J) == angle(E, G, D) + 180 mod 360
By line_inequality on Line(A, H), Line(H, I), A we get Line(A, H) != Line(H, I)
By divide_by_2_mod_180_v3 on B, G, A, E, C, J we get angle(B, G, A) == angle(E, C, J) + 180 mod 360
By divide_by_2_mod_180_v2 on C, J, I, G, A, I we get angle(C, J, I) == angle(G, A, I) + 180 mod 360
By reverse_direction on C, F we get 180 == direction(C, F) - direction(F, C) mod 360
By divide_by_2_mod_180_v3 on G, A, I, C, J, I we get angle(G, A, I) == angle(C, J, I) + 180 mod 360
By divide_by_2_mod_180_v0 on B, A, G, H, C, D we get angle(B, A, G) == angle(H, C, D) mod 360
By divide_by_2_mod_180_v2 on E, C, J, B, G, A we get angle(E, C, J) == angle(B, G, A) + 180 mod 360
By line_inequality on Line(H, I), Line(A, J), I we get Line(A, J) != Line(H, I)
By divide_by_2_mod_180_v0 on G, B, F, E, C, H we get angle(E, C, H) == angle(G, B, F) mod 360
By divide_by_2_mod_180_v3 on J, B, G, D, A, C we get angle(J, B, G) == angle(D, A, C) + 180 mod 360
By divide_by_2_mod_180_v0 on F, A, G, F, C, D we get angle(F, A, G) == angle(F, C, D) mod 360
By divide_by_2_mod_180_v0 on G, B, A, A, C, F we get angle(A, C, F) == angle(G, B, A) mod 360
By reverse_direction on E, B we get 180 == direction(E, B) - direction(B, E) mod 360
By divide_by_2_mod_180_v1 on D, A, F, J, C, H we get angle(D, A, F) == angle(J, C, H) mod 360
By divide_by_2_mod_180_v0 on F, C, D, B, A, D we get angle(B, A, D) == angle(F, C, D) mod 360
By divide_by_2_mod_180_v0 on F, A, G, H, C, J we get angle(F, A, G) == angle(H, C, J) mod 360
By line_inequality on Line(G, H), Line(G, I), H we get Line(G, H) != Line(G, I)
By divide_by_2_mod_180_v2 on G, A, C, J, B, E we get angle(G, A, C) == angle(J, B, E) + 180 mod 360
By divide_by_2_mod_180_v1 on F, C, A, F, B, E we get angle(F, B, E) == angle(F, C, A) mod 360
By divide_by_2_mod_180_v1 on H, C, E, F, B, E we get angle(F, B, E) == angle(H, C, E) mod 360
By divide_by_2_mod_180_v2 on A, G, B, B, C, E we get angle(A, G, B) == angle(B, C, E) + 180 mod 360
By divide_by_2_mod_180_v2 on A, G, B, D, C, A we get angle(A, G, B) == angle(D, C, A) + 180 mod 360
By divide_by_2_mod_180_v0 on E, B, F, E, C, F we get angle(E, B, F) == angle(E, C, F) mod 360
By divide_by_2_mod_180_v1 on J, C, F, D, A, F we get angle(D, A, F) == angle(J, C, F) mod 360
By between_imply_segment_sum on D, G, A we get distance(A, D) == distance(D, G) + distance(A, G)
By divide_by_2_mod_180_v0 on F, C, B, B, A, G we get angle(B, A, G) == angle(F, C, B) mod 360
By divide_by_2_mod_180_v2 on A, C, D, E, G, D we get angle(A, C, D) == angle(E, G, D) + 180 mod 360
By divide_by_2_mod_180_v3 on J, B, E, D, A, C we get angle(J, B, E) == angle(D, A, C) + 180 mod 360
By divide_by_2_mod_180_v0 on E, C, H, E, B, A we get angle(E, B, A) == angle(E, C, H) mod 360
By divide_by_2_mod_180_v2 on D, A, E, J, B, G we get angle(D, A, E) == angle(J, B, G) + 180 mod 360
By divide_by_2_mod_180_v2 on G, A, C, J, B, G we get angle(G, A, C) == angle(J, B, G) + 180 mod 360
By divide_by_2_mod_180_v0 on C, B, E, G, A, E we get angle(C, B, E) == angle(G, A, E) mod 360
By collinear_definition on C, D, J we get D in Line(C, J), J in Line(C, D), Line(C, D) == Line(C, J), 0 == 2 * angle(D, C, J) mod 360
By divide_by_2_mod_180_v2 on D, G, E, B, C, A we get angle(D, G, E) == angle(B, C, A) + 180 mod 360
By divide_by_2_mod_180_v0 on C, B, G, G, A, C we get angle(C, B, G) == angle(G, A, C) mod 360
By divide_by_2_mod_180_v3 on I, J, B, I, A, D we get angle(I, J, B) == angle(I, A, D) + 180 mod 360
By divide_by_2_mod_180_v0 on B, A, D, F, C, B we get angle(B, A, D) == angle(F, C, B) mod 360
By divide_by_2_mod_180_v0 on E, G, A, A, C, B we get angle(A, C, B) == angle(E, G, A) mod 360
By divide_by_2_mod_180_v1 on D, A, B, B, C, F we get angle(B, C, F) == angle(D, A, B) mod 360
By divide_by_2_mod_180_v1 on G, B, D, E, A, G we get angle(E, A, G) == angle(G, B, D) mod 360
By line_containment_inequality on orthocenter(A, B, C), C, j we get C != orthocenter(A, B, C)
By divide_by_2_mod_180_v3 on I, J, C, I, A, G we get angle(I, J, C) == angle(I, A, G) + 180 mod 360
By divide_by_2_mod_180_v1 on A, B, G, H, C, A we get angle(A, B, G) == angle(H, C, A) mod 360
By divide_by_2_mod_180_v0 on E, G, A, A, C, D we get angle(A, C, D) == angle(E, G, A) mod 360
By divide_by_2_mod_180_v1 on E, B, C, C, A, D we get angle(C, A, D) == angle(E, B, C) mod 360
By divide_by_2_mod_180_v0 on A, C, J, E, G, A we get angle(A, C, J) == angle(E, G, A) mod 360
By divide_by_2_mod_180_v3 on D, A, I, B, J, I we get angle(D, A, I) == angle(B, J, I) + 180 mod 360
By divide_by_2_mod_180_v0 on C, B, E, D, A, C we get angle(C, B, E) == angle(D, A, C) mod 360
By divide_by_2_mod_180_v1 on D, A, B, J, C, H we get angle(D, A, B) == angle(J, C, H) mod 360
By divide_by_2_mod_180_v0 on H, C, J, B, A, G we get angle(B, A, G) == angle(H, C, J) mod 360
By divide_by_2_mod_180_v0 on B, G, D, E, C, D we get angle(B, G, D) == angle(E, C, D) mod 360
By divide_by_2_mod_180_v2 on E, B, J, E, A, D we get angle(E, B, J) == angle(E, A, D) + 180 mod 360
By divide_by_2_mod_180_v0 on D, A, E, D, B, G we get angle(D, A, E) == angle(D, B, G) mod 360
By divide_by_2_mod_180_v1 on F, C, A, A, B, G we get angle(A, B, G) == angle(F, C, A) mod 360
By divide_by_2_mod_180_v1 on D, A, B, J, C, F we get angle(D, A, B) == angle(J, C, F) mod 360
By divide_by_2_mod_180_v2 on D, A, C, J, B, G we get angle(D, A, C) == angle(J, B, G) + 180 mod 360
By divide_by_2_mod_180_v2 on B, J, I, G, A, I we get angle(B, J, I) == angle(G, A, I) + 180 mod 360
By divide_by_2_mod_180_v0 on B, J, A, D, I, A we get angle(B, J, A) == angle(D, I, A) mod 360
By divide_by_2_mod_180_v3 on I, J, C, I, A, D we get angle(I, J, C) == angle(I, A, D) + 180 mod 360
By divide_by_2_mod_180_v2 on D, G, E, D, C, E we get angle(D, G, E) == angle(D, C, E) + 180 mod 360
By reverse_direction on C, E we get 180 == direction(C, E) - direction(E, C) mod 360
By divide_by_2_mod_180_v3 on C, A, D, E, B, J we get angle(C, A, D) == angle(E, B, J) + 180 mod 360
By divide_by_2_mod_180_v1 on A, B, E, H, C, E we get angle(A, B, E) == angle(H, C, E) mod 360
By divide_by_2_mod_180_v3 on E, G, D, E, C, D we get angle(E, G, D) == angle(E, C, D) + 180 mod 360
By line_circle_intersection_has_at_most_two_points_0 on J, D, C, d we get C not in d
By divide_by_2_mod_180_v2 on E, B, J, E, A, G we get angle(E, B, J) == angle(E, A, G) + 180 mod 360
By divide_by_2_mod_180_v3 on I, J, C, I, H, G we get angle(I, J, C) == angle(I, H, G) + 180 mod 360
By divide_by_2_mod_180_v1 on G, A, F, J, C, F we get angle(G, A, F) == angle(J, C, F) mod 360
By divide_by_2_mod_180_v0 on A, C, H, E, B, F we get angle(A, C, H) == angle(E, B, F) mod 360
By divide_by_2_mod_180_v2 on A, G, B, J, C, E we get angle(A, G, B) == angle(J, C, E) + 180 mod 360
By divide_by_2_mod_180_v0 on G, A, C, D, B, E we get angle(D, B, E) == angle(G, A, C) mod 360
By divide_by_2_mod_180_v3 on J, B, E, G, A, E we get angle(J, B, E) == angle(G, A, E) + 180 mod 360
By divide_by_2_mod_180_v2 on E, B, J, C, A, D we get angle(E, B, J) == angle(C, A, D) + 180 mod 360
By reverse_direction on C, B we get 180 == direction(C, B) - direction(B, C) mod 360
By divide_by_2_mod_180_v1 on H, C, E, F, B, G we get angle(F, B, G) == angle(H, C, E) mod 360
By divide_by_2_mod_180_v2 on I, H, G, I, J, B we get angle(I, H, G) == angle(I, J, B) + 180 mod 360
By divide_by_2_mod_180_v0 on D, A, C, C, B, G we get angle(C, B, G) == angle(D, A, C) mod 360
By divide_by_2_mod_180_v0 on B, A, G, H, C, B we get angle(B, A, G) == angle(H, C, B) mod 360
By divide_by_2_mod_180_v1 on G, A, F, D, C, H we get angle(D, C, H) == angle(G, A, F) mod 360
By divide_by_2_mod_180_v0 on C, J, A, D, I, A we get angle(C, J, A) == angle(D, I, A) mod 360
By divide_by_2_mod_180_v1 on C, A, G, E, B, D we get angle(C, A, G) == angle(E, B, D) mod 360
By divide_by_2_mod_180_v2 on A, C, B, B, G, A we get angle(A, C, B) == angle(B, G, A) + 180 mod 360
By divide_by_2_mod_180_v3 on D, C, A, A, G, B we get angle(D, C, A) == angle(A, G, B) + 180 mod 360
By divide_by_2_mod_180_v3 on J, B, E, D, A, E we get angle(J, B, E) == angle(D, A, E) + 180 mod 360
By divide_by_2_mod_180_v2 on B, J, I, D, A, I we get angle(B, J, I) == angle(D, A, I) + 180 mod 360
By aa_anti_similarity on C, F, A, B, E, A we get anti_similar_triangles(A, B, E, A, C, F)
By divide_by_2_mod_180_v1 on D, C, F, D, A, F we get angle(D, A, F) == angle(D, C, F) mod 360
By divide_by_2_mod_180_v3 on G, H, I, B, J, I we get angle(G, H, I) == angle(B, J, I) + 180 mod 360
By divide_by_2_mod_180_v1 on D, C, H, D, A, B we get angle(D, A, B) == angle(D, C, H) mod 360
By line_inequality on Line(G, H), Line(H, I), G we get Line(G, H) != Line(H, I)
By divide_by_2_mod_180_v1 on E, A, D, E, B, D we get angle(E, A, D) == angle(E, B, D) mod 360
By divide_by_2_mod_180_v3 on B, G, A, E, C, B we get angle(B, G, A) == angle(E, C, B) + 180 mod 360
By divide_by_2_mod_180_v2 on D, G, E, J, C, E we get angle(D, G, E) == angle(J, C, E) + 180 mod 360
By divide_by_2_mod_180_v1 on F, B, G, H, C, A we get angle(F, B, G) == angle(H, C, A) mod 360
By divide_by_2_mod_180_v0 on B, G, D, E, C, B we get angle(B, G, D) == angle(E, C, B) mod 360
By divide_by_2_mod_180_v1 on D, A, B, D, C, F we get angle(D, A, B) == angle(D, C, F) mod 360
By divide_by_2_mod_180_v0 on F, C, D, F, A, D we get angle(F, A, D) == angle(F, C, D) mod 360
By aa_anti_similarity on G, E, A, C, D, A we get anti_similar_triangles(A, C, D, A, G, E)
By divide_by_2_mod_180_v1 on J, C, H, G, A, F we get angle(G, A, F) == angle(J, C, H) mod 360
By divide_by_2_mod_180_v3 on E, G, D, A, C, B we get angle(E, G, D) == angle(A, C, B) + 180 mod 360
By between_imply_segment_sum on J, B, C we get distance(C, J) == distance(B, J) + distance(B, C)
By divide_by_2_mod_180_v0 on H, C, D, F, A, D we get angle(F, A, D) == angle(H, C, D) mod 360
By divide_by_2_mod_180_v1 on J, C, E, A, G, E we get angle(A, G, E) == angle(J, C, E) mod 360
By divide_by_2_mod_180_v0 on F, C, J, F, A, D we get angle(F, A, D) == angle(F, C, J) mod 360
By divide_by_2_mod_180_v3 on J, B, G, D, A, E we get angle(J, B, G) == angle(D, A, E) + 180 mod 360
By divide_by_2_mod_180_v2 on C, J, I, G, H, I we get angle(C, J, I) == angle(G, H, I) + 180 mod 360
By divide_by_2_mod_180_v0 on D, A, E, C, B, E we get angle(C, B, E) == angle(D, A, E) mod 360
By collinear_definition on D, B, J we get B in Line(D, J), J in Line(B, D), Line(B, D) == Line(D, J), 0 == 2 * angle(B, D, J) mod 360
By divide_by_2_mod_180_v2 on B, J, I, G, H, I we get angle(B, J, I) == angle(G, H, I) + 180 mod 360
By divide_by_2_mod_180_v2 on A, G, B, D, C, E we get angle(A, G, B) == angle(D, C, E) + 180 mod 360
By divide_by_2_mod_180_v0 on C, B, G, D, A, E we get angle(C, B, G) == angle(D, A, E) mod 360
By divide_by_2_mod_180_v2 on A, G, B, J, C, A we get angle(A, G, B) == angle(J, C, A) + 180 mod 360
By reverse_direction on B, C we get 180 == direction(B, C) - direction(C, B) mod 360
By divide_by_2_mod_180_v0 on G, A, E, D, B, G we get angle(D, B, G) == angle(G, A, E) mod 360
By divide_by_2_mod_180_v3 on J, B, G, G, A, E we get angle(J, B, G) == angle(G, A, E) + 180 mod 360
By divide_by_2_mod_180_v1 on J, C, E, D, G, B we get angle(D, G, B) == angle(J, C, E) mod 360
By reverse_direction on G, E we get 180 == direction(G, E) - direction(E, G) mod 360
By divide_by_2_mod_180_v1 on E, A, G, E, B, C we get angle(E, A, G) == angle(E, B, C) mod 360
By divide_by_2_mod_180_v0 on H, C, B, F, A, D we get angle(F, A, D) == angle(H, C, B) mod 360
By divide_by_2_mod_180_v2 on A, C, D, B, G, A we get angle(A, C, D) == angle(B, G, A) + 180 mod 360
By divide_by_2_mod_180_v1 on E, A, G, E, B, D we get angle(E, A, G) == angle(E, B, D) mod 360
By line_inequality on Line(I, J), Line(A, H), J we get Line(A, H) != Line(I, J)
By divide_by_2_mod_180_v3 on D, C, E, A, G, B we get angle(D, C, E) == angle(A, G, B) + 180 mod 360
By divide_by_2_mod_180_v0 on E, B, A, A, C, F we get angle(A, C, F) == angle(E, B, A) mod 360
By divide_by_2_mod_180_v3 on B, G, A, E, C, D we get angle(B, G, A) == angle(E, C, D) + 180 mod 360
By divide_by_2_mod_180_v2 on A, C, J, B, G, A we get angle(A, C, J) == angle(B, G, A) + 180 mod 360
By reverse_direction on E, C we get 180 == direction(E, C) - direction(C, E) mod 360
By divide_by_2_mod_180_v3 on E, A, D, E, B, J we get angle(E, A, D) == angle(E, B, J) + 180 mod 360
By divide_by_2_mod_180_v3 on E, G, D, E, C, B we get angle(E, G, D) == angle(E, C, B) + 180 mod 360
By divide_by_2_mod_180_v1 on A, J, C, A, I, D we get angle(A, I, D) == angle(A, J, C) mod 360
By divide_by_2_mod_180_v3 on I, J, B, I, H, G we get angle(I, J, B) == angle(I, H, G) + 180 mod 360
By divide_by_2_mod_180_v0 on D, A, C, D, B, G we get angle(D, A, C) == angle(D, B, G) mod 360
By divide_by_2_mod_180_v1 on B, C, F, G, A, F we get angle(B, C, F) == angle(G, A, F) mod 360
By divide_by_2_mod_180_v3 on B, G, A, A, C, B we get angle(B, G, A) == angle(A, C, B) + 180 mod 360
By between_imply_segment_sum on B, D, C we get distance(B, C) == distance(B, D) + distance(C, D)
By divide_by_2_mod_180_v3 on E, A, D, G, B, J we get angle(E, A, D) == angle(G, B, J) + 180 mod 360
By divide_by_2_mod_180_v1 on G, A, B, D, C, H we get angle(D, C, H) == angle(G, A, B) mod 360
By divide_by_2_mod_180_v3 on D, C, A, D, G, E we get angle(D, C, A) == angle(D, G, E) + 180 mod 360
By divide_by_2_mod_180_v1 on D, G, B, B, C, A we get angle(B, C, A) == angle(D, G, B) mod 360
By divide_by_2_mod_180_v2 on I, H, G, I, J, C we get angle(I, H, G) == angle(I, J, C) + 180 mod 360
By reverse_direction on B, G we get 180 == direction(B, G) - direction(G, B) mod 360
By aa_anti_similarity on G, A, E, C, A, D we get anti_similar_triangles(A, C, D, A, G, E)
By reverse_direction on B, J we get 180 == direction(B, J) - direction(J, B) mod 360
By divide_by_2_mod_180_v3 on J, C, E, D, G, E we get angle(J, C, E) == angle(D, G, E) + 180 mod 360
By line_inequality on Line(A, J), Line(A, H), J we get Line(A, H) != Line(A, J)
By aa_anti_similarity on C, E, B, G, D, B we get anti_similar_triangles(B, C, E, B, G, D)
By aa_anti_similarity on B, E, A, C, F, A we get anti_similar_triangles(A, B, E, A, C, F)
By reverse_direction on B, F we get 180 == direction(B, F) - direction(F, B) mod 360
By collinear_definition on D, J, B we get J in Line(B, D), B in Line(D, J), Line(B, D) == Line(D, J), 0 == 2 * angle(J, D, B) mod 360
By divide_by_2_mod_180_v1 on G, A, B, J, C, F we get angle(G, A, B) == angle(J, C, F) mod 360
By reverse_direction on B, E we get 180 == direction(B, E) - direction(E, B) mod 360
By divide_by_2_mod_180_v1 on G, A, B, D, C, F we get angle(D, C, F) == angle(G, A, B) mod 360
By line_containment_inequality on orthocenter(A, B, C), I, j we get I != orthocenter(A, B, C)
By aa_anti_similarity on B, A, E, C, A, F we get anti_similar_triangles(A, B, E, A, C, F)
By line_inequality on Line(G, H), Line(I, J), G we get Line(G, H) != Line(I, J)
By divide_by_2_mod_180_v1 on D, C, E, D, G, B we get angle(D, C, E) == angle(D, G, B) mod 360
By divide_by_2_mod_180_v2 on C, J, I, D, A, I we get angle(C, J, I) == angle(D, A, I) + 180 mod 360
By collinear_definition on J, C, D we get C in Line(D, J), D in Line(C, J), Line(C, J) == Line(D, J), 0 == 2 * angle(C, J, D) mod 360
By aa_anti_similarity on A, E, G, B, D, G we get anti_similar_triangles(A, E, G, B, D, G)
By collinear_definition on B, J, D we get J in Line(B, D), D in Line(B, J), Line(B, D) == Line(B, J), 0 == 2 * angle(J, B, D) mod 360
By divide_by_2_mod_180_v2 on G, B, J, C, A, D we get angle(G, B, J) == angle(C, A, D) + 180 mod 360
By reverse_direction on J, C we get 180 == direction(J, C) - direction(C, J) mod 360
By reverse_direction on B, D we get 180 == direction(B, D) - direction(D, B) mod 360
By between_imply_segment_sum on E, G, B we get distance(B, E) == distance(E, G) + distance(B, G)
By collinear_definition on D, J, C we get J in Line(C, D), C in Line(D, J), Line(C, D) == Line(D, J), 0 == 2 * angle(J, D, C) mod 360
By divide_by_2_mod_180_v0 on E, C, J, B, G, D we get angle(B, G, D) == angle(E, C, J) mod 360
By divide_by_2_mod_180_v3 on B, C, A, A, G, B we get angle(B, C, A) == angle(A, G, B) + 180 mod 360
By between_imply_segment_sum on H, F, C we get distance(C, H) == distance(F, H) + distance(C, F)
By divide_by_2_mod_180_v2 on E, C, J, E, G, D we get angle(E, C, J) == angle(E, G, D) + 180 mod 360
By reverse_direction on F, A we get 180 == direction(F, A) - direction(A, F) mod 360
By divide_by_2_mod_180_v2 on E, C, D, E, G, D we get angle(E, C, D) == angle(E, G, D) + 180 mod 360
By reverse_direction on G, B we get 180 == direction(G, B) - direction(B, G) mod 360
By aa_anti_similarity on B, G, D, A, G, E we get anti_similar_triangles(A, E, G, B, D, G)
By reverse_direction on C, A we get 180 == direction(C, A) - direction(A, C) mod 360
By aa_anti_similarity on B, C, E, A, C, D we get anti_similar_triangles(A, C, D, B, C, E)
By aa_anti_similarity on A, D, B, C, F, B we get anti_similar_triangles(A, B, D, C, B, F)
By divide_by_2_mod_180_v3 on E, A, G, G, B, J we get angle(E, A, G) == angle(G, B, J) + 180 mod 360
By divide_by_2_mod_180_v2 on I, A, D, I, J, B we get angle(I, A, D) == angle(I, J, B) + 180 mod 360
By divide_by_2_mod_180_v0 on F, A, G, H, C, B we get angle(F, A, G) == angle(H, C, B) mod 360
By divide_by_2_mod_180_v2 on G, A, E, J, B, G we get angle(G, A, E) == angle(J, B, G) + 180 mod 360
By reverse_direction on B, A we get 180 == direction(B, A) - direction(A, B) mod 360
By divide_by_2_mod_180_v3 on C, A, G, G, B, J we get angle(C, A, G) == angle(G, B, J) + 180 mod 360
By line_inequality on Line(G, I), Line(A, H), I we get Line(A, H) != Line(G, I)
By reverse_direction on F, B we get 180 == direction(F, B) - direction(B, F) mod 360
By between_imply_segment_sum on B, F, A we get distance(A, B) == distance(B, F) + distance(A, F)
By reverse_direction on D, B we get 180 == direction(D, B) - direction(B, D) mod 360
By reverse_direction on E, A we get 180 == direction(E, A) - direction(A, E) mod 360
By divide_by_2_mod_180_v2 on G, B, J, E, A, D we get angle(G, B, J) == angle(E, A, D) + 180 mod 360
By divide_by_2_mod_180_v3 on C, A, D, G, B, J we get angle(C, A, D) == angle(G, B, J) + 180 mod 360
By collinear_definition on B, D, J we get D in Line(B, J), J in Line(B, D), Line(B, D) == Line(B, J), 0 == 2 * angle(D, B, J) mod 360
By line_inequality on Line(A, J), Line(A, I), J we get Line(A, I) != Line(A, J)
By reverse_direction on E, G we get 180 == direction(E, G) - direction(G, E) mod 360
By divide_by_2_mod_180_v3 on E, G, D, E, C, J we get angle(E, G, D) == angle(E, C, J) + 180 mod 360
By reverse_direction on C, D we get 180 == direction(C, D) - direction(D, C) mod 360
By divide_by_2_mod_180_v0 on A, C, J, B, G, D we get angle(A, C, J) == angle(B, G, D) mod 360
By aa_anti_similarity on C, B, E, G, B, D we get anti_similar_triangles(B, C, E, B, G, D)
By aa_anti_similarity on A, C, D, B, C, E we get anti_similar_triangles(A, C, D, B, C, E)
By aa_anti_similarity on G, B, D, C, B, E we get anti_similar_triangles(B, C, E, B, G, D)
By line_circle_intersection_has_at_most_two_points_0 on D, J, B, d we get B not in d
By divide_by_2_mod_180_v3 on E, G, D, A, C, J we get angle(E, G, D) == angle(A, C, J) + 180 mod 360
By divide_by_2_mod_180_v2 on D, G, E, J, C, A we get angle(D, G, E) == angle(J, C, A) + 180 mod 360
By aa_anti_similarity on A, D, C, B, E, C we get anti_similar_triangles(A, C, D, B, C, E)
By collinear_definition on J, D, C we get D in Line(C, J), C in Line(D, J), Line(C, J) == Line(D, J), 0 == 2 * angle(D, J, C) mod 360
By reverse_direction on A, E we get 180 == direction(A, E) - direction(E, A) mod 360
By aa_anti_similarity on C, D, A, G, E, A we get anti_similar_triangles(A, C, D, A, G, E)
By aa_anti_similarity on C, A, F, B, A, E we get anti_similar_triangles(A, B, E, A, C, F)
By reverse_direction on A, B we get 180 == direction(A, B) - direction(B, A) mod 360
By aa_anti_similarity on C, B, F, A, B, D we get anti_similar_triangles(A, B, D, C, B, F)
By line_inequality on Line(A, J), Line(G, H), A we get Line(A, J) != Line(G, H)
By reverse_direction on F, C we get 180 == direction(F, C) - direction(C, F) mod 360
By aa_anti_similarity on A, G, E, B, G, D we get anti_similar_triangles(A, E, G, B, D, G)
By reverse_direction on J, B we get 180 == direction(J, B) - direction(B, J) mod 360
By reverse_direction on A, F we get 180 == direction(A, F) - direction(F, A) mod 360
By line_inequality on Line(H, I), Line(G, I), H we get Line(G, I) != Line(H, I)
By line_inequality on Line(H, I), Line(A, I), H we get Line(A, I) != Line(H, I)
By collinear_definition on C, J, D we get J in Line(C, D), D in Line(C, J), Line(C, D) == Line(C, J), 0 == 2 * angle(J, C, D) mod 360
By collinear_definition on D, C, J we get C in Line(D, J), J in Line(C, D), Line(C, D) == Line(D, J), 0 == 2 * angle(C, D, J) mod 360
By collinear_definition on J, B, D we get B in Line(D, J), D in Line(B, J), Line(B, J) == Line(D, J), 0 == 2 * angle(B, J, D) mod 360
By line_inequality on Line(D, I), Line(G, I), D we get Line(D, I) != Line(G, I)
By collinear_definition on J, D, B we get D in Line(B, J), B in Line(D, J), Line(B, J) == Line(D, J), 0 == 2 * angle(D, J, B) mod 360
By reverse_direction on H, F we get 180 == direction(H, F) - direction(F, H) mod 360
By aa_anti_similarity on A, B, D, C, B, F we get anti_similar_triangles(A, B, D, C, B, F)
By reverse_direction on D, C we get 180 == direction(D, C) - direction(C, D) mod 360
By reverse_direction on A, C we get 180 == direction(A, C) - direction(C, A) mod 360
By reverse_direction on C, H we get 180 == direction(C, H) - direction(H, C) mod 360
By aa_anti_similarity on B, D, G, A, E, G we get anti_similar_triangles(A, E, G, B, D, G)
By reverse_direction on F, H we get 180 == direction(F, H) - direction(H, F) mod 360
By line_containment_inequality on orthocenter(A, B, C), B, i we get B != orthocenter(A, B, C)
By line_containment_inequality on orthocenter(A, B, C), F, i we get F != orthocenter(A, B, C)
By line_inequality on Line(A, H), Line(D, I), A we get Line(A, H) != Line(D, I)
By line_inequality on Line(G, H), Line(A, I), G we get Line(A, I) != Line(G, H)
By line_containment_inequality on orthocenter(A, B, C), A, j we get A != orthocenter(A, B, C)
By line_containment_inequality on orthocenter(A, B, C), H, i we get H != orthocenter(A, B, C)
By line_inequality on Line(G, H), Line(D, I), H we get Line(D, I) != Line(G, H)
By line_inequality on Line(I, J), Line(D, I), J we get Line(D, I) != Line(I, J)
By line_inequality on Line(A, J), Line(G, I), J we get Line(A, J) != Line(G, I)
By line_inequality on Line(I, J), Line(A, J), I we get Line(A, J) != Line(I, J)
By line_inequality on Line(D, I), Line(H, I), D we get Line(D, I) != Line(H, I)
By line_containment_inequality on orthocenter(A, B, C), J, k we get J != orthocenter(A, B, C)
By line_containment_inequality on orthocenter(A, B, C), E, k we get E != orthocenter(A, B, C)
By line_inequality on Line(G, H), Line(A, H), G we get Line(A, H) != Line(G, H)
By line_containment_inequality on orthocenter(A, B, C), D, j we get D != orthocenter(A, B, C)
By line_inequality on Line(H, I), Line(I, J), H we get Line(H, I) != Line(I, J)
By line_inequality on Line(G, I), Line(A, I), G we get Line(A, I) != Line(G, I)
By line_inequality on Line(I, J), Line(G, I), J we get Line(G, I) != Line(I, J)
By line_inequality on Line(D, I), Line(A, J), I we get Line(A, J) != Line(D, I)
By line_inequality on Line(A, I), Line(I, J), A we get Line(A, I) != Line(I, J)
By line_inequality on Line(A, H), Line(A, I), H we get Line(A, H) != Line(A, I)
By line_inequality on Line(A, I), Line(D, I), A we get Line(A, I) != Line(D, I)
By external_angle_bisector_definition_v0_r on C, A, C, D we get Line(A, D) == external_angle_bisector(C, D, C)
By external_angle_bisector_definition_v0_r on G, B, G, D we get Line(B, D) == external_angle_bisector(G, D, G)
By external_angle_bisector_definition_v0_r on J, A, B, D we get Line(A, D) == external_angle_bisector(B, D, J)
By internal_angle_bisector_definition_v0_r on C, B, A, E we get Line(B, E) == internal_angle_bisector(A, E, C)
By external_angle_bisector_definition_v0_r on C, B, C, E we get Line(B, E) == external_angle_bisector(C, E, C)
By internal_angle_bisector_definition_v0_r on C, H, C, F we get Line(F, H) == internal_angle_bisector(C, F, C)
By external_angle_bisector_definition_v0_r on J, A, J, I we get Line(A, I) == external_angle_bisector(J, I, J)
By external_angle_bisector_definition_v0_r on D, C, J, B we get Line(B, C) == external_angle_bisector(D, B, J)
By internal_angle_bisector_definition_v0_r on J, C, J, B we get Line(B, C) == internal_angle_bisector(J, B, J)
By external_angle_bisector_definition_v0_r on J, G, B, D we get Line(D, G) == external_angle_bisector(B, D, J)
By external_angle_bisector_definition_v0_r on G, J, A, D we get Line(D, J) == external_angle_bisector(A, D, G)
By external_angle_bisector_definition_v0_r on J, G, J, D we get Line(D, G) == external_angle_bisector(J, D, J)
By external_angle_bisector_definition_v0_r on G, A, B, E we get Line(A, E) == external_angle_bisector(B, E, G)
By external_angle_bisector_definition_v0_r on G, J, G, D we get Line(D, J) == external_angle_bisector(G, D, G)
By external_angle_bisector_definition_v0_r on H, B, H, F we get Line(B, F) == external_angle_bisector(H, F, H)
By external_angle_bisector_definition_v0_r on C, B, C, F we get Line(B, F) == external_angle_bisector(C, F, C)
By internal_angle_bisector_definition_v0_r on F, H, F, C we get Line(C, H) == internal_angle_bisector(F, C, F)
By external_angle_bisector_definition_v0_r on C, G, C, E we get Line(E, G) == external_angle_bisector(C, E, C)
By external_angle_bisector_definition_v0_r on A, C, A, D we get Line(C, D) == external_angle_bisector(A, D, A)
By external_angle_bisector_definition_v0_r on H, A, H, F we get Line(A, F) == external_angle_bisector(H, F, H)
By external_angle_bisector_definition_v0_r on G, C, A, D we get Line(C, D) == external_angle_bisector(A, D, G)
By external_angle_bisector_definition_v0_r on B, A, B, D we get Line(A, D) == external_angle_bisector(B, D, B)
By internal_angle_bisector_definition_v0_r on D, A, D, G we get Line(A, G) == internal_angle_bisector(D, G, D)
By external_angle_bisector_definition_v0_r on G, A, G, E we get Line(A, E) == external_angle_bisector(G, E, G)
By external_angle_bisector_definition_v0_r on G, C, B, E we get Line(C, E) == external_angle_bisector(B, E, G)
By external_angle_bisector_definition_v0_r on B, G, B, D we get Line(D, G) == external_angle_bisector(B, D, B)
By internal_angle_bisector_definition_v0_r on C, G, B, D we get Line(D, G) == internal_angle_bisector(B, D, C)
By internal_angle_bisector_definition_v0_r on C, D, C, B we get Line(B, D) == internal_angle_bisector(C, B, C)
By internal_angle_bisector_definition_v0_r on C, B, C, D we get Line(B, D) == internal_angle_bisector(C, D, C)
By external_angle_bisector_definition_v0_r on A, B, A, E we get Line(B, E) == external_angle_bisector(A, E, A)
By external_angle_bisector_definition_v0_r on A, B, G, D we get Line(B, D) == external_angle_bisector(A, D, G)
By external_angle_bisector_definition_v0_r on A, B, A, D we get Line(B, D) == external_angle_bisector(A, D, A)
By external_angle_bisector_definition_v0_r on B, A, B, E we get Line(A, E) == external_angle_bisector(B, E, B)
By internal_angle_bisector_definition_v0_r on A, C, B, F we get Line(C, F) == internal_angle_bisector(A, F, B)
By external_angle_bisector_definition_v0_r on B, C, B, E we get Line(C, E) == external_angle_bisector(B, E, B)
By internal_angle_bisector_definition_v0_r on E, B, E, G we get Line(B, G) == internal_angle_bisector(E, G, E)
By external_angle_bisector_definition_v0_r on A, J, A, D we get Line(D, J) == external_angle_bisector(A, D, A)
By internal_angle_bisector_definition_v0_r on F, A, F, B we get Line(A, B) == internal_angle_bisector(F, B, F)
By external_angle_bisector_definition_v0_r on B, H, B, F we get Line(F, H) == external_angle_bisector(B, F, B)
By external_angle_bisector_definition_v0_r on A, C, A, F we get Line(C, F) == external_angle_bisector(A, F, A)
By external_angle_bisector_definition_v0_r on C, G, C, D we get Line(D, G) == external_angle_bisector(C, D, C)
By internal_angle_bisector_definition_v0_r on A, G, C, E we get Line(E, G) == internal_angle_bisector(A, E, C)
By external_angle_bisector_definition_v0_r on A, J, A, I we get Line(I, J) == external_angle_bisector(A, I, A)
By external_angle_bisector_definition_v0_r on G, C, G, E we get Line(C, E) == external_angle_bisector(G, E, G)
By external_angle_bisector_definition_v0_r on A, G, A, E we get Line(E, G) == external_angle_bisector(A, E, A)
By internal_angle_bisector_definition_v0_r on A, F, A, B we get Line(B, F) == internal_angle_bisector(A, B, A)
By internal_angle_bisector_definition_v0_r on D, B, J, C we get Line(B, C) == internal_angle_bisector(D, C, J)
By external_angle_bisector_definition_v0_r on A, H, A, F we get Line(F, H) == external_angle_bisector(A, F, A)
By internal_angle_bisector_definition_v0_r on C, A, H, F we get Line(A, F) == internal_angle_bisector(C, F, H)
By internal_angle_bisector_definition_v0_r on F, B, F, A we get Line(A, B) == internal_angle_bisector(F, A, F)
By internal_angle_bisector_definition_v0_r on E, A, E, C we get Line(A, C) == internal_angle_bisector(E, C, E)
By internal_angle_bisector_definition_v0_r on G, D, G, A we get Line(A, D) == internal_angle_bisector(G, A, G)
By external_angle_bisector_definition_v0_r on J, A, J, D we get Line(A, D) == external_angle_bisector(J, D, J)
By internal_angle_bisector_definition_v0_r on B, D, B, C we get Line(C, D) == internal_angle_bisector(B, C, B)
By internal_angle_bisector_definition_v0_r on B, A, B, F we get Line(A, F) == internal_angle_bisector(B, F, B)
By external_angle_bisector_definition_v0_r on C, A, C, F we get Line(A, F) == external_angle_bisector(C, F, C)
By internal_angle_bisector_definition_v0_r on G, A, G, D we get Line(A, D) == internal_angle_bisector(G, D, G)
By external_angle_bisector_definition_v0_r on G, C, G, D we get Line(C, D) == external_angle_bisector(G, D, G)
By internal_angle_bisector_definition_v0_r on C, G, J, D we get Line(D, G) == internal_angle_bisector(C, D, J)
By external_angle_bisector_definition_v0_r on B, C, B, F we get Line(C, F) == external_angle_bisector(B, F, B)
By internal_angle_bisector_definition_v0_r on C, B, H, F we get Line(B, F) == internal_angle_bisector(C, F, H)
By internal_angle_bisector_definition_v0_r on B, H, A, F we get Line(F, H) == internal_angle_bisector(A, F, B)
By internal_angle_bisector_definition_v0_r on B, A, C, D we get Line(A, D) == internal_angle_bisector(B, D, C)
By internal_angle_bisector_definition_v0_r on D, B, D, C we get Line(B, C) == internal_angle_bisector(D, C, D)
By internal_angle_bisector_definition_v0_r on E, G, E, B we get Line(B, G) == internal_angle_bisector(E, B, E)
By internal_angle_bisector_definition_v0_r on D, C, D, B we get Line(B, C) == internal_angle_bisector(D, B, D)
By internal_angle_bisector_definition_v0_r on H, F, H, C we get Line(C, F) == internal_angle_bisector(H, C, H)
By internal_angle_bisector_definition_v0_r on B, C, B, D we get Line(C, D) == internal_angle_bisector(B, D, B)
By internal_angle_bisector_definition_v0_r on B, G, B, E we get Line(E, G) == internal_angle_bisector(B, E, B)
By internal_angle_bisector_definition_v0_r on J, B, J, C we get Line(B, C) == internal_angle_bisector(J, C, J)
By internal_angle_bisector_definition_v0_r on G, E, G, B we get Line(B, E) == internal_angle_bisector(G, B, G)
By internal_angle_bisector_definition_v0_r on H, C, H, F we get Line(C, F) == internal_angle_bisector(H, F, H)
By internal_angle_bisector_definition_v0_r on D, G, D, A we get Line(A, G) == internal_angle_bisector(D, A, D)
By internal_angle_bisector_definition_v0_r on G, B, G, E we get Line(B, E) == internal_angle_bisector(G, E, G)
By internal_angle_bisector_definition_v0_r on B, C, B, J we get Line(C, J) == internal_angle_bisector(B, J, B)
By internal_angle_bisector_definition_v0_r on C, J, C, B we get Line(B, J) == internal_angle_bisector(C, B, C)
By internal_angle_bisector_definition_v0_r on A, G, A, D we get Line(D, G) == internal_angle_bisector(A, D, A)
By internal_angle_bisector_definition_v0_r on F, C, F, H we get Line(C, H) == internal_angle_bisector(F, H, F)
By internal_angle_bisector_definition_v0_r on C, A, J, D we get Line(A, D) == internal_angle_bisector(C, D, J)
By internal_angle_bisector_definition_v0_r on C, E, C, A we get Line(A, E) == internal_angle_bisector(C, A, C)
By internal_angle_bisector_definition_v0_r on A, D, A, G we get Line(D, G) == internal_angle_bisector(A, G, A)
By internal_angle_bisector_definition_v0_r on A, C, A, E we get Line(C, E) == internal_angle_bisector(A, E, A)
By internal_angle_bisector_definition_v0_r on A, E, A, C we get Line(C, E) == internal_angle_bisector(A, C, A)
By internal_angle_bisector_definition_v0_r on A, B, A, F we get Line(B, F) == internal_angle_bisector(A, F, A)
By internal_angle_bisector_definition_v0_r on E, C, E, A we get Line(A, C) == internal_angle_bisector(E, A, E)
By internal_angle_bisector_definition_v0_r on C, B, C, J we get Line(B, J) == internal_angle_bisector(C, J, C)
By internal_angle_bisector_definition_v0_r on C, F, C, H we get Line(F, H) == internal_angle_bisector(C, H, C)
By internal_angle_bisector_definition_v0_r on B, J, B, C we get Line(C, J) == internal_angle_bisector(B, C, B)
By internal_angle_bisector_definition_v0_r on B, E, B, G we get Line(E, G) == internal_angle_bisector(B, G, B)
By internal_angle_bisector_definition_v0_r on B, F, B, A we get Line(A, F) == internal_angle_bisector(B, A, B)
By internal_angle_bisector_definition_v0_r on C, A, C, E we get Line(A, E) == internal_angle_bisector(C, E, C)
By line_intersection_definition on orthocenter(A, B, G), k, h we get orthocenter(A, B, G) == line_intersection(h, k)
By line_intersection_definition on orthocenter(B, C, E), h, j we get orthocenter(B, C, E) == line_intersection(h, j)
By line_intersection_definition on orthocenter(A, C, F), f, k we get orthocenter(A, C, F) == line_intersection(f, k)
By line_intersection_definition on orthocenter(A, D, J), i, g we get orthocenter(A, D, J) == line_intersection(g, i)
By line_intersection_definition on orthocenter(B, C, F), k, f we get orthocenter(B, C, F) == line_intersection(f, k)
By line_intersection_definition on orthocenter(C, D, G), i, g we get orthocenter(C, D, G) == line_intersection(g, i)
By line_intersection_definition on orthocenter(D, G, J), g, i we get orthocenter(D, G, J) == line_intersection(g, i)
By line_definition on G, H, k we get k == Line(G, H)
By line_intersection_definition on orthocenter(A, F, H), k, f we get orthocenter(A, F, H) == line_intersection(f, k)
By line_intersection_definition on orthocenter(A, B, G), g, h we get orthocenter(A, B, G) == line_intersection(g, h)
By line_intersection_definition on orthocenter(A, C, D), i, g we get orthocenter(A, C, D) == line_intersection(g, i)
By line_intersection_definition on orthocenter(B, D, G), i, g we get orthocenter(B, D, G) == line_intersection(g, i)
By line_intersection_definition on orthocenter(B, F, H), k, f we get orthocenter(B, F, H) == line_intersection(f, k)
By line_intersection_definition on orthocenter(C, E, G), j, h we get orthocenter(C, E, G) == line_intersection(h, j)
By line_intersection_definition on orthocenter(B, C, G), i, h we get orthocenter(B, C, G) == line_intersection(h, i)
By line_intersection_definition on orthocenter(A, B, G), k, g we get orthocenter(A, B, G) == line_intersection(g, k)
By line_definition on F, G, k we get k == Line(F, G)
By line_intersection_definition on orthocenter(A, C, G), j, g we get orthocenter(A, C, G) == line_intersection(g, j)
By line_intersection_definition on orthocenter(A, E, G), j, h we get orthocenter(A, E, G) == line_intersection(h, j)
By line_intersection_definition on orthocenter(A, B, E), h, j we get orthocenter(A, B, E) == line_intersection(h, j)
By line_definition on C, G, k we get k == Line(C, G)
By line_intersection_definition on orthocenter(A, B, D), i, g we get orthocenter(A, B, D) == line_intersection(g, i)
By perpendicular_line_definition on A, Line(A, I), Line(I, J) we get Line(A, I) == perpendicular_line(A, Line(I, J))
By perpendicular_line_definition on orthocenter(A, F, H), f, k we get f == perpendicular_line(orthocenter(A, F, H), k)
By perpendicular_line_definition on orthocenter(A, C, F), altitude(F, A, C), h we get altitude(F, A, C) == perpendicular_line(orthocenter(A, C, F), h)
By perpendicular_line_definition on orthocenter(B, C, F), f, k we get f == perpendicular_line(orthocenter(B, C, F), k)
By concurrent_sufficient_conditions on Line(A, H), Line(A, I), i we get concurrent(i, Line(A, H), Line(A, I))
By perpendicular_line_definition on E, j, altitude(D, B, G) we get j == perpendicular_line(E, altitude(D, B, G))
By perpendicular_line_definition on orthocenter(A, C, G), j, h we get j == perpendicular_line(orthocenter(A, C, G), h)
By perpendicular_line_definition on orthocenter(A, D, J), g, i we get g == perpendicular_line(orthocenter(A, D, J), i)
By line_intersection_definition on I, Line(A, I), Line(H, I) we get I == line_intersection(Line(A, I), Line(H, I))
By concurrent_sufficient_conditions on Line(A, H), Line(A, J), h we get concurrent(h, Line(A, H), Line(A, J))
By perpendicular_line_definition on G, j, altitude(D, B, G) we get j == perpendicular_line(G, altitude(D, B, G))
By line_intersection_definition on I, Line(G, I), Line(H, I) we get I == line_intersection(Line(G, I), Line(H, I))
By perpendicular_line_definition on E, h, altitude(F, A, C) we get h == perpendicular_line(E, altitude(F, A, C))
By perpendicular_line_definition on orthocenter(B, C, G), i, altitude(E, A, G) we get i == perpendicular_line(orthocenter(B, C, G), altitude(E, A, G))
By concurrent_sufficient_conditions on Line(A, I), Line(A, J), f we get concurrent(f, Line(A, I), Line(A, J))
By concurrent_sufficient_conditions on Line(G, H), Line(G, I), j we get concurrent(j, Line(G, H), Line(G, I))
By perpendicular_line_definition on orthocenter(A, B, D), altitude(D, A, B), f we get altitude(D, A, B) == perpendicular_line(orthocenter(A, B, D), f)
By perpendicular_line_definition on orthocenter(C, E, G), j, altitude(D, B, G) we get j == perpendicular_line(orthocenter(C, E, G), altitude(D, B, G))
By perpendicular_line_definition on orthocenter(A, C, G), g, altitude(E, B, C) we get g == perpendicular_line(orthocenter(A, C, G), altitude(E, B, C))
By perpendicular_line_definition on orthocenter(A, B, D), i, g we get i == perpendicular_line(orthocenter(A, B, D), g)
By concurrent_sufficient_conditions on Line(G, I), Line(G, H), i we get concurrent(i, Line(G, H), Line(G, I))
By perpendicular_line_definition on orthocenter(A, B, D), g, altitude(E, B, C) we get g == perpendicular_line(orthocenter(A, B, D), altitude(E, B, C))
By perpendicular_line_definition on orthocenter(A, C, D), i, altitude(E, A, G) we get i == perpendicular_line(orthocenter(A, C, D), altitude(E, A, G))
By perpendicular_line_definition on orthocenter(D, G, J), g, altitude(F, B, C) we get g == perpendicular_line(orthocenter(D, G, J), altitude(F, B, C))
By concurrent_sufficient_conditions on k, Line(G, I), i we get concurrent(i, k, Line(G, I))
By perpendicular_line_definition on orthocenter(A, B, E), h, j we get h == perpendicular_line(orthocenter(A, B, E), j)
By concurrent_sufficient_conditions on Line(A, I), Line(A, J), i we get concurrent(i, Line(A, I), Line(A, J))
By perpendicular_line_definition on orthocenter(A, D, J), g, altitude(E, B, C) we get g == perpendicular_line(orthocenter(A, D, J), altitude(E, B, C))
By line_intersection_definition on I, Line(A, I), Line(D, I) we get I == line_intersection(Line(A, I), Line(D, I))
By perpendicular_line_definition on orthocenter(B, F, H), altitude(F, B, H), Line(B, H) we get altitude(F, B, H) == perpendicular_line(orthocenter(B, F, H), Line(B, H))
By concurrent_sufficient_conditions on Line(A, J), Line(A, H), i we get concurrent(i, Line(A, H), Line(A, J))
By perpendicular_line_definition on orthocenter(C, D, G), g, altitude(F, B, C) we get g == perpendicular_line(orthocenter(C, D, G), altitude(F, B, C))
By perpendicular_line_definition on C, h, altitude(D, A, C) we get h == perpendicular_line(C, altitude(D, A, C))
By perpendicular_line_definition on A, h, altitude(F, A, C) we get h == perpendicular_line(A, altitude(F, A, C))
By perpendicular_line_definition on orthocenter(A, C, D), altitude(D, A, C), h we get altitude(D, A, C) == perpendicular_line(orthocenter(A, C, D), h)
By line_intersection_definition on I, Line(I, J), Line(A, I) we get I == line_intersection(Line(A, I), Line(I, J))
By concurrent_sufficient_conditions on Line(H, I), Line(A, H), k we get concurrent(k, Line(A, H), Line(H, I))
By line_intersection_definition on H, Line(H, I), Line(G, H) we get H == line_intersection(Line(G, H), Line(H, I))
By concurrent_sufficient_conditions on Line(A, I), Line(A, H), f we get concurrent(f, Line(A, H), Line(A, I))
By perpendicular_line_definition on orthocenter(A, D, J), i, altitude(E, A, G) we get i == perpendicular_line(orthocenter(A, D, J), altitude(E, A, G))
By perpendicular_line_definition on orthocenter(C, E, G), altitude(E, C, G), Line(C, G) we get altitude(E, C, G) == perpendicular_line(orthocenter(C, E, G), Line(C, G))
By perpendicular_line_definition on orthocenter(B, C, G), h, altitude(D, A, C) we get h == perpendicular_line(orthocenter(B, C, G), altitude(D, A, C))
By perpendicular_line_definition on J, g, altitude(E, B, C) we get g == perpendicular_line(J, altitude(E, B, C))
By perpendicular_line_definition on I, Line(I, J), Line(A, I) we get Line(I, J) == perpendicular_line(I, Line(A, I))
By line_intersection_definition on G, k, Line(G, I) we get G == line_intersection(k, Line(G, I))
By perpendicular_line_definition on orthocenter(A, B, E), j, h we get j == perpendicular_line(orthocenter(A, B, E), h)
By concurrent_sufficient_conditions on k, Line(G, I), j we get concurrent(j, k, Line(G, I))
By perpendicular_line_definition on B, Line(B, H), altitude(F, B, H) we get Line(B, H) == perpendicular_line(B, altitude(F, B, H))
By perpendicular_line_definition on orthocenter(A, C, G), g, i we get g == perpendicular_line(orthocenter(A, C, G), i)
By line_intersection_definition on G, Line(G, I), Line(G, H) we get G == line_intersection(Line(G, H), Line(G, I))
By perpendicular_line_definition on orthocenter(D, G, J), altitude(D, G, J), Line(G, J) we get altitude(D, G, J) == perpendicular_line(orthocenter(D, G, J), Line(G, J))
By perpendicular_line_definition on orthocenter(C, E, G), h, j we get h == perpendicular_line(orthocenter(C, E, G), j)
By perpendicular_line_definition on orthocenter(A, E, G), h, altitude(F, A, C) we get h == perpendicular_line(orthocenter(A, E, G), altitude(F, A, C))
By perpendicular_line_definition on G, Line(G, J), altitude(D, G, J) we get Line(G, J) == perpendicular_line(G, altitude(D, G, J))
By line_intersection_definition on I, Line(I, J), Line(H, I) we get I == line_intersection(Line(H, I), Line(I, J))
By perpendicular_line_definition on orthocenter(A, B, G), g, altitude(E, B, C) we get g == perpendicular_line(orthocenter(A, B, G), altitude(E, B, C))
By line_intersection_definition on I, Line(D, I), Line(H, I) we get I == line_intersection(Line(D, I), Line(H, I))
By perpendicular_line_definition on orthocenter(C, E, G), j, h we get j == perpendicular_line(orthocenter(C, E, G), h)
By perpendicular_line_definition on D, g, altitude(F, B, C) we get g == perpendicular_line(D, altitude(F, B, C))
By perpendicular_line_definition on J, Line(I, J), Line(A, I) we get Line(I, J) == perpendicular_line(J, Line(A, I))
By perpendicular_line_definition on orthocenter(A, E, G), j, altitude(D, B, G) we get j == perpendicular_line(orthocenter(A, E, G), altitude(D, B, G))
By perpendicular_line_definition on orthocenter(A, E, G), h, j we get h == perpendicular_line(orthocenter(A, E, G), j)
By perpendicular_line_definition on orthocenter(A, C, G), j, altitude(D, B, G) we get j == perpendicular_line(orthocenter(A, C, G), altitude(D, B, G))
By concurrent_sufficient_conditions on Line(A, H), Line(A, I), h we get concurrent(h, Line(A, H), Line(A, I))
By perpendicular_line_definition on orthocenter(A, B, G), g, altitude(F, B, C) we get g == perpendicular_line(orthocenter(A, B, G), altitude(F, B, C))
By perpendicular_line_definition on orthocenter(A, B, E), j, altitude(D, B, G) we get j == perpendicular_line(orthocenter(A, B, E), altitude(D, B, G))
By perpendicular_line_definition on orthocenter(D, G, J), i, g we get i == perpendicular_line(orthocenter(D, G, J), g)
By perpendicular_line_definition on B, f, altitude(D, A, B) we get f == perpendicular_line(B, altitude(D, A, B))
By line_intersection_definition on H, Line(A, H), Line(H, I) we get H == line_intersection(Line(A, H), Line(H, I))
By perpendicular_line_definition on A, h, altitude(D, A, C) we get h == perpendicular_line(A, altitude(D, A, C))
By perpendicular_line_definition on orthocenter(A, B, E), h, altitude(D, A, C) we get h == perpendicular_line(orthocenter(A, B, E), altitude(D, A, C))
By perpendicular_line_definition on E, h, altitude(D, A, C) we get h == perpendicular_line(E, altitude(D, A, C))
By perpendicular_line_definition on A, Line(A, H), altitude(F, A, H) we get Line(A, H) == perpendicular_line(A, altitude(F, A, H))
By perpendicular_line_definition on H, Line(A, H), altitude(F, A, H) we get Line(A, H) == perpendicular_line(H, altitude(F, A, H))
By perpendicular_line_definition on A, f, altitude(D, A, B) we get f == perpendicular_line(A, altitude(D, A, B))
By perpendicular_line_definition on J, Line(A, J), altitude(D, A, J) we get Line(A, J) == perpendicular_line(J, altitude(D, A, J))
By perpendicular_line_definition on orthocenter(B, C, G), i, g we get i == perpendicular_line(orthocenter(B, C, G), g)
By perpendicular_line_definition on orthocenter(B, D, G), altitude(D, B, G), j we get altitude(D, B, G) == perpendicular_line(orthocenter(B, D, G), j)
By concurrent_sufficient_conditions on Line(A, I), Line(A, H), h we get concurrent(h, Line(A, H), Line(A, I))
By perpendicular_line_definition on orthocenter(B, C, F), k, f we get k == perpendicular_line(orthocenter(B, C, F), f)
By perpendicular_line_definition on C, g, altitude(E, B, C) we get g == perpendicular_line(C, altitude(E, B, C))
By perpendicular_line_definition on orthocenter(A, B, D), i, altitude(E, A, G) we get i == perpendicular_line(orthocenter(A, B, D), altitude(E, A, G))
By perpendicular_line_definition on A, i, altitude(E, A, G) we get i == perpendicular_line(A, altitude(E, A, G))
By line_intersection_definition on I, Line(G, I), Line(I, J) we get I == line_intersection(Line(G, I), Line(I, J))
By concurrent_sufficient_conditions on Line(A, J), Line(A, H), h we get concurrent(h, Line(A, H), Line(A, J))
By perpendicular_line_definition on B, j, altitude(D, B, G) we get j == perpendicular_line(B, altitude(D, B, G))
By concurrent_sufficient_conditions on Line(A, J), Line(A, I), h we get concurrent(h, Line(A, I), Line(A, J))
By perpendicular_line_definition on C, h, altitude(F, A, C) we get h == perpendicular_line(C, altitude(F, A, C))
By perpendicular_line_definition on orthocenter(C, D, G), i, altitude(E, A, G) we get i == perpendicular_line(orthocenter(C, D, G), altitude(E, A, G))
By perpendicular_line_definition on C, g, altitude(F, B, C) we get g == perpendicular_line(C, altitude(F, B, C))
By perpendicular_line_definition on C, Line(C, G), altitude(E, C, G) we get Line(C, G) == perpendicular_line(C, altitude(E, C, G))
By perpendicular_line_definition on J, Line(G, J), altitude(D, G, J) we get Line(G, J) == perpendicular_line(J, altitude(D, G, J))
By perpendicular_line_definition on orthocenter(D, G, J), i, altitude(E, A, G) we get i == perpendicular_line(orthocenter(D, G, J), altitude(E, A, G))
By perpendicular_line_definition on J, g, altitude(F, B, C) we get g == perpendicular_line(J, altitude(F, B, C))
By perpendicular_line_definition on orthocenter(A, B, E), altitude(E, A, B), f we get altitude(E, A, B) == perpendicular_line(orthocenter(A, B, E), f)
By concurrent_sufficient_conditions on Line(G, I), k, j we get concurrent(j, k, Line(G, I))
By perpendicular_line_definition on B, g, altitude(E, B, C) we get g == perpendicular_line(B, altitude(E, B, C))
By concurrent_sufficient_conditions on Line(A, H), Line(A, I), f we get concurrent(f, Line(A, H), Line(A, I))
By perpendicular_line_definition on orthocenter(D, G, J), g, i we get g == perpendicular_line(orthocenter(D, G, J), i)
By line_intersection_definition on A, Line(A, H), Line(A, I) we get A == line_intersection(Line(A, H), Line(A, I))
By perpendicular_line_definition on orthocenter(A, E, G), altitude(E, A, G), i we get altitude(E, A, G) == perpendicular_line(orthocenter(A, E, G), i)
By perpendicular_line_definition on G, Line(C, G), altitude(B, C, G) we get Line(C, G) == perpendicular_line(G, altitude(B, C, G))
By concurrent_sufficient_conditions on Line(A, H), Line(H, I), k we get concurrent(k, Line(A, H), Line(H, I))
By perpendicular_line_definition on orthocenter(A, D, J), g, altitude(F, B, C) we get g == perpendicular_line(orthocenter(A, D, J), altitude(F, B, C))
By perpendicular_line_definition on orthocenter(B, C, G), altitude(B, C, G), Line(C, G) we get altitude(B, C, G) == perpendicular_line(orthocenter(B, C, G), Line(C, G))
By perpendicular_line_definition on orthocenter(B, F, H), f, altitude(E, A, B) we get f == perpendicular_line(orthocenter(B, F, H), altitude(E, A, B))
By perpendicular_line_definition on orthocenter(A, B, G), k, f we get k == perpendicular_line(orthocenter(A, B, G), f)
By perpendicular_line_definition on orthocenter(B, C, E), h, altitude(F, A, C) we get h == perpendicular_line(orthocenter(B, C, E), altitude(F, A, C))
By perpendicular_line_definition on orthocenter(B, D, G), i, altitude(E, A, G) we get i == perpendicular_line(orthocenter(B, D, G), altitude(E, A, G))
By line_intersection_definition on I, Line(G, I), Line(A, I) we get I == line_intersection(Line(A, I), Line(G, I))
By perpendicular_line_definition on orthocenter(B, D, G), g, altitude(F, B, C) we get g == perpendicular_line(orthocenter(B, D, G), altitude(F, B, C))
By line_intersection_definition on H, Line(A, H), Line(G, H) we get H == line_intersection(Line(A, H), Line(G, H))
By line_intersection_definition on I, Line(I, J), Line(D, I) we get I == line_intersection(Line(D, I), Line(I, J))
By perpendicular_line_definition on G, Line(C, G), altitude(E, C, G) we get Line(C, G) == perpendicular_line(G, altitude(E, C, G))
By perpendicular_line_definition on orthocenter(A, C, D), i, g we get i == perpendicular_line(orthocenter(A, C, D), g)
By perpendicular_line_definition on orthocenter(A, B, G), h, j we get h == perpendicular_line(orthocenter(A, B, G), j)
By perpendicular_line_definition on A, f, altitude(E, A, B) we get f == perpendicular_line(A, altitude(E, A, B))
By perpendicular_line_definition on D, g, altitude(E, B, C) we get g == perpendicular_line(D, altitude(E, B, C))
By perpendicular_line_definition on orthocenter(C, E, G), h, altitude(D, A, C) we get h == perpendicular_line(orthocenter(C, E, G), altitude(D, A, C))
By concurrent_sufficient_conditions on Line(A, I), Line(A, J), h we get concurrent(h, Line(A, I), Line(A, J))
By perpendicular_line_definition on orthocenter(C, D, G), g, i we get g == perpendicular_line(orthocenter(C, D, G), i)
By perpendicular_line_definition on orthocenter(A, C, F), f, altitude(D, A, B) we get f == perpendicular_line(orthocenter(A, C, F), altitude(D, A, B))
By line_intersection_definition on A, Line(A, J), Line(A, H) we get A == line_intersection(Line(A, H), Line(A, J))
By perpendicular_line_definition on orthocenter(B, C, E), h, altitude(D, A, C) we get h == perpendicular_line(orthocenter(B, C, E), altitude(D, A, C))
By perpendicular_line_definition on G, i, altitude(E, A, G) we get i == perpendicular_line(G, altitude(E, A, G))
By concurrent_sufficient_conditions on Line(A, H), Line(A, J), i we get concurrent(i, Line(A, H), Line(A, J))
By perpendicular_line_definition on orthocenter(C, D, G), i, g we get i == perpendicular_line(orthocenter(C, D, G), g)
By perpendicular_line_definition on orthocenter(B, C, F), f, altitude(D, A, B) we get f == perpendicular_line(orthocenter(B, C, F), altitude(D, A, B))
By perpendicular_line_definition on orthocenter(A, C, G), g, altitude(F, B, C) we get g == perpendicular_line(orthocenter(A, C, G), altitude(F, B, C))
By perpendicular_line_definition on orthocenter(A, E, G), h, altitude(D, A, C) we get h == perpendicular_line(orthocenter(A, E, G), altitude(D, A, C))
By perpendicular_line_definition on C, Line(C, G), altitude(D, C, G) we get Line(C, G) == perpendicular_line(C, altitude(D, C, G))
By concurrent_sufficient_conditions on Line(A, H), Line(A, J), f we get concurrent(f, Line(A, H), Line(A, J))
By concurrent_sufficient_conditions on Line(I, J), Line(A, J), g we get concurrent(g, Line(A, J), Line(I, J))
By perpendicular_line_definition on orthocenter(B, C, E), h, j we get h == perpendicular_line(orthocenter(B, C, E), j)
By perpendicular_line_definition on orthocenter(B, F, H), f, k we get f == perpendicular_line(orthocenter(B, F, H), k)
By perpendicular_line_definition on orthocenter(B, F, H), f, altitude(D, A, B) we get f == perpendicular_line(orthocenter(B, F, H), altitude(D, A, B))
By perpendicular_line_definition on orthocenter(B, D, G), g, i we get g == perpendicular_line(orthocenter(B, D, G), i)
By concurrent_sufficient_conditions on Line(A, J), Line(A, I), f we get concurrent(f, Line(A, I), Line(A, J))
By perpendicular_line_definition on F, f, altitude(E, A, B) we get f == perpendicular_line(F, altitude(E, A, B))
By perpendicular_line_definition on orthocenter(A, E, G), j, h we get j == perpendicular_line(orthocenter(A, E, G), h)
By perpendicular_line_definition on I, Line(A, I), Line(I, J) we get Line(A, I) == perpendicular_line(I, Line(I, J))
By perpendicular_line_definition on orthocenter(A, C, F), k, f we get k == perpendicular_line(orthocenter(A, C, F), f)
By perpendicular_line_definition on orthocenter(A, B, D), g, altitude(F, B, C) we get g == perpendicular_line(orthocenter(A, B, D), altitude(F, B, C))
By perpendicular_line_definition on orthocenter(B, C, G), h, altitude(F, A, C) we get h == perpendicular_line(orthocenter(B, C, G), altitude(F, A, C))
By perpendicular_line_definition on orthocenter(A, B, G), h, altitude(D, A, C) we get h == perpendicular_line(orthocenter(A, B, G), altitude(D, A, C))
By perpendicular_line_definition on orthocenter(B, C, E), altitude(E, B, C), g we get altitude(E, B, C) == perpendicular_line(orthocenter(B, C, E), g)
By perpendicular_line_definition on orthocenter(A, C, F), f, k we get f == perpendicular_line(orthocenter(A, C, F), k)
By perpendicular_line_definition on H, Line(B, H), altitude(F, B, H) we get Line(B, H) == perpendicular_line(H, altitude(F, B, H))
By perpendicular_line_definition on orthocenter(B, F, H), k, f we get k == perpendicular_line(orthocenter(B, F, H), f)
By perpendicular_line_definition on G, Line(C, G), altitude(A, C, G) we get Line(C, G) == perpendicular_line(G, altitude(A, C, G))
By perpendicular_line_definition on orthocenter(C, D, G), g, altitude(E, B, C) we get g == perpendicular_line(orthocenter(C, D, G), altitude(E, B, C))
By perpendicular_line_definition on F, f, altitude(D, A, B) we get f == perpendicular_line(F, altitude(D, A, B))
By perpendicular_line_definition on orthocenter(B, D, G), g, altitude(E, B, C) we get g == perpendicular_line(orthocenter(B, D, G), altitude(E, B, C))
By perpendicular_line_definition on G, Line(C, G), altitude(D, C, G) we get Line(C, G) == perpendicular_line(G, altitude(D, C, G))
By perpendicular_line_definition on D, i, altitude(E, A, G) we get i == perpendicular_line(D, altitude(E, A, G))
By perpendicular_line_definition on orthocenter(A, B, G), h, altitude(F, A, C) we get h == perpendicular_line(orthocenter(A, B, G), altitude(F, A, C))
By perpendicular_line_definition on B, f, altitude(E, A, B) we get f == perpendicular_line(B, altitude(E, A, B))
By line_intersection_definition on J, Line(I, J), Line(A, J) we get J == line_intersection(Line(A, J), Line(I, J))
By perpendicular_line_definition on orthocenter(A, C, F), f, altitude(E, A, B) we get f == perpendicular_line(orthocenter(A, C, F), altitude(E, A, B))
By perpendicular_line_definition on B, g, altitude(F, B, C) we get g == perpendicular_line(B, altitude(F, B, C))
By concurrent_sufficient_conditions on Line(A, J), Line(I, J), g we get concurrent(g, Line(A, J), Line(I, J))
By concurrent_sufficient_conditions on Line(G, H), Line(G, I), i we get concurrent(i, Line(G, H), Line(G, I))
By perpendicular_line_definition on orthocenter(A, D, J), altitude(D, A, J), Line(A, J) we get altitude(D, A, J) == perpendicular_line(orthocenter(A, D, J), Line(A, J))
By perpendicular_line_definition on orthocenter(B, C, F), f, altitude(E, A, B) we get f == perpendicular_line(orthocenter(B, C, F), altitude(E, A, B))
By perpendicular_line_definition on C, Line(C, G), altitude(B, C, G) we get Line(C, G) == perpendicular_line(C, altitude(B, C, G))
By perpendicular_line_definition on orthocenter(A, F, H), f, altitude(E, A, B) we get f == perpendicular_line(orthocenter(A, F, H), altitude(E, A, B))
By perpendicular_line_definition on orthocenter(A, D, J), i, g we get i == perpendicular_line(orthocenter(A, D, J), g)
By line_unique_intersection_v0 on f, k, orthocenter(B, F, H), orthocenter(A, F, H) we get orthocenter(A, F, H) == orthocenter(B, F, H)
By perpendicular_line_definition on orthocenter(C, E, G), h, altitude(F, A, C) we get h == perpendicular_line(orthocenter(C, E, G), altitude(F, A, C))
By perpendicular_line_definition on orthocenter(A, B, E), h, altitude(F, A, C) we get h == perpendicular_line(orthocenter(A, B, E), altitude(F, A, C))
By perpendicular_line_definition on orthocenter(A, F, H), k, f we get k == perpendicular_line(orthocenter(A, F, H), f)
By line_intersection_definition on A, Line(A, I), Line(A, J) we get A == line_intersection(Line(A, I), Line(A, J))
By perpendicular_line_definition on orthocenter(A, F, H), altitude(F, A, H), Line(A, H) we get altitude(F, A, H) == perpendicular_line(orthocenter(A, F, H), Line(A, H))
By line_intersection_definition on I, Line(G, I), Line(D, I) we get I == line_intersection(Line(D, I), Line(G, I))
By perpendicular_line_definition on A, Line(A, J), altitude(D, A, J) we get Line(A, J) == perpendicular_line(A, altitude(D, A, J))
By perpendicular_line_definition on orthocenter(C, D, G), altitude(D, C, G), Line(C, G) we get altitude(D, C, G) == perpendicular_line(orthocenter(C, D, G), Line(C, G))
By perpendicular_line_definition on orthocenter(A, C, D), g, altitude(E, B, C) we get g == perpendicular_line(orthocenter(A, C, D), altitude(E, B, C))
By concurrent_sufficient_conditions on Line(A, I), Line(A, H), i we get concurrent(i, Line(A, H), Line(A, I))
By perpendicular_line_definition on orthocenter(B, C, F), altitude(F, B, C), g we get altitude(F, B, C) == perpendicular_line(orthocenter(B, C, F), g)
By perpendicular_line_definition on orthocenter(B, D, G), i, g we get i == perpendicular_line(orthocenter(B, D, G), g)
By perpendicular_line_definition on orthocenter(A, C, D), g, i we get g == perpendicular_line(orthocenter(A, C, D), i)
By perpendicular_line_definition on orthocenter(A, B, D), g, i we get g == perpendicular_line(orthocenter(A, B, D), i)
By concurrent_sufficient_conditions on Line(G, I), k, i we get concurrent(i, k, Line(G, I))
By perpendicular_line_definition on orthocenter(A, C, D), g, altitude(F, B, C) we get g == perpendicular_line(orthocenter(A, C, D), altitude(F, B, C))
By perpendicular_line_definition on C, Line(C, G), altitude(A, C, G) we get Line(C, G) == perpendicular_line(C, altitude(A, C, G))
By perpendicular_line_definition on orthocenter(D, G, J), g, altitude(E, B, C) we get g == perpendicular_line(orthocenter(D, G, J), altitude(E, B, C))
By perpendicular_line_definition on orthocenter(A, B, G), g, i we get g == perpendicular_line(orthocenter(A, B, G), i)
By perpendicular_line_definition on orthocenter(A, C, G), altitude(A, C, G), Line(C, G) we get altitude(A, C, G) == perpendicular_line(orthocenter(A, C, G), Line(C, G))
By perpendicular_line_definition on orthocenter(A, F, H), f, altitude(D, A, B) we get f == perpendicular_line(orthocenter(A, F, H), altitude(D, A, B))
By concurrent_sufficient_conditions on Line(A, J), Line(A, H), f we get concurrent(f, Line(A, H), Line(A, J))
By concurrent_sufficient_conditions on Line(A, J), Line(A, I), i we get concurrent(i, Line(A, I), Line(A, J))
By perpendicular_line_definition on orthocenter(B, C, E), j, h we get j == perpendicular_line(orthocenter(B, C, E), h)
By perpendicular_line_definition on orthocenter(B, C, G), h, j we get h == perpendicular_line(orthocenter(B, C, G), j)
By line_unique_intersection_v0 on f, k, orthocenter(B, F, H), F we get F == orthocenter(B, F, H)
By perpendicular_line_definition on orthocenter(B, C, E), j, altitude(D, B, G) we get j == perpendicular_line(orthocenter(B, C, E), altitude(D, B, G))
By concurrent_sufficient_conditions on Line(G, I), Line(G, H), j we get concurrent(j, Line(G, H), Line(G, I))
By line_unique_intersection_v0 on g, i, orthocenter(A, B, D), orthocenter(A, D, J) we get orthocenter(A, B, D) == orthocenter(A, D, J)
By line_unique_intersection_v0 on i, g, D, orthocenter(B, D, G) we get D == orthocenter(B, D, G)
By line_unique_intersection_v0 on g, i, D, orthocenter(A, D, J) we get D == orthocenter(A, D, J)
By line_unique_intersection_v0 on k, f, orthocenter(B, C, F), orthocenter(A, C, F) we get orthocenter(A, C, F) == orthocenter(B, C, F)
By line_unique_intersection_v0 on g, i, orthocenter(B, D, G), orthocenter(A, B, D) we get orthocenter(A, B, D) == orthocenter(B, D, G)
By line_unique_intersection_v0 on i, g, orthocenter(D, G, J), orthocenter(B, D, G) we get orthocenter(B, D, G) == orthocenter(D, G, J)
By line_unique_intersection_v0 on j, h, E, orthocenter(B, C, E) we get E == orthocenter(B, C, E)
By line_unique_intersection_v0 on j, h, orthocenter(A, E, G), E we get E == orthocenter(A, E, G)
By line_unique_intersection_v0 on h, j, orthocenter(A, E, G), orthocenter(B, C, E) we get orthocenter(A, E, G) == orthocenter(B, C, E)
By line_unique_intersection_v0 on g, i, orthocenter(A, B, D), orthocenter(D, G, J) we get orthocenter(A, B, D) == orthocenter(D, G, J)
By line_unique_intersection_v0 on h, j, orthocenter(A, B, E), orthocenter(C, E, G) we get orthocenter(A, B, E) == orthocenter(C, E, G)
By line_unique_intersection_v0 on g, i, D, orthocenter(A, B, D) we get D == orthocenter(A, B, D)
By line_unique_intersection_v0 on g, i, orthocenter(A, C, D), orthocenter(C, D, G) we get orthocenter(A, C, D) == orthocenter(C, D, G)
By line_unique_intersection_v0 on i, g, orthocenter(A, C, D), orthocenter(D, G, J) we get orthocenter(A, C, D) == orthocenter(D, G, J)
By line_unique_intersection_v0 on j, h, E, orthocenter(A, B, E) we get E == orthocenter(A, B, E)
By line_unique_intersection_v0 on j, g, orthocenter(A, C, G), B we get B == orthocenter(A, C, G)
By line_unique_intersection_v0 on k, f, F, orthocenter(A, C, F) we get F == orthocenter(A, C, F)
By line_unique_intersection_v0 on j, h, orthocenter(A, E, G), orthocenter(C, E, G) we get orthocenter(A, E, G) == orthocenter(C, E, G)
By line_unique_intersection_v0 on g, i, D, orthocenter(C, D, G) we get D == orthocenter(C, D, G)
By line_unique_intersection_v0 on j, h, E, orthocenter(C, E, G) we get E == orthocenter(C, E, G)
By line_unique_intersection_v0 on g, i, orthocenter(A, C, D), orthocenter(A, B, D) we get orthocenter(A, B, D) == orthocenter(A, C, D)
By line_unique_intersection_v0 on g, i, D, orthocenter(D, G, J) we get D == orthocenter(D, G, J)
By line_unique_intersection_v0 on g, i, orthocenter(A, C, D), D we get D == orthocenter(A, C, D)
By line_unique_intersection_v0 on k, f, orthocenter(A, C, F), orthocenter(B, F, H) we get orthocenter(A, C, F) == orthocenter(B, F, H)
By line_unique_intersection_v0 on g, i, orthocenter(D, G, J), orthocenter(C, D, G) we get orthocenter(C, D, G) == orthocenter(D, G, J)
By line_unique_intersection_v0 on k, f, orthocenter(A, F, H), F we get F == orthocenter(A, F, H)
By line_unique_intersection_v0 on g, i, orthocenter(A, D, J), orthocenter(A, C, D) we get orthocenter(A, C, D) == orthocenter(A, D, J)
By line_unique_intersection_v0 on k, f, F, orthocenter(B, C, F) we get F == orthocenter(B, C, F)
By line_unique_intersection_v0 on g, h, C, orthocenter(A, B, G) we get C == orthocenter(A, B, G)
By line_unique_intersection_v0 on i, g, orthocenter(B, D, G), orthocenter(A, C, D) we get orthocenter(A, C, D) == orthocenter(B, D, G)
By line_unique_intersection_v0 on j, h, orthocenter(A, B, E), orthocenter(A, E, G) we get orthocenter(A, B, E) == orthocenter(A, E, G)
By line_unique_intersection_v0 on i, g, orthocenter(A, B, D), orthocenter(C, D, G) we get orthocenter(A, B, D) == orthocenter(C, D, G)
By line_unique_intersection_v0 on j, h, orthocenter(A, B, E), orthocenter(B, C, E) we get orthocenter(A, B, E) == orthocenter(B, C, E)
By line_unique_intersection_v0 on g, i, orthocenter(A, D, J), orthocenter(C, D, G) we get orthocenter(A, D, J) == orthocenter(C, D, G)
By line_unique_intersection_v0 on j, h, orthocenter(C, E, G), orthocenter(B, C, E) we get orthocenter(B, C, E) == orthocenter(C, E, G)
By line_unique_intersection_v0 on g, i, orthocenter(A, D, J), orthocenter(B, D, G) we get orthocenter(A, D, J) == orthocenter(B, D, G)
By line_unique_intersection_v0 on i, h, orthocenter(B, C, G), A we get A == orthocenter(B, C, G)
By line_unique_intersection_v0 on k, f, orthocenter(A, F, H), orthocenter(B, C, F) we get orthocenter(A, F, H) == orthocenter(B, C, F)
By line_unique_intersection_v0 on g, i, orthocenter(A, D, J), orthocenter(D, G, J) we get orthocenter(A, D, J) == orthocenter(D, G, J)
By line_unique_intersection_v0 on f, k, orthocenter(B, F, H), orthocenter(B, C, F) we get orthocenter(B, C, F) == orthocenter(B, F, H)
By line_unique_intersection_v0 on i, g, orthocenter(B, D, G), orthocenter(C, D, G) we get orthocenter(B, D, G) == orthocenter(C, D, G)
By line_unique_intersection_v0 on f, k, orthocenter(A, C, F), orthocenter(A, F, H) we get orthocenter(A, C, F) == orthocenter(A, F, H)
By same_angle_converse_v1 on center(d), A, J, D we get collinear(A, J, center(d))
By same_angle_v1 on H, G, C, I we get angle(C, H, I) == angle(G, H, I) mod 360
By same_angle_v0 on H, G, F, A we get angle(F, H, A) == angle(G, H, A) mod 360
By same_angle_v1 on H, G, F, I we get angle(F, H, I) == angle(G, H, I) mod 360
By same_angle_v0 on H, C, G, A we get angle(C, H, A) == angle(G, H, A) mod 360
By between_imply_not_between on D, B, J we get collinear_and_not_between(B, D, J)
By between_imply_not_between on C, D, J we get collinear_and_not_between(D, C, J)
By between_imply_not_between on J, D, C we get collinear_and_not_between(C, J, D)
By between_imply_not_between on J, B, D we get collinear_and_not_between(B, J, D)
By different_points_v1 on center(c), A we get 0 != distance(A, center(c))
By different_points_v1 on center(d), J we get 0 != distance(J, center(d))
By different_points_v1 on J, G we get 0 != distance(G, J)
By in_imply_collinear on orthocenter(A, B, D), D, B we get collinear(B, D, orthocenter(A, B, D))
By different_points_v1 on I, center(d) we get 0 != distance(I, center(d))
By same_angle_v1 on G, F, H, A we get angle(F, G, A) == angle(H, G, A) mod 360
By different_points_v1 on center(c), G we get 0 != distance(G, center(c))
By same_angle_v0 on G, H, F, B we get angle(F, G, B) == angle(H, G, B) mod 360
By same_angle_v2 on G, D, A, C we get angle(D, G, C) == angle(A, G, C) + 180 mod 360
By same_angle_v2 on G, A, D, J we get angle(A, G, J) == angle(D, G, J) + 180 mod 360
By different_points_v1 on center(d), D we get 0 != distance(D, center(d))
By same_angle_v0 on G, F, H, D we get angle(F, G, D) == angle(H, G, D) mod 360
By same_angle_v0 on J, D, B, G we get angle(B, J, G) == angle(D, J, G) mod 360
By different_points_v1 on center(c), I we get 0 != distance(I, center(c))
By different_points_v1 on C, G we get 0 != distance(C, G)
By different_points_v1 on H, B we get 0 != distance(B, H)
By different_points_v1 on H, center(c) we get 0 != distance(H, center(c))
By same_angle_v0 on F, G, C, A we get angle(C, F, A) == angle(G, F, A) mod 360
By different_points_v1 on A, center(d) we get 0 != distance(A, center(d))
By same_angle_v0 on C, G, H, J we get angle(G, C, J) == angle(H, C, J) mod 360
By same_angle_v1 on C, B, D, G we get angle(B, C, G) == angle(D, C, G) mod 360
By same_angle_v0 on B, D, C, H we get angle(C, B, H) == angle(D, B, H) mod 360
By same_angle_v3 on G, E, B, J we get angle(E, G, J) == angle(B, G, J) + 180 mod 360
By same_angle_v0 on C, H, G, B we get angle(G, C, B) == angle(H, C, B) mod 360
By same_angle_v1 on H, G, F, B we get angle(F, H, B) == angle(G, H, B) mod 360
By same_angle_v0 on C, F, G, B we get angle(F, C, B) == angle(G, C, B) mod 360
By same_angle_v3 on G, H, C, B we get angle(H, G, B) == angle(C, G, B) + 180 mod 360
By same_angle_v1 on C, D, J, G we get angle(D, C, G) == angle(J, C, G) mod 360
By same_angle_v1 on C, F, G, E we get angle(F, C, E) == angle(G, C, E) mod 360
By same_angle_v1 on C, J, B, G we get angle(B, C, G) == angle(J, C, G) mod 360
By projection_definition on A, I, Line(I, J) we get I == projection(A, Line(I, J))
By same_angle_v3 on B, C, J, H we get angle(C, B, H) == angle(J, B, H) + 180 mod 360
By same_angle_v0 on B, E, G, H we get angle(E, B, H) == angle(G, B, H) mod 360
By same_angle_v2 on F, H, G, B we get angle(H, F, B) == angle(G, F, B) + 180 mod 360
By same_angle_v0 on C, F, G, J we get angle(F, C, J) == angle(G, C, J) mod 360
By same_angle_v3 on G, C, H, E we get angle(C, G, E) == angle(H, G, E) + 180 mod 360
By same_angle_v1 on C, G, F, A we get angle(F, C, A) == angle(G, C, A) mod 360
By same_angle_v1 on H, C, G, B we get angle(C, H, B) == angle(G, H, B) mod 360
By same_angle_v0 on C, H, G, D we get angle(G, C, D) == angle(H, C, D) mod 360
By same_angle_v3 on G, C, H, A we get angle(C, G, A) == angle(H, G, A) + 180 mod 360
By same_angle_v2 on B, D, J, H we get angle(D, B, H) == angle(J, B, H) + 180 mod 360
By same_angle_v0 on C, G, F, D we get angle(F, C, D) == angle(G, C, D) mod 360
By same_angle_v1 on F, C, G, B we get angle(C, F, B) == angle(G, F, B) mod 360
By same_angle_v0 on B, F, A, H we get angle(A, B, H) == angle(F, B, H) mod 360
By same_angle_v0 on C, A, E, G we get angle(A, C, G) == angle(E, C, G) mod 360
By same_angle_v2 on F, G, H, A we get angle(G, F, A) == angle(H, F, A) + 180 mod 360
By same_angle_v1 on C, G, H, A we get angle(G, C, A) == angle(H, C, A) mod 360
By in_imply_collinear on orthocenter(A, B, E), E, A we get collinear(A, E, orthocenter(A, B, E))
By same_angle_v3 on G, H, C, I we get angle(H, G, I) == angle(C, G, I) + 180 mod 360
By same_angle_v2 on G, H, C, D we get angle(H, G, D) == angle(C, G, D) + 180 mod 360
By same_angle_v2 on G, B, E, C we get angle(B, G, C) == angle(E, G, C) + 180 mod 360
By same_angle_v1 on G, H, F, E we get angle(F, G, E) == angle(H, G, E) mod 360
By same_angle_v1 on C, G, H, E we get angle(G, C, E) == angle(H, C, E) mod 360
By same_angle_v1 on H, F, C, B we get angle(C, H, B) == angle(F, H, B) mod 360
By same_angle_v0 on J, C, B, G we get angle(B, J, G) == angle(C, J, G) mod 360
By same_angle_v0 on J, D, C, G we get angle(C, J, G) == angle(D, J, G) mod 360
By in_imply_collinear on orthocenter(A, E, G), A, E we get collinear(A, E, orthocenter(A, E, G))
By same_angle_v0 on G, F, H, I we get angle(F, G, I) == angle(H, G, I) mod 360
By in_imply_collinear on orthocenter(B, C, E), A, C we get collinear(A, C, orthocenter(B, C, E))
By in_imply_collinear on orthocenter(A, E, G), E, C we get collinear(C, E, orthocenter(A, E, G))
By in_imply_collinear on orthocenter(A, F, H), C, F we get collinear(C, F, orthocenter(A, F, H))
By in_imply_collinear on orthocenter(D, G, J), C, D we get collinear(C, D, orthocenter(D, G, J))
By in_imply_collinear on orthocenter(A, D, J), J, C we get collinear(C, J, orthocenter(A, D, J))
By line_inequality on Line(G, J), Line(H, I), J we get Line(G, J) != Line(H, I)
By in_imply_collinear on orthocenter(A, B, G), B, D we get collinear(B, D, orthocenter(A, B, G))
By in_imply_collinear on orthocenter(C, D, G), J, B we get collinear(B, J, orthocenter(C, D, G))
By in_imply_collinear on orthocenter(C, E, G), E, G we get collinear(E, G, orthocenter(C, E, G))
By in_imply_collinear on orthocenter(B, C, G), C, A we get collinear(A, C, orthocenter(B, C, G))
By projection_definition on J, I, Line(A, I) we get I == projection(J, Line(A, I))
By in_imply_collinear on orthocenter(A, E, G), B, E we get collinear(B, E, orthocenter(A, E, G))
By in_imply_collinear on orthocenter(B, C, G), A, D we get collinear(A, D, orthocenter(B, C, G))
By in_imply_collinear on orthocenter(A, C, F), C, H we get collinear(C, H, orthocenter(A, C, F))
By in_imply_collinear on orthocenter(A, C, G), D, C we get collinear(C, D, orthocenter(A, C, G))
By probably_between_and_collinear_implies_between on C, G, F we get between(C, G, F)
By in_imply_collinear on orthocenter(A, B, E), C, A we get collinear(A, C, orthocenter(A, B, E))
By in_imply_collinear on orthocenter(D, G, J), B, C we get collinear(B, C, orthocenter(D, G, J))
By in_imply_collinear on orthocenter(B, C, F), F, A we get collinear(A, F, orthocenter(B, C, F))
By in_imply_collinear on orthocenter(D, G, J), G, A we get collinear(A, G, orthocenter(D, G, J))
By in_imply_collinear on orthocenter(A, C, F), F, B we get collinear(B, F, orthocenter(A, C, F))
By in_imply_collinear on orthocenter(A, D, J), C, D we get collinear(C, D, orthocenter(A, D, J))
By probably_between_and_collinear_implies_between on H, F, G we get between(G, F, H)
By in_imply_collinear on orthocenter(A, C, G), E, B we get collinear(B, E, orthocenter(A, C, G))
By in_imply_collinear on orthocenter(B, F, H), A, B we get collinear(A, B, orthocenter(B, F, H))
By in_imply_collinear on orthocenter(A, C, G), D, J we get collinear(D, J, orthocenter(A, C, G))
By in_imply_collinear on orthocenter(A, C, G), B, G we get collinear(B, G, orthocenter(A, C, G))
By in_imply_collinear on orthocenter(B, C, E), E, B we get collinear(B, E, orthocenter(B, C, E))
By in_imply_collinear on orthocenter(A, B, D), D, A we get collinear(A, D, orthocenter(A, B, D))
By in_imply_collinear on orthocenter(A, C, F), A, B we get collinear(A, B, orthocenter(A, C, F))
By in_imply_collinear on orthocenter(B, F, H), H, C we get collinear(C, H, orthocenter(B, F, H))
By in_imply_collinear on orthocenter(A, B, G), E, A we get collinear(A, E, orthocenter(A, B, G))
By probably_between_and_collinear_implies_between on C, G, H we get between(C, G, H)
By in_imply_collinear on orthocenter(A, C, D), B, C we get collinear(B, C, orthocenter(A, C, D))
By in_imply_collinear on orthocenter(A, D, J), C, B we get collinear(B, C, orthocenter(A, D, J))
By in_imply_collinear on orthocenter(D, G, J), B, D we get collinear(B, D, orthocenter(D, G, J))
By in_imply_collinear on orthocenter(B, C, F), H, F we get collinear(F, H, orthocenter(B, C, F))
By in_imply_collinear on orthocenter(D, G, J), G, D we get collinear(D, G, orthocenter(D, G, J))
By in_imply_collinear on orthocenter(A, F, H), H, F we get collinear(F, H, orthocenter(A, F, H))
By in_imply_collinear on orthocenter(C, E, G), B, E we get collinear(B, E, orthocenter(C, E, G))
By in_imply_collinear on orthocenter(A, B, G), E, C we get collinear(C, E, orthocenter(A, B, G))
By in_imply_collinear on orthocenter(A, B, D), C, B we get collinear(B, C, orthocenter(A, B, D))
By in_imply_collinear on orthocenter(C, D, G), B, D we get collinear(B, D, orthocenter(C, D, G))
By in_imply_collinear on orthocenter(C, D, G), C, J we get collinear(C, J, orthocenter(C, D, G))
By in_imply_collinear on orthocenter(A, B, E), G, E we get collinear(E, G, orthocenter(A, B, E))
By in_imply_collinear on orthocenter(B, C, G), A, G we get collinear(A, G, orthocenter(B, C, G))
By in_imply_collinear on orthocenter(A, C, G), B, J we get collinear(B, J, orthocenter(A, C, G))
By in_imply_collinear on orthocenter(A, B, G), J, D we get collinear(D, J, orthocenter(A, B, G))
By in_imply_collinear on orthocenter(D, G, J), D, A we get collinear(A, D, orthocenter(D, G, J))
By in_imply_collinear on orthocenter(C, D, G), G, D we get collinear(D, G, orthocenter(C, D, G))
By in_imply_collinear on orthocenter(A, B, D), J, C we get collinear(C, J, orthocenter(A, B, D))
By in_imply_collinear on orthocenter(A, F, H), A, B we get collinear(A, B, orthocenter(A, F, H))
By in_imply_collinear on orthocenter(D, G, J), J, C we get collinear(C, J, orthocenter(D, G, J))
By line_containment_inequality on orthocenter(B, D, G), F, g we get F != orthocenter(B, D, G)
By in_imply_collinear on orthocenter(B, C, F), F, B we get collinear(B, F, orthocenter(B, C, F))
By in_imply_collinear on orthocenter(A, B, E), G, B we get collinear(B, G, orthocenter(A, B, E))
By in_imply_collinear on orthocenter(A, C, F), H, F we get collinear(F, H, orthocenter(A, C, F))
By in_imply_collinear on orthocenter(C, E, G), B, G we get collinear(B, G, orthocenter(C, E, G))
By in_imply_collinear on orthocenter(B, C, E), G, B we get collinear(B, G, orthocenter(B, C, E))
By line_inequality on altitude(D, A, C), h, D we get h != altitude(D, A, C)
By in_imply_collinear on orthocenter(B, D, G), J, B we get collinear(B, J, orthocenter(B, D, G))
By in_imply_collinear on orthocenter(B, D, G), C, J we get collinear(C, J, orthocenter(B, D, G))
By line_containment_inequality on orthocenter(A, F, H), H, f we get H != orthocenter(A, F, H)
By in_imply_collinear on orthocenter(A, C, G), B, D we get collinear(B, D, orthocenter(A, C, G))
By double_perpendicular_and_parallel_v0 on i, g, altitude(F, B, C) we get parallel(i, altitude(F, B, C))
By in_imply_collinear on orthocenter(C, D, G), C, B we get collinear(B, C, orthocenter(C, D, G))
By in_imply_collinear on orthocenter(B, C, F), B, A we get collinear(A, B, orthocenter(B, C, F))
By in_imply_collinear on orthocenter(A, C, D), G, D we get collinear(D, G, orthocenter(A, C, D))
By in_imply_collinear on orthocenter(D, G, J), D, J we get collinear(D, J, orthocenter(D, G, J))
By in_imply_collinear on orthocenter(A, F, H), C, H we get collinear(C, H, orthocenter(A, F, H))
By in_imply_collinear on orthocenter(A, B, G), C, J we get collinear(C, J, orthocenter(A, B, G))
By in_imply_collinear on orthocenter(A, C, D), D, B we get collinear(B, D, orthocenter(A, C, D))
By in_imply_collinear on orthocenter(B, D, G), B, C we get collinear(B, C, orthocenter(B, D, G))
By in_imply_collinear on orthocenter(B, C, E), E, G we get collinear(E, G, orthocenter(B, C, E))
By in_imply_collinear on orthocenter(A, B, D), D, G we get collinear(D, G, orthocenter(A, B, D))
By in_imply_collinear on orthocenter(A, E, G), G, E we get collinear(E, G, orthocenter(A, E, G))
By in_imply_collinear on orthocenter(A, D, J), J, D we get collinear(D, J, orthocenter(A, D, J))
By in_imply_collinear on orthocenter(A, B, G), A, C we get collinear(A, C, orthocenter(A, B, G))
By in_imply_collinear on orthocenter(B, D, G), C, D we get collinear(C, D, orthocenter(B, D, G))
By in_imply_collinear on orthocenter(A, B, G), D, C we get collinear(C, D, orthocenter(A, B, G))
By in_imply_collinear on orthocenter(A, B, G), F, C we get collinear(C, F, orthocenter(A, B, G))
By in_imply_collinear on orthocenter(A, C, G), G, E we get collinear(E, G, orthocenter(A, C, G))
By in_imply_collinear on orthocenter(A, B, E), E, C we get collinear(C, E, orthocenter(A, B, E))
By in_imply_collinear on orthocenter(A, D, J), D, A we get collinear(A, D, orthocenter(A, D, J))
By in_imply_collinear on orthocenter(B, D, G), A, D we get collinear(A, D, orthocenter(B, D, G))
By in_imply_collinear on orthocenter(C, E, G), A, C we get collinear(A, C, orthocenter(C, E, G))
By in_imply_collinear on orthocenter(A, B, D), D, J we get collinear(D, J, orthocenter(A, B, D))
By in_imply_collinear on orthocenter(C, D, G), A, D we get collinear(A, D, orthocenter(C, D, G))
By in_imply_collinear on orthocenter(A, B, G), B, J we get collinear(B, J, orthocenter(A, B, G))
By in_imply_collinear on orthocenter(A, B, D), C, D we get collinear(C, D, orthocenter(A, B, D))
By in_imply_collinear on orthocenter(B, F, H), B, F we get collinear(B, F, orthocenter(B, F, H))
By in_imply_collinear on orthocenter(B, C, F), C, H we get collinear(C, H, orthocenter(B, C, F))
By in_imply_collinear on orthocenter(C, D, G), G, A we get collinear(A, G, orthocenter(C, D, G))
By in_imply_collinear on orthocenter(A, B, G), H, F we get collinear(F, H, orthocenter(A, B, G))
By in_imply_collinear on orthocenter(C, E, G), C, E we get collinear(C, E, orthocenter(C, E, G))
By in_imply_collinear on orthocenter(A, D, J), B, D we get collinear(B, D, orthocenter(A, D, J))
By in_imply_collinear on orthocenter(A, E, G), G, B we get collinear(B, G, orthocenter(A, E, G))
By in_imply_collinear on orthocenter(B, C, G), D, G we get collinear(D, G, orthocenter(B, C, G))
By in_imply_collinear on orthocenter(A, D, J), D, G we get collinear(D, G, orthocenter(A, D, J))
By in_imply_collinear on orthocenter(A, C, D), D, A we get collinear(A, D, orthocenter(A, C, D))
By in_imply_collinear on orthocenter(B, D, G), A, G we get collinear(A, G, orthocenter(B, D, G))
By in_imply_collinear on orthocenter(B, F, H), F, H we get collinear(F, H, orthocenter(B, F, H))
By in_imply_collinear on orthocenter(C, D, G), J, D we get collinear(D, J, orthocenter(C, D, G))
By in_imply_collinear on orthocenter(A, F, H), A, F we get collinear(A, F, orthocenter(A, F, H))
By in_imply_collinear on orthocenter(B, D, G), D, B we get collinear(B, D, orthocenter(B, D, G))
By double_perpendicular_and_parallel_v0 on altitude(E, B, C), g, i we get parallel(i, altitude(E, B, C))
By in_imply_collinear on orthocenter(B, F, H), F, C we get collinear(C, F, orthocenter(B, F, H))
By in_imply_collinear on orthocenter(B, D, G), J, D we get collinear(D, J, orthocenter(B, D, G))
By in_imply_collinear on orthocenter(A, B, D), A, G we get collinear(A, G, orthocenter(A, B, D))
By in_imply_collinear on orthocenter(A, C, F), F, C we get collinear(C, F, orthocenter(A, C, F))
By in_imply_collinear on orthocenter(C, E, G), E, A we get collinear(A, E, orthocenter(C, E, G))
By in_imply_collinear on orthocenter(A, B, G), B, C we get collinear(B, C, orthocenter(A, B, G))
By in_imply_collinear on orthocenter(A, B, E), B, E we get collinear(B, E, orthocenter(A, B, E))
By in_imply_collinear on orthocenter(A, E, G), A, C we get collinear(A, C, orthocenter(A, E, G))
By in_imply_collinear on orthocenter(A, C, F), F, A we get collinear(A, F, orthocenter(A, C, F))
By in_imply_collinear on orthocenter(B, C, G), E, A we get collinear(A, E, orthocenter(B, C, G))
By in_imply_collinear on orthocenter(B, F, H), F, A we get collinear(A, F, orthocenter(B, F, H))
By line_containment_inequality on orthocenter(B, D, G), H, g we get H != orthocenter(B, D, G)
By in_imply_collinear on orthocenter(B, C, F), F, C we get collinear(C, F, orthocenter(B, C, F))
By in_imply_collinear on orthocenter(B, C, E), C, E we get collinear(C, E, orthocenter(B, C, E))
By in_imply_collinear on orthocenter(A, D, J), J, B we get collinear(B, J, orthocenter(A, D, J))
By line_inequality on altitude(D, A, C), Line(H, I), D we get Line(H, I) != altitude(D, A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on E, B, H we get E not in Line(B, H)
By in_imply_collinear on orthocenter(B, C, G), C, E we get collinear(C, E, orthocenter(B, C, G))
By in_imply_collinear on orthocenter(A, C, D), B, J we get collinear(B, J, orthocenter(A, C, D))
By double_perpendicular_and_parallel_v0 on altitude(D, C, G), Line(C, G), altitude(A, C, G) we get parallel(altitude(A, C, G), altitude(D, C, G))
By in_imply_collinear on orthocenter(C, D, G), C, D we get collinear(C, D, orthocenter(C, D, G))
By in_imply_collinear on orthocenter(A, F, H), F, B we get collinear(B, F, orthocenter(A, F, H))
By line_containment_inequality on orthocenter(A, B, E), C, j we get C != orthocenter(A, B, E)
By in_imply_collinear on orthocenter(A, B, G), C, H we get collinear(C, H, orthocenter(A, B, G))
By line_inequality on altitude(D, A, C), Line(A, J), D we get Line(A, J) != altitude(D, A, C)
By in_imply_collinear on orthocenter(A, C, D), D, J we get collinear(D, J, orthocenter(A, C, D))
By in_imply_collinear on orthocenter(D, G, J), B, J we get collinear(B, J, orthocenter(D, G, J))
By in_imply_collinear on orthocenter(B, C, E), A, E we get collinear(A, E, orthocenter(B, C, E))
By in_imply_collinear on orthocenter(B, D, G), G, D we get collinear(D, G, orthocenter(B, D, G))
By in_imply_collinear on orthocenter(A, C, G), B, C we get collinear(B, C, orthocenter(A, C, G))
By in_imply_collinear on orthocenter(A, C, D), C, J we get collinear(C, J, orthocenter(A, C, D))
By in_imply_collinear on orthocenter(A, B, D), J, B we get collinear(B, J, orthocenter(A, B, D))
By in_imply_collinear on orthocenter(A, D, J), G, A we get collinear(A, G, orthocenter(A, D, J))
By in_imply_collinear on orthocenter(A, C, G), J, C we get collinear(C, J, orthocenter(A, C, G))
By line_containment_inequality on orthocenter(B, C, F), E, k we get E != orthocenter(B, C, F)
By double_perpendicular_and_parallel_v0 on g, i, altitude(E, A, G) we get parallel(g, altitude(E, A, G))
By in_imply_collinear on orthocenter(A, C, D), G, A we get collinear(A, G, orthocenter(A, C, D))
By double_perpendicular_and_parallel_v0 on j, h, altitude(D, A, C) we get parallel(j, altitude(D, A, C))
By in_imply_collinear on orthocenter(A, C, D), C, D we get collinear(C, D, orthocenter(A, C, D))
By line_containment_inequality on orthocenter(B, C, F), I, f we get I != orthocenter(B, C, F)
By line_containment_inequality on orthocenter(B, C, G), H, i we get H != orthocenter(B, C, G)
By line_inequality on altitude(E, A, G), Line(A, J), E we get Line(A, J) != altitude(E, A, G)
By line_containment_inequality on orthocenter(B, C, F), D, k we get D != orthocenter(B, C, F)
By line_inequality on altitude(D, G, J), Line(G, H), D we get Line(G, H) != altitude(D, G, J)
By line_containment_inequality on orthocenter(B, F, H), D, k we get D != orthocenter(B, F, H)
By double_perpendicular_and_parallel_v0 on altitude(D, A, B), f, k we get parallel(k, altitude(D, A, B))
By line_inequality on Line(H, center(c)), g, H we get g != Line(H, center(c))
By line_inequality on Line(G, J), Line(D, I), J we get Line(D, I) != Line(G, J)
By line_containment_inequality on orthocenter(B, F, H), A, k we get A != orthocenter(B, F, H)
By line_inequality on altitude(F, A, C), Line(G, I), F we get Line(G, I) != altitude(F, A, C)
By line_containment_inequality on orthocenter(C, D, G), H, g we get H != orthocenter(C, D, G)
By double_perpendicular_and_parallel_v0 on altitude(D, A, C), h, altitude(F, A, C) we get parallel(altitude(D, A, C), altitude(F, A, C))
By line_containment_inequality on orthocenter(C, E, G), B, h we get B != orthocenter(C, E, G)
By line_containment_inequality on orthocenter(C, D, G), J, i we get J != orthocenter(C, D, G)
By not_in_line_equivalent_to_not_collinear_v0_r on F, B, H we get F not in Line(B, H)
By double_perpendicular_and_parallel_v0 on h, j, altitude(D, B, G) we get parallel(h, altitude(D, B, G))
By line_inequality on altitude(D, B, G), Line(G, H), D we get Line(G, H) != altitude(D, B, G)
By line_inequality on altitude(D, G, J), Line(A, J), D we get Line(A, J) != altitude(D, G, J)
By line_containment_inequality on orthocenter(A, B, G), D, h we get D != orthocenter(A, B, G)
By line_containment_inequality on orthocenter(D, G, J), C, i we get C != orthocenter(D, G, J)
By double_perpendicular_and_parallel_v0 on altitude(B, C, G), Line(C, G), altitude(D, C, G) we get parallel(altitude(B, C, G), altitude(D, C, G))
By double_perpendicular_and_parallel_v0 on altitude(B, C, G), Line(C, G), altitude(E, C, G) we get parallel(altitude(B, C, G), altitude(E, C, G))
By line_inequality on Line(A, center(c)), Line(H, I), A we get Line(H, I) != Line(A, center(c))
By line_inequality on Line(H, center(c)), Line(A, I), H we get Line(A, I) != Line(H, center(c))
By line_containment_inequality on orthocenter(B, D, G), I, i we get I != orthocenter(B, D, G)
By line_containment_inequality on orthocenter(A, F, H), C, f we get C != orthocenter(A, F, H)
By line_inequality on Line(G, J), f, J we get f != Line(G, J)
By line_inequality on altitude(E, C, G), Line(G, H), E we get Line(G, H) != altitude(E, C, G)
By not_in_line_equivalent_to_not_collinear_v0_r on C, B, H we get C not in Line(B, H)
By line_containment_inequality on orthocenter(A, B, G), F, g we get F != orthocenter(A, B, G)
By line_inequality on altitude(E, B, C), k, E we get k != altitude(E, B, C)
By line_containment_inequality on orthocenter(C, D, G), E, g we get E != orthocenter(C, D, G)
By line_containment_inequality on orthocenter(B, C, G), E, i we get E != orthocenter(B, C, G)
By double_perpendicular_and_parallel_v0 on j, h, altitude(F, A, C) we get parallel(j, altitude(F, A, C))
By not_in_line_equivalent_to_not_collinear_v0_r on A, C, G we get A not in Line(C, G)
By line_inequality on Line(B, H), h, B we get h != Line(B, H)
By line_containment_inequality on orthocenter(B, F, H), I, f we get I != orthocenter(B, F, H)
By line_containment_inequality on orthocenter(D, G, J), I, i we get I != orthocenter(D, G, J)
By not_in_line_equivalent_to_not_collinear_v0_r on G, B, H we get G not in Line(B, H)
By line_containment_inequality on orthocenter(A, B, D), I, i we get I != orthocenter(A, B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on F, J, G we get F not in Line(G, J)
By line_containment_inequality on orthocenter(B, C, F), H, f we get H != orthocenter(B, C, F)
By line_containment_inequality on orthocenter(A, D, J), F, i we get F != orthocenter(A, D, J)
By line_containment_inequality on orthocenter(A, D, J), H, i we get H != orthocenter(A, D, J)
By line_containment_inequality on orthocenter(A, F, H), I, k we get I != orthocenter(A, F, H)
By line_containment_inequality on orthocenter(A, C, F), H, f we get H != orthocenter(A, C, F)
By line_inequality on Line(C, G), Line(I, J), G we get Line(C, G) != Line(I, J)
By between_imply_segment_sum on D, B, J we get distance(D, J) == distance(B, D) + distance(B, J)
By line_circle_intersection_has_at_most_two_points_0 on G, H, C, c we get C not in c
By line_inequality on Line(B, H), f, H we get f != Line(B, H)
By line_inequality on altitude(D, B, G), h, D we get h != altitude(D, B, G)
By line_containment_inequality on orthocenter(A, E, G), F, j we get F != orthocenter(A, E, G)
By line_inequality on altitude(E, A, G), Line(A, H), E we get Line(A, H) != altitude(E, A, G)
By line_inequality on altitude(E, A, B), Line(D, I), E we get Line(D, I) != altitude(E, A, B)
By double_perpendicular_and_parallel_v0 on altitude(E, A, B), f, altitude(D, A, B) we get parallel(altitude(D, A, B), altitude(E, A, B))
By line_inequality on altitude(D, A, J), Line(G, I), D we get Line(G, I) != altitude(D, A, J)
By line_containment_inequality on orthocenter(B, C, G), F, i we get F != orthocenter(B, C, G)
By line_inequality on Line(J, center(d)), Line(D, I), J we get Line(D, I) != Line(J, center(d))
By line_containment_inequality on orthocenter(A, C, F), D, f we get D != orthocenter(A, C, F)
By collinear_definition on H, G, F we get G in Line(F, H), F in Line(G, H), Line(F, H) == Line(G, H), 0 == 2 * angle(G, H, F) mod 360
By line_inequality on altitude(B, C, G), Line(G, I), B we get Line(G, I) != altitude(B, C, G)
By line_inequality on altitude(F, B, C), Line(G, I), F we get Line(G, I) != altitude(F, B, C)
By collinear_definition on H, F, G we get F in Line(G, H), G in Line(F, H), Line(F, H) == Line(G, H), 0 == 2 * angle(F, H, G) mod 360
By line_containment_inequality on orthocenter(A, E, G), A, j we get A != orthocenter(A, E, G)
By between_imply_segment_sum on J, D, C we get distance(C, J) == distance(D, J) + distance(C, D)
By not_in_line_equivalent_to_not_collinear_v0_r on B, G, J we get B not in Line(G, J)
By line_containment_inequality on orthocenter(C, E, G), C, j we get C != orthocenter(C, E, G)
By line_inequality on altitude(D, C, G), Line(G, I), D we get Line(G, I) != altitude(D, C, G)
By line_containment_inequality on orthocenter(B, C, E), F, h we get F != orthocenter(B, C, E)
By not_in_line_equivalent_to_not_collinear_v0_r on I, G, J we get I not in Line(G, J)
By collinear_definition on H, C, G we get C in Line(G, H), G in Line(C, H), Line(C, H) == Line(G, H), 0 == 2 * angle(C, H, G) mod 360
By line_containment_inequality on orthocenter(B, C, F), A, k we get A != orthocenter(B, C, F)
By line_containment_inequality on orthocenter(A, F, H), G, f we get G != orthocenter(A, F, H)
By double_perpendicular_and_parallel_v0 on altitude(E, C, G), Line(C, G), altitude(A, C, G) we get parallel(altitude(A, C, G), altitude(E, C, G))
By line_containment_inequality on orthocenter(A, B, G), E, g we get E != orthocenter(A, B, G)
By double_perpendicular_and_parallel_v0 on altitude(A, C, G), Line(C, G), altitude(B, C, G) we get parallel(altitude(A, C, G), altitude(B, C, G))
By line_inequality on Line(C, G), i, C we get i != Line(C, G)
By line_inequality on Line(I, center(c)), Line(A, J), I we get Line(A, J) != Line(I, center(c))
By line_containment_inequality on orthocenter(B, D, G), A, g we get A != orthocenter(B, D, G)
By double_perpendicular_and_parallel_v0 on altitude(D, C, G), Line(C, G), altitude(E, C, G) we get parallel(altitude(D, C, G), altitude(E, C, G))
By line_inequality on Line(G, J), i, J we get i != Line(G, J)
By line_inequality on altitude(D, B, G), Line(H, I), D we get Line(H, I) != altitude(D, B, G)
By not_in_line_equivalent_to_not_collinear_v0_r on D, B, H we get D not in Line(B, H)
By line_containment_inequality on orthocenter(B, C, E), H, j we get H != orthocenter(B, C, E)
By line_containment_inequality on orthocenter(A, E, G), G, h we get G != orthocenter(A, E, G)
By line_inequality on Line(D, center(d)), Line(H, I), D we get Line(H, I) != Line(D, center(d))
By line_inequality on altitude(F, A, H), h, F we get h != altitude(F, A, H)
By line_containment_inequality on orthocenter(A, D, J), G, g we get G != orthocenter(A, D, J)
By line_containment_inequality on orthocenter(B, C, G), C, i we get C != orthocenter(B, C, G)
By line_inequality on Line(B, H), i, B we get i != Line(B, H)
By line_containment_inequality on orthocenter(A, D, J), I, g we get I != orthocenter(A, D, J)
By line_inequality on altitude(E, C, G), Line(A, I), E we get Line(A, I) != altitude(E, C, G)
By line_inequality on Line(D, center(d)), j, D we get j != Line(D, center(d))
By line_inequality on Line(C, G), Line(A, H), G we get Line(A, H) != Line(C, G)
By line_containment_inequality on orthocenter(A, B, G), A, g we get A != orthocenter(A, B, G)
By line_inequality on Line(A, center(d)), j, A we get j != Line(A, center(d))
By line_inequality on Line(G, J), k, J we get k != Line(G, J)
By collinear_definition on H, G, C we get G in Line(C, H), C in Line(G, H), Line(C, H) == Line(G, H), 0 == 2 * angle(G, H, C) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on A, H, B we get A not in Line(B, H)
By line_containment_inequality on orthocenter(A, B, D), H, i we get H != orthocenter(A, B, D)
By line_containment_inequality on orthocenter(A, C, G), I, g we get I != orthocenter(A, C, G)
By not_in_line_equivalent_to_not_collinear_v0_r on I, B, H we get I not in Line(B, H)
By line_inequality on altitude(F, B, H), Line(G, I), F we get Line(G, I) != altitude(F, B, H)
By line_inequality on Line(G, J), Line(G, I), J we get Line(G, I) != Line(G, J)
By line_inequality on Line(B, H), Line(G, I), B we get Line(B, H) != Line(G, I)
By line_inequality on Line(G, J), h, G we get h != Line(G, J)
By line_inequality on Line(G, center(c)), Line(A, H), G we get Line(A, H) != Line(G, center(c))
By line_inequality on altitude(D, A, B), Line(G, I), D we get Line(G, I) != altitude(D, A, B)
By double_perpendicular_and_parallel_v0 on altitude(E, A, B), f, k we get parallel(k, altitude(E, A, B))
By line_containment_inequality on orthocenter(A, E, G), I, h we get I != orthocenter(A, E, G)
By line_inequality on Line(I, center(d)), j, I we get j != Line(I, center(d))
By line_inequality on altitude(D, C, G), j, D we get j != altitude(D, C, G)
By not_in_line_equivalent_to_not_collinear_v0_r on H, J, G we get H not in Line(G, J)
By line_containment_inequality on orthocenter(D, G, J), E, i we get E != orthocenter(D, G, J)
By line_inequality on altitude(E, A, G), k, E we get k != altitude(E, A, G)
By double_perpendicular_and_parallel_v0 on altitude(E, B, C), g, altitude(F, B, C) we get parallel(altitude(E, B, C), altitude(F, B, C))
By line_containment_inequality on orthocenter(A, B, G), I, g we get I != orthocenter(A, B, G)
By line_inequality on altitude(A, C, G), Line(G, I), A we get Line(G, I) != altitude(A, C, G)
By line_containment_inequality on orthocenter(B, F, H), H, f we get H != orthocenter(B, F, H)
By line_inequality on altitude(D, A, J), f, D we get f != altitude(D, A, J)
By line_containment_inequality on orthocenter(C, E, G), J, h we get J != orthocenter(C, E, G)
By line_inequality on altitude(B, C, G), Line(I, J), B we get Line(I, J) != altitude(B, C, G)
By line_inequality on altitude(D, A, C), j, D we get j != altitude(D, A, C)
By line_inequality on altitude(D, C, G), Line(G, H), D we get Line(G, H) != altitude(D, C, G)
By line_containment_inequality on orthocenter(A, B, G), H, g we get H != orthocenter(A, B, G)
By line_inequality on altitude(F, A, H), Line(I, J), F we get Line(I, J) != altitude(F, A, H)
By line_inequality on altitude(D, G, J), f, D we get f != altitude(D, G, J)
By line_containment_inequality on orthocenter(B, D, G), J, i we get J != orthocenter(B, D, G)
By line_containment_inequality on orthocenter(B, C, E), I, h we get I != orthocenter(B, C, E)
By line_inequality on Line(H, center(c)), f, H we get f != Line(H, center(c))
By line_inequality on Line(B, H), j, H we get j != Line(B, H)
By line_inequality on altitude(A, C, G), Line(H, I), A we get Line(H, I) != altitude(A, C, G)
By not_in_line_equivalent_to_not_collinear_v0_r on J, H, B we get J not in Line(B, H)
By line_inequality on Line(I, center(c)), f, I we get f != Line(I, center(c))
By line_inequality on Line(I, center(c)), h, I we get h != Line(I, center(c))
By line_inequality on Line(J, center(d)), i, J we get i != Line(J, center(d))
By line_inequality on Line(C, G), Line(H, I), C we get Line(C, G) != Line(H, I)
By line_inequality on Line(G, center(c)), f, G we get f != Line(G, center(c))
By line_inequality on altitude(E, C, G), Line(I, J), E we get Line(I, J) != altitude(E, C, G)
By line_inequality on altitude(E, B, C), Line(A, J), E we get Line(A, J) != altitude(E, B, C)
By line_containment_inequality on orthocenter(A, B, E), H, j we get H != orthocenter(A, B, E)
By line_containment_inequality on orthocenter(A, B, E), F, j we get F != orthocenter(A, B, E)
By line_inequality on altitude(F, B, C), g, F we get g != altitude(F, B, C)
By line_inequality on altitude(F, B, C), Line(A, J), F we get Line(A, J) != altitude(F, B, C)
By line_containment_inequality on orthocenter(A, B, D), C, i we get C != orthocenter(A, B, D)
By line_inequality on Line(G, J), Line(A, J), G we get Line(A, J) != Line(G, J)
By line_inequality on Line(H, center(c)), Line(G, I), H we get Line(G, I) != Line(H, center(c))
By line_inequality on Line(B, H), Line(A, J), B we get Line(A, J) != Line(B, H)
By line_inequality on altitude(D, G, J), k, D we get k != altitude(D, G, J)
By line_inequality on Line(C, G), f, C we get f != Line(C, G)
By line_containment_inequality on orthocenter(A, B, G), B, h we get B != orthocenter(A, B, G)
By line_containment_inequality on orthocenter(B, D, G), E, i we get E != orthocenter(B, D, G)
By line_inequality on altitude(D, A, J), Line(A, H), D we get Line(A, H) != altitude(D, A, J)
By line_containment_inequality on orthocenter(A, D, J), C, i we get C != orthocenter(A, D, J)
By line_containment_inequality on orthocenter(B, C, G), B, i we get B != orthocenter(B, C, G)
By line_inequality on altitude(E, A, G), Line(H, I), E we get Line(H, I) != altitude(E, A, G)
By line_inequality on Line(J, center(d)), Line(G, H), J we get Line(G, H) != Line(J, center(d))
By line_inequality on altitude(E, A, B), Line(G, I), E we get Line(G, I) != altitude(E, A, B)
By line_inequality on altitude(F, B, H), h, F we get h != altitude(F, B, H)
By line_inequality on altitude(D, A, J), j, D we get j != altitude(D, A, J)
By line_containment_inequality on orthocenter(A, C, F), J, k we get J != orthocenter(A, C, F)
By line_inequality on Line(C, G), Line(A, J), C we get Line(A, J) != Line(C, G)
By line_containment_inequality on orthocenter(D, G, J), B, i we get B != orthocenter(D, G, J)
By not_in_line_equivalent_to_not_collinear_v0_r on E, G, C we get E not in Line(C, G)
By line_inequality on Line(I, center(c)), Line(A, H), I we get Line(A, H) != Line(I, center(c))
By line_inequality on altitude(E, C, G), g, E we get g != altitude(E, C, G)
By line_inequality on altitude(F, A, H), Line(G, I), F we get Line(G, I) != altitude(F, A, H)
By line_containment_inequality on orthocenter(B, C, G), D, h we get D != orthocenter(B, C, G)
By line_inequality on altitude(E, A, B), Line(A, I), E we get Line(A, I) != altitude(E, A, B)
By line_containment_inequality on orthocenter(B, C, F), C, f we get C != orthocenter(B, C, F)
By line_inequality on Line(D, center(d)), Line(G, I), D we get Line(G, I) != Line(D, center(d))
By line_inequality on Line(A, center(d)), g, A we get g != Line(A, center(d))
By line_containment_inequality on orthocenter(A, B, E), G, h we get G != orthocenter(A, B, E)
By line_containment_inequality on orthocenter(B, C, E), D, j we get D != orthocenter(B, C, E)
By line_containment_inequality on orthocenter(C, E, G), I, h we get I != orthocenter(C, E, G)
By line_containment_inequality on orthocenter(B, C, G), I, h we get I != orthocenter(B, C, G)
By not_in_line_equivalent_to_not_collinear_v0_r on C, G, J we get C not in Line(G, J)
By line_containment_inequality on orthocenter(C, D, G), B, i we get B != orthocenter(C, D, G)
By line_inequality on altitude(D, A, C), k, D we get k != altitude(D, A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on B, G, C we get B not in Line(C, G)
By line_inequality on altitude(D, A, C), f, D we get f != altitude(D, A, C)
By line_inequality on Line(I, center(c)), j, I we get j != Line(I, center(c))
By line_containment_inequality on orthocenter(C, E, G), F, j we get F != orthocenter(C, E, G)
By line_inequality on altitude(F, A, C), Line(A, H), F we get Line(A, H) != altitude(F, A, C)
By line_containment_inequality on orthocenter(A, B, D), F, i we get F != orthocenter(A, B, D)
By line_inequality on altitude(D, B, G), Line(G, I), D we get Line(G, I) != altitude(D, B, G)
By line_inequality on altitude(E, A, B), Line(I, J), E we get Line(I, J) != altitude(E, A, B)
By line_inequality on Line(D, center(d)), k, D we get k != Line(D, center(d))
By not_in_line_equivalent_to_not_collinear_v0_r on J, C, G we get J not in Line(C, G)
By line_containment_inequality on orthocenter(D, G, J), F, i we get F != orthocenter(D, G, J)
By line_containment_inequality on orthocenter(A, F, H), J, k we get J != orthocenter(A, F, H)
By line_inequality on Line(D, center(d)), Line(I, J), D we get Line(I, J) != Line(D, center(d))
By line_inequality on Line(B, H), Line(A, I), B we get Line(A, I) != Line(B, H)
By line_inequality on Line(I, center(d)), f, I we get f != Line(I, center(d))
By line_inequality on Line(B, H), Line(D, I), B we get Line(B, H) != Line(D, I)
By line_containment_inequality on orthocenter(A, C, G), E, g we get E != orthocenter(A, C, G)
By not_in_line_equivalent_to_not_collinear_v0_r on A, J, G we get A not in Line(G, J)
By line_inequality on Line(G, J), Line(I, J), G we get Line(G, J) != Line(I, J)
By line_containment_inequality on orthocenter(A, E, G), B, h we get B != orthocenter(A, E, G)
By line_containment_inequality on orthocenter(A, C, D), A, g we get A != orthocenter(A, C, D)
By line_containment_inequality on orthocenter(D, G, J), J, i we get J != orthocenter(D, G, J)
By line_inequality on Line(G, J), Line(G, H), J we get Line(G, H) != Line(G, J)
By line_containment_inequality on orthocenter(B, F, H), B, k we get B != orthocenter(B, F, H)
By line_containment_inequality on orthocenter(A, C, D), H, i we get H != orthocenter(A, C, D)
By line_inequality on Line(H, center(c)), j, H we get j != Line(H, center(c))
By line_inequality on Line(G, J), Line(A, I), G we get Line(A, I) != Line(G, J)
By line_inequality on Line(A, center(c)), Line(I, J), A we get Line(I, J) != Line(A, center(c))
By not_in_line_equivalent_to_not_collinear_v0_r on I, G, C we get I not in Line(C, G)
By line_inequality on altitude(E, A, B), k, E we get k != altitude(E, A, B)
By line_inequality on altitude(D, A, J), Line(A, J), D we get Line(A, J) != altitude(D, A, J)
By line_inequality on Line(A, center(d)), Line(H, I), A we get Line(H, I) != Line(A, center(d))
By line_inequality on altitude(B, C, G), k, B we get k != altitude(B, C, G)
By line_containment_inequality on orthocenter(A, E, G), D, j we get D != orthocenter(A, E, G)
By line_inequality on altitude(B, C, G), i, B we get i != altitude(B, C, G)
By line_inequality on Line(G, center(c)), Line(H, I), G we get Line(H, I) != Line(G, center(c))
By line_containment_inequality on orthocenter(A, C, F), I, k we get I != orthocenter(A, C, F)
By line_inequality on Line(I, center(c)), g, I we get g != Line(I, center(c))
By line_inequality on Line(G, center(c)), g, G we get g != Line(G, center(c))
By line_inequality on Line(G, center(c)), Line(A, I), G we get Line(A, I) != Line(G, center(c))
By line_containment_inequality on orthocenter(C, E, G), H, h we get H != orthocenter(C, E, G)
By line_inequality on altitude(E, B, C), f, E we get f != altitude(E, B, C)
By line_containment_inequality on orthocenter(B, F, H), E, k we get E != orthocenter(B, F, H)
By line_inequality on altitude(A, C, G), g, A we get g != altitude(A, C, G)
By line_containment_inequality on orthocenter(A, C, D), E, g we get E != orthocenter(A, C, D)
By line_inequality on altitude(F, A, H), Line(A, J), F we get Line(A, J) != altitude(F, A, H)
By line_inequality on altitude(E, A, B), f, E we get f != altitude(E, A, B)
By line_inequality on altitude(F, A, C), Line(D, I), F we get Line(D, I) != altitude(F, A, C)
By line_inequality on Line(B, H), k, B we get k != Line(B, H)
By line_inequality on Line(G, J), g, G we get g != Line(G, J)
By line_inequality on Line(A, center(c)), Line(D, I), A we get Line(D, I) != Line(A, center(c))
By line_containment_inequality on orthocenter(A, B, G), G, h we get G != orthocenter(A, B, G)
By line_containment_inequality on orthocenter(B, C, E), A, j we get A != orthocenter(B, C, E)
By line_containment_inequality on orthocenter(A, B, E), A, j we get A != orthocenter(A, B, E)
By line_inequality on Line(J, center(d)), Line(G, I), J we get Line(G, I) != Line(J, center(d))
By line_inequality on Line(J, center(d)), f, J we get f != Line(J, center(d))
By not_in_line_equivalent_to_not_collinear_v0_r on D, G, C we get D not in Line(C, G)
By line_inequality on altitude(E, A, G), Line(A, I), E we get Line(A, I) != altitude(E, A, G)
By line_inequality on altitude(D, G, J), Line(G, I), D we get Line(G, I) != altitude(D, G, J)
By line_inequality on altitude(D, A, C), Line(G, H), D we get Line(G, H) != altitude(D, A, C)
By line_inequality on Line(J, center(d)), Line(A, I), J we get Line(A, I) != Line(J, center(d))
By line_inequality on altitude(D, A, B), Line(A, H), D we get Line(A, H) != altitude(D, A, B)
By line_inequality on altitude(D, A, B), Line(H, I), D we get Line(H, I) != altitude(D, A, B)
By line_containment_inequality on orthocenter(A, E, G), H, j we get H != orthocenter(A, E, G)
By line_inequality on altitude(E, B, C), Line(D, I), E we get Line(D, I) != altitude(E, B, C)
By line_inequality on altitude(D, A, B), k, D we get k != altitude(D, A, B)
By line_inequality on altitude(E, B, C), Line(G, H), E we get Line(G, H) != altitude(E, B, C)
By line_inequality on Line(J, center(d)), j, J we get j != Line(J, center(d))
By line_containment_inequality on orthocenter(C, E, G), D, j we get D != orthocenter(C, E, G)
By line_inequality on altitude(D, A, B), f, D we get f != altitude(D, A, B)
By line_inequality on altitude(F, B, C), Line(I, J), F we get Line(I, J) != altitude(F, B, C)
By line_containment_inequality on orthocenter(B, C, G), G, h we get G != orthocenter(B, C, G)
By line_containment_inequality on orthocenter(A, F, H), B, k we get B != orthocenter(A, F, H)
By not_in_line_equivalent_to_not_collinear_v0_r on D, G, J we get D not in Line(G, J)
By line_inequality on altitude(B, C, G), Line(G, H), B we get Line(G, H) != altitude(B, C, G)
By line_containment_inequality on orthocenter(A, B, E), J, h we get J != orthocenter(A, B, E)
By line_inequality on altitude(F, B, H), Line(A, I), F we get Line(A, I) != altitude(F, B, H)
By line_containment_inequality on orthocenter(A, C, G), H, g we get H != orthocenter(A, C, G)
By line_circle_intersection_has_at_most_two_points_0 on H, G, F, c we get F not in c
By line_inequality on altitude(E, A, B), Line(A, H), E we get Line(A, H) != altitude(E, A, B)
By line_inequality on Line(A, center(d)), Line(G, H), A we get Line(G, H) != Line(A, center(d))
By line_containment_inequality on orthocenter(B, C, F), J, f we get J != orthocenter(B, C, F)
By line_inequality on altitude(E, C, G), Line(D, I), E we get Line(D, I) != altitude(E, C, G)
By line_inequality on altitude(D, G, J), h, D we get h != altitude(D, G, J)
By line_inequality on Line(H, center(c)), h, H we get h != Line(H, center(c))
By line_containment_inequality on orthocenter(C, D, G), A, g we get A != orthocenter(C, D, G)
By line_inequality on altitude(D, A, B), Line(A, J), D we get Line(A, J) != altitude(D, A, B)
By line_inequality on Line(G, J), Line(A, H), G we get Line(A, H) != Line(G, J)
By line_inequality on altitude(F, A, H), g, F we get g != altitude(F, A, H)
By line_inequality on Line(D, center(d)), Line(A, I), D we get Line(A, I) != Line(D, center(d))
By line_inequality on altitude(D, B, G), k, D we get k != altitude(D, B, G)
By line_inequality on Line(J, center(d)), Line(A, H), J we get Line(A, H) != Line(J, center(d))
By line_inequality on altitude(F, B, C), h, F we get h != altitude(F, B, C)
By line_containment_inequality on orthocenter(B, C, G), J, h we get J != orthocenter(B, C, G)
By line_containment_inequality on orthocenter(A, B, E), B, h we get B != orthocenter(A, B, E)
By line_inequality on Line(A, center(c)), Line(G, H), A we get Line(G, H) != Line(A, center(c))
By line_inequality on altitude(F, B, H), Line(A, J), F we get Line(A, J) != altitude(F, B, H)
By line_inequality on Line(D, center(d)), Line(A, H), D we get Line(A, H) != Line(D, center(d))
By line_inequality on altitude(A, C, G), Line(G, H), A we get Line(G, H) != altitude(A, C, G)
By line_inequality on Line(I, center(d)), i, I we get i != Line(I, center(d))
By line_inequality on altitude(E, A, B), Line(G, H), E we get Line(G, H) != altitude(E, A, B)
By line_containment_inequality on orthocenter(A, E, G), J, j we get J != orthocenter(A, E, G)
By line_containment_inequality on orthocenter(C, D, G), I, i we get I != orthocenter(C, D, G)
By line_inequality on Line(I, center(c)), k, I we get k != Line(I, center(c))
By line_inequality on Line(C, G), Line(G, I), C we get Line(C, G) != Line(G, I)
By line_containment_inequality on orthocenter(C, D, G), C, i we get C != orthocenter(C, D, G)
By line_inequality on altitude(D, A, B), j, D we get j != altitude(D, A, B)
By line_inequality on Line(D, center(d)), h, D we get h != Line(D, center(d))
By line_inequality on altitude(E, B, C), Line(A, H), E we get Line(A, H) != altitude(E, B, C)
By line_inequality on altitude(B, C, G), Line(H, I), B we get Line(H, I) != altitude(B, C, G)
By line_inequality on altitude(F, A, C), i, F we get i != altitude(F, A, C)
By line_inequality on Line(B, H), Line(H, I), B we get Line(B, H) != Line(H, I)
By line_containment_inequality on orthocenter(A, C, D), F, g we get F != orthocenter(A, C, D)
By line_inequality on altitude(F, B, H), Line(A, H), F we get Line(A, H) != altitude(F, B, H)
By line_inequality on altitude(F, B, C), Line(A, I), F we get Line(A, I) != altitude(F, B, C)
By line_inequality on Line(J, center(d)), h, J we get h != Line(J, center(d))
By line_containment_inequality on orthocenter(A, B, D), J, i we get J != orthocenter(A, B, D)
By line_inequality on altitude(F, A, H), Line(A, H), F we get Line(A, H) != altitude(F, A, H)
By line_inequality on Line(I, center(c)), Line(G, H), I we get Line(G, H) != Line(I, center(c))
By line_containment_inequality on orthocenter(A, B, D), A, g we get A != orthocenter(A, B, D)
By line_inequality on altitude(D, A, B), h, D we get h != altitude(D, A, B)
By line_inequality on altitude(B, C, G), Line(A, J), B we get Line(A, J) != altitude(B, C, G)
By line_containment_inequality on orthocenter(C, E, G), A, j we get A != orthocenter(C, E, G)
By line_containment_inequality on orthocenter(A, C, F), A, k we get A != orthocenter(A, C, F)
By line_containment_inequality on orthocenter(A, F, H), D, k we get D != orthocenter(A, F, H)
By line_containment_inequality on orthocenter(B, F, H), J, k we get J != orthocenter(B, F, H)
By line_inequality on altitude(B, C, G), Line(A, H), B we get Line(A, H) != altitude(B, C, G)
By line_inequality on altitude(B, C, G), h, B we get h != altitude(B, C, G)
By line_containment_inequality on orthocenter(A, D, J), E, g we get E != orthocenter(A, D, J)
By line_containment_inequality on orthocenter(A, B, E), D, j we get D != orthocenter(A, B, E)
By line_inequality on altitude(D, A, J), Line(G, H), D we get Line(G, H) != altitude(D, A, J)
By line_inequality on altitude(D, C, G), Line(A, I), D we get Line(A, I) != altitude(D, C, G)
By line_inequality on Line(I, center(d)), Line(A, J), I we get Line(A, J) != Line(I, center(d))
By line_inequality on altitude(D, C, G), Line(A, H), D we get Line(A, H) != altitude(D, C, G)
By line_containment_inequality on orthocenter(A, C, D), J, i we get J != orthocenter(A, C, D)
By line_inequality on altitude(F, A, C), j, F we get j != altitude(F, A, C)
By line_containment_inequality on orthocenter(A, B, D), G, g we get G != orthocenter(A, B, D)
By line_inequality on altitude(E, C, G), Line(A, J), E we get Line(A, J) != altitude(E, C, G)
By line_inequality on Line(A, center(d)), Line(D, I), A we get Line(D, I) != Line(A, center(d))
By line_inequality on Line(I, center(c)), i, I we get i != Line(I, center(c))
By line_inequality on altitude(E, C, G), k, E we get k != altitude(E, C, G)
By line_inequality on altitude(E, B, C), Line(H, I), E we get Line(H, I) != altitude(E, B, C)
By line_containment_inequality on orthocenter(B, D, G), C, i we get C != orthocenter(B, D, G)
By not_in_line_equivalent_to_not_collinear_v0_r on E, J, G we get E not in Line(G, J)
By line_inequality on Line(D, center(d)), Line(A, J), D we get Line(A, J) != Line(D, center(d))
By line_inequality on altitude(D, G, J), Line(I, J), D we get Line(I, J) != altitude(D, G, J)
By line_inequality on altitude(D, A, J), Line(I, J), D we get Line(I, J) != altitude(D, A, J)
By line_inequality on altitude(F, B, C), i, F we get i != altitude(F, B, C)
By line_inequality on Line(A, center(c)), Line(G, I), A we get Line(G, I) != Line(A, center(c))
By line_containment_inequality on orthocenter(A, C, G), A, j we get A != orthocenter(A, C, G)
By line_inequality on altitude(F, A, C), Line(A, I), F we get Line(A, I) != altitude(F, A, C)
By line_inequality on Line(G, center(c)), Line(D, I), G we get Line(D, I) != Line(G, center(c))
By line_containment_inequality on orthocenter(A, C, F), E, f we get E != orthocenter(A, C, F)
By line_containment_inequality on orthocenter(A, B, G), J, h we get J != orthocenter(A, B, G)
By line_inequality on Line(C, G), Line(A, I), G we get Line(A, I) != Line(C, G)
By line_containment_inequality on orthocenter(A, C, G), C, j we get C != orthocenter(A, C, G)
By line_inequality on altitude(D, B, G), Line(I, J), D we get Line(I, J) != altitude(D, B, G)
By line_inequality on altitude(E, C, G), Line(H, I), E we get Line(H, I) != altitude(E, C, G)
By line_inequality on Line(C, G), g, G we get g != Line(C, G)
By line_containment_inequality on orthocenter(C, E, G), G, h we get G != orthocenter(C, E, G)
By line_inequality on altitude(D, C, G), Line(I, J), D we get Line(I, J) != altitude(D, C, G)
By line_inequality on altitude(F, B, H), Line(H, I), F we get Line(H, I) != altitude(F, B, H)
By line_inequality on altitude(F, A, C), h, F we get h != altitude(F, A, C)
By line_inequality on Line(A, center(d)), k, A we get k != Line(A, center(d))
By line_inequality on altitude(F, A, H), Line(H, I), F we get Line(H, I) != altitude(F, A, H)
By line_inequality on altitude(F, A, C), Line(A, J), F we get Line(A, J) != altitude(F, A, C)
By line_inequality on altitude(F, B, H), i, F we get i != altitude(F, B, H)
By line_inequality on altitude(D, A, J), Line(A, I), D we get Line(A, I) != altitude(D, A, J)
By line_inequality on altitude(E, A, G), g, E we get g != altitude(E, A, G)
By line_inequality on Line(A, center(c)), j, A we get j != Line(A, center(c))
By line_containment_inequality on orthocenter(A, E, G), C, j we get C != orthocenter(A, E, G)
By line_inequality on Line(B, H), Line(I, J), H we get Line(B, H) != Line(I, J)
By line_inequality on altitude(D, G, J), Line(A, I), D we get Line(A, I) != altitude(D, G, J)
By line_containment_inequality on orthocenter(A, F, H), E, f we get E != orthocenter(A, F, H)
By line_inequality on altitude(F, A, C), g, F we get g != altitude(F, A, C)
By line_inequality on Line(B, H), Line(A, H), B we get Line(A, H) != Line(B, H)
By line_containment_inequality on orthocenter(B, F, H), G, f we get G != orthocenter(B, F, H)
By line_inequality on Line(G, center(c)), Line(A, J), G we get Line(A, J) != Line(G, center(c))
By line_inequality on altitude(D, G, J), Line(A, H), D we get Line(A, H) != altitude(D, G, J)
By line_containment_inequality on orthocenter(D, G, J), G, g we get G != orthocenter(D, G, J)
By line_inequality on altitude(F, B, H), Line(I, J), F we get Line(I, J) != altitude(F, B, H)
By line_inequality on altitude(D, C, G), Line(H, I), D we get Line(H, I) != altitude(D, C, G)
By line_inequality on Line(H, center(c)), Line(I, J), H we get Line(I, J) != Line(H, center(c))
By line_inequality on Line(I, center(d)), g, I we get g != Line(I, center(d))
By line_inequality on altitude(E, A, G), Line(G, I), E we get Line(G, I) != altitude(E, A, G)
By line_inequality on altitude(E, C, G), f, E we get f != altitude(E, C, G)
By line_containment_inequality on orthocenter(A, B, E), I, h we get I != orthocenter(A, B, E)
By line_inequality on altitude(E, A, G), i, E we get i != altitude(E, A, G)
By line_containment_inequality on orthocenter(A, B, D), B, i we get B != orthocenter(A, B, D)
By line_inequality on altitude(E, A, B), Line(A, J), E we get Line(A, J) != altitude(E, A, B)
By line_inequality on altitude(F, A, C), Line(H, I), F we get Line(H, I) != altitude(F, A, C)
By line_containment_inequality on orthocenter(A, B, D), E, g we get E != orthocenter(A, B, D)
By line_inequality on Line(B, H), Line(G, H), B we get Line(B, H) != Line(G, H)
By line_inequality on altitude(F, B, C), Line(H, I), F we get Line(H, I) != altitude(F, B, C)
By line_inequality on altitude(D, A, B), Line(I, J), D we get Line(I, J) != altitude(D, A, B)
By line_containment_inequality on orthocenter(B, C, E), C, j we get C != orthocenter(B, C, E)
By line_inequality on Line(H, center(c)), Line(D, I), H we get Line(D, I) != Line(H, center(c))
By line_inequality on altitude(F, B, H), j, F we get j != altitude(F, B, H)
By line_inequality on altitude(E, A, G), f, E we get f != altitude(E, A, G)
By line_inequality on altitude(D, A, J), h, D we get h != altitude(D, A, J)
By line_containment_inequality on orthocenter(B, C, E), G, h we get G != orthocenter(B, C, E)
By line_inequality on altitude(D, B, G), Line(A, H), D we get Line(A, H) != altitude(D, B, G)
By line_containment_inequality on orthocenter(B, D, G), G, g we get G != orthocenter(B, D, G)
By line_inequality on altitude(E, A, G), Line(I, J), E we get Line(I, J) != altitude(E, A, G)
By line_containment_inequality on orthocenter(B, C, F), B, k we get B != orthocenter(B, C, F)
By line_containment_inequality on orthocenter(B, C, E), J, j we get J != orthocenter(B, C, E)
By line_inequality on altitude(F, A, H), j, F we get j != altitude(F, A, H)
By line_containment_inequality on orthocenter(A, C, F), C, f we get C != orthocenter(A, C, F)
By line_containment_inequality on orthocenter(A, D, J), A, g we get A != orthocenter(A, D, J)
By line_inequality on altitude(F, A, H), Line(D, I), F we get Line(D, I) != altitude(F, A, H)
By line_inequality on altitude(A, C, G), Line(D, I), A we get Line(D, I) != altitude(A, C, G)
By line_containment_inequality on orthocenter(A, C, G), G, g we get G != orthocenter(A, C, G)
By line_containment_inequality on orthocenter(A, C, F), G, f we get G != orthocenter(A, C, F)
By line_inequality on altitude(D, A, B), Line(A, I), D we get Line(A, I) != altitude(D, A, B)
By line_inequality on altitude(F, B, C), Line(A, H), F we get Line(A, H) != altitude(F, B, C)
By line_containment_inequality on orthocenter(D, G, J), A, g we get A != orthocenter(D, G, J)
By line_inequality on altitude(D, C, G), k, D we get k != altitude(D, C, G)
By line_inequality on altitude(D, A, B), Line(G, H), D we get Line(G, H) != altitude(D, A, B)
By line_containment_inequality on orthocenter(A, C, D), I, g we get I != orthocenter(A, C, D)
By line_inequality on Line(I, center(d)), k, I we get k != Line(I, center(d))
By line_inequality on altitude(D, A, C), Line(A, I), D we get Line(A, I) != altitude(D, A, C)
By line_inequality on altitude(D, B, G), Line(A, I), D we get Line(A, I) != altitude(D, B, G)
By line_inequality on altitude(D, A, C), Line(A, H), D we get Line(A, H) != altitude(D, A, C)
By line_containment_inequality on orthocenter(A, C, G), F, g we get F != orthocenter(A, C, G)
By line_inequality on Line(B, H), g, H we get g != Line(B, H)
By line_inequality on Line(C, G), Line(D, I), G we get Line(C, G) != Line(D, I)
By line_inequality on altitude(D, A, C), Line(G, I), D we get Line(G, I) != altitude(D, A, C)
By line_inequality on altitude(E, A, B), i, E we get i != altitude(E, A, B)
By line_inequality on altitude(D, B, G), Line(A, J), D we get Line(A, J) != altitude(D, B, G)
By line_inequality on Line(C, G), h, G we get h != Line(C, G)
By line_containment_inequality on orthocenter(A, C, G), D, j we get D != orthocenter(A, C, G)
By line_inequality on altitude(E, A, G), Line(G, H), E we get Line(G, H) != altitude(E, A, G)
By line_inequality on altitude(F, A, H), Line(A, I), F we get Line(A, I) != altitude(F, A, H)
By line_inequality on Line(D, center(d)), Line(G, H), D we get Line(G, H) != Line(D, center(d))
By line_containment_inequality on orthocenter(C, D, G), F, g we get F != orthocenter(C, D, G)
By line_containment_inequality on orthocenter(A, C, D), C, i we get C != orthocenter(A, C, D)
By line_inequality on altitude(F, A, H), i, F we get i != altitude(F, A, H)
By line_inequality on altitude(D, B, G), f, D we get f != altitude(D, B, G)
By line_containment_inequality on orthocenter(A, C, F), B, k we get B != orthocenter(A, C, F)
By line_inequality on altitude(E, B, C), Line(I, J), E we get Line(I, J) != altitude(E, B, C)
By line_containment_inequality on orthocenter(A, F, H), A, k we get A != orthocenter(A, F, H)
By line_inequality on altitude(A, C, G), k, A we get k != altitude(A, C, G)
By line_inequality on altitude(E, A, B), Line(H, I), E we get Line(H, I) != altitude(E, A, B)
By line_inequality on altitude(F, B, H), Line(D, I), F we get Line(D, I) != altitude(F, B, H)
By line_inequality on altitude(E, B, C), i, E we get i != altitude(E, B, C)
By line_containment_inequality on orthocenter(A, C, D), G, g we get G != orthocenter(A, C, D)
By line_inequality on Line(G, center(c)), h, G we get h != Line(G, center(c))
By line_inequality on altitude(F, B, H), g, F we get g != altitude(F, B, H)
By line_containment_inequality on orthocenter(C, D, G), G, g we get G != orthocenter(C, D, G)
By line_inequality on Line(I, center(d)), Line(G, H), I we get Line(G, H) != Line(I, center(d))
By line_inequality on Line(H, center(c)), i, H we get i != Line(H, center(c))
By line_containment_inequality on orthocenter(A, D, J), J, i we get J != orthocenter(A, D, J)
By line_inequality on Line(A, center(d)), Line(I, J), A we get Line(I, J) != Line(A, center(d))
By line_inequality on Line(A, center(d)), Line(G, I), A we get Line(G, I) != Line(A, center(d))
By line_inequality on altitude(D, G, J), j, D we get j != altitude(D, G, J)
By line_containment_inequality on orthocenter(A, C, D), B, i we get B != orthocenter(A, C, D)
By line_inequality on Line(C, G), j, C we get j != Line(C, G)
By line_inequality on Line(A, center(c)), g, A we get g != Line(A, center(c))
By line_containment_inequality on orthocenter(B, D, G), B, i we get B != orthocenter(B, D, G)
By line_inequality on altitude(D, C, G), f, D we get f != altitude(D, C, G)
By line_inequality on Line(D, center(d)), f, D we get f != Line(D, center(d))
By line_inequality on Line(J, center(d)), Line(H, I), J we get Line(H, I) != Line(J, center(d))
By line_inequality on Line(A, center(c)), k, A we get k != Line(A, center(c))
By line_inequality on altitude(F, B, C), j, F we get j != altitude(F, B, C)
By line_containment_inequality on orthocenter(B, C, E), B, h we get B != orthocenter(B, C, E)
By line_inequality on altitude(E, B, C), g, E we get g != altitude(E, B, C)
By line_inequality on Line(G, J), j, J we get j != Line(G, J)
By line_inequality on altitude(A, C, G), j, A we get j != altitude(A, C, G)
By line_containment_inequality on orthocenter(A, D, J), B, i we get B != orthocenter(A, D, J)
By line_inequality on Line(G, center(c)), Line(I, J), G we get Line(I, J) != Line(G, center(c))
By line_inequality on altitude(A, C, G), Line(I, J), A we get Line(I, J) != altitude(A, C, G)
By line_inequality on altitude(E, C, G), Line(G, I), E we get Line(G, I) != altitude(E, C, G)
By line_inequality on altitude(E, A, B), g, E we get g != altitude(E, A, B)
By line_inequality on altitude(D, A, J), k, D we get k != altitude(D, A, J)
By line_containment_inequality on orthocenter(D, G, J), H, i we get H != orthocenter(D, G, J)
By line_inequality on altitude(E, C, G), i, E we get i != altitude(E, C, G)
By line_inequality on altitude(E, B, C), Line(A, I), E we get Line(A, I) != altitude(E, B, C)
By line_inequality on Line(I, center(d)), Line(A, H), I we get Line(A, H) != Line(I, center(d))
By line_inequality on altitude(F, A, C), Line(I, J), F we get Line(I, J) != altitude(F, A, C)
By line_inequality on altitude(F, B, C), Line(D, I), F we get Line(D, I) != altitude(F, B, C)
By line_inequality on altitude(D, A, J), Line(H, I), D we get Line(H, I) != altitude(D, A, J)
By line_inequality on altitude(B, C, G), Line(D, I), B we get Line(D, I) != altitude(B, C, G)
By line_containment_inequality on orthocenter(B, F, H), C, f we get C != orthocenter(B, F, H)
By line_inequality on Line(J, center(d)), k, J we get k != Line(J, center(d))
By line_inequality on altitude(D, C, G), h, D we get h != altitude(D, C, G)
By line_inequality on altitude(D, A, C), Line(I, J), D we get Line(I, J) != altitude(D, A, C)
By line_inequality on Line(H, center(c)), Line(A, J), H we get Line(A, J) != Line(H, center(c))
By line_inequality on altitude(D, B, G), j, D we get j != altitude(D, B, G)
By line_inequality on altitude(E, A, G), Line(D, I), E we get Line(D, I) != altitude(E, A, G)
By line_inequality on Line(I, center(d)), h, I we get h != Line(I, center(d))
By line_inequality on altitude(D, G, J), Line(H, I), D we get Line(H, I) != altitude(D, G, J)
By line_inequality on altitude(E, B, C), Line(G, I), E we get Line(G, I) != altitude(E, B, C)
By line_containment_inequality on orthocenter(B, C, F), G, f we get G != orthocenter(B, C, F)
By line_inequality on altitude(E, C, G), Line(A, H), E we get Line(A, H) != altitude(E, C, G)
By line_inequality on altitude(B, C, G), Line(A, I), B we get Line(A, I) != altitude(B, C, G)
By line_inequality on altitude(D, C, G), Line(A, J), D we get Line(A, J) != altitude(D, C, G)
By line_containment_inequality on orthocenter(A, C, G), J, j we get J != orthocenter(A, C, G)
By same_angle_v2 on G, C, F, A we get angle(C, G, A) == angle(F, G, A) + 180 mod 360
By same_angle_v2 on G, H, C, J we get angle(H, G, J) == angle(C, G, J) + 180 mod 360
By same_angle_v3 on G, F, C, D we get angle(F, G, D) == angle(C, G, D) + 180 mod 360
By same_angle_v0 on G, F, H, J we get angle(F, G, J) == angle(H, G, J) mod 360
By same_angle_v2 on G, C, F, E we get angle(C, G, E) == angle(F, G, E) + 180 mod 360
By same_angle_v3 on G, F, C, B we get angle(F, G, B) == angle(C, G, B) + 180 mod 360
By same_angle_v3 on G, F, C, I we get angle(F, G, I) == angle(C, G, I) + 180 mod 360
By collinear_definition on C, G, H we get G in Line(C, H), H in Line(C, G), Line(C, G) == Line(C, H), 0 == 2 * angle(G, C, H) mod 360
By reverse_direction on center(d), D we get 180 == direction(center(d), D) - direction(D, center(d)) mod 360
By concyclic_definition_0 on E, C, G, D we get D in Circle(C, E, G)
By internal_angle_bisector_definition_v0_r on C, B, D, J we get Line(B, J) == internal_angle_bisector(C, J, D)
By external_angle_bisector_definition_v0_r on B, J, C, D we get Line(D, J) == external_angle_bisector(B, D, C)
By internal_angle_bisector_definition_v0_r on B, C, D, J we get Line(C, J) == internal_angle_bisector(B, J, D)
By concyclic_definition_0 on D, G, E, C we get C in Circle(D, E, G)
By external_angle_bisector_definition_v0_r on C, D, J, B we get Line(B, D) == external_angle_bisector(C, B, J)
By concyclic_definition_0 on C, F, B, E we get E in Circle(B, C, F)
By perpendicular_lines_draw_intersection on Line(A, I), Line(I, J) we get exists(line_intersection(Line(A, I), Line(I, J)))
By internal_angle_bisector_definition_v0_r on C, J, D, B we get Line(B, J) == internal_angle_bisector(C, B, D)
By internal_angle_bisector_definition_v0_r on J, B, J, D we get Line(B, D) == internal_angle_bisector(J, D, J)
By concyclic_definition_0 on E, D, B, A we get A in Circle(B, D, E)
By external_angle_bisector_definition_v0_r on C, B, J, D we get Line(B, D) == external_angle_bisector(C, D, J)
By concyclic_definition_0 on C, E, B, F we get F in Circle(B, C, E)
By concyclic_definition_0 on G, C, D, E we get E in Circle(C, D, G)
By concyclic_definition_0 on C, D, E, G we get G in Circle(C, D, E)
By reverse_direction on center(d), I we get 180 == direction(center(d), I) - direction(I, center(d)) mod 360
By concyclic_definition_0 on A, E, B, D we get D in Circle(A, B, E)
By concyclic_definition_0 on D, F, C, A we get A in Circle(C, D, F)
By concyclic_definition_0 on A, F, D, C we get C in Circle(A, D, F)
By concyclic_definition_0 on F, A, C, D we get D in Circle(A, C, F)
By collinear_definition on F, G, C we get G in Line(C, F), C in Line(F, G), Line(C, F) == Line(F, G), 0 == 2 * angle(G, F, C) mod 360
By concyclic_definition_0 on A, D, C, F we get F in Circle(A, C, D)
By concyclic_definition_0 on D, A, E, B we get B in Circle(A, D, E)
By internal_angle_bisector_definition_v0_r on A, J, A, center(d) we get Line(J, center(d)) == internal_angle_bisector(A, center(d), A)
By internal_angle_bisector_definition_v0_r on D, J, B, C we get Line(C, J) == internal_angle_bisector(B, C, D)
By perpendicular_lines_draw_intersection on Line(G, J), altitude(D, G, J) we get exists(line_intersection(Line(G, J), altitude(D, G, J)))
By internal_angle_bisector_definition_v0_r on J, A, J, center(d) we get Line(A, center(d)) == internal_angle_bisector(J, center(d), J)
By concyclic_definition_0 on D, A, B, E we get E in Circle(A, B, D)
By internal_angle_bisector_definition_v0_r on D, C, D, J we get Line(C, J) == internal_angle_bisector(D, J, D)
By concyclic_definition_0 on F, E, B, C we get C in Circle(B, E, F)
By reverse_direction on center(c), I we get 180 == direction(center(c), I) - direction(I, center(c)) mod 360
By collinear_definition on F, H, G we get H in Line(F, G), G in Line(F, H), Line(F, G) == Line(F, H), 0 == 2 * angle(H, F, G) mod 360
By perpendicular_lines_draw_intersection on f, altitude(D, A, B) we get exists(line_intersection(f, altitude(D, A, B)))
By collinear_definition on C, F, G we get F in Line(C, G), G in Line(C, F), Line(C, F) == Line(C, G), 0 == 2 * angle(F, C, G) mod 360
By perpendicular_lines_draw_intersection on altitude(A, C, G), Line(C, G) we get exists(line_intersection(Line(C, G), altitude(A, C, G)))
By collinear_definition on G, H, F we get H in Line(F, G), F in Line(G, H), Line(F, G) == Line(G, H), 0 == 2 * angle(H, G, F) mod 360
By perpendicular_lines_draw_intersection on f, altitude(E, A, B) we get exists(line_intersection(f, altitude(E, A, B)))
By collinear_definition on C, H, G we get H in Line(C, G), G in Line(C, H), Line(C, G) == Line(C, H), 0 == 2 * angle(H, C, G) mod 360
By concyclic_definition_0 on F, E, C, B we get B in Circle(C, E, F)
By reverse_direction on center(d), J we get 180 == direction(center(d), J) - direction(J, center(d)) mod 360
By collinear_definition on G, C, H we get C in Line(G, H), H in Line(C, G), Line(C, G) == Line(G, H), 0 == 2 * angle(C, G, H) mod 360
By internal_angle_bisector_definition_v0_r on B, D, J, C we get Line(C, D) == internal_angle_bisector(B, C, J)
By internal_angle_bisector_definition_v0_r on B, D, C, J we get Line(D, J) == internal_angle_bisector(B, J, C)
By reverse_direction on center(d), A we get 180 == direction(center(d), A) - direction(A, center(d)) mod 360
By perpendicular_lines_draw_intersection on g, altitude(F, B, C) we get exists(line_intersection(g, altitude(F, B, C)))
By perpendicular_lines_draw_intersection on Line(A, H), altitude(F, A, H) we get exists(line_intersection(Line(A, H), altitude(F, A, H)))
By internal_angle_bisector_definition_v0_r on B, C, J, D we get Line(C, D) == internal_angle_bisector(B, D, J)
By reverse_direction on center(c), G we get 180 == direction(center(c), G) - direction(G, center(c)) mod 360
By collinear_definition on F, G, H we get G in Line(F, H), H in Line(F, G), Line(F, G) == Line(F, H), 0 == 2 * angle(G, F, H) mod 360
By perpendicular_lines_draw_intersection on Line(C, G), altitude(B, C, G) we get exists(line_intersection(Line(C, G), altitude(B, C, G)))
By internal_angle_bisector_definition_v0_r on D, B, D, J we get Line(B, J) == internal_angle_bisector(D, J, D)
By perpendicular_lines_draw_intersection on altitude(E, C, G), Line(C, G) we get exists(line_intersection(Line(C, G), altitude(E, C, G)))
By internal_angle_bisector_definition_v0_r on J, C, J, D we get Line(C, D) == internal_angle_bisector(J, D, J)
By reverse_direction on center(c), H we get 180 == direction(center(c), H) - direction(H, center(c)) mod 360
By collinear_definition on G, H, C we get H in Line(C, G), C in Line(G, H), Line(C, G) == Line(G, H), 0 == 2 * angle(H, G, C) mod 360
By perpendicular_lines_draw_intersection on h, altitude(D, A, C) we get exists(line_intersection(h, altitude(D, A, C)))
By reverse_direction on center(c), A we get 180 == direction(center(c), A) - direction(A, center(c)) mod 360
By collinear_definition on F, C, G we get C in Line(F, G), G in Line(C, F), Line(C, F) == Line(F, G), 0 == 2 * angle(C, F, G) mod 360
By collinear_definition on G, F, H we get F in Line(G, H), H in Line(F, G), Line(F, G) == Line(G, H), 0 == 2 * angle(F, G, H) mod 360
By collinear_definition on C, G, F we get G in Line(C, F), F in Line(C, G), Line(C, F) == Line(C, G), 0 == 2 * angle(G, C, F) mod 360
By perpendicular_lines_draw_intersection on altitude(F, B, H), Line(B, H) we get exists(line_intersection(Line(B, H), altitude(F, B, H)))
By perpendicular_lines_draw_intersection on h, altitude(F, A, C) we get exists(line_intersection(h, altitude(F, A, C)))
By perpendicular_lines_draw_intersection on j, altitude(D, B, G) we get exists(line_intersection(j, altitude(D, B, G)))
By perpendicular_lines_draw_intersection on altitude(D, A, J), Line(A, J) we get exists(line_intersection(Line(A, J), altitude(D, A, J)))
By perpendicular_lines_draw_intersection on i, altitude(E, A, G) we get exists(line_intersection(i, altitude(E, A, G)))
By perpendicular_lines_draw_intersection on altitude(D, C, G), Line(C, G) we get exists(line_intersection(Line(C, G), altitude(D, C, G)))
By perpendicular_lines_draw_intersection on altitude(E, B, C), g we get exists(line_intersection(g, altitude(E, B, C)))
By same_angle_v2 on G, F, C, J we get angle(F, G, J) == angle(C, G, J) + 180 mod 360
By isosceles_triangle_properties on center(c), I, G we get distance(G, center(c)) == distance(I, center(c)), angle(I, G, center(c)) == angle(center(c), I, G) mod 360
By altitude_definition on F, D, B, altitude(F, B, C) we get altitude(F, B, C) == altitude(F, B, D)
By concyclic_definition_1 on B, E, D, A we get Circle(A, D, E) == Circle(B, D, E)
By concyclic_definition_1 on E, D, A, B we get Circle(A, B, D) == Circle(A, D, E)
By isosceles_triangle_properties on center(d), I, J we get distance(I, center(d)) == distance(J, center(d)), angle(I, J, center(d)) == angle(center(d), I, J) mod 360
By concyclic_definition_1 on D, G, C, E we get Circle(C, D, G) == Circle(C, E, G)
By isosceles_triangle_properties on center(c), G, H we get distance(G, center(c)) == distance(H, center(c)), angle(G, H, center(c)) == angle(center(c), G, H) mod 360
By concyclic_definition_1 on C, F, B, E we get Circle(B, C, F) == Circle(B, E, F)
By concyclic_definition_1 on D, A, B, E we get Circle(A, B, D) == Circle(A, B, E)
By concyclic_definition_1 on D, C, E, G we get Circle(C, D, E) == Circle(C, E, G)
By concyclic_definition_1 on C, D, A, F we get Circle(A, C, D) == Circle(A, D, F)
By concyclic_definition_1 on B, F, E, C we get Circle(B, E, F) == Circle(C, E, F)
By altitude_definition on G, F, A, k we get k == altitude(G, A, F)
By isosceles_triangle_properties on center(c), A, G we get distance(A, center(c)) == distance(G, center(c)), angle(A, G, center(c)) == angle(center(c), A, G) mod 360
By concyclic_definition_1 on C, D, F, A we get Circle(A, D, F) == Circle(C, D, F)
By isosceles_triangle_properties on center(c), H, I we get distance(H, center(c)) == distance(I, center(c)), angle(H, I, center(c)) == angle(center(c), H, I) mod 360
By concyclic_definition_1 on F, C, B, E we get Circle(B, C, E) == Circle(B, C, F)
By altitude_definition on D, A, E, altitude(D, A, C) we get altitude(D, A, C) == altitude(D, A, E)
By altitude_definition on E, F, B, altitude(E, A, B) we get altitude(E, A, B) == altitude(E, B, F)
By concyclic_definition_1 on D, A, F, C we get Circle(A, C, F) == Circle(A, D, F)
By concyclic_definition_1 on C, B, E, F we get Circle(B, C, E) == Circle(B, E, F)
By altitude_definition on F, B, J, altitude(F, B, C) we get altitude(F, B, C) == altitude(F, B, J)
By isosceles_triangle_properties on center(d), J, I we get distance(I, center(d)) == distance(J, center(d)), angle(J, I, center(d)) == angle(center(d), J, I) mod 360
By altitude_definition on E, D, J, altitude(E, B, C) we get altitude(E, B, C) == altitude(E, D, J)
By isosceles_triangle_properties on center(d), I, A we get distance(A, center(d)) == distance(I, center(d)), angle(I, A, center(d)) == angle(center(d), I, A) mod 360
By concyclic_definition_1 on E, D, C, G we get Circle(C, D, E) == Circle(C, D, G)
By concyclic_definition_1 on D, A, E, B we get Circle(A, B, E) == Circle(A, D, E)
By concyclic_definition_1 on G, E, D, C we get Circle(C, D, E) == Circle(D, E, G)
By concyclic_definition_1 on F, C, D, A we get Circle(A, C, D) == Circle(C, D, F)
By altitude_definition on F, J, D, altitude(F, B, C) we get altitude(F, B, C) == altitude(F, D, J)
By concyclic_definition_1 on A, F, C, D we get Circle(A, C, F) == Circle(C, D, F)
By altitude_definition on E, G, D, altitude(E, A, G) we get altitude(E, A, G) == altitude(E, D, G)
By concyclic_definition_1 on D, E, B, A we get Circle(A, B, E) == Circle(B, D, E)
By isosceles_triangle_properties on center(c), G, I we get distance(G, center(c)) == distance(I, center(c)), angle(G, I, center(c)) == angle(center(c), G, I) mod 360
By altitude_definition on E, F, A, altitude(E, A, B) we get altitude(E, A, B) == altitude(E, A, F)
By altitude_definition on D, E, B, altitude(D, B, G) we get altitude(D, B, E) == altitude(D, B, G)
By altitude_definition on E, D, C, altitude(E, B, C) we get altitude(E, B, C) == altitude(E, C, D)
By altitude_definition on D, E, G, altitude(D, B, G) we get altitude(D, B, G) == altitude(D, E, G)
By altitude_definition on E, J, C, altitude(E, B, C) we get altitude(E, B, C) == altitude(E, C, J)
By isosceles_triangle_properties on center(d), D, J we get distance(D, center(d)) == distance(J, center(d)), angle(D, J, center(d)) == angle(center(d), D, J) mod 360
By collinear_definition on G, F, C we get F in Line(C, G), C in Line(F, G), Line(C, G) == Line(F, G), 0 == 2 * angle(F, G, C) mod 360
By concyclic_definition_1 on E, G, D, C we get Circle(C, D, G) == Circle(D, E, G)
By concyclic_definition_1 on A, B, D, E we get Circle(A, B, D) == Circle(B, D, E)
By concyclic_definition_1 on D, E, G, C we get Circle(C, E, G) == Circle(D, E, G)
By altitude_definition on A, I, J, Line(A, I) we get Line(A, I) == altitude(A, I, J)
By concyclic_definition_1 on B, F, C, E we get Circle(B, C, F) == Circle(C, E, F)
By altitude_definition on F, C, D, altitude(F, B, C) we get altitude(F, B, C) == altitude(F, C, D)
By altitude_definition on D, B, F, altitude(D, A, B) we get altitude(D, A, B) == altitude(D, B, F)
By altitude_definition on G, F, B, k we get k == altitude(G, B, F)
By isosceles_triangle_properties on center(d), J, A we get distance(A, center(d)) == distance(J, center(d)), angle(J, A, center(d)) == angle(center(d), J, A) mod 360
By isosceles_triangle_properties on center(d), A, I we get distance(A, center(d)) == distance(I, center(d)), angle(A, I, center(d)) == angle(center(d), A, I) mod 360
By altitude_definition on J, I, A, Line(I, J) we get Line(I, J) == altitude(J, A, I)
By collinear_definition on G, C, F we get C in Line(F, G), F in Line(C, G), Line(C, G) == Line(F, G), 0 == 2 * angle(C, G, F) mod 360
By altitude_definition on E, D, A, altitude(E, A, G) we get altitude(E, A, D) == altitude(E, A, G)
By altitude_definition on E, D, B, altitude(E, B, C) we get altitude(E, B, C) == altitude(E, B, D)
By isosceles_triangle_properties on center(c), H, A we get distance(A, center(c)) == distance(H, center(c)), angle(H, A, center(c)) == angle(center(c), H, A) mod 360
By isosceles_triangle_properties on center(c), A, I we get distance(A, center(c)) == distance(I, center(c)), angle(A, I, center(c)) == angle(center(c), A, I) mod 360
By concyclic_definition_1 on D, C, A, F we get Circle(A, C, D) == Circle(A, C, F)
By isosceles_triangle_properties on center(c), I, A we get distance(A, center(c)) == distance(I, center(c)), angle(I, A, center(c)) == angle(center(c), I, A) mod 360
By altitude_definition on D, E, C, altitude(D, A, C) we get altitude(D, A, C) == altitude(D, C, E)
By altitude_definition on E, B, J, altitude(E, B, C) we get altitude(E, B, C) == altitude(E, B, J)
By altitude_definition on F, E, A, altitude(F, A, C) we get altitude(F, A, C) == altitude(F, A, E)
By isosceles_triangle_properties on center(d), D, A we get distance(A, center(d)) == distance(D, center(d)), angle(D, A, center(d)) == angle(center(d), D, A) mod 360
By isosceles_triangle_properties on center(c), A, H we get distance(A, center(c)) == distance(H, center(c)), angle(A, H, center(c)) == angle(center(c), A, H) mod 360
By isosceles_triangle_properties on center(c), G, A we get distance(A, center(c)) == distance(G, center(c)), angle(G, A, center(c)) == angle(center(c), G, A) mod 360
By concyclic_definition_1 on F, C, E, B we get Circle(B, C, E) == Circle(C, E, F)
By isosceles_triangle_properties on center(d), J, D we get distance(D, center(d)) == distance(J, center(d)), angle(J, D, center(d)) == angle(center(d), J, D) mod 360
By isosceles_triangle_properties on center(d), A, J we get distance(A, center(d)) == distance(J, center(d)), angle(A, J, center(d)) == angle(center(d), A, J) mod 360
By isosceles_triangle_properties on center(d), A, D we get distance(A, center(d)) == distance(D, center(d)), angle(A, D, center(d)) == angle(center(d), A, D) mod 360
By isosceles_triangle_properties on center(c), H, G we get distance(G, center(c)) == distance(H, center(c)), angle(H, G, center(c)) == angle(center(c), H, G) mod 360
By altitude_definition on F, E, C, altitude(F, A, C) we get altitude(F, A, C) == altitude(F, C, E)
By isosceles_triangle_properties on center(c), I, H we get distance(H, center(c)) == distance(I, center(c)), angle(I, H, center(c)) == angle(center(c), I, H) mod 360
By isosceles_triangle_properties on center(d), I, D we get distance(D, center(d)) == distance(I, center(d)), angle(I, D, center(d)) == angle(center(d), I, D) mod 360
By isosceles_triangle_properties on center(d), D, I we get distance(D, center(d)) == distance(I, center(d)), angle(D, I, center(d)) == angle(center(d), D, I) mod 360
By altitude_definition on F, C, J, altitude(F, B, C) we get altitude(F, B, C) == altitude(F, C, J)
By altitude_definition on D, F, A, altitude(D, A, B) we get altitude(D, A, B) == altitude(D, A, F)
By anti_similar_triangle_basic_properties on G, D, B, G, E, A we get not_collinear(B, D, G), not_collinear(A, E, G), angle(G, D, B) == 0 - angle(G, E, A) mod 360, angle(D, B, G) == 0 - angle(E, A, G) mod 360, angle(B, G, D) == 0 - angle(A, G, E) mod 360, log(distance(D, G)) + log(distance(A, E)) == log(distance(E, G)) + log(distance(B, D)), log(distance(A, E)) + log(distance(B, G)) == log(distance(B, D)) + log(distance(A, G)), log(distance(A, G)) + log(distance(D, G)) == log(distance(B, G)) + log(distance(E, G))
By anti_similar_triangle_basic_properties on E, G, A, D, C, A we get not_collinear(A, E, G), not_collinear(A, C, D), angle(E, G, A) == 0 - angle(D, C, A) mod 360, angle(G, A, E) == 0 - angle(C, A, D) mod 360, angle(A, E, G) == 0 - angle(A, D, C) mod 360, log(distance(C, D)) + log(distance(A, G)) == log(distance(E, G)) + log(distance(A, C)), log(distance(A, C)) + log(distance(A, E)) == log(distance(A, G)) + log(distance(A, D)), log(distance(A, D)) + log(distance(E, G)) == log(distance(A, E)) + log(distance(C, D))
By anti_similar_triangle_basic_properties on A, C, D, A, G, E we get not_collinear(A, C, D), not_collinear(A, E, G), angle(A, C, D) == 0 - angle(A, G, E) mod 360, angle(C, D, A) == 0 - angle(G, E, A) mod 360, angle(D, A, C) == 0 - angle(E, A, G) mod 360, log(distance(A, C)) + log(distance(E, G)) == log(distance(A, G)) + log(distance(C, D)), log(distance(C, D)) + log(distance(A, E)) == log(distance(E, G)) + log(distance(A, D)), log(distance(A, D)) + log(distance(A, G)) == log(distance(A, E)) + log(distance(A, C))
By similar_triangle_basic_properties on G, B, D, C, A, D we get not_collinear(B, D, G), not_collinear(A, C, D), angle(C, A, D) == angle(G, B, D) mod 360, angle(A, D, C) == angle(B, D, G) mod 360, angle(D, C, A) == angle(D, G, B) mod 360, log(distance(A, C)) + log(distance(B, D)) == log(distance(B, G)) + log(distance(A, D)), log(distance(A, D)) + log(distance(D, G)) == log(distance(B, D)) + log(distance(C, D)), log(distance(C, D)) + log(distance(B, G)) == log(distance(D, G)) + log(distance(A, C))
By power_of_a_point_definition on C, D, J, d we get log(power_of_a_point(C, d)) == log(distance(C, D)) + log(distance(C, J))
By similar_triangle_basic_properties on D, B, G, D, A, C we get not_collinear(B, D, G), not_collinear(A, C, D), angle(D, A, C) == angle(D, B, G) mod 360, angle(A, C, D) == angle(B, G, D) mod 360, angle(C, D, A) == angle(G, D, B) mod 360, log(distance(A, D)) + log(distance(B, G)) == log(distance(B, D)) + log(distance(A, C)), log(distance(A, C)) + log(distance(D, G)) == log(distance(B, G)) + log(distance(C, D)), log(distance(C, D)) + log(distance(B, D)) == log(distance(D, G)) + log(distance(A, D))
By anti_similar_triangle_basic_properties on E, G, A, D, G, B we get not_collinear(A, E, G), not_collinear(B, D, G), angle(E, G, A) == 0 - angle(D, G, B) mod 360, angle(G, A, E) == 0 - angle(G, B, D) mod 360, angle(A, E, G) == 0 - angle(B, D, G) mod 360, log(distance(D, G)) + log(distance(A, G)) == log(distance(E, G)) + log(distance(B, G)), log(distance(A, G)) + log(distance(B, D)) == log(distance(B, G)) + log(distance(A, E)), log(distance(A, E)) + log(distance(D, G)) == log(distance(B, D)) + log(distance(E, G))
By power_of_a_point_definition on B, J, D, d we get log(power_of_a_point(B, d)) == log(distance(B, J)) + log(distance(B, D))
By anti_similar_triangle_basic_properties on E, C, B, D, G, B we get not_collinear(B, C, E), not_collinear(B, D, G), angle(E, C, B) == 0 - angle(D, G, B) mod 360, angle(C, B, E) == 0 - angle(G, B, D) mod 360, angle(B, E, C) == 0 - angle(B, D, G) mod 360, log(distance(C, E)) + log(distance(B, G)) == log(distance(D, G)) + log(distance(B, C)), log(distance(B, C)) + log(distance(B, D)) == log(distance(B, G)) + log(distance(B, E)), log(distance(B, D)) + log(distance(C, E)) == log(distance(B, E)) + log(distance(D, G))
By anti_similar_triangle_basic_properties on B, C, E, B, G, D we get not_collinear(B, C, E), not_collinear(B, D, G), angle(B, C, E) == 0 - angle(B, G, D) mod 360, angle(C, E, B) == 0 - angle(G, D, B) mod 360, angle(E, B, C) == 0 - angle(D, B, G) mod 360, log(distance(B, C)) + log(distance(D, G)) == log(distance(B, G)) + log(distance(C, E)), log(distance(C, E)) + log(distance(B, D)) == log(distance(D, G)) + log(distance(B, E)), log(distance(B, D)) + log(distance(B, C)) == log(distance(B, E)) + log(distance(B, G))
By anti_similar_triangle_basic_properties on B, D, A, B, F, C we get not_collinear(A, B, D), not_collinear(B, C, F), angle(B, D, A) == 0 - angle(B, F, C) mod 360, angle(D, A, B) == 0 - angle(F, C, B) mod 360, angle(A, B, D) == 0 - angle(C, B, F) mod 360, log(distance(B, D)) + log(distance(C, F)) == log(distance(B, F)) + log(distance(A, D)), log(distance(A, D)) + log(distance(B, C)) == log(distance(C, F)) + log(distance(A, B)), log(distance(A, B)) + log(distance(B, F)) == log(distance(B, C)) + log(distance(B, D))
By anti_similar_triangle_basic_properties on C, D, A, C, E, B we get not_collinear(A, C, D), not_collinear(B, C, E), angle(C, D, A) == 0 - angle(C, E, B) mod 360, angle(D, A, C) == 0 - angle(E, B, C) mod 360, angle(A, C, D) == 0 - angle(B, C, E) mod 360, log(distance(C, D)) + log(distance(B, E)) == log(distance(C, E)) + log(distance(A, D)), log(distance(A, D)) + log(distance(B, C)) == log(distance(B, E)) + log(distance(A, C)), log(distance(A, C)) + log(distance(C, E)) == log(distance(B, C)) + log(distance(C, D))
By anti_similar_triangle_basic_properties on B, C, F, B, A, D we get not_collinear(B, C, F), not_collinear(A, B, D), angle(B, C, F) == 0 - angle(B, A, D) mod 360, angle(C, F, B) == 0 - angle(A, D, B) mod 360, angle(F, B, C) == 0 - angle(D, B, A) mod 360, log(distance(A, B)) + log(distance(C, F)) == log(distance(B, C)) + log(distance(A, D)), log(distance(A, D)) + log(distance(B, F)) == log(distance(C, F)) + log(distance(B, D)), log(distance(B, D)) + log(distance(B, C)) == log(distance(B, F)) + log(distance(A, B))
By anti_similar_triangle_basic_properties on C, B, E, C, A, D we get not_collinear(B, C, E), not_collinear(A, C, D), angle(C, B, E) == 0 - angle(C, A, D) mod 360, angle(B, E, C) == 0 - angle(A, D, C) mod 360, angle(E, C, B) == 0 - angle(D, C, A) mod 360, log(distance(A, C)) + log(distance(B, E)) == log(distance(B, C)) + log(distance(A, D)), log(distance(A, D)) + log(distance(C, E)) == log(distance(B, E)) + log(distance(C, D)), log(distance(C, D)) + log(distance(B, C)) == log(distance(C, E)) + log(distance(A, C))
By similar_triangle_basic_properties on E, B, C, E, A, G we get not_collinear(B, C, E), not_collinear(A, E, G), angle(E, A, G) == angle(E, B, C) mod 360, angle(A, G, E) == angle(B, C, E) mod 360, angle(C, E, B) == angle(G, E, A) mod 360, log(distance(A, E)) + log(distance(B, C)) == log(distance(B, E)) + log(distance(A, G)), log(distance(A, G)) + log(distance(C, E)) == log(distance(B, C)) + log(distance(E, G)), log(distance(C, E)) + log(distance(A, E)) == log(distance(E, G)) + log(distance(B, E))
By similar_triangle_basic_properties on G, A, E, C, B, E we get not_collinear(A, E, G), not_collinear(B, C, E), angle(C, B, E) == angle(G, A, E) mod 360, angle(A, E, G) == angle(B, E, C) mod 360, angle(E, C, B) == angle(E, G, A) mod 360, log(distance(A, G)) + log(distance(B, E)) == log(distance(B, C)) + log(distance(A, E)), log(distance(A, E)) + log(distance(C, E)) == log(distance(B, E)) + log(distance(E, G)), log(distance(C, E)) + log(distance(A, G)) == log(distance(E, G)) + log(distance(B, C))
By anti_similar_triangle_basic_properties on B, A, E, C, A, F we get not_collinear(A, B, E), not_collinear(A, C, F), angle(B, A, E) == 0 - angle(C, A, F) mod 360, angle(A, E, B) == 0 - angle(A, F, C) mod 360, angle(E, B, A) == 0 - angle(F, C, A) mod 360, log(distance(A, B)) + log(distance(A, F)) == log(distance(A, C)) + log(distance(A, E)), log(distance(A, E)) + log(distance(C, F)) == log(distance(A, F)) + log(distance(B, E)), log(distance(B, E)) + log(distance(A, C)) == log(distance(C, F)) + log(distance(A, B))
By anti_similar_triangle_basic_properties on F, A, C, E, A, B we get not_collinear(A, C, F), not_collinear(A, B, E), angle(F, A, C) == 0 - angle(E, A, B) mod 360, angle(A, C, F) == 0 - angle(A, B, E) mod 360, angle(C, F, A) == 0 - angle(B, E, A) mod 360, log(distance(A, E)) + log(distance(A, C)) == log(distance(A, F)) + log(distance(A, B)), log(distance(A, B)) + log(distance(C, F)) == log(distance(A, C)) + log(distance(B, E)), log(distance(B, E)) + log(distance(A, F)) == log(distance(C, F)) + log(distance(A, E))
By concyclic_sufficient_conditions_v1 on E, G, F, A we get concyclic(A, E, F, G)
By concyclic_sufficient_conditions_v1 on D, B, F, G we get concyclic(B, D, F, G)
By concyclic_sufficient_conditions_v1 on C, H, I, J we get concyclic(C, H, I, J)
By perpendicular_line_definition on line_intersection(h, altitude(D, A, C)), altitude(D, A, C), h we get altitude(D, A, C) == perpendicular_line(line_intersection(h, altitude(D, A, C)), h)
By perpendicular_line_definition on line_intersection(f, altitude(D, A, B)), altitude(D, A, B), f we get altitude(D, A, B) == perpendicular_line(line_intersection(f, altitude(D, A, B)), f)
By line_intersection_definition on J, Line(I, J), Line(G, J) we get J == line_intersection(Line(G, J), Line(I, J))
By perpendicular_line_definition on line_intersection(i, altitude(E, A, D)), i, altitude(E, A, D) we get i == perpendicular_line(line_intersection(i, altitude(E, A, D)), altitude(E, A, D))
By perpendicular_line_definition on line_intersection(j, altitude(D, B, E)), j, h we get j == perpendicular_line(line_intersection(j, altitude(D, B, E)), h)
By perpendicular_line_definition on line_intersection(j, altitude(D, B, E)), j, altitude(D, B, E) we get j == perpendicular_line(line_intersection(j, altitude(D, B, E)), altitude(D, B, E))
By perpendicular_line_definition on line_intersection(Line(A, J), altitude(D, A, J)), Line(A, J), altitude(D, A, J) we get Line(A, J) == perpendicular_line(line_intersection(Line(A, J), altitude(D, A, J)), altitude(D, A, J))
By perpendicular_line_definition on line_intersection(f, altitude(E, A, B)), f, altitude(D, A, B) we get f == perpendicular_line(line_intersection(f, altitude(E, A, B)), altitude(D, A, B))
By perpendicular_line_definition on H, k, altitude(D, C, G) we get k == perpendicular_line(H, altitude(D, C, G))
By perpendicular_line_definition on line_intersection(k, altitude(D, C, G)), k, altitude(D, C, G) we get k == perpendicular_line(line_intersection(k, altitude(D, C, G)), altitude(D, C, G))
By perpendicular_line_definition on line_intersection(f, altitude(D, A, B)), f, altitude(D, A, B) we get f == perpendicular_line(line_intersection(f, altitude(D, A, B)), altitude(D, A, B))
By perpendicular_line_definition on line_intersection(f, altitude(D, A, B)), f, k we get f == perpendicular_line(line_intersection(f, altitude(D, A, B)), k)
By perpendicular_line_definition on line_intersection(k, altitude(E, C, G)), altitude(E, C, G), k we get altitude(E, C, G) == perpendicular_line(line_intersection(k, altitude(E, C, G)), k)
By perpendicular_line_definition on line_intersection(h, altitude(F, A, C)), h, altitude(F, A, C) we get h == perpendicular_line(line_intersection(h, altitude(F, A, C)), altitude(F, A, C))
By perpendicular_line_definition on line_intersection(g, altitude(F, B, C)), g, i we get g == perpendicular_line(line_intersection(g, altitude(F, B, C)), i)
By perpendicular_line_definition on line_intersection(f, altitude(E, A, B)), f, altitude(E, A, B) we get f == perpendicular_line(line_intersection(f, altitude(E, A, B)), altitude(E, A, B))
By perpendicular_line_definition on line_intersection(h, altitude(D, A, C)), h, altitude(D, A, C) we get h == perpendicular_line(line_intersection(h, altitude(D, A, C)), altitude(D, A, C))
By perpendicular_line_definition on line_intersection(g, altitude(E, B, C)), altitude(E, B, C), g we get altitude(E, B, C) == perpendicular_line(line_intersection(g, altitude(E, B, C)), g)
By perpendicular_line_definition on line_intersection(h, altitude(F, A, C)), h, j we get h == perpendicular_line(line_intersection(h, altitude(F, A, C)), j)
By line_intersection_definition on J, Line(G, J), Line(A, J) we get J == line_intersection(Line(A, J), Line(G, J))
By perpendicular_line_definition on H, k, altitude(E, C, G) we get k == perpendicular_line(H, altitude(E, C, G))
By perpendicular_line_definition on line_intersection(g, altitude(E, B, C)), g, i we get g == perpendicular_line(line_intersection(g, altitude(E, B, C)), i)
By perpendicular_line_definition on line_intersection(i, altitude(E, A, D)), altitude(E, A, D), i we get altitude(E, A, D) == perpendicular_line(line_intersection(i, altitude(E, A, D)), i)
By perpendicular_line_definition on F, k, altitude(E, C, G) we get k == perpendicular_line(F, altitude(E, C, G))
By line_intersection_definition on B, Line(B, H), g we get B == line_intersection(g, Line(B, H))
By perpendicular_line_definition on line_intersection(k, altitude(E, C, G)), k, altitude(D, C, G) we get k == perpendicular_line(line_intersection(k, altitude(E, C, G)), altitude(D, C, G))
By perpendicular_line_definition on line_intersection(Line(G, J), altitude(D, G, J)), altitude(D, G, J), Line(G, J) we get altitude(D, G, J) == perpendicular_line(line_intersection(Line(G, J), altitude(D, G, J)), Line(G, J))
By perpendicular_line_definition on line_intersection(f, altitude(D, A, B)), f, altitude(E, A, B) we get f == perpendicular_line(line_intersection(f, altitude(D, A, B)), altitude(E, A, B))
By perpendicular_line_definition on line_intersection(Line(G, J), altitude(D, G, J)), Line(G, J), altitude(D, G, J) we get Line(G, J) == perpendicular_line(line_intersection(Line(G, J), altitude(D, G, J)), altitude(D, G, J))
By perpendicular_line_definition on line_intersection(h, altitude(F, A, C)), h, altitude(D, A, C) we get h == perpendicular_line(line_intersection(h, altitude(F, A, C)), altitude(D, A, C))
By line_intersection_definition on J, g, Line(G, J) we get J == line_intersection(g, Line(G, J))
By line_intersection_definition on G, i, Line(G, J) we get G == line_intersection(i, Line(G, J))
By perpendicular_line_definition on line_intersection(g, altitude(F, B, C)), g, altitude(F, B, C) we get g == perpendicular_line(line_intersection(g, altitude(F, B, C)), altitude(F, B, C))
By perpendicular_line_definition on line_intersection(i, altitude(E, A, D)), i, g we get i == perpendicular_line(line_intersection(i, altitude(E, A, D)), g)
By perpendicular_line_definition on line_intersection(f, altitude(E, A, B)), altitude(E, A, B), f we get altitude(E, A, B) == perpendicular_line(line_intersection(f, altitude(E, A, B)), f)
By line_intersection_definition on G, Line(G, I), Line(G, J) we get G == line_intersection(Line(G, I), Line(G, J))
By line_intersection_definition on H, k, Line(B, H) we get H == line_intersection(k, Line(B, H))
By line_intersection_definition on H, Line(H, I), Line(B, H) we get H == line_intersection(Line(B, H), Line(H, I))
By perpendicular_line_definition on line_intersection(Line(A, J), altitude(D, A, J)), altitude(D, A, J), Line(A, J) we get altitude(D, A, J) == perpendicular_line(line_intersection(Line(A, J), altitude(D, A, J)), Line(A, J))
By perpendicular_line_definition on line_intersection(g, altitude(F, B, C)), g, altitude(E, B, C) we get g == perpendicular_line(line_intersection(g, altitude(F, B, C)), altitude(E, B, C))
By perpendicular_line_definition on line_intersection(Line(B, H), altitude(F, B, H)), altitude(F, B, H), Line(B, H) we get altitude(F, B, H) == perpendicular_line(line_intersection(Line(B, H), altitude(F, B, H)), Line(B, H))
By line_intersection_definition on G, j, Line(G, J) we get G == line_intersection(j, Line(G, J))
By perpendicular_line_definition on line_intersection(g, altitude(E, B, C)), g, altitude(E, B, C) we get g == perpendicular_line(line_intersection(g, altitude(E, B, C)), altitude(E, B, C))
By perpendicular_line_definition on line_intersection(h, altitude(D, A, C)), h, altitude(F, A, C) we get h == perpendicular_line(line_intersection(h, altitude(D, A, C)), altitude(F, A, C))
By perpendicular_line_definition on line_intersection(f, altitude(E, A, B)), f, k we get f == perpendicular_line(line_intersection(f, altitude(E, A, B)), k)
By line_intersection_definition on H, Line(A, H), Line(B, H) we get H == line_intersection(Line(A, H), Line(B, H))
By perpendicular_line_definition on line_intersection(Line(A, H), altitude(F, A, H)), altitude(F, A, H), Line(A, H) we get altitude(F, A, H) == perpendicular_line(line_intersection(Line(A, H), altitude(F, A, H)), Line(A, H))
By perpendicular_line_definition on line_intersection(k, altitude(D, C, G)), k, f we get k == perpendicular_line(line_intersection(k, altitude(D, C, G)), f)
By perpendicular_line_definition on line_intersection(k, altitude(D, C, G)), k, altitude(E, C, G) we get k == perpendicular_line(line_intersection(k, altitude(D, C, G)), altitude(E, C, G))
By perpendicular_line_definition on line_intersection(g, altitude(E, B, C)), g, altitude(F, B, C) we get g == perpendicular_line(line_intersection(g, altitude(E, B, C)), altitude(F, B, C))
By line_intersection_definition on G, k, Line(G, J) we get G == line_intersection(k, Line(G, J))
By line_intersection_definition on B, Line(B, H), f we get B == line_intersection(f, Line(B, H))
By perpendicular_line_definition on line_intersection(k, altitude(E, C, G)), k, altitude(E, C, G) we get k == perpendicular_line(line_intersection(k, altitude(E, C, G)), altitude(E, C, G))
By perpendicular_line_definition on line_intersection(Line(B, H), altitude(F, B, H)), Line(B, H), altitude(F, B, H) we get Line(B, H) == perpendicular_line(line_intersection(Line(B, H), altitude(F, B, H)), altitude(F, B, H))
By perpendicular_line_definition on line_intersection(j, altitude(D, B, E)), altitude(D, B, E), j we get altitude(D, B, E) == perpendicular_line(line_intersection(j, altitude(D, B, E)), j)
By perpendicular_line_definition on line_intersection(g, altitude(F, B, C)), altitude(F, B, C), g we get altitude(F, B, C) == perpendicular_line(line_intersection(g, altitude(F, B, C)), g)
By perpendicular_line_definition on line_intersection(h, altitude(F, A, C)), altitude(F, A, C), h we get altitude(F, A, C) == perpendicular_line(line_intersection(h, altitude(F, A, C)), h)
By perpendicular_line_definition on line_intersection(Line(A, H), altitude(F, A, H)), Line(A, H), altitude(F, A, H) we get Line(A, H) == perpendicular_line(line_intersection(Line(A, H), altitude(F, A, H)), altitude(F, A, H))
By perpendicular_line_definition on line_intersection(k, altitude(E, C, G)), k, f we get k == perpendicular_line(line_intersection(k, altitude(E, C, G)), f)
By perpendicular_line_definition on F, k, altitude(D, C, G) we get k == perpendicular_line(F, altitude(D, C, G))
By perpendicular_line_definition on line_intersection(h, altitude(D, A, C)), h, j we get h == perpendicular_line(line_intersection(h, altitude(D, A, C)), j)
By line_intersection_definition on B, j, Line(B, H) we get B == line_intersection(j, Line(B, H))
By perpendicular_line_definition on line_intersection(k, altitude(D, C, G)), altitude(D, C, G), k we get altitude(D, C, G) == perpendicular_line(line_intersection(k, altitude(D, C, G)), k)
By angles_on_chord_v0 on C, E, F, B, Circle(B, C, E) we get angle(C, B, E) == angle(C, F, E) mod 360
By angles_on_chord_v1 on B, F, E, C, Circle(B, C, E) we get angle(B, C, F) == angle(B, E, F) mod 360
By angles_on_chord_v1 on E, C, F, B, Circle(B, C, E) we get angle(E, B, C) == angle(E, F, C) mod 360
By angles_on_chord_v2 on A, D, C, F, Circle(A, C, D) we get angle(A, C, D) == angle(A, F, D) + 180 mod 360
By angles_on_chord_v2 on A, D, E, B, Circle(A, B, D) we get angle(A, E, D) == angle(A, B, D) + 180 mod 360
By angles_on_chord_v1 on A, E, B, D, Circle(A, B, D) we get angle(A, B, E) == angle(A, D, E) mod 360
By angles_on_chord_v2 on C, F, B, E, Circle(B, C, E) we get angle(C, B, F) == angle(C, E, F) + 180 mod 360
By angles_on_chord_v3 on F, C, D, A, Circle(A, C, D) we get angle(F, D, C) == angle(F, A, C) + 180 mod 360
By angles_on_chord_v1 on F, A, C, D, Circle(A, C, D) we get angle(F, C, A) == angle(F, D, A) mod 360
By angles_on_chord_v1 on C, D, A, F, Circle(A, C, D) we get angle(C, A, D) == angle(C, F, D) mod 360
By angles_on_chord_v1 on C, D, E, G, Circle(C, D, E) we get angle(C, E, D) == angle(C, G, D) mod 360
By angles_on_chord_v1 on D, G, C, E, Circle(C, D, E) we get angle(D, C, G) == angle(D, E, G) mod 360
By angles_on_chord_v0 on E, G, D, C, Circle(C, D, E) we get angle(E, C, G) == angle(E, D, G) mod 360
By angles_on_chord_v0 on B, D, E, A, Circle(A, B, D) we get angle(B, A, D) == angle(B, E, D) mod 360
By angles_on_chord_v0 on G, D, C, E, Circle(C, D, E) we get angle(G, C, D) == angle(G, E, D) mod 360
By angles_on_chord_v3 on D, A, E, B, Circle(A, B, D) we get angle(D, E, A) == angle(D, B, A) + 180 mod 360
By angles_on_chord_v0 on A, F, C, D, Circle(A, C, D) we get angle(A, C, F) == angle(A, D, F) mod 360
By angles_on_chord_v3 on E, B, A, D, Circle(A, B, D) we get angle(E, A, B) == angle(E, D, B) + 180 mod 360
By angles_on_chord_v3 on B, E, C, F, Circle(B, C, E) we get angle(B, C, E) == angle(B, F, E) + 180 mod 360
By angles_on_chord_v2 on F, C, A, D, Circle(A, C, D) we get angle(F, A, C) == angle(F, D, C) + 180 mod 360
By angles_on_chord_v2 on B, E, A, D, Circle(A, B, D) we get angle(B, A, E) == angle(B, D, E) + 180 mod 360
By angles_on_chord_v0 on C, E, G, D, Circle(C, D, E) we get angle(C, D, E) == angle(C, G, E) mod 360
By angles_on_chord_v0 on F, B, C, E, Circle(B, C, E) we get angle(F, C, B) == angle(F, E, B) mod 360
By angles_on_chord_v0 on D, C, A, F, Circle(A, C, D) we get angle(D, A, C) == angle(D, F, C) mod 360
By angles_on_chord_v3 on C, F, A, D, Circle(A, C, D) we get angle(C, A, F) == angle(C, D, F) + 180 mod 360
By angles_on_chord_v3 on A, D, B, E, Circle(A, B, D) we get angle(A, B, D) == angle(A, E, D) + 180 mod 360
By angles_on_chord_v0 on E, A, D, B, Circle(A, B, D) we get angle(E, B, A) == angle(E, D, A) mod 360
By angles_on_chord_v2 on F, C, E, B, Circle(B, C, E) we get angle(F, E, C) == angle(F, B, C) + 180 mod 360
By angles_on_chord_v2 on C, F, D, A, Circle(A, C, D) we get angle(C, D, F) == angle(C, A, F) + 180 mod 360
By angles_on_chord_v1 on G, E, C, D, Circle(C, D, E) we get angle(G, C, E) == angle(G, D, E) mod 360
By angles_on_chord_v2 on E, B, D, A, Circle(A, B, D) we get angle(E, D, B) == angle(E, A, B) + 180 mod 360
By angles_on_chord_v3 on C, F, E, B, Circle(B, C, E) we get angle(C, E, F) == angle(C, B, F) + 180 mod 360
By angles_on_chord_v2 on D, A, F, C, Circle(A, C, D) we get angle(D, F, A) == angle(D, C, A) + 180 mod 360
By angles_on_chord_v3 on B, E, D, A, Circle(A, B, D) we get angle(B, D, E) == angle(B, A, E) + 180 mod 360
By angles_on_chord_v2 on D, A, B, E, Circle(A, B, D) we get angle(D, B, A) == angle(D, E, A) + 180 mod 360
By angles_on_chord_v3 on D, A, C, F, Circle(A, C, D) we get angle(D, C, A) == angle(D, F, A) + 180 mod 360
By angles_on_chord_v1 on E, C, G, D, Circle(C, D, E) we get angle(E, D, C) == angle(E, G, C) mod 360
By angles_on_chord_v0 on D, C, G, E, Circle(C, D, E) we get angle(D, E, C) == angle(D, G, C) mod 360
By angles_on_chord_v3 on E, B, F, C, Circle(B, C, E) we get angle(E, F, B) == angle(E, C, B) + 180 mod 360
By angles_on_chord_v3 on A, D, F, C, Circle(A, C, D) we get angle(A, F, D) == angle(A, C, D) + 180 mod 360
By angles_on_chord_v1 on D, B, E, A, Circle(A, B, D) we get angle(D, A, B) == angle(D, E, B) mod 360
By angles_on_chord_v2 on B, E, F, C, Circle(B, C, E) we get angle(B, F, E) == angle(B, C, E) + 180 mod 360
By angles_on_chord_v2 on E, B, C, F, Circle(B, C, E) we get angle(E, C, B) == angle(E, F, B) + 180 mod 360
By angles_on_chord_v3 on F, C, B, E, Circle(B, C, E) we get angle(F, B, C) == angle(F, E, C) + 180 mod 360
By between_implies_orientation on H, F, G, C we get orientation(C, H, G) == orientation(F, G, H) mod 360, orientation(C, H, F) == orientation(F, G, H) mod 360
By between_imply_not_between on H, G, C we get collinear_and_not_between(C, H, G)
By projection_definition on G, F, f we get F == projection(G, f)
By between_imply_not_between on F, G, C we get collinear_and_not_between(C, F, G)
By between_implies_orientation on C, G, F, H we get orientation(C, F, H) == orientation(C, G, F) mod 360, orientation(C, G, F) == orientation(C, G, H) mod 360
By between_implies_orientation on H, C, G, F we get orientation(C, G, H) == orientation(F, H, G) mod 360, orientation(C, F, H) == orientation(C, G, H) mod 360
By between_implies_orientation on F, H, G, C we get orientation(C, F, G) == orientation(F, H, G) mod 360, orientation(C, F, H) == orientation(F, H, G) mod 360
By parallel_line_definition on line_intersection(i, altitude(E, A, D)), i, altitude(E, B, C) we get i == parallel_line(line_intersection(i, altitude(E, A, D)), altitude(E, B, C))
By between_implies_orientation on F, C, G, H we get orientation(C, G, F) == orientation(F, G, H) mod 360, orientation(C, G, F) == orientation(C, H, F) mod 360
By between_implies_orientation on C, H, F, G we get orientation(C, F, G) == orientation(C, H, F) mod 360, orientation(C, H, F) == orientation(C, H, G) mod 360
By parallel_line_definition on line_intersection(f, altitude(D, A, B)), f, altitude(E, C, G) we get f == parallel_line(line_intersection(f, altitude(D, A, B)), altitude(E, C, G))
By between_imply_not_between on C, G, H we get collinear_and_not_between(G, C, H)
By between_imply_not_between on C, G, F we get collinear_and_not_between(F, C, G)
By between_imply_not_between on H, F, G we get collinear_and_not_between(F, H, G)
By between_imply_not_between on G, F, H we get collinear_and_not_between(F, G, H)
By parallel_line_definition on line_intersection(f, altitude(E, A, B)), altitude(E, A, B), k we get altitude(E, A, B) == parallel_line(line_intersection(f, altitude(E, A, B)), k)
By parallel_line_definition on E, altitude(E, A, D), g we get altitude(E, A, D) == parallel_line(E, g)
By parallel_line_definition on F, k, altitude(E, A, B) we get k == parallel_line(F, altitude(E, A, B))
By parallel_line_definition on line_intersection(k, altitude(E, C, G)), altitude(E, C, G), altitude(D, C, G) we get altitude(E, C, G) == parallel_line(line_intersection(k, altitude(E, C, G)), altitude(D, C, G))
By parallel_line_definition on line_intersection(g, altitude(E, B, C)), altitude(E, B, C), i we get altitude(E, B, C) == parallel_line(line_intersection(g, altitude(E, B, C)), i)
By parallel_line_definition on line_intersection(f, altitude(E, A, B)), f, altitude(D, C, G) we get f == parallel_line(line_intersection(f, altitude(E, A, B)), altitude(D, C, G))
By parallel_line_definition on B, j, altitude(F, A, C) we get j == parallel_line(B, altitude(F, A, C))
By parallel_line_definition on C, g, altitude(E, A, D) we get g == parallel_line(C, altitude(E, A, D))
By parallel_line_definition on D, altitude(D, C, G), f we get altitude(D, C, G) == parallel_line(D, f)
By parallel_line_definition on D, altitude(D, A, C), j we get altitude(D, A, C) == parallel_line(D, j)
By parallel_line_definition on line_intersection(g, altitude(F, B, C)), altitude(F, B, C), altitude(E, B, C) we get altitude(F, B, C) == parallel_line(line_intersection(g, altitude(F, B, C)), altitude(E, B, C))
By parallel_line_definition on E, j, altitude(D, A, C) we get j == parallel_line(E, altitude(D, A, C))
By parallel_line_definition on E, h, altitude(D, B, E) we get h == parallel_line(E, altitude(D, B, E))
By parallel_line_definition on E, altitude(E, B, C), i we get altitude(E, B, C) == parallel_line(E, i)
By parallel_line_definition on G, i, altitude(F, B, C) we get i == parallel_line(G, altitude(F, B, C))
By parallel_line_definition on D, i, altitude(F, B, C) we get i == parallel_line(D, altitude(F, B, C))
By parallel_line_definition on line_intersection(k, altitude(E, C, G)), k, altitude(E, A, B) we get k == parallel_line(line_intersection(k, altitude(E, C, G)), altitude(E, A, B))
By parallel_line_definition on C, k, altitude(E, A, B) we get k == parallel_line(C, altitude(E, A, B))
By parallel_line_definition on A, i, altitude(E, B, C) we get i == parallel_line(A, altitude(E, B, C))
By parallel_line_definition on G, j, altitude(F, A, C) we get j == parallel_line(G, altitude(F, A, C))
By parallel_line_definition on D, altitude(D, A, C), altitude(F, A, C) we get altitude(D, A, C) == parallel_line(D, altitude(F, A, C))
By parallel_line_definition on line_intersection(k, altitude(E, C, G)), altitude(E, C, G), f we get altitude(E, C, G) == parallel_line(line_intersection(k, altitude(E, C, G)), f)
By parallel_line_definition on line_intersection(f, altitude(E, A, B)), altitude(E, A, B), altitude(D, A, B) we get altitude(E, A, B) == parallel_line(line_intersection(f, altitude(E, A, B)), altitude(D, A, B))
By parallel_line_definition on F, altitude(F, A, C), j we get altitude(F, A, C) == parallel_line(F, j)
By parallel_line_definition on B, f, altitude(D, C, G) we get f == parallel_line(B, altitude(D, C, G))
By parallel_line_definition on line_intersection(f, altitude(D, A, B)), f, altitude(D, C, G) we get f == parallel_line(line_intersection(f, altitude(D, A, B)), altitude(D, C, G))
By parallel_line_definition on B, j, altitude(D, A, C) we get j == parallel_line(B, altitude(D, A, C))
By parallel_line_definition on line_intersection(j, altitude(D, B, E)), altitude(D, B, E), h we get altitude(D, B, E) == parallel_line(line_intersection(j, altitude(D, B, E)), h)
By parallel_line_definition on D, altitude(D, B, E), h we get altitude(D, B, E) == parallel_line(D, h)
By parallel_line_definition on line_intersection(f, altitude(D, A, B)), altitude(D, A, B), altitude(E, A, B) we get altitude(D, A, B) == parallel_line(line_intersection(f, altitude(D, A, B)), altitude(E, A, B))
By parallel_line_definition on line_intersection(k, altitude(E, C, G)), k, altitude(D, A, B) we get k == parallel_line(line_intersection(k, altitude(E, C, G)), altitude(D, A, B))
By parallel_line_definition on line_intersection(g, altitude(E, B, C)), g, altitude(E, A, D) we get g == parallel_line(line_intersection(g, altitude(E, B, C)), altitude(E, A, D))
By parallel_line_definition on D, altitude(D, A, B), altitude(E, A, B) we get altitude(D, A, B) == parallel_line(D, altitude(E, A, B))
By parallel_line_definition on line_intersection(j, altitude(D, B, E)), j, altitude(D, A, C) we get j == parallel_line(line_intersection(j, altitude(D, B, E)), altitude(D, A, C))
By parallel_line_definition on E, altitude(E, A, B), k we get altitude(E, A, B) == parallel_line(E, k)
By parallel_line_definition on D, i, altitude(E, B, C) we get i == parallel_line(D, altitude(E, B, C))
By parallel_line_definition on line_intersection(i, altitude(E, A, D)), i, altitude(F, B, C) we get i == parallel_line(line_intersection(i, altitude(E, A, D)), altitude(F, B, C))
By parallel_line_definition on G, k, altitude(D, A, B) we get k == parallel_line(G, altitude(D, A, B))
By parallel_line_definition on line_intersection(h, altitude(D, A, C)), altitude(D, A, C), j we get altitude(D, A, C) == parallel_line(line_intersection(h, altitude(D, A, C)), j)
By parallel_line_definition on line_intersection(h, altitude(F, A, C)), altitude(F, A, C), j we get altitude(F, A, C) == parallel_line(line_intersection(h, altitude(F, A, C)), j)
By parallel_line_definition on A, h, altitude(D, B, E) we get h == parallel_line(A, altitude(D, B, E))
By parallel_line_definition on line_intersection(i, altitude(E, A, D)), altitude(E, A, D), g we get altitude(E, A, D) == parallel_line(line_intersection(i, altitude(E, A, D)), g)
By parallel_line_definition on line_intersection(h, altitude(F, A, C)), altitude(F, A, C), altitude(D, A, C) we get altitude(F, A, C) == parallel_line(line_intersection(h, altitude(F, A, C)), altitude(D, A, C))
By parallel_line_definition on A, i, altitude(F, B, C) we get i == parallel_line(A, altitude(F, B, C))
By parallel_line_definition on C, k, altitude(D, A, B) we get k == parallel_line(C, altitude(D, A, B))
By parallel_line_definition on F, k, altitude(D, A, B) we get k == parallel_line(F, altitude(D, A, B))
By parallel_line_definition on B, g, altitude(E, A, D) we get g == parallel_line(B, altitude(E, A, D))
By parallel_line_definition on line_intersection(k, altitude(D, C, G)), altitude(D, C, G), f we get altitude(D, C, G) == parallel_line(line_intersection(k, altitude(D, C, G)), f)
By parallel_line_definition on line_intersection(h, altitude(D, A, C)), h, altitude(D, B, E) we get h == parallel_line(line_intersection(h, altitude(D, A, C)), altitude(D, B, E))
By parallel_line_definition on line_intersection(g, altitude(E, B, C)), altitude(E, B, C), altitude(F, B, C) we get altitude(E, B, C) == parallel_line(line_intersection(g, altitude(E, B, C)), altitude(F, B, C))
By parallel_line_definition on E, altitude(E, C, G), f we get altitude(E, C, G) == parallel_line(E, f)
By parallel_line_definition on F, altitude(F, A, C), altitude(D, A, C) we get altitude(F, A, C) == parallel_line(F, altitude(D, A, C))
By parallel_line_definition on F, f, altitude(D, C, G) we get f == parallel_line(F, altitude(D, C, G))
By parallel_line_definition on line_intersection(h, altitude(F, A, C)), h, altitude(D, B, E) we get h == parallel_line(line_intersection(h, altitude(F, A, C)), altitude(D, B, E))
By parallel_line_definition on C, h, altitude(D, B, E) we get h == parallel_line(C, altitude(D, B, E))
By parallel_line_definition on line_intersection(k, altitude(D, C, G)), k, altitude(E, A, B) we get k == parallel_line(line_intersection(k, altitude(D, C, G)), altitude(E, A, B))
By parallel_line_definition on line_intersection(k, altitude(D, C, G)), altitude(D, C, G), altitude(E, C, G) we get altitude(D, C, G) == parallel_line(line_intersection(k, altitude(D, C, G)), altitude(E, C, G))
By parallel_line_definition on H, k, altitude(D, A, B) we get k == parallel_line(H, altitude(D, A, B))
By parallel_line_definition on line_intersection(j, altitude(D, B, E)), j, altitude(F, A, C) we get j == parallel_line(line_intersection(j, altitude(D, B, E)), altitude(F, A, C))
By parallel_line_definition on E, j, altitude(F, A, C) we get j == parallel_line(E, altitude(F, A, C))
By parallel_line_definition on E, altitude(E, B, C), altitude(F, B, C) we get altitude(E, B, C) == parallel_line(E, altitude(F, B, C))
By parallel_line_definition on D, g, altitude(E, A, D) we get g == parallel_line(D, altitude(E, A, D))
By parallel_line_definition on line_intersection(f, altitude(E, A, B)), f, altitude(E, C, G) we get f == parallel_line(line_intersection(f, altitude(E, A, B)), altitude(E, C, G))
By parallel_line_definition on J, g, altitude(E, A, D) we get g == parallel_line(J, altitude(E, A, D))
By parallel_line_definition on D, altitude(D, C, G), altitude(E, C, G) we get altitude(D, C, G) == parallel_line(D, altitude(E, C, G))
By parallel_line_definition on F, altitude(F, B, C), altitude(E, B, C) we get altitude(F, B, C) == parallel_line(F, altitude(E, B, C))
By parallel_line_definition on line_intersection(k, altitude(D, C, G)), k, altitude(D, A, B) we get k == parallel_line(line_intersection(k, altitude(D, C, G)), altitude(D, A, B))
By parallel_line_definition on H, k, altitude(E, A, B) we get k == parallel_line(H, altitude(E, A, B))
By parallel_line_definition on line_intersection(g, altitude(F, B, C)), g, altitude(E, A, D) we get g == parallel_line(line_intersection(g, altitude(F, B, C)), altitude(E, A, D))
By parallel_line_definition on E, altitude(E, A, B), altitude(D, A, B) we get altitude(E, A, B) == parallel_line(E, altitude(D, A, B))
By parallel_line_definition on F, altitude(F, B, C), i we get altitude(F, B, C) == parallel_line(F, i)
By parallel_line_definition on F, f, altitude(E, C, G) we get f == parallel_line(F, altitude(E, C, G))
By parallel_line_definition on E, altitude(E, C, G), altitude(D, C, G) we get altitude(E, C, G) == parallel_line(E, altitude(D, C, G))
By parallel_line_definition on G, j, altitude(D, A, C) we get j == parallel_line(G, altitude(D, A, C))
By parallel_line_definition on G, k, altitude(E, A, B) we get k == parallel_line(G, altitude(E, A, B))
By parallel_line_definition on line_intersection(g, altitude(F, B, C)), altitude(F, B, C), i we get altitude(F, B, C) == parallel_line(line_intersection(g, altitude(F, B, C)), i)
By parallel_line_definition on G, i, altitude(E, B, C) we get i == parallel_line(G, altitude(E, B, C))
By parallel_line_definition on line_intersection(f, altitude(D, A, B)), altitude(D, A, B), k we get altitude(D, A, B) == parallel_line(line_intersection(f, altitude(D, A, B)), k)
By parallel_line_definition on B, f, altitude(E, C, G) we get f == parallel_line(B, altitude(E, C, G))
By parallel_line_definition on A, f, altitude(D, C, G) we get f == parallel_line(A, altitude(D, C, G))
By parallel_line_definition on line_intersection(h, altitude(D, A, C)), altitude(D, A, C), altitude(F, A, C) we get altitude(D, A, C) == parallel_line(line_intersection(h, altitude(D, A, C)), altitude(F, A, C))
By parallel_line_definition on A, f, altitude(E, C, G) we get f == parallel_line(A, altitude(E, C, G))
By parallel_line_definition on D, altitude(D, A, B), k we get altitude(D, A, B) == parallel_line(D, k)
By different_points_v1 on G, F we get 0 != distance(F, G)
By in_imply_collinear on line_intersection(k, altitude(D, C, G)), F, G we get collinear(F, G, line_intersection(k, altitude(D, C, G)))
By orthocenter_concurrency on E, D, A we get orthocenter(A, D, E) in altitude(E, A, D), orthocenter(A, D, E) in altitude(D, A, E), orthocenter(A, D, E) in altitude(A, D, E)
By orthocenter_concurrency on E, D, B we get orthocenter(B, D, E) in altitude(E, B, D), orthocenter(B, D, E) in altitude(D, B, E), orthocenter(B, D, E) in altitude(B, D, E)
By in_imply_collinear on line_intersection(i, altitude(E, A, D)), D, G we get collinear(D, G, line_intersection(i, altitude(E, A, D)))
By in_imply_collinear on line_intersection(i, altitude(E, A, D)), A, G we get collinear(A, G, line_intersection(i, altitude(E, A, D)))
By in_imply_collinear on line_intersection(g, altitude(E, B, C)), B, C we get collinear(B, C, line_intersection(g, altitude(E, B, C)))
By orthocenter_concurrency on D, F, B we get orthocenter(B, D, F) in altitude(D, B, F), orthocenter(B, D, F) in altitude(F, B, D), orthocenter(B, D, F) in altitude(B, D, F)
By orthocenter_concurrency on A, J, I we get orthocenter(A, I, J) in altitude(A, I, J), orthocenter(A, I, J) in altitude(J, A, I), orthocenter(A, I, J) in altitude(I, A, J)
By in_imply_collinear on line_intersection(i, altitude(E, A, D)), A, D we get collinear(A, D, line_intersection(i, altitude(E, A, D)))
By in_imply_collinear on line_intersection(k, altitude(E, C, G)), G, H we get collinear(G, H, line_intersection(k, altitude(E, C, G)))
By orthocenter_concurrency on F, E, A we get orthocenter(A, E, F) in altitude(F, A, E), orthocenter(A, E, F) in altitude(E, A, F), orthocenter(A, E, F) in altitude(A, E, F)
By line_containment_inequality on line_intersection(f, altitude(E, A, B)), D, f we get D != line_intersection(f, altitude(E, A, B))
By orthocenter_concurrency on D, E, C we get orthocenter(C, D, E) in altitude(D, C, E), orthocenter(C, D, E) in altitude(E, C, D), orthocenter(C, D, E) in altitude(C, D, E)
By in_imply_collinear on line_intersection(k, altitude(E, C, G)), G, C we get collinear(C, G, line_intersection(k, altitude(E, C, G)))
By orthocenter_concurrency on E, D, G we get orthocenter(D, E, G) in altitude(E, D, G), orthocenter(D, E, G) in altitude(D, E, G), orthocenter(D, E, G) in altitude(G, D, E)
By in_imply_collinear on line_intersection(k, altitude(E, C, G)), H, C we get collinear(C, H, line_intersection(k, altitude(E, C, G)))
By in_imply_collinear on line_intersection(h, altitude(D, A, C)), E, C we get collinear(C, E, line_intersection(h, altitude(D, A, C)))
By in_imply_collinear on line_intersection(Line(A, J), altitude(D, A, J)), J, A we get collinear(A, J, line_intersection(Line(A, J), altitude(D, A, J)))
By in_imply_collinear on line_intersection(h, altitude(D, A, C)), A, E we get collinear(A, E, line_intersection(h, altitude(D, A, C)))
By in_imply_collinear on line_intersection(h, altitude(D, A, C)), C, A we get collinear(A, C, line_intersection(h, altitude(D, A, C)))
By in_imply_collinear on line_intersection(g, altitude(E, B, C)), J, D we get collinear(D, J, line_intersection(g, altitude(E, B, C)))
By in_imply_collinear on line_intersection(g, altitude(E, B, C)), C, D we get collinear(C, D, line_intersection(g, altitude(E, B, C)))
By in_imply_collinear on line_intersection(g, altitude(F, B, C)), B, J we get collinear(B, J, line_intersection(g, altitude(F, B, C)))
By in_imply_collinear on line_intersection(g, altitude(E, B, C)), B, D we get collinear(B, D, line_intersection(g, altitude(E, B, C)))
By in_imply_collinear on line_intersection(k, altitude(D, C, G)), C, H we get collinear(C, H, line_intersection(k, altitude(D, C, G)))
By in_imply_collinear on line_intersection(Line(B, H), altitude(F, B, H)), B, H we get collinear(B, H, line_intersection(Line(B, H), altitude(F, B, H)))
By reverse_direction on G, J we get 180 == direction(G, J) - direction(J, G) mod 360
By in_imply_collinear on line_intersection(g, altitude(F, B, C)), D, B we get collinear(B, D, line_intersection(g, altitude(F, B, C)))
By between_imply_segment_sum on C, G, F we get distance(C, F) == distance(C, G) + distance(F, G)
By in_imply_collinear on line_intersection(g, altitude(E, B, C)), J, B we get collinear(B, J, line_intersection(g, altitude(E, B, C)))
By in_imply_collinear on line_intersection(g, altitude(F, B, C)), D, J we get collinear(D, J, line_intersection(g, altitude(F, B, C)))
By in_imply_collinear on line_intersection(k, altitude(D, C, G)), F, H we get collinear(F, H, line_intersection(k, altitude(D, C, G)))
By in_imply_collinear on line_intersection(f, altitude(E, A, B)), B, A we get collinear(A, B, line_intersection(f, altitude(E, A, B)))
By in_imply_collinear on line_intersection(h, altitude(F, A, C)), E, A we get collinear(A, E, line_intersection(h, altitude(F, A, C)))
By in_imply_collinear on line_intersection(h, altitude(F, A, C)), A, C we get collinear(A, C, line_intersection(h, altitude(F, A, C)))
By in_imply_collinear on line_intersection(f, altitude(D, A, B)), F, B we get collinear(B, F, line_intersection(f, altitude(D, A, B)))
By line_containment_inequality on line_intersection(Line(B, H), altitude(F, B, H)), C, Line(B, H) we get C != line_intersection(Line(B, H), altitude(F, B, H))
By in_imply_collinear on line_intersection(Line(A, H), altitude(F, A, H)), A, H we get collinear(A, H, line_intersection(Line(A, H), altitude(F, A, H)))
By in_imply_collinear on line_intersection(k, altitude(D, C, G)), G, C we get collinear(C, G, line_intersection(k, altitude(D, C, G)))
By in_imply_collinear on line_intersection(f, altitude(D, A, B)), A, F we get collinear(A, F, line_intersection(f, altitude(D, A, B)))
By double_perpendicular_and_parallel_v0_r on i, altitude(E, A, D), altitude(F, B, C) we get perpendicular(altitude(E, A, D), altitude(F, B, C))
By line_inequality on altitude(F, B, H), Line(G, J), F we get Line(G, J) != altitude(F, B, H)
By in_imply_collinear on line_intersection(g, altitude(F, B, C)), C, D we get collinear(C, D, line_intersection(g, altitude(F, B, C)))
By in_imply_collinear on line_intersection(j, altitude(D, B, E)), B, E we get collinear(B, E, line_intersection(j, altitude(D, B, E)))
By in_imply_collinear on line_intersection(g, altitude(E, B, C)), C, J we get collinear(C, J, line_intersection(g, altitude(E, B, C)))
By in_imply_collinear on line_intersection(k, altitude(E, C, G)), G, F we get collinear(F, G, line_intersection(k, altitude(E, C, G)))
By in_imply_collinear on line_intersection(g, altitude(F, B, C)), C, B we get collinear(B, C, line_intersection(g, altitude(F, B, C)))
By in_imply_collinear on line_intersection(k, altitude(E, C, G)), H, F we get collinear(F, H, line_intersection(k, altitude(E, C, G)))
By in_imply_collinear on line_intersection(h, altitude(F, A, C)), C, E we get collinear(C, E, line_intersection(h, altitude(F, A, C)))
By in_imply_collinear on line_intersection(g, altitude(F, B, C)), J, C we get collinear(C, J, line_intersection(g, altitude(F, B, C)))
By in_imply_collinear on line_intersection(k, altitude(D, C, G)), H, G we get collinear(G, H, line_intersection(k, altitude(D, C, G)))
By in_imply_collinear on line_intersection(f, altitude(D, A, B)), B, A we get collinear(A, B, line_intersection(f, altitude(D, A, B)))
By in_imply_collinear on line_intersection(k, altitude(D, C, G)), C, F we get collinear(C, F, line_intersection(k, altitude(D, C, G)))
By in_imply_collinear on line_intersection(k, altitude(E, C, G)), C, F we get collinear(C, F, line_intersection(k, altitude(E, C, G)))
By in_imply_collinear on line_intersection(j, altitude(D, B, E)), G, B we get collinear(B, G, line_intersection(j, altitude(D, B, E)))
By in_imply_collinear on line_intersection(Line(G, J), altitude(D, G, J)), J, G we get collinear(G, J, line_intersection(Line(G, J), altitude(D, G, J)))
By in_imply_collinear on line_intersection(f, altitude(E, A, B)), A, F we get collinear(A, F, line_intersection(f, altitude(E, A, B)))
By reverse_direction on H, B we get 180 == direction(H, B) - direction(B, H) mod 360
By in_imply_collinear on line_intersection(f, altitude(E, A, B)), F, B we get collinear(B, F, line_intersection(f, altitude(E, A, B)))
By in_imply_collinear on line_intersection(j, altitude(D, B, E)), E, G we get collinear(E, G, line_intersection(j, altitude(D, B, E)))
By line_containment_inequality on line_intersection(Line(A, J), altitude(D, A, J)), E, Line(A, J) we get E != line_intersection(Line(A, J), altitude(D, A, J))
By line_circle_intersection_has_at_most_two_points_0 on C, F, H, Circle(B, C, E) we get H not in Circle(B, C, E)
By line_inequality on altitude(E, B, C), Line(B, H), E we get Line(B, H) != altitude(E, B, C)
By line_inequality on Line(G, J), Line(B, H), G we get Line(B, H) != Line(G, J)
By double_perpendicular_and_parallel_v0_r on k, altitude(E, C, G), altitude(E, A, B) we get perpendicular(altitude(E, A, B), altitude(E, C, G))
By line_inequality on altitude(E, A, B), Line(B, H), E we get Line(B, H) != altitude(E, A, B)
By double_perpendicular_and_parallel_v0_r on f, altitude(E, A, B), altitude(D, C, G) we get perpendicular(altitude(D, C, G), altitude(E, A, B))
By line_containment_inequality on line_intersection(h, altitude(F, A, C)), F, h we get F != line_intersection(h, altitude(F, A, C))
By double_perpendicular_and_parallel_v0_r on f, altitude(D, A, B), altitude(E, C, G) we get perpendicular(altitude(D, A, B), altitude(E, C, G))
By line_circle_intersection_has_at_most_two_points_0 on F, A, B, Circle(A, C, D) we get B not in Circle(A, C, D)
By double_perpendicular_and_parallel_v0_r on k, altitude(D, C, G), altitude(D, A, B) we get perpendicular(altitude(D, A, B), altitude(D, C, G))
By line_containment_inequality on line_intersection(f, altitude(E, A, B)), I, f we get I != line_intersection(f, altitude(E, A, B))
By line_inequality on altitude(D, A, J), Line(G, J), D we get Line(G, J) != altitude(D, A, J)
By line_circle_intersection_has_at_most_two_points_0 on E, A, C, Circle(A, B, D) we get C not in Circle(A, B, D)
By line_circle_intersection_has_at_most_two_points_0 on E, C, A, Circle(C, D, E) we get A not in Circle(C, D, E)
By line_containment_inequality on line_intersection(Line(A, H), altitude(F, A, H)), F, Line(A, H) we get F != line_intersection(Line(A, H), altitude(F, A, H))
By collinear_definition on J, A, center(d) we get A in Line(J, center(d)), center(d) in Line(A, J), Line(A, J) == Line(J, center(d)), 0 == 2 * angle(A, J, center(d)) mod 360
By line_circle_intersection_has_at_most_two_points_0 on D, A, G, Circle(A, C, D) we get G not in Circle(A, C, D)
By line_inequality on altitude(D, G, J), Line(G, J), D we get Line(G, J) != altitude(D, G, J)
By line_containment_inequality on line_intersection(j, altitude(D, B, E)), H, j we get H != line_intersection(j, altitude(D, B, E))
By double_perpendicular_and_parallel_v0_r on j, altitude(D, B, E), altitude(D, A, C) we get perpendicular(altitude(D, A, C), altitude(D, B, E))
By line_circle_intersection_has_at_most_two_points_0 on G, C, H, Circle(C, D, E) we get H not in Circle(C, D, E)
By line_containment_inequality on line_intersection(Line(G, J), altitude(D, G, J)), A, Line(G, J) we get A != line_intersection(Line(G, J), altitude(D, G, J))
By line_containment_inequality on line_intersection(Line(A, J), altitude(D, A, J)), C, Line(A, J) we get C != line_intersection(Line(A, J), altitude(D, A, J))
By double_perpendicular_and_parallel_v0_r on i, altitude(E, A, D), altitude(E, B, C) we get perpendicular(altitude(E, A, D), altitude(E, B, C))
By line_containment_inequality on line_intersection(h, altitude(F, A, C)), D, h we get D != line_intersection(h, altitude(F, A, C))
By line_circle_intersection_has_at_most_two_points_0 on G, C, F, Circle(C, D, E) we get F not in Circle(C, D, E)
By line_containment_inequality on line_intersection(g, altitude(E, B, C)), H, g we get H != line_intersection(g, altitude(E, B, C))
By reverse_direction on J, G we get 180 == direction(J, G) - direction(G, J) mod 360
By line_containment_inequality on line_intersection(g, altitude(E, B, C)), A, g we get A != line_intersection(g, altitude(E, B, C))
By collinear_definition on A, center(d), J we get center(d) in Line(A, J), J in Line(A, center(d)), Line(A, J) == Line(A, center(d)), 0 == 2 * angle(center(d), A, J) mod 360
By line_inequality on altitude(F, B, C), Line(G, J), F we get Line(G, J) != altitude(F, B, C)
By line_containment_inequality on line_intersection(g, altitude(F, B, C)), G, g we get G != line_intersection(g, altitude(F, B, C))
By line_containment_inequality on line_intersection(f, altitude(D, A, B)), C, f we get C != line_intersection(f, altitude(D, A, B))
By between_imply_segment_sum on C, G, H we get distance(C, H) == distance(C, G) + distance(G, H)
By double_perpendicular_and_parallel_v0_r on j, altitude(D, B, E), altitude(F, A, C) we get perpendicular(altitude(D, B, E), altitude(F, A, C))
By line_containment_inequality on line_intersection(g, altitude(E, B, C)), G, g we get G != line_intersection(g, altitude(E, B, C))
By between_imply_segment_sum on G, F, H we get distance(G, H) == distance(F, G) + distance(F, H)
By line_containment_inequality on line_intersection(f, altitude(D, A, B)), E, f we get E != line_intersection(f, altitude(D, A, B))
By line_containment_inequality on line_intersection(Line(G, J), altitude(D, G, J)), B, Line(G, J) we get B != line_intersection(Line(G, J), altitude(D, G, J))
By line_containment_inequality on line_intersection(j, altitude(D, B, E)), F, j we get F != line_intersection(j, altitude(D, B, E))
By collinear_definition on center(d), A, J we get A in Line(J, center(d)), J in Line(A, center(d)), Line(A, center(d)) == Line(J, center(d)), 0 == 2 * angle(A, center(d), J) mod 360
By line_circle_intersection_has_at_most_two_points_0 on C, D, J, Circle(C, D, E) we get J not in Circle(C, D, E)
By line_circle_intersection_has_at_most_two_points_0 on F, C, G, Circle(B, C, E) we get G not in Circle(B, C, E)
By line_circle_intersection_has_at_most_two_points_0 on C, B, D, Circle(B, C, E) we get D not in Circle(B, C, E)
By line_containment_inequality on line_intersection(j, altitude(D, B, E)), I, j we get I != line_intersection(j, altitude(D, B, E))
By line_inequality on altitude(E, A, D), Line(G, J), E we get Line(G, J) != altitude(E, A, D)
By line_inequality on Line(H, center(c)), Line(G, J), H we get Line(G, J) != Line(H, center(c))
By line_containment_inequality on line_intersection(f, altitude(D, A, B)), I, f we get I != line_intersection(f, altitude(D, A, B))
By line_containment_inequality on line_intersection(i, altitude(E, A, D)), I, i we get I != line_intersection(i, altitude(E, A, D))
By line_containment_inequality on line_intersection(f, altitude(D, A, B)), G, f we get G != line_intersection(f, altitude(D, A, B))
By reverse_direction on B, H we get 180 == direction(B, H) - direction(H, B) mod 360
By line_containment_inequality on line_intersection(h, altitude(D, A, C)), I, h we get I != line_intersection(h, altitude(D, A, C))
By line_inequality on Line(A, center(c)), Line(G, J), A we get Line(G, J) != Line(A, center(c))
By line_containment_inequality on line_intersection(i, altitude(E, A, D)), B, i we get B != line_intersection(i, altitude(E, A, D))
By line_containment_inequality on line_intersection(Line(A, H), altitude(F, A, H)), J, Line(A, H) we get J != line_intersection(Line(A, H), altitude(F, A, H))
By line_inequality on altitude(D, B, E), Line(B, H), D we get Line(B, H) != altitude(D, B, E)
By line_containment_inequality on line_intersection(k, altitude(E, C, G)), E, k we get E != line_intersection(k, altitude(E, C, G))
By line_containment_inequality on line_intersection(f, altitude(E, A, B)), H, f we get H != line_intersection(f, altitude(E, A, B))
By line_circle_intersection_has_at_most_two_points_0 on E, B, G, Circle(A, B, D) we get G not in Circle(A, B, D)
By line_circle_intersection_has_at_most_two_points_0 on F, B, A, Circle(B, C, E) we get A not in Circle(B, C, E)
By line_circle_intersection_has_at_most_two_points_0 on C, D, B, Circle(C, D, E) we get B not in Circle(C, D, E)
By line_containment_inequality on line_intersection(g, altitude(E, B, C)), E, g we get E != line_intersection(g, altitude(E, B, C))
By line_containment_inequality on line_intersection(Line(A, J), altitude(D, A, J)), G, Line(A, J) we get G != line_intersection(Line(A, J), altitude(D, A, J))
By line_containment_inequality on line_intersection(k, altitude(E, C, G)), J, k we get J != line_intersection(k, altitude(E, C, G))
By line_containment_inequality on line_intersection(g, altitude(E, B, C)), F, g we get F != line_intersection(g, altitude(E, B, C))
By line_containment_inequality on line_intersection(Line(B, H), altitude(F, B, H)), J, Line(B, H) we get J != line_intersection(Line(B, H), altitude(F, B, H))
By line_containment_inequality on line_intersection(j, altitude(D, B, E)), J, j we get J != line_intersection(j, altitude(D, B, E))
By line_circle_intersection_has_at_most_two_points_0 on A, C, E, Circle(A, C, D) we get E not in Circle(A, C, D)
By line_containment_inequality on line_intersection(Line(A, H), altitude(F, A, H)), E, Line(A, H) we get E != line_intersection(Line(A, H), altitude(F, A, H))
By line_containment_inequality on line_intersection(h, altitude(D, A, C)), G, h we get G != line_intersection(h, altitude(D, A, C))
By line_containment_inequality on line_intersection(Line(A, H), altitude(F, A, H)), I, Line(A, H) we get I != line_intersection(Line(A, H), altitude(F, A, H))
By line_inequality on Line(D, center(d)), Line(G, J), D we get Line(G, J) != Line(D, center(d))
By line_inequality on Line(I, center(c)), Line(B, H), I we get Line(B, H) != Line(I, center(c))
By line_containment_inequality on line_intersection(k, altitude(E, C, G)), A, k we get A != line_intersection(k, altitude(E, C, G))
By line_circle_intersection_has_at_most_two_points_0 on C, B, J, Circle(B, C, E) we get J not in Circle(B, C, E)
By line_inequality on Line(G, center(c)), Line(B, H), G we get Line(B, H) != Line(G, center(c))
By line_containment_inequality on line_intersection(Line(G, J), altitude(D, G, J)), D, Line(G, J) we get D != line_intersection(Line(G, J), altitude(D, G, J))
By line_containment_inequality on line_intersection(i, altitude(E, A, D)), H, i we get H != line_intersection(i, altitude(E, A, D))
By line_containment_inequality on line_intersection(h, altitude(F, A, C)), B, h we get B != line_intersection(h, altitude(F, A, C))
By line_inequality on Line(A, center(d)), Line(G, J), A we get Line(G, J) != Line(A, center(d))
By line_containment_inequality on line_intersection(h, altitude(F, A, C)), I, h we get I != line_intersection(h, altitude(F, A, C))
By line_containment_inequality on line_intersection(k, altitude(D, C, G)), J, k we get J != line_intersection(k, altitude(D, C, G))
By line_inequality on altitude(E, C, G), Line(B, H), E we get Line(B, H) != altitude(E, C, G)
By line_inequality on altitude(F, A, H), Line(B, H), F we get Line(B, H) != altitude(F, A, H)
By line_containment_inequality on line_intersection(h, altitude(F, A, C)), J, h we get J != line_intersection(h, altitude(F, A, C))
By line_inequality on altitude(F, A, C), Line(B, H), F we get Line(B, H) != altitude(F, A, C)
By line_inequality on altitude(E, A, B), Line(G, J), E we get Line(G, J) != altitude(E, A, B)
By line_containment_inequality on line_intersection(h, altitude(D, A, C)), H, h we get H != line_intersection(h, altitude(D, A, C))
By line_inequality on altitude(F, A, C), Line(G, J), F we get Line(G, J) != altitude(F, A, C)
By line_inequality on altitude(F, B, C), Line(B, H), F we get Line(B, H) != altitude(F, B, C)
By line_circle_intersection_has_at_most_two_points_0 on C, D, J, Circle(A, C, D) we get J not in Circle(A, C, D)
By line_containment_inequality on line_intersection(j, altitude(D, B, E)), D, j we get D != line_intersection(j, altitude(D, B, E))
By line_containment_inequality on line_intersection(Line(A, H), altitude(F, A, H)), D, Line(A, H) we get D != line_intersection(Line(A, H), altitude(F, A, H))
By line_inequality on Line(I, center(c)), Line(G, J), I we get Line(G, J) != Line(I, center(c))
By line_containment_inequality on line_intersection(Line(G, J), altitude(D, G, J)), H, Line(G, J) we get H != line_intersection(Line(G, J), altitude(D, G, J))
By line_inequality on Line(A, center(c)), Line(B, H), A we get Line(B, H) != Line(A, center(c))
By line_containment_inequality on line_intersection(Line(A, J), altitude(D, A, J)), F, Line(A, J) we get F != line_intersection(Line(A, J), altitude(D, A, J))
By line_containment_inequality on line_intersection(Line(G, J), altitude(D, G, J)), E, Line(G, J) we get E != line_intersection(Line(G, J), altitude(D, G, J))
By line_containment_inequality on line_intersection(h, altitude(F, A, C)), H, h we get H != line_intersection(h, altitude(F, A, C))
By line_containment_inequality on line_intersection(Line(B, H), altitude(F, B, H)), E, Line(B, H) we get E != line_intersection(Line(B, H), altitude(F, B, H))
By line_inequality on altitude(F, B, H), Line(B, H), F we get Line(B, H) != altitude(F, B, H)
By line_containment_inequality on line_intersection(k, altitude(D, C, G)), A, k we get A != line_intersection(k, altitude(D, C, G))
By line_containment_inequality on line_intersection(Line(A, H), altitude(F, A, H)), C, Line(A, H) we get C != line_intersection(Line(A, H), altitude(F, A, H))
By line_inequality on Line(D, center(d)), Line(B, H), D we get Line(B, H) != Line(D, center(d))
By line_containment_inequality on line_intersection(h, altitude(D, A, C)), D, h we get D != line_intersection(h, altitude(D, A, C))
By line_circle_intersection_has_at_most_two_points_0 on B, A, F, Circle(A, B, D) we get F not in Circle(A, B, D)
By line_containment_inequality on line_intersection(h, altitude(F, A, C)), G, h we get G != line_intersection(h, altitude(F, A, C))
By line_containment_inequality on line_intersection(Line(A, J), altitude(D, A, J)), B, Line(A, J) we get B != line_intersection(Line(A, J), altitude(D, A, J))
By line_containment_inequality on line_intersection(Line(A, J), altitude(D, A, J)), D, Line(A, J) we get D != line_intersection(Line(A, J), altitude(D, A, J))
By line_containment_inequality on line_intersection(Line(A, H), altitude(F, A, H)), B, Line(A, H) we get B != line_intersection(Line(A, H), altitude(F, A, H))
By line_inequality on altitude(D, A, B), Line(B, H), D we get Line(B, H) != altitude(D, A, B)
By line_inequality on altitude(F, A, H), Line(G, J), F we get Line(G, J) != altitude(F, A, H)
By line_inequality on Line(I, center(d)), Line(B, H), I we get Line(B, H) != Line(I, center(d))
By line_containment_inequality on line_intersection(k, altitude(D, C, G)), E, k we get E != line_intersection(k, altitude(D, C, G))
By line_inequality on altitude(E, C, G), Line(G, J), E we get Line(G, J) != altitude(E, C, G)
By line_inequality on altitude(D, C, G), Line(B, H), D we get Line(B, H) != altitude(D, C, G)
By line_inequality on Line(I, center(d)), Line(G, J), I we get Line(G, J) != Line(I, center(d))
By line_containment_inequality on line_intersection(i, altitude(E, A, D)), F, i we get F != line_intersection(i, altitude(E, A, D))
By line_containment_inequality on line_intersection(g, altitude(F, B, C)), E, g we get E != line_intersection(g, altitude(F, B, C))
By line_inequality on Line(J, center(d)), Line(B, H), J we get Line(B, H) != Line(J, center(d))
By line_containment_inequality on line_intersection(Line(B, H), altitude(F, B, H)), F, Line(B, H) we get F != line_intersection(Line(B, H), altitude(F, B, H))
By line_inequality on altitude(D, A, C), Line(B, H), D we get Line(B, H) != altitude(D, A, C)
By line_containment_inequality on line_intersection(f, altitude(D, A, B)), D, f we get D != line_intersection(f, altitude(D, A, B))
By line_containment_inequality on line_intersection(j, altitude(D, B, E)), C, j we get C != line_intersection(j, altitude(D, B, E))
By line_containment_inequality on line_intersection(f, altitude(E, A, B)), J, f we get J != line_intersection(f, altitude(E, A, B))
By line_containment_inequality on line_intersection(k, altitude(E, C, G)), B, k we get B != line_intersection(k, altitude(E, C, G))
By line_inequality on Line(A, center(d)), Line(B, H), A we get Line(B, H) != Line(A, center(d))
By line_containment_inequality on line_intersection(i, altitude(E, A, D)), C, i we get C != line_intersection(i, altitude(E, A, D))
By line_containment_inequality on line_intersection(k, altitude(D, C, G)), I, k we get I != line_intersection(k, altitude(D, C, G))
By line_inequality on altitude(E, A, D), Line(B, H), E we get Line(B, H) != altitude(E, A, D)
By line_inequality on altitude(D, A, C), Line(G, J), D we get Line(G, J) != altitude(D, A, C)
By line_circle_intersection_has_at_most_two_points_0 on B, D, J, Circle(A, B, D) we get J not in Circle(A, B, D)
By line_containment_inequality on line_intersection(g, altitude(E, B, C)), I, g we get I != line_intersection(g, altitude(E, B, C))
By line_containment_inequality on line_intersection(k, altitude(E, C, G)), I, k we get I != line_intersection(k, altitude(E, C, G))
By line_inequality on altitude(D, C, G), Line(G, J), D we get Line(G, J) != altitude(D, C, G)
By line_containment_inequality on line_intersection(Line(A, J), altitude(D, A, J)), H, Line(A, J) we get H != line_intersection(Line(A, J), altitude(D, A, J))
By line_containment_inequality on line_intersection(f, altitude(E, A, B)), E, f we get E != line_intersection(f, altitude(E, A, B))
By line_inequality on altitude(E, B, C), Line(G, J), E we get Line(G, J) != altitude(E, B, C)
By line_containment_inequality on line_intersection(f, altitude(D, A, B)), H, f we get H != line_intersection(f, altitude(D, A, B))
By line_containment_inequality on line_intersection(Line(B, H), altitude(F, B, H)), D, Line(B, H) we get D != line_intersection(Line(B, H), altitude(F, B, H))
By line_inequality on altitude(D, G, J), Line(B, H), D we get Line(B, H) != altitude(D, G, J)
By line_circle_intersection_has_at_most_two_points_0 on C, F, H, Circle(A, C, D) we get H not in Circle(A, C, D)
By line_containment_inequality on line_intersection(Line(B, H), altitude(F, B, H)), I, Line(B, H) we get I != line_intersection(Line(B, H), altitude(F, B, H))
By line_inequality on altitude(D, B, E), Line(G, J), D we get Line(G, J) != altitude(D, B, E)
By line_containment_inequality on line_intersection(Line(G, J), altitude(D, G, J)), I, Line(G, J) we get I != line_intersection(Line(G, J), altitude(D, G, J))
By line_containment_inequality on line_intersection(g, altitude(F, B, C)), I, g we get I != line_intersection(g, altitude(F, B, C))
By line_containment_inequality on line_intersection(g, altitude(F, B, C)), F, g we get F != line_intersection(g, altitude(F, B, C))
By line_containment_inequality on line_intersection(j, altitude(D, B, E)), A, j we get A != line_intersection(j, altitude(D, B, E))
By line_containment_inequality on line_intersection(Line(A, J), altitude(D, A, J)), I, Line(A, J) we get I != line_intersection(Line(A, J), altitude(D, A, J))
By line_containment_inequality on line_intersection(h, altitude(D, A, C)), J, h we get J != line_intersection(h, altitude(D, A, C))
By line_containment_inequality on line_intersection(k, altitude(D, C, G)), B, k we get B != line_intersection(k, altitude(D, C, G))
By line_containment_inequality on line_intersection(h, altitude(D, A, C)), F, h we get F != line_intersection(h, altitude(D, A, C))
By line_containment_inequality on line_intersection(Line(B, H), altitude(F, B, H)), G, Line(B, H) we get G != line_intersection(Line(B, H), altitude(F, B, H))
By line_containment_inequality on line_intersection(Line(G, J), altitude(D, G, J)), C, Line(G, J) we get C != line_intersection(Line(G, J), altitude(D, G, J))
By line_containment_inequality on line_intersection(i, altitude(E, A, D)), J, i we get J != line_intersection(i, altitude(E, A, D))
By line_inequality on altitude(D, A, J), Line(B, H), D we get Line(B, H) != altitude(D, A, J)
By line_containment_inequality on line_intersection(f, altitude(E, A, B)), C, f we get C != line_intersection(f, altitude(E, A, B))
By line_containment_inequality on line_intersection(h, altitude(D, A, C)), B, h we get B != line_intersection(h, altitude(D, A, C))
By line_containment_inequality on line_intersection(Line(G, J), altitude(D, G, J)), F, Line(G, J) we get F != line_intersection(Line(G, J), altitude(D, G, J))
By line_containment_inequality on line_intersection(Line(B, H), altitude(F, B, H)), A, Line(B, H) we get A != line_intersection(Line(B, H), altitude(F, B, H))
By line_containment_inequality on line_intersection(k, altitude(D, C, G)), D, k we get D != line_intersection(k, altitude(D, C, G))
By line_containment_inequality on line_intersection(g, altitude(F, B, C)), A, g we get A != line_intersection(g, altitude(F, B, C))
By line_containment_inequality on line_intersection(f, altitude(D, A, B)), J, f we get J != line_intersection(f, altitude(D, A, B))
By line_containment_inequality on line_intersection(g, altitude(F, B, C)), H, g we get H != line_intersection(g, altitude(F, B, C))
By line_containment_inequality on line_intersection(k, altitude(E, C, G)), D, k we get D != line_intersection(k, altitude(E, C, G))
By line_containment_inequality on line_intersection(f, altitude(E, A, B)), G, f we get G != line_intersection(f, altitude(E, A, B))
By line_containment_inequality on line_intersection(Line(A, H), altitude(F, A, H)), G, Line(A, H) we get G != line_intersection(Line(A, H), altitude(F, A, H))
By line_inequality on altitude(D, A, B), Line(G, J), D we get Line(G, J) != altitude(D, A, B)
By line_containment_inequality on line_intersection(i, altitude(E, A, D)), E, i we get E != line_intersection(i, altitude(E, A, D))
By internal_angle_bisector_definition_v0_r on F, G, C, H we get Line(G, H) == internal_angle_bisector(C, H, F)
By external_angle_bisector_definition_v0_r on G, A, C, F we get Line(A, F) == external_angle_bisector(C, F, G)
By internal_angle_bisector_definition_v0_r on G, H, F, C we get Line(C, H) == internal_angle_bisector(F, C, G)
By similar_triangle_basic_properties on C, E, G, B, E, A we get not_collinear(C, E, G), not_collinear(A, B, E), angle(B, E, A) == angle(C, E, G) mod 360, angle(E, A, B) == angle(E, G, C) mod 360, angle(A, B, E) == angle(G, C, E) mod 360, log(distance(B, E)) + log(distance(E, G)) == log(distance(C, E)) + log(distance(A, E)), log(distance(A, E)) + log(distance(C, G)) == log(distance(E, G)) + log(distance(A, B)), log(distance(A, B)) + log(distance(C, E)) == log(distance(C, G)) + log(distance(B, E))
By anti_similar_triangle_basic_properties on G, E, C, A, F, C we get not_collinear(C, E, G), not_collinear(A, C, F), angle(G, E, C) == 0 - angle(A, F, C) mod 360, angle(E, C, G) == 0 - angle(F, C, A) mod 360, angle(C, G, E) == 0 - angle(C, A, F) mod 360, log(distance(A, F)) + log(distance(C, E)) == log(distance(E, G)) + log(distance(C, F)), log(distance(C, E)) + log(distance(A, C)) == log(distance(C, F)) + log(distance(C, G)), log(distance(A, C)) + log(distance(E, G)) == log(distance(C, G)) + log(distance(A, F))
By internal_angle_bisector_definition_v0_r on center(d), J, center(d), A we get Line(A, J) == internal_angle_bisector(center(d), A, center(d))
By anti_similar_triangle_basic_properties on F, G, A, D, B, A we get not_collinear(A, F, G), not_collinear(A, B, D), angle(F, G, A) == 0 - angle(D, B, A) mod 360, angle(G, A, F) == 0 - angle(B, A, D) mod 360, angle(A, F, G) == 0 - angle(A, D, B) mod 360, log(distance(B, D)) + log(distance(A, G)) == log(distance(F, G)) + log(distance(A, B)), log(distance(A, B)) + log(distance(A, F)) == log(distance(A, G)) + log(distance(A, D)), log(distance(A, D)) + log(distance(F, G)) == log(distance(A, F)) + log(distance(B, D))
By external_angle_bisector_definition_v0_r on C, G, H, F we get Line(F, G) == external_angle_bisector(C, F, H)
By power_of_a_point_in_circle on E, Circle(C, D, E) we get 0 == power_of_a_point(E, Circle(C, D, E))
By power_of_a_point_in_circle on A, Circle(A, C, D) we get 0 == power_of_a_point(A, Circle(A, C, D))
By similar_triangle_basic_properties on G, F, B, A, F, C we get not_collinear(B, F, G), not_collinear(A, C, F), angle(A, F, C) == angle(G, F, B) mod 360, angle(F, B, G) == angle(F, C, A) mod 360, angle(B, G, F) == angle(C, A, F) mod 360, log(distance(A, F)) + log(distance(B, F)) == log(distance(F, G)) + log(distance(C, F)), log(distance(B, F)) + log(distance(A, C)) == log(distance(C, F)) + log(distance(B, G)), log(distance(A, C)) + log(distance(F, G)) == log(distance(B, G)) + log(distance(A, F))
By anti_similar_triangle_basic_properties on B, D, A, G, F, A we get not_collinear(A, B, D), not_collinear(A, F, G), angle(B, D, A) == 0 - angle(G, F, A) mod 360, angle(D, A, B) == 0 - angle(F, A, G) mod 360, angle(A, B, D) == 0 - angle(A, G, F) mod 360, log(distance(B, D)) + log(distance(A, F)) == log(distance(F, G)) + log(distance(A, D)), log(distance(A, D)) + log(distance(A, G)) == log(distance(A, F)) + log(distance(A, B)), log(distance(A, B)) + log(distance(F, G)) == log(distance(A, G)) + log(distance(B, D))
By external_angle_bisector_definition_v0_r on C, F, H, G we get Line(F, G) == external_angle_bisector(C, G, H)
By internal_angle_bisector_definition_v0_r on F, C, F, G we get Line(C, G) == internal_angle_bisector(F, G, F)
By external_angle_bisector_definition_v0_r on G, B, G, F we get Line(B, F) == external_angle_bisector(G, F, G)
By similar_triangle_basic_properties on E, C, G, E, B, A we get not_collinear(C, E, G), not_collinear(A, B, E), angle(E, B, A) == angle(E, C, G) mod 360, angle(B, A, E) == angle(C, G, E) mod 360, angle(A, E, B) == angle(G, E, C) mod 360, log(distance(B, E)) + log(distance(C, G)) == log(distance(C, E)) + log(distance(A, B)), log(distance(A, B)) + log(distance(E, G)) == log(distance(C, G)) + log(distance(A, E)), log(distance(A, E)) + log(distance(C, E)) == log(distance(E, G)) + log(distance(B, E))
By external_angle_bisector_definition_v0_r on H, C, G, F we get Line(C, F) == external_angle_bisector(G, F, H)
By similar_triangle_basic_properties on G, C, D, B, A, D we get not_collinear(C, D, G), not_collinear(A, B, D), angle(B, A, D) == angle(G, C, D) mod 360, angle(A, D, B) == angle(C, D, G) mod 360, angle(D, B, A) == angle(D, G, C) mod 360, log(distance(A, B)) + log(distance(C, D)) == log(distance(C, G)) + log(distance(A, D)), log(distance(A, D)) + log(distance(D, G)) == log(distance(C, D)) + log(distance(B, D)), log(distance(B, D)) + log(distance(C, G)) == log(distance(D, G)) + log(distance(A, B))
By similar_triangle_basic_properties on B, D, A, G, D, C we get not_collinear(A, B, D), not_collinear(C, D, G), angle(B, D, A) == angle(G, D, C) mod 360, angle(D, A, B) == angle(D, C, G) mod 360, angle(A, B, D) == angle(C, G, D) mod 360, log(distance(B, D)) + log(distance(C, D)) == log(distance(D, G)) + log(distance(A, D)), log(distance(A, D)) + log(distance(C, G)) == log(distance(C, D)) + log(distance(A, B)), log(distance(A, B)) + log(distance(D, G)) == log(distance(C, G)) + log(distance(B, D))
By power_of_a_point_on_circle on F, Circle(A, C, D) we get 0 == power_of_a_point(F, Circle(A, C, D))
By external_angle_bisector_definition_v0_r on C, H, F, G we get Line(G, H) == external_angle_bisector(C, G, F)
By external_angle_bisector_definition_v0_r on C, B, G, F we get Line(B, F) == external_angle_bisector(C, F, G)
By internal_angle_bisector_definition_v0_r on H, F, H, G we get Line(F, G) == internal_angle_bisector(H, G, H)
By power_of_a_point_in_circle on G, Circle(C, D, E) we get 0 == power_of_a_point(G, Circle(C, D, E))
By anti_similar_triangle_basic_properties on C, D, G, C, F, B we get not_collinear(C, D, G), not_collinear(B, C, F), angle(C, D, G) == 0 - angle(C, F, B) mod 360, angle(D, G, C) == 0 - angle(F, B, C) mod 360, angle(G, C, D) == 0 - angle(B, C, F) mod 360, log(distance(C, D)) + log(distance(B, F)) == log(distance(C, F)) + log(distance(D, G)), log(distance(B, F)) + log(distance(C, G)) == log(distance(D, G)) + log(distance(B, C)), log(distance(B, C)) + log(distance(C, D)) == log(distance(C, G)) + log(distance(C, F))
By similar_triangle_basic_properties on F, A, C, F, G, B we get not_collinear(A, C, F), not_collinear(B, F, G), angle(F, A, C) == angle(F, G, B) mod 360, angle(A, C, F) == angle(G, B, F) mod 360, angle(B, F, G) == angle(C, F, A) mod 360, log(distance(A, F)) + log(distance(B, G)) == log(distance(F, G)) + log(distance(A, C)), log(distance(A, C)) + log(distance(B, F)) == log(distance(B, G)) + log(distance(C, F)), log(distance(B, F)) + log(distance(A, F)) == log(distance(C, F)) + log(distance(F, G))
By internal_angle_bisector_definition_v0_r on G, A, H, F we get Line(A, F) == internal_angle_bisector(G, F, H)
By internal_angle_bisector_definition_v0_r on G, F, G, H we get Line(F, H) == internal_angle_bisector(G, H, G)
By power_of_a_point_in_circle on D, Circle(C, D, E) we get 0 == power_of_a_point(D, Circle(C, D, E))
By power_of_a_point_in_circle on E, Circle(B, C, E) we get 0 == power_of_a_point(E, Circle(B, C, E))
By anti_similar_triangle_basic_properties on A, E, B, G, F, B we get not_collinear(A, B, E), not_collinear(B, F, G), angle(A, E, B) == 0 - angle(G, F, B) mod 360, angle(E, B, A) == 0 - angle(F, B, G) mod 360, angle(B, A, E) == 0 - angle(B, G, F) mod 360, log(distance(A, E)) + log(distance(B, F)) == log(distance(F, G)) + log(distance(B, E)), log(distance(B, E)) + log(distance(B, G)) == log(distance(B, F)) + log(distance(A, B)), log(distance(A, B)) + log(distance(F, G)) == log(distance(B, G)) + log(distance(A, E))
By power_of_a_point_in_circle on D, Circle(A, B, D) we get 0 == power_of_a_point(D, Circle(A, B, D))
By power_of_a_point_in_circle on F, Circle(B, C, E) we get 0 == power_of_a_point(F, Circle(B, C, E))
By anti_similar_triangle_basic_properties on C, B, F, C, G, D we get not_collinear(B, C, F), not_collinear(C, D, G), angle(C, B, F) == 0 - angle(C, G, D) mod 360, angle(B, F, C) == 0 - angle(G, D, C) mod 360, angle(F, C, B) == 0 - angle(D, C, G) mod 360, log(distance(B, C)) + log(distance(D, G)) == log(distance(C, G)) + log(distance(B, F)), log(distance(B, F)) + log(distance(C, D)) == log(distance(D, G)) + log(distance(C, F)), log(distance(C, D)) + log(distance(B, C)) == log(distance(C, F)) + log(distance(C, G))
By similar_triangle_basic_properties on F, G, A, F, B, C we get not_collinear(A, F, G), not_collinear(B, C, F), angle(F, B, C) == angle(F, G, A) mod 360, angle(B, C, F) == angle(G, A, F) mod 360, angle(A, F, G) == angle(C, F, B) mod 360, log(distance(B, F)) + log(distance(A, G)) == log(distance(F, G)) + log(distance(B, C)), log(distance(A, G)) + log(distance(C, F)) == log(distance(B, C)) + log(distance(A, F)), log(distance(A, F)) + log(distance(B, F)) == log(distance(C, F)) + log(distance(F, G))
By internal_angle_bisector_definition_v0_r on F, G, H, C we get Line(C, G) == internal_angle_bisector(F, C, H)
By anti_similar_triangle_basic_properties on C, E, G, C, F, A we get not_collinear(C, E, G), not_collinear(A, C, F), angle(C, E, G) == 0 - angle(C, F, A) mod 360, angle(E, G, C) == 0 - angle(F, A, C) mod 360, angle(G, C, E) == 0 - angle(A, C, F) mod 360, log(distance(C, E)) + log(distance(A, F)) == log(distance(C, F)) + log(distance(E, G)), log(distance(A, F)) + log(distance(C, G)) == log(distance(E, G)) + log(distance(A, C)), log(distance(A, C)) + log(distance(C, E)) == log(distance(C, G)) + log(distance(C, F))
By anti_similar_triangle_basic_properties on E, A, B, F, G, B we get not_collinear(A, B, E), not_collinear(B, F, G), angle(E, A, B) == 0 - angle(F, G, B) mod 360, angle(A, B, E) == 0 - angle(G, B, F) mod 360, angle(B, E, A) == 0 - angle(B, F, G) mod 360, log(distance(A, E)) + log(distance(B, G)) == log(distance(F, G)) + log(distance(A, B)), log(distance(A, B)) + log(distance(B, F)) == log(distance(B, G)) + log(distance(B, E)), log(distance(B, E)) + log(distance(F, G)) == log(distance(B, F)) + log(distance(A, E))
By internal_angle_bisector_definition_v0_r on C, F, G, H we get Line(F, H) == internal_angle_bisector(C, H, G)
By internal_angle_bisector_definition_v0_r on H, C, F, G we get Line(C, G) == internal_angle_bisector(F, G, H)
By internal_angle_bisector_definition_v0_r on C, F, C, G we get Line(F, G) == internal_angle_bisector(C, G, C)
By internal_angle_bisector_definition_v0_r on F, C, G, H we get Line(C, H) == internal_angle_bisector(F, H, G)
By internal_angle_bisector_definition_v0_r on G, B, H, F we get Line(B, F) == internal_angle_bisector(G, F, H)
By power_of_a_point_in_circle on B, Circle(B, C, E) we get 0 == power_of_a_point(B, Circle(B, C, E))
By power_of_a_point_in_circle on C, Circle(B, C, E) we get 0 == power_of_a_point(C, Circle(B, C, E))
By internal_angle_bisector_definition_v0_r on F, H, F, G we get Line(G, H) == internal_angle_bisector(F, G, F)
By external_angle_bisector_definition_v0_r on G, A, G, F we get Line(A, F) == external_angle_bisector(G, F, G)
By power_of_a_point_on_circle on C, Circle(C, D, E) we get 0 == power_of_a_point(C, Circle(C, D, E))
By internal_angle_bisector_definition_v0_r on center(d), A, center(d), J we get Line(A, J) == internal_angle_bisector(center(d), J, center(d))
By power_of_a_point_in_circle on C, Circle(A, C, D) we get 0 == power_of_a_point(C, Circle(A, C, D))
By internal_angle_bisector_definition_v0_r on C, H, G, F we get Line(F, H) == internal_angle_bisector(C, F, G)
By internal_angle_bisector_definition_v0_r on H, F, G, C we get Line(C, F) == internal_angle_bisector(G, C, H)
By internal_angle_bisector_definition_v0_r on H, C, H, G we get Line(C, G) == internal_angle_bisector(H, G, H)
By power_of_a_point_on_circle on A, Circle(A, B, D) we get 0 == power_of_a_point(A, Circle(A, B, D))
By internal_angle_bisector_definition_v0_r on G, H, G, C we get Line(C, H) == internal_angle_bisector(G, C, G)
By internal_angle_bisector_definition_v0_r on G, C, G, H we get Line(C, H) == internal_angle_bisector(G, H, G)
By internal_angle_bisector_definition_v0_r on C, H, C, G we get Line(G, H) == internal_angle_bisector(C, G, C)
By power_of_a_point_on_circle on D, Circle(A, C, D) we get 0 == power_of_a_point(D, Circle(A, C, D))
By power_of_a_point_on_circle on B, Circle(A, B, D) we get 0 == power_of_a_point(B, Circle(A, B, D))
By internal_angle_bisector_definition_v0_r on G, H, G, F we get Line(F, H) == internal_angle_bisector(G, F, G)
By internal_angle_bisector_definition_v0_r on G, C, G, F we get Line(C, F) == internal_angle_bisector(G, F, G)
By power_of_a_point_on_circle on E, Circle(A, B, D) we get 0 == power_of_a_point(E, Circle(A, B, D))
By internal_angle_bisector_definition_v0_r on J, center(d), J, A we get Line(A, center(d)) == internal_angle_bisector(J, A, J)
By internal_angle_bisector_definition_v0_r on G, F, G, C we get Line(C, F) == internal_angle_bisector(G, C, G)
By internal_angle_bisector_definition_v0_r on A, center(d), A, J we get Line(J, center(d)) == internal_angle_bisector(A, J, A)
By sas_anti_similarity on C, A, B, F, A, E we get anti_similar_triangles(A, B, C, A, E, F)
By altitude_definition on D, G, F, altitude(D, C, G) we get altitude(D, C, G) == altitude(D, F, G)
By sas_anti_similarity on C, B, G, E, B, D we get anti_similar_triangles(B, C, G, B, E, D)
By sas_anti_similarity on A, G, B, E, G, D we get anti_similar_triangles(A, B, G, E, D, G)
By sas_anti_similarity on D, B, F, A, B, C we get anti_similar_triangles(A, B, C, D, B, F)
By anti_similar_triangle_basic_properties on F, G, A, D, G, C we get not_collinear(A, F, G), not_collinear(C, D, G), angle(F, G, A) == 0 - angle(D, G, C) mod 360, angle(G, A, F) == 0 - angle(G, C, D) mod 360, angle(A, F, G) == 0 - angle(C, D, G) mod 360, log(distance(D, G)) + log(distance(A, G)) == log(distance(F, G)) + log(distance(C, G)), log(distance(A, G)) + log(distance(C, D)) == log(distance(C, G)) + log(distance(A, F)), log(distance(A, F)) + log(distance(D, G)) == log(distance(C, D)) + log(distance(F, G))
By altitude_definition on E, G, H, altitude(E, C, G) we get altitude(E, C, G) == altitude(E, G, H)
By altitude_definition on D, F, H, altitude(D, C, G) we get altitude(D, C, G) == altitude(D, F, H)
By altitude_definition on D, G, H, altitude(D, C, G) we get altitude(D, C, G) == altitude(D, G, H)
By altitude_definition on D, H, C, altitude(D, C, G) we get altitude(D, C, G) == altitude(D, C, H)
By sas_anti_similarity on B, C, A, E, C, D we get anti_similar_triangles(A, B, C, D, E, C)
By sas_anti_similarity on A, B, G, E, B, F we get anti_similar_triangles(A, B, G, E, B, F)
By anti_similar_triangle_basic_properties on F, B, G, E, C, G we get not_collinear(B, F, G), not_collinear(C, E, G), angle(F, B, G) == 0 - angle(E, C, G) mod 360, angle(B, G, F) == 0 - angle(C, G, E) mod 360, angle(G, F, B) == 0 - angle(G, E, C) mod 360, log(distance(B, F)) + log(distance(C, G)) == log(distance(C, E)) + log(distance(B, G)), log(distance(B, G)) + log(distance(E, G)) == log(distance(C, G)) + log(distance(F, G)), log(distance(E, G)) + log(distance(B, F)) == log(distance(F, G)) + log(distance(C, E))
By sas_anti_similarity on C, B, A, F, B, D we get anti_similar_triangles(A, B, C, D, B, F)
By altitude_definition on E, F, G, altitude(E, C, G) we get altitude(E, C, G) == altitude(E, F, G)
By sas_anti_similarity on A, C, B, D, C, E we get anti_similar_triangles(A, B, C, D, E, C)
By sas_anti_similarity on B, A, G, D, A, F we get anti_similar_triangles(A, B, G, A, D, F)
By anti_similar_triangle_basic_properties on A, G, F, C, G, D we get not_collinear(A, F, G), not_collinear(C, D, G), angle(A, G, F) == 0 - angle(C, G, D) mod 360, angle(G, F, A) == 0 - angle(G, D, C) mod 360, angle(F, A, G) == 0 - angle(D, C, G) mod 360, log(distance(A, G)) + log(distance(D, G)) == log(distance(C, G)) + log(distance(F, G)), log(distance(D, G)) + log(distance(A, F)) == log(distance(F, G)) + log(distance(C, D)), log(distance(A, F)) + log(distance(C, G)) == log(distance(C, D)) + log(distance(A, G))
By sas_anti_similarity on E, A, F, B, A, C we get anti_similar_triangles(A, B, C, A, E, F)
By sas_anti_similarity on B, A, C, E, A, F we get anti_similar_triangles(A, B, C, A, E, F)
By altitude_definition on E, H, C, altitude(E, C, G) we get altitude(E, C, G) == altitude(E, C, H)
By sas_anti_similarity on G, B, A, F, B, E we get anti_similar_triangles(A, B, G, E, B, F)
By altitude_definition on B, G, F, f we get f == altitude(B, F, G)
By sas_anti_similarity on G, B, C, D, B, E we get anti_similar_triangles(B, C, G, B, E, D)
By sas_anti_similarity on E, B, D, C, B, G we get anti_similar_triangles(B, C, G, B, E, D)
By sas_anti_similarity on G, A, C, E, A, D we get anti_similar_triangles(A, C, G, A, D, E)
By sas_anti_similarity on G, A, B, F, A, D we get anti_similar_triangles(A, B, G, A, D, F)
By anti_similar_triangle_basic_properties on G, C, E, G, B, F we get not_collinear(C, E, G), not_collinear(B, F, G), angle(G, C, E) == 0 - angle(G, B, F) mod 360, angle(C, E, G) == 0 - angle(B, F, G) mod 360, angle(E, G, C) == 0 - angle(F, G, B) mod 360, log(distance(B, G)) + log(distance(C, E)) == log(distance(C, G)) + log(distance(B, F)), log(distance(B, F)) + log(distance(E, G)) == log(distance(C, E)) + log(distance(F, G)), log(distance(E, G)) + log(distance(B, G)) == log(distance(F, G)) + log(distance(C, G))
By altitude_definition on B, G, H, f we get f == altitude(B, G, H)
By sas_anti_similarity on E, B, F, A, B, G we get anti_similar_triangles(A, B, G, E, B, F)
By sas_anti_similarity on D, A, F, B, A, G we get anti_similar_triangles(A, B, G, A, D, F)
By altitude_definition on A, H, G, f we get f == altitude(A, G, H)
By sas_anti_similarity on B, G, A, D, G, E we get anti_similar_triangles(A, B, G, E, D, G)
By altitude_definition on D, F, C, altitude(D, C, G) we get altitude(D, C, F) == altitude(D, C, G)
By sas_anti_similarity on D, A, E, C, A, G we get anti_similar_triangles(A, C, G, A, D, E)
By sas_anti_similarity on E, C, D, B, C, A we get anti_similar_triangles(A, B, C, D, E, C)
By sas_anti_similarity on F, B, D, C, B, A we get anti_similar_triangles(A, B, C, D, B, F)
By altitude_definition on E, F, C, altitude(E, C, G) we get altitude(E, C, F) == altitude(E, C, G)
By sas_anti_similarity on F, A, E, C, A, B we get anti_similar_triangles(A, B, C, A, E, F)
By sas_anti_similarity on D, C, E, A, C, B we get anti_similar_triangles(A, B, C, D, E, C)
By sas_anti_similarity on A, B, C, D, B, F we get anti_similar_triangles(A, B, C, D, B, F)
By sas_anti_similarity on D, G, E, B, G, A we get anti_similar_triangles(A, B, G, E, D, G)
By sas_anti_similarity on D, B, E, G, B, C we get anti_similar_triangles(B, C, G, B, E, D)
By sas_anti_similarity on E, A, D, G, A, C we get anti_similar_triangles(A, C, G, A, D, E)
By sas_anti_similarity on F, A, D, G, A, B we get anti_similar_triangles(A, B, G, A, D, F)
By sas_anti_similarity on E, G, D, A, G, B we get anti_similar_triangles(A, B, G, E, D, G)
By sas_anti_similarity on F, B, E, G, B, A we get anti_similar_triangles(A, B, G, E, B, F)
By altitude_definition on E, H, F, altitude(E, C, G) we get altitude(E, C, G) == altitude(E, F, H)
By altitude_definition on A, G, F, f we get f == altitude(A, F, G)
By sas_anti_similarity on C, A, G, D, A, E we get anti_similar_triangles(A, C, G, A, D, E)
By power_of_a_point_definition on F, H, G, c we get log(power_of_a_point(F, c)) == log(distance(F, H)) + log(distance(F, G))
By power_of_a_point_definition on C, G, H, c we get log(power_of_a_point(C, c)) == log(distance(C, G)) + log(distance(C, H))
By power_of_a_point_definition on center(d), A, J, d we get log(power_of_a_point(center(d), d)) == log(distance(A, center(d))) + log(distance(J, center(d)))
