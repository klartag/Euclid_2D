Assumptions:
A, B, C, D, E, F, G, H, I, J, K: Point
f, g, h, i, j, k, l: Line
c: Circle
distinct(A, B, C, D, E, F, G, H, I, J, K)
distinct(f, g, h, i, j, k, l)
f == Line(A, B)
g == Line(B, C)
h == Line(A, C)
D == projection(A, g)
E == projection(B, h)
F == projection(C, f)
i == Line(A, D)
j == Line(B, E)
k == Line(C, F)
G == line_intersection(i, j)
H == midpoint(C, G)
I == midpoint(A, C)
l == Line(D, I)
c == Circle(A, H, I)
J in k, c
K == line_intersection(k, l)

Embedding:
C := {"x": "-1.2632684815278503176472213453962467610836029052734375", "y": "-0.176341183576381455022641375762759707868099212646484375"}
A := {"x": "0.85571616212069490092773094147560186684131622314453125", "y": "-0.1591162540747305953470203121469239704310894012451171875"}
h := {"point": {"x": "0.85571616212069490092773094147560186684131622314453125", "y": "-0.1591162540747305953470203121469239704310894012451171875"}, "direction": {"x": "-2.11898464364854521857495228687184862792491912841796875", "y": "-0.0172249295016508596756210636158357374370098114013671875"}}
B := {"x": "-0.1750086946379465213663451095271739177405834197998046875", "y": "-2.64740572114830552408193398150615394115447998046875"}
E := {"x": "-0.19516621075619352740244365240213066685369684759535971029294486628079887936224866594207779076111824763408405616143928145441554732337411697632036565283075895281037394425977212273968021018786463155593786444149273753597484339534675839358985851542843299090158805633350707748111868501362248594608172663468260189037059288220343258328874481984648618433868963958425734402611861299323339336344115592053896448739641456784877663934235904366227396521441097078043099050047474479156246158591738105585898100419046069909870575681272924516133707332139341848951642622963277648193616784822448872419331488071336448830786676807804033967708710987476969906870157037751509941272055946913476222050787717390111339379488521374631245309801300108970691633924231993979801146940290419361131170453278992422397333739133796971173521227803375008134200324410390925912446553980347196495759811208702804519337460078400433439627102887141823580117430999791867977532815291262364790764263489537290196722949242533293750763771015339731597839452313817369983166628976146348652408178414222943813951386262118435634229637015455545849140013777465903009126761120481440810823803096938082035472767008150816452483489897222659968914661997776415683537280901587528120054497723277118363298513784663814408451944541513271985540007566414618000262056923891707984094746252029951819556432677270865168464924910797034980853841059936202624725294443098265427988874785749877379118457916236985994338540325359190172200021696264839136722494858214690355576100228145496350845766446184299418693206364040891042892488386730835942872846576600219576526728115284887464991627266544532930210500477973499008788639720201962990700119689636387917454169460739815661019519867878685757485279886197150513258743222942511200659837497204557341249857470946096414178206914215738354126514685077940698923753218710944973856610678559654075543125750174032001535734379289910627611434225571258376571062843640911912091663701647018578783587963856641828401289001924711348833627481938050399122719693702478156", "y": "-0.16765872975599101537956051031630412760352183459027670996276271951296920622665477412817052762641530109936847598290990892789175903024164123000128442598536083897444592386750756311740862956035032114573647614327558957554656841589201629796142211073296223850900527498719198055114911114930571146338532368110141197532395079490912616149557702815104184093747597252133011306555571164628996478056449369573648141428624529720100720247615438089365693389508762111380304123872955049114878402202531424291767979822580871432565794745370249709455307599807132619780116406775059928892775976070819636038731738609089723320341225858346095816361182653117879700962957742349630202516739283617525916811441552613573994754474316168238931005779940898055069981249375532298830301937586692627928332328455263133981359587272038346530177701525623970192562908963098528143721027333697767788759436722402684789354521496219502872063981342164722493830699206722633822603530036526999353463459536007337707074656126193171408039210382499813031999319284852506345943309777548654235636634406210744876513060979414896271662415079735839269641323466001354076017794500747150354928186448216338504825294234660095220291348379183360804211071227684719261931126481048674153822804300013413623622112679701175119515831014403217079997832236634909025199006608726260326487837746369650568316252651517596689919742220290693825121468146888946094038861339248958174935578305048053791634657389745245686043682855563297833701744852488014940022016185021578875116381733590735124308575146021561040437099933085222261671126304959950510941998355899081548094944348028141414008270165119811181565441402552831375533728098862760436412225886898333243734140147790938120971437233560045546921593006598411593451136598161189092889432867071570894701430457043540659417553667568498389361737899616874321829951713863965076406524968377168746373502924670621083548596040801033754512584252587667376078344116374731143640654754320900189167201412710070278295001083424647275733781147969070345566128086860330041"}
j := {"point": {"x": "-0.1750086946379465213663451095271739177405834197998046875", "y": "-2.64740572114830552408193398150615394115447998046875"}, "direction": {"x": "-0.020157516118247006036098542874956749113113427795555022792944866280798879362248665942077790761118247634084056161439281454415547323374116976320365652830758952810373944259772122739680210187864631555937864441492737535974843395346758393589858515428432990901588056333507077481118685013622485946081726634682601890370592882203432583288744819846486184338689639584257344026118612993233393363441155920538964487396414567848776639342359043662273965214410970780430990500474744791562461585917381055858981004190460699098705756812729245161337073321393418489516426229632776481936167848224488724193314880713364488307866768078040339677087109874769699068701570377515099412720559469134762220507877173901113393794885213746312453098013001089706916339242319939798011469402904193611311704532789924223973337391337969711735212278033750081342003244103909259124465539803471964957598112087028045193374600784004334396271028871418235801174309997918679775328152912623647907642634895372901967229492425332937507637710153397315978394523138173699831666289761463486524081784142229438139513862621184356342296370154555458491400137774659030091267611204814408108238030969380820354727670081508164524834898972226599689146619977764156835372809015875281200544977232771183632985137846638144084519445415132719855400075664146180002620569238917079840947462520299518195564326772708651684649249107970349808538410599362026247252944430982654279888747857498773791184579162369859943385403253591901722000216962648391367224948582146903555761002281454963508457664461842994186932063640408910428924883867308359428728465766002195765267281152848874649916272665445329302105004779734990087886397202019629907001196896363879174541694607398156610195198678786857574852798861971505132587432229425112006598374972045573412498574709460964141782069142157383541265146850779406989237532187109449738566106785596540755431257501740320015357343792899106276114342255712583765710628436409119120916637016470185787835879638566418284012890019247113488336274819380503991227196937024781561", "y": "2.4797469913923145087023734711898498135509581458784732900372372804870307937733452258718294723735846989006315240170900910721082409697583587699987155740146391610255540761324924368825913704396496788542635238567244104244534315841079837020385778892670377614909947250128080194488508888506942885366146763188985880246760492050908738385044229718489581590625240274786698869344442883537100352194355063042635185857137547027989927975238456191063430661049123788861969587612704495088512159779746857570823202017741912856743420525462975029054469240019286738021988359322494007110722402392918036396126826139091027667965877414165390418363881734688212029903704225765036979748326071638247408318855844738642600524552568383176106899422005910194493001875062446770116969806241330737207166767154473686601864041272796165346982229847437602980743709103690147185627897266630223221124056327759731521064547850378049712793601865783527750616930079327736617739646996347300064653654046399266229292534387380682859196078961750018696800068071514749365405669022245134576436336559378925512348693902058510372833758492026416073035867653399864592398220549925284964507181355178366149517470576533990477970865162081663919578892877231528073806887351895132584617719569998658637637788732029882488048416898559678292000216776336509097480099339127373967351216225363034943168374734848240331008025777970930617487853185311105390596113866075104182506442169495194620836534261025475431395631714443670216629825514751198505997798381497842112488361826640926487569142485397843895956290006691477773832887369504004948905800164410091845190505565197185858599172983488018881843455859744716862446627190113723956358777411310166675626585985220906187902856276643995445307840699340158840654886340183881090711056713292842910529856954295645934058244633243150161063826210038312567817004828613603492359347503162283125362649707532937891645140395919896624548741574741233262392165588362526885635934524567909981083279858728992972170499891657535272426621885203092965443387191313966996"}}
g := {"point": {"x": "-0.1750086946379465213663451095271739177405834197998046875", "y": "-2.64740572114830552408193398150615394115447998046875"}, "direction": {"x": "-1.0882597868899037962808762358690728433430194854736328125", "y": "2.471064537571924069059292605743394233286380767822265625"}}
D := {"x": "-0.92540096501769943311667969834211256849251721649252284630833258356705329327281415949193404224730541622660242160381461787549956419130059499308882984306871902921651871488540744952267897743832995636099492407725867913838795943769639370290194041042816115508275402098489425390955701119859653835453819760144793955144270390935582265015547304887492903260021338143222384924284688315969656851071586164457032762310261711502219483046086226002535714943022861784041675133112356777038135680878761889498931497263626115766859794298305048903499123183204568388806296013115978105240332915537230440073392635346737668476502837288001300064520331631045598189887694117855832179830495203738359402006442211295682466876624196722909418068402949779266014870149953636351383592949775258669374731476496508263777331202952260675733977645852940550086575833535096696615179426405936039322954063073019168298739417084939990375138349619467359316672543876646742766554997060184214219487164511877977484255749681836919047567284628197085151382364601502683451643275153071851277754960835535382808111436105570360485767281054945202003762274555259738114074176205516856584062856798403012136560363108927326452865258435330118689760196611785337205827429735614645184691765815110168175576062509694639286574264261092145248893008805281301251414648076948805027910614894140536973792434389481821606076991662214929953454419940607300360177809932834249252448013156926988446475443287957249848721925055682076186304413714341813759544217479377334379288306259734130103495131708493144189894336013561702277423869224019562033073807481778223803252010332153354853409192679361059184650445563229908020584755607995432002569726616420922753771521404723119874924289483105128311895893504240504848162248054534800351340221257759551163081932547546958204284070957747174259525653799667787799938343486627914882884410602562606756646923977879217706153791111144187632405367121427668904910819362126435030085397970464442030032074623634271773129250043622410769339644075994418572983350239622169651", "y": "-0.94352237367781644696260725013513357760778860906710787787347278958273538889914760879943742683379536243890783026867971896323283579407244370785702477909990528516614155028832765718033248161067942305952112622025226154872195975268159457873594257236835054597235420485326777317768158988212009589618815313308614258523429796804078683690005090103443568239888391561998208240269595649104192961113966203696940124077528411474119913601230206901587284152945901934733746685502367258315624412704956217227289388034521943164716018811966574801809554900487385913920227191429614833786247038717888958142969335854940895126936593493222664595869549323124089965609284898418902618770380580600094119300959113629783592958313812509368194729251872102791244508005834352834132748327852239217062637632711834318138303969103817130036439654804022402664060499196676456751818981461007294180844466438355672891785100094023317873170350104040354378692395127658537481980098367924453156421306732468004197567101560619512898894883538402385981542801030414253154944142242479384622187922028237086280844884720096839958139284264215036154753095217759123868294142528271220593531462586483069083854669126978432360015147704670613163505662101694387199104173459966564275533914238362567611924775328492220387141835313382517113281164437624472813043339421564347403501175768468437497059669516301521212257263536303766254161954736322804943233961023813843098725563072374745575698526988562814832914158892624609203343810363158930602019637742095900938990998718827630542502076775903399981240523766575610878508760460621242223624212622609083206662807335465934846633271173593564957996304660414587433087784059909299378332456092783375058489710908424940601664276027295770722078109126700132360776613538317071068330553043266850811413075713972610484048156499858107706361524588222495286077426146487738651435895977800874553482791189389298412994035198451492905870085362917577628075311000428532600468655400443951189491383655972252211216905879941502727825883178925253970302424896486863661"}
i := {"point": {"x": "0.85571616212069490092773094147560186684131622314453125", "y": "-0.1591162540747305953470203121469239704310894012451171875"}, "direction": {"x": "-1.7811171271383943340444106398177144353338334396370540963083325835670532932728141594919340422473054162266024216038146178754995641913005949930888298430687190292165187148854074495226789774383299563609949240772586791383879594376963937029019404104281611550827540209848942539095570111985965383545381976014479395514427039093558226501554730488749290326002133814322238492428468831596965685107158616445703276231026171150221948304608622600253571494302286178404167513311235677703813568087876188949893149726362611576685979429830504890349912318320456838880629601311597810524033291553723044007339263534673766847650283728800130006452033163104559818988769411785583217983049520373835940200644221129568246687662419672290941806840294977926601487014995363635138359294977525866937473147649650826377733120295226067573397764585294055008657583353509669661517942640593603932295406307301916829873941708493999037513834961946735931667254387664674276655499706018421421948716451187797748425574968183691904756728462819708515138236460150268345164327515307185127775496083553538280811143610557036048576728105494520200376227455525973811407417620551685658406285679840301213656036310892732645286525843533011868976019661178533720582742973561464518469176581511016817557606250969463928657426426109214524889300880528130125141464807694880502791061489414053697379243438948182160607699166221492995345441994060730036017780993283424925244801315692698844647544328795724984872192505568207618630441371434181375954421747937733437928830625973413010349513170849314418989433601356170227742386922401956203307380748177822380325201033215335485340919267936105918465044556322990802058475560799543200256972661642092275377152140472311987492428948310512831189589350424050484816224805453480035134022125775955116308193254754695820428407095774717425952565379966778779993834348662791488288441060256260675664692397787921770615379111114418763240536712142766890491081936212643503008539797046444203003207462363427177312925004362241076933964407599441857298335023962216965", "y": "-0.78440611960308585161558693798820960717669920782199069037347278958273538889914760879943742683379536243890783026867971896323283579407244370785702477909990528516614155028832765718033248161067942305952112622025226154872195975268159457873594257236835054597235420485326777317768158988212009589618815313308614258523429796804078683690005090103443568239888391561998208240269595649104192961113966203696940124077528411474119913601230206901587284152945901934733746685502367258315624412704956217227289388034521943164716018811966574801809554900487385913920227191429614833786247038717888958142969335854940895126936593493222664595869549323124089965609284898418902618770380580600094119300959113629783592958313812509368194729251872102791244508005834352834132748327852239217062637632711834318138303969103817130036439654804022402664060499196676456751818981461007294180844466438355672891785100094023317873170350104040354378692395127658537481980098367924453156421306732468004197567101560619512898894883538402385981542801030414253154944142242479384622187922028237086280844884720096839958139284264215036154753095217759123868294142528271220593531462586483069083854669126978432360015147704670613163505662101694387199104173459966564275533914238362567611924775328492220387141835313382517113281164437624472813043339421564347403501175768468437497059669516301521212257263536303766254161954736322804943233961023813843098725563072374745575698526988562814832914158892624609203343810363158930602019637742095900938990998718827630542502076775903399981240523766575610878508760460621242223624212622609083206662807335465934846633271173593564957996304660414587433087784059909299378332456092783375058489710908424940601664276027295770722078109126700132360776613538317071068330553043266850811413075713972610484048156499858107706361524588222495286077426146487738651435895977800874553482791189389298412994035198451492905870085362917577628075311000428532600468655400443951189491383655972252211216905879941502727825883178925253970302424896486863661"}}
I := {"x": "-0.203776159703577708359745201960322447121143341064453125", "y": "-0.16772871882555602518483084395484183914959430694580078125"}
G := {"x": "-0.19148670728070271356376711962392509130806318671656386081926995527825000653904484734626166834548284958257425765115624494762310806254281718360202302718536812994496694529431354235902129580435438501457883662935864996773524476335011685761768479211556590694165146345280208594455058808796598897957914643923834619840640837089264382061366612407860748404802010780298981144763465879157076495784657010212394703653368596061109086828930902021850878481144668824207336094925813233587232688221201930704459099957186876904991164425903873899762165364093786619732121611449193120637428552763904622640510547345671832348042797667452166500888119334907518690899071813064285258213996769781039695620565525947567958432545772993322702110549758444249929034720118414656232980197135798948424481458768087484037403893158802467630299919138674619839536876524796817270310935663576641568855363457769533869334161503240110522018736546284017894294136536135510150711261631072742761385971788678091230460001186793255447082331216916518918105789920688907656926227996943967391695518466530200413338130470897972123959913532501793894922333694185847850621854750069175776463962619169240523083203838077409714434780339925245743286789528076025623549743537142212013795325162779344919931406705092546602063391660147203036731767953651909138805739352938234555600319518273366263597718833845570324511277609234538777087093435156528929267928472573128215527930658727955324976232061919815262212207872700966615168119830421293246186683535970983836826541627587746011442439093238960056811249459247443363413987104739108548932485235473383116049018423165410638703984330745482089305293038590066429536103382867142034160445589238263386992342090206078542885400927668284626206561837322076999441181163798281438166380030377004629890032762666862706420575978662162394833890125896320311361570933381521334937175824025111570337002118800479831954642361416073252291965764935969058167468442902121468383323258616239951799303712850740019536820074634922247936584553237537787998172639751967826", "y": "-0.62030565409139855610753364008084582055092417083648757170573128327522826176847218068741784598526831653427952590102132859780451610896480637983463707882454816565922453165250954734021666453745146209907417222970470035112083438538881585160555608648862785735659482166019957066266782456006115070004135637773878122888391103228070771396422715984349649527207488111254996731205477977198199809831064089308772281005029579392952538514687503170318129434267007995028698926774366143651582880459428373422354631007310626027310025252274124863282472698772037674015281809991239271209619088049542454756061216860622720432563496213022493554414950996682233134533481842178976595543995528499303957878231598238065419010028317458045820401911884217349271513534899642166434730830340336386151829181254546045910704414311947594331104491891412803406730516939526822196851732926077568373344846851016914482730162912672088633578156923263812140953771106496841072960329882401102839039398372988835896643134621121838564753493222783201057753031550855725874964211390122442612804663999739504325364227878293324067525216135873678285628383200545141807860882470366940026760608213510832443668275039160641829982541235559440926415192294137808073996039912698073119559445574782051049324244327994974889171954136363879963432612154014830580556890083169603410080097929551486224546719302366985096726204501889717562155146102092088708089949244870625365046835706717815708667747218431872131921627677844838874670094092674410452721479768741567819024234358064869041426002762346002011031627281931927405600456395875535697539004962943817765327607368569037831539357197586446990551358799204218856883963769339666357889523115108371911628316489759980875113377357216160463615447352692911099300566314834924616568488717765839333318876966343796893605004891897186910715390002915577227857555505617604572031252375228531347074590211631318866012505778734038303428431479835906386903399129401313170400115034529382792276128644946445752465171785214070863032177630479478550192178730467754571"}
H := {"x": "-0.72737759440427651560549423251008592619583304599500068040963497763912500326952242367313083417274142479128712882557812247381155403127140859180101151359268406497248347264715677117951064790217719250728941831467932498386762238167505842880884239605778295347082573172640104297227529404398299448978957321961917309920320418544632191030683306203930374202401005390149490572381732939578538247892328505106197351826684298030554543414465451010925439240572334412103668047462906616793616344110600965352229549978593438452495582212951936949881082682046893309866060805724596560318714276381952311320255273672835916174021398833726083250444059667453759345449535906532142629106998384890519847810282762973783979216272886496661351055274879222124964517360059207328116490098567899474212240729384043742018701946579401233815149959569337309919768438262398408635155467831788320784427681728884766934667080751620055261009368273142008947147068268067755075355630815536371380692985894339045615230000593396627723541165608458259459052894960344453828463113998471983695847759233265100206669065235448986061979956766250896947461166847092923925310927375034587888231981309584620261541601919038704857217390169962622871643394764038012811774871768571106006897662581389672459965703352546273301031695830073601518365883976825954569402869676469117277800159759136683131798859416922785162255638804617269388543546717578264464633964236286564107763965329363977662488116030959907631106103936350483307584059915210646623093341767985491918413270813793873005721219546619480028405624729623721681706993552369554274466242617736691558024509211582705319351992165372741044652646519295033214768051691433571017080222794619131693496171045103039271442700463834142313103280918661038499720590581899140719083190015188502314945016381333431353210287989331081197416945062948160155680785466690760667468587912012555785168501059400239915977321180708036626145982882467984529083734221451060734191661629308119975899651856425370009768410037317461123968292276618768893999086319875983913", "y": "-0.39832341883389000556508750792180276420951169174148597335286564163761413088423609034370892299263415826713976295051066429890225805448240318991731853941227408282961226582625477367010833226872573104953708611485235017556041719269440792580277804324431392867829741083009978533133391228003057535002067818886939061444195551614035385698211357992174824763603744055627498365602738988599099904915532044654386140502514789696476269257343751585159064717133503997514349463387183071825791440229714186711177315503655313013655012626137062431641236349386018837007640904995619635604809544024771227378030608430311360216281748106511246777207475498341116567266740921089488297771997764249651978939115799119032709505014158729022910200955942108674635756767449821083217365415170168193075914590627273022955352207155973797165552245945706401703365258469763411098425866463038784186672423425508457241365081456336044316789078461631906070476885553248420536480164941200551419519699186494417948321567310560919282376746611391600528876515775427862937482105695061221306402331999869752162682113939146662033762608067936839142814191600272570903930441235183470013380304106755416221834137519580320914991270617779720463207596147068904036998019956349036559779722787391025524662122163997487444585977068181939981716306077007415290278445041584801705040048964775743112273359651183492548363102250944858781077573051046044354044974622435312682523417853358907854333873609215936065960813838922419437335047046337205226360739884370783909512117179032434520713001381173001005515813640965963702800228197937767848769502481471908882663803684284518915769678598793223495275679399602109428441981884669833178944761557554185955814158244879990437556688678608080231807723676346455549650283157417462308284244358882919666659438483171898446802502445948593455357695001457788613928777752808802286015626187614265673537295105815659433006252889367019151714215739917953193451699564700656585200057517264691396138064322473222876232585892607035431516088815239739275096089365233877285"}
c := {"center": {"x": "0.34184552487138001700701489503379852558682952329230600469418536330743020293022923168587628692559784276434265212923248133501327330836539366840275481595896223119975020619302233157423024556210437051350874009275815351272039169044510084272597715646165848679404785299556793536076279576258169126742127666391038907756756686772141708023935198189759838639141432270137054509350042177565494768545455357663203605440223353105311991551200916040027109049394079053651644685277543696655246824383700635063315261240031923255538779428142351338888512734017498808325000957280376925845679221623257021159035724589304252777970804243091314214172520003085367411885904425160871054147106093502463362945025101971251566695109556742902477842159094590968136948210308107188736306300461328502450729085667660696767019531486976137551358452930859660654977110589646273528134949734560186897518409609182725927466081515682811528060171821374610294923587118782541784572591535541625673886463114536563325385781028262721326104260022464810763254419423701706001922170775296843279980829242041230684792886691595674549895339425391937200648762719527672185932018905220908113371759633725761943054327333809114399049826255547527638721904885675541948838158647471545735496407043902231761047385649784213837037905136455372662046190154650069249284893154903574569946278800882924219973254081703949467065545029742924735509506944038766162763273557316407102313518229699733395328838446290789126240750719691121090399532043324424910793607810489800197402383195821331272697637745979807062453642620046466319145914643027708060788165523315176522870292430399999614530841443928949921524042426884728450746099847557874021860757594093139218419954122260579757711563063049609145251492980211695260277652579536178626264332126725197561116701136659049559513632574518263305943195171690959432357223933789114688855174063767500471488142121592310971635640932699191682515218077089574718381054224182901584279023341688835304737140584869842290908551472103673351753260961443991702675120738791544267", "y": "-2.1164052750399947226944647590490449163799776939626091617740983716661591943256109845389979706406752234385197813459635639635332249130063118729962068669554805560868202483177317111799024951008796764158353229151763361588610739384477675261912773546885792046684933959443631967197206604481481863962733203395224256500281777300681240393386461210495687212178575346503596296608850772795437250814028541901332313590871930910275419671871001306392279944645087323501637508765957687886011391021879960524282494569270092105577949992073460129753000300871856774872762813924977687168722269031673084826799883314087215228317834590707177363766321381503488353813453731914776500303754155973153077900556435618676396697635065468360272494278976138410351846471156882757819771038445314896471883066986494693210485383514719195222438723210989544767122960331566724230426931464748200631781696454300489135886729213148196209142699037494101765283996520542963475693802949705663916637298319663479256818406679063621412368197740935149588828648567683170129958620084188893815015141063750190599931270256219957406620657659958261314404968335829465148194274779537793931242533849918134757285836029392875723567294061156179871127455691155311603435831618852945618680316537912292865954589363388504224277617824667913476173731675597235610638695771156825374711821395067715870789533798677598794174986678360475151383476369143286311034529397623090763947686447412551932203739420007934433994681655454073968735596156959721949805450414087050173861305498488585076464738324205640452461769072020727837726604413029196682532162651102107080880770524276714701752322041463968787256179459987968436955903633278235690596157143960805385281437796029670157929716732957760042946502668158405736297918850162140723577616034392505644155451681004227022344845254128854137238184655484156627027614281774617650421686392677347459355787744324038138392234140187459237656313322466302190068113481491230465614837800737713915996239769009075008264270962370689705394627678791269297912391903607019581"}, "radius_squared": "4.095043343418179122135801053413554384431992465412991838821825501763527173862949733631844284368304399546098685007571831461815607447301399527672328395159455838620314145977844019877926911129816525970224661379769446738162748438530131400974986257611614521995527576714487967361854336578587786004644804387198606777587445007639039902483986998876710333829039861887016881190147525033083187401694162042725425370417537904799612938324863109191711939657999503609923142099657601775245219267701619791082357477186364813533944459990191145383786426082541355694863312767231404052605824531433810512919796225106427955286257089670884224968697169131460166410085157903930603098764545851004455637820811026639691475631528999777632248148700603779601870991556578327874632201126969170190970962690434468842326277556015294834137428535250627037652083535913513073988328181017889684802074663133087942379758959562498319686774528200249287046401232149673887347191010118672064067590134969858216673924307573866220140847222562563953657935229531208564868013693178377229664091921397579241613149776527100242237394898873377831095022351793818123680196632669135139516223323607956558332913781509404113152522527659317599666796715921620106592931026652193351897609537597251924608623999034424199022706594579255828036621453126649684344584476290738690435510959885040266008651333381469140682956378309549702338047598595011147127153496328986876882793834966577781210572593997021144887627492910073362649594191328778299113726914788708560650795627894423112119063330806494267765879590433430388365250441715402305930467226732607267170922502196276558432478622687744705213214166129390285941981724558258733045296878343165502734548924643443211665250944319706216811881174450242430323624174136947480062755832384061623923493254081492295370754851058244559955728061340659316409530842548440301719849926528106910058515040597558289203712503053758924585598060539192267066503715371789100151603631136915798299054701093254723000474972650784173390152687534942517558572910120166071"}
l := {"point": {"x": "-0.92540096501769943311667969834211256849251721649252284630833258356705329327281415949193404224730541622660242160381461787549956419130059499308882984306871902921651871488540744952267897743832995636099492407725867913838795943769639370290194041042816115508275402098489425390955701119859653835453819760144793955144270390935582265015547304887492903260021338143222384924284688315969656851071586164457032762310261711502219483046086226002535714943022861784041675133112356777038135680878761889498931497263626115766859794298305048903499123183204568388806296013115978105240332915537230440073392635346737668476502837288001300064520331631045598189887694117855832179830495203738359402006442211295682466876624196722909418068402949779266014870149953636351383592949775258669374731476496508263777331202952260675733977645852940550086575833535096696615179426405936039322954063073019168298739417084939990375138349619467359316672543876646742766554997060184214219487164511877977484255749681836919047567284628197085151382364601502683451643275153071851277754960835535382808111436105570360485767281054945202003762274555259738114074176205516856584062856798403012136560363108927326452865258435330118689760196611785337205827429735614645184691765815110168175576062509694639286574264261092145248893008805281301251414648076948805027910614894140536973792434389481821606076991662214929953454419940607300360177809932834249252448013156926988446475443287957249848721925055682076186304413714341813759544217479377334379288306259734130103495131708493144189894336013561702277423869224019562033073807481778223803252010332153354853409192679361059184650445563229908020584755607995432002569726616420922753771521404723119874924289483105128311895893504240504848162248054534800351340221257759551163081932547546958204284070957747174259525653799667787799938343486627914882884410602562606756646923977879217706153791111144187632405367121427668904910819362126435030085397970464442030032074623634271773129250043622410769339644075994418572983350239622169651", "y": "-0.94352237367781644696260725013513357760778860906710787787347278958273538889914760879943742683379536243890783026867971896323283579407244370785702477909990528516614155028832765718033248161067942305952112622025226154872195975268159457873594257236835054597235420485326777317768158988212009589618815313308614258523429796804078683690005090103443568239888391561998208240269595649104192961113966203696940124077528411474119913601230206901587284152945901934733746685502367258315624412704956217227289388034521943164716018811966574801809554900487385913920227191429614833786247038717888958142969335854940895126936593493222664595869549323124089965609284898418902618770380580600094119300959113629783592958313812509368194729251872102791244508005834352834132748327852239217062637632711834318138303969103817130036439654804022402664060499196676456751818981461007294180844466438355672891785100094023317873170350104040354378692395127658537481980098367924453156421306732468004197567101560619512898894883538402385981542801030414253154944142242479384622187922028237086280844884720096839958139284264215036154753095217759123868294142528271220593531462586483069083854669126978432360015147704670613163505662101694387199104173459966564275533914238362567611924775328492220387141835313382517113281164437624472813043339421564347403501175768468437497059669516301521212257263536303766254161954736322804943233961023813843098725563072374745575698526988562814832914158892624609203343810363158930602019637742095900938990998718827630542502076775903399981240523766575610878508760460621242223624212622609083206662807335465934846633271173593564957996304660414587433087784059909299378332456092783375058489710908424940601664276027295770722078109126700132360776613538317071068330553043266850811413075713972610484048156499858107706361524588222495286077426146487738651435895977800874553482791189389298412994035198451492905870085362917577628075311000428532600468655400443951189491383655972252211216905879941502727825883178925253970302424896486863661"}, "direction": {"x": "0.72162480531412172475693449638179012137137387542806972130833258356705329327281415949193404224730541622660242160381461787549956419130059499308882984306871902921651871488540744952267897743832995636099492407725867913838795943769639370290194041042816115508275402098489425390955701119859653835453819760144793955144270390935582265015547304887492903260021338143222384924284688315969656851071586164457032762310261711502219483046086226002535714943022861784041675133112356777038135680878761889498931497263626115766859794298305048903499123183204568388806296013115978105240332915537230440073392635346737668476502837288001300064520331631045598189887694117855832179830495203738359402006442211295682466876624196722909418068402949779266014870149953636351383592949775258669374731476496508263777331202952260675733977645852940550086575833535096696615179426405936039322954063073019168298739417084939990375138349619467359316672543876646742766554997060184214219487164511877977484255749681836919047567284628197085151382364601502683451643275153071851277754960835535382808111436105570360485767281054945202003762274555259738114074176205516856584062856798403012136560363108927326452865258435330118689760196611785337205827429735614645184691765815110168175576062509694639286574264261092145248893008805281301251414648076948805027910614894140536973792434389481821606076991662214929953454419940607300360177809932834249252448013156926988446475443287957249848721925055682076186304413714341813759544217479377334379288306259734130103495131708493144189894336013561702277423869224019562033073807481778223803252010332153354853409192679361059184650445563229908020584755607995432002569726616420922753771521404723119874924289483105128311895893504240504848162248054534800351340221257759551163081932547546958204284070957747174259525653799667787799938343486627914882884410602562606756646923977879217706153791111144187632405367121427668904910819362126435030085397970464442030032074623634271773129250043622410769339644075994418572983350239622169651", "y": "0.77579365485226042177777640618029173845819430212130709662347278958273538889914760879943742683379536243890783026867971896323283579407244370785702477909990528516614155028832765718033248161067942305952112622025226154872195975268159457873594257236835054597235420485326777317768158988212009589618815313308614258523429796804078683690005090103443568239888391561998208240269595649104192961113966203696940124077528411474119913601230206901587284152945901934733746685502367258315624412704956217227289388034521943164716018811966574801809554900487385913920227191429614833786247038717888958142969335854940895126936593493222664595869549323124089965609284898418902618770380580600094119300959113629783592958313812509368194729251872102791244508005834352834132748327852239217062637632711834318138303969103817130036439654804022402664060499196676456751818981461007294180844466438355672891785100094023317873170350104040354378692395127658537481980098367924453156421306732468004197567101560619512898894883538402385981542801030414253154944142242479384622187922028237086280844884720096839958139284264215036154753095217759123868294142528271220593531462586483069083854669126978432360015147704670613163505662101694387199104173459966564275533914238362567611924775328492220387141835313382517113281164437624472813043339421564347403501175768468437497059669516301521212257263536303766254161954736322804943233961023813843098725563072374745575698526988562814832914158892624609203343810363158930602019637742095900938990998718827630542502076775903399981240523766575610878508760460621242223624212622609083206662807335465934846633271173593564957996304660414587433087784059909299378332456092783375058489710908424940601664276027295770722078109126700132360776613538317071068330553043266850811413075713972610484048156499858107706361524588222495286077426146487738651435895977800874553482791189389298412994035198451492905870085362917577628075311000428532600468655400443951189491383655972252211216905879941502727825883178925253970302424896486863661"}}
f := {"point": {"x": "0.85571616212069490092773094147560186684131622314453125", "y": "-0.1591162540747305953470203121469239704310894012451171875"}, "direction": {"x": "-1.0307248567586414222940760510027757845818996429443359375", "y": "-2.4882894670735749287349136693592299707233905792236328125"}}
F := {"x": "0.53928655165569163945165222317826403849070490258334179915698441073440974686538548295289161232433484332107276578408176920378319477794584165426090953408620588634331417765575858015222202049319263121217296275693975230608359849583209136146074903425221913228512195160065882540713997123815621200249834046081628209225109899222097937413402224522807702768671789261021024463741292820018026535968053384939957782521236212607441212448509656982876041937247460546072039805668260671279788579263114555834545115926667123218871710987186270801114326535458478696868136018893051122550727902345179173926448470483930151703289443140087201904726670159611295392029211830468725952990477294325366197156275750628248842996949772185302893229435905997340640111676654073497755451046821486159377075733915660077324525968448579054998765695274061042515869357447702431832510752764937649877924359891975877851588321830598370615095729893971486290309008988481093489392535674643308997884466427367320555100594493994961845628841142572155648308520368370313383432681340025681012427470937431269890581023599358880177508516025914524983752919166992819806885318859685137133840684594164332803207572313748965501638417244592378272706573554483357062780744783826280131211756664468552675360312584595941536871318191236422807232768058234758544181228098551292678885823634602631589525846148390506278208471056731390508817683244282534766198590545431154795186661750737314235040873795959422820343135617994516214847942407629952117379913703591217003415013374900681038626797009586362248714484369903394265033240008712228327420751089117682908556526362273858286371017817224139700587415946049966021948635134611260788123843937613305275623037981758911617622876181246227542773899239114892782485392021935811721460184674474568742092876720605135320296243832143188905908620266105555048474836637489116568707927582216746990113350482922439764569035888780904223746450693518874149338115508978519781071501889312636061515571314215792636757235688828130372450211849677820695799805345240205222", "y": "-0.92301406989565550395272490935868053985642119830277738511642423001948676089198531945338122459830122235263049046602555345758629731937708125065270317438786787866755067108250865259914647897634861316762586611664835045152996076413179691773090770374029411493153382488004373510628676144903318535218902658652710321139138160231677595622309664025992520820619071889970160773207055278095749052594735228498669875414306849791104496586890737515049586247921407064216275164390601191918117337153291147472293458401946039606738814127855209373810745997689055093536883478392021942244036066606485406114928111974044823953609853337759824580254287742623191249118448701107726929548376438503565967539666673575068721005925034826960100226817070522382919000305213207614756979442693159559887912790180698202156260800358590523477816359456727515886229288636729184621595657752608158421224820887696585972470956961671078276655939073743892899290370096937105295113364398015835743284318439344167502464296307290187328712979110278858612576462269813912353546563548310648456833194626333131289038419654960279431036337181530235339106520084017445116391035162301259438256484497855370088722008079645025386110289758130500873122492855309036947678534151213328193337156007199116144387206075127722648264738325192812002699915179831255177189812217531055214179435414675513050358487951853900717614339657465662230485169345167242571450364707262696998311841327866741051047148111315847370497510965153938750311170449284068804732919960242702554425788182663244190775021640319969185712524961695471971020498738285504143401299380879126907083853944809345024620785531384757270710137399952881676217121120191363966680482201629900582353668487318605450000046623892335944960558767654945225542708709396496781783560209764751760231124093073493834659724673548271502406945849556404864908796973698272634868718935318554197368755611302407112601610117315590636681372275296043626807170054751127458679355011023228455368341450420803472579892472301237648786236623573289114998831662818623346"}
k := {"point": {"x": "-1.2632684815278503176472213453962467610836029052734375", "y": "-0.176341183576381455022641375762759707868099212646484375"}, "direction": {"x": "1.8025550331835419570988735685745107995743078078567792991569844107344097468653854829528916123243348433210727657840817692037831947779458416542609095340862058863433141776557585801522220204931926312121729627569397523060835984958320913614607490342522191322851219516006588254071399712381562120024983404608162820922510989922209793741340222452280770276867178926102102446374129282001802653596805338493995778252123621260744121244850965698287604193724746054607203980566826067127978857926311455583454511592666712321887171098718627080111432653545847869686813601889305112255072790234517917392644847048393015170328944314008720190472667015961129539202921183046872595299047729432536619715627575062824884299694977218530289322943590599734064011167665407349775545104682148615937707573391566007732452596844857905499876569527406104251586935744770243183251075276493764987792435989197587785158832183059837061509572989397148629030900898848109348939253567464330899788446642736732055510059449399496184562884114257215564830852036837031338343268134002568101242747093743126989058102359935888017750851602591452498375291916699281980688531885968513713384068459416433280320757231374896550163841724459237827270657355448335706278074478382628013121175666446855267536031258459594153687131819123642280723276805823475854418122809855129267888582363460263158952584614839050627820847105673139050881768324428253476619859054543115479518666175073731423504087379595942282034313561799451621484794240762995211737991370359121700341501337490068103862679700958636224871448436990339426503324000871222832742075108911768290855652636227385828637101781722413970058741594604996602194863513461126078812384393761330527562303798175891161762287618124622754277389923911489278248539202193581172146018467447456874209287672060513532029624383214318890590862026610555504847483663748911656870792758221674699011335048292243976456903588878090422374645069351887414933811550897851978107150188931263606151557131421579263675723568882813037245021184967782069579980534524020522", "y": "-0.74667288631927404893008353359592083198832198565629301011642423001948676089198531945338122459830122235263049046602555345758629731937708125065270317438786787866755067108250865259914647897634861316762586611664835045152996076413179691773090770374029411493153382488004373510628676144903318535218902658652710321139138160231677595622309664025992520820619071889970160773207055278095749052594735228498669875414306849791104496586890737515049586247921407064216275164390601191918117337153291147472293458401946039606738814127855209373810745997689055093536883478392021942244036066606485406114928111974044823953609853337759824580254287742623191249118448701107726929548376438503565967539666673575068721005925034826960100226817070522382919000305213207614756979442693159559887912790180698202156260800358590523477816359456727515886229288636729184621595657752608158421224820887696585972470956961671078276655939073743892899290370096937105295113364398015835743284318439344167502464296307290187328712979110278858612576462269813912353546563548310648456833194626333131289038419654960279431036337181530235339106520084017445116391035162301259438256484497855370088722008079645025386110289758130500873122492855309036947678534151213328193337156007199116144387206075127722648264738325192812002699915179831255177189812217531055214179435414675513050358487951853900717614339657465662230485169345167242571450364707262696998311841327866741051047148111315847370497510965153938750311170449284068804732919960242702554425788182663244190775021640319969185712524961695471971020498738285504143401299380879126907083853944809345024620785531384757270710137399952881676217121120191363966680482201629900582353668487318605450000046623892335944960558767654945225542708709396496781783560209764751760231124093073493834659724673548271502406945849556404864908796973698272634868718935318554197368755611302407112601610117315590636681372275296043626807170054751127458679355011023228455368341450420803472579892472301237648786236623573289114998831662818623346"}}
K := {"x": "-0.5042446036763411925905267125298443472150786516396077516908114085914714988697788982529274875439998867227074489571364077040762354277118377531002261710503167734217661878164100209388625854004738123926625699462980586907408152612448084205688901976592599607215281972372934674008706024589009576628322038396313202430945974402649482934622509524753863791760371023339958322434201987292166461820912151186527191416050085585450692294794138930070936752350302654361443407580049593651445739346328810151653100487620919490034936850897717037534232385616149170702642866679165430437555780947630424097682368782835850078734243310780649652915879064939722211614723294682778479902503194062963262001683909511224881851090976538342278593792968618186769959294773880129651204943662106443328331430559244014488573519033398438410948018063944469064455497896925881235261724414836959185800194047675713462794935402025249721244995250285072311946230448823529960120208553431891539413094744535334399147354420231196058150350999863753050241786289308847833663650533150800111853772433958586911172235803117820056268634672377184621717844145197706766393759003389652118234573881414761020527631397296208386341876187048183046022067311815032160918339343292504146744307517682696343755982821145751166234014486928989958856013585661574176858923578383332742452966676580219364752525512051299578426580703037116768661427544314779528526340633937695751537949103376553269496806778680006125578934100610494907649135817290178026565224762083001761878760973980928024153988685367303378909527035812408440649309250692010416118018583120440445161431013322587110691364604879509161643668636046451307424492881052272909249292041895361639828613517867376887484455978023004724073334462704569292793819451348596523304698481236452099474890858566985395887410285913097514229646232776885721409049171383588509249894409521283717782426482521614132555353579710598070760988260625765658894517783838613774685476842455900614165330575922615663377471999307780201502285955493999206409697969989975969", "y": "-0.49075186132400885489637315104009279530865157618344062945125139525930523891303401545003514941337482065595741432348673583502533019716083526441163247418060816010019296940282615398992693275996918817842538371577697782588880994549474417371759966771784460553456480215348091304530987235078805903894185751116751384250252764540623915653508754013232687105988750210956372183502833478545782148298344968694604036825950970522929807753439149602469515133791726003690461383523787138164993601918895543262774034286192384602797838130395218463989144172929906326554251591206065513957461319185673179486449035916487133033275284062552279784101203184897059774577430160216810759439352776155635968451055811622077549953996989840651931066109083479253272458511675706776772671077356771863645413278878873459896463298677588396545664437115585402071293307794865195103293811490936717941671859148874152401935029761651087383702827754360795768503210036393512018690865270425884732464803882363369661963628747807647872725731799907877570983708435522399665507332565290655433365758650438756021928576037499519563806176481315454220073467846265379527716959289574815352242588234669496244130569211874551890385676799808236405307354595405229258864599340175477453037946564893577397020714288992715796465105253359413047046445819843186301003637463079511938029178325043739554195730031510668757404252787237179918623094183761258815914456024864631556902552018103876941222519689794837640741517703866705671564037890349842202531103933840265815334533860132221055606618963856420877817487450576993549790810107668322662915801685450126820483617079743916168364281010811102438234955903653732813971621905694856441532814972475453679271844299205800072244575860812179385588373023619053379052907123224118697859795487070591472820587943530045350564915417314999119238261057190645215031054836494524633132810742010979431446774757173188481215368004252939276844875420667716140538556021093681593436681636202662870027800948464059369860268361254300216329762377949169600936086863352686228"}
J := {"x": "2.3127808717684744712763369758279128604021740717627903030675583440524056284677759575208541934333857815200619489903875797666211113331541672987849056241311755003124013112599058638512158350831721777486346512863752238574113771815488831280985953158442905656654765710998494859125741987115639704845950502229698801977692926933442435775200558049430191545420640716735621321510331183577446472259348773504222697816500433430390780117406984838710794448168782065840163570180699230475348157006899640428009840497107520186724726911405985501736697917626830301088262458507354855871480735046561730344282244799790115550408866168587356652784715056272058176518683188321356744485905424958616704419793070914171626016439694456577100515259174660746631463014208544111888453050639716341961486755533597039790888519060728568377920233358716488871742409219147513350106964513999849606787331554658530402011057509657111487638529180452468518498821214923899673058163444738748312495940475523626202898231110462781430665428406902267678891059327645987698755954765743337086127761730405266879569145974273258255091005477743853670129642434490815419544430213380156685429160528028165312168388875630463543647950490459851054257504866061758504028909274262103260367160454146529237925600114829542542516140193029531704156518247116470970487029882196381276825847531689161591563611958004913532542275982070138030356553665183629089353320878751492887297562623301950828496734257640710893315314879415968722176789325982194173388298598304704434438368480734642790250934150236548762773042994327758934143158343976375808313648482715074077940988724422082109151486367181316365575321036937444732966161639999966602315972193086174418515537345061388245737571648628440880192456243022249326770350155859545969553771049533710731568900383099988843675413967364376736305415135406792877016582471426304370568505467315257532737130931715606125537906951173810152707247111129391512193534505274385607146145244881837046163313395233907931663560679397256771954340332105009377021008219851389129", "y": "-1.6576491287380524441926760669416322889068637608740779267263053458509865371872711717026439538520633006280284738410543970085257518602932836651124339821299132003273072870157856254074108524812298845536012024542282266837849498186222032994746375013704276398370056244463379378969082952432275133654869866691872146155409852170620745788757826898593350661081288658639624592601704446939903280680575189411587547130912033271785456432310005970407757246579125675296094114888599815052224070875837045286029586552704519724204727390840344715126636158517720067014082139688781034034825157834838085211151732151033794242752614565046246365872520261564640599820347172825427340966466179556366717687536411230868386806838368570087438976086760126355760538716126212531887808793645647296702905359772357825530701306032001012382880781753990299594282215355569472355284411862758708233232570920710687914454706715849904129626400451952616780828146170435675539722197046927580906480643856072554588080293071580965332036950016130057774456460254994924150500422134653183137929876153277198048885057833549473532047115747253825848527327132848485493911532093155776825292479411219246816447828718642060148001480219203205333930819575785660782096067120574818161955440148894946441217925160265635379837160683603090890481313298373540405639753242558514528744902931019267413363393076859942496771874490758477379252221101328484569830583371074257353427675300129671834983567011841888466861991123348599362493043876165775261410316048246438101847063704359770825632867155344441436334205799990405018665548466478565737684407170920619892973398938936535122898495320629911852262171796800758454235074012395961707066235173919990669123946826619161785000955366170939180879434612397755831548381178528182031255390422832938675364337644754189914266716844673282151695430958867453540514620921755794640182314772276803504977128308920109823521309790585701364001829995843070035770800442669569438563078884353214942701486418154643301100177967212839260421005074898621170592525614098930844"}

Need to prove:
concyclic(A, D, J, K)

Proof:
By line_definition on G, D, i we get i == Line(D, G)
By line_definition on B, G, j we get j == Line(B, G)
By line_definition on D, K, l we get l == Line(D, K)
By line_definition on J, C, k we get k == Line(C, J)
By line_definition on D, B, g we get g == Line(B, D)
By line_definition on K, I, l we get l == Line(I, K)
By line_definition on B, F, f we get f == Line(B, F)
By line_definition on E, G, j we get j == Line(E, G)
By line_definition on A, G, i we get i == Line(A, G)
By line_definition on J, F, k we get k == Line(F, J)
By line_definition on E, B, perpendicular_line(B, h) we get Line(B, E) == perpendicular_line(B, h)
By line_definition on F, A, f we get f == Line(A, F)
By line_definition on A, E, h we get h == Line(A, E)
By line_definition on D, A, perpendicular_line(A, g) we get Line(A, D) == perpendicular_line(A, g)
By line_definition on K, C, k we get k == Line(C, K)
By line_definition on C, F, perpendicular_line(C, f) we get Line(C, F) == perpendicular_line(C, f)
By line_definition on K, J, k we get k == Line(J, K)
By line_definition on C, D, g we get g == Line(C, D)
By line_definition on F, K, k we get k == Line(F, K)
By line_definition on E, C, h we get h == Line(C, E)
By line_intersection_definition on B, f, j we get B == line_intersection(f, j)
By line_intersection_definition on C, h, perpendicular_line(C, f) we get C == line_intersection(h, perpendicular_line(C, f))
By median_definition on D, C, A, l we get l == median(D, A, C)
By line_intersection_definition on A, perpendicular_line(A, g), h we get A == line_intersection(h, perpendicular_line(A, g))
By circle_definition on H, I, J, c we get c == Circle(H, I, J)
By line_intersection_definition on B, perpendicular_line(B, h), g we get B == line_intersection(g, perpendicular_line(B, h))
By line_intersection_definition on A, i, f we get A == line_intersection(f, i)
By line_intersection_definition on C, h, g we get C == line_intersection(g, h)
By line_intersection_definition on C, g, k we get C == line_intersection(g, k)
By line_intersection_definition on B, perpendicular_line(B, h), f we get B == line_intersection(f, perpendicular_line(B, h))
By perpendicular_line_definition on B, f, perpendicular_line(C, f) we get f == perpendicular_line(B, perpendicular_line(C, f))
By line_intersection_definition on A, perpendicular_line(A, g), f we get A == line_intersection(f, perpendicular_line(A, g))
By circle_definition on A, H, J, c we get c == Circle(A, H, J)
By circle_definition on J, I, A, c we get c == Circle(A, I, J)
By perpendicular_line_definition on D, g, perpendicular_line(A, g) we get g == perpendicular_line(D, perpendicular_line(A, g))
By line_intersection_definition on D, g, l we get D == line_intersection(g, l)
By line_intersection_definition on B, g, j we get B == line_intersection(g, j)
By line_intersection_definition on E, h, j we get E == line_intersection(h, j)
By line_intersection_definition on A, h, f we get A == line_intersection(f, h)
By line_intersection_definition on C, perpendicular_line(C, f), g we get C == line_intersection(g, perpendicular_line(C, f))
By perpendicular_line_definition on A, h, perpendicular_line(B, h) we get h == perpendicular_line(A, perpendicular_line(B, h))
By perpendicular_line_definition on F, perpendicular_line(C, f), f we get perpendicular_line(C, f) == perpendicular_line(F, f)
By line_intersection_definition on D, i, g we get D == line_intersection(g, i)
By perpendicular_line_definition on F, f, perpendicular_line(C, f) we get f == perpendicular_line(F, perpendicular_line(C, f))
By line_intersection_definition on D, perpendicular_line(A, g), l we get D == line_intersection(l, perpendicular_line(A, g))
By perpendicular_line_definition on C, g, perpendicular_line(A, g) we get g == perpendicular_line(C, perpendicular_line(A, g))
By line_intersection_definition on F, f, k we get F == line_intersection(f, k)
By perpendicular_line_definition on B, g, perpendicular_line(A, g) we get g == perpendicular_line(B, perpendicular_line(A, g))
By line_intersection_definition on C, k, h we get C == line_intersection(h, k)
By line_intersection_definition on D, l, i we get D == line_intersection(i, l)
By line_intersection_definition on A, h, i we get A == line_intersection(h, i)
By perpendicular_line_definition on A, f, perpendicular_line(C, f) we get f == perpendicular_line(A, perpendicular_line(C, f))
By median_definition on K, A, C, l we get l == median(K, A, C)
By perpendicular_line_definition on D, perpendicular_line(A, g), g we get perpendicular_line(A, g) == perpendicular_line(D, g)
By perpendicular_line_definition on E, h, perpendicular_line(B, h) we get h == perpendicular_line(E, perpendicular_line(B, h))
By line_intersection_definition on B, f, g we get B == line_intersection(f, g)
By perpendicular_line_definition on C, h, perpendicular_line(B, h) we get h == perpendicular_line(C, perpendicular_line(B, h))
By perpendicular_line_definition on E, perpendicular_line(B, h), h we get perpendicular_line(B, h) == perpendicular_line(E, h)
By line_uniqueness on A, D, perpendicular_line(A, g), i we get i == perpendicular_line(A, g)
By line_uniqueness on F, C, perpendicular_line(C, f), k we get k == perpendicular_line(C, f)
By line_uniqueness on B, E, j, perpendicular_line(B, h) we get j == perpendicular_line(B, h)
By between_imply_not_between on C, I, A we get collinear_and_not_between(A, C, I)
By between_imply_not_between on A, I, C we get collinear_and_not_between(C, A, I)
By between_imply_not_between on C, H, G we get collinear_and_not_between(G, C, H)
By between_imply_not_between on G, H, C we get collinear_and_not_between(C, G, H)
By in_imply_collinear on D, B, C we get collinear(B, C, D)
By in_imply_collinear on G, D, A we get collinear(A, D, G)
By in_imply_collinear on K, C, F we get collinear(C, F, K)
By in_imply_collinear on J, C, F we get collinear(C, F, J)
By in_imply_collinear on G, E, B we get collinear(B, E, G)
By in_imply_collinear on E, A, C we get collinear(A, C, E)
By in_imply_collinear on K, I, D we get collinear(D, I, K)
By in_imply_collinear on F, A, B we get collinear(A, B, F)
By in_imply_concyclic on H, A, I, J we get concyclic(A, H, I, J)
By power_of_a_point_on_circle on I, c we get 0 == power_of_a_point(I, c)
By angles_on_chord_v1 on H, I, A, J, c we get angle(H, A, I) == angle(H, J, I) mod 360
By angles_on_chord_v0 on H, J, I, A, c we get angle(H, A, J) == angle(H, I, J) mod 360
By power_of_a_point_on_circle on A, c we get 0 == power_of_a_point(A, c)
By power_of_a_point_in_circle on H, c we get 0 == power_of_a_point(H, c)
By angles_on_chord_v1 on A, J, H, I, c we get angle(A, H, J) == angle(A, I, J) mod 360
By power_of_a_point_in_circle on J, c we get 0 == power_of_a_point(J, c)
By angles_on_chord_v1 on J, H, I, A, c we get angle(J, A, H) == angle(J, I, H) mod 360
By angles_on_chord_v2 on I, J, A, H, c we get angle(I, A, J) == angle(I, H, J) + 180 mod 360
By angles_on_chord_v3 on I, J, H, A, c we get angle(I, H, J) == angle(I, A, J) + 180 mod 360
By angles_on_chord_v1 on I, A, H, J, c we get angle(I, H, A) == angle(I, J, A) mod 360
By angles_on_chord_v3 on J, I, A, H, c we get angle(J, A, I) == angle(J, H, I) + 180 mod 360
By angles_on_chord_v3 on H, A, J, I, c we get angle(H, J, A) == angle(H, I, A) + 180 mod 360
By angles_on_chord_v0 on J, A, H, I, c we get angle(J, H, A) == angle(J, I, A) mod 360
By angles_on_chord_v2 on J, I, H, A, c we get angle(J, H, I) == angle(J, A, I) + 180 mod 360
By angles_on_chord_v0 on I, H, A, J, c we get angle(I, A, H) == angle(I, J, H) mod 360
By angles_on_chord_v0 on A, I, J, H, c we get angle(A, H, I) == angle(A, J, I) mod 360
By angles_on_chord_v2 on H, A, I, J, c we get angle(H, I, A) == angle(H, J, A) + 180 mod 360
By angles_on_chord_v2 on A, H, J, I, c we get angle(A, J, H) == angle(A, I, H) + 180 mod 360
By angles_on_chord_v3 on A, H, I, J, c we get angle(A, I, H) == angle(A, J, H) + 180 mod 360
By same_angle_v0 on A, C, I, B we get angle(C, A, B) == angle(I, A, B) mod 360
By same_angle_v1 on C, H, G, B we get angle(G, C, B) == angle(H, C, B) mod 360
By same_angle_v1 on C, I, A, F we get angle(A, C, F) == angle(I, C, F) mod 360
By same_angle_v0 on C, G, H, A we get angle(G, C, A) == angle(H, C, A) mod 360
By same_angle_v1 on C, A, I, B we get angle(A, C, B) == angle(I, C, B) mod 360
By same_angle_v2 on I, C, A, D we get angle(C, I, D) == angle(A, I, D) + 180 mod 360
By same_angle_v0 on A, I, C, D we get angle(C, A, D) == angle(I, A, D) mod 360
By altitude_definition on A, C, B, perpendicular_line(A, g) we get altitude(A, B, C) == perpendicular_line(A, g)
By collinear_definition on H, G, C we get G in Line(C, H), C in Line(G, H), Line(C, H) == Line(G, H), 0 == 2 * angle(G, H, C) mod 360
By log_of_2_times_distance on G, C, C, H we get log(distance(C, G)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(C, H))
By collinear_definition on C, A, I we get A in Line(C, I), I in Line(A, C), Line(A, C) == Line(C, I), 0 == 2 * angle(A, C, I) mod 360
By altitude_definition on B, A, C, perpendicular_line(B, h) we get altitude(B, A, C) == perpendicular_line(B, h)
By log_of_2_times_distance on G, C, G, H we get log(distance(C, G)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(G, H))
By collinear_definition on A, I, C we get I in Line(A, C), C in Line(A, I), Line(A, C) == Line(A, I), 0 == 2 * angle(I, A, C) mod 360
By log_of_2_times_distance on A, C, I, C we get log(distance(A, C)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(C, I))
By collinear_definition on A, C, I we get C in Line(A, I), I in Line(A, C), Line(A, C) == Line(A, I), 0 == 2 * angle(C, A, I) mod 360
By log_of_2_times_distance on C, A, A, I we get log(distance(A, C)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(A, I))
By collinear_definition on I, A, C we get A in Line(C, I), C in Line(A, I), Line(A, I) == Line(C, I), 0 == 2 * angle(A, I, C) mod 360
By collinear_definition on H, C, G we get C in Line(G, H), G in Line(C, H), Line(C, H) == Line(G, H), 0 == 2 * angle(C, H, G) mod 360
By collinear_definition on C, I, A we get I in Line(A, C), A in Line(C, I), Line(A, C) == Line(C, I), 0 == 2 * angle(I, C, A) mod 360
By collinear_definition on C, G, H we get G in Line(C, H), H in Line(C, G), Line(C, G) == Line(C, H), 0 == 2 * angle(G, C, H) mod 360
By collinear_definition on G, H, C we get H in Line(C, G), C in Line(G, H), Line(C, G) == Line(G, H), 0 == 2 * angle(H, G, C) mod 360
By altitude_definition on C, B, A, perpendicular_line(C, f) we get altitude(C, A, B) == perpendicular_line(C, f)
By collinear_definition on I, C, A we get C in Line(A, I), A in Line(C, I), Line(A, I) == Line(C, I), 0 == 2 * angle(C, I, A) mod 360
By collinear_definition on C, H, G we get H in Line(C, G), G in Line(C, H), Line(C, G) == Line(C, H), 0 == 2 * angle(H, C, G) mod 360
By collinear_definition on G, C, H we get C in Line(G, H), H in Line(C, G), Line(C, G) == Line(G, H), 0 == 2 * angle(C, G, H) mod 360
By power_of_a_point_definition on C, A, I, c we get log(power_of_a_point(C, c)) == log(distance(A, C)) + log(distance(C, I))
By between_implies_angles on A, I, C we get 180 == angle(A, I, C) mod 360, 0 == angle(I, C, A) mod 360, 0 == angle(C, A, I) mod 360
By between_implies_angles on G, H, C we get 180 == angle(G, H, C) mod 360, 0 == angle(H, C, G) mod 360, 0 == angle(C, G, H) mod 360
By between_implies_angles on C, I, A we get 180 == angle(C, I, A) mod 360, 0 == angle(I, A, C) mod 360, 0 == angle(A, C, I) mod 360
By between_implies_angles on C, H, G we get 180 == angle(C, H, G) mod 360, 0 == angle(H, G, C) mod 360, 0 == angle(G, C, H) mod 360
By line_definition on E, I, h we get h == Line(E, I)
By line_intersection_definition on I, Line(I, J), Line(H, I) we get I == line_intersection(Line(H, I), Line(I, J))
By median_definition on A, C, G, Line(A, H) we get Line(A, H) == median(A, C, G)
By line_intersection_definition on I, Line(I, J), h we get I == line_intersection(h, Line(I, J))
By line_intersection_definition on J, Line(I, J), Line(A, J) we get J == line_intersection(Line(A, J), Line(I, J))
By line_intersection_definition on G, i, Line(C, G) we get G == line_intersection(i, Line(C, G))
By line_intersection_definition on A, Line(A, H), f we get A == line_intersection(f, Line(A, H))
By line_intersection_definition on I, Line(H, I), h we get I == line_intersection(h, Line(H, I))
By line_intersection_definition on I, l, h we get I == line_intersection(h, l)
By line_intersection_definition on I, l, Line(I, J) we get I == line_intersection(l, Line(I, J))
By line_intersection_definition on A, Line(A, J), i we get A == line_intersection(i, Line(A, J))
By median_definition on I, G, C, Line(H, I) we get Line(H, I) == median(I, C, G)
By orthocenter_concurrency on A, C, B we get orthocenter(A, B, C) in altitude(A, B, C), orthocenter(A, B, C) in altitude(C, A, B), orthocenter(A, B, C) in altitude(B, A, C)
By line_intersection_definition on A, Line(A, H), Line(A, J) we get A == line_intersection(Line(A, H), Line(A, J))
By line_intersection_definition on H, Line(A, H), Line(H, J) we get H == line_intersection(Line(A, H), Line(H, J))
By line_intersection_definition on I, l, Line(H, I) we get I == line_intersection(l, Line(H, I))
By line_intersection_definition on J, Line(H, J), Line(A, J) we get J == line_intersection(Line(A, J), Line(H, J))
By line_intersection_definition on A, h, Line(A, H) we get A == line_intersection(h, Line(A, H))
By median_definition on J, C, A, Line(I, J) we get Line(I, J) == median(J, A, C)
By line_intersection_definition on A, i, Line(A, H) we get A == line_intersection(i, Line(A, H))
By line_intersection_definition on J, Line(I, J), k we get J == line_intersection(k, Line(I, J))
By median_definition on H, C, A, Line(H, I) we get Line(H, I) == median(H, A, C)
By line_intersection_definition on H, Line(H, I), Line(H, J) we get H == line_intersection(Line(H, I), Line(H, J))
By perpendicular_line_definition on J, k, f we get k == perpendicular_line(J, f)
By line_intersection_definition on H, Line(H, I), Line(C, G) we get H == line_intersection(Line(C, G), Line(H, I))
By line_intersection_definition on H, Line(C, G), Line(A, H) we get H == line_intersection(Line(A, H), Line(C, G))
By line_intersection_definition on A, f, Line(A, J) we get A == line_intersection(f, Line(A, J))
By line_intersection_definition on J, k, Line(A, J) we get J == line_intersection(k, Line(A, J))
By line_intersection_definition on H, Line(A, H), Line(H, I) we get H == line_intersection(Line(A, H), Line(H, I))
By perpendicular_line_definition on I, h, j we get h == perpendicular_line(I, j)
By perpendicular_line_definition on G, i, g we get i == perpendicular_line(G, g)
By line_intersection_definition on A, h, Line(A, J) we get A == line_intersection(h, Line(A, J))
By line_intersection_definition on G, Line(C, G), j we get G == line_intersection(j, Line(C, G))
By line_intersection_definition on J, Line(I, J), Line(H, J) we get J == line_intersection(Line(H, J), Line(I, J))
By line_intersection_definition on C, Line(C, G), g we get C == line_intersection(g, Line(C, G))
By line_intersection_definition on C, h, Line(C, G) we get C == line_intersection(h, Line(C, G))
By perpendicular_line_definition on G, j, h we get j == perpendicular_line(G, h)
By perpendicular_line_definition on K, k, f we get k == perpendicular_line(K, f)
By same_angle_v2 on H, G, C, I we get angle(G, H, I) == angle(C, H, I) + 180 mod 360
By perpendicular_direction_conditions_v0_r on C, F, A, B we get 180 == 2 * direction(C, F) - 2 * direction(A, B) mod 360
By same_angle_v0 on C, G, H, I we get angle(G, C, I) == angle(H, C, I) mod 360
By same_angle_v2 on I, C, A, J we get angle(C, I, J) == angle(A, I, J) + 180 mod 360
By same_angle_v3 on H, G, C, A we get angle(G, H, A) == angle(C, H, A) + 180 mod 360
By projection_definition on B, D, i we get D == projection(B, i)
By perpendicular_direction_conditions_v0_r on A, D, C, B we get 180 == 2 * direction(A, D) - 2 * direction(C, B) mod 360
By same_angle_v1 on C, I, A, G we get angle(A, C, G) == angle(I, C, G) mod 360
By same_angle_v1 on C, A, I, H we get angle(A, C, H) == angle(I, C, H) mod 360
By perpendicular_direction_conditions_v0_r on A, B, C, F we get 180 == 2 * direction(A, B) - 2 * direction(C, F) mod 360
By same_angle_v3 on I, C, A, H we get angle(C, I, H) == angle(A, I, H) + 180 mod 360
By perpendicular_direction_conditions_v0_r on C, B, A, D we get 180 == 2 * direction(C, B) - 2 * direction(A, D) mod 360
By projection_definition on C, E, j we get E == projection(C, j)
By same_angle_v0 on A, I, C, H we get angle(C, A, H) == angle(I, A, H) mod 360
By same_angle_v0 on A, C, I, J we get angle(C, A, J) == angle(I, A, J) mod 360
By projection_definition on C, D, i we get D == projection(C, i)
By projection_definition on B, F, k we get F == projection(B, k)
By projection_definition on A, E, j we get E == projection(A, j)
By projection_definition on A, F, k we get F == projection(A, k)
By perpendicular_direction_conditions_v0_r on B, E, C, A we get 180 == 2 * direction(B, E) - 2 * direction(C, A) mod 360
By same_angle_v1 on C, F, J, B we get angle(F, C, B) == angle(J, C, B) mod 360
By same_angle_v1 on I, K, D, H we get angle(D, I, H) == angle(K, I, H) mod 360
By perpendicular_direction_conditions_v0_r on A, D, D, B we get 180 == 2 * direction(A, D) - 2 * direction(D, B) mod 360
By same_angle_v1 on A, D, G, H we get angle(D, A, H) == angle(G, A, H) mod 360
By same_angle_v1 on A, B, F, D we get angle(B, A, D) == angle(F, A, D) mod 360
By same_angle_v0 on A, C, E, H we get angle(C, A, H) == angle(E, A, H) mod 360
By same_angle_v0 on G, H, C, D we get angle(C, G, D) == angle(H, G, D) mod 360
By perpendicular_direction_conditions_v0_r on C, I, B, E we get 180 == 2 * direction(C, I) - 2 * direction(B, E) mod 360
By same_angle_v0 on C, K, F, I we get angle(F, C, I) == angle(K, C, I) mod 360
By same_angle_v2 on I, C, A, K we get angle(C, I, K) == angle(A, I, K) + 180 mod 360
By same_angle_v1 on C, I, A, K we get angle(A, C, K) == angle(I, C, K) mod 360
By same_angle_v0 on A, D, G, B we get angle(D, A, B) == angle(G, A, B) mod 360
By same_angle_v0 on C, D, B, F we get angle(B, C, F) == angle(D, C, F) mod 360
By same_angle_v0 on C, B, D, G we get angle(B, C, G) == angle(D, C, G) mod 360
By perpendicular_direction_conditions_v0_r on A, B, J, F we get 180 == 2 * direction(A, B) - 2 * direction(J, F) mod 360
By same_angle_v1 on A, B, F, C we get angle(B, A, C) == angle(F, A, C) mod 360
By probably_between_and_collinear_implies_between on C, F, J we get between(C, F, J)
By same_angle_v1 on C, E, A, H we get angle(A, C, H) == angle(E, C, H) mod 360
By same_angle_v1 on G, H, C, A we get angle(C, G, A) == angle(H, G, A) mod 360
By same_angle_v1 on C, G, H, D we get angle(G, C, D) == angle(H, C, D) mod 360
By same_angle_v1 on A, D, G, I we get angle(D, A, I) == angle(G, A, I) mod 360
By perpendicular_direction_conditions_v0_r on A, C, G, B we get 180 == 2 * direction(A, C) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on A, I, E, B we get 180 == 2 * direction(A, I) - 2 * direction(E, B) mod 360
By same_angle_v0 on A, B, F, J we get angle(B, A, J) == angle(F, A, J) mod 360
By same_angle_v1 on C, A, E, F we get angle(A, C, F) == angle(E, C, F) mod 360
By probably_between_and_collinear_implies_between on B, D, C we get between(B, D, C)
By perpendicular_direction_conditions_v0_r on B, G, A, C we get 180 == 2 * direction(B, G) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on G, E, I, A we get 180 == 2 * direction(G, E) - 2 * direction(I, A) mod 360
By same_angle_v1 on C, F, K, B we get angle(F, C, B) == angle(K, C, B) mod 360
By same_angle_v1 on G, H, C, E we get angle(C, G, E) == angle(H, G, E) mod 360
By same_angle_v0 on A, E, C, J we get angle(C, A, J) == angle(E, A, J) mod 360
By perpendicular_direction_conditions_v0_r on C, A, B, G we get 180 == 2 * direction(C, A) - 2 * direction(B, G) mod 360
By probably_between_and_collinear_implies_between on B, F, A we get between(A, F, B)
By perpendicular_direction_conditions_v0_r on I, C, E, G we get 180 == 2 * direction(I, C) - 2 * direction(E, G) mod 360
By same_angle_v0 on C, K, F, A we get angle(F, C, A) == angle(K, C, A) mod 360
By same_angle_v0 on A, I, C, G we get angle(C, A, G) == angle(I, A, G) mod 360
By same_angle_v0 on C, B, D, H we get angle(B, C, H) == angle(D, C, H) mod 360
By same_angle_v0 on A, G, D, J we get angle(D, A, J) == angle(G, A, J) mod 360
By same_angle_v0 on C, F, J, A we get angle(F, C, A) == angle(J, C, A) mod 360
By perpendicular_direction_conditions_v0_r on A, D, C, D we get 180 == 2 * direction(A, D) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on C, A, E, B we get 180 == 2 * direction(C, A) - 2 * direction(E, B) mod 360
By same_angle_v0 on C, D, B, A we get angle(B, C, A) == angle(D, C, A) mod 360
By same_angle_v1 on C, E, A, G we get angle(A, C, G) == angle(E, C, G) mod 360
By same_angle_v1 on C, A, E, B we get angle(A, C, B) == angle(E, C, B) mod 360
By perpendicular_direction_conditions_v0_r on G, B, A, I we get 180 == 2 * direction(G, B) - 2 * direction(A, I) mod 360
By same_angle_v0 on A, C, E, D we get angle(C, A, D) == angle(E, A, D) mod 360
By perpendicular_direction_conditions_v0_r on C, F, F, B we get 180 == 2 * direction(C, F) - 2 * direction(F, B) mod 360
By same_angle_v0 on A, C, E, B we get angle(C, A, B) == angle(E, A, B) mod 360
By perpendicular_direction_conditions_v0_r on B, E, A, I we get 180 == 2 * direction(B, E) - 2 * direction(A, I) mod 360
By same_angle_v0 on I, K, D, A we get angle(D, I, A) == angle(K, I, A) mod 360
By same_angle_v1 on A, F, B, I we get angle(B, A, I) == angle(F, A, I) mod 360
By projection_definition on K, F, f we get F == projection(K, f)
By same_angle_v0 on A, I, C, F we get angle(C, A, F) == angle(I, A, F) mod 360
By same_angle_v0 on G, C, H, B we get angle(C, G, B) == angle(H, G, B) mod 360
By same_angle_v1 on C, A, I, J we get angle(A, C, J) == angle(I, C, J) mod 360
By same_angle_v1 on I, K, D, C we get angle(D, I, C) == angle(K, I, C) mod 360
By perpendicular_direction_conditions_v0_r on E, B, I, C we get 180 == 2 * direction(E, B) - 2 * direction(I, C) mod 360
By same_angle_v1 on A, F, B, H we get angle(B, A, H) == angle(F, A, H) mod 360
By perpendicular_direction_conditions_v0_r on C, B, D, G we get 180 == 2 * direction(C, B) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on D, B, A, D we get 180 == 2 * direction(D, B) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on A, B, J, K we get 180 == 2 * direction(A, B) - 2 * direction(J, K) mod 360
By perpendicular_direction_conditions_v0_r on B, F, C, F we get 180 == 2 * direction(B, F) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on E, G, A, I we get 180 == 2 * direction(E, G) - 2 * direction(A, I) mod 360
By same_angle_v0 on C, F, J, I we get angle(F, C, I) == angle(J, C, I) mod 360
By perpendicular_direction_conditions_v0_r on C, F, B, A we get 180 == 2 * direction(C, F) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on B, G, C, I we get 180 == 2 * direction(B, G) - 2 * direction(C, I) mod 360
By same_angle_v1 on C, A, I, D we get angle(A, C, D) == angle(I, C, D) mod 360
By perpendicular_direction_conditions_v0_r on A, I, E, G we get 180 == 2 * direction(A, I) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on J, F, A, B we get 180 == 2 * direction(J, F) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on B, G, A, I we get 180 == 2 * direction(B, G) - 2 * direction(A, I) mod 360
By same_angle_v0 on C, H, G, E we get angle(G, C, E) == angle(H, C, E) mod 360
By probably_between_and_collinear_implies_between on A, E, C we get between(A, E, C)
By perpendicular_direction_conditions_v0_r on F, J, A, B we get 180 == 2 * direction(F, J) - 2 * direction(A, B) mod 360
By same_angle_v0 on I, D, K, J we get angle(D, I, J) == angle(K, I, J) mod 360
By perpendicular_direction_conditions_v0_r on I, C, B, E we get 180 == 2 * direction(I, C) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on A, B, F, K we get 180 == 2 * direction(A, B) - 2 * direction(F, K) mod 360
By perpendicular_direction_conditions_v0_r on C, F, F, A we get 180 == 2 * direction(C, F) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on A, B, C, J we get 180 == 2 * direction(A, B) - 2 * direction(C, J) mod 360
By same_angle_v0 on C, D, B, I we get angle(B, C, I) == angle(D, C, I) mod 360
By perpendicular_direction_conditions_v0_r on J, C, A, B we get 180 == 2 * direction(J, C) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on A, D, B, D we get 180 == 2 * direction(A, D) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on I, C, G, B we get 180 == 2 * direction(I, C) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on C, A, G, E we get 180 == 2 * direction(C, A) - 2 * direction(G, E) mod 360
By perpendicular_direction_conditions_v0_r on C, I, G, B we get 180 == 2 * direction(C, I) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on C, A, G, B we get 180 == 2 * direction(C, A) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on G, E, A, C we get 180 == 2 * direction(G, E) - 2 * direction(A, C) mod 360
By same_angle_v1 on A, D, G, C we get angle(D, A, C) == angle(G, A, C) mod 360
By perpendicular_direction_conditions_v0_r on K, F, A, B we get 180 == 2 * direction(K, F) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on I, A, G, B we get 180 == 2 * direction(I, A) - 2 * direction(G, B) mod 360
By in_imply_collinear on E, C, I we get collinear(C, E, I)
By perpendicular_direction_conditions_v0_r on G, B, C, A we get 180 == 2 * direction(G, B) - 2 * direction(C, A) mod 360
By projection_definition on G, D, g we get D == projection(G, g)
By perpendicular_direction_conditions_v0_r on E, G, C, A we get 180 == 2 * direction(E, G) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on E, B, I, A we get 180 == 2 * direction(E, B) - 2 * direction(I, A) mod 360
By perpendicular_direction_conditions_v0_r on E, G, A, C we get 180 == 2 * direction(E, G) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on B, E, I, A we get 180 == 2 * direction(B, E) - 2 * direction(I, A) mod 360
By perpendicular_direction_conditions_v0_r on B, G, C, A we get 180 == 2 * direction(B, G) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on I, A, E, B we get 180 == 2 * direction(I, A) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on G, B, I, C we get 180 == 2 * direction(G, B) - 2 * direction(I, C) mod 360
By perpendicular_direction_conditions_v0_r on C, A, E, G we get 180 == 2 * direction(C, A) - 2 * direction(E, G) mod 360
By projection_definition on G, E, h we get E == projection(G, h)
By perpendicular_direction_conditions_v0_r on G, D, C, B we get 180 == 2 * direction(G, D) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on I, A, B, G we get 180 == 2 * direction(I, A) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on G, E, C, A we get 180 == 2 * direction(G, E) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on A, B, J, C we get 180 == 2 * direction(A, B) - 2 * direction(J, C) mod 360
By perpendicular_direction_conditions_v0_r on I, A, E, G we get 180 == 2 * direction(I, A) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on A, D, D, C we get 180 == 2 * direction(A, D) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on I, C, B, G we get 180 == 2 * direction(I, C) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on G, E, I, C we get 180 == 2 * direction(G, E) - 2 * direction(I, C) mod 360
By perpendicular_direction_conditions_v0_r on C, D, A, D we get 180 == 2 * direction(C, D) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on A, D, B, C we get 180 == 2 * direction(A, D) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on C, I, B, G we get 180 == 2 * direction(C, I) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on E, G, I, A we get 180 == 2 * direction(E, G) - 2 * direction(I, A) mod 360
By perpendicular_direction_conditions_v0_r on I, C, E, B we get 180 == 2 * direction(I, C) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on A, C, E, B we get 180 == 2 * direction(A, C) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on A, F, C, F we get 180 == 2 * direction(A, F) - 2 * direction(C, F) mod 360
By probably_between_and_collinear_implies_between on D, K, I we get between(D, K, I)
By perpendicular_direction_conditions_v0_r on F, C, A, B we get 180 == 2 * direction(F, C) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on G, A, C, B we get 180 == 2 * direction(G, A) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on A, C, E, G we get 180 == 2 * direction(A, C) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on B, C, A, D we get 180 == 2 * direction(B, C) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on D, G, C, B we get 180 == 2 * direction(D, G) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on C, B, G, A we get 180 == 2 * direction(C, B) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on A, B, F, J we get 180 == 2 * direction(A, B) - 2 * direction(F, J) mod 360
By perpendicular_direction_conditions_v0_r on D, C, A, D we get 180 == 2 * direction(D, C) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on E, B, A, C we get 180 == 2 * direction(E, B) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on I, A, G, E we get 180 == 2 * direction(I, A) - 2 * direction(G, E) mod 360
By perpendicular_direction_conditions_v0_r on K, C, A, B we get 180 == 2 * direction(K, C) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on C, A, B, E we get 180 == 2 * direction(C, A) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on A, I, G, B we get 180 == 2 * direction(A, I) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on G, E, C, I we get 180 == 2 * direction(G, E) - 2 * direction(C, I) mod 360
By perpendicular_direction_conditions_v0_r on F, A, C, F we get 180 == 2 * direction(F, A) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on C, I, E, G we get 180 == 2 * direction(C, I) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on E, B, A, I we get 180 == 2 * direction(E, B) - 2 * direction(A, I) mod 360
By perpendicular_direction_conditions_v0_r on C, I, G, E we get 180 == 2 * direction(C, I) - 2 * direction(G, E) mod 360
By perpendicular_direction_conditions_v0_r on B, E, A, C we get 180 == 2 * direction(B, E) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on A, C, B, E we get 180 == 2 * direction(A, C) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on E, G, I, C we get 180 == 2 * direction(E, G) - 2 * direction(I, C) mod 360
By perpendicular_direction_conditions_v0_r on A, B, F, C we get 180 == 2 * direction(A, B) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on C, B, A, G we get 180 == 2 * direction(C, B) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on I, A, B, E we get 180 == 2 * direction(I, A) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on A, I, B, G we get 180 == 2 * direction(A, I) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on A, B, K, J we get 180 == 2 * direction(A, B) - 2 * direction(K, J) mod 360
By perpendicular_direction_conditions_v0_r on C, J, A, B we get 180 == 2 * direction(C, J) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on G, B, A, C we get 180 == 2 * direction(G, B) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on A, I, B, E we get 180 == 2 * direction(A, I) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on C, I, E, B we get 180 == 2 * direction(C, I) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on A, G, C, B we get 180 == 2 * direction(A, G) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on C, B, D, A we get 180 == 2 * direction(C, B) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on C, K, A, B we get 180 == 2 * direction(C, K) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on B, E, C, I we get 180 == 2 * direction(B, E) - 2 * direction(C, I) mod 360
By perpendicular_direction_conditions_v0_r on C, B, G, D we get 180 == 2 * direction(C, B) - 2 * direction(G, D) mod 360
By in_imply_collinear on K, J, C we get collinear(C, J, K)
By perpendicular_direction_conditions_v0_r on A, C, B, G we get 180 == 2 * direction(A, C) - 2 * direction(B, G) mod 360
By in_imply_collinear on E, A, I we get collinear(A, E, I)
By perpendicular_direction_conditions_v0_r on I, C, G, E we get 180 == 2 * direction(I, C) - 2 * direction(G, E) mod 360
By perpendicular_direction_conditions_v0_r on A, C, G, E we get 180 == 2 * direction(A, C) - 2 * direction(G, E) mod 360
By perpendicular_direction_conditions_v0_r on B, G, I, A we get 180 == 2 * direction(B, G) - 2 * direction(I, A) mod 360
By perpendicular_direction_conditions_v0_r on C, F, A, F we get 180 == 2 * direction(C, F) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on F, K, A, B we get 180 == 2 * direction(F, K) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on F, B, C, F we get 180 == 2 * direction(F, B) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on C, F, B, F we get 180 == 2 * direction(C, F) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on A, I, G, E we get 180 == 2 * direction(A, I) - 2 * direction(G, E) mod 360
By projection_definition on J, F, f we get F == projection(J, f)
By perpendicular_direction_conditions_v0_r on K, J, A, B we get 180 == 2 * direction(K, J) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on A, B, C, K we get 180 == 2 * direction(A, B) - 2 * direction(C, K) mod 360
By perpendicular_direction_conditions_v0_r on G, E, A, I we get 180 == 2 * direction(G, E) - 2 * direction(A, I) mod 360
By perpendicular_direction_conditions_v0_r on G, B, C, I we get 180 == 2 * direction(G, B) - 2 * direction(C, I) mod 360
By perpendicular_direction_conditions_v0_r on E, B, C, I we get 180 == 2 * direction(E, B) - 2 * direction(C, I) mod 360
By perpendicular_direction_conditions_v0_r on B, D, A, D we get 180 == 2 * direction(B, D) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on A, B, K, C we get 180 == 2 * direction(A, B) - 2 * direction(K, C) mod 360
By perpendicular_direction_conditions_v0_r on E, B, C, A we get 180 == 2 * direction(E, B) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on J, K, A, B we get 180 == 2 * direction(J, K) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on B, E, I, C we get 180 == 2 * direction(B, E) - 2 * direction(I, C) mod 360
By perpendicular_direction_conditions_v0_r on E, G, C, I we get 180 == 2 * direction(E, G) - 2 * direction(C, I) mod 360
By perpendicular_direction_conditions_v0_r on G, B, I, A we get 180 == 2 * direction(G, B) - 2 * direction(I, A) mod 360
By perpendicular_direction_conditions_v0_r on B, A, C, F we get 180 == 2 * direction(B, A) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on B, G, I, C we get 180 == 2 * direction(B, G) - 2 * direction(I, C) mod 360
By perpendicular_direction_conditions_v0_r on A, B, K, F we get 180 == 2 * direction(A, B) - 2 * direction(K, F) mod 360
By perpendicular_direction_conditions_v0_r on D, A, C, B we get 180 == 2 * direction(D, A) - 2 * direction(C, B) mod 360
By probably_between_and_collinear_implies_between on D, G, A we get between(A, G, D)
By in_imply_collinear on J, F, K we get collinear(F, J, K)
By probably_between_and_collinear_implies_between on F, K, C we get between(C, K, F)
By probably_between_and_collinear_implies_between on E, G, B we get between(B, G, E)
By reverse_direction on J, H we get 180 == direction(J, H) - direction(H, J) mod 360
By reverse_direction on I, A we get 180 == direction(I, A) - direction(A, I) mod 360
By reverse_direction on A, J we get 180 == direction(A, J) - direction(J, A) mod 360
By reverse_direction on C, H we get 180 == direction(C, H) - direction(H, C) mod 360
By reverse_direction on I, H we get 180 == direction(I, H) - direction(H, I) mod 360
By reverse_direction on J, I we get 180 == direction(J, I) - direction(I, J) mod 360
By reverse_direction on I, C we get 180 == direction(I, C) - direction(C, I) mod 360
By reverse_direction on A, I we get 180 == direction(A, I) - direction(I, A) mod 360
By reverse_direction on J, A we get 180 == direction(J, A) - direction(A, J) mod 360
By reverse_direction on C, I we get 180 == direction(C, I) - direction(I, C) mod 360
By reverse_direction on A, C we get 180 == direction(A, C) - direction(C, A) mod 360
By reverse_direction on H, A we get 180 == direction(H, A) - direction(A, H) mod 360
By reverse_direction on H, I we get 180 == direction(H, I) - direction(I, H) mod 360
By reverse_direction on C, G we get 180 == direction(C, G) - direction(G, C) mod 360
By reverse_direction on H, J we get 180 == direction(H, J) - direction(J, H) mod 360
By reverse_direction on I, J we get 180 == direction(I, J) - direction(J, I) mod 360
By reverse_direction on C, A we get 180 == direction(C, A) - direction(A, C) mod 360
By reverse_direction on H, C we get 180 == direction(H, C) - direction(C, H) mod 360
By reverse_direction on G, H we get 180 == direction(G, H) - direction(H, G) mod 360
By reverse_direction on A, H we get 180 == direction(A, H) - direction(H, A) mod 360
By reverse_direction on H, G we get 180 == direction(H, G) - direction(G, H) mod 360
By reverse_direction on G, C we get 180 == direction(G, C) - direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on D, C, D, G we get 180 == 2 * direction(D, C) - 2 * direction(D, G) mod 360
By same_angle_v0 on C, D, B, K we get angle(B, C, K) == angle(D, C, K) mod 360
By same_angle_v3 on G, A, D, H we get angle(A, G, H) == angle(D, G, H) + 180 mod 360
By same_angle_v0 on A, C, E, G we get angle(C, A, G) == angle(E, A, G) mod 360
By same_angle_v1 on A, B, F, G we get angle(B, A, G) == angle(F, A, G) mod 360
By perpendicular_direction_conditions_v0_r on F, K, F, B we get 180 == 2 * direction(F, K) - 2 * direction(F, B) mod 360
By same_angle_v0 on A, E, C, F we get angle(C, A, F) == angle(E, A, F) mod 360
By same_angle_v0 on C, B, D, E we get angle(B, C, E) == angle(D, C, E) mod 360
By perpendicular_direction_conditions_v0_r on F, K, F, A we get 180 == 2 * direction(F, K) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on K, J, B, F we get 180 == 2 * direction(K, J) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on D, C, A, G we get 180 == 2 * direction(D, C) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on J, K, B, A we get 180 == 2 * direction(J, K) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on K, J, B, A we get 180 == 2 * direction(K, J) - 2 * direction(B, A) mod 360
By same_angle_v1 on J, F, C, A we get angle(C, J, A) == angle(F, J, A) mod 360
By perpendicular_direction_conditions_v0_r on K, F, F, B we get 180 == 2 * direction(K, F) - 2 * direction(F, B) mod 360
By same_angle_v1 on C, A, E, J we get angle(A, C, J) == angle(E, C, J) mod 360
By same_angle_v1 on C, E, A, K we get angle(A, C, K) == angle(E, C, K) mod 360
By perpendicular_direction_conditions_v0_r on C, K, F, A we get 180 == 2 * direction(C, K) - 2 * direction(F, A) mod 360
By same_angle_v1 on A, B, F, E we get angle(B, A, E) == angle(F, A, E) mod 360
By same_angle_v0 on C, K, F, E we get angle(F, C, E) == angle(K, C, E) mod 360
By same_angle_v1 on C, F, K, D we get angle(F, C, D) == angle(K, C, D) mod 360
By same_angle_v1 on A, D, G, E we get angle(D, A, E) == angle(G, A, E) mod 360
By perpendicular_direction_conditions_v0_r on E, A, G, E we get 180 == 2 * direction(E, A) - 2 * direction(G, E) mod 360
By perpendicular_direction_conditions_v0_r on D, A, D, C we get 180 == 2 * direction(D, A) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on G, A, D, C we get 180 == 2 * direction(G, A) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on B, A, J, C we get 180 == 2 * direction(B, A) - 2 * direction(J, C) mod 360
By perpendicular_direction_conditions_v0_r on E, G, C, E we get 180 == 2 * direction(E, G) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on J, K, A, F we get 180 == 2 * direction(J, K) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on D, C, D, A we get 180 == 2 * direction(D, C) - 2 * direction(D, A) mod 360
By same_angle_v1 on C, J, F, D we get angle(F, C, D) == angle(J, C, D) mod 360
By perpendicular_direction_conditions_v0_r on A, F, J, K we get 180 == 2 * direction(A, F) - 2 * direction(J, K) mod 360
By perpendicular_direction_conditions_v0_r on C, K, B, A we get 180 == 2 * direction(C, K) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on B, D, D, A we get 180 == 2 * direction(B, D) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on E, B, A, E we get 180 == 2 * direction(E, B) - 2 * direction(A, E) mod 360
By perpendicular_direction_conditions_v0_r on C, K, F, B we get 180 == 2 * direction(C, K) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on F, K, A, F we get 180 == 2 * direction(F, K) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on C, E, B, E we get 180 == 2 * direction(C, E) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on D, G, D, C we get 180 == 2 * direction(D, G) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on D, A, C, D we get 180 == 2 * direction(D, A) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on A, G, C, D we get 180 == 2 * direction(A, G) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on A, E, G, B we get 180 == 2 * direction(A, E) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on C, K, A, F we get 180 == 2 * direction(C, K) - 2 * direction(A, F) mod 360
By same_angle_v0 on A, D, G, F we get angle(D, A, F) == angle(G, A, F) mod 360
By same_angle_v3 on G, E, B, C we get angle(E, G, C) == angle(B, G, C) + 180 mod 360
By perpendicular_direction_conditions_v0_r on F, B, J, C we get 180 == 2 * direction(F, B) - 2 * direction(J, C) mod 360
By perpendicular_direction_conditions_v0_r on B, A, K, F we get 180 == 2 * direction(B, A) - 2 * direction(K, F) mod 360
By perpendicular_direction_conditions_v0_r on J, F, F, B we get 180 == 2 * direction(J, F) - 2 * direction(F, B) mod 360
By same_angle_v1 on J, C, F, I we get angle(C, J, I) == angle(F, J, I) mod 360
By perpendicular_direction_conditions_v0_r on F, K, B, A we get 180 == 2 * direction(F, K) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on F, C, F, B we get 180 == 2 * direction(F, C) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on B, F, K, F we get 180 == 2 * direction(B, F) - 2 * direction(K, F) mod 360
By perpendicular_direction_conditions_v0_r on F, J, F, A we get 180 == 2 * direction(F, J) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on B, F, J, F we get 180 == 2 * direction(B, F) - 2 * direction(J, F) mod 360
By perpendicular_direction_conditions_v0_r on B, A, C, K we get 180 == 2 * direction(B, A) - 2 * direction(C, K) mod 360
By perpendicular_direction_conditions_v0_r on F, A, C, J we get 180 == 2 * direction(F, A) - 2 * direction(C, J) mod 360
By perpendicular_direction_conditions_v0_r on C, E, G, E we get 180 == 2 * direction(C, E) - 2 * direction(G, E) mod 360
By perpendicular_direction_conditions_v0_r on F, A, C, K we get 180 == 2 * direction(F, A) - 2 * direction(C, K) mod 360
By same_angle_v0 on C, D, B, J we get angle(B, C, J) == angle(D, C, J) mod 360
By perpendicular_direction_conditions_v0_r on C, D, G, D we get 180 == 2 * direction(C, D) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on A, E, G, E we get 180 == 2 * direction(A, E) - 2 * direction(G, E) mod 360
By same_angle_v2 on G, A, D, C we get angle(A, G, C) == angle(D, G, C) + 180 mod 360
By perpendicular_direction_conditions_v0_r on E, C, E, B we get 180 == 2 * direction(E, C) - 2 * direction(E, B) mod 360
By same_angle_v1 on C, E, A, D we get angle(A, C, D) == angle(E, C, D) mod 360
By perpendicular_direction_conditions_v0_r on C, E, E, G we get 180 == 2 * direction(C, E) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on J, K, F, B we get 180 == 2 * direction(J, K) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on J, F, F, A we get 180 == 2 * direction(J, F) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on C, J, F, A we get 180 == 2 * direction(C, J) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on B, D, A, G we get 180 == 2 * direction(B, D) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on D, B, A, G we get 180 == 2 * direction(D, B) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on G, B, E, A we get 180 == 2 * direction(G, B) - 2 * direction(E, A) mod 360
By perpendicular_direction_conditions_v0_r on D, B, G, D we get 180 == 2 * direction(D, B) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on F, A, J, F we get 180 == 2 * direction(F, A) - 2 * direction(J, F) mod 360
By perpendicular_direction_conditions_v0_r on B, A, C, J we get 180 == 2 * direction(B, A) - 2 * direction(C, J) mod 360
By perpendicular_direction_conditions_v0_r on B, F, C, J we get 180 == 2 * direction(B, F) - 2 * direction(C, J) mod 360
By perpendicular_direction_conditions_v0_r on B, C, D, A we get 180 == 2 * direction(B, C) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on F, B, K, J we get 180 == 2 * direction(F, B) - 2 * direction(K, J) mod 360
By same_angle_v0 on C, F, J, E we get angle(F, C, E) == angle(J, C, E) mod 360
By perpendicular_direction_conditions_v0_r on A, F, F, C we get 180 == 2 * direction(A, F) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on F, B, C, J we get 180 == 2 * direction(F, B) - 2 * direction(C, J) mod 360
By perpendicular_direction_conditions_v0_r on A, F, K, J we get 180 == 2 * direction(A, F) - 2 * direction(K, J) mod 360
By perpendicular_direction_conditions_v0_r on B, G, C, E we get 180 == 2 * direction(B, G) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on A, G, B, D we get 180 == 2 * direction(A, G) - 2 * direction(B, D) mod 360
By same_angle_v2 on G, E, B, H we get angle(E, G, H) == angle(B, G, H) + 180 mod 360
By perpendicular_direction_conditions_v0_r on G, B, C, E we get 180 == 2 * direction(G, B) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on B, C, D, G we get 180 == 2 * direction(B, C) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on E, C, G, B we get 180 == 2 * direction(E, C) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on B, F, K, J we get 180 == 2 * direction(B, F) - 2 * direction(K, J) mod 360
By perpendicular_direction_conditions_v0_r on E, A, G, B we get 180 == 2 * direction(E, A) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on G, A, C, D we get 180 == 2 * direction(G, A) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on B, E, E, A we get 180 == 2 * direction(B, E) - 2 * direction(E, A) mod 360
By perpendicular_direction_conditions_v0_r on B, A, J, K we get 180 == 2 * direction(B, A) - 2 * direction(J, K) mod 360
By perpendicular_direction_conditions_v0_r on B, D, G, A we get 180 == 2 * direction(B, D) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on J, C, F, A we get 180 == 2 * direction(J, C) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on A, E, B, E we get 180 == 2 * direction(A, E) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on G, A, B, C we get 180 == 2 * direction(G, A) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on K, F, B, F we get 180 == 2 * direction(K, F) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on B, E, C, E we get 180 == 2 * direction(B, E) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on B, D, G, D we get 180 == 2 * direction(B, D) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on G, E, A, E we get 180 == 2 * direction(G, E) - 2 * direction(A, E) mod 360
By perpendicular_direction_conditions_v0_r on B, C, A, G we get 180 == 2 * direction(B, C) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on F, B, F, J we get 180 == 2 * direction(F, B) - 2 * direction(F, J) mod 360
By perpendicular_direction_conditions_v0_r on G, A, D, B we get 180 == 2 * direction(G, A) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on C, D, D, A we get 180 == 2 * direction(C, D) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on J, C, A, F we get 180 == 2 * direction(J, C) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on J, C, F, B we get 180 == 2 * direction(J, C) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on F, B, K, C we get 180 == 2 * direction(F, B) - 2 * direction(K, C) mod 360
By perpendicular_direction_conditions_v0_r on E, C, E, G we get 180 == 2 * direction(E, C) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on A, G, D, B we get 180 == 2 * direction(A, G) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on B, A, F, K we get 180 == 2 * direction(B, A) - 2 * direction(F, K) mod 360
By perpendicular_direction_conditions_v0_r on F, A, K, J we get 180 == 2 * direction(F, A) - 2 * direction(K, J) mod 360
By perpendicular_direction_conditions_v0_r on B, F, C, K we get 180 == 2 * direction(B, F) - 2 * direction(C, K) mod 360
By perpendicular_direction_conditions_v0_r on A, F, C, J we get 180 == 2 * direction(A, F) - 2 * direction(C, J) mod 360
By perpendicular_direction_conditions_v0_r on B, A, J, F we get 180 == 2 * direction(B, A) - 2 * direction(J, F) mod 360
By perpendicular_direction_conditions_v0_r on A, F, J, F we get 180 == 2 * direction(A, F) - 2 * direction(J, F) mod 360
By perpendicular_direction_conditions_v0_r on K, F, F, A we get 180 == 2 * direction(K, F) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on F, K, B, F we get 180 == 2 * direction(F, K) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on C, D, A, G we get 180 == 2 * direction(C, D) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on G, D, B, C we get 180 == 2 * direction(G, D) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on F, C, B, A we get 180 == 2 * direction(F, C) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on J, F, B, A we get 180 == 2 * direction(J, F) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on F, J, F, B we get 180 == 2 * direction(F, J) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on E, A, E, G we get 180 == 2 * direction(E, A) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on B, A, F, C we get 180 == 2 * direction(B, A) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on J, F, B, F we get 180 == 2 * direction(J, F) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on F, J, B, F we get 180 == 2 * direction(F, J) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on D, B, G, A we get 180 == 2 * direction(D, B) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on K, C, F, A we get 180 == 2 * direction(K, C) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on G, D, D, B we get 180 == 2 * direction(G, D) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on K, C, B, F we get 180 == 2 * direction(K, C) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on K, F, A, F we get 180 == 2 * direction(K, F) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on B, C, G, A we get 180 == 2 * direction(B, C) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on A, E, B, G we get 180 == 2 * direction(A, E) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on B, F, F, K we get 180 == 2 * direction(B, F) - 2 * direction(F, K) mod 360
By perpendicular_direction_conditions_v0_r on E, C, G, E we get 180 == 2 * direction(E, C) - 2 * direction(G, E) mod 360
By perpendicular_direction_conditions_v0_r on B, A, K, J we get 180 == 2 * direction(B, A) - 2 * direction(K, J) mod 360
By perpendicular_direction_conditions_v0_r on D, G, C, D we get 180 == 2 * direction(D, G) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on K, J, F, A we get 180 == 2 * direction(K, J) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on F, C, A, F we get 180 == 2 * direction(F, C) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on G, D, B, D we get 180 == 2 * direction(G, D) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on E, C, B, E we get 180 == 2 * direction(E, C) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on B, F, K, C we get 180 == 2 * direction(B, F) - 2 * direction(K, C) mod 360
By perpendicular_direction_conditions_v0_r on A, F, K, C we get 180 == 2 * direction(A, F) - 2 * direction(K, C) mod 360
By perpendicular_direction_conditions_v0_r on K, J, F, B we get 180 == 2 * direction(K, J) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on D, G, D, B we get 180 == 2 * direction(D, G) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on D, G, B, C we get 180 == 2 * direction(D, G) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on B, E, A, E we get 180 == 2 * direction(B, E) - 2 * direction(A, E) mod 360
By perpendicular_direction_conditions_v0_r on B, F, J, C we get 180 == 2 * direction(B, F) - 2 * direction(J, C) mod 360
By perpendicular_direction_conditions_v0_r on J, C, B, A we get 180 == 2 * direction(J, C) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on F, B, J, F we get 180 == 2 * direction(F, B) - 2 * direction(J, F) mod 360
By perpendicular_direction_conditions_v0_r on G, A, B, D we get 180 == 2 * direction(G, A) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on G, E, E, C we get 180 == 2 * direction(G, E) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on D, A, B, C we get 180 == 2 * direction(D, A) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on F, A, K, C we get 180 == 2 * direction(F, A) - 2 * direction(K, C) mod 360
By perpendicular_direction_conditions_v0_r on G, B, A, E we get 180 == 2 * direction(G, B) - 2 * direction(A, E) mod 360
By perpendicular_direction_conditions_v0_r on F, B, F, C we get 180 == 2 * direction(F, B) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on F, B, C, K we get 180 == 2 * direction(F, B) - 2 * direction(C, K) mod 360
By perpendicular_direction_conditions_v0_r on B, G, E, C we get 180 == 2 * direction(B, G) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on F, A, F, K we get 180 == 2 * direction(F, A) - 2 * direction(F, K) mod 360
By perpendicular_direction_conditions_v0_r on D, G, B, D we get 180 == 2 * direction(D, G) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on B, A, F, J we get 180 == 2 * direction(B, A) - 2 * direction(F, J) mod 360
By perpendicular_direction_conditions_v0_r on J, K, F, A we get 180 == 2 * direction(J, K) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on D, A, D, B we get 180 == 2 * direction(D, A) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on B, F, F, C we get 180 == 2 * direction(B, F) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on K, F, B, A we get 180 == 2 * direction(K, F) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on B, A, K, C we get 180 == 2 * direction(B, A) - 2 * direction(K, C) mod 360
By perpendicular_direction_conditions_v0_r on E, G, A, E we get 180 == 2 * direction(E, G) - 2 * direction(A, E) mod 360
By perpendicular_direction_conditions_v0_r on F, J, B, A we get 180 == 2 * direction(F, J) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on F, A, F, C we get 180 == 2 * direction(F, A) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on A, F, C, K we get 180 == 2 * direction(A, F) - 2 * direction(C, K) mod 360
By perpendicular_direction_conditions_v0_r on G, E, C, E we get 180 == 2 * direction(G, E) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on E, G, E, C we get 180 == 2 * direction(E, G) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on A, F, K, F we get 180 == 2 * direction(A, F) - 2 * direction(K, F) mod 360
By perpendicular_direction_conditions_v0_r on C, D, G, A we get 180 == 2 * direction(C, D) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on B, G, A, E we get 180 == 2 * direction(B, G) - 2 * direction(A, E) mod 360
By perpendicular_direction_conditions_v0_r on E, A, E, B we get 180 == 2 * direction(E, A) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on J, K, B, F we get 180 == 2 * direction(J, K) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on E, B, C, E we get 180 == 2 * direction(E, B) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on D, B, D, G we get 180 == 2 * direction(D, B) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on A, F, J, C we get 180 == 2 * direction(A, F) - 2 * direction(J, C) mod 360
By perpendicular_direction_conditions_v0_r on D, C, G, A we get 180 == 2 * direction(D, C) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on C, E, G, B we get 180 == 2 * direction(C, E) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on K, C, B, A we get 180 == 2 * direction(K, C) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on E, A, B, E we get 180 == 2 * direction(E, A) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on F, A, F, J we get 180 == 2 * direction(F, A) - 2 * direction(F, J) mod 360
By perpendicular_direction_conditions_v0_r on J, C, B, F we get 180 == 2 * direction(J, C) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on E, B, E, C we get 180 == 2 * direction(E, B) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on E, C, B, G we get 180 == 2 * direction(E, C) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on K, C, A, F we get 180 == 2 * direction(K, C) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on E, B, E, A we get 180 == 2 * direction(E, B) - 2 * direction(E, A) mod 360
By perpendicular_direction_conditions_v0_r on F, B, J, K we get 180 == 2 * direction(F, B) - 2 * direction(J, K) mod 360
By perpendicular_direction_conditions_v0_r on D, B, D, A we get 180 == 2 * direction(D, B) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on C, D, D, G we get 180 == 2 * direction(C, D) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on F, A, K, F we get 180 == 2 * direction(F, A) - 2 * direction(K, F) mod 360
By perpendicular_direction_conditions_v0_r on B, C, G, D we get 180 == 2 * direction(B, C) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on A, F, F, K we get 180 == 2 * direction(A, F) - 2 * direction(F, K) mod 360
By perpendicular_direction_conditions_v0_r on F, B, F, K we get 180 == 2 * direction(F, B) - 2 * direction(F, K) mod 360
By perpendicular_direction_conditions_v0_r on C, J, A, F we get 180 == 2 * direction(C, J) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on D, A, B, D we get 180 == 2 * direction(D, A) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on G, D, C, D we get 180 == 2 * direction(G, D) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on B, E, E, C we get 180 == 2 * direction(B, E) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on C, J, B, F we get 180 == 2 * direction(C, J) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on F, C, B, F we get 180 == 2 * direction(F, C) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on K, C, F, B we get 180 == 2 * direction(K, C) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on C, J, F, B we get 180 == 2 * direction(C, J) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on E, G, E, A we get 180 == 2 * direction(E, G) - 2 * direction(E, A) mod 360
By perpendicular_direction_conditions_v0_r on J, F, A, F we get 180 == 2 * direction(J, F) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on E, A, B, G we get 180 == 2 * direction(E, A) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on D, C, G, D we get 180 == 2 * direction(D, C) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on F, A, J, C we get 180 == 2 * direction(F, A) - 2 * direction(J, C) mod 360
By perpendicular_direction_conditions_v0_r on A, E, E, B we get 180 == 2 * direction(A, E) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on F, C, F, A we get 180 == 2 * direction(F, C) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on C, K, B, F we get 180 == 2 * direction(C, K) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on B, F, J, K we get 180 == 2 * direction(B, F) - 2 * direction(J, K) mod 360
By perpendicular_direction_conditions_v0_r on B, F, F, J we get 180 == 2 * direction(B, F) - 2 * direction(F, J) mod 360
By perpendicular_direction_conditions_v0_r on F, J, A, F we get 180 == 2 * direction(F, J) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on A, G, D, C we get 180 == 2 * direction(A, G) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on F, B, K, F we get 180 == 2 * direction(F, B) - 2 * direction(K, F) mod 360
By perpendicular_direction_conditions_v0_r on B, D, D, G we get 180 == 2 * direction(B, D) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on C, E, E, B we get 180 == 2 * direction(C, E) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on C, E, B, G we get 180 == 2 * direction(C, E) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on G, E, E, A we get 180 == 2 * direction(G, E) - 2 * direction(E, A) mod 360
By perpendicular_direction_conditions_v0_r on F, A, J, K we get 180 == 2 * direction(F, A) - 2 * direction(J, K) mod 360
By perpendicular_direction_conditions_v0_r on K, J, A, F we get 180 == 2 * direction(K, J) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on A, E, E, G we get 180 == 2 * direction(A, E) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on B, G, E, A we get 180 == 2 * direction(B, G) - 2 * direction(E, A) mod 360
By perpendicular_direction_conditions_v0_r on A, F, F, J we get 180 == 2 * direction(A, F) - 2 * direction(F, J) mod 360
By perpendicular_direction_conditions_v0_r on G, B, E, C we get 180 == 2 * direction(G, B) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on G, D, D, C we get 180 == 2 * direction(G, D) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on A, G, B, C we get 180 == 2 * direction(A, G) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on C, J, B, A we get 180 == 2 * direction(C, J) - 2 * direction(B, A) mod 360
By collinear_definition on C, D, B we get D in Line(B, C), B in Line(C, D), Line(B, C) == Line(C, D), 0 == 2 * angle(D, C, B) mod 360
By collinear_definition on C, A, E we get A in Line(C, E), E in Line(A, C), Line(A, C) == Line(C, E), 0 == 2 * angle(A, C, E) mod 360
By reverse_direction on C, B we get 180 == direction(C, B) - direction(B, C) mod 360
By internal_angle_bisector_definition_v0_r on C, H, C, G we get Line(G, H) == internal_angle_bisector(C, G, C)
By internal_angle_bisector_definition_v0_r on H, G, H, C we get Line(C, G) == internal_angle_bisector(H, C, H)
By reverse_direction on C, F we get 180 == direction(C, F) - direction(F, C) mod 360
By collinear_definition on C, J, F we get J in Line(C, F), F in Line(C, J), Line(C, F) == Line(C, J), 0 == 2 * angle(J, C, F) mod 360
By collinear_definition on C, K, F we get K in Line(C, F), F in Line(C, K), Line(C, F) == Line(C, K), 0 == 2 * angle(K, C, F) mod 360
By internal_angle_bisector_definition_v0_r on G, C, G, H we get Line(C, H) == internal_angle_bisector(G, H, G)
By collinear_definition on C, F, J we get F in Line(C, J), J in Line(C, F), Line(C, F) == Line(C, J), 0 == 2 * angle(F, C, J) mod 360
By collinear_definition on I, D, K we get D in Line(I, K), K in Line(D, I), Line(D, I) == Line(I, K), 0 == 2 * angle(D, I, K) mod 360
By internal_angle_bisector_definition_v0_r on A, I, A, C we get Line(C, I) == internal_angle_bisector(A, C, A)
By collinear_definition on A, B, F we get B in Line(A, F), F in Line(A, B), Line(A, B) == Line(A, F), 0 == 2 * angle(B, A, F) mod 360
By collinear_definition on A, C, E we get C in Line(A, E), E in Line(A, C), Line(A, C) == Line(A, E), 0 == 2 * angle(C, A, E) mod 360
By internal_angle_bisector_definition_v0_r on A, C, A, I we get Line(C, I) == internal_angle_bisector(A, I, A)
By collinear_definition on I, K, D we get K in Line(D, I), D in Line(I, K), Line(D, I) == Line(I, K), 0 == 2 * angle(K, I, D) mod 360
By collinear_definition on C, E, A we get E in Line(A, C), A in Line(C, E), Line(A, C) == Line(C, E), 0 == 2 * angle(E, C, A) mod 360
By internal_angle_bisector_definition_v0_r on C, A, C, I we get Line(A, I) == internal_angle_bisector(C, I, C)
By collinear_definition on C, F, K we get F in Line(C, K), K in Line(C, F), Line(C, F) == Line(C, K), 0 == 2 * angle(F, C, K) mod 360
By collinear_definition on A, D, G we get D in Line(A, G), G in Line(A, D), Line(A, D) == Line(A, G), 0 == 2 * angle(D, A, G) mod 360
By collinear_definition on A, G, D we get G in Line(A, D), D in Line(A, G), Line(A, D) == Line(A, G), 0 == 2 * angle(G, A, D) mod 360
By internal_angle_bisector_definition_v0_r on C, I, C, A we get Line(A, I) == internal_angle_bisector(C, A, C)
By internal_angle_bisector_definition_v0_r on I, A, I, C we get Line(A, C) == internal_angle_bisector(I, C, I)
By internal_angle_bisector_definition_v0_r on I, C, I, A we get Line(A, C) == internal_angle_bisector(I, A, I)
By internal_angle_bisector_definition_v0_r on G, H, G, C we get Line(C, H) == internal_angle_bisector(G, C, G)
By collinear_definition on C, B, D we get B in Line(C, D), D in Line(B, C), Line(B, C) == Line(C, D), 0 == 2 * angle(B, C, D) mod 360
By collinear_definition on A, E, C we get E in Line(A, C), C in Line(A, E), Line(A, C) == Line(A, E), 0 == 2 * angle(E, A, C) mod 360
By collinear_definition on A, F, B we get F in Line(A, B), B in Line(A, F), Line(A, B) == Line(A, F), 0 == 2 * angle(F, A, B) mod 360
By reverse_direction on A, B we get 180 == direction(A, B) - direction(B, A) mod 360
By reverse_direction on I, D we get 180 == direction(I, D) - direction(D, I) mod 360
By internal_angle_bisector_definition_v0_r on C, G, C, H we get Line(G, H) == internal_angle_bisector(C, H, C)
By internal_angle_bisector_definition_v0_r on H, C, H, G we get Line(C, G) == internal_angle_bisector(H, G, H)
By reverse_direction on A, D we get 180 == direction(A, D) - direction(D, A) mod 360
By same_angle_v2 on D, B, C, G we get angle(B, D, G) == angle(C, D, G) + 180 mod 360
By same_angle_v2 on G, A, D, E we get angle(A, G, E) == angle(D, G, E) + 180 mod 360
By same_angle_v3 on F, A, B, K we get angle(A, F, K) == angle(B, F, K) + 180 mod 360
By same_angle_v3 on F, J, C, A we get angle(J, F, A) == angle(C, F, A) + 180 mod 360
By same_angle_v3 on F, C, J, B we get angle(C, F, B) == angle(J, F, B) + 180 mod 360
By same_angle_v1 on B, D, C, E we get angle(C, B, E) == angle(D, B, E) mod 360
By same_angle_v3 on G, B, E, A we get angle(B, G, A) == angle(E, G, A) + 180 mod 360
By same_angle_v1 on B, E, G, F we get angle(E, B, F) == angle(G, B, F) mod 360
By same_angle_v1 on D, K, I, A we get angle(I, D, A) == angle(K, D, A) mod 360
By same_angle_v0 on B, A, F, G we get angle(A, B, G) == angle(F, B, G) mod 360
By same_angle_v2 on G, E, B, D we get angle(E, G, D) == angle(B, G, D) + 180 mod 360
By same_angle_v3 on K, I, D, C we get angle(I, K, C) == angle(D, K, C) + 180 mod 360
By same_angle_v1 on D, K, I, B we get angle(I, D, B) == angle(K, D, B) mod 360
By same_angle_v0 on B, E, G, D we get angle(E, B, D) == angle(G, B, D) mod 360
By same_angle_v0 on B, G, E, C we get angle(E, B, C) == angle(G, B, C) mod 360
By same_angle_v2 on K, F, C, I we get angle(F, K, I) == angle(C, K, I) + 180 mod 360
By same_angle_v1 on B, C, D, F we get angle(C, B, F) == angle(D, B, F) mod 360
By same_angle_v3 on K, D, I, J we get angle(D, K, J) == angle(I, K, J) + 180 mod 360
By same_angle_v2 on F, B, A, J we get angle(B, F, J) == angle(A, F, J) + 180 mod 360
By same_angle_v1 on D, G, A, B we get angle(A, D, B) == angle(G, D, B) mod 360
By same_angle_v1 on E, G, B, C we get angle(B, E, C) == angle(G, E, C) mod 360
By same_angle_v3 on K, D, I, F we get angle(D, K, F) == angle(I, K, F) + 180 mod 360
By same_angle_v0 on B, F, A, C we get angle(A, B, C) == angle(F, B, C) mod 360
By same_angle_v0 on B, F, A, D we get angle(A, B, D) == angle(F, B, D) mod 360
By same_angle_v2 on D, B, C, A we get angle(B, D, A) == angle(C, D, A) + 180 mod 360
By same_angle_v1 on B, D, C, A we get angle(C, B, A) == angle(D, B, A) mod 360
By same_angle_v0 on D, A, G, K we get angle(A, D, K) == angle(G, D, K) mod 360
By same_angle_v0 on B, A, F, E we get angle(A, B, E) == angle(F, B, E) mod 360
By same_angle_v3 on F, A, B, C we get angle(A, F, C) == angle(B, F, C) + 180 mod 360
By same_angle_v1 on B, E, G, A we get angle(E, B, A) == angle(G, B, A) mod 360
By same_angle_v3 on K, C, F, D we get angle(C, K, D) == angle(F, K, D) + 180 mod 360
By same_angle_v3 on D, B, C, I we get angle(B, D, I) == angle(C, D, I) + 180 mod 360
By same_angle_v2 on E, C, A, B we get angle(C, E, B) == angle(A, E, B) + 180 mod 360
By same_angle_v1 on D, I, K, G we get angle(I, D, G) == angle(K, D, G) mod 360
By same_angle_v1 on B, C, D, G we get angle(C, B, G) == angle(D, B, G) mod 360
By same_angle_v0 on D, G, A, I we get angle(A, D, I) == angle(G, D, I) mod 360
By same_angle_v2 on D, B, C, K we get angle(B, D, K) == angle(C, D, K) + 180 mod 360
By same_angle_v1 on F, C, K, A we get angle(C, F, A) == angle(K, F, A) mod 360
By same_angle_v3 on E, C, A, G we get angle(C, E, G) == angle(A, E, G) + 180 mod 360
By same_angle_v0 on D, K, I, C we get angle(I, D, C) == angle(K, D, C) mod 360
By same_angle_v0 on F, C, K, B we get angle(C, F, B) == angle(K, F, B) mod 360
By same_angle_v0 on E, G, B, A we get angle(B, E, A) == angle(G, E, A) mod 360
By same_angle_v2 on G, D, A, B we get angle(D, G, B) == angle(A, G, B) + 180 mod 360
By same_angle_v0 on D, A, G, C we get angle(A, D, C) == angle(G, D, C) mod 360
By altitude_definition on B, K, F, f we get f == altitude(B, F, K)
By perpendicular_angle_conditions_v0 on C, F, A we get angle(C, F, A) == orientation(A, C, F) mod 360
By altitude_definition on B, C, F, f we get f == altitude(B, C, F)
By perpendicular_angle_conditions_v0 on C, D, G we get angle(C, D, G) == orientation(C, D, G) mod 360
By altitude_definition on B, C, J, f we get f == altitude(B, C, J)
By altitude_definition on J, F, B, k we get k == altitude(J, B, F)
By altitude_definition on A, B, D, i we get i == altitude(A, B, D)
By altitude_definition on C, E, B, h we get h == altitude(C, B, E)
By collinear_definition on B, D, C we get D in Line(B, C), C in Line(B, D), Line(B, C) == Line(B, D), 0 == 2 * angle(D, B, C) mod 360
By altitude_definition on B, G, D, g we get g == altitude(B, D, G)
By perpendicular_angle_conditions_v0 on A, F, K we get angle(A, F, K) == orientation(A, F, K) mod 360
By altitude_definition on C, G, B, h we get h == altitude(C, B, G)
By collinear_definition on B, A, F we get A in Line(B, F), F in Line(A, B), Line(A, B) == Line(B, F), 0 == 2 * angle(A, B, F) mod 360
By altitude_definition on G, C, A, j we get j == altitude(G, A, C)
By collinear_definition on G, D, A we get D in Line(A, G), A in Line(D, G), Line(A, G) == Line(D, G), 0 == 2 * angle(D, G, A) mod 360
By collinear_definition on D, A, G we get A in Line(D, G), G in Line(A, D), Line(A, D) == Line(D, G), 0 == 2 * angle(A, D, G) mod 360
By altitude_definition on I, G, B, h we get h == altitude(I, B, G)
By collinear_definition on B, C, D we get C in Line(B, D), D in Line(B, C), Line(B, C) == Line(B, D), 0 == 2 * angle(C, B, D) mod 360
By altitude_definition on A, J, K, f we get f == altitude(A, J, K)
By altitude_definition on A, C, D, i we get i == altitude(A, C, D)
By collinear_definition on D, C, B we get C in Line(B, D), B in Line(C, D), Line(B, D) == Line(C, D), 0 == 2 * angle(C, D, B) mod 360
By altitude_definition on B, C, I, j we get j == altitude(B, C, I)
By collinear_definition on D, K, I we get K in Line(D, I), I in Line(D, K), Line(D, I) == Line(D, K), 0 == 2 * angle(K, D, I) mod 360
By altitude_definition on J, A, B, k we get k == altitude(J, A, B)
By altitude_definition on A, K, C, f we get f == altitude(A, C, K)
By perpendicular_angle_conditions_v0 on K, F, A we get angle(K, F, A) == orientation(A, K, F) mod 360
By altitude_definition on A, C, J, f we get f == altitude(A, C, J)
By altitude_definition on K, B, F, k we get k == altitude(K, B, F)
By collinear_definition on D, I, K we get I in Line(D, K), K in Line(D, I), Line(D, I) == Line(D, K), 0 == 2 * angle(I, D, K) mod 360
By altitude_definition on B, A, D, g we get g == altitude(B, A, D)
By perpendicular_angle_conditions_v0 on C, D, A we get angle(C, D, A) == orientation(A, C, D) mod 360
By altitude_definition on G, E, A, j we get j == altitude(G, A, E)
By perpendicular_angle_conditions_v0 on J, F, B we get angle(J, F, B) == orientation(B, J, F) mod 360
By altitude_definition on I, E, B, h we get h == altitude(I, B, E)
By altitude_definition on B, J, F, f we get f == altitude(B, F, J)
By altitude_definition on A, F, K, f we get f == altitude(A, F, K)
By altitude_definition on B, E, A, j we get j == altitude(B, A, E)
By altitude_definition on K, B, A, k we get k == altitude(K, A, B)
By perpendicular_angle_conditions_v0 on A, E, G we get angle(A, E, G) == orientation(A, E, G) mod 360
By perpendicular_angle_conditions_v0 on G, D, C we get angle(G, D, C) == orientation(C, G, D) mod 360
By altitude_definition on A, E, G, h we get h == altitude(A, E, G)
By altitude_definition on B, K, C, f we get f == altitude(B, C, K)
By altitude_definition on G, A, I, j we get j == altitude(G, A, I)
By altitude_definition on B, E, C, j we get j == altitude(B, C, E)
By collinear_definition on G, E, B we get E in Line(B, G), B in Line(E, G), Line(B, G) == Line(E, G), 0 == 2 * angle(E, G, B) mod 360
By altitude_definition on A, F, J, f we get f == altitude(A, F, J)
By perpendicular_angle_conditions_v0 on B, F, K we get angle(B, F, K) == orientation(B, F, K) mod 360
By altitude_definition on G, C, I, j we get j == altitude(G, C, I)
By altitude_definition on G, C, D, i we get i == altitude(G, C, D)
By collinear_definition on F, B, A we get B in Line(A, F), A in Line(B, F), Line(A, F) == Line(B, F), 0 == 2 * angle(B, F, A) mod 360
By altitude_definition on I, E, G, h we get h == altitude(I, E, G)
By perpendicular_angle_conditions_v0 on K, F, B we get angle(K, F, B) == orientation(B, K, F) mod 360
By collinear_definition on F, C, K we get C in Line(F, K), K in Line(C, F), Line(C, F) == Line(F, K), 0 == 2 * angle(C, F, K) mod 360
By collinear_definition on B, F, A we get F in Line(A, B), A in Line(B, F), Line(A, B) == Line(B, F), 0 == 2 * angle(F, B, A) mod 360
By collinear_definition on E, B, G we get B in Line(E, G), G in Line(B, E), Line(B, E) == Line(E, G), 0 == 2 * angle(B, E, G) mod 360
By perpendicular_angle_conditions_v0 on G, D, B we get angle(G, D, B) == orientation(B, G, D) mod 360
By collinear_definition on D, G, A we get G in Line(A, D), A in Line(D, G), Line(A, D) == Line(D, G), 0 == 2 * angle(G, D, A) mod 360
By perpendicular_angle_conditions_v0 on C, F, B we get angle(C, F, B) == orientation(B, C, F) mod 360
By perpendicular_angle_conditions_v0 on B, E, C we get angle(B, E, C) == orientation(B, E, C) mod 360
By altitude_definition on J, F, A, k we get k == altitude(J, A, F)
By altitude_definition on G, B, C, i we get i == altitude(G, B, C)
By perpendicular_angle_conditions_v0 on C, E, G we get angle(C, E, G) == orientation(C, E, G) mod 360
By altitude_definition on G, D, B, i we get i == altitude(G, B, D)
By perpendicular_angle_conditions_v0 on B, E, A we get angle(B, E, A) == orientation(A, B, E) mod 360
By altitude_definition on K, F, A, k we get k == altitude(K, A, F)
By perpendicular_angle_conditions_v0 on B, F, C we get angle(B, F, C) == orientation(B, F, C) mod 360
By perpendicular_angle_conditions_v0 on J, F, A we get angle(J, F, A) == orientation(A, J, F) mod 360
By altitude_definition on C, B, F, k we get k == altitude(C, B, F)
By altitude_definition on A, C, F, f we get f == altitude(A, C, F)
By collinear_definition on G, B, E we get B in Line(E, G), E in Line(B, G), Line(B, G) == Line(E, G), 0 == 2 * angle(B, G, E) mod 360
By altitude_definition on C, G, A, g we get g == altitude(C, A, G)
By collinear_definition on F, K, C we get K in Line(C, F), C in Line(F, K), Line(C, F) == Line(F, K), 0 == 2 * angle(K, F, C) mod 360
By collinear_definition on E, A, C we get A in Line(C, E), C in Line(A, E), Line(A, E) == Line(C, E), 0 == 2 * angle(A, E, C) mod 360
By perpendicular_angle_conditions_v0 on G, E, C we get angle(G, E, C) == orientation(C, G, E) mod 360
By perpendicular_angle_conditions_v0 on A, F, J we get angle(A, F, J) == orientation(A, F, J) mod 360
By altitude_definition on B, I, A, j we get j == altitude(B, A, I)
By perpendicular_angle_conditions_v0 on B, F, J we get angle(B, F, J) == orientation(B, F, J) mod 360
By perpendicular_angle_conditions_v0 on A, D, C we get angle(A, D, C) == orientation(A, D, C) mod 360
By perpendicular_angle_conditions_v0 on C, E, B we get angle(C, E, B) == orientation(B, C, E) mod 360
By perpendicular_angle_conditions_v0 on A, D, B we get angle(A, D, B) == orientation(A, D, B) mod 360
By altitude_definition on C, A, F, k we get k == altitude(C, A, F)
By altitude_definition on A, G, B, h we get h == altitude(A, B, G)
By perpendicular_angle_conditions_v0 on A, E, B we get angle(A, E, B) == orientation(A, E, B) mod 360
By collinear_definition on F, J, C we get J in Line(C, F), C in Line(F, J), Line(C, F) == Line(F, J), 0 == 2 * angle(J, F, C) mod 360
By collinear_definition on E, G, B we get G in Line(B, E), B in Line(E, G), Line(B, E) == Line(E, G), 0 == 2 * angle(G, E, B) mod 360
By collinear_definition on K, F, C we get F in Line(C, K), C in Line(F, K), Line(C, K) == Line(F, K), 0 == 2 * angle(F, K, C) mod 360
By altitude_definition on B, K, J, f we get f == altitude(B, J, K)
By altitude_definition on C, E, G, h we get h == altitude(C, E, G)
By collinear_definition on E, C, A we get C in Line(A, E), A in Line(C, E), Line(A, E) == Line(C, E), 0 == 2 * angle(C, E, A) mod 360
By collinear_definition on B, E, G we get E in Line(B, G), G in Line(B, E), Line(B, E) == Line(B, G), 0 == 2 * angle(E, B, G) mod 360
By altitude_definition on A, B, E, h we get h == altitude(A, B, E)
By altitude_definition on G, C, E, j we get j == altitude(G, C, E)
By collinear_definition on K, D, I we get D in Line(I, K), I in Line(D, K), Line(D, K) == Line(I, K), 0 == 2 * angle(D, K, I) mod 360
By collinear_definition on J, C, F we get C in Line(F, J), F in Line(C, J), Line(C, J) == Line(F, J), 0 == 2 * angle(C, J, F) mod 360
By collinear_definition on G, A, D we get A in Line(D, G), D in Line(A, G), Line(A, G) == Line(D, G), 0 == 2 * angle(A, G, D) mod 360
By collinear_definition on K, I, D we get I in Line(D, K), D in Line(I, K), Line(D, K) == Line(I, K), 0 == 2 * angle(I, K, D) mod 360
By collinear_definition on K, C, F we get C in Line(F, K), F in Line(C, K), Line(C, K) == Line(F, K), 0 == 2 * angle(C, K, F) mod 360
By perpendicular_angle_conditions_v0 on B, D, G we get angle(B, D, G) == orientation(B, D, G) mod 360
By altitude_definition on B, G, A, g we get g == altitude(B, A, G)
By perpendicular_angle_conditions_v0 on G, E, A we get angle(G, E, A) == orientation(A, G, E) mod 360
By collinear_definition on J, F, C we get F in Line(C, J), C in Line(F, J), Line(C, J) == Line(F, J), 0 == 2 * angle(F, J, C) mod 360
By collinear_definition on F, C, J we get C in Line(F, J), J in Line(C, F), Line(C, F) == Line(F, J), 0 == 2 * angle(C, F, J) mod 360
By collinear_definition on B, G, E we get G in Line(B, E), E in Line(B, G), Line(B, E) == Line(B, G), 0 == 2 * angle(G, B, E) mod 360
By altitude_definition on C, D, A, g we get g == altitude(C, A, D)
By perpendicular_angle_conditions_v0 on A, F, C we get angle(A, F, C) == orientation(A, F, C) mod 360
By altitude_definition on C, G, D, g we get g == altitude(C, D, G)
By perpendicular_angle_conditions_v0 on B, D, A we get angle(B, D, A) == orientation(A, B, D) mod 360
By collinear_definition on F, A, B we get A in Line(B, F), B in Line(A, F), Line(A, F) == Line(B, F), 0 == 2 * angle(A, F, B) mod 360
By collinear_definition on D, B, C we get B in Line(C, D), C in Line(B, D), Line(B, D) == Line(C, D), 0 == 2 * angle(B, D, C) mod 360
By right_triangle_circumcenter_v1 on C, F, A we get midpoint(A, C) == circumcenter(A, C, F)
By right_triangle_circumcenter_v1 on A, D, C we get midpoint(A, C) == circumcenter(A, C, D)
By right_triangle_circumcenter_v1 on C, E, G we get midpoint(C, G) == circumcenter(C, E, G)
By right_triangle_circumcenter_v1 on G, D, C we get midpoint(C, G) == circumcenter(C, D, G)
By concurrent_sufficient_conditions on h, Line(I, J), Line(H, I) we get concurrent(h, Line(H, I), Line(I, J))
By line_intersection_definition on orthocenter(A, B, C), j, i we get orthocenter(A, B, C) == line_intersection(i, j)
By concyclic_sufficient_conditions_v0 on A, F, C, D we get concyclic(A, C, D, F)
By concurrent_sufficient_conditions on Line(A, J), i, Line(A, H) we get concurrent(i, Line(A, H), Line(A, J))
By concurrent_sufficient_conditions on Line(A, H), Line(H, I), Line(H, J) we get concurrent(Line(A, H), Line(H, I), Line(H, J))
By concurrent_sufficient_conditions on g, h, Line(C, G) we get concurrent(g, h, Line(C, G))
By concurrent_sufficient_conditions on Line(A, J), f, i we get concurrent(f, i, Line(A, J))
By concurrent_sufficient_conditions on Line(A, J), f, Line(A, H) we get concurrent(f, Line(A, H), Line(A, J))
By line_definition on K, orthocenter(A, B, C), k we get k == Line(K, orthocenter(A, B, C))
By concurrent_sufficient_conditions on h, Line(H, I), l we get concurrent(h, l, Line(H, I))
By concurrent_sufficient_conditions on Line(H, I), Line(C, G), Line(A, H) we get concurrent(Line(A, H), Line(C, G), Line(H, I))
By concurrent_sufficient_conditions on Line(I, J), Line(H, J), Line(A, J) we get concurrent(Line(A, J), Line(H, J), Line(I, J))
By line_definition on J, orthocenter(A, B, C), k we get k == Line(J, orthocenter(A, B, C))
By concurrent_sufficient_conditions on h, f, Line(A, H) we get concurrent(f, h, Line(A, H))
By concurrent_sufficient_conditions on f, Line(A, J), h we get concurrent(f, h, Line(A, J))
By concyclic_sufficient_conditions_v1 on C, D, G, E we get concyclic(C, D, E, G)
By concurrent_sufficient_conditions on h, i, Line(A, H) we get concurrent(h, i, Line(A, H))
By concurrent_sufficient_conditions on h, Line(A, J), Line(A, H) we get concurrent(h, Line(A, H), Line(A, J))
By concurrent_sufficient_conditions on Line(I, J), l, h we get concurrent(h, l, Line(I, J))
By concurrent_sufficient_conditions on g, Line(C, G), h we get concurrent(g, h, Line(C, G))
By concurrent_sufficient_conditions on i, Line(A, J), Line(A, H) we get concurrent(i, Line(A, H), Line(A, J))
By line_definition on orthocenter(A, B, C), F, k we get k == Line(F, orthocenter(A, B, C))
By concurrent_sufficient_conditions on k, Line(I, J), Line(A, J) we get concurrent(k, Line(A, J), Line(I, J))
By concurrent_sufficient_conditions on Line(I, J), Line(A, J), k we get concurrent(k, Line(A, J), Line(I, J))
By concurrent_sufficient_conditions on Line(A, J), f, h we get concurrent(f, h, Line(A, J))
By line_definition on A, orthocenter(A, B, C), i we get i == Line(A, orthocenter(A, B, C))
By concurrent_sufficient_conditions on Line(H, I), l, Line(I, J) we get concurrent(l, Line(H, I), Line(I, J))
By concurrent_sufficient_conditions on i, j, Line(C, G) we get concurrent(i, j, Line(C, G))
By concurrent_sufficient_conditions on h, l, Line(I, J) we get concurrent(h, l, Line(I, J))
By concurrent_sufficient_conditions on Line(I, J), Line(H, I), l we get concurrent(l, Line(H, I), Line(I, J))
By concurrent_sufficient_conditions on l, Line(H, I), Line(I, J) we get concurrent(l, Line(H, I), Line(I, J))
By concyclic_sufficient_conditions_v0 on B, E, A, D we get concyclic(A, B, D, E)
By concurrent_sufficient_conditions on l, Line(H, I), h we get concurrent(h, l, Line(H, I))
By concurrent_sufficient_conditions on Line(H, J), Line(I, J), Line(A, J) we get concurrent(Line(A, J), Line(H, J), Line(I, J))
By concurrent_sufficient_conditions on Line(A, J), k, Line(I, J) we get concurrent(k, Line(A, J), Line(I, J))
By concurrent_sufficient_conditions on i, h, Line(A, H) we get concurrent(h, i, Line(A, H))
By concurrent_sufficient_conditions on f, Line(A, H), h we get concurrent(f, h, Line(A, H))
By concurrent_sufficient_conditions on i, f, Line(A, H) we get concurrent(f, i, Line(A, H))
By concurrent_sufficient_conditions on Line(A, J), i, h we get concurrent(h, i, Line(A, J))
By concurrent_sufficient_conditions on h, Line(A, H), f we get concurrent(f, h, Line(A, H))
By concurrent_sufficient_conditions on Line(A, H), Line(A, J), i we get concurrent(i, Line(A, H), Line(A, J))
By concurrent_sufficient_conditions on j, i, Line(C, G) we get concurrent(i, j, Line(C, G))
By concurrent_sufficient_conditions on f, h, Line(A, J) we get concurrent(f, h, Line(A, J))
By line_definition on orthocenter(A, B, C), C, k we get k == Line(C, orthocenter(A, B, C))
By concurrent_sufficient_conditions on Line(C, G), h, g we get concurrent(g, h, Line(C, G))
By concyclic_sufficient_conditions_v0 on C, E, B, F we get concyclic(B, C, E, F)
By concurrent_sufficient_conditions on Line(A, H), f, i we get concurrent(f, i, Line(A, H))
By concurrent_sufficient_conditions on h, i, Line(A, J) we get concurrent(h, i, Line(A, J))
By concurrent_sufficient_conditions on i, Line(A, H), h we get concurrent(h, i, Line(A, H))
By concurrent_sufficient_conditions on Line(A, J), Line(I, J), k we get concurrent(k, Line(A, J), Line(I, J))
By concurrent_sufficient_conditions on Line(C, G), j, i we get concurrent(i, j, Line(C, G))
By concurrent_sufficient_conditions on Line(A, H), Line(A, J), h we get concurrent(h, Line(A, H), Line(A, J))
By line_definition on E, orthocenter(A, B, C), j we get j == Line(E, orthocenter(A, B, C))
By concurrent_sufficient_conditions on Line(A, H), Line(A, J), f we get concurrent(f, Line(A, H), Line(A, J))
By concurrent_sufficient_conditions on Line(H, I), Line(I, J), h we get concurrent(h, Line(H, I), Line(I, J))
By concurrent_sufficient_conditions on Line(A, J), Line(A, H), i we get concurrent(i, Line(A, H), Line(A, J))
By concurrent_sufficient_conditions on Line(C, G), g, h we get concurrent(g, h, Line(C, G))
By concurrent_sufficient_conditions on Line(C, G), i, j we get concurrent(i, j, Line(C, G))
By concurrent_sufficient_conditions on Line(C, G), Line(H, I), Line(A, H) we get concurrent(Line(A, H), Line(C, G), Line(H, I))
By concurrent_sufficient_conditions on Line(I, J), Line(H, I), h we get concurrent(h, Line(H, I), Line(I, J))
By concurrent_sufficient_conditions on f, i, Line(A, J) we get concurrent(f, i, Line(A, J))
By concurrent_sufficient_conditions on Line(A, H), h, i we get concurrent(h, i, Line(A, H))
By concurrent_sufficient_conditions on Line(A, H), Line(H, J), Line(H, I) we get concurrent(Line(A, H), Line(H, I), Line(H, J))
By concurrent_sufficient_conditions on Line(A, J), Line(H, J), Line(I, J) we get concurrent(Line(A, J), Line(H, J), Line(I, J))
By concurrent_sufficient_conditions on Line(C, G), Line(A, H), Line(H, I) we get concurrent(Line(A, H), Line(C, G), Line(H, I))
By concurrent_sufficient_conditions on Line(H, I), Line(A, H), Line(H, J) we get concurrent(Line(A, H), Line(H, I), Line(H, J))
By concurrent_sufficient_conditions on l, Line(I, J), h we get concurrent(h, l, Line(I, J))
By concurrent_sufficient_conditions on Line(I, J), h, l we get concurrent(h, l, Line(I, J))
By concurrent_sufficient_conditions on i, h, Line(A, J) we get concurrent(h, i, Line(A, J))
By concurrent_sufficient_conditions on Line(A, H), h, Line(A, J) we get concurrent(h, Line(A, H), Line(A, J))
By line_definition on D, orthocenter(A, B, C), i we get i == Line(D, orthocenter(A, B, C))
By concurrent_sufficient_conditions on Line(H, I), Line(H, J), Line(A, H) we get concurrent(Line(A, H), Line(H, I), Line(H, J))
By concurrent_sufficient_conditions on l, Line(I, J), Line(H, I) we get concurrent(l, Line(H, I), Line(I, J))
By concurrent_sufficient_conditions on h, l, Line(H, I) we get concurrent(h, l, Line(H, I))
By concurrent_sufficient_conditions on Line(A, H), i, Line(A, J) we get concurrent(i, Line(A, H), Line(A, J))
By concurrent_sufficient_conditions on h, g, Line(C, G) we get concurrent(g, h, Line(C, G))
By concurrent_sufficient_conditions on Line(A, H), f, Line(A, J) we get concurrent(f, Line(A, H), Line(A, J))
By concurrent_sufficient_conditions on Line(I, J), Line(A, J), Line(H, J) we get concurrent(Line(A, J), Line(H, J), Line(I, J))
By concurrent_sufficient_conditions on Line(A, J), h, i we get concurrent(h, i, Line(A, J))
By concurrent_sufficient_conditions on i, Line(A, H), f we get concurrent(f, i, Line(A, H))
By concurrent_sufficient_conditions on f, i, Line(A, H) we get concurrent(f, i, Line(A, H))
By concurrent_sufficient_conditions on Line(A, J), h, f we get concurrent(f, h, Line(A, J))
By concurrent_sufficient_conditions on Line(A, J), Line(I, J), Line(H, J) we get concurrent(Line(A, J), Line(H, J), Line(I, J))
By concurrent_sufficient_conditions on h, Line(C, G), g we get concurrent(g, h, Line(C, G))
By concurrent_sufficient_conditions on k, Line(A, J), Line(I, J) we get concurrent(k, Line(A, J), Line(I, J))
By concurrent_sufficient_conditions on f, Line(A, J), Line(A, H) we get concurrent(f, Line(A, H), Line(A, J))
By concurrent_sufficient_conditions on Line(H, J), Line(H, I), Line(A, H) we get concurrent(Line(A, H), Line(H, I), Line(H, J))
By concurrent_sufficient_conditions on l, h, Line(I, J) we get concurrent(h, l, Line(I, J))
By concurrent_sufficient_conditions on l, h, Line(H, I) we get concurrent(h, l, Line(H, I))
By concurrent_sufficient_conditions on i, Line(A, J), f we get concurrent(f, i, Line(A, J))
By concurrent_sufficient_conditions on Line(H, I), Line(A, H), Line(C, G) we get concurrent(Line(A, H), Line(C, G), Line(H, I))
By concurrent_sufficient_conditions on j, Line(C, G), i we get concurrent(i, j, Line(C, G))
By concurrent_sufficient_conditions on h, Line(A, H), i we get concurrent(h, i, Line(A, H))
By concurrent_sufficient_conditions on f, Line(A, H), i we get concurrent(f, i, Line(A, H))
By concurrent_sufficient_conditions on Line(I, J), k, Line(A, J) we get concurrent(k, Line(A, J), Line(I, J))
By concurrent_sufficient_conditions on Line(A, J), i, f we get concurrent(f, i, Line(A, J))
By concurrent_sufficient_conditions on Line(H, I), h, Line(I, J) we get concurrent(h, Line(H, I), Line(I, J))
By concurrent_sufficient_conditions on h, Line(H, I), Line(I, J) we get concurrent(h, Line(H, I), Line(I, J))
By line_definition on B, orthocenter(A, B, C), j we get j == Line(B, orthocenter(A, B, C))
By concurrent_sufficient_conditions on f, h, Line(A, H) we get concurrent(f, h, Line(A, H))
By concurrent_sufficient_conditions on Line(H, J), Line(A, H), Line(H, I) we get concurrent(Line(A, H), Line(H, I), Line(H, J))
By concurrent_sufficient_conditions on Line(A, H), Line(H, I), Line(C, G) we get concurrent(Line(A, H), Line(C, G), Line(H, I))
By concurrent_sufficient_conditions on Line(A, H), i, h we get concurrent(h, i, Line(A, H))
By concurrent_sufficient_conditions on Line(A, H), Line(C, G), Line(H, I) we get concurrent(Line(A, H), Line(C, G), Line(H, I))
By concurrent_sufficient_conditions on Line(A, J), Line(A, H), h we get concurrent(h, Line(A, H), Line(A, J))
By concurrent_sufficient_conditions on h, Line(I, J), l we get concurrent(h, l, Line(I, J))
By concurrent_sufficient_conditions on h, Line(A, H), Line(A, J) we get concurrent(h, Line(A, H), Line(A, J))
By concurrent_sufficient_conditions on Line(H, I), l, h we get concurrent(h, l, Line(H, I))
By concurrent_sufficient_conditions on Line(A, H), f, h we get concurrent(f, h, Line(A, H))
By concurrent_sufficient_conditions on f, Line(A, H), Line(A, J) we get concurrent(f, Line(A, H), Line(A, J))
By concurrent_sufficient_conditions on i, f, Line(A, J) we get concurrent(f, i, Line(A, J))
By concurrent_sufficient_conditions on i, Line(A, H), Line(A, J) we get concurrent(i, Line(A, H), Line(A, J))
By concurrent_sufficient_conditions on Line(H, J), Line(A, J), Line(I, J) we get concurrent(Line(A, J), Line(H, J), Line(I, J))
By concurrent_sufficient_conditions on Line(I, J), l, Line(H, I) we get concurrent(l, Line(H, I), Line(I, J))
By concurrent_sufficient_conditions on Line(A, H), i, f we get concurrent(f, i, Line(A, H))
By concurrent_sufficient_conditions on i, Line(A, J), h we get concurrent(h, i, Line(A, J))
By concurrent_sufficient_conditions on Line(H, I), h, l we get concurrent(h, l, Line(H, I))
By concurrent_sufficient_conditions on Line(A, J), Line(A, H), f we get concurrent(f, Line(A, H), Line(A, J))
By concurrent_sufficient_conditions on h, f, Line(A, J) we get concurrent(f, h, Line(A, J))
By concurrent_sufficient_conditions on Line(A, J), h, Line(A, H) we get concurrent(h, Line(A, H), Line(A, J))
By concurrent_sufficient_conditions on h, Line(A, J), i we get concurrent(h, i, Line(A, J))
By concurrent_sufficient_conditions on Line(H, I), Line(I, J), l we get concurrent(l, Line(H, I), Line(I, J))
By concurrent_sufficient_conditions on Line(A, H), h, f we get concurrent(f, h, Line(A, H))
By concurrent_sufficient_conditions on Line(I, J), h, Line(H, I) we get concurrent(h, Line(H, I), Line(I, J))
By concurrent_sufficient_conditions on i, Line(C, G), j we get concurrent(i, j, Line(C, G))
By concurrent_sufficient_conditions on h, Line(A, J), f we get concurrent(f, h, Line(A, J))
By concurrent_sufficient_conditions on f, Line(A, J), i we get concurrent(f, i, Line(A, J))
By radical_axis_of_intersecting_circles_v0 on D, C, Circle(C, D, G), Circle(A, C, D) we get Line(C, D) == radical_axis(Circle(A, C, D), Circle(C, D, G))
By line_intersection_definition on orthocenter(A, B, C), i, k we get orthocenter(A, B, C) == line_intersection(i, k)
By perpendicular_line_definition on orthocenter(A, B, C), i, g we get i == perpendicular_line(orthocenter(A, B, C), g)
By perpendicular_line_definition on orthocenter(A, B, C), j, h we get j == perpendicular_line(orthocenter(A, B, C), h)
By perpendicular_line_definition on orthocenter(A, B, C), k, f we get k == perpendicular_line(orthocenter(A, B, C), f)
By line_intersection_definition on orthocenter(A, B, C), k, j we get orthocenter(A, B, C) == line_intersection(j, k)
By line_unique_intersection on i, j, orthocenter(A, B, C), G we get G == orthocenter(A, B, C)
By same_angle_v1 on J, F, K, I we get angle(F, J, I) == angle(K, J, I) mod 360
By projection_definition on I, E, j we get E == projection(I, j)
By same_angle_v3 on K, C, J, D we get angle(C, K, D) == angle(J, K, D) + 180 mod 360
By same_angle_v0 on K, F, J, I we get angle(F, K, I) == angle(J, K, I) mod 360
By same_angle_v1 on J, C, K, A we get angle(C, J, A) == angle(K, J, A) mod 360
By same_angle_v1 on J, C, K, I we get angle(C, J, I) == angle(K, J, I) mod 360
By same_angle_v1 on J, K, F, A we get angle(F, J, A) == angle(K, J, A) mod 360
By between_imply_not_between on A, G, D we get collinear_and_not_between(D, A, G)
By same_angle_v1 on K, F, J, D we get angle(F, K, D) == angle(J, K, D) mod 360
By same_angle_v2 on K, J, C, I we get angle(J, K, I) == angle(C, K, I) + 180 mod 360
By between_imply_not_between on D, G, A we get collinear_and_not_between(A, D, G)
By between_imply_not_between on B, D, C we get collinear_and_not_between(C, B, D)
By between_imply_not_between on A, E, C we get collinear_and_not_between(C, A, E)
By between_imply_not_between on B, G, E we get collinear_and_not_between(E, B, G)
By between_imply_not_between on F, K, C we get collinear_and_not_between(C, F, K)
By between_imply_not_between on D, K, I we get collinear_and_not_between(I, D, K)
By between_imply_not_between on C, F, J we get collinear_and_not_between(F, C, J)
By between_imply_not_between on J, F, C we get collinear_and_not_between(C, J, F)
By between_imply_not_between on B, F, A we get collinear_and_not_between(A, B, F)
By circle_radius_v0_r on A, Circle(A, C, D) we get radius(Circle(A, C, D)) == distance(A, center(Circle(A, C, D)))
By between_imply_not_between on C, D, B we get collinear_and_not_between(B, C, D)
By between_imply_not_between on C, K, F we get collinear_and_not_between(F, C, K)
By between_imply_not_between on A, F, B we get collinear_and_not_between(B, A, F)
By between_imply_not_between on I, K, D we get collinear_and_not_between(D, I, K)
By between_imply_not_between on C, E, A we get collinear_and_not_between(A, C, E)
By between_imply_not_between on E, G, B we get collinear_and_not_between(B, E, G)
By circle_radius_v0_r on A, Circle(A, C, F) we get radius(Circle(A, C, F)) == distance(A, center(Circle(A, C, F)))
By circle_radius_v0_r on C, Circle(C, E, G) we get radius(Circle(C, E, G)) == distance(C, center(Circle(C, E, G)))
By circle_radius_v0_r on D, Circle(C, D, G) we get radius(Circle(C, D, G)) == distance(D, center(Circle(C, D, G)))
By circle_radius_v0_r on C, Circle(C, D, G) we get radius(Circle(C, D, G)) == distance(C, center(Circle(C, D, G)))
By circle_radius_v0_r on D, Circle(A, C, D) we get radius(Circle(A, C, D)) == distance(D, center(Circle(A, C, D)))
By circle_radius_v0_r on C, Circle(A, C, D) we get radius(Circle(A, C, D)) == distance(C, center(Circle(A, C, D)))
By circle_radius_v0_r on G, Circle(C, D, G) we get radius(Circle(C, D, G)) == distance(G, center(Circle(C, D, G)))
By circle_radius_v0_r on E, Circle(C, E, G) we get radius(Circle(C, E, G)) == distance(E, center(Circle(C, E, G)))
By circle_radius_v0_r on F, Circle(A, C, F) we get radius(Circle(A, C, F)) == distance(F, center(Circle(A, C, F)))
By circle_radius_v0_r on G, Circle(C, E, G) we get radius(Circle(C, E, G)) == distance(G, center(Circle(C, E, G)))
By circle_radius_v0_r on C, Circle(A, C, F) we get radius(Circle(A, C, F)) == distance(C, center(Circle(A, C, F)))
By angle_to_center on G, C, E, Circle(C, E, G) we get 2 * angle(G, C, E) == angle(G, center(Circle(C, E, G)), E) mod 360
By angle_to_center on G, C, D, Circle(C, D, G) we get 2 * angle(G, C, D) == angle(G, center(Circle(C, D, G)), D) mod 360
By angle_to_center on F, A, C, Circle(A, C, F) we get 2 * angle(F, A, C) == angle(F, center(Circle(A, C, F)), C) mod 360
By angle_to_center on C, G, E, Circle(C, E, G) we get 2 * angle(C, G, E) == angle(C, center(Circle(C, E, G)), E) mod 360
By angle_to_center on F, C, A, Circle(A, C, F) we get 2 * angle(F, C, A) == angle(F, center(Circle(A, C, F)), A) mod 360
By same_angle_v1 on I, A, E, D we get angle(A, I, D) == angle(E, I, D) mod 360
By perpendicular_direction_conditions_v0_r on I, E, G, B we get 180 == 2 * direction(I, E) - 2 * direction(G, B) mod 360
By angle_to_center on D, C, A, Circle(A, C, D) we get 2 * angle(D, C, A) == angle(D, center(Circle(A, C, D)), A) mod 360
By angle_to_center on D, G, C, Circle(C, D, G) we get 2 * angle(D, G, C) == angle(D, center(Circle(C, D, G)), C) mod 360
By angle_to_center on A, C, F, Circle(A, C, F) we get 2 * angle(A, C, F) == angle(A, center(Circle(A, C, F)), F) mod 360
By angle_to_center on C, A, D, Circle(A, C, D) we get 2 * angle(C, A, D) == angle(C, center(Circle(A, C, D)), D) mod 360
By angle_to_center on E, C, G, Circle(C, E, G) we get 2 * angle(E, C, G) == angle(E, center(Circle(C, E, G)), G) mod 360
By same_angle_v3 on E, I, A, G we get angle(I, E, G) == angle(A, E, G) + 180 mod 360
By angle_to_center on E, G, C, Circle(C, E, G) we get 2 * angle(E, G, C) == angle(E, center(Circle(C, E, G)), C) mod 360
By angle_to_center on A, C, D, Circle(A, C, D) we get 2 * angle(A, C, D) == angle(A, center(Circle(A, C, D)), D) mod 360
By angle_to_center on C, A, F, Circle(A, C, F) we get 2 * angle(C, A, F) == angle(C, center(Circle(A, C, F)), F) mod 360
By angle_to_center on D, A, C, Circle(A, C, D) we get 2 * angle(D, A, C) == angle(D, center(Circle(A, C, D)), C) mod 360
By angle_to_center on C, G, D, Circle(C, D, G) we get 2 * angle(C, G, D) == angle(C, center(Circle(C, D, G)), D) mod 360
By angle_to_center on D, C, G, Circle(C, D, G) we get 2 * angle(D, C, G) == angle(D, center(Circle(C, D, G)), G) mod 360
By same_angle_v1 on I, E, A, K we get angle(A, I, K) == angle(E, I, K) mod 360
By same_angle_v2 on E, I, A, B we get angle(I, E, B) == angle(A, E, B) + 180 mod 360
By same_angle_v0 on E, I, C, G we get angle(C, E, G) == angle(I, E, G) mod 360
By same_angle_v2 on I, C, E, K we get angle(C, I, K) == angle(E, I, K) + 180 mod 360
By same_angle_v1 on I, E, A, H we get angle(A, I, H) == angle(E, I, H) mod 360
By same_angle_v0 on I, K, D, E we get angle(D, I, E) == angle(K, I, E) mod 360
By same_angle_v0 on E, C, I, B we get angle(C, E, B) == angle(I, E, B) mod 360
By same_angle_v2 on I, C, E, H we get angle(C, I, H) == angle(E, I, H) + 180 mod 360
By perpendicular_direction_conditions_v0_r on B, E, E, I we get 180 == 2 * direction(B, E) - 2 * direction(E, I) mod 360
By perpendicular_direction_conditions_v0_r on E, I, G, E we get 180 == 2 * direction(E, I) - 2 * direction(G, E) mod 360
By same_angle_v1 on I, E, A, J we get angle(A, I, J) == angle(E, I, J) mod 360
By same_angle_v2 on I, C, E, D we get angle(C, I, D) == angle(E, I, D) + 180 mod 360
By same_angle_v2 on I, C, E, J we get angle(C, I, J) == angle(E, I, J) + 180 mod 360
By perpendicular_direction_conditions_v0_r on I, E, G, E we get 180 == 2 * direction(I, E) - 2 * direction(G, E) mod 360
By in_imply_collinear on orthocenter(A, B, C), F, J we get collinear(F, J, orthocenter(A, B, C))
By perpendicular_direction_conditions_v0_r on E, I, E, G we get 180 == 2 * direction(E, I) - 2 * direction(E, G) mod 360
By between_imply_segment_sum on C, F, J we get distance(C, J) == distance(C, F) + distance(F, J)
By perpendicular_direction_conditions_v0_r on E, B, I, E we get 180 == 2 * direction(E, B) - 2 * direction(I, E) mod 360
By same_angle_v1 on E, B, G, I we get angle(B, E, I) == angle(G, E, I) mod 360
By perpendicular_direction_conditions_v0_r on E, B, E, I we get 180 == 2 * direction(E, B) - 2 * direction(E, I) mod 360
By divide_by_2_mod_180_v0 on A, B, E, J, C, A we get angle(A, B, E) == angle(J, C, A) mod 360
By perpendicular_direction_conditions_v0_r on I, E, E, B we get 180 == 2 * direction(I, E) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on I, E, B, G we get 180 == 2 * direction(I, E) - 2 * direction(B, G) mod 360
By divide_by_2_mod_180_v2 on D, C, A, A, G, B we get angle(D, C, A) == angle(A, G, B) + 180 mod 360
By divide_by_2_mod_180_v1 on I, C, K, E, B, A we get angle(E, B, A) == angle(I, C, K) mod 360
By orthocenter_concurrency on B, A, G we get orthocenter(A, B, G) in altitude(B, A, G), orthocenter(A, B, G) in altitude(A, B, G), orthocenter(A, B, G) in altitude(G, A, B)
By perpendicular_direction_conditions_v0_r on G, E, E, I we get 180 == 2 * direction(G, E) - 2 * direction(E, I) mod 360
By divide_by_2_mod_180_v1 on E, C, J, G, B, F we get angle(E, C, J) == angle(G, B, F) mod 360
By perpendicular_direction_conditions_v0_r on E, I, E, B we get 180 == 2 * direction(E, I) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on E, G, I, E we get 180 == 2 * direction(E, G) - 2 * direction(I, E) mod 360
By perpendicular_direction_conditions_v0_r on B, G, E, I we get 180 == 2 * direction(B, G) - 2 * direction(E, I) mod 360
By perpendicular_direction_conditions_v0_r on G, B, E, I we get 180 == 2 * direction(G, B) - 2 * direction(E, I) mod 360
By perpendicular_direction_conditions_v0_r on B, G, I, E we get 180 == 2 * direction(B, G) - 2 * direction(I, E) mod 360
By perpendicular_direction_conditions_v0_r on G, B, I, E we get 180 == 2 * direction(G, B) - 2 * direction(I, E) mod 360
By probably_between_and_collinear_implies_between on I, E, A we get between(A, E, I)
By orthocenter_concurrency on C, G, B we get orthocenter(B, C, G) in altitude(C, B, G), orthocenter(B, C, G) in altitude(G, B, C), orthocenter(B, C, G) in altitude(B, C, G)
By divide_by_2_mod_180_v1 on E, B, A, A, C, F we get angle(A, C, F) == angle(E, B, A) mod 360
By divide_by_2_mod_180_v1 on A, C, B, E, G, A we get angle(A, C, B) == angle(E, G, A) mod 360
By perpendicular_direction_conditions_v0_r on E, I, B, E we get 180 == 2 * direction(E, I) - 2 * direction(B, E) mod 360
By in_imply_collinear on orthocenter(A, B, C), A, G we get collinear(A, G, orthocenter(A, B, C))
By perpendicular_direction_conditions_v0_r on G, E, I, E we get 180 == 2 * direction(G, E) - 2 * direction(I, E) mod 360
By orthocenter_concurrency on G, C, A we get orthocenter(A, C, G) in altitude(G, A, C), orthocenter(A, C, G) in altitude(C, A, G), orthocenter(A, C, G) in altitude(A, C, G)
By divide_by_2_mod_180_v1 on G, A, C, D, B, E we get angle(D, B, E) == angle(G, A, C) mod 360
By perpendicular_direction_conditions_v0_r on E, G, E, I we get 180 == 2 * direction(E, G) - 2 * direction(E, I) mod 360
By divide_by_2_mod_180_v0 on F, C, E, A, B, G we get angle(A, B, G) == angle(F, C, E) mod 360
By perpendicular_direction_conditions_v0_r on E, I, B, G we get 180 == 2 * direction(E, I) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on I, E, B, E we get 180 == 2 * direction(I, E) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on I, E, E, G we get 180 == 2 * direction(I, E) - 2 * direction(E, G) mod 360
By divide_by_2_mod_180_v1 on D, B, G, D, A, I we get angle(D, A, I) == angle(D, B, G) mod 360
By in_imply_collinear on orthocenter(A, B, C), G, D we get collinear(D, G, orthocenter(A, B, C))
By perpendicular_direction_conditions_v0_r on E, I, G, B we get 180 == 2 * direction(E, I) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on B, E, I, E we get 180 == 2 * direction(B, E) - 2 * direction(I, E) mod 360
By divide_by_2_mod_180_v0 on D, A, B, B, C, K we get angle(B, C, K) == angle(D, A, B) mod 360
By divide_by_2_mod_180_v0 on F, B, E, F, C, I we get angle(F, B, E) == angle(F, C, I) mod 360
By divide_by_2_mod_180_v0 on B, C, F, D, A, F we get angle(B, C, F) == angle(D, A, F) mod 360
By divide_by_2_mod_180_v0 on F, B, E, K, C, E we get angle(F, B, E) == angle(K, C, E) mod 360
By divide_by_2_mod_180_v0 on A, B, E, F, C, E we get angle(A, B, E) == angle(F, C, E) mod 360
By probably_between_and_collinear_implies_between on K, F, J we get between(J, F, K)
By divide_by_2_mod_180_v0 on C, A, G, G, B, C we get angle(C, A, G) == angle(G, B, C) mod 360
By divide_by_2_mod_180_v0 on J, C, E, F, B, G we get angle(F, B, G) == angle(J, C, E) mod 360
By divide_by_2_mod_180_v1 on F, C, B, B, A, D we get angle(B, A, D) == angle(F, C, B) mod 360
By probably_between_and_collinear_implies_between on C, I, E we get between(C, I, E)
By divide_by_2_mod_180_v1 on I, C, D, E, G, A we get angle(E, G, A) == angle(I, C, D) mod 360
By divide_by_2_mod_180_v0 on C, A, D, G, B, C we get angle(C, A, D) == angle(G, B, C) mod 360
By divide_by_2_mod_180_v0 on I, A, D, G, B, C we get angle(G, B, C) == angle(I, A, D) mod 360
By divide_by_2_mod_180_v3 on D, K, C, D, K, J we get angle(D, K, C) == angle(D, K, J) + 180 mod 360
By divide_by_2_mod_180_v0 on E, B, C, I, A, D we get angle(E, B, C) == angle(I, A, D) mod 360
By divide_by_2_mod_180_v1 on E, C, K, G, B, A we get angle(E, C, K) == angle(G, B, A) mod 360
By divide_by_2_mod_180_v1 on B, A, G, K, C, B we get angle(B, A, G) == angle(K, C, B) mod 360
By divide_by_2_mod_180_v3 on F, K, D, J, K, I we get angle(F, K, D) == angle(J, K, I) + 180 mod 360
By divide_by_2_mod_180_v0 on G, A, B, B, C, J we get angle(B, C, J) == angle(G, A, B) mod 360
By probably_between_and_collinear_implies_between on J, K, C we get between(C, K, J)
By divide_by_2_mod_180_v0 on D, A, F, D, C, J we get angle(D, A, F) == angle(D, C, J) mod 360
By divide_by_2_mod_180_v1 on E, G, A, E, C, D we get angle(E, C, D) == angle(E, G, A) mod 360
By divide_by_2_mod_180_v0 on A, B, E, F, C, I we get angle(A, B, E) == angle(F, C, I) mod 360
By divide_by_2_mod_180_v0 on I, A, D, E, B, D we get angle(E, B, D) == angle(I, A, D) mod 360
By divide_by_2_mod_180_v1 on G, A, E, D, B, E we get angle(D, B, E) == angle(G, A, E) mod 360
By divide_by_2_mod_180_v3 on A, G, B, D, C, I we get angle(A, G, B) == angle(D, C, I) + 180 mod 360
By in_imply_collinear on orthocenter(A, B, C), A, D we get collinear(A, D, orthocenter(A, B, C))
By divide_by_2_mod_180_v2 on E, G, D, E, C, B we get angle(E, G, D) == angle(E, C, B) + 180 mod 360
By divide_by_2_mod_180_v0 on J, K, I, C, K, D we get angle(C, K, D) == angle(J, K, I) mod 360
By in_imply_collinear on orthocenter(A, B, C), E, B we get collinear(B, E, orthocenter(A, B, C))
By divide_by_2_mod_180_v0 on F, B, G, J, C, I we get angle(F, B, G) == angle(J, C, I) mod 360
By divide_by_2_mod_180_v0 on E, B, C, C, A, G we get angle(C, A, G) == angle(E, B, C) mod 360
By divide_by_2_mod_180_v0 on J, C, E, A, B, G we get angle(A, B, G) == angle(J, C, E) mod 360
By divide_by_2_mod_180_v0 on A, B, G, J, C, A we get angle(A, B, G) == angle(J, C, A) mod 360
By divide_by_2_mod_180_v0 on E, B, C, C, A, D we get angle(C, A, D) == angle(E, B, C) mod 360
By divide_by_2_mod_180_v0 on I, A, D, G, B, D we get angle(G, B, D) == angle(I, A, D) mod 360
By divide_by_2_mod_180_v0 on A, G, E, B, C, E we get angle(A, G, E) == angle(B, C, E) mod 360
By divide_by_2_mod_180_v1 on C, B, E, G, A, I we get angle(C, B, E) == angle(G, A, I) mod 360
By divide_by_2_mod_180_v1 on D, A, I, C, B, E we get angle(C, B, E) == angle(D, A, I) mod 360
By divide_by_2_mod_180_v1 on F, C, B, B, A, G we get angle(B, A, G) == angle(F, C, B) mod 360
By divide_by_2_mod_180_v0 on F, B, E, J, C, A we get angle(F, B, E) == angle(J, C, A) mod 360
By divide_by_2_mod_180_v0 on K, C, I, A, B, E we get angle(A, B, E) == angle(K, C, I) mod 360
By divide_by_2_mod_180_v1 on G, B, F, A, C, F we get angle(A, C, F) == angle(G, B, F) mod 360
By divide_by_2_mod_180_v1 on K, C, D, F, A, D we get angle(F, A, D) == angle(K, C, D) mod 360
By divide_by_2_mod_180_v1 on C, B, G, G, A, C we get angle(C, B, G) == angle(G, A, C) mod 360
By divide_by_2_mod_180_v1 on D, B, G, D, A, C we get angle(D, A, C) == angle(D, B, G) mod 360
By reverse_direction on G, E we get 180 == direction(G, E) - direction(E, G) mod 360
By divide_by_2_mod_180_v1 on D, A, E, C, B, G we get angle(C, B, G) == angle(D, A, E) mod 360
By divide_by_2_mod_180_v1 on E, G, A, A, C, D we get angle(A, C, D) == angle(E, G, A) mod 360
By divide_by_2_mod_180_v0 on B, C, A, D, G, B we get angle(B, C, A) == angle(D, G, B) mod 360
By in_imply_collinear on orthocenter(A, B, C), C, J we get collinear(C, J, orthocenter(A, B, C))
By divide_by_2_mod_180_v0 on B, C, F, D, A, B we get angle(B, C, F) == angle(D, A, B) mod 360
By divide_by_2_mod_180_v2 on F, K, I, J, K, D we get angle(F, K, I) == angle(J, K, D) + 180 mod 360
By divide_by_2_mod_180_v1 on D, A, E, D, B, E we get angle(D, A, E) == angle(D, B, E) mod 360
By divide_by_2_mod_180_v1 on G, B, A, I, C, F we get angle(G, B, A) == angle(I, C, F) mod 360
By divide_by_2_mod_180_v1 on I, C, J, E, B, A we get angle(E, B, A) == angle(I, C, J) mod 360
By divide_by_2_mod_180_v1 on G, A, C, C, B, E we get angle(C, B, E) == angle(G, A, C) mod 360
By divide_by_2_mod_180_v0 on G, B, C, I, A, G we get angle(G, B, C) == angle(I, A, G) mod 360
By aa_anti_similarity on C, B, E, G, B, D we get anti_similar_triangles(B, C, E, B, G, D)
By divide_by_2_mod_180_v1 on G, B, F, I, C, J we get angle(G, B, F) == angle(I, C, J) mod 360
By divide_by_2_mod_180_v1 on J, K, D, C, K, I we get angle(C, K, I) == angle(J, K, D) mod 360
By divide_by_2_mod_180_v0 on D, C, A, D, G, B we get angle(D, C, A) == angle(D, G, B) mod 360
By divide_by_2_mod_180_v1 on J, C, D, F, A, D we get angle(F, A, D) == angle(J, C, D) mod 360
By divide_by_2_mod_180_v2 on D, K, J, I, K, F we get angle(D, K, J) == angle(I, K, F) + 180 mod 360
By divide_by_2_mod_180_v0 on B, C, A, A, G, E we get angle(A, G, E) == angle(B, C, A) mod 360
By reverse_direction on J, K we get 180 == direction(J, K) - direction(K, J) mod 360
By divide_by_2_mod_180_v0 on D, K, J, I, K, C we get angle(D, K, J) == angle(I, K, C) mod 360
By divide_by_2_mod_180_v0 on D, C, K, D, A, B we get angle(D, A, B) == angle(D, C, K) mod 360
By divide_by_2_mod_180_v1 on B, G, D, I, C, D we get angle(B, G, D) == angle(I, C, D) mod 360
By in_imply_collinear on orthocenter(A, B, C), C, K we get collinear(C, K, orthocenter(A, B, C))
By divide_by_2_mod_180_v3 on A, C, B, B, G, A we get angle(A, C, B) == angle(B, G, A) + 180 mod 360
By divide_by_2_mod_180_v0 on J, C, I, F, B, E we get angle(F, B, E) == angle(J, C, I) mod 360
By divide_by_2_mod_180_v0 on F, B, E, J, C, E we get angle(F, B, E) == angle(J, C, E) mod 360
By divide_by_2_mod_180_v0 on D, C, J, D, A, B we get angle(D, A, B) == angle(D, C, J) mod 360
By in_imply_collinear on orthocenter(A, B, C), J, K we get collinear(J, K, orthocenter(A, B, C))
By divide_by_2_mod_180_v1 on G, B, F, I, C, F we get angle(G, B, F) == angle(I, C, F) mod 360
By divide_by_2_mod_180_v2 on B, C, I, A, G, B we get angle(B, C, I) == angle(A, G, B) + 180 mod 360
By divide_by_2_mod_180_v1 on B, A, D, K, C, B we get angle(B, A, D) == angle(K, C, B) mod 360
By divide_by_2_mod_180_v0 on B, C, I, A, G, E we get angle(A, G, E) == angle(B, C, I) mod 360
By divide_by_2_mod_180_v0 on G, B, D, C, A, D we get angle(C, A, D) == angle(G, B, D) mod 360
By divide_by_2_mod_180_v1 on E, B, F, E, C, F we get angle(E, B, F) == angle(E, C, F) mod 360
By divide_by_2_mod_180_v1 on D, A, C, C, B, E we get angle(C, B, E) == angle(D, A, C) mod 360
By divide_by_2_mod_180_v1 on G, B, A, I, C, K we get angle(G, B, A) == angle(I, C, K) mod 360
By divide_by_2_mod_180_v0 on B, C, K, G, A, F we get angle(B, C, K) == angle(G, A, F) mod 360
By divide_by_2_mod_180_v1 on K, C, B, F, A, G we get angle(F, A, G) == angle(K, C, B) mod 360
By between_imply_segment_sum on E, G, B we get distance(B, E) == distance(E, G) + distance(B, G)
By divide_by_2_mod_180_v1 on J, C, D, B, A, D we get angle(B, A, D) == angle(J, C, D) mod 360
By reverse_direction on K, I we get 180 == direction(K, I) - direction(I, K) mod 360
By divide_by_2_mod_180_v0 on J, C, A, F, B, G we get angle(F, B, G) == angle(J, C, A) mod 360
By divide_by_2_mod_180_v1 on J, C, D, B, A, G we get angle(B, A, G) == angle(J, C, D) mod 360
By divide_by_2_mod_180_v1 on G, B, F, I, C, K we get angle(G, B, F) == angle(I, C, K) mod 360
By divide_by_2_mod_180_v0 on K, C, I, A, B, G we get angle(A, B, G) == angle(K, C, I) mod 360
By divide_by_2_mod_180_v0 on D, K, F, D, K, J we get angle(D, K, F) == angle(D, K, J) mod 360
By in_imply_collinear on orthocenter(A, B, C), F, C we get collinear(C, F, orthocenter(A, B, C))
By divide_by_2_mod_180_v3 on I, K, F, D, K, J we get angle(I, K, F) == angle(D, K, J) + 180 mod 360
By divide_by_2_mod_180_v3 on I, C, D, B, G, A we get angle(I, C, D) == angle(B, G, A) + 180 mod 360
By divide_by_2_mod_180_v0 on F, B, G, K, C, A we get angle(F, B, G) == angle(K, C, A) mod 360
By divide_by_2_mod_180_v3 on E, C, B, B, G, A we get angle(E, C, B) == angle(B, G, A) + 180 mod 360
By divide_by_2_mod_180_v1 on B, G, D, A, C, D we get angle(A, C, D) == angle(B, G, D) mod 360
By divide_by_2_mod_180_v0 on F, C, A, A, B, E we get angle(A, B, E) == angle(F, C, A) mod 360
By in_imply_collinear on orthocenter(A, B, C), F, K we get collinear(F, K, orthocenter(A, B, C))
By divide_by_2_mod_180_v0 on K, C, I, F, B, G we get angle(F, B, G) == angle(K, C, I) mod 360
By divide_by_2_mod_180_v0 on G, A, F, B, C, F we get angle(B, C, F) == angle(G, A, F) mod 360
By divide_by_2_mod_180_v3 on E, C, D, E, G, D we get angle(E, C, D) == angle(E, G, D) + 180 mod 360
By divide_by_2_mod_180_v2 on D, C, E, D, G, E we get angle(D, C, E) == angle(D, G, E) + 180 mod 360
By divide_by_2_mod_180_v0 on E, B, C, E, A, D we get angle(E, A, D) == angle(E, B, C) mod 360
By divide_by_2_mod_180_v1 on E, B, A, A, C, J we get angle(A, C, J) == angle(E, B, A) mod 360
By divide_by_2_mod_180_v2 on D, K, F, I, K, J we get angle(D, K, F) == angle(I, K, J) + 180 mod 360
By divide_by_2_mod_180_v0 on D, C, F, D, A, F we get angle(D, A, F) == angle(D, C, F) mod 360
By divide_by_2_mod_180_v1 on E, C, K, G, B, F we get angle(E, C, K) == angle(G, B, F) mod 360
By divide_by_2_mod_180_v0 on G, B, D, E, A, G we get angle(E, A, G) == angle(G, B, D) mod 360
By divide_by_2_mod_180_v1 on K, C, D, B, A, G we get angle(B, A, G) == angle(K, C, D) mod 360
By divide_by_2_mod_180_v1 on E, B, A, I, C, F we get angle(E, B, A) == angle(I, C, F) mod 360
By divide_by_2_mod_180_v1 on A, C, F, G, B, A we get angle(A, C, F) == angle(G, B, A) mod 360
By divide_by_2_mod_180_v1 on E, C, F, G, B, A we get angle(E, C, F) == angle(G, B, A) mod 360
By aa_anti_similarity on B, D, G, A, E, G we get anti_similar_triangles(A, E, G, B, D, G)
By divide_by_2_mod_180_v1 on G, B, F, A, C, J we get angle(A, C, J) == angle(G, B, F) mod 360
By divide_by_2_mod_180_v3 on A, G, B, B, C, I we get angle(A, G, B) == angle(B, C, I) + 180 mod 360
By divide_by_2_mod_180_v0 on C, A, G, G, B, D we get angle(C, A, G) == angle(G, B, D) mod 360
By divide_by_2_mod_180_v0 on A, G, E, D, C, I we get angle(A, G, E) == angle(D, C, I) mod 360
By divide_by_2_mod_180_v1 on A, C, B, B, G, D we get angle(A, C, B) == angle(B, G, D) mod 360
By divide_by_2_mod_180_v1 on G, B, A, A, C, J we get angle(A, C, J) == angle(G, B, A) mod 360
By divide_by_2_mod_180_v3 on D, G, E, B, C, A we get angle(D, G, E) == angle(B, C, A) + 180 mod 360
By divide_by_2_mod_180_v0 on D, A, B, D, C, F we get angle(D, A, B) == angle(D, C, F) mod 360
By divide_by_2_mod_180_v0 on D, C, J, G, A, F we get angle(D, C, J) == angle(G, A, F) mod 360
By divide_by_2_mod_180_v3 on D, G, E, D, C, A we get angle(D, G, E) == angle(D, C, A) + 180 mod 360
By in_imply_collinear on orthocenter(A, B, C), G, B we get collinear(B, G, orthocenter(A, B, C))
By divide_by_2_mod_180_v1 on F, A, D, F, C, D we get angle(F, A, D) == angle(F, C, D) mod 360
By divide_by_2_mod_180_v2 on D, C, I, A, G, B we get angle(D, C, I) == angle(A, G, B) + 180 mod 360
By divide_by_2_mod_180_v1 on G, B, F, E, C, F we get angle(E, C, F) == angle(G, B, F) mod 360
By divide_by_2_mod_180_v1 on E, B, F, I, C, J we get angle(E, B, F) == angle(I, C, J) mod 360
By divide_by_2_mod_180_v0 on A, B, G, J, C, I we get angle(A, B, G) == angle(J, C, I) mod 360
By divide_by_2_mod_180_v1 on D, A, I, C, B, G we get angle(C, B, G) == angle(D, A, I) mod 360
By divide_by_2_mod_180_v2 on B, G, A, I, C, D we get angle(B, G, A) == angle(I, C, D) + 180 mod 360
By divide_by_2_mod_180_v0 on D, A, B, B, C, J we get angle(B, C, J) == angle(D, A, B) mod 360
By divide_by_2_mod_180_v2 on D, K, J, D, K, C we get angle(D, K, J) == angle(D, K, C) + 180 mod 360
By divide_by_2_mod_180_v1 on I, K, F, I, K, J we get angle(I, K, F) == angle(I, K, J) mod 360
By divide_by_2_mod_180_v1 on E, B, F, I, C, F we get angle(E, B, F) == angle(I, C, F) mod 360
By divide_by_2_mod_180_v3 on A, C, D, E, G, D we get angle(A, C, D) == angle(E, G, D) + 180 mod 360
By divide_by_2_mod_180_v0 on K, C, E, A, B, G we get angle(A, B, G) == angle(K, C, E) mod 360
By divide_by_2_mod_180_v0 on B, C, I, D, G, B we get angle(B, C, I) == angle(D, G, B) mod 360
By divide_by_2_mod_180_v1 on I, C, B, B, G, D we get angle(B, G, D) == angle(I, C, B) mod 360
By divide_by_2_mod_180_v0 on G, A, B, B, C, K we get angle(B, C, K) == angle(G, A, B) mod 360
By divide_by_2_mod_180_v1 on B, A, D, K, C, D we get angle(B, A, D) == angle(K, C, D) mod 360
By in_imply_collinear on orthocenter(A, B, C), G, E we get collinear(E, G, orthocenter(A, B, C))
By divide_by_2_mod_180_v0 on K, C, A, A, B, G we get angle(A, B, G) == angle(K, C, A) mod 360
By divide_by_2_mod_180_v1 on E, C, K, E, B, F we get angle(E, B, F) == angle(E, C, K) mod 360
By aa_anti_similarity on G, A, E, C, A, D we get anti_similar_triangles(A, C, D, A, G, E)
By divide_by_2_mod_180_v0 on D, G, B, B, C, E we get angle(B, C, E) == angle(D, G, B) mod 360
By divide_by_2_mod_180_v1 on G, A, I, D, B, E we get angle(D, B, E) == angle(G, A, I) mod 360
By divide_by_2_mod_180_v0 on I, A, G, G, B, D we get angle(G, B, D) == angle(I, A, G) mod 360
By divide_by_2_mod_180_v3 on E, C, D, B, G, A we get angle(E, C, D) == angle(B, G, A) + 180 mod 360
By divide_by_2_mod_180_v1 on E, B, F, A, C, F we get angle(A, C, F) == angle(E, B, F) mod 360
By divide_by_2_mod_180_v3 on A, C, B, E, G, D we get angle(A, C, B) == angle(E, G, D) + 180 mod 360
By divide_by_2_mod_180_v0 on F, C, I, F, B, G we get angle(F, B, G) == angle(F, C, I) mod 360
By divide_by_2_mod_180_v1 on C, B, G, D, A, C we get angle(C, B, G) == angle(D, A, C) mod 360
By divide_by_2_mod_180_v0 on E, B, D, E, A, D we get angle(E, A, D) == angle(E, B, D) mod 360
By divide_by_2_mod_180_v1 on E, G, A, E, C, B we get angle(E, C, B) == angle(E, G, A) mod 360
By divide_by_2_mod_180_v2 on B, G, A, A, C, D we get angle(B, G, A) == angle(A, C, D) + 180 mod 360
By collinear_definition on C, E, I we get E in Line(C, I), I in Line(C, E), Line(C, E) == Line(C, I), 0 == 2 * angle(E, C, I) mod 360
By divide_by_2_mod_180_v1 on D, B, G, D, A, E we get angle(D, A, E) == angle(D, B, G) mod 360
By divide_by_2_mod_180_v1 on B, A, D, J, C, B we get angle(B, A, D) == angle(J, C, B) mod 360
By reverse_direction on B, F we get 180 == direction(B, F) - direction(F, B) mod 360
By aa_anti_similarity on C, F, B, A, D, B we get anti_similar_triangles(A, B, D, C, B, F)
By divide_by_2_mod_180_v1 on I, C, J, G, B, A we get angle(G, B, A) == angle(I, C, J) mod 360
By divide_by_2_mod_180_v1 on F, C, B, F, A, D we get angle(F, A, D) == angle(F, C, B) mod 360
By divide_by_2_mod_180_v1 on C, B, G, G, A, E we get angle(C, B, G) == angle(G, A, E) mod 360
By divide_by_2_mod_180_v2 on E, G, D, A, C, D we get angle(E, G, D) == angle(A, C, D) + 180 mod 360
By divide_by_2_mod_180_v0 on D, C, K, D, A, F we get angle(D, A, F) == angle(D, C, K) mod 360
By divide_by_2_mod_180_v1 on A, C, K, G, B, A we get angle(A, C, K) == angle(G, B, A) mod 360
By divide_by_2_mod_180_v0 on C, A, G, E, B, D we get angle(C, A, G) == angle(E, B, D) mod 360
By divide_by_2_mod_180_v1 on B, A, G, F, C, D we get angle(B, A, G) == angle(F, C, D) mod 360
By divide_by_2_mod_180_v0 on F, C, I, A, B, G we get angle(A, B, G) == angle(F, C, I) mod 360
By divide_by_2_mod_180_v0 on F, B, G, K, C, E we get angle(F, B, G) == angle(K, C, E) mod 360
By divide_by_2_mod_180_v0 on F, B, E, F, C, E we get angle(F, B, E) == angle(F, C, E) mod 360
By divide_by_2_mod_180_v0 on A, B, E, J, C, E we get angle(A, B, E) == angle(J, C, E) mod 360
By reverse_direction on A, E we get 180 == direction(A, E) - direction(E, A) mod 360
By reverse_direction on F, A we get 180 == direction(F, A) - direction(A, F) mod 360
By divide_by_2_mod_180_v1 on A, C, K, G, B, F we get angle(A, C, K) == angle(G, B, F) mod 360
By divide_by_2_mod_180_v1 on E, B, F, E, C, J we get angle(E, B, F) == angle(E, C, J) mod 360
By divide_by_2_mod_180_v1 on E, B, A, E, C, K we get angle(E, B, A) == angle(E, C, K) mod 360
By divide_by_2_mod_180_v0 on E, B, C, E, A, G we get angle(E, A, G) == angle(E, B, C) mod 360
By divide_by_2_mod_180_v0 on G, A, F, D, C, K we get angle(D, C, K) == angle(G, A, F) mod 360
By divide_by_2_mod_180_v0 on B, C, F, G, A, B we get angle(B, C, F) == angle(G, A, B) mod 360
By divide_by_2_mod_180_v1 on I, C, K, E, B, F we get angle(E, B, F) == angle(I, C, K) mod 360
By divide_by_2_mod_180_v3 on A, G, B, D, C, E we get angle(A, G, B) == angle(D, C, E) + 180 mod 360
By divide_by_2_mod_180_v0 on G, B, D, E, A, D we get angle(E, A, D) == angle(G, B, D) mod 360
By divide_by_2_mod_180_v1 on E, C, F, E, B, A we get angle(E, B, A) == angle(E, C, F) mod 360
By divide_by_2_mod_180_v0 on A, B, E, K, C, A we get angle(A, B, E) == angle(K, C, A) mod 360
By divide_by_2_mod_180_v1 on E, B, F, A, C, K we get angle(A, C, K) == angle(E, B, F) mod 360
By divide_by_2_mod_180_v1 on D, K, C, I, K, J we get angle(D, K, C) == angle(I, K, J) mod 360
By divide_by_2_mod_180_v1 on D, A, I, D, B, E we get angle(D, A, I) == angle(D, B, E) mod 360
By divide_by_2_mod_180_v0 on F, B, G, F, C, E we get angle(F, B, G) == angle(F, C, E) mod 360
By divide_by_2_mod_180_v1 on C, B, G, G, A, I we get angle(C, B, G) == angle(G, A, I) mod 360
By divide_by_2_mod_180_v3 on I, K, J, D, K, F we get angle(I, K, J) == angle(D, K, F) + 180 mod 360
By divide_by_2_mod_180_v1 on E, C, B, B, G, D we get angle(B, G, D) == angle(E, C, B) mod 360
By divide_by_2_mod_180_v2 on D, C, A, D, G, E we get angle(D, C, A) == angle(D, G, E) + 180 mod 360
By divide_by_2_mod_180_v2 on E, G, D, I, C, B we get angle(E, G, D) == angle(I, C, B) + 180 mod 360
By divide_by_2_mod_180_v1 on F, C, D, F, A, G we get angle(F, A, G) == angle(F, C, D) mod 360
By collinear_definition on F, K, J we get K in Line(F, J), J in Line(F, K), Line(F, J) == Line(F, K), 0 == 2 * angle(K, F, J) mod 360
By divide_by_2_mod_180_v0 on D, G, B, D, C, I we get angle(D, C, I) == angle(D, G, B) mod 360
By divide_by_2_mod_180_v0 on D, G, B, D, C, E we get angle(D, C, E) == angle(D, G, B) mod 360
By divide_by_2_mod_180_v1 on E, B, A, E, C, J we get angle(E, B, A) == angle(E, C, J) mod 360
By divide_by_2_mod_180_v2 on B, C, A, A, G, B we get angle(B, C, A) == angle(A, G, B) + 180 mod 360
By divide_by_2_mod_180_v0 on D, C, J, G, A, B we get angle(D, C, J) == angle(G, A, B) mod 360
By reverse_direction on E, B we get 180 == direction(E, B) - direction(B, E) mod 360
By reverse_direction on F, B we get 180 == direction(F, B) - direction(B, F) mod 360
By divide_by_2_mod_180_v0 on I, A, G, E, B, D we get angle(E, B, D) == angle(I, A, G) mod 360
By divide_by_2_mod_180_v0 on G, A, B, D, C, F we get angle(D, C, F) == angle(G, A, B) mod 360
By divide_by_2_mod_180_v0 on K, C, E, A, B, E we get angle(A, B, E) == angle(K, C, E) mod 360
By divide_by_2_mod_180_v1 on B, G, D, E, C, D we get angle(B, G, D) == angle(E, C, D) mod 360
By divide_by_2_mod_180_v1 on C, B, E, D, A, E we get angle(C, B, E) == angle(D, A, E) mod 360
By sas_similarity on A, C, G, I, C, H we get similar_triangles(A, C, G, I, C, H)
By divide_by_2_mod_180_v1 on A, C, K, E, B, A we get angle(A, C, K) == angle(E, B, A) mod 360
By divide_by_2_mod_180_v1 on B, A, G, J, C, B we get angle(B, A, G) == angle(J, C, B) mod 360
By divide_by_2_mod_180_v2 on B, G, A, I, C, B we get angle(B, G, A) == angle(I, C, B) + 180 mod 360
By divide_by_2_mod_180_v3 on I, C, B, B, G, A we get angle(I, C, B) == angle(B, G, A) + 180 mod 360
By divide_by_2_mod_180_v2 on D, C, E, A, G, B we get angle(D, C, E) == angle(A, G, B) + 180 mod 360
By divide_by_2_mod_180_v1 on F, A, D, J, C, B we get angle(F, A, D) == angle(J, C, B) mod 360
By divide_by_2_mod_180_v1 on E, C, J, G, B, A we get angle(E, C, J) == angle(G, B, A) mod 360
By divide_by_2_mod_180_v1 on I, C, B, E, G, A we get angle(E, G, A) == angle(I, C, B) mod 360
By divide_by_2_mod_180_v0 on F, B, E, K, C, I we get angle(F, B, E) == angle(K, C, I) mod 360
By divide_by_2_mod_180_v1 on D, B, G, G, A, E we get angle(D, B, G) == angle(G, A, E) mod 360
By divide_by_2_mod_180_v3 on A, C, D, B, G, A we get angle(A, C, D) == angle(B, G, A) + 180 mod 360
By divide_by_2_mod_180_v1 on B, A, D, F, C, D we get angle(B, A, D) == angle(F, C, D) mod 360
By reverse_direction on E, C we get 180 == direction(E, C) - direction(C, E) mod 360
By divide_by_2_mod_180_v3 on I, C, B, E, G, D we get angle(I, C, B) == angle(E, G, D) + 180 mod 360
By divide_by_2_mod_180_v2 on I, K, C, I, K, J we get angle(I, K, C) == angle(I, K, J) + 180 mod 360
By divide_by_2_mod_180_v1 on F, A, G, J, C, D we get angle(F, A, G) == angle(J, C, D) mod 360
By divide_by_2_mod_180_v0 on D, A, F, B, C, K we get angle(B, C, K) == angle(D, A, F) mod 360
By divide_by_2_mod_180_v1 on D, B, G, G, A, C we get angle(D, B, G) == angle(G, A, C) mod 360
By divide_by_2_mod_180_v0 on C, A, D, E, B, D we get angle(C, A, D) == angle(E, B, D) mod 360
By divide_by_2_mod_180_v2 on E, G, D, A, C, B we get angle(E, G, D) == angle(A, C, B) + 180 mod 360
By divide_by_2_mod_180_v3 on D, G, E, B, C, E we get angle(D, G, E) == angle(B, C, E) + 180 mod 360
By collinear_definition on J, K, C we get K in Line(C, J), C in Line(J, K), Line(C, J) == Line(J, K), 0 == 2 * angle(K, J, C) mod 360
By divide_by_2_mod_180_v2 on B, G, A, E, C, D we get angle(B, G, A) == angle(E, C, D) + 180 mod 360
By divide_by_2_mod_180_v2 on E, G, D, I, C, D we get angle(E, G, D) == angle(I, C, D) + 180 mod 360
By divide_by_2_mod_180_v1 on F, A, G, F, C, B we get angle(F, A, G) == angle(F, C, B) mod 360
By divide_by_2_mod_180_v1 on K, C, D, F, A, G we get angle(F, A, G) == angle(K, C, D) mod 360
By divide_by_2_mod_180_v0 on D, C, E, A, G, E we get angle(A, G, E) == angle(D, C, E) mod 360
By reverse_direction on K, C we get 180 == direction(K, C) - direction(C, K) mod 360
By divide_by_2_mod_180_v2 on B, G, A, E, C, B we get angle(B, G, A) == angle(E, C, B) + 180 mod 360
By divide_by_2_mod_180_v0 on E, A, G, E, B, D we get angle(E, A, G) == angle(E, B, D) mod 360
By divide_by_2_mod_180_v2 on J, K, I, F, K, D we get angle(J, K, I) == angle(F, K, D) + 180 mod 360
By divide_by_2_mod_180_v1 on F, A, D, K, C, B we get angle(F, A, D) == angle(K, C, B) mod 360
By collinear_definition on A, I, E we get I in Line(A, E), E in Line(A, I), Line(A, E) == Line(A, I), 0 == 2 * angle(I, A, E) mod 360
By divide_by_2_mod_180_v0 on F, C, A, F, B, G we get angle(F, B, G) == angle(F, C, A) mod 360
By divide_by_2_mod_180_v0 on D, C, F, G, A, F we get angle(D, C, F) == angle(G, A, F) mod 360
By divide_by_2_mod_180_v0 on G, B, C, E, A, D we get angle(E, A, D) == angle(G, B, C) mod 360
By divide_by_2_mod_180_v0 on F, C, A, A, B, G we get angle(A, B, G) == angle(F, C, A) mod 360
By divide_by_2_mod_180_v2 on B, C, E, A, G, B we get angle(B, C, E) == angle(A, G, B) + 180 mod 360
By divide_by_2_mod_180_v3 on A, G, B, B, C, E we get angle(A, G, B) == angle(B, C, E) + 180 mod 360
By divide_by_2_mod_180_v3 on I, K, J, I, K, C we get angle(I, K, J) == angle(I, K, C) + 180 mod 360
By divide_by_2_mod_180_v0 on G, B, C, E, A, G we get angle(E, A, G) == angle(G, B, C) mod 360
By divide_by_2_mod_180_v3 on D, G, E, D, C, I we get angle(D, G, E) == angle(D, C, I) + 180 mod 360
By divide_by_2_mod_180_v0 on I, A, G, E, B, C we get angle(E, B, C) == angle(I, A, G) mod 360
By divide_by_2_mod_180_v0 on A, B, E, J, C, I we get angle(A, B, E) == angle(J, C, I) mod 360
By reverse_direction on K, D we get 180 == direction(K, D) - direction(D, K) mod 360
By divide_by_2_mod_180_v1 on G, A, E, C, B, E we get angle(C, B, E) == angle(G, A, E) mod 360
By divide_by_2_mod_180_v3 on J, K, D, C, K, D we get angle(J, K, D) == angle(C, K, D) + 180 mod 360
By divide_by_2_mod_180_v3 on A, G, B, B, C, A we get angle(A, G, B) == angle(B, C, A) + 180 mod 360
By divide_by_2_mod_180_v0 on F, B, E, K, C, A we get angle(F, B, E) == angle(K, C, A) mod 360
By divide_by_2_mod_180_v2 on D, C, I, D, G, E we get angle(D, C, I) == angle(D, G, E) + 180 mod 360
By between_imply_segment_sum on A, E, C we get distance(A, C) == distance(A, E) + distance(C, E)
By divide_by_2_mod_180_v1 on E, B, F, A, C, J we get angle(A, C, J) == angle(E, B, F) mod 360
By divide_by_2_mod_180_v0 on F, C, A, F, B, E we get angle(F, B, E) == angle(F, C, A) mod 360
By divide_by_2_mod_180_v0 on G, A, F, B, C, J we get angle(B, C, J) == angle(G, A, F) mod 360
By aa_anti_similarity on A, G, E, B, G, D we get anti_similar_triangles(A, E, G, B, D, G)
By reverse_direction on K, J we get 180 == direction(K, J) - direction(J, K) mod 360
By divide_by_2_mod_180_v0 on B, C, J, D, A, F we get angle(B, C, J) == angle(D, A, F) mod 360
By divide_by_2_mod_180_v1 on D, B, G, G, A, I we get angle(D, B, G) == angle(G, A, I) mod 360
By divide_by_2_mod_180_v2 on E, G, D, E, C, D we get angle(E, G, D) == angle(E, C, D) + 180 mod 360
By reverse_direction on A, F we get 180 == direction(A, F) - direction(F, A) mod 360
By divide_by_2_mod_180_v3 on A, G, B, D, C, A we get angle(A, G, B) == angle(D, C, A) + 180 mod 360
By divide_by_2_mod_180_v0 on A, G, E, D, C, A we get angle(A, G, E) == angle(D, C, A) mod 360
By collinear_definition on A, E, I we get E in Line(A, I), I in Line(A, E), Line(A, E) == Line(A, I), 0 == 2 * angle(E, A, I) mod 360
By divide_by_2_mod_180_v3 on E, C, B, E, G, D we get angle(E, C, B) == angle(E, G, D) + 180 mod 360
By divide_by_2_mod_180_v2 on B, G, A, A, C, B we get angle(B, G, A) == angle(A, C, B) + 180 mod 360
By divide_by_2_mod_180_v1 on D, A, C, D, B, E we get angle(D, A, C) == angle(D, B, E) mod 360
By internal_angle_bisector_definition_v0 on I, E, I, C we get angle(E, C, I) == angle(I, C, E) mod 360
By reverse_direction on B, D we get 180 == direction(B, D) - direction(D, B) mod 360
By divide_by_2_mod_180_v3 on J, K, D, F, K, I we get angle(J, K, D) == angle(F, K, I) + 180 mod 360
By divide_by_2_mod_180_v3 on D, G, E, D, C, E we get angle(D, G, E) == angle(D, C, E) + 180 mod 360
By between_imply_segment_sum on B, F, A we get distance(A, B) == distance(B, F) + distance(A, F)
By collinear_definition on J, K, F we get K in Line(F, J), F in Line(J, K), Line(F, J) == Line(J, K), 0 == 2 * angle(K, J, F) mod 360
By divide_by_2_mod_180_v1 on J, C, B, F, A, G we get angle(F, A, G) == angle(J, C, B) mod 360
By between_imply_segment_sum on C, D, B we get distance(B, C) == distance(C, D) + distance(B, D)
By divide_by_2_mod_180_v2 on B, C, I, D, G, E we get angle(B, C, I) == angle(D, G, E) + 180 mod 360
By between_imply_segment_sum on D, G, A we get distance(A, D) == distance(D, G) + distance(A, G)
By reverse_direction on F, J we get 180 == direction(F, J) - direction(J, F) mod 360
By aa_anti_similarity on G, B, D, C, B, E we get anti_similar_triangles(B, C, E, B, G, D)
By aa_anti_similarity on A, C, D, B, C, E we get anti_similar_triangles(A, C, D, B, C, E)
By divide_by_2_mod_180_v2 on B, C, A, D, G, E we get angle(B, C, A) == angle(D, G, E) + 180 mod 360
By divide_by_2_mod_180_v3 on D, G, E, B, C, I we get angle(D, G, E) == angle(B, C, I) + 180 mod 360
By divide_by_2_mod_180_v0 on G, A, B, D, C, K we get angle(D, C, K) == angle(G, A, B) mod 360
By collinear_definition on J, C, K we get C in Line(J, K), K in Line(C, J), Line(C, J) == Line(J, K), 0 == 2 * angle(C, J, K) mod 360
By divide_by_2_mod_180_v3 on I, C, D, E, G, D we get angle(I, C, D) == angle(E, G, D) + 180 mod 360
By divide_by_2_mod_180_v2 on B, C, E, D, G, E we get angle(B, C, E) == angle(D, G, E) + 180 mod 360
By aa_anti_similarity on B, A, E, C, A, F we get anti_similar_triangles(A, B, E, A, C, F)
By reverse_direction on J, C we get 180 == direction(J, C) - direction(C, J) mod 360
By reverse_direction on D, K we get 180 == direction(D, K) - direction(K, D) mod 360
By reverse_direction on A, G we get 180 == direction(A, G) - direction(G, A) mod 360
By reverse_direction on E, A we get 180 == direction(E, A) - direction(A, E) mod 360
By reverse_direction on E, G we get 180 == direction(E, G) - direction(G, E) mod 360
By collinear_definition on K, J, F we get J in Line(F, K), F in Line(J, K), Line(F, K) == Line(J, K), 0 == 2 * angle(J, K, F) mod 360
By between_imply_segment_sum on C, K, F we get distance(C, F) == distance(C, K) + distance(F, K)
By aa_anti_similarity on G, D, B, C, E, B we get anti_similar_triangles(B, C, E, B, G, D)
By reverse_direction on C, E we get 180 == direction(C, E) - direction(E, C) mod 360
By aa_anti_similarity on A, E, G, B, D, G we get anti_similar_triangles(A, E, G, B, D, G)
By aa_anti_similarity on B, E, A, C, F, A we get anti_similar_triangles(A, B, E, A, C, F)
By internal_angle_bisector_definition_v0 on I, E, I, A we get angle(E, A, I) == angle(I, A, E) mod 360
By reverse_direction on G, D we get 180 == direction(G, D) - direction(D, G) mod 360
By divide_by_2_mod_180_v3 on C, K, I, J, K, I we get angle(C, K, I) == angle(J, K, I) + 180 mod 360
By sas_similarity on G, C, A, H, C, I we get similar_triangles(A, C, G, I, C, H)
By reverse_direction on K, F we get 180 == direction(K, F) - direction(F, K) mod 360
By reverse_direction on D, C we get 180 == direction(D, C) - direction(C, D) mod 360
By between_imply_segment_sum on D, K, I we get distance(D, I) == distance(D, K) + distance(I, K)
By reverse_direction on J, F we get 180 == direction(J, F) - direction(F, J) mod 360
By collinear_definition on C, I, E we get I in Line(C, E), E in Line(C, I), Line(C, E) == Line(C, I), 0 == 2 * angle(I, C, E) mod 360
By collinear_definition on K, C, J we get C in Line(J, K), J in Line(C, K), Line(C, K) == Line(J, K), 0 == 2 * angle(C, K, J) mod 360
By reverse_direction on G, B we get 180 == direction(G, B) - direction(B, G) mod 360
By reverse_direction on D, B we get 180 == direction(D, B) - direction(B, D) mod 360
By collinear_definition on J, F, K we get F in Line(J, K), K in Line(F, J), Line(F, J) == Line(J, K), 0 == 2 * angle(F, J, K) mod 360
By reverse_direction on C, K we get 180 == direction(C, K) - direction(K, C) mod 360
By aa_anti_similarity on B, C, E, A, C, D we get anti_similar_triangles(A, C, D, B, C, E)
By aa_anti_similarity on C, F, A, B, E, A we get anti_similar_triangles(A, B, E, A, C, F)
By sas_similarity on H, C, I, G, C, A we get similar_triangles(A, C, G, I, C, H)
By aa_anti_similarity on A, D, C, B, E, C we get anti_similar_triangles(A, C, D, B, C, E)
By aa_anti_similarity on C, D, A, G, E, A we get anti_similar_triangles(A, C, D, A, G, E)
By reverse_direction on B, E we get 180 == direction(B, E) - direction(E, B) mod 360
By aa_anti_similarity on A, D, B, C, F, B we get anti_similar_triangles(A, B, D, C, B, F)
By reverse_direction on I, K we get 180 == direction(I, K) - direction(K, I) mod 360
By aa_anti_similarity on C, A, F, B, A, E we get anti_similar_triangles(A, B, E, A, C, F)
By collinear_definition on C, J, K we get J in Line(C, K), K in Line(C, J), Line(C, J) == Line(C, K), 0 == 2 * angle(J, C, K) mod 360
By aa_anti_similarity on B, E, C, A, D, C we get anti_similar_triangles(A, C, D, B, C, E)
By reverse_direction on G, A we get 180 == direction(G, A) - direction(A, G) mod 360
By collinear_definition on F, J, K we get J in Line(F, K), K in Line(F, J), Line(F, J) == Line(F, K), 0 == 2 * angle(J, F, K) mod 360
By aa_anti_similarity on C, B, F, A, B, D we get anti_similar_triangles(A, B, D, C, B, F)
By aa_anti_similarity on B, G, D, A, G, E we get anti_similar_triangles(A, E, G, B, D, G)
By reverse_direction on C, J we get 180 == direction(C, J) - direction(J, C) mod 360
By reverse_direction on D, G we get 180 == direction(D, G) - direction(G, D) mod 360
By sas_similarity on I, C, H, A, C, G we get similar_triangles(A, C, G, I, C, H)
By reverse_direction on C, D we get 180 == direction(C, D) - direction(D, C) mod 360
By reverse_direction on B, G we get 180 == direction(B, G) - direction(G, B) mod 360
By collinear_definition on K, F, J we get F in Line(J, K), J in Line(F, K), Line(F, K) == Line(J, K), 0 == 2 * angle(F, K, J) mod 360
By aa_anti_similarity on C, A, D, G, A, E we get anti_similar_triangles(A, C, D, A, G, E)
By collinear_definition on K, J, C we get J in Line(C, K), C in Line(J, K), Line(C, K) == Line(J, K), 0 == 2 * angle(J, K, C) mod 360
By aa_anti_similarity on G, E, A, C, D, A we get anti_similar_triangles(A, C, D, A, G, E)
By aa_anti_similarity on A, B, D, C, B, F we get anti_similar_triangles(A, B, D, C, B, F)
By collinear_definition on C, K, J we get K in Line(C, J), J in Line(C, K), Line(C, J) == Line(C, K), 0 == 2 * angle(K, C, J) mod 360
By aa_anti_similarity on C, E, B, G, D, B we get anti_similar_triangles(B, C, E, B, G, D)
By reverse_direction on F, K we get 180 == direction(F, K) - direction(K, F) mod 360
By power_of_a_point_in_circle on G, Circle(C, D, G) we get 0 == power_of_a_point(G, Circle(C, D, G))
By external_angle_bisector_definition_v0_r on B, C, B, F we get Line(C, F) == external_angle_bisector(B, F, B)
By external_angle_bisector_definition_v0_r on J, C, K, F we get Line(C, F) == external_angle_bisector(J, F, K)
By external_angle_bisector_definition_v0_r on A, C, G, D we get Line(C, D) == external_angle_bisector(A, D, G)
By collinear_definition on I, C, E we get C in Line(E, I), E in Line(C, I), Line(C, I) == Line(E, I), 0 == 2 * angle(C, I, E) mod 360
By internal_angle_bisector_definition_v0_r on C, A, C, E we get Line(A, E) == internal_angle_bisector(C, E, C)
By external_angle_bisector_definition_v0_r on A, B, G, D we get Line(B, D) == external_angle_bisector(A, D, G)
By internal_angle_bisector_definition_v0_r on C, G, B, D we get Line(D, G) == internal_angle_bisector(B, D, C)
By internal_angle_bisector_definition_v0_r on E, G, E, B we get Line(B, G) == internal_angle_bisector(E, B, E)
By external_angle_bisector_definition_v0_r on A, B, A, D we get Line(B, D) == external_angle_bisector(A, D, A)
By perpendicular_angle_conditions_v0 on G, E, I we get angle(G, E, I) == orientation(E, I, G) mod 360
By external_angle_bisector_definition_v0_r on K, B, C, F we get Line(B, F) == external_angle_bisector(C, F, K)
By external_angle_bisector_definition_v0_r on C, G, C, D we get Line(D, G) == external_angle_bisector(C, D, C)
By internal_angle_bisector_definition_v0_r on C, B, C, D we get Line(B, D) == internal_angle_bisector(C, D, C)
By internal_angle_bisector_definition_v0_r on B, E, B, G we get Line(E, G) == internal_angle_bisector(B, G, B)
By external_angle_bisector_definition_v0_r on B, A, G, E we get Line(A, E) == external_angle_bisector(B, E, G)
By external_angle_bisector_definition_v0_r on A, C, A, F we get Line(C, F) == external_angle_bisector(A, F, A)
By external_angle_bisector_definition_v0_r on A, K, A, F we get Line(F, K) == external_angle_bisector(A, F, A)
By external_angle_bisector_definition_v0_r on B, A, B, E we get Line(A, E) == external_angle_bisector(B, E, B)
By external_angle_bisector_definition_v0_r on G, C, G, D we get Line(C, D) == external_angle_bisector(G, D, G)
By internal_angle_bisector_definition_v0_r on A, B, A, F we get Line(B, F) == internal_angle_bisector(A, F, A)
By external_angle_bisector_definition_v0_r on C, B, C, F we get Line(B, F) == external_angle_bisector(C, F, C)
By external_angle_bisector_definition_v0_r on B, G, B, D we get Line(D, G) == external_angle_bisector(B, D, B)
By external_angle_bisector_definition_v0_r on A, C, A, D we get Line(C, D) == external_angle_bisector(A, D, A)
By internal_angle_bisector_definition_v0_r on F, C, F, J we get Line(C, J) == internal_angle_bisector(F, J, F)
By external_angle_bisector_definition_v0_r on G, A, G, E we get Line(A, E) == external_angle_bisector(G, E, G)
By collinear_definition on E, I, C we get I in Line(C, E), C in Line(E, I), Line(C, E) == Line(E, I), 0 == 2 * angle(I, E, C) mod 360
By external_angle_bisector_definition_v0_r on A, J, A, F we get Line(F, J) == external_angle_bisector(A, F, A)
By external_angle_bisector_definition_v0_r on A, G, A, E we get Line(E, G) == external_angle_bisector(A, E, A)
By external_angle_bisector_definition_v0_r on G, C, G, E we get Line(C, E) == external_angle_bisector(G, E, G)
By internal_angle_bisector_definition_v0 on A, E, A, I we get angle(A, I, E) == angle(E, I, A) mod 360
By internal_angle_bisector_definition_v0_r on B, G, B, E we get Line(E, G) == internal_angle_bisector(B, E, B)
By internal_angle_bisector_definition_v0_r on C, B, A, E we get Line(B, E) == internal_angle_bisector(A, E, C)
By external_angle_bisector_definition_v0_r on C, A, C, D we get Line(A, D) == external_angle_bisector(C, D, C)
By external_angle_bisector_definition_v0_r on B, C, B, E we get Line(C, E) == external_angle_bisector(B, E, B)
By internal_angle_bisector_definition_v0_r on J, A, K, F we get Line(A, F) == internal_angle_bisector(J, F, K)
By external_angle_bisector_definition_v0_r on C, B, C, E we get Line(B, E) == external_angle_bisector(C, E, C)
By internal_angle_bisector_definition_v0_r on J, A, C, F we get Line(A, F) == internal_angle_bisector(C, F, J)
By internal_angle_bisector_definition_v0_r on I, D, I, K we get Line(D, K) == internal_angle_bisector(I, K, I)
By external_angle_bisector_definition_v0_r on C, A, C, F we get Line(A, F) == external_angle_bisector(C, F, C)
By internal_angle_bisector_definition_v0_r on A, F, A, B we get Line(B, F) == internal_angle_bisector(A, B, A)
By internal_angle_bisector_definition_v0_r on J, C, J, F we get Line(C, F) == internal_angle_bisector(J, F, J)
By internal_angle_bisector_definition_v0_r on K, D, K, I we get Line(D, I) == internal_angle_bisector(K, I, K)
By external_angle_bisector_definition_v0_r on K, A, C, F we get Line(A, F) == external_angle_bisector(C, F, K)
By external_angle_bisector_definition_v0_r on J, B, J, F we get Line(B, F) == external_angle_bisector(J, F, J)
By external_angle_bisector_definition_v0_r on B, J, B, F we get Line(F, J) == external_angle_bisector(B, F, B)
By external_angle_bisector_definition_v0_r on B, C, G, E we get Line(C, E) == external_angle_bisector(B, E, G)
By power_of_a_point_in_circle on A, Circle(A, C, D) we get 0 == power_of_a_point(A, Circle(A, C, D))
By external_angle_bisector_definition_v0_r on K, A, K, F we get Line(A, F) == external_angle_bisector(K, F, K)
By power_of_a_point_on_circle on C, Circle(A, C, D) we get 0 == power_of_a_point(C, Circle(A, C, D))
By internal_angle_bisector_definition_v0_r on D, K, D, I we get Line(I, K) == internal_angle_bisector(D, I, D)
By internal_angle_bisector_definition_v0_r on K, F, K, C we get Line(C, F) == internal_angle_bisector(K, C, K)
By internal_angle_bisector_definition_v0_r on C, K, C, F we get Line(F, K) == internal_angle_bisector(C, F, C)
By internal_angle_bisector_definition_v0_r on I, K, I, D we get Line(D, K) == internal_angle_bisector(I, D, I)
By internal_angle_bisector_definition_v0_r on K, C, K, F we get Line(C, F) == internal_angle_bisector(K, F, K)
By external_angle_bisector_definition_v0_r on B, A, B, D we get Line(A, D) == external_angle_bisector(B, D, B)
By power_of_a_point_in_circle on E, Circle(C, E, G) we get 0 == power_of_a_point(E, Circle(C, E, G))
By internal_angle_bisector_definition_v0_r on J, B, K, F we get Line(B, F) == internal_angle_bisector(J, F, K)
By external_angle_bisector_definition_v0_r on C, G, C, E we get Line(E, G) == external_angle_bisector(C, E, C)
By internal_angle_bisector_definition_v0_r on D, G, D, A we get Line(A, G) == internal_angle_bisector(D, A, D)
By internal_angle_bisector_definition_v0_r on F, B, F, A we get Line(A, B) == internal_angle_bisector(F, A, F)
By internal_angle_bisector_definition_v0_r on C, F, C, J we get Line(F, J) == internal_angle_bisector(C, J, C)
By collinear_definition on I, E, A we get E in Line(A, I), A in Line(E, I), Line(A, I) == Line(E, I), 0 == 2 * angle(E, I, A) mod 360
By internal_angle_bisector_definition_v0_r on C, D, C, B we get Line(B, D) == internal_angle_bisector(C, B, C)
By internal_angle_bisector_definition_v0_r on F, K, F, C we get Line(C, K) == internal_angle_bisector(F, C, F)
By internal_angle_bisector_definition_v0_r on A, G, A, D we get Line(D, G) == internal_angle_bisector(A, D, A)
By internal_angle_bisector_definition_v0_r on F, J, F, C we get Line(C, J) == internal_angle_bisector(F, C, F)
By perpendicular_angle_conditions_v0 on I, E, G we get angle(I, E, G) == orientation(E, G, I) mod 360
By power_of_a_point_in_circle on F, Circle(A, C, F) we get 0 == power_of_a_point(F, Circle(A, C, F))
By internal_angle_bisector_definition_v0_r on E, C, I, A we get Line(A, C) == internal_angle_bisector(E, A, I)
By power_of_a_point_on_circle on C, Circle(C, E, G) we get 0 == power_of_a_point(C, Circle(C, E, G))
By external_angle_bisector_definition_v0_r on A, B, A, E we get Line(B, E) == external_angle_bisector(A, E, A)
By external_angle_bisector_definition_v0_r on K, B, K, F we get Line(B, F) == external_angle_bisector(K, F, K)
By power_of_a_point_in_circle on D, Circle(A, C, D) we get 0 == power_of_a_point(D, Circle(A, C, D))
By collinear_definition on I, E, C we get E in Line(C, I), C in Line(E, I), Line(C, I) == Line(E, I), 0 == 2 * angle(E, I, C) mod 360
By internal_angle_bisector_definition_v0_r on B, C, A, F we get Line(C, F) == internal_angle_bisector(A, F, B)
By external_angle_bisector_definition_v0_r on B, K, B, F we get Line(F, K) == external_angle_bisector(B, F, B)
By internal_angle_bisector_definition_v0_r on J, F, K, C we get Line(C, F) == internal_angle_bisector(J, C, K)
By internal_angle_bisector_definition_v0_r on K, I, K, D we get Line(D, I) == internal_angle_bisector(K, D, K)
By internal_angle_bisector_definition_v0_r on B, K, A, F we get Line(F, K) == internal_angle_bisector(A, F, B)
By internal_angle_bisector_definition_v0_r on G, D, G, A we get Line(A, D) == internal_angle_bisector(G, A, G)
By internal_angle_bisector_definition_v0_r on E, A, I, C we get Line(A, C) == internal_angle_bisector(E, C, I)
By internal_angle_bisector_definition_v0_r on B, F, B, A we get Line(A, F) == internal_angle_bisector(B, A, B)
By collinear_definition on I, A, E we get A in Line(E, I), E in Line(A, I), Line(A, I) == Line(E, I), 0 == 2 * angle(A, I, E) mod 360
By internal_angle_bisector_definition_v0_r on D, I, D, K we get Line(I, K) == internal_angle_bisector(D, K, D)
By internal_angle_bisector_definition_v0_r on G, A, G, D we get Line(A, D) == internal_angle_bisector(G, D, G)
By internal_angle_bisector_definition_v0_r on D, A, D, G we get Line(A, G) == internal_angle_bisector(D, G, D)
By internal_angle_bisector_definition_v0_r on A, G, C, E we get Line(E, G) == internal_angle_bisector(A, E, C)
By internal_angle_bisector_definition_v0_r on J, B, C, F we get Line(B, F) == internal_angle_bisector(C, F, J)
By external_angle_bisector_definition_v0_r on J, A, J, F we get Line(A, F) == external_angle_bisector(J, F, J)
By internal_angle_bisector_definition_v0_r on C, A, B, D we get Line(A, D) == internal_angle_bisector(B, D, C)
By internal_angle_bisector_definition_v0_r on E, C, E, A we get Line(A, C) == internal_angle_bisector(E, A, E)
By internal_angle_bisector_definition_v0_r on C, J, C, F we get Line(F, J) == internal_angle_bisector(C, F, C)
By internal_angle_bisector_definition_v0_r on B, A, B, F we get Line(A, F) == internal_angle_bisector(B, F, B)
By internal_angle_bisector_definition_v0_r on F, C, F, K we get Line(C, K) == internal_angle_bisector(F, K, F)
By power_of_a_point_on_circle on D, Circle(C, D, G) we get 0 == power_of_a_point(D, Circle(C, D, G))
By internal_angle_bisector_definition_v0_r on A, J, B, F we get Line(F, J) == internal_angle_bisector(A, F, B)
By internal_angle_bisector_definition_v0_r on B, C, B, D we get Line(C, D) == internal_angle_bisector(B, D, B)
By external_angle_bisector_definition_v0_r on G, B, G, D we get Line(B, D) == external_angle_bisector(G, D, G)
By power_of_a_point_in_circle on C, Circle(C, D, G) we get 0 == power_of_a_point(C, Circle(C, D, G))
By internal_angle_bisector_definition_v0_r on G, E, G, B we get Line(B, E) == internal_angle_bisector(G, B, G)
By power_of_a_point_on_circle on G, Circle(C, E, G) we get 0 == power_of_a_point(G, Circle(C, E, G))
By internal_angle_bisector_definition_v0_r on G, B, G, E we get Line(B, E) == internal_angle_bisector(G, E, G)
By internal_angle_bisector_definition_v0_r on D, C, D, B we get Line(B, C) == internal_angle_bisector(D, B, D)
By collinear_definition on E, C, I we get C in Line(E, I), I in Line(C, E), Line(C, E) == Line(E, I), 0 == 2 * angle(C, E, I) mod 360
By internal_angle_bisector_definition_v0_r on F, A, F, B we get Line(A, B) == internal_angle_bisector(F, B, F)
By internal_angle_bisector_definition_v0_r on A, D, A, G we get Line(D, G) == internal_angle_bisector(A, G, A)
By internal_angle_bisector_definition_v0_r on D, B, D, C we get Line(B, C) == internal_angle_bisector(D, C, D)
By power_of_a_point_in_circle on A, Circle(A, C, F) we get 0 == power_of_a_point(A, Circle(A, C, F))
By internal_angle_bisector_definition_v0_r on A, C, A, E we get Line(C, E) == internal_angle_bisector(A, E, A)
By collinear_definition on E, A, I we get A in Line(E, I), I in Line(A, E), Line(A, E) == Line(E, I), 0 == 2 * angle(A, E, I) mod 360
By internal_angle_bisector_definition_v0_r on E, A, E, C we get Line(A, C) == internal_angle_bisector(E, C, E)
By collinear_definition on E, I, A we get I in Line(A, E), A in Line(E, I), Line(A, E) == Line(E, I), 0 == 2 * angle(I, E, A) mod 360
By internal_angle_bisector_definition_v0_r on J, F, J, C we get Line(C, F) == internal_angle_bisector(J, C, J)
By internal_angle_bisector_definition_v0_r on B, D, B, C we get Line(C, D) == internal_angle_bisector(B, C, B)
By power_of_a_point_on_circle on C, Circle(A, C, F) we get 0 == power_of_a_point(C, Circle(A, C, F))
By perpendicular_angle_conditions_v0 on I, E, B we get angle(I, E, B) == orientation(B, I, E) mod 360
By internal_angle_bisector_definition_v0 on C, E, C, I we get angle(C, I, E) == angle(E, I, C) mod 360
By internal_angle_bisector_definition_v0_r on E, B, E, G we get Line(B, G) == internal_angle_bisector(E, G, E)
By perpendicular_angle_conditions_v0 on B, E, I we get angle(B, E, I) == orientation(B, E, I) mod 360
By internal_angle_bisector_definition_v0_r on C, F, C, K we get Line(F, K) == internal_angle_bisector(C, K, C)
By altitude_definition on orthocenter(A, B, C), E, I, j we get j == altitude(orthocenter(A, B, C), E, I)
By altitude_definition on orthocenter(A, B, C), E, A, j we get j == altitude(orthocenter(A, B, C), A, E)
By power_of_a_point_definition on I, C, A, Circle(A, C, F) we get log(distance(C, I)) + log(distance(A, I)) == log(power_of_a_point(I, Circle(A, C, F)))
By altitude_definition on orthocenter(A, B, C), B, F, k we get k == altitude(orthocenter(A, B, C), B, F)
By altitude_definition on orthocenter(A, B, C), I, A, j we get j == altitude(orthocenter(A, B, C), A, I)
By altitude_definition on orthocenter(A, B, C), D, B, i we get i == altitude(orthocenter(A, B, C), B, D)
By altitude_definition on B, E, I, j we get j == altitude(B, E, I)
By power_of_a_point_definition on H, G, C, Circle(C, D, G) we get log(distance(G, H)) + log(distance(C, H)) == log(power_of_a_point(H, Circle(C, D, G)))
By altitude_definition on orthocenter(A, B, C), E, C, j we get j == altitude(orthocenter(A, B, C), C, E)
By altitude_definition on G, E, I, j we get j == altitude(G, E, I)
By power_of_a_point_definition on H, C, G, Circle(C, E, G) we get log(distance(C, H)) + log(distance(G, H)) == log(power_of_a_point(H, Circle(C, E, G)))
By altitude_definition on orthocenter(A, B, C), A, B, k we get k == altitude(orthocenter(A, B, C), A, B)
By altitude_definition on orthocenter(A, B, C), C, B, i we get i == altitude(orthocenter(A, B, C), B, C)
By altitude_definition on orthocenter(A, B, C), D, C, i we get i == altitude(orthocenter(A, B, C), C, D)
By altitude_definition on orthocenter(A, B, C), C, I, j we get j == altitude(orthocenter(A, B, C), C, I)
By altitude_definition on orthocenter(A, B, C), A, C, j we get j == altitude(orthocenter(A, B, C), A, C)
By power_of_a_point_definition on I, A, C, Circle(A, C, D) we get log(distance(A, I)) + log(distance(C, I)) == log(power_of_a_point(I, Circle(A, C, D)))
By altitude_definition on orthocenter(A, B, C), F, A, k we get k == altitude(orthocenter(A, B, C), A, F)
By power_of_a_point_definition on I, E, C, Circle(C, E, G) we get log(distance(E, I)) + log(distance(C, I)) == log(power_of_a_point(I, Circle(C, E, G)))
By power_of_a_point_definition on A, C, E, Circle(C, E, G) we get log(distance(A, C)) + log(distance(A, E)) == log(power_of_a_point(A, Circle(C, E, G)))
By power_of_a_point_definition on B, A, F, Circle(A, C, F) we get log(distance(A, B)) + log(distance(B, F)) == log(power_of_a_point(B, Circle(A, C, F)))
By power_of_a_point_definition on E, A, I, c we get log(power_of_a_point(E, c)) == log(distance(A, E)) + log(distance(E, I))
By power_of_a_point_definition on G, A, D, Circle(A, C, D) we get log(distance(A, G)) + log(distance(D, G)) == log(power_of_a_point(G, Circle(A, C, D)))
By power_of_a_point_definition on B, C, D, Circle(A, C, D) we get log(distance(B, C)) + log(distance(B, D)) == log(power_of_a_point(B, Circle(A, C, D)))
By power_of_a_point_definition on K, F, C, Circle(A, C, F) we get log(distance(F, K)) + log(distance(C, K)) == log(power_of_a_point(K, Circle(A, C, F)))
By power_of_a_point_definition on B, D, C, Circle(C, D, G) we get log(distance(B, D)) + log(distance(B, C)) == log(power_of_a_point(B, Circle(C, D, G)))
By power_of_a_point_definition on E, C, A, Circle(A, C, F) we get log(distance(C, E)) + log(distance(A, E)) == log(power_of_a_point(E, Circle(A, C, F)))
By power_of_a_point_definition on B, G, E, Circle(C, E, G) we get log(distance(B, G)) + log(distance(B, E)) == log(power_of_a_point(B, Circle(C, E, G)))
By power_of_a_point_definition on J, C, F, Circle(A, C, F) we get log(distance(C, J)) + log(distance(F, J)) == log(power_of_a_point(J, Circle(A, C, F)))
By power_of_a_point_definition on A, D, G, Circle(C, D, G) we get log(distance(A, D)) + log(distance(A, G)) == log(power_of_a_point(A, Circle(C, D, G)))
By power_of_a_point_definition on E, A, C, Circle(A, C, D) we get log(distance(A, E)) + log(distance(C, E)) == log(power_of_a_point(E, Circle(A, C, D)))
By line_definition on orthocenter(B, C, G), orthocenter(A, C, G), f we get f == Line(orthocenter(A, C, G), orthocenter(B, C, G))
By line_definition on A, orthocenter(A, B, G), h we get h == Line(A, orthocenter(A, B, G))
By line_definition on G, orthocenter(A, C, G), j we get j == Line(G, orthocenter(A, C, G))
By line_definition on orthocenter(A, B, G), K, k we get k == Line(K, orthocenter(A, B, G))
By line_definition on J, H, k we get k == Line(H, J)
By line_definition on orthocenter(B, C, G), orthocenter(A, B, G), h we get h == Line(orthocenter(A, B, G), orthocenter(B, C, G))
By line_intersection_definition on orthocenter(A, B, G), k, h we get orthocenter(A, B, G) == line_intersection(h, k)
By line_definition on G, orthocenter(A, B, G), k we get k == Line(G, orthocenter(A, B, G))
By line_definition on I, orthocenter(A, B, G), h we get h == Line(I, orthocenter(A, B, G))
By line_intersection_definition on orthocenter(A, B, G), g, h we get orthocenter(A, B, G) == line_intersection(g, h)
By line_intersection_definition on orthocenter(B, C, G), i, h we get orthocenter(B, C, G) == line_intersection(h, i)
By line_intersection_definition on orthocenter(A, B, G), g, k we get orthocenter(A, B, G) == line_intersection(g, k)
By line_intersection_definition on orthocenter(B, C, G), h, f we get orthocenter(B, C, G) == line_intersection(f, h)
By line_definition on A, orthocenter(A, C, G), f we get f == Line(A, orthocenter(A, C, G))
By line_definition on orthocenter(B, C, G), C, h we get h == Line(C, orthocenter(B, C, G))
By line_definition on orthocenter(B, C, G), B, f we get f == Line(B, orthocenter(B, C, G))
By line_definition on D, orthocenter(B, C, G), i we get i == Line(D, orthocenter(B, C, G))
By line_intersection_definition on orthocenter(B, C, G), i, f we get orthocenter(B, C, G) == line_intersection(f, i)
By line_intersection_definition on orthocenter(A, C, G), g, j we get orthocenter(A, C, G) == line_intersection(g, j)
By line_definition on H, F, k we get k == Line(F, H)
By line_definition on J, orthocenter(A, B, G), k we get k == Line(J, orthocenter(A, B, G))
By line_definition on K, H, k we get k == Line(H, K)
By line_definition on orthocenter(B, C, G), I, h we get h == Line(I, orthocenter(B, C, G))
By line_definition on C, orthocenter(A, C, G), g we get g == Line(C, orthocenter(A, C, G))
By line_intersection_definition on orthocenter(A, C, G), f, g we get orthocenter(A, C, G) == line_intersection(f, g)
By line_definition on orthocenter(A, B, G), D, g we get g == Line(D, orthocenter(A, B, G))
By radical_axis_is_perpendicular_to_center_line on g, Circle(A, C, D), Circle(C, D, G) we get perpendicular(g, Line(center(Circle(A, C, D)), center(Circle(C, D, G))))
By line_definition on E, orthocenter(B, C, G), h we get h == Line(E, orthocenter(B, C, G))
By line_definition on E, orthocenter(A, B, G), h we get h == Line(E, orthocenter(A, B, G))
By line_definition on H, orthocenter(A, B, G), k we get k == Line(H, orthocenter(A, B, G))
By line_definition on G, orthocenter(B, C, G), i we get i == Line(G, orthocenter(B, C, G))
By line_definition on orthocenter(A, B, G), orthocenter(A, C, G), g we get g == Line(orthocenter(A, B, G), orthocenter(A, C, G))
By line_definition on F, orthocenter(B, C, G), f we get f == Line(F, orthocenter(B, C, G))
By line_definition on E, orthocenter(A, C, G), j we get j == Line(E, orthocenter(A, C, G))
By line_intersection_definition on orthocenter(A, C, G), f, j we get orthocenter(A, C, G) == line_intersection(f, j)
By line_definition on F, orthocenter(A, B, G), k we get k == Line(F, orthocenter(A, B, G))
By line_definition on orthocenter(A, B, G), B, g we get g == Line(B, orthocenter(A, B, G))
By line_definition on orthocenter(A, C, G), D, g we get g == Line(D, orthocenter(A, C, G))
By line_definition on F, orthocenter(A, C, G), f we get f == Line(F, orthocenter(A, C, G))
By median_definition on F, A, C, Line(F, I) we get Line(F, I) == median(F, A, C)
By line_intersection_definition on H, Line(D, H), Line(E, H) we get H == line_intersection(Line(D, H), Line(E, H))
By line_intersection_definition on E, j, Line(E, H) we get E == line_intersection(j, Line(E, H))
By perpendicular_line_definition on orthocenter(B, C, G), h, j we get h == perpendicular_line(orthocenter(B, C, G), j)
By line_intersection_definition on D, l, Line(D, H) we get D == line_intersection(l, Line(D, H))
By perpendicular_line_definition on orthocenter(A, B, G), g, i we get g == perpendicular_line(orthocenter(A, B, G), i)
By perpendicular_line_definition on H, k, f we get k == perpendicular_line(H, f)
By line_intersection_definition on H, Line(H, I), Line(D, H) we get H == line_intersection(Line(D, H), Line(H, I))
By line_intersection_definition on H, k, Line(D, H) we get H == line_intersection(k, Line(D, H))
By line_intersection_definition on H, Line(E, H), Line(A, H) we get H == line_intersection(Line(A, H), Line(E, H))
By line_intersection_definition on F, Line(F, I), k we get F == line_intersection(k, Line(F, I))
By perpendicular_line_definition on orthocenter(A, C, G), f, k we get f == perpendicular_line(orthocenter(A, C, G), k)
By perpendicular_line_definition on orthocenter(A, B, G), h, j we get h == perpendicular_line(orthocenter(A, B, G), j)
By median_definition on D, G, C, Line(D, H) we get Line(D, H) == median(D, C, G)
By line_intersection_definition on H, Line(E, H), Line(H, J) we get H == line_intersection(Line(E, H), Line(H, J))
By line_intersection_definition on D, i, Line(D, H) we get D == line_intersection(i, Line(D, H))
By line_intersection_definition on I, h, Line(F, I) we get I == line_intersection(h, Line(F, I))
By line_intersection_definition on I, Line(F, I), l we get I == line_intersection(l, Line(F, I))
By line_intersection_definition on H, Line(A, H), Line(D, H) we get H == line_intersection(Line(A, H), Line(D, H))
By perpendicular_line_definition on orthocenter(B, C, G), i, g we get i == perpendicular_line(orthocenter(B, C, G), g)
By line_intersection_definition on H, Line(D, H), Line(H, J) we get H == line_intersection(Line(D, H), Line(H, J))
By line_intersection_definition on E, Line(E, H), h we get E == line_intersection(h, Line(E, H))
By line_intersection_definition on D, g, Line(D, H) we get D == line_intersection(g, Line(D, H))
By line_intersection_definition on H, k, Line(E, H) we get H == line_intersection(k, Line(E, H))
By line_intersection_definition on I, Line(F, I), Line(I, J) we get I == line_intersection(Line(F, I), Line(I, J))
By perpendicular_line_definition on orthocenter(A, C, G), g, i we get g == perpendicular_line(orthocenter(A, C, G), i)
By perpendicular_line_definition on orthocenter(A, B, G), k, f we get k == perpendicular_line(orthocenter(A, B, G), f)
By line_intersection_definition on I, Line(F, I), Line(H, I) we get I == line_intersection(Line(F, I), Line(H, I))
By line_intersection_definition on F, f, Line(F, I) we get F == line_intersection(f, Line(F, I))
By median_definition on E, C, G, Line(E, H) we get Line(E, H) == median(E, C, G)
By line_intersection_definition on H, Line(E, H), Line(H, I) we get H == line_intersection(Line(E, H), Line(H, I))
By perpendicular_line_definition on orthocenter(B, C, G), f, k we get f == perpendicular_line(orthocenter(B, C, G), k)
By perpendicular_line_definition on orthocenter(A, C, G), j, h we get j == perpendicular_line(orthocenter(A, C, G), h)
By line_unique_intersection on f, i, A, orthocenter(B, C, G) we get A == orthocenter(B, C, G)
By line_unique_intersection on h, g, C, orthocenter(A, B, G) we get C == orthocenter(A, B, G)
By line_unique_intersection on g, j, orthocenter(A, C, G), B we get B == orthocenter(A, C, G)
By circle_radius_v0 on D, Circle(C, E, G) we get D in Circle(C, E, G)
By circle_radius_v0 on D, Circle(A, C, F) we get D in Circle(A, C, F)
By circle_radius_v0 on F, Circle(A, C, D) we get F in Circle(A, C, D)
By circle_radius_v0 on E, Circle(C, D, G) we get E in Circle(C, D, G)
By perpendicular_direction_conditions_v0_r on F, A, H, C we get 180 == 2 * direction(F, A) - 2 * direction(H, C) mod 360
By perpendicular_direction_conditions_v0 on B, D, H, I we get perpendicular(Line(B, D), Line(H, I))
By same_angle_v1 on C, F, G, D we get angle(F, C, D) == angle(G, C, D) mod 360
By same_angle_v0 on C, F, G, E we get angle(F, C, E) == angle(G, C, E) mod 360
By same_angle_v0 on C, G, J, A we get angle(G, C, A) == angle(J, C, A) mod 360
By same_angle_v0 on C, F, G, A we get angle(F, C, A) == angle(G, C, A) mod 360
By same_angle_v1 on C, K, G, D we get angle(G, C, D) == angle(K, C, D) mod 360
By same_angle_v1 on C, G, F, B we get angle(F, C, B) == angle(G, C, B) mod 360
By same_angle_v1 on C, J, G, D we get angle(G, C, D) == angle(J, C, D) mod 360
By perpendicular_direction_conditions_v0 on D, C, H, I we get perpendicular(Line(C, D), Line(H, I))
By same_angle_v0 on C, J, G, I we get angle(G, C, I) == angle(J, C, I) mod 360
By same_angle_v0 on C, K, G, A we get angle(G, C, A) == angle(K, C, A) mod 360
By same_angle_v1 on C, G, J, B we get angle(G, C, B) == angle(J, C, B) mod 360
By same_angle_v0 on C, K, G, I we get angle(G, C, I) == angle(K, C, I) mod 360
By same_angle_v0 on C, K, G, E we get angle(G, C, E) == angle(K, C, E) mod 360
By perpendicular_direction_conditions_v0_r on C, H, B, A we get 180 == 2 * direction(C, H) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0 on I, H, B, C we get perpendicular(Line(B, C), Line(H, I))
By same_angle_v0 on C, G, F, I we get angle(F, C, I) == angle(G, C, I) mod 360
By same_angle_v3 on I, C, E, F we get angle(C, I, F) == angle(E, I, F) + 180 mod 360
By same_angle_v0 on I, D, K, F we get angle(D, I, F) == angle(K, I, F) mod 360
By same_angle_v1 on C, G, K, B we get angle(G, C, B) == angle(K, C, B) mod 360
By perpendicular_direction_conditions_v0_r on A, B, C, H we get 180 == 2 * direction(A, B) - 2 * direction(C, H) mod 360
By perpendicular_direction_conditions_v0_r on G, C, B, A we get 180 == 2 * direction(G, C) - 2 * direction(B, A) mod 360
By same_angle_v1 on I, A, E, F we get angle(A, I, F) == angle(E, I, F) mod 360
By perpendicular_direction_conditions_v0_r on B, F, G, C we get 180 == 2 * direction(B, F) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on A, B, H, C we get 180 == 2 * direction(A, B) - 2 * direction(H, C) mod 360
By same_angle_v0 on C, J, G, E we get angle(G, C, E) == angle(J, C, E) mod 360
By perpendicular_direction_conditions_v0_r on F, A, H, G we get 180 == 2 * direction(F, A) - 2 * direction(H, G) mod 360
By perpendicular_direction_conditions_v0_r on G, H, B, F we get 180 == 2 * direction(G, H) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on A, B, C, G we get 180 == 2 * direction(A, B) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on B, F, C, G we get 180 == 2 * direction(B, F) - 2 * direction(C, G) mod 360
By between_imply_not_between on J, K, C we get collinear_and_not_between(C, J, K)
By perpendicular_direction_conditions_v0_r on B, A, H, C we get 180 == 2 * direction(B, A) - 2 * direction(H, C) mod 360
By perpendicular_direction_conditions_v0_r on H, G, B, A we get 180 == 2 * direction(H, G) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on H, C, A, F we get 180 == 2 * direction(H, C) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on B, A, G, H we get 180 == 2 * direction(B, A) - 2 * direction(G, H) mod 360
By perpendicular_direction_conditions_v0_r on B, A, C, H we get 180 == 2 * direction(B, A) - 2 * direction(C, H) mod 360
By perpendicular_direction_conditions_v0_r on C, H, B, F we get 180 == 2 * direction(C, H) - 2 * direction(B, F) mod 360
By projection_definition on G, F, f we get F == projection(G, f)
By perpendicular_direction_conditions_v0_r on B, F, H, G we get 180 == 2 * direction(B, F) - 2 * direction(H, G) mod 360
By perpendicular_direction_conditions_v0_r on H, C, B, F we get 180 == 2 * direction(H, C) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on F, B, G, C we get 180 == 2 * direction(F, B) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on F, B, C, G we get 180 == 2 * direction(F, B) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on F, A, C, H we get 180 == 2 * direction(F, A) - 2 * direction(C, H) mod 360
By perpendicular_direction_conditions_v0_r on H, G, F, A we get 180 == 2 * direction(H, G) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on C, G, B, A we get 180 == 2 * direction(C, G) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on C, H, A, B we get 180 == 2 * direction(C, H) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on F, A, C, G we get 180 == 2 * direction(F, A) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on H, C, F, B we get 180 == 2 * direction(H, C) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on A, F, G, C we get 180 == 2 * direction(A, F) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on C, H, F, A we get 180 == 2 * direction(C, H) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on H, G, A, B we get 180 == 2 * direction(H, G) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on G, C, B, F we get 180 == 2 * direction(G, C) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on B, F, C, H we get 180 == 2 * direction(B, F) - 2 * direction(C, H) mod 360
By perpendicular_direction_conditions_v0_r on H, G, F, B we get 180 == 2 * direction(H, G) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on A, B, G, C we get 180 == 2 * direction(A, B) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on G, H, A, F we get 180 == 2 * direction(G, H) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on A, B, H, G we get 180 == 2 * direction(A, B) - 2 * direction(H, G) mod 360
By perpendicular_direction_conditions_v0_r on H, G, A, F we get 180 == 2 * direction(H, G) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on F, B, H, C we get 180 == 2 * direction(F, B) - 2 * direction(H, C) mod 360
By perpendicular_direction_conditions_v0_r on B, F, H, C we get 180 == 2 * direction(B, F) - 2 * direction(H, C) mod 360
By perpendicular_direction_conditions_v0_r on A, F, G, H we get 180 == 2 * direction(A, F) - 2 * direction(G, H) mod 360
By perpendicular_direction_conditions_v0_r on B, A, H, G we get 180 == 2 * direction(B, A) - 2 * direction(H, G) mod 360
By perpendicular_direction_conditions_v0_r on H, G, B, F we get 180 == 2 * direction(H, G) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on C, G, F, B we get 180 == 2 * direction(C, G) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on G, H, B, A we get 180 == 2 * direction(G, H) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on C, G, B, F we get 180 == 2 * direction(C, G) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on C, G, A, F we get 180 == 2 * direction(C, G) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on F, A, G, H we get 180 == 2 * direction(F, A) - 2 * direction(G, H) mod 360
By perpendicular_direction_conditions_v0_r on C, H, A, F we get 180 == 2 * direction(C, H) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on C, H, F, B we get 180 == 2 * direction(C, H) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on A, F, C, G we get 180 == 2 * direction(A, F) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on G, C, F, B we get 180 == 2 * direction(G, C) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on H, C, A, B we get 180 == 2 * direction(H, C) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on C, G, A, B we get 180 == 2 * direction(C, G) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on G, H, F, B we get 180 == 2 * direction(G, H) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on G, H, A, B we get 180 == 2 * direction(G, H) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on A, F, C, H we get 180 == 2 * direction(A, F) - 2 * direction(C, H) mod 360
By perpendicular_direction_conditions_v0_r on F, B, G, H we get 180 == 2 * direction(F, B) - 2 * direction(G, H) mod 360
By perpendicular_direction_conditions_v0_r on A, F, H, G we get 180 == 2 * direction(A, F) - 2 * direction(H, G) mod 360
By perpendicular_direction_conditions_v0_r on F, B, C, H we get 180 == 2 * direction(F, B) - 2 * direction(C, H) mod 360
By perpendicular_direction_conditions_v0_r on G, C, A, B we get 180 == 2 * direction(G, C) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on B, A, C, G we get 180 == 2 * direction(B, A) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on A, F, H, C we get 180 == 2 * direction(A, F) - 2 * direction(H, C) mod 360
By perpendicular_direction_conditions_v0_r on G, C, A, F we get 180 == 2 * direction(G, C) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on G, C, F, A we get 180 == 2 * direction(G, C) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on C, G, F, A we get 180 == 2 * direction(C, G) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on A, B, G, H we get 180 == 2 * direction(A, B) - 2 * direction(G, H) mod 360
By perpendicular_direction_conditions_v0_r on G, H, F, A we get 180 == 2 * direction(G, H) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on F, B, H, G we get 180 == 2 * direction(F, B) - 2 * direction(H, G) mod 360
By perpendicular_direction_conditions_v0_r on B, A, G, C we get 180 == 2 * direction(B, A) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on H, C, B, A we get 180 == 2 * direction(H, C) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on B, F, G, H we get 180 == 2 * direction(B, F) - 2 * direction(G, H) mod 360
By perpendicular_direction_conditions_v0_r on F, A, G, C we get 180 == 2 * direction(F, A) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on H, C, F, A we get 180 == 2 * direction(H, C) - 2 * direction(F, A) mod 360
By between_imply_not_between on C, K, J we get collinear_and_not_between(J, C, K)
By between_imply_not_between on A, E, I we get collinear_and_not_between(E, A, I)
By between_imply_not_between on I, E, A we get collinear_and_not_between(A, I, E)
By between_imply_not_between on K, F, J we get collinear_and_not_between(F, K, J)
By between_imply_not_between on J, F, K we get collinear_and_not_between(F, J, K)
By between_imply_not_between on C, I, E we get collinear_and_not_between(E, C, I)
By between_imply_not_between on E, I, C we get collinear_and_not_between(C, E, I)
By circle_by_three_points_and_center on H, D, G, E we get H == center(Circle(D, E, G))
By circle_by_three_points_and_center on I, A, D, F we get I == center(Circle(A, D, F))
By circle_by_three_points_and_center on I, F, C, D we get I == center(Circle(C, D, F))
By circle_by_three_points_and_center on H, D, C, E we get H == center(Circle(C, D, E))
By same_angle_v1 on G, C, K, A we get angle(C, G, A) == angle(K, G, A) mod 360
By same_angle_v0 on K, J, G, I we get angle(G, K, I) == angle(J, K, I) mod 360
By same_angle_v1 on F, K, C, I we get angle(C, F, I) == angle(K, F, I) mod 360
By same_angle_v2 on G, J, C, E we get angle(J, G, E) == angle(C, G, E) + 180 mod 360
By same_angle_v0 on D, I, K, H we get angle(I, D, H) == angle(K, D, H) mod 360
By same_angle_v0 on K, G, F, I we get angle(F, K, I) == angle(G, K, I) mod 360
By same_angle_v2 on G, D, A, J we get angle(D, G, J) == angle(A, G, J) + 180 mod 360
By same_angle_v1 on J, C, G, A we get angle(C, J, A) == angle(G, J, A) mod 360
By same_angle_v1 on J, G, K, A we get angle(G, J, A) == angle(K, J, A) mod 360
By same_angle_v2 on G, J, C, A we get angle(J, G, A) == angle(C, G, A) + 180 mod 360
By same_angle_v2 on G, B, E, J we get angle(B, G, J) == angle(E, G, J) + 180 mod 360
By same_angle_v2 on K, D, I, G we get angle(D, K, G) == angle(I, K, G) + 180 mod 360
By same_angle_v3 on G, F, C, A we get angle(F, G, A) == angle(C, G, A) + 180 mod 360
By same_angle_v2 on E, C, A, H we get angle(C, E, H) == angle(A, E, H) + 180 mod 360
By same_angle_v0 on G, C, K, B we get angle(C, G, B) == angle(K, G, B) mod 360
By same_angle_v0 on F, C, G, B we get angle(C, F, B) == angle(G, F, B) mod 360
By same_angle_v2 on G, E, B, K we get angle(E, G, K) == angle(B, G, K) + 180 mod 360
By same_angle_v2 on G, C, J, D we get angle(C, G, D) == angle(J, G, D) + 180 mod 360
By same_angle_v1 on G, K, C, E we get angle(C, G, E) == angle(K, G, E) mod 360
By same_angle_v2 on G, C, F, B we get angle(C, G, B) == angle(F, G, B) + 180 mod 360
By same_angle_v1 on E, G, B, H we get angle(B, E, H) == angle(G, E, H) mod 360
By perpendicular_direction_conditions_v0_r on G, K, F, B we get 180 == 2 * direction(G, K) - 2 * direction(F, B) mod 360
By same_angle_v3 on F, J, C, I we get angle(J, F, I) == angle(C, F, I) + 180 mod 360
By same_angle_v1 on F, G, K, A we get angle(G, F, A) == angle(K, F, A) mod 360
By same_angle_v0 on F, K, G, B we get angle(G, F, B) == angle(K, F, B) mod 360
By perpendicular_direction_conditions_v0_r on G, J, F, B we get 180 == 2 * direction(G, J) - 2 * direction(F, B) mod 360
By same_angle_v3 on K, G, C, I we get angle(G, K, I) == angle(C, K, I) + 180 mod 360
By same_angle_v1 on J, F, G, I we get angle(F, J, I) == angle(G, J, I) mod 360
By same_angle_v2 on F, J, K, I we get angle(J, F, I) == angle(K, F, I) + 180 mod 360
By same_angle_v3 on E, I, A, H we get angle(I, E, H) == angle(A, E, H) + 180 mod 360
By same_angle_v2 on F, G, J, B we get angle(G, F, B) == angle(J, F, B) + 180 mod 360
By perpendicular_direction_conditions_v0_r on B, F, J, G we get 180 == 2 * direction(B, F) - 2 * direction(J, G) mod 360
By same_angle_v3 on F, J, G, A we get angle(J, F, A) == angle(G, F, A) + 180 mod 360
By same_angle_v1 on F, G, C, A we get angle(C, F, A) == angle(G, F, A) mod 360
By same_angle_v0 on D, A, G, H we get angle(A, D, H) == angle(G, D, H) mod 360
By same_angle_v1 on K, G, J, D we get angle(G, K, D) == angle(J, K, D) mod 360
By same_angle_v2 on G, A, D, K we get angle(A, G, K) == angle(D, G, K) + 180 mod 360
By same_angle_v3 on G, B, E, F we get angle(B, G, F) == angle(E, G, F) + 180 mod 360
By perpendicular_direction_conditions_v0_r on G, K, A, F we get 180 == 2 * direction(G, K) - 2 * direction(A, F) mod 360
By same_angle_v1 on J, G, C, I we get angle(C, J, I) == angle(G, J, I) mod 360
By same_angle_v1 on K, G, F, D we get angle(F, K, D) == angle(G, K, D) mod 360
By perpendicular_direction_conditions_v0_r on G, F, F, A we get 180 == 2 * direction(G, F) - 2 * direction(F, A) mod 360
By same_angle_v2 on G, C, J, B we get angle(C, G, B) == angle(J, G, B) + 180 mod 360
By perpendicular_direction_conditions_v0_r on A, B, J, G we get 180 == 2 * direction(A, B) - 2 * direction(J, G) mod 360
By same_angle_v0 on E, C, I, H we get angle(C, E, H) == angle(I, E, H) mod 360
By same_angle_v2 on K, C, G, D we get angle(C, K, D) == angle(G, K, D) + 180 mod 360
By same_angle_v3 on F, A, B, I we get angle(A, F, I) == angle(B, F, I) + 180 mod 360
By perpendicular_direction_conditions_v0_r on A, F, J, G we get 180 == 2 * direction(A, F) - 2 * direction(J, G) mod 360
By perpendicular_direction_conditions_v0_r on G, J, B, A we get 180 == 2 * direction(G, J) - 2 * direction(B, A) mod 360
By same_angle_v2 on G, D, A, F we get angle(D, G, F) == angle(A, G, F) + 180 mod 360
By perpendicular_direction_conditions_v0_r on F, B, K, G we get 180 == 2 * direction(F, B) - 2 * direction(K, G) mod 360
By perpendicular_direction_conditions_v0_r on A, F, F, G we get 180 == 2 * direction(A, F) - 2 * direction(F, G) mod 360
By same_angle_v1 on J, K, G, I we get angle(G, J, I) == angle(K, J, I) mod 360
By same_angle_v2 on G, C, F, D we get angle(C, G, D) == angle(F, G, D) + 180 mod 360
By perpendicular_direction_conditions_v0_r on A, B, K, G we get 180 == 2 * direction(A, B) - 2 * direction(K, G) mod 360
By same_angle_v0 on G, K, C, D we get angle(C, G, D) == angle(K, G, D) mod 360
By in_imply_collinear on orthocenter(A, C, G), F, A we get collinear(A, F, orthocenter(A, C, G))
By perpendicular_direction_conditions_v0_r on A, F, G, K we get 180 == 2 * direction(A, F) - 2 * direction(G, K) mod 360
By same_angle_v1 on J, F, G, A we get angle(F, J, A) == angle(G, J, A) mod 360
By same_angle_v3 on F, A, B, G we get angle(A, F, G) == angle(B, F, G) + 180 mod 360
By perpendicular_direction_conditions_v0_r on F, G, A, B we get 180 == 2 * direction(F, G) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on F, A, G, F we get 180 == 2 * direction(F, A) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on K, G, B, F we get 180 == 2 * direction(K, G) - 2 * direction(B, F) mod 360
By same_angle_v2 on G, F, C, E we get angle(F, G, E) == angle(C, G, E) + 180 mod 360
By in_imply_collinear on J, G, H we get collinear(G, H, J)
By in_imply_collinear on orthocenter(B, C, G), E, C we get collinear(C, E, orthocenter(B, C, G))
By perpendicular_direction_conditions_v0_r on B, F, G, J we get 180 == 2 * direction(B, F) - 2 * direction(G, J) mod 360
By in_imply_collinear on F, G, H we get collinear(F, G, H)
By perpendicular_direction_conditions_v0_r on J, G, B, F we get 180 == 2 * direction(J, G) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on K, G, A, B we get 180 == 2 * direction(K, G) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on K, G, F, A we get 180 == 2 * direction(K, G) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on B, F, G, F we get 180 == 2 * direction(B, F) - 2 * direction(G, F) mod 360
By probably_between_and_collinear_implies_between on K, G, F we get between(F, G, K)
By same_angle_v3 on D, B, C, H we get angle(B, D, H) == angle(C, D, H) + 180 mod 360
By perpendicular_direction_conditions_v0_r on K, G, B, A we get 180 == 2 * direction(K, G) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on B, A, G, F we get 180 == 2 * direction(B, A) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on G, K, B, A we get 180 == 2 * direction(G, K) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on G, F, B, A we get 180 == 2 * direction(G, F) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on F, B, J, G we get 180 == 2 * direction(F, B) - 2 * direction(J, G) mod 360
By perpendicular_direction_conditions_v0_r on K, G, A, F we get 180 == 2 * direction(K, G) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on F, A, J, G we get 180 == 2 * direction(F, A) - 2 * direction(J, G) mod 360
By perpendicular_direction_conditions_v0_r on J, G, A, B we get 180 == 2 * direction(J, G) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on F, G, F, A we get 180 == 2 * direction(F, G) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on F, A, K, G we get 180 == 2 * direction(F, A) - 2 * direction(K, G) mod 360
By perpendicular_direction_conditions_v0_r on J, G, F, B we get 180 == 2 * direction(J, G) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on G, F, F, B we get 180 == 2 * direction(G, F) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on F, G, F, B we get 180 == 2 * direction(F, G) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on B, F, K, G we get 180 == 2 * direction(B, F) - 2 * direction(K, G) mod 360
By perpendicular_direction_conditions_v0_r on F, B, G, F we get 180 == 2 * direction(F, B) - 2 * direction(G, F) mod 360
By in_imply_collinear on orthocenter(A, C, G), B, A we get collinear(A, B, orthocenter(A, C, G))
By perpendicular_direction_conditions_v0_r on A, B, G, J we get 180 == 2 * direction(A, B) - 2 * direction(G, J) mod 360
By perpendicular_direction_conditions_v0_r on A, F, G, J we get 180 == 2 * direction(A, F) - 2 * direction(G, J) mod 360
By perpendicular_direction_conditions_v0_r on A, F, K, G we get 180 == 2 * direction(A, F) - 2 * direction(K, G) mod 360
By perpendicular_direction_conditions_v0_r on F, B, G, J we get 180 == 2 * direction(F, B) - 2 * direction(G, J) mod 360
By perpendicular_direction_conditions_v0_r on A, B, F, G we get 180 == 2 * direction(A, B) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on F, B, F, G we get 180 == 2 * direction(F, B) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on G, J, B, F we get 180 == 2 * direction(G, J) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on G, J, F, A we get 180 == 2 * direction(G, J) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on A, B, G, K we get 180 == 2 * direction(A, B) - 2 * direction(G, K) mod 360
By perpendicular_direction_conditions_v0_r on F, G, B, A we get 180 == 2 * direction(F, G) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on G, F, A, B we get 180 == 2 * direction(G, F) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on F, G, B, F we get 180 == 2 * direction(F, G) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on J, G, A, F we get 180 == 2 * direction(J, G) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on F, A, F, G we get 180 == 2 * direction(F, A) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on G, F, A, F we get 180 == 2 * direction(G, F) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on B, A, G, K we get 180 == 2 * direction(B, A) - 2 * direction(G, K) mod 360
By perpendicular_direction_conditions_v0_r on A, F, G, F we get 180 == 2 * direction(A, F) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on F, G, A, F we get 180 == 2 * direction(F, G) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on G, F, B, F we get 180 == 2 * direction(G, F) - 2 * direction(B, F) mod 360
By in_imply_collinear on orthocenter(A, B, G), F, J we get collinear(F, J, orthocenter(A, B, G))
By in_imply_collinear on H, K, F we get collinear(F, H, K)
By perpendicular_direction_conditions_v0_r on G, K, B, F we get 180 == 2 * direction(G, K) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on A, B, G, F we get 180 == 2 * direction(A, B) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on B, A, F, G we get 180 == 2 * direction(B, A) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on F, A, G, J we get 180 == 2 * direction(F, A) - 2 * direction(G, J) mod 360
By perpendicular_direction_conditions_v0_r on J, G, B, A we get 180 == 2 * direction(J, G) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on B, A, J, G we get 180 == 2 * direction(B, A) - 2 * direction(J, G) mod 360
By perpendicular_direction_conditions_v0_r on J, G, F, A we get 180 == 2 * direction(J, G) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on F, A, G, K we get 180 == 2 * direction(F, A) - 2 * direction(G, K) mod 360
By perpendicular_direction_conditions_v0_r on B, F, G, K we get 180 == 2 * direction(B, F) - 2 * direction(G, K) mod 360
By perpendicular_direction_conditions_v0_r on F, B, G, K we get 180 == 2 * direction(F, B) - 2 * direction(G, K) mod 360
By perpendicular_direction_conditions_v0_r on B, A, G, J we get 180 == 2 * direction(B, A) - 2 * direction(G, J) mod 360
By perpendicular_direction_conditions_v0_r on B, F, F, G we get 180 == 2 * direction(B, F) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on K, G, F, B we get 180 == 2 * direction(K, G) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on G, J, A, B we get 180 == 2 * direction(G, J) - 2 * direction(A, B) mod 360
By probably_between_and_collinear_implies_between on C, G, J we get between(C, G, J)
By in_imply_collinear on orthocenter(A, B, G), G, F we get collinear(F, G, orthocenter(A, B, G))
By perpendicular_direction_conditions_v0_r on B, A, K, G we get 180 == 2 * direction(B, A) - 2 * direction(K, G) mod 360
By perpendicular_direction_conditions_v0_r on G, K, F, A we get 180 == 2 * direction(G, K) - 2 * direction(F, A) mod 360
By in_imply_collinear on H, K, C we get collinear(C, H, K)
By perpendicular_direction_conditions_v0_r on G, J, A, F we get 180 == 2 * direction(G, J) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on G, K, A, B we get 180 == 2 * direction(G, K) - 2 * direction(A, B) mod 360
By in_imply_collinear on orthocenter(B, C, G), A, D we get collinear(A, D, orthocenter(B, C, G))
By probably_between_and_collinear_implies_between on G, F, J we get between(G, F, J)
By between_imply_segment_sum on C, I, E we get distance(C, E) == distance(C, I) + distance(E, I)
By in_imply_collinear on K, H, G we get collinear(G, H, K)
By in_imply_collinear on H, F, C we get collinear(C, F, H)
By in_imply_collinear on orthocenter(A, C, G), F, B we get collinear(B, F, orthocenter(A, C, G))
By in_imply_collinear on orthocenter(A, B, G), A, I we get collinear(A, I, orthocenter(A, B, G))
By in_imply_collinear on orthocenter(A, B, G), E, A we get collinear(A, E, orthocenter(A, B, G))
By probably_between_and_collinear_implies_between on C, G, F we get between(C, G, F)
By in_imply_collinear on orthocenter(A, B, G), K, G we get collinear(G, K, orthocenter(A, B, G))
By in_imply_collinear on orthocenter(A, B, G), D, C we get collinear(C, D, orthocenter(A, B, G))
By in_imply_collinear on orthocenter(A, B, G), G, C we get collinear(C, G, orthocenter(A, B, G))
By in_imply_collinear on orthocenter(A, B, G), C, K we get collinear(C, K, orthocenter(A, B, G))
By probably_between_and_collinear_implies_between on J, G, K we get between(J, G, K)
By in_imply_collinear on orthocenter(B, C, G), B, F we get collinear(B, F, orthocenter(B, C, G))
By in_imply_collinear on orthocenter(B, C, G), B, A we get collinear(A, B, orthocenter(B, C, G))
By in_imply_collinear on orthocenter(A, C, G), E, G we get collinear(E, G, orthocenter(A, C, G))
By in_imply_collinear on orthocenter(A, B, G), B, D we get collinear(B, D, orthocenter(A, B, G))
By probably_between_and_collinear_implies_between on C, K, G we get between(C, K, G)
By in_imply_collinear on orthocenter(A, B, G), C, B we get collinear(B, C, orthocenter(A, B, G))
By in_imply_collinear on orthocenter(B, C, G), E, A we get collinear(A, E, orthocenter(B, C, G))
By concyclic_definition_1 on F, C, A, D we get Circle(A, C, D) == Circle(A, C, F)
By in_imply_collinear on orthocenter(B, C, G), A, G we get collinear(A, G, orthocenter(B, C, G))
By in_imply_collinear on orthocenter(A, B, G), H, C we get collinear(C, H, orthocenter(A, B, G))
By in_imply_collinear on orthocenter(A, C, G), D, B we get collinear(B, D, orthocenter(A, C, G))
By in_imply_collinear on orthocenter(A, B, G), F, C we get collinear(C, F, orthocenter(A, B, G))
By in_imply_collinear on orthocenter(B, C, G), A, C we get collinear(A, C, orthocenter(B, C, G))
By in_imply_collinear on orthocenter(B, C, G), C, I we get collinear(C, I, orthocenter(B, C, G))
By in_imply_collinear on orthocenter(B, C, G), E, I we get collinear(E, I, orthocenter(B, C, G))
By in_imply_collinear on orthocenter(A, B, G), C, A we get collinear(A, C, orthocenter(A, B, G))
By in_imply_collinear on orthocenter(A, C, G), C, B we get collinear(B, C, orthocenter(A, C, G))
By in_imply_collinear on orthocenter(A, C, G), D, C we get collinear(C, D, orthocenter(A, C, G))
By in_imply_collinear on orthocenter(A, C, G), G, B we get collinear(B, G, orthocenter(A, C, G))
By in_imply_collinear on orthocenter(A, B, G), J, K we get collinear(J, K, orthocenter(A, B, G))
By internal_angle_bisector_definition_v0 on G, K, G, C we get angle(G, C, K) == angle(K, C, G) mod 360
By in_imply_collinear on orthocenter(A, C, G), E, B we get collinear(B, E, orthocenter(A, C, G))
By in_imply_collinear on orthocenter(A, B, G), C, I we get collinear(C, I, orthocenter(A, B, G))
By collinear_definition on C, G, J we get G in Line(C, J), J in Line(C, G), Line(C, G) == Line(C, J), 0 == 2 * angle(G, C, J) mod 360
By in_imply_collinear on orthocenter(A, B, G), E, I we get collinear(E, I, orthocenter(A, B, G))
By in_imply_collinear on J, H, C we get collinear(C, H, J)
By in_imply_collinear on orthocenter(B, C, G), A, F we get collinear(A, F, orthocenter(B, C, G))
By internal_angle_bisector_definition_v0 on J, G, K, C we get angle(G, C, K) == angle(J, C, G) mod 360
By in_imply_collinear on H, K, J we get collinear(H, J, K)
By in_imply_collinear on orthocenter(B, C, G), D, G we get collinear(D, G, orthocenter(B, C, G))
By in_imply_collinear on orthocenter(A, B, G), E, C we get collinear(C, E, orthocenter(A, B, G))
By in_imply_collinear on orthocenter(B, C, G), A, I we get collinear(A, I, orthocenter(B, C, G))
By in_imply_collinear on orthocenter(A, B, G), J, G we get collinear(G, J, orthocenter(A, B, G))
By collinear_definition on C, G, K we get G in Line(C, K), K in Line(C, G), Line(C, G) == Line(C, K), 0 == 2 * angle(G, C, K) mod 360
By parallel_line_angles_v1 on I, H, G, A we get parallel(Line(A, G), Line(H, I))
By internal_angle_bisector_definition_v0 on H, J, H, C we get angle(H, C, J) == angle(J, C, H) mod 360
By in_imply_collinear on orthocenter(A, B, G), H, G we get collinear(G, H, orthocenter(A, B, G))
By in_imply_collinear on orthocenter(A, B, G), K, F we get collinear(F, K, orthocenter(A, B, G))
By in_imply_collinear on orthocenter(A, B, G), C, J we get collinear(C, J, orthocenter(A, B, G))
By internal_angle_bisector_definition_v0 on K, H, K, C we get angle(H, C, K) == angle(K, C, H) mod 360
By in_imply_collinear on H, F, J we get collinear(F, H, J)
By anti_similar_triangle_basic_properties on G, B, D, C, B, E we get angle(G, B, D) == 0 - angle(C, B, E) mod 360, angle(B, D, G) == 0 - angle(B, E, C) mod 360, angle(D, G, B) == 0 - angle(E, C, B) mod 360, log(distance(B, C)) + log(distance(B, D)) == log(distance(B, G)) + log(distance(B, E)), log(distance(B, D)) + log(distance(C, E)) == log(distance(B, E)) + log(distance(D, G)), log(distance(C, E)) + log(distance(B, G)) == log(distance(D, G)) + log(distance(B, C))
By anti_similar_triangle_basic_properties on E, B, C, D, B, G we get angle(E, B, C) == 0 - angle(D, B, G) mod 360, angle(B, C, E) == 0 - angle(B, G, D) mod 360, angle(C, E, B) == 0 - angle(G, D, B) mod 360, log(distance(B, D)) + log(distance(B, C)) == log(distance(B, E)) + log(distance(B, G)), log(distance(B, C)) + log(distance(D, G)) == log(distance(B, G)) + log(distance(C, E)), log(distance(C, E)) + log(distance(B, D)) == log(distance(D, G)) + log(distance(B, E))
By concyclic_definition_1 on E, G, C, D we get Circle(C, D, G) == Circle(C, E, G)
By internal_angle_bisector_definition_v0 on J, H, K, C we get angle(H, C, K) == angle(J, C, H) mod 360
By between_imply_segment_sum on C, K, J we get distance(C, J) == distance(C, K) + distance(J, K)
By collinear_definition on C, K, G we get K in Line(C, G), G in Line(C, K), Line(C, G) == Line(C, K), 0 == 2 * angle(K, C, G) mod 360
By between_imply_segment_sum on K, F, J we get distance(J, K) == distance(F, K) + distance(F, J)
By internal_angle_bisector_definition_v0 on J, G, J, C we get angle(G, C, J) == angle(J, C, G) mod 360
By internal_angle_bisector_definition_v0 on K, G, J, C we get angle(G, C, J) == angle(K, C, G) mod 360
By collinear_definition on C, G, F we get G in Line(C, F), F in Line(C, G), Line(C, F) == Line(C, G), 0 == 2 * angle(G, C, F) mod 360
By internal_angle_bisector_definition_v0 on H, F, H, C we get angle(F, C, H) == angle(H, C, F) mod 360
By parallel_line_angles_v0 on I, H, G, D we get parallel(Line(D, G), Line(H, I))
By between_imply_segment_sum on I, E, A we get distance(A, I) == distance(E, I) + distance(A, E)
By internal_angle_bisector_definition_v0 on K, H, J, C we get angle(H, C, J) == angle(K, C, H) mod 360
By parallel_line_angles_v1 on D, A, I, H we get parallel(Line(A, D), Line(H, I))
By internal_angle_bisector_definition_v0 on G, F, G, C we get angle(F, C, G) == angle(G, C, F) mod 360
By collinear_definition on C, F, G we get F in Line(C, G), G in Line(C, F), Line(C, F) == Line(C, G), 0 == 2 * angle(F, C, G) mod 360
By collinear_definition on C, J, G we get J in Line(C, G), G in Line(C, J), Line(C, G) == Line(C, J), 0 == 2 * angle(J, C, G) mod 360
By same_angle_v1 on G, F, J, D we get angle(F, G, D) == angle(J, G, D) mod 360
By same_angle_v3 on G, K, F, B we get angle(K, G, B) == angle(F, G, B) + 180 mod 360
By same_angle_v2 on G, J, K, A we get angle(J, G, A) == angle(K, G, A) + 180 mod 360
By same_angle_v3 on G, J, K, E we get angle(J, G, E) == angle(K, G, E) + 180 mod 360
By same_angle_v2 on G, F, K, A we get angle(F, G, A) == angle(K, G, A) + 180 mod 360
By same_angle_v2 on G, K, F, D we get angle(K, G, D) == angle(F, G, D) + 180 mod 360
By same_angle_v3 on G, K, J, D we get angle(K, G, D) == angle(J, G, D) + 180 mod 360
By same_angle_v1 on F, C, G, I we get angle(C, F, I) == angle(G, F, I) mod 360
By same_angle_v1 on F, K, G, I we get angle(G, F, I) == angle(K, F, I) mod 360
By same_angle_v2 on G, K, J, B we get angle(K, G, B) == angle(J, G, B) + 180 mod 360
By same_angle_v3 on G, F, K, E we get angle(F, G, E) == angle(K, G, E) + 180 mod 360
By same_angle_v0 on G, J, F, A we get angle(F, G, A) == angle(J, G, A) mod 360
By same_angle_v0 on G, F, J, E we get angle(F, G, E) == angle(J, G, E) mod 360
By same_angle_v2 on F, J, G, I we get angle(J, F, I) == angle(G, F, I) + 180 mod 360
By same_angle_v1 on G, J, F, B we get angle(F, G, B) == angle(J, G, B) mod 360
By sss_anti_congruence_v1 on D, H, C, C, H, D we get anti_congruent_triangles(C, D, H, D, C, H)
By internal_angle_bisector_definition_v0_r on D, H, C, I we get Line(H, I) == internal_angle_bisector(C, I, D)
By sss_anti_congruence_v0 on E, H, C, C, H, E we get anti_congruent_triangles(C, E, H, E, C, H)
By sss_anti_congruence_v0 on C, E, H, E, C, H we get anti_congruent_triangles(C, E, H, E, C, H)
By sss_anti_congruence_v0 on D, H, G, G, H, D we get anti_congruent_triangles(D, G, H, G, D, H)
By sas_anti_congruence on D, H, G, G, H, D we get anti_congruent_triangles(D, G, H, G, D, H)
By external_angle_bisector_definition_v0_r on A, H, K, I we get Line(H, I) == external_angle_bisector(A, I, K)
By external_angle_bisector_definition_v0_r on J, F, C, K we get Line(F, K) == external_angle_bisector(C, K, J)
By sss_anti_congruence_v0 on H, E, G, H, G, E we get anti_congruent_triangles(E, G, H, G, E, H)
By sss_anti_congruence_v1 on C, H, E, E, H, C we get anti_congruent_triangles(C, E, H, E, C, H)
By sss_anti_congruence_v0 on I, F, C, I, C, F we get anti_congruent_triangles(C, F, I, F, C, I)
By internal_angle_bisector_definition_v0 on C, K, C, G we get angle(C, G, K) == angle(K, G, C) mod 360
By sas_anti_congruence on C, H, E, E, H, C we get anti_congruent_triangles(C, E, H, E, C, H)
By external_angle_bisector_definition_v0_r on E, A, C, I we get Line(A, I) == external_angle_bisector(C, I, E)
By external_angle_bisector_definition_v0_r on E, H, K, I we get Line(H, I) == external_angle_bisector(E, I, K)
By collinear_definition on K, G, F we get G in Line(F, K), F in Line(G, K), Line(F, K) == Line(G, K), 0 == 2 * angle(G, K, F) mod 360
By concyclic_definition_0 on F, D, C, A we get A in Circle(C, D, F)
By concyclic_definition_0 on A, E, B, D we get D in Circle(A, B, E)
By sas_anti_congruence on G, H, D, D, H, G we get anti_congruent_triangles(D, G, H, G, D, H)
By anti_similar_triangle_basic_properties on B, C, F, B, A, D we get angle(B, C, F) == 0 - angle(B, A, D) mod 360, angle(C, F, B) == 0 - angle(A, D, B) mod 360, angle(F, B, C) == 0 - angle(D, B, A) mod 360, log(distance(A, B)) + log(distance(C, F)) == log(distance(B, C)) + log(distance(A, D)), log(distance(A, D)) + log(distance(B, F)) == log(distance(C, F)) + log(distance(B, D)), log(distance(B, D)) + log(distance(B, C)) == log(distance(B, F)) + log(distance(A, B))
By anti_similar_triangle_basic_properties on I, A, D, I, D, A we get angle(I, A, D) == 0 - angle(I, D, A) mod 360, angle(A, D, I) == 0 - angle(D, A, I) mod 360, angle(D, I, A) == 0 - angle(A, I, D) mod 360, log(distance(A, I)) + log(distance(A, D)) == log(distance(D, I)) + log(distance(A, D)), log(distance(A, D)) + log(distance(A, I)) == log(distance(A, D)) + log(distance(D, I)), log(distance(A, I)) + log(distance(A, I)) == log(distance(D, I)) + log(distance(D, I))
By anti_similar_triangle_basic_properties on B, F, C, B, D, A we get angle(B, F, C) == 0 - angle(B, D, A) mod 360, angle(F, C, B) == 0 - angle(D, A, B) mod 360, angle(C, B, F) == 0 - angle(A, B, D) mod 360, log(distance(B, D)) + log(distance(C, F)) == log(distance(B, F)) + log(distance(A, D)), log(distance(A, D)) + log(distance(B, C)) == log(distance(C, F)) + log(distance(A, B)), log(distance(A, B)) + log(distance(B, F)) == log(distance(B, C)) + log(distance(B, D))
By sss_anti_congruence_v0 on C, I, F, F, I, C we get anti_congruent_triangles(C, F, I, F, C, I)
By similar_triangle_basic_properties on A, D, C, B, D, G we get angle(A, D, C) == angle(B, D, G) mod 360, angle(D, C, A) == angle(D, G, B) mod 360, angle(C, A, D) == angle(G, B, D) mod 360, log(distance(A, D)) + log(distance(D, G)) == log(distance(B, D)) + log(distance(C, D)), log(distance(C, D)) + log(distance(B, G)) == log(distance(D, G)) + log(distance(A, C)), log(distance(A, C)) + log(distance(B, D)) == log(distance(B, G)) + log(distance(A, D))
By sss_anti_congruence_v0 on F, C, I, C, F, I we get anti_congruent_triangles(C, F, I, F, C, I)
By anti_similar_triangle_basic_properties on E, B, C, D, A, C we get angle(E, B, C) == 0 - angle(D, A, C) mod 360, angle(B, C, E) == 0 - angle(A, C, D) mod 360, angle(C, E, B) == 0 - angle(C, D, A) mod 360, log(distance(A, D)) + log(distance(B, C)) == log(distance(B, E)) + log(distance(A, C)), log(distance(A, C)) + log(distance(C, E)) == log(distance(B, C)) + log(distance(C, D)), log(distance(C, D)) + log(distance(B, E)) == log(distance(C, E)) + log(distance(A, D))
By concyclic_definition_0 on D, B, E, A we get A in Circle(B, D, E)
By concyclic_definition_0 on C, B, F, E we get E in Circle(B, C, F)
By concyclic_definition_0 on C, E, D, G we get G in Circle(C, D, E)
By internal_angle_bisector_definition_v0 on C, J, C, G we get angle(C, G, J) == angle(J, G, C) mod 360
By sss_anti_congruence_v1 on E, H, G, G, H, E we get anti_congruent_triangles(E, G, H, G, E, H)
By concyclic_definition_1 on A, C, F, D we get Circle(A, C, F) == Circle(C, D, F)
By sss_anti_congruence_v0 on A, F, I, F, A, I we get anti_congruent_triangles(A, F, I, F, A, I)
By concyclic_definition_1 on F, D, A, C we get Circle(A, C, D) == Circle(A, D, F)
By external_angle_bisector_definition_v0_r on A, H, D, I we get Line(H, I) == external_angle_bisector(A, I, D)
By external_angle_bisector_definition_v0_r on I, B, I, E we get Line(B, E) == external_angle_bisector(I, E, I)
By external_angle_bisector_definition_v0_r on D, H, E, I we get Line(H, I) == external_angle_bisector(D, I, E)
By sss_anti_congruence_v1 on A, I, F, F, I, A we get anti_congruent_triangles(A, F, I, F, A, I)
By external_angle_bisector_definition_v0_r on C, I, A, E we get Line(E, I) == external_angle_bisector(A, E, C)
By anti_similar_triangle_basic_properties on C, B, E, C, A, D we get angle(C, B, E) == 0 - angle(C, A, D) mod 360, angle(B, E, C) == 0 - angle(A, D, C) mod 360, angle(E, C, B) == 0 - angle(D, C, A) mod 360, log(distance(A, C)) + log(distance(B, E)) == log(distance(B, C)) + log(distance(A, D)), log(distance(A, D)) + log(distance(C, E)) == log(distance(B, E)) + log(distance(C, D)), log(distance(C, D)) + log(distance(B, C)) == log(distance(C, E)) + log(distance(A, C))
By external_angle_bisector_definition_v0 on J, G, K, F we get 180 == angle(J, F, G) + angle(K, F, G) mod 360
By sss_anti_congruence_v0 on I, A, F, I, F, A we get anti_congruent_triangles(A, F, I, F, A, I)
By sss_anti_congruence_v1 on H, C, D, H, D, C we get anti_congruent_triangles(C, D, H, D, C, H)
By concyclic_definition_1 on D, G, E, C we get Circle(C, E, G) == Circle(D, E, G)
By concyclic_definition_0 on E, C, B, F we get F in Circle(B, C, E)
By sss_anti_congruence_v1 on D, G, H, G, D, H we get anti_congruent_triangles(D, G, H, G, D, H)
By anti_similar_triangle_basic_properties on D, B, G, E, A, G we get angle(D, B, G) == 0 - angle(E, A, G) mod 360, angle(B, G, D) == 0 - angle(A, G, E) mod 360, angle(G, D, B) == 0 - angle(G, E, A) mod 360, log(distance(A, E)) + log(distance(B, G)) == log(distance(B, D)) + log(distance(A, G)), log(distance(A, G)) + log(distance(D, G)) == log(distance(B, G)) + log(distance(E, G)), log(distance(D, G)) + log(distance(A, E)) == log(distance(E, G)) + log(distance(B, D))
By internal_angle_bisector_definition_v0 on H, K, H, G we get angle(H, G, K) == angle(K, G, H) mod 360
By external_angle_bisector_definition_v0_r on J, K, C, F we get Line(F, K) == external_angle_bisector(C, F, J)
By external_angle_bisector_definition_v0_r on C, G, I, E we get Line(E, G) == external_angle_bisector(C, E, I)
By sss_anti_congruence_v0 on D, H, G, G, H, D we get anti_congruent_triangles(D, G, H, G, D, H)
By sss_anti_congruence_v0 on F, I, A, A, I, F we get anti_congruent_triangles(A, F, I, F, A, I)
By external_angle_bisector_definition_v0_r on I, B, C, E we get Line(B, E) == external_angle_bisector(C, E, I)
By sss_anti_congruence_v1 on C, D, H, D, C, H we get anti_congruent_triangles(C, D, H, D, C, H)
By sss_anti_congruence_v0 on H, E, G, H, G, E we get anti_congruent_triangles(E, G, H, G, E, H)
By concyclic_definition_1 on C, D, G, E we get Circle(C, D, G) == Circle(D, E, G)
By sss_anti_congruence_v0 on G, D, H, D, G, H we get anti_congruent_triangles(D, G, H, G, D, H)
By similar_triangle_basic_properties on E, G, A, E, C, B we get angle(E, C, B) == angle(E, G, A) mod 360, angle(C, B, E) == angle(G, A, E) mod 360, angle(A, E, G) == angle(B, E, C) mod 360, log(distance(C, E)) + log(distance(A, G)) == log(distance(E, G)) + log(distance(B, C)), log(distance(A, G)) + log(distance(B, E)) == log(distance(B, C)) + log(distance(A, E)), log(distance(A, E)) + log(distance(C, E)) == log(distance(B, E)) + log(distance(E, G))
By sss_anti_congruence_v0 on A, F, I, F, A, I we get anti_congruent_triangles(A, F, I, F, A, I)
By concyclic_definition_1 on F, C, D, A we get Circle(A, C, D) == Circle(C, D, F)
By sss_anti_congruence_v0 on A, F, I, F, A, I we get anti_congruent_triangles(A, F, I, F, A, I)
By sas_anti_congruence on F, I, C, C, I, F we get anti_congruent_triangles(C, F, I, F, C, I)
By internal_angle_bisector_definition_v0 on C, G, C, K we get angle(C, K, G) == angle(G, K, C) mod 360
By sss_anti_congruence_v0 on F, I, A, A, I, F we get anti_congruent_triangles(A, F, I, F, A, I)
By sss_anti_congruence_v1 on H, D, G, H, G, D we get anti_congruent_triangles(D, G, H, G, D, H)
By external_angle_bisector_definition_v0_r on F, J, C, K we get Line(J, K) == external_angle_bisector(C, K, F)
By concyclic_definition_1 on G, C, D, E we get Circle(C, D, E) == Circle(C, D, G)
By sss_anti_congruence_v0 on A, F, I, F, A, I we get anti_congruent_triangles(A, F, I, F, A, I)
By log_of_2_times_distance on A, C, I, F we get log(distance(A, C)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(F, I))
By internal_angle_bisector_definition_v0 on C, F, C, G we get angle(C, G, F) == angle(F, G, C) mod 360
By sss_anti_congruence_v0 on D, C, H, C, D, H we get anti_congruent_triangles(C, D, H, D, C, H)
By sss_anti_congruence_v0 on G, H, E, E, H, G we get anti_congruent_triangles(E, G, H, G, E, H)
By concyclic_definition_0 on E, A, D, B we get B in Circle(A, D, E)
By collinear_definition on F, G, K we get G in Line(F, K), K in Line(F, G), Line(F, G) == Line(F, K), 0 == 2 * angle(G, F, K) mod 360
By sss_anti_congruence_v0 on D, H, G, G, H, D we get anti_congruent_triangles(D, G, H, G, D, H)
By sss_anti_congruence_v0 on F, C, I, C, F, I we get anti_congruent_triangles(C, F, I, F, C, I)
By sss_anti_congruence_v1 on F, A, I, A, F, I we get anti_congruent_triangles(A, F, I, F, A, I)
By reverse_direction on H, D we get 180 == direction(H, D) - direction(D, H) mod 360
By internal_angle_bisector_definition_v0_r on I, B, A, E we get Line(B, E) == internal_angle_bisector(A, E, I)
By sss_anti_congruence_v0 on D, H, G, G, H, D we get anti_congruent_triangles(D, G, H, G, D, H)
By external_angle_bisector_definition_v0_r on I, C, A, E we get Line(C, E) == external_angle_bisector(A, E, I)
By sss_anti_congruence_v1 on A, I, F, F, I, A we get anti_congruent_triangles(A, F, I, F, A, I)
By external_angle_bisector_definition_v0_r on C, E, A, I we get Line(E, I) == external_angle_bisector(A, I, C)
By sss_anti_congruence_v0 on D, C, H, C, D, H we get anti_congruent_triangles(C, D, H, D, C, H)
By sss_anti_congruence_v1 on E, H, G, G, H, E we get anti_congruent_triangles(E, G, H, G, E, H)
By sss_anti_congruence_v0 on C, H, D, D, H, C we get anti_congruent_triangles(C, D, H, D, C, H)
By internal_angle_bisector_definition_v0_r on C, H, K, I we get Line(H, I) == internal_angle_bisector(C, I, K)
By sss_anti_congruence_v1 on F, A, I, A, F, I we get anti_congruent_triangles(A, F, I, F, A, I)
By sss_anti_congruence_v1 on H, G, E, H, E, G we get anti_congruent_triangles(E, G, H, G, E, H)
By internal_angle_bisector_definition_v0_r on E, I, C, A we get Line(A, I) == internal_angle_bisector(C, A, E)
By sss_anti_congruence_v1 on C, H, E, E, H, C we get anti_congruent_triangles(C, E, H, E, C, H)
By concyclic_definition_0 on G, D, E, C we get C in Circle(D, E, G)
By sss_anti_congruence_v0 on H, G, D, H, D, G we get anti_congruent_triangles(D, G, H, G, D, H)
By sss_anti_congruence_v1 on I, F, A, I, A, F we get anti_congruent_triangles(A, F, I, F, A, I)
By sss_anti_congruence_v0 on E, H, C, C, H, E we get anti_congruent_triangles(C, E, H, E, C, H)
By internal_angle_bisector_definition_v0_r on I, C, I, E we get Line(C, E) == internal_angle_bisector(I, E, I)
By collinear_definition on F, J, G we get J in Line(F, G), G in Line(F, J), Line(F, G) == Line(F, J), 0 == 2 * angle(J, F, G) mod 360
By sss_anti_congruence_v0 on I, A, F, I, F, A we get anti_congruent_triangles(A, F, I, F, A, I)
By perpendicular_angle_conditions_v0 on G, F, A we get angle(G, F, A) == orientation(A, G, F) mod 360
By external_angle_bisector_definition_v0_r on I, G, I, E we get Line(E, G) == external_angle_bisector(I, E, I)
By sss_anti_congruence_v1 on C, F, I, F, C, I we get anti_congruent_triangles(C, F, I, F, C, I)
By sss_anti_congruence_v1 on C, D, H, D, C, H we get anti_congruent_triangles(C, D, H, D, C, H)
By sss_anti_congruence_v1 on D, G, H, G, D, H we get anti_congruent_triangles(D, G, H, G, D, H)
By sss_anti_congruence_v0 on F, C, I, C, F, I we get anti_congruent_triangles(C, F, I, F, C, I)
By sas_anti_congruence on E, H, G, G, H, E we get anti_congruent_triangles(E, G, H, G, E, H)
By sss_anti_congruence_v1 on G, H, D, D, H, G we get anti_congruent_triangles(D, G, H, G, D, H)
By sss_anti_congruence_v1 on A, I, F, F, I, A we get anti_congruent_triangles(A, F, I, F, A, I)
By sss_anti_congruence_v0 on G, D, H, D, G, H we get anti_congruent_triangles(D, G, H, G, D, H)
By internal_angle_bisector_definition_v0_r on F, J, K, C we get Line(C, J) == internal_angle_bisector(F, C, K)
By concyclic_definition_0 on A, D, B, E we get E in Circle(A, B, D)
By similar_triangle_basic_properties on G, D, B, C, D, A we get angle(C, D, A) == angle(G, D, B) mod 360, angle(D, A, C) == angle(D, B, G) mod 360, angle(A, C, D) == angle(B, G, D) mod 360, log(distance(C, D)) + log(distance(B, D)) == log(distance(D, G)) + log(distance(A, D)), log(distance(A, D)) + log(distance(B, G)) == log(distance(B, D)) + log(distance(A, C)), log(distance(A, C)) + log(distance(D, G)) == log(distance(B, G)) + log(distance(C, D))
By external_angle_bisector_definition_v0 on A, G, A, F we get 180 == angle(A, F, G) + angle(A, F, G) mod 360
By sss_anti_congruence_v1 on F, I, C, C, I, F we get anti_congruent_triangles(C, F, I, F, C, I)
By sss_anti_congruence_v0 on H, D, C, H, C, D we get anti_congruent_triangles(C, D, H, D, C, H)
By concyclic_definition_0 on B, F, E, C we get C in Circle(B, E, F)
By sss_anti_congruence_v0 on E, G, H, G, E, H we get anti_congruent_triangles(E, G, H, G, E, H)
By sss_anti_congruence_v1 on I, C, F, I, F, C we get anti_congruent_triangles(C, F, I, F, C, I)
By sas_anti_congruence on C, I, F, F, I, C we get anti_congruent_triangles(C, F, I, F, C, I)
By sss_anti_congruence_v0 on H, E, G, H, G, E we get anti_congruent_triangles(E, G, H, G, E, H)
By sss_anti_congruence_v1 on G, H, D, D, H, G we get anti_congruent_triangles(D, G, H, G, D, H)
By sss_anti_congruence_v1 on G, E, H, E, G, H we get anti_congruent_triangles(E, G, H, G, E, H)
By collinear_definition on K, F, G we get F in Line(G, K), G in Line(F, K), Line(F, K) == Line(G, K), 0 == 2 * angle(F, K, G) mod 360
By internal_angle_bisector_definition_v0_r on J, C, J, K we get Line(C, K) == internal_angle_bisector(J, K, J)
By isosceles_triangle_properties on I, F, A we get distance(A, I) == distance(F, I), angle(F, A, I) == angle(I, F, A) mod 360
By collinear_definition on J, K, G we get K in Line(G, J), G in Line(J, K), Line(G, J) == Line(J, K), 0 == 2 * angle(K, J, G) mod 360
By sss_anti_congruence_v1 on C, D, H, D, C, H we get anti_congruent_triangles(C, D, H, D, C, H)
By sss_anti_congruence_v1 on E, H, G, G, H, E we get anti_congruent_triangles(E, G, H, G, E, H)
By sss_anti_congruence_v1 on C, H, E, E, H, C we get anti_congruent_triangles(C, E, H, E, C, H)
By internal_angle_bisector_definition_v0_r on I, E, A, C we get Line(C, E) == internal_angle_bisector(A, C, I)
By collinear_definition on F, G, J we get G in Line(F, J), J in Line(F, G), Line(F, G) == Line(F, J), 0 == 2 * angle(G, F, J) mod 360
By sss_anti_congruence_v0 on H, C, E, H, E, C we get anti_congruent_triangles(C, E, H, E, C, H)
By sss_anti_congruence_v0 on C, E, H, E, C, H we get anti_congruent_triangles(C, E, H, E, C, H)
By similar_triangle_basic_properties on C, I, H, C, A, G we get angle(C, A, G) == angle(C, I, H) mod 360, angle(A, G, C) == angle(I, H, C) mod 360, angle(G, C, A) == angle(H, C, I) mod 360, log(distance(A, C)) + log(distance(H, I)) == log(distance(C, I)) + log(distance(A, G)), log(distance(A, G)) + log(distance(C, H)) == log(distance(H, I)) + log(distance(C, G)), log(distance(C, G)) + log(distance(C, I)) == log(distance(C, H)) + log(distance(A, C))
By log_of_2_times_distance on C, G, H, E we get log(distance(C, G)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(E, H))
By collinear_definition on J, G, C we get G in Line(C, J), C in Line(G, J), Line(C, J) == Line(G, J), 0 == 2 * angle(G, J, C) mod 360
By sss_anti_congruence_v0 on I, F, C, I, C, F we get anti_congruent_triangles(C, F, I, F, C, I)
By sss_anti_congruence_v1 on I, F, A, I, A, F we get anti_congruent_triangles(A, F, I, F, A, I)
By sss_anti_congruence_v1 on H, C, D, H, D, C we get anti_congruent_triangles(C, D, H, D, C, H)
By similar_triangle_basic_properties on A, G, E, B, C, E we get angle(A, G, E) == angle(B, C, E) mod 360, angle(C, E, B) == angle(G, E, A) mod 360, angle(E, A, G) == angle(E, B, C) mod 360, log(distance(A, G)) + log(distance(C, E)) == log(distance(B, C)) + log(distance(E, G)), log(distance(C, E)) + log(distance(A, E)) == log(distance(E, G)) + log(distance(B, E)), log(distance(A, E)) + log(distance(B, C)) == log(distance(B, E)) + log(distance(A, G))
By sss_anti_congruence_v0 on D, C, H, C, D, H we get anti_congruent_triangles(C, D, H, D, C, H)
By sss_anti_congruence_v0 on H, E, G, H, G, E we get anti_congruent_triangles(E, G, H, G, E, H)
By log_of_2_times_distance on C, A, I, D we get log(distance(A, C)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(D, I))
By sss_anti_congruence_v1 on E, H, G, G, H, E we get anti_congruent_triangles(E, G, H, G, E, H)
By sss_anti_congruence_v0 on E, H, C, C, H, E we get anti_congruent_triangles(C, E, H, E, C, H)
By concyclic_definition_1 on C, F, A, D we get Circle(A, C, F) == Circle(A, D, F)
By isosceles_triangle_properties on H, D, G we get distance(D, H) == distance(G, H), angle(D, G, H) == angle(H, D, G) mod 360
By sss_anti_congruence_v0 on C, H, D, D, H, C we get anti_congruent_triangles(C, D, H, D, C, H)
By sss_anti_congruence_v1 on E, C, H, C, E, H we get anti_congruent_triangles(C, E, H, E, C, H)
By sss_anti_congruence_v0 on D, H, G, G, H, D we get anti_congruent_triangles(D, G, H, G, D, H)
By sss_anti_congruence_v0 on C, E, H, E, C, H we get anti_congruent_triangles(C, E, H, E, C, H)
By sss_anti_congruence_v0 on H, D, C, H, C, D we get anti_congruent_triangles(C, D, H, D, C, H)
By sss_anti_congruence_v1 on G, E, H, E, G, H we get anti_congruent_triangles(E, G, H, G, E, H)
By sss_anti_congruence_v0 on G, H, E, E, H, G we get anti_congruent_triangles(E, G, H, G, E, H)
By sss_anti_congruence_v0 on I, A, F, I, F, A we get anti_congruent_triangles(A, F, I, F, A, I)
By sss_anti_congruence_v1 on H, D, G, H, G, D we get anti_congruent_triangles(D, G, H, G, D, H)
By concyclic_definition_0 on A, D, F, C we get C in Circle(A, D, F)
By sss_anti_congruence_v1 on G, H, D, D, H, G we get anti_congruent_triangles(D, G, H, G, D, H)
By sss_anti_congruence_v1 on G, H, D, D, H, G we get anti_congruent_triangles(D, G, H, G, D, H)
By sss_anti_congruence_v0 on H, D, C, H, C, D we get anti_congruent_triangles(C, D, H, D, C, H)
By internal_angle_bisector_definition_v0_r on F, C, J, K we get Line(C, K) == internal_angle_bisector(F, K, J)
By collinear_definition on J, F, G we get F in Line(G, J), G in Line(F, J), Line(F, J) == Line(G, J), 0 == 2 * angle(F, J, G) mod 360
By internal_angle_bisector_definition_v0 on H, F, H, G we get angle(F, G, H) == angle(H, G, F) mod 360
By sss_anti_congruence_v0 on C, I, F, F, I, C we get anti_congruent_triangles(C, F, I, F, C, I)
By anti_similar_triangle_basic_properties on D, G, B, E, G, A we get angle(D, G, B) == 0 - angle(E, G, A) mod 360, angle(G, B, D) == 0 - angle(G, A, E) mod 360, angle(B, D, G) == 0 - angle(A, E, G) mod 360, log(distance(D, G)) + log(distance(A, G)) == log(distance(E, G)) + log(distance(B, G)), log(distance(A, G)) + log(distance(B, D)) == log(distance(B, G)) + log(distance(A, E)), log(distance(A, E)) + log(distance(D, G)) == log(distance(B, D)) + log(distance(E, G))
By isosceles_triangle_properties on H, C, D we get distance(C, H) == distance(D, H), angle(C, D, H) == angle(H, C, D) mod 360
By sss_anti_congruence_v1 on H, E, C, H, C, E we get anti_congruent_triangles(C, E, H, E, C, H)
By sss_anti_congruence_v1 on G, E, H, E, G, H we get anti_congruent_triangles(E, G, H, G, E, H)
By similar_triangle_basic_properties on C, G, A, C, H, I we get angle(C, G, A) == angle(C, H, I) mod 360, angle(G, A, C) == angle(H, I, C) mod 360, angle(A, C, G) == angle(I, C, H) mod 360, log(distance(C, G)) + log(distance(H, I)) == log(distance(C, H)) + log(distance(A, G)), log(distance(A, G)) + log(distance(C, I)) == log(distance(H, I)) + log(distance(A, C)), log(distance(A, C)) + log(distance(C, H)) == log(distance(C, I)) + log(distance(C, G))
By sss_anti_congruence_v1 on I, F, A, I, A, F we get anti_congruent_triangles(A, F, I, F, A, I)
By sss_anti_congruence_v0 on I, F, C, I, C, F we get anti_congruent_triangles(C, F, I, F, C, I)
By sss_anti_congruence_v1 on H, D, G, H, G, D we get anti_congruent_triangles(D, G, H, G, D, H)
By reverse_direction on I, F we get 180 == direction(I, F) - direction(F, I) mod 360
By sss_anti_congruence_v0 on H, C, E, H, E, C we get anti_congruent_triangles(C, E, H, E, C, H)
By isosceles_triangle_properties on H, E, C we get distance(C, H) == distance(E, H), angle(E, C, H) == angle(H, E, C) mod 360
By isosceles_triangle_properties on I, F, C we get distance(C, I) == distance(F, I), angle(F, C, I) == angle(I, F, C) mod 360
By sss_anti_congruence_v1 on H, E, C, H, C, E we get anti_congruent_triangles(C, E, H, E, C, H)
By sss_anti_congruence_v1 on H, E, C, H, C, E we get anti_congruent_triangles(C, E, H, E, C, H)
By sss_anti_congruence_v1 on H, G, E, H, E, G we get anti_congruent_triangles(E, G, H, G, E, H)
By sss_anti_congruence_v1 on G, H, D, D, H, G we get anti_congruent_triangles(D, G, H, G, D, H)
By sss_anti_congruence_v1 on H, G, E, H, E, G we get anti_congruent_triangles(E, G, H, G, E, H)
By sss_anti_congruence_v1 on I, F, A, I, A, F we get anti_congruent_triangles(A, F, I, F, A, I)
By sss_anti_congruence_v0 on D, C, H, C, D, H we get anti_congruent_triangles(C, D, H, D, C, H)
By internal_angle_bisector_definition_v0_r on C, A, I, E we get Line(A, E) == internal_angle_bisector(C, E, I)
By sss_anti_congruence_v1 on E, C, H, C, E, H we get anti_congruent_triangles(C, E, H, E, C, H)
By sss_anti_congruence_v0 on G, D, H, D, G, H we get anti_congruent_triangles(D, G, H, G, D, H)
By sss_anti_congruence_v0 on E, H, C, C, H, E we get anti_congruent_triangles(C, E, H, E, C, H)
By sss_anti_congruence_v0 on H, G, D, H, D, G we get anti_congruent_triangles(D, G, H, G, D, H)
By perpendicular_angle_conditions_v0 on A, F, G we get angle(A, F, G) == orientation(A, F, G) mod 360
By sss_anti_congruence_v0 on F, I, A, A, I, F we get anti_congruent_triangles(A, F, I, F, A, I)
By sss_anti_congruence_v1 on F, I, C, C, I, F we get anti_congruent_triangles(C, F, I, F, C, I)
By concyclic_definition_0 on E, C, F, B we get B in Circle(C, E, F)
By sss_anti_congruence_v1 on F, A, I, A, F, I we get anti_congruent_triangles(A, F, I, F, A, I)
By sss_anti_congruence_v1 on I, F, A, I, A, F we get anti_congruent_triangles(A, F, I, F, A, I)
By collinear_definition on F, K, G we get K in Line(F, G), G in Line(F, K), Line(F, G) == Line(F, K), 0 == 2 * angle(K, F, G) mod 360
By sss_anti_congruence_v0 on A, F, I, F, A, I we get anti_congruent_triangles(A, F, I, F, A, I)
By internal_angle_bisector_definition_v0_r on J, F, J, K we get Line(F, K) == internal_angle_bisector(J, K, J)
By sss_anti_congruence_v0 on H, C, E, H, E, C we get anti_congruent_triangles(C, E, H, E, C, H)
By sss_anti_congruence_v1 on C, D, H, D, C, H we get anti_congruent_triangles(C, D, H, D, C, H)
By internal_angle_bisector_definition_v0_r on K, C, F, J we get Line(C, J) == internal_angle_bisector(F, J, K)
By sss_anti_congruence_v1 on H, E, C, H, C, E we get anti_congruent_triangles(C, E, H, E, C, H)
By sss_anti_congruence_v1 on E, H, G, G, H, E we get anti_congruent_triangles(E, G, H, G, E, H)
By concyclic_definition_1 on G, C, E, D we get Circle(C, D, E) == Circle(C, E, G)
By internal_angle_bisector_definition_v0_r on E, I, A, C we get Line(C, I) == internal_angle_bisector(A, C, E)
By sss_anti_congruence_v0 on C, H, D, D, H, C we get anti_congruent_triangles(C, D, H, D, C, H)
By sss_anti_congruence_v0 on C, E, H, E, C, H we get anti_congruent_triangles(C, E, H, E, C, H)
By radical_axis_definition_v0_r on C, Circle(A, C, F), Circle(C, E, G) we get C in radical_axis(Circle(A, C, F), Circle(C, E, G))
By radical_axis_definition_v0_r on C, Circle(A, C, D), Circle(C, E, G) we get C in radical_axis(Circle(A, C, D), Circle(C, E, G))
By external_angle_bisector_definition_v0 on B, G, B, F we get 180 == angle(B, F, G) + angle(B, F, G) mod 360
By sss_anti_congruence_v1 on H, G, E, H, E, G we get anti_congruent_triangles(E, G, H, G, E, H)
By collinear_definition on G, C, F we get C in Line(F, G), F in Line(C, G), Line(C, G) == Line(F, G), 0 == 2 * angle(C, G, F) mod 360
By sss_anti_congruence_v0 on H, E, G, H, G, E we get anti_congruent_triangles(E, G, H, G, E, H)
By sss_anti_congruence_v1 on G, H, D, D, H, G we get anti_congruent_triangles(D, G, H, G, D, H)
By internal_angle_bisector_definition_v0_r on F, K, C, J we get Line(J, K) == internal_angle_bisector(C, J, F)
By sss_anti_congruence_v0 on I, F, C, I, C, F we get anti_congruent_triangles(C, F, I, F, C, I)
By sss_anti_congruence_v1 on C, F, I, F, C, I we get anti_congruent_triangles(C, F, I, F, C, I)
By collinear_definition on G, J, C we get J in Line(C, G), C in Line(G, J), Line(C, G) == Line(G, J), 0 == 2 * angle(J, G, C) mod 360
By sss_anti_congruence_v0 on H, C, E, H, E, C we get anti_congruent_triangles(C, E, H, E, C, H)
By sss_anti_congruence_v1 on F, I, C, C, I, F we get anti_congruent_triangles(C, F, I, F, C, I)
By sss_anti_congruence_v1 on H, C, D, H, D, C we get anti_congruent_triangles(C, D, H, D, C, H)
By sss_anti_congruence_v0 on H, G, D, H, D, G we get anti_congruent_triangles(D, G, H, G, D, H)
By sss_anti_congruence_v1 on F, I, C, C, I, F we get anti_congruent_triangles(C, F, I, F, C, I)
By internal_angle_bisector_definition_v0 on K, G, K, F we get angle(G, F, K) == angle(K, F, G) mod 360
By sss_anti_congruence_v1 on H, G, E, H, E, G we get anti_congruent_triangles(E, G, H, G, E, H)
By internal_angle_bisector_definition_v0_r on F, K, J, C we get Line(C, K) == internal_angle_bisector(F, C, J)
By sss_anti_congruence_v1 on G, E, H, E, G, H we get anti_congruent_triangles(E, G, H, G, E, H)
By internal_angle_bisector_definition_v0_r on E, A, E, I we get Line(A, I) == internal_angle_bisector(E, I, E)
By sss_anti_congruence_v1 on F, A, I, A, F, I we get anti_congruent_triangles(A, F, I, F, A, I)
By internal_angle_bisector_definition_v0_r on K, J, C, F we get Line(F, J) == internal_angle_bisector(C, F, K)
By sss_anti_congruence_v0 on G, D, H, D, G, H we get anti_congruent_triangles(D, G, H, G, D, H)
By isosceles_triangle_properties on H, G, D we get distance(D, H) == distance(G, H), angle(G, D, H) == angle(H, G, D) mod 360
By sss_anti_congruence_v1 on A, I, F, F, I, A we get anti_congruent_triangles(A, F, I, F, A, I)
By sss_anti_congruence_v0 on I, A, F, I, F, A we get anti_congruent_triangles(A, F, I, F, A, I)
By sss_anti_congruence_v0 on I, A, F, I, F, A we get anti_congruent_triangles(A, F, I, F, A, I)
By sss_anti_congruence_v1 on F, I, C, C, I, F we get anti_congruent_triangles(C, F, I, F, C, I)
By internal_angle_bisector_definition_v0 on A, G, B, F we get angle(A, F, G) == angle(G, F, B) mod 360
By sss_anti_congruence_v0 on C, H, D, D, H, C we get anti_congruent_triangles(C, D, H, D, C, H)
By sss_anti_congruence_v0 on C, I, F, F, I, C we get anti_congruent_triangles(C, F, I, F, C, I)
By sss_anti_congruence_v1 on I, C, F, I, F, C we get anti_congruent_triangles(C, F, I, F, C, I)
By collinear_definition on K, C, G we get C in Line(G, K), G in Line(C, K), Line(C, K) == Line(G, K), 0 == 2 * angle(C, K, G) mod 360
By collinear_definition on F, C, G we get C in Line(F, G), G in Line(C, F), Line(C, F) == Line(F, G), 0 == 2 * angle(C, F, G) mod 360
By radical_axis_definition_v0_r on C, Circle(C, D, G), Circle(A, C, F) we get C in radical_axis(Circle(A, C, F), Circle(C, D, G))
By collinear_definition on K, G, C we get G in Line(C, K), C in Line(G, K), Line(C, K) == Line(G, K), 0 == 2 * angle(G, K, C) mod 360
By sss_anti_congruence_v0 on E, G, H, G, E, H we get anti_congruent_triangles(E, G, H, G, E, H)
By sss_anti_congruence_v0 on C, I, F, F, I, C we get anti_congruent_triangles(C, F, I, F, C, I)
By sss_anti_congruence_v1 on H, C, D, H, D, C we get anti_congruent_triangles(C, D, H, D, C, H)
By sss_anti_congruence_v1 on C, H, E, E, H, C we get anti_congruent_triangles(C, E, H, E, C, H)
By isosceles_triangle_properties on I, C, F we get distance(C, I) == distance(F, I), angle(C, F, I) == angle(I, C, F) mod 360
By sss_anti_congruence_v1 on H, C, D, H, D, C we get anti_congruent_triangles(C, D, H, D, C, H)
By sss_anti_congruence_v1 on D, H, C, C, H, D we get anti_congruent_triangles(C, D, H, D, C, H)
By radical_axis_definition_v0_r on A, c, Circle(A, C, F) we get A in radical_axis(c, Circle(A, C, F))
By sss_anti_congruence_v1 on E, C, H, C, E, H we get anti_congruent_triangles(C, E, H, E, C, H)
By perpendicular_angle_conditions_v0 on G, F, B we get angle(G, F, B) == orientation(B, G, F) mod 360
By sss_anti_congruence_v0 on H, E, G, H, G, E we get anti_congruent_triangles(E, G, H, G, E, H)
By internal_angle_bisector_definition_v0_r on A, C, E, I we get Line(C, I) == internal_angle_bisector(A, I, E)
By sss_anti_congruence_v1 on D, G, H, G, D, H we get anti_congruent_triangles(D, G, H, G, D, H)
By sss_anti_congruence_v1 on H, C, D, H, D, C we get anti_congruent_triangles(C, D, H, D, C, H)
By sss_anti_congruence_v0 on G, H, E, E, H, G we get anti_congruent_triangles(E, G, H, G, E, H)
By sss_anti_congruence_v1 on H, E, C, H, C, E we get anti_congruent_triangles(C, E, H, E, C, H)
By sss_anti_congruence_v0 on I, F, C, I, C, F we get anti_congruent_triangles(C, F, I, F, C, I)
By internal_angle_bisector_definition_v0_r on E, C, E, I we get Line(C, I) == internal_angle_bisector(E, I, E)
By collinear_definition on G, C, J we get C in Line(G, J), J in Line(C, G), Line(C, G) == Line(G, J), 0 == 2 * angle(C, G, J) mod 360
By sss_anti_congruence_v0 on E, G, H, G, E, H we get anti_congruent_triangles(E, G, H, G, E, H)
By sss_anti_congruence_v1 on C, H, E, E, H, C we get anti_congruent_triangles(C, E, H, E, C, H)
By radical_axis_definition_v0_r on A, Circle(A, C, D), c we get A in radical_axis(c, Circle(A, C, D))
By sss_anti_congruence_v1 on G, E, H, E, G, H we get anti_congruent_triangles(E, G, H, G, E, H)
By sss_anti_congruence_v1 on F, I, C, C, I, F we get anti_congruent_triangles(C, F, I, F, C, I)
By collinear_definition on G, K, C we get K in Line(C, G), C in Line(G, K), Line(C, G) == Line(G, K), 0 == 2 * angle(K, G, C) mod 360
By sss_anti_congruence_v1 on C, F, I, F, C, I we get anti_congruent_triangles(C, F, I, F, C, I)
By sss_anti_congruence_v1 on D, H, C, C, H, D we get anti_congruent_triangles(C, D, H, D, C, H)
By sss_anti_congruence_v1 on H, D, G, H, G, D we get anti_congruent_triangles(D, G, H, G, D, H)
By sss_anti_congruence_v1 on C, F, I, F, C, I we get anti_congruent_triangles(C, F, I, F, C, I)
By sss_anti_congruence_v0 on C, H, D, D, H, C we get anti_congruent_triangles(C, D, H, D, C, H)
By sss_anti_congruence_v1 on E, C, H, C, E, H we get anti_congruent_triangles(C, E, H, E, C, H)
By internal_angle_bisector_definition_v0 on C, G, C, F we get angle(C, F, G) == angle(G, F, C) mod 360
By sss_anti_congruence_v1 on C, F, I, F, C, I we get anti_congruent_triangles(C, F, I, F, C, I)
By sss_anti_congruence_v0 on H, C, E, H, E, C we get anti_congruent_triangles(C, E, H, E, C, H)
By collinear_definition on J, C, G we get C in Line(G, J), G in Line(C, J), Line(C, J) == Line(G, J), 0 == 2 * angle(C, J, G) mod 360
By sss_anti_congruence_v0 on E, H, C, C, H, E we get anti_congruent_triangles(C, E, H, E, C, H)
By sss_anti_congruence_v0 on G, H, E, E, H, G we get anti_congruent_triangles(E, G, H, G, E, H)
By sss_anti_congruence_v0 on H, D, C, H, C, D we get anti_congruent_triangles(C, D, H, D, C, H)
By internal_angle_bisector_definition_v0 on H, J, H, G we get angle(H, G, J) == angle(J, G, H) mod 360
By sss_anti_congruence_v0 on F, I, A, A, I, F we get anti_congruent_triangles(A, F, I, F, A, I)
By sss_anti_congruence_v0 on G, D, H, D, G, H we get anti_congruent_triangles(D, G, H, G, D, H)
By internal_angle_bisector_definition_v0_r on K, F, C, J we get Line(F, J) == internal_angle_bisector(C, J, K)
By isosceles_triangle_properties on I, A, F we get distance(A, I) == distance(F, I), angle(A, F, I) == angle(I, A, F) mod 360
By sss_anti_congruence_v0 on F, I, A, A, I, F we get anti_congruent_triangles(A, F, I, F, A, I)
By internal_angle_bisector_definition_v0_r on A, G, I, E we get Line(E, G) == internal_angle_bisector(A, E, I)
By sss_anti_congruence_v0 on H, D, C, H, C, D we get anti_congruent_triangles(C, D, H, D, C, H)
By sss_anti_congruence_v1 on A, I, F, F, I, A we get anti_congruent_triangles(A, F, I, F, A, I)
By sss_anti_congruence_v0 on C, H, D, D, H, C we get anti_congruent_triangles(C, D, H, D, C, H)
By sss_anti_congruence_v1 on D, H, C, C, H, D we get anti_congruent_triangles(C, D, H, D, C, H)
By sss_anti_congruence_v1 on I, C, F, I, F, C we get anti_congruent_triangles(C, F, I, F, C, I)
By collinear_definition on G, C, K we get C in Line(G, K), K in Line(C, G), Line(C, G) == Line(G, K), 0 == 2 * angle(C, G, K) mod 360
By sss_anti_congruence_v0 on C, I, F, F, I, C we get anti_congruent_triangles(C, F, I, F, C, I)
By sss_anti_congruence_v1 on C, D, H, D, C, H we get anti_congruent_triangles(C, D, H, D, C, H)
By sss_anti_congruence_v1 on D, G, H, G, D, H we get anti_congruent_triangles(D, G, H, G, D, H)
By sas_anti_congruence on E, H, C, C, H, E we get anti_congruent_triangles(C, E, H, E, C, H)
By sas_anti_congruence on G, H, E, E, H, G we get anti_congruent_triangles(E, G, H, G, E, H)
By collinear_definition on F, G, C we get G in Line(C, F), C in Line(F, G), Line(C, F) == Line(F, G), 0 == 2 * angle(G, F, C) mod 360
By internal_angle_bisector_definition_v0_r on I, A, I, E we get Line(A, E) == internal_angle_bisector(I, E, I)
By sss_anti_congruence_v0 on E, G, H, G, E, H we get anti_congruent_triangles(E, G, H, G, E, H)
By sss_anti_congruence_v1 on D, G, H, G, D, H we get anti_congruent_triangles(D, G, H, G, D, H)
By internal_angle_bisector_definition_v0 on F, G, F, K we get angle(F, K, G) == angle(G, K, F) mod 360
By sss_anti_congruence_v0 on E, G, H, G, E, H we get anti_congruent_triangles(E, G, H, G, E, H)
By sss_anti_congruence_v1 on H, G, E, H, E, G we get anti_congruent_triangles(E, G, H, G, E, H)
By perpendicular_angle_conditions_v0 on B, F, G we get angle(B, F, G) == orientation(B, F, G) mod 360
By sss_anti_congruence_v0 on I, F, C, I, C, F we get anti_congruent_triangles(C, F, I, F, C, I)
By internal_angle_bisector_definition_v0_r on C, E, I, A we get Line(A, E) == internal_angle_bisector(C, A, I)
By sss_anti_congruence_v1 on C, D, H, D, C, H we get anti_congruent_triangles(C, D, H, D, C, H)
By isosceles_triangle_properties on H, D, C we get distance(C, H) == distance(D, H), angle(D, C, H) == angle(H, D, C) mod 360
By sss_anti_congruence_v1 on H, E, C, H, C, E we get anti_congruent_triangles(C, E, H, E, C, H)
By sss_anti_congruence_v0 on H, C, E, H, E, C we get anti_congruent_triangles(C, E, H, E, C, H)
By collinear_definition on J, G, K we get G in Line(J, K), K in Line(G, J), Line(G, J) == Line(J, K), 0 == 2 * angle(G, J, K) mod 360
By sss_anti_congruence_v0 on F, C, I, C, F, I we get anti_congruent_triangles(C, F, I, F, C, I)
By sss_anti_congruence_v0 on D, H, G, G, H, D we get anti_congruent_triangles(D, G, H, G, D, H)
By sss_anti_congruence_v1 on C, H, E, E, H, C we get anti_congruent_triangles(C, E, H, E, C, H)
By sss_anti_congruence_v1 on I, F, A, I, A, F we get anti_congruent_triangles(A, F, I, F, A, I)
By isosceles_triangle_properties on H, E, G we get distance(E, H) == distance(G, H), angle(E, G, H) == angle(H, E, G) mod 360
By sss_anti_congruence_v1 on C, F, I, F, C, I we get anti_congruent_triangles(C, F, I, F, C, I)
By sss_anti_congruence_v0 on D, C, H, C, D, H we get anti_congruent_triangles(C, D, H, D, C, H)
By sss_anti_congruence_v0 on G, D, H, D, G, H we get anti_congruent_triangles(D, G, H, G, D, H)
By sss_anti_congruence_v0 on H, D, C, H, C, D we get anti_congruent_triangles(C, D, H, D, C, H)
By internal_angle_bisector_definition_v0_r on K, C, K, J we get Line(C, J) == internal_angle_bisector(K, J, K)
By internal_angle_bisector_definition_v0_r on K, F, K, J we get Line(F, J) == internal_angle_bisector(K, J, K)
By sss_anti_congruence_v0 on H, G, D, H, D, G we get anti_congruent_triangles(D, G, H, G, D, H)
By sas_anti_congruence on A, I, F, F, I, A we get anti_congruent_triangles(A, F, I, F, A, I)
By sss_anti_congruence_v1 on F, A, I, A, F, I we get anti_congruent_triangles(A, F, I, F, A, I)
By sss_anti_congruence_v1 on I, C, F, I, F, C we get anti_congruent_triangles(C, F, I, F, C, I)
By sss_anti_congruence_v1 on E, C, H, C, E, H we get anti_congruent_triangles(C, E, H, E, C, H)
By sss_anti_congruence_v1 on A, I, F, F, I, A we get anti_congruent_triangles(A, F, I, F, A, I)
By internal_angle_bisector_definition_v0 on C, G, C, J we get angle(C, J, G) == angle(G, J, C) mod 360
By sss_anti_congruence_v1 on D, H, C, C, H, D we get anti_congruent_triangles(C, D, H, D, C, H)
By sss_anti_congruence_v1 on F, A, I, A, F, I we get anti_congruent_triangles(A, F, I, F, A, I)
By sss_anti_congruence_v1 on I, C, F, I, F, C we get anti_congruent_triangles(C, F, I, F, C, I)
By sss_anti_congruence_v1 on E, C, H, C, E, H we get anti_congruent_triangles(C, E, H, E, C, H)
By sss_anti_congruence_v1 on H, D, G, H, G, D we get anti_congruent_triangles(D, G, H, G, D, H)
By sss_anti_congruence_v0 on D, C, H, C, D, H we get anti_congruent_triangles(C, D, H, D, C, H)
By sss_anti_congruence_v0 on C, I, F, F, I, C we get anti_congruent_triangles(C, F, I, F, C, I)
By sss_anti_congruence_v0 on H, G, D, H, D, G we get anti_congruent_triangles(D, G, H, G, D, H)
By sss_anti_congruence_v1 on E, H, G, G, H, E we get anti_congruent_triangles(E, G, H, G, E, H)
By sss_anti_congruence_v1 on D, G, H, G, D, H we get anti_congruent_triangles(D, G, H, G, D, H)
By sss_anti_congruence_v0 on F, I, A, A, I, F we get anti_congruent_triangles(A, F, I, F, A, I)
By collinear_definition on K, J, G we get J in Line(G, K), G in Line(J, K), Line(G, K) == Line(J, K), 0 == 2 * angle(J, K, G) mod 360
By collinear_definition on J, G, F we get G in Line(F, J), F in Line(G, J), Line(F, J) == Line(G, J), 0 == 2 * angle(G, J, F) mod 360
By sss_anti_congruence_v0 on E, H, C, C, H, E we get anti_congruent_triangles(C, E, H, E, C, H)
By isosceles_triangle_properties on H, G, E we get distance(E, H) == distance(G, H), angle(G, E, H) == angle(H, G, E) mod 360
By sas_anti_congruence on C, H, D, D, H, C we get anti_congruent_triangles(C, D, H, D, C, H)
By sss_anti_congruence_v0 on F, C, I, C, F, I we get anti_congruent_triangles(C, F, I, F, C, I)
By isosceles_triangle_properties on H, C, E we get distance(C, H) == distance(E, H), angle(C, E, H) == angle(H, C, E) mod 360
By sas_anti_congruence on D, H, C, C, H, D we get anti_congruent_triangles(C, D, H, D, C, H)
By sss_anti_congruence_v0 on F, C, I, C, F, I we get anti_congruent_triangles(C, F, I, F, C, I)
By sss_anti_congruence_v1 on H, D, G, H, G, D we get anti_congruent_triangles(D, G, H, G, D, H)
By collinear_definition on K, G, J we get G in Line(J, K), J in Line(G, K), Line(G, K) == Line(J, K), 0 == 2 * angle(G, K, J) mod 360
By sss_anti_congruence_v1 on I, C, F, I, F, C we get anti_congruent_triangles(C, F, I, F, C, I)
By internal_angle_bisector_definition_v0 on B, G, A, F we get angle(B, F, G) == angle(G, F, A) mod 360
By collinear_definition on G, F, C we get F in Line(C, G), C in Line(F, G), Line(C, G) == Line(F, G), 0 == 2 * angle(F, G, C) mod 360
By sss_anti_congruence_v1 on G, E, H, E, G, H we get anti_congruent_triangles(E, G, H, G, E, H)
By reverse_direction on H, E we get 180 == direction(H, E) - direction(E, H) mod 360
By sss_anti_congruence_v0 on H, G, D, H, D, G we get anti_congruent_triangles(D, G, H, G, D, H)
By sss_anti_congruence_v0 on C, E, H, E, C, H we get anti_congruent_triangles(C, E, H, E, C, H)
By sas_anti_congruence on F, I, A, A, I, F we get anti_congruent_triangles(A, F, I, F, A, I)
By internal_angle_bisector_definition_v0 on J, G, J, F we get angle(G, F, J) == angle(J, F, G) mod 360
By internal_angle_bisector_definition_v0 on F, G, F, J we get angle(F, J, G) == angle(G, J, F) mod 360
By sss_anti_congruence_v0 on A, F, I, F, A, I we get anti_congruent_triangles(A, F, I, F, A, I)
By sss_anti_congruence_v0 on I, A, F, I, F, A we get anti_congruent_triangles(A, F, I, F, A, I)
By sss_anti_congruence_v0 on E, G, H, G, E, H we get anti_congruent_triangles(E, G, H, G, E, H)
By sss_anti_congruence_v0 on C, E, H, E, C, H we get anti_congruent_triangles(C, E, H, E, C, H)
By sss_anti_congruence_v1 on D, H, C, C, H, D we get anti_congruent_triangles(C, D, H, D, C, H)
By sss_anti_congruence_v0 on G, H, E, E, H, G we get anti_congruent_triangles(E, G, H, G, E, H)
By sss_anti_congruence_v0 on G, H, E, E, H, G we get anti_congruent_triangles(E, G, H, G, E, H)
By log_of_2_times_distance on G, C, D, H we get log(distance(C, G)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(D, H))
By collinear_definition on G, J, F we get J in Line(F, G), F in Line(G, J), Line(F, G) == Line(G, J), 0 == 2 * angle(J, G, F) mod 360
By altitude_definition on orthocenter(B, C, G), C, D, i we get i == altitude(orthocenter(B, C, G), C, D)
By altitude_definition on orthocenter(B, C, G), C, K, f we get f == altitude(orthocenter(B, C, G), C, K)
By concyclic_definition_1 on B, D, A, E we get Circle(A, B, D) == Circle(A, D, E)
By concyclic_definition_1 on C, B, E, F we get Circle(B, C, E) == Circle(B, E, F)
By concyclic_definition_1 on B, E, A, D we get Circle(A, B, E) == Circle(A, D, E)
By altitude_definition on orthocenter(B, C, G), B, E, h we get h == altitude(orthocenter(B, C, G), B, E)
By altitude_definition on A, F, G, f we get f == altitude(A, F, G)
By altitude_definition on orthocenter(B, C, G), F, C, f we get f == altitude(orthocenter(B, C, G), C, F)
By anti_similar_triangle_basic_properties on E, A, B, F, A, C we get angle(E, A, B) == 0 - angle(F, A, C) mod 360, angle(A, B, E) == 0 - angle(A, C, F) mod 360, angle(B, E, A) == 0 - angle(C, F, A) mod 360, log(distance(A, E)) + log(distance(A, C)) == log(distance(A, F)) + log(distance(A, B)), log(distance(A, B)) + log(distance(C, F)) == log(distance(A, C)) + log(distance(B, E)), log(distance(B, E)) + log(distance(A, F)) == log(distance(C, F)) + log(distance(A, E))
By concyclic_definition_1 on E, B, C, F we get Circle(B, C, E) == Circle(B, C, F)
By altitude_definition on orthocenter(B, C, G), G, F, f we get f == altitude(orthocenter(B, C, G), F, G)
By anti_similar_triangle_basic_properties on I, D, C, I, C, D we get angle(I, D, C) == 0 - angle(I, C, D) mod 360, angle(D, C, I) == 0 - angle(C, D, I) mod 360, angle(C, I, D) == 0 - angle(D, I, C) mod 360, log(distance(C, I)) + log(distance(C, D)) == log(distance(D, I)) + log(distance(C, D)), log(distance(C, D)) + log(distance(C, I)) == log(distance(C, D)) + log(distance(D, I)), log(distance(C, I)) + log(distance(C, I)) == log(distance(D, I)) + log(distance(D, I))
By altitude_definition on orthocenter(A, B, G), A, B, k we get k == altitude(orthocenter(A, B, G), A, B)
By altitude_definition on orthocenter(B, C, G), G, J, f we get f == altitude(orthocenter(B, C, G), G, J)
By altitude_definition on orthocenter(A, B, G), B, G, h we get h == altitude(orthocenter(A, B, G), B, G)
By altitude_definition on orthocenter(B, C, G), G, K, f we get f == altitude(orthocenter(B, C, G), G, K)
By altitude_definition on H, F, A, k we get k == altitude(H, A, F)
By altitude_definition on orthocenter(A, C, G), G, F, f we get f == altitude(orthocenter(A, C, G), F, G)
By altitude_definition on orthocenter(B, C, G), K, F, f we get f == altitude(orthocenter(B, C, G), F, K)
By concyclic_definition_1 on C, F, D, A we get Circle(A, D, F) == Circle(C, D, F)
By anti_similar_triangle_basic_properties on A, E, G, A, D, C we get angle(A, E, G) == 0 - angle(A, D, C) mod 360, angle(E, G, A) == 0 - angle(D, C, A) mod 360, angle(G, A, E) == 0 - angle(C, A, D) mod 360, log(distance(A, D)) + log(distance(E, G)) == log(distance(A, E)) + log(distance(C, D)), log(distance(C, D)) + log(distance(A, G)) == log(distance(E, G)) + log(distance(A, C)), log(distance(A, C)) + log(distance(A, E)) == log(distance(A, G)) + log(distance(A, D))
By altitude_definition on orthocenter(B, C, G), G, H, f we get f == altitude(orthocenter(B, C, G), G, H)
By altitude_definition on B, G, H, f we get f == altitude(B, G, H)
By concyclic_definition_1 on A, B, D, E we get Circle(A, B, D) == Circle(B, D, E)
By concyclic_definition_1 on A, D, E, B we get Circle(A, D, E) == Circle(B, D, E)
By altitude_definition on B, K, G, f we get f == altitude(B, G, K)
By altitude_definition on orthocenter(A, C, G), E, C, j we get j == altitude(orthocenter(A, C, G), C, E)
By altitude_definition on orthocenter(B, C, G), C, J, f we get f == altitude(orthocenter(B, C, G), C, J)
By altitude_definition on orthocenter(B, C, G), E, G, h we get h == altitude(orthocenter(B, C, G), E, G)
By altitude_definition on orthocenter(A, C, G), J, G, f we get f == altitude(orthocenter(A, C, G), G, J)
By collinear_definition on G, F, K we get F in Line(G, K), K in Line(F, G), Line(F, G) == Line(G, K), 0 == 2 * angle(F, G, K) mod 360
By concyclic_definition_1 on F, E, C, B we get Circle(B, C, E) == Circle(C, E, F)
By collinear_definition on G, K, F we get K in Line(F, G), F in Line(G, K), Line(F, G) == Line(G, K), 0 == 2 * angle(K, G, F) mod 360
By altitude_definition on orthocenter(A, C, G), K, C, f we get f == altitude(orthocenter(A, C, G), C, K)
By anti_similar_triangle_basic_properties on D, A, C, E, A, G we get angle(D, A, C) == 0 - angle(E, A, G) mod 360, angle(A, C, D) == 0 - angle(A, G, E) mod 360, angle(C, D, A) == 0 - angle(G, E, A) mod 360, log(distance(A, D)) + log(distance(A, G)) == log(distance(A, E)) + log(distance(A, C)), log(distance(A, C)) + log(distance(E, G)) == log(distance(A, G)) + log(distance(C, D)), log(distance(C, D)) + log(distance(A, E)) == log(distance(E, G)) + log(distance(A, D))
By altitude_definition on orthocenter(B, C, G), B, G, h we get h == altitude(orthocenter(B, C, G), B, G)
By altitude_definition on orthocenter(B, C, G), H, C, f we get f == altitude(orthocenter(B, C, G), C, H)
By altitude_definition on A, G, K, f we get f == altitude(A, G, K)
By altitude_definition on orthocenter(A, C, G), J, C, f we get f == altitude(orthocenter(A, C, G), C, J)
By altitude_definition on orthocenter(A, C, G), H, C, f we get f == altitude(orthocenter(A, C, G), C, H)
By concyclic_definition_1 on E, F, C, B we get Circle(B, C, F) == Circle(C, E, F)
By altitude_definition on orthocenter(A, C, G), G, C, f we get f == altitude(orthocenter(A, C, G), C, G)
By altitude_definition on orthocenter(B, C, G), G, C, f we get f == altitude(orthocenter(B, C, G), C, G)
By anti_similar_triangle_basic_properties on B, A, E, C, A, F we get angle(B, A, E) == 0 - angle(C, A, F) mod 360, angle(A, E, B) == 0 - angle(A, F, C) mod 360, angle(E, B, A) == 0 - angle(F, C, A) mod 360, log(distance(A, B)) + log(distance(A, F)) == log(distance(A, C)) + log(distance(A, E)), log(distance(A, E)) + log(distance(C, F)) == log(distance(A, F)) + log(distance(B, E)), log(distance(B, E)) + log(distance(A, C)) == log(distance(C, F)) + log(distance(A, B))
By altitude_definition on B, F, G, f we get f == altitude(B, F, G)
By altitude_definition on orthocenter(A, C, G), K, G, f we get f == altitude(orthocenter(A, C, G), G, K)
By altitude_definition on orthocenter(A, C, G), G, H, f we get f == altitude(orthocenter(A, C, G), G, H)
By altitude_definition on A, G, J, f we get f == altitude(A, G, J)
By concyclic_definition_1 on C, E, F, B we get Circle(B, E, F) == Circle(C, E, F)
By altitude_definition on orthocenter(A, C, G), J, K, f we get f == altitude(orthocenter(A, C, G), J, K)
By altitude_definition on orthocenter(A, B, G), A, F, k we get k == altitude(orthocenter(A, B, G), A, F)
By concyclic_definition_1 on G, D, E, C we get Circle(C, D, E) == Circle(D, E, G)
By altitude_definition on orthocenter(B, C, G), J, K, f we get f == altitude(orthocenter(B, C, G), J, K)
By collinear_definition on G, F, J we get F in Line(G, J), J in Line(F, G), Line(F, G) == Line(G, J), 0 == 2 * angle(F, G, J) mod 360
By altitude_definition on orthocenter(A, C, G), G, D, g we get g == altitude(orthocenter(A, C, G), D, G)
By concyclic_definition_1 on C, B, F, E we get Circle(B, C, F) == Circle(B, E, F)
By altitude_definition on orthocenter(A, C, G), C, A, j we get j == altitude(orthocenter(A, C, G), A, C)
By concyclic_definition_1 on E, A, B, D we get Circle(A, B, D) == Circle(A, B, E)
By altitude_definition on orthocenter(A, B, G), G, E, h we get h == altitude(orthocenter(A, B, G), E, G)
By altitude_definition on orthocenter(A, C, G), A, D, g we get g == altitude(orthocenter(A, C, G), A, D)
By altitude_definition on orthocenter(B, C, G), B, C, i we get i == altitude(orthocenter(B, C, G), B, C)
By altitude_definition on A, H, G, f we get f == altitude(A, G, H)
By concyclic_definition_1 on D, E, B, A we get Circle(A, B, E) == Circle(B, D, E)
By altitude_definition on orthocenter(A, B, G), B, E, h we get h == altitude(orthocenter(A, B, G), B, E)
By altitude_definition on B, G, J, f we get f == altitude(B, G, J)
By altitude_definition on orthocenter(A, C, G), E, A, j we get j == altitude(orthocenter(A, C, G), A, E)
By altitude_definition on orthocenter(A, B, G), D, G, g we get g == altitude(orthocenter(A, B, G), D, G)
By altitude_definition on orthocenter(A, C, G), I, A, j we get j == altitude(orthocenter(A, C, G), A, I)
By altitude_definition on A, C, H, f we get f == altitude(A, C, H)
By altitude_definition on orthocenter(A, B, G), A, D, g we get g == altitude(orthocenter(A, B, G), A, D)
By collinear_definition on G, J, K we get J in Line(G, K), K in Line(G, J), Line(G, J) == Line(G, K), 0 == 2 * angle(J, G, K) mod 360
By altitude_definition on H, B, A, k we get k == altitude(H, A, B)
By altitude_definition on orthocenter(A, C, G), I, E, j we get j == altitude(orthocenter(A, C, G), E, I)
By altitude_definition on B, C, H, f we get f == altitude(B, C, H)
By altitude_definition on orthocenter(B, C, G), D, B, i we get i == altitude(orthocenter(B, C, G), B, D)
By altitude_definition on orthocenter(A, C, G), F, J, f we get f == altitude(orthocenter(A, C, G), F, J)
By altitude_definition on orthocenter(B, C, G), F, J, f we get f == altitude(orthocenter(B, C, G), F, J)
By radical_axis_definition_v0 on orthocenter(A, B, G), Circle(A, C, D), Circle(C, D, G) we get power_of_a_point(orthocenter(A, B, G), Circle(A, C, D)) == power_of_a_point(orthocenter(A, B, G), Circle(C, D, G))
By altitude_definition on orthocenter(A, C, G), F, K, f we get f == altitude(orthocenter(A, C, G), F, K)
By altitude_definition on orthocenter(A, B, G), B, F, k we get k == altitude(orthocenter(A, B, G), B, F)
By altitude_definition on H, B, F, k we get k == altitude(H, B, F)
By altitude_definition on orthocenter(A, C, G), C, I, j we get j == altitude(orthocenter(A, C, G), C, I)
By radical_axis_definition_v0 on orthocenter(A, C, G), Circle(A, C, D), Circle(C, D, G) we get power_of_a_point(orthocenter(A, C, G), Circle(A, C, D)) == power_of_a_point(orthocenter(A, C, G), Circle(C, D, G))
By altitude_definition on orthocenter(A, C, G), G, A, g we get g == altitude(orthocenter(A, C, G), A, G)
By altitude_definition on orthocenter(A, C, G), C, F, f we get f == altitude(orthocenter(A, C, G), C, F)
By collinear_definition on G, K, J we get K in Line(G, J), J in Line(G, K), Line(G, J) == Line(G, K), 0 == 2 * angle(K, G, J) mod 360
By altitude_definition on orthocenter(A, B, G), G, A, g we get g == altitude(orthocenter(A, B, G), A, G)
By power_of_a_point_definition on J, C, G, Circle(C, E, G) we get log(distance(C, J)) + log(distance(G, J)) == log(power_of_a_point(J, Circle(C, E, G)))
By power_of_a_point_definition on K, G, C, Circle(C, E, G) we get log(distance(G, K)) + log(distance(C, K)) == log(power_of_a_point(K, Circle(C, E, G)))
By power_of_a_point_definition on J, C, G, Circle(C, D, G) we get log(distance(C, J)) + log(distance(G, J)) == log(power_of_a_point(J, Circle(C, D, G)))
By perpendicular_bisector_sufficient_conditions on D, C, H, I we get Line(H, I) == perpendicular_bisector(C, D)
By power_of_a_point_definition on G, F, C, Circle(A, C, F) we get log(distance(F, G)) + log(distance(C, G)) == log(power_of_a_point(G, Circle(A, C, F)))
By isosceles_triangle_properties on I, D, F we get distance(D, I) == distance(F, I), angle(D, F, I) == angle(I, D, F) mod 360
By isosceles_triangle_properties on I, F, D we get distance(D, I) == distance(F, I), angle(F, D, I) == angle(I, F, D) mod 360
By power_of_a_point_definition on K, C, G, Circle(C, D, G) we get log(distance(C, K)) + log(distance(G, K)) == log(power_of_a_point(K, Circle(C, D, G)))
By isosceles_triangle_properties on H, D, E we get distance(D, H) == distance(E, H), angle(D, E, H) == angle(H, D, E) mod 360
By isosceles_triangle_properties on H, E, D we get distance(D, H) == distance(E, H), angle(E, D, H) == angle(H, E, D) mod 360
By power_of_a_point_definition on F, C, G, Circle(C, D, G) we get log(distance(C, F)) + log(distance(F, G)) == log(power_of_a_point(F, Circle(C, D, G)))
By power_of_a_point_definition on F, C, G, Circle(C, E, G) we get log(distance(C, F)) + log(distance(F, G)) == log(power_of_a_point(F, Circle(C, E, G)))
By concurrent_sufficient_conditions on h, Line(F, I), Line(H, I) we get concurrent(h, Line(F, I), Line(H, I))
By concyclic_sufficient_conditions_v1 on F, A, E, G we get concyclic(A, E, F, G)
By concurrent_sufficient_conditions on Line(F, I), h, Line(H, I) we get concurrent(h, Line(F, I), Line(H, I))
By concurrent_sufficient_conditions on Line(H, I), Line(E, H), Line(D, H) we get concurrent(Line(D, H), Line(E, H), Line(H, I))
By concyclic_sufficient_conditions_v1 on F, B, D, G we get concyclic(B, D, F, G)
By concurrent_sufficient_conditions on i, Line(D, H), l we get concurrent(i, l, Line(D, H))
By concurrent_sufficient_conditions on Line(A, H), Line(D, H), Line(E, H) we get concurrent(Line(A, H), Line(D, H), Line(E, H))
By concurrent_sufficient_conditions on Line(F, I), h, Line(I, J) we get concurrent(h, Line(F, I), Line(I, J))
By concurrent_sufficient_conditions on Line(H, I), Line(F, I), Line(I, J) we get concurrent(Line(F, I), Line(H, I), Line(I, J))
By concurrent_sufficient_conditions on Line(A, H), Line(E, H), Line(D, H) we get concurrent(Line(A, H), Line(D, H), Line(E, H))
By concurrent_sufficient_conditions on Line(H, I), Line(F, I), l we get concurrent(l, Line(F, I), Line(H, I))
By concurrent_sufficient_conditions on k, Line(F, I), f we get concurrent(f, k, Line(F, I))
By line_definition on I, midpoint(C, D), Line(H, I) we get Line(H, I) == Line(I, midpoint(C, D))
By concurrent_sufficient_conditions on Line(E, H), j, h we get concurrent(h, j, Line(E, H))
By concurrent_sufficient_conditions on k, Line(E, H), Line(A, H) we get concurrent(k, Line(A, H), Line(E, H))
By concurrent_sufficient_conditions on Line(A, H), Line(H, I), Line(E, H) we get concurrent(Line(A, H), Line(E, H), Line(H, I))
By concurrent_sufficient_conditions on Line(A, H), Line(D, H), Line(H, I) we get concurrent(Line(A, H), Line(D, H), Line(H, I))
By concurrent_sufficient_conditions on Line(E, H), Line(A, H), k we get concurrent(k, Line(A, H), Line(E, H))
By concurrent_sufficient_conditions on Line(H, I), Line(E, H), k we get concurrent(k, Line(E, H), Line(H, I))
By concurrent_sufficient_conditions on Line(H, I), Line(D, H), Line(A, H) we get concurrent(Line(A, H), Line(D, H), Line(H, I))
By concurrent_sufficient_conditions on Line(A, H), Line(H, I), Line(D, H) we get concurrent(Line(A, H), Line(D, H), Line(H, I))
By concurrent_sufficient_conditions on Line(F, I), Line(H, I), l we get concurrent(l, Line(F, I), Line(H, I))
By concurrent_sufficient_conditions on Line(I, J), Line(F, I), l we get concurrent(l, Line(F, I), Line(I, J))
By concurrent_sufficient_conditions on l, Line(F, I), h we get concurrent(h, l, Line(F, I))
By concurrent_sufficient_conditions on Line(D, H), Line(E, H), k we get concurrent(k, Line(D, H), Line(E, H))
By concurrent_sufficient_conditions on h, Line(E, H), j we get concurrent(h, j, Line(E, H))
By concurrent_sufficient_conditions on i, Line(D, H), g we get concurrent(g, i, Line(D, H))
By concurrent_sufficient_conditions on Line(D, H), i, g we get concurrent(g, i, Line(D, H))
By concurrent_sufficient_conditions on Line(F, I), k, f we get concurrent(f, k, Line(F, I))
By concurrent_sufficient_conditions on Line(H, I), Line(E, H), Line(A, H) we get concurrent(Line(A, H), Line(E, H), Line(H, I))
By concurrent_sufficient_conditions on Line(F, I), Line(I, J), l we get concurrent(l, Line(F, I), Line(I, J))
By concurrent_sufficient_conditions on l, g, Line(D, H) we get concurrent(g, l, Line(D, H))
By concurrent_sufficient_conditions on Line(H, I), Line(D, H), Line(E, H) we get concurrent(Line(D, H), Line(E, H), Line(H, I))
By concurrent_sufficient_conditions on g, Line(D, H), i we get concurrent(g, i, Line(D, H))
By concyclic_sufficient_conditions_v0 on I, E, H, D we get concyclic(D, E, H, I)
By concurrent_sufficient_conditions on f, Line(F, I), k we get concurrent(f, k, Line(F, I))
By concurrent_sufficient_conditions on Line(D, H), Line(H, I), Line(E, H) we get concurrent(Line(D, H), Line(E, H), Line(H, I))
By concurrent_sufficient_conditions on Line(D, H), Line(H, I), k we get concurrent(k, Line(D, H), Line(H, I))
By concurrent_sufficient_conditions on Line(A, H), k, Line(D, H) we get concurrent(k, Line(A, H), Line(D, H))
By concurrent_sufficient_conditions on Line(F, I), l, Line(H, I) we get concurrent(l, Line(F, I), Line(H, I))
By line_definition on H, midpoint(C, D), Line(H, I) we get Line(H, I) == Line(H, midpoint(C, D))
By concurrent_sufficient_conditions on l, Line(F, I), Line(H, I) we get concurrent(l, Line(F, I), Line(H, I))
By concurrent_sufficient_conditions on Line(H, I), Line(A, H), Line(E, H) we get concurrent(Line(A, H), Line(E, H), Line(H, I))
By concurrent_sufficient_conditions on Line(I, J), Line(F, I), Line(H, I) we get concurrent(Line(F, I), Line(H, I), Line(I, J))
By concurrent_sufficient_conditions on Line(I, J), Line(H, I), Line(F, I) we get concurrent(Line(F, I), Line(H, I), Line(I, J))
By concurrent_sufficient_conditions on Line(E, H), Line(D, H), k we get concurrent(k, Line(D, H), Line(E, H))
By concurrent_sufficient_conditions on l, h, Line(F, I) we get concurrent(h, l, Line(F, I))
By concurrent_sufficient_conditions on h, Line(H, I), Line(F, I) we get concurrent(h, Line(F, I), Line(H, I))
By concurrent_sufficient_conditions on Line(A, H), Line(D, H), k we get concurrent(k, Line(A, H), Line(D, H))
By concurrent_sufficient_conditions on Line(A, H), Line(E, H), Line(H, I) we get concurrent(Line(A, H), Line(E, H), Line(H, I))
By concurrent_sufficient_conditions on h, j, Line(E, H) we get concurrent(h, j, Line(E, H))
By concurrent_sufficient_conditions on Line(I, J), h, Line(F, I) we get concurrent(h, Line(F, I), Line(I, J))
By concurrent_sufficient_conditions on Line(D, H), k, Line(A, H) we get concurrent(k, Line(A, H), Line(D, H))
By concurrent_sufficient_conditions on Line(F, I), l, h we get concurrent(h, l, Line(F, I))
By concurrent_sufficient_conditions on Line(D, H), l, i we get concurrent(i, l, Line(D, H))
By concurrent_sufficient_conditions on k, Line(A, H), Line(E, H) we get concurrent(k, Line(A, H), Line(E, H))
By concurrent_sufficient_conditions on l, Line(D, H), i we get concurrent(i, l, Line(D, H))
By concurrent_sufficient_conditions on l, Line(H, I), Line(F, I) we get concurrent(l, Line(F, I), Line(H, I))
By concurrent_sufficient_conditions on k, Line(D, H), Line(H, I) we get concurrent(k, Line(D, H), Line(H, I))
By concurrent_sufficient_conditions on Line(F, I), Line(H, I), h we get concurrent(h, Line(F, I), Line(H, I))
By concurrent_sufficient_conditions on g, l, Line(D, H) we get concurrent(g, l, Line(D, H))
By concurrent_sufficient_conditions on Line(E, H), k, Line(H, I) we get concurrent(k, Line(E, H), Line(H, I))
By concurrent_sufficient_conditions on Line(A, H), k, Line(E, H) we get concurrent(k, Line(A, H), Line(E, H))
By concurrent_sufficient_conditions on Line(F, I), l, Line(I, J) we get concurrent(l, Line(F, I), Line(I, J))
By concurrent_sufficient_conditions on Line(E, H), k, Line(A, H) we get concurrent(k, Line(A, H), Line(E, H))
By concurrent_sufficient_conditions on g, i, Line(D, H) we get concurrent(g, i, Line(D, H))
By concurrent_sufficient_conditions on Line(D, H), g, i we get concurrent(g, i, Line(D, H))
By concurrent_sufficient_conditions on Line(F, I), Line(H, I), Line(I, J) we get concurrent(Line(F, I), Line(H, I), Line(I, J))
By concurrent_sufficient_conditions on Line(D, H), i, l we get concurrent(i, l, Line(D, H))
By concurrent_sufficient_conditions on Line(E, H), k, Line(D, H) we get concurrent(k, Line(D, H), Line(E, H))
By concurrent_sufficient_conditions on Line(D, H), Line(A, H), k we get concurrent(k, Line(A, H), Line(D, H))
By concurrent_sufficient_conditions on k, Line(D, H), Line(A, H) we get concurrent(k, Line(A, H), Line(D, H))
By concurrent_sufficient_conditions on k, Line(A, H), Line(D, H) we get concurrent(k, Line(A, H), Line(D, H))
By concurrent_sufficient_conditions on Line(D, H), Line(H, I), Line(A, H) we get concurrent(Line(A, H), Line(D, H), Line(H, I))
By concurrent_sufficient_conditions on Line(D, H), k, Line(E, H) we get concurrent(k, Line(D, H), Line(E, H))
By concurrent_sufficient_conditions on Line(F, I), h, l we get concurrent(h, l, Line(F, I))
By concurrent_sufficient_conditions on i, g, Line(D, H) we get concurrent(g, i, Line(D, H))
By concurrent_sufficient_conditions on Line(F, I), Line(I, J), Line(H, I) we get concurrent(Line(F, I), Line(H, I), Line(I, J))
By concurrent_sufficient_conditions on Line(F, I), f, k we get concurrent(f, k, Line(F, I))
By concurrent_sufficient_conditions on Line(H, I), l, Line(F, I) we get concurrent(l, Line(F, I), Line(H, I))
By concurrent_sufficient_conditions on Line(E, H), Line(D, H), Line(A, H) we get concurrent(Line(A, H), Line(D, H), Line(E, H))
By concurrent_sufficient_conditions on h, Line(I, J), Line(F, I) we get concurrent(h, Line(F, I), Line(I, J))
By concurrent_sufficient_conditions on Line(E, H), Line(H, I), Line(D, H) we get concurrent(Line(D, H), Line(E, H), Line(H, I))
By concurrent_sufficient_conditions on f, k, Line(F, I) we get concurrent(f, k, Line(F, I))
By concurrent_sufficient_conditions on Line(H, I), Line(A, H), Line(D, H) we get concurrent(Line(A, H), Line(D, H), Line(H, I))
By concurrent_sufficient_conditions on k, Line(D, H), Line(E, H) we get concurrent(k, Line(D, H), Line(E, H))
By concurrent_sufficient_conditions on Line(H, I), h, Line(F, I) we get concurrent(h, Line(F, I), Line(H, I))
By concurrent_sufficient_conditions on Line(D, H), Line(E, H), Line(A, H) we get concurrent(Line(A, H), Line(D, H), Line(E, H))
By concurrent_sufficient_conditions on Line(D, H), Line(A, H), Line(E, H) we get concurrent(Line(A, H), Line(D, H), Line(E, H))
By concurrent_sufficient_conditions on Line(H, I), Line(F, I), h we get concurrent(h, Line(F, I), Line(H, I))
By concurrent_sufficient_conditions on i, l, Line(D, H) we get concurrent(i, l, Line(D, H))
By concurrent_sufficient_conditions on Line(D, H), Line(E, H), Line(H, I) we get concurrent(Line(D, H), Line(E, H), Line(H, I))
By concurrent_sufficient_conditions on Line(H, I), Line(I, J), Line(F, I) we get concurrent(Line(F, I), Line(H, I), Line(I, J))
By concurrent_sufficient_conditions on h, Line(F, I), Line(I, J) we get concurrent(h, Line(F, I), Line(I, J))
By concurrent_sufficient_conditions on Line(E, H), Line(H, I), Line(A, H) we get concurrent(Line(A, H), Line(E, H), Line(H, I))
By concurrent_sufficient_conditions on g, Line(D, H), l we get concurrent(g, l, Line(D, H))
By concurrent_sufficient_conditions on Line(E, H), Line(A, H), Line(D, H) we get concurrent(Line(A, H), Line(D, H), Line(E, H))
By concurrent_sufficient_conditions on l, Line(I, J), Line(F, I) we get concurrent(l, Line(F, I), Line(I, J))
By concurrent_sufficient_conditions on Line(H, I), k, Line(D, H) we get concurrent(k, Line(D, H), Line(H, I))
By concurrent_sufficient_conditions on k, Line(E, H), Line(H, I) we get concurrent(k, Line(E, H), Line(H, I))
By concurrent_sufficient_conditions on k, f, Line(F, I) we get concurrent(f, k, Line(F, I))
By concurrent_sufficient_conditions on j, h, Line(E, H) we get concurrent(h, j, Line(E, H))
By concurrent_sufficient_conditions on Line(E, H), h, j we get concurrent(h, j, Line(E, H))
By concurrent_sufficient_conditions on l, i, Line(D, H) we get concurrent(i, l, Line(D, H))
By concurrent_sufficient_conditions on Line(D, H), k, Line(H, I) we get concurrent(k, Line(D, H), Line(H, I))
By concurrent_sufficient_conditions on l, Line(D, H), g we get concurrent(g, l, Line(D, H))
By concurrent_sufficient_conditions on j, Line(E, H), h we get concurrent(h, j, Line(E, H))
By concurrent_sufficient_conditions on Line(E, H), Line(D, H), Line(H, I) we get concurrent(Line(D, H), Line(E, H), Line(H, I))
By concurrent_sufficient_conditions on Line(E, H), Line(H, I), k we get concurrent(k, Line(E, H), Line(H, I))
By concurrent_sufficient_conditions on Line(D, H), l, g we get concurrent(g, l, Line(D, H))
By concurrent_sufficient_conditions on l, Line(F, I), Line(I, J) we get concurrent(l, Line(F, I), Line(I, J))
By concurrent_sufficient_conditions on Line(E, H), Line(A, H), Line(H, I) we get concurrent(Line(A, H), Line(E, H), Line(H, I))
By concurrent_sufficient_conditions on Line(H, I), k, Line(E, H) we get concurrent(k, Line(E, H), Line(H, I))
By concurrent_sufficient_conditions on h, l, Line(F, I) we get concurrent(h, l, Line(F, I))
By concurrent_sufficient_conditions on Line(I, J), l, Line(F, I) we get concurrent(l, Line(F, I), Line(I, J))
By concurrent_sufficient_conditions on h, Line(F, I), l we get concurrent(h, l, Line(F, I))
By concurrent_sufficient_conditions on Line(D, H), Line(A, H), Line(H, I) we get concurrent(Line(A, H), Line(D, H), Line(H, I))
By concurrent_sufficient_conditions on Line(I, J), Line(F, I), h we get concurrent(h, Line(F, I), Line(I, J))
By concurrent_sufficient_conditions on Line(D, H), g, l we get concurrent(g, l, Line(D, H))
By concurrent_sufficient_conditions on Line(A, H), Line(E, H), k we get concurrent(k, Line(A, H), Line(E, H))
By concurrent_sufficient_conditions on k, Line(E, H), Line(D, H) we get concurrent(k, Line(D, H), Line(E, H))
By concurrent_sufficient_conditions on Line(H, I), Line(D, H), k we get concurrent(k, Line(D, H), Line(H, I))
By concurrent_sufficient_conditions on k, Line(H, I), Line(D, H) we get concurrent(k, Line(D, H), Line(H, I))
By concurrent_sufficient_conditions on Line(F, I), Line(I, J), h we get concurrent(h, Line(F, I), Line(I, J))
By concurrent_sufficient_conditions on k, Line(H, I), Line(E, H) we get concurrent(k, Line(E, H), Line(H, I))
By angles_on_chord_v1 on E, A, D, B, Circle(A, B, D) we get angle(E, B, A) == angle(E, D, A) mod 360
By angles_on_chord_v3 on E, B, D, A, Circle(A, B, D) we get angle(E, D, B) == angle(E, A, B) + 180 mod 360
By angles_on_chord_v2 on D, A, C, F, Circle(A, C, D) we get angle(D, C, A) == angle(D, F, A) + 180 mod 360
By angles_on_chord_v0 on F, A, C, D, Circle(A, C, D) we get angle(F, C, A) == angle(F, D, A) mod 360
By angles_on_chord_v1 on D, C, F, A, Circle(A, C, D) we get angle(D, A, C) == angle(D, F, C) mod 360
By angles_on_chord_v3 on B, E, A, D, Circle(A, B, D) we get angle(B, A, E) == angle(B, D, E) + 180 mod 360
By angles_on_chord_v2 on A, D, F, C, Circle(A, C, D) we get angle(A, F, D) == angle(A, C, D) + 180 mod 360
By angles_on_chord_v1 on B, D, E, A, Circle(A, B, D) we get angle(B, A, D) == angle(B, E, D) mod 360
By angles_on_chord_v3 on A, D, C, F, Circle(A, C, D) we get angle(A, C, D) == angle(A, F, D) + 180 mod 360
By angles_on_chord_v3 on F, C, A, D, Circle(A, C, D) we get angle(F, A, C) == angle(F, D, C) + 180 mod 360
By angles_on_chord_v2 on A, D, B, E, Circle(A, B, D) we get angle(A, B, D) == angle(A, E, D) + 180 mod 360
By angles_on_chord_v3 on C, F, D, A, Circle(A, C, D) we get angle(C, D, F) == angle(C, A, F) + 180 mod 360
By angles_on_chord_v2 on C, F, A, D, Circle(A, C, D) we get angle(C, A, F) == angle(C, D, F) + 180 mod 360
By angles_on_chord_v0 on C, D, G, E, Circle(C, D, E) we get angle(C, E, D) == angle(C, G, D) mod 360
By angles_on_chord_v0 on C, D, A, F, Circle(A, C, D) we get angle(C, A, D) == angle(C, F, D) mod 360
By angles_on_chord_v1 on G, D, E, C, Circle(C, D, E) we get angle(G, C, D) == angle(G, E, D) mod 360
By angles_on_chord_v1 on E, G, D, C, Circle(C, D, E) we get angle(E, C, G) == angle(E, D, G) mod 360
By angles_on_chord_v0 on E, C, G, D, Circle(C, D, E) we get angle(E, D, C) == angle(E, G, C) mod 360
By angles_on_chord_v0 on D, B, A, E, Circle(A, B, D) we get angle(D, A, B) == angle(D, E, B) mod 360
By angles_on_chord_v1 on A, F, D, C, Circle(A, C, D) we get angle(A, C, F) == angle(A, D, F) mod 360
By angles_on_chord_v1 on D, C, G, E, Circle(C, D, E) we get angle(D, E, C) == angle(D, G, C) mod 360
By angles_on_chord_v3 on D, A, B, E, Circle(A, B, D) we get angle(D, B, A) == angle(D, E, A) + 180 mod 360
By angles_on_chord_v0 on A, E, B, D, Circle(A, B, D) we get angle(A, B, E) == angle(A, D, E) mod 360
By angles_on_chord_v0 on D, G, E, C, Circle(C, D, E) we get angle(D, C, G) == angle(D, E, G) mod 360
By angles_on_chord_v2 on D, A, E, B, Circle(A, B, D) we get angle(D, E, A) == angle(D, B, A) + 180 mod 360
By angles_on_chord_v3 on A, D, E, B, Circle(A, B, D) we get angle(A, E, D) == angle(A, B, D) + 180 mod 360
By angles_on_chord_v2 on B, E, D, A, Circle(A, B, D) we get angle(B, D, E) == angle(B, A, E) + 180 mod 360
By angles_on_chord_v1 on C, E, G, D, Circle(C, D, E) we get angle(C, D, E) == angle(C, G, E) mod 360
By angles_on_chord_v0 on G, E, D, C, Circle(C, D, E) we get angle(G, C, E) == angle(G, D, E) mod 360
By angles_on_chord_v2 on E, B, A, D, Circle(A, B, D) we get angle(E, A, B) == angle(E, D, B) + 180 mod 360
By angles_on_chord_v3 on D, A, F, C, Circle(A, C, D) we get angle(D, F, A) == angle(D, C, A) + 180 mod 360
By angles_on_chord_v2 on F, C, D, A, Circle(A, C, D) we get angle(F, D, C) == angle(F, A, C) + 180 mod 360
By median_definition on H, D, C, Line(H, I) we get Line(H, I) == median(H, C, D)
By line_intersection_definition on E, Line(D, E), h we get E == line_intersection(h, Line(D, E))
By median_definition on midpoint(C, D), C, A, Line(H, I) we get Line(H, I) == median(midpoint(C, D), A, C)
By line_intersection_definition on A, h, radical_axis(c, Circle(A, C, D)) we get A == line_intersection(h, radical_axis(c, Circle(A, C, D)))
By line_intersection_definition on A, f, radical_axis(c, Circle(A, C, D)) we get A == line_intersection(f, radical_axis(c, Circle(A, C, D)))
By radical_axis_of_intersecting_circles_v0 on D, E, Circle(A, B, D), Circle(C, D, E) we get Line(D, E) == radical_axis(Circle(A, B, D), Circle(C, D, E))
By radical_axis_of_intersecting_circles_v0 on E, B, Circle(B, C, E), Circle(A, B, D) we get Line(B, E) == radical_axis(Circle(A, B, D), Circle(B, C, E))
By perpendicular_line_definition on H, Line(H, I), g we get Line(H, I) == perpendicular_line(H, g)
By line_intersection_definition on D, Line(D, F), g we get D == line_intersection(g, Line(D, F))
By line_intersection_definition on A, radical_axis(c, Circle(A, C, D)), Line(A, H) we get A == line_intersection(Line(A, H), radical_axis(c, Circle(A, C, D)))
By line_intersection_definition on D, Line(D, F), l we get D == line_intersection(l, Line(D, F))
By perpendicular_line_definition on C, g, Line(H, I) we get g == perpendicular_line(C, Line(H, I))
By line_intersection_definition on A, i, radical_axis(c, Circle(A, C, D)) we get A == line_intersection(i, radical_axis(c, Circle(A, C, D)))
By median_definition on I, D, C, Line(H, I) we get Line(H, I) == median(I, C, D)
By line_intersection_definition on E, Line(E, H), Line(D, E) we get E == line_intersection(Line(D, E), Line(E, H))
By radical_axis_of_intersecting_circles_v0 on C, E, Circle(C, D, E), Circle(B, C, E) we get Line(C, E) == radical_axis(Circle(B, C, E), Circle(C, D, E))
By perpendicular_line_definition on I, Line(H, I), g we get Line(H, I) == perpendicular_line(I, g)
By median_definition on midpoint(C, D), C, G, Line(H, I) we get Line(H, I) == median(midpoint(C, D), C, G)
By radical_axis_of_intersecting_circles_v0 on F, C, Circle(A, C, D), Circle(B, C, E) we get Line(C, F) == radical_axis(Circle(A, C, D), Circle(B, C, E))
By line_intersection_definition on F, Line(D, F), Line(F, I) we get F == line_intersection(Line(D, F), Line(F, I))
By line_intersection_definition on F, Line(D, F), f we get F == line_intersection(f, Line(D, F))
By line_intersection_definition on A, radical_axis(c, Circle(A, C, D)), Line(A, J) we get A == line_intersection(Line(A, J), radical_axis(c, Circle(A, C, D)))
By line_intersection_definition on D, Line(D, E), g we get D == line_intersection(g, Line(D, E))
By line_intersection_definition on E, j, Line(D, E) we get E == line_intersection(j, Line(D, E))
By line_intersection_definition on D, Line(D, E), Line(D, F) we get D == line_intersection(Line(D, E), Line(D, F))
By line_intersection_definition on F, Line(D, F), k we get F == line_intersection(k, Line(D, F))
By radical_axis_of_intersecting_circles_v0 on A, D, Circle(A, C, D), Circle(A, B, D) we get Line(A, D) == radical_axis(Circle(A, B, D), Circle(A, C, D))
By line_intersection_definition on D, Line(D, H), Line(D, E) we get D == line_intersection(Line(D, E), Line(D, H))
By perpendicular_line_definition on B, g, Line(H, I) we get g == perpendicular_line(B, Line(H, I))
By line_intersection_definition on D, Line(D, F), i we get D == line_intersection(i, Line(D, F))
By line_intersection_definition on D, i, Line(D, E) we get D == line_intersection(i, Line(D, E))
By line_intersection_definition on D, Line(D, F), Line(D, H) we get D == line_intersection(Line(D, F), Line(D, H))
By perpendicular_line_definition on D, g, Line(H, I) we get g == perpendicular_line(D, Line(H, I))
By line_intersection_definition on D, Line(D, E), l we get D == line_intersection(l, Line(D, E))
By angles_on_chord_v3 on F, C, E, B, Circle(B, C, E) we get angle(F, E, C) == angle(F, B, C) + 180 mod 360
By angles_on_chord_v0 on E, C, F, B, Circle(B, C, E) we get angle(E, B, C) == angle(E, F, C) mod 360
By angles_on_chord_v2 on C, F, E, B, Circle(B, C, E) we get angle(C, E, F) == angle(C, B, F) + 180 mod 360
By angles_on_chord_v2 on E, B, F, C, Circle(B, C, E) we get angle(E, F, B) == angle(E, C, B) + 180 mod 360
By angles_on_chord_v0 on B, F, C, E, Circle(B, C, E) we get angle(B, C, F) == angle(B, E, F) mod 360
By angles_on_chord_v1 on C, E, F, B, Circle(B, C, E) we get angle(C, B, E) == angle(C, F, E) mod 360
By angles_on_chord_v3 on E, B, C, F, Circle(B, C, E) we get angle(E, C, B) == angle(E, F, B) + 180 mod 360
By angles_on_chord_v1 on F, B, E, C, Circle(B, C, E) we get angle(F, C, B) == angle(F, E, B) mod 360
By angles_on_chord_v2 on B, E, C, F, Circle(B, C, E) we get angle(B, C, E) == angle(B, F, E) + 180 mod 360
By angles_on_chord_v3 on C, F, B, E, Circle(B, C, E) we get angle(C, B, F) == angle(C, E, F) + 180 mod 360
By angles_on_chord_v2 on F, C, B, E, Circle(B, C, E) we get angle(F, B, C) == angle(F, E, C) + 180 mod 360
By angles_on_chord_v3 on B, E, F, C, Circle(B, C, E) we get angle(B, F, E) == angle(B, C, E) + 180 mod 360
By same_angle_v3 on D, B, C, E we get angle(B, D, E) == angle(C, D, E) + 180 mod 360
By same_angle_v2 on F, K, J, D we get angle(K, F, D) == angle(J, F, D) + 180 mod 360
By same_angle_v3 on H, J, C, E we get angle(J, H, E) == angle(C, H, E) + 180 mod 360
By same_angle_v1 on D, G, A, F we get angle(A, D, F) == angle(G, D, F) mod 360
By perpendicular_direction_conditions_v0_r on B, F, H, J we get 180 == 2 * direction(B, F) - 2 * direction(H, J) mod 360
By same_angle_v0 on F, K, C, D we get angle(C, F, D) == angle(K, F, D) mod 360
By projection_definition on H, F, f we get F == projection(H, f)
By same_angle_v1 on J, H, F, I we get angle(F, J, I) == angle(H, J, I) mod 360
By same_angle_v1 on D, I, K, F we get angle(I, D, F) == angle(K, D, F) mod 360
By same_angle_v0 on H, J, G, E we get angle(G, H, E) == angle(J, H, E) mod 360
By same_angle_v3 on E, I, A, D we get angle(I, E, D) == angle(A, E, D) + 180 mod 360
By same_angle_v2 on F, C, J, D we get angle(C, F, D) == angle(J, F, D) + 180 mod 360
By same_angle_v1 on D, I, K, E we get angle(I, D, E) == angle(K, D, E) mod 360
By same_angle_v2 on F, A, B, D we get angle(A, F, D) == angle(B, F, D) + 180 mod 360
By same_angle_v0 on E, C, I, D we get angle(C, E, D) == angle(I, E, D) mod 360
By same_angle_v1 on J, H, K, A we get angle(H, J, A) == angle(K, J, A) mod 360
By same_angle_v3 on F, G, J, D we get angle(G, F, D) == angle(J, F, D) + 180 mod 360
By same_angle_v1 on E, B, G, D we get angle(B, E, D) == angle(G, E, D) mod 360
By same_angle_v0 on D, G, A, E we get angle(A, D, E) == angle(G, D, E) mod 360
By same_angle_v0 on F, K, G, D we get angle(G, F, D) == angle(K, F, D) mod 360
By perpendicular_direction_conditions_v0_r on F, B, J, H we get 180 == 2 * direction(F, B) - 2 * direction(J, H) mod 360
By same_angle_v0 on H, J, G, A we get angle(G, H, A) == angle(J, H, A) mod 360
By perpendicular_direction_conditions_v0_r on B, A, H, J we get 180 == 2 * direction(B, A) - 2 * direction(H, J) mod 360
By same_angle_v1 on J, H, C, I we get angle(C, J, I) == angle(H, J, I) mod 360
By perpendicular_direction_conditions_v0_r on J, H, F, B we get 180 == 2 * direction(J, H) - 2 * direction(F, B) mod 360
By same_angle_v0 on F, G, C, D we get angle(C, F, D) == angle(G, F, D) mod 360
By same_angle_v1 on J, C, H, A we get angle(C, J, A) == angle(H, J, A) mod 360
By same_angle_v3 on H, C, J, D we get angle(C, H, D) == angle(J, H, D) + 180 mod 360
By same_angle_v3 on D, B, C, F we get angle(B, D, F) == angle(C, D, F) + 180 mod 360
By same_angle_v0 on H, J, G, I we get angle(G, H, I) == angle(J, H, I) mod 360
By perpendicular_direction_conditions_v0_r on H, J, A, F we get 180 == 2 * direction(H, J) - 2 * direction(A, F) mod 360
By same_angle_v1 on H, J, G, D we get angle(G, H, D) == angle(J, H, D) mod 360
By same_angle_v1 on J, H, G, A we get angle(G, J, A) == angle(H, J, A) mod 360
By same_angle_v3 on H, J, C, A we get angle(J, H, A) == angle(C, H, A) + 180 mod 360
By perpendicular_direction_conditions_v0_r on J, H, F, A we get 180 == 2 * direction(J, H) - 2 * direction(F, A) mod 360
By same_angle_v3 on E, C, A, D we get angle(C, E, D) == angle(A, E, D) + 180 mod 360
By same_angle_v2 on H, J, C, I we get angle(J, H, I) == angle(C, H, I) + 180 mod 360
By same_angle_v1 on J, H, F, A we get angle(F, J, A) == angle(H, J, A) mod 360
By same_angle_v1 on J, H, K, I we get angle(H, J, I) == angle(K, J, I) mod 360
By between_imply_not_between on J, F, G we get collinear_and_not_between(F, J, G)
By perpendicular_direction_conditions_v0_r on B, F, J, H we get 180 == 2 * direction(B, F) - 2 * direction(J, H) mod 360
By perpendicular_direction_conditions_v0_r on H, J, B, A we get 180 == 2 * direction(H, J) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on J, H, B, A we get 180 == 2 * direction(J, H) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on F, B, H, J we get 180 == 2 * direction(F, B) - 2 * direction(H, J) mod 360
By perpendicular_direction_conditions_v0_r on H, J, A, B we get 180 == 2 * direction(H, J) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on F, A, J, H we get 180 == 2 * direction(F, A) - 2 * direction(J, H) mod 360
By perpendicular_direction_conditions_v0_r on A, B, H, J we get 180 == 2 * direction(A, B) - 2 * direction(H, J) mod 360
By perpendicular_direction_conditions_v0_r on H, J, F, A we get 180 == 2 * direction(H, J) - 2 * direction(F, A) mod 360
By same_angle_v1 on J, H, G, I we get angle(G, J, I) == angle(H, J, I) mod 360
By perpendicular_direction_conditions_v0_r on B, A, J, H we get 180 == 2 * direction(B, A) - 2 * direction(J, H) mod 360
By perpendicular_direction_conditions_v0_r on J, H, B, F we get 180 == 2 * direction(J, H) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on A, B, J, H we get 180 == 2 * direction(A, B) - 2 * direction(J, H) mod 360
By perpendicular_direction_conditions_v0_r on A, F, J, H we get 180 == 2 * direction(A, F) - 2 * direction(J, H) mod 360
By perpendicular_direction_conditions_v0_r on J, H, A, F we get 180 == 2 * direction(J, H) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on H, J, F, B we get 180 == 2 * direction(H, J) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on H, J, B, F we get 180 == 2 * direction(H, J) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on J, H, A, B we get 180 == 2 * direction(J, H) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on F, A, H, J we get 180 == 2 * direction(F, A) - 2 * direction(H, J) mod 360
By between_imply_not_between on F, G, K we get collinear_and_not_between(G, F, K)
By perpendicular_direction_conditions_v0_r on A, F, H, J we get 180 == 2 * direction(A, F) - 2 * direction(H, J) mod 360
By between_imply_not_between on C, G, J we get collinear_and_not_between(G, C, J)
By between_imply_not_between on G, F, J we get collinear_and_not_between(F, G, J)
By between_imply_not_between on C, K, G we get collinear_and_not_between(G, C, K)
By between_imply_not_between on J, G, K we get collinear_and_not_between(G, J, K)
By between_imply_not_between on C, G, F we get collinear_and_not_between(F, C, G)
By between_imply_not_between on F, G, C we get collinear_and_not_between(C, F, G)
By parallel_line_definition on midpoint(C, D), Line(H, I), i we get Line(H, I) == parallel_line(midpoint(C, D), i)
By between_imply_not_between on K, G, F we get collinear_and_not_between(F, K, G)
By between_imply_not_between on C, midpoint(C, D), D we get collinear_and_not_between(D, C, midpoint(C, D))
By between_imply_not_between on J, G, C we get collinear_and_not_between(C, J, G)
By between_imply_not_between on K, G, J we get collinear_and_not_between(G, K, J)
By between_imply_not_between on G, K, C we get collinear_and_not_between(C, G, K)
By between_imply_not_between on D, midpoint(C, D), C we get collinear_and_not_between(C, D, midpoint(C, D))
By parallel_line_definition on H, Line(H, I), i we get Line(H, I) == parallel_line(H, i)
By circle_radius_v0_r on J, c we get radius(c) == distance(J, center(c))
By parallel_line_definition on G, i, Line(H, I) we get i == parallel_line(G, Line(H, I))
By circle_radius_v0_r on A, c we get radius(c) == distance(A, center(c))
By parallel_line_definition on A, i, Line(H, I) we get i == parallel_line(A, Line(H, I))
By parallel_line_definition on I, Line(H, I), i we get Line(H, I) == parallel_line(I, i)
By circle_radius_v0_r on H, c we get radius(c) == distance(H, center(c))
By circle_radius_v0_r on I, c we get radius(c) == distance(I, center(c))
By parallel_line_definition on D, i, Line(H, I) we get i == parallel_line(D, Line(H, I))
By same_angle_v3 on H, F, C, E we get angle(F, H, E) == angle(C, H, E) + 180 mod 360
By same_angle_v2 on K, H, G, D we get angle(H, K, D) == angle(G, K, D) + 180 mod 360
By same_angle_v0 on H, F, J, I we get angle(F, H, I) == angle(J, H, I) mod 360
By angle_to_center on A, H, J, c we get 2 * angle(A, H, J) == angle(A, center(c), J) mod 360
By angle_to_center on F, D, A, Circle(A, C, D) we get 2 * angle(F, D, A) == angle(F, center(Circle(A, C, D)), A) mod 360
By angle_to_center on J, I, A, c we get 2 * angle(J, I, A) == angle(J, center(c), A) mod 360
By same_angle_v0 on H, J, F, A we get angle(F, H, A) == angle(J, H, A) mod 360
By angle_to_center on C, F, D, Circle(A, C, D) we get 2 * angle(C, F, D) == angle(C, center(Circle(A, C, D)), D) mod 360
By angle_to_center on A, D, F, Circle(A, C, D) we get 2 * angle(A, D, F) == angle(A, center(Circle(A, C, D)), F) mod 360
By angle_to_center on D, F, A, Circle(A, C, D) we get 2 * angle(D, F, A) == angle(D, center(Circle(A, C, D)), A) mod 360
By angle_to_center on E, G, D, Circle(C, D, E) we get 2 * angle(E, G, D) == angle(E, center(Circle(C, D, E)), D) mod 360
By angle_to_center on E, D, G, Circle(C, D, E) we get 2 * angle(E, D, G) == angle(E, center(Circle(C, D, E)), G) mod 360
By angle_to_center on F, D, C, Circle(A, C, D) we get 2 * angle(F, D, C) == angle(F, center(Circle(A, C, D)), C) mod 360
By angle_to_center on H, A, I, c we get 2 * angle(H, A, I) == angle(H, center(c), I) mod 360
By angle_to_center on H, A, J, c we get 2 * angle(H, A, J) == angle(H, center(c), J) mod 360
By same_angle_v1 on H, K, J, D we get angle(J, H, D) == angle(K, H, D) mod 360
By angle_to_center on H, I, A, c we get 2 * angle(H, I, A) == angle(H, center(c), A) mod 360
By angle_to_center on J, H, I, c we get 2 * angle(J, H, I) == angle(J, center(c), I) mod 360
By angle_to_center on C, D, F, Circle(A, C, D) we get 2 * angle(C, D, F) == angle(C, center(Circle(A, C, D)), F) mod 360
By angle_to_center on J, I, H, c we get 2 * angle(J, I, H) == angle(J, center(c), H) mod 360
By angle_to_center on A, I, J, c we get 2 * angle(A, I, J) == angle(A, center(c), J) mod 360
By angle_to_center on A, H, I, c we get 2 * angle(A, H, I) == angle(A, center(c), I) mod 360
By angle_to_center on I, J, A, c we get 2 * angle(I, J, A) == angle(I, center(c), A) mod 360
By angle_to_center on A, F, D, Circle(A, C, D) we get 2 * angle(A, F, D) == angle(A, center(Circle(A, C, D)), D) mod 360
By angle_to_center on I, H, A, c we get 2 * angle(I, H, A) == angle(I, center(c), A) mod 360
By angle_to_center on D, E, C, Circle(C, D, E) we get 2 * angle(D, E, C) == angle(D, center(Circle(C, D, E)), C) mod 360
By angle_to_center on G, E, D, Circle(C, D, E) we get 2 * angle(G, E, D) == angle(G, center(Circle(C, D, E)), D) mod 360
By angle_to_center on G, D, E, Circle(C, D, E) we get 2 * angle(G, D, E) == angle(G, center(Circle(C, D, E)), E) mod 360
By angle_to_center on H, J, A, c we get 2 * angle(H, J, A) == angle(H, center(c), A) mod 360
By angle_to_center on A, J, H, c we get 2 * angle(A, J, H) == angle(A, center(c), H) mod 360
By angle_to_center on D, F, C, Circle(A, C, D) we get 2 * angle(D, F, C) == angle(D, center(Circle(A, C, D)), C) mod 360
By angle_to_center on J, A, H, c we get 2 * angle(J, A, H) == angle(J, center(c), H) mod 360
By angle_to_center on E, D, C, Circle(C, D, E) we get 2 * angle(E, D, C) == angle(E, center(Circle(C, D, E)), C) mod 360
By angle_to_center on D, E, G, Circle(C, D, E) we get 2 * angle(D, E, G) == angle(D, center(Circle(C, D, E)), G) mod 360
By angle_to_center on E, C, D, Circle(C, D, E) we get 2 * angle(E, C, D) == angle(E, center(Circle(C, D, E)), D) mod 360
By angle_to_center on J, A, I, c we get 2 * angle(J, A, I) == angle(J, center(c), I) mod 360
By angle_to_center on I, J, H, c we get 2 * angle(I, J, H) == angle(I, center(c), H) mod 360
By angle_to_center on I, H, J, c we get 2 * angle(I, H, J) == angle(I, center(c), J) mod 360
By angle_to_center on H, J, I, c we get 2 * angle(H, J, I) == angle(H, center(c), I) mod 360
By same_angle_v0 on F, G, H, B we get angle(G, F, B) == angle(H, F, B) mod 360
By angle_to_center on A, I, H, c we get 2 * angle(A, I, H) == angle(A, center(c), H) mod 360
By angle_to_center on A, J, I, c we get 2 * angle(A, J, I) == angle(A, center(c), I) mod 360
By angle_to_center on D, C, E, Circle(C, D, E) we get 2 * angle(D, C, E) == angle(D, center(Circle(C, D, E)), E) mod 360
By angle_to_center on I, A, J, c we get 2 * angle(I, A, J) == angle(I, center(c), J) mod 360
By angle_to_center on C, E, D, Circle(C, D, E) we get 2 * angle(C, E, D) == angle(C, center(Circle(C, D, E)), D) mod 360
By angle_to_center on J, H, A, c we get 2 * angle(J, H, A) == angle(J, center(c), A) mod 360
By angle_to_center on I, A, H, c we get 2 * angle(I, A, H) == angle(I, center(c), H) mod 360
By angle_to_center on H, I, J, c we get 2 * angle(H, I, J) == angle(H, center(c), J) mod 360
By angle_to_center on D, G, E, Circle(C, D, E) we get 2 * angle(D, G, E) == angle(D, center(Circle(C, D, E)), E) mod 360
By same_angle_v0 on H, K, J, I we get angle(J, H, I) == angle(K, H, I) mod 360
By angle_to_center on C, D, E, Circle(C, D, E) we get 2 * angle(C, D, E) == angle(C, center(Circle(C, D, E)), E) mod 360
By same_angle_v2 on K, G, H, I we get angle(G, K, I) == angle(H, K, I) + 180 mod 360
By same_angle_v0 on H, K, G, A we get angle(G, H, A) == angle(K, H, A) mod 360
By same_angle_v3 on H, C, K, D we get angle(C, H, D) == angle(K, H, D) + 180 mod 360
By same_angle_v1 on H, G, F, D we get angle(F, H, D) == angle(G, H, D) mod 360
By same_angle_v3 on F, H, J, B we get angle(H, F, B) == angle(J, F, B) + 180 mod 360
By same_angle_v0 on H, G, F, E we get angle(F, H, E) == angle(G, H, E) mod 360
By same_angle_v2 on H, K, C, A we get angle(K, H, A) == angle(C, H, A) + 180 mod 360
By same_angle_v0 on K, H, C, D we get angle(C, K, D) == angle(H, K, D) mod 360
By same_angle_v0 on F, H, C, D we get angle(C, F, D) == angle(H, F, D) mod 360
By same_angle_v0 on H, G, F, I we get angle(F, H, I) == angle(G, H, I) mod 360
By same_angle_v0 on H, K, J, A we get angle(J, H, A) == angle(K, H, A) mod 360
By same_angle_v3 on H, F, C, I we get angle(F, H, I) == angle(C, H, I) + 180 mod 360
By same_angle_v3 on K, I, D, H we get angle(I, K, H) == angle(D, K, H) + 180 mod 360
By same_angle_v3 on F, J, H, I we get angle(J, F, I) == angle(H, F, I) + 180 mod 360
By same_angle_v2 on K, F, H, I we get angle(F, K, I) == angle(H, K, I) + 180 mod 360
By same_angle_v1 on F, K, H, A we get angle(H, F, A) == angle(K, F, A) mod 360
By same_angle_v2 on F, J, H, A we get angle(J, F, A) == angle(H, F, A) + 180 mod 360
By same_angle_v0 on F, H, K, B we get angle(H, F, B) == angle(K, F, B) mod 360
By same_angle_v1 on F, G, H, I we get angle(G, F, I) == angle(H, F, I) mod 360
By same_angle_v1 on F, H, C, A we get angle(C, F, A) == angle(H, F, A) mod 360
By same_angle_v1 on F, H, G, A we get angle(G, F, A) == angle(H, F, A) mod 360
By perpendicular_direction_conditions_v0_r on H, K, A, B we get 180 == 2 * direction(H, K) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on K, H, A, F we get 180 == 2 * direction(K, H) - 2 * direction(A, F) mod 360
By same_angle_v3 on H, F, C, A we get angle(F, H, A) == angle(C, H, A) + 180 mod 360
By same_angle_v1 on H, G, K, D we get angle(G, H, D) == angle(K, H, D) mod 360
By perpendicular_direction_conditions_v0_r on K, H, F, A we get 180 == 2 * direction(K, H) - 2 * direction(F, A) mod 360
By same_angle_v1 on K, H, C, I we get angle(C, K, I) == angle(H, K, I) mod 360
By same_angle_v0 on H, K, G, I we get angle(G, H, I) == angle(K, H, I) mod 360
By same_angle_v2 on F, A, B, H we get angle(A, F, H) == angle(B, F, H) + 180 mod 360
By same_angle_v2 on K, H, J, D we get angle(H, K, D) == angle(J, K, D) + 180 mod 360
By same_angle_v0 on H, F, J, E we get angle(F, H, E) == angle(J, H, E) mod 360
By same_angle_v1 on F, K, H, I we get angle(H, F, I) == angle(K, F, I) mod 360
By probably_between_and_collinear_implies_between on H, F, J we get between(H, F, J)
By same_angle_v0 on F, H, K, D we get angle(H, F, D) == angle(K, F, D) mod 360
By same_angle_v1 on F, H, C, I we get angle(C, F, I) == angle(H, F, I) mod 360
By same_angle_v2 on K, J, H, I we get angle(J, K, I) == angle(H, K, I) + 180 mod 360
By same_angle_v0 on H, G, K, E we get angle(G, H, E) == angle(K, H, E) mod 360
By anti_similar_triangle_basic_properties on C, G, E, B, G, F we get angle(C, G, E) == 0 - angle(B, G, F) mod 360, angle(G, E, C) == 0 - angle(G, F, B) mod 360, angle(E, C, G) == 0 - angle(F, B, G) mod 360, log(distance(B, G)) + log(distance(E, G)) == log(distance(C, G)) + log(distance(F, G)), log(distance(E, G)) + log(distance(B, F)) == log(distance(F, G)) + log(distance(C, E)), log(distance(B, F)) + log(distance(C, G)) == log(distance(C, E)) + log(distance(B, G))
By same_angle_v0 on F, G, H, D we get angle(G, F, D) == angle(H, F, D) mod 360
By same_angle_v3 on H, C, F, D we get angle(C, H, D) == angle(F, H, D) + 180 mod 360
By perpendicular_direction_conditions_v0_r on A, F, H, F we get 180 == 2 * direction(A, F) - 2 * direction(H, F) mod 360
By same_angle_v0 on F, C, H, B we get angle(C, F, B) == angle(H, F, B) mod 360
By same_angle_v2 on H, K, C, I we get angle(K, H, I) == angle(C, H, I) + 180 mod 360
By perpendicular_direction_conditions_v0_r on H, F, A, B we get 180 == 2 * direction(H, F) - 2 * direction(A, B) mod 360
By same_angle_v1 on H, J, F, D we get angle(F, H, D) == angle(J, H, D) mod 360
By same_angle_v0 on H, G, F, A we get angle(F, H, A) == angle(G, H, A) mod 360
By same_angle_v2 on K, H, F, D we get angle(H, K, D) == angle(F, K, D) + 180 mod 360
By same_angle_v0 on H, J, K, E we get angle(J, H, E) == angle(K, H, E) mod 360
By same_angle_v2 on F, H, J, D we get angle(H, F, D) == angle(J, F, D) + 180 mod 360
By perpendicular_direction_conditions_v0_r on A, F, K, H we get 180 == 2 * direction(A, F) - 2 * direction(K, H) mod 360
By perpendicular_direction_conditions_v0_r on A, B, H, K we get 180 == 2 * direction(A, B) - 2 * direction(H, K) mod 360
By perpendicular_direction_conditions_v0_r on F, A, F, H we get 180 == 2 * direction(F, A) - 2 * direction(F, H) mod 360
By perpendicular_direction_conditions_v0_r on F, B, K, H we get 180 == 2 * direction(F, B) - 2 * direction(K, H) mod 360
By sss_anti_similarity_v0 on C, A, G, D, I, H we get anti_similar_triangles(A, C, G, I, D, H)
By perpendicular_direction_conditions_v0_r on K, H, B, F we get 180 == 2 * direction(K, H) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on F, B, F, H we get 180 == 2 * direction(F, B) - 2 * direction(F, H) mod 360
By perpendicular_direction_conditions_v0_r on H, F, F, B we get 180 == 2 * direction(H, F) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on B, A, H, F we get 180 == 2 * direction(B, A) - 2 * direction(H, F) mod 360
By perpendicular_direction_conditions_v0_r on H, F, A, F we get 180 == 2 * direction(H, F) - 2 * direction(A, F) mod 360
By probably_between_and_collinear_implies_between on H, K, F we get between(F, K, H)
By perpendicular_direction_conditions_v0_r on A, F, H, K we get 180 == 2 * direction(A, F) - 2 * direction(H, K) mod 360
By perpendicular_direction_conditions_v0_r on F, A, K, H we get 180 == 2 * direction(F, A) - 2 * direction(K, H) mod 360
By perpendicular_direction_conditions_v0_r on K, H, A, B we get 180 == 2 * direction(K, H) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on A, B, H, F we get 180 == 2 * direction(A, B) - 2 * direction(H, F) mod 360
By perpendicular_direction_conditions_v0_r on B, F, F, H we get 180 == 2 * direction(B, F) - 2 * direction(F, H) mod 360
By perpendicular_direction_conditions_v0_r on H, K, B, F we get 180 == 2 * direction(H, K) - 2 * direction(B, F) mod 360
By same_angle_v3 on H, K, C, E we get angle(K, H, E) == angle(C, H, E) + 180 mod 360
By perpendicular_direction_conditions_v0_r on F, B, H, F we get 180 == 2 * direction(F, B) - 2 * direction(H, F) mod 360
By perpendicular_direction_conditions_v0_r on F, H, B, A we get 180 == 2 * direction(F, H) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on F, H, F, A we get 180 == 2 * direction(F, H) - 2 * direction(F, A) mod 360
By probably_between_and_collinear_implies_between on H, G, J we get between(H, G, J)
By perpendicular_direction_conditions_v0_r on H, F, B, A we get 180 == 2 * direction(H, F) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on F, H, A, B we get 180 == 2 * direction(F, H) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on F, A, H, K we get 180 == 2 * direction(F, A) - 2 * direction(H, K) mod 360
By perpendicular_direction_conditions_v0_r on B, F, H, F we get 180 == 2 * direction(B, F) - 2 * direction(H, F) mod 360
By perpendicular_direction_conditions_v0_r on B, F, H, K we get 180 == 2 * direction(B, F) - 2 * direction(H, K) mod 360
By perpendicular_direction_conditions_v0_r on H, K, F, B we get 180 == 2 * direction(H, K) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on B, A, H, K we get 180 == 2 * direction(B, A) - 2 * direction(H, K) mod 360
By perpendicular_direction_conditions_v0_r on A, B, F, H we get 180 == 2 * direction(A, B) - 2 * direction(F, H) mod 360
By perpendicular_direction_conditions_v0_r on B, A, K, H we get 180 == 2 * direction(B, A) - 2 * direction(K, H) mod 360
By perpendicular_direction_conditions_v0_r on F, H, F, B we get 180 == 2 * direction(F, H) - 2 * direction(F, B) mod 360
By aa_anti_similarity on G, C, A, H, D, I we get anti_similar_triangles(A, C, G, I, D, H)
By perpendicular_direction_conditions_v0_r on F, A, H, F we get 180 == 2 * direction(F, A) - 2 * direction(H, F) mod 360
By perpendicular_direction_conditions_v0_r on H, K, A, F we get 180 == 2 * direction(H, K) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on F, B, H, K we get 180 == 2 * direction(F, B) - 2 * direction(H, K) mod 360
By perpendicular_direction_conditions_v0_r on H, K, F, A we get 180 == 2 * direction(H, K) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on F, H, B, F we get 180 == 2 * direction(F, H) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on H, F, F, A we get 180 == 2 * direction(H, F) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on A, B, K, H we get 180 == 2 * direction(A, B) - 2 * direction(K, H) mod 360
By perpendicular_direction_conditions_v0_r on B, A, F, H we get 180 == 2 * direction(B, A) - 2 * direction(F, H) mod 360
By perpendicular_direction_conditions_v0_r on H, F, B, F we get 180 == 2 * direction(H, F) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on K, H, F, B we get 180 == 2 * direction(K, H) - 2 * direction(F, B) mod 360
By sss_anti_similarity_v1 on H, D, I, H, C, I we get anti_similar_triangles(C, H, I, D, H, I)
By perpendicular_direction_conditions_v0_r on K, H, B, A we get 180 == 2 * direction(K, H) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on F, H, A, F we get 180 == 2 * direction(F, H) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on H, K, B, A we get 180 == 2 * direction(H, K) - 2 * direction(B, A) mod 360
By probably_between_and_collinear_implies_between on C, H, K we get between(C, H, K)
By perpendicular_direction_conditions_v0_r on A, F, F, H we get 180 == 2 * direction(A, F) - 2 * direction(F, H) mod 360
By perpendicular_direction_conditions_v0_r on B, F, K, H we get 180 == 2 * direction(B, F) - 2 * direction(K, H) mod 360
By internal_angle_bisector_definition_v0 on F, H, C, J we get angle(F, J, H) == angle(H, J, C) mod 360
By sss_anti_similarity_v0 on C, I, H, D, I, H we get anti_similar_triangles(C, H, I, D, H, I)
By probably_between_and_collinear_implies_between on C, H, J we get between(C, H, J)
By probably_between_and_collinear_implies_between on F, G, H we get between(F, G, H)
By probably_between_and_collinear_implies_between on G, K, H we get between(G, K, H)
By probably_between_and_collinear_implies_between on J, K, H we get between(H, K, J)
By sss_anti_similarity_v0 on I, D, H, A, C, G we get anti_similar_triangles(A, C, G, I, D, H)
By sss_anti_congruence_v0 on I, D, H, I, C, H we get anti_congruent_triangles(C, H, I, D, H, I)
By similar_triangle_basic_properties on B, A, D, G, C, D we get angle(B, A, D) == angle(G, C, D) mod 360, angle(A, D, B) == angle(C, D, G) mod 360, angle(D, B, A) == angle(D, G, C) mod 360, log(distance(A, B)) + log(distance(C, D)) == log(distance(C, G)) + log(distance(A, D)), log(distance(A, D)) + log(distance(D, G)) == log(distance(C, D)) + log(distance(B, D)), log(distance(B, D)) + log(distance(C, G)) == log(distance(D, G)) + log(distance(A, B))
By sss_anti_congruence_v0 on H, C, I, H, D, I we get anti_congruent_triangles(C, H, I, D, H, I)
By sss_anti_congruence_v1 on H, I, C, H, I, D we get anti_congruent_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v1 on D, I, H, C, I, H we get anti_similar_triangles(C, H, I, D, H, I)
By tangent_chord_angle_v0 on E, B, A, H we get tangent(Line(E, H), Circle(A, B, E))
By sss_anti_similarity_v0 on H, I, D, H, I, C we get anti_similar_triangles(C, H, I, D, H, I)
By anti_similar_triangle_basic_properties on C, G, D, C, B, F we get angle(C, G, D) == 0 - angle(C, B, F) mod 360, angle(G, D, C) == 0 - angle(B, F, C) mod 360, angle(D, C, G) == 0 - angle(F, C, B) mod 360, log(distance(B, C)) + log(distance(D, G)) == log(distance(C, G)) + log(distance(B, F)), log(distance(B, F)) + log(distance(C, D)) == log(distance(D, G)) + log(distance(C, F)), log(distance(C, D)) + log(distance(B, C)) == log(distance(C, F)) + log(distance(C, G))
By internal_angle_bisector_definition_v0 on C, J, C, H we get angle(C, H, J) == angle(J, H, C) mod 360
By sss_anti_congruence_v1 on C, H, I, D, H, I we get anti_congruent_triangles(C, H, I, D, H, I)
By similar_triangle_basic_properties on B, F, C, G, F, A we get angle(B, F, C) == angle(G, F, A) mod 360, angle(F, A, G) == angle(F, C, B) mod 360, angle(A, G, F) == angle(C, B, F) mod 360, log(distance(B, F)) + log(distance(A, F)) == log(distance(F, G)) + log(distance(C, F)), log(distance(A, F)) + log(distance(B, C)) == log(distance(C, F)) + log(distance(A, G)), log(distance(A, G)) + log(distance(B, F)) == log(distance(B, C)) + log(distance(F, G))
By between_imply_segment_sum on C, G, F we get distance(C, F) == distance(C, G) + distance(F, G)
By probably_between_and_collinear_implies_between on C, H, F we get between(C, H, F)
By sas_anti_similarity on H, I, C, H, I, D we get anti_similar_triangles(C, H, I, D, H, I)
By sss_anti_congruence_v0 on I, H, C, I, H, D we get anti_congruent_triangles(C, H, I, D, H, I)
By anti_similar_triangle_basic_properties on I, F, C, H, E, C we get angle(I, F, C) == 0 - angle(H, E, C) mod 360, angle(F, C, I) == 0 - angle(E, C, H) mod 360, angle(C, I, F) == 0 - angle(C, H, E) mod 360, log(distance(E, H)) + log(distance(C, F)) == log(distance(F, I)) + log(distance(C, E)), log(distance(C, E)) + log(distance(C, I)) == log(distance(C, F)) + log(distance(C, H)), log(distance(C, H)) + log(distance(F, I)) == log(distance(C, I)) + log(distance(E, H))
By tangent_chord_angle_v1 on D, B, A, H we get tangent(Line(D, H), Circle(A, B, D))
By sas_anti_similarity on I, H, C, F, G, D we get anti_similar_triangles(C, H, I, D, G, F)
By sss_anti_congruence_v1 on I, H, D, I, H, C we get anti_congruent_triangles(C, H, I, D, H, I)
By anti_similar_triangle_basic_properties on E, G, H, F, A, I we get angle(E, G, H) == 0 - angle(F, A, I) mod 360, angle(G, H, E) == 0 - angle(A, I, F) mod 360, angle(H, E, G) == 0 - angle(I, F, A) mod 360, log(distance(A, F)) + log(distance(G, H)) == log(distance(E, G)) + log(distance(A, I)), log(distance(A, I)) + log(distance(E, H)) == log(distance(G, H)) + log(distance(F, I)), log(distance(E, H)) + log(distance(A, F)) == log(distance(F, I)) + log(distance(E, G))
By in_imply_collinear on midpoint(C, D), I, H we get collinear(H, I, midpoint(C, D))
By parallel_line_angles_reverse_v2 on G, D, H, I we get angle(G, D, H) == angle(I, H, D) + 180 mod 360
By collinear_definition on H, G, J we get G in Line(H, J), J in Line(G, H), Line(G, H) == Line(H, J), 0 == 2 * angle(G, H, J) mod 360
By similar_triangle_basic_properties on C, G, D, A, B, D we get angle(A, B, D) == angle(C, G, D) mod 360, angle(B, D, A) == angle(G, D, C) mod 360, angle(D, A, B) == angle(D, C, G) mod 360, log(distance(A, B)) + log(distance(D, G)) == log(distance(C, G)) + log(distance(B, D)), log(distance(B, D)) + log(distance(C, D)) == log(distance(D, G)) + log(distance(A, D)), log(distance(A, D)) + log(distance(C, G)) == log(distance(C, D)) + log(distance(A, B))
By sss_anti_congruence_v1 on I, H, D, I, H, C we get anti_congruent_triangles(C, H, I, D, H, I)
By sss_anti_congruence_v0 on H, C, I, H, D, I we get anti_congruent_triangles(C, H, I, D, H, I)
By aa_anti_similarity on H, D, I, G, C, A we get anti_similar_triangles(A, C, G, I, D, H)
By between_imply_segment_sum on G, F, J we get distance(G, J) == distance(F, G) + distance(F, J)
By sss_anti_similarity_v0 on C, I, H, D, I, H we get anti_similar_triangles(C, H, I, D, H, I)
By parallel_line_angles_reverse_v3 on I, H, D, A we get angle(I, H, D) == angle(A, D, H) + 180 mod 360
By similar_triangle_basic_properties on G, C, E, A, B, E we get angle(A, B, E) == angle(G, C, E) mod 360, angle(B, E, A) == angle(C, E, G) mod 360, angle(E, A, B) == angle(E, G, C) mod 360, log(distance(A, B)) + log(distance(C, E)) == log(distance(C, G)) + log(distance(B, E)), log(distance(B, E)) + log(distance(E, G)) == log(distance(C, E)) + log(distance(A, E)), log(distance(A, E)) + log(distance(C, G)) == log(distance(E, G)) + log(distance(A, B))
By anti_similar_triangle_basic_properties on G, C, E, A, C, F we get angle(G, C, E) == 0 - angle(A, C, F) mod 360, angle(C, E, G) == 0 - angle(C, F, A) mod 360, angle(E, G, C) == 0 - angle(F, A, C) mod 360, log(distance(A, C)) + log(distance(C, E)) == log(distance(C, G)) + log(distance(C, F)), log(distance(C, E)) + log(distance(A, F)) == log(distance(C, F)) + log(distance(E, G)), log(distance(A, F)) + log(distance(C, G)) == log(distance(E, G)) + log(distance(A, C))
By collinear_definition on H, C, J we get C in Line(H, J), J in Line(C, H), Line(C, H) == Line(H, J), 0 == 2 * angle(C, H, J) mod 360
By internal_angle_bisector_definition_v0 on F, H, K, J we get angle(F, J, H) == angle(H, J, K) mod 360
By sss_anti_similarity_v1 on H, D, I, G, C, A we get anti_similar_triangles(A, C, G, I, D, H)
By sss_anti_similarity_v0 on H, I, D, H, I, C we get anti_similar_triangles(C, H, I, D, H, I)
By sas_anti_similarity on I, C, H, I, D, H we get anti_similar_triangles(C, H, I, D, H, I)
By anti_similar_triangle_basic_properties on B, F, G, C, E, G we get angle(B, F, G) == 0 - angle(C, E, G) mod 360, angle(F, G, B) == 0 - angle(E, G, C) mod 360, angle(G, B, F) == 0 - angle(G, C, E) mod 360, log(distance(B, F)) + log(distance(E, G)) == log(distance(C, E)) + log(distance(F, G)), log(distance(E, G)) + log(distance(B, G)) == log(distance(F, G)) + log(distance(C, G)), log(distance(B, G)) + log(distance(C, E)) == log(distance(C, G)) + log(distance(B, F))
By similar_triangle_basic_properties on F, A, I, G, E, H we get angle(F, A, I) == angle(G, E, H) mod 360, angle(A, I, F) == angle(E, H, G) mod 360, angle(H, G, E) == angle(I, F, A) mod 360, log(distance(A, F)) + log(distance(E, H)) == log(distance(E, G)) + log(distance(A, I)), log(distance(A, I)) + log(distance(G, H)) == log(distance(E, H)) + log(distance(F, I)), log(distance(F, I)) + log(distance(E, G)) == log(distance(G, H)) + log(distance(A, F))
By sss_anti_congruence_v0 on I, H, C, I, H, D we get anti_congruent_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v1 on D, I, H, C, A, G we get anti_similar_triangles(A, C, G, I, D, H)
By similar_triangle_basic_properties on F, C, A, F, B, G we get angle(F, B, G) == angle(F, C, A) mod 360, angle(B, G, F) == angle(C, A, F) mod 360, angle(A, F, C) == angle(G, F, B) mod 360, log(distance(B, F)) + log(distance(A, C)) == log(distance(C, F)) + log(distance(B, G)), log(distance(A, C)) + log(distance(F, G)) == log(distance(B, G)) + log(distance(A, F)), log(distance(A, F)) + log(distance(B, F)) == log(distance(F, G)) + log(distance(C, F))
By sas_anti_similarity on A, C, B, D, C, E we get anti_similar_triangles(A, B, C, D, E, C)
By sas_anti_similarity on C, A, G, D, I, H we get anti_similar_triangles(A, C, G, I, D, H)
By internal_angle_bisector_definition_v0 on K, H, C, J we get angle(H, J, C) == angle(K, J, H) mod 360
By reverse_direction on E, D we get 180 == direction(E, D) - direction(D, E) mod 360
By sss_anti_congruence_v0 on I, H, C, I, H, D we get anti_congruent_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v1 on D, I, H, C, A, G we get anti_similar_triangles(A, C, G, I, D, H)
By sss_anti_similarity_v1 on D, I, H, C, A, G we get anti_similar_triangles(A, C, G, I, D, H)
By anti_similar_triangle_basic_properties on H, G, E, I, A, F we get angle(H, G, E) == 0 - angle(I, A, F) mod 360, angle(G, E, H) == 0 - angle(A, F, I) mod 360, angle(E, H, G) == 0 - angle(F, I, A) mod 360, log(distance(A, I)) + log(distance(E, G)) == log(distance(G, H)) + log(distance(A, F)), log(distance(A, F)) + log(distance(E, H)) == log(distance(E, G)) + log(distance(F, I)), log(distance(E, H)) + log(distance(A, I)) == log(distance(F, I)) + log(distance(G, H))
By sss_anti_congruence_v1 on I, C, H, I, D, H we get anti_congruent_triangles(C, H, I, D, H, I)
By internal_angle_bisector_definition_v0 on K, H, K, J we get angle(H, J, K) == angle(K, J, H) mod 360
By anti_similar_triangle_basic_properties on A, B, D, A, G, F we get angle(A, B, D) == 0 - angle(A, G, F) mod 360, angle(B, D, A) == 0 - angle(G, F, A) mod 360, angle(D, A, B) == 0 - angle(F, A, G) mod 360, log(distance(A, B)) + log(distance(F, G)) == log(distance(A, G)) + log(distance(B, D)), log(distance(B, D)) + log(distance(A, F)) == log(distance(F, G)) + log(distance(A, D)), log(distance(A, D)) + log(distance(A, G)) == log(distance(A, F)) + log(distance(A, B))
By sss_anti_similarity_v0 on H, C, I, H, D, I we get anti_similar_triangles(C, H, I, D, H, I)
By similar_triangle_basic_properties on A, E, B, G, E, C we get angle(A, E, B) == angle(G, E, C) mod 360, angle(E, B, A) == angle(E, C, G) mod 360, angle(B, A, E) == angle(C, G, E) mod 360, log(distance(A, E)) + log(distance(C, E)) == log(distance(E, G)) + log(distance(B, E)), log(distance(B, E)) + log(distance(C, G)) == log(distance(C, E)) + log(distance(A, B)), log(distance(A, B)) + log(distance(E, G)) == log(distance(C, G)) + log(distance(A, E))
By anti_similar_triangle_basic_properties on C, E, H, C, F, I we get angle(C, E, H) == 0 - angle(C, F, I) mod 360, angle(E, H, C) == 0 - angle(F, I, C) mod 360, angle(H, C, E) == 0 - angle(I, C, F) mod 360, log(distance(C, E)) + log(distance(F, I)) == log(distance(C, F)) + log(distance(E, H)), log(distance(E, H)) + log(distance(C, I)) == log(distance(F, I)) + log(distance(C, H)), log(distance(C, H)) + log(distance(C, F)) == log(distance(C, I)) + log(distance(C, E))
By sss_anti_similarity_v1 on I, H, D, I, H, C we get anti_similar_triangles(C, H, I, D, H, I)
By anti_similar_triangle_basic_properties on C, F, B, C, D, G we get angle(C, F, B) == 0 - angle(C, D, G) mod 360, angle(F, B, C) == 0 - angle(D, G, C) mod 360, angle(B, C, F) == 0 - angle(G, C, D) mod 360, log(distance(C, D)) + log(distance(B, F)) == log(distance(C, F)) + log(distance(D, G)), log(distance(B, F)) + log(distance(C, G)) == log(distance(D, G)) + log(distance(B, C)), log(distance(B, C)) + log(distance(C, D)) == log(distance(C, G)) + log(distance(C, F))
By sss_anti_similarity_v0 on H, C, I, H, D, I we get anti_similar_triangles(C, H, I, D, H, I)
By sas_anti_similarity on D, I, H, C, I, H we get anti_similar_triangles(C, H, I, D, H, I)
By collinear_definition on J, H, F we get H in Line(F, J), F in Line(H, J), Line(F, J) == Line(H, J), 0 == 2 * angle(H, J, F) mod 360
By sas_similarity on G, H, D, F, I, D we get similar_triangles(D, F, I, D, G, H)
By sss_anti_congruence_v1 on D, I, H, C, I, H we get anti_congruent_triangles(C, H, I, D, H, I)
By similar_triangle_basic_properties on E, C, H, C, F, I we get angle(C, F, I) == angle(E, C, H) mod 360, angle(C, H, E) == angle(F, I, C) mod 360, angle(H, E, C) == angle(I, C, F) mod 360, log(distance(C, E)) + log(distance(F, I)) == log(distance(C, F)) + log(distance(C, H)), log(distance(C, H)) + log(distance(C, I)) == log(distance(F, I)) + log(distance(E, H)), log(distance(C, I)) + log(distance(C, E)) == log(distance(E, H)) + log(distance(C, F))
By sss_anti_similarity_v1 on H, I, C, H, I, D we get anti_similar_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v0 on H, I, D, G, A, C we get anti_similar_triangles(A, C, G, I, D, H)
By sas_anti_similarity on G, B, C, D, B, E we get anti_similar_triangles(B, C, G, B, E, D)
By parallel_line_angles_reverse_v2 on A, D, H, I we get angle(A, D, H) == angle(I, H, D) + 180 mod 360
By sas_anti_similarity on D, C, E, A, C, B we get anti_similar_triangles(A, B, C, D, E, C)
By between_imply_segment_sum on K, G, F we get distance(F, K) == distance(G, K) + distance(F, G)
By sss_anti_similarity_v0 on I, H, C, I, H, D we get anti_similar_triangles(C, H, I, D, H, I)
By internal_angle_bisector_definition_v0 on C, H, C, J we get angle(C, J, H) == angle(H, J, C) mod 360
By similar_triangle_basic_properties on G, H, E, F, I, A we get angle(F, I, A) == angle(G, H, E) mod 360, angle(H, E, G) == angle(I, A, F) mod 360, angle(A, F, I) == angle(E, G, H) mod 360, log(distance(F, I)) + log(distance(E, H)) == log(distance(G, H)) + log(distance(A, I)), log(distance(A, I)) + log(distance(E, G)) == log(distance(E, H)) + log(distance(A, F)), log(distance(A, F)) + log(distance(G, H)) == log(distance(E, G)) + log(distance(F, I))
By sss_anti_similarity_v1 on A, C, G, I, D, H we get anti_similar_triangles(A, C, G, I, D, H)
By sss_anti_similarity_v0 on D, H, I, C, G, A we get anti_similar_triangles(A, C, G, I, D, H)
By sas_anti_similarity on H, I, D, H, I, C we get anti_similar_triangles(C, H, I, D, H, I)
By anti_similar_triangle_basic_properties on G, A, F, B, A, D we get angle(G, A, F) == 0 - angle(B, A, D) mod 360, angle(A, F, G) == 0 - angle(A, D, B) mod 360, angle(F, G, A) == 0 - angle(D, B, A) mod 360, log(distance(A, B)) + log(distance(A, F)) == log(distance(A, G)) + log(distance(A, D)), log(distance(A, D)) + log(distance(F, G)) == log(distance(A, F)) + log(distance(B, D)), log(distance(B, D)) + log(distance(A, G)) == log(distance(F, G)) + log(distance(A, B))
By sss_anti_similarity_v0 on C, A, G, D, I, H we get anti_similar_triangles(A, C, G, I, D, H)
By anti_similar_triangle_basic_properties on G, A, F, G, C, D we get angle(G, A, F) == 0 - angle(G, C, D) mod 360, angle(A, F, G) == 0 - angle(C, D, G) mod 360, angle(F, G, A) == 0 - angle(D, G, C) mod 360, log(distance(A, G)) + log(distance(C, D)) == log(distance(C, G)) + log(distance(A, F)), log(distance(A, F)) + log(distance(D, G)) == log(distance(C, D)) + log(distance(F, G)), log(distance(D, G)) + log(distance(A, G)) == log(distance(F, G)) + log(distance(C, G))
By sss_anti_similarity_v0 on C, I, H, D, I, H we get anti_similar_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v0 on I, D, H, I, C, H we get anti_similar_triangles(C, H, I, D, H, I)
By anti_similar_triangle_basic_properties on F, B, G, E, B, A we get angle(F, B, G) == 0 - angle(E, B, A) mod 360, angle(B, G, F) == 0 - angle(B, A, E) mod 360, angle(G, F, B) == 0 - angle(A, E, B) mod 360, log(distance(B, E)) + log(distance(B, G)) == log(distance(B, F)) + log(distance(A, B)), log(distance(A, B)) + log(distance(F, G)) == log(distance(B, G)) + log(distance(A, E)), log(distance(A, E)) + log(distance(B, F)) == log(distance(F, G)) + log(distance(B, E))
By anti_similar_triangle_basic_properties on G, D, C, G, F, A we get angle(G, D, C) == 0 - angle(G, F, A) mod 360, angle(D, C, G) == 0 - angle(F, A, G) mod 360, angle(C, G, D) == 0 - angle(A, G, F) mod 360, log(distance(D, G)) + log(distance(A, F)) == log(distance(F, G)) + log(distance(C, D)), log(distance(A, F)) + log(distance(C, G)) == log(distance(C, D)) + log(distance(A, G)), log(distance(A, G)) + log(distance(D, G)) == log(distance(C, G)) + log(distance(F, G))
By sss_anti_congruence_v0 on H, I, D, H, I, C we get anti_congruent_triangles(C, H, I, D, H, I)
By sas_anti_congruence on H, C, I, H, D, I we get anti_congruent_triangles(C, H, I, D, H, I)
By sas_anti_similarity on G, C, A, H, D, I we get anti_similar_triangles(A, C, G, I, D, H)
By sss_anti_similarity_v1 on D, I, H, C, I, H we get anti_similar_triangles(C, H, I, D, H, I)
By anti_similar_triangle_basic_properties on A, F, C, G, E, C we get angle(A, F, C) == 0 - angle(G, E, C) mod 360, angle(F, C, A) == 0 - angle(E, C, G) mod 360, angle(C, A, F) == 0 - angle(C, G, E) mod 360, log(distance(A, F)) + log(distance(C, E)) == log(distance(E, G)) + log(distance(C, F)), log(distance(C, E)) + log(distance(A, C)) == log(distance(C, F)) + log(distance(C, G)), log(distance(A, C)) + log(distance(E, G)) == log(distance(C, G)) + log(distance(A, F))
By sas_anti_similarity on G, A, C, E, A, D we get anti_similar_triangles(A, C, G, A, D, E)
By sas_anti_similarity on D, I, F, G, H, D we get anti_similar_triangles(D, F, I, G, D, H)
By similar_triangle_basic_properties on I, F, C, H, C, E we get angle(H, C, E) == angle(I, F, C) mod 360, angle(C, E, H) == angle(F, C, I) mod 360, angle(C, I, F) == angle(E, H, C) mod 360, log(distance(C, H)) + log(distance(C, F)) == log(distance(F, I)) + log(distance(C, E)), log(distance(C, E)) + log(distance(C, I)) == log(distance(C, F)) + log(distance(E, H)), log(distance(C, I)) + log(distance(C, H)) == log(distance(E, H)) + log(distance(F, I))
By sss_anti_similarity_v0 on D, H, I, C, H, I we get anti_similar_triangles(C, H, I, D, H, I)
By sss_anti_congruence_v0 on H, C, I, H, D, I we get anti_congruent_triangles(C, H, I, D, H, I)
By sss_anti_congruence_v0 on H, I, D, H, I, C we get anti_congruent_triangles(C, H, I, D, H, I)
By sas_anti_similarity on D, G, E, B, G, A we get anti_similar_triangles(A, B, G, E, D, G)
By internal_angle_bisector_definition_v0 on C, H, F, J we get angle(C, J, H) == angle(H, J, F) mod 360
By sss_anti_congruence_v0 on D, H, I, C, H, I we get anti_congruent_triangles(C, H, I, D, H, I)
By anti_similar_triangle_basic_properties on B, E, A, B, F, G we get angle(B, E, A) == 0 - angle(B, F, G) mod 360, angle(E, A, B) == 0 - angle(F, G, B) mod 360, angle(A, B, E) == 0 - angle(G, B, F) mod 360, log(distance(B, E)) + log(distance(F, G)) == log(distance(B, F)) + log(distance(A, E)), log(distance(A, E)) + log(distance(B, G)) == log(distance(F, G)) + log(distance(A, B)), log(distance(A, B)) + log(distance(B, F)) == log(distance(B, G)) + log(distance(B, E))
By sss_anti_congruence_v1 on H, D, I, H, C, I we get anti_congruent_triangles(C, H, I, D, H, I)
By sas_anti_similarity on H, D, I, G, C, A we get anti_similar_triangles(A, C, G, I, D, H)
By sss_anti_congruence_v0 on D, H, I, C, H, I we get anti_congruent_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v1 on H, D, I, H, C, I we get anti_similar_triangles(C, H, I, D, H, I)
By sas_anti_similarity on E, G, D, A, G, B we get anti_similar_triangles(A, B, G, E, D, G)
By sss_anti_similarity_v1 on D, I, H, C, I, H we get anti_similar_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v0 on C, A, G, D, I, H we get anti_similar_triangles(A, C, G, I, D, H)
By sas_anti_similarity on A, G, B, E, G, D we get anti_similar_triangles(A, B, G, E, D, G)
By sss_anti_congruence_v1 on I, C, H, I, D, H we get anti_congruent_triangles(C, H, I, D, H, I)
By sas_anti_similarity on D, A, E, C, I, H we get anti_similar_triangles(A, D, E, I, C, H)
By sas_similarity on F, I, D, G, H, D we get similar_triangles(D, F, I, D, G, H)
By sss_anti_similarity_v0 on I, D, H, I, C, H we get anti_similar_triangles(C, H, I, D, H, I)
By sss_anti_congruence_v0 on C, I, H, D, I, H we get anti_congruent_triangles(C, H, I, D, H, I)
By sas_anti_congruence on H, D, I, H, C, I we get anti_congruent_triangles(C, H, I, D, H, I)
By sas_anti_congruence on C, I, H, D, I, H we get anti_congruent_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v0 on I, D, H, I, C, H we get anti_similar_triangles(C, H, I, D, H, I)
By aa_anti_similarity on H, D, I, H, C, I we get anti_similar_triangles(C, H, I, D, H, I)
By sss_anti_congruence_v0 on H, I, D, H, I, C we get anti_congruent_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v1 on C, H, I, D, H, I we get anti_similar_triangles(C, H, I, D, H, I)
By sss_anti_congruence_v1 on H, D, I, H, C, I we get anti_congruent_triangles(C, H, I, D, H, I)
By sas_similarity on D, I, H, D, A, E we get similar_triangles(A, D, E, I, D, H)
By sss_anti_similarity_v0 on D, H, I, C, H, I we get anti_similar_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v1 on H, I, C, H, I, D we get anti_similar_triangles(C, H, I, D, H, I)
By sas_anti_similarity on E, A, D, G, A, C we get anti_similar_triangles(A, C, G, A, D, E)
By sss_anti_similarity_v0 on C, I, H, D, I, H we get anti_similar_triangles(C, H, I, D, H, I)
By asa_anti_congruence on I, C, H, I, D, H we get anti_congruent_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v0 on C, I, H, D, I, H we get anti_similar_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v1 on C, H, I, D, H, I we get anti_similar_triangles(C, H, I, D, H, I)
By sas_anti_similarity on I, D, H, A, C, G we get anti_similar_triangles(A, C, G, I, D, H)
By aa_anti_similarity on H, E, D, H, D, E we get anti_similar_triangles(D, E, H, E, D, H)
By sss_anti_congruence_v1 on I, C, H, I, D, H we get anti_congruent_triangles(C, H, I, D, H, I)
By collinear_definition on J, F, H we get F in Line(H, J), H in Line(F, J), Line(F, J) == Line(H, J), 0 == 2 * angle(F, J, H) mod 360
By internal_angle_bisector_definition_v0 on G, J, G, H we get angle(G, H, J) == angle(J, H, G) mod 360
By sas_similarity on D, A, E, D, I, H we get similar_triangles(A, D, E, I, D, H)
By between_imply_segment_sum on J, G, C we get distance(C, J) == distance(G, J) + distance(C, G)
By sas_anti_similarity on D, G, F, C, G, A we get anti_similar_triangles(A, C, G, F, D, G)
By sss_anti_congruence_v1 on H, D, I, H, C, I we get anti_congruent_triangles(C, H, I, D, H, I)
By sss_anti_congruence_v1 on D, I, H, C, I, H we get anti_congruent_triangles(C, H, I, D, H, I)
By sss_anti_congruence_v1 on I, C, H, I, D, H we get anti_congruent_triangles(C, H, I, D, H, I)
By similar_triangle_basic_properties on C, F, A, B, F, G we get angle(B, F, G) == angle(C, F, A) mod 360, angle(F, A, C) == angle(F, G, B) mod 360, angle(A, C, F) == angle(G, B, F) mod 360, log(distance(B, F)) + log(distance(A, F)) == log(distance(C, F)) + log(distance(F, G)), log(distance(A, F)) + log(distance(B, G)) == log(distance(F, G)) + log(distance(A, C)), log(distance(A, C)) + log(distance(B, F)) == log(distance(B, G)) + log(distance(C, F))
By sas_anti_similarity on E, B, D, C, B, G we get anti_similar_triangles(B, C, G, B, E, D)
By parallel_line_angles_reverse_v3 on I, H, D, G we get angle(I, H, D) == angle(G, D, H) + 180 mod 360
By sss_anti_similarity_v0 on H, I, D, G, A, C we get anti_similar_triangles(A, C, G, I, D, H)
By sss_anti_similarity_v0 on I, H, C, I, H, D we get anti_similar_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v1 on H, I, C, H, I, D we get anti_similar_triangles(C, H, I, D, H, I)
By sas_anti_congruence on D, I, H, C, I, H we get anti_congruent_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v1 on A, C, G, I, D, H we get anti_similar_triangles(A, C, G, I, D, H)
By sss_anti_similarity_v1 on D, I, H, C, A, G we get anti_similar_triangles(A, C, G, I, D, H)
By collinear_definition on J, C, H we get C in Line(H, J), H in Line(C, J), Line(C, J) == Line(H, J), 0 == 2 * angle(C, J, H) mod 360
By sss_anti_congruence_v1 on I, H, D, I, H, C we get anti_congruent_triangles(C, H, I, D, H, I)
By sas_anti_congruence on I, C, H, I, D, H we get anti_congruent_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v0 on H, C, I, H, D, I we get anti_similar_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v0 on D, H, I, C, G, A we get anti_similar_triangles(A, C, G, I, D, H)
By collinear_definition on J, H, G we get H in Line(G, J), G in Line(H, J), Line(G, J) == Line(H, J), 0 == 2 * angle(H, J, G) mod 360
By reverse_direction on D, F we get 180 == direction(D, F) - direction(F, D) mod 360
By sss_anti_similarity_v0 on H, I, D, H, I, C we get anti_similar_triangles(C, H, I, D, H, I)
By sss_anti_congruence_v1 on D, I, H, C, I, H we get anti_congruent_triangles(C, H, I, D, H, I)
By sas_anti_similarity on B, C, A, E, C, D we get anti_similar_triangles(A, B, C, D, E, C)
By sss_anti_similarity_v1 on I, H, D, I, H, C we get anti_similar_triangles(C, H, I, D, H, I)
By asa_anti_congruence on D, I, H, C, I, H we get anti_congruent_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v0 on H, C, I, H, D, I we get anti_similar_triangles(C, H, I, D, H, I)
By sas_anti_similarity on D, A, E, C, A, G we get anti_similar_triangles(A, C, G, A, D, E)
By sss_anti_similarity_v1 on H, I, C, H, I, D we get anti_similar_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v1 on D, I, H, C, I, H we get anti_similar_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v1 on G, A, C, H, I, D we get anti_similar_triangles(A, C, G, I, D, H)
By sss_anti_similarity_v1 on D, I, H, C, A, G we get anti_similar_triangles(A, C, G, I, D, H)
By sas_similarity on D, H, G, D, I, F we get similar_triangles(D, F, I, D, G, H)
By sss_anti_congruence_v0 on C, I, H, D, I, H we get anti_congruent_triangles(C, H, I, D, H, I)
By internal_angle_bisector_definition_v0 on K, H, F, J we get angle(H, J, F) == angle(K, J, H) mod 360
By sss_anti_congruence_v1 on D, I, H, C, I, H we get anti_congruent_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v0 on A, G, C, I, H, D we get anti_similar_triangles(A, C, G, I, D, H)
By sss_anti_similarity_v1 on C, G, A, D, H, I we get anti_similar_triangles(A, C, G, I, D, H)
By sss_anti_congruence_v0 on I, H, C, I, H, D we get anti_congruent_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v0 on H, I, D, G, A, C we get anti_similar_triangles(A, C, G, I, D, H)
By sss_anti_similarity_v0 on I, H, C, I, H, D we get anti_similar_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v1 on H, I, C, H, I, D we get anti_similar_triangles(C, H, I, D, H, I)
By sas_anti_similarity on G, A, C, H, I, D we get anti_similar_triangles(A, C, G, I, D, H)
By sss_anti_similarity_v1 on I, H, D, A, G, C we get anti_similar_triangles(A, C, G, I, D, H)
By sss_anti_similarity_v1 on G, A, C, H, I, D we get anti_similar_triangles(A, C, G, I, D, H)
By sss_anti_congruence_v1 on H, I, C, H, I, D we get anti_congruent_triangles(C, H, I, D, H, I)
By sss_anti_congruence_v1 on C, H, I, D, H, I we get anti_congruent_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v0 on I, H, C, I, H, D we get anti_similar_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v1 on A, C, G, I, D, H we get anti_similar_triangles(A, C, G, I, D, H)
By sss_anti_similarity_v0 on I, D, H, A, C, G we get anti_similar_triangles(A, C, G, I, D, H)
By reverse_direction on D, E we get 180 == direction(D, E) - direction(E, D) mod 360
By sas_anti_similarity on E, A, D, H, I, C we get anti_similar_triangles(A, D, E, I, C, H)
By sss_anti_congruence_v0 on C, I, H, D, I, H we get anti_congruent_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v1 on I, H, D, I, H, C we get anti_similar_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v1 on I, H, D, A, G, C we get anti_similar_triangles(A, C, G, I, D, H)
By sss_anti_similarity_v1 on D, I, H, C, I, H we get anti_similar_triangles(C, H, I, D, H, I)
By internal_angle_bisector_definition_v0 on C, H, K, J we get angle(C, J, H) == angle(H, J, K) mod 360
By sss_anti_similarity_v1 on I, H, D, I, H, C we get anti_similar_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v1 on G, A, C, H, I, D we get anti_similar_triangles(A, C, G, I, D, H)
By sss_anti_congruence_v1 on I, C, H, I, D, H we get anti_congruent_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v1 on I, C, H, I, D, H we get anti_similar_triangles(C, H, I, D, H, I)
By collinear_definition on J, K, H we get K in Line(H, J), H in Line(J, K), Line(H, J) == Line(J, K), 0 == 2 * angle(K, J, H) mod 360
By sss_anti_congruence_v0 on C, I, H, D, I, H we get anti_congruent_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v0 on A, G, C, I, H, D we get anti_similar_triangles(A, C, G, I, D, H)
By sas_anti_similarity on B, G, A, D, G, E we get anti_similar_triangles(A, B, G, E, D, G)
By sss_anti_similarity_v0 on C, A, G, D, I, H we get anti_similar_triangles(A, C, G, I, D, H)
By sss_anti_similarity_v0 on D, H, I, C, G, A we get anti_similar_triangles(A, C, G, I, D, H)
By sas_anti_similarity on G, A, B, F, A, D we get anti_similar_triangles(A, B, G, A, D, F)
By sss_anti_similarity_v0 on G, C, A, H, D, I we get anti_similar_triangles(A, C, G, I, D, H)
By sas_anti_similarity on C, I, H, D, A, E we get anti_similar_triangles(A, D, E, I, C, H)
By sss_anti_congruence_v0 on H, C, I, H, D, I we get anti_congruent_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v0 on D, H, I, C, H, I we get anti_similar_triangles(C, H, I, D, H, I)
By sas_anti_congruence on H, I, C, H, I, D we get anti_congruent_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v1 on C, G, A, D, H, I we get anti_similar_triangles(A, C, G, I, D, H)
By sss_anti_similarity_v0 on C, I, H, D, I, H we get anti_similar_triangles(C, H, I, D, H, I)
By sss_anti_congruence_v1 on I, H, D, I, H, C we get anti_congruent_triangles(C, H, I, D, H, I)
By sas_anti_similarity on D, G, F, C, H, I we get anti_similar_triangles(C, H, I, D, G, F)
By sss_anti_congruence_v0 on I, H, C, I, H, D we get anti_congruent_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v0 on D, H, I, C, G, A we get anti_similar_triangles(A, C, G, I, D, H)
By sss_anti_similarity_v0 on D, H, I, C, H, I we get anti_similar_triangles(C, H, I, D, H, I)
By aa_anti_similarity on G, A, C, H, I, D we get anti_similar_triangles(A, C, G, I, D, H)
By sss_anti_congruence_v1 on H, I, C, H, I, D we get anti_congruent_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v1 on I, C, H, I, D, H we get anti_similar_triangles(C, H, I, D, H, I)
By sas_anti_similarity on C, G, A, D, G, F we get anti_similar_triangles(A, C, G, F, D, G)
By sss_anti_congruence_v1 on D, I, H, C, I, H we get anti_congruent_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v0 on D, H, I, C, H, I we get anti_similar_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v0 on I, D, H, I, C, H we get anti_similar_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v0 on A, G, C, I, H, D we get anti_similar_triangles(A, C, G, I, D, H)
By sss_anti_similarity_v1 on D, I, H, C, A, G we get anti_similar_triangles(A, C, G, I, D, H)
By sss_anti_similarity_v1 on I, H, D, A, G, C we get anti_similar_triangles(A, C, G, I, D, H)
By sss_anti_congruence_v0 on H, C, I, H, D, I we get anti_congruent_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v0 on H, I, D, G, A, C we get anti_similar_triangles(A, C, G, I, D, H)
By sss_anti_similarity_v1 on A, C, G, I, D, H we get anti_similar_triangles(A, C, G, I, D, H)
By sss_anti_similarity_v1 on H, D, I, G, C, A we get anti_similar_triangles(A, C, G, I, D, H)
By sas_anti_similarity on C, H, I, D, G, F we get anti_similar_triangles(C, H, I, D, G, F)
By sss_anti_congruence_v0 on D, H, I, C, H, I we get anti_congruent_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v0 on C, A, G, D, I, H we get anti_similar_triangles(A, C, G, I, D, H)
By sss_anti_similarity_v1 on H, D, I, G, C, A we get anti_similar_triangles(A, C, G, I, D, H)
By sss_anti_similarity_v0 on D, H, I, C, G, A we get anti_similar_triangles(A, C, G, I, D, H)
By sss_anti_similarity_v1 on G, A, C, H, I, D we get anti_similar_triangles(A, C, G, I, D, H)
By sas_anti_similarity on D, B, F, A, B, C we get anti_similar_triangles(A, B, C, D, B, F)
By sas_anti_similarity on D, H, G, F, I, D we get anti_similar_triangles(D, F, I, G, D, H)
By sss_anti_similarity_v1 on C, H, I, D, H, I we get anti_similar_triangles(C, H, I, D, H, I)
By sss_anti_congruence_v0 on H, C, I, H, D, I we get anti_congruent_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v0 on H, I, D, G, A, C we get anti_similar_triangles(A, C, G, I, D, H)
By sss_anti_similarity_v1 on A, C, G, I, D, H we get anti_similar_triangles(A, C, G, I, D, H)
By sss_anti_similarity_v1 on H, D, I, G, C, A we get anti_similar_triangles(A, C, G, I, D, H)
By sss_anti_similarity_v0 on H, I, D, G, A, C we get anti_similar_triangles(A, C, G, I, D, H)
By sas_anti_similarity on C, A, G, D, A, E we get anti_similar_triangles(A, C, G, A, D, E)
By collinear_definition on J, H, K we get H in Line(J, K), K in Line(H, J), Line(H, J) == Line(J, K), 0 == 2 * angle(H, J, K) mod 360
By sss_anti_congruence_v0 on H, I, D, H, I, C we get anti_congruent_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v0 on G, C, A, H, D, I we get anti_similar_triangles(A, C, G, I, D, H)
By sss_anti_similarity_v1 on H, D, I, G, C, A we get anti_similar_triangles(A, C, G, I, D, H)
By sss_anti_congruence_v0 on I, D, H, I, C, H we get anti_congruent_triangles(C, H, I, D, H, I)
By sss_anti_congruence_v0 on I, D, H, I, C, H we get anti_congruent_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v0 on A, G, C, I, H, D we get anti_similar_triangles(A, C, G, I, D, H)
By sas_anti_similarity on F, B, D, C, B, A we get anti_similar_triangles(A, B, C, D, B, F)
By aa_anti_similarity on H, I, D, G, A, C we get anti_similar_triangles(A, C, G, I, D, H)
By asa_anti_congruence on C, I, H, D, I, H we get anti_congruent_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v0 on I, D, H, A, C, G we get anti_similar_triangles(A, C, G, I, D, H)
By sss_anti_similarity_v1 on I, H, D, I, H, C we get anti_similar_triangles(C, H, I, D, H, I)
By sss_anti_congruence_v1 on H, I, C, H, I, D we get anti_congruent_triangles(C, H, I, D, H, I)
By sas_anti_similarity on B, A, G, D, A, F we get anti_similar_triangles(A, B, G, A, D, F)
By sas_anti_similarity on F, G, D, A, G, C we get anti_similar_triangles(A, C, G, F, D, G)
By sss_anti_similarity_v0 on I, H, C, I, H, D we get anti_similar_triangles(C, H, I, D, H, I)
By sas_anti_similarity on D, A, F, B, A, G we get anti_similar_triangles(A, B, G, A, D, F)
By sss_anti_congruence_v1 on C, H, I, D, H, I we get anti_congruent_triangles(C, H, I, D, H, I)
By sss_anti_congruence_v0 on C, I, H, D, I, H we get anti_congruent_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v0 on I, D, H, A, C, G we get anti_similar_triangles(A, C, G, I, D, H)
By collinear_definition on H, J, G we get J in Line(G, H), G in Line(H, J), Line(G, H) == Line(H, J), 0 == 2 * angle(J, H, G) mod 360
By sss_anti_congruence_v1 on I, H, D, I, H, C we get anti_congruent_triangles(C, H, I, D, H, I)
By between_imply_segment_sum on C, K, G we get distance(C, G) == distance(C, K) + distance(G, K)
By sss_anti_similarity_v0 on G, C, A, H, D, I we get anti_similar_triangles(A, C, G, I, D, H)
By asa_anti_congruence on I, D, H, I, C, H we get anti_congruent_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v1 on H, D, I, G, C, A we get anti_similar_triangles(A, C, G, I, D, H)
By sas_similarity on E, A, D, H, I, D we get similar_triangles(A, D, E, I, D, H)
By sss_anti_similarity_v1 on I, H, D, A, G, C we get anti_similar_triangles(A, C, G, I, D, H)
By internal_angle_bisector_definition_v0 on F, H, F, J we get angle(F, J, H) == angle(H, J, F) mod 360
By sss_anti_similarity_v1 on H, D, I, H, C, I we get anti_similar_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v1 on H, I, C, H, I, D we get anti_similar_triangles(C, H, I, D, H, I)
By sas_anti_similarity on D, B, E, G, B, C we get anti_similar_triangles(B, C, G, B, E, D)
By sss_anti_similarity_v0 on I, D, H, I, C, H we get anti_similar_triangles(C, H, I, D, H, I)
By sss_anti_congruence_v1 on H, D, I, H, C, I we get anti_congruent_triangles(C, H, I, D, H, I)
By sss_anti_congruence_v0 on D, H, I, C, H, I we get anti_congruent_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v0 on I, D, H, A, C, G we get anti_similar_triangles(A, C, G, I, D, H)
By sss_anti_congruence_v1 on C, H, I, D, H, I we get anti_congruent_triangles(C, H, I, D, H, I)
By sas_anti_similarity on H, I, C, E, A, D we get anti_similar_triangles(A, D, E, I, C, H)
By aa_anti_similarity on H, D, E, H, E, D we get anti_similar_triangles(D, E, H, E, D, H)
By aa_anti_similarity on H, I, C, H, I, D we get anti_similar_triangles(C, H, I, D, H, I)
By sas_anti_similarity on C, B, G, E, B, D we get anti_similar_triangles(B, C, G, B, E, D)
By between_imply_segment_sum on J, G, K we get distance(J, K) == distance(G, J) + distance(G, K)
By sss_anti_congruence_v0 on I, H, C, I, H, D we get anti_congruent_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v0 on C, A, G, D, I, H we get anti_similar_triangles(A, C, G, I, D, H)
By aa_anti_similarity on H, I, D, H, I, C we get anti_similar_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v1 on I, C, H, I, D, H we get anti_similar_triangles(C, H, I, D, H, I)
By sas_similarity on H, I, D, E, A, D we get similar_triangles(A, D, E, I, D, H)
By sss_anti_similarity_v0 on I, H, C, I, H, D we get anti_similar_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v0 on H, C, I, H, D, I we get anti_similar_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v0 on H, C, I, H, D, I we get anti_similar_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v0 on H, I, D, H, I, C we get anti_similar_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v0 on G, C, A, H, D, I we get anti_similar_triangles(A, C, G, I, D, H)
By sss_anti_congruence_v1 on H, I, C, H, I, D we get anti_congruent_triangles(C, H, I, D, H, I)
By reverse_direction on F, D we get 180 == direction(F, D) - direction(D, F) mod 360
By sss_anti_congruence_v1 on H, D, I, H, C, I we get anti_congruent_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v0 on I, D, H, I, C, H we get anti_similar_triangles(C, H, I, D, H, I)
By collinear_definition on H, J, C we get J in Line(C, H), C in Line(H, J), Line(C, H) == Line(H, J), 0 == 2 * angle(J, H, C) mod 360
By sas_anti_similarity on F, I, D, D, H, G we get anti_similar_triangles(D, F, I, G, D, H)
By sas_anti_similarity on F, G, D, I, H, C we get anti_similar_triangles(C, H, I, D, G, F)
By sss_anti_congruence_v0 on C, I, H, D, I, H we get anti_congruent_triangles(C, H, I, D, H, I)
By sss_anti_congruence_v0 on D, H, I, C, H, I we get anti_congruent_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v0 on H, I, D, H, I, C we get anti_similar_triangles(C, H, I, D, H, I)
By sss_anti_congruence_v0 on I, D, H, I, C, H we get anti_congruent_triangles(C, H, I, D, H, I)
By sas_anti_similarity on F, A, D, G, A, B we get anti_similar_triangles(A, B, G, A, D, F)
By sss_anti_congruence_v0 on I, D, H, I, C, H we get anti_congruent_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v0 on I, D, H, A, C, G we get anti_similar_triangles(A, C, G, I, D, H)
By sas_anti_similarity on I, D, H, I, C, H we get anti_similar_triangles(C, H, I, D, H, I)
By sss_anti_congruence_v1 on H, D, I, H, C, I we get anti_congruent_triangles(C, H, I, D, H, I)
By sas_similarity on D, I, F, D, H, G we get similar_triangles(D, F, I, D, G, H)
By sas_anti_similarity on D, I, H, C, A, G we get anti_similar_triangles(A, C, G, I, D, H)
By sss_anti_similarity_v1 on C, H, I, D, H, I we get anti_similar_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v0 on D, H, I, C, G, A we get anti_similar_triangles(A, C, G, I, D, H)
By sss_anti_similarity_v1 on I, H, D, A, G, C we get anti_similar_triangles(A, C, G, I, D, H)
By sss_anti_similarity_v1 on C, G, A, D, H, I we get anti_similar_triangles(A, C, G, I, D, H)
By sss_anti_congruence_v0 on H, I, D, H, I, C we get anti_congruent_triangles(C, H, I, D, H, I)
By sas_anti_similarity on A, C, G, I, D, H we get anti_similar_triangles(A, C, G, I, D, H)
By sss_anti_congruence_v1 on H, I, C, H, I, D we get anti_congruent_triangles(C, H, I, D, H, I)
By sss_anti_congruence_v0 on D, H, I, C, H, I we get anti_congruent_triangles(C, H, I, D, H, I)
By sas_anti_congruence on H, I, D, H, I, C we get anti_congruent_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v0 on H, I, D, H, I, C we get anti_similar_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v1 on I, C, H, I, D, H we get anti_similar_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v1 on I, C, H, I, D, H we get anti_similar_triangles(C, H, I, D, H, I)
By sas_anti_similarity on C, B, A, F, B, D we get anti_similar_triangles(A, B, C, D, B, F)
By sss_anti_congruence_v1 on C, H, I, D, H, I we get anti_congruent_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v1 on H, D, I, H, C, I we get anti_similar_triangles(C, H, I, D, H, I)
By sss_anti_congruence_v1 on I, C, H, I, D, H we get anti_congruent_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v1 on D, I, H, C, I, H we get anti_similar_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v1 on I, H, D, I, H, C we get anti_similar_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v1 on H, D, I, H, C, I we get anti_similar_triangles(C, H, I, D, H, I)
By sas_anti_similarity on H, D, I, H, C, I we get anti_similar_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v0 on G, C, A, H, D, I we get anti_similar_triangles(A, C, G, I, D, H)
By sss_anti_similarity_v0 on D, H, I, C, H, I we get anti_similar_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v0 on A, G, C, I, H, D we get anti_similar_triangles(A, C, G, I, D, H)
By sss_anti_similarity_v0 on G, C, A, H, D, I we get anti_similar_triangles(A, C, G, I, D, H)
By sas_anti_similarity on H, C, I, H, D, I we get anti_similar_triangles(C, H, I, D, H, I)
By collinear_definition on J, H, C we get H in Line(C, J), C in Line(H, J), Line(C, J) == Line(H, J), 0 == 2 * angle(H, J, C) mod 360
By sss_anti_similarity_v1 on C, G, A, D, H, I we get anti_similar_triangles(A, C, G, I, D, H)
By sss_anti_similarity_v1 on H, D, I, H, C, I we get anti_similar_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v1 on G, A, C, H, I, D we get anti_similar_triangles(A, C, G, I, D, H)
By sas_anti_similarity on E, C, D, B, C, A we get anti_similar_triangles(A, B, C, D, E, C)
By sas_anti_congruence on I, D, H, I, C, H we get anti_congruent_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v1 on G, A, C, H, I, D we get anti_similar_triangles(A, C, G, I, D, H)
By sss_anti_similarity_v1 on C, H, I, D, H, I we get anti_similar_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v1 on I, C, H, I, D, H we get anti_similar_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v1 on I, H, D, A, G, C we get anti_similar_triangles(A, C, G, I, D, H)
By sss_anti_similarity_v1 on C, G, A, D, H, I we get anti_similar_triangles(A, C, G, I, D, H)
By sss_anti_congruence_v1 on C, H, I, D, H, I we get anti_congruent_triangles(C, H, I, D, H, I)
By sss_anti_congruence_v0 on I, D, H, I, C, H we get anti_congruent_triangles(C, H, I, D, H, I)
By sas_anti_similarity on G, H, D, D, I, F we get anti_similar_triangles(D, F, I, G, D, H)
By sss_anti_congruence_v0 on H, I, D, H, I, C we get anti_congruent_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v1 on C, G, A, D, H, I we get anti_similar_triangles(A, C, G, I, D, H)
By sss_anti_similarity_v1 on A, C, G, I, D, H we get anti_similar_triangles(A, C, G, I, D, H)
By sss_anti_congruence_v1 on I, H, D, I, H, C we get anti_congruent_triangles(C, H, I, D, H, I)
By sas_anti_similarity on A, G, C, F, G, D we get anti_similar_triangles(A, C, G, F, D, G)
By sas_anti_similarity on A, B, C, D, B, F we get anti_similar_triangles(A, B, C, D, B, F)
By sss_anti_congruence_v1 on D, I, H, C, I, H we get anti_congruent_triangles(C, H, I, D, H, I)
By collinear_definition on J, G, H we get G in Line(H, J), H in Line(G, J), Line(G, J) == Line(H, J), 0 == 2 * angle(G, J, H) mod 360
By sas_anti_similarity on H, I, D, G, A, C we get anti_similar_triangles(A, C, G, I, D, H)
By aa_anti_similarity on H, C, I, H, D, I we get anti_similar_triangles(C, H, I, D, H, I)
By sas_anti_similarity on C, I, H, D, I, H we get anti_similar_triangles(C, H, I, D, H, I)
By sss_anti_similarity_v0 on A, G, C, I, H, D we get anti_similar_triangles(A, C, G, I, D, H)
By sss_anti_similarity_v1 on C, H, I, D, H, I we get anti_similar_triangles(C, H, I, D, H, I)
By power_of_a_point_definition on C, J, H, c we get log(power_of_a_point(C, c)) == log(distance(C, J)) + log(distance(C, H))
By same_angle_v1 on H, F, K, D we get angle(F, H, D) == angle(K, H, D) mod 360
By same_angle_v0 on H, F, K, E we get angle(F, H, E) == angle(K, H, E) mod 360
By same_angle_v0 on H, K, F, A we get angle(F, H, A) == angle(K, H, A) mod 360
By same_angle_v0 on H, F, K, I we get angle(F, H, I) == angle(K, H, I) mod 360
By external_angle_bisector_definition_v0_r on C, K, J, G we get Line(G, K) == external_angle_bisector(C, G, J)
By power_of_a_point_in_circle on A, Circle(A, B, D) we get 0 == power_of_a_point(A, Circle(A, B, D))
By external_angle_bisector_definition_v0_r on K, C, F, G we get Line(C, G) == external_angle_bisector(F, G, K)
By internal_angle_bisector_definition_v0_r on C, H, K, G we get Line(G, H) == internal_angle_bisector(C, G, K)
By internal_angle_bisector_definition_v0_r on G, H, K, C we get Line(C, H) == internal_angle_bisector(G, C, K)
By external_angle_bisector_definition_v0_r on F, J, K, G we get Line(G, J) == external_angle_bisector(F, G, K)
By external_angle_bisector_definition_v0_r on F, H, C, G we get Line(G, H) == external_angle_bisector(C, G, F)
By internal_angle_bisector_definition_v0_r on F, J, H, C we get Line(C, J) == internal_angle_bisector(F, C, H)
By internal_angle_bisector_definition_v0_r on G, K, J, C we get Line(C, K) == internal_angle_bisector(G, C, J)
By isosceles_triangle_altitude_v3 on I, D, C we get identical(perpendicular_bisector(C, D), internal_angle_bisector(C, I, D), perpendicular_line(I, Line(C, D)))
By external_angle_bisector_definition_v0 on B, H, B, F we get 180 == angle(B, F, H) + angle(B, F, H) mod 360
By external_angle_bisector_definition_v0_r on G, B, G, F we get Line(B, F) == external_angle_bisector(G, F, G)
By internal_angle_bisector_definition_v0 on G, F, G, H we get angle(F, H, G) == angle(G, H, F) mod 360
By external_angle_bisector_definition_v0_r on C, J, F, G we get Line(G, J) == external_angle_bisector(C, G, F)
By power_of_a_point_on_circle on B, Circle(A, B, D) we get 0 == power_of_a_point(B, Circle(A, B, D))
By external_angle_bisector_definition_v0_r on G, J, C, K we get Line(J, K) == external_angle_bisector(C, K, G)
By external_angle_bisector_definition_v0_r on J, K, G, F we get Line(F, K) == external_angle_bisector(G, F, J)
By external_angle_bisector_definition_v0_r on F, K, H, G we get Line(G, K) == external_angle_bisector(F, G, H)
By internal_angle_bisector_definition_v0_r on G, C, G, J we get Line(C, J) == internal_angle_bisector(G, J, G)
By external_angle_bisector_definition_v0_r on G, B, K, F we get Line(B, F) == external_angle_bisector(G, F, K)
By internal_angle_bisector_definition_v0_r on C, J, K, G we get Line(G, J) == internal_angle_bisector(C, G, K)
By external_angle_bisector_definition_v0_r on J, C, K, G we get Line(C, G) == external_angle_bisector(J, G, K)
By power_of_a_point_in_circle on B, Circle(B, C, E) we get 0 == power_of_a_point(B, Circle(B, C, E))
By external_angle_bisector_definition_v0 on F, H, C, K we get 180 == angle(F, K, H) + angle(C, K, H) mod 360
By external_angle_bisector_definition_v0_r on C, B, G, F we get Line(B, F) == external_angle_bisector(C, F, G)
By internal_angle_bisector_definition_v0_r on K, F, H, C we get Line(C, F) == internal_angle_bisector(H, C, K)
By external_angle_bisector_definition_v0_r on F, H, K, G we get Line(G, H) == external_angle_bisector(F, G, K)
By log_of_2_times_distance on D, C, C, midpoint(C, D) we get log(distance(C, D)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(C, midpoint(C, D)))
By internal_angle_bisector_definition_v0_r on F, K, F, G we get Line(G, K) == internal_angle_bisector(F, G, F)
By internal_angle_bisector_definition_v0_r on J, C, F, G we get Line(C, G) == internal_angle_bisector(F, G, J)
By internal_angle_bisector_definition_v0_r on G, C, F, K we get Line(C, K) == internal_angle_bisector(F, K, G)
By external_angle_bisector_definition_v0_r on H, C, J, G we get Line(C, G) == external_angle_bisector(H, G, J)
By external_angle_bisector_definition_v0_r on F, J, H, G we get Line(G, J) == external_angle_bisector(F, G, H)
By internal_angle_bisector_definition_v0_r on K, F, G, J we get Line(F, J) == internal_angle_bisector(G, J, K)
By collinear_definition on C, midpoint(C, D), D we get midpoint(C, D) in Line(C, D), D in Line(C, midpoint(C, D)), Line(C, D) == Line(C, midpoint(C, D)), 0 == 2 * angle(midpoint(C, D), C, D) mod 360
By collinear_definition on H, K, J we get K in Line(H, J), J in Line(H, K), Line(H, J) == Line(H, K), 0 == 2 * angle(K, H, J) mod 360
By external_angle_bisector_definition_v0_r on K, F, J, G we get Line(F, G) == external_angle_bisector(J, G, K)
By external_angle_bisector_definition_v0_r on J, F, H, G we get Line(F, G) == external_angle_bisector(H, G, J)
By internal_angle_bisector_definition_v0_r on G, K, G, F we get Line(F, K) == internal_angle_bisector(G, F, G)
By external_angle_bisector_definition_v0_r on K, A, G, F we get Line(A, F) == external_angle_bisector(G, F, K)
By external_angle_bisector_definition_v0_r on C, F, J, G we get Line(F, G) == external_angle_bisector(C, G, J)
By external_angle_bisector_definition_v0_r on C, A, G, F we get Line(A, F) == external_angle_bisector(C, F, G)
By internal_angle_bisector_definition_v0_r on H, J, G, C we get Line(C, J) == internal_angle_bisector(G, C, H)
By internal_angle_bisector_definition_v0 on C, H, K, F we get angle(C, F, H) == angle(H, F, K) mod 360
By internal_angle_bisector_definition_v0_r on J, H, J, G we get Line(G, H) == internal_angle_bisector(J, G, J)
By external_angle_bisector_definition_v0_r on J, H, K, G we get Line(G, H) == external_angle_bisector(J, G, K)
By perpendicular_angle_conditions_v0 on B, F, H we get angle(B, F, H) == orientation(B, F, H) mod 360
By external_angle_bisector_definition_v0_r on F, K, C, G we get Line(G, K) == external_angle_bisector(C, G, F)
By internal_angle_bisector_definition_v0_r on H, F, K, G we get Line(F, G) == internal_angle_bisector(H, G, K)
By collinear_definition on F, J, H we get J in Line(F, H), H in Line(F, J), Line(F, H) == Line(F, J), 0 == 2 * angle(J, F, H) mod 360
By external_angle_bisector_definition_v0_r on H, C, F, G we get Line(C, G) == external_angle_bisector(F, G, H)
By internal_angle_bisector_definition_v0 on C, H, C, K we get angle(C, K, H) == angle(H, K, C) mod 360
By internal_angle_bisector_definition_v0_r on H, J, C, G we get Line(G, J) == internal_angle_bisector(C, G, H)
By internal_angle_bisector_definition_v0_r on C, F, K, G we get Line(F, G) == internal_angle_bisector(C, G, K)
By internal_angle_bisector_definition_v0_r on C, F, H, G we get Line(F, G) == internal_angle_bisector(C, G, H)
By internal_angle_bisector_definition_v0_r on G, J, F, K we get Line(J, K) == internal_angle_bisector(F, K, G)
By internal_angle_bisector_definition_v0_r on G, C, K, J we get Line(C, J) == internal_angle_bisector(G, J, K)
By external_angle_bisector_definition_v0_r on G, A, G, F we get Line(A, F) == external_angle_bisector(G, F, G)
By internal_angle_bisector_definition_v0 on A, H, B, F we get angle(A, F, H) == angle(H, F, B) mod 360
By internal_angle_bisector_definition_v0_r on G, K, C, F we get Line(F, K) == internal_angle_bisector(C, F, G)
By collinear_definition on F, H, C we get H in Line(C, F), C in Line(F, H), Line(C, F) == Line(F, H), 0 == 2 * angle(H, F, C) mod 360
By external_angle_bisector_definition_v0_r on G, F, C, K we get Line(F, K) == external_angle_bisector(C, K, G)
By external_angle_bisector_definition_v0_r on G, C, J, F we get Line(C, F) == external_angle_bisector(G, F, J)
By power_of_a_point_on_circle on F, Circle(B, C, E) we get 0 == power_of_a_point(F, Circle(B, C, E))
By internal_angle_bisector_definition_v0_r on K, G, H, C we get Line(C, G) == internal_angle_bisector(H, C, K)
By internal_angle_bisector_definition_v0_r on K, C, H, G we get Line(C, G) == internal_angle_bisector(H, G, K)
By internal_angle_bisector_definition_v0_r on F, C, G, J we get Line(C, J) == internal_angle_bisector(F, J, G)
By collinear_definition on K, C, H we get C in Line(H, K), H in Line(C, K), Line(C, K) == Line(H, K), 0 == 2 * angle(C, K, H) mod 360
By internal_angle_bisector_definition_v0_r on G, J, C, F we get Line(F, J) == internal_angle_bisector(C, F, G)
By internal_angle_bisector_definition_v0_r on K, C, K, G we get Line(C, G) == internal_angle_bisector(K, G, K)
By collinear_definition on H, F, C we get F in Line(C, H), C in Line(F, H), Line(C, H) == Line(F, H), 0 == 2 * angle(F, H, C) mod 360
By external_angle_bisector_definition_v0_r on J, K, H, G we get Line(G, K) == external_angle_bisector(H, G, J)
By internal_angle_bisector_definition_v0_r on F, H, F, G we get Line(G, H) == internal_angle_bisector(F, G, F)
By collinear_definition on F, H, K we get H in Line(F, K), K in Line(F, H), Line(F, H) == Line(F, K), 0 == 2 * angle(H, F, K) mod 360
By collinear_definition on F, H, G we get H in Line(F, G), G in Line(F, H), Line(F, G) == Line(F, H), 0 == 2 * angle(H, F, G) mod 360
By internal_angle_bisector_definition_v0 on C, K, C, H we get angle(C, H, K) == angle(K, H, C) mod 360
By internal_angle_bisector_definition_v0_r on K, F, G, C we get Line(C, F) == internal_angle_bisector(G, C, K)
By internal_angle_bisector_definition_v0_r on K, J, H, C we get Line(C, J) == internal_angle_bisector(H, C, K)
By internal_angle_bisector_definition_v0_r on G, J, G, F we get Line(F, J) == internal_angle_bisector(G, F, G)
By internal_angle_bisector_definition_v0_r on G, C, G, K we get Line(C, K) == internal_angle_bisector(G, K, G)
By collinear_definition on H, K, G we get K in Line(G, H), G in Line(H, K), Line(G, H) == Line(H, K), 0 == 2 * angle(K, H, G) mod 360
By internal_angle_bisector_definition_v0_r on G, H, F, C we get Line(C, H) == internal_angle_bisector(F, C, G)
By external_angle_bisector_definition_v0 on C, H, J, F we get 180 == angle(C, F, H) + angle(J, F, H) mod 360
By log_of_2_times_distance on C, D, D, midpoint(C, D) we get log(distance(C, D)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(D, midpoint(C, D)))
By perpendicular_angle_conditions_v0 on H, F, A we get angle(H, F, A) == orientation(A, H, F) mod 360
By collinear_definition on H, F, G we get F in Line(G, H), G in Line(F, H), Line(F, H) == Line(G, H), 0 == 2 * angle(F, H, G) mod 360
By external_angle_bisector_definition_v0_r on C, H, J, G we get Line(G, H) == external_angle_bisector(C, G, J)
By anti_similar_triangle_basic_properties on F, I, D, D, I, F we get angle(F, I, D) == 0 - angle(D, I, F) mod 360, angle(I, D, F) == 0 - angle(I, F, D) mod 360, angle(D, F, I) == 0 - angle(F, D, I) mod 360, log(distance(D, I)) + log(distance(D, I)) == log(distance(F, I)) + log(distance(F, I)), log(distance(D, I)) + log(distance(D, F)) == log(distance(F, I)) + log(distance(D, F)), log(distance(D, F)) + log(distance(D, I)) == log(distance(D, F)) + log(distance(F, I))
By collinear_definition on F, H, J we get H in Line(F, J), J in Line(F, H), Line(F, H) == Line(F, J), 0 == 2 * angle(H, F, J) mod 360
By internal_angle_bisector_definition_v0_r on G, J, K, F we get Line(F, J) == internal_angle_bisector(G, F, K)
By internal_angle_bisector_definition_v0_r on K, H, K, G we get Line(G, H) == internal_angle_bisector(K, G, K)
By internal_angle_bisector_definition_v0_r on K, C, G, F we get Line(C, F) == internal_angle_bisector(G, F, K)
By internal_angle_bisector_definition_v0_r on J, B, G, F we get Line(B, F) == internal_angle_bisector(G, F, J)
By power_of_a_point_on_circle on E, Circle(A, B, D) we get 0 == power_of_a_point(E, Circle(A, B, D))
By collinear_definition on H, C, K we get C in Line(H, K), K in Line(C, H), Line(C, H) == Line(H, K), 0 == 2 * angle(C, H, K) mod 360
By collinear_definition on H, G, F we get G in Line(F, H), F in Line(G, H), Line(F, H) == Line(G, H), 0 == 2 * angle(G, H, F) mod 360
By internal_angle_bisector_definition_v0_r on K, F, K, G we get Line(F, G) == internal_angle_bisector(K, G, K)
By internal_angle_bisector_definition_v0 on J, H, F, K we get angle(H, K, F) == angle(J, K, H) mod 360
By internal_angle_bisector_definition_v0_r on J, G, H, C we get Line(C, G) == internal_angle_bisector(H, C, J)
By power_of_a_point_on_circle on D, Circle(A, B, D) we get 0 == power_of_a_point(D, Circle(A, B, D))
By internal_angle_bisector_definition_v0_r on G, F, J, K we get Line(F, K) == internal_angle_bisector(G, K, J)
By internal_angle_bisector_definition_v0_r on K, J, K, G we get Line(G, J) == internal_angle_bisector(K, G, K)
By internal_angle_bisector_definition_v0_r on G, F, H, C we get Line(C, F) == internal_angle_bisector(G, C, H)
By internal_angle_bisector_definition_v0 on K, H, K, F we get angle(H, F, K) == angle(K, F, H) mod 360
By internal_angle_bisector_definition_v0_r on G, K, F, J we get Line(J, K) == internal_angle_bisector(F, J, G)
By power_of_a_point_in_circle on E, Circle(B, C, E) we get 0 == power_of_a_point(E, Circle(B, C, E))
By internal_angle_bisector_definition_v0 on C, H, C, F we get angle(C, F, H) == angle(H, F, C) mod 360
By internal_angle_bisector_definition_v0_r on J, K, J, G we get Line(G, K) == internal_angle_bisector(J, G, J)
By internal_angle_bisector_definition_v0 on C, F, C, H we get angle(C, H, F) == angle(F, H, C) mod 360
By internal_angle_bisector_definition_v0_r on G, H, J, C we get Line(C, H) == internal_angle_bisector(G, C, J)
By internal_angle_bisector_definition_v0_r on C, K, G, J we get Line(J, K) == internal_angle_bisector(C, J, G)
By collinear_definition on H, C, F we get C in Line(F, H), F in Line(C, H), Line(C, H) == Line(F, H), 0 == 2 * angle(C, H, F) mod 360
By internal_angle_bisector_definition_v0_r on J, H, F, G we get Line(G, H) == internal_angle_bisector(F, G, J)
By collinear_definition on F, C, H we get C in Line(F, H), H in Line(C, F), Line(C, F) == Line(F, H), 0 == 2 * angle(C, F, H) mod 360
By internal_angle_bisector_definition_v0_r on G, F, G, K we get Line(F, K) == internal_angle_bisector(G, K, G)
By collinear_definition on K, H, G we get H in Line(G, K), G in Line(H, K), Line(G, K) == Line(H, K), 0 == 2 * angle(H, K, G) mod 360
By internal_angle_bisector_definition_v0_r on G, J, G, K we get Line(J, K) == internal_angle_bisector(G, K, G)
By internal_angle_bisector_definition_v0_r on J, F, H, C we get Line(C, F) == internal_angle_bisector(H, C, J)
By internal_angle_bisector_definition_v0_r on F, K, H, C we get Line(C, K) == internal_angle_bisector(F, C, H)
By internal_angle_bisector_definition_v0_r on F, K, G, C we get Line(C, K) == internal_angle_bisector(F, C, G)
By collinear_definition on K, H, C we get H in Line(C, K), C in Line(H, K), Line(C, K) == Line(H, K), 0 == 2 * angle(H, K, C) mod 360
By internal_angle_bisector_definition_v0_r on G, A, J, F we get Line(A, F) == internal_angle_bisector(G, F, J)
By internal_angle_bisector_definition_v0_r on K, J, G, C we get Line(C, J) == internal_angle_bisector(G, C, K)
By external_angle_bisector_definition_v0 on K, H, J, F we get 180 == angle(K, F, H) + angle(J, F, H) mod 360
By internal_angle_bisector_definition_v0_r on G, F, G, J we get Line(F, J) == internal_angle_bisector(G, J, G)
By isosceles_triangle_midpoint on I, D, C we get midpoint(C, D) in median(I, C, D)
By collinear_definition on K, H, F we get H in Line(F, K), F in Line(H, K), Line(F, K) == Line(H, K), 0 == 2 * angle(H, K, F) mod 360
By internal_angle_bisector_definition_v0_r on F, K, J, G we get Line(G, K) == internal_angle_bisector(F, G, J)
By internal_angle_bisector_definition_v0_r on G, F, J, C we get Line(C, F) == internal_angle_bisector(G, C, J)
By internal_angle_bisector_definition_v0 on J, H, J, F we get angle(H, F, J) == angle(J, F, H) mod 360
By internal_angle_bisector_definition_v0_r on F, C, F, G we get Line(C, G) == internal_angle_bisector(F, G, F)
By internal_angle_bisector_definition_v0_r on F, G, H, C we get Line(C, G) == internal_angle_bisector(F, C, H)
By external_angle_bisector_definition_v0 on C, H, J, K we get 180 == angle(C, K, H) + angle(J, K, H) mod 360
By internal_angle_bisector_definition_v0_r on H, J, K, G we get Line(G, J) == internal_angle_bisector(H, G, K)
By perpendicular_angle_conditions_v0 on H, F, B we get angle(H, F, B) == orientation(B, H, F) mod 360
By collinear_definition on H, K, C we get K in Line(C, H), C in Line(H, K), Line(C, H) == Line(H, K), 0 == 2 * angle(K, H, C) mod 360
By internal_angle_bisector_definition_v0 on G, K, G, H we get angle(G, H, K) == angle(K, H, G) mod 360
By internal_angle_bisector_definition_v0_r on G, C, J, K we get Line(C, K) == internal_angle_bisector(G, K, J)
By collinear_definition on D, midpoint(C, D), C we get midpoint(C, D) in Line(C, D), C in Line(D, midpoint(C, D)), Line(C, D) == Line(D, midpoint(C, D)), 0 == 2 * angle(midpoint(C, D), D, C) mod 360
By internal_angle_bisector_definition_v0_r on H, K, G, C we get Line(C, K) == internal_angle_bisector(G, C, H)
By internal_angle_bisector_definition_v0_r on J, C, J, G we get Line(C, G) == internal_angle_bisector(J, G, J)
By internal_angle_bisector_definition_v0 on F, H, F, K we get angle(F, K, H) == angle(H, K, F) mod 360
By collinear_definition on K, H, J we get H in Line(J, K), J in Line(H, K), Line(H, K) == Line(J, K), 0 == 2 * angle(H, K, J) mod 360
By internal_angle_bisector_definition_v0_r on C, F, G, J we get Line(F, J) == internal_angle_bisector(C, J, G)
By internal_angle_bisector_definition_v0_r on H, K, C, G we get Line(G, K) == internal_angle_bisector(C, G, H)
By isosceles_triangle_midpoint on H, C, D we get midpoint(C, D) in median(H, C, D)
By external_angle_bisector_definition_v0 on A, H, A, F we get 180 == angle(A, F, H) + angle(A, F, H) mod 360
By internal_angle_bisector_definition_v0_r on G, C, G, F we get Line(C, F) == internal_angle_bisector(G, F, G)
By collinear_definition on D, C, midpoint(C, D) we get C in Line(D, midpoint(C, D)), midpoint(C, D) in Line(C, D), Line(C, D) == Line(D, midpoint(C, D)), 0 == 2 * angle(C, D, midpoint(C, D)) mod 360
By internal_angle_bisector_definition_v0_r on F, J, G, C we get Line(C, J) == internal_angle_bisector(F, C, G)
By collinear_definition on H, G, K we get G in Line(H, K), K in Line(G, H), Line(G, H) == Line(H, K), 0 == 2 * angle(G, H, K) mod 360
By perpendicular_bisector_properties on C, D we get perpendicular(Line(C, D), perpendicular_bisector(C, D)), midpoint(C, D) == line_intersection(Line(C, D), perpendicular_bisector(C, D))
By power_of_a_point_in_circle on C, Circle(B, C, E) we get 0 == power_of_a_point(C, Circle(B, C, E))
By internal_angle_bisector_definition_v0 on B, H, A, F we get angle(B, F, H) == angle(H, F, A) mod 360
By internal_angle_bisector_definition_v0_r on J, F, J, G we get Line(F, G) == internal_angle_bisector(J, G, J)
By collinear_definition on F, K, H we get K in Line(F, H), H in Line(F, K), Line(F, H) == Line(F, K), 0 == 2 * angle(K, F, H) mod 360
By internal_angle_bisector_definition_v0_r on F, J, F, G we get Line(G, J) == internal_angle_bisector(F, G, F)
By collinear_definition on C, D, midpoint(C, D) we get D in Line(C, midpoint(C, D)), midpoint(C, D) in Line(C, D), Line(C, D) == Line(C, midpoint(C, D)), 0 == 2 * angle(D, C, midpoint(C, D)) mod 360
By collinear_definition on F, G, H we get G in Line(F, H), H in Line(F, G), Line(F, G) == Line(F, H), 0 == 2 * angle(G, F, H) mod 360
By internal_angle_bisector_definition_v0 on J, H, J, K we get angle(H, K, J) == angle(J, K, H) mod 360
By collinear_definition on H, J, K we get J in Line(H, K), K in Line(H, J), Line(H, J) == Line(H, K), 0 == 2 * angle(J, H, K) mod 360
By internal_angle_bisector_definition_v0_r on J, K, H, C we get Line(C, K) == internal_angle_bisector(H, C, J)
By perpendicular_angle_conditions_v0 on A, F, H we get angle(A, F, H) == orientation(A, F, H) mod 360
By collinear_definition on K, F, H we get F in Line(H, K), H in Line(F, K), Line(F, K) == Line(H, K), 0 == 2 * angle(F, K, H) mod 360
By internal_angle_bisector_definition_v0 on F, H, J, K we get angle(F, K, H) == angle(H, K, J) mod 360
By internal_angle_bisector_definition_v0_r on G, K, G, J we get Line(J, K) == internal_angle_bisector(G, J, G)
By collinear_definition on K, G, H we get G in Line(H, K), H in Line(G, K), Line(G, K) == Line(H, K), 0 == 2 * angle(G, K, H) mod 360
By internal_angle_bisector_definition_v0 on K, H, C, F we get angle(H, F, C) == angle(K, F, H) mod 360
By collinear_definition on K, J, H we get J in Line(H, K), H in Line(J, K), Line(H, K) == Line(J, K), 0 == 2 * angle(J, K, H) mod 360
By collinear_definition on H, J, F we get J in Line(F, H), F in Line(H, J), Line(F, H) == Line(H, J), 0 == 2 * angle(J, H, F) mod 360
By collinear_definition on H, F, J we get F in Line(H, J), J in Line(F, H), Line(F, H) == Line(H, J), 0 == 2 * angle(F, H, J) mod 360
By perpendicular_lines_draw_intersection on g, Line(H, I) we get exists(line_intersection(g, Line(H, I)))
By isosceles_triangle_altitude_v2 on I, C, D we get identical(perpendicular_bisector(C, D), internal_angle_bisector(C, I, D), perpendicular_line(I, Line(C, D)))
By isosceles_triangle_altitude_v3 on I, C, D we get identical(perpendicular_bisector(C, D), internal_angle_bisector(C, I, D), perpendicular_line(I, Line(C, D)))
By isosceles_triangle_altitude_v2 on I, D, C we get identical(perpendicular_bisector(C, D), internal_angle_bisector(C, I, D), perpendicular_line(I, Line(C, D)))
By power_of_a_point_definition on C, E, A, Circle(A, B, D) we get log(distance(C, E)) + log(distance(A, C)) == log(power_of_a_point(C, Circle(A, B, D)))
By altitude_definition on A, H, J, f we get f == altitude(A, H, J)
By sas_anti_similarity on E, A, F, B, A, C we get anti_similar_triangles(A, B, C, A, E, F)
By altitude_definition on H, B, C, Line(H, I) we get Line(H, I) == altitude(H, B, C)
By power_of_a_point_definition on A, C, E, Circle(B, C, E) we get log(distance(A, C)) + log(distance(A, E)) == log(power_of_a_point(A, Circle(B, C, E)))
By power_of_a_point_definition on I, A, E, Circle(A, B, D) we get log(distance(A, I)) + log(distance(E, I)) == log(power_of_a_point(I, Circle(A, B, D)))
By altitude_definition on A, H, F, f we get f == altitude(A, F, H)
By altitude_definition on H, D, B, Line(H, I) we get Line(H, I) == altitude(H, B, D)
By altitude_definition on D, I, H, g we get g == altitude(D, H, I)
By sas_anti_similarity on B, G, C, F, G, E we get anti_similar_triangles(B, C, G, F, E, G)
By altitude_definition on B, H, K, f we get f == altitude(B, H, K)
By power_of_a_point_definition on G, D, A, Circle(A, B, D) we get log(distance(D, G)) + log(distance(A, G)) == log(power_of_a_point(G, Circle(A, B, D)))
By altitude_definition on I, C, B, Line(H, I) we get Line(H, I) == altitude(I, B, C)
By sas_anti_similarity on E, B, F, A, B, G we get anti_similar_triangles(A, B, G, E, B, F)
By power_of_a_point_definition on D, B, C, Circle(B, C, E) we get log(distance(B, D)) + log(distance(C, D)) == log(power_of_a_point(D, Circle(B, C, E)))
By collinear_definition on midpoint(C, D), C, D we get C in Line(D, midpoint(C, D)), D in Line(C, midpoint(C, D)), Line(C, midpoint(C, D)) == Line(D, midpoint(C, D)), 0 == 2 * angle(C, midpoint(C, D), D) mod 360
By altitude_definition on H, D, C, Line(H, I) we get Line(H, I) == altitude(H, C, D)
By power_of_a_point_definition on G, J, H, c we get log(power_of_a_point(G, c)) == log(distance(G, J)) + log(distance(G, H))
By sas_anti_similarity on A, B, G, E, B, F we get anti_similar_triangles(A, B, G, E, B, F)
By altitude_definition on C, I, H, g we get g == altitude(C, H, I)
By sas_anti_similarity on F, B, E, G, B, A we get anti_similar_triangles(A, B, G, E, B, F)
By sas_anti_similarity on C, G, B, E, G, F we get anti_similar_triangles(B, C, G, F, E, G)
By altitude_definition on B, H, I, g we get g == altitude(B, H, I)
By sas_anti_similarity on F, G, E, B, G, C we get anti_similar_triangles(B, C, G, F, E, G)
By sas_anti_similarity on G, B, A, F, B, E we get anti_similar_triangles(A, B, G, E, B, F)
By altitude_definition on B, H, J, f we get f == altitude(B, H, J)
By collinear_definition on H, K, F we get K in Line(F, H), F in Line(H, K), Line(F, H) == Line(H, K), 0 == 2 * angle(K, H, F) mod 360
By altitude_definition on I, D, C, Line(H, I) we get Line(H, I) == altitude(I, C, D)
By power_of_a_point_definition on J, F, C, Circle(B, C, E) we get log(distance(F, J)) + log(distance(C, J)) == log(power_of_a_point(J, Circle(B, C, E)))
By altitude_definition on B, F, H, f we get f == altitude(B, F, H)
By altitude_definition on A, H, K, f we get f == altitude(A, H, K)
By power_of_a_point_definition on C, B, D, Circle(A, B, D) we get log(distance(B, C)) + log(distance(C, D)) == log(power_of_a_point(C, Circle(A, B, D)))
By power_of_a_point_definition on G, E, B, Circle(B, C, E) we get log(distance(E, G)) + log(distance(B, G)) == log(power_of_a_point(G, Circle(B, C, E)))
By power_of_a_point_definition on G, C, F, Circle(B, C, E) we get log(distance(C, G)) + log(distance(F, G)) == log(power_of_a_point(G, Circle(B, C, E)))
By sas_anti_similarity on C, A, B, F, A, E we get anti_similar_triangles(A, B, C, A, E, F)
By sas_anti_similarity on E, G, F, C, G, B we get anti_similar_triangles(B, C, G, F, E, G)
By altitude_definition on I, B, D, Line(H, I) we get Line(H, I) == altitude(I, B, D)
By collinear_definition on H, F, K we get F in Line(H, K), K in Line(F, H), Line(F, H) == Line(H, K), 0 == 2 * angle(F, H, K) mod 360
By collinear_definition on midpoint(C, D), D, C we get D in Line(C, midpoint(C, D)), C in Line(D, midpoint(C, D)), Line(C, midpoint(C, D)) == Line(D, midpoint(C, D)), 0 == 2 * angle(D, midpoint(C, D), C) mod 360
By sas_anti_similarity on F, A, E, C, A, B we get anti_similar_triangles(A, B, C, A, E, F)
By power_of_a_point_definition on F, B, A, Circle(A, B, D) we get log(distance(B, F)) + log(distance(A, F)) == log(power_of_a_point(F, Circle(A, B, D)))
By power_of_a_point_definition on K, F, C, Circle(B, C, E) we get log(distance(F, K)) + log(distance(C, K)) == log(power_of_a_point(K, Circle(B, C, E)))
By sas_anti_similarity on B, A, C, E, A, F we get anti_similar_triangles(A, B, C, A, E, F)
By power_of_a_point_definition on A, B, F, Circle(B, C, E) we get log(distance(A, B)) + log(distance(A, F)) == log(power_of_a_point(A, Circle(B, C, E)))
By power_of_a_point_definition on G, B, E, Circle(A, B, D) we get log(distance(B, G)) + log(distance(E, G)) == log(power_of_a_point(G, Circle(A, B, D)))
By power_of_a_point_definition on I, E, C, Circle(B, C, E) we get log(distance(E, I)) + log(distance(C, I)) == log(power_of_a_point(I, Circle(B, C, E)))
By isosceles_triangle_altitude_v3 on H, C, D we get identical(perpendicular_bisector(C, D), internal_angle_bisector(C, H, D), perpendicular_line(H, Line(C, D)))
By isosceles_triangle_altitude_v3 on H, D, C we get identical(perpendicular_bisector(C, D), internal_angle_bisector(C, H, D), perpendicular_line(H, Line(C, D)))
By power_of_a_point_definition on F, J, H, c we get log(power_of_a_point(F, c)) == log(distance(F, J)) + log(distance(F, H))
By power_of_a_point_definition on H, C, F, Circle(B, C, E) we get log(distance(C, H)) + log(distance(F, H)) == log(power_of_a_point(H, Circle(B, C, E)))
By power_of_a_point_definition on H, C, F, Circle(A, C, D) we get log(distance(C, H)) + log(distance(F, H)) == log(power_of_a_point(H, Circle(A, C, D)))
By power_of_a_point_definition on midpoint(C, D), D, C, Circle(A, C, D) we get log(power_of_a_point(midpoint(C, D), Circle(A, C, D))) == log(distance(D, midpoint(C, D))) + log(distance(C, midpoint(C, D)))
By power_of_a_point_definition on midpoint(C, D), D, C, Circle(C, D, E) we get log(power_of_a_point(midpoint(C, D), Circle(C, D, E))) == log(distance(D, midpoint(C, D))) + log(distance(C, midpoint(C, D)))
By power_of_a_point_definition on K, H, J, c we get log(power_of_a_point(K, c)) == log(distance(H, K)) + log(distance(J, K))
By between_implies_angles on C, midpoint(C, D), D we get 180 == angle(C, midpoint(C, D), D) mod 360, 0 == angle(midpoint(C, D), D, C) mod 360, 0 == angle(D, C, midpoint(C, D)) mod 360
By between_implies_angles on D, midpoint(C, D), C we get 180 == angle(D, midpoint(C, D), C) mod 360, 0 == angle(midpoint(C, D), C, D) mod 360, 0 == angle(C, D, midpoint(C, D)) mod 360
By concurrent_sufficient_conditions on Line(D, E), j, h we get concurrent(h, j, Line(D, E))
By concyclic_sufficient_conditions_v0 on H, F, D, E we get concyclic(D, E, F, H)
By concyclic_sufficient_conditions_v0 on I, E, H, F we get concyclic(E, F, H, I)
By concurrent_sufficient_conditions on i, Line(D, H), Line(D, F) we get concurrent(i, Line(D, F), Line(D, H))
By concurrent_sufficient_conditions on Line(D, F), k, f we get concurrent(f, k, Line(D, F))
By concurrent_sufficient_conditions on l, Line(D, F), i we get concurrent(i, l, Line(D, F))
By concurrent_sufficient_conditions on g, Line(D, F), Line(D, E) we get concurrent(g, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on g, Line(D, F), Line(D, H) we get concurrent(g, Line(D, F), Line(D, H))
By concurrent_sufficient_conditions on Line(D, H), Line(D, E), i we get concurrent(i, Line(D, E), Line(D, H))
By concurrent_sufficient_conditions on Line(D, F), g, l we get concurrent(g, l, Line(D, F))
By concurrent_sufficient_conditions on l, Line(D, H), Line(D, F) we get concurrent(l, Line(D, F), Line(D, H))
By concurrent_sufficient_conditions on radical_axis(c, Circle(A, C, D)), h, Line(A, H) we get concurrent(h, Line(A, H), radical_axis(c, Circle(A, C, D)))
By concurrent_sufficient_conditions on radical_axis(c, Circle(A, C, D)), h, i we get concurrent(h, i, radical_axis(c, Circle(A, C, D)))
By concurrent_sufficient_conditions on Line(A, J), i, radical_axis(c, Circle(A, C, D)) we get concurrent(i, Line(A, J), radical_axis(c, Circle(A, C, D)))
By concurrent_sufficient_conditions on radical_axis(c, Circle(A, C, D)), Line(A, J), Line(A, H) we get concurrent(Line(A, H), Line(A, J), radical_axis(c, Circle(A, C, D)))
By concurrent_sufficient_conditions on Line(D, E), l, Line(D, H) we get concurrent(l, Line(D, E), Line(D, H))
By concurrent_sufficient_conditions on h, radical_axis(c, Circle(A, C, D)), f we get concurrent(f, h, radical_axis(c, Circle(A, C, D)))
By concurrent_sufficient_conditions on Line(D, F), f, k we get concurrent(f, k, Line(D, F))
By concurrent_sufficient_conditions on Line(D, H), Line(D, F), Line(D, E) we get concurrent(Line(D, E), Line(D, F), Line(D, H))
By concyclic_sufficient_conditions_v1 on I, F, D, H we get concyclic(D, F, H, I)
By concurrent_sufficient_conditions on l, Line(D, E), Line(D, H) we get concurrent(l, Line(D, E), Line(D, H))
By concurrent_sufficient_conditions on f, radical_axis(c, Circle(A, C, D)), Line(A, H) we get concurrent(f, Line(A, H), radical_axis(c, Circle(A, C, D)))
By concurrent_sufficient_conditions on Line(A, H), h, radical_axis(c, Circle(A, C, D)) we get concurrent(h, Line(A, H), radical_axis(c, Circle(A, C, D)))
By concurrent_sufficient_conditions on Line(D, F), i, Line(D, E) we get concurrent(i, Line(D, E), Line(D, F))
By line_definition on midpoint(C, D), B, g we get g == Line(B, midpoint(C, D))
By concyclic_sufficient_conditions_v0 on D, F, I, E we get concyclic(D, E, F, I)
By concurrent_sufficient_conditions on i, Line(A, J), radical_axis(c, Circle(A, C, D)) we get concurrent(i, Line(A, J), radical_axis(c, Circle(A, C, D)))
By concurrent_sufficient_conditions on i, f, radical_axis(c, Circle(A, C, D)) we get concurrent(f, i, radical_axis(c, Circle(A, C, D)))
By concurrent_sufficient_conditions on g, l, Line(D, E) we get concurrent(g, l, Line(D, E))
By concyclic_sufficient_conditions_v0 on K, J, A, D we get concyclic(A, D, J, K)
By concurrent_sufficient_conditions on Line(D, F), Line(D, H), l we get concurrent(l, Line(D, F), Line(D, H))
By concurrent_sufficient_conditions on h, i, radical_axis(c, Circle(A, C, D)) we get concurrent(h, i, radical_axis(c, Circle(A, C, D)))
By concurrent_sufficient_conditions on Line(D, H), Line(D, E), Line(D, F) we get concurrent(Line(D, E), Line(D, F), Line(D, H))
By concurrent_sufficient_conditions on Line(D, F), i, Line(D, H) we get concurrent(i, Line(D, F), Line(D, H))
By concurrent_sufficient_conditions on Line(D, H), g, Line(D, F) we get concurrent(g, Line(D, F), Line(D, H))
By concurrent_sufficient_conditions on Line(D, F), Line(D, E), l we get concurrent(l, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on g, Line(D, E), Line(D, H) we get concurrent(g, Line(D, E), Line(D, H))
By concurrent_sufficient_conditions on i, radical_axis(c, Circle(A, C, D)), h we get concurrent(h, i, radical_axis(c, Circle(A, C, D)))
By concurrent_sufficient_conditions on Line(A, H), radical_axis(c, Circle(A, C, D)), Line(A, J) we get concurrent(Line(A, H), Line(A, J), radical_axis(c, Circle(A, C, D)))
By concurrent_sufficient_conditions on Line(D, E), Line(D, H), l we get concurrent(l, Line(D, E), Line(D, H))
By concurrent_sufficient_conditions on l, g, Line(D, F) we get concurrent(g, l, Line(D, F))
By concurrent_sufficient_conditions on Line(D, E), Line(E, H), h we get concurrent(h, Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on Line(D, E), i, Line(D, F) we get concurrent(i, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on l, Line(D, E), Line(D, F) we get concurrent(l, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on radical_axis(c, Circle(A, C, D)), Line(A, J), h we get concurrent(h, Line(A, J), radical_axis(c, Circle(A, C, D)))
By concurrent_sufficient_conditions on i, Line(D, E), l we get concurrent(i, l, Line(D, E))
By concurrent_sufficient_conditions on f, Line(D, F), k we get concurrent(f, k, Line(D, F))
By concurrent_sufficient_conditions on h, Line(D, E), Line(E, H) we get concurrent(h, Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on l, Line(D, F), Line(D, E) we get concurrent(l, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on i, Line(D, F), l we get concurrent(i, l, Line(D, F))
By concurrent_sufficient_conditions on i, Line(A, H), radical_axis(c, Circle(A, C, D)) we get concurrent(i, Line(A, H), radical_axis(c, Circle(A, C, D)))
By concurrent_sufficient_conditions on Line(D, F), l, Line(D, H) we get concurrent(l, Line(D, F), Line(D, H))
By concurrent_sufficient_conditions on Line(D, F), Line(D, E), Line(D, H) we get concurrent(Line(D, E), Line(D, F), Line(D, H))
By concurrent_sufficient_conditions on Line(D, H), Line(D, E), l we get concurrent(l, Line(D, E), Line(D, H))
By concurrent_sufficient_conditions on Line(D, F), l, Line(D, E) we get concurrent(l, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(D, E), g, l we get concurrent(g, l, Line(D, E))
By concurrent_sufficient_conditions on g, l, Line(D, F) we get concurrent(g, l, Line(D, F))
By concurrent_sufficient_conditions on radical_axis(c, Circle(A, C, D)), Line(A, H), f we get concurrent(f, Line(A, H), radical_axis(c, Circle(A, C, D)))
By concurrent_sufficient_conditions on l, Line(D, H), Line(D, E) we get concurrent(l, Line(D, E), Line(D, H))
By concurrent_sufficient_conditions on radical_axis(c, Circle(A, C, D)), f, Line(A, J) we get concurrent(f, Line(A, J), radical_axis(c, Circle(A, C, D)))
By concurrent_sufficient_conditions on Line(E, H), Line(D, E), h we get concurrent(h, Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on g, i, Line(D, E) we get concurrent(g, i, Line(D, E))
By concurrent_sufficient_conditions on radical_axis(c, Circle(A, C, D)), Line(A, H), i we get concurrent(i, Line(A, H), radical_axis(c, Circle(A, C, D)))
By concurrent_sufficient_conditions on Line(D, E), i, Line(D, H) we get concurrent(i, Line(D, E), Line(D, H))
By concurrent_sufficient_conditions on Line(A, J), radical_axis(c, Circle(A, C, D)), f we get concurrent(f, Line(A, J), radical_axis(c, Circle(A, C, D)))
By concurrent_sufficient_conditions on radical_axis(c, Circle(A, C, D)), i, f we get concurrent(f, i, radical_axis(c, Circle(A, C, D)))
By concurrent_sufficient_conditions on Line(D, H), Line(D, E), g we get concurrent(g, Line(D, E), Line(D, H))
By concurrent_sufficient_conditions on i, Line(D, F), Line(D, H) we get concurrent(i, Line(D, F), Line(D, H))
By concurrent_sufficient_conditions on Line(D, E), Line(D, F), g we get concurrent(g, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(D, E), Line(D, F), Line(D, H) we get concurrent(Line(D, E), Line(D, F), Line(D, H))
By concurrent_sufficient_conditions on j, h, Line(D, E) we get concurrent(h, j, Line(D, E))
By concurrent_sufficient_conditions on h, radical_axis(c, Circle(A, C, D)), Line(A, J) we get concurrent(h, Line(A, J), radical_axis(c, Circle(A, C, D)))
By concurrent_sufficient_conditions on Line(A, H), Line(A, J), radical_axis(c, Circle(A, C, D)) we get concurrent(Line(A, H), Line(A, J), radical_axis(c, Circle(A, C, D)))
By tangent_definition_from_perpendicularity_v0 on D, Line(D, H), Circle(A, B, D) we get perpendicular(Line(D, H), Line(D, center(Circle(A, B, D))))
By concurrent_sufficient_conditions on radical_axis(c, Circle(A, C, D)), i, Line(A, H) we get concurrent(i, Line(A, H), radical_axis(c, Circle(A, C, D)))
By concurrent_sufficient_conditions on l, i, Line(D, E) we get concurrent(i, l, Line(D, E))
By concurrent_sufficient_conditions on h, Line(D, E), j we get concurrent(h, j, Line(D, E))
By concurrent_sufficient_conditions on Line(D, E), Line(D, H), i we get concurrent(i, Line(D, E), Line(D, H))
By concurrent_sufficient_conditions on f, radical_axis(c, Circle(A, C, D)), h we get concurrent(f, h, radical_axis(c, Circle(A, C, D)))
By concurrent_sufficient_conditions on Line(F, I), Line(D, F), f we get concurrent(f, Line(D, F), Line(F, I))
By concurrent_sufficient_conditions on Line(D, E), Line(D, F), l we get concurrent(l, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on f, Line(A, J), radical_axis(c, Circle(A, C, D)) we get concurrent(f, Line(A, J), radical_axis(c, Circle(A, C, D)))
By concurrent_sufficient_conditions on i, g, Line(D, F) we get concurrent(g, i, Line(D, F))
By concurrent_sufficient_conditions on Line(D, E), g, Line(D, H) we get concurrent(g, Line(D, E), Line(D, H))
By concurrent_sufficient_conditions on f, Line(A, H), radical_axis(c, Circle(A, C, D)) we get concurrent(f, Line(A, H), radical_axis(c, Circle(A, C, D)))
By concurrent_sufficient_conditions on l, Line(D, E), g we get concurrent(g, l, Line(D, E))
By concurrent_sufficient_conditions on Line(F, I), f, Line(D, F) we get concurrent(f, Line(D, F), Line(F, I))
By concurrent_sufficient_conditions on Line(D, H), i, Line(D, F) we get concurrent(i, Line(D, F), Line(D, H))
By concurrent_sufficient_conditions on g, Line(D, E), Line(D, F) we get concurrent(g, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on g, Line(D, H), Line(D, E) we get concurrent(g, Line(D, E), Line(D, H))
By concurrent_sufficient_conditions on h, Line(E, H), Line(D, E) we get concurrent(h, Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on Line(D, F), g, Line(D, E) we get concurrent(g, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on j, Line(D, E), h we get concurrent(h, j, Line(D, E))
By concurrent_sufficient_conditions on f, h, radical_axis(c, Circle(A, C, D)) we get concurrent(f, h, radical_axis(c, Circle(A, C, D)))
By concurrent_sufficient_conditions on Line(D, F), Line(D, H), Line(D, E) we get concurrent(Line(D, E), Line(D, F), Line(D, H))
By concurrent_sufficient_conditions on h, j, Line(D, E) we get concurrent(h, j, Line(D, E))
By concurrent_sufficient_conditions on j, Line(D, E), Line(E, H) we get concurrent(j, Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on Line(D, E), l, i we get concurrent(i, l, Line(D, E))
By concurrent_sufficient_conditions on radical_axis(c, Circle(A, C, D)), Line(A, H), Line(A, J) we get concurrent(Line(A, H), Line(A, J), radical_axis(c, Circle(A, C, D)))
By concurrent_sufficient_conditions on Line(D, F), Line(D, E), i we get concurrent(i, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on radical_axis(c, Circle(A, C, D)), i, h we get concurrent(h, i, radical_axis(c, Circle(A, C, D)))
By concurrent_sufficient_conditions on Line(D, E), i, l we get concurrent(i, l, Line(D, E))
By concurrent_sufficient_conditions on f, k, Line(D, F) we get concurrent(f, k, Line(D, F))
By concurrent_sufficient_conditions on Line(D, H), g, Line(D, E) we get concurrent(g, Line(D, E), Line(D, H))
By concurrent_sufficient_conditions on radical_axis(c, Circle(A, C, D)), Line(A, H), h we get concurrent(h, Line(A, H), radical_axis(c, Circle(A, C, D)))
By concurrent_sufficient_conditions on Line(D, E), Line(D, H), Line(D, F) we get concurrent(Line(D, E), Line(D, F), Line(D, H))
By concurrent_sufficient_conditions on Line(A, J), f, radical_axis(c, Circle(A, C, D)) we get concurrent(f, Line(A, J), radical_axis(c, Circle(A, C, D)))
By concurrent_sufficient_conditions on Line(D, H), Line(D, F), g we get concurrent(g, Line(D, F), Line(D, H))
By concurrent_sufficient_conditions on k, Line(D, F), Line(F, I) we get concurrent(k, Line(D, F), Line(F, I))
By concurrent_sufficient_conditions on Line(D, H), l, Line(D, F) we get concurrent(l, Line(D, F), Line(D, H))
By concurrent_sufficient_conditions on Line(A, H), i, radical_axis(c, Circle(A, C, D)) we get concurrent(i, Line(A, H), radical_axis(c, Circle(A, C, D)))
By concurrent_sufficient_conditions on i, Line(D, H), Line(D, E) we get concurrent(i, Line(D, E), Line(D, H))
By concurrent_sufficient_conditions on Line(D, E), l, Line(D, F) we get concurrent(l, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on radical_axis(c, Circle(A, C, D)), h, Line(A, J) we get concurrent(h, Line(A, J), radical_axis(c, Circle(A, C, D)))
By concurrent_sufficient_conditions on f, Line(D, F), Line(F, I) we get concurrent(f, Line(D, F), Line(F, I))
By concurrent_sufficient_conditions on Line(D, F), g, i we get concurrent(g, i, Line(D, F))
By concurrent_sufficient_conditions on h, f, radical_axis(c, Circle(A, C, D)) we get concurrent(f, h, radical_axis(c, Circle(A, C, D)))
By concurrent_sufficient_conditions on Line(E, H), j, Line(D, E) we get concurrent(j, Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on i, h, radical_axis(c, Circle(A, C, D)) we get concurrent(h, i, radical_axis(c, Circle(A, C, D)))
By concurrent_sufficient_conditions on f, Line(F, I), Line(D, F) we get concurrent(f, Line(D, F), Line(F, I))
By concurrent_sufficient_conditions on Line(D, F), f, Line(F, I) we get concurrent(f, Line(D, F), Line(F, I))
By concurrent_sufficient_conditions on Line(D, F), Line(D, H), g we get concurrent(g, Line(D, F), Line(D, H))
By concurrent_sufficient_conditions on Line(D, E), h, Line(E, H) we get concurrent(h, Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on Line(D, H), Line(D, F), i we get concurrent(i, Line(D, F), Line(D, H))
By concurrent_sufficient_conditions on Line(F, I), k, Line(D, F) we get concurrent(k, Line(D, F), Line(F, I))
By concurrent_sufficient_conditions on Line(D, E), Line(D, H), g we get concurrent(g, Line(D, E), Line(D, H))
By concurrent_sufficient_conditions on radical_axis(c, Circle(A, C, D)), f, h we get concurrent(f, h, radical_axis(c, Circle(A, C, D)))
By concurrent_sufficient_conditions on g, Line(D, F), l we get concurrent(g, l, Line(D, F))
By concurrent_sufficient_conditions on Line(D, F), i, g we get concurrent(g, i, Line(D, F))
By concurrent_sufficient_conditions on Line(A, J), radical_axis(c, Circle(A, C, D)), i we get concurrent(i, Line(A, J), radical_axis(c, Circle(A, C, D)))
By concurrent_sufficient_conditions on Line(D, E), Line(E, H), j we get concurrent(j, Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on Line(A, H), radical_axis(c, Circle(A, C, D)), f we get concurrent(f, Line(A, H), radical_axis(c, Circle(A, C, D)))
By concurrent_sufficient_conditions on h, Line(A, H), radical_axis(c, Circle(A, C, D)) we get concurrent(h, Line(A, H), radical_axis(c, Circle(A, C, D)))
By concurrent_sufficient_conditions on Line(D, F), l, i we get concurrent(i, l, Line(D, F))
By concurrent_sufficient_conditions on Line(D, H), Line(D, F), l we get concurrent(l, Line(D, F), Line(D, H))
By concurrent_sufficient_conditions on radical_axis(c, Circle(A, C, D)), i, Line(A, J) we get concurrent(i, Line(A, J), radical_axis(c, Circle(A, C, D)))
By concurrent_sufficient_conditions on i, radical_axis(c, Circle(A, C, D)), Line(A, J) we get concurrent(i, Line(A, J), radical_axis(c, Circle(A, C, D)))
By concurrent_sufficient_conditions on Line(A, J), h, radical_axis(c, Circle(A, C, D)) we get concurrent(h, Line(A, J), radical_axis(c, Circle(A, C, D)))
By concurrent_sufficient_conditions on k, Line(F, I), Line(D, F) we get concurrent(k, Line(D, F), Line(F, I))
By concurrent_sufficient_conditions on i, Line(D, E), Line(D, F) we get concurrent(i, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on radical_axis(c, Circle(A, C, D)), f, Line(A, H) we get concurrent(f, Line(A, H), radical_axis(c, Circle(A, C, D)))
By concurrent_sufficient_conditions on i, g, Line(D, E) we get concurrent(g, i, Line(D, E))
By concurrent_sufficient_conditions on i, l, Line(D, E) we get concurrent(i, l, Line(D, E))
By concurrent_sufficient_conditions on Line(D, E), j, Line(E, H) we get concurrent(j, Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on Line(D, E), g, i we get concurrent(g, i, Line(D, E))
By concurrent_sufficient_conditions on j, Line(E, H), Line(D, E) we get concurrent(j, Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on g, Line(D, E), i we get concurrent(g, i, Line(D, E))
By concurrent_sufficient_conditions on h, radical_axis(c, Circle(A, C, D)), i we get concurrent(h, i, radical_axis(c, Circle(A, C, D)))
By concurrent_sufficient_conditions on Line(D, F), Line(F, I), k we get concurrent(k, Line(D, F), Line(F, I))
By concurrent_sufficient_conditions on Line(D, E), Line(D, F), i we get concurrent(i, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on f, i, radical_axis(c, Circle(A, C, D)) we get concurrent(f, i, radical_axis(c, Circle(A, C, D)))
By concurrent_sufficient_conditions on Line(D, H), l, Line(D, E) we get concurrent(l, Line(D, E), Line(D, H))
By concurrent_sufficient_conditions on i, radical_axis(c, Circle(A, C, D)), Line(A, H) we get concurrent(i, Line(A, H), radical_axis(c, Circle(A, C, D)))
By concurrent_sufficient_conditions on k, Line(D, F), f we get concurrent(f, k, Line(D, F))
By concurrent_sufficient_conditions on Line(D, E), i, g we get concurrent(g, i, Line(D, E))
By concurrent_sufficient_conditions on l, Line(D, F), Line(D, H) we get concurrent(l, Line(D, F), Line(D, H))
By concurrent_sufficient_conditions on Line(A, J), radical_axis(c, Circle(A, C, D)), Line(A, H) we get concurrent(Line(A, H), Line(A, J), radical_axis(c, Circle(A, C, D)))
By concurrent_sufficient_conditions on l, g, Line(D, E) we get concurrent(g, l, Line(D, E))
By concurrent_sufficient_conditions on h, Line(A, J), radical_axis(c, Circle(A, C, D)) we get concurrent(h, Line(A, J), radical_axis(c, Circle(A, C, D)))
By concurrent_sufficient_conditions on radical_axis(c, Circle(A, C, D)), f, i we get concurrent(f, i, radical_axis(c, Circle(A, C, D)))
By concurrent_sufficient_conditions on i, Line(D, E), Line(D, H) we get concurrent(i, Line(D, E), Line(D, H))
By concurrent_sufficient_conditions on Line(D, E), g, Line(D, F) we get concurrent(g, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(A, H), f, radical_axis(c, Circle(A, C, D)) we get concurrent(f, Line(A, H), radical_axis(c, Circle(A, C, D)))
By concurrent_sufficient_conditions on g, i, Line(D, F) we get concurrent(g, i, Line(D, F))
By concurrent_sufficient_conditions on Line(A, H), radical_axis(c, Circle(A, C, D)), h we get concurrent(h, Line(A, H), radical_axis(c, Circle(A, C, D)))
By concurrent_sufficient_conditions on l, Line(D, F), g we get concurrent(g, l, Line(D, F))
By concurrent_sufficient_conditions on g, Line(D, F), i we get concurrent(g, i, Line(D, F))
By concurrent_sufficient_conditions on Line(D, F), Line(D, E), g we get concurrent(g, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on radical_axis(c, Circle(A, C, D)), h, f we get concurrent(f, h, radical_axis(c, Circle(A, C, D)))
By concurrent_sufficient_conditions on Line(D, F), k, Line(F, I) we get concurrent(k, Line(D, F), Line(F, I))
By concurrent_sufficient_conditions on i, l, Line(D, F) we get concurrent(i, l, Line(D, F))
By concurrent_sufficient_conditions on Line(A, H), radical_axis(c, Circle(A, C, D)), i we get concurrent(i, Line(A, H), radical_axis(c, Circle(A, C, D)))
By concurrent_sufficient_conditions on Line(D, E), l, g we get concurrent(g, l, Line(D, E))
By concurrent_sufficient_conditions on Line(A, J), radical_axis(c, Circle(A, C, D)), h we get concurrent(h, Line(A, J), radical_axis(c, Circle(A, C, D)))
By concurrent_sufficient_conditions on Line(F, I), Line(D, F), k we get concurrent(k, Line(D, F), Line(F, I))
By concurrent_sufficient_conditions on Line(D, F), Line(F, I), f we get concurrent(f, Line(D, F), Line(F, I))
By concurrent_sufficient_conditions on g, Line(D, H), Line(D, F) we get concurrent(g, Line(D, F), Line(D, H))
By concurrent_sufficient_conditions on l, i, Line(D, F) we get concurrent(i, l, Line(D, F))
By concurrent_sufficient_conditions on Line(D, H), i, Line(D, E) we get concurrent(i, Line(D, E), Line(D, H))
By concurrent_sufficient_conditions on i, Line(D, F), g we get concurrent(g, i, Line(D, F))
By concurrent_sufficient_conditions on Line(D, F), Line(D, H), i we get concurrent(i, Line(D, F), Line(D, H))
By concurrent_sufficient_conditions on i, radical_axis(c, Circle(A, C, D)), f we get concurrent(f, i, radical_axis(c, Circle(A, C, D)))
By concurrent_sufficient_conditions on h, radical_axis(c, Circle(A, C, D)), Line(A, H) we get concurrent(h, Line(A, H), radical_axis(c, Circle(A, C, D)))
By concurrent_sufficient_conditions on Line(E, H), Line(D, E), j we get concurrent(j, Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on radical_axis(c, Circle(A, C, D)), Line(A, J), f we get concurrent(f, Line(A, J), radical_axis(c, Circle(A, C, D)))
By concurrent_sufficient_conditions on Line(D, F), g, Line(D, H) we get concurrent(g, Line(D, F), Line(D, H))
By concurrent_sufficient_conditions on Line(D, F), l, g we get concurrent(g, l, Line(D, F))
By concurrent_sufficient_conditions on k, f, Line(D, F) we get concurrent(f, k, Line(D, F))
By concurrent_sufficient_conditions on Line(E, H), h, Line(D, E) we get concurrent(h, Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on Line(A, J), Line(A, H), radical_axis(c, Circle(A, C, D)) we get concurrent(Line(A, H), Line(A, J), radical_axis(c, Circle(A, C, D)))
By concurrent_sufficient_conditions on Line(D, F), i, l we get concurrent(i, l, Line(D, F))
By concurrent_sufficient_conditions on radical_axis(c, Circle(A, C, D)), Line(A, J), i we get concurrent(i, Line(A, J), radical_axis(c, Circle(A, C, D)))
By concurrent_sufficient_conditions on i, Line(D, F), Line(D, E) we get concurrent(i, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on f, radical_axis(c, Circle(A, C, D)), i we get concurrent(f, i, radical_axis(c, Circle(A, C, D)))
By concurrent_sufficient_conditions on f, radical_axis(c, Circle(A, C, D)), Line(A, J) we get concurrent(f, Line(A, J), radical_axis(c, Circle(A, C, D)))
By concurrent_sufficient_conditions on Line(D, E), h, j we get concurrent(h, j, Line(D, E))
By concurrent_sufficient_conditions on l, Line(D, E), i we get concurrent(i, l, Line(D, E))
By concurrent_sufficient_conditions on i, Line(D, E), g we get concurrent(g, i, Line(D, E))
By concurrent_sufficient_conditions on g, Line(D, E), l we get concurrent(g, l, Line(D, E))
By radical_axis_is_perpendicular_to_center_line on radical_axis(c, Circle(A, C, D)), c, Circle(A, C, D) we get perpendicular(radical_axis(c, Circle(A, C, D)), Line(center(c), center(Circle(A, C, D))))
By tangent_definition_from_perpendicularity_v0 on E, Line(E, H), Circle(A, B, D) we get perpendicular(Line(E, H), Line(E, center(Circle(A, B, D))))
By median_definition on center(c), A, C, Line(I, center(c)) we get Line(I, center(c)) == median(center(c), A, C)
By line_intersection_definition on A, Line(A, J), Line(A, center(c)) we get A == line_intersection(Line(A, J), Line(A, center(c)))
By line_intersection_definition on A, radical_axis(c, Circle(A, C, D)), Line(A, center(c)) we get A == line_intersection(Line(A, center(c)), radical_axis(c, Circle(A, C, D)))
By line_intersection_definition on H, k, Line(H, center(c)) we get H == line_intersection(k, Line(H, center(c)))
By line_intersection_definition on center(c), Line(A, center(c)), Line(J, center(c)) we get center(c) == line_intersection(Line(A, center(c)), Line(J, center(c)))
By line_intersection_definition on I, Line(I, center(c)), l we get I == line_intersection(l, Line(I, center(c)))
By line_intersection_definition on E, Line(D, E), Line(E, F) we get E == line_intersection(Line(D, E), Line(E, F))
By line_intersection_definition on J, Line(A, J), Line(J, center(c)) we get J == line_intersection(Line(A, J), Line(J, center(c)))
By line_intersection_definition on center(c), Line(H, center(c)), Line(I, center(c)) we get center(c) == line_intersection(Line(H, center(c)), Line(I, center(c)))
By perpendicular_line_definition on midpoint(C, D), g, i we get g == perpendicular_line(midpoint(C, D), i)
By median_definition on center(c), C, G, Line(H, center(c)) we get Line(H, center(c)) == median(center(c), C, G)
By line_intersection_definition on center(c), Line(J, center(c)), Line(H, center(c)) we get center(c) == line_intersection(Line(H, center(c)), Line(J, center(c)))
By line_intersection_definition on center(c), Line(I, center(c)), Line(J, center(c)) we get center(c) == line_intersection(Line(I, center(c)), Line(J, center(c)))
By line_intersection_definition on I, Line(H, I), Line(I, center(c)) we get I == line_intersection(Line(H, I), Line(I, center(c)))
By line_intersection_definition on J, k, Line(J, center(c)) we get J == line_intersection(k, Line(J, center(c)))
By perpendicular_line_definition on midpoint(C, D), g, Line(H, I) we get g == perpendicular_line(midpoint(C, D), Line(H, I))
By line_intersection_definition on E, Line(E, F), j we get E == line_intersection(j, Line(E, F))
By line_intersection_definition on E, Line(E, F), h we get E == line_intersection(h, Line(E, F))
By line_intersection_definition on F, Line(E, F), f we get F == line_intersection(f, Line(E, F))
By line_intersection_definition on E, Line(E, H), Line(E, F) we get E == line_intersection(Line(E, F), Line(E, H))
By line_intersection_definition on A, i, Line(A, center(c)) we get A == line_intersection(i, Line(A, center(c)))
By line_intersection_definition on A, Line(A, center(c)), Line(A, H) we get A == line_intersection(Line(A, H), Line(A, center(c)))
By line_intersection_definition on H, Line(H, center(c)), Line(A, H) we get H == line_intersection(Line(A, H), Line(H, center(c)))
By line_intersection_definition on center(c), Line(H, center(c)), Line(A, center(c)) we get center(c) == line_intersection(Line(A, center(c)), Line(H, center(c)))
By line_intersection_definition on center(c), Line(I, center(c)), Line(A, center(c)) we get center(c) == line_intersection(Line(A, center(c)), Line(I, center(c)))
By line_intersection_definition on H, Line(D, H), Line(H, center(c)) we get H == line_intersection(Line(D, H), Line(H, center(c)))
By line_intersection_definition on J, Line(I, J), Line(J, center(c)) we get J == line_intersection(Line(I, J), Line(J, center(c)))
By line_intersection_definition on F, Line(F, I), Line(E, F) we get F == line_intersection(Line(E, F), Line(F, I))
By line_intersection_definition on F, Line(E, F), k we get F == line_intersection(k, Line(E, F))
By line_intersection_definition on H, Line(H, I), Line(H, center(c)) we get H == line_intersection(Line(H, I), Line(H, center(c)))
By line_intersection_definition on A, Line(A, center(c)), h we get A == line_intersection(h, Line(A, center(c)))
By line_intersection_definition on I, Line(F, I), Line(I, center(c)) we get I == line_intersection(Line(F, I), Line(I, center(c)))
By line_intersection_definition on F, Line(E, F), Line(D, F) we get F == line_intersection(Line(D, F), Line(E, F))
By line_intersection_definition on I, h, Line(I, center(c)) we get I == line_intersection(h, Line(I, center(c)))
By line_intersection_definition on I, Line(I, J), Line(I, center(c)) we get I == line_intersection(Line(I, J), Line(I, center(c)))
By line_intersection_definition on A, f, Line(A, center(c)) we get A == line_intersection(f, Line(A, center(c)))
By line_intersection_definition on H, Line(E, H), Line(H, center(c)) we get H == line_intersection(Line(E, H), Line(H, center(c)))
By tangents_angle_bisector on H, E, D, Circle(A, B, D) we get angle(E, H, center(Circle(A, B, D))) == angle(center(Circle(A, B, D)), H, D) mod 360
By tangents_angle_bisector on H, D, E, Circle(A, B, D) we get angle(D, H, center(Circle(A, B, D))) == angle(center(Circle(A, B, D)), H, E) mod 360
By same_angle_converse_v1 on D, B, midpoint(C, D), C we get collinear(B, D, midpoint(C, D))
By same_angle_v1 on F, K, H, E we get angle(H, F, E) == angle(K, F, E) mod 360
By same_angle_v2 on F, J, H, E we get angle(J, F, E) == angle(H, F, E) + 180 mod 360
By projection_definition on D, midpoint(C, D), Line(H, I) we get midpoint(C, D) == projection(D, Line(H, I))
By same_angle_converse_v0 on C, midpoint(C, D), B, D we get collinear(B, C, midpoint(C, D))
By perpendicular_direction_conditions_v0_r on A, D, midpoint(C, D), C we get 180 == 2 * direction(A, D) - 2 * direction(midpoint(C, D), C) mod 360
By same_angle_v3 on F, J, C, E we get angle(J, F, E) == angle(C, F, E) + 180 mod 360
By same_angle_v0 on E, I, C, F we get angle(C, E, F) == angle(I, E, F) mod 360
By between_imply_not_between on H, G, F we get collinear_and_not_between(F, H, G)
By same_angle_v2 on F, J, K, E we get angle(J, F, E) == angle(K, F, E) + 180 mod 360
By same_angle_v1 on F, G, K, E we get angle(G, F, E) == angle(K, F, E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), D, A, G we get 180 == 2 * direction(midpoint(C, D), D) - 2 * direction(A, G) mod 360
By same_angle_v2 on F, J, G, E we get angle(J, F, E) == angle(G, F, E) + 180 mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), C, D, A we get 180 == 2 * direction(midpoint(C, D), C) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), C, D, G we get 180 == 2 * direction(midpoint(C, D), C) - 2 * direction(D, G) mod 360
By same_angle_v1 on F, C, K, E we get angle(C, F, E) == angle(K, F, E) mod 360
By projection_definition on C, midpoint(C, D), Line(H, I) we get midpoint(C, D) == projection(C, Line(H, I))
By same_angle_v1 on F, H, C, E we get angle(C, F, E) == angle(H, F, E) mod 360
By same_angle_v1 on F, H, G, E we get angle(G, F, E) == angle(H, F, E) mod 360
By same_angle_v2 on E, I, A, F we get angle(I, E, F) == angle(A, E, F) + 180 mod 360
By perpendicular_direction_conditions_v0_r on D, G, midpoint(C, D), D we get 180 == 2 * direction(D, G) - 2 * direction(midpoint(C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on D, G, midpoint(C, D), C we get 180 == 2 * direction(D, G) - 2 * direction(midpoint(C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), C, A, D we get 180 == 2 * direction(midpoint(C, D), C) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), D, G, A we get 180 == 2 * direction(midpoint(C, D), D) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on G, A, midpoint(C, D), D we get 180 == 2 * direction(G, A) - 2 * direction(midpoint(C, D), D) mod 360
By between_imply_not_between on G, K, H we get collinear_and_not_between(H, G, K)
By perpendicular_direction_conditions_v0_r on midpoint(C, D), D, D, G we get 180 == 2 * direction(midpoint(C, D), D) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on H, I, midpoint(C, D), D we get 180 == 2 * direction(H, I) - 2 * direction(midpoint(C, D), D) mod 360
By projection_definition on H, midpoint(C, D), g we get midpoint(C, D) == projection(H, g)
By perpendicular_direction_conditions_v0_r on D, A, midpoint(C, D), D we get 180 == 2 * direction(D, A) - 2 * direction(midpoint(C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on D, A, midpoint(C, D), C we get 180 == 2 * direction(D, A) - 2 * direction(midpoint(C, D), C) mod 360
By between_imply_not_between on H, K, G we get collinear_and_not_between(G, H, K)
By perpendicular_direction_conditions_v0_r on midpoint(C, D), C, I, H we get 180 == 2 * direction(midpoint(C, D), C) - 2 * direction(I, H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), C, G, D we get 180 == 2 * direction(midpoint(C, D), C) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on G, D, midpoint(C, D), D we get 180 == 2 * direction(G, D) - 2 * direction(midpoint(C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on H, I, midpoint(C, D), C we get 180 == 2 * direction(H, I) - 2 * direction(midpoint(C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), D, I, H we get 180 == 2 * direction(midpoint(C, D), D) - 2 * direction(I, H) mod 360
By perpendicular_direction_conditions_v0_r on I, H, midpoint(C, D), C we get 180 == 2 * direction(I, H) - 2 * direction(midpoint(C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on G, D, midpoint(C, D), C we get 180 == 2 * direction(G, D) - 2 * direction(midpoint(C, D), C) mod 360
By projection_definition on I, midpoint(C, D), g we get midpoint(C, D) == projection(I, g)
By perpendicular_direction_conditions_v0_r on midpoint(C, D), D, D, A we get 180 == 2 * direction(midpoint(C, D), D) - 2 * direction(D, A) mod 360
By between_imply_not_between on C, H, F we get collinear_and_not_between(F, C, H)
By between_imply_not_between on H, K, F we get collinear_and_not_between(F, H, K)
By perpendicular_direction_conditions_v0_r on midpoint(C, D), D, A, D we get 180 == 2 * direction(midpoint(C, D), D) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on I, H, midpoint(C, D), D we get 180 == 2 * direction(I, H) - 2 * direction(midpoint(C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on G, A, midpoint(C, D), C we get 180 == 2 * direction(G, A) - 2 * direction(midpoint(C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), C, H, I we get 180 == 2 * direction(midpoint(C, D), C) - 2 * direction(H, I) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), D, H, I we get 180 == 2 * direction(midpoint(C, D), D) - 2 * direction(H, I) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), C, A, G we get 180 == 2 * direction(midpoint(C, D), C) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on A, G, midpoint(C, D), C we get 180 == 2 * direction(A, G) - 2 * direction(midpoint(C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), C, G, A we get 180 == 2 * direction(midpoint(C, D), C) - 2 * direction(G, A) mod 360
By between_imply_not_between on C, H, K we get collinear_and_not_between(H, C, K)
By perpendicular_direction_conditions_v0_r on midpoint(C, D), D, G, D we get 180 == 2 * direction(midpoint(C, D), D) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on A, G, midpoint(C, D), D we get 180 == 2 * direction(A, G) - 2 * direction(midpoint(C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on A, D, midpoint(C, D), D we get 180 == 2 * direction(A, D) - 2 * direction(midpoint(C, D), D) mod 360
By between_imply_not_between on C, H, J we get collinear_and_not_between(H, C, J)
By between_imply_not_between on J, K, H we get collinear_and_not_between(H, J, K)
By between_imply_not_between on H, K, J we get collinear_and_not_between(J, H, K)
By between_imply_not_between on K, H, C we get collinear_and_not_between(C, K, H)
By between_imply_not_between on F, K, H we get collinear_and_not_between(H, F, K)
By between_imply_not_between on H, G, J we get collinear_and_not_between(G, H, J)
By between_imply_not_between on F, H, C we get collinear_and_not_between(C, F, H)
By between_imply_not_between on J, G, H we get collinear_and_not_between(G, J, H)
By between_imply_not_between on J, F, H we get collinear_and_not_between(F, J, H)
By between_imply_not_between on J, H, C we get collinear_and_not_between(C, J, H)
By between_imply_not_between on H, F, J we get collinear_and_not_between(F, H, J)
By between_imply_not_between on F, G, H we get collinear_and_not_between(G, F, H)
By circle_radius_v0_r on E, Circle(B, C, E) we get radius(Circle(B, C, E)) == distance(E, center(Circle(B, C, E)))
By circle_radius_v0_r on D, Circle(A, B, D) we get radius(Circle(A, B, D)) == distance(D, center(Circle(A, B, D)))
By circle_radius_v0_r on E, Circle(A, B, D) we get radius(Circle(A, B, D)) == distance(E, center(Circle(A, B, D)))
By circle_radius_v0_r on C, Circle(B, C, E) we get radius(Circle(B, C, E)) == distance(C, center(Circle(B, C, E)))
By circle_radius_v0_r on B, Circle(B, C, E) we get radius(Circle(B, C, E)) == distance(B, center(Circle(B, C, E)))
By circle_radius_v0_r on B, Circle(A, B, D) we get radius(Circle(A, B, D)) == distance(B, center(Circle(A, B, D)))
By circle_radius_v0_r on F, Circle(B, C, E) we get radius(Circle(B, C, E)) == distance(F, center(Circle(B, C, E)))
By circle_radius_v0_r on A, Circle(A, B, D) we get radius(Circle(A, B, D)) == distance(A, center(Circle(A, B, D)))
By angle_to_center on E, A, B, Circle(A, B, D) we get 2 * angle(E, A, B) == angle(E, center(Circle(A, B, D)), B) mod 360
By angle_to_center on E, D, A, Circle(A, B, D) we get 2 * angle(E, D, A) == angle(E, center(Circle(A, B, D)), A) mod 360
By angle_to_center on B, A, D, Circle(A, B, D) we get 2 * angle(B, A, D) == angle(B, center(Circle(A, B, D)), D) mod 360
By angle_to_center on B, F, C, Circle(B, C, E) we get 2 * angle(B, F, C) == angle(B, center(Circle(B, C, E)), C) mod 360
By angle_to_center on D, E, A, Circle(A, B, D) we get 2 * angle(D, E, A) == angle(D, center(Circle(A, B, D)), A) mod 360
By tangent_lengths_equal on H, Line(E, H), Line(D, H), Circle(A, B, D) we get distance(H, line_circle_tangent_point(Line(D, H), Circle(A, B, D))) == distance(H, line_circle_tangent_point(Line(E, H), Circle(A, B, D)))
By angle_to_center on E, B, F, Circle(B, C, E) we get 2 * angle(E, B, F) == angle(E, center(Circle(B, C, E)), F) mod 360
By angle_to_center on B, D, E, Circle(A, B, D) we get 2 * angle(B, D, E) == angle(B, center(Circle(A, B, D)), E) mod 360
By angle_to_center on B, C, F, Circle(B, C, E) we get 2 * angle(B, C, F) == angle(B, center(Circle(B, C, E)), F) mod 360
By angle_to_center on D, A, B, Circle(A, B, D) we get 2 * angle(D, A, B) == angle(D, center(Circle(A, B, D)), B) mod 360
By angle_to_center on D, B, A, Circle(A, B, D) we get 2 * angle(D, B, A) == angle(D, center(Circle(A, B, D)), A) mod 360
By angle_to_center on D, A, E, Circle(A, B, D) we get 2 * angle(D, A, E) == angle(D, center(Circle(A, B, D)), E) mod 360
By angle_to_center on F, C, B, Circle(B, C, E) we get 2 * angle(F, C, B) == angle(F, center(Circle(B, C, E)), B) mod 360
By angle_to_center on C, F, E, Circle(B, C, E) we get 2 * angle(C, F, E) == angle(C, center(Circle(B, C, E)), E) mod 360
By angle_to_center on C, E, F, Circle(B, C, E) we get 2 * angle(C, E, F) == angle(C, center(Circle(B, C, E)), F) mod 360
By angle_to_center on F, E, C, Circle(B, C, E) we get 2 * angle(F, E, C) == angle(F, center(Circle(B, C, E)), C) mod 360
By angle_to_center on A, B, D, Circle(A, B, D) we get 2 * angle(A, B, D) == angle(A, center(Circle(A, B, D)), D) mod 360
By angle_to_center on B, C, E, Circle(B, C, E) we get 2 * angle(B, C, E) == angle(B, center(Circle(B, C, E)), E) mod 360
By angle_to_center on E, D, B, Circle(A, B, D) we get 2 * angle(E, D, B) == angle(E, center(Circle(A, B, D)), B) mod 360
By angle_to_center on E, C, F, Circle(B, C, E) we get 2 * angle(E, C, F) == angle(E, center(Circle(B, C, E)), F) mod 360
By angle_to_center on B, E, C, Circle(B, C, E) we get 2 * angle(B, E, C) == angle(B, center(Circle(B, C, E)), C) mod 360
By angle_to_center on B, D, A, Circle(A, B, D) we get 2 * angle(B, D, A) == angle(B, center(Circle(A, B, D)), A) mod 360
By angle_to_center on C, F, B, Circle(B, C, E) we get 2 * angle(C, F, B) == angle(C, center(Circle(B, C, E)), B) mod 360
By angle_to_center on C, B, E, Circle(B, C, E) we get 2 * angle(C, B, E) == angle(C, center(Circle(B, C, E)), E) mod 360
By angle_to_center on B, F, E, Circle(B, C, E) we get 2 * angle(B, F, E) == angle(B, center(Circle(B, C, E)), E) mod 360
By angle_to_center on A, D, E, Circle(A, B, D) we get 2 * angle(A, D, E) == angle(A, center(Circle(A, B, D)), E) mod 360
By angle_to_center on C, B, F, Circle(B, C, E) we get 2 * angle(C, B, F) == angle(C, center(Circle(B, C, E)), F) mod 360
By angle_to_center on B, A, E, Circle(A, B, D) we get 2 * angle(B, A, E) == angle(B, center(Circle(A, B, D)), E) mod 360
By angle_to_center on A, D, B, Circle(A, B, D) we get 2 * angle(A, D, B) == angle(A, center(Circle(A, B, D)), B) mod 360
By angle_to_center on F, C, E, Circle(B, C, E) we get 2 * angle(F, C, E) == angle(F, center(Circle(B, C, E)), E) mod 360
By angle_to_center on E, B, D, Circle(A, B, D) we get 2 * angle(E, B, D) == angle(E, center(Circle(A, B, D)), D) mod 360
By angle_to_center on E, C, B, Circle(B, C, E) we get 2 * angle(E, C, B) == angle(E, center(Circle(B, C, E)), B) mod 360
By angle_to_center on B, E, A, Circle(A, B, D) we get 2 * angle(B, E, A) == angle(B, center(Circle(A, B, D)), A) mod 360
By perpendicular_direction_conditions_v0_r on C, B, H, midpoint(C, D) we get 180 == 2 * direction(C, B) - 2 * direction(H, midpoint(C, D)) mod 360
By angle_to_center on F, B, E, Circle(B, C, E) we get 2 * angle(F, B, E) == angle(F, center(Circle(B, C, E)), E) mod 360
By angle_to_center on E, A, D, Circle(A, B, D) we get 2 * angle(E, A, D) == angle(E, center(Circle(A, B, D)), D) mod 360
By angle_to_center on E, F, B, Circle(B, C, E) we get 2 * angle(E, F, B) == angle(E, center(Circle(B, C, E)), B) mod 360
By angle_to_center on B, E, F, Circle(B, C, E) we get 2 * angle(B, E, F) == angle(B, center(Circle(B, C, E)), F) mod 360
By angle_to_center on A, E, B, Circle(A, B, D) we get 2 * angle(A, E, B) == angle(A, center(Circle(A, B, D)), B) mod 360
By angle_to_center on C, E, B, Circle(B, C, E) we get 2 * angle(C, E, B) == angle(C, center(Circle(B, C, E)), B) mod 360
By angle_to_center on E, B, C, Circle(B, C, E) we get 2 * angle(E, B, C) == angle(E, center(Circle(B, C, E)), C) mod 360
By angle_to_center on E, B, A, Circle(A, B, D) we get 2 * angle(E, B, A) == angle(E, center(Circle(A, B, D)), A) mod 360
By angle_to_center on A, E, D, Circle(A, B, D) we get 2 * angle(A, E, D) == angle(A, center(Circle(A, B, D)), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), I, B, D we get 180 == 2 * direction(midpoint(C, D), I) - 2 * direction(B, D) mod 360
By angle_to_center on F, E, B, Circle(B, C, E) we get 2 * angle(F, E, B) == angle(F, center(Circle(B, C, E)), B) mod 360
By angle_to_center on F, B, C, Circle(B, C, E) we get 2 * angle(F, B, C) == angle(F, center(Circle(B, C, E)), C) mod 360
By angle_to_center on D, B, E, Circle(A, B, D) we get 2 * angle(D, B, E) == angle(D, center(Circle(A, B, D)), E) mod 360
By angle_to_center on A, B, E, Circle(A, B, D) we get 2 * angle(A, B, E) == angle(A, center(Circle(A, B, D)), E) mod 360
By angle_to_center on B, E, D, Circle(A, B, D) we get 2 * angle(B, E, D) == angle(B, center(Circle(A, B, D)), D) mod 360
By angle_to_center on D, E, B, Circle(A, B, D) we get 2 * angle(D, E, B) == angle(D, center(Circle(A, B, D)), B) mod 360
By angle_to_center on E, F, C, Circle(B, C, E) we get 2 * angle(E, F, C) == angle(E, center(Circle(B, C, E)), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), I, B, C we get 180 == 2 * direction(midpoint(C, D), I) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on D, B, I, midpoint(C, D) we get 180 == 2 * direction(D, B) - 2 * direction(I, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(C, D), midpoint(C, D), C we get 180 == 2 * direction(H, midpoint(C, D)) - 2 * direction(midpoint(C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(C, D), H, midpoint(C, D) we get 180 == 2 * direction(C, midpoint(C, D)) - 2 * direction(H, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(C, D), midpoint(C, D), D we get 180 == 2 * direction(H, midpoint(C, D)) - 2 * direction(midpoint(C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), D, H, midpoint(C, D) we get 180 == 2 * direction(midpoint(C, D), D) - 2 * direction(H, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), H, B, D we get 180 == 2 * direction(midpoint(C, D), H) - 2 * direction(B, D) mod 360
By orthocenter_concurrency on I, B, C we get orthocenter(B, C, I) in altitude(I, B, C), orthocenter(B, C, I) in altitude(B, C, I), orthocenter(B, C, I) in altitude(C, B, I)
By perpendicular_direction_conditions_v0_r on C, midpoint(C, D), I, midpoint(C, D) we get 180 == 2 * direction(C, midpoint(C, D)) - 2 * direction(I, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, D, midpoint(C, D), I we get 180 == 2 * direction(C, D) - 2 * direction(midpoint(C, D), I) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(C, D), midpoint(C, D), I we get 180 == 2 * direction(C, midpoint(C, D)) - 2 * direction(midpoint(C, D), I) mod 360
By perpendicular_direction_conditions_v0_r on I, midpoint(C, D), midpoint(C, D), D we get 180 == 2 * direction(I, midpoint(C, D)) - 2 * direction(midpoint(C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), I, C, B we get 180 == 2 * direction(midpoint(C, D), I) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on I, midpoint(C, D), B, D we get 180 == 2 * direction(I, midpoint(C, D)) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(C, D), C, B we get 180 == 2 * direction(H, midpoint(C, D)) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(C, D), midpoint(C, D), I we get 180 == 2 * direction(D, midpoint(C, D)) - 2 * direction(midpoint(C, D), I) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), D, midpoint(C, D), H we get 180 == 2 * direction(midpoint(C, D), D) - 2 * direction(midpoint(C, D), H) mod 360
By perpendicular_direction_conditions_v0_r on I, midpoint(C, D), D, midpoint(C, D) we get 180 == 2 * direction(I, midpoint(C, D)) - 2 * direction(D, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(C, D), I, midpoint(C, D) we get 180 == 2 * direction(D, midpoint(C, D)) - 2 * direction(I, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on I, midpoint(C, D), midpoint(C, D), C we get 180 == 2 * direction(I, midpoint(C, D)) - 2 * direction(midpoint(C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on I, midpoint(C, D), C, midpoint(C, D) we get 180 == 2 * direction(I, midpoint(C, D)) - 2 * direction(C, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), H, C, midpoint(C, D) we get 180 == 2 * direction(midpoint(C, D), H) - 2 * direction(C, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), D, midpoint(C, D), I we get 180 == 2 * direction(midpoint(C, D), D) - 2 * direction(midpoint(C, D), I) mod 360
By perpendicular_direction_conditions_v0_r on C, B, midpoint(C, D), I we get 180 == 2 * direction(C, B) - 2 * direction(midpoint(C, D), I) mod 360
By perpendicular_direction_conditions_v0_r on B, D, H, midpoint(C, D) we get 180 == 2 * direction(B, D) - 2 * direction(H, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, B, midpoint(C, D), H we get 180 == 2 * direction(C, B) - 2 * direction(midpoint(C, D), H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), D, I, midpoint(C, D) we get 180 == 2 * direction(midpoint(C, D), D) - 2 * direction(I, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, C, midpoint(C, D), H we get 180 == 2 * direction(D, C) - 2 * direction(midpoint(C, D), H) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(C, D), H, midpoint(C, D) we get 180 == 2 * direction(D, midpoint(C, D)) - 2 * direction(H, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on B, C, midpoint(C, D), I we get 180 == 2 * direction(B, C) - 2 * direction(midpoint(C, D), I) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), H, midpoint(C, D), C we get 180 == 2 * direction(midpoint(C, D), H) - 2 * direction(midpoint(C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on B, D, midpoint(C, D), I we get 180 == 2 * direction(B, D) - 2 * direction(midpoint(C, D), I) mod 360
By perpendicular_direction_conditions_v0_r on I, midpoint(C, D), D, C we get 180 == 2 * direction(I, midpoint(C, D)) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), I, midpoint(C, D), C we get 180 == 2 * direction(midpoint(C, D), I) - 2 * direction(midpoint(C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on B, C, midpoint(C, D), H we get 180 == 2 * direction(B, C) - 2 * direction(midpoint(C, D), H) mod 360
By perpendicular_direction_conditions_v0_r on C, B, I, midpoint(C, D) we get 180 == 2 * direction(C, B) - 2 * direction(I, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on B, C, I, midpoint(C, D) we get 180 == 2 * direction(B, C) - 2 * direction(I, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on I, midpoint(C, D), C, B we get 180 == 2 * direction(I, midpoint(C, D)) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on C, D, H, midpoint(C, D) we get 180 == 2 * direction(C, D) - 2 * direction(H, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on I, midpoint(C, D), D, B we get 180 == 2 * direction(I, midpoint(C, D)) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on I, midpoint(C, D), B, C we get 180 == 2 * direction(I, midpoint(C, D)) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on D, B, H, midpoint(C, D) we get 180 == 2 * direction(D, B) - 2 * direction(H, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on B, C, H, midpoint(C, D) we get 180 == 2 * direction(B, C) - 2 * direction(H, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), C, midpoint(C, D), H we get 180 == 2 * direction(midpoint(C, D), C) - 2 * direction(midpoint(C, D), H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), H, B, C we get 180 == 2 * direction(midpoint(C, D), H) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), C, I, midpoint(C, D) we get 180 == 2 * direction(midpoint(C, D), C) - 2 * direction(I, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, B, midpoint(C, D), H we get 180 == 2 * direction(D, B) - 2 * direction(midpoint(C, D), H) mod 360
By perpendicular_direction_conditions_v0_r on D, C, H, midpoint(C, D) we get 180 == 2 * direction(D, C) - 2 * direction(H, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), H, C, B we get 180 == 2 * direction(midpoint(C, D), H) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), C, midpoint(C, D), I we get 180 == 2 * direction(midpoint(C, D), C) - 2 * direction(midpoint(C, D), I) mod 360
By perpendicular_direction_conditions_v0_r on C, D, I, midpoint(C, D) we get 180 == 2 * direction(C, D) - 2 * direction(I, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, B, midpoint(C, D), I we get 180 == 2 * direction(D, B) - 2 * direction(midpoint(C, D), I) mod 360
By perpendicular_direction_conditions_v0_r on B, D, midpoint(C, D), H we get 180 == 2 * direction(B, D) - 2 * direction(midpoint(C, D), H) mod 360
By perpendicular_direction_conditions_v0_r on B, D, I, midpoint(C, D) we get 180 == 2 * direction(B, D) - 2 * direction(I, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), H, D, midpoint(C, D) we get 180 == 2 * direction(midpoint(C, D), H) - 2 * direction(D, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), I, D, C we get 180 == 2 * direction(midpoint(C, D), I) - 2 * direction(D, C) mod 360
By parallel_line_angles_v1 on F, E, A, J we get parallel(Line(A, J), Line(E, F))
By perpendicular_direction_conditions_v0_r on H, midpoint(C, D), D, B we get 180 == 2 * direction(H, midpoint(C, D)) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), C, H, midpoint(C, D) we get 180 == 2 * direction(midpoint(C, D), C) - 2 * direction(H, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, D, midpoint(C, D), H we get 180 == 2 * direction(C, D) - 2 * direction(midpoint(C, D), H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), H, midpoint(C, D), D we get 180 == 2 * direction(midpoint(C, D), H) - 2 * direction(midpoint(C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(C, D), C, midpoint(C, D) we get 180 == 2 * direction(H, midpoint(C, D)) - 2 * direction(C, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(C, D), C, D we get 180 == 2 * direction(H, midpoint(C, D)) - 2 * direction(C, D) mod 360
By orthocenter_concurrency on H, B, C we get orthocenter(B, C, H) in altitude(H, B, C), orthocenter(B, C, H) in altitude(B, C, H), orthocenter(B, C, H) in altitude(C, B, H)
By perpendicular_direction_conditions_v0_r on midpoint(C, D), I, midpoint(C, D), D we get 180 == 2 * direction(midpoint(C, D), I) - 2 * direction(midpoint(C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(C, D), B, D we get 180 == 2 * direction(H, midpoint(C, D)) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), H, D, B we get 180 == 2 * direction(midpoint(C, D), H) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(C, D), D, C we get 180 == 2 * direction(H, midpoint(C, D)) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(C, D), midpoint(C, D), H we get 180 == 2 * direction(C, midpoint(C, D)) - 2 * direction(midpoint(C, D), H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), I, D, midpoint(C, D) we get 180 == 2 * direction(midpoint(C, D), I) - 2 * direction(D, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, C, midpoint(C, D), I we get 180 == 2 * direction(D, C) - 2 * direction(midpoint(C, D), I) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(C, D), D, midpoint(C, D) we get 180 == 2 * direction(H, midpoint(C, D)) - 2 * direction(D, midpoint(C, D)) mod 360
By anti_similar_triangle_basic_properties on A, C, G, F, D, G we get angle(A, C, G) == 0 - angle(F, D, G) mod 360, angle(C, G, A) == 0 - angle(D, G, F) mod 360, angle(G, A, C) == 0 - angle(G, F, D) mod 360, log(distance(A, C)) + log(distance(D, G)) == log(distance(D, F)) + log(distance(C, G)), log(distance(C, G)) + log(distance(F, G)) == log(distance(D, G)) + log(distance(A, G)), log(distance(A, G)) + log(distance(D, F)) == log(distance(F, G)) + log(distance(A, C))
By perpendicular_direction_conditions_v0_r on D, C, I, midpoint(C, D) we get 180 == 2 * direction(D, C) - 2 * direction(I, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on I, midpoint(C, D), C, D we get 180 == 2 * direction(I, midpoint(C, D)) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), I, C, D we get 180 == 2 * direction(midpoint(C, D), I) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), H, D, C we get 180 == 2 * direction(midpoint(C, D), H) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), H, C, D we get 180 == 2 * direction(midpoint(C, D), H) - 2 * direction(C, D) mod 360
By projection_definition on midpoint(C, D), D, i we get D == projection(midpoint(C, D), i)
By perpendicular_direction_conditions_v0_r on midpoint(C, D), I, C, midpoint(C, D) we get 180 == 2 * direction(midpoint(C, D), I) - 2 * direction(C, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(C, D), midpoint(C, D), H we get 180 == 2 * direction(D, midpoint(C, D)) - 2 * direction(midpoint(C, D), H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), I, D, B we get 180 == 2 * direction(midpoint(C, D), I) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(C, D), B, C we get 180 == 2 * direction(H, midpoint(C, D)) - 2 * direction(B, C) mod 360
By anti_similar_triangle_basic_properties on H, D, G, I, F, D we get angle(H, D, G) == 0 - angle(I, F, D) mod 360, angle(D, G, H) == 0 - angle(F, D, I) mod 360, angle(G, H, D) == 0 - angle(D, I, F) mod 360, log(distance(D, H)) + log(distance(D, F)) == log(distance(F, I)) + log(distance(D, G)), log(distance(D, F)) + log(distance(G, H)) == log(distance(D, G)) + log(distance(D, I)), log(distance(D, I)) + log(distance(D, H)) == log(distance(G, H)) + log(distance(F, I))
By anti_similar_triangle_basic_properties on B, G, A, D, F, A we get angle(B, G, A) == 0 - angle(D, F, A) mod 360, angle(G, A, B) == 0 - angle(F, A, D) mod 360, angle(A, B, G) == 0 - angle(A, D, F) mod 360, log(distance(B, G)) + log(distance(A, F)) == log(distance(D, F)) + log(distance(A, G)), log(distance(A, F)) + log(distance(A, B)) == log(distance(A, G)) + log(distance(A, D)), log(distance(A, B)) + log(distance(D, F)) == log(distance(A, D)) + log(distance(B, G))
By similar_triangle_basic_properties on G, D, F, H, D, I we get angle(G, D, F) == angle(H, D, I) mod 360, angle(D, F, G) == angle(D, I, H) mod 360, angle(F, G, D) == angle(I, H, D) mod 360, log(distance(D, G)) + log(distance(D, I)) == log(distance(D, H)) + log(distance(D, F)), log(distance(D, F)) + log(distance(H, I)) == log(distance(D, I)) + log(distance(F, G)), log(distance(F, G)) + log(distance(D, H)) == log(distance(H, I)) + log(distance(D, G))
By anti_similar_triangle_basic_properties on I, H, C, F, G, D we get angle(I, H, C) == 0 - angle(F, G, D) mod 360, angle(H, C, I) == 0 - angle(G, D, F) mod 360, angle(C, I, H) == 0 - angle(D, F, G) mod 360, log(distance(F, G)) + log(distance(C, H)) == log(distance(H, I)) + log(distance(D, G)), log(distance(C, H)) + log(distance(D, F)) == log(distance(D, G)) + log(distance(C, I)), log(distance(C, I)) + log(distance(F, G)) == log(distance(D, F)) + log(distance(H, I))
By between_imply_segment_sum on F, G, H we get distance(F, H) == distance(F, G) + distance(G, H)
By external_angle_bisector_definition_v0 on G, midpoint(C, D), A, D we get 180 == angle(G, D, midpoint(C, D)) + angle(A, D, midpoint(C, D)) mod 360
By between_imply_segment_sum on K, H, C we get distance(C, K) == distance(H, K) + distance(C, H)
By anti_similar_triangle_basic_properties on D, B, F, A, B, C we get angle(D, B, F) == 0 - angle(A, B, C) mod 360, angle(B, F, D) == 0 - angle(B, C, A) mod 360, angle(F, D, B) == 0 - angle(C, A, B) mod 360, log(distance(A, B)) + log(distance(B, F)) == log(distance(B, D)) + log(distance(B, C)), log(distance(B, C)) + log(distance(D, F)) == log(distance(B, F)) + log(distance(A, C)), log(distance(A, C)) + log(distance(B, D)) == log(distance(D, F)) + log(distance(A, B))
By anti_similar_triangle_basic_properties on F, D, G, I, C, H we get angle(F, D, G) == 0 - angle(I, C, H) mod 360, angle(D, G, F) == 0 - angle(C, H, I) mod 360, angle(G, F, D) == 0 - angle(H, I, C) mod 360, log(distance(C, I)) + log(distance(D, G)) == log(distance(D, F)) + log(distance(C, H)), log(distance(C, H)) + log(distance(F, G)) == log(distance(D, G)) + log(distance(H, I)), log(distance(F, G)) + log(distance(C, I)) == log(distance(H, I)) + log(distance(D, F))
By internal_angle_bisector_definition_v0 on B, midpoint(C, D), B, D we get angle(B, D, midpoint(C, D)) == angle(midpoint(C, D), D, B) mod 360
By anti_similar_triangle_basic_properties on D, F, I, G, D, H we get angle(D, F, I) == 0 - angle(G, D, H) mod 360, angle(F, I, D) == 0 - angle(D, H, G) mod 360, angle(I, D, F) == 0 - angle(H, G, D) mod 360, log(distance(D, F)) + log(distance(D, H)) == log(distance(D, G)) + log(distance(F, I)), log(distance(D, H)) + log(distance(D, I)) == log(distance(F, I)) + log(distance(G, H)), log(distance(D, I)) + log(distance(D, G)) == log(distance(G, H)) + log(distance(D, F))
By anti_similar_triangle_basic_properties on C, B, G, C, F, D we get angle(C, B, G) == 0 - angle(C, F, D) mod 360, angle(B, G, C) == 0 - angle(F, D, C) mod 360, angle(G, C, B) == 0 - angle(D, C, F) mod 360, log(distance(B, C)) + log(distance(D, F)) == log(distance(C, F)) + log(distance(B, G)), log(distance(B, G)) + log(distance(C, D)) == log(distance(D, F)) + log(distance(C, G)), log(distance(C, D)) + log(distance(B, C)) == log(distance(C, G)) + log(distance(C, F))
By between_imply_segment_sum on J, F, H we get distance(H, J) == distance(F, J) + distance(F, H)
By anti_similar_triangle_basic_properties on A, G, C, F, G, D we get angle(A, G, C) == 0 - angle(F, G, D) mod 360, angle(G, C, A) == 0 - angle(G, D, F) mod 360, angle(C, A, G) == 0 - angle(D, F, G) mod 360, log(distance(A, G)) + log(distance(D, G)) == log(distance(F, G)) + log(distance(C, G)), log(distance(C, G)) + log(distance(D, F)) == log(distance(D, G)) + log(distance(A, C)), log(distance(A, C)) + log(distance(F, G)) == log(distance(D, F)) + log(distance(A, G))
By similar_triangle_basic_properties on I, F, D, H, G, D we get angle(H, G, D) == angle(I, F, D) mod 360, angle(F, D, I) == angle(G, D, H) mod 360, angle(D, H, G) == angle(D, I, F) mod 360, log(distance(F, I)) + log(distance(D, G)) == log(distance(G, H)) + log(distance(D, F)), log(distance(D, F)) + log(distance(D, H)) == log(distance(D, G)) + log(distance(D, I)), log(distance(D, H)) + log(distance(F, I)) == log(distance(D, I)) + log(distance(G, H))
By between_imply_segment_sum on H, G, J we get distance(H, J) == distance(G, H) + distance(G, J)
By between_imply_segment_sum on C, H, F we get distance(C, F) == distance(C, H) + distance(F, H)
By between_imply_segment_sum on F, K, H we get distance(F, H) == distance(F, K) + distance(H, K)
By similar_triangle_basic_properties on G, H, D, F, I, D we get angle(F, I, D) == angle(G, H, D) mod 360, angle(H, D, G) == angle(I, D, F) mod 360, angle(D, F, I) == angle(D, G, H) mod 360, log(distance(F, I)) + log(distance(D, H)) == log(distance(G, H)) + log(distance(D, I)), log(distance(D, H)) + log(distance(D, F)) == log(distance(D, I)) + log(distance(D, G)), log(distance(D, F)) + log(distance(G, H)) == log(distance(D, G)) + log(distance(F, I))
By perpendicular_angle_conditions_v0 on A, D, midpoint(C, D) we get angle(A, D, midpoint(C, D)) == orientation(A, D, midpoint(C, D)) mod 360
By aa_anti_similarity on I, F, J, H, E, A we get anti_similar_triangles(A, E, H, J, F, I)
By anti_similar_triangle_basic_properties on C, B, A, F, B, D we get angle(C, B, A) == 0 - angle(F, B, D) mod 360, angle(B, A, C) == 0 - angle(B, D, F) mod 360, angle(A, C, B) == 0 - angle(D, F, B) mod 360, log(distance(B, C)) + log(distance(B, D)) == log(distance(B, F)) + log(distance(A, B)), log(distance(A, B)) + log(distance(D, F)) == log(distance(B, D)) + log(distance(A, C)), log(distance(A, C)) + log(distance(B, F)) == log(distance(D, F)) + log(distance(B, C))
By external_angle_bisector_definition_v0 on A, midpoint(C, D), A, D we get 180 == angle(A, D, midpoint(C, D)) + angle(A, D, midpoint(C, D)) mod 360
By reverse_direction on D, midpoint(C, D) we get 180 == direction(D, midpoint(C, D)) - direction(midpoint(C, D), D) mod 360
By anti_similar_triangle_basic_properties on D, A, F, B, A, G we get angle(D, A, F) == 0 - angle(B, A, G) mod 360, angle(A, F, D) == 0 - angle(A, G, B) mod 360, angle(F, D, A) == 0 - angle(G, B, A) mod 360, log(distance(A, B)) + log(distance(A, F)) == log(distance(A, D)) + log(distance(A, G)), log(distance(A, F)) + log(distance(B, G)) == log(distance(A, G)) + log(distance(D, F)), log(distance(B, G)) + log(distance(A, D)) == log(distance(D, F)) + log(distance(A, B))
By between_imply_segment_sum on C, H, J we get distance(C, J) == distance(C, H) + distance(H, J)
By between_imply_segment_sum on J, K, H we get distance(H, J) == distance(J, K) + distance(H, K)
By perpendicular_angle_conditions_v0 on midpoint(C, D), D, A we get angle(midpoint(C, D), D, A) == orientation(A, midpoint(C, D), D) mod 360
By similar_triangle_basic_properties on I, D, H, F, D, G we get angle(F, D, G) == angle(I, D, H) mod 360, angle(D, G, F) == angle(D, H, I) mod 360, angle(G, F, D) == angle(H, I, D) mod 360, log(distance(D, F)) + log(distance(D, H)) == log(distance(D, I)) + log(distance(D, G)), log(distance(D, G)) + log(distance(H, I)) == log(distance(D, H)) + log(distance(F, G)), log(distance(F, G)) + log(distance(D, I)) == log(distance(H, I)) + log(distance(D, F))
By reverse_direction on midpoint(C, D), D we get 180 == direction(midpoint(C, D), D) - direction(D, midpoint(C, D)) mod 360
By anti_similar_triangle_basic_properties on B, C, G, F, C, D we get angle(B, C, G) == 0 - angle(F, C, D) mod 360, angle(C, G, B) == 0 - angle(C, D, F) mod 360, angle(G, B, C) == 0 - angle(D, F, C) mod 360, log(distance(B, C)) + log(distance(C, D)) == log(distance(C, F)) + log(distance(C, G)), log(distance(C, D)) + log(distance(B, G)) == log(distance(C, G)) + log(distance(D, F)), log(distance(B, G)) + log(distance(C, F)) == log(distance(D, F)) + log(distance(B, C))
By perpendicular_angle_conditions_v0 on G, D, midpoint(C, D) we get angle(G, D, midpoint(C, D)) == orientation(D, midpoint(C, D), G) mod 360
By aa_anti_similarity on H, A, E, I, J, F we get anti_similar_triangles(A, E, H, J, F, I)
By external_angle_bisector_definition_v0 on G, midpoint(C, D), G, D we get 180 == angle(G, D, midpoint(C, D)) + angle(G, D, midpoint(C, D)) mod 360
By between_imply_segment_sum on H, K, G we get distance(G, H) == distance(H, K) + distance(G, K)
By reverse_direction on C, midpoint(C, D) we get 180 == direction(C, midpoint(C, D)) - direction(midpoint(C, D), C) mod 360
By perpendicular_angle_conditions_v0 on midpoint(C, D), D, G we get angle(midpoint(C, D), D, G) == orientation(D, G, midpoint(C, D)) mod 360
By internal_angle_bisector_definition_v0 on B, midpoint(C, D), B, C we get angle(B, C, midpoint(C, D)) == angle(midpoint(C, D), C, B) mod 360
By aa_anti_similarity on H, E, A, I, F, J we get anti_similar_triangles(A, E, H, J, F, I)
By reverse_direction on midpoint(C, D), C we get 180 == direction(midpoint(C, D), C) - direction(C, midpoint(C, D)) mod 360
By aa_anti_similarity on I, J, F, H, A, E we get anti_similar_triangles(A, E, H, J, F, I)
By anti_similar_triangle_basic_properties on I, C, H, J, C, A we get angle(I, C, H) == 0 - angle(J, C, A) mod 360, angle(C, H, I) == 0 - angle(C, A, J) mod 360, angle(H, I, C) == 0 - angle(A, J, C) mod 360, log(distance(C, I)) + log(distance(A, C)) == log(distance(C, J)) + log(distance(C, H)), log(distance(A, C)) + log(distance(H, I)) == log(distance(C, H)) + log(distance(A, J)), log(distance(A, J)) + log(distance(C, I)) == log(distance(H, I)) + log(distance(C, J))
By similar_triangle_basic_properties on D, E, H, D, A, I we get angle(D, A, I) == angle(D, E, H) mod 360, angle(A, I, D) == angle(E, H, D) mod 360, angle(H, D, E) == angle(I, D, A) mod 360, log(distance(A, D)) + log(distance(E, H)) == log(distance(D, E)) + log(distance(A, I)), log(distance(A, I)) + log(distance(D, H)) == log(distance(E, H)) + log(distance(D, I)), log(distance(D, H)) + log(distance(A, D)) == log(distance(D, I)) + log(distance(D, E))
By external_angle_bisector_definition_v0_r on E, B, F, D we get Line(B, D) == external_angle_bisector(E, D, F)
By external_angle_bisector_definition_v0_r on F, G, H, K we get Line(G, K) == external_angle_bisector(F, K, H)
By external_angle_bisector_definition_v0_r on G, B, H, F we get Line(B, F) == external_angle_bisector(G, F, H)
By internal_angle_bisector_definition_v0_r on D, G, E, F we get Line(F, G) == internal_angle_bisector(D, F, E)
By internal_angle_bisector_definition_v0_r on G, K, F, H we get Line(H, K) == internal_angle_bisector(F, H, G)
By external_angle_bisector_definition_v0_r on C, G, K, H we get Line(G, H) == external_angle_bisector(C, H, K)
By external_angle_bisector_definition_v0_r on J, C, H, K we get Line(C, K) == external_angle_bisector(H, K, J)
By external_angle_bisector_definition_v0_r on E, B, D, F we get Line(B, F) == external_angle_bisector(D, F, E)
By external_angle_bisector_definition_v0_r on C, J, F, H we get Line(H, J) == external_angle_bisector(C, H, F)
By internal_angle_bisector_definition_v0_r on G, J, F, H we get Line(H, J) == internal_angle_bisector(F, H, G)
By anti_similar_triangle_basic_properties on D, E, G, B, A, G we get angle(D, E, G) == 0 - angle(B, A, G) mod 360, angle(E, G, D) == 0 - angle(A, G, B) mod 360, angle(G, D, E) == 0 - angle(G, B, A) mod 360, log(distance(A, B)) + log(distance(E, G)) == log(distance(D, E)) + log(distance(A, G)), log(distance(A, G)) + log(distance(D, G)) == log(distance(E, G)) + log(distance(B, G)), log(distance(B, G)) + log(distance(D, E)) == log(distance(D, G)) + log(distance(A, B))
By similar_triangle_basic_properties on D, G, F, D, E, A we get angle(D, E, A) == angle(D, G, F) mod 360, angle(E, A, D) == angle(G, F, D) mod 360, angle(A, D, E) == angle(F, D, G) mod 360, log(distance(D, E)) + log(distance(F, G)) == log(distance(D, G)) + log(distance(A, E)), log(distance(A, E)) + log(distance(D, F)) == log(distance(F, G)) + log(distance(A, D)), log(distance(A, D)) + log(distance(D, G)) == log(distance(D, F)) + log(distance(D, E))
By concyclic_definition_0 on H, D, E, I we get I in Circle(D, E, H)
By similar_triangle_basic_properties on D, H, E, D, I, A we get angle(D, H, E) == angle(D, I, A) mod 360, angle(H, E, D) == angle(I, A, D) mod 360, angle(A, D, I) == angle(E, D, H) mod 360, log(distance(D, H)) + log(distance(A, I)) == log(distance(D, I)) + log(distance(E, H)), log(distance(A, I)) + log(distance(D, E)) == log(distance(E, H)) + log(distance(A, D)), log(distance(A, D)) + log(distance(D, H)) == log(distance(D, E)) + log(distance(D, I))
By external_angle_bisector_definition_v0_r on J, C, H, F we get Line(C, F) == external_angle_bisector(H, F, J)
By external_angle_bisector_definition_v0_r on F, C, E, D we get Line(C, D) == external_angle_bisector(E, D, F)
By internal_angle_bisector_definition_v0_r on H, F, H, J we get Line(F, J) == internal_angle_bisector(H, J, H)
By external_angle_bisector_definition_v0_r on D, I, J, H we get Line(H, I) == external_angle_bisector(D, H, J)
By similar_triangle_basic_properties on A, E, D, I, H, D we get angle(A, E, D) == angle(I, H, D) mod 360, angle(E, D, A) == angle(H, D, I) mod 360, angle(D, A, E) == angle(D, I, H) mod 360, log(distance(A, E)) + log(distance(D, H)) == log(distance(H, I)) + log(distance(D, E)), log(distance(D, E)) + log(distance(D, I)) == log(distance(D, H)) + log(distance(A, D)), log(distance(A, D)) + log(distance(H, I)) == log(distance(D, I)) + log(distance(A, E))
By external_angle_bisector_definition_v0_r on C, J, K, H we get Line(H, J) == external_angle_bisector(C, H, K)
By internal_angle_bisector_definition_v0_r on H, K, G, F we get Line(F, K) == internal_angle_bisector(G, F, H)
By collinear_definition on I, midpoint(C, D), H we get midpoint(C, D) in Line(H, I), H in Line(I, midpoint(C, D)), Line(H, I) == Line(I, midpoint(C, D)), 0 == 2 * angle(midpoint(C, D), I, H) mod 360
By power_of_a_point_tangent_converse_v1 on C, J, G, A we get tangent(Line(A, C), Circle(A, G, J))
By external_angle_bisector_definition_v0_r on B, C, midpoint(C, D), D we get Line(C, D) == external_angle_bisector(B, D, midpoint(C, D))
By similar_triangle_basic_properties on D, B, E, D, F, C we get angle(D, B, E) == angle(D, F, C) mod 360, angle(B, E, D) == angle(F, C, D) mod 360, angle(C, D, F) == angle(E, D, B) mod 360, log(distance(B, D)) + log(distance(C, F)) == log(distance(D, F)) + log(distance(B, E)), log(distance(B, E)) + log(distance(C, D)) == log(distance(C, F)) + log(distance(D, E)), log(distance(C, D)) + log(distance(B, D)) == log(distance(D, E)) + log(distance(D, F))
By external_angle_bisector_definition_v0_r on H, F, G, K we get Line(F, K) == external_angle_bisector(G, K, H)
By external_angle_bisector_definition_v0_r on J, K, C, H we get Line(H, K) == external_angle_bisector(C, H, J)
By external_angle_bisector_definition_v0_r on H, G, J, K we get Line(G, K) == external_angle_bisector(H, K, J)
By anti_similar_triangle_basic_properties on B, C, A, E, F, A we get angle(B, C, A) == 0 - angle(E, F, A) mod 360, angle(C, A, B) == 0 - angle(F, A, E) mod 360, angle(A, B, C) == 0 - angle(A, E, F) mod 360, log(distance(B, C)) + log(distance(A, F)) == log(distance(E, F)) + log(distance(A, C)), log(distance(A, C)) + log(distance(A, E)) == log(distance(A, F)) + log(distance(A, B)), log(distance(A, B)) + log(distance(E, F)) == log(distance(A, E)) + log(distance(B, C))
By similar_triangle_basic_properties on I, D, H, A, D, E we get angle(A, D, E) == angle(I, D, H) mod 360, angle(D, E, A) == angle(D, H, I) mod 360, angle(E, A, D) == angle(H, I, D) mod 360, log(distance(A, D)) + log(distance(D, H)) == log(distance(D, I)) + log(distance(D, E)), log(distance(D, E)) + log(distance(H, I)) == log(distance(D, H)) + log(distance(A, E)), log(distance(A, E)) + log(distance(D, I)) == log(distance(H, I)) + log(distance(A, D))
By anti_similar_triangle_basic_properties on D, E, B, G, C, B we get angle(D, E, B) == 0 - angle(G, C, B) mod 360, angle(E, B, D) == 0 - angle(C, B, G) mod 360, angle(B, D, E) == 0 - angle(B, G, C) mod 360, log(distance(C, G)) + log(distance(B, E)) == log(distance(D, E)) + log(distance(B, C)), log(distance(B, C)) + log(distance(B, D)) == log(distance(B, E)) + log(distance(B, G)), log(distance(B, D)) + log(distance(C, G)) == log(distance(B, G)) + log(distance(D, E))
By similar_triangle_basic_properties on F, D, C, B, D, E we get angle(B, D, E) == angle(F, D, C) mod 360, angle(D, C, F) == angle(D, E, B) mod 360, angle(C, F, D) == angle(E, B, D) mod 360, log(distance(B, D)) + log(distance(C, D)) == log(distance(D, F)) + log(distance(D, E)), log(distance(C, D)) + log(distance(B, E)) == log(distance(D, E)) + log(distance(C, F)), log(distance(B, E)) + log(distance(D, F)) == log(distance(C, F)) + log(distance(B, D))
By anti_similar_triangle_basic_properties on C, B, A, C, E, D we get angle(C, B, A) == 0 - angle(C, E, D) mod 360, angle(B, A, C) == 0 - angle(E, D, C) mod 360, angle(A, C, B) == 0 - angle(D, C, E) mod 360, log(distance(B, C)) + log(distance(D, E)) == log(distance(C, E)) + log(distance(A, B)), log(distance(A, B)) + log(distance(C, D)) == log(distance(D, E)) + log(distance(A, C)), log(distance(A, C)) + log(distance(C, E)) == log(distance(C, D)) + log(distance(B, C))
By internal_angle_bisector_definition_v0_r on H, G, H, F we get Line(F, G) == internal_angle_bisector(H, F, H)
By external_angle_bisector_definition_v0_r on D, I, F, H we get Line(H, I) == external_angle_bisector(D, H, F)
By collinear_definition on H, I, midpoint(C, D) we get I in Line(H, midpoint(C, D)), midpoint(C, D) in Line(H, I), Line(H, I) == Line(H, midpoint(C, D)), 0 == 2 * angle(I, H, midpoint(C, D)) mod 360
By anti_similar_triangle_basic_properties on F, K, D, D, K, G we get angle(F, K, D) == 0 - angle(D, K, G) mod 360, angle(K, D, F) == 0 - angle(K, G, D) mod 360, angle(D, F, K) == 0 - angle(G, D, K) mod 360, log(distance(D, K)) + log(distance(D, K)) == log(distance(F, K)) + log(distance(G, K)), log(distance(D, K)) + log(distance(D, G)) == log(distance(G, K)) + log(distance(D, F)), log(distance(D, F)) + log(distance(D, K)) == log(distance(D, G)) + log(distance(F, K))
By external_angle_bisector_definition_v0_r on G, J, C, H we get Line(H, J) == external_angle_bisector(C, H, G)
By similar_triangle_basic_properties on E, F, C, H, I, D we get angle(E, F, C) == angle(H, I, D) mod 360, angle(F, C, E) == angle(I, D, H) mod 360, angle(C, E, F) == angle(D, H, I) mod 360, log(distance(E, F)) + log(distance(D, I)) == log(distance(H, I)) + log(distance(C, F)), log(distance(C, F)) + log(distance(D, H)) == log(distance(D, I)) + log(distance(C, E)), log(distance(C, E)) + log(distance(H, I)) == log(distance(D, H)) + log(distance(E, F))
By external_angle_bisector_definition_v0_r on E, A, D, F we get Line(A, F) == external_angle_bisector(D, F, E)
By similar_triangle_basic_properties on D, F, G, C, J, A we get angle(C, J, A) == angle(D, F, G) mod 360, angle(F, G, D) == angle(J, A, C) mod 360, angle(A, C, J) == angle(G, D, F) mod 360, log(distance(C, J)) + log(distance(F, G)) == log(distance(D, F)) + log(distance(A, J)), log(distance(A, J)) + log(distance(D, G)) == log(distance(F, G)) + log(distance(A, C)), log(distance(A, C)) + log(distance(D, F)) == log(distance(D, G)) + log(distance(C, J))
By external_angle_bisector_definition_v0_r on C, F, G, H we get Line(F, H) == external_angle_bisector(C, H, G)
By concyclic_definition_0 on B, G, F, D we get D in Circle(B, F, G)
By similar_triangle_basic_properties on F, D, A, F, B, E we get angle(F, B, E) == angle(F, D, A) mod 360, angle(B, E, F) == angle(D, A, F) mod 360, angle(A, F, D) == angle(E, F, B) mod 360, log(distance(B, F)) + log(distance(A, D)) == log(distance(D, F)) + log(distance(B, E)), log(distance(A, D)) + log(distance(E, F)) == log(distance(B, E)) + log(distance(A, F)), log(distance(A, F)) + log(distance(B, F)) == log(distance(E, F)) + log(distance(D, F))
By anti_similar_triangle_basic_properties on H, C, I, E, C, F we get angle(H, C, I) == 0 - angle(E, C, F) mod 360, angle(C, I, H) == 0 - angle(C, F, E) mod 360, angle(I, H, C) == 0 - angle(F, E, C) mod 360, log(distance(C, E)) + log(distance(C, I)) == log(distance(C, H)) + log(distance(C, F)), log(distance(C, F)) + log(distance(H, I)) == log(distance(C, I)) + log(distance(E, F)), log(distance(E, F)) + log(distance(C, H)) == log(distance(H, I)) + log(distance(C, E))
By external_angle_bisector_definition_v0_r on H, F, J, K we get Line(F, K) == external_angle_bisector(H, K, J)
By internal_angle_bisector_definition_v0_r on E, C, D, F we get Line(C, F) == internal_angle_bisector(D, F, E)
By anti_similar_triangle_basic_properties on A, G, C, A, E, D we get angle(A, G, C) == 0 - angle(A, E, D) mod 360, angle(G, C, A) == 0 - angle(E, D, A) mod 360, angle(C, A, G) == 0 - angle(D, A, E) mod 360, log(distance(A, E)) + log(distance(C, G)) == log(distance(A, G)) + log(distance(D, E)), log(distance(C, G)) + log(distance(A, D)) == log(distance(D, E)) + log(distance(A, C)), log(distance(A, C)) + log(distance(A, E)) == log(distance(A, D)) + log(distance(A, G))
By similar_triangle_basic_properties on B, G, D, J, A, F we get angle(B, G, D) == angle(J, A, F) mod 360, angle(A, F, J) == angle(G, D, B) mod 360, angle(D, B, G) == angle(F, J, A) mod 360, log(distance(A, J)) + log(distance(D, G)) == log(distance(B, G)) + log(distance(A, F)), log(distance(A, F)) + log(distance(B, D)) == log(distance(D, G)) + log(distance(F, J)), log(distance(B, D)) + log(distance(A, J)) == log(distance(F, J)) + log(distance(B, G))
By external_angle_bisector_definition_v0_r on H, C, F, K we get Line(C, K) == external_angle_bisector(F, K, H)
By similar_triangle_basic_properties on E, B, F, A, D, F we get angle(A, D, F) == angle(E, B, F) mod 360, angle(B, F, E) == angle(D, F, A) mod 360, angle(F, A, D) == angle(F, E, B) mod 360, log(distance(A, D)) + log(distance(B, F)) == log(distance(B, E)) + log(distance(D, F)), log(distance(B, F)) + log(distance(A, F)) == log(distance(D, F)) + log(distance(E, F)), log(distance(A, F)) + log(distance(B, E)) == log(distance(E, F)) + log(distance(A, D))
By external_angle_bisector_definition_v0_r on C, F, J, H we get Line(F, H) == external_angle_bisector(C, H, J)
By internal_angle_bisector_definition_v0_r on F, G, E, D we get Line(D, G) == internal_angle_bisector(E, D, F)
By similar_triangle_basic_properties on I, D, H, J, C, A we get angle(I, D, H) == angle(J, C, A) mod 360, angle(C, A, J) == angle(D, H, I) mod 360, angle(A, J, C) == angle(H, I, D) mod 360, log(distance(C, J)) + log(distance(D, H)) == log(distance(D, I)) + log(distance(A, C)), log(distance(A, C)) + log(distance(H, I)) == log(distance(D, H)) + log(distance(A, J)), log(distance(A, J)) + log(distance(D, I)) == log(distance(H, I)) + log(distance(C, J))
By concyclic_definition_0 on G, D, F, B we get B in Circle(D, F, G)
By external_angle_bisector_definition_v0_r on J, G, C, H we get Line(G, H) == external_angle_bisector(C, H, J)
By external_angle_bisector_definition_v0_r on G, J, H, K we get Line(J, K) == external_angle_bisector(G, K, H)
By perpendicular_angle_conditions_v0 on C, midpoint(C, D), I we get angle(C, midpoint(C, D), I) == orientation(C, midpoint(C, D), I) mod 360
By similar_triangle_basic_properties on C, A, D, A, J, F we get angle(A, J, F) == angle(C, A, D) mod 360, angle(A, D, C) == angle(J, F, A) mod 360, angle(D, C, A) == angle(F, A, J) mod 360, log(distance(A, C)) + log(distance(F, J)) == log(distance(A, J)) + log(distance(A, D)), log(distance(A, D)) + log(distance(A, F)) == log(distance(F, J)) + log(distance(C, D)), log(distance(A, F)) + log(distance(A, C)) == log(distance(C, D)) + log(distance(A, J))
By internal_angle_bisector_definition_v0_r on F, C, G, H we get Line(C, H) == internal_angle_bisector(F, H, G)
By anti_similar_triangle_basic_properties on C, D, E, C, A, B we get angle(C, D, E) == 0 - angle(C, A, B) mod 360, angle(D, E, C) == 0 - angle(A, B, C) mod 360, angle(E, C, D) == 0 - angle(B, C, A) mod 360, log(distance(A, C)) + log(distance(D, E)) == log(distance(C, D)) + log(distance(A, B)), log(distance(A, B)) + log(distance(C, E)) == log(distance(D, E)) + log(distance(B, C)), log(distance(B, C)) + log(distance(C, D)) == log(distance(C, E)) + log(distance(A, C))
By external_angle_bisector_definition_v0_r on K, F, C, H we get Line(F, H) == external_angle_bisector(C, H, K)
By external_angle_bisector_definition_v0_r on C, G, F, H we get Line(G, H) == external_angle_bisector(C, H, F)
By external_angle_bisector_definition_v0_r on F, A, D, E we get Line(A, E) == external_angle_bisector(D, E, F)
By concyclic_definition_0 on G, E, F, A we get A in Circle(E, F, G)
By internal_angle_bisector_definition_v0_r on J, C, F, H we get Line(C, H) == internal_angle_bisector(F, H, J)
By collinear_definition on H, midpoint(C, D), I we get midpoint(C, D) in Line(H, I), I in Line(H, midpoint(C, D)), Line(H, I) == Line(H, midpoint(C, D)), 0 == 2 * angle(midpoint(C, D), H, I) mod 360
By anti_similar_triangle_basic_properties on F, J, A, E, B, C we get angle(F, J, A) == 0 - angle(E, B, C) mod 360, angle(J, A, F) == 0 - angle(B, C, E) mod 360, angle(A, F, J) == 0 - angle(C, E, B) mod 360, log(distance(B, E)) + log(distance(A, J)) == log(distance(F, J)) + log(distance(B, C)), log(distance(A, J)) + log(distance(C, E)) == log(distance(B, C)) + log(distance(A, F)), log(distance(A, F)) + log(distance(B, E)) == log(distance(C, E)) + log(distance(F, J))
By anti_similar_triangle_basic_properties on G, A, C, E, A, D we get angle(G, A, C) == 0 - angle(E, A, D) mod 360, angle(A, C, G) == 0 - angle(A, D, E) mod 360, angle(C, G, A) == 0 - angle(D, E, A) mod 360, log(distance(A, E)) + log(distance(A, C)) == log(distance(A, G)) + log(distance(A, D)), log(distance(A, C)) + log(distance(D, E)) == log(distance(A, D)) + log(distance(C, G)), log(distance(C, G)) + log(distance(A, E)) == log(distance(D, E)) + log(distance(A, G))
By anti_similar_triangle_basic_properties on A, F, J, G, E, A we get angle(A, F, J) == 0 - angle(G, E, A) mod 360, angle(F, J, A) == 0 - angle(E, A, G) mod 360, angle(J, A, F) == 0 - angle(A, G, E) mod 360, log(distance(A, F)) + log(distance(A, E)) == log(distance(E, G)) + log(distance(F, J)), log(distance(A, E)) + log(distance(A, J)) == log(distance(F, J)) + log(distance(A, G)), log(distance(A, G)) + log(distance(A, F)) == log(distance(A, J)) + log(distance(E, G))
By internal_angle_bisector_definition_v0_r on G, C, K, H we get Line(C, H) == internal_angle_bisector(G, H, K)
By external_angle_bisector_definition_v0_r on C, K, G, H we get Line(H, K) == external_angle_bisector(C, H, G)
By similar_triangle_basic_properties on J, A, C, I, H, D we get angle(I, H, D) == angle(J, A, C) mod 360, angle(A, C, J) == angle(H, D, I) mod 360, angle(C, J, A) == angle(D, I, H) mod 360, log(distance(A, J)) + log(distance(D, H)) == log(distance(H, I)) + log(distance(A, C)), log(distance(A, C)) + log(distance(D, I)) == log(distance(D, H)) + log(distance(C, J)), log(distance(C, J)) + log(distance(H, I)) == log(distance(D, I)) + log(distance(A, J))
By anti_similar_triangle_basic_properties on I, C, H, F, C, E we get angle(I, C, H) == 0 - angle(F, C, E) mod 360, angle(C, H, I) == 0 - angle(C, E, F) mod 360, angle(H, I, C) == 0 - angle(E, F, C) mod 360, log(distance(C, F)) + log(distance(C, H)) == log(distance(C, I)) + log(distance(C, E)), log(distance(C, E)) + log(distance(H, I)) == log(distance(C, H)) + log(distance(E, F)), log(distance(E, F)) + log(distance(C, I)) == log(distance(H, I)) + log(distance(C, F))
By internal_angle_bisector_definition_v0_r on K, C, J, H we get Line(C, H) == internal_angle_bisector(J, H, K)
By internal_angle_bisector_definition_v0_r on F, G, J, H we get Line(G, H) == internal_angle_bisector(F, H, J)
By internal_angle_bisector_definition_v0_r on C, J, H, F we get Line(F, J) == internal_angle_bisector(C, F, H)
By external_angle_bisector_definition_v0_r on H, J, F, K we get Line(J, K) == external_angle_bisector(F, K, H)
By external_angle_bisector_definition_v0_r on D, I, G, H we get Line(H, I) == external_angle_bisector(D, H, G)
By similar_triangle_basic_properties on G, D, F, E, D, A we get angle(E, D, A) == angle(G, D, F) mod 360, angle(D, A, E) == angle(D, F, G) mod 360, angle(A, E, D) == angle(F, G, D) mod 360, log(distance(D, E)) + log(distance(D, F)) == log(distance(D, G)) + log(distance(A, D)), log(distance(A, D)) + log(distance(F, G)) == log(distance(D, F)) + log(distance(A, E)), log(distance(A, E)) + log(distance(D, G)) == log(distance(F, G)) + log(distance(D, E))
By external_angle_bisector_definition_v0_r on K, I, D, H we get Line(H, I) == external_angle_bisector(D, H, K)
By anti_similar_triangle_basic_properties on J, A, C, A, G, C we get angle(J, A, C) == 0 - angle(A, G, C) mod 360, angle(A, C, J) == 0 - angle(G, C, A) mod 360, angle(C, J, A) == 0 - angle(C, A, G) mod 360, log(distance(A, G)) + log(distance(A, C)) == log(distance(A, J)) + log(distance(C, G)), log(distance(A, C)) + log(distance(A, C)) == log(distance(C, G)) + log(distance(C, J)), log(distance(A, C)) + log(distance(A, J)) == log(distance(C, J)) + log(distance(A, G))
By perpendicular_angle_conditions_v0 on H, midpoint(C, D), C we get angle(H, midpoint(C, D), C) == orientation(C, H, midpoint(C, D)) mod 360
By internal_angle_bisector_definition_v0_r on K, F, K, H we get Line(F, H) == internal_angle_bisector(K, H, K)
By internal_angle_bisector_definition_v0_r on K, J, K, H we get Line(H, J) == internal_angle_bisector(K, H, K)
By external_angle_bisector_definition_v0_r on G, C, H, K we get Line(C, K) == external_angle_bisector(G, K, H)
By anti_similar_triangle_basic_properties on G, C, B, G, E, F we get angle(G, C, B) == 0 - angle(G, E, F) mod 360, angle(C, B, G) == 0 - angle(E, F, G) mod 360, angle(B, G, C) == 0 - angle(F, G, E) mod 360, log(distance(C, G)) + log(distance(E, F)) == log(distance(E, G)) + log(distance(B, C)), log(distance(B, C)) + log(distance(F, G)) == log(distance(E, F)) + log(distance(B, G)), log(distance(B, G)) + log(distance(E, G)) == log(distance(F, G)) + log(distance(C, G))
By external_angle_bisector_definition_v0_r on K, B, H, F we get Line(B, F) == external_angle_bisector(H, F, K)
By internal_angle_bisector_definition_v0 on D, midpoint(C, D), C, I we get angle(D, I, midpoint(C, D)) == angle(midpoint(C, D), I, C) mod 360
By similar_triangle_basic_properties on E, F, C, G, F, D we get angle(E, F, C) == angle(G, F, D) mod 360, angle(F, C, E) == angle(F, D, G) mod 360, angle(C, E, F) == angle(D, G, F) mod 360, log(distance(E, F)) + log(distance(D, F)) == log(distance(F, G)) + log(distance(C, F)), log(distance(C, F)) + log(distance(D, G)) == log(distance(D, F)) + log(distance(C, E)), log(distance(C, E)) + log(distance(F, G)) == log(distance(D, G)) + log(distance(E, F))
By internal_angle_bisector_definition_v0_r on J, C, G, H we get Line(C, H) == internal_angle_bisector(G, H, J)
By similar_triangle_basic_properties on D, I, H, C, F, E we get angle(C, F, E) == angle(D, I, H) mod 360, angle(F, E, C) == angle(I, H, D) mod 360, angle(E, C, F) == angle(H, D, I) mod 360, log(distance(C, F)) + log(distance(H, I)) == log(distance(D, I)) + log(distance(E, F)), log(distance(E, F)) + log(distance(D, H)) == log(distance(H, I)) + log(distance(C, E)), log(distance(C, E)) + log(distance(D, I)) == log(distance(D, H)) + log(distance(C, F))
By external_angle_bisector_definition_v0_r on H, A, K, F we get Line(A, F) == external_angle_bisector(H, F, K)
By external_angle_bisector_definition_v0 on K, midpoint(C, D), E, I we get 180 == angle(K, I, midpoint(C, D)) + angle(E, I, midpoint(C, D)) mod 360
By anti_similar_triangle_basic_properties on E, H, D, D, H, E we get angle(E, H, D) == 0 - angle(D, H, E) mod 360, angle(H, D, E) == 0 - angle(H, E, D) mod 360, angle(D, E, H) == 0 - angle(E, D, H) mod 360, log(distance(D, H)) + log(distance(D, H)) == log(distance(E, H)) + log(distance(E, H)), log(distance(D, H)) + log(distance(D, E)) == log(distance(E, H)) + log(distance(D, E)), log(distance(D, E)) + log(distance(D, H)) == log(distance(D, E)) + log(distance(E, H))
By anti_similar_triangle_basic_properties on B, G, A, D, G, E we get angle(B, G, A) == 0 - angle(D, G, E) mod 360, angle(G, A, B) == 0 - angle(G, E, D) mod 360, angle(A, B, G) == 0 - angle(E, D, G) mod 360, log(distance(B, G)) + log(distance(E, G)) == log(distance(D, G)) + log(distance(A, G)), log(distance(A, G)) + log(distance(D, E)) == log(distance(E, G)) + log(distance(A, B)), log(distance(A, B)) + log(distance(D, G)) == log(distance(D, E)) + log(distance(B, G))
By internal_angle_bisector_definition_v0_r on K, J, H, F we get Line(F, J) == internal_angle_bisector(H, F, K)
By external_angle_bisector_definition_v0_r on C, K, F, H we get Line(H, K) == external_angle_bisector(C, H, F)
By similar_triangle_basic_properties on J, C, A, F, D, G we get angle(F, D, G) == angle(J, C, A) mod 360, angle(C, A, J) == angle(D, G, F) mod 360, angle(A, J, C) == angle(G, F, D) mod 360, log(distance(C, J)) + log(distance(D, G)) == log(distance(D, F)) + log(distance(A, C)), log(distance(A, C)) + log(distance(F, G)) == log(distance(D, G)) + log(distance(A, J)), log(distance(A, J)) + log(distance(D, F)) == log(distance(F, G)) + log(distance(C, J))
By internal_angle_bisector_definition_v0_r on H, K, G, J we get Line(J, K) == internal_angle_bisector(G, J, H)
By internal_angle_bisector_definition_v0_r on F, C, H, J we get Line(C, J) == internal_angle_bisector(F, J, H)
By anti_similar_triangle_basic_properties on A, C, G, F, C, E we get angle(A, C, G) == 0 - angle(F, C, E) mod 360, angle(C, G, A) == 0 - angle(C, E, F) mod 360, angle(G, A, C) == 0 - angle(E, F, C) mod 360, log(distance(A, C)) + log(distance(C, E)) == log(distance(C, F)) + log(distance(C, G)), log(distance(C, E)) + log(distance(A, G)) == log(distance(C, G)) + log(distance(E, F)), log(distance(A, G)) + log(distance(C, F)) == log(distance(E, F)) + log(distance(A, C))
By internal_angle_bisector_definition_v0_r on C, D, C, midpoint(C, D) we get Line(D, midpoint(C, D)) == internal_angle_bisector(C, midpoint(C, D), C)
By similar_triangle_basic_properties on B, D, F, E, A, F we get angle(B, D, F) == angle(E, A, F) mod 360, angle(A, F, E) == angle(D, F, B) mod 360, angle(F, B, D) == angle(F, E, A) mod 360, log(distance(A, E)) + log(distance(D, F)) == log(distance(B, D)) + log(distance(A, F)), log(distance(A, F)) + log(distance(B, F)) == log(distance(D, F)) + log(distance(E, F)), log(distance(B, F)) + log(distance(A, E)) == log(distance(E, F)) + log(distance(B, D))
By anti_similar_triangle_basic_properties on A, E, D, I, H, C we get angle(A, E, D) == 0 - angle(I, H, C) mod 360, angle(E, D, A) == 0 - angle(H, C, I) mod 360, angle(D, A, E) == 0 - angle(C, I, H) mod 360, log(distance(A, E)) + log(distance(C, H)) == log(distance(H, I)) + log(distance(D, E)), log(distance(C, H)) + log(distance(A, D)) == log(distance(D, E)) + log(distance(C, I)), log(distance(A, D)) + log(distance(H, I)) == log(distance(C, I)) + log(distance(A, E))
By concyclic_definition_0 on F, A, E, G we get G in Circle(A, E, F)
By internal_angle_bisector_definition_v0_r on H, F, K, J we get Line(F, J) == internal_angle_bisector(H, J, K)
By concyclic_definition_0 on B, D, G, F we get F in Circle(B, D, G)
By external_angle_bisector_definition_v0_r on C, B, H, F we get Line(B, F) == external_angle_bisector(C, F, H)
By external_angle_bisector_definition_v0_r on J, G, H, F we get Line(F, G) == external_angle_bisector(H, F, J)
By external_angle_bisector_definition_v0_r on J, K, H, F we get Line(F, K) == external_angle_bisector(H, F, J)
By anti_similar_triangle_basic_properties on H, E, D, I, D, A we get angle(H, E, D) == 0 - angle(I, D, A) mod 360, angle(E, D, H) == 0 - angle(D, A, I) mod 360, angle(D, H, E) == 0 - angle(A, I, D) mod 360, log(distance(D, I)) + log(distance(D, E)) == log(distance(E, H)) + log(distance(A, D)), log(distance(A, D)) + log(distance(D, H)) == log(distance(D, E)) + log(distance(A, I)), log(distance(A, I)) + log(distance(E, H)) == log(distance(D, H)) + log(distance(D, I))
By similar_triangle_basic_properties on C, F, D, E, F, G we get angle(C, F, D) == angle(E, F, G) mod 360, angle(F, D, C) == angle(F, G, E) mod 360, angle(D, C, F) == angle(G, E, F) mod 360, log(distance(C, F)) + log(distance(F, G)) == log(distance(E, F)) + log(distance(D, F)), log(distance(D, F)) + log(distance(E, G)) == log(distance(F, G)) + log(distance(C, D)), log(distance(C, D)) + log(distance(E, F)) == log(distance(E, G)) + log(distance(C, F))
By internal_angle_bisector_definition_v0_r on H, C, H, F we get Line(C, F) == internal_angle_bisector(H, F, H)
By anti_similar_triangle_basic_properties on F, D, K, D, G, K we get angle(F, D, K) == 0 - angle(D, G, K) mod 360, angle(D, K, F) == 0 - angle(G, K, D) mod 360, angle(K, F, D) == 0 - angle(K, D, G) mod 360, log(distance(D, F)) + log(distance(G, K)) == log(distance(D, G)) + log(distance(D, K)), log(distance(D, K)) + log(distance(D, K)) == log(distance(G, K)) + log(distance(F, K)), log(distance(D, K)) + log(distance(D, F)) == log(distance(F, K)) + log(distance(D, G))
By internal_angle_bisector_definition_v0_r on H, C, G, F we get Line(C, F) == internal_angle_bisector(G, F, H)
By external_angle_bisector_definition_v0_r on H, B, H, F we get Line(B, F) == external_angle_bisector(H, F, H)
By internal_angle_bisector_definition_v0_r on H, J, C, K we get Line(J, K) == internal_angle_bisector(C, K, H)
By anti_similar_triangle_basic_properties on B, C, G, B, E, D we get angle(B, C, G) == 0 - angle(B, E, D) mod 360, angle(C, G, B) == 0 - angle(E, D, B) mod 360, angle(G, B, C) == 0 - angle(D, B, E) mod 360, log(distance(B, C)) + log(distance(D, E)) == log(distance(B, E)) + log(distance(C, G)), log(distance(C, G)) + log(distance(B, D)) == log(distance(D, E)) + log(distance(B, G)), log(distance(B, D)) + log(distance(B, C)) == log(distance(B, G)) + log(distance(B, E))
By anti_similar_triangle_basic_properties on B, A, G, B, E, F we get angle(B, A, G) == 0 - angle(B, E, F) mod 360, angle(A, G, B) == 0 - angle(E, F, B) mod 360, angle(G, B, A) == 0 - angle(F, B, E) mod 360, log(distance(A, B)) + log(distance(E, F)) == log(distance(B, E)) + log(distance(A, G)), log(distance(A, G)) + log(distance(B, F)) == log(distance(E, F)) + log(distance(B, G)), log(distance(B, F)) + log(distance(A, B)) == log(distance(B, G)) + log(distance(B, E))
By similar_triangle_basic_properties on C, E, D, F, B, D we get angle(C, E, D) == angle(F, B, D) mod 360, angle(B, D, F) == angle(E, D, C) mod 360, angle(D, C, E) == angle(D, F, B) mod 360, log(distance(B, F)) + log(distance(D, E)) == log(distance(C, E)) + log(distance(B, D)), log(distance(B, D)) + log(distance(C, D)) == log(distance(D, E)) + log(distance(D, F)), log(distance(C, D)) + log(distance(B, F)) == log(distance(D, F)) + log(distance(C, E))
By similar_triangle_basic_properties on D, A, C, F, J, A we get angle(D, A, C) == angle(F, J, A) mod 360, angle(A, C, D) == angle(J, A, F) mod 360, angle(A, F, J) == angle(C, D, A) mod 360, log(distance(A, D)) + log(distance(A, J)) == log(distance(F, J)) + log(distance(A, C)), log(distance(A, C)) + log(distance(A, F)) == log(distance(A, J)) + log(distance(C, D)), log(distance(A, F)) + log(distance(A, D)) == log(distance(C, D)) + log(distance(F, J))
By anti_similar_triangle_basic_properties on C, G, B, E, G, F we get angle(C, G, B) == 0 - angle(E, G, F) mod 360, angle(G, B, C) == 0 - angle(G, F, E) mod 360, angle(B, C, G) == 0 - angle(F, E, G) mod 360, log(distance(C, G)) + log(distance(F, G)) == log(distance(E, G)) + log(distance(B, G)), log(distance(B, G)) + log(distance(E, F)) == log(distance(F, G)) + log(distance(B, C)), log(distance(B, C)) + log(distance(E, G)) == log(distance(E, F)) + log(distance(C, G))
By anti_similar_triangle_basic_properties on H, D, E, I, A, D we get angle(H, D, E) == 0 - angle(I, A, D) mod 360, angle(D, E, H) == 0 - angle(A, D, I) mod 360, angle(E, H, D) == 0 - angle(D, I, A) mod 360, log(distance(A, I)) + log(distance(D, E)) == log(distance(D, H)) + log(distance(A, D)), log(distance(A, D)) + log(distance(E, H)) == log(distance(D, E)) + log(distance(D, I)), log(distance(D, I)) + log(distance(D, H)) == log(distance(E, H)) + log(distance(A, I))
By concyclic_definition_0 on E, I, D, H we get H in Circle(D, E, I)
By internal_angle_bisector_definition_v0_r on F, J, F, H we get Line(H, J) == internal_angle_bisector(F, H, F)
By internal_angle_bisector_definition_v0_r on H, K, H, J we get Line(J, K) == internal_angle_bisector(H, J, H)
By concyclic_definition_0 on E, H, I, D we get D in Circle(E, H, I)
By similar_triangle_basic_properties on D, B, F, A, E, F we get angle(A, E, F) == angle(D, B, F) mod 360, angle(B, F, D) == angle(E, F, A) mod 360, angle(F, A, E) == angle(F, D, B) mod 360, log(distance(A, E)) + log(distance(B, F)) == log(distance(B, D)) + log(distance(E, F)), log(distance(B, F)) + log(distance(A, F)) == log(distance(E, F)) + log(distance(D, F)), log(distance(A, F)) + log(distance(B, D)) == log(distance(D, F)) + log(distance(A, E))
By similar_triangle_basic_properties on D, G, E, D, F, A we get angle(D, F, A) == angle(D, G, E) mod 360, angle(F, A, D) == angle(G, E, D) mod 360, angle(A, D, F) == angle(E, D, G) mod 360, log(distance(D, F)) + log(distance(E, G)) == log(distance(D, G)) + log(distance(A, F)), log(distance(A, F)) + log(distance(D, E)) == log(distance(E, G)) + log(distance(A, D)), log(distance(A, D)) + log(distance(D, G)) == log(distance(D, E)) + log(distance(D, F))
By internal_angle_bisector_definition_v0_r on C, G, H, J we get Line(G, J) == internal_angle_bisector(C, J, H)
By anti_similar_triangle_basic_properties on C, A, G, C, F, E we get angle(C, A, G) == 0 - angle(C, F, E) mod 360, angle(A, G, C) == 0 - angle(F, E, C) mod 360, angle(G, C, A) == 0 - angle(E, C, F) mod 360, log(distance(A, C)) + log(distance(E, F)) == log(distance(C, F)) + log(distance(A, G)), log(distance(A, G)) + log(distance(C, E)) == log(distance(E, F)) + log(distance(C, G)), log(distance(C, E)) + log(distance(A, C)) == log(distance(C, G)) + log(distance(C, F))
By external_angle_bisector_definition_v0_r on F, C, D, E we get Line(C, E) == external_angle_bisector(D, E, F)
By internal_angle_bisector_definition_v0_r on F, G, H, J we get Line(G, J) == internal_angle_bisector(F, J, H)
By reverse_direction on center(c), H we get 180 == direction(center(c), H) - direction(H, center(c)) mod 360
By similar_triangle_basic_properties on E, G, F, C, D, F we get angle(C, D, F) == angle(E, G, F) mod 360, angle(D, F, C) == angle(G, F, E) mod 360, angle(F, C, D) == angle(F, E, G) mod 360, log(distance(C, D)) + log(distance(F, G)) == log(distance(E, G)) + log(distance(D, F)), log(distance(D, F)) + log(distance(E, F)) == log(distance(F, G)) + log(distance(C, F)), log(distance(C, F)) + log(distance(E, G)) == log(distance(E, F)) + log(distance(C, D))
By anti_similar_triangle_basic_properties on C, G, A, C, A, J we get angle(C, G, A) == 0 - angle(C, A, J) mod 360, angle(G, A, C) == 0 - angle(A, J, C) mod 360, angle(A, C, G) == 0 - angle(J, C, A) mod 360, log(distance(A, C)) + log(distance(A, G)) == log(distance(C, G)) + log(distance(A, J)), log(distance(A, G)) + log(distance(C, J)) == log(distance(A, J)) + log(distance(A, C)), log(distance(A, C)) + log(distance(A, C)) == log(distance(C, J)) + log(distance(C, G))
By radical_axis_definition_v0_r on A, c, Circle(A, B, D) we get A in radical_axis(c, Circle(A, B, D))
By external_angle_bisector_definition_v0_r on H, A, G, F we get Line(A, F) == external_angle_bisector(G, F, H)
By internal_angle_bisector_definition_v0_r on D, B, F, E we get Line(B, E) == internal_angle_bisector(D, E, F)
By external_angle_bisector_definition_v0 on A, midpoint(C, D), D, I we get 180 == angle(A, I, midpoint(C, D)) + angle(D, I, midpoint(C, D)) mod 360
By perpendicular_angle_conditions_v0 on I, midpoint(C, D), C we get angle(I, midpoint(C, D), C) == orientation(C, I, midpoint(C, D)) mod 360
By internal_angle_bisector_definition_v0_r on C, G, H, F we get Line(F, G) == internal_angle_bisector(C, F, H)
By similar_triangle_basic_properties on F, E, C, F, G, D we get angle(F, E, C) == angle(F, G, D) mod 360, angle(E, C, F) == angle(G, D, F) mod 360, angle(C, F, E) == angle(D, F, G) mod 360, log(distance(E, F)) + log(distance(D, G)) == log(distance(F, G)) + log(distance(C, E)), log(distance(C, E)) + log(distance(D, F)) == log(distance(D, G)) + log(distance(C, F)), log(distance(C, F)) + log(distance(F, G)) == log(distance(D, F)) + log(distance(E, F))
By internal_angle_bisector_definition_v0_r on G, C, H, J we get Line(C, J) == internal_angle_bisector(G, J, H)
By internal_angle_bisector_definition_v0_r on H, K, C, J we get Line(J, K) == internal_angle_bisector(C, J, H)
By perpendicular_angle_conditions_v0 on D, midpoint(C, D), H we get angle(D, midpoint(C, D), H) == orientation(D, midpoint(C, D), H) mod 360
By external_angle_bisector_definition_v0 on D, midpoint(C, D), E, I we get 180 == angle(D, I, midpoint(C, D)) + angle(E, I, midpoint(C, D)) mod 360
By internal_angle_bisector_definition_v0_r on D, G, F, E we get Line(E, G) == internal_angle_bisector(D, E, F)
By external_angle_bisector_definition_v0_r on H, A, H, F we get Line(A, F) == external_angle_bisector(H, F, H)
By internal_angle_bisector_definition_v0_r on H, K, C, F we get Line(F, K) == internal_angle_bisector(C, F, H)
By concyclic_definition_0 on A, F, G, E we get E in Circle(A, F, G)
By internal_angle_bisector_definition_v0_r on K, J, G, H we get Line(H, J) == internal_angle_bisector(G, H, K)
By internal_angle_bisector_definition_v0_r on F, C, K, H we get Line(C, H) == internal_angle_bisector(F, H, K)
By anti_similar_triangle_basic_properties on E, A, F, B, A, C we get angle(E, A, F) == 0 - angle(B, A, C) mod 360, angle(A, F, E) == 0 - angle(A, C, B) mod 360, angle(F, E, A) == 0 - angle(C, B, A) mod 360, log(distance(A, B)) + log(distance(A, F)) == log(distance(A, E)) + log(distance(A, C)), log(distance(A, C)) + log(distance(E, F)) == log(distance(A, F)) + log(distance(B, C)), log(distance(B, C)) + log(distance(A, E)) == log(distance(E, F)) + log(distance(A, B))
By anti_similar_triangle_basic_properties on A, C, J, H, C, I we get angle(A, C, J) == 0 - angle(H, C, I) mod 360, angle(C, J, A) == 0 - angle(C, I, H) mod 360, angle(J, A, C) == 0 - angle(I, H, C) mod 360, log(distance(A, C)) + log(distance(C, I)) == log(distance(C, H)) + log(distance(C, J)), log(distance(C, I)) + log(distance(A, J)) == log(distance(C, J)) + log(distance(H, I)), log(distance(A, J)) + log(distance(C, H)) == log(distance(H, I)) + log(distance(A, C))
By external_angle_bisector_definition_v0 on K, midpoint(C, D), A, I we get 180 == angle(K, I, midpoint(C, D)) + angle(A, I, midpoint(C, D)) mod 360
By concyclic_definition_0 on B, D, F, G we get G in Circle(B, D, F)
By anti_similar_triangle_basic_properties on G, A, B, F, E, B we get angle(G, A, B) == 0 - angle(F, E, B) mod 360, angle(A, B, G) == 0 - angle(E, B, F) mod 360, angle(B, G, A) == 0 - angle(B, F, E) mod 360, log(distance(A, G)) + log(distance(B, E)) == log(distance(E, F)) + log(distance(A, B)), log(distance(A, B)) + log(distance(B, F)) == log(distance(B, E)) + log(distance(B, G)), log(distance(B, F)) + log(distance(A, G)) == log(distance(B, G)) + log(distance(E, F))
By internal_angle_bisector_definition_v0_r on H, K, F, J we get Line(J, K) == internal_angle_bisector(F, J, H)
By internal_angle_bisector_definition_v0_r on H, F, C, K we get Line(F, K) == internal_angle_bisector(C, K, H)
By concyclic_definition_0 on H, I, D, E we get E in Circle(D, H, I)
By internal_angle_bisector_definition_v0_r on H, J, H, K we get Line(J, K) == internal_angle_bisector(H, K, H)
By concyclic_definition_0 on E, G, A, F we get F in Circle(A, E, G)
By external_angle_bisector_definition_v0_r on C, A, H, F we get Line(A, F) == external_angle_bisector(C, F, H)
By internal_angle_bisector_definition_v0_r on E, A, F, D we get Line(A, D) == internal_angle_bisector(E, D, F)
By perpendicular_angle_conditions_v0 on H, midpoint(C, D), D we get angle(H, midpoint(C, D), D) == orientation(D, H, midpoint(C, D)) mod 360
By reverse_direction on center(c), J we get 180 == direction(center(c), J) - direction(J, center(c)) mod 360
By anti_similar_triangle_basic_properties on E, G, A, F, A, J we get angle(E, G, A) == 0 - angle(F, A, J) mod 360, angle(G, A, E) == 0 - angle(A, J, F) mod 360, angle(A, E, G) == 0 - angle(J, F, A) mod 360, log(distance(A, F)) + log(distance(A, G)) == log(distance(E, G)) + log(distance(A, J)), log(distance(A, G)) + log(distance(F, J)) == log(distance(A, J)) + log(distance(A, E)), log(distance(A, E)) + log(distance(A, F)) == log(distance(F, J)) + log(distance(E, G))
By similar_triangle_basic_properties on A, J, F, G, B, D we get angle(A, J, F) == angle(G, B, D) mod 360, angle(B, D, G) == angle(J, F, A) mod 360, angle(D, G, B) == angle(F, A, J) mod 360, log(distance(A, J)) + log(distance(B, D)) == log(distance(B, G)) + log(distance(F, J)), log(distance(B, D)) + log(distance(A, F)) == log(distance(F, J)) + log(distance(D, G)), log(distance(A, F)) + log(distance(B, G)) == log(distance(D, G)) + log(distance(A, J))
By internal_angle_bisector_definition_v0_r on H, G, C, K we get Line(G, K) == internal_angle_bisector(C, K, H)
By internal_angle_bisector_definition_v0_r on H, J, H, F we get Line(F, J) == internal_angle_bisector(H, F, H)
By internal_angle_bisector_definition_v0_r on H, F, G, J we get Line(F, J) == internal_angle_bisector(G, J, H)
By anti_similar_triangle_basic_properties on B, E, C, J, F, A we get angle(B, E, C) == 0 - angle(J, F, A) mod 360, angle(E, C, B) == 0 - angle(F, A, J) mod 360, angle(C, B, E) == 0 - angle(A, J, F) mod 360, log(distance(B, E)) + log(distance(A, F)) == log(distance(F, J)) + log(distance(C, E)), log(distance(A, F)) + log(distance(B, C)) == log(distance(C, E)) + log(distance(A, J)), log(distance(A, J)) + log(distance(B, E)) == log(distance(B, C)) + log(distance(F, J))
By perpendicular_angle_conditions_v0 on C, midpoint(C, D), H we get angle(C, midpoint(C, D), H) == orientation(C, midpoint(C, D), H) mod 360
By internal_angle_bisector_definition_v0_r on J, F, K, H we get Line(F, H) == internal_angle_bisector(J, H, K)
By internal_angle_bisector_definition_v0_r on C, F, H, J we get Line(F, J) == internal_angle_bisector(C, J, H)
By internal_angle_bisector_definition_v0_r on H, G, H, K we get Line(G, K) == internal_angle_bisector(H, K, H)
By internal_angle_bisector_definition_v0_r on H, G, K, F we get Line(F, G) == internal_angle_bisector(H, F, K)
By internal_angle_bisector_definition_v0_r on K, C, H, F we get Line(C, F) == internal_angle_bisector(H, F, K)
By similar_triangle_basic_properties on G, D, E, F, D, A we get angle(F, D, A) == angle(G, D, E) mod 360, angle(D, A, F) == angle(D, E, G) mod 360, angle(A, F, D) == angle(E, G, D) mod 360, log(distance(D, F)) + log(distance(D, E)) == log(distance(D, G)) + log(distance(A, D)), log(distance(A, D)) + log(distance(E, G)) == log(distance(D, E)) + log(distance(A, F)), log(distance(A, F)) + log(distance(D, G)) == log(distance(E, G)) + log(distance(D, F))
By internal_angle_bisector_definition_v0_r on J, K, F, H we get Line(H, K) == internal_angle_bisector(F, H, J)
By internal_angle_bisector_definition_v0_r on K, G, F, H we get Line(G, H) == internal_angle_bisector(F, H, K)
By similar_triangle_basic_properties on F, D, B, C, D, E we get angle(C, D, E) == angle(F, D, B) mod 360, angle(D, B, F) == angle(D, E, C) mod 360, angle(B, F, D) == angle(E, C, D) mod 360, log(distance(C, D)) + log(distance(B, D)) == log(distance(D, F)) + log(distance(D, E)), log(distance(B, D)) + log(distance(C, E)) == log(distance(D, E)) + log(distance(B, F)), log(distance(B, F)) + log(distance(C, D)) == log(distance(C, E)) + log(distance(D, F))
By internal_angle_bisector_definition_v0_r on K, G, H, J we get Line(G, J) == internal_angle_bisector(H, J, K)
By perpendicular_angle_conditions_v0 on D, midpoint(C, D), I we get angle(D, midpoint(C, D), I) == orientation(D, midpoint(C, D), I) mod 360
By internal_angle_bisector_definition_v0_r on J, C, J, H we get Line(C, H) == internal_angle_bisector(J, H, J)
By internal_angle_bisector_definition_v0_r on B, D, midpoint(C, D), C we get Line(C, D) == internal_angle_bisector(B, C, midpoint(C, D))
By perpendicular_angle_conditions_v0 on I, midpoint(C, D), D we get angle(I, midpoint(C, D), D) == orientation(D, I, midpoint(C, D)) mod 360
By internal_angle_bisector_definition_v0_r on H, G, H, J we get Line(G, J) == internal_angle_bisector(H, J, H)
By internal_angle_bisector_definition_v0_r on H, C, H, K we get Line(C, K) == internal_angle_bisector(H, K, H)
By internal_angle_bisector_definition_v0_r on K, G, J, H we get Line(G, H) == internal_angle_bisector(J, H, K)
By internal_angle_bisector_definition_v0_r on J, G, J, H we get Line(G, H) == internal_angle_bisector(J, H, J)
By internal_angle_bisector_definition_v0_r on F, J, K, H we get Line(H, J) == internal_angle_bisector(F, H, K)
By internal_angle_bisector_definition_v0_r on H, C, K, J we get Line(C, J) == internal_angle_bisector(H, J, K)
By internal_angle_bisector_definition_v0_r on J, K, G, H we get Line(H, K) == internal_angle_bisector(G, H, J)
By internal_angle_bisector_definition_v0 on D, midpoint(C, D), C, H we get angle(D, H, midpoint(C, D)) == angle(midpoint(C, D), H, C) mod 360
By internal_angle_bisector_definition_v0_r on D, C, D, midpoint(C, D) we get Line(C, midpoint(C, D)) == internal_angle_bisector(D, midpoint(C, D), D)
By internal_angle_bisector_definition_v0_r on J, F, G, H we get Line(F, H) == internal_angle_bisector(G, H, J)
By internal_angle_bisector_definition_v0_r on J, A, H, F we get Line(A, F) == internal_angle_bisector(H, F, J)
By internal_angle_bisector_definition_v0_r on F, K, F, H we get Line(H, K) == internal_angle_bisector(F, H, F)
By internal_angle_bisector_definition_v0_r on F, G, F, H we get Line(G, H) == internal_angle_bisector(F, H, F)
By reverse_direction on center(c), I we get 180 == direction(center(c), I) - direction(I, center(c)) mod 360
By internal_angle_bisector_definition_v0_r on K, F, G, H we get Line(F, H) == internal_angle_bisector(G, H, K)
By internal_angle_bisector_definition_v0_r on J, B, H, F we get Line(B, F) == internal_angle_bisector(H, F, J)
By internal_angle_bisector_definition_v0 on C, midpoint(C, D), D, I we get angle(C, I, midpoint(C, D)) == angle(midpoint(C, D), I, D) mod 360
By internal_angle_bisector_definition_v0_r on G, J, H, F we get Line(F, J) == internal_angle_bisector(G, F, H)
By internal_angle_bisector_definition_v0_r on J, F, J, H we get Line(F, H) == internal_angle_bisector(J, H, J)
By internal_angle_bisector_definition_v0_r on K, C, K, H we get Line(C, H) == internal_angle_bisector(K, H, K)
By internal_angle_bisector_definition_v0_r on midpoint(C, D), C, midpoint(C, D), D we get Line(C, D) == internal_angle_bisector(midpoint(C, D), D, midpoint(C, D))
By internal_angle_bisector_definition_v0_r on F, C, F, H we get Line(C, H) == internal_angle_bisector(F, H, F)
By internal_angle_bisector_definition_v0 on C, midpoint(C, D), K, I we get angle(C, I, midpoint(C, D)) == angle(midpoint(C, D), I, K) mod 360
By collinear_definition on I, H, midpoint(C, D) we get H in Line(I, midpoint(C, D)), midpoint(C, D) in Line(H, I), Line(H, I) == Line(I, midpoint(C, D)), 0 == 2 * angle(H, I, midpoint(C, D)) mod 360
By reverse_direction on center(c), A we get 180 == direction(center(c), A) - direction(A, center(c)) mod 360
By internal_angle_bisector_definition_v0_r on H, F, H, K we get Line(F, K) == internal_angle_bisector(H, K, H)
By internal_angle_bisector_definition_v0_r on J, K, J, H we get Line(H, K) == internal_angle_bisector(J, H, J)
By internal_angle_bisector_definition_v0_r on H, K, H, F we get Line(F, K) == internal_angle_bisector(H, F, H)
By internal_angle_bisector_definition_v0 on K, midpoint(C, D), C, I we get angle(K, I, midpoint(C, D)) == angle(midpoint(C, D), I, C) mod 360
By internal_angle_bisector_definition_v0_r on H, C, H, J we get Line(C, J) == internal_angle_bisector(H, J, H)
By internal_angle_bisector_definition_v0_r on K, G, K, H we get Line(G, H) == internal_angle_bisector(K, H, K)
By internal_angle_bisector_definition_v0_r on midpoint(C, D), D, midpoint(C, D), C we get Line(C, D) == internal_angle_bisector(midpoint(C, D), C, midpoint(C, D))
By internal_angle_bisector_definition_v0 on C, midpoint(C, D), D, H we get angle(C, H, midpoint(C, D)) == angle(midpoint(C, D), H, D) mod 360
By draw_point_of_tangency on Line(D, H), Circle(A, B, D) we get exists(line_circle_tangent_point(Line(D, H), Circle(A, B, D)))
By draw_point_of_tangency on Line(E, H), Circle(A, B, D) we get exists(line_circle_tangent_point(Line(E, H), Circle(A, B, D)))
By similar_triangle_basic_properties on C, E, F, C, A, J we get angle(C, A, J) == angle(C, E, F) mod 360, angle(A, J, C) == angle(E, F, C) mod 360, angle(F, C, E) == angle(J, C, A) mod 360, log(distance(A, C)) + log(distance(E, F)) == log(distance(C, E)) + log(distance(A, J)), log(distance(A, J)) + log(distance(C, F)) == log(distance(E, F)) + log(distance(C, J)), log(distance(C, F)) + log(distance(A, C)) == log(distance(C, J)) + log(distance(C, E))
By anti_similar_triangle_basic_properties on J, I, C, A, H, C we get angle(J, I, C) == 0 - angle(A, H, C) mod 360, angle(I, C, J) == 0 - angle(H, C, A) mod 360, angle(C, J, I) == 0 - angle(C, A, H) mod 360, log(distance(A, H)) + log(distance(C, I)) == log(distance(I, J)) + log(distance(C, H)), log(distance(C, H)) + log(distance(C, J)) == log(distance(C, I)) + log(distance(A, C)), log(distance(A, C)) + log(distance(I, J)) == log(distance(C, J)) + log(distance(A, H))
By concyclic_definition_1 on E, G, F, A we get Circle(A, F, G) == Circle(E, F, G)
By similar_triangle_basic_properties on E, D, C, E, A, F we get angle(E, A, F) == angle(E, D, C) mod 360, angle(A, F, E) == angle(D, C, E) mod 360, angle(C, E, D) == angle(F, E, A) mod 360, log(distance(A, E)) + log(distance(C, D)) == log(distance(D, E)) + log(distance(A, F)), log(distance(A, F)) + log(distance(C, E)) == log(distance(C, D)) + log(distance(E, F)), log(distance(C, E)) + log(distance(A, E)) == log(distance(E, F)) + log(distance(D, E))
By concyclic_definition_1 on I, D, E, H we get Circle(D, E, H) == Circle(D, E, I)
By anti_similar_triangle_basic_properties on K, H, I, A, G, J we get angle(K, H, I) == 0 - angle(A, G, J) mod 360, angle(H, I, K) == 0 - angle(G, J, A) mod 360, angle(I, K, H) == 0 - angle(J, A, G) mod 360, log(distance(A, G)) + log(distance(H, I)) == log(distance(H, K)) + log(distance(G, J)), log(distance(G, J)) + log(distance(I, K)) == log(distance(H, I)) + log(distance(A, J)), log(distance(A, J)) + log(distance(H, K)) == log(distance(I, K)) + log(distance(A, G))
By sas_anti_congruence on J, center(c), H, H, center(c), J we get anti_congruent_triangles(H, J, center(c), J, H, center(c))
By anti_similar_triangle_basic_properties on H, D, K, I, F, K we get angle(H, D, K) == 0 - angle(I, F, K) mod 360, angle(D, K, H) == 0 - angle(F, K, I) mod 360, angle(K, H, D) == 0 - angle(K, I, F) mod 360, log(distance(D, H)) + log(distance(F, K)) == log(distance(F, I)) + log(distance(D, K)), log(distance(D, K)) + log(distance(I, K)) == log(distance(F, K)) + log(distance(H, K)), log(distance(H, K)) + log(distance(F, I)) == log(distance(I, K)) + log(distance(D, H))
By concyclic_definition_1 on F, B, D, G we get Circle(B, D, F) == Circle(B, D, G)
By similar_triangle_basic_properties on E, G, D, E, F, B we get angle(E, F, B) == angle(E, G, D) mod 360, angle(F, B, E) == angle(G, D, E) mod 360, angle(B, E, F) == angle(D, E, G) mod 360, log(distance(E, F)) + log(distance(D, G)) == log(distance(E, G)) + log(distance(B, F)), log(distance(B, F)) + log(distance(D, E)) == log(distance(D, G)) + log(distance(B, E)), log(distance(B, E)) + log(distance(E, G)) == log(distance(D, E)) + log(distance(E, F))
By isosceles_triangle_properties on center(c), A, H we get distance(A, center(c)) == distance(H, center(c)), angle(A, H, center(c)) == angle(center(c), A, H) mod 360
By similar_triangle_basic_properties on E, A, D, A, J, C we get angle(A, J, C) == angle(E, A, D) mod 360, angle(A, D, E) == angle(J, C, A) mod 360, angle(C, A, J) == angle(D, E, A) mod 360, log(distance(A, E)) + log(distance(C, J)) == log(distance(A, J)) + log(distance(A, D)), log(distance(A, D)) + log(distance(A, C)) == log(distance(C, J)) + log(distance(D, E)), log(distance(A, C)) + log(distance(A, E)) == log(distance(D, E)) + log(distance(A, J))
By similar_triangle_basic_properties on A, C, J, E, D, A we get angle(A, C, J) == angle(E, D, A) mod 360, angle(C, J, A) == angle(D, A, E) mod 360, angle(A, E, D) == angle(J, A, C) mod 360, log(distance(A, C)) + log(distance(A, D)) == log(distance(D, E)) + log(distance(C, J)), log(distance(A, D)) + log(distance(A, J)) == log(distance(C, J)) + log(distance(A, E)), log(distance(A, E)) + log(distance(A, C)) == log(distance(A, J)) + log(distance(D, E))
By concyclic_definition_1 on E, F, A, G we get Circle(A, E, F) == Circle(A, F, G)
By concyclic_definition_1 on B, F, D, G we get Circle(B, D, F) == Circle(D, F, G)
By concyclic_definition_1 on B, G, F, D we get Circle(B, F, G) == Circle(D, F, G)
By similar_triangle_basic_properties on C, J, A, C, F, E we get angle(C, F, E) == angle(C, J, A) mod 360, angle(F, E, C) == angle(J, A, C) mod 360, angle(A, C, J) == angle(E, C, F) mod 360, log(distance(C, F)) + log(distance(A, J)) == log(distance(C, J)) + log(distance(E, F)), log(distance(A, J)) + log(distance(C, E)) == log(distance(E, F)) + log(distance(A, C)), log(distance(A, C)) + log(distance(C, F)) == log(distance(C, E)) + log(distance(C, J))
By anti_similar_triangle_basic_properties on D, G, K, J, G, A we get angle(D, G, K) == 0 - angle(J, G, A) mod 360, angle(G, K, D) == 0 - angle(G, A, J) mod 360, angle(K, D, G) == 0 - angle(A, J, G) mod 360, log(distance(D, G)) + log(distance(A, G)) == log(distance(G, J)) + log(distance(G, K)), log(distance(A, G)) + log(distance(D, K)) == log(distance(G, K)) + log(distance(A, J)), log(distance(A, J)) + log(distance(D, G)) == log(distance(D, K)) + log(distance(G, J))
By similar_triangle_basic_properties on G, E, D, F, E, B we get angle(F, E, B) == angle(G, E, D) mod 360, angle(E, B, F) == angle(E, D, G) mod 360, angle(B, F, E) == angle(D, G, E) mod 360, log(distance(E, F)) + log(distance(D, E)) == log(distance(E, G)) + log(distance(B, E)), log(distance(B, E)) + log(distance(D, G)) == log(distance(D, E)) + log(distance(B, F)), log(distance(B, F)) + log(distance(E, G)) == log(distance(D, G)) + log(distance(E, F))
By concyclic_definition_1 on I, E, H, D we get Circle(D, E, H) == Circle(E, H, I)
By similar_triangle_basic_properties on E, B, D, E, F, G we get angle(E, B, D) == angle(E, F, G) mod 360, angle(B, D, E) == angle(F, G, E) mod 360, angle(D, E, B) == angle(G, E, F) mod 360, log(distance(B, E)) + log(distance(F, G)) == log(distance(E, F)) + log(distance(B, D)), log(distance(B, D)) + log(distance(E, G)) == log(distance(F, G)) + log(distance(D, E)), log(distance(D, E)) + log(distance(E, F)) == log(distance(E, G)) + log(distance(B, E))
By anti_similar_triangle_basic_properties on I, H, K, J, G, A we get angle(I, H, K) == 0 - angle(J, G, A) mod 360, angle(H, K, I) == 0 - angle(G, A, J) mod 360, angle(K, I, H) == 0 - angle(A, J, G) mod 360, log(distance(G, J)) + log(distance(H, K)) == log(distance(H, I)) + log(distance(A, G)), log(distance(A, G)) + log(distance(I, K)) == log(distance(H, K)) + log(distance(A, J)), log(distance(A, J)) + log(distance(H, I)) == log(distance(I, K)) + log(distance(G, J))
By similar_triangle_basic_properties on F, A, E, C, D, E we get angle(C, D, E) == angle(F, A, E) mod 360, angle(A, E, F) == angle(D, E, C) mod 360, angle(E, C, D) == angle(E, F, A) mod 360, log(distance(A, F)) + log(distance(D, E)) == log(distance(C, D)) + log(distance(A, E)), log(distance(A, E)) + log(distance(C, E)) == log(distance(D, E)) + log(distance(E, F)), log(distance(C, E)) + log(distance(A, F)) == log(distance(E, F)) + log(distance(C, D))
By similar_triangle_basic_properties on D, K, G, I, K, H we get angle(D, K, G) == angle(I, K, H) mod 360, angle(K, G, D) == angle(K, H, I) mod 360, angle(G, D, K) == angle(H, I, K) mod 360, log(distance(D, K)) + log(distance(H, K)) == log(distance(I, K)) + log(distance(G, K)), log(distance(G, K)) + log(distance(H, I)) == log(distance(H, K)) + log(distance(D, G)), log(distance(D, G)) + log(distance(I, K)) == log(distance(H, I)) + log(distance(D, K))
By sas_anti_congruence on I, center(c), A, A, center(c), I we get anti_congruent_triangles(A, I, center(c), I, A, center(c))
By concyclic_definition_1 on A, E, F, G we get Circle(A, E, F) == Circle(E, F, G)
By isosceles_triangle_properties on center(c), I, A we get distance(A, center(c)) == distance(I, center(c)), angle(I, A, center(c)) == angle(center(c), I, A) mod 360
By altitude_definition on G, D, midpoint(C, D), i we get i == altitude(G, D, midpoint(C, D))
By altitude_definition on H, D, midpoint(C, D), Line(H, I) we get Line(H, I) == altitude(H, D, midpoint(C, D))
By concyclic_definition_1 on D, B, G, F we get Circle(B, D, G) == Circle(B, F, G)
By altitude_definition on B, midpoint(C, D), I, g we get g == altitude(B, I, midpoint(C, D))
By concyclic_definition_1 on D, B, F, G we get Circle(B, D, F) == Circle(B, F, G)
By altitude_definition on A, D, midpoint(C, D), i we get i == altitude(A, D, midpoint(C, D))
By similar_triangle_basic_properties on C, F, E, D, A, E we get angle(C, F, E) == angle(D, A, E) mod 360, angle(A, E, D) == angle(F, E, C) mod 360, angle(E, C, F) == angle(E, D, A) mod 360, log(distance(A, D)) + log(distance(E, F)) == log(distance(C, F)) + log(distance(A, E)), log(distance(A, E)) + log(distance(C, E)) == log(distance(E, F)) + log(distance(D, E)), log(distance(C, E)) + log(distance(A, D)) == log(distance(D, E)) + log(distance(C, F))
By similar_triangle_basic_properties on D, B, E, G, F, E we get angle(D, B, E) == angle(G, F, E) mod 360, angle(B, E, D) == angle(F, E, G) mod 360, angle(E, D, B) == angle(E, G, F) mod 360, log(distance(B, D)) + log(distance(E, F)) == log(distance(F, G)) + log(distance(B, E)), log(distance(B, E)) + log(distance(E, G)) == log(distance(E, F)) + log(distance(D, E)), log(distance(D, E)) + log(distance(F, G)) == log(distance(E, G)) + log(distance(B, D))
By altitude_definition on I, C, midpoint(C, D), Line(H, I) we get Line(H, I) == altitude(I, C, midpoint(C, D))
By altitude_definition on midpoint(C, D), G, A, g we get g == altitude(midpoint(C, D), A, G)
By anti_similar_triangle_basic_properties on H, A, C, I, J, C we get angle(H, A, C) == 0 - angle(I, J, C) mod 360, angle(A, C, H) == 0 - angle(J, C, I) mod 360, angle(C, H, A) == 0 - angle(C, I, J) mod 360, log(distance(A, H)) + log(distance(C, J)) == log(distance(I, J)) + log(distance(A, C)), log(distance(A, C)) + log(distance(C, I)) == log(distance(C, J)) + log(distance(C, H)), log(distance(C, H)) + log(distance(I, J)) == log(distance(C, I)) + log(distance(A, H))
By collinear_definition on midpoint(C, D), I, H we get I in Line(H, midpoint(C, D)), H in Line(I, midpoint(C, D)), Line(H, midpoint(C, D)) == Line(I, midpoint(C, D)), 0 == 2 * angle(I, midpoint(C, D), H) mod 360
By altitude_definition on D, H, midpoint(C, D), g we get g == altitude(D, H, midpoint(C, D))
By anti_similar_triangle_basic_properties on I, K, H, F, K, D we get angle(I, K, H) == 0 - angle(F, K, D) mod 360, angle(K, H, I) == 0 - angle(K, D, F) mod 360, angle(H, I, K) == 0 - angle(D, F, K) mod 360, log(distance(F, K)) + log(distance(H, K)) == log(distance(I, K)) + log(distance(D, K)), log(distance(D, K)) + log(distance(H, I)) == log(distance(H, K)) + log(distance(D, F)), log(distance(D, F)) + log(distance(I, K)) == log(distance(H, I)) + log(distance(F, K))
By anti_similar_triangle_basic_properties on H, K, D, I, K, F we get angle(H, K, D) == 0 - angle(I, K, F) mod 360, angle(K, D, H) == 0 - angle(K, F, I) mod 360, angle(D, H, K) == 0 - angle(F, I, K) mod 360, log(distance(H, K)) + log(distance(F, K)) == log(distance(I, K)) + log(distance(D, K)), log(distance(D, K)) + log(distance(F, I)) == log(distance(F, K)) + log(distance(D, H)), log(distance(D, H)) + log(distance(I, K)) == log(distance(F, I)) + log(distance(H, K))
By similar_triangle_basic_properties on D, K, F, G, A, J we get angle(D, K, F) == angle(G, A, J) mod 360, angle(A, J, G) == angle(K, F, D) mod 360, angle(F, D, K) == angle(J, G, A) mod 360, log(distance(A, G)) + log(distance(F, K)) == log(distance(D, K)) + log(distance(A, J)), log(distance(A, J)) + log(distance(D, F)) == log(distance(F, K)) + log(distance(G, J)), log(distance(D, F)) + log(distance(A, G)) == log(distance(G, J)) + log(distance(D, K))
By concyclic_definition_1 on F, G, E, A we get Circle(A, E, G) == Circle(E, F, G)
By similar_triangle_basic_properties on G, K, D, H, K, I we get angle(G, K, D) == angle(H, K, I) mod 360, angle(K, D, G) == angle(K, I, H) mod 360, angle(D, G, K) == angle(I, H, K) mod 360, log(distance(G, K)) + log(distance(I, K)) == log(distance(H, K)) + log(distance(D, K)), log(distance(D, K)) + log(distance(H, I)) == log(distance(I, K)) + log(distance(D, G)), log(distance(D, G)) + log(distance(H, K)) == log(distance(H, I)) + log(distance(G, K))
By sas_anti_congruence on J, center(c), A, A, center(c), J we get anti_congruent_triangles(A, J, center(c), J, A, center(c))
By altitude_definition on I, D, midpoint(C, D), Line(H, I) we get Line(H, I) == altitude(I, D, midpoint(C, D))
By anti_similar_triangle_basic_properties on F, D, K, I, H, K we get angle(F, D, K) == 0 - angle(I, H, K) mod 360, angle(D, K, F) == 0 - angle(H, K, I) mod 360, angle(K, F, D) == 0 - angle(K, I, H) mod 360, log(distance(D, F)) + log(distance(H, K)) == log(distance(H, I)) + log(distance(D, K)), log(distance(D, K)) + log(distance(I, K)) == log(distance(H, K)) + log(distance(F, K)), log(distance(F, K)) + log(distance(H, I)) == log(distance(I, K)) + log(distance(D, F))
By concyclic_definition_1 on D, I, H, E we get Circle(D, H, I) == Circle(E, H, I)
By similar_triangle_basic_properties on F, C, E, A, D, E we get angle(A, D, E) == angle(F, C, E) mod 360, angle(C, E, F) == angle(D, E, A) mod 360, angle(E, A, D) == angle(E, F, C) mod 360, log(distance(A, D)) + log(distance(C, E)) == log(distance(C, F)) + log(distance(D, E)), log(distance(C, E)) + log(distance(A, E)) == log(distance(D, E)) + log(distance(E, F)), log(distance(A, E)) + log(distance(C, F)) == log(distance(E, F)) + log(distance(A, D))
By concyclic_definition_1 on H, I, D, E we get Circle(D, E, I) == Circle(D, H, I)
By altitude_definition on B, midpoint(C, D), H, g we get g == altitude(B, H, midpoint(C, D))
By concyclic_definition_1 on G, A, E, F we get Circle(A, E, F) == Circle(A, E, G)
By altitude_definition on G, midpoint(C, D), C, i we get i == altitude(G, C, midpoint(C, D))
By sas_anti_congruence on J, center(c), I, I, center(c), J we get anti_congruent_triangles(I, J, center(c), J, I, center(c))
By altitude_definition on H, C, midpoint(C, D), Line(H, I) we get Line(H, I) == altitude(H, C, midpoint(C, D))
By sas_anti_congruence on A, center(c), I, I, center(c), A we get anti_congruent_triangles(A, I, center(c), I, A, center(c))
By altitude_definition on midpoint(C, D), A, D, g we get g == altitude(midpoint(C, D), A, D)
By collinear_definition on midpoint(C, D), H, I we get H in Line(I, midpoint(C, D)), I in Line(H, midpoint(C, D)), Line(H, midpoint(C, D)) == Line(I, midpoint(C, D)), 0 == 2 * angle(H, midpoint(C, D), I) mod 360
By concyclic_definition_1 on B, D, G, F we get Circle(B, D, G) == Circle(D, F, G)
By concyclic_definition_1 on I, H, D, E we get Circle(D, E, H) == Circle(D, H, I)
By altitude_definition on C, midpoint(C, D), H, g we get g == altitude(C, H, midpoint(C, D))
By sas_anti_congruence on I, center(c), J, J, center(c), I we get anti_congruent_triangles(I, J, center(c), J, I, center(c))
By similar_triangle_basic_properties on G, J, A, D, F, K we get angle(D, F, K) == angle(G, J, A) mod 360, angle(F, K, D) == angle(J, A, G) mod 360, angle(A, G, J) == angle(K, D, F) mod 360, log(distance(D, F)) + log(distance(A, J)) == log(distance(G, J)) + log(distance(F, K)), log(distance(A, J)) + log(distance(D, K)) == log(distance(F, K)) + log(distance(A, G)), log(distance(A, G)) + log(distance(D, F)) == log(distance(D, K)) + log(distance(G, J))
By concyclic_definition_1 on E, A, G, F we get Circle(A, E, G) == Circle(A, F, G)
By altitude_definition on D, I, midpoint(C, D), g we get g == altitude(D, I, midpoint(C, D))
By concyclic_definition_1 on H, E, I, D we get Circle(D, E, I) == Circle(E, H, I)
By power_of_a_point_tangent on H, E, Circle(A, B, D) we get 2 * log(distance(E, H)) == log(power_of_a_point(H, Circle(A, B, D)))
By isosceles_triangle_properties on center(c), I, H we get distance(H, center(c)) == distance(I, center(c)), angle(I, H, center(c)) == angle(center(c), I, H) mod 360
By isosceles_triangle_properties on center(c), J, I we get distance(I, center(c)) == distance(J, center(c)), angle(J, I, center(c)) == angle(center(c), J, I) mod 360
By altitude_definition on midpoint(C, D), G, D, g we get g == altitude(midpoint(C, D), D, G)
By isosceles_triangle_properties on center(c), J, H we get distance(H, center(c)) == distance(J, center(c)), angle(J, H, center(c)) == angle(center(c), J, H) mod 360
By anti_similar_triangle_basic_properties on G, D, K, G, J, A we get angle(G, D, K) == 0 - angle(G, J, A) mod 360, angle(D, K, G) == 0 - angle(J, A, G) mod 360, angle(K, G, D) == 0 - angle(A, G, J) mod 360, log(distance(D, G)) + log(distance(A, J)) == log(distance(G, J)) + log(distance(D, K)), log(distance(A, J)) + log(distance(G, K)) == log(distance(D, K)) + log(distance(A, G)), log(distance(A, G)) + log(distance(D, G)) == log(distance(G, K)) + log(distance(G, J))
By sas_anti_congruence on H, center(c), J, J, center(c), H we get anti_congruent_triangles(H, J, center(c), J, H, center(c))
By sas_anti_congruence on H, center(c), I, I, center(c), H we get anti_congruent_triangles(H, I, center(c), I, H, center(c))
By isosceles_triangle_properties on center(c), H, J we get distance(H, center(c)) == distance(J, center(c)), angle(H, J, center(c)) == angle(center(c), H, J) mod 360
By sas_anti_congruence on A, center(c), J, J, center(c), A we get anti_congruent_triangles(A, J, center(c), J, A, center(c))
By isosceles_triangle_properties on center(c), J, A we get distance(A, center(c)) == distance(J, center(c)), angle(J, A, center(c)) == angle(center(c), J, A) mod 360
By isosceles_triangle_properties on center(c), I, J we get distance(I, center(c)) == distance(J, center(c)), angle(I, J, center(c)) == angle(center(c), I, J) mod 360
By sas_anti_congruence on A, center(c), H, H, center(c), A we get anti_congruent_triangles(A, H, center(c), H, A, center(c))
By isosceles_triangle_properties on center(c), A, J we get distance(A, center(c)) == distance(J, center(c)), angle(A, J, center(c)) == angle(center(c), A, J) mod 360
By isosceles_triangle_properties on center(c), H, I we get distance(H, center(c)) == distance(I, center(c)), angle(H, I, center(c)) == angle(center(c), H, I) mod 360
By altitude_definition on A, midpoint(C, D), C, i we get i == altitude(A, C, midpoint(C, D))
By sas_anti_congruence on I, center(c), H, H, center(c), I we get anti_congruent_triangles(H, I, center(c), I, H, center(c))
By altitude_definition on C, I, midpoint(C, D), g we get g == altitude(C, I, midpoint(C, D))
By isosceles_triangle_properties on center(c), A, I we get distance(A, center(c)) == distance(I, center(c)), angle(A, I, center(c)) == angle(center(c), A, I) mod 360
By isosceles_triangle_properties on center(c), H, A we get distance(A, center(c)) == distance(H, center(c)), angle(H, A, center(c)) == angle(center(c), H, A) mod 360
By sas_anti_congruence on H, center(c), A, A, center(c), H we get anti_congruent_triangles(A, H, center(c), H, A, center(c))
By power_of_a_point_tangent on H, D, Circle(A, B, D) we get 2 * log(distance(D, H)) == log(power_of_a_point(H, Circle(A, B, D)))
By anti_similar_triangle_basic_properties on A, G, H, J, A, I we get angle(A, G, H) == 0 - angle(J, A, I) mod 360, angle(G, H, A) == 0 - angle(A, I, J) mod 360, angle(H, A, G) == 0 - angle(I, J, A) mod 360, log(distance(A, G)) + log(distance(A, I)) == log(distance(A, J)) + log(distance(G, H)), log(distance(A, I)) + log(distance(A, H)) == log(distance(G, H)) + log(distance(I, J)), log(distance(A, H)) + log(distance(A, J)) == log(distance(I, J)) + log(distance(A, G))
By anti_similar_triangle_basic_properties on J, I, A, A, H, G we get angle(J, I, A) == 0 - angle(A, H, G) mod 360, angle(I, A, J) == 0 - angle(H, G, A) mod 360, angle(A, J, I) == 0 - angle(G, A, H) mod 360, log(distance(A, H)) + log(distance(A, I)) == log(distance(I, J)) + log(distance(G, H)), log(distance(A, I)) + log(distance(A, G)) == log(distance(G, H)) + log(distance(A, J)), log(distance(A, G)) + log(distance(I, J)) == log(distance(A, J)) + log(distance(A, H))
By power_of_a_point_definition on midpoint(C, D), I, H, c we get log(power_of_a_point(midpoint(C, D), c)) == log(distance(I, midpoint(C, D))) + log(distance(H, midpoint(C, D)))
