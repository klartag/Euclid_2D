Assumptions:
A, B, C, D, E, F, G, H: Point
f, g, h, i: Line
c: Circle
distinct(A, B, C, D, E, F, G, H)
distinct(f, g, h, i)
f == Line(A, B)
g == parallel_line(C, f)
c == Circle(A, B, C)
D in g, c
E == center(c)
h == external_angle_bisector(C, D, E)
i == external_angle_bisector(A, E, B)
F in h, c
G in i
H == midpoint(E, G)

Embedding:
C := {"x": "-0.85413550420931005913161015996593050658702850341796875", "y": "1.3192144772084575254922356180031783878803253173828125"}
B := {"x": "-0.2051472158751749541583109248676919378340244293212890625", "y": "-1.23202766651275386067254657973535358905792236328125"}
A := {"x": "1.8612335555871604153566067907377146184444427490234375", "y": "1.21953530000134602317984899855218827724456787109375"}
c := {"center": {"x": "0.46786637473839645725611225940938885184867813107929969466015925079130396435021665783764832744630367706048475108729664014035970250246256463527238187612607929378324594122796125652704237051371603226825736858748739706672035463072970338506253429726445387328566964271248697177706729555560333688617754206899045521970549616661012156536763935958712704149168824630488234155395423973646826507694772474657451704890206793214183027265900550908074958488688655403522241256179976230275095451785577550301156958887883500422439839855821357250557953021738288949534123764628760758985952499419751809354850150297718148381645531911820394647827062129001170817338362769807152030132865505367208298487560887689602836907862457676396509958885425797339783014982363578622208121864808642440625602858173464859057987227521040284309233973035930213253382562313454613311074513283175610442678832241438657228714565903892346846252525805960527630192785226415388311174830138359323691672279335431714565553844016700888329641788791819478772957903484863106868388871594860131644772345191906962263269114185689446941254661782312380392761123982605846583301146789632453431592380542157709081828612944531508447215383433901530896241591950320035233990756625760406988358918268050025015622252914615990378486809458004668643558312287535488385790043453249308202249322775332973884186196461460382699290806247010185820926456264601267146751321364614503625101521066990659684302537961362696609589924350465528649050209398188886195476488644158897583296975660046503550840691577154759484908761321259835158194696441649524145715590298889073313523850548942832447488906823765305347944616652611493298631741435608867482413300315190391977362173713860602578538430829353567828652119626348543662796292642674137309245032256098146971413470244917527692339905973090008502561463808170972294524963839080217765998922387383869069004210928287520614965757664989305801106590961831769892663566605619904853230751922488956131362828529634856690058243176937064553873003748469636547280883386384414021", "y": "0.29734071780448125296282100019638447411404815905991340498980503268333168612385504361073389400252769026776468748192298223759241721592830587440987273518126364797454457065315454007167562578163381746180290670912708636875416709790399235782708009822604535258648649747212977456446356945045332295605858550388875846097799943581492892113233682733554474354765426946338129191902382950383693532494582053500448145508353189740980301687409284452831835186963559051173230497920955097546355617743910400446847101205333085749124566508238159141563128909187586226348424212368540855488497464378248228852082421035064950437024781319914987209685090649102063276151213224214555458882074090470573462149372381040993991079241977726930044287306445510239613834805770096851857610585356930752728132755659659819972202473327923767557612686321238609841235011183907671270507108809249010486973379657666849076048005838571290246521289186389460270507742034840797403522753682219889255256049261880266360292385417706242747275063617602536290893610063855927759965245979775813691615772379072611773019630906105385856757765687595972413503087462766062947476293600233860811922956702717247509216706236833957036417901423116856838099385570981309301862420270411514807869403816158776721868184380308392147804537153056754409541764263233053801701508386063202105286025574749076977087484116789098402863767322099540316499960695334683070902723434878436901828477673900723863554526676732338162074490756353392890700588121371120902449256259049910117267709093331643340826166604659332827882946070781158300033515428359985298136937177729002974984508434614385695290607922833271331348132918394432111726789582443687423550598850978340254799810042849225108467431258354136318162647572393571457144996176455927806382422662812642443965788579025542184697751080784821309281615382363079511590765974076831622338738880886008140809884305843145484756642575687294420908789710312493583943969297261326448866178540505517385259215361210035289757542862684141477955129733314203213289307771937096615"}, "radius_squared": "2.7919149480996820592890408062198174764017985668332774396455626307687960357193555378412433503179504938346095362387392140313225597085124889092012165196639978220700633500996089486800573277460406363899245505111400477989830690358672720861887823885837994408826141429434872040370196200003981908731179980499118607301386786855534808925799544617121908793452659785288097357365580089409691868948368999046556020525034103933501454507399394192601038528412838088737306005482374907834391196704947727089731550863063035243171729768211889304978970535603549136578012495053710347873894541804421457784202294186722325019094087486346959641519263121273027688927235233917130768943998580769154044237058234480123729473813778646050389402455788879393770042819892840874885512569283226862909775111264730899519853071940788091341112948756790753514709246988572157808595011743854331561050852096055611752056391872876899854926951871456516356898893116420678345342630390635104475956770702056918713135248176578346618240607697153947447996144651682043690573520841774644962063478017808673494018907062358332113131057081121751291083846081099312066266407901238218268746990329607369992787597779463074006113168899940601812995034448246018703939168592981692169733130777656243038901041367389000796725017468587233261306871420910992733399335654816796105743714521260430662241548955605375756447075283657608289215853635461776381780974595948424409595480172689029107519728461690690813909862153286050750396507114548881002099155910181579202168867036228587143160225283149620218182361326778822999547507502734254513620549034138462329113008033101330094804985701114084169644396083385018654935250584366412656069832281496307321224406697604459708032484624901679922574034575742591535991311177460894025814335088191110979298272902126374189863509030806342145765645615289765168831777759199344126941242480903825055293081287967967547168961880962675999136496761576784112834830781517411916673429601565589187546205371528623719918059263641097883303732300055696306884575032564245959"}
E := {"x": "0.46786637473839645725611225940938885184867813107929969466015925079130396435021665783764832744630367706048475108729664014035970250246256463527238187612607929378324594122796125652704237051371603226825736858748739706672035463072970338506253429726445387328566964271248697177706729555560333688617754206899045521970549616661012156536763935958712704149168824630488234155395423973646826507694772474657451704890206793214183027265900550908074958488688655403522241256179976230275095451785577550301156958887883500422439839855821357250557953021738288949534123764628760758985952499419751809354850150297718148381645531911820394647827062129001170817338362769807152030132865505367208298487560887689602836907862457676396509958885425797339783014982363578622208121864808642440625602858173464859057987227521040284309233973035930213253382562313454613311074513283175610442678832241438657228714565903892346846252525805960527630192785226415388311174830138359323691672279335431714565553844016700888329641788791819478772957903484863106868388871594860131644772345191906962263269114185689446941254661782312380392761123982605846583301146789632453431592380542157709081828612944531508447215383433901530896241591950320035233990756625760406988358918268050025015622252914615990378486809458004668643558312287535488385790043453249308202249322775332973884186196461460382699290806247010185820926456264601267146751321364614503625101521066990659684302537961362696609589924350465528649050209398188886195476488644158897583296975660046503550840691577154759484908761321259835158194696441649524145715590298889073313523850548942832447488906823765305347944616652611493298631741435608867482413300315190391977362173713860602578538430829353567828652119626348543662796292642674137309245032256098146971413470244917527692339905973090008502561463808170972294524963839080217765998922387383869069004210928287520614965757664989305801106590961831769892663566605619904853230751922488956131362828529634856690058243176937064553873003748469636547280883386384414021", "y": "0.29734071780448125296282100019638447411404815905991340498980503268333168612385504361073389400252769026776468748192298223759241721592830587440987273518126364797454457065315454007167562578163381746180290670912708636875416709790399235782708009822604535258648649747212977456446356945045332295605858550388875846097799943581492892113233682733554474354765426946338129191902382950383693532494582053500448145508353189740980301687409284452831835186963559051173230497920955097546355617743910400446847101205333085749124566508238159141563128909187586226348424212368540855488497464378248228852082421035064950437024781319914987209685090649102063276151213224214555458882074090470573462149372381040993991079241977726930044287306445510239613834805770096851857610585356930752728132755659659819972202473327923767557612686321238609841235011183907671270507108809249010486973379657666849076048005838571290246521289186389460270507742034840797403522753682219889255256049261880266360292385417706242747275063617602536290893610063855927759965245979775813691615772379072611773019630906105385856757765687595972413503087462766062947476293600233860811922956702717247509216706236833957036417901423116856838099385570981309301862420270411514807869403816158776721868184380308392147804537153056754409541764263233053801701508386063202105286025574749076977087484116789098402863767322099540316499960695334683070902723434878436901828477673900723863554526676732338162074490756353392890700588121371120902449256259049910117267709093331643340826166604659332827882946070781158300033515428359985298136937177729002974984508434614385695290607922833271331348132918394432111726789582443687423550598850978340254799810042849225108467431258354136318162647572393571457144996176455927806382422662812642443965788579025542184697751080784821309281615382363079511590765974076831622338738880886008140809884305843145484756642575687294420908789710312493583943969297261326448866178540505517385259215361210035289757542862684141477955129733314203213289307771937096615"}
i := {"point": {"x": "0.46786637473839645725611225940938885184867813107929969466015925079130396435021665783764832744630367706048475108729664014035970250246256463527238187612607929378324594122796125652704237051371603226825736858748739706672035463072970338506253429726445387328566964271248697177706729555560333688617754206899045521970549616661012156536763935958712704149168824630488234155395423973646826507694772474657451704890206793214183027265900550908074958488688655403522241256179976230275095451785577550301156958887883500422439839855821357250557953021738288949534123764628760758985952499419751809354850150297718148381645531911820394647827062129001170817338362769807152030132865505367208298487560887689602836907862457676396509958885425797339783014982363578622208121864808642440625602858173464859057987227521040284309233973035930213253382562313454613311074513283175610442678832241438657228714565903892346846252525805960527630192785226415388311174830138359323691672279335431714565553844016700888329641788791819478772957903484863106868388871594860131644772345191906962263269114185689446941254661782312380392761123982605846583301146789632453431592380542157709081828612944531508447215383433901530896241591950320035233990756625760406988358918268050025015622252914615990378486809458004668643558312287535488385790043453249308202249322775332973884186196461460382699290806247010185820926456264601267146751321364614503625101521066990659684302537961362696609589924350465528649050209398188886195476488644158897583296975660046503550840691577154759484908761321259835158194696441649524145715590298889073313523850548942832447488906823765305347944616652611493298631741435608867482413300315190391977362173713860602578538430829353567828652119626348543662796292642674137309245032256098146971413470244917527692339905973090008502561463808170972294524963839080217765998922387383869069004210928287520614965757664989305801106590961831769892663566605619904853230751922488956131362828529634856690058243176937064553873003748469636547280883386384414021", "y": "0.29734071780448125296282100019638447411404815905991340498980503268333168612385504361073389400252769026776468748192298223759241721592830587440987273518126364797454457065315454007167562578163381746180290670912708636875416709790399235782708009822604535258648649747212977456446356945045332295605858550388875846097799943581492892113233682733554474354765426946338129191902382950383693532494582053500448145508353189740980301687409284452831835186963559051173230497920955097546355617743910400446847101205333085749124566508238159141563128909187586226348424212368540855488497464378248228852082421035064950437024781319914987209685090649102063276151213224214555458882074090470573462149372381040993991079241977726930044287306445510239613834805770096851857610585356930752728132755659659819972202473327923767557612686321238609841235011183907671270507108809249010486973379657666849076048005838571290246521289186389460270507742034840797403522753682219889255256049261880266360292385417706242747275063617602536290893610063855927759965245979775813691615772379072611773019630906105385856757765687595972413503087462766062947476293600233860811922956702717247509216706236833957036417901423116856838099385570981309301862420270411514807869403816158776721868184380308392147804537153056754409541764263233053801701508386063202105286025574749076977087484116789098402863767322099540316499960695334683070902723434878436901828477673900723863554526676732338162074490756353392890700588121371120902449256259049910117267709093331643340826166604659332827882946070781158300033515428359985298136937177729002974984508434614385695290607922833271331348132918394432111726789582443687423550598850978340254799810042849225108467431258354136318162647572393571457144996176455927806382422662812642443965788579025542184697751080784821309281615382363079511590765974076831622338738880886008140809884305843145484756642575687294420908789710312493583943969297261326448866178540505517385259215361210035289757542862684141477955129733314203213289307771937096615"}, "direction": {"x": "1.236685474793927157924233598630435881899368598672192556339756292847884424939005272941055793808560203367907960643136405307219134930977530472877349867853390218229928489259854314627986169580020715652886379961022014549876808082503948836203254107991751043130708582969390235132763753816019931552658730023663735620989037521304674124573082015514302162887587358691442960381897937383107659335093318923893529704290219351675988433983154881366293128914231312684157786201480864241470527575721581440617935509242608511069599561511496926809768349411943514493252065723819110287187019029911256343364275785335250637621566167544115925344549693791534802526698630802539099189606700872225385235212530924293947542574105424127145920500397002779839936296570840024773059853307584840915636768857440039763479982367074541449746035915148888295990187707352230238990018053711750954144308620138809976883742115724884867240132151553036407733212029452351001408181148547901009058948544776803996813109794663197024028484109155647377703425819469238615681007350074214226268838381792156796931022843112741585578501504724942614286611656071554751105380365065336839074651759050209757046463736166351815499500167954499775748274253595779669100792647121031350184843983469263329683401492312324243861785149909010964921399974029993355192328179388907157033881697160551173411220064714365739871486847363979128055809292427192530296230887611106093412659603517257525575981544429309706919229544433199819786905286916886940388059188524570342456865419315910818788092884797212950214263357407283557028588672357594239297037336833284842645973055614788446573441821740012694765563650611340300863538624422593834419037752882859269296492172345631732166202287312592012645840177960053069202263154340874530020403565474471391662078005002670574819049036744474321928803028421151037650226164306706865275757054211108659148363242355561784626876795022825996875798456814411987710845771048466898529739753628458816169803454325959209295194905532301524602648125471948415740679774282403086", "y": "1.467208925432047383452435435060544997870324093433710894453534477098678876822843191586270724900453931362320764990828989856952610365492915654039568423956217897555134955687013927507498906202705530517980466157769585812948581720032990557940515688656209139307023838664130740355830098248810397194427054369129545202092613622788371489405238193215118084687118308954928127870725453393885388604659586448623375114035125751528759587251748703473696071907079952642564727770898339851633918230907698478703317916317844819544081382213901227916716780471634833882532901498759595352409013808705218671765323853549498379346159778818690484505206939155107414919932133559319413262272637519621051591452619455028393687793544484549842389431632340006633436600402448462889619258519870457527238304866503886152010542645955624870651481525442262925712642595368363237299459274597098976793032482964417384800560462130084360760551242513458394284906012024096432791959770703147003020556499293457666071026410814326405158537787946089896223992801579445465375739946094558848448026417613398477874251206823268312701521443756370454073295747588398425987453655897411808269535289270610516118112444665390858871010370864330891323041861241808185426138078304654127143858192474559702051112193751274997412168515645828708819264496102294603118588459260164161841216168257321043004355900192212096050749808129338911979129350552984359345659775749976816045034470812977137513374184070557208532543920535999515703891958367558998692911153152912472957814900388999063858052732515818828927036737930318210244312658485468168475286073990571244653938106106391561985394709193065727577413965673076737459652184908037583473756874253978535763516810002713051559508346085369940432174885303897599932682232976388003098723434659038212531728351123491310771653352803037793214793320352212796233529979345027797136321952255562974529403845581638952232321541469413937238138586114524952662592481859051718988213951518589061403092903906911127632283430866922191750847356726802005324449472118546801"}}
f := {"point": {"x": "1.8612335555871604153566067907377146184444427490234375", "y": "1.21953530000134602317984899855218827724456787109375"}, "direction": {"x": "-2.0663807714623353695149177156054065562784671783447265625", "y": "-2.451562966514099883852395578287541866302490234375"}}
g := {"point": {"x": "-0.85413550420931005913161015996593050658702850341796875", "y": "1.3192144772084575254922356180031783878803253173828125"}, "direction": {"x": "-2.0663807714623353695149177156054065562784671783447265625", "y": "-2.451562966514099883852395578287541866302490234375"}}
D := {"x": "-0.76305016202653284451265214966445053889625535181724788804444819532142306911475962061279200058804552009599276437569973034378562655014770834184769576752414529816476701745206480241902206535633938189321751566199560870670992920737875152789934668683010346029940347612790469812101909045710880647623009529650631268573712907648658261006185365164077437087704774597044903506543858578783573636128116926817975428273398687418647502535558464535947637993355172494079315287859823836326477230994910153791635913588218850679901170041411613292832787954233641053999271987030740738435149364502326978091389638641812308846509141011667647255930907576875808097583911503175213735011924193744662298590006054130661746022768818667753672735329422038202238972101666926559367228582383730746516404710856103626061378277897678017665641697926531182566740519441353029438888362564661949975524410897568145566391463121362338221942598154862046268588173887392815836326444904546046227656245859883922330882361743651193466367203116265215080796470308311714614063319225748638732501749313035739241648870537310638694943177668974091019424973860526144080118155021788011943472008945283819643896916346616926903629332107997112519365316528678772070234259019847990265918111681084357403416682402902998892600021189203757294069189976859983153721437914523333918877995889505067016024747399885387450867614700428808252770618443790736270073723053465061854072036115860876783028463416104602080773967216849827840624428785689604419619381308876655567903271410945998097319777693071561803114991465891679538959115485375367795303290149836289880396197868143325507035440425804216360181785798687049587793778712601245120581947381255417139771391008835687986555836706421365566370095061539798907376138666603634562603887733309396037482742669032389876410123816909838730760231171187311714953010870073306460150190003950039854566156138220117300352230103137798573491115038178219194558260510924504708675949322929190924848190901653695665966609749794710220780579610996903858481867709094446753", "y": "1.4272785159236142292779999816836204344919960601012624228287843247754122376527383013911676868258011822904596886509105580850070442910136516511949768950719646639833146527661611172462380975046150887982810188775941315040067931491260264735408519553279368073142831996348882811544222545836435136930934220717368802812119792719591175631420256743848548023950340281709946948097233215174467316678781803029439220394934822363642303981465979088391034704422865298254912888268843310328707376705116926262113892137154866293140447854033945039836573352337978570713924453821467006478968207188490917195029431745091824740939726087787103517236618344133742488325551340151972260094477066940806702829675402668683956977911640370973098039522521565021521604764040618564433869558437971410837471537434592599401153357470841451856334394176270656438171516516217011129317583849388497716692861801796084883409137257137884262704804096213972798496516951807129828860843985626472492115188968793199411280710952846524099259664869397521549107499468215049907360135197557089758134796779437869995938039394920969820868053777875366608058830029866723649789037276466863319612578340786584120185134476323465477474342264818705251501897042458238903594817331533403612083677548577848822636428748054340436779081388845871199421860160810496181260438293884154082334873762807655604291034333031970622549898187604263794775801413017077092730006009671423388468780622329375993445361728149752924293867941052862395624637881817815837386129749474961396075940186413722005437663606165583406867064927513630571186334831536359100471705776683715936278802755143579289085778957760381826969119218190509165760593707701596372046267677670106185935056200644101607120142669109746200608222702852024827832322039305012695128571578950228319406682223507974345779286461250097315813803110993755660402915567816154821907725274886420271781510241766041819672876826324861075329721266194247048144701695337665801751681924201722677893930605703917969225209037991568041239500490903074003574598193044740254"}
h := {"point": {"x": "-0.76305016202653284451265214966445053889625535181724788804444819532142306911475962061279200058804552009599276437569973034378562655014770834184769576752414529816476701745206480241902206535633938189321751566199560870670992920737875152789934668683010346029940347612790469812101909045710880647623009529650631268573712907648658261006185365164077437087704774597044903506543858578783573636128116926817975428273398687418647502535558464535947637993355172494079315287859823836326477230994910153791635913588218850679901170041411613292832787954233641053999271987030740738435149364502326978091389638641812308846509141011667647255930907576875808097583911503175213735011924193744662298590006054130661746022768818667753672735329422038202238972101666926559367228582383730746516404710856103626061378277897678017665641697926531182566740519441353029438888362564661949975524410897568145566391463121362338221942598154862046268588173887392815836326444904546046227656245859883922330882361743651193466367203116265215080796470308311714614063319225748638732501749313035739241648870537310638694943177668974091019424973860526144080118155021788011943472008945283819643896916346616926903629332107997112519365316528678772070234259019847990265918111681084357403416682402902998892600021189203757294069189976859983153721437914523333918877995889505067016024747399885387450867614700428808252770618443790736270073723053465061854072036115860876783028463416104602080773967216849827840624428785689604419619381308876655567903271410945998097319777693071561803114991465891679538959115485375367795303290149836289880396197868143325507035440425804216360181785798687049587793778712601245120581947381255417139771391008835687986555836706421365566370095061539798907376138666603634562603887733309396037482742669032389876410123816909838730760231171187311714953010870073306460150190003950039854566156138220117300352230103137798573491115038178219194558260510924504708675949322929190924848190901653695665966609749794710220780579610996903858481867709094446753", "y": "1.4272785159236142292779999816836204344919960601012624228287843247754122376527383013911676868258011822904596886509105580850070442910136516511949768950719646639833146527661611172462380975046150887982810188775941315040067931491260264735408519553279368073142831996348882811544222545836435136930934220717368802812119792719591175631420256743848548023950340281709946948097233215174467316678781803029439220394934822363642303981465979088391034704422865298254912888268843310328707376705116926262113892137154866293140447854033945039836573352337978570713924453821467006478968207188490917195029431745091824740939726087787103517236618344133742488325551340151972260094477066940806702829675402668683956977911640370973098039522521565021521604764040618564433869558437971410837471537434592599401153357470841451856334394176270656438171516516217011129317583849388497716692861801796084883409137257137884262704804096213972798496516951807129828860843985626472492115188968793199411280710952846524099259664869397521549107499468215049907360135197557089758134796779437869995938039394920969820868053777875366608058830029866723649789037276466863319612578340786584120185134476323465477474342264818705251501897042458238903594817331533403612083677548577848822636428748054340436779081388845871199421860160810496181260438293884154082334873762807655604291034333031970622549898187604263794775801413017077092730006009671423388468780622329375993445361728149752924293867941052862395624637881817815837386129749474961396075940186413722005437663606165583406867064927513630571186334831536359100471705776683715936278802755143579289085778957760381826969119218190509165760593707701596372046267677670106185935056200644101607120142669109746200608222702852024827832322039305012695128571578950228319406682223507974345779286461250097315813803110993755660402915567816154821907725274886420271781510241766041819672876826324861075329721266194247048144701695337665801751681924201722677893930605703917969225209037991568041239500490903074003574598193044740254"}, "direction": {"x": "-1.381161303731283548688806683790420076827908272031816492512396095043947522225082290540478210576946797161551267809738571918985085734039936174585115327406734899394393226054922009140743346034790189411478940197844056260379981484984184134809075366151622869504542199747219086832250052568027351919278580363055711889993593204584143438341246512389786426029814917756122866805101924453119485434135035479087906279802869054493191280380511222392218074422845687631599226198024374099927095769099253361161707693209133803653665570454918457535614270251870563319707010024439850871477562910611324888520084429128284942409321297538188630734057135799656231792482839311572438407861073202775745691545659066258086879164002739440726486234264024561477936309069825501166120410487002338897352257717843963352655259910213112414454958010628698270516959111686873737724109295854135386556766851997791964200204299493017055070653302849657961672865705319741741345973179161494426690609857760185742982088874441417066717704170528252657706376809380424551862436340431756407088662060124972695580714116433764559351393812216716202174284194168050962737586852887365821914466060399514706020706038757347577152974724855964682728587408259767389454091804594551206535437547657950635387534635671121932401213740062867111246105361957922107467525528376191890562409781739518675476621216633637656832425103426342679531511535656213231573998152613600019912878606058034520003880669460448797186216204498633469900381313107561026653651156233929691951865925606722826432818849331902722718673983877457229851972085486831451915709701756007791334102796054660256744166321016352733554862191920525356983943348533853291427723216567885772873672562819655654289071637784038243955776576855531411275458268139806555612772931491290465451172375965175745333134986704261665068271024047497692222706433340412824828731205630788774985776625265280320532888774347608191853489160209354519479724652844638019058406711222536045479722151784157640350864700902957683564665617837236616322346027194121669", "y": "-0.08837408573190551547954791584307324200454738673955385246868575972001319873486350120146289165821288403720178501998425754865334079881666301483631859389728636730818313007985180586808527528004136032555433579066468358318156216867339302300632864972710813919177884196885950850087069141665858266167307700801679793970548322274920676633442164117386482696884205263624822563430577837914808138079932646450694475398096097772166442916534364632251237294277572981531534688836882325665824689993631630823212299969835526821070993150928477337605572339566891520942126987091829467936411703019389669766691130521779007364877428657990554793011668015523411463687301683972610854719361341163287511256276581997853241904121002404150458749057853532794675320996961990191429786260659337261409090970391429286130596585383796434047623290166307503661564087580235195031869185710449598081074516378375416510822723183119888563180475100131936515189292357638108941190462781198626087073407058381991204550687141733230491341402459535522697631261831657356604096029390147994409988741591926804661124878010861473126073423489364968502703651330982189908100684456391918000392175333071458311246986181985050078955368050430491039348270296729404285542079418591643154715804500748717077418579510821746505254150408107717587228933375125847668008924903496663100029112938196040866090468487703695684180272552939249512882097412242015028307898000781343507212380069179066140628181316445137587758867914648800816322983747142255590528822536382260990187010609693093866436833862355194699884842962894398716609198908631790238968856087314381193023452110785246958377547658457024157494748969044640834894495813211186989877487920478530082394880516319380448376624403456946373952130074873569008812653769864655695270573142102648667858846541825940340635620253557700557991273971687699516704651835919908847064277526512607007562510361393489699948113433521333572938363249625379193300699043131256338929952042933636488898632345122033540834933181430946657406910737782655110009914912828387473"}}
G := {"x": "16.474994179076122820023347209584628590469515482048972723374897429174937398178529355596083308977253187635719957770498237326993987766060051659750065569589435073413447778612189346196055387644344520311814600281641776551141545111808732148166190826805610713078902263304694843258113660762794149413590554192093712954353984355788031800791171130976330150241397560258910496620021657768215147403091344716082868773174765301600072594082434222416043749751323541407859856546982820781727329781619813382473456938355040980623577020131743772731009384966804098541385790863866749157677916058202252916269235927339399417749114088957683870723642482335728433539258424101487834128400951650493755782583607404126436040791947865458143418852057790529651502715947010242431652105097289162322752921340325744342405858430106001722499333024278629182300385396629829866551798091037833645499314023845900886347791499183335914495730879228071300463897582816222570550702799817966801388256621175481337021736375914228755123423972247210972145302397045996641835121001946721839939632359788180616262181191904674425057724823270670023387642825840123818911007932250730637938900662849547328494623751618728662911518594893129733586507089843410640834193157061395190803243147271473194075444438677652607917798780613136875920506844522086546178034672764228145413918732581928283515970571291525542871945955632782567838369723564084604075950804738184284143546127760001808851468508768808333740005644319721089369319964682637203939252175014310646574592985376101119610206900584617074926040786167835828006763588134446313396457692488727164741976435778490006432630385093883073789623622427262648283941736341832021454807686298591518545140341704437211854649394442071517353612818018927897139316951676190062329895922636436823317121586443572534852078291496879122352865129459731570933638165023926784807872475150547636621738846141129210591751954471320001885085199284607434523569331247352540023204596759711846243571339723446384239182732059912932420673459445699410800987271790484268", "y": "19.288265462812355914030938940445959851501445885942595520852733782394309669835037147857021263272492382724622311142937502302859333896141342517864427169071924484792362055250356770337976188865892318868210902183999155585912507697590525401323812148228764901417829830606730390912863905184863313270003062193254242544490556021841604399634177587277446395138569882858145824040800819760732900901266277647105260691842676230677611243563505071738347611050108413610530095078866318691157536371833736365010056019742222479383969742161543088925266317602635670466252339985988019753989646132458886581690818791829733974517831886922054584440207137331715784160644271447613837849265218319756616819109694059984640593952589739933092833645185265092382853261542274532472597493222021532345383550310485611588283723635604791402773919146706876148715353944505868930968063380901388258952467930841533359753699117300937927384036697078303035385582409258188104539989042464004929832874459418638140522508347634240705311971164370466720572217193818709265277482514145954117477621165823860016985064883339888522029279826856784663539041955037741064964483062938777726417233653240109438764200473475598395692209410548408763716547831012735523086031706176670059785807169701765244524501314346355645939688454036208528522425505018076306809412999148171500572668311576697186586178961026998458489680694628071585208936143789677323356224782981707125526295367875025272351219894061998720578068481609828951582719609939208125849831358224506813303222547736142404379123932697489267423553205316885106770816606638104944630599281483103385931805995381960957380459189627234752052532601981140070912210348929939892732853484202480931982695508017259143338685729696887443059156535251196073523225457579473746131711975626645939704603491069030209766773457014700166766896561254001220012365358398294829612468997639797755560064074988726187883857631645934122005204509303968740555467130010786222699059027694801397456564673714732290021719980783965644056857115790496010844795404182798513"}
H := {"x": "8.471430276907259638639729734497008721159096806564136209017528339983120681264373006716865818211778432348102354428897438733676845134261308147511223722857757183598346859920075301361548879079030276290035984434564586808930949871269217766614362562035032293182285953008590907517590478159198743149884048130542084087029740261199076683079405245281728595866542903281896419086987948752341706240019534731328692911038416616870951433370719865748396667319105047721541134554391291542239142149737794442742513263616937992423987709344978672618294457592093494018363514255077178373768720526199885504908868715158290450782784704037943908600956551812870070856321025899779677214864803352082919383729608140511232204935286221111054259220456024251524666432885323014326866661872687793364504474961030196466492865352658202282795836377318965657417105509882187999831271611934794874963051173130143729317468579111129691479128068643838288382912717540188226831225550600780019152489707264899241338637408040618819209920930082702879937440715947313855259504858947661578193677905853625119447436166880784447235135720546896913657627032833091142372009700073527586127412234135562209656454940532021873691836214616072521274461504673305496587050361659499630343416164975986722115833483911906255851333437596591781178044983698720715017967553648360613718205980167629011178916267953064684932427009051442213023817143105048637771732009192164660197280669214954202847246944191217649917952443912188187929911029332263032947008530727949811203781370988283077559306908178082334887564199690217089794355276275470777426806797738808948938607470633959165453759726665768063634534894476688790635129575348960348139470344725247719159381039421521618820016851367803597820067007141206666883639939051465717711173122598709146515628144446373905887738675613889603689239883770720646939443901707364481233930849512193163655890477712002208370704765560606529948075554451462566725102498651775794277756057992300703778599812509897475569882581914641788979701748465197888136898052827164204", "y": "9.7928030903084185834968799703211721628077470225012544629212694075388206779794460957338775786375100364961934993124302422702258755560348241961371499521265940663834533129517556552048259073237630681650069044465631209773333373977472588795754461232274051270021581640394300827386637373176583181130308238485715005027342777288282666603832572073064955693431120761607635579799123246322849181131060490910548710734631040640437071302187989581333329814598720020611312000290379348333105462746364201847392635158977766684376077036219623401704488033472557663648682910548367141544373103881206844351058215010901917394440398500606022282685290219113682084610782018448796962190429796122311757203017089351972902523725047586011966382591248600973894958047999877504955867995377954199363324389335411048940028741844420145391750230049596311235638520281724728218365672344969391819111008637091009252570895878433254149246247944710988190453299148032980392876082896431019111927174760187204020627161009056515663923609002732460417405766472286342714385674869718561271968894448072930673576305962004711902984287418663721938370364148327008472196229994705581672682316101336409569281837679219689830281942123897886660487708433612743080523279544403926039322506039316765058715915790747197837088669127833880363089215738252034224132140415044017608127642836620939781785269010974447212591591839245334941869678753715120770326260086652457472722900723070162554933825804146610510994066945866814402448627455764596674371619604075029572379498193347294188936927993720412978511913330123483448855758804608523988059843266301967078408255398640524071666826344277837326830069655825421960147391223771883834841797363561321672653468042228756972116800211402144031203915054875658940473377096720165120977681011273861820721306884296428158068754839112741899298563575388160075641365090695315729179281932243289184840814590235788213657120287014035331071462032035468381974534114916997435938604065499282856545784136634163214596477047054035294182042065618190214888442409510847394"}
F := {"x": "1.5447356238409259559355896868466937815726010091134259893253961925898531650815301456047154743483215901374828326926734709726376886888062608460896199574231915355544690384177992725971654689110243066510071290239352911222179300049502102273248614995391648539126483159270636111300753680724522020179749226411637866874514935698267673617565212418596796225129860710175371085452844957145473437084804636266069141689593164103819926865361043406522325842007498981219365336085813191604005974352275866344366254206264664038799678933585551111770891609909992366541520369917243421731842551268952774692100842556230581011740467200582646185464204275370773531782354670782747540904106697626350591691516332187133822453540259081278984500293039520734006935277951909123651347507812555518136800708865738503681687754494094010581343256423292099939297197061093823373476782959386204281817010308111002570194587528970709511802317154302252436943140396915354083123439965324785063577280440276387094299526509074497939679577981235301225217459078241086029044516977593719626949591849061486079606088782179114344556285815021105667978307676048609989339542532556117582641394709305697000156150585057901181492563221641878639390202690636766193858119397831752585787535624475220265125350753012790261036201720082865653210694950155727623708087446084254879987250804671129020596644662926942081150649712524950725792244155548362890649788214510575346889200019457275132732031340877594085089478536513670262876427251033982462668346693576088198492229154160974314259921522324240893256230696001222507792198751934830631970679826012305920285720133089539549569478437998771179134057437370185493680218453178182387638666234394857891836191096007518173881067580330528241688135037218100031071767906005171965249540550220714611916786388531451371422448396441535463105751732334019307550032512397199515299663863470229141849271293112074242235500147900574405366740590472463161079698691235440319832682294124699275936071081747735178838434095904179959052563323046190724304173469682138758", "y": "1.5749429909853942845566401374945854154848250731652878086432038143893862470529274303730702485420045768303637109864782210834281547391213429727032308144980629026709823677284876361007774846862998524692478883337464747221124567106718485159427509591752567907153142717930515043856775103275574809497767429343532476312745710026260776387314416939780345763826447816969628605864352102722284335067735607972922681644055970483109352862463127510504275805562754012305414772996278552138732804747207260708855264321389070810191533062895638123209363138457430028531215821470133227578107263035229037804605367765503503650538362255979199419079480763468729023076458254948018884447175185150770820233945510760132818226864027279373671433453658968987858682388914357685244847102137913062059944809003650808552812773776460988462858240192881807098314820845192345576283798800990842302706379615961043853584500338492105937922845469909600347594531534648990589475680432105167669311335818368562629809651792178619777318565698144259787929668055061487429641762735638115026142557561765437478410171360348832345318422383934090465045617480016202004020304992774067572744969260719603361641327982720132550381314031247478793828887991126695139263756453255409199620144298870162754522058931148517123738275071117577618776926791000291784380202715995248513113833175275234717021094867184194092501540437505625725285855505080101481928177151256590264660161810142422827169515497398064499432403267457528724456628570239525616724134904501784086955310889536218455699701035428199694739283995914293302669214207242035232063404878419118324815935803876044493431507683881940316133509180533613806190305685005804460627023545258143483833401128361719748547291512763466271842060327899029713379236535883035410267084147764700069612463938137482782802532778718210873873381007800692158409459425980529007502458863642458094916953408794606404543405461842619324279136742306681171774825966765857255445349316664865365936243451247298077410617271837360815143280804445878766354226556775347047"}

Need to prove:
collinear(F, G, H)

Proof:
By line_definition on E, G, i we get i == Line(E, G)
By line_definition on C, D, g we get g == Line(C, D)
By line_definition on F, D, h we get h == Line(D, F)
By circle_definition on F, A, D, c we get c == Circle(A, D, F)
By circle_definition on A, B, F, c we get c == Circle(A, B, F)
By circle_definition on F, D, C, c we get c == Circle(C, D, F)
By circle_definition on F, A, C, c we get c == Circle(A, C, F)
By circle_definition on D, B, A, c we get c == Circle(A, B, D)
By circle_definition on D, B, C, c we get c == Circle(B, C, D)
By circle_definition on D, F, B, c we get c == Circle(B, D, F)
By circle_definition on C, A, D, c we get c == Circle(A, C, D)
By circle_definition on F, C, B, c we get c == Circle(B, C, F)
By line_intersection_definition on D, g, h we get D == line_intersection(g, h)
By line_unique_intersection_v1 on g, h, D, F we get F not in g
By line_unique_intersection_v1 on h, g, D, C we get C not in h
By between_implies_orientation on F, E, H, G we get orientation(E, H, F) == orientation(F, H, G) mod 360, orientation(E, G, F) == orientation(E, H, F) mod 360
By between_implies_orientation on F, G, H, E we get orientation(E, F, H) == orientation(F, G, H) mod 360, orientation(E, F, G) == orientation(F, G, H) mod 360
By between_imply_not_between on G, H, E we get collinear_and_not_between(E, G, H)
By between_imply_not_between on E, H, G we get collinear_and_not_between(G, E, H)
By circle_radius_v0_r on D, c we get radius(c) == distance(D, center(c))
By circle_radius_v0_r on C, c we get radius(c) == distance(C, center(c))
By circle_radius_v0_r on F, c we get radius(c) == distance(F, center(c))
By circle_radius_v0_r on B, c we get radius(c) == distance(B, center(c))
By parallel_line_definition on A, f, g we get f == parallel_line(A, g)
By parallel_line_definition on D, g, f we get g == parallel_line(D, f)
By circle_radius_v0_r on A, c we get radius(c) == distance(A, center(c))
By parallel_line_definition on B, f, g we get f == parallel_line(B, g)
By center_not_on_circle on c we get center(c) not in c
By different_points_v1 on B, A we get 0 != distance(A, B)
By in_imply_concyclic on A, C, B, D we get concyclic(A, B, C, D)
By in_imply_concyclic on C, A, B, F we get concyclic(A, B, C, F)
By angle_bisector_draw_angle_v1 on E, D, C we get exists(Line(C, D), Line(D, E))
By angle_bisector_draw_angle_v1 on C, D, E we get exists(Line(C, D), Line(D, E))
By not_in_line_equivalent_to_not_collinear_v0_r on E, B, A we get E not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on D, B, A we get D not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on F, B, A we get F not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on H, A, B we get H not in Line(A, B)
By angle_bisector_draw_angle_v1 on A, E, B we get exists(Line(A, E), Line(B, E))
By not_in_line_equivalent_to_not_collinear_v0_r on C, B, A we get C not in Line(A, B)
By angle_bisector_draw_angle_v1 on B, E, A we get exists(Line(A, E), Line(B, E))
By not_in_line_equivalent_to_not_collinear_v0_r on G, B, A we get G not in Line(A, B)
By angles_on_chord_v0 on D, B, F, A, c we get angle(D, A, B) == angle(D, F, B) mod 360
By power_of_a_point_on_circle on F, c we get 0 == power_of_a_point(F, c)
By angles_on_chord_v0 on F, D, B, C, c we get angle(F, B, D) == angle(F, C, D) mod 360
By power_of_a_point_on_circle on A, c we get 0 == power_of_a_point(A, c)
By angles_on_chord_v3 on A, C, D, B, c we get angle(A, D, C) == angle(A, B, C) + 180 mod 360
By power_of_a_point_on_circle on D, c we get 0 == power_of_a_point(D, c)
By power_of_a_point_on_circle on C, c we get 0 == power_of_a_point(C, c)
By angles_on_chord_v1 on C, D, F, B, c we get angle(C, B, D) == angle(C, F, D) mod 360
By angle_to_center on B, A, F, c we get 2 * angle(B, A, F) == angle(B, center(c), F) mod 360
By angles_on_chord_v1 on B, D, A, F, c we get angle(B, A, D) == angle(B, F, D) mod 360
By angles_on_chord_v3 on B, D, A, C, c we get angle(B, A, D) == angle(B, C, D) + 180 mod 360
By power_of_a_point_on_circle on B, c we get 0 == power_of_a_point(B, c)
By angles_on_chord_v1 on A, B, F, C, c we get angle(A, C, B) == angle(A, F, B) mod 360
By angles_on_chord_v3 on F, B, C, A, c we get angle(F, C, B) == angle(F, A, B) + 180 mod 360
By angles_on_chord_v3 on C, F, B, D, c we get angle(C, B, F) == angle(C, D, F) + 180 mod 360
By angles_on_chord_v0 on D, C, A, B, c we get angle(D, A, C) == angle(D, B, C) mod 360
By angles_on_chord_v1 on A, B, C, D, c we get angle(A, C, B) == angle(A, D, B) mod 360
By angles_on_chord_v1 on B, C, D, A, c we get angle(B, A, C) == angle(B, D, C) mod 360
By angles_on_chord_v3 on D, B, C, A, c we get angle(D, C, B) == angle(D, A, B) + 180 mod 360
By angles_on_chord_v0 on C, B, A, D, c we get angle(C, A, B) == angle(C, D, B) mod 360
By angles_on_chord_v0 on A, F, C, B, c we get angle(A, B, F) == angle(A, C, F) mod 360
By angles_on_chord_v0 on C, B, F, A, c we get angle(C, A, B) == angle(C, F, B) mod 360
By angles_on_chord_v2 on A, C, B, D, c we get angle(A, B, C) == angle(A, D, C) + 180 mod 360
By angles_on_chord_v2 on A, D, C, F, c we get angle(A, C, D) == angle(A, F, D) + 180 mod 360
By angles_on_chord_v2 on C, F, D, A, c we get angle(C, D, F) == angle(C, A, F) + 180 mod 360
By angles_on_chord_v3 on C, A, B, F, c we get angle(C, B, A) == angle(C, F, A) + 180 mod 360
By angles_on_chord_v1 on C, D, A, F, c we get angle(C, A, D) == angle(C, F, D) mod 360
By angles_on_chord_v1 on D, F, A, B, c we get angle(D, A, F) == angle(D, B, F) mod 360
By angles_on_chord_v1 on D, F, B, C, c we get angle(D, B, F) == angle(D, C, F) mod 360
By angles_on_chord_v3 on B, F, A, C, c we get angle(B, A, F) == angle(B, C, F) + 180 mod 360
By angles_on_chord_v0 on F, D, A, C, c we get angle(F, A, D) == angle(F, C, D) mod 360
By angles_on_chord_v1 on B, C, F, D, c we get angle(B, D, C) == angle(B, F, C) mod 360
By angles_on_chord_v0 on D, C, F, A, c we get angle(D, A, C) == angle(D, F, C) mod 360
By angles_on_chord_v0 on C, B, D, F, c we get angle(C, D, B) == angle(C, F, B) mod 360
By angles_on_chord_v3 on F, B, D, A, c we get angle(F, D, B) == angle(F, A, B) + 180 mod 360
By angles_on_chord_v1 on A, C, D, F, c we get angle(A, D, C) == angle(A, F, C) mod 360
By angles_on_chord_v0 on A, D, B, C, c we get angle(A, B, D) == angle(A, C, D) mod 360
By angles_on_chord_v0 on C, A, D, F, c we get angle(C, D, A) == angle(C, F, A) mod 360
By angles_on_chord_v3 on B, F, A, D, c we get angle(B, A, F) == angle(B, D, F) + 180 mod 360
By angles_on_chord_v2 on A, D, B, F, c we get angle(A, B, D) == angle(A, F, D) + 180 mod 360
By angles_on_chord_v2 on C, A, F, B, c we get angle(C, F, A) == angle(C, B, A) + 180 mod 360
By angles_on_chord_v0 on B, A, D, C, c we get angle(B, C, A) == angle(B, D, A) mod 360
By angles_on_chord_v2 on F, C, B, D, c we get angle(F, B, C) == angle(F, D, C) + 180 mod 360
By angles_on_chord_v3 on B, D, F, C, c we get angle(B, F, D) == angle(B, C, D) + 180 mod 360
By angles_on_chord_v2 on C, F, D, B, c we get angle(C, D, F) == angle(C, B, F) + 180 mod 360
By angles_on_chord_v0 on B, F, D, C, c we get angle(B, C, F) == angle(B, D, F) mod 360
By angle_to_center on A, F, D, c we get 2 * angle(A, F, D) == angle(A, center(c), D) mod 360
By angles_on_chord_v2 on D, A, F, C, c we get angle(D, F, A) == angle(D, C, A) + 180 mod 360
By angles_on_chord_v1 on A, B, F, D, c we get angle(A, D, B) == angle(A, F, B) mod 360
By angles_on_chord_v0 on B, A, F, C, c we get angle(B, C, A) == angle(B, F, A) mod 360
By angles_on_chord_v2 on A, C, B, F, c we get angle(A, B, C) == angle(A, F, C) + 180 mod 360
By angles_on_chord_v2 on B, D, C, F, c we get angle(B, C, D) == angle(B, F, D) + 180 mod 360
By angles_on_chord_v0 on F, D, B, A, c we get angle(F, A, D) == angle(F, B, D) mod 360
By angle_to_center on B, D, C, c we get 2 * angle(B, D, C) == angle(B, center(c), C) mod 360
By angle_to_center on A, F, B, c we get 2 * angle(A, F, B) == angle(A, center(c), B) mod 360
By angles_on_chord_v0 on B, A, F, D, c we get angle(B, D, A) == angle(B, F, A) mod 360
By angle_to_center on D, B, A, c we get 2 * angle(D, B, A) == angle(D, center(c), A) mod 360
By angles_on_chord_v1 on D, A, B, C, c we get angle(D, B, A) == angle(D, C, A) mod 360
By angle_to_center on A, F, C, c we get 2 * angle(A, F, C) == angle(A, center(c), C) mod 360
By angles_on_chord_v0 on A, F, D, B, c we get angle(A, B, F) == angle(A, D, F) mod 360
By angles_on_chord_v3 on A, D, F, B, c we get angle(A, F, D) == angle(A, B, D) + 180 mod 360
By angle_to_center on C, F, A, c we get 2 * angle(C, F, A) == angle(C, center(c), A) mod 360
By angles_on_chord_v3 on D, A, C, F, c we get angle(D, C, A) == angle(D, F, A) + 180 mod 360
By angles_on_chord_v1 on F, A, B, C, c we get angle(F, B, A) == angle(F, C, A) mod 360
By angles_on_chord_v2 on C, A, D, B, c we get angle(C, D, A) == angle(C, B, A) + 180 mod 360
By angles_on_chord_v1 on B, C, A, F, c we get angle(B, A, C) == angle(B, F, C) mod 360
By angles_on_chord_v2 on D, B, A, C, c we get angle(D, A, B) == angle(D, C, B) + 180 mod 360
By angles_on_chord_v0 on F, C, B, A, c we get angle(F, A, C) == angle(F, B, C) mod 360
By angles_on_chord_v1 on F, A, B, D, c we get angle(F, B, A) == angle(F, D, A) mod 360
By angles_on_chord_v0 on D, C, B, F, c we get angle(D, B, C) == angle(D, F, C) mod 360
By angles_on_chord_v2 on D, A, F, B, c we get angle(D, F, A) == angle(D, B, A) + 180 mod 360
By angles_on_chord_v3 on C, F, A, D, c we get angle(C, A, F) == angle(C, D, F) + 180 mod 360
By angles_on_chord_v1 on D, F, A, C, c we get angle(D, A, F) == angle(D, C, F) mod 360
By angle_to_center on F, C, B, c we get 2 * angle(F, C, B) == angle(F, center(c), B) mod 360
By angles_on_chord_v1 on C, D, B, A, c we get angle(C, A, D) == angle(C, B, D) mod 360
By angles_on_chord_v0 on A, F, D, C, c we get angle(A, C, F) == angle(A, D, F) mod 360
By angle_to_center on A, D, C, c we get 2 * angle(A, D, C) == angle(A, center(c), C) mod 360
By angles_on_chord_v2 on B, D, C, A, c we get angle(B, C, D) == angle(B, A, D) + 180 mod 360
By angle_to_center on F, A, D, c we get 2 * angle(F, A, D) == angle(F, center(c), D) mod 360
By angles_on_chord_v3 on D, A, B, F, c we get angle(D, B, A) == angle(D, F, A) + 180 mod 360
By angles_on_chord_v3 on D, B, C, F, c we get angle(D, C, B) == angle(D, F, B) + 180 mod 360
By angles_on_chord_v2 on D, B, F, C, c we get angle(D, F, B) == angle(D, C, B) + 180 mod 360
By angles_on_chord_v3 on A, C, F, B, c we get angle(A, F, C) == angle(A, B, C) + 180 mod 360
By angle_to_center on C, F, B, c we get 2 * angle(C, F, B) == angle(C, center(c), B) mod 360
By angle_to_center on A, D, B, c we get 2 * angle(A, D, B) == angle(A, center(c), B) mod 360
By angles_on_chord_v3 on F, C, D, B, c we get angle(F, D, C) == angle(F, B, C) + 180 mod 360
By angles_on_chord_v3 on C, A, B, D, c we get angle(C, B, A) == angle(C, D, A) + 180 mod 360
By angles_on_chord_v1 on F, B, D, C, c we get angle(F, C, B) == angle(F, D, B) mod 360
By angle_to_center on C, B, D, c we get 2 * angle(C, B, D) == angle(C, center(c), D) mod 360
By angle_to_center on D, F, B, c we get 2 * angle(D, F, B) == angle(D, center(c), B) mod 360
By angle_to_center on C, A, B, c we get 2 * angle(C, A, B) == angle(C, center(c), B) mod 360
By angles_on_chord_v2 on F, B, A, C, c we get angle(F, A, B) == angle(F, C, B) + 180 mod 360
By angles_on_chord_v2 on F, B, A, D, c we get angle(F, A, B) == angle(F, D, B) + 180 mod 360
By angles_on_chord_v3 on F, C, D, A, c we get angle(F, D, C) == angle(F, A, C) + 180 mod 360
By angles_on_chord_v2 on B, F, D, A, c we get angle(B, D, F) == angle(B, A, F) + 180 mod 360
By angles_on_chord_v1 on C, F, B, A, c we get angle(C, A, F) == angle(C, B, F) mod 360
By angles_on_chord_v1 on F, A, C, D, c we get angle(F, C, A) == angle(F, D, A) mod 360
By angle_to_center on B, C, F, c we get 2 * angle(B, C, F) == angle(B, center(c), F) mod 360
By angle_to_center on C, A, F, c we get 2 * angle(C, A, F) == angle(C, center(c), F) mod 360
By angles_on_chord_v2 on F, C, A, D, c we get angle(F, A, C) == angle(F, D, C) + 180 mod 360
By angles_on_chord_v3 on A, D, F, C, c we get angle(A, F, D) == angle(A, C, D) + 180 mod 360
By angle_to_center on F, A, B, c we get 2 * angle(F, A, B) == angle(F, center(c), B) mod 360
By angles_on_chord_v2 on B, F, C, A, c we get angle(B, C, F) == angle(B, A, F) + 180 mod 360
By angle_to_center on B, F, C, c we get 2 * angle(B, F, C) == angle(B, center(c), C) mod 360
By angle_to_center on B, C, D, c we get 2 * angle(B, C, D) == angle(B, center(c), D) mod 360
By angle_to_center on C, D, F, c we get 2 * angle(C, D, F) == angle(C, center(c), F) mod 360
By angle_to_center on F, B, A, c we get 2 * angle(F, B, A) == angle(F, center(c), A) mod 360
By angle_to_center on C, A, D, c we get 2 * angle(C, A, D) == angle(C, center(c), D) mod 360
By angle_to_center on F, C, A, c we get 2 * angle(F, C, A) == angle(F, center(c), A) mod 360
By angle_to_center on D, F, A, c we get 2 * angle(D, F, A) == angle(D, center(c), A) mod 360
By angle_to_center on B, A, C, c we get 2 * angle(B, A, C) == angle(B, center(c), C) mod 360
By angle_to_center on A, D, F, c we get 2 * angle(A, D, F) == angle(A, center(c), F) mod 360
By angle_to_center on A, C, B, c we get 2 * angle(A, C, B) == angle(A, center(c), B) mod 360
By angle_to_center on A, B, D, c we get 2 * angle(A, B, D) == angle(A, center(c), D) mod 360
By angle_to_center on F, C, D, c we get 2 * angle(F, C, D) == angle(F, center(c), D) mod 360
By angle_to_center on B, C, A, c we get 2 * angle(B, C, A) == angle(B, center(c), A) mod 360
By angle_to_center on C, B, A, c we get 2 * angle(C, B, A) == angle(C, center(c), A) mod 360
By angle_to_center on B, A, D, c we get 2 * angle(B, A, D) == angle(B, center(c), D) mod 360
By angle_to_center on D, A, C, c we get 2 * angle(D, A, C) == angle(D, center(c), C) mod 360
By angle_to_center on B, D, F, c we get 2 * angle(B, D, F) == angle(B, center(c), F) mod 360
By angle_to_center on F, D, B, c we get 2 * angle(F, D, B) == angle(F, center(c), B) mod 360
By angle_to_center on D, B, F, c we get 2 * angle(D, B, F) == angle(D, center(c), F) mod 360
By angle_to_center on D, C, A, c we get 2 * angle(D, C, A) == angle(D, center(c), A) mod 360
By angle_to_center on B, F, A, c we get 2 * angle(B, F, A) == angle(B, center(c), A) mod 360
By angle_to_center on C, B, F, c we get 2 * angle(C, B, F) == angle(C, center(c), F) mod 360
By angle_to_center on C, D, B, c we get 2 * angle(C, D, B) == angle(C, center(c), B) mod 360
By angle_to_center on D, A, B, c we get 2 * angle(D, A, B) == angle(D, center(c), B) mod 360
By angle_to_center on F, D, A, c we get 2 * angle(F, D, A) == angle(F, center(c), A) mod 360
By angle_to_center on D, C, B, c we get 2 * angle(D, C, B) == angle(D, center(c), B) mod 360
By angle_to_center on F, B, D, c we get 2 * angle(F, B, D) == angle(F, center(c), D) mod 360
By angle_to_center on C, F, D, c we get 2 * angle(C, F, D) == angle(C, center(c), D) mod 360
By angle_to_center on A, C, D, c we get 2 * angle(A, C, D) == angle(A, center(c), D) mod 360
By angle_to_center on B, D, A, c we get 2 * angle(B, D, A) == angle(B, center(c), A) mod 360
By angle_to_center on D, F, C, c we get 2 * angle(D, F, C) == angle(D, center(c), C) mod 360
By angle_to_center on A, B, C, c we get 2 * angle(A, B, C) == angle(A, center(c), C) mod 360
By angle_to_center on B, F, D, c we get 2 * angle(B, F, D) == angle(B, center(c), D) mod 360
By angle_to_center on F, D, C, c we get 2 * angle(F, D, C) == angle(F, center(c), C) mod 360
By angle_to_center on D, A, F, c we get 2 * angle(D, A, F) == angle(D, center(c), F) mod 360
By angle_to_center on D, C, F, c we get 2 * angle(D, C, F) == angle(D, center(c), F) mod 360
By angle_to_center on F, B, C, c we get 2 * angle(F, B, C) == angle(F, center(c), C) mod 360
By angle_to_center on A, C, F, c we get 2 * angle(A, C, F) == angle(A, center(c), F) mod 360
By angle_to_center on F, A, C, c we get 2 * angle(F, A, C) == angle(F, center(c), C) mod 360
By angle_to_center on A, B, F, c we get 2 * angle(A, B, F) == angle(A, center(c), F) mod 360
By angle_to_center on C, D, A, c we get 2 * angle(C, D, A) == angle(C, center(c), A) mod 360
By angle_to_center on D, B, C, c we get 2 * angle(D, B, C) == angle(D, center(c), C) mod 360
By collinear_definition on H, G, E we get G in Line(E, H), E in Line(G, H), Line(E, H) == Line(G, H), 0 == 2 * angle(G, H, E) mod 360
By log_of_2_times_distance on G, E, G, H we get log(distance(E, G)) == 0.6931471805599453 + log(distance(G, H))
By log_of_2_times_distance on G, E, H, E we get log(distance(E, G)) == 0.6931471805599453 + log(distance(E, H))
By collinear_definition on G, E, H we get E in Line(G, H), H in Line(E, G), Line(E, G) == Line(G, H), 0 == 2 * angle(E, G, H) mod 360
By collinear_definition on E, G, H we get G in Line(E, H), H in Line(E, G), Line(E, G) == Line(E, H), 0 == 2 * angle(G, E, H) mod 360
By collinear_definition on G, H, E we get H in Line(E, G), E in Line(G, H), Line(E, G) == Line(G, H), 0 == 2 * angle(H, G, E) mod 360
By collinear_definition on H, E, G we get E in Line(G, H), G in Line(E, H), Line(E, H) == Line(G, H), 0 == 2 * angle(E, H, G) mod 360
By collinear_definition on E, H, G we get H in Line(E, G), G in Line(E, H), Line(E, G) == Line(E, H), 0 == 2 * angle(H, E, G) mod 360
By isosceles_triangle_properties on H, G, E we get distance(E, H) == distance(G, H), angle(G, E, H) == angle(H, G, E) mod 360
By isosceles_triangle_properties on H, E, G we get distance(E, H) == distance(G, H), angle(E, G, H) == angle(H, E, G) mod 360
By between_implies_angles on E, H, G we get 180 == angle(E, H, G) mod 360, 0 == angle(H, G, E) mod 360, 0 == angle(G, E, H) mod 360
By between_implies_angles on G, H, E we get 180 == angle(G, H, E) mod 360, 0 == angle(H, E, G) mod 360, 0 == angle(E, G, H) mod 360
By concyclic_sufficient_conditions_v1 on F, D, C, A we get concyclic(A, C, D, F)
By concyclic_sufficient_conditions_v1 on D, C, B, F we get concyclic(B, C, D, F)
By concyclic_sufficient_conditions_v0 on B, F, D, A we get concyclic(A, B, D, F)
By angles_on_equal_chords_v0 on C, D, A, B, C, D, c we get angle(B, C, D) == angle(C, D, A) mod 360
By angles_on_equal_chords_v0 on A, C, D, C, D, B, c we get angle(A, C, D) == angle(C, D, B) mod 360
By angles_on_equal_chords_v0 on A, B, D, C, A, B, c we get angle(A, B, D) == angle(C, A, B) mod 360
By angles_on_equal_chords_v3 on A, F, D, C, D, B, c we get angle(A, F, D) == angle(C, D, B) + 180 mod 360
By angles_on_equal_chords_v1 on D, C, B, A, F, C, c we get angle(A, F, C) == angle(D, C, B) mod 360
By angles_on_equal_chords_v0 on C, D, B, A, B, D, c we get angle(A, B, D) == angle(C, D, B) mod 360
By angles_on_equal_chords_v3 on B, F, C, D, F, A, c we get angle(B, F, C) == angle(D, F, A) + 180 mod 360
By angles_on_equal_chords_v2 on C, D, A, B, F, D, c we get angle(C, D, A) == angle(B, F, D) + 180 mod 360
By angles_on_equal_chords_v1 on D, B, A, B, A, C, c we get angle(B, A, C) == angle(D, B, A) mod 360
By angles_on_equal_chords_v2 on D, F, A, B, F, C, c we get angle(D, F, A) == angle(B, F, C) + 180 mod 360
By angles_on_equal_chords_v0 on A, B, C, D, F, B, c we get angle(A, B, C) == angle(D, F, B) mod 360
By angles_on_equal_chords_v3 on A, F, D, C, F, B, c we get angle(A, F, D) == angle(C, F, B) + 180 mod 360
By angles_on_equal_chords_v2 on C, A, B, A, F, D, c we get angle(C, A, B) == angle(A, F, D) + 180 mod 360
By angles_on_equal_chords_v0 on C, F, B, A, C, D, c we get angle(A, C, D) == angle(C, F, B) mod 360
By angles_on_equal_chords_v2 on D, F, A, B, A, C, c we get angle(D, F, A) == angle(B, A, C) + 180 mod 360
By angles_on_equal_chords_v1 on B, F, C, D, B, A, c we get angle(B, F, C) == angle(D, B, A) mod 360
By angles_on_equal_chords_v0 on C, F, B, A, B, D, c we get angle(A, B, D) == angle(C, F, B) mod 360
By angles_on_equal_chords_v1 on D, C, B, A, D, C, c we get angle(A, D, C) == angle(D, C, B) mod 360
By angles_on_equal_chords_v3 on B, A, D, C, D, A, c we get angle(B, A, D) == angle(C, D, A) + 180 mod 360
By angles_on_equal_chords_v3 on B, F, D, C, F, A, c we get angle(B, F, D) == angle(C, F, A) + 180 mod 360
By angles_on_equal_chords_v1 on B, F, D, C, B, A, c we get angle(B, F, D) == angle(C, B, A) mod 360
By angles_on_equal_chords_v3 on A, D, C, D, F, B, c we get angle(A, D, C) == angle(D, F, B) + 180 mod 360
By angles_on_equal_chords_v3 on B, A, D, C, F, A, c we get angle(B, A, D) == angle(C, F, A) + 180 mod 360
By angles_on_equal_chords_v2 on D, F, B, A, D, C, c we get angle(D, F, B) == angle(A, D, C) + 180 mod 360
By angles_on_equal_chords_v1 on D, C, A, B, F, C, c we get angle(B, F, C) == angle(D, C, A) mod 360
By angles_on_equal_chords_v1 on B, D, C, D, B, A, c we get angle(B, D, C) == angle(D, B, A) mod 360
By angles_on_equal_chords_v2 on C, D, A, B, A, D, c we get angle(C, D, A) == angle(B, A, D) + 180 mod 360
By angles_on_equal_chords_v0 on A, B, C, D, A, B, c we get angle(A, B, C) == angle(D, A, B) mod 360
By angles_on_equal_chords_v3 on D, C, B, A, B, C, c we get angle(D, C, B) == angle(A, B, C) + 180 mod 360
By angles_on_equal_chords_v3 on A, F, C, D, A, B, c we get angle(A, F, C) == angle(D, A, B) + 180 mod 360
By angles_on_equal_chords_v1 on B, A, D, C, B, A, c we get angle(B, A, D) == angle(C, B, A) mod 360
By angles_on_equal_chords_v3 on B, D, C, D, F, A, c we get angle(B, D, C) == angle(D, F, A) + 180 mod 360
By angles_on_equal_chords_v0 on C, A, B, A, C, D, c we get angle(A, C, D) == angle(C, A, B) mod 360
By angles_on_equal_chords_v3 on A, D, C, D, A, B, c we get angle(A, D, C) == angle(D, A, B) + 180 mod 360
By angles_on_equal_chords_v2 on C, F, A, B, A, D, c we get angle(C, F, A) == angle(B, A, D) + 180 mod 360
By angles_on_equal_chords_v2 on B, C, D, C, B, A, c we get angle(B, C, D) == angle(C, B, A) + 180 mod 360
By angles_on_equal_chords_v0 on B, C, D, C, F, A, c we get angle(B, C, D) == angle(C, F, A) mod 360
By angles_on_equal_chords_v3 on A, F, D, C, A, B, c we get angle(A, F, D) == angle(C, A, B) + 180 mod 360
By angles_on_equal_chords_v3 on B, A, C, D, F, A, c we get angle(B, A, C) == angle(D, F, A) + 180 mod 360
By angles_on_equal_chords_v2 on D, A, B, A, D, C, c we get angle(D, A, B) == angle(A, D, C) + 180 mod 360
By angles_on_equal_chords_v1 on B, A, C, D, C, A, c we get angle(B, A, C) == angle(D, C, A) mod 360
By angles_on_equal_chords_v3 on B, F, D, C, D, A, c we get angle(B, F, D) == angle(C, D, A) + 180 mod 360
By angles_on_equal_chords_v2 on D, A, B, A, F, C, c we get angle(D, A, B) == angle(A, F, C) + 180 mod 360
By angles_on_equal_chords_v3 on C, B, A, B, C, D, c we get angle(C, B, A) == angle(B, C, D) + 180 mod 360
By angles_on_equal_chords_v2 on C, F, B, A, F, D, c we get angle(C, F, B) == angle(A, F, D) + 180 mod 360
By angles_on_equal_chords_v2 on C, D, B, A, F, D, c we get angle(C, D, B) == angle(A, F, D) + 180 mod 360
By angles_on_equal_chords_v2 on D, F, A, B, D, C, c we get angle(D, F, A) == angle(B, D, C) + 180 mod 360
By angles_on_equal_chords_v1 on D, C, A, B, D, C, c we get angle(B, D, C) == angle(D, C, A) mod 360
By angles_on_equal_chords_v2 on A, B, C, D, C, B, c we get angle(A, B, C) == angle(D, C, B) + 180 mod 360
By angles_on_equal_chords_v3 on A, F, C, D, F, B, c we get angle(A, F, C) == angle(D, F, B) + 180 mod 360
By angles_on_equal_chords_v2 on D, F, B, A, F, C, c we get angle(D, F, B) == angle(A, F, C) + 180 mod 360
By angles_on_equal_chords_v2 on C, F, A, B, F, D, c we get angle(C, F, A) == angle(B, F, D) + 180 mod 360
By same_angle_v1 on E, G, H, B we get angle(G, E, B) == angle(H, E, B) mod 360
By same_angle_v0 on E, H, G, C we get angle(G, E, C) == angle(H, E, C) mod 360
By same_angle_v0 on E, G, H, D we get angle(G, E, D) == angle(H, E, D) mod 360
By same_angle_v1 on E, G, H, A we get angle(G, E, A) == angle(H, E, A) mod 360
By different_points_v1 on D, B we get 0 != distance(B, D)
By different_points_v1 on F, B we get 0 != distance(B, F)
By different_points_v1 on B, C we get 0 != distance(B, C)
By different_points_v1 on B, E we get 0 != distance(B, E)
By different_points_v1 on E, A we get 0 != distance(A, E)
By different_points_v1 on A, D we get 0 != distance(A, D)
By different_points_v1 on A, F we get 0 != distance(A, F)
By different_points_v1 on F, D we get 0 != distance(D, F)
By different_points_v1 on D, C we get 0 != distance(C, D)
By different_points_v1 on C, A we get 0 != distance(A, C)
By different_points_v1 on E, C we get 0 != distance(C, E)
By different_points_v1 on F, C we get 0 != distance(C, F)
By different_points_v1 on E, F we get 0 != distance(E, F)
By different_points_v1 on D, E we get 0 != distance(D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on A, E, B we get A not in Line(B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on B, A, D we get B not in Line(A, D)
By reverse_direction on B, D we get 180 == direction(B, D) - direction(D, B) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on G, B, C we get G not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on F, C, A we get F not in Line(A, C)
By reverse_direction on D, F we get 180 == direction(D, F) - direction(F, D) mod 360
By reverse_direction on B, A we get 180 == direction(B, A) - direction(A, B) mod 360
By reverse_direction on D, B we get 180 == direction(D, B) - direction(B, D) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on H, B, D we get H not in Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on F, D, E we get F not in Line(D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on B, A, F we get B not in Line(A, F)
By not_in_line_equivalent_to_not_collinear_v0_r on A, H, E we get A not in Line(E, H)
By not_in_line_equivalent_to_not_collinear_v0_r on F, A, D we get F not in Line(A, D)
By external_angle_bisector_definition_v0 on B, G, A, E we get 180 == angle(B, E, G) + angle(A, E, G) mod 360
By line_inequality on Line(B, C), h, C we get h != Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on G, F, A we get G not in Line(A, F)
By isosceles_trapezoids_are_concyclic_v1 on C, D, A, B we get isosceles_trapezoid(A, B, C, D)
By external_angle_bisector_definition_v0 on A, H, B, E we get 180 == angle(A, E, H) + angle(B, E, H) mod 360
By line_inequality on Line(B, E), f, E we get f != Line(B, E)
By isosceles_trapezoids_are_concyclic_v1 on B, A, C, D we get isosceles_trapezoid(B, A, C, D)
By line_inequality on Line(D, E), f, E we get f != Line(D, E)
By reverse_direction on G, E we get 180 == direction(G, E) - direction(E, G) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on A, G, H we get A not in Line(G, H)
By isosceles_trapezoids_are_concyclic_v1 on C, D, B, A we get isosceles_trapezoid(B, A, C, D)
By reverse_direction on B, C we get 180 == direction(B, C) - direction(C, B) mod 360
By reverse_direction on C, F we get 180 == direction(C, F) - direction(F, C) mod 360
By reverse_direction on A, F we get 180 == direction(A, F) - direction(F, A) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on A, E, C we get A not in Line(C, E)
By isosceles_trapezoids_are_concyclic_v1 on B, A, D, C we get isosceles_trapezoid(B, A, D, C)
By reverse_direction on D, A we get 180 == direction(D, A) - direction(A, D) mod 360
By reverse_direction on C, B we get 180 == direction(C, B) - direction(B, C) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on G, C, A we get G not in Line(A, C)
By reverse_direction on E, G we get 180 == direction(E, G) - direction(G, E) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on C, G, E we get C not in Line(E, G)
By reverse_direction on B, F we get 180 == direction(B, F) - direction(F, B) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on C, D, E we get C not in Line(D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on D, B, C we get D not in Line(B, C)
By reverse_direction on E, H we get 180 == direction(E, H) - direction(H, E) mod 360
By reverse_direction on F, B we get 180 == direction(F, B) - direction(B, F) mod 360
By reverse_direction on A, D we get 180 == direction(A, D) - direction(D, A) mod 360
By isosceles_trapezoids_are_concyclic_v1 on D, C, B, A we get isosceles_trapezoid(B, A, D, C)
By reverse_direction on A, C we get 180 == direction(A, C) - direction(C, A) mod 360
By reverse_direction on D, C we get 180 == direction(D, C) - direction(C, D) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on D, A, C we get D not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on E, F, D we get E not in Line(D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on D, E, F we get D not in Line(E, F)
By reverse_direction on G, H we get 180 == direction(G, H) - direction(H, G) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on G, E, A we get G not in Line(A, E)
By not_in_line_equivalent_to_not_collinear_v0_r on H, F, C we get H not in Line(C, F)
By line_inequality on Line(A, D), f, D we get f != Line(A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on A, F, D we get A not in Line(D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on F, C, B we get F not in Line(B, C)
By reverse_direction on C, D we get 180 == direction(C, D) - direction(D, C) mod 360
By reverse_direction on F, C we get 180 == direction(F, C) - direction(C, F) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on D, E, C we get D not in Line(C, E)
By not_in_line_equivalent_to_not_collinear_v0_r on A, E, F we get A not in Line(E, F)
By reverse_direction on F, D we get 180 == direction(F, D) - direction(D, F) mod 360
By isosceles_trapezoids_are_concyclic_v1 on A, B, C, D we get isosceles_trapezoid(A, B, C, D)
By not_in_line_equivalent_to_not_collinear_v0_r on C, B, F we get C not in Line(B, F)
By isosceles_trapezoids_are_concyclic_v1 on D, C, A, B we get isosceles_trapezoid(A, B, D, C)
By reverse_direction on A, B we get 180 == direction(A, B) - direction(B, A) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on C, E, A we get C not in Line(A, E)
By reverse_direction on H, G we get 180 == direction(H, G) - direction(G, H) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on D, F, C we get D not in Line(C, F)
By reverse_direction on H, E we get 180 == direction(H, E) - direction(E, H) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on D, B, F we get D not in Line(B, F)
By not_in_line_equivalent_to_not_collinear_v0_r on H, D, E we get H not in Line(D, E)
By reverse_direction on F, A we get 180 == direction(F, A) - direction(A, F) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on D, A, E we get D not in Line(A, E)
By not_in_line_equivalent_to_not_collinear_v0_r on D, E, G we get D not in Line(E, G)
By line_inequality on Line(B, D), f, D we get f != Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on E, C, D we get E not in Line(C, D)
By reverse_direction on C, A we get 180 == direction(C, A) - direction(A, C) mod 360
By isosceles_trapezoids_are_concyclic_v1 on A, B, D, C we get isosceles_trapezoid(A, B, D, C)
By not_in_line_equivalent_to_not_collinear_v0_r on A, C, D we get A not in Line(C, D)
By not_in_line_equivalent_to_not_collinear_v0_r on B, E, F we get B not in Line(E, F)
By not_in_line_equivalent_to_not_collinear_v0_r on F, A, E we get F not in Line(A, E)
By not_in_line_equivalent_to_not_collinear_v0_r on E, A, C we get E not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on B, A, E we get B not in Line(A, E)
By not_in_line_equivalent_to_not_collinear_v0_r on H, D, A we get H not in Line(A, D)
By line_inequality on Line(B, F), f, F we get f != Line(B, F)
By not_in_line_equivalent_to_not_collinear_v0_r on H, F, A we get H not in Line(A, F)
By not_in_line_equivalent_to_not_collinear_v0_r on G, D, A we get G not in Line(A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on B, G, E we get B not in Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on F, D, B we get F not in Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on H, E, C we get H not in Line(C, E)
By line_inequality on Line(C, E), h, C we get h != Line(C, E)
By not_in_line_equivalent_to_not_collinear_v0_r on A, D, E we get A not in Line(D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on H, E, B we get H not in Line(B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on B, C, D we get B not in Line(C, D)
By not_in_line_equivalent_to_not_collinear_v0_r on C, A, F we get C not in Line(A, F)
By line_inequality on Line(A, F), f, F we get f != Line(A, F)
By not_in_line_equivalent_to_not_collinear_v0_r on A, B, C we get A not in Line(B, C)
By line_inequality on Line(E, F), f, E we get f != Line(E, F)
By not_in_line_equivalent_to_not_collinear_v0_r on C, H, G we get C not in Line(G, H)
By not_in_line_equivalent_to_not_collinear_v0_r on E, A, F we get E not in Line(A, F)
By not_in_line_equivalent_to_not_collinear_v0_r on C, E, H we get C not in Line(E, H)
By not_in_line_equivalent_to_not_collinear_v0_r on A, F, C we get A not in Line(C, F)
By not_in_line_equivalent_to_not_collinear_v0_r on E, F, B we get E not in Line(B, F)
By not_in_line_equivalent_to_not_collinear_v0_r on H, B, F we get H not in Line(B, F)
By not_in_line_equivalent_to_not_collinear_v0_r on G, F, B we get G not in Line(B, F)
By not_in_line_equivalent_to_not_collinear_v0_r on G, D, C we get G not in Line(C, D)
By not_in_line_equivalent_to_not_collinear_v0_r on C, A, D we get C not in Line(A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on E, F, C we get E not in Line(C, F)
By not_in_line_equivalent_to_not_collinear_v0_r on A, F, B we get A not in Line(B, F)
By not_in_line_equivalent_to_not_collinear_v0_r on C, B, D we get C not in Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on E, A, D we get E not in Line(A, D)
By line_inequality on Line(C, F), f, C we get f != Line(C, F)
By not_in_line_equivalent_to_not_collinear_v0_r on A, B, D we get A not in Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on G, E, C we get G not in Line(C, E)
By not_in_line_equivalent_to_not_collinear_v0_r on G, E, B we get G not in Line(B, E)
By line_inequality on Line(C, E), f, E we get f != Line(C, E)
By not_in_line_equivalent_to_not_collinear_v0_r on D, E, B we get D not in Line(B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on D, G, H we get D not in Line(G, H)
By not_in_line_equivalent_to_not_collinear_v0_r on B, E, C we get B not in Line(C, E)
By not_in_line_equivalent_to_not_collinear_v0_r on B, H, G we get B not in Line(G, H)
By not_in_line_equivalent_to_not_collinear_v0_r on H, C, D we get H not in Line(C, D)
By not_in_line_equivalent_to_not_collinear_v0_r on B, C, A we get B not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on H, A, E we get H not in Line(A, E)
By not_in_line_equivalent_to_not_collinear_v0_r on D, A, F we get D not in Line(A, F)
By not_in_line_equivalent_to_not_collinear_v0_r on H, A, C we get H not in Line(A, C)
By line_inequality on Line(A, E), f, E we get f != Line(A, E)
By line_inequality on Line(A, C), f, C we get f != Line(A, C)
By line_inequality on Line(B, F), g, F we get g != Line(B, F)
By line_inequality on Line(C, F), g, F we get g != Line(C, F)
By not_in_line_equivalent_to_not_collinear_v0_r on H, C, B we get H not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on G, E, D we get G not in Line(D, E)
By line_inequality on Line(C, F), h, C we get h != Line(C, F)
By not_in_line_equivalent_to_not_collinear_v0_r on B, C, F we get B not in Line(C, F)
By not_in_line_equivalent_to_not_collinear_v0_r on B, F, D we get B not in Line(D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on G, F, D we get G not in Line(D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on A, E, G we get A not in Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on C, E, F we get C not in Line(E, F)
By not_in_line_equivalent_to_not_collinear_v0_r on B, D, E we get B not in Line(D, E)
By line_inequality on Line(B, C), f, C we get f != Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on G, B, D we get G not in Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on B, H, E we get B not in Line(E, H)
By not_in_line_equivalent_to_not_collinear_v0_r on F, C, E we get F not in Line(C, E)
By not_in_line_equivalent_to_not_collinear_v0_r on G, F, C we get G not in Line(C, F)
By not_in_line_equivalent_to_not_collinear_v0_r on H, F, D we get H not in Line(D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on E, B, D we get E not in Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on D, E, H we get D not in Line(E, H)
By not_in_line_equivalent_to_not_collinear_v0_r on C, B, E we get C not in Line(B, E)
By line_inequality on Line(E, F), g, F we get g != Line(E, F)
By line_inequality on Line(A, C), h, C we get h != Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on E, B, C we get E not in Line(B, C)
By line_inequality on Line(A, F), g, F we get g != Line(A, F)
By not_in_line_equivalent_to_not_collinear_v0_r on F, E, B we get F not in Line(B, E)
By internal_angle_bisector_definition_v0_r on H, G, H, E we get Line(E, G) == internal_angle_bisector(H, E, H)
By reverse_direction on E, C we get 180 == direction(E, C) - direction(C, E) mod 360
By external_angle_bisector_definition_v0 on E, F, C, D we get 180 == angle(E, D, F) + angle(C, D, F) mod 360
By internal_angle_bisector_definition_v0_r on H, E, H, G we get Line(E, G) == internal_angle_bisector(H, G, H)
By reverse_direction on E, A we get 180 == direction(E, A) - direction(A, E) mod 360
By reverse_direction on E, B we get 180 == direction(E, B) - direction(B, E) mod 360
By internal_angle_bisector_definition_v0_r on G, E, G, H we get Line(E, H) == internal_angle_bisector(G, H, G)
By internal_angle_bisector_definition_v0_r on E, G, E, H we get Line(G, H) == internal_angle_bisector(E, H, E)
By internal_angle_bisector_definition_v0_r on G, H, G, E we get Line(E, H) == internal_angle_bisector(G, E, G)
By reverse_direction on E, D we get 180 == direction(E, D) - direction(D, E) mod 360
By internal_angle_bisector_definition_v0_r on E, H, E, G we get Line(G, H) == internal_angle_bisector(E, G, E)
By reverse_direction on E, F we get 180 == direction(E, F) - direction(F, E) mod 360
By sss_anti_congruence_v1 on A, E, B, B, E, A we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v1 on E, B, A, E, A, B we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v0 on B, E, A, A, E, B we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v0 on B, E, A, A, E, B we get anti_congruent_triangles(A, B, E, B, A, E)
By isosceles_triangle_properties on E, B, D we get distance(B, E) == distance(D, E), angle(B, D, E) == angle(E, B, D) mod 360
By sas_anti_congruence on A, E, D, D, E, A we get anti_congruent_triangles(A, D, E, D, A, E)
By sss_anti_congruence_v1 on B, A, E, A, B, E we get anti_congruent_triangles(A, B, E, B, A, E)
By sas_anti_congruence on D, E, A, A, E, D we get anti_congruent_triangles(A, D, E, D, A, E)
By sas_anti_congruence on B, E, C, C, E, B we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v0 on E, A, B, E, B, A we get anti_congruent_triangles(A, B, E, B, A, E)
By sas_anti_congruence on B, E, F, F, E, B we get anti_congruent_triangles(B, E, F, F, E, B)
By sas_anti_congruence on F, E, D, D, E, F we get anti_congruent_triangles(D, E, F, F, E, D)
By sss_anti_congruence_v0 on B, E, A, A, E, B we get anti_congruent_triangles(A, B, E, B, A, E)
By isosceles_triangle_properties on E, B, A we get distance(A, E) == distance(B, E), angle(B, A, E) == angle(E, B, A) mod 360
By sss_anti_congruence_v1 on B, A, E, A, B, E we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v0 on B, E, A, A, E, B we get anti_congruent_triangles(A, B, E, B, A, E)
By sas_anti_congruence on F, E, C, C, E, F we get anti_congruent_triangles(C, E, F, F, E, C)
By sss_anti_congruence_v0 on E, A, B, E, B, A we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v0 on A, B, E, B, A, E we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v1 on B, A, E, A, B, E we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v0 on E, A, B, E, B, A we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v0 on A, B, E, B, A, E we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v0 on B, E, A, A, E, B we get anti_congruent_triangles(A, B, E, B, A, E)
By isosceles_triangle_properties on E, F, A we get distance(A, E) == distance(E, F), angle(E, F, A) == angle(F, A, E) mod 360
By isosceles_triangle_properties on E, F, B we get distance(B, E) == distance(E, F), angle(E, F, B) == angle(F, B, E) mod 360
By isosceles_triangle_properties on E, C, B we get distance(B, E) == distance(C, E), angle(C, B, E) == angle(E, C, B) mod 360
By sss_anti_congruence_v0 on E, A, B, E, B, A we get anti_congruent_triangles(A, B, E, B, A, E)
By isosceles_triangle_properties on E, C, F we get distance(C, E) == distance(E, F), angle(C, F, E) == angle(E, C, F) mod 360
By sss_anti_congruence_v0 on E, A, B, E, B, A we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v1 on E, B, A, E, A, B we get anti_congruent_triangles(A, B, E, B, A, E)
By isosceles_triangle_properties on E, A, B we get distance(A, E) == distance(B, E), angle(A, B, E) == angle(E, A, B) mod 360
By sss_anti_congruence_v1 on A, E, B, B, E, A we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v1 on A, E, B, B, E, A we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v1 on B, A, E, A, B, E we get anti_congruent_triangles(A, B, E, B, A, E)
By sas_anti_congruence on C, E, B, B, E, C we get anti_congruent_triangles(B, C, E, C, B, E)
By isosceles_triangle_properties on E, A, C we get distance(A, E) == distance(C, E), angle(A, C, E) == angle(E, A, C) mod 360
By isosceles_triangle_properties on E, F, D we get distance(D, E) == distance(E, F), angle(E, F, D) == angle(F, D, E) mod 360
By sas_anti_congruence on F, E, A, A, E, F we get anti_congruent_triangles(A, E, F, F, E, A)
By sss_anti_congruence_v0 on B, E, A, A, E, B we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v0 on A, B, E, B, A, E we get anti_congruent_triangles(A, B, E, B, A, E)
By sas_anti_congruence on A, E, F, F, E, A we get anti_congruent_triangles(A, E, F, F, E, A)
By isosceles_triangle_properties on E, B, F we get distance(B, E) == distance(E, F), angle(B, F, E) == angle(E, B, F) mod 360
By sss_anti_congruence_v0 on A, B, E, B, A, E we get anti_congruent_triangles(A, B, E, B, A, E)
By isosceles_triangle_properties on E, D, B we get distance(B, E) == distance(D, E), angle(D, B, E) == angle(E, D, B) mod 360
By sss_anti_congruence_v1 on B, A, E, A, B, E we get anti_congruent_triangles(A, B, E, B, A, E)
By sas_anti_congruence on A, E, C, C, E, A we get anti_congruent_triangles(A, C, E, C, A, E)
By sas_anti_congruence on D, E, B, B, E, D we get anti_congruent_triangles(B, D, E, D, B, E)
By sas_anti_congruence on C, E, A, A, E, C we get anti_congruent_triangles(A, C, E, C, A, E)
By isosceles_triangle_properties on E, D, C we get distance(C, E) == distance(D, E), angle(D, C, E) == angle(E, D, C) mod 360
By isosceles_triangle_properties on E, C, D we get distance(C, E) == distance(D, E), angle(C, D, E) == angle(E, C, D) mod 360
By isosceles_triangle_properties on E, A, D we get distance(A, E) == distance(D, E), angle(A, D, E) == angle(E, A, D) mod 360
By sss_anti_congruence_v0 on E, A, B, E, B, A we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v1 on A, E, B, B, E, A we get anti_congruent_triangles(A, B, E, B, A, E)
By isosceles_triangle_properties on E, F, C we get distance(C, E) == distance(E, F), angle(E, F, C) == angle(F, C, E) mod 360
By sss_anti_congruence_v0 on A, B, E, B, A, E we get anti_congruent_triangles(A, B, E, B, A, E)
By isosceles_triangle_properties on E, D, A we get distance(A, E) == distance(D, E), angle(D, A, E) == angle(E, D, A) mod 360
By sss_anti_congruence_v1 on A, E, B, B, E, A we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v1 on B, A, E, A, B, E we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v1 on E, B, A, E, A, B we get anti_congruent_triangles(A, B, E, B, A, E)
By sas_anti_congruence on F, E, B, B, E, F we get anti_congruent_triangles(B, E, F, F, E, B)
By sss_anti_congruence_v1 on A, E, B, B, E, A we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v1 on E, B, A, E, A, B we get anti_congruent_triangles(A, B, E, B, A, E)
By sas_anti_congruence on D, E, C, C, E, D we get anti_congruent_triangles(C, D, E, D, C, E)
By sss_anti_congruence_v1 on E, B, A, E, A, B we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v0 on A, B, E, B, A, E we get anti_congruent_triangles(A, B, E, B, A, E)
By isosceles_triangle_properties on E, B, C we get distance(B, E) == distance(C, E), angle(B, C, E) == angle(E, B, C) mod 360
By sas_anti_congruence on B, E, D, D, E, B we get anti_congruent_triangles(B, D, E, D, B, E)
By sas_anti_congruence on A, E, B, B, E, A we get anti_congruent_triangles(A, B, E, B, A, E)
By sas_anti_congruence on D, E, F, F, E, D we get anti_congruent_triangles(D, E, F, F, E, D)
By isosceles_triangle_properties on E, C, A we get distance(A, E) == distance(C, E), angle(C, A, E) == angle(E, C, A) mod 360
By sas_anti_congruence on C, E, D, D, E, C we get anti_congruent_triangles(C, D, E, D, C, E)
By sas_anti_congruence on C, E, F, F, E, C we get anti_congruent_triangles(C, E, F, F, E, C)
By sss_anti_congruence_v1 on E, B, A, E, A, B we get anti_congruent_triangles(A, B, E, B, A, E)
By isosceles_triangle_properties on E, D, F we get distance(D, E) == distance(E, F), angle(D, F, E) == angle(E, D, F) mod 360
By sas_anti_congruence on B, E, A, A, E, B we get anti_congruent_triangles(A, B, E, B, A, E)
By isosceles_triangle_properties on E, A, F we get distance(A, E) == distance(E, F), angle(A, F, E) == angle(E, A, F) mod 360
By line_intersection_definition on C, g, Line(C, F) we get C == line_intersection(g, Line(C, F))
By line_intersection_definition on A, Line(A, D), f we get A == line_intersection(f, Line(A, D))
By line_intersection_definition on A, f, Line(A, C) we get A == line_intersection(f, Line(A, C))
By line_intersection_definition on A, f, Line(A, E) we get A == line_intersection(f, Line(A, E))
By line_intersection_definition on B, Line(B, C), f we get B == line_intersection(f, Line(B, C))
By line_intersection_definition on B, f, Line(B, E) we get B == line_intersection(f, Line(B, E))
By line_intersection_definition on A, f, Line(A, F) we get A == line_intersection(f, Line(A, F))
By line_intersection_definition on F, h, Line(C, F) we get F == line_intersection(h, Line(C, F))
By line_intersection_definition on B, f, Line(B, D) we get B == line_intersection(f, Line(B, D))
By line_intersection_definition on B, f, Line(B, F) we get B == line_intersection(f, Line(B, F))
By divide_by_2_mod_180_v2 on A, E, F, G, E, B we get angle(A, E, F) == angle(G, E, B) + 180 mod 360
By divide_by_2_mod_180_v0 on A, E, G, E, A, B we get angle(A, E, G) == angle(E, A, B) mod 360
By divide_by_2_mod_180_v2 on C, D, E, C, E, G we get angle(C, D, E) == angle(C, E, G) + 180 mod 360
By divide_by_2_mod_180_v2 on G, E, C, D, E, F we get angle(G, E, C) == angle(D, E, F) + 180 mod 360
By divide_by_2_mod_180_v0 on A, B, E, A, E, G we get angle(A, B, E) == angle(A, E, G) mod 360
By divide_by_2_mod_180_v0 on G, E, D, F, E, D we get angle(F, E, D) == angle(G, E, D) mod 360
By divide_by_2_mod_180_v3 on C, E, F, H, E, D we get angle(C, E, F) == angle(H, E, D) + 180 mod 360
By divide_by_2_mod_180_v3 on D, E, G, F, E, C we get angle(D, E, G) == angle(F, E, C) + 180 mod 360
By divide_by_2_mod_180_v2 on E, C, D, C, E, H we get angle(E, C, D) == angle(C, E, H) + 180 mod 360
By divide_by_2_mod_180_v3 on H, E, B, A, B, E we get angle(H, E, B) == angle(A, B, E) + 180 mod 360
By divide_by_2_mod_180_v2 on B, E, F, G, E, A we get angle(B, E, F) == angle(G, E, A) + 180 mod 360
By divide_by_2_mod_180_v1 on H, E, A, F, E, A we get angle(F, E, A) == angle(H, E, A) mod 360
By divide_by_2_mod_180_v0 on H, E, D, F, E, D we get angle(F, E, D) == angle(H, E, D) mod 360
By divide_by_2_mod_180_v0 on C, D, E, G, E, D we get angle(C, D, E) == angle(G, E, D) mod 360
By divide_by_2_mod_180_v3 on F, E, A, B, E, H we get angle(F, E, A) == angle(B, E, H) + 180 mod 360
By divide_by_2_mod_180_v2 on E, A, B, G, E, B we get angle(E, A, B) == angle(G, E, B) + 180 mod 360
By divide_by_2_mod_180_v0 on F, E, C, G, E, C we get angle(F, E, C) == angle(G, E, C) mod 360
By divide_by_2_mod_180_v3 on F, E, B, A, E, G we get angle(F, E, B) == angle(A, E, G) + 180 mod 360
By divide_by_2_mod_180_v3 on C, E, H, F, E, D we get angle(C, E, H) == angle(F, E, D) + 180 mod 360
By divide_by_2_mod_180_v2 on F, E, C, D, E, H we get angle(F, E, C) == angle(D, E, H) + 180 mod 360
By divide_by_2_mod_180_v1 on H, E, A, B, A, E we get angle(B, A, E) == angle(H, E, A) mod 360
By divide_by_2_mod_180_v1 on G, E, A, B, A, E we get angle(B, A, E) == angle(G, E, A) mod 360
By divide_by_2_mod_180_v2 on A, E, H, F, E, B we get angle(A, E, H) == angle(F, E, B) + 180 mod 360
By divide_by_2_mod_180_v1 on D, C, E, D, E, H we get angle(D, C, E) == angle(D, E, H) mod 360
By divide_by_2_mod_180_v2 on H, E, D, C, E, F we get angle(H, E, D) == angle(C, E, F) + 180 mod 360
By divide_by_2_mod_180_v2 on A, B, E, H, E, B we get angle(A, B, E) == angle(H, E, B) + 180 mod 360
By divide_by_2_mod_180_v3 on C, E, H, C, D, E we get angle(C, E, H) == angle(C, D, E) + 180 mod 360
By line_inequality on Line(B, E), g, E we get g != Line(B, E)
By divide_by_2_mod_180_v3 on D, E, F, G, E, C we get angle(D, E, F) == angle(G, E, C) + 180 mod 360
By divide_by_2_mod_180_v1 on D, E, G, E, D, C we get angle(D, E, G) == angle(E, D, C) mod 360
By divide_by_2_mod_180_v2 on B, E, H, F, E, A we get angle(B, E, H) == angle(F, E, A) + 180 mod 360
By divide_by_2_mod_180_v0 on E, A, B, A, E, H we get angle(A, E, H) == angle(E, A, B) mod 360
By divide_by_2_mod_180_v3 on D, C, E, H, E, C we get angle(D, C, E) == angle(H, E, C) + 180 mod 360
By divide_by_2_mod_180_v0 on C, D, E, H, E, D we get angle(C, D, E) == angle(H, E, D) mod 360
By divide_by_2_mod_180_v1 on F, E, B, H, E, B we get angle(F, E, B) == angle(H, E, B) mod 360
By divide_by_2_mod_180_v2 on B, E, H, B, A, E we get angle(B, E, H) == angle(B, A, E) + 180 mod 360
By line_inequality on Line(C, F), Line(B, F), C we get Line(B, F) != Line(C, F)
By divide_by_2_mod_180_v1 on D, E, G, D, C, E we get angle(D, C, E) == angle(D, E, G) mod 360
By divide_by_2_mod_180_v3 on B, A, E, B, E, H we get angle(B, A, E) == angle(B, E, H) + 180 mod 360
By divide_by_2_mod_180_v1 on C, E, F, C, E, G we get angle(C, E, F) == angle(C, E, G) mod 360
By divide_by_2_mod_180_v3 on C, E, F, G, E, D we get angle(C, E, F) == angle(G, E, D) + 180 mod 360
By divide_by_2_mod_180_v3 on B, A, E, B, E, G we get angle(B, A, E) == angle(B, E, G) + 180 mod 360
By line_inequality on Line(B, F), Line(D, E), B we get Line(B, F) != Line(D, E)
By divide_by_2_mod_180_v0 on A, E, F, A, E, G we get angle(A, E, F) == angle(A, E, G) mod 360
By divide_by_2_mod_180_v0 on A, B, E, A, E, H we get angle(A, B, E) == angle(A, E, H) mod 360
By divide_by_2_mod_180_v2 on E, A, B, H, E, B we get angle(E, A, B) == angle(H, E, B) + 180 mod 360
By divide_by_2_mod_180_v0 on A, E, H, A, E, F we get angle(A, E, F) == angle(A, E, H) mod 360
By divide_by_2_mod_180_v0 on B, E, F, B, E, G we get angle(B, E, F) == angle(B, E, G) mod 360
By divide_by_2_mod_180_v1 on H, E, A, E, B, A we get angle(E, B, A) == angle(H, E, A) mod 360
By divide_by_2_mod_180_v2 on H, E, C, D, E, F we get angle(H, E, C) == angle(D, E, F) + 180 mod 360
By line_inequality on Line(A, C), Line(D, E), A we get Line(A, C) != Line(D, E)
By divide_by_2_mod_180_v1 on D, E, H, E, D, C we get angle(D, E, H) == angle(E, D, C) mod 360
By divide_by_2_mod_180_v0 on H, E, C, F, E, C we get angle(F, E, C) == angle(H, E, C) mod 360
By divide_by_2_mod_180_v2 on F, E, D, C, E, H we get angle(F, E, D) == angle(C, E, H) + 180 mod 360
By divide_by_2_mod_180_v1 on F, E, A, G, E, A we get angle(F, E, A) == angle(G, E, A) mod 360
By line_inequality on i, Line(A, F), G we get i != Line(A, F)
By divide_by_2_mod_180_v2 on B, E, H, E, B, A we get angle(B, E, H) == angle(E, B, A) + 180 mod 360
By divide_by_2_mod_180_v3 on H, E, A, B, E, F we get angle(H, E, A) == angle(B, E, F) + 180 mod 360
By divide_by_2_mod_180_v2 on H, E, C, D, C, E we get angle(H, E, C) == angle(D, C, E) + 180 mod 360
By divide_by_2_mod_180_v3 on G, E, A, B, E, F we get angle(G, E, A) == angle(B, E, F) + 180 mod 360
By divide_by_2_mod_180_v2 on E, C, D, C, E, G we get angle(E, C, D) == angle(C, E, G) + 180 mod 360
By parallel_line_angles_v1 on F, E, C, D we get parallel(Line(C, D), Line(E, F))
By divide_by_2_mod_180_v0 on B, E, F, B, E, H we get angle(B, E, F) == angle(B, E, H) mod 360
By divide_by_2_mod_180_v3 on G, E, B, E, A, B we get angle(G, E, B) == angle(E, A, B) + 180 mod 360
By divide_by_2_mod_180_v2 on B, E, G, B, A, E we get angle(B, E, G) == angle(B, A, E) + 180 mod 360
By divide_by_2_mod_180_v3 on E, B, A, B, E, H we get angle(E, B, A) == angle(B, E, H) + 180 mod 360
By divide_by_2_mod_180_v3 on E, D, C, G, E, C we get angle(E, D, C) == angle(G, E, C) + 180 mod 360
By divide_by_2_mod_180_v2 on A, B, E, G, E, B we get angle(A, B, E) == angle(G, E, B) + 180 mod 360
By line_inequality on Line(A, E), Line(B, D), A we get Line(A, E) != Line(B, D)
By parallel_line_angles_v1 on F, E, B, A we get parallel(Line(A, B), Line(E, F))
By divide_by_2_mod_180_v3 on D, E, H, F, E, C we get angle(D, E, H) == angle(F, E, C) + 180 mod 360
By divide_by_2_mod_180_v2 on B, E, G, F, E, A we get angle(B, E, G) == angle(F, E, A) + 180 mod 360
By divide_by_2_mod_180_v1 on C, E, F, C, E, H we get angle(C, E, F) == angle(C, E, H) mod 360
By line_inequality on Line(B, C), Line(A, E), B we get Line(A, E) != Line(B, C)
By divide_by_2_mod_180_v3 on G, E, B, A, B, E we get angle(G, E, B) == angle(A, B, E) + 180 mod 360
By divide_by_2_mod_180_v1 on D, E, H, D, E, F we get angle(D, E, F) == angle(D, E, H) mod 360
By divide_by_2_mod_180_v3 on H, E, B, A, E, F we get angle(H, E, B) == angle(A, E, F) + 180 mod 360
By line_inequality on Line(B, E), Line(C, E), B we get Line(B, E) != Line(C, E)
By divide_by_2_mod_180_v2 on A, E, F, H, E, B we get angle(A, E, F) == angle(H, E, B) + 180 mod 360
By divide_by_2_mod_180_v0 on E, C, D, H, E, D we get angle(E, C, D) == angle(H, E, D) mod 360
By divide_by_2_mod_180_v3 on H, E, B, E, A, B we get angle(H, E, B) == angle(E, A, B) + 180 mod 360
By line_inequality on Line(C, F), Line(A, E), C we get Line(A, E) != Line(C, F)
By divide_by_2_mod_180_v2 on G, E, D, C, E, F we get angle(G, E, D) == angle(C, E, F) + 180 mod 360
By divide_by_2_mod_180_v2 on G, E, C, D, C, E we get angle(G, E, C) == angle(D, C, E) + 180 mod 360
By divide_by_2_mod_180_v2 on F, E, C, D, E, G we get angle(F, E, C) == angle(D, E, G) + 180 mod 360
By divide_by_2_mod_180_v1 on F, E, B, G, E, B we get angle(F, E, B) == angle(G, E, B) mod 360
By divide_by_2_mod_180_v2 on A, E, G, F, E, B we get angle(A, E, G) == angle(F, E, B) + 180 mod 360
By isosceles_trapezoid_properties on D, C, B, A we get parallel(Line(A, B), Line(C, D)), distance(A, D) == distance(B, C), angle(A, D, C) == angle(D, C, B), angle(B, A, D) == angle(C, B, A)
By divide_by_2_mod_180_v2 on H, E, C, E, D, C we get angle(H, E, C) == angle(E, D, C) + 180 mod 360
By divide_by_2_mod_180_v1 on D, E, G, D, E, F we get angle(D, E, F) == angle(D, E, G) mod 360
By divide_by_2_mod_180_v3 on C, E, G, C, D, E we get angle(C, E, G) == angle(C, D, E) + 180 mod 360
By divide_by_2_mod_180_v3 on E, D, C, H, E, C we get angle(E, D, C) == angle(H, E, C) + 180 mod 360
By divide_by_2_mod_180_v3 on F, E, A, B, E, G we get angle(F, E, A) == angle(B, E, G) + 180 mod 360
By divide_by_2_mod_180_v2 on G, E, C, E, D, C we get angle(G, E, C) == angle(E, D, C) + 180 mod 360
By line_inequality on Line(A, D), Line(B, E), A we get Line(A, D) != Line(B, E)
By line_inequality on g, Line(A, D), C we get g != Line(A, D)
By divide_by_2_mod_180_v3 on F, E, B, A, E, H we get angle(F, E, B) == angle(A, E, H) + 180 mod 360
By external_angle_bisector_definition_v0_r on A, F, B, E we get Line(E, F) == external_angle_bisector(A, E, B)
By divide_by_2_mod_180_v3 on C, E, G, F, E, D we get angle(C, E, G) == angle(F, E, D) + 180 mod 360
By divide_by_2_mod_180_v2 on B, E, G, E, B, A we get angle(B, E, G) == angle(E, B, A) + 180 mod 360
By isosceles_trapezoid_properties on C, D, A, B we get parallel(Line(A, B), Line(C, D)), distance(A, D) == distance(B, C), angle(B, C, D) == angle(C, D, A), angle(A, B, C) == angle(D, A, B)
By line_inequality on Line(B, E), Line(B, C), E we get Line(B, C) != Line(B, E)
By divide_by_2_mod_180_v2 on F, E, D, C, E, G we get angle(F, E, D) == angle(C, E, G) + 180 mod 360
By divide_by_2_mod_180_v2 on C, D, E, C, E, H we get angle(C, D, E) == angle(C, E, H) + 180 mod 360
By divide_by_2_mod_180_v1 on G, E, A, E, B, A we get angle(E, B, A) == angle(G, E, A) mod 360
By divide_by_2_mod_180_v3 on E, B, A, B, E, G we get angle(E, B, A) == angle(B, E, G) + 180 mod 360
By line_inequality on Line(A, F), Line(A, E), F we get Line(A, E) != Line(A, F)
By divide_by_2_mod_180_v3 on D, C, E, G, E, C we get angle(D, C, E) == angle(G, E, C) + 180 mod 360
By divide_by_2_mod_180_v3 on G, E, B, A, E, F we get angle(G, E, B) == angle(A, E, F) + 180 mod 360
By divide_by_2_mod_180_v3 on C, E, G, E, C, D we get angle(C, E, G) == angle(E, C, D) + 180 mod 360
By line_inequality on Line(E, F), Line(A, C), E we get Line(A, C) != Line(E, F)
By line_inequality on Line(B, D), Line(E, F), D we get Line(B, D) != Line(E, F)
By divide_by_2_mod_180_v3 on C, E, H, E, C, D we get angle(C, E, H) == angle(E, C, D) + 180 mod 360
By line_inequality on i, Line(B, D), E we get i != Line(B, D)
By line_inequality on Line(A, D), Line(C, E), D we get Line(A, D) != Line(C, E)
By line_inequality on h, Line(E, F), D we get h != Line(E, F)
By line_inequality on Line(A, C), Line(B, E), C we get Line(A, C) != Line(B, E)
By divide_by_2_mod_180_v3 on D, E, F, H, E, C we get angle(D, E, F) == angle(H, E, C) + 180 mod 360
By line_inequality on Line(B, C), Line(D, E), C we get Line(B, C) != Line(D, E)
By divide_by_2_mod_180_v2 on B, E, F, H, E, A we get angle(B, E, F) == angle(H, E, A) + 180 mod 360
By divide_by_2_mod_180_v0 on G, E, D, E, C, D we get angle(E, C, D) == angle(G, E, D) mod 360
By line_inequality on g, Line(A, E), D we get g != Line(A, E)
By isosceles_trapezoid_properties on B, A, C, D we get parallel(Line(A, B), Line(C, D)), distance(A, C) == distance(B, D), angle(B, A, C) == angle(D, B, A), angle(A, C, D) == angle(C, D, B)
By line_inequality on Line(B, E), Line(A, F), B we get Line(A, F) != Line(B, E)
By isosceles_trapezoid_properties on D, C, A, B we get parallel(Line(A, B), Line(C, D)), distance(A, C) == distance(B, D), angle(B, D, C) == angle(D, C, A), angle(A, B, D) == angle(C, A, B)
By line_inequality on Line(A, D), i, A we get i != Line(A, D)
By line_inequality on Line(A, E), h, A we get h != Line(A, E)
By line_inequality on Line(D, E), i, D we get i != Line(D, E)
By line_inequality on Line(A, D), Line(E, F), D we get Line(A, D) != Line(E, F)
By line_inequality on i, Line(B, F), H we get i != Line(B, F)
By line_inequality on Line(B, E), Line(A, E), B we get Line(A, E) != Line(B, E)
By line_inequality on Line(A, D), Line(B, F), A we get Line(A, D) != Line(B, F)
By line_inequality on Line(C, E), Line(A, C), E we get Line(A, C) != Line(C, E)
By line_inequality on Line(A, F), Line(D, E), A we get Line(A, F) != Line(D, E)
By line_inequality on Line(A, D), Line(B, C), D we get Line(A, D) != Line(B, C)
By line_inequality on Line(B, D), Line(A, C), D we get Line(A, C) != Line(B, D)
By line_inequality on Line(C, E), Line(B, D), E we get Line(B, D) != Line(C, E)
By line_inequality on Line(A, D), h, A we get h != Line(A, D)
By line_inequality on Line(A, F), h, A we get h != Line(A, F)
By line_inequality on i, Line(B, C), E we get i != Line(B, C)
By line_inequality on Line(A, C), Line(B, F), C we get Line(A, C) != Line(B, F)
By line_inequality on i, Line(B, E), G we get i != Line(B, E)
By line_inequality on Line(D, E), Line(A, E), D we get Line(A, E) != Line(D, E)
By line_inequality on Line(E, F), Line(B, C), F we get Line(B, C) != Line(E, F)
By line_inequality on Line(B, D), Line(B, F), D we get Line(B, D) != Line(B, F)
By line_inequality on Line(E, F), Line(C, E), F we get Line(C, E) != Line(E, F)
By line_inequality on Line(A, D), Line(A, E), D we get Line(A, D) != Line(A, E)
By line_inequality on i, Line(C, F), H we get i != Line(C, F)
By line_inequality on i, Line(A, E), H we get i != Line(A, E)
By line_inequality on Line(B, C), Line(B, D), C we get Line(B, C) != Line(B, D)
By line_inequality on Line(B, C), Line(A, F), C we get Line(A, F) != Line(B, C)
By line_inequality on h, Line(B, F), D we get h != Line(B, F)
By line_inequality on Line(B, F), Line(A, E), B we get Line(A, E) != Line(B, F)
By line_inequality on i, Line(A, C), E we get i != Line(A, C)
By line_inequality on Line(B, E), h, B we get h != Line(B, E)
By line_inequality on h, Line(B, D), F we get h != Line(B, D)
By line_inequality on Line(A, F), Line(A, C), F we get Line(A, C) != Line(A, F)
By line_inequality on Line(B, D), Line(B, E), D we get Line(B, D) != Line(B, E)
By line_inequality on Line(C, F), Line(B, D), C we get Line(B, D) != Line(C, F)
By line_inequality on g, Line(D, E), C we get g != Line(D, E)
By line_inequality on Line(B, F), Line(A, F), B we get Line(A, F) != Line(B, F)
By line_inequality on Line(C, F), Line(B, C), F we get Line(B, C) != Line(C, F)
By line_inequality on Line(C, E), Line(C, F), E we get Line(C, E) != Line(C, F)
By line_inequality on Line(A, F), Line(E, F), A we get Line(A, F) != Line(E, F)
By line_inequality on Line(A, D), Line(C, F), D we get Line(A, D) != Line(C, F)
By line_inequality on Line(C, F), Line(B, E), F we get Line(B, E) != Line(C, F)
By line_inequality on Line(E, F), Line(B, F), E we get Line(B, F) != Line(E, F)
By line_inequality on Line(D, E), h, E we get h != Line(D, E)
By line_inequality on Line(D, E), Line(B, E), D we get Line(B, E) != Line(D, E)
By line_inequality on Line(E, F), Line(D, E), F we get Line(D, E) != Line(E, F)
By line_inequality on Line(B, F), Line(B, C), F we get Line(B, C) != Line(B, F)
By line_inequality on Line(C, F), Line(A, F), C we get Line(A, F) != Line(C, F)
By line_inequality on Line(B, D), Line(D, E), B we get Line(B, D) != Line(D, E)
By line_inequality on Line(D, E), Line(C, F), E we get Line(C, F) != Line(D, E)
By line_inequality on Line(B, F), Line(C, E), F we get Line(B, F) != Line(C, E)
By line_inequality on Line(A, F), Line(B, D), F we get Line(A, F) != Line(B, D)
By line_inequality on Line(C, F), Line(A, C), F we get Line(A, C) != Line(C, F)
By line_inequality on Line(B, F), Line(B, E), F we get Line(B, E) != Line(B, F)
By line_inequality on Line(C, E), g, E we get g != Line(C, E)
By line_inequality on Line(C, E), Line(A, F), E we get Line(A, F) != Line(C, E)
By line_inequality on g, Line(B, D), C we get g != Line(B, D)
By line_inequality on Line(A, E), Line(A, C), E we get Line(A, C) != Line(A, E)
By line_inequality on Line(E, F), Line(A, E), F we get Line(A, E) != Line(E, F)
By line_inequality on i, Line(C, E), G we get i != Line(C, E)
By line_inequality on g, Line(B, C), D we get g != Line(B, C)
By line_inequality on Line(E, F), Line(C, F), E we get Line(C, F) != Line(E, F)
By line_inequality on g, Line(A, C), D we get g != Line(A, C)
By line_inequality on Line(A, D), Line(B, D), A we get Line(A, D) != Line(B, D)
By line_inequality on Line(B, C), Line(A, C), B we get Line(A, C) != Line(B, C)
By line_inequality on Line(C, E), Line(B, C), E we get Line(B, C) != Line(C, E)
By line_inequality on Line(A, D), Line(A, C), D we get Line(A, C) != Line(A, D)
By line_inequality on Line(D, E), Line(C, E), D we get Line(C, E) != Line(D, E)
By line_inequality on Line(D, E), Line(A, D), E we get Line(A, D) != Line(D, E)
By line_inequality on Line(A, D), Line(A, F), D we get Line(A, D) != Line(A, F)
By line_inequality on Line(E, F), Line(B, E), F we get Line(B, E) != Line(E, F)
By line_inequality on Line(C, E), Line(A, E), C we get Line(A, E) != Line(C, E)
By tangent_chord_angle_v1 on E, C, D, F we get tangent(Line(E, F), Circle(C, D, E))
By isogonal_conjugate_sufficient_conditions_v3 on D, E, C, F, F we get F == isogonal_conjugate(F, C, D, E)
By external_angle_bisector_definition_v0_r on C, G, D, E we get Line(E, G) == external_angle_bisector(C, E, D)
By isogonal_conjugate_sufficient_conditions_v1 on B, A, E, F, F we get F == isogonal_conjugate(F, A, B, E)
By tangent_chord_angle_v1 on E, B, A, F we get tangent(Line(E, F), Circle(A, B, E))
By external_angle_bisector_definition_v0_r on D, F, C, E we get Line(E, F) == external_angle_bisector(C, E, D)
By external_angle_bisector_definition_v0_r on E, F, B, A we get Line(A, F) == external_angle_bisector(B, A, E)
By external_angle_bisector_definition_v0_r on D, H, C, E we get Line(E, H) == external_angle_bisector(C, E, D)
By internal_angle_bisector_definition_v0_r on A, F, E, B we get Line(B, F) == internal_angle_bisector(A, B, E)
By internal_angle_bisector_definition_v0_r on D, F, E, C we get Line(C, F) == internal_angle_bisector(D, C, E)
By anti_similar_triangle_basic_properties on B, E, C, C, E, B we get not_collinear(B, C, E), not_collinear(B, C, E), angle(B, E, C) == 0 - angle(C, E, B) mod 360, angle(E, C, B) == 0 - angle(E, B, C) mod 360, angle(C, B, E) == 0 - angle(B, C, E) mod 360, log(distance(B, E)) + log(distance(B, E)) == log(distance(C, E)) + log(distance(C, E)), log(distance(B, E)) + log(distance(B, C)) == log(distance(C, E)) + log(distance(B, C)), log(distance(B, C)) + log(distance(B, E)) == log(distance(B, C)) + log(distance(C, E))
By anti_similar_triangle_basic_properties on E, B, A, E, A, B we get not_collinear(A, B, E), not_collinear(A, B, E), angle(E, B, A) == 0 - angle(E, A, B) mod 360, angle(B, A, E) == 0 - angle(A, B, E) mod 360, angle(A, E, B) == 0 - angle(B, E, A) mod 360, log(distance(A, E)) + log(distance(A, B)) == log(distance(B, E)) + log(distance(A, B)), log(distance(A, B)) + log(distance(A, E)) == log(distance(A, B)) + log(distance(B, E)), log(distance(A, E)) + log(distance(A, E)) == log(distance(B, E)) + log(distance(B, E))
By anti_similar_triangle_basic_properties on A, E, C, C, E, A we get not_collinear(A, C, E), not_collinear(A, C, E), angle(A, E, C) == 0 - angle(C, E, A) mod 360, angle(E, C, A) == 0 - angle(E, A, C) mod 360, angle(C, A, E) == 0 - angle(A, C, E) mod 360, log(distance(A, E)) + log(distance(A, E)) == log(distance(C, E)) + log(distance(C, E)), log(distance(A, E)) + log(distance(A, C)) == log(distance(C, E)) + log(distance(A, C)), log(distance(A, C)) + log(distance(A, E)) == log(distance(A, C)) + log(distance(C, E))
By anti_similar_triangle_basic_properties on E, D, B, E, B, D we get not_collinear(B, D, E), not_collinear(B, D, E), angle(E, D, B) == 0 - angle(E, B, D) mod 360, angle(D, B, E) == 0 - angle(B, D, E) mod 360, angle(B, E, D) == 0 - angle(D, E, B) mod 360, log(distance(B, E)) + log(distance(B, D)) == log(distance(D, E)) + log(distance(B, D)), log(distance(B, D)) + log(distance(B, E)) == log(distance(B, D)) + log(distance(D, E)), log(distance(B, E)) + log(distance(B, E)) == log(distance(D, E)) + log(distance(D, E))
By anti_similar_triangle_basic_properties on A, F, E, F, A, E we get not_collinear(A, E, F), not_collinear(A, E, F), angle(A, F, E) == 0 - angle(F, A, E) mod 360, angle(F, E, A) == 0 - angle(A, E, F) mod 360, angle(E, A, F) == 0 - angle(E, F, A) mod 360, log(distance(A, F)) + log(distance(A, E)) == log(distance(A, F)) + log(distance(E, F)), log(distance(A, E)) + log(distance(A, E)) == log(distance(E, F)) + log(distance(E, F)), log(distance(A, E)) + log(distance(A, F)) == log(distance(E, F)) + log(distance(A, F))
By anti_similar_triangle_basic_properties on F, E, B, B, E, F we get not_collinear(B, E, F), not_collinear(B, E, F), angle(F, E, B) == 0 - angle(B, E, F) mod 360, angle(E, B, F) == 0 - angle(E, F, B) mod 360, angle(B, F, E) == 0 - angle(F, B, E) mod 360, log(distance(B, E)) + log(distance(B, E)) == log(distance(E, F)) + log(distance(E, F)), log(distance(B, E)) + log(distance(B, F)) == log(distance(E, F)) + log(distance(B, F)), log(distance(B, F)) + log(distance(B, E)) == log(distance(B, F)) + log(distance(E, F))
By anti_similar_triangle_basic_properties on D, A, E, A, D, E we get not_collinear(A, D, E), not_collinear(A, D, E), angle(D, A, E) == 0 - angle(A, D, E) mod 360, angle(A, E, D) == 0 - angle(D, E, A) mod 360, angle(E, D, A) == 0 - angle(E, A, D) mod 360, log(distance(A, D)) + log(distance(A, E)) == log(distance(A, D)) + log(distance(D, E)), log(distance(A, E)) + log(distance(A, E)) == log(distance(D, E)) + log(distance(D, E)), log(distance(A, E)) + log(distance(A, D)) == log(distance(D, E)) + log(distance(A, D))
By anti_similar_triangle_basic_properties on F, D, E, D, F, E we get not_collinear(D, E, F), not_collinear(D, E, F), angle(F, D, E) == 0 - angle(D, F, E) mod 360, angle(D, E, F) == 0 - angle(F, E, D) mod 360, angle(E, F, D) == 0 - angle(E, D, F) mod 360, log(distance(D, F)) + log(distance(D, E)) == log(distance(D, F)) + log(distance(E, F)), log(distance(D, E)) + log(distance(D, E)) == log(distance(E, F)) + log(distance(E, F)), log(distance(D, E)) + log(distance(D, F)) == log(distance(E, F)) + log(distance(D, F))
By anti_similar_triangle_basic_properties on C, D, E, D, C, E we get not_collinear(C, D, E), not_collinear(C, D, E), angle(C, D, E) == 0 - angle(D, C, E) mod 360, angle(D, E, C) == 0 - angle(C, E, D) mod 360, angle(E, C, D) == 0 - angle(E, D, C) mod 360, log(distance(C, D)) + log(distance(C, E)) == log(distance(C, D)) + log(distance(D, E)), log(distance(C, E)) + log(distance(C, E)) == log(distance(D, E)) + log(distance(D, E)), log(distance(C, E)) + log(distance(C, D)) == log(distance(D, E)) + log(distance(C, D))
By anti_similar_triangle_basic_properties on C, F, E, F, C, E we get not_collinear(C, E, F), not_collinear(C, E, F), angle(C, F, E) == 0 - angle(F, C, E) mod 360, angle(F, E, C) == 0 - angle(C, E, F) mod 360, angle(E, C, F) == 0 - angle(E, F, C) mod 360, log(distance(C, F)) + log(distance(C, E)) == log(distance(C, F)) + log(distance(E, F)), log(distance(C, E)) + log(distance(C, E)) == log(distance(E, F)) + log(distance(E, F)), log(distance(C, E)) + log(distance(C, F)) == log(distance(E, F)) + log(distance(C, F))
By anti_similar_triangle_basic_properties on B, D, C, A, C, D we get not_collinear(B, C, D), not_collinear(A, C, D), angle(B, D, C) == 0 - angle(A, C, D) mod 360, angle(D, C, B) == 0 - angle(C, D, A) mod 360, angle(C, B, D) == 0 - angle(D, A, C) mod 360, log(distance(A, C)) + log(distance(C, D)) == log(distance(B, D)) + log(distance(C, D)), log(distance(C, D)) + log(distance(A, D)) == log(distance(C, D)) + log(distance(B, C)), log(distance(A, D)) + log(distance(B, D)) == log(distance(B, C)) + log(distance(A, C))
By anti_similar_triangle_basic_properties on A, C, B, B, D, A we get not_collinear(A, B, C), not_collinear(A, B, D), angle(A, C, B) == 0 - angle(B, D, A) mod 360, angle(C, B, A) == 0 - angle(D, A, B) mod 360, angle(B, A, C) == 0 - angle(A, B, D) mod 360, log(distance(A, C)) + log(distance(A, D)) == log(distance(B, D)) + log(distance(B, C)), log(distance(A, D)) + log(distance(A, B)) == log(distance(B, C)) + log(distance(A, B)), log(distance(A, B)) + log(distance(A, C)) == log(distance(A, B)) + log(distance(B, D))
By anti_similar_triangle_basic_properties on C, D, B, D, C, A we get not_collinear(B, C, D), not_collinear(A, C, D), angle(C, D, B) == 0 - angle(D, C, A) mod 360, angle(D, B, C) == 0 - angle(C, A, D) mod 360, angle(B, C, D) == 0 - angle(A, D, C) mod 360, log(distance(C, D)) + log(distance(A, C)) == log(distance(C, D)) + log(distance(B, D)), log(distance(A, C)) + log(distance(B, C)) == log(distance(B, D)) + log(distance(A, D)), log(distance(A, D)) + log(distance(C, D)) == log(distance(B, C)) + log(distance(C, D))
By similar_triangle_basic_properties on A, E, C, D, E, B we get not_collinear(A, C, E), not_collinear(B, D, E), angle(A, E, C) == angle(D, E, B) mod 360, angle(E, B, D) == angle(E, C, A) mod 360, angle(B, D, E) == angle(C, A, E) mod 360, log(distance(A, E)) + log(distance(B, E)) == log(distance(D, E)) + log(distance(C, E)), log(distance(B, E)) + log(distance(A, C)) == log(distance(C, E)) + log(distance(B, D)), log(distance(A, C)) + log(distance(D, E)) == log(distance(B, D)) + log(distance(A, E))
By anti_similar_triangle_basic_properties on C, B, E, D, A, E we get not_collinear(B, C, E), not_collinear(A, D, E), angle(C, B, E) == 0 - angle(D, A, E) mod 360, angle(B, E, C) == 0 - angle(A, E, D) mod 360, angle(E, C, B) == 0 - angle(E, D, A) mod 360, log(distance(A, D)) + log(distance(B, E)) == log(distance(B, C)) + log(distance(A, E)), log(distance(A, E)) + log(distance(C, E)) == log(distance(B, E)) + log(distance(D, E)), log(distance(C, E)) + log(distance(A, D)) == log(distance(D, E)) + log(distance(B, C))
By similar_triangle_basic_properties on D, E, A, B, E, C we get not_collinear(A, D, E), not_collinear(B, C, E), angle(B, E, C) == angle(D, E, A) mod 360, angle(E, A, D) == angle(E, C, B) mod 360, angle(A, D, E) == angle(C, B, E) mod 360, log(distance(B, E)) + log(distance(A, E)) == log(distance(D, E)) + log(distance(C, E)), log(distance(A, E)) + log(distance(B, C)) == log(distance(C, E)) + log(distance(A, D)), log(distance(A, D)) + log(distance(B, E)) == log(distance(B, C)) + log(distance(D, E))
By similar_triangle_basic_properties on E, D, B, E, A, C we get not_collinear(B, D, E), not_collinear(A, C, E), angle(E, A, C) == angle(E, D, B) mod 360, angle(A, C, E) == angle(D, B, E) mod 360, angle(B, E, D) == angle(C, E, A) mod 360, log(distance(A, E)) + log(distance(B, D)) == log(distance(D, E)) + log(distance(A, C)), log(distance(A, C)) + log(distance(B, E)) == log(distance(B, D)) + log(distance(C, E)), log(distance(B, E)) + log(distance(A, E)) == log(distance(C, E)) + log(distance(D, E))
By anti_similar_triangle_basic_properties on D, E, A, C, E, B we get not_collinear(A, D, E), not_collinear(B, C, E), angle(D, E, A) == 0 - angle(C, E, B) mod 360, angle(E, A, D) == 0 - angle(E, B, C) mod 360, angle(A, D, E) == 0 - angle(B, C, E) mod 360, log(distance(C, E)) + log(distance(A, E)) == log(distance(D, E)) + log(distance(B, E)), log(distance(A, E)) + log(distance(B, C)) == log(distance(B, E)) + log(distance(A, D)), log(distance(A, D)) + log(distance(C, E)) == log(distance(B, C)) + log(distance(D, E))
By similar_triangle_basic_properties on C, E, B, A, E, D we get not_collinear(B, C, E), not_collinear(A, D, E), angle(A, E, D) == angle(C, E, B) mod 360, angle(E, B, C) == angle(E, D, A) mod 360, angle(B, C, E) == angle(D, A, E) mod 360, log(distance(A, E)) + log(distance(B, E)) == log(distance(C, E)) + log(distance(D, E)), log(distance(B, E)) + log(distance(A, D)) == log(distance(D, E)) + log(distance(B, C)), log(distance(A, D)) + log(distance(C, E)) == log(distance(B, C)) + log(distance(A, E))
By anti_similar_triangle_basic_properties on B, D, E, A, C, E we get not_collinear(B, D, E), not_collinear(A, C, E), angle(B, D, E) == 0 - angle(A, C, E) mod 360, angle(D, E, B) == 0 - angle(C, E, A) mod 360, angle(E, B, D) == 0 - angle(E, A, C) mod 360, log(distance(A, C)) + log(distance(D, E)) == log(distance(B, D)) + log(distance(C, E)), log(distance(C, E)) + log(distance(B, E)) == log(distance(D, E)) + log(distance(A, E)), log(distance(A, E)) + log(distance(B, D)) == log(distance(B, E)) + log(distance(A, C))
By anti_similar_triangle_basic_properties on E, D, B, E, C, A we get not_collinear(B, D, E), not_collinear(A, C, E), angle(E, D, B) == 0 - angle(E, C, A) mod 360, angle(D, B, E) == 0 - angle(C, A, E) mod 360, angle(B, E, D) == 0 - angle(A, E, C) mod 360, log(distance(C, E)) + log(distance(B, D)) == log(distance(D, E)) + log(distance(A, C)), log(distance(A, C)) + log(distance(B, E)) == log(distance(B, D)) + log(distance(A, E)), log(distance(A, E)) + log(distance(D, E)) == log(distance(B, E)) + log(distance(C, E))
By line_definition on F, G, i we get i == Line(F, G)
By line_definition on F, H, i we get i == Line(F, H)
By line_intersection_definition on B, Line(B, D), Line(B, E) we get B == line_intersection(Line(B, D), Line(B, E))
By line_intersection_definition on B, Line(B, E), Line(B, C) we get B == line_intersection(Line(B, C), Line(B, E))
By line_intersection_definition on C, Line(C, F), Line(A, C) we get C == line_intersection(Line(A, C), Line(C, F))
By line_intersection_definition on C, Line(B, C), Line(A, C) we get C == line_intersection(Line(A, C), Line(B, C))
By line_intersection_definition on E, Line(D, E), Line(C, E) we get E == line_intersection(Line(C, E), Line(D, E))
By line_intersection_definition on E, Line(D, E), i we get E == line_intersection(i, Line(D, E))
By concurrent_sufficient_conditions on Line(B, C), Line(B, D), f we get concurrent(f, Line(B, C), Line(B, D))
By concurrent_sufficient_conditions on Line(A, D), Line(A, F), f we get concurrent(f, Line(A, D), Line(A, F))
By line_intersection_definition on D, h, Line(D, E) we get D == line_intersection(h, Line(D, E))
By line_intersection_definition on F, Line(C, F), Line(A, F) we get F == line_intersection(Line(A, F), Line(C, F))
By line_intersection_definition on D, Line(D, E), Line(A, D) we get D == line_intersection(Line(A, D), Line(D, E))
By concurrent_sufficient_conditions on Line(A, C), Line(A, F), f we get concurrent(f, Line(A, C), Line(A, F))
By concurrent_sufficient_conditions on Line(A, F), Line(A, C), f we get concurrent(f, Line(A, C), Line(A, F))
By line_intersection_definition on B, Line(B, C), Line(B, F) we get B == line_intersection(Line(B, C), Line(B, F))
By line_intersection_definition on E, Line(A, E), i we get E == line_intersection(i, Line(A, E))
By concurrent_sufficient_conditions on Line(B, D), Line(B, C), f we get concurrent(f, Line(B, C), Line(B, D))
By line_intersection_definition on C, Line(B, C), Line(C, E) we get C == line_intersection(Line(B, C), Line(C, E))
By line_intersection_definition on F, i, h we get F == line_intersection(h, i)
By concurrent_sufficient_conditions on Line(A, E), Line(A, F), f we get concurrent(f, Line(A, E), Line(A, F))
By line_intersection_definition on B, Line(B, E), Line(B, F) we get B == line_intersection(Line(B, E), Line(B, F))
By concurrent_sufficient_conditions on Line(A, E), Line(A, C), f we get concurrent(f, Line(A, C), Line(A, E))
By line_intersection_definition on A, Line(A, F), Line(A, D) we get A == line_intersection(Line(A, D), Line(A, F))
By line_intersection_definition on F, h, Line(A, F) we get F == line_intersection(h, Line(A, F))
By line_intersection_definition on F, Line(C, F), i we get F == line_intersection(i, Line(C, F))
By line_intersection_definition on A, Line(A, D), Line(A, C) we get A == line_intersection(Line(A, C), Line(A, D))
By line_intersection_definition on D, Line(B, D), g we get D == line_intersection(g, Line(B, D))
By line_intersection_definition on E, i, Line(C, E) we get E == line_intersection(i, Line(C, E))
By concurrent_sufficient_conditions on Line(B, C), Line(B, E), f we get concurrent(f, Line(B, C), Line(B, E))
By concurrent_sufficient_conditions on Line(A, F), Line(A, D), f we get concurrent(f, Line(A, D), Line(A, F))
By line_intersection_definition on D, Line(B, D), Line(A, D) we get D == line_intersection(Line(A, D), Line(B, D))
By line_intersection_definition on C, Line(A, C), Line(C, E) we get C == line_intersection(Line(A, C), Line(C, E))
By concurrent_sufficient_conditions on Line(B, E), Line(B, F), f we get concurrent(f, Line(B, E), Line(B, F))
By line_intersection_definition on F, h, Line(B, F) we get F == line_intersection(h, Line(B, F))
By line_intersection_definition on C, g, Line(B, C) we get C == line_intersection(g, Line(B, C))
By line_intersection_definition on D, Line(D, E), g we get D == line_intersection(g, Line(D, E))
By line_intersection_definition on F, Line(C, F), Line(B, F) we get F == line_intersection(Line(B, F), Line(C, F))
By concurrent_sufficient_conditions on Line(B, F), Line(B, D), f we get concurrent(f, Line(B, D), Line(B, F))
By line_intersection_definition on A, Line(A, E), Line(A, C) we get A == line_intersection(Line(A, C), Line(A, E))
By line_intersection_definition on D, Line(A, D), g we get D == line_intersection(g, Line(A, D))
By line_intersection_definition on C, Line(C, F), Line(B, C) we get C == line_intersection(Line(B, C), Line(C, F))
By line_intersection_definition on E, Line(B, E), Line(A, E) we get E == line_intersection(Line(A, E), Line(B, E))
By line_intersection_definition on E, Line(A, E), Line(D, E) we get E == line_intersection(Line(A, E), Line(D, E))
By line_intersection_definition on A, Line(A, C), Line(A, F) we get A == line_intersection(Line(A, C), Line(A, F))
By line_intersection_definition on E, Line(B, E), i we get E == line_intersection(i, Line(B, E))
By line_intersection_definition on C, Line(A, C), g we get C == line_intersection(g, Line(A, C))
By line_intersection_definition on D, Line(D, E), Line(B, D) we get D == line_intersection(Line(B, D), Line(D, E))
By concurrent_sufficient_conditions on Line(B, C), Line(B, F), f we get concurrent(f, Line(B, C), Line(B, F))
By line_intersection_definition on A, Line(A, F), Line(A, E) we get A == line_intersection(Line(A, E), Line(A, F))
By concurrent_sufficient_conditions on Line(A, D), Line(A, C), f we get concurrent(f, Line(A, C), Line(A, D))
By line_intersection_definition on B, Line(B, C), Line(B, D) we get B == line_intersection(Line(B, C), Line(B, D))
By line_intersection_definition on A, Line(A, E), Line(A, D) we get A == line_intersection(Line(A, D), Line(A, E))
By concurrent_sufficient_conditions on Line(B, E), Line(B, C), f we get concurrent(f, Line(B, C), Line(B, E))
By line_intersection_definition on C, Line(C, E), g we get C == line_intersection(g, Line(C, E))
By line_intersection_definition on B, Line(B, F), Line(B, D) we get B == line_intersection(Line(B, D), Line(B, F))
By line_intersection_definition on D, Line(B, D), h we get D == line_intersection(h, Line(B, D))
By line_intersection_definition on E, Line(A, E), Line(C, E) we get E == line_intersection(Line(A, E), Line(C, E))
By line_intersection_definition on C, Line(C, F), Line(C, E) we get C == line_intersection(Line(C, E), Line(C, F))
By line_intersection_definition on E, Line(B, E), Line(C, E) we get E == line_intersection(Line(B, E), Line(C, E))
By concurrent_sufficient_conditions on Line(B, F), Line(B, E), f we get concurrent(f, Line(B, E), Line(B, F))
By line_intersection_definition on F, i, Line(A, F) we get F == line_intersection(i, Line(A, F))
By concurrent_sufficient_conditions on Line(B, D), Line(B, F), f we get concurrent(f, Line(B, D), Line(B, F))
By line_intersection_definition on F, i, Line(B, F) we get F == line_intersection(i, Line(B, F))
By line_intersection_definition on F, Line(B, F), Line(A, F) we get F == line_intersection(Line(A, F), Line(B, F))
By concurrent_sufficient_conditions on Line(A, C), Line(A, E), f we get concurrent(f, Line(A, C), Line(A, E))
By line_intersection_definition on D, Line(A, D), h we get D == line_intersection(h, Line(A, D))
By concurrent_sufficient_conditions on Line(B, D), Line(B, E), f we get concurrent(f, Line(B, D), Line(B, E))
By concurrent_sufficient_conditions on Line(A, C), Line(A, D), f we get concurrent(f, Line(A, C), Line(A, D))
By line_intersection_definition on E, Line(D, E), Line(B, E) we get E == line_intersection(Line(B, E), Line(D, E))
By concurrent_sufficient_conditions on Line(B, F), Line(B, C), f we get concurrent(f, Line(B, C), Line(B, F))
By concurrent_sufficient_conditions on Line(A, F), Line(A, E), f we get concurrent(f, Line(A, E), Line(A, F))
By concurrent_sufficient_conditions on Line(B, E), Line(B, D), f we get concurrent(f, Line(B, D), Line(B, E))
By concurrent_sufficient_conditions on Line(A, E), Line(A, D), f we get concurrent(f, Line(A, D), Line(A, E))
By concurrent_sufficient_conditions on Line(A, D), Line(A, E), f we get concurrent(f, Line(A, D), Line(A, E))
By same_angle_converse_v0 on E, F, G, A we get collinear(E, F, G)
By same_angle_converse_v0 on E, H, F, C we get collinear(E, F, H)
By parallel_line_definition on H, i, f we get i == parallel_line(H, f)
By parallel_line_definition on B, f, i we get f == parallel_line(B, i)
By parallel_line_definition on F, i, f we get i == parallel_line(F, f)
By parallel_line_definition on G, i, g we get i == parallel_line(G, g)
By parallel_line_definition on E, i, g we get i == parallel_line(E, g)
By parallel_line_definition on D, g, i we get g == parallel_line(D, i)
By parallel_line_definition on H, i, g we get i == parallel_line(H, g)
By parallel_line_definition on E, i, f we get i == parallel_line(E, f)
By parallel_line_definition on G, i, f we get i == parallel_line(G, f)
By parallel_line_definition on C, g, i we get g == parallel_line(C, i)
By parallel_line_definition on A, f, i we get f == parallel_line(A, i)
By parallel_line_definition on F, i, g we get i == parallel_line(F, g)
By in_imply_collinear on F, G, H we get collinear(F, G, H)
By internal_angle_bisector_definition_v0 on G, F, G, E we get angle(F, E, G) == angle(G, E, F) mod 360
By internal_angle_bisector_definition_v0 on H, F, H, E we get angle(F, E, H) == angle(H, E, F) mod 360
By power_of_a_point_on_circle on A, Circle(A, B, E) we get 0 == power_of_a_point(A, Circle(A, B, E))
By power_of_a_point_in_circle on E, Circle(C, D, E) we get 0 == power_of_a_point(E, Circle(C, D, E))
By power_of_a_point_in_circle on D, Circle(C, D, E) we get 0 == power_of_a_point(D, Circle(C, D, E))
By power_of_a_point_in_circle on C, Circle(C, D, E) we get 0 == power_of_a_point(C, Circle(C, D, E))
By power_of_a_point_on_circle on B, Circle(A, B, E) we get 0 == power_of_a_point(B, Circle(A, B, E))
By power_of_a_point_on_circle on E, Circle(A, B, E) we get 0 == power_of_a_point(E, Circle(A, B, E))
By draw_point_of_tangency on i, Circle(A, B, E) we get exists(line_circle_tangent_point(i, Circle(A, B, E)))
By draw_point_of_tangency on i, Circle(C, D, E) we get exists(line_circle_tangent_point(i, Circle(C, D, E)))
By power_of_a_point_tangent on F, E, Circle(A, B, E) we get 2 * log(distance(E, F)) == log(power_of_a_point(F, Circle(A, B, E)))
By power_of_a_point_tangent on H, E, Circle(A, B, E) we get 2 * log(distance(E, H)) == log(power_of_a_point(H, Circle(A, B, E)))
By power_of_a_point_tangent on F, E, Circle(C, D, E) we get 2 * log(distance(E, F)) == log(power_of_a_point(F, Circle(C, D, E)))
By power_of_a_point_tangent on G, E, Circle(A, B, E) we get 2 * log(distance(E, G)) == log(power_of_a_point(G, Circle(A, B, E)))
By power_of_a_point_tangent on H, E, Circle(C, D, E) we get 2 * log(distance(E, H)) == log(power_of_a_point(H, Circle(C, D, E)))
By power_of_a_point_tangent on G, E, Circle(C, D, E) we get 2 * log(distance(E, G)) == log(power_of_a_point(G, Circle(C, D, E)))
By excenter_concurrency on B, A, E we get excenter(B, A, E) in external_angle_bisector(B, A, E), excenter(B, A, E) in external_angle_bisector(A, E, B), excenter(B, A, E) in internal_angle_bisector(A, B, E)
By excenter_concurrency on C, E, D we get excenter(C, D, E) in external_angle_bisector(C, E, D), excenter(C, D, E) in external_angle_bisector(C, D, E), excenter(C, D, E) in internal_angle_bisector(D, C, E)
