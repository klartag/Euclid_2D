Assumptions:
A, B, C, D, E, F, G, H: Point
f, g, h, i: Line
c, d: Circle
distinct(A, B, C, D, E, F, G, H)
distinct(f, g, h, i)
distinct(c, d)
f == Line(A, B)
g == parallel_line(C, f)
c == Circle(A, B, C)
D in g, c
E == center(c)
h == Line(A, C)
i == internal_angle_bisector(B, E, D)
F == line_intersection(h, i)
d == Circle(C, E, F)
G == center(d)
H == midpoint(B, E)

Embedding:
C := {"x": "-1.208268946863536807967420827480964362621307373046875", "y": "-0.98565729801687240740903916957904584705829620361328125"}
B := {"x": "0.2312066658778012262498435802626772783696651458740234375", "y": "-0.7710665394391937876861220502178184688091278076171875"}
A := {"x": "-0.28327738854235284815530349078471772372722625732421875", "y": "-1.004073531516972206389937127823941409587860107421875"}
c := {"center": {"x": "-0.71341899339154789169244894688313155572628613571234314295772950271044511328987656808928372729782758877242550668397806296162935555361185012700612349817453023759479372879753641581942954097621614255783043472818648988286132603558584337638049601998648213481985374112862311258929478995040963941367558928153325599739628633296369600087858459380564059483429229499741621019416404042888761193086592968935571714923181630838136857517841705106345354784845003618996187657858129869638151558048752095280135268871780850008198086534876317866203061796279417204405107692046467059532126215041378059168558141332072309027928858023452014544816888260287657845650521860940266215842532592991315448098764554766912748417922905016843792102594985736456268457723244494240166339281134546271156097383037729440544641148860623051908037188807495100601833310976409609672146697840557647400141980281830956767843690837809018920432622526631658859601121722455160266684366604919302320174774676961505143831804439704189264882409408369176494625175831382383434509387953780076784280145551860168965385926017972272753922363630632451350003937881147916783895295546334914334918064573117357350900842194105542319389746080115439925872022318482992948022255274541559448500842390079277631471576455535462417519304905746888169506089222770438787326730767774364286555357031965267995965526355026979330604460564402135190203376691406698248394112965643189016019382448195462483694400782227474398270756102102500320448496532636014139898906027972522887153707373051904916826827471032140874666789745297646589947721031807195938333088165738171609313644262951339080533773753341109895892976855958550369909823111340766241372111040035069656736445348733689506740044826500892943282162804725982202373957520612640712983284669614702274153187167438576045579448732897399704253757942195146037117909694848293429079952111056219508377325434786043006479889709698359174268437938790669627022442050307629930860240817059182974340533608779159405631748344105592191797885101407180114542662865733389105", "y": "0.63018664130806678416473147443282070914539606192262808251071363296791694672990568702850041768093529312634348922099515098700833768729698666964291177529579178585236293379670814630063047379717630635005671682044555112145016112821760823101334380428054468892096441835523984617872557405394016418519221771995375105709855065283387175799571240953171406442010071940980330423142999698286218681503923959154117440019733162136135129109566849548053311370546661712133032368177106601674962802275143739409130312721577527921377591120725429451852120127190925258344506364245085139787559015794950976956034178715414296447252089881383017581087824836028483675766559398456837183201559498005522742350250286058284179177345888498614199293644168153337343477215305397273168308335203842101707535679662339247751319440056863374783996018530697400910531424580307189845051222760678787912686740218098886592922547992608454223434474409109748674731768690623500881631147708471162267338292968495992245609690225731427366396390892754232540980775649430920225580839614611273524698194565996096884139596678013630961517039193424328658388344009711585068488836407351013714807896547952784009239186566616676165020572824669145145378839489913640712045945792109189672318193556318488751456618159054137729557568731514298893022554760362948127214146273951316348778456878121099560076473468304184765962022264948696820529612413811336482762671205692513287505432951758087809084426684330832591945577648265468411194703868311401837618337330060653945629823586344126258434708773592780986715248972121711986892419857429077672819525107708042862693971964512645949286396765705330038859363120967489889742592019508713985025138052484097894825728965927801493797960813800192255456524576066892425293660225108007144270895059377987062047782899936743043332127670646152352473827067902361925583480666109611960337383253551082268257489485508855197178467831401247565400746697974308169199307045572026054217054867257819733256473520647800414815367639708539677160543717325348045824450539464998716"}, "radius_squared": "2.855828112704367362894814888692758825506853854178850545438941260486698468330960004621442134101562157362276757888955620187517548865163097954152911464235398039047611754998924791000684712146519390956970656805922250243893830357288509632892462588438433876582070456219479659901662522037033880980452984826547972815857004806142113131409404482323296719893861380696123769712872156212607741710938710888705708510847755052411726731638050484262402096293306870134927014866032075880087386785206982976245675006020099442320091155552479861396343088315850809883204351432929711210269358049432808983335219058630644982242274735490698193316494173948906787237353349687887109443087034466748915059478438373973372863390687100563702033218953656047461418810232811859459358961982151005507298798576009125002473296928400025501263641562411230267790623564454369700551059999090834882201288671925451979753296353155780528395831689010834971646320697016360491427136938590699963057923710881297029132872138814492689626679903405582970034856500986714194894886573531031509639847404019871104712410315789897877127040224158547560836452430631805956071754542293153484812785829395476338853801822517164628719899543968999209830125592263976499509737950546492798139949733470439810336034991303085798830340982994608318293533429683610257123584013171345291643181476926663865590251067860290418617647680751997101247247714435304556696451571016923581389562722712875844326654333273047841849995045360527901401154261297174422573294594499725027027759090115609760539428259158634432478962745427758697674563688373365489322923970446310216659346484959405716512429549322179207954150168212183869574249013207226653174041176615990047526842681686613366028174793034756278705663567407323716023861693565772844777324815198962449623121662565774169586105376486228562125707192415549637231352630515006644462884284784911574814659359496490836319818012705565853278177532506755023415461340272757882326167657599982878961962456075781847376050472178369786338584080367739453302029112148299302"}
f := {"point": {"x": "-0.28327738854235284815530349078471772372722625732421875", "y": "-1.004073531516972206389937127823941409587860107421875"}, "direction": {"x": "0.5144840544201540744051470710473950020968914031982421875", "y": "0.2330069920777784187038150776061229407787322998046875"}}
g := {"point": {"x": "-1.208268946863536807967420827480964362621307373046875", "y": "-0.98565729801687240740903916957904584705829620361328125"}, "direction": {"x": "0.5144840544201540744051470710473950020968914031982421875", "y": "0.2330069920777784187038150776061229407787322998046875"}}
E := {"x": "-0.71341899339154789169244894688313155572628613571234314295772950271044511328987656808928372729782758877242550668397806296162935555361185012700612349817453023759479372879753641581942954097621614255783043472818648988286132603558584337638049601998648213481985374112862311258929478995040963941367558928153325599739628633296369600087858459380564059483429229499741621019416404042888761193086592968935571714923181630838136857517841705106345354784845003618996187657858129869638151558048752095280135268871780850008198086534876317866203061796279417204405107692046467059532126215041378059168558141332072309027928858023452014544816888260287657845650521860940266215842532592991315448098764554766912748417922905016843792102594985736456268457723244494240166339281134546271156097383037729440544641148860623051908037188807495100601833310976409609672146697840557647400141980281830956767843690837809018920432622526631658859601121722455160266684366604919302320174774676961505143831804439704189264882409408369176494625175831382383434509387953780076784280145551860168965385926017972272753922363630632451350003937881147916783895295546334914334918064573117357350900842194105542319389746080115439925872022318482992948022255274541559448500842390079277631471576455535462417519304905746888169506089222770438787326730767774364286555357031965267995965526355026979330604460564402135190203376691406698248394112965643189016019382448195462483694400782227474398270756102102500320448496532636014139898906027972522887153707373051904916826827471032140874666789745297646589947721031807195938333088165738171609313644262951339080533773753341109895892976855958550369909823111340766241372111040035069656736445348733689506740044826500892943282162804725982202373957520612640712983284669614702274153187167438576045579448732897399704253757942195146037117909694848293429079952111056219508377325434786043006479889709698359174268437938790669627022442050307629930860240817059182974340533608779159405631748344105592191797885101407180114542662865733389105", "y": "0.63018664130806678416473147443282070914539606192262808251071363296791694672990568702850041768093529312634348922099515098700833768729698666964291177529579178585236293379670814630063047379717630635005671682044555112145016112821760823101334380428054468892096441835523984617872557405394016418519221771995375105709855065283387175799571240953171406442010071940980330423142999698286218681503923959154117440019733162136135129109566849548053311370546661712133032368177106601674962802275143739409130312721577527921377591120725429451852120127190925258344506364245085139787559015794950976956034178715414296447252089881383017581087824836028483675766559398456837183201559498005522742350250286058284179177345888498614199293644168153337343477215305397273168308335203842101707535679662339247751319440056863374783996018530697400910531424580307189845051222760678787912686740218098886592922547992608454223434474409109748674731768690623500881631147708471162267338292968495992245609690225731427366396390892754232540980775649430920225580839614611273524698194565996096884139596678013630961517039193424328658388344009711585068488836407351013714807896547952784009239186566616676165020572824669145145378839489913640712045945792109189672318193556318488751456618159054137729557568731514298893022554760362948127214146273951316348778456878121099560076473468304184765962022264948696820529612413811336482762671205692513287505432951758087809084426684330832591945577648265468411194703868311401837618337330060653945629823586344126258434708773592780986715248972121711986892419857429077672819525107708042862693971964512645949286396765705330038859363120967489889742592019508713985025138052484097894825728965927801493797960813800192255456524576066892425293660225108007144270895059377987062047782899936743043332127670646152352473827067902361925583480666109611960337383253551082268257489485508855197178467831401247565400746697974308169199307045572026054217054867257819733256473520647800414815367639708539677160543717325348045824450539464998716"}
D := {"x": "0.82748428439587685118334692467912992544190798776998718717981029515462657576678384220921273074864971120187729290002991579241777746737185693586099687045824001736094894287682304164364700879730229689302607041804491521167668035052758477046736417421334677999716160645816305275039987556827385245016132507065485369335982486403790964931665004066004863362926277799342691245183700087950886747342505532611464534034632946679400756708770351235658949599571957341896160617713787764794703694495304914107469846343052232231877336824394135600992109201127125270695775517036008333132299400542525721374986055557115840811062562639083291965402988408701933676230900700003243171367055867956500533170756592504464776094965803373903374823187504171488239579504204122481213702239542363992965578498597625368659172564198172172984186425235654853465280784832288690414143381593972927037944396274921314074817637632815690270701375129654816984663430895652027922082410976567247389842037067597219598539903904423252463629232507627241369521316173350771767916258239937853764790466842615514739512494270886534368562001571858036974124171753329332324367035432233275687281868587401677149076097985384679247143638283363260680243741488926065957572245977314044145613384890138256240782506039862364976760611009221125590767245402074051196515078463870551481340767381170930281210487210150102364728127413255395513652539039270272683355075295098899857972600609792227469647293388489302090361312436215420438740697978880530303184022412703444810610015863808365757290851336044143364136479479649361653695229896236359408162372645182041743692525576586489677579336239973730219757196947156035789120701507132267253066875575009238948001776641914092054413276477182787844177836489841253456835561800693109391575042375823820508631391633256317479472856271978159195060077988850347439926172870191134115340044598632775964313892515522805258787348427205815641001382135184381804173857215391521342189595626560511979216358953822981059278143407740422646788471068905500497232233704554766985", "y": "-0.063675881968942247220618786503505986431990387485066405336037248409726285802285566471834808891573289051753597128206238330473897910092859154563231534351601365455953798422577255913698880146985239575286702680273573687679763417788218191694064710083980152500872489082932388855445106850166713079900308965683768031803202683196714501614320111757890756877141577153769422816245425482360607440600430435587754945598940961517686296814054572484124580147039742607889496915274483781686699914050228957826506009411012813470029229377280074404292930362645148872145067944281718108069462940096840273568467567771365909974593419382941467019533926166321900496045613597536062380471642468376215679748187930794129905981054793913731910088539005815001802668336147603584256649777666387878383551049138676028741218750789927865544654620680146534505551706154311946652393483751468247497882089325572781676994778513464669601655095548697042793508016212451059949922707943582265284757724731122326318842328117114115867270597517137419268707197032850229631755197546418958306354548340239087847979331921178914335979114711852278476614259273782286969457023447154346584270604421894928665497716231657003848186055407356951090992012481513511100875144479945881024122906740226504686038121522627967231890549689555113776311724281716536920677223415661683666409372489614050431240113620641117975203488639439645796535508971911110011167288731698144215415271089019966742811866464236509355410984243260199054569397328033213740990037279707861293705464936213874078358566482299396214222803395206002746329147827476352110531780140497635085047386533248830417464043256716627676328490852941645118050704990166354490959990389576699283409945321237931218225968723192387916751683578675159441648320616810564794873218712892317770582225052021130351127740101700565723348167584434735415026029539451654607070943943275927316635953376486050428527030702136081497001371872063158634087584469603930485838410448294740645847185735429944390582778194566212673447734432030664862011181539722860728"}
i := {"point": {"x": "-0.71341899339154789169244894688313155572628613571234314295772950271044511328987656808928372729782758877242550668397806296162935555361185012700612349817453023759479372879753641581942954097621614255783043472818648988286132603558584337638049601998648213481985374112862311258929478995040963941367558928153325599739628633296369600087858459380564059483429229499741621019416404042888761193086592968935571714923181630838136857517841705106345354784845003618996187657858129869638151558048752095280135268871780850008198086534876317866203061796279417204405107692046467059532126215041378059168558141332072309027928858023452014544816888260287657845650521860940266215842532592991315448098764554766912748417922905016843792102594985736456268457723244494240166339281134546271156097383037729440544641148860623051908037188807495100601833310976409609672146697840557647400141980281830956767843690837809018920432622526631658859601121722455160266684366604919302320174774676961505143831804439704189264882409408369176494625175831382383434509387953780076784280145551860168965385926017972272753922363630632451350003937881147916783895295546334914334918064573117357350900842194105542319389746080115439925872022318482992948022255274541559448500842390079277631471576455535462417519304905746888169506089222770438787326730767774364286555357031965267995965526355026979330604460564402135190203376691406698248394112965643189016019382448195462483694400782227474398270756102102500320448496532636014139898906027972522887153707373051904916826827471032140874666789745297646589947721031807195938333088165738171609313644262951339080533773753341109895892976855958550369909823111340766241372111040035069656736445348733689506740044826500892943282162804725982202373957520612640712983284669614702274153187167438576045579448732897399704253757942195146037117909694848293429079952111056219508377325434786043006479889709698359174268437938790669627022442050307629930860240817059182974340533608779159405631748344105592191797885101407180114542662865733389105", "y": "0.63018664130806678416473147443282070914539606192262808251071363296791694672990568702850041768093529312634348922099515098700833768729698666964291177529579178585236293379670814630063047379717630635005671682044555112145016112821760823101334380428054468892096441835523984617872557405394016418519221771995375105709855065283387175799571240953171406442010071940980330423142999698286218681503923959154117440019733162136135129109566849548053311370546661712133032368177106601674962802275143739409130312721577527921377591120725429451852120127190925258344506364245085139787559015794950976956034178715414296447252089881383017581087824836028483675766559398456837183201559498005522742350250286058284179177345888498614199293644168153337343477215305397273168308335203842101707535679662339247751319440056863374783996018530697400910531424580307189845051222760678787912686740218098886592922547992608454223434474409109748674731768690623500881631147708471162267338292968495992245609690225731427366396390892754232540980775649430920225580839614611273524698194565996096884139596678013630961517039193424328658388344009711585068488836407351013714807896547952784009239186566616676165020572824669145145378839489913640712045945792109189672318193556318488751456618159054137729557568731514298893022554760362948127214146273951316348778456878121099560076473468304184765962022264948696820529612413811336482762671205692513287505432951758087809084426684330832591945577648265468411194703868311401837618337330060653945629823586344126258434708773592780986715248972121711986892419857429077672819525107708042862693971964512645949286396765705330038859363120967489889742592019508713985025138052484097894825728965927801493797960813800192255456524576066892425293660225108007144270895059377987062047782899936743043332127670646152352473827067902361925583480666109611960337383253551082268257489485508855197178467831401247565400746697974308169199307045572026054217054867257819733256473520647800414815367639708539677160543717325348045824450539464998716"}, "direction": {"x": "1.4707971898462339577912543900232941430633702425333869351509266097628800737292273645669057482372514857081356165339765801667824781009523200435307904805736256255941531265785533429073151087477793700892082460836365977265073985325731290866606443879233222636290447995939925603583816835001870135666381686586831433481610199845923481577841850321035820507423825050582224526135056112317867248167585905527142946254303160195089079486252246411490652640635420785795051518124740204893892167504957175402416662654046669451085590972007258652717593729189055636019012653503385950996940176635521818704742014203460765943889294086136983155641490947078747569216567272449104782323030638989351987212456017967938993558796832930249571718021382643715073340600560057726851988835318843481093614302371706583158783717185685348492673143844693030169564640671820007655857984972404697678460209370721708646205732732262747221515839618548094115359588670227128717528472644255136400586253581923824885350325597822262994563952826131586536558962908504285470732968646116542213130959247638515569608812677786480438551228539894790135090390331827851284744921812703525026130449872896843469251918945074962737732558237061371777577557173711357452891022637521945578429445107187767040219482760761481221260747809671603988166041533917619559947279806830741739985064867611991167310966849377860812992188145296839358505808284888742752490044585639010499295870609780710828839261303526335761467116608054073711262182215647016300773472686066387801005712793519767006304279246536788336539559573259763482536865383189956642560268418144499678819479914962924891860983387879613056698652445996601274944427927119941290613221999430818223926901945540191530636188881405348951766258454037226880769369297047537374887298723585025501424497509498984549925857305036807519712079289030176980318277169180136377789882909489286586981741689843938610386478123828698053127026053372383751733661250381023774876264932724452375881687719978539172421911265872142277045509251036217843250172577355026253", "y": "-1.2397724459931415822297892576960166954530631452627335448293201590438352967086386132545992410518095384786756880359060486632330873171785350292037895267580158380205585659887339903183280254846595576573772581858135827034555161046360479901935573569514195837510439826778830123697729979565975933377636054459736133096490970433133199175798415387551064683951251784019330026890793361514355769413232118163689468937785567161778901255257563694556476609427666382606108769493937725802581519507393979266999604374815270165802641318561420883842355416544682786295013050325535518324998581057520926605946267439691152961899433760783779004646780165669717535257951574322614645503937052747409105531057210741641522296690119488498036239513417854254522994392304095669483804185029884822836889125352424795120126163282079441387520403828290969118966720531052286734669908409982429994057853333591765436126211759095885851346189791216472827574094447314767309878408405778492292535421690207434416528117289970397597451368563500267242244788921989539559223444285559244653734819084928012062783348567077974706590121309250768354866286264063241558996035127898012908970259785859950990931106436175781522487078148707298432318823134236773908919692149480785138416557488232474034680254648647669883686446973483449042554817705348618457176308685345986677041181598199528936855376550447180783664809057191229201389952056925562903134351503801011698315898486439477493693106619772305175343685566668722894428848213807049093194502810303278480811454250410444439342398063033709119069667644204360491836662257944316963140166943705411994326606512654716496419213253961285586277360840099331320819434551242666848215622483291035991516263640845586601202544131966112080081003603213514664570778496031057435682757537179118400029130919242226788127513190387790866834895173350906174847915909545324642822164535571543659030659781318448832595584459866561196992836212752662876415462227097012133325917966394915043202467234090629670298283478300612112459657572136565051526883867611532028"}}
h := {"point": {"x": "-0.28327738854235284815530349078471772372722625732421875", "y": "-1.004073531516972206389937127823941409587860107421875"}, "direction": {"x": "-0.92499155832118395981211733669624663889408111572265625", "y": "0.01841623350009979898089795824489556252956390380859375"}}
F := {"x": "1.2618724631568388036717735745582629907769921291922310676936768398117543893333645574891930005692385646213682154025118556321119588213304615312343668178098635962365456830790147648552648957735243636180308735475141997445389409913592586109675644879324716628763629187530919897398019852124500625426617060306019002018126346961318216694750396292507953530059292280829970380567764104632811780413879819751297634697669088966864285528466741305319059243905466759185879371833220660622914767041371133913606239550741985635888009938853149688100943316203416732719490733342758932340368459354082838652096262317958135808895861384477544368129947304206559755939912577785772257458376678997685861427527997080941426040428793537559855311740299395614301502443727789396401136889121830671536547955716804872622063348763291698709942508977383670202364607549927729954814199625894208972850878838133597300332149690920506205145819415827550472582773222110883520494289959428311435336870110924414931896950047574593782715749928595664347656961409422082136213651117725648819985877415653359177579200364702834957219779222593797620914510972927217533963785928560124501615491227968245424250522111187002777446205523758970438755606352924061051461616727173191133706531141296557682946731253948014547500307209095240952405834720010366270445221201337705204343623599711497765677501414856254509029115767272940608751622338820186299909652632309063468302994043517828229394834062228641840967193697148707895983082372991930098842001957526110566282537514228338819902734247437073790572478896163045608009996006783116531942943652045183099714704587421443308374705225128148213221419053734214972699956480648687393297707776275837653427229197783114360240519227826098152197202872122129447771942245356964265146489164260611528868377829848621986712396941331347889910697909638701027381400670366727621530826474318552472683375503048541853052719594677421154015942316672853956831515108676395265567005608722820471137716996678357210330888697233692533031518087144397425215832149094647849", "y": "-1.0348368830368313687625215914575559203525914694511771146774999656947449340172765476501374022828069606513377632395750711235278212651903516875221603109860819496861953204338184452213884721769809620903905542455070050740502839906453840939462513361276205627640519859881383053475640684897171658264289796681889180813284756481013925179235541660241011176246778700709479932162677682988953689156539095514681043217249667273442891957792794168435759986937879765695784924655083600362006557201214309957811559221827952207207435131117354714871421510666174704379798479133494957883713920924749093301166856060257902083254566599243802858830403834401698618565672821599477339130001561774029575818816586367832765809924744880633907973159557203628518778411372399691018873427256640217979169379294594008697328234978456468931847764860714277349475299363415850700633148899111481274067523428773569642546945504528412422458065554060817430927693213802010874708997242602965314374779714778229514246850145685962123647971613674854032647234455577774211019410869888256648384175893411446645916968210200357288201472620800021615978327755578902784021291615042768294807037942739959924635906512971206456252563520163792569172747625495443937760648786525767859455008867343125271525558523916474603977464370826672822849747373655829512686422439568556213120836807247923779768952493561345386430451712260338338610649836141380118807823924383341705626802157976592111587811063995641608801180604446548081883863287053378928855269297604793147691207292889602739562359098993458959261895660813092743286779312696255682679291901627100003992746742513993661088807712375380783616543199950477257679081838518113691778466551202737442572390630846961561882544620972464156061952231774350565132541594194956828959195440452657739463330428633199761319336882823619318656355544339606273339842079878716827011280776986154474549107745239012452578919796677830833676947555478910651669359914023665220695846728607166031227153566592097689693966761529306027230773245766827985480735007556613966"}
d := {"center": {"x": "0.037290832019151788225571111097090786756831034792366335896131215193308091405598886949025636619480246224790033523699131623451621248467251015677134462197711899731458914156032089547451706853512257845466652402274462459509072802172032873032375368193176513404543176911722421720688114937434213565724519219177242463239967093003845060942476586947761222211552408137764313486397630234033665559140831400687062110268139749045007563643708137942744036859599718342291457323527177115535964250933955707389905103273307852757871272167762631868581636499766370271291704049019756010177811744899463085847908444948474032238299747938924003823262811831865422830169745016539718519730752753241174116386177177167835242043850895170965725170358131300303012340627826123419958759318110977863823844662338441184371068488700452665576409980589134393074250864202766234494478750670420374560442633818227003412623005852055921782849249330606596811757963696527126099826996365812584126589355404649381845215317149069390926688751432867931040394657231710533080446158120525535968026469249398105010393696172736939429982867275320463978386259924087112681875343790334609116714506068257966587130344337876293797259691589331518230093798804950474973625168336156427260900813648868042339621166576006653366943800531218786737639580744022127654256390315111208705966009356788916716083068624026339154941290189838493572827170111133244626059848080156320773590235342169080742862473527545801255539645902149446639143126790952604891173125569462481270798820447604290993281790374866588893956907232945921065243138553752107224557111590259385945437360121602871112896010684665502057401245252227180599434577962047538440827234297949186630622892502914556043378935816388307967907131116670347381114567753121528270119144790502484040044015401761776218529118146030001754993670815214689351065873868410104585811954584655752973786884586524975335906639472452036157509381925131223231711209867585324271501036350722698830749579070082530747565676123858048754936705209753307583561046742498199904", "y": "-0.48341271982787350080850956036229001987916860989037618224799403597988265064521245206439712316383993210763064963163168055229723497585272472589562120311279298884664526560741825615350065436865898877448520460098251853303557748706618787683508661559181177478832144336981659531073489629661196120908766586602763804180683000560862585538749659036192632827256189008849953900811454651692334332706036019538520450293902791306907570394027279999576109014808819788002618516865031810986734368601280348174411184776601580378210375350420038054052912385354114220011998462942904863544050172892409766120554927424160582922931209588231515041974009286146956777515330958998882134313547800023361953363063245972833139028716086005807122497127421571329611671997466708983436458030797547621888336411827703048778820571587136534926199463955874199672143944605720786865031367681354637726375377728392936586565498471728375042589921825595096651204990115017855186577367336620329419726114787257460931618460225260326456126766924849603939632827792760766392924992406074767158413223271570030208023208630692223363394457466491902799299145375078390569060870812174121836135803994538551774709790027531740924664347959489527292976367178291512699009161562131239717757796773964013051861577415600311112688096691744583386974839623586945869034085312228135332448671456248516280904502939329123346176764407800827629805648389741296659401762567838526341212888519009494279782792219035016495971224860308594109745553399057332841813458235415740345548901749427027938745791416779209520659233928051556580973790533061305518645300495637697598582600386970253282989459609805526648882674393132500291409190621289951815106967662947308004194541664192309011016559237148179508392435583895791431444926744423985071114444986281528972451378366033165824424051462530044995396619830501017143487404360165354650277920513659820372588330048545927609186090515279906888438315867869747006074970721062311331419538029292481939803113457864996333920816968949842635981385394525213673744133018717613096"}, "radius_squared": "1.8036687790905375448254979292026433942922194728224937733119960801842420535302064031728835178124002743035693558107366513354356468804936137964147791223878270957151721311381917197708826060606980032749832023934058589167768854277550837820532131262751118491808687566892436371948739106869598515988867295267304722058053223193371763284106513653570580287605635601972216161012091575844194825361145934381361560475114774160313265830108696461847751740423086920019350005984144155929094652242391399614590534811193679303467151996051213419845396131260751688737992871128789258859065380164808707966258564513848980966697032645925966187101517808540110446905535027121879979040879707760211643694615920474275655233171247841342632390310219222369170882674162332777810901950149922287304520932775054780819576935420867074500021737279687502721486980564013520811381390469624607422161396760577103541865901020930458154895078567784879537194552571174607113316852971008574016985528775239707137860198660099626884096926889458516729163814622543500290603783826152618591751727979622957447302771965204188401030726590718892002534357033945816685854294744913531923807318364795668297213983613658927747922795319805008385342612523472386836123560727473992127117198328504882695617154295290760284959558711992796553597107704218700289846150681369191500815097093057411960821721210897112744399148900244459886323172258743920841401962879914769366944795755654620600538965036456459844614259774382631216072418164912464112135215407431196089986859749200701137405962300909919469396330258003372410935671729993529835487186790261880904939867215111828186848272855271848998674621513499004213233323772928552166269620405904994902441284020423880980768028833242693146462522710022366217171047292821882741131656633424470617631850061441656076247172268400118958512854247679362266790975432246862463738454140710387942817534256614358097670899701099473105916722344303532645987123577992023142145106133129202853867168227029528210190086900521420242031070358800620659177666969214492298"}
H := {"x": "-0.24110616375687333272130268331022713867831049491915985272886475135522255664493828404464186364891379438621275334198903148081467777680592506350306174908726511879739686439876820790971477048810807127891521736409324494143066301779292168819024800999324106740992687056431155629464739497520481970683779464076662799869814316648184800043929229690282029741714614749870810509708202021444380596543296484467785857461590815419068428758920852553172677392422501809498093828929064934819075779024376047640067634435890425004099043267438158933101530898139708602202553846023233529766063107520689029584279070666036154513964429011726007272408444130143828922825260930470133107921266296495657724049382277383456374208961452508421896051297492868228134228861622247120083169640567273135578048691518864720272320574430311525954018594403747550300916655488204804836073348920278823700070990140915478383921845418904509460216311263315829429800560861227580133342183302459651160087387338480752571915902219852094632441204704184588247312587915691191717254693976890038392140072775930084482692963008986136376961181815316225675001968940573958391947647773167457167459032286558678675450421097052771159694873040057719962936011159241496474011127637270779724250421195039638815735788227767731208759652452873444084753044611385219393663365383887182143277678515982633997982763177513489665302230282201067595101688345703349124197056482821594508009691224097731241847200391113737199135378051051250160224248266318007069949453013986261443576853686525952458413413735516070437333394872648823294973860515903597969166544082869085804656822131475669540266886876670554947946488427979275184954911555670383120686055520017534828368222674366844753370022413250446471641081402362991101186978760306320356491642334807351137076593583719288022789724366448699852126878971097573018558954847424146714539976055528109754188662717393021503239944854849179587134218969395334813511221025153814965430120408529591487170266804389579702815874172052796095898942550703590057271331432866694552", "y": "-0.070439949065563501760695287892498879831865872847279708744643183516041526635047156485749791159532353436828255389502424506495831156351506665178544112352104107073818533101645926849684763101411846824971641589777224439274919435891195884493328097859727655539517790822380076910637212973029917907403891140023124471450724673583064121002143795234142967789949640295098347884285001508568906592480380204229412799901334189319324354452165752259733443147266691439334838159114466991625185988624281302954348436392112360393112044396372852740739399364045373708277468178774574301062204921025245115219829106422928517763739550593084912094560875819857581621167203007715814083992202509972386288248748569708579104113270557506929003531779159233313282613923473013634158458323980789491462321601688303761243402799715683126080019907346512995447342877098464050774743886196606060436566298909505567035387260036957728882827627954451256626341156546882495591844261457644188663308535157520038771951548871342863168018045536228837295096121752845398872095801926943632376509027170019515579302016609931845192414804032878356708058279951442074657555817963244931425960517260236079953804067166916619174897135876654274273105802550431796439770271039454051638409032218407556242716909204729311352212156342428505534887226198185259363929268630243418256107715609394502199617632658479076170189888675256515897351937930943317586186643971537433562472835241209560954577866578345837040272111758672657944026480658442990811908313349696730271850882068279368707826456132036095066423755139391440065537900712854611635902374461459785686530140177436770253568016171473349805703184395162550551287039902456430074874309737579510525871355170360992531010195930999038722717377119665537873531698874459964278645524703110064689761085500316284783339361646769238237630864660488190372082596669451940198313083732244588658712552572455724014107660842993762172996266510128459154003464772139869728914725663710901333717632396760997925923161801457301614197281413373259770877747302675006418"}
G := {"x": "0.037290832019151788225571111097090786756831034792366335896131215193308091405598886949025636619480246224790033523699131623451621248467251015677134462197711899731458914156032089547451706853512257845466652402274462459509072802172032873032375368193176513404543176911722421720688114937434213565724519219177242463239967093003845060942476586947761222211552408137764313486397630234033665559140831400687062110268139749045007563643708137942744036859599718342291457323527177115535964250933955707389905103273307852757871272167762631868581636499766370271291704049019756010177811744899463085847908444948474032238299747938924003823262811831865422830169745016539718519730752753241174116386177177167835242043850895170965725170358131300303012340627826123419958759318110977863823844662338441184371068488700452665576409980589134393074250864202766234494478750670420374560442633818227003412623005852055921782849249330606596811757963696527126099826996365812584126589355404649381845215317149069390926688751432867931040394657231710533080446158120525535968026469249398105010393696172736939429982867275320463978386259924087112681875343790334609116714506068257966587130344337876293797259691589331518230093798804950474973625168336156427260900813648868042339621166576006653366943800531218786737639580744022127654256390315111208705966009356788916716083068624026339154941290189838493572827170111133244626059848080156320773590235342169080742862473527545801255539645902149446639143126790952604891173125569462481270798820447604290993281790374866588893956907232945921065243138553752107224557111590259385945437360121602871112896010684665502057401245252227180599434577962047538440827234297949186630622892502914556043378935816388307967907131116670347381114567753121528270119144790502484040044015401761776218529118146030001754993670815214689351065873868410104585811954584655752973786884586524975335906639472452036157509381925131223231711209867585324271501036350722698830749579070082530747565676123858048754936705209753307583561046742498199904", "y": "-0.48341271982787350080850956036229001987916860989037618224799403597988265064521245206439712316383993210763064963163168055229723497585272472589562120311279298884664526560741825615350065436865898877448520460098251853303557748706618787683508661559181177478832144336981659531073489629661196120908766586602763804180683000560862585538749659036192632827256189008849953900811454651692334332706036019538520450293902791306907570394027279999576109014808819788002618516865031810986734368601280348174411184776601580378210375350420038054052912385354114220011998462942904863544050172892409766120554927424160582922931209588231515041974009286146956777515330958998882134313547800023361953363063245972833139028716086005807122497127421571329611671997466708983436458030797547621888336411827703048778820571587136534926199463955874199672143944605720786865031367681354637726375377728392936586565498471728375042589921825595096651204990115017855186577367336620329419726114787257460931618460225260326456126766924849603939632827792760766392924992406074767158413223271570030208023208630692223363394457466491902799299145375078390569060870812174121836135803994538551774709790027531740924664347959489527292976367178291512699009161562131239717757796773964013051861577415600311112688096691744583386974839623586945869034085312228135332448671456248516280904502939329123346176764407800827629805648389741296659401762567838526341212888519009494279782792219035016495971224860308594109745553399057332841813458235415740345548901749427027938745791416779209520659233928051556580973790533061305518645300495637697598582600386970253282989459609805526648882674393132500291409190621289951815106967662947308004194541664192309011016559237148179508392435583895791431444926744423985071114444986281528972451378366033165824424051462530044995396619830501017143487404360165354650277920513659820372588330048545927609186090515279906888438315867869747006074970721062311331419538029292481939803113457864996333920816968949842635981385394525213673744133018717613096"}

Need to prove:
collinear(B, G, H)

Proof:
By line_definition on F, C, h we get h == Line(C, F)
By line_definition on E, F, i we get i == Line(E, F)
By line_definition on F, A, h we get h == Line(A, F)
By line_definition on C, D, g we get g == Line(C, D)
By circle_definition on B, A, D, c we get c == Circle(A, B, D)
By circle_definition on B, D, C, c we get c == Circle(B, C, D)
By line_intersection_definition on C, g, h we get C == line_intersection(g, h)
By line_intersection_definition on A, h, f we get A == line_intersection(f, h)
By circle_definition on D, C, A, c we get c == Circle(A, C, D)
By line_unique_intersection_v1 on h, f, A, B we get B not in h
By line_unique_intersection_v1 on f, h, A, C we get C not in f
By line_unique_intersection_v1 on f, h, A, F we get F not in f
By line_unique_intersection_v1 on h, i, F, E we get E not in h
By line_unique_intersection_v1 on i, h, F, C we get C not in i
By line_unique_intersection_v1 on i, h, F, A we get A not in i
By line_unique_intersection_v1 on h, g, C, D we get D not in h
By line_unique_intersection_v1 on g, h, C, A we get A not in g
By line_unique_intersection_v1 on g, h, C, F we get F not in g
By between_implies_orientation on G, E, H, B we get orientation(B, G, H) == orientation(E, H, G) mod 360, orientation(B, G, E) == orientation(E, H, G) mod 360
By between_implies_orientation on G, B, H, E we get orientation(B, H, G) == orientation(E, G, H) mod 360, orientation(B, E, G) == orientation(B, H, G) mod 360
By between_imply_not_between on B, H, E we get collinear_and_not_between(E, B, H)
By between_imply_not_between on E, H, B we get collinear_and_not_between(B, E, H)
By circle_radius_v0_r on C, c we get radius(c) == distance(C, center(c))
By parallel_line_definition on A, f, g we get f == parallel_line(A, g)
By parallel_line_definition on B, f, g we get f == parallel_line(B, g)
By circle_radius_v0_r on C, d we get radius(d) == distance(C, center(d))
By parallel_line_definition on D, g, f we get g == parallel_line(D, f)
By circle_radius_v0_r on D, c we get radius(c) == distance(D, center(c))
By circle_radius_v0_r on E, d we get radius(d) == distance(E, center(d))
By circle_radius_v0_r on A, c we get radius(c) == distance(A, center(c))
By circle_radius_v0_r on B, c we get radius(c) == distance(B, center(c))
By circle_radius_v0_r on F, d we get radius(d) == distance(F, center(d))
By center_not_on_circle on d we get center(d) not in d
By center_not_on_circle on c we get center(c) not in c
By different_points_v1 on B, A we get 0 != distance(A, B)
By different_points_v1 on C, A we get 0 != distance(A, C)
By in_imply_collinear on F, A, C we get collinear(A, C, F)
By in_imply_concyclic on A, B, C, D we get concyclic(A, B, C, D)
By angle_bisector_draw_angle_v0 on B, E, D we get exists(Line(B, E), Line(D, E))
By not_in_line_equivalent_to_not_collinear_v0_r on E, B, A we get E not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on H, C, A we get H not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on B, C, A we get B not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on E, C, A we get E not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on G, A, C we get G not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on G, B, A we get G not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on D, A, B we get D not in Line(A, B)
By angle_bisector_draw_angle_v0 on D, E, B we get exists(Line(B, E), Line(D, E))
By not_in_line_equivalent_to_not_collinear_v0_r on D, A, C we get D not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on C, A, B we get C not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on H, B, A we get H not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on F, A, B we get F not in Line(A, B)
By power_of_a_point_in_circle on A, c we get 0 == power_of_a_point(A, c)
By power_of_a_point_on_circle on E, d we get 0 == power_of_a_point(E, d)
By power_of_a_point_on_circle on C, d we get 0 == power_of_a_point(C, d)
By power_of_a_point_in_circle on F, d we get 0 == power_of_a_point(F, d)
By power_of_a_point_in_circle on C, c we get 0 == power_of_a_point(C, c)
By power_of_a_point_on_circle on B, c we get 0 == power_of_a_point(B, c)
By power_of_a_point_in_circle on D, c we get 0 == power_of_a_point(D, c)
By angles_on_chord_v2 on B, C, A, D, c we get angle(B, A, C) == angle(B, D, C) + 180 mod 360
By angles_on_chord_v0 on D, C, B, A, c we get angle(D, A, C) == angle(D, B, C) mod 360
By angles_on_chord_v3 on C, B, A, D, c we get angle(C, A, B) == angle(C, D, B) + 180 mod 360
By angles_on_chord_v1 on D, B, A, C, c we get angle(D, A, B) == angle(D, C, B) mod 360
By angles_on_chord_v1 on A, C, B, D, c we get angle(A, B, C) == angle(A, D, C) mod 360
By angles_on_chord_v2 on A, D, C, B, c we get angle(A, C, D) == angle(A, B, D) + 180 mod 360
By angles_on_chord_v1 on C, D, A, B, c we get angle(C, A, D) == angle(C, B, D) mod 360
By angle_to_center on A, C, B, c we get 2 * angle(A, C, B) == angle(A, center(c), B) mod 360
By angle_to_center on C, F, E, d we get 2 * angle(C, F, E) == angle(C, center(d), E) mod 360
By angles_on_chord_v1 on B, A, D, C, c we get angle(B, C, A) == angle(B, D, A) mod 360
By angles_on_chord_v0 on B, D, C, A, c we get angle(B, A, D) == angle(B, C, D) mod 360
By angle_to_center on D, A, C, c we get 2 * angle(D, A, C) == angle(D, center(c), C) mod 360
By angle_to_center on C, B, A, c we get 2 * angle(C, B, A) == angle(C, center(c), A) mod 360
By angles_on_chord_v3 on A, D, B, C, c we get angle(A, B, D) == angle(A, C, D) + 180 mod 360
By angle_to_center on B, D, C, c we get 2 * angle(B, D, C) == angle(B, center(c), C) mod 360
By angles_on_chord_v3 on D, A, C, B, c we get angle(D, C, A) == angle(D, B, A) + 180 mod 360
By angles_on_chord_v0 on A, B, D, C, c we get angle(A, C, B) == angle(A, D, B) mod 360
By angles_on_chord_v2 on D, A, B, C, c we get angle(D, B, A) == angle(D, C, A) + 180 mod 360
By angle_to_center on D, C, A, c we get 2 * angle(D, C, A) == angle(D, center(c), A) mod 360
By angles_on_chord_v0 on C, A, B, D, c we get angle(C, B, A) == angle(C, D, A) mod 360
By angle_to_center on C, A, D, c we get 2 * angle(C, A, D) == angle(C, center(c), D) mod 360
By angles_on_chord_v3 on B, C, D, A, c we get angle(B, D, C) == angle(B, A, C) + 180 mod 360
By angle_to_center on C, D, B, c we get 2 * angle(C, D, B) == angle(C, center(c), B) mod 360
By angle_to_center on B, A, C, c we get 2 * angle(B, A, C) == angle(B, center(c), C) mod 360
By angle_to_center on A, C, D, c we get 2 * angle(A, C, D) == angle(A, center(c), D) mod 360
By angle_to_center on A, D, B, c we get 2 * angle(A, D, B) == angle(A, center(c), B) mod 360
By angle_to_center on A, B, C, c we get 2 * angle(A, B, C) == angle(A, center(c), C) mod 360
By angles_on_chord_v2 on C, B, D, A, c we get angle(C, D, B) == angle(C, A, B) + 180 mod 360
By angle_to_center on C, A, B, c we get 2 * angle(C, A, B) == angle(C, center(c), B) mod 360
By angle_to_center on B, D, A, c we get 2 * angle(B, D, A) == angle(B, center(c), A) mod 360
By angle_to_center on D, C, B, c we get 2 * angle(D, C, B) == angle(D, center(c), B) mod 360
By angle_to_center on F, E, C, d we get 2 * angle(F, E, C) == angle(F, center(d), C) mod 360
By angle_to_center on E, C, F, d we get 2 * angle(E, C, F) == angle(E, center(d), F) mod 360
By angle_to_center on C, B, D, c we get 2 * angle(C, B, D) == angle(C, center(c), D) mod 360
By angle_to_center on B, C, D, c we get 2 * angle(B, C, D) == angle(B, center(c), D) mod 360
By angle_to_center on C, E, F, d we get 2 * angle(C, E, F) == angle(C, center(d), F) mod 360
By angle_to_center on D, A, B, c we get 2 * angle(D, A, B) == angle(D, center(c), B) mod 360
By angle_to_center on C, D, A, c we get 2 * angle(C, D, A) == angle(C, center(c), A) mod 360
By angle_to_center on F, C, E, d we get 2 * angle(F, C, E) == angle(F, center(d), E) mod 360
By angle_to_center on B, A, D, c we get 2 * angle(B, A, D) == angle(B, center(c), D) mod 360
By angle_to_center on E, F, C, d we get 2 * angle(E, F, C) == angle(E, center(d), C) mod 360
By angle_to_center on D, B, C, c we get 2 * angle(D, B, C) == angle(D, center(c), C) mod 360
By angle_to_center on A, D, C, c we get 2 * angle(A, D, C) == angle(A, center(c), C) mod 360
By angle_to_center on A, B, D, c we get 2 * angle(A, B, D) == angle(A, center(c), D) mod 360
By angle_to_center on B, C, A, c we get 2 * angle(B, C, A) == angle(B, center(c), A) mod 360
By angle_to_center on D, B, A, c we get 2 * angle(D, B, A) == angle(D, center(c), A) mod 360
By same_angle_v0 on B, E, H, A we get angle(E, B, A) == angle(H, B, A) mod 360
By collinear_definition on E, B, H we get B in Line(E, H), H in Line(B, E), Line(B, E) == Line(E, H), 0 == 2 * angle(B, E, H) mod 360
By collinear_definition on H, E, B we get E in Line(B, H), B in Line(E, H), Line(B, H) == Line(E, H), 0 == 2 * angle(E, H, B) mod 360
By log_of_2_times_distance on B, E, H, E we get log(distance(B, E)) == 0.6931471805599453 + log(distance(E, H))
By log_of_2_times_distance on E, B, B, H we get log(distance(B, E)) == 0.6931471805599453 + log(distance(B, H))
By collinear_definition on H, B, E we get B in Line(E, H), E in Line(B, H), Line(B, H) == Line(E, H), 0 == 2 * angle(B, H, E) mod 360
By collinear_definition on B, H, E we get H in Line(B, E), E in Line(B, H), Line(B, E) == Line(B, H), 0 == 2 * angle(H, B, E) mod 360
By collinear_definition on E, H, B we get H in Line(B, E), B in Line(E, H), Line(B, E) == Line(E, H), 0 == 2 * angle(H, E, B) mod 360
By collinear_definition on B, E, H we get E in Line(B, H), H in Line(B, E), Line(B, E) == Line(B, H), 0 == 2 * angle(E, B, H) mod 360
By isosceles_triangle_properties on H, B, E we get distance(B, H) == distance(E, H), angle(B, E, H) == angle(H, B, E) mod 360
By isosceles_triangle_properties on H, E, B we get distance(B, H) == distance(E, H), angle(E, B, H) == angle(H, E, B) mod 360
By between_implies_angles on E, H, B we get 180 == angle(E, H, B) mod 360, 0 == angle(H, B, E) mod 360, 0 == angle(B, E, H) mod 360
By between_implies_angles on B, H, E we get 180 == angle(B, H, E) mod 360, 0 == angle(H, E, B) mod 360, 0 == angle(E, B, H) mod 360
By angles_on_equal_chords_v1 on D, C, B, A, D, C, c we get angle(A, D, C) == angle(D, C, B) mod 360
By angles_on_equal_chords_v0 on B, C, D, C, D, A, c we get angle(B, C, D) == angle(C, D, A) mod 360
By angles_on_equal_chords_v0 on C, B, A, B, A, D, c we get angle(B, A, D) == angle(C, B, A) mod 360
By angles_on_equal_chords_v0 on C, D, A, B, A, D, c we get angle(B, A, D) == angle(C, D, A) mod 360
By angles_on_equal_chords_v1 on A, D, C, D, A, B, c we get angle(A, D, C) == angle(D, A, B) mod 360
By angles_on_equal_chords_v3 on B, D, C, D, B, A, c we get angle(B, D, C) == angle(D, B, A) + 180 mod 360
By angles_on_equal_chords_v0 on D, B, A, B, A, C, c we get angle(B, A, C) == angle(D, B, A) mod 360
By angles_on_equal_chords_v1 on D, C, A, B, D, C, c we get angle(B, D, C) == angle(D, C, A) mod 360
By angles_on_equal_chords_v0 on B, C, D, C, B, A, c we get angle(B, C, D) == angle(C, B, A) mod 360
By angles_on_equal_chords_v1 on C, A, B, A, B, D, c we get angle(A, B, D) == angle(C, A, B) mod 360
By angles_on_equal_chords_v2 on C, D, B, A, B, D, c we get angle(C, D, B) == angle(A, B, D) + 180 mod 360
By angles_on_equal_chords_v2 on A, C, D, C, A, B, c we get angle(A, C, D) == angle(C, A, B) + 180 mod 360
By angles_on_equal_chords_v1 on A, B, C, D, C, B, c we get angle(A, B, C) == angle(D, C, B) mod 360
By angles_on_equal_chords_v0 on C, D, B, A, C, D, c we get angle(A, C, D) == angle(C, D, B) mod 360
By angles_on_equal_chords_v1 on A, B, C, D, A, B, c we get angle(A, B, C) == angle(D, A, B) mod 360
By angles_on_equal_chords_v2 on B, A, C, D, C, A, c we get angle(B, A, C) == angle(D, C, A) + 180 mod 360
By angles_on_equal_chords_v3 on A, B, D, C, D, B, c we get angle(A, B, D) == angle(C, D, B) + 180 mod 360
By angles_on_equal_chords_v3 on D, C, A, B, A, C, c we get angle(D, C, A) == angle(B, A, C) + 180 mod 360
By angles_on_equal_chords_v3 on C, A, B, A, C, D, c we get angle(C, A, B) == angle(A, C, D) + 180 mod 360
By angles_on_equal_chords_v2 on D, B, A, B, D, C, c we get angle(D, B, A) == angle(B, D, C) + 180 mod 360
By same_angle_v0 on E, B, H, D we get angle(B, E, D) == angle(H, E, D) mod 360
By same_angle_v0 on C, A, F, B we get angle(A, C, B) == angle(F, C, B) mod 360
By same_angle_v0 on B, H, E, C we get angle(E, B, C) == angle(H, B, C) mod 360
By same_angle_v1 on E, H, B, A we get angle(B, E, A) == angle(H, E, A) mod 360
By same_angle_v0 on C, A, F, D we get angle(A, C, D) == angle(F, C, D) mod 360
By same_angle_v0 on E, H, B, F we get angle(B, E, F) == angle(H, E, F) mod 360
By same_angle_v0 on C, F, A, E we get angle(A, C, E) == angle(F, C, E) mod 360
By same_angle_v1 on E, H, B, C we get angle(B, E, C) == angle(H, E, C) mod 360
By same_angle_v1 on B, H, E, D we get angle(E, B, D) == angle(H, B, D) mod 360
By different_points_v1 on C, D we get 0 != distance(C, D)
By different_points_v1 on C, G we get 0 != distance(C, G)
By different_points_v1 on G, F we get 0 != distance(F, G)
By different_points_v1 on D, B we get 0 != distance(B, D)
By different_points_v1 on A, D we get 0 != distance(A, D)
By different_points_v1 on C, B we get 0 != distance(B, C)
By different_points_v1 on F, C we get 0 != distance(C, F)
By different_points_v1 on A, F we get 0 != distance(A, F)
By different_points_v1 on F, E we get 0 != distance(E, F)
By same_angle_v2 on A, F, C, B we get angle(F, A, B) == angle(C, A, B) + 180 mod 360
By same_angle_v0 on C, F, A, G we get angle(A, C, G) == angle(F, C, G) mod 360
By different_points_v1 on E, G we get 0 != distance(E, G)
By same_angle_v2 on A, F, C, D we get angle(F, A, D) == angle(C, A, D) + 180 mod 360
By same_angle_v1 on F, A, C, E we get angle(A, F, E) == angle(C, F, E) mod 360
By probably_between_and_collinear_implies_between on F, A, C we get between(C, A, F)
By internal_angle_bisector_definition_v0 on D, F, B, E we get angle(D, E, F) == angle(F, E, B) mod 360
By isosceles_trapezoids_are_concyclic_v1 on B, A, D, C we get isosceles_trapezoid(B, A, D, C)
By reverse_direction on H, E we get 180 == direction(H, E) - direction(E, H) mod 360
By isosceles_trapezoids_are_concyclic_v1 on C, D, A, B we get isosceles_trapezoid(A, B, C, D)
By reverse_direction on D, A we get 180 == direction(D, A) - direction(A, D) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on A, E, H we get A not in Line(E, H)
By not_in_line_equivalent_to_not_collinear_v0_r on G, E, C we get G not in Line(C, E)
By sas_anti_congruence on C, E, B, B, E, C we get anti_congruent_triangles(B, C, E, C, B, E)
By reverse_direction on A, C we get 180 == direction(A, C) - direction(C, A) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on C, D, B we get C not in Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on D, H, B we get D not in Line(B, H)
By not_in_line_equivalent_to_not_collinear_v0_r on A, E, D we get A not in Line(D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on E, F, G we get E not in Line(F, G)
By not_in_line_equivalent_to_not_collinear_v0_r on F, D, E we get F not in Line(D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on D, E, G we get D not in Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on F, E, C we get F not in Line(C, E)
By line_inequality on Line(C, E), f, C we get f != Line(C, E)
By isosceles_trapezoids_are_concyclic_v1 on C, D, B, A we get isosceles_trapezoid(B, A, C, D)
By reverse_direction on E, C we get 180 == direction(E, C) - direction(C, E) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on G, D, E we get G not in Line(D, E)
By isosceles_trapezoids_are_concyclic_v1 on D, C, A, B we get isosceles_trapezoid(A, B, D, C)
By collinear_definition on C, A, F we get A in Line(C, F), F in Line(A, C), Line(A, C) == Line(C, F), 0 == 2 * angle(A, C, F) mod 360
By reverse_direction on F, C we get 180 == direction(F, C) - direction(C, F) mod 360
By isosceles_trapezoids_are_concyclic_v1 on A, B, D, C we get isosceles_trapezoid(A, B, D, C)
By not_in_line_equivalent_to_not_collinear_v0_r on A, C, E we get A not in Line(C, E)
By internal_angle_bisector_definition_v0 on B, F, D, E we get angle(B, E, F) == angle(F, E, D) mod 360
By isosceles_triangle_properties on E, C, B we get distance(B, E) == distance(C, E), angle(C, B, E) == angle(E, C, B) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on E, C, D we get E not in Line(C, D)
By isosceles_trapezoids_are_concyclic_v1 on D, C, B, A we get isosceles_trapezoid(B, A, D, C)
By not_in_line_equivalent_to_not_collinear_v0_r on H, C, B we get H not in Line(B, C)
By reverse_direction on D, C we get 180 == direction(D, C) - direction(C, D) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on D, E, C we get D not in Line(C, E)
By not_in_line_equivalent_to_not_collinear_v0_r on C, D, E we get C not in Line(D, E)
By reverse_direction on E, F we get 180 == direction(E, F) - direction(F, E) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on A, B, D we get A not in Line(B, D)
By reverse_direction on C, B we get 180 == direction(C, B) - direction(B, C) mod 360
By isosceles_triangle_properties on E, B, C we get distance(B, E) == distance(C, E), angle(B, C, E) == angle(E, B, C) mod 360
By reverse_direction on B, C we get 180 == direction(B, C) - direction(C, B) mod 360
By reverse_direction on E, H we get 180 == direction(E, H) - direction(H, E) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on G, F, E we get G not in Line(E, F)
By not_in_line_equivalent_to_not_collinear_v0_r on A, H, B we get A not in Line(B, H)
By not_in_line_equivalent_to_not_collinear_v0_r on C, E, H we get C not in Line(E, H)
By isosceles_trapezoids_are_concyclic_v1 on B, A, C, D we get isosceles_trapezoid(B, A, C, D)
By reverse_direction on B, E we get 180 == direction(B, E) - direction(E, B) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on D, F, E we get D not in Line(E, F)
By reverse_direction on A, B we get 180 == direction(A, B) - direction(B, A) mod 360
By collinear_definition on C, F, A we get F in Line(A, C), A in Line(C, F), Line(A, C) == Line(C, F), 0 == 2 * angle(F, C, A) mod 360
By line_inequality on Line(D, E), f, D we get f != Line(D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on H, C, D we get H not in Line(C, D)
By not_in_line_equivalent_to_not_collinear_v0_r on A, G, F we get A not in Line(F, G)
By reverse_direction on C, A we get 180 == direction(C, A) - direction(A, C) mod 360
By reverse_direction on B, D we get 180 == direction(B, D) - direction(D, B) mod 360
By reverse_direction on C, E we get 180 == direction(C, E) - direction(E, C) mod 360
By isosceles_trapezoids_are_concyclic_v1 on A, B, C, D we get isosceles_trapezoid(A, B, C, D)
By reverse_direction on B, H we get 180 == direction(B, H) - direction(H, B) mod 360
By reverse_direction on C, D we get 180 == direction(C, D) - direction(D, C) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on E, A, D we get E not in Line(A, D)
By sas_anti_congruence on B, E, C, C, E, B we get anti_congruent_triangles(B, C, E, C, B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on H, F, E we get H not in Line(E, F)
By line_inequality on Line(E, G), f, G we get f != Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on C, G, E we get C not in Line(E, G)
By line_inequality on Line(A, E), i, A we get i != Line(A, E)
By reverse_direction on D, B we get 180 == direction(D, B) - direction(B, D) mod 360
By reverse_direction on H, B we get 180 == direction(H, B) - direction(B, H) mod 360
By reverse_direction on C, F we get 180 == direction(C, F) - direction(F, C) mod 360
By reverse_direction on B, A we get 180 == direction(B, A) - direction(A, B) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on C, H, B we get C not in Line(B, H)
By not_in_line_equivalent_to_not_collinear_v0_r on C, E, B we get C not in Line(B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on D, E, A we get D not in Line(A, E)
By line_inequality on Line(C, E), h, E we get h != Line(C, E)
By not_in_line_equivalent_to_not_collinear_v0_r on F, H, B we get F not in Line(B, H)
By reverse_direction on E, B we get 180 == direction(E, B) - direction(B, E) mod 360
By reverse_direction on A, D we get 180 == direction(A, D) - direction(D, A) mod 360
By reverse_direction on F, E we get 180 == direction(F, E) - direction(E, F) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on F, E, G we get F not in Line(E, G)
By line_inequality on Line(F, G), h, G we get h != Line(F, G)
By not_in_line_equivalent_to_not_collinear_v0_r on F, E, H we get F not in Line(E, H)
By line_inequality on Line(B, D), h, B we get h != Line(B, D)
By line_inequality on Line(C, E), i, C we get i != Line(C, E)
By line_inequality on Line(B, E), h, H we get h != Line(B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on F, C, B we get F not in Line(B, C)
By line_inequality on Line(A, D), f, D we get f != Line(A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on E, D, B we get E not in Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on A, E, G we get A not in Line(E, G)
By line_inequality on Line(A, D), h, D we get h != Line(A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on F, B, D we get F not in Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on D, F, G we get D not in Line(F, G)
By line_circle_intersection_has_at_most_two_points_0 on F, C, A, d we get A not in d
By line_inequality on Line(A, D), i, A we get i != Line(A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on E, C, B we get E not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on B, E, F we get B not in Line(E, F)
By not_in_line_equivalent_to_not_collinear_v0_r on G, A, E we get G not in Line(A, E)
By line_inequality on Line(A, E), f, E we get f != Line(A, E)
By not_in_line_equivalent_to_not_collinear_v0_r on H, G, C we get H not in Line(C, G)
By line_circle_intersection_has_at_most_two_points_0 on A, C, F, c we get F not in c
By not_in_line_equivalent_to_not_collinear_v0_r on C, D, A we get C not in Line(A, D)
By line_inequality on Line(A, E), h, E we get h != Line(A, E)
By line_inequality on Line(B, C), i, C we get i != Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on D, C, G we get D not in Line(C, G)
By not_in_line_equivalent_to_not_collinear_v0_r on H, B, D we get H not in Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on G, C, B we get G not in Line(B, C)
By line_inequality on Line(B, C), f, C we get f != Line(B, C)
By line_inequality on Line(D, E), h, D we get h != Line(D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on B, E, C we get B not in Line(C, E)
By not_in_line_equivalent_to_not_collinear_v0_r on D, E, B we get D not in Line(B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on B, C, G we get B not in Line(C, G)
By line_inequality on Line(B, C), h, B we get h != Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on C, A, E we get C not in Line(A, E)
By not_in_line_equivalent_to_not_collinear_v0_r on F, A, D we get F not in Line(A, D)
By line_inequality on Line(A, E), g, A we get g != Line(A, E)
By line_inequality on Line(C, G), i, C we get i != Line(C, G)
By line_inequality on Line(B, E), f, H we get f != Line(B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on H, G, F we get H not in Line(F, G)
By not_in_line_equivalent_to_not_collinear_v0_r on B, E, A we get B not in Line(A, E)
By not_in_line_equivalent_to_not_collinear_v0_r on B, C, D we get B not in Line(C, D)
By not_in_line_equivalent_to_not_collinear_v0_r on B, G, F we get B not in Line(F, G)
By not_in_line_equivalent_to_not_collinear_v0_r on F, C, G we get F not in Line(C, G)
By line_inequality on Line(E, G), h, G we get h != Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on E, C, G we get E not in Line(C, G)
By not_in_line_equivalent_to_not_collinear_v0_r on A, E, B we get A not in Line(B, E)
By line_inequality on Line(F, G), f, G we get f != Line(F, G)
By not_in_line_equivalent_to_not_collinear_v0_r on B, D, E we get B not in Line(D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on B, A, D we get B not in Line(A, D)
By line_inequality on Line(F, G), g, F we get g != Line(F, G)
By not_in_line_equivalent_to_not_collinear_v0_r on F, E, A we get F not in Line(A, E)
By not_in_line_equivalent_to_not_collinear_v0_r on A, B, C we get A not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on G, D, A we get G not in Line(A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on A, G, C we get A not in Line(C, G)
By not_in_line_equivalent_to_not_collinear_v0_r on D, E, H we get D not in Line(E, H)
By not_in_line_equivalent_to_not_collinear_v0_r on H, E, A we get H not in Line(A, E)
By not_in_line_equivalent_to_not_collinear_v0_r on G, D, B we get G not in Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on C, F, G we get C not in Line(F, G)
By line_inequality on Line(A, D), g, A we get g != Line(A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on D, B, C we get D not in Line(B, C)
By line_inequality on Line(C, G), f, C we get f != Line(C, G)
By not_in_line_equivalent_to_not_collinear_v0_r on H, C, E we get H not in Line(C, E)
By not_in_line_equivalent_to_not_collinear_v0_r on G, C, D we get G not in Line(C, D)
By not_in_line_equivalent_to_not_collinear_v0_r on H, D, A we get H not in Line(A, D)
By line_inequality on Line(C, G), h, G we get h != Line(C, G)
By not_in_line_equivalent_to_not_collinear_v0_r on H, D, E we get H not in Line(D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on F, B, E we get F not in Line(B, E)
By line_inequality on Line(B, D), f, D we get f != Line(B, D)
By same_angle_v1 on F, A, C, G we get angle(A, F, G) == angle(C, F, G) mod 360
By same_angle_v3 on A, F, C, E we get angle(F, A, E) == angle(C, A, E) + 180 mod 360
By isosceles_triangle_properties on E, B, A we get distance(A, E) == distance(B, E), angle(B, A, E) == angle(E, B, A) mod 360
By isosceles_triangle_properties on E, C, A we get distance(A, E) == distance(C, E), angle(C, A, E) == angle(E, C, A) mod 360
By sas_anti_congruence on A, E, C, C, E, A we get anti_congruent_triangles(A, C, E, C, A, E)
By log_of_2_times_distance on D, E, E, H we get log(distance(D, E)) == 0.6931471805599453 + log(distance(E, H))
By sss_anti_congruence_v0 on E, A, C, E, C, A we get anti_congruent_triangles(A, C, E, C, A, E)
By isosceles_triangle_properties on E, A, C we get distance(A, E) == distance(C, E), angle(A, C, E) == angle(E, A, C) mod 360
By sss_anti_congruence_v0 on B, A, E, A, B, E we get anti_congruent_triangles(A, B, E, B, A, E)
By sas_anti_congruence on D, E, B, B, E, D we get anti_congruent_triangles(B, D, E, D, B, E)
By sss_anti_congruence_v1 on A, B, E, B, A, E we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v0 on B, A, E, A, B, E we get anti_congruent_triangles(A, B, E, B, A, E)
By log_of_2_times_distance on E, C, E, H we get log(distance(C, E)) == 0.6931471805599453 + log(distance(E, H))
By sss_anti_congruence_v0 on A, C, E, C, A, E we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v0 on E, A, C, E, C, A we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v0 on A, C, E, C, A, E we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v1 on E, A, B, E, B, A we get anti_congruent_triangles(A, B, E, B, A, E)
By reverse_direction on G, C we get 180 == direction(G, C) - direction(C, G) mod 360
By sss_anti_congruence_v0 on C, E, A, A, E, C we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v1 on C, A, E, A, C, E we get anti_congruent_triangles(A, C, E, C, A, E)
By collinear_definition on A, C, F we get C in Line(A, F), F in Line(A, C), Line(A, C) == Line(A, F), 0 == 2 * angle(C, A, F) mod 360
By sss_anti_congruence_v0 on C, E, A, A, E, C we get anti_congruent_triangles(A, C, E, C, A, E)
By log_of_2_times_distance on E, D, H, B we get log(distance(D, E)) == 0.6931471805599453 + log(distance(B, H))
By sss_anti_congruence_v1 on E, A, B, E, B, A we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v0 on E, B, A, E, A, B we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v0 on A, E, B, B, E, A we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v0 on E, A, C, E, C, A we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v1 on B, E, A, A, E, B we get anti_congruent_triangles(A, B, E, B, A, E)
By reverse_direction on E, D we get 180 == direction(E, D) - direction(D, E) mod 360
By sss_anti_congruence_v0 on A, E, B, B, E, A we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v1 on B, E, A, A, E, B we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v1 on B, E, A, A, E, B we get anti_congruent_triangles(A, B, E, B, A, E)
By radical_axis_definition_v0_r on C, c, d we get C in radical_axis(c, d)
By sss_anti_congruence_v0 on B, A, E, A, B, E we get anti_congruent_triangles(A, B, E, B, A, E)
By reverse_direction on G, F we get 180 == direction(G, F) - direction(F, G) mod 360
By sss_anti_congruence_v1 on A, B, E, B, A, E we get anti_congruent_triangles(A, B, E, B, A, E)
By isosceles_triangle_properties on E, A, B we get distance(A, E) == distance(B, E), angle(A, B, E) == angle(E, A, B) mod 360
By sss_anti_congruence_v0 on E, B, A, E, A, B we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v1 on A, B, E, B, A, E we get anti_congruent_triangles(A, B, E, B, A, E)
By sas_anti_congruence on D, E, C, C, E, D we get anti_congruent_triangles(C, D, E, D, C, E)
By sss_anti_congruence_v1 on A, E, C, C, E, A we get anti_congruent_triangles(A, C, E, C, A, E)
By isosceles_triangle_properties on E, D, B we get distance(B, E) == distance(D, E), angle(D, B, E) == angle(E, D, B) mod 360
By sss_anti_congruence_v1 on E, C, A, E, A, C we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v1 on E, A, B, E, B, A we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v1 on C, A, E, A, C, E we get anti_congruent_triangles(A, C, E, C, A, E)
By internal_angle_bisector_definition_v0_r on H, E, H, B we get Line(B, E) == internal_angle_bisector(H, B, H)
By sss_anti_congruence_v0 on B, A, E, A, B, E we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v1 on C, A, E, A, C, E we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v1 on A, E, C, C, E, A we get anti_congruent_triangles(A, C, E, C, A, E)
By internal_angle_bisector_definition_v0_r on E, B, E, H we get Line(B, H) == internal_angle_bisector(E, H, E)
By sss_anti_congruence_v0 on E, B, A, E, A, B we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v1 on E, C, A, E, A, C we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v0 on C, E, A, A, E, C we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v0 on A, E, B, B, E, A we get anti_congruent_triangles(A, B, E, B, A, E)
By isosceles_triangle_properties on E, B, D we get distance(B, E) == distance(D, E), angle(B, D, E) == angle(E, B, D) mod 360
By sss_anti_congruence_v0 on E, B, A, E, A, B we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v0 on E, B, A, E, A, B we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v0 on A, C, E, C, A, E we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v1 on A, B, E, B, A, E we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v1 on C, A, E, A, C, E we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v0 on A, E, B, B, E, A we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v1 on E, C, A, E, A, C we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v1 on A, E, C, C, E, A we get anti_congruent_triangles(A, C, E, C, A, E)
By log_of_2_times_distance on E, C, H, B we get log(distance(C, E)) == 0.6931471805599453 + log(distance(B, H))
By log_of_2_times_distance on E, A, H, B we get log(distance(A, E)) == 0.6931471805599453 + log(distance(B, H))
By reverse_direction on E, A we get 180 == direction(E, A) - direction(A, E) mod 360
By sss_anti_congruence_v0 on B, A, E, A, B, E we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v0 on A, E, B, B, E, A we get anti_congruent_triangles(A, B, E, B, A, E)
By sas_anti_congruence on B, E, D, D, E, B we get anti_congruent_triangles(B, D, E, D, B, E)
By sss_anti_congruence_v1 on A, E, C, C, E, A we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v1 on A, E, C, C, E, A we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v0 on A, C, E, C, A, E we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v1 on B, E, A, A, E, B we get anti_congruent_triangles(A, B, E, B, A, E)
By sas_anti_congruence on B, E, A, A, E, B we get anti_congruent_triangles(A, B, E, B, A, E)
By internal_angle_bisector_definition_v0_r on E, H, E, B we get Line(B, H) == internal_angle_bisector(E, B, E)
By sss_anti_congruence_v1 on C, A, E, A, C, E we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v0 on E, B, A, E, A, B we get anti_congruent_triangles(A, B, E, B, A, E)
By sas_anti_congruence on C, E, D, D, E, C we get anti_congruent_triangles(C, D, E, D, C, E)
By sss_anti_congruence_v0 on E, A, C, E, C, A we get anti_congruent_triangles(A, C, E, C, A, E)
By isosceles_triangle_properties on E, D, C we get distance(C, E) == distance(D, E), angle(D, C, E) == angle(E, D, C) mod 360
By sss_anti_congruence_v1 on A, B, E, B, A, E we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v0 on C, E, A, A, E, C we get anti_congruent_triangles(A, C, E, C, A, E)
By internal_angle_bisector_definition_v0_r on B, H, B, E we get Line(E, H) == internal_angle_bisector(B, E, B)
By isosceles_triangle_properties on E, C, D we get distance(C, E) == distance(D, E), angle(C, D, E) == angle(E, C, D) mod 360
By sas_anti_congruence on C, E, A, A, E, C we get anti_congruent_triangles(A, C, E, C, A, E)
By collinear_definition on A, F, C we get F in Line(A, C), C in Line(A, F), Line(A, C) == Line(A, F), 0 == 2 * angle(F, A, C) mod 360
By sss_anti_congruence_v0 on E, A, C, E, C, A we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v0 on C, E, A, A, E, C we get anti_congruent_triangles(A, C, E, C, A, E)
By sas_anti_congruence on A, E, B, B, E, A we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v1 on E, A, B, E, B, A we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v1 on B, E, A, A, E, B we get anti_congruent_triangles(A, B, E, B, A, E)
By reverse_direction on G, E we get 180 == direction(G, E) - direction(E, G) mod 360
By sss_anti_congruence_v1 on E, A, B, E, B, A we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v1 on E, C, A, E, A, C we get anti_congruent_triangles(A, C, E, C, A, E)
By collinear_definition on F, C, A we get C in Line(A, F), A in Line(C, F), Line(A, F) == Line(C, F), 0 == 2 * angle(C, F, A) mod 360
By sss_anti_congruence_v0 on A, E, B, B, E, A we get anti_congruent_triangles(A, B, E, B, A, E)
By internal_angle_bisector_definition_v0_r on B, E, B, H we get Line(E, H) == internal_angle_bisector(B, H, B)
By sss_anti_congruence_v0 on C, E, A, A, E, C we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v0 on A, C, E, C, A, E we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v1 on E, A, B, E, B, A we get anti_congruent_triangles(A, B, E, B, A, E)
By internal_angle_bisector_definition_v0_r on H, B, H, E we get Line(B, E) == internal_angle_bisector(H, E, H)
By log_of_2_times_distance on A, E, H, E we get log(distance(A, E)) == 0.6931471805599453 + log(distance(E, H))
By collinear_definition on F, A, C we get A in Line(C, F), C in Line(A, F), Line(A, F) == Line(C, F), 0 == 2 * angle(A, F, C) mod 360
By sss_anti_congruence_v1 on A, B, E, B, A, E we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v0 on E, A, C, E, C, A we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v1 on B, E, A, A, E, B we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v1 on A, E, C, C, E, A we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v0 on A, C, E, C, A, E we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v0 on B, A, E, A, B, E we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v1 on C, A, E, A, C, E we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v1 on E, C, A, E, A, C we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v1 on E, C, A, E, A, C we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v1 on E, C, G, C, E, G we get anti_congruent_triangles(C, E, G, E, C, G)
By sss_anti_congruence_v1 on C, G, E, E, G, C we get anti_congruent_triangles(C, E, G, E, C, G)
By sss_anti_congruence_v0 on G, C, E, G, E, C we get anti_congruent_triangles(C, E, G, E, C, G)
By sss_anti_congruence_v0 on E, G, C, C, G, E we get anti_congruent_triangles(C, E, G, E, C, G)
By sss_anti_congruence_v1 on C, G, E, E, G, C we get anti_congruent_triangles(C, E, G, E, C, G)
By sss_anti_congruence_v1 on G, E, C, G, C, E we get anti_congruent_triangles(C, E, G, E, C, G)
By sss_anti_congruence_v1 on E, C, G, C, E, G we get anti_congruent_triangles(C, E, G, E, C, G)
By sss_anti_congruence_v1 on G, E, C, G, C, E we get anti_congruent_triangles(C, E, G, E, C, G)
By sss_anti_congruence_v1 on E, C, G, C, E, G we get anti_congruent_triangles(C, E, G, E, C, G)
By sss_anti_congruence_v1 on C, G, E, E, G, C we get anti_congruent_triangles(C, E, G, E, C, G)
By sss_anti_congruence_v1 on G, E, C, G, C, E we get anti_congruent_triangles(C, E, G, E, C, G)
By sss_anti_congruence_v0 on E, G, C, C, G, E we get anti_congruent_triangles(C, E, G, E, C, G)
By sss_anti_congruence_v1 on C, G, E, E, G, C we get anti_congruent_triangles(C, E, G, E, C, G)
By sss_anti_congruence_v0 on C, E, G, E, C, G we get anti_congruent_triangles(C, E, G, E, C, G)
By sss_anti_congruence_v0 on C, E, G, E, C, G we get anti_congruent_triangles(C, E, G, E, C, G)
By isosceles_triangle_properties on G, F, C we get distance(C, G) == distance(F, G), angle(F, C, G) == angle(G, F, C) mod 360
By sss_anti_congruence_v0 on E, G, C, C, G, E we get anti_congruent_triangles(C, E, G, E, C, G)
By isosceles_triangle_properties on G, E, F we get distance(E, G) == distance(F, G), angle(E, F, G) == angle(G, E, F) mod 360
By sss_anti_congruence_v0 on G, C, E, G, E, C we get anti_congruent_triangles(C, E, G, E, C, G)
By sas_anti_congruence on E, G, F, F, G, E we get anti_congruent_triangles(E, F, G, F, E, G)
By sas_anti_congruence on A, E, D, D, E, A we get anti_congruent_triangles(A, D, E, D, A, E)
By sss_anti_congruence_v1 on E, C, G, C, E, G we get anti_congruent_triangles(C, E, G, E, C, G)
By sss_anti_congruence_v0 on G, C, E, G, E, C we get anti_congruent_triangles(C, E, G, E, C, G)
By sss_anti_congruence_v0 on E, G, C, C, G, E we get anti_congruent_triangles(C, E, G, E, C, G)
By isosceles_triangle_properties on G, E, C we get distance(C, G) == distance(E, G), angle(E, C, G) == angle(G, E, C) mod 360
By sss_anti_congruence_v0 on C, E, G, E, C, G we get anti_congruent_triangles(C, E, G, E, C, G)
By sss_anti_congruence_v0 on G, C, E, G, E, C we get anti_congruent_triangles(C, E, G, E, C, G)
By sas_anti_congruence on C, G, F, F, G, C we get anti_congruent_triangles(C, F, G, F, C, G)
By isosceles_triangle_properties on E, A, D we get distance(A, E) == distance(D, E), angle(A, D, E) == angle(E, A, D) mod 360
By sas_anti_congruence on D, E, A, A, E, D we get anti_congruent_triangles(A, D, E, D, A, E)
By sss_anti_congruence_v1 on C, G, E, E, G, C we get anti_congruent_triangles(C, E, G, E, C, G)
By sas_anti_congruence on F, G, C, C, G, F we get anti_congruent_triangles(C, F, G, F, C, G)
By isosceles_triangle_properties on E, D, A we get distance(A, E) == distance(D, E), angle(D, A, E) == angle(E, D, A) mod 360
By sas_anti_congruence on F, G, E, E, G, F we get anti_congruent_triangles(E, F, G, F, E, G)
By sss_anti_congruence_v1 on G, E, C, G, C, E we get anti_congruent_triangles(C, E, G, E, C, G)
By sss_anti_congruence_v0 on E, G, C, C, G, E we get anti_congruent_triangles(C, E, G, E, C, G)
By sss_anti_congruence_v1 on G, E, C, G, C, E we get anti_congruent_triangles(C, E, G, E, C, G)
By sss_anti_congruence_v0 on E, G, C, C, G, E we get anti_congruent_triangles(C, E, G, E, C, G)
By sss_anti_congruence_v1 on C, G, E, E, G, C we get anti_congruent_triangles(C, E, G, E, C, G)
By sss_anti_congruence_v1 on E, C, G, C, E, G we get anti_congruent_triangles(C, E, G, E, C, G)
By sss_anti_congruence_v0 on C, E, G, E, C, G we get anti_congruent_triangles(C, E, G, E, C, G)
By sss_anti_congruence_v0 on G, C, E, G, E, C we get anti_congruent_triangles(C, E, G, E, C, G)
By isosceles_triangle_properties on G, F, E we get distance(E, G) == distance(F, G), angle(F, E, G) == angle(G, F, E) mod 360
By sss_anti_congruence_v1 on G, E, C, G, C, E we get anti_congruent_triangles(C, E, G, E, C, G)
By sss_anti_congruence_v0 on G, C, E, G, E, C we get anti_congruent_triangles(C, E, G, E, C, G)
By isosceles_triangle_properties on G, C, F we get distance(C, G) == distance(F, G), angle(C, F, G) == angle(G, C, F) mod 360
By sas_anti_congruence on C, G, E, E, G, C we get anti_congruent_triangles(C, E, G, E, C, G)
By sas_anti_congruence on E, G, C, C, G, E we get anti_congruent_triangles(C, E, G, E, C, G)
By isosceles_triangle_properties on G, C, E we get distance(C, G) == distance(E, G), angle(C, E, G) == angle(G, C, E) mod 360
By sss_anti_congruence_v0 on C, E, G, E, C, G we get anti_congruent_triangles(C, E, G, E, C, G)
By sss_anti_congruence_v0 on C, E, G, E, C, G we get anti_congruent_triangles(C, E, G, E, C, G)
By sss_anti_congruence_v1 on E, C, G, C, E, G we get anti_congruent_triangles(C, E, G, E, C, G)
By isosceles_triangle_altitude_v2 on E, D, B we get identical(perpendicular_bisector(B, D), internal_angle_bisector(B, E, D), perpendicular_line(E, Line(B, D)))
By isosceles_triangle_altitude_v2 on E, B, D we get identical(perpendicular_bisector(B, D), internal_angle_bisector(B, E, D), perpendicular_line(E, Line(B, D)))
By radical_axis_is_perpendicular_to_center_line on radical_axis(c, d), c, d we get perpendicular(radical_axis(c, d), Line(center(c), center(d)))
By perpendicular_line_definition on D, Line(B, D), i we get Line(B, D) == perpendicular_line(D, i)
By line_intersection_definition on A, h, Line(A, D) we get A == line_intersection(h, Line(A, D))
By line_intersection_definition on E, Line(A, E), i we get E == line_intersection(i, Line(A, E))
By median_definition on F, D, B, i we get i == median(F, B, D)
By line_intersection_definition on A, Line(A, D), f we get A == line_intersection(f, Line(A, D))
By line_intersection_definition on D, Line(A, D), g we get D == line_intersection(g, Line(A, D))
By perpendicular_line_definition on F, i, Line(B, D) we get i == perpendicular_line(F, Line(B, D))
By line_intersection_definition on B, f, Line(B, E) we get B == line_intersection(f, Line(B, E))
By median_definition on E, D, B, i we get i == median(E, B, D)
By line_intersection_definition on B, f, Line(B, D) we get B == line_intersection(f, Line(B, D))
By line_intersection_definition on A, Line(A, E), h we get A == line_intersection(h, Line(A, E))
By line_intersection_definition on A, f, Line(A, E) we get A == line_intersection(f, Line(A, E))
By line_intersection_definition on C, h, Line(B, C) we get C == line_intersection(h, Line(B, C))
By line_intersection_definition on E, Line(C, E), i we get E == line_intersection(i, Line(C, E))
By line_intersection_definition on B, f, Line(B, C) we get B == line_intersection(f, Line(B, C))
By line_intersection_definition on C, Line(C, E), h we get C == line_intersection(h, Line(C, E))
By line_intersection_definition on C, Line(C, G), h we get C == line_intersection(h, Line(C, G))
By perpendicular_line_definition on B, Line(B, D), i we get Line(B, D) == perpendicular_line(B, i)
By line_intersection_definition on F, h, Line(F, G) we get F == line_intersection(h, Line(F, G))
By between_imply_not_between on D, midpoint(B, D), B we get collinear_and_not_between(B, D, midpoint(B, D))
By between_imply_not_between on B, midpoint(B, D), D we get collinear_and_not_between(D, B, midpoint(B, D))
By between_imply_not_between on F, A, C we get collinear_and_not_between(A, F, C)
By between_imply_not_between on C, A, F we get collinear_and_not_between(A, C, F)
By divide_by_2_mod_180_v1 on A, D, C, G, F, E we get angle(A, D, C) == angle(G, F, E) mod 360
By divide_by_2_mod_180_v1 on D, E, F, A, D, C we get angle(A, D, C) == angle(D, E, F) mod 360
By divide_by_2_mod_180_v0 on C, E, B, C, E, G we get angle(C, E, B) == angle(C, E, G) mod 360
By divide_by_2_mod_180_v1 on F, E, H, D, A, B we get angle(D, A, B) == angle(F, E, H) mod 360
By divide_by_2_mod_180_v0 on C, E, H, G, C, E we get angle(C, E, H) == angle(G, C, E) mod 360
By divide_by_2_mod_180_v0 on E, F, G, B, E, F we get angle(B, E, F) == angle(E, F, G) mod 360
By divide_by_2_mod_180_v1 on D, C, B, F, E, H we get angle(D, C, B) == angle(F, E, H) mod 360
By in_imply_collinear on midpoint(B, D), E, F we get collinear(E, F, midpoint(B, D))
By divide_by_2_mod_180_v1 on F, E, G, F, E, H we get angle(F, E, G) == angle(F, E, H) mod 360
By divide_by_2_mod_180_v0 on C, B, A, B, E, F we get angle(B, E, F) == angle(C, B, A) mod 360
By divide_by_2_mod_180_v1 on D, E, F, D, A, B we get angle(D, A, B) == angle(D, E, F) mod 360
By divide_by_2_mod_180_v1 on E, C, G, H, E, C we get angle(E, C, G) == angle(H, E, C) mod 360
By divide_by_2_mod_180_v1 on D, E, F, G, F, E we get angle(D, E, F) == angle(G, F, E) mod 360
By divide_by_2_mod_180_v0 on B, A, D, B, E, F we get angle(B, A, D) == angle(B, E, F) mod 360
By divide_by_2_mod_180_v0 on C, D, A, B, E, F we get angle(B, E, F) == angle(C, D, A) mod 360
By divide_by_2_mod_180_v0 on G, E, F, C, B, A we get angle(C, B, A) == angle(G, E, F) mod 360
By divide_by_2_mod_180_v1 on G, E, C, H, E, C we get angle(G, E, C) == angle(H, E, C) mod 360
By divide_by_2_mod_180_v1 on F, E, H, G, F, E we get angle(F, E, H) == angle(G, F, E) mod 360
By divide_by_2_mod_180_v0 on B, A, D, F, E, D we get angle(B, A, D) == angle(F, E, D) mod 360
By divide_by_2_mod_180_v1 on E, C, G, B, E, C we get angle(B, E, C) == angle(E, C, G) mod 360
By divide_by_2_mod_180_v0 on B, E, F, B, C, D we get angle(B, C, D) == angle(B, E, F) mod 360
By divide_by_2_mod_180_v0 on B, C, D, G, E, F we get angle(B, C, D) == angle(G, E, F) mod 360
By divide_by_2_mod_180_v0 on B, E, F, G, E, F we get angle(B, E, F) == angle(G, E, F) mod 360
By divide_by_2_mod_180_v1 on D, C, B, D, E, F we get angle(D, C, B) == angle(D, E, F) mod 360
By line_inequality on Line(A, D), Line(B, C), A we get Line(A, D) != Line(B, C)
By divide_by_2_mod_180_v0 on G, C, E, A, E, D we get angle(A, E, D) == angle(G, C, E) mod 360
By divide_by_2_mod_180_v1 on F, E, G, D, E, F we get angle(D, E, F) == angle(F, E, G) mod 360
By line_inequality on Line(E, G), Line(A, D), G we get Line(A, D) != Line(E, G)
By divide_by_2_mod_180_v0 on F, E, D, C, D, A we get angle(C, D, A) == angle(F, E, D) mod 360
By divide_by_2_mod_180_v0 on C, B, A, H, E, F we get angle(C, B, A) == angle(H, E, F) mod 360
By divide_by_2_mod_180_v1 on D, E, A, G, E, C we get angle(D, E, A) == angle(G, E, C) mod 360
By divide_by_2_mod_180_v0 on H, E, F, B, C, D we get angle(B, C, D) == angle(H, E, F) mod 360
By divide_by_2_mod_180_v0 on F, E, D, B, C, D we get angle(B, C, D) == angle(F, E, D) mod 360
By divide_by_2_mod_180_v1 on F, E, G, D, C, B we get angle(D, C, B) == angle(F, E, G) mod 360
By divide_by_2_mod_180_v1 on A, B, C, F, E, H we get angle(A, B, C) == angle(F, E, H) mod 360
By divide_by_2_mod_180_v0 on E, F, G, H, E, F we get angle(E, F, G) == angle(H, E, F) mod 360
By divide_by_2_mod_180_v0 on B, A, D, E, F, G we get angle(B, A, D) == angle(E, F, G) mod 360
By divide_by_2_mod_180_v1 on F, E, G, F, E, B we get angle(F, E, B) == angle(F, E, G) mod 360
By divide_by_2_mod_180_v1 on D, A, B, F, E, B we get angle(D, A, B) == angle(F, E, B) mod 360
By line_inequality on Line(C, E), Line(A, D), E we get Line(A, D) != Line(C, E)
By divide_by_2_mod_180_v0 on E, F, G, C, D, A we get angle(C, D, A) == angle(E, F, G) mod 360
By divide_by_2_mod_180_v0 on A, E, D, C, E, G we get angle(A, E, D) == angle(C, E, G) mod 360
By divide_by_2_mod_180_v0 on H, E, F, B, A, D we get angle(B, A, D) == angle(H, E, F) mod 360
By divide_by_2_mod_180_v1 on F, E, G, D, A, B we get angle(D, A, B) == angle(F, E, G) mod 360
By divide_by_2_mod_180_v0 on C, D, A, H, E, F we get angle(C, D, A) == angle(H, E, F) mod 360
By divide_by_2_mod_180_v1 on A, D, C, F, E, H we get angle(A, D, C) == angle(F, E, H) mod 360
By divide_by_2_mod_180_v1 on D, E, A, E, C, G we get angle(D, E, A) == angle(E, C, G) mod 360
By divide_by_2_mod_180_v0 on F, E, D, G, E, F we get angle(F, E, D) == angle(G, E, F) mod 360
By divide_by_2_mod_180_v1 on F, E, B, D, C, B we get angle(D, C, B) == angle(F, E, B) mod 360
By divide_by_2_mod_180_v1 on A, B, C, G, F, E we get angle(A, B, C) == angle(G, F, E) mod 360
By divide_by_2_mod_180_v1 on G, F, E, D, C, B we get angle(D, C, B) == angle(G, F, E) mod 360
By line_inequality on Line(C, G), Line(E, G), C we get Line(C, G) != Line(E, G)
By divide_by_2_mod_180_v0 on E, F, G, B, C, D we get angle(B, C, D) == angle(E, F, G) mod 360
By divide_by_2_mod_180_v0 on C, D, A, G, E, F we get angle(C, D, A) == angle(G, E, F) mod 360
By divide_by_2_mod_180_v0 on B, A, D, G, E, F we get angle(B, A, D) == angle(G, E, F) mod 360
By divide_by_2_mod_180_v0 on F, E, D, E, F, G we get angle(E, F, G) == angle(F, E, D) mod 360
By divide_by_2_mod_180_v1 on G, F, E, D, A, B we get angle(D, A, B) == angle(G, F, E) mod 360
By line_inequality on radical_axis(c, d), f, C we get f != radical_axis(c, d)
By divide_by_2_mod_180_v1 on D, E, F, A, B, C we get angle(A, B, C) == angle(D, E, F) mod 360
By divide_by_2_mod_180_v0 on F, E, D, C, B, A we get angle(C, B, A) == angle(F, E, D) mod 360
By divide_by_2_mod_180_v1 on F, E, B, A, D, C we get angle(A, D, C) == angle(F, E, B) mod 360
By line_inequality on Line(B, C), Line(F, G), B we get Line(B, C) != Line(F, G)
By divide_by_2_mod_180_v0 on E, F, G, C, B, A we get angle(C, B, A) == angle(E, F, G) mod 360
By divide_by_2_mod_180_v1 on B, E, C, G, E, C we get angle(B, E, C) == angle(G, E, C) mod 360
By divide_by_2_mod_180_v0 on C, E, B, G, C, E we get angle(C, E, B) == angle(G, C, E) mod 360
By divide_by_2_mod_180_v1 on A, D, C, F, E, G we get angle(A, D, C) == angle(F, E, G) mod 360
By line_inequality on Line(A, E), Line(B, C), E we get Line(A, E) != Line(B, C)
By divide_by_2_mod_180_v1 on A, B, C, F, E, G we get angle(A, B, C) == angle(F, E, G) mod 360
By divide_by_2_mod_180_v1 on G, F, E, F, E, B we get angle(F, E, B) == angle(G, F, E) mod 360
By isosceles_trapezoid_properties on C, D, B, A we get parallel(Line(A, B), Line(C, D)), distance(A, C) == distance(B, D), angle(A, C, D) == angle(C, D, B), angle(B, A, C) == angle(D, B, A)
By line_inequality on Line(A, E), Line(F, G), A we get Line(A, E) != Line(F, G)
By line_inequality on g, Line(B, C), D we get g != Line(B, C)
By line_inequality on Line(D, E), Line(A, E), D we get Line(A, E) != Line(D, E)
By divide_by_2_mod_180_v0 on G, E, F, H, E, F we get angle(G, E, F) == angle(H, E, F) mod 360
By divide_by_2_mod_180_v1 on A, B, C, F, E, B we get angle(A, B, C) == angle(F, E, B) mod 360
By isosceles_trapezoid_properties on D, C, B, A we get parallel(Line(A, B), Line(C, D)), distance(A, D) == distance(B, C), angle(A, D, C) == angle(D, C, B), angle(B, A, D) == angle(C, B, A)
By line_inequality on Line(A, E), Line(E, G), A we get Line(A, E) != Line(E, G)
By divide_by_2_mod_180_v0 on C, E, H, C, E, G we get angle(C, E, G) == angle(C, E, H) mod 360
By line_inequality on Line(C, E), Line(B, D), C we get Line(B, D) != Line(C, E)
By line_inequality on radical_axis(c, d), Line(D, E), C we get Line(D, E) != radical_axis(c, d)
By isosceles_trapezoid_properties on C, D, A, B we get parallel(Line(A, B), Line(C, D)), distance(A, D) == distance(B, C), angle(B, C, D) == angle(C, D, A), angle(A, B, C) == angle(D, A, B)
By between_imply_segment_sum on F, A, C we get distance(C, F) == distance(A, F) + distance(A, C)
By line_inequality on Line(B, D), Line(F, G), B we get Line(B, D) != Line(F, G)
By line_inequality on Line(B, E), Line(C, G), B we get Line(B, E) != Line(C, G)
By line_inequality on Line(F, G), Line(C, E), G we get Line(C, E) != Line(F, G)
By line_inequality on Line(E, G), Line(B, D), E we get Line(B, D) != Line(E, G)
By point_on_perpendicular_bisector on D, B, F, i we get distance(B, F) == distance(D, F)
By line_inequality on Line(A, D), Line(C, G), D we get Line(A, D) != Line(C, G)
By line_inequality on Line(C, E), g, E we get g != Line(C, E)
By isosceles_trapezoid_properties on A, B, D, C we get parallel(Line(A, B), Line(C, D)), distance(A, C) == distance(B, D), angle(A, B, D) == angle(C, A, B), angle(B, D, C) == angle(D, C, A)
By line_inequality on Line(F, G), Line(A, D), G we get Line(A, D) != Line(F, G)
By line_inequality on Line(A, D), Line(B, E), A we get Line(A, D) != Line(B, E)
By line_inequality on Line(D, E), Line(B, E), D we get Line(B, E) != Line(D, E)
By line_inequality on Line(C, G), Line(D, E), G we get Line(C, G) != Line(D, E)
By line_inequality on Line(C, G), Line(B, D), G we get Line(B, D) != Line(C, G)
By line_inequality on Line(A, E), Line(B, E), A we get Line(A, E) != Line(B, E)
By line_inequality on Line(B, E), Line(F, G), B we get Line(B, E) != Line(F, G)
By line_inequality on Line(A, E), Line(B, D), E we get Line(A, E) != Line(B, D)
By line_inequality on radical_axis(c, d), Line(A, D), C we get Line(A, D) != radical_axis(c, d)
By line_inequality on radical_axis(c, d), Line(B, D), C we get Line(B, D) != radical_axis(c, d)
By line_inequality on radical_axis(c, d), Line(E, G), C we get Line(E, G) != radical_axis(c, d)
By line_inequality on radical_axis(c, d), Line(F, G), C we get Line(F, G) != radical_axis(c, d)
By line_inequality on g, Line(B, E), C we get g != Line(B, E)
By line_inequality on Line(E, G), i, G we get i != Line(E, G)
By line_inequality on Line(B, E), i, B we get i != Line(B, E)
By line_inequality on Line(A, E), Line(C, G), E we get Line(A, E) != Line(C, G)
By line_inequality on Line(C, G), Line(F, G), C we get Line(C, G) != Line(F, G)
By line_inequality on Line(D, E), Line(B, D), E we get Line(B, D) != Line(D, E)
By line_inequality on g, Line(C, G), D we get g != Line(C, G)
By line_inequality on Line(C, E), Line(D, E), C we get Line(C, E) != Line(D, E)
By line_inequality on radical_axis(c, d), i, C we get i != radical_axis(c, d)
By line_containment_inequality on midpoint(B, D), C, i we get C != midpoint(B, D)
By line_inequality on radical_axis(c, d), Line(A, E), C we get Line(A, E) != radical_axis(c, d)
By line_inequality on Line(E, G), g, E we get g != Line(E, G)
By line_inequality on Line(D, E), Line(B, C), D we get Line(B, C) != Line(D, E)
By line_circle_intersection_has_at_most_two_points_0 on D, B, midpoint(B, D), c we get midpoint(B, D) not in c
By line_inequality on Line(F, G), Line(E, G), F we get Line(E, G) != Line(F, G)
By line_inequality on Line(B, D), g, B we get g != Line(B, D)
By line_inequality on i, Line(F, G), E we get i != Line(F, G)
By line_inequality on Line(B, D), i, B we get i != Line(B, D)
By line_inequality on Line(A, D), Line(A, E), D we get Line(A, D) != Line(A, E)
By line_inequality on Line(D, E), Line(F, G), E we get Line(D, E) != Line(F, G)
By line_inequality on Line(D, E), Line(E, G), D we get Line(D, E) != Line(E, G)
By line_containment_inequality on midpoint(B, D), G, i we get G != midpoint(B, D)
By line_inequality on Line(C, G), Line(C, E), G we get Line(C, E) != Line(C, G)
By line_inequality on Line(C, G), Line(B, C), G we get Line(B, C) != Line(C, G)
By line_inequality on Line(B, E), Line(C, E), H we get Line(B, E) != Line(C, E)
By line_inequality on Line(C, E), Line(B, C), E we get Line(B, C) != Line(C, E)
By line_inequality on Line(E, G), Line(B, C), E we get Line(B, C) != Line(E, G)
By line_inequality on Line(B, E), Line(B, C), H we get Line(B, C) != Line(B, E)
By line_inequality on Line(B, D), Line(B, E), D we get Line(B, D) != Line(B, E)
By line_inequality on Line(B, D), Line(A, D), B we get Line(A, D) != Line(B, D)
By line_inequality on Line(D, E), i, D we get i != Line(D, E)
By line_containment_inequality on midpoint(B, D), A, i we get A != midpoint(B, D)
By line_inequality on Line(A, E), Line(C, E), A we get Line(A, E) != Line(C, E)
By line_inequality on Line(D, E), Line(A, D), E we get Line(A, D) != Line(D, E)
By line_inequality on Line(E, G), Line(C, E), G we get Line(C, E) != Line(E, G)
By line_inequality on radical_axis(c, d), Line(B, E), C we get Line(B, E) != radical_axis(c, d)
By line_inequality on Line(B, C), Line(B, D), C we get Line(B, C) != Line(B, D)
By line_inequality on Line(D, E), g, E we get g != Line(D, E)
By line_containment_inequality on midpoint(B, D), H, i we get H != midpoint(B, D)
By collinear_definition on B, midpoint(B, D), D we get midpoint(B, D) in Line(B, D), D in Line(B, midpoint(B, D)), Line(B, D) == Line(B, midpoint(B, D)), 0 == 2 * angle(midpoint(B, D), B, D) mod 360
By internal_angle_bisector_definition_v0_r on D, F, H, E we get Line(E, F) == internal_angle_bisector(D, E, H)
By collinear_definition on D, B, midpoint(B, D) we get B in Line(D, midpoint(B, D)), midpoint(B, D) in Line(B, D), Line(B, D) == Line(D, midpoint(B, D)), 0 == 2 * angle(B, D, midpoint(B, D)) mod 360
By perpendicular_bisector_properties on D, B we get perpendicular(Line(B, D), perpendicular_bisector(B, D)), midpoint(B, D) == line_intersection(Line(B, D), perpendicular_bisector(B, D))
By altitude_definition on E, B, D, i we get i == altitude(E, B, D)
By isosceles_triangle_midpoint on E, D, B we get midpoint(B, D) in median(E, B, D)
By internal_angle_bisector_definition_v0_r on C, A, C, F we get Line(A, F) == internal_angle_bisector(C, F, C)
By internal_angle_bisector_definition_v0_r on F, C, F, A we get Line(A, C) == internal_angle_bisector(F, A, F)
By internal_angle_bisector_definition_v0_r on A, F, A, C we get Line(C, F) == internal_angle_bisector(A, C, A)
By collinear_definition on B, D, midpoint(B, D) we get D in Line(B, midpoint(B, D)), midpoint(B, D) in Line(B, D), Line(B, D) == Line(B, midpoint(B, D)), 0 == 2 * angle(D, B, midpoint(B, D)) mod 360
By internal_angle_bisector_definition_v0_r on A, C, A, F we get Line(C, F) == internal_angle_bisector(A, F, A)
By internal_angle_bisector_definition_v0_r on C, F, C, A we get Line(A, F) == internal_angle_bisector(C, A, C)
By internal_angle_bisector_definition_v0_r on F, A, F, C we get Line(A, C) == internal_angle_bisector(F, C, F)
By isosceles_triangle_altitude_v3 on midpoint(B, D), B, D we get identical(perpendicular_bisector(B, D), internal_angle_bisector(B, midpoint(B, D), D), perpendicular_line(midpoint(B, D), Line(B, D)))
By collinear_definition on D, midpoint(B, D), B we get midpoint(B, D) in Line(B, D), B in Line(D, midpoint(B, D)), Line(B, D) == Line(D, midpoint(B, D)), 0 == 2 * angle(midpoint(B, D), D, B) mod 360
By isosceles_triangle_altitude_v1 on midpoint(B, D), B, D we get identical(perpendicular_bisector(B, D), internal_angle_bisector(B, midpoint(B, D), D), perpendicular_line(midpoint(B, D), Line(B, D)))
By isosceles_triangle_altitude_v3 on midpoint(B, D), D, B we get identical(perpendicular_bisector(B, D), internal_angle_bisector(B, midpoint(B, D), D), perpendicular_line(midpoint(B, D), Line(B, D)))
By perpendicular_lines_draw_intersection on Line(B, D), i we get exists(line_intersection(i, Line(B, D)))
By isosceles_triangle_altitude_v1 on midpoint(B, D), D, B we get identical(perpendicular_bisector(B, D), internal_angle_bisector(B, midpoint(B, D), D), perpendicular_line(midpoint(B, D), Line(B, D)))
By similar_triangle_basic_properties on B, C, E, D, A, E we get not_collinear(B, C, E), not_collinear(A, D, E), angle(B, C, E) == angle(D, A, E) mod 360, angle(A, E, D) == angle(C, E, B) mod 360, angle(E, B, C) == angle(E, D, A) mod 360, log(distance(A, D)) + log(distance(C, E)) == log(distance(B, C)) + log(distance(A, E)), log(distance(A, E)) + log(distance(B, E)) == log(distance(C, E)) + log(distance(D, E)), log(distance(B, E)) + log(distance(A, D)) == log(distance(D, E)) + log(distance(B, C))
By similar_triangle_basic_properties on A, E, C, D, E, B we get not_collinear(A, C, E), not_collinear(B, D, E), angle(A, E, C) == angle(D, E, B) mod 360, angle(E, B, D) == angle(E, C, A) mod 360, angle(B, D, E) == angle(C, A, E) mod 360, log(distance(A, E)) + log(distance(B, E)) == log(distance(D, E)) + log(distance(C, E)), log(distance(B, E)) + log(distance(A, C)) == log(distance(C, E)) + log(distance(B, D)), log(distance(A, C)) + log(distance(D, E)) == log(distance(B, D)) + log(distance(A, E))
By log_of_2_times_distance on C, A, midpoint(B, D), B we get log(distance(A, C)) == 0.6931471805599453 + log(distance(B, midpoint(B, D)))
By similar_triangle_basic_properties on D, B, E, A, C, E we get not_collinear(B, D, E), not_collinear(A, C, E), angle(A, C, E) == angle(D, B, E) mod 360, angle(B, E, D) == angle(C, E, A) mod 360, angle(E, A, C) == angle(E, D, B) mod 360, log(distance(A, C)) + log(distance(B, E)) == log(distance(B, D)) + log(distance(C, E)), log(distance(B, E)) + log(distance(A, E)) == log(distance(C, E)) + log(distance(D, E)), log(distance(A, E)) + log(distance(B, D)) == log(distance(D, E)) + log(distance(A, C))
By anti_similar_triangle_basic_properties on B, E, C, A, E, D we get not_collinear(B, C, E), not_collinear(A, D, E), angle(B, E, C) == 0 - angle(A, E, D) mod 360, angle(E, C, B) == 0 - angle(E, D, A) mod 360, angle(C, B, E) == 0 - angle(D, A, E) mod 360, log(distance(A, E)) + log(distance(C, E)) == log(distance(B, E)) + log(distance(D, E)), log(distance(C, E)) + log(distance(A, D)) == log(distance(D, E)) + log(distance(B, C)), log(distance(A, D)) + log(distance(B, E)) == log(distance(B, C)) + log(distance(A, E))
By anti_similar_triangle_basic_properties on E, B, D, E, A, C we get not_collinear(B, D, E), not_collinear(A, C, E), angle(E, B, D) == 0 - angle(E, A, C) mod 360, angle(B, D, E) == 0 - angle(A, C, E) mod 360, angle(D, E, B) == 0 - angle(C, E, A) mod 360, log(distance(A, E)) + log(distance(B, D)) == log(distance(B, E)) + log(distance(A, C)), log(distance(A, C)) + log(distance(D, E)) == log(distance(B, D)) + log(distance(C, E)), log(distance(C, E)) + log(distance(B, E)) == log(distance(D, E)) + log(distance(A, E))
By log_of_2_times_distance on D, B, midpoint(B, D), D we get log(distance(B, D)) == 0.6931471805599453 + log(distance(D, midpoint(B, D)))
By altitude_definition on B, E, F, Line(B, D) we get Line(B, D) == altitude(B, E, F)
By log_of_2_times_distance on A, C, midpoint(B, D), D we get log(distance(A, C)) == 0.6931471805599453 + log(distance(D, midpoint(B, D)))
By anti_similar_triangle_basic_properties on C, G, E, E, G, C we get not_collinear(C, E, G), not_collinear(C, E, G), angle(C, G, E) == 0 - angle(E, G, C) mod 360, angle(G, E, C) == 0 - angle(G, C, E) mod 360, angle(E, C, G) == 0 - angle(C, E, G) mod 360, log(distance(C, G)) + log(distance(C, G)) == log(distance(E, G)) + log(distance(E, G)), log(distance(C, G)) + log(distance(C, E)) == log(distance(E, G)) + log(distance(C, E)), log(distance(C, E)) + log(distance(C, G)) == log(distance(C, E)) + log(distance(E, G))
By collinear_definition on midpoint(B, D), B, D we get B in Line(D, midpoint(B, D)), D in Line(B, midpoint(B, D)), Line(B, midpoint(B, D)) == Line(D, midpoint(B, D)), 0 == 2 * angle(B, midpoint(B, D), D) mod 360
By altitude_definition on D, F, E, Line(B, D) we get Line(B, D) == altitude(D, E, F)
By anti_similar_triangle_basic_properties on C, E, B, D, E, A we get not_collinear(B, C, E), not_collinear(A, D, E), angle(C, E, B) == 0 - angle(D, E, A) mod 360, angle(E, B, C) == 0 - angle(E, A, D) mod 360, angle(B, C, E) == 0 - angle(A, D, E) mod 360, log(distance(C, E)) + log(distance(A, E)) == log(distance(D, E)) + log(distance(B, E)), log(distance(A, E)) + log(distance(B, C)) == log(distance(B, E)) + log(distance(A, D)), log(distance(A, D)) + log(distance(C, E)) == log(distance(B, C)) + log(distance(D, E))
By anti_similar_triangle_basic_properties on C, A, E, D, B, E we get not_collinear(A, C, E), not_collinear(B, D, E), angle(C, A, E) == 0 - angle(D, B, E) mod 360, angle(A, E, C) == 0 - angle(B, E, D) mod 360, angle(E, C, A) == 0 - angle(E, D, B) mod 360, log(distance(A, C)) + log(distance(B, E)) == log(distance(B, D)) + log(distance(A, E)), log(distance(A, E)) + log(distance(D, E)) == log(distance(B, E)) + log(distance(C, E)), log(distance(C, E)) + log(distance(B, D)) == log(distance(D, E)) + log(distance(A, C))
By log_of_2_times_distance on B, D, midpoint(B, D), B we get log(distance(B, D)) == 0.6931471805599453 + log(distance(B, midpoint(B, D)))
By similar_triangle_basic_properties on A, D, E, C, B, E we get not_collinear(A, D, E), not_collinear(B, C, E), angle(A, D, E) == angle(C, B, E) mod 360, angle(B, E, C) == angle(D, E, A) mod 360, angle(E, A, D) == angle(E, C, B) mod 360, log(distance(A, D)) + log(distance(B, E)) == log(distance(B, C)) + log(distance(D, E)), log(distance(B, E)) + log(distance(A, E)) == log(distance(D, E)) + log(distance(C, E)), log(distance(A, E)) + log(distance(B, C)) == log(distance(C, E)) + log(distance(A, D))
By altitude_definition on F, B, D, i we get i == altitude(F, B, D)
By collinear_definition on midpoint(B, D), D, B we get D in Line(B, midpoint(B, D)), B in Line(D, midpoint(B, D)), Line(B, midpoint(B, D)) == Line(D, midpoint(B, D)), 0 == 2 * angle(D, midpoint(B, D), B) mod 360
By isosceles_triangle_properties on midpoint(B, D), D, B we get distance(B, midpoint(B, D)) == distance(D, midpoint(B, D)), angle(D, B, midpoint(B, D)) == angle(midpoint(B, D), D, B) mod 360
By isosceles_triangle_properties on midpoint(B, D), B, D we get distance(B, midpoint(B, D)) == distance(D, midpoint(B, D)), angle(B, D, midpoint(B, D)) == angle(midpoint(B, D), B, D) mod 360
By anti_similar_triangle_basic_properties on E, G, F, F, G, E we get not_collinear(E, F, G), not_collinear(E, F, G), angle(E, G, F) == 0 - angle(F, G, E) mod 360, angle(G, F, E) == 0 - angle(G, E, F) mod 360, angle(F, E, G) == 0 - angle(E, F, G) mod 360, log(distance(E, G)) + log(distance(E, G)) == log(distance(F, G)) + log(distance(F, G)), log(distance(E, G)) + log(distance(E, F)) == log(distance(F, G)) + log(distance(E, F)), log(distance(E, F)) + log(distance(E, G)) == log(distance(E, F)) + log(distance(F, G))
By anti_similar_triangle_basic_properties on G, F, C, G, C, F we get not_collinear(C, F, G), not_collinear(C, F, G), angle(G, F, C) == 0 - angle(G, C, F) mod 360, angle(F, C, G) == 0 - angle(C, F, G) mod 360, angle(C, G, F) == 0 - angle(F, G, C) mod 360, log(distance(C, G)) + log(distance(C, F)) == log(distance(F, G)) + log(distance(C, F)), log(distance(C, F)) + log(distance(C, G)) == log(distance(C, F)) + log(distance(F, G)), log(distance(C, G)) + log(distance(C, G)) == log(distance(F, G)) + log(distance(F, G))
By sas_anti_congruence on B, E, F, D, E, F we get anti_congruent_triangles(B, E, F, D, E, F)
By sas_anti_congruence on F, E, B, F, E, D we get anti_congruent_triangles(B, E, F, D, E, F)
By between_implies_angles on B, midpoint(B, D), D we get 180 == angle(B, midpoint(B, D), D) mod 360, 0 == angle(midpoint(B, D), D, B) mod 360, 0 == angle(D, B, midpoint(B, D)) mod 360
By power_of_a_point_definition on F, A, C, c we get log(power_of_a_point(F, c)) == log(distance(A, F)) + log(distance(C, F))
By power_of_a_point_definition on A, F, C, d we get log(power_of_a_point(A, d)) == log(distance(A, F)) + log(distance(A, C))
By between_implies_angles on D, midpoint(B, D), B we get 180 == angle(D, midpoint(B, D), B) mod 360, 0 == angle(midpoint(B, D), B, D) mod 360, 0 == angle(B, D, midpoint(B, D)) mod 360
By sas_anti_congruence on F, E, D, F, E, B we get anti_congruent_triangles(B, E, F, D, E, F)
By sas_anti_congruence on D, E, F, B, E, F we get anti_congruent_triangles(B, E, F, D, E, F)
By anti_similar_triangle_basic_properties on C, A, B, D, B, A we get not_collinear(A, B, C), not_collinear(A, B, D), angle(C, A, B) == 0 - angle(D, B, A) mod 360, angle(A, B, C) == 0 - angle(B, A, D) mod 360, angle(B, C, A) == 0 - angle(A, D, B) mod 360, log(distance(A, C)) + log(distance(A, B)) == log(distance(B, D)) + log(distance(A, B)), log(distance(A, B)) + log(distance(A, D)) == log(distance(A, B)) + log(distance(B, C)), log(distance(A, D)) + log(distance(A, C)) == log(distance(B, C)) + log(distance(B, D))
By anti_similar_triangle_basic_properties on C, D, B, D, C, A we get not_collinear(B, C, D), not_collinear(A, C, D), angle(C, D, B) == 0 - angle(D, C, A) mod 360, angle(D, B, C) == 0 - angle(C, A, D) mod 360, angle(B, C, D) == 0 - angle(A, D, C) mod 360, log(distance(C, D)) + log(distance(A, C)) == log(distance(C, D)) + log(distance(B, D)), log(distance(A, C)) + log(distance(B, C)) == log(distance(B, D)) + log(distance(A, D)), log(distance(A, D)) + log(distance(C, D)) == log(distance(B, C)) + log(distance(C, D))
By anti_similar_triangle_basic_properties on D, C, B, C, D, A we get not_collinear(B, C, D), not_collinear(A, C, D), angle(D, C, B) == 0 - angle(C, D, A) mod 360, angle(C, B, D) == 0 - angle(D, A, C) mod 360, angle(B, D, C) == 0 - angle(A, C, D) mod 360, log(distance(C, D)) + log(distance(A, D)) == log(distance(C, D)) + log(distance(B, C)), log(distance(A, D)) + log(distance(B, D)) == log(distance(B, C)) + log(distance(A, C)), log(distance(A, C)) + log(distance(C, D)) == log(distance(B, D)) + log(distance(C, D))
By line_intersection_definition on E, Line(E, G), Line(C, E) we get E == line_intersection(Line(C, E), Line(E, G))
By concurrent_sufficient_conditions on Line(A, E), Line(A, D), h we get concurrent(h, Line(A, D), Line(A, E))
By line_intersection_definition on B, Line(B, E), Line(B, C) we get B == line_intersection(Line(B, C), Line(B, E))
By line_intersection_definition on C, Line(C, G), Line(C, E) we get C == line_intersection(Line(C, E), Line(C, G))
By concurrent_sufficient_conditions on Line(B, E), Line(B, C), f we get concurrent(f, Line(B, C), Line(B, E))
By line_intersection_definition on C, Line(B, C), Line(C, E) we get C == line_intersection(Line(B, C), Line(C, E))
By line_intersection_definition on F, Line(F, G), i we get F == line_intersection(i, Line(F, G))
By concurrent_sufficient_conditions on Line(C, G), g, h we get concurrent(g, h, Line(C, G))
By concurrent_sufficient_conditions on Line(C, E), Line(A, E), i we get concurrent(i, Line(A, E), Line(C, E))
By concurrent_sufficient_conditions on g, Line(C, E), h we get concurrent(g, h, Line(C, E))
By line_intersection_definition on D, Line(D, E), g we get D == line_intersection(g, Line(D, E))
By concurrent_sufficient_conditions on i, Line(F, G), h we get concurrent(h, i, Line(F, G))
By line_intersection_definition on C, Line(B, C), Line(C, G) we get C == line_intersection(Line(B, C), Line(C, G))
By line_intersection_definition on E, Line(C, E), Line(A, E) we get E == line_intersection(Line(A, E), Line(C, E))
By line_intersection_definition on E, i, Line(D, E) we get E == line_intersection(i, Line(D, E))
By concurrent_sufficient_conditions on Line(C, E), Line(C, G), h we get concurrent(h, Line(C, E), Line(C, G))
By perpendicular_line_definition on midpoint(B, D), Line(B, D), i we get Line(B, D) == perpendicular_line(midpoint(B, D), i)
By concurrent_sufficient_conditions on Line(C, G), Line(C, E), h we get concurrent(h, Line(C, E), Line(C, G))
By line_intersection_definition on E, Line(E, G), Line(A, E) we get E == line_intersection(Line(A, E), Line(E, G))
By concurrent_sufficient_conditions on Line(B, D), Line(B, E), f we get concurrent(f, Line(B, D), Line(B, E))
By line_intersection_definition on D, Line(D, E), Line(A, D) we get D == line_intersection(Line(A, D), Line(D, E))
By line_intersection_definition on E, Line(D, E), Line(C, E) we get E == line_intersection(Line(C, E), Line(D, E))
By line_intersection_definition on E, Line(E, G), i we get E == line_intersection(i, Line(E, G))
By line_intersection_definition on E, Line(A, E), Line(B, E) we get E == line_intersection(Line(A, E), Line(B, E))
By line_intersection_definition on C, g, Line(C, E) we get C == line_intersection(g, Line(C, E))
By line_intersection_definition on B, Line(B, D), Line(B, E) we get B == line_intersection(Line(B, D), Line(B, E))
By line_intersection_definition on D, Line(D, E), Line(B, D) we get D == line_intersection(Line(B, D), Line(D, E))
By line_intersection_definition on B, Line(B, D), Line(B, C) we get B == line_intersection(Line(B, C), Line(B, D))
By line_intersection_definition on G, Line(F, G), Line(C, G) we get G == line_intersection(Line(C, G), Line(F, G))
By line_intersection_definition on D, Line(B, D), g we get D == line_intersection(g, Line(B, D))
By line_intersection_definition on G, Line(F, G), Line(E, G) we get G == line_intersection(Line(E, G), Line(F, G))
By perpendicular_line_definition on C, radical_axis(c, d), Line(E, G) we get radical_axis(c, d) == perpendicular_line(C, Line(E, G))
By concurrent_sufficient_conditions on Line(B, C), Line(B, E), f we get concurrent(f, Line(B, C), Line(B, E))
By line_intersection_definition on E, i, Line(B, E) we get E == line_intersection(i, Line(B, E))
By concurrent_sufficient_conditions on Line(A, E), Line(A, D), f we get concurrent(f, Line(A, D), Line(A, E))
By line_intersection_definition on D, Line(B, D), Line(A, D) we get D == line_intersection(Line(A, D), Line(B, D))
By line_intersection_definition on C, Line(B, C), g we get C == line_intersection(g, Line(B, C))
By line_intersection_definition on E, Line(D, E), Line(E, G) we get E == line_intersection(Line(D, E), Line(E, G))
By line_intersection_definition on E, Line(D, E), Line(B, E) we get E == line_intersection(Line(B, E), Line(D, E))
By line_intersection_definition on C, g, Line(C, G) we get C == line_intersection(g, Line(C, G))
By concurrent_sufficient_conditions on Line(B, C), Line(B, D), f we get concurrent(f, Line(B, C), Line(B, D))
By line_intersection_definition on A, Line(A, E), Line(A, D) we get A == line_intersection(Line(A, D), Line(A, E))
By concurrent_sufficient_conditions on Line(A, D), Line(A, E), h we get concurrent(h, Line(A, D), Line(A, E))
By concurrent_sufficient_conditions on Line(F, G), i, h we get concurrent(h, i, Line(F, G))
By perpendicular_line_definition on G, Line(E, G), radical_axis(c, d) we get Line(E, G) == perpendicular_line(G, radical_axis(c, d))
By line_intersection_definition on G, Line(E, G), Line(C, G) we get G == line_intersection(Line(C, G), Line(E, G))
By concurrent_sufficient_conditions on Line(B, C), Line(C, E), h we get concurrent(h, Line(B, C), Line(C, E))
By perpendicular_line_definition on E, Line(E, G), radical_axis(c, d) we get Line(E, G) == perpendicular_line(E, radical_axis(c, d))
By concurrent_sufficient_conditions on Line(B, C), g, h we get concurrent(g, h, Line(B, C))
By line_intersection_definition on E, Line(C, E), Line(B, E) we get E == line_intersection(Line(B, E), Line(C, E))
By concurrent_sufficient_conditions on Line(B, E), Line(B, D), f we get concurrent(f, Line(B, D), Line(B, E))
By concurrent_sufficient_conditions on Line(A, D), Line(A, E), f we get concurrent(f, Line(A, D), Line(A, E))
By concurrent_sufficient_conditions on g, Line(B, C), h we get concurrent(g, h, Line(B, C))
By concurrent_sufficient_conditions on Line(C, E), g, h we get concurrent(g, h, Line(C, E))
By concurrent_sufficient_conditions on Line(B, C), Line(C, G), h we get concurrent(h, Line(B, C), Line(C, G))
By concurrent_sufficient_conditions on Line(A, E), Line(C, E), i we get concurrent(i, Line(A, E), Line(C, E))
By line_intersection_definition on E, Line(D, E), Line(A, E) we get E == line_intersection(Line(A, E), Line(D, E))
By concurrent_sufficient_conditions on Line(B, D), Line(B, C), f we get concurrent(f, Line(B, C), Line(B, D))
By concurrent_sufficient_conditions on Line(C, E), Line(B, C), h we get concurrent(h, Line(B, C), Line(C, E))
By concurrent_sufficient_conditions on g, Line(C, G), h we get concurrent(g, h, Line(C, G))
By concurrent_sufficient_conditions on Line(C, G), Line(B, C), h we get concurrent(h, Line(B, C), Line(C, G))
By line_unique_intersection_v1 on Line(D, E), i, E, midpoint(B, D) we get midpoint(B, D) not in Line(D, E)
By line_unique_intersection_v1 on h, i, F, midpoint(B, D) we get midpoint(B, D) not in h
By line_unique_intersection_v1 on Line(B, C), Line(B, D), B, midpoint(B, D) we get midpoint(B, D) not in Line(B, C)
By line_unique_intersection_v1 on Line(A, E), i, E, midpoint(B, D) we get midpoint(B, D) not in Line(A, E)
By line_unique_intersection_v1 on Line(E, G), i, E, midpoint(B, D) we get midpoint(B, D) not in Line(E, G)
By line_unique_intersection_v1 on Line(C, E), i, E, midpoint(B, D) we get midpoint(B, D) not in Line(C, E)
By line_unique_intersection_v1 on Line(F, G), i, F, midpoint(B, D) we get midpoint(B, D) not in Line(F, G)
By line_unique_intersection_v1 on Line(B, E), i, E, midpoint(B, D) we get midpoint(B, D) not in Line(B, E)
By line_unique_intersection_v1 on g, Line(B, D), D, midpoint(B, D) we get midpoint(B, D) not in g
By line_unique_intersection_v1 on f, Line(B, D), B, midpoint(B, D) we get midpoint(B, D) not in f
By line_unique_intersection_v1 on Line(A, D), Line(B, D), D, midpoint(B, D) we get midpoint(B, D) not in Line(A, D)
By same_angle_converse_v0 on E, G, B, F we get collinear(B, E, G)
By same_angle_converse_v0 on E, H, G, C we get collinear(E, G, H)
By perpendicular_direction_conditions_v0_r on F, E, midpoint(B, D), D we get 180 == 2 * direction(F, E) - 2 * direction(midpoint(B, D), D) mod 360
By collinear_and_not_between_implies_orientation on H, midpoint(B, D), D, B we get orientation(B, H, D) == orientation(D, midpoint(B, D), H) mod 360
By collinear_and_not_between_implies_orientation on F, midpoint(B, D), D, B we get orientation(B, F, D) == orientation(D, midpoint(B, D), F) mod 360
By same_angle_v1 on F, C, A, D we get angle(A, F, D) == angle(C, F, D) mod 360
By collinear_and_not_between_implies_orientation on midpoint(B, D), H, E, B we get orientation(B, midpoint(B, D), E) == orientation(E, H, midpoint(B, D)) mod 360
By same_angle_v1 on B, E, H, F we get angle(E, B, F) == angle(H, B, F) mod 360
By between_implies_orientation on G, B, midpoint(B, D), D we get orientation(B, midpoint(B, D), G) == orientation(D, G, midpoint(B, D)) mod 360, orientation(B, D, G) == orientation(B, midpoint(B, D), G) mod 360
By between_implies_orientation on A, D, midpoint(B, D), B we get orientation(A, D, midpoint(B, D)) == orientation(A, midpoint(B, D), B) mod 360, orientation(A, D, B) == orientation(A, D, midpoint(B, D)) mod 360
By collinear_and_not_between_implies_orientation on E, B, D, midpoint(B, D) we get orientation(B, E, D) == orientation(D, midpoint(B, D), E) mod 360
By collinear_and_not_between_implies_orientation on H, midpoint(B, D), B, D we get orientation(B, D, H) == orientation(B, midpoint(B, D), H) mod 360
By between_implies_orientation on midpoint(B, D), E, H, B we get orientation(B, midpoint(B, D), H) == orientation(E, H, midpoint(B, D)) mod 360, orientation(B, midpoint(B, D), E) == orientation(E, H, midpoint(B, D)) mod 360
By between_implies_orientation on G, D, midpoint(B, D), B we get orientation(B, G, midpoint(B, D)) == orientation(D, midpoint(B, D), G) mod 360, orientation(B, G, D) == orientation(D, midpoint(B, D), G) mod 360
By same_angle_v1 on F, C, A, B we get angle(A, F, B) == angle(C, F, B) mod 360
By collinear_and_not_between_implies_orientation on midpoint(B, D), E, B, H we get orientation(B, E, midpoint(B, D)) == orientation(B, H, midpoint(B, D)) mod 360
By collinear_and_not_between_implies_orientation on C, midpoint(B, D), D, B we get orientation(B, C, D) == orientation(C, D, midpoint(B, D)) mod 360
By collinear_and_not_between_implies_orientation on A, D, B, midpoint(B, D) we get orientation(A, B, D) == orientation(A, B, midpoint(B, D)) mod 360
By between_implies_orientation on H, B, midpoint(B, D), D we get orientation(B, midpoint(B, D), H) == orientation(D, H, midpoint(B, D)) mod 360, orientation(B, D, H) == orientation(B, midpoint(B, D), H) mod 360
By between_implies_orientation on H, D, midpoint(B, D), B we get orientation(B, H, midpoint(B, D)) == orientation(D, midpoint(B, D), H) mod 360, orientation(B, H, D) == orientation(D, midpoint(B, D), H) mod 360
By collinear_and_not_between_implies_orientation on midpoint(B, D), C, F, A we get orientation(A, midpoint(B, D), F) == orientation(C, midpoint(B, D), F) mod 360
By collinear_and_not_between_implies_orientation on C, midpoint(B, D), B, D we get orientation(B, D, C) == orientation(B, midpoint(B, D), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, D), D, E, F we get 180 == 2 * direction(midpoint(B, D), D) - 2 * direction(E, F) mod 360
By between_implies_orientation on F, D, midpoint(B, D), B we get orientation(B, F, midpoint(B, D)) == orientation(D, midpoint(B, D), F) mod 360, orientation(B, F, D) == orientation(D, midpoint(B, D), F) mod 360
By between_implies_orientation on E, B, midpoint(B, D), D we get orientation(B, midpoint(B, D), E) == orientation(D, E, midpoint(B, D)) mod 360, orientation(B, D, E) == orientation(B, midpoint(B, D), E) mod 360
By collinear_and_not_between_implies_orientation on midpoint(B, D), F, C, A we get orientation(A, midpoint(B, D), C) == orientation(C, F, midpoint(B, D)) mod 360
By between_implies_orientation on midpoint(B, D), C, A, F we get orientation(A, F, midpoint(B, D)) == orientation(A, midpoint(B, D), C) mod 360, orientation(A, midpoint(B, D), C) == orientation(C, F, midpoint(B, D)) mod 360
By projection_definition on E, midpoint(B, D), Line(B, D) we get midpoint(B, D) == projection(E, Line(B, D))
By between_implies_orientation on C, D, midpoint(B, D), B we get orientation(B, C, midpoint(B, D)) == orientation(C, D, midpoint(B, D)) mod 360, orientation(B, C, D) == orientation(C, D, midpoint(B, D)) mod 360
By between_implies_orientation on midpoint(B, D), B, H, E we get orientation(B, H, midpoint(B, D)) == orientation(E, midpoint(B, D), H) mod 360, orientation(B, E, midpoint(B, D)) == orientation(B, H, midpoint(B, D)) mod 360
By collinear_and_not_between_implies_orientation on F, D, B, midpoint(B, D) we get orientation(B, D, F) == orientation(B, midpoint(B, D), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, D), B, F, E we get 180 == 2 * direction(midpoint(B, D), B) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on F, E, midpoint(B, D), B we get 180 == 2 * direction(F, E) - 2 * direction(midpoint(B, D), B) mod 360
By perpendicular_direction_conditions_v0_r on E, F, midpoint(B, D), D we get 180 == 2 * direction(E, F) - 2 * direction(midpoint(B, D), D) mod 360
By projection_definition on F, midpoint(B, D), Line(B, D) we get midpoint(B, D) == projection(F, Line(B, D))
By perpendicular_direction_conditions_v0_r on midpoint(B, D), D, F, E we get 180 == 2 * direction(midpoint(B, D), D) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on E, F, midpoint(B, D), B we get 180 == 2 * direction(E, F) - 2 * direction(midpoint(B, D), B) mod 360
By between_implies_orientation on E, D, midpoint(B, D), B we get orientation(B, E, midpoint(B, D)) == orientation(D, midpoint(B, D), E) mod 360, orientation(B, E, D) == orientation(D, midpoint(B, D), E) mod 360
By between_implies_orientation on C, B, midpoint(B, D), D we get orientation(B, midpoint(B, D), C) == orientation(C, midpoint(B, D), D) mod 360, orientation(B, D, C) == orientation(B, midpoint(B, D), C) mod 360
By between_implies_orientation on A, B, midpoint(B, D), D we get orientation(A, B, midpoint(B, D)) == orientation(A, midpoint(B, D), D) mod 360, orientation(A, B, D) == orientation(A, B, midpoint(B, D)) mod 360
By between_implies_orientation on F, B, midpoint(B, D), D we get orientation(B, midpoint(B, D), F) == orientation(D, F, midpoint(B, D)) mod 360, orientation(B, D, F) == orientation(B, midpoint(B, D), F) mod 360
By projection_definition on B, midpoint(B, D), i we get midpoint(B, D) == projection(B, i)
By perpendicular_direction_conditions_v0_r on midpoint(B, D), B, E, F we get 180 == 2 * direction(midpoint(B, D), B) - 2 * direction(E, F) mod 360
By projection_definition on D, midpoint(B, D), i we get midpoint(B, D) == projection(D, i)
By between_implies_orientation on midpoint(B, D), F, A, C we get orientation(A, C, midpoint(B, D)) == orientation(A, midpoint(B, D), F) mod 360, orientation(A, midpoint(B, D), F) == orientation(C, midpoint(B, D), F) mod 360
By different_points_v1 on F, D we get 0 != distance(D, F)
By perpendicular_direction_conditions_v0_r on F, midpoint(B, D), B, midpoint(B, D) we get 180 == 2 * direction(F, midpoint(B, D)) - 2 * direction(B, midpoint(B, D)) mod 360
By different_points_v1 on F, midpoint(B, D) we get 0 != distance(F, midpoint(B, D))
By different_points_v1 on B, F we get 0 != distance(B, F)
By perpendicular_direction_conditions_v0_r on midpoint(B, D), F, D, midpoint(B, D) we get 180 == 2 * direction(midpoint(B, D), F) - 2 * direction(D, midpoint(B, D)) mod 360
By different_points_v1 on midpoint(B, D), E we get 0 != distance(E, midpoint(B, D))
By perpendicular_direction_conditions_v0_r on E, midpoint(B, D), midpoint(B, D), D we get 180 == 2 * direction(E, midpoint(B, D)) - 2 * direction(midpoint(B, D), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, D), F, B, midpoint(B, D) we get 180 == 2 * direction(midpoint(B, D), F) - 2 * direction(B, midpoint(B, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, D), B, F, midpoint(B, D) we get 180 == 2 * direction(midpoint(B, D), B) - 2 * direction(F, midpoint(B, D)) mod 360
By perpendicular_direction_conditions_v0_r on B, D, midpoint(B, D), F we get 180 == 2 * direction(B, D) - 2 * direction(midpoint(B, D), F) mod 360
By perpendicular_direction_conditions_v0_r on D, B, midpoint(B, D), E we get 180 == 2 * direction(D, B) - 2 * direction(midpoint(B, D), E) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(B, D), midpoint(B, D), D we get 180 == 2 * direction(F, midpoint(B, D)) - 2 * direction(midpoint(B, D), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, D), D, midpoint(B, D), E we get 180 == 2 * direction(midpoint(B, D), D) - 2 * direction(midpoint(B, D), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, D), F, D, B we get 180 == 2 * direction(midpoint(B, D), F) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(B, D), midpoint(B, D), F we get 180 == 2 * direction(D, midpoint(B, D)) - 2 * direction(midpoint(B, D), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, D), E, D, midpoint(B, D) we get 180 == 2 * direction(midpoint(B, D), E) - 2 * direction(D, midpoint(B, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(B, D), E, midpoint(B, D) we get 180 == 2 * direction(D, midpoint(B, D)) - 2 * direction(E, midpoint(B, D)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(B, D), D, midpoint(B, D) we get 180 == 2 * direction(E, midpoint(B, D)) - 2 * direction(D, midpoint(B, D)) mod 360
By perpendicular_direction_conditions_v0_r on B, D, midpoint(B, D), E we get 180 == 2 * direction(B, D) - 2 * direction(midpoint(B, D), E) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(B, D), D, midpoint(B, D) we get 180 == 2 * direction(F, midpoint(B, D)) - 2 * direction(D, midpoint(B, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, D), E, B, D we get 180 == 2 * direction(midpoint(B, D), E) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on D, B, E, midpoint(B, D) we get 180 == 2 * direction(D, B) - 2 * direction(E, midpoint(B, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, D), E, midpoint(B, D), B we get 180 == 2 * direction(midpoint(B, D), E) - 2 * direction(midpoint(B, D), B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, D), D, midpoint(B, D), F we get 180 == 2 * direction(midpoint(B, D), D) - 2 * direction(midpoint(B, D), F) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(B, D), midpoint(B, D), F we get 180 == 2 * direction(B, midpoint(B, D)) - 2 * direction(midpoint(B, D), F) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(B, D), midpoint(B, D), E we get 180 == 2 * direction(B, midpoint(B, D)) - 2 * direction(midpoint(B, D), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, D), F, midpoint(B, D), B we get 180 == 2 * direction(midpoint(B, D), F) - 2 * direction(midpoint(B, D), B) mod 360
By perpendicular_direction_conditions_v0_r on D, B, F, midpoint(B, D) we get 180 == 2 * direction(D, B) - 2 * direction(F, midpoint(B, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(B, D), F, midpoint(B, D) we get 180 == 2 * direction(D, midpoint(B, D)) - 2 * direction(F, midpoint(B, D)) mod 360
By perpendicular_direction_conditions_v0_r on B, D, E, midpoint(B, D) we get 180 == 2 * direction(B, D) - 2 * direction(E, midpoint(B, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, D), F, midpoint(B, D), D we get 180 == 2 * direction(midpoint(B, D), F) - 2 * direction(midpoint(B, D), D) mod 360
By perpendicular_direction_conditions_v0_r on D, B, midpoint(B, D), F we get 180 == 2 * direction(D, B) - 2 * direction(midpoint(B, D), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, D), E, D, B we get 180 == 2 * direction(midpoint(B, D), E) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(B, D), B, D we get 180 == 2 * direction(F, midpoint(B, D)) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(B, D), F, midpoint(B, D) we get 180 == 2 * direction(B, midpoint(B, D)) - 2 * direction(F, midpoint(B, D)) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(B, D), E, midpoint(B, D) we get 180 == 2 * direction(B, midpoint(B, D)) - 2 * direction(E, midpoint(B, D)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(B, D), D, B we get 180 == 2 * direction(E, midpoint(B, D)) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, D), D, F, midpoint(B, D) we get 180 == 2 * direction(midpoint(B, D), D) - 2 * direction(F, midpoint(B, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, D), B, midpoint(B, D), F we get 180 == 2 * direction(midpoint(B, D), B) - 2 * direction(midpoint(B, D), F) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(B, D), B, midpoint(B, D) we get 180 == 2 * direction(E, midpoint(B, D)) - 2 * direction(B, midpoint(B, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, D), E, midpoint(B, D), D we get 180 == 2 * direction(midpoint(B, D), E) - 2 * direction(midpoint(B, D), D) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(B, D), midpoint(B, D), B we get 180 == 2 * direction(E, midpoint(B, D)) - 2 * direction(midpoint(B, D), B) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(B, D), B, D we get 180 == 2 * direction(E, midpoint(B, D)) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, D), B, midpoint(B, D), E we get 180 == 2 * direction(midpoint(B, D), B) - 2 * direction(midpoint(B, D), E) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(B, D), D, B we get 180 == 2 * direction(F, midpoint(B, D)) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(B, D), midpoint(B, D), B we get 180 == 2 * direction(F, midpoint(B, D)) - 2 * direction(midpoint(B, D), B) mod 360
By perpendicular_direction_conditions_v0_r on B, D, F, midpoint(B, D) we get 180 == 2 * direction(B, D) - 2 * direction(F, midpoint(B, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(B, D), midpoint(B, D), E we get 180 == 2 * direction(D, midpoint(B, D)) - 2 * direction(midpoint(B, D), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, D), E, B, midpoint(B, D) we get 180 == 2 * direction(midpoint(B, D), E) - 2 * direction(B, midpoint(B, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, D), D, E, midpoint(B, D) we get 180 == 2 * direction(midpoint(B, D), D) - 2 * direction(E, midpoint(B, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, D), F, B, D we get 180 == 2 * direction(midpoint(B, D), F) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, D), B, E, midpoint(B, D) we get 180 == 2 * direction(midpoint(B, D), B) - 2 * direction(E, midpoint(B, D)) mod 360
By line_inequality on Line(B, F), Line(A, E), B we get Line(A, E) != Line(B, F)
By sss_anti_congruence_v1 on F, D, B, F, B, D we get anti_congruent_triangles(B, D, F, D, B, F)
By line_inequality on Line(D, F), f, F we get f != Line(D, F)
By reverse_direction on midpoint(B, D), B we get 180 == direction(midpoint(B, D), B) - direction(B, midpoint(B, D)) mod 360
By parallel_line_angles_v0 on G, F, E, D we get parallel(Line(D, E), Line(F, G))
By line_inequality on Line(B, F), Line(C, E), B we get Line(B, F) != Line(C, E)
By reverse_direction on midpoint(B, D), D we get 180 == direction(midpoint(B, D), D) - direction(D, midpoint(B, D)) mod 360
By sss_anti_congruence_v1 on F, D, B, F, B, D we get anti_congruent_triangles(B, D, F, D, B, F)
By sss_anti_congruence_v0 on D, F, B, B, F, D we get anti_congruent_triangles(B, D, F, D, B, F)
By sss_anti_congruence_v1 on D, B, F, B, D, F we get anti_congruent_triangles(B, D, F, D, B, F)
By sss_anti_congruence_v0 on F, B, D, F, D, B we get anti_congruent_triangles(B, D, F, D, B, F)
By sss_anti_congruence_v0 on F, B, D, F, D, B we get anti_congruent_triangles(B, D, F, D, B, F)
By not_in_line_equivalent_to_not_collinear_v0 on C, D, midpoint(B, D) we get not_collinear(C, D, midpoint(B, D)), exists(Line(D, midpoint(B, D)))
By not_in_line_equivalent_to_not_collinear_v0 on F, D, midpoint(B, D) we get not_collinear(D, F, midpoint(B, D)), exists(Line(D, midpoint(B, D)))
By reverse_direction on D, F we get 180 == direction(D, F) - direction(F, D) mod 360
By line_inequality on Line(D, F), Line(C, E), F we get Line(C, E) != Line(D, F)
By sss_anti_congruence_v1 on B, F, D, D, F, B we get anti_congruent_triangles(B, D, F, D, B, F)
By not_in_line_equivalent_to_not_collinear_v0 on C, midpoint(B, D), F we get not_collinear(C, F, midpoint(B, D)), exists(Line(F, midpoint(B, D)))
By line_inequality on Line(D, F), Line(A, E), F we get Line(A, E) != Line(D, F)
By sss_anti_congruence_v1 on B, F, D, D, F, B we get anti_congruent_triangles(B, D, F, D, B, F)
By not_in_line_equivalent_to_not_collinear_v0 on A, midpoint(B, D), F we get not_collinear(A, F, midpoint(B, D)), exists(Line(F, midpoint(B, D)))
By sss_anti_congruence_v1 on F, D, B, F, B, D we get anti_congruent_triangles(B, D, F, D, B, F)
By isosceles_triangle_properties on F, B, D we get distance(B, F) == distance(D, F), angle(B, D, F) == angle(F, B, D) mod 360
By sss_anti_congruence_v1 on F, D, B, F, B, D we get anti_congruent_triangles(B, D, F, D, B, F)
By sss_anti_congruence_v0 on D, F, B, B, F, D we get anti_congruent_triangles(B, D, F, D, B, F)
By not_in_line_equivalent_to_not_collinear_v0 on A, D, midpoint(B, D) we get not_collinear(A, D, midpoint(B, D)), exists(Line(D, midpoint(B, D)))
By not_in_line_equivalent_to_not_collinear_v0 on G, midpoint(B, D), D we get not_collinear(D, G, midpoint(B, D)), exists(Line(D, midpoint(B, D)))
By sss_anti_congruence_v1 on B, F, D, D, F, B we get anti_congruent_triangles(B, D, F, D, B, F)
By sss_anti_congruence_v1 on B, F, D, D, F, B we get anti_congruent_triangles(B, D, F, D, B, F)
By not_in_line_equivalent_to_not_collinear_v0 on B, E, midpoint(B, D) we get not_collinear(B, E, midpoint(B, D)), exists(Line(E, midpoint(B, D)))
By sss_anti_congruence_v0 on B, D, F, D, B, F we get anti_congruent_triangles(B, D, F, D, B, F)
By not_in_line_equivalent_to_not_collinear_v0 on H, midpoint(B, D), B we get not_collinear(B, H, midpoint(B, D)), exists(Line(B, midpoint(B, D)))
By sss_anti_congruence_v0 on D, F, B, B, F, D we get anti_congruent_triangles(B, D, F, D, B, F)
By sss_anti_congruence_v0 on F, B, D, F, D, B we get anti_congruent_triangles(B, D, F, D, B, F)
By sss_anti_congruence_v1 on D, B, F, B, D, F we get anti_congruent_triangles(B, D, F, D, B, F)
By line_inequality on Line(B, F), Line(B, E), F we get Line(B, E) != Line(B, F)
By sss_anti_congruence_v0 on B, D, F, D, B, F we get anti_congruent_triangles(B, D, F, D, B, F)
By reverse_direction on B, midpoint(B, D) we get 180 == direction(B, midpoint(B, D)) - direction(midpoint(B, D), B) mod 360
By sss_anti_congruence_v0 on D, F, B, B, F, D we get anti_congruent_triangles(B, D, F, D, B, F)
By not_in_line_equivalent_to_not_collinear_v0 on C, midpoint(B, D), E we get not_collinear(C, E, midpoint(B, D)), exists(Line(E, midpoint(B, D)))
By line_inequality on Line(B, F), g, B we get g != Line(B, F)
By sss_anti_congruence_v0 on B, D, F, D, B, F we get anti_congruent_triangles(B, D, F, D, B, F)
By sss_anti_congruence_v1 on F, D, B, F, B, D we get anti_congruent_triangles(B, D, F, D, B, F)
By sss_anti_congruence_v1 on F, D, B, F, B, D we get anti_congruent_triangles(B, D, F, D, B, F)
By reverse_direction on D, midpoint(B, D) we get 180 == direction(D, midpoint(B, D)) - direction(midpoint(B, D), D) mod 360
By isosceles_triangle_properties on F, D, B we get distance(B, F) == distance(D, F), angle(D, B, F) == angle(F, D, B) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on E, F, B we get E not in Line(B, F)
By not_in_line_equivalent_to_not_collinear_v0 on H, midpoint(B, D), E we get not_collinear(E, H, midpoint(B, D)), exists(Line(E, midpoint(B, D)))
By sss_anti_congruence_v1 on D, B, F, B, D, F we get anti_congruent_triangles(B, D, F, D, B, F)
By line_inequality on Line(D, F), g, F we get g != Line(D, F)
By sss_anti_congruence_v0 on F, B, D, F, D, B we get anti_congruent_triangles(B, D, F, D, B, F)
By not_in_line_equivalent_to_not_collinear_v0 on H, D, midpoint(B, D) we get not_collinear(D, H, midpoint(B, D)), exists(Line(D, midpoint(B, D)))
By sss_anti_congruence_v1 on B, F, D, D, F, B we get anti_congruent_triangles(B, D, F, D, B, F)
By sss_anti_congruence_v0 on D, F, B, B, F, D we get anti_congruent_triangles(B, D, F, D, B, F)
By line_inequality on Line(B, F), Line(A, D), B we get Line(A, D) != Line(B, F)
By sss_anti_congruence_v0 on B, D, F, D, B, F we get anti_congruent_triangles(B, D, F, D, B, F)
By reverse_direction on F, D we get 180 == direction(F, D) - direction(D, F) mod 360
By sss_anti_congruence_v0 on B, D, F, D, B, F we get anti_congruent_triangles(B, D, F, D, B, F)
By reverse_direction on F, B we get 180 == direction(F, B) - direction(B, F) mod 360
By sss_anti_congruence_v1 on D, B, F, B, D, F we get anti_congruent_triangles(B, D, F, D, B, F)
By sss_anti_congruence_v1 on D, B, F, B, D, F we get anti_congruent_triangles(B, D, F, D, B, F)
By sss_anti_congruence_v0 on B, D, F, D, B, F we get anti_congruent_triangles(B, D, F, D, B, F)
By not_in_line_equivalent_to_not_collinear_v0_r on C, F, B we get C not in Line(B, F)
By not_in_line_equivalent_to_not_collinear_v0 on B, F, midpoint(B, D) we get not_collinear(B, F, midpoint(B, D)), exists(Line(F, midpoint(B, D)))
By not_in_line_equivalent_to_not_collinear_v0 on A, midpoint(B, D), E we get not_collinear(A, E, midpoint(B, D)), exists(Line(E, midpoint(B, D)))
By line_inequality on Line(D, F), Line(A, D), F we get Line(A, D) != Line(D, F)
By sss_anti_congruence_v1 on D, B, F, B, D, F we get anti_congruent_triangles(B, D, F, D, B, F)
By sss_anti_congruence_v0 on D, F, B, B, F, D we get anti_congruent_triangles(B, D, F, D, B, F)
By sss_anti_congruence_v0 on F, B, D, F, D, B we get anti_congruent_triangles(B, D, F, D, B, F)
By not_in_line_equivalent_to_not_collinear_v0_r on A, D, F we get A not in Line(D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on B, D, F we get B not in Line(D, F)
By not_in_line_equivalent_to_not_collinear_v0 on D, E, midpoint(B, D) we get not_collinear(D, E, midpoint(B, D)), exists(Line(E, midpoint(B, D)))
By not_in_line_equivalent_to_not_collinear_v0 on G, E, midpoint(B, D) we get not_collinear(E, G, midpoint(B, D)), exists(Line(E, midpoint(B, D)))
By sss_anti_congruence_v1 on B, F, D, D, F, B we get anti_congruent_triangles(B, D, F, D, B, F)
By sss_anti_congruence_v0 on F, B, D, F, D, B we get anti_congruent_triangles(B, D, F, D, B, F)
By reverse_direction on B, F we get 180 == direction(B, F) - direction(F, B) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on C, F, D we get C not in Line(D, F)
By not_in_line_equivalent_to_not_collinear_v0 on G, midpoint(B, D), F we get not_collinear(F, G, midpoint(B, D)), exists(Line(F, midpoint(B, D)))
By line_inequality on Line(D, F), Line(B, D), F we get Line(B, D) != Line(D, F)
By line_inequality on Line(D, F), Line(E, G), D we get Line(D, F) != Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on H, F, B we get H not in Line(B, F)
By not_in_line_equivalent_to_not_collinear_v0 on C, midpoint(B, D), B we get not_collinear(B, C, midpoint(B, D)), exists(Line(B, midpoint(B, D)))
By line_inequality on Line(D, F), Line(C, G), F we get Line(C, G) != Line(D, F)
By not_in_line_equivalent_to_not_collinear_v0 on G, B, midpoint(B, D) we get not_collinear(B, G, midpoint(B, D)), exists(Line(B, midpoint(B, D)))
By not_in_line_equivalent_to_not_collinear_v0 on H, midpoint(B, D), F we get not_collinear(F, H, midpoint(B, D)), exists(Line(F, midpoint(B, D)))
By line_inequality on Line(B, F), Line(C, G), F we get Line(B, F) != Line(C, G)
By not_in_line_equivalent_to_not_collinear_v0_r on E, F, D we get E not in Line(D, F)
By line_inequality on Line(B, F), Line(B, D), F we get Line(B, D) != Line(B, F)
By line_inequality on Line(D, F), Line(B, C), F we get Line(B, C) != Line(D, F)
By line_inequality on Line(D, F), Line(D, E), F we get Line(D, E) != Line(D, F)
By not_in_line_equivalent_to_not_collinear_v0 on A, midpoint(B, D), B we get not_collinear(A, B, midpoint(B, D)), exists(Line(B, midpoint(B, D)))
By not_in_line_equivalent_to_not_collinear_v0_r on G, B, F we get G not in Line(B, F)
By line_inequality on Line(B, F), Line(B, C), F we get Line(B, C) != Line(B, F)
By line_inequality on Line(B, F), Line(E, G), F we get Line(B, F) != Line(E, G)
By line_inequality on Line(B, F), Line(D, E), F we get Line(B, F) != Line(D, E)
By line_inequality on Line(B, F), f, F we get f != Line(B, F)
By line_inequality on Line(B, F), h, B we get h != Line(B, F)
By line_circle_intersection_has_at_most_two_points_0 on F, E, midpoint(B, D), d we get midpoint(B, D) not in d
By not_in_line_equivalent_to_not_collinear_v0_r on D, F, B we get D not in Line(B, F)
By not_in_line_equivalent_to_not_collinear_v0_r on G, D, F we get G not in Line(D, F)
By line_inequality on Line(B, F), i, B we get i != Line(B, F)
By line_inequality on Line(D, F), Line(B, E), D we get Line(B, E) != Line(D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on H, D, F we get H not in Line(D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on A, B, F we get A not in Line(B, F)
By line_inequality on Line(D, F), Line(F, G), D we get Line(D, F) != Line(F, G)
By line_inequality on Line(B, F), Line(F, G), B we get Line(B, F) != Line(F, G)
By line_inequality on Line(D, F), i, D we get i != Line(D, F)
By line_inequality on Line(D, F), h, D we get h != Line(D, F)
By collinear_definition on F, E, midpoint(B, D) we get E in Line(F, midpoint(B, D)), midpoint(B, D) in Line(E, F), Line(E, F) == Line(F, midpoint(B, D)), 0 == 2 * angle(E, F, midpoint(B, D)) mod 360
By internal_angle_bisector_definition_v0_r on D, E, B, F we get Line(E, F) == internal_angle_bisector(B, F, D)
By internal_angle_bisector_definition_v0_r on B, midpoint(B, D), B, D we get Line(D, midpoint(B, D)) == internal_angle_bisector(B, D, B)
By internal_angle_bisector_definition_v0_r on D, midpoint(B, D), D, B we get Line(B, midpoint(B, D)) == internal_angle_bisector(D, B, D)
By internal_angle_bisector_definition_v0 on D, midpoint(B, D), B, E we get angle(D, E, midpoint(B, D)) == angle(midpoint(B, D), E, B) mod 360
By internal_angle_bisector_definition_v0_r on D, B, D, midpoint(B, D) we get Line(B, midpoint(B, D)) == internal_angle_bisector(D, midpoint(B, D), D)
By internal_angle_bisector_definition_v0_r on G, F, D, E we get Line(E, F) == internal_angle_bisector(D, E, G)
By perpendicular_lines_draw_intersection on Line(E, G), radical_axis(c, d) we get exists(line_intersection(Line(E, G), radical_axis(c, d)))
By internal_angle_bisector_definition_v0 on D, F, B, midpoint(B, D) we get angle(D, midpoint(B, D), F) == angle(F, midpoint(B, D), B) mod 360
By perpendicular_angle_conditions_v0 on E, midpoint(B, D), B we get angle(E, midpoint(B, D), B) == orientation(B, E, midpoint(B, D)) mod 360
By isosceles_triangle_altitude_v0 on F, D, B we get identical(perpendicular_bisector(B, D), internal_angle_bisector(B, F, D), perpendicular_line(F, Line(B, D)))
By internal_angle_bisector_definition_v0 on D, E, B, midpoint(B, D) we get angle(D, midpoint(B, D), E) == angle(E, midpoint(B, D), B) mod 360
By collinear_definition on F, midpoint(B, D), E we get midpoint(B, D) in Line(E, F), E in Line(F, midpoint(B, D)), Line(E, F) == Line(F, midpoint(B, D)), 0 == 2 * angle(midpoint(B, D), F, E) mod 360
By internal_angle_bisector_definition_v0 on B, E, D, midpoint(B, D) we get angle(B, midpoint(B, D), E) == angle(E, midpoint(B, D), D) mod 360
By isosceles_triangle_altitude_v1 on F, D, B we get identical(perpendicular_bisector(B, D), internal_angle_bisector(B, F, D), perpendicular_line(F, Line(B, D)))
By internal_angle_bisector_definition_v0 on B, F, D, midpoint(B, D) we get angle(B, midpoint(B, D), F) == angle(F, midpoint(B, D), D) mod 360
By perpendicular_angle_conditions_v0 on D, midpoint(B, D), E we get angle(D, midpoint(B, D), E) == orientation(D, midpoint(B, D), E) mod 360
By collinear_definition on E, F, midpoint(B, D) we get F in Line(E, midpoint(B, D)), midpoint(B, D) in Line(E, F), Line(E, F) == Line(E, midpoint(B, D)), 0 == 2 * angle(F, E, midpoint(B, D)) mod 360
By perpendicular_angle_conditions_v0 on D, midpoint(B, D), F we get angle(D, midpoint(B, D), F) == orientation(D, midpoint(B, D), F) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(B, D), B, midpoint(B, D), D we get Line(B, D) == internal_angle_bisector(midpoint(B, D), D, midpoint(B, D))
By internal_angle_bisector_definition_v0_r on B, D, B, midpoint(B, D) we get Line(D, midpoint(B, D)) == internal_angle_bisector(B, midpoint(B, D), B)
By perpendicular_angle_conditions_v0 on B, midpoint(B, D), F we get angle(B, midpoint(B, D), F) == orientation(B, midpoint(B, D), F) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(B, D), D, midpoint(B, D), B we get Line(B, D) == internal_angle_bisector(midpoint(B, D), B, midpoint(B, D))
By isosceles_triangle_altitude_v3 on F, B, D we get identical(perpendicular_bisector(B, D), internal_angle_bisector(B, F, D), perpendicular_line(F, Line(B, D)))
By perpendicular_angle_conditions_v0 on B, midpoint(B, D), E we get angle(B, midpoint(B, D), E) == orientation(B, midpoint(B, D), E) mod 360
By internal_angle_bisector_definition_v0 on B, midpoint(B, D), D, E we get angle(B, E, midpoint(B, D)) == angle(midpoint(B, D), E, D) mod 360
By perpendicular_angle_conditions_v0 on F, midpoint(B, D), B we get angle(F, midpoint(B, D), B) == orientation(B, F, midpoint(B, D)) mod 360
By perpendicular_angle_conditions_v0 on E, midpoint(B, D), D we get angle(E, midpoint(B, D), D) == orientation(D, E, midpoint(B, D)) mod 360
By collinear_definition on E, midpoint(B, D), F we get midpoint(B, D) in Line(E, F), F in Line(E, midpoint(B, D)), Line(E, F) == Line(E, midpoint(B, D)), 0 == 2 * angle(midpoint(B, D), E, F) mod 360
By perpendicular_angle_conditions_v0 on F, midpoint(B, D), D we get angle(F, midpoint(B, D), D) == orientation(D, F, midpoint(B, D)) mod 360
By internal_angle_bisector_definition_v0 on H, midpoint(B, D), D, E we get angle(H, E, midpoint(B, D)) == angle(midpoint(B, D), E, D) mod 360
By internal_angle_bisector_definition_v0 on D, midpoint(B, D), H, E we get angle(D, E, midpoint(B, D)) == angle(midpoint(B, D), E, H) mod 360
By isosceles_triangle_altitude_v0 on F, B, D we get identical(perpendicular_bisector(B, D), internal_angle_bisector(B, F, D), perpendicular_line(F, Line(B, D)))
By isosceles_triangle_altitude_v1 on F, B, D we get identical(perpendicular_bisector(B, D), internal_angle_bisector(B, F, D), perpendicular_line(F, Line(B, D)))
By isosceles_triangle_altitude_v3 on F, D, B we get identical(perpendicular_bisector(B, D), internal_angle_bisector(B, F, D), perpendicular_line(F, Line(B, D)))
By anti_similar_triangle_basic_properties on F, E, B, F, E, D we get not_collinear(B, E, F), not_collinear(D, E, F), angle(F, E, B) == 0 - angle(F, E, D) mod 360, angle(E, B, F) == 0 - angle(E, D, F) mod 360, angle(B, F, E) == 0 - angle(D, F, E) mod 360, log(distance(E, F)) + log(distance(B, E)) == log(distance(E, F)) + log(distance(D, E)), log(distance(B, E)) + log(distance(D, F)) == log(distance(D, E)) + log(distance(B, F)), log(distance(B, F)) + log(distance(E, F)) == log(distance(D, F)) + log(distance(E, F))
By anti_similar_triangle_basic_properties on F, B, E, F, D, E we get not_collinear(B, E, F), not_collinear(D, E, F), angle(F, B, E) == 0 - angle(F, D, E) mod 360, angle(B, E, F) == 0 - angle(D, E, F) mod 360, angle(E, F, B) == 0 - angle(E, F, D) mod 360, log(distance(B, F)) + log(distance(D, E)) == log(distance(D, F)) + log(distance(B, E)), log(distance(B, E)) + log(distance(E, F)) == log(distance(D, E)) + log(distance(E, F)), log(distance(E, F)) + log(distance(B, F)) == log(distance(E, F)) + log(distance(D, F))
By collinear_definition on midpoint(B, D), E, F we get E in Line(F, midpoint(B, D)), F in Line(E, midpoint(B, D)), Line(E, midpoint(B, D)) == Line(F, midpoint(B, D)), 0 == 2 * angle(E, midpoint(B, D), F) mod 360
By altitude_definition on C, G, E, radical_axis(c, d) we get altitude(C, E, G) == radical_axis(c, d)
By collinear_definition on midpoint(B, D), F, E we get F in Line(E, midpoint(B, D)), E in Line(F, midpoint(B, D)), Line(E, midpoint(B, D)) == Line(F, midpoint(B, D)), 0 == 2 * angle(F, midpoint(B, D), E) mod 360
By power_of_a_point_definition on midpoint(B, D), B, D, c we get log(power_of_a_point(midpoint(B, D), c)) == log(distance(B, midpoint(B, D))) + log(distance(D, midpoint(B, D)))
By right_triangle_circumcenter_v1 on B, midpoint(B, D), E we get midpoint(B, E) == circumcenter(B, E, midpoint(B, D))
By line_intersection_definition on D, g, Line(D, F) we get D == line_intersection(g, Line(D, F))
By line_intersection_definition on F, Line(B, F), Line(F, G) we get F == line_intersection(Line(B, F), Line(F, G))
By line_intersection_definition on D, Line(B, D), Line(D, F) we get D == line_intersection(Line(B, D), Line(D, F))
By line_intersection_definition on B, Line(B, F), Line(B, C) we get B == line_intersection(Line(B, C), Line(B, F))
By line_intersection_definition on B, Line(B, E), Line(B, F) we get B == line_intersection(Line(B, E), Line(B, F))
By line_intersection_definition on D, Line(D, F), Line(A, D) we get D == line_intersection(Line(A, D), Line(D, F))
By line_intersection_definition on F, Line(B, F), i we get F == line_intersection(i, Line(B, F))
By line_intersection_definition on B, Line(B, D), Line(B, F) we get B == line_intersection(Line(B, D), Line(B, F))
By perpendicular_line_definition on line_intersection(Line(E, G), altitude(C, E, G)), Line(E, G), altitude(C, E, G) we get Line(E, G) == perpendicular_line(line_intersection(Line(E, G), altitude(C, E, G)), altitude(C, E, G))
By line_intersection_definition on D, Line(D, E), Line(D, F) we get D == line_intersection(Line(D, E), Line(D, F))
By line_intersection_definition on F, i, Line(D, F) we get F == line_intersection(i, Line(D, F))
By line_intersection_definition on F, Line(F, G), Line(D, F) we get F == line_intersection(Line(D, F), Line(F, G))
By line_intersection_definition on F, Line(B, F), h we get F == line_intersection(h, Line(B, F))
By line_intersection_definition on B, f, Line(B, F) we get B == line_intersection(f, Line(B, F))
By line_intersection_definition on F, Line(D, F), h we get F == line_intersection(h, Line(D, F))
By perpendicular_line_definition on line_intersection(Line(E, G), altitude(C, E, G)), altitude(C, E, G), Line(E, G) we get altitude(C, E, G) == perpendicular_line(line_intersection(Line(E, G), altitude(C, E, G)), Line(E, G))
By line_unique_intersection_v1 on Line(B, F), Line(B, D), B, midpoint(B, D) we get midpoint(B, D) not in Line(B, F)
By line_unique_intersection_v1 on Line(D, F), i, F, midpoint(B, D) we get midpoint(B, D) not in Line(D, F)
By same_angle_v1 on B, D, midpoint(B, D), F we get angle(D, B, F) == angle(midpoint(B, D), B, F) mod 360
By same_angle_v1 on B, E, H, midpoint(B, D) we get angle(E, B, midpoint(B, D)) == angle(H, B, midpoint(B, D)) mod 360
By same_angle_v1 on D, B, midpoint(B, D), A we get angle(B, D, A) == angle(midpoint(B, D), D, A) mod 360
By same_angle_v0 on D, midpoint(B, D), B, F we get angle(B, D, F) == angle(midpoint(B, D), D, F) mod 360
By same_angle_v0 on E, midpoint(B, D), F, D we get angle(F, E, D) == angle(midpoint(B, D), E, D) mod 360
By same_angle_v0 on E, B, G, D we get angle(B, E, D) == angle(G, E, D) mod 360
By same_angle_v0 on E, H, G, D we get angle(G, E, D) == angle(H, E, D) mod 360
By same_angle_v1 on E, H, G, A we get angle(G, E, A) == angle(H, E, A) mod 360
By same_angle_v0 on B, D, midpoint(B, D), C we get angle(D, B, C) == angle(midpoint(B, D), B, C) mod 360
By same_angle_v1 on D, B, midpoint(B, D), C we get angle(B, D, C) == angle(midpoint(B, D), D, C) mod 360
By same_angle_v0 on B, D, midpoint(B, D), H we get angle(D, B, H) == angle(midpoint(B, D), B, H) mod 360
By same_angle_v0 on B, D, midpoint(B, D), A we get angle(D, B, A) == angle(midpoint(B, D), B, A) mod 360
By same_angle_v1 on D, B, midpoint(B, D), E we get angle(B, D, E) == angle(midpoint(B, D), D, E) mod 360
By same_angle_v0 on B, D, midpoint(B, D), E we get angle(D, B, E) == angle(midpoint(B, D), B, E) mod 360
By same_angle_v1 on F, midpoint(B, D), E, D we get angle(E, F, D) == angle(midpoint(B, D), F, D) mod 360
By same_angle_v0 on F, E, midpoint(B, D), B we get angle(E, F, B) == angle(midpoint(B, D), F, B) mod 360
By same_angle_v1 on E, midpoint(B, D), F, H we get angle(F, E, H) == angle(midpoint(B, D), E, H) mod 360
By same_angle_v1 on E, B, G, A we get angle(B, E, A) == angle(G, E, A) mod 360
By same_angle_v1 on E, F, midpoint(B, D), B we get angle(F, E, B) == angle(midpoint(B, D), E, B) mod 360
By circle_radius_v0_r on midpoint(B, D), Circle(B, E, midpoint(B, D)) we get radius(Circle(B, E, midpoint(B, D))) == distance(midpoint(B, D), center(Circle(B, E, midpoint(B, D))))
By parallel_line_definition on G, Line(F, G), Line(D, E) we get Line(F, G) == parallel_line(G, Line(D, E))
By circle_radius_v0_r on B, Circle(B, E, midpoint(B, D)) we get radius(Circle(B, E, midpoint(B, D))) == distance(B, center(Circle(B, E, midpoint(B, D))))
By parallel_line_definition on D, Line(D, E), Line(F, G) we get Line(D, E) == parallel_line(D, Line(F, G))
By parallel_line_definition on F, Line(F, G), Line(D, E) we get Line(F, G) == parallel_line(F, Line(D, E))
By parallel_line_definition on E, Line(D, E), Line(F, G) we get Line(D, E) == parallel_line(E, Line(F, G))
By circle_radius_v0_r on E, Circle(B, E, midpoint(B, D)) we get radius(Circle(B, E, midpoint(B, D))) == distance(E, center(Circle(B, E, midpoint(B, D))))
By angle_to_center on B, E, midpoint(B, D), Circle(B, E, midpoint(B, D)) we get 2 * angle(B, E, midpoint(B, D)) == angle(B, center(Circle(B, E, midpoint(B, D))), midpoint(B, D)) mod 360
By angle_to_center on midpoint(B, D), E, B, Circle(B, E, midpoint(B, D)) we get 2 * angle(midpoint(B, D), E, B) == angle(midpoint(B, D), center(Circle(B, E, midpoint(B, D))), B) mod 360
By angle_to_center on midpoint(B, D), B, E, Circle(B, E, midpoint(B, D)) we get 2 * angle(midpoint(B, D), B, E) == angle(midpoint(B, D), center(Circle(B, E, midpoint(B, D))), E) mod 360
By same_angle_v0 on B, E, G, C we get angle(E, B, C) == angle(G, B, C) mod 360
By different_centers_imply_different_circles on Circle(B, E, midpoint(B, D)), c we get c != Circle(B, E, midpoint(B, D))
By different_centers_imply_different_circles on d, Circle(B, E, midpoint(B, D)) we get d != Circle(B, E, midpoint(B, D))
By angle_to_center on E, B, midpoint(B, D), Circle(B, E, midpoint(B, D)) we get 2 * angle(E, B, midpoint(B, D)) == angle(E, center(Circle(B, E, midpoint(B, D))), midpoint(B, D)) mod 360
By same_angle_v1 on B, G, E, F we get angle(E, B, F) == angle(G, B, F) mod 360
By center_not_on_circle on Circle(B, E, midpoint(B, D)) we get center(Circle(B, E, midpoint(B, D))) not in Circle(B, E, midpoint(B, D))
By same_angle_v1 on G, E, H, F we get angle(E, G, F) == angle(H, G, F) mod 360
By divide_by_2_mod_180_v1 on D, A, B, midpoint(B, D), E, H we get angle(D, A, B) == angle(midpoint(B, D), E, H) mod 360
By same_angle_v0 on G, H, E, C we get angle(E, G, C) == angle(H, G, C) mod 360
By same_angle_v1 on B, E, G, D we get angle(E, B, D) == angle(G, B, D) mod 360
By same_angle_v0 on B, G, E, A we get angle(E, B, A) == angle(G, B, A) mod 360
By same_angle_v2 on G, B, E, F we get angle(B, G, F) == angle(E, G, F) + 180 mod 360
By divide_by_2_mod_180_v1 on F, E, G, midpoint(B, D), E, H we get angle(F, E, G) == angle(midpoint(B, D), E, H) mod 360
By divide_by_2_mod_180_v1 on F, E, G, D, E, midpoint(B, D) we get angle(F, E, G) == angle(D, E, midpoint(B, D)) mod 360
By same_angle_v2 on G, E, B, C we get angle(E, G, C) == angle(B, G, C) + 180 mod 360
By same_angle_v1 on B, E, G, midpoint(B, D) we get angle(E, B, midpoint(B, D)) == angle(G, B, midpoint(B, D)) mod 360
By sss_anti_congruence_v0 on E, midpoint(B, D), B, E, midpoint(B, D), D we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By probably_between_and_collinear_implies_between on E, H, G we get between(E, H, G)
By divide_by_2_mod_180_v1 on D, E, F, midpoint(B, D), E, H we get angle(D, E, F) == angle(midpoint(B, D), E, H) mod 360
By divide_by_2_mod_180_v1 on D, E, F, midpoint(B, D), E, B we get angle(D, E, F) == angle(midpoint(B, D), E, B) mod 360
By divide_by_2_mod_180_v1 on A, D, C, midpoint(B, D), E, B we get angle(A, D, C) == angle(midpoint(B, D), E, B) mod 360
By sss_anti_congruence_v1 on D, E, midpoint(B, D), B, E, midpoint(B, D) we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By divide_by_2_mod_180_v0 on B, E, midpoint(B, D), B, A, D we get angle(B, A, D) == angle(B, E, midpoint(B, D)) mod 360
By in_imply_collinear on line_intersection(Line(E, G), altitude(C, E, G)), E, G we get collinear(E, G, line_intersection(Line(E, G), altitude(C, E, G)))
By probably_between_and_collinear_implies_between on B, G, E we get between(B, G, E)
By divide_by_2_mod_180_v0 on midpoint(B, D), E, D, H, E, F we get angle(H, E, F) == angle(midpoint(B, D), E, D) mod 360
By reverse_orientation on C, F, midpoint(B, D) we get orientation(C, F, midpoint(B, D)) == 0 - orientation(C, midpoint(B, D), F) mod 360
By divide_by_2_mod_180_v0 on B, C, D, B, E, midpoint(B, D) we get angle(B, C, D) == angle(B, E, midpoint(B, D)) mod 360
By sss_anti_congruence_v0 on F, B, midpoint(B, D), F, D, midpoint(B, D) we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By divide_by_2_mod_180_v1 on midpoint(B, D), E, H, A, D, C we get angle(A, D, C) == angle(midpoint(B, D), E, H) mod 360
By sas_anti_congruence on F, midpoint(B, D), B, F, midpoint(B, D), D we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By divide_by_2_mod_180_v1 on midpoint(B, D), E, B, F, E, H we get angle(F, E, H) == angle(midpoint(B, D), E, B) mod 360
By divide_by_2_mod_180_v1 on A, B, C, D, E, midpoint(B, D) we get angle(A, B, C) == angle(D, E, midpoint(B, D)) mod 360
By divide_by_2_mod_180_v0 on B, E, F, midpoint(B, D), E, D we get angle(B, E, F) == angle(midpoint(B, D), E, D) mod 360
By sss_anti_congruence_v0 on F, midpoint(B, D), D, F, midpoint(B, D), B we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By divide_by_2_mod_180_v1 on D, C, B, D, E, midpoint(B, D) we get angle(D, C, B) == angle(D, E, midpoint(B, D)) mod 360
By asa_anti_congruence on E, midpoint(B, D), D, E, midpoint(B, D), B we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By reverse_orientation on F, C, midpoint(B, D) we get orientation(C, midpoint(B, D), F) == 0 - orientation(C, F, midpoint(B, D)) mod 360
By divide_by_2_mod_180_v1 on D, C, B, midpoint(B, D), E, H we get angle(D, C, B) == angle(midpoint(B, D), E, H) mod 360
By sss_anti_congruence_v0 on B, E, midpoint(B, D), D, E, midpoint(B, D) we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By divide_by_2_mod_180_v0 on H, E, midpoint(B, D), E, F, G we get angle(E, F, G) == angle(H, E, midpoint(B, D)) mod 360
By divide_by_2_mod_180_v0 on B, E, midpoint(B, D), H, E, F we get angle(H, E, F) == angle(B, E, midpoint(B, D)) mod 360
By divide_by_2_mod_180_v0 on F, E, D, H, E, midpoint(B, D) we get angle(F, E, D) == angle(H, E, midpoint(B, D)) mod 360
By sss_anti_congruence_v1 on midpoint(B, D), F, D, midpoint(B, D), F, B we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By reverse_orientation on F, midpoint(B, D), A we get orientation(A, F, midpoint(B, D)) == 0 - orientation(A, midpoint(B, D), F) mod 360
By divide_by_2_mod_180_v1 on F, E, B, midpoint(B, D), E, H we get angle(F, E, B) == angle(midpoint(B, D), E, H) mod 360
By divide_by_2_mod_180_v0 on midpoint(B, D), E, D, B, C, D we get angle(B, C, D) == angle(midpoint(B, D), E, D) mod 360
By divide_by_2_mod_180_v0 on H, E, midpoint(B, D), C, B, A we get angle(C, B, A) == angle(H, E, midpoint(B, D)) mod 360
By divide_by_2_mod_180_v0 on H, E, midpoint(B, D), B, C, D we get angle(B, C, D) == angle(H, E, midpoint(B, D)) mod 360
By divide_by_2_mod_180_v1 on D, C, B, midpoint(B, D), E, B we get angle(D, C, B) == angle(midpoint(B, D), E, B) mod 360
By line_circle_intersection_has_at_most_two_points_0 on midpoint(B, D), E, F, Circle(B, E, midpoint(B, D)) we get F not in Circle(B, E, midpoint(B, D))
By divide_by_2_mod_180_v0 on B, E, midpoint(B, D), F, E, D we get angle(F, E, D) == angle(B, E, midpoint(B, D)) mod 360
By sss_anti_congruence_v1 on E, B, midpoint(B, D), E, D, midpoint(B, D) we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By divide_by_2_mod_180_v1 on midpoint(B, D), E, B, F, E, G we get angle(F, E, G) == angle(midpoint(B, D), E, B) mod 360
By sss_anti_congruence_v0 on F, B, midpoint(B, D), F, D, midpoint(B, D) we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By sss_anti_congruence_v0 on F, B, midpoint(B, D), F, D, midpoint(B, D) we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By divide_by_2_mod_180_v0 on H, E, midpoint(B, D), H, E, F we get angle(H, E, F) == angle(H, E, midpoint(B, D)) mod 360
By sss_anti_congruence_v1 on B, midpoint(B, D), E, D, midpoint(B, D), E we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By divide_by_2_mod_180_v1 on midpoint(B, D), E, H, G, F, E we get angle(G, F, E) == angle(midpoint(B, D), E, H) mod 360
By divide_by_2_mod_180_v0 on G, E, F, midpoint(B, D), E, D we get angle(G, E, F) == angle(midpoint(B, D), E, D) mod 360
By sss_anti_congruence_v1 on midpoint(B, D), E, B, midpoint(B, D), E, D we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By divide_by_2_mod_180_v1 on D, E, midpoint(B, D), A, D, C we get angle(A, D, C) == angle(D, E, midpoint(B, D)) mod 360
By divide_by_2_mod_180_v1 on midpoint(B, D), E, H, A, B, C we get angle(A, B, C) == angle(midpoint(B, D), E, H) mod 360
By divide_by_2_mod_180_v1 on D, E, midpoint(B, D), D, E, F we get angle(D, E, F) == angle(D, E, midpoint(B, D)) mod 360
By divide_by_2_mod_180_v0 on H, E, midpoint(B, D), C, D, A we get angle(C, D, A) == angle(H, E, midpoint(B, D)) mod 360
By divide_by_2_mod_180_v0 on midpoint(B, D), E, D, C, D, A we get angle(C, D, A) == angle(midpoint(B, D), E, D) mod 360
By divide_by_2_mod_180_v0 on B, E, F, B, E, midpoint(B, D) we get angle(B, E, F) == angle(B, E, midpoint(B, D)) mod 360
By sss_anti_congruence_v1 on D, E, midpoint(B, D), B, E, midpoint(B, D) we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sss_anti_congruence_v0 on midpoint(B, D), F, B, midpoint(B, D), F, D we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By parallel_line_angles_reverse_v3 on D, E, G, F we get angle(D, E, G) == angle(F, G, E) + 180 mod 360
By divide_by_2_mod_180_v1 on D, E, midpoint(B, D), F, E, B we get angle(F, E, B) == angle(D, E, midpoint(B, D)) mod 360
By divide_by_2_mod_180_v0 on E, F, G, midpoint(B, D), E, D we get angle(E, F, G) == angle(midpoint(B, D), E, D) mod 360
By divide_by_2_mod_180_v1 on midpoint(B, D), E, B, A, B, C we get angle(A, B, C) == angle(midpoint(B, D), E, B) mod 360
By sss_anti_congruence_v0 on D, F, midpoint(B, D), B, F, midpoint(B, D) we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By sss_anti_congruence_v0 on F, B, midpoint(B, D), F, D, midpoint(B, D) we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By divide_by_2_mod_180_v0 on G, E, F, B, E, midpoint(B, D) we get angle(G, E, F) == angle(B, E, midpoint(B, D)) mod 360
By line_containment_inequality on line_intersection(Line(E, G), altitude(C, E, G)), C, Line(E, G) we get C != line_intersection(Line(E, G), altitude(C, E, G))
By divide_by_2_mod_180_v0 on midpoint(B, D), E, D, B, A, D we get angle(B, A, D) == angle(midpoint(B, D), E, D) mod 360
By divide_by_2_mod_180_v0 on H, E, midpoint(B, D), B, E, F we get angle(B, E, F) == angle(H, E, midpoint(B, D)) mod 360
By sss_anti_congruence_v0 on D, midpoint(B, D), E, B, midpoint(B, D), E we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By parallel_line_angles_reverse_v3 on G, F, D, E we get angle(G, F, D) == angle(E, D, F) + 180 mod 360
By sss_anti_congruence_v0 on D, midpoint(B, D), E, B, midpoint(B, D), E we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By divide_by_2_mod_180_v1 on D, A, B, D, E, midpoint(B, D) we get angle(D, A, B) == angle(D, E, midpoint(B, D)) mod 360
By sss_anti_congruence_v0 on midpoint(B, D), E, D, midpoint(B, D), E, B we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sss_anti_congruence_v1 on E, B, midpoint(B, D), E, D, midpoint(B, D) we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By divide_by_2_mod_180_v1 on G, F, E, D, E, midpoint(B, D) we get angle(G, F, E) == angle(D, E, midpoint(B, D)) mod 360
By sss_anti_congruence_v1 on F, midpoint(B, D), B, F, midpoint(B, D), D we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By divide_by_2_mod_180_v0 on B, E, midpoint(B, D), C, B, A we get angle(C, B, A) == angle(B, E, midpoint(B, D)) mod 360
By line_containment_inequality on line_intersection(Line(E, G), altitude(C, E, G)), A, Line(E, G) we get A != line_intersection(Line(E, G), altitude(C, E, G))
By collinear_definition on E, G, H we get G in Line(E, H), H in Line(E, G), Line(E, G) == Line(E, H), 0 == 2 * angle(G, E, H) mod 360
By sss_anti_congruence_v1 on B, F, midpoint(B, D), D, F, midpoint(B, D) we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By sss_anti_congruence_v0 on F, B, midpoint(B, D), F, D, midpoint(B, D) we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By divide_by_2_mod_180_v1 on D, E, midpoint(B, D), F, E, H we get angle(F, E, H) == angle(D, E, midpoint(B, D)) mod 360
By aa_anti_similarity on D, midpoint(B, D), E, B, midpoint(B, D), E we get anti_similar_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sss_anti_congruence_v0 on B, midpoint(B, D), F, D, midpoint(B, D), F we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By reverse_orientation on A, midpoint(B, D), F we get orientation(A, midpoint(B, D), F) == 0 - orientation(A, F, midpoint(B, D)) mod 360
By divide_by_2_mod_180_v0 on midpoint(B, D), E, D, C, B, A we get angle(C, B, A) == angle(midpoint(B, D), E, D) mod 360
By sss_anti_congruence_v0 on E, D, midpoint(B, D), E, B, midpoint(B, D) we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By divide_by_2_mod_180_v0 on G, E, F, H, E, midpoint(B, D) we get angle(G, E, F) == angle(H, E, midpoint(B, D)) mod 360
By sss_anti_congruence_v1 on midpoint(B, D), D, E, midpoint(B, D), B, E we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sss_anti_congruence_v1 on F, midpoint(B, D), B, F, midpoint(B, D), D we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By divide_by_2_mod_180_v1 on midpoint(B, D), E, B, D, A, B we get angle(D, A, B) == angle(midpoint(B, D), E, B) mod 360
By sss_anti_congruence_v0 on D, F, midpoint(B, D), B, F, midpoint(B, D) we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By sss_anti_congruence_v1 on midpoint(B, D), F, D, midpoint(B, D), F, B we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By divide_by_2_mod_180_v0 on C, D, A, B, E, midpoint(B, D) we get angle(C, D, A) == angle(B, E, midpoint(B, D)) mod 360
By sss_anti_congruence_v0 on B, E, midpoint(B, D), D, E, midpoint(B, D) we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By collinear_definition on E, H, G we get H in Line(E, G), G in Line(E, H), Line(E, G) == Line(E, H), 0 == 2 * angle(H, E, G) mod 360
By sss_anti_congruence_v0 on D, F, midpoint(B, D), B, F, midpoint(B, D) we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By sss_anti_congruence_v0 on midpoint(B, D), D, F, midpoint(B, D), B, F we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By sss_anti_congruence_v1 on F, D, midpoint(B, D), F, B, midpoint(B, D) we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By sas_anti_congruence on F, midpoint(B, D), D, F, midpoint(B, D), B we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By parallel_line_angles_reverse_v2 on E, D, F, G we get angle(E, D, F) == angle(G, F, D) + 180 mod 360
By sss_anti_congruence_v0 on F, midpoint(B, D), D, F, midpoint(B, D), B we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By sss_anti_congruence_v0 on D, midpoint(B, D), E, B, midpoint(B, D), E we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By internal_angle_bisector_definition_v0 on D, midpoint(B, D), B, F we get angle(D, F, midpoint(B, D)) == angle(midpoint(B, D), F, B) mod 360
By sss_anti_congruence_v1 on D, E, midpoint(B, D), B, E, midpoint(B, D) we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sss_anti_congruence_v1 on midpoint(B, D), F, D, midpoint(B, D), F, B we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By sas_anti_congruence on midpoint(B, D), E, D, midpoint(B, D), E, B we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By parallel_line_angles_reverse_v2 on F, G, E, D we get angle(F, G, E) == angle(D, E, G) + 180 mod 360
By sss_anti_congruence_v1 on midpoint(B, D), D, E, midpoint(B, D), B, E we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By divide_by_2_mod_180_v0 on B, E, midpoint(B, D), E, F, G we get angle(E, F, G) == angle(B, E, midpoint(B, D)) mod 360
By sas_anti_congruence on midpoint(B, D), E, B, midpoint(B, D), E, D we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sss_anti_congruence_v0 on E, midpoint(B, D), B, E, midpoint(B, D), D we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sss_anti_congruence_v1 on F, D, midpoint(B, D), F, B, midpoint(B, D) we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By sss_anti_congruence_v1 on B, midpoint(B, D), E, D, midpoint(B, D), E we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sss_anti_congruence_v1 on midpoint(B, D), B, F, midpoint(B, D), D, F we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By sss_anti_congruence_v1 on E, B, midpoint(B, D), E, D, midpoint(B, D) we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sss_anti_congruence_v0 on B, midpoint(B, D), F, D, midpoint(B, D), F we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(B, D), C, A we get not_collinear(A, C, midpoint(B, D)), exists(Line(A, C))
By divide_by_2_mod_180_v1 on midpoint(B, D), E, B, G, F, E we get angle(G, F, E) == angle(midpoint(B, D), E, B) mod 360
By sss_anti_congruence_v1 on B, F, midpoint(B, D), D, F, midpoint(B, D) we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By sss_anti_congruence_v0 on E, D, midpoint(B, D), E, B, midpoint(B, D) we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sss_anti_congruence_v1 on F, midpoint(B, D), B, F, midpoint(B, D), D we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By sss_anti_congruence_v0 on F, midpoint(B, D), D, F, midpoint(B, D), B we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By internal_angle_bisector_definition_v0 on G, midpoint(B, D), D, E we get angle(G, E, midpoint(B, D)) == angle(midpoint(B, D), E, D) mod 360
By aa_anti_similarity on B, midpoint(B, D), E, D, midpoint(B, D), E we get anti_similar_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sss_anti_congruence_v0 on D, F, midpoint(B, D), B, F, midpoint(B, D) we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By sss_anti_congruence_v0 on F, B, midpoint(B, D), F, D, midpoint(B, D) we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By sss_anti_congruence_v1 on midpoint(B, D), E, B, midpoint(B, D), E, D we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sss_anti_congruence_v1 on midpoint(B, D), E, B, midpoint(B, D), E, D we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sss_anti_congruence_v1 on F, D, midpoint(B, D), F, B, midpoint(B, D) we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By sss_anti_congruence_v1 on B, F, midpoint(B, D), D, F, midpoint(B, D) we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By divide_by_2_mod_180_v0 on B, A, D, H, E, midpoint(B, D) we get angle(B, A, D) == angle(H, E, midpoint(B, D)) mod 360
By reverse_direction on F, midpoint(B, D) we get 180 == direction(F, midpoint(B, D)) - direction(midpoint(B, D), F) mod 360
By reverse_direction on midpoint(B, D), F we get 180 == direction(midpoint(B, D), F) - direction(F, midpoint(B, D)) mod 360
By sss_anti_congruence_v0 on E, midpoint(B, D), B, E, midpoint(B, D), D we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sss_anti_congruence_v0 on midpoint(B, D), B, E, midpoint(B, D), D, E we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sss_anti_congruence_v1 on D, midpoint(B, D), F, B, midpoint(B, D), F we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By sss_anti_congruence_v1 on midpoint(B, D), D, E, midpoint(B, D), B, E we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sss_anti_congruence_v0 on midpoint(B, D), E, D, midpoint(B, D), E, B we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sss_anti_congruence_v0 on B, midpoint(B, D), F, D, midpoint(B, D), F we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By sss_anti_congruence_v0 on midpoint(B, D), F, B, midpoint(B, D), F, D we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By sss_anti_congruence_v1 on midpoint(B, D), E, B, midpoint(B, D), E, D we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sss_anti_congruence_v1 on D, midpoint(B, D), F, B, midpoint(B, D), F we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By sss_anti_congruence_v1 on F, midpoint(B, D), B, F, midpoint(B, D), D we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By sss_anti_congruence_v1 on E, midpoint(B, D), D, E, midpoint(B, D), B we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sss_anti_congruence_v1 on midpoint(B, D), D, E, midpoint(B, D), B, E we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sas_anti_congruence on D, E, midpoint(B, D), B, E, midpoint(B, D) we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sss_anti_congruence_v0 on F, midpoint(B, D), D, F, midpoint(B, D), B we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By sss_anti_congruence_v1 on B, F, midpoint(B, D), D, F, midpoint(B, D) we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By sss_anti_congruence_v0 on D, midpoint(B, D), E, B, midpoint(B, D), E we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sss_anti_congruence_v1 on B, midpoint(B, D), E, D, midpoint(B, D), E we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sss_anti_congruence_v1 on F, D, midpoint(B, D), F, B, midpoint(B, D) we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By sss_anti_congruence_v1 on B, midpoint(B, D), E, D, midpoint(B, D), E we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sss_anti_congruence_v1 on D, E, midpoint(B, D), B, E, midpoint(B, D) we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sss_anti_congruence_v1 on midpoint(B, D), B, F, midpoint(B, D), D, F we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By asa_anti_congruence on midpoint(B, D), E, D, midpoint(B, D), E, B we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sss_anti_congruence_v0 on B, E, midpoint(B, D), D, E, midpoint(B, D) we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sss_anti_congruence_v0 on midpoint(B, D), F, B, midpoint(B, D), F, D we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By sas_anti_congruence on B, midpoint(B, D), E, D, midpoint(B, D), E we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sss_anti_congruence_v0 on F, midpoint(B, D), D, F, midpoint(B, D), B we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By sss_anti_congruence_v0 on D, midpoint(B, D), E, B, midpoint(B, D), E we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sss_anti_congruence_v1 on F, D, midpoint(B, D), F, B, midpoint(B, D) we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By sas_anti_congruence on D, midpoint(B, D), F, B, midpoint(B, D), F we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By sss_anti_congruence_v0 on E, D, midpoint(B, D), E, B, midpoint(B, D) we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sss_anti_congruence_v0 on midpoint(B, D), D, F, midpoint(B, D), B, F we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By sss_anti_congruence_v0 on D, F, midpoint(B, D), B, F, midpoint(B, D) we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By sss_anti_congruence_v1 on F, midpoint(B, D), B, F, midpoint(B, D), D we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By sss_anti_congruence_v0 on D, midpoint(B, D), E, B, midpoint(B, D), E we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sas_anti_congruence on D, midpoint(B, D), E, B, midpoint(B, D), E we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sss_anti_congruence_v1 on midpoint(B, D), D, E, midpoint(B, D), B, E we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By internal_angle_bisector_definition_v0 on D, midpoint(B, D), G, E we get angle(D, E, midpoint(B, D)) == angle(midpoint(B, D), E, G) mod 360
By sss_anti_congruence_v1 on F, midpoint(B, D), B, F, midpoint(B, D), D we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By aa_anti_similarity on D, E, midpoint(B, D), B, E, midpoint(B, D) we get anti_similar_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sss_anti_congruence_v0 on E, D, midpoint(B, D), E, B, midpoint(B, D) we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By asa_anti_congruence on midpoint(B, D), E, B, midpoint(B, D), E, D we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sss_anti_congruence_v0 on midpoint(B, D), D, F, midpoint(B, D), B, F we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By sss_anti_congruence_v1 on E, B, midpoint(B, D), E, D, midpoint(B, D) we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sss_anti_congruence_v0 on midpoint(B, D), F, B, midpoint(B, D), F, D we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By sss_anti_congruence_v1 on E, midpoint(B, D), D, E, midpoint(B, D), B we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sss_anti_congruence_v1 on E, B, midpoint(B, D), E, D, midpoint(B, D) we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sss_anti_congruence_v0 on B, E, midpoint(B, D), D, E, midpoint(B, D) we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sss_anti_congruence_v0 on midpoint(B, D), E, D, midpoint(B, D), E, B we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By reverse_direction on E, midpoint(B, D) we get 180 == direction(E, midpoint(B, D)) - direction(midpoint(B, D), E) mod 360
By sss_anti_congruence_v1 on D, midpoint(B, D), F, B, midpoint(B, D), F we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By sss_anti_congruence_v0 on midpoint(B, D), B, E, midpoint(B, D), D, E we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sss_anti_congruence_v0 on midpoint(B, D), B, E, midpoint(B, D), D, E we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sss_anti_congruence_v0 on F, midpoint(B, D), D, F, midpoint(B, D), B we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By sss_anti_congruence_v0 on midpoint(B, D), E, D, midpoint(B, D), E, B we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sss_anti_congruence_v1 on B, F, midpoint(B, D), D, F, midpoint(B, D) we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By sss_anti_congruence_v0 on midpoint(B, D), B, E, midpoint(B, D), D, E we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By collinear_definition on E, B, G we get B in Line(E, G), G in Line(B, E), Line(B, E) == Line(E, G), 0 == 2 * angle(B, E, G) mod 360
By sas_anti_congruence on B, E, midpoint(B, D), D, E, midpoint(B, D) we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sss_anti_congruence_v0 on B, midpoint(B, D), F, D, midpoint(B, D), F we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By sss_anti_congruence_v0 on B, midpoint(B, D), F, D, midpoint(B, D), F we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By sss_anti_congruence_v1 on midpoint(B, D), E, B, midpoint(B, D), E, D we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sss_anti_congruence_v1 on D, E, midpoint(B, D), B, E, midpoint(B, D) we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By collinear_definition on E, G, B we get G in Line(B, E), B in Line(E, G), Line(B, E) == Line(E, G), 0 == 2 * angle(G, E, B) mod 360
By sss_anti_congruence_v1 on midpoint(B, D), F, D, midpoint(B, D), F, B we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By sss_anti_congruence_v0 on B, midpoint(B, D), F, D, midpoint(B, D), F we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By sas_anti_congruence on B, midpoint(B, D), F, D, midpoint(B, D), F we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By sss_anti_congruence_v0 on D, F, midpoint(B, D), B, F, midpoint(B, D) we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By sss_anti_congruence_v0 on midpoint(B, D), B, E, midpoint(B, D), D, E we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sss_anti_congruence_v1 on E, midpoint(B, D), D, E, midpoint(B, D), B we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sss_anti_congruence_v0 on midpoint(B, D), F, B, midpoint(B, D), F, D we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By sss_anti_congruence_v1 on midpoint(B, D), D, E, midpoint(B, D), B, E we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By internal_angle_bisector_definition_v0 on B, midpoint(B, D), D, F we get angle(B, F, midpoint(B, D)) == angle(midpoint(B, D), F, D) mod 360
By sss_anti_congruence_v1 on midpoint(B, D), B, F, midpoint(B, D), D, F we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By sss_anti_congruence_v0 on midpoint(B, D), B, E, midpoint(B, D), D, E we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sss_anti_congruence_v0 on B, E, midpoint(B, D), D, E, midpoint(B, D) we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sss_anti_congruence_v0 on midpoint(B, D), E, D, midpoint(B, D), E, B we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sss_anti_congruence_v0 on E, midpoint(B, D), B, E, midpoint(B, D), D we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sss_anti_congruence_v0 on E, D, midpoint(B, D), E, B, midpoint(B, D) we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sss_anti_congruence_v1 on midpoint(B, D), B, F, midpoint(B, D), D, F we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By sss_anti_congruence_v0 on E, midpoint(B, D), B, E, midpoint(B, D), D we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By line_circle_intersection_has_at_most_two_points_0 on B, midpoint(B, D), D, Circle(B, E, midpoint(B, D)) we get D not in Circle(B, E, midpoint(B, D))
By sss_anti_congruence_v1 on D, midpoint(B, D), F, B, midpoint(B, D), F we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By sss_anti_congruence_v1 on B, midpoint(B, D), E, D, midpoint(B, D), E we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sss_anti_congruence_v1 on midpoint(B, D), B, F, midpoint(B, D), D, F we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By sss_anti_congruence_v0 on E, D, midpoint(B, D), E, B, midpoint(B, D) we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By reverse_direction on midpoint(B, D), E we get 180 == direction(midpoint(B, D), E) - direction(E, midpoint(B, D)) mod 360
By sss_anti_congruence_v0 on midpoint(B, D), F, B, midpoint(B, D), F, D we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By sas_anti_congruence on E, midpoint(B, D), D, E, midpoint(B, D), B we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sss_anti_congruence_v1 on F, D, midpoint(B, D), F, B, midpoint(B, D) we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By sss_anti_congruence_v1 on E, midpoint(B, D), D, E, midpoint(B, D), B we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sss_anti_congruence_v1 on D, midpoint(B, D), F, B, midpoint(B, D), F we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By sss_anti_congruence_v1 on D, E, midpoint(B, D), B, E, midpoint(B, D) we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sss_anti_congruence_v0 on midpoint(B, D), D, F, midpoint(B, D), B, F we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By sss_anti_congruence_v1 on E, B, midpoint(B, D), E, D, midpoint(B, D) we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sas_anti_congruence on E, midpoint(B, D), B, E, midpoint(B, D), D we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sss_anti_congruence_v1 on midpoint(B, D), F, D, midpoint(B, D), F, B we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By sss_anti_congruence_v1 on B, midpoint(B, D), E, D, midpoint(B, D), E we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sss_anti_congruence_v0 on midpoint(B, D), D, F, midpoint(B, D), B, F we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By sss_anti_congruence_v1 on D, midpoint(B, D), F, B, midpoint(B, D), F we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By sss_anti_congruence_v0 on E, midpoint(B, D), B, E, midpoint(B, D), D we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sss_anti_congruence_v1 on midpoint(B, D), B, F, midpoint(B, D), D, F we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By sss_anti_congruence_v0 on B, E, midpoint(B, D), D, E, midpoint(B, D) we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sss_anti_congruence_v1 on midpoint(B, D), E, B, midpoint(B, D), E, D we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sss_anti_congruence_v1 on E, midpoint(B, D), D, E, midpoint(B, D), B we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sss_anti_congruence_v1 on E, midpoint(B, D), D, E, midpoint(B, D), B we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By sss_anti_congruence_v1 on B, F, midpoint(B, D), D, F, midpoint(B, D) we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By sss_anti_congruence_v0 on midpoint(B, D), D, F, midpoint(B, D), B, F we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By sss_anti_congruence_v1 on midpoint(B, D), F, D, midpoint(B, D), F, B we get anti_congruent_triangles(B, F, midpoint(B, D), D, F, midpoint(B, D))
By sss_anti_congruence_v0 on midpoint(B, D), E, D, midpoint(B, D), E, B we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By asa_anti_congruence on E, midpoint(B, D), B, E, midpoint(B, D), D we get anti_congruent_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By aa_anti_similarity on B, E, midpoint(B, D), D, E, midpoint(B, D) we get anti_similar_triangles(B, E, midpoint(B, D), D, E, midpoint(B, D))
By line_circle_intersection_has_at_most_two_points_0 on B, E, G, Circle(B, E, midpoint(B, D)) we get G not in Circle(B, E, midpoint(B, D))
By line_circle_intersection_has_at_most_two_points_0 on B, E, H, Circle(B, E, midpoint(B, D)) we get H not in Circle(B, E, midpoint(B, D))
By line_containment_inequality on line_intersection(Line(E, G), altitude(C, E, G)), midpoint(B, D), Line(E, G) we get midpoint(B, D) != line_intersection(Line(E, G), altitude(C, E, G))
By line_inequality on Line(D, F), Line(B, F), D we get Line(B, F) != Line(D, F)
By line_containment_inequality on line_intersection(Line(E, G), altitude(C, E, G)), D, Line(E, G) we get D != line_intersection(Line(E, G), altitude(C, E, G))
By line_inequality on altitude(C, E, G), Line(B, F), C we get Line(B, F) != altitude(C, E, G)
By line_inequality on altitude(C, E, G), Line(D, F), C we get Line(D, F) != altitude(C, E, G)
By line_containment_inequality on line_intersection(Line(E, G), altitude(C, E, G)), F, Line(E, G) we get F != line_intersection(Line(E, G), altitude(C, E, G))
By external_angle_bisector_definition_v0_r on D, F, D, midpoint(B, D) we get Line(F, midpoint(B, D)) == external_angle_bisector(D, midpoint(B, D), D)
By internal_angle_bisector_definition_v0_r on E, B, F, midpoint(B, D) we get Line(B, midpoint(B, D)) == internal_angle_bisector(E, midpoint(B, D), F)
By external_angle_bisector_definition_v0_r on F, D, F, midpoint(B, D) we get Line(D, midpoint(B, D)) == external_angle_bisector(F, midpoint(B, D), F)
By internal_angle_bisector_definition_v0_r on midpoint(B, D), E, midpoint(B, D), F we get Line(E, F) == internal_angle_bisector(midpoint(B, D), F, midpoint(B, D))
By collinear_definition on B, E, G we get E in Line(B, G), G in Line(B, E), Line(B, E) == Line(B, G), 0 == 2 * angle(E, B, G) mod 360
By external_angle_bisector_definition_v0_r on F, B, F, midpoint(B, D) we get Line(B, midpoint(B, D)) == external_angle_bisector(F, midpoint(B, D), F)
By external_angle_bisector_definition_v0_r on B, F, B, midpoint(B, D) we get Line(F, midpoint(B, D)) == external_angle_bisector(B, midpoint(B, D), B)
By collinear_definition on G, B, E we get B in Line(E, G), E in Line(B, G), Line(B, G) == Line(E, G), 0 == 2 * angle(B, G, E) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(B, D), F, midpoint(B, D), E we get Line(E, F) == internal_angle_bisector(midpoint(B, D), E, midpoint(B, D))
By external_angle_bisector_definition_v0_r on D, E, D, midpoint(B, D) we get Line(E, midpoint(B, D)) == external_angle_bisector(D, midpoint(B, D), D)
By internal_angle_bisector_definition_v0_r on E, F, E, midpoint(B, D) we get Line(F, midpoint(B, D)) == internal_angle_bisector(E, midpoint(B, D), E)
By external_angle_bisector_definition_v0_r on E, B, E, midpoint(B, D) we get Line(B, midpoint(B, D)) == external_angle_bisector(E, midpoint(B, D), E)
By collinear_definition on G, E, H we get E in Line(G, H), H in Line(E, G), Line(E, G) == Line(G, H), 0 == 2 * angle(E, G, H) mod 360
By internal_angle_bisector_definition_v0_r on F, E, F, midpoint(B, D) we get Line(E, midpoint(B, D)) == internal_angle_bisector(F, midpoint(B, D), F)
By external_angle_bisector_definition_v0_r on E, D, E, midpoint(B, D) we get Line(D, midpoint(B, D)) == external_angle_bisector(E, midpoint(B, D), E)
By power_of_a_point_in_circle on E, Circle(B, E, midpoint(B, D)) we get 0 == power_of_a_point(E, Circle(B, E, midpoint(B, D)))
By power_of_a_point_in_circle on B, Circle(B, E, midpoint(B, D)) we get 0 == power_of_a_point(B, Circle(B, E, midpoint(B, D)))
By internal_angle_bisector_definition_v0_r on F, midpoint(B, D), F, E we get Line(E, midpoint(B, D)) == internal_angle_bisector(F, E, F)
By collinear_definition on G, E, B we get E in Line(B, G), B in Line(E, G), Line(B, G) == Line(E, G), 0 == 2 * angle(E, G, B) mod 360
By external_angle_bisector_definition_v0_r on B, E, B, midpoint(B, D) we get Line(E, midpoint(B, D)) == external_angle_bisector(B, midpoint(B, D), B)
By internal_angle_bisector_definition_v0_r on E, D, F, midpoint(B, D) we get Line(D, midpoint(B, D)) == internal_angle_bisector(E, midpoint(B, D), F)
By collinear_definition on G, H, E we get H in Line(E, G), E in Line(G, H), Line(E, G) == Line(G, H), 0 == 2 * angle(H, G, E) mod 360
By collinear_definition on H, G, E we get G in Line(E, H), E in Line(G, H), Line(E, H) == Line(G, H), 0 == 2 * angle(G, H, E) mod 360
By power_of_a_point_on_circle on midpoint(B, D), Circle(B, E, midpoint(B, D)) we get 0 == power_of_a_point(midpoint(B, D), Circle(B, E, midpoint(B, D)))
By internal_angle_bisector_definition_v0_r on E, midpoint(B, D), E, F we get Line(F, midpoint(B, D)) == internal_angle_bisector(E, F, E)
By collinear_definition on H, E, G we get E in Line(G, H), G in Line(E, H), Line(E, H) == Line(G, H), 0 == 2 * angle(E, H, G) mod 360
By collinear_definition on B, G, E we get G in Line(B, E), E in Line(B, G), Line(B, E) == Line(B, G), 0 == 2 * angle(G, B, E) mod 360
By radical_axis_definition_v0 on line_intersection(Line(E, G), altitude(C, E, G)), d, c we get power_of_a_point(line_intersection(Line(E, G), altitude(C, E, G)), c) == power_of_a_point(line_intersection(Line(E, G), altitude(C, E, G)), d)
By altitude_definition on F, midpoint(B, D), B, i we get i == altitude(F, B, midpoint(B, D))
By altitude_definition on E, B, midpoint(B, D), i we get i == altitude(E, B, midpoint(B, D))
By altitude_definition on B, midpoint(B, D), F, Line(B, D) we get Line(B, D) == altitude(B, F, midpoint(B, D))
By altitude_definition on D, F, midpoint(B, D), Line(B, D) we get Line(B, D) == altitude(D, F, midpoint(B, D))
By altitude_definition on F, D, midpoint(B, D), i we get i == altitude(F, D, midpoint(B, D))
By altitude_definition on B, E, midpoint(B, D), Line(B, D) we get Line(B, D) == altitude(B, E, midpoint(B, D))
By altitude_definition on E, D, midpoint(B, D), i we get i == altitude(E, D, midpoint(B, D))
By altitude_definition on D, midpoint(B, D), E, Line(B, D) we get Line(B, D) == altitude(D, E, midpoint(B, D))
By power_of_a_point_definition on midpoint(B, D), E, F, d we get log(power_of_a_point(midpoint(B, D), d)) == log(distance(E, midpoint(B, D))) + log(distance(F, midpoint(B, D)))
By line_definition on line_intersection(Line(B, E), altitude(C, E, G)), C, altitude(C, E, G) we get altitude(C, E, G) == Line(C, line_intersection(Line(B, E), altitude(C, E, G)))
By concurrent_sufficient_conditions on Line(B, F), Line(D, F), h we get concurrent(h, Line(B, F), Line(D, F))
By line_intersection_definition on F, Line(B, F), Line(D, F) we get F == line_intersection(Line(B, F), Line(D, F))
By perpendicular_line_definition on H, Line(B, E), altitude(C, E, G) we get Line(B, E) == perpendicular_line(H, altitude(C, E, G))
By median_definition on midpoint(B, D), B, E, Line(H, midpoint(B, D)) we get Line(H, midpoint(B, D)) == median(midpoint(B, D), B, E)
By concurrent_sufficient_conditions on Line(D, F), Line(B, F), Line(F, G) we get concurrent(Line(B, F), Line(D, F), Line(F, G))
By concurrent_sufficient_conditions on Line(B, F), Line(D, F), Line(F, G) we get concurrent(Line(B, F), Line(D, F), Line(F, G))
By concurrent_sufficient_conditions on Line(D, F), Line(B, F), h we get concurrent(h, Line(B, F), Line(D, F))
By concurrent_sufficient_conditions on Line(D, F), Line(B, F), i we get concurrent(i, Line(B, F), Line(D, F))
By perpendicular_line_definition on B, Line(B, E), altitude(C, E, G) we get Line(B, E) == perpendicular_line(B, altitude(C, E, G))
By concurrent_sufficient_conditions on Line(B, F), Line(D, F), i we get concurrent(i, Line(B, F), Line(D, F))
By median_definition on H, D, B, Line(H, midpoint(B, D)) we get median(H, B, D) == Line(H, midpoint(B, D))
By same_angle_converse_v0 on B, G, H, D we get collinear(B, G, H)
By between_implies_orientation on midpoint(B, D), G, H, E we get orientation(E, midpoint(B, D), H) == orientation(G, H, midpoint(B, D)) mod 360, orientation(E, midpoint(B, D), G) == orientation(G, H, midpoint(B, D)) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(Line(B, E), altitude(C, E, G)), C, F, A we get orientation(A, line_intersection(Line(B, E), altitude(C, E, G)), F) == orientation(C, line_intersection(Line(B, E), altitude(C, E, G)), F) mod 360
By between_implies_orientation on H, E, G, B we get orientation(B, H, G) == orientation(E, G, H) mod 360, orientation(B, H, E) == orientation(E, G, H) mod 360
By between_implies_orientation on B, G, H, E we get orientation(B, G, H) == orientation(B, H, E) mod 360, orientation(B, G, E) == orientation(B, G, H) mod 360
By between_implies_orientation on H, B, G, E we get orientation(B, G, H) == orientation(E, H, G) mod 360, orientation(B, E, H) == orientation(B, G, H) mod 360
By between_imply_not_between on B, G, E we get collinear_and_not_between(E, B, G)
By between_imply_not_between on E, G, B we get collinear_and_not_between(B, E, G)
By between_implies_orientation on line_intersection(Line(B, E), altitude(C, E, G)), C, A, F we get orientation(A, F, line_intersection(Line(B, E), altitude(C, E, G))) == orientation(A, line_intersection(Line(B, E), altitude(C, E, G)), C) mod 360, orientation(A, line_intersection(Line(B, E), altitude(C, E, G)), C) == orientation(C, F, line_intersection(Line(B, E), altitude(C, E, G))) mod 360
By between_implies_orientation on line_intersection(Line(B, E), altitude(C, E, G)), F, A, C we get orientation(A, C, line_intersection(Line(B, E), altitude(C, E, G))) == orientation(A, line_intersection(Line(B, E), altitude(C, E, G)), F) mod 360, orientation(A, line_intersection(Line(B, E), altitude(C, E, G)), F) == orientation(C, line_intersection(Line(B, E), altitude(C, E, G)), F) mod 360
By between_implies_orientation on midpoint(B, D), E, G, B we get orientation(B, midpoint(B, D), G) == orientation(E, G, midpoint(B, D)) mod 360, orientation(B, midpoint(B, D), E) == orientation(E, G, midpoint(B, D)) mod 360
By between_implies_orientation on midpoint(B, D), B, G, E we get orientation(B, G, midpoint(B, D)) == orientation(E, midpoint(B, D), G) mod 360, orientation(B, E, midpoint(B, D)) == orientation(B, G, midpoint(B, D)) mod 360
By between_implies_orientation on midpoint(B, D), E, H, G we get orientation(E, H, midpoint(B, D)) == orientation(G, midpoint(B, D), H) mod 360, orientation(E, G, midpoint(B, D)) == orientation(E, H, midpoint(B, D)) mod 360
By between_implies_orientation on B, E, H, G we get orientation(B, E, H) == orientation(B, H, G) mod 360, orientation(B, E, G) == orientation(B, E, H) mod 360
By between_imply_not_between on G, H, E we get collinear_and_not_between(E, G, H)
By between_imply_not_between on E, H, G we get collinear_and_not_between(G, E, H)
By different_points_v1 on H, G we get 0 != distance(G, H)
By different_points_v1 on B, G we get 0 != distance(B, G)
By same_angle_v3 on midpoint(B, D), D, B, H we get angle(D, midpoint(B, D), H) == angle(B, midpoint(B, D), H) + 180 mod 360
By orthocenter_concurrency on B, F, midpoint(B, D) we get orthocenter(B, F, midpoint(B, D)) in altitude(B, F, midpoint(B, D)), orthocenter(B, F, midpoint(B, D)) in altitude(F, B, midpoint(B, D)), orthocenter(B, F, midpoint(B, D)) in altitude(midpoint(B, D), B, F)
By orthocenter_concurrency on B, E, midpoint(B, D) we get orthocenter(B, E, midpoint(B, D)) in altitude(B, E, midpoint(B, D)), orthocenter(B, E, midpoint(B, D)) in altitude(E, B, midpoint(B, D)), orthocenter(B, E, midpoint(B, D)) in altitude(midpoint(B, D), B, E)
By orthocenter_concurrency on F, D, midpoint(B, D) we get orthocenter(D, F, midpoint(B, D)) in altitude(F, D, midpoint(B, D)), orthocenter(D, F, midpoint(B, D)) in altitude(D, F, midpoint(B, D)), orthocenter(D, F, midpoint(B, D)) in altitude(midpoint(B, D), D, F)
By orthocenter_concurrency on D, E, midpoint(B, D) we get orthocenter(D, E, midpoint(B, D)) in altitude(D, E, midpoint(B, D)), orthocenter(D, E, midpoint(B, D)) in altitude(E, D, midpoint(B, D)), orthocenter(D, E, midpoint(B, D)) in altitude(midpoint(B, D), D, E)
By in_imply_collinear on line_intersection(Line(B, E), altitude(C, E, G)), H, E we get collinear(E, H, line_intersection(Line(B, E), altitude(C, E, G)))
By line_inequality on Line(H, midpoint(B, D)), Line(C, G), H we get Line(C, G) != Line(H, midpoint(B, D))
By in_imply_collinear on line_intersection(Line(B, E), altitude(C, E, G)), G, B we get collinear(B, G, line_intersection(Line(B, E), altitude(C, E, G)))
By in_imply_collinear on line_intersection(Line(B, E), altitude(C, E, G)), B, E we get collinear(B, E, line_intersection(Line(B, E), altitude(C, E, G)))
By line_inequality on Line(H, midpoint(B, D)), Line(D, F), midpoint(B, D) we get Line(D, F) != Line(H, midpoint(B, D))
By internal_angle_bisector_definition_v0 on B, G, B, H we get angle(B, H, G) == angle(G, H, B) mod 360
By in_imply_collinear on line_intersection(Line(B, E), altitude(C, E, G)), G, H we get collinear(G, H, line_intersection(Line(B, E), altitude(C, E, G)))
By in_imply_collinear on line_intersection(Line(B, E), altitude(C, E, G)), H, B we get collinear(B, H, line_intersection(Line(B, E), altitude(C, E, G)))
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(B, D), G, H we get not_collinear(G, H, midpoint(B, D)), exists(Line(G, H))
By reverse_direction on G, H we get 180 == direction(G, H) - direction(H, G) mod 360
By between_imply_segment_sum on E, G, B we get distance(B, E) == distance(E, G) + distance(B, G)
By between_imply_segment_sum on E, H, G we get distance(E, G) == distance(E, H) + distance(G, H)
By line_inequality on Line(H, midpoint(B, D)), Line(B, C), midpoint(B, D) we get Line(B, C) != Line(H, midpoint(B, D))
By line_inequality on Line(H, midpoint(B, D)), Line(A, E), midpoint(B, D) we get Line(A, E) != Line(H, midpoint(B, D))
By line_inequality on Line(H, midpoint(B, D)), Line(B, E), midpoint(B, D) we get Line(B, E) != Line(H, midpoint(B, D))
By between_implies_angles on G, H, E we get 180 == angle(G, H, E) mod 360, 0 == angle(H, E, G) mod 360, 0 == angle(E, G, H) mod 360
By internal_angle_bisector_definition_v0 on H, G, H, B we get angle(G, B, H) == angle(H, B, G) mod 360
By reverse_direction on H, G we get 180 == direction(H, G) - direction(G, H) mod 360
By between_implies_angles on E, H, G we get 180 == angle(E, H, G) mod 360, 0 == angle(H, G, E) mod 360, 0 == angle(G, E, H) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on F, H, midpoint(B, D) we get F not in Line(H, midpoint(B, D))
By not_in_line_equivalent_to_not_collinear_v0_r on B, midpoint(B, D), H we get B not in Line(H, midpoint(B, D))
By line_inequality on Line(H, midpoint(B, D)), g, midpoint(B, D) we get g != Line(H, midpoint(B, D))
By line_inequality on Line(H, midpoint(B, D)), Line(B, D), H we get Line(B, D) != Line(H, midpoint(B, D))
By line_inequality on Line(H, midpoint(B, D)), Line(C, E), H we get Line(C, E) != Line(H, midpoint(B, D))
By line_inequality on Line(H, midpoint(B, D)), Line(B, F), midpoint(B, D) we get Line(B, F) != Line(H, midpoint(B, D))
By not_in_line_equivalent_to_not_collinear_v0_r on D, H, midpoint(B, D) we get D not in Line(H, midpoint(B, D))
By line_inequality on Line(H, midpoint(B, D)), h, H we get h != Line(H, midpoint(B, D))
By not_in_line_equivalent_to_not_collinear_v0_r on E, H, midpoint(B, D) we get E not in Line(H, midpoint(B, D))
By line_inequality on Line(H, midpoint(B, D)), Line(A, D), midpoint(B, D) we get Line(A, D) != Line(H, midpoint(B, D))
By line_inequality on Line(H, midpoint(B, D)), i, H we get i != Line(H, midpoint(B, D))
By line_inequality on Line(H, midpoint(B, D)), Line(F, G), H we get Line(F, G) != Line(H, midpoint(B, D))
By line_inequality on Line(H, midpoint(B, D)), f, midpoint(B, D) we get f != Line(H, midpoint(B, D))
By line_inequality on Line(H, midpoint(B, D)), Line(D, E), H we get Line(D, E) != Line(H, midpoint(B, D))
By log_of_2_times_distance on A, E, H, midpoint(B, D) we get log(distance(A, E)) == 0.6931471805599453 + log(distance(H, midpoint(B, D)))
By aa_anti_similarity on E, G, F, midpoint(B, D), H, E we get anti_similar_triangles(E, F, G, midpoint(B, D), E, H)
By sss_anti_congruence_v1 on midpoint(B, D), E, H, E, midpoint(B, D), H we get anti_congruent_triangles(E, H, midpoint(B, D), midpoint(B, D), H, E)
By sss_anti_congruence_v0 on B, H, midpoint(B, D), midpoint(B, D), H, B we get anti_congruent_triangles(B, H, midpoint(B, D), midpoint(B, D), H, B)
By aa_anti_similarity on midpoint(B, D), H, E, E, G, F we get anti_similar_triangles(E, F, G, midpoint(B, D), E, H)
By sss_anti_congruence_v0 on H, midpoint(B, D), B, H, B, midpoint(B, D) we get anti_congruent_triangles(B, H, midpoint(B, D), midpoint(B, D), H, B)
By sss_anti_congruence_v0 on H, midpoint(B, D), B, H, B, midpoint(B, D) we get anti_congruent_triangles(B, H, midpoint(B, D), midpoint(B, D), H, B)
By sss_anti_congruence_v0 on midpoint(B, D), B, H, B, midpoint(B, D), H we get anti_congruent_triangles(B, H, midpoint(B, D), midpoint(B, D), H, B)
By internal_angle_bisector_definition_v0_r on B, G, H, E we get Line(E, G) == internal_angle_bisector(B, E, H)
By sss_anti_congruence_v0 on midpoint(B, D), H, E, E, H, midpoint(B, D) we get anti_congruent_triangles(E, H, midpoint(B, D), midpoint(B, D), H, E)
By log_of_2_times_distance on B, E, H, midpoint(B, D) we get log(distance(B, E)) == 0.6931471805599453 + log(distance(H, midpoint(B, D)))
By sss_anti_congruence_v0 on E, midpoint(B, D), H, midpoint(B, D), E, H we get anti_congruent_triangles(E, H, midpoint(B, D), midpoint(B, D), H, E)
By sss_anti_congruence_v0 on midpoint(B, D), B, H, B, midpoint(B, D), H we get anti_congruent_triangles(B, H, midpoint(B, D), midpoint(B, D), H, B)
By internal_angle_bisector_definition_v0_r on H, B, G, E we get Line(B, E) == internal_angle_bisector(G, E, H)
By internal_angle_bisector_definition_v0_r on B, H, G, E we get Line(E, H) == internal_angle_bisector(B, E, G)
By sas_anti_congruence on E, H, midpoint(B, D), midpoint(B, D), H, E we get anti_congruent_triangles(E, H, midpoint(B, D), midpoint(B, D), H, E)
By internal_angle_bisector_definition_v0_r on G, E, G, H we get Line(E, H) == internal_angle_bisector(G, H, G)
By internal_angle_bisector_definition_v0_r on H, E, H, G we get Line(E, G) == internal_angle_bisector(H, G, H)
By aa_anti_similarity on C, A, E, midpoint(B, D), B, H we get anti_similar_triangles(A, C, E, B, midpoint(B, D), H)
By sas_anti_congruence on midpoint(B, D), H, B, B, H, midpoint(B, D) we get anti_congruent_triangles(B, H, midpoint(B, D), midpoint(B, D), H, B)
By aa_similarity on A, C, E, midpoint(B, D), B, H we get similar_triangles(A, C, E, midpoint(B, D), B, H)
By sss_anti_congruence_v1 on H, midpoint(B, D), E, H, E, midpoint(B, D) we get anti_congruent_triangles(E, H, midpoint(B, D), midpoint(B, D), H, E)
By aa_similarity on midpoint(B, D), H, B, D, E, B we get similar_triangles(B, D, E, B, midpoint(B, D), H)
By log_of_2_times_distance on C, E, H, midpoint(B, D) we get log(distance(C, E)) == 0.6931471805599453 + log(distance(H, midpoint(B, D)))
By internal_angle_bisector_definition_v0_r on H, E, G, B we get Line(B, E) == internal_angle_bisector(G, B, H)
By aa_anti_similarity on E, F, G, midpoint(B, D), E, H we get anti_similar_triangles(E, F, G, midpoint(B, D), E, H)
By sss_anti_congruence_v1 on midpoint(B, D), H, B, B, H, midpoint(B, D) we get anti_congruent_triangles(B, H, midpoint(B, D), midpoint(B, D), H, B)
By aa_similarity on midpoint(B, D), H, E, F, G, E we get similar_triangles(E, F, G, E, midpoint(B, D), H)
By sss_anti_congruence_v1 on H, midpoint(B, D), E, H, E, midpoint(B, D) we get anti_congruent_triangles(E, H, midpoint(B, D), midpoint(B, D), H, E)
By sss_anti_congruence_v1 on E, H, midpoint(B, D), midpoint(B, D), H, E we get anti_congruent_triangles(E, H, midpoint(B, D), midpoint(B, D), H, E)
By isosceles_triangle_properties on H, E, midpoint(B, D) we get distance(E, H) == distance(H, midpoint(B, D)), angle(E, midpoint(B, D), H) == angle(H, E, midpoint(B, D)) mod 360
By sss_anti_congruence_v0 on midpoint(B, D), B, H, B, midpoint(B, D), H we get anti_congruent_triangles(B, H, midpoint(B, D), midpoint(B, D), H, B)
By aa_anti_similarity on midpoint(B, D), B, H, B, D, E we get anti_similar_triangles(B, D, E, midpoint(B, D), B, H)
By radical_axis_definition_v0_r on B, c, Circle(B, E, midpoint(B, D)) we get B in radical_axis(c, Circle(B, E, midpoint(B, D)))
By sss_anti_congruence_v0 on H, midpoint(B, D), B, H, B, midpoint(B, D) we get anti_congruent_triangles(B, H, midpoint(B, D), midpoint(B, D), H, B)
By sss_anti_congruence_v1 on B, midpoint(B, D), H, midpoint(B, D), B, H we get anti_congruent_triangles(B, H, midpoint(B, D), midpoint(B, D), H, B)
By sss_anti_congruence_v0 on H, midpoint(B, D), B, H, B, midpoint(B, D) we get anti_congruent_triangles(B, H, midpoint(B, D), midpoint(B, D), H, B)
By sss_anti_congruence_v1 on B, midpoint(B, D), H, midpoint(B, D), B, H we get anti_congruent_triangles(B, H, midpoint(B, D), midpoint(B, D), H, B)
By aa_anti_similarity on midpoint(B, D), B, H, C, A, E we get anti_similar_triangles(A, C, E, B, midpoint(B, D), H)
By aa_similarity on D, B, E, midpoint(B, D), B, H we get similar_triangles(B, D, E, B, midpoint(B, D), H)
By external_angle_bisector_definition_v0_r on B, E, H, G we get Line(E, G) == external_angle_bisector(B, G, H)
By sss_anti_congruence_v1 on midpoint(B, D), H, B, B, H, midpoint(B, D) we get anti_congruent_triangles(B, H, midpoint(B, D), midpoint(B, D), H, B)
By sss_anti_congruence_v1 on midpoint(B, D), E, H, E, midpoint(B, D), H we get anti_congruent_triangles(E, H, midpoint(B, D), midpoint(B, D), H, E)
By sss_anti_congruence_v1 on E, H, midpoint(B, D), midpoint(B, D), H, E we get anti_congruent_triangles(E, H, midpoint(B, D), midpoint(B, D), H, E)
By sss_anti_congruence_v1 on H, midpoint(B, D), E, H, E, midpoint(B, D) we get anti_congruent_triangles(E, H, midpoint(B, D), midpoint(B, D), H, E)
By radical_axis_definition_v0_r on E, Circle(B, E, midpoint(B, D)), d we get E in radical_axis(d, Circle(B, E, midpoint(B, D)))
By aa_similarity on A, E, C, midpoint(B, D), H, B we get similar_triangles(A, C, E, midpoint(B, D), B, H)
By sas_similarity on H, B, midpoint(B, D), E, C, A we get similar_triangles(A, C, E, midpoint(B, D), B, H)
By sas_anti_similarity on B, D, E, midpoint(B, D), B, H we get anti_similar_triangles(B, D, E, midpoint(B, D), B, H)
By sss_anti_congruence_v1 on midpoint(B, D), H, B, B, H, midpoint(B, D) we get anti_congruent_triangles(B, H, midpoint(B, D), midpoint(B, D), H, B)
By sss_anti_congruence_v1 on midpoint(B, D), H, B, B, H, midpoint(B, D) we get anti_congruent_triangles(B, H, midpoint(B, D), midpoint(B, D), H, B)
By sas_anti_similarity on H, B, midpoint(B, D), E, D, B we get anti_similar_triangles(B, D, E, midpoint(B, D), B, H)
By isosceles_triangle_properties on H, B, midpoint(B, D) we get distance(B, H) == distance(H, midpoint(B, D)), angle(B, midpoint(B, D), H) == angle(H, B, midpoint(B, D)) mod 360
By aa_similarity on D, E, B, midpoint(B, D), H, B we get similar_triangles(B, D, E, B, midpoint(B, D), H)
By sss_anti_congruence_v1 on midpoint(B, D), H, B, B, H, midpoint(B, D) we get anti_congruent_triangles(B, H, midpoint(B, D), midpoint(B, D), H, B)
By sss_anti_congruence_v0 on H, E, midpoint(B, D), H, midpoint(B, D), E we get anti_congruent_triangles(E, H, midpoint(B, D), midpoint(B, D), H, E)
By sss_anti_congruence_v1 on midpoint(B, D), E, H, E, midpoint(B, D), H we get anti_congruent_triangles(E, H, midpoint(B, D), midpoint(B, D), H, E)
By sss_anti_congruence_v1 on B, midpoint(B, D), H, midpoint(B, D), B, H we get anti_congruent_triangles(B, H, midpoint(B, D), midpoint(B, D), H, B)
By altitude_definition on C, B, E, altitude(C, E, G) we get altitude(C, B, E) == altitude(C, E, G)
By sas_anti_similarity on E, A, C, H, B, midpoint(B, D) we get anti_similar_triangles(A, C, E, B, midpoint(B, D), H)
By aa_anti_similarity on midpoint(B, D), H, B, C, E, A we get anti_similar_triangles(A, C, E, B, midpoint(B, D), H)
By aa_similarity on midpoint(B, D), B, H, A, C, E we get similar_triangles(A, C, E, midpoint(B, D), B, H)
By sss_anti_congruence_v0 on E, midpoint(B, D), H, midpoint(B, D), E, H we get anti_congruent_triangles(E, H, midpoint(B, D), midpoint(B, D), H, E)
By sss_anti_congruence_v1 on H, B, midpoint(B, D), H, midpoint(B, D), B we get anti_congruent_triangles(B, H, midpoint(B, D), midpoint(B, D), H, B)
By sss_anti_congruence_v0 on midpoint(B, D), H, E, E, H, midpoint(B, D) we get anti_congruent_triangles(E, H, midpoint(B, D), midpoint(B, D), H, E)
By sss_anti_congruence_v0 on H, E, midpoint(B, D), H, midpoint(B, D), E we get anti_congruent_triangles(E, H, midpoint(B, D), midpoint(B, D), H, E)
By sss_anti_congruence_v1 on B, midpoint(B, D), H, midpoint(B, D), B, H we get anti_congruent_triangles(B, H, midpoint(B, D), midpoint(B, D), H, B)
By sss_anti_congruence_v0 on E, midpoint(B, D), H, midpoint(B, D), E, H we get anti_congruent_triangles(E, H, midpoint(B, D), midpoint(B, D), H, E)
By isosceles_triangle_properties on H, midpoint(B, D), B we get distance(B, H) == distance(H, midpoint(B, D)), angle(H, midpoint(B, D), B) == angle(midpoint(B, D), B, H) mod 360
By sss_anti_congruence_v1 on E, H, midpoint(B, D), midpoint(B, D), H, E we get anti_congruent_triangles(E, H, midpoint(B, D), midpoint(B, D), H, E)
By sss_anti_congruence_v1 on H, B, midpoint(B, D), H, midpoint(B, D), B we get anti_congruent_triangles(B, H, midpoint(B, D), midpoint(B, D), H, B)
By sss_anti_congruence_v1 on H, midpoint(B, D), E, H, E, midpoint(B, D) we get anti_congruent_triangles(E, H, midpoint(B, D), midpoint(B, D), H, E)
By internal_angle_bisector_definition_v0_r on G, H, G, E we get Line(E, H) == internal_angle_bisector(G, E, G)
By aa_similarity on midpoint(B, D), H, B, A, E, C we get similar_triangles(A, C, E, midpoint(B, D), B, H)
By sss_anti_congruence_v0 on E, midpoint(B, D), H, midpoint(B, D), E, H we get anti_congruent_triangles(E, H, midpoint(B, D), midpoint(B, D), H, E)
By sss_anti_congruence_v1 on midpoint(B, D), H, B, B, H, midpoint(B, D) we get anti_congruent_triangles(B, H, midpoint(B, D), midpoint(B, D), H, B)
By sss_anti_congruence_v0 on midpoint(B, D), H, E, E, H, midpoint(B, D) we get anti_congruent_triangles(E, H, midpoint(B, D), midpoint(B, D), H, E)
By aa_similarity on F, E, G, midpoint(B, D), E, H we get similar_triangles(E, F, G, E, midpoint(B, D), H)
By sss_anti_congruence_v1 on H, B, midpoint(B, D), H, midpoint(B, D), B we get anti_congruent_triangles(B, H, midpoint(B, D), midpoint(B, D), H, B)
By aa_similarity on midpoint(B, D), B, H, D, B, E we get similar_triangles(B, D, E, B, midpoint(B, D), H)
By sss_anti_congruence_v0 on B, H, midpoint(B, D), midpoint(B, D), H, B we get anti_congruent_triangles(B, H, midpoint(B, D), midpoint(B, D), H, B)
By sss_anti_congruence_v1 on midpoint(B, D), E, H, E, midpoint(B, D), H we get anti_congruent_triangles(E, H, midpoint(B, D), midpoint(B, D), H, E)
By internal_angle_bisector_definition_v0_r on G, E, G, B we get Line(B, E) == internal_angle_bisector(G, B, G)
By sss_anti_congruence_v0 on midpoint(B, D), B, H, B, midpoint(B, D), H we get anti_congruent_triangles(B, H, midpoint(B, D), midpoint(B, D), H, B)
By sss_anti_congruence_v1 on B, midpoint(B, D), H, midpoint(B, D), B, H we get anti_congruent_triangles(B, H, midpoint(B, D), midpoint(B, D), H, B)
By sas_anti_congruence on B, H, midpoint(B, D), midpoint(B, D), H, B we get anti_congruent_triangles(B, H, midpoint(B, D), midpoint(B, D), H, B)
By sss_anti_congruence_v0 on B, H, midpoint(B, D), midpoint(B, D), H, B we get anti_congruent_triangles(B, H, midpoint(B, D), midpoint(B, D), H, B)
By sss_anti_congruence_v0 on midpoint(B, D), H, E, E, H, midpoint(B, D) we get anti_congruent_triangles(E, H, midpoint(B, D), midpoint(B, D), H, E)
By sss_anti_congruence_v1 on midpoint(B, D), E, H, E, midpoint(B, D), H we get anti_congruent_triangles(E, H, midpoint(B, D), midpoint(B, D), H, E)
By sss_anti_congruence_v0 on midpoint(B, D), B, H, B, midpoint(B, D), H we get anti_congruent_triangles(B, H, midpoint(B, D), midpoint(B, D), H, B)
By sas_similarity on midpoint(B, D), B, H, A, C, E we get similar_triangles(A, C, E, midpoint(B, D), B, H)
By sss_anti_congruence_v0 on H, midpoint(B, D), B, H, B, midpoint(B, D) we get anti_congruent_triangles(B, H, midpoint(B, D), midpoint(B, D), H, B)
By internal_angle_bisector_definition_v0_r on E, H, E, G we get Line(G, H) == internal_angle_bisector(E, G, E)
By sss_anti_congruence_v0 on H, midpoint(B, D), B, H, B, midpoint(B, D) we get anti_congruent_triangles(B, H, midpoint(B, D), midpoint(B, D), H, B)
By sss_anti_congruence_v0 on midpoint(B, D), H, E, E, H, midpoint(B, D) we get anti_congruent_triangles(E, H, midpoint(B, D), midpoint(B, D), H, E)
By aa_similarity on midpoint(B, D), E, H, F, E, G we get similar_triangles(E, F, G, E, midpoint(B, D), H)
By sss_anti_congruence_v0 on E, midpoint(B, D), H, midpoint(B, D), E, H we get anti_congruent_triangles(E, H, midpoint(B, D), midpoint(B, D), H, E)
By sss_anti_congruence_v1 on H, B, midpoint(B, D), H, midpoint(B, D), B we get anti_congruent_triangles(B, H, midpoint(B, D), midpoint(B, D), H, B)
By sss_anti_congruence_v1 on H, midpoint(B, D), E, H, E, midpoint(B, D) we get anti_congruent_triangles(E, H, midpoint(B, D), midpoint(B, D), H, E)
By sss_anti_congruence_v0 on H, E, midpoint(B, D), H, midpoint(B, D), E we get anti_congruent_triangles(E, H, midpoint(B, D), midpoint(B, D), H, E)
By aa_similarity on F, G, E, midpoint(B, D), H, E we get similar_triangles(E, F, G, E, midpoint(B, D), H)
By sss_anti_congruence_v1 on midpoint(B, D), E, H, E, midpoint(B, D), H we get anti_congruent_triangles(E, H, midpoint(B, D), midpoint(B, D), H, E)
By sas_anti_similarity on C, A, E, midpoint(B, D), B, H we get anti_similar_triangles(A, C, E, B, midpoint(B, D), H)
By sas_anti_similarity on E, D, B, H, B, midpoint(B, D) we get anti_similar_triangles(B, D, E, midpoint(B, D), B, H)
By sas_similarity on E, B, D, H, B, midpoint(B, D) we get similar_triangles(B, D, E, B, midpoint(B, D), H)
By sss_anti_congruence_v1 on H, B, midpoint(B, D), H, midpoint(B, D), B we get anti_congruent_triangles(B, H, midpoint(B, D), midpoint(B, D), H, B)
By sss_anti_congruence_v1 on B, midpoint(B, D), H, midpoint(B, D), B, H we get anti_congruent_triangles(B, H, midpoint(B, D), midpoint(B, D), H, B)
By sss_anti_congruence_v1 on H, midpoint(B, D), E, H, E, midpoint(B, D) we get anti_congruent_triangles(E, H, midpoint(B, D), midpoint(B, D), H, E)
By sas_anti_similarity on H, B, midpoint(B, D), E, A, C we get anti_similar_triangles(A, C, E, B, midpoint(B, D), H)
By sss_anti_congruence_v1 on E, H, midpoint(B, D), midpoint(B, D), H, E we get anti_congruent_triangles(E, H, midpoint(B, D), midpoint(B, D), H, E)
By sss_anti_congruence_v0 on H, E, midpoint(B, D), H, midpoint(B, D), E we get anti_congruent_triangles(E, H, midpoint(B, D), midpoint(B, D), H, E)
By sas_similarity on midpoint(B, D), B, H, D, B, E we get similar_triangles(B, D, E, B, midpoint(B, D), H)
By aa_anti_similarity on B, D, E, midpoint(B, D), B, H we get anti_similar_triangles(B, D, E, midpoint(B, D), B, H)
By sss_anti_congruence_v0 on E, midpoint(B, D), H, midpoint(B, D), E, H we get anti_congruent_triangles(E, H, midpoint(B, D), midpoint(B, D), H, E)
By isosceles_triangle_properties on H, midpoint(B, D), E we get distance(E, H) == distance(H, midpoint(B, D)), angle(H, midpoint(B, D), E) == angle(midpoint(B, D), E, H) mod 360
By sss_anti_congruence_v1 on E, H, midpoint(B, D), midpoint(B, D), H, E we get anti_congruent_triangles(E, H, midpoint(B, D), midpoint(B, D), H, E)
By sss_anti_congruence_v0 on H, E, midpoint(B, D), H, midpoint(B, D), E we get anti_congruent_triangles(E, H, midpoint(B, D), midpoint(B, D), H, E)
By aa_anti_similarity on midpoint(B, D), E, H, E, F, G we get anti_similar_triangles(E, F, G, midpoint(B, D), E, H)
By sas_similarity on A, C, E, midpoint(B, D), B, H we get similar_triangles(A, C, E, midpoint(B, D), B, H)
By sss_anti_congruence_v0 on B, H, midpoint(B, D), midpoint(B, D), H, B we get anti_congruent_triangles(B, H, midpoint(B, D), midpoint(B, D), H, B)
By aa_anti_similarity on B, E, D, midpoint(B, D), H, B we get anti_similar_triangles(B, D, E, midpoint(B, D), B, H)
By reverse_direction on H, midpoint(B, D) we get 180 == direction(H, midpoint(B, D)) - direction(midpoint(B, D), H) mod 360
By sss_anti_congruence_v0 on H, E, midpoint(B, D), H, midpoint(B, D), E we get anti_congruent_triangles(E, H, midpoint(B, D), midpoint(B, D), H, E)
By internal_angle_bisector_definition_v0_r on B, E, B, G we get Line(E, G) == internal_angle_bisector(B, G, B)
By aa_anti_similarity on midpoint(B, D), H, B, B, E, D we get anti_similar_triangles(B, D, E, midpoint(B, D), B, H)
By internal_angle_bisector_definition_v0_r on G, B, G, E we get Line(B, E) == internal_angle_bisector(G, E, G)
By sas_anti_congruence on midpoint(B, D), H, E, E, H, midpoint(B, D) we get anti_congruent_triangles(E, H, midpoint(B, D), midpoint(B, D), H, E)
By sss_anti_congruence_v0 on midpoint(B, D), H, E, E, H, midpoint(B, D) we get anti_congruent_triangles(E, H, midpoint(B, D), midpoint(B, D), H, E)
By sss_anti_congruence_v1 on H, B, midpoint(B, D), H, midpoint(B, D), B we get anti_congruent_triangles(B, H, midpoint(B, D), midpoint(B, D), H, B)
By sss_anti_congruence_v0 on midpoint(B, D), B, H, B, midpoint(B, D), H we get anti_congruent_triangles(B, H, midpoint(B, D), midpoint(B, D), H, B)
By internal_angle_bisector_definition_v0_r on E, B, E, G we get Line(B, G) == internal_angle_bisector(E, G, E)
By sas_anti_similarity on midpoint(B, D), B, H, C, A, E we get anti_similar_triangles(A, C, E, B, midpoint(B, D), H)
By sas_similarity on D, B, E, midpoint(B, D), B, H we get similar_triangles(B, D, E, B, midpoint(B, D), H)
By sas_similarity on H, B, midpoint(B, D), E, B, D we get similar_triangles(B, D, E, B, midpoint(B, D), H)
By sas_similarity on E, C, A, H, B, midpoint(B, D) we get similar_triangles(A, C, E, midpoint(B, D), B, H)
By aa_anti_similarity on C, E, A, midpoint(B, D), H, B we get anti_similar_triangles(A, C, E, B, midpoint(B, D), H)
By sss_anti_congruence_v0 on B, H, midpoint(B, D), midpoint(B, D), H, B we get anti_congruent_triangles(B, H, midpoint(B, D), midpoint(B, D), H, B)
By sas_anti_similarity on midpoint(B, D), B, H, B, D, E we get anti_similar_triangles(B, D, E, midpoint(B, D), B, H)
By sss_anti_congruence_v1 on E, H, midpoint(B, D), midpoint(B, D), H, E we get anti_congruent_triangles(E, H, midpoint(B, D), midpoint(B, D), H, E)
By sss_anti_congruence_v0 on B, H, midpoint(B, D), midpoint(B, D), H, B we get anti_congruent_triangles(B, H, midpoint(B, D), midpoint(B, D), H, B)
By log_of_2_times_distance on D, E, midpoint(B, D), H we get log(distance(D, E)) == 0.6931471805599453 + log(distance(H, midpoint(B, D)))
By power_of_a_point_definition on H, B, E, Circle(B, E, midpoint(B, D)) we get log(distance(B, H)) + log(distance(E, H)) == log(power_of_a_point(H, Circle(B, E, midpoint(B, D))))
By altitude_definition on C, B, H, altitude(C, E, G) we get altitude(C, B, H) == altitude(C, E, G)
By power_of_a_point_definition on F, midpoint(B, D), E, Circle(B, E, midpoint(B, D)) we get log(distance(F, midpoint(B, D))) + log(distance(E, F)) == log(power_of_a_point(F, Circle(B, E, midpoint(B, D))))
By altitude_definition on C, G, H, altitude(C, E, G) we get altitude(C, E, G) == altitude(C, G, H)
By power_of_a_point_definition on D, B, midpoint(B, D), Circle(B, E, midpoint(B, D)) we get log(distance(B, D)) + log(distance(D, midpoint(B, D))) == log(power_of_a_point(D, Circle(B, E, midpoint(B, D))))
By altitude_definition on C, G, B, altitude(C, E, G) we get altitude(C, B, G) == altitude(C, E, G)
By altitude_definition on C, E, H, altitude(C, E, G) we get altitude(C, E, G) == altitude(C, E, H)
By power_of_a_point_definition on G, E, B, Circle(B, E, midpoint(B, D)) we get log(distance(E, G)) + log(distance(B, G)) == log(power_of_a_point(G, Circle(B, E, midpoint(B, D))))
