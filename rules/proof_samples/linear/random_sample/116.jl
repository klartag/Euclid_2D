Assumptions:
A, B, C, D, E, F, G, H, I, J: Point
f, g, h, i, j, k: Line
c, d: Circle
distinct(A, B, C, D, E, F, G, H, I, J)
distinct(f, g, h, i, j, k)
distinct(c, d)
f == Line(A, B)
g == Line(B, C)
h == Line(A, C)
i == internal_angle_bisector(B, A, C)
j == internal_angle_bisector(A, B, C)
D == line_intersection(i, j)
E == projection(D, g)
F == projection(D, h)
G == projection(D, f)
c == Circle(E, F, G)
G in k
H in k, c
d == Circle(B, F, G)
I in j, d
J == line_intersection(j, k)

Embedding:
C := {"x": "-1.6214338544316451162785597261972725391387939453125", "y": "-0.6467404219101415829840107107884250581264495849609375"}
B := {"x": "-0.306983472947786772966338730839197523891925811767578125", "y": "0.01047575856812200077727847968844798742793500423431396484375"}
A := {"x": "1.310151340859102564451177386217750608921051025390625", "y": "0.7024399057941936863613818786689080297946929931640625"}
j := {"point": {"x": "-0.306983472947786772966338730839197523891925811767578125", "y": "0.01047575856812200077727847968844798742793500423431396484375"}, "direction": {"x": "0.024940352236361523402112863685024368844028127973905195314885936090604442590871629372935558098571811346026989587281555513539991758659655992327077657223402408596076544639522787952506722572350627854034695630400734809263712193224049140102961901921223773071803402977417074116715116948810613231361780801889351504001538060875318005435391946770033644841518467380367705438086155173405605991762367099942847306552560829078003520158927826169767793741274931114745036165193233787734886257269744916664109658719833754590665138862570786409097129199916263437192824281097173519539641478654699284158194015109114341266943342641939890955397242040157028245750981255657274087507971150050678663015299528497752170722093687414232349027536375600262933750180189771186742669612717056574136219499579472079411558819529078858508587306928025941065264877411044247201262181161416461366321703997831083546722421922878246030526853062461871752638261560763642899145818443432806789787229339598438112920729567891287275048649240886413590578195474839012106943281621812277485652571597865481432566083635278863346618654159672641750101833561814339739122989368445441255291899222470167977801096502816586310972274517639293280899428539100500479164363636735728520623197196303240508417687259788334021485633150848081899127077115737495482007695365872083373806275552735337033567596294463835469986706522284849816152177075744304001166980497221889030954712850274711304620017551253573144056359961849008693416473335253222470445780948005702299583636607089236622066575354412233858024311307875685647888602614495454342815382115010476641119931946119898291840925928763812401211236687603465154212909073888163689802002080313577231753378120803829437731538312439650816690768766554606290018911221390629974908660778517826870808822123082394474200716250674023003964156210690583690398325462951687552583691625049135056857855714315196020361399781578844470450038390772353103087857170372147607277127618735514776474577910589464806413577369522117251556207744667677227163659580948972172", "y": "-0.053814726407754299893592686461608774534614001839130992182714788317378057177567527642165440621610463789448811564267247760619787705803396435509206274699977798561370848269233854770948327611770978146428663721111034089170298037471576433875333857783635108026482264080092881636957064653208874616675367567264467448162407109342372328741409600901689280116047524438898597622357487463745295613863620202907008528141410131714814953489009517963041371335252744812334201108520609660445901258152220847541144511981204050303017959893058564243641309738701506955240942052837900498450780331168111084965216353389186658777462955317817376090066674732756243932956183717951906175720263137486114556096556293207033259361894624517060625823671951601098349031635587702982534014477908223058718338908191340981589137573077976888947452019953488249238784068692952298516581178297074714948652941660167479121046761773353123353281074970430107873248921784078424765125647982317053664208726085843082527319384390026080941468468618875513381702214432932851236234841377326858505855454702895177331993381726557261909004468495398002687778139805704987676719741868155642689297113108029032325715168675678846475706511176635162341103272794619200617224086382171490871725840116061805081839474590842948577975660288777388195406107301224001553438304531212922621050069737340891081695022254885544588323051482493214727995569200266739401880721726889732136683236592230319810529427976918524632904787991553472280140833892324083451658255058210588333326999663377480303152727927815251880947731804318688855815605027602533189458631150558077511748071706071212861850961833127325053831689612562189273313032349189953737797243400954612946602664212648894658206307665301756741848654440299674386216133039278538650906545782339672163263342977426519508471053646580173989605340917208541237458117416777951008374059146207746854551564942154232274354934326744042878971112049718916641649768993370706796349651914779243381347364697312318944788761934579160434969255965043768249288020122671913099"}}
i := {"point": {"x": "1.310151340859102564451177386217750608921051025390625", "y": "0.7024399057941936863613818786689080297946929931640625"}, "direction": {"x": "-1.8277838288564037536943480349712215980510932026070080552421675781832346197026590319039419199024463470436025788195615979639141271913260357428898583165368353283158933815451066724251721999230391447580627990076550415387854453179337845359688162772143303416567690887528457759999849282387645234396412951160666562978991440034529189881516083289530758770407573334506092303474611654675069044431771798542851157547783594155522563122990483145389482603692244631478802055825058835846328647021425499257982741733201152992904901329380168268822934047889178547331025124506257854794727039382321075102403166940243283309388155527749173776469802316546244515843086056450192655144289013600983001578995081003521900235474005325789722220689695417922328070534316401326201425304687797128419498071654717142560762302195013135985736841857916622261812429257494302111007943459108225367187025959104960899430434539019351217347282416581569899333861610190188827866333424119411772439902558741002511278164404762596852364202965636571574823528693438018449605036892723154314481965730331107744501295907863108976407279207201747404218384072330155878720530968224937871916137822959564178426231597900437543253853494086740431828145374091692734937907038757043359839187612395593131802036588307201272310305485175656983569335785050909820746033387629475796413259740448441082208733829637665389719042312740522110451597765843138496173689987100828976744890540188969601016346307541728522379242060801509317894216520354129059075017291596928686078629449807570406666836555902950169405931851644090523734003834158178844721841307075930151855676770461337626279173652425709596743345559623850582606443950444393991182616208553501569632991422391527205602143494281839860253836864367022696984584988457975474802453622505285749848574302394851474092761352399817224083224916576797728054528325917598404570963567651825943049141854127098299731753682192765967524610246429975799006894571909918401060757909520232013105255420959836821253482859857056329077803745697321726806986608291993965", "y": "-0.81146609633514315704228195593417666098509217832301321569395469056699047615875935929060510744305816180505690280647880608469939125902340323362670730887203371110259218258695670329899856663027531148627831740015198469515938473519626313848284784495319725475202394373697634494601467482154398027397782850512177842050737390238436122012281704423538387943998773984735382143522348962802220315958232589195441781428407902561454323229455769306746362816352631298994527463481565845336465000157154875807208047154040126908372798305490185077760940589265153660060502456804994866896461923129082899051005896702195219303404277703431704841241938688025381766933586631340872253609734682508541081376669170958376225055391478054121692826882924150632949836139761140459942608773745185044135208199341621343478035003704076198589859169676907371959745837607493410728753499254099638935741339499076844395366785284524202673925365058415263543172799483113394660356898235147439619239029307739515099848199288857874936953119014669447797320331066692699613010398517689084300140326279579493827433562996739209852652189330866060443734599518129796658183592832274806078187207271844115033523755569883089256127867197519276966966924505951046420592626171316098028559378727754238307515462178522851443110524530255551968327308644042922116549943011312775828020815791711042695623390043485053003421251372345978652814505092925695047455476131401825817571919727029808030757483945219040712073268741226130252794969548678062473188981928748702641056343436288258763109199270079988998655965453790788849084382828464850402606596863152098715962090611472183296644113020094362012552017032939603206370336554606471567167096752369357417058808344098007585485798397422395233097463339136993427614437414151853917691523910496862103030367204252546054602008539589059584998231159002610596274149650579023952277446619626313281124145058466246720654638535664885632320845045444310249871787305293152361771312572797412079993117849211738866595382664016317235738705513555590500269004596058964064"}}
h := {"point": {"x": "1.310151340859102564451177386217750608921051025390625", "y": "0.7024399057941936863613818786689080297946929931640625"}, "direction": {"x": "-2.931585195290747680729737112415023148059844970703125", "y": "-1.349180327704335269345392589457333087921142578125"}}
f := {"point": {"x": "1.310151340859102564451177386217750608921051025390625", "y": "0.7024399057941936863613818786689080297946929931640625"}, "direction": {"x": "-1.617134813806889337417516117056948132812976837158203125", "y": "-0.69196414722607168558410339898046004236675798892974853515625"}}
D := {"x": "-0.29699698130146050595814561431061526909864202578247823647597273376018520850942232843714034182963085086073906248830245865613315286841862566094783525117020507105142462489669842408045797019811922531838385118902385111106883557027145645411735895580550786879428370646321721134264736982268563354012428889113340911048887136449929498668759525299037729467792706617428987482715305169269184651567609504573718222277738499964787859316612052939401143710303920581672162688540011999206649767890005852486981802339025226493291108240243848179107216846103588901994409339656352981289725933177730139981654279651455898625719260310279798194719820460009665009685010180556559288184556770950385868626855792257536799328311850176426499008354090794125576468157433221694818820981225758445948076206557755475770568466639546130780786002230966242622165050038776388520037583527919154239559352543286872474110532054423103656912075206397376757246409756966907350595484887990509615254248578172619650319932608323341594584917292970275694175468673282851789343471794754462081229102253808812324846868269673525047596281607820084575269438598145785382391610730023740059120766403843828369542961043855438149668644042624572142428039857423019681390396985977700875042326089155949264531491116368535673340720890530866055785979342317414021940305652841912907085837361710404642764950031419194427745657466606903486328098067736240236770550022369994469763607340147181438771794651787156269923122399966121591988253567786439613223816271774947791130384609488065496956164874714385654241931495875890070257052012308984403606961733010471311631648412834326586914369200147060047941083112261769870635876890077139984110395660391077772310985694815438606213228906227308589973673117428671314434629738620478097555863631705849159783150866909108529126639258727464061750208274675771570833141961035861511458346379838961589114511918316970586288782716371304581115164179185280017103783267278200412389294401005352039396427978591609860319559568793409237419785611609441900587906956086009343", "y": "-0.011072466197398575800796738064188830062250782939307854520307460324337261890638643597675929078799313340914884201430457587106040318415062191970133331244754930299381527201579755621958378503666226151029189464683975047920293058183620402224422045997778962078340193680599449957536370387841319032093391475837359361413882701622383691661386342202362763497493650091560424197060908419752829460773612519007818828728115924382004024789360468953592379331604525998175046963414495500030091152985769626536374401755932294173980379147355687493935826060312207758626220919348673361628412023378654503468860029523675214950910838719269791896965801422912768450943895467563834787470891855081662779651796313030613990068433933004785144926232356702683755712992614815466170521622001947670760986879497191678709678890050800650418288881823949538186979785518412517380757091049251283239186508351450528395014213765111660842772017297332023591076712400253930134785958021594184702014134366833214895262363704547020165538619299875717598316250988110394856759704237994389490150423517319510044397230439560281226464842055260536164011511495079799050678648788178794574670085376090006949251266840318258787670138077851316005577830819811963382142095186424110698613436077155528181170004275074736897119231998598812985046294926537063119870052271650971588735903205468352622049247120737369150283145280628923416669063532745458173455121856580360437629208281668257673745714699492828148807279235709296587675123784881270418220411912766147260564772323363396582006902381161547278160404899286405151490715669681761679733206530262351651652153893915249331231076742401201256118264621043044954218033403620092026643467697808201318140663888597440176479130077322337389500875505542972187896010027403886480483102882803057733902973938493315881061004743947296696967898579013170368497506118814014503798681983226865453196334282732365498995381907071368714227976907633007705187140674381480716896679264900875039485878708479705406628956014358869361124790341251014926104856447317148772"}
G := {"x": "-0.30633592460233245251690884329200078814154207719683628468930927132827341311913072263232622302369102202920562522247196986718324276997058396287544086596562511584692199132220314592233710957624533987746228713742831270620622819637816742787932370566665491386027203223661092961819093728068600561852949439531838042698376016335821732175917354085889011836316574820096343919816325597914093429691772673419324614296693068994209799873819111360883066550440223306237578756059965542079481186356808111188712832626420636989136939990296264409290359139360419161777290400923066094577402886570231190838460118719636971172096701971258704744311103579957838734543733491759079315312368705714762176703069919617267686452373239715039329211813817966579050679107168753164987481117202854027708380120203023730867564694941988867373926754440211211199511655992016159347083805606016057587626744032003921481110795474532343241438640683998663067348005350814289331850156084342248397600588764865764753727722396527927753379172152833332033128146587917176945266425748958965398718522957987052112043660533821323418433710644589047665019365820726639258722675757317057170181224672640828891167235508051635416298839848094680189130551118478898655107103341025568912853010518886844750170126427339049156391021765755588943771165145402003685139946240636616270681706700193045882014300542237276801008288099094472700992419248069561248654274453736799101148796431213559533193443056107430463204102472134096493685326097201466492388644631414127636238498124760509147431750233656488265581608259163849604166808914701979707411734004170883990908003138589193866575794550673186161509368767712439649076275919880700734061273807605694604891369768142835157010643913612029901699927221234942605945984568553407588566585045120843895653716931687412332709926264401203165787774750861520428429650275545277757520796808170142665090859213290260735931290502525458462551752091263257393907620417762951882894084604823164079563673686771540740574573095020118804819611351957594884626063892158863654", "y": "0.010752841365934713110539944908302492752270751464100183453962055610488951349755057070749464940413308496540113985559555070400128062737585505900649439381038150308667302419891788596223740559810730641779466722661374047930059656884717916031631850916029991801864977683423676905993058045370859159079823787747131020487124992363402843687961423232588022652644387773871019100034616793867125146797055060412090273035850335009538670750071262425493980478902131136208950552288238734852110138031717086100397945957691969497353811114514100131629547912379764770536640689818592154009706936753062583826819846054484463546231334821419569044719593097076605903560427852092683946965415178350416088957552798152884535101600122640576852339959316946932567476400307667150182113294766109169322603314853184002652602737787178149363220735489244071986748350438486326951795006897755966984653381232196078067794656167637897069912514962415935785078559435314454842730774357743920007244178012316764684929450517850290821825043396513697681551167224373107389647129895459933471037782577194065618088379016056803742016774857233731727401211739625675818254500137406780054276295058419024327392640714849632218000180698717004261574382496436959308509912043370216070720961283070858071369317076574428829956509193983385571796739125846670756295822885359150992636265720708492789395250153230024353034928339266482714811235232885888059624406099188105687559467500654942361704000368604451823827293815756651200615621716621004443615599381525558405233956531846259024265310647523991573339468888139096443501882685331304331730720225882620066547383288734342481813115509732686248107835327001757568693544382772251194697573182306920408761903604487655961347532812627899674785508670938761722883843637107429546472112345086320465380949186199789582474103347972901086581036090632939116024562774745472146414520313311462250321331229364652393651279885394153680686171754655339728772200119780769669781864155595115804015261525195984500979169705007868971326384896660966858552623166604320606"}
F := {"x": "-0.28707219268464563799590503946764168240663547003706562402064717934049312897955818378830545152088190742948371022427368739629837007447906732069923738986949946865982372072281399445111302791417628251711208522017941491453182816668427805571536220669125700371637972308822764229593155543378008995340513580640152928892947711578488746479125165794346385995305810329474959461387368730342846042751424417497725313922542751105937535022898041876411256016953666802546782664292049588190387842640877157170360267782458239164814156095828140641594717197167496642921139939772286502457594516456892855692879107132382400010159151554385753660327252203790906971931752651091178060033954499389649000040114373452188323560602014552630541025816721653180454693225104528242154025690740701353343407320343073332464205950257473965759643439600403608227536400874670318675313733825535957189325641167980945506109362176979643070550818607187274988786321944735224298396438283408190337245029213760375926132002857824435769606043962850028368677293364060789543989708143238669296984338530512208567696559626860433051916628062602392862686145281378784422153796579307811455665778014648419526121542409189763275011644632690539860927429920036141134625922704023028014091863116421064819125404024943440881932575740296744056779384429324542188679782692643070354304249367069880770211016440631555488309390967927504908049198851944385082714551517927379995350093678248409658082394402341736215113089332298186046320630579131705496001586787935236325270094198489452653913651442647270464855833281059560781556301356431674613785244373435051219163470767638129074415885931982202318898334934244018109581135851926072666637913510111035924755641694169945302082179067165103786985209478772955503701871497699076774192444924311942816918087842246647544839907249952517568095442425313262108887535332151333977742574490572312664959044888556414795908420708407741936267763550278090518292098248396598615049428413313251798923074404656079230647607162467415679033854628013870949463299187487150715", "y": "-0.032637680852544865206654964278208741014402267197884443330978024154164771201402795342836949507028367765755469512947733551128854210732438207962849587833908222801171489994797998817922419647767915199235536782409876094180026739583021196837759034452402486139245324621712718485469156211097639545006141249594255722617519896065098807117339532015709081698407393867148063338422857036429510120385251317788320642711274334212176036491786969229288643692504003537062247533069173255560845314389168462824181308951869567641213639615138688123022580458091627233789115860273773446650107821977664602749027171314092391879729880806060880914078095993776108281895042071836678024196243982078889639569081062605045054159769833752506036038871668253990100744229648289847862309990369409241419495431854700068920962434112186866925052095986708034115339911142637331773817885326896739248758211615260002356863262718885608580776251116140648405478699197572519628726387721832261240230953098602846396005464058991818331346133582543361528312766182521790984115719219233585508393421444031714241852800934200924130425149808778834586158093129219542320864752692177182434871307085211247241460438769229138406699798677639359327219129840392167379184037199650079670230259886762530204607512008348821749171587823382406993208370810731506704555890049796203430671003138912422912442874207569324017141158501434866236657581037247816906082019416127479926693078312598845720160320780055301189761804894767689466657467459435919737410163861342546292385914727246569283098865837980469460453194208431204908314435551737615105487347401434825487990092509684758026066574615394709395142649578207999743542588457640287553809931654373944180475251417671435462615276589982983625017949400959143215620165063329880629166125239150005764555722193316125681993049411452521264487605432641066901132059844356222613315690641458201945180860871170327798382188382717968364245959385489210179347543395081388512586844414017717698875083100233563578355565771713367608663289107797766185815698836582247162"}
d := {"center": {"x": "-0.2973188849313717767328880805731808636625448761879221414223904071686087763698024306314801284436382144970354728672534616396241732626553829861531066322778338360025869560738565982242998822956865146803698927783255030793498963457602423493496486190742439696874489154321207331547005219474828999297930056651064457525845002146085906579126670292889754069324997361365915810658918270420649039741159084779199274539192217466274639189925851452605087090720193529234585852742924534516437565176152650739194433891220079683121034418005311620716631197947426484760261698081584072259740472278469878291194761823563738054258783701814471721540018509827995905979247784249008470183884189871208008822687472874803599290126954740204050450393588078027961996144877762804003664310084891764068031730030557483638686834323316385744445923804636477261841750085727057216899240403454029774557780478905005236823802664997332962996663690963406602222813086154908345050028543701064537221128719448950981692142632218683775026099395383382727573145926257989949214510717482197679995550124428521620040813367580299400705229266480690505982828350686953315972142653093932712422591274992080436383490277007717893726093418510358867840423942859895809554660224562725802456244327249377328093158506795465885862783115863734096560059526747848347597583272974700325770046767589357341363686755274668062993447169913548431278465585639757143295901654307539694217991783214193131206447016375759296412027677260619508956609788303837260136065140285772082247654167261578987144535401790497590475710539926903565851103465655346078710425718331802465534864500138924974445021521602476786483103913495056340220702395446280911485719839952516841294774985597111547114790315629123788288367195463968156871870340453860631301916480571533381603841540668171075758734582433649144830544392137436256951470216087035955145121014792233058964114982157126393969420372065940478821455194344250939256850562970983142109862609383805906351659457770061952824789450055545418537367315200571801605367388980644052", "y": "-0.011215379094337622566113158723918310454575071227069398483762394405964608942284076874044293274231483071195265482819319307615650224752619574406914928871381018429289999944615375139635023207747772788362209735379461133835968687139411750028135742224995279016767750211906708771836833852562707299948925569606541425897523769035139820091740545376693332216598676677837613096154635663645485469741917845418955656921845767304304417169251154813474122504300067502915468047115190145460311093017640344243694292805261762994801946302573142619960159376286534651898819634185007393533544538506076498593362565215617450282549896708171950241282057049840837515281953991580710289002868165598640784152103436931618540136056201928263797084327180729988454704193224817942705492075145693397063717024180121140461964082771927979769679324536027236997073515924080154678644729261978378652026431889478870739577249256813597099889303173004546070271822891473805846095973101717601098991098079974448110907852925843812348355656996023142518420369210596316114136858188324879115976093963533862664170137055107907841297715654831808741077267707029316788536546786875979112538338363712210463453188852390688429695941451608472399632215004169508153070651825614522062149045330846001800756748406418693151703435123926236959191134822570769896379602572385290080427775204265610280762947924032184167773770057569945644419155123938642344016265189989173135196757567381022139219127189228139540070817683989918659756696107771501653808669305361100665745694514628742971898448308956231636386558292261399760084291600789141337971829753685991840432064229494220543691809573324954190359686109514263562603835616389039768189638748542465263453894550989759142301175061090674193093402442067592050379204120169412989471088679629350023828399740056824493274513786725950980557355785636282541027145199672015376626400892098405650198990087474145044483282912741071545041351137217153050176853613440572019837299147211732889823287927471221130459096375012743948524502081575173422944707294415735226"}, "radius_squared": "0.00056390971461880668417772151483300136867271711094952775598140596673339449174792985566807210026796391668788985178033869864086840945549098233283899299037503584218062882362333764488365775190345862983200037091115727512573374860101737933186747672864519035823947060392354043239666517868914905620962756047466361211322957836133475852229554837258347897305337933293416290205054256612837778553745379014700156048886433543572118095318447134242415386347075942522863023392875863673933014091886610521233606827563777661210773600614979955962460871177529038952717116562941062658893595873748640109196923919643739055624188418483462049220408646812020515744587504957471685993854042824066387668208965651274565686114744550105217755961685429637410218560305957605707025070235369382089054801219532534229353929538160788665931481872313882441057891709570157926660649754633023467110536056289770071896779319358852415518584961937424366220002910077138332794016582333770385882753577932839926140845834769774306638807303047978289866868782463265288960258952314720704662576935898980375694482189943641964602600546948130005968696272551118287144257373109210260353304466342279307082231399716840022845575570250418098408938029349869006534263735486411102052170027038696410827753804185065258898060166156015063626004733307648324625970817249532030413732336331898601992479995532814136177567657267172075421778435920082417185930494222188494500647541450280183002962348248454060368660729913240518137939250308153521821983954751010835877163814505198945705239378533011722607757398850567381549241483151809597307877524241068767494994873126767443892689275872329929031474376214664589008336133924664248501240127648347322426803527865333264703604105686455677520032027943354465233070421850842886053956071596828231061453689417631871614702610883851160533038506803766769016778545450877910973940927417931454136754726015114458078743580046126071295251532351192272585043749491679667116018452630703132710808128218037240623094416421577135557573443635550075969635473646011705798"}
g := {"point": {"x": "-0.306983472947786772966338730839197523891925811767578125", "y": "0.01047575856812200077727847968844798742793500423431396484375"}, "direction": {"x": "-1.314450381483858343312220995358075015246868133544921875", "y": "-0.65721618047826358376128919047687304555438458919525146484375"}}
E := {"x": "-0.30761345482500547037599548959266304546800934032180947645983667551011340534637455485187648359423169584018304393063667014345041744341846456214641639526636511808155822759143776059689791234620253387261022508990836154499997450469568192278827848561555080614685792679479695044595622689826476463888169792798042229193439505238003760671435771411202290930656971609147837916817390951086725409803087888086195719742731751240338282245315299316613829465979464731653887373079730665003992905955052015626836720640571527410823963735923456672862329290466939149967667133402530710069800198474415367986844957401572404814811376365595675935281428321946178349079410060019607709191114471078122225042074489577210800093317030833126863852950289357065790708011807154221692475376490381955653102448465597638225294471939012820486938917356923505593564084610635852322982646105740922392897275424568976590880188474526266597489496253925413596126705090343021880629360400029962165351220177344932620541784617289333030556468079100710354401633831888722314661543374791599517121485222788589187121178059854415453050820901968600516390362503948544232270029861163788607060263838253293464104230722644548601839537460736705943612137613207507187237667858357494806645572519712740107294275956122544452888642721583325605046349042453874248516316175464080354206481078884644156005203557634235562322433535095380402416299317918467208508438048215845588501010279046718420566095191126994483129072624206736993867467367853173788194344897005684511029775478073670934423888702354716718570312639745879936876245680725238452554114924234275516034245408741873134936681211283192642101376601060434192766789345063413791845233866473598078139889875893770176845655971183821643262545858721139425661878701092351737307136972845685497935327115291398186781904486259633475343306339522974815221035130778811109809306348491013995906145926515989045447944167880046453877871277524309794431344712299737476048856541853026040302555594200714833027732206848430064365018590662202773666883005073538715", "y": "0.010160771947897657883481165240223987691655359170301911491456349899198357891229212845496656808968072634116153253890658946494794109967424230058349182299042192005433887881626893551705638826660799197661106523886746771917128042378669625942839403348407232321259126173252290719452964151962645671097615206782709928402161363886801961320663307715149506421258458880473558760305292963832191396238427374755424557837623177957568935699057230902438524854776620337835800580944392404153765873355479464187261012795428491611913314035085458625093099945410156370376284739666687869482158455793464998058705295485851769920060743302725147202234755623191046316252778246229261412047470637530758669566985684037394407569895221079262720924542969821310212933310307023322145183821702426899393886635404013135475743676982145324387821625324944787861795833846201690689861147370591488927843665281543906682680858694661514970925081874919978300364942534222669247294558183929683522276635882408722881974885431372231141418354345222190061849451733926793509026144104990382794684846723891831447702570848187736383462006790768880451727987068002178492779047205527155851334697020580124711154622169768272118199544883124651170040741687279601012939181870893531217906519264657040671294468236443860677370481222661757970965388203662948982632538589113171279913812686973771510237063529771968160542600199256388946042477082424749672603224589495657988108298987801646800366630227531166584658917446639247425495205715768043877257139490799944243737230006016419741281983517002766094476428510004166013014768101818157024693741033135323620707963665171897832914290596534270933701527149388624083688303109349188486518148321117786969338457551688311788396723840592293531641697181208958332801016598753144474009165623781062315212916601775494069077362269022778153915025908072196634047421265763862514675108599438254529304342964334452807637359830844406540074315456761066643365194733199696448484214249820419713575169613173772512099012837695489042196900707963419289694612911606614157"}
c := {"center": {"x": "-0.29699698130146050595814561431061526909864202578247823647597273376018520850942232843714034182963085086073906248830245865613315286841862566094783525117020507105142462489669842408045797019811922531838385118902385111106883557027145645411735895580550786879428370646321721134264736982268563354012428889113340911048887136449929498668759525299037729467792706617428987482715305169269184651567609504573718222277738499964787859316612052939401143710303920581672162688540011999206649767890005852486981802339025226493291108240243848179107216846103588901994409339656352981289725933177730139981654279651455898625719260310279798194719820460009665009685010180556559288184556770950385868626855792257536799328311850176426499008354090794125576468157433221694818820981225758445948076206557755475770568466639546130780786002230966242622165050038776388520037583527919154239559352543286872474110532054423103656912075206397376757246409756966907350595484887990509615254248578172619650319932608323341594584917292970275694175468673282851789343471794754462081229102253808812324846868269673525047596281607820084575269438598145785382391610730023740059120766403843828369542961043855438149668644042624572142428039857423019681390396985977700875042326089155949264531491116368535673340720890530866055785979342317414021940305652841912907085837361710404642764950031419194427745657466606903486328098067736240236770550022369994469763607340147181438771794651787156269923122399966121591988253567786439613223816271774947791130384609488065496956164874714385654241931495875890070257052012308984403606961733010471311631648412834326586914369200147060047941083112261769870635876890077139984110395660391077772310985694815438606213228906227308589973673117428671314434629738620478097555863631705849159783150866909108529126639258727464061750208274675771570833141961035861511458346379838961589114511918316970586288782716371304581115164179185280017103783267278200412389294401005352039396427978591609860319559568793409237419785611609441900587906956086009343", "y": "-0.011072466197398575800796738064188830062250782939307854520307460324337261890638643597675929078799313340914884201430457587106040318415062191970133331244754930299381527201579755621958378503666226151029189464683975047920293058183620402224422045997778962078340193680599449957536370387841319032093391475837359361413882701622383691661386342202362763497493650091560424197060908419752829460773612519007818828728115924382004024789360468953592379331604525998175046963414495500030091152985769626536374401755932294173980379147355687493935826060312207758626220919348673361628412023378654503468860029523675214950910838719269791896965801422912768450943895467563834787470891855081662779651796313030613990068433933004785144926232356702683755712992614815466170521622001947670760986879497191678709678890050800650418288881823949538186979785518412517380757091049251283239186508351450528395014213765111660842772017297332023591076712400253930134785958021594184702014134366833214895262363704547020165538619299875717598316250988110394856759704237994389490150423517319510044397230439560281226464842055260536164011511495079799050678648788178794574670085376090006949251266840318258787670138077851316005577830819811963382142095186424110698613436077155528181170004275074736897119231998598812985046294926537063119870052271650971588735903205468352622049247120737369150283145280628923416669063532745458173455121856580360437629208281668257673745714699492828148807279235709296587675123784881270418220411912766147260564772323363396582006902381161547278160404899286405151490715669681761679733206530262351651652153893915249331231076742401201256118264621043044954218033403620092026643467697808201318140663888597440176479130077322337389500875505542972187896010027403886480483102882803057733902973938493315881061004743947296696967898579013170368497506118814014503798681983226865453196334282732365498995381907071368714227976907633007705187140674381480716896679264900875039485878708479705406628956014358869361124790341251014926104856447317148771"}, "radius_squared": "0.00056355991221099427391023228610160764157150380211227687719666710658147341948148652265451339764912848693623528653170438030851058595723673197444442064168320649099973813699986491379461669254779247764365497272227090673579317761129479925931431699736992714528198656722135858391915725560399818215945779272478428000751961582354198133006561850206177419114449878859305021279834758046385239268707761084058284221531245555038307776094982415568983631730588085794880664594541793439876588282100719143260824855662024542046446770614572589110231455323449607503392512577871155465824664865510907274809008462849516137595411947148586841984569583745145603866883104187062260480892364113278835695916107604124163115491391271240621185006284091536570406927363691199799196154029624886942483394366428797306435830661359523143498181848620218875878793918458235508413309810831577392799492260278566319816706880451110562480665179863026414432935847831651086739117302958939049563978854724494597811854964479499241187405247064619074057554014533707227684790026219782196042060474196461613995453827693291928675516307425132956640269245301853696206643776847768320755699740991222581467640237455667294539697537470408472428340281045427748736571728741015642880224812732578275508844983544403234873985368456017955704257400102571148728951899832818780510388390315902277052610941322365233308993677380545508036037394260903927902053163660306021891384869112056949620981367012839737056295898290636671706399687173164663120118269122722466593344215512829593064883396405820266079311434072505957200484955763553934931177850394723471950096495523232429792070151267003210370392879253786903694440620467248950267507077275555017975477863876538534175150509816238956152309341803991710073650523255876156264717838007004277950434025146650766634917184846818414432354922343849857395671920356499023846626549619205401247601959397797308702768808227427790577235151977033171826793677742202492546422308390387602853615155351365201562737031544881764044871983254041971145342811807758323591"}
k := {"point": {"x": "-0.30633592460233245251690884329200078814154207719683628468930927132827341311913072263232622302369102202920562522247196986718324276997058396287544086596562511584692199132220314592233710957624533987746228713742831270620622819637816742787932370566665491386027203223661092961819093728068600561852949439531838042698376016335821732175917354085889011836316574820096343919816325597914093429691772673419324614296693068994209799873819111360883066550440223306237578756059965542079481186356808111188712832626420636989136939990296264409290359139360419161777290400923066094577402886570231190838460118719636971172096701971258704744311103579957838734543733491759079315312368705714762176703069919617267686452373239715039329211813817966579050679107168753164987481117202854027708380120203023730867564694941988867373926754440211211199511655992016159347083805606016057587626744032003921481110795474532343241438640683998663067348005350814289331850156084342248397600588764865764753727722396527927753379172152833332033128146587917176945266425748958965398718522957987052112043660533821323418433710644589047665019365820726639258722675757317057170181224672640828891167235508051635416298839848094680189130551118478898655107103341025568912853010518886844750170126427339049156391021765755588943771165145402003685139946240636616270681706700193045882014300542237276801008288099094472700992419248069561248654274453736799101148796431213559533193443056107430463204102472134096493685326097201466492388644631414127636238498124760509147431750233656488265581608259163849604166808914701979707411734004170883990908003138589193866575794550673186161509368767712439649076275919880700734061273807605694604891369768142835157010643913612029901699927221234942605945984568553407588566585045120843895653716931687412332709926264401203165787774750861520428429650275545277757520796808170142665090859213290260735931290502525458462551752091263257393907620417762951882894084604823164079563673686771540740574573095020118804819611351957594884626063892158863654", "y": "0.010752841365934713110539944908302492752270751464100183453962055610488951349755057070749464940413308496540113985559555070400128062737585505900649439381038150308667302419891788596223740559810730641779466722661374047930059656884717916031631850916029991801864977683423676905993058045370859159079823787747131020487124992363402843687961423232588022652644387773871019100034616793867125146797055060412090273035850335009538670750071262425493980478902131136208950552288238734852110138031717086100397945957691969497353811114514100131629547912379764770536640689818592154009706936753062583826819846054484463546231334821419569044719593097076605903560427852092683946965415178350416088957552798152884535101600122640576852339959316946932567476400307667150182113294766109169322603314853184002652602737787178149363220735489244071986748350438486326951795006897755966984653381232196078067794656167637897069912514962415935785078559435314454842730774357743920007244178012316764684929450517850290821825043396513697681551167224373107389647129895459933471037782577194065618088379016056803742016774857233731727401211739625675818254500137406780054276295058419024327392640714849632218000180698717004261574382496436959308509912043370216070720961283070858071369317076574428829956509193983385571796739125846670756295822885359150992636265720708492789395250153230024353034928339266482714811235232885888059624406099188105687559467500654942361704000368604451823827293815756651200615621716621004443615599381525558405233956531846259024265310647523991573339468888139096443501882685331304331730720225882620066547383288734342481813115509732686248107835327001757568693544382772251194697573182306920408761903604487655961347532812627899674785508670938761722883843637107429546472112345086320465380949186199789582474103347972901086581036090632939116024562774745472146414520313311462250321331229364652393651279885394153680686171754655339728772200119780769669781864155595115804015261525195984500979169705007868971326384896660966858552623166604320606"}, "direction": {"x": "-0.149870768969218193245040993133443407714366912841796875", "y": "-0.444273461632614441452204800953040830790996551513671875"}}
J := {"x": "-0.30666280563066497650411255314953641082677627795624441364266205673498854270528972588026058255226268410641313498674623702242745089571510502936202699775006252567360317061002142019510082791698605014164949224482501363029780424989584285482282768193906484419725086015072487511654717005674683777193120368344233037634599028678458028679556663514971234789946799703768704218432240597753519387041364250310342705062316559701985963900487235630364536553026720220255690137207081073045592559088957059788666717916352173645822695383420883924075704589589447992992325243957280786393249713448979933111190638632951245172124516515144318966878600756606894446149344074560990109099904258845577326964655621165874565545383109069912422536622217173633646914176075367184962738316131991772342530212067564732174351127812325330550193385529598728001937449250992085310606355910582308100916333570756964303838351170332213496817598409220811514280298720672424561529266584551498688180869859609479736740322121766001655925191978932020134321250331947604270868561381152810582604504325207080680792432360986802817701525591364413122651975340557714300295677681352977760216224406990976063060253173493140631367837047928521876132537061762700187829911150533108610300316194449776607666305191062192523775382291378113339332111142853376957562257213731257643581578306957904635929332251828538955964237423209717267192025758297175625809040527424949263422896487477476063211537829632921671663319361620010862434727015614071582039395757361226794635222400501227202214036215554191248191358108820455295332928786350321806591733085455109455205474873241071075581423245663066399129466597240135020898391382077399701646118902929187635333335503617459713037020684523600580787242977476014146964448886766116065481919043890439147931840930445246001229451896094918174502625410297906745090623382539297578520174782251228475951597215924819325943385659650772869678005571988081721143872142239698179429282553344258215219182757562762483918181181036989696940450359517419477730415645655870801", "y": "0.009783842761349274053957885169081413405746047863269070081375623081530840217439358317178371523309787580806803005072226171424559545691236691256384129405418696165353249670286936774471345183473747003188939154386229632779997927017513299196976904539459460789356461934802923907720542482851796946484231265681664888159010905123026927660104637768407294690775754700856057773498113242100467530000592234550523635458029962373718897422376208405088982095590364270677636772421690671944110798864541023343135587993950501518849702043863351028796783976012420941099163163694233444545415292239478904477116142538014005375186561766965354725602291349629989183366801091757765482049323215020185594984620791643468364569509066052690775625961833723463142069532970647799216240008971260993351256356830889210516591436898063368430574754119040562678909604520918567292843588979079298280288832562412941823429247312515610245380642361544013950369575533604621620652153924988244328353462675241110376522693474390484912420432993861750203840146691704828649875094629458822604789936255646213839930370603633549440043179986282556840893669043215541616107440828290133854913845595004909401049279771056985365697858988405804748944407060657885801412380200208576668253182349312529181425642771632936333178471201587009690487594528443101434931993530706457880732067102349914938755202720547878437945893964284024121710463028999991491179611770149646347916701968628483610208673762116097846155455254004401154682926617113941837257756737339375100826076244652691990077407627189318451166539367558643680396569235906698642240544606571521482561830642980504164094852222098319253933421091941401946981986642776391391530247507850600034670677479406436510826360740449196622728817543036701039428624211165239877118537384862359443311060568857261737616432730118388192506211021709735985618603009678561839034809757370422241990171633950516318581307400989469861413069123984736782091201976643808989435291203212921512700039580674214934565065804635492313521385448597509598939810098761517447"}
I := {"x": "-0.28701527592081821198926217695021507410928764639384036513978442753434671128327116479186344130591873928186679965399006098563298260208738293863771948277062632480493074530599525786143060326605616407368736993085281672408003609816252748900610214085435420637275262394187196050143164385395939432428676588160896652743384206779003662622987312770855696697249564992678945055209788711383539427558925786743316753505999230629409334769455436837548553022024246002512222937907003260723833520809338260403366734260746076208708921266643199315168981832619380859789480780825843652054029299438778757130100397481948958994579261067115186867087172110050569490322939714583111405320608731168653255578056680031882885208000449562704775538425078039990453519977828998673583554220696652507324725816657724232575911455023715633383300562034002901746132578129983626927582569938397234507215480560784438573785600249201143258889774954551206203586757167533681791420767261077224247531104037764094305340492336800115250091938489339373718809824132338635743081261912952727616586837133393587990739592269388477815851930678792256909209654100154709719356340860373353717470497481235591464169513632318541213388923320803895309421092805034094367551715445483172599276900689929806654975951489141893504159386315383191666236502394833058083686569735069494475726811588263253779226764978525953651741846962930635338128684248094206663975095112708191962625663193314196305179691826767803839612361449135390437284268033341059337488676584304624252627505538534985050563145405137021739994762217774997861536104126305195909746309312208040387971116881353802824865361299808951436255623302949044113561745121298678389965870179924895361054924206250235369761501173751131591364310763085375974878656010475797500013721860094295309457767654840811078394762529408989710572335889351552289284547871552025767420735687960053575835746488817412848532216491693034148984841384995263758563085637982588036873401428806558725320327806848205665407393148448201550679723512667170646303229026283055005", "y": "-0.032610363459287415039175528237687540522685587669068706991617141987050871522495156812646594540324877012918027178711481281552758175734387098259007973295538761711613916800032488337946425233515019351414313376016840731904682054489104435269691864587807113423709082150681499868942436569029556165258100561966919457897734028160755915893478859136871529740171802615739850283308432020134292665503915948447914200249990473483397659936821043915117166060099676811615748826663884014975071815548489479655806939998165027686387184094026575615463382146185520739908860891368745685569676071331720969841713816305174242605299510170269285147474260046295490162879634070851595334818071306843021959932315400070701881910381021400843387816139038307224506130317011222374817403277398174716929339287208864971431037200205334258280427131069955101467987551733151665108313618242476738718420903405469307944137269963252755324933470776115925362958743648927538232158667551524651933248594713819210190153014127329325718862914793086959403813717716776506412978590282722714449548499968542348139128584111202797882408574680776951240669998580708808771645232535205726840471725709034497072730231500970883174032478170069396371628231346778477957200549850418666974180512607823036043793502879742479292744768655560806432016160919148918419579247444989786128665222336378892171869121611847549043763448511117947604359704832994158477837598904654834823682533841944603217279090786929150084018116273711554768215454110005831470088161733433774322077527513993657118026023920729338068279570270789046017064042381280701442756834380514174620850268145320652707952546595195374407489386577496808703674677446195611587132372036364348214257959059859883651525993047992940016862123518572424834943399549337772630846595634850647634629349866805775311022957938124961818898219170701679686783825933619108021365409059807820406226139275783588725926590830021795160414068237476886028514519418231361395396789932416740393868927808333194881240663012040468604537258230188620078918445369468406937"}
H := {"x": "-0.31764817411250252748834576468034646186017206676664012772433708226909793738571698879131969993955275499309365850437825984983582476328251468494101220963228061412303342305287919411743419396757450553511301426904634526250900715202861517258898605585018811667483699603507611731811990210883355185066469311428807915905524801058819731270850582730767921321383712434552361632419053441515696312733875126514399128222708684097528223892053526040059371377632027399453921064731192770247772070033057831446785322487338082331341147308496815469496286554440894523102045700560263137749333844098996843825135845687544618105567807331946083243985775664094241625223600487190009598474112496749697400407243929373873009874101131297885760688501764561824059428768147594563407780996196389834884314939320434501514274401719929455276148120319065613940433468061762064679311238948308891875747652284499605603044875015277501744057599074259186252380188268417423929450918671962600078930872931376316804448218573425563894095532023405833559077278201415244074891485519301556076901804095484252380654540240583425294543916223715098171277778156936886686623112425152455502668830075980677390853327763866309437405178575424578250339995014486223413379459285468151569060020433112687344673268989379226043716977833571964673654880573373702054579156689287962319245153578440241509556870935103927108803031728549838140428476290381917295437960961128762265977881589535869396540740977760216439940722274559155781977072747142954806615166733284620083111155625001916380743346048042045582730972191281861833747528331326589008228198665463146626015189240699367386186161654133448668565900767598307069916658094329203220974437379973309937347914825708399056715684856279221324892778378485541144905922197882610560745513859583692271503899874665807590089735949582113341076427219687194926084270043180062068800641380433599245311270846451333936307942232163005570806522588389621916629078742399765599563755184480518326193488329974491674218006178097586358337016871898041780897079029572271349", "y": "-0.022780930985412442597441589475921772357231407468369861267392831685662706228223025555392086120164182075409539400673303833661841718769266111424689961833587601093172169545991450890567617633536570996382543608780549654188783767163327776502780906837538267726422277275617504015927688304927520843198410225047538664361840242352386543770242742203241878957985345310013420260878141045491025913106984560573410839317042224378414173644590333455325570836177671098588323408953532872046988455597473291515047288673272923080856137836770551890290800891742257676632036799745235265117406253967031403342707008712339170051965365899206431508788926229696760522752347114386377147842775500897686085444371845373506401888587445902309775210472504227250275658246823135043554422458214934172524486253199579368488301291444508861474473576731354414380317385760393385499318087061454181647064440429755884208354172580822016481282461610077984327689807826576139416038184730006821709810879759992581396024233200385152255716379468538795320985336417224219943665895843348440517830728017112737989074785364819276374344895962952656142363517373929287437384127188758450480875127979937666199368782987663108498644402778404185162569031721048269328080843043615361896164460684953889120008719656175037088562695251300706116149934349147638793514491791593473267769812443253409091717804793367696753975541640014764729548619828355141008353986908586829993118342576548376466628991415434598124917047982565107313550887685491496310098186178416332794036419615640263191321500406550386172948998908137235526438307598965669385358612763818433241504146085221330940128642095327841068330709755283146262371131426595934343522957262948975065387305643314433035610302984133858206006771274266910034743426507429891613628341765849426032561268762183035571145213695314002554892987624889596453862406551126280476927699055611959574456766141626284654034222235479813892481977011186377608069859548918874266716956200633856492552009623198643147836110576706762613534487248635305974601642993996499614"}

Need to prove:
concyclic(F, H, I, J)

Proof:
By line_definition on I, D, j we get j == Line(D, I)
By line_definition on D, B, j we get j == Line(B, D)
By line_definition on B, E, g we get g == Line(B, E)
By line_definition on C, E, g we get g == Line(C, E)
By line_definition on I, B, j we get j == Line(B, I)
By line_definition on G, D, perpendicular_line(D, f) we get Line(D, G) == perpendicular_line(D, f)
By line_definition on G, J, k we get k == Line(G, J)
By line_definition on A, F, h we get h == Line(A, F)
By line_definition on A, D, i we get i == Line(A, D)
By line_definition on G, B, f we get f == Line(B, G)
By line_definition on J, D, j we get j == Line(D, J)
By line_definition on B, J, j we get j == Line(B, J)
By line_definition on J, H, k we get k == Line(H, J)
By line_definition on D, E, perpendicular_line(D, g) we get Line(D, E) == perpendicular_line(D, g)
By line_definition on G, H, k we get k == Line(G, H)
By line_definition on I, J, j we get j == Line(I, J)
By line_definition on F, C, h we get h == Line(C, F)
By line_definition on A, G, f we get f == Line(A, G)
By line_definition on D, F, perpendicular_line(D, h) we get Line(D, F) == perpendicular_line(D, h)
By circle_definition on E, F, H, c we get c == Circle(E, F, H)
By circle_definition on G, F, H, c we get c == Circle(F, G, H)
By circle_definition on G, F, I, d we get d == Circle(F, G, I)
By perpendicular_line_definition on A, f, perpendicular_line(D, f) we get f == perpendicular_line(A, perpendicular_line(D, f))
By line_intersection_definition on B, g, f we get B == line_intersection(f, g)
By circle_definition on E, G, H, c we get c == Circle(E, G, H)
By line_intersection_definition on A, f, h we get A == line_intersection(f, h)
By circle_definition on I, G, B, d we get d == Circle(B, G, I)
By circle_definition on F, I, B, d we get d == Circle(B, F, I)
By line_intersection_definition on C, h, g we get C == line_intersection(g, h)
By perpendicular_line_definition on C, h, perpendicular_line(D, h) we get h == perpendicular_line(C, perpendicular_line(D, h))
By line_intersection_definition on A, i, f we get A == line_intersection(f, i)
By perpendicular_line_definition on C, g, perpendicular_line(D, g) we get g == perpendicular_line(C, perpendicular_line(D, g))
By line_intersection_definition on B, g, j we get B == line_intersection(g, j)
By perpendicular_line_definition on E, perpendicular_line(D, g), g we get perpendicular_line(D, g) == perpendicular_line(E, g)
By line_intersection_definition on G, f, k we get G == line_intersection(f, k)
By perpendicular_line_definition on F, perpendicular_line(D, h), h we get perpendicular_line(D, h) == perpendicular_line(F, h)
By perpendicular_line_definition on B, f, perpendicular_line(D, f) we get f == perpendicular_line(B, perpendicular_line(D, f))
By perpendicular_line_definition on G, f, perpendicular_line(D, f) we get f == perpendicular_line(G, perpendicular_line(D, f))
By line_intersection_definition on A, h, i we get A == line_intersection(h, i)
By perpendicular_line_definition on A, h, perpendicular_line(D, h) we get h == perpendicular_line(A, perpendicular_line(D, h))
By line_intersection_definition on B, f, j we get B == line_intersection(f, j)
By perpendicular_line_definition on F, h, perpendicular_line(D, h) we get h == perpendicular_line(F, perpendicular_line(D, h))
By perpendicular_line_definition on E, g, perpendicular_line(D, g) we get g == perpendicular_line(E, perpendicular_line(D, g))
By perpendicular_line_definition on B, g, perpendicular_line(D, g) we get g == perpendicular_line(B, perpendicular_line(D, g))
By perpendicular_line_definition on G, perpendicular_line(D, f), f we get perpendicular_line(D, f) == perpendicular_line(G, f)
By line_unique_intersection_v1 on g, f, B, G we get G not in g
By line_unique_intersection_v1 on i, f, A, G we get G not in i
By line_unique_intersection_v1 on k, f, G, B we get B not in k
By line_unique_intersection_v1 on f, i, A, D we get D not in f
By line_unique_intersection_v1 on f, j, B, I we get I not in f
By line_unique_intersection_v1 on i, j, D, J we get J not in i
By line_unique_intersection_v1 on f, h, A, C we get C not in f
By line_unique_intersection_v1 on j, k, J, G we get G not in j
By line_unique_intersection_v1 on h, i, A, D we get D not in h
By line_unique_intersection_v1 on j, f, B, A we get A not in j
By line_unique_intersection_v1 on i, j, D, B we get B not in i
By line_unique_intersection_v1 on i, j, D, I we get I not in i
By line_unique_intersection_v1 on g, h, C, F we get F not in g
By line_unique_intersection_v1 on h, g, C, B we get B not in h
By line_unique_intersection_v1 on j, g, B, C we get C not in j
By line_unique_intersection_v1 on i, h, A, C we get C not in i
By line_unique_intersection_v1 on g, j, B, D we get D not in g
By line_unique_intersection_v1 on k, j, J, I we get I not in k
By line_unique_intersection_v1 on f, k, G, J we get J not in f
By line_unique_intersection_v1 on g, j, B, I we get I not in g
By line_unique_intersection_v1 on g, j, B, J we get J not in g
By line_unique_intersection_v1 on j, k, J, H we get H not in j
By line_unique_intersection_v1 on k, f, G, A we get A not in k
By line_unique_intersection_v1 on h, g, C, E we get E not in h
By line_unique_intersection_v1 on i, h, A, F we get F not in i
By line_unique_intersection_v1 on h, f, A, G we get G not in h
By line_unique_intersection_v1 on g, h, C, A we get A not in g
By line_unique_intersection_v1 on j, g, B, E we get E not in j
By line_unique_intersection_v1 on f, g, B, E we get E not in f
By line_unique_intersection_v1 on k, j, J, D we get D not in k
By line_unique_intersection_v1 on f, h, A, F we get F not in f
By line_unique_intersection_v1 on f, k, G, H we get H not in f
By different_points_v1 on A, C we get 0 != distance(A, C)
By different_points_v1 on A, B we get 0 != distance(A, B)
By different_points_v1 on C, B we get 0 != distance(B, C)
By in_imply_collinear on E, B, C we get collinear(B, C, E)
By in_imply_collinear on G, B, A we get collinear(A, B, G)
By in_imply_collinear on F, C, A we get collinear(A, C, F)
By in_imply_concyclic on F, G, E, H we get concyclic(E, F, G, H)
By circle_circle_intersection_has_at_most_two_points_0 on G, F, I, d, c we get I not in c
By not_in_line_equivalent_to_not_collinear_v0_r on D, B, C we get D not in Line(B, C)
By in_imply_concyclic on G, B, F, I we get concyclic(B, F, G, I)
By not_in_line_equivalent_to_not_collinear_v0_r on F, B, C we get F not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on B, C, A we get B not in Line(A, C)
By circle_circle_intersection_has_at_most_two_points_0 on F, G, H, c, d we get H not in d
By not_in_line_equivalent_to_not_collinear_v0_r on D, C, A we get D not in Line(A, C)
By circle_circle_intersection_has_at_most_two_points_0 on F, G, B, d, c we get B not in c
By not_in_line_equivalent_to_not_collinear_v0_r on G, C, B we get G not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on J, B, A we get J not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on F, A, B we get F not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on A, C, B we get A not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on I, A, B we get I not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on E, A, C we get E not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on J, C, B we get J not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on J, C, A we get J not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on H, A, B we get H not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on C, B, A we get C not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on G, A, C we get G not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on E, B, A we get E not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on H, B, C we get H not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on I, C, A we get I not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on H, C, A we get H not in Line(A, C)
By circle_circle_intersection_has_at_most_two_points_0 on F, G, E, c, d we get E not in d
By not_in_line_equivalent_to_not_collinear_v0_r on I, B, C we get I not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on D, A, B we get D not in Line(A, B)
By power_of_a_point_on_circle on E, c we get 0 == power_of_a_point(E, c)
By power_of_a_point_in_circle on B, d we get 0 == power_of_a_point(B, d)
By power_of_a_point_on_circle on H, c we get 0 == power_of_a_point(H, c)
By power_of_a_point_in_circle on F, d we get 0 == power_of_a_point(F, d)
By power_of_a_point_on_circle on G, c we get 0 == power_of_a_point(G, c)
By power_of_a_point_on_circle on I, d we get 0 == power_of_a_point(I, d)
By power_of_a_point_on_circle on G, d we get 0 == power_of_a_point(G, d)
By angles_on_chord_v2 on G, F, I, B, d we get angle(G, I, F) == angle(G, B, F) + 180 mod 360
By power_of_a_point_on_circle on F, c we get 0 == power_of_a_point(F, c)
By angles_on_chord_v0 on F, I, G, B, d we get angle(F, B, I) == angle(F, G, I) mod 360
By angles_on_chord_v1 on B, G, F, I, d we get angle(B, F, G) == angle(B, I, G) mod 360
By angles_on_chord_v2 on F, E, H, G, c we get angle(F, H, E) == angle(F, G, E) + 180 mod 360
By angles_on_chord_v3 on G, H, E, F, c we get angle(G, E, H) == angle(G, F, H) + 180 mod 360
By angles_on_chord_v1 on F, B, G, I, d we get angle(F, G, B) == angle(F, I, B) mod 360
By angles_on_chord_v1 on H, E, F, G, c we get angle(H, F, E) == angle(H, G, E) mod 360
By angles_on_chord_v1 on G, I, B, F, d we get angle(G, B, I) == angle(G, F, I) mod 360
By angles_on_chord_v3 on I, B, G, F, d we get angle(I, G, B) == angle(I, F, B) + 180 mod 360
By angles_on_chord_v3 on E, F, H, G, c we get angle(E, H, F) == angle(E, G, F) + 180 mod 360
By angles_on_chord_v0 on I, G, B, F, d we get angle(I, B, G) == angle(I, F, G) mod 360
By angles_on_chord_v2 on H, G, E, F, c we get angle(H, E, G) == angle(H, F, G) + 180 mod 360
By angles_on_chord_v0 on G, E, H, F, c we get angle(G, F, E) == angle(G, H, E) mod 360
By angles_on_chord_v0 on H, F, G, E, c we get angle(H, E, F) == angle(H, G, F) mod 360
By angles_on_chord_v2 on E, F, G, H, c we get angle(E, G, F) == angle(E, H, F) + 180 mod 360
By angles_on_chord_v3 on H, G, F, E, c we get angle(H, F, G) == angle(H, E, G) + 180 mod 360
By angles_on_chord_v3 on F, E, G, H, c we get angle(F, G, E) == angle(F, H, E) + 180 mod 360
By angles_on_chord_v0 on G, B, I, F, d we get angle(G, F, B) == angle(G, I, B) mod 360
By angles_on_chord_v1 on F, H, G, E, c we get angle(F, E, H) == angle(F, G, H) mod 360
By angles_on_chord_v0 on B, F, G, I, d we get angle(B, G, F) == angle(B, I, F) mod 360
By angles_on_chord_v3 on B, I, F, G, d we get angle(B, F, I) == angle(B, G, I) + 180 mod 360
By angles_on_chord_v2 on F, G, B, I, d we get angle(F, B, G) == angle(F, I, G) + 180 mod 360
By angles_on_chord_v1 on E, G, F, H, c we get angle(E, F, G) == angle(E, H, G) mod 360
By angles_on_chord_v3 on F, G, I, B, d we get angle(F, I, G) == angle(F, B, G) + 180 mod 360
By angles_on_chord_v0 on F, G, H, E, c we get angle(F, E, G) == angle(F, H, G) mod 360
By angles_on_chord_v1 on G, F, H, E, c we get angle(G, E, F) == angle(G, H, F) mod 360
By angles_on_chord_v1 on I, F, B, G, d we get angle(I, B, F) == angle(I, G, F) mod 360
By angles_on_chord_v3 on G, F, B, I, d we get angle(G, B, F) == angle(G, I, F) + 180 mod 360
By angles_on_chord_v2 on I, B, F, G, d we get angle(I, F, B) == angle(I, G, B) + 180 mod 360
By angles_on_chord_v2 on B, I, G, F, d we get angle(B, G, I) == angle(B, F, I) + 180 mod 360
By angles_on_chord_v0 on E, H, G, F, c we get angle(E, F, H) == angle(E, G, H) mod 360
By angles_on_chord_v2 on G, H, F, E, c we get angle(G, F, H) == angle(G, E, H) + 180 mod 360
By altitude_definition on D, C, B, perpendicular_line(D, g) we get altitude(D, B, C) == perpendicular_line(D, g)
By altitude_definition on D, B, A, perpendicular_line(D, f) we get altitude(D, A, B) == perpendicular_line(D, f)
By altitude_definition on D, C, A, perpendicular_line(D, h) we get altitude(D, A, C) == perpendicular_line(D, h)
By incenter_concurrency on C, A, B we get incenter(A, B, C) in internal_angle_bisector(B, A, C), incenter(A, B, C) in internal_angle_bisector(A, B, C), incenter(A, B, C) in internal_angle_bisector(A, C, B)
By line_definition on D, C, internal_angle_bisector(A, C, B) we get Line(C, D) == internal_angle_bisector(A, C, B)
By radical_axis_of_intersecting_circles_v0 on F, G, c, d we get Line(F, G) == radical_axis(c, d)
By line_unique_intersection_v1 on internal_angle_bisector(A, C, B), j, D, I we get I not in internal_angle_bisector(A, C, B)
By line_unique_intersection_v1 on internal_angle_bisector(A, C, B), j, D, J we get J not in internal_angle_bisector(A, C, B)
By line_unique_intersection_v1 on internal_angle_bisector(A, C, B), j, D, B we get B not in internal_angle_bisector(A, C, B)
By line_unique_intersection_v1 on internal_angle_bisector(A, C, B), i, D, A we get A not in internal_angle_bisector(A, C, B)
By projection_definition on C, F, Line(D, F) we get F == projection(C, Line(D, F))
By projection_definition on A, G, Line(D, G) we get G == projection(A, Line(D, G))
By projection_definition on B, E, Line(D, E) we get E == projection(B, Line(D, E))
By projection_definition on B, G, Line(D, G) we get G == projection(B, Line(D, G))
By projection_definition on A, F, Line(D, F) we get F == projection(A, Line(D, F))
By projection_definition on C, E, Line(D, E) we get E == projection(C, Line(D, E))
By different_points_v1 on E, H we get 0 != distance(E, H)
By different_points_v1 on J, H we get 0 != distance(H, J)
By different_points_v1 on F, E we get 0 != distance(E, F)
By different_points_v1 on G, F we get 0 != distance(F, G)
By different_points_v1 on C, E we get 0 != distance(C, E)
By different_points_v1 on E, D we get 0 != distance(D, E)
By different_points_v1 on G, B we get 0 != distance(B, G)
By different_points_v1 on F, A we get 0 != distance(A, F)
By different_points_v1 on J, G we get 0 != distance(G, J)
By different_points_v1 on D, B we get 0 != distance(B, D)
By different_points_v1 on D, I we get 0 != distance(D, I)
By different_points_v1 on G, I we get 0 != distance(G, I)
By same_angle_v3 on G, B, A, F we get angle(B, G, F) == angle(A, G, F) + 180 mod 360
By different_points_v1 on J, B we get 0 != distance(B, J)
By different_points_v1 on J, I we get 0 != distance(I, J)
By different_points_v1 on B, F we get 0 != distance(B, F)
By different_points_v1 on D, J we get 0 != distance(D, J)
By different_points_v1 on D, A we get 0 != distance(A, D)
By different_points_v1 on E, B we get 0 != distance(B, E)
By different_points_v1 on F, D we get 0 != distance(D, F)
By different_points_v1 on E, G we get 0 != distance(E, G)
By different_points_v1 on G, H we get 0 != distance(G, H)
By different_points_v1 on A, G we get 0 != distance(A, G)
By same_angle_v3 on G, B, A, E we get angle(B, G, E) == angle(A, G, E) + 180 mod 360
By different_points_v1 on F, I we get 0 != distance(F, I)
By different_points_v1 on C, F we get 0 != distance(C, F)
By different_points_v1 on F, H we get 0 != distance(F, H)
By different_points_v1 on G, D we get 0 != distance(D, G)
By different_points_v1 on B, I we get 0 != distance(B, I)
By same_angle_v1 on B, A, G, F we get angle(A, B, F) == angle(G, B, F) mod 360
By perpendicular_direction_conditions_v0_r on D, G, G, B we get 180 == 2 * direction(D, G) - 2 * direction(G, B) mod 360
By same_angle_v3 on G, B, A, H we get angle(B, G, H) == angle(A, G, H) + 180 mod 360
By same_angle_v1 on B, A, G, I we get angle(A, B, I) == angle(G, B, I) mod 360
By same_angle_v3 on G, B, A, I we get angle(B, G, I) == angle(A, G, I) + 180 mod 360
By perpendicular_direction_conditions_v0_r on D, G, B, G we get 180 == 2 * direction(D, G) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on B, G, G, D we get 180 == 2 * direction(B, G) - 2 * direction(G, D) mod 360
By probably_between_and_collinear_implies_between on A, G, B we get between(A, G, B)
By perpendicular_direction_conditions_v0_r on G, B, G, D we get 180 == 2 * direction(G, B) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on G, D, B, G we get 180 == 2 * direction(G, D) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on G, D, G, B we get 180 == 2 * direction(G, D) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on B, G, D, G we get 180 == 2 * direction(B, G) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on G, B, D, G we get 180 == 2 * direction(G, B) - 2 * direction(D, G) mod 360
By probably_between_and_collinear_implies_between on C, E, B we get between(B, E, C)
By in_imply_collinear on H, G, J we get collinear(G, H, J)
By in_imply_collinear on J, I, D we get collinear(D, I, J)
By in_imply_collinear on D, J, B we get collinear(B, D, J)
By in_imply_collinear on B, I, J we get collinear(B, I, J)
By probably_between_and_collinear_implies_between on A, F, C we get between(A, F, C)
By in_imply_collinear on D, B, I we get collinear(B, D, I)
By not_in_line_equivalent_to_not_collinear_v0_r on C, D, F we get C not in Line(D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on E, H, F we get E not in Line(F, H)
By not_in_line_equivalent_to_not_collinear_v0_r on A, F, G we get A not in Line(F, G)
By not_in_line_equivalent_to_not_collinear_v0_r on J, F, H we get J not in Line(F, H)
By line_inequality on Line(F, I), i, I we get i != Line(F, I)
By not_in_line_equivalent_to_not_collinear_v0_r on A, G, E we get A not in Line(E, G)
By reverse_direction on F, B we get 180 == direction(F, B) - direction(B, F) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on J, F, I we get J not in Line(F, I)
By line_inequality on Line(F, I), g, F we get g != Line(F, I)
By not_in_line_equivalent_to_not_collinear_v0_r on D, H, E we get D not in Line(E, H)
By not_in_line_equivalent_to_not_collinear_v0_r on I, E, D we get I not in Line(D, E)
By reverse_direction on F, E we get 180 == direction(F, E) - direction(E, F) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on B, H, F we get B not in Line(F, H)
By reverse_direction on G, H we get 180 == direction(G, H) - direction(H, G) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on D, F, B we get D not in Line(B, F)
By reverse_direction on G, I we get 180 == direction(G, I) - direction(I, G) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on F, G, E we get F not in Line(E, G)
By line_inequality on Line(E, G), g, G we get g != Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on A, I, F we get A not in Line(F, I)
By not_in_line_equivalent_to_not_collinear_v0_r on E, J, G we get E not in Line(G, J)
By reverse_direction on I, G we get 180 == direction(I, G) - direction(G, I) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on F, J, G we get F not in Line(G, J)
By not_in_line_equivalent_to_not_collinear_v0_r on A, E, D we get A not in Line(D, E)
By reverse_direction on I, B we get 180 == direction(I, B) - direction(B, I) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on H, G, F we get H not in Line(F, G)
By not_in_line_equivalent_to_not_collinear_v0_r on A, D, F we get A not in Line(D, F)
By reverse_direction on E, H we get 180 == direction(E, H) - direction(H, E) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on I, E, G we get I not in Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on H, I, G we get H not in Line(G, I)
By not_in_line_equivalent_to_not_collinear_v0_r on F, B, J we get F not in Line(B, J)
By not_in_line_equivalent_to_not_collinear_v0_r on F, G, D we get F not in Line(D, G)
By not_in_line_equivalent_to_not_collinear_v0_r on J, F, G we get J not in Line(F, G)
By not_in_line_equivalent_to_not_collinear_v0_r on C, E, G we get C not in Line(E, G)
By reverse_direction on G, F we get 180 == direction(G, F) - direction(F, G) mod 360
By line_inequality on Line(E, H), f, H we get f != Line(E, H)
By not_in_line_equivalent_to_not_collinear_v0_r on D, E, F we get D not in Line(E, F)
By not_in_line_equivalent_to_not_collinear_v0_r on F, J, H we get F not in Line(H, J)
By not_in_line_equivalent_to_not_collinear_v0_r on E, F, B we get E not in Line(B, F)
By reverse_direction on G, E we get 180 == direction(G, E) - direction(E, G) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on G, F, D we get G not in Line(D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on A, F, E we get A not in Line(E, F)
By not_in_line_equivalent_to_not_collinear_v0_r on C, D, G we get C not in Line(D, G)
By line_inequality on Line(F, I), f, F we get f != Line(F, I)
By line_inequality on internal_angle_bisector(A, C, B), f, C we get f != internal_angle_bisector(A, C, B)
By reverse_direction on H, E we get 180 == direction(H, E) - direction(E, H) mod 360
By reverse_direction on I, F we get 180 == direction(I, F) - direction(F, I) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on F, I, B we get F not in Line(B, I)
By not_in_line_equivalent_to_not_collinear_v0_r on J, E, H we get J not in Line(E, H)
By line_inequality on Line(E, H), g, H we get g != Line(E, H)
By line_inequality on Line(E, G), i, G we get i != Line(E, G)
By reverse_direction on H, G we get 180 == direction(H, G) - direction(G, H) mod 360
By reverse_direction on F, I we get 180 == direction(F, I) - direction(I, F) mod 360
By line_inequality on Line(E, H), j, H we get j != Line(E, H)
By not_in_line_equivalent_to_not_collinear_v0_r on H, D, A we get H not in Line(A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on F, J, D we get F not in Line(D, J)
By not_in_line_equivalent_to_not_collinear_v0_r on D, F, I we get D not in Line(F, I)
By not_in_line_equivalent_to_not_collinear_v0_r on I, F, E we get I not in Line(E, F)
By reverse_direction on F, H we get 180 == direction(F, H) - direction(H, F) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on F, E, D we get F not in Line(D, E)
By reverse_direction on B, G we get 180 == direction(B, G) - direction(G, B) mod 360
By reverse_direction on B, I we get 180 == direction(B, I) - direction(I, B) mod 360
By line_inequality on internal_angle_bisector(A, C, B), h, D we get h != internal_angle_bisector(A, C, B)
By not_in_line_equivalent_to_not_collinear_v0_r on B, E, D we get B not in Line(D, E)
By line_inequality on Line(B, F), k, B we get k != Line(B, F)
By not_in_line_equivalent_to_not_collinear_v0_r on J, F, B we get J not in Line(B, F)
By line_inequality on Line(E, F), f, E we get f != Line(E, F)
By reverse_direction on G, B we get 180 == direction(G, B) - direction(B, G) mod 360
By reverse_direction on F, G we get 180 == direction(F, G) - direction(G, F) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on G, F, B we get G not in Line(B, F)
By line_inequality on Line(F, H), j, H we get j != Line(F, H)
By reverse_direction on E, F we get 180 == direction(E, F) - direction(F, E) mod 360
By reverse_direction on B, F we get 180 == direction(B, F) - direction(F, B) mod 360
By reverse_direction on H, F we get 180 == direction(H, F) - direction(F, H) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on B, G, F we get B not in Line(F, G)
By not_in_line_equivalent_to_not_collinear_v0_r on G, E, F we get G not in Line(E, F)
By not_in_line_equivalent_to_not_collinear_v0_r on H, F, E we get H not in Line(E, F)
By not_in_line_equivalent_to_not_collinear_v0_r on C, G, F we get C not in Line(F, G)
By reverse_direction on E, G we get 180 == direction(E, G) - direction(G, E) mod 360
By line_inequality on Line(G, I), g, G we get g != Line(G, I)
By not_in_line_equivalent_to_not_collinear_v0_r on I, D, F we get I not in Line(D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on J, I, G we get J not in Line(G, I)
By line_inequality on Line(F, H), h, H we get h != Line(F, H)
By not_in_line_equivalent_to_not_collinear_v0_r on H, F, B we get H not in Line(B, F)
By line_inequality on internal_angle_bisector(A, C, B), k, D we get k != internal_angle_bisector(A, C, B)
By line_inequality on Line(E, G), j, E we get j != Line(E, G)
By line_inequality on Line(B, F), g, F we get g != Line(B, F)
By not_in_line_equivalent_to_not_collinear_v0_r on H, F, D we get H not in Line(D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on D, H, F we get D not in Line(F, H)
By not_in_line_equivalent_to_not_collinear_v0_r on H, E, D we get H not in Line(D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on J, D, E we get J not in Line(D, E)
By line_inequality on Line(D, E), j, E we get j != Line(D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on C, B, F we get C not in Line(B, F)
By line_inequality on Line(D, E), f, E we get f != Line(D, E)
By line_inequality on Line(G, I), h, G we get h != Line(G, I)
By line_inequality on Line(D, G), i, G we get i != Line(D, G)
By not_in_line_equivalent_to_not_collinear_v0_r on E, A, D we get E not in Line(A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on D, F, G we get D not in Line(F, G)
By line_inequality on Line(E, H), h, E we get h != Line(E, H)
By line_inequality on Line(E, F), j, E we get j != Line(E, F)
By not_in_line_equivalent_to_not_collinear_v0_r on C, F, E we get C not in Line(E, F)
By not_in_line_equivalent_to_not_collinear_v0_r on C, H, E we get C not in Line(E, H)
By line_inequality on Line(E, G), h, G we get h != Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on F, G, I we get F not in Line(G, I)
By not_in_line_equivalent_to_not_collinear_v0_r on I, F, B we get I not in Line(B, F)
By not_in_line_equivalent_to_not_collinear_v0_r on A, I, G we get A not in Line(G, I)
By not_in_line_equivalent_to_not_collinear_v0_r on E, G, I we get E not in Line(G, I)
By not_in_line_equivalent_to_not_collinear_v0_r on B, I, G we get B not in Line(G, I)
By not_in_line_equivalent_to_not_collinear_v0_r on F, D, I we get F not in Line(D, I)
By not_in_line_equivalent_to_not_collinear_v0_r on C, F, H we get C not in Line(F, H)
By not_in_line_equivalent_to_not_collinear_v0_r on H, G, D we get H not in Line(D, G)
By not_in_line_equivalent_to_not_collinear_v0_r on J, F, E we get J not in Line(E, F)
By line_inequality on Line(D, G), h, G we get h != Line(D, G)
By not_in_line_equivalent_to_not_collinear_v0_r on H, E, G we get H not in Line(E, G)
By line_inequality on Line(D, F), g, D we get g != Line(D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on E, G, F we get E not in Line(F, G)
By not_in_line_equivalent_to_not_collinear_v0_r on J, F, D we get J not in Line(D, F)
By line_inequality on Line(F, G), i, F we get i != Line(F, G)
By not_in_line_equivalent_to_not_collinear_v0_r on F, D, B we get F not in Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on C, G, J we get C not in Line(G, J)
By line_inequality on Line(E, F), g, F we get g != Line(E, F)
By not_in_line_equivalent_to_not_collinear_v0_r on I, F, G we get I not in Line(F, G)
By not_in_line_equivalent_to_not_collinear_v0_r on H, I, F we get H not in Line(F, I)
By not_in_line_equivalent_to_not_collinear_v0_r on C, H, G we get C not in Line(G, H)
By not_in_line_equivalent_to_not_collinear_v0_r on E, D, F we get E not in Line(D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on C, I, G we get C not in Line(G, I)
By line_inequality on Line(F, G), g, F we get g != Line(F, G)
By line_inequality on Line(D, G), k, D we get k != Line(D, G)
By not_in_line_equivalent_to_not_collinear_v0_r on A, F, B we get A not in Line(B, F)
By not_in_line_equivalent_to_not_collinear_v0_r on E, H, J we get E not in Line(H, J)
By not_in_line_equivalent_to_not_collinear_v0_r on F, H, E we get F not in Line(E, H)
By not_in_line_equivalent_to_not_collinear_v0_r on F, I, J we get F not in Line(I, J)
By line_inequality on Line(D, E), g, D we get g != Line(D, E)
By line_circle_intersection_has_at_most_two_points_0 on G, B, A, d we get A not in d
By not_in_line_equivalent_to_not_collinear_v0_r on D, I, G we get D not in Line(G, I)
By line_inequality on Line(D, G), g, D we get g != Line(D, G)
By line_inequality on Line(B, F), h, B we get h != Line(B, F)
By line_inequality on Line(D, F), f, D we get f != Line(D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on J, G, E we get J not in Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on G, I, F we get G not in Line(F, I)
By line_inequality on Line(B, F), i, F we get i != Line(B, F)
By line_inequality on Line(E, G), f, E we get f != Line(E, G)
By line_inequality on Line(F, G), h, G we get h != Line(F, G)
By not_in_line_equivalent_to_not_collinear_v0_r on J, G, D we get J not in Line(D, G)
By line_inequality on internal_angle_bisector(A, C, B), g, D we get g != internal_angle_bisector(A, C, B)
By not_in_line_equivalent_to_not_collinear_v0_r on B, D, F we get B not in Line(D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on B, E, G we get B not in Line(E, G)
By line_inequality on Line(G, I), f, I we get f != Line(G, I)
By not_in_line_equivalent_to_not_collinear_v0_r on I, H, E we get I not in Line(E, H)
By line_inequality on Line(F, G), f, F we get f != Line(F, G)
By line_inequality on Line(D, F), k, D we get k != Line(D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on G, H, F we get G not in Line(F, H)
By line_inequality on Line(D, E), h, D we get h != Line(D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on B, G, D we get B not in Line(D, G)
By not_in_line_equivalent_to_not_collinear_v0_r on A, F, H we get A not in Line(F, H)
By not_in_line_equivalent_to_not_collinear_v0_r on F, G, H we get F not in Line(G, H)
By not_in_line_equivalent_to_not_collinear_v0_r on C, D, E we get C not in Line(D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on B, H, E we get B not in Line(E, H)
By not_in_line_equivalent_to_not_collinear_v0_r on E, H, G we get E not in Line(G, H)
By line_inequality on Line(F, H), g, F we get g != Line(F, H)
By not_in_line_equivalent_to_not_collinear_v0_r on E, D, G we get E not in Line(D, G)
By line_inequality on Line(E, F), i, F we get i != Line(E, F)
By line_inequality on Line(D, E), k, D we get k != Line(D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on B, E, F we get B not in Line(E, F)
By not_in_line_equivalent_to_not_collinear_v0_r on G, D, E we get G not in Line(D, E)
By line_inequality on Line(G, I), k, I we get k != Line(G, I)
By not_in_line_equivalent_to_not_collinear_v0_r on I, D, G we get I not in Line(D, G)
By not_in_line_equivalent_to_not_collinear_v0_r on G, H, E we get G not in Line(E, H)
By not_in_line_equivalent_to_not_collinear_v0_r on E, I, F we get E not in Line(F, I)
By line_inequality on Line(D, F), i, F we get i != Line(D, F)
By line_inequality on Line(G, I), j, G we get j != Line(G, I)
By line_inequality on Line(D, G), j, G we get j != Line(D, G)
By line_inequality on Line(G, I), i, I we get i != Line(G, I)
By not_in_line_equivalent_to_not_collinear_v0_r on A, G, D we get A not in Line(D, G)
By line_inequality on Line(F, H), f, H we get f != Line(F, H)
By not_in_line_equivalent_to_not_collinear_v0_r on C, H, J we get C not in Line(H, J)
By not_in_line_equivalent_to_not_collinear_v0_r on D, E, G we get D not in Line(E, G)
By line_inequality on Line(B, F), f, F we get f != Line(B, F)
By line_inequality on Line(F, I), h, I we get h != Line(F, I)
By line_inequality on Line(D, G), f, D we get f != Line(D, G)
By not_in_line_equivalent_to_not_collinear_v0_r on B, F, I we get B not in Line(F, I)
By not_in_line_equivalent_to_not_collinear_v0_r on I, H, F we get I not in Line(F, H)
By line_inequality on Line(D, F), h, D we get h != Line(D, F)
By line_inequality on Line(F, G), j, G we get j != Line(F, G)
By not_in_line_equivalent_to_not_collinear_v0_r on C, F, I we get C not in Line(F, I)
By line_inequality on Line(F, H), i, F we get i != Line(F, H)
By line_inequality on Line(E, F), h, E we get h != Line(E, F)
By not_in_line_equivalent_to_not_collinear_v0_r on A, H, E we get A not in Line(E, H)
By line_inequality on Line(F, I), k, I we get k != Line(F, I)
By perpendicular_direction_conditions_v0_r on D, G, B, A we get 180 == 2 * direction(D, G) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on C, F, D, F we get 180 == 2 * direction(C, F) - 2 * direction(D, F) mod 360
By same_angle_v2 on G, B, A, D we get angle(B, G, D) == angle(A, G, D) + 180 mod 360
By same_angle_v0 on B, C, E, I we get angle(C, B, I) == angle(E, B, I) mod 360
By same_angle_v2 on E, C, B, F we get angle(C, E, F) == angle(B, E, F) + 180 mod 360
By same_angle_v2 on G, B, A, J we get angle(B, G, J) == angle(A, G, J) + 180 mod 360
By same_angle_v3 on F, A, C, I we get angle(A, F, I) == angle(C, F, I) + 180 mod 360
By same_angle_v3 on F, A, C, E we get angle(A, F, E) == angle(C, F, E) + 180 mod 360
By perpendicular_direction_conditions_v0_r on F, D, A, C we get 180 == 2 * direction(F, D) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on A, G, G, D we get 180 == 2 * direction(A, G) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on D, F, C, A we get 180 == 2 * direction(D, F) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on F, D, F, C we get 180 == 2 * direction(F, D) - 2 * direction(F, C) mod 360
By same_angle_v1 on B, A, G, C we get angle(A, B, C) == angle(G, B, C) mod 360
By perpendicular_direction_conditions_v0_r on D, E, B, C we get 180 == 2 * direction(D, E) - 2 * direction(B, C) mod 360
By same_angle_v3 on F, A, C, B we get angle(A, F, B) == angle(C, F, B) + 180 mod 360
By same_angle_v0 on B, C, E, G we get angle(C, B, G) == angle(E, B, G) mod 360
By same_angle_v2 on E, C, B, G we get angle(C, E, G) == angle(B, E, G) + 180 mod 360
By perpendicular_direction_conditions_v0_r on E, D, C, E we get 180 == 2 * direction(E, D) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on F, D, C, F we get 180 == 2 * direction(F, D) - 2 * direction(C, F) mod 360
By same_angle_v3 on F, A, C, H we get angle(A, F, H) == angle(C, F, H) + 180 mod 360
By same_angle_v1 on B, A, G, D we get angle(A, B, D) == angle(G, B, D) mod 360
By same_angle_v0 on B, C, E, F we get angle(C, B, F) == angle(E, B, F) mod 360
By same_angle_v3 on F, A, C, G we get angle(A, F, G) == angle(C, F, G) + 180 mod 360
By same_angle_v1 on B, A, G, J we get angle(A, B, J) == angle(G, B, J) mod 360
By same_angle_v1 on B, A, G, E we get angle(A, B, E) == angle(G, B, E) mod 360
By perpendicular_direction_conditions_v0_r on D, E, E, C we get 180 == 2 * direction(D, E) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on F, D, C, A we get 180 == 2 * direction(F, D) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on D, E, C, E we get 180 == 2 * direction(D, E) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on B, C, D, E we get 180 == 2 * direction(B, C) - 2 * direction(D, E) mod 360
By same_angle_v2 on E, C, B, H we get angle(C, E, H) == angle(B, E, H) + 180 mod 360
By perpendicular_direction_conditions_v0_r on C, E, E, D we get 180 == 2 * direction(C, E) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on E, D, B, E we get 180 == 2 * direction(E, D) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on B, C, E, D we get 180 == 2 * direction(B, C) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on E, D, B, C we get 180 == 2 * direction(E, D) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on B, A, D, G we get 180 == 2 * direction(B, A) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on E, C, D, E we get 180 == 2 * direction(E, C) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on A, C, F, D we get 180 == 2 * direction(A, C) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on F, D, A, F we get 180 == 2 * direction(F, D) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on E, C, E, D we get 180 == 2 * direction(E, C) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on G, A, G, D we get 180 == 2 * direction(G, A) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on E, B, D, E we get 180 == 2 * direction(E, B) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on D, E, E, B we get 180 == 2 * direction(D, E) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on C, A, F, D we get 180 == 2 * direction(C, A) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on F, A, F, D we get 180 == 2 * direction(F, A) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on E, D, C, B we get 180 == 2 * direction(E, D) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on F, D, F, A we get 180 == 2 * direction(F, D) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on D, E, C, B we get 180 == 2 * direction(D, E) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on A, F, F, D we get 180 == 2 * direction(A, F) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on D, G, A, B we get 180 == 2 * direction(D, G) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on D, G, A, G we get 180 == 2 * direction(D, G) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on B, E, D, E we get 180 == 2 * direction(B, E) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on D, E, B, E we get 180 == 2 * direction(D, E) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on A, B, D, G we get 180 == 2 * direction(A, B) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on B, A, G, D we get 180 == 2 * direction(B, A) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on D, F, A, F we get 180 == 2 * direction(D, F) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on C, B, D, E we get 180 == 2 * direction(C, B) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on C, F, F, D we get 180 == 2 * direction(C, F) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on D, F, F, A we get 180 == 2 * direction(D, F) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on F, C, D, F we get 180 == 2 * direction(F, C) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on F, A, D, F we get 180 == 2 * direction(F, A) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on G, D, B, A we get 180 == 2 * direction(G, D) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on A, G, D, G we get 180 == 2 * direction(A, G) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on F, C, F, D we get 180 == 2 * direction(F, C) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on D, F, C, F we get 180 == 2 * direction(D, F) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on C, E, D, E we get 180 == 2 * direction(C, E) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on G, D, A, B we get 180 == 2 * direction(G, D) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on G, D, A, G we get 180 == 2 * direction(G, D) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on D, G, G, A we get 180 == 2 * direction(D, G) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on G, A, D, G we get 180 == 2 * direction(G, A) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on E, B, E, D we get 180 == 2 * direction(E, B) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on D, F, F, C we get 180 == 2 * direction(D, F) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on G, D, G, A we get 180 == 2 * direction(G, D) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on A, B, G, D we get 180 == 2 * direction(A, B) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on D, F, A, C we get 180 == 2 * direction(D, F) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on C, B, E, D we get 180 == 2 * direction(C, B) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on A, C, D, F we get 180 == 2 * direction(A, C) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on E, D, E, C we get 180 == 2 * direction(E, D) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on C, A, D, F we get 180 == 2 * direction(C, A) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on E, D, E, B we get 180 == 2 * direction(E, D) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on A, F, D, F we get 180 == 2 * direction(A, F) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on B, E, E, D we get 180 == 2 * direction(B, E) - 2 * direction(E, D) mod 360
By collinear_definition on G, A, B we get A in Line(B, G), B in Line(A, G), Line(A, G) == Line(B, G), 0 == 2 * angle(A, G, B) mod 360
By altitude_definition on C, D, E, g we get g == altitude(C, D, E)
By altitude_definition on B, G, D, f we get f == altitude(B, D, G)
By altitude_definition on A, D, F, h we get h == altitude(A, D, F)
By radical_axis_definition_v0_r on F, c, d we get F in radical_axis(c, d)
By altitude_definition on C, D, F, h we get h == altitude(C, D, F)
By incenter_isogonal_conjugate on C, A, B we get incenter(A, B, C) == isogonal_conjugate(incenter(A, B, C), A, B, C)
By altitude_definition on A, D, G, f we get f == altitude(A, D, G)
By perpendicular_angle_conditions_v0 on B, G, D we get angle(B, G, D) == orientation(B, G, D) mod 360
By radical_axis_definition_v0_r on G, d, c we get G in radical_axis(c, d)
By altitude_definition on B, D, E, g we get g == altitude(B, D, E)
By collinear_definition on G, B, A we get B in Line(A, G), A in Line(B, G), Line(A, G) == Line(B, G), 0 == 2 * angle(B, G, A) mod 360
By collinear_definition on B, A, G we get A in Line(B, G), G in Line(A, B), Line(A, B) == Line(B, G), 0 == 2 * angle(A, B, G) mod 360
By perpendicular_angle_conditions_v0 on D, G, B we get angle(D, G, B) == orientation(B, D, G) mod 360
By collinear_definition on B, G, A we get G in Line(A, B), A in Line(B, G), Line(A, B) == Line(B, G), 0 == 2 * angle(G, B, A) mod 360
By same_angle_v0 on A, G, B, F we get angle(B, A, F) == angle(G, A, F) mod 360
By same_angle_v0 on B, E, C, D we get angle(C, B, D) == angle(E, B, D) mod 360
By same_angle_v1 on A, F, C, G we get angle(C, A, G) == angle(F, A, G) mod 360
By same_angle_v0 on C, F, A, B we get angle(A, C, B) == angle(F, C, B) mod 360
By same_angle_v1 on A, F, C, D we get angle(C, A, D) == angle(F, A, D) mod 360
By same_angle_v0 on C, A, F, E we get angle(A, C, E) == angle(F, C, E) mod 360
By same_angle_v0 on A, B, G, D we get angle(B, A, D) == angle(G, A, D) mod 360
By same_angle_v0 on B, E, C, J we get angle(C, B, J) == angle(E, B, J) mod 360
By same_angle_v1 on C, B, E, F we get angle(B, C, F) == angle(E, C, F) mod 360
By same_angle_v0 on B, E, C, A we get angle(C, B, A) == angle(E, B, A) mod 360
By same_angle_v1 on C, E, B, A we get angle(B, C, A) == angle(E, C, A) mod 360
By same_angle_v0 on A, B, G, C we get angle(B, A, C) == angle(G, A, C) mod 360
By same_angle_v1 on A, F, C, B we get angle(C, A, B) == angle(F, A, B) mod 360
By same_angle_v2 on F, A, C, D we get angle(A, F, D) == angle(C, F, D) + 180 mod 360
By same_angle_v3 on E, C, B, D we get angle(C, E, D) == angle(B, E, D) + 180 mod 360
By collinear_definition on A, F, C we get F in Line(A, C), C in Line(A, F), Line(A, C) == Line(A, F), 0 == 2 * angle(F, A, C) mod 360
By collinear_definition on C, E, B we get E in Line(B, C), B in Line(C, E), Line(B, C) == Line(C, E), 0 == 2 * angle(E, C, B) mod 360
By collinear_definition on E, B, C we get B in Line(C, E), C in Line(B, E), Line(B, E) == Line(C, E), 0 == 2 * angle(B, E, C) mod 360
By perpendicular_angle_conditions_v0 on D, F, C we get angle(D, F, C) == orientation(C, D, F) mod 360
By collinear_definition on F, C, A we get C in Line(A, F), A in Line(C, F), Line(A, F) == Line(C, F), 0 == 2 * angle(C, F, A) mod 360
By collinear_definition on A, G, B we get G in Line(A, B), B in Line(A, G), Line(A, B) == Line(A, G), 0 == 2 * angle(G, A, B) mod 360
By perpendicular_angle_conditions_v0 on D, F, A we get angle(D, F, A) == orientation(A, D, F) mod 360
By perpendicular_angle_conditions_v0 on A, G, D we get angle(A, G, D) == orientation(A, G, D) mod 360
By altitude_definition on D, G, A, Line(D, G) we get Line(D, G) == altitude(D, A, G)
By collinear_definition on C, B, E we get B in Line(C, E), E in Line(B, C), Line(B, C) == Line(C, E), 0 == 2 * angle(B, C, E) mod 360
By internal_angle_bisector_definition_v0 on C, I, A, B we get angle(C, B, I) == angle(I, B, A) mod 360
By collinear_definition on C, F, A we get F in Line(A, C), A in Line(C, F), Line(A, C) == Line(C, F), 0 == 2 * angle(F, C, A) mod 360
By altitude_definition on D, E, B, Line(D, E) we get Line(D, E) == altitude(D, B, E)
By perpendicular_angle_conditions_v0 on C, E, D we get angle(C, E, D) == orientation(C, E, D) mod 360
By altitude_definition on D, E, C, Line(D, E) we get Line(D, E) == altitude(D, C, E)
By perpendicular_angle_conditions_v0 on D, G, A we get angle(D, G, A) == orientation(A, D, G) mod 360
By collinear_definition on A, C, F we get C in Line(A, F), F in Line(A, C), Line(A, C) == Line(A, F), 0 == 2 * angle(C, A, F) mod 360
By collinear_definition on F, A, C we get A in Line(C, F), C in Line(A, F), Line(A, F) == Line(C, F), 0 == 2 * angle(A, F, C) mod 360
By collinear_definition on A, B, G we get B in Line(A, G), G in Line(A, B), Line(A, B) == Line(A, G), 0 == 2 * angle(B, A, G) mod 360
By altitude_definition on D, G, B, Line(D, G) we get Line(D, G) == altitude(D, B, G)
By collinear_definition on B, C, E we get C in Line(B, E), E in Line(B, C), Line(B, C) == Line(B, E), 0 == 2 * angle(C, B, E) mod 360
By collinear_definition on B, E, C we get E in Line(B, C), C in Line(B, E), Line(B, C) == Line(B, E), 0 == 2 * angle(E, B, C) mod 360
By perpendicular_angle_conditions_v0 on C, F, D we get angle(C, F, D) == orientation(C, F, D) mod 360
By perpendicular_angle_conditions_v0 on B, E, D we get angle(B, E, D) == orientation(B, E, D) mod 360
By collinear_definition on C, A, F we get A in Line(C, F), F in Line(A, C), Line(A, C) == Line(C, F), 0 == 2 * angle(A, C, F) mod 360
By perpendicular_angle_conditions_v0 on D, E, C we get angle(D, E, C) == orientation(C, D, E) mod 360
By altitude_definition on D, C, F, Line(D, F) we get Line(D, F) == altitude(D, C, F)
By collinear_definition on E, C, B we get C in Line(B, E), B in Line(C, E), Line(B, E) == Line(C, E), 0 == 2 * angle(C, E, B) mod 360
By altitude_definition on D, A, F, Line(D, F) we get Line(D, F) == altitude(D, A, F)
By perpendicular_angle_conditions_v0 on D, E, B we get angle(D, E, B) == orientation(B, D, E) mod 360
By internal_angle_bisector_definition_v0 on A, I, C, B we get angle(A, B, I) == angle(I, B, C) mod 360
By perpendicular_angle_conditions_v0 on A, F, D we get angle(A, F, D) == orientation(A, F, D) mod 360
By internal_angle_bisector_definition_v0 on B, D, C, A we get angle(B, A, D) == angle(D, A, C) mod 360
By internal_angle_bisector_definition_v0 on A, J, C, B we get angle(A, B, J) == angle(J, B, C) mod 360
By internal_angle_bisector_definition_v0 on C, D, B, A we get angle(C, A, D) == angle(D, A, B) mod 360
By internal_angle_bisector_definition_v0 on C, J, A, B we get angle(C, B, J) == angle(J, B, A) mod 360
By internal_angle_bisector_definition_v0 on A, D, C, B we get angle(A, B, D) == angle(D, B, C) mod 360
By internal_angle_bisector_definition_v0 on C, D, A, B we get angle(C, B, D) == angle(D, B, A) mod 360
By concyclic_sufficient_conditions_v1 on C, E, D, F we get concyclic(C, D, E, F)
By concyclic_sufficient_conditions_v1 on A, F, D, G we get concyclic(A, D, F, G)
By concyclic_sufficient_conditions_v1 on D, E, B, G we get concyclic(B, D, E, G)
By line_intersection_definition on D, Line(D, E), j we get D == line_intersection(j, Line(D, E))
By line_intersection_definition on G, f, Line(G, I) we get G == line_intersection(f, Line(G, I))
By line_intersection_definition on G, f, Line(E, G) we get G == line_intersection(f, Line(E, G))
By line_intersection_definition on F, h, Line(B, F) we get F == line_intersection(h, Line(B, F))
By line_intersection_definition on E, Line(E, F), g we get E == line_intersection(g, Line(E, F))
By line_intersection_definition on D, i, Line(D, G) we get D == line_intersection(i, Line(D, G))
By line_intersection_definition on E, Line(E, G), g we get E == line_intersection(g, Line(E, G))
By line_intersection_definition on E, Line(E, H), g we get E == line_intersection(g, Line(E, H))
By line_intersection_definition on I, Line(G, I), j we get I == line_intersection(j, Line(G, I))
By line_intersection_definition on D, i, Line(D, F) we get D == line_intersection(i, Line(D, F))
By line_intersection_definition on F, h, Line(F, H) we get F == line_intersection(h, Line(F, H))
By line_intersection_definition on G, Line(F, G), f we get G == line_intersection(f, Line(F, G))
By line_intersection_definition on G, Line(G, I), k we get G == line_intersection(k, Line(G, I))
By line_intersection_definition on C, Line(C, D), g we get C == line_intersection(g, Line(C, D))
By line_intersection_definition on F, Line(F, I), h we get F == line_intersection(h, Line(F, I))
By line_intersection_definition on F, h, Line(E, F) we get F == line_intersection(h, Line(E, F))
By line_intersection_definition on D, Line(D, G), j we get D == line_intersection(j, Line(D, G))
By line_intersection_definition on B, f, Line(B, F) we get B == line_intersection(f, Line(B, F))
By line_intersection_definition on F, Line(F, G), h we get F == line_intersection(h, Line(F, G))
By line_intersection_definition on C, Line(C, D), h we get C == line_intersection(h, Line(C, D))
By line_intersection_definition on B, Line(B, F), g we get B == line_intersection(g, Line(B, F))
By concurrent_sufficient_conditions on k, Line(D, G), f we get concurrent(f, k, Line(D, G))
By concurrent_sufficient_conditions on Line(D, G), k, f we get concurrent(f, k, Line(D, G))
By line_intersection_definition on G, k, Line(D, G) we get G == line_intersection(k, Line(D, G))
By line_unique_intersection_v1 on Line(C, D), h, C, F we get F not in Line(C, D)
By line_unique_intersection_v1 on Line(C, D), g, C, E we get E not in Line(C, D)
By same_angle_v1 on B, D, J, E we get angle(D, B, E) == angle(J, B, E) mod 360
By same_angle_v0 on G, H, J, A we get angle(H, G, A) == angle(J, G, A) mod 360
By same_angle_v1 on B, I, D, F we get angle(D, B, F) == angle(I, B, F) mod 360
By same_angle_v0 on B, I, D, A we get angle(D, B, A) == angle(I, B, A) mod 360
By same_angle_v0 on B, D, J, G we get angle(D, B, G) == angle(J, B, G) mod 360
By same_angle_v1 on G, J, H, E we get angle(H, G, E) == angle(J, G, E) mod 360
By same_angle_v0 on G, H, J, I we get angle(H, G, I) == angle(J, G, I) mod 360
By same_angle_v1 on B, J, I, E we get angle(I, B, E) == angle(J, B, E) mod 360
By same_angle_v0 on G, J, H, D we get angle(H, G, D) == angle(J, G, D) mod 360
By same_angle_v0 on B, D, J, A we get angle(D, B, A) == angle(J, B, A) mod 360
By same_angle_v1 on B, D, J, C we get angle(D, B, C) == angle(J, B, C) mod 360
By same_angle_v1 on B, D, I, C we get angle(D, B, C) == angle(I, B, C) mod 360
By between_imply_not_between on C, E, B we get collinear_and_not_between(B, C, E)
By same_angle_v1 on B, J, I, F we get angle(I, B, F) == angle(J, B, F) mod 360
By same_angle_v0 on B, I, J, A we get angle(I, B, A) == angle(J, B, A) mod 360
By same_angle_v0 on B, J, I, G we get angle(I, B, G) == angle(J, B, G) mod 360
By same_angle_v1 on G, H, J, B we get angle(H, G, B) == angle(J, G, B) mod 360
By same_angle_v1 on B, I, D, E we get angle(D, B, E) == angle(I, B, E) mod 360
By same_angle_v0 on B, D, I, G we get angle(D, B, G) == angle(I, B, G) mod 360
By same_angle_v1 on B, I, J, C we get angle(I, B, C) == angle(J, B, C) mod 360
By same_angle_v1 on B, D, J, F we get angle(D, B, F) == angle(J, B, F) mod 360
By same_angle_v0 on G, J, H, F we get angle(H, G, F) == angle(J, G, F) mod 360
By between_imply_not_between on A, F, C we get collinear_and_not_between(C, A, F)
By between_imply_not_between on B, E, C we get collinear_and_not_between(C, B, E)
By between_imply_not_between on A, G, B we get collinear_and_not_between(B, A, G)
By between_imply_not_between on B, G, A we get collinear_and_not_between(A, B, G)
By between_imply_not_between on C, F, A we get collinear_and_not_between(A, C, F)
By circle_radius_v0_r on G, d we get radius(d) == distance(G, center(d))
By circle_radius_v0_r on G, c we get radius(c) == distance(G, center(c))
By circle_radius_v0_r on F, d we get radius(d) == distance(F, center(d))
By circle_radius_v0_r on I, d we get radius(d) == distance(I, center(d))
By circle_radius_v0_r on F, c we get radius(c) == distance(F, center(c))
By circle_radius_v0_r on H, c we get radius(c) == distance(H, center(c))
By circle_radius_v0_r on E, c we get radius(c) == distance(E, center(c))
By circle_radius_v0_r on B, d we get radius(d) == distance(B, center(d))
By angle_to_center on I, G, B, d we get 2 * angle(I, G, B) == angle(I, center(d), B) mod 360
By angle_to_center on E, G, H, c we get 2 * angle(E, G, H) == angle(E, center(c), H) mod 360
By angle_to_center on G, H, E, c we get 2 * angle(G, H, E) == angle(G, center(c), E) mod 360
By angle_to_center on H, G, E, c we get 2 * angle(H, G, E) == angle(H, center(c), E) mod 360
By angle_to_center on F, G, H, c we get 2 * angle(F, G, H) == angle(F, center(c), H) mod 360
By angle_to_center on B, I, F, d we get 2 * angle(B, I, F) == angle(B, center(d), F) mod 360
By angle_to_center on F, I, G, d we get 2 * angle(F, I, G) == angle(F, center(d), G) mod 360
By angle_to_center on I, F, G, d we get 2 * angle(I, F, G) == angle(I, center(d), G) mod 360
By angle_to_center on G, B, I, d we get 2 * angle(G, B, I) == angle(G, center(d), I) mod 360
By angle_to_center on H, G, F, c we get 2 * angle(H, G, F) == angle(H, center(c), F) mod 360
By angle_to_center on F, H, E, c we get 2 * angle(F, H, E) == angle(F, center(c), E) mod 360
By angle_to_center on H, E, F, c we get 2 * angle(H, E, F) == angle(H, center(c), F) mod 360
By angle_to_center on H, F, G, c we get 2 * angle(H, F, G) == angle(H, center(c), G) mod 360
By angle_to_center on I, B, F, d we get 2 * angle(I, B, F) == angle(I, center(d), F) mod 360
By angle_to_center on G, F, H, c we get 2 * angle(G, F, H) == angle(G, center(c), H) mod 360
By same_angle_v0 on H, G, J, E we get angle(G, H, E) == angle(J, H, E) mod 360
By angle_to_center on F, I, B, d we get 2 * angle(F, I, B) == angle(F, center(d), B) mod 360
By angle_to_center on H, F, E, c we get 2 * angle(H, F, E) == angle(H, center(c), E) mod 360
By angle_to_center on F, E, G, c we get 2 * angle(F, E, G) == angle(F, center(c), G) mod 360
By angle_to_center on G, E, F, c we get 2 * angle(G, E, F) == angle(G, center(c), F) mod 360
By angle_to_center on E, G, F, c we get 2 * angle(E, G, F) == angle(E, center(c), F) mod 360
By angle_to_center on F, E, H, c we get 2 * angle(F, E, H) == angle(F, center(c), H) mod 360
By angle_to_center on B, I, G, d we get 2 * angle(B, I, G) == angle(B, center(d), G) mod 360
By angle_to_center on F, H, G, c we get 2 * angle(F, H, G) == angle(F, center(c), G) mod 360
By angle_to_center on G, E, H, c we get 2 * angle(G, E, H) == angle(G, center(c), H) mod 360
By angle_to_center on E, F, G, c we get 2 * angle(E, F, G) == angle(E, center(c), G) mod 360
By angle_to_center on I, B, G, d we get 2 * angle(I, B, G) == angle(I, center(d), G) mod 360
By angle_to_center on G, F, B, d we get 2 * angle(G, F, B) == angle(G, center(d), B) mod 360
By angle_to_center on H, E, G, c we get 2 * angle(H, E, G) == angle(H, center(c), G) mod 360
By angle_to_center on G, B, F, d we get 2 * angle(G, B, F) == angle(G, center(d), F) mod 360
By angle_to_center on E, H, G, c we get 2 * angle(E, H, G) == angle(E, center(c), G) mod 360
By angle_to_center on G, I, F, d we get 2 * angle(G, I, F) == angle(G, center(d), F) mod 360
By angle_to_center on G, H, F, c we get 2 * angle(G, H, F) == angle(G, center(c), F) mod 360
By angle_to_center on B, F, G, d we get 2 * angle(B, F, G) == angle(B, center(d), G) mod 360
By angle_to_center on B, G, I, d we get 2 * angle(B, G, I) == angle(B, center(d), I) mod 360
By angle_to_center on E, H, F, c we get 2 * angle(E, H, F) == angle(E, center(c), F) mod 360
By angle_to_center on F, B, G, d we get 2 * angle(F, B, G) == angle(F, center(d), G) mod 360
By angle_to_center on F, B, I, d we get 2 * angle(F, B, I) == angle(F, center(d), I) mod 360
By center_not_on_circle on c we get center(c) not in c
By angle_to_center on F, G, E, c we get 2 * angle(F, G, E) == angle(F, center(c), E) mod 360
By angle_to_center on B, F, I, d we get 2 * angle(B, F, I) == angle(B, center(d), I) mod 360
By angle_to_center on B, G, F, d we get 2 * angle(B, G, F) == angle(B, center(d), F) mod 360
By angle_to_center on I, F, B, d we get 2 * angle(I, F, B) == angle(I, center(d), B) mod 360
By angle_to_center on E, F, H, c we get 2 * angle(E, F, H) == angle(E, center(c), H) mod 360
By angle_to_center on I, G, F, d we get 2 * angle(I, G, F) == angle(I, center(d), F) mod 360
By angle_to_center on F, G, I, d we get 2 * angle(F, G, I) == angle(F, center(d), I) mod 360
By angle_to_center on F, G, B, d we get 2 * angle(F, G, B) == angle(F, center(d), B) mod 360
By angle_to_center on G, F, I, d we get 2 * angle(G, F, I) == angle(G, center(d), I) mod 360
By angle_to_center on G, F, E, c we get 2 * angle(G, F, E) == angle(G, center(c), E) mod 360
By angle_to_center on G, I, B, d we get 2 * angle(G, I, B) == angle(G, center(d), B) mod 360
By center_not_on_circle on d we get center(d) not in d
By different_points_v1 on C, D we get 0 != distance(C, D)
By same_angle_v0 on I, B, J, F we get angle(B, I, F) == angle(J, I, F) mod 360
By same_angle_v1 on C, E, B, D we get angle(B, C, D) == angle(E, C, D) mod 360
By divide_by_2_mod_180_v0 on I, F, G, C, B, D we get angle(C, B, D) == angle(I, F, G) mod 360
By same_angle_v0 on I, B, D, F we get angle(B, I, F) == angle(D, I, F) mod 360
By same_angle_v1 on I, B, D, G we get angle(B, I, G) == angle(D, I, G) mod 360
By same_angle_v1 on H, G, J, F we get angle(G, H, F) == angle(J, H, F) mod 360
By same_angle_v0 on C, F, A, D we get angle(A, C, D) == angle(F, C, D) mod 360
By divide_by_2_mod_180_v0 on D, B, A, I, B, G we get angle(D, B, A) == angle(I, B, G) mod 360
By same_angle_v1 on I, B, J, G we get angle(B, I, G) == angle(J, I, G) mod 360
By probably_between_and_collinear_implies_between on J, D, I we get between(I, D, J)
By divide_by_2_mod_180_v1 on I, B, E, G, B, D we get angle(G, B, D) == angle(I, B, E) mod 360
By divide_by_2_mod_180_v1 on A, B, D, G, B, J we get angle(A, B, D) == angle(G, B, J) mod 360
By orthocenter_concurrency on A, D, F we get orthocenter(A, D, F) in altitude(A, D, F), orthocenter(A, D, F) in altitude(D, A, F), orthocenter(A, D, F) in altitude(F, A, D)
By orthocenter_concurrency on C, D, E we get orthocenter(C, D, E) in altitude(C, D, E), orthocenter(C, D, E) in altitude(D, C, E), orthocenter(C, D, E) in altitude(E, C, D)
By divide_by_2_mod_180_v1 on D, B, E, G, F, I we get angle(D, B, E) == angle(G, F, I) mod 360
By orthocenter_concurrency on B, D, G we get orthocenter(B, D, G) in altitude(B, D, G), orthocenter(B, D, G) in altitude(D, B, G), orthocenter(B, D, G) in altitude(G, B, D)
By orthocenter_concurrency on D, A, G we get orthocenter(A, D, G) in altitude(D, A, G), orthocenter(A, D, G) in altitude(A, D, G), orthocenter(A, D, G) in altitude(G, A, D)
By orthocenter_concurrency on D, B, E we get orthocenter(B, D, E) in altitude(D, B, E), orthocenter(B, D, E) in altitude(B, D, E), orthocenter(B, D, E) in altitude(E, B, D)
By divide_by_2_mod_180_v1 on A, B, I, G, B, J we get angle(A, B, I) == angle(G, B, J) mod 360
By orthocenter_concurrency on C, D, F we get orthocenter(C, D, F) in altitude(C, D, F), orthocenter(C, D, F) in altitude(D, C, F), orthocenter(C, D, F) in altitude(F, C, D)
By divide_by_2_mod_180_v0 on C, B, J, C, B, D we get angle(C, B, D) == angle(C, B, J) mod 360
By divide_by_2_mod_180_v1 on J, B, E, G, B, D we get angle(G, B, D) == angle(J, B, E) mod 360
By probably_between_and_collinear_implies_between on B, J, D we get between(B, J, D)
By probably_between_and_collinear_implies_between on H, J, G we get between(G, J, H)
By divide_by_2_mod_180_v0 on I, F, G, D, B, A we get angle(D, B, A) == angle(I, F, G) mod 360
By divide_by_2_mod_180_v0 on D, B, G, I, B, A we get angle(D, B, G) == angle(I, B, A) mod 360
By divide_by_2_mod_180_v1 on A, B, I, D, B, E we get angle(A, B, I) == angle(D, B, E) mod 360
By divide_by_2_mod_180_v0 on J, B, G, I, F, G we get angle(I, F, G) == angle(J, B, G) mod 360
By divide_by_2_mod_180_v0 on E, B, D, E, B, I we get angle(E, B, D) == angle(E, B, I) mod 360
By divide_by_2_mod_180_v1 on G, B, I, D, B, E we get angle(D, B, E) == angle(G, B, I) mod 360
By divide_by_2_mod_180_v0 on C, B, D, J, B, G we get angle(C, B, D) == angle(J, B, G) mod 360
By divide_by_2_mod_180_v1 on G, B, J, G, B, I we get angle(G, B, I) == angle(G, B, J) mod 360
By divide_by_2_mod_180_v1 on J, B, E, G, B, I we get angle(G, B, I) == angle(J, B, E) mod 360
By divide_by_2_mod_180_v1 on A, B, J, G, F, I we get angle(A, B, J) == angle(G, F, I) mod 360
By divide_by_2_mod_180_v0 on E, B, J, D, B, G we get angle(D, B, G) == angle(E, B, J) mod 360
By divide_by_2_mod_180_v1 on D, B, C, I, B, E we get angle(D, B, C) == angle(I, B, E) mod 360
By probably_between_and_collinear_implies_between on B, D, I we get between(B, D, I)
By divide_by_2_mod_180_v1 on G, B, D, G, F, I we get angle(G, B, D) == angle(G, F, I) mod 360
By divide_by_2_mod_180_v0 on I, B, G, C, B, J we get angle(C, B, J) == angle(I, B, G) mod 360
By divide_by_2_mod_180_v1 on J, B, C, G, B, D we get angle(G, B, D) == angle(J, B, C) mod 360
By probably_between_and_collinear_implies_between on B, J, I we get between(B, J, I)
By divide_by_2_mod_180_v1 on A, B, I, A, B, J we get angle(A, B, I) == angle(A, B, J) mod 360
By divide_by_2_mod_180_v1 on G, B, D, A, B, I we get angle(A, B, I) == angle(G, B, D) mod 360
By divide_by_2_mod_180_v1 on G, B, D, A, B, J we get angle(A, B, J) == angle(G, B, D) mod 360
By divide_by_2_mod_180_v0 on C, B, I, D, B, G we get angle(C, B, I) == angle(D, B, G) mod 360
By divide_by_2_mod_180_v1 on A, B, J, D, B, E we get angle(A, B, J) == angle(D, B, E) mod 360
By divide_by_2_mod_180_v0 on I, F, G, E, B, D we get angle(E, B, D) == angle(I, F, G) mod 360
By divide_by_2_mod_180_v0 on C, B, J, D, B, G we get angle(C, B, J) == angle(D, B, G) mod 360
By divide_by_2_mod_180_v0 on C, B, D, I, B, A we get angle(C, B, D) == angle(I, B, A) mod 360
By collinear_definition on B, I, D we get I in Line(B, D), D in Line(B, I), Line(B, D) == Line(B, I), 0 == 2 * angle(I, B, D) mod 360
By divide_by_2_mod_180_v1 on J, B, C, G, F, I we get angle(G, F, I) == angle(J, B, C) mod 360
By divide_by_2_mod_180_v0 on C, B, I, C, B, D we get angle(C, B, D) == angle(C, B, I) mod 360
By divide_by_2_mod_180_v0 on E, B, I, C, B, J we get angle(C, B, J) == angle(E, B, I) mod 360
By divide_by_2_mod_180_v1 on A, B, J, A, B, D we get angle(A, B, D) == angle(A, B, J) mod 360
By divide_by_2_mod_180_v0 on C, B, I, E, B, J we get angle(C, B, I) == angle(E, B, J) mod 360
By divide_by_2_mod_180_v1 on G, B, D, I, B, C we get angle(G, B, D) == angle(I, B, C) mod 360
By divide_by_2_mod_180_v0 on C, B, D, E, B, I we get angle(C, B, D) == angle(E, B, I) mod 360
By divide_by_2_mod_180_v1 on A, B, D, G, B, I we get angle(A, B, D) == angle(G, B, I) mod 360
By divide_by_2_mod_180_v1 on D, B, C, G, B, J we get angle(D, B, C) == angle(G, B, J) mod 360
By collinear_definition on B, D, J we get D in Line(B, J), J in Line(B, D), Line(B, D) == Line(B, J), 0 == 2 * angle(D, B, J) mod 360
By divide_by_2_mod_180_v1 on J, B, C, A, B, D we get angle(A, B, D) == angle(J, B, C) mod 360
By divide_by_2_mod_180_v0 on C, B, J, E, B, D we get angle(C, B, J) == angle(E, B, D) mod 360
By divide_by_2_mod_180_v0 on J, B, A, C, B, D we get angle(C, B, D) == angle(J, B, A) mod 360
By divide_by_2_mod_180_v1 on J, B, E, A, B, I we get angle(A, B, I) == angle(J, B, E) mod 360
By divide_by_2_mod_180_v1 on J, B, E, D, B, C we get angle(D, B, C) == angle(J, B, E) mod 360
By reverse_direction on E, D we get 180 == direction(E, D) - direction(D, E) mod 360
By divide_by_2_mod_180_v0 on C, B, I, D, B, A we get angle(C, B, I) == angle(D, B, A) mod 360
By divide_by_2_mod_180_v0 on J, B, A, I, B, G we get angle(I, B, G) == angle(J, B, A) mod 360
By divide_by_2_mod_180_v0 on I, B, G, E, B, D we get angle(E, B, D) == angle(I, B, G) mod 360
By divide_by_2_mod_180_v0 on E, B, J, I, B, G we get angle(E, B, J) == angle(I, B, G) mod 360
By collinear_definition on B, J, I we get J in Line(B, I), I in Line(B, J), Line(B, I) == Line(B, J), 0 == 2 * angle(J, B, I) mod 360
By divide_by_2_mod_180_v0 on J, B, A, C, B, I we get angle(C, B, I) == angle(J, B, A) mod 360
By collinear_definition on B, I, J we get I in Line(B, J), J in Line(B, I), Line(B, I) == Line(B, J), 0 == 2 * angle(I, B, J) mod 360
By collinear_definition on B, J, D we get J in Line(B, D), D in Line(B, J), Line(B, D) == Line(B, J), 0 == 2 * angle(J, B, D) mod 360
By divide_by_2_mod_180_v0 on D, B, A, E, B, J we get angle(D, B, A) == angle(E, B, J) mod 360
By divide_by_2_mod_180_v0 on D, B, G, E, B, I we get angle(D, B, G) == angle(E, B, I) mod 360
By divide_by_2_mod_180_v0 on I, F, G, E, B, J we get angle(E, B, J) == angle(I, F, G) mod 360
By divide_by_2_mod_180_v1 on D, B, E, J, B, C we get angle(D, B, E) == angle(J, B, C) mod 360
By divide_by_2_mod_180_v1 on J, B, E, G, F, I we get angle(G, F, I) == angle(J, B, E) mod 360
By divide_by_2_mod_180_v0 on I, B, G, C, B, D we get angle(C, B, D) == angle(I, B, G) mod 360
By divide_by_2_mod_180_v0 on C, B, I, C, B, J we get angle(C, B, I) == angle(C, B, J) mod 360
By divide_by_2_mod_180_v0 on C, B, D, E, B, J we get angle(C, B, D) == angle(E, B, J) mod 360
By divide_by_2_mod_180_v0 on I, F, G, C, B, J we get angle(C, B, J) == angle(I, F, G) mod 360
By divide_by_2_mod_180_v0 on J, B, G, I, B, A we get angle(I, B, A) == angle(J, B, G) mod 360
By divide_by_2_mod_180_v0 on D, B, A, C, B, J we get angle(C, B, J) == angle(D, B, A) mod 360
By divide_by_2_mod_180_v1 on A, B, I, A, B, D we get angle(A, B, D) == angle(A, B, I) mod 360
By line_inequality on Line(E, H), Line(D, F), H we get Line(D, F) != Line(E, H)
By divide_by_2_mod_180_v0 on E, B, I, E, B, J we get angle(E, B, I) == angle(E, B, J) mod 360
By divide_by_2_mod_180_v1 on G, F, I, A, B, D we get angle(A, B, D) == angle(G, F, I) mod 360
By divide_by_2_mod_180_v0 on C, B, I, E, B, D we get angle(C, B, I) == angle(E, B, D) mod 360
By divide_by_2_mod_180_v1 on A, B, D, I, B, C we get angle(A, B, D) == angle(I, B, C) mod 360
By line_inequality on Line(F, I), Line(D, E), I we get Line(D, E) != Line(F, I)
By line_inequality on Line(F, I), Line(F, G), I we get Line(F, G) != Line(F, I)
By divide_by_2_mod_180_v1 on D, B, C, G, B, I we get angle(D, B, C) == angle(G, B, I) mod 360
By divide_by_2_mod_180_v1 on J, B, C, I, B, E we get angle(I, B, E) == angle(J, B, C) mod 360
By divide_by_2_mod_180_v1 on G, B, J, G, F, I we get angle(G, B, J) == angle(G, F, I) mod 360
By divide_by_2_mod_180_v1 on I, B, E, A, B, J we get angle(A, B, J) == angle(I, B, E) mod 360
By divide_by_2_mod_180_v0 on J, B, A, E, B, D we get angle(E, B, D) == angle(J, B, A) mod 360
By divide_by_2_mod_180_v1 on J, B, E, I, B, C we get angle(I, B, C) == angle(J, B, E) mod 360
By divide_by_2_mod_180_v0 on J, B, G, E, B, I we get angle(E, B, I) == angle(J, B, G) mod 360
By divide_by_2_mod_180_v1 on I, B, C, G, B, J we get angle(G, B, J) == angle(I, B, C) mod 360
By line_inequality on Line(E, F), Line(B, F), E we get Line(B, F) != Line(E, F)
By line_inequality on Line(G, I), Line(C, D), I we get Line(C, D) != Line(G, I)
By divide_by_2_mod_180_v0 on E, B, I, D, B, A we get angle(D, B, A) == angle(E, B, I) mod 360
By divide_by_2_mod_180_v1 on J, B, E, A, B, D we get angle(A, B, D) == angle(J, B, E) mod 360
By divide_by_2_mod_180_v1 on J, B, C, G, B, I we get angle(G, B, I) == angle(J, B, C) mod 360
By divide_by_2_mod_180_v1 on A, B, I, J, B, C we get angle(A, B, I) == angle(J, B, C) mod 360
By reverse_direction on F, D we get 180 == direction(F, D) - direction(D, F) mod 360
By divide_by_2_mod_180_v1 on G, B, J, I, B, E we get angle(G, B, J) == angle(I, B, E) mod 360
By divide_by_2_mod_180_v1 on I, B, C, A, B, J we get angle(A, B, J) == angle(I, B, C) mod 360
By divide_by_2_mod_180_v0 on E, B, I, J, B, A we get angle(E, B, I) == angle(J, B, A) mod 360
By divide_by_2_mod_180_v1 on D, B, E, I, B, C we get angle(D, B, E) == angle(I, B, C) mod 360
By divide_by_2_mod_180_v1 on A, B, I, D, B, C we get angle(A, B, I) == angle(D, B, C) mod 360
By divide_by_2_mod_180_v0 on E, B, D, E, B, J we get angle(E, B, D) == angle(E, B, J) mod 360
By divide_by_2_mod_180_v0 on E, B, D, J, B, G we get angle(E, B, D) == angle(J, B, G) mod 360
By divide_by_2_mod_180_v1 on G, B, D, G, B, J we get angle(G, B, D) == angle(G, B, J) mod 360
By divide_by_2_mod_180_v1 on D, B, C, A, B, J we get angle(A, B, J) == angle(D, B, C) mod 360
By line_inequality on k, Line(E, F), J we get k != Line(E, F)
By divide_by_2_mod_180_v0 on D, B, G, J, B, A we get angle(D, B, G) == angle(J, B, A) mod 360
By divide_by_2_mod_180_v1 on D, B, E, G, B, J we get angle(D, B, E) == angle(G, B, J) mod 360
By divide_by_2_mod_180_v0 on I, F, G, J, B, A we get angle(I, F, G) == angle(J, B, A) mod 360
By divide_by_2_mod_180_v0 on D, B, A, J, B, G we get angle(D, B, A) == angle(J, B, G) mod 360
By line_circle_intersection_has_at_most_two_points_0 on B, I, D, d we get D not in d
By reverse_direction on F, A we get 180 == direction(F, A) - direction(A, F) mod 360
By line_inequality on Line(F, G), Line(G, I), F we get Line(F, G) != Line(G, I)
By line_inequality on Line(D, G), Line(B, F), D we get Line(B, F) != Line(D, G)
By divide_by_2_mod_180_v0 on I, B, A, E, B, D we get angle(E, B, D) == angle(I, B, A) mod 360
By divide_by_2_mod_180_v0 on I, B, A, C, B, J we get angle(C, B, J) == angle(I, B, A) mod 360
By line_inequality on Line(D, E), Line(B, F), E we get Line(B, F) != Line(D, E)
By divide_by_2_mod_180_v1 on G, B, D, G, B, I we get angle(G, B, D) == angle(G, B, I) mod 360
By divide_by_2_mod_180_v0 on J, B, G, C, B, I we get angle(C, B, I) == angle(J, B, G) mod 360
By line_inequality on Line(D, E), Line(F, G), E we get Line(D, E) != Line(F, G)
By line_inequality on Line(E, G), Line(F, I), E we get Line(E, G) != Line(F, I)
By divide_by_2_mod_180_v1 on D, B, C, G, F, I we get angle(D, B, C) == angle(G, F, I) mod 360
By divide_by_2_mod_180_v1 on I, B, E, A, B, D we get angle(A, B, D) == angle(I, B, E) mod 360
By divide_by_2_mod_180_v0 on D, B, G, I, F, G we get angle(D, B, G) == angle(I, F, G) mod 360
By reverse_direction on C, E we get 180 == direction(C, E) - direction(E, C) mod 360
By divide_by_2_mod_180_v1 on G, B, I, A, B, J we get angle(A, B, J) == angle(G, B, I) mod 360
By reverse_direction on C, B we get 180 == direction(C, B) - direction(B, C) mod 360
By divide_by_2_mod_180_v0 on I, B, A, E, B, J we get angle(E, B, J) == angle(I, B, A) mod 360
By reverse_direction on A, C we get 180 == direction(A, C) - direction(C, A) mod 360
By line_inequality on Line(F, G), Line(D, F), G we get Line(D, F) != Line(F, G)
By reverse_direction on G, D we get 180 == direction(G, D) - direction(D, G) mod 360
By reverse_direction on B, E we get 180 == direction(B, E) - direction(E, B) mod 360
By line_inequality on j, Line(D, F), J we get j != Line(D, F)
By reverse_direction on B, C we get 180 == direction(B, C) - direction(C, B) mod 360
By line_inequality on Line(C, D), Line(E, G), D we get Line(C, D) != Line(E, G)
By between_imply_segment_sum on B, G, A we get distance(A, B) == distance(B, G) + distance(A, G)
By line_inequality on Line(B, F), Line(F, G), B we get Line(B, F) != Line(F, G)
By reverse_direction on A, G we get 180 == direction(A, G) - direction(G, A) mod 360
By line_inequality on Line(E, H), i, E we get i != Line(E, H)
By line_inequality on Line(C, D), Line(E, H), C we get Line(C, D) != Line(E, H)
By line_inequality on k, Line(F, G), H we get k != Line(F, G)
By reverse_direction on A, F we get 180 == direction(A, F) - direction(F, A) mod 360
By line_inequality on Line(G, I), Line(D, E), G we get Line(D, E) != Line(G, I)
By collinear_definition on G, J, H we get J in Line(G, H), H in Line(G, J), Line(G, H) == Line(G, J), 0 == 2 * angle(J, G, H) mod 360
By reverse_direction on C, F we get 180 == direction(C, F) - direction(F, C) mod 360
By line_inequality on Line(E, F), Line(D, F), E we get Line(D, F) != Line(E, F)
By line_inequality on Line(F, H), Line(D, G), F we get Line(D, G) != Line(F, H)
By reverse_direction on B, A we get 180 == direction(B, A) - direction(A, B) mod 360
By reverse_direction on D, F we get 180 == direction(D, F) - direction(F, D) mod 360
By line_inequality on Line(F, H), Line(E, G), H we get Line(E, G) != Line(F, H)
By reverse_direction on A, B we get 180 == direction(A, B) - direction(B, A) mod 360
By between_imply_segment_sum on C, E, B we get distance(B, C) == distance(C, E) + distance(B, E)
By line_inequality on Line(G, I), Line(E, G), I we get Line(E, G) != Line(G, I)
By line_inequality on Line(D, E), Line(D, G), E we get Line(D, E) != Line(D, G)
By line_inequality on Line(B, F), Line(F, H), B we get Line(B, F) != Line(F, H)
By line_inequality on Line(F, H), Line(F, G), H we get Line(F, G) != Line(F, H)
By reverse_direction on E, B we get 180 == direction(E, B) - direction(B, E) mod 360
By reverse_direction on D, E we get 180 == direction(D, E) - direction(E, D) mod 360
By collinear_definition on B, D, I we get D in Line(B, I), I in Line(B, D), Line(B, D) == Line(B, I), 0 == 2 * angle(D, B, I) mod 360
By line_inequality on Line(E, H), Line(D, G), E we get Line(D, G) != Line(E, H)
By line_inequality on Line(G, I), Line(F, I), G we get Line(F, I) != Line(G, I)
By line_inequality on Line(F, H), Line(G, I), F we get Line(F, H) != Line(G, I)
By collinear_definition on G, H, J we get H in Line(G, J), J in Line(G, H), Line(G, H) == Line(G, J), 0 == 2 * angle(H, G, J) mod 360
By reverse_direction on F, C we get 180 == direction(F, C) - direction(C, F) mod 360
By between_imply_segment_sum on A, F, C we get distance(A, C) == distance(A, F) + distance(C, F)
By line_inequality on Line(E, F), Line(F, G), E we get Line(E, F) != Line(F, G)
By reverse_direction on D, G we get 180 == direction(D, G) - direction(G, D) mod 360
By line_inequality on Line(D, F), Line(F, I), D we get Line(D, F) != Line(F, I)
By line_inequality on Line(G, I), Line(E, F), I we get Line(E, F) != Line(G, I)
By reverse_direction on G, A we get 180 == direction(G, A) - direction(A, G) mod 360
By reverse_direction on E, C we get 180 == direction(E, C) - direction(C, E) mod 360
By line_inequality on Line(G, I), Line(E, H), G we get Line(E, H) != Line(G, I)
By line_inequality on Line(E, F), Line(D, G), E we get Line(D, G) != Line(E, F)
By line_inequality on Line(E, G), Line(E, F), G we get Line(E, F) != Line(E, G)
By line_inequality on Line(E, G), Line(E, H), G we get Line(E, G) != Line(E, H)
By reverse_direction on C, A we get 180 == direction(C, A) - direction(A, C) mod 360
By line_inequality on Line(F, H), Line(E, F), H we get Line(E, F) != Line(F, H)
By line_inequality on k, Line(F, H), G we get k != Line(F, H)
By line_inequality on Line(E, H), Line(B, F), H we get Line(B, F) != Line(E, H)
By line_inequality on Line(D, F), Line(F, H), D we get Line(D, F) != Line(F, H)
By line_inequality on Line(D, E), Line(E, H), D we get Line(D, E) != Line(E, H)
By line_inequality on Line(C, D), Line(F, I), D we get Line(C, D) != Line(F, I)
By line_inequality on Line(C, D), Line(D, E), C we get Line(C, D) != Line(D, E)
By line_inequality on Line(B, F), Line(F, I), B we get Line(B, F) != Line(F, I)
By line_inequality on Line(G, I), Line(D, G), I we get Line(D, G) != Line(G, I)
By line_inequality on Line(D, F), Line(E, G), F we get Line(D, F) != Line(E, G)
By line_inequality on Line(F, I), Line(D, G), F we get Line(D, G) != Line(F, I)
By line_inequality on Line(D, G), Line(E, G), D we get Line(D, G) != Line(E, G)
By line_inequality on j, Line(B, F), D we get j != Line(B, F)
By line_inequality on Line(B, F), Line(D, F), B we get Line(B, F) != Line(D, F)
By line_inequality on Line(C, D), Line(E, F), D we get Line(C, D) != Line(E, F)
By line_inequality on Line(E, H), Line(F, G), H we get Line(E, H) != Line(F, G)
By line_inequality on Line(E, F), Line(E, H), F we get Line(E, F) != Line(E, H)
By line_inequality on Line(D, E), i, E we get i != Line(D, E)
By line_inequality on Line(F, I), j, F we get j != Line(F, I)
By line_inequality on Line(G, I), Line(B, F), G we get Line(B, F) != Line(G, I)
By line_inequality on Line(E, G), Line(B, F), E we get Line(B, F) != Line(E, G)
By line_inequality on Line(D, F), Line(G, I), D we get Line(D, F) != Line(G, I)
By not_in_line_equivalent_to_not_collinear_v0_r on H, D, C we get H not in Line(C, D)
By line_inequality on Line(E, H), Line(F, I), H we get Line(E, H) != Line(F, I)
By line_inequality on Line(E, G), k, E we get k != Line(E, G)
By line_inequality on Line(C, D), Line(B, F), C we get Line(B, F) != Line(C, D)
By line_inequality on Line(F, I), Line(E, F), I we get Line(E, F) != Line(F, I)
By line_inequality on Line(D, E), Line(E, G), D we get Line(D, E) != Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on G, C, D we get G not in Line(C, D)
By line_inequality on k, Line(E, H), G we get k != Line(E, H)
By line_inequality on Line(F, H), Line(E, H), F we get Line(E, H) != Line(F, H)
By line_inequality on Line(F, H), Line(D, E), F we get Line(D, E) != Line(F, H)
By line_inequality on Line(C, D), Line(D, F), C we get Line(C, D) != Line(D, F)
By line_inequality on Line(C, D), Line(F, H), C we get Line(C, D) != Line(F, H)
By line_inequality on Line(D, F), Line(D, E), F we get Line(D, E) != Line(D, F)
By line_inequality on Line(D, E), Line(E, F), D we get Line(D, E) != Line(E, F)
By line_inequality on Line(E, G), Line(F, G), E we get Line(E, G) != Line(F, G)
By line_circle_intersection_has_at_most_two_points_0 on I, B, J, d we get J not in d
By line_inequality on Line(D, G), Line(F, G), D we get Line(D, G) != Line(F, G)
By line_inequality on Line(C, D), Line(F, G), C we get Line(C, D) != Line(F, G)
By line_inequality on Line(F, H), Line(F, I), H we get Line(F, H) != Line(F, I)
By line_inequality on Line(C, D), Line(D, G), C we get Line(C, D) != Line(D, G)
By line_inequality on Line(D, G), Line(D, F), G we get Line(D, F) != Line(D, G)
By line_circle_intersection_has_at_most_two_points_0 on H, G, J, c we get J not in c
By same_angle_v2 on D, J, I, E we get angle(J, D, E) == angle(I, D, E) + 180 mod 360
By same_angle_v0 on I, D, J, F we get angle(D, I, F) == angle(J, I, F) mod 360
By same_angle_v1 on D, J, B, G we get angle(B, D, G) == angle(J, D, G) mod 360
By same_angle_v2 on D, I, B, G we get angle(I, D, G) == angle(B, D, G) + 180 mod 360
By same_angle_v2 on D, I, J, G we get angle(I, D, G) == angle(J, D, G) + 180 mod 360
By same_angle_v0 on D, J, B, E we get angle(B, D, E) == angle(J, D, E) mod 360
By same_angle_v3 on D, J, I, F we get angle(J, D, F) == angle(I, D, F) + 180 mod 360
By same_angle_v0 on D, B, J, F we get angle(B, D, F) == angle(J, D, F) mod 360
By same_angle_v2 on D, B, I, F we get angle(B, D, F) == angle(I, D, F) + 180 mod 360
By same_angle_v1 on I, D, J, G we get angle(D, I, G) == angle(J, I, G) mod 360
By collinear_definition on I, B, J we get B in Line(I, J), J in Line(B, I), Line(B, I) == Line(I, J), 0 == 2 * angle(B, I, J) mod 360
By same_angle_v3 on D, B, I, E we get angle(B, D, E) == angle(I, D, E) + 180 mod 360
By internal_angle_bisector_definition_v0_r on G, D, C, B we get Line(B, D) == internal_angle_bisector(C, B, G)
By external_angle_bisector_definition_v0_r on D, C, D, F we get Line(C, F) == external_angle_bisector(D, F, D)
By external_angle_bisector_definition_v0_r on B, D, B, E we get Line(D, E) == external_angle_bisector(B, E, B)
By internal_angle_bisector_definition_v0_r on E, I, A, B we get Line(B, I) == internal_angle_bisector(A, B, E)
By internal_angle_bisector_definition_v0_r on B, E, B, C we get Line(C, E) == internal_angle_bisector(B, C, B)
By internal_angle_bisector_definition_v0_r on C, J, G, B we get Line(B, J) == internal_angle_bisector(C, B, G)
By isogonal_conjugate_definition_v1 on C, B, A, D, D we get angle(B, C, D) == angle(D, C, A) mod 360
By isogonal_conjugate_definition_v4 on B, C, A, D, D we get angle(A, C, D) == angle(D, C, B) mod 360
By external_angle_bisector_definition_v0_r on D, A, D, F we get Line(A, F) == external_angle_bisector(D, F, D)
By internal_angle_bisector_definition_v0_r on A, D, C, F we get Line(D, F) == internal_angle_bisector(A, F, C)
By internal_angle_bisector_definition_v0_r on F, C, F, A we get Line(A, C) == internal_angle_bisector(F, A, F)
By internal_angle_bisector_definition_v0_r on A, G, A, B we get Line(B, G) == internal_angle_bisector(A, B, A)
By external_angle_bisector_definition_v0_r on C, D, C, E we get Line(D, E) == external_angle_bisector(C, E, C)
By external_angle_bisector_definition_v0_r on B, D, B, G we get Line(D, G) == external_angle_bisector(B, G, B)
By internal_angle_bisector_definition_v0_r on C, A, C, F we get Line(A, F) == internal_angle_bisector(C, F, C)
By external_angle_bisector_definition_v0_r on C, D, C, F we get Line(D, F) == external_angle_bisector(C, F, C)
By internal_angle_bisector_definition_v0_r on G, D, E, B we get Line(B, D) == internal_angle_bisector(E, B, G)
By external_angle_bisector_definition_v0_r on A, D, A, G we get Line(D, G) == external_angle_bisector(A, G, A)
By external_angle_bisector_definition_v0_r on D, A, D, G we get Line(A, G) == external_angle_bisector(D, G, D)
By collinear_definition on H, G, J we get G in Line(H, J), J in Line(G, H), Line(G, H) == Line(H, J), 0 == 2 * angle(G, H, J) mod 360
By external_angle_bisector_definition_v0_r on A, D, A, F we get Line(D, F) == external_angle_bisector(A, F, A)
By aa_anti_similarity on D, A, G, D, A, F we get anti_similar_triangles(A, D, F, A, D, G)
By internal_angle_bisector_definition_v0_r on E, B, E, C we get Line(B, C) == internal_angle_bisector(E, C, E)
By internal_angle_bisector_definition_v0_r on A, D, B, G we get Line(D, G) == internal_angle_bisector(A, G, B)
By external_angle_bisector_definition_v0_r on D, B, D, G we get Line(B, G) == external_angle_bisector(D, G, D)
By internal_angle_bisector_definition_v0_r on G, D, F, A we get Line(A, D) == internal_angle_bisector(F, A, G)
By aa_anti_similarity on D, G, B, D, E, B we get anti_similar_triangles(B, D, E, B, D, G)
By internal_angle_bisector_definition_v0_r on G, A, G, B we get Line(A, B) == internal_angle_bisector(G, B, G)
By internal_angle_bisector_definition_v0_r on G, J, E, B we get Line(B, J) == internal_angle_bisector(E, B, G)
By internal_angle_bisector_definition_v0_r on B, C, B, E we get Line(C, E) == internal_angle_bisector(B, E, B)
By internal_angle_bisector_definition_v0_r on A, D, E, B we get Line(B, D) == internal_angle_bisector(A, B, E)
By internal_angle_bisector_definition_v0_r on G, I, E, B we get Line(B, I) == internal_angle_bisector(E, B, G)
By internal_angle_bisector_definition_v0_r on C, D, B, E we get Line(D, E) == internal_angle_bisector(B, E, C)
By external_angle_bisector_definition_v0_r on D, C, D, E we get Line(C, E) == external_angle_bisector(D, E, D)
By internal_angle_bisector_definition_v0_r on G, I, C, B we get Line(B, I) == internal_angle_bisector(C, B, G)
By external_angle_bisector_definition_v0_r on D, B, D, E we get Line(B, E) == external_angle_bisector(D, E, D)
By aa_anti_similarity on D, F, A, D, G, A we get anti_similar_triangles(A, D, F, A, D, G)
By reverse_direction on G, J we get 180 == direction(G, J) - direction(J, G) mod 360
By internal_angle_bisector_definition_v0_r on G, B, G, A we get Line(A, B) == internal_angle_bisector(G, A, G)
By internal_angle_bisector_definition_v0_r on A, B, A, G we get Line(B, G) == internal_angle_bisector(A, G, A)
By internal_angle_bisector_definition_v0_r on C, E, C, B we get Line(B, E) == internal_angle_bisector(C, B, C)
By aa_anti_similarity on D, B, E, D, B, G we get anti_similar_triangles(B, D, E, B, D, G)
By internal_angle_bisector_definition_v0_r on G, D, C, A we get Line(A, D) == internal_angle_bisector(C, A, G)
By internal_angle_bisector_definition_v0_r on A, F, A, C we get Line(C, F) == internal_angle_bisector(A, C, A)
By internal_angle_bisector_definition_v0_r on E, J, A, B we get Line(B, J) == internal_angle_bisector(A, B, E)
By internal_angle_bisector_definition_v0_r on F, A, F, C we get Line(A, C) == internal_angle_bisector(F, C, F)
By collinear_definition on I, J, B we get J in Line(B, I), B in Line(I, J), Line(B, I) == Line(I, J), 0 == 2 * angle(J, I, B) mod 360
By internal_angle_bisector_definition_v0_r on B, G, B, A we get Line(A, G) == internal_angle_bisector(B, A, B)
By collinear_definition on H, J, G we get J in Line(G, H), G in Line(H, J), Line(G, H) == Line(H, J), 0 == 2 * angle(J, H, G) mod 360
By internal_angle_bisector_definition_v0_r on E, C, E, B we get Line(B, C) == internal_angle_bisector(E, B, E)
By internal_angle_bisector_definition_v0_r on C, B, C, E we get Line(B, E) == internal_angle_bisector(C, E, C)
By internal_angle_bisector_definition_v0_r on F, D, B, A we get Line(A, D) == internal_angle_bisector(B, A, F)
By reverse_direction on B, J we get 180 == direction(B, J) - direction(J, B) mod 360
By aa_anti_similarity on D, G, A, D, F, A we get anti_similar_triangles(A, D, F, A, D, G)
By aa_anti_similarity on D, E, B, D, G, B we get anti_similar_triangles(B, D, E, B, D, G)
By internal_angle_bisector_definition_v0_r on A, C, A, F we get Line(C, F) == internal_angle_bisector(A, F, A)
By collinear_definition on I, B, D we get B in Line(D, I), D in Line(B, I), Line(B, I) == Line(D, I), 0 == 2 * angle(B, I, D) mod 360
By reverse_direction on B, D we get 180 == direction(B, D) - direction(D, B) mod 360
By internal_angle_bisector_definition_v0_r on C, F, C, A we get Line(A, F) == internal_angle_bisector(C, A, C)
By aa_anti_similarity on D, B, G, D, B, E we get anti_similar_triangles(B, D, E, B, D, G)
By aa_anti_similarity on D, A, F, D, A, G we get anti_similar_triangles(A, D, F, A, D, G)
By collinear_definition on I, D, B we get D in Line(B, I), B in Line(D, I), Line(B, I) == Line(D, I), 0 == 2 * angle(D, I, B) mod 360
By reverse_direction on A, D we get 180 == direction(A, D) - direction(D, A) mod 360
By internal_angle_bisector_definition_v0_r on B, A, B, G we get Line(A, G) == internal_angle_bisector(B, G, B)
By same_angle_v1 on J, I, D, H we get angle(D, J, H) == angle(I, J, H) mod 360
By same_angle_v2 on J, B, I, H we get angle(B, J, H) == angle(I, J, H) + 180 mod 360
By same_angle_v3 on J, D, B, G we get angle(D, J, G) == angle(B, J, G) + 180 mod 360
By same_angle_v1 on D, J, B, A we get angle(B, D, A) == angle(J, D, A) mod 360
By same_angle_v0 on J, D, I, G we get angle(D, J, G) == angle(I, J, G) mod 360
By same_angle_v2 on J, I, B, G we get angle(I, J, G) == angle(B, J, G) + 180 mod 360
By same_angle_v2 on J, H, G, I we get angle(H, J, I) == angle(G, J, I) + 180 mod 360
By same_angle_v3 on D, I, J, A we get angle(I, D, A) == angle(J, D, A) + 180 mod 360
By same_angle_v3 on D, J, I, C we get angle(J, D, C) == angle(I, D, C) + 180 mod 360
By same_angle_v0 on D, J, B, C we get angle(B, D, C) == angle(J, D, C) mod 360
By same_angle_v3 on J, B, D, H we get angle(B, J, H) == angle(D, J, H) + 180 mod 360
By same_angle_v2 on D, B, I, C we get angle(B, D, C) == angle(I, D, C) + 180 mod 360
By same_angle_v3 on J, G, H, B we get angle(G, J, B) == angle(H, J, B) + 180 mod 360
By same_angle_v3 on J, H, G, D we get angle(H, J, D) == angle(G, J, D) + 180 mod 360
By same_angle_v2 on D, I, B, A we get angle(I, D, A) == angle(B, D, A) + 180 mod 360
By collinear_definition on J, H, G we get H in Line(G, J), G in Line(H, J), Line(G, J) == Line(H, J), 0 == 2 * angle(H, J, G) mod 360
By collinear_definition on D, B, I we get B in Line(D, I), I in Line(B, D), Line(B, D) == Line(D, I), 0 == 2 * angle(B, D, I) mod 360
By collinear_definition on D, B, J we get B in Line(D, J), J in Line(B, D), Line(B, D) == Line(D, J), 0 == 2 * angle(B, D, J) mod 360
By collinear_definition on I, J, D we get J in Line(D, I), D in Line(I, J), Line(D, I) == Line(I, J), 0 == 2 * angle(J, I, D) mod 360
By collinear_definition on J, B, D we get B in Line(D, J), D in Line(B, J), Line(B, J) == Line(D, J), 0 == 2 * angle(B, J, D) mod 360
By collinear_definition on J, D, I we get D in Line(I, J), I in Line(D, J), Line(D, J) == Line(I, J), 0 == 2 * angle(D, J, I) mod 360
By collinear_definition on D, J, B we get J in Line(B, D), B in Line(D, J), Line(B, D) == Line(D, J), 0 == 2 * angle(J, D, B) mod 360
By collinear_definition on D, J, I we get J in Line(D, I), I in Line(D, J), Line(D, I) == Line(D, J), 0 == 2 * angle(J, D, I) mod 360
By collinear_definition on D, I, J we get I in Line(D, J), J in Line(D, I), Line(D, I) == Line(D, J), 0 == 2 * angle(I, D, J) mod 360
By collinear_definition on J, D, B we get D in Line(B, J), B in Line(D, J), Line(B, J) == Line(D, J), 0 == 2 * angle(D, J, B) mod 360
By collinear_definition on J, B, I we get B in Line(I, J), I in Line(B, J), Line(B, J) == Line(I, J), 0 == 2 * angle(B, J, I) mod 360
By collinear_definition on J, I, B we get I in Line(B, J), B in Line(I, J), Line(B, J) == Line(I, J), 0 == 2 * angle(I, J, B) mod 360
By collinear_definition on J, I, D we get I in Line(D, J), D in Line(I, J), Line(D, J) == Line(I, J), 0 == 2 * angle(I, J, D) mod 360
By collinear_definition on I, D, J we get D in Line(I, J), J in Line(D, I), Line(D, I) == Line(I, J), 0 == 2 * angle(D, I, J) mod 360
By collinear_definition on J, G, H we get G in Line(H, J), H in Line(G, J), Line(G, J) == Line(H, J), 0 == 2 * angle(G, J, H) mod 360
By collinear_definition on D, I, B we get I in Line(B, D), B in Line(D, I), Line(B, D) == Line(D, I), 0 == 2 * angle(I, D, B) mod 360
By power_of_a_point_definition on A, B, G, d we get log(power_of_a_point(A, d)) == log(distance(A, B)) + log(distance(A, G))
By line_intersection_definition on orthocenter(B, D, E), Line(D, E), g we get orthocenter(B, D, E) == line_intersection(g, Line(D, E))
By line_intersection_definition on orthocenter(B, D, G), f, Line(D, G) we get orthocenter(B, D, G) == line_intersection(f, Line(D, G))
By line_intersection_definition on orthocenter(C, D, F), Line(D, F), h we get orthocenter(C, D, F) == line_intersection(h, Line(D, F))
By line_intersection_definition on orthocenter(C, D, E), g, Line(D, E) we get orthocenter(C, D, E) == line_intersection(g, Line(D, E))
By line_intersection_definition on orthocenter(A, D, F), h, Line(D, F) we get orthocenter(A, D, F) == line_intersection(h, Line(D, F))
By line_intersection_definition on orthocenter(A, D, G), Line(D, G), f we get orthocenter(A, D, G) == line_intersection(f, Line(D, G))
By line_intersection_definition on D, Line(D, G), Line(D, E) we get D == line_intersection(Line(D, E), Line(D, G))
By perpendicular_line_definition on C, Line(C, D), altitude(F, C, D) we get Line(C, D) == perpendicular_line(C, altitude(F, C, D))
By line_intersection_definition on F, Line(B, F), Line(F, G) we get F == line_intersection(Line(B, F), Line(F, G))
By line_intersection_definition on F, Line(F, I), Line(E, F) we get F == line_intersection(Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on Line(F, G), Line(B, F), h we get concurrent(h, Line(B, F), Line(F, G))
By concurrent_sufficient_conditions on Line(E, G), Line(D, G), f we get concurrent(f, Line(D, G), Line(E, G))
By concurrent_sufficient_conditions on Line(F, G), Line(D, F), h we get concurrent(h, Line(D, F), Line(F, G))
By perpendicular_line_definition on B, j, altitude(G, B, D) we get j == perpendicular_line(B, altitude(G, B, D))
By line_intersection_definition on G, Line(F, G), k we get G == line_intersection(k, Line(F, G))
By concurrent_sufficient_conditions on Line(D, G), Line(D, F), i we get concurrent(i, Line(D, F), Line(D, G))
By line_intersection_definition on D, Line(D, F), Line(D, G) we get D == line_intersection(Line(D, F), Line(D, G))
By line_intersection_definition on H, k, Line(E, H) we get H == line_intersection(k, Line(E, H))
By line_intersection_definition on G, Line(D, G), Line(E, G) we get G == line_intersection(Line(D, G), Line(E, G))
By line_intersection_definition on E, Line(E, G), Line(E, H) we get E == line_intersection(Line(E, G), Line(E, H))
By perpendicular_line_definition on orthocenter(B, D, E), altitude(E, B, D), j we get altitude(E, B, D) == perpendicular_line(orthocenter(B, D, E), j)
By line_intersection_definition on E, Line(E, F), Line(E, H) we get E == line_intersection(Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(C, D), Line(D, G), i we get concurrent(i, Line(C, D), Line(D, G))
By perpendicular_line_definition on orthocenter(A, D, F), h, Line(D, F) we get h == perpendicular_line(orthocenter(A, D, F), Line(D, F))
By line_intersection_definition on I, Line(F, I), j we get I == line_intersection(j, Line(F, I))
By line_intersection_definition on D, Line(D, G), Line(C, D) we get D == line_intersection(Line(C, D), Line(D, G))
By perpendicular_line_definition on orthocenter(B, D, E), g, Line(D, E) we get g == perpendicular_line(orthocenter(B, D, E), Line(D, E))
By concurrent_sufficient_conditions on Line(F, G), Line(E, G), f we get concurrent(f, Line(E, G), Line(F, G))
By perpendicular_line_definition on I, j, altitude(G, B, D) we get j == perpendicular_line(I, altitude(G, B, D))
By concurrent_sufficient_conditions on Line(D, F), Line(D, G), i we get concurrent(i, Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on Line(E, G), Line(E, F), g we get concurrent(g, Line(E, F), Line(E, G))
By line_intersection_definition on H, k, Line(F, H) we get H == line_intersection(k, Line(F, H))
By concurrent_sufficient_conditions on Line(F, G), Line(E, F), h we get concurrent(h, Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on Line(F, H), Line(D, F), h we get concurrent(h, Line(D, F), Line(F, H))
By line_intersection_definition on F, Line(D, F), Line(F, G) we get F == line_intersection(Line(D, F), Line(F, G))
By perpendicular_line_definition on D, j, altitude(G, B, D) we get j == perpendicular_line(D, altitude(G, B, D))
By concurrent_sufficient_conditions on k, Line(F, G), f we get concurrent(f, k, Line(F, G))
By concurrent_sufficient_conditions on Line(B, F), Line(F, G), h we get concurrent(h, Line(B, F), Line(F, G))
By concurrent_sufficient_conditions on Line(G, I), Line(E, G), f we get concurrent(f, Line(E, G), Line(G, I))
By perpendicular_line_definition on orthocenter(C, D, E), Line(D, E), g we get Line(D, E) == perpendicular_line(orthocenter(C, D, E), g)
By line_intersection_definition on G, Line(F, G), Line(D, G) we get G == line_intersection(Line(D, G), Line(F, G))
By concurrent_sufficient_conditions on Line(D, F), Line(F, I), h we get concurrent(h, Line(D, F), Line(F, I))
By perpendicular_line_definition on D, i, altitude(G, A, D) we get i == perpendicular_line(D, altitude(G, A, D))
By perpendicular_line_definition on D, Line(C, D), altitude(F, C, D) we get Line(C, D) == perpendicular_line(D, altitude(F, C, D))
By concurrent_sufficient_conditions on Line(B, F), Line(F, I), h we get concurrent(h, Line(B, F), Line(F, I))
By concurrent_sufficient_conditions on Line(D, E), Line(E, G), g we get concurrent(g, Line(D, E), Line(E, G))
By line_intersection_definition on F, Line(F, H), Line(E, F) we get F == line_intersection(Line(E, F), Line(F, H))
By line_intersection_definition on F, Line(B, F), Line(E, F) we get F == line_intersection(Line(B, F), Line(E, F))
By concurrent_sufficient_conditions on Line(E, G), Line(E, H), g we get concurrent(g, Line(E, G), Line(E, H))
By concurrent_sufficient_conditions on Line(F, H), Line(F, G), h we get concurrent(h, Line(F, G), Line(F, H))
By line_intersection_definition on F, Line(D, F), Line(E, F) we get F == line_intersection(Line(D, F), Line(E, F))
By perpendicular_line_definition on D, Line(C, D), altitude(E, C, D) we get Line(C, D) == perpendicular_line(D, altitude(E, C, D))
By line_intersection_definition on D, Line(D, E), Line(C, D) we get D == line_intersection(Line(C, D), Line(D, E))
By line_intersection_definition on E, Line(E, F), Line(D, E) we get E == line_intersection(Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(F, G), Line(D, G), f we get concurrent(f, Line(D, G), Line(F, G))
By perpendicular_line_definition on J, j, altitude(E, B, D) we get j == perpendicular_line(J, altitude(E, B, D))
By concurrent_sufficient_conditions on Line(E, H), Line(D, E), g we get concurrent(g, Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on Line(B, F), Line(F, H), h we get concurrent(h, Line(B, F), Line(F, H))
By concurrent_sufficient_conditions on Line(F, I), Line(F, G), h we get concurrent(h, Line(F, G), Line(F, I))
By concurrent_sufficient_conditions on Line(F, I), Line(F, H), h we get concurrent(h, Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on Line(F, G), Line(G, I), f we get concurrent(f, Line(F, G), Line(G, I))
By perpendicular_line_definition on D, i, altitude(F, A, D) we get i == perpendicular_line(D, altitude(F, A, D))
By concurrent_sufficient_conditions on Line(E, F), Line(F, G), h we get concurrent(h, Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on Line(E, F), Line(F, I), h we get concurrent(h, Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on Line(D, F), Line(F, G), h we get concurrent(h, Line(D, F), Line(F, G))
By line_unique_intersection_v0 on Line(D, F), h, orthocenter(C, D, F), F we get F == orthocenter(C, D, F)
By concurrent_sufficient_conditions on Line(D, E), Line(E, F), g we get concurrent(g, Line(D, E), Line(E, F))
By line_intersection_definition on F, Line(F, G), Line(E, F) we get F == line_intersection(Line(E, F), Line(F, G))
By line_intersection_definition on B, Line(B, F), j we get B == line_intersection(j, Line(B, F))
By line_intersection_definition on F, Line(F, H), Line(B, F) we get F == line_intersection(Line(B, F), Line(F, H))
By line_intersection_definition on F, Line(F, H), Line(F, G) we get F == line_intersection(Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on j, Line(B, F), g we get concurrent(g, j, Line(B, F))
By line_intersection_definition on D, Line(D, E), i we get D == line_intersection(i, Line(D, E))
By concurrent_sufficient_conditions on Line(F, H), Line(E, F), h we get concurrent(h, Line(E, F), Line(F, H))
By perpendicular_line_definition on orthocenter(B, D, G), Line(D, G), f we get Line(D, G) == perpendicular_line(orthocenter(B, D, G), f)
By line_intersection_definition on G, Line(G, I), Line(D, G) we get G == line_intersection(Line(D, G), Line(G, I))
By line_intersection_definition on F, Line(F, H), Line(F, I) we get F == line_intersection(Line(F, H), Line(F, I))
By line_intersection_definition on F, Line(B, F), Line(F, I) we get F == line_intersection(Line(B, F), Line(F, I))
By concurrent_sufficient_conditions on Line(E, G), Line(F, G), f we get concurrent(f, Line(E, G), Line(F, G))
By concurrent_sufficient_conditions on Line(E, G), Line(D, E), g we get concurrent(g, Line(D, E), Line(E, G))
By perpendicular_line_definition on orthocenter(B, D, G), f, Line(D, G) we get f == perpendicular_line(orthocenter(B, D, G), Line(D, G))
By concurrent_sufficient_conditions on Line(C, D), Line(D, G), j we get concurrent(j, Line(C, D), Line(D, G))
By concurrent_sufficient_conditions on Line(C, D), Line(D, E), j we get concurrent(j, Line(C, D), Line(D, E))
By line_intersection_definition on E, Line(E, G), Line(E, F) we get E == line_intersection(Line(E, F), Line(E, G))
By concurrent_sufficient_conditions on Line(B, F), j, g we get concurrent(g, j, Line(B, F))
By concurrent_sufficient_conditions on Line(F, G), Line(F, I), h we get concurrent(h, Line(F, G), Line(F, I))
By concurrent_sufficient_conditions on Line(D, G), Line(F, G), f we get concurrent(f, Line(D, G), Line(F, G))
By concurrent_sufficient_conditions on Line(D, F), Line(B, F), h we get concurrent(h, Line(B, F), Line(D, F))
By perpendicular_line_definition on D, j, altitude(E, B, D) we get j == perpendicular_line(D, altitude(E, B, D))
By concurrent_sufficient_conditions on Line(D, E), Line(D, G), j we get concurrent(j, Line(D, E), Line(D, G))
By concurrent_sufficient_conditions on i, Line(D, E), j we get concurrent(i, j, Line(D, E))
By line_intersection_definition on G, Line(F, G), Line(E, G) we get G == line_intersection(Line(E, G), Line(F, G))
By perpendicular_line_definition on orthocenter(A, D, F), altitude(F, A, D), i we get altitude(F, A, D) == perpendicular_line(orthocenter(A, D, F), i)
By line_intersection_definition on D, Line(C, D), Line(D, F) we get D == line_intersection(Line(C, D), Line(D, F))
By concurrent_sufficient_conditions on Line(D, F), Line(E, F), h we get concurrent(h, Line(D, F), Line(E, F))
By perpendicular_line_definition on C, Line(C, D), altitude(E, C, D) we get Line(C, D) == perpendicular_line(C, altitude(E, C, D))
By perpendicular_line_definition on orthocenter(A, D, G), Line(D, G), f we get Line(D, G) == perpendicular_line(orthocenter(A, D, G), f)
By concurrent_sufficient_conditions on Line(C, D), Line(D, F), i we get concurrent(i, Line(C, D), Line(D, F))
By perpendicular_line_definition on orthocenter(C, D, F), altitude(F, C, D), Line(C, D) we get altitude(F, C, D) == perpendicular_line(orthocenter(C, D, F), Line(C, D))
By concurrent_sufficient_conditions on Line(D, E), i, j we get concurrent(i, j, Line(D, E))
By concurrent_sufficient_conditions on Line(G, I), Line(F, G), f we get concurrent(f, Line(F, G), Line(G, I))
By line_intersection_definition on F, Line(F, G), Line(F, I) we get F == line_intersection(Line(F, G), Line(F, I))
By perpendicular_line_definition on A, i, altitude(F, A, D) we get i == perpendicular_line(A, altitude(F, A, D))
By concurrent_sufficient_conditions on Line(E, F), Line(B, F), h we get concurrent(h, Line(B, F), Line(E, F))
By line_intersection_definition on F, Line(B, F), Line(D, F) we get F == line_intersection(Line(B, F), Line(D, F))
By concurrent_sufficient_conditions on Line(D, G), Line(C, D), j we get concurrent(j, Line(C, D), Line(D, G))
By perpendicular_line_definition on orthocenter(B, D, E), Line(D, E), g we get Line(D, E) == perpendicular_line(orthocenter(B, D, E), g)
By concurrent_sufficient_conditions on k, Line(E, G), f we get concurrent(f, k, Line(E, G))
By concurrent_sufficient_conditions on Line(E, F), Line(E, H), g we get concurrent(g, Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(F, H), Line(B, F), h we get concurrent(h, Line(B, F), Line(F, H))
By line_intersection_definition on F, Line(F, I), Line(D, F) we get F == line_intersection(Line(D, F), Line(F, I))
By perpendicular_line_definition on orthocenter(A, D, G), altitude(G, A, D), i we get altitude(G, A, D) == perpendicular_line(orthocenter(A, D, G), i)
By perpendicular_line_definition on orthocenter(C, D, F), h, Line(D, F) we get h == perpendicular_line(orthocenter(C, D, F), Line(D, F))
By perpendicular_line_definition on B, j, altitude(E, B, D) we get j == perpendicular_line(B, altitude(E, B, D))
By perpendicular_line_definition on orthocenter(C, D, F), Line(D, F), h we get Line(D, F) == perpendicular_line(orthocenter(C, D, F), h)
By perpendicular_line_definition on A, i, altitude(G, A, D) we get i == perpendicular_line(A, altitude(G, A, D))
By concurrent_sufficient_conditions on Line(E, F), Line(D, E), g we get concurrent(g, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(F, I), Line(E, F), h we get concurrent(h, Line(E, F), Line(F, I))
By line_intersection_definition on E, Line(E, H), Line(D, E) we get E == line_intersection(Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on Line(D, F), j, i we get concurrent(i, j, Line(D, F))
By concurrent_sufficient_conditions on Line(F, I), Line(B, F), h we get concurrent(h, Line(B, F), Line(F, I))
By line_intersection_definition on D, Line(D, E), Line(D, F) we get D == line_intersection(Line(D, E), Line(D, F))
By line_intersection_definition on G, Line(G, I), Line(E, G) we get G == line_intersection(Line(E, G), Line(G, I))
By line_intersection_definition on D, Line(D, F), j we get D == line_intersection(j, Line(D, F))
By line_intersection_definition on G, Line(F, G), Line(G, I) we get G == line_intersection(Line(F, G), Line(G, I))
By line_intersection_definition on I, Line(G, I), Line(F, I) we get I == line_intersection(Line(F, I), Line(G, I))
By concurrent_sufficient_conditions on Line(E, F), Line(D, F), h we get concurrent(h, Line(D, F), Line(E, F))
By line_intersection_definition on H, Line(E, H), Line(F, H) we get H == line_intersection(Line(E, H), Line(F, H))
By perpendicular_line_definition on orthocenter(C, D, E), g, Line(D, E) we get g == perpendicular_line(orthocenter(C, D, E), Line(D, E))
By concurrent_sufficient_conditions on Line(B, F), j, f we get concurrent(f, j, Line(B, F))
By line_intersection_definition on E, Line(E, G), Line(D, E) we get E == line_intersection(Line(D, E), Line(E, G))
By line_intersection_definition on F, Line(F, H), Line(D, F) we get F == line_intersection(Line(D, F), Line(F, H))
By concurrent_sufficient_conditions on Line(D, G), Line(E, G), f we get concurrent(f, Line(D, G), Line(E, G))
By concurrent_sufficient_conditions on Line(D, G), Line(D, E), j we get concurrent(j, Line(D, E), Line(D, G))
By concurrent_sufficient_conditions on Line(E, G), Line(G, I), f we get concurrent(f, Line(E, G), Line(G, I))
By concurrent_sufficient_conditions on j, Line(B, F), f we get concurrent(f, j, Line(B, F))
By concurrent_sufficient_conditions on Line(E, G), k, f we get concurrent(f, k, Line(E, G))
By concurrent_sufficient_conditions on Line(D, G), Line(G, I), k we get concurrent(k, Line(D, G), Line(G, I))
By perpendicular_line_definition on orthocenter(A, D, F), Line(D, F), h we get Line(D, F) == perpendicular_line(orthocenter(A, D, F), h)
By concurrent_sufficient_conditions on Line(F, H), Line(F, I), h we get concurrent(h, Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on Line(D, G), Line(C, D), i we get concurrent(i, Line(C, D), Line(D, G))
By line_intersection_definition on G, Line(E, G), k we get G == line_intersection(k, Line(E, G))
By perpendicular_line_definition on orthocenter(B, D, G), altitude(G, B, D), j we get altitude(G, B, D) == perpendicular_line(orthocenter(B, D, G), j)
By concurrent_sufficient_conditions on j, Line(D, F), i we get concurrent(i, j, Line(D, F))
By perpendicular_line_definition on orthocenter(A, D, G), f, Line(D, G) we get f == perpendicular_line(orthocenter(A, D, G), Line(D, G))
By concurrent_sufficient_conditions on Line(F, G), Line(F, H), h we get concurrent(h, Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on Line(B, F), Line(E, F), h we get concurrent(h, Line(B, F), Line(E, F))
By concurrent_sufficient_conditions on Line(E, H), Line(E, F), g we get concurrent(g, Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(D, F), Line(F, H), h we get concurrent(h, Line(D, F), Line(F, H))
By concurrent_sufficient_conditions on Line(E, H), Line(E, G), g we get concurrent(g, Line(E, G), Line(E, H))
By concurrent_sufficient_conditions on Line(B, F), Line(D, F), h we get concurrent(h, Line(B, F), Line(D, F))
By concurrent_sufficient_conditions on Line(D, E), Line(C, D), j we get concurrent(j, Line(C, D), Line(D, E))
By concurrent_sufficient_conditions on Line(G, I), Line(D, G), f we get concurrent(f, Line(D, G), Line(G, I))
By perpendicular_line_definition on J, j, altitude(G, B, D) we get j == perpendicular_line(J, altitude(G, B, D))
By perpendicular_line_definition on orthocenter(C, D, E), altitude(E, C, D), Line(C, D) we get altitude(E, C, D) == perpendicular_line(orthocenter(C, D, E), Line(C, D))
By concurrent_sufficient_conditions on Line(D, G), Line(G, I), f we get concurrent(f, Line(D, G), Line(G, I))
By concurrent_sufficient_conditions on Line(F, I), Line(D, F), h we get concurrent(h, Line(D, F), Line(F, I))
By concurrent_sufficient_conditions on Line(E, F), Line(F, H), h we get concurrent(h, Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(E, F), Line(E, G), g we get concurrent(g, Line(E, F), Line(E, G))
By concurrent_sufficient_conditions on Line(D, F), Line(C, D), i we get concurrent(i, Line(C, D), Line(D, F))
By concurrent_sufficient_conditions on Line(G, I), Line(D, G), k we get concurrent(k, Line(D, G), Line(G, I))
By concurrent_sufficient_conditions on Line(D, E), Line(E, H), g we get concurrent(g, Line(D, E), Line(E, H))
By perpendicular_line_definition on I, j, altitude(E, B, D) we get j == perpendicular_line(I, altitude(E, B, D))
By concurrent_sufficient_conditions on Line(F, G), k, f we get concurrent(f, k, Line(F, G))
By line_unique_intersection_v0 on g, Line(D, E), orthocenter(B, D, E), E we get E == orthocenter(B, D, E)
By line_unique_intersection_v0 on Line(D, F), h, orthocenter(A, D, F), orthocenter(C, D, F) we get orthocenter(A, D, F) == orthocenter(C, D, F)
By line_unique_intersection_v0 on Line(D, E), g, orthocenter(B, D, E), orthocenter(C, D, E) we get orthocenter(B, D, E) == orthocenter(C, D, E)
By line_unique_intersection_v0 on g, Line(D, E), E, orthocenter(C, D, E) we get E == orthocenter(C, D, E)
By line_unique_intersection_v0 on h, Line(D, F), orthocenter(A, D, F), F we get F == orthocenter(A, D, F)
By line_unique_intersection_v0 on f, Line(D, G), G, orthocenter(B, D, G) we get G == orthocenter(B, D, G)
By line_unique_intersection_v0 on Line(D, G), f, orthocenter(B, D, G), orthocenter(A, D, G) we get orthocenter(A, D, G) == orthocenter(B, D, G)
By line_unique_intersection_v0 on Line(D, G), f, orthocenter(A, D, G), G we get G == orthocenter(A, D, G)
By between_implies_orientation on J, B, D, I we get orientation(B, D, J) == orientation(D, I, J) mod 360, orientation(B, D, J) == orientation(B, I, J) mod 360
By between_implies_orientation on I, D, J, B we get orientation(B, I, J) == orientation(D, J, I) mod 360, orientation(B, I, D) == orientation(D, J, I) mod 360
By between_imply_not_between on I, D, B we get collinear_and_not_between(B, I, D)
By between_implies_orientation on B, I, D, J we get orientation(B, D, J) == orientation(B, I, D) mod 360, orientation(B, I, D) == orientation(B, I, J) mod 360
By between_implies_orientation on B, J, D, I we get orientation(B, D, I) == orientation(B, J, D) mod 360, orientation(B, J, D) == orientation(B, J, I) mod 360
By between_implies_orientation on J, I, D, B we get orientation(B, J, D) == orientation(D, J, I) mod 360, orientation(B, J, I) == orientation(D, J, I) mod 360
By between_implies_orientation on D, I, J, B we get orientation(B, D, J) == orientation(D, I, J) mod 360, orientation(B, D, I) == orientation(D, I, J) mod 360
By between_imply_not_between on B, D, I we get collinear_and_not_between(D, B, I)
By between_implies_orientation on D, B, J, I we get orientation(B, J, D) == orientation(D, J, I) mod 360, orientation(B, I, D) == orientation(B, J, D) mod 360
By between_implies_orientation on I, B, J, D we get orientation(B, J, I) == orientation(D, I, J) mod 360, orientation(B, D, I) == orientation(B, J, I) mod 360
By between_imply_not_between on G, J, H we get collinear_and_not_between(H, G, J)
By between_imply_not_between on J, D, I we get collinear_and_not_between(D, J, I)
By between_imply_not_between on I, D, J we get collinear_and_not_between(D, I, J)
By between_imply_not_between on I, J, B we get collinear_and_not_between(B, I, J)
By between_imply_not_between on B, J, D we get collinear_and_not_between(D, B, J)
By between_imply_not_between on H, J, G we get collinear_and_not_between(G, H, J)
By between_imply_not_between on B, J, I we get collinear_and_not_between(I, B, J)
By between_imply_not_between on D, J, B we get collinear_and_not_between(B, D, J)
By different_points_v1 on center(d), B we get 0 != distance(B, center(d))
By different_points_v1 on center(d), F we get 0 != distance(F, center(d))
By different_points_v1 on center(c), F we get 0 != distance(F, center(c))
By different_points_v1 on center(d), G we get 0 != distance(G, center(d))
By different_points_v1 on center(c), E we get 0 != distance(E, center(c))
By different_points_v1 on H, center(c) we get 0 != distance(H, center(c))
By different_points_v1 on center(d), I we get 0 != distance(I, center(d))
By different_points_v1 on center(c), G we get 0 != distance(G, center(c))
By line_inequality on altitude(E, C, D), h, E we get h != altitude(E, C, D)
By in_imply_collinear on orthocenter(C, D, E), B, C we get collinear(B, C, orthocenter(C, D, E))
By in_imply_collinear on orthocenter(C, D, E), D, E we get collinear(D, E, orthocenter(C, D, E))
By in_imply_collinear on orthocenter(A, D, G), G, D we get collinear(D, G, orthocenter(A, D, G))
By in_imply_collinear on orthocenter(A, D, G), A, B we get collinear(A, B, orthocenter(A, D, G))
By in_imply_collinear on orthocenter(B, D, G), A, G we get collinear(A, G, orthocenter(B, D, G))
By in_imply_collinear on orthocenter(A, D, G), G, B we get collinear(B, G, orthocenter(A, D, G))
By in_imply_collinear on orthocenter(B, D, E), E, C we get collinear(C, E, orthocenter(B, D, E))
By in_imply_collinear on orthocenter(B, D, G), D, G we get collinear(D, G, orthocenter(B, D, G))
By in_imply_collinear on orthocenter(C, D, F), F, D we get collinear(D, F, orthocenter(C, D, F))
By in_imply_collinear on orthocenter(A, D, F), A, C we get collinear(A, C, orthocenter(A, D, F))
By in_imply_collinear on orthocenter(C, D, F), A, F we get collinear(A, F, orthocenter(C, D, F))
By in_imply_collinear on orthocenter(C, D, F), C, F we get collinear(C, F, orthocenter(C, D, F))
By in_imply_collinear on orthocenter(B, D, G), G, B we get collinear(B, G, orthocenter(B, D, G))
By in_imply_collinear on orthocenter(A, D, F), F, A we get collinear(A, F, orthocenter(A, D, F))
By asa_anti_congruence on B, D, G, B, D, E we get anti_congruent_triangles(B, D, E, B, D, G)
By line_inequality on Line(G, center(c)), Line(C, D), G we get Line(C, D) != Line(G, center(c))
By in_imply_collinear on orthocenter(C, D, E), B, E we get collinear(B, E, orthocenter(C, D, E))
By in_imply_collinear on orthocenter(A, D, G), G, A we get collinear(A, G, orthocenter(A, D, G))
By asa_anti_congruence on D, A, F, D, A, G we get anti_congruent_triangles(A, D, F, A, D, G)
By in_imply_collinear on orthocenter(A, D, F), C, F we get collinear(C, F, orthocenter(A, D, F))
By in_imply_collinear on orthocenter(B, D, G), A, B we get collinear(A, B, orthocenter(B, D, G))
By in_imply_collinear on orthocenter(B, D, E), E, B we get collinear(B, E, orthocenter(B, D, E))
By in_imply_collinear on orthocenter(C, D, E), C, E we get collinear(C, E, orthocenter(C, D, E))
By in_imply_collinear on orthocenter(A, D, F), F, D we get collinear(D, F, orthocenter(A, D, F))
By aa_anti_similarity on D, F, C, D, E, C we get anti_similar_triangles(C, D, E, C, D, F)
By in_imply_collinear on orthocenter(B, D, E), E, D we get collinear(D, E, orthocenter(B, D, E))
By in_imply_collinear on orthocenter(C, D, F), C, A we get collinear(A, C, orthocenter(C, D, F))
By line_inequality on Line(F, center(c)), j, F we get j != Line(F, center(c))
By line_inequality on altitude(F, A, D), k, F we get k != altitude(F, A, D)
By in_imply_collinear on orthocenter(B, D, E), C, B we get collinear(B, C, orthocenter(B, D, E))
By between_imply_segment_sum on B, D, I we get distance(B, I) == distance(B, D) + distance(D, I)
By line_inequality on Line(H, center(c)), Line(E, F), H we get Line(E, F) != Line(H, center(c))
By anti_congruence_from_anti_similar_triangles on A, D, F, A, D, G we get anti_congruent_triangles(A, D, F, A, D, G)
By anti_congruence_from_anti_similar_triangles on D, B, G, D, B, E we get anti_congruent_triangles(B, D, E, B, D, G)
By line_containment_inequality on orthocenter(B, D, E), G, g we get G != orthocenter(B, D, E)
By between_imply_segment_sum on I, J, B we get distance(B, I) == distance(I, J) + distance(B, J)
By double_perpendicular_and_parallel_v0 on altitude(G, B, D), j, altitude(E, B, D) we get parallel(altitude(E, B, D), altitude(G, B, D))
By line_containment_inequality on orthocenter(B, D, E), B, Line(D, E) we get B != orthocenter(B, D, E)
By double_perpendicular_and_parallel_v0 on altitude(E, C, D), Line(C, D), altitude(F, C, D) we get parallel(altitude(E, C, D), altitude(F, C, D))
By asa_anti_congruence on D, A, G, D, A, F we get anti_congruent_triangles(A, D, F, A, D, G)
By reverse_direction on D, C we get 180 == direction(D, C) - direction(C, D) mod 360
By line_inequality on Line(H, center(c)), Line(E, G), H we get Line(E, G) != Line(H, center(c))
By line_containment_inequality on orthocenter(B, D, E), C, Line(D, E) we get C != orthocenter(B, D, E)
By line_inequality on altitude(F, A, D), g, F we get g != altitude(F, A, D)
By line_containment_inequality on orthocenter(A, D, F), H, h we get H != orthocenter(A, D, F)
By asa_anti_congruence on D, B, E, D, B, G we get anti_congruent_triangles(B, D, E, B, D, G)
By asa_anti_congruence on B, D, E, B, D, G we get anti_congruent_triangles(B, D, E, B, D, G)
By line_inequality on Line(G, center(c)), Line(D, E), G we get Line(D, E) != Line(G, center(c))
By line_containment_inequality on orthocenter(A, D, G), E, Line(D, G) we get E != orthocenter(A, D, G)
By line_inequality on Line(F, center(c)), Line(C, D), F we get Line(C, D) != Line(F, center(c))
By double_perpendicular_and_parallel_v0 on altitude(F, A, D), i, altitude(G, A, D) we get parallel(altitude(F, A, D), altitude(G, A, D))
By line_containment_inequality on orthocenter(A, D, G), J, f we get J != orthocenter(A, D, G)
By line_inequality on altitude(G, A, D), g, G we get g != altitude(G, A, D)
By between_imply_segment_sum on H, J, G we get distance(G, H) == distance(H, J) + distance(G, J)
By line_inequality on altitude(E, C, D), Line(F, I), E we get Line(F, I) != altitude(E, C, D)
By line_inequality on Line(I, center(d)), i, I we get i != Line(I, center(d))
By line_inequality on Line(G, center(c)), i, G we get i != Line(G, center(c))
By anti_congruence_from_anti_similar_triangles on D, B, E, D, B, G we get anti_congruent_triangles(B, D, E, B, D, G)
By line_inequality on altitude(E, B, D), Line(D, G), E we get Line(D, G) != altitude(E, B, D)
By line_inequality on Line(E, center(c)), k, E we get k != Line(E, center(c))
By line_inequality on altitude(E, B, D), Line(C, D), E we get Line(C, D) != altitude(E, B, D)
By aa_anti_similarity on D, E, C, D, F, C we get anti_similar_triangles(C, D, E, C, D, F)
By line_inequality on Line(H, center(c)), Line(F, G), H we get Line(F, G) != Line(H, center(c))
By line_inequality on altitude(E, B, D), f, E we get f != altitude(E, B, D)
By line_containment_inequality on orthocenter(B, D, G), F, f we get F != orthocenter(B, D, G)
By line_inequality on Line(I, center(d)), Line(E, H), I we get Line(E, H) != Line(I, center(d))
By asa_anti_congruence on D, B, G, D, B, E we get anti_congruent_triangles(B, D, E, B, D, G)
By line_inequality on altitude(G, A, D), Line(C, D), G we get Line(C, D) != altitude(G, A, D)
By line_containment_inequality on orthocenter(B, D, G), E, f we get E != orthocenter(B, D, G)
By line_inequality on Line(G, center(c)), g, G we get g != Line(G, center(c))
By line_containment_inequality on orthocenter(A, D, F), I, h we get I != orthocenter(A, D, F)
By line_inequality on altitude(E, C, D), j, E we get j != altitude(E, C, D)
By line_containment_inequality on orthocenter(C, D, E), H, Line(D, E) we get H != orthocenter(C, D, E)
By line_inequality on altitude(E, B, D), Line(D, F), E we get Line(D, F) != altitude(E, B, D)
By reverse_direction on C, D we get 180 == direction(C, D) - direction(D, C) mod 360
By line_inequality on altitude(F, A, D), Line(G, I), F we get Line(G, I) != altitude(F, A, D)
By line_inequality on altitude(E, C, D), Line(C, D), E we get Line(C, D) != altitude(E, C, D)
By line_inequality on Line(I, center(d)), Line(B, F), I we get Line(B, F) != Line(I, center(d))
By line_inequality on Line(F, center(c)), f, F we get f != Line(F, center(c))
By line_containment_inequality on orthocenter(A, D, G), H, Line(D, G) we get H != orthocenter(A, D, G)
By line_containment_inequality on orthocenter(B, D, G), H, Line(D, G) we get H != orthocenter(B, D, G)
By line_inequality on Line(G, center(d)), h, G we get h != Line(G, center(d))
By anti_congruence_from_anti_similar_triangles on D, A, G, D, A, F we get anti_congruent_triangles(A, D, F, A, D, G)
By line_inequality on Line(G, center(c)), Line(E, H), G we get Line(E, H) != Line(G, center(c))
By line_inequality on altitude(G, B, D), i, G we get i != altitude(G, B, D)
By between_imply_segment_sum on J, D, I we get distance(I, J) == distance(D, J) + distance(D, I)
By line_inequality on Line(H, center(c)), g, H we get g != Line(H, center(c))
By line_inequality on Line(F, center(c)), k, F we get k != Line(F, center(c))
By anti_congruence_from_anti_similar_triangles on A, D, G, A, D, F we get anti_congruent_triangles(A, D, F, A, D, G)
By anti_congruence_from_anti_similar_triangles on B, D, G, B, D, E we get anti_congruent_triangles(B, D, E, B, D, G)
By aa_anti_similarity on D, C, E, D, C, F we get anti_similar_triangles(C, D, E, C, D, F)
By line_inequality on Line(F, center(c)), Line(D, G), F we get Line(D, G) != Line(F, center(c))
By asa_anti_congruence on A, D, G, A, D, F we get anti_congruent_triangles(A, D, F, A, D, G)
By line_containment_inequality on orthocenter(A, D, F), J, Line(D, F) we get J != orthocenter(A, D, F)
By asa_anti_congruence on A, D, F, A, D, G we get anti_congruent_triangles(A, D, F, A, D, G)
By line_inequality on Line(B, center(d)), Line(F, I), B we get Line(F, I) != Line(B, center(d))
By line_containment_inequality on orthocenter(C, D, E), J, Line(D, E) we get J != orthocenter(C, D, E)
By anti_congruence_from_anti_similar_triangles on D, A, F, D, A, G we get anti_congruent_triangles(A, D, F, A, D, G)
By line_inequality on Line(F, center(c)), Line(E, H), F we get Line(E, H) != Line(F, center(c))
By between_imply_segment_sum on B, J, D we get distance(B, D) == distance(B, J) + distance(D, J)
By aa_anti_similarity on D, C, F, D, C, E we get anti_similar_triangles(C, D, E, C, D, F)
By line_inequality on Line(F, center(d)), Line(C, D), F we get Line(C, D) != Line(F, center(d))
By line_inequality on Line(I, center(d)), Line(F, H), I we get Line(F, H) != Line(I, center(d))
By line_inequality on altitude(E, C, D), Line(D, F), E we get Line(D, F) != altitude(E, C, D)
By line_containment_inequality on orthocenter(A, D, F), E, h we get E != orthocenter(A, D, F)
By line_containment_inequality on orthocenter(A, D, G), F, f we get F != orthocenter(A, D, G)
By line_containment_inequality on orthocenter(A, D, G), C, Line(D, G) we get C != orthocenter(A, D, G)
By line_containment_inequality on orthocenter(B, D, E), D, g we get D != orthocenter(B, D, E)
By line_inequality on Line(E, center(c)), Line(D, G), E we get Line(D, G) != Line(E, center(c))
By line_inequality on Line(E, center(c)), Line(F, H), E we get Line(F, H) != Line(E, center(c))
By line_inequality on altitude(F, C, D), f, F we get f != altitude(F, C, D)
By line_inequality on Line(B, center(d)), Line(F, H), B we get Line(F, H) != Line(B, center(d))
By anti_congruence_from_anti_similar_triangles on B, D, E, B, D, G we get anti_congruent_triangles(B, D, E, B, D, G)
By line_containment_inequality on orthocenter(A, D, G), B, Line(D, G) we get B != orthocenter(A, D, G)
By line_inequality on Line(H, center(c)), Line(F, I), H we get Line(F, I) != Line(H, center(c))
By line_inequality on Line(E, center(c)), Line(G, I), E we get Line(G, I) != Line(E, center(c))
By line_containment_inequality on orthocenter(B, D, G), J, f we get J != orthocenter(B, D, G)
By line_containment_inequality on orthocenter(B, D, G), I, f we get I != orthocenter(B, D, G)
By line_containment_inequality on orthocenter(C, D, F), C, Line(D, F) we get C != orthocenter(C, D, F)
By line_inequality on altitude(F, A, D), Line(E, G), F we get Line(E, G) != altitude(F, A, D)
By line_inequality on Line(G, center(d)), j, G we get j != Line(G, center(d))
By line_inequality on Line(G, center(d)), Line(C, D), G we get Line(C, D) != Line(G, center(d))
By line_inequality on Line(I, center(d)), Line(D, G), I we get Line(D, G) != Line(I, center(d))
By line_containment_inequality on orthocenter(B, D, E), I, g we get I != orthocenter(B, D, E)
By line_inequality on altitude(F, A, D), Line(E, H), F we get Line(E, H) != altitude(F, A, D)
By line_containment_inequality on orthocenter(C, D, E), D, g we get D != orthocenter(C, D, E)
By line_containment_inequality on orthocenter(A, D, F), A, Line(D, F) we get A != orthocenter(A, D, F)
By line_inequality on Line(B, center(d)), Line(E, F), B we get Line(E, F) != Line(B, center(d))
By line_containment_inequality on orthocenter(C, D, F), B, Line(D, F) we get B != orthocenter(C, D, F)
By line_inequality on altitude(E, C, D), i, E we get i != altitude(E, C, D)
By line_inequality on altitude(G, A, D), j, G we get j != altitude(G, A, D)
By line_inequality on Line(I, center(d)), Line(D, E), I we get Line(D, E) != Line(I, center(d))
By line_containment_inequality on orthocenter(B, D, G), C, f we get C != orthocenter(B, D, G)
By line_containment_inequality on orthocenter(B, D, E), F, g we get F != orthocenter(B, D, E)
By line_inequality on Line(G, center(d)), Line(D, F), G we get Line(D, F) != Line(G, center(d))
By line_containment_inequality on orthocenter(B, D, E), J, Line(D, E) we get J != orthocenter(B, D, E)
By line_inequality on Line(G, center(c)), j, G we get j != Line(G, center(c))
By line_inequality on Line(G, center(c)), Line(D, F), G we get Line(D, F) != Line(G, center(c))
By line_inequality on Line(H, center(c)), i, H we get i != Line(H, center(c))
By line_containment_inequality on orthocenter(B, D, E), H, Line(D, E) we get H != orthocenter(B, D, E)
By line_inequality on Line(B, center(d)), Line(E, G), B we get Line(E, G) != Line(B, center(d))
By line_inequality on Line(I, center(d)), h, I we get h != Line(I, center(d))
By line_containment_inequality on orthocenter(A, D, F), G, h we get G != orthocenter(A, D, F)
By line_inequality on Line(I, center(d)), Line(F, G), I we get Line(F, G) != Line(I, center(d))
By line_inequality on Line(F, center(c)), Line(D, E), F we get Line(D, E) != Line(F, center(c))
By line_inequality on Line(F, center(c)), g, F we get g != Line(F, center(c))
By line_containment_inequality on orthocenter(C, D, E), F, Line(D, E) we get F != orthocenter(C, D, E)
By line_inequality on Line(F, center(d)), Line(D, E), F we get Line(D, E) != Line(F, center(d))
By line_inequality on altitude(E, B, D), Line(F, H), E we get Line(F, H) != altitude(E, B, D)
By line_inequality on altitude(G, A, D), h, G we get h != altitude(G, A, D)
By line_inequality on altitude(G, B, D), Line(F, I), G we get Line(F, I) != altitude(G, B, D)
By line_inequality on altitude(G, B, D), Line(E, F), G we get Line(E, F) != altitude(G, B, D)
By line_inequality on altitude(G, B, D), Line(D, F), G we get Line(D, F) != altitude(G, B, D)
By line_inequality on Line(G, center(d)), g, G we get g != Line(G, center(d))
By line_containment_inequality on orthocenter(B, D, E), A, Line(D, E) we get A != orthocenter(B, D, E)
By line_inequality on altitude(F, C, D), i, F we get i != altitude(F, C, D)
By line_inequality on Line(B, center(d)), Line(D, G), B we get Line(D, G) != Line(B, center(d))
By line_inequality on altitude(G, A, D), Line(D, F), G we get Line(D, F) != altitude(G, A, D)
By line_inequality on Line(G, center(d)), Line(E, F), G we get Line(E, F) != Line(G, center(d))
By line_inequality on Line(I, center(d)), g, I we get g != Line(I, center(d))
By line_inequality on altitude(E, B, D), Line(G, I), E we get Line(G, I) != altitude(E, B, D)
By line_inequality on Line(G, center(d)), Line(D, E), G we get Line(D, E) != Line(G, center(d))
By line_containment_inequality on orthocenter(A, D, G), D, f we get D != orthocenter(A, D, G)
By line_inequality on Line(B, center(d)), Line(D, F), B we get Line(D, F) != Line(B, center(d))
By line_inequality on altitude(F, C, D), Line(E, G), F we get Line(E, G) != altitude(F, C, D)
By line_inequality on Line(H, center(c)), Line(B, F), H we get Line(B, F) != Line(H, center(c))
By line_inequality on altitude(F, C, D), k, F we get k != altitude(F, C, D)
By line_inequality on Line(G, center(c)), Line(F, H), G we get Line(F, H) != Line(G, center(c))
By line_inequality on altitude(G, B, D), g, G we get g != altitude(G, B, D)
By line_inequality on Line(H, center(c)), f, H we get f != Line(H, center(c))
By line_containment_inequality on orthocenter(C, D, E), C, Line(D, E) we get C != orthocenter(C, D, E)
By line_inequality on Line(G, center(c)), Line(B, F), G we get Line(B, F) != Line(G, center(c))
By line_containment_inequality on orthocenter(A, D, F), C, Line(D, F) we get C != orthocenter(A, D, F)
By line_inequality on Line(I, center(d)), Line(C, D), I we get Line(C, D) != Line(I, center(d))
By line_containment_inequality on orthocenter(C, D, F), I, h we get I != orthocenter(C, D, F)
By line_inequality on Line(E, center(c)), j, E we get j != Line(E, center(c))
By line_inequality on Line(G, center(d)), i, G we get i != Line(G, center(d))
By line_inequality on Line(G, center(c)), Line(F, I), G we get Line(F, I) != Line(G, center(c))
By line_inequality on altitude(G, B, D), Line(E, H), G we get Line(E, H) != altitude(G, B, D)
By line_inequality on Line(I, center(d)), k, I we get k != Line(I, center(d))
By line_inequality on Line(I, center(d)), f, I we get f != Line(I, center(d))
By line_inequality on altitude(G, A, D), Line(E, F), G we get Line(E, F) != altitude(G, A, D)
By line_inequality on Line(F, center(d)), f, F we get f != Line(F, center(d))
By line_containment_inequality on orthocenter(B, D, G), A, Line(D, G) we get A != orthocenter(B, D, G)
By line_inequality on Line(H, center(c)), Line(D, E), H we get Line(D, E) != Line(H, center(c))
By line_inequality on Line(F, center(d)), Line(G, I), F we get Line(G, I) != Line(F, center(d))
By line_inequality on altitude(F, C, D), g, F we get g != altitude(F, C, D)
By line_inequality on Line(I, center(d)), Line(E, F), I we get Line(E, F) != Line(I, center(d))
By line_inequality on Line(B, center(d)), Line(D, E), B we get Line(D, E) != Line(B, center(d))
By line_containment_inequality on orthocenter(C, D, F), D, h we get D != orthocenter(C, D, F)
By line_inequality on altitude(G, A, D), i, G we get i != altitude(G, A, D)
By line_inequality on altitude(E, B, D), h, E we get h != altitude(E, B, D)
By line_inequality on Line(B, center(d)), Line(C, D), B we get Line(C, D) != Line(B, center(d))
By line_inequality on Line(F, center(d)), Line(E, H), F we get Line(E, H) != Line(F, center(d))
By line_inequality on Line(B, center(d)), Line(E, H), B we get Line(E, H) != Line(B, center(d))
By line_containment_inequality on orthocenter(A, D, G), I, f we get I != orthocenter(A, D, G)
By line_inequality on Line(F, center(d)), g, F we get g != Line(F, center(d))
By line_inequality on altitude(E, C, D), Line(F, G), E we get Line(F, G) != altitude(E, C, D)
By line_inequality on altitude(F, A, D), Line(C, D), F we get Line(C, D) != altitude(F, A, D)
By line_containment_inequality on orthocenter(C, D, F), E, Line(D, F) we get E != orthocenter(C, D, F)
By line_inequality on altitude(E, C, D), Line(G, I), E we get Line(G, I) != altitude(E, C, D)
By line_inequality on Line(G, center(c)), Line(E, F), G we get Line(E, F) != Line(G, center(c))
By line_inequality on altitude(F, A, D), Line(D, G), F we get Line(D, G) != altitude(F, A, D)
By line_inequality on altitude(E, C, D), f, E we get f != altitude(E, C, D)
By line_inequality on altitude(F, C, D), Line(D, E), F we get Line(D, E) != altitude(F, C, D)
By line_containment_inequality on orthocenter(C, D, F), H, h we get H != orthocenter(C, D, F)
By line_inequality on Line(B, center(d)), i, B we get i != Line(B, center(d))
By line_containment_inequality on orthocenter(B, D, G), D, f we get D != orthocenter(B, D, G)
By line_inequality on Line(B, center(d)), h, B we get h != Line(B, center(d))
By line_containment_inequality on orthocenter(C, D, E), I, g we get I != orthocenter(C, D, E)
By line_inequality on altitude(G, B, D), Line(F, H), G we get Line(F, H) != altitude(G, B, D)
By line_inequality on altitude(G, A, D), Line(F, H), G we get Line(F, H) != altitude(G, A, D)
By line_inequality on Line(E, center(c)), i, E we get i != Line(E, center(c))
By line_inequality on altitude(E, B, D), Line(B, F), E we get Line(B, F) != altitude(E, B, D)
By line_inequality on Line(E, center(c)), h, E we get h != Line(E, center(c))
By line_inequality on altitude(G, B, D), Line(D, E), G we get Line(D, E) != altitude(G, B, D)
By line_inequality on altitude(G, B, D), Line(B, F), G we get Line(B, F) != altitude(G, B, D)
By line_inequality on altitude(F, A, D), i, F we get i != altitude(F, A, D)
By line_containment_inequality on orthocenter(C, D, F), G, Line(D, F) we get G != orthocenter(C, D, F)
By line_inequality on Line(B, center(d)), k, B we get k != Line(B, center(d))
By line_inequality on altitude(F, C, D), j, F we get j != altitude(F, C, D)
By line_inequality on Line(H, center(c)), j, H we get j != Line(H, center(c))
By line_inequality on Line(G, center(d)), Line(F, H), G we get Line(F, H) != Line(G, center(d))
By line_inequality on Line(B, center(d)), Line(G, I), B we get Line(G, I) != Line(B, center(d))
By line_inequality on altitude(E, B, D), j, E we get j != altitude(E, B, D)
By line_inequality on altitude(E, B, D), Line(F, G), E we get Line(F, G) != altitude(E, B, D)
By line_inequality on Line(H, center(c)), Line(G, I), H we get Line(G, I) != Line(H, center(c))
By line_inequality on Line(G, center(d)), Line(F, I), G we get Line(F, I) != Line(G, center(d))
By line_inequality on Line(E, center(c)), Line(F, G), E we get Line(F, G) != Line(E, center(c))
By line_inequality on Line(F, center(c)), Line(E, G), F we get Line(E, G) != Line(F, center(c))
By line_inequality on altitude(F, C, D), Line(G, I), F we get Line(G, I) != altitude(F, C, D)
By line_containment_inequality on orthocenter(A, D, F), B, Line(D, F) we get B != orthocenter(A, D, F)
By line_inequality on Line(E, center(c)), Line(C, D), E we get Line(C, D) != Line(E, center(c))
By line_inequality on altitude(G, B, D), h, G we get h != altitude(G, B, D)
By line_inequality on Line(G, center(d)), Line(E, H), G we get Line(E, H) != Line(G, center(d))
By line_inequality on Line(H, center(c)), Line(C, D), H we get Line(C, D) != Line(H, center(c))
By line_inequality on altitude(E, C, D), Line(D, G), E we get Line(D, G) != altitude(E, C, D)
By line_inequality on Line(B, center(d)), Line(F, G), B we get Line(F, G) != Line(B, center(d))
By line_containment_inequality on orthocenter(C, D, E), A, Line(D, E) we get A != orthocenter(C, D, E)
By line_inequality on altitude(G, A, D), Line(E, H), G we get Line(E, H) != altitude(G, A, D)
By line_inequality on altitude(G, B, D), j, G we get j != altitude(G, B, D)
By line_inequality on Line(I, center(d)), Line(E, G), I we get Line(E, G) != Line(I, center(d))
By line_containment_inequality on orthocenter(B, D, G), B, Line(D, G) we get B != orthocenter(B, D, G)
By line_inequality on Line(F, center(d)), j, F we get j != Line(F, center(d))
By line_inequality on Line(F, center(d)), k, F we get k != Line(F, center(d))
By line_inequality on altitude(F, C, D), Line(D, G), F we get Line(D, G) != altitude(F, C, D)
By line_containment_inequality on orthocenter(C, D, F), J, Line(D, F) we get J != orthocenter(C, D, F)
By line_containment_inequality on orthocenter(C, D, F), A, Line(D, F) we get A != orthocenter(C, D, F)
By line_inequality on Line(F, center(c)), Line(G, I), F we get Line(G, I) != Line(F, center(c))
By line_inequality on Line(F, center(c)), i, F we get i != Line(F, center(c))
By line_containment_inequality on orthocenter(A, D, F), D, h we get D != orthocenter(A, D, F)
By line_inequality on Line(F, center(d)), i, F we get i != Line(F, center(d))
By line_containment_inequality on orthocenter(C, D, E), G, Line(D, E) we get G != orthocenter(C, D, E)
By line_containment_inequality on orthocenter(A, D, G), A, Line(D, G) we get A != orthocenter(A, D, G)
By line_inequality on altitude(E, B, D), k, E we get k != altitude(E, B, D)
By line_inequality on altitude(E, C, D), k, E we get k != altitude(E, C, D)
By line_inequality on Line(F, center(d)), Line(E, G), F we get Line(E, G) != Line(F, center(d))
By line_inequality on Line(H, center(c)), Line(D, F), H we get Line(D, F) != Line(H, center(c))
By line_inequality on Line(H, center(c)), Line(D, G), H we get Line(D, G) != Line(H, center(c))
By line_inequality on Line(E, center(c)), Line(D, F), E we get Line(D, F) != Line(E, center(c))
By line_inequality on Line(H, center(c)), h, H we get h != Line(H, center(c))
By line_inequality on altitude(F, C, D), Line(E, H), F we get Line(E, H) != altitude(F, C, D)
By line_inequality on altitude(G, A, D), Line(B, F), G we get Line(B, F) != altitude(G, A, D)
By line_inequality on altitude(E, C, D), Line(F, H), E we get Line(F, H) != altitude(E, C, D)
By line_inequality on altitude(F, A, D), j, F we get j != altitude(F, A, D)
By line_inequality on altitude(F, C, D), Line(C, D), F we get Line(C, D) != altitude(F, C, D)
By line_inequality on altitude(E, C, D), Line(B, F), E we get Line(B, F) != altitude(E, C, D)
By line_inequality on Line(G, center(c)), h, G we get h != Line(G, center(c))
By line_inequality on Line(I, center(d)), Line(D, F), I we get Line(D, F) != Line(I, center(d))
By line_inequality on Line(E, center(c)), Line(B, F), E we get Line(B, F) != Line(E, center(c))
By line_inequality on altitude(F, A, D), f, F we get f != altitude(F, A, D)
By line_inequality on altitude(E, B, D), Line(F, I), E we get Line(F, I) != altitude(E, B, D)
By line_inequality on altitude(E, B, D), i, E we get i != altitude(E, B, D)
By line_inequality on Line(E, center(c)), f, E we get f != Line(E, center(c))
By line_inequality on Line(E, center(c)), Line(F, I), E we get Line(F, I) != Line(E, center(c))
By line_inequality on altitude(F, A, D), Line(D, E), F we get Line(D, E) != altitude(F, A, D)
By line_inequality on Line(G, center(d)), Line(B, F), G we get Line(B, F) != Line(G, center(d))
By line_inequality on Line(F, center(d)), Line(D, G), F we get Line(D, G) != Line(F, center(d))
By line_inequality on altitude(G, A, D), Line(F, I), G we get Line(F, I) != altitude(G, A, D)
By line_containment_inequality on orthocenter(C, D, E), B, Line(D, E) we get B != orthocenter(C, D, E)
By line_inequality on altitude(G, B, D), Line(C, D), G we get Line(C, D) != altitude(G, B, D)
By line_inequality on altitude(G, A, D), Line(D, E), G we get Line(D, E) != altitude(G, A, D)
By perpendicular_lines_draw_intersection on altitude(G, A, D), i we get exists(line_intersection(i, altitude(G, A, D)))
By external_angle_bisector_definition_v0_r on I, D, B, J we get Line(D, J) == external_angle_bisector(B, J, I)
By concyclic_definition_0 on C, D, E, F we get F in Circle(C, D, E)
By concyclic_definition_0 on G, B, D, E we get E in Circle(B, D, G)
By concyclic_definition_0 on F, C, D, E we get E in Circle(C, D, F)
By external_angle_bisector_definition_v0_r on I, J, B, D we get Line(D, J) == external_angle_bisector(B, D, I)
By concyclic_definition_0 on E, C, F, D we get D in Circle(C, E, F)
By internal_angle_bisector_definition_v0_r on B, D, J, I we get Line(D, I) == internal_angle_bisector(B, I, J)
By perpendicular_lines_draw_intersection on altitude(F, C, D), Line(C, D) we get exists(line_intersection(Line(C, D), altitude(F, C, D)))
By concyclic_definition_0 on B, E, D, G we get G in Circle(B, D, E)
By internal_angle_bisector_definition_v0_r on G, A, F, D we get Line(A, D) == internal_angle_bisector(F, D, G)
By internal_angle_bisector_definition_v0_r on H, G, H, J we get Line(G, J) == internal_angle_bisector(H, J, H)
By concyclic_definition_0 on D, G, F, A we get A in Circle(D, F, G)
By internal_angle_bisector_definition_v0_r on B, J, B, I we get Line(I, J) == internal_angle_bisector(B, I, B)
By concyclic_definition_0 on F, E, D, C we get C in Circle(D, E, F)
By internal_angle_bisector_definition_v0_r on E, D, A, C we get Line(C, D) == internal_angle_bisector(A, C, E)
By concyclic_definition_0 on D, G, A, F we get F in Circle(A, D, G)
By internal_angle_bisector_definition_v0_r on J, B, J, I we get Line(B, I) == internal_angle_bisector(J, I, J)
By external_angle_bisector_definition_v0_r on I, B, J, D we get Line(B, D) == external_angle_bisector(I, D, J)
By external_angle_bisector_definition_v0_r on D, I, B, J we get Line(I, J) == external_angle_bisector(B, J, D)
By internal_angle_bisector_definition_v0_r on I, J, I, D we get Line(D, J) == internal_angle_bisector(I, D, I)
By internal_angle_bisector_definition_v0_r on D, I, D, J we get Line(I, J) == internal_angle_bisector(D, J, D)
By internal_angle_bisector_definition_v0_r on J, G, J, H we get Line(G, H) == internal_angle_bisector(J, H, J)
By concyclic_definition_0 on E, G, D, B we get B in Circle(D, E, G)
By concyclic_definition_0 on G, F, A, D we get D in Circle(A, F, G)
By internal_angle_bisector_definition_v0_r on J, H, J, G we get Line(G, H) == internal_angle_bisector(J, G, J)
By internal_angle_bisector_definition_v0_r on D, J, D, B we get Line(B, J) == internal_angle_bisector(D, B, D)
By perpendicular_lines_draw_intersection on j, altitude(E, B, D) we get exists(line_intersection(j, altitude(E, B, D)))
By internal_angle_bisector_definition_v0_r on E, I, G, D we get Line(D, I) == internal_angle_bisector(E, D, G)
By internal_angle_bisector_definition_v0_r on I, J, D, B we get Line(B, J) == internal_angle_bisector(D, B, I)
By reverse_direction on center(c), E we get 180 == direction(center(c), E) - direction(E, center(c)) mod 360
By concyclic_definition_0 on F, D, A, G we get G in Circle(A, D, F)
By concyclic_definition_0 on E, B, G, D we get D in Circle(B, E, G)
By internal_angle_bisector_definition_v0_r on J, I, J, D we get Line(D, I) == internal_angle_bisector(J, D, J)
By reverse_direction on center(c), H we get 180 == direction(center(c), H) - direction(H, center(c)) mod 360
By internal_angle_bisector_definition_v0_r on B, I, B, D we get Line(D, I) == internal_angle_bisector(B, D, B)
By internal_angle_bisector_definition_v0_r on J, I, J, B we get Line(B, I) == internal_angle_bisector(J, B, J)
By internal_angle_bisector_definition_v0_r on D, B, I, J we get Line(B, J) == internal_angle_bisector(D, J, I)
By internal_angle_bisector_definition_v0_r on I, D, I, B we get Line(B, D) == internal_angle_bisector(I, B, I)
By internal_angle_bisector_definition_v0_r on B, J, D, I we get Line(I, J) == internal_angle_bisector(B, I, D)
By internal_angle_bisector_definition_v0_r on G, H, G, J we get Line(H, J) == internal_angle_bisector(G, J, G)
By internal_angle_bisector_definition_v0_r on D, J, D, I we get Line(I, J) == internal_angle_bisector(D, I, D)
By internal_angle_bisector_definition_v0_r on J, D, J, I we get Line(D, I) == internal_angle_bisector(J, I, J)
By internal_angle_bisector_definition_v0_r on G, J, G, H we get Line(H, J) == internal_angle_bisector(G, H, G)
By internal_angle_bisector_definition_v0_r on J, I, D, B we get Line(B, I) == internal_angle_bisector(D, B, J)
By internal_angle_bisector_definition_v0_r on B, I, J, D we get Line(D, I) == internal_angle_bisector(B, D, J)
By internal_angle_bisector_definition_v0_r on D, B, D, I we get Line(B, I) == internal_angle_bisector(D, I, D)
By internal_angle_bisector_definition_v0_r on I, B, I, J we get Line(B, J) == internal_angle_bisector(I, J, I)
By internal_angle_bisector_definition_v0_r on J, D, I, B we get Line(B, D) == internal_angle_bisector(I, B, J)
By internal_angle_bisector_definition_v0_r on B, I, B, J we get Line(I, J) == internal_angle_bisector(B, J, B)
By internal_angle_bisector_definition_v0_r on E, J, G, D we get Line(D, J) == internal_angle_bisector(E, D, G)
By internal_angle_bisector_definition_v0_r on F, D, E, C we get Line(C, D) == internal_angle_bisector(E, C, F)
By internal_angle_bisector_definition_v0_r on F, D, B, C we get Line(C, D) == internal_angle_bisector(B, C, F)
By internal_angle_bisector_definition_v0_r on D, B, J, I we get Line(B, I) == internal_angle_bisector(D, I, J)
By reverse_direction on center(d), B we get 180 == direction(center(d), B) - direction(B, center(d)) mod 360
By internal_angle_bisector_definition_v0_r on H, J, H, G we get Line(G, J) == internal_angle_bisector(H, G, H)
By internal_angle_bisector_definition_v0_r on I, J, I, B we get Line(B, J) == internal_angle_bisector(I, B, I)
By internal_angle_bisector_definition_v0_r on I, B, I, D we get Line(B, D) == internal_angle_bisector(I, D, I)
By internal_angle_bisector_definition_v0_r on I, D, I, J we get Line(D, J) == internal_angle_bisector(I, J, I)
By perpendicular_lines_draw_intersection on j, altitude(G, B, D) we get exists(line_intersection(j, altitude(G, B, D)))
By internal_angle_bisector_definition_v0_r on J, B, J, D we get Line(B, D) == internal_angle_bisector(J, D, J)
By perpendicular_lines_draw_intersection on Line(C, D), altitude(E, C, D) we get exists(line_intersection(Line(C, D), altitude(E, C, D)))
By internal_angle_bisector_definition_v0_r on B, D, B, I we get Line(D, I) == internal_angle_bisector(B, I, B)
By internal_angle_bisector_definition_v0_r on B, D, B, J we get Line(D, J) == internal_angle_bisector(B, J, B)
By internal_angle_bisector_definition_v0_r on D, I, D, B we get Line(B, I) == internal_angle_bisector(D, B, D)
By internal_angle_bisector_definition_v0_r on E, B, G, D we get Line(B, D) == internal_angle_bisector(E, D, G)
By reverse_direction on center(c), G we get 180 == direction(center(c), G) - direction(G, center(c)) mod 360
By reverse_direction on center(c), F we get 180 == direction(center(c), F) - direction(F, center(c)) mod 360
By reverse_direction on center(d), I we get 180 == direction(center(d), I) - direction(I, center(d)) mod 360
By internal_angle_bisector_definition_v0_r on D, B, D, J we get Line(B, J) == internal_angle_bisector(D, J, D)
By internal_angle_bisector_definition_v0_r on B, J, B, D we get Line(D, J) == internal_angle_bisector(B, D, B)
By internal_angle_bisector_definition_v0_r on J, D, J, B we get Line(B, D) == internal_angle_bisector(J, B, J)
By reverse_direction on center(d), F we get 180 == direction(center(d), F) - direction(F, center(d)) mod 360
By perpendicular_lines_draw_intersection on altitude(F, A, D), i we get exists(line_intersection(i, altitude(F, A, D)))
By reverse_direction on center(d), G we get 180 == direction(center(d), G) - direction(G, center(d)) mod 360
By altitude_definition on G, I, B, altitude(G, B, D) we get altitude(G, B, D) == altitude(G, B, I)
By concyclic_definition_1 on D, G, E, B we get Circle(B, E, G) == Circle(D, E, G)
By isosceles_triangle_properties on center(d), B, I we get distance(B, center(d)) == distance(I, center(d)), angle(B, I, center(d)) == angle(center(d), B, I) mod 360
By concyclic_definition_1 on C, E, F, D we get Circle(C, E, F) == Circle(D, E, F)
By concyclic_definition_1 on C, E, D, F we get Circle(C, D, E) == Circle(D, E, F)
By altitude_definition on G, B, J, altitude(G, B, D) we get altitude(G, B, D) == altitude(G, B, J)
By concyclic_definition_1 on G, A, D, F we get Circle(A, D, F) == Circle(A, D, G)
By isosceles_triangle_properties on center(d), F, I we get distance(F, center(d)) == distance(I, center(d)), angle(F, I, center(d)) == angle(center(d), F, I) mod 360
By concyclic_definition_1 on B, G, D, E we get Circle(B, D, G) == Circle(D, E, G)
By concyclic_definition_1 on G, B, D, E we get Circle(B, D, E) == Circle(B, D, G)
By concyclic_definition_1 on G, E, B, D we get Circle(B, D, E) == Circle(B, E, G)
By concyclic_definition_1 on E, F, D, C we get Circle(C, D, F) == Circle(D, E, F)
By altitude_definition on E, J, D, altitude(E, B, D) we get altitude(E, B, D) == altitude(E, D, J)
By concyclic_definition_1 on D, C, E, F we get Circle(C, D, E) == Circle(C, E, F)
By concyclic_definition_1 on E, G, B, D we get Circle(B, D, G) == Circle(B, E, G)
By concyclic_definition_1 on A, D, F, G we get Circle(A, D, F) == Circle(D, F, G)
By concyclic_definition_1 on G, D, E, B we get Circle(B, D, E) == Circle(D, E, G)
By concyclic_definition_1 on F, G, A, D we get Circle(A, D, G) == Circle(A, F, G)
By isosceles_triangle_properties on center(d), G, B we get distance(B, center(d)) == distance(G, center(d)), angle(G, B, center(d)) == angle(center(d), G, B) mod 360
By altitude_definition on E, I, B, altitude(E, B, D) we get altitude(E, B, D) == altitude(E, B, I)
By isosceles_triangle_properties on center(c), H, E we get distance(E, center(c)) == distance(H, center(c)), angle(H, E, center(c)) == angle(center(c), H, E) mod 360
By altitude_definition on E, I, D, altitude(E, B, D) we get altitude(E, B, D) == altitude(E, D, I)
By concyclic_definition_1 on D, F, C, E we get Circle(C, D, F) == Circle(C, E, F)
By isosceles_triangle_properties on center(d), F, B we get distance(B, center(d)) == distance(F, center(d)), angle(F, B, center(d)) == angle(center(d), F, B) mod 360
By concyclic_definition_1 on D, F, G, A we get Circle(A, F, G) == Circle(D, F, G)
By isosceles_triangle_properties on center(c), E, G we get distance(E, center(c)) == distance(G, center(c)), angle(E, G, center(c)) == angle(center(c), E, G) mod 360
By isosceles_triangle_properties on center(c), G, E we get distance(E, center(c)) == distance(G, center(c)), angle(G, E, center(c)) == angle(center(c), G, E) mod 360
By concyclic_definition_1 on A, D, G, F we get Circle(A, D, G) == Circle(D, F, G)
By altitude_definition on E, J, B, altitude(E, B, D) we get altitude(E, B, D) == altitude(E, B, J)
By isosceles_triangle_properties on center(d), G, F we get distance(F, center(d)) == distance(G, center(d)), angle(G, F, center(d)) == angle(center(d), G, F) mod 360
By isosceles_triangle_properties on center(c), G, H we get distance(G, center(c)) == distance(H, center(c)), angle(G, H, center(c)) == angle(center(c), G, H) mod 360
By altitude_definition on G, I, J, altitude(G, B, D) we get altitude(G, B, D) == altitude(G, I, J)
By altitude_definition on G, D, J, altitude(G, B, D) we get altitude(G, B, D) == altitude(G, D, J)
By isosceles_triangle_properties on center(c), E, H we get distance(E, center(c)) == distance(H, center(c)), angle(E, H, center(c)) == angle(center(c), E, H) mod 360
By concyclic_definition_1 on E, C, D, F we get Circle(C, D, E) == Circle(C, D, F)
By isosceles_triangle_properties on center(d), I, G we get distance(G, center(d)) == distance(I, center(d)), angle(I, G, center(d)) == angle(center(d), I, G) mod 360
By isosceles_triangle_properties on center(c), F, G we get distance(F, center(c)) == distance(G, center(c)), angle(F, G, center(c)) == angle(center(c), F, G) mod 360
By isosceles_triangle_properties on center(d), I, F we get distance(F, center(d)) == distance(I, center(d)), angle(I, F, center(d)) == angle(center(d), I, F) mod 360
By altitude_definition on E, I, J, altitude(E, B, D) we get altitude(E, B, D) == altitude(E, I, J)
By concyclic_definition_1 on G, A, F, D we get Circle(A, D, F) == Circle(A, F, G)
By isosceles_triangle_properties on center(d), I, B we get distance(B, center(d)) == distance(I, center(d)), angle(I, B, center(d)) == angle(center(d), I, B) mod 360
By altitude_definition on G, I, D, altitude(G, B, D) we get altitude(G, B, D) == altitude(G, D, I)
By isosceles_triangle_properties on center(d), B, G we get distance(B, center(d)) == distance(G, center(d)), angle(B, G, center(d)) == angle(center(d), B, G) mod 360
By isosceles_triangle_properties on center(c), E, F we get distance(E, center(c)) == distance(F, center(c)), angle(E, F, center(c)) == angle(center(c), E, F) mod 360
By isosceles_triangle_properties on center(c), H, G we get distance(G, center(c)) == distance(H, center(c)), angle(H, G, center(c)) == angle(center(c), H, G) mod 360
By isosceles_triangle_properties on center(d), F, G we get distance(F, center(d)) == distance(G, center(d)), angle(F, G, center(d)) == angle(center(d), F, G) mod 360
By isosceles_triangle_properties on center(c), H, F we get distance(F, center(c)) == distance(H, center(c)), angle(H, F, center(c)) == angle(center(c), H, F) mod 360
By isosceles_triangle_properties on center(c), F, E we get distance(E, center(c)) == distance(F, center(c)), angle(F, E, center(c)) == angle(center(c), F, E) mod 360
By isosceles_triangle_properties on center(d), G, I we get distance(G, center(d)) == distance(I, center(d)), angle(G, I, center(d)) == angle(center(d), G, I) mod 360
By isosceles_triangle_properties on center(c), G, F we get distance(F, center(c)) == distance(G, center(c)), angle(G, F, center(c)) == angle(center(c), G, F) mod 360
By isosceles_triangle_properties on center(d), B, F we get distance(B, center(d)) == distance(F, center(d)), angle(B, F, center(d)) == angle(center(d), B, F) mod 360
By isosceles_triangle_properties on center(c), F, H we get distance(F, center(c)) == distance(H, center(c)), angle(F, H, center(c)) == angle(center(c), F, H) mod 360
By anti_similar_triangle_basic_properties on D, A, F, D, A, G we get not_collinear(A, D, F), not_collinear(A, D, G), angle(D, A, F) == 0 - angle(D, A, G) mod 360, angle(A, F, D) == 0 - angle(A, G, D) mod 360, angle(F, D, A) == 0 - angle(G, D, A) mod 360, log(distance(A, D)) + log(distance(A, F)) == log(distance(A, D)) + log(distance(A, G)), log(distance(A, F)) + log(distance(D, G)) == log(distance(A, G)) + log(distance(D, F)), log(distance(D, F)) + log(distance(A, D)) == log(distance(D, G)) + log(distance(A, D))
By power_of_a_point_definition on J, H, G, c we get log(power_of_a_point(J, c)) == log(distance(H, J)) + log(distance(G, J))
By anti_similar_triangle_basic_properties on A, D, G, A, D, F we get not_collinear(A, D, G), not_collinear(A, D, F), angle(A, D, G) == 0 - angle(A, D, F) mod 360, angle(D, G, A) == 0 - angle(D, F, A) mod 360, angle(G, A, D) == 0 - angle(F, A, D) mod 360, log(distance(A, D)) + log(distance(D, F)) == log(distance(A, D)) + log(distance(D, G)), log(distance(D, F)) + log(distance(A, G)) == log(distance(D, G)) + log(distance(A, F)), log(distance(A, F)) + log(distance(A, D)) == log(distance(A, G)) + log(distance(A, D))
By power_of_a_point_definition on J, I, B, d we get log(power_of_a_point(J, d)) == log(distance(I, J)) + log(distance(B, J))
By power_of_a_point_definition on D, B, I, d we get log(power_of_a_point(D, d)) == log(distance(B, D)) + log(distance(D, I))
By anti_similar_triangle_basic_properties on D, B, E, D, B, G we get not_collinear(B, D, E), not_collinear(B, D, G), angle(D, B, E) == 0 - angle(D, B, G) mod 360, angle(B, E, D) == 0 - angle(B, G, D) mod 360, angle(E, D, B) == 0 - angle(G, D, B) mod 360, log(distance(B, D)) + log(distance(B, E)) == log(distance(B, D)) + log(distance(B, G)), log(distance(B, E)) + log(distance(D, G)) == log(distance(B, G)) + log(distance(D, E)), log(distance(D, E)) + log(distance(B, D)) == log(distance(D, G)) + log(distance(B, D))
By anti_similar_triangle_basic_properties on D, G, B, D, E, B we get not_collinear(B, D, G), not_collinear(B, D, E), angle(D, G, B) == 0 - angle(D, E, B) mod 360, angle(G, B, D) == 0 - angle(E, B, D) mod 360, angle(B, D, G) == 0 - angle(B, D, E) mod 360, log(distance(D, E)) + log(distance(B, G)) == log(distance(D, G)) + log(distance(B, E)), log(distance(B, E)) + log(distance(B, D)) == log(distance(B, G)) + log(distance(B, D)), log(distance(B, D)) + log(distance(D, E)) == log(distance(B, D)) + log(distance(D, G))
By angles_on_chord_v1 on F, D, A, G, Circle(A, D, F) we get angle(F, A, D) == angle(F, G, D) mod 360
By angles_on_chord_v2 on F, G, D, A, Circle(A, D, F) we get angle(F, D, G) == angle(F, A, G) + 180 mod 360
By angles_on_chord_v2 on F, E, C, D, Circle(C, D, E) we get angle(F, C, E) == angle(F, D, E) + 180 mod 360
By angles_on_chord_v2 on E, F, D, C, Circle(C, D, E) we get angle(E, D, F) == angle(E, C, F) + 180 mod 360
By angles_on_chord_v3 on G, E, B, D, Circle(B, D, E) we get angle(G, B, E) == angle(G, D, E) + 180 mod 360
By angles_on_chord_v3 on F, G, A, D, Circle(A, D, F) we get angle(F, A, G) == angle(F, D, G) + 180 mod 360
By angles_on_chord_v0 on B, E, D, G, Circle(B, D, E) we get angle(B, D, E) == angle(B, G, E) mod 360
By angles_on_chord_v3 on E, F, C, D, Circle(C, D, E) we get angle(E, C, F) == angle(E, D, F) + 180 mod 360
By angles_on_chord_v1 on F, C, E, D, Circle(C, D, E) we get angle(F, D, C) == angle(F, E, C) mod 360
By angles_on_chord_v1 on B, G, E, D, Circle(B, D, E) we get angle(B, D, G) == angle(B, E, G) mod 360
By angles_on_chord_v0 on G, D, F, A, Circle(A, D, F) we get angle(G, A, D) == angle(G, F, D) mod 360
By angles_on_chord_v1 on C, E, D, F, Circle(C, D, E) we get angle(C, D, E) == angle(C, F, E) mod 360
By angles_on_chord_v0 on G, B, D, E, Circle(B, D, E) we get angle(G, D, B) == angle(G, E, B) mod 360
By angles_on_chord_v1 on A, F, G, D, Circle(A, D, F) we get angle(A, D, F) == angle(A, G, F) mod 360
By angles_on_chord_v1 on D, F, E, C, Circle(C, D, E) we get angle(D, C, F) == angle(D, E, F) mod 360
By angles_on_chord_v2 on G, E, D, B, Circle(B, D, E) we get angle(G, D, E) == angle(G, B, E) + 180 mod 360
By angles_on_chord_v0 on E, D, B, G, Circle(B, D, E) we get angle(E, B, D) == angle(E, G, D) mod 360
By angles_on_chord_v1 on G, D, E, B, Circle(B, D, E) we get angle(G, B, D) == angle(G, E, D) mod 360
By angles_on_chord_v0 on E, C, F, D, Circle(C, D, E) we get angle(E, D, C) == angle(E, F, C) mod 360
By angles_on_chord_v1 on D, G, F, A, Circle(A, D, F) we get angle(D, A, G) == angle(D, F, G) mod 360
By angles_on_chord_v1 on G, A, F, D, Circle(A, D, F) we get angle(G, D, A) == angle(G, F, A) mod 360
By angles_on_chord_v0 on F, D, C, E, Circle(C, D, E) we get angle(F, C, D) == angle(F, E, D) mod 360
By angles_on_chord_v0 on D, F, A, G, Circle(A, D, F) we get angle(D, A, F) == angle(D, G, F) mod 360
By angles_on_chord_v0 on D, G, B, E, Circle(B, D, E) we get angle(D, B, G) == angle(D, E, G) mod 360
By angles_on_chord_v1 on E, B, D, G, Circle(B, D, E) we get angle(E, D, B) == angle(E, G, B) mod 360
By angles_on_chord_v1 on D, E, B, G, Circle(B, D, E) we get angle(D, B, E) == angle(D, G, E) mod 360
By angles_on_chord_v0 on F, A, D, G, Circle(A, D, F) we get angle(F, D, A) == angle(F, G, A) mod 360
By angles_on_chord_v2 on E, G, B, D, Circle(B, D, E) we get angle(E, B, G) == angle(E, D, G) + 180 mod 360
By angles_on_chord_v0 on A, G, D, F, Circle(A, D, F) we get angle(A, D, G) == angle(A, F, G) mod 360
By angles_on_chord_v0 on C, F, E, D, Circle(C, D, E) we get angle(C, D, F) == angle(C, E, F) mod 360
By angles_on_chord_v0 on D, E, F, C, Circle(C, D, E) we get angle(D, C, E) == angle(D, F, E) mod 360
By angles_on_chord_v3 on F, E, D, C, Circle(C, D, E) we get angle(F, D, E) == angle(F, C, E) + 180 mod 360
By chords_on_equal_angles_v0 on C, D, E, F, D, C, Circle(C, D, E) we get distance(C, E) == distance(C, F)
By angles_on_chord_v2 on G, F, A, D, Circle(A, D, F) we get angle(G, A, F) == angle(G, D, F) + 180 mod 360
By angles_on_chord_v3 on E, G, D, B, Circle(B, D, E) we get angle(E, D, G) == angle(E, B, G) + 180 mod 360
By angles_on_chord_v3 on G, F, D, A, Circle(A, D, F) we get angle(G, D, F) == angle(G, A, F) + 180 mod 360
By angles_on_chord_v1 on E, D, F, C, Circle(C, D, E) we get angle(E, C, D) == angle(E, F, D) mod 360
By perpendicular_line_definition on line_intersection(j, altitude(E, B, D)), j, altitude(E, B, D) we get j == perpendicular_line(line_intersection(j, altitude(E, B, D)), altitude(E, B, D))
By perpendicular_line_definition on line_intersection(j, altitude(E, B, D)), j, altitude(G, B, D) we get j == perpendicular_line(line_intersection(j, altitude(E, B, D)), altitude(G, B, D))
By perpendicular_line_definition on line_intersection(j, altitude(G, B, D)), altitude(G, B, D), j we get altitude(G, B, D) == perpendicular_line(line_intersection(j, altitude(G, B, D)), j)
By perpendicular_line_definition on line_intersection(j, altitude(E, B, D)), altitude(E, B, D), j we get altitude(E, B, D) == perpendicular_line(line_intersection(j, altitude(E, B, D)), j)
By perpendicular_line_definition on line_intersection(j, altitude(G, B, D)), j, altitude(G, B, D) we get j == perpendicular_line(line_intersection(j, altitude(G, B, D)), altitude(G, B, D))
By perpendicular_line_definition on line_intersection(Line(C, D), altitude(F, C, D)), Line(C, D), altitude(F, C, D) we get Line(C, D) == perpendicular_line(line_intersection(Line(C, D), altitude(F, C, D)), altitude(F, C, D))
By perpendicular_line_definition on line_intersection(Line(C, D), altitude(F, C, D)), altitude(F, C, D), Line(C, D) we get altitude(F, C, D) == perpendicular_line(line_intersection(Line(C, D), altitude(F, C, D)), Line(C, D))
By perpendicular_line_definition on line_intersection(Line(C, D), altitude(F, C, D)), Line(C, D), altitude(E, C, D) we get Line(C, D) == perpendicular_line(line_intersection(Line(C, D), altitude(F, C, D)), altitude(E, C, D))
By perpendicular_line_definition on line_intersection(Line(C, D), altitude(E, C, D)), altitude(E, C, D), Line(C, D) we get altitude(E, C, D) == perpendicular_line(line_intersection(Line(C, D), altitude(E, C, D)), Line(C, D))
By perpendicular_line_definition on line_intersection(i, altitude(G, A, D)), altitude(G, A, D), i we get altitude(G, A, D) == perpendicular_line(line_intersection(i, altitude(G, A, D)), i)
By perpendicular_line_definition on line_intersection(Line(C, D), altitude(E, C, D)), Line(C, D), altitude(E, C, D) we get Line(C, D) == perpendicular_line(line_intersection(Line(C, D), altitude(E, C, D)), altitude(E, C, D))
By perpendicular_line_definition on line_intersection(i, altitude(G, A, D)), i, altitude(G, A, D) we get i == perpendicular_line(line_intersection(i, altitude(G, A, D)), altitude(G, A, D))
By perpendicular_line_definition on line_intersection(j, altitude(G, B, D)), j, altitude(E, B, D) we get j == perpendicular_line(line_intersection(j, altitude(G, B, D)), altitude(E, B, D))
By perpendicular_line_definition on line_intersection(Line(C, D), altitude(E, C, D)), Line(C, D), altitude(F, C, D) we get Line(C, D) == perpendicular_line(line_intersection(Line(C, D), altitude(E, C, D)), altitude(F, C, D))
By perpendicular_line_definition on line_intersection(i, altitude(G, A, D)), i, altitude(F, A, D) we get i == perpendicular_line(line_intersection(i, altitude(G, A, D)), altitude(F, A, D))
By perpendicular_line_definition on line_intersection(i, altitude(F, A, D)), i, altitude(G, A, D) we get i == perpendicular_line(line_intersection(i, altitude(F, A, D)), altitude(G, A, D))
By perpendicular_line_definition on line_intersection(i, altitude(F, A, D)), i, altitude(F, A, D) we get i == perpendicular_line(line_intersection(i, altitude(F, A, D)), altitude(F, A, D))
By perpendicular_line_definition on line_intersection(i, altitude(F, A, D)), altitude(F, A, D), i we get altitude(F, A, D) == perpendicular_line(line_intersection(i, altitude(F, A, D)), i)
By circle_by_three_points_and_center on D, G, F, E we get D == center(Circle(E, F, G))
By parallel_line_definition on F, altitude(F, A, D), altitude(G, A, D) we get altitude(F, A, D) == parallel_line(F, altitude(G, A, D))
By parallel_line_definition on G, altitude(G, A, D), altitude(F, A, D) we get altitude(G, A, D) == parallel_line(G, altitude(F, A, D))
By parallel_line_definition on line_intersection(i, altitude(G, A, D)), altitude(G, A, D), altitude(F, A, D) we get altitude(G, A, D) == parallel_line(line_intersection(i, altitude(G, A, D)), altitude(F, A, D))
By parallel_line_definition on E, altitude(E, B, D), altitude(G, B, D) we get altitude(E, B, D) == parallel_line(E, altitude(G, B, D))
By parallel_line_definition on F, altitude(F, C, D), altitude(E, C, D) we get altitude(F, C, D) == parallel_line(F, altitude(E, C, D))
By parallel_line_definition on line_intersection(j, altitude(E, B, D)), altitude(E, B, D), altitude(G, B, D) we get altitude(E, B, D) == parallel_line(line_intersection(j, altitude(E, B, D)), altitude(G, B, D))
By parallel_line_definition on line_intersection(j, altitude(G, B, D)), altitude(G, B, D), altitude(E, B, D) we get altitude(G, B, D) == parallel_line(line_intersection(j, altitude(G, B, D)), altitude(E, B, D))
By parallel_line_definition on G, altitude(G, B, D), altitude(E, B, D) we get altitude(G, B, D) == parallel_line(G, altitude(E, B, D))
By parallel_line_definition on line_intersection(Line(C, D), altitude(F, C, D)), altitude(F, C, D), altitude(E, C, D) we get altitude(F, C, D) == parallel_line(line_intersection(Line(C, D), altitude(F, C, D)), altitude(E, C, D))
By parallel_line_definition on line_intersection(Line(C, D), altitude(E, C, D)), altitude(E, C, D), altitude(F, C, D) we get altitude(E, C, D) == parallel_line(line_intersection(Line(C, D), altitude(E, C, D)), altitude(F, C, D))
By parallel_line_definition on line_intersection(i, altitude(F, A, D)), altitude(F, A, D), altitude(G, A, D) we get altitude(F, A, D) == parallel_line(line_intersection(i, altitude(F, A, D)), altitude(G, A, D))
By parallel_line_definition on E, altitude(E, C, D), altitude(F, C, D) we get altitude(E, C, D) == parallel_line(E, altitude(F, C, D))
By in_imply_collinear on line_intersection(j, altitude(G, B, D)), I, B we get collinear(B, I, line_intersection(j, altitude(G, B, D)))
By in_imply_collinear on line_intersection(Line(C, D), altitude(E, C, D)), C, D we get collinear(C, D, line_intersection(Line(C, D), altitude(E, C, D)))
By in_imply_collinear on line_intersection(j, altitude(E, B, D)), J, I we get collinear(I, J, line_intersection(j, altitude(E, B, D)))
By divide_by_2_mod_180_v2 on B, D, C, A, D, F we get angle(B, D, C) == angle(A, D, F) + 180 mod 360
By in_imply_collinear on line_intersection(j, altitude(E, B, D)), D, B we get collinear(B, D, line_intersection(j, altitude(E, B, D)))
By in_imply_collinear on line_intersection(i, altitude(F, A, D)), D, A we get collinear(A, D, line_intersection(i, altitude(F, A, D)))
By in_imply_collinear on line_intersection(j, altitude(G, B, D)), I, D we get collinear(D, I, line_intersection(j, altitude(G, B, D)))
By in_imply_collinear on line_intersection(j, altitude(G, B, D)), D, B we get collinear(B, D, line_intersection(j, altitude(G, B, D)))
By divide_by_2_mod_180_v3 on B, D, A, C, D, F we get angle(B, D, A) == angle(C, D, F) + 180 mod 360
By divide_by_2_mod_180_v2 on A, D, G, C, D, J we get angle(A, D, G) == angle(C, D, J) + 180 mod 360
By sss_anti_congruence_v1 on E, F, D, F, E, D we get anti_congruent_triangles(D, E, F, D, F, E)
By divide_by_2_mod_180_v2 on A, D, B, F, D, C we get angle(A, D, B) == angle(F, D, C) + 180 mod 360
By in_imply_collinear on line_intersection(j, altitude(E, B, D)), B, I we get collinear(B, I, line_intersection(j, altitude(E, B, D)))
By sss_anti_congruence_v1 on D, G, E, D, E, G we get anti_congruent_triangles(D, E, G, D, G, E)
By divide_by_2_mod_180_v3 on J, D, A, C, D, F we get angle(J, D, A) == angle(C, D, F) + 180 mod 360
By in_imply_collinear on line_intersection(i, altitude(G, A, D)), A, D we get collinear(A, D, line_intersection(i, altitude(G, A, D)))
By isosceles_triangle_properties on D, F, E we get distance(D, E) == distance(D, F), angle(D, F, E) == angle(F, E, D) mod 360
By in_imply_collinear on line_intersection(j, altitude(E, B, D)), B, J we get collinear(B, J, line_intersection(j, altitude(E, B, D)))
By divide_by_2_mod_180_v2 on F, D, A, C, D, B we get angle(F, D, A) == angle(C, D, B) + 180 mod 360
By divide_by_2_mod_180_v1 on C, D, E, A, D, I we get angle(A, D, I) == angle(C, D, E) mod 360
By anti_congruence_from_anti_similar_triangles on C, D, F, C, D, E we get anti_congruent_triangles(C, D, E, C, D, F)
By divide_by_2_mod_180_v3 on F, D, C, A, D, J we get angle(F, D, C) == angle(A, D, J) + 180 mod 360
By divide_by_2_mod_180_v3 on C, D, E, A, D, B we get angle(C, D, E) == angle(A, D, B) + 180 mod 360
By sss_anti_congruence_v1 on G, B, E, E, B, G we get anti_congruent_triangles(B, E, G, B, G, E)
By divide_by_2_mod_180_v2 on A, D, G, C, D, B we get angle(A, D, G) == angle(C, D, B) + 180 mod 360
By in_imply_collinear on line_intersection(j, altitude(G, B, D)), B, J we get collinear(B, J, line_intersection(j, altitude(G, B, D)))
By divide_by_2_mod_180_v1 on A, D, F, I, D, C we get angle(A, D, F) == angle(I, D, C) mod 360
By divide_by_2_mod_180_v3 on C, D, J, A, D, G we get angle(C, D, J) == angle(A, D, G) + 180 mod 360
By divide_by_2_mod_180_v2 on J, D, C, G, D, A we get angle(J, D, C) == angle(G, D, A) + 180 mod 360
By divide_by_2_mod_180_v3 on J, D, A, E, D, C we get angle(J, D, A) == angle(E, D, C) + 180 mod 360
By sss_anti_congruence_v1 on D, G, E, D, E, G we get anti_congruent_triangles(D, E, G, D, G, E)
By sss_anti_congruence_v0 on E, G, D, G, E, D we get anti_congruent_triangles(D, E, G, D, G, E)
By in_imply_collinear on line_intersection(Line(C, D), altitude(F, C, D)), D, C we get collinear(C, D, line_intersection(Line(C, D), altitude(F, C, D)))
By in_imply_collinear on line_intersection(j, altitude(E, B, D)), D, J we get collinear(D, J, line_intersection(j, altitude(E, B, D)))
By in_imply_collinear on line_intersection(j, altitude(E, B, D)), D, I we get collinear(D, I, line_intersection(j, altitude(E, B, D)))
By sss_anti_congruence_v0 on F, G, A, G, F, A we get anti_congruent_triangles(A, F, G, A, G, F)
By in_imply_collinear on line_intersection(j, altitude(G, B, D)), I, J we get collinear(I, J, line_intersection(j, altitude(G, B, D)))
By divide_by_2_mod_180_v2 on A, D, J, F, D, C we get angle(A, D, J) == angle(F, D, C) + 180 mod 360
By anti_congruence_from_anti_similar_triangles on F, D, C, E, D, C we get anti_congruent_triangles(C, D, E, C, D, F)
By anti_congruence_from_anti_similar_triangles on D, F, C, D, E, C we get anti_congruent_triangles(C, D, E, C, D, F)
By divide_by_2_mod_180_v0 on C, D, I, A, D, G we get angle(A, D, G) == angle(C, D, I) mod 360
By sss_anti_congruence_v0 on D, F, E, D, E, F we get anti_congruent_triangles(D, E, F, D, F, E)
By in_imply_collinear on line_intersection(j, altitude(G, B, D)), J, D we get collinear(D, J, line_intersection(j, altitude(G, B, D)))
By sss_anti_congruence_v0 on D, F, E, D, E, F we get anti_congruent_triangles(D, E, F, D, F, E)
By divide_by_2_mod_180_v3 on A, D, F, B, D, C we get angle(A, D, F) == angle(B, D, C) + 180 mod 360
By line_containment_inequality on line_intersection(i, altitude(G, A, D)), J, i we get J != line_intersection(i, altitude(G, A, D))
By sss_anti_congruence_v0 on G, A, F, F, A, G we get anti_congruent_triangles(A, F, G, A, G, F)
By isosceles_triangle_properties on D, E, G we get distance(D, E) == distance(D, G), angle(D, E, G) == angle(E, G, D) mod 360
By divide_by_2_mod_180_v3 on C, D, B, A, D, G we get angle(C, D, B) == angle(A, D, G) + 180 mod 360
By line_containment_inequality on line_intersection(j, altitude(G, B, D)), A, j we get A != line_intersection(j, altitude(G, B, D))
By divide_by_2_mod_180_v1 on A, D, I, F, D, C we get angle(A, D, I) == angle(F, D, C) mod 360
By divide_by_2_mod_180_v3 on G, D, A, B, D, C we get angle(G, D, A) == angle(B, D, C) + 180 mod 360
By divide_by_2_mod_180_v2 on A, D, J, C, D, E we get angle(A, D, J) == angle(C, D, E) + 180 mod 360
By divide_by_2_mod_180_v2 on J, D, C, A, D, F we get angle(J, D, C) == angle(A, D, F) + 180 mod 360
By divide_by_2_mod_180_v2 on C, D, F, J, D, A we get angle(C, D, F) == angle(J, D, A) + 180 mod 360
By sss_anti_congruence_v1 on G, E, D, E, G, D we get anti_congruent_triangles(D, E, G, D, G, E)
By sss_anti_congruence_v0 on F, E, D, E, F, D we get anti_congruent_triangles(D, E, F, D, F, E)
By sss_anti_congruence_v1 on B, E, G, B, G, E we get anti_congruent_triangles(B, E, G, B, G, E)
By divide_by_2_mod_180_v0 on E, D, C, I, D, A we get angle(E, D, C) == angle(I, D, A) mod 360
By divide_by_2_mod_180_v0 on C, D, I, F, D, A we get angle(C, D, I) == angle(F, D, A) mod 360
By sss_anti_congruence_v1 on G, D, F, F, D, G we get anti_congruent_triangles(D, F, G, D, G, F)
By sss_anti_congruence_v0 on F, E, D, E, F, D we get anti_congruent_triangles(D, E, F, D, F, E)
By sss_anti_congruence_v0 on E, B, G, G, B, E we get anti_congruent_triangles(B, E, G, B, G, E)
By sss_anti_congruence_v1 on F, D, E, E, D, F we get anti_congruent_triangles(D, E, F, D, F, E)
By sss_anti_congruence_v1 on F, G, D, G, F, D we get anti_congruent_triangles(D, F, G, D, G, F)
By sas_anti_similarity on E, B, G, G, B, E we get anti_similar_triangles(B, E, G, B, G, E)
By divide_by_2_mod_180_v2 on E, D, C, J, D, A we get angle(E, D, C) == angle(J, D, A) + 180 mod 360
By isosceles_triangle_properties on D, G, F we get distance(D, F) == distance(D, G), angle(D, G, F) == angle(G, F, D) mod 360
By divide_by_2_mod_180_v3 on B, D, A, E, D, C we get angle(B, D, A) == angle(E, D, C) + 180 mod 360
By sss_anti_congruence_v1 on G, F, A, F, G, A we get anti_congruent_triangles(A, F, G, A, G, F)
By sss_anti_congruence_v1 on G, E, D, E, G, D we get anti_congruent_triangles(D, E, G, D, G, E)
By sss_anti_congruence_v0 on E, D, F, F, D, E we get anti_congruent_triangles(D, E, F, D, F, E)
By sss_anti_congruence_v0 on F, D, G, G, D, F we get anti_congruent_triangles(D, F, G, D, G, F)
By sss_anti_congruence_v0 on B, G, E, B, E, G we get anti_congruent_triangles(B, E, G, B, G, E)
By sss_anti_congruence_v1 on G, B, E, E, B, G we get anti_congruent_triangles(B, E, G, B, G, E)
By sss_anti_congruence_v1 on D, F, G, D, G, F we get anti_congruent_triangles(D, F, G, D, G, F)
By asa_anti_congruence on D, E, C, D, F, C we get anti_congruent_triangles(C, D, E, C, D, F)
By sss_anti_congruence_v0 on E, D, F, F, D, E we get anti_congruent_triangles(D, E, F, D, F, E)
By sss_anti_congruence_v0 on G, D, E, E, D, G we get anti_congruent_triangles(D, E, G, D, G, E)
By sss_anti_congruence_v1 on G, F, A, F, G, A we get anti_congruent_triangles(A, F, G, A, G, F)
By divide_by_2_mod_180_v2 on E, D, C, B, D, A we get angle(E, D, C) == angle(B, D, A) + 180 mod 360
By sss_anti_congruence_v0 on F, E, D, E, F, D we get anti_congruent_triangles(D, E, F, D, F, E)
By sss_anti_congruence_v1 on E, D, G, G, D, E we get anti_congruent_triangles(D, E, G, D, G, E)
By sas_anti_congruence on E, D, C, F, D, C we get anti_congruent_triangles(C, D, E, C, D, F)
By sss_anti_congruence_v1 on G, B, E, E, B, G we get anti_congruent_triangles(B, E, G, B, G, E)
By line_containment_inequality on line_intersection(j, altitude(E, B, D)), F, j we get F != line_intersection(j, altitude(E, B, D))
By sss_anti_congruence_v0 on G, F, D, F, G, D we get anti_congruent_triangles(D, F, G, D, G, F)
By divide_by_2_mod_180_v3 on C, D, B, F, D, A we get angle(C, D, B) == angle(F, D, A) + 180 mod 360
By divide_by_2_mod_180_v3 on F, D, C, A, D, B we get angle(F, D, C) == angle(A, D, B) + 180 mod 360
By sss_anti_congruence_v0 on D, F, E, D, E, F we get anti_congruent_triangles(D, E, F, D, F, E)
By sss_anti_congruence_v0 on A, F, G, A, G, F we get anti_congruent_triangles(A, F, G, A, G, F)
By sss_anti_congruence_v1 on D, G, E, D, E, G we get anti_congruent_triangles(D, E, G, D, G, E)
By line_containment_inequality on line_intersection(i, altitude(G, A, D)), F, i we get F != line_intersection(i, altitude(G, A, D))
By anti_congruence_from_anti_similar_triangles on C, D, E, C, D, F we get anti_congruent_triangles(C, D, E, C, D, F)
By sss_anti_congruence_v1 on E, G, B, G, E, B we get anti_congruent_triangles(B, E, G, B, G, E)
By divide_by_2_mod_180_v2 on F, D, A, C, D, J we get angle(F, D, A) == angle(C, D, J) + 180 mod 360
By divide_by_2_mod_180_v3 on C, D, E, A, D, J we get angle(C, D, E) == angle(A, D, J) + 180 mod 360
By isosceles_triangle_properties on D, F, G we get distance(D, F) == distance(D, G), angle(D, F, G) == angle(F, G, D) mod 360
By sss_anti_congruence_v1 on F, G, D, G, F, D we get anti_congruent_triangles(D, F, G, D, G, F)
By divide_by_2_mod_180_v3 on G, D, A, J, D, C we get angle(G, D, A) == angle(J, D, C) + 180 mod 360
By sss_anti_congruence_v0 on E, D, F, F, D, E we get anti_congruent_triangles(D, E, F, D, F, E)
By anti_congruence_from_anti_similar_triangles on D, E, C, D, F, C we get anti_congruent_triangles(C, D, E, C, D, F)
By sss_anti_congruence_v0 on F, D, G, G, D, F we get anti_congruent_triangles(D, F, G, D, G, F)
By divide_by_2_mod_180_v0 on I, D, A, C, D, F we get angle(C, D, F) == angle(I, D, A) mod 360
By sss_anti_congruence_v1 on D, E, F, D, F, E we get anti_congruent_triangles(D, E, F, D, F, E)
By sss_anti_congruence_v0 on F, G, A, G, F, A we get anti_congruent_triangles(A, F, G, A, G, F)
By line_circle_intersection_has_at_most_two_points_0 on A, G, B, Circle(A, D, F) we get B not in Circle(A, D, F)
By sss_anti_congruence_v1 on D, F, G, D, G, F we get anti_congruent_triangles(D, F, G, D, G, F)
By line_circle_intersection_has_at_most_two_points_0 on E, B, C, Circle(B, D, E) we get C not in Circle(B, D, E)
By sss_anti_congruence_v0 on D, E, G, D, G, E we get anti_congruent_triangles(D, E, G, D, G, E)
By sss_anti_congruence_v0 on G, E, B, E, G, B we get anti_congruent_triangles(B, E, G, B, G, E)
By line_containment_inequality on line_intersection(j, altitude(E, B, D)), G, j we get G != line_intersection(j, altitude(E, B, D))
By sss_anti_congruence_v1 on F, G, D, G, F, D we get anti_congruent_triangles(D, F, G, D, G, F)
By sss_anti_congruence_v1 on G, B, E, E, B, G we get anti_congruent_triangles(B, E, G, B, G, E)
By sss_anti_congruence_v0 on F, D, G, G, D, F we get anti_congruent_triangles(D, F, G, D, G, F)
By sss_anti_congruence_v1 on D, E, F, D, F, E we get anti_congruent_triangles(D, E, F, D, F, E)
By sss_anti_congruence_v1 on E, F, D, F, E, D we get anti_congruent_triangles(D, E, F, D, F, E)
By sss_anti_congruence_v1 on F, D, E, E, D, F we get anti_congruent_triangles(D, E, F, D, F, E)
By sss_anti_congruence_v0 on F, E, D, E, F, D we get anti_congruent_triangles(D, E, F, D, F, E)
By line_containment_inequality on line_intersection(i, altitude(F, A, D)), B, i we get B != line_intersection(i, altitude(F, A, D))
By sss_anti_congruence_v1 on G, E, D, E, G, D we get anti_congruent_triangles(D, E, G, D, G, E)
By sas_anti_congruence on C, D, F, C, D, E we get anti_congruent_triangles(C, D, E, C, D, F)
By sss_anti_congruence_v0 on G, A, F, F, A, G we get anti_congruent_triangles(A, F, G, A, G, F)
By sss_anti_congruence_v1 on E, F, D, F, E, D we get anti_congruent_triangles(D, E, F, D, F, E)
By sss_anti_congruence_v1 on E, G, B, G, E, B we get anti_congruent_triangles(B, E, G, B, G, E)
By sss_anti_congruence_v1 on E, G, B, G, E, B we get anti_congruent_triangles(B, E, G, B, G, E)
By divide_by_2_mod_180_v1 on G, D, A, I, D, C we get angle(G, D, A) == angle(I, D, C) mod 360
By line_containment_inequality on line_intersection(Line(C, D), altitude(E, C, D)), H, Line(C, D) we get H != line_intersection(Line(C, D), altitude(E, C, D))
By asa_anti_congruence on D, C, E, D, C, F we get anti_congruent_triangles(C, D, E, C, D, F)
By divide_by_2_mod_180_v2 on A, D, B, C, D, E we get angle(A, D, B) == angle(C, D, E) + 180 mod 360
By sss_anti_congruence_v1 on D, F, G, D, G, F we get anti_congruent_triangles(D, F, G, D, G, F)
By divide_by_2_mod_180_v2 on C, D, F, B, D, A we get angle(C, D, F) == angle(B, D, A) + 180 mod 360
By sss_anti_congruence_v0 on G, D, E, E, D, G we get anti_congruent_triangles(D, E, G, D, G, E)
By sss_anti_congruence_v0 on G, F, D, F, G, D we get anti_congruent_triangles(D, F, G, D, G, F)
By line_containment_inequality on line_intersection(i, altitude(F, A, D)), J, i we get J != line_intersection(i, altitude(F, A, D))
By sas_anti_congruence on C, D, E, C, D, F we get anti_congruent_triangles(C, D, E, C, D, F)
By sss_anti_congruence_v0 on G, A, F, F, A, G we get anti_congruent_triangles(A, F, G, A, G, F)
By sss_anti_congruence_v0 on E, B, G, G, B, E we get anti_congruent_triangles(B, E, G, B, G, E)
By sss_anti_congruence_v0 on G, E, B, E, G, B we get anti_congruent_triangles(B, E, G, B, G, E)
By sss_anti_congruence_v0 on D, E, G, D, G, E we get anti_congruent_triangles(D, E, G, D, G, E)
By asa_anti_congruence on D, F, C, D, E, C we get anti_congruent_triangles(C, D, E, C, D, F)
By line_containment_inequality on line_intersection(i, altitude(G, A, D)), C, i we get C != line_intersection(i, altitude(G, A, D))
By sss_anti_congruence_v1 on F, D, E, E, D, F we get anti_congruent_triangles(D, E, F, D, F, E)
By divide_by_2_mod_180_v2 on B, D, C, G, D, A we get angle(B, D, C) == angle(G, D, A) + 180 mod 360
By sss_anti_congruence_v0 on G, E, B, E, G, B we get anti_congruent_triangles(B, E, G, B, G, E)
By divide_by_2_mod_180_v3 on C, D, J, F, D, A we get angle(C, D, J) == angle(F, D, A) + 180 mod 360
By sss_anti_congruence_v1 on B, E, G, B, G, E we get anti_congruent_triangles(B, E, G, B, G, E)
By sss_anti_congruence_v0 on E, D, F, F, D, E we get anti_congruent_triangles(D, E, F, D, F, E)
By sss_anti_congruence_v1 on E, G, B, G, E, B we get anti_congruent_triangles(B, E, G, B, G, E)
By sss_anti_congruence_v1 on G, F, A, F, G, A we get anti_congruent_triangles(A, F, G, A, G, F)
By sss_anti_congruence_v1 on F, G, D, G, F, D we get anti_congruent_triangles(D, F, G, D, G, F)
By sss_anti_congruence_v1 on E, D, G, G, D, E we get anti_congruent_triangles(D, E, G, D, G, E)
By sss_anti_congruence_v1 on F, A, G, G, A, F we get anti_congruent_triangles(A, F, G, A, G, F)
By line_containment_inequality on line_intersection(Line(C, D), altitude(E, C, D)), J, Line(C, D) we get J != line_intersection(Line(C, D), altitude(E, C, D))
By sss_anti_congruence_v1 on E, F, D, F, E, D we get anti_congruent_triangles(D, E, F, D, F, E)
By sss_anti_congruence_v0 on E, B, G, G, B, E we get anti_congruent_triangles(B, E, G, B, G, E)
By anti_congruence_from_anti_similar_triangles on D, C, F, D, C, E we get anti_congruent_triangles(C, D, E, C, D, F)
By sss_anti_congruence_v0 on B, G, E, B, E, G we get anti_congruent_triangles(B, E, G, B, G, E)
By sss_anti_congruence_v0 on G, D, E, E, D, G we get anti_congruent_triangles(D, E, G, D, G, E)
By sss_anti_congruence_v1 on G, E, D, E, G, D we get anti_congruent_triangles(D, E, G, D, G, E)
By asa_anti_congruence on C, D, E, C, D, F we get anti_congruent_triangles(C, D, E, C, D, F)
By sss_anti_congruence_v0 on G, A, F, F, A, G we get anti_congruent_triangles(A, F, G, A, G, F)
By sss_anti_congruence_v0 on F, D, G, G, D, F we get anti_congruent_triangles(D, F, G, D, G, F)
By sss_anti_congruence_v0 on F, E, D, E, F, D we get anti_congruent_triangles(D, E, F, D, F, E)
By sss_anti_congruence_v1 on E, D, G, G, D, E we get anti_congruent_triangles(D, E, G, D, G, E)
By sss_anti_congruence_v0 on D, F, E, D, E, F we get anti_congruent_triangles(D, E, F, D, F, E)
By sss_anti_congruence_v1 on A, G, F, A, F, G we get anti_congruent_triangles(A, F, G, A, G, F)
By sss_anti_congruence_v1 on E, G, B, G, E, B we get anti_congruent_triangles(B, E, G, B, G, E)
By sss_anti_congruence_v0 on E, G, D, G, E, D we get anti_congruent_triangles(D, E, G, D, G, E)
By isosceles_triangle_properties on D, E, F we get distance(D, E) == distance(D, F), angle(D, E, F) == angle(E, F, D) mod 360
By sss_anti_congruence_v0 on E, D, F, F, D, E we get anti_congruent_triangles(D, E, F, D, F, E)
By sas_anti_similarity on G, A, F, F, A, G we get anti_similar_triangles(A, F, G, A, G, F)
By sss_anti_congruence_v1 on G, F, A, F, G, A we get anti_congruent_triangles(A, F, G, A, G, F)
By sss_anti_congruence_v1 on D, G, E, D, E, G we get anti_congruent_triangles(D, E, G, D, G, E)
By sss_anti_congruence_v1 on E, F, D, F, E, D we get anti_congruent_triangles(D, E, F, D, F, E)
By sss_anti_congruence_v0 on D, G, F, D, F, G we get anti_congruent_triangles(D, F, G, D, G, F)
By sss_anti_congruence_v1 on G, E, D, E, G, D we get anti_congruent_triangles(D, E, G, D, G, E)
By sss_anti_congruence_v0 on D, E, G, D, G, E we get anti_congruent_triangles(D, E, G, D, G, E)
By sss_anti_congruence_v0 on E, G, D, G, E, D we get anti_congruent_triangles(D, E, G, D, G, E)
By sas_anti_congruence on F, A, G, G, A, F we get anti_congruent_triangles(A, F, G, A, G, F)
By sss_anti_congruence_v1 on F, A, G, G, A, F we get anti_congruent_triangles(A, F, G, A, G, F)
By divide_by_2_mod_180_v3 on A, D, F, J, D, C we get angle(A, D, F) == angle(J, D, C) + 180 mod 360
By sss_anti_congruence_v0 on F, D, G, G, D, F we get anti_congruent_triangles(D, F, G, D, G, F)
By line_containment_inequality on line_intersection(i, altitude(F, A, D)), F, i we get F != line_intersection(i, altitude(F, A, D))
By line_containment_inequality on line_intersection(Line(C, D), altitude(E, C, D)), G, Line(C, D) we get G != line_intersection(Line(C, D), altitude(E, C, D))
By sss_anti_congruence_v1 on G, B, E, E, B, G we get anti_congruent_triangles(B, E, G, B, G, E)
By sss_anti_congruence_v1 on A, G, F, A, F, G we get anti_congruent_triangles(A, F, G, A, G, F)
By sas_anti_congruence on F, D, C, E, D, C we get anti_congruent_triangles(C, D, E, C, D, F)
By sss_anti_congruence_v0 on B, G, E, B, E, G we get anti_congruent_triangles(B, E, G, B, G, E)
By sss_anti_congruence_v0 on G, F, D, F, G, D we get anti_congruent_triangles(D, F, G, D, G, F)
By asa_anti_congruence on C, D, F, C, D, E we get anti_congruent_triangles(C, D, E, C, D, F)
By sss_anti_congruence_v0 on G, F, D, F, G, D we get anti_congruent_triangles(D, F, G, D, G, F)
By sss_anti_congruence_v1 on D, F, G, D, G, F we get anti_congruent_triangles(D, F, G, D, G, F)
By sss_anti_congruence_v0 on G, D, E, E, D, G we get anti_congruent_triangles(D, E, G, D, G, E)
By sss_anti_congruence_v0 on E, B, G, G, B, E we get anti_congruent_triangles(B, E, G, B, G, E)
By sss_anti_congruence_v1 on D, E, F, D, F, E we get anti_congruent_triangles(D, E, F, D, F, E)
By sss_anti_congruence_v1 on G, D, F, F, D, G we get anti_congruent_triangles(D, F, G, D, G, F)
By sss_anti_congruence_v0 on A, F, G, A, G, F we get anti_congruent_triangles(A, F, G, A, G, F)
By sss_anti_congruence_v1 on B, E, G, B, G, E we get anti_congruent_triangles(B, E, G, B, G, E)
By line_containment_inequality on line_intersection(Line(C, D), altitude(E, C, D)), I, Line(C, D) we get I != line_intersection(Line(C, D), altitude(E, C, D))
By sss_anti_congruence_v0 on B, G, E, B, E, G we get anti_congruent_triangles(B, E, G, B, G, E)
By sss_anti_congruence_v0 on A, F, G, A, G, F we get anti_congruent_triangles(A, F, G, A, G, F)
By sss_anti_congruence_v0 on E, G, D, G, E, D we get anti_congruent_triangles(D, E, G, D, G, E)
By sss_anti_congruence_v0 on D, G, F, D, F, G we get anti_congruent_triangles(D, F, G, D, G, F)
By sss_anti_congruence_v0 on D, E, G, D, G, E we get anti_congruent_triangles(D, E, G, D, G, E)
By isosceles_triangle_properties on A, F, G we get distance(A, F) == distance(A, G), angle(A, F, G) == angle(F, G, A) mod 360
By asa_anti_congruence on E, D, C, F, D, C we get anti_congruent_triangles(C, D, E, C, D, F)
By sas_anti_congruence on G, B, E, E, B, G we get anti_congruent_triangles(B, E, G, B, G, E)
By sas_anti_congruence on G, A, F, F, A, G we get anti_congruent_triangles(A, F, G, A, G, F)
By sss_anti_congruence_v0 on B, G, E, B, E, G we get anti_congruent_triangles(B, E, G, B, G, E)
By sas_anti_similarity on G, B, E, E, B, G we get anti_similar_triangles(B, E, G, B, G, E)
By sss_anti_congruence_v0 on A, F, G, A, G, F we get anti_congruent_triangles(A, F, G, A, G, F)
By sss_anti_congruence_v1 on G, D, F, F, D, G we get anti_congruent_triangles(D, F, G, D, G, F)
By sss_anti_congruence_v1 on D, F, G, D, G, F we get anti_congruent_triangles(D, F, G, D, G, F)
By sss_anti_congruence_v0 on G, E, B, E, G, B we get anti_congruent_triangles(B, E, G, B, G, E)
By sss_anti_congruence_v1 on G, F, A, F, G, A we get anti_congruent_triangles(A, F, G, A, G, F)
By sas_anti_similarity on F, A, G, G, A, F we get anti_similar_triangles(A, F, G, A, G, F)
By asa_anti_congruence on F, D, C, E, D, C we get anti_congruent_triangles(C, D, E, C, D, F)
By anti_congruence_from_anti_similar_triangles on E, D, C, F, D, C we get anti_congruent_triangles(C, D, E, C, D, F)
By sss_anti_congruence_v0 on D, G, F, D, F, G we get anti_congruent_triangles(D, F, G, D, G, F)
By sss_anti_congruence_v0 on F, G, A, G, F, A we get anti_congruent_triangles(A, F, G, A, G, F)
By sss_anti_congruence_v1 on B, E, G, B, G, E we get anti_congruent_triangles(B, E, G, B, G, E)
By sas_anti_congruence on E, B, G, G, B, E we get anti_congruent_triangles(B, E, G, B, G, E)
By sss_anti_congruence_v0 on D, E, G, D, G, E we get anti_congruent_triangles(D, E, G, D, G, E)
By sss_anti_congruence_v1 on F, G, D, G, F, D we get anti_congruent_triangles(D, F, G, D, G, F)
By sss_anti_congruence_v0 on F, G, A, G, F, A we get anti_congruent_triangles(A, F, G, A, G, F)
By sss_anti_congruence_v0 on D, G, F, D, F, G we get anti_congruent_triangles(D, F, G, D, G, F)
By sss_anti_congruence_v0 on F, G, A, G, F, A we get anti_congruent_triangles(A, F, G, A, G, F)
By sss_anti_congruence_v1 on G, D, F, F, D, G we get anti_congruent_triangles(D, F, G, D, G, F)
By sss_anti_congruence_v0 on D, G, F, D, F, G we get anti_congruent_triangles(D, F, G, D, G, F)
By sss_anti_congruence_v0 on E, B, G, G, B, E we get anti_congruent_triangles(B, E, G, B, G, E)
By sss_anti_congruence_v1 on D, E, F, D, F, E we get anti_congruent_triangles(D, E, F, D, F, E)
By sss_anti_congruence_v1 on F, A, G, G, A, F we get anti_congruent_triangles(A, F, G, A, G, F)
By sss_anti_congruence_v1 on F, A, G, G, A, F we get anti_congruent_triangles(A, F, G, A, G, F)
By sss_anti_congruence_v0 on E, G, D, G, E, D we get anti_congruent_triangles(D, E, G, D, G, E)
By sss_anti_congruence_v1 on B, E, G, B, G, E we get anti_congruent_triangles(B, E, G, B, G, E)
By isosceles_triangle_properties on B, G, E we get distance(B, E) == distance(B, G), angle(B, G, E) == angle(G, E, B) mod 360
By line_containment_inequality on line_intersection(j, altitude(E, B, D)), C, j we get C != line_intersection(j, altitude(E, B, D))
By sss_anti_congruence_v1 on D, E, F, D, F, E we get anti_congruent_triangles(D, E, F, D, F, E)
By isosceles_triangle_properties on D, G, E we get distance(D, E) == distance(D, G), angle(D, G, E) == angle(G, E, D) mod 360
By asa_anti_congruence on D, C, F, D, C, E we get anti_congruent_triangles(C, D, E, C, D, F)
By sss_anti_congruence_v0 on G, D, E, E, D, G we get anti_congruent_triangles(D, E, G, D, G, E)
By sss_anti_congruence_v1 on D, G, E, D, E, G we get anti_congruent_triangles(D, E, G, D, G, E)
By sss_anti_congruence_v1 on F, D, E, E, D, F we get anti_congruent_triangles(D, E, F, D, F, E)
By sss_anti_congruence_v0 on G, A, F, F, A, G we get anti_congruent_triangles(A, F, G, A, G, F)
By sss_anti_congruence_v1 on E, D, G, G, D, E we get anti_congruent_triangles(D, E, G, D, G, E)
By sss_anti_congruence_v0 on G, E, B, E, G, B we get anti_congruent_triangles(B, E, G, B, G, E)
By sss_anti_congruence_v1 on E, D, G, G, D, E we get anti_congruent_triangles(D, E, G, D, G, E)
By anti_congruence_from_anti_similar_triangles on D, C, E, D, C, F we get anti_congruent_triangles(C, D, E, C, D, F)
By sss_anti_congruence_v1 on A, G, F, A, F, G we get anti_congruent_triangles(A, F, G, A, G, F)
By sss_anti_congruence_v1 on A, G, F, A, F, G we get anti_congruent_triangles(A, F, G, A, G, F)
By isosceles_triangle_properties on A, G, F we get distance(A, F) == distance(A, G), angle(A, G, F) == angle(G, F, A) mod 360
By sss_anti_congruence_v1 on F, D, E, E, D, F we get anti_congruent_triangles(D, E, F, D, F, E)
By sss_anti_congruence_v1 on A, G, F, A, F, G we get anti_congruent_triangles(A, F, G, A, G, F)
By sss_anti_congruence_v0 on D, F, E, D, E, F we get anti_congruent_triangles(D, E, F, D, F, E)
By isosceles_triangle_properties on B, E, G we get distance(B, E) == distance(B, G), angle(B, E, G) == angle(E, G, B) mod 360
By sss_anti_congruence_v1 on F, A, G, G, A, F we get anti_congruent_triangles(A, F, G, A, G, F)
By sss_anti_congruence_v0 on A, F, G, A, G, F we get anti_congruent_triangles(A, F, G, A, G, F)
By sss_anti_congruence_v0 on G, F, D, F, G, D we get anti_congruent_triangles(D, F, G, D, G, F)
By sss_anti_congruence_v1 on G, D, F, F, D, G we get anti_congruent_triangles(D, F, G, D, G, F)
By line_containment_inequality on line_intersection(i, altitude(G, A, D)), H, i we get H != line_intersection(i, altitude(G, A, D))
By line_containment_inequality on line_intersection(Line(C, D), altitude(E, C, D)), B, Line(C, D) we get B != line_intersection(Line(C, D), altitude(E, C, D))
By line_containment_inequality on line_intersection(i, altitude(F, A, D)), I, i we get I != line_intersection(i, altitude(F, A, D))
By line_containment_inequality on line_intersection(j, altitude(G, B, D)), F, j we get F != line_intersection(j, altitude(G, B, D))
By line_containment_inequality on line_intersection(i, altitude(G, A, D)), B, i we get B != line_intersection(i, altitude(G, A, D))
By line_containment_inequality on line_intersection(j, altitude(G, B, D)), G, j we get G != line_intersection(j, altitude(G, B, D))
By line_circle_intersection_has_at_most_two_points_0 on B, G, A, Circle(B, D, E) we get A not in Circle(B, D, E)
By line_containment_inequality on line_intersection(Line(C, D), altitude(F, C, D)), I, Line(C, D) we get I != line_intersection(Line(C, D), altitude(F, C, D))
By line_containment_inequality on line_intersection(Line(C, D), altitude(F, C, D)), B, Line(C, D) we get B != line_intersection(Line(C, D), altitude(F, C, D))
By line_circle_intersection_has_at_most_two_points_0 on B, D, I, Circle(B, D, E) we get I not in Circle(B, D, E)
By line_containment_inequality on line_intersection(j, altitude(E, B, D)), A, j we get A != line_intersection(j, altitude(E, B, D))
By line_containment_inequality on line_intersection(Line(C, D), altitude(F, C, D)), J, Line(C, D) we get J != line_intersection(Line(C, D), altitude(F, C, D))
By line_circle_intersection_has_at_most_two_points_0 on D, B, J, Circle(B, D, E) we get J not in Circle(B, D, E)
By line_circle_intersection_has_at_most_two_points_0 on A, F, C, Circle(A, D, F) we get C not in Circle(A, D, F)
By line_containment_inequality on line_intersection(Line(C, D), altitude(F, C, D)), F, Line(C, D) we get F != line_intersection(Line(C, D), altitude(F, C, D))
By line_containment_inequality on line_intersection(i, altitude(F, A, D)), E, i we get E != line_intersection(i, altitude(F, A, D))
By line_containment_inequality on line_intersection(i, altitude(F, A, D)), G, i we get G != line_intersection(i, altitude(F, A, D))
By line_containment_inequality on line_intersection(i, altitude(F, A, D)), C, i we get C != line_intersection(i, altitude(F, A, D))
By line_containment_inequality on line_intersection(i, altitude(G, A, D)), G, i we get G != line_intersection(i, altitude(G, A, D))
By line_containment_inequality on line_intersection(Line(C, D), altitude(E, C, D)), E, Line(C, D) we get E != line_intersection(Line(C, D), altitude(E, C, D))
By line_containment_inequality on line_intersection(j, altitude(E, B, D)), E, j we get E != line_intersection(j, altitude(E, B, D))
By line_containment_inequality on line_intersection(Line(C, D), altitude(F, C, D)), A, Line(C, D) we get A != line_intersection(Line(C, D), altitude(F, C, D))
By line_containment_inequality on line_intersection(j, altitude(G, B, D)), C, j we get C != line_intersection(j, altitude(G, B, D))
By line_containment_inequality on line_intersection(j, altitude(G, B, D)), E, j we get E != line_intersection(j, altitude(G, B, D))
By line_containment_inequality on line_intersection(Line(C, D), altitude(F, C, D)), G, Line(C, D) we get G != line_intersection(Line(C, D), altitude(F, C, D))
By line_containment_inequality on line_intersection(j, altitude(G, B, D)), H, j we get H != line_intersection(j, altitude(G, B, D))
By line_circle_intersection_has_at_most_two_points_0 on F, C, A, Circle(C, D, E) we get A not in Circle(C, D, E)
By line_containment_inequality on line_intersection(Line(C, D), altitude(E, C, D)), F, Line(C, D) we get F != line_intersection(Line(C, D), altitude(E, C, D))
By line_containment_inequality on line_intersection(Line(C, D), altitude(E, C, D)), A, Line(C, D) we get A != line_intersection(Line(C, D), altitude(E, C, D))
By line_circle_intersection_has_at_most_two_points_0 on E, C, B, Circle(C, D, E) we get B not in Circle(C, D, E)
By line_containment_inequality on line_intersection(j, altitude(E, B, D)), H, j we get H != line_intersection(j, altitude(E, B, D))
By line_containment_inequality on line_intersection(i, altitude(G, A, D)), E, i we get E != line_intersection(i, altitude(G, A, D))
By line_containment_inequality on line_intersection(i, altitude(F, A, D)), H, i we get H != line_intersection(i, altitude(F, A, D))
By line_containment_inequality on line_intersection(i, altitude(G, A, D)), I, i we get I != line_intersection(i, altitude(G, A, D))
By line_containment_inequality on line_intersection(Line(C, D), altitude(F, C, D)), E, Line(C, D) we get E != line_intersection(Line(C, D), altitude(F, C, D))
By line_containment_inequality on line_intersection(Line(C, D), altitude(F, C, D)), H, Line(C, D) we get H != line_intersection(Line(C, D), altitude(F, C, D))
By power_of_a_point_in_circle on F, Circle(A, D, F) we get 0 == power_of_a_point(F, Circle(A, D, F))
By internal_angle_bisector_definition_v0_r on F, C, E, D we get Line(C, D) == internal_angle_bisector(E, D, F)
By power_of_a_point_in_circle on F, Circle(C, D, E) we get 0 == power_of_a_point(F, Circle(C, D, E))
By power_of_a_point_on_circle on C, Circle(C, D, E) we get 0 == power_of_a_point(C, Circle(C, D, E))
By power_of_a_point_in_circle on D, Circle(B, D, E) we get 0 == power_of_a_point(D, Circle(B, D, E))
By power_of_a_point_in_circle on A, Circle(A, D, F) we get 0 == power_of_a_point(A, Circle(A, D, F))
By power_of_a_point_in_circle on B, Circle(B, D, E) we get 0 == power_of_a_point(B, Circle(B, D, E))
By power_of_a_point_in_circle on G, Circle(B, D, E) we get 0 == power_of_a_point(G, Circle(B, D, E))
By power_of_a_point_in_circle on E, Circle(C, D, E) we get 0 == power_of_a_point(E, Circle(C, D, E))
By power_of_a_point_in_circle on D, Circle(A, D, F) we get 0 == power_of_a_point(D, Circle(A, D, F))
By power_of_a_point_in_circle on G, Circle(A, D, F) we get 0 == power_of_a_point(G, Circle(A, D, F))
By power_of_a_point_in_circle on E, Circle(B, D, E) we get 0 == power_of_a_point(E, Circle(B, D, E))
By power_of_a_point_on_circle on D, Circle(C, D, E) we get 0 == power_of_a_point(D, Circle(C, D, E))
By sas_anti_congruence on E, B, J, G, B, J we get anti_congruent_triangles(B, E, J, B, G, J)
By sas_anti_similarity on E, B, J, G, B, J we get anti_similar_triangles(B, E, J, B, G, J)
By sas_anti_similarity on E, D, I, G, D, I we get anti_similar_triangles(D, E, I, D, G, I)
By sas_anti_congruence on G, D, I, E, D, I we get anti_congruent_triangles(D, E, I, D, G, I)
By sas_anti_congruence on E, B, I, G, B, I we get anti_congruent_triangles(B, E, I, B, G, I)
By sas_anti_congruence on I, B, E, I, B, G we get anti_congruent_triangles(B, E, I, B, G, I)
By sas_anti_similarity on J, B, E, J, B, G we get anti_similar_triangles(B, E, J, B, G, J)
By sas_anti_similarity on I, D, E, I, D, G we get anti_similar_triangles(D, E, I, D, G, I)
By sas_anti_congruence on G, B, I, E, B, I we get anti_congruent_triangles(B, E, I, B, G, I)
By sas_anti_similarity on G, D, I, E, D, I we get anti_similar_triangles(D, E, I, D, G, I)
By sas_anti_similarity on G, B, J, E, B, J we get anti_similar_triangles(B, E, J, B, G, J)
By sas_anti_congruence on E, D, J, G, D, J we get anti_congruent_triangles(D, E, J, D, G, J)
By sas_anti_congruence on J, B, G, J, B, E we get anti_congruent_triangles(B, E, J, B, G, J)
By sas_anti_congruence on G, B, J, E, B, J we get anti_congruent_triangles(B, E, J, B, G, J)
By sas_anti_congruence on G, D, J, E, D, J we get anti_congruent_triangles(D, E, J, D, G, J)
By sas_anti_similarity on J, B, G, J, B, E we get anti_similar_triangles(B, E, J, B, G, J)
By sas_anti_congruence on I, D, E, I, D, G we get anti_congruent_triangles(D, E, I, D, G, I)
By sas_anti_congruence on J, D, E, J, D, G we get anti_congruent_triangles(D, E, J, D, G, J)
By sas_anti_congruence on J, B, E, J, B, G we get anti_congruent_triangles(B, E, J, B, G, J)
By sas_anti_congruence on I, D, G, I, D, E we get anti_congruent_triangles(D, E, I, D, G, I)
By sas_anti_congruence on J, D, G, J, D, E we get anti_congruent_triangles(D, E, J, D, G, J)
By sas_anti_similarity on I, D, G, I, D, E we get anti_similar_triangles(D, E, I, D, G, I)
By sas_anti_congruence on I, B, G, I, B, E we get anti_congruent_triangles(B, E, I, B, G, I)
By sas_anti_congruence on E, D, I, G, D, I we get anti_congruent_triangles(D, E, I, D, G, I)
By anti_similar_triangle_basic_properties on C, E, D, C, F, D we get not_collinear(C, D, E), not_collinear(C, D, F), angle(C, E, D) == 0 - angle(C, F, D) mod 360, angle(E, D, C) == 0 - angle(F, D, C) mod 360, angle(D, C, E) == 0 - angle(D, C, F) mod 360, log(distance(C, E)) + log(distance(D, F)) == log(distance(C, F)) + log(distance(D, E)), log(distance(D, E)) + log(distance(C, D)) == log(distance(D, F)) + log(distance(C, D)), log(distance(C, D)) + log(distance(C, E)) == log(distance(C, D)) + log(distance(C, F))
By perpendicular_bisector_sufficient_conditions on E, G, B, D we get Line(B, D) == perpendicular_bisector(E, G)
By anti_similar_triangle_basic_properties on C, D, F, C, D, E we get not_collinear(C, D, F), not_collinear(C, D, E), angle(C, D, F) == 0 - angle(C, D, E) mod 360, angle(D, F, C) == 0 - angle(D, E, C) mod 360, angle(F, C, D) == 0 - angle(E, C, D) mod 360, log(distance(C, D)) + log(distance(D, E)) == log(distance(C, D)) + log(distance(D, F)), log(distance(D, E)) + log(distance(C, F)) == log(distance(D, F)) + log(distance(C, E)), log(distance(C, E)) + log(distance(C, D)) == log(distance(C, F)) + log(distance(C, D))
By perpendicular_bisector_sufficient_conditions on F, G, A, D we get Line(A, D) == perpendicular_bisector(F, G)
By isosceles_triangle_altitude_v2 on D, E, G we get identical(perpendicular_bisector(E, G), internal_angle_bisector(E, D, G), perpendicular_line(D, Line(E, G)))
By isosceles_triangle_altitude_v2 on B, E, G we get identical(perpendicular_bisector(E, G), internal_angle_bisector(E, B, G), perpendicular_line(B, Line(E, G)))
By isosceles_triangle_altitude_v2 on A, F, G we get identical(perpendicular_bisector(F, G), internal_angle_bisector(F, A, G), perpendicular_line(A, Line(F, G)))
By isosceles_triangle_altitude_v2 on D, G, E we get identical(perpendicular_bisector(E, G), internal_angle_bisector(E, D, G), perpendicular_line(D, Line(E, G)))
By isosceles_triangle_altitude_v2 on D, F, G we get identical(perpendicular_bisector(F, G), internal_angle_bisector(F, D, G), perpendicular_line(D, Line(F, G)))
By isosceles_triangle_altitude_v2 on D, G, F we get identical(perpendicular_bisector(F, G), internal_angle_bisector(F, D, G), perpendicular_line(D, Line(F, G)))
By isosceles_triangle_altitude_v2 on A, G, F we get identical(perpendicular_bisector(F, G), internal_angle_bisector(F, A, G), perpendicular_line(A, Line(F, G)))
By isosceles_triangle_altitude_v2 on B, G, E we get identical(perpendicular_bisector(E, G), internal_angle_bisector(E, B, G), perpendicular_line(B, Line(E, G)))
By tangent_definition_from_perpendicularity_v0_r on G, f, c we get tangent(f, c)
By tangent_definition_from_perpendicularity_v0_r on E, g, c we get tangent(g, c)
By tangent_definition_from_perpendicularity_v0_r on F, h, c we get tangent(h, c)
By concyclic_sufficient_conditions_v1 on D, J, E, H we get concyclic(D, E, H, J)
By concyclic_sufficient_conditions_v1 on J, I, F, H we get concyclic(F, H, I, J)
By line_definition on line_intersection(Line(C, D), altitude(F, C, D)), F, altitude(F, C, D) we get altitude(F, C, D) == Line(F, line_intersection(Line(C, D), altitude(F, C, D)))
By line_definition on line_intersection(j, altitude(G, B, D)), G, altitude(G, B, D) we get altitude(G, B, D) == Line(G, line_intersection(j, altitude(G, B, D)))
By line_definition on F, line_intersection(i, altitude(F, A, D)), altitude(F, A, D) we get altitude(F, A, D) == Line(F, line_intersection(i, altitude(F, A, D)))
By concyclic_sufficient_conditions_v1 on B, A, F, center(d) we get concyclic(A, B, F, center(d))
By line_definition on E, line_intersection(Line(C, D), altitude(E, C, D)), altitude(E, C, D) we get altitude(E, C, D) == Line(E, line_intersection(Line(C, D), altitude(E, C, D)))
By line_definition on line_intersection(j, altitude(E, B, D)), E, altitude(E, B, D) we get altitude(E, B, D) == Line(E, line_intersection(j, altitude(E, B, D)))
By perpendicular_line_definition on G, Line(E, G), j we get Line(E, G) == perpendicular_line(G, j)
By line_definition on G, line_intersection(i, altitude(G, A, D)), altitude(G, A, D) we get altitude(G, A, D) == Line(G, line_intersection(i, altitude(G, A, D)))
By perpendicular_line_definition on G, Line(F, G), i we get Line(F, G) == perpendicular_line(G, i)
By perpendicular_line_definition on E, Line(E, G), j we get Line(E, G) == perpendicular_line(E, j)
By perpendicular_line_definition on F, Line(F, G), i we get Line(F, G) == perpendicular_line(F, i)
By line_intersection_definition on D, Line(D, H), Line(D, F) we get D == line_intersection(Line(D, F), Line(D, H))
By perpendicular_line_definition on J, j, Line(E, G) we get j == perpendicular_line(J, Line(E, G))
By line_intersection_definition on D, Line(D, H), i we get D == line_intersection(i, Line(D, H))
By line_intersection_definition on D, j, Line(D, H) we get D == line_intersection(j, Line(D, H))
By median_definition on I, E, G, j we get j == median(I, E, G)
By median_definition on A, G, F, i we get i == median(A, F, G)
By line_intersection_definition on D, Line(D, H), Line(C, D) we get D == line_intersection(Line(C, D), Line(D, H))
By line_intersection_definition on D, Line(D, G), Line(D, H) we get D == line_intersection(Line(D, G), Line(D, H))
By perpendicular_line_definition on line_intersection(j, altitude(E, B, D)), j, Line(E, G) we get j == perpendicular_line(line_intersection(j, altitude(E, B, D)), Line(E, G))
By perpendicular_line_definition on midpoint(E, G), j, altitude(E, B, D) we get j == perpendicular_line(midpoint(E, G), altitude(E, B, D))
By perpendicular_line_definition on line_intersection(i, altitude(G, A, D)), i, Line(F, G) we get i == perpendicular_line(line_intersection(i, altitude(G, A, D)), Line(F, G))
By median_definition on D, G, E, j we get j == median(D, E, G)
By perpendicular_line_definition on I, j, Line(E, G) we get j == perpendicular_line(I, Line(E, G))
By median_definition on B, E, G, j we get j == median(B, E, G)
By perpendicular_line_definition on line_intersection(j, altitude(G, B, D)), j, Line(E, G) we get j == perpendicular_line(line_intersection(j, altitude(G, B, D)), Line(E, G))
By median_definition on J, E, G, j we get j == median(J, E, G)
By line_intersection_definition on D, Line(D, H), Line(D, E) we get D == line_intersection(Line(D, E), Line(D, H))
By perpendicular_line_definition on midpoint(E, G), j, altitude(G, B, D) we get j == perpendicular_line(midpoint(E, G), altitude(G, B, D))
By median_definition on D, F, G, i we get i == median(D, F, G)
By perpendicular_line_definition on line_intersection(i, altitude(F, A, D)), i, Line(F, G) we get i == perpendicular_line(line_intersection(i, altitude(F, A, D)), Line(F, G))
By perpendicular_line_definition on midpoint(F, G), i, altitude(G, A, D) we get i == perpendicular_line(midpoint(F, G), altitude(G, A, D))
By perpendicular_line_definition on midpoint(F, G), i, altitude(F, A, D) we get i == perpendicular_line(midpoint(F, G), altitude(F, A, D))
By line_unique_intersection_v1 on Line(D, H), j, D, B we get B not in Line(D, H)
By line_unique_intersection_v1 on Line(D, H), i, D, A we get A not in Line(D, H)
By line_unique_intersection_v1 on Line(D, H), Line(C, D), D, C we get C not in Line(D, H)
By line_unique_intersection_v1 on Line(D, H), j, D, J we get J not in Line(D, H)
By line_unique_intersection_v1 on Line(D, H), Line(D, G), D, G we get G not in Line(D, H)
By line_unique_intersection_v1 on Line(D, H), Line(D, E), D, E we get E not in Line(D, H)
By line_unique_intersection_v1 on Line(D, H), j, D, I we get I not in Line(D, H)
By line_unique_intersection_v1 on Line(D, H), Line(D, F), D, F we get F not in Line(D, H)
By perpendicular_direction_conditions_v0 on I, F, E, F we get perpendicular(Line(E, F), Line(F, I))
By same_angle_v2 on J, G, H, E we get angle(G, J, E) == angle(H, J, E) + 180 mod 360
By collinear_and_not_between_implies_orientation on line_intersection(Line(C, D), altitude(E, C, D)), G, H, J we get orientation(G, line_intersection(Line(C, D), altitude(E, C, D)), H) == orientation(H, J, line_intersection(Line(C, D), altitude(E, C, D))) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(i, altitude(G, A, D)), H, G, J we get orientation(G, H, line_intersection(i, altitude(G, A, D))) == orientation(G, J, line_intersection(i, altitude(G, A, D))) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(i, altitude(G, A, D)), J, H, G we get orientation(G, line_intersection(i, altitude(G, A, D)), H) == orientation(H, J, line_intersection(i, altitude(G, A, D))) mod 360
By same_angle_v3 on D, J, I, H we get angle(J, D, H) == angle(I, D, H) + 180 mod 360
By collinear_and_not_between_implies_orientation on line_intersection(Line(C, D), altitude(F, C, D)), H, G, J we get orientation(G, H, line_intersection(Line(C, D), altitude(F, C, D))) == orientation(G, J, line_intersection(Line(C, D), altitude(F, C, D))) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(i, altitude(G, A, D)), J, B, I we get orientation(B, I, line_intersection(i, altitude(G, A, D))) == orientation(B, J, line_intersection(i, altitude(G, A, D))) mod 360
By same_angle_v0 on I, B, J, E we get angle(B, I, E) == angle(J, I, E) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(Line(C, D), altitude(E, C, D)), B, A, G we get orientation(A, B, line_intersection(Line(C, D), altitude(E, C, D))) == orientation(A, G, line_intersection(Line(C, D), altitude(E, C, D))) mod 360
By same_angle_v1 on J, I, D, E we get angle(D, J, E) == angle(I, J, E) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(i, altitude(G, A, D)), E, B, C we get orientation(B, C, line_intersection(i, altitude(G, A, D))) == orientation(B, E, line_intersection(i, altitude(G, A, D))) mod 360
By perpendicular_direction_conditions_v0 on F, E, D, C we get perpendicular(Line(C, D), Line(E, F))
By between_implies_orientation on line_intersection(Line(C, D), altitude(F, C, D)), A, G, B we get orientation(A, G, line_intersection(Line(C, D), altitude(F, C, D))) == orientation(B, line_intersection(Line(C, D), altitude(F, C, D)), G) mod 360, orientation(A, B, line_intersection(Line(C, D), altitude(F, C, D))) == orientation(A, G, line_intersection(Line(C, D), altitude(F, C, D))) mod 360
By same_angle_v2 on D, B, I, H we get angle(B, D, H) == angle(I, D, H) + 180 mod 360
By between_implies_orientation on line_intersection(i, altitude(F, A, D)), C, E, B we get orientation(B, line_intersection(i, altitude(F, A, D)), E) == orientation(C, E, line_intersection(i, altitude(F, A, D))) mod 360, orientation(B, line_intersection(i, altitude(F, A, D)), C) == orientation(C, E, line_intersection(i, altitude(F, A, D))) mod 360
By between_implies_orientation on line_intersection(i, altitude(F, A, D)), G, J, H we get orientation(G, J, line_intersection(i, altitude(F, A, D))) == orientation(H, line_intersection(i, altitude(F, A, D)), J) mod 360, orientation(G, H, line_intersection(i, altitude(F, A, D))) == orientation(G, J, line_intersection(i, altitude(F, A, D))) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(Line(C, D), altitude(E, C, D)), I, B, J we get orientation(B, I, line_intersection(Line(C, D), altitude(E, C, D))) == orientation(B, J, line_intersection(Line(C, D), altitude(E, C, D))) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(j, altitude(E, B, D)), F, A, C we get orientation(A, C, line_intersection(j, altitude(E, B, D))) == orientation(A, F, line_intersection(j, altitude(E, B, D))) mod 360
By same_angle_v3 on J, B, I, E we get angle(B, J, E) == angle(I, J, E) + 180 mod 360
By collinear_and_not_between_implies_orientation on center(d), D, B, I we get orientation(B, D, center(d)) == orientation(B, I, center(d)) mod 360
By same_angle_v0 on I, J, D, E we get angle(D, I, E) == angle(J, I, E) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(Line(C, D), altitude(F, C, D)), B, I, J we get orientation(B, line_intersection(Line(C, D), altitude(F, C, D)), I) == orientation(I, J, line_intersection(Line(C, D), altitude(F, C, D))) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(i, altitude(F, A, D)), B, I, J we get orientation(B, line_intersection(i, altitude(F, A, D)), I) == orientation(I, J, line_intersection(i, altitude(F, A, D))) mod 360
By same_angle_v3 on E, C, B, J we get angle(C, E, J) == angle(B, E, J) + 180 mod 360
By collinear_and_not_between_implies_orientation on line_intersection(j, altitude(G, B, D)), C, A, F we get orientation(A, C, line_intersection(j, altitude(G, B, D))) == orientation(A, F, line_intersection(j, altitude(G, B, D))) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(j, altitude(E, B, D)), A, C, F we get orientation(A, line_intersection(j, altitude(E, B, D)), C) == orientation(C, F, line_intersection(j, altitude(E, B, D))) mod 360
By between_implies_orientation on line_intersection(Line(C, D), altitude(E, C, D)), B, J, I we get orientation(B, J, line_intersection(Line(C, D), altitude(E, C, D))) == orientation(I, line_intersection(Line(C, D), altitude(E, C, D)), J) mod 360, orientation(B, I, line_intersection(Line(C, D), altitude(E, C, D))) == orientation(B, J, line_intersection(Line(C, D), altitude(E, C, D))) mod 360
By same_angle_v3 on E, C, B, I we get angle(C, E, I) == angle(B, E, I) + 180 mod 360
By between_implies_orientation on line_intersection(i, altitude(G, A, D)), B, J, I we get orientation(B, J, line_intersection(i, altitude(G, A, D))) == orientation(I, line_intersection(i, altitude(G, A, D)), J) mod 360, orientation(B, I, line_intersection(i, altitude(G, A, D))) == orientation(B, J, line_intersection(i, altitude(G, A, D))) mod 360
By same_angle_v1 on H, J, G, D we get angle(G, H, D) == angle(J, H, D) mod 360
By between_implies_orientation on line_intersection(i, altitude(G, A, D)), H, J, G we get orientation(G, line_intersection(i, altitude(G, A, D)), J) == orientation(H, J, line_intersection(i, altitude(G, A, D))) mod 360, orientation(G, line_intersection(i, altitude(G, A, D)), H) == orientation(H, J, line_intersection(i, altitude(G, A, D))) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(Line(C, D), altitude(F, C, D)), A, B, G we get orientation(A, line_intersection(Line(C, D), altitude(F, C, D)), B) == orientation(B, G, line_intersection(Line(C, D), altitude(F, C, D))) mod 360
By between_implies_orientation on line_intersection(i, altitude(G, A, D)), G, J, H we get orientation(G, J, line_intersection(i, altitude(G, A, D))) == orientation(H, line_intersection(i, altitude(G, A, D)), J) mod 360, orientation(G, H, line_intersection(i, altitude(G, A, D))) == orientation(G, J, line_intersection(i, altitude(G, A, D))) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(i, altitude(F, A, D)), G, H, J we get orientation(G, line_intersection(i, altitude(F, A, D)), H) == orientation(H, J, line_intersection(i, altitude(F, A, D))) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(Line(C, D), altitude(E, C, D)), A, B, G we get orientation(A, line_intersection(Line(C, D), altitude(E, C, D)), B) == orientation(B, G, line_intersection(Line(C, D), altitude(E, C, D))) mod 360
By between_implies_orientation on line_intersection(Line(C, D), altitude(F, C, D)), G, J, H we get orientation(G, J, line_intersection(Line(C, D), altitude(F, C, D))) == orientation(H, line_intersection(Line(C, D), altitude(F, C, D)), J) mod 360, orientation(G, H, line_intersection(Line(C, D), altitude(F, C, D))) == orientation(G, J, line_intersection(Line(C, D), altitude(F, C, D))) mod 360
By between_implies_orientation on line_intersection(i, altitude(F, A, D)), B, J, I we get orientation(B, J, line_intersection(i, altitude(F, A, D))) == orientation(I, line_intersection(i, altitude(F, A, D)), J) mod 360, orientation(B, I, line_intersection(i, altitude(F, A, D))) == orientation(B, J, line_intersection(i, altitude(F, A, D))) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(i, altitude(G, A, D)), B, C, E we get orientation(B, line_intersection(i, altitude(G, A, D)), C) == orientation(C, E, line_intersection(i, altitude(G, A, D))) mod 360
By between_implies_orientation on center(d), B, D, I we get orientation(B, D, center(d)) == orientation(D, I, center(d)) mod 360, orientation(B, D, center(d)) == orientation(B, I, center(d)) mod 360
By same_angle_v0 on D, B, J, H we get angle(B, D, H) == angle(J, D, H) mod 360
By between_implies_orientation on line_intersection(i, altitude(G, A, D)), C, E, B we get orientation(B, line_intersection(i, altitude(G, A, D)), E) == orientation(C, E, line_intersection(i, altitude(G, A, D))) mod 360, orientation(B, line_intersection(i, altitude(G, A, D)), C) == orientation(C, E, line_intersection(i, altitude(G, A, D))) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(Line(C, D), altitude(F, C, D)), J, H, G we get orientation(G, line_intersection(Line(C, D), altitude(F, C, D)), H) == orientation(H, J, line_intersection(Line(C, D), altitude(F, C, D))) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(Line(C, D), altitude(F, C, D)), J, B, I we get orientation(B, I, line_intersection(Line(C, D), altitude(F, C, D))) == orientation(B, J, line_intersection(Line(C, D), altitude(F, C, D))) mod 360
By between_implies_orientation on line_intersection(Line(C, D), altitude(E, C, D)), H, J, G we get orientation(G, line_intersection(Line(C, D), altitude(E, C, D)), J) == orientation(H, J, line_intersection(Line(C, D), altitude(E, C, D))) mod 360, orientation(G, line_intersection(Line(C, D), altitude(E, C, D)), H) == orientation(H, J, line_intersection(Line(C, D), altitude(E, C, D))) mod 360
By between_implies_orientation on line_intersection(Line(C, D), altitude(E, C, D)), G, J, H we get orientation(G, J, line_intersection(Line(C, D), altitude(E, C, D))) == orientation(H, line_intersection(Line(C, D), altitude(E, C, D)), J) mod 360, orientation(G, H, line_intersection(Line(C, D), altitude(E, C, D))) == orientation(G, J, line_intersection(Line(C, D), altitude(E, C, D))) mod 360
By between_implies_orientation on line_intersection(Line(C, D), altitude(F, C, D)), I, J, B we get orientation(B, line_intersection(Line(C, D), altitude(F, C, D)), J) == orientation(I, J, line_intersection(Line(C, D), altitude(F, C, D))) mod 360, orientation(B, line_intersection(Line(C, D), altitude(F, C, D)), I) == orientation(I, J, line_intersection(Line(C, D), altitude(F, C, D))) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(j, altitude(G, B, D)), F, C, A we get orientation(A, line_intersection(j, altitude(G, B, D)), C) == orientation(C, F, line_intersection(j, altitude(G, B, D))) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(i, altitude(G, A, D)), B, I, J we get orientation(B, line_intersection(i, altitude(G, A, D)), I) == orientation(I, J, line_intersection(i, altitude(G, A, D))) mod 360
By between_implies_orientation on line_intersection(j, altitude(E, B, D)), C, F, A we get orientation(A, line_intersection(j, altitude(E, B, D)), F) == orientation(C, F, line_intersection(j, altitude(E, B, D))) mod 360, orientation(A, line_intersection(j, altitude(E, B, D)), C) == orientation(C, F, line_intersection(j, altitude(E, B, D))) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(Line(C, D), altitude(E, C, D)), J, I, B we get orientation(B, line_intersection(Line(C, D), altitude(E, C, D)), I) == orientation(I, J, line_intersection(Line(C, D), altitude(E, C, D))) mod 360
By between_implies_orientation on line_intersection(Line(C, D), altitude(E, C, D)), I, J, B we get orientation(B, line_intersection(Line(C, D), altitude(E, C, D)), J) == orientation(I, J, line_intersection(Line(C, D), altitude(E, C, D))) mod 360, orientation(B, line_intersection(Line(C, D), altitude(E, C, D)), I) == orientation(I, J, line_intersection(Line(C, D), altitude(E, C, D))) mod 360
By collinear_and_not_between_implies_orientation on center(d), B, I, D we get orientation(B, center(d), I) == orientation(D, center(d), I) mod 360
By between_implies_orientation on line_intersection(j, altitude(E, B, D)), A, F, C we get orientation(A, F, line_intersection(j, altitude(E, B, D))) == orientation(C, line_intersection(j, altitude(E, B, D)), F) mod 360, orientation(A, C, line_intersection(j, altitude(E, B, D))) == orientation(A, F, line_intersection(j, altitude(E, B, D))) mod 360
By between_implies_orientation on center(d), I, D, B we get orientation(B, center(d), D) == orientation(D, center(d), I) mod 360, orientation(B, center(d), I) == orientation(D, center(d), I) mod 360
By between_implies_orientation on line_intersection(i, altitude(G, A, D)), I, J, B we get orientation(B, line_intersection(i, altitude(G, A, D)), J) == orientation(I, J, line_intersection(i, altitude(G, A, D))) mod 360, orientation(B, line_intersection(i, altitude(G, A, D)), I) == orientation(I, J, line_intersection(i, altitude(G, A, D))) mod 360
By between_implies_orientation on line_intersection(Line(C, D), altitude(F, C, D)), B, J, I we get orientation(B, J, line_intersection(Line(C, D), altitude(F, C, D))) == orientation(I, line_intersection(Line(C, D), altitude(F, C, D)), J) mod 360, orientation(B, I, line_intersection(Line(C, D), altitude(F, C, D))) == orientation(B, J, line_intersection(Line(C, D), altitude(F, C, D))) mod 360
By between_implies_orientation on line_intersection(Line(C, D), altitude(E, C, D)), B, G, A we get orientation(A, line_intersection(Line(C, D), altitude(E, C, D)), G) == orientation(B, G, line_intersection(Line(C, D), altitude(E, C, D))) mod 360, orientation(A, line_intersection(Line(C, D), altitude(E, C, D)), B) == orientation(B, G, line_intersection(Line(C, D), altitude(E, C, D))) mod 360
By between_implies_orientation on line_intersection(i, altitude(F, A, D)), I, J, B we get orientation(B, line_intersection(i, altitude(F, A, D)), J) == orientation(I, J, line_intersection(i, altitude(F, A, D))) mod 360, orientation(B, line_intersection(i, altitude(F, A, D)), I) == orientation(I, J, line_intersection(i, altitude(F, A, D))) mod 360
By between_implies_orientation on line_intersection(i, altitude(F, A, D)), H, J, G we get orientation(G, line_intersection(i, altitude(F, A, D)), J) == orientation(H, J, line_intersection(i, altitude(F, A, D))) mod 360, orientation(G, line_intersection(i, altitude(F, A, D)), H) == orientation(H, J, line_intersection(i, altitude(F, A, D))) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(i, altitude(F, A, D)), C, B, E we get orientation(B, C, line_intersection(i, altitude(F, A, D))) == orientation(B, E, line_intersection(i, altitude(F, A, D))) mod 360
By between_implies_orientation on line_intersection(i, altitude(F, A, D)), B, E, C we get orientation(B, E, line_intersection(i, altitude(F, A, D))) == orientation(C, line_intersection(i, altitude(F, A, D)), E) mod 360, orientation(B, C, line_intersection(i, altitude(F, A, D))) == orientation(B, E, line_intersection(i, altitude(F, A, D))) mod 360
By between_implies_orientation on line_intersection(j, altitude(G, B, D)), A, F, C we get orientation(A, F, line_intersection(j, altitude(G, B, D))) == orientation(C, line_intersection(j, altitude(G, B, D)), F) mod 360, orientation(A, C, line_intersection(j, altitude(G, B, D))) == orientation(A, F, line_intersection(j, altitude(G, B, D))) mod 360
By between_implies_orientation on line_intersection(Line(C, D), altitude(F, C, D)), H, J, G we get orientation(G, line_intersection(Line(C, D), altitude(F, C, D)), J) == orientation(H, J, line_intersection(Line(C, D), altitude(F, C, D))) mod 360, orientation(G, line_intersection(Line(C, D), altitude(F, C, D)), H) == orientation(H, J, line_intersection(Line(C, D), altitude(F, C, D))) mod 360
By between_implies_orientation on line_intersection(i, altitude(G, A, D)), B, E, C we get orientation(B, E, line_intersection(i, altitude(G, A, D))) == orientation(C, line_intersection(i, altitude(G, A, D)), E) mod 360, orientation(B, C, line_intersection(i, altitude(G, A, D))) == orientation(B, E, line_intersection(i, altitude(G, A, D))) mod 360
By between_implies_orientation on line_intersection(Line(C, D), altitude(E, C, D)), A, G, B we get orientation(A, G, line_intersection(Line(C, D), altitude(E, C, D))) == orientation(B, line_intersection(Line(C, D), altitude(E, C, D)), G) mod 360, orientation(A, B, line_intersection(Line(C, D), altitude(E, C, D))) == orientation(A, G, line_intersection(Line(C, D), altitude(E, C, D))) mod 360
By between_implies_orientation on line_intersection(j, altitude(G, B, D)), C, F, A we get orientation(A, line_intersection(j, altitude(G, B, D)), F) == orientation(C, F, line_intersection(j, altitude(G, B, D))) mod 360, orientation(A, line_intersection(j, altitude(G, B, D)), C) == orientation(C, F, line_intersection(j, altitude(G, B, D))) mod 360
By between_implies_orientation on line_intersection(Line(C, D), altitude(F, C, D)), B, G, A we get orientation(A, line_intersection(Line(C, D), altitude(F, C, D)), G) == orientation(B, G, line_intersection(Line(C, D), altitude(F, C, D))) mod 360, orientation(A, line_intersection(Line(C, D), altitude(F, C, D)), B) == orientation(B, G, line_intersection(Line(C, D), altitude(F, C, D))) mod 360
By between_imply_not_between on E, midpoint(E, G), G we get collinear_and_not_between(G, E, midpoint(E, G))
By between_imply_not_between on G, midpoint(F, G), F we get collinear_and_not_between(F, G, midpoint(F, G))
By between_imply_not_between on G, midpoint(E, G), E we get collinear_and_not_between(E, G, midpoint(E, G))
By between_imply_not_between on F, midpoint(F, G), G we get collinear_and_not_between(G, F, midpoint(F, G))
By altitude_definition on F, D, A, Line(F, G) we get Line(F, G) == altitude(F, A, D)
By tangent_chord_angle_v1 on E, H, G, B we get tangent(Line(B, E), Circle(E, G, H))
By in_imply_collinear on midpoint(E, G), I, B we get collinear(B, I, midpoint(E, G))
By in_imply_collinear on midpoint(E, G), B, J we get collinear(B, J, midpoint(E, G))
By tangent_chord_angle_v1 on G, E, F, A we get tangent(Line(A, G), Circle(E, F, G))
By tangent_chord_angle_v1 on F, H, E, A we get tangent(Line(A, F), Circle(E, F, H))
By tangent_chord_angle_v1 on F, H, G, A we get tangent(Line(A, F), Circle(F, G, H))
By tangent_chord_angle_v1 on E, F, H, C we get tangent(Line(C, E), Circle(E, F, H))
By sss_anti_congruence_v1 on E, J, G, G, J, E we get anti_congruent_triangles(E, G, J, G, E, J)
By sss_anti_congruence_v0 on J, E, G, J, G, E we get anti_congruent_triangles(E, G, J, G, E, J)
By line_inequality on Line(E, J), Line(F, H), J we get Line(E, J) != Line(F, H)
By sss_anti_congruence_v0 on G, I, E, E, I, G we get anti_congruent_triangles(E, G, I, G, E, I)
By tangent_chord_angle_v1 on G, H, F, A we get tangent(Line(A, G), Circle(F, G, H))
By parallel_line_angles_v1 on C, D, I, F we get parallel(Line(C, D), Line(F, I))
By in_imply_collinear on midpoint(F, G), A, D we get collinear(A, D, midpoint(F, G))
By altitude_definition on G, D, B, Line(E, G) we get Line(E, G) == altitude(G, B, D)
By in_imply_collinear on midpoint(E, G), J, D we get collinear(D, J, midpoint(E, G))
By sss_anti_congruence_v1 on G, E, I, E, G, I we get anti_congruent_triangles(E, G, I, G, E, I)
By sss_anti_congruence_v1 on J, G, E, J, E, G we get anti_congruent_triangles(E, G, J, G, E, J)
By tangent_chord_angle_v1 on F, E, G, A we get tangent(Line(A, F), Circle(E, F, G))
By in_imply_collinear on midpoint(E, G), D, B we get collinear(B, D, midpoint(E, G))
By sss_anti_congruence_v1 on J, I, G, J, I, E we get anti_congruent_triangles(E, I, J, G, I, J)
By tangent_chord_angle_v1 on F, G, E, C we get tangent(Line(C, F), Circle(E, F, G))
By tangent_chord_angle_v1 on F, G, H, C we get tangent(Line(C, F), Circle(F, G, H))
By tangent_chord_angle_v1 on G, H, E, B we get tangent(Line(B, G), Circle(E, G, H))
By tangent_chord_angle_v1 on G, E, H, A we get tangent(Line(A, G), Circle(E, G, H))
By in_imply_collinear on midpoint(E, G), I, D we get collinear(D, I, midpoint(E, G))
By sss_anti_congruence_v1 on J, G, E, J, E, G we get anti_congruent_triangles(E, G, J, G, E, J)
By altitude_definition on G, D, I, Line(E, G) we get Line(E, G) == altitude(G, D, I)
By tangent_chord_angle_v1 on E, H, F, B we get tangent(Line(B, E), Circle(E, F, H))
By not_in_line_equivalent_to_not_collinear_v0_r on F, J, E we get F not in Line(E, J)
By sss_anti_congruence_v0 on E, G, I, G, E, I we get anti_congruent_triangles(E, G, I, G, E, I)
By tangent_chord_angle_v0 on E, H, G, C we get tangent(Line(C, E), Circle(E, G, H))
By sss_anti_congruence_v0 on I, J, G, I, J, E we get anti_congruent_triangles(E, I, J, G, I, J)
By tangent_chord_angle_v1 on F, E, H, C we get tangent(Line(C, F), Circle(E, F, H))
By tangent_chord_angle_v1 on E, G, F, C we get tangent(Line(C, E), Circle(E, F, G))
By tangent_chord_angle_v1 on G, F, H, B we get tangent(Line(B, G), Circle(F, G, H))
By in_imply_collinear on midpoint(E, G), I, J we get collinear(I, J, midpoint(E, G))
By not_in_line_equivalent_to_not_collinear_v0_r on H, E, I we get H not in Line(E, I)
By sss_anti_congruence_v0 on G, J, E, E, J, G we get anti_congruent_triangles(E, G, J, G, E, J)
By tangent_chord_angle_v1 on G, F, E, B we get tangent(Line(B, G), Circle(E, F, G))
By altitude_definition on G, B, I, Line(E, G) we get Line(E, G) == altitude(G, B, I)
By tangent_chord_angle_v1 on E, F, G, B we get tangent(Line(B, E), Circle(E, F, G))
By sss_anti_congruence_v1 on J, I, G, J, I, E we get anti_congruent_triangles(E, I, J, G, I, J)
By altitude_definition on E, I, J, Line(E, G) we get Line(E, G) == altitude(E, I, J)
By sss_anti_congruence_v0 on I, E, J, I, G, J we get anti_congruent_triangles(E, I, J, G, I, J)
By sss_anti_congruence_v1 on G, J, I, E, J, I we get anti_congruent_triangles(E, I, J, G, I, J)
By sss_anti_congruence_v1 on I, G, E, I, E, G we get anti_congruent_triangles(E, G, I, G, E, I)
By sss_anti_congruence_v1 on E, I, G, G, I, E we get anti_congruent_triangles(E, G, I, G, E, I)
By sss_anti_congruence_v1 on E, I, G, G, I, E we get anti_congruent_triangles(E, G, I, G, E, I)
By sss_anti_congruence_v0 on I, J, G, I, J, E we get anti_congruent_triangles(E, I, J, G, I, J)
By sss_anti_congruence_v0 on E, G, J, G, E, J we get anti_congruent_triangles(E, G, J, G, E, J)
By sss_anti_congruence_v1 on J, G, E, J, E, G we get anti_congruent_triangles(E, G, J, G, E, J)
By sss_anti_congruence_v1 on I, J, E, I, J, G we get anti_congruent_triangles(E, I, J, G, I, J)
By line_inequality on Line(E, I), Line(C, D), I we get Line(C, D) != Line(E, I)
By altitude_definition on E, D, J, Line(E, G) we get Line(E, G) == altitude(E, D, J)
By sss_anti_congruence_v1 on I, G, J, I, E, J we get anti_congruent_triangles(E, I, J, G, I, J)
By sss_anti_congruence_v1 on J, E, I, J, G, I we get anti_congruent_triangles(E, I, J, G, I, J)
By sss_anti_congruence_v0 on I, J, G, I, J, E we get anti_congruent_triangles(E, I, J, G, I, J)
By altitude_definition on E, D, B, Line(E, G) we get Line(E, G) == altitude(E, B, D)
By line_inequality on Line(E, I), Line(F, H), I we get Line(E, I) != Line(F, H)
By sss_anti_congruence_v0 on G, J, E, E, J, G we get anti_congruent_triangles(E, G, J, G, E, J)
By sss_anti_congruence_v0 on I, J, G, I, J, E we get anti_congruent_triangles(E, I, J, G, I, J)
By sss_anti_congruence_v0 on E, G, I, G, E, I we get anti_congruent_triangles(E, G, I, G, E, I)
By sss_anti_congruence_v0 on J, I, E, J, I, G we get anti_congruent_triangles(E, I, J, G, I, J)
By sss_anti_congruence_v1 on I, G, J, I, E, J we get anti_congruent_triangles(E, I, J, G, I, J)
By point_on_perpendicular_bisector on F, G, line_intersection(i, altitude(F, A, D)), i we get distance(F, line_intersection(i, altitude(F, A, D))) == distance(G, line_intersection(i, altitude(F, A, D)))
By sss_anti_congruence_v0 on J, E, G, J, G, E we get anti_congruent_triangles(E, G, J, G, E, J)
By sss_anti_congruence_v1 on E, J, G, G, J, E we get anti_congruent_triangles(E, G, J, G, E, J)
By line_inequality on Line(E, I), h, E we get h != Line(E, I)
By sss_anti_congruence_v1 on E, I, J, G, I, J we get anti_congruent_triangles(E, I, J, G, I, J)
By double_perpendicular_and_parallel_v0 on Line(E, G), j, altitude(G, B, D) we get parallel(Line(E, G), altitude(G, B, D))
By line_inequality on Line(E, J), Line(C, D), J we get Line(C, D) != Line(E, J)
By sss_anti_congruence_v1 on E, I, G, G, I, E we get anti_congruent_triangles(E, G, I, G, E, I)
By line_inequality on Line(E, J), Line(F, I), E we get Line(E, J) != Line(F, I)
By sss_anti_congruence_v1 on I, G, E, I, E, G we get anti_congruent_triangles(E, G, I, G, E, I)
By sss_anti_congruence_v1 on J, E, I, J, G, I we get anti_congruent_triangles(E, I, J, G, I, J)
By sss_anti_congruence_v1 on I, G, J, I, E, J we get anti_congruent_triangles(E, I, J, G, I, J)
By sss_anti_congruence_v0 on E, G, I, G, E, I we get anti_congruent_triangles(E, G, I, G, E, I)
By point_on_perpendicular_bisector on G, F, line_intersection(i, altitude(G, A, D)), i we get distance(F, line_intersection(i, altitude(G, A, D))) == distance(G, line_intersection(i, altitude(G, A, D)))
By isosceles_triangle_properties on I, E, G we get distance(E, I) == distance(G, I), angle(E, G, I) == angle(I, E, G) mod 360
By sss_anti_congruence_v0 on J, G, I, J, E, I we get anti_congruent_triangles(E, I, J, G, I, J)
By altitude_definition on G, J, D, Line(E, G) we get Line(E, G) == altitude(G, D, J)
By double_perpendicular_and_parallel_v0 on Line(E, G), j, altitude(E, B, D) we get parallel(Line(E, G), altitude(E, B, D))
By sss_anti_congruence_v1 on J, G, E, J, E, G we get anti_congruent_triangles(E, G, J, G, E, J)
By sss_anti_congruence_v0 on G, J, E, E, J, G we get anti_congruent_triangles(E, G, J, G, E, J)
By sss_anti_congruence_v1 on E, I, J, G, I, J we get anti_congruent_triangles(E, I, J, G, I, J)
By sss_anti_congruence_v1 on I, G, E, I, E, G we get anti_congruent_triangles(E, G, I, G, E, I)
By not_in_line_equivalent_to_not_collinear_v0_r on C, J, E we get C not in Line(E, J)
By double_perpendicular_and_parallel_v0 on Line(F, G), i, altitude(G, A, D) we get parallel(Line(F, G), altitude(G, A, D))
By sss_anti_congruence_v0 on J, G, I, J, E, I we get anti_congruent_triangles(E, I, J, G, I, J)
By sss_anti_congruence_v0 on E, G, J, G, E, J we get anti_congruent_triangles(E, G, J, G, E, J)
By sss_anti_congruence_v1 on J, E, I, J, G, I we get anti_congruent_triangles(E, I, J, G, I, J)
By sss_anti_congruence_v0 on E, J, I, G, J, I we get anti_congruent_triangles(E, I, J, G, I, J)
By sss_anti_congruence_v0 on J, I, E, J, I, G we get anti_congruent_triangles(E, I, J, G, I, J)
By sss_anti_congruence_v1 on J, I, G, J, I, E we get anti_congruent_triangles(E, I, J, G, I, J)
By sss_anti_congruence_v0 on I, E, G, I, G, E we get anti_congruent_triangles(E, G, I, G, E, I)
By sss_anti_congruence_v0 on E, J, I, G, J, I we get anti_congruent_triangles(E, I, J, G, I, J)
By altitude_definition on E, B, J, Line(E, G) we get Line(E, G) == altitude(E, B, J)
By sss_anti_congruence_v0 on G, I, E, E, I, G we get anti_congruent_triangles(E, G, I, G, E, I)
By altitude_definition on G, I, J, Line(E, G) we get Line(E, G) == altitude(G, I, J)
By sss_anti_congruence_v0 on J, G, I, J, E, I we get anti_congruent_triangles(E, I, J, G, I, J)
By sss_anti_congruence_v1 on G, E, J, E, G, J we get anti_congruent_triangles(E, G, J, G, E, J)
By sss_anti_congruence_v1 on J, E, I, J, G, I we get anti_congruent_triangles(E, I, J, G, I, J)
By line_inequality on Line(E, J), j, E we get j != Line(E, J)
By sss_anti_congruence_v0 on I, E, G, I, G, E we get anti_congruent_triangles(E, G, I, G, E, I)
By altitude_definition on E, I, B, Line(E, G) we get Line(E, G) == altitude(E, B, I)
By sss_anti_congruence_v1 on E, I, G, G, I, E we get anti_congruent_triangles(E, G, I, G, E, I)
By sss_anti_congruence_v0 on J, E, G, J, G, E we get anti_congruent_triangles(E, G, J, G, E, J)
By line_containment_inequality on midpoint(E, G), C, j we get C != midpoint(E, G)
By line_inequality on Line(E, I), f, I we get f != Line(E, I)
By double_perpendicular_and_parallel_v0 on Line(F, G), i, altitude(F, A, D) we get parallel(Line(F, G), altitude(F, A, D))
By line_inequality on Line(E, I), k, E we get k != Line(E, I)
By sss_anti_congruence_v0 on E, G, I, G, E, I we get anti_congruent_triangles(E, G, I, G, E, I)
By sss_anti_congruence_v1 on I, G, E, I, E, G we get anti_congruent_triangles(E, G, I, G, E, I)
By sss_anti_congruence_v1 on G, J, I, E, J, I we get anti_congruent_triangles(E, I, J, G, I, J)
By sss_anti_congruence_v0 on E, G, J, G, E, J we get anti_congruent_triangles(E, G, J, G, E, J)
By altitude_definition on G, A, D, Line(F, G) we get Line(F, G) == altitude(G, A, D)
By line_containment_inequality on midpoint(F, G), B, i we get B != midpoint(F, G)
By not_in_line_equivalent_to_not_collinear_v0_r on I, J, E we get I not in Line(E, J)
By sss_anti_congruence_v0 on E, G, I, G, E, I we get anti_congruent_triangles(E, G, I, G, E, I)
By sss_anti_congruence_v0 on E, J, I, G, J, I we get anti_congruent_triangles(E, I, J, G, I, J)
By line_inequality on Line(E, J), k, E we get k != Line(E, J)
By sss_anti_congruence_v1 on G, E, I, E, G, I we get anti_congruent_triangles(E, G, I, G, E, I)
By sss_anti_congruence_v1 on E, I, J, G, I, J we get anti_congruent_triangles(E, I, J, G, I, J)
By sss_anti_congruence_v0 on I, E, G, I, G, E we get anti_congruent_triangles(E, G, I, G, E, I)
By sss_anti_congruence_v1 on I, G, J, I, E, J we get anti_congruent_triangles(E, I, J, G, I, J)
By sss_anti_congruence_v0 on J, I, E, J, I, G we get anti_congruent_triangles(E, I, J, G, I, J)
By line_inequality on Line(E, J), h, J we get h != Line(E, J)
By sss_anti_congruence_v0 on E, J, I, G, J, I we get anti_congruent_triangles(E, I, J, G, I, J)
By sss_anti_congruence_v0 on I, J, G, I, J, E we get anti_congruent_triangles(E, I, J, G, I, J)
By sss_anti_congruence_v0 on G, I, J, E, I, J we get anti_congruent_triangles(E, I, J, G, I, J)
By sss_anti_congruence_v1 on G, E, J, E, G, J we get anti_congruent_triangles(E, G, J, G, E, J)
By sss_anti_congruence_v0 on J, G, I, J, E, I we get anti_congruent_triangles(E, I, J, G, I, J)
By sss_anti_congruence_v0 on J, I, E, J, I, G we get anti_congruent_triangles(E, I, J, G, I, J)
By sss_anti_congruence_v0 on J, G, I, J, E, I we get anti_congruent_triangles(E, I, J, G, I, J)
By sss_anti_congruence_v1 on G, E, J, E, G, J we get anti_congruent_triangles(E, G, J, G, E, J)
By line_circle_intersection_has_at_most_two_points_0 on F, G, midpoint(F, G), Circle(A, D, F) we get midpoint(F, G) not in Circle(A, D, F)
By line_circle_intersection_has_at_most_two_points_0 on F, G, midpoint(F, G), c we get midpoint(F, G) not in c
By sss_anti_congruence_v0 on J, E, G, J, G, E we get anti_congruent_triangles(E, G, J, G, E, J)
By sss_anti_congruence_v1 on I, J, E, I, J, G we get anti_congruent_triangles(E, I, J, G, I, J)
By sss_anti_congruence_v1 on J, E, I, J, G, I we get anti_congruent_triangles(E, I, J, G, I, J)
By sss_anti_congruence_v0 on G, I, E, E, I, G we get anti_congruent_triangles(E, G, I, G, E, I)
By sss_anti_congruence_v1 on E, I, J, G, I, J we get anti_congruent_triangles(E, I, J, G, I, J)
By sss_anti_congruence_v1 on E, J, G, G, J, E we get anti_congruent_triangles(E, G, J, G, E, J)
By line_inequality on Line(E, J), Line(E, G), J we get Line(E, G) != Line(E, J)
By line_inequality on Line(E, J), g, J we get g != Line(E, J)
By point_on_perpendicular_bisector on E, G, line_intersection(j, altitude(G, B, D)), j we get distance(E, line_intersection(j, altitude(G, B, D))) == distance(G, line_intersection(j, altitude(G, B, D)))
By sss_anti_congruence_v1 on I, J, E, I, J, G we get anti_congruent_triangles(E, I, J, G, I, J)
By sss_anti_congruence_v0 on I, E, J, I, G, J we get anti_congruent_triangles(E, I, J, G, I, J)
By sss_anti_congruence_v0 on G, I, J, E, I, J we get anti_congruent_triangles(E, I, J, G, I, J)
By sss_anti_congruence_v1 on G, E, J, E, G, J we get anti_congruent_triangles(E, G, J, G, E, J)
By sss_anti_congruence_v1 on G, J, I, E, J, I we get anti_congruent_triangles(E, I, J, G, I, J)
By sss_anti_congruence_v1 on G, J, I, E, J, I we get anti_congruent_triangles(E, I, J, G, I, J)
By sss_anti_congruence_v1 on E, J, G, G, J, E we get anti_congruent_triangles(E, G, J, G, E, J)
By not_in_line_equivalent_to_not_collinear_v0_r on F, I, E we get F not in Line(E, I)
By altitude_definition on E, I, D, Line(E, G) we get Line(E, G) == altitude(E, D, I)
By sss_anti_congruence_v0 on G, J, E, E, J, G we get anti_congruent_triangles(E, G, J, G, E, J)
By sss_anti_congruence_v1 on J, I, G, J, I, E we get anti_congruent_triangles(E, I, J, G, I, J)
By point_on_perpendicular_bisector on G, E, line_intersection(j, altitude(E, B, D)), j we get distance(E, line_intersection(j, altitude(E, B, D))) == distance(G, line_intersection(j, altitude(E, B, D)))
By sss_anti_congruence_v0 on I, E, J, I, G, J we get anti_congruent_triangles(E, I, J, G, I, J)
By sss_anti_congruence_v0 on I, E, J, I, G, J we get anti_congruent_triangles(E, I, J, G, I, J)
By sss_anti_congruence_v1 on J, G, E, J, E, G we get anti_congruent_triangles(E, G, J, G, E, J)
By sss_anti_congruence_v0 on I, E, G, I, G, E we get anti_congruent_triangles(E, G, I, G, E, I)
By sss_anti_congruence_v0 on I, E, G, I, G, E we get anti_congruent_triangles(E, G, I, G, E, I)
By sss_anti_congruence_v0 on G, I, J, E, I, J we get anti_congruent_triangles(E, I, J, G, I, J)
By isosceles_triangle_properties on J, G, E we get distance(E, J) == distance(G, J), angle(G, E, J) == angle(J, G, E) mod 360
By isosceles_triangle_properties on J, E, G we get distance(E, J) == distance(G, J), angle(E, G, J) == angle(J, E, G) mod 360
By sss_anti_congruence_v1 on G, E, I, E, G, I we get anti_congruent_triangles(E, G, I, G, E, I)
By sss_anti_congruence_v0 on G, I, E, E, I, G we get anti_congruent_triangles(E, G, I, G, E, I)
By line_inequality on Line(E, J), Line(D, F), E we get Line(D, F) != Line(E, J)
By sss_anti_congruence_v0 on I, E, J, I, G, J we get anti_congruent_triangles(E, I, J, G, I, J)
By altitude_definition on G, J, B, Line(E, G) we get Line(E, G) == altitude(G, B, J)
By sss_anti_congruence_v1 on E, I, G, G, I, E we get anti_congruent_triangles(E, G, I, G, E, I)
By sss_anti_congruence_v1 on I, G, J, I, E, J we get anti_congruent_triangles(E, I, J, G, I, J)
By isosceles_triangle_properties on I, G, E we get distance(E, I) == distance(G, I), angle(G, E, I) == angle(I, G, E) mod 360
By sss_anti_congruence_v1 on I, G, E, I, E, G we get anti_congruent_triangles(E, G, I, G, E, I)
By sss_anti_congruence_v0 on G, I, J, E, I, J we get anti_congruent_triangles(E, I, J, G, I, J)
By sss_anti_congruence_v0 on J, E, G, J, G, E we get anti_congruent_triangles(E, G, J, G, E, J)
By not_in_line_equivalent_to_not_collinear_v0_r on A, I, E we get A not in Line(E, I)
By sss_anti_congruence_v0 on E, J, I, G, J, I we get anti_congruent_triangles(E, I, J, G, I, J)
By sss_anti_congruence_v1 on G, E, I, E, G, I we get anti_congruent_triangles(E, G, I, G, E, I)
By sss_anti_congruence_v1 on I, J, E, I, J, G we get anti_congruent_triangles(E, I, J, G, I, J)
By sss_anti_congruence_v0 on E, G, J, G, E, J we get anti_congruent_triangles(E, G, J, G, E, J)
By sss_anti_congruence_v1 on E, I, J, G, I, J we get anti_congruent_triangles(E, I, J, G, I, J)
By sss_anti_congruence_v1 on E, J, G, G, J, E we get anti_congruent_triangles(E, G, J, G, E, J)
By sss_anti_congruence_v0 on G, I, E, E, I, G we get anti_congruent_triangles(E, G, I, G, E, I)
By sss_anti_congruence_v1 on G, E, J, E, G, J we get anti_congruent_triangles(E, G, J, G, E, J)
By sss_anti_congruence_v1 on G, E, I, E, G, I we get anti_congruent_triangles(E, G, I, G, E, I)
By sss_anti_congruence_v0 on J, I, E, J, I, G we get anti_congruent_triangles(E, I, J, G, I, J)
By sss_anti_congruence_v1 on I, J, E, I, J, G we get anti_congruent_triangles(E, I, J, G, I, J)
By sss_anti_congruence_v0 on G, I, J, E, I, J we get anti_congruent_triangles(E, I, J, G, I, J)
By sss_anti_congruence_v1 on J, I, G, J, I, E we get anti_congruent_triangles(E, I, J, G, I, J)
By sss_anti_congruence_v0 on G, J, E, E, J, G we get anti_congruent_triangles(E, G, J, G, E, J)
By sss_anti_congruence_v1 on G, J, I, E, J, I we get anti_congruent_triangles(E, I, J, G, I, J)
By sss_anti_congruence_v0 on E, G, J, G, E, J we get anti_congruent_triangles(E, G, J, G, E, J)
By line_inequality on Line(E, J), i, E we get i != Line(E, J)
By line_inequality on Line(E, I), Line(D, F), E we get Line(D, F) != Line(E, I)
By line_containment_inequality on midpoint(F, G), I, i we get I != midpoint(F, G)
By not_in_line_equivalent_to_not_collinear_v0_r on G, J, E we get G not in Line(E, J)
By line_inequality on Line(E, I), i, E we get i != Line(E, I)
By not_in_line_equivalent_to_not_collinear_v0_r on D, E, J we get D not in Line(E, J)
By line_inequality on Line(E, I), Line(E, G), I we get Line(E, G) != Line(E, I)
By line_containment_inequality on midpoint(E, G), A, j we get A != midpoint(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on C, E, I we get C not in Line(E, I)
By line_inequality on Line(E, J), Line(D, E), J we get Line(D, E) != Line(E, J)
By line_inequality on Line(E, I), Line(F, G), I we get Line(E, I) != Line(F, G)
By line_inequality on Line(E, I), Line(D, G), E we get Line(D, G) != Line(E, I)
By line_inequality on Line(D, H), Line(F, H), D we get Line(D, H) != Line(F, H)
By line_containment_inequality on midpoint(E, G), F, j we get F != midpoint(E, G)
By line_inequality on Line(E, J), Line(B, F), E we get Line(B, F) != Line(E, J)
By line_inequality on Line(E, I), g, I we get g != Line(E, I)
By not_in_line_equivalent_to_not_collinear_v0_r on B, E, I we get B not in Line(E, I)
By not_in_line_equivalent_to_not_collinear_v0_r on G, E, I we get G not in Line(E, I)
By line_containment_inequality on midpoint(F, G), H, i we get H != midpoint(F, G)
By not_in_line_equivalent_to_not_collinear_v0_r on A, E, J we get A not in Line(E, J)
By line_inequality on Line(E, J), Line(G, I), J we get Line(E, J) != Line(G, I)
By line_circle_intersection_has_at_most_two_points_0 on G, E, midpoint(E, G), c we get midpoint(E, G) not in c
By line_inequality on Line(E, I), Line(B, F), E we get Line(B, F) != Line(E, I)
By line_circle_intersection_has_at_most_two_points_0 on F, G, midpoint(F, G), d we get midpoint(F, G) not in d
By line_containment_inequality on midpoint(F, G), J, i we get J != midpoint(F, G)
By not_in_line_equivalent_to_not_collinear_v0_r on H, E, J we get H not in Line(E, J)
By line_inequality on Line(D, H), k, D we get k != Line(D, H)
By line_inequality on Line(E, I), Line(D, E), I we get Line(D, E) != Line(E, I)
By not_in_line_equivalent_to_not_collinear_v0_r on B, E, J we get B not in Line(E, J)
By line_inequality on Line(E, J), Line(D, G), E we get Line(D, G) != Line(E, J)
By line_inequality on Line(E, J), f, E we get f != Line(E, J)
By line_inequality on Line(E, I), j, E we get j != Line(E, I)
By line_circle_intersection_has_at_most_two_points_0 on E, G, midpoint(E, G), Circle(B, D, E) we get midpoint(E, G) not in Circle(B, D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on D, E, I we get D not in Line(E, I)
By line_inequality on Line(E, J), Line(F, G), J we get Line(E, J) != Line(F, G)
By line_containment_inequality on midpoint(F, G), C, i we get C != midpoint(F, G)
By line_inequality on Line(E, J), Line(E, H), J we get Line(E, H) != Line(E, J)
By line_inequality on Line(E, I), Line(G, I), E we get Line(E, I) != Line(G, I)
By line_inequality on Line(E, I), Line(E, H), I we get Line(E, H) != Line(E, I)
By not_in_line_equivalent_to_not_collinear_v0_r on J, I, E we get J not in Line(E, I)
By line_containment_inequality on midpoint(F, G), E, i we get E != midpoint(F, G)
By line_inequality on Line(E, I), Line(F, I), E we get Line(E, I) != Line(F, I)
By line_inequality on Line(D, H), Line(E, H), D we get Line(D, H) != Line(E, H)
By line_containment_inequality on midpoint(E, G), H, j we get H != midpoint(E, G)
By line_inequality on Line(E, J), Line(E, F), J we get Line(E, F) != Line(E, J)
By line_inequality on Line(E, I), Line(E, F), I we get Line(E, F) != Line(E, I)
By circumcenter_perpendicular_bisectors on F, G, E we get circumcenter(E, F, G) in perpendicular_bisector(F, G), circumcenter(E, F, G) in perpendicular_bisector(E, G), circumcenter(E, F, G) in perpendicular_bisector(E, F)
By tangent_chord_angle_v1 on D, F, I, A we get tangent(Line(A, D), Circle(D, F, I))
By external_angle_bisector_definition_v0_r on H, B, E, J we get Line(B, J) == external_angle_bisector(E, J, H)
By collinear_definition on G, midpoint(F, G), F we get midpoint(F, G) in Line(F, G), F in Line(G, midpoint(F, G)), Line(F, G) == Line(G, midpoint(F, G)), 0 == 2 * angle(midpoint(F, G), G, F) mod 360
By external_angle_bisector_definition_v0_r on H, D, E, J we get Line(D, J) == external_angle_bisector(E, J, H)
By altitude_definition on A, F, G, i we get i == altitude(A, F, G)
By collinear_definition on E, midpoint(E, G), G we get midpoint(E, G) in Line(E, G), G in Line(E, midpoint(E, G)), Line(E, G) == Line(E, midpoint(E, G)), 0 == 2 * angle(midpoint(E, G), E, G) mod 360
By altitude_definition on D, F, G, i we get i == altitude(D, F, G)
By anti_similar_triangle_basic_properties on J, B, E, J, B, G we get not_collinear(B, E, J), not_collinear(B, G, J), angle(J, B, E) == 0 - angle(J, B, G) mod 360, angle(B, E, J) == 0 - angle(B, G, J) mod 360, angle(E, J, B) == 0 - angle(G, J, B) mod 360, log(distance(B, J)) + log(distance(B, E)) == log(distance(B, J)) + log(distance(B, G)), log(distance(B, E)) + log(distance(G, J)) == log(distance(B, G)) + log(distance(E, J)), log(distance(E, J)) + log(distance(B, J)) == log(distance(G, J)) + log(distance(B, J))
By altitude_definition on D, G, E, j we get j == altitude(D, E, G)
By internal_angle_bisector_definition_v0_r on G, D, E, J we get Line(D, J) == internal_angle_bisector(E, J, G)
By anti_similar_triangle_basic_properties on E, B, J, G, B, J we get not_collinear(B, E, J), not_collinear(B, G, J), angle(E, B, J) == 0 - angle(G, B, J) mod 360, angle(B, J, E) == 0 - angle(B, J, G) mod 360, angle(J, E, B) == 0 - angle(J, G, B) mod 360, log(distance(B, E)) + log(distance(B, J)) == log(distance(B, G)) + log(distance(B, J)), log(distance(B, J)) + log(distance(E, J)) == log(distance(B, J)) + log(distance(G, J)), log(distance(E, J)) + log(distance(B, G)) == log(distance(G, J)) + log(distance(B, E))
By collinear_definition on G, midpoint(E, G), E we get midpoint(E, G) in Line(E, G), E in Line(G, midpoint(E, G)), Line(E, G) == Line(G, midpoint(E, G)), 0 == 2 * angle(midpoint(E, G), G, E) mod 360
By isosceles_triangle_midpoint on A, G, F we get midpoint(F, G) in median(A, F, G)
By collinear_definition on G, E, midpoint(E, G) we get E in Line(G, midpoint(E, G)), midpoint(E, G) in Line(E, G), Line(E, G) == Line(G, midpoint(E, G)), 0 == 2 * angle(E, G, midpoint(E, G)) mod 360
By altitude_definition on B, G, E, j we get j == altitude(B, E, G)
By collinear_definition on E, G, midpoint(E, G) we get G in Line(E, midpoint(E, G)), midpoint(E, G) in Line(E, G), Line(E, G) == Line(E, midpoint(E, G)), 0 == 2 * angle(G, E, midpoint(E, G)) mod 360
By internal_angle_bisector_definition_v0_r on G, B, E, J we get Line(B, J) == internal_angle_bisector(E, J, G)
By internal_angle_bisector_definition_v0_r on E, B, G, I we get Line(B, I) == internal_angle_bisector(E, I, G)
By perpendicular_bisector_properties on G, F we get perpendicular(Line(F, G), perpendicular_bisector(F, G)), midpoint(F, G) == line_intersection(Line(F, G), perpendicular_bisector(F, G))
By isosceles_triangle_midpoint on B, E, G we get midpoint(E, G) in median(B, E, G)
By isosceles_triangle_altitude_v3 on midpoint(F, G), G, F we get identical(perpendicular_bisector(F, G), internal_angle_bisector(F, midpoint(F, G), G), perpendicular_line(midpoint(F, G), Line(F, G)))
By perpendicular_lines_draw_intersection on Line(F, G), i we get exists(line_intersection(i, Line(F, G)))
By isosceles_triangle_altitude_v1 on midpoint(F, G), G, F we get identical(perpendicular_bisector(F, G), internal_angle_bisector(F, midpoint(F, G), G), perpendicular_line(midpoint(F, G), Line(F, G)))
By isosceles_triangle_altitude_v1 on midpoint(E, G), E, G we get identical(perpendicular_bisector(E, G), internal_angle_bisector(E, midpoint(E, G), G), perpendicular_line(midpoint(E, G), Line(E, G)))
By internal_angle_bisector_definition_v0_r on E, D, G, I we get Line(D, I) == internal_angle_bisector(E, I, G)
By isosceles_triangle_midpoint on J, E, G we get midpoint(E, G) in median(J, E, G)
By isosceles_triangle_midpoint on I, G, E we get midpoint(E, G) in median(I, E, G)
By isosceles_triangle_midpoint on D, G, E we get midpoint(E, G) in median(D, E, G)
By isosceles_triangle_midpoint on D, F, G we get midpoint(F, G) in median(D, F, G)
By collinear_definition on F, G, midpoint(F, G) we get G in Line(F, midpoint(F, G)), midpoint(F, G) in Line(F, G), Line(F, G) == Line(F, midpoint(F, G)), 0 == 2 * angle(G, F, midpoint(F, G)) mod 360
By collinear_definition on F, midpoint(F, G), G we get midpoint(F, G) in Line(F, G), G in Line(F, midpoint(F, G)), Line(F, G) == Line(F, midpoint(F, G)), 0 == 2 * angle(midpoint(F, G), F, G) mod 360
By isosceles_triangle_altitude_v3 on midpoint(E, G), E, G we get identical(perpendicular_bisector(E, G), internal_angle_bisector(E, midpoint(E, G), G), perpendicular_line(midpoint(E, G), Line(E, G)))
By collinear_definition on G, F, midpoint(F, G) we get F in Line(G, midpoint(F, G)), midpoint(F, G) in Line(F, G), Line(F, G) == Line(G, midpoint(F, G)), 0 == 2 * angle(F, G, midpoint(F, G)) mod 360
By isosceles_triangle_altitude_v1 on midpoint(F, G), F, G we get identical(perpendicular_bisector(F, G), internal_angle_bisector(F, midpoint(F, G), G), perpendicular_line(midpoint(F, G), Line(F, G)))
By perpendicular_lines_draw_intersection on Line(E, G), j we get exists(line_intersection(j, Line(E, G)))
By perpendicular_bisector_properties on G, E we get perpendicular(Line(E, G), perpendicular_bisector(E, G)), midpoint(E, G) == line_intersection(Line(E, G), perpendicular_bisector(E, G))
By isosceles_triangle_altitude_v1 on midpoint(E, G), G, E we get identical(perpendicular_bisector(E, G), internal_angle_bisector(E, midpoint(E, G), G), perpendicular_line(midpoint(E, G), Line(E, G)))
By isosceles_triangle_altitude_v3 on midpoint(F, G), F, G we get identical(perpendicular_bisector(F, G), internal_angle_bisector(F, midpoint(F, G), G), perpendicular_line(midpoint(F, G), Line(F, G)))
By isosceles_triangle_altitude_v3 on midpoint(E, G), G, E we get identical(perpendicular_bisector(E, G), internal_angle_bisector(E, midpoint(E, G), G), perpendicular_line(midpoint(E, G), Line(E, G)))
By anti_similar_triangle_basic_properties on D, J, G, D, J, E we get not_collinear(D, G, J), not_collinear(D, E, J), angle(D, J, G) == 0 - angle(D, J, E) mod 360, angle(J, G, D) == 0 - angle(J, E, D) mod 360, angle(G, D, J) == 0 - angle(E, D, J) mod 360, log(distance(D, J)) + log(distance(E, J)) == log(distance(D, J)) + log(distance(G, J)), log(distance(E, J)) + log(distance(D, G)) == log(distance(G, J)) + log(distance(D, E)), log(distance(D, E)) + log(distance(D, J)) == log(distance(D, G)) + log(distance(D, J))
By anti_similar_triangle_basic_properties on D, E, I, D, G, I we get not_collinear(D, E, I), not_collinear(D, G, I), angle(D, E, I) == 0 - angle(D, G, I) mod 360, angle(E, I, D) == 0 - angle(G, I, D) mod 360, angle(I, D, E) == 0 - angle(I, D, G) mod 360, log(distance(D, E)) + log(distance(G, I)) == log(distance(D, G)) + log(distance(E, I)), log(distance(E, I)) + log(distance(D, I)) == log(distance(G, I)) + log(distance(D, I)), log(distance(D, I)) + log(distance(D, E)) == log(distance(D, I)) + log(distance(D, G))
By anti_similar_triangle_basic_properties on H, F, D, F, H, D we get not_collinear(D, F, H), not_collinear(D, F, H), angle(H, F, D) == 0 - angle(F, H, D) mod 360, angle(F, D, H) == 0 - angle(H, D, F) mod 360, angle(D, H, F) == 0 - angle(D, F, H) mod 360, log(distance(F, H)) + log(distance(D, F)) == log(distance(F, H)) + log(distance(D, H)), log(distance(D, F)) + log(distance(D, F)) == log(distance(D, H)) + log(distance(D, H)), log(distance(D, F)) + log(distance(F, H)) == log(distance(D, H)) + log(distance(F, H))
By isosceles_triangle_properties on midpoint(F, G), G, F we get distance(F, midpoint(F, G)) == distance(G, midpoint(F, G)), angle(G, F, midpoint(F, G)) == angle(midpoint(F, G), G, F) mod 360
By isosceles_triangle_properties on midpoint(E, G), G, E we get distance(E, midpoint(E, G)) == distance(G, midpoint(E, G)), angle(G, E, midpoint(E, G)) == angle(midpoint(E, G), G, E) mod 360
By anti_similar_triangle_basic_properties on G, D, H, H, D, G we get not_collinear(D, G, H), not_collinear(D, G, H), angle(G, D, H) == 0 - angle(H, D, G) mod 360, angle(D, H, G) == 0 - angle(D, G, H) mod 360, angle(H, G, D) == 0 - angle(G, H, D) mod 360, log(distance(D, G)) + log(distance(D, G)) == log(distance(D, H)) + log(distance(D, H)), log(distance(D, G)) + log(distance(G, H)) == log(distance(D, H)) + log(distance(G, H)), log(distance(G, H)) + log(distance(D, G)) == log(distance(G, H)) + log(distance(D, H))
By log_of_2_times_distance on G, F, midpoint(F, G), G we get log(distance(F, G)) == 0.6931471805599453 + log(distance(G, midpoint(F, G)))
By power_of_a_point_definition on B, A, G, Circle(A, D, F) we get log(distance(A, B)) + log(distance(B, G)) == log(power_of_a_point(B, Circle(A, D, F)))
By collinear_definition on midpoint(E, G), G, E we get G in Line(E, midpoint(E, G)), E in Line(G, midpoint(E, G)), Line(E, midpoint(E, G)) == Line(G, midpoint(E, G)), 0 == 2 * angle(G, midpoint(E, G), E) mod 360
By altitude_definition on I, G, E, j we get j == altitude(I, E, G)
By log_of_2_times_distance on G, E, midpoint(E, G), G we get log(distance(E, G)) == 0.6931471805599453 + log(distance(G, midpoint(E, G)))
By log_of_2_times_distance on G, F, F, midpoint(F, G) we get log(distance(F, G)) == 0.6931471805599453 + log(distance(F, midpoint(F, G)))
By anti_similar_triangle_basic_properties on G, D, I, E, D, I we get not_collinear(D, G, I), not_collinear(D, E, I), angle(G, D, I) == 0 - angle(E, D, I) mod 360, angle(D, I, G) == 0 - angle(D, I, E) mod 360, angle(I, G, D) == 0 - angle(I, E, D) mod 360, log(distance(D, E)) + log(distance(D, I)) == log(distance(D, G)) + log(distance(D, I)), log(distance(D, I)) + log(distance(E, I)) == log(distance(D, I)) + log(distance(G, I)), log(distance(E, I)) + log(distance(D, G)) == log(distance(G, I)) + log(distance(D, E))
By collinear_definition on midpoint(F, G), F, G we get F in Line(G, midpoint(F, G)), G in Line(F, midpoint(F, G)), Line(F, midpoint(F, G)) == Line(G, midpoint(F, G)), 0 == 2 * angle(F, midpoint(F, G), G) mod 360
By anti_similar_triangle_basic_properties on G, J, D, E, J, D we get not_collinear(D, G, J), not_collinear(D, E, J), angle(G, J, D) == 0 - angle(E, J, D) mod 360, angle(J, D, G) == 0 - angle(J, D, E) mod 360, angle(D, G, J) == 0 - angle(D, E, J) mod 360, log(distance(E, J)) + log(distance(D, J)) == log(distance(G, J)) + log(distance(D, J)), log(distance(D, J)) + log(distance(D, E)) == log(distance(D, J)) + log(distance(D, G)), log(distance(D, E)) + log(distance(G, J)) == log(distance(D, G)) + log(distance(E, J))
By anti_similar_triangle_basic_properties on D, H, E, D, E, H we get not_collinear(D, E, H), not_collinear(D, E, H), angle(D, H, E) == 0 - angle(D, E, H) mod 360, angle(H, E, D) == 0 - angle(E, H, D) mod 360, angle(E, D, H) == 0 - angle(H, D, E) mod 360, log(distance(D, E)) + log(distance(E, H)) == log(distance(D, H)) + log(distance(E, H)), log(distance(E, H)) + log(distance(D, E)) == log(distance(E, H)) + log(distance(D, H)), log(distance(D, E)) + log(distance(D, E)) == log(distance(D, H)) + log(distance(D, H))
By isosceles_triangle_altitude_v3 on I, G, E we get identical(perpendicular_bisector(E, G), internal_angle_bisector(E, I, G), perpendicular_line(I, Line(E, G)))
By log_of_2_times_distance on G, E, midpoint(E, G), E we get log(distance(E, G)) == 0.6931471805599453 + log(distance(E, midpoint(E, G)))
By altitude_definition on J, G, E, j we get j == altitude(J, E, G)
By isosceles_triangle_properties on midpoint(E, G), E, G we get distance(E, midpoint(E, G)) == distance(G, midpoint(E, G)), angle(E, G, midpoint(E, G)) == angle(midpoint(E, G), E, G) mod 360
By isosceles_triangle_altitude_v3 on J, E, G we get identical(perpendicular_bisector(E, G), internal_angle_bisector(E, J, G), perpendicular_line(J, Line(E, G)))
By collinear_definition on midpoint(E, G), E, G we get E in Line(G, midpoint(E, G)), G in Line(E, midpoint(E, G)), Line(E, midpoint(E, G)) == Line(G, midpoint(E, G)), 0 == 2 * angle(E, midpoint(E, G), G) mod 360
By collinear_definition on midpoint(F, G), G, F we get G in Line(F, midpoint(F, G)), F in Line(G, midpoint(F, G)), Line(F, midpoint(F, G)) == Line(G, midpoint(F, G)), 0 == 2 * angle(G, midpoint(F, G), F) mod 360
By isosceles_triangle_properties on midpoint(F, G), F, G we get distance(F, midpoint(F, G)) == distance(G, midpoint(F, G)), angle(F, G, midpoint(F, G)) == angle(midpoint(F, G), F, G) mod 360
By power_of_a_point_definition on A, G, B, Circle(B, D, E) we get log(distance(A, G)) + log(distance(A, B)) == log(power_of_a_point(A, Circle(B, D, E)))
By isosceles_triangle_altitude_v3 on center(d), G, F we get identical(perpendicular_bisector(F, G), internal_angle_bisector(F, center(d), G), perpendicular_line(center(d), Line(F, G)))
By isosceles_triangle_altitude_v3 on center(d), F, G we get identical(perpendicular_bisector(F, G), internal_angle_bisector(F, center(d), G), perpendicular_line(center(d), Line(F, G)))
By isosceles_triangle_altitude_v3 on I, E, G we get identical(perpendicular_bisector(E, G), internal_angle_bisector(E, I, G), perpendicular_line(I, Line(E, G)))
By isosceles_triangle_altitude_v3 on J, G, E we get identical(perpendicular_bisector(E, G), internal_angle_bisector(E, J, G), perpendicular_line(J, Line(E, G)))
By power_of_a_point_definition on A, C, F, Circle(C, D, E) we get log(distance(A, C)) + log(distance(A, F)) == log(power_of_a_point(A, Circle(C, D, E)))
By anti_similar_triangle_basic_properties on I, G, B, I, E, B we get not_collinear(B, G, I), not_collinear(B, E, I), angle(I, G, B) == 0 - angle(I, E, B) mod 360, angle(G, B, I) == 0 - angle(E, B, I) mod 360, angle(B, I, G) == 0 - angle(B, I, E) mod 360, log(distance(E, I)) + log(distance(B, G)) == log(distance(G, I)) + log(distance(B, E)), log(distance(B, E)) + log(distance(B, I)) == log(distance(B, G)) + log(distance(B, I)), log(distance(B, I)) + log(distance(E, I)) == log(distance(B, I)) + log(distance(G, I))
By anti_similar_triangle_basic_properties on B, E, I, B, G, I we get not_collinear(B, E, I), not_collinear(B, G, I), angle(B, E, I) == 0 - angle(B, G, I) mod 360, angle(E, I, B) == 0 - angle(G, I, B) mod 360, angle(I, B, E) == 0 - angle(I, B, G) mod 360, log(distance(B, E)) + log(distance(G, I)) == log(distance(B, G)) + log(distance(E, I)), log(distance(E, I)) + log(distance(B, I)) == log(distance(G, I)) + log(distance(B, I)), log(distance(B, I)) + log(distance(B, E)) == log(distance(B, I)) + log(distance(B, G))
By power_of_a_point_definition on C, F, A, Circle(A, D, F) we get log(distance(C, F)) + log(distance(A, C)) == log(power_of_a_point(C, Circle(A, D, F)))
By power_of_a_point_definition on J, D, B, Circle(B, D, E) we get log(distance(D, J)) + log(distance(B, J)) == log(power_of_a_point(J, Circle(B, D, E)))
By perpendicular_bisector_sufficient_conditions on F, E, D, C we get Line(C, D) == perpendicular_bisector(E, F)
By power_of_a_point_definition on C, B, E, Circle(B, D, E) we get log(distance(B, C)) + log(distance(C, E)) == log(power_of_a_point(C, Circle(B, D, E)))
By power_of_a_point_definition on I, D, B, Circle(B, D, E) we get log(distance(D, I)) + log(distance(B, I)) == log(power_of_a_point(I, Circle(B, D, E)))
By power_of_a_point_definition on B, C, E, Circle(C, D, E) we get log(distance(B, C)) + log(distance(B, E)) == log(power_of_a_point(B, Circle(C, D, E)))
By between_implies_angles on F, midpoint(F, G), G we get 180 == angle(F, midpoint(F, G), G) mod 360, 0 == angle(midpoint(F, G), G, F) mod 360, 0 == angle(G, F, midpoint(F, G)) mod 360
By between_implies_angles on G, midpoint(F, G), F we get 180 == angle(G, midpoint(F, G), F) mod 360, 0 == angle(midpoint(F, G), F, G) mod 360, 0 == angle(F, G, midpoint(F, G)) mod 360
By isosceles_triangle_altitude_v2 on D, F, E we get identical(perpendicular_bisector(E, F), internal_angle_bisector(E, D, F), perpendicular_line(D, Line(E, F)))
By between_implies_angles on G, midpoint(E, G), E we get 180 == angle(G, midpoint(E, G), E) mod 360, 0 == angle(midpoint(E, G), E, G) mod 360, 0 == angle(E, G, midpoint(E, G)) mod 360
By isosceles_triangle_altitude_v2 on C, E, F we get identical(perpendicular_bisector(E, F), internal_angle_bisector(E, C, F), perpendicular_line(C, Line(E, F)))
By between_implies_angles on E, midpoint(E, G), G we get 180 == angle(E, midpoint(E, G), G) mod 360, 0 == angle(midpoint(E, G), G, E) mod 360, 0 == angle(G, E, midpoint(E, G)) mod 360
By isosceles_triangle_altitude_v2 on C, F, E we get identical(perpendicular_bisector(E, F), internal_angle_bisector(E, C, F), perpendicular_line(C, Line(E, F)))
By isosceles_triangle_altitude_v2 on D, E, F we get identical(perpendicular_bisector(E, F), internal_angle_bisector(E, D, F), perpendicular_line(D, Line(E, F)))
