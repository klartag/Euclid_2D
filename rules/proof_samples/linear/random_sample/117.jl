Assumptions:
A, B, C, D, E, F, G, H: Point
f, g, h, i, j: Line
c: Circle
distinct(A, B, C, D, E, F, G, H)
distinct(f, g, h, i, j)
f == Line(A, B)
g == Line(B, C)
h == parallel_line(C, f)
i == parallel_line(A, g)
D == line_intersection(h, i)
E == midpoint(B, D)
c == Circle(A, D, E)
F == projection(C, f)
G in f, c
j == Line(D, G)
H == projection(B, j)

Embedding:
C := {"x": "0.54507456741650306408786264000809751451015472412109375", "y": "0.97749243179755229693483897790429182350635528564453125"}
B := {"x": "0.373949672626749995973938212046050466597080230712890625", "y": "-0.855466686475306659076522919349372386932373046875"}
g := {"point": {"x": "0.373949672626749995973938212046050466597080230712890625", "y": "-0.855466686475306659076522919349372386932373046875"}, "direction": {"x": "0.171124894789753068113924427962047047913074493408203125", "y": "1.83295911827285895601136189725366421043872833251953125"}}
A := {"x": "0.51947605185898115820464226999320089817047119140625", "y": "-0.2441366138605476354683787576504983007907867431640625"}
i := {"point": {"x": "0.51947605185898115820464226999320089817047119140625", "y": "-0.2441366138605476354683787576504983007907867431640625"}, "direction": {"x": "0.171124894789753068113924427962047047913074493408203125", "y": "1.83295911827285895601136189725366421043872833251953125"}}
f := {"point": {"x": "0.51947605185898115820464226999320089817047119140625", "y": "-0.2441366138605476354683787576504983007907867431640625"}, "direction": {"x": "-0.145526379232231162230704057947150431573390960693359375", "y": "-0.6113300726147590236081441616988740861415863037109375"}}
h := {"point": {"x": "0.54507456741650306408786264000809751451015472412109375", "y": "0.97749243179755229693483897790429182350635528564453125"}, "direction": {"x": "-0.145526379232231162230704057947150431573390960693359375", "y": "-0.6113300726147590236081441616988740861415863037109375"}}
D := {"x": "0.690600946648734226318566697955247946083545684814453125", "y": "1.58882250441231132054298313960316590964794158935546875"}
E := {"x": "0.532275309637742111146252455000649206340312957763671875", "y": "0.366677908968502330733230110126896761357784271240234375"}
c := {"center": {"x": "9.0675326720306527623595640463902786078730457009111603508121916786550122687834594740886327874374318402874996377462419953335214313190347157221455518807326607316542442994812369669089543494474051151155679013016056764258852673372305848681691501739491445886933167290553513249541344331409063942869884333595918253543161957101266320121604340840460361464799921806115130223670640234701078582584929937603473000079600835800518774447872931144494765229134330270158816804844564265895150238911116019640812058449391773482937038065598731149611312885308324248596121391599659259896291209155577450256394522305684920001412446081265386124595333292229119334332667641190963045851548529486218537181213014302000008269794811021271527444517780192402110982095122319323965775863578646435444745295583189052122903756514250442722827713951281777485055053354071102021303257007142772417972311088517545648601960187477986075908723978770600226903060554849164678251289505575305901425040338313131419046635100708587280152264713640767007918264591079876311808191142639554855254707078907719109521384346440689443227096822061502421938784786651140861812053262852630715240025195329626781281549339849168802423638782260363069663595560079710326952003157630315846129356567424758530538342770303597228567196770126943174931208616911715610461981652095558321361744459985627368241902592162343821565497346122802655673154217243393591713828021755125097536876977711100088897589162359417387841216441062738673588301754080983932654629385913624328781250021506011564308598706102549354112011622412253176631781778675796965487164855736545137900962622897971943145986184247561707606743585436729833584055663249996856800968399758937623011623944500623408243560362992819458091335907115082961631987475907048673571730374510159379919462837201234793389873928368713867307827158149804756816416010801574780286083287558632725966350799935632207959855469298034327759655204530102938438574516041094595174531814040766799743755065550691765610304295120429648605663237008710774456754171195998947", "y": "-0.11771473279162929856533038376465973944154772214955598972497845676782364804305367321050699796899529245590731067601248095919941125885218858357654071249951693215009105910334398995581093395458073603420886805416249054496609411410825978843139423024594325125854175119758261646828213891356043115708386057445719839679497868430210720047769216557035016559617819812624645618404097455629165239752991624152155462320296469890786523436745607427044561288611485976027827404278994480036288484801066605166711804735504619848907733737275397415115047228318138052909367031158987869447761183201821636925671968626654238397235704693115075596076316933380809083235288368788368079196222564537999090344093314441504301366524410022744853531732624975506166827340411363307929549600011625819634771184217079437398141819156504534481908353694749059232349225191401946217961462507703432056314270187425093461237852021635656624550554812767438831213351892838386702716735512881129729210699318496794553451873724090484961622553739761040571795299634473774473302246982081837604741385934240913685102202737394993294201050521946527713869987613690312116910321980217392440437303013883247892909413754909726207539076477177024280658844521792947951707599806543471966633571633766138313021345332777394506609441586159516190181076382842324324308147778469081082946263413213561332772095457520560983559643409136712779826148557819739039215027996211988578284038750982871687022466711272655690858267998698726747021075012616599849008155595858701026025425127500738107652034191791615808795954586372029663303348251896970392589979465845449072020648825280699758295800986213281247233813394996212023186121850027456178722080529105691464458921138855876473097992205347786234140827485206974208152265054283111497782469649650367609438077340211045665276079464552704074785565252249655724772092439415727860534950309403574624240840963784125219965971342384941358300766541445529984628430405072119520751414332450938289138008335735407779316632470125554559182246063569072227848873018153191411"}, "radius_squared": "73.085254473673745317332568249582283945579434084224013587577236244508672370764736759794142344413341733037207962486731820217355749753860782278573730135683836302128352590026373968763733413876284875767948586455604128041578784676093803117881413686244551800278639706997233801544331749230092053039465341749938436555852659287400336658563699490813525919555902860226938997847352464139076575837232363700889302043191188952886141477513199416339780248513375948786145862757325869227548855945665544743645824556120938785685166920891416273122698709379575440474720382264136014896969656605385876401672858960991634879885233044964858897835793851567808071849255958708095367459046573885985492297015812861878946226755114947051245790970453798853377777665600066593200154050708029166103986129223175223925764936281682527406865809198369502000205388614838103464667967337862414904601346521735649871829614217619946903248629692934956750750790103613309900503105803501457739174909562431178099679212739235191374976787032037938433757063297674557117655210792907300298324231674498886643226753453363696282244885980258659791743559115324194322695987409850953751661614262301129518269178879878331860112251464425712530802380642546956447299799472550547671772815860970716548889099180745092088902865998808375733359027312819116552334702380253416066237247643835049537754723138214368468374120855449975603107550170761081854157073009201192501783870122517699596860590956462730133339213827658140667644364145760274511363711177411142097222002346421431069464123477632061635518115038158722002772632807943609145356895767135159947828250197324792500883486635681899742397171072909953506126579598328391930394323142548451882130082905620574003081274001939183321248690770684439775240549522351743619586553899634051601094357412083249472916322245204671657046855634048689607020933066954952325505318972830698350051849554606767304903424022624988974600298282863288327493225721703566637367288726326660252335668484459798314349536683906748262340707278206971534157215547020675706"}
G := {"x": "1.4932721373055863121201475394885308904266696072918299385726830221559756517173521799627166402528212566431103104730870009779768934701598077115275856268737637586028771370888358679568848735912964224179541886404521077983400630622801176790032709664796301993734762799905375489839534819412714921843132900008272646885090244057522613773015079485905684912969211476865025529848203091139319724396923804211666133703684414421247039701575429477499522160332333240784996181957876042269387925438492119060441182175546421658790901648228246074215757825080380465001656359978936502512200557599907522622727329136058417808403196830734885347145804615768827364733295726958101861648400435962072613519617229924222433763571421324439901091438877755571652164034389515379002462864015257720792919406985861320058176027010010780938955672552755966679566172982450047417988182484766109288120199017413414221257789140282012081627638413674860541338287245173528062725183730992742476029412748684202002946333929583492322402578177282660440026050898729031913039532866785894508744874696434462194587670011736960779185137671121209413630097104490069875089951777666319111602451505765851125134172929360072885058117694916844855875577170362909005705994200267125936012960816776302302526358428806007552541529733777590680718166310066678935931027908220393803694583213389003687295829475216177459122382328108215596810272394737818865679352566242044960792353058443381179952834567684246654425543934224902364383805953304452628465079923057670714574970220563361347828311809262847927213846934652275204641624999700869693501332168129370350363704007590026617290664436597202451993523415025112836038672316246777620416229938406220569047618623267070550096662744990664196185589772148673085699302906662884327842827417151617260483025152954434394841217169911630562575283329040862234543591915282489174692261573345054417586293716094073669421241858400269417484450721233542993370259074023228365527513347283805181812350814090492258010480302905108709513614778368879350404012885299670301", "y": "3.8466051112396385402329578877187507760806859840862387406962318825478113845758793256669697866498649957259548025629675199867782017818207602563896585341344958356843383908739124395539868943225557035093386253088684296991339058011656269227887767248428924242968814566770887333685462722696412692203911377099840848028439264995545506253091739324801555605198462734110516910707704860874057551677522332440489544073243090577357830371147567963188801861786582076191764538728426603348602940501122451849765952646446144522146123822588650474152657544374419509425822238378579581205809209040189283502298912308696567082508573692173177916064877003909780629881380064034863517410778416005992725630822889210357778873231410507476900146962804908411813008297060125257161941188639200881662035001977920754556078905430690170326103535491837290730354227773977104315878428124798428336488948122880873598806102334786809196288951343653098266702495614228813967287254698613427731610057391395036261583626067432206099696675123245262461390856617145553056964157649629654519536154923514353717125870897113057006779188559321830418267190689470817087555265313364997836171503441089490606594763389306578817558297999829949741097186844980227046339341699953667619567298902872684349318393378791061261899063166432822735257261190851356312303469048643795812569098852431682290248420104455599421812257251717351821257388860430778814083162254164210945335289189237625268731379391124022464550159217923930679494341714597362576325677979750014085218945171960180481443554278850610119292938170013384060299860837298205064533153045400068931047158616654930809845546004338259808542358059944161064191843464267305138808875487079427170326653835078072090611754379216355669818413780540438665652471058700816414427694723235989042839809923284135187055106036902833058229084799451086584502144809102345120055585081185083558719028229373626658014706354479585271332771286704598411856145491054740581240727940222853797641703484931540090838737332795074610258953937097901424685986456278815093"}
j := {"point": {"x": "0.690600946648734226318566697955247946083545684814453125", "y": "1.58882250441231132054298313960316590964794158935546875"}, "direction": {"x": "0.80267119065685208580158084153328294434312392247737681357268302215597565171735217996271664025282125664311031047308700097797689347015980771152758562687376375860287713708883586795688487359129642241795418864045210779834006306228011767900327096647963019937347627999053754898395348194127149218431329000082726468850902440575226137730150794859056849129692114768650255298482030911393197243969238042116661337036844144212470397015754294774995221603323332407849961819578760422693879254384921190604411821755464216587909016482282460742157578250803804650016563599789365025122005575999075226227273291360584178084031968307348853471458046157688273647332957269581018616484004359620726135196172299242224337635714213244399010914388777555716521640343895153790024628640152577207929194069858613200581760270100107809389556725527559666795661729824500474179881824847661092881201990174134142212577891402820120816276384136748605413382872451735280627251837309927424760294127486842020029463339295834923224025781772826604400260508987290319130395328667858945087448746964344621945876700117369607791851376711212094136300971044900698750899517776663191116024515057658511251341729293600728850581176949168448558755771703629090057059942002671259360129608167763023025263584288060075525415297337775906807181663100666789359310279082203938036945832133890036872958294752161774591223823281082155968102723947378188656793525662420449607923530584433811799528345676842466544255439342249023643838059533044526284650799230576707145749702205633613478283118092628479272138469346522752046416249997008696935013321681293703503637040075900266172906644365972024519935234150251128360386723162467776204162299384062205690476186232670705500966627449906641961855897721486730856993029066628843278428274171516172604830251529544343948412171699116305625752833290408622345435919152824891746922615733450544175862937160940736694212418584002694174844507212335429933702590740232283655275133472838051818123508140904922580104803029051087095136147783688793504040128852996703013", "y": "2.2577826068273272196899747481155848664327443947307699906962318825478113845758793256669697866498649957259548025629675199867782017818207602563896585341344958356843383908739124395539868943225557035093386253088684296991339058011656269227887767248428924242968814566770887333685462722696412692203911377099840848028439264995545506253091739324801555605198462734110516910707704860874057551677522332440489544073243090577357830371147567963188801861786582076191764538728426603348602940501122451849765952646446144522146123822588650474152657544374419509425822238378579581205809209040189283502298912308696567082508573692173177916064877003909780629881380064034863517410778416005992725630822889210357778873231410507476900146962804908411813008297060125257161941188639200881662035001977920754556078905430690170326103535491837290730354227773977104315878428124798428336488948122880873598806102334786809196288951343653098266702495614228813967287254698613427731610057391395036261583626067432206099696675123245262461390856617145553056964157649629654519536154923514353717125870897113057006779188559321830418267190689470817087555265313364997836171503441089490606594763389306578817558297999829949741097186844980227046339341699953667619567298902872684349318393378791061261899063166432822735257261190851356312303469048643795812569098852431682290248420104455599421812257251717351821257388860430778814083162254164210945335289189237625268731379391124022464550159217923930679494341714597362576325677979750014085218945171960180481443554278850610119292938170013384060299860837298205064533153045400068931047158616654930809845546004338259808542358059944161064191843464267305138808875487079427170326653835078072090611754379216355669818413780540438665652471058700816414427694723235989042839809923284135187055106036902833058229084799451086584502144809102345120055585081185083558719028229373626658014706354479585271332771286704598411856145491054740581240727940222853797641703484931540090838737332795074610258953937097901424685986456278815093"}}
H := {"x": "-0.11640062483929040971200095436112508936942867557060225660684975026552184020020180278790730789554896105253975472332114514535282425535813867723796002468121792175212825116880148606199004063577993575887048488294649165080513734337309592549647756684024714879392801801625901880690822206842531473944547711138462278163631431122553147778196766706732571227306046441954299512657221621874343802650063185243469240675568297700639727227781443523760046008936492138331115091039880729713544046782430049083555169065417013289954371584102003667691158964436202329894407652763789538284118446602546102403538309231549127566668892916069101179418052352165782380082604766377464577849584257990352900266764043146434832523137617724730567606449921848696227864195076782536491010840434365437890018606134525474925071866003704786611101266377412790827874118282398320772086396321937668947551883939433522707196254945556102573103516245571072281862301297653103625106308524814155819449332915202180164720511784871282610172183642641955317932754246624008564452925702941442579517697378500879135718454639240928751528716358179178996220516225465133824331320310038828704367629804493516766194206672089151353013858189884987967839538864606902002000911436307204781144232689361852815294410742131236395051516930503521161243350508689366662071574007341819999317775792134186259330599081388351418934084561080681553837761758187738403669351612855528662762274193556584420951385114320736447426728368831621997001117825220809039420869038588612431249483600572038898793397054728244420931597600867698013472471084749037844015427094944895069621249330356707512650411669596667443905995660585716379106577850856223309173039409827688317344338299338846493450416357930472127515166785459651725706945596868344446101410332966891907731168541511691864459673303785754172869737086692199560780995026698859951778920863962848360844128687829094248652419164193894090558806104763207176174553978793049020706497361020978235715508236824322269533728683785570479368506550246262562700020689865211664", "y": "-0.68114075451187135211108464232553846655519607786095942180897748669547712802277343991785729366451518499785245685787069505052212136966788818719477766345452934050691869741320880256077386303099282440058975243532071737909919186608019573731123766482400946967310299093677514618873567747520596141626650811146033770168098558610945846785326707338928057014483470858285799454488636888157699214951423913347332904543032423347143108155660993199792571629303934425568243980353115577714558935828764073755844295043970911366506677915874999364373409003640840539776341787196083307094393535705891043245756577547931738951375020992539456261431708636958460369319001604836518937691615823942625862366436872642176258218677156318555155879400187873361253640533212564135442830060832506992489478106721281827161741130629690516481861870087061551532955934583475650054042073428309639889198882316312970780314239588444855509618625516165877959385270829661189681748343386609123429316163372414349290620420719490664726365188477037011975702380924572769829969328256147658663755322230963315978966078534587324350655861790826559112270395105126998948059158121863756629481646892411608689410417581203129922212699327915950629005377427264075535822351665910363802260062813672839668483858208093560670968322120827130574544082850510395309469551160222763103668017435037366401720981027777200453633050319526700341349072770047371624612008037234962157064362268502781930881579492613839490917809517287609398439824164435150424285781452394058449460034650545735945324556553260913564705112900992348665524874564288643545985378422439784499004785085176623478840319699491669213902347152394095488833906067103211365741684469357399519235812897587743403159199540310693035115374373497861656143197922177757736215287902467266446571765419736284416005152163081120659959566396039052386503447039622986168780482744021254192843830430274877935123834304806059256769885032802234280387638962845208657602670800896274577221560129524313652822797245219645585742235032173620603402071417401178514"}
F := {"x": "0.7960606728104188519062871802447197315996443707492449311983781322913031135868960578563440694159636881797701601466851223367021172018175064392495576347481295152350336547372388021058830815788455444901405760214102184977700947546820561711489064588803249239510302345617592507142445595228838410530338920993026317327289180748776812334652296040981385473452665043285041930644962058457405400611899598133935101865856937925436398963108294909997435294404895565920893757230203247648682360970188308731749339657933556160729173055278663732741639784563448702360172239876630525086137049596705588650049924098955524444084123474937911240422670701068133728985004502999432121423246415640048540404746617386960943420297969152981279433426145041102297618566117126569896712951664193478197157704072577079341759114544485367473956302325943609021485710914746907519868505098106019172867574809884323745895318266420109241353346554582314183107948177689640769063826832907640460006463531702344601329758358956028668458343264489395531708368815455796975354430562800379747302249701400834016750587378395275618637717985367188416213947793204254181264756622297776176812211636267129768212592898072310326298152154861424982614394208869926671584783077520710076730304622826344447954505568551445549733194802099355801887771123616801705741303156927625818116496975142416192439171573213431690941295820167355615009642068175442042845865176646107369582901763955286166217072160994478058332001691535851691001164326844317025718234593033214606651080345272263506385507001487867977431338933754046170467618748703701300270638439631990312017220099960047651439189541341263332694532671365081315934583128464799437249920160105165102886033975178872813580658598139811757325449400719737454739171601775608616808042638622680213479600803748744236720952168834210904806077403590633557650456708618610129545715171674250208091705173972364774452649464074299787529777802696512174595046923608222275481327878192184197545610244010689481337458417737013164236797241156614443451766098777225377", "y": "0.91774549509059154444958270422238817971330694396103706398936038645564188600999466073169615512802630102486774214799158139691025377133158922796827309110831840951974240279107575950182111252775088047088050592779843884033351681039179982576578534200913928485016697913966366407423083398375047918369389219536815603009527869511422288750358436773125997560348681096724255511127060041682879102836919895540948022590178673093401702797086862627364877530237346889767174259040834143279234892637069402488195630764990213891007534824897131249819137670636737077691762990373309181562111452335046736830969830206769060312513476742946546079772480822110622597835943571032136804989646377787059108839203431164941440922565427225253937571937331249403483332809074948583383141913600047122078311680575528141987583696823246289549686836099326147953036989669217308778045202900390535390468312174789672255706088669954635051782581508510975018426693721849293768971118950158890887455982809398532794324529859147317258469100483024179817910768039163277769560570099632166605585206139640312272925348048884770397027202139249533928058808364406333226463455484769716702414501345223046070593575866748294245660679693810763822331184919190490131131142373762010281512735232405670454567677528063765905114139733897518544347675978576321706312888021292853477823798833569908865290181464334169961345286412008997440454638521840326004227495613658921559967307945298379197908075993721349363528704570407399035796869499368577825492392860115622391272762260312358157781690920123313786507794614223748544500227317425395121184911179337428902901196178278287367986903057801782385960953318129078770435244283557246511418838431067631593935283376101420180898113095009982988500785928601538038820876557948390387900167006292880257039734094687123721065011475390637735250506098869394961348837081894739423225901876106298049316867251419661072893764635857066021764373396473066744829213227705699744697638744478536524820953704351327491177152260089975532445768900815101730192493973747591865"}

Need to prove:
concyclic(E, F, G, H)

Proof:
By line_definition on F, C, perpendicular_line(C, f) we get Line(C, F) == perpendicular_line(C, f)
By line_definition on B, H, perpendicular_line(B, j) we get Line(B, H) == perpendicular_line(B, j)
By line_definition on A, F, f we get f == Line(A, F)
By line_definition on F, G, f we get f == Line(F, G)
By line_definition on D, C, h we get h == Line(C, D)
By line_definition on H, G, j we get j == Line(G, H)
By line_definition on D, H, j we get j == Line(D, H)
By line_definition on D, A, i we get i == Line(A, D)
By line_definition on B, F, f we get f == Line(B, F)
By line_definition on A, G, f we get f == Line(A, G)
By line_definition on B, G, f we get f == Line(B, G)
By perpendicular_line_definition on G, j, perpendicular_line(B, j) we get j == perpendicular_line(G, perpendicular_line(B, j))
By circle_definition on A, G, E, c we get c == Circle(A, E, G)
By perpendicular_line_definition on H, j, perpendicular_line(B, j) we get j == perpendicular_line(H, perpendicular_line(B, j))
By circle_definition on E, D, G, c we get c == Circle(D, E, G)
By perpendicular_line_definition on B, f, perpendicular_line(C, f) we get f == perpendicular_line(B, perpendicular_line(C, f))
By line_intersection_definition on D, i, j we get D == line_intersection(i, j)
By circle_definition on G, D, A, c we get c == Circle(A, D, G)
By line_intersection_definition on C, g, h we get C == line_intersection(g, h)
By perpendicular_line_definition on H, perpendicular_line(B, j), j we get perpendicular_line(B, j) == perpendicular_line(H, j)
By line_intersection_definition on A, f, i we get A == line_intersection(f, i)
By line_intersection_definition on D, j, h we get D == line_intersection(h, j)
By line_intersection_definition on G, j, f we get G == line_intersection(f, j)
By perpendicular_line_definition on F, perpendicular_line(C, f), f we get perpendicular_line(C, f) == perpendicular_line(F, f)
By perpendicular_line_definition on F, f, perpendicular_line(C, f) we get f == perpendicular_line(F, perpendicular_line(C, f))
By perpendicular_line_definition on G, f, perpendicular_line(C, f) we get f == perpendicular_line(G, perpendicular_line(C, f))
By line_intersection_definition on B, f, g we get B == line_intersection(f, g)
By perpendicular_line_definition on D, j, perpendicular_line(B, j) we get j == perpendicular_line(D, perpendicular_line(B, j))
By perpendicular_line_definition on A, f, perpendicular_line(C, f) we get f == perpendicular_line(A, perpendicular_line(C, f))
By line_unique_intersection_v1 on i, j, D, H we get H not in i
By line_unique_intersection_v1 on g, f, B, A we get A not in g
By line_unique_intersection_v1 on j, h, D, C we get C not in j
By line_unique_intersection_v1 on i, f, A, F we get F not in i
By line_unique_intersection_v1 on j, i, D, A we get A not in j
By line_unique_intersection_v1 on h, g, C, B we get B not in h
By line_unique_intersection_v1 on f, g, B, C we get C not in f
By line_unique_intersection_v1 on i, h, D, C we get C not in i
By line_unique_intersection_v1 on i, j, D, G we get G not in i
By line_unique_intersection_v1 on g, f, B, G we get G not in g
By line_unique_intersection_v1 on f, i, A, D we get D not in f
By line_unique_intersection_v1 on h, i, D, A we get A not in h
By line_unique_intersection_v1 on f, j, G, H we get H not in f
By line_unique_intersection_v1 on h, j, D, G we get G not in h
By line_unique_intersection_v1 on g, f, B, F we get F not in g
By line_unique_intersection_v1 on j, f, G, B we get B not in j
By line_unique_intersection_v1 on i, f, A, B we get B not in i
By line_unique_intersection_v1 on h, j, D, H we get H not in h
By line_unique_intersection_v1 on g, h, C, D we get D not in g
By line_unique_intersection_v1 on j, f, G, F we get F not in j
By parallel_line_definition on F, f, h we get f == parallel_line(F, h)
By between_imply_not_between on B, E, D we get collinear_and_not_between(D, B, E)
By between_imply_not_between on D, E, B we get collinear_and_not_between(B, D, E)
By parallel_line_definition on A, f, h we get f == parallel_line(A, h)
By parallel_line_definition on B, f, h we get f == parallel_line(B, h)
By parallel_line_definition on G, f, h we get f == parallel_line(G, h)
By parallel_line_definition on C, g, i we get g == parallel_line(C, i)
By parallel_line_definition on D, h, f we get h == parallel_line(D, f)
By parallel_line_definition on D, i, g we get i == parallel_line(D, g)
By parallel_line_definition on B, g, i we get g == parallel_line(B, i)
By different_points_v1 on D, G we get 0 != distance(D, G)
By different_points_v1 on B, C we get 0 != distance(B, C)
By different_points_v1 on B, A we get 0 != distance(A, B)
By in_imply_collinear on H, G, D we get collinear(D, G, H)
By in_imply_concyclic on E, D, A, G we get concyclic(A, D, E, G)
By in_imply_collinear on F, A, B we get collinear(A, B, F)
By in_imply_collinear on G, A, B we get collinear(A, B, G)
By not_in_line_equivalent_to_not_collinear_v0_r on E, B, C we get E not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on E, B, A we get E not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on A, C, B we get A not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on A, D, G we get A not in Line(D, G)
By double_perpendicular_and_parallel_v0_r on f, perpendicular_line(C, f), h we get perpendicular(h, perpendicular_line(C, f))
By not_in_line_equivalent_to_not_collinear_v0_r on G, C, B we get G not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on B, D, G we get B not in Line(D, G)
By not_in_line_equivalent_to_not_collinear_v0_r on D, A, B we get D not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on H, B, A we get H not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on F, B, C we get F not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on H, C, B we get H not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on E, D, G we get E not in Line(D, G)
By not_in_line_equivalent_to_not_collinear_v0_r on C, B, A we get C not in Line(A, B)
By line_circle_intersection_has_at_most_two_points_0 on D, E, B, c we get B not in c
By not_in_line_equivalent_to_not_collinear_v0_r on D, C, B we get D not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on C, D, G we get C not in Line(D, G)
By not_in_line_equivalent_to_not_collinear_v0_r on F, G, D we get F not in Line(D, G)
By angles_on_chord_v3 on E, G, A, D, c we get angle(E, A, G) == angle(E, D, G) + 180 mod 360
By angles_on_chord_v1 on D, G, A, E, c we get angle(D, A, G) == angle(D, E, G) mod 360
By power_of_a_point_in_circle on D, c we get 0 == power_of_a_point(D, c)
By power_of_a_point_in_circle on E, c we get 0 == power_of_a_point(E, c)
By power_of_a_point_on_circle on A, c we get 0 == power_of_a_point(A, c)
By power_of_a_point_in_circle on G, c we get 0 == power_of_a_point(G, c)
By angles_on_chord_v0 on D, E, G, A, c we get angle(D, A, E) == angle(D, G, E) mod 360
By angles_on_chord_v1 on G, A, D, E, c we get angle(G, D, A) == angle(G, E, A) mod 360
By angles_on_chord_v1 on E, D, G, A, c we get angle(E, A, D) == angle(E, G, D) mod 360
By angles_on_chord_v2 on A, D, E, G, c we get angle(A, E, D) == angle(A, G, D) + 180 mod 360
By angles_on_chord_v2 on D, A, G, E, c we get angle(D, G, A) == angle(D, E, A) + 180 mod 360
By angles_on_chord_v3 on A, D, G, E, c we get angle(A, G, D) == angle(A, E, D) + 180 mod 360
By angles_on_chord_v0 on G, D, E, A, c we get angle(G, A, D) == angle(G, E, D) mod 360
By angles_on_chord_v1 on A, E, G, D, c we get angle(A, D, E) == angle(A, G, E) mod 360
By angles_on_chord_v3 on D, A, E, G, c we get angle(D, E, A) == angle(D, G, A) + 180 mod 360
By angles_on_chord_v2 on E, G, D, A, c we get angle(E, D, G) == angle(E, A, G) + 180 mod 360
By angles_on_chord_v3 on G, E, D, A, c we get angle(G, D, E) == angle(G, A, E) + 180 mod 360
By angles_on_chord_v2 on G, E, A, D, c we get angle(G, A, E) == angle(G, D, E) + 180 mod 360
By angles_on_chord_v0 on A, G, D, E, c we get angle(A, D, G) == angle(A, E, G) mod 360
By angles_on_chord_v0 on E, A, D, G, c we get angle(E, D, A) == angle(E, G, A) mod 360
By same_angle_v0 on B, D, E, C we get angle(D, B, C) == angle(E, B, C) mod 360
By same_angle_v0 on D, E, B, G we get angle(B, D, G) == angle(E, D, G) mod 360
By same_angle_v1 on B, D, E, A we get angle(D, B, A) == angle(E, B, A) mod 360
By altitude_definition on C, B, A, perpendicular_line(C, f) we get altitude(C, A, B) == perpendicular_line(C, f)
By altitude_definition on B, D, G, perpendicular_line(B, j) we get altitude(B, D, G) == perpendicular_line(B, j)
By log_of_2_times_distance on B, D, D, E we get log(distance(B, D)) == 0.6931471805599453 + log(distance(D, E))
By collinear_definition on E, B, D we get B in Line(D, E), D in Line(B, E), Line(B, E) == Line(D, E), 0 == 2 * angle(B, E, D) mod 360
By log_of_2_times_distance on B, D, E, B we get log(distance(B, D)) == 0.6931471805599453 + log(distance(B, E))
By collinear_definition on B, D, E we get D in Line(B, E), E in Line(B, D), Line(B, D) == Line(B, E), 0 == 2 * angle(D, B, E) mod 360
By collinear_definition on D, E, B we get E in Line(B, D), B in Line(D, E), Line(B, D) == Line(D, E), 0 == 2 * angle(E, D, B) mod 360
By collinear_definition on D, B, E we get B in Line(D, E), E in Line(B, D), Line(B, D) == Line(D, E), 0 == 2 * angle(B, D, E) mod 360
By collinear_definition on B, E, D we get E in Line(B, D), D in Line(B, E), Line(B, D) == Line(B, E), 0 == 2 * angle(E, B, D) mod 360
By collinear_definition on E, D, B we get D in Line(B, E), B in Line(D, E), Line(B, E) == Line(D, E), 0 == 2 * angle(D, E, B) mod 360
By isosceles_triangle_properties on E, D, B we get distance(B, E) == distance(D, E), angle(D, B, E) == angle(E, D, B) mod 360
By isosceles_triangle_properties on E, B, D we get distance(B, E) == distance(D, E), angle(B, D, E) == angle(E, B, D) mod 360
By between_implies_angles on D, E, B we get 180 == angle(D, E, B) mod 360, 0 == angle(E, B, D) mod 360, 0 == angle(B, D, E) mod 360
By between_implies_angles on B, E, D we get 180 == angle(B, E, D) mod 360, 0 == angle(E, D, B) mod 360, 0 == angle(D, B, E) mod 360
By perpendicular_line_definition on C, h, Line(C, F) we get h == perpendicular_line(C, Line(C, F))
By perpendicular_line_definition on D, h, Line(C, F) we get h == perpendicular_line(D, Line(C, F))
By perpendicular_line_definition on F, Line(C, F), h we get Line(C, F) == perpendicular_line(F, h)
By median_definition on G, D, B, Line(E, G) we get Line(E, G) == median(G, B, D)
By perpendicular_line_definition on C, Line(C, F), h we get Line(C, F) == perpendicular_line(C, h)
By median_definition on A, B, D, Line(A, E) we get Line(A, E) == median(A, B, D)
By projection_definition on D, H, Line(B, H) we get H == projection(D, Line(B, H))
By same_angle_v0 on D, E, B, A we get angle(B, D, A) == angle(E, D, A) mod 360
By same_angle_v2 on E, B, D, G we get angle(B, E, G) == angle(D, E, G) + 180 mod 360
By same_angle_v3 on E, B, D, A we get angle(B, E, A) == angle(D, E, A) + 180 mod 360
By projection_definition on B, F, Line(C, F) we get F == projection(B, Line(C, F))
By projection_definition on G, F, Line(C, F) we get F == projection(G, Line(C, F))
By projection_definition on A, F, Line(C, F) we get F == projection(A, Line(C, F))
By projection_definition on G, H, Line(B, H) we get H == projection(G, Line(B, H))
By different_points_v1 on E, A we get 0 != distance(A, E)
By perpendicular_direction_conditions_v0_r on C, F, G, A we get 180 == 2 * direction(C, F) - 2 * direction(G, A) mod 360
By different_points_v1 on H, G we get 0 != distance(G, H)
By different_points_v1 on A, F we get 0 != distance(A, F)
By different_points_v1 on D, C we get 0 != distance(C, D)
By different_points_v1 on B, G we get 0 != distance(B, G)
By different_points_v1 on A, G we get 0 != distance(A, G)
By different_points_v1 on B, F we get 0 != distance(B, F)
By different_points_v1 on H, B we get 0 != distance(B, H)
By different_points_v1 on G, E we get 0 != distance(E, G)
By different_points_v1 on C, F we get 0 != distance(C, F)
By different_points_v1 on D, H we get 0 != distance(D, H)
By different_points_v1 on F, G we get 0 != distance(F, G)
By same_angle_v2 on D, H, G, E we get angle(H, D, E) == angle(G, D, E) + 180 mod 360
By different_points_v1 on D, A we get 0 != distance(A, D)
By same_angle_v0 on B, D, E, H we get angle(D, B, H) == angle(E, B, H) mod 360
By same_angle_v0 on B, A, G, D we get angle(A, B, D) == angle(G, B, D) mod 360
By same_angle_v1 on D, E, B, C we get angle(B, D, C) == angle(E, D, C) mod 360
By same_angle_v1 on B, E, D, F we get angle(D, B, F) == angle(E, B, F) mod 360
By same_angle_v0 on B, F, A, E we get angle(A, B, E) == angle(F, B, E) mod 360
By same_angle_v0 on G, D, H, A we get angle(D, G, A) == angle(H, G, A) mod 360
By same_angle_v0 on B, A, F, C we get angle(A, B, C) == angle(F, B, C) mod 360
By same_angle_v1 on G, B, A, D we get angle(A, G, D) == angle(B, G, D) mod 360
By same_angle_v0 on B, A, G, E we get angle(A, B, E) == angle(G, B, E) mod 360
By same_angle_v1 on B, D, E, G we get angle(D, B, G) == angle(E, B, G) mod 360
By same_angle_v0 on G, H, D, E we get angle(D, G, E) == angle(H, G, E) mod 360
By same_angle_v0 on B, G, A, C we get angle(A, B, C) == angle(G, B, C) mod 360
By same_angle_v2 on A, G, B, E we get angle(G, A, E) == angle(B, A, E) + 180 mod 360
By same_angle_v2 on D, H, G, A we get angle(H, D, A) == angle(G, D, A) + 180 mod 360
By same_angle_v2 on D, H, G, B we get angle(H, D, B) == angle(G, D, B) + 180 mod 360
By same_angle_v0 on B, A, F, D we get angle(A, B, D) == angle(F, B, D) mod 360
By same_angle_v1 on D, E, B, H we get angle(B, D, H) == angle(E, D, H) mod 360
By same_angle_v3 on A, G, B, D we get angle(G, A, D) == angle(B, A, D) + 180 mod 360
By probably_between_and_collinear_implies_between on G, A, B we get between(B, A, G)
By same_angle_v1 on G, B, A, E we get angle(A, G, E) == angle(B, G, E) mod 360
By perpendicular_direction_conditions_v0_r on D, G, H, B we get 180 == 2 * direction(D, G) - 2 * direction(H, B) mod 360
By projection_definition on D, C, Line(C, F) we get C == projection(D, Line(C, F))
By perpendicular_direction_conditions_v0_r on B, H, G, D we get 180 == 2 * direction(B, H) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on A, G, F, C we get 180 == 2 * direction(A, G) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on G, A, F, C we get 180 == 2 * direction(G, A) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on D, G, B, H we get 180 == 2 * direction(D, G) - 2 * direction(B, H) mod 360
By perpendicular_direction_conditions_v0_r on C, F, B, A we get 180 == 2 * direction(C, F) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on G, A, C, F we get 180 == 2 * direction(G, A) - 2 * direction(C, F) mod 360
By projection_definition on F, C, h we get C == projection(F, h)
By perpendicular_direction_conditions_v0_r on C, F, A, G we get 180 == 2 * direction(C, F) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on B, A, F, C we get 180 == 2 * direction(B, A) - 2 * direction(F, C) mod 360
By in_imply_collinear on G, F, B we get collinear(B, F, G)
By perpendicular_direction_conditions_v0_r on G, D, H, B we get 180 == 2 * direction(G, D) - 2 * direction(H, B) mod 360
By perpendicular_direction_conditions_v0_r on H, B, D, G we get 180 == 2 * direction(H, B) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on B, H, D, G we get 180 == 2 * direction(B, H) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on G, D, B, H we get 180 == 2 * direction(G, D) - 2 * direction(B, H) mod 360
By perpendicular_direction_conditions_v0_r on A, G, C, F we get 180 == 2 * direction(A, G) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on F, C, B, A we get 180 == 2 * direction(F, C) - 2 * direction(B, A) mod 360
By reverse_direction on A, G we get 180 == direction(A, G) - direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on H, B, G, D we get 180 == 2 * direction(H, B) - 2 * direction(G, D) mod 360
By probably_between_and_collinear_implies_between on H, D, G we get between(G, D, H)
By perpendicular_direction_conditions_v0_r on F, C, A, G we get 180 == 2 * direction(F, C) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on F, C, G, A we get 180 == 2 * direction(F, C) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on B, A, C, F we get 180 == 2 * direction(B, A) - 2 * direction(C, F) mod 360
By probably_between_and_collinear_implies_between on F, A, B we get between(B, A, F)
By in_imply_collinear on F, G, A we get collinear(A, F, G)
By parallel_line_angles_reverse_v1 on A, D, B, C we get angle(A, D, B) == angle(C, B, D) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on D, E, G we get D not in Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on C, E, D we get C not in Line(D, E)
By reverse_direction on B, E we get 180 == direction(B, E) - direction(E, B) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on B, G, E we get B not in Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on D, C, F we get D not in Line(C, F)
By line_inequality on Line(A, E), g, E we get g != Line(A, E)
By not_in_line_equivalent_to_not_collinear_v0_r on C, G, E we get C not in Line(E, G)
By reverse_direction on G, D we get 180 == direction(G, D) - direction(D, G) mod 360
By line_inequality on Line(E, G), g, G we get g != Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on F, D, B we get F not in Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on E, B, H we get E not in Line(B, H)
By line_inequality on Line(E, G), h, G we get h != Line(E, G)
By line_inequality on Line(C, F), i, F we get i != Line(C, F)
By line_inequality on Line(B, H), j, B we get j != Line(B, H)
By line_inequality on Line(B, H), h, B we get h != Line(B, H)
By reverse_direction on E, A we get 180 == direction(E, A) - direction(A, E) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on E, D, C we get E not in Line(C, D)
By reverse_direction on D, E we get 180 == direction(D, E) - direction(E, D) mod 360
By reverse_direction on E, B we get 180 == direction(E, B) - direction(B, E) mod 360
By reverse_direction on D, B we get 180 == direction(D, B) - direction(B, D) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on F, D, E we get F not in Line(D, E)
By reverse_direction on E, G we get 180 == direction(E, G) - direction(G, E) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on G, B, H we get G not in Line(B, H)
By reverse_direction on A, E we get 180 == direction(A, E) - direction(E, A) mod 360
By reverse_direction on A, D we get 180 == direction(A, D) - direction(D, A) mod 360
By line_inequality on Line(C, F), f, C we get f != Line(C, F)
By not_in_line_equivalent_to_not_collinear_v0_r on C, E, B we get C not in Line(B, E)
By reverse_direction on D, A we get 180 == direction(D, A) - direction(A, D) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on A, D, E we get A not in Line(D, E)
By reverse_direction on D, G we get 180 == direction(D, G) - direction(G, D) mod 360
By reverse_direction on B, D we get 180 == direction(B, D) - direction(D, B) mod 360
By reverse_direction on E, D we get 180 == direction(E, D) - direction(D, E) mod 360
By line_inequality on Line(C, F), j, F we get j != Line(C, F)
By reverse_direction on G, E we get 180 == direction(G, E) - direction(E, G) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on C, D, B we get C not in Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on H, G, E we get H not in Line(E, G)
By reverse_direction on G, A we get 180 == direction(G, A) - direction(A, G) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on A, F, C we get A not in Line(C, F)
By not_in_line_equivalent_to_not_collinear_v0_r on F, D, C we get F not in Line(C, D)
By line_inequality on Line(E, G), f, E we get f != Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on A, G, E we get A not in Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on G, D, B we get G not in Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on B, C, F we get B not in Line(C, F)
By not_in_line_equivalent_to_not_collinear_v0_r on H, B, D we get H not in Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on G, E, A we get G not in Line(A, E)
By not_in_line_equivalent_to_not_collinear_v0_r on H, D, E we get H not in Line(D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on C, H, B we get C not in Line(B, H)
By not_in_line_equivalent_to_not_collinear_v0_r on E, F, C we get E not in Line(C, F)
By line_inequality on Line(E, G), i, G we get i != Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on H, A, E we get H not in Line(A, E)
By not_in_line_equivalent_to_not_collinear_v0_r on F, B, H we get F not in Line(B, H)
By not_in_line_equivalent_to_not_collinear_v0_r on D, A, E we get D not in Line(A, E)
By not_in_line_equivalent_to_not_collinear_v0_r on E, D, A we get E not in Line(A, D)
By line_inequality on Line(B, D), f, E we get f != Line(B, D)
By line_inequality on Line(A, E), j, E we get j != Line(A, E)
By not_in_line_equivalent_to_not_collinear_v0_r on B, E, A we get B not in Line(A, E)
By line_inequality on Line(B, D), j, E we get j != Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on F, G, E we get F not in Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on H, F, C we get H not in Line(C, F)
By not_in_line_equivalent_to_not_collinear_v0_r on D, B, H we get D not in Line(B, H)
By not_in_line_equivalent_to_not_collinear_v0_r on A, B, E we get A not in Line(B, E)
By line_circle_intersection_has_at_most_two_points_0 on D, G, H, c we get H not in c
By line_inequality on Line(B, H), f, H we get f != Line(B, H)
By not_in_line_equivalent_to_not_collinear_v0_r on F, E, B we get F not in Line(B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on A, D, B we get A not in Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on G, F, C we get G not in Line(C, F)
By not_in_line_equivalent_to_not_collinear_v0_r on A, H, B we get A not in Line(B, H)
By line_inequality on Line(B, H), i, H we get i != Line(B, H)
By line_inequality on Line(B, D), g, E we get g != Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on G, E, D we get G not in Line(D, E)
By line_inequality on Line(B, D), h, B we get h != Line(B, D)
By line_inequality on Line(A, E), h, A we get h != Line(A, E)
By not_in_line_equivalent_to_not_collinear_v0_r on G, B, E we get G not in Line(B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on F, E, A we get F not in Line(A, E)
By line_inequality on Line(B, D), i, B we get i != Line(B, D)
By line_inequality on Line(C, F), g, F we get g != Line(C, F)
By not_in_line_equivalent_to_not_collinear_v0_r on H, B, E we get H not in Line(B, E)
By line_inequality on Line(A, E), f, E we get f != Line(A, E)
By line_inequality on Line(B, H), g, H we get g != Line(B, H)
By line_inequality on Line(E, G), j, E we get j != Line(E, G)
By same_angle_v0 on B, A, G, H we get angle(A, B, H) == angle(G, B, H) mod 360
By same_angle_v0 on B, F, A, H we get angle(A, B, H) == angle(F, B, H) mod 360
By perpendicular_direction_conditions_v0_r on G, H, H, B we get 180 == 2 * direction(G, H) - 2 * direction(H, B) mod 360
By perpendicular_direction_conditions_v0_r on C, F, B, G we get 180 == 2 * direction(C, F) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on C, D, F, C we get 180 == 2 * direction(C, D) - 2 * direction(F, C) mod 360
By same_angle_v2 on A, F, B, E we get angle(F, A, E) == angle(B, A, E) + 180 mod 360
By perpendicular_direction_conditions_v0_r on F, C, F, B we get 180 == 2 * direction(F, C) - 2 * direction(F, B) mod 360
By same_angle_v0 on G, D, H, B we get angle(D, G, B) == angle(H, G, B) mod 360
By perpendicular_direction_conditions_v0_r on B, G, F, C we get 180 == 2 * direction(B, G) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on F, C, A, B we get 180 == 2 * direction(F, C) - 2 * direction(A, B) mod 360
By same_angle_v1 on G, A, B, H we get angle(A, G, H) == angle(B, G, H) mod 360
By same_angle_v2 on D, H, G, C we get angle(H, D, C) == angle(G, D, C) + 180 mod 360
By same_angle_v0 on G, D, H, F we get angle(D, G, F) == angle(H, G, F) mod 360
By perpendicular_direction_conditions_v0_r on B, H, H, G we get 180 == 2 * direction(B, H) - 2 * direction(H, G) mod 360
By perpendicular_direction_conditions_v0_r on F, C, B, F we get 180 == 2 * direction(F, C) - 2 * direction(B, F) mod 360
By same_angle_v2 on A, F, B, D we get angle(F, A, D) == angle(B, A, D) + 180 mod 360
By perpendicular_direction_conditions_v0_r on H, D, H, B we get 180 == 2 * direction(H, D) - 2 * direction(H, B) mod 360
By perpendicular_direction_conditions_v0_r on G, B, C, F we get 180 == 2 * direction(G, B) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on D, C, F, C we get 180 == 2 * direction(D, C) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on H, B, D, H we get 180 == 2 * direction(H, B) - 2 * direction(D, H) mod 360
By perpendicular_direction_conditions_v0_r on F, A, C, F we get 180 == 2 * direction(F, A) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on C, F, G, B we get 180 == 2 * direction(C, F) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on H, G, B, H we get 180 == 2 * direction(H, G) - 2 * direction(B, H) mod 360
By perpendicular_direction_conditions_v0_r on C, F, F, B we get 180 == 2 * direction(C, F) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on B, F, C, F we get 180 == 2 * direction(B, F) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on F, C, A, F we get 180 == 2 * direction(F, C) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on A, B, F, C we get 180 == 2 * direction(A, B) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on H, D, B, H we get 180 == 2 * direction(H, D) - 2 * direction(B, H) mod 360
By perpendicular_direction_conditions_v0_r on G, B, F, C we get 180 == 2 * direction(G, B) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on G, H, B, H we get 180 == 2 * direction(G, H) - 2 * direction(B, H) mod 360
By perpendicular_direction_conditions_v0_r on G, F, F, C we get 180 == 2 * direction(G, F) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on F, B, C, F we get 180 == 2 * direction(F, B) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on F, C, C, D we get 180 == 2 * direction(F, C) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on F, C, G, F we get 180 == 2 * direction(F, C) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on F, C, G, B we get 180 == 2 * direction(F, C) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on C, F, D, C we get 180 == 2 * direction(C, F) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on F, G, F, C we get 180 == 2 * direction(F, G) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on G, F, C, F we get 180 == 2 * direction(G, F) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on B, F, F, C we get 180 == 2 * direction(B, F) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on B, G, C, F we get 180 == 2 * direction(B, G) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on C, D, C, F we get 180 == 2 * direction(C, D) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on B, H, H, D we get 180 == 2 * direction(B, H) - 2 * direction(H, D) mod 360
By perpendicular_direction_conditions_v0_r on F, B, F, C we get 180 == 2 * direction(F, B) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on C, F, F, G we get 180 == 2 * direction(C, F) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on C, F, A, F we get 180 == 2 * direction(C, F) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on F, C, F, A we get 180 == 2 * direction(F, C) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on F, C, F, G we get 180 == 2 * direction(F, C) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on C, F, C, D we get 180 == 2 * direction(C, F) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on H, G, H, B we get 180 == 2 * direction(H, G) - 2 * direction(H, B) mod 360
By perpendicular_direction_conditions_v0_r on A, F, F, C we get 180 == 2 * direction(A, F) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on D, H, H, B we get 180 == 2 * direction(D, H) - 2 * direction(H, B) mod 360
By perpendicular_direction_conditions_v0_r on C, F, F, A we get 180 == 2 * direction(C, F) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on F, A, F, C we get 180 == 2 * direction(F, A) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on H, B, H, D we get 180 == 2 * direction(H, B) - 2 * direction(H, D) mod 360
By perpendicular_direction_conditions_v0_r on F, G, C, F we get 180 == 2 * direction(F, G) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on B, H, D, H we get 180 == 2 * direction(B, H) - 2 * direction(D, H) mod 360
By perpendicular_direction_conditions_v0_r on H, B, H, G we get 180 == 2 * direction(H, B) - 2 * direction(H, G) mod 360
By perpendicular_direction_conditions_v0_r on A, B, C, F we get 180 == 2 * direction(A, B) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on F, C, B, G we get 180 == 2 * direction(F, C) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on B, H, G, H we get 180 == 2 * direction(B, H) - 2 * direction(G, H) mod 360
By perpendicular_direction_conditions_v0_r on C, F, B, F we get 180 == 2 * direction(C, F) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on D, C, C, F we get 180 == 2 * direction(D, C) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on A, F, C, F we get 180 == 2 * direction(A, F) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on C, F, A, B we get 180 == 2 * direction(C, F) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on D, H, B, H we get 180 == 2 * direction(D, H) - 2 * direction(B, H) mod 360
By perpendicular_direction_conditions_v0_r on F, C, D, C we get 180 == 2 * direction(F, C) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on H, B, G, H we get 180 == 2 * direction(H, B) - 2 * direction(G, H) mod 360
By perpendicular_direction_conditions_v0_r on C, F, G, F we get 180 == 2 * direction(C, F) - 2 * direction(G, F) mod 360
By collinear_definition on D, H, G we get H in Line(D, G), G in Line(D, H), Line(D, G) == Line(D, H), 0 == 2 * angle(H, D, G) mod 360
By parallel_line_angles_reverse_v3 on A, G, D, C we get angle(A, G, D) == angle(C, D, G) + 180 mod 360
By parallel_line_angles_reverse_v2 on D, A, B, C we get angle(D, A, B) == angle(C, B, A) + 180 mod 360
By parallel_line_angles_reverse_v0 on G, A, D, C we get angle(C, D, A) == angle(G, A, D) mod 360
By internal_angle_bisector_definition_v0_r on E, B, E, D we get Line(B, D) == internal_angle_bisector(E, D, E)
By internal_angle_bisector_definition_v0_r on E, D, E, B we get Line(B, D) == internal_angle_bisector(E, B, E)
By parallel_line_angles_reverse_v3 on C, B, A, D we get angle(C, B, A) == angle(D, A, B) + 180 mod 360
By internal_angle_bisector_definition_v0_r on B, E, B, D we get Line(D, E) == internal_angle_bisector(B, D, B)
By parallel_line_angles_reverse_v0 on C, D, B, A we get angle(A, B, D) == angle(C, D, B) mod 360
By altitude_definition on G, C, F, f we get f == altitude(G, C, F)
By parallel_line_angles_reverse_v2 on C, D, G, A we get angle(C, D, G) == angle(A, G, D) + 180 mod 360
By internal_angle_bisector_definition_v0_r on D, E, D, B we get Line(B, E) == internal_angle_bisector(D, B, D)
By collinear_definition on D, G, H we get G in Line(D, H), H in Line(D, G), Line(D, G) == Line(D, H), 0 == 2 * angle(G, D, H) mod 360
By collinear_definition on B, F, A we get F in Line(A, B), A in Line(B, F), Line(A, B) == Line(B, F), 0 == 2 * angle(F, B, A) mod 360
By internal_angle_bisector_definition_v0_r on B, D, B, E we get Line(D, E) == internal_angle_bisector(B, E, B)
By collinear_definition on A, B, G we get B in Line(A, G), G in Line(A, B), Line(A, B) == Line(A, G), 0 == 2 * angle(B, A, G) mod 360
By collinear_definition on B, G, A we get G in Line(A, B), A in Line(B, G), Line(A, B) == Line(B, G), 0 == 2 * angle(G, B, A) mod 360
By internal_angle_bisector_definition_v0_r on D, B, D, E we get Line(B, E) == internal_angle_bisector(D, E, D)
By collinear_definition on G, H, D we get H in Line(D, G), D in Line(G, H), Line(D, G) == Line(G, H), 0 == 2 * angle(H, G, D) mod 360
By altitude_definition on G, B, H, j we get j == altitude(G, B, H)
By collinear_definition on G, B, A we get B in Line(A, G), A in Line(B, G), Line(A, G) == Line(B, G), 0 == 2 * angle(B, G, A) mod 360
By collinear_definition on G, A, B we get A in Line(B, G), B in Line(A, G), Line(A, G) == Line(B, G), 0 == 2 * angle(A, G, B) mod 360
By collinear_definition on A, G, B we get G in Line(A, B), B in Line(A, G), Line(A, B) == Line(A, G), 0 == 2 * angle(G, A, B) mod 360
By altitude_definition on A, C, F, f we get f == altitude(A, C, F)
By altitude_definition on B, F, C, f we get f == altitude(B, C, F)
By reverse_direction on B, C we get 180 == direction(B, C) - direction(C, B) mod 360
By reverse_direction on B, A we get 180 == direction(B, A) - direction(A, B) mod 360
By perpendicular_lines_draw_intersection on Line(C, F), h we get exists(line_intersection(h, Line(C, F)))
By collinear_definition on B, A, G we get A in Line(B, G), G in Line(A, B), Line(A, B) == Line(B, G), 0 == 2 * angle(A, B, G) mod 360
By collinear_definition on G, D, H we get D in Line(G, H), H in Line(D, G), Line(D, G) == Line(G, H), 0 == 2 * angle(D, G, H) mod 360
By altitude_definition on D, B, H, j we get j == altitude(D, B, H)
By collinear_definition on B, A, F we get A in Line(B, F), F in Line(A, B), Line(A, B) == Line(B, F), 0 == 2 * angle(A, B, F) mod 360
By same_angle_v1 on F, A, B, C we get angle(A, F, C) == angle(B, F, C) mod 360
By same_angle_v1 on H, D, G, B we get angle(D, H, B) == angle(G, H, B) mod 360
By parallel_line_angles_reverse_v0 on F, B, D, C we get angle(C, D, B) == angle(F, B, D) mod 360
By perpendicular_angle_conditions_v0 on G, H, B we get angle(G, H, B) == orientation(B, G, H) mod 360
By parallel_line_angles_reverse_v3 on B, G, D, C we get angle(B, G, D) == angle(C, D, G) + 180 mod 360
By perpendicular_angle_conditions_v0 on C, F, B we get angle(C, F, B) == orientation(B, C, F) mod 360
By parallel_line_angles_reverse_v3 on B, A, D, C we get angle(B, A, D) == angle(C, D, A) + 180 mod 360
By parallel_line_angles_reverse_v2 on A, B, C, D we get angle(A, B, C) == angle(D, C, B) + 180 mod 360
By parallel_line_angles_reverse_v0 on C, D, A, F we get angle(C, D, A) == angle(F, A, D) mod 360
By perpendicular_angle_conditions_v0 on C, F, G we get angle(C, F, G) == orientation(C, F, G) mod 360
By parallel_line_angles_reverse_v0 on C, D, B, G we get angle(C, D, B) == angle(G, B, D) mod 360
By parallel_line_angles_reverse_v2 on C, D, G, F we get angle(C, D, G) == angle(F, G, D) + 180 mod 360
By parallel_line_angles_reverse_v2 on C, D, G, B we get angle(C, D, G) == angle(B, G, D) + 180 mod 360
By collinear_definition on H, D, G we get D in Line(G, H), G in Line(D, H), Line(D, H) == Line(G, H), 0 == 2 * angle(D, H, G) mod 360
By parallel_line_angles_reverse_v3 on D, C, B, A we get angle(D, C, B) == angle(A, B, C) + 180 mod 360
By parallel_line_angles_reverse_v3 on F, G, D, C we get angle(F, G, D) == angle(C, D, G) + 180 mod 360
By altitude_definition on B, D, H, Line(B, H) we get Line(B, H) == altitude(B, D, H)
By parallel_line_angles_reverse_v2 on C, D, A, B we get angle(C, D, A) == angle(B, A, D) + 180 mod 360
By perpendicular_angle_conditions_v0 on D, C, F we get angle(D, C, F) == orientation(C, F, D) mod 360
By altitude_definition on C, G, A, Line(C, F) we get Line(C, F) == altitude(C, A, G)
By perpendicular_angle_conditions_v0 on B, H, G we get angle(B, H, G) == orientation(B, H, G) mod 360
By collinear_definition on H, G, D we get G in Line(D, H), D in Line(G, H), Line(D, H) == Line(G, H), 0 == 2 * angle(G, H, D) mod 360
By perpendicular_angle_conditions_v0 on A, F, C we get angle(A, F, C) == orientation(A, F, C) mod 360
By altitude_definition on C, G, B, Line(C, F) we get Line(C, F) == altitude(C, B, G)
By altitude_definition on F, D, C, Line(C, F) we get Line(C, F) == altitude(F, C, D)
By altitude_definition on D, F, C, h we get h == altitude(D, C, F)
By power_of_a_point_definition on B, E, D, c we get log(power_of_a_point(B, c)) == log(distance(B, E)) + log(distance(B, D))
By perpendicular_angle_conditions_v0 on B, H, D we get angle(B, H, D) == orientation(B, H, D) mod 360
By perpendicular_angle_conditions_v0 on B, F, C we get angle(B, F, C) == orientation(B, F, C) mod 360
By altitude_definition on C, A, F, Line(C, F) we get Line(C, F) == altitude(C, A, F)
By altitude_definition on C, F, G, Line(C, F) we get Line(C, F) == altitude(C, F, G)
By perpendicular_angle_conditions_v0 on C, F, A we get angle(C, F, A) == orientation(A, C, F) mod 360
By perpendicular_angle_conditions_v0 on D, H, B we get angle(D, H, B) == orientation(B, D, H) mod 360
By collinear_definition on F, B, A we get B in Line(A, F), A in Line(B, F), Line(A, F) == Line(B, F), 0 == 2 * angle(B, F, A) mod 360
By altitude_definition on C, B, F, Line(C, F) we get Line(C, F) == altitude(C, B, F)
By collinear_definition on A, F, B we get F in Line(A, B), B in Line(A, F), Line(A, B) == Line(A, F), 0 == 2 * angle(F, A, B) mod 360
By collinear_definition on A, B, F we get B in Line(A, F), F in Line(A, B), Line(A, B) == Line(A, F), 0 == 2 * angle(B, A, F) mod 360
By altitude_definition on B, G, H, Line(B, H) we get Line(B, H) == altitude(B, G, H)
By perpendicular_angle_conditions_v0 on G, F, C we get angle(G, F, C) == orientation(C, G, F) mod 360
By perpendicular_angle_conditions_v0 on F, C, D we get angle(F, C, D) == orientation(C, D, F) mod 360
By collinear_definition on F, A, B we get A in Line(B, F), B in Line(A, F), Line(A, F) == Line(B, F), 0 == 2 * angle(A, F, B) mod 360
By right_triangle_circumcenter_v1 on B, H, D we get midpoint(B, D) == circumcenter(B, D, H)
By parallel_line_angles_reverse_v2 on G, B, C, D we get angle(G, B, C) == angle(D, C, B) + 180 mod 360
By parallel_line_angles_reverse_v2 on F, B, C, D we get angle(F, B, C) == angle(D, C, B) + 180 mod 360
By parallel_line_angles_reverse_v3 on D, C, B, G we get angle(D, C, B) == angle(G, B, C) + 180 mod 360
By parallel_line_angles_reverse_v3 on A, D, C, B we get angle(A, D, C) == angle(B, C, D) + 180 mod 360
By parallel_line_angles_reverse_v2 on B, C, D, A we get angle(B, C, D) == angle(A, D, C) + 180 mod 360
By parallel_line_angles_reverse_v3 on D, C, B, F we get angle(D, C, B) == angle(F, B, C) + 180 mod 360
By parallel_line_angles_reverse_v2 on G, F, C, D we get angle(G, F, C) == angle(D, C, F) + 180 mod 360
By parallel_line_angles_reverse_v1 on A, F, C, D we get angle(A, F, C) == angle(D, C, F) mod 360
By power_of_a_point_definition on B, G, A, c we get log(power_of_a_point(B, c)) == log(distance(B, G)) + log(distance(A, B))
By parallelogram_parallel_definition on A, B, C, D we get parallelogram(A, B, C, D)
By parallelogram_parallel_definition on D, A, B, C we get parallelogram(A, B, C, D)
By parallelogram_parallel_definition on C, B, A, D we get parallelogram(A, B, C, D)
By parallel_line_angles_reverse_v1 on D, C, F, B we get angle(B, F, C) == angle(D, C, F) mod 360
By parallelogram_parallel_definition on D, C, B, A we get parallelogram(A, B, C, D)
By parallel_line_angles_reverse_v3 on D, C, F, G we get angle(D, C, F) == angle(G, F, C) + 180 mod 360
By parallelogram_parallel_definition on B, C, D, A we get parallelogram(A, B, C, D)
By parallelogram_parallel_definition on C, D, A, B we get parallelogram(A, B, C, D)
By parallelogram_parallel_definition on B, A, D, C we get parallelogram(A, B, C, D)
By parallelogram_parallel_definition on A, D, C, B we get parallelogram(A, B, C, D)
By line_intersection_definition on G, j, Line(E, G) we get G == line_intersection(j, Line(E, G))
By line_intersection_definition on B, Line(B, D), f we get B == line_intersection(f, Line(B, D))
By line_intersection_definition on B, f, Line(B, H) we get B == line_intersection(f, Line(B, H))
By line_intersection_definition on A, Line(A, E), f we get A == line_intersection(f, Line(A, E))
By line_intersection_definition on D, Line(B, D), i we get D == line_intersection(i, Line(B, D))
By line_intersection_definition on B, g, Line(B, H) we get B == line_intersection(g, Line(B, H))
By line_intersection_definition on G, Line(E, G), f we get G == line_intersection(f, Line(E, G))
By line_intersection_definition on D, j, Line(B, D) we get D == line_intersection(j, Line(B, D))
By line_intersection_definition on B, Line(B, D), g we get B == line_intersection(g, Line(B, D))
By line_intersection_definition on C, Line(C, F), g we get C == line_intersection(g, Line(C, F))
By line_intersection_definition on D, h, Line(B, D) we get D == line_intersection(h, Line(B, D))
By between_imply_not_between on B, A, G we get collinear_and_not_between(A, B, G)
By same_angle_v1 on G, F, B, E we get angle(B, G, E) == angle(F, G, E) mod 360
By same_angle_v1 on G, A, F, E we get angle(A, G, E) == angle(F, G, E) mod 360
By between_implies_orientation on G, B, A, F we get orientation(A, F, G) == orientation(A, G, B) mod 360, orientation(A, G, B) == orientation(B, F, G) mod 360
By between_implies_orientation on F, B, A, G we get orientation(A, F, B) == orientation(A, G, F) mod 360, orientation(A, F, B) == orientation(B, G, F) mod 360
By between_imply_not_between on H, D, G we get collinear_and_not_between(D, H, G)
By between_implies_orientation on G, F, A, B we get orientation(A, B, G) == orientation(A, G, F) mod 360, orientation(A, G, F) == orientation(B, G, F) mod 360
By between_implies_orientation on F, G, A, B we get orientation(A, B, F) == orientation(A, F, G) mod 360, orientation(A, F, G) == orientation(B, F, G) mod 360
By between_imply_not_between on G, A, B we get collinear_and_not_between(A, G, B)
By between_imply_not_between on F, A, B we get collinear_and_not_between(A, F, B)
By between_imply_not_between on B, A, F we get collinear_and_not_between(A, B, F)
By between_imply_not_between on G, D, H we get collinear_and_not_between(D, G, H)
By circle_radius_v0_r on D, Circle(B, D, H) we get radius(Circle(B, D, H)) == distance(D, center(Circle(B, D, H)))
By circle_radius_v0_r on H, Circle(B, D, H) we get radius(Circle(B, D, H)) == distance(H, center(Circle(B, D, H)))
By circle_radius_v0_r on B, Circle(B, D, H) we get radius(Circle(B, D, H)) == distance(B, center(Circle(B, D, H)))
By angle_to_center on H, B, D, Circle(B, D, H) we get 2 * angle(H, B, D) == angle(H, center(Circle(B, D, H)), D) mod 360
By center_not_on_circle on Circle(B, D, H) we get center(Circle(B, D, H)) not in Circle(B, D, H)
By angle_to_center on H, D, B, Circle(B, D, H) we get 2 * angle(H, D, B) == angle(H, center(Circle(B, D, H)), B) mod 360
By angle_to_center on D, B, H, Circle(B, D, H) we get 2 * angle(D, B, H) == angle(D, center(Circle(B, D, H)), H) mod 360
By angle_to_center on B, D, H, Circle(B, D, H) we get 2 * angle(B, D, H) == angle(B, center(Circle(B, D, H)), H) mod 360
By orthocenter_concurrency on C, A, F we get orthocenter(A, C, F) in altitude(C, A, F), orthocenter(A, C, F) in altitude(A, C, F), orthocenter(A, C, F) in altitude(F, A, C)
By orthocenter_concurrency on B, D, H we get orthocenter(B, D, H) in altitude(B, D, H), orthocenter(B, D, H) in altitude(D, B, H), orthocenter(B, D, H) in altitude(H, B, D)
By between_imply_segment_sum on H, D, G we get distance(G, H) == distance(D, H) + distance(D, G)
By orthocenter_concurrency on D, F, C we get orthocenter(C, D, F) in altitude(D, C, F), orthocenter(C, D, F) in altitude(F, C, D), orthocenter(C, D, F) in altitude(C, D, F)
By orthocenter_concurrency on B, G, H we get orthocenter(B, G, H) in altitude(B, G, H), orthocenter(B, G, H) in altitude(G, B, H), orthocenter(B, G, H) in altitude(H, B, G)
By orthocenter_concurrency on B, C, F we get orthocenter(B, C, F) in altitude(B, C, F), orthocenter(B, C, F) in altitude(C, B, F), orthocenter(B, C, F) in altitude(F, B, C)
By orthocenter_concurrency on G, C, F we get orthocenter(C, F, G) in altitude(G, C, F), orthocenter(C, F, G) in altitude(C, F, G), orthocenter(C, F, G) in altitude(F, C, G)
By probably_between_and_collinear_implies_between on G, F, B we get between(B, F, G)
By probably_between_and_collinear_implies_between on G, F, A we get between(A, F, G)
By line_inequality on Line(B, D), Line(A, E), D we get Line(A, E) != Line(B, D)
By reverse_direction on D, H we get 180 == direction(D, H) - direction(H, D) mod 360
By reverse_direction on G, H we get 180 == direction(G, H) - direction(H, G) mod 360
By between_imply_segment_sum on B, A, F we get distance(B, F) == distance(A, B) + distance(A, F)
By collinear_definition on B, F, G we get F in Line(B, G), G in Line(B, F), Line(B, F) == Line(B, G), 0 == 2 * angle(F, B, G) mod 360
By collinear_definition on G, F, B we get F in Line(B, G), B in Line(F, G), Line(B, G) == Line(F, G), 0 == 2 * angle(F, G, B) mod 360
By line_inequality on Line(B, H), Line(E, G), B we get Line(B, H) != Line(E, G)
By collinear_definition on F, G, A we get G in Line(A, F), A in Line(F, G), Line(A, F) == Line(F, G), 0 == 2 * angle(G, F, A) mod 360
By line_inequality on Line(C, F), h, F we get h != Line(C, F)
By line_circle_intersection_has_at_most_two_points_0 on B, D, E, Circle(B, D, H) we get E not in Circle(B, D, H)
By reverse_direction on F, G we get 180 == direction(F, G) - direction(G, F) mod 360
By reverse_direction on F, C we get 180 == direction(F, C) - direction(C, F) mod 360
By reverse_direction on A, F we get 180 == direction(A, F) - direction(F, A) mod 360
By line_inequality on Line(C, F), Line(B, D), C we get Line(B, D) != Line(C, F)
By reverse_direction on C, F we get 180 == direction(C, F) - direction(F, C) mod 360
By line_inequality on Line(B, D), Line(B, H), D we get Line(B, D) != Line(B, H)
By line_circle_intersection_has_at_most_two_points_0 on G, A, F, c we get F not in c
By reverse_direction on B, H we get 180 == direction(B, H) - direction(H, B) mod 360
By collinear_definition on A, G, F we get G in Line(A, F), F in Line(A, G), Line(A, F) == Line(A, G), 0 == 2 * angle(G, A, F) mod 360
By collinear_definition on B, G, F we get G in Line(B, F), F in Line(B, G), Line(B, F) == Line(B, G), 0 == 2 * angle(G, B, F) mod 360
By collinear_definition on F, B, G we get B in Line(F, G), G in Line(B, F), Line(B, F) == Line(F, G), 0 == 2 * angle(B, F, G) mod 360
By line_inequality on i, Line(A, E), D we get i != Line(A, E)
By collinear_definition on F, G, B we get G in Line(B, F), B in Line(F, G), Line(B, F) == Line(F, G), 0 == 2 * angle(G, F, B) mod 360
By collinear_definition on A, F, G we get F in Line(A, G), G in Line(A, F), Line(A, F) == Line(A, G), 0 == 2 * angle(F, A, G) mod 360
By line_inequality on Line(B, H), Line(A, E), H we get Line(A, E) != Line(B, H)
By reverse_direction on H, G we get 180 == direction(H, G) - direction(G, H) mod 360
By between_imply_segment_sum on G, A, B we get distance(B, G) == distance(A, G) + distance(A, B)
By collinear_definition on F, A, G we get A in Line(F, G), G in Line(A, F), Line(A, F) == Line(F, G), 0 == 2 * angle(A, F, G) mod 360
By reverse_direction on B, F we get 180 == direction(B, F) - direction(F, B) mod 360
By collinear_definition on G, A, F we get A in Line(F, G), F in Line(A, G), Line(A, G) == Line(F, G), 0 == 2 * angle(A, G, F) mod 360
By reverse_direction on F, A we get 180 == direction(F, A) - direction(A, F) mod 360
By reverse_direction on F, B we get 180 == direction(F, B) - direction(B, F) mod 360
By collinear_definition on G, F, A we get F in Line(A, G), A in Line(F, G), Line(A, G) == Line(F, G), 0 == 2 * angle(F, G, A) mod 360
By reverse_direction on H, D we get 180 == direction(H, D) - direction(D, H) mod 360
By reverse_direction on G, F we get 180 == direction(G, F) - direction(F, G) mod 360
By collinear_definition on G, B, F we get B in Line(F, G), F in Line(B, G), Line(B, G) == Line(F, G), 0 == 2 * angle(B, G, F) mod 360
By reverse_direction on H, B we get 180 == direction(H, B) - direction(B, H) mod 360
By line_inequality on Line(C, F), Line(E, G), F we get Line(C, F) != Line(E, G)
By line_inequality on Line(A, E), Line(E, G), A we get Line(A, E) != Line(E, G)
By line_inequality on Line(C, F), Line(B, H), C we get Line(B, H) != Line(C, F)
By line_inequality on Line(A, E), Line(C, F), A we get Line(A, E) != Line(C, F)
By line_inequality on Line(E, G), Line(B, D), G we get Line(B, D) != Line(E, G)
By line_circle_intersection_has_at_most_two_points_0 on H, D, G, Circle(B, D, H) we get G not in Circle(B, D, H)
By tangent_chord_angle_v1 on B, G, E, C we get tangent(Line(B, C), Circle(B, E, G))
By external_angle_bisector_definition_v0_r on G, C, G, F we get Line(C, F) == external_angle_bisector(G, F, G)
By internal_angle_bisector_definition_v0_r on B, A, B, G we get Line(A, G) == internal_angle_bisector(B, G, B)
By external_angle_bisector_definition_v0_r on B, C, A, F we get Line(C, F) == external_angle_bisector(A, F, B)
By external_angle_bisector_definition_v0_r on C, B, C, F we get Line(B, F) == external_angle_bisector(C, F, C)
By external_angle_bisector_definition_v0_r on B, D, B, H we get Line(D, H) == external_angle_bisector(B, H, B)
By external_angle_bisector_definition_v0_r on C, G, C, F we get Line(F, G) == external_angle_bisector(C, F, C)
By external_angle_bisector_definition_v0_r on D, F, D, C we get Line(C, F) == external_angle_bisector(D, C, D)
By external_angle_bisector_definition_v0_r on B, C, B, F we get Line(C, F) == external_angle_bisector(B, F, B)
By external_angle_bisector_definition_v0_r on A, C, A, F we get Line(C, F) == external_angle_bisector(A, F, A)
By power_of_a_point_on_circle on D, Circle(B, D, H) we get 0 == power_of_a_point(D, Circle(B, D, H))
By external_angle_bisector_definition_v0_r on D, B, G, H we get Line(B, H) == external_angle_bisector(D, H, G)
By internal_angle_bisector_definition_v0_r on G, B, G, A we get Line(A, B) == internal_angle_bisector(G, A, G)
By internal_angle_bisector_definition_v0_r on A, B, A, G we get Line(B, G) == internal_angle_bisector(A, G, A)
By external_angle_bisector_definition_v0_r on G, B, G, H we get Line(B, H) == external_angle_bisector(G, H, G)
By external_angle_bisector_definition_v0_r on F, D, F, C we get Line(C, D) == external_angle_bisector(F, C, F)
By external_angle_bisector_definition_v0_r on C, A, C, F we get Line(A, F) == external_angle_bisector(C, F, C)
By external_angle_bisector_definition_v0_r on D, B, D, H we get Line(B, H) == external_angle_bisector(D, H, D)
By internal_angle_bisector_definition_v0_r on F, A, G, B we get Line(A, B) == internal_angle_bisector(F, B, G)
By external_angle_bisector_definition_v0_r on B, G, B, H we get Line(G, H) == external_angle_bisector(B, H, B)
By power_of_a_point_on_circle on H, Circle(B, D, H) we get 0 == power_of_a_point(H, Circle(B, D, H))
By internal_angle_bisector_definition_v0_r on A, B, A, F we get Line(B, F) == internal_angle_bisector(A, F, A)
By internal_angle_bisector_definition_v0_r on B, F, B, A we get Line(A, F) == internal_angle_bisector(B, A, B)
By internal_angle_bisector_definition_v0_r on B, G, B, A we get Line(A, G) == internal_angle_bisector(B, A, B)
By internal_angle_bisector_definition_v0_r on G, B, F, A we get Line(A, B) == internal_angle_bisector(F, A, G)
By internal_angle_bisector_definition_v0_r on A, F, A, B we get Line(B, F) == internal_angle_bisector(A, B, A)
By internal_angle_bisector_definition_v0_r on B, A, B, F we get Line(A, F) == internal_angle_bisector(B, F, B)
By internal_angle_bisector_definition_v0_r on A, G, A, B we get Line(B, G) == internal_angle_bisector(A, B, A)
By power_of_a_point_on_circle on B, Circle(B, D, H) we get 0 == power_of_a_point(B, Circle(B, D, H))
By internal_angle_bisector_definition_v0_r on H, G, H, D we get Line(D, G) == internal_angle_bisector(H, D, H)
By internal_angle_bisector_definition_v0_r on D, G, D, H we get Line(G, H) == internal_angle_bisector(D, H, D)
By internal_angle_bisector_definition_v0_r on D, H, D, G we get Line(G, H) == internal_angle_bisector(D, G, D)
By internal_angle_bisector_definition_v0_r on F, B, F, A we get Line(A, B) == internal_angle_bisector(F, A, F)
By internal_angle_bisector_definition_v0_r on G, H, G, D we get Line(D, H) == internal_angle_bisector(G, D, G)
By internal_angle_bisector_definition_v0_r on G, A, G, B we get Line(A, B) == internal_angle_bisector(G, B, G)
By internal_angle_bisector_definition_v0_r on F, A, F, B we get Line(A, B) == internal_angle_bisector(F, B, F)
By internal_angle_bisector_definition_v0_r on B, C, G, F we get Line(C, F) == internal_angle_bisector(B, F, G)
By internal_angle_bisector_definition_v0_r on H, D, H, G we get Line(D, G) == internal_angle_bisector(H, G, H)
By internal_angle_bisector_definition_v0_r on G, D, G, H we get Line(D, H) == internal_angle_bisector(G, H, G)
By internal_angle_bisector_definition_v0_r on A, C, G, F we get Line(C, F) == internal_angle_bisector(A, F, G)
By anti_similar_triangle_basic_properties on E, A, B, G, D, B we get not_collinear(A, B, E), not_collinear(B, D, G), angle(E, A, B) == 0 - angle(G, D, B) mod 360, angle(A, B, E) == 0 - angle(D, B, G) mod 360, angle(B, E, A) == 0 - angle(B, G, D) mod 360, log(distance(A, E)) + log(distance(B, D)) == log(distance(D, G)) + log(distance(A, B)), log(distance(A, B)) + log(distance(B, G)) == log(distance(B, D)) + log(distance(B, E)), log(distance(B, E)) + log(distance(D, G)) == log(distance(B, G)) + log(distance(A, E))
By anti_similar_triangle_basic_properties on G, B, D, E, B, A we get not_collinear(B, D, G), not_collinear(A, B, E), angle(G, B, D) == 0 - angle(E, B, A) mod 360, angle(B, D, G) == 0 - angle(B, A, E) mod 360, angle(D, G, B) == 0 - angle(A, E, B) mod 360, log(distance(B, E)) + log(distance(B, D)) == log(distance(B, G)) + log(distance(A, B)), log(distance(A, B)) + log(distance(D, G)) == log(distance(B, D)) + log(distance(A, E)), log(distance(A, E)) + log(distance(B, G)) == log(distance(D, G)) + log(distance(B, E))
By sas_congruence on E, B, A, E, D, C we get congruent_triangles(A, B, E, C, D, E)
By sas_congruence on A, D, C, C, B, A we get congruent_triangles(A, B, C, C, D, A)
By anti_similar_triangle_basic_properties on G, B, E, D, B, A we get not_collinear(B, E, G), not_collinear(A, B, D), angle(G, B, E) == 0 - angle(D, B, A) mod 360, angle(B, E, G) == 0 - angle(B, A, D) mod 360, angle(E, G, B) == 0 - angle(A, D, B) mod 360, log(distance(B, D)) + log(distance(B, E)) == log(distance(B, G)) + log(distance(A, B)), log(distance(A, B)) + log(distance(E, G)) == log(distance(B, E)) + log(distance(A, D)), log(distance(A, D)) + log(distance(B, G)) == log(distance(E, G)) + log(distance(B, D))
By sas_congruence on A, B, C, C, D, A we get congruent_triangles(A, B, C, C, D, A)
By anti_similar_triangle_basic_properties on E, B, G, A, B, D we get not_collinear(B, E, G), not_collinear(A, B, D), angle(E, B, G) == 0 - angle(A, B, D) mod 360, angle(B, G, E) == 0 - angle(B, D, A) mod 360, angle(G, E, B) == 0 - angle(D, A, B) mod 360, log(distance(A, B)) + log(distance(B, G)) == log(distance(B, E)) + log(distance(B, D)), log(distance(B, D)) + log(distance(E, G)) == log(distance(B, G)) + log(distance(A, D)), log(distance(A, D)) + log(distance(B, E)) == log(distance(E, G)) + log(distance(A, B))
By sas_congruence on A, D, E, C, B, E we get congruent_triangles(A, D, E, C, B, E)
By sas_congruence on A, B, E, C, D, E we get congruent_triangles(A, B, E, C, D, E)
By parallelogram_diagonals_v1 on D, A, B, C we get identical(midpoint(A, C), midpoint(B, D), line_intersection(Line(A, C), Line(B, D)))
By sas_congruence on C, B, A, A, D, C we get congruent_triangles(A, B, C, C, D, A)
By sas_congruence on C, D, A, A, B, C we get congruent_triangles(A, B, C, C, D, A)
By sas_congruence on E, D, A, E, B, C we get congruent_triangles(A, D, E, C, B, E)
By sas_congruence on E, B, C, E, D, A we get congruent_triangles(A, D, E, C, B, E)
By sas_congruence on C, D, E, A, B, E we get congruent_triangles(A, B, E, C, D, E)
By sas_congruence on C, B, E, A, D, E we get congruent_triangles(A, D, E, C, B, E)
By sas_congruence on E, D, C, E, B, A we get congruent_triangles(A, B, E, C, D, E)
By parallelogram_diagonals_v1 on B, C, D, A we get identical(midpoint(A, C), midpoint(B, D), line_intersection(Line(A, C), Line(B, D)))
By anti_similar_triangle_basic_properties on B, C, D, G, E, B we get not_collinear(B, C, D), not_collinear(B, E, G), angle(B, C, D) == 0 - angle(G, E, B) mod 360, angle(C, D, B) == 0 - angle(E, B, G) mod 360, angle(D, B, C) == 0 - angle(B, G, E) mod 360, log(distance(B, C)) + log(distance(B, E)) == log(distance(E, G)) + log(distance(C, D)), log(distance(B, E)) + log(distance(B, D)) == log(distance(C, D)) + log(distance(B, G)), log(distance(B, D)) + log(distance(E, G)) == log(distance(B, G)) + log(distance(B, C))
By anti_similar_triangle_basic_properties on B, D, C, G, B, E we get not_collinear(B, C, D), not_collinear(B, E, G), angle(B, D, C) == 0 - angle(G, B, E) mod 360, angle(D, C, B) == 0 - angle(B, E, G) mod 360, angle(C, B, D) == 0 - angle(E, G, B) mod 360, log(distance(B, D)) + log(distance(B, E)) == log(distance(B, G)) + log(distance(C, D)), log(distance(B, E)) + log(distance(B, C)) == log(distance(C, D)) + log(distance(E, G)), log(distance(B, C)) + log(distance(B, G)) == log(distance(E, G)) + log(distance(B, D))
By similar_triangle_basic_properties on D, C, B, B, A, D we get not_collinear(B, C, D), not_collinear(A, B, D), angle(B, A, D) == angle(D, C, B) mod 360, angle(A, D, B) == angle(C, B, D) mod 360, angle(B, D, C) == angle(D, B, A) mod 360, log(distance(A, B)) + log(distance(B, C)) == log(distance(C, D)) + log(distance(A, D)), log(distance(A, D)) + log(distance(B, D)) == log(distance(B, C)) + log(distance(B, D)), log(distance(B, D)) + log(distance(A, B)) == log(distance(B, D)) + log(distance(C, D))
By similar_triangle_basic_properties on C, D, B, A, B, D we get not_collinear(B, C, D), not_collinear(A, B, D), angle(A, B, D) == angle(C, D, B) mod 360, angle(B, D, A) == angle(D, B, C) mod 360, angle(B, C, D) == angle(D, A, B) mod 360, log(distance(A, B)) + log(distance(B, D)) == log(distance(C, D)) + log(distance(B, D)), log(distance(B, D)) + log(distance(A, D)) == log(distance(B, D)) + log(distance(B, C)), log(distance(A, D)) + log(distance(C, D)) == log(distance(B, C)) + log(distance(A, B))
By power_of_a_point_definition on H, G, D, c we get log(power_of_a_point(H, c)) == log(distance(G, H)) + log(distance(D, H))
By line_intersection_definition on orthocenter(B, C, F), f, Line(C, F) we get orthocenter(B, C, F) == line_intersection(f, Line(C, F))
By line_intersection_definition on orthocenter(B, G, H), j, Line(B, H) we get orthocenter(B, G, H) == line_intersection(j, Line(B, H))
By line_intersection_definition on orthocenter(B, D, H), Line(B, H), j we get orthocenter(B, D, H) == line_intersection(j, Line(B, H))
By median_definition on A, D, B, Line(A, C) we get Line(A, C) == median(A, B, D)
By line_intersection_definition on orthocenter(C, D, F), Line(C, F), h we get orthocenter(C, D, F) == line_intersection(h, Line(C, F))
By line_definition on A, E, Line(A, C) we get Line(A, C) == Line(A, E)
By line_intersection_definition on orthocenter(C, F, G), Line(C, F), f we get orthocenter(C, F, G) == line_intersection(f, Line(C, F))
By line_intersection_definition on orthocenter(A, C, F), Line(C, F), f we get orthocenter(A, C, F) == line_intersection(f, Line(C, F))
By line_definition on E, C, Line(A, C) we get Line(A, C) == Line(C, E)
By concurrent_sufficient_conditions on Line(B, D), Line(B, H), f we get concurrent(f, Line(B, D), Line(B, H))
By concurrent_sufficient_conditions on Line(B, D), Line(B, H), g we get concurrent(g, Line(B, D), Line(B, H))
By perpendicular_line_definition on orthocenter(C, D, F), Line(C, F), h we get Line(C, F) == perpendicular_line(orthocenter(C, D, F), h)
By perpendicular_line_definition on B, Line(B, D), altitude(H, B, D) we get Line(B, D) == perpendicular_line(B, altitude(H, B, D))
By perpendicular_line_definition on orthocenter(C, D, F), h, Line(C, F) we get h == perpendicular_line(orthocenter(C, D, F), Line(C, F))
By perpendicular_line_definition on C, Line(C, G), altitude(F, C, G) we get Line(C, G) == perpendicular_line(C, altitude(F, C, G))
By perpendicular_line_definition on G, f, altitude(H, B, G) we get f == perpendicular_line(G, altitude(H, B, G))
By line_intersection_definition on A, Line(A, E), i we get A == line_intersection(i, Line(A, E))
By perpendicular_line_definition on D, Line(D, F), altitude(C, D, F) we get Line(D, F) == perpendicular_line(D, altitude(C, D, F))
By perpendicular_line_definition on A, f, altitude(H, B, G) we get f == perpendicular_line(A, altitude(H, B, G))
By perpendicular_line_definition on orthocenter(C, D, F), altitude(C, D, F), Line(D, F) we get altitude(C, D, F) == perpendicular_line(orthocenter(C, D, F), Line(D, F))
By perpendicular_line_definition on E, Line(A, C), altitude(F, A, C) we get Line(A, C) == perpendicular_line(E, altitude(F, A, C))
By perpendicular_line_definition on orthocenter(B, G, H), altitude(H, B, G), f we get altitude(H, B, G) == perpendicular_line(orthocenter(B, G, H), f)
By median_definition on H, D, B, Line(E, H) we get Line(E, H) == median(H, B, D)
By perpendicular_line_definition on orthocenter(C, F, G), altitude(F, C, G), Line(C, G) we get altitude(F, C, G) == perpendicular_line(orthocenter(C, F, G), Line(C, G))
By perpendicular_line_definition on orthocenter(B, G, H), Line(B, H), j we get Line(B, H) == perpendicular_line(orthocenter(B, G, H), j)
By perpendicular_line_definition on orthocenter(C, F, G), Line(C, F), f we get Line(C, F) == perpendicular_line(orthocenter(C, F, G), f)
By perpendicular_line_definition on B, g, altitude(F, B, C) we get g == perpendicular_line(B, altitude(F, B, C))
By median_definition on C, B, D, Line(C, E) we get Line(C, E) == median(C, B, D)
By median_definition on G, A, C, Line(E, G) we get Line(E, G) == median(G, A, C)
By perpendicular_line_definition on orthocenter(C, F, G), f, altitude(H, B, G) we get f == perpendicular_line(orthocenter(C, F, G), altitude(H, B, G))
By median_definition on H, C, A, Line(E, H) we get Line(E, H) == median(H, A, C)
By median_definition on B, C, A, Line(B, D) we get Line(B, D) == median(B, A, C)
By perpendicular_line_definition on orthocenter(A, C, F), f, altitude(H, B, G) we get f == perpendicular_line(orthocenter(A, C, F), altitude(H, B, G))
By median_definition on D, A, C, Line(B, D) we get Line(B, D) == median(D, A, C)
By perpendicular_line_definition on orthocenter(A, C, F), altitude(F, A, C), Line(A, C) we get altitude(F, A, C) == perpendicular_line(orthocenter(A, C, F), Line(A, C))
By perpendicular_line_definition on G, Line(C, G), altitude(F, C, G) we get Line(C, G) == perpendicular_line(G, altitude(F, C, G))
By perpendicular_line_definition on D, Line(B, D), altitude(H, B, D) we get Line(B, D) == perpendicular_line(D, altitude(H, B, D))
By perpendicular_line_definition on B, f, altitude(H, B, G) we get f == perpendicular_line(B, altitude(H, B, G))
By concurrent_sufficient_conditions on Line(B, H), Line(B, D), f we get concurrent(f, Line(B, D), Line(B, H))
By concurrent_sufficient_conditions on Line(B, H), Line(B, D), g we get concurrent(g, Line(B, D), Line(B, H))
By perpendicular_line_definition on F, Line(D, F), altitude(C, D, F) we get Line(D, F) == perpendicular_line(F, altitude(C, D, F))
By perpendicular_line_definition on orthocenter(B, C, F), Line(C, F), f we get Line(C, F) == perpendicular_line(orthocenter(B, C, F), f)
By perpendicular_line_definition on C, g, altitude(F, B, C) we get g == perpendicular_line(C, altitude(F, B, C))
By line_intersection_definition on B, Line(B, H), Line(B, D) we get B == line_intersection(Line(B, D), Line(B, H))
By perpendicular_line_definition on orthocenter(A, C, F), Line(C, F), h we get Line(C, F) == perpendicular_line(orthocenter(A, C, F), h)
By perpendicular_line_definition on E, Line(B, D), altitude(H, B, D) we get Line(B, D) == perpendicular_line(E, altitude(H, B, D))
By line_intersection_definition on E, Line(A, E), Line(B, D) we get E == line_intersection(Line(A, E), Line(B, D))
By perpendicular_line_definition on orthocenter(B, D, H), Line(B, H), j we get Line(B, H) == perpendicular_line(orthocenter(B, D, H), j)
By concurrent_sufficient_conditions on Line(A, E), i, f we get concurrent(f, i, Line(A, E))
By line_intersection_definition on E, Line(B, D), Line(E, G) we get E == line_intersection(Line(B, D), Line(E, G))
By perpendicular_line_definition on C, Line(A, C), altitude(F, A, C) we get Line(A, C) == perpendicular_line(C, altitude(F, A, C))
By median_definition on C, D, B, Line(A, C) we get Line(A, C) == median(C, B, D)
By perpendicular_line_definition on orthocenter(B, C, F), Line(C, F), h we get Line(C, F) == perpendicular_line(orthocenter(B, C, F), h)
By perpendicular_line_definition on orthocenter(A, C, F), f, Line(C, F) we get f == perpendicular_line(orthocenter(A, C, F), Line(C, F))
By concurrent_sufficient_conditions on i, Line(A, E), f we get concurrent(f, i, Line(A, E))
By line_intersection_definition on E, Line(E, G), Line(A, E) we get E == line_intersection(Line(A, E), Line(E, G))
By perpendicular_line_definition on orthocenter(B, G, H), j, Line(B, H) we get j == perpendicular_line(orthocenter(B, G, H), Line(B, H))
By perpendicular_line_definition on orthocenter(B, C, F), altitude(F, B, C), g we get altitude(F, B, C) == perpendicular_line(orthocenter(B, C, F), g)
By perpendicular_line_definition on orthocenter(C, D, F), Line(C, F), f we get Line(C, F) == perpendicular_line(orthocenter(C, D, F), f)
By perpendicular_line_definition on orthocenter(C, F, G), f, Line(C, F) we get f == perpendicular_line(orthocenter(C, F, G), Line(C, F))
By perpendicular_line_definition on F, f, altitude(H, B, G) we get f == perpendicular_line(F, altitude(H, B, G))
By perpendicular_line_definition on A, Line(A, C), altitude(F, A, C) we get Line(A, C) == perpendicular_line(A, altitude(F, A, C))
By perpendicular_line_definition on orthocenter(B, C, F), f, altitude(H, B, G) we get f == perpendicular_line(orthocenter(B, C, F), altitude(H, B, G))
By perpendicular_line_definition on orthocenter(A, C, F), Line(C, F), f we get Line(C, F) == perpendicular_line(orthocenter(A, C, F), f)
By perpendicular_line_definition on orthocenter(B, D, H), altitude(H, B, D), Line(B, D) we get altitude(H, B, D) == perpendicular_line(orthocenter(B, D, H), Line(B, D))
By perpendicular_line_definition on orthocenter(B, D, H), j, Line(B, H) we get j == perpendicular_line(orthocenter(B, D, H), Line(B, H))
By perpendicular_line_definition on orthocenter(C, F, G), Line(C, F), h we get Line(C, F) == perpendicular_line(orthocenter(C, F, G), h)
By perpendicular_line_definition on orthocenter(B, C, F), f, Line(C, F) we get f == perpendicular_line(orthocenter(B, C, F), Line(C, F))
By line_unique_intersection_v0 on Line(C, F), h, C, orthocenter(C, D, F) we get C == orthocenter(C, D, F)
By line_unique_intersection_v0 on Line(C, F), f, F, orthocenter(A, C, F) we get F == orthocenter(A, C, F)
By line_unique_intersection_v0 on f, Line(C, F), orthocenter(C, F, G), orthocenter(A, C, F) we get orthocenter(A, C, F) == orthocenter(C, F, G)
By line_unique_intersection_v0 on Line(B, H), j, orthocenter(B, G, H), orthocenter(B, D, H) we get orthocenter(B, D, H) == orthocenter(B, G, H)
By line_unique_intersection_v0 on Line(C, F), f, orthocenter(A, C, F), orthocenter(B, C, F) we get orthocenter(A, C, F) == orthocenter(B, C, F)
By line_unique_intersection_v0 on j, Line(B, H), orthocenter(B, D, H), H we get H == orthocenter(B, D, H)
By line_unique_intersection_v0 on Line(C, F), f, orthocenter(B, C, F), F we get F == orthocenter(B, C, F)
By line_unique_intersection_v0 on Line(C, F), f, F, orthocenter(C, F, G) we get F == orthocenter(C, F, G)
By line_unique_intersection_v0 on Line(B, H), j, orthocenter(B, G, H), H we get H == orthocenter(B, G, H)
By line_unique_intersection_v0 on f, Line(C, F), orthocenter(B, C, F), orthocenter(C, F, G) we get orthocenter(B, C, F) == orthocenter(C, F, G)
By same_angle_v1 on A, C, E, G we get angle(C, A, G) == angle(E, A, G) mod 360
By same_angle_v2 on E, A, C, G we get angle(A, E, G) == angle(C, E, G) + 180 mod 360
By same_angle_v3 on E, C, A, H we get angle(C, E, H) == angle(A, E, H) + 180 mod 360
By same_angle_v1 on C, A, E, B we get angle(A, C, B) == angle(E, C, B) mod 360
By same_angle_v1 on A, E, C, F we get angle(C, A, F) == angle(E, A, F) mod 360
By same_angle_v0 on A, C, E, B we get angle(C, A, B) == angle(E, A, B) mod 360
By same_angle_v3 on A, F, B, C we get angle(F, A, C) == angle(B, A, C) + 180 mod 360
By same_angle_v0 on C, E, A, F we get angle(A, C, F) == angle(E, C, F) mod 360
By same_angle_v0 on C, E, A, D we get angle(A, C, D) == angle(E, C, D) mod 360
By between_implies_orientation on B, G, F, A we get orientation(A, B, F) == orientation(B, G, F) mod 360, orientation(A, B, G) == orientation(B, G, F) mod 360
By same_angle_v1 on A, C, E, D we get angle(C, A, D) == angle(E, A, D) mod 360
By same_angle_v2 on A, G, B, C we get angle(G, A, C) == angle(B, A, C) + 180 mod 360
By same_angle_v0 on A, F, G, C we get angle(F, A, C) == angle(G, A, C) mod 360
By between_implies_orientation on A, G, F, B we get orientation(A, F, B) == orientation(A, G, F) mod 360, orientation(A, G, B) == orientation(A, G, F) mod 360
By between_implies_orientation on A, B, F, G we get orientation(A, B, F) == orientation(A, F, G) mod 360, orientation(A, B, F) == orientation(A, B, G) mod 360
By between_implies_orientation on B, A, F, G we get orientation(A, F, B) == orientation(B, F, G) mod 360, orientation(A, F, B) == orientation(A, G, B) mod 360
By between_imply_not_between on G, F, B we get collinear_and_not_between(B, G, F)
By between_imply_not_between on G, F, A we get collinear_and_not_between(A, G, F)
By between_imply_not_between on C, E, A we get collinear_and_not_between(A, C, E)
By between_imply_not_between on A, F, G we get collinear_and_not_between(F, A, G)
By between_imply_not_between on A, E, C we get collinear_and_not_between(C, A, E)
By between_imply_not_between on B, F, G we get collinear_and_not_between(F, B, G)
By parallel_line_definition on orthocenter(C, F, G), f, h we get f == parallel_line(orthocenter(C, F, G), h)
By parallel_line_definition on orthocenter(B, C, F), f, h we get f == parallel_line(orthocenter(B, C, F), h)
By parallel_line_definition on orthocenter(C, D, F), h, f we get h == parallel_line(orthocenter(C, D, F), f)
By parallel_line_definition on orthocenter(A, C, F), f, h we get f == parallel_line(orthocenter(A, C, F), h)
By different_points_v1 on C, G we get 0 != distance(C, G)
By different_points_v1 on F, D we get 0 != distance(D, F)
By same_angle_v1 on G, A, B, C we get angle(A, G, C) == angle(B, G, C) mod 360
By same_angle_v3 on F, G, B, D we get angle(G, F, D) == angle(B, F, D) + 180 mod 360
By in_imply_collinear on orthocenter(B, G, H), D, G we get collinear(D, G, orthocenter(B, G, H))
By same_angle_v0 on G, H, D, C we get angle(D, G, C) == angle(H, G, C) mod 360
By same_angle_v3 on D, H, G, F we get angle(H, D, F) == angle(G, D, F) + 180 mod 360
By same_angle_v0 on D, B, E, F we get angle(B, D, F) == angle(E, D, F) mod 360
By same_angle_v1 on G, F, B, C we get angle(B, G, C) == angle(F, G, C) mod 360
By same_angle_v1 on H, G, D, E we get angle(D, H, E) == angle(G, H, E) mod 360
By same_angle_v1 on F, A, B, D we get angle(A, F, D) == angle(B, F, D) mod 360
By same_angle_v0 on C, E, A, G we get angle(A, C, G) == angle(E, C, G) mod 360
By same_angle_v3 on F, G, A, D we get angle(G, F, D) == angle(A, F, D) + 180 mod 360
By same_angle_v1 on G, F, A, C we get angle(A, G, C) == angle(F, G, C) mod 360
By in_imply_collinear on orthocenter(A, C, F), A, F we get collinear(A, F, orthocenter(A, C, F))
By in_imply_collinear on orthocenter(C, F, G), F, B we get collinear(B, F, orthocenter(C, F, G))
By in_imply_collinear on orthocenter(A, C, F), G, F we get collinear(F, G, orthocenter(A, C, F))
By in_imply_collinear on orthocenter(C, D, F), C, F we get collinear(C, F, orthocenter(C, D, F))
By in_imply_collinear on orthocenter(A, C, F), F, C we get collinear(C, F, orthocenter(A, C, F))
By in_imply_collinear on orthocenter(C, D, F), D, C we get collinear(C, D, orthocenter(C, D, F))
By in_imply_collinear on orthocenter(C, F, G), C, F we get collinear(C, F, orthocenter(C, F, G))
By in_imply_collinear on orthocenter(B, C, F), F, B we get collinear(B, F, orthocenter(B, C, F))
By in_imply_collinear on orthocenter(C, F, G), A, G we get collinear(A, G, orthocenter(C, F, G))
By in_imply_collinear on orthocenter(B, C, F), G, A we get collinear(A, G, orthocenter(B, C, F))
By in_imply_collinear on orthocenter(B, D, H), G, H we get collinear(G, H, orthocenter(B, D, H))
By collinear_definition on C, A, E we get A in Line(C, E), E in Line(A, C), Line(A, C) == Line(C, E), 0 == 2 * angle(A, C, E) mod 360
By in_imply_collinear on orthocenter(B, C, F), F, A we get collinear(A, F, orthocenter(B, C, F))
By in_imply_collinear on orthocenter(B, D, H), H, D we get collinear(D, H, orthocenter(B, D, H))
By line_containment_inequality on orthocenter(B, G, H), G, Line(B, H) we get G != orthocenter(B, G, H)
By in_imply_collinear on orthocenter(A, C, F), G, B we get collinear(B, G, orthocenter(A, C, F))
By in_imply_collinear on orthocenter(B, G, H), G, H we get collinear(G, H, orthocenter(B, G, H))
By in_imply_collinear on orthocenter(A, C, F), A, B we get collinear(A, B, orthocenter(A, C, F))
By in_imply_collinear on orthocenter(B, C, F), A, B we get collinear(A, B, orthocenter(B, C, F))
By in_imply_collinear on orthocenter(B, C, F), F, C we get collinear(C, F, orthocenter(B, C, F))
By in_imply_collinear on orthocenter(B, C, F), B, G we get collinear(B, G, orthocenter(B, C, F))
By in_imply_collinear on orthocenter(B, G, H), B, H we get collinear(B, H, orthocenter(B, G, H))
By in_imply_collinear on orthocenter(C, F, G), B, G we get collinear(B, G, orthocenter(C, F, G))
By in_imply_collinear on orthocenter(B, C, F), F, G we get collinear(F, G, orthocenter(B, C, F))
By parallel_line_angles_reverse_v2 on F, A, C, D we get angle(F, A, C) == angle(D, C, A) + 180 mod 360
By in_imply_collinear on orthocenter(C, F, G), F, G we get collinear(F, G, orthocenter(C, F, G))
By in_imply_collinear on orthocenter(C, F, G), A, B we get collinear(A, B, orthocenter(C, F, G))
By in_imply_collinear on orthocenter(A, C, F), A, G we get collinear(A, G, orthocenter(A, C, F))
By in_imply_collinear on orthocenter(C, F, G), A, F we get collinear(A, F, orthocenter(C, F, G))
By in_imply_collinear on orthocenter(B, D, H), H, B we get collinear(B, H, orthocenter(B, D, H))
By parallel_line_angles_reverse_v3 on D, C, A, F we get angle(D, C, A) == angle(F, A, C) + 180 mod 360
By line_inequality on Line(A, C), i, C we get i != Line(A, C)
By line_containment_inequality on orthocenter(B, D, H), A, Line(B, H) we get A != orthocenter(B, D, H)
By in_imply_collinear on orthocenter(B, D, H), D, G we get collinear(D, G, orthocenter(B, D, H))
By line_inequality on Line(C, G), j, C we get j != Line(C, G)
By in_imply_collinear on orthocenter(B, G, H), D, H we get collinear(D, H, orthocenter(B, G, H))
By in_imply_collinear on orthocenter(A, C, F), B, F we get collinear(B, F, orthocenter(A, C, F))
By line_containment_inequality on orthocenter(C, D, F), H, Line(C, F) we get H != orthocenter(C, D, F)
By parallel_line_angles_reverse_v2 on G, A, C, D we get angle(G, A, C) == angle(D, C, A) + 180 mod 360
By line_inequality on Line(D, F), Line(B, H), D we get Line(B, H) != Line(D, F)
By line_inequality on Line(A, C), f, C we get f != Line(A, C)
By line_containment_inequality on orthocenter(B, G, H), C, j we get C != orthocenter(B, G, H)
By double_perpendicular_and_parallel_v0_r on f, altitude(H, B, G), h we get perpendicular(h, altitude(H, B, G))
By collinear_definition on A, E, C we get E in Line(A, C), C in Line(A, E), Line(A, C) == Line(A, E), 0 == 2 * angle(E, A, C) mod 360
By line_containment_inequality on orthocenter(A, C, F), H, Line(C, F) we get H != orthocenter(A, C, F)
By parallel_line_angles_reverse_v3 on D, C, A, G we get angle(D, C, A) == angle(G, A, C) + 180 mod 360
By collinear_definition on E, C, A we get C in Line(A, E), A in Line(C, E), Line(A, E) == Line(C, E), 0 == 2 * angle(C, E, A) mod 360
By between_implies_angles on C, E, A we get 180 == angle(C, E, A) mod 360, 0 == angle(E, A, C) mod 360, 0 == angle(A, C, E) mod 360
By line_inequality on altitude(F, A, C), Line(B, H), F we get Line(B, H) != altitude(F, A, C)
By double_perpendicular_and_parallel_v0 on altitude(H, B, G), f, Line(C, F) we get parallel(Line(C, F), altitude(H, B, G))
By line_inequality on Line(E, H), Line(C, F), H we get Line(C, F) != Line(E, H)
By line_inequality on Line(D, F), Line(A, E), F we get Line(A, E) != Line(D, F)
By line_containment_inequality on orthocenter(C, F, G), H, Line(C, F) we get H != orthocenter(C, F, G)
By between_imply_segment_sum on G, F, B we get distance(B, G) == distance(F, G) + distance(B, F)
By line_inequality on Line(D, F), Line(C, F), D we get Line(C, F) != Line(D, F)
By line_circle_intersection_has_at_most_two_points_0 on B, G, F, Circle(B, E, G) we get F not in Circle(B, E, G)
By line_inequality on altitude(H, B, D), h, H we get h != altitude(H, B, D)
By line_circle_intersection_has_at_most_two_points_0 on E, B, D, Circle(B, E, G) we get D not in Circle(B, E, G)
By line_inequality on altitude(F, B, C), j, F we get j != altitude(F, B, C)
By line_inequality on Line(A, C), Line(B, H), E we get Line(A, C) != Line(B, H)
By not_in_line_equivalent_to_not_collinear_v0_r on B, C, A we get B not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on C, D, F we get C not in Line(D, F)
By line_containment_inequality on orthocenter(C, D, F), B, h we get B != orthocenter(C, D, F)
By line_inequality on altitude(C, D, F), i, C we get i != altitude(C, D, F)
By double_perpendicular_and_parallel_v0_r on g, altitude(F, B, C), i we get perpendicular(i, altitude(F, B, C))
By sas_anti_similarity on D, E, G, A, B, C we get anti_similar_triangles(A, B, C, D, E, G)
By line_inequality on Line(E, H), f, H we get f != Line(E, H)
By line_inequality on altitude(C, D, F), Line(E, G), C we get Line(E, G) != altitude(C, D, F)
By sas_anti_similarity on D, E, G, C, D, A we get anti_similar_triangles(A, C, D, G, D, E)
By line_inequality on Line(D, F), g, D we get g != Line(D, F)
By line_inequality on Line(E, H), g, H we get g != Line(E, H)
By not_in_line_equivalent_to_not_collinear_v0_r on E, D, F we get E not in Line(D, F)
By sas_anti_similarity on C, D, A, D, E, G we get anti_similar_triangles(A, C, D, G, D, E)
By between_implies_angles on A, E, C we get 180 == angle(A, E, C) mod 360, 0 == angle(E, C, A) mod 360, 0 == angle(C, A, E) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on G, E, H we get G not in Line(E, H)
By line_inequality on Line(A, C), Line(C, F), A we get Line(A, C) != Line(C, F)
By collinear_definition on A, C, E we get C in Line(A, E), E in Line(A, C), Line(A, C) == Line(A, E), 0 == 2 * angle(C, A, E) mod 360
By collinear_definition on C, E, A we get E in Line(A, C), A in Line(C, E), Line(A, C) == Line(C, E), 0 == 2 * angle(E, C, A) mod 360
By line_containment_inequality on orthocenter(C, F, G), E, f we get E != orthocenter(C, F, G)
By line_containment_inequality on orthocenter(C, D, F), F, h we get F != orthocenter(C, D, F)
By isosceles_triangle_properties on E, A, C we get distance(A, E) == distance(C, E), angle(A, C, E) == angle(E, A, C) mod 360
By isosceles_triangle_properties on E, C, A we get distance(A, E) == distance(C, E), angle(C, A, E) == angle(E, C, A) mod 360
By between_imply_segment_sum on A, F, G we get distance(A, G) == distance(A, F) + distance(F, G)
By collinear_definition on E, A, C we get A in Line(C, E), C in Line(A, E), Line(A, E) == Line(C, E), 0 == 2 * angle(A, E, C) mod 360
By line_inequality on Line(C, G), Line(B, H), G we get Line(B, H) != Line(C, G)
By not_in_line_equivalent_to_not_collinear_v0_r on B, D, F we get B not in Line(D, F)
By line_inequality on Line(A, C), Line(B, D), C we get Line(A, C) != Line(B, D)
By line_inequality on altitude(H, B, G), Line(B, D), H we get Line(B, D) != altitude(H, B, G)
By line_containment_inequality on orthocenter(B, G, H), A, Line(B, H) we get A != orthocenter(B, G, H)
By sas_anti_similarity on C, B, A, G, E, D we get anti_similar_triangles(A, B, C, D, E, G)
By sas_anti_similarity on G, E, D, C, B, A we get anti_similar_triangles(A, B, C, D, E, G)
By line_inequality on altitude(F, C, G), Line(E, G), F we get Line(E, G) != altitude(F, C, G)
By line_inequality on Line(D, F), h, F we get h != Line(D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on A, F, D we get A not in Line(D, F)
By sas_anti_similarity on G, E, D, A, D, C we get anti_similar_triangles(A, C, D, G, D, E)
By line_inequality on altitude(H, B, D), Line(B, D), H we get Line(B, D) != altitude(H, B, D)
By sas_anti_similarity on A, D, C, G, E, D we get anti_similar_triangles(A, C, D, G, D, E)
By line_inequality on Line(D, F), i, F we get i != Line(D, F)
By line_inequality on Line(C, E), g, E we get g != Line(C, E)
By line_inequality on Line(E, H), Line(A, E), H we get Line(A, E) != Line(E, H)
By sas_anti_similarity on A, B, C, D, E, G we get anti_similar_triangles(A, B, C, D, E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on H, A, C we get H not in Line(A, C)
By line_inequality on Line(D, F), Line(B, D), F we get Line(B, D) != Line(D, F)
By line_containment_inequality on orthocenter(B, C, F), E, Line(C, F) we get E != orthocenter(B, C, F)
By not_in_line_equivalent_to_not_collinear_v0_r on B, H, E we get B not in Line(E, H)
By line_inequality on altitude(F, C, G), Line(B, H), F we get Line(B, H) != altitude(F, C, G)
By line_inequality on Line(A, C), j, A we get j != Line(A, C)
By line_inequality on altitude(F, B, C), h, F we get h != altitude(F, B, C)
By line_inequality on Line(C, G), i, C we get i != Line(C, G)
By line_inequality on altitude(C, D, F), Line(B, H), C we get Line(B, H) != altitude(C, D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on E, G, C we get E not in Line(C, G)
By not_in_line_equivalent_to_not_collinear_v0_r on C, E, H we get C not in Line(E, H)
By not_in_line_equivalent_to_not_collinear_v0_r on F, A, C we get F not in Line(A, C)
By line_inequality on altitude(F, B, C), i, F we get i != altitude(F, B, C)
By line_inequality on altitude(H, B, G), i, H we get i != altitude(H, B, G)
By line_containment_inequality on orthocenter(C, F, G), D, Line(C, F) we get D != orthocenter(C, F, G)
By line_inequality on altitude(F, B, C), Line(A, E), F we get Line(A, E) != altitude(F, B, C)
By line_inequality on altitude(H, B, D), Line(E, G), H we get Line(E, G) != altitude(H, B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on H, C, G we get H not in Line(C, G)
By line_inequality on Line(C, G), Line(C, F), G we get Line(C, F) != Line(C, G)
By line_circle_intersection_has_at_most_two_points_0 on B, G, A, Circle(B, E, G) we get A not in Circle(B, E, G)
By line_inequality on altitude(F, C, G), Line(B, D), F we get Line(B, D) != altitude(F, C, G)
By not_in_line_equivalent_to_not_collinear_v0_r on G, E, C we get G not in Line(C, E)
By line_inequality on Line(E, H), Line(E, G), H we get Line(E, G) != Line(E, H)
By not_in_line_equivalent_to_not_collinear_v0_r on D, E, C we get D not in Line(C, E)
By line_containment_inequality on orthocenter(B, D, H), C, j we get C != orthocenter(B, D, H)
By line_inequality on Line(E, H), i, H we get i != Line(E, H)
By line_containment_inequality on orthocenter(C, F, G), C, f we get C != orthocenter(C, F, G)
By line_containment_inequality on orthocenter(B, C, F), B, Line(C, F) we get B != orthocenter(B, C, F)
By not_in_line_equivalent_to_not_collinear_v0_r on D, G, C we get D not in Line(C, G)
By line_inequality on Line(C, G), Line(B, D), C we get Line(B, D) != Line(C, G)
By line_circle_intersection_has_at_most_two_points_0 on E, A, C, c we get C not in c
By line_inequality on Line(C, G), Line(A, E), G we get Line(A, E) != Line(C, G)
By line_inequality on altitude(F, C, G), i, F we get i != altitude(F, C, G)
By line_inequality on Line(C, E), i, E we get i != Line(C, E)
By line_containment_inequality on orthocenter(B, D, H), E, Line(B, H) we get E != orthocenter(B, D, H)
By line_inequality on altitude(F, A, C), Line(B, D), F we get Line(B, D) != altitude(F, A, C)
By line_inequality on altitude(F, A, C), j, F we get j != altitude(F, A, C)
By line_inequality on Line(A, C), g, E we get g != Line(A, C)
By line_inequality on altitude(C, D, F), Line(B, D), C we get Line(B, D) != altitude(C, D, F)
By line_inequality on altitude(H, B, D), i, H we get i != altitude(H, B, D)
By line_inequality on altitude(H, B, G), Line(A, E), H we get Line(A, E) != altitude(H, B, G)
By not_in_line_equivalent_to_not_collinear_v0_r on A, H, E we get A not in Line(E, H)
By line_inequality on Line(C, G), g, G we get g != Line(C, G)
By line_inequality on altitude(C, D, F), j, C we get j != altitude(C, D, F)
By line_containment_inequality on orthocenter(C, F, G), B, Line(C, F) we get B != orthocenter(C, F, G)
By line_containment_inequality on orthocenter(C, D, F), E, Line(C, F) we get E != orthocenter(C, D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on B, G, C we get B not in Line(C, G)
By line_inequality on altitude(F, A, C), h, F we get h != altitude(F, A, C)
By line_inequality on Line(E, H), h, E we get h != Line(E, H)
By line_inequality on altitude(H, B, G), g, H we get g != altitude(H, B, G)
By line_inequality on Line(C, E), Line(B, H), C we get Line(B, H) != Line(C, E)
By line_containment_inequality on orthocenter(A, C, F), B, Line(C, F) we get B != orthocenter(A, C, F)
By line_inequality on Line(D, F), j, F we get j != Line(D, F)
By line_inequality on altitude(H, B, G), f, H we get f != altitude(H, B, G)
By not_in_line_equivalent_to_not_collinear_v0_r on D, E, H we get D not in Line(E, H)
By line_inequality on Line(D, F), Line(E, G), F we get Line(D, F) != Line(E, G)
By line_inequality on Line(C, G), Line(E, G), C we get Line(C, G) != Line(E, G)
By line_inequality on altitude(H, B, D), Line(C, F), H we get Line(C, F) != altitude(H, B, D)
By line_inequality on Line(D, F), f, D we get f != Line(D, F)
By line_containment_inequality on orthocenter(C, D, F), A, Line(C, F) we get A != orthocenter(C, D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on F, C, E we get F not in Line(C, E)
By line_inequality on Line(A, C), Line(E, G), C we get Line(A, C) != Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on B, C, E we get B not in Line(C, E)
By line_inequality on Line(C, E), f, E we get f != Line(C, E)
By line_containment_inequality on orthocenter(B, D, H), D, Line(B, H) we get D != orthocenter(B, D, H)
By line_inequality on altitude(F, C, G), h, F we get h != altitude(F, C, G)
By line_inequality on Line(C, E), Line(B, D), C we get Line(B, D) != Line(C, E)
By line_containment_inequality on orthocenter(C, F, G), A, Line(C, F) we get A != orthocenter(C, F, G)
By line_inequality on altitude(F, C, G), Line(A, E), F we get Line(A, E) != altitude(F, C, G)
By line_inequality on Line(C, E), Line(E, G), C we get Line(C, E) != Line(E, G)
By line_inequality on altitude(F, C, G), g, F we get g != altitude(F, C, G)
By line_inequality on Line(C, E), j, E we get j != Line(C, E)
By line_containment_inequality on orthocenter(A, C, F), D, f we get D != orthocenter(A, C, F)
By line_containment_inequality on orthocenter(C, D, F), G, Line(C, F) we get G != orthocenter(C, D, F)
By line_inequality on Line(A, C), h, A we get h != Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on G, C, A we get G not in Line(A, C)
By line_inequality on altitude(F, A, C), Line(A, E), F we get Line(A, E) != altitude(F, A, C)
By line_inequality on altitude(H, B, G), Line(C, F), H we get Line(C, F) != altitude(H, B, G)
By line_containment_inequality on orthocenter(B, C, F), C, f we get C != orthocenter(B, C, F)
By line_containment_inequality on orthocenter(B, C, F), D, Line(C, F) we get D != orthocenter(B, C, F)
By line_inequality on altitude(H, B, G), h, H we get h != altitude(H, B, G)
By line_containment_inequality on orthocenter(B, G, H), E, j we get E != orthocenter(B, G, H)
By line_inequality on altitude(F, B, C), Line(E, G), F we get Line(E, G) != altitude(F, B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on F, G, C we get F not in Line(C, G)
By line_containment_inequality on orthocenter(A, C, F), E, Line(C, F) we get E != orthocenter(A, C, F)
By line_containment_inequality on orthocenter(A, C, F), A, Line(C, F) we get A != orthocenter(A, C, F)
By line_inequality on Line(C, E), h, E we get h != Line(C, E)
By not_in_line_equivalent_to_not_collinear_v0_r on H, D, F we get H not in Line(D, F)
By line_containment_inequality on orthocenter(B, G, H), B, j we get B != orthocenter(B, G, H)
By not_in_line_equivalent_to_not_collinear_v0_r on D, C, A we get D not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on G, F, D we get G not in Line(D, F)
By line_containment_inequality on orthocenter(A, C, F), G, Line(C, F) we get G != orthocenter(A, C, F)
By line_containment_inequality on orthocenter(B, G, H), F, Line(B, H) we get F != orthocenter(B, G, H)
By line_containment_inequality on orthocenter(B, D, H), B, j we get B != orthocenter(B, D, H)
By line_inequality on Line(E, H), j, E we get j != Line(E, H)
By not_in_line_equivalent_to_not_collinear_v0_r on F, H, E we get F not in Line(E, H)
By line_inequality on altitude(F, C, G), j, F we get j != altitude(F, C, G)
By line_containment_inequality on orthocenter(C, D, F), D, Line(C, F) we get D != orthocenter(C, D, F)
By line_inequality on altitude(H, B, G), Line(E, G), H we get Line(E, G) != altitude(H, B, G)
By line_inequality on Line(E, H), Line(B, D), H we get Line(B, D) != Line(E, H)
By line_inequality on altitude(F, A, C), i, F we get i != altitude(F, A, C)
By line_containment_inequality on orthocenter(B, D, H), F, Line(B, H) we get F != orthocenter(B, D, H)
By line_inequality on altitude(F, B, C), Line(B, H), F we get Line(B, H) != altitude(F, B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on H, E, C we get H not in Line(C, E)
By not_in_line_equivalent_to_not_collinear_v0_r on A, G, C we get A not in Line(C, G)
By line_inequality on altitude(H, B, D), f, H we get f != altitude(H, B, D)
By line_inequality on altitude(F, B, C), Line(B, D), F we get Line(B, D) != altitude(F, B, C)
By line_inequality on Line(C, G), h, G we get h != Line(C, G)
By line_containment_inequality on orthocenter(B, G, H), D, Line(B, H) we get D != orthocenter(B, G, H)
By line_inequality on Line(E, H), Line(B, H), E we get Line(B, H) != Line(E, H)
By line_containment_inequality on orthocenter(B, C, F), A, Line(C, F) we get A != orthocenter(B, C, F)
By line_inequality on altitude(F, B, C), g, F we get g != altitude(F, B, C)
By line_inequality on altitude(C, D, F), f, C we get f != altitude(C, D, F)
By line_containment_inequality on orthocenter(B, C, F), G, Line(C, F) we get G != orthocenter(B, C, F)
By line_containment_inequality on orthocenter(A, C, F), C, f we get C != orthocenter(A, C, F)
By line_inequality on Line(C, G), f, C we get f != Line(C, G)
By line_inequality on altitude(F, A, C), g, F we get g != altitude(F, A, C)
By line_containment_inequality on orthocenter(C, F, G), G, Line(C, F) we get G != orthocenter(C, F, G)
By line_containment_inequality on orthocenter(B, C, F), H, f we get H != orthocenter(B, C, F)
By line_inequality on Line(C, E), Line(C, F), E we get Line(C, E) != Line(C, F)
By line_containment_inequality on orthocenter(B, D, H), G, Line(B, H) we get G != orthocenter(B, D, H)
By line_inequality on altitude(F, A, C), Line(E, G), F we get Line(E, G) != altitude(F, A, C)
By line_inequality on altitude(H, B, D), Line(A, E), H we get Line(A, E) != altitude(H, B, D)
By line_inequality on altitude(H, B, D), g, H we get g != altitude(H, B, D)
By external_angle_bisector_definition_v0_r on B, F, G, A we get Line(A, F) == external_angle_bisector(B, A, G)
By sss_anti_congruence_v0 on E, B, H, E, H, B we get anti_congruent_triangles(B, E, H, H, E, B)
By tangent_chord_angle_v1 on D, E, C, H we get tangent(Line(D, H), Circle(C, D, E))
By similar_triangle_basic_properties on C, D, E, A, B, E we get not_collinear(C, D, E), not_collinear(A, B, E), angle(A, B, E) == angle(C, D, E) mod 360, angle(B, E, A) == angle(D, E, C) mod 360, angle(E, A, B) == angle(E, C, D) mod 360, log(distance(A, B)) + log(distance(D, E)) == log(distance(C, D)) + log(distance(B, E)), log(distance(B, E)) + log(distance(C, E)) == log(distance(D, E)) + log(distance(A, E)), log(distance(A, E)) + log(distance(C, D)) == log(distance(C, E)) + log(distance(A, B))
By sss_anti_congruence_v0 on H, E, B, B, E, H we get anti_congruent_triangles(B, E, H, H, E, B)
By sss_anti_congruence_v0 on B, H, E, H, B, E we get anti_congruent_triangles(B, E, H, H, E, B)
By external_angle_bisector_definition_v0_r on B, A, G, F we get Line(A, F) == external_angle_bisector(B, F, G)
By sss_anti_congruence_v0 on D, E, H, H, E, D we get anti_congruent_triangles(D, E, H, H, E, D)
By tangent_chord_angle_v1 on D, C, E, G we get tangent(Line(D, G), Circle(C, D, E))
By sss_anti_congruence_v1 on H, B, E, B, H, E we get anti_congruent_triangles(B, E, H, H, E, B)
By reverse_direction on E, H we get 180 == direction(E, H) - direction(H, E) mod 360
By similar_triangle_basic_properties on D, E, A, B, E, C we get not_collinear(A, D, E), not_collinear(B, C, E), angle(B, E, C) == angle(D, E, A) mod 360, angle(E, A, D) == angle(E, C, B) mod 360, angle(A, D, E) == angle(C, B, E) mod 360, log(distance(B, E)) + log(distance(A, E)) == log(distance(D, E)) + log(distance(C, E)), log(distance(A, E)) + log(distance(B, C)) == log(distance(C, E)) + log(distance(A, D)), log(distance(A, D)) + log(distance(B, E)) == log(distance(B, C)) + log(distance(D, E))
By sss_anti_congruence_v0 on D, E, H, H, E, D we get anti_congruent_triangles(D, E, H, H, E, D)
By sss_anti_congruence_v1 on E, H, B, E, B, H we get anti_congruent_triangles(B, E, H, H, E, B)
By sss_anti_congruence_v1 on B, E, H, H, E, B we get anti_congruent_triangles(B, E, H, H, E, B)
By internal_angle_bisector_definition_v0_r on G, B, G, F we get Line(B, F) == internal_angle_bisector(G, F, G)
By sss_anti_congruence_v1 on H, B, E, B, H, E we get anti_congruent_triangles(B, E, H, H, E, B)
By internal_angle_bisector_definition_v0_r on F, B, A, G we get Line(B, G) == internal_angle_bisector(A, G, F)
By sss_anti_congruence_v1 on E, D, H, E, H, D we get anti_congruent_triangles(D, E, H, H, E, D)
By sss_anti_congruence_v1 on D, H, E, H, D, E we get anti_congruent_triangles(D, E, H, H, E, D)
By external_angle_bisector_definition_v0_r on G, B, A, F we get Line(B, F) == external_angle_bisector(A, F, G)
By anti_similar_triangle_basic_properties on C, D, E, D, B, G we get not_collinear(C, D, E), not_collinear(B, D, G), angle(C, D, E) == 0 - angle(D, B, G) mod 360, angle(D, E, C) == 0 - angle(B, G, D) mod 360, angle(E, C, D) == 0 - angle(G, D, B) mod 360, log(distance(B, D)) + log(distance(D, E)) == log(distance(C, D)) + log(distance(B, G)), log(distance(B, G)) + log(distance(C, E)) == log(distance(D, E)) + log(distance(D, G)), log(distance(C, E)) + log(distance(B, D)) == log(distance(D, G)) + log(distance(C, D))
By sss_anti_congruence_v0 on E, H, D, E, D, H we get anti_congruent_triangles(D, E, H, H, E, D)
By sss_anti_congruence_v1 on B, E, H, H, E, B we get anti_congruent_triangles(B, E, H, H, E, B)
By sss_anti_congruence_v0 on H, E, B, B, E, H we get anti_congruent_triangles(B, E, H, H, E, B)
By perpendicular_lines_draw_intersection on altitude(F, C, G), Line(C, G) we get exists(line_intersection(Line(C, G), altitude(F, C, G)))
By internal_angle_bisector_definition_v0_r on B, F, A, G we get Line(F, G) == internal_angle_bisector(A, G, B)
By external_angle_bisector_definition_v0_r on F, G, B, A we get Line(A, G) == external_angle_bisector(B, A, F)
By perpendicular_lines_draw_intersection on altitude(F, B, C), g we get exists(line_intersection(g, altitude(F, B, C)))
By sss_anti_congruence_v1 on E, D, H, E, H, D we get anti_congruent_triangles(D, E, H, H, E, D)
By sss_anti_congruence_v0 on E, H, D, E, D, H we get anti_congruent_triangles(D, E, H, H, E, D)
By similar_triangle_basic_properties on C, E, B, A, E, D we get not_collinear(B, C, E), not_collinear(A, D, E), angle(A, E, D) == angle(C, E, B) mod 360, angle(E, B, C) == angle(E, D, A) mod 360, angle(B, C, E) == angle(D, A, E) mod 360, log(distance(A, E)) + log(distance(B, E)) == log(distance(C, E)) + log(distance(D, E)), log(distance(B, E)) + log(distance(A, D)) == log(distance(D, E)) + log(distance(B, C)), log(distance(A, D)) + log(distance(C, E)) == log(distance(B, C)) + log(distance(A, E))
By sss_anti_congruence_v1 on H, B, E, B, H, E we get anti_congruent_triangles(B, E, H, H, E, B)
By perpendicular_lines_draw_intersection on f, altitude(H, B, G) we get exists(line_intersection(f, altitude(H, B, G)))
By sss_anti_congruence_v0 on E, H, D, E, D, H we get anti_congruent_triangles(D, E, H, H, E, D)
By sss_anti_congruence_v0 on E, H, D, E, D, H we get anti_congruent_triangles(D, E, H, H, E, D)
By sss_anti_congruence_v0 on H, E, B, B, E, H we get anti_congruent_triangles(B, E, H, H, E, B)
By internal_angle_bisector_definition_v0_r on G, A, G, F we get Line(A, F) == internal_angle_bisector(G, F, G)
By sss_anti_congruence_v0 on B, H, E, H, B, E we get anti_congruent_triangles(B, E, H, H, E, B)
By sss_anti_congruence_v0 on H, D, E, D, H, E we get anti_congruent_triangles(D, E, H, H, E, D)
By sss_anti_congruence_v0 on H, D, E, D, H, E we get anti_congruent_triangles(D, E, H, H, E, D)
By log_of_2_times_distance on B, D, H, E we get log(distance(B, D)) == 0.6931471805599453 + log(distance(E, H))
By power_of_a_point_on_circle on B, Circle(B, E, G) we get 0 == power_of_a_point(B, Circle(B, E, G))
By sss_anti_congruence_v0 on B, H, E, H, B, E we get anti_congruent_triangles(B, E, H, H, E, B)
By sss_anti_congruence_v1 on D, H, E, H, D, E we get anti_congruent_triangles(D, E, H, H, E, D)
By sss_anti_congruence_v0 on H, E, B, B, E, H we get anti_congruent_triangles(B, E, H, H, E, B)
By similar_triangle_basic_properties on A, E, B, C, E, D we get not_collinear(A, B, E), not_collinear(C, D, E), angle(A, E, B) == angle(C, E, D) mod 360, angle(E, B, A) == angle(E, D, C) mod 360, angle(B, A, E) == angle(D, C, E) mod 360, log(distance(A, E)) + log(distance(D, E)) == log(distance(C, E)) + log(distance(B, E)), log(distance(B, E)) + log(distance(C, D)) == log(distance(D, E)) + log(distance(A, B)), log(distance(A, B)) + log(distance(C, E)) == log(distance(C, D)) + log(distance(A, E))
By sss_anti_congruence_v0 on B, H, E, H, B, E we get anti_congruent_triangles(B, E, H, H, E, B)
By power_of_a_point_on_circle on E, Circle(B, E, G) we get 0 == power_of_a_point(E, Circle(B, E, G))
By isosceles_triangle_properties on E, H, D we get distance(D, E) == distance(E, H), angle(E, H, D) == angle(H, D, E) mod 360
By internal_angle_bisector_definition_v0_r on B, G, A, F we get Line(F, G) == internal_angle_bisector(A, F, B)
By internal_angle_bisector_definition_v0_r on F, B, F, G we get Line(B, G) == internal_angle_bisector(F, G, F)
By sss_anti_congruence_v1 on H, E, D, D, E, H we get anti_congruent_triangles(D, E, H, H, E, D)
By internal_angle_bisector_definition_v0_r on G, F, A, B we get Line(B, F) == internal_angle_bisector(A, B, G)
By sss_anti_congruence_v1 on E, D, H, E, H, D we get anti_congruent_triangles(D, E, H, H, E, D)
By sss_anti_congruence_v1 on B, E, H, H, E, B we get anti_congruent_triangles(B, E, H, H, E, B)
By internal_angle_bisector_definition_v0_r on B, A, F, G we get Line(A, G) == internal_angle_bisector(B, G, F)
By sss_anti_congruence_v1 on H, E, D, D, E, H we get anti_congruent_triangles(D, E, H, H, E, D)
By sas_anti_congruence on B, E, H, H, E, B we get anti_congruent_triangles(B, E, H, H, E, B)
By sss_anti_congruence_v0 on H, D, E, D, H, E we get anti_congruent_triangles(D, E, H, H, E, D)
By sss_anti_congruence_v1 on E, H, B, E, B, H we get anti_congruent_triangles(B, E, H, H, E, B)
By sss_anti_congruence_v1 on B, E, H, H, E, B we get anti_congruent_triangles(B, E, H, H, E, B)
By log_of_2_times_distance on C, A, A, E we get log(distance(A, C)) == 0.6931471805599453 + log(distance(A, E))
By perpendicular_lines_draw_intersection on Line(B, D), altitude(H, B, D) we get exists(line_intersection(Line(B, D), altitude(H, B, D)))
By sss_anti_congruence_v0 on E, B, H, E, H, B we get anti_congruent_triangles(B, E, H, H, E, B)
By sss_anti_congruence_v1 on D, H, E, H, D, E we get anti_congruent_triangles(D, E, H, H, E, D)
By sss_anti_congruence_v1 on H, E, D, D, E, H we get anti_congruent_triangles(D, E, H, H, E, D)
By sss_anti_congruence_v0 on E, B, H, E, H, B we get anti_congruent_triangles(B, E, H, H, E, B)
By sss_anti_congruence_v1 on E, D, H, E, H, D we get anti_congruent_triangles(D, E, H, H, E, D)
By sss_anti_congruence_v1 on H, E, D, D, E, H we get anti_congruent_triangles(D, E, H, H, E, D)
By sss_anti_congruence_v1 on E, D, H, E, H, D we get anti_congruent_triangles(D, E, H, H, E, D)
By sss_anti_congruence_v0 on H, D, E, D, H, E we get anti_congruent_triangles(D, E, H, H, E, D)
By sss_anti_congruence_v1 on H, B, E, B, H, E we get anti_congruent_triangles(B, E, H, H, E, B)
By internal_angle_bisector_definition_v0_r on F, G, A, B we get Line(B, G) == internal_angle_bisector(A, B, F)
By sss_anti_congruence_v1 on D, H, E, H, D, E we get anti_congruent_triangles(D, E, H, H, E, D)
By sss_anti_congruence_v1 on E, D, H, E, H, D we get anti_congruent_triangles(D, E, H, H, E, D)
By sss_anti_congruence_v0 on E, H, D, E, D, H we get anti_congruent_triangles(D, E, H, H, E, D)
By sss_anti_congruence_v0 on E, B, H, E, H, B we get anti_congruent_triangles(B, E, H, H, E, B)
By sss_anti_congruence_v0 on H, D, E, D, H, E we get anti_congruent_triangles(D, E, H, H, E, D)
By power_of_a_point_on_circle on G, Circle(B, E, G) we get 0 == power_of_a_point(G, Circle(B, E, G))
By isosceles_triangle_properties on E, B, H we get distance(B, E) == distance(E, H), angle(B, H, E) == angle(E, B, H) mod 360
By sas_anti_congruence on H, E, D, D, E, H we get anti_congruent_triangles(D, E, H, H, E, D)
By sss_anti_congruence_v1 on H, E, D, D, E, H we get anti_congruent_triangles(D, E, H, H, E, D)
By sas_anti_congruence on D, E, H, H, E, D we get anti_congruent_triangles(D, E, H, H, E, D)
By sss_anti_congruence_v1 on H, B, E, B, H, E we get anti_congruent_triangles(B, E, H, H, E, B)
By sss_anti_congruence_v1 on D, H, E, H, D, E we get anti_congruent_triangles(D, E, H, H, E, D)
By sss_anti_congruence_v0 on E, B, H, E, H, B we get anti_congruent_triangles(B, E, H, H, E, B)
By isosceles_triangle_properties on E, D, H we get distance(D, E) == distance(E, H), angle(D, H, E) == angle(E, D, H) mod 360
By sss_anti_congruence_v1 on E, H, B, E, B, H we get anti_congruent_triangles(B, E, H, H, E, B)
By isosceles_triangle_properties on E, H, B we get distance(B, E) == distance(E, H), angle(E, H, B) == angle(H, B, E) mod 360
By sss_anti_congruence_v0 on B, H, E, H, B, E we get anti_congruent_triangles(B, E, H, H, E, B)
By sss_anti_congruence_v0 on E, H, D, E, D, H we get anti_congruent_triangles(D, E, H, H, E, D)
By internal_angle_bisector_definition_v0_r on F, A, F, G we get Line(A, G) == internal_angle_bisector(F, G, F)
By sss_anti_congruence_v0 on D, E, H, H, E, D we get anti_congruent_triangles(D, E, H, H, E, D)
By sss_anti_congruence_v1 on E, H, B, E, B, H we get anti_congruent_triangles(B, E, H, H, E, B)
By sss_anti_congruence_v1 on H, B, E, B, H, E we get anti_congruent_triangles(B, E, H, H, E, B)
By sss_anti_congruence_v1 on E, H, B, E, B, H we get anti_congruent_triangles(B, E, H, H, E, B)
By sss_anti_congruence_v1 on E, H, B, E, B, H we get anti_congruent_triangles(B, E, H, H, E, B)
By sss_anti_congruence_v0 on D, E, H, H, E, D we get anti_congruent_triangles(D, E, H, H, E, D)
By sss_anti_congruence_v0 on E, B, H, E, H, B we get anti_congruent_triangles(B, E, H, H, E, B)
By sss_anti_congruence_v1 on B, E, H, H, E, B we get anti_congruent_triangles(B, E, H, H, E, B)
By sas_anti_congruence on H, E, B, B, E, H we get anti_congruent_triangles(B, E, H, H, E, B)
By sss_anti_congruence_v0 on D, E, H, H, E, D we get anti_congruent_triangles(D, E, H, H, E, D)
By sss_anti_congruence_v0 on H, D, E, D, H, E we get anti_congruent_triangles(D, E, H, H, E, D)
By sss_anti_congruence_v0 on D, E, H, H, E, D we get anti_congruent_triangles(D, E, H, H, E, D)
By sss_anti_congruence_v1 on D, H, E, H, D, E we get anti_congruent_triangles(D, E, H, H, E, D)
By sss_anti_congruence_v0 on H, E, B, B, E, H we get anti_congruent_triangles(B, E, H, H, E, B)
By draw_point_of_tangency on g, Circle(B, E, G) we get exists(line_circle_tangent_point(g, Circle(B, E, G)))
By sss_anti_congruence_v1 on B, E, H, H, E, B we get anti_congruent_triangles(B, E, H, H, E, B)
By sss_anti_congruence_v0 on H, E, B, B, E, H we get anti_congruent_triangles(B, E, H, H, E, B)
By sss_anti_congruence_v1 on H, E, D, D, E, H we get anti_congruent_triangles(D, E, H, H, E, D)
By sss_anti_congruence_v0 on B, H, E, H, B, E we get anti_congruent_triangles(B, E, H, H, E, B)
By perpendicular_lines_draw_intersection on altitude(C, D, F), Line(D, F) we get exists(line_intersection(Line(D, F), altitude(C, D, F)))
By perpendicular_lines_draw_intersection on altitude(F, A, C), Line(A, C) we get exists(line_intersection(Line(A, C), altitude(F, A, C)))
By altitude_definition on H, F, B, altitude(H, B, G) we get altitude(H, B, F) == altitude(H, B, G)
By parallel_line_angles_reverse_v0 on C, D, F, G we get angle(C, D, F) == angle(G, F, D) mod 360
By altitude_definition on H, D, E, altitude(H, B, D) we get altitude(H, B, D) == altitude(H, D, E)
By power_of_a_point_definition on E, D, B, Circle(B, D, H) we get log(distance(D, E)) + log(distance(B, E)) == log(power_of_a_point(E, Circle(B, D, H)))
By parallel_line_angles_reverse_v2 on C, D, F, B we get angle(C, D, F) == angle(B, F, D) + 180 mod 360
By parallel_line_angles_reverse_v1 on D, C, G, A we get angle(A, G, C) == angle(D, C, G) mod 360
By parallel_line_angles_reverse_v1 on F, G, C, D we get angle(D, C, G) == angle(F, G, C) mod 360
By parallel_line_angles_reverse_v1 on D, C, G, B we get angle(B, G, C) == angle(D, C, G) mod 360
By altitude_definition on H, G, A, altitude(H, B, G) we get altitude(H, A, G) == altitude(H, B, G)
By parallel_line_angles_reverse_v3 on A, F, D, C we get angle(A, F, D) == angle(C, D, F) + 180 mod 360
By parallel_line_angles_reverse_v3 on B, F, D, C we get angle(B, F, D) == angle(C, D, F) + 180 mod 360
By altitude_definition on H, A, B, altitude(H, B, G) we get altitude(H, A, B) == altitude(H, B, G)
By log_of_2_times_distance on A, C, E, C we get log(distance(A, C)) == 0.6931471805599453 + log(distance(C, E))
By altitude_definition on H, A, F, altitude(H, B, G) we get altitude(H, A, F) == altitude(H, B, G)
By parallel_line_angles_reverse_v2 on C, D, F, A we get angle(C, D, F) == angle(A, F, D) + 180 mod 360
By altitude_definition on H, F, G, altitude(H, B, G) we get altitude(H, B, G) == altitude(H, F, G)
By altitude_definition on H, B, E, altitude(H, B, D) we get altitude(H, B, D) == altitude(H, B, E)
By power_of_a_point_definition on G, H, D, Circle(B, D, H) we get log(distance(G, H)) + log(distance(D, G)) == log(power_of_a_point(G, Circle(B, D, H)))
By power_of_a_point_tangent on C, B, Circle(B, E, G) we get 2 * log(distance(B, C)) == log(power_of_a_point(C, Circle(B, E, G)))
By right_triangle_circumcenter_v1 on A, F, C we get midpoint(A, C) == circumcenter(A, C, F)
By power_of_a_point_definition on F, G, A, c we get log(power_of_a_point(F, c)) == log(distance(F, G)) + log(distance(A, F))
By line_intersection_definition on F, Line(D, F), Line(C, F) we get F == line_intersection(Line(C, F), Line(D, F))
By line_intersection_definition on E, Line(E, H), Line(B, D) we get E == line_intersection(Line(B, D), Line(E, H))
By line_intersection_definition on D, Line(D, F), Line(B, D) we get D == line_intersection(Line(B, D), Line(D, F))
By line_intersection_definition on D, Line(D, F), j we get D == line_intersection(j, Line(D, F))
By line_intersection_definition on G, Line(C, G), f we get G == line_intersection(f, Line(C, G))
By line_intersection_definition on G, Line(E, G), Line(C, G) we get G == line_intersection(Line(C, G), Line(E, G))
By line_intersection_definition on C, Line(A, C), g we get C == line_intersection(g, Line(A, C))
By perpendicular_line_definition on line_intersection(Line(C, G), altitude(F, C, G)), Line(C, G), altitude(F, C, G) we get Line(C, G) == perpendicular_line(line_intersection(Line(C, G), altitude(F, C, G)), altitude(F, C, G))
By perpendicular_line_definition on line_circle_tangent_point(g, Circle(B, E, G)), g, altitude(F, B, C) we get g == perpendicular_line(line_circle_tangent_point(g, Circle(B, E, G)), altitude(F, B, C))
By perpendicular_line_definition on line_intersection(Line(C, G), altitude(F, C, G)), altitude(F, C, G), Line(C, G) we get altitude(F, C, G) == perpendicular_line(line_intersection(Line(C, G), altitude(F, C, G)), Line(C, G))
By line_intersection_definition on C, Line(A, C), Line(C, F) we get C == line_intersection(Line(A, C), Line(C, F))
By perpendicular_line_definition on line_intersection(Line(A, C), altitude(F, A, C)), altitude(F, A, C), Line(A, C) we get altitude(F, A, C) == perpendicular_line(line_intersection(Line(A, C), altitude(F, A, C)), Line(A, C))
By line_intersection_definition on C, g, Line(C, G) we get C == line_intersection(g, Line(C, G))
By perpendicular_line_definition on H, altitude(H, A, B), h we get altitude(H, A, B) == perpendicular_line(H, h)
By line_intersection_definition on H, Line(E, H), j we get H == line_intersection(j, Line(E, H))
By perpendicular_line_definition on A, i, altitude(F, B, C) we get i == perpendicular_line(A, altitude(F, B, C))
By perpendicular_line_definition on C, h, altitude(H, A, B) we get h == perpendicular_line(C, altitude(H, A, B))
By line_intersection_definition on H, Line(B, H), Line(E, H) we get H == line_intersection(Line(B, H), Line(E, H))
By line_intersection_definition on E, Line(E, H), Line(A, C) we get E == line_intersection(Line(A, C), Line(E, H))
By line_intersection_definition on G, j, Line(C, G) we get G == line_intersection(j, Line(C, G))
By perpendicular_line_definition on line_intersection(Line(B, D), altitude(H, B, D)), Line(B, D), altitude(H, B, D) we get Line(B, D) == perpendicular_line(line_intersection(Line(B, D), altitude(H, B, D)), altitude(H, B, D))
By perpendicular_line_definition on line_intersection(Line(A, C), altitude(F, A, C)), Line(A, C), altitude(F, A, C) we get Line(A, C) == perpendicular_line(line_intersection(Line(A, C), altitude(F, A, C)), altitude(F, A, C))
By line_intersection_definition on D, i, Line(D, F) we get D == line_intersection(i, Line(D, F))
By line_intersection_definition on C, h, Line(C, G) we get C == line_intersection(h, Line(C, G))
By perpendicular_line_definition on line_intersection(Line(B, D), altitude(H, B, D)), altitude(H, B, D), Line(B, D) we get altitude(H, B, D) == perpendicular_line(line_intersection(Line(B, D), altitude(H, B, D)), Line(B, D))
By perpendicular_line_definition on D, i, altitude(F, B, C) we get i == perpendicular_line(D, altitude(F, B, C))
By perpendicular_line_definition on line_intersection(Line(D, F), altitude(C, D, F)), altitude(C, D, F), Line(D, F) we get altitude(C, D, F) == perpendicular_line(line_intersection(Line(D, F), altitude(C, D, F)), Line(D, F))
By perpendicular_line_definition on F, altitude(F, B, C), i we get altitude(F, B, C) == perpendicular_line(F, i)
By perpendicular_line_definition on line_intersection(f, altitude(H, A, B)), f, Line(C, F) we get f == perpendicular_line(line_intersection(f, altitude(H, A, B)), Line(C, F))
By line_intersection_definition on C, Line(C, F), Line(C, G) we get C == line_intersection(Line(C, F), Line(C, G))
By line_intersection_definition on C, Line(A, C), Line(C, G) we get C == line_intersection(Line(A, C), Line(C, G))
By perpendicular_line_definition on line_intersection(g, altitude(F, B, C)), g, altitude(F, B, C) we get g == perpendicular_line(line_intersection(g, altitude(F, B, C)), altitude(F, B, C))
By line_intersection_definition on D, h, Line(D, F) we get D == line_intersection(h, Line(D, F))
By line_intersection_definition on E, Line(E, H), Line(E, G) we get E == line_intersection(Line(E, G), Line(E, H))
By perpendicular_line_definition on line_intersection(f, altitude(H, A, B)), f, altitude(H, A, B) we get f == perpendicular_line(line_intersection(f, altitude(H, A, B)), altitude(H, A, B))
By perpendicular_line_definition on line_intersection(Line(D, F), altitude(C, D, F)), Line(D, F), altitude(C, D, F) we get Line(D, F) == perpendicular_line(line_intersection(Line(D, F), altitude(C, D, F)), altitude(C, D, F))
By perpendicular_line_definition on D, h, altitude(H, A, B) we get h == perpendicular_line(D, altitude(H, A, B))
By perpendicular_line_definition on line_intersection(f, altitude(H, A, B)), altitude(H, A, B), h we get altitude(H, A, B) == perpendicular_line(line_intersection(f, altitude(H, A, B)), h)
By line_intersection_definition on F, f, Line(D, F) we get F == line_intersection(f, Line(D, F))
By perpendicular_line_definition on line_intersection(f, altitude(H, A, B)), altitude(H, A, B), f we get altitude(H, A, B) == perpendicular_line(line_intersection(f, altitude(H, A, B)), f)
By perpendicular_line_definition on line_intersection(g, altitude(F, B, C)), altitude(F, B, C), g we get altitude(F, B, C) == perpendicular_line(line_intersection(g, altitude(F, B, C)), g)
By perpendicular_line_definition on line_intersection(g, altitude(F, B, C)), altitude(F, B, C), i we get altitude(F, B, C) == perpendicular_line(line_intersection(g, altitude(F, B, C)), i)
By line_intersection_definition on C, h, Line(A, C) we get C == line_intersection(h, Line(A, C))
By parallel_line_definition on line_circle_tangent_point(g, Circle(B, E, G)), g, i we get g == parallel_line(line_circle_tangent_point(g, Circle(B, E, G)), i)
By parallel_line_definition on C, Line(C, F), altitude(H, A, B) we get Line(C, F) == parallel_line(C, altitude(H, A, B))
By parallel_line_definition on H, altitude(H, A, B), Line(C, F) we get altitude(H, A, B) == parallel_line(H, Line(C, F))
By circle_radius_v0_r on F, Circle(A, C, F) we get radius(Circle(A, C, F)) == distance(F, center(Circle(A, C, F)))
By parallel_line_definition on line_intersection(f, altitude(H, A, B)), f, h we get f == parallel_line(line_intersection(f, altitude(H, A, B)), h)
By parallel_line_definition on line_intersection(g, altitude(F, B, C)), g, i we get g == parallel_line(line_intersection(g, altitude(F, B, C)), i)
By parallel_line_definition on line_intersection(f, altitude(H, A, B)), altitude(H, A, B), Line(C, F) we get altitude(H, A, B) == parallel_line(line_intersection(f, altitude(H, A, B)), Line(C, F))
By parallel_line_definition on F, Line(C, F), altitude(H, A, B) we get Line(C, F) == parallel_line(F, altitude(H, A, B))
By circle_radius_v0_r on C, Circle(A, C, F) we get radius(Circle(A, C, F)) == distance(C, center(Circle(A, C, F)))
By circle_radius_v0_r on A, Circle(A, C, F) we get radius(Circle(A, C, F)) == distance(A, center(Circle(A, C, F)))
By angle_to_center on F, C, A, Circle(A, C, F) we get 2 * angle(F, C, A) == angle(F, center(Circle(A, C, F)), A) mod 360
By angle_to_center on A, C, F, Circle(A, C, F) we get 2 * angle(A, C, F) == angle(A, center(Circle(A, C, F)), F) mod 360
By angle_to_center on C, A, F, Circle(A, C, F) we get 2 * angle(C, A, F) == angle(C, center(Circle(A, C, F)), F) mod 360
By center_not_on_circle on Circle(A, C, F) we get center(Circle(A, C, F)) not in Circle(A, C, F)
By angle_to_center on F, A, C, Circle(A, C, F) we get 2 * angle(F, A, C) == angle(F, center(Circle(A, C, F)), C) mod 360
By in_imply_collinear on line_intersection(f, altitude(H, A, B)), F, G we get collinear(F, G, line_intersection(f, altitude(H, A, B)))
By in_imply_concyclic on B, E, G, line_circle_tangent_point(g, Circle(B, E, G)) we get concyclic(B, E, G, line_circle_tangent_point(g, Circle(B, E, G)))
By in_imply_collinear on line_intersection(f, altitude(H, A, B)), F, A we get collinear(A, F, line_intersection(f, altitude(H, A, B)))
By in_imply_collinear on line_intersection(Line(C, G), altitude(F, C, G)), G, C we get collinear(C, G, line_intersection(Line(C, G), altitude(F, C, G)))
By in_imply_collinear on line_circle_tangent_point(g, Circle(B, E, G)), C, B we get collinear(B, C, line_circle_tangent_point(g, Circle(B, E, G)))
By in_imply_collinear on line_intersection(f, altitude(H, A, B)), B, F we get collinear(B, F, line_intersection(f, altitude(H, A, B)))
By in_imply_collinear on line_intersection(Line(B, D), altitude(H, B, D)), E, D we get collinear(D, E, line_intersection(Line(B, D), altitude(H, B, D)))
By in_imply_collinear on line_intersection(f, altitude(H, A, B)), G, B we get collinear(B, G, line_intersection(f, altitude(H, A, B)))
By in_imply_collinear on line_intersection(f, altitude(H, A, B)), A, G we get collinear(A, G, line_intersection(f, altitude(H, A, B)))
By in_imply_collinear on line_intersection(f, altitude(H, A, B)), A, B we get collinear(A, B, line_intersection(f, altitude(H, A, B)))
By in_imply_collinear on line_intersection(g, altitude(F, B, C)), C, B we get collinear(B, C, line_intersection(g, altitude(F, B, C)))
By in_imply_collinear on line_intersection(Line(A, C), altitude(F, A, C)), E, A we get collinear(A, E, line_intersection(Line(A, C), altitude(F, A, C)))
By in_imply_collinear on line_intersection(Line(B, D), altitude(H, B, D)), B, E we get collinear(B, E, line_intersection(Line(B, D), altitude(H, B, D)))
By in_imply_collinear on line_intersection(Line(B, D), altitude(H, B, D)), D, B we get collinear(B, D, line_intersection(Line(B, D), altitude(H, B, D)))
By in_imply_collinear on line_intersection(Line(A, C), altitude(F, A, C)), C, A we get collinear(A, C, line_intersection(Line(A, C), altitude(F, A, C)))
By in_imply_collinear on line_intersection(Line(D, F), altitude(C, D, F)), D, F we get collinear(D, F, line_intersection(Line(D, F), altitude(C, D, F)))
By in_imply_collinear on line_intersection(Line(A, C), altitude(F, A, C)), E, C we get collinear(C, E, line_intersection(Line(A, C), altitude(F, A, C)))
By line_inequality on altitude(F, B, C), Line(C, G), F we get Line(C, G) != altitude(F, B, C)
By tangent_point_is_unique on line_circle_tangent_point(g, Circle(B, E, G)), B, Circle(B, E, G), g we get B == line_circle_tangent_point(g, Circle(B, E, G))
By line_containment_inequality on line_intersection(f, altitude(H, A, B)), H, f we get H != line_intersection(f, altitude(H, A, B))
By line_containment_inequality on line_intersection(g, altitude(F, B, C)), G, g we get G != line_intersection(g, altitude(F, B, C))
By line_containment_inequality on line_intersection(Line(C, G), altitude(F, C, G)), D, Line(C, G) we get D != line_intersection(Line(C, G), altitude(F, C, G))
By line_containment_inequality on line_intersection(f, altitude(H, A, B)), C, f we get C != line_intersection(f, altitude(H, A, B))
By line_inequality on altitude(H, B, D), Line(C, G), H we get Line(C, G) != altitude(H, B, D)
By line_inequality on altitude(H, B, D), Line(D, F), H we get Line(D, F) != altitude(H, B, D)
By line_containment_inequality on line_intersection(Line(A, C), altitude(F, A, C)), G, Line(A, C) we get G != line_intersection(Line(A, C), altitude(F, A, C))
By line_containment_inequality on line_intersection(Line(A, C), altitude(F, A, C)), B, Line(A, C) we get B != line_intersection(Line(A, C), altitude(F, A, C))
By line_inequality on altitude(C, D, F), Line(E, H), C we get Line(E, H) != altitude(C, D, F)
By line_containment_inequality on line_circle_tangent_point(g, Circle(B, E, G)), H, g we get H != line_circle_tangent_point(g, Circle(B, E, G))
By line_containment_inequality on line_intersection(g, altitude(F, B, C)), F, g we get F != line_intersection(g, altitude(F, B, C))
By line_containment_inequality on line_intersection(Line(A, C), altitude(F, A, C)), D, Line(A, C) we get D != line_intersection(Line(A, C), altitude(F, A, C))
By line_circle_intersection_has_at_most_two_points_0 on A, F, G, Circle(A, C, F) we get G not in Circle(A, C, F)
By line_circle_intersection_has_at_most_two_points_0 on A, F, B, Circle(A, C, F) we get B not in Circle(A, C, F)
By line_inequality on altitude(F, C, G), Line(E, H), F we get Line(E, H) != altitude(F, C, G)
By line_inequality on Line(C, G), Line(D, F), G we get Line(C, G) != Line(D, F)
By line_inequality on Line(E, H), Line(C, G), E we get Line(C, G) != Line(E, H)
By line_containment_inequality on line_intersection(g, altitude(F, B, C)), E, g we get E != line_intersection(g, altitude(F, B, C))
By line_containment_inequality on line_intersection(Line(C, G), altitude(F, C, G)), A, Line(C, G) we get A != line_intersection(Line(C, G), altitude(F, C, G))
By line_inequality on altitude(H, A, B), Line(C, G), H we get Line(C, G) != altitude(H, A, B)
By line_containment_inequality on line_intersection(Line(B, D), altitude(H, B, D)), G, Line(B, D) we get G != line_intersection(Line(B, D), altitude(H, B, D))
By line_circle_intersection_has_at_most_two_points_0 on A, C, E, Circle(A, C, F) we get E not in Circle(A, C, F)
By line_containment_inequality on line_intersection(g, altitude(F, B, C)), A, g we get A != line_intersection(g, altitude(F, B, C))
By line_containment_inequality on line_intersection(Line(A, C), altitude(F, A, C)), H, Line(A, C) we get H != line_intersection(Line(A, C), altitude(F, A, C))
By line_containment_inequality on line_intersection(g, altitude(F, B, C)), H, g we get H != line_intersection(g, altitude(F, B, C))
By line_inequality on altitude(H, A, B), Line(D, F), H we get Line(D, F) != altitude(H, A, B)
By line_containment_inequality on line_intersection(Line(D, F), altitude(C, D, F)), E, Line(D, F) we get E != line_intersection(Line(D, F), altitude(C, D, F))
By line_containment_inequality on line_intersection(Line(D, F), altitude(C, D, F)), H, Line(D, F) we get H != line_intersection(Line(D, F), altitude(C, D, F))
By line_containment_inequality on line_intersection(f, altitude(H, A, B)), E, f we get E != line_intersection(f, altitude(H, A, B))
By line_circle_intersection_has_at_most_two_points_0 on E, C, A, Circle(C, D, E) we get A not in Circle(C, D, E)
By line_containment_inequality on line_intersection(Line(A, C), altitude(F, A, C)), F, Line(A, C) we get F != line_intersection(Line(A, C), altitude(F, A, C))
By line_inequality on Line(E, H), Line(D, F), H we get Line(D, F) != Line(E, H)
By line_inequality on altitude(C, D, F), Line(D, F), C we get Line(D, F) != altitude(C, D, F)
By line_inequality on altitude(F, C, G), Line(C, G), F we get Line(C, G) != altitude(F, C, G)
By line_containment_inequality on line_intersection(Line(C, G), altitude(F, C, G)), E, Line(C, G) we get E != line_intersection(Line(C, G), altitude(F, C, G))
By line_containment_inequality on line_circle_tangent_point(g, Circle(B, E, G)), A, g we get A != line_circle_tangent_point(g, Circle(B, E, G))
By line_containment_inequality on line_intersection(Line(D, F), altitude(C, D, F)), C, Line(D, F) we get C != line_intersection(Line(D, F), altitude(C, D, F))
By line_containment_inequality on line_intersection(Line(D, F), altitude(C, D, F)), G, Line(D, F) we get G != line_intersection(Line(D, F), altitude(C, D, F))
By line_containment_inequality on line_circle_tangent_point(g, Circle(B, E, G)), E, g we get E != line_circle_tangent_point(g, Circle(B, E, G))
By line_inequality on altitude(F, A, C), Line(E, H), F we get Line(E, H) != altitude(F, A, C)
By line_containment_inequality on line_intersection(Line(D, F), altitude(C, D, F)), A, Line(D, F) we get A != line_intersection(Line(D, F), altitude(C, D, F))
By line_containment_inequality on line_intersection(g, altitude(F, B, C)), D, g we get D != line_intersection(g, altitude(F, B, C))
By line_containment_inequality on line_intersection(Line(B, D), altitude(H, B, D)), F, Line(B, D) we get F != line_intersection(Line(B, D), altitude(H, B, D))
By line_inequality on altitude(F, A, C), Line(C, G), F we get Line(C, G) != altitude(F, A, C)
By line_containment_inequality on line_circle_tangent_point(g, Circle(B, E, G)), F, g we get F != line_circle_tangent_point(g, Circle(B, E, G))
By line_containment_inequality on line_intersection(Line(C, G), altitude(F, C, G)), H, Line(C, G) we get H != line_intersection(Line(C, G), altitude(F, C, G))
By line_containment_inequality on line_intersection(Line(B, D), altitude(H, B, D)), C, Line(B, D) we get C != line_intersection(Line(B, D), altitude(H, B, D))
By line_circle_intersection_has_at_most_two_points_0 on D, E, B, Circle(C, D, E) we get B not in Circle(C, D, E)
By line_containment_inequality on line_intersection(f, altitude(H, A, B)), D, f we get D != line_intersection(f, altitude(H, A, B))
By line_containment_inequality on line_circle_tangent_point(g, Circle(B, E, G)), G, g we get G != line_circle_tangent_point(g, Circle(B, E, G))
By line_containment_inequality on line_intersection(Line(B, D), altitude(H, B, D)), H, Line(B, D) we get H != line_intersection(Line(B, D), altitude(H, B, D))
By line_containment_inequality on line_circle_tangent_point(g, Circle(B, E, G)), D, g we get D != line_circle_tangent_point(g, Circle(B, E, G))
By line_inequality on altitude(F, B, C), Line(E, H), F we get Line(E, H) != altitude(F, B, C)
By line_containment_inequality on line_intersection(Line(D, F), altitude(C, D, F)), B, Line(D, F) we get B != line_intersection(Line(D, F), altitude(C, D, F))
By line_containment_inequality on line_intersection(Line(B, D), altitude(H, B, D)), A, Line(B, D) we get A != line_intersection(Line(B, D), altitude(H, B, D))
By line_containment_inequality on line_intersection(Line(C, G), altitude(F, C, G)), B, Line(C, G) we get B != line_intersection(Line(C, G), altitude(F, C, G))
By line_containment_inequality on line_intersection(Line(C, G), altitude(F, C, G)), F, Line(C, G) we get F != line_intersection(Line(C, G), altitude(F, C, G))
By power_of_a_point_in_circle on F, Circle(A, C, F) we get 0 == power_of_a_point(F, Circle(A, C, F))
By power_of_a_point_in_circle on C, Circle(A, C, F) we get 0 == power_of_a_point(C, Circle(A, C, F))
By power_of_a_point_on_circle on D, Circle(C, D, E) we get 0 == power_of_a_point(D, Circle(C, D, E))
By internal_angle_bisector_definition_v0_r on A, E, A, C we get Line(C, E) == internal_angle_bisector(A, C, A)
By internal_angle_bisector_definition_v0_r on C, A, C, E we get Line(A, E) == internal_angle_bisector(C, E, C)
By power_of_a_point_on_circle on A, Circle(A, C, F) we get 0 == power_of_a_point(A, Circle(A, C, F))
By power_of_a_point_in_circle on C, Circle(C, D, E) we get 0 == power_of_a_point(C, Circle(C, D, E))
By power_of_a_point_on_circle on line_circle_tangent_point(g, Circle(B, E, G)), Circle(B, E, G) we get 0 == power_of_a_point(line_circle_tangent_point(g, Circle(B, E, G)), Circle(B, E, G))
By power_of_a_point_on_circle on E, Circle(C, D, E) we get 0 == power_of_a_point(E, Circle(C, D, E))
By perpendicular_lines_draw_intersection on altitude(H, A, B), h we get exists(line_intersection(h, altitude(H, A, B)))
By internal_angle_bisector_definition_v0_r on A, C, A, E we get Line(C, E) == internal_angle_bisector(A, E, A)
By internal_angle_bisector_definition_v0_r on E, C, E, A we get Line(A, C) == internal_angle_bisector(E, A, E)
By internal_angle_bisector_definition_v0_r on C, E, C, A we get Line(A, E) == internal_angle_bisector(C, A, C)
By internal_angle_bisector_definition_v0_r on E, A, E, C we get Line(A, C) == internal_angle_bisector(E, C, E)
By perpendicular_lines_draw_intersection on i, altitude(F, B, C) we get exists(line_intersection(i, altitude(F, B, C)))
By draw_point_of_tangency on j, Circle(C, D, E) we get exists(line_circle_tangent_point(j, Circle(C, D, E)))
By altitude_definition on F, C, E, altitude(F, A, C) we get altitude(F, A, C) == altitude(F, C, E)
By similar_triangle_basic_properties on F, A, C, H, D, B we get not_collinear(A, C, F), not_collinear(B, D, H), angle(F, A, C) == angle(H, D, B) mod 360, angle(A, C, F) == angle(D, B, H) mod 360, angle(B, H, D) == angle(C, F, A) mod 360, log(distance(A, F)) + log(distance(B, D)) == log(distance(D, H)) + log(distance(A, C)), log(distance(A, C)) + log(distance(B, H)) == log(distance(B, D)) + log(distance(C, F)), log(distance(B, H)) + log(distance(A, F)) == log(distance(C, F)) + log(distance(D, H))
By power_of_a_point_definition on C, E, A, c we get log(power_of_a_point(C, c)) == log(distance(C, E)) + log(distance(A, C))
By altitude_definition on F, D, A, altitude(F, B, C) we get altitude(F, A, D) == altitude(F, B, C)
By altitude_definition on F, E, A, altitude(F, A, C) we get altitude(F, A, C) == altitude(F, A, E)
By altitude_definition on H, D, C, altitude(H, A, B) we get altitude(H, A, B) == altitude(H, C, D)
By similar_triangle_basic_properties on A, F, C, D, H, B we get not_collinear(A, C, F), not_collinear(B, D, H), angle(A, F, C) == angle(D, H, B) mod 360, angle(F, C, A) == angle(H, B, D) mod 360, angle(B, D, H) == angle(C, A, F) mod 360, log(distance(A, F)) + log(distance(B, H)) == log(distance(D, H)) + log(distance(C, F)), log(distance(B, H)) + log(distance(A, C)) == log(distance(C, F)) + log(distance(B, D)), log(distance(A, C)) + log(distance(D, H)) == log(distance(B, D)) + log(distance(A, F))
By power_of_a_point_tangent on H, D, Circle(C, D, E) we get 2 * log(distance(D, H)) == log(power_of_a_point(H, Circle(C, D, E)))
By power_of_a_point_definition on D, E, B, Circle(B, E, G) we get log(distance(D, E)) + log(distance(B, D)) == log(power_of_a_point(D, Circle(B, E, G)))
By power_of_a_point_tangent on G, D, Circle(C, D, E) we get 2 * log(distance(D, G)) == log(power_of_a_point(G, Circle(C, D, E)))
By power_of_a_point_definition on F, G, B, Circle(B, E, G) we get log(distance(F, G)) + log(distance(B, F)) == log(power_of_a_point(F, Circle(B, E, G)))
By power_of_a_point_definition on A, G, B, Circle(B, E, G) we get log(distance(A, G)) + log(distance(A, B)) == log(power_of_a_point(A, Circle(B, E, G)))
By line_definition on line_intersection(Line(B, D), altitude(H, B, D)), H, altitude(H, B, D) we get altitude(H, B, D) == Line(H, line_intersection(Line(B, D), altitude(H, B, D)))
By line_definition on F, line_intersection(g, altitude(F, A, D)), altitude(F, A, D) we get altitude(F, A, D) == Line(F, line_intersection(g, altitude(F, A, D)))
By line_definition on line_intersection(f, altitude(H, A, B)), H, altitude(H, A, B) we get altitude(H, A, B) == Line(H, line_intersection(f, altitude(H, A, B)))
By line_definition on line_intersection(Line(A, C), altitude(F, A, C)), F, altitude(F, A, C) we get altitude(F, A, C) == Line(F, line_intersection(Line(A, C), altitude(F, A, C)))
By line_definition on F, line_intersection(Line(C, G), altitude(F, C, G)), altitude(F, C, G) we get altitude(F, C, G) == Line(F, line_intersection(Line(C, G), altitude(F, C, G)))
By line_definition on C, line_intersection(Line(D, F), altitude(C, D, F)), altitude(C, D, F) we get altitude(C, D, F) == Line(C, line_intersection(Line(D, F), altitude(C, D, F)))
By perpendicular_line_definition on line_intersection(i, altitude(F, A, D)), i, altitude(F, A, D) we get i == perpendicular_line(line_intersection(i, altitude(F, A, D)), altitude(F, A, D))
By perpendicular_line_definition on line_intersection(h, altitude(H, A, B)), h, Line(C, F) we get h == perpendicular_line(line_intersection(h, altitude(H, A, B)), Line(C, F))
By median_definition on F, A, C, Line(E, F) we get Line(E, F) == median(F, A, C)
By median_definition on F, D, B, Line(E, F) we get Line(E, F) == median(F, B, D)
By perpendicular_line_definition on line_intersection(i, altitude(F, A, D)), altitude(F, A, D), i we get altitude(F, A, D) == perpendicular_line(line_intersection(i, altitude(F, A, D)), i)
By perpendicular_line_definition on line_intersection(h, altitude(H, A, B)), altitude(H, A, B), f we get altitude(H, A, B) == perpendicular_line(line_intersection(h, altitude(H, A, B)), f)
By perpendicular_line_definition on line_intersection(h, altitude(H, A, B)), altitude(H, A, B), h we get altitude(H, A, B) == perpendicular_line(line_intersection(h, altitude(H, A, B)), h)
By perpendicular_line_definition on line_circle_tangent_point(j, Circle(C, D, E)), j, Line(B, H) we get j == perpendicular_line(line_circle_tangent_point(j, Circle(C, D, E)), Line(B, H))
By perpendicular_line_definition on line_intersection(i, altitude(F, A, D)), altitude(F, A, D), g we get altitude(F, A, D) == perpendicular_line(line_intersection(i, altitude(F, A, D)), g)
By perpendicular_line_definition on line_intersection(h, altitude(H, A, B)), h, altitude(H, A, B) we get h == perpendicular_line(line_intersection(h, altitude(H, A, B)), altitude(H, A, B))
By between_implies_orientation on line_intersection(Line(D, F), altitude(C, D, F)), A, E, C we get orientation(A, E, line_intersection(Line(D, F), altitude(C, D, F))) == orientation(C, line_intersection(Line(D, F), altitude(C, D, F)), E) mod 360, orientation(A, C, line_intersection(Line(D, F), altitude(C, D, F))) == orientation(A, E, line_intersection(Line(D, F), altitude(C, D, F))) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(Line(A, C), altitude(F, A, C)), F, G, B we get orientation(B, line_intersection(Line(A, C), altitude(F, A, C)), G) == orientation(F, line_intersection(Line(A, C), altitude(F, A, C)), G) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(Line(D, F), altitude(C, D, F)), G, B, A we get orientation(A, line_intersection(Line(D, F), altitude(C, D, F)), B) == orientation(B, G, line_intersection(Line(D, F), altitude(C, D, F))) mod 360
By between_implies_orientation on line_intersection(Line(B, D), altitude(H, B, D)), G, F, A we get orientation(A, line_intersection(Line(B, D), altitude(H, B, D)), F) == orientation(F, line_intersection(Line(B, D), altitude(H, B, D)), G) mod 360, orientation(A, line_intersection(Line(B, D), altitude(H, B, D)), G) == orientation(F, line_intersection(Line(B, D), altitude(H, B, D)), G) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(g, altitude(F, A, D)), F, G, A we get orientation(A, line_intersection(g, altitude(F, A, D)), G) == orientation(F, line_intersection(g, altitude(F, A, D)), G) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(Line(A, C), altitude(F, A, C)), F, B, G we get orientation(B, F, line_intersection(Line(A, C), altitude(F, A, C))) == orientation(B, G, line_intersection(Line(A, C), altitude(F, A, C))) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(Line(D, F), altitude(C, D, F)), B, G, A we get orientation(A, line_intersection(Line(D, F), altitude(C, D, F)), G) == orientation(B, line_intersection(Line(D, F), altitude(C, D, F)), G) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(Line(A, C), altitude(F, A, C)), G, H, D we get orientation(D, line_intersection(Line(A, C), altitude(F, A, C)), H) == orientation(G, line_intersection(Line(A, C), altitude(F, A, C)), H) mod 360
By same_angle_v3 on E, B, D, F we get angle(B, E, F) == angle(D, E, F) + 180 mod 360
By collinear_and_not_between_implies_orientation on line_intersection(Line(C, G), altitude(F, C, G)), B, D, E we get orientation(B, line_intersection(Line(C, G), altitude(F, C, G)), D) == orientation(D, E, line_intersection(Line(C, G), altitude(F, C, G))) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(Line(A, C), altitude(F, A, C)), H, G, D we get orientation(D, line_intersection(Line(A, C), altitude(F, A, C)), G) == orientation(G, H, line_intersection(Line(A, C), altitude(F, A, C))) mod 360
By between_implies_orientation on line_intersection(g, altitude(F, A, D)), A, F, G we get orientation(A, F, line_intersection(g, altitude(F, A, D))) == orientation(F, G, line_intersection(g, altitude(F, A, D))) mod 360, orientation(A, F, line_intersection(g, altitude(F, A, D))) == orientation(A, G, line_intersection(g, altitude(F, A, D))) mod 360
By between_implies_orientation on line_intersection(Line(C, G), altitude(F, C, G)), D, E, B we get orientation(B, line_intersection(Line(C, G), altitude(F, C, G)), E) == orientation(D, E, line_intersection(Line(C, G), altitude(F, C, G))) mod 360, orientation(B, line_intersection(Line(C, G), altitude(F, C, G)), D) == orientation(D, E, line_intersection(Line(C, G), altitude(F, C, G))) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(Line(D, F), altitude(C, D, F)), A, C, E we get orientation(A, line_intersection(Line(D, F), altitude(C, D, F)), C) == orientation(C, E, line_intersection(Line(D, F), altitude(C, D, F))) mod 360
By between_implies_orientation on line_intersection(g, altitude(F, A, D)), G, D, H we get orientation(D, H, line_intersection(g, altitude(F, A, D))) == orientation(D, line_intersection(g, altitude(F, A, D)), G) mod 360, orientation(D, line_intersection(g, altitude(F, A, D)), G) == orientation(G, H, line_intersection(g, altitude(F, A, D))) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(Line(C, G), altitude(F, C, G)), A, B, F we get orientation(A, line_intersection(Line(C, G), altitude(F, C, G)), B) == orientation(B, F, line_intersection(Line(C, G), altitude(F, C, G))) mod 360
By between_implies_orientation on line_intersection(Line(A, C), altitude(F, A, C)), G, D, H we get orientation(D, H, line_intersection(Line(A, C), altitude(F, A, C))) == orientation(D, line_intersection(Line(A, C), altitude(F, A, C)), G) mod 360, orientation(D, line_intersection(Line(A, C), altitude(F, A, C)), G) == orientation(G, H, line_intersection(Line(A, C), altitude(F, A, C))) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(Line(C, G), altitude(F, C, G)), E, B, D we get orientation(B, D, line_intersection(Line(C, G), altitude(F, C, G))) == orientation(B, E, line_intersection(Line(C, G), altitude(F, C, G))) mod 360
By between_implies_orientation on line_intersection(Line(A, C), altitude(F, A, C)), G, F, B we get orientation(B, line_intersection(Line(A, C), altitude(F, A, C)), F) == orientation(F, line_intersection(Line(A, C), altitude(F, A, C)), G) mod 360, orientation(B, line_intersection(Line(A, C), altitude(F, A, C)), G) == orientation(F, line_intersection(Line(A, C), altitude(F, A, C)), G) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(g, altitude(F, A, D)), G, H, D we get orientation(D, line_intersection(g, altitude(F, A, D)), H) == orientation(G, line_intersection(g, altitude(F, A, D)), H) mod 360
By between_implies_orientation on line_intersection(Line(A, C), altitude(F, A, C)), H, D, G we get orientation(D, G, line_intersection(Line(A, C), altitude(F, A, C))) == orientation(D, line_intersection(Line(A, C), altitude(F, A, C)), H) mod 360, orientation(D, line_intersection(Line(A, C), altitude(F, A, C)), H) == orientation(G, line_intersection(Line(A, C), altitude(F, A, C)), H) mod 360
By between_implies_orientation on line_intersection(Line(A, C), altitude(F, A, C)), B, F, G we get orientation(B, F, line_intersection(Line(A, C), altitude(F, A, C))) == orientation(F, G, line_intersection(Line(A, C), altitude(F, A, C))) mod 360, orientation(B, F, line_intersection(Line(A, C), altitude(F, A, C))) == orientation(B, G, line_intersection(Line(A, C), altitude(F, A, C))) mod 360
By between_implies_orientation on line_intersection(Line(C, G), altitude(F, C, G)), B, A, F we get orientation(A, F, line_intersection(Line(C, G), altitude(F, C, G))) == orientation(A, line_intersection(Line(C, G), altitude(F, C, G)), B) mod 360, orientation(A, line_intersection(Line(C, G), altitude(F, C, G)), B) == orientation(B, F, line_intersection(Line(C, G), altitude(F, C, G))) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(Line(C, G), altitude(F, C, G)), A, F, B we get orientation(A, line_intersection(Line(C, G), altitude(F, C, G)), F) == orientation(B, line_intersection(Line(C, G), altitude(F, C, G)), F) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(Line(B, D), altitude(H, B, D)), F, A, G we get orientation(A, F, line_intersection(Line(B, D), altitude(H, B, D))) == orientation(A, G, line_intersection(Line(B, D), altitude(H, B, D))) mod 360
By between_implies_orientation on line_intersection(Line(D, F), altitude(C, D, F)), G, A, B we get orientation(A, B, line_intersection(Line(D, F), altitude(C, D, F))) == orientation(A, line_intersection(Line(D, F), altitude(C, D, F)), G) mod 360, orientation(A, line_intersection(Line(D, F), altitude(C, D, F)), G) == orientation(B, line_intersection(Line(D, F), altitude(C, D, F)), G) mod 360
By between_implies_orientation on line_intersection(g, altitude(F, A, D)), H, D, G we get orientation(D, G, line_intersection(g, altitude(F, A, D))) == orientation(D, line_intersection(g, altitude(F, A, D)), H) mod 360, orientation(D, line_intersection(g, altitude(F, A, D)), H) == orientation(G, line_intersection(g, altitude(F, A, D)), H) mod 360
By between_implies_orientation on line_intersection(Line(C, G), altitude(F, C, G)), B, E, D we get orientation(B, E, line_intersection(Line(C, G), altitude(F, C, G))) == orientation(D, line_intersection(Line(C, G), altitude(F, C, G)), E) mod 360, orientation(B, D, line_intersection(Line(C, G), altitude(F, C, G))) == orientation(B, E, line_intersection(Line(C, G), altitude(F, C, G))) mod 360
By between_implies_orientation on line_intersection(Line(D, F), altitude(C, D, F)), B, A, G we get orientation(A, G, line_intersection(Line(D, F), altitude(C, D, F))) == orientation(A, line_intersection(Line(D, F), altitude(C, D, F)), B) mod 360, orientation(A, line_intersection(Line(D, F), altitude(C, D, F)), B) == orientation(B, G, line_intersection(Line(D, F), altitude(C, D, F))) mod 360
By between_implies_orientation on line_intersection(Line(B, D), altitude(H, B, D)), A, F, G we get orientation(A, F, line_intersection(Line(B, D), altitude(H, B, D))) == orientation(F, G, line_intersection(Line(B, D), altitude(H, B, D))) mod 360, orientation(A, F, line_intersection(Line(B, D), altitude(H, B, D))) == orientation(A, G, line_intersection(Line(B, D), altitude(H, B, D))) mod 360
By between_implies_orientation on line_intersection(g, altitude(F, A, D)), G, F, A we get orientation(A, line_intersection(g, altitude(F, A, D)), F) == orientation(F, line_intersection(g, altitude(F, A, D)), G) mod 360, orientation(A, line_intersection(g, altitude(F, A, D)), G) == orientation(F, line_intersection(g, altitude(F, A, D)), G) mod 360
By between_implies_orientation on line_intersection(Line(D, F), altitude(C, D, F)), C, E, A we get orientation(A, line_intersection(Line(D, F), altitude(C, D, F)), E) == orientation(C, E, line_intersection(Line(D, F), altitude(C, D, F))) mod 360, orientation(A, line_intersection(Line(D, F), altitude(C, D, F)), C) == orientation(C, E, line_intersection(Line(D, F), altitude(C, D, F))) mod 360
By between_implies_orientation on line_intersection(Line(C, G), altitude(F, C, G)), F, A, B we get orientation(A, B, line_intersection(Line(C, G), altitude(F, C, G))) == orientation(A, line_intersection(Line(C, G), altitude(F, C, G)), F) mod 360, orientation(A, line_intersection(Line(C, G), altitude(F, C, G)), F) == orientation(B, line_intersection(Line(C, G), altitude(F, C, G)), F) mod 360
By parallel_line_definition on line_intersection(h, altitude(H, A, B)), altitude(H, A, B), Line(C, F) we get altitude(H, A, B) == parallel_line(line_intersection(h, altitude(H, A, B)), Line(C, F))
By parallel_line_definition on line_intersection(i, altitude(F, A, D)), i, g we get i == parallel_line(line_intersection(i, altitude(F, A, D)), g)
By parallel_line_definition on line_intersection(h, altitude(H, A, B)), h, f we get h == parallel_line(line_intersection(h, altitude(H, A, B)), f)
By same_angle_v2 on F, G, A, E we get angle(G, F, E) == angle(A, F, E) + 180 mod 360
By same_angle_v1 on F, B, A, E we get angle(A, F, E) == angle(B, F, E) mod 360
By same_angle_v3 on F, G, B, E we get angle(G, F, E) == angle(B, F, E) + 180 mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on B, E, F we get B not in Line(E, F)
By in_imply_collinear on line_circle_tangent_point(j, Circle(C, D, E)), D, H we get collinear(D, H, line_circle_tangent_point(j, Circle(C, D, E)))
By in_imply_collinear on line_circle_tangent_point(j, Circle(C, D, E)), H, G we get collinear(G, H, line_circle_tangent_point(j, Circle(C, D, E)))
By in_imply_collinear on line_intersection(h, altitude(H, A, B)), C, D we get collinear(C, D, line_intersection(h, altitude(H, A, B)))
By in_imply_collinear on line_circle_tangent_point(j, Circle(C, D, E)), G, D we get collinear(D, G, line_circle_tangent_point(j, Circle(C, D, E)))
By line_inequality on Line(E, F), Line(C, F), E we get Line(C, F) != Line(E, F)
By in_imply_collinear on line_intersection(i, altitude(F, A, D)), A, D we get collinear(A, D, line_intersection(i, altitude(F, A, D)))
By in_imply_concyclic on E, D, C, line_circle_tangent_point(j, Circle(C, D, E)) we get concyclic(C, D, E, line_circle_tangent_point(j, Circle(C, D, E)))
By tangent_point_is_unique on D, line_circle_tangent_point(j, Circle(C, D, E)), Circle(C, D, E), j we get D == line_circle_tangent_point(j, Circle(C, D, E))
By line_inequality on Line(E, F), Line(C, G), E we get Line(C, G) != Line(E, F)
By line_containment_inequality on line_intersection(i, altitude(F, A, D)), B, i we get B != line_intersection(i, altitude(F, A, D))
By line_containment_inequality on line_circle_tangent_point(j, Circle(C, D, E)), C, j we get C != line_circle_tangent_point(j, Circle(C, D, E))
By not_in_line_equivalent_to_not_collinear_v0_r on A, F, E we get A not in Line(E, F)
By not_in_line_equivalent_to_not_collinear_v0_r on H, E, F we get H not in Line(E, F)
By line_containment_inequality on line_circle_tangent_point(j, Circle(C, D, E)), B, j we get B != line_circle_tangent_point(j, Circle(C, D, E))
By line_inequality on Line(E, F), j, F we get j != Line(E, F)
By line_inequality on Line(E, F), i, E we get i != Line(E, F)
By line_containment_inequality on line_circle_tangent_point(j, Circle(C, D, E)), F, j we get F != line_circle_tangent_point(j, Circle(C, D, E))
By line_containment_inequality on line_intersection(h, altitude(H, A, B)), E, h we get E != line_intersection(h, altitude(H, A, B))
By line_inequality on Line(E, F), h, F we get h != Line(E, F)
By line_containment_inequality on line_intersection(i, altitude(F, A, D)), H, i we get H != line_intersection(i, altitude(F, A, D))
By line_containment_inequality on line_intersection(i, altitude(F, A, D)), F, i we get F != line_intersection(i, altitude(F, A, D))
By line_containment_inequality on line_circle_tangent_point(j, Circle(C, D, E)), E, j we get E != line_circle_tangent_point(j, Circle(C, D, E))
By line_containment_inequality on line_intersection(h, altitude(H, A, B)), H, h we get H != line_intersection(h, altitude(H, A, B))
By line_containment_inequality on line_intersection(i, altitude(F, A, D)), G, i we get G != line_intersection(i, altitude(F, A, D))
By line_inequality on Line(E, F), g, E we get g != Line(E, F)
By line_containment_inequality on line_intersection(h, altitude(H, A, B)), B, h we get B != line_intersection(h, altitude(H, A, B))
By not_in_line_equivalent_to_not_collinear_v0_r on D, E, F we get D not in Line(E, F)
By line_inequality on Line(E, F), Line(A, C), F we get Line(A, C) != Line(E, F)
By not_in_line_equivalent_to_not_collinear_v0_r on G, F, E we get G not in Line(E, F)
By line_inequality on Line(E, F), Line(B, H), E we get Line(B, H) != Line(E, F)
By line_containment_inequality on line_intersection(i, altitude(F, A, D)), C, i we get C != line_intersection(i, altitude(F, A, D))
By line_containment_inequality on line_circle_tangent_point(j, Circle(C, D, E)), A, j we get A != line_circle_tangent_point(j, Circle(C, D, E))
By line_inequality on Line(E, F), Line(E, G), F we get Line(E, F) != Line(E, G)
By line_inequality on Line(E, F), Line(D, F), E we get Line(D, F) != Line(E, F)
By line_containment_inequality on line_intersection(h, altitude(H, A, B)), F, h we get F != line_intersection(h, altitude(H, A, B))
By line_containment_inequality on line_intersection(h, altitude(H, A, B)), A, h we get A != line_intersection(h, altitude(H, A, B))
By line_containment_inequality on line_intersection(i, altitude(F, A, D)), E, i we get E != line_intersection(i, altitude(F, A, D))
By line_inequality on Line(E, F), Line(B, D), F we get Line(B, D) != Line(E, F)
By line_containment_inequality on line_intersection(h, altitude(H, A, B)), G, h we get G != line_intersection(h, altitude(H, A, B))
By line_inequality on Line(E, F), Line(E, H), F we get Line(E, F) != Line(E, H)
By not_in_line_equivalent_to_not_collinear_v0_r on C, E, F we get C not in Line(E, F)
By line_inequality on Line(E, F), f, E we get f != Line(E, F)
By aa_anti_similarity on D, E, H, F, E, A we get anti_similar_triangles(A, E, F, H, E, D)
By sss_anti_congruence_v1 on F, C, E, C, F, E we get anti_congruent_triangles(C, E, F, F, E, C)
By sss_anti_congruence_v1 on E, A, F, E, F, A we get anti_congruent_triangles(A, E, F, F, E, A)
By sas_similarity on F, C, E, H, B, E we get similar_triangles(B, E, H, C, E, F)
By sss_anti_congruence_v1 on C, E, F, F, E, C we get anti_congruent_triangles(C, E, F, F, E, C)
By aa_anti_similarity on B, H, E, F, C, E we get anti_similar_triangles(B, E, H, F, E, C)
By sas_anti_similarity on D, H, E, F, A, E we get anti_similar_triangles(A, E, F, H, E, D)
By aa_similarity on F, E, C, H, E, B we get similar_triangles(B, E, H, C, E, F)
By sss_anti_congruence_v1 on E, A, F, E, F, A we get anti_congruent_triangles(A, E, F, F, E, A)
By aa_similarity on H, B, E, F, C, E we get similar_triangles(B, E, H, C, E, F)
By sss_anti_congruence_v0 on E, C, F, E, F, C we get anti_congruent_triangles(C, E, F, F, E, C)
By sss_anti_congruence_v0 on F, A, E, A, F, E we get anti_congruent_triangles(A, E, F, F, E, A)
By sss_anti_congruence_v1 on E, F, C, E, C, F we get anti_congruent_triangles(C, E, F, F, E, C)
By sas_anti_similarity on E, H, B, E, C, F we get anti_similar_triangles(B, E, H, F, E, C)
By sss_anti_congruence_v1 on F, E, A, A, E, F we get anti_congruent_triangles(A, E, F, F, E, A)
By sss_anti_congruence_v1 on A, F, E, F, A, E we get anti_congruent_triangles(A, E, F, F, E, A)
By sss_anti_congruence_v1 on E, F, C, E, C, F we get anti_congruent_triangles(C, E, F, F, E, C)
By sss_anti_congruence_v1 on E, A, F, E, F, A we get anti_congruent_triangles(A, E, F, F, E, A)
By sss_anti_congruence_v1 on F, E, A, A, E, F we get anti_congruent_triangles(A, E, F, F, E, A)
By log_of_2_times_distance on C, A, E, F we get log(distance(A, C)) == 0.6931471805599453 + log(distance(E, F))
By aa_anti_similarity on F, E, C, B, E, H we get anti_similar_triangles(B, E, H, F, E, C)
By sss_anti_congruence_v0 on E, C, F, E, F, C we get anti_congruent_triangles(C, E, F, F, E, C)
By aa_anti_similarity on D, H, E, F, A, E we get anti_similar_triangles(A, E, F, H, E, D)
By power_of_a_point_in_circle on line_circle_tangent_point(j, Circle(C, D, E)), Circle(C, D, E) we get 0 == power_of_a_point(line_circle_tangent_point(j, Circle(C, D, E)), Circle(C, D, E))
By sas_similarity on F, A, E, H, D, E we get similar_triangles(A, E, F, D, E, H)
By sss_anti_congruence_v0 on A, E, F, F, E, A we get anti_congruent_triangles(A, E, F, F, E, A)
By sss_anti_congruence_v0 on F, E, C, C, E, F we get anti_congruent_triangles(C, E, F, F, E, C)
By sss_anti_congruence_v0 on A, E, F, F, E, A we get anti_congruent_triangles(A, E, F, F, E, A)
By aa_similarity on F, E, A, H, E, D we get similar_triangles(A, E, F, D, E, H)
By sss_anti_congruence_v0 on F, A, E, A, F, E we get anti_congruent_triangles(A, E, F, F, E, A)
By sss_anti_congruence_v1 on E, F, C, E, C, F we get anti_congruent_triangles(C, E, F, F, E, C)
By sas_similarity on E, B, H, E, C, F we get similar_triangles(B, E, H, C, E, F)
By sas_anti_similarity on F, C, E, B, H, E we get anti_similar_triangles(B, E, H, F, E, C)
By sas_anti_similarity on E, H, D, E, A, F we get anti_similar_triangles(A, E, F, H, E, D)
By sss_anti_congruence_v1 on C, E, F, F, E, C we get anti_congruent_triangles(C, E, F, F, E, C)
By sss_anti_congruence_v1 on E, A, F, E, F, A we get anti_congruent_triangles(A, E, F, F, E, A)
By sss_anti_congruence_v0 on C, F, E, F, C, E we get anti_congruent_triangles(C, E, F, F, E, C)
By aa_similarity on H, E, B, F, E, C we get similar_triangles(B, E, H, C, E, F)
By sss_anti_congruence_v0 on C, F, E, F, C, E we get anti_congruent_triangles(C, E, F, F, E, C)
By sss_anti_congruence_v1 on F, E, A, A, E, F we get anti_congruent_triangles(A, E, F, F, E, A)
By sss_anti_congruence_v0 on F, A, E, A, F, E we get anti_congruent_triangles(A, E, F, F, E, A)
By sss_anti_congruence_v0 on A, E, F, F, E, A we get anti_congruent_triangles(A, E, F, F, E, A)
By sas_anti_similarity on E, C, F, E, H, B we get anti_similar_triangles(B, E, H, F, E, C)
By sss_anti_congruence_v0 on F, E, C, C, E, F we get anti_congruent_triangles(C, E, F, F, E, C)
By sss_anti_congruence_v0 on A, E, F, F, E, A we get anti_congruent_triangles(A, E, F, F, E, A)
By sss_anti_congruence_v1 on C, E, F, F, E, C we get anti_congruent_triangles(C, E, F, F, E, C)
By aa_anti_similarity on F, E, A, D, E, H we get anti_similar_triangles(A, E, F, H, E, D)
By sss_anti_congruence_v0 on E, F, A, E, A, F we get anti_congruent_triangles(A, E, F, F, E, A)
By sss_anti_congruence_v0 on E, F, A, E, A, F we get anti_congruent_triangles(A, E, F, F, E, A)
By sss_anti_congruence_v1 on E, A, F, E, F, A we get anti_congruent_triangles(A, E, F, F, E, A)
By sss_anti_congruence_v1 on A, F, E, F, A, E we get anti_congruent_triangles(A, E, F, F, E, A)
By sas_anti_congruence on A, E, F, F, E, A we get anti_congruent_triangles(A, E, F, F, E, A)
By sss_anti_congruence_v1 on A, F, E, F, A, E we get anti_congruent_triangles(A, E, F, F, E, A)
By sss_anti_congruence_v1 on A, F, E, F, A, E we get anti_congruent_triangles(A, E, F, F, E, A)
By sss_anti_congruence_v1 on E, F, C, E, C, F we get anti_congruent_triangles(C, E, F, F, E, C)
By sss_anti_congruence_v1 on F, C, E, C, F, E we get anti_congruent_triangles(C, E, F, F, E, C)
By sss_anti_congruence_v0 on F, E, C, C, E, F we get anti_congruent_triangles(C, E, F, F, E, C)
By sss_anti_congruence_v0 on E, F, A, E, A, F we get anti_congruent_triangles(A, E, F, F, E, A)
By sss_anti_congruence_v1 on C, E, F, F, E, C we get anti_congruent_triangles(C, E, F, F, E, C)
By sss_anti_congruence_v0 on F, A, E, A, F, E we get anti_congruent_triangles(A, E, F, F, E, A)
By sss_anti_congruence_v0 on F, E, C, C, E, F we get anti_congruent_triangles(C, E, F, F, E, C)
By aa_similarity on H, D, E, F, A, E we get similar_triangles(A, E, F, D, E, H)
By sss_anti_congruence_v0 on F, E, C, C, E, F we get anti_congruent_triangles(C, E, F, F, E, C)
By sss_anti_congruence_v0 on E, F, A, E, A, F we get anti_congruent_triangles(A, E, F, F, E, A)
By sas_similarity on E, C, F, E, B, H we get similar_triangles(B, E, H, C, E, F)
By sss_anti_congruence_v1 on F, C, E, C, F, E we get anti_congruent_triangles(C, E, F, F, E, C)
By sss_anti_congruence_v0 on E, C, F, E, F, C we get anti_congruent_triangles(C, E, F, F, E, C)
By sss_anti_congruence_v1 on E, A, F, E, F, A we get anti_congruent_triangles(A, E, F, F, E, A)
By isosceles_triangle_properties on E, A, F we get distance(A, E) == distance(E, F), angle(A, F, E) == angle(E, A, F) mod 360
By sss_anti_congruence_v1 on F, E, A, A, E, F we get anti_congruent_triangles(A, E, F, F, E, A)
By sas_similarity on E, A, F, E, D, H we get similar_triangles(A, E, F, D, E, H)
By sss_anti_congruence_v0 on C, F, E, F, C, E we get anti_congruent_triangles(C, E, F, F, E, C)
By sas_anti_similarity on E, A, F, E, H, D we get anti_similar_triangles(A, E, F, H, E, D)
By sss_anti_congruence_v0 on A, E, F, F, E, A we get anti_congruent_triangles(A, E, F, F, E, A)
By sss_anti_congruence_v0 on E, F, A, E, A, F we get anti_congruent_triangles(A, E, F, F, E, A)
By aa_similarity on H, E, D, F, E, A we get similar_triangles(A, E, F, D, E, H)
By sss_anti_congruence_v0 on E, C, F, E, F, C we get anti_congruent_triangles(C, E, F, F, E, C)
By sas_anti_congruence on F, E, C, C, E, F we get anti_congruent_triangles(C, E, F, F, E, C)
By sss_anti_congruence_v0 on A, E, F, F, E, A we get anti_congruent_triangles(A, E, F, F, E, A)
By aa_similarity on F, C, E, H, B, E we get similar_triangles(B, E, H, C, E, F)
By sas_anti_congruence on C, E, F, F, E, C we get anti_congruent_triangles(C, E, F, F, E, C)
By sas_anti_similarity on F, A, E, D, H, E we get anti_similar_triangles(A, E, F, H, E, D)
By sss_anti_congruence_v0 on C, F, E, F, C, E we get anti_congruent_triangles(C, E, F, F, E, C)
By sss_anti_congruence_v1 on F, C, E, C, F, E we get anti_congruent_triangles(C, E, F, F, E, C)
By isosceles_triangle_properties on E, F, C we get distance(C, E) == distance(E, F), angle(E, F, C) == angle(F, C, E) mod 360
By isosceles_triangle_properties on E, F, A we get distance(A, E) == distance(E, F), angle(E, F, A) == angle(F, A, E) mod 360
By sss_anti_congruence_v1 on F, C, E, C, F, E we get anti_congruent_triangles(C, E, F, F, E, C)
By aa_similarity on F, A, E, H, D, E we get similar_triangles(A, E, F, D, E, H)
By sss_anti_congruence_v0 on C, F, E, F, C, E we get anti_congruent_triangles(C, E, F, F, E, C)
By sss_anti_congruence_v1 on E, F, C, E, C, F we get anti_congruent_triangles(C, E, F, F, E, C)
By sss_anti_congruence_v0 on F, A, E, A, F, E we get anti_congruent_triangles(A, E, F, F, E, A)
By sas_anti_similarity on B, H, E, F, C, E we get anti_similar_triangles(B, E, H, F, E, C)
By sss_anti_congruence_v1 on C, E, F, F, E, C we get anti_congruent_triangles(C, E, F, F, E, C)
By sss_anti_congruence_v1 on F, E, A, A, E, F we get anti_congruent_triangles(A, E, F, F, E, A)
By sss_anti_congruence_v0 on C, F, E, F, C, E we get anti_congruent_triangles(C, E, F, F, E, C)
By sss_anti_congruence_v1 on A, F, E, F, A, E we get anti_congruent_triangles(A, E, F, F, E, A)
By sas_similarity on E, D, H, E, A, F we get similar_triangles(A, E, F, D, E, H)
By sas_similarity on H, B, E, F, C, E we get similar_triangles(B, E, H, C, E, F)
By sss_anti_congruence_v1 on F, E, A, A, E, F we get anti_congruent_triangles(A, E, F, F, E, A)
By sss_anti_congruence_v1 on C, E, F, F, E, C we get anti_congruent_triangles(C, E, F, F, E, C)
By aa_anti_similarity on F, A, E, D, H, E we get anti_similar_triangles(A, E, F, H, E, D)
By sas_anti_congruence on F, E, A, A, E, F we get anti_congruent_triangles(A, E, F, F, E, A)
By sss_anti_congruence_v0 on E, C, F, E, F, C we get anti_congruent_triangles(C, E, F, F, E, C)
By sas_similarity on H, D, E, F, A, E we get similar_triangles(A, E, F, D, E, H)
By sss_anti_congruence_v1 on E, F, C, E, C, F we get anti_congruent_triangles(C, E, F, F, E, C)
By sss_anti_congruence_v1 on F, C, E, C, F, E we get anti_congruent_triangles(C, E, F, F, E, C)
By sss_anti_congruence_v0 on E, F, A, E, A, F we get anti_congruent_triangles(A, E, F, F, E, A)
By aa_anti_similarity on B, E, H, F, E, C we get anti_similar_triangles(B, E, H, F, E, C)
By aa_anti_similarity on F, C, E, B, H, E we get anti_similar_triangles(B, E, H, F, E, C)
By sss_anti_congruence_v0 on E, C, F, E, F, C we get anti_congruent_triangles(C, E, F, F, E, C)
By reverse_direction on E, F we get 180 == direction(E, F) - direction(F, E) mod 360
By isosceles_triangle_properties on E, C, F we get distance(C, E) == distance(E, F), angle(C, F, E) == angle(E, C, F) mod 360
By sss_anti_congruence_v0 on F, A, E, A, F, E we get anti_congruent_triangles(A, E, F, F, E, A)
By sss_anti_congruence_v0 on F, E, C, C, E, F we get anti_congruent_triangles(C, E, F, F, E, C)
By sss_anti_congruence_v1 on A, F, E, F, A, E we get anti_congruent_triangles(A, E, F, F, E, A)
By power_of_a_point_definition on B, A, F, Circle(A, C, F) we get log(distance(A, B)) + log(distance(B, F)) == log(power_of_a_point(B, Circle(A, C, F)))
By power_of_a_point_definition on G, F, A, Circle(A, C, F) we get log(distance(F, G)) + log(distance(A, G)) == log(power_of_a_point(G, Circle(A, C, F)))
By power_of_a_point_definition on E, A, C, Circle(A, C, F) we get log(distance(A, E)) + log(distance(C, E)) == log(power_of_a_point(E, Circle(A, C, F)))
By power_of_a_point_definition on A, E, C, Circle(C, D, E) we get log(distance(A, E)) + log(distance(A, C)) == log(power_of_a_point(A, Circle(C, D, E)))
By power_of_a_point_definition on B, E, D, Circle(C, D, E) we get log(distance(B, E)) + log(distance(B, D)) == log(power_of_a_point(B, Circle(C, D, E)))
By concyclic_sufficient_conditions_v1 on E, H, G, F we get concyclic(E, F, G, H)
By line_definition on line_intersection(h, altitude(H, A, B)), H, altitude(H, A, B) we get altitude(H, A, B) == Line(H, line_intersection(h, altitude(H, A, B)))
By line_definition on line_intersection(i, altitude(F, A, D)), F, altitude(F, A, D) we get altitude(F, A, D) == Line(F, line_intersection(i, altitude(F, A, D)))
By line_intersection_definition on E, Line(E, F), Line(E, G) we get E == line_intersection(Line(E, F), Line(E, G))
By line_intersection_definition on E, Line(B, D), Line(E, F) we get E == line_intersection(Line(B, D), Line(E, F))
By line_intersection_definition on E, Line(E, F), Line(A, C) we get E == line_intersection(Line(A, C), Line(E, F))
By line_intersection_definition on E, Line(E, H), Line(E, F) we get E == line_intersection(Line(E, F), Line(E, H))
By line_intersection_definition on F, Line(C, F), Line(E, F) we get F == line_intersection(Line(C, F), Line(E, F))
By line_intersection_definition on F, f, Line(E, F) we get F == line_intersection(f, Line(E, F))
By line_intersection_definition on F, Line(D, F), Line(E, F) we get F == line_intersection(Line(D, F), Line(E, F))
By collinear_and_not_between_implies_orientation on line_intersection(h, altitude(H, A, B)), G, A, F we get orientation(A, F, line_intersection(h, altitude(H, A, B))) == orientation(A, G, line_intersection(h, altitude(H, A, B))) mod 360
By between_implies_orientation on line_intersection(i, altitude(F, A, D)), B, F, G we get orientation(B, F, line_intersection(i, altitude(F, A, D))) == orientation(F, G, line_intersection(i, altitude(F, A, D))) mod 360, orientation(B, F, line_intersection(i, altitude(F, A, D))) == orientation(B, G, line_intersection(i, altitude(F, A, D))) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(h, altitude(H, A, B)), A, B, F we get orientation(A, line_intersection(h, altitude(H, A, B)), B) == orientation(B, F, line_intersection(h, altitude(H, A, B))) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(h, altitude(H, A, B)), B, G, F we get orientation(B, line_intersection(h, altitude(H, A, B)), G) == orientation(F, line_intersection(h, altitude(H, A, B)), G) mod 360
By between_implies_orientation on line_intersection(h, altitude(H, A, B)), B, F, G we get orientation(B, F, line_intersection(h, altitude(H, A, B))) == orientation(F, G, line_intersection(h, altitude(H, A, B))) mod 360, orientation(B, F, line_intersection(h, altitude(H, A, B))) == orientation(B, G, line_intersection(h, altitude(H, A, B))) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(h, altitude(H, A, B)), A, F, B we get orientation(A, line_intersection(h, altitude(H, A, B)), F) == orientation(B, line_intersection(h, altitude(H, A, B)), F) mod 360
By between_implies_orientation on line_intersection(i, altitude(F, A, D)), G, F, B we get orientation(B, line_intersection(i, altitude(F, A, D)), F) == orientation(F, line_intersection(i, altitude(F, A, D)), G) mod 360, orientation(B, line_intersection(i, altitude(F, A, D)), G) == orientation(F, line_intersection(i, altitude(F, A, D)), G) mod 360
By between_implies_orientation on line_intersection(h, altitude(H, A, B)), B, A, F we get orientation(A, F, line_intersection(h, altitude(H, A, B))) == orientation(A, line_intersection(h, altitude(H, A, B)), B) mod 360, orientation(A, line_intersection(h, altitude(H, A, B)), B) == orientation(B, F, line_intersection(h, altitude(H, A, B))) mod 360
By projection_definition on C, line_intersection(Line(D, F), altitude(C, D, F)), Line(D, F) we get projection(C, Line(D, F)) == line_intersection(Line(D, F), altitude(C, D, F))
By between_implies_orientation on line_intersection(h, altitude(H, A, B)), F, A, B we get orientation(A, B, line_intersection(h, altitude(H, A, B))) == orientation(A, line_intersection(h, altitude(H, A, B)), F) mod 360, orientation(A, line_intersection(h, altitude(H, A, B)), F) == orientation(B, line_intersection(h, altitude(H, A, B)), F) mod 360
By projection_definition on F, line_intersection(Line(A, C), altitude(F, A, C)), Line(A, C) we get projection(F, Line(A, C)) == line_intersection(Line(A, C), altitude(F, A, C))
By collinear_and_not_between_implies_orientation on line_intersection(h, altitude(H, A, B)), B, G, A we get orientation(A, line_intersection(h, altitude(H, A, B)), G) == orientation(B, line_intersection(h, altitude(H, A, B)), G) mod 360
By projection_definition on H, line_intersection(f, altitude(H, A, B)), f we get projection(H, f) == line_intersection(f, altitude(H, A, B))
By between_implies_orientation on line_intersection(h, altitude(H, A, B)), B, A, G we get orientation(A, G, line_intersection(h, altitude(H, A, B))) == orientation(A, line_intersection(h, altitude(H, A, B)), B) mod 360, orientation(A, line_intersection(h, altitude(H, A, B)), B) == orientation(B, G, line_intersection(h, altitude(H, A, B))) mod 360
By between_implies_orientation on line_intersection(h, altitude(H, A, B)), G, F, B we get orientation(B, line_intersection(h, altitude(H, A, B)), F) == orientation(F, line_intersection(h, altitude(H, A, B)), G) mod 360, orientation(B, line_intersection(h, altitude(H, A, B)), G) == orientation(F, line_intersection(h, altitude(H, A, B)), G) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(h, altitude(H, A, B)), F, G, A we get orientation(A, line_intersection(h, altitude(H, A, B)), G) == orientation(F, line_intersection(h, altitude(H, A, B)), G) mod 360
By between_implies_orientation on line_intersection(h, altitude(H, A, B)), G, A, B we get orientation(A, B, line_intersection(h, altitude(H, A, B))) == orientation(A, line_intersection(h, altitude(H, A, B)), G) mod 360, orientation(A, line_intersection(h, altitude(H, A, B)), G) == orientation(B, line_intersection(h, altitude(H, A, B)), G) mod 360
By between_implies_orientation on line_intersection(h, altitude(H, A, B)), A, F, G we get orientation(A, F, line_intersection(h, altitude(H, A, B))) == orientation(F, G, line_intersection(h, altitude(H, A, B))) mod 360, orientation(A, F, line_intersection(h, altitude(H, A, B))) == orientation(A, G, line_intersection(h, altitude(H, A, B))) mod 360
By projection_definition on H, line_intersection(Line(B, D), altitude(H, B, D)), Line(B, D) we get projection(H, Line(B, D)) == line_intersection(Line(B, D), altitude(H, B, D))
By projection_definition on F, line_intersection(Line(C, G), altitude(F, C, G)), Line(C, G) we get projection(F, Line(C, G)) == line_intersection(Line(C, G), altitude(F, C, G))
By projection_definition on F, line_intersection(g, altitude(F, A, D)), g we get projection(F, g) == line_intersection(g, altitude(F, A, D))
By between_implies_orientation on line_intersection(h, altitude(H, A, B)), G, F, A we get orientation(A, line_intersection(h, altitude(H, A, B)), F) == orientation(F, line_intersection(h, altitude(H, A, B)), G) mod 360, orientation(A, line_intersection(h, altitude(H, A, B)), G) == orientation(F, line_intersection(h, altitude(H, A, B)), G) mod 360
By different_points_v1 on line_intersection(Line(B, D), altitude(H, B, D)), H we get 0 != distance(H, line_intersection(Line(B, D), altitude(H, B, D)))
By different_points_v1 on F, line_intersection(Line(A, C), altitude(F, A, C)) we get 0 != distance(F, line_intersection(Line(A, C), altitude(F, A, C)))
By different_points_v1 on H, line_intersection(f, altitude(H, A, B)) we get 0 != distance(H, line_intersection(f, altitude(H, A, B)))
By perpendicular_direction_conditions_v0_r on C, A, line_intersection(Line(A, C), altitude(F, A, C)), F we get 180 == 2 * direction(C, A) - 2 * direction(line_intersection(Line(A, C), altitude(F, A, C)), F) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(C, G), altitude(F, C, G)), G, C we get 180 == 2 * direction(F, line_intersection(Line(C, G), altitude(F, C, G))) - 2 * direction(G, C) mod 360
By different_points_v1 on line_intersection(Line(C, G), altitude(F, C, G)), F we get 0 != distance(F, line_intersection(Line(C, G), altitude(F, C, G)))
By different_points_v1 on line_intersection(g, altitude(F, A, D)), F we get 0 != distance(F, line_intersection(g, altitude(F, A, D)))
By perpendicular_direction_conditions_v0_r on F, G, H, line_intersection(f, altitude(H, A, B)) we get 180 == 2 * direction(F, G) - 2 * direction(H, line_intersection(f, altitude(H, A, B))) mod 360
By different_points_v1 on line_intersection(Line(D, F), altitude(C, D, F)), C we get 0 != distance(C, line_intersection(Line(D, F), altitude(C, D, F)))
By perpendicular_direction_conditions_v0_r on D, A, line_intersection(g, altitude(F, A, D)), F we get 180 == 2 * direction(D, A) - 2 * direction(line_intersection(g, altitude(F, A, D)), F) mod 360
By perpendicular_direction_conditions_v0_r on C, G, F, line_intersection(Line(C, G), altitude(F, C, G)) we get 180 == 2 * direction(C, G) - 2 * direction(F, line_intersection(Line(C, G), altitude(F, C, G))) mod 360
By perpendicular_direction_conditions_v0_r on C, E, line_intersection(Line(A, C), altitude(F, A, C)), F we get 180 == 2 * direction(C, E) - 2 * direction(line_intersection(Line(A, C), altitude(F, A, C)), F) mod 360
By perpendicular_direction_conditions_v0_r on H, line_intersection(f, altitude(H, A, B)), A, F we get 180 == 2 * direction(H, line_intersection(f, altitude(H, A, B))) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on H, line_intersection(f, altitude(H, A, B)), B, F we get 180 == 2 * direction(H, line_intersection(f, altitude(H, A, B))) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on A, D, line_intersection(g, altitude(F, A, D)), F we get 180 == 2 * direction(A, D) - 2 * direction(line_intersection(g, altitude(F, A, D)), F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, C), altitude(F, A, C)), F, E, C we get 180 == 2 * direction(line_intersection(Line(A, C), altitude(F, A, C)), F) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on D, C, H, line_intersection(f, altitude(H, A, B)) we get 180 == 2 * direction(D, C) - 2 * direction(H, line_intersection(f, altitude(H, A, B))) mod 360
By perpendicular_direction_conditions_v0_r on A, G, H, line_intersection(f, altitude(H, A, B)) we get 180 == 2 * direction(A, G) - 2 * direction(H, line_intersection(f, altitude(H, A, B))) mod 360
By perpendicular_direction_conditions_v0_r on H, line_intersection(f, altitude(H, A, B)), F, A we get 180 == 2 * direction(H, line_intersection(f, altitude(H, A, B))) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(A, C), altitude(F, A, C)), E, A we get 180 == 2 * direction(F, line_intersection(Line(A, C), altitude(F, A, C))) - 2 * direction(E, A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(B, D), altitude(H, B, D)), H, B, D we get 180 == 2 * direction(line_intersection(Line(B, D), altitude(H, B, D)), H) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on C, B, F, line_intersection(g, altitude(F, A, D)) we get 180 == 2 * direction(C, B) - 2 * direction(F, line_intersection(g, altitude(F, A, D))) mod 360
By perpendicular_direction_conditions_v0_r on H, line_intersection(Line(B, D), altitude(H, B, D)), E, B we get 180 == 2 * direction(H, line_intersection(Line(B, D), altitude(H, B, D))) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on H, line_intersection(f, altitude(H, A, B)), A, B we get 180 == 2 * direction(H, line_intersection(f, altitude(H, A, B))) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, C), altitude(F, A, C)), F, C, E we get 180 == 2 * direction(line_intersection(Line(A, C), altitude(F, A, C)), F) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(A, C), altitude(F, A, C)), A, E we get 180 == 2 * direction(F, line_intersection(Line(A, C), altitude(F, A, C))) - 2 * direction(A, E) mod 360
By perpendicular_direction_conditions_v0_r on B, C, line_intersection(g, altitude(F, A, D)), F we get 180 == 2 * direction(B, C) - 2 * direction(line_intersection(g, altitude(F, A, D)), F) mod 360
By perpendicular_direction_conditions_v0_r on G, F, H, line_intersection(f, altitude(H, A, B)) we get 180 == 2 * direction(G, F) - 2 * direction(H, line_intersection(f, altitude(H, A, B))) mod 360
By perpendicular_direction_conditions_v0_r on B, F, H, line_intersection(f, altitude(H, A, B)) we get 180 == 2 * direction(B, F) - 2 * direction(H, line_intersection(f, altitude(H, A, B))) mod 360
By perpendicular_direction_conditions_v0_r on B, G, line_intersection(f, altitude(H, A, B)), H we get 180 == 2 * direction(B, G) - 2 * direction(line_intersection(f, altitude(H, A, B)), H) mod 360
By perpendicular_direction_conditions_v0_r on G, F, line_intersection(f, altitude(H, A, B)), H we get 180 == 2 * direction(G, F) - 2 * direction(line_intersection(f, altitude(H, A, B)), H) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, altitude(H, A, B)), H, G, A we get 180 == 2 * direction(line_intersection(f, altitude(H, A, B)), H) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(D, F), altitude(C, D, F)), C, D, F we get 180 == 2 * direction(line_intersection(Line(D, F), altitude(C, D, F)), C) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on A, C, line_intersection(Line(A, C), altitude(F, A, C)), F we get 180 == 2 * direction(A, C) - 2 * direction(line_intersection(Line(A, C), altitude(F, A, C)), F) mod 360
By perpendicular_direction_conditions_v0_r on E, A, F, line_intersection(Line(A, C), altitude(F, A, C)) we get 180 == 2 * direction(E, A) - 2 * direction(F, line_intersection(Line(A, C), altitude(F, A, C))) mod 360
By perpendicular_direction_conditions_v0_r on A, C, F, line_intersection(Line(A, C), altitude(F, A, C)) we get 180 == 2 * direction(A, C) - 2 * direction(F, line_intersection(Line(A, C), altitude(F, A, C))) mod 360
By perpendicular_direction_conditions_v0_r on F, B, line_intersection(f, altitude(H, A, B)), H we get 180 == 2 * direction(F, B) - 2 * direction(line_intersection(f, altitude(H, A, B)), H) mod 360
By perpendicular_direction_conditions_v0_r on F, A, line_intersection(f, altitude(H, A, B)), H we get 180 == 2 * direction(F, A) - 2 * direction(line_intersection(f, altitude(H, A, B)), H) mod 360
By perpendicular_direction_conditions_v0_r on H, line_intersection(f, altitude(H, A, B)), G, A we get 180 == 2 * direction(H, line_intersection(f, altitude(H, A, B))) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on H, line_intersection(f, altitude(H, A, B)), B, G we get 180 == 2 * direction(H, line_intersection(f, altitude(H, A, B))) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, altitude(H, A, B)), H, C, D we get 180 == 2 * direction(line_intersection(f, altitude(H, A, B)), H) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(g, altitude(F, A, D)), F, A, D we get 180 == 2 * direction(line_intersection(g, altitude(F, A, D)), F) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on G, A, line_intersection(f, altitude(H, A, B)), H we get 180 == 2 * direction(G, A) - 2 * direction(line_intersection(f, altitude(H, A, B)), H) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(Line(D, F), altitude(C, D, F)), D, F we get 180 == 2 * direction(C, line_intersection(Line(D, F), altitude(C, D, F))) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on B, G, H, line_intersection(f, altitude(H, A, B)) we get 180 == 2 * direction(B, G) - 2 * direction(H, line_intersection(f, altitude(H, A, B))) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(A, C), altitude(F, A, C)), E, C we get 180 == 2 * direction(F, line_intersection(Line(A, C), altitude(F, A, C))) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(A, C), altitude(F, A, C)), C, E we get 180 == 2 * direction(F, line_intersection(Line(A, C), altitude(F, A, C))) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, C), altitude(F, A, C)), F, A, E we get 180 == 2 * direction(line_intersection(Line(A, C), altitude(F, A, C)), F) - 2 * direction(A, E) mod 360
By perpendicular_direction_conditions_v0_r on F, A, H, line_intersection(f, altitude(H, A, B)) we get 180 == 2 * direction(F, A) - 2 * direction(H, line_intersection(f, altitude(H, A, B))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(C, G), altitude(F, C, G)), F, C, G we get 180 == 2 * direction(line_intersection(Line(C, G), altitude(F, C, G)), F) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on A, D, F, line_intersection(g, altitude(F, A, D)) we get 180 == 2 * direction(A, D) - 2 * direction(F, line_intersection(g, altitude(F, A, D))) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(C, G), altitude(F, C, G)), C, G we get 180 == 2 * direction(F, line_intersection(Line(C, G), altitude(F, C, G))) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on D, E, line_intersection(Line(B, D), altitude(H, B, D)), H we get 180 == 2 * direction(D, E) - 2 * direction(line_intersection(Line(B, D), altitude(H, B, D)), H) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, altitude(H, A, B)), H, F, G we get 180 == 2 * direction(line_intersection(f, altitude(H, A, B)), H) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on G, C, line_intersection(Line(C, G), altitude(F, C, G)), F we get 180 == 2 * direction(G, C) - 2 * direction(line_intersection(Line(C, G), altitude(F, C, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(A, C), altitude(F, A, C)), A, C we get 180 == 2 * direction(F, line_intersection(Line(A, C), altitude(F, A, C))) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on C, E, F, line_intersection(Line(A, C), altitude(F, A, C)) we get 180 == 2 * direction(C, E) - 2 * direction(F, line_intersection(Line(A, C), altitude(F, A, C))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(D, F), altitude(C, D, F)), C, F, D we get 180 == 2 * direction(line_intersection(Line(D, F), altitude(C, D, F)), C) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on A, B, H, line_intersection(f, altitude(H, A, B)) we get 180 == 2 * direction(A, B) - 2 * direction(H, line_intersection(f, altitude(H, A, B))) mod 360
By perpendicular_direction_conditions_v0_r on B, D, H, line_intersection(Line(B, D), altitude(H, B, D)) we get 180 == 2 * direction(B, D) - 2 * direction(H, line_intersection(Line(B, D), altitude(H, B, D))) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(g, altitude(F, A, D)), D, A we get 180 == 2 * direction(F, line_intersection(g, altitude(F, A, D))) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(g, altitude(F, A, D)), F, B, C we get 180 == 2 * direction(line_intersection(g, altitude(F, A, D)), F) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on H, line_intersection(Line(B, D), altitude(H, B, D)), B, E we get 180 == 2 * direction(H, line_intersection(Line(B, D), altitude(H, B, D))) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(B, D), altitude(H, B, D)), H, E, D we get 180 == 2 * direction(line_intersection(Line(B, D), altitude(H, B, D)), H) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on H, line_intersection(f, altitude(H, A, B)), F, B we get 180 == 2 * direction(H, line_intersection(f, altitude(H, A, B))) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on E, C, F, line_intersection(Line(A, C), altitude(F, A, C)) we get 180 == 2 * direction(E, C) - 2 * direction(F, line_intersection(Line(A, C), altitude(F, A, C))) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(g, altitude(F, A, D)), C, B we get 180 == 2 * direction(F, line_intersection(g, altitude(F, A, D))) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on H, line_intersection(f, altitude(H, A, B)), A, G we get 180 == 2 * direction(H, line_intersection(f, altitude(H, A, B))) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on H, line_intersection(f, altitude(H, A, B)), B, A we get 180 == 2 * direction(H, line_intersection(f, altitude(H, A, B))) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on G, B, H, line_intersection(f, altitude(H, A, B)) we get 180 == 2 * direction(G, B) - 2 * direction(H, line_intersection(f, altitude(H, A, B))) mod 360
By perpendicular_direction_conditions_v0_r on C, D, H, line_intersection(f, altitude(H, A, B)) we get 180 == 2 * direction(C, D) - 2 * direction(H, line_intersection(f, altitude(H, A, B))) mod 360
By perpendicular_direction_conditions_v0_r on D, F, C, line_intersection(Line(D, F), altitude(C, D, F)) we get 180 == 2 * direction(D, F) - 2 * direction(C, line_intersection(Line(D, F), altitude(C, D, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, C), altitude(F, A, C)), F, E, A we get 180 == 2 * direction(line_intersection(Line(A, C), altitude(F, A, C)), F) - 2 * direction(E, A) mod 360
By perpendicular_direction_conditions_v0_r on B, E, line_intersection(Line(B, D), altitude(H, B, D)), H we get 180 == 2 * direction(B, E) - 2 * direction(line_intersection(Line(B, D), altitude(H, B, D)), H) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, altitude(H, A, B)), H, D, C we get 180 == 2 * direction(line_intersection(f, altitude(H, A, B)), H) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(g, altitude(F, A, D)), B, C we get 180 == 2 * direction(F, line_intersection(g, altitude(F, A, D))) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on E, B, line_intersection(Line(B, D), altitude(H, B, D)), H we get 180 == 2 * direction(E, B) - 2 * direction(line_intersection(Line(B, D), altitude(H, B, D)), H) mod 360
By perpendicular_direction_conditions_v0_r on G, A, H, line_intersection(f, altitude(H, A, B)) we get 180 == 2 * direction(G, A) - 2 * direction(H, line_intersection(f, altitude(H, A, B))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, altitude(H, A, B)), H, B, A we get 180 == 2 * direction(line_intersection(f, altitude(H, A, B)), H) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on A, B, line_intersection(f, altitude(H, A, B)), H we get 180 == 2 * direction(A, B) - 2 * direction(line_intersection(f, altitude(H, A, B)), H) mod 360
By perpendicular_direction_conditions_v0_r on C, B, line_intersection(g, altitude(F, A, D)), F we get 180 == 2 * direction(C, B) - 2 * direction(line_intersection(g, altitude(F, A, D)), F) mod 360
By perpendicular_direction_conditions_v0_r on F, D, line_intersection(Line(D, F), altitude(C, D, F)), C we get 180 == 2 * direction(F, D) - 2 * direction(line_intersection(Line(D, F), altitude(C, D, F)), C) mod 360
By perpendicular_direction_conditions_v0_r on H, line_intersection(Line(B, D), altitude(H, B, D)), E, D we get 180 == 2 * direction(H, line_intersection(Line(B, D), altitude(H, B, D))) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on D, B, H, line_intersection(Line(B, D), altitude(H, B, D)) we get 180 == 2 * direction(D, B) - 2 * direction(H, line_intersection(Line(B, D), altitude(H, B, D))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, altitude(H, A, B)), H, F, B we get 180 == 2 * direction(line_intersection(f, altitude(H, A, B)), H) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, C), altitude(F, A, C)), F, C, A we get 180 == 2 * direction(line_intersection(Line(A, C), altitude(F, A, C)), F) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, C), altitude(F, A, C)), F, A, C we get 180 == 2 * direction(line_intersection(Line(A, C), altitude(F, A, C)), F) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on B, A, H, line_intersection(f, altitude(H, A, B)) we get 180 == 2 * direction(B, A) - 2 * direction(H, line_intersection(f, altitude(H, A, B))) mod 360
By perpendicular_direction_conditions_v0_r on A, G, line_intersection(f, altitude(H, A, B)), H we get 180 == 2 * direction(A, G) - 2 * direction(line_intersection(f, altitude(H, A, B)), H) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, altitude(H, A, B)), H, A, G we get 180 == 2 * direction(line_intersection(f, altitude(H, A, B)), H) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on H, line_intersection(Line(B, D), altitude(H, B, D)), D, E we get 180 == 2 * direction(H, line_intersection(Line(B, D), altitude(H, B, D))) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on D, A, F, line_intersection(g, altitude(F, A, D)) we get 180 == 2 * direction(D, A) - 2 * direction(F, line_intersection(g, altitude(F, A, D))) mod 360
By perpendicular_direction_conditions_v0_r on H, line_intersection(f, altitude(H, A, B)), G, F we get 180 == 2 * direction(H, line_intersection(f, altitude(H, A, B))) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, altitude(H, A, B)), H, G, F we get 180 == 2 * direction(line_intersection(f, altitude(H, A, B)), H) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on H, line_intersection(Line(B, D), altitude(H, B, D)), D, B we get 180 == 2 * direction(H, line_intersection(Line(B, D), altitude(H, B, D))) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, altitude(H, A, B)), H, B, F we get 180 == 2 * direction(line_intersection(f, altitude(H, A, B)), H) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on G, C, F, line_intersection(Line(C, G), altitude(F, C, G)) we get 180 == 2 * direction(G, C) - 2 * direction(F, line_intersection(Line(C, G), altitude(F, C, G))) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(A, C), altitude(F, A, C)), C, A we get 180 == 2 * direction(F, line_intersection(Line(A, C), altitude(F, A, C))) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(g, altitude(F, A, D)), A, D we get 180 == 2 * direction(F, line_intersection(g, altitude(F, A, D))) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on G, B, line_intersection(f, altitude(H, A, B)), H we get 180 == 2 * direction(G, B) - 2 * direction(line_intersection(f, altitude(H, A, B)), H) mod 360
By perpendicular_direction_conditions_v0_r on C, A, F, line_intersection(Line(A, C), altitude(F, A, C)) we get 180 == 2 * direction(C, A) - 2 * direction(F, line_intersection(Line(A, C), altitude(F, A, C))) mod 360
By perpendicular_direction_conditions_v0_r on C, D, line_intersection(f, altitude(H, A, B)), H we get 180 == 2 * direction(C, D) - 2 * direction(line_intersection(f, altitude(H, A, B)), H) mod 360
By perpendicular_direction_conditions_v0_r on H, line_intersection(f, altitude(H, A, B)), D, C we get 180 == 2 * direction(H, line_intersection(f, altitude(H, A, B))) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(C, G), altitude(F, C, G)), F, G, C we get 180 == 2 * direction(line_intersection(Line(C, G), altitude(F, C, G)), F) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, altitude(H, A, B)), H, G, B we get 180 == 2 * direction(line_intersection(f, altitude(H, A, B)), H) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on B, A, line_intersection(f, altitude(H, A, B)), H we get 180 == 2 * direction(B, A) - 2 * direction(line_intersection(f, altitude(H, A, B)), H) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, altitude(H, A, B)), H, A, B we get 180 == 2 * direction(line_intersection(f, altitude(H, A, B)), H) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on H, line_intersection(f, altitude(H, A, B)), F, G we get 180 == 2 * direction(H, line_intersection(f, altitude(H, A, B))) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on B, F, line_intersection(f, altitude(H, A, B)), H we get 180 == 2 * direction(B, F) - 2 * direction(line_intersection(f, altitude(H, A, B)), H) mod 360
By perpendicular_direction_conditions_v0_r on A, F, line_intersection(f, altitude(H, A, B)), H we get 180 == 2 * direction(A, F) - 2 * direction(line_intersection(f, altitude(H, A, B)), H) mod 360
By perpendicular_direction_conditions_v0_r on H, line_intersection(f, altitude(H, A, B)), C, D we get 180 == 2 * direction(H, line_intersection(f, altitude(H, A, B))) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on E, B, H, line_intersection(Line(B, D), altitude(H, B, D)) we get 180 == 2 * direction(E, B) - 2 * direction(H, line_intersection(Line(B, D), altitude(H, B, D))) mod 360
By perpendicular_direction_conditions_v0_r on A, E, line_intersection(Line(A, C), altitude(F, A, C)), F we get 180 == 2 * direction(A, E) - 2 * direction(line_intersection(Line(A, C), altitude(F, A, C)), F) mod 360
By perpendicular_direction_conditions_v0_r on B, E, H, line_intersection(Line(B, D), altitude(H, B, D)) we get 180 == 2 * direction(B, E) - 2 * direction(H, line_intersection(Line(B, D), altitude(H, B, D))) mod 360
By perpendicular_direction_conditions_v0_r on A, F, H, line_intersection(f, altitude(H, A, B)) we get 180 == 2 * direction(A, F) - 2 * direction(H, line_intersection(f, altitude(H, A, B))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(g, altitude(F, A, D)), F, D, A we get 180 == 2 * direction(line_intersection(g, altitude(F, A, D)), F) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on D, E, H, line_intersection(Line(B, D), altitude(H, B, D)) we get 180 == 2 * direction(D, E) - 2 * direction(H, line_intersection(Line(B, D), altitude(H, B, D))) mod 360
By perpendicular_direction_conditions_v0_r on E, D, H, line_intersection(Line(B, D), altitude(H, B, D)) we get 180 == 2 * direction(E, D) - 2 * direction(H, line_intersection(Line(B, D), altitude(H, B, D))) mod 360
By perpendicular_direction_conditions_v0_r on B, C, F, line_intersection(g, altitude(F, A, D)) we get 180 == 2 * direction(B, C) - 2 * direction(F, line_intersection(g, altitude(F, A, D))) mod 360
By perpendicular_direction_conditions_v0_r on E, C, line_intersection(Line(A, C), altitude(F, A, C)), F we get 180 == 2 * direction(E, C) - 2 * direction(line_intersection(Line(A, C), altitude(F, A, C)), F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(B, D), altitude(H, B, D)), H, B, E we get 180 == 2 * direction(line_intersection(Line(B, D), altitude(H, B, D)), H) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on E, A, line_intersection(Line(A, C), altitude(F, A, C)), F we get 180 == 2 * direction(E, A) - 2 * direction(line_intersection(Line(A, C), altitude(F, A, C)), F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, altitude(H, A, B)), H, B, G we get 180 == 2 * direction(line_intersection(f, altitude(H, A, B)), H) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on F, B, H, line_intersection(f, altitude(H, A, B)) we get 180 == 2 * direction(F, B) - 2 * direction(H, line_intersection(f, altitude(H, A, B))) mod 360
By perpendicular_direction_conditions_v0_r on A, E, F, line_intersection(Line(A, C), altitude(F, A, C)) we get 180 == 2 * direction(A, E) - 2 * direction(F, line_intersection(Line(A, C), altitude(F, A, C))) mod 360
By perpendicular_direction_conditions_v0_r on B, D, line_intersection(Line(B, D), altitude(H, B, D)), H we get 180 == 2 * direction(B, D) - 2 * direction(line_intersection(Line(B, D), altitude(H, B, D)), H) mod 360
By perpendicular_direction_conditions_v0_r on D, F, line_intersection(Line(D, F), altitude(C, D, F)), C we get 180 == 2 * direction(D, F) - 2 * direction(line_intersection(Line(D, F), altitude(C, D, F)), C) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(Line(D, F), altitude(C, D, F)), F, D we get 180 == 2 * direction(C, line_intersection(Line(D, F), altitude(C, D, F))) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on F, G, line_intersection(f, altitude(H, A, B)), H we get 180 == 2 * direction(F, G) - 2 * direction(line_intersection(f, altitude(H, A, B)), H) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(g, altitude(F, A, D)), F, C, B we get 180 == 2 * direction(line_intersection(g, altitude(F, A, D)), F) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on H, line_intersection(Line(B, D), altitude(H, B, D)), B, D we get 180 == 2 * direction(H, line_intersection(Line(B, D), altitude(H, B, D))) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on D, B, line_intersection(Line(B, D), altitude(H, B, D)), H we get 180 == 2 * direction(D, B) - 2 * direction(line_intersection(Line(B, D), altitude(H, B, D)), H) mod 360
By perpendicular_direction_conditions_v0_r on E, D, line_intersection(Line(B, D), altitude(H, B, D)), H we get 180 == 2 * direction(E, D) - 2 * direction(line_intersection(Line(B, D), altitude(H, B, D)), H) mod 360
By perpendicular_direction_conditions_v0_r on C, G, line_intersection(Line(C, G), altitude(F, C, G)), F we get 180 == 2 * direction(C, G) - 2 * direction(line_intersection(Line(C, G), altitude(F, C, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, altitude(H, A, B)), H, F, A we get 180 == 2 * direction(line_intersection(f, altitude(H, A, B)), H) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(B, D), altitude(H, B, D)), H, D, E we get 180 == 2 * direction(line_intersection(Line(B, D), altitude(H, B, D)), H) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on D, C, line_intersection(f, altitude(H, A, B)), H we get 180 == 2 * direction(D, C) - 2 * direction(line_intersection(f, altitude(H, A, B)), H) mod 360
By perpendicular_direction_conditions_v0_r on H, line_intersection(f, altitude(H, A, B)), G, B we get 180 == 2 * direction(H, line_intersection(f, altitude(H, A, B))) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(B, D), altitude(H, B, D)), H, E, B we get 180 == 2 * direction(line_intersection(Line(B, D), altitude(H, B, D)), H) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, altitude(H, A, B)), H, A, F we get 180 == 2 * direction(line_intersection(f, altitude(H, A, B)), H) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on F, D, C, line_intersection(Line(D, F), altitude(C, D, F)) we get 180 == 2 * direction(F, D) - 2 * direction(C, line_intersection(Line(D, F), altitude(C, D, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(B, D), altitude(H, B, D)), H, D, B we get 180 == 2 * direction(line_intersection(Line(B, D), altitude(H, B, D)), H) - 2 * direction(D, B) mod 360
By in_imply_collinear on line_intersection(i, altitude(F, A, D)), line_intersection(g, altitude(F, A, D)), F we get collinear(F, line_intersection(g, altitude(F, A, D)), line_intersection(i, altitude(F, A, D)))
By in_imply_collinear on line_intersection(h, altitude(H, A, B)), H, line_intersection(f, altitude(H, A, B)) we get collinear(H, line_intersection(f, altitude(H, A, B)), line_intersection(h, altitude(H, A, B)))
By line_inequality on altitude(H, A, B), Line(E, F), H we get Line(E, F) != altitude(H, A, B)
By line_inequality on altitude(H, B, D), Line(E, F), H we get Line(E, F) != altitude(H, B, D)
By line_inequality on altitude(C, D, F), Line(E, F), C we get Line(E, F) != altitude(C, D, F)
