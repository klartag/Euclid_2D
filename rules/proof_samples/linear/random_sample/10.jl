Assumptions:
A, B, C, D, E, F, G, H: Point
f, g, h, i, j: Line
c, d: Circle
distinct(A, B, C, D, E, F, G, H)
distinct(f, g, h, i, j)
distinct(c, d)
f == Line(A, B)
g == Line(B, C)
h == parallel_line(C, f)
i == parallel_line(A, g)
D == line_intersection(h, i)
E == midpoint(A, C)
c == Circle(A, C, D)
F == projection(A, g)
j == Line(A, F)
G in j, c
d == Circle(C, E, F)
H in c, d

Embedding:
C := {"x": "0.337969981607924463418157756677828729152679443359375", "y": "0.7345873095129189511709455473464913666248321533203125"}
B := {"x": "-0.26069566691216206066883387393318116664886474609375", "y": "1.5669127973145207111116405940265394747257232666015625"}
g := {"point": {"x": "-0.26069566691216206066883387393318116664886474609375", "y": "1.5669127973145207111116405940265394747257232666015625"}, "direction": {"x": "0.598665648520086524086991630611009895801544189453125", "y": "-0.83232548780160175994069504668004810810089111328125"}}
A := {"x": "1.4132255927253269955912173827528022229671478271484375", "y": "0.60732950398583296358623329069814644753932952880859375"}
F := {"x": "0.76490798040291310619944750276037852366233004111935765641821501944405103642394659988052527137529514411647656545397883696794399323336659886330883372212640447565944403893901607539248244740315661979856112835398849797114199253252523257383483561174377054228677329879031754468520733894416652116605830514768669736739885341117766600772427514488883910296115839993313644352910653498748236662494952051100927426445698945661061150731869557343806110404101459528208678019490561075165478173534486650719620264769490758487005406970100954242761164283187706804639826788403652031505625658338114834643387254758786679268047503908760959991200478416361221607017763290021029546742695227686860948383275396575480694190742031129954493196984593132238466850447053038974333579256462084925251292959675651494724142271354872135600718068888568261341802932908223300264989745450293153687454390369003056748540007933337873001820070625626391365325707833111883047468316283639166586510775740900832142494265629948606522077335918147525310408066897706508641843284840608333144473125760493848315340332138459642188330455812533149472237089646277361497836246792723743202579162257474838143421593786687510705217117133803835360898279941362621691311462786143245304890773991870610422720158110772554985614049423100267364915599711348225014718123288260188901326438990841590052949792075339318879498347142944240630947413232998015885606995737466226782956038066717374073245050114718520478149129308490881829316820328825074040722107783839456308415560641844936087975786944763385056939897159030704812535856647754802263874267168529495992700277636593483731165506549070435066365443373283351974636204423187268759840904850974976630499077056735939806862907815299910137044328521202162579873868290591366265392585635537760987744957773394748866656176320324306511026461292324109343072473317050773523608480568124312290449203688787401172969109395725146577733138428038940127292430020805200752184370281944236567255159797482278123799704122613928275786348737077596535712670263258284596", "y": "0.14101495575165953743521755673810509357132040960464503624635006242670725154591532361682022798829484379185011869517400153678661012805964380497599426607719215263395386119826312240830030749027174985000736235204963024969174684021363742916120940900590146001880626019834660105910953296418764144338339510076343267605522211891403365409779684881631368180902263755330811474393052188347494965230989152324222638860296745745424314405647652261555492607706052631412480291868677376068899062417112276808834756067505725350846872580181449483325444494936093171129668894365995149364036148290340045654774424327876314795725395357459684312313138271626761656018170269611731417404792202703641039781155051321926030174284644342004002018881788439492163729261080959165702930088332522905609367144355017945272906311545370653865295999040213956273857834538143908333944801545936744041291190277116732520024022674947025810651445520186334898563181856921448496565040710189170905853563781848628969576283124158762373305717575952701466959001741787804725723486932934871286823907686975757510751203547397389313963048975250195215082466080669764376683435013970621343504560972929330288885173279194630337698897914053492700531954748858123843159312786841318709038759566047301396242529551663568876415901903536620211688239496843581070359419170591169339094411180285142020301956176695987879361268087216073330529888321282280396666883371531300856122085917885385568112046642820746877818251792657620434911017101471414008868456065210831723037048650761731555121483683051233880475341072968489954645217145601913611540934752029686044363377032514099253171153969346294073755862000955903558992289957606720709516961063379765816838477594650203275467073028246378930506018423241023914902019692724973549761747403885021455905825024593873185824795061170115697031525252440809274811229723719211347659413387654827903837498803361762799246759846787032525681555625846445395298818976589340117271057437855429608487734697862290757253326528326784524698429338894088082296997438083199081"}
E := {"x": "0.87559778716662572950468756971531547605991363525390625", "y": "0.670958406749375957378589419022318907082080841064453125"}
d := {"center": {"x": "0.5776559100250577149228481140281432929054921497501394148431136931005045072518566575792526003106011097891931286412317765725107397588650891104223678998257944264722947692959787458358420197980275078558642073289175940716124689704261183126048985031622733294101252830602648715671727905569488786747065901092762910506872267540427326989426071023132932189751063346669125197038147649702777860458027838708938043575096988568152992440505574167655662679546497596674748601351423039273379531971150414874324991153337602810105554105581735375994984120409106154115960057741387734924048601805819924806565767910748512342502119547047199216260307065189253568277320749852304489180325141637473663994682635720414311337247597935636574135064724173251856654186756340680151776677770109590210052368095097884474748947716355873546684937632955626688600233580474260337119290783114883498816219700367258509993934748844400846833148097788045575894137357951484040514768299865898229273665407104808550526005108062651640482146543561602884556598130736697546017803248531536357285863603724961546558268589955525895577357363789724777124670965523231767630329194984292599892106575946938595648841487611462752469743490880837714171265524168399592662979561137322238115647874547867976065523219466735610335193197631273581108745956315667136223791954757846237763751497808977886726870881450825085578400977193393412632913855862112391450743910162186699589343495855746894809396463922406826197965680281054045481988460784332445699721056535734201442283277795908598035573069210326533493256396870857407220964323520397047088739612847193609456674907703063306738691763773005838930946248216029306790138636337590653848295501068745607598054414193363985195822891476835380474551085204353758743295686902756693197838996247036638444590647324479803781548433315976170126556438111633862282464827599952798363633426232482576487869773250250805804206414769215377700001661023856228223794962940580791535044728891221636667603294152968058730682664697670215554217209642966588630506126741068595", "y": "0.45665814835963702323099007682982641910009518162345607872423963300774988363478334354371164946666425055740505141190201462719559151651764635656591151856709132230002432591604184174168462025425809897928382207177814796233714271261854911272947391439360163803097458037144470422586859127063417773410673992652802357827633601906484218263763548142706030868541463875176543508702613591971750756418641245637316332231503269652411122766924069977764812277650363430645254248991670915199459812809268825526024466673827703279263399395818894629479282559315557816775458473816233600336613817759261309337396449698045703620565881362205024659573877571258119827333353246606017471583717428081100498729274524081208927609922443538552612290828814483696090550275032296578294958525735061331968567082954408635831034224504100090074163606638830059722417885626139757181010044766361106225260349531056398838067371426610960109331914493041483291120357107777660911704907449001986950954357945997968482547837268304336259665781058412179357717203506198852765815232179942893263006805196480798562813560455943081156600225024144982708470049467525650440480477027269598156100109135340384069167433640113613383646501965687634461632190904845723178386187549704620641265701616836761329439349212547470872408226039444087720101476226986709264033524754212026431166617412838402930164963219570874637122687917815456305358373927663116248800299754083483182914383909933533160258583441858411463445482903738906933313211823410447244081008613374613379104811036659577231638385442700053147442265402788054501011802133264554687959249562427327532279598275635332043470964064115148282363640766928731375313429972762216775500491461639709713157796494666413638039044769717219496363819957857144849796010925600370414811822727713601358281387234604253064036283218570466786148554195273826634533447933334473060888652089748054245438577558724357215191871892138029936632133100710910253985422643437065703695069248631493531450353751209420717633465837378048716499898352615664835513738962388572489"}, "radius_squared": "0.13469396290055008142824227284830234716531223945989927845017443879764119601103042971369281859779070328184692273228823911471259660429770411710568805559211637106196394733951703567089597134531185848700503825280917459911080244955622610008289735197591691308012018447929547731952211172791411473611456421547781444311537773672559025691153986626171110020442484697564586260205920504404461655942166223911534735826071773040981332610781815611365952923338740511172565403770974713510318376768050280107788260713473700883256631434225617772606914162901230319617815199664262042881280999838125951088891535735144586991348742511267766149689709222060972392236677664799200124836310005209953014603193850972271848452706577302263738690775244272577689748845604787981061811700585034287807944329149619220452023456253826220809346591021811661449844447425943864588346824626631422242294990745476155013530277261038615555933628863642542712260574495029023028267982923495243300510332403567085291688915984728665861244917933380538233238270848966558520177462524546671350212224432417119721766184594157605707085225962728553099454486837876921040092527632666691225783892603500265994415151117628435884123515205613604931147148677999348172438463645178765144677279074951025216869652819665055347161500514135552724774540459525964229500863623897983248479581245865912633210245857767703350022131692509333482169545177580028681829736434557484772302012251977286835702526937092192035493152370618144515097257100433648360135255183711970081339006966955412019913032234471679407175437293106656022830464503544547447166154713581952407903555862684658658069942766027442436945104114898647647226027480302996081662596341476024506071336377127307678387378798273744517096040884059805354475226873890914713327141785942946468467663802462256623185992659957142840040925812725968878051669092014783173184839355738651163791073494368793424154740988502216064078055827025172995080575932586790482707142111752744942007582495293581099347336816323347721487401474028555946234043646377876221"}
i := {"point": {"x": "1.4132255927253269955912173827528022229671478271484375", "y": "0.60732950398583296358623329069814644753932952880859375"}, "direction": {"x": "0.598665648520086524086991630611009895801544189453125", "y": "-0.83232548780160175994069504668004810810089111328125"}}
f := {"point": {"x": "1.4132255927253269955912173827528022229671478271484375", "y": "0.60732950398583296358623329069814644753932952880859375"}, "direction": {"x": "-1.6739212596374890562600512566859833896160125732421875", "y": "0.95958329332868774752540730332839302718639373779296875"}}
h := {"point": {"x": "0.337969981607924463418157756677828729152679443359375", "y": "0.7345873095129189511709455473464913666248321533203125"}, "direction": {"x": "-1.6739212596374890562600512566859833896160125732421875", "y": "0.95958329332868774752540730332839302718639373779296875"}}
D := {"x": "2.0118912412454135196782090133638121187686920166015625", "y": "-0.22499598381576879635446175598190166056156158447265625"}
c := {"center": {"x": "0.73565354781989460793417642606352185621532820836346161189175683937577720506383567279342692358381523719088771314097298060208904146423136633350025699968171939948091463262057027490439830756332323436228426445867048187792484571653340207485497569150922308856937101337839387704885252111310755097885217386766501528278469854222481869726113121072379670605715588983996216969566253533334298048106186345512601313787439338260406004759696585884738563255177976171572042583131163775139545728883820677474270923454234203906922715950365587189462716417027661695233669851845144468958561177280878553989737992915647474510078845326178375021224347400767705435965341423377546468436643155423849173465338227328413754311144717461977807405708753555388687660001631277519905475032733600353428102879944037234993100192163181833488654391582580240375604394418127425892381243508230002863485641316974979872678952334702899060724840665677067891776255077170928544961771421895735760900232458417367811396556549797648819484548737088357223881949901252826050000940524308608984807718755664069951852577584705759982728037821909766696891047844951520704419552467398277347278565537667618239156360307225021835363450308794831561493202344636353831382192037642254469272905335147179299581234768129005736512274328208016767405245154279205471928793683807894246094660159276022219106959177734111656051706433296930436017642304731983873084398081243056294245704871668234804824544612755373387744509959285345792275120716566947693870867188662185619428431387995095157807893375786161085795294452615977377269178533120217316037268980811801558865810941222402801773005707743147123997444286954469321491003131826448065589997287419889190379116859375781560160922347801072900433141639255830340059074428089892987042702922195596934622744393861854169997716220305679299694852257095410087118220959339197210867230814011540849854249638402579305664791822434185851530416049843145356619393861945328378737010005541103252245357278475804848597622964039822580805771795832103455148065351700095274", "y": "-0.5114903081084457094358385236847526560906599539550550225004962169646608584280194467814274966984066325419491021396660074386626285132780304364097022282811744196391362241985855270197669061583638884727553091942787079311393023563097523899638620466654294479400552722805973429460367588543510608719888192184569011770215539012719090289213817402780399078396435789689344186283952600554132013055739332748360112466767768236605263319913592651166369533531716939151183211136172813770236752313948809536048520378999485028786658731834353029674588542034043152736802682813421719950703937264119983223029364946351377865775879343090318754786396538051243542140227394503258408601461881341611442830327612692783877499297408083095602672393274911746426856613829870729970800494792075354467243785440669768471624366532487993783454685192415512935110098516285067488797092123444845286200150842837672488788430131404114629358632096252295756990587974621238104029505471673551119780023294976755246380669486215273224323953640777903189435504754516668691713978772422390938484138218010264128169946294215344036174670035894688840728030102699203417234327651625782218165108828463403141948801750999410902413717692885105787027137599838781387536203965537850690864761185525266247092945194850899623246703799075248786262967455955596448011482896917054439319688281277461880169025474461808062653993309543533112699040120393568256425725578587856002787067128344084377192697560939947766862764763794610792962397473214022542107683548884263268720275050742732039661445931828848164040245785971233667772268751297204702987696952800040416336343426008108859486871549762586422954430695590841667173334201793579160895779985465515671169991449509609833550576100614771744066666336943710145428569783349696265300270510438869601448339202393860520820767938134777191911696464583249021910242330267537523835912115248036322828425907883516394975229400850550965029635810885645555926565426028004831950532433903567734254627137344962056801432069245173317873904525597066633707561859106884508"}, "radius_squared": "1.7108616479720063224981872192732233089722583670583180195553421990152859845683593498858863197537819167957765422845906592302123374933287589074043342202185196079031835718846906455659879174578949609505067259283429677502636985545290869512994062240172189211973149653085593409839443609780625937003242308274705585162720401523411631328785988363662334753012275346469652536737851907142817140060871913206351609584526283976234288680008112842110537034730221792729780364213962595569454490240491923712425124246229424681105944003562722474916007056939082828695780577398604146427620657970456860650157924249894385920063294207447938816877273229594245075379889380463202925131691783312573239201372908409644702069713564350739280667199799425335134326135763789940600917609939562327046214842705379195684875465743133269494586684428117382514820054928145782649836846079780826386560922517788693686377342074614104619250484133806661226220340479473989189380270296432382660181025958215914926121000064251927979287616815387998197824046766757480385083881646521796111841197613934439848293295165425917571727462029380454393525198002630604111171911671278658329732173946131656603102021312352823760161980071262866717033992363795015058301974015540117191573974611578790559963086167561387273004780704944762610610996912102018428638673733354197976966129764434885727705810144547809619347958670863583713820174609890343855231294468897690424118288092918188114579412512593875629343679017010266649473452717290957510384871296946603835643100239852795256316942358392824441520973391744731296518611650015498139112585187559411292730538506144898996721187963750027530905720338537435247296630669758192366397134426162432270918113645864039864097801871257291577075323699997961301782228133008907460407684056272965789073893341513118372256564870211071561233090187101316856976457244098339308322135514261502016241303837171982223508751889522257604023936001028420996915391808857573092845030853186305706075386098500435908853351682382325552599692770181201406897407433147858662"}
j := {"point": {"x": "1.4132255927253269955912173827528022229671478271484375", "y": "0.60732950398583296358623329069814644753932952880859375"}, "direction": {"x": "-0.64831761232241388939176987999242369930481778602907984358178498055594896357605340011947472862470485588352343454602116303205600676663340113669116627787359552434055596106098392460751755259684338020143887164601150202885800746747476742616516438825622945771322670120968245531479266105583347883394169485231330263260114658882233399227572485511116089703884160006686355647089346501251763337505047948899072573554301054338938849268130442656193889595898540471791321980509438924834521826465513349280379735230509241512994593029899045757238835716812293195360173211596347968494374341661885165356612745241213320731952496091239040008799521583638778392982236709978970453257304772313139051616724603424519305809257968870045506803015406867761533149552946961025666420743537915074748707040324348505275857728645127864399281931111431738658197067091776699735010254549706846312545609630996943251459992066662126998179929374373608634674292166888116952531683716360833413489224259099167857505734370051393477922664081852474689591933102293491358156715159391666855526874239506151684659667861540357811669544187466850527762910353722638502163753207276256797420837742525161856578406213312489294782882866196164639101720058637378308688537213856754695109226008129389577279841889227445014385950576899732635084400288651774985281876711739811098673561009158409947050207924660681120501652857055759369052586767001984114393004262533773217043961933282625926754949885281479521850870691509118170683179671174925959277892216160543691584439358155063912024213055236614943060102840969295187464143352245197736125732831470504007299722363406516268834493450929564933634556626716648025363795576812731240159095149025023369500922943264060193137092184700089862955671478797837420126131709408633734607414364462239012255042226605251133343823679675693488973538707675890656927526682949226476391519431875687709550796311212598827030890604274853422266861571961059872707569979194799247815629718055763432744840202517721876200295877386071724213651262922403464287329736741715404", "y": "-0.46631454823417342615101573396004135396800911920394871375364993757329274845408467638317977201170515620814988130482599846321338987194035619502400573392280784736604613880173687759169969250972825014999263764795036975030825315978636257083879059099409853998119373980165339894089046703581235855661660489923656732394477788108596634590220315118368631819097736244669188525606947811652505034769010847675777361139703254254575685594352347738444507392293947368587519708131322623931100937582887723191165243932494274649153127419818550516674555505063906828870331105634004850635963851709659954345225575672123685204274604642540315687686861728373238343981829730388268582595207797296358960218844948678073969825715355657995997981118211560507836270738919040834297069911667477094390632855644982054727093688454629346134704000959786043726142165461856091666055198454063255958708809722883267479975977325052974189348554479813665101436818143078551503434959289810829094146436218151371030423716875841237626694282424047298533040998258212195274276513067065128713176092313024242489248796452602610686036951024749804784917533919330235623316564986029378656495439027070669711114826720805369662301102085946507299468045251141876156840687213158681290961240433952698603757470448336431123584098096463379788311760503156418929640580829408830660905588819714857979698043823304012120638731912783926669470111678717719603333116628468699143877914082114614431887953357179253122181748207342379565088982898528585991131543934789168276962951349238268444878516316948766119524658927031510045354782854398086388459065247970313955636622967485900746828846030653705926244137999044096441007710042393279290483038936620234183161522405349796724532926971753621069493981576758976085097980307275026450238252596114978544094174975406126814175204938829884302968474747559190725188770276280788652340586612345172096162501196638237200753240153212967474318444374153554604701181023410659882728942562144570391512265302137709242746673471673215475301570661105911917703002561916800919"}}
H := {"x": "0.71654562631676278789524402389812651492383215217878348302869370623951392169427433193466062016263451475458601224385819754878291868779423402479710146923247823800598579922696426610682984665476787288497897180033776981099377804778014371169222731868550658632443278703644617850745492817530723968805129851241825376446200021161130251759705077471599261727324660698647914484274741403708651618930098432556946104770654148605287976271809951883987332738992127317511871832502496271817516957757241702936497682263609544842637298388449652103897910741812718820106763746138254214596334392645798589429691278685202500445907316195001946250134606422653966098040221733904404669311523271709887560834857294054933786711982389094097345753523112906568229286986619958039579064199597743637438754984728893577024957108769436817756837787228408707722040351479188925277805367745653278458462723818783399660486943397260726414189736298666533246984329494958643122862474049142516965532199243601601935100084442916810888484000164661115117686092402509911464230852019772412547000325582507362110767479163447882258717084053336675698048070802194186020741457594484218495940661763831258084174013512547891889910780833783579525224503772488790278651909433708571591652522009869557561634664330800892049216833039931904322010988330892231505313418385471576616448651491059362299386197034274446855529029172531795900379722422776192839980053538124922839789891393475134891386829712544057664563432177249728309580023307664494226045677809209234724875389282565212100216146223895343436093807909302753132655520898616938803282126953373062252057485226393627859728115699080486236751379541634748125418529595883247310544486187508412359430500083008341968388550589994071762864262061598117796542343032494019898849779729069421831091147151660845221165468280132154084485742126676581956895679204474708595765445995685906673429756931365657377153056090658160110875125955675067232087976126362043851573369215126635947210601148512598643873716996757669195679018289070308926174171737971017226", "y": "0.79636921619370061611019653901007344424539924676257658300460943648507923535584014739177033013394466554638426482873540005257519376464329758763524931992645147386119857214993774249501247484830757172487999322804956229722317637309272578670752787393960882246530170159415614512136626761194028187583236872669327314735134136486683458824561813034807914085846612174974560127926188336034656905274903784254314217901699337820355738481040666259973739933624503158572049784733784211466087592072447974840999122389018985278369254660086671074833370979312520224472072952526215924418795431449522675290340240619611135797694704035432328228864866722553316709090901871263288681330204640013913520667584794132699345049932013714427732672950151383084417291593636264177213834578901211602231573347714129092325826179237504547782612520996868206201146405237320656473108744403236057872465715530691180975402628284019035773335973083240600406880620595040840212285433256329232347508590199643977672735295387461708705874296083636399208900840443780899686051379019380346574787215201243412305272659331729827769890426170183595040550745015603679250878744634534353857235095578689304103271579009397877498336740987316374070665055017071629834706060108693979648503134423734869716410278231012283132963118957035595979249477144098873894977180415978505302261809786113495627291568065766909241286320645358811524675031071178806494328047046001708492735527682183153786645936647738222092221521525733646022959329610530016415398458816995371979517625562569960179774393628597728645525323731567627869240822494647624202625582800021541087178790738736997475847796250750405614888063188375280789897498340397704078848949490369798833399721337887512986628683343187085349099050155645518352640440085827423369909218106056297753221587062069257504849622030306720792412165144561326687798967226877052692653142087018444973360513468214915254530308743915234960359533632765531493009126042665029977291755487824893151422180390496747790209438960824698562674979636975693029676384337235061912"}
G := {"x": "-0.5405841456056243038098561612367684063380355998746392762164863212484455898723286544131461528323695256182245737180540387958219170715372673329994860006365612010381707347588594501912033848733535312754314710826590362441503085669331958502900486169815538228612579732432122459022949577737848980422956522646699694344306029155503626054777375785524065878856882203200756606086749293333140390378762730897479737242512132347918799048060682823052287348964404765685591483373767244972090854223235864505145815309153159218615456809926882562107456716594467660953266029630971106208287764543824289202052401416870505097984230934764324995755130519846458912806931715324490706312671368915230165306932354534317249137771056507604438518858249288922262467999673744496018904993453279929314379424011192553001379961567363633302269121683483951924879121116374514821523751298353999427302871736605004025464209533059420187855031866864586421644748984565814291007645715620852847819953508316526437720688690040470236103090252582328555223610019749434789999811895138278203038456248867186009629484483058848003454392435618046660621790431009695859116089506520344530544286892466476352168727938554995632927309938241033687701359531072729233723561592471549106145418932970564140083753046374198852697545134358396646518950969144158905614241263238421150781067968144795556178608164453177668789658713340613912796471539053603225383120383751388741150859025666353039035091077448925322451098008142930841544975856686610461225826562267562876114313722400980968438421324842767782840941109476804524546164293375956536792546203837639688226837811755519439645398858451370575200511142609106135701799373634710386882000542516022161924176628124843687967815530439785419913371672148833931988185114382021402591459415560880613075451121227629166000456755938864140061029548580917982576355808132160557826553837197691830029150072319484138867041635513162829693916790031370928676121227610934324252597998891779349550928544304839030280475407192035483838845640833579308970386929659980946", "y": "-0.7979846324011226225172152913876036516197583234374537950009924339293217168560388935628549933968132650838982042793320148773252570265560608728194044565623488392782724483971710540395338123167277769455106183885574158622786047126195047799277240933308588958801105445611946858920735177087021217439776384369138023540431078025438180578427634805560798156792871579378688372567905201108264026111478665496720224933535536473210526639827185302332739067063433878302366422272345627540473504627897619072097040757998970057573317463668706059349177084068086305473605365626843439901407874528239966446058729892702755731551758686180637509572793076102487084280454789006516817202923762683222885660655225385567754998594816166191205344786549823492853713227659741459941600989584150708934487570881339536943248733064975987566909370384831025870220197032570134977594184246889690572400301685675344977576860262808229258717264192504591513981175949242476208059010943347102239560046589953510492761338972430546448647907281555806378871009509033337383427957544844781876968276436020528256339892588430688072349340071789377681456060205398406834468655303251564436330217656926806283897603501998821804827435385770211574054275199677562775072407931075701381729522371050532494185890389701799246493407598150497572525934911911192896022965793834108878639376562554923760338050948923616125307986619087066225398080240787136512851451157175712005574134256688168754385395121879895533725529527589221585924794946428045084215367097768526537440550101485464079322891863657696328080491571942467335544537502594409405975393905600080832672686852016217718973743099525172845908861391181683334346668403587158321791559970931031342339982899019219667101152201229543488133332673887420290857139566699392530600541020877739202896678404787721041641535876269554383823392929166498043820484660535075047671824230496072645656851815767032789950458801701101930059271621771291111853130852056009663901064867807135468509254274689924113602864138490346635747809051194133267415123718213769016"}

Need to prove:
concyclic(B, F, G, H)

Proof:
By line_definition on C, F, g we get g == Line(C, F)
By line_definition on A, F, perpendicular_line(A, g) we get Line(A, F) == perpendicular_line(A, g)
By line_definition on A, D, i we get i == Line(A, D)
By line_definition on G, F, j we get j == Line(F, G)
By line_definition on A, G, j we get j == Line(A, G)
By line_definition on F, B, g we get g == Line(B, F)
By line_definition on D, C, h we get h == Line(C, D)
By circle_definition on H, G, A, c we get c == Circle(A, G, H)
By line_intersection_definition on C, g, h we get C == line_intersection(g, h)
By line_intersection_definition on A, j, i we get A == line_intersection(i, j)
By line_intersection_definition on A, j, f we get A == line_intersection(f, j)
By circle_definition on D, G, C, c we get c == Circle(C, D, G)
By circle_definition on C, E, H, d we get d == Circle(C, E, H)
By line_intersection_definition on B, g, f we get B == line_intersection(f, g)
By circle_definition on H, G, D, c we get c == Circle(D, G, H)
By circle_definition on H, E, F, d we get d == Circle(E, F, H)
By circle_definition on A, D, H, c we get c == Circle(A, D, H)
By line_intersection_definition on A, perpendicular_line(A, g), i we get A == line_intersection(i, perpendicular_line(A, g))
By line_intersection_definition on A, perpendicular_line(A, g), f we get A == line_intersection(f, perpendicular_line(A, g))
By circle_definition on C, F, H, d we get d == Circle(C, F, H)
By circle_definition on G, H, C, c we get c == Circle(C, G, H)
By perpendicular_line_definition on B, g, perpendicular_line(A, g) we get g == perpendicular_line(B, perpendicular_line(A, g))
By perpendicular_line_definition on F, g, perpendicular_line(A, g) we get g == perpendicular_line(F, perpendicular_line(A, g))
By line_intersection_definition on A, f, i we get A == line_intersection(f, i)
By line_intersection_definition on F, j, g we get F == line_intersection(g, j)
By circle_definition on C, D, H, c we get c == Circle(C, D, H)
By circle_definition on C, A, G, c we get c == Circle(A, C, G)
By circle_definition on A, C, H, c we get c == Circle(A, C, H)
By circle_definition on G, D, A, c we get c == Circle(A, D, G)
By perpendicular_line_definition on C, g, perpendicular_line(A, g) we get g == perpendicular_line(C, perpendicular_line(A, g))
By perpendicular_line_definition on F, perpendicular_line(A, g), g we get perpendicular_line(A, g) == perpendicular_line(F, g)
By line_uniqueness on A, F, perpendicular_line(A, g), j we get j == perpendicular_line(A, g)
By between_imply_not_between on A, E, C we get collinear_and_not_between(C, A, E)
By between_imply_not_between on C, E, A we get collinear_and_not_between(A, C, E)
By parallel_line_definition on D, h, f we get h == parallel_line(D, f)
By parallel_line_definition on A, f, h we get f == parallel_line(A, h)
By parallel_line_definition on B, f, h we get f == parallel_line(B, h)
By parallel_line_definition on D, i, g we get i == parallel_line(D, g)
By parallel_line_definition on B, g, i we get g == parallel_line(B, i)
By parallel_line_definition on C, g, i we get g == parallel_line(C, i)
By parallel_line_definition on F, g, i we get g == parallel_line(F, i)
By in_imply_collinear on F, C, B we get collinear(B, C, F)
By in_imply_concyclic on A, C, D, G we get concyclic(A, C, D, G)
By double_perpendicular_and_parallel_v0_r on g, perpendicular_line(A, g), i we get perpendicular(i, perpendicular_line(A, g))
By in_imply_concyclic on E, F, C, H we get concyclic(C, E, F, H)
By in_imply_collinear on G, A, F we get collinear(A, F, G)
By in_imply_concyclic on C, A, D, H we get concyclic(A, C, D, H)
By power_of_a_point_on_circle on D, c we get 0 == power_of_a_point(D, c)
By power_of_a_point_on_circle on H, c we get 0 == power_of_a_point(H, c)
By power_of_a_point_in_circle on H, d we get 0 == power_of_a_point(H, d)
By angles_on_chord_v1 on C, A, D, G, c we get angle(C, D, A) == angle(C, G, A) mod 360
By power_of_a_point_in_circle on A, c we get 0 == power_of_a_point(A, c)
By power_of_a_point_on_circle on C, d we get 0 == power_of_a_point(C, d)
By power_of_a_point_in_circle on F, d we get 0 == power_of_a_point(F, d)
By power_of_a_point_on_circle on G, c we get 0 == power_of_a_point(G, c)
By power_of_a_point_on_circle on E, d we get 0 == power_of_a_point(E, d)
By power_of_a_point_on_circle on C, c we get 0 == power_of_a_point(C, c)
By angles_on_chord_v0 on D, A, G, H, c we get angle(D, G, A) == angle(D, H, A) mod 360
By angles_on_chord_v2 on C, D, A, G, c we get angle(C, A, D) == angle(C, G, D) + 180 mod 360
By angles_on_chord_v0 on A, H, G, C, c we get angle(A, C, H) == angle(A, G, H) mod 360
By angles_on_chord_v1 on D, C, H, A, c we get angle(D, A, C) == angle(D, H, C) mod 360
By angles_on_chord_v1 on F, C, H, E, d we get angle(F, E, C) == angle(F, H, C) mod 360
By angles_on_chord_v0 on D, H, C, G, c we get angle(D, C, H) == angle(D, G, H) mod 360
By angles_on_chord_v3 on H, G, C, D, c we get angle(H, C, G) == angle(H, D, G) + 180 mod 360
By angles_on_chord_v2 on C, A, H, D, c we get angle(C, H, A) == angle(C, D, A) + 180 mod 360
By angles_on_chord_v2 on H, D, A, G, c we get angle(H, A, D) == angle(H, G, D) + 180 mod 360
By angles_on_chord_v2 on G, H, C, D, c we get angle(G, C, H) == angle(G, D, H) + 180 mod 360
By angles_on_chord_v1 on H, A, G, D, c we get angle(H, D, A) == angle(H, G, A) mod 360
By angles_on_chord_v3 on G, H, A, C, c we get angle(G, A, H) == angle(G, C, H) + 180 mod 360
By angles_on_chord_v0 on C, G, A, H, c we get angle(C, A, G) == angle(C, H, G) mod 360
By angles_on_chord_v2 on G, A, C, D, c we get angle(G, C, A) == angle(G, D, A) + 180 mod 360
By angles_on_chord_v0 on C, G, A, D, c we get angle(C, A, G) == angle(C, D, G) mod 360
By angles_on_chord_v1 on H, D, C, G, c we get angle(H, C, D) == angle(H, G, D) mod 360
By angles_on_chord_v3 on A, C, H, G, c we get angle(A, H, C) == angle(A, G, C) + 180 mod 360
By angles_on_chord_v1 on A, D, H, G, c we get angle(A, G, D) == angle(A, H, D) mod 360
By angles_on_chord_v0 on C, D, H, A, c we get angle(C, A, D) == angle(C, H, D) mod 360
By angles_on_chord_v0 on H, G, A, D, c we get angle(H, A, G) == angle(H, D, G) mod 360
By angles_on_chord_v1 on D, G, C, H, c we get angle(D, C, G) == angle(D, H, G) mod 360
By angles_on_chord_v1 on C, H, G, A, c we get angle(C, A, H) == angle(C, G, H) mod 360
By angles_on_chord_v1 on A, D, G, C, c we get angle(A, C, D) == angle(A, G, D) mod 360
By angles_on_chord_v1 on G, H, D, A, c we get angle(G, A, H) == angle(G, D, H) mod 360
By angles_on_chord_v0 on A, C, D, G, c we get angle(A, D, C) == angle(A, G, C) mod 360
By angles_on_chord_v3 on C, D, G, A, c we get angle(C, G, D) == angle(C, A, D) + 180 mod 360
By angles_on_chord_v1 on A, G, H, C, c we get angle(A, C, G) == angle(A, H, G) mod 360
By angles_on_chord_v3 on F, H, E, C, d we get angle(F, E, H) == angle(F, C, H) + 180 mod 360
By angles_on_chord_v0 on E, H, C, F, d we get angle(E, C, H) == angle(E, F, H) mod 360
By angles_on_chord_v2 on C, A, H, G, c we get angle(C, H, A) == angle(C, G, A) + 180 mod 360
By angles_on_chord_v1 on H, E, C, F, d we get angle(H, C, E) == angle(H, F, E) mod 360
By angles_on_chord_v3 on C, A, G, H, c we get angle(C, G, A) == angle(C, H, A) + 180 mod 360
By angles_on_chord_v2 on D, C, G, H, c we get angle(D, G, C) == angle(D, H, C) + 180 mod 360
By angles_on_chord_v0 on G, D, A, C, c we get angle(G, A, D) == angle(G, C, D) mod 360
By angles_on_chord_v0 on H, C, A, D, c we get angle(H, A, C) == angle(H, D, C) mod 360
By angles_on_chord_v1 on E, F, H, C, d we get angle(E, C, F) == angle(E, H, F) mod 360
By angles_on_chord_v0 on F, E, C, H, d we get angle(F, C, E) == angle(F, H, E) mod 360
By angles_on_chord_v1 on D, G, H, A, c we get angle(D, A, G) == angle(D, H, G) mod 360
By angles_on_chord_v3 on D, H, A, G, c we get angle(D, A, H) == angle(D, G, H) + 180 mod 360
By angles_on_chord_v1 on G, C, D, A, c we get angle(G, A, C) == angle(G, D, C) mod 360
By angles_on_chord_v1 on G, C, H, A, c we get angle(G, A, C) == angle(G, H, C) mod 360
By angles_on_chord_v2 on A, G, D, C, c we get angle(A, D, G) == angle(A, C, G) + 180 mod 360
By angles_on_chord_v2 on H, G, D, C, c we get angle(H, D, G) == angle(H, C, G) + 180 mod 360
By angles_on_chord_v3 on G, A, D, C, c we get angle(G, D, A) == angle(G, C, A) + 180 mod 360
By angles_on_chord_v3 on D, H, A, C, c we get angle(D, A, H) == angle(D, C, H) + 180 mod 360
By angles_on_chord_v3 on A, G, C, D, c we get angle(A, C, G) == angle(A, D, G) + 180 mod 360
By angles_on_chord_v3 on A, C, H, D, c we get angle(A, H, C) == angle(A, D, C) + 180 mod 360
By angles_on_chord_v2 on C, D, H, G, c we get angle(C, H, D) == angle(C, G, D) + 180 mod 360
By angles_on_chord_v3 on H, D, G, A, c we get angle(H, G, D) == angle(H, A, D) + 180 mod 360
By angles_on_chord_v3 on G, A, D, H, c we get angle(G, D, A) == angle(G, H, A) + 180 mod 360
By angles_on_chord_v0 on A, H, D, C, c we get angle(A, C, H) == angle(A, D, H) mod 360
By angles_on_chord_v2 on F, H, C, E, d we get angle(F, C, H) == angle(F, E, H) + 180 mod 360
By angles_on_chord_v2 on C, E, H, F, d we get angle(C, H, E) == angle(C, F, E) + 180 mod 360
By angles_on_chord_v2 on G, A, H, D, c we get angle(G, H, A) == angle(G, D, A) + 180 mod 360
By angles_on_chord_v0 on D, A, H, C, c we get angle(D, C, A) == angle(D, H, A) mod 360
By angles_on_chord_v0 on H, C, D, G, c we get angle(H, D, C) == angle(H, G, C) mod 360
By angles_on_chord_v1 on C, H, D, G, c we get angle(C, D, H) == angle(C, G, H) mod 360
By angles_on_chord_v0 on D, A, G, C, c we get angle(D, C, A) == angle(D, G, A) mod 360
By angles_on_chord_v1 on A, D, H, C, c we get angle(A, C, D) == angle(A, H, D) mod 360
By angles_on_chord_v0 on G, D, H, C, c we get angle(G, C, D) == angle(G, H, D) mod 360
By angles_on_chord_v1 on H, A, C, D, c we get angle(H, C, A) == angle(H, D, A) mod 360
By angles_on_chord_v2 on D, H, C, A, c we get angle(D, C, H) == angle(D, A, H) + 180 mod 360
By angles_on_chord_v3 on H, F, C, E, d we get angle(H, C, F) == angle(H, E, F) + 180 mod 360
By angles_on_chord_v2 on D, H, G, A, c we get angle(D, G, H) == angle(D, A, H) + 180 mod 360
By angles_on_chord_v0 on C, F, E, H, d we get angle(C, E, F) == angle(C, H, F) mod 360
By angles_on_chord_v2 on G, H, C, A, c we get angle(G, C, H) == angle(G, A, H) + 180 mod 360
By angles_on_chord_v2 on H, F, E, C, d we get angle(H, E, F) == angle(H, C, F) + 180 mod 360
By angles_on_chord_v0 on C, G, D, H, c we get angle(C, D, G) == angle(C, H, G) mod 360
By angles_on_chord_v2 on H, G, A, C, c we get angle(H, A, G) == angle(H, C, G) + 180 mod 360
By angles_on_chord_v2 on H, D, A, C, c we get angle(H, A, D) == angle(H, C, D) + 180 mod 360
By angles_on_chord_v1 on D, G, A, C, c we get angle(D, A, G) == angle(D, C, G) mod 360
By angles_on_chord_v1 on C, H, E, F, d we get angle(C, E, H) == angle(C, F, H) mod 360
By angles_on_chord_v0 on A, H, G, D, c we get angle(A, D, H) == angle(A, G, H) mod 360
By angles_on_chord_v1 on G, C, D, H, c we get angle(G, D, C) == angle(G, H, C) mod 360
By angles_on_chord_v3 on H, D, C, A, c we get angle(H, C, D) == angle(H, A, D) + 180 mod 360
By angles_on_chord_v1 on C, H, D, A, c we get angle(C, A, H) == angle(C, D, H) mod 360
By angles_on_chord_v3 on C, D, G, H, c we get angle(C, G, D) == angle(C, H, D) + 180 mod 360
By angles_on_chord_v0 on G, D, A, H, c we get angle(G, A, D) == angle(G, H, D) mod 360
By angles_on_chord_v0 on G, A, H, C, c we get angle(G, C, A) == angle(G, H, A) mod 360
By angles_on_chord_v3 on D, C, H, G, c we get angle(D, H, C) == angle(D, G, C) + 180 mod 360
By angles_on_chord_v2 on A, C, G, H, c we get angle(A, G, C) == angle(A, H, C) + 180 mod 360
By angles_on_chord_v1 on H, A, C, G, c we get angle(H, C, A) == angle(H, G, A) mod 360
By angles_on_chord_v3 on E, C, H, F, d we get angle(E, H, C) == angle(E, F, C) + 180 mod 360
By angles_on_chord_v3 on G, H, D, C, c we get angle(G, D, H) == angle(G, C, H) + 180 mod 360
By angles_on_chord_v3 on C, E, F, H, d we get angle(C, F, E) == angle(C, H, E) + 180 mod 360
By angles_on_chord_v3 on A, G, H, D, c we get angle(A, H, G) == angle(A, D, G) + 180 mod 360
By angles_on_chord_v3 on C, A, D, H, c we get angle(C, D, A) == angle(C, H, A) + 180 mod 360
By angles_on_chord_v2 on A, C, D, H, c we get angle(A, D, C) == angle(A, H, C) + 180 mod 360
By angles_on_chord_v0 on H, C, E, F, d we get angle(H, E, C) == angle(H, F, C) mod 360
By angles_on_chord_v0 on H, C, A, G, c we get angle(H, A, C) == angle(H, G, C) mod 360
By angles_on_chord_v3 on H, G, C, A, c we get angle(H, C, G) == angle(H, A, G) + 180 mod 360
By angles_on_chord_v2 on D, C, G, A, c we get angle(D, G, C) == angle(D, A, C) + 180 mod 360
By angles_on_chord_v3 on D, C, A, G, c we get angle(D, A, C) == angle(D, G, C) + 180 mod 360
By angles_on_chord_v2 on A, G, D, H, c we get angle(A, D, G) == angle(A, H, G) + 180 mod 360
By angles_on_chord_v2 on E, C, F, H, d we get angle(E, F, C) == angle(E, H, C) + 180 mod 360
By same_angle_v0 on C, A, E, B we get angle(A, C, B) == angle(E, C, B) mod 360
By same_angle_v1 on A, C, E, B we get angle(C, A, B) == angle(E, A, B) mod 360
By same_angle_v0 on A, C, E, F we get angle(C, A, F) == angle(E, A, F) mod 360
By collinear_definition on A, E, C we get E in Line(A, C), C in Line(A, E), Line(A, C) == Line(A, E), 0 == 2 * angle(E, A, C) mod 360
By collinear_definition on C, E, A we get E in Line(A, C), A in Line(C, E), Line(A, C) == Line(C, E), 0 == 2 * angle(E, C, A) mod 360
By collinear_definition on A, C, E we get C in Line(A, E), E in Line(A, C), Line(A, C) == Line(A, E), 0 == 2 * angle(C, A, E) mod 360
By altitude_definition on A, C, B, perpendicular_line(A, g) we get altitude(A, B, C) == perpendicular_line(A, g)
By log_of_2_times_distance on C, A, E, A we get log(distance(A, C)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(A, E))
By collinear_definition on E, C, A we get C in Line(A, E), A in Line(C, E), Line(A, E) == Line(C, E), 0 == 2 * angle(C, E, A) mod 360
By collinear_definition on C, A, E we get A in Line(C, E), E in Line(A, C), Line(A, C) == Line(C, E), 0 == 2 * angle(A, C, E) mod 360
By collinear_definition on E, A, C we get A in Line(C, E), C in Line(A, E), Line(A, E) == Line(C, E), 0 == 2 * angle(A, E, C) mod 360
By log_of_2_times_distance on C, A, C, E we get log(distance(A, C)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(C, E))
By power_of_a_point_definition on E, C, A, c we get log(power_of_a_point(E, c)) == log(distance(C, E)) + log(distance(A, E))
By power_of_a_point_definition on A, E, C, d we get log(power_of_a_point(A, d)) == log(distance(A, E)) + log(distance(A, C))
By between_implies_angles on C, E, A we get 180 == angle(C, E, A) mod 360, 0 == angle(E, A, C) mod 360, 0 == angle(A, C, E) mod 360
By between_implies_angles on A, E, C we get 180 == angle(A, E, C) mod 360, 0 == angle(E, C, A) mod 360, 0 == angle(C, A, E) mod 360
By concyclic_sufficient_conditions_v1 on H, A, G, C we get concyclic(A, C, G, H)
By concyclic_sufficient_conditions_v1 on H, G, D, A we get concyclic(A, D, G, H)
By concyclic_sufficient_conditions_v1 on H, D, G, C we get concyclic(C, D, G, H)
By line_intersection_definition on E, Line(E, F), Line(E, H) we get E == line_intersection(Line(E, F), Line(E, H))
By line_intersection_definition on G, Line(G, H), Line(C, G) we get G == line_intersection(Line(C, G), Line(G, H))
By line_intersection_definition on H, Line(F, H), Line(D, H) we get H == line_intersection(Line(D, H), Line(F, H))
By line_intersection_definition on F, Line(F, H), g we get F == line_intersection(g, Line(F, H))
By line_intersection_definition on A, Line(A, C), i we get A == line_intersection(i, Line(A, C))
By median_definition on H, C, A, Line(E, H) we get Line(E, H) == median(H, A, C)
By line_intersection_definition on A, j, Line(A, C) we get A == line_intersection(j, Line(A, C))
By radical_axis_of_intersecting_circles_v0 on H, C, d, c we get Line(C, H) == radical_axis(c, d)
By line_intersection_definition on C, g, Line(A, C) we get C == line_intersection(g, Line(A, C))
By line_intersection_definition on D, Line(D, G), Line(D, H) we get D == line_intersection(Line(D, G), Line(D, H))
By line_intersection_definition on H, Line(E, H), Line(F, H) we get H == line_intersection(Line(E, H), Line(F, H))
By perpendicular_line_definition on A, j, i we get j == perpendicular_line(A, i)
By line_intersection_definition on H, Line(G, H), Line(C, H) we get H == line_intersection(Line(C, H), Line(G, H))
By line_intersection_definition on D, h, Line(D, G) we get D == line_intersection(h, Line(D, G))
By median_definition on F, C, A, Line(E, F) we get Line(E, F) == median(F, A, C)
By line_intersection_definition on F, Line(E, F), j we get F == line_intersection(j, Line(E, F))
By line_intersection_definition on E, Line(A, C), Line(E, H) we get E == line_intersection(Line(A, C), Line(E, H))
By line_intersection_definition on C, h, Line(A, C) we get C == line_intersection(h, Line(A, C))
By line_intersection_definition on H, Line(A, H), Line(G, H) we get H == line_intersection(Line(A, H), Line(G, H))
By line_intersection_definition on G, Line(G, H), j we get G == line_intersection(j, Line(G, H))
By line_intersection_definition on A, Line(A, C), f we get A == line_intersection(f, Line(A, C))
By line_intersection_definition on G, Line(D, G), j we get G == line_intersection(j, Line(D, G))
By perpendicular_line_definition on F, j, i we get j == perpendicular_line(F, i)
By line_intersection_definition on H, Line(G, H), Line(E, H) we get H == line_intersection(Line(E, H), Line(G, H))
By line_intersection_definition on A, i, Line(A, H) we get A == line_intersection(i, Line(A, H))
By line_intersection_definition on H, Line(F, H), Line(C, H) we get H == line_intersection(Line(C, H), Line(F, H))
By line_intersection_definition on H, Line(C, H), Line(E, H) we get H == line_intersection(Line(C, H), Line(E, H))
By line_intersection_definition on G, Line(G, H), Line(D, G) we get G == line_intersection(Line(D, G), Line(G, H))
By line_intersection_definition on F, Line(E, F), Line(F, H) we get F == line_intersection(Line(E, F), Line(F, H))
By line_intersection_definition on F, g, Line(E, F) we get F == line_intersection(g, Line(E, F))
By line_intersection_definition on H, Line(E, H), Line(A, H) we get H == line_intersection(Line(A, H), Line(E, H))
By line_intersection_definition on C, Line(C, G), h we get C == line_intersection(h, Line(C, G))
By line_intersection_definition on H, Line(G, H), Line(D, H) we get H == line_intersection(Line(D, H), Line(G, H))
By line_intersection_definition on H, Line(C, H), Line(A, H) we get H == line_intersection(Line(A, H), Line(C, H))
By perpendicular_line_definition on A, i, j we get i == perpendicular_line(A, j)
By line_intersection_definition on C, g, Line(C, H) we get C == line_intersection(g, Line(C, H))
By line_intersection_definition on H, Line(D, H), Line(A, H) we get H == line_intersection(Line(A, H), Line(D, H))
By line_intersection_definition on C, Line(C, H), Line(A, C) we get C == line_intersection(Line(A, C), Line(C, H))
By line_intersection_definition on D, Line(D, H), h we get D == line_intersection(h, Line(D, H))
By line_intersection_definition on A, Line(A, C), Line(A, H) we get A == line_intersection(Line(A, C), Line(A, H))
By perpendicular_line_definition on G, j, i we get j == perpendicular_line(G, i)
By perpendicular_line_definition on G, j, g we get j == perpendicular_line(G, g)
By line_intersection_definition on C, Line(C, G), Line(A, C) we get C == line_intersection(Line(A, C), Line(C, G))
By line_intersection_definition on H, Line(G, H), Line(F, H) we get H == line_intersection(Line(F, H), Line(G, H))
By line_intersection_definition on A, Line(A, H), j we get A == line_intersection(j, Line(A, H))
By line_intersection_definition on G, Line(C, G), j we get G == line_intersection(j, Line(C, G))
By line_intersection_definition on C, g, Line(C, G) we get C == line_intersection(g, Line(C, G))
By line_intersection_definition on D, i, Line(D, G) we get D == line_intersection(i, Line(D, G))
By line_intersection_definition on C, Line(C, H), h we get C == line_intersection(h, Line(C, H))
By line_intersection_definition on D, Line(D, H), i we get D == line_intersection(i, Line(D, H))
By line_intersection_definition on H, Line(F, H), Line(A, H) we get H == line_intersection(Line(A, H), Line(F, H))
By line_intersection_definition on A, f, Line(A, H) we get A == line_intersection(f, Line(A, H))
By line_intersection_definition on F, j, Line(F, H) we get F == line_intersection(j, Line(F, H))
By line_intersection_definition on G, Line(C, G), Line(D, G) we get G == line_intersection(Line(C, G), Line(D, G))
By line_intersection_definition on C, Line(C, H), Line(C, G) we get C == line_intersection(Line(C, G), Line(C, H))
By line_intersection_definition on E, Line(E, F), Line(A, C) we get E == line_intersection(Line(A, C), Line(E, F))
By perpendicular_line_definition on D, i, j we get i == perpendicular_line(D, j)
By line_intersection_definition on H, Line(D, H), Line(C, H) we get H == line_intersection(Line(C, H), Line(D, H))
By same_angle_v1 on A, G, F, C we get angle(F, A, C) == angle(G, A, C) mod 360
By same_angle_v2 on C, B, F, G we get angle(B, C, G) == angle(F, C, G) + 180 mod 360
By same_angle_v3 on E, C, A, F we get angle(C, E, F) == angle(A, E, F) + 180 mod 360
By same_angle_v1 on A, F, G, E we get angle(F, A, E) == angle(G, A, E) mod 360
By same_angle_v1 on C, E, A, F we get angle(A, C, F) == angle(E, C, F) mod 360
By same_angle_v1 on A, F, G, H we get angle(F, A, H) == angle(G, A, H) mod 360
By same_angle_v2 on C, F, B, A we get angle(F, C, A) == angle(B, C, A) + 180 mod 360
By perpendicular_direction_conditions_v0_r on C, B, A, G we get 180 == 2 * direction(C, B) - 2 * direction(A, G) mod 360
By same_angle_v1 on C, E, A, D we get angle(A, C, D) == angle(E, C, D) mod 360
By same_angle_v0 on A, C, E, G we get angle(C, A, G) == angle(E, A, G) mod 360
By same_angle_v0 on A, E, C, D we get angle(C, A, D) == angle(E, A, D) mod 360
By same_angle_v1 on A, F, G, B we get angle(F, A, B) == angle(G, A, B) mod 360
By same_angle_v3 on C, F, B, E we get angle(F, C, E) == angle(B, C, E) + 180 mod 360
By perpendicular_direction_conditions_v0_r on G, A, C, F we get 180 == 2 * direction(G, A) - 2 * direction(C, F) mod 360
By same_angle_v2 on C, F, B, H we get angle(F, C, H) == angle(B, C, H) + 180 mod 360
By same_angle_v2 on E, A, C, H we get angle(A, E, H) == angle(C, E, H) + 180 mod 360
By same_angle_v3 on C, F, B, D we get angle(F, C, D) == angle(B, C, D) + 180 mod 360
By perpendicular_direction_conditions_v0_r on A, F, C, F we get 180 == 2 * direction(A, F) - 2 * direction(C, F) mod 360
By same_angle_v1 on C, A, E, G we get angle(A, C, G) == angle(E, C, G) mod 360
By same_angle_v1 on A, E, C, H we get angle(C, A, H) == angle(E, A, H) mod 360
By same_angle_v0 on A, F, G, D we get angle(F, A, D) == angle(G, A, D) mod 360
By perpendicular_direction_conditions_v0_r on D, A, G, A we get 180 == 2 * direction(D, A) - 2 * direction(G, A) mod 360
By projection_definition on B, F, j we get F == projection(B, j)
By perpendicular_direction_conditions_v0_r on A, F, D, A we get 180 == 2 * direction(A, F) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on A, F, A, D we get 180 == 2 * direction(A, F) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on A, G, C, B we get 180 == 2 * direction(A, G) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on G, A, C, B we get 180 == 2 * direction(G, A) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on A, D, G, A we get 180 == 2 * direction(A, D) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on F, C, A, G we get 180 == 2 * direction(F, C) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on A, G, C, F we get 180 == 2 * direction(A, G) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on A, D, A, F we get 180 == 2 * direction(A, D) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on A, G, F, C we get 180 == 2 * direction(A, G) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on C, B, A, F we get 180 == 2 * direction(C, B) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on A, D, A, G we get 180 == 2 * direction(A, D) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on F, C, G, A we get 180 == 2 * direction(F, C) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on D, A, A, F we get 180 == 2 * direction(D, A) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on C, B, G, A we get 180 == 2 * direction(C, B) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on A, G, D, A we get 180 == 2 * direction(A, G) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on A, F, C, B we get 180 == 2 * direction(A, F) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on G, A, A, D we get 180 == 2 * direction(G, A) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on G, A, F, C we get 180 == 2 * direction(G, A) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on C, F, A, F we get 180 == 2 * direction(C, F) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on A, G, A, D we get 180 == 2 * direction(A, G) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on G, A, D, A we get 180 == 2 * direction(G, A) - 2 * direction(D, A) mod 360
By projection_definition on C, F, j we get F == projection(C, j)
By perpendicular_direction_conditions_v0_r on C, F, G, A we get 180 == 2 * direction(C, F) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on C, F, A, G we get 180 == 2 * direction(C, F) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on D, A, A, G we get 180 == 2 * direction(D, A) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on F, C, A, F we get 180 == 2 * direction(F, C) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on A, F, F, C we get 180 == 2 * direction(A, F) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on F, B, A, G we get 180 == 2 * direction(F, B) - 2 * direction(A, G) mod 360
By same_angle_v0 on G, F, A, C we get angle(A, G, C) == angle(F, G, C) mod 360
By same_angle_v1 on F, B, C, E we get angle(B, F, E) == angle(C, F, E) mod 360
By same_angle_v1 on G, A, F, D we get angle(A, G, D) == angle(F, G, D) mod 360
By perpendicular_direction_conditions_v0_r on A, F, B, F we get 180 == 2 * direction(A, F) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on G, F, C, F we get 180 == 2 * direction(G, F) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on B, C, G, A we get 180 == 2 * direction(B, C) - 2 * direction(G, A) mod 360
By same_angle_v1 on F, B, C, H we get angle(B, F, H) == angle(C, F, H) mod 360
By perpendicular_direction_conditions_v0_r on B, F, A, F we get 180 == 2 * direction(B, F) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on F, A, C, B we get 180 == 2 * direction(F, A) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on C, B, G, F we get 180 == 2 * direction(C, B) - 2 * direction(G, F) mod 360
By same_angle_v0 on G, F, A, H we get angle(A, G, H) == angle(F, G, H) mod 360
By perpendicular_direction_conditions_v0_r on A, D, F, G we get 180 == 2 * direction(A, D) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on A, F, F, B we get 180 == 2 * direction(A, F) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on F, A, C, F we get 180 == 2 * direction(F, A) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on D, A, F, G we get 180 == 2 * direction(D, A) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on G, F, F, C we get 180 == 2 * direction(G, F) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on A, G, B, F we get 180 == 2 * direction(A, G) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on F, B, G, A we get 180 == 2 * direction(F, B) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on G, A, B, F we get 180 == 2 * direction(G, A) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on A, G, F, B we get 180 == 2 * direction(A, G) - 2 * direction(F, B) mod 360
By projection_definition on F, A, i we get A == projection(F, i)
By perpendicular_direction_conditions_v0_r on D, A, G, F we get 180 == 2 * direction(D, A) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on C, B, F, G we get 180 == 2 * direction(C, B) - 2 * direction(F, G) mod 360
By projection_definition on G, F, g we get F == projection(G, g)
By perpendicular_direction_conditions_v0_r on B, C, A, G we get 180 == 2 * direction(B, C) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on F, G, F, C we get 180 == 2 * direction(F, G) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on C, F, G, F we get 180 == 2 * direction(C, F) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on C, B, F, A we get 180 == 2 * direction(C, B) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on F, C, F, G we get 180 == 2 * direction(F, C) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on G, F, D, A we get 180 == 2 * direction(G, F) - 2 * direction(D, A) mod 360
By projection_definition on D, A, j we get A == projection(D, j)
By perpendicular_direction_conditions_v0_r on C, F, F, A we get 180 == 2 * direction(C, F) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on F, A, D, A we get 180 == 2 * direction(F, A) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on F, G, C, B we get 180 == 2 * direction(F, G) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on D, A, F, A we get 180 == 2 * direction(D, A) - 2 * direction(F, A) mod 360
By projection_definition on G, A, i we get A == projection(G, i)
By perpendicular_direction_conditions_v0_r on F, G, D, A we get 180 == 2 * direction(F, G) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on F, C, F, A we get 180 == 2 * direction(F, C) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on F, A, A, D we get 180 == 2 * direction(F, A) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on G, A, F, B we get 180 == 2 * direction(G, A) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on G, F, A, D we get 180 == 2 * direction(G, F) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on F, G, A, D we get 180 == 2 * direction(F, G) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on B, C, A, F we get 180 == 2 * direction(B, C) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on B, F, A, G we get 180 == 2 * direction(B, F) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on G, A, B, C we get 180 == 2 * direction(G, A) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on G, F, C, B we get 180 == 2 * direction(G, F) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on A, D, F, A we get 180 == 2 * direction(A, D) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on F, C, G, F we get 180 == 2 * direction(F, C) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on F, A, F, C we get 180 == 2 * direction(F, A) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on A, F, B, C we get 180 == 2 * direction(A, F) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on F, B, A, F we get 180 == 2 * direction(F, B) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on C, F, F, G we get 180 == 2 * direction(C, F) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on B, F, G, A we get 180 == 2 * direction(B, F) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on A, D, G, F we get 180 == 2 * direction(A, D) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on F, G, C, F we get 180 == 2 * direction(F, G) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on A, G, B, C we get 180 == 2 * direction(A, G) - 2 * direction(B, C) mod 360
By parallel_line_angles_reverse_v1 on B, C, A, D we get angle(B, C, A) == angle(D, A, C) mod 360
By probably_between_and_collinear_implies_between on A, F, G we get between(A, F, G)
By reverse_direction on F, C we get 180 == direction(F, C) - direction(C, F) mod 360
By probably_between_and_collinear_implies_between on B, C, F we get between(B, C, F)
By parallel_line_angles_reverse_v2 on A, D, C, B we get angle(A, D, C) == angle(B, C, D) + 180 mod 360
By parallel_line_angles_reverse_v3 on C, D, A, B we get angle(C, D, A) == angle(B, A, D) + 180 mod 360
By reverse_direction on E, F we get 180 == direction(E, F) - direction(F, E) mod 360
By parallel_line_angles_reverse_v3 on B, C, D, A we get angle(B, C, D) == angle(A, D, C) + 180 mod 360
By perpendicular_angle_conditions_v0 on D, A, G we get angle(D, A, G) == orientation(A, G, D) mod 360
By reverse_direction on C, F we get 180 == direction(C, F) - direction(F, C) mod 360
By parallel_line_angles_reverse_v3 on D, A, C, F we get angle(D, A, C) == angle(F, C, A) + 180 mod 360
By parallel_line_angles_reverse_v0 on B, A, C, D we get angle(B, A, C) == angle(D, C, A) mod 360
By reverse_direction on D, A we get 180 == direction(D, A) - direction(A, D) mod 360
By parallel_line_angles_reverse_v2 on F, C, A, D we get angle(F, C, A) == angle(D, A, C) + 180 mod 360
By parallel_line_angles_reverse_v2 on B, A, D, C we get angle(B, A, D) == angle(C, D, A) + 180 mod 360
By reverse_direction on A, G we get 180 == direction(A, G) - direction(G, A) mod 360
By reverse_direction on E, H we get 180 == direction(E, H) - direction(H, E) mod 360
By reverse_direction on E, C we get 180 == direction(E, C) - direction(C, E) mod 360
By perpendicular_angle_conditions_v0 on D, A, F we get angle(D, A, F) == orientation(A, F, D) mod 360
By parallel_line_angles_reverse_v0 on A, D, C, F we get angle(A, D, C) == angle(F, C, D) mod 360
By reverse_direction on G, C we get 180 == direction(G, C) - direction(C, G) mod 360
By reverse_direction on H, G we get 180 == direction(H, G) - direction(G, H) mod 360
By reverse_direction on G, A we get 180 == direction(G, A) - direction(A, G) mod 360
By collinear_definition on C, B, F we get B in Line(C, F), F in Line(B, C), Line(B, C) == Line(C, F), 0 == 2 * angle(B, C, F) mod 360
By collinear_definition on C, F, B we get F in Line(B, C), B in Line(C, F), Line(B, C) == Line(C, F), 0 == 2 * angle(F, C, B) mod 360
By reverse_direction on H, D we get 180 == direction(H, D) - direction(D, H) mod 360
By reverse_direction on C, D we get 180 == direction(C, D) - direction(D, C) mod 360
By perpendicular_angle_conditions_v0 on F, A, D we get angle(F, A, D) == orientation(A, D, F) mod 360
By collinear_definition on A, G, F we get G in Line(A, F), F in Line(A, G), Line(A, F) == Line(A, G), 0 == 2 * angle(G, A, F) mod 360
By reverse_direction on C, E we get 180 == direction(C, E) - direction(E, C) mod 360
By reverse_direction on A, E we get 180 == direction(A, E) - direction(E, A) mod 360
By reverse_direction on C, G we get 180 == direction(C, G) - direction(G, C) mod 360
By reverse_direction on C, H we get 180 == direction(C, H) - direction(H, C) mod 360
By reverse_direction on H, F we get 180 == direction(H, F) - direction(F, H) mod 360
By reverse_direction on A, C we get 180 == direction(A, C) - direction(C, A) mod 360
By reverse_direction on E, A we get 180 == direction(E, A) - direction(A, E) mod 360
By reverse_direction on F, E we get 180 == direction(F, E) - direction(E, F) mod 360
By reverse_direction on D, G we get 180 == direction(D, G) - direction(G, D) mod 360
By reverse_direction on C, A we get 180 == direction(C, A) - direction(A, C) mod 360
By reverse_direction on H, C we get 180 == direction(H, C) - direction(C, H) mod 360
By reverse_direction on F, H we get 180 == direction(F, H) - direction(H, F) mod 360
By reverse_direction on D, H we get 180 == direction(D, H) - direction(H, D) mod 360
By reverse_direction on G, D we get 180 == direction(G, D) - direction(D, G) mod 360
By reverse_direction on H, E we get 180 == direction(H, E) - direction(E, H) mod 360
By reverse_direction on G, H we get 180 == direction(G, H) - direction(H, G) mod 360
By reverse_direction on A, H we get 180 == direction(A, H) - direction(H, A) mod 360
By reverse_direction on H, A we get 180 == direction(H, A) - direction(A, H) mod 360
By collinear_definition on A, F, G we get F in Line(A, G), G in Line(A, F), Line(A, F) == Line(A, G), 0 == 2 * angle(F, A, G) mod 360
By reverse_direction on D, C we get 180 == direction(D, C) - direction(C, D) mod 360
By perpendicular_angle_conditions_v0 on G, A, D we get angle(G, A, D) == orientation(A, D, G) mod 360
By reverse_direction on A, D we get 180 == direction(A, D) - direction(D, A) mod 360
By same_angle_v3 on F, A, G, H we get angle(A, F, H) == angle(G, F, H) + 180 mod 360
By same_angle_v0 on F, B, C, G we get angle(B, F, G) == angle(C, F, G) mod 360
By same_angle_v3 on F, A, G, E we get angle(A, F, E) == angle(G, F, E) + 180 mod 360
By perpendicular_direction_conditions_v0_r on F, B, G, F we get 180 == 2 * direction(F, B) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on F, G, B, F we get 180 == 2 * direction(F, G) - 2 * direction(B, F) mod 360
By same_angle_v3 on F, A, G, C we get angle(A, F, C) == angle(G, F, C) + 180 mod 360
By same_angle_v1 on F, B, C, A we get angle(B, F, A) == angle(C, F, A) mod 360
By perpendicular_direction_conditions_v0_r on F, A, B, F we get 180 == 2 * direction(F, A) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on B, F, G, F we get 180 == 2 * direction(B, F) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on F, B, F, G we get 180 == 2 * direction(F, B) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on F, A, B, C we get 180 == 2 * direction(F, A) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on B, C, G, F we get 180 == 2 * direction(B, C) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on G, F, B, F we get 180 == 2 * direction(G, F) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on F, G, B, C we get 180 == 2 * direction(F, G) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on B, F, F, A we get 180 == 2 * direction(B, F) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on F, A, F, B we get 180 == 2 * direction(F, A) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on B, F, F, G we get 180 == 2 * direction(B, F) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on F, B, F, A we get 180 == 2 * direction(F, B) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on G, F, B, C we get 180 == 2 * direction(G, F) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on B, C, F, G we get 180 == 2 * direction(B, C) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on G, F, F, B we get 180 == 2 * direction(G, F) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on B, C, F, A we get 180 == 2 * direction(B, C) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on F, G, F, B we get 180 == 2 * direction(F, G) - 2 * direction(F, B) mod 360
By parallel_line_angles_reverse_v1 on C, F, A, D we get angle(C, F, A) == angle(D, A, F) mod 360
By internal_angle_bisector_definition_v0_r on C, A, C, E we get Line(A, E) == internal_angle_bisector(C, E, C)
By collinear_definition on G, F, A we get F in Line(A, G), A in Line(F, G), Line(A, G) == Line(F, G), 0 == 2 * angle(F, G, A) mod 360
By internal_angle_bisector_definition_v0_r on A, C, A, E we get Line(C, E) == internal_angle_bisector(A, E, A)
By radical_axis_definition_v0_r on H, c, d we get H in radical_axis(c, d)
By internal_angle_bisector_definition_v0_r on E, C, E, A we get Line(A, C) == internal_angle_bisector(E, A, E)
By collinear_definition on F, B, C we get B in Line(C, F), C in Line(B, F), Line(B, F) == Line(C, F), 0 == 2 * angle(B, F, C) mod 360
By perpendicular_angle_conditions_v0 on C, F, G we get angle(C, F, G) == orientation(C, F, G) mod 360
By collinear_definition on G, A, F we get A in Line(F, G), F in Line(A, G), Line(A, G) == Line(F, G), 0 == 2 * angle(A, G, F) mod 360
By radical_axis_definition_v0_r on C, d, c we get C in radical_axis(c, d)
By perpendicular_angle_conditions_v0 on A, F, C we get angle(A, F, C) == orientation(A, F, C) mod 360
By collinear_definition on F, C, B we get C in Line(B, F), B in Line(C, F), Line(B, F) == Line(C, F), 0 == 2 * angle(C, F, B) mod 360
By perpendicular_angle_conditions_v0 on G, F, C we get angle(G, F, C) == orientation(C, G, F) mod 360
By internal_angle_bisector_definition_v0_r on A, E, A, C we get Line(C, E) == internal_angle_bisector(A, C, A)
By reverse_direction on C, B we get 180 == direction(C, B) - direction(B, C) mod 360
By reverse_direction on A, B we get 180 == direction(A, B) - direction(B, A) mod 360
By perpendicular_angle_conditions_v0 on C, F, A we get angle(C, F, A) == orientation(A, C, F) mod 360
By internal_angle_bisector_definition_v0_r on C, E, C, A we get Line(A, E) == internal_angle_bisector(C, A, C)
By reverse_direction on A, F we get 180 == direction(A, F) - direction(F, A) mod 360
By internal_angle_bisector_definition_v0_r on E, A, E, C we get Line(A, C) == internal_angle_bisector(E, C, E)
By same_angle_v0 on B, F, C, A we get angle(C, B, A) == angle(F, B, A) mod 360
By same_angle_v3 on F, A, G, B we get angle(A, F, B) == angle(G, F, B) + 180 mod 360
By parallel_line_angles_reverse_v2 on F, B, A, D we get angle(F, B, A) == angle(D, A, B) + 180 mod 360
By parallelogram_parallel_definition on D, C, B, A we get parallelogram(A, B, C, D)
By parallel_line_angles_reverse_v2 on D, C, B, A we get angle(D, C, B) == angle(A, B, C) + 180 mod 360
By altitude_definition on B, A, G, g we get g == altitude(B, A, G)
By parallel_line_angles_reverse_v3 on A, B, C, D we get angle(A, B, C) == angle(D, C, B) + 180 mod 360
By parallel_line_angles_reverse_v3 on D, A, B, F we get angle(D, A, B) == angle(F, B, A) + 180 mod 360
By altitude_definition on B, F, G, g we get g == altitude(B, F, G)
By parallelogram_parallel_definition on B, A, D, C we get parallelogram(A, B, C, D)
By parallel_line_angles_reverse_v2 on C, B, A, D we get angle(C, B, A) == angle(D, A, B) + 180 mod 360
By altitude_definition on G, F, C, j we get j == altitude(G, C, F)
By parallelogram_parallel_definition on D, A, B, C we get parallelogram(A, B, C, D)
By collinear_definition on F, G, A we get G in Line(A, F), A in Line(F, G), Line(A, F) == Line(F, G), 0 == 2 * angle(G, F, A) mod 360
By parallel_line_angles_reverse_v3 on D, A, B, C we get angle(D, A, B) == angle(C, B, A) + 180 mod 360
By altitude_definition on G, C, B, j we get j == altitude(G, B, C)
By parallelogram_parallel_definition on B, C, D, A we get parallelogram(A, B, C, D)
By perpendicular_angle_conditions_v0 on B, F, A we get angle(B, F, A) == orientation(A, B, F) mod 360
By altitude_definition on D, G, F, i we get i == altitude(D, F, G)
By altitude_definition on A, F, C, j we get j == altitude(A, C, F)
By altitude_definition on G, F, B, j we get j == altitude(G, B, F)
By parallelogram_parallel_definition on A, B, C, D we get parallelogram(A, B, C, D)
By altitude_definition on B, A, F, g we get g == altitude(B, A, F)
By altitude_definition on C, G, F, g we get g == altitude(C, F, G)
By parallel_line_angles_reverse_v1 on D, A, F, B we get angle(B, F, A) == angle(D, A, F) mod 360
By altitude_definition on G, D, A, j we get j == altitude(G, A, D)
By parallelogram_parallel_definition on C, D, A, B we get parallelogram(A, B, C, D)
By altitude_definition on C, F, A, g we get g == altitude(C, A, F)
By parallelogram_parallel_definition on A, D, C, B we get parallelogram(A, B, C, D)
By collinear_definition on B, C, F we get C in Line(B, F), F in Line(B, C), Line(B, C) == Line(B, F), 0 == 2 * angle(C, B, F) mod 360
By altitude_definition on D, G, A, i we get i == altitude(D, A, G)
By perpendicular_angle_conditions_v0 on A, F, B we get angle(A, F, B) == orientation(A, F, B) mod 360
By altitude_definition on D, A, F, i we get i == altitude(D, A, F)
By perpendicular_angle_conditions_v0 on G, F, B we get angle(G, F, B) == orientation(B, G, F) mod 360
By altitude_definition on C, G, A, g we get g == altitude(C, A, G)
By perpendicular_angle_conditions_v0 on B, F, G we get angle(B, F, G) == orientation(B, F, G) mod 360
By altitude_definition on A, F, B, j we get j == altitude(A, B, F)
By collinear_definition on B, F, C we get F in Line(B, C), C in Line(B, F), Line(B, C) == Line(B, F), 0 == 2 * angle(F, B, C) mod 360
By collinear_definition on F, A, G we get A in Line(F, G), G in Line(A, F), Line(A, F) == Line(F, G), 0 == 2 * angle(A, F, G) mod 360
By parallelogram_parallel_definition on C, B, A, D we get parallelogram(A, B, C, D)
By altitude_definition on F, D, A, j we get j == altitude(F, A, D)
By right_triangle_circumcenter_v1 on A, F, C we get midpoint(A, C) == circumcenter(A, C, F)
By power_of_a_point_definition on B, F, C, d we get log(power_of_a_point(B, d)) == log(distance(B, F)) + log(distance(B, C))
By power_of_a_point_definition on F, G, A, c we get log(power_of_a_point(F, c)) == log(distance(F, G)) + log(distance(A, F))
By concurrent_sufficient_conditions on i, Line(D, H), h we get concurrent(h, i, Line(D, H))
By concurrent_sufficient_conditions on Line(C, H), Line(G, H), Line(D, H) we get concurrent(Line(C, H), Line(D, H), Line(G, H))
By concurrent_sufficient_conditions on h, Line(C, G), Line(C, H) we get concurrent(h, Line(C, G), Line(C, H))
By concurrent_sufficient_conditions on Line(G, H), Line(D, G), Line(C, G) we get concurrent(Line(C, G), Line(D, G), Line(G, H))
By concurrent_sufficient_conditions on h, Line(A, C), Line(C, H) we get concurrent(h, Line(A, C), Line(C, H))
By concurrent_sufficient_conditions on Line(F, H), Line(E, H), Line(A, H) we get concurrent(Line(A, H), Line(E, H), Line(F, H))
By concurrent_sufficient_conditions on Line(F, H), Line(G, H), Line(D, H) we get concurrent(Line(D, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(G, H), Line(F, H), Line(D, H) we get concurrent(Line(D, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on h, Line(D, G), i we get concurrent(h, i, Line(D, G))
By concurrent_sufficient_conditions on Line(C, G), h, g we get concurrent(g, h, Line(C, G))
By concurrent_sufficient_conditions on Line(A, H), f, i we get concurrent(f, i, Line(A, H))
By concurrent_sufficient_conditions on Line(G, H), Line(C, G), Line(D, G) we get concurrent(Line(C, G), Line(D, G), Line(G, H))
By concurrent_sufficient_conditions on Line(A, H), Line(C, H), Line(F, H) we get concurrent(Line(A, H), Line(C, H), Line(F, H))
By concurrent_sufficient_conditions on Line(G, H), Line(D, G), j we get concurrent(j, Line(D, G), Line(G, H))
By concurrent_sufficient_conditions on Line(E, F), g, j we get concurrent(g, j, Line(E, F))
By concurrent_sufficient_conditions on Line(C, H), g, h we get concurrent(g, h, Line(C, H))
By concurrent_sufficient_conditions on Line(G, H), Line(C, H), Line(E, H) we get concurrent(Line(C, H), Line(E, H), Line(G, H))
By concurrent_sufficient_conditions on h, Line(C, G), Line(A, C) we get concurrent(h, Line(A, C), Line(C, G))
By concurrent_sufficient_conditions on i, Line(A, C), Line(A, H) we get concurrent(i, Line(A, C), Line(A, H))
By concurrent_sufficient_conditions on Line(C, G), g, Line(A, C) we get concurrent(g, Line(A, C), Line(C, G))
By concurrent_sufficient_conditions on j, i, Line(A, C) we get concurrent(i, j, Line(A, C))
By concurrent_sufficient_conditions on Line(A, C), j, i we get concurrent(i, j, Line(A, C))
By concurrent_sufficient_conditions on Line(A, C), f, Line(A, H) we get concurrent(f, Line(A, C), Line(A, H))
By concurrent_sufficient_conditions on Line(A, H), j, f we get concurrent(f, j, Line(A, H))
By concurrent_sufficient_conditions on j, g, Line(E, F) we get concurrent(g, j, Line(E, F))
By concurrent_sufficient_conditions on Line(A, H), Line(C, H), Line(D, H) we get concurrent(Line(A, H), Line(C, H), Line(D, H))
By concurrent_sufficient_conditions on Line(A, C), Line(C, H), g we get concurrent(g, Line(A, C), Line(C, H))
By concurrent_sufficient_conditions on Line(D, G), h, Line(D, H) we get concurrent(h, Line(D, G), Line(D, H))
By concurrent_sufficient_conditions on j, i, Line(A, H) we get concurrent(i, j, Line(A, H))
By concurrent_sufficient_conditions on g, Line(C, H), Line(A, C) we get concurrent(g, Line(A, C), Line(C, H))
By concurrent_sufficient_conditions on Line(E, H), Line(C, H), Line(F, H) we get concurrent(Line(C, H), Line(E, H), Line(F, H))
By concurrent_sufficient_conditions on Line(C, H), Line(D, H), Line(F, H) we get concurrent(Line(C, H), Line(D, H), Line(F, H))
By concurrent_sufficient_conditions on i, Line(A, C), f we get concurrent(f, i, Line(A, C))
By concurrent_sufficient_conditions on Line(F, H), g, j we get concurrent(g, j, Line(F, H))
By concurrent_sufficient_conditions on Line(F, H), g, Line(E, F) we get concurrent(g, Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(A, C), h, Line(C, H) we get concurrent(h, Line(A, C), Line(C, H))
By concurrent_sufficient_conditions on g, Line(F, H), j we get concurrent(g, j, Line(F, H))
By concurrent_sufficient_conditions on Line(A, C), i, f we get concurrent(f, i, Line(A, C))
By concurrent_sufficient_conditions on Line(A, H), Line(G, H), Line(C, H) we get concurrent(Line(A, H), Line(C, H), Line(G, H))
By concurrent_sufficient_conditions on h, Line(C, H), g we get concurrent(g, h, Line(C, H))
By concurrent_sufficient_conditions on Line(E, H), Line(G, H), Line(F, H) we get concurrent(Line(E, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on j, Line(G, H), Line(C, G) we get concurrent(j, Line(C, G), Line(G, H))
By concurrent_sufficient_conditions on i, Line(D, G), h we get concurrent(h, i, Line(D, G))
By concurrent_sufficient_conditions on Line(G, H), Line(E, H), Line(F, H) we get concurrent(Line(E, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(A, C), f, i we get concurrent(f, i, Line(A, C))
By concurrent_sufficient_conditions on Line(D, H), Line(A, H), Line(F, H) we get concurrent(Line(A, H), Line(D, H), Line(F, H))
By concurrent_sufficient_conditions on Line(A, C), j, Line(A, H) we get concurrent(j, Line(A, C), Line(A, H))
By concurrent_sufficient_conditions on Line(G, H), Line(A, H), Line(F, H) we get concurrent(Line(A, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on j, Line(C, G), Line(G, H) we get concurrent(j, Line(C, G), Line(G, H))
By concurrent_sufficient_conditions on Line(E, H), Line(A, H), Line(F, H) we get concurrent(Line(A, H), Line(E, H), Line(F, H))
By concurrent_sufficient_conditions on Line(A, H), f, Line(A, C) we get concurrent(f, Line(A, C), Line(A, H))
By concurrent_sufficient_conditions on Line(F, H), Line(A, H), Line(C, H) we get concurrent(Line(A, H), Line(C, H), Line(F, H))
By concurrent_sufficient_conditions on h, Line(C, H), Line(C, G) we get concurrent(h, Line(C, G), Line(C, H))
By concurrent_sufficient_conditions on Line(A, H), Line(E, H), Line(G, H) we get concurrent(Line(A, H), Line(E, H), Line(G, H))
By concurrent_sufficient_conditions on Line(C, H), g, Line(A, C) we get concurrent(g, Line(A, C), Line(C, H))
By concurrent_sufficient_conditions on Line(A, H), Line(A, C), j we get concurrent(j, Line(A, C), Line(A, H))
By concurrent_sufficient_conditions on Line(E, F), g, Line(F, H) we get concurrent(g, Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(C, G), j, Line(D, G) we get concurrent(j, Line(C, G), Line(D, G))
By concurrent_sufficient_conditions on h, i, Line(D, H) we get concurrent(h, i, Line(D, H))
By concurrent_sufficient_conditions on Line(C, H), Line(A, H), Line(E, H) we get concurrent(Line(A, H), Line(C, H), Line(E, H))
By concurrent_sufficient_conditions on Line(A, H), Line(F, H), Line(C, H) we get concurrent(Line(A, H), Line(C, H), Line(F, H))
By concurrent_sufficient_conditions on Line(A, C), i, j we get concurrent(i, j, Line(A, C))
By concurrent_sufficient_conditions on Line(E, H), Line(F, H), Line(A, H) we get concurrent(Line(A, H), Line(E, H), Line(F, H))
By concurrent_sufficient_conditions on Line(F, H), Line(D, H), Line(C, H) we get concurrent(Line(C, H), Line(D, H), Line(F, H))
By concurrent_sufficient_conditions on Line(E, F), j, g we get concurrent(g, j, Line(E, F))
By concurrent_sufficient_conditions on Line(A, H), j, i we get concurrent(i, j, Line(A, H))
By concurrent_sufficient_conditions on Line(A, H), Line(E, H), Line(C, H) we get concurrent(Line(A, H), Line(C, H), Line(E, H))
By concurrent_sufficient_conditions on Line(E, H), Line(F, H), Line(G, H) we get concurrent(Line(E, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(A, C), Line(A, H), i we get concurrent(i, Line(A, C), Line(A, H))
By concurrent_sufficient_conditions on Line(E, H), Line(A, H), Line(C, H) we get concurrent(Line(A, H), Line(C, H), Line(E, H))
By concurrent_sufficient_conditions on h, i, Line(D, G) we get concurrent(h, i, Line(D, G))
By concurrent_sufficient_conditions on f, Line(A, C), Line(A, H) we get concurrent(f, Line(A, C), Line(A, H))
By concurrent_sufficient_conditions on Line(A, H), Line(F, H), Line(D, H) we get concurrent(Line(A, H), Line(D, H), Line(F, H))
By concurrent_sufficient_conditions on Line(D, H), Line(G, H), Line(A, H) we get concurrent(Line(A, H), Line(D, H), Line(G, H))
By concurrent_sufficient_conditions on h, Line(A, C), Line(C, G) we get concurrent(h, Line(A, C), Line(C, G))
By concurrent_sufficient_conditions on g, Line(C, G), Line(A, C) we get concurrent(g, Line(A, C), Line(C, G))
By concurrent_sufficient_conditions on Line(F, H), Line(C, H), Line(D, H) we get concurrent(Line(C, H), Line(D, H), Line(F, H))
By concurrent_sufficient_conditions on h, Line(C, H), Line(A, C) we get concurrent(h, Line(A, C), Line(C, H))
By concurrent_sufficient_conditions on g, Line(F, H), Line(E, F) we get concurrent(g, Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(C, G), Line(A, C), h we get concurrent(h, Line(A, C), Line(C, G))
By concurrent_sufficient_conditions on Line(C, H), Line(A, H), Line(F, H) we get concurrent(Line(A, H), Line(C, H), Line(F, H))
By concurrent_sufficient_conditions on Line(G, H), j, Line(D, G) we get concurrent(j, Line(D, G), Line(G, H))
By concurrent_sufficient_conditions on j, Line(A, H), Line(A, C) we get concurrent(j, Line(A, C), Line(A, H))
By concurrent_sufficient_conditions on Line(A, H), i, f we get concurrent(f, i, Line(A, H))
By concurrent_sufficient_conditions on i, j, Line(A, H) we get concurrent(i, j, Line(A, H))
By concurrent_sufficient_conditions on Line(E, F), Line(A, C), Line(E, H) we get concurrent(Line(A, C), Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(C, G), Line(A, C), Line(C, H) we get concurrent(Line(A, C), Line(C, G), Line(C, H))
By concurrent_sufficient_conditions on i, f, Line(A, H) we get concurrent(f, i, Line(A, H))
By concurrent_sufficient_conditions on h, Line(A, C), g we get concurrent(g, h, Line(A, C))
By concurrent_sufficient_conditions on Line(F, H), Line(E, H), Line(G, H) we get concurrent(Line(E, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(A, C), g, Line(C, G) we get concurrent(g, Line(A, C), Line(C, G))
By concurrent_sufficient_conditions on Line(A, C), h, g we get concurrent(g, h, Line(A, C))
By concurrent_sufficient_conditions on Line(D, H), i, h we get concurrent(h, i, Line(D, H))
By concurrent_sufficient_conditions on Line(G, H), Line(D, H), Line(F, H) we get concurrent(Line(D, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(C, H), Line(F, H), Line(D, H) we get concurrent(Line(C, H), Line(D, H), Line(F, H))
By concurrent_sufficient_conditions on f, j, Line(A, H) we get concurrent(f, j, Line(A, H))
By concurrent_sufficient_conditions on Line(C, G), Line(G, H), Line(D, G) we get concurrent(Line(C, G), Line(D, G), Line(G, H))
By concurrent_sufficient_conditions on Line(D, H), Line(G, H), Line(C, H) we get concurrent(Line(C, H), Line(D, H), Line(G, H))
By concurrent_sufficient_conditions on j, f, Line(A, H) we get concurrent(f, j, Line(A, H))
By concurrent_sufficient_conditions on Line(F, H), Line(G, H), Line(C, H) we get concurrent(Line(C, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on g, Line(E, F), j we get concurrent(g, j, Line(E, F))
By concurrent_sufficient_conditions on Line(F, H), Line(E, F), g we get concurrent(g, Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(F, H), Line(A, H), Line(E, H) we get concurrent(Line(A, H), Line(E, H), Line(F, H))
By concurrent_sufficient_conditions on Line(F, H), Line(C, H), Line(G, H) we get concurrent(Line(C, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(D, H), Line(D, G), i we get concurrent(i, Line(D, G), Line(D, H))
By concurrent_sufficient_conditions on Line(E, H), Line(A, H), Line(G, H) we get concurrent(Line(A, H), Line(E, H), Line(G, H))
By concurrent_sufficient_conditions on Line(C, G), Line(D, G), j we get concurrent(j, Line(C, G), Line(D, G))
By concurrent_sufficient_conditions on g, Line(E, F), Line(F, H) we get concurrent(g, Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(G, H), Line(F, H), Line(E, H) we get concurrent(Line(E, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(C, G), Line(D, G), Line(G, H) we get concurrent(Line(C, G), Line(D, G), Line(G, H))
By concurrent_sufficient_conditions on Line(C, H), Line(E, H), Line(A, H) we get concurrent(Line(A, H), Line(C, H), Line(E, H))
By concurrent_sufficient_conditions on Line(D, H), Line(C, H), Line(A, H) we get concurrent(Line(A, H), Line(C, H), Line(D, H))
By concurrent_sufficient_conditions on Line(C, H), Line(G, H), Line(A, H) we get concurrent(Line(A, H), Line(C, H), Line(G, H))
By concurrent_sufficient_conditions on g, Line(A, C), Line(C, G) we get concurrent(g, Line(A, C), Line(C, G))
By concurrent_sufficient_conditions on Line(G, H), Line(E, H), Line(C, H) we get concurrent(Line(C, H), Line(E, H), Line(G, H))
By concurrent_sufficient_conditions on j, Line(E, F), Line(F, H) we get concurrent(j, Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(C, G), Line(C, H), Line(A, C) we get concurrent(Line(A, C), Line(C, G), Line(C, H))
By concurrent_sufficient_conditions on j, Line(F, H), g we get concurrent(g, j, Line(F, H))
By concurrent_sufficient_conditions on Line(A, C), Line(C, G), h we get concurrent(h, Line(A, C), Line(C, G))
By concurrent_sufficient_conditions on Line(A, H), Line(C, H), Line(G, H) we get concurrent(Line(A, H), Line(C, H), Line(G, H))
By concurrent_sufficient_conditions on f, Line(A, C), i we get concurrent(f, i, Line(A, C))
By concurrent_sufficient_conditions on Line(C, G), g, h we get concurrent(g, h, Line(C, G))
By concurrent_sufficient_conditions on Line(A, H), Line(G, H), Line(F, H) we get concurrent(Line(A, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on i, Line(D, G), Line(D, H) we get concurrent(i, Line(D, G), Line(D, H))
By concurrent_sufficient_conditions on f, Line(A, H), j we get concurrent(f, j, Line(A, H))
By concurrent_sufficient_conditions on Line(C, H), Line(A, H), Line(G, H) we get concurrent(Line(A, H), Line(C, H), Line(G, H))
By concurrent_sufficient_conditions on Line(C, H), Line(D, H), Line(A, H) we get concurrent(Line(A, H), Line(C, H), Line(D, H))
By concurrent_sufficient_conditions on Line(G, H), Line(C, H), Line(D, H) we get concurrent(Line(C, H), Line(D, H), Line(G, H))
By concurrent_sufficient_conditions on Line(G, H), Line(C, G), j we get concurrent(j, Line(C, G), Line(G, H))
By concurrent_sufficient_conditions on Line(C, H), Line(F, H), Line(A, H) we get concurrent(Line(A, H), Line(C, H), Line(F, H))
By concurrent_sufficient_conditions on Line(D, H), Line(C, H), Line(F, H) we get concurrent(Line(C, H), Line(D, H), Line(F, H))
By concurrent_sufficient_conditions on Line(A, C), g, h we get concurrent(g, h, Line(A, C))
By concurrent_sufficient_conditions on i, Line(D, H), Line(D, G) we get concurrent(i, Line(D, G), Line(D, H))
By concurrent_sufficient_conditions on g, j, Line(F, H) we get concurrent(g, j, Line(F, H))
By concurrent_sufficient_conditions on g, Line(A, C), Line(C, H) we get concurrent(g, Line(A, C), Line(C, H))
By concurrent_sufficient_conditions on j, Line(F, H), Line(E, F) we get concurrent(j, Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on g, Line(C, G), h we get concurrent(g, h, Line(C, G))
By concurrent_sufficient_conditions on Line(D, H), Line(C, H), Line(G, H) we get concurrent(Line(C, H), Line(D, H), Line(G, H))
By concurrent_sufficient_conditions on f, j, Line(A, C) we get concurrent(f, j, Line(A, C))
By concurrent_sufficient_conditions on g, Line(C, G), Line(C, H) we get concurrent(g, Line(C, G), Line(C, H))
By concurrent_sufficient_conditions on Line(A, H), Line(C, H), Line(E, H) we get concurrent(Line(A, H), Line(C, H), Line(E, H))
By concurrent_sufficient_conditions on h, g, Line(A, C) we get concurrent(g, h, Line(A, C))
By concurrent_sufficient_conditions on i, h, Line(D, G) we get concurrent(h, i, Line(D, G))
By concurrent_sufficient_conditions on Line(A, H), Line(G, H), Line(E, H) we get concurrent(Line(A, H), Line(E, H), Line(G, H))
By concurrent_sufficient_conditions on Line(G, H), Line(A, H), Line(D, H) we get concurrent(Line(A, H), Line(D, H), Line(G, H))
By concurrent_sufficient_conditions on Line(D, G), Line(C, G), j we get concurrent(j, Line(C, G), Line(D, G))
By concurrent_sufficient_conditions on Line(F, H), j, Line(E, F) we get concurrent(j, Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(A, C), Line(C, G), Line(C, H) we get concurrent(Line(A, C), Line(C, G), Line(C, H))
By concurrent_sufficient_conditions on Line(D, H), Line(D, G), h we get concurrent(h, Line(D, G), Line(D, H))
By concurrent_sufficient_conditions on j, g, Line(F, H) we get concurrent(g, j, Line(F, H))
By concurrent_sufficient_conditions on Line(D, G), Line(G, H), j we get concurrent(j, Line(D, G), Line(G, H))
By concurrent_sufficient_conditions on Line(D, G), j, Line(G, H) we get concurrent(j, Line(D, G), Line(G, H))
By concurrent_sufficient_conditions on Line(F, H), j, g we get concurrent(g, j, Line(F, H))
By concurrent_sufficient_conditions on Line(G, H), Line(F, H), Line(C, H) we get concurrent(Line(C, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on f, i, Line(A, H) we get concurrent(f, i, Line(A, H))
By concurrent_sufficient_conditions on Line(D, H), Line(F, H), Line(G, H) we get concurrent(Line(D, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(C, G), h, Line(A, C) we get concurrent(h, Line(A, C), Line(C, G))
By concurrent_sufficient_conditions on Line(E, H), Line(G, H), Line(C, H) we get concurrent(Line(C, H), Line(E, H), Line(G, H))
By concurrent_sufficient_conditions on Line(E, H), Line(C, H), Line(A, H) we get concurrent(Line(A, H), Line(C, H), Line(E, H))
By concurrent_sufficient_conditions on Line(D, G), Line(D, H), h we get concurrent(h, Line(D, G), Line(D, H))
By concurrent_sufficient_conditions on Line(E, H), Line(E, F), Line(A, C) we get concurrent(Line(A, C), Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(A, C), Line(C, G), g we get concurrent(g, Line(A, C), Line(C, G))
By concurrent_sufficient_conditions on h, Line(D, H), Line(D, G) we get concurrent(h, Line(D, G), Line(D, H))
By concurrent_sufficient_conditions on Line(A, H), Line(D, H), Line(G, H) we get concurrent(Line(A, H), Line(D, H), Line(G, H))
By concurrent_sufficient_conditions on Line(C, H), h, Line(C, G) we get concurrent(h, Line(C, G), Line(C, H))
By concurrent_sufficient_conditions on Line(A, H), Line(D, H), Line(F, H) we get concurrent(Line(A, H), Line(D, H), Line(F, H))
By concurrent_sufficient_conditions on j, Line(A, H), i we get concurrent(i, j, Line(A, H))
By concurrent_sufficient_conditions on Line(C, H), Line(A, C), Line(C, G) we get concurrent(Line(A, C), Line(C, G), Line(C, H))
By concurrent_sufficient_conditions on Line(F, H), Line(E, F), j we get concurrent(j, Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(D, G), i, h we get concurrent(h, i, Line(D, G))
By concurrent_sufficient_conditions on Line(D, H), Line(A, H), Line(G, H) we get concurrent(Line(A, H), Line(D, H), Line(G, H))
By concurrent_sufficient_conditions on Line(G, H), Line(D, H), Line(C, H) we get concurrent(Line(C, H), Line(D, H), Line(G, H))
By concurrent_sufficient_conditions on Line(D, G), j, Line(C, G) we get concurrent(j, Line(C, G), Line(D, G))
By concurrent_sufficient_conditions on f, Line(A, H), i we get concurrent(f, i, Line(A, H))
By concurrent_sufficient_conditions on i, Line(A, H), j we get concurrent(i, j, Line(A, H))
By concurrent_sufficient_conditions on Line(A, H), Line(G, H), Line(D, H) we get concurrent(Line(A, H), Line(D, H), Line(G, H))
By concurrent_sufficient_conditions on Line(A, C), Line(C, H), h we get concurrent(h, Line(A, C), Line(C, H))
By concurrent_sufficient_conditions on Line(F, H), Line(G, H), Line(A, H) we get concurrent(Line(A, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(F, H), Line(C, H), Line(A, H) we get concurrent(Line(A, H), Line(C, H), Line(F, H))
By concurrent_sufficient_conditions on Line(E, H), Line(A, C), Line(E, F) we get concurrent(Line(A, C), Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(A, C), Line(A, H), f we get concurrent(f, Line(A, C), Line(A, H))
By concurrent_sufficient_conditions on Line(A, H), Line(E, H), Line(F, H) we get concurrent(Line(A, H), Line(E, H), Line(F, H))
By concurrent_sufficient_conditions on Line(C, G), g, Line(C, H) we get concurrent(g, Line(C, G), Line(C, H))
By concurrent_sufficient_conditions on Line(G, H), Line(C, H), Line(A, H) we get concurrent(Line(A, H), Line(C, H), Line(G, H))
By concurrent_sufficient_conditions on Line(C, H), Line(G, H), Line(F, H) we get concurrent(Line(C, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(E, H), Line(G, H), Line(A, H) we get concurrent(Line(A, H), Line(E, H), Line(G, H))
By concurrent_sufficient_conditions on Line(A, H), i, Line(A, C) we get concurrent(i, Line(A, C), Line(A, H))
By concurrent_sufficient_conditions on Line(C, H), h, Line(A, C) we get concurrent(h, Line(A, C), Line(C, H))
By concurrent_sufficient_conditions on Line(A, H), i, j we get concurrent(i, j, Line(A, H))
By concurrent_sufficient_conditions on Line(D, H), Line(F, H), Line(A, H) we get concurrent(Line(A, H), Line(D, H), Line(F, H))
By concurrent_sufficient_conditions on Line(E, H), Line(F, H), Line(C, H) we get concurrent(Line(C, H), Line(E, H), Line(F, H))
By concurrent_sufficient_conditions on Line(A, H), Line(D, H), Line(C, H) we get concurrent(Line(A, H), Line(C, H), Line(D, H))
By concurrent_sufficient_conditions on g, Line(C, H), h we get concurrent(g, h, Line(C, H))
By concurrent_sufficient_conditions on j, f, Line(A, C) we get concurrent(f, j, Line(A, C))
By concurrent_sufficient_conditions on j, Line(D, G), Line(G, H) we get concurrent(j, Line(D, G), Line(G, H))
By concurrent_sufficient_conditions on Line(D, G), Line(D, H), i we get concurrent(i, Line(D, G), Line(D, H))
By concurrent_sufficient_conditions on Line(C, H), Line(A, C), h we get concurrent(h, Line(A, C), Line(C, H))
By concurrent_sufficient_conditions on Line(A, C), Line(E, F), Line(E, H) we get concurrent(Line(A, C), Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(C, H), Line(E, H), Line(F, H) we get concurrent(Line(C, H), Line(E, H), Line(F, H))
By concurrent_sufficient_conditions on Line(F, H), Line(E, H), Line(C, H) we get concurrent(Line(C, H), Line(E, H), Line(F, H))
By concurrent_sufficient_conditions on Line(A, H), Line(A, C), i we get concurrent(i, Line(A, C), Line(A, H))
By concurrent_sufficient_conditions on g, h, Line(C, H) we get concurrent(g, h, Line(C, H))
By concurrent_sufficient_conditions on i, h, Line(D, H) we get concurrent(h, i, Line(D, H))
By concurrent_sufficient_conditions on j, Line(G, H), Line(D, G) we get concurrent(j, Line(D, G), Line(G, H))
By concurrent_sufficient_conditions on Line(G, H), Line(E, H), Line(A, H) we get concurrent(Line(A, H), Line(E, H), Line(G, H))
By concurrent_sufficient_conditions on Line(G, H), Line(F, H), Line(A, H) we get concurrent(Line(A, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on i, Line(A, H), f we get concurrent(f, i, Line(A, H))
By concurrent_sufficient_conditions on Line(F, H), Line(D, H), Line(A, H) we get concurrent(Line(A, H), Line(D, H), Line(F, H))
By concurrent_sufficient_conditions on Line(A, H), f, j we get concurrent(f, j, Line(A, H))
By concurrent_sufficient_conditions on j, Line(A, C), f we get concurrent(f, j, Line(A, C))
By concurrent_sufficient_conditions on Line(F, H), Line(D, H), Line(G, H) we get concurrent(Line(D, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(D, G), i, Line(D, H) we get concurrent(i, Line(D, G), Line(D, H))
By concurrent_sufficient_conditions on j, Line(A, H), f we get concurrent(f, j, Line(A, H))
By concurrent_sufficient_conditions on Line(A, H), Line(F, H), Line(G, H) we get concurrent(Line(A, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on g, h, Line(A, C) we get concurrent(g, h, Line(A, C))
By concurrent_sufficient_conditions on Line(C, H), Line(G, H), Line(E, H) we get concurrent(Line(C, H), Line(E, H), Line(G, H))
By concurrent_sufficient_conditions on Line(C, H), Line(F, H), Line(G, H) we get concurrent(Line(C, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on i, j, Line(A, C) we get concurrent(i, j, Line(A, C))
By concurrent_sufficient_conditions on Line(F, H), Line(G, H), Line(E, H) we get concurrent(Line(E, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(D, H), h, Line(D, G) we get concurrent(h, Line(D, G), Line(D, H))
By concurrent_sufficient_conditions on Line(C, H), Line(C, G), h we get concurrent(h, Line(C, G), Line(C, H))
By concurrent_sufficient_conditions on Line(A, H), Line(F, H), Line(E, H) we get concurrent(Line(A, H), Line(E, H), Line(F, H))
By concurrent_sufficient_conditions on Line(F, H), Line(C, H), Line(E, H) we get concurrent(Line(C, H), Line(E, H), Line(F, H))
By concurrent_sufficient_conditions on Line(D, H), h, i we get concurrent(h, i, Line(D, H))
By concurrent_sufficient_conditions on Line(G, H), Line(D, H), Line(A, H) we get concurrent(Line(A, H), Line(D, H), Line(G, H))
By concurrent_sufficient_conditions on Line(C, H), Line(C, G), g we get concurrent(g, Line(C, G), Line(C, H))
By concurrent_sufficient_conditions on h, Line(D, G), Line(D, H) we get concurrent(h, Line(D, G), Line(D, H))
By concurrent_sufficient_conditions on h, Line(C, G), g we get concurrent(g, h, Line(C, G))
By concurrent_sufficient_conditions on Line(G, H), Line(A, H), Line(C, H) we get concurrent(Line(A, H), Line(C, H), Line(G, H))
By concurrent_sufficient_conditions on g, h, Line(C, G) we get concurrent(g, h, Line(C, G))
By concurrent_sufficient_conditions on h, g, Line(C, H) we get concurrent(g, h, Line(C, H))
By concurrent_sufficient_conditions on Line(D, H), Line(A, H), Line(C, H) we get concurrent(Line(A, H), Line(C, H), Line(D, H))
By concurrent_sufficient_conditions on h, g, Line(C, G) we get concurrent(g, h, Line(C, G))
By concurrent_sufficient_conditions on Line(G, H), Line(C, H), Line(F, H) we get concurrent(Line(C, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on f, Line(A, H), Line(A, C) we get concurrent(f, Line(A, C), Line(A, H))
By concurrent_sufficient_conditions on Line(A, C), h, Line(C, G) we get concurrent(h, Line(A, C), Line(C, G))
By concurrent_sufficient_conditions on Line(A, C), g, Line(C, H) we get concurrent(g, Line(A, C), Line(C, H))
By concurrent_sufficient_conditions on Line(G, H), j, Line(C, G) we get concurrent(j, Line(C, G), Line(G, H))
By concurrent_sufficient_conditions on Line(G, H), Line(A, H), Line(E, H) we get concurrent(Line(A, H), Line(E, H), Line(G, H))
By concurrent_sufficient_conditions on Line(A, C), i, Line(A, H) we get concurrent(i, Line(A, C), Line(A, H))
By concurrent_sufficient_conditions on Line(E, F), Line(F, H), j we get concurrent(j, Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on j, Line(D, G), Line(C, G) we get concurrent(j, Line(C, G), Line(D, G))
By concurrent_sufficient_conditions on Line(C, G), Line(C, H), g we get concurrent(g, Line(C, G), Line(C, H))
By concurrent_sufficient_conditions on Line(C, H), g, Line(C, G) we get concurrent(g, Line(C, G), Line(C, H))
By concurrent_sufficient_conditions on f, i, Line(A, C) we get concurrent(f, i, Line(A, C))
By concurrent_sufficient_conditions on i, Line(A, H), Line(A, C) we get concurrent(i, Line(A, C), Line(A, H))
By concurrent_sufficient_conditions on Line(A, H), Line(A, C), f we get concurrent(f, Line(A, C), Line(A, H))
By concurrent_sufficient_conditions on Line(A, C), j, f we get concurrent(f, j, Line(A, C))
By concurrent_sufficient_conditions on g, Line(A, C), h we get concurrent(g, h, Line(A, C))
By concurrent_sufficient_conditions on Line(F, H), Line(A, H), Line(G, H) we get concurrent(Line(A, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on h, Line(D, H), i we get concurrent(h, i, Line(D, H))
By concurrent_sufficient_conditions on g, j, Line(E, F) we get concurrent(g, j, Line(E, F))
By concurrent_sufficient_conditions on Line(D, H), Line(G, H), Line(F, H) we get concurrent(Line(D, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on j, Line(A, C), Line(A, H) we get concurrent(j, Line(A, C), Line(A, H))
By concurrent_sufficient_conditions on Line(C, H), Line(C, G), Line(A, C) we get concurrent(Line(A, C), Line(C, G), Line(C, H))
By concurrent_sufficient_conditions on Line(C, H), Line(A, C), g we get concurrent(g, Line(A, C), Line(C, H))
By concurrent_sufficient_conditions on Line(C, H), Line(E, H), Line(G, H) we get concurrent(Line(C, H), Line(E, H), Line(G, H))
By concurrent_sufficient_conditions on Line(C, G), h, Line(C, H) we get concurrent(h, Line(C, G), Line(C, H))
By concurrent_sufficient_conditions on Line(A, H), j, Line(A, C) we get concurrent(j, Line(A, C), Line(A, H))
By concurrent_sufficient_conditions on i, f, Line(A, C) we get concurrent(f, i, Line(A, C))
By concurrent_sufficient_conditions on Line(D, H), Line(F, H), Line(C, H) we get concurrent(Line(C, H), Line(D, H), Line(F, H))
By concurrent_sufficient_conditions on Line(E, F), Line(E, H), Line(A, C) we get concurrent(Line(A, C), Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(C, G), Line(G, H), j we get concurrent(j, Line(C, G), Line(G, H))
By concurrent_sufficient_conditions on Line(D, G), h, i we get concurrent(h, i, Line(D, G))
By concurrent_sufficient_conditions on Line(E, F), Line(F, H), g we get concurrent(g, Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on j, Line(E, F), g we get concurrent(g, j, Line(E, F))
By concurrent_sufficient_conditions on Line(A, C), Line(A, H), j we get concurrent(j, Line(A, C), Line(A, H))
By concurrent_sufficient_conditions on Line(C, G), j, Line(G, H) we get concurrent(j, Line(C, G), Line(G, H))
By concurrent_sufficient_conditions on Line(D, G), Line(G, H), Line(C, G) we get concurrent(Line(C, G), Line(D, G), Line(G, H))
By concurrent_sufficient_conditions on Line(C, H), Line(D, H), Line(G, H) we get concurrent(Line(C, H), Line(D, H), Line(G, H))
By concurrent_sufficient_conditions on Line(D, G), Line(C, G), Line(G, H) we get concurrent(Line(C, G), Line(D, G), Line(G, H))
By concurrent_sufficient_conditions on Line(C, H), Line(A, H), Line(D, H) we get concurrent(Line(A, H), Line(C, H), Line(D, H))
By concurrent_sufficient_conditions on Line(C, G), Line(A, C), g we get concurrent(g, Line(A, C), Line(C, G))
By concurrent_sufficient_conditions on Line(D, H), i, Line(D, G) we get concurrent(i, Line(D, G), Line(D, H))
By concurrent_sufficient_conditions on Line(F, H), Line(A, H), Line(D, H) we get concurrent(Line(A, H), Line(D, H), Line(F, H))
By concurrent_sufficient_conditions on Line(C, G), Line(C, H), h we get concurrent(h, Line(C, G), Line(C, H))
By concurrent_sufficient_conditions on f, Line(A, C), j we get concurrent(f, j, Line(A, C))
By concurrent_sufficient_conditions on j, Line(C, G), Line(D, G) we get concurrent(j, Line(C, G), Line(D, G))
By concurrent_sufficient_conditions on Line(C, H), h, g we get concurrent(g, h, Line(C, H))
By concurrent_sufficient_conditions on Line(C, H), Line(F, H), Line(E, H) we get concurrent(Line(C, H), Line(E, H), Line(F, H))
By concurrent_sufficient_conditions on j, Line(A, C), i we get concurrent(i, j, Line(A, C))
By concurrent_sufficient_conditions on i, Line(A, C), j we get concurrent(i, j, Line(A, C))
By concurrent_sufficient_conditions on Line(E, H), Line(C, H), Line(G, H) we get concurrent(Line(C, H), Line(E, H), Line(G, H))
By concurrent_sufficient_conditions on Line(A, C), Line(E, H), Line(E, F) we get concurrent(Line(A, C), Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(A, C), f, j we get concurrent(f, j, Line(A, C))
By concurrent_sufficient_conditions on Line(E, F), j, Line(F, H) we get concurrent(j, Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(A, C), Line(C, H), Line(C, G) we get concurrent(Line(A, C), Line(C, G), Line(C, H))
By concurrent_sufficient_conditions on g, Line(C, H), Line(C, G) we get concurrent(g, Line(C, G), Line(C, H))
By radical_axis_of_intersecting_circles_v0 on A, C, Circle(A, C, F), c we get Line(A, C) == radical_axis(c, Circle(A, C, F))
By radical_axis_of_intersecting_circles_v0 on C, F, Circle(A, C, F), d we get Line(C, F) == radical_axis(d, Circle(A, C, F))
By perpendicular_direction_conditions_v0 on H, G, H, D we get perpendicular(Line(D, H), Line(G, H))
By perpendicular_direction_conditions_v0 on G, C, C, D we get perpendicular(Line(C, D), Line(C, G))
By perpendicular_direction_conditions_v0 on G, C, A, B we get perpendicular(Line(A, B), Line(C, G))
By between_imply_not_between on A, F, G we get collinear_and_not_between(F, A, G)
By between_imply_not_between on G, F, A we get collinear_and_not_between(A, G, F)
By between_imply_not_between on F, C, B we get collinear_and_not_between(B, F, C)
By circle_radius_v0_r on D, c we get radius(c) == distance(D, center(c))
By circle_radius_v0_r on H, c we get radius(c) == distance(H, center(c))
By between_imply_not_between on B, C, F we get collinear_and_not_between(C, B, F)
By angle_to_center on D, C, G, c we get 2 * angle(D, C, G) == angle(D, center(c), G) mod 360
By circle_radius_v0_r on A, Circle(A, C, F) we get radius(Circle(A, C, F)) == distance(A, center(Circle(A, C, F)))
By circle_radius_v0_r on F, Circle(A, C, F) we get radius(Circle(A, C, F)) == distance(F, center(Circle(A, C, F)))
By circle_radius_v0_r on G, c we get radius(c) == distance(G, center(c))
By angle_to_center on E, F, H, d we get 2 * angle(E, F, H) == angle(E, center(d), H) mod 360
By circle_radius_v0_r on C, c we get radius(c) == distance(C, center(c))
By circle_radius_v0_r on F, d we get radius(d) == distance(F, center(d))
By circle_radius_v0_r on E, d we get radius(d) == distance(E, center(d))
By circle_radius_v0_r on H, d we get radius(d) == distance(H, center(d))
By circle_radius_v0_r on C, Circle(A, C, F) we get radius(Circle(A, C, F)) == distance(C, center(Circle(A, C, F)))
By circle_radius_v0_r on C, d we get radius(d) == distance(C, center(d))
By circle_radius_v0_r on A, c we get radius(c) == distance(A, center(c))
By angle_to_center on E, F, C, d we get 2 * angle(E, F, C) == angle(E, center(d), C) mod 360
By angle_to_center on A, D, H, c we get 2 * angle(A, D, H) == angle(A, center(c), H) mod 360
By angle_to_center on C, G, D, c we get 2 * angle(C, G, D) == angle(C, center(c), D) mod 360
By angle_to_center on D, G, H, c we get 2 * angle(D, G, H) == angle(D, center(c), H) mod 360
By angle_to_center on G, H, D, c we get 2 * angle(G, H, D) == angle(G, center(c), D) mod 360
By angle_to_center on F, C, E, d we get 2 * angle(F, C, E) == angle(F, center(d), E) mod 360
By angle_to_center on F, H, E, d we get 2 * angle(F, H, E) == angle(F, center(d), E) mod 360
By angle_to_center on H, E, F, d we get 2 * angle(H, E, F) == angle(H, center(d), F) mod 360
By angle_to_center on H, G, C, c we get 2 * angle(H, G, C) == angle(H, center(c), C) mod 360
By angle_to_center on H, F, C, d we get 2 * angle(H, F, C) == angle(H, center(d), C) mod 360
By angle_to_center on C, G, A, c we get 2 * angle(C, G, A) == angle(C, center(c), A) mod 360
By angle_to_center on H, A, C, c we get 2 * angle(H, A, C) == angle(H, center(c), C) mod 360
By angle_to_center on C, D, G, c we get 2 * angle(C, D, G) == angle(C, center(c), G) mod 360
By angle_to_center on G, A, H, c we get 2 * angle(G, A, H) == angle(G, center(c), H) mod 360
By angle_to_center on G, C, A, c we get 2 * angle(G, C, A) == angle(G, center(c), A) mod 360
By angle_to_center on E, H, F, d we get 2 * angle(E, H, F) == angle(E, center(d), F) mod 360
By angle_to_center on C, H, G, c we get 2 * angle(C, H, G) == angle(C, center(c), G) mod 360
By angle_to_center on H, A, D, c we get 2 * angle(H, A, D) == angle(H, center(c), D) mod 360
By angle_to_center on F, E, C, d we get 2 * angle(F, E, C) == angle(F, center(d), C) mod 360
By angle_to_center on H, G, D, c we get 2 * angle(H, G, D) == angle(H, center(c), D) mod 360
By angle_to_center on G, C, H, c we get 2 * angle(G, C, H) == angle(G, center(c), H) mod 360
By angle_to_center on C, A, F, Circle(A, C, F) we get 2 * angle(C, A, F) == angle(C, center(Circle(A, C, F)), F) mod 360
By angle_to_center on E, C, H, d we get 2 * angle(E, C, H) == angle(E, center(d), H) mod 360
By angle_to_center on D, A, C, c we get 2 * angle(D, A, C) == angle(D, center(c), C) mod 360
By angle_to_center on E, H, C, d we get 2 * angle(E, H, C) == angle(E, center(d), C) mod 360
By angle_to_center on D, H, C, c we get 2 * angle(D, H, C) == angle(D, center(c), C) mod 360
By angle_to_center on A, G, C, c we get 2 * angle(A, G, C) == angle(A, center(c), C) mod 360
By angle_to_center on A, G, D, c we get 2 * angle(A, G, D) == angle(A, center(c), D) mod 360
By angle_to_center on C, H, F, d we get 2 * angle(C, H, F) == angle(C, center(d), F) mod 360
By angle_to_center on A, H, C, c we get 2 * angle(A, H, C) == angle(A, center(c), C) mod 360
By angle_to_center on H, G, A, c we get 2 * angle(H, G, A) == angle(H, center(c), A) mod 360
By angle_to_center on F, C, H, d we get 2 * angle(F, C, H) == angle(F, center(d), H) mod 360
By angle_to_center on D, G, C, c we get 2 * angle(D, G, C) == angle(D, center(c), C) mod 360
By angle_to_center on C, F, H, d we get 2 * angle(C, F, H) == angle(C, center(d), H) mod 360
By angle_to_center on F, H, C, d we get 2 * angle(F, H, C) == angle(F, center(d), C) mod 360
By angle_to_center on G, A, C, c we get 2 * angle(G, A, C) == angle(G, center(c), C) mod 360
By angle_to_center on D, C, A, c we get 2 * angle(D, C, A) == angle(D, center(c), A) mod 360
By angle_to_center on G, C, D, c we get 2 * angle(G, C, D) == angle(G, center(c), D) mod 360
By angle_to_center on C, A, G, c we get 2 * angle(C, A, G) == angle(C, center(c), G) mod 360
By angle_to_center on C, H, A, c we get 2 * angle(C, H, A) == angle(C, center(c), A) mod 360
By angle_to_center on C, F, E, d we get 2 * angle(C, F, E) == angle(C, center(d), E) mod 360
By angle_to_center on G, D, H, c we get 2 * angle(G, D, H) == angle(G, center(c), H) mod 360
By angle_to_center on A, H, D, c we get 2 * angle(A, H, D) == angle(A, center(c), D) mod 360
By angle_to_center on H, F, E, d we get 2 * angle(H, F, E) == angle(H, center(d), E) mod 360
By angle_to_center on C, A, H, c we get 2 * angle(C, A, H) == angle(C, center(c), H) mod 360
By angle_to_center on D, C, H, c we get 2 * angle(D, C, H) == angle(D, center(c), H) mod 360
By angle_to_center on G, H, A, c we get 2 * angle(G, H, A) == angle(G, center(c), A) mod 360
By angle_to_center on H, D, A, c we get 2 * angle(H, D, A) == angle(H, center(c), A) mod 360
By angle_to_center on H, C, D, c we get 2 * angle(H, C, D) == angle(H, center(c), D) mod 360
By angle_to_center on D, G, A, c we get 2 * angle(D, G, A) == angle(D, center(c), A) mod 360
By angle_to_center on H, C, E, d we get 2 * angle(H, C, E) == angle(H, center(d), E) mod 360
By angle_to_center on G, A, D, c we get 2 * angle(G, A, D) == angle(G, center(c), D) mod 360
By angle_to_center on D, H, G, c we get 2 * angle(D, H, G) == angle(D, center(c), G) mod 360
By angle_to_center on A, C, D, c we get 2 * angle(A, C, D) == angle(A, center(c), D) mod 360
By angle_to_center on C, E, F, d we get 2 * angle(C, E, F) == angle(C, center(d), F) mod 360
By angle_to_center on A, C, H, c we get 2 * angle(A, C, H) == angle(A, center(c), H) mod 360
By angle_to_center on H, A, G, c we get 2 * angle(H, A, G) == angle(H, center(c), G) mod 360
By angle_to_center on A, C, F, Circle(A, C, F) we get 2 * angle(A, C, F) == angle(A, center(Circle(A, C, F)), F) mod 360
By angle_to_center on C, D, H, c we get 2 * angle(C, D, H) == angle(C, center(c), H) mod 360
By angle_to_center on C, E, H, d we get 2 * angle(C, E, H) == angle(C, center(d), H) mod 360
By angle_to_center on D, A, H, c we get 2 * angle(D, A, H) == angle(D, center(c), H) mod 360
By angle_to_center on G, D, A, c we get 2 * angle(G, D, A) == angle(G, center(c), A) mod 360
By angle_to_center on A, D, C, c we get 2 * angle(A, D, C) == angle(A, center(c), C) mod 360
By angle_to_center on A, H, G, c we get 2 * angle(A, H, G) == angle(A, center(c), G) mod 360
By angle_to_center on C, H, E, d we get 2 * angle(C, H, E) == angle(C, center(d), E) mod 360
By angle_to_center on D, A, G, c we get 2 * angle(D, A, G) == angle(D, center(c), G) mod 360
By angle_to_center on H, D, C, c we get 2 * angle(H, D, C) == angle(H, center(c), C) mod 360
By angle_to_center on G, H, C, c we get 2 * angle(G, H, C) == angle(G, center(c), C) mod 360
By angle_to_center on A, G, H, c we get 2 * angle(A, G, H) == angle(A, center(c), H) mod 360
By angle_to_center on F, E, H, d we get 2 * angle(F, E, H) == angle(F, center(d), H) mod 360
By angle_to_center on G, D, C, c we get 2 * angle(G, D, C) == angle(G, center(c), C) mod 360
By angle_to_center on H, C, F, d we get 2 * angle(H, C, F) == angle(H, center(d), F) mod 360
By angle_to_center on C, G, H, c we get 2 * angle(C, G, H) == angle(C, center(c), H) mod 360
By angle_to_center on H, C, G, c we get 2 * angle(H, C, G) == angle(H, center(c), G) mod 360
By angle_to_center on D, H, A, c we get 2 * angle(D, H, A) == angle(D, center(c), A) mod 360
By angle_to_center on E, C, F, d we get 2 * angle(E, C, F) == angle(E, center(d), F) mod 360
By angle_to_center on F, A, C, Circle(A, C, F) we get 2 * angle(F, A, C) == angle(F, center(Circle(A, C, F)), C) mod 360
By angle_to_center on A, C, G, c we get 2 * angle(A, C, G) == angle(A, center(c), G) mod 360
By angle_to_center on C, D, A, c we get 2 * angle(C, D, A) == angle(C, center(c), A) mod 360
By angle_to_center on H, D, G, c we get 2 * angle(H, D, G) == angle(H, center(c), G) mod 360
By angle_to_center on H, C, A, c we get 2 * angle(H, C, A) == angle(H, center(c), A) mod 360
By angle_to_center on A, D, G, c we get 2 * angle(A, D, G) == angle(A, center(c), G) mod 360
By angle_to_center on C, A, D, c we get 2 * angle(C, A, D) == angle(C, center(c), D) mod 360
By angle_to_center on H, E, C, d we get 2 * angle(H, E, C) == angle(H, center(d), C) mod 360
By angle_to_center on F, C, A, Circle(A, C, F) we get 2 * angle(F, C, A) == angle(F, center(Circle(A, C, F)), A) mod 360
By angle_to_center on C, H, D, c we get 2 * angle(C, H, D) == angle(C, center(c), D) mod 360
By between_imply_segment_sum on A, F, G we get distance(A, G) == distance(A, F) + distance(F, G)
By between_imply_segment_sum on B, C, F we get distance(B, F) == distance(B, C) + distance(C, F)
By external_angle_bisector_definition_v0_r on B, G, B, F we get Line(F, G) == external_angle_bisector(B, F, B)
By power_of_a_point_in_circle on F, Circle(A, C, F) we get 0 == power_of_a_point(F, Circle(A, C, F))
By external_angle_bisector_definition_v0_r on F, D, F, A we get Line(A, D) == external_angle_bisector(F, A, F)
By external_angle_bisector_definition_v0_r on C, G, C, F we get Line(F, G) == external_angle_bisector(C, F, C)
By external_angle_bisector_definition_v0_r on A, B, A, F we get Line(B, F) == external_angle_bisector(A, F, A)
By internal_angle_bisector_definition_v0_r on C, F, C, B we get Line(B, F) == internal_angle_bisector(C, B, C)
By external_angle_bisector_definition_v0_r on B, A, C, F we get Line(A, F) == external_angle_bisector(B, F, C)
By external_angle_bisector_definition_v0_r on B, G, C, F we get Line(F, G) == external_angle_bisector(B, F, C)
By external_angle_bisector_definition_v0_r on D, F, D, A we get Line(A, F) == external_angle_bisector(D, A, D)
By internal_angle_bisector_definition_v0_r on G, B, A, F we get Line(B, F) == internal_angle_bisector(A, F, G)
By external_angle_bisector_definition_v0_r on G, D, G, H we get Line(D, H) == external_angle_bisector(G, H, G)
By external_angle_bisector_definition_v0_r on A, C, A, F we get Line(C, F) == external_angle_bisector(A, F, A)
By external_angle_bisector_definition_v0_r on G, D, G, A we get Line(A, D) == external_angle_bisector(G, A, G)
By internal_angle_bisector_definition_v0_r on F, G, F, A we get Line(A, G) == internal_angle_bisector(F, A, F)
By power_of_a_point_on_circle on C, Circle(A, C, F) we get 0 == power_of_a_point(C, Circle(A, C, F))
By external_angle_bisector_definition_v0_r on D, G, D, A we get Line(A, G) == external_angle_bisector(D, A, D)
By external_angle_bisector_definition_v0_r on D, G, D, C we get Line(C, G) == external_angle_bisector(D, C, D)
By internal_angle_bisector_definition_v0_r on F, A, F, G we get Line(A, G) == internal_angle_bisector(F, G, F)
By external_angle_bisector_definition_v0_r on G, C, G, F we get Line(C, F) == external_angle_bisector(G, F, G)
By external_angle_bisector_definition_v0_r on F, D, G, A we get Line(A, D) == external_angle_bisector(F, A, G)
By internal_angle_bisector_definition_v0_r on A, G, A, F we get Line(F, G) == internal_angle_bisector(A, F, A)
By internal_angle_bisector_definition_v0_r on G, F, G, A we get Line(A, F) == internal_angle_bisector(G, A, G)
By external_angle_bisector_definition_v0_r on D, G, D, H we get Line(G, H) == external_angle_bisector(D, H, D)
By power_of_a_point_on_circle on A, Circle(A, C, F) we get 0 == power_of_a_point(A, Circle(A, C, F))
By external_angle_bisector_definition_v0_r on B, A, B, F we get Line(A, F) == external_angle_bisector(B, F, B)
By external_angle_bisector_definition_v0_r on C, A, C, F we get Line(A, F) == external_angle_bisector(C, F, C)
By external_angle_bisector_definition_v0_r on G, B, G, F we get Line(B, F) == external_angle_bisector(G, F, G)
By internal_angle_bisector_definition_v0_r on B, C, B, F we get Line(C, F) == internal_angle_bisector(B, F, B)
By internal_angle_bisector_definition_v0_r on A, C, G, F we get Line(C, F) == internal_angle_bisector(A, F, G)
By internal_angle_bisector_definition_v0_r on B, F, B, C we get Line(C, F) == internal_angle_bisector(B, C, B)
By external_angle_bisector_definition_v0_r on G, D, G, C we get Line(C, D) == external_angle_bisector(G, C, G)
By internal_angle_bisector_definition_v0_r on F, C, F, B we get Line(B, C) == internal_angle_bisector(F, B, F)
By internal_angle_bisector_definition_v0_r on C, B, C, F we get Line(B, F) == internal_angle_bisector(C, F, C)
By internal_angle_bisector_definition_v0_r on G, A, G, F we get Line(A, F) == internal_angle_bisector(G, F, G)
By internal_angle_bisector_definition_v0_r on F, B, F, C we get Line(B, C) == internal_angle_bisector(F, C, F)
By internal_angle_bisector_definition_v0_r on A, F, A, G we get Line(F, G) == internal_angle_bisector(A, G, A)
By sas_congruence on B, A, D, D, C, B we get congruent_triangles(A, B, D, C, D, B)
By sas_congruence on B, C, D, D, A, B we get congruent_triangles(A, B, D, C, D, B)
By power_of_a_point_definition on E, C, A, Circle(A, C, F) we get log(distance(C, E)) + log(distance(A, E)) == log(power_of_a_point(E, Circle(A, C, F)))
By sas_congruence on D, C, B, B, A, D we get congruent_triangles(A, B, D, C, D, B)
By sas_congruence on D, A, B, B, C, D we get congruent_triangles(A, B, D, C, D, B)
By power_of_a_point_definition on B, F, C, Circle(A, C, F) we get log(distance(B, F)) + log(distance(B, C)) == log(power_of_a_point(B, Circle(A, C, F)))
By parallelogram_diagonals_v1 on A, B, C, D we get identical(midpoint(A, C), midpoint(B, D), line_intersection(Line(A, C), Line(B, D)))
By parallelogram_diagonals_v1 on C, D, A, B we get identical(midpoint(A, C), midpoint(B, D), line_intersection(Line(A, C), Line(B, D)))
By power_of_a_point_definition on G, F, A, Circle(A, C, F) we get log(distance(F, G)) + log(distance(A, G)) == log(power_of_a_point(G, Circle(A, C, F)))
By similar_triangle_basic_properties on F, B, A, F, G, C we get angle(F, B, A) == angle(F, G, C) mod 360, angle(B, A, F) == angle(G, C, F) mod 360, angle(A, F, B) == angle(C, F, G) mod 360, log(distance(B, F)) + log(distance(C, G)) == log(distance(F, G)) + log(distance(A, B)), log(distance(A, B)) + log(distance(C, F)) == log(distance(C, G)) + log(distance(A, F)), log(distance(A, F)) + log(distance(F, G)) == log(distance(C, F)) + log(distance(B, F))
By similar_triangle_basic_properties on B, A, C, D, C, A we get angle(B, A, C) == angle(D, C, A) mod 360, angle(A, C, B) == angle(C, A, D) mod 360, angle(A, D, C) == angle(C, B, A) mod 360, log(distance(A, B)) + log(distance(A, C)) == log(distance(C, D)) + log(distance(A, C)), log(distance(A, C)) + log(distance(A, D)) == log(distance(A, C)) + log(distance(B, C)), log(distance(A, D)) + log(distance(A, B)) == log(distance(B, C)) + log(distance(C, D))
By similar_triangle_basic_properties on A, B, F, C, G, F we get angle(A, B, F) == angle(C, G, F) mod 360, angle(B, F, A) == angle(G, F, C) mod 360, angle(F, A, B) == angle(F, C, G) mod 360, log(distance(A, B)) + log(distance(F, G)) == log(distance(C, G)) + log(distance(B, F)), log(distance(B, F)) + log(distance(C, F)) == log(distance(F, G)) + log(distance(A, F)), log(distance(A, F)) + log(distance(C, G)) == log(distance(C, F)) + log(distance(A, B))
By anti_similar_triangle_basic_properties on C, G, D, F, C, A we get angle(C, G, D) == 0 - angle(F, C, A) mod 360, angle(G, D, C) == 0 - angle(C, A, F) mod 360, angle(D, C, G) == 0 - angle(A, F, C) mod 360, log(distance(C, F)) + log(distance(D, G)) == log(distance(C, G)) + log(distance(A, C)), log(distance(A, C)) + log(distance(C, D)) == log(distance(D, G)) + log(distance(A, F)), log(distance(A, F)) + log(distance(C, G)) == log(distance(C, D)) + log(distance(C, F))
By anti_similar_triangle_basic_properties on D, G, C, A, C, F we get angle(D, G, C) == 0 - angle(A, C, F) mod 360, angle(G, C, D) == 0 - angle(C, F, A) mod 360, angle(C, D, G) == 0 - angle(F, A, C) mod 360, log(distance(A, C)) + log(distance(C, G)) == log(distance(D, G)) + log(distance(C, F)), log(distance(C, F)) + log(distance(C, D)) == log(distance(C, G)) + log(distance(A, F)), log(distance(A, F)) + log(distance(D, G)) == log(distance(C, D)) + log(distance(A, C))
By sas_congruence on B, A, E, D, C, E we get congruent_triangles(A, B, E, C, D, E)
By sas_congruence on D, C, E, B, A, E we get congruent_triangles(A, B, E, C, D, E)
By sas_congruence on B, C, E, D, A, E we get congruent_triangles(A, D, E, C, B, E)
By sas_congruence on E, A, D, E, C, B we get congruent_triangles(A, D, E, C, B, E)
By sas_congruence on E, C, B, E, A, D we get congruent_triangles(A, D, E, C, B, E)
By sas_congruence on D, A, E, B, C, E we get congruent_triangles(A, D, E, C, B, E)
By sas_congruence on E, C, D, E, A, B we get congruent_triangles(A, B, E, C, D, E)
By sas_congruence on E, A, B, E, C, D we get congruent_triangles(A, B, E, C, D, E)
By line_definition on E, B, Line(B, D) we get Line(B, D) == Line(B, E)
By line_definition on E, D, Line(B, D) we get Line(B, D) == Line(D, E)
By radical_axis_is_perpendicular_to_center_line on g, d, Circle(A, C, F) we get perpendicular(g, Line(center(d), center(Circle(A, C, F))))
By median_definition on D, C, A, Line(D, E) we get Line(D, E) == median(D, A, C)
By line_intersection_definition on A, Line(A, center(c)), Line(A, C) we get A == line_intersection(Line(A, C), Line(A, center(c)))
By line_intersection_definition on D, Line(D, E), h we get D == line_intersection(h, Line(D, E))
By line_intersection_definition on H, Line(H, center(c)), Line(A, H) we get H == line_intersection(Line(A, H), Line(H, center(c)))
By line_intersection_definition on F, Line(F, center(d)), j we get F == line_intersection(j, Line(F, center(d)))
By line_intersection_definition on G, Line(G, center(c)), Line(C, G) we get G == line_intersection(Line(C, G), Line(G, center(c)))
By line_intersection_definition on E, Line(A, C), Line(E, center(d)) we get E == line_intersection(Line(A, C), Line(E, center(d)))
By line_intersection_definition on E, Line(E, center(d)), Line(D, E) we get E == line_intersection(Line(D, E), Line(E, center(d)))
By line_intersection_definition on H, Line(C, H), Line(H, center(c)) we get H == line_intersection(Line(C, H), Line(H, center(c)))
By line_intersection_definition on center(c), Line(D, center(c)), Line(C, center(c)) we get center(c) == line_intersection(Line(C, center(c)), Line(D, center(c)))
By line_intersection_definition on E, Line(E, center(d)), Line(E, F) we get E == line_intersection(Line(E, F), Line(E, center(d)))
By line_intersection_definition on center(c), Line(G, center(c)), Line(C, center(c)) we get center(c) == line_intersection(Line(C, center(c)), Line(G, center(c)))
By line_intersection_definition on center(c), Line(H, center(c)), Line(D, center(c)) we get center(c) == line_intersection(Line(D, center(c)), Line(H, center(c)))
By perpendicular_line_definition on G, Line(C, G), h we get Line(C, G) == perpendicular_line(G, h)
By line_intersection_definition on A, Line(A, center(c)), f we get A == line_intersection(f, Line(A, center(c)))
By line_intersection_definition on C, Line(A, C), Line(C, center(c)) we get C == line_intersection(Line(A, C), Line(C, center(c)))
By line_intersection_definition on D, Line(D, G), Line(B, D) we get D == line_intersection(Line(B, D), Line(D, G))
By median_definition on D, C, A, Line(B, D) we get Line(B, D) == median(D, A, C)
By line_intersection_definition on E, Line(E, H), Line(E, center(d)) we get E == line_intersection(Line(E, H), Line(E, center(d)))
By line_intersection_definition on center(d), Line(C, center(d)), Line(E, center(d)) we get center(d) == line_intersection(Line(C, center(d)), Line(E, center(d)))
By line_intersection_definition on D, i, Line(D, center(c)) we get D == line_intersection(i, Line(D, center(c)))
By median_definition on B, C, A, Line(B, D) we get Line(B, D) == median(B, A, C)
By line_intersection_definition on C, Line(C, center(c)), Line(C, H) we get C == line_intersection(Line(C, H), Line(C, center(c)))
By line_intersection_definition on center(d), Line(C, center(d)), Line(H, center(d)) we get center(d) == line_intersection(Line(C, center(d)), Line(H, center(d)))
By perpendicular_line_definition on C, Line(C, G), f we get Line(C, G) == perpendicular_line(C, f)
By line_intersection_definition on H, Line(E, H), Line(H, center(c)) we get H == line_intersection(Line(E, H), Line(H, center(c)))
By line_intersection_definition on H, Line(H, center(d)), Line(C, H) we get H == line_intersection(Line(C, H), Line(H, center(d)))
By line_intersection_definition on D, Line(B, D), h we get D == line_intersection(h, Line(B, D))
By line_intersection_definition on C, g, Line(C, center(d)) we get C == line_intersection(g, Line(C, center(d)))
By line_intersection_definition on E, Line(B, D), Line(E, F) we get E == line_intersection(Line(B, D), Line(E, F))
By line_intersection_definition on C, Line(C, center(c)), Line(C, G) we get C == line_intersection(Line(C, G), Line(C, center(c)))
By median_definition on B, C, A, Line(B, E) we get Line(B, E) == median(B, A, C)
By line_intersection_definition on H, Line(A, H), Line(H, center(d)) we get H == line_intersection(Line(A, H), Line(H, center(d)))
By line_intersection_definition on C, Line(C, center(c)), Line(C, center(d)) we get C == line_intersection(Line(C, center(c)), Line(C, center(d)))
By line_intersection_definition on A, i, Line(A, center(c)) we get A == line_intersection(i, Line(A, center(c)))
By line_intersection_definition on D, Line(D, G), Line(D, E) we get D == line_intersection(Line(D, E), Line(D, G))
By line_intersection_definition on H, Line(F, H), Line(H, center(d)) we get H == line_intersection(Line(F, H), Line(H, center(d)))
By median_definition on C, D, B, Line(A, C) we get Line(A, C) == median(C, B, D)
By line_intersection_definition on center(c), Line(A, center(c)), Line(G, center(c)) we get center(c) == line_intersection(Line(A, center(c)), Line(G, center(c)))
By line_intersection_definition on D, Line(D, center(c)), h we get D == line_intersection(h, Line(D, center(c)))
By line_intersection_definition on H, Line(D, H), Line(H, center(c)) we get H == line_intersection(Line(D, H), Line(H, center(c)))
By line_intersection_definition on F, Line(F, H), Line(F, center(d)) we get F == line_intersection(Line(F, H), Line(F, center(d)))
By line_intersection_definition on B, f, Line(B, D) we get B == line_intersection(f, Line(B, D))
By line_intersection_definition on C, Line(C, G), Line(C, center(d)) we get C == line_intersection(Line(C, G), Line(C, center(d)))
By line_intersection_definition on center(c), Line(A, center(c)), Line(C, center(c)) we get center(c) == line_intersection(Line(A, center(c)), Line(C, center(c)))
By line_intersection_definition on H, Line(D, H), Line(H, center(d)) we get H == line_intersection(Line(D, H), Line(H, center(d)))
By line_intersection_definition on C, h, Line(C, center(d)) we get C == line_intersection(h, Line(C, center(d)))
By line_intersection_definition on E, Line(A, C), Line(B, E) we get E == line_intersection(Line(A, C), Line(B, E))
By perpendicular_line_definition on C, h, Line(C, G) we get h == perpendicular_line(C, Line(C, G))
By median_definition on center(d), D, B, Line(E, center(d)) we get Line(E, center(d)) == median(center(d), B, D)
By line_intersection_definition on E, Line(E, center(d)), Line(B, E) we get E == line_intersection(Line(B, E), Line(E, center(d)))
By line_intersection_definition on center(c), Line(A, center(c)), Line(D, center(c)) we get center(c) == line_intersection(Line(A, center(c)), Line(D, center(c)))
By line_intersection_definition on F, Line(E, F), Line(F, center(d)) we get F == line_intersection(Line(E, F), Line(F, center(d)))
By line_intersection_definition on B, Line(B, E), g we get B == line_intersection(g, Line(B, E))
By line_intersection_definition on F, g, Line(F, center(d)) we get F == line_intersection(g, Line(F, center(d)))
By line_intersection_definition on G, Line(G, center(c)), j we get G == line_intersection(j, Line(G, center(c)))
By line_intersection_definition on center(d), Line(F, center(d)), Line(H, center(d)) we get center(d) == line_intersection(Line(F, center(d)), Line(H, center(d)))
By median_definition on F, D, B, Line(E, F) we get Line(E, F) == median(F, B, D)
By perpendicular_line_definition on H, Line(D, H), Line(G, H) we get Line(D, H) == perpendicular_line(H, Line(G, H))
By line_intersection_definition on B, Line(B, E), f we get B == line_intersection(f, Line(B, E))
By perpendicular_line_definition on G, Line(C, G), f we get Line(C, G) == perpendicular_line(G, f)
By line_intersection_definition on E, Line(E, F), Line(B, E) we get E == line_intersection(Line(B, E), Line(E, F))
By perpendicular_line_definition on B, f, Line(C, G) we get f == perpendicular_line(B, Line(C, G))
By perpendicular_line_definition on H, Line(G, H), Line(D, H) we get Line(G, H) == perpendicular_line(H, Line(D, H))
By line_intersection_definition on D, Line(D, E), Line(D, center(c)) we get D == line_intersection(Line(D, E), Line(D, center(c)))
By line_intersection_definition on B, g, Line(B, D) we get B == line_intersection(g, Line(B, D))
By line_intersection_definition on center(c), Line(H, center(c)), Line(C, center(c)) we get center(c) == line_intersection(Line(C, center(c)), Line(H, center(c)))
By line_intersection_definition on H, Line(H, center(c)), Line(H, center(d)) we get H == line_intersection(Line(H, center(c)), Line(H, center(d)))
By median_definition on center(d), C, A, Line(E, center(d)) we get Line(E, center(d)) == median(center(d), A, C)
By line_intersection_definition on A, j, Line(A, center(c)) we get A == line_intersection(j, Line(A, center(c)))
By line_intersection_definition on G, Line(G, H), Line(G, center(c)) we get G == line_intersection(Line(G, H), Line(G, center(c)))
By line_intersection_definition on center(d), Line(F, center(d)), Line(C, center(d)) we get center(d) == line_intersection(Line(C, center(d)), Line(F, center(d)))
By line_intersection_definition on H, Line(G, H), Line(H, center(c)) we get H == line_intersection(Line(G, H), Line(H, center(c)))
By perpendicular_line_definition on G, Line(G, H), Line(D, H) we get Line(G, H) == perpendicular_line(G, Line(D, H))
By line_intersection_definition on E, Line(B, D), Line(E, center(d)) we get E == line_intersection(Line(B, D), Line(E, center(d)))
By line_intersection_definition on H, Line(H, center(d)), Line(G, H) we get H == line_intersection(Line(G, H), Line(H, center(d)))
By line_intersection_definition on H, Line(H, center(d)), Line(E, H) we get H == line_intersection(Line(E, H), Line(H, center(d)))
By line_intersection_definition on C, Line(C, center(d)), Line(A, C) we get C == line_intersection(Line(A, C), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(B, D), Line(E, F), Line(A, C) we get concurrent(Line(A, C), Line(B, D), Line(E, F))
By line_intersection_definition on C, Line(C, H), Line(C, center(d)) we get C == line_intersection(Line(C, H), Line(C, center(d)))
By line_intersection_definition on C, Line(C, center(c)), g we get C == line_intersection(g, Line(C, center(c)))
By line_intersection_definition on D, Line(B, D), Line(D, center(c)) we get D == line_intersection(Line(B, D), Line(D, center(c)))
By line_intersection_definition on center(c), Line(H, center(c)), Line(G, center(c)) we get center(c) == line_intersection(Line(G, center(c)), Line(H, center(c)))
By line_intersection_definition on D, Line(D, center(c)), Line(D, H) we get D == line_intersection(Line(D, H), Line(D, center(c)))
By line_intersection_definition on center(c), Line(A, center(c)), Line(H, center(c)) we get center(c) == line_intersection(Line(A, center(c)), Line(H, center(c)))
By line_intersection_definition on C, h, Line(C, center(c)) we get C == line_intersection(h, Line(C, center(c)))
By median_definition on A, B, D, Line(A, C) we get Line(A, C) == median(A, B, D)
By perpendicular_line_definition on A, f, Line(C, G) we get f == perpendicular_line(A, Line(C, G))
By line_intersection_definition on A, Line(A, center(c)), Line(A, H) we get A == line_intersection(Line(A, H), Line(A, center(c)))
By line_intersection_definition on D, i, Line(B, D) we get D == line_intersection(i, Line(B, D))
By perpendicular_line_definition on D, h, Line(C, G) we get h == perpendicular_line(D, Line(C, G))
By line_intersection_definition on H, Line(F, H), Line(H, center(c)) we get H == line_intersection(Line(F, H), Line(H, center(c)))
By line_intersection_definition on E, Line(E, F), Line(D, E) we get E == line_intersection(Line(D, E), Line(E, F))
By line_intersection_definition on center(d), Line(E, center(d)), Line(H, center(d)) we get center(d) == line_intersection(Line(E, center(d)), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(E, F), Line(B, D), Line(A, C) we get concurrent(Line(A, C), Line(B, D), Line(E, F))
By line_intersection_definition on D, Line(D, E), i we get D == line_intersection(i, Line(D, E))
By perpendicular_line_definition on D, Line(D, H), Line(G, H) we get Line(D, H) == perpendicular_line(D, Line(G, H))
By line_intersection_definition on center(d), Line(E, center(d)), Line(F, center(d)) we get center(d) == line_intersection(Line(E, center(d)), Line(F, center(d)))
By line_intersection_definition on E, Line(A, C), Line(D, E) we get E == line_intersection(Line(A, C), Line(D, E))
By perpendicular_line_definition on C, Line(C, G), h we get Line(C, G) == perpendicular_line(C, h)
By same_angle_converse_v1 on center(c), D, G, A we get collinear(D, G, center(c))
By same_angle_v3 on E, B, D, F we get angle(B, E, F) == angle(D, E, F) + 180 mod 360
By perpendicular_direction_conditions_v0 on H, G, E, H we get perpendicular(Line(E, H), Line(G, H))
By same_angle_converse_v0 on H, D, E, C we get collinear(D, E, H)
By same_angle_v1 on D, B, E, A we get angle(B, D, A) == angle(E, D, A) mod 360
By same_angle_v0 on D, B, E, C we get angle(B, D, C) == angle(E, D, C) mod 360
By same_angle_v1 on B, E, D, C we get angle(D, B, C) == angle(E, B, C) mod 360
By same_angle_v0 on D, E, B, G we get angle(B, D, G) == angle(E, D, G) mod 360
By same_angle_v0 on B, C, F, D we get angle(C, B, D) == angle(F, B, D) mod 360
By between_imply_not_between on B, E, D we get collinear_and_not_between(D, B, E)
By same_angle_v0 on B, C, F, E we get angle(C, B, E) == angle(F, B, E) mod 360
By same_angle_v1 on B, E, D, F we get angle(D, B, F) == angle(E, B, F) mod 360
By same_angle_v0 on B, D, E, A we get angle(D, B, A) == angle(E, B, A) mod 360
By between_imply_not_between on D, E, B we get collinear_and_not_between(B, D, E)
By projection_definition on G, C, h we get C == projection(G, h)
By projection_definition on D, C, Line(C, G) we get C == projection(D, Line(C, G))
By projection_definition on D, H, Line(G, H) we get H == projection(D, Line(G, H))
By projection_definition on G, H, Line(D, H) we get H == projection(G, Line(D, H))
By reverse_direction on E, D we get 180 == direction(E, D) - direction(D, E) mod 360
By parallel_line_angles_reverse_v0 on A, D, B, F we get angle(A, D, B) == angle(F, B, D) mod 360
By collinear_definition on E, B, D we get B in Line(D, E), D in Line(B, E), Line(B, E) == Line(D, E), 0 == 2 * angle(B, E, D) mod 360
By collinear_definition on B, E, D we get E in Line(B, D), D in Line(B, E), Line(B, D) == Line(B, E), 0 == 2 * angle(E, B, D) mod 360
By between_implies_angles on D, E, B we get 180 == angle(D, E, B) mod 360, 0 == angle(E, B, D) mod 360, 0 == angle(B, D, E) mod 360
By reverse_direction on E, B we get 180 == direction(E, B) - direction(B, E) mod 360
By collinear_definition on E, D, B we get D in Line(B, E), B in Line(D, E), Line(B, E) == Line(D, E), 0 == 2 * angle(D, E, B) mod 360
By collinear_definition on B, D, E we get D in Line(B, E), E in Line(B, D), Line(B, D) == Line(B, E), 0 == 2 * angle(D, B, E) mod 360
By collinear_definition on D, B, E we get B in Line(D, E), E in Line(B, D), Line(B, D) == Line(D, E), 0 == 2 * angle(B, D, E) mod 360
By reverse_direction on B, E we get 180 == direction(B, E) - direction(E, B) mod 360
By reverse_direction on D, E we get 180 == direction(D, E) - direction(E, D) mod 360
By between_implies_angles on B, E, D we get 180 == angle(B, E, D) mod 360, 0 == angle(E, D, B) mod 360, 0 == angle(D, B, E) mod 360
By collinear_definition on D, E, B we get E in Line(B, D), B in Line(D, E), Line(B, D) == Line(D, E), 0 == 2 * angle(E, D, B) mod 360
By anti_similar_triangle_basic_properties on F, C, E, C, F, E we get angle(F, C, E) == 0 - angle(C, F, E) mod 360, angle(C, E, F) == 0 - angle(F, E, C) mod 360, angle(E, F, C) == 0 - angle(E, C, F) mod 360, log(distance(C, F)) + log(distance(C, E)) == log(distance(C, F)) + log(distance(E, F)), log(distance(C, E)) + log(distance(C, E)) == log(distance(E, F)) + log(distance(E, F)), log(distance(C, E)) + log(distance(C, F)) == log(distance(E, F)) + log(distance(C, F))
By external_angle_bisector_definition_v0_r on C, E, F, H we get Line(E, H) == external_angle_bisector(C, H, F)
By anti_similar_triangle_basic_properties on E, F, A, E, A, F we get angle(E, F, A) == 0 - angle(E, A, F) mod 360, angle(F, A, E) == 0 - angle(A, F, E) mod 360, angle(A, E, F) == 0 - angle(F, E, A) mod 360, log(distance(A, E)) + log(distance(A, F)) == log(distance(E, F)) + log(distance(A, F)), log(distance(A, F)) + log(distance(A, E)) == log(distance(A, F)) + log(distance(E, F)), log(distance(A, E)) + log(distance(A, E)) == log(distance(E, F)) + log(distance(E, F))
By similar_triangle_basic_properties on C, D, B, A, B, D we get angle(A, B, D) == angle(C, D, B) mod 360, angle(B, D, A) == angle(D, B, C) mod 360, angle(B, C, D) == angle(D, A, B) mod 360, log(distance(A, B)) + log(distance(B, D)) == log(distance(C, D)) + log(distance(B, D)), log(distance(B, D)) + log(distance(A, D)) == log(distance(B, D)) + log(distance(B, C)), log(distance(A, D)) + log(distance(C, D)) == log(distance(B, C)) + log(distance(A, B))
By reverse_direction on center(d), H we get 180 == direction(center(d), H) - direction(H, center(d)) mod 360
By perpendicular_lines_draw_intersection on f, Line(C, G) we get exists(line_intersection(f, Line(C, G)))
By reverse_direction on center(c), H we get 180 == direction(center(c), H) - direction(H, center(c)) mod 360
By log_of_2_times_distance on A, C, E, F we get log(distance(A, C)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(E, F))
By reverse_direction on center(d), F we get 180 == direction(center(d), F) - direction(F, center(d)) mod 360
By internal_angle_bisector_definition_v0_r on C, E, F, center(d) we get Line(E, center(d)) == internal_angle_bisector(C, center(d), F)
By internal_angle_bisector_definition_v0_r on D, G, D, center(c) we get Line(G, center(c)) == internal_angle_bisector(D, center(c), D)
By reverse_direction on center(c), A we get 180 == direction(center(c), A) - direction(A, center(c)) mod 360
By isosceles_triangle_midpoint on center(c), A, C we get midpoint(A, C) in median(center(c), A, C)
By reverse_direction on center(d), E we get 180 == direction(center(d), E) - direction(E, center(d)) mod 360
By reverse_direction on center(c), C we get 180 == direction(center(c), C) - direction(C, center(c)) mod 360
By internal_angle_bisector_definition_v0_r on G, D, G, center(c) we get Line(D, center(c)) == internal_angle_bisector(G, center(c), G)
By reverse_direction on center(c), G we get 180 == direction(center(c), G) - direction(G, center(c)) mod 360
By reverse_direction on center(d), C we get 180 == direction(center(d), C) - direction(C, center(d)) mod 360
By reverse_direction on center(c), D we get 180 == direction(center(c), D) - direction(D, center(c)) mod 360
By sas_anti_congruence on H, center(c), A, A, center(c), H we get anti_congruent_triangles(A, H, center(c), H, A, center(c))
By isosceles_triangle_properties on center(d), E, C we get distance(C, center(d)) == distance(E, center(d)), angle(E, C, center(d)) == angle(center(d), E, C) mod 360
By sas_anti_congruence on A, center(c), D, D, center(c), A we get anti_congruent_triangles(A, D, center(c), D, A, center(c))
By isosceles_triangle_properties on center(d), C, E we get distance(C, center(d)) == distance(E, center(d)), angle(C, E, center(d)) == angle(center(d), C, E) mod 360
By sas_anti_congruence on G, center(c), C, C, center(c), G we get anti_congruent_triangles(C, G, center(c), G, C, center(c))
By isosceles_triangle_properties on center(c), C, H we get distance(C, center(c)) == distance(H, center(c)), angle(C, H, center(c)) == angle(center(c), C, H) mod 360
By altitude_definition on D, H, G, Line(D, H) we get Line(D, H) == altitude(D, G, H)
By sas_anti_congruence on E, center(d), H, H, center(d), E we get anti_congruent_triangles(E, H, center(d), H, E, center(d))
By sas_anti_congruence on H, center(c), D, D, center(c), H we get anti_congruent_triangles(D, H, center(c), H, D, center(c))
By sas_anti_congruence on C, center(c), A, A, center(c), C we get anti_congruent_triangles(A, C, center(c), C, A, center(c))
By isosceles_triangle_properties on center(c), D, H we get distance(D, center(c)) == distance(H, center(c)), angle(D, H, center(c)) == angle(center(c), D, H) mod 360
By altitude_definition on D, G, C, h we get h == altitude(D, C, G)
By log_of_2_times_distance on B, D, E, D we get log(distance(B, D)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(D, E))
By similar_triangle_basic_properties on B, E, A, D, E, C we get angle(B, E, A) == angle(D, E, C) mod 360, angle(E, A, B) == angle(E, C, D) mod 360, angle(A, B, E) == angle(C, D, E) mod 360, log(distance(B, E)) + log(distance(C, E)) == log(distance(D, E)) + log(distance(A, E)), log(distance(A, E)) + log(distance(C, D)) == log(distance(C, E)) + log(distance(A, B)), log(distance(A, B)) + log(distance(D, E)) == log(distance(C, D)) + log(distance(B, E))
By sas_anti_congruence on G, center(c), A, A, center(c), G we get anti_congruent_triangles(A, G, center(c), G, A, center(c))
By similar_triangle_basic_properties on C, E, D, A, E, B we get angle(A, E, B) == angle(C, E, D) mod 360, angle(E, B, A) == angle(E, D, C) mod 360, angle(B, A, E) == angle(D, C, E) mod 360, log(distance(A, E)) + log(distance(D, E)) == log(distance(C, E)) + log(distance(B, E)), log(distance(B, E)) + log(distance(C, D)) == log(distance(D, E)) + log(distance(A, B)), log(distance(A, B)) + log(distance(C, E)) == log(distance(C, D)) + log(distance(A, E))
By sas_anti_congruence on F, center(d), C, C, center(d), F we get anti_congruent_triangles(C, F, center(d), F, C, center(d))
By similar_triangle_basic_properties on B, E, C, D, E, A we get angle(B, E, C) == angle(D, E, A) mod 360, angle(E, A, D) == angle(E, C, B) mod 360, angle(A, D, E) == angle(C, B, E) mod 360, log(distance(B, E)) + log(distance(A, E)) == log(distance(D, E)) + log(distance(C, E)), log(distance(A, E)) + log(distance(B, C)) == log(distance(C, E)) + log(distance(A, D)), log(distance(A, D)) + log(distance(B, E)) == log(distance(B, C)) + log(distance(D, E))
By altitude_definition on A, G, C, f we get f == altitude(A, C, G)
By altitude_definition on B, G, C, f we get f == altitude(B, C, G)
By sas_anti_congruence on A, center(c), C, C, center(c), A we get anti_congruent_triangles(A, C, center(c), C, A, center(c))
By sas_anti_congruence on H, center(d), C, C, center(d), H we get anti_congruent_triangles(C, H, center(d), H, C, center(d))
By altitude_definition on G, B, A, Line(C, G) we get Line(C, G) == altitude(G, A, B)
By isosceles_triangle_properties on center(d), C, F we get distance(C, center(d)) == distance(F, center(d)), angle(C, F, center(d)) == angle(center(d), C, F) mod 360
By sas_anti_congruence on C, center(c), H, H, center(c), C we get anti_congruent_triangles(C, H, center(c), H, C, center(c))
By sas_anti_congruence on H, center(d), E, E, center(d), H we get anti_congruent_triangles(E, H, center(d), H, E, center(d))
By sas_similarity on G, F, B, C, F, A we get similar_triangles(A, C, F, B, G, F)
By sas_anti_congruence on H, center(d), F, F, center(d), H we get anti_congruent_triangles(F, H, center(d), H, F, center(d))
By sas_anti_congruence on C, center(d), H, H, center(d), C we get anti_congruent_triangles(C, H, center(d), H, C, center(d))
By isosceles_triangle_properties on center(c), H, A we get distance(A, center(c)) == distance(H, center(c)), angle(H, A, center(c)) == angle(center(c), H, A) mod 360
By sas_anti_similarity on G, C, D, G, F, B we get anti_similar_triangles(B, F, G, D, C, G)
By sas_anti_congruence on C, center(d), E, E, center(d), C we get anti_congruent_triangles(C, E, center(d), E, C, center(d))
By isosceles_triangle_properties on center(c), D, A we get distance(A, center(c)) == distance(D, center(c)), angle(D, A, center(c)) == angle(center(c), D, A) mod 360
By altitude_definition on G, D, H, Line(G, H) we get Line(G, H) == altitude(G, D, H)
By sas_anti_congruence on E, center(d), F, F, center(d), E we get anti_congruent_triangles(E, F, center(d), F, E, center(d))
By sas_anti_congruence on H, center(c), C, C, center(c), H we get anti_congruent_triangles(C, H, center(c), H, C, center(c))
By isosceles_triangle_properties on center(c), A, D we get distance(A, center(c)) == distance(D, center(c)), angle(A, D, center(c)) == angle(center(c), A, D) mod 360
By sas_anti_congruence on H, center(c), G, G, center(c), H we get anti_congruent_triangles(G, H, center(c), H, G, center(c))
By sas_similarity on B, F, G, A, F, C we get similar_triangles(A, C, F, B, G, F)
By isosceles_triangle_properties on center(c), H, C we get distance(C, center(c)) == distance(H, center(c)), angle(H, C, center(c)) == angle(center(c), H, C) mod 360
By isosceles_triangle_properties on center(d), C, H we get distance(C, center(d)) == distance(H, center(d)), angle(C, H, center(d)) == angle(center(d), C, H) mod 360
By sas_anti_similarity on G, F, B, G, C, D we get anti_similar_triangles(B, F, G, D, C, G)
By isosceles_triangle_properties on center(c), G, C we get distance(C, center(c)) == distance(G, center(c)), angle(G, C, center(c)) == angle(center(c), G, C) mod 360
By sas_similarity on C, F, A, G, F, B we get similar_triangles(A, C, F, B, G, F)
By sas_anti_congruence on A, center(c), G, G, center(c), A we get anti_congruent_triangles(A, G, center(c), G, A, center(c))
By isosceles_triangle_properties on center(d), F, H we get distance(F, center(d)) == distance(H, center(d)), angle(F, H, center(d)) == angle(center(d), F, H) mod 360
By isosceles_triangle_properties on center(d), F, E we get distance(E, center(d)) == distance(F, center(d)), angle(F, E, center(d)) == angle(center(d), F, E) mod 360
By sas_similarity on A, F, C, B, F, G we get similar_triangles(A, C, F, B, G, F)
By sas_anti_similarity on D, C, G, B, F, G we get anti_similar_triangles(B, F, G, D, C, G)
By sas_anti_congruence on F, center(d), H, H, center(d), F we get anti_congruent_triangles(F, H, center(d), H, F, center(d))
By isosceles_triangle_properties on center(d), H, C we get distance(C, center(d)) == distance(H, center(d)), angle(H, C, center(d)) == angle(center(d), H, C) mod 360
By isosceles_triangle_properties on center(c), A, G we get distance(A, center(c)) == distance(G, center(c)), angle(A, G, center(c)) == angle(center(c), A, G) mod 360
By sas_anti_congruence on C, center(c), G, G, center(c), C we get anti_congruent_triangles(C, G, center(c), G, C, center(c))
By sas_anti_congruence on C, center(c), D, D, center(c), C we get anti_congruent_triangles(C, D, center(c), D, C, center(c))
By isosceles_triangle_properties on center(c), A, H we get distance(A, center(c)) == distance(H, center(c)), angle(A, H, center(c)) == angle(center(c), A, H) mod 360
By sas_anti_congruence on D, center(c), A, A, center(c), D we get anti_congruent_triangles(A, D, center(c), D, A, center(c))
By isosceles_triangle_properties on center(d), H, F we get distance(F, center(d)) == distance(H, center(d)), angle(H, F, center(d)) == angle(center(d), H, F) mod 360
By altitude_definition on G, C, D, Line(C, G) we get Line(C, G) == altitude(G, C, D)
By isosceles_triangle_properties on center(d), H, E we get distance(E, center(d)) == distance(H, center(d)), angle(H, E, center(d)) == angle(center(d), H, E) mod 360
By isosceles_triangle_properties on center(c), H, D we get distance(D, center(c)) == distance(H, center(c)), angle(H, D, center(c)) == angle(center(c), H, D) mod 360
By isosceles_triangle_properties on center(c), G, H we get distance(G, center(c)) == distance(H, center(c)), angle(G, H, center(c)) == angle(center(c), G, H) mod 360
By sas_anti_congruence on G, center(c), H, H, center(c), G we get anti_congruent_triangles(G, H, center(c), H, G, center(c))
By sas_anti_congruence on A, center(c), H, H, center(c), A we get anti_congruent_triangles(A, H, center(c), H, A, center(c))
By isosceles_triangle_properties on center(c), C, G we get distance(C, center(c)) == distance(G, center(c)), angle(C, G, center(c)) == angle(center(c), C, G) mod 360
By sas_anti_congruence on F, center(d), E, E, center(d), F we get anti_congruent_triangles(E, F, center(d), F, E, center(d))
By isosceles_triangle_properties on center(d), E, F we get distance(E, center(d)) == distance(F, center(d)), angle(E, F, center(d)) == angle(center(d), E, F) mod 360
By sas_anti_similarity on B, F, G, D, C, G we get anti_similar_triangles(B, F, G, D, C, G)
By isosceles_triangle_properties on center(c), C, A we get distance(A, center(c)) == distance(C, center(c)), angle(C, A, center(c)) == angle(center(c), C, A) mod 360
By sas_anti_congruence on E, center(d), C, C, center(d), E we get anti_congruent_triangles(C, E, center(d), E, C, center(d))
By sas_anti_congruence on D, center(c), C, C, center(c), D we get anti_congruent_triangles(C, D, center(c), D, C, center(c))
By isosceles_triangle_properties on center(c), C, D we get distance(C, center(c)) == distance(D, center(c)), angle(C, D, center(c)) == angle(center(c), C, D) mod 360
By altitude_definition on C, A, B, Line(C, G) we get Line(C, G) == altitude(C, A, B)
By isosceles_triangle_properties on center(c), A, C we get distance(A, center(c)) == distance(C, center(c)), angle(A, C, center(c)) == angle(center(c), A, C) mod 360
By isosceles_triangle_properties on center(c), D, C we get distance(C, center(c)) == distance(D, center(c)), angle(D, C, center(c)) == angle(center(c), D, C) mod 360
By isosceles_triangle_properties on center(d), F, C we get distance(C, center(d)) == distance(F, center(d)), angle(F, C, center(d)) == angle(center(d), F, C) mod 360
By isosceles_triangle_properties on center(c), G, A we get distance(A, center(c)) == distance(G, center(c)), angle(G, A, center(c)) == angle(center(c), G, A) mod 360
By sas_anti_congruence on C, center(d), F, F, center(d), C we get anti_congruent_triangles(C, F, center(d), F, C, center(d))
By isosceles_triangle_properties on center(d), E, H we get distance(E, center(d)) == distance(H, center(d)), angle(E, H, center(d)) == angle(center(d), E, H) mod 360
By sas_anti_congruence on D, center(c), H, H, center(c), D we get anti_congruent_triangles(D, H, center(c), H, D, center(c))
By isosceles_triangle_properties on center(c), H, G we get distance(G, center(c)) == distance(H, center(c)), angle(H, G, center(c)) == angle(center(c), H, G) mod 360
By log_of_2_times_distance on D, B, B, E we get log(distance(B, D)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(B, E))
By sas_congruence on C, center(d), E, E, center(d), F we get congruent_triangles(C, E, center(d), E, F, center(d))
By perpendicular_bisector_sufficient_conditions on C, F, E, center(d) we get perpendicular_bisector(C, F) == Line(E, center(d))
By sas_congruence on F, center(d), E, E, center(d), C we get congruent_triangles(C, E, center(d), E, F, center(d))
By sas_anti_congruence on E, center(d), F, E, center(d), C we get anti_congruent_triangles(C, E, center(d), F, E, center(d))
By sas_anti_congruence on E, center(d), C, E, center(d), F we get anti_congruent_triangles(C, E, center(d), F, E, center(d))
By sas_congruence on E, center(d), F, C, center(d), E we get congruent_triangles(C, E, center(d), E, F, center(d))
By sas_congruence on E, center(d), C, F, center(d), E we get congruent_triangles(C, E, center(d), E, F, center(d))
By sas_anti_congruence on F, center(d), E, C, center(d), E we get anti_congruent_triangles(C, E, center(d), F, E, center(d))
By sas_anti_congruence on C, center(d), E, F, center(d), E we get anti_congruent_triangles(C, E, center(d), F, E, center(d))
By concurrent_sufficient_conditions on Line(A, center(c)), i, Line(A, H) we get concurrent(i, Line(A, H), Line(A, center(c)))
By concurrent_sufficient_conditions on j, g, Line(F, center(d)) we get concurrent(g, j, Line(F, center(d)))
By concurrent_sufficient_conditions on Line(C, G), g, Line(C, center(d)) we get concurrent(g, Line(C, G), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(C, center(c)), Line(A, C), g we get concurrent(g, Line(A, C), Line(C, center(c)))
By concurrent_sufficient_conditions on perpendicular_bisector(C, F), Line(B, D), Line(A, C) we get concurrent(Line(A, C), Line(B, D), perpendicular_bisector(C, F))
By concurrent_sufficient_conditions on Line(C, H), Line(C, center(c)), g we get concurrent(g, Line(C, H), Line(C, center(c)))
By concurrent_sufficient_conditions on Line(A, center(c)), f, i we get concurrent(f, i, Line(A, center(c)))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(C, center(c)), Line(G, center(c)) we get concurrent(Line(A, center(c)), Line(C, center(c)), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(A, H), Line(D, H), Line(H, center(c)) we get concurrent(Line(A, H), Line(D, H), Line(H, center(c)))
By concurrent_sufficient_conditions on h, Line(C, center(d)), Line(A, C) we get concurrent(h, Line(A, C), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(C, H), Line(C, center(d)), g we get concurrent(g, Line(C, H), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(A, C), Line(A, H), Line(A, center(c)) we get concurrent(Line(A, C), Line(A, H), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(C, center(c)), g, Line(A, C) we get concurrent(g, Line(A, C), Line(C, center(c)))
By concurrent_sufficient_conditions on Line(E, H), Line(H, center(c)), Line(H, center(d)) we get concurrent(Line(E, H), Line(H, center(c)), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(C, H), Line(C, center(c)), Line(A, C) we get concurrent(Line(A, C), Line(C, H), Line(C, center(c)))
By concurrent_sufficient_conditions on Line(F, H), g, Line(F, center(d)) we get concurrent(g, Line(F, H), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(A, center(c)), j, f we get concurrent(f, j, Line(A, center(c)))
By concurrent_sufficient_conditions on Line(C, H), Line(H, center(c)), Line(A, H) we get concurrent(Line(A, H), Line(C, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(C, center(d)), g, h we get concurrent(g, h, Line(C, center(d)))
By concurrent_sufficient_conditions on Line(C, G), j, Line(G, center(c)) we get concurrent(j, Line(C, G), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(H, center(d)), Line(H, center(c)), Line(C, H) we get concurrent(Line(C, H), Line(H, center(c)), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(A, center(c)), Line(C, center(c)) we get concurrent(Line(A, center(c)), Line(C, center(c)), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(H, center(d)), Line(A, H), Line(C, H) we get concurrent(Line(A, H), Line(C, H), Line(H, center(d)))
By concurrent_sufficient_conditions on g, Line(C, center(d)), h we get concurrent(g, h, Line(C, center(d)))
By concurrent_sufficient_conditions on Line(E, F), perpendicular_bisector(C, F), Line(E, H) we get concurrent(Line(E, F), Line(E, H), perpendicular_bisector(C, F))
By concurrent_sufficient_conditions on Line(F, H), Line(A, H), Line(H, center(c)) we get concurrent(Line(A, H), Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(D, center(c)), Line(H, center(c)) we get concurrent(Line(A, center(c)), Line(D, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(C, H), Line(D, H), Line(H, center(c)) we get concurrent(Line(C, H), Line(D, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(B, D), f, g we get concurrent(f, g, Line(B, D))
By concurrent_sufficient_conditions on Line(A, H), Line(E, H), Line(H, center(c)) we get concurrent(Line(A, H), Line(E, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(C, center(d)), Line(C, center(c)), Line(C, G) we get concurrent(Line(C, G), Line(C, center(c)), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(C, center(c)), Line(A, C), Line(C, G) we get concurrent(Line(A, C), Line(C, G), Line(C, center(c)))
By concurrent_sufficient_conditions on Line(C, H), h, Line(C, center(d)) we get concurrent(h, Line(C, H), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(D, center(c)), Line(C, center(c)) we get concurrent(Line(A, center(c)), Line(C, center(c)), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(B, D), perpendicular_bisector(C, F), Line(A, C) we get concurrent(Line(A, C), Line(B, D), perpendicular_bisector(C, F))
By concurrent_sufficient_conditions on Line(A, H), Line(D, H), Line(H, center(d)) we get concurrent(Line(A, H), Line(D, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(F, H), g we get concurrent(g, Line(F, H), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(A, C), j, Line(A, center(c)) we get concurrent(j, Line(A, C), Line(A, center(c)))
By concurrent_sufficient_conditions on j, f, Line(A, center(c)) we get concurrent(f, j, Line(A, center(c)))
By concurrent_sufficient_conditions on i, f, Line(A, center(c)) we get concurrent(f, i, Line(A, center(c)))
By concurrent_sufficient_conditions on Line(C, center(d)), Line(H, center(d)), Line(F, center(d)) we get concurrent(Line(C, center(d)), Line(F, center(d)), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(H, center(d)), Line(H, center(c)), Line(A, H) we get concurrent(Line(A, H), Line(H, center(c)), Line(H, center(d)))
By concurrent_sufficient_conditions on h, Line(C, H), Line(C, center(c)) we get concurrent(h, Line(C, H), Line(C, center(c)))
By concurrent_sufficient_conditions on Line(C, H), Line(C, G), Line(C, center(c)) we get concurrent(Line(C, G), Line(C, H), Line(C, center(c)))
By concurrent_sufficient_conditions on Line(D, H), Line(H, center(d)), Line(C, H) we get concurrent(Line(C, H), Line(D, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(E, F), Line(B, D), perpendicular_bisector(C, F) we get concurrent(Line(B, D), Line(E, F), perpendicular_bisector(C, F))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(G, H), Line(H, center(d)) we get concurrent(Line(G, H), Line(H, center(c)), Line(H, center(d)))
By concurrent_sufficient_conditions on j, Line(A, H), Line(A, center(c)) we get concurrent(j, Line(A, H), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(G, center(c)), j, Line(G, H) we get concurrent(j, Line(G, H), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(A, C), Line(C, center(c)), Line(C, center(d)) we get concurrent(Line(A, C), Line(C, center(c)), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(C, center(c)), Line(C, G), h we get concurrent(h, Line(C, G), Line(C, center(c)))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(C, center(c)), Line(A, center(c)) we get concurrent(Line(A, center(c)), Line(C, center(c)), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(B, D), Line(A, C), perpendicular_bisector(C, F) we get concurrent(Line(A, C), Line(B, D), perpendicular_bisector(C, F))
By concurrent_sufficient_conditions on Line(H, center(d)), Line(F, H), Line(C, H) we get concurrent(Line(C, H), Line(F, H), Line(H, center(d)))
By concurrent_sufficient_conditions on h, Line(A, C), Line(C, center(d)) we get concurrent(h, Line(A, C), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(C, center(c)), h, Line(C, center(d)) we get concurrent(h, Line(C, center(c)), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(A, H), Line(A, C), Line(A, center(c)) we get concurrent(Line(A, C), Line(A, H), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(H, center(d)), perpendicular_bisector(C, F), Line(F, center(d)) we get concurrent(perpendicular_bisector(C, F), Line(F, center(d)), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(D, H), Line(F, H), Line(H, center(c)) we get concurrent(Line(D, H), Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(F, H), Line(E, F), Line(F, center(d)) we get concurrent(Line(E, F), Line(F, H), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(B, D), perpendicular_bisector(C, F), Line(E, F) we get concurrent(Line(B, D), Line(E, F), perpendicular_bisector(C, F))
By concurrent_sufficient_conditions on Line(E, H), Line(H, center(c)), Line(A, H) we get concurrent(Line(A, H), Line(E, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(H, center(d)), Line(A, H) we get concurrent(Line(A, H), Line(H, center(c)), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(H, center(c)), Line(A, center(c)) we get concurrent(Line(A, center(c)), Line(D, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(C, H), Line(H, center(d)), Line(F, H) we get concurrent(Line(C, H), Line(F, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(C, G), Line(C, center(d)), Line(C, center(c)) we get concurrent(Line(C, G), Line(C, center(c)), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(C, G), g, Line(C, center(c)) we get concurrent(g, Line(C, G), Line(C, center(c)))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(H, center(c)), Line(C, center(c)) we get concurrent(Line(A, center(c)), Line(C, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(E, H), Line(A, C), perpendicular_bisector(C, F) we get concurrent(Line(A, C), Line(E, H), perpendicular_bisector(C, F))
By concurrent_sufficient_conditions on Line(C, center(c)), Line(C, G), Line(C, H) we get concurrent(Line(C, G), Line(C, H), Line(C, center(c)))
By concurrent_sufficient_conditions on Line(E, H), Line(H, center(c)), Line(F, H) we get concurrent(Line(E, H), Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(A, H), Line(H, center(c)), Line(H, center(d)) we get concurrent(Line(A, H), Line(H, center(c)), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(H, center(d)), Line(G, H), Line(F, H) we get concurrent(Line(F, H), Line(G, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(E, H), Line(F, H), Line(H, center(d)) we get concurrent(Line(E, H), Line(F, H), Line(H, center(d)))
By concurrent_sufficient_conditions on j, Line(A, center(c)), Line(A, H) we get concurrent(j, Line(A, H), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(C, center(d)), Line(C, H), Line(C, center(c)) we get concurrent(Line(C, H), Line(C, center(c)), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(A, C), h, Line(C, center(c)) we get concurrent(h, Line(A, C), Line(C, center(c)))
By concurrent_sufficient_conditions on g, h, Line(C, center(c)) we get concurrent(g, h, Line(C, center(c)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(G, H), Line(F, H) we get concurrent(Line(F, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(A, H), Line(H, center(c)), Line(C, H) we get concurrent(Line(A, H), Line(C, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(H, center(d)), Line(A, H), Line(H, center(c)) we get concurrent(Line(A, H), Line(H, center(c)), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(E, F), Line(A, C), perpendicular_bisector(C, F) we get concurrent(Line(A, C), Line(E, F), perpendicular_bisector(C, F))
By concurrent_sufficient_conditions on Line(F, H), Line(H, center(c)), Line(G, H) we get concurrent(Line(F, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(A, center(c)), j, Line(A, C) we get concurrent(j, Line(A, C), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(C, center(d)), Line(F, center(d)), perpendicular_bisector(C, F) we get concurrent(perpendicular_bisector(C, F), Line(C, center(d)), Line(F, center(d)))
By concurrent_sufficient_conditions on h, Line(C, center(c)), Line(A, C) we get concurrent(h, Line(A, C), Line(C, center(c)))
By concurrent_sufficient_conditions on Line(C, center(d)), g, Line(C, H) we get concurrent(g, Line(C, H), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(D, center(c)), i, Line(D, H) we get concurrent(i, Line(D, H), Line(D, center(c)))
By concurrent_sufficient_conditions on h, Line(C, center(d)), g we get concurrent(g, h, Line(C, center(d)))
By concurrent_sufficient_conditions on Line(G, H), Line(C, H), Line(H, center(d)) we get concurrent(Line(C, H), Line(G, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(F, H), Line(G, H), Line(H, center(d)) we get concurrent(Line(F, H), Line(G, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(F, H), Line(A, H), Line(H, center(d)) we get concurrent(Line(A, H), Line(F, H), Line(H, center(d)))
By concurrent_sufficient_conditions on i, Line(A, center(c)), j we get concurrent(i, j, Line(A, center(c)))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(E, F), Line(F, H) we get concurrent(Line(E, F), Line(F, H), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(F, H), Line(G, H) we get concurrent(Line(F, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(d)), j we get concurrent(j, Line(F, H), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(H, center(d)), Line(F, center(d)), Line(C, center(d)) we get concurrent(Line(C, center(d)), Line(F, center(d)), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(H, center(d)), Line(G, H), Line(A, H) we get concurrent(Line(A, H), Line(G, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(A, C), perpendicular_bisector(C, F), Line(B, D) we get concurrent(Line(A, C), Line(B, D), perpendicular_bisector(C, F))
By concurrent_sufficient_conditions on Line(C, center(d)), Line(A, C), h we get concurrent(h, Line(A, C), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(F, H), Line(D, H), Line(H, center(d)) we get concurrent(Line(D, H), Line(F, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(C, center(c)), h, g we get concurrent(g, h, Line(C, center(c)))
By concurrent_sufficient_conditions on j, Line(G, center(c)), Line(C, G) we get concurrent(j, Line(C, G), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(C, center(c)), h, Line(C, G) we get concurrent(h, Line(C, G), Line(C, center(c)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(A, H), Line(G, H) we get concurrent(Line(A, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(C, G), Line(C, center(d)), Line(C, H) we get concurrent(Line(C, G), Line(C, H), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(F, H), Line(H, center(d)), Line(H, center(c)) we get concurrent(Line(F, H), Line(H, center(c)), Line(H, center(d)))
By concurrent_sufficient_conditions on f, Line(A, center(c)), Line(A, C) we get concurrent(f, Line(A, C), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(A, center(c)), i, j we get concurrent(i, j, Line(A, center(c)))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(H, center(d)), Line(C, center(d)) we get concurrent(Line(C, center(d)), Line(F, center(d)), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(A, H), Line(A, center(c)), i we get concurrent(i, Line(A, H), Line(A, center(c)))
By concurrent_sufficient_conditions on h, Line(C, G), Line(C, center(d)) we get concurrent(h, Line(C, G), Line(C, center(d)))
By concurrent_sufficient_conditions on j, Line(C, G), Line(G, center(c)) we get concurrent(j, Line(C, G), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(A, C), Line(C, center(d)), g we get concurrent(g, Line(A, C), Line(C, center(d)))
By line_definition on G, line_intersection(f, Line(C, G)), Line(C, G) we get Line(C, G) == Line(G, line_intersection(f, Line(C, G)))
By concurrent_sufficient_conditions on Line(A, H), Line(H, center(d)), Line(E, H) we get concurrent(Line(A, H), Line(E, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(G, H), Line(E, H), Line(H, center(d)) we get concurrent(Line(E, H), Line(G, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(G, H), Line(C, G) we get concurrent(Line(C, G), Line(G, H), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(F, H), Line(H, center(d)), Line(E, H) we get concurrent(Line(E, H), Line(F, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(A, H), i, Line(A, center(c)) we get concurrent(i, Line(A, H), Line(A, center(c)))
By concurrent_sufficient_conditions on i, Line(A, center(c)), Line(A, H) we get concurrent(i, Line(A, H), Line(A, center(c)))
By concurrent_sufficient_conditions on h, Line(D, center(c)), i we get concurrent(h, i, Line(D, center(c)))
By concurrent_sufficient_conditions on Line(C, center(c)), Line(C, center(d)), Line(C, G) we get concurrent(Line(C, G), Line(C, center(c)), Line(C, center(d)))
By concurrent_sufficient_conditions on h, Line(D, center(c)), Line(B, D) we get concurrent(h, Line(B, D), Line(D, center(c)))
By concurrent_sufficient_conditions on j, Line(F, center(d)), Line(E, F) we get concurrent(j, Line(E, F), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(C, center(d)), Line(H, center(d)), perpendicular_bisector(C, F) we get concurrent(perpendicular_bisector(C, F), Line(C, center(d)), Line(H, center(d)))
By concurrent_sufficient_conditions on j, Line(F, H), Line(F, center(d)) we get concurrent(j, Line(F, H), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(D, H), Line(H, center(c)), Line(H, center(d)) we get concurrent(Line(D, H), Line(H, center(c)), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), perpendicular_bisector(C, F), Line(H, center(d)) we get concurrent(perpendicular_bisector(C, F), Line(F, center(d)), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(A, center(c)), f, Line(A, C) we get concurrent(f, Line(A, C), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(C, center(c)), g, Line(C, center(d)) we get concurrent(g, Line(C, center(c)), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(C, H), Line(G, H) we get concurrent(Line(C, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(H, center(d)), Line(C, H) we get concurrent(Line(C, H), Line(H, center(c)), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(F, H), Line(C, H), Line(H, center(c)) we get concurrent(Line(C, H), Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(A, center(c)), Line(G, center(c)) we get concurrent(Line(A, center(c)), Line(G, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(F, H), Line(E, H), Line(H, center(c)) we get concurrent(Line(E, H), Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(C, center(c)), Line(A, C), Line(C, center(d)) we get concurrent(Line(A, C), Line(C, center(c)), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(E, H), Line(G, H), Line(H, center(d)) we get concurrent(Line(E, H), Line(G, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(A, C), Line(C, center(d)), Line(C, G) we get concurrent(Line(A, C), Line(C, G), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(D, G), Line(B, D), i we get concurrent(i, Line(B, D), Line(D, G))
By concurrent_sufficient_conditions on Line(C, center(d)), h, g we get concurrent(g, h, Line(C, center(d)))
By concurrent_sufficient_conditions on Line(C, center(d)), Line(C, H), Line(A, C) we get concurrent(Line(A, C), Line(C, H), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(G, center(c)), j, Line(C, G) we get concurrent(j, Line(C, G), Line(G, center(c)))
By line_definition on midpoint(C, F), center(d), perpendicular_bisector(C, F) we get perpendicular_bisector(C, F) == Line(center(d), midpoint(C, F))
By concurrent_sufficient_conditions on Line(C, center(d)), h, Line(A, C) we get concurrent(h, Line(A, C), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(B, D), i, Line(D, center(c)) we get concurrent(i, Line(B, D), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(G, H), Line(H, center(c)), Line(A, H) we get concurrent(Line(A, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(E, H), Line(C, H) we get concurrent(Line(C, H), Line(E, H), Line(H, center(c)))
By concurrent_sufficient_conditions on h, Line(C, center(c)), g we get concurrent(g, h, Line(C, center(c)))
By concurrent_sufficient_conditions on Line(D, H), i, Line(D, center(c)) we get concurrent(i, Line(D, H), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(A, center(c)), Line(D, center(c)) we get concurrent(Line(A, center(c)), Line(D, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(D, H), Line(H, center(c)), Line(G, H) we get concurrent(Line(D, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(E, H), Line(F, H), Line(H, center(c)) we get concurrent(Line(E, H), Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(E, F), j we get concurrent(j, Line(E, F), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(A, C), g, Line(C, center(c)) we get concurrent(g, Line(A, C), Line(C, center(c)))
By concurrent_sufficient_conditions on h, Line(B, D), Line(D, center(c)) we get concurrent(h, Line(B, D), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(C, center(c)), Line(C, H), h we get concurrent(h, Line(C, H), Line(C, center(c)))
By concurrent_sufficient_conditions on Line(E, F), Line(F, H), Line(F, center(d)) we get concurrent(Line(E, F), Line(F, H), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(H, center(d)), Line(A, H), Line(F, H) we get concurrent(Line(A, H), Line(F, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(D, center(c)), i, h we get concurrent(h, i, Line(D, center(c)))
By concurrent_sufficient_conditions on Line(D, H), Line(H, center(d)), Line(H, center(c)) we get concurrent(Line(D, H), Line(H, center(c)), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(B, D), h we get concurrent(h, Line(B, D), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(C, center(c)), Line(C, H), g we get concurrent(g, Line(C, H), Line(C, center(c)))
By concurrent_sufficient_conditions on Line(C, H), Line(A, H), Line(H, center(c)) we get concurrent(Line(A, H), Line(C, H), Line(H, center(c)))
By concurrent_sufficient_conditions on i, Line(D, center(c)), Line(D, H) we get concurrent(i, Line(D, H), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(H, center(d)), Line(E, H), Line(F, H) we get concurrent(Line(E, H), Line(F, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(H, center(d)), Line(F, H), Line(E, H) we get concurrent(Line(E, H), Line(F, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(C, center(c)), Line(C, center(d)), Line(C, H) we get concurrent(Line(C, H), Line(C, center(c)), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(H, center(d)), Line(C, center(d)), Line(F, center(d)) we get concurrent(Line(C, center(d)), Line(F, center(d)), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(C, H), Line(H, center(c)), Line(D, H) we get concurrent(Line(C, H), Line(D, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(C, center(d)), perpendicular_bisector(C, F) we get concurrent(perpendicular_bisector(C, F), Line(C, center(d)), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, H), Line(D, H), Line(H, center(c)) we get concurrent(Line(D, H), Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on i, Line(D, H), Line(D, center(c)) we get concurrent(i, Line(D, H), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(E, H), Line(G, H) we get concurrent(Line(E, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on g, Line(A, C), Line(C, center(c)) we get concurrent(g, Line(A, C), Line(C, center(c)))
By concurrent_sufficient_conditions on Line(H, center(d)), Line(A, H), Line(D, H) we get concurrent(Line(A, H), Line(D, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(C, H), Line(G, H), Line(H, center(d)) we get concurrent(Line(C, H), Line(G, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(C, center(d)), Line(C, G), Line(C, H) we get concurrent(Line(C, G), Line(C, H), Line(C, center(d)))
By concurrent_sufficient_conditions on g, Line(C, center(c)), Line(C, H) we get concurrent(g, Line(C, H), Line(C, center(c)))
By concurrent_sufficient_conditions on Line(D, H), Line(G, H), Line(H, center(d)) we get concurrent(Line(D, H), Line(G, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(A, H), i we get concurrent(i, Line(A, H), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(A, H), Line(H, center(c)), Line(D, H) we get concurrent(Line(A, H), Line(D, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(C, center(c)), Line(C, H), Line(A, C) we get concurrent(Line(A, C), Line(C, H), Line(C, center(c)))
By concurrent_sufficient_conditions on Line(H, center(d)), Line(D, H), Line(C, H) we get concurrent(Line(C, H), Line(D, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(D, H), Line(H, center(c)), Line(A, H) we get concurrent(Line(A, H), Line(D, H), Line(H, center(c)))
By concurrent_sufficient_conditions on perpendicular_bisector(C, F), Line(H, center(d)), Line(F, center(d)) we get concurrent(perpendicular_bisector(C, F), Line(F, center(d)), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(A, C), g, Line(C, center(d)) we get concurrent(g, Line(A, C), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(H, center(d)), Line(F, H), Line(H, center(c)) we get concurrent(Line(F, H), Line(H, center(c)), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(A, H), Line(E, H) we get concurrent(Line(A, H), Line(E, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(C, G), Line(C, H), Line(C, center(d)) we get concurrent(Line(C, G), Line(C, H), Line(C, center(d)))
By concurrent_sufficient_conditions on g, j, Line(F, center(d)) we get concurrent(g, j, Line(F, center(d)))
By concurrent_sufficient_conditions on Line(E, H), Line(H, center(d)), Line(A, H) we get concurrent(Line(A, H), Line(E, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(D, H), Line(D, center(c)), i we get concurrent(i, Line(D, H), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(F, H), Line(H, center(d)) we get concurrent(Line(F, H), Line(H, center(c)), Line(H, center(d)))
By concurrent_sufficient_conditions on f, Line(A, center(c)), j we get concurrent(f, j, Line(A, center(c)))
By concurrent_sufficient_conditions on Line(C, center(c)), Line(A, C), h we get concurrent(h, Line(A, C), Line(C, center(c)))
By concurrent_sufficient_conditions on Line(A, H), Line(G, H), Line(H, center(c)) we get concurrent(Line(A, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(D, H), Line(A, H), Line(H, center(c)) we get concurrent(Line(A, H), Line(D, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(C, H), Line(E, H) we get concurrent(Line(C, H), Line(E, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(C, center(c)), Line(C, G), Line(A, C) we get concurrent(Line(A, C), Line(C, G), Line(C, center(c)))
By concurrent_sufficient_conditions on Line(C, H), Line(H, center(c)), Line(G, H) we get concurrent(Line(C, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(C, center(d)), Line(A, C), Line(C, G) we get concurrent(Line(A, C), Line(C, G), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(A, H), Line(F, H) we get concurrent(Line(A, H), Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on j, Line(A, center(c)), Line(A, C) we get concurrent(j, Line(A, C), Line(A, center(c)))
By concurrent_sufficient_conditions on g, Line(C, center(c)), Line(C, G) we get concurrent(g, Line(C, G), Line(C, center(c)))
By concurrent_sufficient_conditions on Line(C, H), Line(H, center(d)), Line(D, H) we get concurrent(Line(C, H), Line(D, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(A, C), f we get concurrent(f, Line(A, C), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(C, G), Line(C, center(c)), g we get concurrent(g, Line(C, G), Line(C, center(c)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(A, H), Line(H, center(d)) we get concurrent(Line(A, H), Line(H, center(c)), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(A, H), Line(A, center(c)), f we get concurrent(f, Line(A, H), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(D, H), Line(H, center(c)), Line(C, H) we get concurrent(Line(C, H), Line(D, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(A, center(c)), i, Line(A, C) we get concurrent(i, Line(A, C), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(C, H), Line(H, center(d)), Line(A, H) we get concurrent(Line(A, H), Line(C, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(C, H), Line(C, center(d)), Line(C, center(c)) we get concurrent(Line(C, H), Line(C, center(c)), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(A, C), perpendicular_bisector(C, F), Line(E, F) we get concurrent(Line(A, C), Line(E, F), perpendicular_bisector(C, F))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(G, center(c)), Line(C, center(c)) we get concurrent(Line(C, center(c)), Line(G, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(d)), j we get concurrent(j, Line(E, F), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(H, center(c)), Line(C, center(c)) we get concurrent(Line(C, center(c)), Line(G, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(D, H), h, Line(D, center(c)) we get concurrent(h, Line(D, H), Line(D, center(c)))
By concurrent_sufficient_conditions on g, Line(C, center(d)), Line(C, H) we get concurrent(g, Line(C, H), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(C, H), Line(C, center(c)), Line(C, center(d)) we get concurrent(Line(C, H), Line(C, center(c)), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(E, F), Line(E, H), perpendicular_bisector(C, F) we get concurrent(Line(E, F), Line(E, H), perpendicular_bisector(C, F))
By concurrent_sufficient_conditions on Line(C, center(d)), Line(A, C), g we get concurrent(g, Line(A, C), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), g, Line(F, H) we get concurrent(g, Line(F, H), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(B, D), Line(D, center(c)), h we get concurrent(h, Line(B, D), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(D, H), Line(C, H), Line(H, center(c)) we get concurrent(Line(C, H), Line(D, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(H, center(d)), Line(C, H), Line(A, H) we get concurrent(Line(A, H), Line(C, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(G, H), Line(H, center(c)), Line(F, H) we get concurrent(Line(F, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on i, h, Line(B, D) we get concurrent(h, i, Line(B, D))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(D, H), Line(F, H) we get concurrent(Line(D, H), Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(A, C), Line(C, center(c)), h we get concurrent(h, Line(A, C), Line(C, center(c)))
By concurrent_sufficient_conditions on h, g, Line(C, center(c)) we get concurrent(g, h, Line(C, center(c)))
By concurrent_sufficient_conditions on Line(E, F), j, Line(F, center(d)) we get concurrent(j, Line(E, F), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(E, F), g we get concurrent(g, Line(E, F), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(C, center(c)), Line(A, center(c)) we get concurrent(Line(A, center(c)), Line(C, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(H, center(d)), Line(D, H), Line(H, center(c)) we get concurrent(Line(D, H), Line(H, center(c)), Line(H, center(d)))
By concurrent_sufficient_conditions on j, Line(A, center(c)), i we get concurrent(i, j, Line(A, center(c)))
By concurrent_sufficient_conditions on Line(C, center(c)), Line(C, H), Line(C, G) we get concurrent(Line(C, G), Line(C, H), Line(C, center(c)))
By concurrent_sufficient_conditions on Line(A, C), i, Line(A, center(c)) we get concurrent(i, Line(A, C), Line(A, center(c)))
By concurrent_sufficient_conditions on g, Line(F, H), Line(F, center(d)) we get concurrent(g, Line(F, H), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(C, center(d)), h, Line(C, H) we get concurrent(h, Line(C, H), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(C, G), Line(C, center(c)), Line(C, H) we get concurrent(Line(C, G), Line(C, H), Line(C, center(c)))
By concurrent_sufficient_conditions on Line(E, H), Line(A, H), Line(H, center(c)) we get concurrent(Line(A, H), Line(E, H), Line(H, center(c)))
By line_definition on B, line_intersection(f, Line(C, G)), f we get f == Line(B, line_intersection(f, Line(C, G)))
By concurrent_sufficient_conditions on Line(G, H), Line(A, H), Line(H, center(c)) we get concurrent(Line(A, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(H, center(d)), Line(A, H), Line(G, H) we get concurrent(Line(A, H), Line(G, H), Line(H, center(d)))
By concurrent_sufficient_conditions on perpendicular_bisector(C, F), Line(A, C), Line(E, H) we get concurrent(Line(A, C), Line(E, H), perpendicular_bisector(C, F))
By line_definition on C, line_intersection(f, Line(C, G)), Line(C, G) we get Line(C, G) == Line(C, line_intersection(f, Line(C, G)))
By concurrent_sufficient_conditions on h, Line(C, H), Line(C, center(d)) we get concurrent(h, Line(C, H), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(C, center(c)), g, Line(C, G) we get concurrent(g, Line(C, G), Line(C, center(c)))
By concurrent_sufficient_conditions on Line(C, G), Line(C, center(c)), Line(A, C) we get concurrent(Line(A, C), Line(C, G), Line(C, center(c)))
By concurrent_sufficient_conditions on perpendicular_bisector(C, F), Line(F, center(d)), Line(H, center(d)) we get concurrent(perpendicular_bisector(C, F), Line(F, center(d)), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(C, center(d)), Line(F, center(d)), Line(H, center(d)) we get concurrent(Line(C, center(d)), Line(F, center(d)), Line(H, center(d)))
By concurrent_sufficient_conditions on h, Line(C, center(c)), Line(C, center(d)) we get concurrent(h, Line(C, center(c)), Line(C, center(d)))
By concurrent_sufficient_conditions on h, Line(C, G), Line(C, center(c)) we get concurrent(h, Line(C, G), Line(C, center(c)))
By concurrent_sufficient_conditions on Line(B, D), Line(D, center(c)), i we get concurrent(i, Line(B, D), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(C, H), Line(D, H) we get concurrent(Line(C, H), Line(D, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(C, G), Line(C, center(d)), Line(A, C) we get concurrent(Line(A, C), Line(C, G), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(E, H), Line(H, center(d)), Line(G, H) we get concurrent(Line(E, H), Line(G, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(D, G), i, Line(B, D) we get concurrent(i, Line(B, D), Line(D, G))
By concurrent_sufficient_conditions on j, Line(G, center(c)), Line(G, H) we get concurrent(j, Line(G, H), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(C, center(d)), Line(C, center(c)), Line(C, H) we get concurrent(Line(C, H), Line(C, center(c)), Line(C, center(d)))
By concurrent_sufficient_conditions on j, Line(F, center(d)), g we get concurrent(g, j, Line(F, center(d)))
By concurrent_sufficient_conditions on f, j, Line(A, center(c)) we get concurrent(f, j, Line(A, center(c)))
By concurrent_sufficient_conditions on Line(F, H), Line(C, H), Line(H, center(d)) we get concurrent(Line(C, H), Line(F, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(C, center(c)), Line(H, center(c)) we get concurrent(Line(A, center(c)), Line(C, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(H, center(d)), Line(H, center(c)), Line(D, H) we get concurrent(Line(D, H), Line(H, center(c)), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(G, H), Line(H, center(d)), Line(C, H) we get concurrent(Line(C, H), Line(G, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(C, H), Line(H, center(c)), Line(E, H) we get concurrent(Line(C, H), Line(E, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(C, H), Line(H, center(d)) we get concurrent(Line(C, H), Line(H, center(c)), Line(H, center(d)))
By concurrent_sufficient_conditions on perpendicular_bisector(C, F), Line(E, F), Line(B, D) we get concurrent(Line(B, D), Line(E, F), perpendicular_bisector(C, F))
By concurrent_sufficient_conditions on Line(A, C), Line(C, center(d)), h we get concurrent(h, Line(A, C), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(H, center(d)), Line(C, H), Line(E, H) we get concurrent(Line(C, H), Line(E, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(G, H), j, Line(G, center(c)) we get concurrent(j, Line(G, H), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(C, H), Line(D, H), Line(H, center(d)) we get concurrent(Line(C, H), Line(D, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(A, C), Line(C, center(c)), g we get concurrent(g, Line(A, C), Line(C, center(c)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(D, center(c)), Line(C, center(c)) we get concurrent(Line(C, center(c)), Line(D, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(E, H), Line(F, H) we get concurrent(Line(E, H), Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(H, center(d)), Line(F, H), Line(D, H) we get concurrent(Line(D, H), Line(F, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), perpendicular_bisector(C, F), Line(C, center(d)) we get concurrent(perpendicular_bisector(C, F), Line(C, center(d)), Line(F, center(d)))
By concurrent_sufficient_conditions on i, Line(D, center(c)), h we get concurrent(h, i, Line(D, center(c)))
By concurrent_sufficient_conditions on g, Line(C, center(c)), h we get concurrent(g, h, Line(C, center(c)))
By concurrent_sufficient_conditions on Line(C, H), Line(E, H), Line(H, center(c)) we get concurrent(Line(C, H), Line(E, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(H, center(d)), Line(H, center(c)), Line(E, H) we get concurrent(Line(E, H), Line(H, center(c)), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(A, C), Line(C, H), Line(C, center(d)) we get concurrent(Line(A, C), Line(C, H), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, H), i we get concurrent(i, Line(D, H), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(H, center(d)), Line(D, H), Line(G, H) we get concurrent(Line(D, H), Line(G, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(A, C), Line(A, center(c)), j we get concurrent(j, Line(A, C), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(F, H), Line(H, center(d)), Line(D, H) we get concurrent(Line(D, H), Line(F, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(C, center(c)), Line(H, center(c)) we get concurrent(Line(C, center(c)), Line(G, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(C, center(c)), Line(A, center(c)), Line(G, center(c)) we get concurrent(Line(A, center(c)), Line(C, center(c)), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(G, H), Line(H, center(d)), Line(H, center(c)) we get concurrent(Line(G, H), Line(H, center(c)), Line(H, center(d)))
By concurrent_sufficient_conditions on i, Line(A, C), Line(A, center(c)) we get concurrent(i, Line(A, C), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(C, center(d)), Line(C, center(c)), g we get concurrent(g, Line(C, center(c)), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(H, center(d)), Line(G, H) we get concurrent(Line(G, H), Line(H, center(c)), Line(H, center(d)))
By concurrent_sufficient_conditions on h, Line(C, center(c)), Line(C, H) we get concurrent(h, Line(C, H), Line(C, center(c)))
By concurrent_sufficient_conditions on Line(C, center(d)), Line(C, H), Line(C, G) we get concurrent(Line(C, G), Line(C, H), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(C, center(c)), Line(G, center(c)), Line(H, center(c)) we get concurrent(Line(C, center(c)), Line(G, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(C, center(c)), g, h we get concurrent(g, h, Line(C, center(c)))
By line_definition on E, midpoint(C, F), perpendicular_bisector(C, F) we get perpendicular_bisector(C, F) == Line(E, midpoint(C, F))
By concurrent_sufficient_conditions on Line(F, H), j, Line(F, center(d)) we get concurrent(j, Line(F, H), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(C, center(c)), Line(C, center(d)), g we get concurrent(g, Line(C, center(c)), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(C, H), Line(A, H), Line(H, center(d)) we get concurrent(Line(A, H), Line(C, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(E, H), Line(H, center(d)) we get concurrent(Line(E, H), Line(H, center(c)), Line(H, center(d)))
By concurrent_sufficient_conditions on perpendicular_bisector(C, F), Line(H, center(d)), Line(C, center(d)) we get concurrent(perpendicular_bisector(C, F), Line(C, center(d)), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(C, center(c)), h, Line(A, C) we get concurrent(h, Line(A, C), Line(C, center(c)))
By concurrent_sufficient_conditions on Line(E, H), Line(H, center(d)), Line(C, H) we get concurrent(Line(C, H), Line(E, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(A, H), j, Line(A, center(c)) we get concurrent(j, Line(A, H), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(C, H), Line(A, C), Line(C, center(d)) we get concurrent(Line(A, C), Line(C, H), Line(C, center(d)))
By concurrent_sufficient_conditions on g, Line(C, H), Line(C, center(c)) we get concurrent(g, Line(C, H), Line(C, center(c)))
By concurrent_sufficient_conditions on Line(H, center(d)), Line(C, H), Line(F, H) we get concurrent(Line(C, H), Line(F, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(F, H), Line(E, F) we get concurrent(Line(E, F), Line(F, H), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(B, D), h, Line(D, G) we get concurrent(h, Line(B, D), Line(D, G))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(C, H), Line(F, H) we get concurrent(Line(C, H), Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(C, center(d)), h, Line(C, G) we get concurrent(h, Line(C, G), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(C, H), Line(C, center(d)), Line(A, C) we get concurrent(Line(A, C), Line(C, H), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(C, H), Line(C, center(c)), h we get concurrent(h, Line(C, H), Line(C, center(c)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(D, center(c)), Line(A, center(c)) we get concurrent(Line(A, center(c)), Line(D, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(C, H), Line(C, center(c)), Line(C, G) we get concurrent(Line(C, G), Line(C, H), Line(C, center(c)))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(F, H), j we get concurrent(j, Line(F, H), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(A, H), Line(H, center(d)), Line(C, H) we get concurrent(Line(A, H), Line(C, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(G, H), Line(E, H), Line(H, center(c)) we get concurrent(Line(E, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on j, Line(E, F), Line(F, center(d)) we get concurrent(j, Line(E, F), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, H), Line(H, center(d)), Line(C, H) we get concurrent(Line(C, H), Line(F, H), Line(H, center(d)))
By concurrent_sufficient_conditions on i, Line(A, center(c)), f we get concurrent(f, i, Line(A, center(c)))
By concurrent_sufficient_conditions on Line(D, center(c)), h, i we get concurrent(h, i, Line(D, center(c)))
By concurrent_sufficient_conditions on Line(C, center(c)), Line(C, G), Line(C, center(d)) we get concurrent(Line(C, G), Line(C, center(c)), Line(C, center(d)))
By concurrent_sufficient_conditions on h, i, Line(D, center(c)) we get concurrent(h, i, Line(D, center(c)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(G, center(c)), Line(A, center(c)) we get concurrent(Line(A, center(c)), Line(G, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(C, G), Line(C, center(c)), h we get concurrent(h, Line(C, G), Line(C, center(c)))
By concurrent_sufficient_conditions on Line(F, H), Line(E, H), Line(H, center(d)) we get concurrent(Line(E, H), Line(F, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(G, H), Line(H, center(d)), Line(F, H) we get concurrent(Line(F, H), Line(G, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), j, Line(F, H) we get concurrent(j, Line(F, H), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(C, G), h, Line(C, center(d)) we get concurrent(h, Line(C, G), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(A, H), Line(H, center(c)), Line(E, H) we get concurrent(Line(A, H), Line(E, H), Line(H, center(c)))
By concurrent_sufficient_conditions on h, Line(D, center(c)), Line(D, H) we get concurrent(h, Line(D, H), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(H, center(c)), Line(G, center(c)) we get concurrent(Line(A, center(c)), Line(G, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on perpendicular_bisector(C, F), Line(E, F), Line(E, H) we get concurrent(Line(E, F), Line(E, H), perpendicular_bisector(C, F))
By concurrent_sufficient_conditions on Line(G, H), Line(H, center(c)), Line(H, center(d)) we get concurrent(Line(G, H), Line(H, center(c)), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(D, H), Line(A, H), Line(H, center(d)) we get concurrent(Line(A, H), Line(D, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(H, center(d)), Line(C, center(d)), perpendicular_bisector(C, F) we get concurrent(perpendicular_bisector(C, F), Line(C, center(d)), Line(H, center(d)))
By concurrent_sufficient_conditions on h, Line(D, G), Line(B, D) we get concurrent(h, Line(B, D), Line(D, G))
By concurrent_sufficient_conditions on Line(C, center(c)), Line(A, center(c)), Line(D, center(c)) we get concurrent(Line(A, center(c)), Line(C, center(c)), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(E, H), Line(C, H), Line(H, center(c)) we get concurrent(Line(C, H), Line(E, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(C, G), Line(G, center(c)), j we get concurrent(j, Line(C, G), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(C, center(d)), Line(A, C), Line(C, H) we get concurrent(Line(A, C), Line(C, H), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(G, H), Line(F, H), Line(H, center(d)) we get concurrent(Line(F, H), Line(G, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(A, H), Line(F, H), Line(H, center(c)) we get concurrent(Line(A, H), Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(A, C), Line(E, H), perpendicular_bisector(C, F) we get concurrent(Line(A, C), Line(E, H), perpendicular_bisector(C, F))
By concurrent_sufficient_conditions on h, Line(A, C), Line(C, center(c)) we get concurrent(h, Line(A, C), Line(C, center(c)))
By concurrent_sufficient_conditions on h, g, Line(C, center(d)) we get concurrent(g, h, Line(C, center(d)))
By concurrent_sufficient_conditions on i, Line(B, D), Line(D, G) we get concurrent(i, Line(B, D), Line(D, G))
By concurrent_sufficient_conditions on Line(H, center(d)), Line(F, center(d)), perpendicular_bisector(C, F) we get concurrent(perpendicular_bisector(C, F), Line(F, center(d)), Line(H, center(d)))
By concurrent_sufficient_conditions on h, Line(C, center(d)), Line(C, H) we get concurrent(h, Line(C, H), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(A, C), Line(A, center(c)), Line(A, H) we get concurrent(Line(A, C), Line(A, H), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(D, H), Line(G, H) we get concurrent(Line(D, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(C, center(d)), g, Line(C, center(c)) we get concurrent(g, Line(C, center(c)), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(D, H), Line(C, H) we get concurrent(Line(C, H), Line(D, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(A, C), Line(C, G), Line(C, center(c)) we get concurrent(Line(A, C), Line(C, G), Line(C, center(c)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(F, H), Line(C, H) we get concurrent(Line(C, H), Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(C, H), Line(H, center(d)), Line(E, H) we get concurrent(Line(C, H), Line(E, H), Line(H, center(d)))
By concurrent_sufficient_conditions on j, i, Line(A, center(c)) we get concurrent(i, j, Line(A, center(c)))
By concurrent_sufficient_conditions on Line(C, H), Line(H, center(c)), Line(F, H) we get concurrent(Line(C, H), Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(A, C), Line(C, H), Line(C, center(c)) we get concurrent(Line(A, C), Line(C, H), Line(C, center(c)))
By concurrent_sufficient_conditions on Line(E, F), perpendicular_bisector(C, F), Line(A, C) we get concurrent(Line(A, C), Line(E, F), perpendicular_bisector(C, F))
By concurrent_sufficient_conditions on Line(B, D), Line(E, F), perpendicular_bisector(C, F) we get concurrent(Line(B, D), Line(E, F), perpendicular_bisector(C, F))
By concurrent_sufficient_conditions on Line(C, G), Line(A, C), Line(C, center(c)) we get concurrent(Line(A, C), Line(C, G), Line(C, center(c)))
By concurrent_sufficient_conditions on g, Line(F, center(d)), Line(E, F) we get concurrent(g, Line(E, F), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, H), Line(H, center(c)), Line(C, H) we get concurrent(Line(C, H), Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(A, H), Line(G, H), Line(H, center(d)) we get concurrent(Line(A, H), Line(G, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(A, C), Line(A, center(c)), i we get concurrent(i, Line(A, C), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, H), h we get concurrent(h, Line(D, H), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(C, G), j we get concurrent(j, Line(C, G), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(C, center(c)), Line(G, center(c)) we get concurrent(Line(C, center(c)), Line(G, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(C, H), h, Line(C, center(c)) we get concurrent(h, Line(C, H), Line(C, center(c)))
By concurrent_sufficient_conditions on Line(G, H), Line(C, G), Line(G, center(c)) we get concurrent(Line(C, G), Line(G, H), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(d)), Line(E, F) we get concurrent(Line(E, F), Line(F, H), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(E, F), perpendicular_bisector(C, F), Line(B, D) we get concurrent(Line(B, D), Line(E, F), perpendicular_bisector(C, F))
By concurrent_sufficient_conditions on Line(C, center(c)), Line(H, center(c)), Line(G, center(c)) we get concurrent(Line(C, center(c)), Line(G, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(A, C), Line(E, F), perpendicular_bisector(C, F) we get concurrent(Line(A, C), Line(E, F), perpendicular_bisector(C, F))
By concurrent_sufficient_conditions on Line(H, center(d)), Line(A, H), Line(E, H) we get concurrent(Line(A, H), Line(E, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(E, H), Line(E, F), perpendicular_bisector(C, F) we get concurrent(Line(E, F), Line(E, H), perpendicular_bisector(C, F))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(D, H), Line(A, H) we get concurrent(Line(A, H), Line(D, H), Line(H, center(c)))
By concurrent_sufficient_conditions on h, Line(D, H), Line(D, center(c)) we get concurrent(h, Line(D, H), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(F, center(d)), g, Line(E, F) we get concurrent(g, Line(E, F), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(C, G), Line(G, H) we get concurrent(Line(C, G), Line(G, H), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(A, H), Line(A, C) we get concurrent(Line(A, C), Line(A, H), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(H, center(d)), Line(D, H), Line(A, H) we get concurrent(Line(A, H), Line(D, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(A, H), Line(C, H), Line(H, center(c)) we get concurrent(Line(A, H), Line(C, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(D, G), h, Line(B, D) we get concurrent(h, Line(B, D), Line(D, G))
By concurrent_sufficient_conditions on Line(C, H), g, Line(C, center(d)) we get concurrent(g, Line(C, H), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(E, H), Line(H, center(d)), Line(F, H) we get concurrent(Line(E, H), Line(F, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(G, H), Line(H, center(d)), Line(D, H) we get concurrent(Line(D, H), Line(G, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(A, C), Line(A, H) we get concurrent(Line(A, C), Line(A, H), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(A, H), j we get concurrent(j, Line(A, H), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(A, H), Line(H, center(d)), Line(D, H) we get concurrent(Line(A, H), Line(D, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(B, D), i, Line(D, G) we get concurrent(i, Line(B, D), Line(D, G))
By concurrent_sufficient_conditions on g, Line(C, center(d)), Line(A, C) we get concurrent(g, Line(A, C), Line(C, center(d)))
By concurrent_sufficient_conditions on f, Line(A, center(c)), i we get concurrent(f, i, Line(A, center(c)))
By concurrent_sufficient_conditions on Line(C, center(c)), Line(A, C), Line(C, H) we get concurrent(Line(A, C), Line(C, H), Line(C, center(c)))
By concurrent_sufficient_conditions on Line(C, H), Line(H, center(c)), Line(H, center(d)) we get concurrent(Line(C, H), Line(H, center(c)), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(F, H), Line(H, center(d)), Line(A, H) we get concurrent(Line(A, H), Line(F, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(F, H), Line(G, H), Line(H, center(c)) we get concurrent(Line(F, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on f, Line(A, center(c)), Line(A, H) we get concurrent(f, Line(A, H), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(F, H), Line(H, center(c)), Line(E, H) we get concurrent(Line(E, H), Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(E, F), g, Line(F, center(d)) we get concurrent(g, Line(E, F), Line(F, center(d)))
By concurrent_sufficient_conditions on h, Line(C, center(c)), Line(C, G) we get concurrent(h, Line(C, G), Line(C, center(c)))
By concurrent_sufficient_conditions on Line(G, H), Line(H, center(c)), Line(E, H) we get concurrent(Line(E, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(G, H), Line(A, H) we get concurrent(Line(A, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on g, Line(C, center(d)), Line(C, G) we get concurrent(g, Line(C, G), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(A, C), Line(A, center(c)), f we get concurrent(f, Line(A, C), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(D, H), Line(G, H), Line(H, center(c)) we get concurrent(Line(D, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(H, center(c)), Line(D, center(c)) we get concurrent(Line(A, center(c)), Line(D, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(A, C), i we get concurrent(i, Line(A, C), Line(A, center(c)))
By concurrent_sufficient_conditions on i, Line(D, center(c)), Line(B, D) we get concurrent(i, Line(B, D), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(H, center(d)), Line(E, H), Line(H, center(c)) we get concurrent(Line(E, H), Line(H, center(c)), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(H, center(d)), Line(H, center(c)), Line(F, H) we get concurrent(Line(F, H), Line(H, center(c)), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(C, G), Line(C, H), Line(C, center(c)) we get concurrent(Line(C, G), Line(C, H), Line(C, center(c)))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(A, center(c)), Line(C, center(c)) we get concurrent(Line(A, center(c)), Line(C, center(c)), Line(G, center(c)))
By concurrent_sufficient_conditions on j, Line(G, H), Line(G, center(c)) we get concurrent(j, Line(G, H), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(A, C), j we get concurrent(j, Line(A, C), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(D, H), Line(H, center(c)), Line(F, H) we get concurrent(Line(D, H), Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(G, center(c)), Line(C, center(c)) we get concurrent(Line(A, center(c)), Line(C, center(c)), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(H, center(d)), Line(D, H) we get concurrent(Line(D, H), Line(H, center(c)), Line(H, center(d)))
By concurrent_sufficient_conditions on i, Line(A, H), Line(A, center(c)) we get concurrent(i, Line(A, H), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(G, H), Line(A, H), Line(H, center(d)) we get concurrent(Line(A, H), Line(G, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(A, C), h, Line(C, center(d)) we get concurrent(h, Line(A, C), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(G, H), Line(C, H), Line(H, center(c)) we get concurrent(Line(C, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(C, center(d)), Line(C, G), g we get concurrent(g, Line(C, G), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(E, H), Line(A, H), Line(H, center(d)) we get concurrent(Line(A, H), Line(E, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(C, H), Line(H, center(d)), Line(G, H) we get concurrent(Line(C, H), Line(G, H), Line(H, center(d)))
By concurrent_sufficient_conditions on h, Line(C, center(d)), Line(C, center(c)) we get concurrent(h, Line(C, center(c)), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(C, H), Line(C, center(d)), Line(C, G) we get concurrent(Line(C, G), Line(C, H), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(A, H), Line(D, H) we get concurrent(Line(A, H), Line(D, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(d)), g we get concurrent(g, Line(F, H), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(C, center(c)), Line(C, center(d)), Line(A, C) we get concurrent(Line(A, C), Line(C, center(c)), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(C, center(c)), Line(D, center(c)) we get concurrent(Line(A, center(c)), Line(C, center(c)), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(A, H), f we get concurrent(f, Line(A, H), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(C, center(d)), Line(C, H), h we get concurrent(h, Line(C, H), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(A, H), Line(E, H), Line(H, center(d)) we get concurrent(Line(A, H), Line(E, H), Line(H, center(d)))
By concurrent_sufficient_conditions on g, Line(C, G), Line(C, center(d)) we get concurrent(g, Line(C, G), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(C, center(d)), Line(C, center(c)), h we get concurrent(h, Line(C, center(c)), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(C, center(c)), Line(A, center(c)), Line(H, center(c)) we get concurrent(Line(A, center(c)), Line(C, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on g, Line(F, center(d)), j we get concurrent(g, j, Line(F, center(d)))
By concurrent_sufficient_conditions on Line(C, center(d)), Line(A, C), Line(C, center(c)) we get concurrent(Line(A, C), Line(C, center(c)), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), g, j we get concurrent(g, j, Line(F, center(d)))
By concurrent_sufficient_conditions on Line(G, H), Line(H, center(d)), Line(E, H) we get concurrent(Line(E, H), Line(G, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(E, H), Line(H, center(c)), Line(C, H) we get concurrent(Line(C, H), Line(E, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(H, center(d)), Line(G, H), Line(D, H) we get concurrent(Line(D, H), Line(G, H), Line(H, center(d)))
By concurrent_sufficient_conditions on i, Line(B, D), h we get concurrent(h, i, Line(B, D))
By concurrent_sufficient_conditions on Line(H, center(d)), Line(E, H), Line(C, H) we get concurrent(Line(C, H), Line(E, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(G, H), Line(F, H), Line(H, center(c)) we get concurrent(Line(F, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(C, H), Line(A, H) we get concurrent(Line(A, H), Line(C, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(B, D), i we get concurrent(i, Line(B, D), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(F, H), Line(H, center(c)), Line(A, H) we get concurrent(Line(A, H), Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(E, H), Line(G, H), Line(H, center(c)) we get concurrent(Line(E, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on f, Line(A, H), Line(A, center(c)) we get concurrent(f, Line(A, H), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(G, H), Line(H, center(c)), Line(C, H) we get concurrent(Line(C, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(C, center(c)), Line(D, center(c)) we get concurrent(Line(C, center(c)), Line(D, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(C, center(c)), Line(H, center(c)), Line(D, center(c)) we get concurrent(Line(C, center(c)), Line(D, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(G, H), Line(G, center(c)), Line(C, G) we get concurrent(Line(C, G), Line(G, H), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(C, center(c)), g, Line(C, H) we get concurrent(g, Line(C, H), Line(C, center(c)))
By concurrent_sufficient_conditions on g, Line(A, C), Line(C, center(d)) we get concurrent(g, Line(A, C), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(A, C), f, Line(A, center(c)) we get concurrent(f, Line(A, C), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(F, H), Line(E, H) we get concurrent(Line(E, H), Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on perpendicular_bisector(C, F), Line(F, center(d)), Line(C, center(d)) we get concurrent(perpendicular_bisector(C, F), Line(C, center(d)), Line(F, center(d)))
By concurrent_sufficient_conditions on perpendicular_bisector(C, F), Line(A, C), Line(B, D) we get concurrent(Line(A, C), Line(B, D), perpendicular_bisector(C, F))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(C, center(c)), Line(A, center(c)) we get concurrent(Line(A, center(c)), Line(C, center(c)), Line(D, center(c)))
By concurrent_sufficient_conditions on perpendicular_bisector(C, F), Line(B, D), Line(E, F) we get concurrent(Line(B, D), Line(E, F), perpendicular_bisector(C, F))
By concurrent_sufficient_conditions on Line(A, C), Line(C, center(c)), Line(C, G) we get concurrent(Line(A, C), Line(C, G), Line(C, center(c)))
By concurrent_sufficient_conditions on Line(F, center(d)), j, g we get concurrent(g, j, Line(F, center(d)))
By concurrent_sufficient_conditions on Line(H, center(d)), Line(H, center(c)), Line(G, H) we get concurrent(Line(G, H), Line(H, center(c)), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(C, H), Line(C, center(d)), h we get concurrent(h, Line(C, H), Line(C, center(d)))
By concurrent_sufficient_conditions on i, Line(D, G), Line(B, D) we get concurrent(i, Line(B, D), Line(D, G))
By concurrent_sufficient_conditions on Line(H, center(d)), Line(E, H), Line(A, H) we get concurrent(Line(A, H), Line(E, H), Line(H, center(d)))
By concurrent_sufficient_conditions on g, h, Line(C, center(d)) we get concurrent(g, h, Line(C, center(d)))
By concurrent_sufficient_conditions on Line(A, H), f, Line(A, center(c)) we get concurrent(f, Line(A, H), Line(A, center(c)))
By concurrent_sufficient_conditions on f, i, Line(A, center(c)) we get concurrent(f, i, Line(A, center(c)))
By concurrent_sufficient_conditions on perpendicular_bisector(C, F), Line(E, H), Line(E, F) we get concurrent(Line(E, F), Line(E, H), perpendicular_bisector(C, F))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(A, center(c)), Line(H, center(c)) we get concurrent(Line(A, center(c)), Line(G, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(C, center(c)), Line(D, center(c)), Line(H, center(c)) we get concurrent(Line(C, center(c)), Line(D, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on h, Line(B, D), i we get concurrent(h, i, Line(B, D))
By concurrent_sufficient_conditions on Line(C, center(c)), Line(D, center(c)), Line(A, center(c)) we get concurrent(Line(A, center(c)), Line(C, center(c)), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(C, center(d)), Line(C, G), Line(A, C) we get concurrent(Line(A, C), Line(C, G), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(F, H), Line(H, center(d)), Line(G, H) we get concurrent(Line(F, H), Line(G, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(C, H), Line(A, C), Line(C, center(c)) we get concurrent(Line(A, C), Line(C, H), Line(C, center(c)))
By concurrent_sufficient_conditions on Line(D, G), Line(B, D), h we get concurrent(h, Line(B, D), Line(D, G))
By concurrent_sufficient_conditions on Line(H, center(d)), perpendicular_bisector(C, F), Line(C, center(d)) we get concurrent(perpendicular_bisector(C, F), Line(C, center(d)), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(G, H), j we get concurrent(j, Line(G, H), Line(G, center(c)))
By concurrent_sufficient_conditions on g, Line(C, center(c)), Line(C, center(d)) we get concurrent(g, Line(C, center(c)), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(G, center(c)), Line(H, center(c)) we get concurrent(Line(A, center(c)), Line(G, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(H, center(d)), Line(E, H), Line(G, H) we get concurrent(Line(E, H), Line(G, H), Line(H, center(d)))
By concurrent_sufficient_conditions on g, Line(C, G), Line(C, center(c)) we get concurrent(g, Line(C, G), Line(C, center(c)))
By concurrent_sufficient_conditions on Line(A, C), Line(C, center(d)), Line(C, center(c)) we get concurrent(Line(A, C), Line(C, center(c)), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(H, center(d)), Line(G, H), Line(H, center(c)) we get concurrent(Line(G, H), Line(H, center(c)), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(D, H), Line(H, center(d)), Line(G, H) we get concurrent(Line(D, H), Line(G, H), Line(H, center(d)))
By perpendicular_line_definition on H, Line(E, H), Line(G, H) we get Line(E, H) == perpendicular_line(H, Line(G, H))
By concurrent_sufficient_conditions on Line(C, center(d)), Line(C, H), g we get concurrent(g, Line(C, H), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(A, center(c)), f, j we get concurrent(f, j, Line(A, center(c)))
By concurrent_sufficient_conditions on Line(H, center(d)), Line(C, H), Line(D, H) we get concurrent(Line(C, H), Line(D, H), Line(H, center(d)))
By concurrent_sufficient_conditions on g, Line(E, F), Line(F, center(d)) we get concurrent(g, Line(E, F), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(D, center(c)), h, Line(B, D) we get concurrent(h, Line(B, D), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(G, H), Line(H, center(c)), Line(D, H) we get concurrent(Line(D, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on h, Line(B, D), Line(D, G) we get concurrent(h, Line(B, D), Line(D, G))
By concurrent_sufficient_conditions on Line(C, center(c)), Line(H, center(c)), Line(A, center(c)) we get concurrent(Line(A, center(c)), Line(C, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on h, Line(C, center(d)), Line(C, G) we get concurrent(h, Line(C, G), Line(C, center(d)))
By concurrent_sufficient_conditions on g, Line(F, center(d)), Line(F, H) we get concurrent(g, Line(F, H), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(A, C), Line(C, center(d)), Line(C, H) we get concurrent(Line(A, C), Line(C, H), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(C, center(d)), g, Line(C, G) we get concurrent(g, Line(C, G), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(G, H), Line(G, center(c)), j we get concurrent(j, Line(G, H), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(C, center(c)), Line(G, center(c)), Line(A, center(c)) we get concurrent(Line(A, center(c)), Line(C, center(c)), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(H, center(d)), Line(D, H), Line(F, H) we get concurrent(Line(D, H), Line(F, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), j, Line(E, F) we get concurrent(j, Line(E, F), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(C, H), g, Line(C, center(c)) we get concurrent(g, Line(C, H), Line(C, center(c)))
By concurrent_sufficient_conditions on Line(H, center(d)), Line(F, H), Line(A, H) we get concurrent(Line(A, H), Line(F, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(C, G), Line(C, center(d)), g we get concurrent(g, Line(C, G), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(C, G), Line(G, center(c)), Line(G, H) we get concurrent(Line(C, G), Line(G, H), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(A, H), Line(H, center(d)), Line(H, center(c)) we get concurrent(Line(A, H), Line(H, center(c)), Line(H, center(d)))
By concurrent_sufficient_conditions on g, Line(C, center(d)), Line(C, center(c)) we get concurrent(g, Line(C, center(c)), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(G, H), Line(D, H), Line(H, center(c)) we get concurrent(Line(D, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(D, H), Line(H, center(d)) we get concurrent(Line(D, H), Line(H, center(c)), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(G, H), Line(C, H) we get concurrent(Line(C, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on f, g, Line(B, D) we get concurrent(f, g, Line(B, D))
By concurrent_sufficient_conditions on Line(H, center(d)), Line(G, H), Line(C, H) we get concurrent(Line(C, H), Line(G, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(C, H), Line(E, H), Line(H, center(d)) we get concurrent(Line(C, H), Line(E, H), Line(H, center(d)))
By concurrent_sufficient_conditions on h, i, Line(B, D) we get concurrent(h, i, Line(B, D))
By concurrent_sufficient_conditions on Line(C, center(d)), Line(C, G), h we get concurrent(h, Line(C, G), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(F, H), Line(D, H) we get concurrent(Line(D, H), Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(H, center(c)), Line(A, center(c)) we get concurrent(Line(A, center(c)), Line(G, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on j, Line(F, center(d)), Line(F, H) we get concurrent(j, Line(F, H), Line(F, center(d)))
By concurrent_sufficient_conditions on perpendicular_bisector(C, F), Line(C, center(d)), Line(H, center(d)) we get concurrent(perpendicular_bisector(C, F), Line(C, center(d)), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(H, center(d)), Line(C, H), Line(G, H) we get concurrent(Line(C, H), Line(G, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(d)), Line(F, H) we get concurrent(Line(E, F), Line(F, H), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(C, center(d)), h, Line(C, center(c)) we get concurrent(h, Line(C, center(c)), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(E, H), Line(A, H) we get concurrent(Line(A, H), Line(E, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(A, center(c)), j, Line(A, H) we get concurrent(j, Line(A, H), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(G, H), Line(D, H), Line(H, center(d)) we get concurrent(Line(D, H), Line(G, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(A, C), Line(C, center(c)), Line(C, H) we get concurrent(Line(A, C), Line(C, H), Line(C, center(c)))
By concurrent_sufficient_conditions on perpendicular_bisector(C, F), Line(C, center(d)), Line(F, center(d)) we get concurrent(perpendicular_bisector(C, F), Line(C, center(d)), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(D, H), Line(H, center(d)), Line(F, H) we get concurrent(Line(D, H), Line(F, H), Line(H, center(d)))
By concurrent_sufficient_conditions on g, Line(C, center(c)), Line(A, C) we get concurrent(g, Line(A, C), Line(C, center(c)))
By concurrent_sufficient_conditions on Line(E, H), Line(H, center(c)), Line(G, H) we get concurrent(Line(E, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(H, center(c)), Line(C, center(c)) we get concurrent(Line(C, center(c)), Line(D, center(c)), Line(H, center(c)))
By line_definition on line_intersection(f, Line(C, G)), A, f we get f == Line(A, line_intersection(f, Line(C, G)))
By concurrent_sufficient_conditions on g, f, Line(B, D) we get concurrent(f, g, Line(B, D))
By concurrent_sufficient_conditions on j, Line(A, C), Line(A, center(c)) we get concurrent(j, Line(A, C), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(H, center(d)), Line(E, H) we get concurrent(Line(E, H), Line(H, center(c)), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(F, H), Line(A, H) we get concurrent(Line(A, H), Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(A, center(c)), j, i we get concurrent(i, j, Line(A, center(c)))
By concurrent_sufficient_conditions on Line(D, H), Line(D, center(c)), h we get concurrent(h, Line(D, H), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(C, center(d)), perpendicular_bisector(C, F), Line(H, center(d)) we get concurrent(perpendicular_bisector(C, F), Line(C, center(d)), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(F, H), Line(H, center(c)), Line(H, center(d)) we get concurrent(Line(F, H), Line(H, center(c)), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(H, center(d)), Line(F, H) we get concurrent(Line(F, H), Line(H, center(c)), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(C, center(d)), g, Line(A, C) we get concurrent(g, Line(A, C), Line(C, center(d)))
By concurrent_sufficient_conditions on i, j, Line(A, center(c)) we get concurrent(i, j, Line(A, center(c)))
By concurrent_sufficient_conditions on Line(A, H), Line(F, H), Line(H, center(d)) we get concurrent(Line(A, H), Line(F, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(d)), g we get concurrent(g, Line(E, F), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(D, H), Line(H, center(d)), Line(A, H) we get concurrent(Line(A, H), Line(D, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(C, center(c)), Line(H, center(c)) we get concurrent(Line(C, center(c)), Line(D, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(C, center(d)), Line(C, center(c)), Line(A, C) we get concurrent(Line(A, C), Line(C, center(c)), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(A, center(c)), f, Line(A, H) we get concurrent(f, Line(A, H), Line(A, center(c)))
By concurrent_sufficient_conditions on f, Line(A, C), Line(A, center(c)) we get concurrent(f, Line(A, C), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(A, C), perpendicular_bisector(C, F), Line(E, H) we get concurrent(Line(A, C), Line(E, H), perpendicular_bisector(C, F))
By concurrent_sufficient_conditions on Line(A, C), Line(B, D), perpendicular_bisector(C, F) we get concurrent(Line(A, C), Line(B, D), perpendicular_bisector(C, F))
By concurrent_sufficient_conditions on Line(A, center(c)), i, f we get concurrent(f, i, Line(A, center(c)))
By concurrent_sufficient_conditions on i, h, Line(D, center(c)) we get concurrent(h, i, Line(D, center(c)))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(H, center(d)), perpendicular_bisector(C, F) we get concurrent(perpendicular_bisector(C, F), Line(F, center(d)), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(C, H), Line(H, center(d)), Line(H, center(c)) we get concurrent(Line(C, H), Line(H, center(c)), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(E, H), perpendicular_bisector(C, F), Line(A, C) we get concurrent(Line(A, C), Line(E, H), perpendicular_bisector(C, F))
By concurrent_sufficient_conditions on Line(B, D), Line(D, G), h we get concurrent(h, Line(B, D), Line(D, G))
By concurrent_sufficient_conditions on Line(C, center(c)), Line(C, G), g we get concurrent(g, Line(C, G), Line(C, center(c)))
By concurrent_sufficient_conditions on Line(B, D), h, Line(D, center(c)) we get concurrent(h, Line(B, D), Line(D, center(c)))
By concurrent_sufficient_conditions on perpendicular_bisector(C, F), Line(E, F), Line(A, C) we get concurrent(Line(A, C), Line(E, F), perpendicular_bisector(C, F))
By concurrent_sufficient_conditions on Line(D, center(c)), h, Line(D, H) we get concurrent(h, Line(D, H), Line(D, center(c)))
By concurrent_sufficient_conditions on perpendicular_bisector(C, F), Line(E, H), Line(A, C) we get concurrent(Line(A, C), Line(E, H), perpendicular_bisector(C, F))
By concurrent_sufficient_conditions on Line(C, G), Line(C, center(d)), h we get concurrent(h, Line(C, G), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(C, H), Line(C, G), Line(C, center(d)) we get concurrent(Line(C, G), Line(C, H), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(F, H), Line(H, center(c)), Line(D, H) we get concurrent(Line(D, H), Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(C, center(d)), perpendicular_bisector(C, F), Line(F, center(d)) we get concurrent(perpendicular_bisector(C, F), Line(C, center(d)), Line(F, center(d)))
By concurrent_sufficient_conditions on f, Line(B, D), g we get concurrent(f, g, Line(B, D))
By concurrent_sufficient_conditions on Line(C, H), Line(F, H), Line(H, center(c)) we get concurrent(Line(C, H), Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(A, H), Line(C, H) we get concurrent(Line(A, H), Line(C, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(A, H), Line(H, center(d)), Line(F, H) we get concurrent(Line(A, H), Line(F, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(D, H), Line(C, H), Line(H, center(d)) we get concurrent(Line(C, H), Line(D, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(G, H), Line(E, H) we get concurrent(Line(E, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(G, H), Line(H, center(d)), Line(A, H) we get concurrent(Line(A, H), Line(G, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(E, H), perpendicular_bisector(C, F), Line(E, F) we get concurrent(Line(E, F), Line(E, H), perpendicular_bisector(C, F))
By concurrent_sufficient_conditions on Line(D, H), Line(F, H), Line(H, center(d)) we get concurrent(Line(D, H), Line(F, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(A, H), Line(A, center(c)), Line(A, C) we get concurrent(Line(A, C), Line(A, H), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(B, D), h, i we get concurrent(h, i, Line(B, D))
By concurrent_sufficient_conditions on Line(A, C), Line(C, G), Line(C, center(d)) we get concurrent(Line(A, C), Line(C, G), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(A, H), Line(H, center(c)), Line(F, H) we get concurrent(Line(A, H), Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(H, center(d)), Line(C, H), Line(H, center(c)) we get concurrent(Line(C, H), Line(H, center(c)), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(C, G), Line(A, C), Line(C, center(d)) we get concurrent(Line(A, C), Line(C, G), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(G, H), Line(D, H) we get concurrent(Line(D, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(H, center(d)), Line(G, H), Line(E, H) we get concurrent(Line(E, H), Line(G, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(H, center(d)), Line(F, H), Line(G, H) we get concurrent(Line(F, H), Line(G, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(B, D), i, h we get concurrent(h, i, Line(B, D))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(A, center(c)), Line(H, center(c)) we get concurrent(Line(A, center(c)), Line(D, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on i, Line(A, center(c)), Line(A, C) we get concurrent(i, Line(A, C), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(B, D), g, f we get concurrent(f, g, Line(B, D))
By concurrent_sufficient_conditions on Line(C, center(c)), Line(C, center(d)), h we get concurrent(h, Line(C, center(c)), Line(C, center(d)))
By concurrent_sufficient_conditions on j, Line(A, center(c)), f we get concurrent(f, j, Line(A, center(c)))
By concurrent_sufficient_conditions on Line(C, H), Line(F, H), Line(H, center(d)) we get concurrent(Line(C, H), Line(F, H), Line(H, center(d)))
By concurrent_sufficient_conditions on g, Line(B, D), f we get concurrent(f, g, Line(B, D))
By concurrent_sufficient_conditions on Line(E, H), Line(C, H), Line(H, center(d)) we get concurrent(Line(C, H), Line(E, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(D, center(c)), i, Line(B, D) we get concurrent(i, Line(B, D), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(B, D), Line(D, G), i we get concurrent(i, Line(B, D), Line(D, G))
By concurrent_sufficient_conditions on Line(A, H), Line(C, H), Line(H, center(d)) we get concurrent(Line(A, H), Line(C, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(A, H), Line(H, center(d)), Line(G, H) we get concurrent(Line(A, H), Line(G, H), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(E, H), Line(H, center(d)), Line(H, center(c)) we get concurrent(Line(E, H), Line(H, center(c)), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(A, H), Line(A, center(c)), j we get concurrent(j, Line(A, H), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(C, center(d)), Line(H, center(d)) we get concurrent(Line(C, center(d)), Line(F, center(d)), Line(H, center(d)))
By concurrent_sufficient_conditions on Line(C, G), h, Line(C, center(c)) we get concurrent(h, Line(C, G), Line(C, center(c)))
By concurrent_sufficient_conditions on Line(C, H), Line(G, H), Line(H, center(c)) we get concurrent(Line(C, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(C, center(c)), h, Line(C, H) we get concurrent(h, Line(C, H), Line(C, center(c)))
By concurrent_sufficient_conditions on Line(A, H), Line(H, center(c)), Line(G, H) we get concurrent(Line(A, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on g, Line(C, H), Line(C, center(d)) we get concurrent(g, Line(C, H), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(C, G), Line(C, center(c)), Line(C, center(d)) we get concurrent(Line(C, G), Line(C, center(c)), Line(C, center(d)))
By concurrent_sufficient_conditions on perpendicular_bisector(C, F), Line(A, C), Line(E, F) we get concurrent(Line(A, C), Line(E, F), perpendicular_bisector(C, F))
By concurrent_sufficient_conditions on i, Line(B, D), Line(D, center(c)) we get concurrent(i, Line(B, D), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(C, center(c)), Line(C, H), Line(C, center(d)) we get concurrent(Line(C, H), Line(C, center(c)), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(A, center(c)), Line(C, center(c)) we get concurrent(Line(A, center(c)), Line(C, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(C, center(d)), Line(C, G), Line(C, center(c)) we get concurrent(Line(C, G), Line(C, center(c)), Line(C, center(d)))
By concurrent_sufficient_conditions on Line(C, G), Line(G, H), Line(G, center(c)) we get concurrent(Line(C, G), Line(G, H), Line(G, center(c)))
By radical_axis_is_perpendicular_to_center_line on Line(A, C), Circle(A, C, F), c we get perpendicular(Line(A, C), Line(center(c), center(Circle(A, C, F))))
By line_intersection_definition on E, Line(E, center(c)), Line(E, F) we get E == line_intersection(Line(E, F), Line(E, center(c)))
By line_intersection_definition on center(c), Line(E, center(c)), Line(A, center(c)) we get center(c) == line_intersection(Line(A, center(c)), Line(E, center(c)))
By line_intersection_definition on B, Line(B, G), g we get B == line_intersection(g, Line(B, G))
By line_intersection_definition on center(c), Line(E, center(c)), Line(C, center(c)) we get center(c) == line_intersection(Line(C, center(c)), Line(E, center(c)))
By line_intersection_definition on center(c), Line(D, center(c)), Line(E, center(c)) we get center(c) == line_intersection(Line(D, center(c)), Line(E, center(c)))
By line_intersection_definition on E, perpendicular_bisector(C, F), Line(E, center(c)) we get E == line_intersection(perpendicular_bisector(C, F), Line(E, center(c)))
By perpendicular_line_definition on center(d), perpendicular_bisector(C, F), g we get perpendicular_bisector(C, F) == perpendicular_line(center(d), g)
By median_definition on center(d), F, C, perpendicular_bisector(C, F) we get perpendicular_bisector(C, F) == median(center(d), C, F)
By line_intersection_definition on G, Line(D, G), Line(B, G) we get G == line_intersection(Line(B, G), Line(D, G))
By line_intersection_definition on E, Line(B, D), Line(E, center(c)) we get E == line_intersection(Line(B, D), Line(E, center(c)))
By line_intersection_definition on E, Line(A, C), Line(E, center(c)) we get E == line_intersection(Line(A, C), Line(E, center(c)))
By line_intersection_definition on G, Line(G, H), Line(B, G) we get G == line_intersection(Line(B, G), Line(G, H))
By line_intersection_definition on B, Line(B, G), Line(B, D) we get B == line_intersection(Line(B, D), Line(B, G))
By perpendicular_line_definition on line_intersection(f, Line(C, G)), Line(C, G), f we get Line(C, G) == perpendicular_line(line_intersection(f, Line(C, G)), f)
By line_intersection_definition on G, j, Line(B, G) we get G == line_intersection(j, Line(B, G))
By line_intersection_definition on center(c), Line(E, center(c)), Line(G, center(c)) we get center(c) == line_intersection(Line(E, center(c)), Line(G, center(c)))
By perpendicular_line_definition on H, Line(G, H), Line(E, H) we get Line(G, H) == perpendicular_line(H, Line(E, H))
By perpendicular_line_definition on G, Line(G, H), Line(E, H) we get Line(G, H) == perpendicular_line(G, Line(E, H))
By line_intersection_definition on E, Line(E, H), Line(E, center(c)) we get E == line_intersection(Line(E, H), Line(E, center(c)))
By median_definition on midpoint(C, F), B, D, perpendicular_bisector(C, F) we get perpendicular_bisector(C, F) == median(midpoint(C, F), B, D)
By perpendicular_line_definition on F, g, perpendicular_bisector(C, F) we get g == perpendicular_line(F, perpendicular_bisector(C, F))
By perpendicular_line_definition on E, perpendicular_bisector(C, F), g we get perpendicular_line(E, g) == perpendicular_bisector(C, F)
By line_intersection_definition on G, Line(G, center(c)), Line(B, G) we get G == line_intersection(Line(B, G), Line(G, center(c)))
By line_intersection_definition on B, f, Line(B, G) we get B == line_intersection(f, Line(B, G))
By line_intersection_definition on G, Line(B, G), Line(C, G) we get G == line_intersection(Line(B, G), Line(C, G))
By median_definition on center(c), D, B, Line(E, center(c)) we get Line(E, center(c)) == median(center(c), B, D)
By perpendicular_line_definition on B, g, perpendicular_bisector(C, F) we get g == perpendicular_line(B, perpendicular_bisector(C, F))
By median_definition on E, C, F, perpendicular_bisector(C, F) we get median(E, C, F) == perpendicular_bisector(C, F)
By median_definition on midpoint(C, F), C, A, perpendicular_bisector(C, F) we get perpendicular_bisector(C, F) == median(midpoint(C, F), A, C)
By perpendicular_line_definition on line_intersection(f, Line(C, G)), f, Line(C, G) we get f == perpendicular_line(line_intersection(f, Line(C, G)), Line(C, G))
By perpendicular_line_definition on line_intersection(f, Line(C, G)), Line(C, G), h we get Line(C, G) == perpendicular_line(line_intersection(f, Line(C, G)), h)
By perpendicular_line_definition on E, Line(E, H), Line(G, H) we get Line(E, H) == perpendicular_line(E, Line(G, H))
By line_intersection_definition on center(c), Line(E, center(c)), Line(H, center(c)) we get center(c) == line_intersection(Line(E, center(c)), Line(H, center(c)))
By perpendicular_line_definition on C, g, perpendicular_bisector(C, F) we get g == perpendicular_line(C, perpendicular_bisector(C, F))
By same_angle_v0 on D, E, H, C we get angle(E, D, C) == angle(H, D, C) mod 360
By same_angle_v0 on G, A, F, B we get angle(A, G, B) == angle(F, G, B) mod 360
By same_angle_v3 on E, H, D, C we get angle(H, E, C) == angle(D, E, C) + 180 mod 360
By perpendicular_direction_conditions_v0 on G, B, A, C we get perpendicular(Line(A, C), Line(B, G))
By same_angle_v0 on D, E, H, G we get angle(E, D, G) == angle(H, D, G) mod 360
By same_angle_v1 on B, D, E, G we get angle(D, B, G) == angle(E, B, G) mod 360
By perpendicular_direction_conditions_v0 on A, D, E, center(d) we get perpendicular(Line(A, D), Line(E, center(d)))
By same_angle_v3 on E, H, D, F we get angle(H, E, F) == angle(D, E, F) + 180 mod 360
By perpendicular_direction_conditions_v0 on B, G, E, A we get perpendicular(Line(A, E), Line(B, G))
By same_angle_v0 on H, D, E, A we get angle(D, H, A) == angle(E, H, A) mod 360
By same_angle_v3 on E, D, H, A we get angle(D, E, A) == angle(H, E, A) + 180 mod 360
By perpendicular_direction_conditions_v0 on E, C, G, B we get perpendicular(Line(B, G), Line(C, E))
By same_angle_v1 on D, H, E, A we get angle(E, D, A) == angle(H, D, A) mod 360
By same_angle_v1 on B, C, F, G we get angle(C, B, G) == angle(F, B, G) mod 360
By same_angle_v1 on H, D, E, G we get angle(D, H, G) == angle(E, H, G) mod 360
By between_imply_not_between on F, midpoint(C, F), C we get collinear_and_not_between(C, F, midpoint(C, F))
By same_angle_v1 on H, E, D, F we get angle(D, H, F) == angle(E, H, F) mod 360
By between_imply_not_between on C, midpoint(C, F), F we get collinear_and_not_between(F, C, midpoint(C, F))
By parallel_line_definition on line_intersection(f, Line(C, G)), f, h we get f == parallel_line(line_intersection(f, Line(C, G)), h)
By orthocenter_concurrency on A, C, G we get orthocenter(A, C, G) in altitude(A, C, G), orthocenter(A, C, G) in altitude(C, A, G), orthocenter(A, C, G) in altitude(G, A, C)
By orthocenter_concurrency on G, B, C we get orthocenter(B, C, G) in altitude(G, B, C), orthocenter(B, C, G) in altitude(B, C, G), orthocenter(B, C, G) in altitude(C, B, G)
By orthocenter_concurrency on C, A, B we get orthocenter(A, B, C) in altitude(C, A, B), orthocenter(A, B, C) in altitude(A, B, C), orthocenter(A, B, C) in altitude(B, A, C)
By projection_definition on E, H, Line(G, H) we get H == projection(E, Line(G, H))
By projection_definition on G, H, Line(E, H) we get H == projection(G, Line(E, H))
By collinear_definition on H, E, D we get E in Line(D, H), D in Line(E, H), Line(D, H) == Line(E, H), 0 == 2 * angle(E, H, D) mod 360
By orthocenter_concurrency on G, B, A we get orthocenter(A, B, G) in altitude(G, A, B), orthocenter(A, B, G) in altitude(B, A, G), orthocenter(A, B, G) in altitude(A, B, G)
By probably_between_and_collinear_implies_between on D, E, H we get between(D, E, H)
By in_imply_collinear on midpoint(C, F), center(d), E we get collinear(E, center(d), midpoint(C, F))
By in_imply_collinear on line_intersection(f, Line(C, G)), B, A we get collinear(A, B, line_intersection(f, Line(C, G)))
By in_imply_collinear on line_intersection(f, Line(C, G)), C, G we get collinear(C, G, line_intersection(f, Line(C, G)))
By perpendicular_angle_conditions_v0 on E, H, G we get angle(E, H, G) == orientation(E, H, G) mod 360
By collinear_definition on E, D, H we get D in Line(E, H), H in Line(D, E), Line(D, E) == Line(E, H), 0 == 2 * angle(D, E, H) mod 360
By double_perpendicular_and_parallel_v0 on Line(D, H), Line(G, H), Line(E, H) we get parallel(Line(D, H), Line(E, H))
By collinear_definition on D, center(c), G we get center(c) in Line(D, G), G in Line(D, center(c)), Line(D, G) == Line(D, center(c)), 0 == 2 * angle(center(c), D, G) mod 360
By collinear_definition on G, D, center(c) we get D in Line(G, center(c)), center(c) in Line(D, G), Line(D, G) == Line(G, center(c)), 0 == 2 * angle(D, G, center(c)) mod 360
By perpendicular_angle_conditions_v0 on G, H, E we get angle(G, H, E) == orientation(E, G, H) mod 360
By double_perpendicular_and_parallel_v0 on j, g, perpendicular_bisector(C, F) we get parallel(j, perpendicular_bisector(C, F))
By double_perpendicular_and_parallel_v0_r on g, perpendicular_bisector(C, F), i we get perpendicular(i, perpendicular_bisector(C, F))
By collinear_definition on D, E, H we get E in Line(D, H), H in Line(D, E), Line(D, E) == Line(D, H), 0 == 2 * angle(E, D, H) mod 360
By collinear_definition on D, G, center(c) we get G in Line(D, center(c)), center(c) in Line(D, G), Line(D, G) == Line(D, center(c)), 0 == 2 * angle(G, D, center(c)) mod 360
By collinear_definition on G, center(c), D we get center(c) in Line(D, G), D in Line(G, center(c)), Line(D, G) == Line(G, center(c)), 0 == 2 * angle(center(c), G, D) mod 360
By collinear_definition on H, D, E we get D in Line(E, H), E in Line(D, H), Line(D, H) == Line(E, H), 0 == 2 * angle(D, H, E) mod 360
By collinear_definition on center(c), G, D we get G in Line(D, center(c)), D in Line(G, center(c)), Line(D, center(c)) == Line(G, center(c)), 0 == 2 * angle(G, center(c), D) mod 360
By collinear_definition on E, H, D we get H in Line(D, E), D in Line(E, H), Line(D, E) == Line(E, H), 0 == 2 * angle(H, E, D) mod 360
By collinear_definition on D, H, E we get H in Line(D, E), E in Line(D, H), Line(D, E) == Line(D, H), 0 == 2 * angle(H, D, E) mod 360
By log_of_2_times_distance on C, F, F, midpoint(C, F) we get log(distance(C, F)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(F, midpoint(C, F)))
By anti_similar_triangle_basic_properties on G, C, D, G, F, B we get angle(G, C, D) == 0 - angle(G, F, B) mod 360, angle(C, D, G) == 0 - angle(F, B, G) mod 360, angle(D, G, C) == 0 - angle(B, G, F) mod 360, log(distance(C, G)) + log(distance(B, F)) == log(distance(F, G)) + log(distance(C, D)), log(distance(B, F)) + log(distance(D, G)) == log(distance(C, D)) + log(distance(B, G)), log(distance(B, G)) + log(distance(C, G)) == log(distance(D, G)) + log(distance(F, G))
By internal_angle_bisector_definition_v0_r on F, center(d), C, E we get internal_angle_bisector(C, E, F) == Line(E, center(d))
By similar_triangle_basic_properties on B, G, F, A, C, F we get angle(A, C, F) == angle(B, G, F) mod 360, angle(C, F, A) == angle(G, F, B) mod 360, angle(F, A, C) == angle(F, B, G) mod 360, log(distance(A, C)) + log(distance(F, G)) == log(distance(B, G)) + log(distance(C, F)), log(distance(C, F)) + log(distance(B, F)) == log(distance(F, G)) + log(distance(A, F)), log(distance(A, F)) + log(distance(B, G)) == log(distance(B, F)) + log(distance(A, C))
By similar_triangle_basic_properties on B, F, G, A, F, C we get angle(A, F, C) == angle(B, F, G) mod 360, angle(F, C, A) == angle(F, G, B) mod 360, angle(C, A, F) == angle(G, B, F) mod 360, log(distance(A, F)) + log(distance(F, G)) == log(distance(B, F)) + log(distance(C, F)), log(distance(C, F)) + log(distance(B, G)) == log(distance(F, G)) + log(distance(A, C)), log(distance(A, C)) + log(distance(B, F)) == log(distance(B, G)) + log(distance(A, F))
By collinear_definition on C, F, midpoint(C, F) we get F in Line(C, midpoint(C, F)), midpoint(C, F) in Line(C, F), Line(C, F) == Line(C, midpoint(C, F)), 0 == 2 * angle(F, C, midpoint(C, F)) mod 360
By power_of_a_point_definition on E, H, D, c we get log(power_of_a_point(E, c)) == log(distance(E, H)) + log(distance(D, E))
By anti_similar_triangle_basic_properties on C, G, D, F, G, B we get angle(C, G, D) == 0 - angle(F, G, B) mod 360, angle(G, D, C) == 0 - angle(G, B, F) mod 360, angle(D, C, G) == 0 - angle(B, F, G) mod 360, log(distance(C, G)) + log(distance(B, G)) == log(distance(F, G)) + log(distance(D, G)), log(distance(B, G)) + log(distance(C, D)) == log(distance(D, G)) + log(distance(B, F)), log(distance(B, F)) + log(distance(C, G)) == log(distance(C, D)) + log(distance(F, G))
By internal_angle_bisector_definition_v0_r on E, D, E, B we get Line(B, D) == internal_angle_bisector(E, B, E)
By log_of_2_times_distance on F, C, C, midpoint(C, F) we get log(distance(C, F)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(C, midpoint(C, F)))
By internal_angle_bisector_definition_v0_r on D, E, D, B we get Line(B, E) == internal_angle_bisector(D, B, D)
By internal_angle_bisector_definition_v0_r on B, E, B, D we get Line(D, E) == internal_angle_bisector(B, D, B)
By isosceles_triangle_midpoint on E, C, F we get midpoint(C, F) in median(E, C, F)
By collinear_definition on C, midpoint(C, F), F we get midpoint(C, F) in Line(C, F), F in Line(C, midpoint(C, F)), Line(C, F) == Line(C, midpoint(C, F)), 0 == 2 * angle(midpoint(C, F), C, F) mod 360
By isosceles_triangle_midpoint on center(d), F, C we get midpoint(C, F) in median(center(d), C, F)
By collinear_definition on F, C, midpoint(C, F) we get C in Line(F, midpoint(C, F)), midpoint(C, F) in Line(C, F), Line(C, F) == Line(F, midpoint(C, F)), 0 == 2 * angle(C, F, midpoint(C, F)) mod 360
By collinear_definition on F, midpoint(C, F), C we get midpoint(C, F) in Line(C, F), C in Line(F, midpoint(C, F)), Line(C, F) == Line(F, midpoint(C, F)), 0 == 2 * angle(midpoint(C, F), F, C) mod 360
By perpendicular_lines_draw_intersection on g, perpendicular_bisector(C, F) we get exists(line_intersection(g, perpendicular_bisector(C, F)))
By internal_angle_bisector_definition_v0_r on D, B, D, E we get Line(B, E) == internal_angle_bisector(D, E, D)
By internal_angle_bisector_definition_v0_r on E, B, E, D we get Line(B, D) == internal_angle_bisector(E, D, E)
By perpendicular_bisector_properties on F, C we get perpendicular(Line(C, F), perpendicular_bisector(C, F)), midpoint(C, F) == line_intersection(Line(C, F), perpendicular_bisector(C, F))
By internal_angle_bisector_definition_v0_r on B, D, B, E we get Line(D, E) == internal_angle_bisector(B, E, B)
By isosceles_triangle_altitude_v2 on center(d), C, F we get identical(perpendicular_bisector(C, F), internal_angle_bisector(C, center(d), F), perpendicular_line(center(d), Line(C, F)))
By isosceles_triangle_altitude_v3 on center(d), C, F we get identical(perpendicular_bisector(C, F), internal_angle_bisector(C, center(d), F), perpendicular_line(center(d), Line(C, F)))
By isosceles_triangle_altitude_v2 on center(d), F, C we get identical(perpendicular_bisector(C, F), internal_angle_bisector(C, center(d), F), perpendicular_line(center(d), Line(C, F)))
By isosceles_triangle_altitude_v3 on center(d), F, C we get identical(perpendicular_bisector(C, F), internal_angle_bisector(C, center(d), F), perpendicular_line(center(d), Line(C, F)))
By altitude_definition on line_intersection(f, Line(C, G)), D, C, Line(C, G) we get Line(C, G) == altitude(line_intersection(f, Line(C, G)), C, D)
By anti_similar_triangle_basic_properties on center(d), F, E, center(d), E, F we get angle(center(d), F, E) == 0 - angle(center(d), E, F) mod 360, angle(F, E, center(d)) == 0 - angle(E, F, center(d)) mod 360, angle(E, center(d), F) == 0 - angle(F, center(d), E) mod 360, log(distance(E, center(d))) + log(distance(E, F)) == log(distance(F, center(d))) + log(distance(E, F)), log(distance(E, F)) + log(distance(E, center(d))) == log(distance(E, F)) + log(distance(F, center(d))), log(distance(E, center(d))) + log(distance(E, center(d))) == log(distance(F, center(d))) + log(distance(F, center(d)))
By altitude_definition on E, B, F, perpendicular_bisector(C, F) we get altitude(E, B, F) == perpendicular_bisector(C, F)
By altitude_definition on center(d), C, B, perpendicular_bisector(C, F) we get perpendicular_bisector(C, F) == altitude(center(d), B, C)
By altitude_definition on F, E, center(d), g we get g == altitude(F, E, center(d))
By altitude_definition on E, F, C, perpendicular_bisector(C, F) we get altitude(E, C, F) == perpendicular_bisector(C, F)
By anti_similar_triangle_basic_properties on D, A, center(c), A, D, center(c) we get angle(D, A, center(c)) == 0 - angle(A, D, center(c)) mod 360, angle(A, center(c), D) == 0 - angle(D, center(c), A) mod 360, angle(center(c), D, A) == 0 - angle(center(c), A, D) mod 360, log(distance(A, D)) + log(distance(A, center(c))) == log(distance(A, D)) + log(distance(D, center(c))), log(distance(A, center(c))) + log(distance(A, center(c))) == log(distance(D, center(c))) + log(distance(D, center(c))), log(distance(A, center(c))) + log(distance(A, D)) == log(distance(D, center(c))) + log(distance(A, D))
By altitude_definition on B, center(d), E, g we get g == altitude(B, E, center(d))
By anti_similar_triangle_basic_properties on center(d), E, C, center(d), C, E we get angle(center(d), E, C) == 0 - angle(center(d), C, E) mod 360, angle(E, C, center(d)) == 0 - angle(C, E, center(d)) mod 360, angle(C, center(d), E) == 0 - angle(E, center(d), C) mod 360, log(distance(C, center(d))) + log(distance(C, E)) == log(distance(E, center(d))) + log(distance(C, E)), log(distance(C, E)) + log(distance(C, center(d))) == log(distance(C, E)) + log(distance(E, center(d))), log(distance(C, center(d))) + log(distance(C, center(d))) == log(distance(E, center(d))) + log(distance(E, center(d)))
By isosceles_triangle_altitude_v3 on E, F, C we get identical(perpendicular_bisector(C, F), internal_angle_bisector(C, E, F), perpendicular_line(E, Line(C, F)))
By perpendicular_bisector_sufficient_conditions on A, C, E, center(c) we get perpendicular_bisector(A, C) == Line(E, center(c))
By altitude_definition on center(d), B, F, perpendicular_bisector(C, F) we get perpendicular_bisector(C, F) == altitude(center(d), B, F)
By altitude_definition on E, B, C, perpendicular_bisector(C, F) we get altitude(E, B, C) == perpendicular_bisector(C, F)
By anti_similar_triangle_basic_properties on G, center(c), A, A, center(c), G we get angle(G, center(c), A) == 0 - angle(A, center(c), G) mod 360, angle(center(c), A, G) == 0 - angle(center(c), G, A) mod 360, angle(A, G, center(c)) == 0 - angle(G, A, center(c)) mod 360, log(distance(A, center(c))) + log(distance(A, center(c))) == log(distance(G, center(c))) + log(distance(G, center(c))), log(distance(A, center(c))) + log(distance(A, G)) == log(distance(G, center(c))) + log(distance(A, G)), log(distance(A, G)) + log(distance(A, center(c))) == log(distance(A, G)) + log(distance(G, center(c)))
By anti_similar_triangle_basic_properties on center(c), D, C, center(c), C, D we get angle(center(c), D, C) == 0 - angle(center(c), C, D) mod 360, angle(D, C, center(c)) == 0 - angle(C, D, center(c)) mod 360, angle(C, center(c), D) == 0 - angle(D, center(c), C) mod 360, log(distance(C, center(c))) + log(distance(C, D)) == log(distance(D, center(c))) + log(distance(C, D)), log(distance(C, D)) + log(distance(C, center(c))) == log(distance(C, D)) + log(distance(D, center(c))), log(distance(C, center(c))) + log(distance(C, center(c))) == log(distance(D, center(c))) + log(distance(D, center(c)))
By altitude_definition on E, H, G, Line(E, H) we get Line(E, H) == altitude(E, G, H)
By anti_similar_triangle_basic_properties on C, F, center(d), F, C, center(d) we get angle(C, F, center(d)) == 0 - angle(F, C, center(d)) mod 360, angle(F, center(d), C) == 0 - angle(C, center(d), F) mod 360, angle(center(d), C, F) == 0 - angle(center(d), F, C) mod 360, log(distance(C, F)) + log(distance(C, center(d))) == log(distance(C, F)) + log(distance(F, center(d))), log(distance(C, center(d))) + log(distance(C, center(d))) == log(distance(F, center(d))) + log(distance(F, center(d))), log(distance(C, center(d))) + log(distance(C, F)) == log(distance(F, center(d))) + log(distance(C, F))
By anti_similar_triangle_basic_properties on center(c), C, A, center(c), A, C we get angle(center(c), C, A) == 0 - angle(center(c), A, C) mod 360, angle(C, A, center(c)) == 0 - angle(A, C, center(c)) mod 360, angle(A, center(c), C) == 0 - angle(C, center(c), A) mod 360, log(distance(A, center(c))) + log(distance(A, C)) == log(distance(C, center(c))) + log(distance(A, C)), log(distance(A, C)) + log(distance(A, center(c))) == log(distance(A, C)) + log(distance(C, center(c))), log(distance(A, center(c))) + log(distance(A, center(c))) == log(distance(C, center(c))) + log(distance(C, center(c)))
By anti_similar_triangle_basic_properties on C, center(c), G, G, center(c), C we get angle(C, center(c), G) == 0 - angle(G, center(c), C) mod 360, angle(center(c), G, C) == 0 - angle(center(c), C, G) mod 360, angle(G, C, center(c)) == 0 - angle(C, G, center(c)) mod 360, log(distance(C, center(c))) + log(distance(C, center(c))) == log(distance(G, center(c))) + log(distance(G, center(c))), log(distance(C, center(c))) + log(distance(C, G)) == log(distance(G, center(c))) + log(distance(C, G)), log(distance(C, G)) + log(distance(C, center(c))) == log(distance(C, G)) + log(distance(G, center(c)))
By altitude_definition on C, center(d), E, g we get g == altitude(C, E, center(d))
By altitude_definition on G, H, E, Line(G, H) we get Line(G, H) == altitude(G, E, H)
By altitude_definition on center(d), C, F, perpendicular_bisector(C, F) we get perpendicular_bisector(C, F) == altitude(center(d), C, F)
By isosceles_triangle_altitude_v3 on E, C, F we get identical(perpendicular_bisector(C, F), internal_angle_bisector(C, E, F), perpendicular_line(E, Line(C, F)))
By collinear_definition on midpoint(C, F), C, F we get C in Line(F, midpoint(C, F)), F in Line(C, midpoint(C, F)), Line(C, midpoint(C, F)) == Line(F, midpoint(C, F)), 0 == 2 * angle(C, midpoint(C, F), F) mod 360
By collinear_definition on midpoint(C, F), F, C we get F in Line(C, midpoint(C, F)), C in Line(F, midpoint(C, F)), Line(C, midpoint(C, F)) == Line(F, midpoint(C, F)), 0 == 2 * angle(F, midpoint(C, F), C) mod 360
By anti_similar_triangle_basic_properties on H, center(c), G, G, center(c), H we get angle(H, center(c), G) == 0 - angle(G, center(c), H) mod 360, angle(center(c), G, H) == 0 - angle(center(c), H, G) mod 360, angle(G, H, center(c)) == 0 - angle(H, G, center(c)) mod 360, log(distance(G, center(c))) + log(distance(G, center(c))) == log(distance(H, center(c))) + log(distance(H, center(c))), log(distance(G, center(c))) + log(distance(G, H)) == log(distance(H, center(c))) + log(distance(G, H)), log(distance(G, H)) + log(distance(G, center(c))) == log(distance(G, H)) + log(distance(H, center(c)))
By similar_triangle_basic_properties on center(d), E, F, center(d), C, E we get angle(center(d), C, E) == angle(center(d), E, F) mod 360, angle(C, E, center(d)) == angle(E, F, center(d)) mod 360, angle(E, center(d), C) == angle(F, center(d), E) mod 360, log(distance(C, center(d))) + log(distance(E, F)) == log(distance(E, center(d))) + log(distance(C, E)), log(distance(C, E)) + log(distance(F, center(d))) == log(distance(E, F)) + log(distance(E, center(d))), log(distance(E, center(d))) + log(distance(E, center(d))) == log(distance(F, center(d))) + log(distance(C, center(d)))
By anti_similar_triangle_basic_properties on H, D, center(c), D, H, center(c) we get angle(H, D, center(c)) == 0 - angle(D, H, center(c)) mod 360, angle(D, center(c), H) == 0 - angle(H, center(c), D) mod 360, angle(center(c), H, D) == 0 - angle(center(c), D, H) mod 360, log(distance(D, H)) + log(distance(D, center(c))) == log(distance(D, H)) + log(distance(H, center(c))), log(distance(D, center(c))) + log(distance(D, center(c))) == log(distance(H, center(c))) + log(distance(H, center(c))), log(distance(D, center(c))) + log(distance(D, H)) == log(distance(H, center(c))) + log(distance(D, H))
By anti_similar_triangle_basic_properties on center(c), H, C, center(c), C, H we get angle(center(c), H, C) == 0 - angle(center(c), C, H) mod 360, angle(H, C, center(c)) == 0 - angle(C, H, center(c)) mod 360, angle(C, center(c), H) == 0 - angle(H, center(c), C) mod 360, log(distance(C, center(c))) + log(distance(C, H)) == log(distance(H, center(c))) + log(distance(C, H)), log(distance(C, H)) + log(distance(C, center(c))) == log(distance(C, H)) + log(distance(H, center(c))), log(distance(C, center(c))) + log(distance(C, center(c))) == log(distance(H, center(c))) + log(distance(H, center(c)))
By anti_similar_triangle_basic_properties on H, center(d), F, F, center(d), H we get angle(H, center(d), F) == 0 - angle(F, center(d), H) mod 360, angle(center(d), F, H) == 0 - angle(center(d), H, F) mod 360, angle(F, H, center(d)) == 0 - angle(H, F, center(d)) mod 360, log(distance(F, center(d))) + log(distance(F, center(d))) == log(distance(H, center(d))) + log(distance(H, center(d))), log(distance(F, center(d))) + log(distance(F, H)) == log(distance(H, center(d))) + log(distance(F, H)), log(distance(F, H)) + log(distance(F, center(d))) == log(distance(F, H)) + log(distance(H, center(d)))
By anti_similar_triangle_basic_properties on H, center(d), C, C, center(d), H we get angle(H, center(d), C) == 0 - angle(C, center(d), H) mod 360, angle(center(d), C, H) == 0 - angle(center(d), H, C) mod 360, angle(C, H, center(d)) == 0 - angle(H, C, center(d)) mod 360, log(distance(C, center(d))) + log(distance(C, center(d))) == log(distance(H, center(d))) + log(distance(H, center(d))), log(distance(C, center(d))) + log(distance(C, H)) == log(distance(H, center(d))) + log(distance(C, H)), log(distance(C, H)) + log(distance(C, center(d))) == log(distance(C, H)) + log(distance(H, center(d)))
By anti_similar_triangle_basic_properties on E, F, center(d), E, C, center(d) we get angle(E, F, center(d)) == 0 - angle(E, C, center(d)) mod 360, angle(F, center(d), E) == 0 - angle(C, center(d), E) mod 360, angle(center(d), E, F) == 0 - angle(center(d), E, C) mod 360, log(distance(C, E)) + log(distance(F, center(d))) == log(distance(E, F)) + log(distance(C, center(d))), log(distance(C, center(d))) + log(distance(E, center(d))) == log(distance(F, center(d))) + log(distance(E, center(d))), log(distance(E, center(d))) + log(distance(C, E)) == log(distance(E, center(d))) + log(distance(E, F))
By similar_triangle_basic_properties on C, center(d), E, E, center(d), F we get angle(C, center(d), E) == angle(E, center(d), F) mod 360, angle(center(d), E, C) == angle(center(d), F, E) mod 360, angle(E, C, center(d)) == angle(F, E, center(d)) mod 360, log(distance(C, center(d))) + log(distance(F, center(d))) == log(distance(E, center(d))) + log(distance(E, center(d))), log(distance(E, center(d))) + log(distance(E, F)) == log(distance(F, center(d))) + log(distance(C, E)), log(distance(C, E)) + log(distance(E, center(d))) == log(distance(E, F)) + log(distance(C, center(d)))
By anti_similar_triangle_basic_properties on H, center(c), A, A, center(c), H we get angle(H, center(c), A) == 0 - angle(A, center(c), H) mod 360, angle(center(c), A, H) == 0 - angle(center(c), H, A) mod 360, angle(A, H, center(c)) == 0 - angle(H, A, center(c)) mod 360, log(distance(A, center(c))) + log(distance(A, center(c))) == log(distance(H, center(c))) + log(distance(H, center(c))), log(distance(A, center(c))) + log(distance(A, H)) == log(distance(H, center(c))) + log(distance(A, H)), log(distance(A, H)) + log(distance(A, center(c))) == log(distance(A, H)) + log(distance(H, center(c)))
By anti_similar_triangle_basic_properties on E, center(d), C, E, center(d), F we get angle(E, center(d), C) == 0 - angle(E, center(d), F) mod 360, angle(center(d), C, E) == 0 - angle(center(d), F, E) mod 360, angle(C, E, center(d)) == 0 - angle(F, E, center(d)) mod 360, log(distance(E, center(d))) + log(distance(C, center(d))) == log(distance(E, center(d))) + log(distance(F, center(d))), log(distance(C, center(d))) + log(distance(E, F)) == log(distance(F, center(d))) + log(distance(C, E)), log(distance(C, E)) + log(distance(E, center(d))) == log(distance(E, F)) + log(distance(E, center(d)))
By anti_similar_triangle_basic_properties on H, center(d), E, E, center(d), H we get angle(H, center(d), E) == 0 - angle(E, center(d), H) mod 360, angle(center(d), E, H) == 0 - angle(center(d), H, E) mod 360, angle(E, H, center(d)) == 0 - angle(H, E, center(d)) mod 360, log(distance(E, center(d))) + log(distance(E, center(d))) == log(distance(H, center(d))) + log(distance(H, center(d))), log(distance(E, center(d))) + log(distance(E, H)) == log(distance(H, center(d))) + log(distance(E, H)), log(distance(E, H)) + log(distance(E, center(d))) == log(distance(E, H)) + log(distance(H, center(d)))
By power_of_a_point_definition on D, H, E, d we get log(power_of_a_point(D, d)) == log(distance(D, H)) + log(distance(D, E))
By power_of_a_point_definition on center(c), G, D, c we get log(power_of_a_point(center(c), c)) == log(distance(G, center(c))) + log(distance(D, center(c)))
By between_implies_angles on C, midpoint(C, F), F we get 180 == angle(C, midpoint(C, F), F) mod 360, 0 == angle(midpoint(C, F), F, C) mod 360, 0 == angle(F, C, midpoint(C, F)) mod 360
By power_of_a_point_definition on midpoint(C, F), C, F, d we get log(power_of_a_point(midpoint(C, F), d)) == log(distance(C, midpoint(C, F))) + log(distance(F, midpoint(C, F)))
By between_implies_angles on F, midpoint(C, F), C we get 180 == angle(F, midpoint(C, F), C) mod 360, 0 == angle(midpoint(C, F), C, F) mod 360, 0 == angle(C, F, midpoint(C, F)) mod 360
By power_of_a_point_definition on midpoint(C, F), C, F, Circle(A, C, F) we get log(power_of_a_point(midpoint(C, F), Circle(A, C, F))) == log(distance(C, midpoint(C, F))) + log(distance(F, midpoint(C, F)))
By isosceles_triangle_altitude_v0 on center(c), C, A we get identical(perpendicular_bisector(A, C), internal_angle_bisector(A, center(c), C), perpendicular_line(center(c), Line(A, C)))
By isosceles_triangle_altitude_v0 on center(c), A, C we get identical(perpendicular_bisector(A, C), internal_angle_bisector(A, center(c), C), perpendicular_line(center(c), Line(A, C)))
By concurrent_sufficient_conditions on Line(C, center(c)), Line(H, center(c)), perpendicular_bisector(A, C) we get concurrent(perpendicular_bisector(A, C), Line(C, center(c)), Line(H, center(c)))
By line_definition on orthocenter(A, B, G), F, g we get g == Line(F, orthocenter(A, B, G))
By line_definition on orthocenter(B, C, G), line_intersection(f, Line(C, G)), f we get f == Line(orthocenter(B, C, G), line_intersection(f, Line(C, G)))
By perpendicular_line_definition on B, Line(B, G), Line(A, C) we get Line(B, G) == perpendicular_line(B, Line(A, C))
By line_definition on F, orthocenter(B, C, G), j we get j == Line(F, orthocenter(B, C, G))
By concurrent_sufficient_conditions on Line(A, C), Line(E, F), perpendicular_bisector(A, C) we get concurrent(Line(A, C), Line(E, F), perpendicular_bisector(A, C))
By concurrent_sufficient_conditions on Line(C, center(c)), perpendicular_bisector(A, C), Line(H, center(c)) we get concurrent(perpendicular_bisector(A, C), Line(C, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(C, center(c)), perpendicular_bisector(A, C), Line(D, G) we get concurrent(Line(D, G), perpendicular_bisector(A, C), Line(C, center(c)))
By line_definition on orthocenter(B, C, G), orthocenter(A, B, C), j we get j == Line(orthocenter(A, B, C), orthocenter(B, C, G))
By concurrent_sufficient_conditions on j, Line(B, G), Line(C, G) we get concurrent(j, Line(B, G), Line(C, G))
By concurrent_sufficient_conditions on perpendicular_bisector(A, C), Line(A, C), Line(E, F) we get concurrent(Line(A, C), Line(E, F), perpendicular_bisector(A, C))
By concurrent_sufficient_conditions on Line(G, H), Line(B, G), j we get concurrent(j, Line(B, G), Line(G, H))
By concurrent_sufficient_conditions on perpendicular_bisector(A, C), Line(A, center(c)), Line(C, center(c)) we get concurrent(perpendicular_bisector(A, C), Line(A, center(c)), Line(C, center(c)))
By line_definition on B, orthocenter(A, B, C), altitude(B, A, C) we get altitude(B, A, C) == Line(B, orthocenter(A, B, C))
By concurrent_sufficient_conditions on Line(D, G), Line(B, G), Line(G, H) we get concurrent(Line(B, G), Line(D, G), Line(G, H))
By concurrent_sufficient_conditions on Line(B, D), Line(B, G), f we get concurrent(f, Line(B, D), Line(B, G))
By concurrent_sufficient_conditions on Line(D, G), Line(H, center(c)), perpendicular_bisector(A, C) we get concurrent(Line(D, G), perpendicular_bisector(A, C), Line(H, center(c)))
By line_definition on orthocenter(B, C, G), orthocenter(A, C, G), f we get f == Line(orthocenter(A, C, G), orthocenter(B, C, G))
By concurrent_sufficient_conditions on perpendicular_bisector(A, C), Line(C, center(c)), Line(H, center(c)) we get concurrent(perpendicular_bisector(A, C), Line(C, center(c)), Line(H, center(c)))
By line_definition on F, orthocenter(A, B, C), j we get j == Line(F, orthocenter(A, B, C))
By concurrent_sufficient_conditions on j, Line(B, G), Line(D, G) we get concurrent(j, Line(B, G), Line(D, G))
By concurrent_sufficient_conditions on Line(H, center(c)), perpendicular_bisector(A, C), Line(A, center(c)) we get concurrent(perpendicular_bisector(A, C), Line(A, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(C, G), Line(B, G), Line(G, H) we get concurrent(Line(B, G), Line(C, G), Line(G, H))
By concurrent_sufficient_conditions on perpendicular_bisector(A, C), Line(D, G), Line(A, center(c)) we get concurrent(Line(D, G), perpendicular_bisector(A, C), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(B, D), Line(E, F), perpendicular_bisector(A, C) we get concurrent(Line(B, D), Line(E, F), perpendicular_bisector(A, C))
By line_definition on orthocenter(A, B, G), orthocenter(A, C, G), g we get g == Line(orthocenter(A, B, G), orthocenter(A, C, G))
By concurrent_sufficient_conditions on f, Line(B, G), Line(B, D) we get concurrent(f, Line(B, D), Line(B, G))
By concurrent_sufficient_conditions on Line(A, center(c)), perpendicular_bisector(A, C), Line(C, center(c)) we get concurrent(perpendicular_bisector(A, C), Line(A, center(c)), Line(C, center(c)))
By line_definition on orthocenter(A, B, C), orthocenter(A, B, G), Line(C, G) we get Line(C, G) == Line(orthocenter(A, B, C), orthocenter(A, B, G))
By line_definition on G, orthocenter(A, C, G), altitude(G, A, C) we get altitude(G, A, C) == Line(G, orthocenter(A, C, G))
By concurrent_sufficient_conditions on Line(B, G), g, f we get concurrent(f, g, Line(B, G))
By concurrent_sufficient_conditions on median(E, C, F), perpendicular_bisector(A, C), Line(B, D) we get concurrent(Line(B, D), median(E, C, F), perpendicular_bisector(A, C))
By line_definition on F, orthocenter(A, C, G), g we get g == Line(F, orthocenter(A, C, G))
By concurrent_sufficient_conditions on Line(C, G), Line(D, G), Line(B, G) we get concurrent(Line(B, G), Line(C, G), Line(D, G))
By concurrent_sufficient_conditions on Line(A, C), perpendicular_bisector(A, C), Line(E, F) we get concurrent(Line(A, C), Line(E, F), perpendicular_bisector(A, C))
By line_definition on A, orthocenter(A, B, G), altitude(A, B, G) we get altitude(A, B, G) == Line(A, orthocenter(A, B, G))
By concurrent_sufficient_conditions on perpendicular_bisector(A, C), Line(C, center(c)), Line(D, G) we get concurrent(Line(D, G), perpendicular_bisector(A, C), Line(C, center(c)))
By concurrent_sufficient_conditions on Line(B, G), Line(B, D), g we get concurrent(g, Line(B, D), Line(B, G))
By concurrent_sufficient_conditions on Line(D, G), Line(C, G), Line(B, G) we get concurrent(Line(B, G), Line(C, G), Line(D, G))
By concurrent_sufficient_conditions on Line(B, G), Line(G, H), j we get concurrent(j, Line(B, G), Line(G, H))
By line_definition on line_intersection(f, Line(C, G)), orthocenter(A, C, G), f we get f == Line(orthocenter(A, C, G), line_intersection(f, Line(C, G)))
By line_definition on B, midpoint(C, F), g we get g == Line(B, midpoint(C, F))
By concurrent_sufficient_conditions on Line(C, center(c)), perpendicular_bisector(A, C), Line(A, center(c)) we get concurrent(perpendicular_bisector(A, C), Line(A, center(c)), Line(C, center(c)))
By concurrent_sufficient_conditions on j, Line(G, H), Line(B, G) we get concurrent(j, Line(B, G), Line(G, H))
By line_definition on C, orthocenter(B, C, G), altitude(C, B, G) we get altitude(C, B, G) == Line(C, orthocenter(B, C, G))
By concurrent_sufficient_conditions on Line(D, G), Line(G, H), Line(B, G) we get concurrent(Line(B, G), Line(D, G), Line(G, H))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(D, G), perpendicular_bisector(A, C) we get concurrent(Line(D, G), perpendicular_bisector(A, C), Line(H, center(c)))
By line_definition on B, H, Line(B, D) we get Line(B, D) == Line(B, H)
By line_definition on A, orthocenter(A, B, C), j we get j == Line(A, orthocenter(A, B, C))
By concurrent_sufficient_conditions on Line(E, F), median(E, C, F), perpendicular_bisector(A, C) we get concurrent(Line(E, F), median(E, C, F), perpendicular_bisector(A, C))
By line_definition on midpoint(C, F), orthocenter(A, C, G), g we get g == Line(midpoint(C, F), orthocenter(A, C, G))
By concurrent_sufficient_conditions on median(E, C, F), perpendicular_bisector(A, C), Line(A, C) we get concurrent(Line(A, C), median(E, C, F), perpendicular_bisector(A, C))
By line_definition on C, orthocenter(A, C, G), g we get g == Line(C, orthocenter(A, C, G))
By concurrent_sufficient_conditions on Line(E, F), Line(B, D), perpendicular_bisector(A, C) we get concurrent(Line(B, D), Line(E, F), perpendicular_bisector(A, C))
By concurrent_sufficient_conditions on perpendicular_bisector(A, C), Line(B, D), Line(E, F) we get concurrent(Line(B, D), Line(E, F), perpendicular_bisector(A, C))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(D, G), perpendicular_bisector(A, C) we get concurrent(Line(D, G), perpendicular_bisector(A, C), Line(A, center(c)))
By concurrent_sufficient_conditions on perpendicular_bisector(A, C), Line(D, G), Line(C, center(c)) we get concurrent(Line(D, G), perpendicular_bisector(A, C), Line(C, center(c)))
By concurrent_sufficient_conditions on Line(B, D), perpendicular_bisector(A, C), median(E, C, F) we get concurrent(Line(B, D), median(E, C, F), perpendicular_bisector(A, C))
By concurrent_sufficient_conditions on perpendicular_bisector(A, C), Line(A, C), Line(B, D) we get concurrent(Line(A, C), Line(B, D), perpendicular_bisector(A, C))
By concurrent_sufficient_conditions on perpendicular_bisector(A, C), median(E, C, F), Line(E, F) we get concurrent(Line(E, F), median(E, C, F), perpendicular_bisector(A, C))
By concurrent_sufficient_conditions on Line(B, G), f, g we get concurrent(f, g, Line(B, G))
By concurrent_sufficient_conditions on Line(A, C), median(E, C, F), perpendicular_bisector(A, C) we get concurrent(Line(A, C), median(E, C, F), perpendicular_bisector(A, C))
By line_definition on orthocenter(A, B, G), B, g we get g == Line(B, orthocenter(A, B, G))
By concurrent_sufficient_conditions on g, Line(B, G), Line(B, D) we get concurrent(g, Line(B, D), Line(B, G))
By concurrent_sufficient_conditions on j, Line(B, G), Line(G, H) we get concurrent(j, Line(B, G), Line(G, H))
By concurrent_sufficient_conditions on Line(G, H), Line(B, G), Line(D, G) we get concurrent(Line(B, G), Line(D, G), Line(G, H))
By concurrent_sufficient_conditions on perpendicular_bisector(A, C), Line(E, F), median(E, C, F) we get concurrent(Line(E, F), median(E, C, F), perpendicular_bisector(A, C))
By line_definition on A, orthocenter(A, C, G), f we get f == Line(A, orthocenter(A, C, G))
By line_definition on orthocenter(A, B, C), line_intersection(f, Line(C, G)), Line(C, G) we get Line(C, G) == Line(orthocenter(A, B, C), line_intersection(f, Line(C, G)))
By line_intersection_definition on orthocenter(A, B, G), Line(C, G), g we get orthocenter(A, B, G) == line_intersection(g, Line(C, G))
By concurrent_sufficient_conditions on Line(B, G), Line(G, H), Line(D, G) we get concurrent(Line(B, G), Line(D, G), Line(G, H))
By concurrent_sufficient_conditions on Line(B, G), j, Line(D, G) we get concurrent(j, Line(B, G), Line(D, G))
By line_intersection_definition on orthocenter(A, C, G), f, g we get orthocenter(A, C, G) == line_intersection(f, g)
By concurrent_sufficient_conditions on perpendicular_bisector(A, C), Line(D, G), Line(H, center(c)) we get concurrent(Line(D, G), perpendicular_bisector(A, C), Line(H, center(c)))
By line_intersection_definition on orthocenter(A, B, C), j, Line(C, G) we get orthocenter(A, B, C) == line_intersection(j, Line(C, G))
By concurrent_sufficient_conditions on median(E, C, F), perpendicular_bisector(A, C), Line(E, F) we get concurrent(Line(E, F), median(E, C, F), perpendicular_bisector(A, C))
By concurrent_sufficient_conditions on f, g, Line(B, G) we get concurrent(f, g, Line(B, G))
By concurrent_sufficient_conditions on perpendicular_bisector(A, C), Line(B, D), median(E, C, F) we get concurrent(Line(B, D), median(E, C, F), perpendicular_bisector(A, C))
By concurrent_sufficient_conditions on Line(B, D), f, Line(B, G) we get concurrent(f, Line(B, D), Line(B, G))
By line_definition on C, orthocenter(A, B, C), Line(C, G) we get Line(C, G) == Line(C, orthocenter(A, B, C))
By concurrent_sufficient_conditions on Line(G, H), Line(D, G), Line(B, G) we get concurrent(Line(B, G), Line(D, G), Line(G, H))
By concurrent_sufficient_conditions on perpendicular_bisector(A, C), Line(A, C), median(E, C, F) we get concurrent(Line(A, C), median(E, C, F), perpendicular_bisector(A, C))
By concurrent_sufficient_conditions on median(E, C, F), Line(A, C), perpendicular_bisector(A, C) we get concurrent(Line(A, C), median(E, C, F), perpendicular_bisector(A, C))
By concurrent_sufficient_conditions on perpendicular_bisector(A, C), Line(B, D), Line(A, C) we get concurrent(Line(A, C), Line(B, D), perpendicular_bisector(A, C))
By concurrent_sufficient_conditions on Line(E, F), Line(A, C), perpendicular_bisector(A, C) we get concurrent(Line(A, C), Line(E, F), perpendicular_bisector(A, C))
By concurrent_sufficient_conditions on Line(B, G), Line(C, G), j we get concurrent(j, Line(B, G), Line(C, G))
By concurrent_sufficient_conditions on Line(D, G), Line(B, G), j we get concurrent(j, Line(B, G), Line(D, G))
By concurrent_sufficient_conditions on Line(B, G), f, Line(B, D) we get concurrent(f, Line(B, D), Line(B, G))
By concurrent_sufficient_conditions on Line(B, G), g, Line(B, D) we get concurrent(g, Line(B, D), Line(B, G))
By line_definition on G, orthocenter(A, B, G), Line(C, G) we get Line(C, G) == Line(G, orthocenter(A, B, G))
By perpendicular_line_definition on G, Line(B, G), Line(A, C) we get Line(B, G) == perpendicular_line(G, Line(A, C))
By concurrent_sufficient_conditions on Line(D, G), Line(C, center(c)), perpendicular_bisector(A, C) we get concurrent(Line(D, G), perpendicular_bisector(A, C), Line(C, center(c)))
By concurrent_sufficient_conditions on j, Line(C, G), Line(B, G) we get concurrent(j, Line(B, G), Line(C, G))
By line_definition on midpoint(C, F), orthocenter(A, B, G), g we get g == Line(midpoint(C, F), orthocenter(A, B, G))
By concurrent_sufficient_conditions on Line(G, H), j, Line(B, G) we get concurrent(j, Line(B, G), Line(G, H))
By line_definition on orthocenter(B, C, G), G, j we get j == Line(G, orthocenter(B, C, G))
By concurrent_sufficient_conditions on perpendicular_bisector(A, C), Line(C, center(c)), Line(A, center(c)) we get concurrent(perpendicular_bisector(A, C), Line(A, center(c)), Line(C, center(c)))
By concurrent_sufficient_conditions on Line(D, G), Line(A, center(c)), perpendicular_bisector(A, C) we get concurrent(Line(D, G), perpendicular_bisector(A, C), Line(A, center(c)))
By concurrent_sufficient_conditions on perpendicular_bisector(A, C), median(E, C, F), Line(A, C) we get concurrent(Line(A, C), median(E, C, F), perpendicular_bisector(A, C))
By concurrent_sufficient_conditions on perpendicular_bisector(A, C), Line(A, center(c)), Line(H, center(c)) we get concurrent(perpendicular_bisector(A, C), Line(A, center(c)), Line(H, center(c)))
By perpendicular_line_definition on C, Line(A, C), Line(B, G) we get Line(A, C) == perpendicular_line(C, Line(B, G))
By concurrent_sufficient_conditions on perpendicular_bisector(A, C), Line(E, F), Line(B, D) we get concurrent(Line(B, D), Line(E, F), perpendicular_bisector(A, C))
By concurrent_sufficient_conditions on Line(A, C), perpendicular_bisector(A, C), Line(B, D) we get concurrent(Line(A, C), Line(B, D), perpendicular_bisector(A, C))
By concurrent_sufficient_conditions on Line(C, center(c)), Line(D, G), perpendicular_bisector(A, C) we get concurrent(Line(D, G), perpendicular_bisector(A, C), Line(C, center(c)))
By concurrent_sufficient_conditions on Line(B, G), Line(C, G), Line(G, H) we get concurrent(Line(B, G), Line(C, G), Line(G, H))
By line_intersection_definition on orthocenter(B, C, G), j, f we get orthocenter(B, C, G) == line_intersection(f, j)
By line_definition on B, orthocenter(B, C, G), f we get f == Line(B, orthocenter(B, C, G))
By concurrent_sufficient_conditions on Line(A, C), Line(B, D), perpendicular_bisector(A, C) we get concurrent(Line(A, C), Line(B, D), perpendicular_bisector(A, C))
By concurrent_sufficient_conditions on Line(B, G), Line(D, G), j we get concurrent(j, Line(B, G), Line(D, G))
By concurrent_sufficient_conditions on Line(D, G), perpendicular_bisector(A, C), Line(A, center(c)) we get concurrent(Line(D, G), perpendicular_bisector(A, C), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(B, G), Line(D, G), Line(C, G) we get concurrent(Line(B, G), Line(C, G), Line(D, G))
By concurrent_sufficient_conditions on perpendicular_bisector(A, C), median(E, C, F), Line(B, D) we get concurrent(Line(B, D), median(E, C, F), perpendicular_bisector(A, C))
By concurrent_sufficient_conditions on Line(D, G), Line(B, G), Line(C, G) we get concurrent(Line(B, G), Line(C, G), Line(D, G))
By concurrent_sufficient_conditions on Line(D, G), j, Line(B, G) we get concurrent(j, Line(B, G), Line(D, G))
By concurrent_sufficient_conditions on j, Line(D, G), Line(B, G) we get concurrent(j, Line(B, G), Line(D, G))
By concurrent_sufficient_conditions on perpendicular_bisector(A, C), Line(E, F), Line(A, C) we get concurrent(Line(A, C), Line(E, F), perpendicular_bisector(A, C))
By concurrent_sufficient_conditions on Line(A, center(c)), perpendicular_bisector(A, C), Line(H, center(c)) we get concurrent(perpendicular_bisector(A, C), Line(A, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on perpendicular_bisector(A, C), Line(A, center(c)), Line(D, G) we get concurrent(Line(D, G), perpendicular_bisector(A, C), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(B, D), perpendicular_bisector(A, C), Line(A, C) we get concurrent(Line(A, C), Line(B, D), perpendicular_bisector(A, C))
By concurrent_sufficient_conditions on Line(H, center(c)), perpendicular_bisector(A, C), Line(D, G) we get concurrent(Line(D, G), perpendicular_bisector(A, C), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(G, H), Line(B, G), Line(C, G) we get concurrent(Line(B, G), Line(C, G), Line(G, H))
By concurrent_sufficient_conditions on g, Line(B, G), f we get concurrent(f, g, Line(B, G))
By concurrent_sufficient_conditions on Line(B, D), g, Line(B, G) we get concurrent(g, Line(B, D), Line(B, G))
By concurrent_sufficient_conditions on Line(E, F), perpendicular_bisector(A, C), Line(B, D) we get concurrent(Line(B, D), Line(E, F), perpendicular_bisector(A, C))
By concurrent_sufficient_conditions on perpendicular_bisector(A, C), Line(H, center(c)), Line(A, center(c)) we get concurrent(perpendicular_bisector(A, C), Line(A, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(C, G), Line(B, G), Line(D, G) we get concurrent(Line(B, G), Line(C, G), Line(D, G))
By concurrent_sufficient_conditions on perpendicular_bisector(A, C), Line(H, center(c)), Line(D, G) we get concurrent(Line(D, G), perpendicular_bisector(A, C), Line(H, center(c)))
By concurrent_sufficient_conditions on g, Line(B, D), Line(B, G) we get concurrent(g, Line(B, D), Line(B, G))
By concurrent_sufficient_conditions on Line(B, D), Line(A, C), perpendicular_bisector(A, C) we get concurrent(Line(A, C), Line(B, D), perpendicular_bisector(A, C))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(C, center(c)), perpendicular_bisector(A, C) we get concurrent(perpendicular_bisector(A, C), Line(A, center(c)), Line(C, center(c)))
By concurrent_sufficient_conditions on Line(B, G), j, Line(C, G) we get concurrent(j, Line(B, G), Line(C, G))
By concurrent_sufficient_conditions on f, Line(B, G), g we get concurrent(f, g, Line(B, G))
By concurrent_sufficient_conditions on Line(A, C), perpendicular_bisector(A, C), median(E, C, F) we get concurrent(Line(A, C), median(E, C, F), perpendicular_bisector(A, C))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(C, center(c)), perpendicular_bisector(A, C) we get concurrent(perpendicular_bisector(A, C), Line(C, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(B, G), Line(B, D), f we get concurrent(f, Line(B, D), Line(B, G))
By concurrent_sufficient_conditions on Line(B, G), Line(C, G), Line(D, G) we get concurrent(Line(B, G), Line(C, G), Line(D, G))
By concurrent_sufficient_conditions on median(E, C, F), Line(E, F), perpendicular_bisector(A, C) we get concurrent(Line(E, F), median(E, C, F), perpendicular_bisector(A, C))
By concurrent_sufficient_conditions on Line(C, G), Line(G, H), Line(B, G) we get concurrent(Line(B, G), Line(C, G), Line(G, H))
By concurrent_sufficient_conditions on Line(H, center(c)), perpendicular_bisector(A, C), Line(C, center(c)) we get concurrent(perpendicular_bisector(A, C), Line(C, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(B, D), median(E, C, F), perpendicular_bisector(A, C) we get concurrent(Line(B, D), median(E, C, F), perpendicular_bisector(A, C))
By line_definition on line_intersection(f, Line(C, G)), orthocenter(A, B, G), Line(C, G) we get Line(C, G) == Line(orthocenter(A, B, G), line_intersection(f, Line(C, G)))
By concurrent_sufficient_conditions on Line(B, G), Line(G, H), Line(C, G) we get concurrent(Line(B, G), Line(C, G), Line(G, H))
By concurrent_sufficient_conditions on g, f, Line(B, G) we get concurrent(f, g, Line(B, G))
By concurrent_sufficient_conditions on Line(C, G), Line(B, G), j we get concurrent(j, Line(B, G), Line(C, G))
By concurrent_sufficient_conditions on median(E, C, F), Line(B, D), perpendicular_bisector(A, C) we get concurrent(Line(B, D), median(E, C, F), perpendicular_bisector(A, C))
By concurrent_sufficient_conditions on Line(E, F), perpendicular_bisector(A, C), Line(A, C) we get concurrent(Line(A, C), Line(E, F), perpendicular_bisector(A, C))
By concurrent_sufficient_conditions on Line(C, G), j, Line(B, G) we get concurrent(j, Line(B, G), Line(C, G))
By concurrent_sufficient_conditions on Line(B, G), j, Line(G, H) we get concurrent(j, Line(B, G), Line(G, H))
By concurrent_sufficient_conditions on Line(B, G), Line(D, G), Line(G, H) we get concurrent(Line(B, G), Line(D, G), Line(G, H))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(H, center(c)), perpendicular_bisector(A, C) we get concurrent(perpendicular_bisector(A, C), Line(A, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(B, D), Line(B, G), g we get concurrent(g, Line(B, D), Line(B, G))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(A, center(c)), perpendicular_bisector(A, C) we get concurrent(perpendicular_bisector(A, C), Line(A, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(D, G), perpendicular_bisector(A, C), Line(C, center(c)) we get concurrent(Line(D, G), perpendicular_bisector(A, C), Line(C, center(c)))
By concurrent_sufficient_conditions on Line(C, center(c)), Line(A, center(c)), perpendicular_bisector(A, C) we get concurrent(perpendicular_bisector(A, C), Line(A, center(c)), Line(C, center(c)))
By perpendicular_line_definition on A, Line(A, C), Line(B, G) we get Line(A, C) == perpendicular_line(A, Line(B, G))
By concurrent_sufficient_conditions on Line(D, G), perpendicular_bisector(A, C), Line(H, center(c)) we get concurrent(Line(D, G), perpendicular_bisector(A, C), Line(H, center(c)))
By concurrent_sufficient_conditions on perpendicular_bisector(A, C), Line(H, center(c)), Line(C, center(c)) we get concurrent(perpendicular_bisector(A, C), Line(C, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(A, center(c)), perpendicular_bisector(A, C), Line(D, G) we get concurrent(Line(D, G), perpendicular_bisector(A, C), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(G, H), Line(C, G), Line(B, G) we get concurrent(Line(B, G), Line(C, G), Line(G, H))
By concurrent_sufficient_conditions on Line(E, F), perpendicular_bisector(A, C), median(E, C, F) we get concurrent(Line(E, F), median(E, C, F), perpendicular_bisector(A, C))
By concurrent_sufficient_conditions on f, Line(B, D), Line(B, G) we get concurrent(f, Line(B, D), Line(B, G))
By concurrent_sufficient_conditions on Line(B, D), perpendicular_bisector(A, C), Line(E, F) we get concurrent(Line(B, D), Line(E, F), perpendicular_bisector(A, C))
By perpendicular_line_definition on A, Line(A, C), altitude(G, A, C) we get Line(A, C) == perpendicular_line(A, altitude(G, A, C))
By line_intersection_definition on A, f, altitude(A, B, G) we get A == line_intersection(f, altitude(A, B, G))
By perpendicular_line_definition on orthocenter(A, B, G), altitude(A, B, G), Line(B, G) we get altitude(A, B, G) == perpendicular_line(orthocenter(A, B, G), Line(B, G))
By line_intersection_definition on G, Line(C, G), altitude(G, A, C) we get G == line_intersection(Line(C, G), altitude(G, A, C))
By line_intersection_definition on orthocenter(A, C, G), altitude(G, A, C), g we get orthocenter(A, C, G) == line_intersection(g, altitude(G, A, C))
By line_intersection_definition on orthocenter(A, C, G), f, altitude(G, A, C) we get orthocenter(A, C, G) == line_intersection(f, altitude(G, A, C))
By perpendicular_line_definition on orthocenter(B, C, G), j, g we get j == perpendicular_line(orthocenter(B, C, G), g)
By line_intersection_definition on C, altitude(C, B, G), Line(C, center(d)) we get C == line_intersection(altitude(C, B, G), Line(C, center(d)))
By line_intersection_definition on A, altitude(A, B, G), j we get A == line_intersection(j, altitude(A, B, G))
By perpendicular_line_definition on midpoint(C, F), median(E, C, F), i we get median(E, C, F) == perpendicular_line(midpoint(C, F), i)
By line_intersection_definition on G, altitude(G, A, C), Line(D, G) we get G == line_intersection(Line(D, G), altitude(G, A, C))
By perpendicular_line_definition on orthocenter(A, B, G), g, median(E, C, F) we get g == perpendicular_line(orthocenter(A, B, G), median(E, C, F))
By line_intersection_definition on C, altitude(C, B, G), Line(C, center(c)) we get C == line_intersection(altitude(C, B, G), Line(C, center(c)))
By perpendicular_line_definition on midpoint(C, F), g, median(E, C, F) we get g == perpendicular_line(midpoint(C, F), median(E, C, F))
By line_intersection_definition on orthocenter(A, B, G), Line(C, G), altitude(A, B, G) we get orthocenter(A, B, G) == line_intersection(Line(C, G), altitude(A, B, G))
By perpendicular_line_definition on A, Line(A, C), altitude(B, A, C) we get Line(A, C) == perpendicular_line(A, altitude(B, A, C))
By line_intersection_definition on A, altitude(A, B, G), i we get A == line_intersection(i, altitude(A, B, G))
By line_intersection_definition on G, altitude(G, A, C), Line(G, H) we get G == line_intersection(Line(G, H), altitude(G, A, C))
By perpendicular_line_definition on D, i, median(E, C, F) we get i == perpendicular_line(D, median(E, C, F))
By perpendicular_line_definition on C, Line(A, C), altitude(G, A, C) we get Line(A, C) == perpendicular_line(C, altitude(G, A, C))
By perpendicular_line_definition on midpoint(C, F), g, j we get g == perpendicular_line(midpoint(C, F), j)
By line_intersection_definition on orthocenter(A, B, G), g, altitude(A, B, G) we get orthocenter(A, B, G) == line_intersection(g, altitude(A, B, G))
By line_intersection_definition on C, altitude(C, B, G), Line(C, H) we get C == line_intersection(Line(C, H), altitude(C, B, G))
By line_intersection_definition on C, Line(C, G), altitude(C, B, G) we get C == line_intersection(Line(C, G), altitude(C, B, G))
By line_intersection_definition on C, altitude(C, B, G), g we get C == line_intersection(g, altitude(C, B, G))
By perpendicular_line_definition on orthocenter(A, B, G), g, j we get g == perpendicular_line(orthocenter(A, B, G), j)
By midpoint_definition_v0 on G, D, center(c) we get center(c) == midpoint(D, G)
By line_intersection_definition on B, altitude(B, A, C), f we get B == line_intersection(f, altitude(B, A, C))
By perpendicular_line_definition on B, Line(B, G), altitude(C, B, G) we get Line(B, G) == perpendicular_line(B, altitude(C, B, G))
By line_intersection_definition on orthocenter(B, C, G), f, altitude(C, B, G) we get orthocenter(B, C, G) == line_intersection(f, altitude(C, B, G))
By perpendicular_line_definition on E, Line(A, C), perpendicular_bisector(A, C) we get Line(A, C) == perpendicular_line(E, perpendicular_bisector(A, C))
By perpendicular_line_definition on C, Line(A, C), perpendicular_bisector(A, C) we get Line(A, C) == perpendicular_line(C, perpendicular_bisector(A, C))
By perpendicular_line_definition on orthocenter(A, C, G), g, j we get g == perpendicular_line(orthocenter(A, C, G), j)
By perpendicular_line_definition on orthocenter(A, B, C), Line(C, G), h we get Line(C, G) == perpendicular_line(orthocenter(A, B, C), h)
By perpendicular_line_definition on E, median(E, C, F), i we get median(E, C, F) == perpendicular_line(E, i)
By line_intersection_definition on orthocenter(B, C, G), j, altitude(C, B, G) we get orthocenter(B, C, G) == line_intersection(j, altitude(C, B, G))
By perpendicular_line_definition on C, Line(A, C), altitude(B, A, C) we get Line(A, C) == perpendicular_line(C, altitude(B, A, C))
By line_intersection_definition on G, j, altitude(G, A, C) we get G == line_intersection(j, altitude(G, A, C))
By perpendicular_line_definition on orthocenter(A, B, C), j, g we get j == perpendicular_line(orthocenter(A, B, C), g)
By perpendicular_line_definition on A, Line(A, C), perpendicular_bisector(A, C) we get Line(A, C) == perpendicular_line(A, perpendicular_bisector(A, C))
By perpendicular_line_definition on orthocenter(B, C, G), altitude(C, B, G), Line(B, G) we get altitude(C, B, G) == perpendicular_line(orthocenter(B, C, G), Line(B, G))
By line_intersection_definition on A, Line(A, H), altitude(A, B, G) we get A == line_intersection(Line(A, H), altitude(A, B, G))
By perpendicular_line_definition on B, Line(B, G), altitude(A, B, G) we get Line(B, G) == perpendicular_line(B, altitude(A, B, G))
By line_intersection_definition on C, h, altitude(C, B, G) we get C == line_intersection(h, altitude(C, B, G))
By perpendicular_line_definition on orthocenter(A, B, G), Line(C, G), h we get Line(C, G) == perpendicular_line(orthocenter(A, B, G), h)
By perpendicular_line_definition on G, Line(B, G), altitude(C, B, G) we get Line(B, G) == perpendicular_line(G, altitude(C, B, G))
By perpendicular_line_definition on A, i, median(E, C, F) we get i == perpendicular_line(A, median(E, C, F))
By perpendicular_line_definition on G, Line(B, G), altitude(A, B, G) we get Line(B, G) == perpendicular_line(G, altitude(A, B, G))
By line_intersection_definition on orthocenter(A, B, C), altitude(B, A, C), Line(C, G) we get orthocenter(A, B, C) == line_intersection(Line(C, G), altitude(B, A, C))
By perpendicular_line_definition on orthocenter(A, C, G), altitude(G, A, C), Line(A, C) we get altitude(G, A, C) == perpendicular_line(orthocenter(A, C, G), Line(A, C))
By line_intersection_definition on B, altitude(B, A, C), g we get B == line_intersection(g, altitude(B, A, C))
By perpendicular_line_definition on E, Line(A, C), Line(B, G) we get Line(A, C) == perpendicular_line(E, Line(B, G))
By perpendicular_line_definition on orthocenter(A, B, C), j, i we get j == perpendicular_line(orthocenter(A, B, C), i)
By line_intersection_definition on B, Line(B, D), altitude(B, A, C) we get B == line_intersection(Line(B, D), altitude(B, A, C))
By perpendicular_line_definition on orthocenter(B, C, G), j, i we get j == perpendicular_line(orthocenter(B, C, G), i)
By perpendicular_line_definition on center(d), median(E, C, F), i we get median(E, C, F) == perpendicular_line(center(d), i)
By line_intersection_definition on A, Line(A, center(c)), altitude(A, B, G) we get A == line_intersection(altitude(A, B, G), Line(A, center(c)))
By perpendicular_line_definition on orthocenter(A, C, G), g, median(E, C, F) we get g == perpendicular_line(orthocenter(A, C, G), median(E, C, F))
By line_intersection_definition on orthocenter(A, B, C), j, altitude(B, A, C) we get orthocenter(A, B, C) == line_intersection(j, altitude(B, A, C))
By perpendicular_line_definition on orthocenter(A, C, G), f, Line(C, G) we get f == perpendicular_line(orthocenter(A, C, G), Line(C, G))
By perpendicular_line_definition on orthocenter(A, B, G), Line(C, G), f we get Line(C, G) == perpendicular_line(orthocenter(A, B, G), f)
By projection_definition on E, midpoint(C, F), g we get midpoint(C, F) == projection(E, g)
By perpendicular_line_definition on orthocenter(A, B, C), Line(C, G), f we get Line(C, G) == perpendicular_line(orthocenter(A, B, C), f)
By perpendicular_line_definition on orthocenter(B, C, G), f, Line(C, G) we get f == perpendicular_line(orthocenter(B, C, G), Line(C, G))
By perpendicular_line_definition on B, Line(B, D), Line(G, H) we get Line(B, D) == perpendicular_line(B, Line(G, H))
By perpendicular_line_definition on E, Line(A, C), altitude(G, A, C) we get Line(A, C) == perpendicular_line(E, altitude(G, A, C))
By perpendicular_line_definition on orthocenter(A, B, C), altitude(B, A, C), Line(A, C) we get altitude(B, A, C) == perpendicular_line(orthocenter(A, B, C), Line(A, C))
By perpendicular_line_definition on E, Line(A, C), altitude(B, A, C) we get Line(A, C) == perpendicular_line(E, altitude(B, A, C))
By line_unique_intersection on f, j, orthocenter(B, C, G), A we get A == orthocenter(B, C, G)
By line_unique_intersection on g, f, orthocenter(A, C, G), B we get B == orthocenter(A, C, G)
By line_unique_intersection on Line(C, G), g, C, orthocenter(A, B, G) we get C == orthocenter(A, B, G)
By line_unique_intersection on Line(C, G), j, G, orthocenter(A, B, C) we get G == orthocenter(A, B, C)
By perpendicular_direction_conditions_v0_r on midpoint(C, F), F, F, G we get 180 == 2 * direction(midpoint(C, F), F) - 2 * direction(F, G) mod 360
By same_angle_converse_v0 on E, H, B, A we get collinear(B, E, H)
By same_angle_converse_v1 on C, midpoint(C, F), B, F we get collinear(B, C, midpoint(C, F))
By perpendicular_direction_conditions_v0_r on midpoint(C, F), F, E, center(d) we get 180 == 2 * direction(midpoint(C, F), F) - 2 * direction(E, center(d)) mod 360
By same_angle_converse_v0 on D, B, H, E we get collinear(B, D, H)
By perpendicular_direction_conditions_v0_r on center(d), E, midpoint(C, F), C we get 180 == 2 * direction(center(d), E) - 2 * direction(midpoint(C, F), C) mod 360
By same_angle_converse_v0 on F, B, midpoint(C, F), C we get collinear(B, F, midpoint(C, F))
By perpendicular_direction_conditions_v0_r on G, F, midpoint(C, F), C we get 180 == 2 * direction(G, F) - 2 * direction(midpoint(C, F), C) mod 360
By projection_definition on F, midpoint(C, F), median(E, C, F) we get midpoint(C, F) == projection(F, median(E, C, F))
By perpendicular_direction_conditions_v0_r on midpoint(C, F), C, G, F we get 180 == 2 * direction(midpoint(C, F), C) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on E, center(d), midpoint(C, F), C we get 180 == 2 * direction(E, center(d)) - 2 * direction(midpoint(C, F), C) mod 360
By perpendicular_direction_conditions_v0_r on A, G, midpoint(C, F), F we get 180 == 2 * direction(A, G) - 2 * direction(midpoint(C, F), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), F, G, F we get 180 == 2 * direction(midpoint(C, F), F) - 2 * direction(G, F) mod 360
By projection_definition on C, line_intersection(f, Line(C, G)), f we get projection(C, f) == line_intersection(f, Line(C, G))
By perpendicular_direction_conditions_v0_r on midpoint(C, F), F, F, A we get 180 == 2 * direction(midpoint(C, F), F) - 2 * direction(F, A) mod 360
By projection_definition on G, line_intersection(f, Line(C, G)), f we get projection(G, f) == line_intersection(f, Line(C, G))
By perpendicular_direction_conditions_v0_r on midpoint(C, F), C, center(d), E we get 180 == 2 * direction(midpoint(C, F), C) - 2 * direction(center(d), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), C, A, F we get 180 == 2 * direction(midpoint(C, F), C) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on G, F, midpoint(C, F), F we get 180 == 2 * direction(G, F) - 2 * direction(midpoint(C, F), F) mod 360
By perpendicular_direction_conditions_v0_r on E, center(d), midpoint(C, F), F we get 180 == 2 * direction(E, center(d)) - 2 * direction(midpoint(C, F), F) mod 360
By perpendicular_direction_conditions_v0_r on center(d), E, midpoint(C, F), F we get 180 == 2 * direction(center(d), E) - 2 * direction(midpoint(C, F), F) mod 360
By perpendicular_direction_conditions_v0_r on F, G, midpoint(C, F), C we get 180 == 2 * direction(F, G) - 2 * direction(midpoint(C, F), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), F, center(d), E we get 180 == 2 * direction(midpoint(C, F), F) - 2 * direction(center(d), E) mod 360
By projection_definition on A, line_intersection(f, Line(C, G)), Line(C, G) we get projection(A, Line(C, G)) == line_intersection(f, Line(C, G))
By perpendicular_direction_conditions_v0_r on A, G, midpoint(C, F), C we get 180 == 2 * direction(A, G) - 2 * direction(midpoint(C, F), C) mod 360
By projection_definition on line_intersection(f, Line(C, G)), C, h we get C == projection(line_intersection(f, Line(C, G)), h)
By perpendicular_direction_conditions_v0_r on F, A, midpoint(C, F), F we get 180 == 2 * direction(F, A) - 2 * direction(midpoint(C, F), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), C, E, center(d) we get 180 == 2 * direction(midpoint(C, F), C) - 2 * direction(E, center(d)) mod 360
By perpendicular_direction_conditions_v0_r on F, G, midpoint(C, F), F we get 180 == 2 * direction(F, G) - 2 * direction(midpoint(C, F), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), F, A, F we get 180 == 2 * direction(midpoint(C, F), F) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on G, A, midpoint(C, F), C we get 180 == 2 * direction(G, A) - 2 * direction(midpoint(C, F), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), C, A, G we get 180 == 2 * direction(midpoint(C, F), C) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on A, F, midpoint(C, F), F we get 180 == 2 * direction(A, F) - 2 * direction(midpoint(C, F), F) mod 360
By projection_definition on center(d), midpoint(C, F), g we get midpoint(C, F) == projection(center(d), g)
By perpendicular_direction_conditions_v0_r on F, A, midpoint(C, F), C we get 180 == 2 * direction(F, A) - 2 * direction(midpoint(C, F), C) mod 360
By perpendicular_direction_conditions_v0_r on A, F, midpoint(C, F), C we get 180 == 2 * direction(A, F) - 2 * direction(midpoint(C, F), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), C, F, G we get 180 == 2 * direction(midpoint(C, F), C) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), F, G, A we get 180 == 2 * direction(midpoint(C, F), F) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), C, G, A we get 180 == 2 * direction(midpoint(C, F), C) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on G, A, midpoint(C, F), F we get 180 == 2 * direction(G, A) - 2 * direction(midpoint(C, F), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), F, A, G we get 180 == 2 * direction(midpoint(C, F), F) - 2 * direction(A, G) mod 360
By projection_definition on C, midpoint(C, F), median(E, C, F) we get midpoint(C, F) == projection(C, median(E, C, F))
By perpendicular_direction_conditions_v0_r on midpoint(C, F), C, F, A we get 180 == 2 * direction(midpoint(C, F), C) - 2 * direction(F, A) mod 360
By projection_definition on B, line_intersection(f, Line(C, G)), Line(C, G) we get projection(B, Line(C, G)) == line_intersection(f, Line(C, G))
By projection_definition on center(c), E, Line(A, C) we get E == projection(center(c), Line(A, C))
By between_imply_not_between on H, E, D we get collinear_and_not_between(D, H, E)
By parallel_line_definition on midpoint(C, F), g, i we get g == parallel_line(midpoint(C, F), i)
By between_imply_not_between on D, E, H we get collinear_and_not_between(E, D, H)
By parallel_line_definition on orthocenter(A, C, G), f, h we get f == parallel_line(orthocenter(A, C, G), h)
By parallel_line_definition on F, j, median(E, C, F) we get j == parallel_line(F, median(E, C, F))
By parallel_line_definition on midpoint(C, F), median(E, C, F), j we get median(E, C, F) == parallel_line(midpoint(C, F), j)
By parallel_line_definition on orthocenter(A, C, G), g, i we get g == parallel_line(orthocenter(A, C, G), i)
By parallel_line_definition on orthocenter(B, C, G), j, median(E, C, F) we get j == parallel_line(orthocenter(B, C, G), median(E, C, F))
By parallel_line_definition on orthocenter(B, C, G), f, h we get f == parallel_line(orthocenter(B, C, G), h)
By parallel_line_definition on orthocenter(A, B, C), j, median(E, C, F) we get j == parallel_line(orthocenter(A, B, C), median(E, C, F))
By parallel_line_definition on center(d), median(E, C, F), j we get median(E, C, F) == parallel_line(center(d), j)
By parallel_line_definition on orthocenter(A, B, G), g, i we get g == parallel_line(orthocenter(A, B, G), i)
By parallel_line_definition on A, j, median(E, C, F) we get j == parallel_line(A, median(E, C, F))
By parallel_line_definition on E, median(E, C, F), j we get median(E, C, F) == parallel_line(E, j)
By parallel_line_definition on G, j, median(E, C, F) we get j == parallel_line(G, median(E, C, F))
By perpendicular_direction_conditions_v0_r on midpoint(C, F), center(d), F, C we get 180 == 2 * direction(midpoint(C, F), center(d)) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on B, C, midpoint(C, F), center(d) we get 180 == 2 * direction(B, C) - 2 * direction(midpoint(C, F), center(d)) mod 360
By perpendicular_direction_conditions_v0_r on F, C, midpoint(C, F), E we get 180 == 2 * direction(F, C) - 2 * direction(midpoint(C, F), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), center(d), A, D we get 180 == 2 * direction(midpoint(C, F), center(d)) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on center(d), midpoint(C, F), F, C we get 180 == 2 * direction(center(d), midpoint(C, F)) - 2 * direction(F, C) mod 360
By in_imply_collinear on orthocenter(A, C, G), midpoint(C, F), C we get collinear(C, midpoint(C, F), orthocenter(A, C, G))
By perpendicular_direction_conditions_v0_r on midpoint(C, F), E, B, F we get 180 == 2 * direction(midpoint(C, F), E) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on C, G, line_intersection(f, Line(C, G)), A we get 180 == 2 * direction(C, G) - 2 * direction(line_intersection(f, Line(C, G)), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), center(d), F, B we get 180 == 2 * direction(midpoint(C, F), center(d)) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on C, B, midpoint(C, F), center(d) we get 180 == 2 * direction(C, B) - 2 * direction(midpoint(C, F), center(d)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(C, G)), C, D, C we get 180 == 2 * direction(line_intersection(f, Line(C, G)), C) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on center(d), midpoint(C, F), D, A we get 180 == 2 * direction(center(d), midpoint(C, F)) - 2 * direction(D, A) mod 360
By in_imply_collinear on orthocenter(A, C, G), A, line_intersection(f, Line(C, G)) we get collinear(A, orthocenter(A, C, G), line_intersection(f, Line(C, G)))
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(C, G)), C, B, A we get 180 == 2 * direction(line_intersection(f, Line(C, G)), C) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on C, B, midpoint(C, F), E we get 180 == 2 * direction(C, B) - 2 * direction(midpoint(C, F), E) mod 360
By perpendicular_direction_conditions_v0_r on F, B, midpoint(C, F), E we get 180 == 2 * direction(F, B) - 2 * direction(midpoint(C, F), E) mod 360
By perpendicular_direction_conditions_v0_r on A, B, C, line_intersection(f, Line(C, G)) we get 180 == 2 * direction(A, B) - 2 * direction(C, line_intersection(f, Line(C, G))) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(C, F), B, F we get 180 == 2 * direction(E, midpoint(C, F)) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on center(d), midpoint(C, F), A, D we get 180 == 2 * direction(center(d), midpoint(C, F)) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on center(d), midpoint(C, F), C, midpoint(C, F) we get 180 == 2 * direction(center(d), midpoint(C, F)) - 2 * direction(C, midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(C, G)), B, G, C we get 180 == 2 * direction(line_intersection(f, Line(C, G)), B) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(f, Line(C, G)), C, D we get 180 == 2 * direction(C, line_intersection(f, Line(C, G))) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on F, B, midpoint(C, F), center(d) we get 180 == 2 * direction(F, B) - 2 * direction(midpoint(C, F), center(d)) mod 360
By perpendicular_direction_conditions_v0_r on center(c), E, C, A we get 180 == 2 * direction(center(c), E) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), C, center(d), midpoint(C, F) we get 180 == 2 * direction(midpoint(C, F), C) - 2 * direction(center(d), midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), F, midpoint(C, F), center(d) we get 180 == 2 * direction(midpoint(C, F), F) - 2 * direction(midpoint(C, F), center(d)) mod 360
By perpendicular_direction_conditions_v0_r on C, D, C, line_intersection(f, Line(C, G)) we get 180 == 2 * direction(C, D) - 2 * direction(C, line_intersection(f, Line(C, G))) mod 360
By perpendicular_direction_conditions_v0_r on E, center(c), A, C we get 180 == 2 * direction(E, center(c)) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on center(d), midpoint(C, F), F, B we get 180 == 2 * direction(center(d), midpoint(C, F)) - 2 * direction(F, B) mod 360
By circumcenter_perpendicular_bisectors on F, C, A we get circumcenter(A, C, F) in perpendicular_bisector(C, F), circumcenter(A, C, F) in perpendicular_bisector(A, C), circumcenter(A, C, F) in perpendicular_bisector(A, F)
By perpendicular_direction_conditions_v0_r on A, line_intersection(f, Line(C, G)), C, G we get 180 == 2 * direction(A, line_intersection(f, Line(C, G))) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on E, center(c), E, C we get 180 == 2 * direction(E, center(c)) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on E, center(c), C, E we get 180 == 2 * direction(E, center(c)) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on D, C, C, line_intersection(f, Line(C, G)) we get 180 == 2 * direction(D, C) - 2 * direction(C, line_intersection(f, Line(C, G))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), E, C, midpoint(C, F) we get 180 == 2 * direction(midpoint(C, F), E) - 2 * direction(C, midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on E, A, center(c), E we get 180 == 2 * direction(E, A) - 2 * direction(center(c), E) mod 360
By perpendicular_direction_conditions_v0_r on C, D, line_intersection(f, Line(C, G)), G we get 180 == 2 * direction(C, D) - 2 * direction(line_intersection(f, Line(C, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(C, F), center(d), midpoint(C, F) we get 180 == 2 * direction(C, midpoint(C, F)) - 2 * direction(center(d), midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), center(d), midpoint(C, F), C we get 180 == 2 * direction(midpoint(C, F), center(d)) - 2 * direction(midpoint(C, F), C) mod 360
By in_imply_collinear on orthocenter(A, B, G), B, F we get collinear(B, F, orthocenter(A, B, G))
By perpendicular_direction_conditions_v0_r on A, B, G, line_intersection(f, Line(C, G)) we get 180 == 2 * direction(A, B) - 2 * direction(G, line_intersection(f, Line(C, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(C, G)), G, D, C we get 180 == 2 * direction(line_intersection(f, Line(C, G)), G) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on center(c), E, C, E we get 180 == 2 * direction(center(c), E) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(C, F), F, C we get 180 == 2 * direction(E, midpoint(C, F)) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(C, G)), B, C, G we get 180 == 2 * direction(line_intersection(f, Line(C, G)), B) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on C, G, B, line_intersection(f, Line(C, G)) we get 180 == 2 * direction(C, G) - 2 * direction(B, line_intersection(f, Line(C, G))) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(C, F), E, midpoint(C, F) we get 180 == 2 * direction(C, midpoint(C, F)) - 2 * direction(E, midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on E, center(c), E, A we get 180 == 2 * direction(E, center(c)) - 2 * direction(E, A) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(f, Line(C, G)), C, G we get 180 == 2 * direction(B, line_intersection(f, Line(C, G))) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on B, C, midpoint(C, F), E we get 180 == 2 * direction(B, C) - 2 * direction(midpoint(C, F), E) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(C, F), A, D we get 180 == 2 * direction(E, midpoint(C, F)) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on C, E, E, center(c) we get 180 == 2 * direction(C, E) - 2 * direction(E, center(c)) mod 360
By perpendicular_direction_conditions_v0_r on E, A, E, center(c) we get 180 == 2 * direction(E, A) - 2 * direction(E, center(c)) mod 360
By perpendicular_direction_conditions_v0_r on C, A, E, center(c) we get 180 == 2 * direction(C, A) - 2 * direction(E, center(c)) mod 360
By perpendicular_direction_conditions_v0_r on F, C, center(d), midpoint(C, F) we get 180 == 2 * direction(F, C) - 2 * direction(center(d), midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on A, B, line_intersection(f, Line(C, G)), C we get 180 == 2 * direction(A, B) - 2 * direction(line_intersection(f, Line(C, G)), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), E, C, F we get 180 == 2 * direction(midpoint(C, F), E) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on C, F, midpoint(C, F), center(d) we get 180 == 2 * direction(C, F) - 2 * direction(midpoint(C, F), center(d)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), center(d), C, B we get 180 == 2 * direction(midpoint(C, F), center(d)) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(C, F), midpoint(C, F), E we get 180 == 2 * direction(C, midpoint(C, F)) - 2 * direction(midpoint(C, F), E) mod 360
By perpendicular_direction_conditions_v0_r on C, D, line_intersection(f, Line(C, G)), C we get 180 == 2 * direction(C, D) - 2 * direction(line_intersection(f, Line(C, G)), C) mod 360
By perpendicular_direction_conditions_v0_r on A, D, midpoint(C, F), E we get 180 == 2 * direction(A, D) - 2 * direction(midpoint(C, F), E) mod 360
By perpendicular_direction_conditions_v0_r on B, A, G, line_intersection(f, Line(C, G)) we get 180 == 2 * direction(B, A) - 2 * direction(G, line_intersection(f, Line(C, G))) mod 360
By perpendicular_direction_conditions_v0_r on C, G, line_intersection(f, Line(C, G)), B we get 180 == 2 * direction(C, G) - 2 * direction(line_intersection(f, Line(C, G)), B) mod 360
By perpendicular_direction_conditions_v0_r on B, F, center(d), midpoint(C, F) we get 180 == 2 * direction(B, F) - 2 * direction(center(d), midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), E, midpoint(C, F), F we get 180 == 2 * direction(midpoint(C, F), E) - 2 * direction(midpoint(C, F), F) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(C, F), C, midpoint(C, F) we get 180 == 2 * direction(E, midpoint(C, F)) - 2 * direction(C, midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on D, C, G, line_intersection(f, Line(C, G)) we get 180 == 2 * direction(D, C) - 2 * direction(G, line_intersection(f, Line(C, G))) mod 360
By perpendicular_direction_conditions_v0_r on D, C, line_intersection(f, Line(C, G)), C we get 180 == 2 * direction(D, C) - 2 * direction(line_intersection(f, Line(C, G)), C) mod 360
By perpendicular_direction_conditions_v0_r on F, B, E, midpoint(C, F) we get 180 == 2 * direction(F, B) - 2 * direction(E, midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(C, F), B, C we get 180 == 2 * direction(E, midpoint(C, F)) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(C, G)), A, C, G we get 180 == 2 * direction(line_intersection(f, Line(C, G)), A) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), center(d), B, C we get 180 == 2 * direction(midpoint(C, F), center(d)) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on G, C, line_intersection(f, Line(C, G)), B we get 180 == 2 * direction(G, C) - 2 * direction(line_intersection(f, Line(C, G)), B) mod 360
By perpendicular_direction_conditions_v0_r on D, A, midpoint(C, F), E we get 180 == 2 * direction(D, A) - 2 * direction(midpoint(C, F), E) mod 360
By perpendicular_direction_conditions_v0_r on G, C, line_intersection(f, Line(C, G)), A we get 180 == 2 * direction(G, C) - 2 * direction(line_intersection(f, Line(C, G)), A) mod 360
By perpendicular_direction_conditions_v0_r on A, B, line_intersection(f, Line(C, G)), G we get 180 == 2 * direction(A, B) - 2 * direction(line_intersection(f, Line(C, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(C, G)), C, C, D we get 180 == 2 * direction(line_intersection(f, Line(C, G)), C) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on D, A, E, midpoint(C, F) we get 180 == 2 * direction(D, A) - 2 * direction(E, midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(C, G)), A, G, C we get 180 == 2 * direction(line_intersection(f, Line(C, G)), A) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on center(d), midpoint(C, F), C, B we get 180 == 2 * direction(center(d), midpoint(C, F)) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(C, F), C, B we get 180 == 2 * direction(E, midpoint(C, F)) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), E, F, C we get 180 == 2 * direction(midpoint(C, F), E) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on C, E, center(c), E we get 180 == 2 * direction(C, E) - 2 * direction(center(c), E) mod 360
By perpendicular_direction_conditions_v0_r on A, D, center(d), midpoint(C, F) we get 180 == 2 * direction(A, D) - 2 * direction(center(d), midpoint(C, F)) mod 360
By anti_similar_triangle_basic_properties on C, H, A, B, C, D we get angle(C, H, A) == 0 - angle(B, C, D) mod 360, angle(H, A, C) == 0 - angle(C, D, B) mod 360, angle(A, C, H) == 0 - angle(D, B, C) mod 360, log(distance(B, C)) + log(distance(A, H)) == log(distance(C, H)) + log(distance(C, D)), log(distance(A, H)) + log(distance(B, D)) == log(distance(C, D)) + log(distance(A, C)), log(distance(A, C)) + log(distance(B, C)) == log(distance(B, D)) + log(distance(C, H))
By perpendicular_direction_conditions_v0_r on B, A, C, line_intersection(f, Line(C, G)) we get 180 == 2 * direction(B, A) - 2 * direction(C, line_intersection(f, Line(C, G))) mod 360
By perpendicular_direction_conditions_v0_r on A, C, E, center(c) we get 180 == 2 * direction(A, C) - 2 * direction(E, center(c)) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(f, Line(C, G)), A, B we get 180 == 2 * direction(C, line_intersection(f, Line(C, G))) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on center(d), midpoint(C, F), midpoint(C, F), F we get 180 == 2 * direction(center(d), midpoint(C, F)) - 2 * direction(midpoint(C, F), F) mod 360
By perpendicular_direction_conditions_v0_r on E, C, center(c), E we get 180 == 2 * direction(E, C) - 2 * direction(center(c), E) mod 360
By perpendicular_direction_conditions_v0_r on center(d), midpoint(C, F), midpoint(C, F), C we get 180 == 2 * direction(center(d), midpoint(C, F)) - 2 * direction(midpoint(C, F), C) mod 360
By perpendicular_direction_conditions_v0_r on C, F, E, midpoint(C, F) we get 180 == 2 * direction(C, F) - 2 * direction(E, midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(C, F), C, F we get 180 == 2 * direction(E, midpoint(C, F)) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), E, F, B we get 180 == 2 * direction(midpoint(C, F), E) - 2 * direction(F, B) mod 360
By projection_definition on midpoint(C, F), F, j we get F == projection(midpoint(C, F), j)
By perpendicular_direction_conditions_v0_r on B, A, line_intersection(f, Line(C, G)), C we get 180 == 2 * direction(B, A) - 2 * direction(line_intersection(f, Line(C, G)), C) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(C, F), midpoint(C, F), C we get 180 == 2 * direction(E, midpoint(C, F)) - 2 * direction(midpoint(C, F), C) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(f, Line(C, G)), A, B we get 180 == 2 * direction(G, line_intersection(f, Line(C, G))) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on center(c), E, A, C we get 180 == 2 * direction(center(c), E) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), F, E, midpoint(C, F) we get 180 == 2 * direction(midpoint(C, F), F) - 2 * direction(E, midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on center(d), midpoint(C, F), B, C we get 180 == 2 * direction(center(d), midpoint(C, F)) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(C, F), midpoint(C, F), center(d) we get 180 == 2 * direction(C, midpoint(C, F)) - 2 * direction(midpoint(C, F), center(d)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), E, B, C we get 180 == 2 * direction(midpoint(C, F), E) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on center(c), E, E, C we get 180 == 2 * direction(center(c), E) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(C, F), E, midpoint(C, F) we get 180 == 2 * direction(F, midpoint(C, F)) - 2 * direction(E, midpoint(C, F)) mod 360
By projection_definition on C, E, perpendicular_bisector(A, C) we get E == projection(C, perpendicular_bisector(A, C))
By in_imply_collinear on orthocenter(A, C, G), F, C we get collinear(C, F, orthocenter(A, C, G))
By perpendicular_direction_conditions_v0_r on F, midpoint(C, F), midpoint(C, F), center(d) we get 180 == 2 * direction(F, midpoint(C, F)) - 2 * direction(midpoint(C, F), center(d)) mod 360
By perpendicular_direction_conditions_v0_r on G, C, B, line_intersection(f, Line(C, G)) we get 180 == 2 * direction(G, C) - 2 * direction(B, line_intersection(f, Line(C, G))) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(f, Line(C, G)), G, C we get 180 == 2 * direction(B, line_intersection(f, Line(C, G))) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on center(d), midpoint(C, F), F, midpoint(C, F) we get 180 == 2 * direction(center(d), midpoint(C, F)) - 2 * direction(F, midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), C, midpoint(C, F), E we get 180 == 2 * direction(midpoint(C, F), C) - 2 * direction(midpoint(C, F), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), center(d), C, F we get 180 == 2 * direction(midpoint(C, F), center(d)) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on E, center(c), A, E we get 180 == 2 * direction(E, center(c)) - 2 * direction(A, E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), C, midpoint(C, F), center(d) we get 180 == 2 * direction(midpoint(C, F), C) - 2 * direction(midpoint(C, F), center(d)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(C, F), F, midpoint(C, F) we get 180 == 2 * direction(E, midpoint(C, F)) - 2 * direction(F, midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on D, C, line_intersection(f, Line(C, G)), G we get 180 == 2 * direction(D, C) - 2 * direction(line_intersection(f, Line(C, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(C, G)), C, A, B we get 180 == 2 * direction(line_intersection(f, Line(C, G)), C) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(C, F), midpoint(C, F), E we get 180 == 2 * direction(F, midpoint(C, F)) - 2 * direction(midpoint(C, F), E) mod 360
By perpendicular_direction_conditions_v0_r on B, A, line_intersection(f, Line(C, G)), G we get 180 == 2 * direction(B, A) - 2 * direction(line_intersection(f, Line(C, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), E, F, midpoint(C, F) we get 180 == 2 * direction(midpoint(C, F), E) - 2 * direction(F, midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on A, E, center(c), E we get 180 == 2 * direction(A, E) - 2 * direction(center(c), E) mod 360
By perpendicular_direction_conditions_v0_r on A, C, center(c), E we get 180 == 2 * direction(A, C) - 2 * direction(center(c), E) mod 360
By projection_definition on A, E, perpendicular_bisector(A, C) we get E == projection(A, perpendicular_bisector(A, C))
By perpendicular_direction_conditions_v0_r on midpoint(C, F), F, center(d), midpoint(C, F) we get 180 == 2 * direction(midpoint(C, F), F) - 2 * direction(center(d), midpoint(C, F)) mod 360
By anti_similar_triangle_basic_properties on B, D, C, C, A, H we get angle(B, D, C) == 0 - angle(C, A, H) mod 360, angle(D, C, B) == 0 - angle(A, H, C) mod 360, angle(C, B, D) == 0 - angle(H, C, A) mod 360, log(distance(A, C)) + log(distance(C, D)) == log(distance(B, D)) + log(distance(A, H)), log(distance(A, H)) + log(distance(B, C)) == log(distance(C, D)) + log(distance(C, H)), log(distance(B, C)) + log(distance(A, C)) == log(distance(C, H)) + log(distance(B, D))
By perpendicular_direction_conditions_v0_r on G, line_intersection(f, Line(C, G)), B, A we get 180 == 2 * direction(G, line_intersection(f, Line(C, G))) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), center(d), F, midpoint(C, F) we get 180 == 2 * direction(midpoint(C, F), center(d)) - 2 * direction(F, midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on G, C, A, line_intersection(f, Line(C, G)) we get 180 == 2 * direction(G, C) - 2 * direction(A, line_intersection(f, Line(C, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(C, G)), G, B, A we get 180 == 2 * direction(line_intersection(f, Line(C, G)), G) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on center(c), E, A, E we get 180 == 2 * direction(center(c), E) - 2 * direction(A, E) mod 360
By perpendicular_direction_conditions_v0_r on B, F, midpoint(C, F), E we get 180 == 2 * direction(B, F) - 2 * direction(midpoint(C, F), E) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(C, F), center(d), midpoint(C, F) we get 180 == 2 * direction(F, midpoint(C, F)) - 2 * direction(center(d), midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on C, F, midpoint(C, F), E we get 180 == 2 * direction(C, F) - 2 * direction(midpoint(C, F), E) mod 360
By perpendicular_direction_conditions_v0_r on D, A, midpoint(C, F), center(d) we get 180 == 2 * direction(D, A) - 2 * direction(midpoint(C, F), center(d)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(C, F), F, B we get 180 == 2 * direction(E, midpoint(C, F)) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on C, F, center(d), midpoint(C, F) we get 180 == 2 * direction(C, F) - 2 * direction(center(d), midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(C, F), midpoint(C, F), F we get 180 == 2 * direction(E, midpoint(C, F)) - 2 * direction(midpoint(C, F), F) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(f, Line(C, G)), C, D we get 180 == 2 * direction(G, line_intersection(f, Line(C, G))) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on C, B, center(d), midpoint(C, F) we get 180 == 2 * direction(C, B) - 2 * direction(center(d), midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), E, midpoint(C, F), C we get 180 == 2 * direction(midpoint(C, F), E) - 2 * direction(midpoint(C, F), C) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(f, Line(C, G)), B, A we get 180 == 2 * direction(C, line_intersection(f, Line(C, G))) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(f, Line(C, G)), D, C we get 180 == 2 * direction(C, line_intersection(f, Line(C, G))) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), center(d), B, F we get 180 == 2 * direction(midpoint(C, F), center(d)) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on F, B, center(d), midpoint(C, F) we get 180 == 2 * direction(F, B) - 2 * direction(center(d), midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on center(c), E, E, A we get 180 == 2 * direction(center(c), E) - 2 * direction(E, A) mod 360
By perpendicular_direction_conditions_v0_r on E, center(c), C, A we get 180 == 2 * direction(E, center(c)) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on B, F, midpoint(C, F), center(d) we get 180 == 2 * direction(B, F) - 2 * direction(midpoint(C, F), center(d)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), E, C, B we get 180 == 2 * direction(midpoint(C, F), E) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on B, C, center(d), midpoint(C, F) we get 180 == 2 * direction(B, C) - 2 * direction(center(d), midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), E, D, A we get 180 == 2 * direction(midpoint(C, F), E) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on C, G, A, line_intersection(f, Line(C, G)) we get 180 == 2 * direction(C, G) - 2 * direction(A, line_intersection(f, Line(C, G))) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(f, Line(C, G)), D, C we get 180 == 2 * direction(G, line_intersection(f, Line(C, G))) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), center(d), midpoint(C, F), F we get 180 == 2 * direction(midpoint(C, F), center(d)) - 2 * direction(midpoint(C, F), F) mod 360
By perpendicular_direction_conditions_v0_r on A, E, E, center(c) we get 180 == 2 * direction(A, E) - 2 * direction(E, center(c)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), center(d), C, midpoint(C, F) we get 180 == 2 * direction(midpoint(C, F), center(d)) - 2 * direction(C, midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), E, A, D we get 180 == 2 * direction(midpoint(C, F), E) - 2 * direction(A, D) mod 360
By in_imply_collinear on orthocenter(A, B, G), midpoint(C, F), F we get collinear(F, midpoint(C, F), orthocenter(A, B, G))
By perpendicular_direction_conditions_v0_r on center(d), midpoint(C, F), C, F we get 180 == 2 * direction(center(d), midpoint(C, F)) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on F, C, E, midpoint(C, F) we get 180 == 2 * direction(F, C) - 2 * direction(E, midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), F, midpoint(C, F), E we get 180 == 2 * direction(midpoint(C, F), F) - 2 * direction(midpoint(C, F), E) mod 360
By perpendicular_direction_conditions_v0_r on D, A, center(d), midpoint(C, F) we get 180 == 2 * direction(D, A) - 2 * direction(center(d), midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(f, Line(C, G)), G, C we get 180 == 2 * direction(A, line_intersection(f, Line(C, G))) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(C, G)), G, C, D we get 180 == 2 * direction(line_intersection(f, Line(C, G)), G) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on F, C, midpoint(C, F), center(d) we get 180 == 2 * direction(F, C) - 2 * direction(midpoint(C, F), center(d)) mod 360
By perpendicular_direction_conditions_v0_r on B, F, E, midpoint(C, F) we get 180 == 2 * direction(B, F) - 2 * direction(E, midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on C, D, G, line_intersection(f, Line(C, G)) we get 180 == 2 * direction(C, D) - 2 * direction(G, line_intersection(f, Line(C, G))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), center(d), D, A we get 180 == 2 * direction(midpoint(C, F), center(d)) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on center(d), midpoint(C, F), B, F we get 180 == 2 * direction(center(d), midpoint(C, F)) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on A, D, E, midpoint(C, F) we get 180 == 2 * direction(A, D) - 2 * direction(E, midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on E, C, E, center(c) we get 180 == 2 * direction(E, C) - 2 * direction(E, center(c)) mod 360
By perpendicular_direction_conditions_v0_r on A, D, midpoint(C, F), center(d) we get 180 == 2 * direction(A, D) - 2 * direction(midpoint(C, F), center(d)) mod 360
By perpendicular_direction_conditions_v0_r on C, B, E, midpoint(C, F) we get 180 == 2 * direction(C, B) - 2 * direction(E, midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on C, A, center(c), E we get 180 == 2 * direction(C, A) - 2 * direction(center(c), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), C, E, midpoint(C, F) we get 180 == 2 * direction(midpoint(C, F), C) - 2 * direction(E, midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on B, C, E, midpoint(C, F) we get 180 == 2 * direction(B, C) - 2 * direction(E, midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(C, F), D, A we get 180 == 2 * direction(E, midpoint(C, F)) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(C, G)), G, A, B we get 180 == 2 * direction(line_intersection(f, Line(C, G)), G) - 2 * direction(A, B) mod 360
By sas_similarity on H, center(d), E, H, center(c), A we get similar_triangles(A, H, center(c), E, H, center(d))
By in_imply_collinear on orthocenter(B, C, G), A, B we get collinear(A, B, orthocenter(B, C, G))
By in_imply_collinear on orthocenter(A, C, G), A, B we get collinear(A, B, orthocenter(A, C, G))
By in_imply_collinear on orthocenter(A, C, G), B, C we get collinear(B, C, orthocenter(A, C, G))
By in_imply_collinear on orthocenter(B, C, G), G, F we get collinear(F, G, orthocenter(B, C, G))
By in_imply_collinear on orthocenter(A, B, G), C, G we get collinear(C, G, orthocenter(A, B, G))
By in_imply_collinear on orthocenter(A, B, C), G, F we get collinear(F, G, orthocenter(A, B, C))
By in_imply_collinear on orthocenter(A, B, G), B, C we get collinear(B, C, orthocenter(A, B, G))
By in_imply_collinear on orthocenter(A, B, C), F, A we get collinear(A, F, orthocenter(A, B, C))
By in_imply_collinear on orthocenter(A, B, C), G, line_intersection(f, Line(C, G)) we get collinear(G, orthocenter(A, B, C), line_intersection(f, Line(C, G)))
By anti_similar_triangle_basic_properties on A, E, D, H, E, C we get angle(A, E, D) == 0 - angle(H, E, C) mod 360, angle(E, D, A) == 0 - angle(E, C, H) mod 360, angle(D, A, E) == 0 - angle(C, H, E) mod 360, log(distance(A, E)) + log(distance(C, E)) == log(distance(E, H)) + log(distance(D, E)), log(distance(C, E)) + log(distance(A, D)) == log(distance(D, E)) + log(distance(C, H)), log(distance(A, D)) + log(distance(E, H)) == log(distance(C, H)) + log(distance(A, E))
By anti_similar_triangle_basic_properties on A, E, H, D, E, C we get angle(A, E, H) == 0 - angle(D, E, C) mod 360, angle(E, H, A) == 0 - angle(E, C, D) mod 360, angle(H, A, E) == 0 - angle(C, D, E) mod 360, log(distance(A, E)) + log(distance(C, E)) == log(distance(D, E)) + log(distance(E, H)), log(distance(C, E)) + log(distance(A, H)) == log(distance(E, H)) + log(distance(C, D)), log(distance(A, H)) + log(distance(D, E)) == log(distance(C, D)) + log(distance(A, E))
By anti_similar_triangle_basic_properties on H, E, A, C, E, D we get angle(H, E, A) == 0 - angle(C, E, D) mod 360, angle(E, A, H) == 0 - angle(E, D, C) mod 360, angle(A, H, E) == 0 - angle(D, C, E) mod 360, log(distance(C, E)) + log(distance(A, E)) == log(distance(E, H)) + log(distance(D, E)), log(distance(A, E)) + log(distance(C, D)) == log(distance(D, E)) + log(distance(A, H)), log(distance(A, H)) + log(distance(C, E)) == log(distance(C, D)) + log(distance(E, H))
By in_imply_collinear on orthocenter(A, B, G), F, C we get collinear(C, F, orthocenter(A, B, G))
By in_imply_collinear on orthocenter(A, B, G), C, line_intersection(f, Line(C, G)) we get collinear(C, orthocenter(A, B, G), line_intersection(f, Line(C, G)))
By in_imply_collinear on orthocenter(B, C, G), A, F we get collinear(A, F, orthocenter(B, C, G))
By in_imply_collinear on orthocenter(A, C, G), midpoint(C, F), F we get collinear(F, midpoint(C, F), orthocenter(A, C, G))
By in_imply_collinear on orthocenter(A, B, C), line_intersection(f, Line(C, G)), C we get collinear(C, orthocenter(A, B, C), line_intersection(f, Line(C, G)))
By in_imply_collinear on orthocenter(A, C, G), B, F we get collinear(B, F, orthocenter(A, C, G))
By sas_similarity on C, E, F, C, center(c), G we get similar_triangles(C, E, F, C, center(c), G)
By in_imply_collinear on orthocenter(A, C, G), line_intersection(f, Line(C, G)), B we get collinear(B, orthocenter(A, C, G), line_intersection(f, Line(C, G)))
By double_perpendicular_and_parallel_v0 on altitude(C, B, G), Line(B, G), Line(A, C) we get parallel(Line(A, C), altitude(C, B, G))
By anti_similar_triangle_basic_properties on A, D, B, H, C, A we get angle(A, D, B) == 0 - angle(H, C, A) mod 360, angle(D, B, A) == 0 - angle(C, A, H) mod 360, angle(B, A, D) == 0 - angle(A, H, C) mod 360, log(distance(A, D)) + log(distance(A, C)) == log(distance(C, H)) + log(distance(B, D)), log(distance(A, C)) + log(distance(A, B)) == log(distance(B, D)) + log(distance(A, H)), log(distance(A, B)) + log(distance(C, H)) == log(distance(A, H)) + log(distance(A, D))
By anti_similar_triangle_basic_properties on C, H, A, D, A, B we get angle(C, H, A) == 0 - angle(D, A, B) mod 360, angle(H, A, C) == 0 - angle(A, B, D) mod 360, angle(A, C, H) == 0 - angle(B, D, A) mod 360, log(distance(A, D)) + log(distance(A, H)) == log(distance(C, H)) + log(distance(A, B)), log(distance(A, B)) + log(distance(A, C)) == log(distance(A, H)) + log(distance(B, D)), log(distance(A, C)) + log(distance(A, D)) == log(distance(B, D)) + log(distance(C, H))
By anti_similar_triangle_basic_properties on B, E, A, A, E, H we get angle(B, E, A) == 0 - angle(A, E, H) mod 360, angle(E, A, B) == 0 - angle(E, H, A) mod 360, angle(A, B, E) == 0 - angle(H, A, E) mod 360, log(distance(A, E)) + log(distance(A, E)) == log(distance(B, E)) + log(distance(E, H)), log(distance(A, E)) + log(distance(A, H)) == log(distance(E, H)) + log(distance(A, B)), log(distance(A, B)) + log(distance(A, E)) == log(distance(A, H)) + log(distance(B, E))
By in_imply_collinear on orthocenter(B, C, G), line_intersection(f, Line(C, G)), B we get collinear(B, orthocenter(B, C, G), line_intersection(f, Line(C, G)))
By anti_similar_triangle_basic_properties on E, H, C, E, C, B we get angle(E, H, C) == 0 - angle(E, C, B) mod 360, angle(H, C, E) == 0 - angle(C, B, E) mod 360, angle(C, E, H) == 0 - angle(B, E, C) mod 360, log(distance(C, E)) + log(distance(C, H)) == log(distance(E, H)) + log(distance(B, C)), log(distance(B, C)) + log(distance(C, E)) == log(distance(C, H)) + log(distance(B, E)), log(distance(B, E)) + log(distance(E, H)) == log(distance(C, E)) + log(distance(C, E))
By reverse_direction on C, midpoint(C, F) we get 180 == direction(C, midpoint(C, F)) - direction(midpoint(C, F), C) mod 360
By in_imply_collinear on orthocenter(A, B, C), A, G we get collinear(A, G, orthocenter(A, B, C))
By in_imply_collinear on orthocenter(B, C, G), A, G we get collinear(A, G, orthocenter(B, C, G))
By sas_anti_similarity on C, center(c), G, F, E, C we get anti_similar_triangles(C, E, F, G, center(c), C)
By sas_similarity on E, center(d), F, C, center(c), D we get similar_triangles(C, D, center(c), E, F, center(d))
By in_imply_collinear on orthocenter(A, B, G), line_intersection(f, Line(C, G)), G we get collinear(G, orthocenter(A, B, G), line_intersection(f, Line(C, G)))
By altitude_definition on G, A, C, Line(B, G) we get Line(B, G) == altitude(G, A, C)
By in_imply_collinear on orthocenter(A, B, G), C, midpoint(C, F) we get collinear(C, midpoint(C, F), orthocenter(A, B, G))
By in_imply_collinear on orthocenter(B, C, G), A, line_intersection(f, Line(C, G)) we get collinear(A, orthocenter(B, C, G), line_intersection(f, Line(C, G)))
By in_imply_collinear on orthocenter(A, B, C), C, G we get collinear(C, G, orthocenter(A, B, C))
By sas_similarity on A, center(c), H, E, center(d), H we get similar_triangles(A, H, center(c), E, H, center(d))
By double_perpendicular_and_parallel_v0 on altitude(B, A, C), Line(A, C), Line(B, G) we get parallel(Line(B, G), altitude(B, A, C))
By sas_anti_similarity on F, E, C, C, center(c), G we get anti_similar_triangles(C, E, F, G, center(c), C)
By sas_anti_similarity on A, E, F, D, center(c), C we get anti_similar_triangles(A, E, F, D, center(c), C)
By sas_similarity on C, center(c), D, C, center(d), E we get similar_triangles(C, D, center(c), C, E, center(d))
By sas_similarity on C, center(c), G, C, E, F we get similar_triangles(C, E, F, C, center(c), G)
By sas_anti_similarity on C, center(c), D, F, center(d), E we get anti_similar_triangles(C, D, center(c), F, E, center(d))
By anti_similar_triangle_basic_properties on A, H, E, B, A, E we get angle(A, H, E) == 0 - angle(B, A, E) mod 360, angle(H, E, A) == 0 - angle(A, E, B) mod 360, angle(E, A, H) == 0 - angle(E, B, A) mod 360, log(distance(A, B)) + log(distance(E, H)) == log(distance(A, H)) + log(distance(A, E)), log(distance(A, E)) + log(distance(A, E)) == log(distance(E, H)) + log(distance(B, E)), log(distance(A, E)) + log(distance(A, B)) == log(distance(B, E)) + log(distance(A, H))
By between_imply_segment_sum on D, E, H we get distance(D, H) == distance(D, E) + distance(E, H)
By reverse_direction on midpoint(C, F), C we get 180 == direction(midpoint(C, F), C) - direction(C, midpoint(C, F)) mod 360
By double_perpendicular_and_parallel_v0 on altitude(G, A, C), Line(A, C), perpendicular_bisector(A, C) we get parallel(altitude(G, A, C), perpendicular_bisector(A, C))
By anti_similar_triangle_basic_properties on E, H, F, E, F, B we get angle(E, H, F) == 0 - angle(E, F, B) mod 360, angle(H, F, E) == 0 - angle(F, B, E) mod 360, angle(F, E, H) == 0 - angle(B, E, F) mod 360, log(distance(E, F)) + log(distance(F, H)) == log(distance(E, H)) + log(distance(B, F)), log(distance(B, F)) + log(distance(E, F)) == log(distance(F, H)) + log(distance(B, E)), log(distance(B, E)) + log(distance(E, H)) == log(distance(E, F)) + log(distance(E, F))
By sas_anti_similarity on F, E, A, C, center(d), E we get anti_similar_triangles(A, E, F, E, center(d), C)
By anti_similar_triangle_basic_properties on F, H, E, B, F, E we get angle(F, H, E) == 0 - angle(B, F, E) mod 360, angle(H, E, F) == 0 - angle(F, E, B) mod 360, angle(E, F, H) == 0 - angle(E, B, F) mod 360, log(distance(B, F)) + log(distance(E, H)) == log(distance(F, H)) + log(distance(E, F)), log(distance(E, F)) + log(distance(E, F)) == log(distance(E, H)) + log(distance(B, E)), log(distance(B, E)) + log(distance(F, H)) == log(distance(E, F)) + log(distance(B, F))
By sas_anti_similarity on A, E, F, F, center(d), E we get anti_similar_triangles(A, E, F, F, center(d), E)
By double_perpendicular_and_parallel_v0 on altitude(A, B, G), Line(B, G), Line(A, C) we get parallel(Line(A, C), altitude(A, B, G))
By sas_similarity on E, center(d), C, D, center(c), C we get similar_triangles(C, D, center(c), C, E, center(d))
By sas_anti_similarity on C, center(c), D, E, center(d), C we get anti_similar_triangles(C, D, center(c), E, C, center(d))
By internal_angle_bisector_definition_v0 on B, H, B, D we get angle(B, D, H) == angle(H, D, B) mod 360
By sas_anti_similarity on A, E, F, E, center(d), C we get anti_similar_triangles(A, E, F, E, center(d), C)
By internal_angle_bisector_definition_v0 on A, midpoint(C, F), G, F we get angle(A, F, midpoint(C, F)) == angle(midpoint(C, F), F, G) mod 360
By sas_similarity on F, E, A, F, center(d), E we get similar_triangles(A, E, F, E, center(d), F)
By sas_anti_similarity on H, center(c), A, E, center(d), H we get anti_similar_triangles(A, H, center(c), H, E, center(d))
By altitude_definition on C, B, G, Line(A, C) we get Line(A, C) == altitude(C, B, G)
By sas_anti_similarity on E, center(d), F, F, E, A we get anti_similar_triangles(A, E, F, F, center(d), E)
By anti_similar_triangle_basic_properties on H, E, C, C, E, B we get angle(H, E, C) == 0 - angle(C, E, B) mod 360, angle(E, C, H) == 0 - angle(E, B, C) mod 360, angle(C, H, E) == 0 - angle(B, C, E) mod 360, log(distance(C, E)) + log(distance(C, E)) == log(distance(E, H)) + log(distance(B, E)), log(distance(B, E)) + log(distance(C, H)) == log(distance(C, E)) + log(distance(B, C)), log(distance(B, C)) + log(distance(E, H)) == log(distance(C, H)) + log(distance(C, E))
By altitude_definition on B, A, C, Line(B, G) we get Line(B, G) == altitude(B, A, C)
By double_perpendicular_and_parallel_v0 on altitude(B, A, C), Line(A, C), perpendicular_bisector(A, C) we get parallel(altitude(B, A, C), perpendicular_bisector(A, C))
By sas_similarity on E, center(d), C, F, E, A we get similar_triangles(A, E, F, C, center(d), E)
By aa_anti_similarity on G, B, D, H, F, A we get anti_similar_triangles(A, F, H, D, B, G)
By sas_anti_similarity on D, center(c), C, E, center(d), F we get anti_similar_triangles(C, D, center(c), F, E, center(d))
By anti_similar_triangle_basic_properties on A, D, E, H, C, E we get angle(A, D, E) == 0 - angle(H, C, E) mod 360, angle(D, E, A) == 0 - angle(C, E, H) mod 360, angle(E, A, D) == 0 - angle(E, H, C) mod 360, log(distance(A, D)) + log(distance(C, E)) == log(distance(C, H)) + log(distance(D, E)), log(distance(C, E)) + log(distance(A, E)) == log(distance(D, E)) + log(distance(E, H)), log(distance(A, E)) + log(distance(C, H)) == log(distance(E, H)) + log(distance(A, D))
By double_perpendicular_and_parallel_v0 on Line(B, G), Line(A, C), perpendicular_bisector(A, C) we get parallel(Line(B, G), perpendicular_bisector(A, C))
By sas_anti_similarity on E, center(d), H, H, center(c), A we get anti_similar_triangles(A, H, center(c), H, E, center(d))
By perpendicular_angle_conditions_v0 on midpoint(C, F), F, A we get angle(midpoint(C, F), F, A) == orientation(A, midpoint(C, F), F) mod 360
By reverse_direction on F, midpoint(C, F) we get 180 == direction(F, midpoint(C, F)) - direction(midpoint(C, F), F) mod 360
By reverse_direction on midpoint(C, F), F we get 180 == direction(midpoint(C, F), F) - direction(F, midpoint(C, F)) mod 360
By sas_similarity on C, center(c), D, E, center(d), F we get similar_triangles(C, D, center(c), E, F, center(d))
By internal_angle_bisector_definition_v0 on B, H, B, E we get angle(B, E, H) == angle(H, E, B) mod 360
By sas_similarity on F, center(d), E, F, E, A we get similar_triangles(A, E, F, E, center(d), F)
By perpendicular_angle_conditions_v0 on G, F, midpoint(C, F) we get angle(G, F, midpoint(C, F)) == orientation(F, midpoint(C, F), G) mod 360
By aa_anti_similarity on H, F, A, G, B, D we get anti_similar_triangles(A, F, H, D, B, G)
By double_perpendicular_and_parallel_v0 on altitude(G, A, C), Line(A, C), altitude(B, A, C) we get parallel(altitude(B, A, C), altitude(G, A, C))
By sas_similarity on G, center(c), C, F, E, C we get similar_triangles(C, E, F, C, center(c), G)
By aa_anti_similarity on H, A, F, G, D, B we get anti_similar_triangles(A, F, H, D, B, G)
By sas_anti_similarity on E, center(d), C, A, E, F we get anti_similar_triangles(A, E, F, E, center(d), C)
By altitude_definition on A, G, B, Line(A, C) we get Line(A, C) == altitude(A, B, G)
By sas_anti_similarity on A, center(c), H, H, center(d), E we get anti_similar_triangles(A, H, center(c), H, E, center(d))
By sas_anti_similarity on G, center(c), C, C, E, F we get anti_similar_triangles(C, E, F, G, center(c), C)
By double_perpendicular_and_parallel_v0 on altitude(A, B, G), Line(B, G), altitude(C, B, G) we get parallel(altitude(A, B, G), altitude(C, B, G))
By sas_anti_similarity on E, center(d), C, C, center(c), D we get anti_similar_triangles(C, D, center(c), E, C, center(d))
By sas_anti_similarity on C, center(d), E, F, E, A we get anti_similar_triangles(A, E, F, E, center(d), C)
By sas_anti_similarity on H, center(d), E, A, center(c), H we get anti_similar_triangles(A, H, center(c), H, E, center(d))
By sas_similarity on C, center(d), E, A, E, F we get similar_triangles(A, E, F, C, center(d), E)
By perpendicular_angle_conditions_v0 on A, F, midpoint(C, F) we get angle(A, F, midpoint(C, F)) == orientation(A, F, midpoint(C, F)) mod 360
By sas_similarity on F, center(d), E, D, center(c), C we get similar_triangles(C, D, center(c), E, F, center(d))
By sas_anti_similarity on C, center(d), E, D, center(c), C we get anti_similar_triangles(C, D, center(c), E, C, center(d))
By sas_similarity on A, E, F, C, center(c), D we get similar_triangles(A, E, F, C, center(c), D)
By internal_angle_bisector_definition_v0 on G, midpoint(C, F), A, F we get angle(G, F, midpoint(C, F)) == angle(midpoint(C, F), F, A) mod 360
By perpendicular_angle_conditions_v0 on midpoint(C, F), F, G we get angle(midpoint(C, F), F, G) == orientation(F, G, midpoint(C, F)) mod 360
By aa_anti_similarity on G, D, B, H, A, F we get anti_similar_triangles(A, F, H, D, B, G)
By sas_similarity on H, center(c), A, H, center(d), E we get similar_triangles(A, H, center(c), E, H, center(d))
By sas_anti_similarity on C, center(c), D, F, E, A we get anti_similar_triangles(A, E, F, D, center(c), C)
By external_angle_bisector_definition_v0 on G, midpoint(C, F), G, F we get 180 == angle(G, F, midpoint(C, F)) + angle(G, F, midpoint(C, F)) mod 360
By sas_similarity on C, center(c), D, A, E, F we get similar_triangles(A, E, F, C, center(c), D)
By sas_similarity on F, E, C, G, center(c), C we get similar_triangles(C, E, F, C, center(c), G)
By sas_similarity on E, center(d), F, A, E, F we get similar_triangles(A, E, F, E, center(d), F)
By sas_similarity on D, center(c), C, E, center(d), C we get similar_triangles(C, D, center(c), C, E, center(d))
By sas_anti_similarity on D, center(c), C, A, E, F we get anti_similar_triangles(A, E, F, D, center(c), C)
By sas_anti_similarity on F, center(d), E, A, E, F we get anti_similar_triangles(A, E, F, F, center(d), E)
By double_perpendicular_and_parallel_v0 on Line(B, G), Line(A, C), altitude(G, A, C) we get parallel(Line(B, G), altitude(G, A, C))
By sas_similarity on C, center(d), E, C, center(c), D we get similar_triangles(C, D, center(c), C, E, center(d))
By internal_angle_bisector_definition_v0 on B, midpoint(C, F), B, F we get angle(B, F, midpoint(C, F)) == angle(midpoint(C, F), F, B) mod 360
By sas_anti_similarity on D, center(c), C, C, center(d), E we get anti_similar_triangles(C, D, center(c), E, C, center(d))
By sas_similarity on D, center(c), C, F, center(d), E we get similar_triangles(C, D, center(c), E, F, center(d))
By internal_angle_bisector_definition_v0 on B, midpoint(C, F), B, C we get angle(B, C, midpoint(C, F)) == angle(midpoint(C, F), C, B) mod 360
By sas_anti_similarity on F, E, A, E, center(d), F we get anti_similar_triangles(A, E, F, F, center(d), E)
By external_angle_bisector_definition_v0 on A, midpoint(C, F), A, F we get 180 == angle(A, F, midpoint(C, F)) + angle(A, F, midpoint(C, F)) mod 360
By sas_similarity on F, E, A, E, center(d), C we get similar_triangles(A, E, F, C, center(d), E)
By sas_similarity on A, E, F, E, center(d), F we get similar_triangles(A, E, F, E, center(d), F)
By sas_similarity on A, E, F, C, center(d), E we get similar_triangles(A, E, F, C, center(d), E)
By sas_anti_similarity on F, center(d), E, C, center(c), D we get anti_similar_triangles(C, D, center(c), F, E, center(d))
By sas_anti_similarity on E, center(d), F, D, center(c), C we get anti_similar_triangles(C, D, center(c), F, E, center(d))
By sas_similarity on F, E, A, D, center(c), C we get similar_triangles(A, E, F, C, center(c), D)
By sas_similarity on D, center(c), C, F, E, A we get similar_triangles(A, E, F, C, center(c), D)
By sas_similarity on E, center(d), H, A, center(c), H we get similar_triangles(A, H, center(c), E, H, center(d))
By sas_anti_similarity on C, E, F, G, center(c), C we get anti_similar_triangles(C, E, F, G, center(c), C)
By sas_anti_similarity on F, E, A, C, center(c), D we get anti_similar_triangles(A, E, F, D, center(c), C)
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(C, G)), G, line_intersection(f, Line(C, G)), A we get 180 == 2 * direction(line_intersection(f, Line(C, G)), G) - 2 * direction(line_intersection(f, Line(C, G)), A) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(f, Line(C, G)), G, line_intersection(f, Line(C, G)) we get 180 == 2 * direction(A, line_intersection(f, Line(C, G))) - 2 * direction(G, line_intersection(f, Line(C, G))) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(f, Line(C, G)), line_intersection(f, Line(C, G)), G we get 180 == 2 * direction(A, line_intersection(f, Line(C, G))) - 2 * direction(line_intersection(f, Line(C, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(C, G)), C, line_intersection(f, Line(C, G)), A we get 180 == 2 * direction(line_intersection(f, Line(C, G)), C) - 2 * direction(line_intersection(f, Line(C, G)), A) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(f, Line(C, G)), line_intersection(f, Line(C, G)), C we get 180 == 2 * direction(B, line_intersection(f, Line(C, G))) - 2 * direction(line_intersection(f, Line(C, G)), C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(C, G)), C, A, line_intersection(f, Line(C, G)) we get 180 == 2 * direction(line_intersection(f, Line(C, G)), C) - 2 * direction(A, line_intersection(f, Line(C, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(C, G)), B, line_intersection(f, Line(C, G)), G we get 180 == 2 * direction(line_intersection(f, Line(C, G)), B) - 2 * direction(line_intersection(f, Line(C, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(f, Line(C, G)), line_intersection(f, Line(C, G)), B we get 180 == 2 * direction(G, line_intersection(f, Line(C, G))) - 2 * direction(line_intersection(f, Line(C, G)), B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(C, G)), A, line_intersection(f, Line(C, G)), C we get 180 == 2 * direction(line_intersection(f, Line(C, G)), A) - 2 * direction(line_intersection(f, Line(C, G)), C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(C, G)), A, C, line_intersection(f, Line(C, G)) we get 180 == 2 * direction(line_intersection(f, Line(C, G)), A) - 2 * direction(C, line_intersection(f, Line(C, G))) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(f, Line(C, G)), A, line_intersection(f, Line(C, G)) we get 180 == 2 * direction(C, line_intersection(f, Line(C, G))) - 2 * direction(A, line_intersection(f, Line(C, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(C, G)), B, C, line_intersection(f, Line(C, G)) we get 180 == 2 * direction(line_intersection(f, Line(C, G)), B) - 2 * direction(C, line_intersection(f, Line(C, G))) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(f, Line(C, G)), line_intersection(f, Line(C, G)), A we get 180 == 2 * direction(C, line_intersection(f, Line(C, G))) - 2 * direction(line_intersection(f, Line(C, G)), A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(C, G)), A, G, line_intersection(f, Line(C, G)) we get 180 == 2 * direction(line_intersection(f, Line(C, G)), A) - 2 * direction(G, line_intersection(f, Line(C, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(C, G)), B, G, line_intersection(f, Line(C, G)) we get 180 == 2 * direction(line_intersection(f, Line(C, G)), B) - 2 * direction(G, line_intersection(f, Line(C, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(C, G)), G, A, line_intersection(f, Line(C, G)) we get 180 == 2 * direction(line_intersection(f, Line(C, G)), G) - 2 * direction(A, line_intersection(f, Line(C, G))) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(f, Line(C, G)), line_intersection(f, Line(C, G)), C we get 180 == 2 * direction(A, line_intersection(f, Line(C, G))) - 2 * direction(line_intersection(f, Line(C, G)), C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(C, G)), C, line_intersection(f, Line(C, G)), B we get 180 == 2 * direction(line_intersection(f, Line(C, G)), C) - 2 * direction(line_intersection(f, Line(C, G)), B) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(f, Line(C, G)), line_intersection(f, Line(C, G)), G we get 180 == 2 * direction(B, line_intersection(f, Line(C, G))) - 2 * direction(line_intersection(f, Line(C, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(C, G)), G, B, line_intersection(f, Line(C, G)) we get 180 == 2 * direction(line_intersection(f, Line(C, G)), G) - 2 * direction(B, line_intersection(f, Line(C, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(C, G)), G, line_intersection(f, Line(C, G)), B we get 180 == 2 * direction(line_intersection(f, Line(C, G)), G) - 2 * direction(line_intersection(f, Line(C, G)), B) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(f, Line(C, G)), A, line_intersection(f, Line(C, G)) we get 180 == 2 * direction(G, line_intersection(f, Line(C, G))) - 2 * direction(A, line_intersection(f, Line(C, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(C, G)), C, B, line_intersection(f, Line(C, G)) we get 180 == 2 * direction(line_intersection(f, Line(C, G)), C) - 2 * direction(B, line_intersection(f, Line(C, G))) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(f, Line(C, G)), C, line_intersection(f, Line(C, G)) we get 180 == 2 * direction(A, line_intersection(f, Line(C, G))) - 2 * direction(C, line_intersection(f, Line(C, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(C, G)), B, line_intersection(f, Line(C, G)), C we get 180 == 2 * direction(line_intersection(f, Line(C, G)), B) - 2 * direction(line_intersection(f, Line(C, G)), C) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(f, Line(C, G)), C, line_intersection(f, Line(C, G)) we get 180 == 2 * direction(B, line_intersection(f, Line(C, G))) - 2 * direction(C, line_intersection(f, Line(C, G))) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(f, Line(C, G)), G, line_intersection(f, Line(C, G)) we get 180 == 2 * direction(B, line_intersection(f, Line(C, G))) - 2 * direction(G, line_intersection(f, Line(C, G))) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(f, Line(C, G)), line_intersection(f, Line(C, G)), B we get 180 == 2 * direction(C, line_intersection(f, Line(C, G))) - 2 * direction(line_intersection(f, Line(C, G)), B) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(f, Line(C, G)), B, line_intersection(f, Line(C, G)) we get 180 == 2 * direction(G, line_intersection(f, Line(C, G))) - 2 * direction(B, line_intersection(f, Line(C, G))) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(f, Line(C, G)), B, line_intersection(f, Line(C, G)) we get 180 == 2 * direction(C, line_intersection(f, Line(C, G))) - 2 * direction(B, line_intersection(f, Line(C, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(C, G)), A, line_intersection(f, Line(C, G)), G we get 180 == 2 * direction(line_intersection(f, Line(C, G)), A) - 2 * direction(line_intersection(f, Line(C, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(f, Line(C, G)), line_intersection(f, Line(C, G)), A we get 180 == 2 * direction(G, line_intersection(f, Line(C, G))) - 2 * direction(line_intersection(f, Line(C, G)), A) mod 360
By internal_angle_bisector_definition_v0_r on H, E, B, D we get Line(D, E) == internal_angle_bisector(B, D, H)
By collinear_definition on E, midpoint(C, F), center(d) we get midpoint(C, F) in Line(E, center(d)), center(d) in Line(E, midpoint(C, F)), Line(E, center(d)) == Line(E, midpoint(C, F)), 0 == 2 * angle(midpoint(C, F), E, center(d)) mod 360
By internal_angle_bisector_definition_v0_r on B, D, H, E we get Line(D, E) == internal_angle_bisector(B, E, H)
By external_angle_bisector_definition_v0_r on E, G, D, H we get Line(G, H) == external_angle_bisector(D, H, E)
By internal_angle_bisector_definition_v0 on C, E, A, center(c) we get angle(C, center(c), E) == angle(E, center(c), A) mod 360
By external_angle_bisector_definition_v0_r on midpoint(C, F), F, B, C we get Line(C, F) == external_angle_bisector(B, C, midpoint(C, F))
By internal_angle_bisector_definition_v0_r on midpoint(C, F), F, midpoint(C, F), C we get Line(C, F) == internal_angle_bisector(midpoint(C, F), C, midpoint(C, F))
By internal_angle_bisector_definition_v0_r on center(c), D, center(c), G we get Line(D, G) == internal_angle_bisector(center(c), G, center(c))
By collinear_definition on E, center(d), midpoint(C, F) we get center(d) in Line(E, midpoint(C, F)), midpoint(C, F) in Line(E, center(d)), Line(E, center(d)) == Line(E, midpoint(C, F)), 0 == 2 * angle(center(d), E, midpoint(C, F)) mod 360
By collinear_definition on center(d), midpoint(C, F), E we get midpoint(C, F) in Line(E, center(d)), E in Line(center(d), midpoint(C, F)), Line(E, center(d)) == Line(center(d), midpoint(C, F)), 0 == 2 * angle(midpoint(C, F), center(d), E) mod 360
By external_angle_bisector_definition_v0_r on E, G, E, H we get Line(G, H) == external_angle_bisector(E, H, E)
By internal_angle_bisector_definition_v0 on F, midpoint(C, F), C, center(d) we get angle(F, center(d), midpoint(C, F)) == angle(midpoint(C, F), center(d), C) mod 360
By perpendicular_lines_draw_intersection on altitude(B, A, C), Line(A, C) we get exists(line_intersection(Line(A, C), altitude(B, A, C)))
By internal_angle_bisector_definition_v0_r on F, C, F, midpoint(C, F) we get Line(C, midpoint(C, F)) == internal_angle_bisector(F, midpoint(C, F), F)
By internal_angle_bisector_definition_v0_r on B, C, midpoint(C, F), F we get Line(C, F) == internal_angle_bisector(B, F, midpoint(C, F))
By collinear_definition on G, line_intersection(f, Line(C, G)), C we get line_intersection(f, Line(C, G)) in Line(C, G), C in Line(G, line_intersection(f, Line(C, G))), Line(C, G) == Line(G, line_intersection(f, Line(C, G))), 0 == 2 * angle(line_intersection(f, Line(C, G)), G, C) mod 360
By collinear_definition on center(d), E, midpoint(C, F) we get E in Line(center(d), midpoint(C, F)), midpoint(C, F) in Line(E, center(d)), Line(E, center(d)) == Line(center(d), midpoint(C, F)), 0 == 2 * angle(E, center(d), midpoint(C, F)) mod 360
By perpendicular_angle_conditions_v0 on line_intersection(f, Line(C, G)), C, D we get angle(line_intersection(f, Line(C, G)), C, D) == orientation(C, D, line_intersection(f, Line(C, G))) mod 360
By perpendicular_angle_conditions_v0 on C, E, center(c) we get angle(C, E, center(c)) == orientation(C, E, center(c)) mod 360
By collinear_definition on G, C, line_intersection(f, Line(C, G)) we get C in Line(G, line_intersection(f, Line(C, G))), line_intersection(f, Line(C, G)) in Line(C, G), Line(C, G) == Line(G, line_intersection(f, Line(C, G))), 0 == 2 * angle(C, G, line_intersection(f, Line(C, G))) mod 360
By external_angle_bisector_definition_v0 on D, line_intersection(f, Line(C, G)), D, C we get 180 == angle(D, C, line_intersection(f, Line(C, G))) + angle(D, C, line_intersection(f, Line(C, G))) mod 360
By internal_angle_bisector_definition_v0_r on D, E, D, H we get Line(E, H) == internal_angle_bisector(D, H, D)
By perpendicular_angle_conditions_v0 on center(d), midpoint(C, F), F we get angle(center(d), midpoint(C, F), F) == orientation(F, center(d), midpoint(C, F)) mod 360
By collinear_definition on B, line_intersection(f, Line(C, G)), A we get line_intersection(f, Line(C, G)) in Line(A, B), A in Line(B, line_intersection(f, Line(C, G))), Line(A, B) == Line(B, line_intersection(f, Line(C, G))), 0 == 2 * angle(line_intersection(f, Line(C, G)), B, A) mod 360
By perpendicular_angle_conditions_v0 on C, midpoint(C, F), E we get angle(C, midpoint(C, F), E) == orientation(C, midpoint(C, F), E) mod 360
By collinear_definition on A, B, line_intersection(f, Line(C, G)) we get B in Line(A, line_intersection(f, Line(C, G))), line_intersection(f, Line(C, G)) in Line(A, B), Line(A, B) == Line(A, line_intersection(f, Line(C, G))), 0 == 2 * angle(B, A, line_intersection(f, Line(C, G))) mod 360
By collinear_definition on A, line_intersection(f, Line(C, G)), B we get line_intersection(f, Line(C, G)) in Line(A, B), B in Line(A, line_intersection(f, Line(C, G))), Line(A, B) == Line(A, line_intersection(f, Line(C, G))), 0 == 2 * angle(line_intersection(f, Line(C, G)), A, B) mod 360
By altitude_definition on center(c), A, C, perpendicular_bisector(A, C) we get perpendicular_bisector(A, C) == altitude(center(c), A, C)
By perpendicular_angle_conditions_v0 on center(c), E, A we get angle(center(c), E, A) == orientation(A, center(c), E) mod 360
By internal_angle_bisector_definition_v0 on C, midpoint(C, F), F, center(d) we get angle(C, center(d), midpoint(C, F)) == angle(midpoint(C, F), center(d), F) mod 360
By internal_angle_bisector_definition_v0_r on H, E, H, D we get Line(D, E) == internal_angle_bisector(H, D, H)
By perpendicular_angle_conditions_v0 on E, midpoint(C, F), F we get angle(E, midpoint(C, F), F) == orientation(E, midpoint(C, F), F) mod 360
By internal_angle_bisector_definition_v0_r on G, center(c), G, D we get internal_angle_bisector(G, D, G) == Line(D, center(c))
By perpendicular_lines_draw_intersection on i, median(E, C, F) we get exists(line_intersection(i, median(E, C, F)))
By collinear_definition on C, line_intersection(f, Line(C, G)), G we get line_intersection(f, Line(C, G)) in Line(C, G), G in Line(C, line_intersection(f, Line(C, G))), Line(C, G) == Line(C, line_intersection(f, Line(C, G))), 0 == 2 * angle(line_intersection(f, Line(C, G)), C, G) mod 360
By internal_angle_bisector_definition_v0 on F, midpoint(C, F), C, E we get angle(F, E, midpoint(C, F)) == angle(midpoint(C, F), E, C) mod 360
By altitude_definition on G, B, D, Line(G, H) we get Line(G, H) == altitude(G, B, D)
By internal_angle_bisector_definition_v0_r on center(c), G, center(c), D we get Line(D, G) == internal_angle_bisector(center(c), D, center(c))
By perpendicular_angle_conditions_v0 on F, midpoint(C, F), E we get angle(F, midpoint(C, F), E) == orientation(E, F, midpoint(C, F)) mod 360
By internal_angle_bisector_definition_v0_r on H, D, H, E we get Line(D, E) == internal_angle_bisector(H, E, H)
By internal_angle_bisector_definition_v0 on A, E, C, center(c) we get angle(A, center(c), E) == angle(E, center(c), C) mod 360
By perpendicular_angle_conditions_v0 on F, midpoint(C, F), center(d) we get angle(F, midpoint(C, F), center(d)) == orientation(F, midpoint(C, F), center(d)) mod 360
By internal_angle_bisector_definition_v0 on C, midpoint(C, F), F, E we get angle(C, E, midpoint(C, F)) == angle(midpoint(C, F), E, F) mod 360
By internal_angle_bisector_definition_v0_r on C, F, C, midpoint(C, F) we get Line(F, midpoint(C, F)) == internal_angle_bisector(C, midpoint(C, F), C)
By perpendicular_angle_conditions_v0 on A, E, center(c) we get angle(A, E, center(c)) == orientation(A, E, center(c)) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(C, F), C, midpoint(C, F), F we get Line(C, F) == internal_angle_bisector(midpoint(C, F), F, midpoint(C, F))
By perpendicular_lines_draw_intersection on altitude(G, A, C), Line(A, C) we get exists(line_intersection(Line(A, C), altitude(G, A, C)))
By collinear_definition on C, G, line_intersection(f, Line(C, G)) we get G in Line(C, line_intersection(f, Line(C, G))), line_intersection(f, Line(C, G)) in Line(C, G), Line(C, G) == Line(C, line_intersection(f, Line(C, G))), 0 == 2 * angle(G, C, line_intersection(f, Line(C, G))) mod 360
By internal_angle_bisector_definition_v0_r on E, D, E, H we get Line(D, H) == internal_angle_bisector(E, H, E)
By perpendicular_angle_conditions_v0 on C, midpoint(C, F), center(d) we get angle(C, midpoint(C, F), center(d)) == orientation(C, midpoint(C, F), center(d)) mod 360
By internal_angle_bisector_definition_v0_r on D, center(c), D, G we get internal_angle_bisector(D, G, D) == Line(G, center(c))
By perpendicular_angle_conditions_v0 on center(d), midpoint(C, F), C we get angle(center(d), midpoint(C, F), C) == orientation(C, center(d), midpoint(C, F)) mod 360
By collinear_definition on B, A, line_intersection(f, Line(C, G)) we get A in Line(B, line_intersection(f, Line(C, G))), line_intersection(f, Line(C, G)) in Line(A, B), Line(A, B) == Line(B, line_intersection(f, Line(C, G))), 0 == 2 * angle(A, B, line_intersection(f, Line(C, G))) mod 360
By perpendicular_angle_conditions_v0 on E, midpoint(C, F), C we get angle(E, midpoint(C, F), C) == orientation(C, E, midpoint(C, F)) mod 360
By perpendicular_angle_conditions_v0 on center(c), E, C we get angle(center(c), E, C) == orientation(C, center(c), E) mod 360
By perpendicular_angle_conditions_v0 on D, C, line_intersection(f, Line(C, G)) we get angle(D, C, line_intersection(f, Line(C, G))) == orientation(C, line_intersection(f, Line(C, G)), D) mod 360
By perpendicular_lines_draw_intersection on altitude(C, B, G), Line(B, G) we get exists(line_intersection(Line(B, G), altitude(C, B, G)))
By perpendicular_lines_draw_intersection on altitude(A, B, G), Line(B, G) we get exists(line_intersection(Line(B, G), altitude(A, B, G)))
By perpendicular_lines_draw_intersection on Line(A, C), Line(B, G) we get exists(line_intersection(Line(A, C), Line(B, G)))
By altitude_definition on orthocenter(A, B, C), midpoint(C, F), F, j we get j == altitude(orthocenter(A, B, C), F, midpoint(C, F))
By altitude_definition on orthocenter(A, C, G), C, line_intersection(f, Line(C, G)), f we get f == altitude(orthocenter(A, C, G), C, line_intersection(f, Line(C, G)))
By collinear_definition on line_intersection(f, Line(C, G)), B, A we get B in Line(A, line_intersection(f, Line(C, G))), A in Line(B, line_intersection(f, Line(C, G))), Line(A, line_intersection(f, Line(C, G))) == Line(B, line_intersection(f, Line(C, G))), 0 == 2 * angle(B, line_intersection(f, Line(C, G)), A) mod 360
By altitude_definition on orthocenter(B, C, G), B, C, j we get j == altitude(orthocenter(B, C, G), B, C)
By altitude_definition on A, center(c), E, Line(A, C) we get Line(A, C) == altitude(A, E, center(c))
By altitude_definition on orthocenter(A, B, C), B, F, j we get j == altitude(orthocenter(A, B, C), B, F)
By altitude_definition on G, line_intersection(f, Line(C, G)), A, Line(C, G) we get Line(C, G) == altitude(G, A, line_intersection(f, Line(C, G)))
By altitude_definition on orthocenter(A, B, C), C, D, Line(C, G) we get Line(C, G) == altitude(orthocenter(A, B, C), C, D)
By altitude_definition on midpoint(C, F), A, D, median(E, C, F) we get median(E, C, F) == altitude(midpoint(C, F), A, D)
By altitude_definition on E, B, G, Line(A, C) we get Line(A, C) == altitude(E, B, G)
By altitude_definition on B, H, G, Line(B, D) we get Line(B, D) == altitude(B, G, H)
By altitude_definition on B, G, line_intersection(f, Line(C, G)), f we get f == altitude(B, G, line_intersection(f, Line(C, G)))
By altitude_definition on B, E, C, Line(B, G) we get Line(B, G) == altitude(B, C, E)
By altitude_definition on B, A, E, Line(B, G) we get Line(B, G) == altitude(B, A, E)
By altitude_definition on orthocenter(B, C, G), C, line_intersection(f, Line(C, G)), f we get f == altitude(orthocenter(B, C, G), C, line_intersection(f, Line(C, G)))
By altitude_definition on orthocenter(A, B, G), line_intersection(f, Line(C, G)), A, Line(C, G) we get Line(C, G) == altitude(orthocenter(A, B, G), A, line_intersection(f, Line(C, G)))
By altitude_definition on orthocenter(A, C, G), midpoint(C, F), E, g we get g == altitude(orthocenter(A, C, G), E, midpoint(C, F))
By altitude_definition on orthocenter(A, C, G), center(d), E, g we get g == altitude(orthocenter(A, C, G), E, center(d))
By altitude_definition on B, center(d), midpoint(C, F), g we get g == altitude(B, center(d), midpoint(C, F))
By altitude_definition on orthocenter(A, B, G), A, G, g we get g == altitude(orthocenter(A, B, G), A, G)
By altitude_definition on B, midpoint(C, F), E, g we get g == altitude(B, E, midpoint(C, F))
By perpendicular_angle_conditions_v0 on C, line_intersection(f, Line(C, G)), A we get angle(C, line_intersection(f, Line(C, G)), A) == orientation(A, C, line_intersection(f, Line(C, G))) mod 360
By altitude_definition on A, line_intersection(f, Line(C, G)), G, f we get f == altitude(A, G, line_intersection(f, Line(C, G)))
By altitude_definition on A, line_intersection(f, Line(C, G)), C, f we get f == altitude(A, C, line_intersection(f, Line(C, G)))
By altitude_definition on orthocenter(A, C, G), A, G, g we get g == altitude(orthocenter(A, C, G), A, G)
By altitude_definition on G, A, E, altitude(G, A, C) we get altitude(G, A, C) == altitude(G, A, E)
By altitude_definition on orthocenter(A, C, G), C, E, altitude(G, A, C) we get altitude(G, A, C) == altitude(orthocenter(A, C, G), C, E)
By altitude_definition on orthocenter(B, C, G), F, midpoint(C, F), j we get j == altitude(orthocenter(B, C, G), F, midpoint(C, F))
By altitude_definition on center(c), E, C, perpendicular_bisector(A, C) we get perpendicular_bisector(A, C) == altitude(center(c), C, E)
By altitude_definition on D, C, line_intersection(f, Line(C, G)), h we get h == altitude(D, C, line_intersection(f, Line(C, G)))
By altitude_definition on center(d), F, midpoint(C, F), median(E, C, F) we get median(E, C, F) == altitude(center(d), F, midpoint(C, F))
By altitude_definition on C, center(d), midpoint(C, F), g we get g == altitude(C, center(d), midpoint(C, F))
By altitude_definition on orthocenter(A, B, G), A, F, g we get g == altitude(orthocenter(A, B, G), A, F)
By perpendicular_angle_conditions_v0 on C, line_intersection(f, Line(C, G)), B we get angle(C, line_intersection(f, Line(C, G)), B) == orientation(B, C, line_intersection(f, Line(C, G))) mod 360
By altitude_definition on orthocenter(B, C, G), B, F, j we get j == altitude(orthocenter(B, C, G), B, F)
By altitude_definition on G, E, D, Line(G, H) we get Line(G, H) == altitude(G, D, E)
By altitude_definition on orthocenter(A, B, G), midpoint(C, F), center(d), g we get g == altitude(orthocenter(A, B, G), center(d), midpoint(C, F))
By altitude_definition on orthocenter(A, C, G), A, E, altitude(G, A, C) we get altitude(G, A, C) == altitude(orthocenter(A, C, G), A, E)
By altitude_definition on orthocenter(A, B, C), A, E, altitude(B, A, C) we get altitude(B, A, C) == altitude(orthocenter(A, B, C), A, E)
By altitude_definition on orthocenter(B, C, G), B, G, altitude(C, B, G) we get altitude(C, B, G) == altitude(orthocenter(B, C, G), B, G)
By altitude_definition on orthocenter(A, B, C), A, C, altitude(B, A, C) we get altitude(B, A, C) == altitude(orthocenter(A, B, C), A, C)
By collinear_definition on line_intersection(f, Line(C, G)), A, B we get A in Line(B, line_intersection(f, Line(C, G))), B in Line(A, line_intersection(f, Line(C, G))), Line(A, line_intersection(f, Line(C, G))) == Line(B, line_intersection(f, Line(C, G))), 0 == 2 * angle(A, line_intersection(f, Line(C, G)), B) mod 360
By altitude_definition on orthocenter(B, C, G), G, line_intersection(f, Line(C, G)), f we get f == altitude(orthocenter(B, C, G), G, line_intersection(f, Line(C, G)))
By altitude_definition on orthocenter(A, C, G), F, A, g we get g == altitude(orthocenter(A, C, G), A, F)
By altitude_definition on F, center(d), midpoint(C, F), g we get g == altitude(F, center(d), midpoint(C, F))
By altitude_definition on center(c), E, A, perpendicular_bisector(A, C) we get perpendicular_bisector(A, C) == altitude(center(c), A, E)
By altitude_definition on orthocenter(A, B, G), B, A, Line(C, G) we get Line(C, G) == altitude(orthocenter(A, B, G), A, B)
By altitude_definition on orthocenter(B, C, G), C, midpoint(C, F), j we get j == altitude(orthocenter(B, C, G), C, midpoint(C, F))
By altitude_definition on orthocenter(A, B, G), B, line_intersection(f, Line(C, G)), Line(C, G) we get Line(C, G) == altitude(orthocenter(A, B, G), B, line_intersection(f, Line(C, G)))
By altitude_definition on orthocenter(A, B, C), C, E, altitude(B, A, C) we get altitude(B, A, C) == altitude(orthocenter(A, B, C), C, E)
By altitude_definition on G, B, line_intersection(f, Line(C, G)), Line(C, G) we get Line(C, G) == altitude(G, B, line_intersection(f, Line(C, G)))
By altitude_definition on A, F, midpoint(C, F), j we get j == altitude(A, F, midpoint(C, F))
By altitude_definition on orthocenter(A, C, G), center(d), midpoint(C, F), g we get g == altitude(orthocenter(A, C, G), center(d), midpoint(C, F))
By altitude_definition on G, A, E, Line(B, G) we get Line(B, G) == altitude(G, A, E)
By altitude_definition on G, C, E, altitude(G, A, C) we get altitude(G, A, C) == altitude(G, C, E)
By altitude_definition on orthocenter(A, B, C), C, B, j we get j == altitude(orthocenter(A, B, C), B, C)
By altitude_definition on orthocenter(A, B, G), center(d), E, g we get g == altitude(orthocenter(A, B, G), E, center(d))
By altitude_definition on C, E, center(c), Line(A, C) we get Line(A, C) == altitude(C, E, center(c))
By altitude_definition on C, E, midpoint(C, F), g we get g == altitude(C, E, midpoint(C, F))
By altitude_definition on E, A, D, median(E, C, F) we get median(E, C, F) == altitude(E, A, D)
By altitude_definition on midpoint(C, F), A, F, g we get g == altitude(midpoint(C, F), A, F)
By altitude_definition on B, line_intersection(f, Line(C, G)), C, f we get f == altitude(B, C, line_intersection(f, Line(C, G)))
By altitude_definition on E, C, midpoint(C, F), median(E, C, F) we get median(E, C, F) == altitude(E, C, midpoint(C, F))
By altitude_definition on orthocenter(A, B, C), F, C, j we get j == altitude(orthocenter(A, B, C), C, F)
By altitude_definition on D, G, line_intersection(f, Line(C, G)), h we get h == altitude(D, G, line_intersection(f, Line(C, G)))
By altitude_definition on C, A, line_intersection(f, Line(C, G)), Line(C, G) we get Line(C, G) == altitude(C, A, line_intersection(f, Line(C, G)))
By altitude_definition on orthocenter(A, B, C), B, line_intersection(f, Line(C, G)), Line(C, G) we get Line(C, G) == altitude(orthocenter(A, B, C), B, line_intersection(f, Line(C, G)))
By perpendicular_angle_conditions_v0 on B, line_intersection(f, Line(C, G)), C we get angle(B, line_intersection(f, Line(C, G)), C) == orientation(B, line_intersection(f, Line(C, G)), C) mod 360
By altitude_definition on orthocenter(A, B, G), B, G, altitude(A, B, G) we get altitude(A, B, G) == altitude(orthocenter(A, B, G), B, G)
By altitude_definition on orthocenter(A, B, G), midpoint(C, F), E, g we get g == altitude(orthocenter(A, B, G), E, midpoint(C, F))
By altitude_definition on A, midpoint(C, F), C, j we get j == altitude(A, C, midpoint(C, F))
By altitude_definition on B, E, A, altitude(B, A, C) we get altitude(B, A, C) == altitude(B, A, E)
By altitude_definition on orthocenter(A, C, G), line_intersection(f, Line(C, G)), G, f we get f == altitude(orthocenter(A, C, G), G, line_intersection(f, Line(C, G)))
By altitude_definition on G, E, B, Line(G, H) we get Line(G, H) == altitude(G, B, E)
By altitude_definition on orthocenter(A, B, C), A, line_intersection(f, Line(C, G)), Line(C, G) we get Line(C, G) == altitude(orthocenter(A, B, C), A, line_intersection(f, Line(C, G)))
By altitude_definition on orthocenter(B, C, G), G, C, f we get f == altitude(orthocenter(B, C, G), C, G)
By altitude_definition on center(d), midpoint(C, F), C, median(E, C, F) we get median(E, C, F) == altitude(center(d), C, midpoint(C, F))
By radical_axis_definition_v0 on orthocenter(A, B, G), d, Circle(A, C, F) we get power_of_a_point(orthocenter(A, B, G), d) == power_of_a_point(orthocenter(A, B, G), Circle(A, C, F))
By altitude_definition on A, midpoint(C, F), center(d), i we get i == altitude(A, center(d), midpoint(C, F))
By altitude_definition on midpoint(C, F), F, G, g we get g == altitude(midpoint(C, F), F, G)
By altitude_definition on G, midpoint(C, F), F, j we get j == altitude(G, F, midpoint(C, F))
By altitude_definition on orthocenter(A, B, C), D, A, j we get j == altitude(orthocenter(A, B, C), A, D)
By altitude_definition on B, C, E, altitude(B, A, C) we get altitude(B, A, C) == altitude(B, C, E)
By collinear_definition on line_intersection(f, Line(C, G)), C, G we get C in Line(G, line_intersection(f, Line(C, G))), G in Line(C, line_intersection(f, Line(C, G))), Line(C, line_intersection(f, Line(C, G))) == Line(G, line_intersection(f, Line(C, G))), 0 == 2 * angle(C, line_intersection(f, Line(C, G)), G) mod 360
By altitude_definition on orthocenter(A, B, C), B, A, Line(C, G) we get Line(C, G) == altitude(orthocenter(A, B, C), A, B)
By altitude_definition on E, F, midpoint(C, F), median(E, C, F) we get median(E, C, F) == altitude(E, F, midpoint(C, F))
By altitude_definition on A, midpoint(C, F), E, i we get i == altitude(A, E, midpoint(C, F))
By altitude_definition on orthocenter(A, C, G), G, F, g we get g == altitude(orthocenter(A, C, G), F, G)
By radical_axis_definition_v0 on orthocenter(A, C, G), Circle(A, C, F), d we get power_of_a_point(orthocenter(A, C, G), d) == power_of_a_point(orthocenter(A, C, G), Circle(A, C, F))
By altitude_definition on orthocenter(B, C, G), F, C, j we get j == altitude(orthocenter(B, C, G), C, F)
By altitude_definition on center(d), A, D, median(E, C, F) we get median(E, C, F) == altitude(center(d), A, D)
By altitude_definition on G, E, C, Line(B, G) we get Line(B, G) == altitude(G, C, E)
By altitude_definition on D, midpoint(C, F), center(d), i we get i == altitude(D, center(d), midpoint(C, F))
By perpendicular_angle_conditions_v0 on A, line_intersection(f, Line(C, G)), C we get angle(A, line_intersection(f, Line(C, G)), C) == orientation(A, line_intersection(f, Line(C, G)), C) mod 360
By altitude_definition on orthocenter(A, B, C), C, midpoint(C, F), j we get j == altitude(orthocenter(A, B, C), C, midpoint(C, F))
By altitude_definition on G, midpoint(C, F), C, j we get j == altitude(G, C, midpoint(C, F))
By altitude_definition on orthocenter(A, C, G), A, C, altitude(G, A, C) we get altitude(G, A, C) == altitude(orthocenter(A, C, G), A, C)
By altitude_definition on midpoint(C, F), G, A, g we get g == altitude(midpoint(C, F), A, G)
By altitude_definition on D, E, center(d), i we get i == altitude(D, E, center(d))
By perpendicular_angle_conditions_v0 on A, line_intersection(f, Line(C, G)), G we get angle(A, line_intersection(f, Line(C, G)), G) == orientation(A, line_intersection(f, Line(C, G)), G) mod 360
By perpendicular_angle_conditions_v0 on G, line_intersection(f, Line(C, G)), B we get angle(G, line_intersection(f, Line(C, G)), B) == orientation(B, G, line_intersection(f, Line(C, G))) mod 360
By altitude_definition on A, center(d), E, i we get i == altitude(A, E, center(d))
By collinear_definition on midpoint(C, F), E, center(d) we get E in Line(center(d), midpoint(C, F)), center(d) in Line(E, midpoint(C, F)), Line(E, midpoint(C, F)) == Line(center(d), midpoint(C, F)), 0 == 2 * angle(E, midpoint(C, F), center(d)) mod 360
By collinear_definition on line_intersection(f, Line(C, G)), G, C we get G in Line(C, line_intersection(f, Line(C, G))), C in Line(G, line_intersection(f, Line(C, G))), Line(C, line_intersection(f, Line(C, G))) == Line(G, line_intersection(f, Line(C, G))), 0 == 2 * angle(G, line_intersection(f, Line(C, G)), C) mod 360
By altitude_definition on D, midpoint(C, F), E, i we get i == altitude(D, E, midpoint(C, F))
By altitude_definition on orthocenter(A, C, G), C, G, f we get f == altitude(orthocenter(A, C, G), C, G)
By altitude_definition on C, line_intersection(f, Line(C, G)), B, Line(C, G) we get Line(C, G) == altitude(C, B, line_intersection(f, Line(C, G)))
By perpendicular_angle_conditions_v0 on B, line_intersection(f, Line(C, G)), G we get angle(B, line_intersection(f, Line(C, G)), G) == orientation(B, line_intersection(f, Line(C, G)), G) mod 360
By altitude_definition on orthocenter(A, B, G), G, F, g we get g == altitude(orthocenter(A, B, G), F, G)
By perpendicular_angle_conditions_v0 on G, line_intersection(f, Line(C, G)), A we get angle(G, line_intersection(f, Line(C, G)), A) == orientation(A, G, line_intersection(f, Line(C, G))) mod 360
By collinear_definition on midpoint(C, F), center(d), E we get center(d) in Line(E, midpoint(C, F)), E in Line(center(d), midpoint(C, F)), Line(E, midpoint(C, F)) == Line(center(d), midpoint(C, F)), 0 == 2 * angle(center(d), midpoint(C, F), E) mod 360
By altitude_definition on F, E, midpoint(C, F), g we get g == altitude(F, E, midpoint(C, F))
By right_triangle_circumcenter_v1 on C, line_intersection(f, Line(C, G)), A we get midpoint(A, C) == circumcenter(A, C, line_intersection(f, Line(C, G)))
By power_of_a_point_definition on line_intersection(f, Line(C, G)), G, C, c we get log(power_of_a_point(line_intersection(f, Line(C, G)), c)) == log(distance(G, line_intersection(f, Line(C, G)))) + log(distance(C, line_intersection(f, Line(C, G))))
By line_definition on line_intersection(Line(A, C), Line(B, G)), B, Line(B, G) we get Line(B, G) == Line(B, line_intersection(Line(A, C), Line(B, G)))
By line_definition on line_intersection(Line(A, C), Line(B, G)), A, Line(A, C) we get Line(A, C) == Line(A, line_intersection(Line(A, C), Line(B, G)))
By line_definition on line_intersection(Line(A, C), Line(B, G)), G, Line(B, G) we get Line(B, G) == Line(G, line_intersection(Line(A, C), Line(B, G)))
By line_definition on line_intersection(Line(A, C), Line(B, G)), E, Line(A, C) we get Line(A, C) == Line(E, line_intersection(Line(A, C), Line(B, G)))
By line_definition on line_intersection(i, median(E, C, F)), midpoint(C, F), median(E, C, F) we get median(E, C, F) == Line(midpoint(C, F), line_intersection(i, median(E, C, F)))
By line_definition on line_intersection(i, median(E, C, F)), A, i we get i == Line(A, line_intersection(i, median(E, C, F)))
By line_definition on line_intersection(i, median(E, C, F)), E, median(E, C, F) we get median(E, C, F) == Line(E, line_intersection(i, median(E, C, F)))
By line_definition on center(d), line_intersection(i, median(E, C, F)), median(E, C, F) we get median(E, C, F) == Line(center(d), line_intersection(i, median(E, C, F)))
By line_definition on line_intersection(i, median(E, C, F)), D, i we get i == Line(D, line_intersection(i, median(E, C, F)))
By line_definition on line_intersection(Line(A, C), Line(B, G)), C, Line(A, C) we get Line(A, C) == Line(C, line_intersection(Line(A, C), Line(B, G)))
By line_definition on E, midpoint(A, F), perpendicular_bisector(A, F) we get perpendicular_bisector(A, F) == Line(E, midpoint(A, F))
By median_definition on E, G, D, perpendicular_bisector(A, C) we get median(E, D, G) == perpendicular_bisector(A, C)
By median_definition on line_intersection(Line(A, C), Line(B, G)), D, B, Line(A, C) we get Line(A, C) == median(line_intersection(Line(A, C), Line(B, G)), B, D)
By perpendicular_line_definition on E, perpendicular_bisector(A, F), j we get perpendicular_line(E, j) == perpendicular_bisector(A, F)
By median_definition on line_intersection(i, median(E, C, F)), C, A, median(E, C, F) we get median(E, C, F) == median(line_intersection(i, median(E, C, F)), A, C)
By median_definition on line_intersection(i, median(E, C, F)), C, F, median(E, C, F) we get median(E, C, F) == median(line_intersection(i, median(E, C, F)), C, F)
By perpendicular_line_definition on line_intersection(Line(A, C), Line(B, G)), Line(A, C), perpendicular_bisector(A, C) we get Line(A, C) == perpendicular_line(line_intersection(Line(A, C), Line(B, G)), perpendicular_bisector(A, C))
By median_definition on line_intersection(i, median(E, C, F)), B, D, median(E, C, F) we get median(E, C, F) == median(line_intersection(i, median(E, C, F)), B, D)
By median_definition on midpoint(A, F), C, A, perpendicular_bisector(A, F) we get perpendicular_bisector(A, F) == median(midpoint(A, F), A, C)
By line_intersection_definition on E, perpendicular_bisector(A, C), perpendicular_bisector(A, F) we get E == line_intersection(perpendicular_bisector(A, C), perpendicular_bisector(A, F))
By perpendicular_line_definition on line_intersection(i, median(E, C, F)), median(E, C, F), i we get median(E, C, F) == perpendicular_line(line_intersection(i, median(E, C, F)), i)
By perpendicular_line_definition on line_intersection(i, median(E, C, F)), i, j we get i == perpendicular_line(line_intersection(i, median(E, C, F)), j)
By perpendicular_line_definition on line_intersection(i, median(E, C, F)), i, median(E, C, F) we get i == perpendicular_line(line_intersection(i, median(E, C, F)), median(E, C, F))
By radical_axis_of_intersecting_circles_v0 on A, C, c, Circle(A, C, projection(C, f)) we get Line(A, C) == radical_axis(c, Circle(A, C, projection(C, f)))
By perpendicular_line_definition on line_intersection(Line(A, C), Line(B, G)), Line(B, G), Line(A, C) we get Line(B, G) == perpendicular_line(line_intersection(Line(A, C), Line(B, G)), Line(A, C))
By median_definition on E, A, F, perpendicular_bisector(A, F) we get median(E, A, F) == perpendicular_bisector(A, F)
By line_intersection_definition on E, perpendicular_bisector(A, F), Line(A, C) we get E == line_intersection(Line(A, C), perpendicular_bisector(A, F))
By median_definition on C, G, D, Line(C, center(c)) we get median(C, D, G) == Line(C, center(c))
By median_definition on H, G, D, Line(H, center(c)) we get median(H, D, G) == Line(H, center(c))
By perpendicular_line_definition on F, j, perpendicular_bisector(A, F) we get j == perpendicular_line(F, perpendicular_bisector(A, F))
By line_intersection_definition on E, Line(E, F), perpendicular_bisector(A, F) we get E == line_intersection(Line(E, F), perpendicular_bisector(A, F))
By perpendicular_line_definition on G, j, perpendicular_bisector(A, F) we get j == perpendicular_line(G, perpendicular_bisector(A, F))
By line_intersection_definition on E, Line(B, D), perpendicular_bisector(A, F) we get E == line_intersection(Line(B, D), perpendicular_bisector(A, F))
By line_intersection_definition on E, perpendicular_bisector(A, F), median(E, C, F) we get E == line_intersection(median(E, C, F), perpendicular_bisector(A, F))
By median_definition on midpoint(A, F), B, D, perpendicular_bisector(A, F) we get perpendicular_bisector(A, F) == median(midpoint(A, F), B, D)
By perpendicular_line_definition on line_intersection(Line(A, C), Line(B, G)), Line(A, C), Line(B, G) we get Line(A, C) == perpendicular_line(line_intersection(Line(A, C), Line(B, G)), Line(B, G))
By median_definition on A, G, D, Line(A, center(c)) we get median(A, D, G) == Line(A, center(c))
By perpendicular_line_definition on A, j, perpendicular_bisector(A, F) we get j == perpendicular_line(A, perpendicular_bisector(A, F))
By perpendicular_line_definition on line_intersection(i, median(E, C, F)), median(E, C, F), g we get median(E, C, F) == perpendicular_line(line_intersection(i, median(E, C, F)), g)
By projection_definition on B, H, Line(G, H) we get H == projection(B, Line(G, H))
By projection_definition on B, midpoint(C, F), median(E, C, F) we get midpoint(C, F) == projection(B, median(E, C, F))
By between_imply_not_between on A, midpoint(A, F), F we get collinear_and_not_between(F, A, midpoint(A, F))
By between_imply_not_between on D, center(c), G we get collinear_and_not_between(G, D, center(c))
By between_imply_not_between on G, center(c), D we get collinear_and_not_between(D, G, center(c))
By between_imply_not_between on F, midpoint(A, F), A we get collinear_and_not_between(A, F, midpoint(A, F))
By parallel_line_definition on line_intersection(i, median(E, C, F)), i, g we get i == parallel_line(line_intersection(i, median(E, C, F)), g)
By parallel_line_definition on B, Line(B, G), perpendicular_bisector(A, C) we get Line(B, G) == parallel_line(B, perpendicular_bisector(A, C))
By parallel_line_definition on line_intersection(Line(A, C), Line(B, G)), Line(B, G), perpendicular_bisector(A, C) we get Line(B, G) == parallel_line(line_intersection(Line(A, C), Line(B, G)), perpendicular_bisector(A, C))
By parallel_line_definition on E, perpendicular_bisector(A, C), Line(B, G) we get perpendicular_bisector(A, C) == parallel_line(E, Line(B, G))
By parallel_line_definition on line_intersection(i, median(E, C, F)), median(E, C, F), j we get median(E, C, F) == parallel_line(line_intersection(i, median(E, C, F)), j)
By circle_radius_v0_r on projection(C, f), Circle(A, C, projection(C, f)) we get radius(Circle(A, C, projection(C, f))) == distance(projection(C, f), center(Circle(A, C, projection(C, f))))
By circle_radius_v0_r on A, Circle(A, C, projection(C, f)) we get radius(Circle(A, C, projection(C, f))) == distance(A, center(Circle(A, C, projection(C, f))))
By parallel_line_definition on G, Line(B, G), perpendicular_bisector(A, C) we get Line(B, G) == parallel_line(G, perpendicular_bisector(A, C))
By parallel_line_definition on center(c), perpendicular_bisector(A, C), Line(B, G) we get perpendicular_bisector(A, C) == parallel_line(center(c), Line(B, G))
By circle_radius_v0_r on C, Circle(A, C, projection(C, f)) we get radius(Circle(A, C, projection(C, f))) == distance(C, center(Circle(A, C, projection(C, f))))
By same_angle_v0 on B, C, F, H we get angle(C, B, H) == angle(F, B, H) mod 360
By angle_to_center on A, C, projection(C, f), Circle(A, C, projection(C, f)) we get 2 * angle(A, C, projection(C, f)) == angle(A, center(Circle(A, C, projection(C, f))), projection(C, f)) mod 360
By same_angle_v3 on H, B, E, C we get angle(B, H, C) == angle(E, H, C) + 180 mod 360
By angle_to_center on projection(C, f), C, A, Circle(A, C, projection(C, f)) we get 2 * angle(projection(C, f), C, A) == angle(projection(C, f), center(Circle(A, C, projection(C, f))), A) mod 360
By angle_to_center on projection(C, f), A, C, Circle(A, C, projection(C, f)) we get 2 * angle(projection(C, f), A, C) == angle(projection(C, f), center(Circle(A, C, projection(C, f))), C) mod 360
By perpendicular_direction_conditions_v0_r on G, H, H, B we get 180 == 2 * direction(G, H) - 2 * direction(H, B) mod 360
By angle_to_center on C, A, projection(C, f), Circle(A, C, projection(C, f)) we get 2 * angle(C, A, projection(C, f)) == angle(C, center(Circle(A, C, projection(C, f))), projection(C, f)) mod 360
By same_angle_v3 on H, B, D, F we get angle(B, H, F) == angle(D, H, F) + 180 mod 360
By perpendicular_direction_conditions_v0_r on F, G, midpoint(C, F), B we get 180 == 2 * direction(F, G) - 2 * direction(midpoint(C, F), B) mod 360
By same_angle_v3 on H, D, B, A we get angle(D, H, A) == angle(B, H, A) + 180 mod 360
By same_angle_v1 on B, D, H, F we get angle(D, B, F) == angle(H, B, F) mod 360
By same_angle_v1 on B, H, E, C we get angle(E, B, C) == angle(H, B, C) mod 360
By same_angle_v1 on B, H, D, C we get angle(D, B, C) == angle(H, B, C) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(C, F), E, center(d) we get 180 == 2 * direction(B, midpoint(C, F)) - 2 * direction(E, center(d)) mod 360
By same_angle_v3 on H, E, B, A we get angle(E, H, A) == angle(B, H, A) + 180 mod 360
By same_angle_v3 on H, B, E, G we get angle(B, H, G) == angle(E, H, G) + 180 mod 360
By same_angle_v0 on B, H, E, A we get angle(E, B, A) == angle(H, B, A) mod 360
By same_angle_v1 on B, H, D, G we get angle(D, B, G) == angle(H, B, G) mod 360
By perpendicular_direction_conditions_v0_r on G, F, midpoint(C, F), B we get 180 == 2 * direction(G, F) - 2 * direction(midpoint(C, F), B) mod 360
By same_angle_v1 on B, E, H, F we get angle(E, B, F) == angle(H, B, F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), B, midpoint(C, F), E we get 180 == 2 * direction(midpoint(C, F), B) - 2 * direction(midpoint(C, F), E) mod 360
By perpendicular_direction_conditions_v0_r on E, center(d), midpoint(C, F), B we get 180 == 2 * direction(E, center(d)) - 2 * direction(midpoint(C, F), B) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(C, F), B, midpoint(C, F) we get 180 == 2 * direction(E, midpoint(C, F)) - 2 * direction(B, midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on center(d), E, midpoint(C, F), B we get 180 == 2 * direction(center(d), E) - 2 * direction(midpoint(C, F), B) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(C, F), A, G we get 180 == 2 * direction(B, midpoint(C, F)) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), B, center(d), E we get 180 == 2 * direction(midpoint(C, F), B) - 2 * direction(center(d), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), B, F, A we get 180 == 2 * direction(midpoint(C, F), B) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(C, F), midpoint(C, F), E we get 180 == 2 * direction(B, midpoint(C, F)) - 2 * direction(midpoint(C, F), E) mod 360
By same_angle_v3 on H, B, D, G we get angle(B, H, G) == angle(D, H, G) + 180 mod 360
By perpendicular_direction_conditions_v0_r on center(d), E, B, midpoint(C, F) we get 180 == 2 * direction(center(d), E) - 2 * direction(B, midpoint(C, F)) mod 360
By same_angle_v1 on B, E, H, G we get angle(E, B, G) == angle(H, B, G) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(C, F), G, A we get 180 == 2 * direction(B, midpoint(C, F)) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on H, G, B, H we get 180 == 2 * direction(H, G) - 2 * direction(B, H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), B, A, F we get 180 == 2 * direction(midpoint(C, F), B) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), B, E, midpoint(C, F) we get 180 == 2 * direction(midpoint(C, F), B) - 2 * direction(E, midpoint(C, F)) mod 360
By same_angle_v0 on B, D, H, A we get angle(D, B, A) == angle(H, B, A) mod 360
By orthocenter_concurrency on E, B, C we get orthocenter(B, C, E) in altitude(E, B, C), orthocenter(B, C, E) in altitude(B, C, E), orthocenter(B, C, E) in altitude(C, B, E)
By same_angle_v2 on H, B, D, C we get angle(B, H, C) == angle(D, H, C) + 180 mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), B, G, F we get 180 == 2 * direction(midpoint(C, F), B) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(C, F), E, midpoint(C, F) we get 180 == 2 * direction(B, midpoint(C, F)) - 2 * direction(E, midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on G, H, B, H we get 180 == 2 * direction(G, H) - 2 * direction(B, H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), B, midpoint(C, F), center(d) we get 180 == 2 * direction(midpoint(C, F), B) - 2 * direction(midpoint(C, F), center(d)) mod 360
By perpendicular_direction_conditions_v0_r on B, H, H, G we get 180 == 2 * direction(B, H) - 2 * direction(H, G) mod 360
By orthocenter_concurrency on G, E, B we get orthocenter(B, E, G) in altitude(G, B, E), orthocenter(B, E, G) in altitude(E, B, G), orthocenter(B, E, G) in altitude(B, E, G)
By perpendicular_direction_conditions_v0_r on midpoint(C, F), E, B, midpoint(C, F) we get 180 == 2 * direction(midpoint(C, F), E) - 2 * direction(B, midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on F, A, B, midpoint(C, F) we get 180 == 2 * direction(F, A) - 2 * direction(B, midpoint(C, F)) mod 360
By similar_triangle_basic_properties on F, center(d), E, F, E, A we get angle(F, E, A) == angle(F, center(d), E) mod 360, angle(E, A, F) == angle(center(d), E, F) mod 360, angle(A, F, E) == angle(E, F, center(d)) mod 360, log(distance(E, F)) + log(distance(E, center(d))) == log(distance(F, center(d))) + log(distance(A, E)), log(distance(A, E)) + log(distance(E, F)) == log(distance(E, center(d))) + log(distance(A, F)), log(distance(E, F)) + log(distance(E, F)) == log(distance(A, F)) + log(distance(F, center(d)))
By same_angle_v3 on H, B, E, F we get angle(B, H, F) == angle(E, H, F) + 180 mod 360
By perpendicular_direction_conditions_v0_r on G, F, B, midpoint(C, F) we get 180 == 2 * direction(G, F) - 2 * direction(B, midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(C, F), F, G we get 180 == 2 * direction(B, midpoint(C, F)) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on B, H, G, H we get 180 == 2 * direction(B, H) - 2 * direction(G, H) mod 360
By perpendicular_direction_conditions_v0_r on H, B, H, G we get 180 == 2 * direction(H, B) - 2 * direction(H, G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), B, E, center(d) we get 180 == 2 * direction(midpoint(C, F), B) - 2 * direction(E, center(d)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), center(d), B, midpoint(C, F) we get 180 == 2 * direction(midpoint(C, F), center(d)) - 2 * direction(B, midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on A, G, midpoint(C, F), B we get 180 == 2 * direction(A, G) - 2 * direction(midpoint(C, F), B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), E, midpoint(C, F), B we get 180 == 2 * direction(midpoint(C, F), E) - 2 * direction(midpoint(C, F), B) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(C, F), center(d), midpoint(C, F) we get 180 == 2 * direction(B, midpoint(C, F)) - 2 * direction(center(d), midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on H, B, G, H we get 180 == 2 * direction(H, B) - 2 * direction(G, H) mod 360
By perpendicular_direction_conditions_v0_r on G, A, midpoint(C, F), B we get 180 == 2 * direction(G, A) - 2 * direction(midpoint(C, F), B) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(C, F), midpoint(C, F), center(d) we get 180 == 2 * direction(B, midpoint(C, F)) - 2 * direction(midpoint(C, F), center(d)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), B, F, G we get 180 == 2 * direction(midpoint(C, F), B) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(C, F), F, A we get 180 == 2 * direction(B, midpoint(C, F)) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on A, F, midpoint(C, F), B we get 180 == 2 * direction(A, F) - 2 * direction(midpoint(C, F), B) mod 360
By probably_between_and_collinear_implies_between on B, H, D we get between(B, H, D)
By perpendicular_direction_conditions_v0_r on midpoint(C, F), center(d), midpoint(C, F), B we get 180 == 2 * direction(midpoint(C, F), center(d)) - 2 * direction(midpoint(C, F), B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), B, A, G we get 180 == 2 * direction(midpoint(C, F), B) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(C, F), center(d), E we get 180 == 2 * direction(B, midpoint(C, F)) - 2 * direction(center(d), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), B, G, A we get 180 == 2 * direction(midpoint(C, F), B) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on G, A, B, midpoint(C, F) we get 180 == 2 * direction(G, A) - 2 * direction(B, midpoint(C, F)) mod 360
By in_imply_collinear on line_intersection(i, median(E, C, F)), center(d), midpoint(C, F) we get collinear(center(d), midpoint(C, F), line_intersection(i, median(E, C, F)))
By perpendicular_direction_conditions_v0_r on center(d), midpoint(C, F), midpoint(C, F), B we get 180 == 2 * direction(center(d), midpoint(C, F)) - 2 * direction(midpoint(C, F), B) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(C, F), G, F we get 180 == 2 * direction(B, midpoint(C, F)) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on E, center(d), B, midpoint(C, F) we get 180 == 2 * direction(E, center(d)) - 2 * direction(B, midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), B, center(d), midpoint(C, F) we get 180 == 2 * direction(midpoint(C, F), B) - 2 * direction(center(d), midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on center(d), midpoint(C, F), B, midpoint(C, F) we get 180 == 2 * direction(center(d), midpoint(C, F)) - 2 * direction(B, midpoint(C, F)) mod 360
By anti_similar_triangle_basic_properties on F, A, E, C, D, center(c) we get angle(F, A, E) == 0 - angle(C, D, center(c)) mod 360, angle(A, E, F) == 0 - angle(D, center(c), C) mod 360, angle(E, F, A) == 0 - angle(center(c), C, D) mod 360, log(distance(C, D)) + log(distance(A, E)) == log(distance(A, F)) + log(distance(D, center(c))), log(distance(A, E)) + log(distance(C, center(c))) == log(distance(D, center(c))) + log(distance(E, F)), log(distance(E, F)) + log(distance(C, D)) == log(distance(C, center(c))) + log(distance(A, F))
By perpendicular_direction_conditions_v0_r on B, midpoint(C, F), A, F we get 180 == 2 * direction(B, midpoint(C, F)) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on F, G, B, midpoint(C, F) we get 180 == 2 * direction(F, G) - 2 * direction(B, midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on F, A, midpoint(C, F), B we get 180 == 2 * direction(F, A) - 2 * direction(midpoint(C, F), B) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(C, F), midpoint(C, F), B we get 180 == 2 * direction(E, midpoint(C, F)) - 2 * direction(midpoint(C, F), B) mod 360
By perpendicular_direction_conditions_v0_r on H, G, H, B we get 180 == 2 * direction(H, G) - 2 * direction(H, B) mod 360
By perpendicular_direction_conditions_v0_r on A, F, B, midpoint(C, F) we get 180 == 2 * direction(A, F) - 2 * direction(B, midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on A, G, B, midpoint(C, F) we get 180 == 2 * direction(A, G) - 2 * direction(B, midpoint(C, F)) mod 360
By similar_triangle_basic_properties on D, C, center(c), F, A, E we get angle(F, A, E) == angle(D, C, center(c)) mod 360, angle(A, E, F) == angle(C, center(c), D) mod 360, angle(E, F, A) == angle(center(c), D, C) mod 360, log(distance(C, D)) + log(distance(A, E)) == log(distance(A, F)) + log(distance(C, center(c))), log(distance(A, E)) + log(distance(D, center(c))) == log(distance(C, center(c))) + log(distance(E, F)), log(distance(E, F)) + log(distance(C, D)) == log(distance(D, center(c))) + log(distance(A, F))
By probably_between_and_collinear_implies_between on E, H, B we get between(B, H, E)
By reverse_direction on A, projection(C, f) we get 180 == direction(A, projection(C, f)) - direction(projection(C, f), A) mod 360
By in_imply_collinear on line_intersection(i, median(E, C, F)), E, midpoint(C, F) we get collinear(E, midpoint(C, F), line_intersection(i, median(E, C, F)))
By in_imply_collinear on line_intersection(Line(A, C), Line(B, G)), A, E we get collinear(A, E, line_intersection(Line(A, C), Line(B, G)))
By anti_similar_triangle_basic_properties on C, E, center(d), D, C, center(c) we get angle(C, E, center(d)) == 0 - angle(D, C, center(c)) mod 360, angle(E, center(d), C) == 0 - angle(C, center(c), D) mod 360, angle(center(d), C, E) == 0 - angle(center(c), D, C) mod 360, log(distance(C, D)) + log(distance(E, center(d))) == log(distance(C, E)) + log(distance(C, center(c))), log(distance(C, center(c))) + log(distance(C, center(d))) == log(distance(E, center(d))) + log(distance(D, center(c))), log(distance(C, center(d))) + log(distance(C, D)) == log(distance(D, center(c))) + log(distance(C, E))
By in_imply_collinear on line_intersection(Line(A, C), Line(B, G)), A, C we get collinear(A, C, line_intersection(Line(A, C), Line(B, G)))
By point_on_perpendicular_bisector on C, F, line_intersection(i, median(E, C, F)), median(E, C, F) we get distance(C, line_intersection(i, median(E, C, F))) == distance(F, line_intersection(i, median(E, C, F)))
By in_imply_collinear on line_intersection(Line(A, C), Line(B, G)), C, E we get collinear(C, E, line_intersection(Line(A, C), Line(B, G)))
By log_of_2_times_distance on G, D, center(c), D we get log(distance(D, G)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(D, center(c)))
By in_imply_collinear on line_intersection(Line(A, C), Line(B, G)), G, B we get collinear(B, G, line_intersection(Line(A, C), Line(B, G)))
By in_imply_collinear on line_intersection(i, median(E, C, F)), E, center(d) we get collinear(E, center(d), line_intersection(i, median(E, C, F)))
By anti_similar_triangle_basic_properties on H, E, center(d), A, H, center(c) we get angle(H, E, center(d)) == 0 - angle(A, H, center(c)) mod 360, angle(E, center(d), H) == 0 - angle(H, center(c), A) mod 360, angle(center(d), H, E) == 0 - angle(center(c), A, H) mod 360, log(distance(A, H)) + log(distance(E, center(d))) == log(distance(E, H)) + log(distance(H, center(c))), log(distance(E, center(d))) + log(distance(A, center(c))) == log(distance(H, center(c))) + log(distance(H, center(d))), log(distance(A, center(c))) + log(distance(E, H)) == log(distance(H, center(d))) + log(distance(A, H))
By similar_triangle_basic_properties on E, F, center(d), C, D, center(c) we get angle(C, D, center(c)) == angle(E, F, center(d)) mod 360, angle(D, center(c), C) == angle(F, center(d), E) mod 360, angle(center(c), C, D) == angle(center(d), E, F) mod 360, log(distance(C, D)) + log(distance(F, center(d))) == log(distance(E, F)) + log(distance(D, center(c))), log(distance(D, center(c))) + log(distance(E, center(d))) == log(distance(F, center(d))) + log(distance(C, center(c))), log(distance(C, center(c))) + log(distance(E, F)) == log(distance(E, center(d))) + log(distance(C, D))
By in_imply_collinear on line_intersection(i, median(E, C, F)), D, A we get collinear(A, D, line_intersection(i, median(E, C, F)))
By aa_anti_similarity on C, midpoint(C, F), E, F, midpoint(C, F), E we get anti_similar_triangles(C, E, midpoint(C, F), F, E, midpoint(C, F))
By anti_similar_triangle_basic_properties on H, center(d), E, A, center(c), H we get angle(H, center(d), E) == 0 - angle(A, center(c), H) mod 360, angle(center(d), E, H) == 0 - angle(center(c), H, A) mod 360, angle(E, H, center(d)) == 0 - angle(H, A, center(c)) mod 360, log(distance(A, center(c))) + log(distance(E, center(d))) == log(distance(H, center(d))) + log(distance(H, center(c))), log(distance(E, center(d))) + log(distance(A, H)) == log(distance(H, center(c))) + log(distance(E, H)), log(distance(A, H)) + log(distance(H, center(d))) == log(distance(E, H)) + log(distance(A, center(c)))
By log_of_2_times_distance on D, G, center(c), H we get log(distance(D, G)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(H, center(c)))
By similar_triangle_basic_properties on H, center(c), A, H, center(d), E we get angle(H, center(c), A) == angle(H, center(d), E) mod 360, angle(center(c), A, H) == angle(center(d), E, H) mod 360, angle(A, H, center(c)) == angle(E, H, center(d)) mod 360, log(distance(H, center(c))) + log(distance(E, center(d))) == log(distance(H, center(d))) + log(distance(A, center(c))), log(distance(A, center(c))) + log(distance(E, H)) == log(distance(E, center(d))) + log(distance(A, H)), log(distance(A, H)) + log(distance(H, center(d))) == log(distance(E, H)) + log(distance(H, center(c)))
By anti_similar_triangle_basic_properties on F, A, E, E, F, center(d) we get angle(F, A, E) == 0 - angle(E, F, center(d)) mod 360, angle(A, E, F) == 0 - angle(F, center(d), E) mod 360, angle(E, F, A) == 0 - angle(center(d), E, F) mod 360, log(distance(E, F)) + log(distance(A, E)) == log(distance(A, F)) + log(distance(F, center(d))), log(distance(A, E)) + log(distance(E, center(d))) == log(distance(F, center(d))) + log(distance(E, F)), log(distance(E, F)) + log(distance(E, F)) == log(distance(E, center(d))) + log(distance(A, F))
By anti_similar_triangle_basic_properties on C, F, E, G, C, center(c) we get angle(C, F, E) == 0 - angle(G, C, center(c)) mod 360, angle(F, E, C) == 0 - angle(C, center(c), G) mod 360, angle(E, C, F) == 0 - angle(center(c), G, C) mod 360, log(distance(C, G)) + log(distance(E, F)) == log(distance(C, F)) + log(distance(C, center(c))), log(distance(C, center(c))) + log(distance(C, E)) == log(distance(E, F)) + log(distance(G, center(c))), log(distance(C, E)) + log(distance(C, G)) == log(distance(G, center(c))) + log(distance(C, F))
By anti_similar_triangle_basic_properties on center(c), D, C, center(d), E, F we get angle(center(c), D, C) == 0 - angle(center(d), E, F) mod 360, angle(D, C, center(c)) == 0 - angle(E, F, center(d)) mod 360, angle(C, center(c), D) == 0 - angle(F, center(d), E) mod 360, log(distance(D, center(c))) + log(distance(E, F)) == log(distance(E, center(d))) + log(distance(C, D)), log(distance(C, D)) + log(distance(F, center(d))) == log(distance(E, F)) + log(distance(C, center(c))), log(distance(C, center(c))) + log(distance(E, center(d))) == log(distance(F, center(d))) + log(distance(D, center(c)))
By log_of_2_times_distance on G, D, center(c), A we get log(distance(D, G)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(A, center(c)))
By anti_similar_triangle_basic_properties on center(d), F, E, center(c), C, D we get angle(center(d), F, E) == 0 - angle(center(c), C, D) mod 360, angle(F, E, center(d)) == 0 - angle(C, D, center(c)) mod 360, angle(E, center(d), F) == 0 - angle(D, center(c), C) mod 360, log(distance(C, center(c))) + log(distance(E, F)) == log(distance(F, center(d))) + log(distance(C, D)), log(distance(C, D)) + log(distance(E, center(d))) == log(distance(E, F)) + log(distance(D, center(c))), log(distance(D, center(c))) + log(distance(F, center(d))) == log(distance(E, center(d))) + log(distance(C, center(c)))
By reverse_direction on G, projection(C, f) we get 180 == direction(G, projection(C, f)) - direction(projection(C, f), G) mod 360
By anti_similar_triangle_basic_properties on F, A, E, C, E, center(d) we get angle(F, A, E) == 0 - angle(C, E, center(d)) mod 360, angle(A, E, F) == 0 - angle(E, center(d), C) mod 360, angle(E, F, A) == 0 - angle(center(d), C, E) mod 360, log(distance(C, E)) + log(distance(A, E)) == log(distance(A, F)) + log(distance(E, center(d))), log(distance(A, E)) + log(distance(C, center(d))) == log(distance(E, center(d))) + log(distance(E, F)), log(distance(E, F)) + log(distance(C, E)) == log(distance(C, center(d))) + log(distance(A, F))
By similar_triangle_basic_properties on A, E, F, C, center(d), E we get angle(A, E, F) == angle(C, center(d), E) mod 360, angle(E, F, A) == angle(center(d), E, C) mod 360, angle(F, A, E) == angle(E, C, center(d)) mod 360, log(distance(A, E)) + log(distance(E, center(d))) == log(distance(C, center(d))) + log(distance(E, F)), log(distance(E, F)) + log(distance(C, E)) == log(distance(E, center(d))) + log(distance(A, F)), log(distance(C, E)) + log(distance(A, E)) == log(distance(A, F)) + log(distance(C, center(d)))
By aa_anti_similarity on A, center(c), E, C, center(c), E we get anti_similar_triangles(A, E, center(c), C, E, center(c))
By aa_anti_similarity on C, center(d), midpoint(C, F), F, center(d), midpoint(C, F) we get anti_similar_triangles(C, center(d), midpoint(C, F), F, center(d), midpoint(C, F))
By log_of_2_times_distance on D, G, C, center(c) we get log(distance(D, G)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(C, center(c)))
By reverse_direction on projection(C, f), C we get 180 == direction(projection(C, f), C) - direction(C, projection(C, f)) mod 360
By log_of_2_times_distance on G, D, G, center(c) we get log(distance(D, G)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(G, center(c)))
By aa_anti_similarity on C, E, midpoint(C, F), F, E, midpoint(C, F) we get anti_similar_triangles(C, E, midpoint(C, F), F, E, midpoint(C, F))
By reverse_direction on midpoint(C, F), E we get 180 == direction(midpoint(C, F), E) - direction(E, midpoint(C, F)) mod 360
By anti_similar_triangle_basic_properties on center(c), C, D, center(d), E, C we get angle(center(c), C, D) == 0 - angle(center(d), E, C) mod 360, angle(C, D, center(c)) == 0 - angle(E, C, center(d)) mod 360, angle(D, center(c), C) == 0 - angle(C, center(d), E) mod 360, log(distance(C, center(c))) + log(distance(C, E)) == log(distance(E, center(d))) + log(distance(C, D)), log(distance(C, D)) + log(distance(C, center(d))) == log(distance(C, E)) + log(distance(D, center(c))), log(distance(C, center(d))) + log(distance(C, center(c))) == log(distance(D, center(c))) + log(distance(E, center(d)))
By aa_anti_similarity on A, E, center(c), C, E, center(c) we get anti_similar_triangles(A, E, center(c), C, E, center(c))
By similar_triangle_basic_properties on D, C, center(c), E, C, center(d) we get angle(D, C, center(c)) == angle(E, C, center(d)) mod 360, angle(C, center(c), D) == angle(C, center(d), E) mod 360, angle(center(c), D, C) == angle(center(d), E, C) mod 360, log(distance(C, D)) + log(distance(C, center(d))) == log(distance(C, E)) + log(distance(C, center(c))), log(distance(C, center(c))) + log(distance(E, center(d))) == log(distance(C, center(d))) + log(distance(D, center(c))), log(distance(D, center(c))) + log(distance(C, E)) == log(distance(E, center(d))) + log(distance(C, D))
By double_perpendicular_and_parallel_v0_r on j, perpendicular_bisector(A, F), median(E, C, F) we get perpendicular(median(E, C, F), perpendicular_bisector(A, F))
By similar_triangle_basic_properties on F, C, E, G, C, center(c) we get angle(F, C, E) == angle(G, C, center(c)) mod 360, angle(C, E, F) == angle(C, center(c), G) mod 360, angle(E, F, C) == angle(center(c), G, C) mod 360, log(distance(C, G)) + log(distance(C, E)) == log(distance(C, F)) + log(distance(C, center(c))), log(distance(C, E)) + log(distance(G, center(c))) == log(distance(C, center(c))) + log(distance(E, F)), log(distance(E, F)) + log(distance(C, G)) == log(distance(G, center(c))) + log(distance(C, F))
By aa_anti_similarity on F, center(d), midpoint(C, F), C, center(d), midpoint(C, F) we get anti_similar_triangles(C, center(d), midpoint(C, F), F, center(d), midpoint(C, F))
By similar_triangle_basic_properties on A, center(c), H, E, center(d), H we get angle(A, center(c), H) == angle(E, center(d), H) mod 360, angle(center(c), H, A) == angle(center(d), H, E) mod 360, angle(H, A, center(c)) == angle(H, E, center(d)) mod 360, log(distance(A, center(c))) + log(distance(H, center(d))) == log(distance(E, center(d))) + log(distance(H, center(c))), log(distance(H, center(c))) + log(distance(E, H)) == log(distance(H, center(d))) + log(distance(A, H)), log(distance(A, H)) + log(distance(E, center(d))) == log(distance(E, H)) + log(distance(A, center(c)))
By reverse_direction on E, midpoint(C, F) we get 180 == direction(E, midpoint(C, F)) - direction(midpoint(C, F), E) mod 360
By reverse_direction on B, projection(C, f) we get 180 == direction(B, projection(C, f)) - direction(projection(C, f), B) mod 360
By aa_anti_similarity on F, midpoint(C, F), center(d), C, midpoint(C, F), center(d) we get anti_similar_triangles(C, center(d), midpoint(C, F), F, center(d), midpoint(C, F))
By similar_triangle_basic_properties on center(d), F, E, center(c), D, C we get angle(center(c), D, C) == angle(center(d), F, E) mod 360, angle(D, C, center(c)) == angle(F, E, center(d)) mod 360, angle(C, center(c), D) == angle(E, center(d), F) mod 360, log(distance(D, center(c))) + log(distance(E, F)) == log(distance(F, center(d))) + log(distance(C, D)), log(distance(C, D)) + log(distance(E, center(d))) == log(distance(E, F)) + log(distance(C, center(c))), log(distance(C, center(c))) + log(distance(F, center(d))) == log(distance(E, center(d))) + log(distance(D, center(c)))
By reverse_direction on midpoint(C, F), center(d) we get 180 == direction(midpoint(C, F), center(d)) - direction(center(d), midpoint(C, F)) mod 360
By aa_anti_similarity on C, E, center(c), A, E, center(c) we get anti_similar_triangles(A, E, center(c), C, E, center(c))
By reverse_direction on projection(C, f), A we get 180 == direction(projection(C, f), A) - direction(A, projection(C, f)) mod 360
By double_perpendicular_and_parallel_v0 on g, j, perpendicular_bisector(A, F) we get parallel(g, perpendicular_bisector(A, F))
By aa_anti_similarity on C, center(c), E, A, center(c), E we get anti_similar_triangles(A, E, center(c), C, E, center(c))
By similar_triangle_basic_properties on center(d), C, E, center(c), C, D we get angle(center(c), C, D) == angle(center(d), C, E) mod 360, angle(C, D, center(c)) == angle(C, E, center(d)) mod 360, angle(D, center(c), C) == angle(E, center(d), C) mod 360, log(distance(C, center(c))) + log(distance(C, E)) == log(distance(C, center(d))) + log(distance(C, D)), log(distance(C, D)) + log(distance(E, center(d))) == log(distance(C, E)) + log(distance(D, center(c))), log(distance(D, center(c))) + log(distance(C, center(d))) == log(distance(E, center(d))) + log(distance(C, center(c)))
By double_perpendicular_and_parallel_v0 on perpendicular_bisector(A, F), j, i we get parallel(i, perpendicular_bisector(A, F))
By reverse_direction on center(d), midpoint(C, F) we get 180 == direction(center(d), midpoint(C, F)) - direction(midpoint(C, F), center(d)) mod 360
By reverse_direction on center(c), E we get 180 == direction(center(c), E) - direction(E, center(c)) mod 360
By reverse_direction on E, center(c) we get 180 == direction(E, center(c)) - direction(center(c), E) mod 360
By reverse_direction on projection(C, f), G we get 180 == direction(projection(C, f), G) - direction(G, projection(C, f)) mod 360
By aa_anti_similarity on F, E, midpoint(C, F), C, E, midpoint(C, F) we get anti_similar_triangles(C, E, midpoint(C, F), F, E, midpoint(C, F))
By aa_anti_similarity on F, midpoint(C, F), E, C, midpoint(C, F), E we get anti_similar_triangles(C, E, midpoint(C, F), F, E, midpoint(C, F))
By aa_anti_similarity on C, midpoint(C, F), center(d), F, midpoint(C, F), center(d) we get anti_similar_triangles(C, center(d), midpoint(C, F), F, center(d), midpoint(C, F))
By reverse_direction on projection(C, f), B we get 180 == direction(projection(C, f), B) - direction(B, projection(C, f)) mod 360
By reverse_direction on C, projection(C, f) we get 180 == direction(C, projection(C, f)) - direction(projection(C, f), C) mod 360
By internal_angle_bisector_definition_v0_r on E, H, B, D we get Line(D, H) == internal_angle_bisector(B, D, E)
By external_angle_bisector_definition_v0 on G, B, G, H we get 180 == angle(G, H, B) + angle(G, H, B) mod 360
By power_of_a_point_tangent_converse_v0 on E, B, H, A we get tangent(Line(A, E), Circle(A, B, H))
By perpendicular_angle_conditions_v0 on B, midpoint(C, F), center(d) we get angle(B, midpoint(C, F), center(d)) == orientation(B, midpoint(C, F), center(d)) mod 360
By power_of_a_point_definition on B, H, E, d we get log(power_of_a_point(B, d)) == log(distance(B, H)) + log(distance(B, E))
By power_of_a_point_tangent_converse_v1 on E, H, B, F we get tangent(Line(E, F), Circle(B, F, H))
By external_angle_bisector_definition_v0_r on midpoint(C, F), A, midpoint(C, F), F we get Line(A, F) == external_angle_bisector(midpoint(C, F), F, midpoint(C, F))
By external_angle_bisector_definition_v0_r on F, E, F, midpoint(C, F) we get Line(E, midpoint(C, F)) == external_angle_bisector(F, midpoint(C, F), F)
By external_angle_bisector_definition_v0_r on B, A, midpoint(C, F), F we get Line(A, F) == external_angle_bisector(B, F, midpoint(C, F))
By collinear_definition on midpoint(C, F), F, B we get F in Line(B, midpoint(C, F)), B in Line(F, midpoint(C, F)), Line(B, midpoint(C, F)) == Line(F, midpoint(C, F)), 0 == 2 * angle(F, midpoint(C, F), B) mod 360
By external_angle_bisector_definition_v0 on C, B, F, H we get 180 == angle(C, H, B) + angle(F, H, B) mod 360
By external_angle_bisector_definition_v0_r on C, center(d), C, midpoint(C, F) we get Line(center(d), midpoint(C, F)) == external_angle_bisector(C, midpoint(C, F), C)
By collinear_definition on B, F, midpoint(C, F) we get F in Line(B, midpoint(C, F)), midpoint(C, F) in Line(B, F), Line(B, F) == Line(B, midpoint(C, F)), 0 == 2 * angle(F, B, midpoint(C, F)) mod 360
By power_of_a_point_tangent_converse_v1 on E, B, H, C we get tangent(Line(C, E), Circle(B, C, H))
By external_angle_bisector_definition_v0_r on A, C, A, projection(C, f) we get Line(C, projection(C, f)) == external_angle_bisector(A, projection(C, f), A)
By external_angle_bisector_definition_v0_r on center(c), C, center(c), E we get Line(C, E) == external_angle_bisector(center(c), E, center(c))
By external_angle_bisector_definition_v0_r on E, F, E, midpoint(C, F) we get Line(F, midpoint(C, F)) == external_angle_bisector(E, midpoint(C, F), E)
By power_of_a_point_in_circle on C, Circle(A, C, projection(C, f)) we get 0 == power_of_a_point(C, Circle(A, C, projection(C, f)))
By external_angle_bisector_definition_v0_r on C, B, C, projection(C, f) we get Line(B, projection(C, f)) == external_angle_bisector(C, projection(C, f), C)
By external_angle_bisector_definition_v0_r on C, A, C, projection(C, f) we get Line(A, projection(C, f)) == external_angle_bisector(C, projection(C, f), C)
By external_angle_bisector_definition_v0_r on D, B, H, E we get Line(B, E) == external_angle_bisector(D, E, H)
By internal_angle_bisector_definition_v0_r on E, midpoint(C, F), E, center(d) we get Line(center(d), midpoint(C, F)) == internal_angle_bisector(E, center(d), E)
By right_triangle_circumcenter_v1 on D, H, G we get midpoint(D, G) == circumcenter(D, G, H)
By external_angle_bisector_definition_v0_r on C, center(c), C, E we get external_angle_bisector(C, E, C) == Line(E, center(c))
By collinear_definition on B, D, H we get D in Line(B, H), H in Line(B, D), Line(B, D) == Line(B, H), 0 == 2 * angle(D, B, H) mod 360
By external_angle_bisector_definition_v0_r on C, A, midpoint(C, F), F we get Line(A, F) == external_angle_bisector(C, F, midpoint(C, F))
By external_angle_bisector_definition_v0_r on G, A, G, projection(C, f) we get Line(A, projection(C, f)) == external_angle_bisector(G, projection(C, f), G)
By external_angle_bisector_definition_v0_r on center(d), E, G, F we get Line(E, F) == external_angle_bisector(G, F, center(d))
By external_angle_bisector_definition_v0_r on midpoint(C, F), G, midpoint(C, F), F we get Line(F, G) == external_angle_bisector(midpoint(C, F), F, midpoint(C, F))
By external_angle_bisector_definition_v0_r on midpoint(C, F), G, C, F we get Line(F, G) == external_angle_bisector(C, F, midpoint(C, F))
By external_angle_bisector_definition_v0_r on A, center(c), A, E we get external_angle_bisector(A, E, A) == Line(E, center(c))
By external_angle_bisector_definition_v0_r on F, midpoint(C, F), B, C we get external_angle_bisector(B, C, F) == Line(C, midpoint(C, F))
By collinear_definition on B, midpoint(C, F), F we get midpoint(C, F) in Line(B, F), F in Line(B, midpoint(C, F)), Line(B, F) == Line(B, midpoint(C, F)), 0 == 2 * angle(midpoint(C, F), B, F) mod 360
By log_of_2_times_distance on F, A, midpoint(A, F), A we get log(distance(A, F)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(A, midpoint(A, F)))
By external_angle_bisector_definition_v0_r on F, center(d), F, midpoint(C, F) we get Line(center(d), midpoint(C, F)) == external_angle_bisector(F, midpoint(C, F), F)
By perpendicular_angle_conditions_v0 on E, midpoint(C, F), B we get angle(E, midpoint(C, F), B) == orientation(B, E, midpoint(C, F)) mod 360
By external_angle_bisector_definition_v0_r on E, C, E, midpoint(C, F) we get Line(C, midpoint(C, F)) == external_angle_bisector(E, midpoint(C, F), E)
By internal_angle_bisector_definition_v0_r on projection(C, f), B, projection(C, f), A we get Line(A, B) == internal_angle_bisector(projection(C, f), A, projection(C, f))
By external_angle_bisector_definition_v0_r on C, E, C, midpoint(C, F) we get Line(E, midpoint(C, F)) == external_angle_bisector(C, midpoint(C, F), C)
By external_angle_bisector_definition_v0_r on B, G, midpoint(C, F), F we get Line(F, G) == external_angle_bisector(B, F, midpoint(C, F))
By internal_angle_bisector_definition_v0_r on A, projection(C, f), A, B we get internal_angle_bisector(A, B, A) == Line(B, projection(C, f))
By power_of_a_point_in_circle on A, Circle(A, C, projection(C, f)) we get 0 == power_of_a_point(A, Circle(A, C, projection(C, f)))
By log_of_2_times_distance on A, F, midpoint(A, F), F we get log(distance(A, F)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(F, midpoint(A, F)))
By power_of_a_point_in_circle on projection(C, f), Circle(A, C, projection(C, f)) we get 0 == power_of_a_point(projection(C, f), Circle(A, C, projection(C, f)))
By external_angle_bisector_definition_v0_r on center(d), C, center(d), midpoint(C, F) we get Line(C, midpoint(C, F)) == external_angle_bisector(center(d), midpoint(C, F), center(d))
By external_angle_bisector_definition_v0_r on center(d), F, center(d), midpoint(C, F) we get Line(F, midpoint(C, F)) == external_angle_bisector(center(d), midpoint(C, F), center(d))
By external_angle_bisector_definition_v0_r on B, G, B, projection(C, f) we get Line(G, projection(C, f)) == external_angle_bisector(B, projection(C, f), B)
By external_angle_bisector_definition_v0_r on B, C, B, projection(C, f) we get Line(C, projection(C, f)) == external_angle_bisector(B, projection(C, f), B)
By internal_angle_bisector_definition_v0_r on A, center(c), C, E we get internal_angle_bisector(A, E, C) == Line(E, center(c))
By external_angle_bisector_definition_v0_r on D, H, B, E we get Line(E, H) == external_angle_bisector(B, E, D)
By internal_angle_bisector_definition_v0_r on A, E, center(d), F we get Line(E, F) == internal_angle_bisector(A, F, center(d))
By external_angle_bisector_definition_v0_r on G, B, G, projection(C, f) we get Line(B, projection(C, f)) == external_angle_bisector(G, projection(C, f), G)
By internal_angle_bisector_definition_v0 on D, B, D, H we get angle(B, H, D) == angle(D, H, B) mod 360
By internal_angle_bisector_definition_v0_r on C, center(d), F, midpoint(C, F) we get Line(center(d), midpoint(C, F)) == internal_angle_bisector(C, midpoint(C, F), F)
By internal_angle_bisector_definition_v0 on D, H, D, B we get angle(D, B, H) == angle(H, B, D) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(C, F), E, midpoint(C, F), center(d) we get Line(E, center(d)) == internal_angle_bisector(midpoint(C, F), center(d), midpoint(C, F))
By right_triangle_circumcenter_v1 on D, C, G we get midpoint(D, G) == circumcenter(C, D, G)
By internal_angle_bisector_definition_v0_r on G, C, G, projection(C, f) we get Line(C, projection(C, f)) == internal_angle_bisector(G, projection(C, f), G)
By internal_angle_bisector_definition_v0 on F, B, F, midpoint(C, F) we get angle(B, midpoint(C, F), F) == angle(F, midpoint(C, F), B) mod 360
By internal_angle_bisector_definition_v0_r on center(d), E, center(d), midpoint(C, F) we get Line(E, midpoint(C, F)) == internal_angle_bisector(center(d), midpoint(C, F), center(d))
By external_angle_bisector_definition_v0_r on projection(C, f), D, projection(C, f), C we get Line(C, D) == external_angle_bisector(projection(C, f), C, projection(C, f))
By collinear_definition on F, A, midpoint(A, F) we get A in Line(F, midpoint(A, F)), midpoint(A, F) in Line(A, F), Line(A, F) == Line(F, midpoint(A, F)), 0 == 2 * angle(A, F, midpoint(A, F)) mod 360
By internal_angle_bisector_definition_v0_r on projection(C, f), C, projection(C, f), G we get Line(C, G) == internal_angle_bisector(projection(C, f), G, projection(C, f))
By internal_angle_bisector_definition_v0_r on projection(C, f), G, projection(C, f), C we get Line(C, G) == internal_angle_bisector(projection(C, f), C, projection(C, f))
By isosceles_triangle_midpoint on E, A, F we get midpoint(A, F) in median(E, A, F)
By external_angle_bisector_definition_v0_r on A, G, A, projection(C, f) we get Line(G, projection(C, f)) == external_angle_bisector(A, projection(C, f), A)
By internal_angle_bisector_definition_v0_r on C, E, F, midpoint(C, F) we get Line(E, midpoint(C, F)) == internal_angle_bisector(C, midpoint(C, F), F)
By perpendicular_angle_conditions_v0 on center(d), midpoint(C, F), B we get angle(center(d), midpoint(C, F), B) == orientation(B, center(d), midpoint(C, F)) mod 360
By internal_angle_bisector_definition_v0_r on B, projection(C, f), B, A we get internal_angle_bisector(B, A, B) == Line(A, projection(C, f))
By internal_angle_bisector_definition_v0_r on E, B, H, D we get Line(B, D) == internal_angle_bisector(E, D, H)
By external_angle_bisector_definition_v0_r on center(c), A, center(c), E we get Line(A, E) == external_angle_bisector(center(c), E, center(c))
By right_triangle_circumcenter_v1 on G, A, D we get midpoint(D, G) == circumcenter(A, D, G)
By collinear_definition on midpoint(C, F), C, B we get C in Line(B, midpoint(C, F)), B in Line(C, midpoint(C, F)), Line(B, midpoint(C, F)) == Line(C, midpoint(C, F)), 0 == 2 * angle(C, midpoint(C, F), B) mod 360
By collinear_definition on B, H, E we get H in Line(B, E), E in Line(B, H), Line(B, E) == Line(B, H), 0 == 2 * angle(H, B, E) mod 360
By internal_angle_bisector_definition_v0_r on C, B, midpoint(C, F), F we get Line(B, F) == internal_angle_bisector(C, F, midpoint(C, F))
By internal_angle_bisector_definition_v0_r on E, center(d), E, midpoint(C, F) we get Line(center(d), midpoint(C, F)) == internal_angle_bisector(E, midpoint(C, F), E)
By perpendicular_bisector_properties on A, F we get perpendicular(Line(A, F), perpendicular_bisector(A, F)), midpoint(A, F) == line_intersection(Line(A, F), perpendicular_bisector(A, F))
By perpendicular_angle_conditions_v0 on B, H, G we get angle(B, H, G) == orientation(B, H, G) mod 360
By internal_angle_bisector_definition_v0_r on G, projection(C, f), G, C we get internal_angle_bisector(G, C, G) == Line(C, projection(C, f))
By collinear_definition on B, E, H we get E in Line(B, H), H in Line(B, E), Line(B, E) == Line(B, H), 0 == 2 * angle(E, B, H) mod 360
By collinear_definition on A, midpoint(A, F), F we get midpoint(A, F) in Line(A, F), F in Line(A, midpoint(A, F)), Line(A, F) == Line(A, midpoint(A, F)), 0 == 2 * angle(midpoint(A, F), A, F) mod 360
By internal_angle_bisector_definition_v0 on C, B, C, midpoint(C, F) we get angle(B, midpoint(C, F), C) == angle(C, midpoint(C, F), B) mod 360
By collinear_definition on A, F, midpoint(A, F) we get F in Line(A, midpoint(A, F)), midpoint(A, F) in Line(A, F), Line(A, F) == Line(A, midpoint(A, F)), 0 == 2 * angle(F, A, midpoint(A, F)) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(C, F), center(d), midpoint(C, F), E we get Line(E, center(d)) == internal_angle_bisector(midpoint(C, F), E, midpoint(C, F))
By collinear_definition on F, midpoint(A, F), A we get midpoint(A, F) in Line(A, F), A in Line(F, midpoint(A, F)), Line(A, F) == Line(F, midpoint(A, F)), 0 == 2 * angle(midpoint(A, F), F, A) mod 360
By internal_angle_bisector_definition_v0_r on projection(C, f), A, projection(C, f), B we get Line(A, B) == internal_angle_bisector(projection(C, f), B, projection(C, f))
By collinear_definition on B, C, midpoint(C, F) we get C in Line(B, midpoint(C, F)), midpoint(C, F) in Line(B, C), Line(B, C) == Line(B, midpoint(C, F)), 0 == 2 * angle(C, B, midpoint(C, F)) mod 360
By internal_angle_bisector_definition_v0_r on B, A, B, projection(C, f) we get Line(A, projection(C, f)) == internal_angle_bisector(B, projection(C, f), B)
By internal_angle_bisector_definition_v0_r on C, projection(C, f), C, G we get internal_angle_bisector(C, G, C) == Line(G, projection(C, f))
By collinear_definition on H, D, B we get D in Line(B, H), B in Line(D, H), Line(B, H) == Line(D, H), 0 == 2 * angle(D, H, B) mod 360
By collinear_definition on B, midpoint(C, F), C we get midpoint(C, F) in Line(B, C), C in Line(B, midpoint(C, F)), Line(B, C) == Line(B, midpoint(C, F)), 0 == 2 * angle(midpoint(C, F), B, C) mod 360
By internal_angle_bisector_definition_v0 on E, B, E, H we get angle(B, H, E) == angle(E, H, B) mod 360
By internal_angle_bisector_definition_v0 on F, midpoint(C, F), F, B we get angle(F, B, midpoint(C, F)) == angle(midpoint(C, F), B, F) mod 360
By internal_angle_bisector_definition_v0_r on A, B, A, projection(C, f) we get Line(B, projection(C, f)) == internal_angle_bisector(A, projection(C, f), A)
By internal_angle_bisector_definition_v0_r on C, G, C, projection(C, f) we get Line(G, projection(C, f)) == internal_angle_bisector(C, projection(C, f), C)
By perpendicular_angle_conditions_v0 on B, midpoint(C, F), E we get angle(B, midpoint(C, F), E) == orientation(B, midpoint(C, F), E) mod 360
By internal_angle_bisector_definition_v0_r on C, midpoint(C, F), B, F we get internal_angle_bisector(B, F, C) == Line(F, midpoint(C, F))
By collinear_definition on midpoint(C, F), B, F we get B in Line(F, midpoint(C, F)), F in Line(B, midpoint(C, F)), Line(B, midpoint(C, F)) == Line(F, midpoint(C, F)), 0 == 2 * angle(B, midpoint(C, F), F) mod 360
By collinear_definition on H, B, D we get B in Line(D, H), D in Line(B, H), Line(B, H) == Line(D, H), 0 == 2 * angle(B, H, D) mod 360
By internal_angle_bisector_definition_v0_r on F, B, midpoint(C, F), C we get Line(B, C) == internal_angle_bisector(F, C, midpoint(C, F))
By perpendicular_angle_conditions_v0 on G, H, B we get angle(G, H, B) == orientation(B, G, H) mod 360
By collinear_definition on H, E, B we get E in Line(B, H), B in Line(E, H), Line(B, H) == Line(E, H), 0 == 2 * angle(E, H, B) mod 360
By collinear_definition on midpoint(C, F), B, C we get B in Line(C, midpoint(C, F)), C in Line(B, midpoint(C, F)), Line(B, midpoint(C, F)) == Line(C, midpoint(C, F)), 0 == 2 * angle(B, midpoint(C, F), C) mod 360
By collinear_definition on H, B, E we get B in Line(E, H), E in Line(B, H), Line(B, H) == Line(E, H), 0 == 2 * angle(B, H, E) mod 360
By collinear_definition on B, H, D we get H in Line(B, D), D in Line(B, H), Line(B, D) == Line(B, H), 0 == 2 * angle(H, B, D) mod 360
By internal_angle_bisector_definition_v0 on C, midpoint(C, F), C, B we get angle(C, B, midpoint(C, F)) == angle(midpoint(C, F), B, C) mod 360
By internal_angle_bisector_definition_v0_r on center(d), midpoint(C, F), center(d), E we get Line(E, midpoint(C, F)) == internal_angle_bisector(center(d), E, center(d))
By internal_angle_bisector_definition_v0 on E, H, E, B we get angle(E, B, H) == angle(H, B, E) mod 360
By perpendicular_lines_draw_intersection on perpendicular_bisector(A, F), j we get exists(line_intersection(j, perpendicular_bisector(A, F)))
By altitude_definition on line_intersection(i, median(E, C, F)), F, C, median(E, C, F) we get median(E, C, F) == altitude(line_intersection(i, median(E, C, F)), C, F)
By altitude_definition on G, B, midpoint(C, F), j we get j == altitude(G, B, midpoint(C, F))
By altitude_definition on G, B, H, Line(G, H) we get Line(G, H) == altitude(G, B, H)
By sas_anti_similarity on B, E, C, B, F, H we get anti_similar_triangles(B, C, E, B, H, F)
By altitude_definition on E, A, G, perpendicular_bisector(A, F) we get altitude(E, A, G) == perpendicular_bisector(A, F)
By power_of_a_point_definition on E, C, A, Circle(A, C, projection(C, f)) we get log(distance(C, E)) + log(distance(A, E)) == log(power_of_a_point(E, Circle(A, C, projection(C, f))))
By sas_similarity on F, E, H, B, C, H we get similar_triangles(B, C, H, F, E, H)
By sas_anti_similarity on A, E, D, H, F, B we get anti_similar_triangles(A, D, E, H, B, F)
By isosceles_triangle_altitude_v3 on E, F, A we get identical(perpendicular_bisector(A, F), internal_angle_bisector(A, E, F), perpendicular_line(E, Line(A, F)))
By sas_similarity on H, F, B, H, E, C we get similar_triangles(B, F, H, C, E, H)
By sas_anti_similarity on H, F, B, A, E, D we get anti_similar_triangles(A, D, E, H, B, F)
By altitude_definition on E, F, G, perpendicular_bisector(A, F) we get altitude(E, F, G) == perpendicular_bisector(A, F)
By altitude_definition on line_intersection(i, median(E, C, F)), F, B, median(E, C, F) we get median(E, C, F) == altitude(line_intersection(i, median(E, C, F)), B, F)
By altitude_definition on line_intersection(Line(A, C), Line(B, G)), E, center(c), Line(A, C) we get Line(A, C) == altitude(line_intersection(Line(A, C), Line(B, G)), E, center(c))
By collinear_definition on midpoint(A, F), A, F we get A in Line(F, midpoint(A, F)), F in Line(A, midpoint(A, F)), Line(A, midpoint(A, F)) == Line(F, midpoint(A, F)), 0 == 2 * angle(A, midpoint(A, F), F) mod 360
By collinear_definition on midpoint(A, F), F, A we get F in Line(A, midpoint(A, F)), A in Line(F, midpoint(A, F)), Line(A, midpoint(A, F)) == Line(F, midpoint(A, F)), 0 == 2 * angle(F, midpoint(A, F), A) mod 360
By altitude_definition on E, B, midpoint(C, F), median(E, C, F) we get median(E, C, F) == altitude(E, B, midpoint(C, F))
By radical_axis_definition_v0 on line_intersection(Line(A, C), Line(B, G)), Circle(A, C, F), c we get power_of_a_point(line_intersection(Line(A, C), Line(B, G)), c) == power_of_a_point(line_intersection(Line(A, C), Line(B, G)), Circle(A, C, F))
By altitude_definition on center(d), B, midpoint(C, F), median(E, C, F) we get median(E, C, F) == altitude(center(d), B, midpoint(C, F))
By altitude_definition on A, midpoint(C, F), B, j we get j == altitude(A, B, midpoint(C, F))
By altitude_definition on line_intersection(i, median(E, C, F)), midpoint(C, F), F, median(E, C, F) we get median(E, C, F) == altitude(line_intersection(i, median(E, C, F)), F, midpoint(C, F))
By altitude_definition on line_intersection(i, median(E, C, F)), A, G, i we get i == altitude(line_intersection(i, median(E, C, F)), A, G)
By altitude_definition on line_intersection(i, median(E, C, F)), B, midpoint(C, F), median(E, C, F) we get median(E, C, F) == altitude(line_intersection(i, median(E, C, F)), B, midpoint(C, F))
By altitude_definition on line_intersection(i, median(E, C, F)), B, C, median(E, C, F) we get median(E, C, F) == altitude(line_intersection(i, median(E, C, F)), B, C)
By sas_similarity on H, C, B, H, E, F we get similar_triangles(B, C, H, F, E, H)
By altitude_definition on line_intersection(i, median(E, C, F)), F, G, i we get i == altitude(line_intersection(i, median(E, C, F)), F, G)
By sas_anti_similarity on D, E, A, B, F, H we get anti_similar_triangles(A, D, E, H, B, F)
By sas_anti_similarity on B, C, H, B, E, F we get anti_similar_triangles(B, C, H, B, E, F)
By sas_anti_similarity on H, F, B, C, E, B we get anti_similar_triangles(B, C, E, B, H, F)
By sas_similarity on C, E, H, B, F, H we get similar_triangles(B, F, H, C, E, H)
By altitude_definition on line_intersection(i, median(E, C, F)), A, F, i we get i == altitude(line_intersection(i, median(E, C, F)), A, F)
By sas_similarity on H, E, F, H, C, B we get similar_triangles(B, C, H, F, E, H)
By altitude_definition on line_intersection(i, median(E, C, F)), C, midpoint(C, F), median(E, C, F) we get median(E, C, F) == altitude(line_intersection(i, median(E, C, F)), C, midpoint(C, F))
By sas_anti_similarity on F, E, B, H, C, B we get anti_similar_triangles(B, C, H, B, E, F)
By altitude_definition on E, A, F, perpendicular_bisector(A, F) we get altitude(E, A, F) == perpendicular_bisector(A, F)
By sas_similarity on H, E, C, H, F, B we get similar_triangles(B, F, H, C, E, H)
By isosceles_triangle_altitude_v3 on E, A, F we get identical(perpendicular_bisector(A, F), internal_angle_bisector(A, E, F), perpendicular_line(E, Line(A, F)))
By sas_anti_similarity on B, F, H, B, E, C we get anti_similar_triangles(B, C, E, B, H, F)
By sas_similarity on B, F, H, C, E, H we get similar_triangles(B, F, H, C, E, H)
By power_of_a_point_definition on G, C, projection(C, f), Circle(A, C, projection(C, f)) we get log(distance(C, G)) + log(distance(G, projection(C, f))) == log(power_of_a_point(G, Circle(A, C, projection(C, f))))
By sas_anti_similarity on H, C, B, F, E, B we get anti_similar_triangles(B, C, H, B, E, F)
By sas_anti_similarity on B, F, H, D, E, A we get anti_similar_triangles(A, D, E, H, B, F)
By sas_similarity on B, C, H, F, E, H we get similar_triangles(B, C, H, F, E, H)
By sas_anti_similarity on C, E, B, H, F, B we get anti_similar_triangles(B, C, E, B, H, F)
By sas_anti_similarity on B, E, F, B, C, H we get anti_similar_triangles(B, C, H, B, E, F)
By power_of_a_point_definition on B, projection(C, f), A, Circle(A, C, projection(C, f)) we get log(distance(B, projection(C, f))) + log(distance(A, B)) == log(power_of_a_point(B, Circle(A, C, projection(C, f))))
By power_of_a_point_definition on B, H, D, c we get log(power_of_a_point(B, c)) == log(distance(B, H)) + log(distance(B, D))
By between_implies_angles on F, midpoint(A, F), A we get 180 == angle(F, midpoint(A, F), A) mod 360, 0 == angle(midpoint(A, F), A, F) mod 360, 0 == angle(A, F, midpoint(A, F)) mod 360
By power_of_a_point_definition on midpoint(A, F), A, F, Circle(A, C, F) we get log(power_of_a_point(midpoint(A, F), Circle(A, C, F))) == log(distance(A, midpoint(A, F))) + log(distance(F, midpoint(A, F)))
By between_implies_angles on A, midpoint(A, F), F we get 180 == angle(A, midpoint(A, F), F) mod 360, 0 == angle(midpoint(A, F), F, A) mod 360, 0 == angle(F, A, midpoint(A, F)) mod 360
By tangent_definition_from_perpendicularity_v0_r on E, median(E, A, F), d we get tangent(median(E, A, F), d)
By concurrent_sufficient_conditions on Line(A, C), median(E, A, F), Line(E, F) we get concurrent(Line(A, C), Line(E, F), median(E, A, F))
By line_definition on orthocenter(B, C, E), G, Line(B, G) we get Line(B, G) == Line(G, orthocenter(B, C, E))
By concyclic_sufficient_conditions_v1 on F, H, B, G we get concyclic(B, F, G, H)
By concurrent_sufficient_conditions on Line(A, C), median(E, A, F), median(E, C, F) we get concurrent(Line(A, C), median(E, A, F), median(E, C, F))
By concurrent_sufficient_conditions on Line(A, C), median(E, D, G), median(E, A, F) we get concurrent(Line(A, C), median(E, A, F), median(E, D, G))
By line_definition on E, orthocenter(B, C, E), median(E, C, F) we get median(E, C, F) == Line(E, orthocenter(B, C, E))
By concurrent_sufficient_conditions on median(E, D, G), median(E, A, F), Line(B, D) we get concurrent(Line(B, D), median(E, A, F), median(E, D, G))
By concurrent_sufficient_conditions on Line(E, F), median(E, A, F), Line(B, D) we get concurrent(Line(B, D), Line(E, F), median(E, A, F))
By concurrent_sufficient_conditions on median(E, A, F), median(E, C, F), Line(B, D) we get concurrent(Line(B, D), median(E, A, F), median(E, C, F))
By concurrent_sufficient_conditions on median(E, C, F), median(E, A, F), Line(B, D) we get concurrent(Line(B, D), median(E, A, F), median(E, C, F))
By concurrent_sufficient_conditions on median(E, C, F), Line(E, F), median(E, A, F) we get concurrent(Line(E, F), median(E, A, F), median(E, C, F))
By concurrent_sufficient_conditions on median(E, A, F), median(E, C, F), median(E, D, G) we get concurrent(median(E, A, F), median(E, C, F), median(E, D, G))
By concurrent_sufficient_conditions on Line(A, C), median(E, A, F), median(E, D, G) we get concurrent(Line(A, C), median(E, A, F), median(E, D, G))
By line_definition on E, orthocenter(B, E, G), Line(A, C) we get Line(A, C) == Line(E, orthocenter(B, E, G))
By line_definition on orthocenter(B, C, E), line_intersection(i, median(E, C, F)), median(E, C, F) we get median(E, C, F) == Line(orthocenter(B, C, E), line_intersection(i, median(E, C, F)))
By line_definition on G, midpoint(A, F), j we get j == Line(G, midpoint(A, F))
By line_definition on orthocenter(B, C, E), line_intersection(Line(A, C), Line(B, G)), Line(B, G) we get Line(B, G) == Line(orthocenter(B, C, E), line_intersection(Line(A, C), Line(B, G)))
By concurrent_sufficient_conditions on median(E, A, F), Line(B, D), Line(A, C) we get concurrent(Line(A, C), Line(B, D), median(E, A, F))
By concurrent_sufficient_conditions on median(E, A, F), Line(E, F), median(E, C, F) we get concurrent(Line(E, F), median(E, A, F), median(E, C, F))
By concurrent_sufficient_conditions on Line(E, F), median(E, A, F), median(E, C, F) we get concurrent(Line(E, F), median(E, A, F), median(E, C, F))
By line_definition on orthocenter(B, E, G), B, altitude(B, E, G) we get altitude(B, E, G) == Line(B, orthocenter(B, E, G))
By concurrent_sufficient_conditions on Line(A, C), median(E, A, F), Line(B, D) we get concurrent(Line(A, C), Line(B, D), median(E, A, F))
By concurrent_sufficient_conditions on median(E, D, G), Line(E, F), median(E, A, F) we get concurrent(Line(E, F), median(E, A, F), median(E, D, G))
By concurrent_sufficient_conditions on median(E, A, F), median(E, C, F), Line(A, C) we get concurrent(Line(A, C), median(E, A, F), median(E, C, F))
By concurrent_sufficient_conditions on Line(E, F), Line(A, C), median(E, A, F) we get concurrent(Line(A, C), Line(E, F), median(E, A, F))
By line_definition on midpoint(C, F), orthocenter(B, C, E), median(E, C, F) we get median(E, C, F) == Line(midpoint(C, F), orthocenter(B, C, E))
By concurrent_sufficient_conditions on median(E, A, F), Line(A, C), Line(B, D) we get concurrent(Line(A, C), Line(B, D), median(E, A, F))
By concurrent_sufficient_conditions on median(E, A, F), Line(E, F), Line(B, D) we get concurrent(Line(B, D), Line(E, F), median(E, A, F))
By concurrent_sufficient_conditions on median(E, D, G), Line(B, D), median(E, A, F) we get concurrent(Line(B, D), median(E, A, F), median(E, D, G))
By line_definition on orthocenter(B, E, G), H, Line(G, H) we get Line(G, H) == Line(H, orthocenter(B, E, G))
By line_definition on line_intersection(Line(A, C), Line(B, G)), orthocenter(B, E, G), Line(A, C) we get Line(A, C) == Line(orthocenter(B, E, G), line_intersection(Line(A, C), Line(B, G)))
By concurrent_sufficient_conditions on median(E, A, F), median(E, D, G), Line(A, C) we get concurrent(Line(A, C), median(E, A, F), median(E, D, G))
By concurrent_sufficient_conditions on median(E, C, F), median(E, A, F), Line(E, F) we get concurrent(Line(E, F), median(E, A, F), median(E, C, F))
By concurrent_sufficient_conditions on median(E, D, G), median(E, C, F), median(E, A, F) we get concurrent(median(E, A, F), median(E, C, F), median(E, D, G))
By line_definition on orthocenter(B, E, G), C, Line(A, C) we get Line(A, C) == Line(C, orthocenter(B, E, G))
By concurrent_sufficient_conditions on median(E, A, F), Line(A, C), Line(E, F) we get concurrent(Line(A, C), Line(E, F), median(E, A, F))
By line_definition on A, orthocenter(B, E, G), Line(A, C) we get Line(A, C) == Line(A, orthocenter(B, E, G))
By concurrent_sufficient_conditions on median(E, A, F), median(E, D, G), Line(B, D) we get concurrent(Line(B, D), median(E, A, F), median(E, D, G))
By concurrent_sufficient_conditions on Line(B, D), Line(E, F), median(E, A, F) we get concurrent(Line(B, D), Line(E, F), median(E, A, F))
By concurrent_sufficient_conditions on Line(E, F), median(E, A, F), median(E, D, G) we get concurrent(Line(E, F), median(E, A, F), median(E, D, G))
By concurrent_sufficient_conditions on Line(B, D), median(E, C, F), median(E, A, F) we get concurrent(Line(B, D), median(E, A, F), median(E, C, F))
By concurrent_sufficient_conditions on median(E, A, F), median(E, D, G), median(E, C, F) we get concurrent(median(E, A, F), median(E, C, F), median(E, D, G))
By concurrent_sufficient_conditions on Line(B, D), median(E, A, F), median(E, C, F) we get concurrent(Line(B, D), median(E, A, F), median(E, C, F))
By concurrent_sufficient_conditions on Line(A, C), median(E, C, F), median(E, A, F) we get concurrent(Line(A, C), median(E, A, F), median(E, C, F))
By concurrent_sufficient_conditions on Line(E, F), median(E, D, G), median(E, A, F) we get concurrent(Line(E, F), median(E, A, F), median(E, D, G))
By line_definition on orthocenter(B, C, E), center(d), median(E, C, F) we get median(E, C, F) == Line(center(d), orthocenter(B, C, E))
By concurrent_sufficient_conditions on median(E, A, F), Line(E, F), median(E, D, G) we get concurrent(Line(E, F), median(E, A, F), median(E, D, G))
By line_definition on orthocenter(B, C, E), C, altitude(C, B, E) we get altitude(C, B, E) == Line(C, orthocenter(B, C, E))
By concurrent_sufficient_conditions on median(E, A, F), Line(E, F), Line(A, C) we get concurrent(Line(A, C), Line(E, F), median(E, A, F))
By concurrent_sufficient_conditions on Line(B, D), median(E, A, F), Line(A, C) we get concurrent(Line(A, C), Line(B, D), median(E, A, F))
By line_definition on orthocenter(B, C, E), B, Line(B, G) we get Line(B, G) == Line(B, orthocenter(B, C, E))
By concurrent_sufficient_conditions on median(E, C, F), median(E, A, F), median(E, D, G) we get concurrent(median(E, A, F), median(E, C, F), median(E, D, G))
By concurrent_sufficient_conditions on Line(E, F), median(E, A, F), Line(A, C) we get concurrent(Line(A, C), Line(E, F), median(E, A, F))
By concurrent_sufficient_conditions on median(E, D, G), Line(A, C), median(E, A, F) we get concurrent(Line(A, C), median(E, A, F), median(E, D, G))
By concurrent_sufficient_conditions on Line(B, D), median(E, A, F), median(E, D, G) we get concurrent(Line(B, D), median(E, A, F), median(E, D, G))
By concurrent_sufficient_conditions on median(E, A, F), median(E, D, G), Line(E, F) we get concurrent(Line(E, F), median(E, A, F), median(E, D, G))
By line_definition on G, orthocenter(B, E, G), Line(G, H) we get Line(G, H) == Line(G, orthocenter(B, E, G))
By concurrent_sufficient_conditions on Line(B, D), median(E, A, F), Line(E, F) we get concurrent(Line(B, D), Line(E, F), median(E, A, F))
By concurrent_sufficient_conditions on Line(A, C), Line(E, F), median(E, A, F) we get concurrent(Line(A, C), Line(E, F), median(E, A, F))
By concurrent_sufficient_conditions on median(E, D, G), median(E, A, F), median(E, C, F) we get concurrent(median(E, A, F), median(E, C, F), median(E, D, G))
By concurrent_sufficient_conditions on median(E, C, F), median(E, A, F), Line(A, C) we get concurrent(Line(A, C), median(E, A, F), median(E, C, F))
By concurrent_sufficient_conditions on median(E, A, F), Line(B, D), Line(E, F) we get concurrent(Line(B, D), Line(E, F), median(E, A, F))
By concurrent_sufficient_conditions on median(E, D, G), median(E, A, F), Line(A, C) we get concurrent(Line(A, C), median(E, A, F), median(E, D, G))
By concurrent_sufficient_conditions on Line(B, D), Line(A, C), median(E, A, F) we get concurrent(Line(A, C), Line(B, D), median(E, A, F))
By concurrent_sufficient_conditions on median(E, A, F), Line(B, D), median(E, C, F) we get concurrent(Line(B, D), median(E, A, F), median(E, C, F))
By concurrent_sufficient_conditions on median(E, C, F), Line(A, C), median(E, A, F) we get concurrent(Line(A, C), median(E, A, F), median(E, C, F))
By concurrent_sufficient_conditions on median(E, C, F), Line(B, D), median(E, A, F) we get concurrent(Line(B, D), median(E, A, F), median(E, C, F))
By concurrent_sufficient_conditions on Line(E, F), median(E, C, F), median(E, A, F) we get concurrent(Line(E, F), median(E, A, F), median(E, C, F))
By concurrent_sufficient_conditions on median(E, C, F), median(E, D, G), median(E, A, F) we get concurrent(median(E, A, F), median(E, C, F), median(E, D, G))
By concurrent_sufficient_conditions on median(E, A, F), Line(A, C), median(E, C, F) we get concurrent(Line(A, C), median(E, A, F), median(E, C, F))
By concurrent_sufficient_conditions on median(E, D, G), median(E, A, F), Line(E, F) we get concurrent(Line(E, F), median(E, A, F), median(E, D, G))
By concurrent_sufficient_conditions on median(E, A, F), Line(A, C), median(E, D, G) we get concurrent(Line(A, C), median(E, A, F), median(E, D, G))
By concurrent_sufficient_conditions on median(E, A, F), Line(B, D), median(E, D, G) we get concurrent(Line(B, D), median(E, A, F), median(E, D, G))
By concurrent_sufficient_conditions on Line(E, F), Line(B, D), median(E, A, F) we get concurrent(Line(B, D), Line(E, F), median(E, A, F))
By concurrent_sufficient_conditions on median(E, A, F), median(E, C, F), Line(E, F) we get concurrent(Line(E, F), median(E, A, F), median(E, C, F))
By concurrent_sufficient_conditions on Line(A, C), Line(B, D), median(E, A, F) we get concurrent(Line(A, C), Line(B, D), median(E, A, F))
By concurrent_sufficient_conditions on Line(B, D), median(E, D, G), median(E, A, F) we get concurrent(Line(B, D), median(E, A, F), median(E, D, G))
By radical_axis_of_intersecting_circles_v0 on H, F, Circle(B, F, H), d we get Line(F, H) == radical_axis(d, Circle(B, F, H))
By radical_axis_of_intersecting_circles_v0 on C, H, d, Circle(B, C, H) we get Line(C, H) == radical_axis(d, Circle(B, C, H))
By line_intersection_definition on G, Line(E, G), Line(C, G) we get G == line_intersection(Line(C, G), Line(E, G))
By median_definition on orthocenter(B, C, E), A, C, median(E, C, F) we get median(E, C, F) == median(orthocenter(B, C, E), A, C)
By radical_axis_of_intersecting_circles_v0 on H, A, Circle(A, B, H), c we get Line(A, H) == radical_axis(c, Circle(A, B, H))
By median_definition on orthocenter(B, C, E), F, C, median(E, C, F) we get median(E, C, F) == median(orthocenter(B, C, E), C, F)
By line_intersection_definition on E, Line(E, G), Line(A, C) we get E == line_intersection(Line(A, C), Line(E, G))
By perpendicular_line_definition on E, median(E, A, F), median(E, C, F) we get median(E, A, F) == perpendicular_line(E, median(E, C, F))
By line_intersection_definition on G, Line(B, G), Line(E, G) we get G == line_intersection(Line(B, G), Line(E, G))
By perpendicular_line_definition on B, Line(B, D), altitude(C, B, E) we get Line(B, D) == perpendicular_line(B, altitude(C, B, E))
By projection_definition on E, midpoint(A, F), j we get midpoint(A, F) == projection(E, j)
By perpendicular_line_definition on orthocenter(B, E, G), Line(A, C), median(E, D, G) we get Line(A, C) == perpendicular_line(orthocenter(B, E, G), median(E, D, G))
By line_intersection_definition on E, median(E, C, F), Line(E, projection(C, f)) we get E == line_intersection(median(E, C, F), Line(E, projection(C, f)))
By line_intersection_definition on C, altitude(C, B, E), g we get C == line_intersection(g, altitude(C, B, E))
By perpendicular_line_definition on orthocenter(B, C, E), median(E, C, F), i we get median(E, C, F) == perpendicular_line(orthocenter(B, C, E), i)
By line_intersection_definition on E, median(E, D, G), Line(E, G) we get E == line_intersection(Line(E, G), median(E, D, G))
By line_intersection_definition on C, altitude(C, B, E), Line(C, G) we get C == line_intersection(Line(C, G), altitude(C, B, E))
By perpendicular_line_definition on G, Line(E, G), altitude(B, E, G) we get Line(E, G) == perpendicular_line(G, altitude(B, E, G))
By line_intersection_definition on E, Line(E, G), Line(E, projection(C, f)) we get E == line_intersection(Line(E, G), Line(E, projection(C, f)))
By perpendicular_line_definition on D, Line(B, D), altitude(C, B, E) we get Line(B, D) == perpendicular_line(D, altitude(C, B, E))
By line_intersection_definition on G, j, Line(E, G) we get G == line_intersection(j, Line(E, G))
By radical_axis_of_intersecting_circles_v0 on B, H, Circle(A, B, H), Circle(B, C, H) we get Line(B, H) == radical_axis(Circle(A, B, H), Circle(B, C, H))
By radical_axis_of_intersecting_circles_v0 on H, B, Circle(B, F, H), Circle(B, C, H) we get Line(B, H) == radical_axis(Circle(B, C, H), Circle(B, F, H))
By line_intersection_definition on B, Line(B, G), altitude(B, E, G) we get B == line_intersection(Line(B, G), altitude(B, E, G))
By line_intersection_definition on E, Line(E, G), median(E, A, F) we get E == line_intersection(Line(E, G), median(E, A, F))
By perpendicular_line_definition on orthocenter(B, E, G), Line(G, H), Line(B, D) we get Line(G, H) == perpendicular_line(orthocenter(B, E, G), Line(B, D))
By line_intersection_definition on B, g, altitude(B, E, G) we get B == line_intersection(g, altitude(B, E, G))
By perpendicular_line_definition on midpoint(A, F), j, i we get j == perpendicular_line(midpoint(A, F), i)
By median_definition on G, A, C, Line(E, G) we get Line(E, G) == median(G, A, C)
By line_intersection_definition on E, Line(E, projection(C, f)), median(E, A, F) we get E == line_intersection(median(E, A, F), Line(E, projection(C, f)))
By radical_axis_of_intersecting_circles_v0 on H, B, Circle(B, F, H), Circle(A, B, H) we get Line(B, H) == radical_axis(Circle(A, B, H), Circle(B, F, H))
By line_intersection_definition on E, Line(A, C), Line(E, projection(C, f)) we get E == line_intersection(Line(A, C), Line(E, projection(C, f)))
By perpendicular_line_definition on orthocenter(B, E, G), altitude(B, E, G), Line(E, G) we get altitude(B, E, G) == perpendicular_line(orthocenter(B, E, G), Line(E, G))
By perpendicular_line_definition on E, Line(E, G), altitude(B, E, G) we get Line(E, G) == perpendicular_line(E, altitude(B, E, G))
By median_definition on projection(C, f), B, D, Line(E, projection(C, f)) we get Line(E, projection(C, f)) == median(projection(C, f), B, D)
By line_intersection_definition on orthocenter(B, C, E), altitude(C, B, E), median(E, C, F) we get orthocenter(B, C, E) == line_intersection(median(E, C, F), altitude(C, B, E))
By line_intersection_definition on B, altitude(B, E, G), f we get B == line_intersection(f, altitude(B, E, G))
By line_intersection_definition on E, Line(E, projection(C, f)), median(E, D, G) we get E == line_intersection(median(E, D, G), Line(E, projection(C, f)))
By perpendicular_line_definition on H, Line(B, D), altitude(C, B, E) we get Line(B, D) == perpendicular_line(H, altitude(C, B, E))
By radical_axis_of_intersecting_circles_v0 on C, H, Circle(B, C, H), c we get Line(C, H) == radical_axis(c, Circle(B, C, H))
By line_intersection_definition on E, Line(E, projection(C, f)), Line(E, F) we get E == line_intersection(Line(E, F), Line(E, projection(C, f)))
By line_intersection_definition on C, Line(A, C), altitude(C, B, E) we get C == line_intersection(Line(A, C), altitude(C, B, E))
By perpendicular_line_definition on orthocenter(B, C, E), median(E, C, F), median(E, A, F) we get median(E, C, F) == perpendicular_line(orthocenter(B, C, E), median(E, A, F))
By line_intersection_definition on orthocenter(B, E, G), Line(A, C), Line(G, H) we get orthocenter(B, E, G) == line_intersection(Line(A, C), Line(G, H))
By line_intersection_definition on orthocenter(B, E, G), altitude(B, E, G), Line(A, C) we get orthocenter(B, E, G) == line_intersection(Line(A, C), altitude(B, E, G))
By perpendicular_line_definition on orthocenter(B, E, G), Line(A, C), Line(B, G) we get Line(A, C) == perpendicular_line(orthocenter(B, E, G), Line(B, G))
By perpendicular_line_definition on midpoint(A, F), j, g we get j == perpendicular_line(midpoint(A, F), g)
By line_intersection_definition on E, Line(E, projection(C, f)), Line(B, D) we get E == line_intersection(Line(B, D), Line(E, projection(C, f)))
By line_intersection_definition on C, median(C, D, G), altitude(C, B, E) we get C == line_intersection(median(C, D, G), altitude(C, B, E))
By line_intersection_definition on E, Line(E, G), Line(E, F) we get E == line_intersection(Line(E, F), Line(E, G))
By line_intersection_definition on C, Line(C, center(d)), altitude(C, B, E) we get C == line_intersection(altitude(C, B, E), Line(C, center(d)))
By line_intersection_definition on projection(C, f), Line(E, projection(C, f)), f we get projection(C, f) == line_intersection(f, Line(E, projection(C, f)))
By line_intersection_definition on G, Line(E, G), Line(G, H) we get G == line_intersection(Line(E, G), Line(G, H))
By line_intersection_definition on B, altitude(B, E, G), Line(B, D) we get B == line_intersection(Line(B, D), altitude(B, E, G))
By line_intersection_definition on C, altitude(C, B, E), Line(C, H) we get C == line_intersection(Line(C, H), altitude(C, B, E))
By perpendicular_line_definition on center(d), median(E, C, F), median(E, A, F) we get median(E, C, F) == perpendicular_line(center(d), median(E, A, F))
By line_intersection_definition on projection(C, f), Line(E, projection(C, f)), Line(C, G) we get projection(C, f) == line_intersection(Line(C, G), Line(E, projection(C, f)))
By median_definition on orthocenter(B, E, G), B, D, Line(A, C) we get Line(A, C) == median(orthocenter(B, E, G), B, D)
By line_intersection_definition on C, altitude(C, B, E), h we get C == line_intersection(h, altitude(C, B, E))
By line_intersection_definition on orthocenter(B, C, E), altitude(C, B, E), Line(B, G) we get orthocenter(B, C, E) == line_intersection(Line(B, G), altitude(C, B, E))
By line_intersection_definition on G, Line(E, G), Line(D, G) we get G == line_intersection(Line(D, G), Line(E, G))
By perpendicular_line_definition on midpoint(A, F), median(E, A, F), median(E, C, F) we get median(E, A, F) == perpendicular_line(midpoint(A, F), median(E, C, F))
By line_intersection_definition on orthocenter(B, C, E), Line(B, G), median(E, C, F) we get orthocenter(B, C, E) == line_intersection(Line(B, G), median(E, C, F))
By line_intersection_definition on orthocenter(B, E, G), Line(G, H), altitude(B, E, G) we get orthocenter(B, E, G) == line_intersection(Line(G, H), altitude(B, E, G))
By line_intersection_definition on E, median(E, C, F), Line(E, G) we get E == line_intersection(Line(E, G), median(E, C, F))
By median_definition on G, B, D, Line(E, G) we get Line(E, G) == median(G, B, D)
By median_definition on orthocenter(B, C, E), B, D, median(E, C, F) we get median(E, C, F) == median(orthocenter(B, C, E), B, D)
By perpendicular_line_definition on E, Line(B, D), altitude(C, B, E) we get Line(B, D) == perpendicular_line(E, altitude(C, B, E))
By perpendicular_line_definition on orthocenter(B, C, E), median(E, C, F), g we get median(E, C, F) == perpendicular_line(orthocenter(B, C, E), g)
By perpendicular_line_definition on midpoint(A, F), j, median(E, A, F) we get j == perpendicular_line(midpoint(A, F), median(E, A, F))
By line_intersection_definition on E, Line(B, D), Line(E, G) we get E == line_intersection(Line(B, D), Line(E, G))
By perpendicular_line_definition on E, median(E, C, F), median(E, A, F) we get median(E, C, F) == perpendicular_line(E, median(E, A, F))
By perpendicular_line_definition on midpoint(C, F), median(E, C, F), median(E, A, F) we get median(E, C, F) == perpendicular_line(midpoint(C, F), median(E, A, F))
By median_definition on projection(C, f), A, C, Line(E, projection(C, f)) we get Line(E, projection(C, f)) == median(projection(C, f), A, C)
By perpendicular_line_definition on line_intersection(i, median(E, C, F)), median(E, C, F), median(E, A, F) we get median(E, C, F) == perpendicular_line(line_intersection(i, median(E, C, F)), median(E, A, F))
By perpendicular_line_definition on orthocenter(B, C, E), altitude(C, B, E), Line(B, D) we get altitude(C, B, E) == perpendicular_line(orthocenter(B, C, E), Line(B, D))
By perpendicular_line_definition on orthocenter(B, C, E), Line(B, G), Line(A, C) we get Line(B, G) == perpendicular_line(orthocenter(B, C, E), Line(A, C))
By circle_radius_v0 on F, Circle(A, C, projection(C, f)) we get F in Circle(A, C, projection(C, f))
By circle_radius_v0 on projection(C, f), Circle(A, C, F) we get projection(C, f) in Circle(A, C, F)
By same_angle_converse_v0 on A, midpoint(A, F), G, F we get collinear(A, G, midpoint(A, F))
By same_angle_converse_v1 on F, midpoint(A, F), G, A we get collinear(F, G, midpoint(A, F))
By perpendicular_direction_conditions_v0_r on C, midpoint(C, F), midpoint(A, F), F we get 180 == 2 * direction(C, midpoint(C, F)) - 2 * direction(midpoint(A, F), F) mod 360
By perpendicular_direction_conditions_v0_r on F, B, midpoint(A, F), A we get 180 == 2 * direction(F, B) - 2 * direction(midpoint(A, F), A) mod 360
By perpendicular_direction_conditions_v0_r on B, C, midpoint(A, F), F we get 180 == 2 * direction(B, C) - 2 * direction(midpoint(A, F), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), C, midpoint(A, F), F we get 180 == 2 * direction(midpoint(C, F), C) - 2 * direction(midpoint(A, F), F) mod 360
By projection_definition on midpoint(C, F), line_intersection(i, median(E, C, F)), i we get projection(midpoint(C, F), i) == line_intersection(i, median(E, C, F))
By perpendicular_direction_conditions_v0_r on midpoint(A, F), F, midpoint(C, F), C we get 180 == 2 * direction(midpoint(A, F), F) - 2 * direction(midpoint(C, F), C) mod 360
By perpendicular_direction_conditions_v0_r on D, A, midpoint(A, F), F we get 180 == 2 * direction(D, A) - 2 * direction(midpoint(A, F), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, F), F, B, C we get 180 == 2 * direction(midpoint(A, F), F) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on F, C, midpoint(A, F), A we get 180 == 2 * direction(F, C) - 2 * direction(midpoint(A, F), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, F), F, B, F we get 180 == 2 * direction(midpoint(A, F), F) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, F), F, A, D we get 180 == 2 * direction(midpoint(A, F), F) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on F, C, midpoint(A, F), F we get 180 == 2 * direction(F, C) - 2 * direction(midpoint(A, F), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, F), A, midpoint(C, F), C we get 180 == 2 * direction(midpoint(A, F), A) - 2 * direction(midpoint(C, F), C) mod 360
By projection_definition on E, line_intersection(Line(A, C), Line(B, G)), Line(B, G) we get projection(E, Line(B, G)) == line_intersection(Line(A, C), Line(B, G))
By perpendicular_direction_conditions_v0_r on midpoint(A, F), F, F, midpoint(C, F) we get 180 == 2 * direction(midpoint(A, F), F) - 2 * direction(F, midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, F), A, midpoint(C, F), F we get 180 == 2 * direction(midpoint(A, F), A) - 2 * direction(midpoint(C, F), F) mod 360
By projection_definition on B, line_intersection(Line(A, C), Line(B, G)), Line(A, C) we get projection(B, Line(A, C)) == line_intersection(Line(A, C), Line(B, G))
By perpendicular_direction_conditions_v0_r on midpoint(A, F), A, D, A we get 180 == 2 * direction(midpoint(A, F), A) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, F), A, B, midpoint(C, F) we get 180 == 2 * direction(midpoint(A, F), A) - 2 * direction(B, midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), F, midpoint(A, F), A we get 180 == 2 * direction(midpoint(C, F), F) - 2 * direction(midpoint(A, F), A) mod 360
By projection_definition on D, line_intersection(i, median(E, C, F)), median(E, C, F) we get projection(D, median(E, C, F)) == line_intersection(i, median(E, C, F))
By perpendicular_direction_conditions_v0_r on B, midpoint(C, F), midpoint(A, F), A we get 180 == 2 * direction(B, midpoint(C, F)) - 2 * direction(midpoint(A, F), A) mod 360
By perpendicular_direction_conditions_v0_r on B, F, midpoint(A, F), F we get 180 == 2 * direction(B, F) - 2 * direction(midpoint(A, F), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), F, midpoint(A, F), F we get 180 == 2 * direction(midpoint(C, F), F) - 2 * direction(midpoint(A, F), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, F), F, C, B we get 180 == 2 * direction(midpoint(A, F), F) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on C, B, midpoint(A, F), A we get 180 == 2 * direction(C, B) - 2 * direction(midpoint(A, F), A) mod 360
By projection_definition on A, line_intersection(i, median(E, C, F)), median(E, C, F) we get projection(A, median(E, C, F)) == line_intersection(i, median(E, C, F))
By perpendicular_direction_conditions_v0_r on C, B, midpoint(A, F), F we get 180 == 2 * direction(C, B) - 2 * direction(midpoint(A, F), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), B, midpoint(A, F), A we get 180 == 2 * direction(midpoint(C, F), B) - 2 * direction(midpoint(A, F), A) mod 360
By perpendicular_direction_conditions_v0_r on B, C, midpoint(A, F), A we get 180 == 2 * direction(B, C) - 2 * direction(midpoint(A, F), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, F), A, C, midpoint(C, F) we get 180 == 2 * direction(midpoint(A, F), A) - 2 * direction(C, midpoint(C, F)) mod 360
By projection_definition on C, line_intersection(Line(A, C), Line(B, G)), Line(B, G) we get projection(C, Line(B, G)) == line_intersection(Line(A, C), Line(B, G))
By perpendicular_direction_conditions_v0_r on midpoint(A, F), F, C, midpoint(C, F) we get 180 == 2 * direction(midpoint(A, F), F) - 2 * direction(C, midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on B, F, midpoint(A, F), A we get 180 == 2 * direction(B, F) - 2 * direction(midpoint(A, F), A) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(C, F), midpoint(A, F), A we get 180 == 2 * direction(F, midpoint(C, F)) - 2 * direction(midpoint(A, F), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, F), A, F, B we get 180 == 2 * direction(midpoint(A, F), A) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(C, F), midpoint(A, F), F we get 180 == 2 * direction(F, midpoint(C, F)) - 2 * direction(midpoint(A, F), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, F), A, F, C we get 180 == 2 * direction(midpoint(A, F), A) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, F), A, B, C we get 180 == 2 * direction(midpoint(A, F), A) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, F), F, F, C we get 180 == 2 * direction(midpoint(A, F), F) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on A, D, midpoint(A, F), A we get 180 == 2 * direction(A, D) - 2 * direction(midpoint(A, F), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, F), F, F, B we get 180 == 2 * direction(midpoint(A, F), F) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(C, F), midpoint(A, F), A we get 180 == 2 * direction(C, midpoint(C, F)) - 2 * direction(midpoint(A, F), A) mod 360
By projection_definition on line_intersection(i, median(E, C, F)), midpoint(C, F), g we get midpoint(C, F) == projection(line_intersection(i, median(E, C, F)), g)
By perpendicular_direction_conditions_v0_r on midpoint(A, F), A, F, midpoint(C, F) we get 180 == 2 * direction(midpoint(A, F), A) - 2 * direction(F, midpoint(C, F)) mod 360
By projection_definition on G, line_intersection(Line(A, C), Line(B, G)), Line(A, C) we get projection(G, Line(A, C)) == line_intersection(Line(A, C), Line(B, G))
By projection_definition on F, midpoint(A, F), median(E, A, F) we get midpoint(A, F) == projection(F, median(E, A, F))
By perpendicular_direction_conditions_v0_r on C, F, midpoint(A, F), A we get 180 == 2 * direction(C, F) - 2 * direction(midpoint(A, F), A) mod 360
By projection_definition on line_intersection(i, median(E, C, F)), A, j we get A == projection(line_intersection(i, median(E, C, F)), j)
By perpendicular_direction_conditions_v0_r on midpoint(C, F), B, midpoint(A, F), F we get 180 == 2 * direction(midpoint(C, F), B) - 2 * direction(midpoint(A, F), F) mod 360
By projection_definition on E, line_intersection(i, median(E, C, F)), i we get projection(E, i) == line_intersection(i, median(E, C, F))
By perpendicular_direction_conditions_v0_r on midpoint(A, F), F, B, midpoint(C, F) we get 180 == 2 * direction(midpoint(A, F), F) - 2 * direction(B, midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, F), A, C, B we get 180 == 2 * direction(midpoint(A, F), A) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on A, D, midpoint(A, F), F we get 180 == 2 * direction(A, D) - 2 * direction(midpoint(A, F), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), C, midpoint(A, F), A we get 180 == 2 * direction(midpoint(C, F), C) - 2 * direction(midpoint(A, F), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, F), F, D, A we get 180 == 2 * direction(midpoint(A, F), F) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, F), F, midpoint(C, F), B we get 180 == 2 * direction(midpoint(A, F), F) - 2 * direction(midpoint(C, F), B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, F), F, C, F we get 180 == 2 * direction(midpoint(A, F), F) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, F), F, midpoint(C, F), F we get 180 == 2 * direction(midpoint(A, F), F) - 2 * direction(midpoint(C, F), F) mod 360
By projection_definition on A, line_intersection(Line(A, C), Line(B, G)), Line(B, G) we get projection(A, Line(B, G)) == line_intersection(Line(A, C), Line(B, G))
By perpendicular_direction_conditions_v0_r on midpoint(A, F), A, midpoint(C, F), B we get 180 == 2 * direction(midpoint(A, F), A) - 2 * direction(midpoint(C, F), B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, F), A, B, F we get 180 == 2 * direction(midpoint(A, F), A) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on C, F, midpoint(A, F), F we get 180 == 2 * direction(C, F) - 2 * direction(midpoint(A, F), F) mod 360
By perpendicular_direction_conditions_v0_r on D, A, midpoint(A, F), A we get 180 == 2 * direction(D, A) - 2 * direction(midpoint(A, F), A) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(C, F), midpoint(A, F), F we get 180 == 2 * direction(B, midpoint(C, F)) - 2 * direction(midpoint(A, F), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, F), A, A, D we get 180 == 2 * direction(midpoint(A, F), A) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, F), A, C, F we get 180 == 2 * direction(midpoint(A, F), A) - 2 * direction(C, F) mod 360
By projection_definition on A, midpoint(A, F), median(E, A, F) we get midpoint(A, F) == projection(A, median(E, A, F))
By projection_definition on line_intersection(Line(A, C), Line(B, G)), E, median(E, D, G) we get E == projection(line_intersection(Line(A, C), Line(B, G)), median(E, D, G))
By projection_definition on center(d), line_intersection(i, median(E, C, F)), i we get projection(center(d), i) == line_intersection(i, median(E, C, F))
By perpendicular_direction_conditions_v0_r on F, B, midpoint(A, F), F we get 180 == 2 * direction(F, B) - 2 * direction(midpoint(A, F), F) mod 360
By between_imply_not_between on B, H, E we get collinear_and_not_between(E, B, H)
By parallel_line_definition on B, g, median(E, A, F) we get g == parallel_line(B, median(E, A, F))
By between_imply_not_between on D, H, B we get collinear_and_not_between(B, D, H)
By between_imply_not_between on B, H, D we get collinear_and_not_between(D, B, H)
By between_imply_not_between on E, H, B we get collinear_and_not_between(B, E, H)
By parallel_line_definition on orthocenter(B, C, E), Line(B, G), median(E, D, G) we get Line(B, G) == parallel_line(orthocenter(B, C, E), median(E, D, G))
By parallel_line_definition on orthocenter(B, C, E), median(E, C, F), j we get median(E, C, F) == parallel_line(orthocenter(B, C, E), j)
By parallel_line_definition on midpoint(C, F), g, median(E, A, F) we get g == parallel_line(midpoint(C, F), median(E, A, F))
By parallel_line_definition on midpoint(A, F), j, median(E, C, F) we get j == parallel_line(midpoint(A, F), median(E, C, F))
By parallel_line_definition on E, median(E, A, F), g we get median(E, A, F) == parallel_line(E, g)
By parallel_line_definition on D, i, median(E, A, F) we get i == parallel_line(D, median(E, A, F))
By parallel_line_definition on midpoint(A, F), median(E, A, F), i we get median(E, A, F) == parallel_line(midpoint(A, F), i)
By parallel_line_definition on midpoint(A, F), median(E, A, F), g we get median(E, A, F) == parallel_line(midpoint(A, F), g)
By parallel_line_definition on C, g, median(E, A, F) we get g == parallel_line(C, median(E, A, F))
By parallel_line_definition on E, median(E, A, F), i we get median(E, A, F) == parallel_line(E, i)
By parallel_line_definition on A, i, median(E, A, F) we get i == parallel_line(A, median(E, A, F))
By parallel_line_definition on line_intersection(i, median(E, C, F)), i, median(E, A, F) we get i == parallel_line(line_intersection(i, median(E, C, F)), median(E, A, F))
By parallel_line_definition on F, g, median(E, A, F) we get g == parallel_line(F, median(E, A, F))
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), A, A, G we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), A) - 2 * direction(A, G) mod 360
By circle_by_three_points_and_center on E, A, projection(C, f), F we get E == center(Circle(A, F, projection(C, f)))
By circle_by_three_points_and_center on E, projection(C, f), C, F we get E == center(Circle(C, F, projection(C, f)))
By perpendicular_direction_conditions_v0_r on F, midpoint(C, F), center(d), line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(F, midpoint(C, F)) - 2 * direction(center(d), line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(i, median(E, C, F)), F, G we get 180 == 2 * direction(A, line_intersection(i, median(E, C, F))) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), B, midpoint(C, F), line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(midpoint(C, F), B) - 2 * direction(midpoint(C, F), line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), midpoint(C, F), C, B we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), midpoint(C, F)) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on A, C, G, line_intersection(Line(A, C), Line(B, G)) we get 180 == 2 * direction(A, C) - 2 * direction(G, line_intersection(Line(A, C), Line(B, G))) mod 360
By same_angle_v3 on E, C, A, G we get angle(C, E, G) == angle(A, E, G) + 180 mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(i, median(E, C, F)), B, C we get 180 == 2 * direction(E, line_intersection(i, median(E, C, F))) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), D, F, A we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), D) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on F, B, line_intersection(i, median(E, C, F)), E we get 180 == 2 * direction(F, B) - 2 * direction(line_intersection(i, median(E, C, F)), E) mod 360
By same_angle_v2 on E, B, D, G we get angle(B, E, G) == angle(D, E, G) + 180 mod 360
By perpendicular_direction_conditions_v0_r on E, C, line_intersection(Line(A, C), Line(B, G)), G we get 180 == 2 * direction(E, C) - 2 * direction(line_intersection(Line(A, C), Line(B, G)), G) mod 360
By same_angle_v0 on E, B, H, G we get angle(B, E, G) == angle(H, E, G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), midpoint(C, F), A, D we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), midpoint(C, F)) - 2 * direction(A, D) mod 360
By same_angle_v2 on E, H, D, G we get angle(H, E, G) == angle(D, E, G) + 180 mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), E, C, F we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), E) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(C, F), line_intersection(i, median(E, C, F)), center(d) we get 180 == 2 * direction(F, midpoint(C, F)) - 2 * direction(line_intersection(i, median(E, C, F)), center(d)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), A, E, center(d) we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), A) - 2 * direction(E, center(d)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), line_intersection(i, median(E, C, F)), F, B we get 180 == 2 * direction(midpoint(C, F), line_intersection(i, median(E, C, F))) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), line_intersection(i, median(E, C, F)), midpoint(C, F), F we get 180 == 2 * direction(midpoint(C, F), line_intersection(i, median(E, C, F))) - 2 * direction(midpoint(C, F), F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), A, A, midpoint(A, F) we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), A) - 2 * direction(A, midpoint(A, F)) mod 360
By perpendicular_direction_conditions_v0_r on C, A, B, line_intersection(Line(A, C), Line(B, G)) we get 180 == 2 * direction(C, A) - 2 * direction(B, line_intersection(Line(A, C), Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, F), E, F, G we get 180 == 2 * direction(midpoint(A, F), E) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(A, F), line_intersection(i, median(E, C, F)), D we get 180 == 2 * direction(F, midpoint(A, F)) - 2 * direction(line_intersection(i, median(E, C, F)), D) mod 360
By perpendicular_direction_conditions_v0_r on F, B, line_intersection(i, median(E, C, F)), center(d) we get 180 == 2 * direction(F, B) - 2 * direction(line_intersection(i, median(E, C, F)), center(d)) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(i, median(E, C, F)), center(d), E we get 180 == 2 * direction(D, line_intersection(i, median(E, C, F))) - 2 * direction(center(d), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, F), F, midpoint(A, F), E we get 180 == 2 * direction(midpoint(A, F), F) - 2 * direction(midpoint(A, F), E) mod 360
By projection_definition on line_intersection(i, median(E, C, F)), E, median(E, A, F) we get E == projection(line_intersection(i, median(E, C, F)), median(E, A, F))
By perpendicular_direction_conditions_v0_r on A, F, line_intersection(i, median(E, C, F)), D we get 180 == 2 * direction(A, F) - 2 * direction(line_intersection(i, median(E, C, F)), D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, C), Line(B, G)), A, center(c), E we get 180 == 2 * direction(line_intersection(Line(A, C), Line(B, G)), A) - 2 * direction(center(c), E) mod 360
By orthocenter_concurrency on G, E, A we get orthocenter(A, E, G) in altitude(G, A, E), orthocenter(A, E, G) in altitude(E, A, G), orthocenter(A, E, G) in altitude(A, E, G)
By perpendicular_direction_conditions_v0_r on D, A, line_intersection(i, median(E, C, F)), E we get 180 == 2 * direction(D, A) - 2 * direction(line_intersection(i, median(E, C, F)), E) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(i, median(E, C, F)), F, C we get 180 == 2 * direction(E, line_intersection(i, median(E, C, F))) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on C, A, G, line_intersection(Line(A, C), Line(B, G)) we get 180 == 2 * direction(C, A) - 2 * direction(G, line_intersection(Line(A, C), Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on F, C, midpoint(C, F), line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(F, C) - 2 * direction(midpoint(C, F), line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on F, C, line_intersection(i, median(E, C, F)), center(d) we get 180 == 2 * direction(F, C) - 2 * direction(line_intersection(i, median(E, C, F)), center(d)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, F), A, D, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(midpoint(A, F), A) - 2 * direction(D, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on center(d), line_intersection(i, median(E, C, F)), F, C we get 180 == 2 * direction(center(d), line_intersection(i, median(E, C, F))) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(i, median(E, C, F)), midpoint(A, F), F we get 180 == 2 * direction(A, line_intersection(i, median(E, C, F))) - 2 * direction(midpoint(A, F), F) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(i, median(E, C, F)), D, A we get 180 == 2 * direction(E, line_intersection(i, median(E, C, F))) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(A, F), line_intersection(i, median(E, C, F)), A we get 180 == 2 * direction(F, midpoint(A, F)) - 2 * direction(line_intersection(i, median(E, C, F)), A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), E, B, midpoint(C, F) we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), E) - 2 * direction(B, midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(C, F), line_intersection(i, median(E, C, F)), E we get 180 == 2 * direction(C, midpoint(C, F)) - 2 * direction(line_intersection(i, median(E, C, F)), E) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(A, F), A, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(A, midpoint(A, F)) - 2 * direction(A, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(i, median(E, C, F)), midpoint(A, F), A we get 180 == 2 * direction(D, line_intersection(i, median(E, C, F))) - 2 * direction(midpoint(A, F), A) mod 360
By perpendicular_direction_conditions_v0_r on E, center(c), line_intersection(Line(A, C), Line(B, G)), C we get 180 == 2 * direction(E, center(c)) - 2 * direction(line_intersection(Line(A, C), Line(B, G)), C) mod 360
By perpendicular_direction_conditions_v0_r on E, center(c), line_intersection(Line(A, C), Line(B, G)), A we get 180 == 2 * direction(E, center(c)) - 2 * direction(line_intersection(Line(A, C), Line(B, G)), A) mod 360
By perpendicular_direction_conditions_v0_r on A, C, line_intersection(Line(A, C), Line(B, G)), B we get 180 == 2 * direction(A, C) - 2 * direction(line_intersection(Line(A, C), Line(B, G)), B) mod 360
By same_angle_v0 on G, F, A, E we get angle(A, G, E) == angle(F, G, E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, F), E, midpoint(A, F), F we get 180 == 2 * direction(midpoint(A, F), E) - 2 * direction(midpoint(A, F), F) mod 360
By perpendicular_direction_conditions_v0_r on F, B, center(d), line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(F, B) - 2 * direction(center(d), line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), D, E, midpoint(C, F) we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), D) - 2 * direction(E, midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), E, D, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(midpoint(C, F), E) - 2 * direction(D, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(A, F), A, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(F, midpoint(A, F)) - 2 * direction(A, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on C, B, line_intersection(i, median(E, C, F)), center(d) we get 180 == 2 * direction(C, B) - 2 * direction(line_intersection(i, median(E, C, F)), center(d)) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(Line(A, C), Line(B, G)), C, A we get 180 == 2 * direction(B, line_intersection(Line(A, C), Line(B, G))) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(A, F), midpoint(C, F), center(d) we get 180 == 2 * direction(E, midpoint(A, F)) - 2 * direction(midpoint(C, F), center(d)) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(i, median(E, C, F)), E, midpoint(C, F) we get 180 == 2 * direction(A, line_intersection(i, median(E, C, F))) - 2 * direction(E, midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), B, E, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(midpoint(C, F), B) - 2 * direction(E, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on center(d), line_intersection(i, median(E, C, F)), F, B we get 180 == 2 * direction(center(d), line_intersection(i, median(E, C, F))) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on center(c), E, line_intersection(Line(A, C), Line(B, G)), A we get 180 == 2 * direction(center(c), E) - 2 * direction(line_intersection(Line(A, C), Line(B, G)), A) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(A, F), midpoint(A, F), E we get 180 == 2 * direction(A, midpoint(A, F)) - 2 * direction(midpoint(A, F), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), B, center(d), line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(midpoint(C, F), B) - 2 * direction(center(d), line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), center(d), midpoint(C, F), C we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), center(d)) - 2 * direction(midpoint(C, F), C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), center(d), F, midpoint(C, F) we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), center(d)) - 2 * direction(F, midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), line_intersection(i, median(E, C, F)), B, midpoint(C, F) we get 180 == 2 * direction(midpoint(C, F), line_intersection(i, median(E, C, F))) - 2 * direction(B, midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), line_intersection(i, median(E, C, F)), midpoint(C, F), B we get 180 == 2 * direction(midpoint(C, F), line_intersection(i, median(E, C, F))) - 2 * direction(midpoint(C, F), B) mod 360
By perpendicular_direction_conditions_v0_r on center(d), E, line_intersection(i, median(E, C, F)), A we get 180 == 2 * direction(center(d), E) - 2 * direction(line_intersection(i, median(E, C, F)), A) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(i, median(E, C, F)), A, D we get 180 == 2 * direction(E, line_intersection(i, median(E, C, F))) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on C, F, E, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(C, F) - 2 * direction(E, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on F, A, line_intersection(i, median(E, C, F)), D we get 180 == 2 * direction(F, A) - 2 * direction(line_intersection(i, median(E, C, F)), D) mod 360
By perpendicular_direction_conditions_v0_r on G, B, C, line_intersection(Line(A, C), Line(B, G)) we get 180 == 2 * direction(G, B) - 2 * direction(C, line_intersection(Line(A, C), Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), C, line_intersection(i, median(E, C, F)), midpoint(C, F) we get 180 == 2 * direction(midpoint(C, F), C) - 2 * direction(line_intersection(i, median(E, C, F)), midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(C, F), line_intersection(i, median(E, C, F)), center(d) we get 180 == 2 * direction(C, midpoint(C, F)) - 2 * direction(line_intersection(i, median(E, C, F)), center(d)) mod 360
By perpendicular_direction_conditions_v0_r on G, A, D, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(G, A) - 2 * direction(D, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), E, midpoint(C, F), B we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), E) - 2 * direction(midpoint(C, F), B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, F), A, midpoint(A, F), E we get 180 == 2 * direction(midpoint(A, F), A) - 2 * direction(midpoint(A, F), E) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(C, F), center(d), line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(B, midpoint(C, F)) - 2 * direction(center(d), line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), line_intersection(i, median(E, C, F)), F, C we get 180 == 2 * direction(midpoint(C, F), line_intersection(i, median(E, C, F))) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), F, midpoint(C, F), line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(midpoint(C, F), F) - 2 * direction(midpoint(C, F), line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on C, B, midpoint(C, F), line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(C, B) - 2 * direction(midpoint(C, F), line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on A, E, line_intersection(Line(A, C), Line(B, G)), B we get 180 == 2 * direction(A, E) - 2 * direction(line_intersection(Line(A, C), Line(B, G)), B) mod 360
By perpendicular_direction_conditions_v0_r on center(d), line_intersection(i, median(E, C, F)), midpoint(C, F), F we get 180 == 2 * direction(center(d), line_intersection(i, median(E, C, F))) - 2 * direction(midpoint(C, F), F) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(Line(A, C), Line(B, G)), B, G we get 180 == 2 * direction(C, line_intersection(Line(A, C), Line(B, G))) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), E, F, B we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), E) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, F), E, E, center(d) we get 180 == 2 * direction(midpoint(A, F), E) - 2 * direction(E, center(d)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, C), Line(B, G)), E, E, center(c) we get 180 == 2 * direction(line_intersection(Line(A, C), Line(B, G)), E) - 2 * direction(E, center(c)) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(i, median(E, C, F)), F, midpoint(A, F) we get 180 == 2 * direction(D, line_intersection(i, median(E, C, F))) - 2 * direction(F, midpoint(A, F)) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(C, F), line_intersection(i, median(E, C, F)), center(d) we get 180 == 2 * direction(B, midpoint(C, F)) - 2 * direction(line_intersection(i, median(E, C, F)), center(d)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), midpoint(C, F), F, B we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), midpoint(C, F)) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on G, B, line_intersection(Line(A, C), Line(B, G)), E we get 180 == 2 * direction(G, B) - 2 * direction(line_intersection(Line(A, C), Line(B, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), F, center(d), line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(midpoint(C, F), F) - 2 * direction(center(d), line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on center(c), E, E, line_intersection(Line(A, C), Line(B, G)) we get 180 == 2 * direction(center(c), E) - 2 * direction(E, line_intersection(Line(A, C), Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on center(d), midpoint(C, F), line_intersection(i, median(E, C, F)), D we get 180 == 2 * direction(center(d), midpoint(C, F)) - 2 * direction(line_intersection(i, median(E, C, F)), D) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(i, median(E, C, F)), G, F we get 180 == 2 * direction(A, line_intersection(i, median(E, C, F))) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), A, center(d), midpoint(C, F) we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), A) - 2 * direction(center(d), midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on E, center(d), line_intersection(i, median(E, C, F)), D we get 180 == 2 * direction(E, center(d)) - 2 * direction(line_intersection(i, median(E, C, F)), D) mod 360
By perpendicular_direction_conditions_v0_r on C, E, line_intersection(Line(A, C), Line(B, G)), G we get 180 == 2 * direction(C, E) - 2 * direction(line_intersection(Line(A, C), Line(B, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), line_intersection(i, median(E, C, F)), midpoint(C, F), C we get 180 == 2 * direction(midpoint(C, F), line_intersection(i, median(E, C, F))) - 2 * direction(midpoint(C, F), C) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(i, median(E, C, F)), A, F we get 180 == 2 * direction(D, line_intersection(i, median(E, C, F))) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(Line(A, C), Line(B, G)), A, C we get 180 == 2 * direction(B, line_intersection(Line(A, C), Line(B, G))) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), E, A, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(midpoint(C, F), E) - 2 * direction(A, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(A, F), F, midpoint(A, F) we get 180 == 2 * direction(E, midpoint(A, F)) - 2 * direction(F, midpoint(A, F)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, C), Line(B, G)), G, E, C we get 180 == 2 * direction(line_intersection(Line(A, C), Line(B, G)), G) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), center(d), midpoint(C, F), B we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), center(d)) - 2 * direction(midpoint(C, F), B) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(i, median(E, C, F)), center(d), midpoint(C, F) we get 180 == 2 * direction(A, line_intersection(i, median(E, C, F))) - 2 * direction(center(d), midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, C), Line(B, G)), E, G, B we get 180 == 2 * direction(line_intersection(Line(A, C), Line(B, G)), E) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on C, A, line_intersection(Line(A, C), Line(B, G)), G we get 180 == 2 * direction(C, A) - 2 * direction(line_intersection(Line(A, C), Line(B, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), A, F, A we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), A) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on center(d), E, line_intersection(i, median(E, C, F)), D we get 180 == 2 * direction(center(d), E) - 2 * direction(line_intersection(i, median(E, C, F)), D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, C), Line(B, G)), E, B, G we get 180 == 2 * direction(line_intersection(Line(A, C), Line(B, G)), E) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(i, median(E, C, F)), F, G we get 180 == 2 * direction(D, line_intersection(i, median(E, C, F))) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on center(c), E, line_intersection(Line(A, C), Line(B, G)), C we get 180 == 2 * direction(center(c), E) - 2 * direction(line_intersection(Line(A, C), Line(B, G)), C) mod 360
By perpendicular_direction_conditions_v0_r on center(d), line_intersection(i, median(E, C, F)), B, F we get 180 == 2 * direction(center(d), line_intersection(i, median(E, C, F))) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), D, midpoint(C, F), center(d) we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), D) - 2 * direction(midpoint(C, F), center(d)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), center(d), B, F we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), center(d)) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(C, F), E, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(C, midpoint(C, F)) - 2 * direction(E, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), center(d), midpoint(A, F), E we get 180 == 2 * direction(midpoint(C, F), center(d)) - 2 * direction(midpoint(A, F), E) mod 360
By perpendicular_direction_conditions_v0_r on B, F, line_intersection(i, median(E, C, F)), center(d) we get 180 == 2 * direction(B, F) - 2 * direction(line_intersection(i, median(E, C, F)), center(d)) mod 360
By perpendicular_direction_conditions_v0_r on F, G, A, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(F, G) - 2 * direction(A, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(i, median(E, C, F)), G, A we get 180 == 2 * direction(D, line_intersection(i, median(E, C, F))) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), A, midpoint(C, F), E we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), A) - 2 * direction(midpoint(C, F), E) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(A, F), D, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(F, midpoint(A, F)) - 2 * direction(D, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(C, F), midpoint(C, F), line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(B, midpoint(C, F)) - 2 * direction(midpoint(C, F), line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on A, F, E, midpoint(A, F) we get 180 == 2 * direction(A, F) - 2 * direction(E, midpoint(A, F)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(A, F), A, G we get 180 == 2 * direction(E, midpoint(A, F)) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on G, A, midpoint(A, F), E we get 180 == 2 * direction(G, A) - 2 * direction(midpoint(A, F), E) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(C, F), line_intersection(i, median(E, C, F)), A we get 180 == 2 * direction(E, midpoint(C, F)) - 2 * direction(line_intersection(i, median(E, C, F)), A) mod 360
By perpendicular_direction_conditions_v0_r on G, B, A, line_intersection(Line(A, C), Line(B, G)) we get 180 == 2 * direction(G, B) - 2 * direction(A, line_intersection(Line(A, C), Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), midpoint(C, F), B, C we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), midpoint(C, F)) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, F), E, midpoint(C, F), center(d) we get 180 == 2 * direction(midpoint(A, F), E) - 2 * direction(midpoint(C, F), center(d)) mod 360
By perpendicular_direction_conditions_v0_r on F, G, line_intersection(i, median(E, C, F)), A we get 180 == 2 * direction(F, G) - 2 * direction(line_intersection(i, median(E, C, F)), A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), A, G, F we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), A) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on E, center(c), E, line_intersection(Line(A, C), Line(B, G)) we get 180 == 2 * direction(E, center(c)) - 2 * direction(E, line_intersection(Line(A, C), Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), E, D, A we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), E) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on E, C, B, line_intersection(Line(A, C), Line(B, G)) we get 180 == 2 * direction(E, C) - 2 * direction(B, line_intersection(Line(A, C), Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), C, E, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(midpoint(C, F), C) - 2 * direction(E, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(A, F), G, F we get 180 == 2 * direction(E, midpoint(A, F)) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), E, B, F we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), E) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), midpoint(C, F), C, F we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), midpoint(C, F)) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), midpoint(C, F), midpoint(C, F), B we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), midpoint(C, F)) - 2 * direction(midpoint(C, F), B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, C), Line(B, G)), C, B, G we get 180 == 2 * direction(line_intersection(Line(A, C), Line(B, G)), C) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), D, A, F we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), D) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(A, F), line_intersection(i, median(E, C, F)), D we get 180 == 2 * direction(A, midpoint(A, F)) - 2 * direction(line_intersection(i, median(E, C, F)), D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, C), Line(B, G)), E, center(c), E we get 180 == 2 * direction(line_intersection(Line(A, C), Line(B, G)), E) - 2 * direction(center(c), E) mod 360
By perpendicular_direction_conditions_v0_r on A, E, G, line_intersection(Line(A, C), Line(B, G)) we get 180 == 2 * direction(A, E) - 2 * direction(G, line_intersection(Line(A, C), Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(i, median(E, C, F)), E, center(d) we get 180 == 2 * direction(A, line_intersection(i, median(E, C, F))) - 2 * direction(E, center(d)) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(i, median(E, C, F)), C, B we get 180 == 2 * direction(E, line_intersection(i, median(E, C, F))) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on E, C, line_intersection(Line(A, C), Line(B, G)), B we get 180 == 2 * direction(E, C) - 2 * direction(line_intersection(Line(A, C), Line(B, G)), B) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(A, F), center(d), E we get 180 == 2 * direction(E, midpoint(A, F)) - 2 * direction(center(d), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), center(d), D, A we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), center(d)) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, C), Line(B, G)), B, E, A we get 180 == 2 * direction(line_intersection(Line(A, C), Line(B, G)), B) - 2 * direction(E, A) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(Line(A, C), Line(B, G)), center(c), E we get 180 == 2 * direction(A, line_intersection(Line(A, C), Line(B, G))) - 2 * direction(center(c), E) mod 360
By perpendicular_direction_conditions_v0_r on center(c), E, C, line_intersection(Line(A, C), Line(B, G)) we get 180 == 2 * direction(center(c), E) - 2 * direction(C, line_intersection(Line(A, C), Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on C, F, midpoint(C, F), line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(C, F) - 2 * direction(midpoint(C, F), line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(Line(A, C), Line(B, G)), A, E we get 180 == 2 * direction(G, line_intersection(Line(A, C), Line(B, G))) - 2 * direction(A, E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, F), E, midpoint(A, F), A we get 180 == 2 * direction(midpoint(A, F), E) - 2 * direction(midpoint(A, F), A) mod 360
By perpendicular_direction_conditions_v0_r on G, F, line_intersection(i, median(E, C, F)), A we get 180 == 2 * direction(G, F) - 2 * direction(line_intersection(i, median(E, C, F)), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), F, line_intersection(i, median(E, C, F)), center(d) we get 180 == 2 * direction(midpoint(C, F), F) - 2 * direction(line_intersection(i, median(E, C, F)), center(d)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), E, midpoint(C, F), C we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), E) - 2 * direction(midpoint(C, F), C) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(i, median(E, C, F)), F, midpoint(C, F) we get 180 == 2 * direction(E, line_intersection(i, median(E, C, F))) - 2 * direction(F, midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on C, E, B, line_intersection(Line(A, C), Line(B, G)) we get 180 == 2 * direction(C, E) - 2 * direction(B, line_intersection(Line(A, C), Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(i, median(E, C, F)), F, A we get 180 == 2 * direction(A, line_intersection(i, median(E, C, F))) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on A, D, line_intersection(i, median(E, C, F)), E we get 180 == 2 * direction(A, D) - 2 * direction(line_intersection(i, median(E, C, F)), E) mod 360
By perpendicular_direction_conditions_v0_r on A, F, midpoint(A, F), E we get 180 == 2 * direction(A, F) - 2 * direction(midpoint(A, F), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), A, A, F we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), A) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, F), A, line_intersection(i, median(E, C, F)), A we get 180 == 2 * direction(midpoint(A, F), A) - 2 * direction(line_intersection(i, median(E, C, F)), A) mod 360
By perpendicular_direction_conditions_v0_r on A, F, D, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(A, F) - 2 * direction(D, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), A, midpoint(A, F), F we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), A) - 2 * direction(midpoint(A, F), F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), midpoint(C, F), B, F we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), midpoint(C, F)) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), A, center(d), E we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), A) - 2 * direction(center(d), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, F), F, A, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(midpoint(A, F), F) - 2 * direction(A, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on C, F, line_intersection(i, median(E, C, F)), center(d) we get 180 == 2 * direction(C, F) - 2 * direction(line_intersection(i, median(E, C, F)), center(d)) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(C, F), line_intersection(i, median(E, C, F)), E we get 180 == 2 * direction(B, midpoint(C, F)) - 2 * direction(line_intersection(i, median(E, C, F)), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, F), E, F, A we get 180 == 2 * direction(midpoint(A, F), E) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(A, F), line_intersection(i, median(E, C, F)), A we get 180 == 2 * direction(A, midpoint(A, F)) - 2 * direction(line_intersection(i, median(E, C, F)), A) mod 360
By perpendicular_direction_conditions_v0_r on center(d), line_intersection(i, median(E, C, F)), C, midpoint(C, F) we get 180 == 2 * direction(center(d), line_intersection(i, median(E, C, F))) - 2 * direction(C, midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on center(d), midpoint(C, F), D, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(center(d), midpoint(C, F)) - 2 * direction(D, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on C, A, line_intersection(Line(A, C), Line(B, G)), B we get 180 == 2 * direction(C, A) - 2 * direction(line_intersection(Line(A, C), Line(B, G)), B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, F), F, D, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(midpoint(A, F), F) - 2 * direction(D, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(i, median(E, C, F)), A, G we get 180 == 2 * direction(A, line_intersection(i, median(E, C, F))) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), center(d), C, midpoint(C, F) we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), center(d)) - 2 * direction(C, midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on C, E, line_intersection(Line(A, C), Line(B, G)), B we get 180 == 2 * direction(C, E) - 2 * direction(line_intersection(Line(A, C), Line(B, G)), B) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(Line(A, C), Line(B, G)), E, A we get 180 == 2 * direction(B, line_intersection(Line(A, C), Line(B, G))) - 2 * direction(E, A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), E, C, B we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), E) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), center(d), B, C we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), center(d)) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on center(d), line_intersection(i, median(E, C, F)), midpoint(C, F), B we get 180 == 2 * direction(center(d), line_intersection(i, median(E, C, F))) - 2 * direction(midpoint(C, F), B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), A, G, A we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), A) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on F, A, midpoint(A, F), E we get 180 == 2 * direction(F, A) - 2 * direction(midpoint(A, F), E) mod 360
By perpendicular_direction_conditions_v0_r on F, G, E, midpoint(A, F) we get 180 == 2 * direction(F, G) - 2 * direction(E, midpoint(A, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, F), F, line_intersection(i, median(E, C, F)), A we get 180 == 2 * direction(midpoint(A, F), F) - 2 * direction(line_intersection(i, median(E, C, F)), A) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(i, median(E, C, F)), E, center(d) we get 180 == 2 * direction(D, line_intersection(i, median(E, C, F))) - 2 * direction(E, center(d)) mod 360
By perpendicular_direction_conditions_v0_r on G, A, A, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(G, A) - 2 * direction(A, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on center(d), line_intersection(i, median(E, C, F)), midpoint(C, F), C we get 180 == 2 * direction(center(d), line_intersection(i, median(E, C, F))) - 2 * direction(midpoint(C, F), C) mod 360
By perpendicular_direction_conditions_v0_r on C, F, center(d), line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(C, F) - 2 * direction(center(d), line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(i, median(E, C, F)), F, B we get 180 == 2 * direction(E, line_intersection(i, median(E, C, F))) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(Line(A, C), Line(B, G)), A, E we get 180 == 2 * direction(B, line_intersection(Line(A, C), Line(B, G))) - 2 * direction(A, E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), center(d), B, midpoint(C, F) we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), center(d)) - 2 * direction(B, midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), E, midpoint(C, F), F we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), E) - 2 * direction(midpoint(C, F), F) mod 360
By perpendicular_direction_conditions_v0_r on E, center(d), A, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(E, center(d)) - 2 * direction(A, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, C), Line(B, G)), B, C, E we get 180 == 2 * direction(line_intersection(Line(A, C), Line(B, G)), B) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on center(c), E, A, line_intersection(Line(A, C), Line(B, G)) we get 180 == 2 * direction(center(c), E) - 2 * direction(A, line_intersection(Line(A, C), Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on center(d), midpoint(C, F), line_intersection(i, median(E, C, F)), A we get 180 == 2 * direction(center(d), midpoint(C, F)) - 2 * direction(line_intersection(i, median(E, C, F)), A) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(C, F), line_intersection(i, median(E, C, F)), midpoint(C, F) we get 180 == 2 * direction(C, midpoint(C, F)) - 2 * direction(line_intersection(i, median(E, C, F)), midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), midpoint(C, F), B, midpoint(C, F) we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), midpoint(C, F)) - 2 * direction(B, midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on center(c), E, line_intersection(Line(A, C), Line(B, G)), E we get 180 == 2 * direction(center(c), E) - 2 * direction(line_intersection(Line(A, C), Line(B, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(Line(A, C), Line(B, G)), E, center(c) we get 180 == 2 * direction(C, line_intersection(Line(A, C), Line(B, G))) - 2 * direction(E, center(c)) mod 360
By perpendicular_direction_conditions_v0_r on E, center(c), line_intersection(Line(A, C), Line(B, G)), E we get 180 == 2 * direction(E, center(c)) - 2 * direction(line_intersection(Line(A, C), Line(B, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on A, G, A, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(A, G) - 2 * direction(A, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), E, midpoint(A, F), E we get 180 == 2 * direction(midpoint(C, F), E) - 2 * direction(midpoint(A, F), E) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(i, median(E, C, F)), midpoint(C, F), B we get 180 == 2 * direction(E, line_intersection(i, median(E, C, F))) - 2 * direction(midpoint(C, F), B) mod 360
By perpendicular_direction_conditions_v0_r on C, B, line_intersection(i, median(E, C, F)), E we get 180 == 2 * direction(C, B) - 2 * direction(line_intersection(i, median(E, C, F)), E) mod 360
By perpendicular_direction_conditions_v0_r on C, B, line_intersection(i, median(E, C, F)), midpoint(C, F) we get 180 == 2 * direction(C, B) - 2 * direction(line_intersection(i, median(E, C, F)), midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), midpoint(C, F), midpoint(C, F), C we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), midpoint(C, F)) - 2 * direction(midpoint(C, F), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, F), E, F, midpoint(A, F) we get 180 == 2 * direction(midpoint(A, F), E) - 2 * direction(F, midpoint(A, F)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), D, midpoint(A, F), A we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), D) - 2 * direction(midpoint(A, F), A) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(Line(A, C), Line(B, G)), center(c), E we get 180 == 2 * direction(C, line_intersection(Line(A, C), Line(B, G))) - 2 * direction(center(c), E) mod 360
By perpendicular_direction_conditions_v0_r on A, G, line_intersection(i, median(E, C, F)), D we get 180 == 2 * direction(A, G) - 2 * direction(line_intersection(i, median(E, C, F)), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), B, line_intersection(i, median(E, C, F)), E we get 180 == 2 * direction(midpoint(C, F), B) - 2 * direction(line_intersection(i, median(E, C, F)), E) mod 360
By perpendicular_direction_conditions_v0_r on F, A, D, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(F, A) - 2 * direction(D, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), center(d), E, midpoint(A, F) we get 180 == 2 * direction(midpoint(C, F), center(d)) - 2 * direction(E, midpoint(A, F)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), D, G, F we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), D) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on A, C, B, line_intersection(Line(A, C), Line(B, G)) we get 180 == 2 * direction(A, C) - 2 * direction(B, line_intersection(Line(A, C), Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on A, D, line_intersection(i, median(E, C, F)), center(d) we get 180 == 2 * direction(A, D) - 2 * direction(line_intersection(i, median(E, C, F)), center(d)) mod 360
By perpendicular_direction_conditions_v0_r on G, F, A, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(G, F) - 2 * direction(A, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on B, G, line_intersection(Line(A, C), Line(B, G)), E we get 180 == 2 * direction(B, G) - 2 * direction(line_intersection(Line(A, C), Line(B, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on E, center(d), D, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(E, center(d)) - 2 * direction(D, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on B, C, midpoint(C, F), line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(B, C) - 2 * direction(midpoint(C, F), line_intersection(i, median(E, C, F))) mod 360
By projection_definition on midpoint(A, F), A, i we get A == projection(midpoint(A, F), i)
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, C), Line(B, G)), G, A, E we get 180 == 2 * direction(line_intersection(Line(A, C), Line(B, G)), G) - 2 * direction(A, E) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(i, median(E, C, F)), midpoint(A, F), F we get 180 == 2 * direction(D, line_intersection(i, median(E, C, F))) - 2 * direction(midpoint(A, F), F) mod 360
By projection_definition on midpoint(A, F), E, median(E, C, F) we get E == projection(midpoint(A, F), median(E, C, F))
By perpendicular_direction_conditions_v0_r on midpoint(C, F), F, line_intersection(i, median(E, C, F)), midpoint(C, F) we get 180 == 2 * direction(midpoint(C, F), F) - 2 * direction(line_intersection(i, median(E, C, F)), midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, F), E, A, F we get 180 == 2 * direction(midpoint(A, F), E) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, C), Line(B, G)), G, E, A we get 180 == 2 * direction(line_intersection(Line(A, C), Line(B, G)), G) - 2 * direction(E, A) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(i, median(E, C, F)), midpoint(C, F), E we get 180 == 2 * direction(A, line_intersection(i, median(E, C, F))) - 2 * direction(midpoint(C, F), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), center(d), line_intersection(i, median(E, C, F)), D we get 180 == 2 * direction(midpoint(C, F), center(d)) - 2 * direction(line_intersection(i, median(E, C, F)), D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, C), Line(B, G)), C, G, B we get 180 == 2 * direction(line_intersection(Line(A, C), Line(B, G)), C) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), line_intersection(i, median(E, C, F)), C, midpoint(C, F) we get 180 == 2 * direction(midpoint(C, F), line_intersection(i, median(E, C, F))) - 2 * direction(C, midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on B, F, E, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(B, F) - 2 * direction(E, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on B, F, line_intersection(i, median(E, C, F)), midpoint(C, F) we get 180 == 2 * direction(B, F) - 2 * direction(line_intersection(i, median(E, C, F)), midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on B, C, line_intersection(i, median(E, C, F)), E we get 180 == 2 * direction(B, C) - 2 * direction(line_intersection(i, median(E, C, F)), E) mod 360
By perpendicular_direction_conditions_v0_r on B, G, line_intersection(Line(A, C), Line(B, G)), C we get 180 == 2 * direction(B, G) - 2 * direction(line_intersection(Line(A, C), Line(B, G)), C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), A, F, G we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), A) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(i, median(E, C, F)), C, midpoint(C, F) we get 180 == 2 * direction(E, line_intersection(i, median(E, C, F))) - 2 * direction(C, midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), E, E, midpoint(A, F) we get 180 == 2 * direction(midpoint(C, F), E) - 2 * direction(E, midpoint(A, F)) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(i, median(E, C, F)), B, midpoint(C, F) we get 180 == 2 * direction(E, line_intersection(i, median(E, C, F))) - 2 * direction(B, midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on E, A, line_intersection(Line(A, C), Line(B, G)), B we get 180 == 2 * direction(E, A) - 2 * direction(line_intersection(Line(A, C), Line(B, G)), B) mod 360
By perpendicular_direction_conditions_v0_r on A, C, line_intersection(Line(A, C), Line(B, G)), G we get 180 == 2 * direction(A, C) - 2 * direction(line_intersection(Line(A, C), Line(B, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(i, median(E, C, F)), midpoint(C, F), E we get 180 == 2 * direction(D, line_intersection(i, median(E, C, F))) - 2 * direction(midpoint(C, F), E) mod 360
By perpendicular_direction_conditions_v0_r on E, center(c), A, line_intersection(Line(A, C), Line(B, G)) we get 180 == 2 * direction(E, center(c)) - 2 * direction(A, line_intersection(Line(A, C), Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, C), Line(B, G)), B, E, C we get 180 == 2 * direction(line_intersection(Line(A, C), Line(B, G)), B) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), center(d), C, F we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), center(d)) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(C, F), A, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(E, midpoint(C, F)) - 2 * direction(A, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, C), Line(B, G)), B, C, A we get 180 == 2 * direction(line_intersection(Line(A, C), Line(B, G)), B) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), line_intersection(i, median(E, C, F)), C, B we get 180 == 2 * direction(midpoint(C, F), line_intersection(i, median(E, C, F))) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(A, F), G, A we get 180 == 2 * direction(E, midpoint(A, F)) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on F, G, line_intersection(i, median(E, C, F)), D we get 180 == 2 * direction(F, G) - 2 * direction(line_intersection(i, median(E, C, F)), D) mod 360
By perpendicular_direction_conditions_v0_r on D, A, center(d), line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(D, A) - 2 * direction(center(d), line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), D, center(d), midpoint(C, F) we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), D) - 2 * direction(center(d), midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(A, F), midpoint(A, F), F we get 180 == 2 * direction(E, midpoint(A, F)) - 2 * direction(midpoint(A, F), F) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(Line(A, C), Line(B, G)), E, center(c) we get 180 == 2 * direction(E, line_intersection(Line(A, C), Line(B, G))) - 2 * direction(E, center(c)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), center(d), A, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(midpoint(C, F), center(d)) - 2 * direction(A, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), D, midpoint(C, F), E we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), D) - 2 * direction(midpoint(C, F), E) mod 360
By projection_definition on midpoint(A, F), F, g we get F == projection(midpoint(A, F), g)
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), A, midpoint(A, F), A we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), A) - 2 * direction(midpoint(A, F), A) mod 360
By perpendicular_direction_conditions_v0_r on A, F, line_intersection(i, median(E, C, F)), A we get 180 == 2 * direction(A, F) - 2 * direction(line_intersection(i, median(E, C, F)), A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), D, E, center(d) we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), D) - 2 * direction(E, center(d)) mod 360
By perpendicular_direction_conditions_v0_r on C, E, G, line_intersection(Line(A, C), Line(B, G)) we get 180 == 2 * direction(C, E) - 2 * direction(G, line_intersection(Line(A, C), Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), D, A, midpoint(A, F) we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), D) - 2 * direction(A, midpoint(A, F)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), E, F, C we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), E) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on B, G, E, line_intersection(Line(A, C), Line(B, G)) we get 180 == 2 * direction(B, G) - 2 * direction(E, line_intersection(Line(A, C), Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), D, A, G we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), D) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), E, F, midpoint(C, F) we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), E) - 2 * direction(F, midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), midpoint(C, F), midpoint(C, F), F we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), midpoint(C, F)) - 2 * direction(midpoint(C, F), F) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(C, F), line_intersection(i, median(E, C, F)), midpoint(C, F) we get 180 == 2 * direction(B, midpoint(C, F)) - 2 * direction(line_intersection(i, median(E, C, F)), midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), F, line_intersection(i, median(E, C, F)), E we get 180 == 2 * direction(midpoint(C, F), F) - 2 * direction(line_intersection(i, median(E, C, F)), E) mod 360
By perpendicular_direction_conditions_v0_r on D, A, E, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(D, A) - 2 * direction(E, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), D, G, A we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), D) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on F, B, line_intersection(i, median(E, C, F)), midpoint(C, F) we get 180 == 2 * direction(F, B) - 2 * direction(line_intersection(i, median(E, C, F)), midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, C), Line(B, G)), B, A, E we get 180 == 2 * direction(line_intersection(Line(A, C), Line(B, G)), B) - 2 * direction(A, E) mod 360
By perpendicular_direction_conditions_v0_r on center(d), midpoint(C, F), A, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(center(d), midpoint(C, F)) - 2 * direction(A, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(C, F), midpoint(C, F), line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(F, midpoint(C, F)) - 2 * direction(midpoint(C, F), line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(C, F), midpoint(A, F), E we get 180 == 2 * direction(E, midpoint(C, F)) - 2 * direction(midpoint(A, F), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, C), Line(B, G)), C, center(c), E we get 180 == 2 * direction(line_intersection(Line(A, C), Line(B, G)), C) - 2 * direction(center(c), E) mod 360
By perpendicular_direction_conditions_v0_r on F, C, line_intersection(i, median(E, C, F)), midpoint(C, F) we get 180 == 2 * direction(F, C) - 2 * direction(line_intersection(i, median(E, C, F)), midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), C, center(d), line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(midpoint(C, F), C) - 2 * direction(center(d), line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on center(d), line_intersection(i, median(E, C, F)), F, midpoint(C, F) we get 180 == 2 * direction(center(d), line_intersection(i, median(E, C, F))) - 2 * direction(F, midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(Line(A, C), Line(B, G)), A, C we get 180 == 2 * direction(G, line_intersection(Line(A, C), Line(B, G))) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(C, F), line_intersection(i, median(E, C, F)), midpoint(C, F) we get 180 == 2 * direction(F, midpoint(C, F)) - 2 * direction(line_intersection(i, median(E, C, F)), midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on B, F, line_intersection(i, median(E, C, F)), E we get 180 == 2 * direction(B, F) - 2 * direction(line_intersection(i, median(E, C, F)), E) mod 360
By perpendicular_direction_conditions_v0_r on center(d), line_intersection(i, median(E, C, F)), D, A we get 180 == 2 * direction(center(d), line_intersection(i, median(E, C, F))) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, F), E, A, G we get 180 == 2 * direction(midpoint(A, F), E) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on A, G, E, midpoint(A, F) we get 180 == 2 * direction(A, G) - 2 * direction(E, midpoint(A, F)) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(i, median(E, C, F)), B, F we get 180 == 2 * direction(E, line_intersection(i, median(E, C, F))) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(i, median(E, C, F)), center(d), E we get 180 == 2 * direction(A, line_intersection(i, median(E, C, F))) - 2 * direction(center(d), E) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(Line(A, C), Line(B, G)), C, E we get 180 == 2 * direction(B, line_intersection(Line(A, C), Line(B, G))) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(Line(A, C), Line(B, G)), G, B we get 180 == 2 * direction(A, line_intersection(Line(A, C), Line(B, G))) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on center(d), E, A, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(center(d), E) - 2 * direction(A, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(C, F), line_intersection(i, median(E, C, F)), E we get 180 == 2 * direction(F, midpoint(C, F)) - 2 * direction(line_intersection(i, median(E, C, F)), E) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(C, F), E, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(F, midpoint(C, F)) - 2 * direction(E, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(i, median(E, C, F)), A, midpoint(A, F) we get 180 == 2 * direction(A, line_intersection(i, median(E, C, F))) - 2 * direction(A, midpoint(A, F)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, C), Line(B, G)), C, E, center(c) we get 180 == 2 * direction(line_intersection(Line(A, C), Line(B, G)), C) - 2 * direction(E, center(c)) mod 360
By perpendicular_direction_conditions_v0_r on A, E, line_intersection(Line(A, C), Line(B, G)), G we get 180 == 2 * direction(A, E) - 2 * direction(line_intersection(Line(A, C), Line(B, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on A, D, line_intersection(i, median(E, C, F)), midpoint(C, F) we get 180 == 2 * direction(A, D) - 2 * direction(line_intersection(i, median(E, C, F)), midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on G, A, E, midpoint(A, F) we get 180 == 2 * direction(G, A) - 2 * direction(E, midpoint(A, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, F), E, G, A we get 180 == 2 * direction(midpoint(A, F), E) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), C, line_intersection(i, median(E, C, F)), E we get 180 == 2 * direction(midpoint(C, F), C) - 2 * direction(line_intersection(i, median(E, C, F)), E) mod 360
By perpendicular_direction_conditions_v0_r on F, B, E, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(F, B) - 2 * direction(E, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on E, center(c), C, line_intersection(Line(A, C), Line(B, G)) we get 180 == 2 * direction(E, center(c)) - 2 * direction(C, line_intersection(Line(A, C), Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on G, F, midpoint(A, F), E we get 180 == 2 * direction(G, F) - 2 * direction(midpoint(A, F), E) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(Line(A, C), Line(B, G)), center(c), E we get 180 == 2 * direction(E, line_intersection(Line(A, C), Line(B, G))) - 2 * direction(center(c), E) mod 360
By perpendicular_direction_conditions_v0_r on G, A, line_intersection(i, median(E, C, F)), D we get 180 == 2 * direction(G, A) - 2 * direction(line_intersection(i, median(E, C, F)), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, F), F, line_intersection(i, median(E, C, F)), D we get 180 == 2 * direction(midpoint(A, F), F) - 2 * direction(line_intersection(i, median(E, C, F)), D) mod 360
By perpendicular_direction_conditions_v0_r on F, A, A, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(F, A) - 2 * direction(A, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, F), E, A, midpoint(A, F) we get 180 == 2 * direction(midpoint(A, F), E) - 2 * direction(A, midpoint(A, F)) mod 360
By perpendicular_direction_conditions_v0_r on center(d), E, midpoint(A, F), E we get 180 == 2 * direction(center(d), E) - 2 * direction(midpoint(A, F), E) mod 360
By perpendicular_direction_conditions_v0_r on E, A, G, line_intersection(Line(A, C), Line(B, G)) we get 180 == 2 * direction(E, A) - 2 * direction(G, line_intersection(Line(A, C), Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on B, F, midpoint(C, F), line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(B, F) - 2 * direction(midpoint(C, F), line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), D, midpoint(A, F), F we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), D) - 2 * direction(midpoint(A, F), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), line_intersection(i, median(E, C, F)), B, C we get 180 == 2 * direction(midpoint(C, F), line_intersection(i, median(E, C, F))) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on center(d), line_intersection(i, median(E, C, F)), C, F we get 180 == 2 * direction(center(d), line_intersection(i, median(E, C, F))) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on B, G, C, line_intersection(Line(A, C), Line(B, G)) we get 180 == 2 * direction(B, G) - 2 * direction(C, line_intersection(Line(A, C), Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), line_intersection(i, median(E, C, F)), C, F we get 180 == 2 * direction(midpoint(C, F), line_intersection(i, median(E, C, F))) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on E, center(d), E, midpoint(A, F) we get 180 == 2 * direction(E, center(d)) - 2 * direction(E, midpoint(A, F)) mod 360
By perpendicular_direction_conditions_v0_r on A, D, midpoint(C, F), line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(A, D) - 2 * direction(midpoint(C, F), line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(i, median(E, C, F)), E, midpoint(C, F) we get 180 == 2 * direction(D, line_intersection(i, median(E, C, F))) - 2 * direction(E, midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on F, C, center(d), line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(F, C) - 2 * direction(center(d), line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), midpoint(C, F), F, midpoint(C, F) we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), midpoint(C, F)) - 2 * direction(F, midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(Line(A, C), Line(B, G)), E, center(c) we get 180 == 2 * direction(A, line_intersection(Line(A, C), Line(B, G))) - 2 * direction(E, center(c)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(A, F), E, center(d) we get 180 == 2 * direction(E, midpoint(A, F)) - 2 * direction(E, center(d)) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(C, F), E, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(B, midpoint(C, F)) - 2 * direction(E, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), D, F, midpoint(A, F) we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), D) - 2 * direction(F, midpoint(A, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), line_intersection(i, median(E, C, F)), F, midpoint(C, F) we get 180 == 2 * direction(midpoint(C, F), line_intersection(i, median(E, C, F))) - 2 * direction(F, midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), E, line_intersection(i, median(E, C, F)), A we get 180 == 2 * direction(midpoint(C, F), E) - 2 * direction(line_intersection(i, median(E, C, F)), A) mod 360
By perpendicular_direction_conditions_v0_r on F, B, midpoint(C, F), line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(F, B) - 2 * direction(midpoint(C, F), line_intersection(i, median(E, C, F))) mod 360
By projection_definition on center(d), E, median(E, A, F) we get E == projection(center(d), median(E, A, F))
By perpendicular_direction_conditions_v0_r on B, G, A, line_intersection(Line(A, C), Line(B, G)) we get 180 == 2 * direction(B, G) - 2 * direction(A, line_intersection(Line(A, C), Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, F), E, center(d), midpoint(C, F) we get 180 == 2 * direction(midpoint(A, F), E) - 2 * direction(center(d), midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(A, F), E, midpoint(A, F) we get 180 == 2 * direction(F, midpoint(A, F)) - 2 * direction(E, midpoint(A, F)) mod 360
By perpendicular_direction_conditions_v0_r on E, A, line_intersection(Line(A, C), Line(B, G)), G we get 180 == 2 * direction(E, A) - 2 * direction(line_intersection(Line(A, C), Line(B, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on G, A, line_intersection(i, median(E, C, F)), A we get 180 == 2 * direction(G, A) - 2 * direction(line_intersection(i, median(E, C, F)), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, F), A, A, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(midpoint(A, F), A) - 2 * direction(A, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on center(d), line_intersection(i, median(E, C, F)), B, C we get 180 == 2 * direction(center(d), line_intersection(i, median(E, C, F))) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on E, A, B, line_intersection(Line(A, C), Line(B, G)) we get 180 == 2 * direction(E, A) - 2 * direction(B, line_intersection(Line(A, C), Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(i, median(E, C, F)), midpoint(C, F), center(d) we get 180 == 2 * direction(D, line_intersection(i, median(E, C, F))) - 2 * direction(midpoint(C, F), center(d)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, F), A, E, midpoint(A, F) we get 180 == 2 * direction(midpoint(A, F), A) - 2 * direction(E, midpoint(A, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), center(d), D, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(midpoint(C, F), center(d)) - 2 * direction(D, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), E, A, D we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), E) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(i, median(E, C, F)), G, A we get 180 == 2 * direction(A, line_intersection(i, median(E, C, F))) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(Line(A, C), Line(B, G)), E, A we get 180 == 2 * direction(G, line_intersection(Line(A, C), Line(B, G))) - 2 * direction(E, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, F), E, center(d), E we get 180 == 2 * direction(midpoint(A, F), E) - 2 * direction(center(d), E) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(i, median(E, C, F)), G, F we get 180 == 2 * direction(D, line_intersection(i, median(E, C, F))) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, F), F, E, midpoint(A, F) we get 180 == 2 * direction(midpoint(A, F), F) - 2 * direction(E, midpoint(A, F)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), center(d), F, C we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), center(d)) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(Line(A, C), Line(B, G)), B, G we get 180 == 2 * direction(A, line_intersection(Line(A, C), Line(B, G))) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on E, C, G, line_intersection(Line(A, C), Line(B, G)) we get 180 == 2 * direction(E, C) - 2 * direction(G, line_intersection(Line(A, C), Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on G, B, line_intersection(Line(A, C), Line(B, G)), C we get 180 == 2 * direction(G, B) - 2 * direction(line_intersection(Line(A, C), Line(B, G)), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), line_intersection(i, median(E, C, F)), B, F we get 180 == 2 * direction(midpoint(C, F), line_intersection(i, median(E, C, F))) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on A, D, E, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(A, D) - 2 * direction(E, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(i, median(E, C, F)), midpoint(C, F), C we get 180 == 2 * direction(E, line_intersection(i, median(E, C, F))) - 2 * direction(midpoint(C, F), C) mod 360
By perpendicular_direction_conditions_v0_r on F, C, E, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(F, C) - 2 * direction(E, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on G, B, E, line_intersection(Line(A, C), Line(B, G)) we get 180 == 2 * direction(G, B) - 2 * direction(E, line_intersection(Line(A, C), Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(i, median(E, C, F)), midpoint(C, F), center(d) we get 180 == 2 * direction(A, line_intersection(i, median(E, C, F))) - 2 * direction(midpoint(C, F), center(d)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), midpoint(C, F), C, midpoint(C, F) we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), midpoint(C, F)) - 2 * direction(C, midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(A, F), A, midpoint(A, F) we get 180 == 2 * direction(E, midpoint(A, F)) - 2 * direction(A, midpoint(A, F)) mod 360
By perpendicular_direction_conditions_v0_r on B, C, line_intersection(i, median(E, C, F)), midpoint(C, F) we get 180 == 2 * direction(B, C) - 2 * direction(line_intersection(i, median(E, C, F)), midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), C, line_intersection(i, median(E, C, F)), center(d) we get 180 == 2 * direction(midpoint(C, F), C) - 2 * direction(line_intersection(i, median(E, C, F)), center(d)) mod 360
By perpendicular_direction_conditions_v0_r on A, G, midpoint(A, F), E we get 180 == 2 * direction(A, G) - 2 * direction(midpoint(A, F), E) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(i, median(E, C, F)), F, midpoint(A, F) we get 180 == 2 * direction(A, line_intersection(i, median(E, C, F))) - 2 * direction(F, midpoint(A, F)) mod 360
By perpendicular_direction_conditions_v0_r on C, B, E, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(C, B) - 2 * direction(E, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(A, F), center(d), midpoint(C, F) we get 180 == 2 * direction(E, midpoint(A, F)) - 2 * direction(center(d), midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), B, line_intersection(i, median(E, C, F)), center(d) we get 180 == 2 * direction(midpoint(C, F), B) - 2 * direction(line_intersection(i, median(E, C, F)), center(d)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), midpoint(C, F), D, A we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), midpoint(C, F)) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), center(d), line_intersection(i, median(E, C, F)), A we get 180 == 2 * direction(midpoint(C, F), center(d)) - 2 * direction(line_intersection(i, median(E, C, F)), A) mod 360
By perpendicular_direction_conditions_v0_r on A, G, D, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(A, G) - 2 * direction(D, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on D, A, midpoint(C, F), line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(D, A) - 2 * direction(midpoint(C, F), line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(i, median(E, C, F)), A, G we get 180 == 2 * direction(D, line_intersection(i, median(E, C, F))) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), center(d), A, D we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), center(d)) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(A, F), midpoint(C, F), E we get 180 == 2 * direction(E, midpoint(A, F)) - 2 * direction(midpoint(C, F), E) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(C, F), midpoint(C, F), line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(C, midpoint(C, F)) - 2 * direction(midpoint(C, F), line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on A, D, center(d), line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(A, D) - 2 * direction(center(d), line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on B, F, center(d), line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(B, F) - 2 * direction(center(d), line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(i, median(E, C, F)), midpoint(A, F), A we get 180 == 2 * direction(A, line_intersection(i, median(E, C, F))) - 2 * direction(midpoint(A, F), A) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(Line(A, C), Line(B, G)), E, C we get 180 == 2 * direction(G, line_intersection(Line(A, C), Line(B, G))) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(i, median(E, C, F)), A, midpoint(A, F) we get 180 == 2 * direction(D, line_intersection(i, median(E, C, F))) - 2 * direction(A, midpoint(A, F)) mod 360
By perpendicular_direction_conditions_v0_r on F, G, midpoint(A, F), E we get 180 == 2 * direction(F, G) - 2 * direction(midpoint(A, F), E) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(A, F), E, midpoint(C, F) we get 180 == 2 * direction(E, midpoint(A, F)) - 2 * direction(E, midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, C), Line(B, G)), G, A, C we get 180 == 2 * direction(line_intersection(Line(A, C), Line(B, G)), G) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on D, A, line_intersection(i, median(E, C, F)), center(d) we get 180 == 2 * direction(D, A) - 2 * direction(line_intersection(i, median(E, C, F)), center(d)) mod 360
By perpendicular_direction_conditions_v0_r on E, center(d), line_intersection(i, median(E, C, F)), A we get 180 == 2 * direction(E, center(d)) - 2 * direction(line_intersection(i, median(E, C, F)), A) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(Line(A, C), Line(B, G)), C, A we get 180 == 2 * direction(G, line_intersection(Line(A, C), Line(B, G))) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), C, midpoint(C, F), line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(midpoint(C, F), C) - 2 * direction(midpoint(C, F), line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on F, C, line_intersection(i, median(E, C, F)), E we get 180 == 2 * direction(F, C) - 2 * direction(line_intersection(i, median(E, C, F)), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, F), E, E, midpoint(C, F) we get 180 == 2 * direction(midpoint(A, F), E) - 2 * direction(E, midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), E, C, midpoint(C, F) we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), E) - 2 * direction(C, midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on center(d), line_intersection(i, median(E, C, F)), A, D we get 180 == 2 * direction(center(d), line_intersection(i, median(E, C, F))) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on center(d), line_intersection(i, median(E, C, F)), C, B we get 180 == 2 * direction(center(d), line_intersection(i, median(E, C, F))) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(Line(A, C), Line(B, G)), G, B we get 180 == 2 * direction(C, line_intersection(Line(A, C), Line(B, G))) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on A, F, A, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(A, F) - 2 * direction(A, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on B, C, E, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(B, C) - 2 * direction(E, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, C), Line(B, G)), A, E, center(c) we get 180 == 2 * direction(line_intersection(Line(A, C), Line(B, G)), A) - 2 * direction(E, center(c)) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(C, F), center(d), line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(C, midpoint(C, F)) - 2 * direction(center(d), line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on center(d), midpoint(C, F), E, midpoint(A, F) we get 180 == 2 * direction(center(d), midpoint(C, F)) - 2 * direction(E, midpoint(A, F)) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(i, median(E, C, F)), midpoint(C, F), F we get 180 == 2 * direction(E, line_intersection(i, median(E, C, F))) - 2 * direction(midpoint(C, F), F) mod 360
By perpendicular_direction_conditions_v0_r on C, B, center(d), line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(C, B) - 2 * direction(center(d), line_intersection(i, median(E, C, F))) mod 360
By projection_definition on midpoint(C, F), E, median(E, A, F) we get E == projection(midpoint(C, F), median(E, A, F))
By perpendicular_direction_conditions_v0_r on G, line_intersection(Line(A, C), Line(B, G)), C, E we get 180 == 2 * direction(G, line_intersection(Line(A, C), Line(B, G))) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on F, A, line_intersection(i, median(E, C, F)), A we get 180 == 2 * direction(F, A) - 2 * direction(line_intersection(i, median(E, C, F)), A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), A, E, midpoint(C, F) we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), A) - 2 * direction(E, midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), E, B, C we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), E) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), B, line_intersection(i, median(E, C, F)), midpoint(C, F) we get 180 == 2 * direction(midpoint(C, F), B) - 2 * direction(line_intersection(i, median(E, C, F)), midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, F), E, midpoint(C, F), E we get 180 == 2 * direction(midpoint(A, F), E) - 2 * direction(midpoint(C, F), E) mod 360
By perpendicular_direction_conditions_v0_r on D, A, line_intersection(i, median(E, C, F)), midpoint(C, F) we get 180 == 2 * direction(D, A) - 2 * direction(line_intersection(i, median(E, C, F)), midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(A, F), F, A we get 180 == 2 * direction(E, midpoint(A, F)) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on F, A, E, midpoint(A, F) we get 180 == 2 * direction(F, A) - 2 * direction(E, midpoint(A, F)) mod 360
By perpendicular_direction_conditions_v0_r on center(d), midpoint(C, F), midpoint(A, F), E we get 180 == 2 * direction(center(d), midpoint(C, F)) - 2 * direction(midpoint(A, F), E) mod 360
By perpendicular_direction_conditions_v0_r on B, C, line_intersection(i, median(E, C, F)), center(d) we get 180 == 2 * direction(B, C) - 2 * direction(line_intersection(i, median(E, C, F)), center(d)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(A, F), A, F we get 180 == 2 * direction(E, midpoint(A, F)) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, C), Line(B, G)), B, A, C we get 180 == 2 * direction(line_intersection(Line(A, C), Line(B, G)), B) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on B, G, line_intersection(Line(A, C), Line(B, G)), A we get 180 == 2 * direction(B, G) - 2 * direction(line_intersection(Line(A, C), Line(B, G)), A) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(Line(A, C), Line(B, G)), G, B we get 180 == 2 * direction(E, line_intersection(Line(A, C), Line(B, G))) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), A, F, midpoint(A, F) we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), A) - 2 * direction(F, midpoint(A, F)) mod 360
By perpendicular_direction_conditions_v0_r on G, F, line_intersection(i, median(E, C, F)), D we get 180 == 2 * direction(G, F) - 2 * direction(line_intersection(i, median(E, C, F)), D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), D, F, G we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), D) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on center(d), E, E, midpoint(A, F) we get 180 == 2 * direction(center(d), E) - 2 * direction(E, midpoint(A, F)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), center(d), C, B we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), center(d)) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(Line(A, C), Line(B, G)), E, C we get 180 == 2 * direction(B, line_intersection(Line(A, C), Line(B, G))) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, F), A, line_intersection(i, median(E, C, F)), D we get 180 == 2 * direction(midpoint(A, F), A) - 2 * direction(line_intersection(i, median(E, C, F)), D) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(C, F), line_intersection(i, median(E, C, F)), D we get 180 == 2 * direction(E, midpoint(C, F)) - 2 * direction(line_intersection(i, median(E, C, F)), D) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(A, F), midpoint(A, F), A we get 180 == 2 * direction(E, midpoint(A, F)) - 2 * direction(midpoint(A, F), A) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(i, median(E, C, F)), F, A we get 180 == 2 * direction(D, line_intersection(i, median(E, C, F))) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), line_intersection(i, median(E, C, F)), D, A we get 180 == 2 * direction(midpoint(C, F), line_intersection(i, median(E, C, F))) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on G, B, line_intersection(Line(A, C), Line(B, G)), A we get 180 == 2 * direction(G, B) - 2 * direction(line_intersection(Line(A, C), Line(B, G)), A) mod 360
By perpendicular_direction_conditions_v0_r on E, center(d), midpoint(A, F), E we get 180 == 2 * direction(E, center(d)) - 2 * direction(midpoint(A, F), E) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(A, F), E, midpoint(A, F) we get 180 == 2 * direction(A, midpoint(A, F)) - 2 * direction(E, midpoint(A, F)) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(i, median(E, C, F)), C, F we get 180 == 2 * direction(E, line_intersection(i, median(E, C, F))) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on G, F, E, midpoint(A, F) we get 180 == 2 * direction(G, F) - 2 * direction(E, midpoint(A, F)) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(i, median(E, C, F)), center(d), midpoint(C, F) we get 180 == 2 * direction(D, line_intersection(i, median(E, C, F))) - 2 * direction(center(d), midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, C), Line(B, G)), G, C, A we get 180 == 2 * direction(line_intersection(Line(A, C), Line(B, G)), G) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), A, midpoint(C, F), center(d) we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), A) - 2 * direction(midpoint(C, F), center(d)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(C, F), E, midpoint(A, F) we get 180 == 2 * direction(E, midpoint(C, F)) - 2 * direction(E, midpoint(A, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), E, line_intersection(i, median(E, C, F)), D we get 180 == 2 * direction(midpoint(C, F), E) - 2 * direction(line_intersection(i, median(E, C, F)), D) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(A, F), midpoint(A, F), E we get 180 == 2 * direction(F, midpoint(A, F)) - 2 * direction(midpoint(A, F), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, F), E, G, F we get 180 == 2 * direction(midpoint(A, F), E) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(i, median(E, C, F)), A, F we get 180 == 2 * direction(A, line_intersection(i, median(E, C, F))) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(A, F), D, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(A, midpoint(A, F)) - 2 * direction(D, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), center(d), midpoint(C, F), F we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), center(d)) - 2 * direction(midpoint(C, F), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), line_intersection(i, median(E, C, F)), A, D we get 180 == 2 * direction(midpoint(C, F), line_intersection(i, median(E, C, F))) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), midpoint(C, F), F, C we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), midpoint(C, F)) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, C), Line(B, G)), A, G, B we get 180 == 2 * direction(line_intersection(Line(A, C), Line(B, G)), A) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on B, C, center(d), line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(B, C) - 2 * direction(center(d), line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on A, E, B, line_intersection(Line(A, C), Line(B, G)) we get 180 == 2 * direction(A, E) - 2 * direction(B, line_intersection(Line(A, C), Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on center(d), E, D, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(center(d), E) - 2 * direction(D, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(A, F), F, G we get 180 == 2 * direction(E, midpoint(A, F)) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on F, G, D, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(F, G) - 2 * direction(D, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(C, F), D, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(E, midpoint(C, F)) - 2 * direction(D, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on C, F, line_intersection(i, median(E, C, F)), E we get 180 == 2 * direction(C, F) - 2 * direction(line_intersection(i, median(E, C, F)), E) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(Line(A, C), Line(B, G)), B, G we get 180 == 2 * direction(E, line_intersection(Line(A, C), Line(B, G))) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on C, F, line_intersection(i, median(E, C, F)), midpoint(C, F) we get 180 == 2 * direction(C, F) - 2 * direction(line_intersection(i, median(E, C, F)), midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on G, F, D, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(G, F) - 2 * direction(D, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, C), Line(B, G)), A, B, G we get 180 == 2 * direction(line_intersection(Line(A, C), Line(B, G)), A) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), D, center(d), E we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), D) - 2 * direction(center(d), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), center(d), F, B we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), center(d)) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on A, G, line_intersection(i, median(E, C, F)), A we get 180 == 2 * direction(A, G) - 2 * direction(line_intersection(i, median(E, C, F)), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), F, E, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(midpoint(C, F), F) - 2 * direction(E, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on center(d), line_intersection(i, median(E, C, F)), B, midpoint(C, F) we get 180 == 2 * direction(center(d), line_intersection(i, median(E, C, F))) - 2 * direction(B, midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, C), Line(B, G)), G, C, E we get 180 == 2 * direction(line_intersection(Line(A, C), Line(B, G)), G) - 2 * direction(C, E) mod 360
By in_imply_collinear on orthocenter(B, C, E), line_intersection(i, median(E, C, F)), E we get collinear(E, orthocenter(B, C, E), line_intersection(i, median(E, C, F)))
By in_imply_collinear on orthocenter(B, C, E), midpoint(C, F), E we get collinear(E, midpoint(C, F), orthocenter(B, C, E))
By sas_anti_similarity on center(c), A, E, B, A, F we get anti_similar_triangles(A, B, F, A, center(c), E)
By in_imply_collinear on orthocenter(B, C, E), line_intersection(i, median(E, C, F)), midpoint(C, F) we get collinear(midpoint(C, F), orthocenter(B, C, E), line_intersection(i, median(E, C, F)))
By in_imply_collinear on orthocenter(B, C, E), B, G we get collinear(B, G, orthocenter(B, C, E))
By in_imply_collinear on orthocenter(B, C, E), line_intersection(Line(A, C), Line(B, G)), G we get collinear(G, orthocenter(B, C, E), line_intersection(Line(A, C), Line(B, G)))
By in_imply_collinear on orthocenter(B, E, G), A, C we get collinear(A, C, orthocenter(B, E, G))
By in_imply_collinear on orthocenter(B, E, G), A, E we get collinear(A, E, orthocenter(B, E, G))
By in_imply_collinear on orthocenter(B, C, E), line_intersection(Line(A, C), Line(B, G)), B we get collinear(B, orthocenter(B, C, E), line_intersection(Line(A, C), Line(B, G)))
By in_imply_collinear on orthocenter(B, C, E), line_intersection(i, median(E, C, F)), center(d) we get collinear(center(d), orthocenter(B, C, E), line_intersection(i, median(E, C, F)))
By in_imply_collinear on orthocenter(B, E, G), line_intersection(Line(A, C), Line(B, G)), A we get collinear(A, orthocenter(B, E, G), line_intersection(Line(A, C), Line(B, G)))
By in_imply_collinear on orthocenter(B, C, E), E, center(d) we get collinear(E, center(d), orthocenter(B, C, E))
By in_imply_collinear on orthocenter(B, C, E), midpoint(C, F), center(d) we get collinear(center(d), midpoint(C, F), orthocenter(B, C, E))
By in_imply_collinear on orthocenter(B, E, G), E, C we get collinear(C, E, orthocenter(B, E, G))
By internal_angle_bisector_definition_v0 on G, midpoint(A, F), G, A we get angle(G, A, midpoint(A, F)) == angle(midpoint(A, F), A, G) mod 360
By in_imply_collinear on orthocenter(B, E, G), E, line_intersection(Line(A, C), Line(B, G)) we get collinear(E, orthocenter(B, E, G), line_intersection(Line(A, C), Line(B, G)))
By in_imply_collinear on orthocenter(B, E, G), G, H we get collinear(G, H, orthocenter(B, E, G))
By sas_anti_similarity on B, G, F, E, F, midpoint(C, F) we get anti_similar_triangles(B, F, G, E, midpoint(C, F), F)
By in_imply_collinear on orthocenter(B, E, G), C, line_intersection(Line(A, C), Line(B, G)) we get collinear(C, orthocenter(B, E, G), line_intersection(Line(A, C), Line(B, G)))
By sas_anti_similarity on A, C, F, E, F, midpoint(C, F) we get anti_similar_triangles(A, C, F, E, F, midpoint(C, F))
By sas_anti_similarity on B, A, F, center(c), A, E we get anti_similar_triangles(A, B, F, A, center(c), E)
By sas_anti_similarity on midpoint(C, F), C, E, C, G, D we get anti_similar_triangles(C, D, G, midpoint(C, F), E, C)
By sas_similarity on center(c), C, E, B, A, F we get similar_triangles(A, B, F, C, center(c), E)
By sas_anti_similarity on F, C, A, midpoint(C, F), F, E we get anti_similar_triangles(A, C, F, E, F, midpoint(C, F))
By sas_anti_similarity on E, A, center(c), F, A, B we get anti_similar_triangles(A, B, F, A, center(c), E)
By external_angle_bisector_definition_v0 on C, midpoint(A, F), B, F we get 180 == angle(C, F, midpoint(A, F)) + angle(B, F, midpoint(A, F)) mod 360
By sas_similarity on E, F, midpoint(C, F), D, G, C we get similar_triangles(C, D, G, midpoint(C, F), E, F)
By reverse_direction on midpoint(C, F), B we get 180 == direction(midpoint(C, F), B) - direction(B, midpoint(C, F)) mod 360
By sas_anti_similarity on D, G, C, E, C, midpoint(C, F) we get anti_similar_triangles(C, D, G, midpoint(C, F), E, C)
By perpendicular_angle_conditions_v0 on midpoint(A, F), F, midpoint(C, F) we get angle(midpoint(A, F), F, midpoint(C, F)) == orientation(F, midpoint(C, F), midpoint(A, F)) mod 360
By sas_similarity on E, C, midpoint(C, F), A, C, F we get similar_triangles(A, C, F, E, C, midpoint(C, F))
By perpendicular_angle_conditions_v0 on B, F, midpoint(A, F) we get angle(B, F, midpoint(A, F)) == orientation(B, F, midpoint(A, F)) mod 360
By sas_similarity on F, C, G, E, C, center(c) we get similar_triangles(C, E, center(c), C, F, G)
By perpendicular_angle_conditions_v0 on midpoint(A, F), A, D we get angle(midpoint(A, F), A, D) == orientation(A, D, midpoint(A, F)) mod 360
By sas_anti_similarity on F, A, B, E, A, center(c) we get anti_similar_triangles(A, B, F, A, center(c), E)
By double_perpendicular_and_parallel_v0 on altitude(C, B, E), Line(B, D), Line(G, H) we get parallel(Line(G, H), altitude(C, B, E))
By sas_similarity on F, A, B, E, C, center(c) we get similar_triangles(A, B, F, C, center(c), E)
By sas_similarity on center(c), C, E, G, C, F we get similar_triangles(C, E, center(c), C, F, G)
By sas_similarity on E, C, center(c), F, A, B we get similar_triangles(A, B, F, C, center(c), E)
By perpendicular_angle_conditions_v0 on midpoint(A, F), F, C we get angle(midpoint(A, F), F, C) == orientation(C, midpoint(A, F), F) mod 360
By external_angle_bisector_definition_v0 on B, midpoint(A, F), midpoint(C, F), F we get 180 == angle(B, F, midpoint(A, F)) + angle(midpoint(C, F), F, midpoint(A, F)) mod 360
By reverse_direction on F, midpoint(A, F) we get 180 == direction(F, midpoint(A, F)) - direction(midpoint(A, F), F) mod 360
By sas_anti_similarity on midpoint(C, F), F, E, F, C, A we get anti_similar_triangles(A, C, F, E, F, midpoint(C, F))
By reverse_direction on A, midpoint(A, F) we get 180 == direction(A, midpoint(A, F)) - direction(midpoint(A, F), A) mod 360
By sas_anti_similarity on midpoint(C, F), F, E, F, G, B we get anti_similar_triangles(B, F, G, E, midpoint(C, F), F)
By sas_similarity on B, G, F, E, C, midpoint(C, F) we get similar_triangles(B, F, G, E, midpoint(C, F), C)
By sas_anti_similarity on G, C, F, center(c), A, E we get anti_similar_triangles(A, E, center(c), C, F, G)
By external_angle_bisector_definition_v0 on midpoint(C, F), midpoint(A, F), C, F we get 180 == angle(midpoint(C, F), F, midpoint(A, F)) + angle(C, F, midpoint(A, F)) mod 360
By sas_anti_similarity on center(c), A, E, G, C, F we get anti_similar_triangles(A, E, center(c), C, F, G)
By sas_similarity on A, C, F, E, C, midpoint(C, F) we get similar_triangles(A, C, F, E, C, midpoint(C, F))
By perpendicular_angle_conditions_v0 on C, F, midpoint(A, F) we get angle(C, F, midpoint(A, F)) == orientation(C, F, midpoint(A, F)) mod 360
By sas_anti_similarity on E, F, midpoint(C, F), A, C, F we get anti_similar_triangles(A, C, F, E, F, midpoint(C, F))
By sas_similarity on G, C, F, center(c), C, E we get similar_triangles(C, E, center(c), C, F, G)
By external_angle_bisector_definition_v0 on B, midpoint(A, F), B, F we get 180 == angle(B, F, midpoint(A, F)) + angle(B, F, midpoint(A, F)) mod 360
By sas_similarity on B, A, F, center(c), C, E we get similar_triangles(A, B, F, C, center(c), E)
By point_on_perpendicular_bisector on F, C, orthocenter(B, C, E), median(E, C, F) we get distance(C, orthocenter(B, C, E)) == distance(F, orthocenter(B, C, E))
By sas_similarity on midpoint(C, F), C, E, F, G, B we get similar_triangles(B, F, G, E, midpoint(C, F), C)
By sas_anti_similarity on E, C, midpoint(C, F), D, G, C we get anti_similar_triangles(C, D, G, midpoint(C, F), E, C)
By perpendicular_angle_conditions_v0 on D, A, midpoint(A, F) we get angle(D, A, midpoint(A, F)) == orientation(A, midpoint(A, F), D) mod 360
By perpendicular_angle_conditions_v0 on midpoint(C, F), F, midpoint(A, F) we get angle(midpoint(C, F), F, midpoint(A, F)) == orientation(F, midpoint(A, F), midpoint(C, F)) mod 360
By between_imply_segment_sum on B, H, E we get distance(B, E) == distance(B, H) + distance(E, H)
By sas_similarity on E, C, midpoint(C, F), B, G, F we get similar_triangles(B, F, G, E, midpoint(C, F), C)
By sas_anti_similarity on F, G, B, midpoint(C, F), F, E we get anti_similar_triangles(B, F, G, E, midpoint(C, F), F)
By external_angle_bisector_definition_v0 on C, midpoint(A, F), C, F we get 180 == angle(C, F, midpoint(A, F)) + angle(C, F, midpoint(A, F)) mod 360
By external_angle_bisector_definition_v0 on D, midpoint(A, F), D, A we get 180 == angle(D, A, midpoint(A, F)) + angle(D, A, midpoint(A, F)) mod 360
By internal_angle_bisector_definition_v0 on G, midpoint(A, F), G, F we get angle(G, F, midpoint(A, F)) == angle(midpoint(A, F), F, G) mod 360
By between_imply_segment_sum on B, H, D we get distance(B, D) == distance(B, H) + distance(D, H)
By sas_anti_similarity on E, A, center(c), F, C, G we get anti_similar_triangles(A, E, center(c), C, F, G)
By sas_similarity on C, G, D, midpoint(C, F), F, E we get similar_triangles(C, D, G, midpoint(C, F), E, F)
By sas_similarity on D, G, C, E, F, midpoint(C, F) we get similar_triangles(C, D, G, midpoint(C, F), E, F)
By sas_anti_similarity on F, C, G, E, A, center(c) we get anti_similar_triangles(A, E, center(c), C, F, G)
By reverse_direction on B, midpoint(C, F) we get 180 == direction(B, midpoint(C, F)) - direction(midpoint(C, F), B) mod 360
By reverse_direction on midpoint(A, F), A we get 180 == direction(midpoint(A, F), A) - direction(A, midpoint(A, F)) mod 360
By perpendicular_angle_conditions_v0 on midpoint(A, F), F, B we get angle(midpoint(A, F), F, B) == orientation(B, midpoint(A, F), F) mod 360
By external_angle_bisector_definition_v0 on midpoint(C, F), midpoint(A, F), midpoint(C, F), F we get 180 == angle(midpoint(C, F), F, midpoint(A, F)) + angle(midpoint(C, F), F, midpoint(A, F)) mod 360
By sas_similarity on midpoint(C, F), C, E, F, C, A we get similar_triangles(A, C, F, E, C, midpoint(C, F))
By sas_anti_similarity on C, G, D, midpoint(C, F), C, E we get anti_similar_triangles(C, D, G, midpoint(C, F), E, C)
By sas_similarity on F, C, A, midpoint(C, F), C, E we get similar_triangles(A, C, F, E, C, midpoint(C, F))
By sas_anti_similarity on E, F, midpoint(C, F), B, G, F we get anti_similar_triangles(B, F, G, E, midpoint(C, F), F)
By sas_similarity on F, G, B, midpoint(C, F), C, E we get similar_triangles(B, F, G, E, midpoint(C, F), C)
By sas_similarity on E, C, center(c), F, C, G we get similar_triangles(C, E, center(c), C, F, G)
By sas_similarity on midpoint(C, F), F, E, C, G, D we get similar_triangles(C, D, G, midpoint(C, F), E, F)
By reverse_direction on midpoint(A, F), F we get 180 == direction(midpoint(A, F), F) - direction(F, midpoint(A, F)) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(Line(A, C), Line(B, G)), line_intersection(Line(A, C), Line(B, G)), A we get 180 == 2 * direction(B, line_intersection(Line(A, C), Line(B, G))) - 2 * direction(line_intersection(Line(A, C), Line(B, G)), A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), center(d), line_intersection(i, median(E, C, F)), D we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), center(d)) - 2 * direction(line_intersection(i, median(E, C, F)), D) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(Line(A, C), Line(B, G)), A, line_intersection(Line(A, C), Line(B, G)) we get 180 == 2 * direction(B, line_intersection(Line(A, C), Line(B, G))) - 2 * direction(A, line_intersection(Line(A, C), Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, C), Line(B, G)), A, line_intersection(Line(A, C), Line(B, G)), G we get 180 == 2 * direction(line_intersection(Line(A, C), Line(B, G)), A) - 2 * direction(line_intersection(Line(A, C), Line(B, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(Line(A, C), Line(B, G)), E, line_intersection(Line(A, C), Line(B, G)) we get 180 == 2 * direction(G, line_intersection(Line(A, C), Line(B, G))) - 2 * direction(E, line_intersection(Line(A, C), Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), midpoint(C, F), D, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), midpoint(C, F)) - 2 * direction(D, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), line_intersection(i, median(E, C, F)), A, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(midpoint(C, F), line_intersection(i, median(E, C, F))) - 2 * direction(A, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(i, median(E, C, F)), E, midpoint(A, F) we get 180 == 2 * direction(E, line_intersection(i, median(E, C, F))) - 2 * direction(E, midpoint(A, F)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, C), Line(B, G)), C, G, line_intersection(Line(A, C), Line(B, G)) we get 180 == 2 * direction(line_intersection(Line(A, C), Line(B, G)), C) - 2 * direction(G, line_intersection(Line(A, C), Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), center(d), E, midpoint(A, F) we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), center(d)) - 2 * direction(E, midpoint(A, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, F), E, line_intersection(i, median(E, C, F)), center(d) we get 180 == 2 * direction(midpoint(A, F), E) - 2 * direction(line_intersection(i, median(E, C, F)), center(d)) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(Line(A, C), Line(B, G)), line_intersection(Line(A, C), Line(B, G)), G we get 180 == 2 * direction(A, line_intersection(Line(A, C), Line(B, G))) - 2 * direction(line_intersection(Line(A, C), Line(B, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(Line(A, C), Line(B, G)), line_intersection(Line(A, C), Line(B, G)), E we get 180 == 2 * direction(G, line_intersection(Line(A, C), Line(B, G))) - 2 * direction(line_intersection(Line(A, C), Line(B, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on center(d), line_intersection(i, median(E, C, F)), line_intersection(i, median(E, C, F)), D we get 180 == 2 * direction(center(d), line_intersection(i, median(E, C, F))) - 2 * direction(line_intersection(i, median(E, C, F)), D) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(Line(A, C), Line(B, G)), G, line_intersection(Line(A, C), Line(B, G)) we get 180 == 2 * direction(E, line_intersection(Line(A, C), Line(B, G))) - 2 * direction(G, line_intersection(Line(A, C), Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), midpoint(C, F), line_intersection(i, median(E, C, F)), A we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), midpoint(C, F)) - 2 * direction(line_intersection(i, median(E, C, F)), A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), D, line_intersection(i, median(E, C, F)), center(d) we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), D) - 2 * direction(line_intersection(i, median(E, C, F)), center(d)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(A, F), center(d), line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(E, midpoint(A, F)) - 2 * direction(center(d), line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, C), Line(B, G)), A, line_intersection(Line(A, C), Line(B, G)), B we get 180 == 2 * direction(line_intersection(Line(A, C), Line(B, G)), A) - 2 * direction(line_intersection(Line(A, C), Line(B, G)), B) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(Line(A, C), Line(B, G)), line_intersection(Line(A, C), Line(B, G)), B we get 180 == 2 * direction(A, line_intersection(Line(A, C), Line(B, G))) - 2 * direction(line_intersection(Line(A, C), Line(B, G)), B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), A, E, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), A) - 2 * direction(E, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, C), Line(B, G)), B, A, line_intersection(Line(A, C), Line(B, G)) we get 180 == 2 * direction(line_intersection(Line(A, C), Line(B, G)), B) - 2 * direction(A, line_intersection(Line(A, C), Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, C), Line(B, G)), E, B, line_intersection(Line(A, C), Line(B, G)) we get 180 == 2 * direction(line_intersection(Line(A, C), Line(B, G)), E) - 2 * direction(B, line_intersection(Line(A, C), Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, C), Line(B, G)), G, line_intersection(Line(A, C), Line(B, G)), C we get 180 == 2 * direction(line_intersection(Line(A, C), Line(B, G)), G) - 2 * direction(line_intersection(Line(A, C), Line(B, G)), C) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(A, F), line_intersection(i, median(E, C, F)), midpoint(C, F) we get 180 == 2 * direction(E, midpoint(A, F)) - 2 * direction(line_intersection(i, median(E, C, F)), midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(i, median(E, C, F)), line_intersection(i, median(E, C, F)), midpoint(C, F) we get 180 == 2 * direction(D, line_intersection(i, median(E, C, F))) - 2 * direction(line_intersection(i, median(E, C, F)), midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(Line(A, C), Line(B, G)), G, line_intersection(Line(A, C), Line(B, G)) we get 180 == 2 * direction(A, line_intersection(Line(A, C), Line(B, G))) - 2 * direction(G, line_intersection(Line(A, C), Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), D, line_intersection(i, median(E, C, F)), midpoint(C, F) we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), D) - 2 * direction(line_intersection(i, median(E, C, F)), midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), E, line_intersection(i, median(E, C, F)), D we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), E) - 2 * direction(line_intersection(i, median(E, C, F)), D) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(Line(A, C), Line(B, G)), B, line_intersection(Line(A, C), Line(B, G)) we get 180 == 2 * direction(C, line_intersection(Line(A, C), Line(B, G))) - 2 * direction(B, line_intersection(Line(A, C), Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), D, E, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), D) - 2 * direction(E, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on center(d), line_intersection(i, median(E, C, F)), line_intersection(i, median(E, C, F)), A we get 180 == 2 * direction(center(d), line_intersection(i, median(E, C, F))) - 2 * direction(line_intersection(i, median(E, C, F)), A) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(Line(A, C), Line(B, G)), A, line_intersection(Line(A, C), Line(B, G)) we get 180 == 2 * direction(G, line_intersection(Line(A, C), Line(B, G))) - 2 * direction(A, line_intersection(Line(A, C), Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, F), E, center(d), line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(midpoint(A, F), E) - 2 * direction(center(d), line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), A, line_intersection(i, median(E, C, F)), E we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), A) - 2 * direction(line_intersection(i, median(E, C, F)), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), midpoint(C, F), line_intersection(i, median(E, C, F)), D we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), midpoint(C, F)) - 2 * direction(line_intersection(i, median(E, C, F)), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, F), E, midpoint(C, F), line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(midpoint(A, F), E) - 2 * direction(midpoint(C, F), line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(A, F), line_intersection(i, median(E, C, F)), center(d) we get 180 == 2 * direction(E, midpoint(A, F)) - 2 * direction(line_intersection(i, median(E, C, F)), center(d)) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(Line(A, C), Line(B, G)), B, line_intersection(Line(A, C), Line(B, G)) we get 180 == 2 * direction(E, line_intersection(Line(A, C), Line(B, G))) - 2 * direction(B, line_intersection(Line(A, C), Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), line_intersection(i, median(E, C, F)), D, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(midpoint(C, F), line_intersection(i, median(E, C, F))) - 2 * direction(D, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), center(d), line_intersection(i, median(E, C, F)), A we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), center(d)) - 2 * direction(line_intersection(i, median(E, C, F)), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, F), E, line_intersection(i, median(E, C, F)), midpoint(C, F) we get 180 == 2 * direction(midpoint(A, F), E) - 2 * direction(line_intersection(i, median(E, C, F)), midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, F), E, line_intersection(i, median(E, C, F)), E we get 180 == 2 * direction(midpoint(A, F), E) - 2 * direction(line_intersection(i, median(E, C, F)), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, C), Line(B, G)), B, line_intersection(Line(A, C), Line(B, G)), E we get 180 == 2 * direction(line_intersection(Line(A, C), Line(B, G)), B) - 2 * direction(line_intersection(Line(A, C), Line(B, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), E, line_intersection(i, median(E, C, F)), A we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), E) - 2 * direction(line_intersection(i, median(E, C, F)), A) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(Line(A, C), Line(B, G)), line_intersection(Line(A, C), Line(B, G)), E we get 180 == 2 * direction(B, line_intersection(Line(A, C), Line(B, G))) - 2 * direction(line_intersection(Line(A, C), Line(B, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), E, A, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), E) - 2 * direction(A, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, C), Line(B, G)), G, A, line_intersection(Line(A, C), Line(B, G)) we get 180 == 2 * direction(line_intersection(Line(A, C), Line(B, G)), G) - 2 * direction(A, line_intersection(Line(A, C), Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, C), Line(B, G)), C, line_intersection(Line(A, C), Line(B, G)), B we get 180 == 2 * direction(line_intersection(Line(A, C), Line(B, G)), C) - 2 * direction(line_intersection(Line(A, C), Line(B, G)), B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), E, midpoint(A, F), E we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), E) - 2 * direction(midpoint(A, F), E) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(i, median(E, C, F)), midpoint(A, F), E we get 180 == 2 * direction(E, line_intersection(i, median(E, C, F))) - 2 * direction(midpoint(A, F), E) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(Line(A, C), Line(B, G)), line_intersection(Line(A, C), Line(B, G)), C we get 180 == 2 * direction(G, line_intersection(Line(A, C), Line(B, G))) - 2 * direction(line_intersection(Line(A, C), Line(B, G)), C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, C), Line(B, G)), G, line_intersection(Line(A, C), Line(B, G)), A we get 180 == 2 * direction(line_intersection(Line(A, C), Line(B, G)), G) - 2 * direction(line_intersection(Line(A, C), Line(B, G)), A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, C), Line(B, G)), B, C, line_intersection(Line(A, C), Line(B, G)) we get 180 == 2 * direction(line_intersection(Line(A, C), Line(B, G)), B) - 2 * direction(C, line_intersection(Line(A, C), Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), line_intersection(i, median(E, C, F)), line_intersection(i, median(E, C, F)), A we get 180 == 2 * direction(midpoint(C, F), line_intersection(i, median(E, C, F))) - 2 * direction(line_intersection(i, median(E, C, F)), A) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(A, F), E, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(E, midpoint(A, F)) - 2 * direction(E, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(i, median(E, C, F)), E, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(D, line_intersection(i, median(E, C, F))) - 2 * direction(E, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, C), Line(B, G)), G, E, line_intersection(Line(A, C), Line(B, G)) we get 180 == 2 * direction(line_intersection(Line(A, C), Line(B, G)), G) - 2 * direction(E, line_intersection(Line(A, C), Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), E, D, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), E) - 2 * direction(D, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, C), Line(B, G)), G, line_intersection(Line(A, C), Line(B, G)), E we get 180 == 2 * direction(line_intersection(Line(A, C), Line(B, G)), G) - 2 * direction(line_intersection(Line(A, C), Line(B, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(i, median(E, C, F)), line_intersection(i, median(E, C, F)), E we get 180 == 2 * direction(D, line_intersection(i, median(E, C, F))) - 2 * direction(line_intersection(i, median(E, C, F)), E) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(i, median(E, C, F)), center(d), line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(A, line_intersection(i, median(E, C, F))) - 2 * direction(center(d), line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(i, median(E, C, F)), midpoint(C, F), line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(A, line_intersection(i, median(E, C, F))) - 2 * direction(midpoint(C, F), line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, C), Line(B, G)), E, line_intersection(Line(A, C), Line(B, G)), G we get 180 == 2 * direction(line_intersection(Line(A, C), Line(B, G)), E) - 2 * direction(line_intersection(Line(A, C), Line(B, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), midpoint(C, F), E, midpoint(A, F) we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), midpoint(C, F)) - 2 * direction(E, midpoint(A, F)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), midpoint(C, F), A, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), midpoint(C, F)) - 2 * direction(A, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), A, center(d), line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), A) - 2 * direction(center(d), line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(i, median(E, C, F)), line_intersection(i, median(E, C, F)), midpoint(C, F) we get 180 == 2 * direction(A, line_intersection(i, median(E, C, F))) - 2 * direction(line_intersection(i, median(E, C, F)), midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), line_intersection(i, median(E, C, F)), midpoint(A, F), E we get 180 == 2 * direction(midpoint(C, F), line_intersection(i, median(E, C, F))) - 2 * direction(midpoint(A, F), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, C), Line(B, G)), A, B, line_intersection(Line(A, C), Line(B, G)) we get 180 == 2 * direction(line_intersection(Line(A, C), Line(B, G)), A) - 2 * direction(B, line_intersection(Line(A, C), Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(A, F), line_intersection(i, median(E, C, F)), E we get 180 == 2 * direction(E, midpoint(A, F)) - 2 * direction(line_intersection(i, median(E, C, F)), E) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(i, median(E, C, F)), line_intersection(i, median(E, C, F)), D we get 180 == 2 * direction(E, line_intersection(i, median(E, C, F))) - 2 * direction(line_intersection(i, median(E, C, F)), D) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(Line(A, C), Line(B, G)), E, line_intersection(Line(A, C), Line(B, G)) we get 180 == 2 * direction(B, line_intersection(Line(A, C), Line(B, G))) - 2 * direction(E, line_intersection(Line(A, C), Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), center(d), A, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), center(d)) - 2 * direction(A, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, C), Line(B, G)), B, line_intersection(Line(A, C), Line(B, G)), A we get 180 == 2 * direction(line_intersection(Line(A, C), Line(B, G)), B) - 2 * direction(line_intersection(Line(A, C), Line(B, G)), A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), A, line_intersection(i, median(E, C, F)), midpoint(C, F) we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), A) - 2 * direction(line_intersection(i, median(E, C, F)), midpoint(C, F)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), center(d), midpoint(A, F), E we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), center(d)) - 2 * direction(midpoint(A, F), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, C), Line(B, G)), C, line_intersection(Line(A, C), Line(B, G)), G we get 180 == 2 * direction(line_intersection(Line(A, C), Line(B, G)), C) - 2 * direction(line_intersection(Line(A, C), Line(B, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(Line(A, C), Line(B, G)), C, line_intersection(Line(A, C), Line(B, G)) we get 180 == 2 * direction(G, line_intersection(Line(A, C), Line(B, G))) - 2 * direction(C, line_intersection(Line(A, C), Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(Line(A, C), Line(B, G)), line_intersection(Line(A, C), Line(B, G)), A we get 180 == 2 * direction(G, line_intersection(Line(A, C), Line(B, G))) - 2 * direction(line_intersection(Line(A, C), Line(B, G)), A) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(Line(A, C), Line(B, G)), line_intersection(Line(A, C), Line(B, G)), G we get 180 == 2 * direction(E, line_intersection(Line(A, C), Line(B, G))) - 2 * direction(line_intersection(Line(A, C), Line(B, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(A, F), midpoint(C, F), line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(E, midpoint(A, F)) - 2 * direction(midpoint(C, F), line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, C), Line(B, G)), A, G, line_intersection(Line(A, C), Line(B, G)) we get 180 == 2 * direction(line_intersection(Line(A, C), Line(B, G)), A) - 2 * direction(G, line_intersection(Line(A, C), Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(i, median(E, C, F)), midpoint(C, F), line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(D, line_intersection(i, median(E, C, F))) - 2 * direction(midpoint(C, F), line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), midpoint(C, F), midpoint(A, F), E we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), midpoint(C, F)) - 2 * direction(midpoint(A, F), E) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(i, median(E, C, F)), A, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(E, line_intersection(i, median(E, C, F))) - 2 * direction(A, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), line_intersection(i, median(E, C, F)), E, midpoint(A, F) we get 180 == 2 * direction(midpoint(C, F), line_intersection(i, median(E, C, F))) - 2 * direction(E, midpoint(A, F)) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(i, median(E, C, F)), D, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(E, line_intersection(i, median(E, C, F))) - 2 * direction(D, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(Line(A, C), Line(B, G)), B, line_intersection(Line(A, C), Line(B, G)) we get 180 == 2 * direction(A, line_intersection(Line(A, C), Line(B, G))) - 2 * direction(B, line_intersection(Line(A, C), Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, F), line_intersection(i, median(E, C, F)), line_intersection(i, median(E, C, F)), D we get 180 == 2 * direction(midpoint(C, F), line_intersection(i, median(E, C, F))) - 2 * direction(line_intersection(i, median(E, C, F)), D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, C), Line(B, G)), E, G, line_intersection(Line(A, C), Line(B, G)) we get 180 == 2 * direction(line_intersection(Line(A, C), Line(B, G)), E) - 2 * direction(G, line_intersection(Line(A, C), Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(i, median(E, C, F)), center(d), line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(D, line_intersection(i, median(E, C, F))) - 2 * direction(center(d), line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), A, midpoint(C, F), line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), A) - 2 * direction(midpoint(C, F), line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on center(d), line_intersection(i, median(E, C, F)), D, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(center(d), line_intersection(i, median(E, C, F))) - 2 * direction(D, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(Line(A, C), Line(B, G)), line_intersection(Line(A, C), Line(B, G)), G we get 180 == 2 * direction(C, line_intersection(Line(A, C), Line(B, G))) - 2 * direction(line_intersection(Line(A, C), Line(B, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(i, median(E, C, F)), line_intersection(i, median(E, C, F)), center(d) we get 180 == 2 * direction(A, line_intersection(i, median(E, C, F))) - 2 * direction(line_intersection(i, median(E, C, F)), center(d)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, F), E, E, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(midpoint(A, F), E) - 2 * direction(E, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), D, line_intersection(i, median(E, C, F)), E we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), D) - 2 * direction(line_intersection(i, median(E, C, F)), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, C), Line(B, G)), C, B, line_intersection(Line(A, C), Line(B, G)) we get 180 == 2 * direction(line_intersection(Line(A, C), Line(B, G)), C) - 2 * direction(B, line_intersection(Line(A, C), Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(Line(A, C), Line(B, G)), line_intersection(Line(A, C), Line(B, G)), B we get 180 == 2 * direction(E, line_intersection(Line(A, C), Line(B, G))) - 2 * direction(line_intersection(Line(A, C), Line(B, G)), B) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(Line(A, C), Line(B, G)), C, line_intersection(Line(A, C), Line(B, G)) we get 180 == 2 * direction(B, line_intersection(Line(A, C), Line(B, G))) - 2 * direction(C, line_intersection(Line(A, C), Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, C), Line(B, G)), B, E, line_intersection(Line(A, C), Line(B, G)) we get 180 == 2 * direction(line_intersection(Line(A, C), Line(B, G)), B) - 2 * direction(E, line_intersection(Line(A, C), Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), D, midpoint(C, F), line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), D) - 2 * direction(midpoint(C, F), line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(Line(A, C), Line(B, G)), line_intersection(Line(A, C), Line(B, G)), C we get 180 == 2 * direction(B, line_intersection(Line(A, C), Line(B, G))) - 2 * direction(line_intersection(Line(A, C), Line(B, G)), C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), A, line_intersection(i, median(E, C, F)), center(d) we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), A) - 2 * direction(line_intersection(i, median(E, C, F)), center(d)) mod 360
By perpendicular_direction_conditions_v0_r on center(d), line_intersection(i, median(E, C, F)), A, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(center(d), line_intersection(i, median(E, C, F))) - 2 * direction(A, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), center(d), D, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), center(d)) - 2 * direction(D, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(i, median(E, C, F)), line_intersection(i, median(E, C, F)), A we get 180 == 2 * direction(E, line_intersection(i, median(E, C, F))) - 2 * direction(line_intersection(i, median(E, C, F)), A) mod 360
By collinear_definition on E, midpoint(C, F), line_intersection(i, median(E, C, F)) we get midpoint(C, F) in Line(E, line_intersection(i, median(E, C, F))), line_intersection(i, median(E, C, F)) in Line(E, midpoint(C, F)), Line(E, midpoint(C, F)) == Line(E, line_intersection(i, median(E, C, F))), 0 == 2 * angle(midpoint(C, F), E, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(Line(A, C), Line(B, G)), line_intersection(Line(A, C), Line(B, G)), B we get 180 == 2 * direction(C, line_intersection(Line(A, C), Line(B, G))) - 2 * direction(line_intersection(Line(A, C), Line(B, G)), B) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(i, median(E, C, F)), line_intersection(i, median(E, C, F)), E we get 180 == 2 * direction(A, line_intersection(i, median(E, C, F))) - 2 * direction(line_intersection(i, median(E, C, F)), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, C), Line(B, G)), B, line_intersection(Line(A, C), Line(B, G)), C we get 180 == 2 * direction(line_intersection(Line(A, C), Line(B, G)), B) - 2 * direction(line_intersection(Line(A, C), Line(B, G)), C) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(i, median(E, C, F)), line_intersection(i, median(E, C, F)), center(d) we get 180 == 2 * direction(D, line_intersection(i, median(E, C, F))) - 2 * direction(line_intersection(i, median(E, C, F)), center(d)) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(i, median(E, C, F)), E, line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(A, line_intersection(i, median(E, C, F))) - 2 * direction(E, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), D, center(d), line_intersection(i, median(E, C, F)) we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), D) - 2 * direction(center(d), line_intersection(i, median(E, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, median(E, C, F)), E, E, midpoint(A, F) we get 180 == 2 * direction(line_intersection(i, median(E, C, F)), E) - 2 * direction(E, midpoint(A, F)) mod 360
By external_angle_bisector_definition_v0_r on G, A, midpoint(A, F), F we get Line(A, F) == external_angle_bisector(G, F, midpoint(A, F))
By perpendicular_direction_conditions_v0_r on center(d), line_intersection(i, median(E, C, F)), midpoint(A, F), E we get 180 == 2 * direction(center(d), line_intersection(i, median(E, C, F))) - 2 * direction(midpoint(A, F), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, C), Line(B, G)), E, line_intersection(Line(A, C), Line(B, G)), B we get 180 == 2 * direction(line_intersection(Line(A, C), Line(B, G)), E) - 2 * direction(line_intersection(Line(A, C), Line(B, G)), B) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(Line(A, C), Line(B, G)), G, line_intersection(Line(A, C), Line(B, G)) we get 180 == 2 * direction(C, line_intersection(Line(A, C), Line(B, G))) - 2 * direction(G, line_intersection(Line(A, C), Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, C), Line(B, G)), G, C, line_intersection(Line(A, C), Line(B, G)) we get 180 == 2 * direction(line_intersection(Line(A, C), Line(B, G)), G) - 2 * direction(C, line_intersection(Line(A, C), Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on center(d), line_intersection(i, median(E, C, F)), E, midpoint(A, F) we get 180 == 2 * direction(center(d), line_intersection(i, median(E, C, F))) - 2 * direction(E, midpoint(A, F)) mod 360
By external_angle_bisector_definition_v0_r on E, D, B, H we get Line(D, H) == external_angle_bisector(B, H, E)
By external_angle_bisector_definition_v0_r on B, G, B, H we get Line(G, H) == external_angle_bisector(B, H, B)
By external_angle_bisector_definition_v0 on G, line_intersection(i, median(E, C, F)), F, A we get 180 == angle(G, A, line_intersection(i, median(E, C, F))) + angle(F, A, line_intersection(i, median(E, C, F))) mod 360
By anti_similar_triangle_basic_properties on midpoint(C, F), F, E, midpoint(C, F), C, E we get angle(midpoint(C, F), F, E) == 0 - angle(midpoint(C, F), C, E) mod 360, angle(F, E, midpoint(C, F)) == 0 - angle(C, E, midpoint(C, F)) mod 360, angle(E, midpoint(C, F), F) == 0 - angle(E, midpoint(C, F), C) mod 360, log(distance(C, midpoint(C, F))) + log(distance(E, F)) == log(distance(F, midpoint(C, F))) + log(distance(C, E)), log(distance(C, E)) + log(distance(E, midpoint(C, F))) == log(distance(E, F)) + log(distance(E, midpoint(C, F))), log(distance(E, midpoint(C, F))) + log(distance(C, midpoint(C, F))) == log(distance(E, midpoint(C, F))) + log(distance(F, midpoint(C, F)))
By perpendicular_angle_conditions_v0 on midpoint(C, F), E, midpoint(A, F) we get angle(midpoint(C, F), E, midpoint(A, F)) == orientation(E, midpoint(A, F), midpoint(C, F)) mod 360
By external_angle_bisector_definition_v0_r on B, E, B, midpoint(C, F) we get Line(E, midpoint(C, F)) == external_angle_bisector(B, midpoint(C, F), B)
By power_of_a_point_on_circle on C, Circle(B, C, H) we get 0 == power_of_a_point(C, Circle(B, C, H))
By perpendicular_angle_conditions_v0 on line_intersection(i, median(E, C, F)), A, midpoint(A, F) we get angle(line_intersection(i, median(E, C, F)), A, midpoint(A, F)) == orientation(A, midpoint(A, F), line_intersection(i, median(E, C, F))) mod 360
By perpendicular_angle_conditions_v0 on midpoint(A, F), A, line_intersection(i, median(E, C, F)) we get angle(midpoint(A, F), A, line_intersection(i, median(E, C, F))) == orientation(A, line_intersection(i, median(E, C, F)), midpoint(A, F)) mod 360
By internal_angle_bisector_definition_v0_r on B, E, B, H we get Line(E, H) == internal_angle_bisector(B, H, B)
By power_of_a_point_in_circle on F, Circle(B, F, H) we get 0 == power_of_a_point(F, Circle(B, F, H))
By power_of_a_point_on_circle on B, Circle(A, B, H) we get 0 == power_of_a_point(B, Circle(A, B, H))
By collinear_definition on A, C, line_intersection(Line(A, C), Line(B, G)) we get C in Line(A, line_intersection(Line(A, C), Line(B, G))), line_intersection(Line(A, C), Line(B, G)) in Line(A, C), Line(A, C) == Line(A, line_intersection(Line(A, C), Line(B, G))), 0 == 2 * angle(C, A, line_intersection(Line(A, C), Line(B, G))) mod 360
By external_angle_bisector_definition_v0_r on F, B, C, midpoint(C, F) we get Line(B, midpoint(C, F)) == external_angle_bisector(C, midpoint(C, F), F)
By perpendicular_angle_conditions_v0 on line_intersection(i, median(E, C, F)), A, F we get angle(line_intersection(i, median(E, C, F)), A, F) == orientation(A, F, line_intersection(i, median(E, C, F))) mod 360
By reverse_direction on E, projection(C, f) we get 180 == direction(E, projection(C, f)) - direction(projection(C, f), E) mod 360
By power_of_a_point_on_circle on H, Circle(B, F, H) we get 0 == power_of_a_point(H, Circle(B, F, H))
By radical_axis_definition_v0_r on C, d, Circle(A, C, projection(C, f)) we get C in radical_axis(d, Circle(A, C, projection(C, f)))
By anti_similar_triangle_basic_properties on F, midpoint(C, F), center(d), C, midpoint(C, F), center(d) we get angle(F, midpoint(C, F), center(d)) == 0 - angle(C, midpoint(C, F), center(d)) mod 360, angle(midpoint(C, F), center(d), F) == 0 - angle(midpoint(C, F), center(d), C) mod 360, angle(center(d), F, midpoint(C, F)) == 0 - angle(center(d), C, midpoint(C, F)) mod 360, log(distance(C, midpoint(C, F))) + log(distance(center(d), midpoint(C, F))) == log(distance(F, midpoint(C, F))) + log(distance(center(d), midpoint(C, F))), log(distance(center(d), midpoint(C, F))) + log(distance(C, center(d))) == log(distance(center(d), midpoint(C, F))) + log(distance(F, center(d))), log(distance(C, center(d))) + log(distance(F, midpoint(C, F))) == log(distance(F, center(d))) + log(distance(C, midpoint(C, F)))
By anti_similar_triangle_basic_properties on E, center(c), C, E, center(c), A we get angle(E, center(c), C) == 0 - angle(E, center(c), A) mod 360, angle(center(c), C, E) == 0 - angle(center(c), A, E) mod 360, angle(C, E, center(c)) == 0 - angle(A, E, center(c)) mod 360, log(distance(E, center(c))) + log(distance(A, center(c))) == log(distance(E, center(c))) + log(distance(C, center(c))), log(distance(A, center(c))) + log(distance(C, E)) == log(distance(C, center(c))) + log(distance(A, E)), log(distance(A, E)) + log(distance(E, center(c))) == log(distance(C, E)) + log(distance(E, center(c)))
By internal_angle_bisector_definition_v0_r on E, G, B, H we get Line(G, H) == internal_angle_bisector(B, H, E)
By internal_angle_bisector_definition_v0 on F, midpoint(A, F), A, E we get angle(F, E, midpoint(A, F)) == angle(midpoint(A, F), E, A) mod 360
By power_of_a_point_on_circle on B, Circle(B, C, H) we get 0 == power_of_a_point(B, Circle(B, C, H))
By internal_angle_bisector_definition_v0 on E, line_intersection(Line(A, C), Line(B, G)), E, C we get angle(E, C, line_intersection(Line(A, C), Line(B, G))) == angle(line_intersection(Line(A, C), Line(B, G)), C, E) mod 360
By perpendicular_angle_conditions_v0 on F, A, line_intersection(i, median(E, C, F)) we get angle(F, A, line_intersection(i, median(E, C, F))) == orientation(A, line_intersection(i, median(E, C, F)), F) mod 360
By collinear_definition on C, A, line_intersection(Line(A, C), Line(B, G)) we get A in Line(C, line_intersection(Line(A, C), Line(B, G))), line_intersection(Line(A, C), Line(B, G)) in Line(A, C), Line(A, C) == Line(C, line_intersection(Line(A, C), Line(B, G))), 0 == 2 * angle(A, C, line_intersection(Line(A, C), Line(B, G))) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(A, F), F, midpoint(A, F), A we get Line(A, F) == internal_angle_bisector(midpoint(A, F), A, midpoint(A, F))
By internal_angle_bisector_definition_v0_r on E, D, H, B we get Line(B, D) == internal_angle_bisector(E, B, H)
By perpendicular_angle_conditions_v0 on line_intersection(i, median(E, C, F)), midpoint(C, F), F we get angle(line_intersection(i, median(E, C, F)), midpoint(C, F), F) == orientation(F, line_intersection(i, median(E, C, F)), midpoint(C, F)) mod 360
By collinear_definition on A, line_intersection(Line(A, C), Line(B, G)), C we get line_intersection(Line(A, C), Line(B, G)) in Line(A, C), C in Line(A, line_intersection(Line(A, C), Line(B, G))), Line(A, C) == Line(A, line_intersection(Line(A, C), Line(B, G))), 0 == 2 * angle(line_intersection(Line(A, C), Line(B, G)), A, C) mod 360
By collinear_definition on C, line_intersection(Line(A, C), Line(B, G)), A we get line_intersection(Line(A, C), Line(B, G)) in Line(A, C), A in Line(C, line_intersection(Line(A, C), Line(B, G))), Line(A, C) == Line(C, line_intersection(Line(A, C), Line(B, G))), 0 == 2 * angle(line_intersection(Line(A, C), Line(B, G)), C, A) mod 360
By power_of_a_point_in_circle on H, Circle(A, B, H) we get 0 == power_of_a_point(H, Circle(A, B, H))
By perpendicular_angle_conditions_v0 on center(c), E, line_intersection(Line(A, C), Line(B, G)) we get angle(center(c), E, line_intersection(Line(A, C), Line(B, G))) == orientation(E, line_intersection(Line(A, C), Line(B, G)), center(c)) mod 360
By isosceles_triangle_properties on E, A, projection(C, f) we get distance(A, E) == distance(E, projection(C, f)), angle(A, projection(C, f), E) == angle(E, A, projection(C, f)) mod 360
By external_angle_bisector_definition_v0 on center(c), line_intersection(Line(A, C), Line(B, G)), center(c), E we get 180 == angle(center(c), E, line_intersection(Line(A, C), Line(B, G))) + angle(center(c), E, line_intersection(Line(A, C), Line(B, G))) mod 360
By external_angle_bisector_definition_v0_r on B, center(d), B, midpoint(C, F) we get Line(center(d), midpoint(C, F)) == external_angle_bisector(B, midpoint(C, F), B)
By collinear_definition on E, A, line_intersection(Line(A, C), Line(B, G)) we get A in Line(E, line_intersection(Line(A, C), Line(B, G))), line_intersection(Line(A, C), Line(B, G)) in Line(A, E), Line(A, E) == Line(E, line_intersection(Line(A, C), Line(B, G))), 0 == 2 * angle(A, E, line_intersection(Line(A, C), Line(B, G))) mod 360
By perpendicular_angle_conditions_v0 on F, midpoint(C, F), line_intersection(i, median(E, C, F)) we get angle(F, midpoint(C, F), line_intersection(i, median(E, C, F))) == orientation(F, midpoint(C, F), line_intersection(i, median(E, C, F))) mod 360
By internal_angle_bisector_definition_v0_r on D, B, E, H we get Line(B, H) == internal_angle_bisector(D, H, E)
By collinear_definition on A, D, line_intersection(i, median(E, C, F)) we get D in Line(A, line_intersection(i, median(E, C, F))), line_intersection(i, median(E, C, F)) in Line(A, D), Line(A, D) == Line(A, line_intersection(i, median(E, C, F))), 0 == 2 * angle(D, A, line_intersection(i, median(E, C, F))) mod 360
By external_angle_bisector_definition_v0_r on D, E, B, H we get Line(E, H) == external_angle_bisector(B, H, D)
By internal_angle_bisector_definition_v0 on C, line_intersection(Line(A, C), Line(B, G)), C, A we get angle(C, A, line_intersection(Line(A, C), Line(B, G))) == angle(line_intersection(Line(A, C), Line(B, G)), A, C) mod 360
By internal_angle_bisector_definition_v0 on F, line_intersection(i, median(E, C, F)), C, midpoint(C, F) we get angle(F, midpoint(C, F), line_intersection(i, median(E, C, F))) == angle(line_intersection(i, median(E, C, F)), midpoint(C, F), C) mod 360
By isosceles_triangle_properties on E, projection(C, f), C we get distance(C, E) == distance(E, projection(C, f)), angle(E, projection(C, f), C) == angle(projection(C, f), C, E) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(C, F), C, midpoint(C, F), B we get Line(B, C) == internal_angle_bisector(midpoint(C, F), B, midpoint(C, F))
By internal_angle_bisector_definition_v0 on F, line_intersection(i, median(E, C, F)), C, center(d) we get angle(F, center(d), line_intersection(i, median(E, C, F))) == angle(line_intersection(i, median(E, C, F)), center(d), C) mod 360
By internal_angle_bisector_definition_v0 on A, line_intersection(Line(A, C), Line(B, G)), A, E we get angle(A, E, line_intersection(Line(A, C), Line(B, G))) == angle(line_intersection(Line(A, C), Line(B, G)), E, A) mod 360
By collinear_definition on D, line_intersection(i, median(E, C, F)), A we get line_intersection(i, median(E, C, F)) in Line(A, D), A in Line(D, line_intersection(i, median(E, C, F))), Line(A, D) == Line(D, line_intersection(i, median(E, C, F))), 0 == 2 * angle(line_intersection(i, median(E, C, F)), D, A) mod 360
By external_angle_bisector_definition_v0 on F, line_intersection(i, median(E, C, F)), F, midpoint(C, F) we get 180 == angle(F, midpoint(C, F), line_intersection(i, median(E, C, F))) + angle(F, midpoint(C, F), line_intersection(i, median(E, C, F))) mod 360
By external_angle_bisector_definition_v0 on C, line_intersection(i, median(E, C, F)), C, midpoint(C, F) we get 180 == angle(C, midpoint(C, F), line_intersection(i, median(E, C, F))) + angle(C, midpoint(C, F), line_intersection(i, median(E, C, F))) mod 360
By internal_angle_bisector_definition_v0 on C, line_intersection(i, median(E, C, F)), F, center(d) we get angle(C, center(d), line_intersection(i, median(E, C, F))) == angle(line_intersection(i, median(E, C, F)), center(d), F) mod 360
By internal_angle_bisector_definition_v0_r on E, H, D, B we get Line(B, H) == internal_angle_bisector(D, B, E)
By collinear_definition on center(d), line_intersection(i, median(E, C, F)), E we get line_intersection(i, median(E, C, F)) in Line(E, center(d)), E in Line(center(d), line_intersection(i, median(E, C, F))), Line(E, center(d)) == Line(center(d), line_intersection(i, median(E, C, F))), 0 == 2 * angle(line_intersection(i, median(E, C, F)), center(d), E) mod 360
By perpendicular_angle_conditions_v0 on line_intersection(Line(A, C), Line(B, G)), E, center(c) we get angle(line_intersection(Line(A, C), Line(B, G)), E, center(c)) == orientation(E, center(c), line_intersection(Line(A, C), Line(B, G))) mod 360
By internal_angle_bisector_definition_v0 on A, line_intersection(Line(A, C), Line(B, G)), A, C we get angle(A, C, line_intersection(Line(A, C), Line(B, G))) == angle(line_intersection(Line(A, C), Line(B, G)), C, A) mod 360
By radical_axis_definition_v0 on line_intersection(Line(A, C), Line(B, G)), Circle(A, C, projection(C, f)), c we get power_of_a_point(line_intersection(Line(A, C), Line(B, G)), c) == power_of_a_point(line_intersection(Line(A, C), Line(B, G)), Circle(A, C, projection(C, f)))
By internal_angle_bisector_definition_v0_r on midpoint(C, F), F, midpoint(C, F), B we get Line(B, F) == internal_angle_bisector(midpoint(C, F), B, midpoint(C, F))
By collinear_definition on E, line_intersection(i, median(E, C, F)), center(d) we get line_intersection(i, median(E, C, F)) in Line(E, center(d)), center(d) in Line(E, line_intersection(i, median(E, C, F))), Line(E, center(d)) == Line(E, line_intersection(i, median(E, C, F))), 0 == 2 * angle(line_intersection(i, median(E, C, F)), E, center(d)) mod 360
By internal_angle_bisector_definition_v0 on midpoint(C, F), line_intersection(i, median(E, C, F)), midpoint(C, F), E we get angle(line_intersection(i, median(E, C, F)), E, midpoint(C, F)) == angle(midpoint(C, F), E, line_intersection(i, median(E, C, F))) mod 360
By internal_angle_bisector_definition_v0_r on F, midpoint(C, F), C, B we get internal_angle_bisector(C, B, F) == Line(B, midpoint(C, F))
By internal_angle_bisector_definition_v0 on F, line_intersection(i, median(E, C, F)), C, E we get angle(F, E, line_intersection(i, median(E, C, F))) == angle(line_intersection(i, median(E, C, F)), E, C) mod 360
By internal_angle_bisector_definition_v0_r on B, F, B, midpoint(C, F) we get Line(F, midpoint(C, F)) == internal_angle_bisector(B, midpoint(C, F), B)
By internal_angle_bisector_definition_v0_r on midpoint(A, F), F, G, A we get Line(A, F) == internal_angle_bisector(G, A, midpoint(A, F))
By collinear_definition on G, line_intersection(Line(A, C), Line(B, G)), B we get line_intersection(Line(A, C), Line(B, G)) in Line(B, G), B in Line(G, line_intersection(Line(A, C), Line(B, G))), Line(B, G) == Line(G, line_intersection(Line(A, C), Line(B, G))), 0 == 2 * angle(line_intersection(Line(A, C), Line(B, G)), G, B) mod 360
By altitude_definition on C, B, D, altitude(C, B, E) we get altitude(C, B, D) == altitude(C, B, E)
By internal_angle_bisector_definition_v0_r on D, G, B, H we get Line(G, H) == internal_angle_bisector(B, H, D)
By power_of_a_point_on_circle on A, Circle(A, B, H) we get 0 == power_of_a_point(A, Circle(A, B, H))
By collinear_definition on center(d), midpoint(C, F), line_intersection(i, median(E, C, F)) we get midpoint(C, F) in Line(center(d), line_intersection(i, median(E, C, F))), line_intersection(i, median(E, C, F)) in Line(center(d), midpoint(C, F)), Line(center(d), midpoint(C, F)) == Line(center(d), line_intersection(i, median(E, C, F))), 0 == 2 * angle(midpoint(C, F), center(d), line_intersection(i, median(E, C, F))) mod 360
By draw_point_of_tangency on Line(A, C), Circle(A, B, H) we get exists(line_circle_tangent_point(Line(A, C), Circle(A, B, H)))
By collinear_definition on A, line_intersection(i, median(E, C, F)), D we get line_intersection(i, median(E, C, F)) in Line(A, D), D in Line(A, line_intersection(i, median(E, C, F))), Line(A, D) == Line(A, line_intersection(i, median(E, C, F))), 0 == 2 * angle(line_intersection(i, median(E, C, F)), A, D) mod 360
By perpendicular_angle_conditions_v0 on C, midpoint(C, F), line_intersection(i, median(E, C, F)) we get angle(C, midpoint(C, F), line_intersection(i, median(E, C, F))) == orientation(C, midpoint(C, F), line_intersection(i, median(E, C, F))) mod 360
By power_of_a_point_on_circle on H, Circle(B, C, H) we get 0 == power_of_a_point(H, Circle(B, C, H))
By sas_anti_congruence on projection(C, f), E, C, C, E, projection(C, f) we get anti_congruent_triangles(C, E, projection(C, f), projection(C, f), E, C)
By internal_angle_bisector_definition_v0 on center(d), line_intersection(i, median(E, C, F)), center(d), midpoint(C, F) we get angle(center(d), midpoint(C, F), line_intersection(i, median(E, C, F))) == angle(line_intersection(i, median(E, C, F)), midpoint(C, F), center(d)) mod 360
By perpendicular_angle_conditions_v0 on line_intersection(i, median(E, C, F)), A, G we get angle(line_intersection(i, median(E, C, F)), A, G) == orientation(A, G, line_intersection(i, median(E, C, F))) mod 360
By internal_angle_bisector_definition_v0 on center(d), line_intersection(i, median(E, C, F)), center(d), E we get angle(center(d), E, line_intersection(i, median(E, C, F))) == angle(line_intersection(i, median(E, C, F)), E, center(d)) mod 360
By perpendicular_lines_draw_intersection on Line(B, D), altitude(C, B, E) we get exists(line_intersection(Line(B, D), altitude(C, B, E)))
By internal_angle_bisector_definition_v0 on E, line_intersection(Line(A, C), Line(B, G)), E, A we get angle(E, A, line_intersection(Line(A, C), Line(B, G))) == angle(line_intersection(Line(A, C), Line(B, G)), A, E) mod 360
By collinear_definition on E, C, line_intersection(Line(A, C), Line(B, G)) we get C in Line(E, line_intersection(Line(A, C), Line(B, G))), line_intersection(Line(A, C), Line(B, G)) in Line(C, E), Line(C, E) == Line(E, line_intersection(Line(A, C), Line(B, G))), 0 == 2 * angle(C, E, line_intersection(Line(A, C), Line(B, G))) mod 360
By collinear_definition on G, B, line_intersection(Line(A, C), Line(B, G)) we get B in Line(G, line_intersection(Line(A, C), Line(B, G))), line_intersection(Line(A, C), Line(B, G)) in Line(B, G), Line(B, G) == Line(G, line_intersection(Line(A, C), Line(B, G))), 0 == 2 * angle(B, G, line_intersection(Line(A, C), Line(B, G))) mod 360
By sas_anti_congruence on A, E, projection(C, f), projection(C, f), E, A we get anti_congruent_triangles(A, E, projection(C, f), projection(C, f), E, A)
By isosceles_triangle_properties on E, C, projection(C, f) we get distance(C, E) == distance(E, projection(C, f)), angle(C, projection(C, f), E) == angle(E, C, projection(C, f)) mod 360
By internal_angle_bisector_definition_v0_r on A, F, A, midpoint(A, F) we get Line(F, midpoint(A, F)) == internal_angle_bisector(A, midpoint(A, F), A)
By power_of_a_point_in_circle on B, Circle(B, F, H) we get 0 == power_of_a_point(B, Circle(B, F, H))
By perpendicular_angle_conditions_v0 on center(d), E, midpoint(A, F) we get angle(center(d), E, midpoint(A, F)) == orientation(E, midpoint(A, F), center(d)) mod 360
By internal_angle_bisector_definition_v0_r on B, C, B, midpoint(C, F) we get Line(C, midpoint(C, F)) == internal_angle_bisector(B, midpoint(C, F), B)
By internal_angle_bisector_definition_v0_r on H, E, D, B we get Line(B, E) == internal_angle_bisector(D, B, H)
By collinear_definition on A, E, line_intersection(Line(A, C), Line(B, G)) we get E in Line(A, line_intersection(Line(A, C), Line(B, G))), line_intersection(Line(A, C), Line(B, G)) in Line(A, E), Line(A, E) == Line(A, line_intersection(Line(A, C), Line(B, G))), 0 == 2 * angle(E, A, line_intersection(Line(A, C), Line(B, G))) mod 360
By collinear_definition on E, center(d), line_intersection(i, median(E, C, F)) we get center(d) in Line(E, line_intersection(i, median(E, C, F))), line_intersection(i, median(E, C, F)) in Line(E, center(d)), Line(E, center(d)) == Line(E, line_intersection(i, median(E, C, F))), 0 == 2 * angle(center(d), E, line_intersection(i, median(E, C, F))) mod 360
By internal_angle_bisector_definition_v0 on E, line_intersection(i, median(E, C, F)), E, midpoint(C, F) we get angle(E, midpoint(C, F), line_intersection(i, median(E, C, F))) == angle(line_intersection(i, median(E, C, F)), midpoint(C, F), E) mod 360
By internal_angle_bisector_definition_v0_r on H, E, H, B we get Line(B, E) == internal_angle_bisector(H, B, H)
By internal_angle_bisector_definition_v0 on C, line_intersection(i, median(E, C, F)), F, midpoint(C, F) we get angle(C, midpoint(C, F), line_intersection(i, median(E, C, F))) == angle(line_intersection(i, median(E, C, F)), midpoint(C, F), F) mod 360
By collinear_definition on E, line_intersection(i, median(E, C, F)), midpoint(C, F) we get line_intersection(i, median(E, C, F)) in Line(E, midpoint(C, F)), midpoint(C, F) in Line(E, line_intersection(i, median(E, C, F))), Line(E, midpoint(C, F)) == Line(E, line_intersection(i, median(E, C, F))), 0 == 2 * angle(line_intersection(i, median(E, C, F)), E, midpoint(C, F)) mod 360
By collinear_definition on C, line_intersection(Line(A, C), Line(B, G)), E we get line_intersection(Line(A, C), Line(B, G)) in Line(C, E), E in Line(C, line_intersection(Line(A, C), Line(B, G))), Line(C, E) == Line(C, line_intersection(Line(A, C), Line(B, G))), 0 == 2 * angle(line_intersection(Line(A, C), Line(B, G)), C, E) mod 360
By collinear_definition on midpoint(C, F), center(d), line_intersection(i, median(E, C, F)) we get center(d) in Line(midpoint(C, F), line_intersection(i, median(E, C, F))), line_intersection(i, median(E, C, F)) in Line(center(d), midpoint(C, F)), Line(center(d), midpoint(C, F)) == Line(midpoint(C, F), line_intersection(i, median(E, C, F))), 0 == 2 * angle(center(d), midpoint(C, F), line_intersection(i, median(E, C, F))) mod 360
By internal_angle_bisector_definition_v0_r on H, D, H, B we get Line(B, D) == internal_angle_bisector(H, B, H)
By perpendicular_angle_conditions_v0 on midpoint(A, F), E, center(d) we get angle(midpoint(A, F), E, center(d)) == orientation(E, center(d), midpoint(A, F)) mod 360
By external_angle_bisector_definition_v0 on G, line_intersection(i, median(E, C, F)), G, A we get 180 == angle(G, A, line_intersection(i, median(E, C, F))) + angle(G, A, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_angle_conditions_v0 on line_intersection(i, median(E, C, F)), midpoint(C, F), C we get angle(line_intersection(i, median(E, C, F)), midpoint(C, F), C) == orientation(C, line_intersection(i, median(E, C, F)), midpoint(C, F)) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(A, F), A, midpoint(A, F), F we get Line(A, F) == internal_angle_bisector(midpoint(A, F), F, midpoint(A, F))
By perpendicular_angle_conditions_v0 on F, midpoint(A, F), E we get angle(F, midpoint(A, F), E) == orientation(E, F, midpoint(A, F)) mod 360
By perpendicular_angle_conditions_v0 on E, midpoint(A, F), F we get angle(E, midpoint(A, F), F) == orientation(E, midpoint(A, F), F) mod 360
By internal_angle_bisector_definition_v0 on A, midpoint(A, F), F, E we get angle(A, E, midpoint(A, F)) == angle(midpoint(A, F), E, F) mod 360
By collinear_definition on midpoint(C, F), E, line_intersection(i, median(E, C, F)) we get E in Line(midpoint(C, F), line_intersection(i, median(E, C, F))), line_intersection(i, median(E, C, F)) in Line(E, midpoint(C, F)), Line(E, midpoint(C, F)) == Line(midpoint(C, F), line_intersection(i, median(E, C, F))), 0 == 2 * angle(E, midpoint(C, F), line_intersection(i, median(E, C, F))) mod 360
By internal_angle_bisector_definition_v0 on C, line_intersection(Line(A, C), Line(B, G)), C, E we get angle(C, E, line_intersection(Line(A, C), Line(B, G))) == angle(line_intersection(Line(A, C), Line(B, G)), E, C) mod 360
By internal_angle_bisector_definition_v0_r on F, A, F, midpoint(A, F) we get Line(A, midpoint(A, F)) == internal_angle_bisector(F, midpoint(A, F), F)
By collinear_definition on center(d), E, line_intersection(i, median(E, C, F)) we get E in Line(center(d), line_intersection(i, median(E, C, F))), line_intersection(i, median(E, C, F)) in Line(E, center(d)), Line(E, center(d)) == Line(center(d), line_intersection(i, median(E, C, F))), 0 == 2 * angle(E, center(d), line_intersection(i, median(E, C, F))) mod 360
By collinear_definition on midpoint(C, F), line_intersection(i, median(E, C, F)), E we get line_intersection(i, median(E, C, F)) in Line(E, midpoint(C, F)), E in Line(midpoint(C, F), line_intersection(i, median(E, C, F))), Line(E, midpoint(C, F)) == Line(midpoint(C, F), line_intersection(i, median(E, C, F))), 0 == 2 * angle(line_intersection(i, median(E, C, F)), midpoint(C, F), E) mod 360
By perpendicular_angle_conditions_v0 on E, midpoint(A, F), A we get angle(E, midpoint(A, F), A) == orientation(A, E, midpoint(A, F)) mod 360
By internal_angle_bisector_definition_v0_r on B, D, B, H we get Line(D, H) == internal_angle_bisector(B, H, B)
By collinear_definition on D, A, line_intersection(i, median(E, C, F)) we get A in Line(D, line_intersection(i, median(E, C, F))), line_intersection(i, median(E, C, F)) in Line(A, D), Line(A, D) == Line(D, line_intersection(i, median(E, C, F))), 0 == 2 * angle(A, D, line_intersection(i, median(E, C, F))) mod 360
By perpendicular_angle_conditions_v0 on B, midpoint(C, F), line_intersection(i, median(E, C, F)) we get angle(B, midpoint(C, F), line_intersection(i, median(E, C, F))) == orientation(B, midpoint(C, F), line_intersection(i, median(E, C, F))) mod 360
By internal_angle_bisector_definition_v0 on C, line_intersection(i, median(E, C, F)), F, E we get angle(C, E, line_intersection(i, median(E, C, F))) == angle(line_intersection(i, median(E, C, F)), E, F) mod 360
By perpendicular_angle_conditions_v0 on line_intersection(i, median(E, C, F)), midpoint(C, F), B we get angle(line_intersection(i, median(E, C, F)), midpoint(C, F), B) == orientation(B, line_intersection(i, median(E, C, F)), midpoint(C, F)) mod 360
By collinear_definition on A, line_intersection(Line(A, C), Line(B, G)), E we get line_intersection(Line(A, C), Line(B, G)) in Line(A, E), E in Line(A, line_intersection(Line(A, C), Line(B, G))), Line(A, E) == Line(A, line_intersection(Line(A, C), Line(B, G))), 0 == 2 * angle(line_intersection(Line(A, C), Line(B, G)), A, E) mod 360
By perpendicular_angle_conditions_v0 on G, A, line_intersection(i, median(E, C, F)) we get angle(G, A, line_intersection(i, median(E, C, F))) == orientation(A, line_intersection(i, median(E, C, F)), G) mod 360
By sas_anti_congruence on projection(C, f), E, A, A, E, projection(C, f) we get anti_congruent_triangles(A, E, projection(C, f), projection(C, f), E, A)
By sas_anti_congruence on C, E, projection(C, f), projection(C, f), E, C we get anti_congruent_triangles(C, E, projection(C, f), projection(C, f), E, C)
By perpendicular_angle_conditions_v0 on A, midpoint(A, F), E we get angle(A, midpoint(A, F), E) == orientation(A, midpoint(A, F), E) mod 360
By collinear_definition on E, line_intersection(Line(A, C), Line(B, G)), C we get line_intersection(Line(A, C), Line(B, G)) in Line(C, E), C in Line(E, line_intersection(Line(A, C), Line(B, G))), Line(C, E) == Line(E, line_intersection(Line(A, C), Line(B, G))), 0 == 2 * angle(line_intersection(Line(A, C), Line(B, G)), E, C) mod 360
By external_angle_bisector_definition_v0 on F, line_intersection(i, median(E, C, F)), F, A we get 180 == angle(F, A, line_intersection(i, median(E, C, F))) + angle(F, A, line_intersection(i, median(E, C, F))) mod 360
By collinear_definition on center(d), line_intersection(i, median(E, C, F)), midpoint(C, F) we get line_intersection(i, median(E, C, F)) in Line(center(d), midpoint(C, F)), midpoint(C, F) in Line(center(d), line_intersection(i, median(E, C, F))), Line(center(d), midpoint(C, F)) == Line(center(d), line_intersection(i, median(E, C, F))), 0 == 2 * angle(line_intersection(i, median(E, C, F)), center(d), midpoint(C, F)) mod 360
By internal_angle_bisector_definition_v0 on E, line_intersection(i, median(E, C, F)), E, center(d) we get angle(E, center(d), line_intersection(i, median(E, C, F))) == angle(line_intersection(i, median(E, C, F)), center(d), E) mod 360
By collinear_definition on E, line_intersection(Line(A, C), Line(B, G)), A we get line_intersection(Line(A, C), Line(B, G)) in Line(A, E), A in Line(E, line_intersection(Line(A, C), Line(B, G))), Line(A, E) == Line(E, line_intersection(Line(A, C), Line(B, G))), 0 == 2 * angle(line_intersection(Line(A, C), Line(B, G)), E, A) mod 360
By perpendicular_angle_conditions_v0 on midpoint(A, F), E, midpoint(C, F) we get angle(midpoint(A, F), E, midpoint(C, F)) == orientation(E, midpoint(C, F), midpoint(A, F)) mod 360
By collinear_definition on midpoint(C, F), line_intersection(i, median(E, C, F)), center(d) we get line_intersection(i, median(E, C, F)) in Line(center(d), midpoint(C, F)), center(d) in Line(midpoint(C, F), line_intersection(i, median(E, C, F))), Line(center(d), midpoint(C, F)) == Line(midpoint(C, F), line_intersection(i, median(E, C, F))), 0 == 2 * angle(line_intersection(i, median(E, C, F)), midpoint(C, F), center(d)) mod 360
By isosceles_triangle_properties on E, projection(C, f), A we get distance(A, E) == distance(E, projection(C, f)), angle(E, projection(C, f), A) == angle(projection(C, f), A, E) mod 360
By collinear_definition on B, line_intersection(Line(A, C), Line(B, G)), G we get line_intersection(Line(A, C), Line(B, G)) in Line(B, G), G in Line(B, line_intersection(Line(A, C), Line(B, G))), Line(B, G) == Line(B, line_intersection(Line(A, C), Line(B, G))), 0 == 2 * angle(line_intersection(Line(A, C), Line(B, G)), B, G) mod 360
By collinear_definition on C, E, line_intersection(Line(A, C), Line(B, G)) we get E in Line(C, line_intersection(Line(A, C), Line(B, G))), line_intersection(Line(A, C), Line(B, G)) in Line(C, E), Line(C, E) == Line(C, line_intersection(Line(A, C), Line(B, G))), 0 == 2 * angle(E, C, line_intersection(Line(A, C), Line(B, G))) mod 360
By internal_angle_bisector_definition_v0 on midpoint(C, F), line_intersection(i, median(E, C, F)), midpoint(C, F), center(d) we get angle(line_intersection(i, median(E, C, F)), center(d), midpoint(C, F)) == angle(midpoint(C, F), center(d), line_intersection(i, median(E, C, F))) mod 360
By collinear_definition on B, G, line_intersection(Line(A, C), Line(B, G)) we get G in Line(B, line_intersection(Line(A, C), Line(B, G))), line_intersection(Line(A, C), Line(B, G)) in Line(B, G), Line(B, G) == Line(B, line_intersection(Line(A, C), Line(B, G))), 0 == 2 * angle(G, B, line_intersection(Line(A, C), Line(B, G))) mod 360
By log_of_2_times_distance on A, C, E, projection(C, f) we get log(distance(A, C)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(E, projection(C, f)))
By draw_point_of_tangency on Line(A, C), Circle(B, C, H) we get exists(line_circle_tangent_point(Line(A, C), Circle(B, C, H)))
By draw_point_of_tangency on Line(E, F), Circle(B, F, H) we get exists(line_circle_tangent_point(Line(E, F), Circle(B, F, H)))
By perpendicular_lines_draw_intersection on Line(E, G), altitude(B, E, G) we get exists(line_intersection(Line(E, G), altitude(B, E, G)))
By altitude_definition on F, line_intersection(i, median(E, C, F)), E, g we get g == altitude(F, E, line_intersection(i, median(E, C, F)))
By altitude_definition on orthocenter(B, C, E), C, midpoint(C, F), median(E, C, F) we get median(E, C, F) == altitude(orthocenter(B, C, E), C, midpoint(C, F))
By altitude_definition on B, line_intersection(i, median(E, C, F)), midpoint(C, F), g we get g == altitude(B, midpoint(C, F), line_intersection(i, median(E, C, F)))
By power_of_a_point_definition on F, B, C, Circle(B, C, H) we get log(distance(B, F)) + log(distance(C, F)) == log(power_of_a_point(F, Circle(B, C, H)))
By altitude_definition on F, A, line_intersection(i, median(E, C, F)), j we get j == altitude(F, A, line_intersection(i, median(E, C, F)))
By altitude_definition on orthocenter(B, C, E), B, D, altitude(C, B, E) we get altitude(C, B, E) == altitude(orthocenter(B, C, E), B, D)
By altitude_definition on F, midpoint(C, F), line_intersection(i, median(E, C, F)), g we get g == altitude(F, midpoint(C, F), line_intersection(i, median(E, C, F)))
By power_of_a_point_tangent on C, A, Circle(A, B, H) we get 2 * log(distance(A, C)) == log(power_of_a_point(C, Circle(A, B, H)))
By altitude_definition on C, line_intersection(Line(A, C), Line(B, G)), B, Line(A, C) we get Line(A, C) == altitude(C, B, line_intersection(Line(A, C), Line(B, G)))
By parallelogram_parallel_definition on midpoint(A, F), E, midpoint(C, F), F we get parallelogram(E, midpoint(A, F), F, midpoint(C, F))
By altitude_definition on B, line_intersection(Line(A, C), Line(B, G)), E, Line(B, G) we get Line(B, G) == altitude(B, E, line_intersection(Line(A, C), Line(B, G)))
By altitude_definition on orthocenter(B, C, E), line_intersection(Line(A, C), Line(B, G)), C, Line(B, G) we get Line(B, G) == altitude(orthocenter(B, C, E), C, line_intersection(Line(A, C), Line(B, G)))
By power_of_a_point_definition on D, H, B, Circle(B, C, H) we get log(distance(D, H)) + log(distance(B, D)) == log(power_of_a_point(D, Circle(B, C, H)))
By altitude_definition on orthocenter(B, E, G), E, H, Line(G, H) we get Line(G, H) == altitude(orthocenter(B, E, G), E, H)
By altitude_definition on midpoint(A, F), D, A, j we get j == altitude(midpoint(A, F), A, D)
By collinear_definition on line_intersection(Line(A, C), Line(B, G)), G, B we get G in Line(B, line_intersection(Line(A, C), Line(B, G))), B in Line(G, line_intersection(Line(A, C), Line(B, G))), Line(B, line_intersection(Line(A, C), Line(B, G))) == Line(G, line_intersection(Line(A, C), Line(B, G))), 0 == 2 * angle(G, line_intersection(Line(A, C), Line(B, G)), B) mod 360
By altitude_definition on F, line_intersection(i, median(E, C, F)), center(d), g we get g == altitude(F, center(d), line_intersection(i, median(E, C, F)))
By collinear_definition on line_intersection(i, median(E, C, F)), midpoint(C, F), center(d) we get midpoint(C, F) in Line(center(d), line_intersection(i, median(E, C, F))), center(d) in Line(midpoint(C, F), line_intersection(i, median(E, C, F))), Line(center(d), line_intersection(i, median(E, C, F))) == Line(midpoint(C, F), line_intersection(i, median(E, C, F))), 0 == 2 * angle(midpoint(C, F), line_intersection(i, median(E, C, F)), center(d)) mod 360
By altitude_definition on B, line_intersection(i, median(E, C, F)), center(d), g we get g == altitude(B, center(d), line_intersection(i, median(E, C, F)))
By altitude_definition on midpoint(A, F), C, B, j we get j == altitude(midpoint(A, F), B, C)
By altitude_definition on midpoint(A, F), line_intersection(i, median(E, C, F)), center(d), median(E, A, F) we get median(E, A, F) == altitude(midpoint(A, F), center(d), line_intersection(i, median(E, C, F)))
By altitude_definition on orthocenter(B, E, G), center(c), E, Line(A, C) we get Line(A, C) == altitude(orthocenter(B, E, G), E, center(c))
By perpendicular_angle_conditions_v0 on D, line_intersection(i, median(E, C, F)), center(d) we get angle(D, line_intersection(i, median(E, C, F)), center(d)) == orientation(D, line_intersection(i, median(E, C, F)), center(d)) mod 360
By altitude_definition on midpoint(C, F), A, line_intersection(i, median(E, C, F)), median(E, C, F) we get median(E, C, F) == altitude(midpoint(C, F), A, line_intersection(i, median(E, C, F)))
By perpendicular_angle_conditions_v0 on A, line_intersection(i, median(E, C, F)), E we get angle(A, line_intersection(i, median(E, C, F)), E) == orientation(A, line_intersection(i, median(E, C, F)), E) mod 360
By altitude_definition on A, line_intersection(Line(A, C), Line(B, G)), G, Line(A, C) we get Line(A, C) == altitude(A, G, line_intersection(Line(A, C), Line(B, G)))
By perpendicular_angle_conditions_v0 on D, line_intersection(i, median(E, C, F)), E we get angle(D, line_intersection(i, median(E, C, F)), E) == orientation(D, line_intersection(i, median(E, C, F)), E) mod 360
By altitude_definition on midpoint(C, F), line_intersection(i, median(E, C, F)), D, median(E, C, F) we get median(E, C, F) == altitude(midpoint(C, F), D, line_intersection(i, median(E, C, F)))
By altitude_definition on midpoint(A, F), center(d), midpoint(C, F), median(E, A, F) we get median(E, A, F) == altitude(midpoint(A, F), center(d), midpoint(C, F))
By altitude_definition on A, line_intersection(Line(A, C), Line(B, G)), B, Line(A, C) we get Line(A, C) == altitude(A, B, line_intersection(Line(A, C), Line(B, G)))
By altitude_definition on G, A, line_intersection(Line(A, C), Line(B, G)), Line(B, G) we get Line(B, G) == altitude(G, A, line_intersection(Line(A, C), Line(B, G)))
By triangle_homothety_0 on midpoint(A, F), E, A, midpoint(C, F), C, E we get similar_triangles(A, E, midpoint(A, F), E, C, midpoint(C, F))
By radical_axis_definition_v0 on orthocenter(B, E, G), Circle(A, C, projection(C, f)), c we get power_of_a_point(orthocenter(B, E, G), c) == power_of_a_point(orthocenter(B, E, G), Circle(A, C, projection(C, f)))
By altitude_definition on B, line_intersection(Line(A, C), Line(B, G)), C, Line(B, G) we get Line(B, G) == altitude(B, C, line_intersection(Line(A, C), Line(B, G)))
By altitude_definition on orthocenter(B, E, G), line_intersection(Line(A, C), Line(B, G)), G, Line(A, C) we get Line(A, C) == altitude(orthocenter(B, E, G), G, line_intersection(Line(A, C), Line(B, G)))
By power_of_a_point_definition on C, B, F, Circle(B, F, H) we get log(distance(B, C)) + log(distance(C, F)) == log(power_of_a_point(C, Circle(B, F, H)))
By parallelogram_parallel_definition on F, midpoint(A, F), E, midpoint(C, F) we get parallelogram(E, midpoint(A, F), F, midpoint(C, F))
By parallelogram_parallel_definition on midpoint(C, F), E, midpoint(A, F), F we get parallelogram(E, midpoint(A, F), F, midpoint(C, F))
By altitude_definition on midpoint(A, F), E, midpoint(C, F), median(E, A, F) we get median(E, A, F) == altitude(midpoint(A, F), E, midpoint(C, F))
By altitude_definition on center(d), line_intersection(i, median(E, C, F)), A, median(E, C, F) we get median(E, C, F) == altitude(center(d), A, line_intersection(i, median(E, C, F)))
By altitude_definition on E, line_intersection(i, median(E, C, F)), A, median(E, C, F) we get median(E, C, F) == altitude(E, A, line_intersection(i, median(E, C, F)))
By altitude_definition on midpoint(A, F), F, midpoint(C, F), j we get j == altitude(midpoint(A, F), F, midpoint(C, F))
By altitude_definition on C, A, midpoint(A, F), g we get g == altitude(C, A, midpoint(A, F))
By altitude_definition on center(c), line_intersection(Line(A, C), Line(B, G)), A, median(E, D, G) we get median(E, D, G) == altitude(center(c), A, line_intersection(Line(A, C), Line(B, G)))
By power_of_a_point_tangent on E, C, Circle(B, C, H) we get 2 * log(distance(C, E)) == log(power_of_a_point(E, Circle(B, C, H)))
By perpendicular_angle_conditions_v0 on A, line_intersection(Line(A, C), Line(B, G)), G we get angle(A, line_intersection(Line(A, C), Line(B, G)), G) == orientation(A, line_intersection(Line(A, C), Line(B, G)), G) mod 360
By perpendicular_angle_conditions_v0 on midpoint(C, F), line_intersection(i, median(E, C, F)), D we get angle(midpoint(C, F), line_intersection(i, median(E, C, F)), D) == orientation(D, midpoint(C, F), line_intersection(i, median(E, C, F))) mod 360
By perpendicular_angle_conditions_v0 on line_intersection(i, median(E, C, F)), E, midpoint(A, F) we get angle(line_intersection(i, median(E, C, F)), E, midpoint(A, F)) == orientation(E, midpoint(A, F), line_intersection(i, median(E, C, F))) mod 360
By perpendicular_angle_conditions_v0 on center(d), line_intersection(i, median(E, C, F)), A we get angle(center(d), line_intersection(i, median(E, C, F)), A) == orientation(A, center(d), line_intersection(i, median(E, C, F))) mod 360
By altitude_definition on D, midpoint(C, F), line_intersection(i, median(E, C, F)), i we get i == altitude(D, midpoint(C, F), line_intersection(i, median(E, C, F)))
By altitude_definition on midpoint(A, F), E, center(d), median(E, A, F) we get median(E, A, F) == altitude(midpoint(A, F), E, center(d))
By altitude_definition on E, A, midpoint(A, F), median(E, A, F) we get median(E, A, F) == altitude(E, A, midpoint(A, F))
By altitude_definition on orthocenter(B, E, G), H, D, Line(G, H) we get Line(G, H) == altitude(orthocenter(B, E, G), D, H)
By altitude_definition on C, center(d), line_intersection(i, median(E, C, F)), g we get g == altitude(C, center(d), line_intersection(i, median(E, C, F)))
By perpendicular_angle_conditions_v0 on A, line_intersection(i, median(E, C, F)), midpoint(C, F) we get angle(A, line_intersection(i, median(E, C, F)), midpoint(C, F)) == orientation(A, line_intersection(i, median(E, C, F)), midpoint(C, F)) mod 360
By radical_axis_definition_v0 on orthocenter(B, E, G), c, Circle(A, C, F) we get power_of_a_point(orthocenter(B, E, G), c) == power_of_a_point(orthocenter(B, E, G), Circle(A, C, F))
By altitude_definition on line_intersection(i, median(E, C, F)), A, midpoint(A, F), i we get i == altitude(line_intersection(i, median(E, C, F)), A, midpoint(A, F))
By altitude_definition on orthocenter(B, C, E), F, C, median(E, C, F) we get median(E, C, F) == altitude(orthocenter(B, C, E), C, F)
By altitude_definition on orthocenter(B, E, G), B, E, Line(G, H) we get Line(G, H) == altitude(orthocenter(B, E, G), B, E)
By altitude_definition on midpoint(A, F), C, F, j we get j == altitude(midpoint(A, F), C, F)
By altitude_definition on F, E, midpoint(A, F), j we get j == altitude(F, E, midpoint(A, F))
By altitude_definition on orthocenter(B, C, E), A, line_intersection(Line(A, C), Line(B, G)), Line(B, G) we get Line(B, G) == altitude(orthocenter(B, C, E), A, line_intersection(Line(A, C), Line(B, G)))
By power_of_a_point_definition on E, B, H, Circle(B, C, H) we get log(distance(B, E)) + log(distance(E, H)) == log(power_of_a_point(E, Circle(B, C, H)))
By altitude_definition on orthocenter(B, E, G), B, G, Line(A, C) we get Line(A, C) == altitude(orthocenter(B, E, G), B, G)
By altitude_definition on orthocenter(B, C, E), line_intersection(i, median(E, C, F)), A, median(E, C, F) we get median(E, C, F) == altitude(orthocenter(B, C, E), A, line_intersection(i, median(E, C, F)))
By triangle_homothety_0 on C, midpoint(C, F), E, E, midpoint(A, F), A we get similar_triangles(A, E, midpoint(A, F), E, C, midpoint(C, F))
By altitude_definition on orthocenter(B, C, E), A, E, Line(B, G) we get Line(B, G) == altitude(orthocenter(B, C, E), A, E)
By altitude_definition on center(d), line_intersection(i, median(E, C, F)), D, median(E, C, F) we get median(E, C, F) == altitude(center(d), D, line_intersection(i, median(E, C, F)))
By altitude_definition on G, line_intersection(Line(A, C), Line(B, G)), C, Line(B, G) we get Line(B, G) == altitude(G, C, line_intersection(Line(A, C), Line(B, G)))
By altitude_definition on line_intersection(i, median(E, C, F)), F, midpoint(A, F), i we get i == altitude(line_intersection(i, median(E, C, F)), F, midpoint(A, F))
By altitude_definition on line_intersection(i, median(E, C, F)), midpoint(A, F), E, median(E, C, F) we get median(E, C, F) == altitude(line_intersection(i, median(E, C, F)), E, midpoint(A, F))
By altitude_definition on orthocenter(B, C, E), D, E, altitude(C, B, E) we get altitude(C, B, E) == altitude(orthocenter(B, C, E), D, E)
By altitude_definition on C, H, B, altitude(C, B, E) we get altitude(C, B, E) == altitude(C, B, H)
By altitude_definition on midpoint(A, F), A, line_intersection(i, median(E, C, F)), j we get j == altitude(midpoint(A, F), A, line_intersection(i, median(E, C, F)))
By perpendicular_angle_conditions_v0 on midpoint(A, F), E, line_intersection(i, median(E, C, F)) we get angle(midpoint(A, F), E, line_intersection(i, median(E, C, F))) == orientation(E, line_intersection(i, median(E, C, F)), midpoint(A, F)) mod 360
By altitude_definition on orthocenter(B, C, E), C, A, Line(B, G) we get Line(B, G) == altitude(orthocenter(B, C, E), A, C)
By altitude_definition on G, E, midpoint(A, F), j we get j == altitude(G, E, midpoint(A, F))
By altitude_definition on A, midpoint(A, F), E, j we get j == altitude(A, E, midpoint(A, F))
By altitude_definition on midpoint(C, F), midpoint(A, F), F, g we get g == altitude(midpoint(C, F), F, midpoint(A, F))
By altitude_definition on orthocenter(B, C, E), F, B, median(E, C, F) we get median(E, C, F) == altitude(orthocenter(B, C, E), B, F)
By altitude_definition on orthocenter(B, E, G), line_intersection(Line(A, C), Line(B, G)), B, Line(A, C) we get Line(A, C) == altitude(orthocenter(B, E, G), B, line_intersection(Line(A, C), Line(B, G)))
By altitude_definition on C, line_intersection(i, median(E, C, F)), midpoint(C, F), g we get g == altitude(C, midpoint(C, F), line_intersection(i, median(E, C, F)))
By altitude_definition on orthocenter(B, C, E), E, C, Line(B, G) we get Line(B, G) == altitude(orthocenter(B, C, E), C, E)
By altitude_definition on G, A, line_intersection(i, median(E, C, F)), j we get j == altitude(G, A, line_intersection(i, median(E, C, F)))
By perpendicular_angle_conditions_v0 on B, line_intersection(Line(A, C), Line(B, G)), E we get angle(B, line_intersection(Line(A, C), Line(B, G)), E) == orientation(B, line_intersection(Line(A, C), Line(B, G)), E) mod 360
By triangle_homothety_0 on E, midpoint(C, F), C, A, midpoint(A, F), E we get similar_triangles(A, E, midpoint(A, F), E, C, midpoint(C, F))
By altitude_definition on orthocenter(B, C, E), D, line_intersection(i, median(E, C, F)), median(E, C, F) we get median(E, C, F) == altitude(orthocenter(B, C, E), D, line_intersection(i, median(E, C, F)))
By altitude_definition on orthocenter(B, C, E), H, B, altitude(C, B, E) we get altitude(C, B, E) == altitude(orthocenter(B, C, E), B, H)
By altitude_definition on D, midpoint(A, F), F, i we get i == altitude(D, F, midpoint(A, F))
By triangle_homothety_0 on midpoint(C, F), C, E, midpoint(A, F), E, A we get similar_triangles(A, E, midpoint(A, F), E, C, midpoint(C, F))
By altitude_definition on D, A, midpoint(A, F), i we get i == altitude(D, A, midpoint(A, F))
By altitude_definition on D, line_intersection(i, median(E, C, F)), E, i we get i == altitude(D, E, line_intersection(i, median(E, C, F)))
By altitude_definition on midpoint(A, F), line_intersection(i, median(E, C, F)), D, j we get j == altitude(midpoint(A, F), D, line_intersection(i, median(E, C, F)))
By perpendicular_angle_conditions_v0 on B, line_intersection(Line(A, C), Line(B, G)), A we get angle(B, line_intersection(Line(A, C), Line(B, G)), A) == orientation(A, B, line_intersection(Line(A, C), Line(B, G))) mod 360
By altitude_definition on orthocenter(B, C, E), H, E, altitude(C, B, E) we get altitude(C, B, E) == altitude(orthocenter(B, C, E), E, H)
By altitude_definition on B, midpoint(A, F), A, g we get g == altitude(B, A, midpoint(A, F))
By altitude_definition on B, E, line_intersection(i, median(E, C, F)), g we get g == altitude(B, E, line_intersection(i, median(E, C, F)))
By altitude_definition on E, line_intersection(Line(A, C), Line(B, G)), G, Line(A, C) we get Line(A, C) == altitude(E, G, line_intersection(Line(A, C), Line(B, G)))
By parallelogram_parallel_definition on midpoint(A, F), F, midpoint(C, F), E we get parallelogram(E, midpoint(A, F), F, midpoint(C, F))
By altitude_definition on orthocenter(B, E, G), B, D, Line(G, H) we get Line(G, H) == altitude(orthocenter(B, E, G), B, D)
By power_of_a_point_definition on D, H, B, Circle(A, B, H) we get log(distance(D, H)) + log(distance(B, D)) == log(power_of_a_point(D, Circle(A, B, H)))
By altitude_definition on midpoint(A, F), midpoint(C, F), B, j we get j == altitude(midpoint(A, F), B, midpoint(C, F))
By altitude_definition on G, line_intersection(Line(A, C), Line(B, G)), E, Line(B, G) we get Line(B, G) == altitude(G, E, line_intersection(Line(A, C), Line(B, G)))
By altitude_definition on midpoint(A, F), midpoint(C, F), C, j we get j == altitude(midpoint(A, F), C, midpoint(C, F))
By altitude_definition on A, midpoint(C, F), line_intersection(i, median(E, C, F)), i we get i == altitude(A, midpoint(C, F), line_intersection(i, median(E, C, F)))
By triangle_homothety_0 on midpoint(C, F), E, C, midpoint(A, F), A, E we get similar_triangles(A, E, midpoint(A, F), E, C, midpoint(C, F))
By altitude_definition on C, G, line_intersection(Line(A, C), Line(B, G)), Line(A, C) we get Line(A, C) == altitude(C, G, line_intersection(Line(A, C), Line(B, G)))
By parallelogram_parallel_definition on midpoint(C, F), F, midpoint(A, F), E we get parallelogram(E, midpoint(A, F), F, midpoint(C, F))
By altitude_definition on D, center(d), line_intersection(i, median(E, C, F)), i we get i == altitude(D, center(d), line_intersection(i, median(E, C, F)))
By power_of_a_point_definition on D, H, B, Circle(B, F, H) we get log(distance(D, H)) + log(distance(B, D)) == log(power_of_a_point(D, Circle(B, F, H)))
By altitude_definition on E, D, line_intersection(i, median(E, C, F)), median(E, C, F) we get median(E, C, F) == altitude(E, D, line_intersection(i, median(E, C, F)))
By altitude_definition on A, line_intersection(i, median(E, C, F)), center(d), i we get i == altitude(A, center(d), line_intersection(i, median(E, C, F)))
By altitude_definition on orthocenter(B, C, E), C, B, median(E, C, F) we get median(E, C, F) == altitude(orthocenter(B, C, E), B, C)
By altitude_definition on midpoint(A, F), line_intersection(i, median(E, C, F)), midpoint(C, F), median(E, A, F) we get median(E, A, F) == altitude(midpoint(A, F), midpoint(C, F), line_intersection(i, median(E, C, F)))
By triangle_homothety_0 on midpoint(A, F), A, E, midpoint(C, F), E, C we get similar_triangles(A, E, midpoint(A, F), E, C, midpoint(C, F))
By altitude_definition on F, D, line_intersection(i, median(E, C, F)), j we get j == altitude(F, D, line_intersection(i, median(E, C, F)))
By altitude_definition on C, E, line_intersection(i, median(E, C, F)), g we get g == altitude(C, E, line_intersection(i, median(E, C, F)))
By perpendicular_angle_conditions_v0 on midpoint(C, F), line_intersection(i, median(E, C, F)), A we get angle(midpoint(C, F), line_intersection(i, median(E, C, F)), A) == orientation(A, midpoint(C, F), line_intersection(i, median(E, C, F))) mod 360
By altitude_definition on orthocenter(B, E, G), G, E, altitude(B, E, G) we get altitude(B, E, G) == altitude(orthocenter(B, E, G), E, G)
By perpendicular_angle_conditions_v0 on A, line_intersection(i, median(E, C, F)), center(d) we get angle(A, line_intersection(i, median(E, C, F)), center(d)) == orientation(A, line_intersection(i, median(E, C, F)), center(d)) mod 360
By power_of_a_point_tangent on A, C, Circle(B, C, H) we get 2 * log(distance(A, C)) == log(power_of_a_point(A, Circle(B, C, H)))
By altitude_definition on midpoint(C, F), A, midpoint(A, F), g we get g == altitude(midpoint(C, F), A, midpoint(A, F))
By collinear_definition on line_intersection(Line(A, C), Line(B, G)), E, A we get E in Line(A, line_intersection(Line(A, C), Line(B, G))), A in Line(E, line_intersection(Line(A, C), Line(B, G))), Line(A, line_intersection(Line(A, C), Line(B, G))) == Line(E, line_intersection(Line(A, C), Line(B, G))), 0 == 2 * angle(E, line_intersection(Line(A, C), Line(B, G)), A) mod 360
By collinear_definition on line_intersection(i, median(E, C, F)), E, midpoint(C, F) we get E in Line(midpoint(C, F), line_intersection(i, median(E, C, F))), midpoint(C, F) in Line(E, line_intersection(i, median(E, C, F))), Line(E, line_intersection(i, median(E, C, F))) == Line(midpoint(C, F), line_intersection(i, median(E, C, F))), 0 == 2 * angle(E, line_intersection(i, median(E, C, F)), midpoint(C, F)) mod 360
By altitude_definition on A, line_intersection(i, median(E, C, F)), E, i we get i == altitude(A, E, line_intersection(i, median(E, C, F)))
By triangle_homothety_0 on E, C, midpoint(C, F), A, E, midpoint(A, F) we get similar_triangles(A, E, midpoint(A, F), E, C, midpoint(C, F))
By altitude_definition on B, line_intersection(Line(A, C), Line(B, G)), A, Line(B, G) we get Line(B, G) == altitude(B, A, line_intersection(Line(A, C), Line(B, G)))
By altitude_definition on midpoint(C, F), E, midpoint(A, F), median(E, C, F) we get median(E, C, F) == altitude(midpoint(C, F), E, midpoint(A, F))
By altitude_definition on orthocenter(B, C, E), F, midpoint(C, F), median(E, C, F) we get median(E, C, F) == altitude(orthocenter(B, C, E), F, midpoint(C, F))
By altitude_definition on orthocenter(B, C, E), B, midpoint(C, F), median(E, C, F) we get median(E, C, F) == altitude(orthocenter(B, C, E), B, midpoint(C, F))
By altitude_definition on E, F, midpoint(A, F), median(E, A, F) we get median(E, A, F) == altitude(E, F, midpoint(A, F))
By triangle_homothety_0 on E, midpoint(A, F), A, C, midpoint(C, F), E we get similar_triangles(A, E, midpoint(A, F), E, C, midpoint(C, F))
By parallelogram_parallel_definition on E, midpoint(C, F), F, midpoint(A, F) we get parallelogram(E, midpoint(A, F), F, midpoint(C, F))
By altitude_definition on orthocenter(B, E, G), B, H, Line(G, H) we get Line(G, H) == altitude(orthocenter(B, E, G), B, H)
By triangle_homothety_0 on A, E, midpoint(A, F), E, C, midpoint(C, F) we get similar_triangles(A, E, midpoint(A, F), E, C, midpoint(C, F))
By altitude_definition on C, D, E, altitude(C, B, E) we get altitude(C, B, E) == altitude(C, D, E)
By altitude_definition on center(d), E, midpoint(A, F), median(E, C, F) we get median(E, C, F) == altitude(center(d), E, midpoint(A, F))
By collinear_definition on line_intersection(i, median(E, C, F)), D, A we get D in Line(A, line_intersection(i, median(E, C, F))), A in Line(D, line_intersection(i, median(E, C, F))), Line(A, line_intersection(i, median(E, C, F))) == Line(D, line_intersection(i, median(E, C, F))), 0 == 2 * angle(D, line_intersection(i, median(E, C, F)), A) mod 360
By altitude_definition on midpoint(A, F), B, F, j we get j == altitude(midpoint(A, F), B, F)
By altitude_definition on C, H, D, altitude(C, B, E) we get altitude(C, B, E) == altitude(C, D, H)
By collinear_definition on line_intersection(Line(A, C), Line(B, G)), E, C we get E in Line(C, line_intersection(Line(A, C), Line(B, G))), C in Line(E, line_intersection(Line(A, C), Line(B, G))), Line(C, line_intersection(Line(A, C), Line(B, G))) == Line(E, line_intersection(Line(A, C), Line(B, G))), 0 == 2 * angle(E, line_intersection(Line(A, C), Line(B, G)), C) mod 360
By collinear_definition on line_intersection(i, median(E, C, F)), A, D we get A in Line(D, line_intersection(i, median(E, C, F))), D in Line(A, line_intersection(i, median(E, C, F))), Line(A, line_intersection(i, median(E, C, F))) == Line(D, line_intersection(i, median(E, C, F))), 0 == 2 * angle(A, line_intersection(i, median(E, C, F)), D) mod 360
By perpendicular_angle_conditions_v0 on E, line_intersection(Line(A, C), Line(B, G)), B we get angle(E, line_intersection(Line(A, C), Line(B, G)), B) == orientation(B, E, line_intersection(Line(A, C), Line(B, G))) mod 360
By perpendicular_angle_conditions_v0 on C, line_intersection(Line(A, C), Line(B, G)), G we get angle(C, line_intersection(Line(A, C), Line(B, G)), G) == orientation(C, line_intersection(Line(A, C), Line(B, G)), G) mod 360
By altitude_definition on G, line_intersection(i, median(E, C, F)), D, j we get j == altitude(G, D, line_intersection(i, median(E, C, F)))
By perpendicular_angle_conditions_v0 on C, line_intersection(Line(A, C), Line(B, G)), B we get angle(C, line_intersection(Line(A, C), Line(B, G)), B) == orientation(B, C, line_intersection(Line(A, C), Line(B, G))) mod 360
By altitude_definition on orthocenter(B, E, G), D, E, Line(G, H) we get Line(G, H) == altitude(orthocenter(B, E, G), D, E)
By altitude_definition on orthocenter(B, C, E), line_intersection(Line(A, C), Line(B, G)), E, Line(B, G) we get Line(B, G) == altitude(orthocenter(B, C, E), E, line_intersection(Line(A, C), Line(B, G)))
By altitude_definition on C, midpoint(A, F), F, g we get g == altitude(C, F, midpoint(A, F))
By altitude_definition on B, F, midpoint(A, F), g we get g == altitude(B, F, midpoint(A, F))
By collinear_definition on line_intersection(i, median(E, C, F)), E, center(d) we get E in Line(center(d), line_intersection(i, median(E, C, F))), center(d) in Line(E, line_intersection(i, median(E, C, F))), Line(E, line_intersection(i, median(E, C, F))) == Line(center(d), line_intersection(i, median(E, C, F))), 0 == 2 * angle(E, line_intersection(i, median(E, C, F)), center(d)) mod 360
By perpendicular_angle_conditions_v0 on G, line_intersection(Line(A, C), Line(B, G)), C we get angle(G, line_intersection(Line(A, C), Line(B, G)), C) == orientation(C, G, line_intersection(Line(A, C), Line(B, G))) mod 360
By perpendicular_angle_conditions_v0 on center(d), line_intersection(i, median(E, C, F)), D we get angle(center(d), line_intersection(i, median(E, C, F)), D) == orientation(D, center(d), line_intersection(i, median(E, C, F))) mod 360
By altitude_definition on E, line_intersection(Line(A, C), Line(B, G)), B, Line(A, C) we get Line(A, C) == altitude(E, B, line_intersection(Line(A, C), Line(B, G)))
By altitude_definition on orthocenter(B, C, E), E, B, altitude(C, B, E) we get altitude(C, B, E) == altitude(orthocenter(B, C, E), B, E)
By altitude_definition on C, H, E, altitude(C, B, E) we get altitude(C, B, E) == altitude(C, E, H)
By power_of_a_point_definition on E, B, H, Circle(A, B, H) we get log(distance(B, E)) + log(distance(E, H)) == log(power_of_a_point(E, Circle(A, B, H)))
By altitude_definition on orthocenter(B, C, E), D, H, altitude(C, B, E) we get altitude(C, B, E) == altitude(orthocenter(B, C, E), D, H)
By triangle_homothety_0 on C, E, midpoint(C, F), E, A, midpoint(A, F) we get similar_triangles(A, E, midpoint(A, F), E, C, midpoint(C, F))
By perpendicular_angle_conditions_v0 on E, line_intersection(Line(A, C), Line(B, G)), G we get angle(E, line_intersection(Line(A, C), Line(B, G)), G) == orientation(E, line_intersection(Line(A, C), Line(B, G)), G) mod 360
By altitude_definition on orthocenter(B, C, E), D, A, median(E, C, F) we get median(E, C, F) == altitude(orthocenter(B, C, E), A, D)
By perpendicular_angle_conditions_v0 on A, line_intersection(Line(A, C), Line(B, G)), B we get angle(A, line_intersection(Line(A, C), Line(B, G)), B) == orientation(A, line_intersection(Line(A, C), Line(B, G)), B) mod 360
By collinear_definition on line_intersection(Line(A, C), Line(B, G)), A, C we get A in Line(C, line_intersection(Line(A, C), Line(B, G))), C in Line(A, line_intersection(Line(A, C), Line(B, G))), Line(A, line_intersection(Line(A, C), Line(B, G))) == Line(C, line_intersection(Line(A, C), Line(B, G))), 0 == 2 * angle(A, line_intersection(Line(A, C), Line(B, G)), C) mod 360
By perpendicular_angle_conditions_v0 on E, line_intersection(i, median(E, C, F)), D we get angle(E, line_intersection(i, median(E, C, F)), D) == orientation(D, E, line_intersection(i, median(E, C, F))) mod 360
By power_of_a_point_definition on E, B, H, Circle(B, F, H) we get log(distance(B, E)) + log(distance(E, H)) == log(power_of_a_point(E, Circle(B, F, H)))
By collinear_definition on line_intersection(i, median(E, C, F)), center(d), midpoint(C, F) we get center(d) in Line(midpoint(C, F), line_intersection(i, median(E, C, F))), midpoint(C, F) in Line(center(d), line_intersection(i, median(E, C, F))), Line(center(d), line_intersection(i, median(E, C, F))) == Line(midpoint(C, F), line_intersection(i, median(E, C, F))), 0 == 2 * angle(center(d), line_intersection(i, median(E, C, F)), midpoint(C, F)) mod 360
By collinear_definition on line_intersection(i, median(E, C, F)), center(d), E we get center(d) in Line(E, line_intersection(i, median(E, C, F))), E in Line(center(d), line_intersection(i, median(E, C, F))), Line(E, line_intersection(i, median(E, C, F))) == Line(center(d), line_intersection(i, median(E, C, F))), 0 == 2 * angle(center(d), line_intersection(i, median(E, C, F)), E) mod 360
By altitude_definition on center(c), line_intersection(Line(A, C), Line(B, G)), E, median(E, D, G) we get median(E, D, G) == altitude(center(c), E, line_intersection(Line(A, C), Line(B, G)))
By perpendicular_angle_conditions_v0 on B, line_intersection(Line(A, C), Line(B, G)), C we get angle(B, line_intersection(Line(A, C), Line(B, G)), C) == orientation(B, line_intersection(Line(A, C), Line(B, G)), C) mod 360
By perpendicular_angle_conditions_v0 on G, line_intersection(Line(A, C), Line(B, G)), A we get angle(G, line_intersection(Line(A, C), Line(B, G)), A) == orientation(A, G, line_intersection(Line(A, C), Line(B, G))) mod 360
By triangle_homothety_0 on E, A, midpoint(A, F), C, E, midpoint(C, F) we get similar_triangles(A, E, midpoint(A, F), E, C, midpoint(C, F))
By altitude_definition on orthocenter(B, C, E), midpoint(A, F), E, median(E, C, F) we get median(E, C, F) == altitude(orthocenter(B, C, E), E, midpoint(A, F))
By parallelogram_parallel_definition on E, midpoint(A, F), F, midpoint(C, F) we get parallelogram(E, midpoint(A, F), F, midpoint(C, F))
By altitude_definition on center(c), line_intersection(Line(A, C), Line(B, G)), C, median(E, D, G) we get median(E, D, G) == altitude(center(c), C, line_intersection(Line(A, C), Line(B, G)))
By perpendicular_angle_conditions_v0 on E, line_intersection(i, median(E, C, F)), A we get angle(E, line_intersection(i, median(E, C, F)), A) == orientation(A, E, line_intersection(i, median(E, C, F))) mod 360
By collinear_definition on line_intersection(Line(A, C), Line(B, G)), C, A we get C in Line(A, line_intersection(Line(A, C), Line(B, G))), A in Line(C, line_intersection(Line(A, C), Line(B, G))), Line(A, line_intersection(Line(A, C), Line(B, G))) == Line(C, line_intersection(Line(A, C), Line(B, G))), 0 == 2 * angle(C, line_intersection(Line(A, C), Line(B, G)), A) mod 360
By collinear_definition on line_intersection(Line(A, C), Line(B, G)), C, E we get C in Line(E, line_intersection(Line(A, C), Line(B, G))), E in Line(C, line_intersection(Line(A, C), Line(B, G))), Line(C, line_intersection(Line(A, C), Line(B, G))) == Line(E, line_intersection(Line(A, C), Line(B, G))), 0 == 2 * angle(C, line_intersection(Line(A, C), Line(B, G)), E) mod 360
By collinear_definition on line_intersection(i, median(E, C, F)), midpoint(C, F), E we get midpoint(C, F) in Line(E, line_intersection(i, median(E, C, F))), E in Line(midpoint(C, F), line_intersection(i, median(E, C, F))), Line(E, line_intersection(i, median(E, C, F))) == Line(midpoint(C, F), line_intersection(i, median(E, C, F))), 0 == 2 * angle(midpoint(C, F), line_intersection(i, median(E, C, F)), E) mod 360
By perpendicular_angle_conditions_v0 on D, line_intersection(i, median(E, C, F)), midpoint(C, F) we get angle(D, line_intersection(i, median(E, C, F)), midpoint(C, F)) == orientation(D, line_intersection(i, median(E, C, F)), midpoint(C, F)) mod 360
By altitude_definition on midpoint(A, F), line_intersection(i, median(E, C, F)), E, median(E, A, F) we get median(E, A, F) == altitude(midpoint(A, F), E, line_intersection(i, median(E, C, F)))
By collinear_definition on line_intersection(Line(A, C), Line(B, G)), B, G we get B in Line(G, line_intersection(Line(A, C), Line(B, G))), G in Line(B, line_intersection(Line(A, C), Line(B, G))), Line(B, line_intersection(Line(A, C), Line(B, G))) == Line(G, line_intersection(Line(A, C), Line(B, G))), 0 == 2 * angle(B, line_intersection(Line(A, C), Line(B, G)), G) mod 360
By collinear_definition on line_intersection(Line(A, C), Line(B, G)), A, E we get A in Line(E, line_intersection(Line(A, C), Line(B, G))), E in Line(A, line_intersection(Line(A, C), Line(B, G))), Line(A, line_intersection(Line(A, C), Line(B, G))) == Line(E, line_intersection(Line(A, C), Line(B, G))), 0 == 2 * angle(A, line_intersection(Line(A, C), Line(B, G)), E) mod 360
By perpendicular_angle_conditions_v0 on G, line_intersection(Line(A, C), Line(B, G)), E we get angle(G, line_intersection(Line(A, C), Line(B, G)), E) == orientation(E, G, line_intersection(Line(A, C), Line(B, G))) mod 360
By parallelogram_parallel_definition on F, midpoint(C, F), E, midpoint(A, F) we get parallelogram(E, midpoint(A, F), F, midpoint(C, F))
By triangle_homothety_0 on A, midpoint(A, F), E, E, midpoint(C, F), C we get similar_triangles(A, E, midpoint(A, F), E, C, midpoint(C, F))
By power_of_a_point_tangent on E, A, Circle(A, B, H) we get 2 * log(distance(A, E)) == log(power_of_a_point(E, Circle(A, B, H)))
By power_of_a_point_tangent on E, F, Circle(B, F, H) we get 2 * log(distance(E, F)) == log(power_of_a_point(E, Circle(B, F, H)))
By power_of_a_point_definition on midpoint(C, F), B, F, Circle(B, F, H) we get log(power_of_a_point(midpoint(C, F), Circle(B, F, H))) == log(distance(B, midpoint(C, F))) + log(distance(F, midpoint(C, F)))
By triangle_homothety_1 on C, A, F, A, E, line_intersection(i, median(E, C, F)) we get concurrent(Line(A, C), Line(A, E), Line(F, line_intersection(i, median(E, C, F))))
By triangle_homothety_1 on F, A, C, line_intersection(i, median(E, C, F)), E, A we get concurrent(Line(A, C), Line(A, E), Line(F, line_intersection(i, median(E, C, F))))
By triangle_homothety_1 on E, line_intersection(i, median(E, C, F)), A, A, F, C we get concurrent(Line(A, C), Line(A, E), Line(F, line_intersection(i, median(E, C, F))))
By triangle_homothety_1 on A, E, line_intersection(i, median(E, C, F)), C, A, F we get concurrent(Line(A, C), Line(A, E), Line(F, line_intersection(i, median(E, C, F))))
By power_of_a_point_tangent on line_intersection(Line(A, C), Line(B, G)), C, Circle(B, C, H) we get log(power_of_a_point(line_intersection(Line(A, C), Line(B, G)), Circle(B, C, H))) == 2 * log(distance(C, line_intersection(Line(A, C), Line(B, G))))
By triangle_homothety_1 on F, C, A, line_intersection(i, median(E, C, F)), A, E we get concurrent(Line(A, C), Line(A, E), Line(F, line_intersection(i, median(E, C, F))))
By power_of_a_point_definition on line_intersection(Line(A, C), Line(B, G)), C, A, c we get log(power_of_a_point(line_intersection(Line(A, C), Line(B, G)), c)) == log(distance(C, line_intersection(Line(A, C), Line(B, G)))) + log(distance(A, line_intersection(Line(A, C), Line(B, G))))
By triangle_homothety_1 on A, F, C, E, line_intersection(i, median(E, C, F)), A we get concurrent(Line(A, C), Line(A, E), Line(F, line_intersection(i, median(E, C, F))))
By triangle_homothety_1 on C, F, A, A, line_intersection(i, median(E, C, F)), E we get concurrent(Line(A, C), Line(A, E), Line(F, line_intersection(i, median(E, C, F))))
By power_of_a_point_definition on projection(C, f), B, A, Circle(A, B, H) we get log(power_of_a_point(projection(C, f), Circle(A, B, H))) == log(distance(B, projection(C, f))) + log(distance(A, projection(C, f)))
By triangle_homothety_1 on A, line_intersection(i, median(E, C, F)), E, C, F, A we get concurrent(Line(A, C), Line(A, E), Line(F, line_intersection(i, median(E, C, F))))
By power_of_a_point_definition on line_intersection(Line(A, C), Line(B, G)), C, A, Circle(A, C, F) we get log(power_of_a_point(line_intersection(Line(A, C), Line(B, G)), Circle(A, C, F))) == log(distance(C, line_intersection(Line(A, C), Line(B, G)))) + log(distance(A, line_intersection(Line(A, C), Line(B, G))))
By power_of_a_point_definition on midpoint(C, F), C, B, Circle(B, C, H) we get log(power_of_a_point(midpoint(C, F), Circle(B, C, H))) == log(distance(C, midpoint(C, F))) + log(distance(B, midpoint(C, F)))
By triangle_homothety_1 on line_intersection(i, median(E, C, F)), A, E, F, C, A we get concurrent(Line(A, C), Line(A, E), Line(F, line_intersection(i, median(E, C, F))))
By power_of_a_point_tangent on line_intersection(Line(A, C), Line(B, G)), A, Circle(A, B, H) we get log(power_of_a_point(line_intersection(Line(A, C), Line(B, G)), Circle(A, B, H))) == 2 * log(distance(A, line_intersection(Line(A, C), Line(B, G))))
By triangle_homothety_1 on A, C, F, E, A, line_intersection(i, median(E, C, F)) we get concurrent(Line(A, C), Line(A, E), Line(F, line_intersection(i, median(E, C, F))))
By triangle_homothety_1 on line_intersection(i, median(E, C, F)), E, A, F, A, C we get concurrent(Line(A, C), Line(A, E), Line(F, line_intersection(i, median(E, C, F))))
By triangle_homothety_1 on E, A, line_intersection(i, median(E, C, F)), A, C, F we get concurrent(Line(A, C), Line(A, E), Line(F, line_intersection(i, median(E, C, F))))
By triangle_homothety_0 on F, C, A, line_intersection(i, median(E, C, F)), A, E we get similar_triangles(A, C, F, E, A, line_intersection(i, median(E, C, F)))
By triangle_homothety_0 on F, A, C, line_intersection(i, median(E, C, F)), E, A we get similar_triangles(A, C, F, E, A, line_intersection(i, median(E, C, F)))
By triangle_homothety_0 on A, E, line_intersection(i, median(E, C, F)), C, A, F we get similar_triangles(A, C, F, E, A, line_intersection(i, median(E, C, F)))
By triangle_homothety_0 on A, line_intersection(i, median(E, C, F)), E, C, F, A we get similar_triangles(A, C, F, E, A, line_intersection(i, median(E, C, F)))
By parallelogram_parallel_definition on line_intersection(i, median(E, C, F)), midpoint(C, F), F, A we get parallelogram(A, F, midpoint(C, F), line_intersection(i, median(E, C, F)))
By triangle_homothety_0 on line_intersection(i, median(E, C, F)), A, E, F, C, A we get similar_triangles(A, C, F, E, A, line_intersection(i, median(E, C, F)))
By power_of_a_point_definition on line_intersection(i, median(E, C, F)), D, A, c we get log(power_of_a_point(line_intersection(i, median(E, C, F)), c)) == log(distance(D, line_intersection(i, median(E, C, F)))) + log(distance(A, line_intersection(i, median(E, C, F))))
By parallelogram_parallel_definition on line_intersection(i, median(E, C, F)), A, F, midpoint(C, F) we get parallelogram(A, F, midpoint(C, F), line_intersection(i, median(E, C, F)))
By triangle_homothety_0 on E, line_intersection(i, median(E, C, F)), A, A, F, C we get similar_triangles(A, C, F, E, A, line_intersection(i, median(E, C, F)))
By triangle_homothety_0 on line_intersection(i, median(E, C, F)), E, A, F, A, C we get similar_triangles(A, C, F, E, A, line_intersection(i, median(E, C, F)))
By parallelogram_parallel_definition on midpoint(C, F), F, A, line_intersection(i, median(E, C, F)) we get parallelogram(A, F, midpoint(C, F), line_intersection(i, median(E, C, F)))
By parallelogram_parallel_definition on F, A, line_intersection(i, median(E, C, F)), midpoint(C, F) we get parallelogram(A, F, midpoint(C, F), line_intersection(i, median(E, C, F)))
By parallelogram_parallel_definition on midpoint(C, F), line_intersection(i, median(E, C, F)), A, F we get parallelogram(A, F, midpoint(C, F), line_intersection(i, median(E, C, F)))
By parallelogram_parallel_definition on F, midpoint(C, F), line_intersection(i, median(E, C, F)), A we get parallelogram(A, F, midpoint(C, F), line_intersection(i, median(E, C, F)))
By parallelogram_parallel_definition on A, line_intersection(i, median(E, C, F)), midpoint(C, F), F we get parallelogram(A, F, midpoint(C, F), line_intersection(i, median(E, C, F)))
By parallelogram_parallel_definition on A, F, midpoint(C, F), line_intersection(i, median(E, C, F)) we get parallelogram(A, F, midpoint(C, F), line_intersection(i, median(E, C, F)))
By power_of_a_point_definition on line_intersection(Line(A, C), Line(B, G)), E, C, d we get log(power_of_a_point(line_intersection(Line(A, C), Line(B, G)), d)) == log(distance(E, line_intersection(Line(A, C), Line(B, G)))) + log(distance(C, line_intersection(Line(A, C), Line(B, G))))
By triangle_homothety_0 on A, C, F, E, A, line_intersection(i, median(E, C, F)) we get similar_triangles(A, C, F, E, A, line_intersection(i, median(E, C, F)))
By triangle_homothety_0 on A, F, C, E, line_intersection(i, median(E, C, F)), A we get similar_triangles(A, C, F, E, A, line_intersection(i, median(E, C, F)))
By triangle_homothety_0 on C, A, F, A, E, line_intersection(i, median(E, C, F)) we get similar_triangles(A, C, F, E, A, line_intersection(i, median(E, C, F)))
By triangle_homothety_0 on C, F, A, A, line_intersection(i, median(E, C, F)), E we get similar_triangles(A, C, F, E, A, line_intersection(i, median(E, C, F)))
By triangle_homothety_0 on E, A, line_intersection(i, median(E, C, F)), A, C, F we get similar_triangles(A, C, F, E, A, line_intersection(i, median(E, C, F)))
By power_of_a_point_definition on line_intersection(Line(A, C), Line(B, G)), C, A, Circle(A, C, projection(C, f)) we get log(power_of_a_point(line_intersection(Line(A, C), Line(B, G)), Circle(A, C, projection(C, f)))) == log(distance(C, line_intersection(Line(A, C), Line(B, G)))) + log(distance(A, line_intersection(Line(A, C), Line(B, G))))
By parallelogram_parallel_definition on E, line_intersection(i, median(E, C, F)), A, midpoint(A, F) we get parallelogram(A, midpoint(A, F), E, line_intersection(i, median(E, C, F)))
By triangle_homothety_0 on midpoint(A, F), A, E, line_intersection(i, median(E, C, F)), E, A we get similar_triangles(A, E, midpoint(A, F), E, A, line_intersection(i, median(E, C, F)))
By triangle_homothety_0 on line_intersection(i, median(E, C, F)), E, A, midpoint(A, F), A, E we get similar_triangles(A, E, midpoint(A, F), E, A, line_intersection(i, median(E, C, F)))
By parallelogram_parallel_definition on A, line_intersection(i, median(E, C, F)), E, midpoint(A, F) we get parallelogram(A, midpoint(A, F), E, line_intersection(i, median(E, C, F)))
By triangle_homothety_0 on line_intersection(i, median(E, C, F)), A, E, midpoint(A, F), E, A we get similar_triangles(A, E, midpoint(A, F), E, A, line_intersection(i, median(E, C, F)))
By parallelogram_parallel_definition on line_intersection(i, median(E, C, F)), A, midpoint(A, F), E we get parallelogram(A, midpoint(A, F), E, line_intersection(i, median(E, C, F)))
By triangle_homothety_0 on A, line_intersection(i, median(E, C, F)), E, E, midpoint(A, F), A we get similar_triangles(A, E, midpoint(A, F), E, A, line_intersection(i, median(E, C, F)))
By parallelogram_parallel_definition on line_intersection(i, median(E, C, F)), E, midpoint(A, F), A we get parallelogram(A, midpoint(A, F), E, line_intersection(i, median(E, C, F)))
By triangle_homothety_0 on A, midpoint(A, F), E, E, line_intersection(i, median(E, C, F)), A we get similar_triangles(A, E, midpoint(A, F), E, A, line_intersection(i, median(E, C, F)))
By triangle_homothety_0 on E, midpoint(A, F), A, A, line_intersection(i, median(E, C, F)), E we get similar_triangles(A, E, midpoint(A, F), E, A, line_intersection(i, median(E, C, F)))
By triangle_homothety_0 on E, A, line_intersection(i, median(E, C, F)), A, E, midpoint(A, F) we get similar_triangles(A, E, midpoint(A, F), E, A, line_intersection(i, median(E, C, F)))
By triangle_homothety_0 on E, A, midpoint(A, F), A, E, line_intersection(i, median(E, C, F)) we get similar_triangles(A, E, midpoint(A, F), E, A, line_intersection(i, median(E, C, F)))
By parallelogram_parallel_definition on E, midpoint(A, F), A, line_intersection(i, median(E, C, F)) we get parallelogram(A, midpoint(A, F), E, line_intersection(i, median(E, C, F)))
By parallelogram_parallel_definition on midpoint(A, F), E, line_intersection(i, median(E, C, F)), A we get parallelogram(A, midpoint(A, F), E, line_intersection(i, median(E, C, F)))
By triangle_homothety_0 on midpoint(A, F), E, A, line_intersection(i, median(E, C, F)), A, E we get similar_triangles(A, E, midpoint(A, F), E, A, line_intersection(i, median(E, C, F)))
By triangle_homothety_0 on E, line_intersection(i, median(E, C, F)), A, A, midpoint(A, F), E we get similar_triangles(A, E, midpoint(A, F), E, A, line_intersection(i, median(E, C, F)))
By triangle_homothety_0 on A, E, midpoint(A, F), E, A, line_intersection(i, median(E, C, F)) we get similar_triangles(A, E, midpoint(A, F), E, A, line_intersection(i, median(E, C, F)))
By parallelogram_parallel_definition on A, midpoint(A, F), E, line_intersection(i, median(E, C, F)) we get parallelogram(A, midpoint(A, F), E, line_intersection(i, median(E, C, F)))
By parallelogram_parallel_definition on midpoint(A, F), A, line_intersection(i, median(E, C, F)), E we get parallelogram(A, midpoint(A, F), E, line_intersection(i, median(E, C, F)))
By triangle_homothety_0 on A, E, line_intersection(i, median(E, C, F)), E, A, midpoint(A, F) we get similar_triangles(A, E, midpoint(A, F), E, A, line_intersection(i, median(E, C, F)))
