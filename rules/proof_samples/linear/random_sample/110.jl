Assumptions:
A, B, C, D, E, F, G: Point
f, g: Line
c, d: Circle
distinct(A, B, C, D, E, F, G)
distinct(f, g)
distinct(c, d)
f == Line(A, C)
c == Circle(A, B, C)
D == projection(B, f)
E == center(c)
g == external_angle_bisector(B, E, C)
d == Circle(B, D, E)
F == midpoint(A, B)
G in g, d

Embedding:
C := {"x": "-0.598723059342697094820096026523970067501068115234375", "y": "-0.61164427575537183567888632751419208943843841552734375"}
B := {"x": "0.536526722515045850769865865004248917102813720703125", "y": "-2.69320624901427851938251478713937103748321533203125"}
A := {"x": "0.4663491578001026649502591681084595620632171630859375", "y": "0.9410999381736260271935634591500274837017059326171875"}
c := {"center": {"x": "1.4251402659042768469438067441120372359682547346102750380091010518692473022336300956290094007935609383655808499702748352145646978987918920936586959133097068204892193059485799036832528236140210469746108671767227407950376491296076501818555132073021099283876494892728152409889674409215859026781726963055878759583859520446636247167876333778461577187490387030822479686696290413304844584606211402376253410764838851475237950846363549219749523134382712176064159461130098626450105237695583202431309837486651327076123938117352329749711922088418262629969407634597059233150671324151177457899510529513940874969124682370475229694374061083975733856254927686915433848108703878157823745014193080988177871888467224790651991013893647019719595481089756081148597818190768289578547852517609470743362519330523907228338340482512803560646579787399237826242775233529876194836203246255278759023361900153379854502442761298018557626309986426505078237403828828183033820613706335262909297359231019881953888297538384702038703989275149346868434162945469898132566455444010016022427220043232011637295967823287262667268994993426295729267469739919248740693505849598688390987771850842871005301524217781674850297450752407223442180479208043193654094089853171741016280038948029519092822800397163872144895067548350022053713549320737611974254953146516439463646980171400106154324642318502876234824666279740810997394874623477317992904582923450560115576370437581536348203533873179825953591669775004884784367168112621384351990397258841327240724329688811262938563108532878125291268760671346489412945813389186760459565034778597799104034192988750598392094487063371877032784612581425209419401229873053028655001064557849295725816766684450065563719781091724321235300276491287962289715637284818777969353729150448439045729345089276768837983026021499640326835054931147127791608172094522564069619383373582346446558174908403830271149383126075563198650666372537380343863071037566281842683977485725223357188344912137422052207274776636332407022615907785795733558", "y": "-0.85821668914487723171986208438978933258402715571384310185740611874399946829093246373584478837151652245678503039665190419335923200571289144955548518139457740141635367172908814458873140085133489434126882508691446926317253394822050123735675904845849769095067273971642063522719467697200714474240737934969763609060274471218255576884062771789178839056076677239047203288459042467866670975085435462186054618960366894141739012549976183471778352145089485230627070824111746988633381420115586140192384953050805139543563368726779467779973101986392335756771000587004194367695100813356260399169350506794863241469590107051636646142623454937941141498596225736895959523820920214918103971784680338957087507653421451780005383163306836356990546356265047215067234790325095259537744605068280254190377583422327906828058661775333846214584627668906171106441646970971171881841063911656625446993122905913026732983714696666771186632234961313380138797834859265707030928576191462489546158519594216963944285230287374765567820257532814834699735170088041931628523848801442459032767130396478018982750016651803691182749757024271472170705458695344110559896923398811917707463527967397412809649056558020092471602651594692042715634922532466453469390064522906609422128139362918336142669490625157701983292350444592321994854220267970969515330752304258464706005963222479955994849480151004063907085500523264096933414558740879052532560713142951873770486951822780135432370664074456185369153740823594576710302231031085990759250915173484059567485139966686006080484415947446487895028514769170431994202079231178968254937341896565821324894762048397876088515816318749239857688386915420927042461975595081320655964053502677821494661668196027765650743445856983722369129635987484753453226847430504180757062180860121962214854183733511102560154762167267777135525835822240773982004532890240285821244877898097426201380996112553969632066969820759347778051327683381117309390853620778862628699969498318171903583722334711795621871552869707570910530611111694912872328"}, "radius_squared": "4.1568207143244637709026959126622759279757991186949301155186017162374469784642229603112447639053838820627468849811769963419175632630507549781411914585573030443313202279005933463248281652135415141612214112857355620216078675999906599217826377840672303302733318058698855099506830300581754906208481033737855825804681568640408988460487723858483585533040630651380854443776907265549784192629480163289419141028543204115124389216893283055242527558635929816958055750171393946617559152996441133213928797591531072268266099857547074945493965104563263818539289761745565214332944049155028147600978357671670934084776701290774480425590428306907568063994758865429898444622888870707638526945265442873020283174701041998550163258100266708262122035741302376566692431442288099941243605163931804372991073720675487834397872342162837479865371023825359229394357264615669495203830569624129370830810421930712602099467361370522699288917037296903155070377078620353909657843294617137776510006370799924640742379103269040114719784121298298479391584133991650033924654075064910978510206302356212579011255139177845459306598669081330460950650235240177620889667819280551577459162389694098513575440310606054121748017709026984187684590672283743745432491335749610693821340494173540116926272914766541152800873246067024379971167644671419721685704773022703290998259024244151622726134050863468810746974091966345616937235609321671116087504043138325367031738052787127196278828783622572013348509388949938496393713793468846087948704200231899120654594608730939091203098341689313849029147708220066375511857813100444614890222753774615887608029379319649638456881512748629832553130216923703295022782948620412612867303821422557192761141832222508022712669683513392202065753157153173604866961127205607084057455962828125452340114198327435690568616562876661808454771968706480045148639334092598696205850566528342890600981090145269805374916010671098523078670517200144267654114268724226272918836058823104678324874740917904438609073562598363384350568071413449470727"}
f := {"point": {"x": "0.4663491578001026649502591681084595620632171630859375", "y": "0.9410999381736260271935634591500274837017059326171875"}, "direction": {"x": "-1.0650722171427997597703551946324296295642852783203125", "y": "-1.55274421392899786287244978666421957314014434814453125"}}
E := {"x": "1.4251402659042768469438067441120372359682547346102750380091010518692473022336300956290094007935609383655808499702748352145646978987918920936586959133097068204892193059485799036832528236140210469746108671767227407950376491296076501818555132073021099283876494892728152409889674409215859026781726963055878759583859520446636247167876333778461577187490387030822479686696290413304844584606211402376253410764838851475237950846363549219749523134382712176064159461130098626450105237695583202431309837486651327076123938117352329749711922088418262629969407634597059233150671324151177457899510529513940874969124682370475229694374061083975733856254927686915433848108703878157823745014193080988177871888467224790651991013893647019719595481089756081148597818190768289578547852517609470743362519330523907228338340482512803560646579787399237826242775233529876194836203246255278759023361900153379854502442761298018557626309986426505078237403828828183033820613706335262909297359231019881953888297538384702038703989275149346868434162945469898132566455444010016022427220043232011637295967823287262667268994993426295729267469739919248740693505849598688390987771850842871005301524217781674850297450752407223442180479208043193654094089853171741016280038948029519092822800397163872144895067548350022053713549320737611974254953146516439463646980171400106154324642318502876234824666279740810997394874623477317992904582923450560115576370437581536348203533873179825953591669775004884784367168112621384351990397258841327240724329688811262938563108532878125291268760671346489412945813389186760459565034778597799104034192988750598392094487063371877032784612581425209419401229873053028655001064557849295725816766684450065563719781091724321235300276491287962289715637284818777969353729150448439045729345089276768837983026021499640326835054931147127791608172094522564069619383373582346446558174908403830271149383126075563198650666372537380343863071037566281842683977485725223357188344912137422052207274776636332407022615907785795733558", "y": "-0.85821668914487723171986208438978933258402715571384310185740611874399946829093246373584478837151652245678503039665190419335923200571289144955548518139457740141635367172908814458873140085133489434126882508691446926317253394822050123735675904845849769095067273971642063522719467697200714474240737934969763609060274471218255576884062771789178839056076677239047203288459042467866670975085435462186054618960366894141739012549976183471778352145089485230627070824111746988633381420115586140192384953050805139543563368726779467779973101986392335756771000587004194367695100813356260399169350506794863241469590107051636646142623454937941141498596225736895959523820920214918103971784680338957087507653421451780005383163306836356990546356265047215067234790325095259537744605068280254190377583422327906828058661775333846214584627668906171106441646970971171881841063911656625446993122905913026732983714696666771186632234961313380138797834859265707030928576191462489546158519594216963944285230287374765567820257532814834699735170088041931628523848801442459032767130396478018982750016651803691182749757024271472170705458695344110559896923398811917707463527967397412809649056558020092471602651594692042715634922532466453469390064522906609422128139362918336142669490625157701983292350444592321994854220267970969515330752304258464706005963222479955994849480151004063907085500523264096933414558740879052532560713142951873770486951822780135432370664074456185369153740823594576710302231031085990759250915173484059567485139966686006080484415947446487895028514769170431994202079231178968254937341896565821324894762048397876088515816318749239857688386915420927042461975595081320655964053502677821494661668196027765650743445856983722369129635987484753453226847430504180757062180860121962214854183733511102560154762167267777135525835822240773982004532890240285821244877898097426201380996112553969632066969820759347778051327683381117309390853620778862628699969498318171903583722334711795621871552869707570910530611111694912872328"}
D := {"x": "-1.2064559164712459745581537291499186606918735169622675674293730970343963517957128957465893675813589623253030451726756987718696338767791355804107938454394024927564583628943494902028632658088012524613365556175630853292556080185508031137135265016112661615104684498661478210261144058400485606735861906477859732494897049869643767656224243046244981778927772169076628132814853103650886880137369721308992952991511554346726601155953534548891168570009394972512804405061206082964957819081535617695052118928609808874275530488552192433278380297346313053390852118779006280941141689545261637593899453647684083346387537537656994316034662664103891333542455182049782729885513189789230253134551650198006372001178331022566453782478096694638287656734062824735265345244363860719935635082824059338710670012215234898065518100847784355146525638656146878947711565843314810478109801284962344232025398061537207324186222023004515067070185068147782306221348065230942493767896188731662958108180533049796751080872264369382832271026700200544988859326907370035320009875214331216102900653478229242230415044420009041659237274313447075117836414110427805941232831781052784223401335781354088743729678152647039757063084732856085805402608631488420726348793163187702094865094560665485831572366599160043446192531859944193952640788551906809375528675194903331912991666235579827738071134896447952185954960501734599119096969003549448503034153891075748798834103720933861292159685600828808852881500787401501414694278747019710263742590799210822205815690997329008402868414445072874746031286832119944368603432866069287150068731761072824931214487385034732275615444564871338993521846841777616449397586429323151192730687957961025028282516377906157659798566606472667450113330382269358166884875595458145350691685059381341059658918210085324302353233227317260051756844663383582118329861691977516388034946781988457315731191629232931896555424470124117384313260978792401361953076403030350086665710770228416246312207954229553438037733807228739445026858988324617727", "y": "-1.4976439876362912208453220587091303818782232238882281147063062001665551918784278558442595620285513275175864742471241795611825905571568883797454004886788846496718483919700929142708359702543768498024852620098591883163770574534313715261579500297249827357482036622600721538100855950497420400687550837893276317163613283720779133594600819169164360571008812680348620967202850176010190747699852530974745805507890571001418712561155195713220006066967811970312331329502985068816050258237767101234859373887549870743568470900556075116362009605015942347410256588515504035612384339567998492491493612298525617510807166715167652374723437266016109128195688871064973299621273299752217557445759737082318911704696362312051900142005290169777703963196058281058653564649655636618008150254439097566850735066135345037593573041059595302953159444878926855615081999263314101264873287180075079750057490788136026204834622896025309725909874430058103094971748117894211921812257929432211747034263139320200323487615706339024068652751028384540161506964076178829483734161589168816491410215822680665466223714256515636119325740099176361054921189156677485710937807552441167812022638321985678232606579972722310060380683535024489395802363849340036125004754872620206427420252481576183193755236840026024704948960915325365081771989168535338746265181426736669657646263955850471766332871034307424534272906424065805689099004295908945571918107494806506897553880421512514515758257432277202976827858136206113030035667503229868071605762084518943691192492943728390144659861925380743357399106287838428648800938279527780485964219790609857174053133840490379892264525967054271246829165486513142180385204623988123748128555926199119449606144959029428778022574532107534420567429645776427293645034805159342878832495607141884049502342746067624029416420301404401227790834974632284919193129716151597852875116231437699950042972338445315288462525952364305133078112260374377270984457748845842192776079041812924356527106002279904842990039932679869165085298727843904194"}
d := {"center": {"x": "0.15774149940869534767692835573785257528111748556907438201386903020260242073652835525218143335125130978806469956618771043808818296281299091534507787401553988710070332609862253318207663560814576484180016440850965988352123038821303501160661019559960684173364704058247738260709573247592840235207232395259756281501474142882606661987655564202452452948601255360030280497122661314401375806056046198034106112903130010292256918400145957574717243276063319858282917237621798620186506794943840466000908866981158062780099760516951617488716577560616391690689228948368098873285723509289774386929889917055808715625873110525606532593651042474117252329003817770196324300313496187203965032771964047604664747435196923410127748177993669650410909235773127841631657366784958750407361561942728566454158658558159332728955227155131654559547555820443112764250621598037575543429744955550095074463219779442352645411401238069635409476049674065387779437800031500743868204808547077473520361364074149015649523842084594157418076917995738528397358088520482201134626713514852008063295567063296039099414123124056627976149830088610736040138907479989835426836290659437774823449935699209649625902214136562463795936857449932336458279680249221265234643293769797119511315006898020740062601348302946285920249799763776389343973298968984648544639836404354558875316996991293406949191103964788827651418714554724551666557479928306712799882009063962458263015207064351971502328593702266486170427057577630733356615595315314965654759701691214456467262862551261411468429688038737716794704212273870802870545508543718435494414612277651895540099301122192100147893691776866940871436899061549418067550917015938022408205108944484423675622318743509469478179845433843728120597320776161386882717366735201934711634438352607827392400395135486720556966554614713826535124948342203707480391394607859789861059257054168367278416805450647119364680806451711464730100087168678350695687871112101974288188052131316905873060561617044296079793914564483066863680065823330367598763", "y": "-1.3771202672378342130315369554656654321108155901644159183628155911464073981860878002823207235664215967924969942545968257677144448474028464232039172699324308195560724356344900757361661518120520595264250751196351234211047272884305796990017744622213447411844593506440021470598746227582237428852107168776927223139127783736084862904201087627592045467885672591885450118561491775812644051576898336575633376718094675336591124579501149455497988781215088687868588731499753713751268449695162638658389499005964226156057172956606861896016249807356674918399500923731593166573698820426545844707377472597850470486206857951363419332465671032627226892710593353050103358546495890147847306561746909873079856659422860097472055508163879672733002037010528792515409018375674194453455692303520078107717849950407237952473038012791578960375991168165713802363356909498270191132642053124021696553585912872582924983976704760076454053828873656830814813755193315704129831680306129601646293913157680276198044234767879787871371417704116470185828578673320967395354961064279732701700645478138862979533267739045909170508030168176666553194788043744048372183573153850251951434345488022997156544755853121661021413916407554225795268553367835307384425369916134141739327492170297909819524861375729819454178562372404355087464623568940271608453208428355907291370249771377504830470869563545882211793098291569178099361919500693726214346633095321901730408815222435643694468370193828077485115439581809290906214351030688652900206562112771906327017264639195061644935221153309466447484877096739268648069768823501074886578047481088456041618168959106649912574645387005987955390421632751373651839742498814047118678531023244903640727109822165131481776432169939715900176746158803374661491615098064148476438037624624101010920653809699974401329742147750531157169924515952173688954749763464147565138248029992122051856712437656595544831224433733944046011765638643678222136624143814188982006980429791158319985623141337013144028736127309181100059444890681959804633"}, "radius_squared": "1.8755605566721950219061996185331284613085680158035195755102979068532419179671099479410523609613325718386942320934574553518522411609588945998749363016493616708497575405377706533833733352490474676472603396053884932034424056158996180996288488011636925249475178721650854971945978054102234677235926207483816944390996617587838986483251675365046702939981052168730061626145805842013434591995352652257597769224901395847268428652740877990359600895356977333981771800092176826152855440903362090855836757204298155349318504955953879220060334613825737517450881132212708891817157276653344111992432992773456176879490387533317569647416499711232062204063719622218437817182171487293973828991712371760394673347859449958765497803137346755229947303843401237750799903540172124024964180477901294654519604115746757462817627112172099488416090907607644481769090339642631495009454188567461307460898535931999297984329377952651714553492706210177399480768383922083559244786985058798610185802132310594452414284823455798430534388702524242825275154959835985505239291193399172698238815399931062813178359137318180321582485033454496700527046111339474736258442208379402225098012342737263814634973778157297855138938822943926601309191065619692259385950787137307580513793259828463617997456921908196175715979889031421203782934374543395784169444447144531810854000111561472657467280286622420507136594905880337763910474429936325798230521618513909671627933963058280668667899052257256909855452765588269105402392247302956901578919419111106818960061030850019554782833259746851043311486339693749171494913393743711675712084429944349646706250078570363808305319284017752976931544234810477541409211112428937447871613383649019443430825018434139250630654122513092992079016874283243907220312869960824551871849764320357406308057204116197795503206120027952472792549430858076640991555937385538674258868955199661756338142648950829666197047189481655875224372783553857883392035438198814668894264303440261236807468434137034908944478376402675782433858402063999631565"}
g := {"point": {"x": "1.4251402659042768469438067441120372359682547346102750380091010518692473022336300956290094007935609383655808499702748352145646978987918920936586959133097068204892193059485799036832528236140210469746108671767227407950376491296076501818555132073021099283876494892728152409889674409215859026781726963055878759583859520446636247167876333778461577187490387030822479686696290413304844584606211402376253410764838851475237950846363549219749523134382712176064159461130098626450105237695583202431309837486651327076123938117352329749711922088418262629969407634597059233150671324151177457899510529513940874969124682370475229694374061083975733856254927686915433848108703878157823745014193080988177871888467224790651991013893647019719595481089756081148597818190768289578547852517609470743362519330523907228338340482512803560646579787399237826242775233529876194836203246255278759023361900153379854502442761298018557626309986426505078237403828828183033820613706335262909297359231019881953888297538384702038703989275149346868434162945469898132566455444010016022427220043232011637295967823287262667268994993426295729267469739919248740693505849598688390987771850842871005301524217781674850297450752407223442180479208043193654094089853171741016280038948029519092822800397163872144895067548350022053713549320737611974254953146516439463646980171400106154324642318502876234824666279740810997394874623477317992904582923450560115576370437581536348203533873179825953591669775004884784367168112621384351990397258841327240724329688811262938563108532878125291268760671346489412945813389186760459565034778597799104034192988750598392094487063371877032784612581425209419401229873053028655001064557849295725816766684450065563719781091724321235300276491287962289715637284818777969353729150448439045729345089276768837983026021499640326835054931147127791608172094522564069619383373582346446558174908403830271149383126075563198650666372537380343863071037566281842683977485725223357188344912137422052207274776636332407022615907785795733558", "y": "-0.85821668914487723171986208438978933258402715571384310185740611874399946829093246373584478837151652245678503039665190419335923200571289144955548518139457740141635367172908814458873140085133489434126882508691446926317253394822050123735675904845849769095067273971642063522719467697200714474240737934969763609060274471218255576884062771789178839056076677239047203288459042467866670975085435462186054618960366894141739012549976183471778352145089485230627070824111746988633381420115586140192384953050805139543563368726779467779973101986392335756771000587004194367695100813356260399169350506794863241469590107051636646142623454937941141498596225736895959523820920214918103971784680338957087507653421451780005383163306836356990546356265047215067234790325095259537744605068280254190377583422327906828058661775333846214584627668906171106441646970971171881841063911656625446993122905913026732983714696666771186632234961313380138797834859265707030928576191462489546158519594216963944285230287374765567820257532814834699735170088041931628523848801442459032767130396478018982750016651803691182749757024271472170705458695344110559896923398811917707463527967397412809649056558020092471602651594692042715634922532466453469390064522906609422128139362918336142669490625157701983292350444592321994854220267970969515330752304258464706005963222479955994849480151004063907085500523264096933414558740879052532560713142951873770486951822780135432370664074456185369153740823594576710302231031085990759250915173484059567485139966686006080484415947446487895028514769170431994202079231178968254937341896565821324894762048397876088515816318749239857688386915420927042461975595081320655964053502677821494661668196027765650743445856983722369129635987484753453226847430504180757062180860121962214854183733511102560154762167267777135525835822240773982004532890240285821244877898097426201380996112553969632066969820759347778051327683381117309390853620778862628699969498318171903583722334711795621871552869707570910530611111694912872328"}, "direction": {"x": "0.55681481299486955287880851075826254558934920865377163175287233546524851448770163124563233600600873804180641620151991425794205825428748915075122421770808134094027431838277299278199197899662485219930142577230647341382425518649081030183796177834670481069528729342752349458441255402809079342244460826396827338317365384856771017525070270923017814061739149160010358122003099162807589396168101532638140614602580530109116007807704104182732371573502416914710941275104262572117234410725178793314803539284388852684544559651216654729237343894364968165598479670089350660485060575589025892705637757130869068290976176491066893995760510861289425931692040367100393659359893300028094960658642638733416092418434558328443190300914548066939421098680554481037490665579887073573250818837076842317212027765232542099020940044469742693547252278177803694264334262624658391407071698549918635952269403070032040659819826534923863227248300400153943114598111100748033927307151696084932341605704932012164036138895669213438187644151459407052018400237240459027011379201991530122134202686032187003638826536977102163944973361523934841610357240354398004457048078121976228521552492781724703969513094351520700106014390635808371583582379223894376994086213644771690930259284191938551770644777695166263391564834883020416490068001924475339643062074601778570904473015152571564041198939227258110650683457876779002442440154218974734517514952458997714401384886730766789988996283936543994501866498383089722927688124890359794174397869563524404333053349898586037446184955815298244830053255444764444202354436293440327179943766954627527198485072883523673839413608056526766417692656522786305648623407680325449550105084635194026063524017067441468277445921091515488259203512608321585512627299431647741466647170462611545783321922725117759018322287435675887074636978746162904631650300113105280367278462645602397613103774123094729231825539517716640111153510473980250802024652381282817965278158588952331789211905114608557195223002075109291356286432448667947424", "y": "-1.0209599326949076082125567952189834171057770059190568111318174661912414793822165019748897508490008691150582563249538469354355935246627122031268331633820811052822092220308153881456707389302424768120237161187838391241248097663490344557513949011046922149432433354747200412639683855537221200388050821657068061611564593616086954981414150310305495960352166559603979813919208187134419024268841351646394685706830722446270506569683404155696078132121944247121489379014847379168493098042374491177901201281070877128365917136774331172241639679369194093674961536166782301800416009484674507753271008435059541491838513454349297513106478166768701485393137070110971237747492765859705980846328897746073740447717299249451578064939562696384020019594061637422769301217110881885307963429578931725085726149866927717443502583959299649299852453619010003094239790958747139203694282999120240512447170830227414477900453796304067876253969546425623396636614127232275037077117476582070642468938559257376874317763544305588010511195584663099339696566058862093398715122770243993390616517578749069704839680749104577017630535769424012477461712138709430756922738381944079659517815831078292064617905148414005901932608110342282060846695630728727608902942288692945778300729211352508588168732592945963348049335379351633318193761560348091160589211524962587775165911256382765110253279472714783731383885088674995607514394430305061224482855566201503451129296336533397645570610542381537805251259625371263125362010957781935287386921359639055724821585224199759949753647446686532038030082298610444215000823197246961471031015970304293105882756992428591051953996751628859053515441193193345466463247302793984619563644300186534380690631066948498927529139154721868605880594176227189155616516463451298892388922254075249969572301936376193285312213023956542230496278301927041408058098145272855360279896018747325429846904947027688301352414797256595714229709741739429597355866212550710840065507108105703427153409573140168315396995120808779571781996788195079371"}}
G := {"x": "1.2802742161406867671099231196892575840124223515476172304593209559567347403731236337091930049341974654685630064050256446236568519864241714210112847285732233373516148594495016411348985986860982527320052991244341912700177137532686505782205517877958987934589194570916194934000477144658514528576602142911009563596865344851874515542290651955027364146028957122067913613586136887226448643007322792022898462593077119893062091257514022018090243751932450641880144129945099575854850713271350395012165699972940583114521344463028829777819083240821303529924860717032751324613844608948910429751794690368172466427489373408553768175550431919237757838466661722813919965302937679828471218213112317354206086457361354650247639256692721305707782559667626765989608313965177205451578433674015867975111319251013495830722747713464569225127774510840945182155969330201116066660462563732547218326818925899688996892144254242290226960437158265402145261954169022520743490503561306384034376448273414827274723873792973302809076339615723190261725850253319254625755212270854238326682498428605622881605127557407877971222013732549342422445440869695748887337838019929836407649735238099804804703549636943738754095302233501630288255914381882764671501947870503510768384033922639573023815296917215749853000124591437920046621813147797699091721027116057717481449294400972265389822879343643420566924395969933009345842655452472419722556992900308731033771048605190147766572684553531645758867933426214947848156269783187168496357288412662263632116639154997507633663721256990574933355789227056377036991098257742431691397885621695577092476680508043826227774053452821195718292562635758030808601397930576927188060075594178186529462875092172037852038284814901698389711823561404812955505946788702610850044295285399810140824264147105379362950569763715987020290368711260380093515378763261494655736260634107243030590314679938461489208887497724591819387867211647305723895945219740405175437327939792465478196033395759510552200935816003404352168576065349110641653", "y": "-0.59259438714305382600862875397900025134407668250585010817196812505580267468213397721260704289020894471281587961642466640401499000486536289954738050523973770886328367864763638144004810016041343683882009625959409841959623790225355995941550254827792384280678913177406274159704504341163248162742997752779752915776873166028276072287753576522256439217854673022259278872949213461655913514191701096086270102714484276054700045925884839420006021126000594494442253060618220863674378972064834444964000979843882143882396126614094844341404998347816355875442907792427439519649095075272081611889018038507538039556794147501359312295379113229159790444233210702650957707874211691046289322709960635673256436427699711631619796558406704529405713189245164679643800973060285049109562218501417717066114927211724181536096727187391309294601663240789419270294233676276780004649212561374725751472375715925046117990598227589701526877921265365881895223762067233685661175352726216796291957458211876588672928495765334270170124143180482744127965646288098006745020200000975735386824986921769304519770563496052465737379974280948020809608808206725163184446283571222568206791814107013915486202821493847922131124655712766298010602027447707287660575760356429914766757163355934313110240532423026121492221507231975470433376723996528778234218211726042388668274429310642495004329306981904389168027987048744430810308421676956338036024189374479496572950542406488840794963471349706255878878695946314517198175524614746875128030558531365555679488320452985037941289751985149483922608201752624616864522426171787520258087234756986175649730846488163681840567849010398169690905061249812582013387797643253341889025388884714136509809322457487210616720696473259507795542620870766123432532938882398900094386844047845690455516782781434167642837363277236194291790210692645052074843501863882059193858841406891832353565849219788328580461990965584279128841563523109275434014421109379547274727311813974730346829268715505029084737796235027331773284409585862040612959"}
F := {"x": "0.50143794015757425786006251655635423958301544189453125", "y": "-0.87605315542032624609447566399467177689075469970703125"}

Need to prove:
collinear(D, F, G)

Proof:
By line_definition on C, D, f we get f == Line(C, D)
By line_definition on E, G, g we get g == Line(E, G)
By line_definition on D, A, f we get f == Line(A, D)
By line_definition on B, D, perpendicular_line(B, f) we get Line(B, D) == perpendicular_line(B, f)
By circle_definition on D, G, E, d we get d == Circle(D, E, G)
By circle_definition on B, E, G, d we get d == Circle(B, E, G)
By perpendicular_line_definition on D, f, perpendicular_line(B, f) we get f == perpendicular_line(D, perpendicular_line(B, f))
By perpendicular_line_definition on A, f, perpendicular_line(B, f) we get f == perpendicular_line(A, perpendicular_line(B, f))
By circle_definition on D, B, G, d we get d == Circle(B, D, G)
By perpendicular_line_definition on C, f, perpendicular_line(B, f) we get f == perpendicular_line(C, perpendicular_line(B, f))
By perpendicular_line_definition on D, perpendicular_line(B, f), f we get perpendicular_line(B, f) == perpendicular_line(D, f)
By between_imply_not_between on B, F, A we get collinear_and_not_between(A, B, F)
By between_imply_not_between on A, F, B we get collinear_and_not_between(B, A, F)
By circle_radius_v0_r on C, c we get radius(c) == distance(C, center(c))
By circle_radius_v0_r on A, c we get radius(c) == distance(A, center(c))
By circle_radius_v0_r on B, c we get radius(c) == distance(B, center(c))
By different_points_v1 on A, C we get 0 != distance(A, C)
By center_not_on_circle on c we get center(c) not in c
By in_imply_collinear on D, C, A we get collinear(A, C, D)
By not_in_line_equivalent_to_not_collinear_v0_r on F, A, C we get F not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on B, C, A we get B not in Line(A, C)
By in_imply_concyclic on B, E, D, G we get concyclic(B, D, E, G)
By angle_bisector_draw_angle_v1 on B, E, C we get exists(Line(B, E), Line(C, E))
By not_in_line_equivalent_to_not_collinear_v0_r on G, A, C we get G not in Line(A, C)
By angle_bisector_draw_angle_v1 on C, E, B we get exists(Line(B, E), Line(C, E))
By line_circle_intersection_has_at_most_two_points_0 on A, B, F, c we get F not in c
By not_in_line_equivalent_to_not_collinear_v0_r on E, C, A we get E not in Line(A, C)
By power_of_a_point_on_circle on B, d we get 0 == power_of_a_point(B, d)
By power_of_a_point_in_circle on E, d we get 0 == power_of_a_point(E, d)
By power_of_a_point_on_circle on D, d we get 0 == power_of_a_point(D, d)
By power_of_a_point_in_circle on A, c we get 0 == power_of_a_point(A, c)
By power_of_a_point_in_circle on G, d we get 0 == power_of_a_point(G, d)
By power_of_a_point_in_circle on C, c we get 0 == power_of_a_point(C, c)
By angles_on_chord_v1 on G, E, B, D, d we get angle(G, B, E) == angle(G, D, E) mod 360
By power_of_a_point_on_circle on B, c we get 0 == power_of_a_point(B, c)
By angles_on_chord_v3 on D, E, B, G, d we get angle(D, B, E) == angle(D, G, E) + 180 mod 360
By angles_on_chord_v2 on G, B, E, D, d we get angle(G, E, B) == angle(G, D, B) + 180 mod 360
By angles_on_chord_v0 on D, B, G, E, d we get angle(D, E, B) == angle(D, G, B) mod 360
By angles_on_chord_v1 on E, B, G, D, d we get angle(E, D, B) == angle(E, G, B) mod 360
By angles_on_chord_v3 on E, D, G, B, d we get angle(E, G, D) == angle(E, B, D) + 180 mod 360
By angles_on_chord_v0 on B, E, G, D, d we get angle(B, D, E) == angle(B, G, E) mod 360
By angles_on_chord_v3 on G, B, D, E, d we get angle(G, D, B) == angle(G, E, B) + 180 mod 360
By angles_on_chord_v1 on B, D, G, E, d we get angle(B, E, D) == angle(B, G, D) mod 360
By angles_on_chord_v0 on E, G, D, B, d we get angle(E, B, G) == angle(E, D, G) mod 360
By angles_on_chord_v2 on E, D, B, G, d we get angle(E, B, D) == angle(E, G, D) + 180 mod 360
By angles_on_chord_v3 on B, G, E, D, d we get angle(B, E, G) == angle(B, D, G) + 180 mod 360
By angle_to_center on A, B, C, c we get 2 * angle(A, B, C) == angle(A, center(c), C) mod 360
By angles_on_chord_v1 on D, G, E, B, d we get angle(D, B, G) == angle(D, E, G) mod 360
By angles_on_chord_v0 on G, D, B, E, d we get angle(G, B, D) == angle(G, E, D) mod 360
By angles_on_chord_v2 on D, E, G, B, d we get angle(D, G, E) == angle(D, B, E) + 180 mod 360
By angles_on_chord_v2 on B, G, D, E, d we get angle(B, D, G) == angle(B, E, G) + 180 mod 360
By angle_to_center on B, A, C, c we get 2 * angle(B, A, C) == angle(B, center(c), C) mod 360
By angle_to_center on C, A, B, c we get 2 * angle(C, A, B) == angle(C, center(c), B) mod 360
By angle_to_center on C, B, A, c we get 2 * angle(C, B, A) == angle(C, center(c), A) mod 360
By angle_to_center on B, C, A, c we get 2 * angle(B, C, A) == angle(B, center(c), A) mod 360
By angle_to_center on A, C, B, c we get 2 * angle(A, C, B) == angle(A, center(c), B) mod 360
By same_angle_v1 on A, F, B, C we get angle(B, A, C) == angle(F, A, C) mod 360
By log_of_2_times_distance on B, A, F, A we get log(distance(A, B)) == 0.6931471805599453 + log(distance(A, F))
By altitude_definition on B, A, C, perpendicular_line(B, f) we get altitude(B, A, C) == perpendicular_line(B, f)
By collinear_definition on B, F, A we get F in Line(A, B), A in Line(B, F), Line(A, B) == Line(B, F), 0 == 2 * angle(F, B, A) mod 360
By log_of_2_times_distance on B, A, F, B we get log(distance(A, B)) == 0.6931471805599453 + log(distance(B, F))
By collinear_definition on F, A, B we get A in Line(B, F), B in Line(A, F), Line(A, F) == Line(B, F), 0 == 2 * angle(A, F, B) mod 360
By collinear_definition on B, A, F we get A in Line(B, F), F in Line(A, B), Line(A, B) == Line(B, F), 0 == 2 * angle(A, B, F) mod 360
By collinear_definition on A, B, F we get B in Line(A, F), F in Line(A, B), Line(A, B) == Line(A, F), 0 == 2 * angle(B, A, F) mod 360
By collinear_definition on F, B, A we get B in Line(A, F), A in Line(B, F), Line(A, F) == Line(B, F), 0 == 2 * angle(B, F, A) mod 360
By collinear_definition on A, F, B we get F in Line(A, B), B in Line(A, F), Line(A, B) == Line(A, F), 0 == 2 * angle(F, A, B) mod 360
By isosceles_triangle_properties on F, B, A we get distance(A, F) == distance(B, F), angle(B, A, F) == angle(F, B, A) mod 360
By isosceles_triangle_properties on F, A, B we get distance(A, F) == distance(B, F), angle(A, B, F) == angle(F, A, B) mod 360
By between_implies_angles on A, F, B we get 180 == angle(A, F, B) mod 360, 0 == angle(F, B, A) mod 360, 0 == angle(B, A, F) mod 360
By between_implies_angles on B, F, A we get 180 == angle(B, F, A) mod 360, 0 == angle(F, A, B) mod 360, 0 == angle(A, B, F) mod 360
By same_angle_v1 on B, F, A, E we get angle(A, B, E) == angle(F, B, E) mod 360
By same_angle_v0 on B, A, F, C we get angle(A, B, C) == angle(F, B, C) mod 360
By perpendicular_direction_conditions_v0_r on C, A, D, B we get 180 == 2 * direction(C, A) - 2 * direction(D, B) mod 360
By same_angle_v1 on B, A, F, G we get angle(A, B, G) == angle(F, B, G) mod 360
By perpendicular_direction_conditions_v0_r on A, C, D, B we get 180 == 2 * direction(A, C) - 2 * direction(D, B) mod 360
By same_angle_v0 on B, F, A, D we get angle(A, B, D) == angle(F, B, D) mod 360
By perpendicular_direction_conditions_v0_r on A, C, B, D we get 180 == 2 * direction(A, C) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on C, A, B, D we get 180 == 2 * direction(C, A) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on D, B, C, A we get 180 == 2 * direction(D, B) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on B, D, C, A we get 180 == 2 * direction(B, D) - 2 * direction(C, A) mod 360
By projection_definition on C, D, Line(B, D) we get D == projection(C, Line(B, D))
By projection_definition on A, D, Line(B, D) we get D == projection(A, Line(B, D))
By perpendicular_direction_conditions_v0_r on B, D, A, C we get 180 == 2 * direction(B, D) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on D, B, A, C we get 180 == 2 * direction(D, B) - 2 * direction(A, C) mod 360
By different_points_v1 on D, E we get 0 != distance(D, E)
By different_points_v1 on E, C we get 0 != distance(C, E)
By different_points_v1 on D, B we get 0 != distance(B, D)
By different_points_v1 on E, G we get 0 != distance(E, G)
By different_points_v1 on B, G we get 0 != distance(B, G)
By different_points_v1 on C, B we get 0 != distance(B, C)
By different_points_v1 on C, D we get 0 != distance(C, D)
By different_points_v1 on D, G we get 0 != distance(D, G)
By perpendicular_direction_conditions_v0_r on D, B, C, D we get 180 == 2 * direction(D, B) - 2 * direction(C, D) mod 360
By different_points_v1 on E, A we get 0 != distance(A, E)
By different_points_v1 on B, E we get 0 != distance(B, E)
By different_points_v1 on A, D we get 0 != distance(A, D)
By same_angle_v1 on A, F, B, D we get angle(B, A, D) == angle(F, A, D) mod 360
By same_angle_v0 on A, B, F, E we get angle(B, A, E) == angle(F, A, E) mod 360
By same_angle_v3 on C, D, A, B we get angle(D, C, B) == angle(A, C, B) + 180 mod 360
By same_angle_v0 on A, C, D, F we get angle(C, A, F) == angle(D, A, F) mod 360
By same_angle_v0 on A, D, C, B we get angle(C, A, B) == angle(D, A, B) mod 360
By perpendicular_direction_conditions_v0_r on D, C, B, D we get 180 == 2 * direction(D, C) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on D, C, D, B we get 180 == 2 * direction(D, C) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on D, B, A, D we get 180 == 2 * direction(D, B) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on A, D, D, B we get 180 == 2 * direction(A, D) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on B, D, A, D we get 180 == 2 * direction(B, D) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on D, A, B, D we get 180 == 2 * direction(D, A) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on A, D, B, D we get 180 == 2 * direction(A, D) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on B, D, D, A we get 180 == 2 * direction(B, D) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on D, B, D, C we get 180 == 2 * direction(D, B) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on D, B, D, A we get 180 == 2 * direction(D, B) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on C, D, B, D we get 180 == 2 * direction(C, D) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on B, D, D, C we get 180 == 2 * direction(B, D) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on D, A, D, B we get 180 == 2 * direction(D, A) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on C, D, D, B we get 180 == 2 * direction(C, D) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on B, D, C, D we get 180 == 2 * direction(B, D) - 2 * direction(C, D) mod 360
By probably_between_and_collinear_implies_between on D, C, A we get between(A, C, D)
By not_in_line_equivalent_to_not_collinear_v0_r on F, B, E we get F not in Line(B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on A, B, E we get A not in Line(B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on F, G, B we get F not in Line(B, G)
By not_in_line_equivalent_to_not_collinear_v0_r on C, E, A we get C not in Line(A, E)
By reverse_direction on C, B we get 180 == direction(C, B) - direction(B, C) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on G, A, E we get G not in Line(A, E)
By reverse_direction on B, F we get 180 == direction(B, F) - direction(F, B) mod 360
By reverse_direction on D, E we get 180 == direction(D, E) - direction(E, D) mod 360
By reverse_direction on G, B we get 180 == direction(G, B) - direction(B, G) mod 360
By line_inequality on Line(B, D), f, B we get f != Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on C, D, E we get C not in Line(D, E)
By reverse_direction on E, G we get 180 == direction(E, G) - direction(G, E) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on C, B, G we get C not in Line(B, G)
By reverse_direction on B, A we get 180 == direction(B, A) - direction(A, B) mod 360
By reverse_direction on A, F we get 180 == direction(A, F) - direction(F, A) mod 360
By external_angle_bisector_definition_v0 on C, G, B, E we get 180 == angle(C, E, G) + angle(B, E, G) mod 360
By reverse_direction on B, G we get 180 == direction(B, G) - direction(G, B) mod 360
By reverse_direction on G, E we get 180 == direction(G, E) - direction(E, G) mod 360
By reverse_direction on E, B we get 180 == direction(E, B) - direction(B, E) mod 360
By reverse_direction on B, C we get 180 == direction(B, C) - direction(C, B) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on D, B, C we get D not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on E, G, D we get E not in Line(D, G)
By reverse_direction on B, D we get 180 == direction(B, D) - direction(D, B) mod 360
By reverse_direction on F, A we get 180 == direction(F, A) - direction(A, F) mod 360
By reverse_direction on C, A we get 180 == direction(C, A) - direction(A, C) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on C, D, G we get C not in Line(D, G)
By not_in_line_equivalent_to_not_collinear_v0_r on G, B, C we get G not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on B, E, C we get B not in Line(C, E)
By reverse_direction on D, B we get 180 == direction(D, B) - direction(B, D) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on D, F, B we get D not in Line(B, F)
By reverse_direction on A, C we get 180 == direction(A, C) - direction(C, A) mod 360
By reverse_direction on A, B we get 180 == direction(A, B) - direction(B, A) mod 360
By line_inequality on Line(B, E), f, E we get f != Line(B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on F, G, E we get F not in Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on E, A, F we get E not in Line(A, F)
By reverse_direction on F, B we get 180 == direction(F, B) - direction(B, F) mod 360
By reverse_direction on B, E we get 180 == direction(B, E) - direction(E, B) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on G, B, F we get G not in Line(B, F)
By reverse_direction on D, G we get 180 == direction(D, G) - direction(G, D) mod 360
By reverse_direction on G, D we get 180 == direction(G, D) - direction(D, G) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on D, B, G we get D not in Line(B, G)
By not_in_line_equivalent_to_not_collinear_v0_r on E, F, B we get E not in Line(B, F)
By reverse_direction on E, D we get 180 == direction(E, D) - direction(D, E) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on E, G, B we get E not in Line(B, G)
By not_in_line_equivalent_to_not_collinear_v0_r on A, B, D we get A not in Line(B, D)
By line_circle_intersection_has_at_most_two_points_0 on C, A, D, c we get D not in c
By not_in_line_equivalent_to_not_collinear_v0_r on D, B, A we get D not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on F, E, C we get F not in Line(C, E)
By not_in_line_equivalent_to_not_collinear_v0_r on F, B, C we get F not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on C, B, D we get C not in Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on C, B, F we get C not in Line(B, F)
By not_in_line_equivalent_to_not_collinear_v0_r on F, D, E we get F not in Line(D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on G, F, A we get G not in Line(A, F)
By not_in_line_equivalent_to_not_collinear_v0_r on D, C, E we get D not in Line(C, E)
By not_in_line_equivalent_to_not_collinear_v0_r on A, B, C we get A not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on B, G, D we get B not in Line(D, G)
By not_in_line_equivalent_to_not_collinear_v0_r on D, E, G we get D not in Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on B, E, G we get B not in Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on D, E, A we get D not in Line(A, E)
By line_inequality on Line(A, E), f, E we get f != Line(A, E)
By not_in_line_equivalent_to_not_collinear_v0_r on G, D, B we get G not in Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on E, C, B we get E not in Line(B, C)
By line_inequality on Line(A, B), f, B we get f != Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on A, B, G we get A not in Line(B, G)
By not_in_line_equivalent_to_not_collinear_v0_r on C, A, B we get C not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on B, E, D we get B not in Line(D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on F, A, E we get F not in Line(A, E)
By line_inequality on Line(B, G), f, B we get f != Line(B, G)
By not_in_line_equivalent_to_not_collinear_v0_r on G, E, B we get G not in Line(B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on C, F, A we get C not in Line(A, F)
By line_inequality on Line(C, E), f, E we get f != Line(C, E)
By not_in_line_equivalent_to_not_collinear_v0_r on G, E, C we get G not in Line(C, E)
By line_inequality on Line(D, G), f, G we get f != Line(D, G)
By line_inequality on Line(D, E), f, E we get f != Line(D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on D, B, E we get D not in Line(B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on D, A, F we get D not in Line(A, F)
By not_in_line_equivalent_to_not_collinear_v0_r on B, A, E we get B not in Line(A, E)
By not_in_line_equivalent_to_not_collinear_v0_r on A, D, E we get A not in Line(D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on A, G, E we get A not in Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on A, C, E we get A not in Line(C, E)
By not_in_line_equivalent_to_not_collinear_v0_r on G, B, A we get G not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on G, E, D we get G not in Line(D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on C, B, E we get C not in Line(B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on F, B, D we get F not in Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on E, A, B we get E not in Line(A, B)
By line_inequality on Line(B, C), f, B we get f != Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on E, D, B we get E not in Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on C, G, E we get C not in Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on A, D, G we get A not in Line(D, G)
By same_angle_v2 on C, D, A, E we get angle(D, C, E) == angle(A, C, E) + 180 mod 360
By same_angle_v0 on A, D, C, E we get angle(C, A, E) == angle(D, A, E) mod 360
By same_angle_v1 on D, C, A, E we get angle(A, D, E) == angle(C, D, E) mod 360
By same_angle_v1 on D, C, A, B we get angle(A, D, B) == angle(C, D, B) mod 360
By same_angle_v1 on D, A, C, G we get angle(A, D, G) == angle(C, D, G) mod 360
By radical_axis_definition_v0_r on B, c, d we get B in radical_axis(c, d)
By sss_anti_congruence_v1 on E, A, B, E, B, A we get anti_congruent_triangles(A, B, E, B, A, E)
By sas_anti_congruence on B, E, C, C, E, B we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v1 on E, A, B, E, B, A we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v0 on E, B, A, E, A, B we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v1 on E, A, B, E, B, A we get anti_congruent_triangles(A, B, E, B, A, E)
By collinear_definition on C, A, D we get A in Line(C, D), D in Line(A, C), Line(A, C) == Line(C, D), 0 == 2 * angle(A, C, D) mod 360
By altitude_definition on A, D, B, f we get f == altitude(A, B, D)
By sss_anti_congruence_v1 on B, E, A, A, E, B we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v0 on A, E, B, B, E, A we get anti_congruent_triangles(A, B, E, B, A, E)
By collinear_definition on A, D, C we get D in Line(A, C), C in Line(A, D), Line(A, C) == Line(A, D), 0 == 2 * angle(D, A, C) mod 360
By sas_anti_congruence on B, E, A, A, E, B we get anti_congruent_triangles(A, B, E, B, A, E)
By altitude_definition on C, B, D, f we get f == altitude(C, B, D)
By internal_angle_bisector_definition_v0_r on F, B, F, A we get Line(A, B) == internal_angle_bisector(F, A, F)
By isosceles_triangle_properties on E, C, B we get distance(B, E) == distance(C, E), angle(C, B, E) == angle(E, C, B) mod 360
By sss_anti_congruence_v0 on B, A, E, A, B, E we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v1 on A, B, E, B, A, E we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v1 on A, B, E, B, A, E we get anti_congruent_triangles(A, B, E, B, A, E)
By isosceles_triangle_properties on E, B, C we get distance(B, E) == distance(C, E), angle(B, C, E) == angle(E, B, C) mod 360
By sss_anti_congruence_v0 on B, A, E, A, B, E we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v1 on B, E, A, A, E, B we get anti_congruent_triangles(A, B, E, B, A, E)
By isosceles_triangle_properties on E, B, A we get distance(A, E) == distance(B, E), angle(B, A, E) == angle(E, B, A) mod 360
By sss_anti_congruence_v1 on A, B, E, B, A, E we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v0 on E, B, A, E, A, B we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v0 on A, E, B, B, E, A we get anti_congruent_triangles(A, B, E, B, A, E)
By collinear_definition on C, D, A we get D in Line(A, C), A in Line(C, D), Line(A, C) == Line(C, D), 0 == 2 * angle(D, C, A) mod 360
By sss_anti_congruence_v1 on B, E, A, A, E, B we get anti_congruent_triangles(A, B, E, B, A, E)
By sas_anti_congruence on A, E, B, B, E, A we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v0 on B, A, E, A, B, E we get anti_congruent_triangles(A, B, E, B, A, E)
By perpendicular_angle_conditions_v0 on C, D, B we get angle(C, D, B) == orientation(B, C, D) mod 360
By sss_anti_congruence_v0 on E, B, A, E, A, B we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v1 on A, B, E, B, A, E we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v0 on E, B, A, E, A, B we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v1 on E, A, B, E, B, A we get anti_congruent_triangles(A, B, E, B, A, E)
By isosceles_triangle_properties on E, A, B we get distance(A, E) == distance(B, E), angle(A, B, E) == angle(E, A, B) mod 360
By isosceles_triangle_midpoint on E, B, A we get midpoint(A, B) in median(E, A, B)
By sss_anti_congruence_v1 on E, A, B, E, B, A we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v1 on B, E, A, A, E, B we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v1 on B, E, A, A, E, B we get anti_congruent_triangles(A, B, E, B, A, E)
By reverse_direction on E, C we get 180 == direction(E, C) - direction(C, E) mod 360
By sss_anti_congruence_v0 on A, E, B, B, E, A we get anti_congruent_triangles(A, B, E, B, A, E)
By internal_angle_bisector_definition_v0_r on B, F, B, A we get Line(A, F) == internal_angle_bisector(B, A, B)
By perpendicular_angle_conditions_v0 on A, D, B we get angle(A, D, B) == orientation(A, D, B) mod 360
By internal_angle_bisector_definition_v0_r on A, B, A, F we get Line(B, F) == internal_angle_bisector(A, F, A)
By sss_anti_congruence_v0 on E, B, A, E, A, B we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v0 on A, E, B, B, E, A we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v0 on A, E, B, B, E, A we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v0 on A, E, B, B, E, A we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v0 on E, B, A, E, A, B we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v1 on E, A, B, E, B, A we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v0 on B, A, E, A, B, E we get anti_congruent_triangles(A, B, E, B, A, E)
By internal_angle_bisector_definition_v0_r on A, F, A, B we get Line(B, F) == internal_angle_bisector(A, B, A)
By internal_angle_bisector_definition_v0_r on B, A, B, F we get Line(A, F) == internal_angle_bisector(B, F, B)
By sss_anti_congruence_v0 on B, A, E, A, B, E we get anti_congruent_triangles(A, B, E, B, A, E)
By perpendicular_angle_conditions_v0 on B, D, A we get angle(B, D, A) == orientation(A, B, D) mod 360
By perpendicular_angle_conditions_v0 on B, D, C we get angle(B, D, C) == orientation(B, D, C) mod 360
By sss_anti_congruence_v0 on B, A, E, A, B, E we get anti_congruent_triangles(A, B, E, B, A, E)
By sas_anti_congruence on C, E, B, B, E, C we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v1 on B, E, A, A, E, B we get anti_congruent_triangles(A, B, E, B, A, E)
By reverse_direction on E, A we get 180 == direction(E, A) - direction(A, E) mod 360
By sss_anti_congruence_v1 on A, B, E, B, A, E we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v1 on A, B, E, B, A, E we get anti_congruent_triangles(A, B, E, B, A, E)
By collinear_definition on A, C, D we get C in Line(A, D), D in Line(A, C), Line(A, C) == Line(A, D), 0 == 2 * angle(C, A, D) mod 360
By internal_angle_bisector_definition_v0_r on F, A, F, B we get Line(A, B) == internal_angle_bisector(F, B, F)
By sss_anti_congruence_v1 on E, A, C, E, C, A we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v1 on E, A, C, E, C, A we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v0 on C, A, E, A, C, E we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v0 on E, C, A, E, A, C we get anti_congruent_triangles(A, C, E, C, A, E)
By altitude_definition on B, D, A, Line(B, D) we get Line(B, D) == altitude(B, A, D)
By sss_anti_congruence_v1 on E, A, C, E, C, A we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v1 on E, A, C, E, C, A we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v0 on E, C, A, E, A, C we get anti_congruent_triangles(A, C, E, C, A, E)
By isosceles_triangle_properties on E, A, C we get distance(A, E) == distance(C, E), angle(A, C, E) == angle(E, A, C) mod 360
By sss_anti_congruence_v1 on C, E, A, A, E, C we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v1 on A, C, E, C, A, E we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v0 on E, C, A, E, A, C we get anti_congruent_triangles(A, C, E, C, A, E)
By isosceles_triangle_properties on E, C, A we get distance(A, E) == distance(C, E), angle(C, A, E) == angle(E, C, A) mod 360
By sss_anti_congruence_v1 on A, C, E, C, A, E we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v1 on A, C, E, C, A, E we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v0 on C, A, E, A, C, E we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v1 on C, E, A, A, E, C we get anti_congruent_triangles(A, C, E, C, A, E)
By sas_anti_congruence on C, E, A, A, E, C we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v0 on E, C, A, E, A, C we get anti_congruent_triangles(A, C, E, C, A, E)
By power_of_a_point_definition on F, A, B, c we get log(power_of_a_point(F, c)) == log(distance(A, F)) + log(distance(B, F))
By sss_anti_congruence_v0 on C, A, E, A, C, E we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v0 on A, E, C, C, E, A we get anti_congruent_triangles(A, C, E, C, A, E)
By collinear_definition on D, C, A we get C in Line(A, D), A in Line(C, D), Line(A, D) == Line(C, D), 0 == 2 * angle(C, D, A) mod 360
By sss_anti_congruence_v0 on C, A, E, A, C, E we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v0 on A, E, C, C, E, A we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v1 on E, A, C, E, C, A we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v0 on A, E, C, C, E, A we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v1 on A, C, E, C, A, E we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v1 on C, E, A, A, E, C we get anti_congruent_triangles(A, C, E, C, A, E)
By altitude_definition on B, C, D, Line(B, D) we get Line(B, D) == altitude(B, C, D)
By sss_anti_congruence_v0 on A, E, C, C, E, A we get anti_congruent_triangles(A, C, E, C, A, E)
By sas_anti_congruence on A, E, C, C, E, A we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v0 on A, E, C, C, E, A we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v0 on A, E, C, C, E, A we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v0 on E, C, A, E, A, C we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v1 on C, E, A, A, E, C we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v1 on E, A, C, E, C, A we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v1 on C, E, A, A, E, C we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v1 on A, C, E, C, A, E we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v0 on C, A, E, A, C, E we get anti_congruent_triangles(A, C, E, C, A, E)
By collinear_definition on D, A, C we get A in Line(C, D), C in Line(A, D), Line(A, D) == Line(C, D), 0 == 2 * angle(A, D, C) mod 360
By sss_anti_congruence_v0 on C, A, E, A, C, E we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v1 on C, E, A, A, E, C we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v0 on E, C, A, E, A, C we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v1 on A, C, E, C, A, E we get anti_congruent_triangles(A, C, E, C, A, E)
By right_triangle_circumcenter_v1 on A, D, B we get midpoint(A, B) == circumcenter(A, B, D)
By line_intersection_definition on A, Line(A, E), f we get A == line_intersection(f, Line(A, E))
By line_intersection_definition on D, Line(D, E), f we get D == line_intersection(f, Line(D, E))
By line_intersection_definition on C, Line(C, E), f we get C == line_intersection(f, Line(C, E))
By line_intersection_definition on A, f, Line(A, B) we get A == line_intersection(f, Line(A, B))
By line_intersection_definition on C, Line(B, C), f we get C == line_intersection(f, Line(B, C))
By line_intersection_definition on D, Line(D, G), f we get D == line_intersection(f, Line(D, G))
By between_imply_not_between on D, C, A we get collinear_and_not_between(A, D, C)
By between_imply_not_between on A, C, D we get collinear_and_not_between(C, A, D)
By circle_radius_v0_r on E, d we get radius(d) == distance(E, center(d))
By circle_radius_v0_r on D, d we get radius(d) == distance(D, center(d))
By circle_radius_v0_r on G, d we get radius(d) == distance(G, center(d))
By circle_radius_v0_r on D, Circle(A, B, D) we get radius(Circle(A, B, D)) == distance(D, center(Circle(A, B, D)))
By circle_radius_v0_r on B, Circle(A, B, D) we get radius(Circle(A, B, D)) == distance(B, center(Circle(A, B, D)))
By circle_radius_v0_r on B, d we get radius(d) == distance(B, center(d))
By circle_radius_v0_r on A, Circle(A, B, D) we get radius(Circle(A, B, D)) == distance(A, center(Circle(A, B, D)))
By angle_to_center on G, B, E, d we get 2 * angle(G, B, E) == angle(G, center(d), E) mod 360
By different_centers_imply_different_circles on Circle(A, B, D), c we get c != Circle(A, B, D)
By angle_to_center on B, G, E, d we get 2 * angle(B, G, E) == angle(B, center(d), E) mod 360
By angle_to_center on D, E, B, d we get 2 * angle(D, E, B) == angle(D, center(d), B) mod 360
By angle_to_center on G, B, D, d we get 2 * angle(G, B, D) == angle(G, center(d), D) mod 360
By angle_to_center on B, E, G, d we get 2 * angle(B, E, G) == angle(B, center(d), G) mod 360
By angle_to_center on G, E, D, d we get 2 * angle(G, E, D) == angle(G, center(d), D) mod 360
By angle_to_center on G, D, E, d we get 2 * angle(G, D, E) == angle(G, center(d), E) mod 360
By angle_to_center on G, E, B, d we get 2 * angle(G, E, B) == angle(G, center(d), B) mod 360
By angle_to_center on D, B, A, Circle(A, B, D) we get 2 * angle(D, B, A) == angle(D, center(Circle(A, B, D)), A) mod 360
By angle_to_center on B, A, D, Circle(A, B, D) we get 2 * angle(B, A, D) == angle(B, center(Circle(A, B, D)), D) mod 360
By center_not_on_circle on Circle(A, B, D) we get center(Circle(A, B, D)) not in Circle(A, B, D)
By angle_to_center on D, A, B, Circle(A, B, D) we get 2 * angle(D, A, B) == angle(D, center(Circle(A, B, D)), B) mod 360
By angle_to_center on D, B, G, d we get 2 * angle(D, B, G) == angle(D, center(d), G) mod 360
By angle_to_center on B, D, G, d we get 2 * angle(B, D, G) == angle(B, center(d), G) mod 360
By angle_to_center on G, D, B, d we get 2 * angle(G, D, B) == angle(G, center(d), B) mod 360
By angle_to_center on D, G, B, d we get 2 * angle(D, G, B) == angle(D, center(d), B) mod 360
By angle_to_center on B, G, D, d we get 2 * angle(B, G, D) == angle(B, center(d), D) mod 360
By angle_to_center on E, G, B, d we get 2 * angle(E, G, B) == angle(E, center(d), B) mod 360
By angle_to_center on A, B, D, Circle(A, B, D) we get 2 * angle(A, B, D) == angle(A, center(Circle(A, B, D)), D) mod 360
By angle_to_center on B, E, D, d we get 2 * angle(B, E, D) == angle(B, center(d), D) mod 360
By angle_to_center on E, G, D, d we get 2 * angle(E, G, D) == angle(E, center(d), D) mod 360
By angle_to_center on E, D, B, d we get 2 * angle(E, D, B) == angle(E, center(d), B) mod 360
By angle_to_center on D, B, E, d we get 2 * angle(D, B, E) == angle(D, center(d), E) mod 360
By angle_to_center on E, B, D, d we get 2 * angle(E, B, D) == angle(E, center(d), D) mod 360
By angle_to_center on E, B, G, d we get 2 * angle(E, B, G) == angle(E, center(d), G) mod 360
By angle_to_center on D, G, E, d we get 2 * angle(D, G, E) == angle(D, center(d), E) mod 360
By angle_to_center on B, D, E, d we get 2 * angle(B, D, E) == angle(B, center(d), E) mod 360
By angle_to_center on E, D, G, d we get 2 * angle(E, D, G) == angle(E, center(d), G) mod 360
By angle_to_center on D, E, G, d we get 2 * angle(D, E, G) == angle(D, center(d), G) mod 360
By center_not_on_circle on d we get center(d) not in d
By different_points_v1 on F, E we get 0 != distance(E, F)
By same_angle_v3 on F, B, A, E we get angle(B, F, E) == angle(A, F, E) + 180 mod 360
By divide_by_2_mod_180_v1 on D, B, A, E, C, B we get angle(D, B, A) == angle(E, C, B) mod 360
By orthocenter_concurrency on B, A, D we get orthocenter(A, B, D) in altitude(B, A, D), orthocenter(A, B, D) in altitude(A, B, D), orthocenter(A, B, D) in altitude(D, A, B)
By line_inequality on Line(A, B), Line(C, E), F we get Line(A, B) != Line(C, E)
By orthocenter_concurrency on C, B, D we get orthocenter(B, C, D) in altitude(C, B, D), orthocenter(B, C, D) in altitude(B, C, D), orthocenter(B, C, D) in altitude(D, B, C)
By divide_by_2_mod_180_v0 on D, A, B, G, D, A we get angle(D, A, B) == angle(G, D, A) mod 360
By divide_by_2_mod_180_v0 on A, B, D, B, D, G we get angle(A, B, D) == angle(B, D, G) mod 360
By divide_by_2_mod_180_v0 on D, A, B, G, D, C we get angle(D, A, B) == angle(G, D, C) mod 360
By divide_by_2_mod_180_v3 on B, E, G, B, C, E we get angle(B, E, G) == angle(B, C, E) + 180 mod 360
By divide_by_2_mod_180_v1 on B, A, C, A, D, G we get angle(A, D, G) == angle(B, A, C) mod 360
By divide_by_2_mod_180_v1 on D, B, F, E, C, B we get angle(D, B, F) == angle(E, C, B) mod 360
By divide_by_2_mod_180_v1 on C, D, G, B, A, C we get angle(B, A, C) == angle(C, D, G) mod 360
By divide_by_2_mod_180_v0 on E, B, C, A, B, D we get angle(A, B, D) == angle(E, B, C) mod 360
By reverse_direction on C, D we get 180 == direction(C, D) - direction(D, C) mod 360
By divide_by_2_mod_180_v0 on E, B, C, B, D, G we get angle(B, D, G) == angle(E, B, C) mod 360
By divide_by_2_mod_180_v0 on D, A, F, G, D, A we get angle(D, A, F) == angle(G, D, A) mod 360
By divide_by_2_mod_180_v1 on B, A, D, C, D, G we get angle(B, A, D) == angle(C, D, G) mod 360
By divide_by_2_mod_180_v0 on B, C, E, B, D, G we get angle(B, C, E) == angle(B, D, G) mod 360
By divide_by_2_mod_180_v1 on D, B, A, G, D, B we get angle(D, B, A) == angle(G, D, B) mod 360
By divide_by_2_mod_180_v0 on F, B, D, G, E, C we get angle(F, B, D) == angle(G, E, C) mod 360
By divide_by_2_mod_180_v2 on G, E, B, D, B, F we get angle(G, E, B) == angle(D, B, F) + 180 mod 360
By divide_by_2_mod_180_v0 on C, A, B, G, D, A we get angle(C, A, B) == angle(G, D, A) mod 360
By divide_by_2_mod_180_v3 on B, E, G, F, B, D we get angle(B, E, G) == angle(F, B, D) + 180 mod 360
By line_inequality on Line(E, F), Line(D, G), E we get Line(D, G) != Line(E, F)
By divide_by_2_mod_180_v0 on B, D, G, F, B, D we get angle(B, D, G) == angle(F, B, D) mod 360
By divide_by_2_mod_180_v2 on E, B, C, B, E, G we get angle(E, B, C) == angle(B, E, G) + 180 mod 360
By line_inequality on Line(A, B), g, F we get g != Line(A, B)
By divide_by_2_mod_180_v0 on D, A, F, G, D, C we get angle(D, A, F) == angle(G, D, C) mod 360
By divide_by_2_mod_180_v0 on G, D, C, C, A, F we get angle(C, A, F) == angle(G, D, C) mod 360
By divide_by_2_mod_180_v3 on D, B, A, G, E, B we get angle(D, B, A) == angle(G, E, B) + 180 mod 360
By divide_by_2_mod_180_v0 on C, A, F, G, D, A we get angle(C, A, F) == angle(G, D, A) mod 360
By divide_by_2_mod_180_v3 on B, E, G, E, B, C we get angle(B, E, G) == angle(E, B, C) + 180 mod 360
By line_inequality on Line(D, E), Line(B, G), E we get Line(B, G) != Line(D, E)
By divide_by_2_mod_180_v2 on F, B, D, B, E, G we get angle(F, B, D) == angle(B, E, G) + 180 mod 360
By divide_by_2_mod_180_v2 on G, E, B, E, C, B we get angle(G, E, B) == angle(E, C, B) + 180 mod 360
By divide_by_2_mod_180_v0 on G, E, C, E, B, C we get angle(E, B, C) == angle(G, E, C) mod 360
By divide_by_2_mod_180_v1 on D, B, A, C, E, G we get angle(C, E, G) == angle(D, B, A) mod 360
By divide_by_2_mod_180_v1 on A, D, G, B, A, D we get angle(A, D, G) == angle(B, A, D) mod 360
By divide_by_2_mod_180_v1 on G, D, B, D, B, F we get angle(D, B, F) == angle(G, D, B) mod 360
By divide_by_2_mod_180_v1 on C, B, E, C, E, G we get angle(C, B, E) == angle(C, E, G) mod 360
By divide_by_2_mod_180_v2 on G, E, B, D, B, A we get angle(G, E, B) == angle(D, B, A) + 180 mod 360
By divide_by_2_mod_180_v2 on G, E, B, C, B, E we get angle(G, E, B) == angle(C, B, E) + 180 mod 360
By between_imply_segment_sum on D, C, A we get distance(A, D) == distance(C, D) + distance(A, C)
By divide_by_2_mod_180_v0 on E, B, C, F, B, D we get angle(E, B, C) == angle(F, B, D) mod 360
By divide_by_2_mod_180_v3 on B, E, G, A, B, D we get angle(B, E, G) == angle(A, B, D) + 180 mod 360
By divide_by_2_mod_180_v0 on G, E, C, A, B, D we get angle(A, B, D) == angle(G, E, C) mod 360
By divide_by_2_mod_180_v1 on A, D, G, F, A, D we get angle(A, D, G) == angle(F, A, D) mod 360
By divide_by_2_mod_180_v2 on A, B, D, B, E, G we get angle(A, B, D) == angle(B, E, G) + 180 mod 360
By divide_by_2_mod_180_v1 on C, B, E, D, B, F we get angle(C, B, E) == angle(D, B, F) mod 360
By divide_by_2_mod_180_v3 on C, B, E, G, E, B we get angle(C, B, E) == angle(G, E, B) + 180 mod 360
By divide_by_2_mod_180_v1 on E, C, B, G, D, B we get angle(E, C, B) == angle(G, D, B) mod 360
By divide_by_2_mod_180_v1 on F, A, D, C, D, G we get angle(C, D, G) == angle(F, A, D) mod 360
By divide_by_2_mod_180_v1 on F, A, C, A, D, G we get angle(A, D, G) == angle(F, A, C) mod 360
By divide_by_2_mod_180_v0 on C, A, B, G, D, C we get angle(C, A, B) == angle(G, D, C) mod 360
By line_inequality on Line(E, F), Line(B, G), F we get Line(B, G) != Line(E, F)
By divide_by_2_mod_180_v1 on G, D, B, C, B, E we get angle(C, B, E) == angle(G, D, B) mod 360
By line_inequality on radical_axis(c, d), Line(C, E), B we get Line(C, E) != radical_axis(c, d)
By divide_by_2_mod_180_v1 on C, D, G, F, A, C we get angle(C, D, G) == angle(F, A, C) mod 360
By divide_by_2_mod_180_v3 on E, C, B, G, E, B we get angle(E, C, B) == angle(G, E, B) + 180 mod 360
By line_inequality on Line(D, E), Line(B, E), D we get Line(B, E) != Line(D, E)
By divide_by_2_mod_180_v1 on D, B, A, C, B, E we get angle(C, B, E) == angle(D, B, A) mod 360
By divide_by_2_mod_180_v1 on E, C, B, C, E, G we get angle(C, E, G) == angle(E, C, B) mod 360
By divide_by_2_mod_180_v0 on B, C, E, G, E, C we get angle(B, C, E) == angle(G, E, C) mod 360
By divide_by_2_mod_180_v3 on D, B, F, G, E, B we get angle(D, B, F) == angle(G, E, B) + 180 mod 360
By line_inequality on Line(B, C), Line(A, B), C we get Line(A, B) != Line(B, C)
By divide_by_2_mod_180_v1 on C, E, G, D, B, F we get angle(C, E, G) == angle(D, B, F) mod 360
By divide_by_2_mod_180_v0 on A, B, D, B, C, E we get angle(A, B, D) == angle(B, C, E) mod 360
By divide_by_2_mod_180_v0 on F, B, D, B, C, E we get angle(B, C, E) == angle(F, B, D) mod 360
By line_inequality on Line(B, E), Line(C, E), B we get Line(B, E) != Line(C, E)
By divide_by_2_mod_180_v2 on B, C, E, B, E, G we get angle(B, C, E) == angle(B, E, G) + 180 mod 360
By line_inequality on Line(B, D), g, B we get g != Line(B, D)
By line_inequality on Line(A, B), Line(A, E), F we get Line(A, B) != Line(A, E)
By line_circle_intersection_has_at_most_two_points_0 on B, A, F, Circle(A, B, D) we get F not in Circle(A, B, D)
By line_inequality on Line(A, B), Line(B, E), F we get Line(A, B) != Line(B, E)
By line_inequality on Line(B, C), Line(D, E), C we get Line(B, C) != Line(D, E)
By line_inequality on g, Line(B, E), G we get g != Line(B, E)
By line_inequality on Line(B, C), Line(B, G), C we get Line(B, C) != Line(B, G)
By line_inequality on g, Line(B, G), E we get g != Line(B, G)
By line_inequality on Line(E, F), Line(B, C), E we get Line(B, C) != Line(E, F)
By line_inequality on Line(A, B), Line(B, D), A we get Line(A, B) != Line(B, D)
By line_inequality on Line(B, D), Line(C, E), D we get Line(B, D) != Line(C, E)
By line_inequality on g, Line(C, E), G we get g != Line(C, E)
By line_inequality on Line(B, D), Line(A, E), B we get Line(A, E) != Line(B, D)
By reverse_direction on D, A we get 180 == direction(D, A) - direction(A, D) mod 360
By line_inequality on Line(D, E), Line(A, B), D we get Line(A, B) != Line(D, E)
By line_inequality on Line(A, B), Line(B, G), A we get Line(A, B) != Line(B, G)
By line_inequality on Line(E, F), Line(B, E), F we get Line(B, E) != Line(E, F)
By not_in_line_equivalent_to_not_collinear_v0_r on D, F, E we get D not in Line(E, F)
By line_inequality on Line(B, G), Line(B, D), G we get Line(B, D) != Line(B, G)
By line_inequality on Line(A, E), Line(C, E), A we get Line(A, E) != Line(C, E)
By reverse_direction on D, C we get 180 == direction(D, C) - direction(C, D) mod 360
By line_inequality on Line(D, G), Line(C, E), D we get Line(C, E) != Line(D, G)
By reverse_direction on A, D we get 180 == direction(A, D) - direction(D, A) mod 360
By line_inequality on Line(B, G), Line(B, E), G we get Line(B, E) != Line(B, G)
By line_inequality on Line(A, E), Line(B, E), A we get Line(A, E) != Line(B, E)
By line_inequality on Line(E, F), f, E we get f != Line(E, F)
By line_inequality on Line(D, G), Line(B, C), G we get Line(B, C) != Line(D, G)
By line_inequality on Line(B, G), Line(C, E), B we get Line(B, G) != Line(C, E)
By line_inequality on Line(A, B), Line(D, G), B we get Line(A, B) != Line(D, G)
By not_in_line_equivalent_to_not_collinear_v0_r on A, F, E we get A not in Line(E, F)
By line_inequality on Line(A, E), g, A we get g != Line(A, E)
By line_inequality on g, Line(D, E), G we get g != Line(D, E)
By line_inequality on Line(B, G), Line(A, E), B we get Line(A, E) != Line(B, G)
By line_inequality on Line(A, E), Line(D, G), A we get Line(A, E) != Line(D, G)
By line_inequality on g, Line(B, C), E we get g != Line(B, C)
By line_inequality on Line(E, F), Line(A, B), E we get Line(A, B) != Line(E, F)
By line_inequality on Line(A, E), Line(B, C), E we get Line(A, E) != Line(B, C)
By line_inequality on Line(D, E), Line(C, E), D we get Line(C, E) != Line(D, E)
By line_inequality on Line(E, F), Line(B, D), E we get Line(B, D) != Line(E, F)
By line_inequality on Line(D, E), Line(A, E), D we get Line(A, E) != Line(D, E)
By line_inequality on Line(D, G), Line(B, E), G we get Line(B, E) != Line(D, G)
By line_inequality on Line(D, E), Line(D, G), E we get Line(D, E) != Line(D, G)
By line_inequality on Line(D, E), Line(B, D), E we get Line(B, D) != Line(D, E)
By line_inequality on Line(B, C), Line(C, E), B we get Line(B, C) != Line(C, E)
By line_inequality on radical_axis(c, d), f, B we get f != radical_axis(c, d)
By line_inequality on Line(B, D), Line(B, C), D we get Line(B, C) != Line(B, D)
By line_inequality on Line(D, G), g, D we get g != Line(D, G)
By line_inequality on Line(E, F), Line(D, E), F we get Line(D, E) != Line(E, F)
By line_inequality on Line(B, E), Line(B, C), E we get Line(B, C) != Line(B, E)
By line_inequality on radical_axis(c, d), g, B we get g != radical_axis(c, d)
By not_in_line_equivalent_to_not_collinear_v0_r on B, E, F we get B not in Line(E, F)
By line_inequality on Line(B, D), Line(B, E), D we get Line(B, D) != Line(B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on C, E, F we get C not in Line(E, F)
By line_circle_intersection_has_at_most_two_points_0 on A, D, C, Circle(A, B, D) we get C not in Circle(A, B, D)
By line_inequality on radical_axis(c, d), Line(D, G), B we get Line(D, G) != radical_axis(c, d)
By line_inequality on radical_axis(c, d), Line(A, E), B we get Line(A, E) != radical_axis(c, d)
By not_in_line_equivalent_to_not_collinear_v0_r on G, F, E we get G not in Line(E, F)
By line_inequality on radical_axis(c, d), Line(D, E), B we get Line(D, E) != radical_axis(c, d)
By line_inequality on Line(B, G), Line(D, G), B we get Line(B, G) != Line(D, G)
By line_inequality on Line(E, F), Line(C, E), F we get Line(C, E) != Line(E, F)
By line_inequality on Line(E, F), Line(A, E), F we get Line(A, E) != Line(E, F)
By line_inequality on Line(D, G), Line(B, D), G we get Line(B, D) != Line(D, G)
By line_inequality on Line(E, F), g, F we get g != Line(E, F)
By external_angle_bisector_definition_v0_r on A, B, C, D we get Line(B, D) == external_angle_bisector(A, D, C)
By external_angle_bisector_definition_v0_r on B, C, B, D we get Line(C, D) == external_angle_bisector(B, D, B)
By internal_angle_bisector_definition_v0_r on C, D, C, A we get Line(A, D) == internal_angle_bisector(C, A, C)
By external_angle_bisector_definition_v0_r on A, B, A, D we get Line(B, D) == external_angle_bisector(A, D, A)
By internal_angle_bisector_definition_v0_r on D, C, D, A we get Line(A, C) == internal_angle_bisector(D, A, D)
By external_angle_bisector_definition_v0_r on B, A, B, D we get Line(A, D) == external_angle_bisector(B, D, B)
By external_angle_bisector_definition_v0_r on C, B, C, D we get Line(B, D) == external_angle_bisector(C, D, C)
By power_of_a_point_in_circle on B, Circle(A, B, D) we get 0 == power_of_a_point(B, Circle(A, B, D))
By power_of_a_point_on_circle on D, Circle(A, B, D) we get 0 == power_of_a_point(D, Circle(A, B, D))
By power_of_a_point_on_circle on A, Circle(A, B, D) we get 0 == power_of_a_point(A, Circle(A, B, D))
By internal_angle_bisector_definition_v0_r on D, A, D, C we get Line(A, C) == internal_angle_bisector(D, C, D)
By internal_angle_bisector_definition_v0_r on A, C, A, D we get Line(C, D) == internal_angle_bisector(A, D, A)
By internal_angle_bisector_definition_v0_r on C, A, C, D we get Line(A, D) == internal_angle_bisector(C, D, C)
By internal_angle_bisector_definition_v0_r on A, D, A, C we get Line(C, D) == internal_angle_bisector(A, C, A)
By anti_similar_triangle_basic_properties on E, B, A, E, A, B we get not_collinear(A, B, E), not_collinear(A, B, E), angle(E, B, A) == 0 - angle(E, A, B) mod 360, angle(B, A, E) == 0 - angle(A, B, E) mod 360, angle(A, E, B) == 0 - angle(B, E, A) mod 360, log(distance(A, E)) + log(distance(A, B)) == log(distance(B, E)) + log(distance(A, B)), log(distance(A, B)) + log(distance(A, E)) == log(distance(A, B)) + log(distance(B, E)), log(distance(A, E)) + log(distance(A, E)) == log(distance(B, E)) + log(distance(B, E))
By sas_anti_congruence on E, A, F, E, B, F we get anti_congruent_triangles(A, E, F, B, E, F)
By perpendicular_bisector_sufficient_conditions on B, A, F, E we get Line(E, F) == perpendicular_bisector(A, B)
By sas_anti_congruence on F, A, E, F, B, E we get anti_congruent_triangles(A, E, F, B, E, F)
By sas_anti_congruence on E, B, F, E, A, F we get anti_congruent_triangles(A, E, F, B, E, F)
By sas_anti_congruence on F, B, E, F, A, E we get anti_congruent_triangles(A, E, F, B, E, F)
By anti_similar_triangle_basic_properties on C, E, B, B, E, C we get not_collinear(B, C, E), not_collinear(B, C, E), angle(C, E, B) == 0 - angle(B, E, C) mod 360, angle(E, B, C) == 0 - angle(E, C, B) mod 360, angle(B, C, E) == 0 - angle(C, B, E) mod 360, log(distance(B, E)) + log(distance(B, E)) == log(distance(C, E)) + log(distance(C, E)), log(distance(B, E)) + log(distance(B, C)) == log(distance(C, E)) + log(distance(B, C)), log(distance(B, C)) + log(distance(B, E)) == log(distance(B, C)) + log(distance(C, E))
By anti_similar_triangle_basic_properties on C, E, A, A, E, C we get not_collinear(A, C, E), not_collinear(A, C, E), angle(C, E, A) == 0 - angle(A, E, C) mod 360, angle(E, A, C) == 0 - angle(E, C, A) mod 360, angle(A, C, E) == 0 - angle(C, A, E) mod 360, log(distance(A, E)) + log(distance(A, E)) == log(distance(C, E)) + log(distance(C, E)), log(distance(A, E)) + log(distance(A, C)) == log(distance(C, E)) + log(distance(A, C)), log(distance(A, C)) + log(distance(A, E)) == log(distance(A, C)) + log(distance(C, E))
By power_of_a_point_definition on D, C, A, c we get log(power_of_a_point(D, c)) == log(distance(C, D)) + log(distance(A, D))
By isosceles_triangle_altitude_v0 on E, A, B we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, E, B), perpendicular_line(E, Line(A, B)))
By isosceles_triangle_altitude_v0 on E, B, A we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, E, B), perpendicular_line(E, Line(A, B)))
By line_intersection_definition on orthocenter(B, C, D), Line(B, D), f we get orthocenter(B, C, D) == line_intersection(f, Line(B, D))
By line_intersection_definition on orthocenter(A, B, D), Line(B, D), f we get orthocenter(A, B, D) == line_intersection(f, Line(B, D))
By radical_axis_is_perpendicular_to_center_line on radical_axis(c, d), d, c we get perpendicular(radical_axis(c, d), Line(center(c), center(d)))
By line_intersection_definition on G, g, Line(D, G) we get G == line_intersection(g, Line(D, G))
By line_intersection_definition on E, g, Line(B, E) we get E == line_intersection(g, Line(B, E))
By radical_axis_of_intersecting_circles_v0 on B, A, c, Circle(A, B, D) we get Line(A, B) == radical_axis(c, Circle(A, B, D))
By line_intersection_definition on B, Line(B, C), Line(B, E) we get B == line_intersection(Line(B, C), Line(B, E))
By line_intersection_definition on E, Line(E, F), g we get E == line_intersection(g, Line(E, F))
By line_intersection_definition on C, Line(B, C), Line(C, E) we get C == line_intersection(Line(B, C), Line(C, E))
By line_intersection_definition on E, Line(D, E), g we get E == line_intersection(g, Line(D, E))
By line_intersection_definition on B, Line(B, E), Line(A, B) we get B == line_intersection(Line(A, B), Line(B, E))
By line_intersection_definition on E, Line(B, E), Line(D, E) we get E == line_intersection(Line(B, E), Line(D, E))
By line_intersection_definition on G, Line(D, G), Line(B, G) we get G == line_intersection(Line(B, G), Line(D, G))
By line_intersection_definition on B, Line(B, G), Line(B, D) we get B == line_intersection(Line(B, D), Line(B, G))
By concurrent_sufficient_conditions on Line(A, B), Line(A, E), f we get concurrent(f, Line(A, B), Line(A, E))
By line_intersection_definition on E, Line(D, E), Line(A, E) we get E == line_intersection(Line(A, E), Line(D, E))
By concurrent_sufficient_conditions on Line(D, E), Line(D, G), f we get concurrent(f, Line(D, E), Line(D, G))
By line_intersection_definition on E, Line(C, E), Line(A, E) we get E == line_intersection(Line(A, E), Line(C, E))
By perpendicular_line_definition on A, Line(A, B), Line(E, F) we get Line(A, B) == perpendicular_line(A, Line(E, F))
By line_intersection_definition on B, Line(A, B), Line(B, G) we get B == line_intersection(Line(A, B), Line(B, G))
By line_intersection_definition on E, Line(C, E), Line(E, F) we get E == line_intersection(Line(C, E), Line(E, F))
By perpendicular_line_definition on B, Line(B, C), altitude(D, B, C) we get Line(B, C) == perpendicular_line(B, altitude(D, B, C))
By line_intersection_definition on B, Line(B, G), Line(B, C) we get B == line_intersection(Line(B, C), Line(B, G))
By line_intersection_definition on D, Line(D, G), Line(B, D) we get D == line_intersection(Line(B, D), Line(D, G))
By concurrent_sufficient_conditions on Line(D, E), Line(B, D), f we get concurrent(f, Line(B, D), Line(D, E))
By line_intersection_definition on D, Line(B, D), Line(D, E) we get D == line_intersection(Line(B, D), Line(D, E))
By perpendicular_line_definition on A, Line(A, B), altitude(D, A, B) we get Line(A, B) == perpendicular_line(A, altitude(D, A, B))
By line_intersection_definition on B, Line(B, E), Line(B, G) we get B == line_intersection(Line(B, E), Line(B, G))
By line_intersection_definition on E, Line(D, E), Line(E, F) we get E == line_intersection(Line(D, E), Line(E, F))
By line_intersection_definition on F, Line(E, F), Line(A, B) we get F == line_intersection(Line(A, B), Line(E, F))
By line_intersection_definition on E, Line(C, E), g we get E == line_intersection(g, Line(C, E))
By perpendicular_line_definition on orthocenter(B, C, D), f, Line(B, D) we get f == perpendicular_line(orthocenter(B, C, D), Line(B, D))
By perpendicular_line_definition on B, Line(A, B), altitude(D, A, B) we get Line(A, B) == perpendicular_line(B, altitude(D, A, B))
By line_intersection_definition on E, Line(B, E), Line(C, E) we get E == line_intersection(Line(B, E), Line(C, E))
By line_intersection_definition on B, Line(A, B), Line(B, D) we get B == line_intersection(Line(A, B), Line(B, D))
By perpendicular_line_definition on orthocenter(A, B, D), altitude(D, A, B), Line(A, B) we get altitude(D, A, B) == perpendicular_line(orthocenter(A, B, D), Line(A, B))
By line_intersection_definition on E, g, Line(A, E) we get E == line_intersection(g, Line(A, E))
By median_definition on D, A, B, Line(D, F) we get Line(D, F) == median(D, A, B)
By line_intersection_definition on D, Line(D, G), Line(D, E) we get D == line_intersection(Line(D, E), Line(D, G))
By perpendicular_line_definition on B, Line(A, B), Line(E, F) we get Line(A, B) == perpendicular_line(B, Line(E, F))
By concurrent_sufficient_conditions on Line(B, D), Line(D, G), f we get concurrent(f, Line(B, D), Line(D, G))
By line_intersection_definition on E, Line(B, E), Line(E, F) we get E == line_intersection(Line(B, E), Line(E, F))
By concurrent_sufficient_conditions on Line(B, D), Line(D, E), f we get concurrent(f, Line(B, D), Line(D, E))
By concurrent_sufficient_conditions on Line(D, G), Line(B, D), f we get concurrent(f, Line(B, D), Line(D, G))
By line_intersection_definition on E, Line(C, E), Line(D, E) we get E == line_intersection(Line(C, E), Line(D, E))
By concurrent_sufficient_conditions on Line(A, E), Line(A, B), f we get concurrent(f, Line(A, B), Line(A, E))
By perpendicular_line_definition on F, Line(A, B), Line(E, F) we get Line(A, B) == perpendicular_line(F, Line(E, F))
By line_intersection_definition on B, Line(B, C), Line(B, D) we get B == line_intersection(Line(B, C), Line(B, D))
By perpendicular_line_definition on orthocenter(B, C, D), altitude(D, B, C), Line(B, C) we get altitude(D, B, C) == perpendicular_line(orthocenter(B, C, D), Line(B, C))
By line_intersection_definition on E, Line(B, E), Line(A, E) we get E == line_intersection(Line(A, E), Line(B, E))
By perpendicular_line_definition on F, Line(A, B), altitude(D, A, B) we get Line(A, B) == perpendicular_line(F, altitude(D, A, B))
By line_intersection_definition on B, Line(B, E), Line(B, D) we get B == line_intersection(Line(B, D), Line(B, E))
By perpendicular_line_definition on orthocenter(A, B, D), f, Line(B, D) we get f == perpendicular_line(orthocenter(A, B, D), Line(B, D))
By line_intersection_definition on E, Line(A, E), Line(E, F) we get E == line_intersection(Line(A, E), Line(E, F))
By perpendicular_line_definition on C, Line(B, C), altitude(D, B, C) we get Line(B, C) == perpendicular_line(C, altitude(D, B, C))
By line_intersection_definition on G, Line(B, G), g we get G == line_intersection(g, Line(B, G))
By line_intersection_definition on A, Line(A, B), Line(A, E) we get A == line_intersection(Line(A, B), Line(A, E))
By line_intersection_definition on B, Line(B, C), Line(A, B) we get B == line_intersection(Line(A, B), Line(B, C))
By perpendicular_line_definition on orthocenter(B, C, D), Line(B, D), f we get Line(B, D) == perpendicular_line(orthocenter(B, C, D), f)
By concurrent_sufficient_conditions on Line(C, E), Line(B, C), f we get concurrent(f, Line(B, C), Line(C, E))
By concurrent_sufficient_conditions on Line(B, C), Line(C, E), f we get concurrent(f, Line(B, C), Line(C, E))
By perpendicular_line_definition on orthocenter(A, B, D), Line(B, D), f we get Line(B, D) == perpendicular_line(orthocenter(A, B, D), f)
By concurrent_sufficient_conditions on Line(D, G), Line(D, E), f we get concurrent(f, Line(D, E), Line(D, G))
By line_unique_intersection_v0 on Line(B, D), f, orthocenter(B, C, D), D we get D == orthocenter(B, C, D)
By line_unique_intersection_v0 on f, Line(B, D), orthocenter(A, B, D), orthocenter(B, C, D) we get orthocenter(A, B, D) == orthocenter(B, C, D)
By line_unique_intersection_v0 on f, Line(B, D), orthocenter(A, B, D), D we get D == orthocenter(A, B, D)
By projection_definition on E, F, Line(A, B) we get F == projection(E, Line(A, B))
By different_points_v1 on center(d), D we get 0 != distance(D, center(d))
By different_points_v1 on center(d), B we get 0 != distance(B, center(d))
By different_points_v1 on E, center(d) we get 0 != distance(E, center(d))
By different_points_v1 on G, center(d) we get 0 != distance(G, center(d))
By projection_definition on B, F, Line(E, F) we get F == projection(B, Line(E, F))
By in_imply_collinear on orthocenter(A, B, D), C, A we get collinear(A, C, orthocenter(A, B, D))
By same_angle_v1 on D, A, C, F we get angle(A, D, F) == angle(C, D, F) mod 360
By perpendicular_angle_conditions_v0 on B, F, E we get angle(B, F, E) == orientation(B, F, E) mod 360
By divide_by_2_mod_180_v2 on E, F, A, A, D, B we get angle(E, F, A) == angle(A, D, B) + 180 mod 360
By in_imply_collinear on orthocenter(A, B, D), A, D we get collinear(A, D, orthocenter(A, B, D))
By divide_by_2_mod_180_v0 on D, C, B, F, E, B we get angle(D, C, B) == angle(F, E, B) mod 360
By divide_by_2_mod_180_v1 on B, C, D, B, E, F we get angle(B, C, D) == angle(B, E, F) mod 360
By divide_by_2_mod_180_v0 on E, F, A, B, D, C we get angle(B, D, C) == angle(E, F, A) mod 360
By projection_definition on A, F, Line(E, F) we get F == projection(A, Line(E, F))
By divide_by_2_mod_180_v3 on E, F, B, B, D, A we get angle(E, F, B) == angle(B, D, A) + 180 mod 360
By in_imply_collinear on orthocenter(B, C, D), D, B we get collinear(B, D, orthocenter(B, C, D))
By divide_by_2_mod_180_v3 on C, D, B, E, F, A we get angle(C, D, B) == angle(E, F, A) + 180 mod 360
By in_imply_collinear on orthocenter(B, C, D), D, C we get collinear(C, D, orthocenter(B, C, D))
By in_imply_collinear on orthocenter(A, B, D), B, D we get collinear(B, D, orthocenter(A, B, D))
By line_inequality on Line(D, F), Line(B, G), F we get Line(B, G) != Line(D, F)
By in_imply_collinear on orthocenter(B, C, D), D, A we get collinear(A, D, orthocenter(B, C, D))
By in_imply_collinear on orthocenter(B, C, D), A, C we get collinear(A, C, orthocenter(B, C, D))
By divide_by_2_mod_180_v3 on C, D, B, B, F, E we get angle(C, D, B) == angle(B, F, E) + 180 mod 360
By divide_by_2_mod_180_v3 on F, E, A, B, C, A we get angle(F, E, A) == angle(B, C, A) + 180 mod 360
By divide_by_2_mod_180_v1 on A, F, E, A, D, B we get angle(A, D, B) == angle(A, F, E) mod 360
By divide_by_2_mod_180_v3 on B, E, F, B, C, A we get angle(B, E, F) == angle(B, C, A) + 180 mod 360
By line_containment_inequality on orthocenter(B, C, D), B, f we get B != orthocenter(B, C, D)
By divide_by_2_mod_180_v0 on B, F, E, B, D, C we get angle(B, D, C) == angle(B, F, E) mod 360
By divide_by_2_mod_180_v1 on E, F, B, A, D, B we get angle(A, D, B) == angle(E, F, B) mod 360
By line_inequality on altitude(D, B, C), g, D we get g != altitude(D, B, C)
By divide_by_2_mod_180_v0 on B, F, E, B, D, A we get angle(B, D, A) == angle(B, F, E) mod 360
By in_imply_collinear on orthocenter(A, B, D), D, C we get collinear(C, D, orthocenter(A, B, D))
By reverse_direction on F, E we get 180 == direction(F, E) - direction(E, F) mod 360
By divide_by_2_mod_180_v3 on A, D, B, B, F, E we get angle(A, D, B) == angle(B, F, E) + 180 mod 360
By divide_by_2_mod_180_v2 on B, F, E, C, D, B we get angle(B, F, E) == angle(C, D, B) + 180 mod 360
By divide_by_2_mod_180_v3 on E, F, B, B, D, C we get angle(E, F, B) == angle(B, D, C) + 180 mod 360
By divide_by_2_mod_180_v2 on B, D, C, A, F, E we get angle(B, D, C) == angle(A, F, E) + 180 mod 360
By divide_by_2_mod_180_v3 on A, D, B, E, F, A we get angle(A, D, B) == angle(E, F, A) + 180 mod 360
By divide_by_2_mod_180_v1 on F, E, A, B, C, D we get angle(B, C, D) == angle(F, E, A) mod 360
By divide_by_2_mod_180_v0 on E, F, A, B, D, A we get angle(B, D, A) == angle(E, F, A) mod 360
By divide_by_2_mod_180_v2 on A, E, F, A, C, B we get angle(A, E, F) == angle(A, C, B) + 180 mod 360
By divide_by_2_mod_180_v1 on A, F, E, C, D, B we get angle(A, F, E) == angle(C, D, B) mod 360
By divide_by_2_mod_180_v2 on E, F, A, C, D, B we get angle(E, F, A) == angle(C, D, B) + 180 mod 360
By divide_by_2_mod_180_v2 on B, D, C, E, F, B we get angle(B, D, C) == angle(E, F, B) + 180 mod 360
By divide_by_2_mod_180_v2 on F, E, B, A, C, B we get angle(F, E, B) == angle(A, C, B) + 180 mod 360
By divide_by_2_mod_180_v1 on C, D, B, E, F, B we get angle(C, D, B) == angle(E, F, B) mod 360
By divide_by_2_mod_180_v3 on A, C, B, A, E, F we get angle(A, C, B) == angle(A, E, F) + 180 mod 360
By divide_by_2_mod_180_v2 on B, D, A, A, F, E we get angle(B, D, A) == angle(A, F, E) + 180 mod 360
By line_inequality on Line(D, F), Line(A, E), F we get Line(A, E) != Line(D, F)
By line_inequality on altitude(D, A, B), Line(E, F), D we get Line(E, F) != altitude(D, A, B)
By divide_by_2_mod_180_v3 on A, F, E, B, D, C we get angle(A, F, E) == angle(B, D, C) + 180 mod 360
By divide_by_2_mod_180_v2 on B, D, A, E, F, B we get angle(B, D, A) == angle(E, F, B) + 180 mod 360
By divide_by_2_mod_180_v0 on A, E, F, D, C, B we get angle(A, E, F) == angle(D, C, B) mod 360
By divide_by_2_mod_180_v3 on A, C, B, F, E, B we get angle(A, C, B) == angle(F, E, B) + 180 mod 360
By line_inequality on altitude(D, B, C), Line(A, E), D we get Line(A, E) != altitude(D, B, C)
By parallel_line_angles_v1 on C, B, E, G we get parallel(Line(B, C), Line(E, G))
By divide_by_2_mod_180_v2 on B, F, E, A, D, B we get angle(B, F, E) == angle(A, D, B) + 180 mod 360
By line_inequality on altitude(D, A, B), Line(A, E), D we get Line(A, E) != altitude(D, A, B)
By line_inequality on Line(D, F), g, F we get g != Line(D, F)
By line_inequality on Line(E, center(d)), f, E we get f != Line(E, center(d))
By divide_by_2_mod_180_v2 on B, C, A, F, E, A we get angle(B, C, A) == angle(F, E, A) + 180 mod 360
By line_containment_inequality on orthocenter(B, C, D), E, Line(B, D) we get E != orthocenter(B, C, D)
By divide_by_2_mod_180_v3 on A, F, E, B, D, A we get angle(A, F, E) == angle(B, D, A) + 180 mod 360
By line_inequality on altitude(D, B, C), Line(B, E), D we get Line(B, E) != altitude(D, B, C)
By divide_by_2_mod_180_v2 on B, C, A, B, E, F we get angle(B, C, A) == angle(B, E, F) + 180 mod 360
By reverse_direction on E, F we get 180 == direction(E, F) - direction(F, E) mod 360
By line_inequality on Line(G, center(d)), Line(C, E), G we get Line(C, E) != Line(G, center(d))
By line_inequality on Line(D, F), Line(C, E), F we get Line(C, E) != Line(D, F)
By line_inequality on Line(B, center(d)), f, B we get f != Line(B, center(d))
By double_perpendicular_and_parallel_v0 on altitude(D, A, B), Line(A, B), Line(E, F) we get parallel(Line(E, F), altitude(D, A, B))
By line_inequality on altitude(D, A, B), Line(C, E), D we get Line(C, E) != altitude(D, A, B)
By line_inequality on Line(D, center(d)), g, D we get g != Line(D, center(d))
By line_containment_inequality on orthocenter(B, C, D), G, Line(B, D) we get G != orthocenter(B, C, D)
By line_inequality on Line(B, center(d)), Line(E, F), B we get Line(E, F) != Line(B, center(d))
By perpendicular_angle_conditions_v0 on A, F, E we get angle(A, F, E) == orientation(A, F, E) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on B, F, D we get B not in Line(D, F)
By perpendicular_angle_conditions_v0 on E, F, B we get angle(E, F, B) == orientation(B, E, F) mod 360
By line_inequality on altitude(D, A, B), Line(A, B), D we get Line(A, B) != altitude(D, A, B)
By perpendicular_angle_conditions_v0 on E, F, A we get angle(E, F, A) == orientation(A, E, F) mod 360
By line_inequality on radical_axis(c, d), Line(E, F), B we get Line(E, F) != radical_axis(c, d)
By line_inequality on altitude(D, B, C), Line(B, C), D we get Line(B, C) != altitude(D, B, C)
By line_inequality on Line(E, center(d)), Line(A, B), E we get Line(A, B) != Line(E, center(d))
By not_in_line_equivalent_to_not_collinear_v0_r on C, D, F we get C not in Line(D, F)
By line_inequality on Line(D, center(d)), Line(B, C), D we get Line(B, C) != Line(D, center(d))
By not_in_line_equivalent_to_not_collinear_v0_r on E, F, D we get E not in Line(D, F)
By line_inequality on Line(G, center(d)), Line(A, E), G we get Line(A, E) != Line(G, center(d))
By line_inequality on Line(E, center(d)), Line(B, D), E we get Line(B, D) != Line(E, center(d))
By line_containment_inequality on orthocenter(A, B, D), G, Line(B, D) we get G != orthocenter(A, B, D)
By line_inequality on Line(D, F), Line(E, F), D we get Line(D, F) != Line(E, F)
By line_inequality on Line(D, F), Line(B, C), F we get Line(B, C) != Line(D, F)
By line_containment_inequality on orthocenter(A, B, D), C, Line(B, D) we get C != orthocenter(A, B, D)
By line_inequality on altitude(D, B, C), Line(A, B), D we get Line(A, B) != altitude(D, B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on A, D, F we get A not in Line(D, F)
By line_inequality on Line(D, center(d)), Line(B, E), D we get Line(B, E) != Line(D, center(d))
By line_inequality on Line(G, center(d)), Line(E, F), G we get Line(E, F) != Line(G, center(d))
By line_inequality on Line(G, center(d)), Line(B, C), G we get Line(B, C) != Line(G, center(d))
By line_containment_inequality on orthocenter(B, C, D), F, f we get F != orthocenter(B, C, D)
By line_inequality on Line(G, center(d)), Line(A, B), G we get Line(A, B) != Line(G, center(d))
By line_containment_inequality on orthocenter(A, B, D), E, Line(B, D) we get E != orthocenter(A, B, D)
By line_inequality on altitude(D, A, B), Line(B, E), D we get Line(B, E) != altitude(D, A, B)
By line_inequality on Line(D, center(d)), Line(C, E), D we get Line(C, E) != Line(D, center(d))
By line_inequality on Line(B, center(d)), Line(C, E), B we get Line(C, E) != Line(B, center(d))
By line_inequality on altitude(D, A, B), g, D we get g != altitude(D, A, B)
By line_inequality on Line(B, center(d)), Line(D, G), B we get Line(D, G) != Line(B, center(d))
By line_inequality on altitude(D, A, B), Line(B, C), D we get Line(B, C) != altitude(D, A, B)
By line_inequality on Line(G, center(d)), Line(D, E), G we get Line(D, E) != Line(G, center(d))
By line_inequality on Line(D, center(d)), Line(A, E), D we get Line(A, E) != Line(D, center(d))
By line_inequality on altitude(D, B, C), Line(B, G), D we get Line(B, G) != altitude(D, B, C)
By line_inequality on altitude(D, B, C), Line(C, E), D we get Line(C, E) != altitude(D, B, C)
By line_inequality on Line(D, center(d)), Line(E, F), D we get Line(E, F) != Line(D, center(d))
By line_inequality on Line(D, F), f, F we get f != Line(D, F)
By line_inequality on Line(D, F), Line(D, E), F we get Line(D, E) != Line(D, F)
By line_containment_inequality on orthocenter(A, B, D), A, Line(B, D) we get A != orthocenter(A, B, D)
By line_inequality on altitude(D, A, B), Line(B, G), D we get Line(B, G) != altitude(D, A, B)
By line_inequality on Line(B, center(d)), g, B we get g != Line(B, center(d))
By line_inequality on Line(B, center(d)), Line(D, E), B we get Line(D, E) != Line(B, center(d))
By line_inequality on Line(D, center(d)), Line(A, B), D we get Line(A, B) != Line(D, center(d))
By line_inequality on Line(B, center(d)), Line(A, E), B we get Line(A, E) != Line(B, center(d))
By line_inequality on Line(D, center(d)), Line(B, G), D we get Line(B, G) != Line(D, center(d))
By line_inequality on Line(G, center(d)), Line(B, D), G we get Line(B, D) != Line(G, center(d))
By line_inequality on Line(E, center(d)), Line(B, G), E we get Line(B, G) != Line(E, center(d))
By line_containment_inequality on orthocenter(A, B, D), F, f we get F != orthocenter(A, B, D)
By line_inequality on Line(G, center(d)), Line(B, E), G we get Line(B, E) != Line(G, center(d))
By line_inequality on Line(E, center(d)), Line(B, C), E we get Line(B, C) != Line(E, center(d))
By line_inequality on Line(D, F), Line(B, D), F we get Line(B, D) != Line(D, F)
By line_inequality on Line(D, F), Line(A, B), D we get Line(A, B) != Line(D, F)
By line_containment_inequality on orthocenter(B, C, D), A, Line(B, D) we get A != orthocenter(B, C, D)
By line_inequality on Line(D, F), Line(B, E), D we get Line(B, E) != Line(D, F)
By line_containment_inequality on orthocenter(A, B, D), B, f we get B != orthocenter(A, B, D)
By line_inequality on Line(G, center(d)), f, G we get f != Line(G, center(d))
By line_containment_inequality on orthocenter(B, C, D), C, Line(B, D) we get C != orthocenter(B, C, D)
By line_inequality on Line(E, center(d)), Line(D, G), E we get Line(D, G) != Line(E, center(d))
By line_inequality on altitude(D, B, C), Line(E, F), D we get Line(E, F) != altitude(D, B, C)
By sss_anti_congruence_v1 on D, B, F, B, D, F we get anti_congruent_triangles(B, D, F, D, B, F)
By sss_anti_congruence_v0 on B, D, F, D, B, F we get anti_congruent_triangles(B, D, F, D, B, F)
By sss_anti_congruence_v1 on D, B, F, B, D, F we get anti_congruent_triangles(B, D, F, D, B, F)
By sss_anti_congruence_v0 on F, B, D, F, D, B we get anti_congruent_triangles(B, D, F, D, B, F)
By isosceles_triangle_altitude_v3 on F, B, A we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, F, B), perpendicular_line(F, Line(A, B)))
By sss_anti_congruence_v0 on A, F, D, D, F, A we get anti_congruent_triangles(A, D, F, D, A, F)
By tangent_chord_angle_v1 on E, B, C, G we get tangent(Line(E, G), Circle(B, C, E))
By sss_anti_congruence_v1 on F, D, B, F, B, D we get anti_congruent_triangles(B, D, F, D, B, F)
By sss_anti_congruence_v1 on B, F, D, D, F, B we get anti_congruent_triangles(B, D, F, D, B, F)
By sss_anti_congruence_v0 on D, A, F, A, D, F we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v0 on B, D, F, D, B, F we get anti_congruent_triangles(B, D, F, D, B, F)
By sss_anti_congruence_v1 on F, A, D, F, D, A we get anti_congruent_triangles(A, D, F, D, A, F)
By radical_axis_definition_v0_r on B, Circle(A, B, D), c we get B in radical_axis(c, Circle(A, B, D))
By sss_anti_congruence_v1 on F, D, B, F, B, D we get anti_congruent_triangles(B, D, F, D, B, F)
By sss_anti_congruence_v0 on D, A, F, A, D, F we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v0 on B, D, F, D, B, F we get anti_congruent_triangles(B, D, F, D, B, F)
By sss_anti_congruence_v1 on A, D, F, D, A, F we get anti_congruent_triangles(A, D, F, D, A, F)
By external_angle_bisector_definition_v0_r on A, E, A, F we get Line(E, F) == external_angle_bisector(A, F, A)
By sss_anti_congruence_v1 on D, F, A, A, F, D we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v0 on F, D, A, F, A, D we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v1 on F, A, D, F, D, A we get anti_congruent_triangles(A, D, F, D, A, F)
By aa_similarity on D, F, B, C, E, B we get similar_triangles(B, C, E, B, D, F)
By sas_anti_congruence on D, F, B, B, F, D we get anti_congruent_triangles(B, D, F, D, B, F)
By sss_anti_congruence_v0 on F, D, A, F, A, D we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v1 on F, A, D, F, D, A we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v1 on B, F, D, D, F, B we get anti_congruent_triangles(B, D, F, D, B, F)
By sss_anti_congruence_v0 on F, D, A, F, A, D we get anti_congruent_triangles(A, D, F, D, A, F)
By external_angle_bisector_definition_v0_r on E, B, E, F we get Line(B, F) == external_angle_bisector(E, F, E)
By external_angle_bisector_definition_v0_r on E, A, E, F we get Line(A, F) == external_angle_bisector(E, F, E)
By sss_anti_congruence_v0 on A, F, D, D, F, A we get anti_congruent_triangles(A, D, F, D, A, F)
By perpendicular_bisector_properties on B, A we get perpendicular(Line(A, B), perpendicular_bisector(A, B)), midpoint(A, B) == line_intersection(Line(A, B), perpendicular_bisector(A, B))
By perpendicular_lines_draw_intersection on Line(A, B), Line(E, F) we get exists(line_intersection(Line(A, B), Line(E, F)))
By sss_anti_congruence_v1 on A, D, F, D, A, F we get anti_congruent_triangles(A, D, F, D, A, F)
By log_of_2_times_distance on B, A, F, D we get log(distance(A, B)) == 0.6931471805599453 + log(distance(D, F))
By sss_anti_congruence_v0 on D, A, F, A, D, F we get anti_congruent_triangles(A, D, F, D, A, F)
By external_angle_bisector_definition_v0_r on B, E, B, F we get Line(E, F) == external_angle_bisector(B, F, B)
By sss_anti_congruence_v1 on A, D, F, D, A, F we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v0 on B, D, F, D, B, F we get anti_congruent_triangles(B, D, F, D, B, F)
By altitude_definition on E, A, B, Line(E, F) we get Line(E, F) == altitude(E, A, B)
By sss_anti_congruence_v1 on F, D, B, F, B, D we get anti_congruent_triangles(B, D, F, D, B, F)
By sss_anti_congruence_v0 on D, A, F, A, D, F we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v1 on D, F, A, A, F, D we get anti_congruent_triangles(A, D, F, D, A, F)
By sas_anti_congruence on B, F, D, D, F, B we get anti_congruent_triangles(B, D, F, D, B, F)
By sss_anti_congruence_v0 on F, B, D, F, D, B we get anti_congruent_triangles(B, D, F, D, B, F)
By sss_anti_congruence_v1 on D, B, F, B, D, F we get anti_congruent_triangles(B, D, F, D, B, F)
By sss_anti_congruence_v1 on D, F, A, A, F, D we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v1 on F, D, B, F, B, D we get anti_congruent_triangles(B, D, F, D, B, F)
By sss_anti_congruence_v1 on D, B, F, B, D, F we get anti_congruent_triangles(B, D, F, D, B, F)
By isosceles_triangle_properties on F, A, D we get distance(A, F) == distance(D, F), angle(A, D, F) == angle(F, A, D) mod 360
By sss_anti_congruence_v1 on D, B, F, B, D, F we get anti_congruent_triangles(B, D, F, D, B, F)
By sas_anti_congruence on D, F, A, A, F, D we get anti_congruent_triangles(A, D, F, D, A, F)
By radical_axis_definition_v0_r on A, Circle(A, B, D), c we get A in radical_axis(c, Circle(A, B, D))
By sss_anti_congruence_v0 on A, F, D, D, F, A we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v0 on D, F, B, B, F, D we get anti_congruent_triangles(B, D, F, D, B, F)
By sss_anti_congruence_v0 on D, A, F, A, D, F we get anti_congruent_triangles(A, D, F, D, A, F)
By reverse_direction on center(d), B we get 180 == direction(center(d), B) - direction(B, center(d)) mod 360
By aa_anti_similarity on D, B, F, B, C, E we get anti_similar_triangles(B, C, E, D, B, F)
By sss_anti_congruence_v0 on B, D, F, D, B, F we get anti_congruent_triangles(B, D, F, D, B, F)
By sss_anti_congruence_v0 on A, F, D, D, F, A we get anti_congruent_triangles(A, D, F, D, A, F)
By reverse_direction on center(d), D we get 180 == direction(center(d), D) - direction(D, center(d)) mod 360
By isosceles_triangle_properties on F, B, D we get distance(B, F) == distance(D, F), angle(B, D, F) == angle(F, B, D) mod 360
By sss_anti_congruence_v1 on B, F, D, D, F, B we get anti_congruent_triangles(B, D, F, D, B, F)
By aa_anti_similarity on D, F, B, B, E, C we get anti_similar_triangles(B, C, E, D, B, F)
By sss_anti_congruence_v0 on F, D, A, F, A, D we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v0 on F, D, A, F, A, D we get anti_congruent_triangles(A, D, F, D, A, F)
By internal_angle_bisector_definition_v0_r on A, E, B, F we get Line(E, F) == internal_angle_bisector(A, F, B)
By isosceles_triangle_properties on F, D, A we get distance(A, F) == distance(D, F), angle(D, A, F) == angle(F, D, A) mod 360
By sss_anti_congruence_v1 on F, A, D, F, D, A we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v1 on F, D, B, F, B, D we get anti_congruent_triangles(B, D, F, D, B, F)
By sss_anti_congruence_v1 on A, D, F, D, A, F we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v1 on F, D, B, F, B, D we get anti_congruent_triangles(B, D, F, D, B, F)
By sss_anti_congruence_v0 on F, D, A, F, A, D we get anti_congruent_triangles(A, D, F, D, A, F)
By aa_similarity on D, B, F, C, B, E we get similar_triangles(B, C, E, B, D, F)
By aa_anti_similarity on B, E, C, D, F, B we get anti_similar_triangles(B, C, E, D, B, F)
By sss_anti_congruence_v1 on D, F, A, A, F, D we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v0 on F, B, D, F, D, B we get anti_congruent_triangles(B, D, F, D, B, F)
By sss_anti_congruence_v0 on A, F, D, D, F, A we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v1 on D, F, A, A, F, D we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v0 on D, A, F, A, D, F we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v1 on B, F, D, D, F, B we get anti_congruent_triangles(B, D, F, D, B, F)
By sss_anti_congruence_v1 on A, D, F, D, A, F we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v0 on D, F, B, B, F, D we get anti_congruent_triangles(B, D, F, D, B, F)
By sss_anti_congruence_v1 on B, F, D, D, F, B we get anti_congruent_triangles(B, D, F, D, B, F)
By sss_anti_congruence_v0 on F, B, D, F, D, B we get anti_congruent_triangles(B, D, F, D, B, F)
By sss_anti_congruence_v0 on D, F, B, B, F, D we get anti_congruent_triangles(B, D, F, D, B, F)
By sss_anti_congruence_v1 on D, B, F, B, D, F we get anti_congruent_triangles(B, D, F, D, B, F)
By reverse_direction on center(d), E we get 180 == direction(center(d), E) - direction(E, center(d)) mod 360
By sss_anti_congruence_v0 on A, F, D, D, F, A we get anti_congruent_triangles(A, D, F, D, A, F)
By aa_anti_similarity on B, C, E, D, B, F we get anti_similar_triangles(B, C, E, D, B, F)
By aa_similarity on C, E, B, D, F, B we get similar_triangles(B, C, E, B, D, F)
By sss_anti_congruence_v0 on B, D, F, D, B, F we get anti_congruent_triangles(B, D, F, D, B, F)
By reverse_direction on center(d), G we get 180 == direction(center(d), G) - direction(G, center(d)) mod 360
By sss_anti_congruence_v1 on A, D, F, D, A, F we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v1 on F, A, D, F, D, A we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v0 on F, B, D, F, D, B we get anti_congruent_triangles(B, D, F, D, B, F)
By sss_anti_congruence_v1 on F, A, D, F, D, A we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v0 on D, F, B, B, F, D we get anti_congruent_triangles(B, D, F, D, B, F)
By sss_anti_congruence_v0 on F, B, D, F, D, B we get anti_congruent_triangles(B, D, F, D, B, F)
By sas_anti_congruence on A, F, D, D, F, A we get anti_congruent_triangles(A, D, F, D, A, F)
By isosceles_triangle_properties on F, D, B we get distance(B, F) == distance(D, F), angle(D, B, F) == angle(F, D, B) mod 360
By sss_anti_congruence_v1 on B, F, D, D, F, B we get anti_congruent_triangles(B, D, F, D, B, F)
By reverse_direction on F, D we get 180 == direction(F, D) - direction(D, F) mod 360
By aa_similarity on C, B, E, D, B, F we get similar_triangles(B, C, E, B, D, F)
By sss_anti_congruence_v0 on D, F, B, B, F, D we get anti_congruent_triangles(B, D, F, D, B, F)
By sss_anti_congruence_v1 on D, F, A, A, F, D we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v0 on D, F, B, B, F, D we get anti_congruent_triangles(B, D, F, D, B, F)
By perpendicular_lines_draw_intersection on Line(A, B), altitude(D, A, B) we get exists(line_intersection(Line(A, B), altitude(D, A, B)))
By perpendicular_lines_draw_intersection on altitude(D, B, C), Line(B, C) we get exists(line_intersection(Line(B, C), altitude(D, B, C)))
By isosceles_triangle_altitude_v1 on F, A, B we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, F, B), perpendicular_line(F, Line(A, B)))
By isosceles_triangle_altitude_v3 on F, A, B we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, F, B), perpendicular_line(F, Line(A, B)))
By isosceles_triangle_altitude_v1 on F, B, A we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, F, B), perpendicular_line(F, Line(A, B)))
By altitude_definition on E, F, A, Line(E, F) we get Line(E, F) == altitude(E, A, F)
By isosceles_triangle_properties on center(d), B, E we get distance(B, center(d)) == distance(E, center(d)), angle(B, E, center(d)) == angle(center(d), B, E) mod 360
By power_of_a_point_definition on C, D, A, Circle(A, B, D) we get log(distance(C, D)) + log(distance(A, C)) == log(power_of_a_point(C, Circle(A, B, D)))
By altitude_definition on E, F, B, Line(E, F) we get Line(E, F) == altitude(E, B, F)
By isosceles_triangle_properties on center(d), G, E we get distance(E, center(d)) == distance(G, center(d)), angle(G, E, center(d)) == angle(center(d), G, E) mod 360
By isosceles_triangle_properties on center(d), E, B we get distance(B, center(d)) == distance(E, center(d)), angle(E, B, center(d)) == angle(center(d), E, B) mod 360
By isosceles_triangle_properties on center(d), E, D we get distance(D, center(d)) == distance(E, center(d)), angle(E, D, center(d)) == angle(center(d), E, D) mod 360
By altitude_definition on A, F, E, Line(A, B) we get Line(A, B) == altitude(A, E, F)
By altitude_definition on D, B, F, altitude(D, A, B) we get altitude(D, A, B) == altitude(D, B, F)
By isosceles_triangle_properties on center(d), D, B we get distance(B, center(d)) == distance(D, center(d)), angle(D, B, center(d)) == angle(center(d), D, B) mod 360
By isosceles_triangle_properties on center(d), E, G we get distance(E, center(d)) == distance(G, center(d)), angle(E, G, center(d)) == angle(center(d), E, G) mod 360
By altitude_definition on D, F, A, altitude(D, A, B) we get altitude(D, A, B) == altitude(D, A, F)
By isosceles_triangle_properties on center(d), G, B we get distance(B, center(d)) == distance(G, center(d)), angle(G, B, center(d)) == angle(center(d), G, B) mod 360
By isosceles_triangle_properties on center(d), D, E we get distance(D, center(d)) == distance(E, center(d)), angle(D, E, center(d)) == angle(center(d), D, E) mod 360
By altitude_definition on B, E, F, Line(A, B) we get Line(A, B) == altitude(B, E, F)
By isosceles_triangle_properties on center(d), D, G we get distance(D, center(d)) == distance(G, center(d)), angle(D, G, center(d)) == angle(center(d), D, G) mod 360
By power_of_a_point_definition on F, B, A, Circle(A, B, D) we get log(distance(B, F)) + log(distance(A, F)) == log(power_of_a_point(F, Circle(A, B, D)))
By isosceles_triangle_properties on center(d), B, D we get distance(B, center(d)) == distance(D, center(d)), angle(B, D, center(d)) == angle(center(d), B, D) mod 360
By isosceles_triangle_properties on center(d), G, D we get distance(D, center(d)) == distance(G, center(d)), angle(G, D, center(d)) == angle(center(d), G, D) mod 360
By isosceles_triangle_properties on center(d), B, G we get distance(B, center(d)) == distance(G, center(d)), angle(B, G, center(d)) == angle(center(d), B, G) mod 360
By line_intersection_definition on D, Line(B, D), Line(D, F) we get D == line_intersection(Line(B, D), Line(D, F))
By line_intersection_definition on F, Line(D, F), Line(A, B) we get F == line_intersection(Line(A, B), Line(D, F))
By line_intersection_definition on F, Line(D, F), Line(E, F) we get F == line_intersection(Line(D, F), Line(E, F))
By perpendicular_line_definition on line_intersection(Line(A, B), altitude(D, A, B)), Line(A, B), altitude(D, A, B) we get Line(A, B) == perpendicular_line(line_intersection(Line(A, B), altitude(D, A, B)), altitude(D, A, B))
By perpendicular_line_definition on line_intersection(Line(A, B), altitude(D, A, B)), Line(A, B), Line(E, F) we get Line(A, B) == perpendicular_line(line_intersection(Line(A, B), altitude(D, A, B)), Line(E, F))
By perpendicular_line_definition on E, Line(E, center(d)), radical_axis(c, d) we get Line(E, center(d)) == perpendicular_line(E, radical_axis(c, d))
By line_intersection_definition on D, Line(D, F), f we get D == line_intersection(f, Line(D, F))
By perpendicular_line_definition on line_intersection(Line(A, B), altitude(D, A, B)), altitude(D, A, B), Line(A, B) we get altitude(D, A, B) == perpendicular_line(line_intersection(Line(A, B), altitude(D, A, B)), Line(A, B))
By perpendicular_line_definition on line_intersection(Line(B, C), altitude(D, B, C)), Line(B, C), altitude(D, B, C) we get Line(B, C) == perpendicular_line(line_intersection(Line(B, C), altitude(D, B, C)), altitude(D, B, C))
By perpendicular_line_definition on B, radical_axis(c, d), Line(E, center(d)) we get radical_axis(c, d) == perpendicular_line(B, Line(E, center(d)))
By line_intersection_definition on D, Line(D, F), Line(D, E) we get D == line_intersection(Line(D, E), Line(D, F))
By perpendicular_line_definition on center(d), Line(E, center(d)), radical_axis(c, d) we get Line(E, center(d)) == perpendicular_line(center(d), radical_axis(c, d))
By perpendicular_line_definition on line_intersection(Line(B, C), altitude(D, B, C)), altitude(D, B, C), Line(B, C) we get altitude(D, B, C) == perpendicular_line(line_intersection(Line(B, C), altitude(D, B, C)), Line(B, C))
By same_angle_converse_v0 on D, F, G, A we get collinear(D, F, G)
By parallel_line_definition on line_intersection(Line(A, B), altitude(D, A, B)), altitude(D, A, B), Line(E, F) we get altitude(D, A, B) == parallel_line(line_intersection(Line(A, B), altitude(D, A, B)), Line(E, F))
By parallel_line_definition on D, altitude(D, A, B), Line(E, F) we get altitude(D, A, B) == parallel_line(D, Line(E, F))
By parallel_line_definition on B, Line(B, C), g we get Line(B, C) == parallel_line(B, g)
By parallel_line_definition on line_intersection(Line(B, C), altitude(D, B, C)), Line(B, C), g we get Line(B, C) == parallel_line(line_intersection(Line(B, C), altitude(D, B, C)), g)
By parallel_line_definition on C, Line(B, C), g we get Line(B, C) == parallel_line(C, g)
By parallel_line_definition on F, Line(E, F), altitude(D, A, B) we get Line(E, F) == parallel_line(F, altitude(D, A, B))
By parallel_line_definition on E, g, Line(B, C) we get g == parallel_line(E, Line(B, C))
By parallel_line_definition on E, Line(E, F), altitude(D, A, B) we get Line(E, F) == parallel_line(E, altitude(D, A, B))
By parallel_line_definition on G, g, Line(B, C) we get g == parallel_line(G, Line(B, C))
By orthocenter_concurrency on E, A, F we get orthocenter(A, E, F) in altitude(E, A, F), orthocenter(A, E, F) in altitude(A, E, F), orthocenter(A, E, F) in altitude(F, A, E)
By orthocenter_concurrency on B, E, F we get orthocenter(B, E, F) in altitude(B, E, F), orthocenter(B, E, F) in altitude(E, B, F), orthocenter(B, E, F) in altitude(F, B, E)
By in_imply_collinear on line_intersection(Line(A, B), altitude(D, A, B)), A, F we get collinear(A, F, line_intersection(Line(A, B), altitude(D, A, B)))
By in_imply_collinear on line_intersection(Line(A, B), altitude(D, A, B)), B, F we get collinear(B, F, line_intersection(Line(A, B), altitude(D, A, B)))
By in_imply_collinear on line_intersection(Line(B, C), altitude(D, B, C)), B, C we get collinear(B, C, line_intersection(Line(B, C), altitude(D, B, C)))
By in_imply_collinear on line_intersection(Line(A, B), altitude(D, A, B)), A, B we get collinear(A, B, line_intersection(Line(A, B), altitude(D, A, B)))
By parallel_line_angles_reverse_v1 on E, G, B, C we get angle(C, B, G) == angle(E, G, B) mod 360
By aa_similarity on B, C, D, B, E, F we get similar_triangles(B, C, D, B, E, F)
By aa_anti_similarity on B, D, C, A, F, E we get anti_similar_triangles(A, E, F, B, C, D)
By line_containment_inequality on line_intersection(Line(B, C), altitude(D, B, C)), D, Line(B, C) we get D != line_intersection(Line(B, C), altitude(D, B, C))
By aa_anti_similarity on A, F, E, B, D, C we get anti_similar_triangles(A, E, F, B, C, D)
By aa_similarity on B, E, F, B, C, D we get similar_triangles(B, C, D, B, E, F)
By line_containment_inequality on line_intersection(Line(A, B), altitude(D, A, B)), C, Line(A, B) we get C != line_intersection(Line(A, B), altitude(D, A, B))
By aa_similarity on B, D, C, B, F, E we get similar_triangles(B, C, D, B, E, F)
By aa_anti_similarity on A, E, F, B, C, D we get anti_similar_triangles(A, E, F, B, C, D)
By line_containment_inequality on line_intersection(Line(B, C), altitude(D, B, C)), G, Line(B, C) we get G != line_intersection(Line(B, C), altitude(D, B, C))
By double_perpendicular_and_parallel_v0_r on Line(B, C), altitude(D, B, C), g we get perpendicular(g, altitude(D, B, C))
By aa_similarity on B, F, E, B, D, C we get similar_triangles(B, C, D, B, E, F)
By aa_anti_similarity on B, C, D, A, E, F we get anti_similar_triangles(A, E, F, B, C, D)
By line_inequality on radical_axis(c, d), Line(D, F), B we get Line(D, F) != radical_axis(c, d)
By line_containment_inequality on line_intersection(Line(A, B), altitude(D, A, B)), G, Line(A, B) we get G != line_intersection(Line(A, B), altitude(D, A, B))
By line_containment_inequality on line_intersection(Line(B, C), altitude(D, B, C)), A, Line(B, C) we get A != line_intersection(Line(B, C), altitude(D, B, C))
By line_containment_inequality on line_intersection(Line(B, C), altitude(D, B, C)), F, Line(B, C) we get F != line_intersection(Line(B, C), altitude(D, B, C))
By line_inequality on Line(B, center(d)), Line(D, F), B we get Line(D, F) != Line(B, center(d))
By line_inequality on Line(E, center(d)), Line(D, F), E we get Line(D, F) != Line(E, center(d))
By line_containment_inequality on line_intersection(Line(B, C), altitude(D, B, C)), E, Line(B, C) we get E != line_intersection(Line(B, C), altitude(D, B, C))
By line_containment_inequality on line_intersection(Line(A, B), altitude(D, A, B)), E, Line(A, B) we get E != line_intersection(Line(A, B), altitude(D, A, B))
By line_containment_inequality on line_intersection(Line(A, B), altitude(D, A, B)), D, Line(A, B) we get D != line_intersection(Line(A, B), altitude(D, A, B))
By anti_similar_triangle_basic_properties on D, F, B, B, E, C we get not_collinear(B, D, F), not_collinear(B, C, E), angle(D, F, B) == 0 - angle(B, E, C) mod 360, angle(F, B, D) == 0 - angle(E, C, B) mod 360, angle(B, D, F) == 0 - angle(C, B, E) mod 360, log(distance(B, E)) + log(distance(B, F)) == log(distance(D, F)) + log(distance(C, E)), log(distance(B, F)) + log(distance(B, C)) == log(distance(C, E)) + log(distance(B, D)), log(distance(B, C)) + log(distance(D, F)) == log(distance(B, D)) + log(distance(B, E))
By power_of_a_point_in_circle on E, Circle(B, C, E) we get 0 == power_of_a_point(E, Circle(B, C, E))
By perpendicular_lines_draw_intersection on Line(E, center(d)), radical_axis(c, d) we get exists(line_intersection(Line(E, center(d)), radical_axis(c, d)))
By similar_triangle_basic_properties on B, E, C, B, F, D we get not_collinear(B, C, E), not_collinear(B, D, F), angle(B, E, C) == angle(B, F, D) mod 360, angle(E, C, B) == angle(F, D, B) mod 360, angle(C, B, E) == angle(D, B, F) mod 360, log(distance(B, E)) + log(distance(D, F)) == log(distance(B, F)) + log(distance(C, E)), log(distance(C, E)) + log(distance(B, D)) == log(distance(D, F)) + log(distance(B, C)), log(distance(B, C)) + log(distance(B, F)) == log(distance(B, D)) + log(distance(B, E))
By anti_similar_triangle_basic_properties on B, F, D, C, E, B we get not_collinear(B, D, F), not_collinear(B, C, E), angle(B, F, D) == 0 - angle(C, E, B) mod 360, angle(F, D, B) == 0 - angle(E, B, C) mod 360, angle(D, B, F) == 0 - angle(B, C, E) mod 360, log(distance(B, F)) + log(distance(B, E)) == log(distance(C, E)) + log(distance(D, F)), log(distance(B, E)) + log(distance(B, D)) == log(distance(D, F)) + log(distance(B, C)), log(distance(B, C)) + log(distance(B, F)) == log(distance(B, D)) + log(distance(C, E))
By similar_triangle_basic_properties on E, B, C, F, B, D we get not_collinear(B, C, E), not_collinear(B, D, F), angle(E, B, C) == angle(F, B, D) mod 360, angle(B, C, E) == angle(B, D, F) mod 360, angle(C, E, B) == angle(D, F, B) mod 360, log(distance(B, E)) + log(distance(B, D)) == log(distance(B, F)) + log(distance(B, C)), log(distance(B, C)) + log(distance(D, F)) == log(distance(B, D)) + log(distance(C, E)), log(distance(C, E)) + log(distance(B, F)) == log(distance(D, F)) + log(distance(B, E))
By draw_point_of_tangency on g, Circle(B, C, E) we get exists(line_circle_tangent_point(g, Circle(B, C, E)))
By power_of_a_point_on_circle on B, Circle(B, C, E) we get 0 == power_of_a_point(B, Circle(B, C, E))
By power_of_a_point_in_circle on C, Circle(B, C, E) we get 0 == power_of_a_point(C, Circle(B, C, E))
By radical_axis_definition_v0 on line_intersection(Line(A, B), altitude(D, A, B)), Circle(A, B, D), c we get power_of_a_point(line_intersection(Line(A, B), altitude(D, A, B)), c) == power_of_a_point(line_intersection(Line(A, B), altitude(D, A, B)), Circle(A, B, D))
By power_of_a_point_tangent on G, E, Circle(B, C, E) we get 2 * log(distance(E, G)) == log(power_of_a_point(G, Circle(B, C, E)))
