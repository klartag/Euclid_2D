Assumptions:
A, B, C, D, E, F, G, H: Point
f, g, h, i, j, k: Line
c, d: Circle
distinct(A, B, C, D, E, F, G, H)
distinct(f, g, h, i, j, k)
distinct(c, d)
f == Line(A, B)
g == Line(B, C)
h == parallel_line(C, f)
c == Circle(A, B, C)
D in h, c
i == Line(A, D)
E == line_intersection(g, i)
F == center(c)
d == Circle(D, E, F)
j == Line(A, C)
D in k
G == line_intersection(j, k)
H in k, d

Embedding:
C := {"x": "-1.2434509181315049897165181391756050288677215576171875", "y": "0.1366441807866645152813589447760023176670074462890625"}
B := {"x": "1.182134473786131678707533865235745906829833984375", "y": "-0.54566487782700867636975772256846539676189422607421875"}
A := {"x": "0.209079676353990162596119262161664664745330810546875", "y": "-1.6753495966460134614095522920251823961734771728515625"}
c := {"center": {"x": "-0.094156323488590190955902919484671080174026222094988210445994034598942854715071072587902394682666852771863961830942598165809088473247729481029726346347283406738384743287175519987408386531870204324216861049411527604199708544328493719239535813311711066817489535824873175068392999384180352261431550646988190677974492163157446473791237508610377595358435539008478726263049807200537163808083974110857134200356514334885069417728582667816990829397635693880710743999961994329761809295718141792175990842019746276139696431997745757604849127855910954399814628389031784300198933721882447128101115484734361186783623482846892762682319410276197450052902522780963140457214862023380014641218400904688973624721814163166880265967557821306716592572657947331962921244690317011703827847996578153979000866642978290491673738499370281141765638061449160593520948825233776215253741177052669183013558719960386296397726133558909979406799858570591498601324753181641744765646905775675965647779175971914624456004378018171249154656398886511493346444293346932828396045192868775225216176704372005677207324514137468754204698921235472873160183927265512187698179024141385501846744647861866069617091803422445437882896375212288489185717453332949346935812173156005649796484332660328690244201191078291563358659539568609808406171811990015630548544126276938008684316595149073077562224486642363403368654603982943383442234786287217894667914696782340450904472030573763545600349935769635811066014341054759585994573737393651589229729790890130961434229464454653158680269274409164913382755450824880696366305529137969860373677811701539287553309393771734600503120107599353380406758524042230705751080429905682398495161022803087660582124197593734744624042732305120153197088784272138683473347634626537838612621884139197765739351257045906350060737137376469375046074318373130611495508740319502337869548002779074606457627750317763868250313094035506140743476201086753758459141713246404581104335586338321313298766719965777084777154200903339519222170004770395271212", "y": "-0.43024392925161098626758507072255365810382190868693325689172808981613697947991958766497250817601279054528540274267256639765970836670264933532543734933327993472510801618008238009279717927736013323408374566935813125593464522220517214650770794441696224610336790664213776269675681349096625198895549232157349468723610712685970620058123149996893093479203552362276961002480892572293809605194092695420487720793161612673112151175068088203245536045939343753467636462821979602568460512719754554890102095207824208856210467805195172817386449511202635784531668280534048241320112009021347283935252275159089849428289235153383729624077537600173819398817862554618499360331347687659027954159886714928845459563253800524910992174472132815957133635305183274485591269493764726334626659977215065696356022991946637052860710282305584260572497397643244056927937179562083578145277517656744063095442675221595746560801689670387679331242986711415581625202720136583734147298165227212586864933954928321653881014135751353969529669437427771619541201875712943654098558974846206986239116689983491043668081627105929663360526706410771169574663064351417264467252311701918149696133396741219582585432383802911499576842374441261123423560038805030435931659402654146599582835933698681198198315151888955608243250292278653935382604472696126497907151465276590979390193521590400275427913505923539548306731656912747102196371522218826282113073236744258322221698023099476346854021454437530807117850808785090338284004902166444295768801527843287837209411066394181675310840302132093751544032485435473587521260518618907458540756988605441377673556004145850571964555789487386750236335019483424821219364966018757893801859197609849831761607809272163286185244795721941104764441407026271836150364242267037454663095582324195908891747063575450321598048141907678843214948610252259346774911991520204273462193127044110019747422712997282474850299568868590850871463167676901848732108506424241302802338151375186521490231823116092435417333732622230660251190822054342682667"}, "radius_squared": "1.6422401945781897951159162875776252667121751925340925696609730372844816868688178106859672393440557348590290181683402679716434332513231729518796054129560244441075803112556975503429618062512957890263426376442993657013821064021371507318275848295987022674877644947027591892729389580749618085209882807437458257351950274937049131264952431055585727785914078724841159679927716424089644884881752210303067155481313784695804320968115008535498129754261541738980035330729638317376014956184895911942887634237718711552509267106013512414428008858462452453843849331154383674024989513307659535266122800536188398410332121186040166045219250713984959757037954953293486652219126072899108855470171901988174396801427628705336326606772947179488527007006395308833623003547326902030409618280918250066981101172007549087179639465599461806113822433721670872446323042452623259425609017229180172399588813551344420437017102888072306396569851955525127274815225766712863586660113665867207553323052194428124875524252243504834517171368046468023535708289097389981828064023302572700905936663273560713157894370087952099859189486163966275804401247791841635472811730935350994836675946942232709763729183731033905923682111451151137603824251700209351134185851327287058683367176600324320135711002594023956378531079797070031234209011792667028816819037758048288457432960786847756622906946723793686009485935012790786321770379572799201601120834552383689186019397677070063109267391073736501933927957496430486897057940358783765244445378429721270914364497642898833700730966608043654360228166483768246532530324486209856479691742950326452677501957873701096098811956180397814481197118118113596212070492182395933346747386844866969147378427552779471843921813114522470178847417024377822117640379886297788610394309212458342769824920130181596577214632196101632779893521847562703892133751734275838900105755313947192660119996409722199309516366538594163419027877819598187555402407210217404131295006283482511669743791559833624387871315401111465802015959770269621912"}
f := {"point": {"x": "0.209079676353990162596119262161664664745330810546875", "y": "-1.6753495966460134614095522920251823961734771728515625"}, "direction": {"x": "0.973054797432141516111414603074081242084503173828125", "y": "1.12968471881900478503979456945671699941158294677734375"}}
h := {"point": {"x": "-1.2434509181315049897165181391756050288677215576171875", "y": "0.1366441807866645152813589447760023176670074462890625"}, "direction": {"x": "0.973054797432141516111414603074081242084503173828125", "y": "1.12968471881900478503979456945671699941158294677734375"}}
D := {"x": "-0.82506204666950094719914550851742224445973764929160615597050991819663114073194750290690268278253307243609279129419989188457272821343038177918292998911641958598149584830721745609455870679636501736673882435353613802170284969587717347843541887050533721426625595109884525054084254939876779407291516770712809290965999104890909786847905600958482530342661181025185910435413969160518033260308657517495789723260163961726229485200754250272539064149790113047885426398482277671123022150933980239430496990741196465950603217084329623686809690401073709557326978261537011684605099551515398038558029883918346586748267143401646940836081448264713211374695830030199338002019192079237836463698776620870464433069143708621881913967310873211198782435259556685111346556976306927553519493793682862803229465676500746111905537057298475790184356714540510063808784870272312720041312346535778879405219016801378915966450325834334322304226088060600198117091604986301081380131861625294098756789391541129650878156725656877931978546939470789241325152857690658876853646345602193913032088136346565701604148100372517424181992543533790921943913079183924690257496324495555534951958536760415813608039750473438791796838909365752334025589392886302765305287811009894913355084271147959052494161812322248479239426531959123139504576938770682601008454820439264534899450589779193776439295500587412888247421400814234761367497097409839143632314844668898221471159705717402982590978672588649943846258103039125630590729322948234332872435812442532529669218065642368708901222656132930218669947137575416944239754801034504072103492800188853172996821903867648052159410254954436869496444804088486883468467800755293061405765770301070052014323411571725817444035926337505420652553189176996755703916729190999881556596674468990923464240070070347144746349036039636755202877645694261005576806130667574249460005463525933074139365066316197460884450998251502937768796649533664769610049407580437484967979445598819674408258413435295327848491577099037100683472435525225974931", "y": "0.62237994393366864346202256656197195242643155232311965873184990688917672770009350634540927740235952167031008934586211417685471131202791918371157338306630489384182900906387935662439947333589762531562371899831813509888367465738170006410187481205722185866045035820305028140755701945829432781875534590987530981883861596397022657864339299520118714660865989913486964047797270716620400132125354791532100303746304826063075220838717142975741647608711062559154665595553865910019208286348806413432323585994483778265396329021681147823489632148705922615927840578858096457823907733870122403626869919378606615412143756329346781019893386295778591970130261824036253797430479408443300271869140145073929031577734898728801865153238494170074874962944818964517276602069513046495307669065729559025207639912176042225953916579875816568812241269982892190068820770547579653334160114383917750866904848088075307378104937890269378203584395119774779602268386521854675989475989783318767864520437836818333686506932449668067490320744737514278430111391219485556012900442867791331455490984166713912080492222611202106661621110843465653188637636215977453409980419274101254267075827109409475328160216948517242104797706810596237410553635731842215970175591051948121965826317623436457564734398979332161407764889044665544476262152473494216782320823158733400910773583512524582334544733117902257484273078251113157179055430380352370342495680358088317355507503377031833079641881937386069683674490098358369997997988192638449310778296248498160238238042330774174823882834700640256522140806728198799074772613426243814932732029570823472642879274222696955699367287071343087857373400568366903729108484773737528737393046204423861673238921678940879649827714914250884589197156667754115875920653839566156239120391248036324694080897989958601649926206783006281457832147988150759599799129168303229998152682889101600701656509893888837829162137693888116758575408355169321240745687034199106261479593280302580551342334022029227774709404816668667107661736822240178651"}
i := {"point": {"x": "0.209079676353990162596119262161664664745330810546875", "y": "-1.6753495966460134614095522920251823961734771728515625"}, "direction": {"x": "-1.0341417230234911097952647706790869092050684598384811559705099181966311407319475029069026827825330724360927912941998918845727282134303817791829299891164195859814958483072174560945587067963650173667388243535361380217028496958771734784354188705053372142662559510988452505408425493987677940729151677071280929096599910489090978684790560095848253034266118102518591043541396916051803326030865751749578972326016396172622948520075425027253906414979011304788542639848227767112302215093398023943049699074119646595060321708432962368680969040107370955732697826153701168460509955151539803855802988391834658674826714340164694083608144826471321137469583003019933800201919207923783646369877662087046443306914370862188191396731087321119878243525955668511134655697630692755351949379368286280322946567650074611190553705729847579018435671454051006380878487027231272004131234653577887940521901680137891596645032583433432230422608806060019811709160498630108138013186162529409875678939154112965087815672565687793197854693947078924132515285769065887685364634560219391303208813634656570160414810037251742418199254353379092194391307918392469025749632449555553495195853676041581360803975047343879179683890936575233402558939288630276530528781100989491335508427114795905249416181232224847923942653195912313950457693877068260100845482043926453489945058977919377643929550058741288824742140081423476136749709740983914363231484466889822147115970571740298259097867258864994384625810303912563059072932294823433287243581244253252966921806564236870890122265613293021866994713757541694423975480103450407210349280018885317299682190386764805215941025495443686949644480408848688346846780075529306140576577030107005201432341157172581744403592633750542065255318917699675570391672919099988155659667446899092346424007007034714474634903603963675520287764569426100557680613066757424946000546352593307413936506631619746088445099825150293776879664953366476961004940758043748496797944559881967440825841343529532784849157709903710068347243552522597493", "y": "2.2977295405796821048715748585871543485999087251746821587318499068891767277000935063454092774023595216703100893458621141768547113120279191837115733830663048938418290090638793566243994733358976253156237189983181350988836746573817000641018748120572218586604503582030502814075570194582943278187553459098753098188386159639702265786433929952011871466086598991348696404779727071662040013212535479153210030374630482606307522083871714297574164760871106255915466559555386591001920828634880641343232358599448377826539632902168114782348963214870592261592784057885809645782390773387012240362686991937860661541214375632934678101989338629577859197013026182403625379743047940844330027186914014507392903157773489872880186515323849417007487496294481896451727660206951304649530766906572955902520763991217604222595391657987581656881224126998289219006882077054757965333416011438391775086690484808807530737810493789026937820358439511977477960226838652185467598947598978331876786452043783681833368650693244966806749032074473751427843011139121948555601290044286779133145549098416671391208049222261120210666162111084346565318863763621597745340998041927410125426707582710940947532816021694851724210479770681059623741055363573184221597017559105194812196582631762343645756473439897933216140776488904466554447626215247349421678232082315873340091077358351252458233454473311790225748427307825111315717905543038035237034249568035808831735550750337703183307964188193738606968367449009835836999799798819263844931077829624849816023823804233077417482388283470064025652214080672819879907477261342624381493273202957082347264287927422269695569936728707134308785737340056836690372910848477373752873739304620442386167323892167894087964982771491425088458919715666775411587592065383956615623912039124803632469408089798995860164992620678300628145783214798815075959979912916830322999815268288910160070165650989388883782916213769388811675857540835516932124074568703419910626147959328030258055134233402202922777470940481666866710766173682224017865"}}
g := {"point": {"x": "1.182134473786131678707533865235745906829833984375", "y": "-0.54566487782700867636975772256846539676189422607421875"}, "direction": {"x": "-2.4255853919176366684240520044113509356975555419921875", "y": "0.68230905861367319165111666734446771442890167236328125"}}
F := {"x": "-0.094156323488590190955902919484671080174026222094988210445994034598942854715071072587902394682666852771863961830942598165809088473247729481029726346347283406738384743287175519987408386531870204324216861049411527604199708544328493719239535813311711066817489535824873175068392999384180352261431550646988190677974492163157446473791237508610377595358435539008478726263049807200537163808083974110857134200356514334885069417728582667816990829397635693880710743999961994329761809295718141792175990842019746276139696431997745757604849127855910954399814628389031784300198933721882447128101115484734361186783623482846892762682319410276197450052902522780963140457214862023380014641218400904688973624721814163166880265967557821306716592572657947331962921244690317011703827847996578153979000866642978290491673738499370281141765638061449160593520948825233776215253741177052669183013558719960386296397726133558909979406799858570591498601324753181641744765646905775675965647779175971914624456004378018171249154656398886511493346444293346932828396045192868775225216176704372005677207324514137468754204698921235472873160183927265512187698179024141385501846744647861866069617091803422445437882896375212288489185717453332949346935812173156005649796484332660328690244201191078291563358659539568609808406171811990015630548544126276938008684316595149073077562224486642363403368654603982943383442234786287217894667914696782340450904472030573763545600349935769635811066014341054759585994573737393651589229729790890130961434229464454653158680269274409164913382755450824880696366305529137969860373677811701539287553309393771734600503120107599353380406758524042230705751080429905682398495161022803087660582124197593734744624042732305120153197088784272138683473347634626537838612621884139197765739351257045906350060737137376469375046074318373130611495508740319502337869548002779074606457627750317763868250313094035506140743476201086753758459141713246404581104335586338321313298766719965777084777154200903339519222170004770395271212", "y": "-0.43024392925161098626758507072255365810382190868693325689172808981613697947991958766497250817601279054528540274267256639765970836670264933532543734933327993472510801618008238009279717927736013323408374566935813125593464522220517214650770794441696224610336790664213776269675681349096625198895549232157349468723610712685970620058123149996893093479203552362276961002480892572293809605194092695420487720793161612673112151175068088203245536045939343753467636462821979602568460512719754554890102095207824208856210467805195172817386449511202635784531668280534048241320112009021347283935252275159089849428289235153383729624077537600173819398817862554618499360331347687659027954159886714928845459563253800524910992174472132815957133635305183274485591269493764726334626659977215065696356022991946637052860710282305584260572497397643244056927937179562083578145277517656744063095442675221595746560801689670387679331242986711415581625202720136583734147298165227212586864933954928321653881014135751353969529669437427771619541201875712943654098558974846206986239116689983491043668081627105929663360526706410771169574663064351417264467252311701918149696133396741219582585432383802911499576842374441261123423560038805030435931659402654146599582835933698681198198315151888955608243250292278653935382604472696126497907151465276590979390193521590400275427913505923539548306731656912747102196371522218826282113073236744258322221698023099476346854021454437530807117850808785090338284004902166444295768801527843287837209411066394181675310840302132093751544032485435473587521260518618907458540756988605441377673556004145850571964555789487386750236335019483424821219364966018757893801859197609849831761607809272163286185244795721941104764441407026271836150364242267037454663095582324195908891747063575450321598048141907678843214948610252259346774911991520204273462193127044110019747422712997282474850299568868590850871463167676901848732108506424241302802338151375186521490231823116092435417333732622230660251190822054342682667"}
E := {"x": "-0.51410918662922392340045065877658481662931833832831493241110468255206349760131991365678801266366157468552616773349886824108866698136316952599188764083225796697838325792247271387244257402804753633333863371129320800418896522828245131316291107434964870801498567398079327601270548871557767359437794346426064876850031689965535198394863112898277109313817578025109602469125412719723944016574367212012868886924698836672574488632635942838668984681593151996751774097717955166877375251410675502392694118382553378100443652057994351242792621591044772133428122278922555995343006885607616853799930788755312351923333399124529642966566405320136802432321612873070850223067252835496024165563504937799172118255878277202921529337334924849412388133387885186725842167421047791979653183128199730592711189405789060770336331027995280183964158626600882379590318518271280865078885274542998052737607762038597102578933317833038451299571001271888609534579310089116130181524781883372833140133762914799362454136203707404907602103781227807504908324898849290157740370396854581877401713453351324517547023291959275182573226799497140559962775387829848796872422299222786709307766099525744033224607307060753548053823588578142543898188124682687573728906706890019656371347603878558874327446338110742122068601344848018246391113820568622499204260078644721890761657847661684112381813458535805871543119318831724200711229979540088001976766603016636954304223180039296837843831099380368684462625205559751575912395993887808532042843262697050615095090982135503647702688753987227902719676423063363717776412033657279926942293738021856990791112168670568244401446585203060622354697061612920019234494694993528979046305242793529242599593400490727135644776052230550991959425965386914935800561954413980811297348843335018132581459825673295964948982308333906683736366434411565615723747061687790668722297911764477697786963023167729379988076924772136889710205408813743332661201700050427586557870485058176551406858321450084344929726269142383542508155804574405385431", "y": "-0.068517209072944914195406918911265875895206493181713018921911991309771250918407652852583251277364424908796848039209377032194207181554667441189963378431671476591303122522634258826604744554900518945149432418446147765730823433419726020516712501565187206700460848579639437118741734401302179324626218472800124317753631985717889799003596000616007573502669195996228860138316890201655412871044348332112491067736477855125729713626065256872889460743672882209945058957772280053133540176897691374658747235247300711917495316049311335138117856198967276137472969513011800548726961185516989884759475143523592465268994055953898277561340224609161941076438172012140398465545592729708080340564185056845269238446915492779583957347034525193856572807331253158854715234733348169464074707563106713225604861725695100577268152019627896014209929648478389099917676465906679417357712470794270927714533355673412854891225568655383120510713659138975371430566729584037577953831364554798769318914237503363634928712967685282334753777846428406363702247680911598099233966777930426701411188610021235200118799416299510010010117818545476529813510902778299419253660198583580798065701490702414241397105584837184751074593883020977683391241919409102756741129332941683022890245014404886258280778000489015722700967736648284440627587365568655149174087856263790954776345153299881061234563638074696897516049327845572939053938226065954024172083008541864682485126631867889868823843970368333669484557599731535771768336030447891518158308868360040138457140026273204746795652720131963321465602525900947508991544582677437931959197741657995946558213913039445366223243054182389946389557810315804233599267213278186031488250598603563191061789559347096632452521396565385458339786909994228839886576739256359967872099927826334921063791461325643732190545757062006004410734016290934368360379195052397477940430299162180205632578244598869759408633296516310470906096646312159934764276254344334628039380224482290069702718139945177744695220791463949638370184846431248544538"}
d := {"center": {"x": "0.66758692161551232779310332917003597847519832809431437007664696409708201679948818566619590484597179650365800807700520201422603944439952213516053573677657308139156382068512083672739127500591596833411030842280673392136693775161293313617536600728127019454814096821147007079098768805048974755550833977473173819531842387328323265067941767935267842737710304330889933173608591128652628557102659594784534399690616320418077777857208478721076069122324088765883382471481787679761165894159841630140994408859507299106789308230849951354151224584273251615310361445907295957638562837624329453018606458647781735314134530345342771042697581878003407618635909537068916186687816511860036066435770801687965626279253094872529982288173078588806642133541471079922950540939337377799631590475375056878829323653085788013657412214150933749256953388133901377038928400624193789440922656415820625693105235306217109238920498217646656608834553674669868799123270493501130960954888882289872910667972856325115522415326628047676964713737870069536574842441139562548201545841545040257633479097418650835433739345688849011323031935114727279802430395159956124497402334225753761185555329094235131221664717651492025133110253813227802576923392182400252035819646404648315302475216309294312793023824812655431027530533311431989506477724292962070087222687643598600468290215318111011511035112037886235348650415121100958762468405896944504631855644634694822854526186590315315201294872096141055573521620629640167192334006149049438360333409792484715575806405042747233475562150572685608000455887933329311468505411235550421698043284958809767225899038292185192149327939838001556914006464735532149392554530857472209676825299226885788009635270349522280409933073357850348040951193508111040482343415008452390270674536852044497606245168724204034509556010483986851592880237451261048484690327696089014532471539435153510184360394617581087823133384011369279173785772242363758654289861841307306565741753831345055060951254218225228639827848876356479486880744436439148249", "y": "0.87875411822811972688094964030352610537383260065559661746366294327433501856295527162025696612755742290375573177720376030146259994363950298609898992992704225441654262823375609967023083008248678283144411732671533598008530078553041957100701363723587355799009040471851192537496960404787726420887006988164394058363725677048306207536874072695519625193562266277160412336353815365950097981382879097409076903476070883474517288810080439671641326202828005499494717697727833370059645361402834114689976342495604193538416869763522388194523467567867605656367493964347681196222398979783156544978227268955719966348373069361372919829995797075487366528656627598477788901018731104422242016083222254978826528972653279132716943193932134276702208923597607630451461350287079335678809526739262655639344647029297106712900746476919927993236813099958057865933531584745490580633167718602966655823132832250367998385116708487479499143030845243200084636027844497413976533890333347616667789629614669411208650448551226251396081829711715155327734085363968423294994154060133117204558505165275578148911739116068122223002470452170959238761521601690832458489950240613310222084217785522704596412297425071097457926969594210194892586965288128484988457269647096778083717615413649135085686911793950245877218761045842442502228431868879438424754917111172163132364982567493824495665516991113007748443231665753604745449329067543391916761003824088372773951597888135366044343863317007869521797400718252730353225072836927690251600838543827714430655853763407415168947895480707961186246628738323468596327980099398102254454019675859709995407026875414026689142033740061390111376008562629251754383987729240006155925756333110547855983514926692579830501485772904845298374375336104865164857971678159190426211613891778275655951758007322512967264365246985913054134709132165381948803715516329227344488541458017632472003253693331720640841694984184240194616772384176101611014265574320235253414702027616191576286716427903541673241923458642988002171985260489674549074"}, "radius_squared": "2.2937286597674761483247599275886113238767061816048860473699350580040185651550077677152193593140809669527090400569446809882732739435523736446799465664203498763568917577605825298880551435849723910471007486557234162323302200701077653457866264403768861789882176347960051137707605894501936237596847933216258305421284791009983032401497659241569958647475635968402471860701489857070527704163928567746424284237949169997994638621798031162331701836381136935140478006958678470159500137249546207965607764430343822222634462199689388801959722989786456104086076884028197750533098642652529551972384877358939763739116865849894032511135101394288463826889819379748017820293817510473456704453059188257679315864330961386853589767108134011911889208887482431024221079233753322946135402914486521000147578829355063141169010349037381654966694863752642591123770691889211547471224128381977471588049408777506535026416721449477867642267873319121446584208138024430419100614593594454433484194474897983204686692273999512989194029687669786404046740921339179595198815888789738821549175170913476601266749033606042419538224429958213863001154326487933259097291857447811129711446406989917235365449312234348909029871523971160371338113851210211867602717331115011556111963861063727185548574832358622858336373555163586195061840796673499827262313962851848058902734659371225114991850785880602715178901714185239828249464512521261611299760531810416761769762680118456364491054775748091367819676744467705824466255296578773833301884038206606699432569185559945026436140498236259812085294545964708959977224813178654510854593580065800643334610530817555779495401223898644865359215861454522953469107419531984080174714363443787555646780857428922210304679178237209041018847120039657157008383640286700033882379941434128765785112149851837639093267557593770969642662834781509677769412261014382237631421429816606591921030700272685312728074958655961319819940692398224591999303846438679753018386973270015895734016808452418699934478654631010486094329640896814510492"}
k := {"point": {"x": "-0.82506204666950094719914550851742224445973764929160615597050991819663114073194750290690268278253307243609279129419989188457272821343038177918292998911641958598149584830721745609455870679636501736673882435353613802170284969587717347843541887050533721426625595109884525054084254939876779407291516770712809290965999104890909786847905600958482530342661181025185910435413969160518033260308657517495789723260163961726229485200754250272539064149790113047885426398482277671123022150933980239430496990741196465950603217084329623686809690401073709557326978261537011684605099551515398038558029883918346586748267143401646940836081448264713211374695830030199338002019192079237836463698776620870464433069143708621881913967310873211198782435259556685111346556976306927553519493793682862803229465676500746111905537057298475790184356714540510063808784870272312720041312346535778879405219016801378915966450325834334322304226088060600198117091604986301081380131861625294098756789391541129650878156725656877931978546939470789241325152857690658876853646345602193913032088136346565701604148100372517424181992543533790921943913079183924690257496324495555534951958536760415813608039750473438791796838909365752334025589392886302765305287811009894913355084271147959052494161812322248479239426531959123139504576938770682601008454820439264534899450589779193776439295500587412888247421400814234761367497097409839143632314844668898221471159705717402982590978672588649943846258103039125630590729322948234332872435812442532529669218065642368708901222656132930218669947137575416944239754801034504072103492800188853172996821903867648052159410254954436869496444804088486883468467800755293061405765770301070052014323411571725817444035926337505420652553189176996755703916729190999881556596674468990923464240070070347144746349036039636755202877645694261005576806130667574249460005463525933074139365066316197460884450998251502937768796649533664769610049407580437484967979445598819674408258413435295327848491577099037100683472435525225974931", "y": "0.62237994393366864346202256656197195242643155232311965873184990688917672770009350634540927740235952167031008934586211417685471131202791918371157338306630489384182900906387935662439947333589762531562371899831813509888367465738170006410187481205722185866045035820305028140755701945829432781875534590987530981883861596397022657864339299520118714660865989913486964047797270716620400132125354791532100303746304826063075220838717142975741647608711062559154665595553865910019208286348806413432323585994483778265396329021681147823489632148705922615927840578858096457823907733870122403626869919378606615412143756329346781019893386295778591970130261824036253797430479408443300271869140145073929031577734898728801865153238494170074874962944818964517276602069513046495307669065729559025207639912176042225953916579875816568812241269982892190068820770547579653334160114383917750866904848088075307378104937890269378203584395119774779602268386521854675989475989783318767864520437836818333686506932449668067490320744737514278430111391219485556012900442867791331455490984166713912080492222611202106661621110843465653188637636215977453409980419274101254267075827109409475328160216948517242104797706810596237410553635731842215970175591051948121965826317623436457564734398979332161407764889044665544476262152473494216782320823158733400910773583512524582334544733117902257484273078251113157179055430380352370342495680358088317355507503377031833079641881937386069683674490098358369997997988192638449310778296248498160238238042330774174823882834700640256522140806728198799074772613426243814932732029570823472642879274222696955699367287071343087857373400568366903729108484773737528737393046204423861673238921678940879649827714914250884589197156667754115875920653839566156239120391248036324694080897989958601649926206783006281457832147988150759599799129168303229998152682889101600701656509893888837829162137693888116758575408355169321240745687034199106261479593280302580551342334022029227774709404816668667107661736822240178651"}, "direction": {"x": "-1.8671068764697407171837539863190613687038421630859375", "y": "-0.409415405821826727805756718225893564522266387939453125"}}
j := {"point": {"x": "0.209079676353990162596119262161664664745330810546875", "y": "-1.6753495966460134614095522920251823961734771728515625"}, "direction": {"x": "-1.4525305944854951523126374013372696936130523681640625", "y": "1.811993777432677976690911236801184713840484619140625"}}
H := {"x": "2.1305558399724505017381126219335539359062582875402089219840451545633132804859513031970055820478395727258547009859481888071110318657182604938646220418812878569300182114245643925966610264514115517695537562387494999749739878995048681722879063125632393355847770078893810622001864368114772858876407855796994850437015363557683369070767446403347182240068062106221267538923168985341549431368747905259869372126042515172068799563884692889188047651664346589380629688508385746176417084131350921325140942976165556208239059730147848875803207184077161470746785163452627694904212158847663975839904200948479389181576388739823094153546793207391552191440323938389941282167367801525993084206358245011232609408358762785085125197933878913987678910334767140313906976687252628020408491788024051997699491900147717644507110041956252799941630667771333500486071998025245482137471604723971332353686525858747851509735245908043236166651061698716180456202778289512816039726259244523604684921529837015661512323639456123032061813977981627273575886779948381031850432191810080814226644109935825305701964185185566589673012366625063107741044214303787308827511024475558886595962366133810267775550192782390002772276427146089504542698307727365633023165482383533507979652808321584699896251503437885751992955622457701672219771829645474380529185945853354792803477323109213538314549682517360141742543137075466827763783587846977812176138049875622580242323415099359050896063015357864910980759207404572937089767507985674928978840748527210178352470197526476162733506020091684023047251263946679986616230485829752385330648005345206868779697574097929811036423820497707096465803641280733149377081692638608502576808754631944393911523246262197772307350840180205487258405238138965477434937024632960971839355770615987145231022110889460686480504027371955551216415176465370751928734465181157466712816620268692368235726377522193834094555418382225473847338001155482088884306635048291657840662056882976084680687871987297204480441719060067032320573928534984814689", "y": "1.270481834491606137770341375068678706513397254143665618388837224469137246401695304208520167737792911235701964422267097071280059541846551951258843020289924691428335894462858047605091673774066726919520958497773972058829704948159783840140910924333501809805724349148675161604991578087101346534776850122739636651640860837392927675162963153202501540467359596939545674289601088710948213619443635575223457426245787294587871709893200675287752384683793222236724882165709232237504337307556410907895840281267983136146393658731836537077209750601835495521028959653253586849374762946023596160667323788062799037370362903138984583911164433865446004778267256668653719795116182064385870863134406565797048647280683357070717751030598118004086752977923426991845637069325435936583673280281735334631135147224736198321042854355182188856128295523602615643453373552823779502304477093183581709870885275113988603675208114313082158480013371009362027986816399843205881906396065414300772501773046035412783662116396547462438830653541875958413565432803708532827104808366566303418237868127950986300630989839048707103212842124921647290076235021374102832336814701985185636872606475792288381554681160511867905464902862410893232915035000120104770325707818232630611082640265282153011006172175722943799208497270937677196437246689877748416128529704638349522891498984561138581113244037091755986093950938868421125197124444254464384867603980605608546227338787376244968508720108540942274691349464366732140442887398887875219856090184473628759212727346898898013023395035816572212123902223477987898054138313726597872240763099415169923194201307591124092835473108116027791250387371836580369008496576291158288779677881808043423264186893988858364651684697527847674605450073403583648233782480847168138555513838752409223691295740609305975210337679097149752375560420535040297748595708585375602315807836986160287205488910059583941891882154250480590230326996598248369048222907670299911406779750297648479245046531866011071083130736272635797177397544900860124"}
G := {"x": "-1.5120664562640476598471984990994839409282053107298604742469922710288296970404529420199310505273415463705432272804506776370110599796500712335979573810574368526596004696031047806373433182095078788245396734120490342022987642164015699222306866970019431269487699130536072096721462017488968146147378704910153621908608141744212818664905344093586802008059853457503370423137746241069701734698125965565695352660706484497283723095134805532818783333386084929139278344202001362911834601996538990520571707357924369017675496925970008093640960112233593520796849027352185928480796977483934337040053032415851667232243569509262237789532392239210092347745895393467731842425668206149158427431458559931217311876386481718659464635222978012785955795126100106333944236579004669279091947967211784410710728673972038464022919760529555669593143938784454692486024163315470745666392014784243639481203704138492215593916031450126059855991127058032823847627052092031049279001086595619667054847121560978384258806207393245101939817643166802022831680252448063899879622722272457871274055627489462847189008845320013784157210954424595403406738155797380785442178359507087001574832656399810075641356289129990912123055942546622575952703651034842793754697555525009764008524542616584630995380683039517680756673646418761094762007085203192122928250001403950386157261090524976840087733478889331470857938693445516609862778567264264417970948943498024974335546172176295690158923097609412220193895485727978487309543624842190429584892923733238159704047331695005859586112296286942485446889647091718863083482482574501629158551963410614696853383264055952650053834106556335333698865775512922064186774195498961451099468236368550260885396207695728336392235422247039188755346766603072748680909423628361524707247850477782558465522914098848783899489455763883477617413194131447995881979172881866683504316257863539580700861810148907746146894969297113019244656766615040795536848132674051943796780233395490336855296274487335394614946207149389811518360592377543264324", "y": "0.47173501155178406435008275753136569424383317686656638339975331733094756543527577699893231652239255867789839995648777327085926370501849722639053815087814740865287046785152890350451341615360597423838576426986598009619362456398305211815070216960178153148273166687409753038817439470133618290545383961549148012014444930869274244180533593375269489088411703408636148499104703608056247470400172189502687677904740297821862244198288645553227646389898617735608307164740236295267177015979848849926110091903461426797851787220856130008141576886244679121730715897820225317228579340232906263905473050670386579819499168585046373037736280979291628946482548877123674644957695579849532515978928484733694087976911502565197095228919612397614516904163163889480723340759536796779776928268638773878245309242542337537268422931271782964207533023762362817057680868183366407097920665663074894913115277263759012785447422458804240452202397365120924100989893084619499349500813101023391413017422101615540555573820783425409156934590808422650928289554133162899429241904759677853258080117951272166910962905159898727879339262862196060353053606098649765878341663393440286530779376052968484944924035782104245627418639314198431443628858443772015145970195735768170225265151731597963528735825111892798417486985499804859352601259298023497085638290501840510847324948810568295949393448132791417632949702024993551141425543713969609790893040079243685029040485653304499828381064731399807585172102562810811503117036410488643735742260609280308288628386301260311329795183252393934099868248885568991946134162491706302990568080440073824716534586025101448174910678352176767075526228091865975702145345981121668108662602925358281851539514719696440303107130982193208861409744843640226005188512171206707643505077910510007832089343456100973409330627483730696206952431745108967184966891523960291568102182139102925499665751448034210546098266004582346718784616313366826134743392371991253327901067895450319051997655122706739254207031011444101446485412485197772199"}

Need to prove:
concyclic(C, F, G, H)

Proof:
By line_definition on D, H, k we get k == Line(D, H)
By line_definition on D, G, k we get k == Line(D, G)
By line_definition on E, D, i we get i == Line(D, E)
By line_definition on D, C, h we get h == Line(C, D)
By line_definition on G, H, k we get k == Line(G, H)
By line_definition on B, E, g we get g == Line(B, E)
By line_definition on C, G, j we get j == Line(C, G)
By line_definition on G, A, j we get j == Line(A, G)
By line_definition on C, E, g we get g == Line(C, E)
By line_definition on A, E, i we get i == Line(A, E)
By circle_definition on D, A, C, c we get c == Circle(A, C, D)
By line_intersection_definition on D, h, k we get D == line_intersection(h, k)
By line_intersection_definition on D, k, i we get D == line_intersection(i, k)
By circle_definition on D, F, H, d we get d == Circle(D, F, H)
By circle_definition on C, B, D, c we get c == Circle(B, C, D)
By line_intersection_definition on D, i, h we get D == line_intersection(h, i)
By line_intersection_definition on A, j, i we get A == line_intersection(i, j)
By circle_definition on E, D, H, d we get d == Circle(D, E, H)
By line_intersection_definition on C, j, h we get C == line_intersection(h, j)
By circle_definition on B, A, D, c we get c == Circle(A, B, D)
By line_intersection_definition on A, j, f we get A == line_intersection(f, j)
By circle_definition on E, H, F, d we get d == Circle(E, F, H)
By line_intersection_definition on C, g, j we get C == line_intersection(g, j)
By line_intersection_definition on B, g, f we get B == line_intersection(f, g)
By line_intersection_definition on A, f, i we get A == line_intersection(f, i)
By line_intersection_definition on C, g, h we get C == line_intersection(g, h)
By line_unique_intersection_v1 on k, j, G, C we get C not in k
By line_unique_intersection_v1 on h, k, D, G we get G not in h
By line_unique_intersection_v1 on j, i, A, D we get D not in j
By line_unique_intersection_v1 on j, i, A, E we get E not in j
By line_unique_intersection_v1 on f, j, A, C we get C not in f
By line_unique_intersection_v1 on h, j, C, A we get A not in h
By line_unique_intersection_v1 on i, g, E, C we get C not in i
By line_unique_intersection_v1 on g, i, E, D we get D not in g
By line_unique_intersection_v1 on f, g, B, E we get E not in f
By line_unique_intersection_v1 on h, g, C, B we get B not in h
By line_unique_intersection_v1 on k, i, D, A we get A not in k
By line_unique_intersection_v1 on g, j, C, G we get G not in g
By line_unique_intersection_v1 on h, k, D, H we get H not in h
By line_unique_intersection_v1 on j, g, C, B we get B not in j
By line_unique_intersection_v1 on i, k, D, H we get H not in i
By line_unique_intersection_v1 on i, j, A, G we get G not in i
By line_unique_intersection_v1 on k, i, D, E we get E not in k
By line_unique_intersection_v1 on f, i, A, D we get D not in f
By line_unique_intersection_v1 on i, f, A, B we get B not in i
By line_unique_intersection_v1 on g, f, B, A we get A not in g
By line_unique_intersection_v1 on f, j, A, G we get G not in f
By line_unique_intersection_v1 on h, g, C, E we get E not in h
By line_unique_intersection_v1 on j, k, G, H we get H not in j
By parallel_line_definition on A, f, h we get f == parallel_line(A, h)
By parallel_line_definition on D, h, f we get h == parallel_line(D, f)
By parallel_line_definition on B, f, h we get f == parallel_line(B, h)
By circle_radius_v0_r on B, c we get radius(c) == distance(B, center(c))
By circle_radius_v0_r on C, c we get radius(c) == distance(C, center(c))
By circle_radius_v0_r on D, c we get radius(c) == distance(D, center(c))
By circle_radius_v0_r on A, c we get radius(c) == distance(A, center(c))
By different_points_v1 on A, D we get 0 != distance(A, D)
By different_points_v1 on B, A we get 0 != distance(A, B)
By different_points_v1 on B, C we get 0 != distance(B, C)
By center_not_on_circle on c we get center(c) not in c
By different_points_v1 on A, C we get 0 != distance(A, C)
By in_imply_concyclic on D, F, E, H we get concyclic(D, E, F, H)
By in_imply_collinear on G, C, A we get collinear(A, C, G)
By in_imply_collinear on E, A, D we get collinear(A, D, E)
By in_imply_collinear on E, C, B we get collinear(B, C, E)
By not_in_line_equivalent_to_not_collinear_v0_r on D, A, B we get D not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on H, A, B we get H not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on G, D, A we get G not in Line(A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on B, C, A we get B not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on B, A, D we get B not in Line(A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on F, B, A we get F not in Line(A, B)
By in_imply_concyclic on A, B, C, D we get concyclic(A, B, C, D)
By not_in_line_equivalent_to_not_collinear_v0_r on F, D, A we get F not in Line(A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on G, B, C we get G not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on F, B, C we get F not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on F, A, C we get F not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on H, C, B we get H not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on E, A, C we get E not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on H, C, A we get H not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on D, C, A we get D not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on C, A, D we get C not in Line(A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on G, A, B we get G not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on H, A, D we get H not in Line(A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on A, C, B we get A not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on E, A, B we get E not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on C, A, B we get C not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on D, C, B we get D not in Line(B, C)
By power_of_a_point_in_circle on H, d we get 0 == power_of_a_point(H, d)
By power_of_a_point_in_circle on D, d we get 0 == power_of_a_point(D, d)
By power_of_a_point_in_circle on C, c we get 0 == power_of_a_point(C, c)
By power_of_a_point_on_circle on D, c we get 0 == power_of_a_point(D, c)
By power_of_a_point_on_circle on A, c we get 0 == power_of_a_point(A, c)
By power_of_a_point_on_circle on E, d we get 0 == power_of_a_point(E, d)
By power_of_a_point_in_circle on B, c we get 0 == power_of_a_point(B, c)
By power_of_a_point_on_circle on F, d we get 0 == power_of_a_point(F, d)
By angles_on_chord_v1 on C, D, B, A, c we get angle(C, A, D) == angle(C, B, D) mod 360
By angles_on_chord_v0 on C, A, B, D, c we get angle(C, B, A) == angle(C, D, A) mod 360
By angles_on_chord_v2 on C, B, D, A, c we get angle(C, D, B) == angle(C, A, B) + 180 mod 360
By angles_on_chord_v1 on D, B, C, A, c we get angle(D, A, B) == angle(D, C, B) mod 360
By angles_on_chord_v1 on D, H, E, F, d we get angle(D, E, H) == angle(D, F, H) mod 360
By angles_on_chord_v3 on E, H, F, D, d we get angle(E, F, H) == angle(E, D, H) + 180 mod 360
By angles_on_chord_v1 on F, E, H, D, d we get angle(F, D, E) == angle(F, H, E) mod 360
By angles_on_chord_v0 on F, H, E, D, d we get angle(F, D, H) == angle(F, E, H) mod 360
By angles_on_chord_v3 on H, E, D, F, d we get angle(H, D, E) == angle(H, F, E) + 180 mod 360
By angles_on_chord_v0 on H, D, F, E, d we get angle(H, E, D) == angle(H, F, D) mod 360
By angles_on_chord_v0 on D, E, H, F, d we get angle(D, F, E) == angle(D, H, E) mod 360
By angles_on_chord_v0 on D, C, A, B, c we get angle(D, A, C) == angle(D, B, C) mod 360
By angles_on_chord_v2 on A, D, C, B, c we get angle(A, C, D) == angle(A, B, D) + 180 mod 360
By angles_on_chord_v1 on B, A, D, C, c we get angle(B, C, A) == angle(B, D, A) mod 360
By angles_on_chord_v0 on A, B, D, C, c we get angle(A, C, B) == angle(A, D, B) mod 360
By angles_on_chord_v2 on D, A, B, C, c we get angle(D, B, A) == angle(D, C, A) + 180 mod 360
By angle_to_center on C, D, A, c we get 2 * angle(C, D, A) == angle(C, center(c), A) mod 360
By angles_on_chord_v1 on E, D, F, H, d we get angle(E, F, D) == angle(E, H, D) mod 360
By angles_on_chord_v0 on B, D, A, C, c we get angle(B, A, D) == angle(B, C, D) mod 360
By angles_on_chord_v3 on D, A, C, B, c we get angle(D, C, A) == angle(D, B, A) + 180 mod 360
By angles_on_chord_v1 on A, C, D, B, c we get angle(A, B, C) == angle(A, D, C) mod 360
By angles_on_chord_v0 on E, F, D, H, d we get angle(E, D, F) == angle(E, H, F) mod 360
By angles_on_chord_v3 on D, F, E, H, d we get angle(D, E, F) == angle(D, H, F) + 180 mod 360
By angle_to_center on C, D, B, c we get 2 * angle(C, D, B) == angle(C, center(c), B) mod 360
By angles_on_chord_v2 on F, D, E, H, d we get angle(F, E, D) == angle(F, H, D) + 180 mod 360
By angle_to_center on D, B, A, c we get 2 * angle(D, B, A) == angle(D, center(c), A) mod 360
By angles_on_chord_v1 on H, F, E, D, d we get angle(H, D, F) == angle(H, E, F) mod 360
By angle_to_center on A, D, C, c we get 2 * angle(A, D, C) == angle(A, center(c), C) mod 360
By angles_on_chord_v3 on C, B, A, D, c we get angle(C, A, B) == angle(C, D, B) + 180 mod 360
By angles_on_chord_v3 on F, D, H, E, d we get angle(F, H, D) == angle(F, E, D) + 180 mod 360
By angles_on_chord_v3 on B, C, D, A, c we get angle(B, D, C) == angle(B, A, C) + 180 mod 360
By angles_on_chord_v2 on D, F, H, E, d we get angle(D, H, F) == angle(D, E, F) + 180 mod 360
By angle_to_center on C, A, D, c we get 2 * angle(C, A, D) == angle(C, center(c), D) mod 360
By angle_to_center on C, B, D, c we get 2 * angle(C, B, D) == angle(C, center(c), D) mod 360
By angles_on_chord_v2 on H, E, F, D, d we get angle(H, F, E) == angle(H, D, E) + 180 mod 360
By angle_to_center on A, B, D, c we get 2 * angle(A, B, D) == angle(A, center(c), D) mod 360
By angle_to_center on A, B, C, c we get 2 * angle(A, B, C) == angle(A, center(c), C) mod 360
By angles_on_chord_v2 on E, H, D, F, d we get angle(E, D, H) == angle(E, F, H) + 180 mod 360
By angles_on_chord_v2 on B, C, A, D, c we get angle(B, A, C) == angle(B, D, C) + 180 mod 360
By angles_on_chord_v3 on A, D, B, C, c we get angle(A, B, D) == angle(A, C, D) + 180 mod 360
By angle_to_center on D, C, A, c we get 2 * angle(D, C, A) == angle(D, center(c), A) mod 360
By angle_to_center on B, C, A, c we get 2 * angle(B, C, A) == angle(B, center(c), A) mod 360
By angle_to_center on B, D, C, c we get 2 * angle(B, D, C) == angle(B, center(c), C) mod 360
By angle_to_center on A, C, B, c we get 2 * angle(A, C, B) == angle(A, center(c), B) mod 360
By angle_to_center on D, B, C, c we get 2 * angle(D, B, C) == angle(D, center(c), C) mod 360
By angle_to_center on D, A, C, c we get 2 * angle(D, A, C) == angle(D, center(c), C) mod 360
By angle_to_center on B, A, D, c we get 2 * angle(B, A, D) == angle(B, center(c), D) mod 360
By angle_to_center on B, C, D, c we get 2 * angle(B, C, D) == angle(B, center(c), D) mod 360
By angle_to_center on D, C, B, c we get 2 * angle(D, C, B) == angle(D, center(c), B) mod 360
By angle_to_center on C, A, B, c we get 2 * angle(C, A, B) == angle(C, center(c), B) mod 360
By angle_to_center on A, D, B, c we get 2 * angle(A, D, B) == angle(A, center(c), B) mod 360
By angle_to_center on B, D, A, c we get 2 * angle(B, D, A) == angle(B, center(c), A) mod 360
By angle_to_center on C, B, A, c we get 2 * angle(C, B, A) == angle(C, center(c), A) mod 360
By angle_to_center on B, A, C, c we get 2 * angle(B, A, C) == angle(B, center(c), C) mod 360
By angle_to_center on D, A, B, c we get 2 * angle(D, A, B) == angle(D, center(c), B) mod 360
By angle_to_center on A, C, D, c we get 2 * angle(A, C, D) == angle(A, center(c), D) mod 360
By angles_on_equal_chords_v3 on A, B, D, C, D, B, c we get angle(A, B, D) == angle(C, D, B) + 180 mod 360
By angles_on_equal_chords_v0 on C, D, A, B, A, D, c we get angle(B, A, D) == angle(C, D, A) mod 360
By angles_on_equal_chords_v2 on B, A, C, D, C, A, c we get angle(B, A, C) == angle(D, C, A) + 180 mod 360
By angles_on_equal_chords_v2 on A, C, D, C, A, B, c we get angle(A, C, D) == angle(C, A, B) + 180 mod 360
By angles_on_equal_chords_v1 on A, B, C, D, C, B, c we get angle(A, B, C) == angle(D, C, B) mod 360
By angles_on_equal_chords_v1 on C, A, B, A, B, D, c we get angle(A, B, D) == angle(C, A, B) mod 360
By angles_on_equal_chords_v0 on D, B, A, B, A, C, c we get angle(B, A, C) == angle(D, B, A) mod 360
By angles_on_equal_chords_v3 on B, D, C, D, B, A, c we get angle(B, D, C) == angle(D, B, A) + 180 mod 360
By angles_on_equal_chords_v0 on C, D, B, A, C, D, c we get angle(A, C, D) == angle(C, D, B) mod 360
By angles_on_equal_chords_v0 on C, B, A, B, A, D, c we get angle(B, A, D) == angle(C, B, A) mod 360
By angles_on_equal_chords_v1 on A, D, C, D, A, B, c we get angle(A, D, C) == angle(D, A, B) mod 360
By angles_on_equal_chords_v1 on A, B, C, D, A, B, c we get angle(A, B, C) == angle(D, A, B) mod 360
By angles_on_equal_chords_v2 on C, D, B, A, B, D, c we get angle(C, D, B) == angle(A, B, D) + 180 mod 360
By angles_on_equal_chords_v1 on B, D, C, D, C, A, c we get angle(B, D, C) == angle(D, C, A) mod 360
By angles_on_equal_chords_v0 on C, D, A, B, C, D, c we get angle(B, C, D) == angle(C, D, A) mod 360
By angles_on_equal_chords_v0 on B, C, D, C, B, A, c we get angle(B, C, D) == angle(C, B, A) mod 360
By angles_on_equal_chords_v3 on C, A, B, A, C, D, c we get angle(C, A, B) == angle(A, C, D) + 180 mod 360
By angles_on_equal_chords_v3 on D, C, A, B, A, C, c we get angle(D, C, A) == angle(B, A, C) + 180 mod 360
By angles_on_equal_chords_v1 on A, D, C, D, C, B, c we get angle(A, D, C) == angle(D, C, B) mod 360
By angles_on_equal_chords_v2 on D, B, A, B, D, C, c we get angle(D, B, A) == angle(B, D, C) + 180 mod 360
By same_angle_v0 on D, E, A, B we get angle(A, D, B) == angle(E, D, B) mod 360
By same_angle_v1 on D, A, E, C we get angle(A, D, C) == angle(E, D, C) mod 360
By same_angle_v0 on D, A, E, H we get angle(A, D, H) == angle(E, D, H) mod 360
By same_angle_v0 on D, A, E, F we get angle(A, D, F) == angle(E, D, F) mod 360
By different_points_v1 on H, D we get 0 != distance(D, H)
By different_points_v1 on H, G we get 0 != distance(G, H)
By different_points_v1 on G, C we get 0 != distance(C, G)
By different_points_v1 on F, A we get 0 != distance(A, F)
By different_points_v1 on D, F we get 0 != distance(D, F)
By different_points_v1 on C, F we get 0 != distance(C, F)
By different_points_v1 on F, H we get 0 != distance(F, H)
By different_points_v1 on D, G we get 0 != distance(D, G)
By different_points_v1 on E, A we get 0 != distance(A, E)
By different_points_v1 on B, D we get 0 != distance(B, D)
By different_points_v1 on D, C we get 0 != distance(C, D)
By different_points_v1 on A, G we get 0 != distance(A, G)
By different_points_v1 on F, E we get 0 != distance(E, F)
By different_points_v1 on E, H we get 0 != distance(E, H)
By same_angle_v2 on E, A, D, F we get angle(A, E, F) == angle(D, E, F) + 180 mod 360
By different_points_v1 on E, B we get 0 != distance(B, E)
By different_points_v1 on C, E we get 0 != distance(C, E)
By different_points_v1 on B, F we get 0 != distance(B, F)
By different_points_v1 on D, E we get 0 != distance(D, E)
By same_angle_v3 on E, A, D, H we get angle(A, E, H) == angle(D, E, H) + 180 mod 360
By same_angle_v1 on D, A, E, G we get angle(A, D, G) == angle(E, D, G) mod 360
By same_angle_v3 on C, A, G, D we get angle(A, C, D) == angle(G, C, D) + 180 mod 360
By same_angle_v1 on A, E, D, B we get angle(D, A, B) == angle(E, A, B) mod 360
By same_angle_v1 on B, E, C, D we get angle(C, B, D) == angle(E, B, D) mod 360
By probably_between_and_collinear_implies_between on A, C, G we get between(A, C, G)
By same_angle_v2 on C, A, G, B we get angle(A, C, B) == angle(G, C, B) + 180 mod 360
By same_angle_v1 on A, G, C, D we get angle(C, A, D) == angle(G, A, D) mod 360
By same_angle_v0 on A, E, D, C we get angle(D, A, C) == angle(E, A, C) mod 360
By same_angle_v0 on C, E, B, D we get angle(B, C, D) == angle(E, C, D) mod 360
By same_angle_v1 on A, G, C, B we get angle(C, A, B) == angle(G, A, B) mod 360
By in_imply_collinear on G, H, D we get collinear(D, G, H)
By same_angle_v0 on B, C, E, A we get angle(C, B, A) == angle(E, B, A) mod 360
By same_angle_v1 on C, E, B, A we get angle(B, C, A) == angle(E, C, A) mod 360
By probably_between_and_collinear_implies_between on D, E, A we get between(A, E, D)
By probably_between_and_collinear_implies_between on C, E, B we get between(B, E, C)
By isosceles_trapezoids_are_concyclic_v1 on C, D, A, B we get isosceles_trapezoid(A, B, C, D)
By not_in_line_equivalent_to_not_collinear_v0_r on C, H, E we get C not in Line(E, H)
By reverse_direction on E, D we get 180 == direction(E, D) - direction(D, E) mod 360
By isosceles_trapezoids_are_concyclic_v1 on D, C, A, B we get isosceles_trapezoid(A, B, D, C)
By line_inequality on Line(B, F), h, B we get h != Line(B, F)
By reverse_direction on F, D we get 180 == direction(F, D) - direction(D, F) mod 360
By isosceles_trapezoids_are_concyclic_v1 on A, B, D, C we get isosceles_trapezoid(A, B, D, C)
By isosceles_trapezoids_are_concyclic_v1 on B, A, C, D we get isosceles_trapezoid(B, A, C, D)
By line_inequality on Line(C, F), j, F we get j != Line(C, F)
By not_in_line_equivalent_to_not_collinear_v0_r on D, F, E we get D not in Line(E, F)
By reverse_direction on D, F we get 180 == direction(D, F) - direction(F, D) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on B, D, G we get B not in Line(D, G)
By line_inequality on Line(F, H), h, H we get h != Line(F, H)
By not_in_line_equivalent_to_not_collinear_v0_r on A, H, E we get A not in Line(E, H)
By line_inequality on Line(A, F), k, A we get k != Line(A, F)
By line_inequality on Line(E, F), g, F we get g != Line(E, F)
By line_inequality on Line(C, F), i, F we get i != Line(C, F)
By not_in_line_equivalent_to_not_collinear_v0_r on G, F, B we get G not in Line(B, F)
By line_inequality on Line(A, F), i, F we get i != Line(A, F)
By reverse_direction on C, B we get 180 == direction(C, B) - direction(B, C) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on A, B, D we get A not in Line(B, D)
By reverse_direction on E, F we get 180 == direction(E, F) - direction(F, E) mod 360
By reverse_direction on D, E we get 180 == direction(D, E) - direction(E, D) mod 360
By line_inequality on Line(F, H), f, H we get f != Line(F, H)
By reverse_direction on F, E we get 180 == direction(F, E) - direction(E, F) mod 360
By line_inequality on Line(B, F), f, F we get f != Line(B, F)
By not_in_line_equivalent_to_not_collinear_v0_r on B, F, H we get B not in Line(F, H)
By reverse_direction on H, F we get 180 == direction(H, F) - direction(F, H) mod 360
By collinear_definition on D, E, A we get E in Line(A, D), A in Line(D, E), Line(A, D) == Line(D, E), 0 == 2 * angle(E, D, A) mod 360
By line_inequality on Line(B, D), j, D we get j != Line(B, D)
By reverse_direction on B, D we get 180 == direction(B, D) - direction(D, B) mod 360
By reverse_direction on A, D we get 180 == direction(A, D) - direction(D, A) mod 360
By reverse_direction on D, A we get 180 == direction(D, A) - direction(A, D) mod 360
By line_inequality on Line(A, F), j, F we get j != Line(A, F)
By line_inequality on Line(B, F), g, F we get g != Line(B, F)
By reverse_direction on C, A we get 180 == direction(C, A) - direction(A, C) mod 360
By line_inequality on Line(D, F), j, D we get j != Line(D, F)
By line_inequality on Line(A, F), g, F we get g != Line(A, F)
By not_in_line_equivalent_to_not_collinear_v0_r on H, F, E we get H not in Line(E, F)
By line_circle_intersection_has_at_most_two_points_0 on C, B, E, c we get E not in c
By reverse_direction on H, D we get 180 == direction(H, D) - direction(D, H) mod 360
By line_inequality on Line(E, F), h, E we get h != Line(E, F)
By not_in_line_equivalent_to_not_collinear_v0_r on D, B, F we get D not in Line(B, F)
By line_inequality on Line(E, H), h, E we get h != Line(E, H)
By not_in_line_equivalent_to_not_collinear_v0_r on C, H, F we get C not in Line(F, H)
By line_inequality on Line(B, D), g, D we get g != Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on E, D, F we get E not in Line(D, F)
By reverse_direction on D, C we get 180 == direction(D, C) - direction(C, D) mod 360
By line_inequality on Line(E, H), k, E we get k != Line(E, H)
By line_inequality on Line(E, H), j, E we get j != Line(E, H)
By reverse_direction on F, H we get 180 == direction(F, H) - direction(H, F) mod 360
By reverse_direction on C, D we get 180 == direction(C, D) - direction(D, C) mod 360
By isosceles_trapezoids_are_concyclic_v1 on A, B, C, D we get isosceles_trapezoid(A, B, C, D)
By not_in_line_equivalent_to_not_collinear_v0_r on C, F, E we get C not in Line(E, F)
By isosceles_trapezoids_are_concyclic_v1 on B, A, D, C we get isosceles_trapezoid(B, A, D, C)
By reverse_direction on A, B we get 180 == direction(A, B) - direction(B, A) mod 360
By reverse_direction on A, C we get 180 == direction(A, C) - direction(C, A) mod 360
By line_inequality on Line(E, H), f, E we get f != Line(E, H)
By not_in_line_equivalent_to_not_collinear_v0_r on A, F, H we get A not in Line(F, H)
By isosceles_trapezoids_are_concyclic_v1 on D, C, B, A we get isosceles_trapezoid(B, A, D, C)
By reverse_direction on D, H we get 180 == direction(D, H) - direction(H, D) mod 360
By reverse_direction on H, E we get 180 == direction(H, E) - direction(E, H) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on H, F, D we get H not in Line(D, F)
By collinear_definition on D, A, E we get A in Line(D, E), E in Line(A, D), Line(A, D) == Line(D, E), 0 == 2 * angle(A, D, E) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on G, D, B we get G not in Line(B, D)
By reverse_direction on B, A we get 180 == direction(B, A) - direction(A, B) mod 360
By line_inequality on Line(E, F), j, F we get j != Line(E, F)
By not_in_line_equivalent_to_not_collinear_v0_r on F, C, D we get F not in Line(C, D)
By reverse_direction on B, C we get 180 == direction(B, C) - direction(C, B) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on D, C, F we get D not in Line(C, F)
By not_in_line_equivalent_to_not_collinear_v0_r on D, F, A we get D not in Line(A, F)
By reverse_direction on E, H we get 180 == direction(E, H) - direction(H, E) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on G, A, F we get G not in Line(A, F)
By isosceles_trapezoids_are_concyclic_v1 on C, D, B, A we get isosceles_trapezoid(B, A, C, D)
By not_in_line_equivalent_to_not_collinear_v0_r on D, E, H we get D not in Line(E, H)
By reverse_direction on D, B we get 180 == direction(D, B) - direction(B, D) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on G, F, E we get G not in Line(E, F)
By not_in_line_equivalent_to_not_collinear_v0_r on B, A, F we get B not in Line(A, F)
By not_in_line_equivalent_to_not_collinear_v0_r on E, B, F we get E not in Line(B, F)
By line_inequality on Line(D, F), f, F we get f != Line(D, F)
By line_inequality on Line(F, H), j, H we get j != Line(F, H)
By line_inequality on Line(E, H), i, H we get i != Line(E, H)
By line_inequality on Line(D, F), g, F we get g != Line(D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on G, C, F we get G not in Line(C, F)
By not_in_line_equivalent_to_not_collinear_v0_r on E, F, C we get E not in Line(C, F)
By not_in_line_equivalent_to_not_collinear_v0_r on H, F, A we get H not in Line(A, F)
By not_in_line_equivalent_to_not_collinear_v0_r on F, E, H we get F not in Line(E, H)
By line_inequality on Line(E, F), k, E we get k != Line(E, F)
By not_in_line_equivalent_to_not_collinear_v0_r on B, G, H we get B not in Line(G, H)
By line_inequality on Line(B, D), f, D we get f != Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on G, E, H we get G not in Line(E, H)
By not_in_line_equivalent_to_not_collinear_v0_r on A, F, D we get A not in Line(D, F)
By line_inequality on Line(C, F), g, F we get g != Line(C, F)
By not_in_line_equivalent_to_not_collinear_v0_r on F, D, B we get F not in Line(B, D)
By line_inequality on Line(F, H), g, H we get g != Line(F, H)
By not_in_line_equivalent_to_not_collinear_v0_r on F, D, G we get F not in Line(D, G)
By not_in_line_equivalent_to_not_collinear_v0_r on A, E, F we get A not in Line(E, F)
By not_in_line_equivalent_to_not_collinear_v0_r on C, B, F we get C not in Line(B, F)
By not_in_line_equivalent_to_not_collinear_v0_r on A, B, F we get A not in Line(B, F)
By not_in_line_equivalent_to_not_collinear_v0_r on B, H, E we get B not in Line(E, H)
By not_in_line_equivalent_to_not_collinear_v0_r on G, F, D we get G not in Line(D, F)
By line_inequality on Line(D, F), i, F we get i != Line(D, F)
By line_circle_intersection_has_at_most_two_points_0 on E, D, A, d we get A not in d
By line_inequality on Line(A, F), h, A we get h != Line(A, F)
By not_in_line_equivalent_to_not_collinear_v0_r on A, F, C we get A not in Line(C, F)
By not_in_line_equivalent_to_not_collinear_v0_r on C, F, A we get C not in Line(A, F)
By not_in_line_equivalent_to_not_collinear_v0_r on E, B, D we get E not in Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on F, H, G we get F not in Line(G, H)
By line_inequality on Line(B, D), i, B we get i != Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on H, C, F we get H not in Line(C, F)
By not_in_line_equivalent_to_not_collinear_v0_r on B, D, H we get B not in Line(D, H)
By line_inequality on Line(E, H), g, H we get g != Line(E, H)
By line_inequality on Line(B, F), j, B we get j != Line(B, F)
By line_inequality on Line(C, F), k, C we get k != Line(C, F)
By line_inequality on Line(F, H), i, F we get i != Line(F, H)
By line_inequality on Line(E, F), i, F we get i != Line(E, F)
By not_in_line_equivalent_to_not_collinear_v0_r on H, B, F we get H not in Line(B, F)
By not_in_line_equivalent_to_not_collinear_v0_r on B, F, C we get B not in Line(C, F)
By not_in_line_equivalent_to_not_collinear_v0_r on D, H, F we get D not in Line(F, H)
By not_in_line_equivalent_to_not_collinear_v0_r on E, F, A we get E not in Line(A, F)
By line_inequality on Line(B, D), h, B we get h != Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on C, D, B we get C not in Line(B, D)
By line_inequality on Line(E, F), f, F we get f != Line(E, F)
By not_in_line_equivalent_to_not_collinear_v0_r on C, F, D we get C not in Line(D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on G, H, F we get G not in Line(F, H)
By not_in_line_equivalent_to_not_collinear_v0_r on B, F, E we get B not in Line(E, F)
By not_in_line_equivalent_to_not_collinear_v0_r on H, D, B we get H not in Line(B, D)
By line_inequality on Line(C, F), f, C we get f != Line(C, F)
By line_inequality on Line(B, F), i, B we get i != Line(B, F)
By not_in_line_equivalent_to_not_collinear_v0_r on E, F, H we get E not in Line(F, H)
By not_in_line_equivalent_to_not_collinear_v0_r on F, H, D we get F not in Line(D, H)
By line_circle_intersection_has_at_most_two_points_0 on A, C, G, c we get G not in c
By not_in_line_equivalent_to_not_collinear_v0_r on B, F, D we get B not in Line(D, F)
By line_inequality on Line(A, F), f, F we get f != Line(A, F)
By same_angle_v2 on E, C, B, F we get angle(C, E, F) == angle(B, E, F) + 180 mod 360
By same_angle_v0 on C, B, E, G we get angle(B, C, G) == angle(E, C, G) mod 360
By same_angle_v1 on C, B, E, F we get angle(B, C, F) == angle(E, C, F) mod 360
By same_angle_v3 on E, B, C, D we get angle(B, E, D) == angle(C, E, D) + 180 mod 360
By same_angle_v2 on E, B, C, H we get angle(B, E, H) == angle(C, E, H) + 180 mod 360
By same_angle_v0 on A, D, E, G we get angle(D, A, G) == angle(E, A, G) mod 360
By same_angle_v1 on A, C, G, E we get angle(C, A, E) == angle(G, A, E) mod 360
By same_angle_v1 on A, D, E, F we get angle(D, A, F) == angle(E, A, F) mod 360
By same_angle_v3 on E, A, D, B we get angle(A, E, B) == angle(D, E, B) + 180 mod 360
By same_angle_v3 on C, A, G, E we get angle(A, C, E) == angle(G, C, E) + 180 mod 360
By same_angle_v1 on A, C, G, F we get angle(C, A, F) == angle(G, A, F) mod 360
By same_angle_v0 on B, C, E, F we get angle(C, B, F) == angle(E, B, F) mod 360
By same_angle_v2 on E, D, A, C we get angle(D, E, C) == angle(A, E, C) + 180 mod 360
By same_angle_v2 on C, A, G, F we get angle(A, C, F) == angle(G, C, F) + 180 mod 360
By sss_anti_congruence_v0 on D, F, A, A, F, D we get anti_congruent_triangles(A, D, F, D, A, F)
By sas_anti_congruence on A, F, D, D, F, A we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v0 on F, A, D, F, D, A we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v1 on D, A, F, A, D, F we get anti_congruent_triangles(A, D, F, D, A, F)
By radical_axis_definition_v0_r on D, c, d we get D in radical_axis(c, d)
By sas_anti_congruence on B, F, D, D, F, B we get anti_congruent_triangles(B, D, F, D, B, F)
By sss_anti_congruence_v0 on F, A, D, F, D, A we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v1 on A, F, D, D, F, A we get anti_congruent_triangles(A, D, F, D, A, F)
By isosceles_triangle_properties on F, B, D we get distance(B, F) == distance(D, F), angle(B, D, F) == angle(F, B, D) mod 360
By sss_anti_congruence_v0 on A, D, F, D, A, F we get anti_congruent_triangles(A, D, F, D, A, F)
By collinear_definition on C, E, B we get E in Line(B, C), B in Line(C, E), Line(B, C) == Line(C, E), 0 == 2 * angle(E, C, B) mod 360
By sss_anti_congruence_v0 on A, D, F, D, A, F we get anti_congruent_triangles(A, D, F, D, A, F)
By isosceles_triangle_properties on F, A, D we get distance(A, F) == distance(D, F), angle(A, D, F) == angle(F, A, D) mod 360
By collinear_definition on E, D, A we get D in Line(A, E), A in Line(D, E), Line(A, E) == Line(D, E), 0 == 2 * angle(D, E, A) mod 360
By sss_anti_congruence_v0 on D, F, A, A, F, D we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v0 on A, D, F, D, A, F we get anti_congruent_triangles(A, D, F, D, A, F)
By collinear_definition on A, E, D we get E in Line(A, D), D in Line(A, E), Line(A, D) == Line(A, E), 0 == 2 * angle(E, A, D) mod 360
By sss_anti_congruence_v0 on F, A, D, F, D, A we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v1 on D, A, F, A, D, F we get anti_congruent_triangles(A, D, F, D, A, F)
By collinear_definition on C, G, A we get G in Line(A, C), A in Line(C, G), Line(A, C) == Line(C, G), 0 == 2 * angle(G, C, A) mod 360
By sss_anti_congruence_v1 on D, A, F, A, D, F we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v1 on F, D, A, F, A, D we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v1 on F, D, A, F, A, D we get anti_congruent_triangles(A, D, F, D, A, F)
By collinear_definition on A, D, E we get D in Line(A, E), E in Line(A, D), Line(A, D) == Line(A, E), 0 == 2 * angle(D, A, E) mod 360
By reverse_direction on F, C we get 180 == direction(F, C) - direction(C, F) mod 360
By reverse_direction on F, B we get 180 == direction(F, B) - direction(B, F) mod 360
By sas_anti_congruence on D, F, A, A, F, D we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v1 on D, A, F, A, D, F we get anti_congruent_triangles(A, D, F, D, A, F)
By collinear_definition on B, E, C we get E in Line(B, C), C in Line(B, E), Line(B, C) == Line(B, E), 0 == 2 * angle(E, B, C) mod 360
By sss_anti_congruence_v1 on A, F, D, D, F, A we get anti_congruent_triangles(A, D, F, D, A, F)
By collinear_definition on A, G, C we get G in Line(A, C), C in Line(A, G), Line(A, C) == Line(A, G), 0 == 2 * angle(G, A, C) mod 360
By isosceles_triangle_properties on F, C, D we get distance(C, F) == distance(D, F), angle(C, D, F) == angle(F, C, D) mod 360
By sss_anti_congruence_v1 on A, F, D, D, F, A we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v1 on D, A, F, A, D, F we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v0 on D, F, A, A, F, D we get anti_congruent_triangles(A, D, F, D, A, F)
By collinear_definition on E, A, D we get A in Line(D, E), D in Line(A, E), Line(A, E) == Line(D, E), 0 == 2 * angle(A, E, D) mod 360
By sss_anti_congruence_v0 on A, D, F, D, A, F we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v1 on F, D, A, F, A, D we get anti_congruent_triangles(A, D, F, D, A, F)
By reverse_direction on F, A we get 180 == direction(F, A) - direction(A, F) mod 360
By sss_anti_congruence_v1 on F, D, A, F, A, D we get anti_congruent_triangles(A, D, F, D, A, F)
By collinear_definition on B, C, E we get C in Line(B, E), E in Line(B, C), Line(B, C) == Line(B, E), 0 == 2 * angle(C, B, E) mod 360
By isosceles_triangle_properties on F, D, A we get distance(A, F) == distance(D, F), angle(D, A, F) == angle(F, D, A) mod 360
By sss_anti_congruence_v1 on F, D, A, F, A, D we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v0 on A, D, F, D, A, F we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v0 on F, A, D, F, D, A we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v1 on A, F, D, D, F, A we get anti_congruent_triangles(A, D, F, D, A, F)
By collinear_definition on C, A, G we get A in Line(C, G), G in Line(A, C), Line(A, C) == Line(C, G), 0 == 2 * angle(A, C, G) mod 360
By sas_anti_congruence on C, F, D, D, F, C we get anti_congruent_triangles(C, D, F, D, C, F)
By sss_anti_congruence_v0 on D, F, A, A, F, D we get anti_congruent_triangles(A, D, F, D, A, F)
By collinear_definition on C, B, E we get B in Line(C, E), E in Line(B, C), Line(B, C) == Line(C, E), 0 == 2 * angle(B, C, E) mod 360
By sas_anti_congruence on D, F, C, C, F, D we get anti_congruent_triangles(C, D, F, D, C, F)
By sss_anti_congruence_v0 on F, A, D, F, D, A we get anti_congruent_triangles(A, D, F, D, A, F)
By isosceles_triangle_properties on F, D, B we get distance(B, F) == distance(D, F), angle(D, B, F) == angle(F, D, B) mod 360
By collinear_definition on A, C, G we get C in Line(A, G), G in Line(A, C), Line(A, C) == Line(A, G), 0 == 2 * angle(C, A, G) mod 360
By sss_anti_congruence_v1 on A, F, D, D, F, A we get anti_congruent_triangles(A, D, F, D, A, F)
By isosceles_triangle_properties on F, D, C we get distance(C, F) == distance(D, F), angle(D, C, F) == angle(F, D, C) mod 360
By sas_anti_congruence on D, F, B, B, F, D we get anti_congruent_triangles(B, D, F, D, B, F)
By sss_anti_congruence_v0 on D, F, A, A, F, D we get anti_congruent_triangles(A, D, F, D, A, F)
By same_angle_v3 on E, C, B, A we get angle(C, E, A) == angle(B, E, A) + 180 mod 360
By same_angle_v0 on G, C, A, D we get angle(A, G, D) == angle(C, G, D) mod 360
By same_angle_v0 on G, A, C, H we get angle(A, G, H) == angle(C, G, H) mod 360
By sss_anti_congruence_v1 on A, F, C, C, F, A we get anti_congruent_triangles(A, C, F, C, A, F)
By sss_anti_congruence_v1 on B, C, F, C, B, F we get anti_congruent_triangles(B, C, F, C, B, F)
By collinear_definition on E, B, C we get B in Line(C, E), C in Line(B, E), Line(B, E) == Line(C, E), 0 == 2 * angle(B, E, C) mod 360
By sss_anti_congruence_v0 on F, C, B, F, B, C we get anti_congruent_triangles(B, C, F, C, B, F)
By sss_anti_congruence_v1 on B, C, F, C, B, F we get anti_congruent_triangles(B, C, F, C, B, F)
By sss_anti_congruence_v0 on C, B, F, B, C, F we get anti_congruent_triangles(B, C, F, C, B, F)
By sss_anti_congruence_v0 on F, C, B, F, B, C we get anti_congruent_triangles(B, C, F, C, B, F)
By sss_anti_congruence_v0 on A, C, F, C, A, F we get anti_congruent_triangles(A, C, F, C, A, F)
By sss_anti_congruence_v0 on A, F, B, B, F, A we get anti_congruent_triangles(A, B, F, B, A, F)
By sss_anti_congruence_v1 on B, C, F, C, B, F we get anti_congruent_triangles(B, C, F, C, B, F)
By sss_anti_congruence_v1 on F, B, C, F, C, B we get anti_congruent_triangles(B, C, F, C, B, F)
By sss_anti_congruence_v0 on F, C, B, F, B, C we get anti_congruent_triangles(B, C, F, C, B, F)
By sss_anti_congruence_v1 on F, B, C, F, C, B we get anti_congruent_triangles(B, C, F, C, B, F)
By sss_anti_congruence_v1 on F, B, C, F, C, B we get anti_congruent_triangles(B, C, F, C, B, F)
By isosceles_triangle_properties on F, A, B we get distance(A, F) == distance(B, F), angle(A, B, F) == angle(F, A, B) mod 360
By sss_anti_congruence_v1 on A, F, C, C, F, A we get anti_congruent_triangles(A, C, F, C, A, F)
By sss_anti_congruence_v1 on C, A, F, A, C, F we get anti_congruent_triangles(A, C, F, C, A, F)
By sss_anti_congruence_v0 on B, A, F, A, B, F we get anti_congruent_triangles(A, B, F, B, A, F)
By sss_anti_congruence_v0 on F, A, C, F, C, A we get anti_congruent_triangles(A, C, F, C, A, F)
By sss_anti_congruence_v1 on C, F, B, B, F, C we get anti_congruent_triangles(B, C, F, C, B, F)
By sss_anti_congruence_v1 on A, F, C, C, F, A we get anti_congruent_triangles(A, C, F, C, A, F)
By sss_anti_congruence_v1 on B, C, F, C, B, F we get anti_congruent_triangles(B, C, F, C, B, F)
By sss_anti_congruence_v0 on A, F, B, B, F, A we get anti_congruent_triangles(A, B, F, B, A, F)
By sss_anti_congruence_v1 on A, B, F, B, A, F we get anti_congruent_triangles(A, B, F, B, A, F)
By sss_anti_congruence_v1 on F, B, C, F, C, B we get anti_congruent_triangles(B, C, F, C, B, F)
By sss_anti_congruence_v1 on F, A, B, F, B, A we get anti_congruent_triangles(A, B, F, B, A, F)
By sss_anti_congruence_v0 on A, C, F, C, A, F we get anti_congruent_triangles(A, C, F, C, A, F)
By sss_anti_congruence_v1 on A, B, F, B, A, F we get anti_congruent_triangles(A, B, F, B, A, F)
By sss_anti_congruence_v0 on F, A, C, F, C, A we get anti_congruent_triangles(A, C, F, C, A, F)
By sss_anti_congruence_v1 on F, C, A, F, A, C we get anti_congruent_triangles(A, C, F, C, A, F)
By sss_anti_congruence_v0 on C, B, F, B, C, F we get anti_congruent_triangles(B, C, F, C, B, F)
By sss_anti_congruence_v1 on C, A, F, A, C, F we get anti_congruent_triangles(A, C, F, C, A, F)
By sas_anti_congruence on C, F, B, B, F, C we get anti_congruent_triangles(B, C, F, C, B, F)
By sss_anti_congruence_v0 on C, F, A, A, F, C we get anti_congruent_triangles(A, C, F, C, A, F)
By sas_anti_congruence on A, F, C, C, F, A we get anti_congruent_triangles(A, C, F, C, A, F)
By sss_anti_congruence_v1 on F, C, A, F, A, C we get anti_congruent_triangles(A, C, F, C, A, F)
By sss_anti_congruence_v0 on C, F, A, A, F, C we get anti_congruent_triangles(A, C, F, C, A, F)
By sss_anti_congruence_v0 on C, F, A, A, F, C we get anti_congruent_triangles(A, C, F, C, A, F)
By collinear_definition on G, C, A we get C in Line(A, G), A in Line(C, G), Line(A, G) == Line(C, G), 0 == 2 * angle(C, G, A) mod 360
By sss_anti_congruence_v0 on F, B, A, F, A, B we get anti_congruent_triangles(A, B, F, B, A, F)
By sas_anti_congruence on A, F, B, B, F, A we get anti_congruent_triangles(A, B, F, B, A, F)
By sss_anti_congruence_v0 on A, F, B, B, F, A we get anti_congruent_triangles(A, B, F, B, A, F)
By sss_anti_congruence_v1 on F, C, A, F, A, C we get anti_congruent_triangles(A, C, F, C, A, F)
By sss_anti_congruence_v1 on B, F, A, A, F, B we get anti_congruent_triangles(A, B, F, B, A, F)
By sss_anti_congruence_v0 on C, B, F, B, C, F we get anti_congruent_triangles(B, C, F, C, B, F)
By sss_anti_congruence_v0 on F, B, A, F, A, B we get anti_congruent_triangles(A, B, F, B, A, F)
By sss_anti_congruence_v0 on F, B, A, F, A, B we get anti_congruent_triangles(A, B, F, B, A, F)
By isosceles_triangle_properties on F, B, A we get distance(A, F) == distance(B, F), angle(B, A, F) == angle(F, B, A) mod 360
By sss_anti_congruence_v1 on C, A, F, A, C, F we get anti_congruent_triangles(A, C, F, C, A, F)
By sss_anti_congruence_v0 on B, A, F, A, B, F we get anti_congruent_triangles(A, B, F, B, A, F)
By sss_anti_congruence_v0 on C, F, A, A, F, C we get anti_congruent_triangles(A, C, F, C, A, F)
By sss_anti_congruence_v1 on F, A, B, F, B, A we get anti_congruent_triangles(A, B, F, B, A, F)
By sas_anti_congruence on C, F, A, A, F, C we get anti_congruent_triangles(A, C, F, C, A, F)
By sss_anti_congruence_v0 on F, B, A, F, A, B we get anti_congruent_triangles(A, B, F, B, A, F)
By sss_anti_congruence_v0 on A, F, B, B, F, A we get anti_congruent_triangles(A, B, F, B, A, F)
By sss_anti_congruence_v0 on F, A, C, F, C, A we get anti_congruent_triangles(A, C, F, C, A, F)
By sas_anti_congruence on B, F, A, A, F, B we get anti_congruent_triangles(A, B, F, B, A, F)
By sss_anti_congruence_v0 on B, F, C, C, F, B we get anti_congruent_triangles(B, C, F, C, B, F)
By sss_anti_congruence_v0 on B, F, C, C, F, B we get anti_congruent_triangles(B, C, F, C, B, F)
By collinear_definition on G, A, C we get A in Line(C, G), C in Line(A, G), Line(A, G) == Line(C, G), 0 == 2 * angle(A, G, C) mod 360
By sss_anti_congruence_v1 on F, C, A, F, A, C we get anti_congruent_triangles(A, C, F, C, A, F)
By sss_anti_congruence_v1 on B, F, A, A, F, B we get anti_congruent_triangles(A, B, F, B, A, F)
By isosceles_triangle_properties on F, A, C we get distance(A, F) == distance(C, F), angle(A, C, F) == angle(F, A, C) mod 360
By sss_anti_congruence_v0 on A, C, F, C, A, F we get anti_congruent_triangles(A, C, F, C, A, F)
By sss_anti_congruence_v1 on A, B, F, B, A, F we get anti_congruent_triangles(A, B, F, B, A, F)
By isosceles_triangle_properties on F, C, B we get distance(B, F) == distance(C, F), angle(C, B, F) == angle(F, C, B) mod 360
By isosceles_triangle_properties on F, B, C we get distance(B, F) == distance(C, F), angle(B, C, F) == angle(F, B, C) mod 360
By sss_anti_congruence_v1 on F, B, C, F, C, B we get anti_congruent_triangles(B, C, F, C, B, F)
By sss_anti_congruence_v1 on C, F, B, B, F, C we get anti_congruent_triangles(B, C, F, C, B, F)
By sss_anti_congruence_v0 on B, F, C, C, F, B we get anti_congruent_triangles(B, C, F, C, B, F)
By sss_anti_congruence_v1 on F, A, B, F, B, A we get anti_congruent_triangles(A, B, F, B, A, F)
By sss_anti_congruence_v0 on F, B, A, F, A, B we get anti_congruent_triangles(A, B, F, B, A, F)
By sss_anti_congruence_v0 on C, B, F, B, C, F we get anti_congruent_triangles(B, C, F, C, B, F)
By sss_anti_congruence_v0 on F, C, B, F, B, C we get anti_congruent_triangles(B, C, F, C, B, F)
By sss_anti_congruence_v0 on F, C, B, F, B, C we get anti_congruent_triangles(B, C, F, C, B, F)
By sss_anti_congruence_v0 on A, F, B, B, F, A we get anti_congruent_triangles(A, B, F, B, A, F)
By sas_anti_congruence on B, F, C, C, F, B we get anti_congruent_triangles(B, C, F, C, B, F)
By sss_anti_congruence_v0 on B, F, C, C, F, B we get anti_congruent_triangles(B, C, F, C, B, F)
By sss_anti_congruence_v1 on A, B, F, B, A, F we get anti_congruent_triangles(A, B, F, B, A, F)
By sss_anti_congruence_v1 on C, F, B, B, F, C we get anti_congruent_triangles(B, C, F, C, B, F)
By isosceles_triangle_properties on F, C, A we get distance(A, F) == distance(C, F), angle(C, A, F) == angle(F, C, A) mod 360
By sss_anti_congruence_v0 on C, F, A, A, F, C we get anti_congruent_triangles(A, C, F, C, A, F)
By sss_anti_congruence_v1 on A, B, F, B, A, F we get anti_congruent_triangles(A, B, F, B, A, F)
By sss_anti_congruence_v1 on B, F, A, A, F, B we get anti_congruent_triangles(A, B, F, B, A, F)
By sss_anti_congruence_v0 on F, A, C, F, C, A we get anti_congruent_triangles(A, C, F, C, A, F)
By sss_anti_congruence_v1 on B, F, A, A, F, B we get anti_congruent_triangles(A, B, F, B, A, F)
By sss_anti_congruence_v1 on F, C, A, F, A, C we get anti_congruent_triangles(A, C, F, C, A, F)
By sss_anti_congruence_v0 on A, C, F, C, A, F we get anti_congruent_triangles(A, C, F, C, A, F)
By sss_anti_congruence_v0 on C, B, F, B, C, F we get anti_congruent_triangles(B, C, F, C, B, F)
By sss_anti_congruence_v1 on F, A, B, F, B, A we get anti_congruent_triangles(A, B, F, B, A, F)
By sss_anti_congruence_v0 on F, A, C, F, C, A we get anti_congruent_triangles(A, C, F, C, A, F)
By sss_anti_congruence_v1 on A, F, C, C, F, A we get anti_congruent_triangles(A, C, F, C, A, F)
By sss_anti_congruence_v1 on C, F, B, B, F, C we get anti_congruent_triangles(B, C, F, C, B, F)
By sss_anti_congruence_v1 on C, F, B, B, F, C we get anti_congruent_triangles(B, C, F, C, B, F)
By sss_anti_congruence_v1 on C, A, F, A, C, F we get anti_congruent_triangles(A, C, F, C, A, F)
By sss_anti_congruence_v1 on B, C, F, C, B, F we get anti_congruent_triangles(B, C, F, C, B, F)
By sss_anti_congruence_v1 on B, F, A, A, F, B we get anti_congruent_triangles(A, B, F, B, A, F)
By sss_anti_congruence_v1 on A, F, C, C, F, A we get anti_congruent_triangles(A, C, F, C, A, F)
By sss_anti_congruence_v0 on B, F, C, C, F, B we get anti_congruent_triangles(B, C, F, C, B, F)
By sss_anti_congruence_v0 on B, A, F, A, B, F we get anti_congruent_triangles(A, B, F, B, A, F)
By sss_anti_congruence_v0 on B, A, F, A, B, F we get anti_congruent_triangles(A, B, F, B, A, F)
By sss_anti_congruence_v0 on A, C, F, C, A, F we get anti_congruent_triangles(A, C, F, C, A, F)
By sss_anti_congruence_v1 on F, A, B, F, B, A we get anti_congruent_triangles(A, B, F, B, A, F)
By sss_anti_congruence_v1 on C, A, F, A, C, F we get anti_congruent_triangles(A, C, F, C, A, F)
By collinear_definition on E, C, B we get C in Line(B, E), B in Line(C, E), Line(B, E) == Line(C, E), 0 == 2 * angle(C, E, B) mod 360
By sss_anti_congruence_v0 on B, A, F, A, B, F we get anti_congruent_triangles(A, B, F, B, A, F)
By concyclic_sufficient_conditions_v0 on E, B, F, D we get concyclic(B, D, E, F)
By concyclic_sufficient_conditions_v0 on F, H, E, B we get concyclic(B, E, F, H)
By concyclic_sufficient_conditions_v0 on E, C, F, A we get concyclic(A, C, E, F)
By line_intersection_definition on B, Line(B, D), g we get B == line_intersection(g, Line(B, D))
By line_intersection_definition on E, Line(E, F), g we get E == line_intersection(g, Line(E, F))
By line_intersection_definition on A, Line(A, F), j we get A == line_intersection(j, Line(A, F))
By line_intersection_definition on A, i, Line(A, F) we get A == line_intersection(i, Line(A, F))
By line_intersection_definition on B, Line(B, F), g we get B == line_intersection(g, Line(B, F))
By line_intersection_definition on E, g, Line(E, H) we get E == line_intersection(g, Line(E, H))
By line_intersection_definition on E, Line(E, H), i we get E == line_intersection(i, Line(E, H))
By line_intersection_definition on C, j, Line(C, F) we get C == line_intersection(j, Line(C, F))
By line_intersection_definition on H, k, Line(E, H) we get H == line_intersection(k, Line(E, H))
By line_intersection_definition on D, Line(B, D), h we get D == line_intersection(h, Line(B, D))
By line_intersection_definition on A, f, Line(A, F) we get A == line_intersection(f, Line(A, F))
By line_intersection_definition on B, Line(B, F), f we get B == line_intersection(f, Line(B, F))
By line_intersection_definition on B, Line(B, D), f we get B == line_intersection(f, Line(B, D))
By line_intersection_definition on C, g, Line(C, F) we get C == line_intersection(g, Line(C, F))
By line_intersection_definition on D, i, Line(B, D) we get D == line_intersection(i, Line(B, D))
By line_intersection_definition on D, i, Line(D, F) we get D == line_intersection(i, Line(D, F))
By line_intersection_definition on E, Line(E, F), i we get E == line_intersection(i, Line(E, F))
By same_angle_v1 on G, H, D, A we get angle(D, G, A) == angle(H, G, A) mod 360
By same_angle_v3 on D, G, H, A we get angle(G, D, A) == angle(H, D, A) + 180 mod 360
By same_angle_v3 on D, G, H, C we get angle(G, D, C) == angle(H, D, C) + 180 mod 360
By same_angle_v2 on D, G, H, B we get angle(G, D, B) == angle(H, D, B) + 180 mod 360
By same_angle_v1 on G, D, H, C we get angle(D, G, C) == angle(H, G, C) mod 360
By same_angle_v3 on D, G, H, E we get angle(G, D, E) == angle(H, D, E) + 180 mod 360
By same_angle_v2 on D, G, H, F we get angle(G, D, F) == angle(H, D, F) + 180 mod 360
By between_imply_not_between on B, E, C we get collinear_and_not_between(C, B, E)
By between_imply_not_between on D, E, A we get collinear_and_not_between(A, D, E)
By between_imply_not_between on C, E, B we get collinear_and_not_between(B, C, E)
By between_imply_not_between on A, C, G we get collinear_and_not_between(C, A, G)
By between_imply_not_between on A, E, D we get collinear_and_not_between(D, A, E)
By between_imply_not_between on G, C, A we get collinear_and_not_between(A, G, C)
By circle_radius_v0_r on F, d we get radius(d) == distance(F, center(d))
By circle_radius_v0_r on D, d we get radius(d) == distance(D, center(d))
By circle_radius_v0_r on H, d we get radius(d) == distance(H, center(d))
By circle_radius_v0_r on E, d we get radius(d) == distance(E, center(d))
By same_angle_v0 on H, G, D, F we get angle(D, H, F) == angle(G, H, F) mod 360
By angle_to_center on F, H, E, d we get 2 * angle(F, H, E) == angle(F, center(d), E) mod 360
By angle_to_center on D, H, F, d we get 2 * angle(D, H, F) == angle(D, center(d), F) mod 360
By angle_to_center on F, D, H, d we get 2 * angle(F, D, H) == angle(F, center(d), H) mod 360
By angle_to_center on D, H, E, d we get 2 * angle(D, H, E) == angle(D, center(d), E) mod 360
By angle_to_center on H, F, E, d we get 2 * angle(H, F, E) == angle(H, center(d), E) mod 360
By angle_to_center on E, H, F, d we get 2 * angle(E, H, F) == angle(E, center(d), F) mod 360
By angle_to_center on H, D, E, d we get 2 * angle(H, D, E) == angle(H, center(d), E) mod 360
By angle_to_center on E, F, D, d we get 2 * angle(E, F, D) == angle(E, center(d), D) mod 360
By angle_to_center on H, F, D, d we get 2 * angle(H, F, D) == angle(H, center(d), D) mod 360
By angle_to_center on E, D, F, d we get 2 * angle(E, D, F) == angle(E, center(d), F) mod 360
By angle_to_center on E, H, D, d we get 2 * angle(E, H, D) == angle(E, center(d), D) mod 360
By angle_to_center on F, E, H, d we get 2 * angle(F, E, H) == angle(F, center(d), H) mod 360
By angle_to_center on E, D, H, d we get 2 * angle(E, D, H) == angle(E, center(d), H) mod 360
By angle_to_center on F, D, E, d we get 2 * angle(F, D, E) == angle(F, center(d), E) mod 360
By angle_to_center on D, E, F, d we get 2 * angle(D, E, F) == angle(D, center(d), F) mod 360
By angle_to_center on H, E, F, d we get 2 * angle(H, E, F) == angle(H, center(d), F) mod 360
By angle_to_center on F, E, D, d we get 2 * angle(F, E, D) == angle(F, center(d), D) mod 360
By angle_to_center on E, F, H, d we get 2 * angle(E, F, H) == angle(E, center(d), H) mod 360
By angle_to_center on D, F, E, d we get 2 * angle(D, F, E) == angle(D, center(d), E) mod 360
By angle_to_center on D, F, H, d we get 2 * angle(D, F, H) == angle(D, center(d), H) mod 360
By angle_to_center on D, E, H, d we get 2 * angle(D, E, H) == angle(D, center(d), H) mod 360
By angle_to_center on H, E, D, d we get 2 * angle(H, E, D) == angle(H, center(d), D) mod 360
By angle_to_center on H, D, F, d we get 2 * angle(H, D, F) == angle(H, center(d), F) mod 360
By angle_to_center on F, H, D, d we get 2 * angle(F, H, D) == angle(F, center(d), D) mod 360
By center_not_on_circle on d we get center(d) not in d
By same_angle_v0 on H, D, G, E we get angle(D, H, E) == angle(G, H, E) mod 360
By probably_between_and_collinear_implies_between on G, D, H we get between(G, D, H)
By reverse_direction on G, D we get 180 == direction(G, D) - direction(D, G) mod 360
By asa_anti_congruence on A, C, E, B, D, E we get anti_congruent_triangles(A, C, E, B, D, E)
By between_imply_segment_sum on G, C, A we get distance(A, G) == distance(C, G) + distance(A, C)
By line_inequality on Line(D, F), Line(C, F), D we get Line(C, F) != Line(D, F)
By collinear_definition on G, D, H we get D in Line(G, H), H in Line(D, G), Line(D, G) == Line(G, H), 0 == 2 * angle(D, G, H) mod 360
By isosceles_triangle_from_angles on E, B, A we get isosceles_triangle(E, A, B)
By reverse_direction on G, C we get 180 == direction(G, C) - direction(C, G) mod 360
By reverse_direction on D, G we get 180 == direction(D, G) - direction(G, D) mod 360
By reverse_direction on E, B we get 180 == direction(E, B) - direction(B, E) mod 360
By between_imply_segment_sum on C, E, B we get distance(B, C) == distance(C, E) + distance(B, E)
By reverse_direction on E, C we get 180 == direction(E, C) - direction(C, E) mod 360
By asa_anti_congruence on D, B, E, C, A, E we get anti_congruent_triangles(A, C, E, B, D, E)
By line_inequality on Line(A, F), Line(E, H), F we get Line(A, F) != Line(E, H)
By reverse_direction on B, E we get 180 == direction(B, E) - direction(E, B) mod 360
By reverse_direction on C, G we get 180 == direction(C, G) - direction(G, C) mod 360
By isosceles_triangle_from_angles on E, A, B we get isosceles_triangle(E, A, B)
By line_inequality on Line(B, D), Line(B, F), D we get Line(B, D) != Line(B, F)
By line_inequality on Line(E, H), Line(B, F), H we get Line(B, F) != Line(E, H)
By isosceles_trapezoid_properties on A, B, C, D we get parallel(Line(A, B), Line(C, D)), distance(A, D) == distance(B, C), angle(A, B, C) == angle(D, A, B), angle(B, C, D) == angle(C, D, A)
By anti_congruence_from_anti_similar_triangles on D, C, E, C, D, E we get anti_congruent_triangles(C, D, E, D, C, E)
By isosceles_trapezoid_properties on D, C, B, A we get parallel(Line(A, B), Line(C, D)), distance(A, D) == distance(B, C), angle(A, D, C) == angle(D, C, B), angle(B, A, D) == angle(C, B, A)
By line_inequality on Line(B, D), Line(C, F), D we get Line(B, D) != Line(C, F)
By line_inequality on Line(E, F), Line(B, F), E we get Line(B, F) != Line(E, F)
By line_inequality on radical_axis(c, d), g, D we get g != radical_axis(c, d)
By isosceles_trapezoid_properties on C, D, B, A we get parallel(Line(A, B), Line(C, D)), distance(A, C) == distance(B, D), angle(A, C, D) == angle(C, D, B), angle(B, A, C) == angle(D, B, A)
By isosceles_trapezoids_contain_isosceles_triangles on B, A, D, C we get isosceles_triangle(line_intersection(Line(A, D), Line(B, C)), A, B), isosceles_triangle(line_intersection(Line(A, D), Line(B, C)), C, D)
By anti_congruence_from_anti_similar_triangles on C, D, E, D, C, E we get anti_congruent_triangles(C, D, E, D, C, E)
By between_imply_segment_sum on A, E, D we get distance(A, D) == distance(A, E) + distance(D, E)
By isosceles_trapezoid_properties on D, C, A, B we get parallel(Line(A, B), Line(C, D)), distance(A, C) == distance(B, D), angle(B, D, C) == angle(D, C, A), angle(A, B, D) == angle(C, A, B)
By reverse_direction on G, A we get 180 == direction(G, A) - direction(A, G) mod 360
By anti_congruence_from_anti_similar_triangles on B, A, E, A, B, E we get anti_congruent_triangles(A, B, E, B, A, E)
By asa_anti_congruence on B, D, E, A, C, E we get anti_congruent_triangles(A, C, E, B, D, E)
By line_inequality on Line(A, F), Line(B, D), F we get Line(A, F) != Line(B, D)
By line_inequality on h, Line(C, F), D we get h != Line(C, F)
By reverse_direction on C, E we get 180 == direction(C, E) - direction(E, C) mod 360
By collinear_definition on D, H, G we get H in Line(D, G), G in Line(D, H), Line(D, G) == Line(D, H), 0 == 2 * angle(H, D, G) mod 360
By asa_anti_congruence on D, C, E, C, D, E we get anti_congruent_triangles(C, D, E, D, C, E)
By isosceles_triangle_from_angles on E, D, C we get isosceles_triangle(E, C, D)
By line_inequality on k, Line(F, H), G we get k != Line(F, H)
By reverse_direction on A, G we get 180 == direction(A, G) - direction(G, A) mod 360
By line_inequality on Line(B, D), Line(F, H), B we get Line(B, D) != Line(F, H)
By line_inequality on Line(F, H), Line(A, F), H we get Line(A, F) != Line(F, H)
By line_inequality on k, Line(D, F), H we get k != Line(D, F)
By line_inequality on radical_axis(c, d), Line(C, F), D we get Line(C, F) != radical_axis(c, d)
By line_inequality on Line(E, F), Line(C, F), E we get Line(C, F) != Line(E, F)
By isosceles_trapezoids_contain_isosceles_triangles on D, C, B, A we get isosceles_triangle(line_intersection(Line(A, D), Line(B, C)), C, D), isosceles_triangle(line_intersection(Line(A, D), Line(B, C)), A, B)
By anti_congruence_from_anti_similar_triangles on A, C, E, B, D, E we get anti_congruent_triangles(A, C, E, B, D, E)
By collinear_definition on G, H, D we get H in Line(D, G), D in Line(G, H), Line(D, G) == Line(G, H), 0 == 2 * angle(H, G, D) mod 360
By asa_anti_congruence on B, A, E, A, B, E we get anti_congruent_triangles(A, B, E, B, A, E)
By line_inequality on Line(E, H), Line(D, F), H we get Line(D, F) != Line(E, H)
By line_inequality on k, Line(B, D), H we get k != Line(B, D)
By asa_anti_congruence on C, A, E, D, B, E we get anti_congruent_triangles(A, C, E, B, D, E)
By anti_congruence_from_anti_similar_triangles on D, B, E, C, A, E we get anti_congruent_triangles(A, C, E, B, D, E)
By anti_congruence_from_anti_similar_triangles on C, A, E, D, B, E we get anti_congruent_triangles(A, C, E, B, D, E)
By line_inequality on Line(E, F), Line(E, H), F we get Line(E, F) != Line(E, H)
By line_inequality on Line(E, H), Line(B, D), E we get Line(B, D) != Line(E, H)
By anti_congruence_from_anti_similar_triangles on B, D, E, A, C, E we get anti_congruent_triangles(A, C, E, B, D, E)
By line_inequality on Line(D, F), Line(B, D), F we get Line(B, D) != Line(D, F)
By asa_anti_congruence on A, B, E, B, A, E we get anti_congruent_triangles(A, B, E, B, A, E)
By isosceles_triangle_from_angles on E, C, D we get isosceles_triangle(E, C, D)
By asa_anti_congruence on C, D, E, D, C, E we get anti_congruent_triangles(C, D, E, D, C, E)
By line_inequality on Line(C, F), Line(B, F), C we get Line(B, F) != Line(C, F)
By anti_congruence_from_anti_similar_triangles on A, B, E, B, A, E we get anti_congruent_triangles(A, B, E, B, A, E)
By collinear_definition on D, G, H we get G in Line(D, H), H in Line(D, G), Line(D, G) == Line(D, H), 0 == 2 * angle(G, D, H) mod 360
By line_inequality on k, Line(B, F), G we get k != Line(B, F)
By line_inequality on Line(C, F), Line(F, H), C we get Line(C, F) != Line(F, H)
By line_inequality on Line(D, F), Line(E, F), D we get Line(D, F) != Line(E, F)
By line_inequality on Line(A, F), Line(B, F), A we get Line(A, F) != Line(B, F)
By line_inequality on Line(E, H), Line(C, F), H we get Line(C, F) != Line(E, H)
By isosceles_trapezoids_contain_isosceles_triangles on A, B, C, D we get isosceles_triangle(line_intersection(Line(A, D), Line(B, C)), A, B), isosceles_triangle(line_intersection(Line(A, D), Line(B, C)), C, D)
By line_inequality on Line(F, H), Line(E, F), H we get Line(E, F) != Line(F, H)
By line_inequality on Line(E, F), Line(B, D), F we get Line(B, D) != Line(E, F)
By isosceles_trapezoids_contain_isosceles_triangles on C, D, A, B we get isosceles_triangle(line_intersection(Line(A, D), Line(B, C)), C, D), isosceles_triangle(line_intersection(Line(A, D), Line(B, C)), A, B)
By line_inequality on radical_axis(c, d), f, D we get f != radical_axis(c, d)
By line_inequality on Line(D, F), Line(B, F), D we get Line(B, F) != Line(D, F)
By line_inequality on Line(A, F), Line(E, F), A we get Line(A, F) != Line(E, F)
By line_inequality on Line(D, F), Line(A, F), D we get Line(A, F) != Line(D, F)
By line_inequality on radical_axis(c, d), Line(B, F), D we get Line(B, F) != radical_axis(c, d)
By line_inequality on radical_axis(c, d), j, D we get j != radical_axis(c, d)
By line_inequality on h, Line(D, F), C we get h != Line(D, F)
By line_inequality on radical_axis(c, d), Line(E, F), D we get Line(E, F) != radical_axis(c, d)
By line_circle_intersection_has_at_most_two_points_0 on H, D, G, d we get G not in d
By line_inequality on Line(C, F), Line(A, F), C we get Line(A, F) != Line(C, F)
By line_inequality on radical_axis(c, d), Line(F, H), D we get Line(F, H) != radical_axis(c, d)
By line_inequality on Line(D, F), Line(F, H), D we get Line(D, F) != Line(F, H)
By line_inequality on radical_axis(c, d), Line(A, F), D we get Line(A, F) != radical_axis(c, d)
By line_inequality on Line(F, H), Line(E, H), F we get Line(E, H) != Line(F, H)
By line_inequality on Line(F, H), Line(B, F), H we get Line(B, F) != Line(F, H)
By line_inequality on radical_axis(c, d), Line(E, H), D we get Line(E, H) != radical_axis(c, d)
By internal_angle_bisector_definition_v0_r on E, A, E, D we get Line(A, D) == internal_angle_bisector(E, D, E)
By internal_angle_bisector_definition_v0_r on D, E, D, A we get Line(A, E) == internal_angle_bisector(D, A, D)
By internal_angle_bisector_definition_v0_r on E, C, E, B we get Line(B, C) == internal_angle_bisector(E, B, E)
By internal_angle_bisector_definition_v0_r on E, B, E, C we get Line(B, C) == internal_angle_bisector(E, C, E)
By collinear_definition on H, G, D we get G in Line(D, H), D in Line(G, H), Line(D, H) == Line(G, H), 0 == 2 * angle(G, H, D) mod 360
By internal_angle_bisector_definition_v0_r on A, D, A, E we get Line(D, E) == internal_angle_bisector(A, E, A)
By internal_angle_bisector_definition_v0_r on C, E, C, B we get Line(B, E) == internal_angle_bisector(C, B, C)
By internal_angle_bisector_definition_v0_r on E, D, E, A we get Line(A, D) == internal_angle_bisector(E, A, E)
By reverse_direction on G, H we get 180 == direction(G, H) - direction(H, G) mod 360
By internal_angle_bisector_definition_v0_r on G, A, G, C we get Line(A, C) == internal_angle_bisector(G, C, G)
By internal_angle_bisector_definition_v0_r on A, G, A, C we get Line(C, G) == internal_angle_bisector(A, C, A)
By internal_angle_bisector_definition_v0_r on D, A, D, E we get Line(A, E) == internal_angle_bisector(D, E, D)
By internal_angle_bisector_definition_v0_r on C, A, C, G we get Line(A, G) == internal_angle_bisector(C, G, C)
By internal_angle_bisector_definition_v0_r on B, E, B, C we get Line(C, E) == internal_angle_bisector(B, C, B)
By internal_angle_bisector_definition_v0_r on C, G, C, A we get Line(A, G) == internal_angle_bisector(C, A, C)
By internal_angle_bisector_definition_v0_r on G, C, G, A we get Line(A, C) == internal_angle_bisector(G, A, G)
By internal_angle_bisector_definition_v0_r on A, C, A, G we get Line(C, G) == internal_angle_bisector(A, G, A)
By internal_angle_bisector_definition_v0_r on C, B, C, E we get Line(B, E) == internal_angle_bisector(C, E, C)
By collinear_definition on H, D, G we get D in Line(G, H), G in Line(D, H), Line(D, H) == Line(G, H), 0 == 2 * angle(D, H, G) mod 360
By internal_angle_bisector_definition_v0_r on A, E, A, D we get Line(D, E) == internal_angle_bisector(A, D, A)
By internal_angle_bisector_definition_v0_r on B, C, B, E we get Line(C, E) == internal_angle_bisector(B, E, B)
By anti_similar_triangle_basic_properties on F, C, A, F, A, C we get not_collinear(A, C, F), not_collinear(A, C, F), angle(F, C, A) == 0 - angle(F, A, C) mod 360, angle(C, A, F) == 0 - angle(A, C, F) mod 360, angle(A, F, C) == 0 - angle(C, F, A) mod 360, log(distance(A, F)) + log(distance(A, C)) == log(distance(C, F)) + log(distance(A, C)), log(distance(A, C)) + log(distance(A, F)) == log(distance(A, C)) + log(distance(C, F)), log(distance(A, F)) + log(distance(A, F)) == log(distance(C, F)) + log(distance(C, F))
By anti_similar_triangle_basic_properties on B, D, F, D, B, F we get not_collinear(B, D, F), not_collinear(B, D, F), angle(B, D, F) == 0 - angle(D, B, F) mod 360, angle(D, F, B) == 0 - angle(B, F, D) mod 360, angle(F, B, D) == 0 - angle(F, D, B) mod 360, log(distance(B, D)) + log(distance(B, F)) == log(distance(B, D)) + log(distance(D, F)), log(distance(B, F)) + log(distance(B, F)) == log(distance(D, F)) + log(distance(D, F)), log(distance(B, F)) + log(distance(B, D)) == log(distance(D, F)) + log(distance(B, D))
By anti_similar_triangle_basic_properties on C, F, D, D, F, C we get not_collinear(C, D, F), not_collinear(C, D, F), angle(C, F, D) == 0 - angle(D, F, C) mod 360, angle(F, D, C) == 0 - angle(F, C, D) mod 360, angle(D, C, F) == 0 - angle(C, D, F) mod 360, log(distance(C, F)) + log(distance(C, F)) == log(distance(D, F)) + log(distance(D, F)), log(distance(C, F)) + log(distance(C, D)) == log(distance(D, F)) + log(distance(C, D)), log(distance(C, D)) + log(distance(C, F)) == log(distance(C, D)) + log(distance(D, F))
By anti_similar_triangle_basic_properties on B, A, E, A, B, E we get not_collinear(A, B, E), not_collinear(A, B, E), angle(B, A, E) == 0 - angle(A, B, E) mod 360, angle(A, E, B) == 0 - angle(B, E, A) mod 360, angle(E, B, A) == 0 - angle(E, A, B) mod 360, log(distance(A, B)) + log(distance(A, E)) == log(distance(A, B)) + log(distance(B, E)), log(distance(A, E)) + log(distance(A, E)) == log(distance(B, E)) + log(distance(B, E)), log(distance(A, E)) + log(distance(A, B)) == log(distance(B, E)) + log(distance(A, B))
By anti_similar_triangle_basic_properties on D, C, E, C, D, E we get not_collinear(C, D, E), not_collinear(C, D, E), angle(D, C, E) == 0 - angle(C, D, E) mod 360, angle(C, E, D) == 0 - angle(D, E, C) mod 360, angle(E, D, C) == 0 - angle(E, C, D) mod 360, log(distance(C, D)) + log(distance(C, E)) == log(distance(C, D)) + log(distance(D, E)), log(distance(C, E)) + log(distance(C, E)) == log(distance(D, E)) + log(distance(D, E)), log(distance(C, E)) + log(distance(C, D)) == log(distance(D, E)) + log(distance(C, D))
By anti_similar_triangle_basic_properties on C, B, F, B, C, F we get not_collinear(B, C, F), not_collinear(B, C, F), angle(C, B, F) == 0 - angle(B, C, F) mod 360, angle(B, F, C) == 0 - angle(C, F, B) mod 360, angle(F, C, B) == 0 - angle(F, B, C) mod 360, log(distance(B, C)) + log(distance(B, F)) == log(distance(B, C)) + log(distance(C, F)), log(distance(B, F)) + log(distance(B, F)) == log(distance(C, F)) + log(distance(C, F)), log(distance(B, F)) + log(distance(B, C)) == log(distance(C, F)) + log(distance(B, C))
By anti_similar_triangle_basic_properties on F, A, B, F, B, A we get not_collinear(A, B, F), not_collinear(A, B, F), angle(F, A, B) == 0 - angle(F, B, A) mod 360, angle(A, B, F) == 0 - angle(B, A, F) mod 360, angle(B, F, A) == 0 - angle(A, F, B) mod 360, log(distance(A, F)) + log(distance(A, B)) == log(distance(B, F)) + log(distance(A, B)), log(distance(A, B)) + log(distance(A, F)) == log(distance(A, B)) + log(distance(B, F)), log(distance(A, F)) + log(distance(A, F)) == log(distance(B, F)) + log(distance(B, F))
By anti_similar_triangle_basic_properties on A, F, D, D, F, A we get not_collinear(A, D, F), not_collinear(A, D, F), angle(A, F, D) == 0 - angle(D, F, A) mod 360, angle(F, D, A) == 0 - angle(F, A, D) mod 360, angle(D, A, F) == 0 - angle(A, D, F) mod 360, log(distance(A, F)) + log(distance(A, F)) == log(distance(D, F)) + log(distance(D, F)), log(distance(A, F)) + log(distance(A, D)) == log(distance(D, F)) + log(distance(A, D)), log(distance(A, D)) + log(distance(A, F)) == log(distance(A, D)) + log(distance(D, F))
By power_of_a_point_definition on E, D, A, c we get log(power_of_a_point(E, c)) == log(distance(D, E)) + log(distance(A, E))
By power_of_a_point_definition on G, A, C, c we get log(power_of_a_point(G, c)) == log(distance(A, G)) + log(distance(C, G))
By power_of_a_point_definition on A, E, D, d we get log(power_of_a_point(A, d)) == log(distance(A, E)) + log(distance(A, D))
By power_of_a_point_definition on E, B, C, c we get log(power_of_a_point(E, c)) == log(distance(B, E)) + log(distance(C, E))
By anti_similar_triangle_basic_properties on D, B, C, C, A, D we get not_collinear(B, C, D), not_collinear(A, C, D), angle(D, B, C) == 0 - angle(C, A, D) mod 360, angle(B, C, D) == 0 - angle(A, D, C) mod 360, angle(C, D, B) == 0 - angle(D, C, A) mod 360, log(distance(A, C)) + log(distance(B, C)) == log(distance(B, D)) + log(distance(A, D)), log(distance(A, D)) + log(distance(C, D)) == log(distance(B, C)) + log(distance(C, D)), log(distance(C, D)) + log(distance(A, C)) == log(distance(C, D)) + log(distance(B, D))
By anti_similar_triangle_basic_properties on D, B, A, C, A, B we get not_collinear(A, B, D), not_collinear(A, B, C), angle(D, B, A) == 0 - angle(C, A, B) mod 360, angle(B, A, D) == 0 - angle(A, B, C) mod 360, angle(A, D, B) == 0 - angle(B, C, A) mod 360, log(distance(A, C)) + log(distance(A, B)) == log(distance(B, D)) + log(distance(A, B)), log(distance(A, B)) + log(distance(A, D)) == log(distance(A, B)) + log(distance(B, C)), log(distance(A, D)) + log(distance(A, C)) == log(distance(B, C)) + log(distance(B, D))
By anti_similar_triangle_basic_properties on D, C, B, C, D, A we get not_collinear(B, C, D), not_collinear(A, C, D), angle(D, C, B) == 0 - angle(C, D, A) mod 360, angle(C, B, D) == 0 - angle(D, A, C) mod 360, angle(B, D, C) == 0 - angle(A, C, D) mod 360, log(distance(C, D)) + log(distance(A, D)) == log(distance(C, D)) + log(distance(B, C)), log(distance(A, D)) + log(distance(B, D)) == log(distance(B, C)) + log(distance(A, C)), log(distance(A, C)) + log(distance(C, D)) == log(distance(B, D)) + log(distance(C, D))
By anti_similar_triangle_basic_properties on C, F, A, D, F, B we get not_collinear(A, C, F), not_collinear(B, D, F), angle(C, F, A) == 0 - angle(D, F, B) mod 360, angle(F, A, C) == 0 - angle(F, B, D) mod 360, angle(A, C, F) == 0 - angle(B, D, F) mod 360, log(distance(C, F)) + log(distance(B, F)) == log(distance(D, F)) + log(distance(A, F)), log(distance(A, F)) + log(distance(B, D)) == log(distance(B, F)) + log(distance(A, C)), log(distance(A, C)) + log(distance(D, F)) == log(distance(B, D)) + log(distance(C, F))
By similar_triangle_basic_properties on D, F, A, B, F, C we get not_collinear(A, D, F), not_collinear(B, C, F), angle(B, F, C) == angle(D, F, A) mod 360, angle(F, A, D) == angle(F, C, B) mod 360, angle(A, D, F) == angle(C, B, F) mod 360, log(distance(B, F)) + log(distance(A, F)) == log(distance(D, F)) + log(distance(C, F)), log(distance(A, F)) + log(distance(B, C)) == log(distance(C, F)) + log(distance(A, D)), log(distance(A, D)) + log(distance(B, F)) == log(distance(B, C)) + log(distance(D, F))
By anti_similar_triangle_basic_properties on A, C, E, B, D, E we get not_collinear(A, C, E), not_collinear(B, D, E), angle(A, C, E) == 0 - angle(B, D, E) mod 360, angle(C, E, A) == 0 - angle(D, E, B) mod 360, angle(E, A, C) == 0 - angle(E, B, D) mod 360, log(distance(A, C)) + log(distance(D, E)) == log(distance(B, D)) + log(distance(C, E)), log(distance(C, E)) + log(distance(B, E)) == log(distance(D, E)) + log(distance(A, E)), log(distance(A, E)) + log(distance(B, D)) == log(distance(B, E)) + log(distance(A, C))
By anti_similar_triangle_basic_properties on C, A, F, D, B, F we get not_collinear(A, C, F), not_collinear(B, D, F), angle(C, A, F) == 0 - angle(D, B, F) mod 360, angle(A, F, C) == 0 - angle(B, F, D) mod 360, angle(F, C, A) == 0 - angle(F, D, B) mod 360, log(distance(A, C)) + log(distance(B, F)) == log(distance(B, D)) + log(distance(A, F)), log(distance(A, F)) + log(distance(D, F)) == log(distance(B, F)) + log(distance(C, F)), log(distance(C, F)) + log(distance(B, D)) == log(distance(D, F)) + log(distance(A, C))
By anti_similar_triangle_basic_properties on F, A, D, F, B, C we get not_collinear(A, D, F), not_collinear(B, C, F), angle(F, A, D) == 0 - angle(F, B, C) mod 360, angle(A, D, F) == 0 - angle(B, C, F) mod 360, angle(D, F, A) == 0 - angle(C, F, B) mod 360, log(distance(A, F)) + log(distance(B, C)) == log(distance(B, F)) + log(distance(A, D)), log(distance(A, D)) + log(distance(C, F)) == log(distance(B, C)) + log(distance(D, F)), log(distance(C, F)) + log(distance(A, F)) == log(distance(D, F)) + log(distance(B, F))
By similar_triangle_basic_properties on D, A, F, B, C, F we get not_collinear(A, D, F), not_collinear(B, C, F), angle(B, C, F) == angle(D, A, F) mod 360, angle(A, F, D) == angle(C, F, B) mod 360, angle(F, B, C) == angle(F, D, A) mod 360, log(distance(A, D)) + log(distance(C, F)) == log(distance(B, C)) + log(distance(A, F)), log(distance(A, F)) + log(distance(B, F)) == log(distance(C, F)) + log(distance(D, F)), log(distance(B, F)) + log(distance(A, D)) == log(distance(D, F)) + log(distance(B, C))
By anti_similar_triangle_basic_properties on D, A, F, C, B, F we get not_collinear(A, D, F), not_collinear(B, C, F), angle(D, A, F) == 0 - angle(C, B, F) mod 360, angle(A, F, D) == 0 - angle(B, F, C) mod 360, angle(F, D, A) == 0 - angle(F, C, B) mod 360, log(distance(A, D)) + log(distance(B, F)) == log(distance(B, C)) + log(distance(A, F)), log(distance(A, F)) + log(distance(C, F)) == log(distance(B, F)) + log(distance(D, F)), log(distance(C, F)) + log(distance(A, D)) == log(distance(D, F)) + log(distance(B, C))
By anti_similar_triangle_basic_properties on D, C, E, B, A, E we get not_collinear(C, D, E), not_collinear(A, B, E), angle(D, C, E) == 0 - angle(B, A, E) mod 360, angle(C, E, D) == 0 - angle(A, E, B) mod 360, angle(E, D, C) == 0 - angle(E, B, A) mod 360, log(distance(A, B)) + log(distance(C, E)) == log(distance(C, D)) + log(distance(A, E)), log(distance(A, E)) + log(distance(D, E)) == log(distance(C, E)) + log(distance(B, E)), log(distance(B, E)) + log(distance(C, D)) == log(distance(D, E)) + log(distance(A, B))
By similar_triangle_basic_properties on C, F, A, B, F, D we get not_collinear(A, C, F), not_collinear(B, D, F), angle(B, F, D) == angle(C, F, A) mod 360, angle(F, A, C) == angle(F, D, B) mod 360, angle(A, C, F) == angle(D, B, F) mod 360, log(distance(B, F)) + log(distance(A, F)) == log(distance(C, F)) + log(distance(D, F)), log(distance(A, F)) + log(distance(B, D)) == log(distance(D, F)) + log(distance(A, C)), log(distance(A, C)) + log(distance(B, F)) == log(distance(B, D)) + log(distance(C, F))
By similar_triangle_basic_properties on F, B, D, F, C, A we get not_collinear(B, D, F), not_collinear(A, C, F), angle(F, B, D) == angle(F, C, A) mod 360, angle(B, D, F) == angle(C, A, F) mod 360, angle(A, F, C) == angle(D, F, B) mod 360, log(distance(B, F)) + log(distance(A, C)) == log(distance(C, F)) + log(distance(B, D)), log(distance(A, C)) + log(distance(D, F)) == log(distance(B, D)) + log(distance(A, F)), log(distance(A, F)) + log(distance(B, F)) == log(distance(D, F)) + log(distance(C, F))
By similar_triangle_basic_properties on D, E, C, A, E, B we get not_collinear(C, D, E), not_collinear(A, B, E), angle(A, E, B) == angle(D, E, C) mod 360, angle(E, B, A) == angle(E, C, D) mod 360, angle(B, A, E) == angle(C, D, E) mod 360, log(distance(A, E)) + log(distance(C, E)) == log(distance(D, E)) + log(distance(B, E)), log(distance(B, E)) + log(distance(C, D)) == log(distance(C, E)) + log(distance(A, B)), log(distance(A, B)) + log(distance(D, E)) == log(distance(C, D)) + log(distance(A, E))
By anti_similar_triangle_basic_properties on B, E, A, D, E, C we get not_collinear(A, B, E), not_collinear(C, D, E), angle(B, E, A) == 0 - angle(D, E, C) mod 360, angle(E, A, B) == 0 - angle(E, C, D) mod 360, angle(A, B, E) == 0 - angle(C, D, E) mod 360, log(distance(B, E)) + log(distance(C, E)) == log(distance(D, E)) + log(distance(A, E)), log(distance(A, E)) + log(distance(C, D)) == log(distance(C, E)) + log(distance(A, B)), log(distance(A, B)) + log(distance(D, E)) == log(distance(C, D)) + log(distance(B, E))
By anti_similar_triangle_basic_properties on D, B, E, C, A, E we get not_collinear(B, D, E), not_collinear(A, C, E), angle(D, B, E) == 0 - angle(C, A, E) mod 360, angle(B, E, D) == 0 - angle(A, E, C) mod 360, angle(E, D, B) == 0 - angle(E, C, A) mod 360, log(distance(A, C)) + log(distance(B, E)) == log(distance(B, D)) + log(distance(A, E)), log(distance(A, E)) + log(distance(D, E)) == log(distance(B, E)) + log(distance(C, E)), log(distance(C, E)) + log(distance(B, D)) == log(distance(D, E)) + log(distance(A, C))
By similar_triangle_basic_properties on B, E, A, C, E, D we get not_collinear(A, B, E), not_collinear(C, D, E), angle(B, E, A) == angle(C, E, D) mod 360, angle(E, A, B) == angle(E, D, C) mod 360, angle(A, B, E) == angle(D, C, E) mod 360, log(distance(B, E)) + log(distance(D, E)) == log(distance(C, E)) + log(distance(A, E)), log(distance(A, E)) + log(distance(C, D)) == log(distance(D, E)) + log(distance(A, B)), log(distance(A, B)) + log(distance(C, E)) == log(distance(C, D)) + log(distance(B, E))
By radical_axis_is_perpendicular_to_center_line on radical_axis(c, d), d, c we get perpendicular(radical_axis(c, d), Line(center(c), center(d)))
By concurrent_sufficient_conditions on k, Line(B, D), h we get concurrent(h, k, Line(B, D))
By line_intersection_definition on H, k, Line(F, H) we get H == line_intersection(k, Line(F, H))
By line_intersection_definition on F, Line(C, F), Line(D, F) we get F == line_intersection(Line(C, F), Line(D, F))
By line_intersection_definition on H, Line(E, H), Line(F, H) we get H == line_intersection(Line(E, H), Line(F, H))
By line_intersection_definition on E, Line(E, H), Line(E, F) we get E == line_intersection(Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(D, F), Line(B, D), i we get concurrent(i, Line(B, D), Line(D, F))
By concurrent_sufficient_conditions on Line(B, D), k, h we get concurrent(h, k, Line(B, D))
By concurrent_sufficient_conditions on Line(B, D), Line(B, F), f we get concurrent(f, Line(B, D), Line(B, F))
By concurrent_sufficient_conditions on Line(B, D), k, i we get concurrent(i, k, Line(B, D))
By line_intersection_definition on D, h, Line(D, F) we get D == line_intersection(h, Line(D, F))
By line_intersection_definition on F, Line(C, F), Line(B, F) we get F == line_intersection(Line(B, F), Line(C, F))
By line_intersection_definition on D, Line(D, F), Line(B, D) we get D == line_intersection(Line(B, D), Line(D, F))
By concurrent_sufficient_conditions on Line(B, F), Line(B, D), g we get concurrent(g, Line(B, D), Line(B, F))
By concurrent_sufficient_conditions on Line(E, F), Line(E, H), i we get concurrent(i, Line(E, F), Line(E, H))
By line_intersection_definition on F, Line(A, F), Line(D, F) we get F == line_intersection(Line(A, F), Line(D, F))
By concurrent_sufficient_conditions on Line(D, F), h, i we get concurrent(h, i, Line(D, F))
By line_intersection_definition on F, Line(D, F), Line(B, F) we get F == line_intersection(Line(B, F), Line(D, F))
By concurrent_sufficient_conditions on Line(E, H), Line(E, F), g we get concurrent(g, Line(E, F), Line(E, H))
By line_intersection_definition on F, Line(D, F), Line(F, H) we get F == line_intersection(Line(D, F), Line(F, H))
By line_intersection_definition on F, Line(A, F), Line(B, F) we get F == line_intersection(Line(A, F), Line(B, F))
By concurrent_sufficient_conditions on Line(C, F), h, j we get concurrent(h, j, Line(C, F))
By line_intersection_definition on D, Line(B, D), k we get D == line_intersection(k, Line(B, D))
By concurrent_sufficient_conditions on Line(E, H), Line(E, F), i we get concurrent(i, Line(E, F), Line(E, H))
By line_intersection_definition on F, Line(E, F), Line(A, F) we get F == line_intersection(Line(A, F), Line(E, F))
By concurrent_sufficient_conditions on h, Line(D, F), i we get concurrent(h, i, Line(D, F))
By line_intersection_definition on F, Line(F, H), Line(C, F) we get F == line_intersection(Line(C, F), Line(F, H))
By line_intersection_definition on B, Line(B, D), Line(B, F) we get B == line_intersection(Line(B, D), Line(B, F))
By concurrent_sufficient_conditions on Line(E, F), Line(E, H), g we get concurrent(g, Line(E, F), Line(E, H))
By line_intersection_definition on F, Line(F, H), Line(A, F) we get F == line_intersection(Line(A, F), Line(F, H))
By line_intersection_definition on F, Line(A, F), Line(C, F) we get F == line_intersection(Line(A, F), Line(C, F))
By line_intersection_definition on F, Line(B, F), Line(E, F) we get F == line_intersection(Line(B, F), Line(E, F))
By line_intersection_definition on F, Line(E, F), Line(D, F) we get F == line_intersection(Line(D, F), Line(E, F))
By line_intersection_definition on D, k, Line(D, F) we get D == line_intersection(k, Line(D, F))
By line_intersection_definition on C, Line(C, F), h we get C == line_intersection(h, Line(C, F))
By concurrent_sufficient_conditions on h, Line(C, F), j we get concurrent(h, j, Line(C, F))
By line_intersection_definition on F, Line(C, F), Line(E, F) we get F == line_intersection(Line(C, F), Line(E, F))
By concurrent_sufficient_conditions on Line(B, D), Line(B, F), g we get concurrent(g, Line(B, D), Line(B, F))
By concurrent_sufficient_conditions on Line(D, F), k, i we get concurrent(i, k, Line(D, F))
By concurrent_sufficient_conditions on k, Line(D, F), i we get concurrent(i, k, Line(D, F))
By concurrent_sufficient_conditions on Line(C, F), h, g we get concurrent(g, h, Line(C, F))
By concurrent_sufficient_conditions on Line(B, D), Line(D, F), i we get concurrent(i, Line(B, D), Line(D, F))
By line_intersection_definition on F, Line(E, F), Line(F, H) we get F == line_intersection(Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(B, F), Line(B, D), f we get concurrent(f, Line(B, D), Line(B, F))
By concurrent_sufficient_conditions on h, Line(C, F), g we get concurrent(g, h, Line(C, F))
By concurrent_sufficient_conditions on k, Line(B, D), i we get concurrent(i, k, Line(B, D))
By line_intersection_definition on F, Line(F, H), Line(B, F) we get F == line_intersection(Line(B, F), Line(F, H))
By between_imply_not_between on G, D, H we get collinear_and_not_between(D, G, H)
By between_imply_not_between on H, D, G we get collinear_and_not_between(D, H, G)
By different_points_v1 on center(d), H we get 0 != distance(H, center(d))
By different_points_v1 on center(d), F we get 0 != distance(F, center(d))
By different_points_v1 on center(d), E we get 0 != distance(E, center(d))
By different_points_v1 on D, center(d) we get 0 != distance(D, center(d))
By sss_anti_congruence_v0 on E, B, F, E, A, F we get anti_congruent_triangles(A, E, F, B, E, F)
By sas_anti_congruence on F, D, E, F, C, E we get anti_congruent_triangles(C, E, F, D, E, F)
By sss_anti_congruence_v1 on A, F, E, B, F, E we get anti_congruent_triangles(A, E, F, B, E, F)
By line_inequality on Line(H, center(d)), Line(B, D), H we get Line(B, D) != Line(H, center(d))
By sss_anti_congruence_v1 on E, F, D, E, F, C we get anti_congruent_triangles(C, E, F, D, E, F)
By sss_anti_congruence_v1 on F, E, C, F, E, D we get anti_congruent_triangles(C, E, F, D, E, F)
By sss_anti_congruence_v1 on E, F, D, E, F, C we get anti_congruent_triangles(C, E, F, D, E, F)
By sss_anti_congruence_v0 on D, F, E, C, F, E we get anti_congruent_triangles(C, E, F, D, E, F)
By sss_anti_congruence_v0 on D, F, E, C, F, E we get anti_congruent_triangles(C, E, F, D, E, F)
By sss_anti_congruence_v1 on A, F, E, B, F, E we get anti_congruent_triangles(A, E, F, B, E, F)
By sss_anti_congruence_v1 on F, B, E, F, A, E we get anti_congruent_triangles(A, E, F, B, E, F)
By sss_anti_congruence_v0 on E, F, A, E, F, B we get anti_congruent_triangles(A, E, F, B, E, F)
By sss_anti_congruence_v0 on E, F, A, E, F, B we get anti_congruent_triangles(A, E, F, B, E, F)
By sss_anti_congruence_v0 on F, E, D, F, E, C we get anti_congruent_triangles(C, E, F, D, E, F)
By sss_anti_congruence_v1 on B, E, F, A, E, F we get anti_congruent_triangles(A, E, F, B, E, F)
By sss_anti_congruence_v1 on F, D, E, F, C, E we get anti_congruent_triangles(C, E, F, D, E, F)
By sss_anti_congruence_v1 on F, E, A, F, E, B we get anti_congruent_triangles(A, E, F, B, E, F)
By sss_anti_congruence_v1 on A, F, E, B, F, E we get anti_congruent_triangles(A, E, F, B, E, F)
By sss_anti_congruence_v0 on C, E, F, D, E, F we get anti_congruent_triangles(C, E, F, D, E, F)
By sss_anti_congruence_v1 on E, C, F, E, D, F we get anti_congruent_triangles(C, E, F, D, E, F)
By sss_anti_congruence_v1 on C, F, E, D, F, E we get anti_congruent_triangles(C, E, F, D, E, F)
By sss_anti_congruence_v1 on F, E, A, F, E, B we get anti_congruent_triangles(A, E, F, B, E, F)
By sss_anti_congruence_v0 on E, D, F, E, C, F we get anti_congruent_triangles(C, E, F, D, E, F)
By concyclic_definition_0 on D, F, E, B we get B in Circle(D, E, F)
By sss_anti_congruence_v0 on F, C, E, F, D, E we get anti_congruent_triangles(C, E, F, D, E, F)
By sss_anti_congruence_v0 on E, F, C, E, F, D we get anti_congruent_triangles(C, E, F, D, E, F)
By sss_anti_congruence_v0 on E, B, F, E, A, F we get anti_congruent_triangles(A, E, F, B, E, F)
By sas_anti_similarity on F, A, E, F, B, E we get anti_similar_triangles(A, E, F, B, E, F)
By sss_anti_congruence_v1 on E, A, F, E, B, F we get anti_congruent_triangles(A, E, F, B, E, F)
By sss_anti_congruence_v1 on E, A, F, E, B, F we get anti_congruent_triangles(A, E, F, B, E, F)
By concyclic_definition_0 on F, E, H, B we get B in Circle(E, F, H)
By sss_anti_congruence_v1 on D, E, F, C, E, F we get anti_congruent_triangles(C, E, F, D, E, F)
By sss_anti_congruence_v0 on E, B, F, E, A, F we get anti_congruent_triangles(A, E, F, B, E, F)
By sss_anti_congruence_v0 on D, F, E, C, F, E we get anti_congruent_triangles(C, E, F, D, E, F)
By sss_anti_congruence_v1 on F, B, E, F, A, E we get anti_congruent_triangles(A, E, F, B, E, F)
By sss_anti_congruence_v1 on F, E, A, F, E, B we get anti_congruent_triangles(A, E, F, B, E, F)
By sss_anti_congruence_v0 on F, E, D, F, E, C we get anti_congruent_triangles(C, E, F, D, E, F)
By sss_anti_congruence_v0 on F, E, D, F, E, C we get anti_congruent_triangles(C, E, F, D, E, F)
By sss_anti_congruence_v0 on E, F, C, E, F, D we get anti_congruent_triangles(C, E, F, D, E, F)
By sss_anti_congruence_v1 on F, D, E, F, C, E we get anti_congruent_triangles(C, E, F, D, E, F)
By sss_anti_congruence_v1 on E, F, B, E, F, A we get anti_congruent_triangles(A, E, F, B, E, F)
By sss_anti_congruence_v1 on E, F, D, E, F, C we get anti_congruent_triangles(C, E, F, D, E, F)
By sss_anti_congruence_v0 on E, F, C, E, F, D we get anti_congruent_triangles(C, E, F, D, E, F)
By sss_anti_congruence_v1 on E, F, D, E, F, C we get anti_congruent_triangles(C, E, F, D, E, F)
By sas_anti_congruence on F, A, E, F, B, E we get anti_congruent_triangles(A, E, F, B, E, F)
By sss_anti_congruence_v0 on F, E, D, F, E, C we get anti_congruent_triangles(C, E, F, D, E, F)
By sss_anti_congruence_v0 on C, E, F, D, E, F we get anti_congruent_triangles(C, E, F, D, E, F)
By sss_anti_congruence_v1 on B, E, F, A, E, F we get anti_congruent_triangles(A, E, F, B, E, F)
By sas_anti_similarity on E, C, F, E, D, F we get anti_similar_triangles(C, E, F, D, E, F)
By sss_anti_congruence_v0 on E, D, F, E, C, F we get anti_congruent_triangles(C, E, F, D, E, F)
By sss_anti_congruence_v1 on F, B, E, F, A, E we get anti_congruent_triangles(A, E, F, B, E, F)
By sss_anti_congruence_v1 on F, E, C, F, E, D we get anti_congruent_triangles(C, E, F, D, E, F)
By sss_anti_congruence_v0 on B, F, E, A, F, E we get anti_congruent_triangles(A, E, F, B, E, F)
By sss_anti_congruence_v0 on E, F, A, E, F, B we get anti_congruent_triangles(A, E, F, B, E, F)
By sss_anti_congruence_v1 on F, E, C, F, E, D we get anti_congruent_triangles(C, E, F, D, E, F)
By sss_anti_congruence_v1 on C, F, E, D, F, E we get anti_congruent_triangles(C, E, F, D, E, F)
By sss_anti_congruence_v0 on F, E, B, F, E, A we get anti_congruent_triangles(A, E, F, B, E, F)
By sss_anti_congruence_v0 on C, E, F, D, E, F we get anti_congruent_triangles(C, E, F, D, E, F)
By sas_anti_congruence on F, C, E, F, D, E we get anti_congruent_triangles(C, E, F, D, E, F)
By sss_anti_congruence_v0 on D, F, E, C, F, E we get anti_congruent_triangles(C, E, F, D, E, F)
By sss_anti_congruence_v0 on F, E, B, F, E, A we get anti_congruent_triangles(A, E, F, B, E, F)
By sss_anti_congruence_v0 on F, C, E, F, D, E we get anti_congruent_triangles(C, E, F, D, E, F)
By sss_anti_congruence_v1 on F, D, E, F, C, E we get anti_congruent_triangles(C, E, F, D, E, F)
By line_inequality on Line(D, center(d)), Line(C, F), D we get Line(C, F) != Line(D, center(d))
By sas_anti_congruence on E, D, F, E, C, F we get anti_congruent_triangles(C, E, F, D, E, F)
By sss_anti_congruence_v0 on F, A, E, F, B, E we get anti_congruent_triangles(A, E, F, B, E, F)
By sss_anti_congruence_v0 on E, F, A, E, F, B we get anti_congruent_triangles(A, E, F, B, E, F)
By sss_anti_congruence_v1 on F, E, A, F, E, B we get anti_congruent_triangles(A, E, F, B, E, F)
By sss_anti_congruence_v0 on F, A, E, F, B, E we get anti_congruent_triangles(A, E, F, B, E, F)
By line_inequality on Line(D, center(d)), j, D we get j != Line(D, center(d))
By sss_anti_congruence_v1 on B, E, F, A, E, F we get anti_congruent_triangles(A, E, F, B, E, F)
By sss_anti_congruence_v0 on B, F, E, A, F, E we get anti_congruent_triangles(A, E, F, B, E, F)
By sss_anti_congruence_v0 on A, E, F, B, E, F we get anti_congruent_triangles(A, E, F, B, E, F)
By sss_anti_congruence_v1 on E, C, F, E, D, F we get anti_congruent_triangles(C, E, F, D, E, F)
By sss_anti_congruence_v0 on D, F, E, C, F, E we get anti_congruent_triangles(C, E, F, D, E, F)
By between_imply_segment_sum on H, D, G we get distance(G, H) == distance(D, H) + distance(D, G)
By sss_anti_congruence_v0 on A, E, F, B, E, F we get anti_congruent_triangles(A, E, F, B, E, F)
By sss_anti_congruence_v1 on E, F, B, E, F, A we get anti_congruent_triangles(A, E, F, B, E, F)
By sss_anti_congruence_v0 on F, A, E, F, B, E we get anti_congruent_triangles(A, E, F, B, E, F)
By sss_anti_congruence_v0 on E, B, F, E, A, F we get anti_congruent_triangles(A, E, F, B, E, F)
By sss_anti_congruence_v1 on F, D, E, F, C, E we get anti_congruent_triangles(C, E, F, D, E, F)
By sss_anti_congruence_v1 on D, E, F, C, E, F we get anti_congruent_triangles(C, E, F, D, E, F)
By sss_anti_congruence_v0 on A, E, F, B, E, F we get anti_congruent_triangles(A, E, F, B, E, F)
By line_inequality on Line(D, center(d)), Line(F, H), D we get Line(F, H) != Line(D, center(d))
By sss_anti_congruence_v0 on F, E, B, F, E, A we get anti_congruent_triangles(A, E, F, B, E, F)
By sss_anti_congruence_v0 on B, F, E, A, F, E we get anti_congruent_triangles(A, E, F, B, E, F)
By sss_anti_congruence_v1 on E, A, F, E, B, F we get anti_congruent_triangles(A, E, F, B, E, F)
By sss_anti_congruence_v0 on C, E, F, D, E, F we get anti_congruent_triangles(C, E, F, D, E, F)
By sss_anti_congruence_v1 on E, C, F, E, D, F we get anti_congruent_triangles(C, E, F, D, E, F)
By sss_anti_congruence_v1 on F, B, E, F, A, E we get anti_congruent_triangles(A, E, F, B, E, F)
By line_inequality on Line(F, center(d)), f, F we get f != Line(F, center(d))
By sss_anti_congruence_v1 on E, C, F, E, D, F we get anti_congruent_triangles(C, E, F, D, E, F)
By sss_anti_congruence_v1 on C, F, E, D, F, E we get anti_congruent_triangles(C, E, F, D, E, F)
By sss_anti_congruence_v0 on F, A, E, F, B, E we get anti_congruent_triangles(A, E, F, B, E, F)
By sss_anti_congruence_v1 on F, E, C, F, E, D we get anti_congruent_triangles(C, E, F, D, E, F)
By sss_anti_congruence_v0 on C, E, F, D, E, F we get anti_congruent_triangles(C, E, F, D, E, F)
By sss_anti_congruence_v0 on E, D, F, E, C, F we get anti_congruent_triangles(C, E, F, D, E, F)
By sss_anti_congruence_v1 on D, E, F, C, E, F we get anti_congruent_triangles(C, E, F, D, E, F)
By sss_anti_congruence_v1 on E, A, F, E, B, F we get anti_congruent_triangles(A, E, F, B, E, F)
By sss_anti_congruence_v0 on E, F, C, E, F, D we get anti_congruent_triangles(C, E, F, D, E, F)
By sss_anti_congruence_v0 on F, C, E, F, D, E we get anti_congruent_triangles(C, E, F, D, E, F)
By sss_anti_congruence_v0 on F, E, B, F, E, A we get anti_congruent_triangles(A, E, F, B, E, F)
By sss_anti_congruence_v0 on E, D, F, E, C, F we get anti_congruent_triangles(C, E, F, D, E, F)
By sss_anti_congruence_v1 on F, E, A, F, E, B we get anti_congruent_triangles(A, E, F, B, E, F)
By sss_anti_congruence_v0 on F, E, D, F, E, C we get anti_congruent_triangles(C, E, F, D, E, F)
By sas_anti_similarity on E, D, F, E, C, F we get anti_similar_triangles(C, E, F, D, E, F)
By sss_anti_congruence_v0 on E, F, C, E, F, D we get anti_congruent_triangles(C, E, F, D, E, F)
By sss_anti_congruence_v1 on F, B, E, F, A, E we get anti_congruent_triangles(A, E, F, B, E, F)
By line_inequality on Line(H, center(d)), f, H we get f != Line(H, center(d))
By sas_anti_congruence on E, B, F, E, A, F we get anti_congruent_triangles(A, E, F, B, E, F)
By sss_anti_congruence_v0 on B, F, E, A, F, E we get anti_congruent_triangles(A, E, F, B, E, F)
By sss_anti_congruence_v1 on D, E, F, C, E, F we get anti_congruent_triangles(C, E, F, D, E, F)
By sss_anti_congruence_v1 on E, F, D, E, F, C we get anti_congruent_triangles(C, E, F, D, E, F)
By sas_anti_congruence on E, C, F, E, D, F we get anti_congruent_triangles(C, E, F, D, E, F)
By sss_anti_congruence_v1 on E, C, F, E, D, F we get anti_congruent_triangles(C, E, F, D, E, F)
By sss_anti_congruence_v1 on B, E, F, A, E, F we get anti_congruent_triangles(A, E, F, B, E, F)
By sss_anti_congruence_v0 on F, C, E, F, D, E we get anti_congruent_triangles(C, E, F, D, E, F)
By sas_anti_similarity on E, A, F, E, B, F we get anti_similar_triangles(A, E, F, B, E, F)
By sas_anti_similarity on F, D, E, F, C, E we get anti_similar_triangles(C, E, F, D, E, F)
By sss_anti_congruence_v1 on A, F, E, B, F, E we get anti_congruent_triangles(A, E, F, B, E, F)
By sas_anti_congruence on F, B, E, F, A, E we get anti_congruent_triangles(A, E, F, B, E, F)
By sss_anti_congruence_v1 on F, D, E, F, C, E we get anti_congruent_triangles(C, E, F, D, E, F)
By sas_anti_similarity on F, B, E, F, A, E we get anti_similar_triangles(A, E, F, B, E, F)
By sss_anti_congruence_v1 on D, E, F, C, E, F we get anti_congruent_triangles(C, E, F, D, E, F)
By sss_anti_congruence_v0 on A, E, F, B, E, F we get anti_congruent_triangles(A, E, F, B, E, F)
By sss_anti_congruence_v1 on C, F, E, D, F, E we get anti_congruent_triangles(C, E, F, D, E, F)
By sss_anti_congruence_v1 on B, E, F, A, E, F we get anti_congruent_triangles(A, E, F, B, E, F)
By sss_anti_congruence_v0 on B, F, E, A, F, E we get anti_congruent_triangles(A, E, F, B, E, F)
By sss_anti_congruence_v0 on A, E, F, B, E, F we get anti_congruent_triangles(A, E, F, B, E, F)
By sas_anti_similarity on E, B, F, E, A, F we get anti_similar_triangles(A, E, F, B, E, F)
By line_inequality on Line(F, center(d)), j, F we get j != Line(F, center(d))
By sss_anti_congruence_v0 on F, C, E, F, D, E we get anti_congruent_triangles(C, E, F, D, E, F)
By sss_anti_congruence_v1 on E, A, F, E, B, F we get anti_congruent_triangles(A, E, F, B, E, F)
By sas_anti_similarity on F, C, E, F, D, E we get anti_similar_triangles(C, E, F, D, E, F)
By sss_anti_congruence_v0 on E, F, A, E, F, B we get anti_congruent_triangles(A, E, F, B, E, F)
By sss_anti_congruence_v0 on E, D, F, E, C, F we get anti_congruent_triangles(C, E, F, D, E, F)
By sss_anti_congruence_v1 on E, F, B, E, F, A we get anti_congruent_triangles(A, E, F, B, E, F)
By sss_anti_congruence_v1 on A, F, E, B, F, E we get anti_congruent_triangles(A, E, F, B, E, F)
By sss_anti_congruence_v1 on C, F, E, D, F, E we get anti_congruent_triangles(C, E, F, D, E, F)
By sss_anti_congruence_v1 on E, F, B, E, F, A we get anti_congruent_triangles(A, E, F, B, E, F)
By sss_anti_congruence_v0 on E, B, F, E, A, F we get anti_congruent_triangles(A, E, F, B, E, F)
By sss_anti_congruence_v1 on E, F, B, E, F, A we get anti_congruent_triangles(A, E, F, B, E, F)
By sss_anti_congruence_v0 on F, A, E, F, B, E we get anti_congruent_triangles(A, E, F, B, E, F)
By sss_anti_congruence_v0 on F, E, B, F, E, A we get anti_congruent_triangles(A, E, F, B, E, F)
By sss_anti_congruence_v1 on F, E, C, F, E, D we get anti_congruent_triangles(C, E, F, D, E, F)
By sas_anti_congruence on E, A, F, E, B, F we get anti_congruent_triangles(A, E, F, B, E, F)
By line_inequality on Line(E, center(d)), Line(B, D), E we get Line(B, D) != Line(E, center(d))
By line_inequality on Line(E, center(d)), j, E we get j != Line(E, center(d))
By line_inequality on Line(H, center(d)), i, H we get i != Line(H, center(d))
By line_inequality on Line(H, center(d)), Line(B, F), H we get Line(B, F) != Line(H, center(d))
By line_inequality on Line(E, center(d)), Line(A, F), E we get Line(A, F) != Line(E, center(d))
By line_inequality on Line(F, center(d)), Line(B, D), F we get Line(B, D) != Line(F, center(d))
By line_inequality on Line(D, center(d)), Line(B, F), D we get Line(B, F) != Line(D, center(d))
By line_inequality on Line(E, center(d)), Line(D, F), E we get Line(D, F) != Line(E, center(d))
By line_inequality on Line(F, center(d)), Line(E, H), F we get Line(E, H) != Line(F, center(d))
By line_inequality on Line(F, center(d)), k, F we get k != Line(F, center(d))
By line_inequality on Line(F, center(d)), g, F we get g != Line(F, center(d))
By line_inequality on Line(F, center(d)), i, F we get i != Line(F, center(d))
By line_inequality on Line(D, center(d)), g, D we get g != Line(D, center(d))
By line_inequality on Line(D, center(d)), f, D we get f != Line(D, center(d))
By line_inequality on Line(H, center(d)), h, H we get h != Line(H, center(d))
By line_inequality on Line(H, center(d)), j, H we get j != Line(H, center(d))
By line_inequality on Line(E, center(d)), k, E we get k != Line(E, center(d))
By line_inequality on Line(D, center(d)), Line(E, F), D we get Line(E, F) != Line(D, center(d))
By line_inequality on Line(D, center(d)), Line(A, F), D we get Line(A, F) != Line(D, center(d))
By line_inequality on Line(H, center(d)), Line(D, F), H we get Line(D, F) != Line(H, center(d))
By line_inequality on Line(H, center(d)), Line(C, F), H we get Line(C, F) != Line(H, center(d))
By line_inequality on Line(H, center(d)), Line(A, F), H we get Line(A, F) != Line(H, center(d))
By line_inequality on Line(E, center(d)), Line(C, F), E we get Line(C, F) != Line(E, center(d))
By line_inequality on Line(E, center(d)), f, E we get f != Line(E, center(d))
By line_inequality on Line(E, center(d)), Line(F, H), E we get Line(F, H) != Line(E, center(d))
By line_inequality on Line(H, center(d)), g, H we get g != Line(H, center(d))
By line_inequality on Line(F, center(d)), h, F we get h != Line(F, center(d))
By line_inequality on Line(E, center(d)), h, E we get h != Line(E, center(d))
By line_inequality on Line(E, center(d)), Line(B, F), E we get Line(B, F) != Line(E, center(d))
By line_inequality on Line(D, center(d)), Line(E, H), D we get Line(E, H) != Line(D, center(d))
By line_inequality on Line(H, center(d)), Line(E, F), H we get Line(E, F) != Line(H, center(d))
By concyclic_definition_0 on B, D, F, E we get E in Circle(B, D, F)
By concyclic_definition_0 on B, F, E, H we get H in Circle(B, E, F)
By concyclic_definition_1 on F, E, D, B we get Circle(B, D, E) == Circle(D, E, F)
By concyclic_definition_0 on B, F, E, D we get D in Circle(B, E, F)
By concyclic_definition_0 on A, F, C, E we get E in Circle(A, C, F)
By concyclic_definition_0 on E, F, C, A we get A in Circle(C, E, F)
By concyclic_definition_1 on B, H, E, F we get Circle(B, E, H) == Circle(E, F, H)
By concyclic_definition_0 on H, F, B, E we get E in Circle(B, F, H)
By concyclic_definition_0 on E, H, B, F we get F in Circle(B, E, H)
By concyclic_definition_0 on A, E, F, C we get C in Circle(A, E, F)
By concyclic_definition_1 on B, F, E, H we get Circle(B, E, F) == Circle(E, F, H)
By internal_angle_bisector_definition_v0_r on H, G, H, D we get Line(D, G) == internal_angle_bisector(H, D, H)
By internal_angle_bisector_definition_v0_r on G, D, G, H we get Line(D, H) == internal_angle_bisector(G, H, G)
By reverse_direction on center(d), D we get 180 == direction(center(d), D) - direction(D, center(d)) mod 360
By concyclic_definition_1 on B, F, D, E we get Circle(B, D, F) == Circle(D, E, F)
By concyclic_definition_1 on B, H, F, E we get Circle(B, F, H) == Circle(E, F, H)
By internal_angle_bisector_definition_v0_r on D, G, D, H we get Line(G, H) == internal_angle_bisector(D, H, D)
By internal_angle_bisector_definition_v0_r on D, H, D, G we get Line(G, H) == internal_angle_bisector(D, G, D)
By concyclic_definition_0 on E, C, A, F we get F in Circle(A, C, E)
By concyclic_definition_0 on D, B, E, F we get F in Circle(B, D, E)
By internal_angle_bisector_definition_v0_r on G, H, G, D we get Line(D, H) == internal_angle_bisector(G, D, G)
By reverse_direction on center(d), F we get 180 == direction(center(d), F) - direction(F, center(d)) mod 360
By concyclic_definition_1 on D, E, F, B we get Circle(B, E, F) == Circle(D, E, F)
By reverse_direction on center(d), H we get 180 == direction(center(d), H) - direction(H, center(d)) mod 360
By reverse_direction on center(d), E we get 180 == direction(center(d), E) - direction(E, center(d)) mod 360
By internal_angle_bisector_definition_v0_r on H, D, H, G we get Line(D, G) == internal_angle_bisector(H, G, H)
By isosceles_triangle_properties on center(d), D, E we get distance(D, center(d)) == distance(E, center(d)), angle(D, E, center(d)) == angle(center(d), D, E) mod 360
By isosceles_triangle_properties on center(d), F, D we get distance(D, center(d)) == distance(F, center(d)), angle(F, D, center(d)) == angle(center(d), F, D) mod 360
By concyclic_definition_1 on F, B, H, E we get Circle(B, E, H) == Circle(B, F, H)
By concyclic_definition_1 on D, B, E, F we get Circle(B, D, E) == Circle(B, E, F)
By concyclic_definition_1 on F, B, E, H we get Circle(B, E, F) == Circle(B, E, H)
By concyclic_definition_1 on H, F, B, E we get Circle(B, E, F) == Circle(B, F, H)
By concyclic_definition_1 on E, F, B, D we get Circle(B, D, F) == Circle(B, E, F)
By concyclic_definition_1 on E, F, A, C we get Circle(A, C, F) == Circle(A, E, F)
By concyclic_definition_1 on C, A, E, F we get Circle(A, C, E) == Circle(A, E, F)
By concyclic_definition_1 on A, E, F, C we get Circle(A, E, F) == Circle(C, E, F)
By isosceles_triangle_properties on center(d), E, H we get distance(E, center(d)) == distance(H, center(d)), angle(E, H, center(d)) == angle(center(d), E, H) mod 360
By concyclic_definition_1 on F, B, D, E we get Circle(B, D, E) == Circle(B, D, F)
By isosceles_triangle_properties on center(d), H, D we get distance(D, center(d)) == distance(H, center(d)), angle(H, D, center(d)) == angle(center(d), H, D) mod 360
By isosceles_triangle_properties on center(d), E, F we get distance(E, center(d)) == distance(F, center(d)), angle(E, F, center(d)) == angle(center(d), E, F) mod 360
By concyclic_definition_1 on F, E, C, A we get Circle(A, C, E) == Circle(C, E, F)
By isosceles_triangle_properties on center(d), H, F we get distance(F, center(d)) == distance(H, center(d)), angle(H, F, center(d)) == angle(center(d), H, F) mod 360
By concyclic_definition_1 on E, C, A, F we get Circle(A, C, E) == Circle(A, C, F)
By isosceles_triangle_properties on center(d), F, H we get distance(F, center(d)) == distance(H, center(d)), angle(F, H, center(d)) == angle(center(d), F, H) mod 360
By isosceles_triangle_properties on center(d), E, D we get distance(D, center(d)) == distance(E, center(d)), angle(E, D, center(d)) == angle(center(d), E, D) mod 360
By isosceles_triangle_properties on center(d), D, F we get distance(D, center(d)) == distance(F, center(d)), angle(D, F, center(d)) == angle(center(d), D, F) mod 360
By isosceles_triangle_properties on center(d), H, E we get distance(E, center(d)) == distance(H, center(d)), angle(H, E, center(d)) == angle(center(d), H, E) mod 360
By concyclic_definition_1 on E, F, C, A we get Circle(A, C, F) == Circle(C, E, F)
By isosceles_triangle_properties on center(d), F, E we get distance(E, center(d)) == distance(F, center(d)), angle(F, E, center(d)) == angle(center(d), F, E) mod 360
By isosceles_triangle_properties on center(d), D, H we get distance(D, center(d)) == distance(H, center(d)), angle(D, H, center(d)) == angle(center(d), D, H) mod 360
By perpendicular_bisector_sufficient_conditions on B, A, F, E we get Line(E, F) == perpendicular_bisector(A, B)
By perpendicular_bisector_sufficient_conditions on C, D, F, E we get Line(E, F) == perpendicular_bisector(C, D)
By power_of_a_point_definition on G, D, H, d we get log(power_of_a_point(G, d)) == log(distance(D, G)) + log(distance(G, H))
By radical_axis_of_intersecting_circles_v0 on B, D, c, d we get Line(B, D) == radical_axis(c, d)
By circle_intersection_is_on_radical_axis on B, c, d we get B in radical_axis(c, d)
By angles_on_chord_v0 on D, E, B, F, d we get angle(D, B, E) == angle(D, F, E) mod 360
By angles_on_chord_v1 on H, B, F, D, d we get angle(H, D, B) == angle(H, F, B) mod 360
By angles_on_chord_v3 on E, B, F, D, d we get angle(E, F, B) == angle(E, D, B) + 180 mod 360
By angles_on_chord_v0 on B, H, E, F, d we get angle(B, E, H) == angle(B, F, H) mod 360
By angles_on_chord_v2 on B, E, F, D, d we get angle(B, F, E) == angle(B, D, E) + 180 mod 360
By angles_on_chord_v1 on H, B, E, D, d we get angle(H, D, B) == angle(H, E, B) mod 360
By angles_on_chord_v1 on E, D, H, B, d we get angle(E, B, D) == angle(E, H, D) mod 360
By angles_on_chord_v3 on D, F, E, B, d we get angle(D, E, F) == angle(D, B, F) + 180 mod 360
By angles_on_chord_v0 on A, F, E, C, Circle(A, C, E) we get angle(A, C, F) == angle(A, E, F) mod 360
By angles_on_chord_v2 on C, F, E, A, Circle(A, C, E) we get angle(C, E, F) == angle(C, A, F) + 180 mod 360
By angles_on_chord_v2 on E, B, D, F, d we get angle(E, D, B) == angle(E, F, B) + 180 mod 360
By angles_on_chord_v1 on C, E, F, A, Circle(A, C, E) we get angle(C, A, E) == angle(C, F, E) mod 360
By angles_on_chord_v0 on D, F, B, H, d we get angle(D, B, F) == angle(D, H, F) mod 360
By angles_on_chord_v0 on B, H, D, F, d we get angle(B, D, H) == angle(B, F, H) mod 360
By angles_on_chord_v1 on F, D, B, H, d we get angle(F, B, D) == angle(F, H, D) mod 360
By angles_on_chord_v1 on F, A, E, C, Circle(A, C, E) we get angle(F, C, A) == angle(F, E, A) mod 360
By angles_on_chord_v3 on B, E, D, F, d we get angle(B, D, E) == angle(B, F, E) + 180 mod 360
By angles_on_chord_v0 on E, C, F, A, Circle(A, C, E) we get angle(E, A, C) == angle(E, F, C) mod 360
By angles_on_chord_v2 on F, D, E, B, d we get angle(F, E, D) == angle(F, B, D) + 180 mod 360
By angles_on_chord_v0 on F, B, D, E, d we get angle(F, D, B) == angle(F, E, B) mod 360
By angles_on_chord_v3 on F, D, B, E, d we get angle(F, B, D) == angle(F, E, D) + 180 mod 360
By angles_on_chord_v3 on F, C, E, A, Circle(A, C, E) we get angle(F, E, C) == angle(F, A, C) + 180 mod 360
By angles_on_chord_v2 on E, A, F, C, Circle(A, C, E) we get angle(E, F, A) == angle(E, C, A) + 180 mod 360
By angles_on_chord_v1 on H, B, E, F, d we get angle(H, E, B) == angle(H, F, B) mod 360
By angles_on_chord_v1 on E, D, B, F, d we get angle(E, B, D) == angle(E, F, D) mod 360
By angles_on_chord_v3 on C, F, A, E, Circle(A, C, E) we get angle(C, A, F) == angle(C, E, F) + 180 mod 360
By angles_on_chord_v0 on B, H, E, D, d we get angle(B, D, H) == angle(B, E, H) mod 360
By angles_on_chord_v2 on F, C, A, E, Circle(A, C, E) we get angle(F, A, C) == angle(F, E, C) + 180 mod 360
By angles_on_chord_v0 on D, E, H, B, d we get angle(D, B, E) == angle(D, H, E) mod 360
By angles_on_chord_v1 on B, F, D, E, d we get angle(B, D, F) == angle(B, E, F) mod 360
By angles_on_chord_v2 on A, E, C, F, Circle(A, C, E) we get angle(A, C, E) == angle(A, F, E) + 180 mod 360
By angles_on_chord_v3 on E, A, C, F, Circle(A, C, E) we get angle(E, C, A) == angle(E, F, A) + 180 mod 360
By angles_on_chord_v2 on D, F, B, E, d we get angle(D, B, F) == angle(D, E, F) + 180 mod 360
By angles_on_chord_v3 on A, E, F, C, Circle(A, C, E) we get angle(A, F, E) == angle(A, C, E) + 180 mod 360
By perpendicular_line_definition on F, Line(E, F), h we get Line(E, F) == perpendicular_line(F, h)
By perpendicular_line_definition on F, Line(E, F), f we get Line(E, F) == perpendicular_line(F, f)
By perpendicular_line_definition on F, Line(F, center(d)), radical_axis(c, d) we get Line(F, center(d)) == perpendicular_line(F, radical_axis(c, d))
By circle_definition on H, B, D, d we get d == Circle(B, D, H)
By perpendicular_line_definition on E, Line(E, F), h we get Line(E, F) == perpendicular_line(E, h)
By median_definition on E, C, D, Line(E, F) we get Line(E, F) == median(E, C, D)
By median_definition on F, B, A, Line(E, F) we get Line(E, F) == median(F, A, B)
By perpendicular_line_definition on D, radical_axis(c, d), Line(F, center(d)) we get radical_axis(c, d) == perpendicular_line(D, Line(F, center(d)))
By perpendicular_line_definition on D, h, Line(E, F) we get h == perpendicular_line(D, Line(E, F))
By perpendicular_line_definition on midpoint(C, D), Line(E, F), f we get Line(E, F) == perpendicular_line(midpoint(C, D), f)
By perpendicular_line_definition on C, h, Line(E, F) we get h == perpendicular_line(C, Line(E, F))
By perpendicular_line_definition on midpoint(A, B), Line(E, F), h we get Line(E, F) == perpendicular_line(midpoint(A, B), h)
By median_definition on E, B, A, Line(E, F) we get Line(E, F) == median(E, A, B)
By median_definition on F, D, C, Line(E, F) we get Line(E, F) == median(F, C, D)
By perpendicular_line_definition on E, Line(E, F), f we get Line(E, F) == perpendicular_line(E, f)
By perpendicular_line_definition on center(d), Line(F, center(d)), radical_axis(c, d) we get Line(F, center(d)) == perpendicular_line(center(d), radical_axis(c, d))
By perpendicular_line_definition on A, f, Line(E, F) we get f == perpendicular_line(A, Line(E, F))
By perpendicular_line_definition on B, f, Line(E, F) we get f == perpendicular_line(B, Line(E, F))
By angles_on_chord_v1 on D, H, B, E, d we get angle(D, B, H) == angle(D, E, H) mod 360
By angles_on_chord_v3 on E, H, B, D, d we get angle(E, B, H) == angle(E, D, H) + 180 mod 360
By angles_on_chord_v3 on E, B, F, H, d we get angle(E, F, B) == angle(E, H, B) + 180 mod 360
By angles_on_chord_v3 on H, E, D, B, d we get angle(H, D, E) == angle(H, B, E) + 180 mod 360
By circle_radius_v0_r on B, d we get radius(d) == distance(B, center(d))
By angles_on_chord_v2 on B, D, E, H, d we get angle(B, E, D) == angle(B, H, D) + 180 mod 360
By angles_on_chord_v3 on H, F, E, B, d we get angle(H, E, F) == angle(H, B, F) + 180 mod 360
By angles_on_chord_v0 on H, E, F, B, d we get angle(H, B, E) == angle(H, F, E) mod 360
By angles_on_chord_v1 on B, F, E, H, d we get angle(B, E, F) == angle(B, H, F) mod 360
By angles_on_chord_v1 on D, H, B, F, d we get angle(D, B, H) == angle(D, F, H) mod 360
By angles_on_chord_v1 on B, F, D, H, d we get angle(B, D, F) == angle(B, H, F) mod 360
By angles_on_chord_v3 on F, H, B, D, d we get angle(F, B, H) == angle(F, D, H) + 180 mod 360
By angles_on_chord_v2 on H, F, B, E, d we get angle(H, B, F) == angle(H, E, F) + 180 mod 360
By angles_on_chord_v1 on B, E, D, H, d we get angle(B, D, E) == angle(B, H, E) mod 360
By angle_to_center on B, D, E, d we get 2 * angle(B, D, E) == angle(B, center(d), E) mod 360
By angles_on_chord_v2 on H, F, B, D, d we get angle(H, B, F) == angle(H, D, F) + 180 mod 360
By angles_on_chord_v0 on E, B, H, D, d we get angle(E, D, B) == angle(E, H, B) mod 360
By angles_on_chord_v0 on H, D, B, E, d we get angle(H, B, D) == angle(H, E, D) mod 360
By angles_on_chord_v2 on E, B, H, F, d we get angle(E, H, B) == angle(E, F, B) + 180 mod 360
By angle_to_center on E, B, H, d we get 2 * angle(E, B, H) == angle(E, center(d), H) mod 360
By angles_on_chord_v2 on F, H, D, B, d we get angle(F, D, H) == angle(F, B, H) + 180 mod 360
By angles_on_chord_v2 on D, B, H, E, d we get angle(D, H, B) == angle(D, E, B) + 180 mod 360
By angles_on_chord_v0 on H, D, B, F, d we get angle(H, B, D) == angle(H, F, D) mod 360
By angles_on_chord_v2 on B, D, F, H, d we get angle(B, F, D) == angle(B, H, D) + 180 mod 360
By angles_on_chord_v3 on D, B, F, H, d we get angle(D, F, B) == angle(D, H, B) + 180 mod 360
By angles_on_chord_v2 on E, H, D, B, d we get angle(E, D, H) == angle(E, B, H) + 180 mod 360
By angle_to_center on E, F, B, d we get 2 * angle(E, F, B) == angle(E, center(d), B) mod 360
By angles_on_chord_v1 on E, H, B, F, d we get angle(E, B, H) == angle(E, F, H) mod 360
By angle_to_center on F, E, B, d we get 2 * angle(F, E, B) == angle(F, center(d), B) mod 360
By angles_on_chord_v3 on B, D, H, F, d we get angle(B, H, D) == angle(B, F, D) + 180 mod 360
By angles_on_chord_v3 on B, E, H, F, d we get angle(B, H, E) == angle(B, F, E) + 180 mod 360
By angles_on_chord_v3 on H, F, D, B, d we get angle(H, D, F) == angle(H, B, F) + 180 mod 360
By angle_to_center on D, E, B, d we get 2 * angle(D, E, B) == angle(D, center(d), B) mod 360
By angles_on_chord_v0 on F, B, H, E, d we get angle(F, E, B) == angle(F, H, B) mod 360
By angles_on_chord_v3 on B, D, H, E, d we get angle(B, H, D) == angle(B, E, D) + 180 mod 360
By angles_on_chord_v2 on H, E, B, D, d we get angle(H, B, E) == angle(H, D, E) + 180 mod 360
By angles_on_chord_v2 on B, E, F, H, d we get angle(B, F, E) == angle(B, H, E) + 180 mod 360
By angle_to_center on H, B, F, d we get 2 * angle(H, B, F) == angle(H, center(d), F) mod 360
By angles_on_chord_v0 on F, B, H, D, d we get angle(F, D, B) == angle(F, H, B) mod 360
By angles_on_chord_v3 on D, B, E, H, d we get angle(D, E, B) == angle(D, H, B) + 180 mod 360
By angle_to_center on B, E, H, d we get 2 * angle(B, E, H) == angle(B, center(d), H) mod 360
By angle_to_center on D, F, B, d we get 2 * angle(D, F, B) == angle(D, center(d), B) mod 360
By angles_on_chord_v3 on F, H, B, E, d we get angle(F, B, H) == angle(F, E, H) + 180 mod 360
By angle_to_center on B, D, F, d we get 2 * angle(B, D, F) == angle(B, center(d), F) mod 360
By angles_on_chord_v2 on D, B, H, F, d we get angle(D, H, B) == angle(D, F, B) + 180 mod 360
By angles_on_chord_v2 on F, H, E, B, d we get angle(F, E, H) == angle(F, B, H) + 180 mod 360
By angle_to_center on H, D, B, d we get 2 * angle(H, D, B) == angle(H, center(d), B) mod 360
By angle_to_center on B, E, F, d we get 2 * angle(B, E, F) == angle(B, center(d), F) mod 360
By angle_to_center on H, E, B, d we get 2 * angle(H, E, B) == angle(H, center(d), B) mod 360
By angle_to_center on B, D, H, d we get 2 * angle(B, D, H) == angle(B, center(d), H) mod 360
By angle_to_center on H, F, B, d we get 2 * angle(H, F, B) == angle(H, center(d), B) mod 360
By angle_to_center on D, B, H, d we get 2 * angle(D, B, H) == angle(D, center(d), H) mod 360
By angle_to_center on F, D, B, d we get 2 * angle(F, D, B) == angle(F, center(d), B) mod 360
By angle_to_center on F, B, H, d we get 2 * angle(F, B, H) == angle(F, center(d), H) mod 360
By angle_to_center on B, E, D, d we get 2 * angle(B, E, D) == angle(B, center(d), D) mod 360
By perpendicular_direction_conditions_v0 on center(d), E, A, G we get perpendicular(Line(A, G), Line(E, center(d)))
By angle_to_center on B, F, D, d we get 2 * angle(B, F, D) == angle(B, center(d), D) mod 360
By angle_to_center on B, F, H, d we get 2 * angle(B, F, H) == angle(B, center(d), H) mod 360
By angle_to_center on E, D, B, d we get 2 * angle(E, D, B) == angle(E, center(d), B) mod 360
By angle_to_center on H, B, E, d we get 2 * angle(H, B, E) == angle(H, center(d), E) mod 360
By angle_to_center on H, B, D, d we get 2 * angle(H, B, D) == angle(H, center(d), D) mod 360
By angle_to_center on B, F, E, d we get 2 * angle(B, F, E) == angle(B, center(d), E) mod 360
By perpendicular_direction_conditions_v0 on C, A, center(d), E we get perpendicular(Line(A, C), Line(E, center(d)))
By perpendicular_direction_conditions_v0 on C, G, center(d), E we get perpendicular(Line(C, G), Line(E, center(d)))
By perpendicular_direction_conditions_v0 on D, B, F, center(d) we get perpendicular(Line(B, D), Line(F, center(d)))
By between_imply_not_between on B, midpoint(A, B), A we get collinear_and_not_between(A, B, midpoint(A, B))
By between_imply_not_between on C, midpoint(C, D), D we get collinear_and_not_between(D, C, midpoint(C, D))
By between_imply_not_between on A, midpoint(A, B), B we get collinear_and_not_between(B, A, midpoint(A, B))
By between_imply_not_between on D, midpoint(C, D), C we get collinear_and_not_between(C, D, midpoint(C, D))
By angle_to_center on B, H, F, d we get 2 * angle(B, H, F) == angle(B, center(d), F) mod 360
By angle_to_center on B, H, D, d we get 2 * angle(B, H, D) == angle(B, center(d), D) mod 360
By angle_to_center on F, H, B, d we get 2 * angle(F, H, B) == angle(F, center(d), B) mod 360
By angle_to_center on D, H, B, d we get 2 * angle(D, H, B) == angle(D, center(d), B) mod 360
By angle_to_center on B, H, E, d we get 2 * angle(B, H, E) == angle(B, center(d), E) mod 360
By angle_to_center on E, H, B, d we get 2 * angle(E, H, B) == angle(E, center(d), B) mod 360
By divide_by_2_mod_180_v3 on G, C, F, A, E, F we get angle(G, C, F) == angle(A, E, F) + 180 mod 360
By divide_by_2_mod_180_v1 on E, H, G, C, A, D we get angle(C, A, D) == angle(E, H, G) mod 360
By divide_by_2_mod_180_v2 on A, D, B, A, F, E we get angle(A, D, B) == angle(A, F, E) + 180 mod 360
By in_imply_collinear on midpoint(A, B), F, E we get collinear(E, F, midpoint(A, B))
By divide_by_2_mod_180_v0 on D, B, E, G, H, E we get angle(D, B, E) == angle(G, H, E) mod 360
By divide_by_2_mod_180_v0 on G, H, F, F, A, G we get angle(F, A, G) == angle(G, H, F) mod 360
By divide_by_2_mod_180_v2 on E, F, A, B, D, A we get angle(E, F, A) == angle(B, D, A) + 180 mod 360
By divide_by_2_mod_180_v3 on F, C, A, F, E, D we get angle(F, C, A) == angle(F, E, D) + 180 mod 360
By divide_by_2_mod_180_v1 on G, C, F, D, E, F we get angle(D, E, F) == angle(G, C, F) mod 360
By divide_by_2_mod_180_v1 on E, F, B, G, C, B we get angle(E, F, B) == angle(G, C, B) mod 360
By in_imply_collinear on midpoint(C, D), F, E we get collinear(E, F, midpoint(C, D))
By divide_by_2_mod_180_v0 on A, E, F, F, A, C we get angle(A, E, F) == angle(F, A, C) mod 360
By divide_by_2_mod_180_v3 on E, F, B, A, D, B we get angle(E, F, B) == angle(A, D, B) + 180 mod 360
By divide_by_2_mod_180_v3 on E, F, B, A, C, B we get angle(E, F, B) == angle(A, C, B) + 180 mod 360
By divide_by_2_mod_180_v2 on C, E, F, F, C, A we get angle(C, E, F) == angle(F, C, A) + 180 mod 360
By divide_by_2_mod_180_v0 on E, F, C, D, B, C we get angle(D, B, C) == angle(E, F, C) mod 360
By divide_by_2_mod_180_v1 on A, F, E, G, C, B we get angle(A, F, E) == angle(G, C, B) mod 360
By divide_by_2_mod_180_v2 on B, F, E, E, C, A we get angle(B, F, E) == angle(E, C, A) + 180 mod 360
By divide_by_2_mod_180_v3 on F, H, D, F, C, G we get angle(F, H, D) == angle(F, C, G) + 180 mod 360
By divide_by_2_mod_180_v1 on F, H, D, B, D, F we get angle(B, D, F) == angle(F, H, D) mod 360
By divide_by_2_mod_180_v2 on C, E, F, F, B, D we get angle(C, E, F) == angle(F, B, D) + 180 mod 360
By divide_by_2_mod_180_v3 on B, D, F, C, E, F we get angle(B, D, F) == angle(C, E, F) + 180 mod 360
By divide_by_2_mod_180_v1 on E, B, D, E, H, G we get angle(E, B, D) == angle(E, H, G) mod 360
By divide_by_2_mod_180_v2 on F, C, G, B, E, F we get angle(F, C, G) == angle(B, E, F) + 180 mod 360
By divide_by_2_mod_180_v3 on G, A, F, C, E, F we get angle(G, A, F) == angle(C, E, F) + 180 mod 360
By divide_by_2_mod_180_v0 on D, A, G, E, F, C we get angle(D, A, G) == angle(E, F, C) mod 360
By divide_by_2_mod_180_v1 on B, E, F, G, A, F we get angle(B, E, F) == angle(G, A, F) mod 360
By divide_by_2_mod_180_v1 on C, A, D, E, F, D we get angle(C, A, D) == angle(E, F, D) mod 360
By divide_by_2_mod_180_v0 on G, H, E, E, A, G we get angle(E, A, G) == angle(G, H, E) mod 360
By divide_by_2_mod_180_v0 on D, B, C, D, H, E we get angle(D, B, C) == angle(D, H, E) mod 360
By divide_by_2_mod_180_v3 on G, A, F, F, E, D we get angle(G, A, F) == angle(F, E, D) + 180 mod 360
By divide_by_2_mod_180_v1 on G, A, F, F, E, A we get angle(F, E, A) == angle(G, A, F) mod 360
By divide_by_2_mod_180_v1 on E, F, B, G, C, E we get angle(E, F, B) == angle(G, C, E) mod 360
By divide_by_2_mod_180_v1 on G, A, E, E, H, G we get angle(E, H, G) == angle(G, A, E) mod 360
By divide_by_2_mod_180_v0 on D, B, E, E, F, C we get angle(D, B, E) == angle(E, F, C) mod 360
By divide_by_2_mod_180_v3 on E, F, B, A, C, E we get angle(E, F, B) == angle(A, C, E) + 180 mod 360
By divide_by_2_mod_180_v0 on E, F, A, B, C, G we get angle(B, C, G) == angle(E, F, A) mod 360
By divide_by_2_mod_180_v0 on G, H, F, F, A, C we get angle(F, A, C) == angle(G, H, F) mod 360
By divide_by_2_mod_180_v1 on C, F, E, C, A, D we get angle(C, A, D) == angle(C, F, E) mod 360
By in_imply_concyclic on H, F, B, D we get concyclic(B, D, F, H)
By divide_by_2_mod_180_v1 on G, A, E, E, H, D we get angle(E, H, D) == angle(G, A, E) mod 360
By divide_by_2_mod_180_v2 on A, C, F, D, E, F we get angle(A, C, F) == angle(D, E, F) + 180 mod 360
By divide_by_2_mod_180_v1 on E, H, G, C, B, D we get angle(C, B, D) == angle(E, H, G) mod 360
By divide_by_2_mod_180_v0 on D, A, G, D, H, E we get angle(D, A, G) == angle(D, H, E) mod 360
By divide_by_2_mod_180_v0 on G, H, E, D, B, C we get angle(D, B, C) == angle(G, H, E) mod 360
By divide_by_2_mod_180_v1 on F, E, C, G, C, F we get angle(F, E, C) == angle(G, C, F) mod 360
By divide_by_2_mod_180_v3 on H, E, B, G, D, B we get angle(H, E, B) == angle(G, D, B) + 180 mod 360
By divide_by_2_mod_180_v0 on G, H, F, D, B, F we get angle(D, B, F) == angle(G, H, F) mod 360
By divide_by_2_mod_180_v2 on F, A, G, F, E, C we get angle(F, A, G) == angle(F, E, C) + 180 mod 360
By divide_by_2_mod_180_v3 on B, E, F, F, C, G we get angle(B, E, F) == angle(F, C, G) + 180 mod 360
By divide_by_2_mod_180_v0 on D, F, E, D, A, G we get angle(D, A, G) == angle(D, F, E) mod 360
By line_circle_intersection_has_at_most_two_points_0 on E, A, D, Circle(A, C, E) we get D not in Circle(A, C, E)
By divide_by_2_mod_180_v0 on F, E, B, A, C, F we get angle(A, C, F) == angle(F, E, B) mod 360
By divide_by_2_mod_180_v2 on A, E, F, G, C, F we get angle(A, E, F) == angle(G, C, F) + 180 mod 360
By divide_by_2_mod_180_v3 on A, F, E, E, D, B we get angle(A, F, E) == angle(E, D, B) + 180 mod 360
By divide_by_2_mod_180_v0 on D, A, C, E, F, C we get angle(D, A, C) == angle(E, F, C) mod 360
By divide_by_2_mod_180_v1 on F, H, D, F, C, A we get angle(F, C, A) == angle(F, H, D) mod 360
By divide_by_2_mod_180_v0 on D, B, F, F, E, B we get angle(D, B, F) == angle(F, E, B) mod 360
By divide_by_2_mod_180_v2 on G, H, F, G, C, F we get angle(G, H, F) == angle(G, C, F) + 180 mod 360
By divide_by_2_mod_180_v2 on E, D, B, A, F, E we get angle(E, D, B) == angle(A, F, E) + 180 mod 360
By divide_by_2_mod_180_v0 on F, C, G, F, E, D we get angle(F, C, G) == angle(F, E, D) mod 360
By divide_by_2_mod_180_v1 on F, H, G, F, B, D we get angle(F, B, D) == angle(F, H, G) mod 360
By divide_by_2_mod_180_v0 on D, A, C, D, F, E we get angle(D, A, C) == angle(D, F, E) mod 360
By divide_by_2_mod_180_v3 on H, D, B, H, E, C we get angle(H, D, B) == angle(H, E, C) + 180 mod 360
By divide_by_2_mod_180_v1 on E, F, D, G, A, E we get angle(E, F, D) == angle(G, A, E) mod 360
By divide_by_2_mod_180_v0 on D, A, G, G, H, E we get angle(D, A, G) == angle(G, H, E) mod 360
By divide_by_2_mod_180_v1 on F, E, A, F, B, D we get angle(F, B, D) == angle(F, E, A) mod 360
By divide_by_2_mod_180_v1 on G, A, F, F, H, D we get angle(F, H, D) == angle(G, A, F) mod 360
By divide_by_2_mod_180_v2 on F, E, B, G, C, F we get angle(F, E, B) == angle(G, C, F) + 180 mod 360
By divide_by_2_mod_180_v3 on F, H, G, F, C, G we get angle(F, H, G) == angle(F, C, G) + 180 mod 360
By divide_by_2_mod_180_v1 on G, A, E, C, F, E we get angle(C, F, E) == angle(G, A, E) mod 360
By divide_by_2_mod_180_v1 on G, A, D, E, F, D we get angle(E, F, D) == angle(G, A, D) mod 360
By divide_by_2_mod_180_v0 on E, A, C, G, H, E we get angle(E, A, C) == angle(G, H, E) mod 360
By divide_by_2_mod_180_v3 on B, D, A, E, F, A we get angle(B, D, A) == angle(E, F, A) + 180 mod 360
By divide_by_2_mod_180_v1 on B, D, F, F, H, G we get angle(B, D, F) == angle(F, H, G) mod 360
By divide_by_2_mod_180_v1 on C, B, D, E, F, D we get angle(C, B, D) == angle(E, F, D) mod 360
By divide_by_2_mod_180_v0 on D, H, F, F, A, C we get angle(D, H, F) == angle(F, A, C) mod 360
By divide_by_2_mod_180_v0 on D, H, F, F, D, B we get angle(D, H, F) == angle(F, D, B) mod 360
By divide_by_2_mod_180_v3 on F, E, C, F, A, G we get angle(F, E, C) == angle(F, A, G) + 180 mod 360
By divide_by_2_mod_180_v1 on C, A, E, E, H, G we get angle(C, A, E) == angle(E, H, G) mod 360
By divide_by_2_mod_180_v1 on F, H, G, F, C, A we get angle(F, C, A) == angle(F, H, G) mod 360
By divide_by_2_mod_180_v3 on F, C, A, C, E, F we get angle(F, C, A) == angle(C, E, F) + 180 mod 360
By divide_by_2_mod_180_v0 on E, A, C, D, H, E we get angle(D, H, E) == angle(E, A, C) mod 360
By divide_by_2_mod_180_v3 on A, F, E, A, C, B we get angle(A, F, E) == angle(A, C, B) + 180 mod 360
By divide_by_2_mod_180_v2 on A, D, B, E, F, B we get angle(A, D, B) == angle(E, F, B) + 180 mod 360
By divide_by_2_mod_180_v1 on A, F, E, G, C, E we get angle(A, F, E) == angle(G, C, E) mod 360
By divide_by_2_mod_180_v1 on B, E, F, F, C, A we get angle(B, E, F) == angle(F, C, A) mod 360
By divide_by_2_mod_180_v1 on G, A, D, E, H, D we get angle(E, H, D) == angle(G, A, D) mod 360
By point_on_perpendicular_bisector on C, D, midpoint(A, B), Line(E, F) we get distance(C, midpoint(A, B)) == distance(D, midpoint(A, B))
By divide_by_2_mod_180_v1 on C, A, F, F, E, A we get angle(C, A, F) == angle(F, E, A) mod 360
By in_imply_concyclic on E, B, H, D we get concyclic(B, D, E, H)
By divide_by_2_mod_180_v1 on E, B, D, C, F, E we get angle(C, F, E) == angle(E, B, D) mod 360
By divide_by_2_mod_180_v2 on A, C, B, E, F, B we get angle(A, C, B) == angle(E, F, B) + 180 mod 360
By divide_by_2_mod_180_v3 on D, E, F, F, D, B we get angle(D, E, F) == angle(F, D, B) + 180 mod 360
By divide_by_2_mod_180_v0 on D, A, C, D, H, E we get angle(D, A, C) == angle(D, H, E) mod 360
By divide_by_2_mod_180_v0 on E, A, G, D, F, E we get angle(D, F, E) == angle(E, A, G) mod 360
By divide_by_2_mod_180_v1 on F, B, D, B, E, F we get angle(B, E, F) == angle(F, B, D) mod 360
By divide_by_2_mod_180_v3 on F, B, D, C, E, F we get angle(F, B, D) == angle(C, E, F) + 180 mod 360
By divide_by_2_mod_180_v2 on C, E, F, B, D, F we get angle(C, E, F) == angle(B, D, F) + 180 mod 360
By divide_by_2_mod_180_v2 on B, D, H, C, E, H we get angle(B, D, H) == angle(C, E, H) + 180 mod 360
By divide_by_2_mod_180_v2 on B, E, H, B, D, G we get angle(B, E, H) == angle(B, D, G) + 180 mod 360
By divide_by_2_mod_180_v2 on D, H, F, G, C, F we get angle(D, H, F) == angle(G, C, F) + 180 mod 360
By divide_by_2_mod_180_v0 on G, D, B, H, E, C we get angle(G, D, B) == angle(H, E, C) mod 360
By divide_by_2_mod_180_v0 on D, F, E, D, B, C we get angle(D, B, C) == angle(D, F, E) mod 360
By divide_by_2_mod_180_v1 on C, A, F, F, H, G we get angle(C, A, F) == angle(F, H, G) mod 360
By divide_by_2_mod_180_v3 on G, C, F, G, H, F we get angle(G, C, F) == angle(G, H, F) + 180 mod 360
By divide_by_2_mod_180_v0 on F, C, G, C, E, F we get angle(C, E, F) == angle(F, C, G) mod 360
By divide_by_2_mod_180_v0 on F, E, B, F, A, G we get angle(F, A, G) == angle(F, E, B) mod 360
By divide_by_2_mod_180_v0 on F, D, B, G, H, F we get angle(F, D, B) == angle(G, H, F) mod 360
By divide_by_2_mod_180_v2 on B, F, E, B, D, A we get angle(B, F, E) == angle(B, D, A) + 180 mod 360
By divide_by_2_mod_180_v1 on C, F, E, G, A, D we get angle(C, F, E) == angle(G, A, D) mod 360
By divide_by_2_mod_180_v1 on E, F, D, C, A, E we get angle(C, A, E) == angle(E, F, D) mod 360
By divide_by_2_mod_180_v1 on C, A, F, B, E, F we get angle(B, E, F) == angle(C, A, F) mod 360
By divide_by_2_mod_180_v0 on D, H, F, F, A, G we get angle(D, H, F) == angle(F, A, G) mod 360
By divide_by_2_mod_180_v1 on F, H, G, G, A, F we get angle(F, H, G) == angle(G, A, F) mod 360
By divide_by_2_mod_180_v0 on D, H, F, A, C, F we get angle(A, C, F) == angle(D, H, F) mod 360
By divide_by_2_mod_180_v3 on D, E, F, A, C, F we get angle(D, E, F) == angle(A, C, F) + 180 mod 360
By divide_by_2_mod_180_v2 on F, E, D, F, C, A we get angle(F, E, D) == angle(F, C, A) + 180 mod 360
By divide_by_2_mod_180_v1 on G, A, D, E, H, G we get angle(E, H, G) == angle(G, A, D) mod 360
By divide_by_2_mod_180_v2 on F, D, B, D, E, F we get angle(F, D, B) == angle(D, E, F) + 180 mod 360
By divide_by_2_mod_180_v3 on A, F, E, A, D, B we get angle(A, F, E) == angle(A, D, B) + 180 mod 360
By divide_by_2_mod_180_v0 on A, E, F, F, A, G we get angle(A, E, F) == angle(F, A, G) mod 360
By divide_by_2_mod_180_v1 on C, E, H, B, D, G we get angle(B, D, G) == angle(C, E, H) mod 360
By divide_by_2_mod_180_v3 on D, E, F, F, A, G we get angle(D, E, F) == angle(F, A, G) + 180 mod 360
By divide_by_2_mod_180_v3 on F, E, A, F, C, G we get angle(F, E, A) == angle(F, C, G) + 180 mod 360
By line_circle_intersection_has_at_most_two_points_0 on C, E, B, Circle(A, C, E) we get B not in Circle(A, C, E)
By divide_by_2_mod_180_v3 on D, E, F, F, A, C we get angle(D, E, F) == angle(F, A, C) + 180 mod 360
By divide_by_2_mod_180_v1 on C, A, F, F, H, D we get angle(C, A, F) == angle(F, H, D) mod 360
By divide_by_2_mod_180_v0 on E, C, G, B, F, E we get angle(B, F, E) == angle(E, C, G) mod 360
By divide_by_2_mod_180_v2 on G, D, B, H, E, B we get angle(G, D, B) == angle(H, E, B) + 180 mod 360
By divide_by_2_mod_180_v0 on A, E, F, D, B, F we get angle(A, E, F) == angle(D, B, F) mod 360
By divide_by_2_mod_180_v1 on C, F, E, C, B, D we get angle(C, B, D) == angle(C, F, E) mod 360
By divide_by_2_mod_180_v1 on B, D, F, F, E, A we get angle(B, D, F) == angle(F, E, A) mod 360
By divide_by_2_mod_180_v0 on B, C, G, B, F, E we get angle(B, C, G) == angle(B, F, E) mod 360
By divide_by_2_mod_180_v0 on E, A, G, D, H, E we get angle(D, H, E) == angle(E, A, G) mod 360
By divide_by_2_mod_180_v2 on F, A, G, D, E, F we get angle(F, A, G) == angle(D, E, F) + 180 mod 360
By divide_by_2_mod_180_v2 on F, E, D, G, A, F we get angle(F, E, D) == angle(G, A, F) + 180 mod 360
By divide_by_2_mod_180_v0 on D, A, C, G, H, E we get angle(D, A, C) == angle(G, H, E) mod 360
By divide_by_2_mod_180_v3 on F, E, C, A, C, F we get angle(F, E, C) == angle(A, C, F) + 180 mod 360
By divide_by_2_mod_180_v2 on B, F, E, B, C, A we get angle(B, F, E) == angle(B, C, A) + 180 mod 360
By divide_by_2_mod_180_v1 on C, B, D, E, H, D we get angle(C, B, D) == angle(E, H, D) mod 360
By divide_by_2_mod_180_v3 on C, E, H, B, D, H we get angle(C, E, H) == angle(B, D, H) + 180 mod 360
By divide_by_2_mod_180_v3 on B, D, G, B, E, H we get angle(B, D, G) == angle(B, E, H) + 180 mod 360
By divide_by_2_mod_180_v2 on E, F, A, B, C, A we get angle(E, F, A) == angle(B, C, A) + 180 mod 360
By divide_by_2_mod_180_v3 on B, C, A, B, F, E we get angle(B, C, A) == angle(B, F, E) + 180 mod 360
By divide_by_2_mod_180_v0 on A, E, F, F, D, B we get angle(A, E, F) == angle(F, D, B) mod 360
By divide_by_2_mod_180_v3 on B, D, E, E, F, A we get angle(B, D, E) == angle(E, F, A) + 180 mod 360
By divide_by_2_mod_180_v3 on B, D, A, B, F, E we get angle(B, D, A) == angle(B, F, E) + 180 mod 360
By divide_by_2_mod_180_v0 on E, F, C, E, A, G we get angle(E, A, G) == angle(E, F, C) mod 360
By divide_by_2_mod_180_v2 on F, C, G, F, H, G we get angle(F, C, G) == angle(F, H, G) + 180 mod 360
By divide_by_2_mod_180_v2 on A, C, E, E, F, B we get angle(A, C, E) == angle(E, F, B) + 180 mod 360
By divide_by_2_mod_180_v3 on C, A, F, F, E, D we get angle(C, A, F) == angle(F, E, D) + 180 mod 360
By divide_by_2_mod_180_v3 on E, C, A, B, F, E we get angle(E, C, A) == angle(B, F, E) + 180 mod 360
By divide_by_2_mod_180_v3 on F, E, C, F, D, B we get angle(F, E, C) == angle(F, D, B) + 180 mod 360
By divide_by_2_mod_180_v0 on G, H, F, A, C, F we get angle(A, C, F) == angle(G, H, F) mod 360
By divide_by_2_mod_180_v2 on C, E, F, G, A, F we get angle(C, E, F) == angle(G, A, F) + 180 mod 360
By divide_by_2_mod_180_v3 on G, C, F, F, E, B we get angle(G, C, F) == angle(F, E, B) + 180 mod 360
By divide_by_2_mod_180_v0 on F, E, B, F, A, C we get angle(F, A, C) == angle(F, E, B) mod 360
By divide_by_2_mod_180_v1 on E, H, D, C, A, D we get angle(C, A, D) == angle(E, H, D) mod 360
By line_containment_inequality on midpoint(A, B), D, Line(E, F) we get D != midpoint(A, B)
By divide_by_2_mod_180_v2 on A, C, F, F, E, C we get angle(A, C, F) == angle(F, E, C) + 180 mod 360
By divide_by_2_mod_180_v3 on F, E, C, D, B, F we get angle(F, E, C) == angle(D, B, F) + 180 mod 360
By divide_by_2_mod_180_v2 on F, A, C, D, E, F we get angle(F, A, C) == angle(D, E, F) + 180 mod 360
By divide_by_2_mod_180_v2 on F, C, G, F, E, A we get angle(F, C, G) == angle(F, E, A) + 180 mod 360
By divide_by_2_mod_180_v2 on D, B, F, F, E, C we get angle(D, B, F) == angle(F, E, C) + 180 mod 360
By divide_by_2_mod_180_v2 on H, E, C, H, D, B we get angle(H, E, C) == angle(H, D, B) + 180 mod 360
By divide_by_2_mod_180_v1 on E, H, D, C, A, E we get angle(C, A, E) == angle(E, H, D) mod 360
By divide_by_2_mod_180_v3 on B, C, A, E, F, A we get angle(B, C, A) == angle(E, F, A) + 180 mod 360
By divide_by_2_mod_180_v2 on A, C, B, A, F, E we get angle(A, C, B) == angle(A, F, E) + 180 mod 360
By divide_by_2_mod_180_v2 on E, F, A, B, D, E we get angle(E, F, A) == angle(B, D, E) + 180 mod 360
By divide_by_2_mod_180_v0 on E, C, G, E, F, A we get angle(E, C, G) == angle(E, F, A) mod 360
By divide_by_2_mod_180_v2 on F, E, D, C, A, F we get angle(F, E, D) == angle(C, A, F) + 180 mod 360
By divide_by_2_mod_180_v2 on F, E, D, B, D, F we get angle(F, E, D) == angle(B, D, F) + 180 mod 360
By divide_by_2_mod_180_v2 on F, D, B, F, E, C we get angle(F, D, B) == angle(F, E, C) + 180 mod 360
By divide_by_2_mod_180_v2 on F, C, G, F, H, D we get angle(F, C, G) == angle(F, H, D) + 180 mod 360
By divide_by_2_mod_180_v3 on G, C, F, D, H, F we get angle(G, C, F) == angle(D, H, F) + 180 mod 360
By divide_by_2_mod_180_v0 on D, F, E, E, A, C we get angle(D, F, E) == angle(E, A, C) mod 360
By divide_by_2_mod_180_v3 on B, D, F, F, E, D we get angle(B, D, F) == angle(F, E, D) + 180 mod 360
By point_on_perpendicular_bisector on B, A, midpoint(C, D), Line(E, F) we get distance(A, midpoint(C, D)) == distance(B, midpoint(C, D))
By line_circle_intersection_has_at_most_two_points_0 on C, D, midpoint(C, D), c we get midpoint(C, D) not in c
By line_containment_inequality on midpoint(C, D), G, Line(E, F) we get G != midpoint(C, D)
By circle_circle_intersection_has_at_most_two_points_0 on B, D, H, d, c we get H not in c
By line_containment_inequality on midpoint(A, B), G, Line(E, F) we get G != midpoint(A, B)
By circle_circle_intersection_has_at_most_two_points_0 on B, D, C, c, d we get C not in d
By line_containment_inequality on midpoint(A, B), C, Line(E, F) we get C != midpoint(A, B)
By line_containment_inequality on midpoint(C, D), B, Line(E, F) we get B != midpoint(C, D)
By line_containment_inequality on midpoint(C, D), H, Line(E, F) we get H != midpoint(C, D)
By line_circle_intersection_has_at_most_two_points_0 on B, A, midpoint(A, B), c we get midpoint(A, B) not in c
By line_containment_inequality on midpoint(A, B), H, Line(E, F) we get H != midpoint(A, B)
By line_circle_intersection_has_at_most_two_points_0 on C, A, G, Circle(A, C, E) we get G not in Circle(A, C, E)
By line_containment_inequality on midpoint(C, D), A, Line(E, F) we get A != midpoint(C, D)
By external_angle_bisector_definition_v0_r on B, F, D, E we get Line(E, F) == external_angle_bisector(B, E, D)
By power_of_a_point_on_circle on B, d we get 0 == power_of_a_point(B, d)
By collinear_definition on A, B, midpoint(A, B) we get B in Line(A, midpoint(A, B)), midpoint(A, B) in Line(A, B), Line(A, B) == Line(A, midpoint(A, B)), 0 == 2 * angle(B, A, midpoint(A, B)) mod 360
By log_of_2_times_distance on C, D, midpoint(C, D), D we get log(distance(C, D)) == 0.6931471805599453 + log(distance(D, midpoint(C, D)))
By perpendicular_bisector_properties on D, C we get perpendicular(Line(C, D), perpendicular_bisector(C, D)), midpoint(C, D) == line_intersection(Line(C, D), perpendicular_bisector(C, D))
By internal_angle_bisector_definition_v0_r on A, F, B, E we get Line(E, F) == internal_angle_bisector(A, E, B)
By isosceles_triangle_midpoint on E, B, A we get midpoint(A, B) in median(E, A, B)
By log_of_2_times_distance on C, D, midpoint(C, D), C we get log(distance(C, D)) == 0.6931471805599453 + log(distance(C, midpoint(C, D)))
By power_of_a_point_in_circle on C, Circle(A, C, E) we get 0 == power_of_a_point(C, Circle(A, C, E))
By log_of_2_times_distance on A, B, A, midpoint(A, B) we get log(distance(A, B)) == 0.6931471805599453 + log(distance(A, midpoint(A, B)))
By isosceles_triangle_midpoint on F, D, C we get midpoint(C, D) in median(F, C, D)
By collinear_definition on C, D, midpoint(C, D) we get D in Line(C, midpoint(C, D)), midpoint(C, D) in Line(C, D), Line(C, D) == Line(C, midpoint(C, D)), 0 == 2 * angle(D, C, midpoint(C, D)) mod 360
By isosceles_triangle_midpoint on F, B, A we get midpoint(A, B) in median(F, A, B)
By external_angle_bisector_definition_v0_r on C, F, A, E we get Line(E, F) == external_angle_bisector(A, E, C)
By power_of_a_point_in_circle on E, Circle(A, C, E) we get 0 == power_of_a_point(E, Circle(A, C, E))
By log_of_2_times_distance on A, B, midpoint(A, B), B we get log(distance(A, B)) == 0.6931471805599453 + log(distance(B, midpoint(A, B)))
By power_of_a_point_on_circle on F, Circle(A, C, E) we get 0 == power_of_a_point(F, Circle(A, C, E))
By internal_angle_bisector_definition_v0_r on D, E, C, F we get Line(E, F) == internal_angle_bisector(C, F, D)
By internal_angle_bisector_definition_v0_r on B, E, A, F we get Line(E, F) == internal_angle_bisector(A, F, B)
By isosceles_triangle_midpoint on E, D, C we get midpoint(C, D) in median(E, C, D)
By collinear_definition on A, midpoint(A, B), B we get midpoint(A, B) in Line(A, B), B in Line(A, midpoint(A, B)), Line(A, B) == Line(A, midpoint(A, B)), 0 == 2 * angle(midpoint(A, B), A, B) mod 360
By power_of_a_point_in_circle on A, Circle(A, C, E) we get 0 == power_of_a_point(A, Circle(A, C, E))
By collinear_definition on C, midpoint(C, D), D we get midpoint(C, D) in Line(C, D), D in Line(C, midpoint(C, D)), Line(C, D) == Line(C, midpoint(C, D)), 0 == 2 * angle(midpoint(C, D), C, D) mod 360
By collinear_definition on D, midpoint(C, D), C we get midpoint(C, D) in Line(C, D), C in Line(D, midpoint(C, D)), Line(C, D) == Line(D, midpoint(C, D)), 0 == 2 * angle(midpoint(C, D), D, C) mod 360
By perpendicular_lines_draw_intersection on Line(F, center(d)), radical_axis(c, d) we get exists(line_intersection(Line(F, center(d)), radical_axis(c, d)))
By perpendicular_bisector_properties on B, A we get perpendicular(Line(A, B), perpendicular_bisector(A, B)), midpoint(A, B) == line_intersection(Line(A, B), perpendicular_bisector(A, B))
By internal_angle_bisector_definition_v0_r on D, F, C, E we get Line(E, F) == internal_angle_bisector(C, E, D)
By collinear_definition on D, C, midpoint(C, D) we get C in Line(D, midpoint(C, D)), midpoint(C, D) in Line(C, D), Line(C, D) == Line(D, midpoint(C, D)), 0 == 2 * angle(C, D, midpoint(C, D)) mod 360
By perpendicular_lines_draw_intersection on f, Line(E, F) we get exists(line_intersection(f, Line(E, F)))
By collinear_definition on B, A, midpoint(A, B) we get A in Line(B, midpoint(A, B)), midpoint(A, B) in Line(A, B), Line(A, B) == Line(B, midpoint(A, B)), 0 == 2 * angle(A, B, midpoint(A, B)) mod 360
By perpendicular_lines_draw_intersection on h, Line(E, F) we get exists(line_intersection(h, Line(E, F)))
By collinear_definition on B, midpoint(A, B), A we get midpoint(A, B) in Line(A, B), A in Line(B, midpoint(A, B)), Line(A, B) == Line(B, midpoint(A, B)), 0 == 2 * angle(midpoint(A, B), B, A) mod 360
By isosceles_triangle_altitude_v3 on midpoint(C, D), D, C we get identical(perpendicular_bisector(C, D), internal_angle_bisector(C, midpoint(C, D), D), perpendicular_line(midpoint(C, D), Line(C, D)))
By isosceles_triangle_altitude_v1 on midpoint(C, D), C, D we get identical(perpendicular_bisector(C, D), internal_angle_bisector(C, midpoint(C, D), D), perpendicular_line(midpoint(C, D), Line(C, D)))
By isosceles_triangle_altitude_v3 on midpoint(A, B), A, B we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, midpoint(A, B), B), perpendicular_line(midpoint(A, B), Line(A, B)))
By isosceles_triangle_altitude_v1 on midpoint(A, B), A, B we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, midpoint(A, B), B), perpendicular_line(midpoint(A, B), Line(A, B)))
By isosceles_triangle_altitude_v1 on midpoint(C, D), D, C we get identical(perpendicular_bisector(C, D), internal_angle_bisector(C, midpoint(C, D), D), perpendicular_line(midpoint(C, D), Line(C, D)))
By isosceles_triangle_altitude_v3 on midpoint(C, D), C, D we get identical(perpendicular_bisector(C, D), internal_angle_bisector(C, midpoint(C, D), D), perpendicular_line(midpoint(C, D), Line(C, D)))
By isosceles_triangle_altitude_v3 on midpoint(A, B), B, A we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, midpoint(A, B), B), perpendicular_line(midpoint(A, B), Line(A, B)))
By isosceles_triangle_altitude_v1 on midpoint(A, B), B, A we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, midpoint(A, B), B), perpendicular_line(midpoint(A, B), Line(A, B)))
By altitude_definition on F, A, B, Line(E, F) we get Line(E, F) == altitude(F, A, B)
By isosceles_triangle_altitude_v3 on F, B, A we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, F, B), perpendicular_line(F, Line(A, B)))
By altitude_definition on E, B, A, Line(E, F) we get Line(E, F) == altitude(E, A, B)
By altitude_definition on D, E, F, h we get h == altitude(D, E, F)
By isosceles_triangle_properties on midpoint(C, D), D, C we get distance(C, midpoint(C, D)) == distance(D, midpoint(C, D)), angle(D, C, midpoint(C, D)) == angle(midpoint(C, D), D, C) mod 360
By isosceles_triangle_properties on midpoint(C, D), C, D we get distance(C, midpoint(C, D)) == distance(D, midpoint(C, D)), angle(C, D, midpoint(C, D)) == angle(midpoint(C, D), C, D) mod 360
By collinear_definition on midpoint(C, D), D, C we get D in Line(C, midpoint(C, D)), C in Line(D, midpoint(C, D)), Line(C, midpoint(C, D)) == Line(D, midpoint(C, D)), 0 == 2 * angle(D, midpoint(C, D), C) mod 360
By collinear_definition on midpoint(A, B), A, B we get A in Line(B, midpoint(A, B)), B in Line(A, midpoint(A, B)), Line(A, midpoint(A, B)) == Line(B, midpoint(A, B)), 0 == 2 * angle(A, midpoint(A, B), B) mod 360
By collinear_definition on midpoint(A, B), B, A we get B in Line(A, midpoint(A, B)), A in Line(B, midpoint(A, B)), Line(A, midpoint(A, B)) == Line(B, midpoint(A, B)), 0 == 2 * angle(B, midpoint(A, B), A) mod 360
By altitude_definition on F, D, C, Line(E, F) we get Line(E, F) == altitude(F, C, D)
By isosceles_triangle_properties on midpoint(A, B), B, A we get distance(A, midpoint(A, B)) == distance(B, midpoint(A, B)), angle(B, A, midpoint(A, B)) == angle(midpoint(A, B), B, A) mod 360
By altitude_definition on E, C, D, Line(E, F) we get Line(E, F) == altitude(E, C, D)
By altitude_definition on C, F, E, h we get h == altitude(C, E, F)
By altitude_definition on B, F, E, f we get f == altitude(B, E, F)
By altitude_definition on A, E, F, f we get f == altitude(A, E, F)
By isosceles_triangle_properties on midpoint(A, B), A, B we get distance(A, midpoint(A, B)) == distance(B, midpoint(A, B)), angle(A, B, midpoint(A, B)) == angle(midpoint(A, B), A, B) mod 360
By collinear_definition on midpoint(C, D), C, D we get C in Line(D, midpoint(C, D)), D in Line(C, midpoint(C, D)), Line(C, midpoint(C, D)) == Line(D, midpoint(C, D)), 0 == 2 * angle(C, midpoint(C, D), D) mod 360
By isosceles_triangle_altitude_v3 on F, D, C we get identical(perpendicular_bisector(C, D), internal_angle_bisector(C, F, D), perpendicular_line(F, Line(C, D)))
By isosceles_triangle_altitude_v3 on F, C, D we get identical(perpendicular_bisector(C, D), internal_angle_bisector(C, F, D), perpendicular_line(F, Line(C, D)))
By isosceles_triangle_altitude_v3 on E, D, C we get identical(perpendicular_bisector(C, D), internal_angle_bisector(C, E, D), perpendicular_line(E, Line(C, D)))
By isosceles_triangle_altitude_v3 on E, C, D we get identical(perpendicular_bisector(C, D), internal_angle_bisector(C, E, D), perpendicular_line(E, Line(C, D)))
By isosceles_triangle_altitude_v3 on E, B, A we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, E, B), perpendicular_line(E, Line(A, B)))
By isosceles_triangle_altitude_v3 on F, A, B we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, F, B), perpendicular_line(F, Line(A, B)))
By isosceles_triangle_altitude_v3 on E, A, B we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, E, B), perpendicular_line(E, Line(A, B)))
By between_implies_angles on C, midpoint(C, D), D we get 180 == angle(C, midpoint(C, D), D) mod 360, 0 == angle(midpoint(C, D), D, C) mod 360, 0 == angle(D, C, midpoint(C, D)) mod 360
By between_implies_angles on D, midpoint(C, D), C we get 180 == angle(D, midpoint(C, D), C) mod 360, 0 == angle(midpoint(C, D), C, D) mod 360, 0 == angle(C, D, midpoint(C, D)) mod 360
By between_implies_angles on A, midpoint(A, B), B we get 180 == angle(A, midpoint(A, B), B) mod 360, 0 == angle(midpoint(A, B), B, A) mod 360, 0 == angle(B, A, midpoint(A, B)) mod 360
By between_implies_angles on B, midpoint(A, B), A we get 180 == angle(B, midpoint(A, B), A) mod 360, 0 == angle(midpoint(A, B), A, B) mod 360, 0 == angle(A, B, midpoint(A, B)) mod 360
By concyclic_sufficient_conditions_v1 on F, C, G, H we get concyclic(C, F, G, H)
By perpendicular_line_definition on C, j, Line(E, center(d)) we get j == perpendicular_line(C, Line(E, center(d)))
By perpendicular_line_definition on G, j, Line(E, center(d)) we get j == perpendicular_line(G, Line(E, center(d)))
By perpendicular_line_definition on midpoint(A, B), f, Line(E, F) we get f == perpendicular_line(midpoint(A, B), Line(E, F))
By perpendicular_line_definition on midpoint(C, D), h, Line(E, F) we get h == perpendicular_line(midpoint(C, D), Line(E, F))
By perpendicular_line_definition on line_intersection(Line(B, D), Line(F, center(d))), Line(F, center(d)), Line(B, D) we get Line(F, center(d)) == perpendicular_line(line_intersection(Line(B, D), Line(F, center(d))), Line(B, D))
By perpendicular_line_definition on A, j, Line(E, center(d)) we get j == perpendicular_line(A, Line(E, center(d)))
By perpendicular_line_definition on B, Line(B, D), Line(F, center(d)) we get Line(B, D) == perpendicular_line(B, Line(F, center(d)))
By perpendicular_line_definition on line_intersection(Line(B, D), Line(F, center(d))), Line(B, D), Line(F, center(d)) we get Line(B, D) == perpendicular_line(line_intersection(Line(B, D), Line(F, center(d))), Line(F, center(d)))
By perpendicular_line_definition on E, Line(E, center(d)), j we get Line(E, center(d)) == perpendicular_line(E, j)
By perpendicular_line_definition on center(d), Line(E, center(d)), j we get Line(E, center(d)) == perpendicular_line(center(d), j)
By line_unique_intersection_v1 on Line(A, F), Line(E, F), F, midpoint(C, D) we get midpoint(C, D) not in Line(A, F)
By line_unique_intersection_v1 on g, Line(E, F), E, midpoint(A, B) we get midpoint(A, B) not in g
By line_unique_intersection_v1 on Line(D, F), Line(E, F), F, midpoint(C, D) we get midpoint(C, D) not in Line(D, F)
By line_unique_intersection_v1 on Line(E, H), Line(E, F), E, midpoint(A, B) we get midpoint(A, B) not in Line(E, H)
By line_unique_intersection_v1 on Line(B, F), Line(E, F), F, midpoint(C, D) we get midpoint(C, D) not in Line(B, F)
By line_unique_intersection_v1 on Line(B, D), h, D, midpoint(C, D) we get midpoint(C, D) not in Line(B, D)
By line_unique_intersection_v1 on Line(C, F), Line(E, F), F, midpoint(C, D) we get midpoint(C, D) not in Line(C, F)
By line_unique_intersection_v1 on Line(C, F), Line(E, F), F, midpoint(A, B) we get midpoint(A, B) not in Line(C, F)
By line_unique_intersection_v1 on Line(A, F), Line(E, F), F, midpoint(A, B) we get midpoint(A, B) not in Line(A, F)
By line_unique_intersection_v1 on j, h, C, midpoint(C, D) we get midpoint(C, D) not in j
By line_unique_intersection_v1 on Line(B, F), Line(E, F), F, midpoint(A, B) we get midpoint(A, B) not in Line(B, F)
By line_unique_intersection_v1 on Line(D, F), Line(E, F), F, midpoint(A, B) we get midpoint(A, B) not in Line(D, F)
By line_unique_intersection_v1 on g, Line(E, F), E, midpoint(C, D) we get midpoint(C, D) not in g
By line_unique_intersection_v1 on i, h, D, midpoint(C, D) we get midpoint(C, D) not in i
By line_unique_intersection_v1 on i, Line(E, F), E, midpoint(A, B) we get midpoint(A, B) not in i
By line_unique_intersection_v1 on Line(B, D), f, B, midpoint(A, B) we get midpoint(A, B) not in Line(B, D)
By line_unique_intersection_v1 on Line(E, H), Line(E, F), E, midpoint(C, D) we get midpoint(C, D) not in Line(E, H)
By line_unique_intersection_v1 on Line(F, H), Line(E, F), F, midpoint(C, D) we get midpoint(C, D) not in Line(F, H)
By line_unique_intersection_v1 on k, h, D, midpoint(C, D) we get midpoint(C, D) not in k
By line_unique_intersection_v1 on j, f, A, midpoint(A, B) we get midpoint(A, B) not in j
By line_unique_intersection_v1 on Line(F, H), Line(E, F), F, midpoint(A, B) we get midpoint(A, B) not in Line(F, H)
By perpendicular_direction_conditions_v0_r on midpoint(C, D), C, E, F we get 180 == 2 * direction(midpoint(C, D), C) - 2 * direction(E, F) mod 360
By collinear_and_not_between_implies_orientation on G, C, D, midpoint(C, D) we get orientation(C, G, D) == orientation(D, midpoint(C, D), G) mod 360
By between_implies_orientation on midpoint(C, D), A, C, G we get orientation(A, C, midpoint(C, D)) == orientation(C, G, midpoint(C, D)) mod 360, orientation(A, C, midpoint(C, D)) == orientation(A, G, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on F, E, midpoint(A, B), B we get 180 == 2 * direction(F, E) - 2 * direction(midpoint(A, B), B) mod 360
By collinear_and_not_between_implies_orientation on H, A, B, midpoint(A, B) we get orientation(A, H, B) == orientation(B, midpoint(A, B), H) mod 360
By collinear_and_not_between_implies_orientation on H, midpoint(C, D), D, C we get orientation(C, H, D) == orientation(D, midpoint(C, D), H) mod 360
By collinear_and_not_between_implies_orientation on midpoint(C, D), E, B, C we get orientation(B, C, midpoint(C, D)) == orientation(B, E, midpoint(C, D)) mod 360
By collinear_and_not_between_implies_orientation on A, midpoint(C, D), C, D we get orientation(A, C, D) == orientation(A, C, midpoint(C, D)) mod 360
By between_implies_orientation on E, C, midpoint(C, D), D we get orientation(C, midpoint(C, D), E) == orientation(D, E, midpoint(C, D)) mod 360, orientation(C, D, E) == orientation(C, midpoint(C, D), E) mod 360
By between_implies_orientation on H, D, midpoint(C, D), C we get orientation(C, H, midpoint(C, D)) == orientation(D, midpoint(C, D), H) mod 360, orientation(C, H, D) == orientation(D, midpoint(C, D), H) mod 360
By perpendicular_direction_conditions_v0_r on F, E, midpoint(C, D), C we get 180 == 2 * direction(F, E) - 2 * direction(midpoint(C, D), C) mod 360
By collinear_and_not_between_implies_orientation on B, midpoint(C, D), D, C we get orientation(B, D, C) == orientation(B, D, midpoint(C, D)) mod 360
By between_implies_orientation on H, A, midpoint(A, B), B we get orientation(A, midpoint(A, B), H) == orientation(B, H, midpoint(A, B)) mod 360, orientation(A, B, H) == orientation(A, midpoint(A, B), H) mod 360
By between_implies_orientation on midpoint(C, D), A, E, D we get orientation(A, E, midpoint(C, D)) == orientation(D, midpoint(C, D), E) mod 360, orientation(A, D, midpoint(C, D)) == orientation(A, E, midpoint(C, D)) mod 360
By same_angle_v0 on H, D, G, B we get angle(D, H, B) == angle(G, H, B) mod 360
By between_implies_orientation on midpoint(C, D), G, C, A we get orientation(A, midpoint(C, D), C) == orientation(C, midpoint(C, D), G) mod 360, orientation(A, midpoint(C, D), G) == orientation(C, midpoint(C, D), G) mod 360
By same_angle_v1 on B, C, E, H we get angle(C, B, H) == angle(E, B, H) mod 360
By between_implies_orientation on B, D, midpoint(C, D), C we get orientation(B, D, midpoint(C, D)) == orientation(B, midpoint(C, D), C) mod 360, orientation(B, D, C) == orientation(B, D, midpoint(C, D)) mod 360
By between_implies_orientation on D, A, midpoint(A, B), B we get orientation(A, midpoint(A, B), D) == orientation(B, D, midpoint(A, B)) mod 360, orientation(A, B, D) == orientation(A, midpoint(A, B), D) mod 360
By perpendicular_direction_conditions_v0_r on E, F, midpoint(A, B), A we get 180 == 2 * direction(E, F) - 2 * direction(midpoint(A, B), A) mod 360
By between_implies_orientation on B, C, midpoint(C, D), D we get orientation(B, C, midpoint(C, D)) == orientation(B, midpoint(C, D), D) mod 360, orientation(B, C, D) == orientation(B, C, midpoint(C, D)) mod 360
By collinear_and_not_between_implies_orientation on D, A, B, midpoint(A, B) we get orientation(A, D, B) == orientation(B, midpoint(A, B), D) mod 360
By collinear_and_not_between_implies_orientation on C, B, A, midpoint(A, B) we get orientation(A, B, C) == orientation(A, midpoint(A, B), C) mod 360
By collinear_and_not_between_implies_orientation on F, D, C, midpoint(C, D) we get orientation(C, D, F) == orientation(C, midpoint(C, D), F) mod 360
By between_implies_orientation on midpoint(A, B), A, C, G we get orientation(A, C, midpoint(A, B)) == orientation(C, G, midpoint(A, B)) mod 360, orientation(A, C, midpoint(A, B)) == orientation(A, G, midpoint(A, B)) mod 360
By projection_definition on A, midpoint(A, B), Line(E, F) we get midpoint(A, B) == projection(A, Line(E, F))
By collinear_and_not_between_implies_orientation on G, A, B, midpoint(A, B) we get orientation(A, G, B) == orientation(B, midpoint(A, B), G) mod 360
By projection_definition on B, midpoint(A, B), Line(E, F) we get midpoint(A, B) == projection(B, Line(E, F))
By between_implies_orientation on midpoint(A, B), D, E, A we get orientation(A, midpoint(A, B), E) == orientation(D, E, midpoint(A, B)) mod 360, orientation(A, midpoint(A, B), D) == orientation(D, E, midpoint(A, B)) mod 360
By collinear_and_not_between_implies_orientation on midpoint(C, D), A, D, E we get orientation(A, midpoint(C, D), D) == orientation(D, E, midpoint(C, D)) mod 360
By between_implies_orientation on midpoint(C, D), G, D, H we get orientation(D, H, midpoint(C, D)) == orientation(D, midpoint(C, D), G) mod 360, orientation(D, midpoint(C, D), G) == orientation(G, H, midpoint(C, D)) mod 360
By collinear_and_not_between_implies_orientation on midpoint(C, D), G, H, D we get orientation(D, midpoint(C, D), H) == orientation(G, midpoint(C, D), H) mod 360
By perpendicular_direction_conditions_v0_r on F, E, midpoint(C, D), D we get 180 == 2 * direction(F, E) - 2 * direction(midpoint(C, D), D) mod 360
By between_implies_orientation on midpoint(A, B), H, D, G we get orientation(D, G, midpoint(A, B)) == orientation(D, midpoint(A, B), H) mod 360, orientation(D, midpoint(A, B), H) == orientation(G, midpoint(A, B), H) mod 360
By between_implies_orientation on F, A, midpoint(A, B), B we get orientation(A, midpoint(A, B), F) == orientation(B, F, midpoint(A, B)) mod 360, orientation(A, B, F) == orientation(A, midpoint(A, B), F) mod 360
By collinear_and_not_between_implies_orientation on midpoint(A, B), E, A, D we get orientation(A, D, midpoint(A, B)) == orientation(A, E, midpoint(A, B)) mod 360
By projection_definition on F, midpoint(C, D), h we get midpoint(C, D) == projection(F, h)
By perpendicular_direction_conditions_v0_r on F, E, midpoint(A, B), A we get 180 == 2 * direction(F, E) - 2 * direction(midpoint(A, B), A) mod 360
By collinear_and_not_between_implies_orientation on G, D, C, midpoint(C, D) we get orientation(C, D, G) == orientation(C, midpoint(C, D), G) mod 360
By collinear_and_not_between_implies_orientation on G, B, A, midpoint(A, B) we get orientation(A, B, G) == orientation(A, midpoint(A, B), G) mod 360
By between_implies_orientation on midpoint(C, D), H, D, G we get orientation(D, G, midpoint(C, D)) == orientation(D, midpoint(C, D), H) mod 360, orientation(D, midpoint(C, D), H) == orientation(G, midpoint(C, D), H) mod 360
By collinear_and_not_between_implies_orientation on E, C, D, midpoint(C, D) we get orientation(C, E, D) == orientation(D, midpoint(C, D), E) mod 360
By between_implies_orientation on C, B, midpoint(A, B), A we get orientation(A, C, midpoint(A, B)) == orientation(B, midpoint(A, B), C) mod 360, orientation(A, C, B) == orientation(B, midpoint(A, B), C) mod 360
By between_implies_orientation on G, A, midpoint(A, B), B we get orientation(A, midpoint(A, B), G) == orientation(B, G, midpoint(A, B)) mod 360, orientation(A, B, G) == orientation(A, midpoint(A, B), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), C, F, E we get 180 == 2 * direction(midpoint(C, D), C) - 2 * direction(F, E) mod 360
By between_implies_orientation on E, D, midpoint(C, D), C we get orientation(C, E, midpoint(C, D)) == orientation(D, midpoint(C, D), E) mod 360, orientation(C, E, D) == orientation(D, midpoint(C, D), E) mod 360
By projection_definition on E, midpoint(A, B), f we get midpoint(A, B) == projection(E, f)
By between_implies_orientation on E, A, midpoint(A, B), B we get orientation(A, midpoint(A, B), E) == orientation(B, E, midpoint(A, B)) mod 360, orientation(A, B, E) == orientation(A, midpoint(A, B), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), A, E, F we get 180 == 2 * direction(midpoint(A, B), A) - 2 * direction(E, F) mod 360
By collinear_and_not_between_implies_orientation on A, midpoint(C, D), D, C we get orientation(A, D, C) == orientation(A, D, midpoint(C, D)) mod 360
By collinear_and_not_between_implies_orientation on E, A, B, midpoint(A, B) we get orientation(A, E, B) == orientation(B, midpoint(A, B), E) mod 360
By perpendicular_direction_conditions_v0_r on E, F, midpoint(A, B), B we get 180 == 2 * direction(E, F) - 2 * direction(midpoint(A, B), B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), A, F, E we get 180 == 2 * direction(midpoint(A, B), A) - 2 * direction(F, E) mod 360
By between_implies_orientation on A, C, midpoint(C, D), D we get orientation(A, C, midpoint(C, D)) == orientation(A, midpoint(C, D), D) mod 360, orientation(A, C, D) == orientation(A, C, midpoint(C, D)) mod 360
By between_implies_orientation on F, C, midpoint(C, D), D we get orientation(C, midpoint(C, D), F) == orientation(D, F, midpoint(C, D)) mod 360, orientation(C, D, F) == orientation(C, midpoint(C, D), F) mod 360
By collinear_and_not_between_implies_orientation on midpoint(A, B), C, G, A we get orientation(A, midpoint(A, B), G) == orientation(C, midpoint(A, B), G) mod 360
By projection_definition on C, midpoint(C, D), Line(E, F) we get midpoint(C, D) == projection(C, Line(E, F))
By between_implies_orientation on midpoint(A, B), C, E, B we get orientation(B, midpoint(A, B), E) == orientation(C, E, midpoint(A, B)) mod 360, orientation(B, midpoint(A, B), C) == orientation(C, E, midpoint(A, B)) mod 360
By between_implies_orientation on F, D, midpoint(C, D), C we get orientation(C, F, midpoint(C, D)) == orientation(D, midpoint(C, D), F) mod 360, orientation(C, F, D) == orientation(D, midpoint(C, D), F) mod 360
By between_implies_orientation on midpoint(A, B), G, C, A we get orientation(A, midpoint(A, B), C) == orientation(C, midpoint(A, B), G) mod 360, orientation(A, midpoint(A, B), G) == orientation(C, midpoint(A, B), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), B, E, F we get 180 == 2 * direction(midpoint(A, B), B) - 2 * direction(E, F) mod 360
By collinear_and_not_between_implies_orientation on F, midpoint(A, B), B, A we get orientation(A, F, B) == orientation(B, midpoint(A, B), F) mod 360
By collinear_and_not_between_implies_orientation on midpoint(A, B), H, G, D we get orientation(D, midpoint(A, B), G) == orientation(G, H, midpoint(A, B)) mod 360
By between_implies_orientation on G, C, midpoint(C, D), D we get orientation(C, midpoint(C, D), G) == orientation(D, G, midpoint(C, D)) mod 360, orientation(C, D, G) == orientation(C, midpoint(C, D), G) mod 360
By projection_definition on E, midpoint(C, D), h we get midpoint(C, D) == projection(E, h)
By between_implies_orientation on C, A, midpoint(A, B), B we get orientation(A, midpoint(A, B), C) == orientation(B, C, midpoint(A, B)) mod 360, orientation(A, B, C) == orientation(A, midpoint(A, B), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), D, F, E we get 180 == 2 * direction(midpoint(C, D), D) - 2 * direction(F, E) mod 360
By between_implies_orientation on midpoint(A, B), G, D, H we get orientation(D, H, midpoint(A, B)) == orientation(D, midpoint(A, B), G) mod 360, orientation(D, midpoint(A, B), G) == orientation(G, H, midpoint(A, B)) mod 360
By between_implies_orientation on midpoint(C, D), B, E, C we get orientation(B, E, midpoint(C, D)) == orientation(C, midpoint(C, D), E) mod 360, orientation(B, C, midpoint(C, D)) == orientation(B, E, midpoint(C, D)) mod 360
By between_implies_orientation on midpoint(C, D), C, E, B we get orientation(B, midpoint(C, D), E) == orientation(C, E, midpoint(C, D)) mod 360, orientation(B, midpoint(C, D), C) == orientation(C, E, midpoint(C, D)) mod 360
By projection_definition on D, midpoint(C, D), Line(E, F) we get midpoint(C, D) == projection(D, Line(E, F))
By perpendicular_direction_conditions_v0_r on midpoint(C, D), D, E, F we get 180 == 2 * direction(midpoint(C, D), D) - 2 * direction(E, F) mod 360
By between_implies_orientation on G, B, midpoint(A, B), A we get orientation(A, G, midpoint(A, B)) == orientation(B, midpoint(A, B), G) mod 360, orientation(A, G, B) == orientation(B, midpoint(A, B), G) mod 360
By between_implies_orientation on H, B, midpoint(A, B), A we get orientation(A, H, midpoint(A, B)) == orientation(B, midpoint(A, B), H) mod 360, orientation(A, H, B) == orientation(B, midpoint(A, B), H) mod 360
By perpendicular_direction_conditions_v0_r on E, F, midpoint(C, D), C we get 180 == 2 * direction(E, F) - 2 * direction(midpoint(C, D), C) mod 360
By between_implies_orientation on midpoint(C, D), D, E, A we get orientation(A, midpoint(C, D), E) == orientation(D, E, midpoint(C, D)) mod 360, orientation(A, midpoint(C, D), D) == orientation(D, E, midpoint(C, D)) mod 360
By between_implies_orientation on G, D, midpoint(C, D), C we get orientation(C, G, midpoint(C, D)) == orientation(D, midpoint(C, D), G) mod 360, orientation(C, G, D) == orientation(D, midpoint(C, D), G) mod 360
By collinear_and_not_between_implies_orientation on midpoint(A, B), E, B, C we get orientation(B, C, midpoint(A, B)) == orientation(B, E, midpoint(A, B)) mod 360
By between_implies_orientation on A, D, midpoint(C, D), C we get orientation(A, D, midpoint(C, D)) == orientation(A, midpoint(C, D), C) mod 360, orientation(A, D, C) == orientation(A, D, midpoint(C, D)) mod 360
By collinear_and_not_between_implies_orientation on H, D, C, midpoint(C, D) we get orientation(C, D, H) == orientation(C, midpoint(C, D), H) mod 360
By between_implies_orientation on F, B, midpoint(A, B), A we get orientation(A, F, midpoint(A, B)) == orientation(B, midpoint(A, B), F) mod 360, orientation(A, F, B) == orientation(B, midpoint(A, B), F) mod 360
By between_implies_orientation on D, B, midpoint(A, B), A we get orientation(A, D, midpoint(A, B)) == orientation(B, midpoint(A, B), D) mod 360, orientation(A, D, B) == orientation(B, midpoint(A, B), D) mod 360
By between_implies_orientation on midpoint(A, B), B, E, C we get orientation(B, E, midpoint(A, B)) == orientation(C, midpoint(A, B), E) mod 360, orientation(B, C, midpoint(A, B)) == orientation(B, E, midpoint(A, B)) mod 360
By between_implies_orientation on midpoint(A, B), A, E, D we get orientation(A, E, midpoint(A, B)) == orientation(D, midpoint(A, B), E) mod 360, orientation(A, D, midpoint(A, B)) == orientation(A, E, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), B, F, E we get 180 == 2 * direction(midpoint(A, B), B) - 2 * direction(F, E) mod 360
By between_implies_orientation on E, B, midpoint(A, B), A we get orientation(A, E, midpoint(A, B)) == orientation(B, midpoint(A, B), E) mod 360, orientation(A, E, B) == orientation(B, midpoint(A, B), E) mod 360
By between_implies_orientation on H, C, midpoint(C, D), D we get orientation(C, midpoint(C, D), H) == orientation(D, H, midpoint(C, D)) mod 360, orientation(C, D, H) == orientation(C, midpoint(C, D), H) mod 360
By projection_definition on F, midpoint(A, B), f we get midpoint(A, B) == projection(F, f)
By perpendicular_direction_conditions_v0_r on E, F, midpoint(C, D), D we get 180 == 2 * direction(E, F) - 2 * direction(midpoint(C, D), D) mod 360
By parallel_line_definition on midpoint(C, D), h, f we get h == parallel_line(midpoint(C, D), f)
By parallel_line_definition on midpoint(A, B), f, h we get f == parallel_line(midpoint(A, B), h)
By different_points_v1 on H, B we get 0 != distance(B, H)
By different_points_v1 on E, midpoint(A, B) we get 0 != distance(E, midpoint(A, B))
By perpendicular_direction_conditions_v0_r on D, C, midpoint(C, D), E we get 180 == 2 * direction(D, C) - 2 * direction(midpoint(C, D), E) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(C, D), midpoint(C, D), D we get 180 == 2 * direction(F, midpoint(C, D)) - 2 * direction(midpoint(C, D), D) mod 360
By different_points_v1 on midpoint(C, D), F we get 0 != distance(F, midpoint(C, D))
By different_points_v1 on midpoint(A, B), F we get 0 != distance(F, midpoint(A, B))
By different_points_v1 on E, midpoint(C, D) we get 0 != distance(E, midpoint(C, D))
By perpendicular_direction_conditions_v0_r on A, midpoint(A, B), midpoint(A, B), F we get 180 == 2 * direction(A, midpoint(A, B)) - 2 * direction(midpoint(A, B), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), E, midpoint(C, D), C we get 180 == 2 * direction(midpoint(A, B), E) - 2 * direction(midpoint(C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(C, D), midpoint(A, B), A we get 180 == 2 * direction(E, midpoint(C, D)) - 2 * direction(midpoint(A, B), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), F, B, midpoint(A, B) we get 180 == 2 * direction(midpoint(A, B), F) - 2 * direction(B, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), E, B, midpoint(A, B) we get 180 == 2 * direction(midpoint(C, D), E) - 2 * direction(B, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), D, F, midpoint(C, D) we get 180 == 2 * direction(midpoint(C, D), D) - 2 * direction(F, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(A, B), E, midpoint(A, B) we get 180 == 2 * direction(A, midpoint(A, B)) - 2 * direction(E, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(A, B), A, midpoint(A, B) we get 180 == 2 * direction(F, midpoint(A, B)) - 2 * direction(A, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), F, D, midpoint(C, D) we get 180 == 2 * direction(midpoint(A, B), F) - 2 * direction(D, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on A, B, midpoint(C, D), E we get 180 == 2 * direction(A, B) - 2 * direction(midpoint(C, D), E) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(C, D), E, midpoint(A, B) we get 180 == 2 * direction(D, midpoint(C, D)) - 2 * direction(E, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on B, A, E, midpoint(A, B) we get 180 == 2 * direction(B, A) - 2 * direction(E, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), C, midpoint(C, D), E we get 180 == 2 * direction(midpoint(C, D), C) - 2 * direction(midpoint(C, D), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), F, midpoint(C, D), D we get 180 == 2 * direction(midpoint(C, D), F) - 2 * direction(midpoint(C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on A, B, F, midpoint(A, B) we get 180 == 2 * direction(A, B) - 2 * direction(F, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), B, midpoint(A, B), E we get 180 == 2 * direction(midpoint(A, B), B) - 2 * direction(midpoint(A, B), E) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(C, D), E, midpoint(C, D) we get 180 == 2 * direction(D, midpoint(C, D)) - 2 * direction(E, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, D, F, midpoint(A, B) we get 180 == 2 * direction(C, D) - 2 * direction(F, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(C, D), midpoint(C, D), D we get 180 == 2 * direction(E, midpoint(C, D)) - 2 * direction(midpoint(C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(C, D), F, midpoint(A, B) we get 180 == 2 * direction(C, midpoint(C, D)) - 2 * direction(F, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(C, D), A, B we get 180 == 2 * direction(F, midpoint(C, D)) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(A, B), midpoint(C, D), F we get 180 == 2 * direction(A, midpoint(A, B)) - 2 * direction(midpoint(C, D), F) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(A, B), B, midpoint(A, B) we get 180 == 2 * direction(F, midpoint(A, B)) - 2 * direction(B, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), E, D, C we get 180 == 2 * direction(midpoint(A, B), E) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), E, A, B we get 180 == 2 * direction(midpoint(C, D), E) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(C, D), A, midpoint(A, B) we get 180 == 2 * direction(F, midpoint(C, D)) - 2 * direction(A, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on A, B, midpoint(C, D), F we get 180 == 2 * direction(A, B) - 2 * direction(midpoint(C, D), F) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(C, D), midpoint(C, D), F we get 180 == 2 * direction(C, midpoint(C, D)) - 2 * direction(midpoint(C, D), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), E, midpoint(A, B), B we get 180 == 2 * direction(midpoint(C, D), E) - 2 * direction(midpoint(A, B), B) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(C, D), F, midpoint(C, D) we get 180 == 2 * direction(C, midpoint(C, D)) - 2 * direction(F, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), E, C, midpoint(C, D) we get 180 == 2 * direction(midpoint(C, D), E) - 2 * direction(C, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), B, E, midpoint(A, B) we get 180 == 2 * direction(midpoint(A, B), B) - 2 * direction(E, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(A, B), F, midpoint(C, D) we get 180 == 2 * direction(B, midpoint(A, B)) - 2 * direction(F, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(C, D), B, midpoint(A, B) we get 180 == 2 * direction(E, midpoint(C, D)) - 2 * direction(B, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(C, D), B, midpoint(A, B) we get 180 == 2 * direction(F, midpoint(C, D)) - 2 * direction(B, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on D, C, midpoint(C, D), F we get 180 == 2 * direction(D, C) - 2 * direction(midpoint(C, D), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), C, E, midpoint(C, D) we get 180 == 2 * direction(midpoint(C, D), C) - 2 * direction(E, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(C, D), midpoint(C, D), E we get 180 == 2 * direction(C, midpoint(C, D)) - 2 * direction(midpoint(C, D), E) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(A, B), C, midpoint(C, D) we get 180 == 2 * direction(E, midpoint(A, B)) - 2 * direction(C, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on B, A, midpoint(C, D), E we get 180 == 2 * direction(B, A) - 2 * direction(midpoint(C, D), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), E, A, B we get 180 == 2 * direction(midpoint(A, B), E) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(A, B), midpoint(A, B), A we get 180 == 2 * direction(E, midpoint(A, B)) - 2 * direction(midpoint(A, B), A) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(C, D), C, midpoint(C, D) we get 180 == 2 * direction(E, midpoint(C, D)) - 2 * direction(C, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(A, B), midpoint(A, B), A we get 180 == 2 * direction(F, midpoint(A, B)) - 2 * direction(midpoint(A, B), A) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(A, B), midpoint(A, B), B we get 180 == 2 * direction(E, midpoint(A, B)) - 2 * direction(midpoint(A, B), B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), E, C, midpoint(C, D) we get 180 == 2 * direction(midpoint(A, B), E) - 2 * direction(C, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, D, F, midpoint(C, D) we get 180 == 2 * direction(C, D) - 2 * direction(F, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), B, midpoint(C, D), F we get 180 == 2 * direction(midpoint(A, B), B) - 2 * direction(midpoint(C, D), F) mod 360
By perpendicular_direction_conditions_v0_r on D, C, E, midpoint(C, D) we get 180 == 2 * direction(D, C) - 2 * direction(E, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, C, F, midpoint(C, D) we get 180 == 2 * direction(D, C) - 2 * direction(F, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), F, B, A we get 180 == 2 * direction(midpoint(A, B), F) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(C, D), E, midpoint(C, D) we get 180 == 2 * direction(C, midpoint(C, D)) - 2 * direction(E, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), A, E, midpoint(C, D) we get 180 == 2 * direction(midpoint(A, B), A) - 2 * direction(E, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), F, B, A we get 180 == 2 * direction(midpoint(C, D), F) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(A, B), midpoint(A, B), E we get 180 == 2 * direction(A, midpoint(A, B)) - 2 * direction(midpoint(A, B), E) mod 360
By perpendicular_direction_conditions_v0_r on A, B, midpoint(A, B), F we get 180 == 2 * direction(A, B) - 2 * direction(midpoint(A, B), F) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(A, B), A, B we get 180 == 2 * direction(F, midpoint(A, B)) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(C, D), D, C we get 180 == 2 * direction(F, midpoint(C, D)) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(A, B), C, D we get 180 == 2 * direction(E, midpoint(A, B)) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on B, A, midpoint(C, D), F we get 180 == 2 * direction(B, A) - 2 * direction(midpoint(C, D), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), B, F, midpoint(C, D) we get 180 == 2 * direction(midpoint(A, B), B) - 2 * direction(F, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, C, midpoint(A, B), F we get 180 == 2 * direction(D, C) - 2 * direction(midpoint(A, B), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), A, midpoint(C, D), E we get 180 == 2 * direction(midpoint(A, B), A) - 2 * direction(midpoint(C, D), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), C, F, midpoint(C, D) we get 180 == 2 * direction(midpoint(C, D), C) - 2 * direction(F, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), F, midpoint(C, D), C we get 180 == 2 * direction(midpoint(C, D), F) - 2 * direction(midpoint(C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(C, D), midpoint(A, B), E we get 180 == 2 * direction(C, midpoint(C, D)) - 2 * direction(midpoint(A, B), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), E, midpoint(C, D), D we get 180 == 2 * direction(midpoint(C, D), E) - 2 * direction(midpoint(C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on D, C, F, midpoint(A, B) we get 180 == 2 * direction(D, C) - 2 * direction(F, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(C, D), D, midpoint(C, D) we get 180 == 2 * direction(F, midpoint(C, D)) - 2 * direction(D, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, D, midpoint(A, B), E we get 180 == 2 * direction(C, D) - 2 * direction(midpoint(A, B), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), F, midpoint(C, D), C we get 180 == 2 * direction(midpoint(A, B), F) - 2 * direction(midpoint(C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on D, C, midpoint(A, B), E we get 180 == 2 * direction(D, C) - 2 * direction(midpoint(A, B), E) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(A, B), E, midpoint(A, B) we get 180 == 2 * direction(B, midpoint(A, B)) - 2 * direction(E, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), B, F, midpoint(A, B) we get 180 == 2 * direction(midpoint(A, B), B) - 2 * direction(F, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(A, B), A, B we get 180 == 2 * direction(E, midpoint(A, B)) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(C, D), C, midpoint(C, D) we get 180 == 2 * direction(F, midpoint(C, D)) - 2 * direction(C, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(C, D), midpoint(C, D), C we get 180 == 2 * direction(F, midpoint(C, D)) - 2 * direction(midpoint(C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), F, midpoint(A, B), B we get 180 == 2 * direction(midpoint(C, D), F) - 2 * direction(midpoint(A, B), B) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(C, D), E, midpoint(A, B) we get 180 == 2 * direction(C, midpoint(C, D)) - 2 * direction(E, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on C, D, E, midpoint(C, D) we get 180 == 2 * direction(C, D) - 2 * direction(E, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(A, B), E, midpoint(C, D) we get 180 == 2 * direction(A, midpoint(A, B)) - 2 * direction(E, midpoint(C, D)) mod 360
By in_imply_collinear on line_intersection(Line(B, D), Line(F, center(d))), F, center(d) we get collinear(F, center(d), line_intersection(Line(B, D), Line(F, center(d))))
By perpendicular_direction_conditions_v0_r on F, midpoint(A, B), C, midpoint(C, D) we get 180 == 2 * direction(F, midpoint(A, B)) - 2 * direction(C, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), A, midpoint(C, D), F we get 180 == 2 * direction(midpoint(A, B), A) - 2 * direction(midpoint(C, D), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), A, F, midpoint(C, D) we get 180 == 2 * direction(midpoint(A, B), A) - 2 * direction(F, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), D, midpoint(C, D), E we get 180 == 2 * direction(midpoint(C, D), D) - 2 * direction(midpoint(C, D), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), C, midpoint(A, B), E we get 180 == 2 * direction(midpoint(C, D), C) - 2 * direction(midpoint(A, B), E) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(A, B), D, C we get 180 == 2 * direction(F, midpoint(A, B)) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(C, D), D, midpoint(C, D) we get 180 == 2 * direction(E, midpoint(C, D)) - 2 * direction(D, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(C, D), C, D we get 180 == 2 * direction(E, midpoint(C, D)) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on C, D, E, midpoint(A, B) we get 180 == 2 * direction(C, D) - 2 * direction(E, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), F, midpoint(A, B), B we get 180 == 2 * direction(midpoint(A, B), F) - 2 * direction(midpoint(A, B), B) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(C, D), B, A we get 180 == 2 * direction(E, midpoint(C, D)) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), F, D, C we get 180 == 2 * direction(midpoint(C, D), F) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on B, A, midpoint(A, B), F we get 180 == 2 * direction(B, A) - 2 * direction(midpoint(A, B), F) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(C, D), midpoint(A, B), F we get 180 == 2 * direction(C, midpoint(C, D)) - 2 * direction(midpoint(A, B), F) mod 360
By perpendicular_direction_conditions_v0_r on A, B, E, midpoint(C, D) we get 180 == 2 * direction(A, B) - 2 * direction(E, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(A, B), D, midpoint(C, D) we get 180 == 2 * direction(E, midpoint(A, B)) - 2 * direction(D, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), C, E, midpoint(A, B) we get 180 == 2 * direction(midpoint(C, D), C) - 2 * direction(E, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on C, D, midpoint(C, D), E we get 180 == 2 * direction(C, D) - 2 * direction(midpoint(C, D), E) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(A, B), B, midpoint(A, B) we get 180 == 2 * direction(E, midpoint(A, B)) - 2 * direction(B, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), F, C, D we get 180 == 2 * direction(midpoint(A, B), F) - 2 * direction(C, D) mod 360
By in_imply_collinear on midpoint(C, D), midpoint(A, B), E we get collinear(E, midpoint(A, B), midpoint(C, D))
By perpendicular_direction_conditions_v0_r on C, D, midpoint(C, D), F we get 180 == 2 * direction(C, D) - 2 * direction(midpoint(C, D), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), C, F, midpoint(A, B) we get 180 == 2 * direction(midpoint(C, D), C) - 2 * direction(F, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(A, B), midpoint(A, B), F we get 180 == 2 * direction(B, midpoint(A, B)) - 2 * direction(midpoint(A, B), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), E, D, midpoint(C, D) we get 180 == 2 * direction(midpoint(A, B), E) - 2 * direction(D, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), E, C, D we get 180 == 2 * direction(midpoint(C, D), E) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on B, A, F, midpoint(A, B) we get 180 == 2 * direction(B, A) - 2 * direction(F, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), E, B, A we get 180 == 2 * direction(midpoint(A, B), E) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on B, A, midpoint(A, B), E we get 180 == 2 * direction(B, A) - 2 * direction(midpoint(A, B), E) mod 360
By perpendicular_direction_conditions_v0_r on A, B, F, midpoint(C, D) we get 180 == 2 * direction(A, B) - 2 * direction(F, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(C, D), midpoint(C, D), C we get 180 == 2 * direction(E, midpoint(C, D)) - 2 * direction(midpoint(C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), D, E, midpoint(C, D) we get 180 == 2 * direction(midpoint(C, D), D) - 2 * direction(E, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), E, midpoint(C, D), C we get 180 == 2 * direction(midpoint(C, D), E) - 2 * direction(midpoint(C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), C, midpoint(A, B), F we get 180 == 2 * direction(midpoint(C, D), C) - 2 * direction(midpoint(A, B), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), E, midpoint(C, D), D we get 180 == 2 * direction(midpoint(A, B), E) - 2 * direction(midpoint(C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(A, B), F, midpoint(A, B) we get 180 == 2 * direction(B, midpoint(A, B)) - 2 * direction(F, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(A, B), E, midpoint(C, D) we get 180 == 2 * direction(B, midpoint(A, B)) - 2 * direction(E, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), D, midpoint(C, D), F we get 180 == 2 * direction(midpoint(C, D), D) - 2 * direction(midpoint(C, D), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), E, midpoint(A, B), A we get 180 == 2 * direction(midpoint(A, B), E) - 2 * direction(midpoint(A, B), A) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(C, D), A, midpoint(A, B) we get 180 == 2 * direction(E, midpoint(C, D)) - 2 * direction(A, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(A, B), D, midpoint(C, D) we get 180 == 2 * direction(F, midpoint(A, B)) - 2 * direction(D, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(C, D), F, midpoint(C, D) we get 180 == 2 * direction(D, midpoint(C, D)) - 2 * direction(F, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(A, B), B, A we get 180 == 2 * direction(F, midpoint(A, B)) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(A, B), F, midpoint(C, D) we get 180 == 2 * direction(A, midpoint(A, B)) - 2 * direction(F, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(C, D), midpoint(A, B), E we get 180 == 2 * direction(D, midpoint(C, D)) - 2 * direction(midpoint(A, B), E) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(C, D), C, D we get 180 == 2 * direction(F, midpoint(C, D)) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(A, B), midpoint(A, B), E we get 180 == 2 * direction(B, midpoint(A, B)) - 2 * direction(midpoint(A, B), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), C, midpoint(C, D), F we get 180 == 2 * direction(midpoint(C, D), C) - 2 * direction(midpoint(C, D), F) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(C, D), F, midpoint(A, B) we get 180 == 2 * direction(D, midpoint(C, D)) - 2 * direction(F, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), E, B, A we get 180 == 2 * direction(midpoint(C, D), E) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), F, C, midpoint(C, D) we get 180 == 2 * direction(midpoint(A, B), F) - 2 * direction(C, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), F, D, C we get 180 == 2 * direction(midpoint(A, B), F) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(C, D), midpoint(C, D), F we get 180 == 2 * direction(D, midpoint(C, D)) - 2 * direction(midpoint(C, D), F) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(A, B), midpoint(C, D), C we get 180 == 2 * direction(E, midpoint(A, B)) - 2 * direction(midpoint(C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(C, D), midpoint(A, B), A we get 180 == 2 * direction(F, midpoint(C, D)) - 2 * direction(midpoint(A, B), A) mod 360
By perpendicular_direction_conditions_v0_r on A, B, midpoint(A, B), E we get 180 == 2 * direction(A, B) - 2 * direction(midpoint(A, B), E) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(C, D), midpoint(C, D), E we get 180 == 2 * direction(D, midpoint(C, D)) - 2 * direction(midpoint(C, D), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), F, C, midpoint(C, D) we get 180 == 2 * direction(midpoint(C, D), F) - 2 * direction(C, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), F, A, midpoint(A, B) we get 180 == 2 * direction(midpoint(C, D), F) - 2 * direction(A, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(C, D), midpoint(A, B), B we get 180 == 2 * direction(E, midpoint(C, D)) - 2 * direction(midpoint(A, B), B) mod 360
By perpendicular_direction_conditions_v0_r on B, A, E, midpoint(C, D) we get 180 == 2 * direction(B, A) - 2 * direction(E, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), E, midpoint(A, B), A we get 180 == 2 * direction(midpoint(C, D), E) - 2 * direction(midpoint(A, B), A) mod 360
By perpendicular_direction_conditions_v0_r on A, B, E, midpoint(A, B) we get 180 == 2 * direction(A, B) - 2 * direction(E, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), D, midpoint(A, B), E we get 180 == 2 * direction(midpoint(C, D), D) - 2 * direction(midpoint(A, B), E) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(A, B), B, A we get 180 == 2 * direction(E, midpoint(A, B)) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), E, A, midpoint(A, B) we get 180 == 2 * direction(midpoint(A, B), E) - 2 * direction(A, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), F, C, D we get 180 == 2 * direction(midpoint(C, D), F) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), D, midpoint(A, B), F we get 180 == 2 * direction(midpoint(C, D), D) - 2 * direction(midpoint(A, B), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), F, A, midpoint(A, B) we get 180 == 2 * direction(midpoint(A, B), F) - 2 * direction(A, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on D, C, E, midpoint(A, B) we get 180 == 2 * direction(D, C) - 2 * direction(E, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), E, B, midpoint(A, B) we get 180 == 2 * direction(midpoint(A, B), E) - 2 * direction(B, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(A, B), midpoint(C, D), F we get 180 == 2 * direction(B, midpoint(A, B)) - 2 * direction(midpoint(C, D), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), B, midpoint(A, B), F we get 180 == 2 * direction(midpoint(A, B), B) - 2 * direction(midpoint(A, B), F) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(A, B), midpoint(C, D), E we get 180 == 2 * direction(A, midpoint(A, B)) - 2 * direction(midpoint(C, D), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), F, midpoint(A, B), A we get 180 == 2 * direction(midpoint(C, D), F) - 2 * direction(midpoint(A, B), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), E, A, midpoint(A, B) we get 180 == 2 * direction(midpoint(C, D), E) - 2 * direction(A, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), F, B, midpoint(A, B) we get 180 == 2 * direction(midpoint(C, D), F) - 2 * direction(B, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), A, F, midpoint(A, B) we get 180 == 2 * direction(midpoint(A, B), A) - 2 * direction(F, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), E, D, midpoint(C, D) we get 180 == 2 * direction(midpoint(C, D), E) - 2 * direction(D, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), F, A, B we get 180 == 2 * direction(midpoint(A, B), F) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), F, midpoint(A, B), A we get 180 == 2 * direction(midpoint(A, B), F) - 2 * direction(midpoint(A, B), A) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(A, B), midpoint(C, D), C we get 180 == 2 * direction(F, midpoint(A, B)) - 2 * direction(midpoint(C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), F, A, B we get 180 == 2 * direction(midpoint(C, D), F) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), F, midpoint(C, D), D we get 180 == 2 * direction(midpoint(A, B), F) - 2 * direction(midpoint(C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), D, F, midpoint(A, B) we get 180 == 2 * direction(midpoint(C, D), D) - 2 * direction(F, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), F, D, midpoint(C, D) we get 180 == 2 * direction(midpoint(C, D), F) - 2 * direction(D, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(A, B), midpoint(C, D), E we get 180 == 2 * direction(B, midpoint(A, B)) - 2 * direction(midpoint(C, D), E) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(A, B), midpoint(A, B), B we get 180 == 2 * direction(F, midpoint(A, B)) - 2 * direction(midpoint(A, B), B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), E, midpoint(A, B), B we get 180 == 2 * direction(midpoint(A, B), E) - 2 * direction(midpoint(A, B), B) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(C, D), A, B we get 180 == 2 * direction(E, midpoint(C, D)) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), D, E, midpoint(A, B) we get 180 == 2 * direction(midpoint(C, D), D) - 2 * direction(E, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), A, midpoint(A, B), E we get 180 == 2 * direction(midpoint(A, B), A) - 2 * direction(midpoint(A, B), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), B, E, midpoint(C, D) we get 180 == 2 * direction(midpoint(A, B), B) - 2 * direction(E, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, D, midpoint(A, B), F we get 180 == 2 * direction(C, D) - 2 * direction(midpoint(A, B), F) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(A, B), midpoint(C, D), D we get 180 == 2 * direction(F, midpoint(A, B)) - 2 * direction(midpoint(C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(A, B), F, midpoint(A, B) we get 180 == 2 * direction(A, midpoint(A, B)) - 2 * direction(F, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), A, E, midpoint(A, B) we get 180 == 2 * direction(midpoint(A, B), A) - 2 * direction(E, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(C, D), midpoint(A, B), B we get 180 == 2 * direction(F, midpoint(C, D)) - 2 * direction(midpoint(A, B), B) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(A, B), C, D we get 180 == 2 * direction(F, midpoint(A, B)) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(A, B), A, midpoint(A, B) we get 180 == 2 * direction(E, midpoint(A, B)) - 2 * direction(A, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), E, D, C we get 180 == 2 * direction(midpoint(C, D), E) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(A, B), midpoint(C, D), D we get 180 == 2 * direction(E, midpoint(A, B)) - 2 * direction(midpoint(C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(C, D), B, A we get 180 == 2 * direction(F, midpoint(C, D)) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), E, C, D we get 180 == 2 * direction(midpoint(A, B), E) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on B, A, F, midpoint(C, D) we get 180 == 2 * direction(B, A) - 2 * direction(F, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(C, D), D, C we get 180 == 2 * direction(E, midpoint(C, D)) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), B, midpoint(C, D), E we get 180 == 2 * direction(midpoint(A, B), B) - 2 * direction(midpoint(C, D), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), A, midpoint(A, B), F we get 180 == 2 * direction(midpoint(A, B), A) - 2 * direction(midpoint(A, B), F) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(A, B), D, C we get 180 == 2 * direction(E, midpoint(A, B)) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(C, D), midpoint(A, B), F we get 180 == 2 * direction(D, midpoint(C, D)) - 2 * direction(midpoint(A, B), F) mod 360
By in_imply_collinear on line_intersection(Line(B, D), Line(F, center(d))), D, B we get collinear(B, D, line_intersection(Line(B, D), Line(F, center(d))))
By line_circle_intersection_has_at_most_two_points_0 on E, F, midpoint(C, D), d we get midpoint(C, D) not in d
By in_imply_collinear on midpoint(C, D), F, midpoint(A, B) we get collinear(F, midpoint(A, B), midpoint(C, D))
By not_in_line_equivalent_to_not_collinear_v0 on F, B, midpoint(A, B) we get not_collinear(B, F, midpoint(A, B)), exists(Line(B, midpoint(A, B)))
By not_in_line_equivalent_to_not_collinear_v0 on A, midpoint(A, B), E we get not_collinear(A, E, midpoint(A, B)), exists(Line(E, midpoint(A, B)))
By line_inequality on Line(B, H), f, H we get f != Line(B, H)
By line_inequality on Line(B, H), h, B we get h != Line(B, H)
By reverse_direction on C, midpoint(C, D) we get 180 == direction(C, midpoint(C, D)) - direction(midpoint(C, D), C) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on G, midpoint(A, B), F we get not_collinear(F, G, midpoint(A, B)), exists(Line(F, midpoint(A, B)))
By not_in_line_equivalent_to_not_collinear_v0 on G, E, midpoint(C, D) we get not_collinear(E, G, midpoint(C, D)), exists(Line(E, midpoint(C, D)))
By line_circle_intersection_has_at_most_two_points_0 on E, F, midpoint(C, D), Circle(A, C, E) we get midpoint(C, D) not in Circle(A, C, E)
By line_inequality on Line(B, H), Line(B, F), H we get Line(B, F) != Line(B, H)
By reverse_direction on midpoint(C, D), D we get 180 == direction(midpoint(C, D), D) - direction(D, midpoint(C, D)) mod 360
By line_circle_intersection_has_at_most_two_points_0 on F, E, midpoint(A, B), Circle(A, C, E) we get midpoint(A, B) not in Circle(A, C, E)
By not_in_line_equivalent_to_not_collinear_v0 on C, midpoint(C, D), F we get not_collinear(C, F, midpoint(C, D)), exists(Line(F, midpoint(C, D)))
By not_in_line_equivalent_to_not_collinear_v0 on G, E, midpoint(A, B) we get not_collinear(E, G, midpoint(A, B)), exists(Line(E, midpoint(A, B)))
By not_in_line_equivalent_to_not_collinear_v0 on D, midpoint(C, D), E we get not_collinear(D, E, midpoint(C, D)), exists(Line(E, midpoint(C, D)))
By line_inequality on Line(B, H), Line(D, F), B we get Line(B, H) != Line(D, F)
By not_in_line_equivalent_to_not_collinear_v0 on E, C, midpoint(C, D) we get not_collinear(C, E, midpoint(C, D)), exists(Line(C, midpoint(C, D)))
By not_in_line_equivalent_to_not_collinear_v0 on H, B, midpoint(A, B) we get not_collinear(B, H, midpoint(A, B)), exists(Line(B, midpoint(A, B)))
By not_in_line_equivalent_to_not_collinear_v0 on G, A, midpoint(A, B) we get not_collinear(A, G, midpoint(A, B)), exists(Line(A, midpoint(A, B)))
By not_in_line_equivalent_to_not_collinear_v0 on C, B, midpoint(A, B) we get not_collinear(B, C, midpoint(A, B)), exists(Line(B, midpoint(A, B)))
By line_inequality on Line(B, center(d)), Line(D, F), B we get Line(D, F) != Line(B, center(d))
By not_in_line_equivalent_to_not_collinear_v0 on A, E, midpoint(C, D) we get not_collinear(A, E, midpoint(C, D)), exists(Line(E, midpoint(C, D)))
By not_in_line_equivalent_to_not_collinear_v0 on D, A, midpoint(A, B) we get not_collinear(A, D, midpoint(A, B)), exists(Line(A, midpoint(A, B)))
By reverse_direction on D, midpoint(C, D) we get 180 == direction(D, midpoint(C, D)) - direction(midpoint(C, D), D) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on H, midpoint(A, B), E we get not_collinear(E, H, midpoint(A, B)), exists(Line(E, midpoint(A, B)))
By not_in_line_equivalent_to_not_collinear_v0 on H, E, midpoint(C, D) we get not_collinear(E, H, midpoint(C, D)), exists(Line(E, midpoint(C, D)))
By reverse_direction on B, midpoint(A, B) we get 180 == direction(B, midpoint(A, B)) - direction(midpoint(A, B), B) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on C, F, midpoint(A, B) we get not_collinear(C, F, midpoint(A, B)), exists(Line(F, midpoint(A, B)))
By line_containment_inequality on line_intersection(Line(B, D), Line(F, center(d))), A, Line(B, D) we get A != line_intersection(Line(B, D), Line(F, center(d)))
By not_in_line_equivalent_to_not_collinear_v0 on H, D, midpoint(C, D) we get not_collinear(D, H, midpoint(C, D)), exists(Line(D, midpoint(C, D)))
By not_in_line_equivalent_to_not_collinear_v0 on B, C, midpoint(C, D) we get not_collinear(B, C, midpoint(C, D)), exists(Line(C, midpoint(C, D)))
By not_in_line_equivalent_to_not_collinear_v0 on D, F, midpoint(C, D) we get not_collinear(D, F, midpoint(C, D)), exists(Line(F, midpoint(C, D)))
By reverse_direction on midpoint(C, D), C we get 180 == direction(midpoint(C, D), C) - direction(C, midpoint(C, D)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on G, D, midpoint(C, D) we get not_collinear(D, G, midpoint(C, D)), exists(Line(D, midpoint(C, D)))
By reverse_direction on A, midpoint(A, B) we get 180 == direction(A, midpoint(A, B)) - direction(midpoint(A, B), A) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on B, midpoint(C, D), F we get not_collinear(B, F, midpoint(C, D)), exists(Line(F, midpoint(C, D)))
By not_in_line_equivalent_to_not_collinear_v0 on D, B, midpoint(A, B) we get not_collinear(B, D, midpoint(A, B)), exists(Line(B, midpoint(A, B)))
By line_inequality on Line(B, H), Line(F, H), B we get Line(B, H) != Line(F, H)
By not_in_line_equivalent_to_not_collinear_v0_r on G, B, H we get G not in Line(B, H)
By not_in_line_equivalent_to_not_collinear_v0 on G, C, midpoint(C, D) we get not_collinear(C, G, midpoint(C, D)), exists(Line(C, midpoint(C, D)))
By not_in_line_equivalent_to_not_collinear_v0 on H, midpoint(C, D), C we get not_collinear(C, H, midpoint(C, D)), exists(Line(C, midpoint(C, D)))
By reverse_direction on midpoint(A, B), A we get 180 == direction(midpoint(A, B), A) - direction(A, midpoint(A, B)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on C, midpoint(A, B), A we get not_collinear(A, C, midpoint(A, B)), exists(Line(A, midpoint(A, B)))
By not_in_line_equivalent_to_not_collinear_v0 on B, midpoint(A, B), E we get not_collinear(B, E, midpoint(A, B)), exists(Line(E, midpoint(A, B)))
By not_in_line_equivalent_to_not_collinear_v0 on G, midpoint(A, B), B we get not_collinear(B, G, midpoint(A, B)), exists(Line(B, midpoint(A, B)))
By not_in_line_equivalent_to_not_collinear_v0 on B, midpoint(C, D), E we get not_collinear(B, E, midpoint(C, D)), exists(Line(E, midpoint(C, D)))
By line_inequality on Line(B, H), i, B we get i != Line(B, H)
By line_inequality on Line(B, H), k, B we get k != Line(B, H)
By not_in_line_equivalent_to_not_collinear_v0 on B, midpoint(C, D), D we get not_collinear(B, D, midpoint(C, D)), exists(Line(D, midpoint(C, D)))
By not_in_line_equivalent_to_not_collinear_v0 on G, midpoint(C, D), F we get not_collinear(F, G, midpoint(C, D)), exists(Line(F, midpoint(C, D)))
By line_inequality on Line(B, H), j, H we get j != Line(B, H)
By reverse_direction on midpoint(A, B), B we get 180 == direction(midpoint(A, B), B) - direction(B, midpoint(A, B)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on D, E, midpoint(A, B) we get not_collinear(D, E, midpoint(A, B)), exists(Line(E, midpoint(A, B)))
By not_in_line_equivalent_to_not_collinear_v0 on A, midpoint(C, D), C we get not_collinear(A, C, midpoint(C, D)), exists(Line(C, midpoint(C, D)))
By line_containment_inequality on line_intersection(Line(B, D), Line(F, center(d))), C, Line(B, D) we get C != line_intersection(Line(B, D), Line(F, center(d)))
By line_inequality on Line(B, H), Line(B, D), H we get Line(B, D) != Line(B, H)
By line_inequality on Line(B, center(d)), Line(F, H), B we get Line(F, H) != Line(B, center(d))
By not_in_line_equivalent_to_not_collinear_v0 on A, F, midpoint(A, B) we get not_collinear(A, F, midpoint(A, B)), exists(Line(F, midpoint(A, B)))
By not_in_line_equivalent_to_not_collinear_v0 on H, F, midpoint(C, D) we get not_collinear(F, H, midpoint(C, D)), exists(Line(F, midpoint(C, D)))
By not_in_line_equivalent_to_not_collinear_v0 on H, midpoint(A, B), A we get not_collinear(A, H, midpoint(A, B)), exists(Line(A, midpoint(A, B)))
By not_in_line_equivalent_to_not_collinear_v0 on H, F, midpoint(A, B) we get not_collinear(F, H, midpoint(A, B)), exists(Line(F, midpoint(A, B)))
By line_circle_intersection_has_at_most_two_points_0 on F, E, midpoint(A, B), d we get midpoint(A, B) not in d
By line_containment_inequality on line_intersection(Line(B, D), Line(F, center(d))), H, Line(B, D) we get H != line_intersection(Line(B, D), Line(F, center(d)))
By not_in_line_equivalent_to_not_collinear_v0 on C, E, midpoint(A, B) we get not_collinear(C, E, midpoint(A, B)), exists(Line(E, midpoint(A, B)))
By line_inequality on Line(B, center(d)), k, B we get k != Line(B, center(d))
By not_in_line_equivalent_to_not_collinear_v0_r on A, H, B we get A not in Line(B, H)
By not_in_line_equivalent_to_not_collinear_v0_r on E, B, H we get E not in Line(B, H)
By line_inequality on Line(B, center(d)), i, B we get i != Line(B, center(d))
By not_in_line_equivalent_to_not_collinear_v0 on A, midpoint(C, D), F we get not_collinear(A, F, midpoint(C, D)), exists(Line(F, midpoint(C, D)))
By not_in_line_equivalent_to_not_collinear_v0 on A, midpoint(C, D), D we get not_collinear(A, D, midpoint(C, D)), exists(Line(D, midpoint(C, D)))
By not_in_line_equivalent_to_not_collinear_v0_r on D, B, H we get D not in Line(B, H)
By not_in_line_equivalent_to_not_collinear_v0 on D, F, midpoint(A, B) we get not_collinear(D, F, midpoint(A, B)), exists(Line(F, midpoint(A, B)))
By line_inequality on Line(B, H), Line(A, F), H we get Line(A, F) != Line(B, H)
By line_inequality on Line(B, center(d)), Line(C, F), B we get Line(C, F) != Line(B, center(d))
By line_inequality on Line(B, H), g, H we get g != Line(B, H)
By not_in_line_equivalent_to_not_collinear_v0_r on C, H, B we get C not in Line(B, H)
By line_containment_inequality on line_intersection(Line(B, D), Line(F, center(d))), G, Line(B, D) we get G != line_intersection(Line(B, D), Line(F, center(d)))
By line_containment_inequality on line_intersection(Line(B, D), Line(F, center(d))), F, Line(B, D) we get F != line_intersection(Line(B, D), Line(F, center(d)))
By line_inequality on Line(B, H), Line(E, H), B we get Line(B, H) != Line(E, H)
By line_inequality on Line(B, H), Line(E, F), H we get Line(B, H) != Line(E, F)
By line_containment_inequality on line_intersection(Line(B, D), Line(F, center(d))), E, Line(B, D) we get E != line_intersection(Line(B, D), Line(F, center(d)))
By line_inequality on Line(B, center(d)), j, B we get j != Line(B, center(d))
By line_inequality on Line(B, center(d)), h, B we get h != Line(B, center(d))
By line_inequality on Line(B, center(d)), Line(A, F), B we get Line(A, F) != Line(B, center(d))
By not_in_line_equivalent_to_not_collinear_v0_r on F, B, H we get F not in Line(B, H)
By line_inequality on Line(B, H), Line(C, F), H we get Line(B, H) != Line(C, F)
By line_inequality on Line(B, center(d)), Line(E, F), B we get Line(E, F) != Line(B, center(d))
By line_inequality on Line(B, center(d)), Line(E, H), B we get Line(E, H) != Line(B, center(d))
By internal_angle_bisector_definition_v0 on D, midpoint(C, D), C, E we get angle(D, E, midpoint(C, D)) == angle(midpoint(C, D), E, C) mod 360
By perpendicular_angle_conditions_v0 on F, midpoint(C, D), D we get angle(F, midpoint(C, D), D) == orientation(D, F, midpoint(C, D)) mod 360
By perpendicular_angle_conditions_v0 on C, midpoint(C, D), E we get angle(C, midpoint(C, D), E) == orientation(C, midpoint(C, D), E) mod 360
By perpendicular_angle_conditions_v0 on A, midpoint(A, B), F we get angle(A, midpoint(A, B), F) == orientation(A, midpoint(A, B), F) mod 360
By internal_angle_bisector_definition_v0 on D, midpoint(A, B), C, F we get angle(D, F, midpoint(A, B)) == angle(midpoint(A, B), F, C) mod 360
By perpendicular_angle_conditions_v0 on E, midpoint(C, D), C we get angle(E, midpoint(C, D), C) == orientation(C, E, midpoint(C, D)) mod 360
By internal_angle_bisector_definition_v0 on D, F, C, midpoint(C, D) we get angle(D, midpoint(C, D), F) == angle(F, midpoint(C, D), C) mod 360
By perpendicular_angle_conditions_v0 on F, midpoint(C, D), C we get angle(F, midpoint(C, D), C) == orientation(C, F, midpoint(C, D)) mod 360
By internal_angle_bisector_definition_v0 on A, F, B, midpoint(A, B) we get angle(A, midpoint(A, B), F) == angle(F, midpoint(A, B), B) mod 360
By perpendicular_angle_conditions_v0 on D, midpoint(C, D), F we get angle(D, midpoint(C, D), F) == orientation(D, midpoint(C, D), F) mod 360
By internal_angle_bisector_definition_v0 on B, midpoint(C, D), A, F we get angle(B, F, midpoint(C, D)) == angle(midpoint(C, D), F, A) mod 360
By internal_angle_bisector_definition_v0 on C, E, D, midpoint(C, D) we get angle(C, midpoint(C, D), E) == angle(E, midpoint(C, D), D) mod 360
By internal_angle_bisector_definition_v0 on C, midpoint(A, B), D, E we get angle(C, E, midpoint(A, B)) == angle(midpoint(A, B), E, D) mod 360
By collinear_definition on E, midpoint(C, D), F we get midpoint(C, D) in Line(E, F), F in Line(E, midpoint(C, D)), Line(E, F) == Line(E, midpoint(C, D)), 0 == 2 * angle(midpoint(C, D), E, F) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(A, B), A, midpoint(A, B), B we get Line(A, B) == internal_angle_bisector(midpoint(A, B), B, midpoint(A, B))
By external_angle_bisector_definition_v0 on C, midpoint(A, B), A, E we get 180 == angle(C, E, midpoint(A, B)) + angle(A, E, midpoint(A, B)) mod 360
By internal_angle_bisector_definition_v0_r on B, midpoint(A, B), B, A we get Line(A, midpoint(A, B)) == internal_angle_bisector(B, A, B)
By isosceles_triangle_properties on center(d), B, D we get distance(B, center(d)) == distance(D, center(d)), angle(B, D, center(d)) == angle(center(d), B, D) mod 360
By external_angle_bisector_definition_v0 on D, midpoint(C, D), B, E we get 180 == angle(D, E, midpoint(C, D)) + angle(B, E, midpoint(C, D)) mod 360
By internal_angle_bisector_definition_v0_r on B, F, D, center(d) we get Line(F, center(d)) == internal_angle_bisector(B, center(d), D)
By perpendicular_angle_conditions_v0 on E, midpoint(C, D), D we get angle(E, midpoint(C, D), D) == orientation(D, E, midpoint(C, D)) mod 360
By internal_angle_bisector_definition_v0_r on D, F, B, H we get Line(F, H) == internal_angle_bisector(B, H, D)
By isosceles_triangle_properties on center(d), B, H we get distance(B, center(d)) == distance(H, center(d)), angle(B, H, center(d)) == angle(center(d), B, H) mod 360
By internal_angle_bisector_definition_v0_r on D, midpoint(C, D), D, C we get Line(C, midpoint(C, D)) == internal_angle_bisector(D, C, D)
By perpendicular_angle_conditions_v0 on F, midpoint(A, B), A we get angle(F, midpoint(A, B), A) == orientation(A, F, midpoint(A, B)) mod 360
By internal_angle_bisector_definition_v0_r on B, A, B, midpoint(A, B) we get Line(A, midpoint(A, B)) == internal_angle_bisector(B, midpoint(A, B), B)
By isosceles_triangle_properties on center(d), B, E we get distance(B, center(d)) == distance(E, center(d)), angle(B, E, center(d)) == angle(center(d), B, E) mod 360
By internal_angle_bisector_definition_v0 on B, E, A, midpoint(A, B) we get angle(B, midpoint(A, B), E) == angle(E, midpoint(A, B), A) mod 360
By collinear_definition on E, midpoint(A, B), F we get midpoint(A, B) in Line(E, F), F in Line(E, midpoint(A, B)), Line(E, F) == Line(E, midpoint(A, B)), 0 == 2 * angle(midpoint(A, B), E, F) mod 360
By external_angle_bisector_definition_v0 on D, midpoint(A, B), B, E we get 180 == angle(D, E, midpoint(A, B)) + angle(B, E, midpoint(A, B)) mod 360
By perpendicular_angle_conditions_v0 on F, midpoint(A, B), B we get angle(F, midpoint(A, B), B) == orientation(B, F, midpoint(A, B)) mod 360
By internal_angle_bisector_definition_v0 on D, midpoint(C, D), C, F we get angle(D, F, midpoint(C, D)) == angle(midpoint(C, D), F, C) mod 360
By isosceles_triangle_properties on center(d), H, B we get distance(B, center(d)) == distance(H, center(d)), angle(H, B, center(d)) == angle(center(d), H, B) mod 360
By isosceles_triangle_properties on center(d), B, F we get distance(B, center(d)) == distance(F, center(d)), angle(B, F, center(d)) == angle(center(d), B, F) mod 360
By altitude_definition on F, B, D, Line(F, center(d)) we get altitude(F, B, D) == Line(F, center(d))
By isosceles_triangle_altitude_v1 on midpoint(A, B), D, C we get identical(perpendicular_bisector(C, D), internal_angle_bisector(C, midpoint(A, B), D), perpendicular_line(midpoint(A, B), Line(C, D)))
By internal_angle_bisector_definition_v0_r on midpoint(C, D), D, midpoint(C, D), C we get Line(C, D) == internal_angle_bisector(midpoint(C, D), C, midpoint(C, D))
By internal_angle_bisector_definition_v0 on B, midpoint(A, B), A, E we get angle(B, E, midpoint(A, B)) == angle(midpoint(A, B), E, A) mod 360
By isosceles_triangle_properties on center(d), D, B we get distance(B, center(d)) == distance(D, center(d)), angle(D, B, center(d)) == angle(center(d), D, B) mod 360
By perpendicular_angle_conditions_v0 on D, midpoint(C, D), E we get angle(D, midpoint(C, D), E) == orientation(D, midpoint(C, D), E) mod 360
By internal_angle_bisector_definition_v0 on D, E, C, midpoint(C, D) we get angle(D, midpoint(C, D), E) == angle(E, midpoint(C, D), C) mod 360
By external_angle_bisector_definition_v0 on C, midpoint(C, D), A, E we get 180 == angle(C, E, midpoint(C, D)) + angle(A, E, midpoint(C, D)) mod 360
By collinear_definition on F, midpoint(A, B), E we get midpoint(A, B) in Line(E, F), E in Line(F, midpoint(A, B)), Line(E, F) == Line(F, midpoint(A, B)), 0 == 2 * angle(midpoint(A, B), F, E) mod 360
By internal_angle_bisector_definition_v0 on C, midpoint(C, D), D, E we get angle(C, E, midpoint(C, D)) == angle(midpoint(C, D), E, D) mod 360
By internal_angle_bisector_definition_v0 on A, midpoint(C, D), B, E we get angle(A, E, midpoint(C, D)) == angle(midpoint(C, D), E, B) mod 360
By internal_angle_bisector_definition_v0_r on G, F, B, H we get Line(F, H) == internal_angle_bisector(B, H, G)
By internal_angle_bisector_definition_v0 on B, midpoint(C, D), A, E we get angle(B, E, midpoint(C, D)) == angle(midpoint(C, D), E, A) mod 360
By internal_angle_bisector_definition_v0 on A, E, B, midpoint(A, B) we get angle(A, midpoint(A, B), E) == angle(E, midpoint(A, B), B) mod 360
By internal_angle_bisector_definition_v0_r on D, C, D, midpoint(C, D) we get Line(C, midpoint(C, D)) == internal_angle_bisector(D, midpoint(C, D), D)
By isosceles_triangle_properties on center(d), F, B we get distance(B, center(d)) == distance(F, center(d)), angle(F, B, center(d)) == angle(center(d), F, B) mod 360
By internal_angle_bisector_definition_v0 on B, F, A, midpoint(A, B) we get angle(B, midpoint(A, B), F) == angle(F, midpoint(A, B), A) mod 360
By internal_angle_bisector_definition_v0 on A, midpoint(A, B), B, E we get angle(A, E, midpoint(A, B)) == angle(midpoint(A, B), E, B) mod 360
By isosceles_triangle_properties on center(d), E, B we get distance(B, center(d)) == distance(E, center(d)), angle(E, B, center(d)) == angle(center(d), E, B) mod 360
By internal_angle_bisector_definition_v0_r on C, midpoint(C, D), C, D we get Line(D, midpoint(C, D)) == internal_angle_bisector(C, D, C)
By perpendicular_angle_conditions_v0 on B, midpoint(A, B), F we get angle(B, midpoint(A, B), F) == orientation(B, midpoint(A, B), F) mod 360
By collinear_definition on E, F, midpoint(A, B) we get F in Line(E, midpoint(A, B)), midpoint(A, B) in Line(E, F), Line(E, F) == Line(E, midpoint(A, B)), 0 == 2 * angle(F, E, midpoint(A, B)) mod 360
By perpendicular_angle_conditions_v0 on B, midpoint(A, B), E we get angle(B, midpoint(A, B), E) == orientation(B, midpoint(A, B), E) mod 360
By collinear_definition on F, midpoint(C, D), E we get midpoint(C, D) in Line(E, F), E in Line(F, midpoint(C, D)), Line(E, F) == Line(F, midpoint(C, D)), 0 == 2 * angle(midpoint(C, D), F, E) mod 360
By internal_angle_bisector_definition_v0 on B, midpoint(A, B), A, F we get angle(B, F, midpoint(A, B)) == angle(midpoint(A, B), F, A) mod 360
By perpendicular_lines_draw_intersection on Line(E, center(d)), j we get exists(line_intersection(j, Line(E, center(d))))
By internal_angle_bisector_definition_v0_r on midpoint(C, D), C, midpoint(C, D), D we get Line(C, D) == internal_angle_bisector(midpoint(C, D), D, midpoint(C, D))
By collinear_definition on F, E, midpoint(A, B) we get E in Line(F, midpoint(A, B)), midpoint(A, B) in Line(E, F), Line(E, F) == Line(F, midpoint(A, B)), 0 == 2 * angle(E, F, midpoint(A, B)) mod 360
By perpendicular_angle_conditions_v0 on A, midpoint(A, B), E we get angle(A, midpoint(A, B), E) == orientation(A, midpoint(A, B), E) mod 360
By internal_angle_bisector_definition_v0 on C, midpoint(C, D), D, F we get angle(C, F, midpoint(C, D)) == angle(midpoint(C, D), F, D) mod 360
By perpendicular_angle_conditions_v0 on C, midpoint(C, D), F we get angle(C, midpoint(C, D), F) == orientation(C, midpoint(C, D), F) mod 360
By internal_angle_bisector_definition_v0 on A, midpoint(A, B), B, F we get angle(A, F, midpoint(A, B)) == angle(midpoint(A, B), F, B) mod 360
By internal_angle_bisector_definition_v0 on A, midpoint(C, D), B, F we get angle(A, F, midpoint(C, D)) == angle(midpoint(C, D), F, B) mod 360
By internal_angle_bisector_definition_v0_r on C, D, C, midpoint(C, D) we get Line(D, midpoint(C, D)) == internal_angle_bisector(C, midpoint(C, D), C)
By internal_angle_bisector_definition_v0 on C, midpoint(A, B), D, F we get angle(C, F, midpoint(A, B)) == angle(midpoint(A, B), F, D) mod 360
By collinear_definition on F, E, midpoint(C, D) we get E in Line(F, midpoint(C, D)), midpoint(C, D) in Line(E, F), Line(E, F) == Line(F, midpoint(C, D)), 0 == 2 * angle(E, F, midpoint(C, D)) mod 360
By internal_angle_bisector_definition_v0_r on A, midpoint(A, B), A, B we get Line(B, midpoint(A, B)) == internal_angle_bisector(A, B, A)
By perpendicular_angle_conditions_v0 on E, midpoint(A, B), B we get angle(E, midpoint(A, B), B) == orientation(B, E, midpoint(A, B)) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(A, B), B, midpoint(A, B), A we get Line(A, B) == internal_angle_bisector(midpoint(A, B), A, midpoint(A, B))
By reverse_direction on center(d), B we get 180 == direction(center(d), B) - direction(B, center(d)) mod 360
By internal_angle_bisector_definition_v0_r on A, B, A, midpoint(A, B) we get Line(B, midpoint(A, B)) == internal_angle_bisector(A, midpoint(A, B), A)
By isosceles_triangle_altitude_v1 on midpoint(C, D), A, B we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, midpoint(C, D), B), perpendicular_line(midpoint(C, D), Line(A, B)))
By collinear_definition on E, F, midpoint(C, D) we get F in Line(E, midpoint(C, D)), midpoint(C, D) in Line(E, F), Line(E, F) == Line(E, midpoint(C, D)), 0 == 2 * angle(F, E, midpoint(C, D)) mod 360
By internal_angle_bisector_definition_v0 on D, midpoint(A, B), C, E we get angle(D, E, midpoint(A, B)) == angle(midpoint(A, B), E, C) mod 360
By perpendicular_angle_conditions_v0 on E, midpoint(A, B), A we get angle(E, midpoint(A, B), A) == orientation(A, E, midpoint(A, B)) mod 360
By internal_angle_bisector_definition_v0 on C, F, D, midpoint(C, D) we get angle(C, midpoint(C, D), F) == angle(F, midpoint(C, D), D) mod 360
By isosceles_triangle_altitude_v1 on midpoint(C, D), B, A we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, midpoint(C, D), B), perpendicular_line(midpoint(C, D), Line(A, B)))
By isosceles_triangle_altitude_v1 on midpoint(A, B), C, D we get identical(perpendicular_bisector(C, D), internal_angle_bisector(C, midpoint(A, B), D), perpendicular_line(midpoint(A, B), Line(C, D)))
By altitude_definition on E, A, C, Line(E, center(d)) we get altitude(E, A, C) == Line(E, center(d))
By collinear_definition on midpoint(A, B), F, E we get F in Line(E, midpoint(A, B)), E in Line(F, midpoint(A, B)), Line(E, midpoint(A, B)) == Line(F, midpoint(A, B)), 0 == 2 * angle(F, midpoint(A, B), E) mod 360
By collinear_definition on midpoint(C, D), E, F we get E in Line(F, midpoint(C, D)), F in Line(E, midpoint(C, D)), Line(E, midpoint(C, D)) == Line(F, midpoint(C, D)), 0 == 2 * angle(E, midpoint(C, D), F) mod 360
By isosceles_triangle_properties on midpoint(A, B), D, C we get distance(C, midpoint(A, B)) == distance(D, midpoint(A, B)), angle(D, C, midpoint(A, B)) == angle(midpoint(A, B), D, C) mod 360
By power_of_a_point_definition on G, C, A, Circle(A, C, E) we get log(distance(C, G)) + log(distance(A, G)) == log(power_of_a_point(G, Circle(A, C, E)))
By altitude_definition on E, C, G, Line(E, center(d)) we get altitude(E, C, G) == Line(E, center(d))
By altitude_definition on E, G, A, Line(E, center(d)) we get altitude(E, A, G) == Line(E, center(d))
By collinear_definition on midpoint(A, B), E, F we get E in Line(F, midpoint(A, B)), F in Line(E, midpoint(A, B)), Line(E, midpoint(A, B)) == Line(F, midpoint(A, B)), 0 == 2 * angle(E, midpoint(A, B), F) mod 360
By radical_axis_definition_v0 on line_intersection(Line(B, D), Line(F, center(d))), d, c we get power_of_a_point(line_intersection(Line(B, D), Line(F, center(d))), c) == power_of_a_point(line_intersection(Line(B, D), Line(F, center(d))), d)
By isosceles_triangle_properties on midpoint(C, D), A, B we get distance(A, midpoint(C, D)) == distance(B, midpoint(C, D)), angle(A, B, midpoint(C, D)) == angle(midpoint(C, D), A, B) mod 360
By power_of_a_point_definition on D, E, A, Circle(A, C, E) we get log(distance(D, E)) + log(distance(A, D)) == log(power_of_a_point(D, Circle(A, C, E)))
By power_of_a_point_definition on C, E, B, d we get log(power_of_a_point(C, d)) == log(distance(C, E)) + log(distance(B, C))
By collinear_definition on midpoint(C, D), F, E we get F in Line(E, midpoint(C, D)), E in Line(F, midpoint(C, D)), Line(E, midpoint(C, D)) == Line(F, midpoint(C, D)), 0 == 2 * angle(F, midpoint(C, D), E) mod 360
By isosceles_triangle_properties on midpoint(A, B), C, D we get distance(C, midpoint(A, B)) == distance(D, midpoint(A, B)), angle(C, D, midpoint(A, B)) == angle(midpoint(A, B), C, D) mod 360
By isosceles_triangle_properties on midpoint(C, D), B, A we get distance(A, midpoint(C, D)) == distance(B, midpoint(C, D)), angle(B, A, midpoint(C, D)) == angle(midpoint(C, D), B, A) mod 360
By power_of_a_point_definition on midpoint(C, D), D, C, c we get log(power_of_a_point(midpoint(C, D), c)) == log(distance(D, midpoint(C, D))) + log(distance(C, midpoint(C, D)))
By power_of_a_point_definition on midpoint(A, B), B, A, c we get log(power_of_a_point(midpoint(A, B), c)) == log(distance(B, midpoint(A, B))) + log(distance(A, midpoint(A, B)))
By power_of_a_point_definition on B, C, E, Circle(A, C, E) we get log(distance(B, C)) + log(distance(B, E)) == log(power_of_a_point(B, Circle(A, C, E)))
By isosceles_triangle_altitude_v3 on midpoint(A, B), C, D we get identical(perpendicular_bisector(C, D), internal_angle_bisector(C, midpoint(A, B), D), perpendicular_line(midpoint(A, B), Line(C, D)))
By isosceles_triangle_altitude_v3 on midpoint(A, B), D, C we get identical(perpendicular_bisector(C, D), internal_angle_bisector(C, midpoint(A, B), D), perpendicular_line(midpoint(A, B), Line(C, D)))
By isosceles_triangle_altitude_v3 on midpoint(C, D), B, A we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, midpoint(C, D), B), perpendicular_line(midpoint(C, D), Line(A, B)))
By isosceles_triangle_altitude_v3 on midpoint(C, D), A, B we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, midpoint(C, D), B), perpendicular_line(midpoint(C, D), Line(A, B)))
By perpendicular_bisector_sufficient_conditions on B, D, F, center(d) we get Line(F, center(d)) == perpendicular_bisector(B, D)
By isosceles_triangle_altitude_v1 on F, B, D we get identical(perpendicular_bisector(B, D), internal_angle_bisector(B, F, D), perpendicular_line(F, Line(B, D)))
By isosceles_triangle_altitude_v1 on center(d), D, B we get identical(perpendicular_bisector(B, D), internal_angle_bisector(B, center(d), D), perpendicular_line(center(d), Line(B, D)))
By isosceles_triangle_altitude_v1 on center(d), B, D we get identical(perpendicular_bisector(B, D), internal_angle_bisector(B, center(d), D), perpendicular_line(center(d), Line(B, D)))
By isosceles_triangle_altitude_v1 on F, D, B we get identical(perpendicular_bisector(B, D), internal_angle_bisector(B, F, D), perpendicular_line(F, Line(B, D)))
