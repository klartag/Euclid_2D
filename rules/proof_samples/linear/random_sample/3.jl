Assumptions:
A, B, C, D, E, F, G: Point
f, g, h, i, j, k, l: Line
distinct(A, B, C, D, E, F, G)
distinct(f, g, h, i, j, k, l)
f == Line(A, B)
g == Line(B, C)
h == parallel_line(C, f)
i == parallel_line(A, g)
D == line_intersection(h, i)
j == internal_angle_bisector(B, C, D)
E == projection(D, j)
k == Line(D, E)
l == external_angle_bisector(B, A, D)
F == line_intersection(f, k)
G == projection(B, l)

Embedding:
C := {"x": "0.7960043912398899745852531850687228143215179443359375", "y": "-1.0340010921032245505557511933147907257080078125"}
B := {"x": "0.968393742435021298575748005532659590244293212890625", "y": "0.8770345483054793334076748578809201717376708984375"}
g := {"point": {"x": "0.968393742435021298575748005532659590244293212890625", "y": "0.8770345483054793334076748578809201717376708984375"}, "direction": {"x": "-0.1723893511951313239904948204639367759227752685546875", "y": "-1.9110356404087038839634260511957108974456787109375"}}
A := {"x": "0.176085851587959696384899643817334435880184173583984375", "y": "0.042665163088739486985101478921933448873460292816162109375"}
i := {"point": {"x": "0.176085851587959696384899643817334435880184173583984375", "y": "0.042665163088739486985101478921933448873460292816162109375"}, "direction": {"x": "-0.1723893511951313239904948204639367759227752685546875", "y": "-1.9110356404087038839634260511957108974456787109375"}}
f := {"point": {"x": "0.176085851587959696384899643817334435880184173583984375", "y": "0.042665163088739486985101478921933448873460292816162109375"}, "direction": {"x": "0.792307890847061602190848361715325154364109039306640625", "y": "0.834369385216739846422573378958986722864210605621337890625"}}
h := {"point": {"x": "0.7960043912398899745852531850687228143215179443359375", "y": "-1.0340010921032245505557511933147907257080078125"}, "direction": {"x": "0.792307890847061602190848361715325154364109039306640625", "y": "0.834369385216739846422573378958986722864210605621337890625"}}
D := {"x": "0.003696500392828372394404823353397659957408905029296875", "y": "-1.868370477319964396978324572273777448572218418121337890625"}
l := {"point": {"x": "0.176085851587959696384899643817334435880184173583984375", "y": "0.042665163088739486985101478921933448873460292816162109375"}, "direction": {"x": "0.77843523864011080718623117469308209634443224027768955557613860104492159175872298684195038044248633530771392621326897118098284314982756929955305930053436134456255916956622430093033245764606175177517475277473082992830398527874505512686825880289698815521246740670174575737079432665215518879586501370877007196349545475296226047112086351036635334006867734648740069406859430568078646437464997756488946923483252576442003584099343468602768169836735693678757890843380842248326229631134428330025989514163921140442338258340034023777085066565874415262498209366611222312654059942360215785202131635498708408085677529422880340723888312925601571994508893683130290702600663991836408016425795508553954323756512805640379413036675844746164927046730849339345769467776528389731415635145919918114371943283937919512514341104690148295840527478973763931091431334661659082676313652108840964643432851820676038982998496073554144787105029982162571838881613689214044431037453595983961417989911706544064846589774851298489222418947736403251703809310979885784766376921923142673851724831810972033436458134673814377826921871059071747466693378835564527156359672322061981689408009968482194575029733266971997539342619373924023584302372187252396925550514231655295317380863108672007718272249831296098257596950571149803894462538535077257123211431420487163101451011252609763992379553026485668144951083160046904357909724621088081674602688399264666563960749772697813320009687383785201393203170268422635528113519787200478966653252252454250461523615880459547614812640168094240341533916603972444665141264747165236530952037709574144919661904194480098234236301475984394461140742888004589851597011760500578468510688609837216597260430805246646307549594062159658088680457407788639926210900950038613275568203521412976491246172376752657552520293624555236815270496639644750394236105578136767266822162841594132033868920228874142557764120047669023010663867236263710058816273129255686499139644938747315714017130894289997416100615253173172161906022668598818164", "y": "1.7211042680992439372575798648785928904446433584412840237569961280556867811148071005772211899327898803096937222430409996013459111187404056182080070826124689280210725689935768994666185027767383458010426821753456257173793863963083761255475830947410505059680091116510498507203717007243333230106167647424621250756726576573799339530633427653569969726125728408421963279221520107103063291645715299931904673413425109174572477468584987837298593831639725355402219114450403449428681574417522375839270084262799343204830278663039974870202051305683647290253780495722135512188156764071070631742716739362293810413758904340249069636629131251803092671435380003922542309500981998955372585060195246145490426426706038917263749016846911441900060025510432816828538587661034704786202986169891489506052644884880925537092155320338620976159217248578665248947005839059305194615692275887757220229024357724717466784901150905954115153807761935661033536201570597856251434635364754622338619427791295746671924126382569461105531555495734096517490400928522887800482036430067149184325739674283586312698019077220338264473130665171008304257334859099036194370994888526710700775781322525998623361119284835007873933978405167999985083839450746337298845294176878287292474195540895934702423145088975228348997967276568234005208534823497912907492570130220863057140268606714526518580771916372038606539368805710978279862926909838712717505073624213819523877635779049040964716385112891554639502386312593841524499018123203821826496091346129494799654733140867654873004871855315048857055644373219506849890983924836126198215456244182132010787601375720863206431264224132535916907652251640296210420035843545194528567721230518706265813752214286786179977879006856617330946080732050021367611975399034414978517577009695977278706358185518231655866758708217911083390106235631095912042394521824221015403078018114236465962149035585934297015178389637262207629371887422694236545621524364765844866135705933099823356754196306264859529968383351842539918971134792600945966"}}
j := {"point": {"x": "0.7960043912398899745852531850687228143215179443359375", "y": "-1.0340010921032245505557511933147907257080078125"}, "direction": {"x": "-0.59875025250090519342859038548722560706197432059943249982100882900651537105054246092055728441656838547818506616496272039801218548570731171525344102976952328420321299731978621623053142895076495030732890091776953219370356485382291819657603666601247820355057456300913007517117667165162459698078377989032488936818138591678962311103593442234798860916041409300345668150770545998043336152089864523125079398675776547715719124727010865715526701383212367506154328886970352250523139355376908958011239471311623993898531460693098567923008954274898380257815788238452722454968864010094720224891834535022532768330630436473044203061251426482610414745038260546426836000195456351945414489981927461425295923229598652187143207683123988303458479417521899834490350882412644744084791190254385937235581595659616715705838943914597597432021622925990635807579984037765643266095191330338412319958238527601374574144863308599389018313065028282798001771457976152162744244226789103170228450757300032069015709608521166948303426224955895816703662048688552962873221288014308619073362818393992892233827554283450707347704794659026008749665155550517190186051149230099246587408476409755465313609338230010187162837554120425207287455277269655088207447284690567570303043369948655759858351750318796827151541789464074507722150619651788925713998547561666225365243384977147631085515492584519759439040253324472653109057448003216284046639157299372357136250224322738737252238158615545873787773889512374203910262165152895309356699232512313575744506476593919751312381363954657012932413328050974335324335129455087306558164581436050499050309374964686584160402053632803212144996744345195197722074012688888227735235828713498143904602971305117798712015115188935813507830987738552934378187626689117997475615750396171185023730767089423137334842673385957309983255654019768277976857339767014850297668872394492176464758719189678819024766506408513244556018780369764225455891217025698981938980013095203793282146746466106695188559166526992553994674397033663820563668", "y": "0.27080770429214502074530679467525776618877691619379115023432917343590864458349737529570383759792281102429110022619402854481277798796224392585575772412506747918841044741374824114258976020055628921864308315211761752938896055285758251885156578681555509941560435364252118538072416946461465648966039863894318774012511999868748966366892061299017821609410699853222854846351080493046569729676901722442902046024102194200942981387240144575054479141130382051731931680202955046684625503219924616949041965469593441722397254591231465987697012809185163672996115459589422662100554657514857965560327030437074818205648027452720177402656349012755358750420684339600394583244882863694058560045866459003201664100466505446457721443939129798787032916280105083261647850424290461208452585582392061376546451964182759967165341682300974514336455492988317714572168146546500209354405672231068848441256555997271108553070287091211490181919025717143346222918198722959224245012679832445501129761749881790844210235456660966453926329048252293562291582293673535076811254308381322846332741848920172739763581984985581333921400939474185133374966795038928573223756709096972472968066246855295448876744669793603039783976879928987522677307329853330116590869682992460425466157120098549386030333545889986019035217245736796983268279155787554654084973469304838392061017437955292892078839345623322703750656470135626932730660184736796757907973602913631110101680528330403105956486070204390634960482817363260208852388345418866222251091224113931485294786629748881632504568446807161367577216530204334466884037681953117574929854065870367091004656080287958668896216092212162985845994039060363023439752259693668847890055720872581797792190783328403435393908176548723333195080408012153343671001703865234648880994183553661601247650049085995743887078430809239177359144560533453294258466789067411776983513331360845930424716467062499363771739447015716907577141447151380220513899617604526130698734711958628041194211850372402760447848355264314090086294847433851921271"}}
E := {"x": "0.45153768522623908878454478403293954106401892641915062032455642588694120938391007491225396457030716402838935343300245186661850258833438140412702557487909308299699367234791591808458954196042025328654659845385589992148516611373589306459291322966321814555011206048108600361373579243573289667496933588031314916211825460530903826002709943920173815893173755424992081499990641284864403012517746123900394818540332554698261007370430227810638666795773872387005488085431703381733643044892697870539666221378083921670903382318276865713470518671390808898010266918392647050933402074285826296803993407451409447241283207595972650790634002231033015835523268412893670042628427178083019908843100792130133062786155060754278921101661914605146005308366543591662238069215022938179549069919792848462764248031808008440170999295547608704665366697194256033621451267265983435170773367140542456786763929406554043724337691087311232718433853136289566799972043029225814296460149878018366309368767676414674866720322545443860360632461787775571566502475960967777872220973717381243134742575885047836452969776033774590519735246467983577536420480840060667820844834725826069054659047209790634758497628851231710170736115629640833626915097600126974629070594404128731136495745787910875188335790584341565121820354208762935269889358527218276927230749848440382961450009808884900993509991572892238458402140953161934318112446646149537093765768854262212224871409486129746569579437230852780806186134514644729295331405066471323820795745272737202406972073633346856602462084922768556592886749967304557710924480485056962727713960396220830268536506896345510893827764450606997352836930116920128674925194118236104702422285215368494267378768960242281133836799769053310046551998983668921929149272371065036112474138823799684429030780058592169170852208030528265503245389552677446070960402807314674982522680757693427950713998616621237254052130610751693562700661691915923325211885166819879000508082864909349733977986083196942232450445822423212866486815975807446239", "y": "-0.87820284822608648710393148680360172213090948805611857724737736589356463988659900105015878122931340733501015134654247635527631804145043140125316281239362887999691406940173435834546751131999348490462604091336244075561801590474512258130864351949014594302658578393374236328952372175290084868516744161969511249839073935338141860909459178301663928962709990705099908022237719828291383486119718956751573688135452528486175955249657216592826409993452855498857159772857199772312175882866097508724388148101109757601868092909017318104149731746673652814202407399696035147766441367389446069967979461501233513635625392036391089515184959836337741888453146504390203635114702006793358146806774129346106763211459378747471320201965526537775765356766954597772086369369847348328839626501045778149725740082296648973897333867608778966150092752723853588941792004090629052513573111824172387693223814593285822950494849597759948589129191958302428007774728043070654295757530222136670794613115027235972215211415500175001765820626585486919585274704604565147417255331405519880303345166947146725602719556140249909909188146979132605197156205619441944186734025288737007102999421128088954907598841882233543750662742126989663328178717465094374454918500260765063550058796777617090874648052578422765475129930100077345044692304923368103901511558368701471139389913829278170324322458961318712630446176427225106134666237340857104528900786136670869071402995475617822768957570753651067105224608426294110103987721179902217479090950571006245009183930894768884015259838191813462436723679690067451593104863741127203003541124930188877918683859683561860240899588253098542087476520200680531640052477184514571539903875327504382703641573280319658351399019661666440124217159065187545976415376247327905343499618721116050220729590287466666594575941441586332064012387667616176637888049061546159594359953352302752138787329837971337723913481046691343365442141368853500214880237644379579355595649789197219800472840687879354145685738567632107341326444711381854694"}
k := {"point": {"x": "0.003696500392828372394404823353397659957408905029296875", "y": "-1.868370477319964396978324572273777448572218418121337890625"}, "direction": {"x": "0.44784118483341071639013996067954188110661002138985374532455642588694120938391007491225396457030716402838935343300245186661850258833438140412702557487909308299699367234791591808458954196042025328654659845385589992148516611373589306459291322966321814555011206048108600361373579243573289667496933588031314916211825460530903826002709943920173815893173755424992081499990641284864403012517746123900394818540332554698261007370430227810638666795773872387005488085431703381733643044892697870539666221378083921670903382318276865713470518671390808898010266918392647050933402074285826296803993407451409447241283207595972650790634002231033015835523268412893670042628427178083019908843100792130133062786155060754278921101661914605146005308366543591662238069215022938179549069919792848462764248031808008440170999295547608704665366697194256033621451267265983435170773367140542456786763929406554043724337691087311232718433853136289566799972043029225814296460149878018366309368767676414674866720322545443860360632461787775571566502475960967777872220973717381243134742575885047836452969776033774590519735246467983577536420480840060667820844834725826069054659047209790634758497628851231710170736115629640833626915097600126974629070594404128731136495745787910875188335790584341565121820354208762935269889358527218276927230749848440382961450009808884900993509991572892238458402140953161934318112446646149537093765768854262212224871409486129746569579437230852780806186134514644729295331405066471323820795745272737202406972073633346856602462084922768556592886749967304557710924480485056962727713960396220830268536506896345510893827764450606997352836930116920128674925194118236104702422285215368494267378768960242281133836799769053310046551998983668921929149272371065036112474138823799684429030780058592169170852208030528265503245389552677446070960402807314674982522680757693427950713998616621237254052130610751693562700661691915923325211885166819879000508082864909349733977986083196942232450445822423212866486815975807446239", "y": "0.99016762909387790987439308547017572644130893006521931337762263410643536011340099894984121877068659266498984865345752364472368195854956859874683718760637112000308593059826564165453248868000651509537395908663755924438198409525487741869135648050985405697341421606625763671047627824709915131483255838030488750160926064661858139090540821698336071037290009294900091977762280171708616513880281043248426311864547471513824044750342783407173590006547144501142840227142800227687824117133902491275611851898890242398131907090982681895850268253326347185797592600303964852233558632610553930032020538498766486364374607963608910484815040163662258111546853495609796364885297993206641853193225870653893236788540621252528679798034473462224234643233045402227913630630152651671160373498954221850274259917703351026102666132391221033849907247276146411058207995909370947486426888175827612306776185406714177049505150402240051410870808041697571992225271956929345704242469777863329205386884972764027784788584499824998234179373414513080414725295395434852582744668594480119696654833052853274397280443859750090090811853020867394802843794380558055813265974711262992897000578871911045092401158117766456249337257873010336671821282534905625545081499739234936449941203222382909125351947421577234524870069899922654955307695076631896098488441631298528860610086170721829675677541038681287369553823572774893865333762659142895471099213863329130928597004524382177231042429246348932894775391573705889896012278820097782520909049428993754990816069105231115984740161808186537563276320309932548406895136258872796996458875069811122081316140316438139759100411746901457912523479799319468359947522815485428460096124672495617296358426719680341648600980338333559875782840934812454023584623752672094656500381278883949779270409712533333405424058558413667935987612332383823362111950938453840405640046647697247861212670162028662276086518953308656634557858631146499785119762355620420644404350210802780199527159312120645854314261432367892658673555288618145306"}}
G := {"x": "0.62392703642137041277503960449687631698679419497383812032455642588694120938391007491225396457030716402838935343300245186661850258833438140412702557487909308299699367234791591808458954196042025328654659845385589992148516611373589306459291322966321814555011206048108600361373579243573289667496933588031314916211825460530903826002709943920173815893173755424992081499990641284864403012517746123900394818540332554698261007370430227810638666795773872387005488085431703381733643044892697870539666221378083921670903382318276865713470518671390808898010266918392647050933402074285826296803993407451409447241283207595972650790634002231033015835523268412893670042628427178083019908843100792130133062786155060754278921101661914605146005308366543591662238069215022938179549069919792848462764248031808008440170999295547608704665366697194256033621451267265983435170773367140542456786763929406554043724337691087311232718433853136289566799972043029225814296460149878018366309368767676414674866720322545443860360632461787775571566502475960967777872220973717381243134742575885047836452969776033774590519735246467983577536420480840060667820844834725826069054659047209790634758497628851231710170736115629640833626915097600126974629070594404128731136495745787910875188335790584341565121820354208762935269889358527218276927230749848440382961450009808884900993509991572892238458402140953161934318112446646149537093765768854262212224871409486129746569579437230852780806186134514644729295331405066471323820795745272737202406972073633346856602462084922768556592886749967304557710924480485056962727713960396220830268536506896345510893827764450606997352836930116920128674925194118236104702422285215368494267378768960242281133836799769053310046551998983668921929149272371065036112474138823799684429030780058592169170852208030528265503245389552677446070960402807314674982522680757693427950713998616621237254052130610751693562700661691915923325211885166819879000508082864909349733977986083196942232450445822423212866486815975807446242", "y": "1.032832792182617396859494564392109175314769222881381422752622634106435360113400998949841218770686592664989848653457523644723681958549568598746837187606371120003085930598265641654532488680006515095373959086637559244381984095254877418691356480509854056973414216066257636710476278247099151314832558380304887501609260646618581390905408216983360710372900092949000919777622801717086165138802810432484263118645474715138240447503427834071735900065471445011428402271428002276878241171339024912756118518988902423981319070909826818958502682533263471857975926003039648522335586326105539300320205384987664863643746079636089104848150401636622581115468534956097963648852979932066418531932258706538932367885406212525286797980344734622242346432330454022279136306301526516711603734989542218502742599177033510261026661323912210338499072472761464110582079959093709474864268881758276123067761854067141770495051504022400514108708080416975719922252719569293457042424697778633292053868849727640277847885844998249982341793734145130804147252953954348525827446685944801196966548330528532743972804438597500900908118530208673948028437943805580558132659747112629928970005788719110450924011581177664562493372578730103366718212825349056255450814997392349364499412032223829091253519474215772345248700698999226549553076950766318960984884416312985288606100861707218296756775410386812873695538235727748938653337626591428954710992138633291309285970045243821772310424292463489328947753915737058898960122788200977825209090494289937549908160691052311159847401618081865375632763203099325484068951362588727969964588750698111220813161403164381397591004117469014579125234797993194683599475228154854284600961246724956172963584267196803416486009803383335598757828409348124540235846237526720946565003812788839497792704097125333334054240585584136679359876123323838233621119509384538404056400466476972478612126701620286622760865189533086566345578586311464997851197623556204206444043502108027801995271593121206458543142614323678926586735552886181453"}
F := {"x": "1.497354358179935236815826951365487632598318656219686260803697392818175742505417813291970512553008153470145401332840612527393111855515032509132121815075007036907222964098734024068228240689646557121928805808779913546657524853759937297258123477592794703101048785201114727341684675548715663766822571163183749803781294942162252289162945736662875020054441954181278671134289513999990167240848637839507151612465856598325678900427368521144780074519378449026543479147800728135626986002868057918920751979512953814816558584798734550302497789684297126779315228523906128086328796078998358151392095598904219804145145797325855438616267487126925780478855884148193364364950296098858403052645410890426451213238343867386615029634098445477912865333672867188730851656900075536161663932676909650501404671146050137316588982770908768754620975958267315333787617995457075936451866069288622197803060476042747970283608846413223860324429567863064017044034497097454536355182874894101856393318288574553155107089950225018324981077783946099704248149730110176415422419879653583905591506920881691234170722367134541986982924983393331456596173776851208008861228009514152137483722610763752338825874601283566187400746753646108865350404529001702462804215512697509599670750545459638163805393154290298155041354145516286725165549620210360675413315154152220003310119096879830209022482212002961494540085944943069424989473896193547877143841776769651279484148662732675873454293907986144424485255715900116576805576699358763490495483509433991482484807323812343436431052319419691673599415997580030670344980839271665847041147497978160501989640788954262309509797872410601569634293533061907629149486731472810559470618817456826247584544061885907407877775914134633470359193655898777566032090087056868723104004610763074853098459627449210449462276100780518395732396034782011219632762623405450577553655776083324864731733770595561331011474051278162329200442585231084159875525706770975361758675965088830369772024318958571160415135024127915828563919801001710131", "y": "1.4340762600712215088289278703254433289206616778944069641896352182041192793297966820844095105488247831845308295156195763547828754926717208588725425953663389916491858904050947730947430439012498554782273904308994479685707775261330080567968830237007496944261141124296548675691855919069330959689876526456908247852325544826796983993855663698224757216694385971936270024413701250049587036014079783673808024689463938205380395720834867448352056749972077171574752721649545974464979836808393555242731292996575848462825610252628416862198485802306237046598764014679832111094869548389641711430384266798495380844208968648815743056422344274878244838972888777268275035251233534534415178423233831327488650474406689854747943185724157620796767040825457734156098582095091019087983735622762226468983840287638055405751258326790613317481193244143491587077752633992013705533287283501734295612711250530547848386531592625011073172847414193588022858767555442184510098486300869186064881660988086935560922100764529828404398161239755835539006053384172955683772252466736373887988987061373179571540440702225800369091903088277384085448573464922672305519841586287676451499487260418935700690363535221831644296113092094368557592601821348241080787973747045513249311552255817389244668021587019212429836887298500524680386075730037271971012281093377136464280049303063101946445948801875261968084273667743959275741984636511397544471081393049628292826327948709526146129929165709441961274374918708552308292019405263205679173136563205298449892126220169877082826314181678347873943090656861275939981762384583302197221140585048139276630522790793136986149054236634754250802857538940251218302737481157071499372068474519408335951323552857108293647780083598851640040669916964975738924714676235508233667031688875327988483748669786558779349374830888097934010882806927005969598934695093352685191555618604786684963881971025136905158024848520900208752171779820751726548215206851331742898200003957664607429496024711197609270957156825387935924414926117179734242"}

Need to prove:
concyclic(A, E, F, G)

Proof:
By line_definition on B, F, f we get f == Line(B, F)
By line_definition on D, A, i we get i == Line(A, D)
By line_definition on F, E, k we get k == Line(E, F)
By line_definition on A, G, l we get l == Line(A, G)
By line_definition on C, D, h we get h == Line(C, D)
By line_definition on D, E, perpendicular_line(D, j) we get Line(D, E) == perpendicular_line(D, j)
By line_definition on C, E, j we get j == Line(C, E)
By line_definition on D, F, k we get k == Line(D, F)
By line_definition on B, G, perpendicular_line(B, l) we get Line(B, G) == perpendicular_line(B, l)
By line_definition on F, A, f we get f == Line(A, F)
By perpendicular_line_definition on G, perpendicular_line(B, l), l we get perpendicular_line(B, l) == perpendicular_line(G, l)
By perpendicular_line_definition on C, j, perpendicular_line(D, j) we get j == perpendicular_line(C, perpendicular_line(D, j))
By line_intersection_definition on A, l, i we get A == line_intersection(i, l)
By perpendicular_line_definition on E, j, perpendicular_line(D, j) we get j == perpendicular_line(E, perpendicular_line(D, j))
By line_intersection_definition on D, k, i we get D == line_intersection(i, k)
By perpendicular_line_definition on E, perpendicular_line(D, j), j we get perpendicular_line(D, j) == perpendicular_line(E, j)
By line_intersection_definition on B, f, perpendicular_line(B, l) we get B == line_intersection(f, perpendicular_line(B, l))
By line_intersection_definition on B, g, perpendicular_line(B, l) we get B == line_intersection(g, perpendicular_line(B, l))
By line_intersection_definition on B, f, g we get B == line_intersection(f, g)
By line_intersection_definition on D, h, k we get D == line_intersection(h, k)
By line_intersection_definition on C, h, j we get C == line_intersection(h, j)
By line_intersection_definition on A, l, f we get A == line_intersection(f, l)
By perpendicular_line_definition on G, l, perpendicular_line(B, l) we get l == perpendicular_line(G, perpendicular_line(B, l))
By line_intersection_definition on E, j, k we get E == line_intersection(j, k)
By line_intersection_definition on D, perpendicular_line(D, j), h we get D == line_intersection(h, perpendicular_line(D, j))
By line_intersection_definition on A, f, i we get A == line_intersection(f, i)
By line_intersection_definition on C, j, g we get C == line_intersection(g, j)
By line_intersection_definition on D, i, perpendicular_line(D, j) we get D == line_intersection(i, perpendicular_line(D, j))
By line_intersection_definition on C, g, h we get C == line_intersection(g, h)
By perpendicular_line_definition on A, l, perpendicular_line(B, l) we get l == perpendicular_line(A, perpendicular_line(B, l))
By line_uniqueness on E, D, k, perpendicular_line(D, j) we get k == perpendicular_line(D, j)
By parallel_line_definition on C, g, i we get g == parallel_line(C, i)
By parallel_line_definition on D, i, g we get i == parallel_line(D, g)
By parallel_line_definition on B, f, h we get f == parallel_line(B, h)
By parallel_line_definition on A, f, h we get f == parallel_line(A, h)
By parallel_line_definition on B, g, i we get g == parallel_line(B, i)
By parallel_line_definition on D, h, f we get h == parallel_line(D, f)
By parallel_line_definition on F, f, h we get f == parallel_line(F, h)
By in_imply_collinear on F, E, D we get collinear(D, E, F)
By in_imply_collinear on F, A, B we get collinear(A, B, F)
By angle_bisector_draw_angle_v1 on B, A, D we get exists(Line(A, B), Line(A, D))
By angle_bisector_draw_angle_v0 on B, C, D we get exists(Line(B, C), Line(C, D))
By angle_bisector_draw_angle_v1 on D, A, B we get exists(Line(A, B), Line(A, D))
By angle_bisector_draw_angle_v0 on D, C, B we get exists(Line(B, C), Line(C, D))
By concurrent_sufficient_conditions on g, Line(B, G), f we get concurrent(f, g, Line(B, G))
By concurrent_sufficient_conditions on f, Line(B, G), g we get concurrent(f, g, Line(B, G))
By concurrent_sufficient_conditions on Line(B, G), g, f we get concurrent(f, g, Line(B, G))
By concurrent_sufficient_conditions on Line(B, G), f, g we get concurrent(f, g, Line(B, G))
By concurrent_sufficient_conditions on f, g, Line(B, G) we get concurrent(f, g, Line(B, G))
By concurrent_sufficient_conditions on g, f, Line(B, G) we get concurrent(f, g, Line(B, G))
By perpendicular_line_definition on F, k, j we get k == perpendicular_line(F, j)
By projection_definition on A, G, Line(B, G) we get G == projection(A, Line(B, G))
By projection_definition on C, E, k we get E == projection(C, k)
By projection_definition on F, E, j we get E == projection(F, j)
By probably_between_and_collinear_implies_between on F, B, A we get between(A, B, F)
By probably_between_and_collinear_implies_between on F, E, D we get between(D, E, F)
By perpendicular_direction_conditions_v0_r on F, D, C, E we get 180 == 2 * direction(F, D) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on E, F, E, C we get 180 == 2 * direction(E, F) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on G, B, A, G we get 180 == 2 * direction(G, B) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on D, F, C, E we get 180 == 2 * direction(D, F) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on E, C, E, D we get 180 == 2 * direction(E, C) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on E, C, D, E we get 180 == 2 * direction(E, C) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on C, E, F, D we get 180 == 2 * direction(C, E) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on F, E, C, E we get 180 == 2 * direction(F, E) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on B, G, G, A we get 180 == 2 * direction(B, G) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on C, E, D, F we get 180 == 2 * direction(C, E) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on G, B, G, A we get 180 == 2 * direction(G, B) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on D, E, C, E we get 180 == 2 * direction(D, E) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on C, E, D, E we get 180 == 2 * direction(C, E) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on F, D, E, C we get 180 == 2 * direction(F, D) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on E, C, D, F we get 180 == 2 * direction(E, C) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on D, F, E, C we get 180 == 2 * direction(D, F) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on A, G, G, B we get 180 == 2 * direction(A, G) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on G, A, B, G we get 180 == 2 * direction(G, A) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on E, C, E, F we get 180 == 2 * direction(E, C) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on E, C, F, D we get 180 == 2 * direction(E, C) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on A, G, B, G we get 180 == 2 * direction(A, G) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on E, D, E, C we get 180 == 2 * direction(E, D) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on D, E, E, C we get 180 == 2 * direction(D, E) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on G, A, G, B we get 180 == 2 * direction(G, A) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on F, E, E, C we get 180 == 2 * direction(F, E) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on E, C, F, E we get 180 == 2 * direction(E, C) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on E, D, C, E we get 180 == 2 * direction(E, D) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on C, E, F, E we get 180 == 2 * direction(C, E) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on E, F, C, E we get 180 == 2 * direction(E, F) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on C, E, E, D we get 180 == 2 * direction(C, E) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on C, E, E, F we get 180 == 2 * direction(C, E) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on B, G, A, G we get 180 == 2 * direction(B, G) - 2 * direction(A, G) mod 360
By altitude_definition on A, B, G, l we get l == altitude(A, B, G)
By same_angle_v0 on A, B, F, G we get angle(B, A, G) == angle(F, A, G) mod 360
By same_angle_v2 on B, F, A, G we get angle(F, B, G) == angle(A, B, G) + 180 mod 360
By same_angle_v3 on B, A, F, C we get angle(A, B, C) == angle(F, B, C) + 180 mod 360
By same_angle_v1 on D, F, E, C we get angle(E, D, C) == angle(F, D, C) mod 360
By same_angle_v1 on A, F, B, D we get angle(B, A, D) == angle(F, A, D) mod 360
By same_angle_v3 on E, D, F, C we get angle(D, E, C) == angle(F, E, C) + 180 mod 360
By same_angle_v0 on D, E, F, A we get angle(E, D, A) == angle(F, D, A) mod 360
By same_angle_v0 on F, B, A, E we get angle(A, F, E) == angle(B, F, E) mod 360
By same_angle_v1 on F, D, E, B we get angle(D, F, B) == angle(E, F, B) mod 360
By same_angle_v0 on F, B, A, D we get angle(A, F, D) == angle(B, F, D) mod 360
By same_angle_v1 on F, D, E, A we get angle(D, F, A) == angle(E, F, A) mod 360
By altitude_definition on C, E, F, j we get j == altitude(C, E, F)
By collinear_definition on A, B, F we get B in Line(A, F), F in Line(A, B), Line(A, B) == Line(A, F), 0 == 2 * angle(B, A, F) mod 360
By altitude_definition on D, E, C, k we get k == altitude(D, C, E)
By perpendicular_angle_conditions_v0 on F, E, C we get angle(F, E, C) == orientation(C, F, E) mod 360
By collinear_definition on A, F, B we get F in Line(A, B), B in Line(A, F), Line(A, B) == Line(A, F), 0 == 2 * angle(F, A, B) mod 360
By collinear_definition on B, A, F we get A in Line(B, F), F in Line(A, B), Line(A, B) == Line(B, F), 0 == 2 * angle(A, B, F) mod 360
By altitude_definition on C, D, E, j we get j == altitude(C, D, E)
By altitude_definition on B, G, A, Line(B, G) we get Line(B, G) == altitude(B, A, G)
By perpendicular_angle_conditions_v0 on D, E, C we get angle(D, E, C) == orientation(C, D, E) mod 360
By altitude_definition on C, F, D, j we get j == altitude(C, D, F)
By collinear_definition on B, F, A we get F in Line(A, B), A in Line(B, F), Line(A, B) == Line(B, F), 0 == 2 * angle(F, B, A) mod 360
By altitude_definition on F, E, C, k we get k == altitude(F, C, E)
By collinear_definition on F, D, E we get D in Line(E, F), E in Line(D, F), Line(D, F) == Line(E, F), 0 == 2 * angle(D, F, E) mod 360
By perpendicular_angle_conditions_v0 on B, G, A we get angle(B, G, A) == orientation(A, B, G) mod 360
By perpendicular_angle_conditions_v0 on A, G, B we get angle(A, G, B) == orientation(A, G, B) mod 360
By collinear_definition on D, E, F we get E in Line(D, F), F in Line(D, E), Line(D, E) == Line(D, F), 0 == 2 * angle(E, D, F) mod 360
By collinear_definition on F, A, B we get A in Line(B, F), B in Line(A, F), Line(A, F) == Line(B, F), 0 == 2 * angle(A, F, B) mod 360
By collinear_definition on F, E, D we get E in Line(D, F), D in Line(E, F), Line(D, F) == Line(E, F), 0 == 2 * angle(E, F, D) mod 360
By collinear_definition on D, F, E we get F in Line(D, E), E in Line(D, F), Line(D, E) == Line(D, F), 0 == 2 * angle(F, D, E) mod 360
By collinear_definition on E, F, D we get F in Line(D, E), D in Line(E, F), Line(D, E) == Line(E, F), 0 == 2 * angle(F, E, D) mod 360
By perpendicular_angle_conditions_v0 on C, E, D we get angle(C, E, D) == orientation(C, E, D) mod 360
By collinear_definition on F, B, A we get B in Line(A, F), A in Line(B, F), Line(A, F) == Line(B, F), 0 == 2 * angle(B, F, A) mod 360
By collinear_definition on E, D, F we get D in Line(E, F), F in Line(D, E), Line(D, E) == Line(E, F), 0 == 2 * angle(D, E, F) mod 360
By perpendicular_angle_conditions_v0 on C, E, F we get angle(C, E, F) == orientation(C, E, F) mod 360
By external_angle_bisector_definition_v0 on B, G, D, A we get 180 == angle(B, A, G) + angle(D, A, G) mod 360
By internal_angle_bisector_definition_v0 on B, E, D, C we get angle(B, C, E) == angle(E, C, D) mod 360
By internal_angle_bisector_definition_v0 on D, E, B, C we get angle(D, C, E) == angle(E, C, B) mod 360
By parallel_line_angles_reverse_v2 on B, C, D, A we get angle(B, C, D) == angle(A, D, C) + 180 mod 360
By parallel_line_angles_reverse_v0 on A, F, D, C we get angle(A, F, D) == angle(C, D, F) mod 360
By parallel_line_angles_reverse_v0 on B, F, D, C we get angle(B, F, D) == angle(C, D, F) mod 360
By parallel_line_angles_reverse_v1 on F, B, C, D we get angle(D, C, B) == angle(F, B, C) mod 360
By parallel_line_angles_reverse_v2 on D, A, B, C we get angle(D, A, B) == angle(C, B, A) + 180 mod 360
By parallel_line_angles_reverse_v2 on A, B, C, D we get angle(A, B, C) == angle(D, C, B) + 180 mod 360
By parallel_line_angles_reverse_v3 on A, D, C, B we get angle(A, D, C) == angle(B, C, D) + 180 mod 360
By parallel_line_angles_reverse_v2 on C, D, A, F we get angle(C, D, A) == angle(F, A, D) + 180 mod 360
By parallel_line_angles_reverse_v3 on F, A, D, C we get angle(F, A, D) == angle(C, D, A) + 180 mod 360
By parallel_line_angles_reverse_v3 on C, B, A, D we get angle(C, B, A) == angle(D, A, B) + 180 mod 360
By parallel_line_angles_reverse_v2 on C, D, A, B we get angle(C, D, A) == angle(B, A, D) + 180 mod 360
By parallel_line_angles_reverse_v3 on B, A, D, C we get angle(B, A, D) == angle(C, D, A) + 180 mod 360
By parallel_line_angles_reverse_v3 on D, C, B, A we get angle(D, C, B) == angle(A, B, C) + 180 mod 360
By parallelogram_parallel_definition on A, D, C, B we get parallelogram(A, B, C, D)
By parallelogram_parallel_definition on C, D, A, B we get parallelogram(A, B, C, D)
By parallelogram_parallel_definition on D, C, B, A we get parallelogram(A, B, C, D)
By parallelogram_parallel_definition on B, A, D, C we get parallelogram(A, B, C, D)
By parallelogram_parallel_definition on B, C, D, A we get parallelogram(A, B, C, D)
By parallelogram_parallel_definition on A, B, C, D we get parallelogram(A, B, C, D)
By parallelogram_parallel_definition on D, A, B, C we get parallelogram(A, B, C, D)
By parallelogram_parallel_definition on C, B, A, D we get parallelogram(A, B, C, D)
By between_imply_not_between on D, E, F we get collinear_and_not_between(E, D, F)
By between_imply_not_between on F, E, D we get collinear_and_not_between(D, F, E)
By between_imply_not_between on A, B, F we get collinear_and_not_between(B, A, F)
By between_imply_not_between on F, B, A we get collinear_and_not_between(A, F, B)
By reverse_direction on B, F we get 180 == direction(B, F) - direction(F, B) mod 360
By between_imply_segment_sum on F, B, A we get distance(A, F) == distance(B, F) + distance(A, B)
By reverse_direction on A, D we get 180 == direction(A, D) - direction(D, A) mod 360
By reverse_direction on F, A we get 180 == direction(F, A) - direction(A, F) mod 360
By reverse_direction on B, A we get 180 == direction(B, A) - direction(A, B) mod 360
By between_imply_segment_sum on D, E, F we get distance(D, F) == distance(D, E) + distance(E, F)
By reverse_direction on D, E we get 180 == direction(D, E) - direction(E, D) mod 360
By reverse_direction on E, D we get 180 == direction(E, D) - direction(D, E) mod 360
By reverse_direction on E, C we get 180 == direction(E, C) - direction(C, E) mod 360
By reverse_direction on B, G we get 180 == direction(B, G) - direction(G, B) mod 360
By reverse_direction on C, B we get 180 == direction(C, B) - direction(B, C) mod 360
By reverse_direction on F, D we get 180 == direction(F, D) - direction(D, F) mod 360
By reverse_direction on A, G we get 180 == direction(A, G) - direction(G, A) mod 360
By reverse_direction on A, B we get 180 == direction(A, B) - direction(B, A) mod 360
By reverse_direction on G, A we get 180 == direction(G, A) - direction(A, G) mod 360
By reverse_direction on C, E we get 180 == direction(C, E) - direction(E, C) mod 360
By reverse_direction on D, C we get 180 == direction(D, C) - direction(C, D) mod 360
By reverse_direction on D, F we get 180 == direction(D, F) - direction(F, D) mod 360
By reverse_direction on F, B we get 180 == direction(F, B) - direction(B, F) mod 360
By reverse_direction on E, F we get 180 == direction(E, F) - direction(F, E) mod 360
By reverse_direction on G, B we get 180 == direction(G, B) - direction(B, G) mod 360
By reverse_direction on D, A we get 180 == direction(D, A) - direction(A, D) mod 360
By reverse_direction on B, C we get 180 == direction(B, C) - direction(C, B) mod 360
By reverse_direction on C, D we get 180 == direction(C, D) - direction(D, C) mod 360
By reverse_direction on F, E we get 180 == direction(F, E) - direction(E, F) mod 360
By reverse_direction on A, F we get 180 == direction(A, F) - direction(F, A) mod 360
By external_angle_bisector_definition_v0_r on C, D, C, E we get Line(D, E) == external_angle_bisector(C, E, C)
By external_angle_bisector_definition_v0_r on D, G, F, A we get Line(A, G) == external_angle_bisector(D, A, F)
By external_angle_bisector_definition_v0_r on A, B, A, G we get Line(B, G) == external_angle_bisector(A, G, A)
By external_angle_bisector_definition_v0_r on D, C, D, E we get Line(C, E) == external_angle_bisector(D, E, D)
By external_angle_bisector_definition_v0_r on F, C, F, E we get Line(C, E) == external_angle_bisector(F, E, F)
By external_angle_bisector_definition_v0_r on C, F, C, E we get Line(E, F) == external_angle_bisector(C, E, C)
By internal_angle_bisector_definition_v0_r on F, E, F, D we get Line(D, E) == internal_angle_bisector(F, D, F)
By internal_angle_bisector_definition_v0_r on D, E, D, F we get Line(E, F) == internal_angle_bisector(D, F, D)
By external_angle_bisector_definition_v0_r on B, A, B, G we get Line(A, G) == external_angle_bisector(B, G, B)
By internal_angle_bisector_definition_v0_r on E, D, E, F we get Line(D, F) == internal_angle_bisector(E, F, E)
By internal_angle_bisector_definition_v0_r on F, C, D, E we get Line(C, E) == internal_angle_bisector(D, E, F)
By internal_angle_bisector_definition_v0_r on B, F, B, A we get Line(A, F) == internal_angle_bisector(B, A, B)
By internal_angle_bisector_definition_v0_r on D, F, D, E we get Line(E, F) == internal_angle_bisector(D, E, D)
By internal_angle_bisector_definition_v0_r on F, D, F, E we get Line(D, E) == internal_angle_bisector(F, E, F)
By internal_angle_bisector_definition_v0_r on A, F, A, B we get Line(B, F) == internal_angle_bisector(A, B, A)
By internal_angle_bisector_definition_v0_r on E, F, E, D we get Line(D, F) == internal_angle_bisector(E, D, E)
By internal_angle_bisector_definition_v0_r on F, A, F, B we get Line(A, B) == internal_angle_bisector(F, B, F)
By internal_angle_bisector_definition_v0_r on B, A, B, F we get Line(A, F) == internal_angle_bisector(B, F, B)
By internal_angle_bisector_definition_v0_r on A, B, A, F we get Line(B, F) == internal_angle_bisector(A, F, A)
By internal_angle_bisector_definition_v0_r on F, B, F, A we get Line(A, B) == internal_angle_bisector(F, A, F)
By sas_congruence on A, D, C, C, B, A we get congruent_triangles(A, B, C, C, D, A)
By sas_congruence on C, D, A, A, B, C we get congruent_triangles(A, B, C, C, D, A)
By sas_congruence on A, B, C, C, D, A we get congruent_triangles(A, B, C, C, D, A)
By sas_congruence on B, A, D, D, C, B we get congruent_triangles(A, B, D, C, D, B)
By sas_congruence on D, A, B, B, C, D we get congruent_triangles(A, B, D, C, D, B)
By sas_congruence on C, B, A, A, D, C we get congruent_triangles(A, B, C, C, D, A)
By sas_congruence on B, C, D, D, A, B we get congruent_triangles(A, B, D, C, D, B)
By sas_congruence on D, C, B, B, A, D we get congruent_triangles(A, B, D, C, D, B)
By line_intersection_definition on A, Line(A, C), i we get A == line_intersection(i, Line(A, C))
By line_intersection_definition on A, Line(A, C), f we get A == line_intersection(f, Line(A, C))
By line_intersection_definition on B, Line(B, D), g we get B == line_intersection(g, Line(B, D))
By line_intersection_definition on B, Line(B, D), Line(B, G) we get B == line_intersection(Line(B, D), Line(B, G))
By line_intersection_definition on B, Line(B, D), f we get B == line_intersection(f, Line(B, D))
By line_intersection_definition on D, Line(B, D), k we get D == line_intersection(k, Line(B, D))
By line_intersection_definition on C, g, Line(A, C) we get C == line_intersection(g, Line(A, C))
By line_intersection_definition on C, h, Line(A, C) we get C == line_intersection(h, Line(A, C))
By line_intersection_definition on D, i, Line(B, D) we get D == line_intersection(i, Line(B, D))
By line_intersection_definition on A, l, Line(A, C) we get A == line_intersection(l, Line(A, C))
By line_intersection_definition on D, h, Line(B, D) we get D == line_intersection(h, Line(B, D))
By line_intersection_definition on C, Line(A, C), j we get C == line_intersection(j, Line(A, C))
By perpendicular_direction_conditions_v0 on D, F, G, B we get perpendicular(Line(B, G), Line(D, F))
By perpendicular_direction_conditions_v0 on B, G, F, E we get perpendicular(Line(B, G), Line(E, F))
By perpendicular_direction_conditions_v0 on D, E, G, B we get perpendicular(Line(B, G), Line(D, E))
By same_angle_v2 on B, A, F, D we get angle(A, B, D) == angle(F, B, D) + 180 mod 360
By same_angle_v0 on D, E, F, B we get angle(E, D, B) == angle(F, D, B) mod 360
By same_angle_v1 on A, B, F, C we get angle(B, A, C) == angle(F, A, C) mod 360
By perpendicular_direction_conditions_v0 on A, G, E, C we get perpendicular(Line(A, G), Line(C, E))
By divide_by_2_mod_180_v3 on E, F, A, D, A, G we get angle(E, F, A) == angle(D, A, G) + 180 mod 360
By divide_by_2_mod_180_v0 on F, D, A, F, A, G we get angle(F, A, G) == angle(F, D, A) mod 360
By divide_by_2_mod_180_v2 on A, F, E, G, A, D we get angle(A, F, E) == angle(G, A, D) + 180 mod 360
By divide_by_2_mod_180_v0 on C, D, E, F, A, G we get angle(C, D, E) == angle(F, A, G) mod 360
By divide_by_2_mod_180_v1 on A, B, G, D, C, E we get angle(A, B, G) == angle(D, C, E) mod 360
By divide_by_2_mod_180_v1 on E, F, A, G, A, B we get angle(E, F, A) == angle(G, A, B) mod 360
By divide_by_2_mod_180_v1 on G, A, B, A, D, F we get angle(A, D, F) == angle(G, A, B) mod 360
By divide_by_2_mod_180_v2 on B, C, E, G, B, F we get angle(B, C, E) == angle(G, B, F) + 180 mod 360
By divide_by_2_mod_180_v1 on F, D, C, G, A, F we get angle(F, D, C) == angle(G, A, F) mod 360
By divide_by_2_mod_180_v1 on G, A, F, D, F, B we get angle(D, F, B) == angle(G, A, F) mod 360
By parallel_line_angles_reverse_v2 on C, D, B, F we get angle(C, D, B) == angle(F, B, D) + 180 mod 360
By parallel_line_angles_reverse_v3 on F, B, D, C we get angle(F, B, D) == angle(C, D, B) + 180 mod 360
By divide_by_2_mod_180_v0 on A, F, E, F, A, G we get angle(A, F, E) == angle(F, A, G) mod 360
By divide_by_2_mod_180_v0 on E, D, A, F, A, G we get angle(E, D, A) == angle(F, A, G) mod 360
By divide_by_2_mod_180_v2 on D, A, G, F, D, C we get angle(D, A, G) == angle(F, D, C) + 180 mod 360
By divide_by_2_mod_180_v0 on B, A, G, C, D, F we get angle(B, A, G) == angle(C, D, F) mod 360
By parallel_line_angles_reverse_v1 on D, C, A, F we get angle(D, C, A) == angle(F, A, C) mod 360
By divide_by_2_mod_180_v3 on G, A, D, F, D, A we get angle(G, A, D) == angle(F, D, A) + 180 mod 360
By divide_by_2_mod_180_v3 on G, B, F, E, C, D we get angle(G, B, F) == angle(E, C, D) + 180 mod 360
By divide_by_2_mod_180_v2 on F, B, G, E, C, B we get angle(F, B, G) == angle(E, C, B) + 180 mod 360
By divide_by_2_mod_180_v2 on F, B, G, D, C, E we get angle(F, B, G) == angle(D, C, E) + 180 mod 360
By divide_by_2_mod_180_v2 on D, A, G, A, D, E we get angle(D, A, G) == angle(A, D, E) + 180 mod 360
By divide_by_2_mod_180_v1 on E, F, A, G, A, F we get angle(E, F, A) == angle(G, A, F) mod 360
By divide_by_2_mod_180_v0 on F, A, G, B, F, D we get angle(B, F, D) == angle(F, A, G) mod 360
By divide_by_2_mod_180_v3 on A, D, E, D, A, G we get angle(A, D, E) == angle(D, A, G) + 180 mod 360
By divide_by_2_mod_180_v2 on D, A, G, A, D, F we get angle(D, A, G) == angle(A, D, F) + 180 mod 360
By divide_by_2_mod_180_v0 on G, B, A, B, C, E we get angle(B, C, E) == angle(G, B, A) mod 360
By divide_by_2_mod_180_v0 on B, A, G, C, D, E we get angle(B, A, G) == angle(C, D, E) mod 360
By divide_by_2_mod_180_v0 on F, A, G, A, F, D we get angle(A, F, D) == angle(F, A, G) mod 360
By divide_by_2_mod_180_v0 on C, D, F, F, A, G we get angle(C, D, F) == angle(F, A, G) mod 360
By divide_by_2_mod_180_v3 on G, A, D, E, D, A we get angle(G, A, D) == angle(E, D, A) + 180 mod 360
By anti_congruence_from_anti_similar_triangles on D, F, A, F, D, A we get anti_congruent_triangles(A, D, F, A, F, D)
By divide_by_2_mod_180_v3 on E, F, B, D, A, G we get angle(E, F, B) == angle(D, A, G) + 180 mod 360
By divide_by_2_mod_180_v0 on E, C, D, G, B, A we get angle(E, C, D) == angle(G, B, A) mod 360
By divide_by_2_mod_180_v0 on F, D, A, B, A, G we get angle(B, A, G) == angle(F, D, A) mod 360
By divide_by_2_mod_180_v2 on A, F, D, G, A, D we get angle(A, F, D) == angle(G, A, D) + 180 mod 360
By divide_by_2_mod_180_v2 on E, C, D, G, B, F we get angle(E, C, D) == angle(G, B, F) + 180 mod 360
By isosceles_triangle_from_angles on A, D, F we get isosceles_triangle(A, D, F)
By divide_by_2_mod_180_v0 on B, F, D, B, A, G we get angle(B, A, G) == angle(B, F, D) mod 360
By divide_by_2_mod_180_v2 on F, D, A, G, A, D we get angle(F, D, A) == angle(G, A, D) + 180 mod 360
By asa_anti_congruence on F, D, A, D, F, A we get anti_congruent_triangles(A, D, F, A, F, D)
By divide_by_2_mod_180_v0 on B, A, G, A, F, E we get angle(A, F, E) == angle(B, A, G) mod 360
By divide_by_2_mod_180_v1 on E, D, C, G, A, F we get angle(E, D, C) == angle(G, A, F) mod 360
By divide_by_2_mod_180_v3 on E, D, C, D, A, G we get angle(E, D, C) == angle(D, A, G) + 180 mod 360
By divide_by_2_mod_180_v1 on E, F, B, G, A, B we get angle(E, F, B) == angle(G, A, B) mod 360
By divide_by_2_mod_180_v0 on E, D, A, B, A, G we get angle(B, A, G) == angle(E, D, A) mod 360
By divide_by_2_mod_180_v1 on G, A, F, D, F, A we get angle(D, F, A) == angle(G, A, F) mod 360
By divide_by_2_mod_180_v2 on C, D, F, G, A, D we get angle(C, D, F) == angle(G, A, D) + 180 mod 360
By divide_by_2_mod_180_v1 on E, C, B, A, B, G we get angle(A, B, G) == angle(E, C, B) mod 360
By divide_by_2_mod_180_v3 on D, F, A, D, A, G we get angle(D, F, A) == angle(D, A, G) + 180 mod 360
By divide_by_2_mod_180_v2 on D, A, G, E, F, A we get angle(D, A, G) == angle(E, F, A) + 180 mod 360
By divide_by_2_mod_180_v1 on G, A, F, A, D, F we get angle(A, D, F) == angle(G, A, F) mod 360
By divide_by_2_mod_180_v1 on G, A, F, E, F, B we get angle(E, F, B) == angle(G, A, F) mod 360
By divide_by_2_mod_180_v2 on D, A, G, E, F, B we get angle(D, A, G) == angle(E, F, B) + 180 mod 360
By divide_by_2_mod_180_v0 on A, F, D, B, A, G we get angle(A, F, D) == angle(B, A, G) mod 360
By divide_by_2_mod_180_v1 on A, D, E, G, A, F we get angle(A, D, E) == angle(G, A, F) mod 360
By divide_by_2_mod_180_v3 on G, A, D, A, F, E we get angle(G, A, D) == angle(A, F, E) + 180 mod 360
By divide_by_2_mod_180_v3 on G, A, D, B, F, E we get angle(G, A, D) == angle(B, F, E) + 180 mod 360
By divide_by_2_mod_180_v1 on G, A, B, F, D, C we get angle(F, D, C) == angle(G, A, B) mod 360
By divide_by_2_mod_180_v2 on C, D, E, G, A, D we get angle(C, D, E) == angle(G, A, D) + 180 mod 360
By divide_by_2_mod_180_v3 on G, A, D, A, F, D we get angle(G, A, D) == angle(A, F, D) + 180 mod 360
By divide_by_2_mod_180_v3 on G, A, D, C, D, E we get angle(G, A, D) == angle(C, D, E) + 180 mod 360
By divide_by_2_mod_180_v3 on A, D, F, D, A, G we get angle(A, D, F) == angle(D, A, G) + 180 mod 360
By divide_by_2_mod_180_v0 on B, F, E, F, A, G we get angle(B, F, E) == angle(F, A, G) mod 360
By divide_by_2_mod_180_v1 on A, D, E, G, A, B we get angle(A, D, E) == angle(G, A, B) mod 360
By divide_by_2_mod_180_v2 on D, A, G, D, F, A we get angle(D, A, G) == angle(D, F, A) + 180 mod 360
By divide_by_2_mod_180_v2 on E, D, A, G, A, D we get angle(E, D, A) == angle(G, A, D) + 180 mod 360
By divide_by_2_mod_180_v0 on B, F, E, B, A, G we get angle(B, A, G) == angle(B, F, E) mod 360
By divide_by_2_mod_180_v2 on D, A, G, D, F, B we get angle(D, A, G) == angle(D, F, B) + 180 mod 360
By divide_by_2_mod_180_v1 on G, A, B, D, F, B we get angle(D, F, B) == angle(G, A, B) mod 360
By divide_by_2_mod_180_v2 on D, A, G, E, D, C we get angle(D, A, G) == angle(E, D, C) + 180 mod 360
By divide_by_2_mod_180_v3 on D, F, B, D, A, G we get angle(D, F, B) == angle(D, A, G) + 180 mod 360
By divide_by_2_mod_180_v1 on G, A, B, E, D, C we get angle(E, D, C) == angle(G, A, B) mod 360
By divide_by_2_mod_180_v2 on B, F, E, G, A, D we get angle(B, F, E) == angle(G, A, D) + 180 mod 360
By divide_by_2_mod_180_v3 on D, C, E, F, B, G we get angle(D, C, E) == angle(F, B, G) + 180 mod 360
By divide_by_2_mod_180_v3 on E, C, B, F, B, G we get angle(E, C, B) == angle(F, B, G) + 180 mod 360
By asa_anti_congruence on D, F, A, F, D, A we get anti_congruent_triangles(A, D, F, A, F, D)
By divide_by_2_mod_180_v3 on F, D, C, D, A, G we get angle(F, D, C) == angle(D, A, G) + 180 mod 360
By divide_by_2_mod_180_v2 on B, F, D, G, A, D we get angle(B, F, D) == angle(G, A, D) + 180 mod 360
By divide_by_2_mod_180_v1 on D, F, A, G, A, B we get angle(D, F, A) == angle(G, A, B) mod 360
By divide_by_2_mod_180_v3 on G, B, F, B, C, E we get angle(G, B, F) == angle(B, C, E) + 180 mod 360
By divide_by_2_mod_180_v3 on G, A, D, B, F, D we get angle(G, A, D) == angle(B, F, D) + 180 mod 360
By divide_by_2_mod_180_v3 on G, A, D, C, D, F we get angle(G, A, D) == angle(C, D, F) + 180 mod 360
By anti_congruence_from_anti_similar_triangles on F, D, A, D, F, A we get anti_congruent_triangles(A, D, F, A, F, D)
By isosceles_triangle_from_angles on A, F, D we get isosceles_triangle(A, D, F)
By internal_angle_bisector_definition_v0_r on A, E, C, D we get Line(D, E) == internal_angle_bisector(A, D, C)
By internal_angle_bisector_definition_v0_r on A, F, C, D we get Line(D, F) == internal_angle_bisector(A, D, C)
By anti_similar_triangle_basic_properties on D, F, A, F, D, A we get angle(D, F, A) == 0 - angle(F, D, A) mod 360, angle(F, A, D) == 0 - angle(D, A, F) mod 360, angle(A, D, F) == 0 - angle(A, F, D) mod 360, log(distance(D, F)) + log(distance(A, D)) == log(distance(D, F)) + log(distance(A, F)), log(distance(A, D)) + log(distance(A, D)) == log(distance(A, F)) + log(distance(A, F)), log(distance(A, D)) + log(distance(D, F)) == log(distance(A, F)) + log(distance(D, F))
By similar_triangle_basic_properties on B, D, C, D, B, A we get angle(B, D, C) == angle(D, B, A) mod 360, angle(B, A, D) == angle(D, C, B) mod 360, angle(A, D, B) == angle(C, B, D) mod 360, log(distance(B, D)) + log(distance(A, B)) == log(distance(B, D)) + log(distance(C, D)), log(distance(A, B)) + log(distance(B, C)) == log(distance(C, D)) + log(distance(A, D)), log(distance(A, D)) + log(distance(B, D)) == log(distance(B, C)) + log(distance(B, D))
By similar_triangle_basic_properties on C, B, A, A, D, C we get angle(A, D, C) == angle(C, B, A) mod 360, angle(B, A, C) == angle(D, C, A) mod 360, angle(A, C, B) == angle(C, A, D) mod 360, log(distance(A, D)) + log(distance(A, B)) == log(distance(B, C)) + log(distance(C, D)), log(distance(A, B)) + log(distance(A, C)) == log(distance(C, D)) + log(distance(A, C)), log(distance(A, C)) + log(distance(A, D)) == log(distance(A, C)) + log(distance(B, C))
By similar_triangle_basic_properties on D, A, B, B, C, D we get angle(B, C, D) == angle(D, A, B) mod 360, angle(A, B, D) == angle(C, D, B) mod 360, angle(B, D, A) == angle(D, B, C) mod 360, log(distance(A, D)) + log(distance(C, D)) == log(distance(B, C)) + log(distance(A, B)), log(distance(A, B)) + log(distance(B, D)) == log(distance(C, D)) + log(distance(B, D)), log(distance(B, D)) + log(distance(A, D)) == log(distance(B, D)) + log(distance(B, C))
By concurrent_sufficient_conditions on f, Line(A, C), i we get concurrent(f, i, Line(A, C))
By concurrent_sufficient_conditions on Line(A, C), g, j we get concurrent(g, j, Line(A, C))
By concurrent_sufficient_conditions on l, Line(A, C), f we get concurrent(f, l, Line(A, C))
By concurrent_sufficient_conditions on f, Line(B, D), Line(B, G) we get concurrent(f, Line(B, D), Line(B, G))
By concurrent_sufficient_conditions on Line(B, G), Line(B, D), g we get concurrent(g, Line(B, D), Line(B, G))
By concurrent_sufficient_conditions on Line(B, D), k, i we get concurrent(i, k, Line(B, D))
By concurrent_sufficient_conditions on Line(A, C), j, g we get concurrent(g, j, Line(A, C))
By concurrent_sufficient_conditions on k, Line(B, D), i we get concurrent(i, k, Line(B, D))
By concurrent_sufficient_conditions on h, Line(B, D), i we get concurrent(h, i, Line(B, D))
By concurrent_sufficient_conditions on g, Line(B, D), Line(B, G) we get concurrent(g, Line(B, D), Line(B, G))
By concurrent_sufficient_conditions on g, j, Line(A, C) we get concurrent(g, j, Line(A, C))
By concurrent_sufficient_conditions on Line(A, C), h, j we get concurrent(h, j, Line(A, C))
By concurrent_sufficient_conditions on Line(B, D), i, h we get concurrent(h, i, Line(B, D))
By concurrent_sufficient_conditions on Line(B, D), f, Line(B, G) we get concurrent(f, Line(B, D), Line(B, G))
By concurrent_sufficient_conditions on h, Line(A, C), g we get concurrent(g, h, Line(A, C))
By concurrent_sufficient_conditions on g, h, Line(A, C) we get concurrent(g, h, Line(A, C))
By concurrent_sufficient_conditions on j, Line(A, C), h we get concurrent(h, j, Line(A, C))
By concurrent_sufficient_conditions on h, j, Line(A, C) we get concurrent(h, j, Line(A, C))
By concurrent_sufficient_conditions on i, Line(A, C), l we get concurrent(i, l, Line(A, C))
By concurrent_sufficient_conditions on i, Line(B, D), k we get concurrent(i, k, Line(B, D))
By concurrent_sufficient_conditions on Line(A, C), l, i we get concurrent(i, l, Line(A, C))
By concurrent_sufficient_conditions on f, g, Line(B, D) we get concurrent(f, g, Line(B, D))
By concurrent_sufficient_conditions on Line(A, C), j, h we get concurrent(h, j, Line(A, C))
By concurrent_sufficient_conditions on g, Line(B, G), Line(B, D) we get concurrent(g, Line(B, D), Line(B, G))
By concurrent_sufficient_conditions on i, Line(A, C), f we get concurrent(f, i, Line(A, C))
By concurrent_sufficient_conditions on g, Line(B, D), f we get concurrent(f, g, Line(B, D))
By concurrent_sufficient_conditions on Line(A, C), f, l we get concurrent(f, l, Line(A, C))
By concurrent_sufficient_conditions on g, f, Line(B, D) we get concurrent(f, g, Line(B, D))
By concurrent_sufficient_conditions on j, Line(A, C), g we get concurrent(g, j, Line(A, C))
By concurrent_sufficient_conditions on Line(B, G), g, Line(B, D) we get concurrent(g, Line(B, D), Line(B, G))
By concurrent_sufficient_conditions on Line(B, D), Line(B, G), g we get concurrent(g, Line(B, D), Line(B, G))
By concurrent_sufficient_conditions on l, i, Line(A, C) we get concurrent(i, l, Line(A, C))
By concurrent_sufficient_conditions on f, Line(A, C), l we get concurrent(f, l, Line(A, C))
By concurrent_sufficient_conditions on f, Line(B, G), Line(B, D) we get concurrent(f, Line(B, D), Line(B, G))
By concurrent_sufficient_conditions on h, Line(B, D), k we get concurrent(h, k, Line(B, D))
By concurrent_sufficient_conditions on Line(A, C), l, f we get concurrent(f, l, Line(A, C))
By concurrent_sufficient_conditions on i, f, Line(A, C) we get concurrent(f, i, Line(A, C))
By concurrent_sufficient_conditions on i, Line(B, D), h we get concurrent(h, i, Line(B, D))
By concurrent_sufficient_conditions on Line(B, D), g, Line(B, G) we get concurrent(g, Line(B, D), Line(B, G))
By concurrent_sufficient_conditions on k, i, Line(B, D) we get concurrent(i, k, Line(B, D))
By concurrent_sufficient_conditions on Line(B, D), Line(B, G), f we get concurrent(f, Line(B, D), Line(B, G))
By concurrent_sufficient_conditions on Line(A, C), i, l we get concurrent(i, l, Line(A, C))
By concurrent_sufficient_conditions on h, i, Line(B, D) we get concurrent(h, i, Line(B, D))
By concurrent_sufficient_conditions on k, Line(B, D), h we get concurrent(h, k, Line(B, D))
By concurrent_sufficient_conditions on Line(B, D), g, f we get concurrent(f, g, Line(B, D))
By concurrent_sufficient_conditions on f, i, Line(A, C) we get concurrent(f, i, Line(A, C))
By concurrent_sufficient_conditions on l, f, Line(A, C) we get concurrent(f, l, Line(A, C))
By concurrent_sufficient_conditions on j, g, Line(A, C) we get concurrent(g, j, Line(A, C))
By concurrent_sufficient_conditions on Line(A, C), h, g we get concurrent(g, h, Line(A, C))
By concurrent_sufficient_conditions on Line(A, C), f, i we get concurrent(f, i, Line(A, C))
By concurrent_sufficient_conditions on i, l, Line(A, C) we get concurrent(i, l, Line(A, C))
By concurrent_sufficient_conditions on Line(B, G), f, Line(B, D) we get concurrent(f, Line(B, D), Line(B, G))
By concurrent_sufficient_conditions on Line(B, D), k, h we get concurrent(h, k, Line(B, D))
By concurrent_sufficient_conditions on Line(B, D), h, k we get concurrent(h, k, Line(B, D))
By concurrent_sufficient_conditions on g, Line(A, C), j we get concurrent(g, j, Line(A, C))
By concurrent_sufficient_conditions on Line(A, C), i, f we get concurrent(f, i, Line(A, C))
By concurrent_sufficient_conditions on f, l, Line(A, C) we get concurrent(f, l, Line(A, C))
By concurrent_sufficient_conditions on i, k, Line(B, D) we get concurrent(i, k, Line(B, D))
By concurrent_sufficient_conditions on Line(A, C), g, h we get concurrent(g, h, Line(A, C))
By concurrent_sufficient_conditions on h, k, Line(B, D) we get concurrent(h, k, Line(B, D))
By concurrent_sufficient_conditions on Line(B, D), h, i we get concurrent(h, i, Line(B, D))
By concurrent_sufficient_conditions on h, Line(A, C), j we get concurrent(h, j, Line(A, C))
By concurrent_sufficient_conditions on g, Line(A, C), h we get concurrent(g, h, Line(A, C))
By concurrent_sufficient_conditions on l, Line(A, C), i we get concurrent(i, l, Line(A, C))
By concurrent_sufficient_conditions on h, g, Line(A, C) we get concurrent(g, h, Line(A, C))
By concurrent_sufficient_conditions on j, h, Line(A, C) we get concurrent(h, j, Line(A, C))
By concurrent_sufficient_conditions on i, h, Line(B, D) we get concurrent(h, i, Line(B, D))
By concurrent_sufficient_conditions on k, h, Line(B, D) we get concurrent(h, k, Line(B, D))
By concurrent_sufficient_conditions on f, Line(B, D), g we get concurrent(f, g, Line(B, D))
By concurrent_sufficient_conditions on Line(B, D), i, k we get concurrent(i, k, Line(B, D))
By concurrent_sufficient_conditions on Line(B, G), Line(B, D), f we get concurrent(f, Line(B, D), Line(B, G))
By concurrent_sufficient_conditions on Line(B, D), f, g we get concurrent(f, g, Line(B, D))
By perpendicular_line_definition on F, k, Line(B, G) we get k == perpendicular_line(F, Line(B, G))
By perpendicular_line_definition on G, l, j we get l == perpendicular_line(G, j)
By perpendicular_line_definition on C, j, l we get j == perpendicular_line(C, l)
By perpendicular_line_definition on D, k, Line(B, G) we get k == perpendicular_line(D, Line(B, G))
By perpendicular_line_definition on A, l, j we get l == perpendicular_line(A, j)
By perpendicular_line_definition on B, Line(B, G), k we get Line(B, G) == perpendicular_line(B, k)
By perpendicular_line_definition on G, Line(B, G), k we get Line(B, G) == perpendicular_line(G, k)
By perpendicular_line_definition on E, j, l we get j == perpendicular_line(E, l)
By perpendicular_line_definition on E, k, Line(B, G) we get k == perpendicular_line(E, Line(B, G))
By double_perpendicular_and_parallel_v0 on k, j, l we get parallel(k, l)
By asa_congruence on C, D, E, B, A, G we get congruent_triangles(A, B, G, D, C, E)
By congruence_from_similar_triangles on D, C, E, A, B, G we get congruent_triangles(A, B, G, D, C, E)
By parallel_line_angles_v1 on E, D, A, G we get parallel(Line(A, G), Line(D, E))
By parallel_line_angles_v1 on G, A, D, F we get parallel(Line(A, G), Line(D, F))
By congruence_from_similar_triangles on A, B, G, D, C, E we get congruent_triangles(A, B, G, D, C, E)
By congruence_from_similar_triangles on C, D, E, B, A, G we get congruent_triangles(A, B, G, D, C, E)
By asa_congruence on D, C, E, A, B, G we get congruent_triangles(A, B, G, D, C, E)
By parallel_line_angles_v0 on G, A, F, E we get parallel(Line(A, G), Line(E, F))
By double_perpendicular_and_parallel_v0 on j, k, Line(B, G) we get parallel(j, Line(B, G))
By congruence_from_similar_triangles on B, A, G, C, D, E we get congruent_triangles(A, B, G, D, C, E)
By asa_congruence on B, A, G, C, D, E we get congruent_triangles(A, B, G, D, C, E)
By asa_congruence on A, B, G, D, C, E we get congruent_triangles(A, B, G, D, C, E)
By perpendicular_lines_draw_intersection on Line(B, G), k we get exists(line_intersection(k, Line(B, G)))
By perpendicular_lines_draw_intersection on j, l we get exists(line_intersection(j, l))
By altitude_definition on G, F, D, Line(B, G) we get Line(B, G) == altitude(G, D, F)
By altitude_definition on B, E, F, Line(B, G) we get Line(B, G) == altitude(B, E, F)
By altitude_definition on E, B, G, k we get k == altitude(E, B, G)
By altitude_definition on G, F, E, Line(B, G) we get Line(B, G) == altitude(G, E, F)
By altitude_definition on E, G, A, j we get j == altitude(E, A, G)
By altitude_definition on D, G, B, k we get k == altitude(D, B, G)
By altitude_definition on A, C, E, l we get l == altitude(A, C, E)
By altitude_definition on G, E, D, Line(B, G) we get Line(B, G) == altitude(G, D, E)
By altitude_definition on F, B, G, k we get k == altitude(F, B, G)
By altitude_definition on B, F, D, Line(B, G) we get Line(B, G) == altitude(B, D, F)
By altitude_definition on G, C, E, l we get l == altitude(G, C, E)
By altitude_definition on C, A, G, j we get j == altitude(C, A, G)
By altitude_definition on B, D, E, Line(B, G) we get Line(B, G) == altitude(B, D, E)
By similar_triangle_basic_properties on C, D, E, B, A, G we get angle(B, A, G) == angle(C, D, E) mod 360, angle(A, G, B) == angle(D, E, C) mod 360, angle(E, C, D) == angle(G, B, A) mod 360, log(distance(A, B)) + log(distance(D, E)) == log(distance(C, D)) + log(distance(A, G)), log(distance(A, G)) + log(distance(C, E)) == log(distance(D, E)) + log(distance(B, G)), log(distance(B, G)) + log(distance(C, D)) == log(distance(C, E)) + log(distance(A, B))
By similar_triangle_basic_properties on G, A, B, E, D, C we get angle(E, D, C) == angle(G, A, B) mod 360, angle(A, B, G) == angle(D, C, E) mod 360, angle(B, G, A) == angle(C, E, D) mod 360, log(distance(A, G)) + log(distance(C, D)) == log(distance(D, E)) + log(distance(A, B)), log(distance(A, B)) + log(distance(C, E)) == log(distance(C, D)) + log(distance(B, G)), log(distance(B, G)) + log(distance(D, E)) == log(distance(C, E)) + log(distance(A, G))
By line_definition on line_intersection(j, l), A, l we get l == Line(A, line_intersection(j, l))
By line_definition on line_intersection(k, Line(B, G)), E, k we get k == Line(E, line_intersection(k, Line(B, G)))
By line_definition on line_intersection(j, l), C, j we get j == Line(C, line_intersection(j, l))
By line_definition on line_intersection(k, Line(B, G)), F, k we get k == Line(F, line_intersection(k, Line(B, G)))
By line_definition on G, line_intersection(k, Line(B, G)), Line(B, G) we get Line(B, G) == Line(G, line_intersection(k, Line(B, G)))
By line_definition on G, line_intersection(j, l), l we get l == Line(G, line_intersection(j, l))
By line_definition on D, line_intersection(k, Line(B, G)), k we get k == Line(D, line_intersection(k, Line(B, G)))
By line_definition on line_intersection(j, l), E, j we get j == Line(E, line_intersection(j, l))
By line_definition on line_intersection(k, Line(B, G)), B, Line(B, G) we get Line(B, G) == Line(B, line_intersection(k, Line(B, G)))
By perpendicular_line_definition on line_intersection(k, Line(B, G)), k, Line(B, G) we get k == perpendicular_line(line_intersection(k, Line(B, G)), Line(B, G))
By perpendicular_line_definition on line_intersection(k, Line(B, G)), k, j we get k == perpendicular_line(line_intersection(k, Line(B, G)), j)
By perpendicular_line_definition on line_intersection(k, Line(B, G)), Line(B, G), l we get Line(B, G) == perpendicular_line(line_intersection(k, Line(B, G)), l)
By perpendicular_line_definition on line_intersection(j, l), l, j we get l == perpendicular_line(line_intersection(j, l), j)
By perpendicular_line_definition on line_intersection(j, l), j, l we get j == perpendicular_line(line_intersection(j, l), l)
By perpendicular_line_definition on line_intersection(k, Line(B, G)), Line(B, G), k we get Line(B, G) == perpendicular_line(line_intersection(k, Line(B, G)), k)
By perpendicular_line_definition on line_intersection(j, l), j, k we get j == perpendicular_line(line_intersection(j, l), k)
By perpendicular_line_definition on line_intersection(j, l), l, Line(B, G) we get l == perpendicular_line(line_intersection(j, l), Line(B, G))
By parallel_line_definition on line_intersection(k, Line(B, G)), k, l we get k == parallel_line(line_intersection(k, Line(B, G)), l)
By parallel_line_definition on line_intersection(k, Line(B, G)), Line(B, G), j we get Line(B, G) == parallel_line(line_intersection(k, Line(B, G)), j)
By parallel_line_definition on D, k, l we get k == parallel_line(D, l)
By parallel_line_definition on E, j, Line(B, G) we get j == parallel_line(E, Line(B, G))
By parallel_line_definition on A, l, k we get l == parallel_line(A, k)
By parallel_line_definition on G, l, k we get l == parallel_line(G, k)
By parallel_line_definition on line_intersection(j, l), j, Line(B, G) we get j == parallel_line(line_intersection(j, l), Line(B, G))
By parallel_line_definition on G, Line(B, G), j we get Line(B, G) == parallel_line(G, j)
By parallel_line_definition on C, j, Line(B, G) we get j == parallel_line(C, Line(B, G))
By parallel_line_definition on B, Line(B, G), j we get Line(B, G) == parallel_line(B, j)
By parallel_line_definition on F, k, l we get k == parallel_line(F, l)
By parallel_line_definition on line_intersection(j, l), l, k we get l == parallel_line(line_intersection(j, l), k)
By parallel_line_definition on E, k, l we get k == parallel_line(E, l)
By in_imply_collinear on line_intersection(j, l), E, C we get collinear(C, E, line_intersection(j, l))
By in_imply_collinear on line_intersection(k, Line(B, G)), G, B we get collinear(B, G, line_intersection(k, Line(B, G)))
By in_imply_collinear on line_intersection(j, l), A, G we get collinear(A, G, line_intersection(j, l))
By in_imply_collinear on line_intersection(k, Line(B, G)), E, D we get collinear(D, E, line_intersection(k, Line(B, G)))
By in_imply_collinear on line_intersection(k, Line(B, G)), F, D we get collinear(D, F, line_intersection(k, Line(B, G)))
By in_imply_collinear on line_intersection(k, Line(B, G)), E, F we get collinear(E, F, line_intersection(k, Line(B, G)))
By parallel_line_angles_reverse_v3 on E, C, B, G we get angle(E, C, B) == angle(G, B, C) + 180 mod 360
By parallel_line_angles_reverse_v2 on G, B, C, E we get angle(G, B, C) == angle(E, C, B) + 180 mod 360
By altitude_definition on line_intersection(k, Line(B, G)), A, G, Line(B, G) we get Line(B, G) == altitude(line_intersection(k, Line(B, G)), A, G)
By parallelogram_parallel_side_definition on G, A, D, E we get parallelogram(A, D, E, G)
By altitude_definition on line_intersection(j, l), E, D, j we get j == altitude(line_intersection(j, l), D, E)
By altitude_definition on line_intersection(j, l), B, G, l we get l == altitude(line_intersection(j, l), B, G)
By altitude_definition on line_intersection(k, Line(B, G)), C, E, k we get k == altitude(line_intersection(k, Line(B, G)), C, E)
By altitude_definition on line_intersection(j, l), F, E, j we get j == altitude(line_intersection(j, l), E, F)
By altitude_definition on line_intersection(j, l), D, F, j we get j == altitude(line_intersection(j, l), D, F)
By parallelogram_parallel_side_definition on C, E, G, B we get parallelogram(B, C, E, G)
By parallelogram_parallel_side_definition on B, G, E, C we get parallelogram(B, C, E, G)
By parallelogram_parallel_side_definition on G, B, C, E we get parallelogram(B, C, E, G)
By parallelogram_parallel_side_definition on E, D, A, G we get parallelogram(A, D, E, G)
By parallelogram_parallel_side_definition on D, E, G, A we get parallelogram(A, D, E, G)
By parallelogram_parallel_side_definition on E, C, B, G we get parallelogram(B, C, E, G)
By parallelogram_parallel_side_definition on A, G, E, D we get parallelogram(A, D, E, G)
By sas_anti_similarity on F, A, G, A, D, E we get anti_similar_triangles(A, D, E, F, A, G)
By sas_anti_similarity on A, D, E, F, A, G we get anti_similar_triangles(A, D, E, F, A, G)
By sas_anti_similarity on G, A, F, E, D, A we get anti_similar_triangles(A, D, E, F, A, G)
By sas_anti_congruence on F, A, G, A, D, E we get anti_congruent_triangles(A, D, E, F, A, G)
By sas_anti_congruence on G, A, F, E, D, A we get anti_congruent_triangles(A, D, E, F, A, G)
By sas_anti_similarity on E, D, A, G, A, F we get anti_similar_triangles(A, D, E, F, A, G)
By sas_anti_congruence on E, D, A, G, A, F we get anti_congruent_triangles(A, D, E, F, A, G)
By sas_anti_congruence on A, D, E, F, A, G we get anti_congruent_triangles(A, D, E, F, A, G)
By concyclic_sufficient_conditions_v0 on E, F, A, G we get concyclic(A, E, F, G)
By line_intersection_definition on E, k, Line(A, E) we get E == line_intersection(k, Line(A, E))
By line_intersection_definition on E, Line(E, G), j we get E == line_intersection(j, Line(E, G))
By line_intersection_definition on A, Line(A, C), Line(A, E) we get A == line_intersection(Line(A, C), Line(A, E))
By line_intersection_definition on E, Line(A, E), j we get E == line_intersection(j, Line(A, E))
By line_intersection_definition on A, l, Line(A, E) we get A == line_intersection(l, Line(A, E))
By line_intersection_definition on F, Line(F, G), f we get F == line_intersection(f, Line(F, G))
By line_intersection_definition on E, Line(E, G), Line(A, E) we get E == line_intersection(Line(A, E), Line(E, G))
By line_intersection_definition on A, f, Line(A, E) we get A == line_intersection(f, Line(A, E))
By line_intersection_definition on A, Line(A, E), i we get A == line_intersection(i, Line(A, E))
By line_intersection_definition on G, Line(E, G), l we get G == line_intersection(l, Line(E, G))
By line_intersection_definition on G, Line(F, G), Line(B, G) we get G == line_intersection(Line(B, G), Line(F, G))
By line_intersection_definition on G, Line(F, G), l we get G == line_intersection(l, Line(F, G))
By line_intersection_definition on G, Line(F, G), Line(E, G) we get G == line_intersection(Line(E, G), Line(F, G))
By line_intersection_definition on E, k, Line(E, G) we get E == line_intersection(k, Line(E, G))
By line_intersection_definition on G, Line(E, G), Line(B, G) we get G == line_intersection(Line(B, G), Line(E, G))
By line_intersection_definition on F, Line(F, G), k we get F == line_intersection(k, Line(F, G))
By same_angle_v1 on F, B, A, G we get angle(A, F, G) == angle(B, F, G) mod 360
By same_angle_v1 on A, F, B, E we get angle(B, A, E) == angle(F, A, E) mod 360
By same_angle_v1 on F, D, E, G we get angle(D, F, G) == angle(E, F, G) mod 360
By same_angle_v3 on E, F, D, A we get angle(F, E, A) == angle(D, E, A) + 180 mod 360
By projection_definition on C, line_intersection(j, l), l we get projection(C, l) == line_intersection(j, l)
By projection_definition on line_intersection(j, l), E, k we get E == projection(line_intersection(j, l), k)
By same_angle_v2 on E, F, D, G we get angle(F, E, G) == angle(D, E, G) + 180 mod 360
By projection_definition on E, line_intersection(j, l), l we get projection(E, l) == line_intersection(j, l)
By projection_definition on G, line_intersection(j, l), j we get projection(G, j) == line_intersection(j, l)
By projection_definition on A, line_intersection(j, l), j we get projection(A, j) == line_intersection(j, l)
By projection_definition on D, line_intersection(k, Line(B, G)), Line(B, G) we get projection(D, Line(B, G)) == line_intersection(k, Line(B, G))
By projection_definition on line_intersection(k, Line(B, G)), G, l we get G == projection(line_intersection(k, Line(B, G)), l)
By projection_definition on E, line_intersection(k, Line(B, G)), Line(B, G) we get projection(E, Line(B, G)) == line_intersection(k, Line(B, G))
By projection_definition on F, line_intersection(k, Line(B, G)), Line(B, G) we get projection(F, Line(B, G)) == line_intersection(k, Line(B, G))
By projection_definition on line_intersection(j, l), G, Line(B, G) we get G == projection(line_intersection(j, l), Line(B, G))
By projection_definition on G, line_intersection(k, Line(B, G)), k we get projection(G, k) == line_intersection(k, Line(B, G))
By projection_definition on B, line_intersection(k, Line(B, G)), k we get projection(B, k) == line_intersection(k, Line(B, G))
By projection_definition on line_intersection(k, Line(B, G)), E, j we get E == projection(line_intersection(k, Line(B, G)), j)
By parallel_line_definition on G, Line(E, G), g we get Line(E, G) == parallel_line(G, g)
By parallel_line_definition on B, g, Line(E, G) we get g == parallel_line(B, Line(E, G))
By parallel_line_definition on E, Line(E, G), g we get Line(E, G) == parallel_line(E, g)
By parallel_line_definition on A, i, Line(E, G) we get i == parallel_line(A, Line(E, G))
By parallel_line_definition on D, i, Line(E, G) we get i == parallel_line(D, Line(E, G))
By parallel_line_definition on C, g, Line(E, G) we get g == parallel_line(C, Line(E, G))
By parallel_line_definition on E, Line(E, G), i we get Line(E, G) == parallel_line(E, i)
By parallel_line_definition on G, Line(E, G), i we get Line(E, G) == parallel_line(G, i)
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), E, E, C we get 180 == 2 * direction(line_intersection(k, Line(B, G)), E) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on F, D, line_intersection(k, Line(B, G)), G we get 180 == 2 * direction(F, D) - 2 * direction(line_intersection(k, Line(B, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), E, C, E we get 180 == 2 * direction(line_intersection(k, Line(B, G)), E) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, l), G, B, G we get 180 == 2 * direction(line_intersection(j, l), G) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), G, F, D we get 180 == 2 * direction(line_intersection(k, Line(B, G)), G) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on E, D, line_intersection(k, Line(B, G)), B we get 180 == 2 * direction(E, D) - 2 * direction(line_intersection(k, Line(B, G)), B) mod 360
By perpendicular_direction_conditions_v0_r on E, D, line_intersection(j, l), E we get 180 == 2 * direction(E, D) - 2 * direction(line_intersection(j, l), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), B, D, F we get 180 == 2 * direction(line_intersection(k, Line(B, G)), B) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on E, D, G, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(E, D) - 2 * direction(G, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on D, E, line_intersection(k, Line(B, G)), G we get 180 == 2 * direction(D, E) - 2 * direction(line_intersection(k, Line(B, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(j, l), D, F we get 180 == 2 * direction(E, line_intersection(j, l)) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, l), E, G, A we get 180 == 2 * direction(line_intersection(j, l), E) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(j, l), F, E we get 180 == 2 * direction(C, line_intersection(j, l)) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on D, F, line_intersection(k, Line(B, G)), B we get 180 == 2 * direction(D, F) - 2 * direction(line_intersection(k, Line(B, G)), B) mod 360
By perpendicular_direction_conditions_v0_r on E, C, line_intersection(j, l), G we get 180 == 2 * direction(E, C) - 2 * direction(line_intersection(j, l), G) mod 360
By perpendicular_direction_conditions_v0_r on A, G, line_intersection(j, l), E we get 180 == 2 * direction(A, G) - 2 * direction(line_intersection(j, l), E) mod 360
By perpendicular_direction_conditions_v0_r on A, G, line_intersection(j, l), C we get 180 == 2 * direction(A, G) - 2 * direction(line_intersection(j, l), C) mod 360
By perpendicular_direction_conditions_v0_r on G, B, line_intersection(j, l), A we get 180 == 2 * direction(G, B) - 2 * direction(line_intersection(j, l), A) mod 360
By perpendicular_direction_conditions_v0_r on C, E, line_intersection(j, l), G we get 180 == 2 * direction(C, E) - 2 * direction(line_intersection(j, l), G) mod 360
By perpendicular_direction_conditions_v0_r on D, E, E, line_intersection(j, l) we get 180 == 2 * direction(D, E) - 2 * direction(E, line_intersection(j, l)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, l), E, E, D we get 180 == 2 * direction(line_intersection(j, l), E) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), E, G, B we get 180 == 2 * direction(line_intersection(k, Line(B, G)), E) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, l), E, E, F we get 180 == 2 * direction(line_intersection(j, l), E) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on F, D, C, line_intersection(j, l) we get 180 == 2 * direction(F, D) - 2 * direction(C, line_intersection(j, l)) mod 360
By perpendicular_direction_conditions_v0_r on C, E, line_intersection(k, Line(B, G)), F we get 180 == 2 * direction(C, E) - 2 * direction(line_intersection(k, Line(B, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(j, l), A, G we get 180 == 2 * direction(C, line_intersection(j, l)) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on C, E, line_intersection(k, Line(B, G)), D we get 180 == 2 * direction(C, E) - 2 * direction(line_intersection(k, Line(B, G)), D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, l), E, F, D we get 180 == 2 * direction(line_intersection(j, l), E) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on C, E, line_intersection(k, Line(B, G)), E we get 180 == 2 * direction(C, E) - 2 * direction(line_intersection(k, Line(B, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), G, A, G we get 180 == 2 * direction(line_intersection(k, Line(B, G)), G) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), G, E, F we get 180 == 2 * direction(line_intersection(k, Line(B, G)), G) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), D, G, B we get 180 == 2 * direction(line_intersection(k, Line(B, G)), D) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), B, D, E we get 180 == 2 * direction(line_intersection(k, Line(B, G)), B) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on E, F, E, line_intersection(j, l) we get 180 == 2 * direction(E, F) - 2 * direction(E, line_intersection(j, l)) mod 360
By perpendicular_direction_conditions_v0_r on D, E, B, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(D, E) - 2 * direction(B, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on D, F, line_intersection(k, Line(B, G)), G we get 180 == 2 * direction(D, F) - 2 * direction(line_intersection(k, Line(B, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, l), E, D, E we get 180 == 2 * direction(line_intersection(j, l), E) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on E, F, line_intersection(j, l), C we get 180 == 2 * direction(E, F) - 2 * direction(line_intersection(j, l), C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), G, E, D we get 180 == 2 * direction(line_intersection(k, Line(B, G)), G) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on F, E, line_intersection(k, Line(B, G)), G we get 180 == 2 * direction(F, E) - 2 * direction(line_intersection(k, Line(B, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on E, D, line_intersection(j, l), C we get 180 == 2 * direction(E, D) - 2 * direction(line_intersection(j, l), C) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(k, Line(B, G)), D, E we get 180 == 2 * direction(B, line_intersection(k, Line(B, G))) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on B, G, line_intersection(k, Line(B, G)), F we get 180 == 2 * direction(B, G) - 2 * direction(line_intersection(k, Line(B, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(j, l), G, B we get 180 == 2 * direction(G, line_intersection(j, l)) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, l), C, E, F we get 180 == 2 * direction(line_intersection(j, l), C) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on G, B, D, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(G, B) - 2 * direction(D, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), F, B, G we get 180 == 2 * direction(line_intersection(k, Line(B, G)), F) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(j, l), E, F we get 180 == 2 * direction(C, line_intersection(j, l)) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on D, E, line_intersection(j, l), E we get 180 == 2 * direction(D, E) - 2 * direction(line_intersection(j, l), E) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(k, Line(B, G)), G, B we get 180 == 2 * direction(F, line_intersection(k, Line(B, G))) - 2 * direction(G, B) mod 360
By sss_congruence_v1 on G, A, E, D, E, A we get congruent_triangles(A, D, E, E, G, A)
By perpendicular_direction_conditions_v0_r on G, A, line_intersection(j, l), E we get 180 == 2 * direction(G, A) - 2 * direction(line_intersection(j, l), E) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(j, l), C, E we get 180 == 2 * direction(A, line_intersection(j, l)) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on G, A, line_intersection(k, Line(B, G)), B we get 180 == 2 * direction(G, A) - 2 * direction(line_intersection(k, Line(B, G)), B) mod 360
By perpendicular_direction_conditions_v0_r on G, B, line_intersection(k, Line(B, G)), F we get 180 == 2 * direction(G, B) - 2 * direction(line_intersection(k, Line(B, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(k, Line(B, G)), C, E we get 180 == 2 * direction(F, line_intersection(k, Line(B, G))) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(k, Line(B, G)), B, G we get 180 == 2 * direction(D, line_intersection(k, Line(B, G))) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on E, F, B, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(E, F) - 2 * direction(B, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on B, G, line_intersection(j, l), A we get 180 == 2 * direction(B, G) - 2 * direction(line_intersection(j, l), A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), F, G, B we get 180 == 2 * direction(line_intersection(k, Line(B, G)), F) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(k, Line(B, G)), E, D we get 180 == 2 * direction(B, line_intersection(k, Line(B, G))) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(j, l), D, E we get 180 == 2 * direction(E, line_intersection(j, l)) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on G, A, line_intersection(k, Line(B, G)), G we get 180 == 2 * direction(G, A) - 2 * direction(line_intersection(k, Line(B, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on E, F, C, line_intersection(j, l) we get 180 == 2 * direction(E, F) - 2 * direction(C, line_intersection(j, l)) mod 360
By perpendicular_direction_conditions_v0_r on E, D, C, line_intersection(j, l) we get 180 == 2 * direction(E, D) - 2 * direction(C, line_intersection(j, l)) mod 360
By perpendicular_direction_conditions_v0_r on F, E, line_intersection(j, l), C we get 180 == 2 * direction(F, E) - 2 * direction(line_intersection(j, l), C) mod 360
By perpendicular_direction_conditions_v0_r on E, F, line_intersection(k, Line(B, G)), G we get 180 == 2 * direction(E, F) - 2 * direction(line_intersection(k, Line(B, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on F, D, line_intersection(j, l), C we get 180 == 2 * direction(F, D) - 2 * direction(line_intersection(j, l), C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, l), C, A, G we get 180 == 2 * direction(line_intersection(j, l), C) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on E, F, line_intersection(j, l), E we get 180 == 2 * direction(E, F) - 2 * direction(line_intersection(j, l), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, l), A, G, B we get 180 == 2 * direction(line_intersection(j, l), A) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), D, C, E we get 180 == 2 * direction(line_intersection(k, Line(B, G)), D) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on F, E, line_intersection(k, Line(B, G)), B we get 180 == 2 * direction(F, E) - 2 * direction(line_intersection(k, Line(B, G)), B) mod 360
By perpendicular_direction_conditions_v0_r on F, E, C, line_intersection(j, l) we get 180 == 2 * direction(F, E) - 2 * direction(C, line_intersection(j, l)) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(k, Line(B, G)), E, D we get 180 == 2 * direction(G, line_intersection(k, Line(B, G))) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on A, G, E, line_intersection(j, l) we get 180 == 2 * direction(A, G) - 2 * direction(E, line_intersection(j, l)) mod 360
By sss_congruence_v0 on E, D, A, A, G, E we get congruent_triangles(A, D, E, E, G, A)
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), G, D, E we get 180 == 2 * direction(line_intersection(k, Line(B, G)), G) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, l), A, E, C we get 180 == 2 * direction(line_intersection(j, l), A) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, l), E, A, G we get 180 == 2 * direction(line_intersection(j, l), E) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(k, Line(B, G)), C, E we get 180 == 2 * direction(D, line_intersection(k, Line(B, G))) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on E, C, D, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(E, C) - 2 * direction(D, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on B, G, E, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(B, G) - 2 * direction(E, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on A, G, B, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(A, G) - 2 * direction(B, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, l), E, D, F we get 180 == 2 * direction(line_intersection(j, l), E) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on G, A, G, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(G, A) - 2 * direction(G, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, l), G, E, C we get 180 == 2 * direction(line_intersection(j, l), G) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on D, E, line_intersection(j, l), C we get 180 == 2 * direction(D, E) - 2 * direction(line_intersection(j, l), C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), F, C, E we get 180 == 2 * direction(line_intersection(k, Line(B, G)), F) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(k, Line(B, G)), B, G we get 180 == 2 * direction(E, line_intersection(k, Line(B, G))) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on F, E, line_intersection(j, l), E we get 180 == 2 * direction(F, E) - 2 * direction(line_intersection(j, l), E) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(k, Line(B, G)), E, C we get 180 == 2 * direction(D, line_intersection(k, Line(B, G))) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, l), C, G, A we get 180 == 2 * direction(line_intersection(j, l), C) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, l), E, F, E we get 180 == 2 * direction(line_intersection(j, l), E) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on C, E, line_intersection(j, l), A we get 180 == 2 * direction(C, E) - 2 * direction(line_intersection(j, l), A) mod 360
By perpendicular_direction_conditions_v0_r on E, F, G, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(E, F) - 2 * direction(G, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on C, E, E, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(C, E) - 2 * direction(E, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on G, A, C, line_intersection(j, l) we get 180 == 2 * direction(G, A) - 2 * direction(C, line_intersection(j, l)) mod 360
By perpendicular_direction_conditions_v0_r on D, E, C, line_intersection(j, l) we get 180 == 2 * direction(D, E) - 2 * direction(C, line_intersection(j, l)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), G, G, A we get 180 == 2 * direction(line_intersection(k, Line(B, G)), G) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on E, D, line_intersection(k, Line(B, G)), G we get 180 == 2 * direction(E, D) - 2 * direction(line_intersection(k, Line(B, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on D, F, E, line_intersection(j, l) we get 180 == 2 * direction(D, F) - 2 * direction(E, line_intersection(j, l)) mod 360
By perpendicular_direction_conditions_v0_r on F, D, line_intersection(k, Line(B, G)), B we get 180 == 2 * direction(F, D) - 2 * direction(line_intersection(k, Line(B, G)), B) mod 360
By perpendicular_direction_conditions_v0_r on E, C, A, line_intersection(j, l) we get 180 == 2 * direction(E, C) - 2 * direction(A, line_intersection(j, l)) mod 360
By perpendicular_direction_conditions_v0_r on G, B, line_intersection(k, Line(B, G)), E we get 180 == 2 * direction(G, B) - 2 * direction(line_intersection(k, Line(B, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on E, C, E, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(E, C) - 2 * direction(E, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, l), C, F, E we get 180 == 2 * direction(line_intersection(j, l), C) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), E, B, G we get 180 == 2 * direction(line_intersection(k, Line(B, G)), E) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on G, A, line_intersection(j, l), C we get 180 == 2 * direction(G, A) - 2 * direction(line_intersection(j, l), C) mod 360
By perpendicular_direction_conditions_v0_r on B, G, A, line_intersection(j, l) we get 180 == 2 * direction(B, G) - 2 * direction(A, line_intersection(j, l)) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(k, Line(B, G)), G, B we get 180 == 2 * direction(D, line_intersection(k, Line(B, G))) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(j, l), F, E we get 180 == 2 * direction(E, line_intersection(j, l)) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on G, A, B, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(G, A) - 2 * direction(B, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on E, C, G, line_intersection(j, l) we get 180 == 2 * direction(E, C) - 2 * direction(G, line_intersection(j, l)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), B, E, D we get 180 == 2 * direction(line_intersection(k, Line(B, G)), B) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on D, E, line_intersection(k, Line(B, G)), B we get 180 == 2 * direction(D, E) - 2 * direction(line_intersection(k, Line(B, G)), B) mod 360
By perpendicular_direction_conditions_v0_r on G, B, G, line_intersection(j, l) we get 180 == 2 * direction(G, B) - 2 * direction(G, line_intersection(j, l)) mod 360
By perpendicular_direction_conditions_v0_r on F, E, G, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(F, E) - 2 * direction(G, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(k, Line(B, G)), F, D we get 180 == 2 * direction(B, line_intersection(k, Line(B, G))) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on A, G, line_intersection(k, Line(B, G)), B we get 180 == 2 * direction(A, G) - 2 * direction(line_intersection(k, Line(B, G)), B) mod 360
By perpendicular_direction_conditions_v0_r on G, B, A, line_intersection(j, l) we get 180 == 2 * direction(G, B) - 2 * direction(A, line_intersection(j, l)) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(j, l), B, G we get 180 == 2 * direction(A, line_intersection(j, l)) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, l), C, E, D we get 180 == 2 * direction(line_intersection(j, l), C) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(j, l), E, D we get 180 == 2 * direction(C, line_intersection(j, l)) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(j, l), G, B we get 180 == 2 * direction(A, line_intersection(j, l)) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(j, l), C, E we get 180 == 2 * direction(G, line_intersection(j, l)) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(k, Line(B, G)), A, G we get 180 == 2 * direction(G, line_intersection(k, Line(B, G))) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, l), G, C, E we get 180 == 2 * direction(line_intersection(j, l), G) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(j, l), G, A we get 180 == 2 * direction(E, line_intersection(j, l)) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on G, B, F, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(G, B) - 2 * direction(F, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, l), C, D, F we get 180 == 2 * direction(line_intersection(j, l), C) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on B, G, D, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(B, G) - 2 * direction(D, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on C, E, F, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(C, E) - 2 * direction(F, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), F, E, C we get 180 == 2 * direction(line_intersection(k, Line(B, G)), F) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on F, E, E, line_intersection(j, l) we get 180 == 2 * direction(F, E) - 2 * direction(E, line_intersection(j, l)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, l), C, D, E we get 180 == 2 * direction(line_intersection(j, l), C) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), B, E, F we get 180 == 2 * direction(line_intersection(k, Line(B, G)), B) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on D, F, line_intersection(j, l), E we get 180 == 2 * direction(D, F) - 2 * direction(line_intersection(j, l), E) mod 360
By perpendicular_direction_conditions_v0_r on E, D, B, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(E, D) - 2 * direction(B, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(k, Line(B, G)), B, G we get 180 == 2 * direction(F, line_intersection(k, Line(B, G))) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(j, l), F, D we get 180 == 2 * direction(E, line_intersection(j, l)) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), D, E, C we get 180 == 2 * direction(line_intersection(k, Line(B, G)), D) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on A, G, line_intersection(k, Line(B, G)), G we get 180 == 2 * direction(A, G) - 2 * direction(line_intersection(k, Line(B, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(k, Line(B, G)), C, E we get 180 == 2 * direction(E, line_intersection(k, Line(B, G))) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on E, C, F, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(E, C) - 2 * direction(F, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on B, G, line_intersection(j, l), G we get 180 == 2 * direction(B, G) - 2 * direction(line_intersection(j, l), G) mod 360
By perpendicular_direction_conditions_v0_r on E, F, line_intersection(k, Line(B, G)), B we get 180 == 2 * direction(E, F) - 2 * direction(line_intersection(k, Line(B, G)), B) mod 360
By perpendicular_direction_conditions_v0_r on B, G, line_intersection(k, Line(B, G)), D we get 180 == 2 * direction(B, G) - 2 * direction(line_intersection(k, Line(B, G)), D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, l), A, B, G we get 180 == 2 * direction(line_intersection(j, l), A) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on F, D, E, line_intersection(j, l) we get 180 == 2 * direction(F, D) - 2 * direction(E, line_intersection(j, l)) mod 360
By perpendicular_direction_conditions_v0_r on E, C, line_intersection(k, Line(B, G)), F we get 180 == 2 * direction(E, C) - 2 * direction(line_intersection(k, Line(B, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(k, Line(B, G)), E, C we get 180 == 2 * direction(F, line_intersection(k, Line(B, G))) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on E, D, E, line_intersection(j, l) we get 180 == 2 * direction(E, D) - 2 * direction(E, line_intersection(j, l)) mod 360
By perpendicular_direction_conditions_v0_r on C, E, D, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(C, E) - 2 * direction(D, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), D, B, G we get 180 == 2 * direction(line_intersection(k, Line(B, G)), D) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on A, G, G, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(A, G) - 2 * direction(G, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on E, C, line_intersection(k, Line(B, G)), E we get 180 == 2 * direction(E, C) - 2 * direction(line_intersection(k, Line(B, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on B, G, F, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(B, G) - 2 * direction(F, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, l), C, F, D we get 180 == 2 * direction(line_intersection(j, l), C) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), B, G, A we get 180 == 2 * direction(line_intersection(k, Line(B, G)), B) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(k, Line(B, G)), D, F we get 180 == 2 * direction(G, line_intersection(k, Line(B, G))) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(k, Line(B, G)), D, F we get 180 == 2 * direction(B, line_intersection(k, Line(B, G))) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on B, G, G, line_intersection(j, l) we get 180 == 2 * direction(B, G) - 2 * direction(G, line_intersection(j, l)) mod 360
By perpendicular_direction_conditions_v0_r on F, D, G, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(F, D) - 2 * direction(G, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(j, l), A, G we get 180 == 2 * direction(E, line_intersection(j, l)) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), B, F, D we get 180 == 2 * direction(line_intersection(k, Line(B, G)), B) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(j, l), E, D we get 180 == 2 * direction(E, line_intersection(j, l)) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on C, E, G, line_intersection(j, l) we get 180 == 2 * direction(C, E) - 2 * direction(G, line_intersection(j, l)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), G, F, E we get 180 == 2 * direction(line_intersection(k, Line(B, G)), G) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on A, G, C, line_intersection(j, l) we get 180 == 2 * direction(A, G) - 2 * direction(C, line_intersection(j, l)) mod 360
By perpendicular_direction_conditions_v0_r on G, B, E, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(G, B) - 2 * direction(E, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on D, F, line_intersection(j, l), C we get 180 == 2 * direction(D, F) - 2 * direction(line_intersection(j, l), C) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(j, l), F, D we get 180 == 2 * direction(C, line_intersection(j, l)) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(k, Line(B, G)), G, B we get 180 == 2 * direction(E, line_intersection(k, Line(B, G))) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(k, Line(B, G)), D, E we get 180 == 2 * direction(G, line_intersection(k, Line(B, G))) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(j, l), D, E we get 180 == 2 * direction(C, line_intersection(j, l)) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(j, l), E, F we get 180 == 2 * direction(E, line_intersection(j, l)) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on F, D, line_intersection(j, l), E we get 180 == 2 * direction(F, D) - 2 * direction(line_intersection(j, l), E) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(j, l), E, C we get 180 == 2 * direction(G, line_intersection(j, l)) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(j, l), E, C we get 180 == 2 * direction(A, line_intersection(j, l)) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, l), G, G, B we get 180 == 2 * direction(line_intersection(j, l), G) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(j, l), G, A we get 180 == 2 * direction(C, line_intersection(j, l)) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), G, D, F we get 180 == 2 * direction(line_intersection(k, Line(B, G)), G) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on G, A, E, line_intersection(j, l) we get 180 == 2 * direction(G, A) - 2 * direction(E, line_intersection(j, l)) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(k, Line(B, G)), E, C we get 180 == 2 * direction(E, line_intersection(k, Line(B, G))) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on F, D, B, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(F, D) - 2 * direction(B, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on D, E, G, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(D, E) - 2 * direction(G, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on G, B, line_intersection(k, Line(B, G)), D we get 180 == 2 * direction(G, B) - 2 * direction(line_intersection(k, Line(B, G)), D) mod 360
By perpendicular_direction_conditions_v0_r on C, E, A, line_intersection(j, l) we get 180 == 2 * direction(C, E) - 2 * direction(A, line_intersection(j, l)) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(j, l), B, G we get 180 == 2 * direction(G, line_intersection(j, l)) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(k, Line(B, G)), G, A we get 180 == 2 * direction(G, line_intersection(k, Line(B, G))) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(k, Line(B, G)), A, G we get 180 == 2 * direction(B, line_intersection(k, Line(B, G))) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(k, Line(B, G)), G, A we get 180 == 2 * direction(B, line_intersection(k, Line(B, G))) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on E, C, line_intersection(j, l), A we get 180 == 2 * direction(E, C) - 2 * direction(line_intersection(j, l), A) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(k, Line(B, G)), F, D we get 180 == 2 * direction(G, line_intersection(k, Line(B, G))) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on D, F, B, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(D, F) - 2 * direction(B, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, l), A, C, E we get 180 == 2 * direction(line_intersection(j, l), A) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on E, C, line_intersection(k, Line(B, G)), D we get 180 == 2 * direction(E, C) - 2 * direction(line_intersection(k, Line(B, G)), D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), B, F, E we get 180 == 2 * direction(line_intersection(k, Line(B, G)), B) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on F, E, B, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(F, E) - 2 * direction(B, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(j, l), D, F we get 180 == 2 * direction(C, line_intersection(j, l)) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on D, F, G, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(D, F) - 2 * direction(G, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on G, B, line_intersection(j, l), G we get 180 == 2 * direction(G, B) - 2 * direction(line_intersection(j, l), G) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(k, Line(B, G)), F, E we get 180 == 2 * direction(G, line_intersection(k, Line(B, G))) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), B, A, G we get 180 == 2 * direction(line_intersection(k, Line(B, G)), B) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(k, Line(B, G)), E, F we get 180 == 2 * direction(B, line_intersection(k, Line(B, G))) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on B, G, line_intersection(k, Line(B, G)), E we get 180 == 2 * direction(B, G) - 2 * direction(line_intersection(k, Line(B, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(k, Line(B, G)), E, F we get 180 == 2 * direction(G, line_intersection(k, Line(B, G))) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on D, F, C, line_intersection(j, l) we get 180 == 2 * direction(D, F) - 2 * direction(C, line_intersection(j, l)) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(k, Line(B, G)), F, E we get 180 == 2 * direction(B, line_intersection(k, Line(B, G))) - 2 * direction(F, E) mod 360
By parallel_line_angles_reverse_v0 on A, G, E, F we get angle(A, G, E) == angle(F, E, G) mod 360
By sss_congruence_v1 on D, E, A, G, A, E we get congruent_triangles(A, D, E, E, G, A)
By sss_anti_congruence_v1 on A, E, F, G, F, E we get anti_congruent_triangles(A, E, F, G, F, E)
By sss_anti_congruence_v0 on E, G, F, F, A, E we get anti_congruent_triangles(A, E, F, G, F, E)
By sss_anti_congruence_v1 on E, F, A, F, E, G we get anti_congruent_triangles(A, E, F, G, F, E)
By sss_anti_congruence_v1 on E, G, A, F, A, G we get anti_congruent_triangles(A, E, G, G, F, A)
By parallel_line_angles_reverse_v2 on F, E, A, G we get angle(F, E, A) == angle(G, A, E) + 180 mod 360
By sss_anti_congruence_v1 on F, G, E, E, A, F we get anti_congruent_triangles(A, E, F, G, F, E)
By sss_congruence_v0 on E, A, G, A, E, D we get congruent_triangles(A, D, E, E, G, A)
By parallel_line_angles_reverse_v2 on A, G, F, E we get angle(A, G, F) == angle(E, F, G) + 180 mod 360
By sss_congruence_v0 on A, G, E, E, D, A we get congruent_triangles(A, D, E, E, G, A)
By sss_congruence_v1 on E, G, A, A, D, E we get congruent_triangles(A, D, E, E, G, A)
By sss_anti_congruence_v0 on E, A, F, F, G, E we get anti_congruent_triangles(A, E, F, G, F, E)
By sss_anti_congruence_v1 on G, A, F, A, G, E we get anti_congruent_triangles(A, E, G, G, F, A)
By sss_congruence_v0 on A, G, E, E, D, A we get congruent_triangles(A, D, E, E, G, A)
By sss_anti_congruence_v1 on A, F, G, G, E, A we get anti_congruent_triangles(A, E, G, G, F, A)
By parallel_line_angles_reverse_v0 on D, A, E, G we get angle(D, A, E) == angle(G, E, A) mod 360
By parallel_line_angles_reverse_v3 on E, F, G, A we get angle(E, F, G) == angle(A, G, F) + 180 mod 360
By sss_anti_congruence_v1 on G, E, F, A, F, E we get anti_congruent_triangles(A, E, F, G, F, E)
By sss_anti_congruence_v1 on A, F, G, G, E, A we get anti_congruent_triangles(A, E, G, G, F, A)
By sss_anti_congruence_v1 on A, E, G, G, F, A we get anti_congruent_triangles(A, E, G, G, F, A)
By sss_congruence_v0 on D, A, E, G, E, A we get congruent_triangles(A, D, E, E, G, A)
By sss_congruence_v0 on E, D, A, A, G, E we get congruent_triangles(A, D, E, E, G, A)
By sss_anti_congruence_v0 on F, A, G, E, G, A we get anti_congruent_triangles(A, E, G, G, F, A)
By sss_anti_congruence_v0 on E, A, G, F, G, A we get anti_congruent_triangles(A, E, G, G, F, A)
By sss_anti_congruence_v1 on A, E, G, G, F, A we get anti_congruent_triangles(A, E, G, G, F, A)
By sss_anti_congruence_v1 on A, F, G, G, E, A we get anti_congruent_triangles(A, E, G, G, F, A)
By sss_congruence_v1 on G, A, E, D, E, A we get congruent_triangles(A, D, E, E, G, A)
By sss_anti_congruence_v0 on F, A, G, E, G, A we get anti_congruent_triangles(A, E, G, G, F, A)
By sss_anti_congruence_v1 on F, G, E, E, A, F we get anti_congruent_triangles(A, E, F, G, F, E)
By sss_anti_congruence_v0 on G, F, A, A, E, G we get anti_congruent_triangles(A, E, G, G, F, A)
By sss_anti_congruence_v0 on F, E, A, E, F, G we get anti_congruent_triangles(A, E, F, G, F, E)
By sss_congruence_v1 on A, E, G, E, A, D we get congruent_triangles(A, D, E, E, G, A)
By sss_anti_congruence_v0 on A, F, E, G, E, F we get anti_congruent_triangles(A, E, F, G, F, E)
By sss_congruence_v1 on E, G, A, A, D, E we get congruent_triangles(A, D, E, E, G, A)
By sss_anti_congruence_v1 on G, A, E, A, G, F we get anti_congruent_triangles(A, E, G, G, F, A)
By sas_anti_congruence on A, G, E, G, A, F we get anti_congruent_triangles(A, E, G, G, F, A)
By sss_anti_congruence_v1 on G, E, F, A, F, E we get anti_congruent_triangles(A, E, F, G, F, E)
By isosceles_trapezoid_sufficient_conditions_v0 on A, G, E, F we get isosceles_trapezoid(A, G, E, F)
By sss_congruence_v0 on A, E, D, E, A, G we get congruent_triangles(A, D, E, E, G, A)
By sss_anti_congruence_v1 on G, A, E, A, G, F we get anti_congruent_triangles(A, E, G, G, F, A)
By parallel_line_angles_reverse_v2 on A, G, F, D we get angle(A, G, F) == angle(D, F, G) + 180 mod 360
By sss_anti_congruence_v1 on F, A, E, E, G, F we get anti_congruent_triangles(A, E, F, G, F, E)
By sss_anti_congruence_v1 on E, G, A, F, A, G we get anti_congruent_triangles(A, E, G, G, F, A)
By sss_congruence_v1 on A, E, G, E, A, D we get congruent_triangles(A, D, E, E, G, A)
By parallel_line_angles_reverse_v3 on D, F, G, A we get angle(D, F, G) == angle(A, G, F) + 180 mod 360
By sss_anti_congruence_v1 on G, A, E, A, G, F we get anti_congruent_triangles(A, E, G, G, F, A)
By sss_congruence_v1 on E, A, D, A, E, G we get congruent_triangles(A, D, E, E, G, A)
By sss_anti_congruence_v0 on F, E, G, E, F, A we get anti_congruent_triangles(A, E, F, G, F, E)
By sss_anti_congruence_v0 on A, F, E, G, E, F we get anti_congruent_triangles(A, E, F, G, F, E)
By sss_congruence_v1 on D, E, A, G, A, E we get congruent_triangles(A, D, E, E, G, A)
By sss_anti_congruence_v1 on E, F, G, F, E, A we get anti_congruent_triangles(A, E, F, G, F, E)
By sss_anti_congruence_v0 on A, G, F, G, A, E we get anti_congruent_triangles(A, E, G, G, F, A)
By sss_anti_congruence_v0 on E, A, F, F, G, E we get anti_congruent_triangles(A, E, F, G, F, E)
By sss_congruence_v1 on A, D, E, E, G, A we get congruent_triangles(A, D, E, E, G, A)
By sss_anti_congruence_v0 on E, A, F, F, G, E we get anti_congruent_triangles(A, E, F, G, F, E)
By sss_congruence_v0 on D, A, E, G, E, A we get congruent_triangles(A, D, E, E, G, A)
By sss_anti_congruence_v0 on G, F, A, A, E, G we get anti_congruent_triangles(A, E, G, G, F, A)
By sss_congruence_v1 on D, E, A, G, A, E we get congruent_triangles(A, D, E, E, G, A)
By sss_anti_congruence_v0 on G, E, A, A, F, G we get anti_congruent_triangles(A, E, G, G, F, A)
By sss_congruence_v1 on A, E, G, E, A, D we get congruent_triangles(A, D, E, E, G, A)
By sss_anti_congruence_v0 on A, G, F, G, A, E we get anti_congruent_triangles(A, E, G, G, F, A)
By sss_anti_congruence_v0 on E, A, G, F, G, A we get anti_congruent_triangles(A, E, G, G, F, A)
By sss_anti_congruence_v0 on E, A, G, F, G, A we get anti_congruent_triangles(A, E, G, G, F, A)
By sss_anti_congruence_v1 on E, F, A, F, E, G we get anti_congruent_triangles(A, E, F, G, F, E)
By sss_anti_congruence_v1 on E, G, A, F, A, G we get anti_congruent_triangles(A, E, G, G, F, A)
By sss_anti_congruence_v1 on A, E, F, G, F, E we get anti_congruent_triangles(A, E, F, G, F, E)
By sss_congruence_v0 on A, G, E, E, D, A we get congruent_triangles(A, D, E, E, G, A)
By sss_anti_congruence_v0 on E, G, F, F, A, E we get anti_congruent_triangles(A, E, F, G, F, E)
By parallel_line_angles_reverse_v3 on G, A, E, F we get angle(G, A, E) == angle(F, E, A) + 180 mod 360
By sss_congruence_v1 on E, G, A, A, D, E we get congruent_triangles(A, D, E, E, G, A)
By sss_congruence_v1 on A, E, G, E, A, D we get congruent_triangles(A, D, E, E, G, A)
By sss_congruence_v1 on G, A, E, D, E, A we get congruent_triangles(A, D, E, E, G, A)
By sss_anti_congruence_v0 on G, F, E, A, E, F we get anti_congruent_triangles(A, E, F, G, F, E)
By sss_anti_congruence_v0 on F, A, G, E, G, A we get anti_congruent_triangles(A, E, G, G, F, A)
By sss_congruence_v0 on A, G, E, E, D, A we get congruent_triangles(A, D, E, E, G, A)
By sss_anti_congruence_v1 on F, G, A, E, A, G we get anti_congruent_triangles(A, E, G, G, F, A)
By reverse_direction on E, A we get 180 == direction(E, A) - direction(A, E) mod 360
By sss_anti_congruence_v1 on E, G, A, F, A, G we get anti_congruent_triangles(A, E, G, G, F, A)
By sss_anti_congruence_v1 on G, A, F, A, G, E we get anti_congruent_triangles(A, E, G, G, F, A)
By sss_anti_congruence_v1 on E, F, G, F, E, A we get anti_congruent_triangles(A, E, F, G, F, E)
By sss_anti_congruence_v0 on A, F, E, G, E, F we get anti_congruent_triangles(A, E, F, G, F, E)
By sss_congruence_v1 on A, E, G, E, A, D we get congruent_triangles(A, D, E, E, G, A)
By sss_anti_congruence_v1 on F, G, A, E, A, G we get anti_congruent_triangles(A, E, G, G, F, A)
By sss_anti_congruence_v0 on G, F, E, A, E, F we get anti_congruent_triangles(A, E, F, G, F, E)
By sss_anti_congruence_v0 on A, F, E, G, E, F we get anti_congruent_triangles(A, E, F, G, F, E)
By sss_congruence_v0 on E, A, G, A, E, D we get congruent_triangles(A, D, E, E, G, A)
By sss_congruence_v0 on E, A, G, A, E, D we get congruent_triangles(A, D, E, E, G, A)
By sss_anti_congruence_v1 on A, E, F, G, F, E we get anti_congruent_triangles(A, E, F, G, F, E)
By sss_anti_congruence_v0 on G, E, A, A, F, G we get anti_congruent_triangles(A, E, G, G, F, A)
By sss_anti_congruence_v1 on F, A, E, E, G, F we get anti_congruent_triangles(A, E, F, G, F, E)
By sss_anti_congruence_v0 on A, G, E, G, A, F we get anti_congruent_triangles(A, E, G, G, F, A)
By sss_anti_congruence_v1 on F, A, E, E, G, F we get anti_congruent_triangles(A, E, F, G, F, E)
By reverse_direction on A, E we get 180 == direction(A, E) - direction(E, A) mod 360
By sas_congruence on A, G, E, E, D, A we get congruent_triangles(A, D, E, E, G, A)
By isosceles_trapezoid_sufficient_conditions_v0 on G, A, F, E we get isosceles_trapezoid(F, E, G, A)
By sss_anti_congruence_v0 on F, A, G, E, G, A we get anti_congruent_triangles(A, E, G, G, F, A)
By sss_anti_congruence_v0 on A, F, E, G, E, F we get anti_congruent_triangles(A, E, F, G, F, E)
By sss_anti_congruence_v0 on E, A, F, F, G, E we get anti_congruent_triangles(A, E, F, G, F, E)
By sss_anti_congruence_v0 on F, E, G, E, F, A we get anti_congruent_triangles(A, E, F, G, F, E)
By sss_anti_congruence_v0 on F, E, G, E, F, A we get anti_congruent_triangles(A, E, F, G, F, E)
By sss_anti_congruence_v0 on G, F, A, A, E, G we get anti_congruent_triangles(A, E, G, G, F, A)
By sss_anti_congruence_v1 on E, F, G, F, E, A we get anti_congruent_triangles(A, E, F, G, F, E)
By sss_anti_congruence_v0 on G, F, A, A, E, G we get anti_congruent_triangles(A, E, G, G, F, A)
By sss_anti_congruence_v1 on G, E, F, A, F, E we get anti_congruent_triangles(A, E, F, G, F, E)
By sss_congruence_v1 on G, A, E, D, E, A we get congruent_triangles(A, D, E, E, G, A)
By sss_congruence_v1 on E, A, D, A, E, G we get congruent_triangles(A, D, E, E, G, A)
By sss_anti_congruence_v1 on G, E, F, A, F, E we get anti_congruent_triangles(A, E, F, G, F, E)
By sss_congruence_v1 on D, E, A, G, A, E we get congruent_triangles(A, D, E, E, G, A)
By sas_anti_congruence on G, A, F, A, G, E we get anti_congruent_triangles(A, E, G, G, F, A)
By sss_anti_congruence_v1 on G, E, F, A, F, E we get anti_congruent_triangles(A, E, F, G, F, E)
By sss_anti_congruence_v1 on A, E, G, G, F, A we get anti_congruent_triangles(A, E, G, G, F, A)
By sss_anti_congruence_v0 on G, E, A, A, F, G we get anti_congruent_triangles(A, E, G, G, F, A)
By sss_congruence_v0 on E, D, A, A, G, E we get congruent_triangles(A, D, E, E, G, A)
By sss_anti_congruence_v0 on G, F, E, A, E, F we get anti_congruent_triangles(A, E, F, G, F, E)
By sss_congruence_v0 on A, E, D, E, A, G we get congruent_triangles(A, D, E, E, G, A)
By sss_anti_congruence_v0 on E, G, F, F, A, E we get anti_congruent_triangles(A, E, F, G, F, E)
By sss_anti_congruence_v1 on E, F, G, F, E, A we get anti_congruent_triangles(A, E, F, G, F, E)
By sss_anti_congruence_v0 on A, G, E, G, A, F we get anti_congruent_triangles(A, E, G, G, F, A)
By sss_congruence_v0 on A, E, D, E, A, G we get congruent_triangles(A, D, E, E, G, A)
By sss_anti_congruence_v1 on E, F, G, F, E, A we get anti_congruent_triangles(A, E, F, G, F, E)
By sss_congruence_v0 on G, E, A, D, A, E we get congruent_triangles(A, D, E, E, G, A)
By sss_anti_congruence_v0 on A, G, F, G, A, E we get anti_congruent_triangles(A, E, G, G, F, A)
By sss_anti_congruence_v1 on E, F, A, F, E, G we get anti_congruent_triangles(A, E, F, G, F, E)
By sss_anti_congruence_v1 on F, G, A, E, A, G we get anti_congruent_triangles(A, E, G, G, F, A)
By sss_congruence_v0 on A, E, D, E, A, G we get congruent_triangles(A, D, E, E, G, A)
By sss_anti_congruence_v1 on F, G, E, E, A, F we get anti_congruent_triangles(A, E, F, G, F, E)
By sss_anti_congruence_v0 on A, G, E, G, A, F we get anti_congruent_triangles(A, E, G, G, F, A)
By sss_anti_congruence_v1 on F, G, A, E, A, G we get anti_congruent_triangles(A, E, G, G, F, A)
By sss_anti_congruence_v0 on A, G, E, G, A, F we get anti_congruent_triangles(A, E, G, G, F, A)
By sss_anti_congruence_v0 on E, G, F, F, A, E we get anti_congruent_triangles(A, E, F, G, F, E)
By reverse_direction on F, G we get 180 == direction(F, G) - direction(G, F) mod 360
By sss_anti_congruence_v1 on A, E, G, G, F, A we get anti_congruent_triangles(A, E, G, G, F, A)
By sss_anti_congruence_v1 on A, E, F, G, F, E we get anti_congruent_triangles(A, E, F, G, F, E)
By sss_anti_congruence_v1 on A, F, G, G, E, A we get anti_congruent_triangles(A, E, G, G, F, A)
By sss_anti_congruence_v0 on G, E, A, A, F, G we get anti_congruent_triangles(A, E, G, G, F, A)
By sss_anti_congruence_v1 on A, F, G, G, E, A we get anti_congruent_triangles(A, E, G, G, F, A)
By sss_anti_congruence_v0 on E, A, G, F, G, A we get anti_congruent_triangles(A, E, G, G, F, A)
By sss_congruence_v0 on G, E, A, D, A, E we get congruent_triangles(A, D, E, E, G, A)
By sss_congruence_v0 on D, A, E, G, E, A we get congruent_triangles(A, D, E, E, G, A)
By sss_congruence_v1 on D, E, A, G, A, E we get congruent_triangles(A, D, E, E, G, A)
By sas_anti_congruence on E, G, A, F, A, G we get anti_congruent_triangles(A, E, G, G, F, A)
By sss_anti_congruence_v1 on G, A, E, A, G, F we get anti_congruent_triangles(A, E, G, G, F, A)
By sss_congruence_v1 on E, G, A, A, D, E we get congruent_triangles(A, D, E, E, G, A)
By sss_anti_congruence_v1 on F, A, E, E, G, F we get anti_congruent_triangles(A, E, F, G, F, E)
By sss_anti_congruence_v0 on F, E, G, E, F, A we get anti_congruent_triangles(A, E, F, G, F, E)
By sss_congruence_v0 on E, A, G, A, E, D we get congruent_triangles(A, D, E, E, G, A)
By sss_congruence_v0 on E, A, G, A, E, D we get congruent_triangles(A, D, E, E, G, A)
By sss_anti_congruence_v0 on G, E, A, A, F, G we get anti_congruent_triangles(A, E, G, G, F, A)
By sss_congruence_v0 on D, A, E, G, E, A we get congruent_triangles(A, D, E, E, G, A)
By sss_congruence_v0 on G, E, A, D, A, E we get congruent_triangles(A, D, E, E, G, A)
By sss_anti_congruence_v1 on F, G, A, E, A, G we get anti_congruent_triangles(A, E, G, G, F, A)
By sss_anti_congruence_v0 on F, E, G, E, F, A we get anti_congruent_triangles(A, E, F, G, F, E)
By sss_congruence_v0 on A, E, D, E, A, G we get congruent_triangles(A, D, E, E, G, A)
By sss_congruence_v1 on G, A, E, D, E, A we get congruent_triangles(A, D, E, E, G, A)
By sss_anti_congruence_v0 on G, F, E, A, E, F we get anti_congruent_triangles(A, E, F, G, F, E)
By sss_congruence_v1 on A, D, E, E, G, A we get congruent_triangles(A, D, E, E, G, A)
By sss_anti_congruence_v1 on G, A, F, A, G, E we get anti_congruent_triangles(A, E, G, G, F, A)
By sss_anti_congruence_v1 on G, A, F, A, G, E we get anti_congruent_triangles(A, E, G, G, F, A)
By sss_anti_congruence_v1 on F, G, E, E, A, F we get anti_congruent_triangles(A, E, F, G, F, E)
By sss_congruence_v1 on A, D, E, E, G, A we get congruent_triangles(A, D, E, E, G, A)
By sss_anti_congruence_v1 on E, F, A, F, E, G we get anti_congruent_triangles(A, E, F, G, F, E)
By sss_anti_congruence_v0 on G, F, E, A, E, F we get anti_congruent_triangles(A, E, F, G, F, E)
By sss_congruence_v0 on D, A, E, G, E, A we get congruent_triangles(A, D, E, E, G, A)
By sss_congruence_v1 on A, D, E, E, G, A we get congruent_triangles(A, D, E, E, G, A)
By sss_anti_congruence_v0 on E, A, F, F, G, E we get anti_congruent_triangles(A, E, F, G, F, E)
By sss_congruence_v0 on G, E, A, D, A, E we get congruent_triangles(A, D, E, E, G, A)
By sss_anti_congruence_v1 on E, G, A, F, A, G we get anti_congruent_triangles(A, E, G, G, F, A)
By sss_anti_congruence_v0 on F, A, G, E, G, A we get anti_congruent_triangles(A, E, G, G, F, A)
By sss_anti_congruence_v0 on A, G, F, G, A, E we get anti_congruent_triangles(A, E, G, G, F, A)
By sas_congruence on E, D, A, A, G, E we get congruent_triangles(A, D, E, E, G, A)
By sss_anti_congruence_v0 on F, E, A, E, F, G we get anti_congruent_triangles(A, E, F, G, F, E)
By sss_anti_congruence_v0 on F, E, A, E, F, G we get anti_congruent_triangles(A, E, F, G, F, E)
By sss_congruence_v0 on G, E, A, D, A, E we get congruent_triangles(A, D, E, E, G, A)
By sss_anti_congruence_v1 on A, E, G, G, F, A we get anti_congruent_triangles(A, E, G, G, F, A)
By sas_congruence on A, D, E, E, G, A we get congruent_triangles(A, D, E, E, G, A)
By sas_congruence on E, G, A, A, D, E we get congruent_triangles(A, D, E, E, G, A)
By sss_congruence_v1 on E, A, D, A, E, G we get congruent_triangles(A, D, E, E, G, A)
By sss_congruence_v0 on A, G, E, E, D, A we get congruent_triangles(A, D, E, E, G, A)
By sss_congruence_v1 on E, A, D, A, E, G we get congruent_triangles(A, D, E, E, G, A)
By sss_anti_congruence_v1 on G, A, F, A, G, E we get anti_congruent_triangles(A, E, G, G, F, A)
By sss_congruence_v1 on E, A, D, A, E, G we get congruent_triangles(A, D, E, E, G, A)
By sss_anti_congruence_v0 on A, G, E, G, A, F we get anti_congruent_triangles(A, E, G, G, F, A)
By sss_congruence_v1 on E, G, A, A, D, E we get congruent_triangles(A, D, E, E, G, A)
By sss_anti_congruence_v0 on E, A, G, F, G, A we get anti_congruent_triangles(A, E, G, G, F, A)
By sss_anti_congruence_v1 on F, G, E, E, A, F we get anti_congruent_triangles(A, E, F, G, F, E)
By sss_anti_congruence_v1 on A, E, F, G, F, E we get anti_congruent_triangles(A, E, F, G, F, E)
By sss_anti_congruence_v0 on E, G, F, F, A, E we get anti_congruent_triangles(A, E, F, G, F, E)
By sas_anti_congruence on F, A, G, E, G, A we get anti_congruent_triangles(A, E, G, G, F, A)
By sss_anti_congruence_v0 on A, G, F, G, A, E we get anti_congruent_triangles(A, E, G, G, F, A)
By sss_congruence_v0 on E, D, A, A, G, E we get congruent_triangles(A, D, E, E, G, A)
By sss_congruence_v0 on E, D, A, A, G, E we get congruent_triangles(A, D, E, E, G, A)
By sss_anti_congruence_v1 on G, A, E, A, G, F we get anti_congruent_triangles(A, E, G, G, F, A)
By reverse_direction on G, F we get 180 == direction(G, F) - direction(F, G) mod 360
By sss_anti_congruence_v0 on F, E, A, E, F, G we get anti_congruent_triangles(A, E, F, G, F, E)
By sss_anti_congruence_v1 on E, F, A, F, E, G we get anti_congruent_triangles(A, E, F, G, F, E)
By sss_anti_congruence_v0 on G, F, A, A, E, G we get anti_congruent_triangles(A, E, G, G, F, A)
By sss_congruence_v1 on A, D, E, E, G, A we get congruent_triangles(A, D, E, E, G, A)
By sss_anti_congruence_v1 on F, A, E, E, G, F we get anti_congruent_triangles(A, E, F, G, F, E)
By sss_anti_congruence_v0 on F, E, A, E, F, G we get anti_congruent_triangles(A, E, F, G, F, E)
By perpendicular_direction_conditions_v0_r on line_intersection(j, l), C, line_intersection(k, Line(B, G)), E we get 180 == 2 * direction(line_intersection(j, l), C) - 2 * direction(line_intersection(k, Line(B, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), E, G, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(line_intersection(k, Line(B, G)), E) - 2 * direction(G, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), B, F, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(line_intersection(k, Line(B, G)), B) - 2 * direction(F, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(k, Line(B, G)), line_intersection(k, Line(B, G)), E we get 180 == 2 * direction(G, line_intersection(k, Line(B, G))) - 2 * direction(line_intersection(k, Line(B, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(j, l), line_intersection(j, l), A we get 180 == 2 * direction(E, line_intersection(j, l)) - 2 * direction(line_intersection(j, l), A) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(j, l), line_intersection(j, l), E we get 180 == 2 * direction(G, line_intersection(j, l)) - 2 * direction(line_intersection(j, l), E) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(j, l), line_intersection(k, Line(B, G)), B we get 180 == 2 * direction(A, line_intersection(j, l)) - 2 * direction(line_intersection(k, Line(B, G)), B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, l), A, G, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(line_intersection(j, l), A) - 2 * direction(G, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(k, Line(B, G)), line_intersection(k, Line(B, G)), D we get 180 == 2 * direction(G, line_intersection(k, Line(B, G))) - 2 * direction(line_intersection(k, Line(B, G)), D) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(j, l), A, line_intersection(j, l) we get 180 == 2 * direction(E, line_intersection(j, l)) - 2 * direction(A, line_intersection(j, l)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), G, line_intersection(k, Line(B, G)), E we get 180 == 2 * direction(line_intersection(k, Line(B, G)), G) - 2 * direction(line_intersection(k, Line(B, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, l), A, C, line_intersection(j, l) we get 180 == 2 * direction(line_intersection(j, l), A) - 2 * direction(C, line_intersection(j, l)) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(k, Line(B, G)), F, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(B, line_intersection(k, Line(B, G))) - 2 * direction(F, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(k, Line(B, G)), line_intersection(j, l), G we get 180 == 2 * direction(G, line_intersection(k, Line(B, G))) - 2 * direction(line_intersection(j, l), G) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(k, Line(B, G)), B, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(E, line_intersection(k, Line(B, G))) - 2 * direction(B, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(j, l), line_intersection(k, Line(B, G)), E we get 180 == 2 * direction(C, line_intersection(j, l)) - 2 * direction(line_intersection(k, Line(B, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(j, l), line_intersection(j, l), A we get 180 == 2 * direction(C, line_intersection(j, l)) - 2 * direction(line_intersection(j, l), A) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(j, l), line_intersection(k, Line(B, G)), D we get 180 == 2 * direction(E, line_intersection(j, l)) - 2 * direction(line_intersection(k, Line(B, G)), D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), D, C, line_intersection(j, l) we get 180 == 2 * direction(line_intersection(k, Line(B, G)), D) - 2 * direction(C, line_intersection(j, l)) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(j, l), line_intersection(k, Line(B, G)), E we get 180 == 2 * direction(E, line_intersection(j, l)) - 2 * direction(line_intersection(k, Line(B, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, l), E, line_intersection(k, Line(B, G)), E we get 180 == 2 * direction(line_intersection(j, l), E) - 2 * direction(line_intersection(k, Line(B, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(j, l), E, line_intersection(j, l) we get 180 == 2 * direction(A, line_intersection(j, l)) - 2 * direction(E, line_intersection(j, l)) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(j, l), line_intersection(j, l), G we get 180 == 2 * direction(C, line_intersection(j, l)) - 2 * direction(line_intersection(j, l), G) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(k, Line(B, G)), G, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(F, line_intersection(k, Line(B, G))) - 2 * direction(G, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), B, line_intersection(k, Line(B, G)), E we get 180 == 2 * direction(line_intersection(k, Line(B, G)), B) - 2 * direction(line_intersection(k, Line(B, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, l), G, line_intersection(j, l), E we get 180 == 2 * direction(line_intersection(j, l), G) - 2 * direction(line_intersection(j, l), E) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(k, Line(B, G)), line_intersection(k, Line(B, G)), D we get 180 == 2 * direction(B, line_intersection(k, Line(B, G))) - 2 * direction(line_intersection(k, Line(B, G)), D) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(k, Line(B, G)), line_intersection(j, l), C we get 180 == 2 * direction(E, line_intersection(k, Line(B, G))) - 2 * direction(line_intersection(j, l), C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, l), A, B, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(line_intersection(j, l), A) - 2 * direction(B, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(j, l), E, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(C, line_intersection(j, l)) - 2 * direction(E, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(k, Line(B, G)), F, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(G, line_intersection(k, Line(B, G))) - 2 * direction(F, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, l), C, E, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(line_intersection(j, l), C) - 2 * direction(E, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(k, Line(B, G)), line_intersection(j, l), C we get 180 == 2 * direction(F, line_intersection(k, Line(B, G))) - 2 * direction(line_intersection(j, l), C) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(k, Line(B, G)), A, line_intersection(j, l) we get 180 == 2 * direction(B, line_intersection(k, Line(B, G))) - 2 * direction(A, line_intersection(j, l)) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(k, Line(B, G)), line_intersection(k, Line(B, G)), G we get 180 == 2 * direction(F, line_intersection(k, Line(B, G))) - 2 * direction(line_intersection(k, Line(B, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(k, Line(B, G)), line_intersection(j, l), E we get 180 == 2 * direction(F, line_intersection(k, Line(B, G))) - 2 * direction(line_intersection(j, l), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), D, line_intersection(j, l), E we get 180 == 2 * direction(line_intersection(k, Line(B, G)), D) - 2 * direction(line_intersection(j, l), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), E, E, line_intersection(j, l) we get 180 == 2 * direction(line_intersection(k, Line(B, G)), E) - 2 * direction(E, line_intersection(j, l)) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(j, l), B, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(A, line_intersection(j, l)) - 2 * direction(B, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(k, Line(B, G)), C, line_intersection(j, l) we get 180 == 2 * direction(F, line_intersection(k, Line(B, G))) - 2 * direction(C, line_intersection(j, l)) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(j, l), D, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(C, line_intersection(j, l)) - 2 * direction(D, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, l), C, G, line_intersection(j, l) we get 180 == 2 * direction(line_intersection(j, l), C) - 2 * direction(G, line_intersection(j, l)) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(j, l), line_intersection(k, Line(B, G)), G we get 180 == 2 * direction(G, line_intersection(j, l)) - 2 * direction(line_intersection(k, Line(B, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, l), C, line_intersection(j, l), A we get 180 == 2 * direction(line_intersection(j, l), C) - 2 * direction(line_intersection(j, l), A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, l), G, B, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(line_intersection(j, l), G) - 2 * direction(B, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(k, Line(B, G)), line_intersection(k, Line(B, G)), F we get 180 == 2 * direction(B, line_intersection(k, Line(B, G))) - 2 * direction(line_intersection(k, Line(B, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, l), A, line_intersection(k, Line(B, G)), B we get 180 == 2 * direction(line_intersection(j, l), A) - 2 * direction(line_intersection(k, Line(B, G)), B) mod 360
By external_angle_bisector_definition_v0_r on C, G, A, B we get Line(B, G) == external_angle_bisector(A, B, C)
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), G, line_intersection(j, l), A we get 180 == 2 * direction(line_intersection(k, Line(B, G)), G) - 2 * direction(line_intersection(j, l), A) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(k, Line(B, G)), line_intersection(j, l), E we get 180 == 2 * direction(E, line_intersection(k, Line(B, G))) - 2 * direction(line_intersection(j, l), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), B, D, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(line_intersection(k, Line(B, G)), B) - 2 * direction(D, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(j, l), G, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(A, line_intersection(j, l)) - 2 * direction(G, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(k, Line(B, G)), E, line_intersection(j, l) we get 180 == 2 * direction(E, line_intersection(k, Line(B, G))) - 2 * direction(E, line_intersection(j, l)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, l), G, G, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(line_intersection(j, l), G) - 2 * direction(G, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), B, line_intersection(j, l), G we get 180 == 2 * direction(line_intersection(k, Line(B, G)), B) - 2 * direction(line_intersection(j, l), G) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(k, Line(B, G)), E, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(B, line_intersection(k, Line(B, G))) - 2 * direction(E, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(k, Line(B, G)), line_intersection(k, Line(B, G)), B we get 180 == 2 * direction(F, line_intersection(k, Line(B, G))) - 2 * direction(line_intersection(k, Line(B, G)), B) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(j, l), line_intersection(k, Line(B, G)), D we get 180 == 2 * direction(C, line_intersection(j, l)) - 2 * direction(line_intersection(k, Line(B, G)), D) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(k, Line(B, G)), A, line_intersection(j, l) we get 180 == 2 * direction(G, line_intersection(k, Line(B, G))) - 2 * direction(A, line_intersection(j, l)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, l), E, E, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(line_intersection(j, l), E) - 2 * direction(E, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(j, l), line_intersection(j, l), C we get 180 == 2 * direction(A, line_intersection(j, l)) - 2 * direction(line_intersection(j, l), C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), F, G, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(line_intersection(k, Line(B, G)), F) - 2 * direction(G, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), E, C, line_intersection(j, l) we get 180 == 2 * direction(line_intersection(k, Line(B, G)), E) - 2 * direction(C, line_intersection(j, l)) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(k, Line(B, G)), line_intersection(k, Line(B, G)), B we get 180 == 2 * direction(D, line_intersection(k, Line(B, G))) - 2 * direction(line_intersection(k, Line(B, G)), B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), B, A, line_intersection(j, l) we get 180 == 2 * direction(line_intersection(k, Line(B, G)), B) - 2 * direction(A, line_intersection(j, l)) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(j, l), line_intersection(k, Line(B, G)), F we get 180 == 2 * direction(E, line_intersection(j, l)) - 2 * direction(line_intersection(k, Line(B, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(k, Line(B, G)), line_intersection(k, Line(B, G)), F we get 180 == 2 * direction(G, line_intersection(k, Line(B, G))) - 2 * direction(line_intersection(k, Line(B, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), E, B, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(line_intersection(k, Line(B, G)), E) - 2 * direction(B, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), G, F, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(line_intersection(k, Line(B, G)), G) - 2 * direction(F, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), D, G, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(line_intersection(k, Line(B, G)), D) - 2 * direction(G, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, l), G, line_intersection(k, Line(B, G)), B we get 180 == 2 * direction(line_intersection(j, l), G) - 2 * direction(line_intersection(k, Line(B, G)), B) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(k, Line(B, G)), E, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(G, line_intersection(k, Line(B, G))) - 2 * direction(E, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(k, Line(B, G)), line_intersection(j, l), C we get 180 == 2 * direction(D, line_intersection(k, Line(B, G))) - 2 * direction(line_intersection(j, l), C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, l), G, E, line_intersection(j, l) we get 180 == 2 * direction(line_intersection(j, l), G) - 2 * direction(E, line_intersection(j, l)) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(k, Line(B, G)), D, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(G, line_intersection(k, Line(B, G))) - 2 * direction(D, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, l), E, line_intersection(k, Line(B, G)), F we get 180 == 2 * direction(line_intersection(j, l), E) - 2 * direction(line_intersection(k, Line(B, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(k, Line(B, G)), C, line_intersection(j, l) we get 180 == 2 * direction(D, line_intersection(k, Line(B, G))) - 2 * direction(C, line_intersection(j, l)) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(j, l), F, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(E, line_intersection(j, l)) - 2 * direction(F, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), G, A, line_intersection(j, l) we get 180 == 2 * direction(line_intersection(k, Line(B, G)), G) - 2 * direction(A, line_intersection(j, l)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), E, line_intersection(j, l), E we get 180 == 2 * direction(line_intersection(k, Line(B, G)), E) - 2 * direction(line_intersection(j, l), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), B, line_intersection(k, Line(B, G)), F we get 180 == 2 * direction(line_intersection(k, Line(B, G)), B) - 2 * direction(line_intersection(k, Line(B, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(j, l), line_intersection(j, l), C we get 180 == 2 * direction(G, line_intersection(j, l)) - 2 * direction(line_intersection(j, l), C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, l), E, line_intersection(k, Line(B, G)), D we get 180 == 2 * direction(line_intersection(j, l), E) - 2 * direction(line_intersection(k, Line(B, G)), D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), F, E, line_intersection(j, l) we get 180 == 2 * direction(line_intersection(k, Line(B, G)), F) - 2 * direction(E, line_intersection(j, l)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), F, C, line_intersection(j, l) we get 180 == 2 * direction(line_intersection(k, Line(B, G)), F) - 2 * direction(C, line_intersection(j, l)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), F, line_intersection(k, Line(B, G)), G we get 180 == 2 * direction(line_intersection(k, Line(B, G)), F) - 2 * direction(line_intersection(k, Line(B, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(k, Line(B, G)), line_intersection(j, l), G we get 180 == 2 * direction(B, line_intersection(k, Line(B, G))) - 2 * direction(line_intersection(j, l), G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), D, B, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(line_intersection(k, Line(B, G)), D) - 2 * direction(B, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(k, Line(B, G)), E, line_intersection(j, l) we get 180 == 2 * direction(F, line_intersection(k, Line(B, G))) - 2 * direction(E, line_intersection(j, l)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, l), C, line_intersection(k, Line(B, G)), F we get 180 == 2 * direction(line_intersection(j, l), C) - 2 * direction(line_intersection(k, Line(B, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, l), G, line_intersection(j, l), C we get 180 == 2 * direction(line_intersection(j, l), G) - 2 * direction(line_intersection(j, l), C) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(j, l), E, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(E, line_intersection(j, l)) - 2 * direction(E, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(k, Line(B, G)), line_intersection(k, Line(B, G)), G we get 180 == 2 * direction(D, line_intersection(k, Line(B, G))) - 2 * direction(line_intersection(k, Line(B, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), B, line_intersection(k, Line(B, G)), D we get 180 == 2 * direction(line_intersection(k, Line(B, G)), B) - 2 * direction(line_intersection(k, Line(B, G)), D) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(k, Line(B, G)), G, line_intersection(j, l) we get 180 == 2 * direction(B, line_intersection(k, Line(B, G))) - 2 * direction(G, line_intersection(j, l)) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(k, Line(B, G)), G, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(D, line_intersection(k, Line(B, G))) - 2 * direction(G, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), D, line_intersection(j, l), C we get 180 == 2 * direction(line_intersection(k, Line(B, G)), D) - 2 * direction(line_intersection(j, l), C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), G, G, line_intersection(j, l) we get 180 == 2 * direction(line_intersection(k, Line(B, G)), G) - 2 * direction(G, line_intersection(j, l)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), G, line_intersection(j, l), G we get 180 == 2 * direction(line_intersection(k, Line(B, G)), G) - 2 * direction(line_intersection(j, l), G) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(j, l), line_intersection(k, Line(B, G)), G we get 180 == 2 * direction(A, line_intersection(j, l)) - 2 * direction(line_intersection(k, Line(B, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(j, l), D, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(E, line_intersection(j, l)) - 2 * direction(D, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), E, line_intersection(k, Line(B, G)), B we get 180 == 2 * direction(line_intersection(k, Line(B, G)), E) - 2 * direction(line_intersection(k, Line(B, G)), B) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(j, l), line_intersection(k, Line(B, G)), B we get 180 == 2 * direction(G, line_intersection(j, l)) - 2 * direction(line_intersection(k, Line(B, G)), B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, l), E, D, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(line_intersection(j, l), E) - 2 * direction(D, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(k, Line(B, G)), line_intersection(k, Line(B, G)), E we get 180 == 2 * direction(B, line_intersection(k, Line(B, G))) - 2 * direction(line_intersection(k, Line(B, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), D, line_intersection(k, Line(B, G)), B we get 180 == 2 * direction(line_intersection(k, Line(B, G)), D) - 2 * direction(line_intersection(k, Line(B, G)), B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), D, line_intersection(k, Line(B, G)), G we get 180 == 2 * direction(line_intersection(k, Line(B, G)), D) - 2 * direction(line_intersection(k, Line(B, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, l), E, G, line_intersection(j, l) we get 180 == 2 * direction(line_intersection(j, l), E) - 2 * direction(G, line_intersection(j, l)) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(j, l), G, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(G, line_intersection(j, l)) - 2 * direction(G, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), F, line_intersection(k, Line(B, G)), B we get 180 == 2 * direction(line_intersection(k, Line(B, G)), F) - 2 * direction(line_intersection(k, Line(B, G)), B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, l), A, line_intersection(j, l), E we get 180 == 2 * direction(line_intersection(j, l), A) - 2 * direction(line_intersection(j, l), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, l), E, line_intersection(j, l), A we get 180 == 2 * direction(line_intersection(j, l), E) - 2 * direction(line_intersection(j, l), A) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(k, Line(B, G)), line_intersection(j, l), E we get 180 == 2 * direction(D, line_intersection(k, Line(B, G))) - 2 * direction(line_intersection(j, l), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), F, line_intersection(j, l), E we get 180 == 2 * direction(line_intersection(k, Line(B, G)), F) - 2 * direction(line_intersection(j, l), E) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(k, Line(B, G)), line_intersection(j, l), A we get 180 == 2 * direction(B, line_intersection(k, Line(B, G))) - 2 * direction(line_intersection(j, l), A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, l), E, A, line_intersection(j, l) we get 180 == 2 * direction(line_intersection(j, l), E) - 2 * direction(A, line_intersection(j, l)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, l), C, line_intersection(k, Line(B, G)), D we get 180 == 2 * direction(line_intersection(j, l), C) - 2 * direction(line_intersection(k, Line(B, G)), D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, l), G, line_intersection(k, Line(B, G)), G we get 180 == 2 * direction(line_intersection(j, l), G) - 2 * direction(line_intersection(k, Line(B, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(j, l), E, line_intersection(j, l) we get 180 == 2 * direction(G, line_intersection(j, l)) - 2 * direction(E, line_intersection(j, l)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), B, E, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(line_intersection(k, Line(B, G)), B) - 2 * direction(E, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, l), E, F, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(line_intersection(j, l), E) - 2 * direction(F, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(k, Line(B, G)), G, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(E, line_intersection(k, Line(B, G))) - 2 * direction(G, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(k, Line(B, G)), line_intersection(k, Line(B, G)), B we get 180 == 2 * direction(E, line_intersection(k, Line(B, G))) - 2 * direction(line_intersection(k, Line(B, G)), B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, l), C, A, line_intersection(j, l) we get 180 == 2 * direction(line_intersection(j, l), C) - 2 * direction(A, line_intersection(j, l)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), F, B, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(line_intersection(k, Line(B, G)), F) - 2 * direction(B, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, l), A, line_intersection(k, Line(B, G)), G we get 180 == 2 * direction(line_intersection(j, l), A) - 2 * direction(line_intersection(k, Line(B, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(k, Line(B, G)), B, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(D, line_intersection(k, Line(B, G))) - 2 * direction(B, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(j, l), A, line_intersection(j, l) we get 180 == 2 * direction(C, line_intersection(j, l)) - 2 * direction(A, line_intersection(j, l)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, l), E, line_intersection(j, l), G we get 180 == 2 * direction(line_intersection(j, l), E) - 2 * direction(line_intersection(j, l), G) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(k, Line(B, G)), line_intersection(j, l), A we get 180 == 2 * direction(G, line_intersection(k, Line(B, G))) - 2 * direction(line_intersection(j, l), A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), G, line_intersection(k, Line(B, G)), D we get 180 == 2 * direction(line_intersection(k, Line(B, G)), G) - 2 * direction(line_intersection(k, Line(B, G)), D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), F, line_intersection(j, l), C we get 180 == 2 * direction(line_intersection(k, Line(B, G)), F) - 2 * direction(line_intersection(j, l), C) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(k, Line(B, G)), line_intersection(k, Line(B, G)), G we get 180 == 2 * direction(E, line_intersection(k, Line(B, G))) - 2 * direction(line_intersection(k, Line(B, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(k, Line(B, G)), B, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(F, line_intersection(k, Line(B, G))) - 2 * direction(B, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(k, Line(B, G)), G, line_intersection(j, l) we get 180 == 2 * direction(G, line_intersection(k, Line(B, G))) - 2 * direction(G, line_intersection(j, l)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), B, line_intersection(j, l), A we get 180 == 2 * direction(line_intersection(k, Line(B, G)), B) - 2 * direction(line_intersection(j, l), A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, l), C, D, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(line_intersection(j, l), C) - 2 * direction(D, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(j, l), G, line_intersection(j, l) we get 180 == 2 * direction(C, line_intersection(j, l)) - 2 * direction(G, line_intersection(j, l)) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(k, Line(B, G)), E, line_intersection(j, l) we get 180 == 2 * direction(D, line_intersection(k, Line(B, G))) - 2 * direction(E, line_intersection(j, l)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), E, line_intersection(k, Line(B, G)), G we get 180 == 2 * direction(line_intersection(k, Line(B, G)), E) - 2 * direction(line_intersection(k, Line(B, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, l), C, F, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(line_intersection(j, l), C) - 2 * direction(F, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), B, G, line_intersection(j, l) we get 180 == 2 * direction(line_intersection(k, Line(B, G)), B) - 2 * direction(G, line_intersection(j, l)) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(j, l), line_intersection(j, l), G we get 180 == 2 * direction(E, line_intersection(j, l)) - 2 * direction(line_intersection(j, l), G) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(j, l), C, line_intersection(j, l) we get 180 == 2 * direction(A, line_intersection(j, l)) - 2 * direction(C, line_intersection(j, l)) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(j, l), C, line_intersection(j, l) we get 180 == 2 * direction(G, line_intersection(j, l)) - 2 * direction(C, line_intersection(j, l)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), G, E, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(line_intersection(k, Line(B, G)), G) - 2 * direction(E, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(j, l), G, line_intersection(j, l) we get 180 == 2 * direction(E, line_intersection(j, l)) - 2 * direction(G, line_intersection(j, l)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), G, D, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(line_intersection(k, Line(B, G)), G) - 2 * direction(D, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, l), G, C, line_intersection(j, l) we get 180 == 2 * direction(line_intersection(j, l), G) - 2 * direction(C, line_intersection(j, l)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, l), A, E, line_intersection(j, l) we get 180 == 2 * direction(line_intersection(j, l), A) - 2 * direction(E, line_intersection(j, l)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), E, line_intersection(j, l), C we get 180 == 2 * direction(line_intersection(k, Line(B, G)), E) - 2 * direction(line_intersection(j, l), C) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(k, Line(B, G)), D, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(B, line_intersection(k, Line(B, G))) - 2 * direction(D, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(j, l), B, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(G, line_intersection(j, l)) - 2 * direction(B, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(j, l), F, line_intersection(k, Line(B, G)) we get 180 == 2 * direction(C, line_intersection(j, l)) - 2 * direction(F, line_intersection(k, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, l), A, line_intersection(j, l), C we get 180 == 2 * direction(line_intersection(j, l), A) - 2 * direction(line_intersection(j, l), C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, l), C, line_intersection(j, l), G we get 180 == 2 * direction(line_intersection(j, l), C) - 2 * direction(line_intersection(j, l), G) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(j, l), line_intersection(k, Line(B, G)), F we get 180 == 2 * direction(C, line_intersection(j, l)) - 2 * direction(line_intersection(k, Line(B, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), D, E, line_intersection(j, l) we get 180 == 2 * direction(line_intersection(k, Line(B, G)), D) - 2 * direction(E, line_intersection(j, l)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, Line(B, G)), G, line_intersection(k, Line(B, G)), F we get 180 == 2 * direction(line_intersection(k, Line(B, G)), G) - 2 * direction(line_intersection(k, Line(B, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(j, l), line_intersection(j, l), E we get 180 == 2 * direction(A, line_intersection(j, l)) - 2 * direction(line_intersection(j, l), E) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(k, Line(B, G)), C, line_intersection(j, l) we get 180 == 2 * direction(E, line_intersection(k, Line(B, G))) - 2 * direction(C, line_intersection(j, l)) mod 360
By collinear_definition on C, E, line_intersection(j, l) we get E in Line(C, line_intersection(j, l)), line_intersection(j, l) in Line(C, E), Line(C, E) == Line(C, line_intersection(j, l)), 0 == 2 * angle(E, C, line_intersection(j, l)) mod 360
By external_angle_bisector_definition_v0 on D, line_intersection(j, l), D, E we get 180 == angle(D, E, line_intersection(j, l)) + angle(D, E, line_intersection(j, l)) mod 360
By collinear_definition on F, line_intersection(k, Line(B, G)), D we get line_intersection(k, Line(B, G)) in Line(D, F), D in Line(F, line_intersection(k, Line(B, G))), Line(D, F) == Line(F, line_intersection(k, Line(B, G))), 0 == 2 * angle(line_intersection(k, Line(B, G)), F, D) mod 360
By collinear_definition on B, line_intersection(k, Line(B, G)), G we get line_intersection(k, Line(B, G)) in Line(B, G), G in Line(B, line_intersection(k, Line(B, G))), Line(B, G) == Line(B, line_intersection(k, Line(B, G))), 0 == 2 * angle(line_intersection(k, Line(B, G)), B, G) mod 360
By internal_angle_bisector_definition_v0 on D, line_intersection(k, Line(B, G)), D, F we get angle(D, F, line_intersection(k, Line(B, G))) == angle(line_intersection(k, Line(B, G)), F, D) mod 360
By external_angle_bisector_definition_v0 on B, line_intersection(j, l), B, G we get 180 == angle(B, G, line_intersection(j, l)) + angle(B, G, line_intersection(j, l)) mod 360
By external_angle_bisector_definition_v0 on D, line_intersection(j, l), F, A we get 180 == angle(D, A, line_intersection(j, l)) + angle(F, A, line_intersection(j, l)) mod 360
By external_angle_bisector_definition_v0 on D, line_intersection(j, l), B, A we get 180 == angle(D, A, line_intersection(j, l)) + angle(B, A, line_intersection(j, l)) mod 360
By internal_angle_bisector_definition_v0 on C, line_intersection(k, Line(B, G)), A, D we get angle(C, D, line_intersection(k, Line(B, G))) == angle(line_intersection(k, Line(B, G)), D, A) mod 360
By collinear_definition on D, F, line_intersection(k, Line(B, G)) we get F in Line(D, line_intersection(k, Line(B, G))), line_intersection(k, Line(B, G)) in Line(D, F), Line(D, F) == Line(D, line_intersection(k, Line(B, G))), 0 == 2 * angle(F, D, line_intersection(k, Line(B, G))) mod 360
By internal_angle_bisector_definition_v0 on F, line_intersection(j, l), D, E we get angle(F, E, line_intersection(j, l)) == angle(line_intersection(j, l), E, D) mod 360
By collinear_definition on E, C, line_intersection(j, l) we get C in Line(E, line_intersection(j, l)), line_intersection(j, l) in Line(C, E), Line(C, E) == Line(E, line_intersection(j, l)), 0 == 2 * angle(C, E, line_intersection(j, l)) mod 360
By perpendicular_angle_conditions_v0 on line_intersection(j, l), E, D we get angle(line_intersection(j, l), E, D) == orientation(D, line_intersection(j, l), E) mod 360
By collinear_definition on G, line_intersection(k, Line(B, G)), B we get line_intersection(k, Line(B, G)) in Line(B, G), B in Line(G, line_intersection(k, Line(B, G))), Line(B, G) == Line(G, line_intersection(k, Line(B, G))), 0 == 2 * angle(line_intersection(k, Line(B, G)), G, B) mod 360
By collinear_definition on E, D, line_intersection(k, Line(B, G)) we get D in Line(E, line_intersection(k, Line(B, G))), line_intersection(k, Line(B, G)) in Line(D, E), Line(D, E) == Line(E, line_intersection(k, Line(B, G))), 0 == 2 * angle(D, E, line_intersection(k, Line(B, G))) mod 360
By external_angle_bisector_definition_v0 on C, line_intersection(k, Line(B, G)), C, E we get 180 == angle(C, E, line_intersection(k, Line(B, G))) + angle(C, E, line_intersection(k, Line(B, G))) mod 360
By collinear_definition on E, line_intersection(k, Line(B, G)), F we get line_intersection(k, Line(B, G)) in Line(E, F), F in Line(E, line_intersection(k, Line(B, G))), Line(E, F) == Line(E, line_intersection(k, Line(B, G))), 0 == 2 * angle(line_intersection(k, Line(B, G)), E, F) mod 360
By internal_angle_bisector_definition_v0 on F, line_intersection(k, Line(B, G)), F, D we get angle(F, D, line_intersection(k, Line(B, G))) == angle(line_intersection(k, Line(B, G)), D, F) mod 360
By collinear_definition on G, B, line_intersection(k, Line(B, G)) we get B in Line(G, line_intersection(k, Line(B, G))), line_intersection(k, Line(B, G)) in Line(B, G), Line(B, G) == Line(G, line_intersection(k, Line(B, G))), 0 == 2 * angle(B, G, line_intersection(k, Line(B, G))) mod 360
By collinear_definition on A, line_intersection(j, l), G we get line_intersection(j, l) in Line(A, G), G in Line(A, line_intersection(j, l)), Line(A, G) == Line(A, line_intersection(j, l)), 0 == 2 * angle(line_intersection(j, l), A, G) mod 360
By perpendicular_angle_conditions_v0 on C, E, line_intersection(k, Line(B, G)) we get angle(C, E, line_intersection(k, Line(B, G))) == orientation(C, E, line_intersection(k, Line(B, G))) mod 360
By internal_angle_bisector_definition_v0_r on F, G, C, B we get Line(B, G) == internal_angle_bisector(C, B, F)
By internal_angle_bisector_definition_v0 on A, line_intersection(k, Line(B, G)), C, D we get angle(A, D, line_intersection(k, Line(B, G))) == angle(line_intersection(k, Line(B, G)), D, C) mod 360
By internal_angle_bisector_definition_v0 on F, line_intersection(k, Line(B, G)), F, E we get angle(F, E, line_intersection(k, Line(B, G))) == angle(line_intersection(k, Line(B, G)), E, F) mod 360
By perpendicular_angle_conditions_v0 on D, E, line_intersection(j, l) we get angle(D, E, line_intersection(j, l)) == orientation(D, E, line_intersection(j, l)) mod 360
By perpendicular_angle_conditions_v0 on B, G, line_intersection(j, l) we get angle(B, G, line_intersection(j, l)) == orientation(B, G, line_intersection(j, l)) mod 360
By perpendicular_angle_conditions_v0 on line_intersection(k, Line(B, G)), G, A we get angle(line_intersection(k, Line(B, G)), G, A) == orientation(A, line_intersection(k, Line(B, G)), G) mod 360
By perpendicular_angle_conditions_v0 on line_intersection(j, l), G, B we get angle(line_intersection(j, l), G, B) == orientation(B, line_intersection(j, l), G) mod 360
By external_angle_bisector_definition_v0 on A, line_intersection(k, Line(B, G)), A, G we get 180 == angle(A, G, line_intersection(k, Line(B, G))) + angle(A, G, line_intersection(k, Line(B, G))) mod 360
By collinear_definition on G, line_intersection(j, l), A we get line_intersection(j, l) in Line(A, G), A in Line(G, line_intersection(j, l)), Line(A, G) == Line(G, line_intersection(j, l)), 0 == 2 * angle(line_intersection(j, l), G, A) mod 360
By internal_angle_bisector_definition_v0 on B, line_intersection(j, l), D, C we get angle(B, C, line_intersection(j, l)) == angle(line_intersection(j, l), C, D) mod 360
By collinear_definition on F, E, line_intersection(k, Line(B, G)) we get E in Line(F, line_intersection(k, Line(B, G))), line_intersection(k, Line(B, G)) in Line(E, F), Line(E, F) == Line(F, line_intersection(k, Line(B, G))), 0 == 2 * angle(E, F, line_intersection(k, Line(B, G))) mod 360
By perpendicular_angle_conditions_v0 on F, E, line_intersection(j, l) we get angle(F, E, line_intersection(j, l)) == orientation(E, line_intersection(j, l), F) mod 360
By collinear_definition on B, G, line_intersection(k, Line(B, G)) we get G in Line(B, line_intersection(k, Line(B, G))), line_intersection(k, Line(B, G)) in Line(B, G), Line(B, G) == Line(B, line_intersection(k, Line(B, G))), 0 == 2 * angle(G, B, line_intersection(k, Line(B, G))) mod 360
By collinear_definition on A, G, line_intersection(j, l) we get G in Line(A, line_intersection(j, l)), line_intersection(j, l) in Line(A, G), Line(A, G) == Line(A, line_intersection(j, l)), 0 == 2 * angle(G, A, line_intersection(j, l)) mod 360
By collinear_definition on E, F, line_intersection(k, Line(B, G)) we get F in Line(E, line_intersection(k, Line(B, G))), line_intersection(k, Line(B, G)) in Line(E, F), Line(E, F) == Line(E, line_intersection(k, Line(B, G))), 0 == 2 * angle(F, E, line_intersection(k, Line(B, G))) mod 360
By collinear_definition on G, A, line_intersection(j, l) we get A in Line(G, line_intersection(j, l)), line_intersection(j, l) in Line(A, G), Line(A, G) == Line(G, line_intersection(j, l)), 0 == 2 * angle(A, G, line_intersection(j, l)) mod 360
By collinear_definition on D, E, line_intersection(k, Line(B, G)) we get E in Line(D, line_intersection(k, Line(B, G))), line_intersection(k, Line(B, G)) in Line(D, E), Line(D, E) == Line(D, line_intersection(k, Line(B, G))), 0 == 2 * angle(E, D, line_intersection(k, Line(B, G))) mod 360
By collinear_definition on E, line_intersection(k, Line(B, G)), D we get line_intersection(k, Line(B, G)) in Line(D, E), D in Line(E, line_intersection(k, Line(B, G))), Line(D, E) == Line(E, line_intersection(k, Line(B, G))), 0 == 2 * angle(line_intersection(k, Line(B, G)), E, D) mod 360
By internal_angle_bisector_definition_v0 on E, line_intersection(k, Line(B, G)), E, F we get angle(E, F, line_intersection(k, Line(B, G))) == angle(line_intersection(k, Line(B, G)), F, E) mod 360
By external_angle_bisector_definition_v0 on F, line_intersection(j, l), F, E we get 180 == angle(F, E, line_intersection(j, l)) + angle(F, E, line_intersection(j, l)) mod 360
By collinear_definition on D, line_intersection(k, Line(B, G)), E we get line_intersection(k, Line(B, G)) in Line(D, E), E in Line(D, line_intersection(k, Line(B, G))), Line(D, E) == Line(D, line_intersection(k, Line(B, G))), 0 == 2 * angle(line_intersection(k, Line(B, G)), D, E) mod 360
By internal_angle_bisector_definition_v0 on D, line_intersection(k, Line(B, G)), D, E we get angle(D, E, line_intersection(k, Line(B, G))) == angle(line_intersection(k, Line(B, G)), E, D) mod 360
By perpendicular_angle_conditions_v0 on line_intersection(j, l), E, F we get angle(line_intersection(j, l), E, F) == orientation(E, F, line_intersection(j, l)) mod 360
By collinear_definition on D, line_intersection(k, Line(B, G)), F we get line_intersection(k, Line(B, G)) in Line(D, F), F in Line(D, line_intersection(k, Line(B, G))), Line(D, F) == Line(D, line_intersection(k, Line(B, G))), 0 == 2 * angle(line_intersection(k, Line(B, G)), D, F) mod 360
By collinear_definition on F, D, line_intersection(k, Line(B, G)) we get D in Line(F, line_intersection(k, Line(B, G))), line_intersection(k, Line(B, G)) in Line(D, F), Line(D, F) == Line(F, line_intersection(k, Line(B, G))), 0 == 2 * angle(D, F, line_intersection(k, Line(B, G))) mod 360
By collinear_definition on F, line_intersection(k, Line(B, G)), E we get line_intersection(k, Line(B, G)) in Line(E, F), E in Line(F, line_intersection(k, Line(B, G))), Line(E, F) == Line(F, line_intersection(k, Line(B, G))), 0 == 2 * angle(line_intersection(k, Line(B, G)), F, E) mod 360
By collinear_definition on C, line_intersection(j, l), E we get line_intersection(j, l) in Line(C, E), E in Line(C, line_intersection(j, l)), Line(C, E) == Line(C, line_intersection(j, l)), 0 == 2 * angle(line_intersection(j, l), C, E) mod 360
By internal_angle_bisector_definition_v0 on D, line_intersection(j, l), B, C we get angle(D, C, line_intersection(j, l)) == angle(line_intersection(j, l), C, B) mod 360
By internal_angle_bisector_definition_v0 on D, line_intersection(j, l), F, E we get angle(D, E, line_intersection(j, l)) == angle(line_intersection(j, l), E, F) mod 360
By perpendicular_angle_conditions_v0 on A, G, line_intersection(k, Line(B, G)) we get angle(A, G, line_intersection(k, Line(B, G))) == orientation(A, G, line_intersection(k, Line(B, G))) mod 360
By perpendicular_angle_conditions_v0 on line_intersection(k, Line(B, G)), E, C we get angle(line_intersection(k, Line(B, G)), E, C) == orientation(C, line_intersection(k, Line(B, G)), E) mod 360
By internal_angle_bisector_definition_v0 on E, line_intersection(k, Line(B, G)), E, D we get angle(E, D, line_intersection(k, Line(B, G))) == angle(line_intersection(k, Line(B, G)), D, E) mod 360
By collinear_definition on E, line_intersection(j, l), C we get line_intersection(j, l) in Line(C, E), C in Line(E, line_intersection(j, l)), Line(C, E) == Line(E, line_intersection(j, l)), 0 == 2 * angle(line_intersection(j, l), E, C) mod 360
By altitude_definition on B, line_intersection(j, l), A, Line(B, G) we get Line(B, G) == altitude(B, A, line_intersection(j, l))
By anti_similar_triangle_basic_properties on A, G, F, D, E, A we get angle(A, G, F) == 0 - angle(D, E, A) mod 360, angle(G, F, A) == 0 - angle(E, A, D) mod 360, angle(F, A, G) == 0 - angle(A, D, E) mod 360, log(distance(A, G)) + log(distance(A, E)) == log(distance(D, E)) + log(distance(F, G)), log(distance(A, E)) + log(distance(A, F)) == log(distance(F, G)) + log(distance(A, D)), log(distance(A, D)) + log(distance(A, G)) == log(distance(A, F)) + log(distance(D, E))
By altitude_definition on F, B, line_intersection(k, Line(B, G)), k we get k == altitude(F, B, line_intersection(k, Line(B, G)))
By perpendicular_angle_conditions_v0 on line_intersection(k, Line(B, G)), E, line_intersection(j, l) we get angle(line_intersection(k, Line(B, G)), E, line_intersection(j, l)) == orientation(E, line_intersection(j, l), line_intersection(k, Line(B, G))) mod 360
By altitude_definition on D, B, line_intersection(k, Line(B, G)), k we get k == altitude(D, B, line_intersection(k, Line(B, G)))
By collinear_definition on line_intersection(j, l), A, G we get A in Line(G, line_intersection(j, l)), G in Line(A, line_intersection(j, l)), Line(A, line_intersection(j, l)) == Line(G, line_intersection(j, l)), 0 == 2 * angle(A, line_intersection(j, l), G) mod 360
By sas_congruence on B, G, E, E, C, B we get congruent_triangles(B, C, E, E, G, B)
By altitude_definition on D, E, line_intersection(j, l), k we get k == altitude(D, E, line_intersection(j, l))
By altitude_definition on E, B, line_intersection(k, Line(B, G)), k we get k == altitude(E, B, line_intersection(k, Line(B, G)))
By perpendicular_angle_conditions_v0 on E, line_intersection(j, l), G we get angle(E, line_intersection(j, l), G) == orientation(E, line_intersection(j, l), G) mod 360
By altitude_definition on F, C, line_intersection(j, l), k we get k == altitude(F, C, line_intersection(j, l))
By altitude_definition on G, F, line_intersection(k, Line(B, G)), Line(B, G) we get Line(B, G) == altitude(G, F, line_intersection(k, Line(B, G)))
By altitude_definition on E, G, line_intersection(k, Line(B, G)), k we get k == altitude(E, G, line_intersection(k, Line(B, G)))
By anti_similar_triangle_basic_properties on A, F, G, D, A, E we get angle(A, F, G) == 0 - angle(D, A, E) mod 360, angle(F, G, A) == 0 - angle(A, E, D) mod 360, angle(G, A, F) == 0 - angle(E, D, A) mod 360, log(distance(A, D)) + log(distance(F, G)) == log(distance(A, F)) + log(distance(A, E)), log(distance(A, E)) + log(distance(A, G)) == log(distance(F, G)) + log(distance(D, E)), log(distance(A, G)) + log(distance(A, D)) == log(distance(D, E)) + log(distance(A, F))
By altitude_definition on B, G, line_intersection(j, l), Line(B, G) we get Line(B, G) == altitude(B, G, line_intersection(j, l))
By sas_congruence on C, E, G, G, B, C we get congruent_triangles(B, C, G, E, G, C)
By perpendicular_angle_conditions_v0 on line_intersection(k, Line(B, G)), G, line_intersection(j, l) we get angle(line_intersection(k, Line(B, G)), G, line_intersection(j, l)) == orientation(G, line_intersection(j, l), line_intersection(k, Line(B, G))) mod 360
By perpendicular_angle_conditions_v0 on B, line_intersection(k, Line(B, G)), D we get angle(B, line_intersection(k, Line(B, G)), D) == orientation(B, line_intersection(k, Line(B, G)), D) mod 360
By altitude_definition on G, D, line_intersection(k, Line(B, G)), Line(B, G) we get Line(B, G) == altitude(G, D, line_intersection(k, Line(B, G)))
By collinear_definition on line_intersection(j, l), G, A we get G in Line(A, line_intersection(j, l)), A in Line(G, line_intersection(j, l)), Line(A, line_intersection(j, l)) == Line(G, line_intersection(j, l)), 0 == 2 * angle(G, line_intersection(j, l), A) mod 360
By altitude_definition on A, G, line_intersection(k, Line(B, G)), l we get l == altitude(A, G, line_intersection(k, Line(B, G)))
By altitude_definition on C, A, line_intersection(j, l), j we get j == altitude(C, A, line_intersection(j, l))
By altitude_definition on line_intersection(k, Line(B, G)), line_intersection(j, l), E, k we get k == altitude(line_intersection(k, Line(B, G)), E, line_intersection(j, l))
By altitude_definition on E, A, line_intersection(j, l), j we get j == altitude(E, A, line_intersection(j, l))
By perpendicular_angle_conditions_v0 on D, line_intersection(k, Line(B, G)), B we get angle(D, line_intersection(k, Line(B, G)), B) == orientation(B, D, line_intersection(k, Line(B, G))) mod 360
By sas_congruence on D, E, G, G, A, D we get congruent_triangles(A, D, G, E, G, D)
By altitude_definition on F, line_intersection(j, l), E, k we get k == altitude(F, E, line_intersection(j, l))
By collinear_definition on line_intersection(k, Line(B, G)), E, F we get E in Line(F, line_intersection(k, Line(B, G))), F in Line(E, line_intersection(k, Line(B, G))), Line(E, line_intersection(k, Line(B, G))) == Line(F, line_intersection(k, Line(B, G))), 0 == 2 * angle(E, line_intersection(k, Line(B, G)), F) mod 360
By perpendicular_angle_conditions_v0 on E, line_intersection(k, Line(B, G)), G we get angle(E, line_intersection(k, Line(B, G)), G) == orientation(E, line_intersection(k, Line(B, G)), G) mod 360
By altitude_definition on line_intersection(j, l), F, line_intersection(k, Line(B, G)), j we get j == altitude(line_intersection(j, l), F, line_intersection(k, Line(B, G)))
By altitude_definition on G, line_intersection(j, l), E, l we get l == altitude(G, E, line_intersection(j, l))
By sas_congruence on G, A, D, D, E, G we get congruent_triangles(A, D, G, E, G, D)
By altitude_definition on B, line_intersection(k, Line(B, G)), E, Line(B, G) we get Line(B, G) == altitude(B, E, line_intersection(k, Line(B, G)))
By perpendicular_angle_conditions_v0 on A, line_intersection(j, l), E we get angle(A, line_intersection(j, l), E) == orientation(A, line_intersection(j, l), E) mod 360
By altitude_definition on line_intersection(j, l), line_intersection(k, Line(B, G)), E, j we get j == altitude(line_intersection(j, l), E, line_intersection(k, Line(B, G)))
By altitude_definition on E, G, line_intersection(j, l), j we get j == altitude(E, G, line_intersection(j, l))
By perpendicular_angle_conditions_v0 on G, line_intersection(k, Line(B, G)), D we get angle(G, line_intersection(k, Line(B, G)), D) == orientation(D, G, line_intersection(k, Line(B, G))) mod 360
By perpendicular_angle_conditions_v0 on C, line_intersection(j, l), G we get angle(C, line_intersection(j, l), G) == orientation(C, line_intersection(j, l), G) mod 360
By altitude_definition on C, D, line_intersection(k, Line(B, G)), j we get j == altitude(C, D, line_intersection(k, Line(B, G)))
By perpendicular_angle_conditions_v0 on line_intersection(j, l), E, line_intersection(k, Line(B, G)) we get angle(line_intersection(j, l), E, line_intersection(k, Line(B, G))) == orientation(E, line_intersection(k, Line(B, G)), line_intersection(j, l)) mod 360
By altitude_definition on line_intersection(j, l), G, line_intersection(k, Line(B, G)), l we get l == altitude(line_intersection(j, l), G, line_intersection(k, Line(B, G)))
By collinear_definition on line_intersection(k, Line(B, G)), B, G we get B in Line(G, line_intersection(k, Line(B, G))), G in Line(B, line_intersection(k, Line(B, G))), Line(B, line_intersection(k, Line(B, G))) == Line(G, line_intersection(k, Line(B, G))), 0 == 2 * angle(B, line_intersection(k, Line(B, G)), G) mod 360
By altitude_definition on line_intersection(k, Line(B, G)), line_intersection(j, l), C, k we get k == altitude(line_intersection(k, Line(B, G)), C, line_intersection(j, l))
By altitude_definition on line_intersection(j, l), line_intersection(k, Line(B, G)), B, l we get l == altitude(line_intersection(j, l), B, line_intersection(k, Line(B, G)))
By perpendicular_angle_conditions_v0 on B, line_intersection(k, Line(B, G)), F we get angle(B, line_intersection(k, Line(B, G)), F) == orientation(B, line_intersection(k, Line(B, G)), F) mod 360
By collinear_definition on line_intersection(j, l), C, E we get C in Line(E, line_intersection(j, l)), E in Line(C, line_intersection(j, l)), Line(C, line_intersection(j, l)) == Line(E, line_intersection(j, l)), 0 == 2 * angle(C, line_intersection(j, l), E) mod 360
By collinear_definition on line_intersection(k, Line(B, G)), D, E we get D in Line(E, line_intersection(k, Line(B, G))), E in Line(D, line_intersection(k, Line(B, G))), Line(D, line_intersection(k, Line(B, G))) == Line(E, line_intersection(k, Line(B, G))), 0 == 2 * angle(D, line_intersection(k, Line(B, G)), E) mod 360
By perpendicular_angle_conditions_v0 on G, line_intersection(k, Line(B, G)), E we get angle(G, line_intersection(k, Line(B, G)), E) == orientation(E, G, line_intersection(k, Line(B, G))) mod 360
By altitude_definition on G, line_intersection(k, Line(B, G)), E, Line(B, G) we get Line(B, G) == altitude(G, E, line_intersection(k, Line(B, G)))
By sas_congruence on C, B, G, G, E, C we get congruent_triangles(B, C, G, E, G, C)
By altitude_definition on line_intersection(k, Line(B, G)), line_intersection(j, l), G, Line(B, G) we get Line(B, G) == altitude(line_intersection(k, Line(B, G)), G, line_intersection(j, l))
By perpendicular_angle_conditions_v0 on F, line_intersection(k, Line(B, G)), B we get angle(F, line_intersection(k, Line(B, G)), B) == orientation(B, F, line_intersection(k, Line(B, G))) mod 360
By altitude_definition on F, G, line_intersection(k, Line(B, G)), k we get k == altitude(F, G, line_intersection(k, Line(B, G)))
By altitude_definition on D, G, line_intersection(k, Line(B, G)), k we get k == altitude(D, G, line_intersection(k, Line(B, G)))
By perpendicular_angle_conditions_v0 on C, line_intersection(j, l), A we get angle(C, line_intersection(j, l), A) == orientation(A, C, line_intersection(j, l)) mod 360
By perpendicular_angle_conditions_v0 on F, line_intersection(k, Line(B, G)), G we get angle(F, line_intersection(k, Line(B, G)), G) == orientation(F, line_intersection(k, Line(B, G)), G) mod 360
By sas_congruence on D, A, G, G, E, D we get congruent_triangles(A, D, G, E, G, D)
By collinear_definition on line_intersection(k, Line(B, G)), G, B we get G in Line(B, line_intersection(k, Line(B, G))), B in Line(G, line_intersection(k, Line(B, G))), Line(B, line_intersection(k, Line(B, G))) == Line(G, line_intersection(k, Line(B, G))), 0 == 2 * angle(G, line_intersection(k, Line(B, G)), B) mod 360
By collinear_definition on line_intersection(k, Line(B, G)), E, D we get E in Line(D, line_intersection(k, Line(B, G))), D in Line(E, line_intersection(k, Line(B, G))), Line(D, line_intersection(k, Line(B, G))) == Line(E, line_intersection(k, Line(B, G))), 0 == 2 * angle(E, line_intersection(k, Line(B, G)), D) mod 360
By altitude_definition on A, line_intersection(j, l), C, l we get l == altitude(A, C, line_intersection(j, l))
By altitude_definition on C, line_intersection(j, l), G, j we get j == altitude(C, G, line_intersection(j, l))
By altitude_definition on C, line_intersection(k, Line(B, G)), E, j we get j == altitude(C, E, line_intersection(k, Line(B, G)))
By altitude_definition on D, C, line_intersection(j, l), k we get k == altitude(D, C, line_intersection(j, l))
By altitude_definition on A, B, line_intersection(k, Line(B, G)), l we get l == altitude(A, B, line_intersection(k, Line(B, G)))
By sas_congruence on G, E, C, C, B, G we get congruent_triangles(B, C, G, E, G, C)
By altitude_definition on G, C, line_intersection(j, l), l we get l == altitude(G, C, line_intersection(j, l))
By altitude_definition on line_intersection(k, Line(B, G)), A, line_intersection(j, l), Line(B, G) we get Line(B, G) == altitude(line_intersection(k, Line(B, G)), A, line_intersection(j, l))
By perpendicular_angle_conditions_v0 on G, line_intersection(j, l), C we get angle(G, line_intersection(j, l), C) == orientation(C, G, line_intersection(j, l)) mod 360
By sas_congruence on B, C, E, E, G, B we get congruent_triangles(B, C, E, E, G, B)
By perpendicular_angle_conditions_v0 on D, line_intersection(k, Line(B, G)), G we get angle(D, line_intersection(k, Line(B, G)), G) == orientation(D, line_intersection(k, Line(B, G)), G) mod 360
By collinear_definition on line_intersection(k, Line(B, G)), D, F we get D in Line(F, line_intersection(k, Line(B, G))), F in Line(D, line_intersection(k, Line(B, G))), Line(D, line_intersection(k, Line(B, G))) == Line(F, line_intersection(k, Line(B, G))), 0 == 2 * angle(D, line_intersection(k, Line(B, G)), F) mod 360
By perpendicular_angle_conditions_v0 on B, line_intersection(k, Line(B, G)), E we get angle(B, line_intersection(k, Line(B, G)), E) == orientation(B, line_intersection(k, Line(B, G)), E) mod 360
By altitude_definition on B, line_intersection(k, Line(B, G)), D, Line(B, G) we get Line(B, G) == altitude(B, D, line_intersection(k, Line(B, G)))
By collinear_definition on line_intersection(j, l), E, C we get E in Line(C, line_intersection(j, l)), C in Line(E, line_intersection(j, l)), Line(C, line_intersection(j, l)) == Line(E, line_intersection(j, l)), 0 == 2 * angle(E, line_intersection(j, l), C) mod 360
By sas_congruence on G, E, D, D, A, G we get congruent_triangles(A, D, G, E, G, D)
By altitude_definition on line_intersection(j, l), line_intersection(k, Line(B, G)), D, j we get j == altitude(line_intersection(j, l), D, line_intersection(k, Line(B, G)))
By sas_congruence on E, G, B, B, C, E we get congruent_triangles(B, C, E, E, G, B)
By sas_congruence on E, C, B, B, G, E we get congruent_triangles(B, C, E, E, G, B)
By altitude_definition on A, line_intersection(j, l), E, l we get l == altitude(A, E, line_intersection(j, l))
By perpendicular_angle_conditions_v0 on line_intersection(j, l), G, line_intersection(k, Line(B, G)) we get angle(line_intersection(j, l), G, line_intersection(k, Line(B, G))) == orientation(G, line_intersection(k, Line(B, G)), line_intersection(j, l)) mod 360
By perpendicular_angle_conditions_v0 on E, line_intersection(k, Line(B, G)), B we get angle(E, line_intersection(k, Line(B, G)), B) == orientation(B, E, line_intersection(k, Line(B, G))) mod 360
By altitude_definition on B, F, line_intersection(k, Line(B, G)), Line(B, G) we get Line(B, G) == altitude(B, F, line_intersection(k, Line(B, G)))
By perpendicular_angle_conditions_v0 on A, line_intersection(j, l), C we get angle(A, line_intersection(j, l), C) == orientation(A, line_intersection(j, l), C) mod 360
By altitude_definition on C, F, line_intersection(k, Line(B, G)), j we get j == altitude(C, F, line_intersection(k, Line(B, G)))
By collinear_definition on line_intersection(k, Line(B, G)), F, E we get F in Line(E, line_intersection(k, Line(B, G))), E in Line(F, line_intersection(k, Line(B, G))), Line(E, line_intersection(k, Line(B, G))) == Line(F, line_intersection(k, Line(B, G))), 0 == 2 * angle(F, line_intersection(k, Line(B, G)), E) mod 360
By collinear_definition on line_intersection(k, Line(B, G)), F, D we get F in Line(D, line_intersection(k, Line(B, G))), D in Line(F, line_intersection(k, Line(B, G))), Line(D, line_intersection(k, Line(B, G))) == Line(F, line_intersection(k, Line(B, G))), 0 == 2 * angle(F, line_intersection(k, Line(B, G)), D) mod 360
By perpendicular_angle_conditions_v0 on E, line_intersection(j, l), A we get angle(E, line_intersection(j, l), A) == orientation(A, E, line_intersection(j, l)) mod 360
By perpendicular_angle_conditions_v0 on G, line_intersection(j, l), E we get angle(G, line_intersection(j, l), E) == orientation(E, G, line_intersection(j, l)) mod 360
By perpendicular_angle_conditions_v0 on G, line_intersection(k, Line(B, G)), F we get angle(G, line_intersection(k, Line(B, G)), F) == orientation(F, G, line_intersection(k, Line(B, G))) mod 360
By sas_congruence on G, B, C, C, E, G we get congruent_triangles(B, C, G, E, G, C)
By parallelogram_parallel_definition on line_intersection(j, l), G, line_intersection(k, Line(B, G)), E we get parallelogram(E, line_intersection(j, l), G, line_intersection(k, Line(B, G)))
By parallelogram_parallel_definition on line_intersection(k, Line(B, G)), E, line_intersection(j, l), G we get parallelogram(E, line_intersection(j, l), G, line_intersection(k, Line(B, G)))
By parallelogram_parallel_definition on E, line_intersection(j, l), G, line_intersection(k, Line(B, G)) we get parallelogram(E, line_intersection(j, l), G, line_intersection(k, Line(B, G)))
By parallelogram_parallel_definition on G, line_intersection(k, Line(B, G)), E, line_intersection(j, l) we get parallelogram(E, line_intersection(j, l), G, line_intersection(k, Line(B, G)))
By parallelogram_parallel_definition on G, line_intersection(j, l), E, line_intersection(k, Line(B, G)) we get parallelogram(E, line_intersection(j, l), G, line_intersection(k, Line(B, G)))
By parallelogram_parallel_definition on line_intersection(j, l), E, line_intersection(k, Line(B, G)), G we get parallelogram(E, line_intersection(j, l), G, line_intersection(k, Line(B, G)))
By parallelogram_parallel_definition on E, line_intersection(k, Line(B, G)), G, line_intersection(j, l) we get parallelogram(E, line_intersection(j, l), G, line_intersection(k, Line(B, G)))
By parallelogram_parallel_definition on line_intersection(k, Line(B, G)), G, line_intersection(j, l), E we get parallelogram(E, line_intersection(j, l), G, line_intersection(k, Line(B, G)))
