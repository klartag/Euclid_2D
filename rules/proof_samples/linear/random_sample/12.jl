Assumptions:
A, B, C, D, E, F: Point
f, g: Line
c, d, e: Circle
distinct(A, B, C, D, E, F)
distinct(f, g)
distinct(c, d, e)
f == Line(A, B)
c == Circle(A, B, C)
D == center(c)
d == Circle(A, C, D)
e == Circle(B, C, D)
E == center(e)
g == Line(D, E)
F in f, d

Embedding:
C := {"x": "-0.269881867836295807894231302270782180130481719970703125", "y": "-1.1186473579270401756957653560675680637359619140625"}
B := {"x": "0.1411716658009856406597037903338787145912647247314453125", "y": "1.6231723355265346153686323305009864270687103271484375"}
A := {"x": "-1.848547805676721278445029383874498307704925537109375", "y": "0.6454608038631739486135074912454001605510711669921875"}
c := {"center": {"x": "-0.44856701803106702965184450140953981637801589890627816481656719357047706087830765614774837094378044422402508486861182705459027701329971045568628922410364973818218438487445936378590012019787540834801204760116383091686760695642845414756255855237546527474205420682263931673502046481769010299147676005973078384544974153539134536680075048764052003255905011350635587331323246855613726841726543945844345307129514585523126766274237920752210491392975089871430384002847681524848021408871028746151029618234379897828547805676942965936887178469262346691371338212030143066274620278534097504337639091810849487472824969688485663535958904105344683131871809787140943483848264876030522518127962402117042190129432283412960171310960837814073485074646300008186965916120615551132576530480881124959913231576341297516496065864087148684247274333987983291027484491298461818467351966503811211803291263163151992598210249345290513452650327721283873093154741985813239886917075266837252221609866509886069352732863504023812162952402591659629504038601137385642587677056499443073488779125643743345038392099679315824835823971871252970967559988761802626796668870473003905126981073534203603061209164484467820154472415382834840808126855656252421214032621019667107843593723247348462339251767137322802074890948158332857520177904601751010141157507168343107211690617932125778984813370335787059524326487369276320278129621770400114872913944868958593562936122221770318589667786122248951626784291031226364281411245152968056425118348684875266856152270491621471447470055658152430202682352931597750458515592015748954695558399174043784788451935476175973635093951576961630129873709672343363004021279013447988672053643044474838606448055988119347510678339874039279790199942514788923328588991634937225607431821113279573269775771855707571981622715801559664961524461894754102696015200054369941665181295914987867579827054462476343256401896213250189783436094420482561286565542231549860808500760176909783058218318424249817650586139445080412105260665081890034937", "y": "0.30986352891591452905275424222309547234477967651740468995693936080640746909031360215216965169123701057921665336496900189396606503172788065701144322501943681010985273258219557033522860886506519098199289067893499623372022310081525980277653483811112843237774306953873029480596774863662116734488276707804528544454323821710075545458395032599661774191014817519005047781907678295691523959899253762738099138359125068957572923770889550630850323936248581397319564162834734195936741998211270875680640772846453688742847237485905718407066412574138094758416988389789271342811473191491526672096289900280169870055698926005467609359315447958168765606580058383819715548748383740891014386774795428124576895116427994299126538795311189601662951743465558410222437594435994441043575744408216686880761151524743585669339940742376188072163708618440614336990860408312011229665571047837753885025869351395008349193719631642485850511850363637865143668598263180690478181569100051725840599775393047074413693669761778144877124773909698173178645292226993104669656607703311162190025780468597603377653712172756801419592085326792581270186142616491767204215583673656915060879910256987383768258639208982093118576988587995827161570627524821065628842193890934956577841063580742398955823689163588807129727689486165728371005988982655466218705911218688764542247991703029357985490397019908413507602745618096377850816170284186638946174058504825479699916544125864451230660357422531227185403725848031892200399320901090081028892020270665715765773787997266117573600220361332547855364319536331237706356303825616286553720944700703381986206296335780015916451644969769514550167374413898731172866028576585691784415973703282955708142960622809778933568583335567731588359855550637389975970496427756702948766545993722439898837423696445029617847293890951808364591651910199458528667576637731416361212619703495258183492468639094682563421320771978095721254048865312444835704893108403594643286873174586784479568333886010587482175760028353656242336454728041895450442"}, "radius_squared": "2.0725717367289728909757454964279144516510721070247189580911332184701331865477646105013239046301368937162020978532059555638338303226879129275462598456685883117913175723959736006092006218081117515190343808689482798914688710084512139236166604772781378783317458787882924828554265803428916578140881444842477655784698411936054119025717353050137890293692766669605341477625852986530214033061830921199268691525808364384840674657819131624377389110446015780723208315601331792592172597086950110199615739746379642210714708582040305013809092286708027850760963911990706339799222555162598530405974138327892431308872560958227346220624383908856392242599638931502278995874662769373057210685804658266198455464378704034844417972344293092356688587443812872796551665366712921226024072797068257260496066737092021316660670348266984045075062170557460962895464312072425465551078289100836678784406979170022717592556120409745938170617384399713128671539426502012480653306272960238367368585790429443977777561834855421694439257209708467361090459451811730847168728594428790609645942656347203629008150936538006873546460649432187038638025170890255044483412124104068021956408585295705880322435682180296857257552335618590284948175731990045356279493968283151949306014967466519845210263165185033202430055504690774128951419819700226918708463855137735819950977692498638021505849055105250819576930532497989423789034507625930031905732869789273712823833239957864895516337307119552509923979971978715794617610679356644287975193306036562726474666698038867161767437720625554276559354343380872868455835477784491698582206341910213149110572002974078698454293234878359132247946891880867072634568416789064711291816017253995283657922850301043112309564624659099327766945677399361032788100148773512421357259122460252867913255403610730014502838812344513371334356163420453866750216253334803276938197216125084136565027028837390976440820877917213685431227935645900425520574894478938369227648240553169855074296385476245395952255727358655078841103375533210267731"}
D := {"x": "-0.44856701803106702965184450140953981637801589890627816481656719357047706087830765614774837094378044422402508486861182705459027701329971045568628922410364973818218438487445936378590012019787540834801204760116383091686760695642845414756255855237546527474205420682263931673502046481769010299147676005973078384544974153539134536680075048764052003255905011350635587331323246855613726841726543945844345307129514585523126766274237920752210491392975089871430384002847681524848021408871028746151029618234379897828547805676942965936887178469262346691371338212030143066274620278534097504337639091810849487472824969688485663535958904105344683131871809787140943483848264876030522518127962402117042190129432283412960171310960837814073485074646300008186965916120615551132576530480881124959913231576341297516496065864087148684247274333987983291027484491298461818467351966503811211803291263163151992598210249345290513452650327721283873093154741985813239886917075266837252221609866509886069352732863504023812162952402591659629504038601137385642587677056499443073488779125643743345038392099679315824835823971871252970967559988761802626796668870473003905126981073534203603061209164484467820154472415382834840808126855656252421214032621019667107843593723247348462339251767137322802074890948158332857520177904601751010141157507168343107211690617932125778984813370335787059524326487369276320278129621770400114872913944868958593562936122221770318589667786122248951626784291031226364281411245152968056425118348684875266856152270491621471447470055658152430202682352931597750458515592015748954695558399174043784788451935476175973635093951576961630129873709672343363004021279013447988672053643044474838606448055988119347510678339874039279790199942514788923328588991634937225607431821113279573269775771855707571981622715801559664961524461894754102696015200054369941665181295914987867579827054462476343256401896213250189783436094420482561286565542231549860808500760176909783058218318424249817650586139445080412105260665081890034937", "y": "0.30986352891591452905275424222309547234477967651740468995693936080640746909031360215216965169123701057921665336496900189396606503172788065701144322501943681010985273258219557033522860886506519098199289067893499623372022310081525980277653483811112843237774306953873029480596774863662116734488276707804528544454323821710075545458395032599661774191014817519005047781907678295691523959899253762738099138359125068957572923770889550630850323936248581397319564162834734195936741998211270875680640772846453688742847237485905718407066412574138094758416988389789271342811473191491526672096289900280169870055698926005467609359315447958168765606580058383819715548748383740891014386774795428124576895116427994299126538795311189601662951743465558410222437594435994441043575744408216686880761151524743585669339940742376188072163708618440614336990860408312011229665571047837753885025869351395008349193719631642485850511850363637865143668598263180690478181569100051725840599775393047074413693669761778144877124773909698173178645292226993104669656607703311162190025780468597603377653712172756801419592085326792581270186142616491767204215583673656915060879910256987383768258639208982093118576988587995827161570627524821065628842193890934956577841063580742398955823689163588807129727689486165728371005988982655466218705911218688764542247991703029357985490397019908413507602745618096377850816170284186638946174058504825479699916544125864451230660357422531227185403725848031892200399320901090081028892020270665715765773787997266117573600220361332547855364319536331237706356303825616286553720944700703381986206296335780015916451644969769514550167374413898731172866028576585691784415973703282955708142960622809778933568583335567731588359855550637389975970496427756702948766545993722439898837423696445029617847293890951808364591651910199458528667576637731416361212619703495258183492468639094682563421320771978095721254048865312444835704893108403594643286873174586784479568333886010587482175760028353656242336454728041895450442"}
e := {"center": {"x": "2.1893165499541841323658839141740549684195721683597956249336457152248619275630963672702399353829222826346238384583074081698879670088694554883876863217437772687623684798412729857349369042820861400366945401675711077702010081797822646954373702496987621878182939349688021054784219860195799670712341064254735497632056089793113518265137758288824138065978611475068915582383376619304126127773193269189954907979639416688607535044620670191750538028909580753719491396018973962655816589040113403678209573398319656243108340201032539172931789153233810407770591085059683197693456887647758248625392717601735232808746147327574175171035327390701594750206553415873022453216524662133646811435620834598722253090333708706510635946977992425561650431058271937200381346002163509616702273381920456061775731834523284243922811074296247238627363278675762938424004352641300938541487135203108212607911015862772454242868808551279397983534776391986515115746607722203386368911686299856022664231290705632019472048601672131162636287541984017389337843081800017846557813352615618812747041976410362491380257731321581094577316119625693821278364860453783728482577043493482089629131248685401525661432585127148628040390451263218768451906743739799571013068149591103983131215429725769807107738721735180032952235842945037632343943371740989020106269595666790521294971823283624900304973194774788794309211077670746123718906597991633469662024858039680868928660731577441210888874688918775193367195308683696729347284704811638030161391155083452228399284832388892126855376388223911924322399722356322048995339207331617243215309002711135428764160362435864004141102993437119383764693839816767700663179781582004253203005354906687758862492073183688914652023357110992709345152608472511172424634569837844305754845332794838066450397878309732597793382256043107059917899433139648634219962272885586190644847630566663661719833909488339380600941645168252267614588374274859891988495322027003682172015906012891547322202434285487942029561836914351442279574614130935529987", "y": "-0.085607903626853180572301086946667442537859162406094818633201379220784478049005655974871124273520715181053199153187945349988291984362415048849693075107363835041287100815551869375493014733661632525294948162547915005401544434441834811674507312695368038637926989718387097284471049854309878320042548060216952128595939956345445258410743424108036773418487292967781456894852146258309852226365363600032071391214407054666287853474806492712520007571105788267747189485781124717515479383065418943597259395154982215235466919063688574251140336609667453343012698592883956194515579881529578904975541171505873615361635911489933289408605292096699336086135133063690152499961450574275806066441740370036254750037945592501732690324694714253779583022352493760547763717391618729648538669627097206827531018584167449593323775187107663765157133998502971596952125274375817934253617535650006916131880047846396034537844565848619676816919550960877015312514542603295441058582723379889412327687047396668926272669772898223400214042846574713374295637191899329470565351677439465043127358154564167607017642356410579938455856216153586368187665395001760773008077084174703026210118996915869038011901395100450346489865809254638706953020087410320632464625106964792956033067689847101220444141129997011394049420329163751361789582652908699350422055229461456639688708357013353207657809452607227564113110178003330947459739824259726819558856405819634917001599161548495260385487881659604658800926812326521245191707981818128218416859021431319319006658423655672331184796012141895971704131382075027136544797343057480704183400459006943387632929140792595668354479153064484513551636708025610176684857272454635948790305607769710601340558021000261222946798286161912128097895519810524004699986591853800612461905862059060306931782762170475539987195514524025351253503781852530624140211603178324257398013130174219940365609515455162437607876379178724393652411362678207795604507872713407026942025150477393825336591312707883011388436842212696928557252443602729166827"}, "radius_squared": "7.1148273722040280603113189673547303248299265346172969571769909072701374725131656578398071012581342236137730622584418087104802537211895777635772636249693480695983512852750868389932669762236394574313769655291018277685836479667552740705500542001094296618439075356855670807409270563712485996013489437878418608043704458459754780995134331576963453429952844826641692048854713532622541079082312082984719489757766263536772005903308674321352745173453594959933390525725995564156837354695511549111557408899026484662791033426572974052068375315330147081667902435171367140952584244316423744510879717841591391063486168524823892886433652338165623368410537779317780596865516524068209910222389571591617324116097136451277536077812731860599426213868929365774872199925001140233877482805260910811804375257839956654849034617962792623175687267648376808140394518707491674755311810114500150507554461599694754243185638160457814836689586354532891796872821874245809779284856286014553176688624682391147676687150699826674449350281623780148226600359663598933164045105176739411935974353894265496274710599080291767171027640157709603751183770087170615843854294850365867713250821654971557192783712733789346469322110654224761734219229606495101579197699833283224625276702920255191226800501672321445270713963162861379540134164706016638046169294853319519152701315327453410334298671006473849074270989645040571039173032170225974670749302221129950096148756973744879111836790983914851254431380433616384099289591726380840145799835382667620230626128382733627600261789329231569179037732647498385214209478962967029474689783766818420611928620435652598449578845537626866992119049373964403465102600194308838248659000815919907098719097082637653330284576951961063891507578401087819630268944782732551957354626668292118365780881962515146096585484259324409115845281556250030555547430920472726986838478668413736892046915297405254185763495111284036213043211737544177387750532359175760441210433110054404526729686642397109764857940434248989309439100260483553799"}
d := {"center": {"x": "-1.3909352087011479463408552646229313902998297201963751102531324959003110870071489840896028920681313436024682914246065305906031824136386124628619162510662019149542012186870540008246843319311510037532392811342343843060675219200635438639511931461244887879626315665755202217040180916012404611478648059846191597122950545381682901330925196840157328238690179989184762866983348547165581641730580185841659276094349852490409686670915779478019196016781980216213361419309415908450641330014685975984252081209093746872018010317456995717311688970769003405180266288928947659932644247851135175330576842931730512154402795847780695795672956514266689256809485879625674873139154649111700700185679702021015269250760091367098920582310991957116185305924830079439661463178036211556940207042160225867781458616998035551493851134197781652060942187189514352382871242733604976066509379115500225206751453191862148967235058005567068811071043337116301176095993692906188730776200645792887658880065212204655041553544268649629522324027980438354811758188695810677840222491348138400607307269694822405300832665664768696892851710488566092563055641427793559829145487350213247040434975678867105307349906531661551836623599981156574303326182493826957475938546695756325616466705339578854120505444551249747570364222347682699518746331794862739632935607424791174207038082702424913892207753888704407033563927805559280754721420546027125529298868074240363704914840815173692938877602042787692143749819590444276754740161879133147142581525853591285268291551667924213701411014588581974961769661965202938830504168082649710620322319372933562593391851148938623885443122791776892345941047445439470605429279928470669955658117886075771450780942035838065256275098886468717726294840102949743859031603950894019518268869968241553276666805091456983730935171403130951982189630172348496109524189099677585340148532724484044121344204416797988488855678795805450035772460251528125812651782253607664219501686730881685589754311954841240373511373802089848362017194101995206238", "y": "-0.53344335880091813769751757793528301461637426785573832297091472714738577815508613992716786134088664482204412432591256290649171618494734017979154930999528454012484669857290799714505038652151739399898047489715845112764860898765114388519180513231902670808700310546446799718294686620589781564003650055329546360574673574356037258656330530335121436111709193756874283304078373579890621595130255502225751027080938189965403146243035001915846476986292568735336401623241166838219227178706417370902026569088810115610889050998615680530782319916597694674877090130818144961722265992265554174817357196207296842590190365299376797406726836249046673203032390320414409816076598895136040639938820827132399886129201527771029519197745607066852841676254024696378202144549370256095541288536486283018614719405734954422217246295528192913371096694016620166898655309496787172891613222032504920883284796486406141171786278305388387031191186767129443291758861727541635698100317740633867885546185652184005087925047826323567126814422757616703186295390578473091107497064031766407261585337033352660717168956754217004115052536619693615663566388090040870952796005514553729380421081263738637451206278947051227412209029892941699432374776534057547317741136037090227692411448079796642581847830930399291336117909558990158789492569708508686044438439647320322801139795621258885711166567124866913815942480291856942280362684059495507355323154965490697535029771088715913041281321275795559718887248976921609774966250261615145480500563221577951715071437488081832881342585373138292966544741610582927457499440739110212646838451849725859541905482880288954830794069544062172665074930858944716141642938544402427778983842805113411683953503797248046381264692441174310008252110430750861314547635877783837234242871784491710343478446579943547208372142047989344368772387405372289985549040958386853611263576716308267310376089591643470494612335684793608563134286076491916805225480496933695303722170904875180695588709769780193307290633343445923582355866830128988835"}, "radius_squared": "1.5992243136574526005845455087941080580408901107653455070573187898634132919642768967949473510541474408502120452998224803779275172690305700905338157548877581623719785119477578712635830434320417845464750065452181273464085149667127461929221054762642053785809235478761828961093304114669486549882851064379192701203408238474574923850914985764774640326324788967177391379419120621751990162476080152588476540940223458570387229191404543177440700219080445168810107887043051895361040984377689905644870220560369226759809724308766403485291520295628394706183843289322359742816895000072114431502624376856184300477837124559438359938713286441151565591936004510801825971282667654922255675111801875046933944620024730750471968254578960379925323449374797492020155967358594921910689523035513797080100347406818153384025378589058666855666371782669408994078971401552337292532733183878707021198548105388665914443857965022757695665458693991903429821436620478740066735276568115068239070677175865856919064051742255874713777510993703578379606775525807640403419187100120941945931027994482688850100775729293068146457235275417924898796377450237918225852629123272596217656512122327198485578659093202895042554670925955878717377458311317162372196975406590810854536908098915312282752874440553189294077622466369430875697814530321398498347380256424534643630398443135934520923676301843012014665483214704377557608289279272942437514739193912205867278038677139785949434371545137741222128769044382286352438394791930118316202269803935476009765447286708128623299959517358173056888827637638210533890338086651229025214240208520259226113997407502488642682682935267627902188332005560128350020694239830385036875969246254542368077532481613584905800615201240558552296798818148911984870130502336595346306751639138737731668298869393311879713463195146100318882035320895271348105297244382003842945542077905483344912466746677038115093123985000769857752902462030171259047036571152255008153130661433336363911429031531475971631067461585003830951206655305688242758"}
E := {"x": "2.1893165499541841323658839141740549684195721683597956249336457152248619275630963672702399353829222826346238384583074081698879670088694554883876863217437772687623684798412729857349369042820861400366945401675711077702010081797822646954373702496987621878182939349688021054784219860195799670712341064254735497632056089793113518265137758288824138065978611475068915582383376619304126127773193269189954907979639416688607535044620670191750538028909580753719491396018973962655816589040113403678209573398319656243108340201032539172931789153233810407770591085059683197693456887647758248625392717601735232808746147327574175171035327390701594750206553415873022453216524662133646811435620834598722253090333708706510635946977992425561650431058271937200381346002163509616702273381920456061775731834523284243922811074296247238627363278675762938424004352641300938541487135203108212607911015862772454242868808551279397983534776391986515115746607722203386368911686299856022664231290705632019472048601672131162636287541984017389337843081800017846557813352615618812747041976410362491380257731321581094577316119625693821278364860453783728482577043493482089629131248685401525661432585127148628040390451263218768451906743739799571013068149591103983131215429725769807107738721735180032952235842945037632343943371740989020106269595666790521294971823283624900304973194774788794309211077670746123718906597991633469662024858039680868928660731577441210888874688918775193367195308683696729347284704811638030161391155083452228399284832388892126855376388223911924322399722356322048995339207331617243215309002711135428764160362435864004141102993437119383764693839816767700663179781582004253203005354906687758862492073183688914652023357110992709345152608472511172424634569837844305754845332794838066450397878309732597793382256043107059917899433139648634219962272885586190644847630566663661719833909488339380600941645168252267614588374274859891988495322027003682172015906012891547322202434285487942029561836914351442279574614130935529987", "y": "-0.085607903626853180572301086946667442537859162406094818633201379220784478049005655974871124273520715181053199153187945349988291984362415048849693075107363835041287100815551869375493014733661632525294948162547915005401544434441834811674507312695368038637926989718387097284471049854309878320042548060216952128595939956345445258410743424108036773418487292967781456894852146258309852226365363600032071391214407054666287853474806492712520007571105788267747189485781124717515479383065418943597259395154982215235466919063688574251140336609667453343012698592883956194515579881529578904975541171505873615361635911489933289408605292096699336086135133063690152499961450574275806066441740370036254750037945592501732690324694714253779583022352493760547763717391618729648538669627097206827531018584167449593323775187107663765157133998502971596952125274375817934253617535650006916131880047846396034537844565848619676816919550960877015312514542603295441058582723379889412327687047396668926272669772898223400214042846574713374295637191899329470565351677439465043127358154564167607017642356410579938455856216153586368187665395001760773008077084174703026210118996915869038011901395100450346489865809254638706953020087410320632464625106964792956033067689847101220444141129997011394049420329163751361789582652908699350422055229461456639688708357013353207657809452607227564113110178003330947459739824259726819558856405819634917001599161548495260385487881659604658800926812326521245191707981818128218416859021431319319006658423655672331184796012141895971704131382075027136544797343057480704183400459006943387632929140792595668354479153064484513551636708025610176684857272454635948790305607769710601340558021000261222946798286161912128097895519810524004699986591853800612461905862059060306931782762170475539987195514524025351253503781852530624140211603178324257398013130174219940365609515455162437607876379178724393652411362678207795604507872713407026942025150477393825336591312707883011388436842212696928557252443602729166827"}
g := {"point": {"x": "-0.44856701803106702965184450140953981637801589890627816481656719357047706087830765614774837094378044422402508486861182705459027701329971045568628922410364973818218438487445936378590012019787540834801204760116383091686760695642845414756255855237546527474205420682263931673502046481769010299147676005973078384544974153539134536680075048764052003255905011350635587331323246855613726841726543945844345307129514585523126766274237920752210491392975089871430384002847681524848021408871028746151029618234379897828547805676942965936887178469262346691371338212030143066274620278534097504337639091810849487472824969688485663535958904105344683131871809787140943483848264876030522518127962402117042190129432283412960171310960837814073485074646300008186965916120615551132576530480881124959913231576341297516496065864087148684247274333987983291027484491298461818467351966503811211803291263163151992598210249345290513452650327721283873093154741985813239886917075266837252221609866509886069352732863504023812162952402591659629504038601137385642587677056499443073488779125643743345038392099679315824835823971871252970967559988761802626796668870473003905126981073534203603061209164484467820154472415382834840808126855656252421214032621019667107843593723247348462339251767137322802074890948158332857520177904601751010141157507168343107211690617932125778984813370335787059524326487369276320278129621770400114872913944868958593562936122221770318589667786122248951626784291031226364281411245152968056425118348684875266856152270491621471447470055658152430202682352931597750458515592015748954695558399174043784788451935476175973635093951576961630129873709672343363004021279013447988672053643044474838606448055988119347510678339874039279790199942514788923328588991634937225607431821113279573269775771855707571981622715801559664961524461894754102696015200054369941665181295914987867579827054462476343256401896213250189783436094420482561286565542231549860808500760176909783058218318424249817650586139445080412105260665081890034937", "y": "0.30986352891591452905275424222309547234477967651740468995693936080640746909031360215216965169123701057921665336496900189396606503172788065701144322501943681010985273258219557033522860886506519098199289067893499623372022310081525980277653483811112843237774306953873029480596774863662116734488276707804528544454323821710075545458395032599661774191014817519005047781907678295691523959899253762738099138359125068957572923770889550630850323936248581397319564162834734195936741998211270875680640772846453688742847237485905718407066412574138094758416988389789271342811473191491526672096289900280169870055698926005467609359315447958168765606580058383819715548748383740891014386774795428124576895116427994299126538795311189601662951743465558410222437594435994441043575744408216686880761151524743585669339940742376188072163708618440614336990860408312011229665571047837753885025869351395008349193719631642485850511850363637865143668598263180690478181569100051725840599775393047074413693669761778144877124773909698173178645292226993104669656607703311162190025780468597603377653712172756801419592085326792581270186142616491767204215583673656915060879910256987383768258639208982093118576988587995827161570627524821065628842193890934956577841063580742398955823689163588807129727689486165728371005988982655466218705911218688764542247991703029357985490397019908413507602745618096377850816170284186638946174058504825479699916544125864451230660357422531227185403725848031892200399320901090081028892020270665715765773787997266117573600220361332547855364319536331237706356303825616286553720944700703381986206296335780015916451644969769514550167374413898731172866028576585691784415973703282955708142960622809778933568583335567731588359855550637389975970496427756702948766545993722439898837423696445029617847293890951808364591651910199458528667576637731416361212619703495258183492468639094682563421320771978095721254048865312444835704893108403594643286873174586784479568333886010587482175760028353656242336454728041895450442"}, "direction": {"x": "2.637883567985251162017728415583594784797588067266073789750212908795338988441404023417988306326702726858648923326919235224478244022169165944073975545847427006944552864715732349520837024479961548384706587768734938687068615136210718842999928802074227462560348141791441422213442450837270070062710866485204333608655350514702697193314526316522933839156911261013247431551570130486549881194584766377438943869259087524092021167204446226697158716820708974086252979630374211514061872992721627829331253522175764602596312076872683576662050700016004507690772490626269750432091891550116799905915662678282018155602864429642274152463121780123606306339373439458711680160135114973669906324841707481042647210327693704780665307807407620696899893852290193801907793761422506472995992643000856855776705499215741399557241766070496210705209071207456126752675280177114712038822233185348933378824014217908765350268983348580844932879980916411490242506208192078471035760339382653974788639227735662062640732188802253354385258278224318335228824694191375641081658105826556312009591988897473682588409694128951267706089851681281911837512085932996399116224393054078248014182935603882188596755350157559541005583769280150225253271942930542481313447141169307069391557480205050465334166389844891231315972493776087091809596116220116412112038534638362483201614088507683747820345453180836750026164372640767375574671956016867348114931625252657672828495434379961824274784146753100008852987373778681936577542582932693483580390298995193975508490005943805427400012339378972716734266795764948182404119076653319213868486484262853980724300555598348160150461238859481554677768121078400203696358190948334905207021071921113524272313687878250084940309119109839663732417260272399006475749346900133802831558851490616602377737545549530335499154452762326302641405187932912404448956379289102318481136576015816244847781661493458701492658183478957728659293198371690814811715187625015866825286598203058252562802426612791292379462045085885948349010068063912453348", "y": "-0.39547143254276770962505532916976291488263883892349950859014074002719194713931925812704077596475772576026985251815694724395435701609029570586113630012680064515113983339774743971072162359872682350728783884148291123912176753525709461445104215080649647101567005925711739209043879849093104566492531513826223757313917817344620071299469375010465451532863546815783193471392892921522509182535790122741306277480565774424201709118370199902102324693359160224094283111412846667688289936517812770040366712361951910266393929392274575832180446235104840092718258249077666962263031179644484562593844017430757231591862517154460938300175977167838699215193571690188730798744528798318594993418969465128202370120222553549299807827780661027040910045700807786277213966175156314008429611370926407563514253383160330628672318261086954448679422018290911496686072935749593023090932801402754576639057356179647952647504088227347818193542318733952845199849717441020022287427372389714781832544097786741306320936739067967217146178194355644516074855946183037616713142871055108694338516284054020138355476408397859413437670948407939907004909155991943281516391382074385363500922156678970672059829348492138153225975168921291032265929533562097692088656401631435873444370349727109077868103276588508269132631519082103507184947247946336153748116741634910206216862538730693306256177965169136264014056635896710945562144266612611628129944145407443191616704042019300756698906210697187651283818529264544324918491699271893850733706172808847697674453839631684806718699962546737452534732674538740420010783559922034624139284746604076324969589249859275483287092885075963001522538084701292190534514303831155379295004264059926768277016424909805055863263164183922801169645102618442376440495086942083010012736579928345929530601972662077171846013442404210899717002288384711591081597798049248786952421016512680177529029590640198807182108409895968160619290001580265615265343895674935345981075689634523862101993017281375783314603712574925935192179972402168367124"}}
f := {"point": {"x": "-1.848547805676721278445029383874498307704925537109375", "y": "0.6454608038631739486135074912454001605510711669921875"}, "direction": {"x": "1.9897194714777069191047331742083770222961902618408203125", "y": "0.97771153166336066675512483925558626651763916015625"}}
F := {"x": "-2.0445744480195880909631501588874154404903356410831665961108987187105526163197620800724515782156061829954435022955301767875327521896717660637876923830276719176736956964682687622693852568722608907419218575618184496941348691181716301280090724252321271063655586262864984600846860696860002935980161443834461188747868723821908190603096267741709145465433992761098261683851897423924603637228136262343645876137994006352756720382303263158534398000056774256454049931340155286103640768021137612904108327835251473431985063176171254261569609458214452437472399945547066001609182955268785751680383847645776115384381584943927348928245243469860688950848471981683676891760971227820711503611742788025782925554907540921917800843982208209713483882022698364056389620098640054818493713215262669338282429293743655301805828909081218337372723626597185590856037827344375532004430767833386380928586128394179766009672503272387275122463422376447041362943665730000094690390285246278227502482335464932336676646090921056179409229138943510614504540170953366077290207127968084371317801213859196888955728497141685488754443670337994432973248300881671685437137077939534400069438238188060226642483176300292754704934107601032326750019885681705392821884464575137393105665720821213017973048246007087065896063290395157480956362319832026752583286226929151451773111933129637844060129849756990227368609617714194808149118083041344984905195295458506500125271324118137178645840669042308257679794796984326943281106844585535323903750067134686342060014483161096526990757970579729467134889345588262535867683986038566168769546349345296913397531463855036902226835616488094539713596469801101157814385974335298874748082301197861296413716741710388280993622363009358693558587701708047223224964997835433517505962383185373702438544449452402922914102240142366035801525561875271144674875759694369492556179767008629623152012081669569586642066327399045859094811218229196893773527010170881096940428101699268926931870919899359114074852804029537755419716964734283647417", "y": "0.54913691927579961305820153537964553011141022353142570864109487413757638979908043554124508072802552525816154462885093882312633075302837246556412184251511564451665105473646058490757166302793875916202594357275811477481918402153667920648427058108173541077261791940496381635550226251159668826123662477929202828637998897591923442058197881482406321449263532531024607465400739867276533495240839662022053891800444248247256662295953816046694678630550849494897317606833171091683119153432909983589634183090196106611322881442549956118434727436585543535596500367102150704501727885123165313139947048598801986795863301216231998395366556904913856505285652628571071576505948415820625634981066037866651764319188840350462763477738541204630999070986899253890867106454118967360166302508300909984627999976338727031843881892703992072792558991753425493411036184728107713130696674274901306393427248922981999144968230776794704488563824049251792924806162880684416870367533431726207627249914820501654588367386259527991450747636268993295419843593629517360934652938996059949175557610439603881467613649019020503150335139088397437303695050648400636933730964021108086263683679238226725904941010865811579545037035084596146537203913602853921958340529865893236339239465563478825832213593394456129678062734881922798144311219711136379900101349794095613031844552930863360950976964188514560306809843361331782257063491520861889960120487977281935986133827168766117654989001086770959171705237323080647457545659055384208986020974897430403206085911570473009506310605421649091077485757248473453135948993039737309373208964719751630039011946644336599976312113756129027993640469939682945506078401472355727702463863796492757708210554735916662138806920601924251563754740248792917753064385303671623174344277990766713043313313999124315736976027087003050557673419907579356170000790658981594398095110962002454698427543565631719992595731628474780756927405315762689302055659569345944029354246391340765451361866288055471270420764659115142407344797684731189781"}

Need to prove:
F in g

Proof:
By line_definition on A, F, f we get f == Line(A, F)
By line_definition on F, B, f we get f == Line(B, F)
By circle_definition on A, F, D, d we get d == Circle(A, D, F)
By circle_definition on F, A, C, d we get d == Circle(A, C, F)
By circle_definition on F, D, C, d we get d == Circle(C, D, F)
By circle_radius_v0_r on C, c we get radius(c) == distance(C, center(c))
By circle_radius_v0_r on B, e we get radius(e) == distance(B, center(e))
By circle_radius_v0_r on A, c we get radius(c) == distance(A, center(c))
By circle_radius_v0_r on B, c we get radius(c) == distance(B, center(c))
By circle_radius_v0_r on D, e we get radius(e) == distance(D, center(e))
By circle_radius_v0_r on C, e we get radius(e) == distance(C, center(e))
By different_points_v1 on D, E we get 0 != distance(D, E)
By center_not_on_circle on c we get center(c) not in c
By different_points_v1 on A, B we get 0 != distance(A, B)
By center_not_on_circle on e we get center(e) not in e
By in_imply_collinear on F, A, B we get collinear(A, B, F)
By not_in_line_equivalent_to_not_collinear_v0_r on C, D, E we get C not in Line(D, E)
By in_imply_concyclic on C, D, A, F we get concyclic(A, C, D, F)
By circle_circle_intersection_has_at_most_two_points_0 on B, C, D, e, c we get D not in c
By circle_circle_intersection_has_at_most_two_points_0 on C, D, B, e, d we get B not in d
By circle_circle_intersection_has_at_most_two_points_0 on C, D, F, d, e we get F not in e
By circle_circle_intersection_has_at_most_two_points_0 on A, C, F, d, c we get F not in c
By not_in_line_equivalent_to_not_collinear_v0_r on E, B, A we get E not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on D, A, B we get D not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on B, E, D we get B not in Line(D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on C, B, A we get C not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on A, D, E we get A not in Line(D, E)
By circle_circle_intersection_has_at_most_two_points_0 on C, B, A, c, e we get A not in e
By power_of_a_point_in_circle on A, c we get 0 == power_of_a_point(A, c)
By power_of_a_point_on_circle on D, d we get 0 == power_of_a_point(D, d)
By power_of_a_point_on_circle on A, d we get 0 == power_of_a_point(A, d)
By angles_on_chord_v3 on F, D, C, A, d we get angle(F, C, D) == angle(F, A, D) + 180 mod 360
By power_of_a_point_on_circle on B, e we get 0 == power_of_a_point(B, e)
By power_of_a_point_in_circle on B, c we get 0 == power_of_a_point(B, c)
By power_of_a_point_on_circle on C, c we get 0 == power_of_a_point(C, c)
By power_of_a_point_on_circle on C, e we get 0 == power_of_a_point(C, e)
By power_of_a_point_on_circle on D, e we get 0 == power_of_a_point(D, e)
By power_of_a_point_on_circle on C, d we get 0 == power_of_a_point(C, d)
By power_of_a_point_in_circle on F, d we get 0 == power_of_a_point(F, d)
By angles_on_chord_v2 on D, F, C, A, d we get angle(D, C, F) == angle(D, A, F) + 180 mod 360
By angles_on_chord_v1 on F, A, C, D, d we get angle(F, C, A) == angle(F, D, A) mod 360
By angles_on_chord_v2 on F, D, A, C, d we get angle(F, A, D) == angle(F, C, D) + 180 mod 360
By angle_to_center on C, B, A, c we get 2 * angle(C, B, A) == angle(C, center(c), A) mod 360
By angles_on_chord_v0 on D, A, C, F, d we get angle(D, C, A) == angle(D, F, A) mod 360
By angles_on_chord_v0 on A, F, D, C, d we get angle(A, C, F) == angle(A, D, F) mod 360
By angles_on_chord_v1 on A, D, F, C, d we get angle(A, C, D) == angle(A, F, D) mod 360
By angles_on_chord_v0 on F, C, D, A, d we get angle(F, A, C) == angle(F, D, C) mod 360
By angles_on_chord_v2 on A, C, D, F, d we get angle(A, D, C) == angle(A, F, C) + 180 mod 360
By angles_on_chord_v0 on C, D, F, A, d we get angle(C, A, D) == angle(C, F, D) mod 360
By angles_on_chord_v1 on D, C, A, F, d we get angle(D, A, C) == angle(D, F, C) mod 360
By angles_on_chord_v2 on C, A, F, D, d we get angle(C, F, A) == angle(C, D, A) + 180 mod 360
By angles_on_chord_v3 on D, F, A, C, d we get angle(D, A, F) == angle(D, C, F) + 180 mod 360
By angles_on_chord_v1 on C, F, D, A, d we get angle(C, A, F) == angle(C, D, F) mod 360
By angle_to_center on C, A, B, c we get 2 * angle(C, A, B) == angle(C, center(c), B) mod 360
By angles_on_chord_v3 on C, A, D, F, d we get angle(C, D, A) == angle(C, F, A) + 180 mod 360
By angle_to_center on D, C, B, e we get 2 * angle(D, C, B) == angle(D, center(e), B) mod 360
By angles_on_chord_v3 on A, C, F, D, d we get angle(A, F, C) == angle(A, D, C) + 180 mod 360
By angle_to_center on B, C, D, e we get 2 * angle(B, C, D) == angle(B, center(e), D) mod 360
By angle_to_center on D, B, C, e we get 2 * angle(D, B, C) == angle(D, center(e), C) mod 360
By angle_to_center on C, B, D, e we get 2 * angle(C, B, D) == angle(C, center(e), D) mod 360
By angle_to_center on A, B, C, c we get 2 * angle(A, B, C) == angle(A, center(c), C) mod 360
By angle_to_center on B, C, A, c we get 2 * angle(B, C, A) == angle(B, center(c), A) mod 360
By angle_to_center on A, C, B, c we get 2 * angle(A, C, B) == angle(A, center(c), B) mod 360
By angle_to_center on C, D, B, e we get 2 * angle(C, D, B) == angle(C, center(e), B) mod 360
By angle_to_center on B, D, C, e we get 2 * angle(B, D, C) == angle(B, center(e), C) mod 360
By angle_to_center on B, A, C, c we get 2 * angle(B, A, C) == angle(B, center(c), C) mod 360
By radical_axis_of_intersecting_circles_v0 on C, D, d, e we get Line(C, D) == radical_axis(d, e)
By radical_axis_of_intersecting_circles_v0 on A, C, d, c we get Line(A, C) == radical_axis(c, d)
By radical_axis_of_intersecting_circles_v0 on B, C, e, c we get Line(B, C) == radical_axis(c, e)
By same_angle_v3 on A, F, B, D we get angle(F, A, D) == angle(B, A, D) + 180 mod 360
By same_angle_v2 on A, F, B, C we get angle(F, A, C) == angle(B, A, C) + 180 mod 360
By different_points_v1 on F, A we get 0 != distance(A, F)
By different_points_v1 on D, F we get 0 != distance(D, F)
By different_points_v1 on C, F we get 0 != distance(C, F)
By same_angle_v0 on B, F, A, D we get angle(A, B, D) == angle(F, B, D) mod 360
By different_points_v1 on B, F we get 0 != distance(B, F)
By different_points_v1 on A, D we get 0 != distance(A, D)
By different_points_v1 on D, C we get 0 != distance(C, D)
By different_points_v1 on A, C we get 0 != distance(A, C)
By different_points_v1 on D, B we get 0 != distance(B, D)
By same_angle_v1 on F, B, A, D we get angle(A, F, D) == angle(B, F, D) mod 360
By different_points_v1 on B, C we get 0 != distance(B, C)
By same_angle_v0 on B, A, F, C we get angle(A, B, C) == angle(F, B, C) mod 360
By same_angle_v1 on F, B, A, C we get angle(A, F, C) == angle(B, F, C) mod 360
By probably_between_and_collinear_implies_between on F, A, B we get between(B, A, F)
By sss_anti_congruence_v0 on B, D, A, A, D, B we get anti_congruent_triangles(A, B, D, B, A, D)
By sss_anti_congruence_v0 on B, D, A, A, D, B we get anti_congruent_triangles(A, B, D, B, A, D)
By sas_anti_congruence on B, D, A, A, D, B we get anti_congruent_triangles(A, B, D, B, A, D)
By sss_anti_congruence_v0 on B, D, A, A, D, B we get anti_congruent_triangles(A, B, D, B, A, D)
By isosceles_triangle_properties on D, A, C we get distance(A, D) == distance(C, D), angle(A, C, D) == angle(D, A, C) mod 360
By sas_anti_congruence on B, D, C, C, D, B we get anti_congruent_triangles(B, C, D, C, B, D)
By sss_anti_congruence_v0 on D, A, B, D, B, A we get anti_congruent_triangles(A, B, D, B, A, D)
By sss_anti_congruence_v0 on D, A, B, D, B, A we get anti_congruent_triangles(A, B, D, B, A, D)
By sss_anti_congruence_v0 on A, B, D, B, A, D we get anti_congruent_triangles(A, B, D, B, A, D)
By sss_anti_congruence_v1 on D, B, A, D, A, B we get anti_congruent_triangles(A, B, D, B, A, D)
By sss_anti_congruence_v0 on A, B, D, B, A, D we get anti_congruent_triangles(A, B, D, B, A, D)
By reverse_direction on F, D we get 180 == direction(F, D) - direction(D, F) mod 360
By reverse_direction on F, C we get 180 == direction(F, C) - direction(C, F) mod 360
By isosceles_triangle_properties on D, C, B we get distance(B, D) == distance(C, D), angle(C, B, D) == angle(D, C, B) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on A, D, C we get A not in Line(C, D)
By isosceles_triangle_properties on D, B, A we get distance(A, D) == distance(B, D), angle(B, A, D) == angle(D, B, A) mod 360
By reverse_direction on D, A we get 180 == direction(D, A) - direction(A, D) mod 360
By sss_anti_congruence_v1 on A, D, B, B, D, A we get anti_congruent_triangles(A, B, D, B, A, D)
By sss_anti_congruence_v0 on B, D, A, A, D, B we get anti_congruent_triangles(A, B, D, B, A, D)
By sss_anti_congruence_v1 on B, A, D, A, B, D we get anti_congruent_triangles(A, B, D, B, A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on F, E, B we get F not in Line(B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on B, D, C we get B not in Line(C, D)
By reverse_direction on A, F we get 180 == direction(A, F) - direction(F, A) mod 360
By collinear_definition on A, F, B we get F in Line(A, B), B in Line(A, F), Line(A, B) == Line(A, F), 0 == 2 * angle(F, A, B) mod 360
By reverse_direction on A, B we get 180 == direction(A, B) - direction(B, A) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on E, D, C we get E not in Line(C, D)
By not_in_line_equivalent_to_not_collinear_v0_r on D, E, B we get D not in Line(B, E)
By line_inequality on Line(B, C), g, B we get g != Line(B, C)
By reverse_direction on A, C we get 180 == direction(A, C) - direction(C, A) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on A, B, D we get A not in Line(B, D)
By line_inequality on Line(B, C), f, C we get f != Line(B, C)
By reverse_direction on D, F we get 180 == direction(D, F) - direction(F, D) mod 360
By line_inequality on Line(A, C), g, A we get g != Line(A, C)
By reverse_direction on C, D we get 180 == direction(C, D) - direction(D, C) mod 360
By sss_anti_congruence_v0 on D, A, B, D, B, A we get anti_congruent_triangles(A, B, D, B, A, D)
By reverse_direction on C, A we get 180 == direction(C, A) - direction(A, C) mod 360
By sas_anti_congruence on A, D, C, C, D, A we get anti_congruent_triangles(A, C, D, C, A, D)
By sas_anti_congruence on C, D, A, A, D, C we get anti_congruent_triangles(A, C, D, C, A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on A, F, C we get A not in Line(C, F)
By reverse_direction on B, D we get 180 == direction(B, D) - direction(D, B) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on F, E, C we get F not in Line(C, E)
By line_inequality on Line(B, D), g, B we get g != Line(B, D)
By collinear_definition on A, B, F we get B in Line(A, F), F in Line(A, B), Line(A, B) == Line(A, F), 0 == 2 * angle(B, A, F) mod 360
By isosceles_triangle_properties on D, C, A we get distance(A, D) == distance(C, D), angle(C, A, D) == angle(D, C, A) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on B, E, C we get B not in Line(C, E)
By sss_anti_congruence_v1 on D, B, A, D, A, B we get anti_congruent_triangles(A, B, D, B, A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on B, A, D we get B not in Line(A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on A, B, C we get A not in Line(B, C)
By reverse_direction on D, B we get 180 == direction(D, B) - direction(B, D) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on F, D, C we get F not in Line(C, D)
By sss_anti_congruence_v1 on D, B, A, D, A, B we get anti_congruent_triangles(A, B, D, B, A, D)
By sss_anti_congruence_v1 on A, D, B, B, D, A we get anti_congruent_triangles(A, B, D, B, A, D)
By isosceles_triangle_properties on D, B, C we get distance(B, D) == distance(C, D), angle(B, C, D) == angle(D, B, C) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on F, C, B we get F not in Line(B, C)
By sas_anti_congruence on A, D, B, B, D, A we get anti_congruent_triangles(A, B, D, B, A, D)
By sss_anti_congruence_v1 on B, A, D, A, B, D we get anti_congruent_triangles(A, B, D, B, A, D)
By line_inequality on Line(B, D), f, D we get f != Line(B, D)
By reverse_direction on F, A we get 180 == direction(F, A) - direction(A, F) mod 360
By sss_anti_congruence_v0 on B, D, A, A, D, B we get anti_congruent_triangles(A, B, D, B, A, D)
By isosceles_triangle_properties on D, A, B we get distance(A, D) == distance(B, D), angle(A, B, D) == angle(D, A, B) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on B, D, F we get B not in Line(D, F)
By reverse_direction on C, F we get 180 == direction(C, F) - direction(F, C) mod 360
By reverse_direction on B, A we get 180 == direction(B, A) - direction(A, B) mod 360
By sss_anti_congruence_v1 on A, D, B, B, D, A we get anti_congruent_triangles(A, B, D, B, A, D)
By sss_anti_congruence_v1 on D, B, A, D, A, B we get anti_congruent_triangles(A, B, D, B, A, D)
By reverse_direction on A, D we get 180 == direction(A, D) - direction(D, A) mod 360
By sss_anti_congruence_v0 on A, B, D, B, A, D we get anti_congruent_triangles(A, B, D, B, A, D)
By sas_anti_congruence on C, D, B, B, D, C we get anti_congruent_triangles(B, C, D, C, B, D)
By line_inequality on Line(A, D), f, D we get f != Line(A, D)
By sss_anti_congruence_v1 on B, A, D, A, B, D we get anti_congruent_triangles(A, B, D, B, A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on A, F, D we get A not in Line(D, F)
By sss_anti_congruence_v0 on A, B, D, B, A, D we get anti_congruent_triangles(A, B, D, B, A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on A, E, C we get A not in Line(C, E)
By sss_anti_congruence_v0 on D, A, B, D, B, A we get anti_congruent_triangles(A, B, D, B, A, D)
By sss_anti_congruence_v0 on A, B, D, B, A, D we get anti_congruent_triangles(A, B, D, B, A, D)
By sss_anti_congruence_v0 on D, A, B, D, B, A we get anti_congruent_triangles(A, B, D, B, A, D)
By sss_anti_congruence_v1 on A, D, B, B, D, A we get anti_congruent_triangles(A, B, D, B, A, D)
By reverse_direction on B, C we get 180 == direction(B, C) - direction(C, B) mod 360
By sss_anti_congruence_v1 on B, A, D, A, B, D we get anti_congruent_triangles(A, B, D, B, A, D)
By reverse_direction on C, B we get 180 == direction(C, B) - direction(B, C) mod 360
By sss_anti_congruence_v1 on D, B, A, D, A, B we get anti_congruent_triangles(A, B, D, B, A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on B, F, C we get B not in Line(C, F)
By sss_anti_congruence_v1 on A, D, B, B, D, A we get anti_congruent_triangles(A, B, D, B, A, D)
By line_inequality on Line(C, F), f, C we get f != Line(C, F)
By reverse_direction on D, C we get 180 == direction(D, C) - direction(C, D) mod 360
By sss_anti_congruence_v1 on B, A, D, A, B, D we get anti_congruent_triangles(A, B, D, B, A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on C, B, E we get C not in Line(B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on D, B, C we get D not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on F, D, A we get F not in Line(A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on D, F, C we get D not in Line(C, F)
By not_in_line_equivalent_to_not_collinear_v0_r on D, C, E we get D not in Line(C, E)
By line_inequality on Line(C, D), g, C we get g != Line(C, D)
By line_inequality on Line(C, E), f, E we get f != Line(C, E)
By not_in_line_equivalent_to_not_collinear_v0_r on E, D, B we get E not in Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on E, B, C we get E not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on E, A, D we get E not in Line(A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on E, A, C we get E not in Line(A, C)
By line_inequality on Line(A, C), f, C we get f != Line(A, C)
By line_inequality on Line(C, F), g, C we get g != Line(C, F)
By not_in_line_equivalent_to_not_collinear_v0_r on F, D, B we get F not in Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on C, A, D we get C not in Line(A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on C, F, D we get C not in Line(D, F)
By line_inequality on Line(B, E), g, B we get g != Line(B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on E, C, F we get E not in Line(C, F)
By line_inequality on Line(C, D), f, C we get f != Line(C, D)
By not_in_line_equivalent_to_not_collinear_v0_r on B, C, A we get B not in Line(A, C)
By line_inequality on Line(A, D), g, A we get g != Line(A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on D, A, C we get D not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on F, A, C we get F not in Line(A, C)
By line_inequality on Line(B, E), f, E we get f != Line(B, E)
By line_inequality on Line(C, E), g, C we get g != Line(C, E)
By not_in_line_equivalent_to_not_collinear_v0_r on A, E, B we get A not in Line(B, E)
By line_inequality on Line(D, F), f, D we get f != Line(D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on C, B, D we get C not in Line(B, D)
By same_angle_v0 on B, F, A, E we get angle(A, B, E) == angle(F, B, E) mod 360
By radical_axis_definition_v0_r on C, d, c we get C in radical_axis(c, d)
By radical_axis_definition_v0_r on D, d, e we get D in radical_axis(d, e)
By collinear_definition on F, B, A we get B in Line(A, F), A in Line(B, F), Line(A, F) == Line(B, F), 0 == 2 * angle(B, F, A) mod 360
By radical_axis_definition_v0_r on C, c, e we get C in radical_axis(c, e)
By radical_axis_definition_v0_r on A, c, d we get A in radical_axis(c, d)
By collinear_definition on B, F, A we get F in Line(A, B), A in Line(B, F), Line(A, B) == Line(B, F), 0 == 2 * angle(F, B, A) mod 360
By reverse_direction on E, C we get 180 == direction(E, C) - direction(C, E) mod 360
By reverse_direction on E, B we get 180 == direction(E, B) - direction(B, E) mod 360
By radical_axis_definition_v0_r on B, c, e we get B in radical_axis(c, e)
By collinear_definition on B, A, F we get A in Line(B, F), F in Line(A, B), Line(A, B) == Line(B, F), 0 == 2 * angle(A, B, F) mod 360
By radical_axis_definition_v0_r on C, d, e we get C in radical_axis(d, e)
By collinear_definition on F, A, B we get A in Line(B, F), B in Line(A, F), Line(A, F) == Line(B, F), 0 == 2 * angle(A, F, B) mod 360
By reverse_direction on E, D we get 180 == direction(E, D) - direction(D, E) mod 360
By sss_anti_congruence_v0 on D, E, C, C, E, D we get anti_congruent_triangles(C, D, E, D, C, E)
By sss_anti_congruence_v0 on E, D, B, E, B, D we get anti_congruent_triangles(B, D, E, D, B, E)
By sas_anti_congruence on C, E, D, D, E, C we get anti_congruent_triangles(C, D, E, D, C, E)
By sss_anti_congruence_v1 on E, B, D, E, D, B we get anti_congruent_triangles(B, D, E, D, B, E)
By sss_anti_congruence_v1 on D, E, B, B, E, D we get anti_congruent_triangles(B, D, E, D, B, E)
By sss_anti_congruence_v0 on D, E, C, C, E, D we get anti_congruent_triangles(C, D, E, D, C, E)
By sss_anti_congruence_v0 on D, B, E, B, D, E we get anti_congruent_triangles(B, D, E, D, B, E)
By sss_anti_congruence_v1 on E, D, C, E, C, D we get anti_congruent_triangles(C, D, E, D, C, E)
By sss_anti_congruence_v0 on C, D, E, D, C, E we get anti_congruent_triangles(C, D, E, D, C, E)
By sss_anti_congruence_v0 on C, D, E, D, C, E we get anti_congruent_triangles(C, D, E, D, C, E)
By sss_anti_congruence_v1 on D, E, B, B, E, D we get anti_congruent_triangles(B, D, E, D, B, E)
By isosceles_triangle_properties on E, B, C we get distance(B, E) == distance(C, E), angle(B, C, E) == angle(E, B, C) mod 360
By sss_anti_congruence_v1 on C, E, D, D, E, C we get anti_congruent_triangles(C, D, E, D, C, E)
By sss_anti_congruence_v0 on D, E, C, C, E, D we get anti_congruent_triangles(C, D, E, D, C, E)
By sss_anti_congruence_v1 on E, B, D, E, D, B we get anti_congruent_triangles(B, D, E, D, B, E)
By sas_anti_congruence on C, E, B, B, E, C we get anti_congruent_triangles(B, C, E, C, B, E)
By sas_anti_congruence on D, E, C, C, E, D we get anti_congruent_triangles(C, D, E, D, C, E)
By sss_anti_congruence_v0 on B, E, D, D, E, B we get anti_congruent_triangles(B, D, E, D, B, E)
By sss_anti_congruence_v0 on D, B, E, B, D, E we get anti_congruent_triangles(B, D, E, D, B, E)
By sss_anti_congruence_v1 on D, C, E, C, D, E we get anti_congruent_triangles(C, D, E, D, C, E)
By sss_anti_congruence_v1 on C, E, D, D, E, C we get anti_congruent_triangles(C, D, E, D, C, E)
By sss_anti_congruence_v0 on E, D, B, E, B, D we get anti_congruent_triangles(B, D, E, D, B, E)
By sss_anti_congruence_v0 on B, E, D, D, E, B we get anti_congruent_triangles(B, D, E, D, B, E)
By sss_anti_congruence_v1 on D, C, E, C, D, E we get anti_congruent_triangles(C, D, E, D, C, E)
By sas_anti_congruence on D, E, B, B, E, D we get anti_congruent_triangles(B, D, E, D, B, E)
By sss_anti_congruence_v1 on E, D, C, E, C, D we get anti_congruent_triangles(C, D, E, D, C, E)
By sss_anti_congruence_v1 on E, D, C, E, C, D we get anti_congruent_triangles(C, D, E, D, C, E)
By sss_anti_congruence_v1 on B, D, E, D, B, E we get anti_congruent_triangles(B, D, E, D, B, E)
By sss_anti_congruence_v1 on E, B, D, E, D, B we get anti_congruent_triangles(B, D, E, D, B, E)
By sss_anti_congruence_v1 on B, D, E, D, B, E we get anti_congruent_triangles(B, D, E, D, B, E)
By sss_anti_congruence_v1 on D, C, E, C, D, E we get anti_congruent_triangles(C, D, E, D, C, E)
By sas_anti_congruence on B, E, C, C, E, B we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v0 on D, B, E, B, D, E we get anti_congruent_triangles(B, D, E, D, B, E)
By sss_anti_congruence_v1 on C, E, D, D, E, C we get anti_congruent_triangles(C, D, E, D, C, E)
By sss_anti_congruence_v1 on B, D, E, D, B, E we get anti_congruent_triangles(B, D, E, D, B, E)
By sss_anti_congruence_v0 on E, D, B, E, B, D we get anti_congruent_triangles(B, D, E, D, B, E)
By sss_anti_congruence_v0 on D, B, E, B, D, E we get anti_congruent_triangles(B, D, E, D, B, E)
By sss_anti_congruence_v0 on B, E, D, D, E, B we get anti_congruent_triangles(B, D, E, D, B, E)
By sss_anti_congruence_v0 on E, C, D, E, D, C we get anti_congruent_triangles(C, D, E, D, C, E)
By sss_anti_congruence_v0 on E, C, D, E, D, C we get anti_congruent_triangles(C, D, E, D, C, E)
By sss_anti_congruence_v0 on C, D, E, D, C, E we get anti_congruent_triangles(C, D, E, D, C, E)
By sas_anti_congruence on B, E, D, D, E, B we get anti_congruent_triangles(B, D, E, D, B, E)
By sss_anti_congruence_v0 on E, C, D, E, D, C we get anti_congruent_triangles(C, D, E, D, C, E)
By sss_anti_congruence_v0 on D, B, E, B, D, E we get anti_congruent_triangles(B, D, E, D, B, E)
By isosceles_triangle_properties on E, C, D we get distance(C, E) == distance(D, E), angle(C, D, E) == angle(E, C, D) mod 360
By sss_anti_congruence_v0 on B, E, D, D, E, B we get anti_congruent_triangles(B, D, E, D, B, E)
By sss_anti_congruence_v1 on D, E, B, B, E, D we get anti_congruent_triangles(B, D, E, D, B, E)
By sss_anti_congruence_v1 on D, C, E, C, D, E we get anti_congruent_triangles(C, D, E, D, C, E)
By sss_anti_congruence_v0 on D, E, C, C, E, D we get anti_congruent_triangles(C, D, E, D, C, E)
By isosceles_triangle_properties on E, D, C we get distance(C, E) == distance(D, E), angle(D, C, E) == angle(E, D, C) mod 360
By sss_anti_congruence_v0 on C, D, E, D, C, E we get anti_congruent_triangles(C, D, E, D, C, E)
By sss_anti_congruence_v1 on E, D, C, E, C, D we get anti_congruent_triangles(C, D, E, D, C, E)
By sss_anti_congruence_v0 on E, C, D, E, D, C we get anti_congruent_triangles(C, D, E, D, C, E)
By sss_anti_congruence_v1 on D, E, B, B, E, D we get anti_congruent_triangles(B, D, E, D, B, E)
By sss_anti_congruence_v0 on D, E, C, C, E, D we get anti_congruent_triangles(C, D, E, D, C, E)
By sss_anti_congruence_v1 on E, B, D, E, D, B we get anti_congruent_triangles(B, D, E, D, B, E)
By sss_anti_congruence_v0 on E, D, B, E, B, D we get anti_congruent_triangles(B, D, E, D, B, E)
By isosceles_triangle_properties on E, B, D we get distance(B, E) == distance(D, E), angle(B, D, E) == angle(E, B, D) mod 360
By sss_anti_congruence_v1 on B, D, E, D, B, E we get anti_congruent_triangles(B, D, E, D, B, E)
By sss_anti_congruence_v1 on D, E, B, B, E, D we get anti_congruent_triangles(B, D, E, D, B, E)
By sss_anti_congruence_v1 on D, C, E, C, D, E we get anti_congruent_triangles(C, D, E, D, C, E)
By sss_anti_congruence_v0 on E, D, B, E, B, D we get anti_congruent_triangles(B, D, E, D, B, E)
By isosceles_triangle_properties on E, C, B we get distance(B, E) == distance(C, E), angle(C, B, E) == angle(E, C, B) mod 360
By sss_anti_congruence_v1 on E, D, C, E, C, D we get anti_congruent_triangles(C, D, E, D, C, E)
By sss_anti_congruence_v0 on B, E, D, D, E, B we get anti_congruent_triangles(B, D, E, D, B, E)
By sss_anti_congruence_v1 on B, D, E, D, B, E we get anti_congruent_triangles(B, D, E, D, B, E)
By isosceles_triangle_properties on E, D, B we get distance(B, E) == distance(D, E), angle(D, B, E) == angle(E, D, B) mod 360
By sss_anti_congruence_v1 on C, E, D, D, E, C we get anti_congruent_triangles(C, D, E, D, C, E)
By sss_anti_congruence_v0 on C, D, E, D, C, E we get anti_congruent_triangles(C, D, E, D, C, E)
By sss_anti_congruence_v1 on E, B, D, E, D, B we get anti_congruent_triangles(B, D, E, D, B, E)
By sss_anti_congruence_v0 on E, C, D, E, D, C we get anti_congruent_triangles(C, D, E, D, C, E)
By sss_anti_congruence_v1 on C, E, D, D, E, C we get anti_congruent_triangles(C, D, E, D, C, E)
By sss_anti_congruence_v0 on D, E, C, D, E, B we get anti_congruent_triangles(B, D, E, C, D, E)
By sss_anti_congruence_v1 on B, D, E, C, D, E we get anti_congruent_triangles(B, D, E, C, D, E)
By sss_congruence_v1 on D, E, B, C, E, D we get congruent_triangles(B, D, E, D, C, E)
By sss_congruence_v0 on E, D, B, E, C, D we get congruent_triangles(B, D, E, D, C, E)
By sss_congruence_v0 on E, C, D, E, D, B we get congruent_triangles(B, D, E, D, C, E)
By sss_anti_congruence_v1 on D, E, B, D, E, C we get anti_congruent_triangles(B, D, E, C, D, E)
By sss_congruence_v1 on E, D, C, E, B, D we get congruent_triangles(B, D, E, D, C, E)
By sss_anti_congruence_v0 on B, E, D, C, E, D we get anti_congruent_triangles(B, D, E, C, D, E)
By sss_anti_congruence_v0 on D, B, E, D, C, E we get anti_congruent_triangles(B, D, E, C, D, E)
By sss_congruence_v0 on D, E, C, B, E, D we get congruent_triangles(B, D, E, D, C, E)
By sss_anti_congruence_v0 on E, D, B, E, D, C we get anti_congruent_triangles(B, D, E, C, D, E)
By sss_congruence_v0 on C, D, E, D, B, E we get congruent_triangles(B, D, E, D, C, E)
By sss_congruence_v1 on E, D, C, E, B, D we get congruent_triangles(B, D, E, D, C, E)
By sss_congruence_v0 on D, B, E, C, D, E we get congruent_triangles(B, D, E, D, C, E)
By sss_congruence_v1 on C, E, D, D, E, B we get congruent_triangles(B, D, E, D, C, E)
By sss_anti_congruence_v1 on C, E, D, B, E, D we get anti_congruent_triangles(B, D, E, C, D, E)
By sss_anti_congruence_v1 on E, B, D, E, C, D we get anti_congruent_triangles(B, D, E, C, D, E)
By sss_congruence_v1 on B, D, E, D, C, E we get congruent_triangles(B, D, E, D, C, E)
By sss_congruence_v0 on D, E, C, B, E, D we get congruent_triangles(B, D, E, D, C, E)
By sss_anti_congruence_v0 on D, B, E, D, C, E we get anti_congruent_triangles(B, D, E, C, D, E)
By sss_congruence_v0 on E, C, D, E, D, B we get congruent_triangles(B, D, E, D, C, E)
By sss_anti_congruence_v0 on D, E, C, D, E, B we get anti_congruent_triangles(B, D, E, C, D, E)
By sss_anti_congruence_v0 on E, C, D, E, B, D we get anti_congruent_triangles(B, D, E, C, D, E)
By sss_congruence_v0 on D, B, E, C, D, E we get congruent_triangles(B, D, E, D, C, E)
By sss_anti_congruence_v1 on B, D, E, C, D, E we get anti_congruent_triangles(B, D, E, C, D, E)
By sss_anti_congruence_v1 on B, D, E, C, D, E we get anti_congruent_triangles(B, D, E, C, D, E)
By sss_anti_congruence_v1 on D, C, E, D, B, E we get anti_congruent_triangles(B, D, E, C, D, E)
By sss_congruence_v1 on D, C, E, B, D, E we get congruent_triangles(B, D, E, D, C, E)
By sss_anti_congruence_v0 on D, B, E, D, C, E we get anti_congruent_triangles(B, D, E, C, D, E)
By sss_congruence_v1 on C, E, D, D, E, B we get congruent_triangles(B, D, E, D, C, E)
By sss_anti_congruence_v0 on E, C, D, E, B, D we get anti_congruent_triangles(B, D, E, C, D, E)
By sss_congruence_v1 on D, C, E, B, D, E we get congruent_triangles(B, D, E, D, C, E)
By sss_anti_congruence_v0 on B, E, D, C, E, D we get anti_congruent_triangles(B, D, E, C, D, E)
By sss_anti_congruence_v0 on E, C, D, E, B, D we get anti_congruent_triangles(B, D, E, C, D, E)
By sss_congruence_v1 on D, E, B, C, E, D we get congruent_triangles(B, D, E, D, C, E)
By sss_congruence_v1 on E, B, D, E, D, C we get congruent_triangles(B, D, E, D, C, E)
By sss_congruence_v0 on B, E, D, D, E, C we get congruent_triangles(B, D, E, D, C, E)
By sss_anti_congruence_v1 on D, C, E, D, B, E we get anti_congruent_triangles(B, D, E, C, D, E)
By sss_congruence_v1 on B, D, E, D, C, E we get congruent_triangles(B, D, E, D, C, E)
By sss_congruence_v1 on D, E, B, C, E, D we get congruent_triangles(B, D, E, D, C, E)
By perpendicular_bisector_sufficient_conditions on B, C, D, E we get Line(D, E) == perpendicular_bisector(B, C)
By sss_anti_congruence_v0 on B, E, D, C, E, D we get anti_congruent_triangles(B, D, E, C, D, E)
By sss_anti_congruence_v1 on E, D, C, E, D, B we get anti_congruent_triangles(B, D, E, C, D, E)
By sss_anti_congruence_v1 on D, E, B, D, E, C we get anti_congruent_triangles(B, D, E, C, D, E)
By sss_congruence_v1 on D, E, B, C, E, D we get congruent_triangles(B, D, E, D, C, E)
By sss_congruence_v1 on E, B, D, E, D, C we get congruent_triangles(B, D, E, D, C, E)
By sss_congruence_v1 on C, E, D, D, E, B we get congruent_triangles(B, D, E, D, C, E)
By sss_anti_congruence_v1 on E, D, C, E, D, B we get anti_congruent_triangles(B, D, E, C, D, E)
By sss_congruence_v0 on D, B, E, C, D, E we get congruent_triangles(B, D, E, D, C, E)
By sss_congruence_v0 on B, E, D, D, E, C we get congruent_triangles(B, D, E, D, C, E)
By sss_anti_congruence_v0 on D, E, C, D, E, B we get anti_congruent_triangles(B, D, E, C, D, E)
By sss_anti_congruence_v1 on D, C, E, D, B, E we get anti_congruent_triangles(B, D, E, C, D, E)
By sss_congruence_v0 on D, B, E, C, D, E we get congruent_triangles(B, D, E, D, C, E)
By sss_anti_congruence_v1 on E, B, D, E, C, D we get anti_congruent_triangles(B, D, E, C, D, E)
By sss_congruence_v1 on E, B, D, E, D, C we get congruent_triangles(B, D, E, D, C, E)
By sss_congruence_v1 on E, D, C, E, B, D we get congruent_triangles(B, D, E, D, C, E)
By sss_congruence_v1 on E, D, C, E, B, D we get congruent_triangles(B, D, E, D, C, E)
By sss_congruence_v0 on B, E, D, D, E, C we get congruent_triangles(B, D, E, D, C, E)
By sss_congruence_v0 on E, D, B, E, C, D we get congruent_triangles(B, D, E, D, C, E)
By sss_congruence_v1 on D, C, E, B, D, E we get congruent_triangles(B, D, E, D, C, E)
By sss_anti_congruence_v0 on B, E, D, C, E, D we get anti_congruent_triangles(B, D, E, C, D, E)
By sss_congruence_v1 on C, E, D, D, E, B we get congruent_triangles(B, D, E, D, C, E)
By sss_congruence_v1 on E, B, D, E, D, C we get congruent_triangles(B, D, E, D, C, E)
By sss_anti_congruence_v1 on D, E, B, D, E, C we get anti_congruent_triangles(B, D, E, C, D, E)
By sss_anti_congruence_v0 on E, C, D, E, B, D we get anti_congruent_triangles(B, D, E, C, D, E)
By sss_congruence_v1 on B, D, E, D, C, E we get congruent_triangles(B, D, E, D, C, E)
By sss_anti_congruence_v1 on B, D, E, C, D, E we get anti_congruent_triangles(B, D, E, C, D, E)
By sss_anti_congruence_v0 on D, E, C, D, E, B we get anti_congruent_triangles(B, D, E, C, D, E)
By sss_anti_congruence_v0 on E, D, B, E, D, C we get anti_congruent_triangles(B, D, E, C, D, E)
By sss_anti_congruence_v1 on D, C, E, D, B, E we get anti_congruent_triangles(B, D, E, C, D, E)
By sss_anti_congruence_v1 on E, D, C, E, D, B we get anti_congruent_triangles(B, D, E, C, D, E)
By sss_anti_congruence_v0 on C, D, E, B, D, E we get anti_congruent_triangles(B, D, E, C, D, E)
By sss_anti_congruence_v1 on D, C, E, D, B, E we get anti_congruent_triangles(B, D, E, C, D, E)
By sss_anti_congruence_v0 on E, D, B, E, D, C we get anti_congruent_triangles(B, D, E, C, D, E)
By sss_anti_congruence_v1 on E, B, D, E, C, D we get anti_congruent_triangles(B, D, E, C, D, E)
By sss_congruence_v0 on C, D, E, D, B, E we get congruent_triangles(B, D, E, D, C, E)
By sss_anti_congruence_v0 on E, D, B, E, D, C we get anti_congruent_triangles(B, D, E, C, D, E)
By sss_anti_congruence_v0 on E, D, B, E, D, C we get anti_congruent_triangles(B, D, E, C, D, E)
By sss_anti_congruence_v1 on C, E, D, B, E, D we get anti_congruent_triangles(B, D, E, C, D, E)
By sss_anti_congruence_v1 on E, D, C, E, D, B we get anti_congruent_triangles(B, D, E, C, D, E)
By sss_congruence_v0 on E, D, B, E, C, D we get congruent_triangles(B, D, E, D, C, E)
By sss_anti_congruence_v1 on C, E, D, B, E, D we get anti_congruent_triangles(B, D, E, C, D, E)
By sss_congruence_v0 on B, E, D, D, E, C we get congruent_triangles(B, D, E, D, C, E)
By sss_congruence_v1 on B, D, E, D, C, E we get congruent_triangles(B, D, E, D, C, E)
By sss_congruence_v1 on D, C, E, B, D, E we get congruent_triangles(B, D, E, D, C, E)
By sss_anti_congruence_v0 on C, D, E, B, D, E we get anti_congruent_triangles(B, D, E, C, D, E)
By sss_anti_congruence_v0 on C, D, E, B, D, E we get anti_congruent_triangles(B, D, E, C, D, E)
By sss_congruence_v0 on E, D, B, E, C, D we get congruent_triangles(B, D, E, D, C, E)
By sss_congruence_v1 on E, D, C, E, B, D we get congruent_triangles(B, D, E, D, C, E)
By sss_congruence_v0 on E, C, D, E, D, B we get congruent_triangles(B, D, E, D, C, E)
By sss_anti_congruence_v0 on D, E, C, D, E, B we get anti_congruent_triangles(B, D, E, C, D, E)
By sss_anti_congruence_v1 on B, D, E, C, D, E we get anti_congruent_triangles(B, D, E, C, D, E)
By sss_congruence_v0 on E, C, D, E, D, B we get congruent_triangles(B, D, E, D, C, E)
By sss_congruence_v0 on C, D, E, D, B, E we get congruent_triangles(B, D, E, D, C, E)
By sss_congruence_v0 on D, E, C, B, E, D we get congruent_triangles(B, D, E, D, C, E)
By sss_congruence_v1 on C, E, D, D, E, B we get congruent_triangles(B, D, E, D, C, E)
By sss_congruence_v0 on E, D, B, E, C, D we get congruent_triangles(B, D, E, D, C, E)
By sss_anti_congruence_v0 on D, B, E, D, C, E we get anti_congruent_triangles(B, D, E, C, D, E)
By sss_anti_congruence_v1 on C, E, D, B, E, D we get anti_congruent_triangles(B, D, E, C, D, E)
By sss_anti_congruence_v1 on E, B, D, E, C, D we get anti_congruent_triangles(B, D, E, C, D, E)
By sss_congruence_v0 on C, D, E, D, B, E we get congruent_triangles(B, D, E, D, C, E)
By sss_congruence_v0 on E, C, D, E, D, B we get congruent_triangles(B, D, E, D, C, E)
By sss_anti_congruence_v0 on C, D, E, B, D, E we get anti_congruent_triangles(B, D, E, C, D, E)
By sss_anti_congruence_v1 on D, E, B, D, E, C we get anti_congruent_triangles(B, D, E, C, D, E)
By sss_anti_congruence_v0 on D, B, E, D, C, E we get anti_congruent_triangles(B, D, E, C, D, E)
By sss_anti_congruence_v0 on C, D, E, B, D, E we get anti_congruent_triangles(B, D, E, C, D, E)
By sss_anti_congruence_v1 on E, B, D, E, C, D we get anti_congruent_triangles(B, D, E, C, D, E)
By sss_congruence_v0 on D, E, C, B, E, D we get congruent_triangles(B, D, E, D, C, E)
By sss_congruence_v1 on B, D, E, D, C, E we get congruent_triangles(B, D, E, D, C, E)
By sss_anti_congruence_v1 on C, E, D, B, E, D we get anti_congruent_triangles(B, D, E, C, D, E)
By sss_anti_congruence_v0 on E, C, D, E, B, D we get anti_congruent_triangles(B, D, E, C, D, E)
By sss_congruence_v1 on D, C, E, B, D, E we get congruent_triangles(B, D, E, D, C, E)
By sss_congruence_v0 on D, E, C, B, E, D we get congruent_triangles(B, D, E, D, C, E)
By sss_congruence_v0 on B, E, D, D, E, C we get congruent_triangles(B, D, E, D, C, E)
By sss_congruence_v0 on C, D, E, D, B, E we get congruent_triangles(B, D, E, D, C, E)
By sss_anti_congruence_v1 on E, D, C, E, D, B we get anti_congruent_triangles(B, D, E, C, D, E)
By sss_congruence_v1 on E, B, D, E, D, C we get congruent_triangles(B, D, E, D, C, E)
By sss_anti_congruence_v1 on D, E, B, D, E, C we get anti_congruent_triangles(B, D, E, C, D, E)
By sss_congruence_v1 on D, E, B, C, E, D we get congruent_triangles(B, D, E, D, C, E)
By sss_anti_congruence_v0 on B, E, D, C, E, D we get anti_congruent_triangles(B, D, E, C, D, E)
By sss_congruence_v0 on D, B, E, C, D, E we get congruent_triangles(B, D, E, D, C, E)
By power_of_a_point_definition on B, A, F, d we get log(power_of_a_point(B, d)) == log(distance(A, B)) + log(distance(B, F))
By power_of_a_point_definition on F, A, B, c we get log(power_of_a_point(F, c)) == log(distance(A, F)) + log(distance(B, F))
By line_intersection_definition on B, Line(B, C), f we get B == line_intersection(f, Line(B, C))
By line_intersection_definition on A, f, Line(A, C) we get A == line_intersection(f, Line(A, C))
By line_intersection_definition on D, Line(A, D), g we get D == line_intersection(g, Line(A, D))
By perpendicular_line_definition on B, Line(B, C), g we get Line(B, C) == perpendicular_line(B, g)
By line_intersection_definition on D, g, Line(B, D) we get D == line_intersection(g, Line(B, D))
By median_definition on E, B, C, g we get g == median(E, B, C)
By perpendicular_line_definition on C, Line(B, C), g we get Line(B, C) == perpendicular_line(C, g)
By perpendicular_line_definition on D, g, Line(B, C) we get g == perpendicular_line(D, Line(B, C))
By line_intersection_definition on B, Line(B, E), f we get B == line_intersection(f, Line(B, E))
By line_intersection_definition on F, Line(C, F), f we get F == line_intersection(f, Line(C, F))
By line_intersection_definition on F, f, Line(D, F) we get F == line_intersection(f, Line(D, F))
By median_definition on D, C, B, g we get g == median(D, B, C)
By line_intersection_definition on B, Line(B, D), f we get B == line_intersection(f, Line(B, D))
By line_intersection_definition on E, Line(C, E), g we get E == line_intersection(g, Line(C, E))
By line_intersection_definition on A, Line(A, D), f we get A == line_intersection(f, Line(A, D))
By line_intersection_definition on D, Line(C, D), g we get D == line_intersection(g, Line(C, D))
By perpendicular_line_definition on E, g, Line(B, C) we get g == perpendicular_line(E, Line(B, C))
By line_intersection_definition on E, g, Line(B, E) we get E == line_intersection(g, Line(B, E))
By perpendicular_direction_conditions_v0 on F, D, C, B we get perpendicular(Line(B, C), Line(D, F))
By between_imply_not_between on B, midpoint(B, C), C we get collinear_and_not_between(C, B, midpoint(B, C))
By between_imply_not_between on F, A, B we get collinear_and_not_between(A, F, B)
By circle_radius_v0_r on A, d we get radius(d) == distance(A, center(d))
By between_imply_not_between on C, midpoint(B, C), B we get collinear_and_not_between(B, C, midpoint(B, C))
By between_imply_not_between on B, A, F we get collinear_and_not_between(A, B, F)
By circle_radius_v0_r on F, d we get radius(d) == distance(F, center(d))
By circle_radius_v0_r on D, d we get radius(d) == distance(D, center(d))
By circle_radius_v0_r on C, d we get radius(d) == distance(C, center(d))
By angle_to_center on D, A, C, d we get 2 * angle(D, A, C) == angle(D, center(d), C) mod 360
By angle_to_center on C, A, F, d we get 2 * angle(C, A, F) == angle(C, center(d), F) mod 360
By angle_to_center on A, D, F, d we get 2 * angle(A, D, F) == angle(A, center(d), F) mod 360
By angle_to_center on F, C, D, d we get 2 * angle(F, C, D) == angle(F, center(d), D) mod 360
By angle_to_center on A, D, C, d we get 2 * angle(A, D, C) == angle(A, center(d), C) mod 360
By angle_to_center on D, C, A, d we get 2 * angle(D, C, A) == angle(D, center(d), A) mod 360
By angle_to_center on D, F, A, d we get 2 * angle(D, F, A) == angle(D, center(d), A) mod 360
By angle_to_center on D, C, F, d we get 2 * angle(D, C, F) == angle(D, center(d), F) mod 360
By angle_to_center on C, F, A, d we get 2 * angle(C, F, A) == angle(C, center(d), A) mod 360
By angle_to_center on A, C, D, d we get 2 * angle(A, C, D) == angle(A, center(d), D) mod 360
By angle_to_center on A, C, F, d we get 2 * angle(A, C, F) == angle(A, center(d), F) mod 360
By angle_to_center on F, D, C, d we get 2 * angle(F, D, C) == angle(F, center(d), C) mod 360
By angle_to_center on C, F, D, d we get 2 * angle(C, F, D) == angle(C, center(d), D) mod 360
By angle_to_center on C, A, D, d we get 2 * angle(C, A, D) == angle(C, center(d), D) mod 360
By divide_by_2_mod_180_v3 on C, D, F, D, B, E we get angle(C, D, F) == angle(D, B, E) + 180 mod 360
By angle_to_center on A, F, C, d we get 2 * angle(A, F, C) == angle(A, center(d), C) mod 360
By angle_to_center on F, A, D, d we get 2 * angle(F, A, D) == angle(F, center(d), D) mod 360
By angle_to_center on F, C, A, d we get 2 * angle(F, C, A) == angle(F, center(d), A) mod 360
By angle_to_center on F, D, A, d we get 2 * angle(F, D, A) == angle(F, center(d), A) mod 360
By angle_to_center on F, A, C, d we get 2 * angle(F, A, C) == angle(F, center(d), C) mod 360
By angle_to_center on D, F, C, d we get 2 * angle(D, F, C) == angle(D, center(d), C) mod 360
By angle_to_center on D, A, F, d we get 2 * angle(D, A, F) == angle(D, center(d), F) mod 360
By angle_to_center on C, D, A, d we get 2 * angle(C, D, A) == angle(C, center(d), A) mod 360
By angle_to_center on A, F, D, d we get 2 * angle(A, F, D) == angle(A, center(d), D) mod 360
By angle_to_center on C, D, F, d we get 2 * angle(C, D, F) == angle(C, center(d), F) mod 360
By center_not_on_circle on d we get center(d) not in d
By divide_by_2_mod_180_v3 on C, A, F, E, D, B we get angle(C, A, F) == angle(E, D, B) + 180 mod 360
By divide_by_2_mod_180_v2 on E, C, D, C, D, F we get angle(E, C, D) == angle(C, D, F) + 180 mod 360
By divide_by_2_mod_180_v3 on C, A, F, D, B, E we get angle(C, A, F) == angle(D, B, E) + 180 mod 360
By divide_by_2_mod_180_v2 on E, C, D, C, A, F we get angle(E, C, D) == angle(C, A, F) + 180 mod 360
By divide_by_2_mod_180_v3 on E, D, C, F, A, C we get angle(E, D, C) == angle(F, A, C) + 180 mod 360
By in_imply_collinear on midpoint(B, C), D, E we get collinear(D, E, midpoint(B, C))
By divide_by_2_mod_180_v1 on B, D, E, B, A, C we get angle(B, A, C) == angle(B, D, E) mod 360
By line_inequality on Line(C, D), Line(B, E), D we get Line(B, E) != Line(C, D)
By divide_by_2_mod_180_v0 on E, D, B, C, A, B we get angle(C, A, B) == angle(E, D, B) mod 360
By divide_by_2_mod_180_v3 on B, D, E, F, A, C we get angle(B, D, E) == angle(F, A, C) + 180 mod 360
By divide_by_2_mod_180_v3 on E, D, C, F, D, C we get angle(E, D, C) == angle(F, D, C) + 180 mod 360
By line_inequality on Line(B, D), Line(C, E), D we get Line(B, D) != Line(C, E)
By divide_by_2_mod_180_v2 on E, D, B, C, A, F we get angle(E, D, B) == angle(C, A, F) + 180 mod 360
By divide_by_2_mod_180_v0 on D, B, E, C, A, B we get angle(C, A, B) == angle(D, B, E) mod 360
By divide_by_2_mod_180_v2 on F, A, C, E, D, C we get angle(F, A, C) == angle(E, D, C) + 180 mod 360
By divide_by_2_mod_180_v2 on D, B, E, C, A, F we get angle(D, B, E) == angle(C, A, F) + 180 mod 360
By divide_by_2_mod_180_v2 on D, B, E, C, D, F we get angle(D, B, E) == angle(C, D, F) + 180 mod 360
By line_circle_intersection_has_at_most_two_points_0 on C, B, midpoint(B, C), c we get midpoint(B, C) not in c
By divide_by_2_mod_180_v3 on B, D, E, F, D, C we get angle(B, D, E) == angle(F, D, C) + 180 mod 360
By line_inequality on Line(B, D), Line(B, E), D we get Line(B, D) != Line(B, E)
By divide_by_2_mod_180_v2 on C, D, E, C, D, F we get angle(C, D, E) == angle(C, D, F) + 180 mod 360
By divide_by_2_mod_180_v1 on B, A, C, D, C, E we get angle(B, A, C) == angle(D, C, E) mod 360
By divide_by_2_mod_180_v0 on C, A, B, E, C, D we get angle(C, A, B) == angle(E, C, D) mod 360
By divide_by_2_mod_180_v3 on E, B, D, F, D, C we get angle(E, B, D) == angle(F, D, C) + 180 mod 360
By divide_by_2_mod_180_v1 on B, A, C, E, B, D we get angle(B, A, C) == angle(E, B, D) mod 360
By divide_by_2_mod_180_v0 on C, D, E, C, A, B we get angle(C, A, B) == angle(C, D, E) mod 360
By line_inequality on Line(B, C), Line(D, F), C we get Line(B, C) != Line(D, F)
By divide_by_2_mod_180_v3 on D, C, E, F, D, C we get angle(D, C, E) == angle(F, D, C) + 180 mod 360
By divide_by_2_mod_180_v3 on C, D, F, E, C, D we get angle(C, D, F) == angle(E, C, D) + 180 mod 360
By divide_by_2_mod_180_v3 on C, D, F, E, D, B we get angle(C, D, F) == angle(E, D, B) + 180 mod 360
By divide_by_2_mod_180_v3 on C, D, F, C, D, E we get angle(C, D, F) == angle(C, D, E) + 180 mod 360
By divide_by_2_mod_180_v2 on F, D, C, D, C, E we get angle(F, D, C) == angle(D, C, E) + 180 mod 360
By divide_by_2_mod_180_v2 on F, A, C, E, B, D we get angle(F, A, C) == angle(E, B, D) + 180 mod 360
By divide_by_2_mod_180_v1 on B, A, C, E, D, C we get angle(B, A, C) == angle(E, D, C) mod 360
By line_inequality on Line(B, E), Line(B, C), E we get Line(B, C) != Line(B, E)
By divide_by_2_mod_180_v3 on D, C, E, F, A, C we get angle(D, C, E) == angle(F, A, C) + 180 mod 360
By line_inequality on Line(B, C), Line(A, D), C we get Line(A, D) != Line(B, C)
By divide_by_2_mod_180_v2 on F, D, C, B, D, E we get angle(F, D, C) == angle(B, D, E) + 180 mod 360
By divide_by_2_mod_180_v2 on F, A, C, B, D, E we get angle(F, A, C) == angle(B, D, E) + 180 mod 360
By line_inequality on Line(C, E), Line(A, C), E we get Line(A, C) != Line(C, E)
By line_inequality on Line(A, C), Line(B, D), C we get Line(A, C) != Line(B, D)
By divide_by_2_mod_180_v3 on E, B, D, F, A, C we get angle(E, B, D) == angle(F, A, C) + 180 mod 360
By divide_by_2_mod_180_v3 on C, A, F, E, C, D we get angle(C, A, F) == angle(E, C, D) + 180 mod 360
By line_inequality on Line(D, F), Line(A, C), D we get Line(A, C) != Line(D, F)
By divide_by_2_mod_180_v2 on F, A, C, D, C, E we get angle(F, A, C) == angle(D, C, E) + 180 mod 360
By aa_anti_similarity on D, B, F, D, C, F we get anti_similar_triangles(B, D, F, C, D, F)
By line_inequality on Line(C, E), Line(B, C), E we get Line(B, C) != Line(C, E)
By divide_by_2_mod_180_v2 on F, D, C, E, D, C we get angle(F, D, C) == angle(E, D, C) + 180 mod 360
By divide_by_2_mod_180_v2 on E, D, B, C, D, F we get angle(E, D, B) == angle(C, D, F) + 180 mod 360
By line_inequality on Line(D, F), Line(C, E), D we get Line(C, E) != Line(D, F)
By line_inequality on Line(C, F), Line(B, E), C we get Line(B, E) != Line(C, F)
By line_inequality on Line(C, D), Line(A, D), C we get Line(A, D) != Line(C, D)
By divide_by_2_mod_180_v3 on C, A, F, C, D, E we get angle(C, A, F) == angle(C, D, E) + 180 mod 360
By aa_anti_similarity on D, F, B, D, F, C we get anti_similar_triangles(B, D, F, C, D, F)
By divide_by_2_mod_180_v2 on C, D, E, C, A, F we get angle(C, D, E) == angle(C, A, F) + 180 mod 360
By aa_anti_similarity on D, C, F, D, B, F we get anti_similar_triangles(B, D, F, C, D, F)
By divide_by_2_mod_180_v2 on F, D, C, E, B, D we get angle(F, D, C) == angle(E, B, D) + 180 mod 360
By line_inequality on Line(C, F), Line(D, F), C we get Line(C, F) != Line(D, F)
By line_inequality on Line(A, D), Line(C, F), A we get Line(A, D) != Line(C, F)
By between_imply_segment_sum on B, A, F we get distance(B, F) == distance(A, B) + distance(A, F)
By aa_anti_similarity on D, F, C, D, F, B we get anti_similar_triangles(B, D, F, C, D, F)
By line_inequality on Line(B, D), Line(D, F), B we get Line(B, D) != Line(D, F)
By line_inequality on Line(B, D), Line(B, C), D we get Line(B, C) != Line(B, D)
By line_inequality on Line(C, E), Line(A, D), E we get Line(A, D) != Line(C, E)
By line_inequality on Line(C, D), Line(C, F), D we get Line(C, D) != Line(C, F)
By line_inequality on Line(B, C), Line(C, F), B we get Line(B, C) != Line(C, F)
By line_inequality on Line(C, E), Line(B, E), C we get Line(B, E) != Line(C, E)
By line_inequality on Line(C, D), Line(D, F), C we get Line(C, D) != Line(D, F)
By line_inequality on Line(B, E), Line(A, D), E we get Line(A, D) != Line(B, E)
By line_inequality on Line(C, F), Line(B, D), C we get Line(B, D) != Line(C, F)
By line_circle_intersection_has_at_most_two_points_0 on B, C, midpoint(B, C), e we get midpoint(B, C) not in e
By line_inequality on Line(C, F), Line(A, C), F we get Line(A, C) != Line(C, F)
By line_inequality on Line(B, C), Line(C, D), B we get Line(B, C) != Line(C, D)
By line_inequality on Line(D, F), Line(B, E), F we get Line(B, E) != Line(D, F)
By line_inequality on Line(B, D), Line(A, D), B we get Line(A, D) != Line(B, D)
By line_inequality on Line(C, D), Line(B, D), C we get Line(B, D) != Line(C, D)
By line_inequality on Line(A, C), Line(B, E), C we get Line(A, C) != Line(B, E)
By line_inequality on Line(A, D), Line(A, C), D we get Line(A, C) != Line(A, D)
By line_inequality on Line(A, C), Line(B, C), A we get Line(A, C) != Line(B, C)
By line_inequality on Line(C, D), Line(C, E), D we get Line(C, D) != Line(C, E)
By line_inequality on Line(D, F), Line(A, D), F we get Line(A, D) != Line(D, F)
By line_containment_inequality on midpoint(B, C), A, g we get A != midpoint(B, C)
By line_inequality on Line(C, E), Line(C, F), E we get Line(C, E) != Line(C, F)
By line_inequality on Line(C, D), Line(A, C), D we get Line(A, C) != Line(C, D)
By tangent_chord_angle_v1 on D, B, E, C we get tangent(Line(C, D), Circle(B, D, E))
By tangent_chord_angle_v1 on D, C, E, B we get tangent(Line(B, D), Circle(C, D, E))
By internal_angle_bisector_definition_v0_r on C, D, B, E we get Line(D, E) == internal_angle_bisector(B, E, C)
By isosceles_triangle_midpoint on E, C, B we get midpoint(B, C) in median(E, B, C)
By internal_angle_bisector_definition_v0_r on F, B, F, A we get Line(A, B) == internal_angle_bisector(F, A, F)
By perpendicular_bisector_properties on B, C we get perpendicular(Line(B, C), perpendicular_bisector(B, C)), midpoint(B, C) == line_intersection(Line(B, C), perpendicular_bisector(B, C))
By internal_angle_bisector_definition_v0_r on C, D, B, F we get Line(D, F) == internal_angle_bisector(B, F, C)
By internal_angle_bisector_definition_v0_r on A, B, A, F we get Line(B, F) == internal_angle_bisector(A, F, A)
By collinear_definition on C, B, midpoint(B, C) we get B in Line(C, midpoint(B, C)), midpoint(B, C) in Line(B, C), Line(B, C) == Line(C, midpoint(B, C)), 0 == 2 * angle(B, C, midpoint(B, C)) mod 360
By internal_angle_bisector_definition_v0_r on C, E, B, D we get Line(D, E) == internal_angle_bisector(B, D, C)
By internal_angle_bisector_definition_v0_r on A, D, C, F we get Line(D, F) == internal_angle_bisector(A, F, C)
By internal_angle_bisector_definition_v0_r on A, F, A, B we get Line(B, F) == internal_angle_bisector(A, B, A)
By internal_angle_bisector_definition_v0_r on B, F, B, A we get Line(A, F) == internal_angle_bisector(B, A, B)
By isosceles_triangle_midpoint on D, C, B we get midpoint(B, C) in median(D, B, C)
By internal_angle_bisector_definition_v0_r on F, A, F, B we get Line(A, B) == internal_angle_bisector(F, B, F)
By collinear_definition on B, C, midpoint(B, C) we get C in Line(B, midpoint(B, C)), midpoint(B, C) in Line(B, C), Line(B, C) == Line(B, midpoint(B, C)), 0 == 2 * angle(C, B, midpoint(B, C)) mod 360
By collinear_definition on C, midpoint(B, C), B we get midpoint(B, C) in Line(B, C), B in Line(C, midpoint(B, C)), Line(B, C) == Line(C, midpoint(B, C)), 0 == 2 * angle(midpoint(B, C), C, B) mod 360
By internal_angle_bisector_definition_v0_r on B, A, B, F we get Line(A, F) == internal_angle_bisector(B, F, B)
By collinear_definition on B, midpoint(B, C), C we get midpoint(B, C) in Line(B, C), C in Line(B, midpoint(B, C)), Line(B, C) == Line(B, midpoint(B, C)), 0 == 2 * angle(midpoint(B, C), B, C) mod 360
By perpendicular_lines_draw_intersection on g, Line(B, C) we get exists(line_intersection(g, Line(B, C)))
By isosceles_triangle_altitude_v1 on midpoint(B, C), C, B we get identical(perpendicular_bisector(B, C), internal_angle_bisector(B, midpoint(B, C), C), perpendicular_line(midpoint(B, C), Line(B, C)))
By isosceles_triangle_altitude_v3 on midpoint(B, C), C, B we get identical(perpendicular_bisector(B, C), internal_angle_bisector(B, midpoint(B, C), C), perpendicular_line(midpoint(B, C), Line(B, C)))
By isosceles_triangle_altitude_v3 on midpoint(B, C), B, C we get identical(perpendicular_bisector(B, C), internal_angle_bisector(B, midpoint(B, C), C), perpendicular_line(midpoint(B, C), Line(B, C)))
By isosceles_triangle_altitude_v1 on midpoint(B, C), B, C we get identical(perpendicular_bisector(B, C), internal_angle_bisector(B, midpoint(B, C), C), perpendicular_line(midpoint(B, C), Line(B, C)))
By anti_similar_triangle_basic_properties on A, B, D, B, A, D we get not_collinear(A, B, D), not_collinear(A, B, D), angle(A, B, D) == 0 - angle(B, A, D) mod 360, angle(B, D, A) == 0 - angle(A, D, B) mod 360, angle(D, A, B) == 0 - angle(D, B, A) mod 360, log(distance(A, B)) + log(distance(A, D)) == log(distance(A, B)) + log(distance(B, D)), log(distance(A, D)) + log(distance(A, D)) == log(distance(B, D)) + log(distance(B, D)), log(distance(A, D)) + log(distance(A, B)) == log(distance(B, D)) + log(distance(A, B))
By log_of_2_times_distance on B, C, midpoint(B, C), C we get log(distance(B, C)) == 0.6931471805599453 + log(distance(C, midpoint(B, C)))
By altitude_definition on E, C, B, g we get g == altitude(E, B, C)
By log_of_2_times_distance on B, C, midpoint(B, C), B we get log(distance(B, C)) == 0.6931471805599453 + log(distance(B, midpoint(B, C)))
By collinear_definition on midpoint(B, C), B, C we get B in Line(C, midpoint(B, C)), C in Line(B, midpoint(B, C)), Line(B, midpoint(B, C)) == Line(C, midpoint(B, C)), 0 == 2 * angle(B, midpoint(B, C), C) mod 360
By altitude_definition on D, C, B, g we get g == altitude(D, B, C)
By isosceles_triangle_properties on midpoint(B, C), C, B we get distance(B, midpoint(B, C)) == distance(C, midpoint(B, C)), angle(C, B, midpoint(B, C)) == angle(midpoint(B, C), C, B) mod 360
By altitude_definition on B, E, D, Line(B, C) we get Line(B, C) == altitude(B, D, E)
By collinear_definition on midpoint(B, C), C, B we get C in Line(B, midpoint(B, C)), B in Line(C, midpoint(B, C)), Line(B, midpoint(B, C)) == Line(C, midpoint(B, C)), 0 == 2 * angle(C, midpoint(B, C), B) mod 360
By altitude_definition on C, D, E, Line(B, C) we get Line(B, C) == altitude(C, D, E)
By isosceles_triangle_altitude_v3 on D, B, C we get identical(perpendicular_bisector(B, C), internal_angle_bisector(B, D, C), perpendicular_line(D, Line(B, C)))
By isosceles_triangle_properties on midpoint(B, C), B, C we get distance(B, midpoint(B, C)) == distance(C, midpoint(B, C)), angle(B, C, midpoint(B, C)) == angle(midpoint(B, C), B, C) mod 360
By isosceles_triangle_altitude_v3 on D, C, B we get identical(perpendicular_bisector(B, C), internal_angle_bisector(B, D, C), perpendicular_line(D, Line(B, C)))
By isosceles_triangle_altitude_v3 on E, C, B we get identical(perpendicular_bisector(B, C), internal_angle_bisector(B, E, C), perpendicular_line(E, Line(B, C)))
By isosceles_triangle_altitude_v3 on E, B, C we get identical(perpendicular_bisector(B, C), internal_angle_bisector(B, E, C), perpendicular_line(E, Line(B, C)))
By anti_similar_triangle_basic_properties on A, D, C, C, D, A we get not_collinear(A, C, D), not_collinear(A, C, D), angle(A, D, C) == 0 - angle(C, D, A) mod 360, angle(D, C, A) == 0 - angle(D, A, C) mod 360, angle(C, A, D) == 0 - angle(A, C, D) mod 360, log(distance(A, D)) + log(distance(A, D)) == log(distance(C, D)) + log(distance(C, D)), log(distance(A, D)) + log(distance(A, C)) == log(distance(C, D)) + log(distance(A, C)), log(distance(A, C)) + log(distance(A, D)) == log(distance(A, C)) + log(distance(C, D))
By anti_similar_triangle_basic_properties on C, D, E, D, C, E we get not_collinear(C, D, E), not_collinear(C, D, E), angle(C, D, E) == 0 - angle(D, C, E) mod 360, angle(D, E, C) == 0 - angle(C, E, D) mod 360, angle(E, C, D) == 0 - angle(E, D, C) mod 360, log(distance(C, D)) + log(distance(C, E)) == log(distance(C, D)) + log(distance(D, E)), log(distance(C, E)) + log(distance(C, E)) == log(distance(D, E)) + log(distance(D, E)), log(distance(C, E)) + log(distance(C, D)) == log(distance(D, E)) + log(distance(C, D))
By anti_similar_triangle_basic_properties on C, B, D, B, C, D we get not_collinear(B, C, D), not_collinear(B, C, D), angle(C, B, D) == 0 - angle(B, C, D) mod 360, angle(B, D, C) == 0 - angle(C, D, B) mod 360, angle(D, C, B) == 0 - angle(D, B, C) mod 360, log(distance(B, C)) + log(distance(B, D)) == log(distance(B, C)) + log(distance(C, D)), log(distance(B, D)) + log(distance(B, D)) == log(distance(C, D)) + log(distance(C, D)), log(distance(B, D)) + log(distance(B, C)) == log(distance(C, D)) + log(distance(B, C))
By anti_similar_triangle_basic_properties on B, D, E, D, B, E we get not_collinear(B, D, E), not_collinear(B, D, E), angle(B, D, E) == 0 - angle(D, B, E) mod 360, angle(D, E, B) == 0 - angle(B, E, D) mod 360, angle(E, B, D) == 0 - angle(E, D, B) mod 360, log(distance(B, D)) + log(distance(B, E)) == log(distance(B, D)) + log(distance(D, E)), log(distance(B, E)) + log(distance(B, E)) == log(distance(D, E)) + log(distance(D, E)), log(distance(B, E)) + log(distance(B, D)) == log(distance(D, E)) + log(distance(B, D))
By anti_similar_triangle_basic_properties on E, B, C, E, C, B we get not_collinear(B, C, E), not_collinear(B, C, E), angle(E, B, C) == 0 - angle(E, C, B) mod 360, angle(B, C, E) == 0 - angle(C, B, E) mod 360, angle(C, E, B) == 0 - angle(B, E, C) mod 360, log(distance(B, E)) + log(distance(B, C)) == log(distance(C, E)) + log(distance(B, C)), log(distance(B, C)) + log(distance(B, E)) == log(distance(B, C)) + log(distance(C, E)), log(distance(B, E)) + log(distance(B, E)) == log(distance(C, E)) + log(distance(C, E))
By between_implies_angles on B, midpoint(B, C), C we get 180 == angle(B, midpoint(B, C), C) mod 360, 0 == angle(midpoint(B, C), C, B) mod 360, 0 == angle(C, B, midpoint(B, C)) mod 360
By between_implies_angles on C, midpoint(B, C), B we get 180 == angle(C, midpoint(B, C), B) mod 360, 0 == angle(midpoint(B, C), B, C) mod 360, 0 == angle(B, C, midpoint(B, C)) mod 360
By anti_similar_triangle_basic_properties on D, E, B, D, E, C we get not_collinear(B, D, E), not_collinear(C, D, E), angle(D, E, B) == 0 - angle(D, E, C) mod 360, angle(E, B, D) == 0 - angle(E, C, D) mod 360, angle(B, D, E) == 0 - angle(C, D, E) mod 360, log(distance(D, E)) + log(distance(B, E)) == log(distance(D, E)) + log(distance(C, E)), log(distance(B, E)) + log(distance(C, D)) == log(distance(C, E)) + log(distance(B, D)), log(distance(B, D)) + log(distance(D, E)) == log(distance(C, D)) + log(distance(D, E))
By similar_triangle_basic_properties on E, B, D, E, D, C we get not_collinear(B, D, E), not_collinear(C, D, E), angle(E, B, D) == angle(E, D, C) mod 360, angle(B, D, E) == angle(D, C, E) mod 360, angle(C, E, D) == angle(D, E, B) mod 360, log(distance(B, E)) + log(distance(C, D)) == log(distance(D, E)) + log(distance(B, D)), log(distance(B, D)) + log(distance(C, E)) == log(distance(C, D)) + log(distance(D, E)), log(distance(C, E)) + log(distance(B, E)) == log(distance(D, E)) + log(distance(D, E))
By anti_similar_triangle_basic_properties on D, C, E, D, B, E we get not_collinear(C, D, E), not_collinear(B, D, E), angle(D, C, E) == 0 - angle(D, B, E) mod 360, angle(C, E, D) == 0 - angle(B, E, D) mod 360, angle(E, D, C) == 0 - angle(E, D, B) mod 360, log(distance(B, D)) + log(distance(C, E)) == log(distance(C, D)) + log(distance(B, E)), log(distance(B, E)) + log(distance(D, E)) == log(distance(C, E)) + log(distance(D, E)), log(distance(D, E)) + log(distance(B, D)) == log(distance(D, E)) + log(distance(C, D))
By similar_triangle_basic_properties on E, D, B, E, C, D we get not_collinear(B, D, E), not_collinear(C, D, E), angle(E, C, D) == angle(E, D, B) mod 360, angle(C, D, E) == angle(D, B, E) mod 360, angle(B, E, D) == angle(D, E, C) mod 360, log(distance(C, E)) + log(distance(B, D)) == log(distance(D, E)) + log(distance(C, D)), log(distance(B, D)) + log(distance(D, E)) == log(distance(C, D)) + log(distance(B, E)), log(distance(B, E)) + log(distance(C, E)) == log(distance(D, E)) + log(distance(D, E))
By perpendicular_line_definition on D, Line(D, F), Line(B, C) we get Line(D, F) == perpendicular_line(D, Line(B, C))
By radical_axis_is_perpendicular_to_center_line on Line(A, C), d, c we get perpendicular(Line(A, C), Line(center(c), center(d)))
By concurrent_sufficient_conditions on Line(B, D), Line(B, C), f we get concurrent(f, Line(B, C), Line(B, D))
By line_intersection_definition on D, Line(A, D), Line(B, D) we get D == line_intersection(Line(A, D), Line(B, D))
By line_intersection_definition on A, Line(A, D), Line(A, C) we get A == line_intersection(Line(A, C), Line(A, D))
By line_intersection_definition on C, Line(C, E), Line(C, D) we get C == line_intersection(Line(C, D), Line(C, E))
By perpendicular_line_definition on B, Line(B, C), Line(D, F) we get Line(B, C) == perpendicular_line(B, Line(D, F))
By line_intersection_definition on B, Line(B, D), Line(B, E) we get B == line_intersection(Line(B, D), Line(B, E))
By concurrent_sufficient_conditions on Line(C, D), Line(B, D), g we get concurrent(g, Line(B, D), Line(C, D))
By perpendicular_line_definition on midpoint(B, C), Line(B, C), Line(D, F) we get Line(B, C) == perpendicular_line(midpoint(B, C), Line(D, F))
By line_intersection_definition on B, Line(B, E), Line(B, C) we get B == line_intersection(Line(B, C), Line(B, E))
By line_intersection_definition on E, Line(C, E), Line(B, E) we get E == line_intersection(Line(B, E), Line(C, E))
By line_intersection_definition on D, Line(D, F), Line(A, D) we get D == line_intersection(Line(A, D), Line(D, F))
By concurrent_sufficient_conditions on Line(B, E), Line(B, D), f we get concurrent(f, Line(B, D), Line(B, E))
By line_intersection_definition on D, Line(D, F), Line(B, D) we get D == line_intersection(Line(B, D), Line(D, F))
By concurrent_sufficient_conditions on Line(D, F), Line(C, F), f we get concurrent(f, Line(C, F), Line(D, F))
By concurrent_sufficient_conditions on Line(B, D), Line(B, E), f we get concurrent(f, Line(B, D), Line(B, E))
By perpendicular_line_definition on C, Line(B, C), Line(D, F) we get Line(B, C) == perpendicular_line(C, Line(D, F))
By line_intersection_definition on D, Line(B, D), Line(C, D) we get D == line_intersection(Line(B, D), Line(C, D))
By line_intersection_definition on C, Line(C, D), Line(A, C) we get C == line_intersection(Line(A, C), Line(C, D))
By concurrent_sufficient_conditions on Line(A, C), Line(A, D), f we get concurrent(f, Line(A, C), Line(A, D))
By line_intersection_definition on C, Line(C, E), Line(B, C) we get C == line_intersection(Line(B, C), Line(C, E))
By concurrent_sufficient_conditions on Line(A, D), Line(C, D), g we get concurrent(g, Line(A, D), Line(C, D))
By line_intersection_definition on C, Line(A, C), Line(C, E) we get C == line_intersection(Line(A, C), Line(C, E))
By concurrent_sufficient_conditions on Line(B, E), Line(C, E), g we get concurrent(g, Line(B, E), Line(C, E))
By line_intersection_definition on C, Line(A, C), Line(C, F) we get C == line_intersection(Line(A, C), Line(C, F))
By concurrent_sufficient_conditions on Line(B, D), Line(C, D), g we get concurrent(g, Line(B, D), Line(C, D))
By line_intersection_definition on C, Line(B, C), Line(C, F) we get C == line_intersection(Line(B, C), Line(C, F))
By perpendicular_line_definition on midpoint(B, C), Line(B, C), g we get Line(B, C) == perpendicular_line(midpoint(B, C), g)
By line_intersection_definition on F, Line(D, F), Line(C, F) we get F == line_intersection(Line(C, F), Line(D, F))
By line_intersection_definition on C, Line(C, D), Line(C, F) we get C == line_intersection(Line(C, D), Line(C, F))
By line_intersection_definition on D, Line(D, F), Line(C, D) we get D == line_intersection(Line(C, D), Line(D, F))
By concurrent_sufficient_conditions on Line(B, D), Line(A, D), g we get concurrent(g, Line(A, D), Line(B, D))
By concurrent_sufficient_conditions on Line(C, F), Line(D, F), f we get concurrent(f, Line(C, F), Line(D, F))
By perpendicular_line_definition on F, Line(D, F), Line(B, C) we get Line(D, F) == perpendicular_line(F, Line(B, C))
By concurrent_sufficient_conditions on Line(B, C), Line(B, D), f we get concurrent(f, Line(B, C), Line(B, D))
By concurrent_sufficient_conditions on Line(B, E), Line(B, C), f we get concurrent(f, Line(B, C), Line(B, E))
By concurrent_sufficient_conditions on Line(A, D), Line(A, C), f we get concurrent(f, Line(A, C), Line(A, D))
By line_intersection_definition on D, Line(C, D), Line(A, D) we get D == line_intersection(Line(A, D), Line(C, D))
By line_intersection_definition on C, Line(C, F), Line(C, E) we get C == line_intersection(Line(C, E), Line(C, F))
By concurrent_sufficient_conditions on Line(A, D), Line(B, D), g we get concurrent(g, Line(A, D), Line(B, D))
By concurrent_sufficient_conditions on Line(C, E), Line(B, E), g we get concurrent(g, Line(B, E), Line(C, E))
By line_intersection_definition on C, Line(A, C), Line(B, C) we get C == line_intersection(Line(A, C), Line(B, C))
By line_intersection_definition on B, Line(B, C), Line(B, D) we get B == line_intersection(Line(B, C), Line(B, D))
By line_intersection_definition on C, Line(C, D), Line(B, C) we get C == line_intersection(Line(B, C), Line(C, D))
By concurrent_sufficient_conditions on Line(C, D), Line(A, D), g we get concurrent(g, Line(A, D), Line(C, D))
By concurrent_sufficient_conditions on Line(B, C), Line(B, E), f we get concurrent(f, Line(B, C), Line(B, E))
By line_unique_intersection_v1 on Line(C, D), g, D, midpoint(B, C) we get midpoint(B, C) not in Line(C, D)
By line_unique_intersection_v1 on Line(B, D), Line(B, C), B, midpoint(B, C) we get midpoint(B, C) not in Line(B, D)
By line_unique_intersection_v1 on Line(B, E), g, E, midpoint(B, C) we get midpoint(B, C) not in Line(B, E)
By line_unique_intersection_v1 on Line(A, C), Line(B, C), C, midpoint(B, C) we get midpoint(B, C) not in Line(A, C)
By line_unique_intersection_v1 on Line(C, E), Line(B, C), C, midpoint(B, C) we get midpoint(B, C) not in Line(C, E)
By line_unique_intersection_v1 on Line(A, D), g, D, midpoint(B, C) we get midpoint(B, C) not in Line(A, D)
By line_unique_intersection_v1 on Line(C, F), Line(B, C), C, midpoint(B, C) we get midpoint(B, C) not in Line(C, F)
By line_unique_intersection_v1 on f, Line(B, C), B, midpoint(B, C) we get midpoint(B, C) not in f
By perpendicular_direction_conditions_v0_r on F, D, midpoint(B, C), B we get 180 == 2 * direction(F, D) - 2 * direction(midpoint(B, C), B) mod 360
By same_angle_converse_v1 on D, F, E, B we get collinear(D, E, F)
By between_implies_orientation on A, C, midpoint(B, C), B we get orientation(A, C, midpoint(B, C)) == orientation(A, midpoint(B, C), B) mod 360, orientation(A, C, B) == orientation(A, C, midpoint(B, C)) mod 360
By collinear_and_not_between_implies_orientation on A, C, B, midpoint(B, C) we get orientation(A, B, C) == orientation(A, B, midpoint(B, C)) mod 360
By perpendicular_direction_conditions_v0_r on D, F, midpoint(B, C), B we get 180 == 2 * direction(D, F) - 2 * direction(midpoint(B, C), B) mod 360
By collinear_and_not_between_implies_orientation on D, C, B, midpoint(B, C) we get orientation(B, C, D) == orientation(B, midpoint(B, C), D) mod 360
By perpendicular_direction_conditions_v0_r on F, D, midpoint(B, C), C we get 180 == 2 * direction(F, D) - 2 * direction(midpoint(B, C), C) mod 360
By collinear_and_not_between_implies_orientation on E, C, B, midpoint(B, C) we get orientation(B, C, E) == orientation(B, midpoint(B, C), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, C), B, D, E we get 180 == 2 * direction(midpoint(B, C), B) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on E, D, midpoint(B, C), B we get 180 == 2 * direction(E, D) - 2 * direction(midpoint(B, C), B) mod 360
By perpendicular_direction_conditions_v0_r on E, D, midpoint(B, C), C we get 180 == 2 * direction(E, D) - 2 * direction(midpoint(B, C), C) mod 360
By between_implies_orientation on A, B, midpoint(B, C), C we get orientation(A, B, midpoint(B, C)) == orientation(A, midpoint(B, C), C) mod 360, orientation(A, B, C) == orientation(A, B, midpoint(B, C)) mod 360
By between_implies_orientation on E, B, midpoint(B, C), C we get orientation(B, midpoint(B, C), E) == orientation(C, E, midpoint(B, C)) mod 360, orientation(B, C, E) == orientation(B, midpoint(B, C), E) mod 360
By between_implies_orientation on E, C, midpoint(B, C), B we get orientation(B, E, midpoint(B, C)) == orientation(C, midpoint(B, C), E) mod 360, orientation(B, E, C) == orientation(C, midpoint(B, C), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, C), B, F, D we get 180 == 2 * direction(midpoint(B, C), B) - 2 * direction(F, D) mod 360
By projection_definition on C, midpoint(B, C), g we get midpoint(B, C) == projection(C, g)
By projection_definition on E, midpoint(B, C), Line(B, C) we get midpoint(B, C) == projection(E, Line(B, C))
By perpendicular_direction_conditions_v0_r on midpoint(B, C), B, D, F we get 180 == 2 * direction(midpoint(B, C), B) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on D, E, midpoint(B, C), C we get 180 == 2 * direction(D, E) - 2 * direction(midpoint(B, C), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, C), C, E, D we get 180 == 2 * direction(midpoint(B, C), C) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, C), C, F, D we get 180 == 2 * direction(midpoint(B, C), C) - 2 * direction(F, D) mod 360
By projection_definition on B, midpoint(B, C), g we get midpoint(B, C) == projection(B, g)
By perpendicular_direction_conditions_v0_r on midpoint(B, C), C, D, F we get 180 == 2 * direction(midpoint(B, C), C) - 2 * direction(D, F) mod 360
By between_implies_orientation on D, B, midpoint(B, C), C we get orientation(B, midpoint(B, C), D) == orientation(C, D, midpoint(B, C)) mod 360, orientation(B, C, D) == orientation(B, midpoint(B, C), D) mod 360
By perpendicular_direction_conditions_v0_r on D, E, midpoint(B, C), B we get 180 == 2 * direction(D, E) - 2 * direction(midpoint(B, C), B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, C), C, D, E we get 180 == 2 * direction(midpoint(B, C), C) - 2 * direction(D, E) mod 360
By between_implies_orientation on D, C, midpoint(B, C), B we get orientation(B, D, midpoint(B, C)) == orientation(C, midpoint(B, C), D) mod 360, orientation(B, D, C) == orientation(C, midpoint(B, C), D) mod 360
By projection_definition on D, midpoint(B, C), Line(B, C) we get midpoint(B, C) == projection(D, Line(B, C))
By perpendicular_direction_conditions_v0_r on midpoint(B, C), B, E, D we get 180 == 2 * direction(midpoint(B, C), B) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on D, F, midpoint(B, C), C we get 180 == 2 * direction(D, F) - 2 * direction(midpoint(B, C), C) mod 360
By different_points_v1 on center(d), C we get 0 != distance(C, center(d))
By different_points_v1 on center(d), D we get 0 != distance(D, center(d))
By different_points_v1 on A, center(d) we get 0 != distance(A, center(d))
By different_points_v1 on F, center(d) we get 0 != distance(F, center(d))
By different_points_v1 on D, midpoint(B, C) we get 0 != distance(D, midpoint(B, C))
By perpendicular_direction_conditions_v0_r on E, midpoint(B, C), midpoint(B, C), C we get 180 == 2 * direction(E, midpoint(B, C)) - 2 * direction(midpoint(B, C), C) mod 360
By different_points_v1 on E, midpoint(B, C) we get 0 != distance(E, midpoint(B, C))
By perpendicular_direction_conditions_v0_r on C, midpoint(B, C), E, midpoint(B, C) we get 180 == 2 * direction(C, midpoint(B, C)) - 2 * direction(E, midpoint(B, C)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(B, C), C, midpoint(B, C) we get 180 == 2 * direction(D, midpoint(B, C)) - 2 * direction(C, midpoint(B, C)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(B, C), C, B we get 180 == 2 * direction(E, midpoint(B, C)) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on C, B, midpoint(B, C), E we get 180 == 2 * direction(C, B) - 2 * direction(midpoint(B, C), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, C), C, midpoint(B, C), E we get 180 == 2 * direction(midpoint(B, C), C) - 2 * direction(midpoint(B, C), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, C), B, midpoint(B, C), E we get 180 == 2 * direction(midpoint(B, C), B) - 2 * direction(midpoint(B, C), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, C), D, B, midpoint(B, C) we get 180 == 2 * direction(midpoint(B, C), D) - 2 * direction(B, midpoint(B, C)) mod 360
By perpendicular_direction_conditions_v0_r on C, B, midpoint(B, C), D we get 180 == 2 * direction(C, B) - 2 * direction(midpoint(B, C), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, C), C, D, midpoint(B, C) we get 180 == 2 * direction(midpoint(B, C), C) - 2 * direction(D, midpoint(B, C)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, C), E, C, midpoint(B, C) we get 180 == 2 * direction(midpoint(B, C), E) - 2 * direction(C, midpoint(B, C)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, C), D, midpoint(B, C), B we get 180 == 2 * direction(midpoint(B, C), D) - 2 * direction(midpoint(B, C), B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, C), D, C, midpoint(B, C) we get 180 == 2 * direction(midpoint(B, C), D) - 2 * direction(C, midpoint(B, C)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(B, C), B, midpoint(B, C) we get 180 == 2 * direction(D, midpoint(B, C)) - 2 * direction(B, midpoint(B, C)) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(B, C), midpoint(B, C), E we get 180 == 2 * direction(B, midpoint(B, C)) - 2 * direction(midpoint(B, C), E) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(B, C), midpoint(B, C), E we get 180 == 2 * direction(C, midpoint(B, C)) - 2 * direction(midpoint(B, C), E) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(B, C), D, midpoint(B, C) we get 180 == 2 * direction(C, midpoint(B, C)) - 2 * direction(D, midpoint(B, C)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(B, C), midpoint(B, C), B we get 180 == 2 * direction(D, midpoint(B, C)) - 2 * direction(midpoint(B, C), B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, C), E, B, C we get 180 == 2 * direction(midpoint(B, C), E) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, C), C, midpoint(B, C), D we get 180 == 2 * direction(midpoint(B, C), C) - 2 * direction(midpoint(B, C), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, C), D, B, C we get 180 == 2 * direction(midpoint(B, C), D) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, C), D, C, B we get 180 == 2 * direction(midpoint(B, C), D) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, C), E, midpoint(B, C), C we get 180 == 2 * direction(midpoint(B, C), E) - 2 * direction(midpoint(B, C), C) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(B, C), D, midpoint(B, C) we get 180 == 2 * direction(B, midpoint(B, C)) - 2 * direction(D, midpoint(B, C)) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(B, C), E, midpoint(B, C) we get 180 == 2 * direction(B, midpoint(B, C)) - 2 * direction(E, midpoint(B, C)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, C), E, B, midpoint(B, C) we get 180 == 2 * direction(midpoint(B, C), E) - 2 * direction(B, midpoint(B, C)) mod 360
By perpendicular_direction_conditions_v0_r on B, C, E, midpoint(B, C) we get 180 == 2 * direction(B, C) - 2 * direction(E, midpoint(B, C)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(B, C), C, midpoint(B, C) we get 180 == 2 * direction(E, midpoint(B, C)) - 2 * direction(C, midpoint(B, C)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, C), D, midpoint(B, C), C we get 180 == 2 * direction(midpoint(B, C), D) - 2 * direction(midpoint(B, C), C) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(B, C), midpoint(B, C), C we get 180 == 2 * direction(D, midpoint(B, C)) - 2 * direction(midpoint(B, C), C) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(B, C), B, C we get 180 == 2 * direction(D, midpoint(B, C)) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(B, C), C, B we get 180 == 2 * direction(D, midpoint(B, C)) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on C, B, E, midpoint(B, C) we get 180 == 2 * direction(C, B) - 2 * direction(E, midpoint(B, C)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, C), B, D, midpoint(B, C) we get 180 == 2 * direction(midpoint(B, C), B) - 2 * direction(D, midpoint(B, C)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(B, C), B, midpoint(B, C) we get 180 == 2 * direction(E, midpoint(B, C)) - 2 * direction(B, midpoint(B, C)) mod 360
By perpendicular_direction_conditions_v0_r on B, C, midpoint(B, C), E we get 180 == 2 * direction(B, C) - 2 * direction(midpoint(B, C), E) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(B, C), B, C we get 180 == 2 * direction(E, midpoint(B, C)) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, C), B, midpoint(B, C), D we get 180 == 2 * direction(midpoint(B, C), B) - 2 * direction(midpoint(B, C), D) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(B, C), midpoint(B, C), D we get 180 == 2 * direction(B, midpoint(B, C)) - 2 * direction(midpoint(B, C), D) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(B, C), midpoint(B, C), D we get 180 == 2 * direction(C, midpoint(B, C)) - 2 * direction(midpoint(B, C), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, C), E, midpoint(B, C), B we get 180 == 2 * direction(midpoint(B, C), E) - 2 * direction(midpoint(B, C), B) mod 360
By perpendicular_direction_conditions_v0_r on B, C, midpoint(B, C), D we get 180 == 2 * direction(B, C) - 2 * direction(midpoint(B, C), D) mod 360
By perpendicular_direction_conditions_v0_r on C, B, D, midpoint(B, C) we get 180 == 2 * direction(C, B) - 2 * direction(D, midpoint(B, C)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(B, C), midpoint(B, C), B we get 180 == 2 * direction(E, midpoint(B, C)) - 2 * direction(midpoint(B, C), B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, C), E, C, B we get 180 == 2 * direction(midpoint(B, C), E) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, C), C, E, midpoint(B, C) we get 180 == 2 * direction(midpoint(B, C), C) - 2 * direction(E, midpoint(B, C)) mod 360
By perpendicular_direction_conditions_v0_r on B, C, D, midpoint(B, C) we get 180 == 2 * direction(B, C) - 2 * direction(D, midpoint(B, C)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, C), B, E, midpoint(B, C) we get 180 == 2 * direction(midpoint(B, C), B) - 2 * direction(E, midpoint(B, C)) mod 360
By altitude_definition on D, B, C, Line(D, F) we get Line(D, F) == altitude(D, B, C)
By not_in_line_equivalent_to_not_collinear_v0 on B, D, midpoint(B, C) we get not_collinear(B, D, midpoint(B, C)), exists(Line(D, midpoint(B, C)))
By line_inequality on Line(D, center(d)), Line(A, C), D we get Line(A, C) != Line(D, center(d))
By sas_anti_congruence on F, D, B, F, D, C we get anti_congruent_triangles(B, D, F, C, D, F)
By anti_congruence_from_anti_similar_triangles on F, D, C, F, D, B we get anti_congruent_triangles(B, D, F, C, D, F)
By anti_congruence_from_anti_similar_triangles on F, D, B, F, D, C we get anti_congruent_triangles(B, D, F, C, D, F)
By double_perpendicular_and_parallel_v0 on Line(D, F), Line(B, C), g we get parallel(g, Line(D, F))
By asa_anti_congruence on D, F, C, D, F, B we get anti_congruent_triangles(B, D, F, C, D, F)
By anti_congruence_from_anti_similar_triangles on B, D, F, C, D, F we get anti_congruent_triangles(B, D, F, C, D, F)
By asa_anti_congruence on D, F, B, D, F, C we get anti_congruent_triangles(B, D, F, C, D, F)
By internal_angle_bisector_definition_v0_r on B, F, C, D we get Line(D, F) == internal_angle_bisector(B, D, C)
By not_in_line_equivalent_to_not_collinear_v0 on F, B, midpoint(B, C) we get not_collinear(B, F, midpoint(B, C)), exists(Line(B, midpoint(B, C)))
By not_in_line_equivalent_to_not_collinear_v0 on A, B, midpoint(B, C) we get not_collinear(A, B, midpoint(B, C)), exists(Line(B, midpoint(B, C)))
By sas_anti_congruence on F, D, C, F, D, B we get anti_congruent_triangles(B, D, F, C, D, F)
By not_in_line_equivalent_to_not_collinear_v0 on F, midpoint(B, C), C we get not_collinear(C, F, midpoint(B, C)), exists(Line(C, midpoint(B, C)))
By asa_anti_congruence on C, D, F, B, D, F we get anti_congruent_triangles(B, D, F, C, D, F)
By reverse_direction on B, midpoint(B, C) we get 180 == direction(B, midpoint(B, C)) - direction(midpoint(B, C), B) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on A, midpoint(B, C), D we get not_collinear(A, D, midpoint(B, C)), exists(Line(D, midpoint(B, C)))
By reverse_direction on midpoint(B, C), B we get 180 == direction(midpoint(B, C), B) - direction(B, midpoint(B, C)) mod 360
By line_inequality on Line(A, center(d)), Line(C, F), A we get Line(C, F) != Line(A, center(d))
By anti_congruence_from_anti_similar_triangles on D, B, F, D, C, F we get anti_congruent_triangles(B, D, F, C, D, F)
By anti_congruence_from_anti_similar_triangles on D, C, F, D, B, F we get anti_congruent_triangles(B, D, F, C, D, F)
By anti_congruence_from_anti_similar_triangles on C, D, F, B, D, F we get anti_congruent_triangles(B, D, F, C, D, F)
By asa_anti_congruence on D, B, F, D, C, F we get anti_congruent_triangles(B, D, F, C, D, F)
By anti_congruence_from_anti_similar_triangles on D, F, C, D, F, B we get anti_congruent_triangles(B, D, F, C, D, F)
By asa_anti_congruence on F, D, C, F, D, B we get anti_congruent_triangles(B, D, F, C, D, F)
By not_in_line_equivalent_to_not_collinear_v0 on A, midpoint(B, C), E we get not_collinear(A, E, midpoint(B, C)), exists(Line(E, midpoint(B, C)))
By anti_congruence_from_anti_similar_triangles on D, F, B, D, F, C we get anti_congruent_triangles(B, D, F, C, D, F)
By sas_anti_congruence on C, D, F, B, D, F we get anti_congruent_triangles(B, D, F, C, D, F)
By line_circle_intersection_has_at_most_two_points_0 on E, D, midpoint(B, C), Circle(B, D, E) we get midpoint(B, C) not in Circle(B, D, E)
By asa_anti_congruence on F, D, B, F, D, C we get anti_congruent_triangles(B, D, F, C, D, F)
By not_in_line_equivalent_to_not_collinear_v0 on E, midpoint(B, C), B we get not_collinear(B, E, midpoint(B, C)), exists(Line(B, midpoint(B, C)))
By reverse_direction on midpoint(B, C), C we get 180 == direction(midpoint(B, C), C) - direction(C, midpoint(B, C)) mod 360
By asa_anti_congruence on D, C, F, D, B, F we get anti_congruent_triangles(B, D, F, C, D, F)
By asa_anti_congruence on B, D, F, C, D, F we get anti_congruent_triangles(B, D, F, C, D, F)
By line_inequality on Line(F, center(d)), Line(C, D), F we get Line(C, D) != Line(F, center(d))
By not_in_line_equivalent_to_not_collinear_v0 on C, midpoint(B, C), D we get not_collinear(C, D, midpoint(B, C)), exists(Line(D, midpoint(B, C)))
By reverse_direction on C, midpoint(B, C) we get 180 == direction(C, midpoint(B, C)) - direction(midpoint(B, C), C) mod 360
By sas_anti_congruence on B, D, F, C, D, F we get anti_congruent_triangles(B, D, F, C, D, F)
By line_inequality on Line(A, center(d)), g, A we get g != Line(A, center(d))
By line_inequality on Line(A, center(d)), Line(C, E), A we get Line(C, E) != Line(A, center(d))
By line_inequality on Line(D, center(d)), Line(B, E), D we get Line(B, E) != Line(D, center(d))
By line_inequality on Line(F, center(d)), Line(A, C), F we get Line(A, C) != Line(F, center(d))
By line_inequality on Line(F, center(d)), Line(B, E), F we get Line(B, E) != Line(F, center(d))
By not_in_line_equivalent_to_not_collinear_v0 on A, midpoint(B, C), C we get not_collinear(A, C, midpoint(B, C)), exists(Line(C, midpoint(B, C)))
By not_in_line_equivalent_to_not_collinear_v0 on C, midpoint(B, C), E we get not_collinear(C, E, midpoint(B, C)), exists(Line(E, midpoint(B, C)))
By line_inequality on Line(D, center(d)), f, D we get f != Line(D, center(d))
By line_circle_intersection_has_at_most_two_points_0 on D, E, midpoint(B, C), Circle(C, D, E) we get midpoint(B, C) not in Circle(C, D, E)
By line_containment_inequality on midpoint(B, C), F, Line(B, C) we get F != midpoint(B, C)
By line_inequality on Line(A, center(d)), Line(C, D), A we get Line(C, D) != Line(A, center(d))
By line_inequality on Line(A, center(d)), Line(B, C), A we get Line(B, C) != Line(A, center(d))
By line_inequality on Line(F, center(d)), Line(A, D), F we get Line(A, D) != Line(F, center(d))
By line_inequality on Line(C, center(d)), f, C we get f != Line(C, center(d))
By line_inequality on Line(A, center(d)), Line(B, E), A we get Line(B, E) != Line(A, center(d))
By line_inequality on Line(C, center(d)), Line(A, D), C we get Line(A, D) != Line(C, center(d))
By line_inequality on Line(A, center(d)), Line(B, D), A we get Line(B, D) != Line(A, center(d))
By line_inequality on Line(D, center(d)), Line(C, F), D we get Line(C, F) != Line(D, center(d))
By line_inequality on Line(A, center(d)), Line(D, F), A we get Line(D, F) != Line(A, center(d))
By line_inequality on Line(C, center(d)), Line(B, D), C we get Line(B, D) != Line(C, center(d))
By line_inequality on Line(C, center(d)), Line(B, E), C we get Line(B, E) != Line(C, center(d))
By line_inequality on Line(F, center(d)), Line(B, D), F we get Line(B, D) != Line(F, center(d))
By line_inequality on Line(C, center(d)), g, C we get g != Line(C, center(d))
By line_inequality on Line(F, center(d)), Line(B, C), F we get Line(B, C) != Line(F, center(d))
By line_inequality on Line(D, center(d)), Line(B, C), D we get Line(B, C) != Line(D, center(d))
By line_inequality on Line(F, center(d)), Line(C, E), F we get Line(C, E) != Line(F, center(d))
By line_inequality on Line(D, center(d)), Line(C, E), D we get Line(C, E) != Line(D, center(d))
By line_inequality on Line(C, center(d)), Line(D, F), C we get Line(D, F) != Line(C, center(d))
By power_of_a_point_on_circle on D, Circle(B, D, E) we get 0 == power_of_a_point(D, Circle(B, D, E))
By internal_angle_bisector_definition_v0 on C, midpoint(B, C), B, E we get angle(C, E, midpoint(B, C)) == angle(midpoint(B, C), E, B) mod 360
By draw_point_of_tangency on Line(B, D), Circle(C, D, E) we get exists(line_circle_tangent_point(Line(B, D), Circle(C, D, E)))
By internal_angle_bisector_definition_v0 on C, E, B, midpoint(B, C) we get angle(C, midpoint(B, C), E) == angle(E, midpoint(B, C), B) mod 360
By perpendicular_angle_conditions_v0 on C, midpoint(B, C), D we get angle(C, midpoint(B, C), D) == orientation(C, midpoint(B, C), D) mod 360
By internal_angle_bisector_definition_v0_r on B, midpoint(B, C), B, C we get Line(C, midpoint(B, C)) == internal_angle_bisector(B, C, B)
By perpendicular_angle_conditions_v0 on D, midpoint(B, C), B we get angle(D, midpoint(B, C), B) == orientation(B, D, midpoint(B, C)) mod 360
By internal_angle_bisector_definition_v0 on B, E, C, midpoint(B, C) we get angle(B, midpoint(B, C), E) == angle(E, midpoint(B, C), C) mod 360
By perpendicular_angle_conditions_v0 on E, midpoint(B, C), B we get angle(E, midpoint(B, C), B) == orientation(B, E, midpoint(B, C)) mod 360
By collinear_definition on D, midpoint(B, C), E we get midpoint(B, C) in Line(D, E), E in Line(D, midpoint(B, C)), Line(D, E) == Line(D, midpoint(B, C)), 0 == 2 * angle(midpoint(B, C), D, E) mod 360
By power_of_a_point_on_circle on C, Circle(C, D, E) we get 0 == power_of_a_point(C, Circle(C, D, E))
By internal_angle_bisector_definition_v0_r on A, D, C, center(d) we get Line(D, center(d)) == internal_angle_bisector(A, center(d), C)
By internal_angle_bisector_definition_v0 on C, D, B, midpoint(B, C) we get angle(C, midpoint(B, C), D) == angle(D, midpoint(B, C), B) mod 360
By internal_angle_bisector_definition_v0 on B, midpoint(B, C), C, D we get angle(B, D, midpoint(B, C)) == angle(midpoint(B, C), D, C) mod 360
By perpendicular_angle_conditions_v0 on D, midpoint(B, C), C we get angle(D, midpoint(B, C), C) == orientation(C, D, midpoint(B, C)) mod 360
By power_of_a_point_in_circle on E, Circle(B, D, E) we get 0 == power_of_a_point(E, Circle(B, D, E))
By perpendicular_lines_draw_intersection on Line(D, F), Line(B, C) we get exists(line_intersection(Line(B, C), Line(D, F)))
By power_of_a_point_in_circle on D, Circle(C, D, E) we get 0 == power_of_a_point(D, Circle(C, D, E))
By internal_angle_bisector_definition_v0_r on C, B, C, midpoint(B, C) we get Line(B, midpoint(B, C)) == internal_angle_bisector(C, midpoint(B, C), C)
By power_of_a_point_in_circle on E, Circle(C, D, E) we get 0 == power_of_a_point(E, Circle(C, D, E))
By reverse_direction on center(d), D we get 180 == direction(center(d), D) - direction(D, center(d)) mod 360
By collinear_definition on D, E, midpoint(B, C) we get E in Line(D, midpoint(B, C)), midpoint(B, C) in Line(D, E), Line(D, E) == Line(D, midpoint(B, C)), 0 == 2 * angle(E, D, midpoint(B, C)) mod 360
By power_of_a_point_on_circle on B, Circle(B, D, E) we get 0 == power_of_a_point(B, Circle(B, D, E))
By internal_angle_bisector_definition_v0_r on B, C, B, midpoint(B, C) we get Line(C, midpoint(B, C)) == internal_angle_bisector(B, midpoint(B, C), B)
By internal_angle_bisector_definition_v0_r on midpoint(B, C), B, midpoint(B, C), C we get Line(B, C) == internal_angle_bisector(midpoint(B, C), C, midpoint(B, C))
By draw_point_of_tangency on Line(C, D), Circle(B, D, E) we get exists(line_circle_tangent_point(Line(C, D), Circle(B, D, E)))
By collinear_definition on E, D, midpoint(B, C) we get D in Line(E, midpoint(B, C)), midpoint(B, C) in Line(D, E), Line(D, E) == Line(E, midpoint(B, C)), 0 == 2 * angle(D, E, midpoint(B, C)) mod 360
By perpendicular_angle_conditions_v0 on C, midpoint(B, C), E we get angle(C, midpoint(B, C), E) == orientation(C, midpoint(B, C), E) mod 360
By internal_angle_bisector_definition_v0 on B, D, C, midpoint(B, C) we get angle(B, midpoint(B, C), D) == angle(D, midpoint(B, C), C) mod 360
By reverse_direction on center(d), F we get 180 == direction(center(d), F) - direction(F, center(d)) mod 360
By perpendicular_angle_conditions_v0 on B, midpoint(B, C), E we get angle(B, midpoint(B, C), E) == orientation(B, midpoint(B, C), E) mod 360
By perpendicular_angle_conditions_v0 on B, midpoint(B, C), D we get angle(B, midpoint(B, C), D) == orientation(B, midpoint(B, C), D) mod 360
By collinear_definition on E, midpoint(B, C), D we get midpoint(B, C) in Line(D, E), D in Line(E, midpoint(B, C)), Line(D, E) == Line(E, midpoint(B, C)), 0 == 2 * angle(midpoint(B, C), E, D) mod 360
By reverse_direction on center(d), C we get 180 == direction(center(d), C) - direction(C, center(d)) mod 360
By reverse_direction on center(d), A we get 180 == direction(center(d), A) - direction(A, center(d)) mod 360
By perpendicular_angle_conditions_v0 on E, midpoint(B, C), C we get angle(E, midpoint(B, C), C) == orientation(C, E, midpoint(B, C)) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(B, C), C, midpoint(B, C), B we get Line(B, C) == internal_angle_bisector(midpoint(B, C), B, midpoint(B, C))
By internal_angle_bisector_definition_v0 on C, midpoint(B, C), B, D we get angle(C, D, midpoint(B, C)) == angle(midpoint(B, C), D, B) mod 360
By internal_angle_bisector_definition_v0_r on C, midpoint(B, C), C, B we get Line(B, midpoint(B, C)) == internal_angle_bisector(C, B, C)
By internal_angle_bisector_definition_v0 on B, midpoint(B, C), C, E we get angle(B, E, midpoint(B, C)) == angle(midpoint(B, C), E, C) mod 360
By anti_similar_triangle_basic_properties on B, D, F, C, D, F we get not_collinear(B, D, F), not_collinear(C, D, F), angle(B, D, F) == 0 - angle(C, D, F) mod 360, angle(D, F, B) == 0 - angle(D, F, C) mod 360, angle(F, B, D) == 0 - angle(F, C, D) mod 360, log(distance(B, D)) + log(distance(D, F)) == log(distance(C, D)) + log(distance(D, F)), log(distance(D, F)) + log(distance(B, F)) == log(distance(D, F)) + log(distance(C, F)), log(distance(B, F)) + log(distance(C, D)) == log(distance(C, F)) + log(distance(B, D))
By isosceles_triangle_properties on center(d), A, D we get distance(A, center(d)) == distance(D, center(d)), angle(A, D, center(d)) == angle(center(d), A, D) mod 360
By isosceles_triangle_properties on center(d), A, C we get distance(A, center(d)) == distance(C, center(d)), angle(A, C, center(d)) == angle(center(d), A, C) mod 360
By collinear_definition on midpoint(B, C), D, E we get D in Line(E, midpoint(B, C)), E in Line(D, midpoint(B, C)), Line(D, midpoint(B, C)) == Line(E, midpoint(B, C)), 0 == 2 * angle(D, midpoint(B, C), E) mod 360
By radical_axis_definition_v0 on midpoint(B, C), c, e we get power_of_a_point(midpoint(B, C), c) == power_of_a_point(midpoint(B, C), e)
By anti_similar_triangle_basic_properties on F, D, C, F, D, B we get not_collinear(C, D, F), not_collinear(B, D, F), angle(F, D, C) == 0 - angle(F, D, B) mod 360, angle(D, C, F) == 0 - angle(D, B, F) mod 360, angle(C, F, D) == 0 - angle(B, F, D) mod 360, log(distance(D, F)) + log(distance(B, D)) == log(distance(D, F)) + log(distance(C, D)), log(distance(B, D)) + log(distance(C, F)) == log(distance(C, D)) + log(distance(B, F)), log(distance(B, F)) + log(distance(D, F)) == log(distance(C, F)) + log(distance(D, F))
By isosceles_triangle_properties on center(d), D, C we get distance(C, center(d)) == distance(D, center(d)), angle(D, C, center(d)) == angle(center(d), D, C) mod 360
By altitude_definition on C, D, F, Line(B, C) we get Line(B, C) == altitude(C, D, F)
By power_of_a_point_definition on midpoint(B, C), B, C, c we get log(power_of_a_point(midpoint(B, C), c)) == log(distance(B, midpoint(B, C))) + log(distance(C, midpoint(B, C)))
By isosceles_triangle_properties on center(d), C, F we get distance(C, center(d)) == distance(F, center(d)), angle(C, F, center(d)) == angle(center(d), C, F) mod 360
By power_of_a_point_tangent on B, D, Circle(C, D, E) we get 2 * log(distance(B, D)) == log(power_of_a_point(B, Circle(C, D, E)))
By isosceles_triangle_properties on center(d), C, D we get distance(C, center(d)) == distance(D, center(d)), angle(C, D, center(d)) == angle(center(d), C, D) mod 360
By isosceles_triangle_properties on center(d), A, F we get distance(A, center(d)) == distance(F, center(d)), angle(A, F, center(d)) == angle(center(d), A, F) mod 360
By altitude_definition on B, F, D, Line(B, C) we get Line(B, C) == altitude(B, D, F)
By isosceles_triangle_properties on center(d), F, C we get distance(C, center(d)) == distance(F, center(d)), angle(F, C, center(d)) == angle(center(d), F, C) mod 360
By isosceles_triangle_properties on center(d), F, D we get distance(D, center(d)) == distance(F, center(d)), angle(F, D, center(d)) == angle(center(d), F, D) mod 360
By isosceles_triangle_properties on center(d), D, A we get distance(A, center(d)) == distance(D, center(d)), angle(D, A, center(d)) == angle(center(d), D, A) mod 360
By collinear_definition on midpoint(B, C), E, D we get E in Line(D, midpoint(B, C)), D in Line(E, midpoint(B, C)), Line(D, midpoint(B, C)) == Line(E, midpoint(B, C)), 0 == 2 * angle(E, midpoint(B, C), D) mod 360
By altitude_definition on F, C, B, Line(D, F) we get Line(D, F) == altitude(F, B, C)
By isosceles_triangle_properties on center(d), F, A we get distance(A, center(d)) == distance(F, center(d)), angle(F, A, center(d)) == angle(center(d), F, A) mod 360
By isosceles_triangle_properties on center(d), D, F we get distance(D, center(d)) == distance(F, center(d)), angle(D, F, center(d)) == angle(center(d), D, F) mod 360
By power_of_a_point_definition on midpoint(B, C), B, C, e we get log(power_of_a_point(midpoint(B, C), e)) == log(distance(B, midpoint(B, C))) + log(distance(C, midpoint(B, C)))
By isosceles_triangle_properties on center(d), C, A we get distance(A, center(d)) == distance(C, center(d)), angle(C, A, center(d)) == angle(center(d), C, A) mod 360
By power_of_a_point_tangent on C, D, Circle(B, D, E) we get 2 * log(distance(C, D)) == log(power_of_a_point(C, Circle(B, D, E)))
By perpendicular_bisector_sufficient_conditions on A, C, D, center(d) we get Line(D, center(d)) == perpendicular_bisector(A, C)
