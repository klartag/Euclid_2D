Assumptions:
A, B, C, D, E, F, G, H: Point
f, g, h, i, j, k, l: Line
c: Circle
distinct(A, B, C, D, E, F, G, H)
distinct(f, g, h, i, j, k, l)
f == Line(A, B)
g == Line(B, C)
h == parallel_line(C, f)
i == parallel_line(A, g)
D == line_intersection(h, i)
j == Line(A, C)
k == parallel_line(B, j)
E == midpoint(B, D)
c == Circle(A, D, E)
F == projection(E, k)
l == Line(E, F)
G == center(c)
H in l, c

Embedding:
C := {"x": "-0.66209115528130590977440306232892908155918121337890625", "y": "-1.0194900692883577253411431229324080049991607666015625"}
B := {"x": "0.716837000287208869764299379312433302402496337890625", "y": "0.8910364901801319792440381206688471138477325439453125"}
g := {"point": {"x": "0.716837000287208869764299379312433302402496337890625", "y": "0.8910364901801319792440381206688471138477325439453125"}, "direction": {"x": "-1.37892815556851477953870244164136238396167755126953125", "y": "-1.910526559468489704585181243601255118846893310546875"}}
A := {"x": "0.30333407217820596013524436784791760146617889404296875", "y": "1.1499808503958452998716666115797124803066253662109375"}
i := {"point": {"x": "0.30333407217820596013524436784791760146617889404296875", "y": "1.1499808503958452998716666115797124803066253662109375"}, "direction": {"x": "-1.37892815556851477953870244164136238396167755126953125", "y": "-1.910526559468489704585181243601255118846893310546875"}}
f := {"point": {"x": "0.30333407217820596013524436784791760146617889404296875", "y": "1.1499808503958452998716666115797124803066253662109375"}, "direction": {"x": "0.41350292810900290962905501146451570093631744384765625", "y": "-0.258944360215713320627628490910865366458892822265625"}}
h := {"point": {"x": "-0.66209115528130590977440306232892908155918121337890625", "y": "-1.0194900692883577253411431229324080049991607666015625"}, "direction": {"x": "0.41350292810900290962905501146451570093631744384765625", "y": "-0.258944360215713320627628490910865366458892822265625"}}
D := {"x": "-1.0755940833903088194034580737934447824954986572265625", "y": "-0.7605457090726444047135146320215426385402679443359375"}
E := {"x": "-0.17937854155154997481957934724050574004650115966796875", "y": "0.0652453905537437872652617443236522376537322998046875"}
c := {"center": {"x": "-2.5986326001022852474149162990982149002696164317018524827204510619149232584080657866468824637787259265151303386892803630932496438200913172666888364508367165921371754874981640325165804609539113965768380253810639764811433306667116472845579466474619793777949810078898624450527925555279645751794278858249288101594851276988187573690537067089392609538722970206269130404445204331756573978546894215655866665726252187880389576854038966585623618913262672515962016640678897186465928431518294706130374005934597859957659259848982789985796610663266625332147210176977731637857201353906842810081230090299019252951084455086450152342716302457993902153873191905387494388201189326704591416602826310162452778053006876540108567580658991902879031744838319927852243165289750567494862815895144460492997638859663456149632154550657545469325711311442452167711323179955858505369752519695656203101359917974077091609150317149474213492641674814611865579885044216372683839241284203455725945757376423329935423121033061489795010713129284357009310201588183080814250377966780173763614758819587868648051621187020541481641899058666292978248504804198295943341731843580086296604882580496380405553596260400619114813172819933284320203038802122789051529088816015415901723885838877787281243840572227734972721605776345384659326453760919235231950461778866102687906952813230356530351701421827317074153472263593331448634408747013512727095774615814868970958735146499871953289638878514359895661666833964654906774651322202393398117745109293733186900150598842234095908522649421927031906125167022586494662990707060014637481752561309459887912355352884980818659164957787093008016537815840555565922786424576705527809163038545051135641734268171134663337104826240286696882062969516320910881216158287554327669003609697894995326401178697585420385593776432483116311394537549681079360665062660503185271216170565473005865876529354403938107965408172272163890488737059237928960552599938745341011711854197045228038192417219810578670958997490952500862937894866850329019", "y": "1.7915978164237967965830305110735206790514263173841850261467349478105945894049328682124643088306481940368663166598196775564750566232691219008105216327374373811305907787557843057098251544870429492174076199885194539260540847813552076279968524367389649031233081563697689845712869776659348660876499527131566056361422857007137316364299243268655870451264818401719724728466241617885624831727344449233545184487904013837999447091566443780068922591693008505418808933652274049614488563630084725417840252572130678931006314370833191746523487561542223330252626708053431121586805014263053644641213059434059959836195296462122324422126341129596457637455167114036112556235887499223761305867906030138034767754177317721249495540735443185099573473561553910726412626032883932748327048476418683741955761804775172804164360094580923527804140411074795687150853726458055231132624332250787187507933107181110008939982047343695415659511133531009742294294402708366761331240458817655123445079874871607239550287020372533816425337031580066064317274944627721275057514264259897889442174012431242948351703201686782923946271111883745358657024279643493170480607351093301612927681771666344941658988904223504948935881682179527041488821705938018912108988173515927606179400080038608032774542952510758648978711476224804102293497991058057986672260104653186343836862831813090283854909601559065956603636324076154254603208791969465349681480134934146854036449499966728064248745218185765463378233938147511119828888056059127754572886541496410656514499226273008747125534805639264005846415405314239340683990488844137512570919929236344623226613268890760258659569545731136013713137164952556466578372492132176557256460447327531541451938165655976191529250838114648051922624241140614300497759973563755189560210700561482716955904038771770599339289405773241556304724168002808415700674574321070523820056832395863181390742119472299914580803685104874982811058141282953895203314783652563503384089951075557383713085062604223626880860828124958245359927085938105365602"}, "radius_squared": "8.8330828981216213213088672169575820784181466981103168776852067493095659564370651676551170156668938316583223997616015044557895160367379527198170279872842254904065564283376218327930449084076393733626760754748180578559094165034585007100469390783806664395102750622671123154340455533529326688358043394977265059791367049308006670544878270351589348455339328055833247688166620942540818998109168234030784540234454009067412531354689907324277625181581786773529592067819570270537841189300084802598114165568230080301234164150477109708439401441340956189900683325081718582436416434667504849305660808647803322661104750684417444745051432974270094541377593082536992767649203095790262696207957326952075192560716699929019291124446068402337555168350530350067098049795532527579814001467408045657167090025031544200122582743814052963699175354277924213291585920626643367962075156039043098237595143043342069392252172911050609681586144176432266430847158862812099264697067378558819689596737106024834183601457159555911557130700623489979609535575818732708964805338853449031404389088110946263634320774712092663747197000564669203383564147608750040181772740952714589305377658207950346877193165748342661281443508962119795800348849641673260331261855446521356738381794177397625047628325520213840405675812439793859579126921928158746942362678917078139668335988036711268800001090587028329950293729786672803049255720414769888319625198775874088204619947273370700384247180858400471403739048420707084786182607190263748541026844630279237614303405971977544927024539040087087141358480351868647920787323233902185482248545728856210451381645894155994711761824903090821907160323166983674842173160341018866298168892417203761484168154051879325759917281294894567947913967298012332574446724416632394468360961667772951927340291935745928693195183592134400712491182419648534042209021000278329166078600211387486327503774316306778759881149366200166594320171571956559397172302101598789298016311470024220048087823975426490449539700170183009576918268616844532915"}
j := {"point": {"x": "0.30333407217820596013524436784791760146617889404296875", "y": "1.1499808503958452998716666115797124803066253662109375"}, "direction": {"x": "-0.965425227459511869909647430176846683025360107421875", "y": "-2.1694709196842030252128097345121204853057861328125"}}
k := {"point": {"x": "0.716837000287208869764299379312433302402496337890625", "y": "0.8910364901801319792440381206688471138477325439453125"}, "direction": {"x": "-0.965425227459511869909647430176846683025360107421875", "y": "-2.1694709196842030252128097345121204853057861328125"}}
F := {"x": "0.26195825043553733026001959297735491681537564465260489327842269797651000072756786270607728033655972399019117269106541798974517850984398125046134103124126682617430226578479304534681592331210401511552482470477651711530806048790640053814262381255030773021851544592339211637772251211639325154873713510417476448431490960229174271416990370470724948587138678965517811656534370541174350532162152602836994932696477662288680325971853571285963470214387164085254400262024792038188257755546039825278771383525223060651063666041451047135328410260624891878535059431372723296569917573508732304955510650350031477902058302618869217062554218737856804321125163826748753294636097647865906814878499945048904852368144673311108942984255126812127937902883682607041137441706409545021026483739366098475494055088293138897868963771929555671413129431933705899729496914006651660123553522848298741080221413326353509318354858734312007038517214590137663431485845866913072289049693801175958171007270938046210657731241046914739230209214131237763527611442309392073136826271791946130010544141291159898250670157604197069071901928957389524641077841885348891481928135088477429269672902790778857931678333651286797027542247085176484043396014491363733764476125925678578082831888108773968972516154901418833810819506679910113955981273783811068216201745945096818891449156925900605126348437007244275967853817434497648940483313710490790870683587480055427108203235152923664717363778880579955098646899322968031207285724259054776621976837634103730973891296763841690425764666533755079065502313657970250909614886185050687059306404222193046062051985089018147910979045208456661988599523884322669115978125965973096359328766763576764642626305070742147827387002124919423334496506466021440365626713342636459578596547611475447965740320512095766871537024126089870016457087957146125973088586105669873775958334079360782496858858049062751657658004884613818955998761438707386308627863565987003252219848906971629303154872217687668194627088849319334785342394743050320213", "y": "-0.13115165211894925305186259157258289929921818915391602874976752148384150294360709459391824908538937454768959458967981946385109465808915683906681016966875906736274658731919791143963600517161028392152671352814935614782875291068730375238615827153469180190369952008586752782525364342905281642298424367262500011673375482369306689802373786341504221871638783227394007144182380397577154358325189731986190793446335304929408132730920641909945988761431365709023984248784582199817981320759912430192805680444947580682552228395087319146647093528805304208265529527402795448962291553196368541887642209207312060870986218081466445846345820568702244353507067700824135259157220176683479572895771228308061373645025233956571122601740228623433548647729879715035831675186309620786267886965239982647702418157573211490273919757775267996442139527087258903415099451075171811938923499646323610390902000395568284085814400336335775260350762939327807051609133381941804560340474789575138129742377807646898354746551799405771864645468767043049124303448701848057290996484078143745286289648520790513487036466501545624028412835752141676031469708639554007141573149619185338043056313826034203613535831150681783274775882206175183485298182884944270320797116730392854125953218345136096974943822617914466120976391535843860050932686223725006886803786097874733177861718704047761236091080061713176947841881410564072487959297491909128472397782795767170918088802154566223868612655616040053627159947110011161316644777725731618719818273389016054417631949615625423800262970842326610846735145634276306351579222326138682524912237135677522142436023676815927541756386828842260102864336719249335604045222533093948665257726410712582685180474379962426962863510099494455519301138608961643925015427798698792270283001335333062299358867426465718852871661728761641921232440203222250000356078014496814276109190645859986224169511811603612855269624191579547725355828313434209519629990638427264146032040859040901772762285145146854631067900030965747651856867040891967999"}
l := {"point": {"x": "-0.17937854155154997481957934724050574004650115966796875", "y": "0.0652453905537437872652617443236522376537322998046875"}, "direction": {"x": "0.44133679198708730507959894021786065686187680432057364327842269797651000072756786270607728033655972399019117269106541798974517850984398125046134103124126682617430226578479304534681592331210401511552482470477651711530806048790640053814262381255030773021851544592339211637772251211639325154873713510417476448431490960229174271416990370470724948587138678965517811656534370541174350532162152602836994932696477662288680325971853571285963470214387164085254400262024792038188257755546039825278771383525223060651063666041451047135328410260624891878535059431372723296569917573508732304955510650350031477902058302618869217062554218737856804321125163826748753294636097647865906814878499945048904852368144673311108942984255126812127937902883682607041137441706409545021026483739366098475494055088293138897868963771929555671413129431933705899729496914006651660123553522848298741080221413326353509318354858734312007038517214590137663431485845866913072289049693801175958171007270938046210657731241046914739230209214131237763527611442309392073136826271791946130010544141291159898250670157604197069071901928957389524641077841885348891481928135088477429269672902790778857931678333651286797027542247085176484043396014491363733764476125925678578082831888108773968972516154901418833810819506679910113955981273783811068216201745945096818891449156925900605126348437007244275967853817434497648940483313710490790870683587480055427108203235152923664717363778880579955098646899322968031207285724259054776621976837634103730973891296763841690425764666533755079065502313657970250909614886185050687059306404222193046062051985089018147910979045208456661988599523884322669115978125965973096359328766763576764642626305070742147827387002124919423334496506466021440365626713342636459578596547611475447965740320512095766871537024126089870016457087957146125973088586105669873775958334079360782496858858049062751657658004884613818955998761438707386308627863565987003252219848906971629303154872217687668194627088849319334785342394743050320213", "y": "-0.19639704267269304031712433589623513695295048895860352874976752148384150294360709459391824908538937454768959458967981946385109465808915683906681016966875906736274658731919791143963600517161028392152671352814935614782875291068730375238615827153469180190369952008586752782525364342905281642298424367262500011673375482369306689802373786341504221871638783227394007144182380397577154358325189731986190793446335304929408132730920641909945988761431365709023984248784582199817981320759912430192805680444947580682552228395087319146647093528805304208265529527402795448962291553196368541887642209207312060870986218081466445846345820568702244353507067700824135259157220176683479572895771228308061373645025233956571122601740228623433548647729879715035831675186309620786267886965239982647702418157573211490273919757775267996442139527087258903415099451075171811938923499646323610390902000395568284085814400336335775260350762939327807051609133381941804560340474789575138129742377807646898354746551799405771864645468767043049124303448701848057290996484078143745286289648520790513487036466501545624028412835752141676031469708639554007141573149619185338043056313826034203613535831150681783274775882206175183485298182884944270320797116730392854125953218345136096974943822617914466120976391535843860050932686223725006886803786097874733177861718704047761236091080061713176947841881410564072487959297491909128472397782795767170918088802154566223868612655616040053627159947110011161316644777725731618719818273389016054417631949615625423800262970842326610846735145634276306351579222326138682524912237135677522142436023676815927541756386828842260102864336719249335604045222533093948665257726410712582685180474379962426962863510099494455519301138608961643925015427798698792270283001335333062299358867426465718852871661728761641921232440203222250000356078014496814276109190645859986224169511811603612855269624191579547725355828313434209519629990638427264146032040859040901772762285145146854631067900030965747651856867040891967999"}}
H := {"x": "-5.5005992723827764549650769660443474020054117574466737154409021238298465168161315732937649275574518530302606773785607261864992876401826345333776729016734331842743509749963280650331609219078227931536760507621279529622866613334232945691158932949239587555899620157797248901055851110559291503588557716498576203189702553976375147381074134178785219077445940412538260808890408663513147957093788431311733331452504375760779153708077933171247237826525345031924033281357794372931856863036589412260748011869195719915318519697965579971593221326533250664294420353955463275714402707813685620162460180598038505902168910172900304685432604915987804307746383810774988776402378653409182833205652620324905556106013753080217135161317983805758063489676639855704486330579501134989725631790288920985995277719326912299264309101315090938651422622884904335422646359911717010739505039391312406202719835948154183218300634298948426985283349629223731159770088432745367678482568406911451891514752846659870846242066122979590021426258568714018620403176366161628500755933560347527229517639175737296103242374041082963283798117332585956497009608396591886683463687160172593209765160992760811107192520801238229626345639866568640406077604245578103058177632030831803447771677755574562487681144455469945443211552690769318652907521838470463900923557732205375813905626460713060703402843654634148306944527186662897268817494027025454191549231629737941917470292999743906579277757028719791323333667929309813549302644404786796235490218587466373800301197684468191817045298843854063812250334045172989325981414120029274963505122618919775824710705769961637318329915574186016033075631681111131845572849153411055618326077090102271283468536342269326674209652480573393764125939032641821762432316575108655338007219395789990652802357395170840771187552864966232622789075099362158721330125321006370542432341130946011731753058708807876215930816344544327780977474118475857921105199877490682023423708394090456076384834439621157341917994981905001725875789733700658037", "y": "2.4332147824517482932943944105673288777962272685574325522934698956211891788098657364249286176612963880737326333196393551129501132465382438016210432654748747622611815575115686114196503089740858984348152399770389078521081695627104152559937048734779298062466163127395379691425739553318697321752999054263132112722845714014274632728598486537311740902529636803439449456932483235771249663454688898467090368975808027675998894183132887560137845183386017010837617867304548099228977127260169450835680505144261357862012628741666383493046975123084446660505253416106862243173610028526107289282426118868119919672390592924244648844252682259192915274910334228072225112471774998447522611735812060276069535508354635442498991081470886370199146947123107821452825252065767865496654096952837367483911523609550345608328720189161847055608280822149591374301707452916110462265248664501574375015866214362220017879964094687390831319022267062019484588588805416733522662480917635310246890159749743214479100574040745067632850674063160132128634549889255442550115028528519795778884348024862485896703406403373565847892542223767490717314048559286986340961214702186603225855363543332689883317977808447009897871763364359054082977643411876037824217976347031855212358800160077216065549085905021517297957422952449608204586995982116115973344520209306372687673725663626180567709819203118131913207272648152308509206417583938930699362960269868293708072898999933456128497490436371530926756467876295022239657776112118255509145773082992821313028998452546017494251069611278528011692830810628478681367980977688275025141839858472689246453226537781520517319139091462272027426274329905112933156744984264353114512920894655063082903876331311952383058501676229296103845248482281228600995519947127510379120421401122965433911808077543541198678578811546483112609448336005616831401349148642141047640113664791726362781484238944599829161607370209749965622116282565907790406629567305127006768179902151114767426170125208447253761721656249916490719854171876210731204"}
G := {"x": "-2.5986326001022852474149162990982149002696164317018524827204510619149232584080657866468824637787259265151303386892803630932496438200913172666888364508367165921371754874981640325165804609539113965768380253810639764811433306667116472845579466474619793777949810078898624450527925555279645751794278858249288101594851276988187573690537067089392609538722970206269130404445204331756573978546894215655866665726252187880389576854038966585623618913262672515962016640678897186465928431518294706130374005934597859957659259848982789985796610663266625332147210176977731637857201353906842810081230090299019252951084455086450152342716302457993902153873191905387494388201189326704591416602826310162452778053006876540108567580658991902879031744838319927852243165289750567494862815895144460492997638859663456149632154550657545469325711311442452167711323179955858505369752519695656203101359917974077091609150317149474213492641674814611865579885044216372683839241284203455725945757376423329935423121033061489795010713129284357009310201588183080814250377966780173763614758819587868648051621187020541481641899058666292978248504804198295943341731843580086296604882580496380405553596260400619114813172819933284320203038802122789051529088816015415901723885838877787281243840572227734972721605776345384659326453760919235231950461778866102687906952813230356530351701421827317074153472263593331448634408747013512727095774615814868970958735146499871953289638878514359895661666833964654906774651322202393398117745109293733186900150598842234095908522649421927031906125167022586494662990707060014637481752561309459887912355352884980818659164957787093008016537815840555565922786424576705527809163038545051135641734268171134663337104826240286696882062969516320910881216158287554327669003609697894995326401178697585420385593776432483116311394537549681079360665062660503185271216170565473005865876529354403938107965408172272163890488737059237928960552599938745341011711854197045228038192417219810578670958997490952500862937894866850329019", "y": "1.7915978164237967965830305110735206790514263173841850261467349478105945894049328682124643088306481940368663166598196775564750566232691219008105216327374373811305907787557843057098251544870429492174076199885194539260540847813552076279968524367389649031233081563697689845712869776659348660876499527131566056361422857007137316364299243268655870451264818401719724728466241617885624831727344449233545184487904013837999447091566443780068922591693008505418808933652274049614488563630084725417840252572130678931006314370833191746523487561542223330252626708053431121586805014263053644641213059434059959836195296462122324422126341129596457637455167114036112556235887499223761305867906030138034767754177317721249495540735443185099573473561553910726412626032883932748327048476418683741955761804775172804164360094580923527804140411074795687150853726458055231132624332250787187507933107181110008939982047343695415659511133531009742294294402708366761331240458817655123445079874871607239550287020372533816425337031580066064317274944627721275057514264259897889442174012431242948351703201686782923946271111883745358657024279643493170480607351093301612927681771666344941658988904223504948935881682179527041488821705938018912108988173515927606179400080038608032774542952510758648978711476224804102293497991058057986672260104653186343836862831813090283854909601559065956603636324076154254603208791969465349681480134934146854036449499966728064248745218185765463378233938147511119828888056059127754572886541496410656514499226273008747125534805639264005846415405314239340683990488844137512570919929236344623226613268890760258659569545731136013713137164952556466578372492132176557256460447327531541451938165655976191529250838114648051922624241140614300497759973563755189560210700561482716955904038771770599339289405773241556304724168002808415700674574321070523820056832395863181390742119472299914580803685104874982811058141282953895203314783652563503384089951075557383713085062604223626880860828124958245359927085938105365602"}

Need to prove:
collinear(A, G, H)

Proof:
By line_definition on A, D, i we get i == Line(A, D)
By line_definition on B, F, k we get k == Line(B, F)
By line_definition on F, H, l we get l == Line(F, H)
By line_definition on E, F, perpendicular_line(E, k) we get Line(E, F) == perpendicular_line(E, k)
By line_definition on H, E, l we get l == Line(E, H)
By line_definition on D, C, h we get h == Line(C, D)
By line_intersection_definition on A, j, i we get A == line_intersection(i, j)
By line_intersection_definition on A, j, f we get A == line_intersection(f, j)
By line_intersection_definition on C, j, h we get C == line_intersection(h, j)
By median_definition on H, D, B, l we get l == median(H, B, D)
By perpendicular_line_definition on F, perpendicular_line(E, k), k we get perpendicular_line(E, k) == perpendicular_line(F, k)
By circle_definition on H, D, E, c we get c == Circle(D, E, H)
By circle_definition on H, D, A, c we get c == Circle(A, D, H)
By line_intersection_definition on C, g, j we get C == line_intersection(g, j)
By median_definition on F, B, D, perpendicular_line(E, k) we get median(F, B, D) == perpendicular_line(E, k)
By line_intersection_definition on B, f, g we get B == line_intersection(f, g)
By circle_definition on A, E, H, c we get c == Circle(A, E, H)
By line_intersection_definition on B, k, f we get B == line_intersection(f, k)
By line_intersection_definition on B, k, g we get B == line_intersection(g, k)
By median_definition on F, D, B, l we get l == median(F, B, D)
By line_intersection_definition on F, l, k we get F == line_intersection(k, l)
By line_intersection_definition on A, f, i we get A == line_intersection(f, i)
By perpendicular_line_definition on B, k, perpendicular_line(E, k) we get k == perpendicular_line(B, perpendicular_line(E, k))
By line_intersection_definition on C, h, g we get C == line_intersection(g, h)
By perpendicular_line_definition on F, k, perpendicular_line(E, k) we get k == perpendicular_line(F, perpendicular_line(E, k))
By line_uniqueness on F, E, perpendicular_line(E, k), l we get l == perpendicular_line(E, k)
By line_unique_intersection_v1 on i, j, A, C we get C not in i
By line_unique_intersection_v1 on i, f, A, B we get B not in i
By line_unique_intersection_v1 on f, i, A, D we get D not in f
By line_unique_intersection_v1 on f, j, A, C we get C not in f
By line_unique_intersection_v1 on j, g, C, B we get B not in j
By line_unique_intersection_v1 on k, l, F, E we get E not in k
By line_unique_intersection_v1 on k, f, B, A we get A not in k
By line_unique_intersection_v1 on g, j, C, A we get A not in g
By line_unique_intersection_v1 on h, i, D, A we get A not in h
By line_unique_intersection_v1 on g, k, B, F we get F not in g
By line_unique_intersection_v1 on g, h, C, D we get D not in g
By line_unique_intersection_v1 on l, k, F, B we get B not in l
By line_unique_intersection_v1 on k, g, B, C we get C not in k
By line_unique_intersection_v1 on j, i, A, D we get D not in j
By line_unique_intersection_v1 on h, g, C, B we get B not in h
By line_unique_intersection_v1 on f, k, B, F we get F not in f
By line_unique_intersection_v1 on k, l, F, H we get H not in k
By between_imply_not_between on D, E, B we get collinear_and_not_between(B, D, E)
By between_imply_not_between on B, E, D we get collinear_and_not_between(D, B, E)
By parallel_line_definition on D, i, g we get i == parallel_line(D, g)
By parallel_line_definition on A, j, k we get j == parallel_line(A, k)
By circle_radius_v0_r on A, c we get radius(c) == distance(A, center(c))
By circle_radius_v0_r on E, c we get radius(c) == distance(E, center(c))
By parallel_line_definition on F, k, j we get k == parallel_line(F, j)
By parallel_line_definition on A, f, h we get f == parallel_line(A, h)
By parallel_line_definition on C, j, k we get j == parallel_line(C, k)
By parallel_line_definition on B, g, i we get g == parallel_line(B, i)
By parallel_line_definition on B, f, h we get f == parallel_line(B, h)
By parallel_line_definition on D, h, f we get h == parallel_line(D, f)
By parallel_line_definition on C, g, i we get g == parallel_line(C, i)
By circle_radius_v0_r on D, c we get radius(c) == distance(D, center(c))
By circle_radius_v0_r on H, c we get radius(c) == distance(H, center(c))
By different_points_v1 on B, C we get 0 != distance(B, C)
By different_points_v1 on F, E we get 0 != distance(E, F)
By center_not_on_circle on c we get center(c) not in c
By different_points_v1 on A, C we get 0 != distance(A, C)
By different_points_v1 on B, A we get 0 != distance(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on F, B, C we get F not in Line(B, C)
By in_imply_collinear on H, E, F we get collinear(E, F, H)
By not_in_line_equivalent_to_not_collinear_v0_r on D, C, B we get D not in Line(B, C)
By in_imply_concyclic on A, D, E, H we get concyclic(A, D, E, H)
By not_in_line_equivalent_to_not_collinear_v0_r on B, C, A we get B not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on C, E, F we get C not in Line(E, F)
By not_in_line_equivalent_to_not_collinear_v0_r on F, B, A we get F not in Line(A, B)
By double_perpendicular_and_parallel_v0_r on k, perpendicular_line(E, k), j we get perpendicular(j, perpendicular_line(E, k))
By not_in_line_equivalent_to_not_collinear_v0_r on B, E, F we get B not in Line(E, F)
By not_in_line_equivalent_to_not_collinear_v0_r on A, E, F we get A not in Line(E, F)
By not_in_line_equivalent_to_not_collinear_v0_r on G, C, B we get G not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on G, A, C we get G not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on D, C, A we get D not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on D, B, A we get D not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on A, C, B we get A not in Line(B, C)
By line_circle_intersection_has_at_most_two_points_0 on D, E, B, c we get B not in c
By not_in_line_equivalent_to_not_collinear_v0_r on E, B, A we get E not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on D, E, F we get D not in Line(E, F)
By not_in_line_equivalent_to_not_collinear_v0_r on G, E, F we get G not in Line(E, F)
By not_in_line_equivalent_to_not_collinear_v0_r on H, A, C we get H not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on H, C, B we get H not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on G, A, B we get G not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on C, B, A we get C not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on H, A, B we get H not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on F, A, C we get F not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on E, C, B we get E not in Line(B, C)
By power_of_a_point_in_circle on E, c we get 0 == power_of_a_point(E, c)
By power_of_a_point_on_circle on H, c we get 0 == power_of_a_point(H, c)
By power_of_a_point_on_circle on D, c we get 0 == power_of_a_point(D, c)
By power_of_a_point_in_circle on A, c we get 0 == power_of_a_point(A, c)
By angles_on_chord_v1 on A, E, D, H, c we get angle(A, D, E) == angle(A, H, E) mod 360
By angles_on_chord_v1 on H, A, D, E, c we get angle(H, D, A) == angle(H, E, A) mod 360
By angles_on_chord_v0 on D, E, H, A, c we get angle(D, A, E) == angle(D, H, E) mod 360
By angles_on_chord_v2 on D, A, H, E, c we get angle(D, H, A) == angle(D, E, A) + 180 mod 360
By angle_to_center on A, H, D, c we get 2 * angle(A, H, D) == angle(A, center(c), D) mod 360
By angles_on_chord_v0 on A, H, E, D, c we get angle(A, D, H) == angle(A, E, H) mod 360
By angle_to_center on A, E, H, c we get 2 * angle(A, E, H) == angle(A, center(c), H) mod 360
By angle_to_center on H, D, E, c we get 2 * angle(H, D, E) == angle(H, center(c), E) mod 360
By angles_on_chord_v0 on H, D, E, A, c we get angle(H, A, D) == angle(H, E, D) mod 360
By angles_on_chord_v3 on A, D, H, E, c we get angle(A, H, D) == angle(A, E, D) + 180 mod 360
By angles_on_chord_v3 on H, E, D, A, c we get angle(H, D, E) == angle(H, A, E) + 180 mod 360
By angles_on_chord_v3 on E, H, A, D, c we get angle(E, A, H) == angle(E, D, H) + 180 mod 360
By angles_on_chord_v0 on E, A, D, H, c we get angle(E, D, A) == angle(E, H, A) mod 360
By angles_on_chord_v2 on A, D, E, H, c we get angle(A, E, D) == angle(A, H, D) + 180 mod 360
By same_angle_v1 on B, D, E, A we get angle(D, B, A) == angle(E, B, A) mod 360
By angles_on_chord_v2 on H, E, A, D, c we get angle(H, A, E) == angle(H, D, E) + 180 mod 360
By angles_on_chord_v1 on E, D, H, A, c we get angle(E, A, D) == angle(E, H, D) mod 360
By angle_to_center on E, A, D, c we get 2 * angle(E, A, D) == angle(E, center(c), D) mod 360
By angle_to_center on D, H, E, c we get 2 * angle(D, H, E) == angle(D, center(c), E) mod 360
By angles_on_chord_v2 on E, H, D, A, c we get angle(E, D, H) == angle(E, A, H) + 180 mod 360
By angles_on_chord_v3 on D, A, E, H, c we get angle(D, E, A) == angle(D, H, A) + 180 mod 360
By angle_to_center on E, H, A, c we get 2 * angle(E, H, A) == angle(E, center(c), A) mod 360
By angle_to_center on H, E, D, c we get 2 * angle(H, E, D) == angle(H, center(c), D) mod 360
By angle_to_center on H, A, E, c we get 2 * angle(H, A, E) == angle(H, center(c), E) mod 360
By angles_on_chord_v1 on D, H, E, A, c we get angle(D, A, H) == angle(D, E, H) mod 360
By angle_to_center on H, E, A, c we get 2 * angle(H, E, A) == angle(H, center(c), A) mod 360
By angle_to_center on D, E, A, c we get 2 * angle(D, E, A) == angle(D, center(c), A) mod 360
By angle_to_center on H, A, D, c we get 2 * angle(H, A, D) == angle(H, center(c), D) mod 360
By angle_to_center on D, A, E, c we get 2 * angle(D, A, E) == angle(D, center(c), E) mod 360
By angle_to_center on E, H, D, c we get 2 * angle(E, H, D) == angle(E, center(c), D) mod 360
By angle_to_center on D, H, A, c we get 2 * angle(D, H, A) == angle(D, center(c), A) mod 360
By angle_to_center on D, A, H, c we get 2 * angle(D, A, H) == angle(D, center(c), H) mod 360
By angle_to_center on H, D, A, c we get 2 * angle(H, D, A) == angle(H, center(c), A) mod 360
By angle_to_center on E, D, H, c we get 2 * angle(E, D, H) == angle(E, center(c), H) mod 360
By angle_to_center on E, A, H, c we get 2 * angle(E, A, H) == angle(E, center(c), H) mod 360
By angle_to_center on A, D, E, c we get 2 * angle(A, D, E) == angle(A, center(c), E) mod 360
By angle_to_center on A, E, D, c we get 2 * angle(A, E, D) == angle(A, center(c), D) mod 360
By angle_to_center on A, D, H, c we get 2 * angle(A, D, H) == angle(A, center(c), H) mod 360
By angle_to_center on A, H, E, c we get 2 * angle(A, H, E) == angle(A, center(c), E) mod 360
By angle_to_center on E, D, A, c we get 2 * angle(E, D, A) == angle(E, center(c), A) mod 360
By angle_to_center on D, E, H, c we get 2 * angle(D, E, H) == angle(D, center(c), H) mod 360
By same_angle_v2 on E, D, B, F we get angle(D, E, F) == angle(B, E, F) + 180 mod 360
By same_angle_v0 on B, E, D, C we get angle(D, B, C) == angle(E, B, C) mod 360
By collinear_definition on E, B, D we get B in Line(D, E), D in Line(B, E), Line(B, E) == Line(D, E), 0 == 2 * angle(B, E, D) mod 360
By collinear_definition on D, B, E we get B in Line(D, E), E in Line(B, D), Line(B, D) == Line(D, E), 0 == 2 * angle(B, D, E) mod 360
By log_of_2_times_distance on D, B, D, E we get log(distance(B, D)) == 0.6931471805599453 + log(distance(D, E))
By collinear_definition on E, D, B we get D in Line(B, E), B in Line(D, E), Line(B, E) == Line(D, E), 0 == 2 * angle(D, E, B) mod 360
By collinear_definition on D, E, B we get E in Line(B, D), B in Line(D, E), Line(B, D) == Line(D, E), 0 == 2 * angle(E, D, B) mod 360
By collinear_definition on B, D, E we get D in Line(B, E), E in Line(B, D), Line(B, D) == Line(B, E), 0 == 2 * angle(D, B, E) mod 360
By log_of_2_times_distance on D, B, B, E we get log(distance(B, D)) == 0.6931471805599453 + log(distance(B, E))
By collinear_definition on B, E, D we get E in Line(B, D), D in Line(B, E), Line(B, D) == Line(B, E), 0 == 2 * angle(E, B, D) mod 360
By isosceles_triangle_properties on E, B, D we get distance(B, E) == distance(D, E), angle(B, D, E) == angle(E, B, D) mod 360
By isosceles_triangle_properties on E, D, B we get distance(B, E) == distance(D, E), angle(D, B, E) == angle(E, D, B) mod 360
By between_implies_angles on B, E, D we get 180 == angle(B, E, D) mod 360, 0 == angle(E, D, B) mod 360, 0 == angle(D, B, E) mod 360
By between_implies_angles on D, E, B we get 180 == angle(D, E, B) mod 360, 0 == angle(E, B, D) mod 360, 0 == angle(B, D, E) mod 360
By median_definition on A, D, B, Line(A, E) we get Line(A, E) == median(A, B, D)
By median_definition on G, D, B, Line(E, G) we get Line(E, G) == median(G, B, D)
By perpendicular_line_definition on A, j, l we get j == perpendicular_line(A, l)
By perpendicular_line_definition on E, l, j we get l == perpendicular_line(E, j)
By perpendicular_line_definition on C, j, l we get j == perpendicular_line(C, l)
By perpendicular_line_definition on H, l, j we get l == perpendicular_line(H, j)
By perpendicular_line_definition on H, l, k we get l == perpendicular_line(H, k)
By perpendicular_line_definition on F, l, j we get l == perpendicular_line(F, j)
By same_angle_v2 on E, B, D, H we get angle(B, E, H) == angle(D, E, H) + 180 mod 360
By same_angle_v2 on E, F, H, B we get angle(F, E, B) == angle(H, E, B) + 180 mod 360
By same_angle_v3 on E, B, D, A we get angle(B, E, A) == angle(D, E, A) + 180 mod 360
By same_angle_v0 on D, E, B, A we get angle(B, D, A) == angle(E, D, A) mod 360
By same_angle_v0 on D, E, B, H we get angle(B, D, H) == angle(E, D, H) mod 360
By same_angle_v3 on E, F, H, A we get angle(F, E, A) == angle(H, E, A) + 180 mod 360
By same_angle_v3 on E, H, F, D we get angle(H, E, D) == angle(F, E, D) + 180 mod 360
By projection_definition on B, F, l we get F == projection(B, l)
By different_points_v1 on A, G we get 0 != distance(A, G)
By different_points_v1 on F, H we get 0 != distance(F, H)
By different_points_v1 on G, H we get 0 != distance(G, H)
By different_points_v1 on B, F we get 0 != distance(B, F)
By different_points_v1 on A, E we get 0 != distance(A, E)
By different_points_v1 on H, E we get 0 != distance(E, H)
By different_points_v1 on D, H we get 0 != distance(D, H)
By different_points_v1 on A, D we get 0 != distance(A, D)
By different_points_v1 on G, E we get 0 != distance(E, G)
By different_points_v1 on G, D we get 0 != distance(D, G)
By different_points_v1 on A, H we get 0 != distance(A, H)
By different_points_v1 on D, C we get 0 != distance(C, D)
By same_angle_v2 on E, B, D, G we get angle(B, E, G) == angle(D, E, G) + 180 mod 360
By perpendicular_direction_conditions_v0_r on E, H, F, B we get 180 == 2 * direction(E, H) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on C, A, E, H we get 180 == 2 * direction(C, A) - 2 * direction(E, H) mod 360
By same_angle_v0 on D, B, E, G we get angle(B, D, G) == angle(E, D, G) mod 360
By same_angle_v0 on B, D, E, F we get angle(D, B, F) == angle(E, B, F) mod 360
By perpendicular_direction_conditions_v0_r on H, E, F, B we get 180 == 2 * direction(H, E) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on A, C, E, F we get 180 == 2 * direction(A, C) - 2 * direction(E, F) mod 360
By same_angle_v1 on H, F, E, D we get angle(E, H, D) == angle(F, H, D) mod 360
By same_angle_v1 on D, B, E, C we get angle(B, D, C) == angle(E, D, C) mod 360
By same_angle_v3 on E, F, H, G we get angle(F, E, G) == angle(H, E, G) + 180 mod 360
By perpendicular_direction_conditions_v0_r on E, F, B, F we get 180 == 2 * direction(E, F) - 2 * direction(B, F) mod 360
By same_angle_v0 on H, F, E, A we get angle(E, H, A) == angle(F, H, A) mod 360
By perpendicular_direction_conditions_v0_r on E, F, F, B we get 180 == 2 * direction(E, F) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on F, B, E, H we get 180 == 2 * direction(F, B) - 2 * direction(E, H) mod 360
By perpendicular_direction_conditions_v0_r on F, B, H, E we get 180 == 2 * direction(F, B) - 2 * direction(H, E) mod 360
By perpendicular_direction_conditions_v0_r on B, F, E, H we get 180 == 2 * direction(B, F) - 2 * direction(E, H) mod 360
By probably_between_and_collinear_implies_between on F, E, H we get between(F, E, H)
By perpendicular_direction_conditions_v0_r on A, C, H, E we get 180 == 2 * direction(A, C) - 2 * direction(H, E) mod 360
By perpendicular_direction_conditions_v0_r on C, A, H, E we get 180 == 2 * direction(C, A) - 2 * direction(H, E) mod 360
By perpendicular_direction_conditions_v0_r on F, B, E, F we get 180 == 2 * direction(F, B) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on E, H, C, A we get 180 == 2 * direction(E, H) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on B, F, H, E we get 180 == 2 * direction(B, F) - 2 * direction(H, E) mod 360
By perpendicular_direction_conditions_v0_r on H, E, C, A we get 180 == 2 * direction(H, E) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on H, E, B, F we get 180 == 2 * direction(H, E) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on A, C, E, H we get 180 == 2 * direction(A, C) - 2 * direction(E, H) mod 360
By perpendicular_direction_conditions_v0_r on E, F, C, A we get 180 == 2 * direction(E, F) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on E, H, B, F we get 180 == 2 * direction(E, H) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on E, H, A, C we get 180 == 2 * direction(E, H) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on H, E, A, C we get 180 == 2 * direction(H, E) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on E, F, A, C we get 180 == 2 * direction(E, F) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on B, F, E, F we get 180 == 2 * direction(B, F) - 2 * direction(E, F) mod 360
By projection_definition on H, F, k we get F == projection(H, k)
By perpendicular_direction_conditions_v0_r on C, A, E, F we get 180 == 2 * direction(C, A) - 2 * direction(E, F) mod 360
By parallel_line_angles_reverse_v1 on A, D, B, C we get angle(A, D, B) == angle(C, B, D) mod 360
By reverse_direction on D, B we get 180 == direction(D, B) - direction(B, D) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on D, B, F we get D not in Line(B, F)
By not_in_line_equivalent_to_not_collinear_v0_r on G, E, A we get G not in Line(A, E)
By not_in_line_equivalent_to_not_collinear_v0_r on F, H, G we get F not in Line(G, H)
By line_inequality on Line(A, H), l, A we get l != Line(A, H)
By reverse_direction on E, H we get 180 == direction(E, H) - direction(H, E) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on H, E, G we get H not in Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on F, A, E we get F not in Line(A, E)
By reverse_direction on A, E we get 180 == direction(A, E) - direction(E, A) mod 360
By reverse_direction on B, E we get 180 == direction(B, E) - direction(E, B) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on F, A, D we get F not in Line(A, D)
By reverse_direction on D, H we get 180 == direction(D, H) - direction(H, D) mod 360
By reverse_direction on E, B we get 180 == direction(E, B) - direction(B, E) mod 360
By reverse_direction on A, H we get 180 == direction(A, H) - direction(H, A) mod 360
By reverse_direction on E, D we get 180 == direction(E, D) - direction(D, E) mod 360
By line_inequality on Line(E, G), k, E we get k != Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on H, A, E we get H not in Line(A, E)
By reverse_direction on B, D we get 180 == direction(B, D) - direction(D, B) mod 360
By collinear_definition on E, F, H we get F in Line(E, H), H in Line(E, F), Line(E, F) == Line(E, H), 0 == 2 * angle(F, E, H) mod 360
By line_inequality on Line(D, H), g, D we get g != Line(D, H)
By not_in_line_equivalent_to_not_collinear_v0_r on D, E, G we get D not in Line(E, G)
By reverse_direction on A, D we get 180 == direction(A, D) - direction(D, A) mod 360
By line_inequality on Line(A, G), g, A we get g != Line(A, G)
By not_in_line_equivalent_to_not_collinear_v0_r on D, G, A we get D not in Line(A, G)
By not_in_line_equivalent_to_not_collinear_v0_r on A, H, D we get A not in Line(D, H)
By not_in_line_equivalent_to_not_collinear_v0_r on F, B, D we get F not in Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on E, D, A we get E not in Line(A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on E, G, A we get E not in Line(A, G)
By line_inequality on Line(A, G), l, G we get l != Line(A, G)
By not_in_line_equivalent_to_not_collinear_v0_r on G, D, H we get G not in Line(D, H)
By line_inequality on Line(B, D), f, D we get f != Line(B, D)
By line_inequality on Line(A, E), f, E we get f != Line(A, E)
By not_in_line_equivalent_to_not_collinear_v0_r on E, H, A we get E not in Line(A, H)
By not_in_line_equivalent_to_not_collinear_v0_r on D, G, H we get D not in Line(G, H)
By not_in_line_equivalent_to_not_collinear_v0_r on G, D, E we get G not in Line(D, E)
By reverse_direction on H, E we get 180 == direction(H, E) - direction(E, H) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on C, A, G we get C not in Line(A, G)
By collinear_definition on E, H, F we get H in Line(E, F), F in Line(E, H), Line(E, F) == Line(E, H), 0 == 2 * angle(H, E, F) mod 360
By reverse_direction on H, D we get 180 == direction(H, D) - direction(D, H) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on F, H, D we get F not in Line(D, H)
By reverse_direction on D, A we get 180 == direction(D, A) - direction(A, D) mod 360
By reverse_direction on E, A we get 180 == direction(E, A) - direction(A, E) mod 360
By line_inequality on Line(A, E), k, A we get k != Line(A, E)
By reverse_direction on D, E we get 180 == direction(D, E) - direction(E, D) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on G, B, E we get G not in Line(B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on C, B, D we get C not in Line(B, D)
By line_inequality on Line(D, H), f, D we get f != Line(D, H)
By not_in_line_equivalent_to_not_collinear_v0_r on B, D, G we get B not in Line(D, G)
By not_in_line_equivalent_to_not_collinear_v0_r on H, C, D we get H not in Line(C, D)
By not_in_line_equivalent_to_not_collinear_v0_r on B, H, A we get B not in Line(A, H)
By reverse_direction on H, A we get 180 == direction(H, A) - direction(A, H) mod 360
By line_inequality on Line(A, H), h, A we get h != Line(A, H)
By line_inequality on Line(D, G), l, G we get l != Line(D, G)
By not_in_line_equivalent_to_not_collinear_v0_r on A, D, G we get A not in Line(D, G)
By not_in_line_equivalent_to_not_collinear_v0_r on F, D, E we get F not in Line(D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on D, E, A we get D not in Line(A, E)
By not_in_line_equivalent_to_not_collinear_v0_r on F, E, B we get F not in Line(B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on C, H, G we get C not in Line(G, H)
By not_in_line_equivalent_to_not_collinear_v0_r on A, D, E we get A not in Line(D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on A, D, B we get A not in Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on A, B, E we get A not in Line(B, E)
By line_inequality on Line(G, H), j, G we get j != Line(G, H)
By not_in_line_equivalent_to_not_collinear_v0_r on H, G, D we get H not in Line(D, G)
By not_in_line_equivalent_to_not_collinear_v0_r on D, H, A we get D not in Line(A, H)
By not_in_line_equivalent_to_not_collinear_v0_r on F, E, G we get F not in Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on G, C, D we get G not in Line(C, D)
By line_inequality on Line(A, H), j, H we get j != Line(A, H)
By line_inequality on Line(A, E), g, E we get g != Line(A, E)
By not_in_line_equivalent_to_not_collinear_v0_r on C, G, E we get C not in Line(E, G)
By line_circle_intersection_has_at_most_two_points_0 on E, H, F, c we get F not in c
By not_in_line_equivalent_to_not_collinear_v0_r on E, D, C we get E not in Line(C, D)
By not_in_line_equivalent_to_not_collinear_v0_r on H, B, D we get H not in Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on G, D, B we get G not in Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on E, G, D we get E not in Line(D, G)
By line_inequality on Line(E, G), f, E we get f != Line(E, G)
By line_inequality on Line(B, D), l, B we get l != Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on F, G, D we get F not in Line(D, G)
By line_inequality on Line(D, H), k, H we get k != Line(D, H)
By line_inequality on Line(G, H), k, H we get k != Line(G, H)
By not_in_line_equivalent_to_not_collinear_v0_r on F, A, G we get F not in Line(A, G)
By line_inequality on Line(G, H), l, G we get l != Line(G, H)
By not_in_line_equivalent_to_not_collinear_v0_r on F, C, D we get F not in Line(C, D)
By not_in_line_equivalent_to_not_collinear_v0_r on H, D, E we get H not in Line(D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on C, A, H we get C not in Line(A, H)
By not_in_line_equivalent_to_not_collinear_v0_r on G, B, F we get G not in Line(B, F)
By line_inequality on Line(A, G), f, G we get f != Line(A, G)
By not_in_line_equivalent_to_not_collinear_v0_r on B, A, G we get B not in Line(A, G)
By line_inequality on Line(B, D), j, B we get j != Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on B, A, E we get B not in Line(A, E)
By not_in_line_equivalent_to_not_collinear_v0_r on E, G, H we get E not in Line(G, H)
By not_in_line_equivalent_to_not_collinear_v0_r on F, H, A we get F not in Line(A, H)
By not_in_line_equivalent_to_not_collinear_v0_r on C, B, E we get C not in Line(B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on B, G, H we get B not in Line(G, H)
By line_inequality on Line(B, D), h, B we get h != Line(B, D)
By line_inequality on Line(A, G), k, A we get k != Line(A, G)
By not_in_line_equivalent_to_not_collinear_v0_r on C, D, G we get C not in Line(D, G)
By line_inequality on Line(E, G), g, G we get g != Line(E, G)
By line_inequality on Line(A, E), h, A we get h != Line(A, E)
By not_in_line_equivalent_to_not_collinear_v0_r on A, E, G we get A not in Line(E, G)
By line_inequality on Line(D, H), j, H we get j != Line(D, H)
By line_inequality on Line(A, H), k, H we get k != Line(A, H)
By line_inequality on Line(A, H), g, H we get g != Line(A, H)
By line_inequality on Line(B, D), g, E we get g != Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on H, E, B we get H not in Line(B, E)
By line_inequality on Line(E, G), l, G we get l != Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on C, E, D we get C not in Line(D, E)
By line_inequality on Line(D, G), j, D we get j != Line(D, G)
By line_inequality on Line(A, E), l, A we get l != Line(A, E)
By not_in_line_equivalent_to_not_collinear_v0_r on E, H, D we get E not in Line(D, H)
By not_in_line_equivalent_to_not_collinear_v0_r on B, E, G we get B not in Line(E, G)
By line_inequality on Line(A, G), h, A we get h != Line(A, G)
By not_in_line_equivalent_to_not_collinear_v0_r on G, A, D we get G not in Line(A, D)
By line_inequality on Line(E, G), j, G we get j != Line(E, G)
By line_inequality on Line(A, G), j, G we get j != Line(A, G)
By line_inequality on Line(B, D), i, B we get i != Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on C, H, D we get C not in Line(D, H)
By line_inequality on Line(G, H), f, G we get f != Line(G, H)
By line_inequality on Line(D, G), g, G we get g != Line(D, G)
By line_inequality on Line(D, G), f, D we get f != Line(D, G)
By not_in_line_equivalent_to_not_collinear_v0_r on B, D, H we get B not in Line(D, H)
By line_inequality on Line(G, H), g, H we get g != Line(G, H)
By not_in_line_equivalent_to_not_collinear_v0_r on H, A, D we get H not in Line(A, D)
By line_inequality on Line(D, H), l, D we get l != Line(D, H)
By line_inequality on Line(B, D), k, E we get k != Line(B, D)
By line_inequality on Line(A, H), f, H we get f != Line(A, H)
By perpendicular_direction_conditions_v0_r on F, B, F, H we get 180 == 2 * direction(F, B) - 2 * direction(F, H) mod 360
By perpendicular_direction_conditions_v0_r on B, F, F, H we get 180 == 2 * direction(B, F) - 2 * direction(F, H) mod 360
By perpendicular_direction_conditions_v0_r on A, C, F, E we get 180 == 2 * direction(A, C) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on C, A, H, F we get 180 == 2 * direction(C, A) - 2 * direction(H, F) mod 360
By same_angle_v0 on H, E, F, G we get angle(E, H, G) == angle(F, H, G) mod 360
By perpendicular_direction_conditions_v0_r on F, E, F, B we get 180 == 2 * direction(F, E) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on B, F, H, F we get 180 == 2 * direction(B, F) - 2 * direction(H, F) mod 360
By perpendicular_direction_conditions_v0_r on F, E, C, A we get 180 == 2 * direction(F, E) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on A, C, F, H we get 180 == 2 * direction(A, C) - 2 * direction(F, H) mod 360
By perpendicular_direction_conditions_v0_r on F, H, A, C we get 180 == 2 * direction(F, H) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on A, C, H, F we get 180 == 2 * direction(A, C) - 2 * direction(H, F) mod 360
By perpendicular_direction_conditions_v0_r on H, F, F, B we get 180 == 2 * direction(H, F) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on C, A, F, E we get 180 == 2 * direction(C, A) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on F, H, F, B we get 180 == 2 * direction(F, H) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on H, F, B, F we get 180 == 2 * direction(H, F) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on F, E, B, F we get 180 == 2 * direction(F, E) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on B, F, F, E we get 180 == 2 * direction(B, F) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on F, B, F, E we get 180 == 2 * direction(F, B) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on F, B, H, F we get 180 == 2 * direction(F, B) - 2 * direction(H, F) mod 360
By perpendicular_direction_conditions_v0_r on F, H, B, F we get 180 == 2 * direction(F, H) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on H, F, A, C we get 180 == 2 * direction(H, F) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on H, F, C, A we get 180 == 2 * direction(H, F) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on F, H, C, A we get 180 == 2 * direction(F, H) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on C, A, F, H we get 180 == 2 * direction(C, A) - 2 * direction(F, H) mod 360
By perpendicular_direction_conditions_v0_r on F, E, A, C we get 180 == 2 * direction(F, E) - 2 * direction(A, C) mod 360
By parallel_line_angles_reverse_v0 on A, B, D, C we get angle(A, B, D) == angle(C, D, B) mod 360
By reverse_direction on G, E we get 180 == direction(G, E) - direction(E, G) mod 360
By parallel_line_angles_reverse_v3 on C, B, A, D we get angle(C, B, A) == angle(D, A, B) + 180 mod 360
By internal_angle_bisector_definition_v0_r on E, B, E, D we get Line(B, D) == internal_angle_bisector(E, D, E)
By internal_angle_bisector_definition_v0_r on B, D, B, E we get Line(D, E) == internal_angle_bisector(B, E, B)
By reverse_direction on B, A we get 180 == direction(B, A) - direction(A, B) mod 360
By reverse_direction on E, F we get 180 == direction(E, F) - direction(F, E) mod 360
By parallel_line_angles_reverse_v2 on D, A, B, C we get angle(D, A, B) == angle(C, B, A) + 180 mod 360
By reverse_direction on G, D we get 180 == direction(G, D) - direction(D, G) mod 360
By perpendicular_lines_draw_intersection on j, l we get exists(line_intersection(j, l))
By internal_angle_bisector_definition_v0_r on B, E, B, D we get Line(D, E) == internal_angle_bisector(B, D, B)
By internal_angle_bisector_definition_v0_r on E, D, E, B we get Line(B, D) == internal_angle_bisector(E, B, E)
By internal_angle_bisector_definition_v0_r on D, B, D, E we get Line(B, E) == internal_angle_bisector(D, E, D)
By internal_angle_bisector_definition_v0_r on D, E, D, B we get Line(B, E) == internal_angle_bisector(D, B, D)
By collinear_definition on H, F, E we get F in Line(E, H), E in Line(F, H), Line(E, H) == Line(F, H), 0 == 2 * angle(F, H, E) mod 360
By reverse_direction on G, A we get 180 == direction(G, A) - direction(A, G) mod 360
By reverse_direction on G, H we get 180 == direction(G, H) - direction(H, G) mod 360
By collinear_definition on H, E, F we get E in Line(F, H), F in Line(E, H), Line(E, H) == Line(F, H), 0 == 2 * angle(E, H, F) mod 360
By reverse_direction on B, C we get 180 == direction(B, C) - direction(C, B) mod 360
By same_angle_v1 on F, E, H, B we get angle(E, F, B) == angle(H, F, B) mod 360
By sss_anti_congruence_v1 on G, D, E, G, E, D we get anti_congruent_triangles(D, E, G, E, D, G)
By parallel_line_angles_reverse_v3 on D, C, B, A we get angle(D, C, B) == angle(A, B, C) + 180 mod 360
By altitude_definition on C, E, F, j we get j == altitude(C, E, F)
By altitude_definition on B, E, H, k we get k == altitude(B, E, H)
By sas_anti_congruence on H, G, E, E, G, H we get anti_congruent_triangles(E, G, H, H, G, E)
By parallel_line_angles_reverse_v2 on A, B, C, D we get angle(A, B, C) == angle(D, C, B) + 180 mod 360
By altitude_definition on C, F, H, j we get j == altitude(C, F, H)
By altitude_definition on A, E, F, j we get j == altitude(A, E, F)
By sas_anti_congruence on D, G, E, E, G, D we get anti_congruent_triangles(D, E, G, E, D, G)
By isosceles_triangle_properties on G, D, E we get distance(D, G) == distance(E, G), angle(D, E, G) == angle(G, D, E) mod 360
By altitude_definition on E, B, F, l we get l == altitude(E, B, F)
By isosceles_triangle_properties on G, A, E we get distance(A, G) == distance(E, G), angle(A, E, G) == angle(G, A, E) mod 360
By sss_anti_congruence_v0 on D, G, E, E, G, D we get anti_congruent_triangles(D, E, G, E, D, G)
By isosceles_triangle_properties on G, E, H we get distance(E, G) == distance(G, H), angle(E, H, G) == angle(G, E, H) mod 360
By sas_anti_congruence on E, G, A, A, G, E we get anti_congruent_triangles(A, E, G, E, A, G)
By sss_anti_congruence_v1 on D, E, G, E, D, G we get anti_congruent_triangles(D, E, G, E, D, G)
By perpendicular_angle_conditions_v0 on E, F, B we get angle(E, F, B) == orientation(B, E, F) mod 360
By altitude_definition on A, F, H, j we get j == altitude(A, F, H)
By sss_anti_congruence_v1 on E, G, D, D, G, E we get anti_congruent_triangles(D, E, G, E, D, G)
By perpendicular_angle_conditions_v0 on B, F, E we get angle(B, F, E) == orientation(B, F, E) mod 360
By altitude_definition on H, A, C, l we get l == altitude(H, A, C)
By parallel_line_angles_reverse_v3 on B, A, D, C we get angle(B, A, D) == angle(C, D, A) + 180 mod 360
By collinear_definition on F, H, E we get H in Line(E, F), E in Line(F, H), Line(E, F) == Line(F, H), 0 == 2 * angle(H, F, E) mod 360
By sas_anti_congruence on D, G, H, H, G, D we get anti_congruent_triangles(D, G, H, H, G, D)
By sss_anti_congruence_v0 on G, E, D, G, D, E we get anti_congruent_triangles(D, E, G, E, D, G)
By parallel_line_angles_reverse_v2 on C, D, A, B we get angle(C, D, A) == angle(B, A, D) + 180 mod 360
By perpendicular_angle_conditions_v0 on B, F, H we get angle(B, F, H) == orientation(B, F, H) mod 360
By sas_anti_congruence on A, G, E, E, G, A we get anti_congruent_triangles(A, E, G, E, A, G)
By sss_anti_congruence_v0 on G, E, D, G, D, E we get anti_congruent_triangles(D, E, G, E, D, G)
By sss_anti_congruence_v1 on D, E, G, E, D, G we get anti_congruent_triangles(D, E, G, E, D, G)
By sss_anti_congruence_v0 on D, G, E, E, G, D we get anti_congruent_triangles(D, E, G, E, D, G)
By sss_anti_congruence_v1 on G, D, E, G, E, D we get anti_congruent_triangles(D, E, G, E, D, G)
By sss_anti_congruence_v1 on E, G, D, D, G, E we get anti_congruent_triangles(D, E, G, E, D, G)
By isosceles_triangle_properties on G, E, A we get distance(A, G) == distance(E, G), angle(E, A, G) == angle(G, E, A) mod 360
By sss_anti_congruence_v0 on E, D, G, D, E, G we get anti_congruent_triangles(D, E, G, E, D, G)
By isosceles_triangle_properties on G, H, A we get distance(A, G) == distance(G, H), angle(G, H, A) == angle(H, A, G) mod 360
By sss_anti_congruence_v0 on E, D, G, D, E, G we get anti_congruent_triangles(D, E, G, E, D, G)
By altitude_definition on B, F, H, k we get k == altitude(B, F, H)
By sss_anti_congruence_v0 on D, G, E, E, G, D we get anti_congruent_triangles(D, E, G, E, D, G)
By sss_anti_congruence_v1 on D, E, G, E, D, G we get anti_congruent_triangles(D, E, G, E, D, G)
By collinear_definition on F, E, H we get E in Line(F, H), H in Line(E, F), Line(E, F) == Line(F, H), 0 == 2 * angle(E, F, H) mod 360
By sss_anti_congruence_v0 on D, G, E, E, G, D we get anti_congruent_triangles(D, E, G, E, D, G)
By sss_anti_congruence_v1 on G, D, E, G, E, D we get anti_congruent_triangles(D, E, G, E, D, G)
By sss_anti_congruence_v1 on D, E, G, E, D, G we get anti_congruent_triangles(D, E, G, E, D, G)
By sss_anti_congruence_v1 on G, D, E, G, E, D we get anti_congruent_triangles(D, E, G, E, D, G)
By sss_anti_congruence_v0 on E, D, G, D, E, G we get anti_congruent_triangles(D, E, G, E, D, G)
By isosceles_triangle_properties on G, H, E we get distance(E, G) == distance(G, H), angle(G, H, E) == angle(H, E, G) mod 360
By sss_anti_congruence_v0 on G, E, D, G, D, E we get anti_congruent_triangles(D, E, G, E, D, G)
By altitude_definition on F, C, A, l we get l == altitude(F, A, C)
By altitude_definition on B, F, E, k we get k == altitude(B, E, F)
By isosceles_triangle_properties on G, D, A we get distance(A, G) == distance(D, G), angle(D, A, G) == angle(G, D, A) mod 360
By sss_anti_congruence_v1 on E, G, D, D, G, E we get anti_congruent_triangles(D, E, G, E, D, G)
By altitude_definition on C, H, E, j we get j == altitude(C, E, H)
By sas_anti_congruence on A, G, D, D, G, A we get anti_congruent_triangles(A, D, G, D, A, G)
By isosceles_triangle_properties on G, D, H we get distance(D, G) == distance(G, H), angle(D, H, G) == angle(G, D, H) mod 360
By sss_anti_congruence_v0 on G, E, D, G, D, E we get anti_congruent_triangles(D, E, G, E, D, G)
By altitude_definition on H, B, F, l we get l == altitude(H, B, F)
By sas_anti_congruence on E, G, H, H, G, E we get anti_congruent_triangles(E, G, H, H, G, E)
By altitude_definition on A, E, H, j we get j == altitude(A, E, H)
By sss_anti_congruence_v0 on D, G, E, E, G, D we get anti_congruent_triangles(D, E, G, E, D, G)
By sss_anti_congruence_v0 on D, G, E, E, G, D we get anti_congruent_triangles(D, E, G, E, D, G)
By sss_anti_congruence_v0 on E, D, G, D, E, G we get anti_congruent_triangles(D, E, G, E, D, G)
By power_of_a_point_definition on B, D, E, c we get log(power_of_a_point(B, c)) == log(distance(B, D)) + log(distance(B, E))
By sss_anti_congruence_v1 on G, D, E, G, E, D we get anti_congruent_triangles(D, E, G, E, D, G)
By sss_anti_congruence_v1 on D, E, G, E, D, G we get anti_congruent_triangles(D, E, G, E, D, G)
By sss_anti_congruence_v0 on G, E, D, G, D, E we get anti_congruent_triangles(D, E, G, E, D, G)
By sas_anti_congruence on H, G, D, D, G, H we get anti_congruent_triangles(D, G, H, H, G, D)
By isosceles_triangle_properties on G, A, D we get distance(A, G) == distance(D, G), angle(A, D, G) == angle(G, A, D) mod 360
By sas_anti_congruence on E, G, D, D, G, E we get anti_congruent_triangles(D, E, G, E, D, G)
By sss_anti_congruence_v1 on E, G, D, D, G, E we get anti_congruent_triangles(D, E, G, E, D, G)
By isosceles_triangle_properties on G, H, D we get distance(D, G) == distance(G, H), angle(G, H, D) == angle(H, D, G) mod 360
By sas_anti_congruence on D, G, A, A, G, D we get anti_congruent_triangles(A, D, G, D, A, G)
By sss_anti_congruence_v1 on E, G, D, D, G, E we get anti_congruent_triangles(D, E, G, E, D, G)
By sss_anti_congruence_v1 on E, G, D, D, G, E we get anti_congruent_triangles(D, E, G, E, D, G)
By sss_anti_congruence_v0 on E, D, G, D, E, G we get anti_congruent_triangles(D, E, G, E, D, G)
By isosceles_triangle_properties on G, A, H we get distance(A, G) == distance(G, H), angle(A, H, G) == angle(G, A, H) mod 360
By sss_anti_congruence_v0 on E, D, G, D, E, G we get anti_congruent_triangles(D, E, G, E, D, G)
By sss_anti_congruence_v0 on G, E, D, G, D, E we get anti_congruent_triangles(D, E, G, E, D, G)
By isosceles_triangle_properties on G, E, D we get distance(D, G) == distance(E, G), angle(E, D, G) == angle(G, E, D) mod 360
By sss_anti_congruence_v1 on D, E, G, E, D, G we get anti_congruent_triangles(D, E, G, E, D, G)
By perpendicular_angle_conditions_v0 on H, F, B we get angle(H, F, B) == orientation(B, H, F) mod 360
By sss_anti_congruence_v1 on G, D, E, G, E, D we get anti_congruent_triangles(D, E, G, E, D, G)
By parallel_line_angles_reverse_v0 on B, C, A, D we get angle(B, C, A) == angle(D, A, C) mod 360
By parallel_line_angles_reverse_v2 on C, A, B, F we get angle(C, A, B) == angle(F, B, A) + 180 mod 360
By parallel_line_angles_reverse_v1 on A, C, B, F we get angle(A, C, B) == angle(F, B, C) mod 360
By parallel_line_angles_reverse_v2 on B, C, D, A we get angle(B, C, D) == angle(A, D, C) + 180 mod 360
By parallel_line_angles_reverse_v3 on F, B, A, C we get angle(F, B, A) == angle(C, A, B) + 180 mod 360
By parallel_line_angles_reverse_v3 on A, D, C, B we get angle(A, D, C) == angle(B, C, D) + 180 mod 360
By parallel_line_angles_reverse_v1 on B, A, C, D we get angle(B, A, C) == angle(D, C, A) mod 360
By parallelogram_parallel_definition on A, B, C, D we get parallelogram(A, B, C, D)
By parallelogram_parallel_definition on C, B, A, D we get parallelogram(A, B, C, D)
By parallelogram_parallel_definition on D, C, B, A we get parallelogram(A, B, C, D)
By parallelogram_parallel_definition on C, D, A, B we get parallelogram(A, B, C, D)
By parallelogram_parallel_definition on A, D, C, B we get parallelogram(A, B, C, D)
By parallelogram_parallel_definition on B, C, D, A we get parallelogram(A, B, C, D)
By parallelogram_parallel_definition on B, A, D, C we get parallelogram(A, B, C, D)
By parallelogram_parallel_definition on D, A, B, C we get parallelogram(A, B, C, D)
By line_intersection_definition on D, i, Line(B, D) we get D == line_intersection(i, Line(B, D))
By line_intersection_definition on D, h, Line(B, D) we get D == line_intersection(h, Line(B, D))
By line_intersection_definition on B, f, Line(B, D) we get B == line_intersection(f, Line(B, D))
By line_intersection_definition on A, Line(A, H), j we get A == line_intersection(j, Line(A, H))
By line_intersection_definition on B, k, Line(B, D) we get B == line_intersection(k, Line(B, D))
By line_intersection_definition on E, Line(A, E), l we get E == line_intersection(l, Line(A, E))
By line_intersection_definition on H, Line(D, H), l we get H == line_intersection(l, Line(D, H))
By line_intersection_definition on H, Line(A, H), l we get H == line_intersection(l, Line(A, H))
By line_intersection_definition on E, l, Line(E, G) we get E == line_intersection(l, Line(E, G))
By line_intersection_definition on A, f, Line(A, H) we get A == line_intersection(f, Line(A, H))
By perpendicular_line_definition on line_intersection(j, l), l, j we get l == perpendicular_line(line_intersection(j, l), j)
By line_intersection_definition on E, Line(B, D), l we get E == line_intersection(l, Line(B, D))
By line_intersection_definition on H, Line(G, H), l we get H == line_intersection(l, Line(G, H))
By line_intersection_definition on B, g, Line(B, D) we get B == line_intersection(g, Line(B, D))
By perpendicular_line_definition on line_intersection(j, l), l, k we get l == perpendicular_line(line_intersection(j, l), k)
By line_intersection_definition on A, Line(A, G), f we get A == line_intersection(f, Line(A, G))
By perpendicular_line_definition on line_intersection(j, l), j, l we get j == perpendicular_line(line_intersection(j, l), l)
By line_intersection_definition on A, j, Line(A, G) we get A == line_intersection(j, Line(A, G))
By line_intersection_definition on A, f, Line(A, E) we get A == line_intersection(f, Line(A, E))
By between_imply_not_between on F, E, H we get collinear_and_not_between(E, F, H)
By between_imply_not_between on H, E, F we get collinear_and_not_between(E, H, F)
By parallel_line_definition on line_intersection(j, l), j, k we get j == parallel_line(line_intersection(j, l), k)
By orthocenter_concurrency on B, H, F we get orthocenter(B, F, H) in altitude(B, F, H), orthocenter(B, F, H) in altitude(H, B, F), orthocenter(B, F, H) in altitude(F, B, H)
By in_imply_collinear on line_intersection(j, l), C, A we get collinear(A, C, line_intersection(j, l))
By orthocenter_concurrency on B, E, F we get orthocenter(B, E, F) in altitude(B, E, F), orthocenter(B, E, F) in altitude(E, B, F), orthocenter(B, E, F) in altitude(F, B, E)
By in_imply_collinear on line_intersection(j, l), H, F we get collinear(F, H, line_intersection(j, l))
By in_imply_collinear on line_intersection(j, l), F, E we get collinear(E, F, line_intersection(j, l))
By in_imply_collinear on line_intersection(j, l), H, E we get collinear(E, H, line_intersection(j, l))
By divide_by_2_mod_180_v1 on F, B, D, H, D, G we get angle(F, B, D) == angle(H, D, G) mod 360
By divide_by_2_mod_180_v0 on E, B, F, D, H, G we get angle(D, H, G) == angle(E, B, F) mod 360
By divide_by_2_mod_180_v0 on D, H, G, D, B, F we get angle(D, B, F) == angle(D, H, G) mod 360
By line_inequality on Line(B, D), Line(G, H), B we get Line(B, D) != Line(G, H)
By divide_by_2_mod_180_v1 on F, B, D, G, H, D we get angle(F, B, D) == angle(G, H, D) mod 360
By between_imply_segment_sum on F, E, H we get distance(F, H) == distance(E, F) + distance(E, H)
By line_inequality on Line(D, G), Line(G, H), D we get Line(D, G) != Line(G, H)
By line_inequality on Line(A, E), Line(A, G), E we get Line(A, E) != Line(A, G)
By divide_by_2_mod_180_v1 on F, B, E, G, H, D we get angle(F, B, E) == angle(G, H, D) mod 360
By line_inequality on Line(D, H), Line(G, H), D we get Line(D, H) != Line(G, H)
By line_inequality on Line(D, G), Line(A, H), D we get Line(A, H) != Line(D, G)
By divide_by_2_mod_180_v0 on D, B, F, G, D, H we get angle(D, B, F) == angle(G, D, H) mod 360
By divide_by_2_mod_180_v1 on H, D, G, F, B, E we get angle(F, B, E) == angle(H, D, G) mod 360
By divide_by_2_mod_180_v0 on G, D, H, E, B, F we get angle(E, B, F) == angle(G, D, H) mod 360
By line_inequality on Line(A, E), Line(D, H), A we get Line(A, E) != Line(D, H)
By reverse_direction on F, B we get 180 == direction(F, B) - direction(B, F) mod 360
By line_inequality on Line(A, H), Line(B, D), A we get Line(A, H) != Line(B, D)
By line_containment_inequality on line_intersection(j, l), D, l we get D != line_intersection(j, l)
By line_inequality on Line(A, E), Line(G, H), E we get Line(A, E) != Line(G, H)
By line_inequality on h, Line(E, G), D we get h != Line(E, G)
By line_inequality on Line(G, H), h, G we get h != Line(G, H)
By line_inequality on Line(E, G), Line(D, H), E we get Line(D, H) != Line(E, G)
By line_inequality on Line(D, G), k, G we get k != Line(D, G)
By line_inequality on Line(B, D), Line(E, G), B we get Line(B, D) != Line(E, G)
By reverse_direction on B, F we get 180 == direction(B, F) - direction(F, B) mod 360
By line_inequality on i, Line(D, H), A we get i != Line(D, H)
By line_inequality on Line(E, G), i, G we get i != Line(E, G)
By line_containment_inequality on line_intersection(j, l), G, j we get G != line_intersection(j, l)
By line_inequality on Line(A, E), Line(E, G), A we get Line(A, E) != Line(E, G)
By line_inequality on h, Line(D, H), C we get h != Line(D, H)
By line_inequality on Line(E, G), Line(A, G), E we get Line(A, G) != Line(E, G)
By line_inequality on Line(D, G), Line(A, E), D we get Line(A, E) != Line(D, G)
By line_inequality on i, Line(D, G), A we get i != Line(D, G)
By line_containment_inequality on line_intersection(j, l), A, l we get A != line_intersection(j, l)
By line_inequality on Line(D, H), Line(A, H), D we get Line(A, H) != Line(D, H)
By line_inequality on i, Line(A, G), D we get i != Line(A, G)
By line_inequality on Line(B, D), Line(D, G), B we get Line(B, D) != Line(D, G)
By line_inequality on Line(B, D), Line(D, H), E we get Line(B, D) != Line(D, H)
By line_inequality on Line(A, G), Line(D, G), A we get Line(A, G) != Line(D, G)
By line_inequality on Line(D, G), Line(E, G), D we get Line(D, G) != Line(E, G)
By line_inequality on Line(A, G), Line(B, D), G we get Line(A, G) != Line(B, D)
By line_containment_inequality on line_intersection(j, l), F, j we get F != line_intersection(j, l)
By line_inequality on Line(G, H), i, G we get i != Line(G, H)
By line_containment_inequality on line_intersection(j, l), B, j we get B != line_intersection(j, l)
By line_inequality on Line(A, G), Line(D, H), A we get Line(A, G) != Line(D, H)
By line_inequality on h, Line(D, G), C we get h != Line(D, G)
By line_inequality on Line(G, H), Line(E, G), H we get Line(E, G) != Line(G, H)
By line_inequality on Line(A, H), i, H we get i != Line(A, H)
By line_inequality on Line(A, H), Line(A, E), H we get Line(A, E) != Line(A, H)
By line_containment_inequality on line_intersection(j, l), H, j we get H != line_intersection(j, l)
By line_inequality on Line(A, H), Line(E, G), A we get Line(A, H) != Line(E, G)
By line_inequality on Line(D, H), Line(D, G), H we get Line(D, G) != Line(D, H)
By line_inequality on Line(A, E), Line(B, D), A we get Line(A, E) != Line(B, D)
By line_inequality on Line(A, E), i, E we get i != Line(A, E)
By line_containment_inequality on line_intersection(j, l), C, l we get C != line_intersection(j, l)
By external_angle_bisector_definition_v0_r on H, B, E, F we get Line(B, F) == external_angle_bisector(E, F, H)
By external_angle_bisector_definition_v0_r on B, H, B, F we get Line(F, H) == external_angle_bisector(B, F, B)
By external_angle_bisector_definition_v0_r on E, B, E, F we get Line(B, F) == external_angle_bisector(E, F, E)
By internal_angle_bisector_definition_v0_r on H, F, H, E we get Line(E, F) == internal_angle_bisector(H, E, H)
By external_angle_bisector_definition_v0_r on H, B, H, F we get Line(B, F) == external_angle_bisector(H, F, H)
By internal_angle_bisector_definition_v0_r on F, E, F, H we get Line(E, H) == internal_angle_bisector(F, H, F)
By internal_angle_bisector_definition_v0_r on E, H, E, F we get Line(F, H) == internal_angle_bisector(E, F, E)
By external_angle_bisector_definition_v0_r on B, E, B, F we get Line(E, F) == external_angle_bisector(B, F, B)
By internal_angle_bisector_definition_v0_r on H, E, H, F we get Line(E, F) == internal_angle_bisector(H, F, H)
By internal_angle_bisector_definition_v0_r on F, H, F, E we get Line(E, H) == internal_angle_bisector(F, E, F)
By internal_angle_bisector_definition_v0_r on E, F, E, H we get Line(F, H) == internal_angle_bisector(E, H, E)
By sas_congruence on E, D, A, E, B, C we get congruent_triangles(A, D, E, C, B, E)
By anti_similar_triangle_basic_properties on G, D, E, G, E, D we get not_collinear(D, E, G), not_collinear(D, E, G), angle(G, D, E) == 0 - angle(G, E, D) mod 360, angle(D, E, G) == 0 - angle(E, D, G) mod 360, angle(E, G, D) == 0 - angle(D, G, E) mod 360, log(distance(D, G)) + log(distance(D, E)) == log(distance(E, G)) + log(distance(D, E)), log(distance(D, E)) + log(distance(D, G)) == log(distance(D, E)) + log(distance(E, G)), log(distance(D, G)) + log(distance(D, G)) == log(distance(E, G)) + log(distance(E, G))
By sas_congruence on E, B, A, E, D, C we get congruent_triangles(A, B, E, C, D, E)
By sas_congruence on C, D, E, A, B, E we get congruent_triangles(A, B, E, C, D, E)
By sas_congruence on A, D, E, C, B, E we get congruent_triangles(A, D, E, C, B, E)
By sas_congruence on C, B, E, A, D, E we get congruent_triangles(A, D, E, C, B, E)
By sas_congruence on E, D, C, E, B, A we get congruent_triangles(A, B, E, C, D, E)
By sas_congruence on A, B, E, C, D, E we get congruent_triangles(A, B, E, C, D, E)
By sas_congruence on E, B, C, E, D, A we get congruent_triangles(A, D, E, C, B, E)
By parallelogram_diagonals_v1 on B, C, D, A we get identical(midpoint(A, C), midpoint(B, D), line_intersection(Line(A, C), Line(B, D)))
By parallelogram_diagonals_v1 on D, A, B, C we get identical(midpoint(A, C), midpoint(B, D), line_intersection(Line(A, C), Line(B, D)))
By anti_similar_triangle_basic_properties on E, G, H, H, G, E we get not_collinear(E, G, H), not_collinear(E, G, H), angle(E, G, H) == 0 - angle(H, G, E) mod 360, angle(G, H, E) == 0 - angle(G, E, H) mod 360, angle(H, E, G) == 0 - angle(E, H, G) mod 360, log(distance(E, G)) + log(distance(E, G)) == log(distance(G, H)) + log(distance(G, H)), log(distance(E, G)) + log(distance(E, H)) == log(distance(G, H)) + log(distance(E, H)), log(distance(E, H)) + log(distance(E, G)) == log(distance(E, H)) + log(distance(G, H))
By anti_similar_triangle_basic_properties on G, A, E, G, E, A we get not_collinear(A, E, G), not_collinear(A, E, G), angle(G, A, E) == 0 - angle(G, E, A) mod 360, angle(A, E, G) == 0 - angle(E, A, G) mod 360, angle(E, G, A) == 0 - angle(A, G, E) mod 360, log(distance(A, G)) + log(distance(A, E)) == log(distance(E, G)) + log(distance(A, E)), log(distance(A, E)) + log(distance(A, G)) == log(distance(A, E)) + log(distance(E, G)), log(distance(A, G)) + log(distance(A, G)) == log(distance(E, G)) + log(distance(E, G))
By anti_similar_triangle_basic_properties on D, A, G, A, D, G we get not_collinear(A, D, G), not_collinear(A, D, G), angle(D, A, G) == 0 - angle(A, D, G) mod 360, angle(A, G, D) == 0 - angle(D, G, A) mod 360, angle(G, D, A) == 0 - angle(G, A, D) mod 360, log(distance(A, D)) + log(distance(A, G)) == log(distance(A, D)) + log(distance(D, G)), log(distance(A, G)) + log(distance(A, G)) == log(distance(D, G)) + log(distance(D, G)), log(distance(A, G)) + log(distance(A, D)) == log(distance(D, G)) + log(distance(A, D))
By anti_similar_triangle_basic_properties on G, D, H, G, H, D we get not_collinear(D, G, H), not_collinear(D, G, H), angle(G, D, H) == 0 - angle(G, H, D) mod 360, angle(D, H, G) == 0 - angle(H, D, G) mod 360, angle(H, G, D) == 0 - angle(D, G, H) mod 360, log(distance(D, G)) + log(distance(D, H)) == log(distance(G, H)) + log(distance(D, H)), log(distance(D, H)) + log(distance(D, G)) == log(distance(D, H)) + log(distance(G, H)), log(distance(D, G)) + log(distance(D, G)) == log(distance(G, H)) + log(distance(G, H))
By similar_triangle_basic_properties on B, D, A, D, B, C we get not_collinear(A, B, D), not_collinear(B, C, D), angle(B, D, A) == angle(D, B, C) mod 360, angle(B, C, D) == angle(D, A, B) mod 360, angle(A, B, D) == angle(C, D, B) mod 360, log(distance(B, D)) + log(distance(A, D)) == log(distance(B, D)) + log(distance(B, C)), log(distance(A, D)) + log(distance(C, D)) == log(distance(B, C)) + log(distance(A, B)), log(distance(A, B)) + log(distance(B, D)) == log(distance(C, D)) + log(distance(B, D))
By similar_triangle_basic_properties on C, B, D, A, D, B we get not_collinear(B, C, D), not_collinear(A, B, D), angle(A, D, B) == angle(C, B, D) mod 360, angle(B, D, C) == angle(D, B, A) mod 360, angle(B, A, D) == angle(D, C, B) mod 360, log(distance(A, D)) + log(distance(B, D)) == log(distance(B, C)) + log(distance(B, D)), log(distance(B, D)) + log(distance(A, B)) == log(distance(B, D)) + log(distance(C, D)), log(distance(A, B)) + log(distance(B, C)) == log(distance(C, D)) + log(distance(A, D))
By power_of_a_point_definition on F, H, E, c we get log(power_of_a_point(F, c)) == log(distance(F, H)) + log(distance(E, F))
By similar_triangle_basic_properties on B, A, C, D, C, A we get not_collinear(A, B, C), not_collinear(A, C, D), angle(B, A, C) == angle(D, C, A) mod 360, angle(A, C, B) == angle(C, A, D) mod 360, angle(A, D, C) == angle(C, B, A) mod 360, log(distance(A, B)) + log(distance(A, C)) == log(distance(C, D)) + log(distance(A, C)), log(distance(A, C)) + log(distance(A, D)) == log(distance(A, C)) + log(distance(B, C)), log(distance(A, D)) + log(distance(A, B)) == log(distance(B, C)) + log(distance(C, D))
By line_definition on A, line_intersection(j, l), j we get j == Line(A, line_intersection(j, l))
By concurrent_sufficient_conditions on j, l, Line(B, D) we get concurrent(j, l, Line(B, D))
By line_definition on H, line_intersection(j, l), l we get l == Line(H, line_intersection(j, l))
By line_definition on C, E, j we get j == Line(C, E)
By concurrent_sufficient_conditions on l, j, Line(B, D) we get concurrent(j, l, Line(B, D))
By line_intersection_definition on orthocenter(B, F, H), k, l we get orthocenter(B, F, H) == line_intersection(k, l)
By line_definition on C, line_intersection(j, l), j we get j == Line(C, line_intersection(j, l))
By median_definition on A, D, B, j we get j == median(A, B, D)
By line_definition on line_intersection(j, l), F, l we get l == Line(F, line_intersection(j, l))
By line_definition on E, A, j we get j == Line(A, E)
By line_intersection_definition on orthocenter(B, E, F), k, l we get orthocenter(B, E, F) == line_intersection(k, l)
By line_intersection_definition on E, j, l we get E == line_intersection(j, l)
By concurrent_sufficient_conditions on Line(A, E), i, f we get concurrent(f, i, Line(A, E))
By line_intersection_definition on A, Line(A, E), i we get A == line_intersection(i, Line(A, E))
By line_intersection_definition on D, Line(D, H), Line(D, G) we get D == line_intersection(Line(D, G), Line(D, H))
By line_intersection_definition on D, Line(D, H), i we get D == line_intersection(i, Line(D, H))
By line_intersection_definition on D, Line(D, G), i we get D == line_intersection(i, Line(D, G))
By perpendicular_line_definition on orthocenter(B, F, H), altitude(F, B, H), Line(B, H) we get altitude(F, B, H) == perpendicular_line(orthocenter(B, F, H), Line(B, H))
By concurrent_sufficient_conditions on Line(B, D), Line(E, G), l we get concurrent(l, Line(B, D), Line(E, G))
By line_intersection_definition on E, Line(B, D), Line(E, G) we get E == line_intersection(Line(B, D), Line(E, G))
By median_definition on D, A, C, Line(B, D) we get Line(B, D) == median(D, A, C)
By line_intersection_definition on G, Line(D, G), Line(A, G) we get G == line_intersection(Line(A, G), Line(D, G))
By concurrent_sufficient_conditions on Line(E, G), Line(A, E), l we get concurrent(l, Line(A, E), Line(E, G))
By perpendicular_line_definition on orthocenter(B, F, H), l, j we get l == perpendicular_line(orthocenter(B, F, H), j)
By concurrent_sufficient_conditions on Line(A, E), Line(A, G), f we get concurrent(f, Line(A, E), Line(A, G))
By line_intersection_definition on E, j, Line(E, G) we get E == line_intersection(j, Line(E, G))
By line_intersection_definition on D, Line(D, H), h we get D == line_intersection(h, Line(D, H))
By line_intersection_definition on G, Line(G, H), Line(E, G) we get G == line_intersection(Line(E, G), Line(G, H))
By concurrent_sufficient_conditions on Line(B, D), Line(A, E), l we get concurrent(l, Line(A, E), Line(B, D))
By concurrent_sufficient_conditions on Line(D, H), Line(A, H), l we get concurrent(l, Line(A, H), Line(D, H))
By line_intersection_definition on G, Line(E, G), Line(A, G) we get G == line_intersection(Line(A, G), Line(E, G))
By median_definition on B, A, C, Line(B, D) we get Line(B, D) == median(B, A, C)
By concurrent_sufficient_conditions on Line(A, H), i, j we get concurrent(i, j, Line(A, H))
By perpendicular_line_definition on B, Line(B, H), altitude(F, B, H) we get Line(B, H) == perpendicular_line(B, altitude(F, B, H))
By line_intersection_definition on H, Line(D, H), Line(G, H) we get H == line_intersection(Line(D, H), Line(G, H))
By perpendicular_line_definition on B, Line(B, D), altitude(F, B, E) we get Line(B, D) == perpendicular_line(B, altitude(F, B, E))
By concurrent_sufficient_conditions on Line(A, E), Line(E, G), l we get concurrent(l, Line(A, E), Line(E, G))
By line_intersection_definition on E, Line(A, E), Line(E, G) we get E == line_intersection(Line(A, E), Line(E, G))
By perpendicular_line_definition on E, j, l we get j == perpendicular_line(E, l)
By median_definition on G, C, A, Line(E, G) we get Line(E, G) == median(G, A, C)
By median_definition on C, D, B, j we get j == median(C, B, D)
By median_definition on C, D, B, Line(C, E) we get Line(C, E) == median(C, B, D)
By concurrent_sufficient_conditions on Line(A, G), Line(A, E), f we get concurrent(f, Line(A, E), Line(A, G))
By median_definition on H, C, A, l we get l == median(H, A, C)
By line_intersection_definition on E, Line(B, D), Line(A, E) we get E == line_intersection(Line(A, E), Line(B, D))
By line_intersection_definition on G, Line(D, G), Line(G, H) we get G == line_intersection(Line(D, G), Line(G, H))
By concurrent_sufficient_conditions on Line(G, H), Line(D, H), l we get concurrent(l, Line(D, H), Line(G, H))
By line_intersection_definition on A, Line(A, E), Line(A, H) we get A == line_intersection(Line(A, E), Line(A, H))
By line_intersection_definition on A, Line(A, H), i we get A == line_intersection(i, Line(A, H))
By line_intersection_definition on A, Line(A, E), Line(A, G) we get A == line_intersection(Line(A, E), Line(A, G))
By median_definition on F, A, C, l we get l == median(F, A, C)
By concurrent_sufficient_conditions on i, Line(A, H), f we get concurrent(f, i, Line(A, H))
By line_intersection_definition on G, Line(D, G), Line(E, G) we get G == line_intersection(Line(D, G), Line(E, G))
By concurrent_sufficient_conditions on i, Line(A, H), j we get concurrent(i, j, Line(A, H))
By perpendicular_line_definition on orthocenter(B, E, F), altitude(F, B, E), Line(B, D) we get altitude(F, B, E) == perpendicular_line(orthocenter(B, E, F), Line(B, D))
By concurrent_sufficient_conditions on Line(A, G), i, f we get concurrent(f, i, Line(A, G))
By concurrent_sufficient_conditions on Line(A, E), Line(A, H), f we get concurrent(f, Line(A, E), Line(A, H))
By perpendicular_line_definition on D, Line(B, D), altitude(F, B, E) we get Line(B, D) == perpendicular_line(D, altitude(F, B, E))
By concurrent_sufficient_conditions on Line(E, G), Line(B, D), l we get concurrent(l, Line(B, D), Line(E, G))
By line_intersection_definition on H, Line(D, H), Line(A, H) we get H == line_intersection(Line(A, H), Line(D, H))
By perpendicular_line_definition on H, Line(B, H), altitude(F, B, H) we get Line(B, H) == perpendicular_line(H, altitude(F, B, H))
By concurrent_sufficient_conditions on i, Line(A, G), j we get concurrent(i, j, Line(A, G))
By line_intersection_definition on D, Line(D, G), h we get D == line_intersection(h, Line(D, G))
By line_intersection_definition on D, Line(D, G), Line(B, D) we get D == line_intersection(Line(B, D), Line(D, G))
By perpendicular_line_definition on E, Line(B, D), altitude(F, B, E) we get Line(B, D) == perpendicular_line(E, altitude(F, B, E))
By perpendicular_line_definition on orthocenter(B, E, F), l, k we get l == perpendicular_line(orthocenter(B, E, F), k)
By concurrent_sufficient_conditions on i, Line(A, G), f we get concurrent(f, i, Line(A, G))
By concurrent_sufficient_conditions on Line(A, H), Line(A, E), f we get concurrent(f, Line(A, E), Line(A, H))
By perpendicular_line_definition on orthocenter(B, F, H), l, k we get l == perpendicular_line(orthocenter(B, F, H), k)
By line_intersection_definition on A, Line(A, G), i we get A == line_intersection(i, Line(A, G))
By perpendicular_line_definition on orthocenter(B, F, H), k, l we get k == perpendicular_line(orthocenter(B, F, H), l)
By perpendicular_line_definition on orthocenter(B, E, F), k, l we get k == perpendicular_line(orthocenter(B, E, F), l)
By concurrent_sufficient_conditions on Line(D, H), Line(G, H), l we get concurrent(l, Line(D, H), Line(G, H))
By concurrent_sufficient_conditions on i, Line(A, E), f we get concurrent(f, i, Line(A, E))
By concurrent_sufficient_conditions on Line(A, E), Line(B, D), l we get concurrent(l, Line(A, E), Line(B, D))
By line_intersection_definition on D, Line(D, H), Line(B, D) we get D == line_intersection(Line(B, D), Line(D, H))
By concurrent_sufficient_conditions on Line(A, G), i, j we get concurrent(i, j, Line(A, G))
By concurrent_sufficient_conditions on Line(A, H), Line(D, H), l we get concurrent(l, Line(A, H), Line(D, H))
By concurrent_sufficient_conditions on Line(A, H), i, f we get concurrent(f, i, Line(A, H))
By perpendicular_line_definition on orthocenter(B, E, F), l, j we get l == perpendicular_line(orthocenter(B, E, F), j)
By line_unique_intersection_v0 on l, k, orthocenter(B, E, F), F we get F == orthocenter(B, E, F)
By line_unique_intersection_v0 on k, l, F, orthocenter(B, F, H) we get F == orthocenter(B, F, H)
By line_unique_intersection_v0 on k, l, orthocenter(B, E, F), orthocenter(B, F, H) we get orthocenter(B, E, F) == orthocenter(B, F, H)
By line_unique_intersection_v1 on Line(D, H), l, H, line_intersection(j, l) we get line_intersection(j, l) not in Line(D, H)
By line_unique_intersection_v1 on h, j, C, line_intersection(j, l) we get line_intersection(j, l) not in h
By line_unique_intersection_v1 on i, j, A, line_intersection(j, l) we get line_intersection(j, l) not in i
By line_unique_intersection_v1 on g, j, C, line_intersection(j, l) we get line_intersection(j, l) not in g
By line_unique_intersection_v1 on f, j, A, line_intersection(j, l) we get line_intersection(j, l) not in f
By line_unique_intersection_v1 on Line(A, H), j, A, line_intersection(j, l) we get line_intersection(j, l) not in Line(A, H)
By line_unique_intersection_v1 on k, l, F, line_intersection(j, l) we get line_intersection(j, l) not in k
By line_unique_intersection_v1 on Line(G, H), l, H, line_intersection(j, l) we get line_intersection(j, l) not in Line(G, H)
By line_unique_intersection_v1 on Line(A, G), j, A, line_intersection(j, l) we get line_intersection(j, l) not in Line(A, G)
By same_angle_v3 on E, H, F, C we get angle(H, E, C) == angle(F, E, C) + 180 mod 360
By same_angle_v1 on A, E, C, H we get angle(C, A, H) == angle(E, A, H) mod 360
By same_angle_v1 on C, A, E, B we get angle(A, C, B) == angle(E, C, B) mod 360
By same_angle_v3 on E, C, A, F we get angle(C, E, F) == angle(A, E, F) + 180 mod 360
By same_angle_v0 on A, C, E, B we get angle(C, A, B) == angle(E, A, B) mod 360
By same_angle_v1 on A, E, C, D we get angle(C, A, D) == angle(E, A, D) mod 360
By same_angle_v2 on E, A, C, G we get angle(A, E, G) == angle(C, E, G) + 180 mod 360
By same_angle_v3 on E, A, C, H we get angle(A, E, H) == angle(C, E, H) + 180 mod 360
By same_angle_v0 on C, E, A, D we get angle(A, C, D) == angle(E, C, D) mod 360
By same_angle_v1 on A, E, C, G we get angle(C, A, G) == angle(E, A, G) mod 360
By projection_definition on H, E, j we get E == projection(H, j)
By between_imply_not_between on C, E, A we get collinear_and_not_between(A, C, E)
By projection_definition on F, E, j we get E == projection(F, j)
By between_imply_not_between on A, E, C we get collinear_and_not_between(C, A, E)
By parallel_line_definition on orthocenter(B, E, F), k, j we get k == parallel_line(orthocenter(B, E, F), j)
By parallel_line_definition on orthocenter(B, F, H), k, j we get k == parallel_line(orthocenter(B, F, H), j)
By parallel_line_definition on E, j, k we get j == parallel_line(E, k)
By different_points_v1 on H, B we get 0 != distance(B, H)
By same_angle_v0 on H, F, E, B we get angle(E, H, B) == angle(F, H, B) mod 360
By same_angle_v1 on B, E, D, H we get angle(D, B, H) == angle(E, B, H) mod 360
By in_imply_collinear on orthocenter(B, E, F), F, B we get collinear(B, F, orthocenter(B, E, F))
By in_imply_collinear on orthocenter(B, F, H), F, B we get collinear(B, F, orthocenter(B, F, H))
By collinear_definition on A, E, C we get E in Line(A, C), C in Line(A, E), Line(A, C) == Line(A, E), 0 == 2 * angle(E, A, C) mod 360
By in_imply_collinear on orthocenter(B, F, H), H, E we get collinear(E, H, orthocenter(B, F, H))
By in_imply_collinear on orthocenter(B, F, H), F, E we get collinear(E, F, orthocenter(B, F, H))
By in_imply_collinear on orthocenter(B, E, F), H, F we get collinear(F, H, orthocenter(B, E, F))
By in_imply_collinear on orthocenter(B, E, F), H, E we get collinear(E, H, orthocenter(B, E, F))
By in_imply_collinear on orthocenter(B, E, F), E, F we get collinear(E, F, orthocenter(B, E, F))
By in_imply_collinear on orthocenter(B, F, H), F, H we get collinear(F, H, orthocenter(B, F, H))
By line_containment_inequality on orthocenter(B, F, H), C, l we get C != orthocenter(B, F, H)
By line_inequality on Line(B, H), Line(B, D), H we get Line(B, D) != Line(B, H)
By line_inequality on Line(C, E), Line(G, H), E we get Line(C, E) != Line(G, H)
By between_implies_angles on C, E, A we get 180 == angle(C, E, A) mod 360, 0 == angle(E, A, C) mod 360, 0 == angle(A, C, E) mod 360
By line_containment_inequality on orthocenter(B, E, F), A, l we get A != orthocenter(B, E, F)
By line_inequality on altitude(F, B, E), Line(E, G), F we get Line(E, G) != altitude(F, B, E)
By collinear_definition on E, A, C we get A in Line(C, E), C in Line(A, E), Line(A, E) == Line(C, E), 0 == 2 * angle(A, E, C) mod 360
By line_inequality on altitude(F, B, H), Line(D, G), F we get Line(D, G) != altitude(F, B, H)
By line_inequality on altitude(F, B, H), Line(G, H), F we get Line(G, H) != altitude(F, B, H)
By line_inequality on Line(C, E), k, E we get k != Line(C, E)
By not_in_line_equivalent_to_not_collinear_v0_r on D, C, E we get D not in Line(C, E)
By line_inequality on altitude(F, B, E), Line(A, G), F we get Line(A, G) != altitude(F, B, E)
By between_implies_angles on A, E, C we get 180 == angle(A, E, C) mod 360, 0 == angle(E, C, A) mod 360, 0 == angle(C, A, E) mod 360
By collinear_definition on E, C, A we get C in Line(A, E), A in Line(C, E), Line(A, E) == Line(C, E), 0 == 2 * angle(C, E, A) mod 360
By line_inequality on Line(B, H), h, H we get h != Line(B, H)
By collinear_definition on A, C, E we get C in Line(A, E), E in Line(A, C), Line(A, C) == Line(A, E), 0 == 2 * angle(C, A, E) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on G, B, H we get G not in Line(B, H)
By line_inequality on Line(C, E), Line(D, H), E we get Line(C, E) != Line(D, H)
By line_inequality on altitude(F, B, H), j, F we get j != altitude(F, B, H)
By line_inequality on Line(C, E), i, E we get i != Line(C, E)
By collinear_definition on C, A, E we get A in Line(C, E), E in Line(A, C), Line(A, C) == Line(C, E), 0 == 2 * angle(A, C, E) mod 360
By line_inequality on Line(C, E), Line(A, H), E we get Line(A, H) != Line(C, E)
By line_inequality on altitude(F, B, E), Line(D, G), F we get Line(D, G) != altitude(F, B, E)
By line_containment_inequality on orthocenter(B, F, H), B, l we get B != orthocenter(B, F, H)
By line_inequality on Line(C, E), h, E we get h != Line(C, E)
By line_containment_inequality on orthocenter(B, F, H), A, l we get A != orthocenter(B, F, H)
By not_in_line_equivalent_to_not_collinear_v0_r on D, B, H we get D not in Line(B, H)
By line_containment_inequality on orthocenter(B, E, F), D, l we get D != orthocenter(B, E, F)
By line_inequality on Line(C, E), f, C we get f != Line(C, E)
By collinear_definition on C, E, A we get E in Line(A, C), A in Line(C, E), Line(A, C) == Line(C, E), 0 == 2 * angle(E, C, A) mod 360
By line_inequality on altitude(F, B, E), g, F we get g != altitude(F, B, E)
By log_of_2_times_distance on C, A, E, A we get log(distance(A, C)) == 0.6931471805599453 + log(distance(A, E))
By line_containment_inequality on orthocenter(B, E, F), B, l we get B != orthocenter(B, E, F)
By line_inequality on Line(B, H), Line(D, H), B we get Line(B, H) != Line(D, H)
By isosceles_triangle_properties on E, A, C we get distance(A, E) == distance(C, E), angle(A, C, E) == angle(E, A, C) mod 360
By isosceles_triangle_properties on E, C, A we get distance(A, E) == distance(C, E), angle(C, A, E) == angle(E, C, A) mod 360
By line_inequality on altitude(F, B, H), Line(E, G), F we get Line(E, G) != altitude(F, B, H)
By line_containment_inequality on orthocenter(B, F, H), H, k we get H != orthocenter(B, F, H)
By line_inequality on Line(B, H), f, H we get f != Line(B, H)
By line_inequality on Line(B, H), k, H we get k != Line(B, H)
By line_inequality on Line(B, H), l, B we get l != Line(B, H)
By not_in_line_equivalent_to_not_collinear_v0_r on C, H, B we get C not in Line(B, H)
By line_inequality on altitude(F, B, E), Line(A, E), F we get Line(A, E) != altitude(F, B, E)
By line_inequality on altitude(F, B, E), Line(G, H), F we get Line(G, H) != altitude(F, B, E)
By line_inequality on altitude(F, B, E), f, F we get f != altitude(F, B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on H, C, E we get H not in Line(C, E)
By not_in_line_equivalent_to_not_collinear_v0_r on G, C, E we get G not in Line(C, E)
By line_inequality on Line(C, E), Line(B, D), C we get Line(B, D) != Line(C, E)
By not_in_line_equivalent_to_not_collinear_v0_r on A, H, B we get A not in Line(B, H)
By line_containment_inequality on orthocenter(B, F, H), E, k we get E != orthocenter(B, F, H)
By line_inequality on Line(C, E), Line(A, G), C we get Line(A, G) != Line(C, E)
By line_containment_inequality on orthocenter(B, F, H), D, l we get D != orthocenter(B, F, H)
By line_inequality on Line(B, H), Line(A, E), B we get Line(A, E) != Line(B, H)
By line_containment_inequality on orthocenter(B, E, F), G, k we get G != orthocenter(B, E, F)
By not_in_line_equivalent_to_not_collinear_v0_r on B, C, E we get B not in Line(C, E)
By line_inequality on altitude(F, B, E), Line(D, H), F we get Line(D, H) != altitude(F, B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on F, H, B we get F not in Line(B, H)
By line_inequality on Line(B, H), Line(D, G), B we get Line(B, H) != Line(D, G)
By line_containment_inequality on orthocenter(B, E, F), C, l we get C != orthocenter(B, E, F)
By line_inequality on altitude(F, B, H), Line(D, H), F we get Line(D, H) != altitude(F, B, H)
By line_inequality on Line(B, H), Line(E, G), H we get Line(B, H) != Line(E, G)
By line_inequality on altitude(F, B, E), h, F we get h != altitude(F, B, E)
By line_inequality on altitude(F, B, E), j, F we get j != altitude(F, B, E)
By line_containment_inequality on orthocenter(B, F, H), G, k we get G != orthocenter(B, F, H)
By line_containment_inequality on orthocenter(B, E, F), E, k we get E != orthocenter(B, E, F)
By line_inequality on altitude(F, B, H), Line(A, E), F we get Line(A, E) != altitude(F, B, H)
By line_circle_intersection_has_at_most_two_points_0 on E, A, C, c we get C not in c
By line_inequality on altitude(F, B, H), Line(A, G), F we get Line(A, G) != altitude(F, B, H)
By line_inequality on Line(B, H), g, H we get g != Line(B, H)
By not_in_line_equivalent_to_not_collinear_v0_r on E, B, H we get E not in Line(B, H)
By line_inequality on Line(B, H), j, B we get j != Line(B, H)
By line_inequality on Line(B, H), Line(A, G), B we get Line(A, G) != Line(B, H)
By line_inequality on Line(C, E), l, C we get l != Line(C, E)
By line_inequality on altitude(F, B, H), i, F we get i != altitude(F, B, H)
By line_inequality on altitude(F, B, H), f, F we get f != altitude(F, B, H)
By not_in_line_equivalent_to_not_collinear_v0_r on F, E, C we get F not in Line(C, E)
By line_inequality on altitude(F, B, H), Line(B, D), F we get Line(B, D) != altitude(F, B, H)
By line_inequality on altitude(F, B, H), h, F we get h != altitude(F, B, H)
By line_inequality on altitude(F, B, E), Line(A, H), F we get Line(A, H) != altitude(F, B, E)
By line_inequality on Line(C, E), Line(E, G), C we get Line(C, E) != Line(E, G)
By line_inequality on altitude(F, B, E), Line(B, D), F we get Line(B, D) != altitude(F, B, E)
By line_inequality on Line(B, H), i, B we get i != Line(B, H)
By line_inequality on Line(B, H), Line(A, H), B we get Line(A, H) != Line(B, H)
By line_containment_inequality on orthocenter(B, E, F), H, k we get H != orthocenter(B, E, F)
By line_inequality on Line(B, H), Line(G, H), B we get Line(B, H) != Line(G, H)
By line_inequality on altitude(F, B, E), i, F we get i != altitude(F, B, E)
By line_inequality on altitude(F, B, H), g, F we get g != altitude(F, B, H)
By line_inequality on Line(C, E), Line(D, G), C we get Line(C, E) != Line(D, G)
By line_inequality on altitude(F, B, H), Line(A, H), F we get Line(A, H) != altitude(F, B, H)
By line_inequality on Line(C, E), g, E we get g != Line(C, E)
By similar_triangle_basic_properties on C, B, E, A, D, E we get not_collinear(B, C, E), not_collinear(A, D, E), angle(A, D, E) == angle(C, B, E) mod 360, angle(B, E, C) == angle(D, E, A) mod 360, angle(E, A, D) == angle(E, C, B) mod 360, log(distance(A, D)) + log(distance(B, E)) == log(distance(B, C)) + log(distance(D, E)), log(distance(B, E)) + log(distance(A, E)) == log(distance(D, E)) + log(distance(C, E)), log(distance(A, E)) + log(distance(B, C)) == log(distance(C, E)) + log(distance(A, D))
By similar_triangle_basic_properties on B, C, E, D, A, E we get not_collinear(B, C, E), not_collinear(A, D, E), angle(B, C, E) == angle(D, A, E) mod 360, angle(A, E, D) == angle(C, E, B) mod 360, angle(E, B, C) == angle(E, D, A) mod 360, log(distance(A, D)) + log(distance(C, E)) == log(distance(B, C)) + log(distance(A, E)), log(distance(A, E)) + log(distance(B, E)) == log(distance(C, E)) + log(distance(D, E)), log(distance(B, E)) + log(distance(A, D)) == log(distance(D, E)) + log(distance(B, C))
By collinear_definition on H, F, line_intersection(j, l) we get F in Line(H, line_intersection(j, l)), line_intersection(j, l) in Line(F, H), Line(F, H) == Line(H, line_intersection(j, l)), 0 == 2 * angle(F, H, line_intersection(j, l)) mod 360
By similar_triangle_basic_properties on B, E, A, D, E, C we get not_collinear(A, B, E), not_collinear(C, D, E), angle(B, E, A) == angle(D, E, C) mod 360, angle(E, A, B) == angle(E, C, D) mod 360, angle(A, B, E) == angle(C, D, E) mod 360, log(distance(B, E)) + log(distance(C, E)) == log(distance(D, E)) + log(distance(A, E)), log(distance(A, E)) + log(distance(C, D)) == log(distance(C, E)) + log(distance(A, B)), log(distance(A, B)) + log(distance(D, E)) == log(distance(C, D)) + log(distance(B, E))
By similar_triangle_basic_properties on A, E, B, C, E, D we get not_collinear(A, B, E), not_collinear(C, D, E), angle(A, E, B) == angle(C, E, D) mod 360, angle(E, B, A) == angle(E, D, C) mod 360, angle(B, A, E) == angle(D, C, E) mod 360, log(distance(A, E)) + log(distance(D, E)) == log(distance(C, E)) + log(distance(B, E)), log(distance(B, E)) + log(distance(C, D)) == log(distance(D, E)) + log(distance(A, B)), log(distance(A, B)) + log(distance(C, E)) == log(distance(C, D)) + log(distance(A, E))
By collinear_definition on C, line_intersection(j, l), A we get line_intersection(j, l) in Line(A, C), A in Line(C, line_intersection(j, l)), Line(A, C) == Line(C, line_intersection(j, l)), 0 == 2 * angle(line_intersection(j, l), C, A) mod 360
By collinear_definition on F, line_intersection(j, l), H we get line_intersection(j, l) in Line(F, H), H in Line(F, line_intersection(j, l)), Line(F, H) == Line(F, line_intersection(j, l)), 0 == 2 * angle(line_intersection(j, l), F, H) mod 360
By collinear_definition on F, H, line_intersection(j, l) we get H in Line(F, line_intersection(j, l)), line_intersection(j, l) in Line(F, H), Line(F, H) == Line(F, line_intersection(j, l)), 0 == 2 * angle(H, F, line_intersection(j, l)) mod 360
By collinear_definition on A, C, line_intersection(j, l) we get C in Line(A, line_intersection(j, l)), line_intersection(j, l) in Line(A, C), Line(A, C) == Line(A, line_intersection(j, l)), 0 == 2 * angle(C, A, line_intersection(j, l)) mod 360
By log_of_2_times_distance on C, A, C, E we get log(distance(A, C)) == 0.6931471805599453 + log(distance(C, E))
By collinear_definition on F, E, line_intersection(j, l) we get E in Line(F, line_intersection(j, l)), line_intersection(j, l) in Line(E, F), Line(E, F) == Line(F, line_intersection(j, l)), 0 == 2 * angle(E, F, line_intersection(j, l)) mod 360
By collinear_definition on H, line_intersection(j, l), E we get line_intersection(j, l) in Line(E, H), E in Line(H, line_intersection(j, l)), Line(E, H) == Line(H, line_intersection(j, l)), 0 == 2 * angle(line_intersection(j, l), H, E) mod 360
By collinear_definition on C, A, line_intersection(j, l) we get A in Line(C, line_intersection(j, l)), line_intersection(j, l) in Line(A, C), Line(A, C) == Line(C, line_intersection(j, l)), 0 == 2 * angle(A, C, line_intersection(j, l)) mod 360
By collinear_definition on F, line_intersection(j, l), E we get line_intersection(j, l) in Line(E, F), E in Line(F, line_intersection(j, l)), Line(E, F) == Line(F, line_intersection(j, l)), 0 == 2 * angle(line_intersection(j, l), F, E) mod 360
By perpendicular_lines_draw_intersection on altitude(F, B, H), Line(B, H) we get exists(line_intersection(Line(B, H), altitude(F, B, H)))
By altitude_definition on F, B, D, altitude(F, B, E) we get altitude(F, B, D) == altitude(F, B, E)
By perpendicular_lines_draw_intersection on altitude(F, B, E), Line(B, D) we get exists(line_intersection(Line(B, D), altitude(F, B, E)))
By collinear_definition on H, line_intersection(j, l), F we get line_intersection(j, l) in Line(F, H), F in Line(H, line_intersection(j, l)), Line(F, H) == Line(H, line_intersection(j, l)), 0 == 2 * angle(line_intersection(j, l), H, F) mod 360
By collinear_definition on A, line_intersection(j, l), C we get line_intersection(j, l) in Line(A, C), C in Line(A, line_intersection(j, l)), Line(A, C) == Line(A, line_intersection(j, l)), 0 == 2 * angle(line_intersection(j, l), A, C) mod 360
By collinear_definition on H, E, line_intersection(j, l) we get E in Line(H, line_intersection(j, l)), line_intersection(j, l) in Line(E, H), Line(E, H) == Line(H, line_intersection(j, l)), 0 == 2 * angle(E, H, line_intersection(j, l)) mod 360
By collinear_definition on line_intersection(j, l), A, C we get A in Line(C, line_intersection(j, l)), C in Line(A, line_intersection(j, l)), Line(A, line_intersection(j, l)) == Line(C, line_intersection(j, l)), 0 == 2 * angle(A, line_intersection(j, l), C) mod 360
By altitude_definition on F, E, D, altitude(F, B, E) we get altitude(F, B, E) == altitude(F, D, E)
By collinear_definition on line_intersection(j, l), H, F we get H in Line(F, line_intersection(j, l)), F in Line(H, line_intersection(j, l)), Line(F, line_intersection(j, l)) == Line(H, line_intersection(j, l)), 0 == 2 * angle(H, line_intersection(j, l), F) mod 360
By collinear_definition on line_intersection(j, l), F, H we get F in Line(H, line_intersection(j, l)), H in Line(F, line_intersection(j, l)), Line(F, line_intersection(j, l)) == Line(H, line_intersection(j, l)), 0 == 2 * angle(F, line_intersection(j, l), H) mod 360
By collinear_definition on line_intersection(j, l), C, A we get C in Line(A, line_intersection(j, l)), A in Line(C, line_intersection(j, l)), Line(A, line_intersection(j, l)) == Line(C, line_intersection(j, l)), 0 == 2 * angle(C, line_intersection(j, l), A) mod 360
By isosceles_triangle_altitude_v1 on E, A, C we get identical(perpendicular_bisector(A, C), internal_angle_bisector(A, E, C), perpendicular_line(E, Line(A, C)))
By isosceles_triangle_altitude_v1 on E, C, A we get identical(perpendicular_bisector(A, C), internal_angle_bisector(A, E, C), perpendicular_line(E, Line(A, C)))
By line_intersection_definition on B, f, Line(B, H) we get B == line_intersection(f, Line(B, H))
By line_intersection_definition on H, l, Line(B, H) we get H == line_intersection(l, Line(B, H))
By line_intersection_definition on H, Line(B, H), Line(A, H) we get H == line_intersection(Line(A, H), Line(B, H))
By line_intersection_definition on H, Line(G, H), Line(B, H) we get H == line_intersection(Line(B, H), Line(G, H))
By line_intersection_definition on B, Line(B, D), Line(B, H) we get B == line_intersection(Line(B, D), Line(B, H))
By line_intersection_definition on B, Line(B, H), g we get B == line_intersection(g, Line(B, H))
By line_intersection_definition on B, k, Line(B, H) we get B == line_intersection(k, Line(B, H))
By perpendicular_line_definition on line_intersection(Line(B, H), altitude(F, B, H)), Line(B, H), altitude(F, B, H) we get Line(B, H) == perpendicular_line(line_intersection(Line(B, H), altitude(F, B, H)), altitude(F, B, H))
By line_intersection_definition on H, Line(B, H), Line(D, H) we get H == line_intersection(Line(B, H), Line(D, H))
By perpendicular_line_definition on line_intersection(Line(B, D), altitude(F, B, D)), altitude(F, B, D), Line(B, D) we get altitude(F, B, D) == perpendicular_line(line_intersection(Line(B, D), altitude(F, B, D)), Line(B, D))
By perpendicular_line_definition on line_intersection(Line(B, H), altitude(F, B, H)), altitude(F, B, H), Line(B, H) we get altitude(F, B, H) == perpendicular_line(line_intersection(Line(B, H), altitude(F, B, H)), Line(B, H))
By perpendicular_line_definition on line_intersection(Line(B, D), altitude(F, B, D)), Line(B, D), altitude(F, B, D) we get Line(B, D) == perpendicular_line(line_intersection(Line(B, D), altitude(F, B, D)), altitude(F, B, D))
By same_angle_converse_v1 on G, H, A, E we get collinear(A, G, H)
By perpendicular_direction_conditions_v0 on B, C, H, D we get perpendicular(Line(B, C), Line(D, H))
By perpendicular_direction_conditions_v0 on D, A, D, H we get perpendicular(Line(A, D), Line(D, H))
By projection_definition on C, E, l we get E == projection(C, l)
By projection_definition on A, E, l we get E == projection(A, l)
By in_imply_collinear on line_intersection(Line(B, D), altitude(F, B, D)), D, E we get collinear(D, E, line_intersection(Line(B, D), altitude(F, B, D)))
By in_imply_collinear on line_intersection(Line(B, D), altitude(F, B, D)), B, D we get collinear(B, D, line_intersection(Line(B, D), altitude(F, B, D)))
By in_imply_collinear on line_intersection(Line(B, H), altitude(F, B, H)), H, B we get collinear(B, H, line_intersection(Line(B, H), altitude(F, B, H)))
By in_imply_collinear on line_intersection(Line(B, D), altitude(F, B, D)), E, B we get collinear(B, E, line_intersection(Line(B, D), altitude(F, B, D)))
By point_on_perpendicular_bisector on C, A, H, l we get distance(A, H) == distance(C, H)
By point_on_perpendicular_bisector on C, A, F, l we get distance(A, F) == distance(C, F)
By reverse_direction on H, B we get 180 == direction(H, B) - direction(B, H) mod 360
By reverse_direction on B, H we get 180 == direction(B, H) - direction(H, B) mod 360
By line_containment_inequality on line_intersection(Line(B, D), altitude(F, B, D)), H, Line(B, D) we get H != line_intersection(Line(B, D), altitude(F, B, D))
By line_containment_inequality on line_intersection(Line(B, H), altitude(F, B, H)), D, Line(B, H) we get D != line_intersection(Line(B, H), altitude(F, B, H))
By line_containment_inequality on line_intersection(Line(B, D), altitude(F, B, D)), G, Line(B, D) we get G != line_intersection(Line(B, D), altitude(F, B, D))
By line_inequality on altitude(F, B, D), Line(B, H), F we get Line(B, H) != altitude(F, B, D)
By line_containment_inequality on line_intersection(Line(B, D), altitude(F, B, D)), F, Line(B, D) we get F != line_intersection(Line(B, D), altitude(F, B, D))
By line_containment_inequality on line_intersection(Line(B, D), altitude(F, B, D)), C, Line(B, D) we get C != line_intersection(Line(B, D), altitude(F, B, D))
By line_containment_inequality on line_intersection(Line(B, H), altitude(F, B, H)), G, Line(B, H) we get G != line_intersection(Line(B, H), altitude(F, B, H))
By line_containment_inequality on line_intersection(Line(B, H), altitude(F, B, H)), A, Line(B, H) we get A != line_intersection(Line(B, H), altitude(F, B, H))
By line_containment_inequality on line_intersection(Line(B, H), altitude(F, B, H)), F, Line(B, H) we get F != line_intersection(Line(B, H), altitude(F, B, H))
By line_containment_inequality on line_intersection(Line(B, H), altitude(F, B, H)), C, Line(B, H) we get C != line_intersection(Line(B, H), altitude(F, B, H))
By line_containment_inequality on line_intersection(Line(B, D), altitude(F, B, D)), A, Line(B, D) we get A != line_intersection(Line(B, D), altitude(F, B, D))
By line_containment_inequality on line_intersection(Line(B, H), altitude(F, B, H)), E, Line(B, H) we get E != line_intersection(Line(B, H), altitude(F, B, H))
By line_inequality on altitude(F, B, H), Line(B, H), F we get Line(B, H) != altitude(F, B, H)
By internal_angle_bisector_definition_v0_r on H, C, F, E we get Line(C, E) == internal_angle_bisector(F, E, H)
By external_angle_bisector_definition_v0_r on A, F, A, E we get Line(E, F) == external_angle_bisector(A, E, A)
By internal_angle_bisector_definition_v0_r on A, H, A, G we get Line(G, H) == internal_angle_bisector(A, G, A)
By external_angle_bisector_definition_v0_r on H, A, H, E we get Line(A, E) == external_angle_bisector(H, E, H)
By external_angle_bisector_definition_v0_r on A, H, A, E we get Line(E, H) == external_angle_bisector(A, E, A)
By external_angle_bisector_definition_v0_r on F, C, F, E we get Line(C, E) == external_angle_bisector(F, E, F)
By external_angle_bisector_definition_v0_r on H, A, H, D we get Line(A, D) == external_angle_bisector(H, D, H)
By internal_angle_bisector_definition_v0_r on H, A, F, E we get Line(A, E) == internal_angle_bisector(F, E, H)
By external_angle_bisector_definition_v0_r on H, C, H, E we get Line(C, E) == external_angle_bisector(H, E, H)
By internal_angle_bisector_definition_v0_r on G, A, G, H we get Line(A, H) == internal_angle_bisector(G, H, G)
By external_angle_bisector_definition_v0_r on C, F, C, E we get Line(E, F) == external_angle_bisector(C, E, C)
By external_angle_bisector_definition_v0_r on F, A, F, E we get Line(A, E) == external_angle_bisector(F, E, F)
By internal_angle_bisector_definition_v0_r on H, G, H, A we get Line(A, G) == internal_angle_bisector(H, A, H)
By internal_angle_bisector_definition_v0_r on G, H, G, A we get Line(A, H) == internal_angle_bisector(G, A, G)
By external_angle_bisector_definition_v0_r on A, H, A, D we get Line(D, H) == external_angle_bisector(A, D, A)
By internal_angle_bisector_definition_v0_r on E, E, H, F we get Line(E, F) == internal_angle_bisector(E, F, H)
By internal_angle_bisector_definition_v0_r on F, E, E, H we get Line(E, H) == internal_angle_bisector(E, H, F)
By external_angle_bisector_definition_v0_r on C, H, C, E we get Line(E, H) == external_angle_bisector(C, E, C)
By internal_angle_bisector_definition_v0_r on A, E, A, C we get Line(C, E) == internal_angle_bisector(A, C, A)
By internal_angle_bisector_definition_v0_r on C, E, C, A we get Line(A, E) == internal_angle_bisector(C, A, C)
By internal_angle_bisector_definition_v0_r on H, A, H, G we get Line(A, G) == internal_angle_bisector(H, G, H)
By internal_angle_bisector_definition_v0_r on A, C, A, E we get Line(C, E) == internal_angle_bisector(A, E, A)
By internal_angle_bisector_definition_v0_r on E, C, E, A we get Line(A, C) == internal_angle_bisector(E, A, E)
By internal_angle_bisector_definition_v0_r on A, G, A, H we get Line(G, H) == internal_angle_bisector(A, H, A)
By internal_angle_bisector_definition_v0_r on C, A, C, E we get Line(A, E) == internal_angle_bisector(C, E, C)
By internal_angle_bisector_definition_v0_r on E, A, E, C we get Line(A, C) == internal_angle_bisector(E, C, E)
By anti_similar_triangle_basic_properties on H, D, A, B, F, E we get not_collinear(A, D, H), not_collinear(B, E, F), angle(H, D, A) == 0 - angle(B, F, E) mod 360, angle(D, A, H) == 0 - angle(F, E, B) mod 360, angle(A, H, D) == 0 - angle(E, B, F) mod 360, log(distance(B, F)) + log(distance(A, D)) == log(distance(D, H)) + log(distance(E, F)), log(distance(A, D)) + log(distance(B, E)) == log(distance(E, F)) + log(distance(A, H)), log(distance(A, H)) + log(distance(B, F)) == log(distance(B, E)) + log(distance(D, H))
By sas_anti_congruence on A, E, H, C, E, H we get anti_congruent_triangles(A, E, H, C, E, H)
By sas_anti_similarity on C, E, H, A, E, H we get anti_similar_triangles(A, E, H, C, E, H)
By altitude_definition on H, E, C, l we get l == altitude(H, C, E)
By altitude_definition on F, C, E, l we get l == altitude(F, C, E)
By altitude_definition on H, E, A, l we get l == altitude(H, A, E)
By sas_anti_similarity on H, E, A, H, E, C we get anti_similar_triangles(A, E, H, C, E, H)
By power_of_a_point_definition on C, A, E, c we get log(power_of_a_point(C, c)) == log(distance(A, C)) + log(distance(C, E))
By anti_similar_triangle_basic_properties on A, D, H, E, F, B we get not_collinear(A, D, H), not_collinear(B, E, F), angle(A, D, H) == 0 - angle(E, F, B) mod 360, angle(D, H, A) == 0 - angle(F, B, E) mod 360, angle(H, A, D) == 0 - angle(B, E, F) mod 360, log(distance(A, D)) + log(distance(B, F)) == log(distance(E, F)) + log(distance(D, H)), log(distance(B, F)) + log(distance(A, H)) == log(distance(D, H)) + log(distance(B, E)), log(distance(A, H)) + log(distance(E, F)) == log(distance(B, E)) + log(distance(A, D))
By altitude_definition on F, E, A, l we get l == altitude(F, A, E)
By sas_anti_similarity on A, E, H, C, E, H we get anti_similar_triangles(A, E, H, C, E, H)
By sas_anti_congruence on H, E, A, H, E, C we get anti_congruent_triangles(A, E, H, C, E, H)
By sas_anti_congruence on C, E, H, A, E, H we get anti_congruent_triangles(A, E, H, C, E, H)
By sas_anti_similarity on H, E, C, H, E, A we get anti_similar_triangles(A, E, H, C, E, H)
By sas_anti_congruence on H, E, C, H, E, A we get anti_congruent_triangles(A, E, H, C, E, H)
By sas_anti_congruence on A, E, F, C, E, F we get anti_congruent_triangles(A, E, F, C, E, F)
By sas_anti_congruence on F, E, C, F, E, A we get anti_congruent_triangles(A, E, F, C, E, F)
By sas_anti_similarity on C, E, F, A, E, F we get anti_similar_triangles(A, E, F, C, E, F)
By sas_anti_congruence on C, E, F, A, E, F we get anti_congruent_triangles(A, E, F, C, E, F)
By sas_anti_similarity on A, E, F, C, E, F we get anti_similar_triangles(A, E, F, C, E, F)
By sas_anti_similarity on F, E, C, F, E, A we get anti_similar_triangles(A, E, F, C, E, F)
By sas_anti_similarity on F, E, A, F, E, C we get anti_similar_triangles(A, E, F, C, E, F)
By sas_anti_congruence on F, E, A, F, E, C we get anti_congruent_triangles(A, E, F, C, E, F)
