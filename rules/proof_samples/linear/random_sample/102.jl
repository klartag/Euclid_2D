Assumptions:
A, B, C, D, E, F, G, H: Point
f, g, h: Line
c, d, e, k: Circle
distinct(A, B, C, D, E, F, G, H)
distinct(f, g, h)
distinct(c, d, e, k)
f == Line(A, B)
g == parallel_line(C, f)
c == Circle(A, B, C)
D in g, c
E == center(c)
d == Circle(A, D, E)
h == Line(A, C)
e == Circle(B, C, E)
k == Circle(C, D, E)
F in h, k
G in h, e
H == center(d)

Embedding:
C := {"x": "-0.363695567275096720560867424865136854350566864013671875", "y": "1.5023510045811845348140423084259964525699615478515625"}
B := {"x": "0.73789058234559845583788728617946617305278778076171875", "y": "0.1837950334576072541903357659975881688296794891357421875"}
A := {"x": "-1.5501510254954293799301012768410146236419677734375", "y": "1.3066733273928103908900766327860765159130096435546875"}
c := {"center": {"x": "-0.73699838951877777009657116856684920361058483815137624601105818651041757492315746577041217761655453393918841330914389360130818896395246652397353231273750804487986788070877270632135801056620948643678132273475270258648092343274036150170516955997584391150345704036506200224584559251783613469204970920492838444460687060385579984897308284399417312847549064482017778929568514610772831266117884214193466070920712183682919099707555691096337792703938552203502085675860430493372616585940614686598096124016464081955612285248381679417576820591901235853824347696363175502032252437546752420605914607844571134197711546982981615943647289741647859457814760236883240415750148504487004071023614356341975122750808500415916300943713151862201292538135825925541561319338704131512429670858346843893702414663284398306978803864042435322197230004994503760705261618636770824072421915184197434578707772617134489062698863027892533060033166005331081643611992157274996244742633785526836033674035784941346053338872040807718130175294629006487522628834926250155814030477033576438591127907655771921623617834262433877266261657571902269831813558117463930003868478880545302334556636648865156964467143106769996952258908386602960772808612755644238836367705930618593660991148090377133341179495901569296343145909948528398666414948479372251415199724674106630199699966009861325243274854317482244954296708632467630940669467674733146848354865166963723546906059342350068394457297342142415934349218289939542327906579756417931906276897133720083309720791877358726343972849752145535044711612916721849614168393017511212248947982307204123784694347637589256695424487036967247395635734856744935265182739630238424260344491353988785559535319847942131939153228187401319039305055183656828996169800019087842555300449375741716522152271404224085706663136354003204704058607930723466420623914600066733488192629549838869650249687621933320722111828943222889652688602029613790796525363386552218373766152504947609701919618133345114544817199290316254969150577889329488036", "y": "0.071038108549430154210399226652075638280650912989254440711711986281489836812557710050874243074756548074791896264937929283210840740366405776879356524011662794137536713520650253205909323347538342056953662773048434395065798718590072023210242047756738380398122439244632252969239515936856698712376873307622016365745785761646801847979581911855524030584793504898513936550357391445443988595740892283424327406917657710825820685590034709130435654285253648851231467672592296572208467318844890451232099623499922923072349088999341958980485897274572687156260434852048408282029666873763076424292501571193710631278416543320132381494947341642329470004627482804305896350186278672979331961771856199611691114385806236363934630102797514183705277223061321391418091348529511012241908310205665536351898776272854535703731125942535319638045189952929186697193023535569915798587813764562458646096938889038030796808031465328409939114640819204825703000712033108095387101128627460791921148387461152926904972092009164538747378281420775774099089424114710239899296834095548619689588795906590930923385280148433792312183407508268781152741104216757549888177737571717687142131062317831559110856161467118114031388465440381070086079799852497431415741509754963279849152928977133425498520150018173352964906213497438541071042452242451291421608774282740190413166207336756338157582094866278789067426798608724201790139118270185983668694388928227238281848121955604938230197439987499503860278837714320049840913528480925082707006326321007769044384599549981553873364906772936097761809284494094567534682364030104736581526725272599999628882524089507246211982412190171313370071639340617915124116725974870795588727726531331952967349009177316038667470752396548631792936470500192620855911789294347515905243311847986556352561447888428767000915077585180628878850535595508049118796600410586694644294696726439338814359296210557402977874729944492883549704327726508159947438210414739613040673669383130303537711833461312127530623785872321762463145102891900354026905"}, "radius_squared": "2.1880116034419050559045620041983618540665760154605154075192638186678980417999142750334458774880139788839335935205110430057159546303667173703412811369238572499042934646146528376862018361897051658384865692740102409676259866884719770285386918446856318710923347073624733462122811690595106739145418142374242092187849726945394920444479055327005348949819875746471253178503864097707943309761587896513189515859125080526857307874575170303375378075031089974283224703733770220924760279307650012713064385073064009603281627188228434230205165017683272433773692201252959916141588480872999729993236780481222485993283108665135129254572487715943724511856191543471655017220320558881105974160951309718562602580524764319830258936223543259863670301994732707814963633429286237031978066566805930172270300593741443962414037442118688214619574736799220410796180169127195693471243677089019753778656831382943601006383907350708280258541833157837411406918506120635729689136587078459755753867923288779516826880469178917388220664975576239781838741631526155024498328078558818997278306653942494350971539462916510673080372822687440229397501521113175220815547648230092776120020962591780865586376917543714592540426526737919514199319201204545340499931583677201174588455260609624131486331864215595228328211837259123218750880803612123676635337509178511318520744214413139272307223010743991034541389296304779626234467249437266187169131044608036392068569876839966767864742494398667272580845410161912830453308410907983402003259382536509894464457732468316163932481929415713633890664934883808707118850306639436612121919683295607160814671723661884760694235198009741008624849115981472727445501591290580561290494529208065901286834605629279490257286823180992962310453768651753454232526901011965233230136726100134124009663536281959519551505013465421481635792993813452976148032095832111336967981683716144958778361339776052230873830872360192737562473538947717564308552748951693691244073965392357145185659697783681466019199318799809727432046997549959412761"}
f := {"point": {"x": "-1.5501510254954293799301012768410146236419677734375", "y": "1.3066733273928103908900766327860765159130096435546875"}, "direction": {"x": "2.28804160784102783576798856302048079669475555419921875", "y": "-1.1228782939352031366997408667884883470833301544189453125"}}
g := {"point": {"x": "-0.363695567275096720560867424865136854350566864013671875", "y": "1.5023510045811845348140423084259964525699615478515625"}, "direction": {"x": "2.28804160784102783576798856302048079669475555419921875", "y": "-1.1228782939352031366997408667884883470833301544189453125"}}
E := {"x": "-0.73699838951877777009657116856684920361058483815137624601105818651041757492315746577041217761655453393918841330914389360130818896395246652397353231273750804487986788070877270632135801056620948643678132273475270258648092343274036150170516955997584391150345704036506200224584559251783613469204970920492838444460687060385579984897308284399417312847549064482017778929568514610772831266117884214193466070920712183682919099707555691096337792703938552203502085675860430493372616585940614686598096124016464081955612285248381679417576820591901235853824347696363175502032252437546752420605914607844571134197711546982981615943647289741647859457814760236883240415750148504487004071023614356341975122750808500415916300943713151862201292538135825925541561319338704131512429670858346843893702414663284398306978803864042435322197230004994503760705261618636770824072421915184197434578707772617134489062698863027892533060033166005331081643611992157274996244742633785526836033674035784941346053338872040807718130175294629006487522628834926250155814030477033576438591127907655771921623617834262433877266261657571902269831813558117463930003868478880545302334556636648865156964467143106769996952258908386602960772808612755644238836367705930618593660991148090377133341179495901569296343145909948528398666414948479372251415199724674106630199699966009861325243274854317482244954296708632467630940669467674733146848354865166963723546906059342350068394457297342142415934349218289939542327906579756417931906276897133720083309720791877358726343972849752145535044711612916721849614168393017511212248947982307204123784694347637589256695424487036967247395635734856744935265182739630238424260344491353988785559535319847942131939153228187401319039305055183656828996169800019087842555300449375741716522152271404224085706663136354003204704058607930723466420623914600066733488192629549838869650249687621933320722111828943222889652688602029613790796525363386552218373766152504947609701919618133345114544817199290316254969150577889329488036", "y": "0.071038108549430154210399226652075638280650912989254440711711986281489836812557710050874243074756548074791896264937929283210840740366405776879356524011662794137536713520650253205909323347538342056953662773048434395065798718590072023210242047756738380398122439244632252969239515936856698712376873307622016365745785761646801847979581911855524030584793504898513936550357391445443988595740892283424327406917657710825820685590034709130435654285253648851231467672592296572208467318844890451232099623499922923072349088999341958980485897274572687156260434852048408282029666873763076424292501571193710631278416543320132381494947341642329470004627482804305896350186278672979331961771856199611691114385806236363934630102797514183705277223061321391418091348529511012241908310205665536351898776272854535703731125942535319638045189952929186697193023535569915798587813764562458646096938889038030796808031465328409939114640819204825703000712033108095387101128627460791921148387461152926904972092009164538747378281420775774099089424114710239899296834095548619689588795906590930923385280148433792312183407508268781152741104216757549888177737571717687142131062317831559110856161467118114031388465440381070086079799852497431415741509754963279849152928977133425498520150018173352964906213497438541071042452242451291421608774282740190413166207336756338157582094866278789067426798608724201790139118270185983668694388928227238281848121955604938230197439987499503860278837714320049840913528480925082707006326321007769044384599549981553873364906772936097761809284494094567534682364030104736581526725272599999628882524089507246211982412190171313370071639340617915124116725974870795588727726531331952967349009177316038667470752396548631792936470500192620855911789294347515905243311847986556352561447888428767000915077585180628878850535595508049118796600410586694644294696726439338814359296210557402977874729944492883549704327726508159947438210414739613040673669383130303537711833461312127530623785872321762463145102891900354026905"}
D := {"x": "0.16679402626579368863169177728856081302713793125516592085816411631645369714030024145385252400690971607842816779902140784427643271012500360857377321396435180849598420381821966476507817051744256435776443587968745890358743402163308662839395647039287993155544684396628601333623555089197443313008395752491834252260449010164641127478267822437780232338871184591753700294431270057976808905558024091870793214939444466490606325706398950819208892867927973003956698677231534504894856757904804488433133326891650253467650212372408193767867872091276751754406140549268121051113802415134478481280817684138600990674813416178560961575462801404528855865940473653759730481760548480536015533422239654144400562008886982806404523488095934185342564054520404725899584970648845782763731652030812776049827303909359261580937045628565947281439276075611741611296635769978672151045435777026524424276143636991314203071632882658461813582802160162433068649860598833015677960853415953914501861188013381118771124402185587481776239120177679412783286405343326652263629782619319400172894595195829327220505582639880141555915971403162456813369264119011643435639826361276384863139278349438544593273161395928602604703475764414754776750581661041545283074493842740528019038889484775486659699046847764519553287836700092435263566517562308722839892179784774974263999928806495674067351771561770610763602465466716483569239566677964139857269098272851782226441279166639587826258893626653741136441138159572555365952543735583885806544896111438083306662919946533115973755632838752196091595022105559679265735281226950618848550062496023924066317863712087235840265257345948415637404326827420862550499896599434063515586957106935736527179095755029260466039748518031361303072599749010959938125065199862113970476904558792207907787620935842750330301636084976046175318750752425520056240222608825019800939120624408066547921573535107557838062646265564107264798742355449916845104902855866893632225952358716807057591459823258477883739972152893731755174955871488728505558", "y": "1.2420081647900640732825901530099633055212281920375373743973039770158777128744048271889683836783619590893616439040312647932941532137845883178810310964237026444176620318200151980099190265526494227154360590350229509268225782339852724736068552994045614247384345708713076690214086841967292605005893116402422697324021622559812723868927168296603724960495665021905017288601105680832090918860985451996258723971339972883041367191479307167922770804903623819902681840694427113364139763271825816250150186658009872658298775726048731970372303885065689555292957761481422532089190685513729511736206638610262074441248461659821083357719434452726608562664135955679091396335293592786236653654032898477073006106582812249961817111577371571771041605378276994945753191583474739607105714647126347893628409635298155344299748089576055701734848891970337981877610188584055829987881163114565066159094116515915308249237332677195973843337076723871329742514913058817298002927919275904006844828143907578178523019224412278306051964265590443940327469295704714738672519861947856185833036475832125283944402566531433679586084826306320616082098726984379472050257221006758908534132719282247241797946313768808339490009032306869298908716447648628024166778021122066924409287659515259326187190966764503255745314361096278991385008471374619104738503888109064599650948251108669950411205688632486622827773496887393396725301739572793659407183663716514298710507019003075305547212783751680327454959438939525524289426360613945696647524912424319742692198185688413638829859296418424895788573502144939540897182449676964985312139074857477930688787883352312669304110548777407329927304664193646025688609503225288326062371691757658720694554151202525125225377443825624603073047900312507871947823222857447039135931842855321792774961802766468466330977914778610177113926306509724041033464775602929924181484318592904895549738390692291867292916681956604310235090492839930066812794357226259373949249320557578929763391133257850836895214512754526886743110347372349107921"}
k := {"center": {"x": "-0.40445650253944440549087934268057528164035055822008721693586080592547889214687325912366170602984379918930903730850933061864956350612087359774093917092736285793664844673967597476230646152291794995992933696052819419811928673814500496316611175266101802697355388239283214741576176073586572102412669123785751966311313120244930507459986139194361484178338112457458200459255214893199329658601406380150306331200362729235911904018724105867975743141376944093238164459817550261235096024153531760291618886280666364981864632762756178423858455313321346819142964607844328266389996527513901794786935643793910055725840864672085344696564478737371227615984040074372709419401640499460144674731054311223390544145934549418372437421586524529427824244599931277708919764812008051488458931547490093440795559116918550009285729658196344948282753028916802680945385883735004680259071801241579339106647356363851465736096569849885919161841170945551425359297312859822484644609951069524810943823956409687995214990376730138453404655334520013946929055299754966113044569745511103907297628455324939342198280351948941317409161650126991767068603802112023329721338788128161155876419619649873607855350814274629269771176609419817644466017123921679229268862685771312315073876593255223487691974332663397624758969571925932102683264851036169727359863705661711469526010070976197190119010857096949648498031802785985424648496671319302659180035155880699404776037415085601766335427849838149593227915833645575261901904505919625932374589343686873200270442948196201244647298702695544158538674834356497442848948738569453458672177135151426418300169956499799902290603383407608017722667044671207945030764353596196208937775242307509350684594052658372987394799963029575189163905111956456469246092516714225814286201562473688367046792207976388160964651683711828369025086569971374503752575147116884762386373923090019524011283702402254582893549244312151375393978471244038126300746706598806251922260802821066038734055950089688589103656822684300552925760556327707748992", "y": "0.74864464691447762131136860253061850160792650300328586463626264251025419980945235129234778717349387398911029237207719160443988909813430751357703368710613226111636330725111123795917452089310489759062919333293855205072068968333552446350765558544195908409157388596457976183573400387721875700441823749656305941602581816364878311070819591323353908090233882029758703013961630572472960291626247555275760803291437101456616108269510018271651976289119386656498253397294306985376955249262470240943881427684938555874938769457279928201903089068313451192010860092864588141946689498073115190081195835775680922518101441946140779649711187797903552832755452244337068324799153396792585784027630917888005591344526010522494274632931651191147729436478494937767522831975133297531863244321790464543179102663288372370785038386303009484233362683525989373804729874690750551279438513205720632035380669503994859526214885054002925443865303215582898746571839771058503718631180545970875115323265270741608405395346554026066586500797763562382138774159247882625636728920058290603812264895158316861985423371198425063953661760656528016976739849181306275091826619322307391137799596905825989064892452399315713178355743029091089583527519902665929989808382466794774294442652668714032501637495793560785145904338631017728387566339435718103433607683595893995704330957515517847444393764545502788924663158560514714368744722187623587333427042111926153984168953447122257328912601644419128970759439032052368036529741375732998711733028639448881581354904087219952073179018154687588715221305869035697196565222581131167586391429572831976701211200884117864582910319862967050393920755483138548650985858543444186403224821789815936405806276242880648795423375149523488072252323911086133015763585949173083732196765861833488728539457209379798003000020230323159562676968198469479751787685544375236235746274419253044800696159612226846799861885130731043894522723650501506145192018864182258145608984495291053899760484768409546869571179947469803322685076550791320587"}, "radius_squared": "0.56973472743083827004567181496290882123693902314805123790972700559370904862032316230880355805376016328777986748284605914822575634893600458877114642097487104991510309791514726383081543653866129845645737906574218496797352598210673640286898166669190345949127739588036635211457033265318698946701748432499505477787976405338381616956879466780991320079062430777427918363785994540496158198709902211927642103556611064097489836338820248689807375681023881551259797079282134720786603257554577967580280319655982780213046412629029453468054817233060725176556798575131158596494379556636532524406885762898837173344428922454844990007055480146534295973114620088780644663517816448100722356866739716839219089773378703086941061303416058815754321814684298707466058795857734878418059846505869345098885406963419365788389135022218128423490730236257787222935022040159930383469641251421649688319021903629275686510139594962435644353414883739945407553515542527794489418929794077476370450529742658863354614501595143763046401960739478481366178342679626387565997075480564006933168945786357393150014010124826550298674838531512999216824189579103023619573440082454047172545671561169980257227003393989765118076065450620653559214450471263650602221215706205849471348005099776322456115767021843238729104335070892591632019267912136396450647278846183703900403806651667477566315230571446268470372271512514573030696290013607938969327508582666881632475026743722568795106451194050082032184774015111412075639929607344108589240348661296972559544169232691813850227376853819202909054710879580971008013199366453636449984248064352039408933250812794633499932105867565128018430975038151702888465996228700310570011827089725732402347546960899367748814010300647166219120255980290554985489685836226623282730285059005859135583121275985918377316276254262171186374247906550752240561998118473049894618760460577072345142681258428933931143645976660141912888106230922549598293119779852279197623718594516400064580888355881095958041165427298706487534913943653241805368"}
e := {"center": {"x": "-0.039776005290856058229908596403428049623939127131191494025732831067045372006775793959203859228632337096567291514278267753412872884902384015615655883731659001991134712375035648230306318231512372746931089979561106621200368406956555959574802827232730139352186856949985653464446324238067430286869162860019975616076555610967893944804132329444465303219009424868604588494051758040682515607317841725440680168730101179812802559470420218183625386169714892193259592003012908197498195279847654062558005217811338667977832058062460236156861629187970517267664359365136767679475793221364809357482914382541646733347073241374856678183193257708128814599730972752395338462836378674991706422857959618103198856615876990240328810476558405487249129094702570702903412760114856310537492232740202785009172091508184522168230504091803319915238691934088073293487010674850204919892880637817660677707892077029825502293954391130809722950239428606374011203908243952247960340762953172431147134087749718114676218346291200598977587972022573241033123381187160758544599750063319853174597744710209470602319771117112105624119284192323316485674688608280683964384244588536042578791451753827154569299483545678685609863369758135773002867982016953248399646022766154404129409352474502416543176713890787175792986452687720908575018721189040252710557893416264811799842922452469532528358481062438242646463395983005376527966121475195471324025878611845623988887862333519275233334203815339770842394962744454738945110535949602965752036267253002418583447623192754045027126756947706100623610805127521053685868365912036445227562751873313672777361582520290828822553247224564265960390366987463368570872707556146094473453416462147447665850360152800282847907503764453229531345132050967778398939656409343630355924605811432563695487797009158857745353671938913725063336144408569668079841324590894598233555377673189727552448474796815270276551096339669559211633876308101864149975949115474521710382713494679063787904566473067428258403193929839922667026823162238548804969", "y": "0.6535317898882060282122293884426814883285462787866436743951936165201960813877602866386895721956960297504706625998138495162664641129554729376644029865905650434154169891829946122508995599285347408018949942970841401656729884772004331621439806166891294092392697613818760339038249580934536447292016822204136303253230503038129603749050384688063575543369308185117814964544822304806639540779103428157606021920010854667396843970161337615516964889601330659705205542333325998830254169326725806811512662062909814358227685955849886176264536070685692486786280361137744932201153610259478825694275464170109926348638872716051541966153648520973814570475760753189178553316852305917533990832700032846629436179672380326863322182160164739662793854810482812683264729535726582612148367466642165564703149322697326937763486918277204620756161718159782147206862437342346807380759918779276700972587303662636960280260910277663974657402843596456293483717782474605304283867320427963359858175671429450452133502125028109800896330417094820850253589263286364549082598661794366391060430774277137524284704170424845029619565043148822496684819886768831377032652192978199627677549862577502459050457408852214682028086867999494096490439626068803046268708112119445037602740843557759202135153000825811488101568421963678689337167040618547872713508513313737254278170717096212252105262354115686552415729386761311824362702591976634180246825317861437747529099250667273714475417065917473564568023979233742642952787944085027267633607800924716754247986669641388276634679047231151710830890300233492957576477278427932628844218048041478551624315333682401905642885999005872519150356708128577288109231439307075799463363251693864394130699308770378245681351970858390630611221362081586944358583785879529443378779974573656923561648699357568023294508478308983703995647831343786054427975043401946665314841715642927081216571110111189034172213846217013861759426350916169414181973598037866047691817919185092403476314553393078814674602570243661658807844658434434925416"}, "radius_squared": "0.82541794186806706755542504027711003447201665867459796457019192689128850353817836376756190766640796523738802590971748688986306519834365850914560454987256276358125673731815700463342626263133062484868525328156099581586984950384250193741555782943162361395594704511561322316702991169264772807420548781841661705575128496738210700838125997660591801568233049410346721628884187970383539977644173887199022627310184107169063479679118785669519719304095025697325373334185056678837934446837536929460676784393397956063439718555764122552478005347905394690674091332720699999785204155203224499189575277979518467270649260751706511157835344866923234479860940745861048408628703784356885972525827780664370749904066526649816380884344956385333079981822131774328695489127073080241627197039100176701897090835828333958216973002618741229614386784185703389366515053547602084732787712115907676205577413781701770759908483408854242137981090611042629276267423241132560089533272600004403794406493594109297229478738583070921009349183867490287149586823224029336642849571243704026172660274346661350666030252173134667686634954034873032290694242410575273643690962904992233044177337544001647031174875729905183750536966357367641084468650070872904712190934860257067776278065959130416142822549416945142237750992620909728914971453821085851302396551432728938355146633661950187997323418876417122003486537635060914093804717645218429494589439846251347593830648776774701533635980708499771934353966992702054005007762790128372313107066432847873000566368540593886334373726346672230848643475084083299529972986131255145147130653769194515977810580318456943143423620579572585577543817523711333068954729736620996722555786055254900961993967637705611975155304681784708677468730766212524972285253066261409237028482969393179991152894217023340082706923496590055925131736650931763403004579078959279211976535476515749671901466171343901322771877103638015070594470643781341413072510095910697638107471609363490700684146295155716919363858581192677971357284937547905487"}
d := {"center": {"x": "-0.70280492345912007846467348397222362491528836374835594323214492153433659177034411355654019886631677535015654185756340923003603799498879317847821421330883616012817437100703060405573613384621598166370134782674965690389181186468371031136794691580472352698842289240100512512512561583363586704055468285792380220521567728784669027135478661310916152041178124699734115955673655309455495737678509727532453865547926470717955479321960278689313603990382621224789294798764342138224492753146475057471290124185315260163225256854910042684357448393765063502401799173355738113381807185820739031711933689998770727969033791653443272974413440325971647859496831280106444251221876368906306678759501342209207871327501081904962851030145188635290760103713294990617204169767406256699606166709893047348494486502787321636011599381360946678701536511065013398931144218450277792950980975595265354139537708018439054312370250047960714875059687460029010359451179475929364001916926522276432590713449314342476023345722083033984160350862730185058822488432696835007258492722996150225994796438145171559253879367624058241426525052398008381197717028876869198825487919806347338258313765107856886615560098633643029715528514469260494463128222558328739930748972835369784422795861118864469033989412859476143281129035881525452674753067203893853188571733228829781331710294760307678027949081623098501870447862342245453621251478937256059014872988323060773785987496497744555305310447053991420936857863416657595679988411398987641276348454281175861292483784729192878814301603104196662533965124606264909165778914202295165133504289982839582629199384837907634848787402501829808820412662396775052000130771052277187060852463051217490393803756054751703513022070827079710915683621143699653880574935646180930092416187899623296006200496700207290134138544856577542967208866436661550474828219886919005294115466386247711574079945867080967407510022984181510257376939400372859720496139831217683188825438068022909040472335954899408493747600171984261523867652633470404982", "y": "0.97891957038621317524333593722442927459118714247992966300962260651648772762039751737037337965375761873931070701117827021056945453708145535058990237130166469374802542707206670573085092964885953501785692639068389150444215486920845855373988602438393454893518170755313536909240777192813918288158990043364576932470860211388827626559752602732174137810437075393421074442775023884214629312251990848510491951099657533449808353874219790298740552141407586587734352287069785839603976451110802916688599640760155661854502425705310925122708568302667594821818127342549382296081992775370242878377705111274286481007385487131254566939098501619888930651895010262233272982847119033569266079864078720146571162964134284062764461198574637964779009565367222052075446684917986323552099018080810015838394594785609868005883357417887197078962054051846946418391336151524294480907809606066851305139769684538999818688416919755851809408375382046606939535766612208903300745828257619480690486171104389383507580797179721166338781697032096537780859772375813930731523900987062786574032420126849607902026909453594462062785233309216578801763013537803296517296631232782533293818940511112302053348476220703078025334980336511951101055664547421464788985099905611665456214814766393109935833125562172668359408761291482068159083851863914039038224993736215311401496139474960721529017014789467312883956270240663792711293156202644283359540296155240893430844203052000592660770463530436228755448990088684649836617262336820608230615776287879107191649611947720634540937287896220544672333828332466793466544978627957588775613421461241383124215074913820495518574042027448979046355284427104222231451210665614559877580263119923474823654527094763041133220671719735869294108046820535810428046354749602032895199121461900648214089029069797390107002220014460783852923391497299921739696182857473803054332726810925872623752175355738357846121678278233575705660269442198550436567032883566843763841081673863039940694458589966846963697792937261082458650531356227198100243"}, "radius_squared": "0.82541794186806706755542504027711003447201665867459796457019192689128850353817836376756190766640796523738802590971748688986306519834365850914560454987256276358125673731815700463342626263133062484868525328156099581586984950384250193741555782943162361395594704511561322316702991169264772807420548781841661705575128496738210700838125997660591801568233049410346721628884187970383539977644173887199022627310184107169063479679118785669519719304095025697325373334185056678837934446837536929460676784393397956063439718555764122552478005347905394690674091332720699999785204155203224499189575277979518467270649260751706511157835344866923234479860940745861048408628703784356885972525827780664370749904066526649816380884344956385333079981822131774328695489127073080241627197039100176701897090835828333958216973002618741229614386784185703389366515053547602084732787712115907676205577413781701770759908483408854242137981090611042629276267423241132560089533272600004403794406493594109297229478738583070921009349183867490287149586823224029336642849571243704026172660274346661350666030252173134667686634954034873032290694242410575273643690962904992233044177337544001647031174875729905183750536966357367641084468650070872904712190934860257067776278065959130416142822549416945142237750992620909728914971453821085851302396551432728938355146633661950187997323418876417122003486537635060914093804717645218429494589439846251347593830648776774701533635980708499771934353966992702054005007762790128372313107066432847873000566368540593886334373726346672230848643475084083299529972986131255145147130653769194515977810580318456943143423620579572585577543817523711333068954729736620996722555786055254900961993967637705611975155304681784708677468730766212524972285253066261409237028482969393179991152894217023340082706923496590055925131736650931763403004579078959279211976535476515749671901466171343901322771877103638015070594470643781341413072510095910697638107471609363490700684146295155716919363858581192677971357284937547905487"}
h := {"point": {"x": "-1.5501510254954293799301012768410146236419677734375", "y": "1.3066733273928103908900766327860765159130096435546875"}, "direction": {"x": "1.186455458220332659369233851975877769291400909423828125", "y": "0.195677677188374143923965675639919936656951904296875"}}
H := {"x": "-0.70280492345912007846467348397222362491528836374835594323214492153433659177034411355654019886631677535015654185756340923003603799498879317847821421330883616012817437100703060405573613384621598166370134782674965690389181186468371031136794691580472352698842289240100512512512561583363586704055468285792380220521567728784669027135478661310916152041178124699734115955673655309455495737678509727532453865547926470717955479321960278689313603990382621224789294798764342138224492753146475057471290124185315260163225256854910042684357448393765063502401799173355738113381807185820739031711933689998770727969033791653443272974413440325971647859496831280106444251221876368906306678759501342209207871327501081904962851030145188635290760103713294990617204169767406256699606166709893047348494486502787321636011599381360946678701536511065013398931144218450277792950980975595265354139537708018439054312370250047960714875059687460029010359451179475929364001916926522276432590713449314342476023345722083033984160350862730185058822488432696835007258492722996150225994796438145171559253879367624058241426525052398008381197717028876869198825487919806347338258313765107856886615560098633643029715528514469260494463128222558328739930748972835369784422795861118864469033989412859476143281129035881525452674753067203893853188571733228829781331710294760307678027949081623098501870447862342245453621251478937256059014872988323060773785987496497744555305310447053991420936857863416657595679988411398987641276348454281175861292483784729192878814301603104196662533965124606264909165778914202295165133504289982839582629199384837907634848787402501829808820412662396775052000130771052277187060852463051217490393803756054751703513022070827079710915683621143699653880574935646180930092416187899623296006200496700207290134138544856577542967208866436661550474828219886919005294115466386247711574079945867080967407510022984181510257376939400372859720496139831217683188825438068022909040472335954899408493747600171984261523867652633470404982", "y": "0.97891957038621317524333593722442927459118714247992966300962260651648772762039751737037337965375761873931070701117827021056945453708145535058990237130166469374802542707206670573085092964885953501785692639068389150444215486920845855373988602438393454893518170755313536909240777192813918288158990043364576932470860211388827626559752602732174137810437075393421074442775023884214629312251990848510491951099657533449808353874219790298740552141407586587734352287069785839603976451110802916688599640760155661854502425705310925122708568302667594821818127342549382296081992775370242878377705111274286481007385487131254566939098501619888930651895010262233272982847119033569266079864078720146571162964134284062764461198574637964779009565367222052075446684917986323552099018080810015838394594785609868005883357417887197078962054051846946418391336151524294480907809606066851305139769684538999818688416919755851809408375382046606939535766612208903300745828257619480690486171104389383507580797179721166338781697032096537780859772375813930731523900987062786574032420126849607902026909453594462062785233309216578801763013537803296517296631232782533293818940511112302053348476220703078025334980336511951101055664547421464788985099905611665456214814766393109935833125562172668359408761291482068159083851863914039038224993736215311401496139474960721529017014789467312883956270240663792711293156202644283359540296155240893430844203052000592660770463530436228755448990088684649836617262336820608230615776287879107191649611947720634540937287896220544672333828332466793466544978627957588775613421461241383124215074913820495518574042027448979046355284427104222231451210665614559877580263119923474823654527094763041133220671719735869294108046820535810428046354749602032895199121461900648214089029069797390107002220014460783852923391497299921739696182857473803054332726810925872623752175355738357846121678278233575705660269442198550436567032883566843763841081673863039940694458589966846963697792937261082458650531356227198100243"}
G := {"x": "-0.0055825392311983665980109118088024709286426527281711912468195660909643888539624417453318804783945785075354200626977833821407219159387106701203377843029871172394412026732935459646844415115188679738511150715580609386112568388999047692375801830616097548371527089859287763437263475538671626353741365130153933766853622949587843671858360985594536951553000270457679587551031650275091603229240968588305581150022440501631663556144660941133834990341555824061316832320520246460169569519062577712899452194998504500539617741277438688246679072066087937534388741350623937929713407041046754685431052040836426710602956880794732484908547635513666986165516831846273768175536573191847325002168294767755263423828028051307943113408787732181438047504772613536598412644018775624092571912556648195570928099032137554585584592649884334802817569947931696757458366729852746086784712419283398733161914310428711547906682613314915411005046431533532983623001171387916379125058805399271127044818850121259759184147916228616378897277035850267461219771648666070590443725229455910486344300151034669786223864507283492657219181405843775993337233158747366526004389977940629380290230384170718658104131009474159374960658189623483397711781149800934105898354352019160370273996047872899001048130603662442623662839470508791151021023762854687282916135018120433111630257399739960562052233354944052156249075201031547547719415878207004456910598434065944912786767050732201024427353124582608924200491957219194786313542660286628457369828244769763632752531212723865518300444812266118985033402444164842813844711238842847564083149500700273658066328922940126040868763792128915746381362628636697382221878703664821014584961791197347141930445148683785636461921908500134501089177105682066477837077656145612312957631966713794903282792621186897896284260239394684459676469936290489203833676437631209516146060415538159716867773792667467434050782800791454176807596818094548392156568799211763585333063503098167812900936512829711978924979386566027325739939096799579744352", "y": "1.5614132517249890492451660990150351246390825082773188966931042367551939721956000939581887087746971004149894733460541904436250779096705225113749488338805669430259057027344110647758411662298559337627982579147195972750493446278188196926736245933163255777763290296903791500269932140847361288984147093464373832842858666560544347925229825842725749018565080675474783043318750778773662586046893590174411942960800030904119472501682969554086663560889552829966326094314381617068567141249357193968051629903926151312954437636387559098730533928206725097405488746872199078989056219058872349289120959585601468136593255995975674845114025266539412935618986951369446888099701422544667279201389342865169641332227746369500422000989653394303642039116591803976628484542230104844939186172666511785023621038529768381314511400640571132271915223815184922074065817139077097485662741740337245025594883226156634181022287599965056207093973609068730407287323364414680487438859915303509695308907256859533841860922908581047300717306096716887348672259720655223242020419545158851567784827896189005253542314299953312776254298987792565333710198381585529880537940539276085638133290510417073276743416251341344247700247246878505735208082285975211009803005130978784732693030425735940733264056861344794393382416137500094535127704585438862319920144107866490296122591224721023431142884399629950137088424740449077590627029539202679513911044103254707795038336311283598250489019086101401510134610959007128205378892957837263625122166502549782969101868913636191994758769123845200446180288539226628884151500922644140590292941439616867756997584169378995380466079849057290085168757432820360013185246119823831334112298372892346822661926473521972328711618866491242092661339133241778604101367896257573846259002283856181444937127453019363985579703903255800499481625118697737209627325043460024305167429471120955448195683579450789005634374595442596828410017870942858364294782247154293669189392740093362168642077776642235738144005246552280041446765138151195171"}
F := {"x": "-0.68508732631534419102666885693707017038668804416047272375162835250755697182666363359360168637702761914325498697092765582276573030855099133779324920848277048959760649156797850368602084417123358439655071462295123448549348168305180206969646003182579306078097825161343861076243550701587738357338049473610368063039288062024760179112056347421975695884129366419948119210432483488321654600678929056957723212773610337303614984825108632094878920693896114218289294263908307016327909720701689043884337005183216925758926339631079197140306595843525470945746636843120997851153518878904947941764511754075620979537836929740396282922561842049618670678431526326720585266801874556520477364544814451577719515321899952321372123182946677437276478077349785264786475748006265477613057104597146712808167908833469076682181008956182162111829258538131481756168399156520399173821281085910786622764465339313610460361818518908901372799240485330949862560429343120396449502121353884512487309060335843433532540138762459879373755609081994227883055934959336246843581857580162972480550980037328528022314750080569779156769058664887826752231566473938764878606421910690114758164223331704670012132548875775611513204734936959744065508775561924072102841413651793797474217930997043081088621735899842442565095791766430581576624505673895407983316126675255118365230875503928286642676071589644887437123812269928447887231543445388525270998968542618982004032163437717105946815091385135027569361374230884408157018706332766793190154328378512766021524922726041784409738035397443066187997180896676399251597374493550039569148672051233789247310662150049412698641750456691966225417765828032279844244015815233038257355190760471259189375532673570021489546131720579533095191028419423110478877095114932509560535691208291823294182935700124495757011879921333760200700922910182423904227547124398177355606302126277813999442171311432971403878646866180729385668185758878644853779986272464526786839849084174449686375465462070438997756387324488439732154957596914249243479", "y": "1.4493450594858547688363762504306953160136591734738081675258192920699809277357721810999398054266713560445965961929914202278241087462947466625098044284777869613696246755639910584696155508496951410821691837738914760076066636278205248729672809099976838534352440887231261800952707894590887589413317155313393824561075868929930257595199579811547021911205389022097274439714773534702616624167819735680108904228515682364635371157197850529896071564379055787664724569773244037607203042776219957125269417978150518287984164261904132905690730262764562493394458716365954354546707863479285060316516169865857827380014059577494541321155836554111578062428187869028133701479675348472816427077558122764052331031981617019121589442041339489820624284474685520714723805592613620631728042680077067264991306230177575969128312521775754587299495161716450821994659054063833421420970230650011705848397782347519221385550783472098609683852286691613359249451042267903133181781761833186137850489611390830953746242585030355013536906054986834371119304868863992452054043031719402025129975903804639587184138323913570166679630894764333505495699914754711188955983222772020538583035643372573968289211229652341925648706590248247638368784818213850631019546872375064002484159956201979286926789833635071977091219562507003337451185750456623304647635963919251874461519425279388226592429704185777630722499275715520145510891426434003456009959150508116713664146013839443508947096246040224158765446766936058797291650021397548047128348889466055651156109835311749190419535633138103269456113483583273470958020025917539426758623261103690145404293973429883349068494089230841811746132320018877213247714979799306992144966658232034412879042591704540570139207916635430281134459584998707835987466847848699518362220220686405103789756276864199059796770029539151498732736958064561243507108346735371332152036526226065598802256283680514812503120159926239293390862553442288466936559033434909742840494125600017294673439606778117309755604819183479275607670088607680847986"}

Need to prove:
concyclic(D, F, G, H)

Proof:
By line_definition on G, F, h we get h == Line(F, G)
By line_definition on G, C, h we get h == Line(C, G)
By line_definition on C, F, h we get h == Line(C, F)
By line_definition on F, A, h we get h == Line(A, F)
By line_definition on G, A, h we get h == Line(A, G)
By line_definition on D, C, g we get g == Line(C, D)
By circle_definition on B, E, G, e we get e == Circle(B, E, G)
By circle_definition on A, C, D, c we get c == Circle(A, C, D)
By circle_definition on E, F, C, k we get k == Circle(C, E, F)
By circle_definition on D, C, F, k we get k == Circle(C, D, F)
By line_intersection_definition on C, g, h we get C == line_intersection(g, h)
By circle_definition on D, E, F, k we get k == Circle(D, E, F)
By circle_definition on B, C, D, c we get c == Circle(B, C, D)
By circle_definition on A, D, B, c we get c == Circle(A, B, D)
By circle_definition on G, E, C, e we get e == Circle(C, E, G)
By line_intersection_definition on A, h, f we get A == line_intersection(f, h)
By circle_definition on C, G, B, e we get e == Circle(B, C, G)
By line_unique_intersection_v1 on h, g, C, D we get D not in h
By line_unique_intersection_v1 on h, f, A, B we get B not in h
By line_unique_intersection_v1 on g, h, C, A we get A not in g
By line_unique_intersection_v1 on g, h, C, G we get G not in g
By line_unique_intersection_v1 on f, h, A, F we get F not in f
By line_unique_intersection_v1 on f, h, A, G we get G not in f
By line_unique_intersection_v1 on g, h, C, F we get F not in g
By line_unique_intersection_v1 on f, h, A, C we get C not in f
By parallel_line_definition on A, f, g we get f == parallel_line(A, g)
By circle_radius_v0_r on D, c we get radius(c) == distance(D, center(c))
By circle_radius_v0_r on E, d we get radius(d) == distance(E, center(d))
By circle_radius_v0_r on A, d we get radius(d) == distance(A, center(d))
By parallel_line_definition on D, g, f we get g == parallel_line(D, f)
By circle_radius_v0_r on A, c we get radius(c) == distance(A, center(c))
By circle_radius_v0_r on C, c we get radius(c) == distance(C, center(c))
By parallel_line_definition on B, f, g we get f == parallel_line(B, g)
By circle_radius_v0_r on D, d we get radius(d) == distance(D, center(d))
By circle_radius_v0_r on B, c we get radius(c) == distance(B, center(c))
By different_points_v1 on B, A we get 0 != distance(A, B)
By different_points_v1 on C, A we get 0 != distance(A, C)
By center_not_on_circle on c we get center(c) not in c
By center_not_on_circle on d we get center(d) not in d
By in_imply_collinear on F, A, C we get collinear(A, C, F)
By in_imply_concyclic on C, E, B, G we get concyclic(B, C, E, G)
By in_imply_collinear on G, C, A we get collinear(A, C, G)
By in_imply_concyclic on C, A, B, D we get concyclic(A, B, C, D)
By not_in_line_equivalent_to_not_collinear_v0_r on H, C, A we get H not in Line(A, C)
By circle_circle_intersection_has_at_most_two_points_0 on C, E, G, e, k we get G not in k
By circle_circle_intersection_has_at_most_two_points_0 on D, C, F, k, c we get F not in c
By in_imply_concyclic on D, C, E, F we get concyclic(C, D, E, F)
By circle_circle_intersection_has_at_most_two_points_0 on D, A, B, c, d we get B not in d
By not_in_line_equivalent_to_not_collinear_v0_r on G, A, B we get G not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on C, A, B we get C not in Line(A, B)
By circle_circle_intersection_has_at_most_two_points_0 on B, C, D, c, e we get D not in e
By circle_circle_intersection_has_at_most_two_points_0 on D, C, B, c, k we get B not in k
By not_in_line_equivalent_to_not_collinear_v0_r on H, B, A we get H not in Line(A, B)
By circle_circle_intersection_has_at_most_two_points_0 on B, C, E, e, c we get E not in c
By circle_circle_intersection_has_at_most_two_points_0 on C, B, G, e, c we get G not in c
By circle_circle_intersection_has_at_most_two_points_0 on E, D, A, d, k we get A not in k
By not_in_line_equivalent_to_not_collinear_v0_r on D, B, A we get D not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on E, A, C we get E not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on D, A, C we get D not in Line(A, C)
By circle_circle_intersection_has_at_most_two_points_0 on A, D, C, c, d we get C not in d
By circle_circle_intersection_has_at_most_two_points_0 on B, C, A, c, e we get A not in e
By not_in_line_equivalent_to_not_collinear_v0_r on B, A, C we get B not in Line(A, C)
By circle_circle_intersection_has_at_most_two_points_0 on D, E, F, k, d we get F not in d
By circle_circle_intersection_has_at_most_two_points_0 on E, C, F, k, e we get F not in e
By not_in_line_equivalent_to_not_collinear_v0_r on E, B, A we get E not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on F, A, B we get F not in Line(A, B)
By power_of_a_point_in_circle on D, d we get 0 == power_of_a_point(D, d)
By power_of_a_point_in_circle on D, c we get 0 == power_of_a_point(D, c)
By power_of_a_point_on_circle on E, d we get 0 == power_of_a_point(E, d)
By power_of_a_point_in_circle on C, e we get 0 == power_of_a_point(C, e)
By power_of_a_point_on_circle on B, e we get 0 == power_of_a_point(B, e)
By power_of_a_point_on_circle on E, e we get 0 == power_of_a_point(E, e)
By power_of_a_point_on_circle on C, c we get 0 == power_of_a_point(C, c)
By power_of_a_point_on_circle on B, c we get 0 == power_of_a_point(B, c)
By power_of_a_point_in_circle on A, c we get 0 == power_of_a_point(A, c)
By power_of_a_point_on_circle on C, k we get 0 == power_of_a_point(C, k)
By angles_on_chord_v2 on F, D, C, E, k we get angle(F, C, D) == angle(F, E, D) + 180 mod 360
By power_of_a_point_in_circle on A, d we get 0 == power_of_a_point(A, d)
By power_of_a_point_in_circle on G, e we get 0 == power_of_a_point(G, e)
By power_of_a_point_on_circle on E, k we get 0 == power_of_a_point(E, k)
By power_of_a_point_in_circle on D, k we get 0 == power_of_a_point(D, k)
By angles_on_chord_v2 on B, C, E, G, e we get angle(B, E, C) == angle(B, G, C) + 180 mod 360
By power_of_a_point_on_circle on F, k we get 0 == power_of_a_point(F, k)
By angles_on_chord_v2 on B, C, A, D, c we get angle(B, A, C) == angle(B, D, C) + 180 mod 360
By angles_on_chord_v0 on F, E, D, C, k we get angle(F, C, E) == angle(F, D, E) mod 360
By angles_on_chord_v0 on D, C, B, A, c we get angle(D, A, C) == angle(D, B, C) mod 360
By angles_on_chord_v0 on B, G, C, E, e we get angle(B, C, G) == angle(B, E, G) mod 360
By angles_on_chord_v2 on C, B, G, E, e we get angle(C, G, B) == angle(C, E, B) + 180 mod 360
By angles_on_chord_v1 on D, B, C, A, c we get angle(D, A, B) == angle(D, C, B) mod 360
By angles_on_chord_v0 on C, E, B, G, e we get angle(C, B, E) == angle(C, G, E) mod 360
By angles_on_chord_v2 on E, G, C, B, e we get angle(E, C, G) == angle(E, B, G) + 180 mod 360
By angles_on_chord_v2 on G, E, B, C, e we get angle(G, B, E) == angle(G, C, E) + 180 mod 360
By angles_on_chord_v1 on D, E, F, C, k we get angle(D, C, E) == angle(D, F, E) mod 360
By angles_on_chord_v3 on C, B, E, G, e we get angle(C, E, B) == angle(C, G, B) + 180 mod 360
By angles_on_chord_v1 on C, D, B, A, c we get angle(C, A, D) == angle(C, B, D) mod 360
By angles_on_chord_v3 on D, F, C, E, k we get angle(D, C, F) == angle(D, E, F) + 180 mod 360
By angles_on_chord_v2 on D, A, B, C, c we get angle(D, B, A) == angle(D, C, A) + 180 mod 360
By angles_on_chord_v1 on B, E, G, C, e we get angle(B, C, E) == angle(B, G, E) mod 360
By angles_on_chord_v1 on G, B, C, E, e we get angle(G, C, B) == angle(G, E, B) mod 360
By angle_to_center on C, A, D, c we get 2 * angle(C, A, D) == angle(C, center(c), D) mod 360
By angles_on_chord_v1 on C, D, F, E, k we get angle(C, E, D) == angle(C, F, D) mod 360
By angles_on_chord_v0 on D, C, F, E, k we get angle(D, E, C) == angle(D, F, C) mod 360
By angle_to_center on B, D, A, c we get 2 * angle(B, D, A) == angle(B, center(c), A) mod 360
By angles_on_chord_v3 on D, A, C, B, c we get angle(D, C, A) == angle(D, B, A) + 180 mod 360
By angles_on_chord_v0 on A, B, D, C, c we get angle(A, C, B) == angle(A, D, B) mod 360
By angles_on_chord_v3 on C, E, F, D, k we get angle(C, F, E) == angle(C, D, E) + 180 mod 360
By angles_on_chord_v0 on B, D, A, C, c we get angle(B, A, D) == angle(B, C, D) mod 360
By angles_on_chord_v1 on A, C, D, B, c we get angle(A, B, C) == angle(A, D, C) mod 360
By angles_on_chord_v0 on E, D, C, F, k we get angle(E, C, D) == angle(E, F, D) mod 360
By angles_on_chord_v3 on C, B, A, D, c we get angle(C, A, B) == angle(C, D, B) + 180 mod 360
By angles_on_chord_v3 on F, D, E, C, k we get angle(F, E, D) == angle(F, C, D) + 180 mod 360
By angles_on_chord_v0 on G, C, E, B, e we get angle(G, B, C) == angle(G, E, C) mod 360
By angles_on_chord_v2 on A, D, C, B, c we get angle(A, C, D) == angle(A, B, D) + 180 mod 360
By angle_to_center on D, A, E, d we get 2 * angle(D, A, E) == angle(D, center(d), E) mod 360
By angles_on_chord_v0 on C, A, B, D, c we get angle(C, B, A) == angle(C, D, A) mod 360
By angles_on_chord_v0 on E, B, G, C, e we get angle(E, C, B) == angle(E, G, B) mod 360
By angles_on_chord_v3 on G, E, C, B, e we get angle(G, C, E) == angle(G, B, E) + 180 mod 360
By angles_on_chord_v3 on A, D, B, C, c we get angle(A, B, D) == angle(A, C, D) + 180 mod 360
By angles_on_chord_v2 on D, F, E, C, k we get angle(D, E, F) == angle(D, C, F) + 180 mod 360
By angles_on_chord_v0 on C, F, E, D, k we get angle(C, D, F) == angle(C, E, F) mod 360
By angles_on_chord_v1 on B, A, D, C, c we get angle(B, C, A) == angle(B, D, A) mod 360
By angles_on_chord_v2 on C, E, D, F, k we get angle(C, D, E) == angle(C, F, E) + 180 mod 360
By angles_on_chord_v3 on B, C, D, A, c we get angle(B, D, C) == angle(B, A, C) + 180 mod 360
By angle_to_center on A, B, D, c we get 2 * angle(A, B, D) == angle(A, center(c), D) mod 360
By angles_on_chord_v3 on B, C, G, E, e we get angle(B, G, C) == angle(B, E, C) + 180 mod 360
By angles_on_chord_v1 on C, G, E, B, e we get angle(C, B, G) == angle(C, E, G) mod 360
By angle_to_center on A, D, E, d we get 2 * angle(A, D, E) == angle(A, center(d), E) mod 360
By angles_on_chord_v1 on E, C, G, B, e we get angle(E, B, C) == angle(E, G, C) mod 360
By angles_on_chord_v3 on E, C, D, F, k we get angle(E, D, C) == angle(E, F, C) + 180 mod 360
By angles_on_chord_v1 on E, F, D, C, k we get angle(E, C, F) == angle(E, D, F) mod 360
By angles_on_chord_v2 on E, C, F, D, k we get angle(E, F, C) == angle(E, D, C) + 180 mod 360
By angles_on_chord_v3 on E, G, B, C, e we get angle(E, B, G) == angle(E, C, G) + 180 mod 360
By angles_on_chord_v1 on F, C, E, D, k we get angle(F, D, C) == angle(F, E, C) mod 360
By angle_to_center on D, A, C, c we get 2 * angle(D, A, C) == angle(D, center(c), C) mod 360
By angle_to_center on C, D, A, c we get 2 * angle(C, D, A) == angle(C, center(c), A) mod 360
By angles_on_chord_v2 on C, B, D, A, c we get angle(C, D, B) == angle(C, A, B) + 180 mod 360
By angle_to_center on C, B, D, c we get 2 * angle(C, B, D) == angle(C, center(c), D) mod 360
By angle_to_center on A, D, B, c we get 2 * angle(A, D, B) == angle(A, center(c), B) mod 360
By angle_to_center on B, A, C, c we get 2 * angle(B, A, C) == angle(B, center(c), C) mod 360
By angle_to_center on D, C, A, c we get 2 * angle(D, C, A) == angle(D, center(c), A) mod 360
By angle_to_center on B, C, A, c we get 2 * angle(B, C, A) == angle(B, center(c), A) mod 360
By angle_to_center on D, B, C, c we get 2 * angle(D, B, C) == angle(D, center(c), C) mod 360
By angle_to_center on E, A, D, d we get 2 * angle(E, A, D) == angle(E, center(d), D) mod 360
By angle_to_center on B, C, D, c we get 2 * angle(B, C, D) == angle(B, center(c), D) mod 360
By angle_to_center on B, A, D, c we get 2 * angle(B, A, D) == angle(B, center(c), D) mod 360
By angle_to_center on A, D, C, c we get 2 * angle(A, D, C) == angle(A, center(c), C) mod 360
By angle_to_center on D, A, B, c we get 2 * angle(D, A, B) == angle(D, center(c), B) mod 360
By angle_to_center on A, C, D, c we get 2 * angle(A, C, D) == angle(A, center(c), D) mod 360
By angle_to_center on E, D, A, d we get 2 * angle(E, D, A) == angle(E, center(d), A) mod 360
By angle_to_center on A, B, C, c we get 2 * angle(A, B, C) == angle(A, center(c), C) mod 360
By angle_to_center on B, D, C, c we get 2 * angle(B, D, C) == angle(B, center(c), C) mod 360
By angle_to_center on A, E, D, d we get 2 * angle(A, E, D) == angle(A, center(d), D) mod 360
By angle_to_center on D, E, A, d we get 2 * angle(D, E, A) == angle(D, center(d), A) mod 360
By angle_to_center on D, C, B, c we get 2 * angle(D, C, B) == angle(D, center(c), B) mod 360
By angle_to_center on C, D, B, c we get 2 * angle(C, D, B) == angle(C, center(c), B) mod 360
By angle_to_center on D, B, A, c we get 2 * angle(D, B, A) == angle(D, center(c), A) mod 360
By angle_to_center on C, B, A, c we get 2 * angle(C, B, A) == angle(C, center(c), A) mod 360
By angle_to_center on C, A, B, c we get 2 * angle(C, A, B) == angle(C, center(c), B) mod 360
By angle_to_center on A, C, B, c we get 2 * angle(A, C, B) == angle(A, center(c), B) mod 360
By angles_on_equal_chords_v1 on C, A, B, A, B, D, c we get angle(A, B, D) == angle(C, A, B) mod 360
By angles_on_equal_chords_v1 on A, D, C, D, A, B, c we get angle(A, D, C) == angle(D, A, B) mod 360
By angles_on_equal_chords_v2 on C, D, B, A, B, D, c we get angle(C, D, B) == angle(A, B, D) + 180 mod 360
By angles_on_equal_chords_v0 on C, D, B, A, C, D, c we get angle(A, C, D) == angle(C, D, B) mod 360
By angles_on_equal_chords_v1 on D, C, A, B, D, C, c we get angle(B, D, C) == angle(D, C, A) mod 360
By angles_on_equal_chords_v0 on B, A, C, D, B, A, c we get angle(B, A, C) == angle(D, B, A) mod 360
By angles_on_equal_chords_v3 on A, B, D, C, D, B, c we get angle(A, B, D) == angle(C, D, B) + 180 mod 360
By angles_on_equal_chords_v1 on A, B, C, D, C, B, c we get angle(A, B, C) == angle(D, C, B) mod 360
By angles_on_equal_chords_v3 on B, D, C, D, B, A, c we get angle(B, D, C) == angle(D, B, A) + 180 mod 360
By angles_on_equal_chords_v0 on B, A, D, C, D, A, c we get angle(B, A, D) == angle(C, D, A) mod 360
By angles_on_equal_chords_v3 on D, C, A, B, A, C, c we get angle(D, C, A) == angle(B, A, C) + 180 mod 360
By angles_on_equal_chords_v0 on C, B, A, B, A, D, c we get angle(B, A, D) == angle(C, B, A) mod 360
By angles_on_equal_chords_v0 on B, C, D, C, B, A, c we get angle(B, C, D) == angle(C, B, A) mod 360
By angles_on_equal_chords_v1 on A, D, C, D, C, B, c we get angle(A, D, C) == angle(D, C, B) mod 360
By angles_on_equal_chords_v2 on A, C, D, C, A, B, c we get angle(A, C, D) == angle(C, A, B) + 180 mod 360
By angles_on_equal_chords_v0 on C, D, A, B, C, D, c we get angle(B, C, D) == angle(C, D, A) mod 360
By angles_on_equal_chords_v1 on A, B, C, D, A, B, c we get angle(A, B, C) == angle(D, A, B) mod 360
By angles_on_equal_chords_v2 on B, A, C, D, C, A, c we get angle(B, A, C) == angle(D, C, A) + 180 mod 360
By angles_on_equal_chords_v2 on D, B, A, B, D, C, c we get angle(D, B, A) == angle(B, D, C) + 180 mod 360
By angles_on_equal_chords_v3 on C, A, B, A, C, D, c we get angle(C, A, B) == angle(A, C, D) + 180 mod 360
By radical_axis_of_intersecting_circles_v0 on D, E, k, d we get Line(D, E) == radical_axis(d, k)
By radical_axis_of_intersecting_circles_v0 on C, B, c, e we get Line(B, C) == radical_axis(c, e)
By radical_axis_of_intersecting_circles_v0 on A, D, d, c we get Line(A, D) == radical_axis(c, d)
By radical_axis_of_intersecting_circles_v0 on C, D, k, c we get Line(C, D) == radical_axis(c, k)
By radical_axis_of_intersecting_circles_v0 on E, C, e, k we get Line(C, E) == radical_axis(e, k)
By same_angle_v2 on C, A, G, E we get angle(A, C, E) == angle(G, C, E) + 180 mod 360
By same_angle_v0 on C, F, A, D we get angle(A, C, D) == angle(F, C, D) mod 360
By same_angle_v2 on C, A, G, B we get angle(A, C, B) == angle(G, C, B) + 180 mod 360
By same_angle_v0 on C, F, A, B we get angle(A, C, B) == angle(F, C, B) mod 360
By same_angle_v0 on C, F, A, E we get angle(A, C, E) == angle(F, C, E) mod 360
By same_angle_v2 on C, A, G, D we get angle(A, C, D) == angle(G, C, D) + 180 mod 360
By same_angle_v1 on A, C, G, E we get angle(C, A, E) == angle(G, A, E) mod 360
By different_points_v1 on H, D we get 0 != distance(D, H)
By different_points_v1 on D, E we get 0 != distance(D, E)
By different_points_v1 on G, C we get 0 != distance(C, G)
By different_points_v1 on H, E we get 0 != distance(E, H)
By different_points_v1 on E, F we get 0 != distance(E, F)
By different_points_v1 on C, F we get 0 != distance(C, F)
By different_points_v1 on D, B we get 0 != distance(B, D)
By different_points_v1 on H, A we get 0 != distance(A, H)
By different_points_v1 on G, B we get 0 != distance(B, G)
By different_points_v1 on B, C we get 0 != distance(B, C)
By different_points_v1 on E, C we get 0 != distance(C, E)
By different_points_v1 on G, E we get 0 != distance(E, G)
By different_points_v1 on B, E we get 0 != distance(B, E)
By different_points_v1 on G, F we get 0 != distance(F, G)
By same_angle_v1 on A, C, F, B we get angle(C, A, B) == angle(F, A, B) mod 360
By different_points_v1 on C, D we get 0 != distance(C, D)
By different_points_v1 on A, D we get 0 != distance(A, D)
By different_points_v1 on E, A we get 0 != distance(A, E)
By different_points_v1 on F, D we get 0 != distance(D, F)
By different_points_v1 on A, F we get 0 != distance(A, F)
By different_points_v1 on A, G we get 0 != distance(A, G)
By same_angle_v2 on F, A, C, E we get angle(A, F, E) == angle(C, F, E) + 180 mod 360
By same_angle_v2 on F, A, C, D we get angle(A, F, D) == angle(C, F, D) + 180 mod 360
By same_angle_v1 on A, F, C, E we get angle(C, A, E) == angle(F, A, E) mod 360
By same_angle_v0 on G, C, A, E we get angle(A, G, E) == angle(C, G, E) mod 360
By same_angle_v1 on A, C, G, D we get angle(C, A, D) == angle(G, A, D) mod 360
By same_angle_v0 on G, C, A, B we get angle(A, G, B) == angle(C, G, B) mod 360
By same_angle_v1 on A, F, C, D we get angle(C, A, D) == angle(F, A, D) mod 360
By same_angle_v1 on A, C, G, B we get angle(C, A, B) == angle(G, A, B) mod 360
By in_imply_collinear on F, C, G we get collinear(C, F, G)
By sss_anti_congruence_v0 on A, C, E, C, A, E we get anti_congruent_triangles(A, C, E, C, A, E)
By probably_between_and_collinear_implies_between on A, F, C we get between(A, F, C)
By line_inequality on Line(E, F), h, E we get h != Line(E, F)
By isosceles_triangle_properties on E, D, C we get distance(C, E) == distance(D, E), angle(D, C, E) == angle(E, D, C) mod 360
By probably_between_and_collinear_implies_between on G, C, A we get between(A, C, G)
By in_imply_collinear on F, G, A we get collinear(A, F, G)
By sss_anti_congruence_v1 on E, C, A, E, A, C we get anti_congruent_triangles(A, C, E, C, A, E)
By reverse_direction on C, B we get 180 == direction(C, B) - direction(B, C) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on B, H, A we get B not in Line(A, H)
By sss_anti_congruence_v0 on B, E, A, A, E, B we get anti_congruent_triangles(A, B, E, B, A, E)
By reverse_direction on E, C we get 180 == direction(E, C) - direction(C, E) mod 360
By sss_anti_congruence_v1 on B, A, E, A, B, E we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v1 on E, C, A, E, A, C we get anti_congruent_triangles(A, C, E, C, A, E)
By sas_anti_congruence on A, E, B, B, E, A we get anti_congruent_triangles(A, B, E, B, A, E)
By isosceles_trapezoids_are_concyclic_v1 on A, B, D, C we get isosceles_trapezoid(A, B, D, C)
By reverse_direction on F, E we get 180 == direction(F, E) - direction(E, F) mod 360
By isosceles_trapezoids_are_concyclic_v1 on B, A, C, D we get isosceles_trapezoid(B, A, C, D)
By not_in_line_equivalent_to_not_collinear_v0_r on E, D, C we get E not in Line(C, D)
By sas_anti_congruence on A, E, C, C, E, A we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v1 on C, A, E, A, C, E we get anti_congruent_triangles(A, C, E, C, A, E)
By collinear_definition on C, G, A we get G in Line(A, C), A in Line(C, G), Line(A, C) == Line(C, G), 0 == 2 * angle(G, C, A) mod 360
By reverse_direction on F, C we get 180 == direction(F, C) - direction(C, F) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on F, A, E we get F not in Line(A, E)
By sas_anti_congruence on A, E, D, D, E, A we get anti_congruent_triangles(A, D, E, D, A, E)
By reverse_direction on F, D we get 180 == direction(F, D) - direction(D, F) mod 360
By sss_anti_congruence_v0 on A, C, E, C, A, E we get anti_congruent_triangles(A, C, E, C, A, E)
By not_in_line_equivalent_to_not_collinear_v0_r on B, E, D we get B not in Line(D, E)
By reverse_direction on D, C we get 180 == direction(D, C) - direction(C, D) mod 360
By sss_anti_congruence_v0 on B, E, A, A, E, B we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v0 on E, A, B, E, B, A we get anti_congruent_triangles(A, B, E, B, A, E)
By not_in_line_equivalent_to_not_collinear_v0_r on C, D, H we get C not in Line(D, H)
By reverse_direction on C, G we get 180 == direction(C, G) - direction(G, C) mod 360
By reverse_direction on C, F we get 180 == direction(C, F) - direction(F, C) mod 360
By sss_anti_congruence_v1 on A, E, C, C, E, A we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v1 on A, E, C, C, E, A we get anti_congruent_triangles(A, C, E, C, A, E)
By isosceles_triangle_properties on E, B, A we get distance(A, E) == distance(B, E), angle(B, A, E) == angle(E, B, A) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on F, B, E we get F not in Line(B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on H, B, D we get H not in Line(B, D)
By sss_anti_congruence_v0 on C, E, A, A, E, C we get anti_congruent_triangles(A, C, E, C, A, E)
By isosceles_triangle_properties on E, D, B we get distance(B, E) == distance(D, E), angle(D, B, E) == angle(E, D, B) mod 360
By isosceles_triangle_properties on E, A, C we get distance(A, E) == distance(C, E), angle(A, C, E) == angle(E, A, C) mod 360
By reverse_direction on B, A we get 180 == direction(B, A) - direction(A, B) mod 360
By isosceles_triangle_properties on E, A, B we get distance(A, E) == distance(B, E), angle(A, B, E) == angle(E, A, B) mod 360
By sss_anti_congruence_v1 on B, A, E, A, B, E we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v1 on E, C, A, E, A, C we get anti_congruent_triangles(A, C, E, C, A, E)
By reverse_direction on C, D we get 180 == direction(C, D) - direction(D, C) mod 360
By collinear_definition on C, A, F we get A in Line(C, F), F in Line(A, C), Line(A, C) == Line(C, F), 0 == 2 * angle(A, C, F) mod 360
By isosceles_triangle_properties on E, B, C we get distance(B, E) == distance(C, E), angle(B, C, E) == angle(E, B, C) mod 360
By sss_anti_congruence_v1 on E, C, A, E, A, C we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v1 on C, A, E, A, C, E we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v0 on A, C, E, C, A, E we get anti_congruent_triangles(A, C, E, C, A, E)
By not_in_line_equivalent_to_not_collinear_v0_r on H, B, C we get H not in Line(B, C)
By sss_anti_congruence_v0 on E, A, C, E, C, A we get anti_congruent_triangles(A, C, E, C, A, E)
By isosceles_trapezoids_are_concyclic_v1 on A, B, C, D we get isosceles_trapezoid(A, B, C, D)
By isosceles_triangle_properties on E, A, D we get distance(A, E) == distance(D, E), angle(A, D, E) == angle(E, A, D) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on D, G, E we get D not in Line(E, G)
By sss_anti_congruence_v0 on A, C, E, C, A, E we get anti_congruent_triangles(A, C, E, C, A, E)
By reverse_direction on B, D we get 180 == direction(B, D) - direction(D, B) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on B, C, D we get B not in Line(C, D)
By reverse_direction on B, E we get 180 == direction(B, E) - direction(E, B) mod 360
By sss_anti_congruence_v1 on E, B, A, E, A, B we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v1 on A, E, C, C, E, A we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v0 on E, A, B, E, B, A we get anti_congruent_triangles(A, B, E, B, A, E)
By not_in_line_equivalent_to_not_collinear_v0_r on H, B, E we get H not in Line(B, E)
By sss_anti_congruence_v0 on B, E, A, A, E, B we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v1 on A, E, B, B, E, A we get anti_congruent_triangles(A, B, E, B, A, E)
By sas_anti_congruence on C, E, D, D, E, C we get anti_congruent_triangles(C, D, E, D, C, E)
By sss_anti_congruence_v0 on E, A, B, E, B, A we get anti_congruent_triangles(A, B, E, B, A, E)
By not_in_line_equivalent_to_not_collinear_v0_r on H, F, D we get H not in Line(D, F)
By line_inequality on Line(D, H), h, H we get h != Line(D, H)
By reverse_direction on E, D we get 180 == direction(E, D) - direction(D, E) mod 360
By reverse_direction on D, F we get 180 == direction(D, F) - direction(F, D) mod 360
By reverse_direction on E, F we get 180 == direction(E, F) - direction(F, E) mod 360
By isosceles_trapezoids_are_concyclic_v1 on C, D, A, B we get isosceles_trapezoid(A, B, C, D)
By sss_anti_congruence_v1 on B, A, E, A, B, E we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v0 on A, C, E, C, A, E we get anti_congruent_triangles(A, C, E, C, A, E)
By not_in_line_equivalent_to_not_collinear_v0_r on B, E, F we get B not in Line(E, F)
By sss_anti_congruence_v0 on E, A, C, E, C, A we get anti_congruent_triangles(A, C, E, C, A, E)
By line_inequality on Line(E, G), f, G we get f != Line(E, G)
By sss_anti_congruence_v1 on A, E, B, B, E, A we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v1 on B, A, E, A, B, E we get anti_congruent_triangles(A, B, E, B, A, E)
By sas_anti_congruence on D, E, B, B, E, D we get anti_congruent_triangles(B, D, E, D, B, E)
By isosceles_triangle_properties on E, C, D we get distance(C, E) == distance(D, E), angle(C, D, E) == angle(E, C, D) mod 360
By isosceles_trapezoids_are_concyclic_v1 on D, C, A, B we get isosceles_trapezoid(A, B, D, C)
By line_inequality on Line(E, H), f, E we get f != Line(E, H)
By sss_anti_congruence_v0 on A, B, E, B, A, E we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v0 on E, A, C, E, C, A we get anti_congruent_triangles(A, C, E, C, A, E)
By not_in_line_equivalent_to_not_collinear_v0_r on F, D, A we get F not in Line(A, D)
By reverse_direction on E, A we get 180 == direction(E, A) - direction(A, E) mod 360
By line_inequality on Line(D, E), h, E we get h != Line(D, E)
By isosceles_triangle_properties on E, B, D we get distance(B, E) == distance(D, E), angle(B, D, E) == angle(E, B, D) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on A, H, D we get A not in Line(D, H)
By sss_anti_congruence_v1 on E, B, A, E, A, B we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v0 on C, E, A, A, E, C we get anti_congruent_triangles(A, C, E, C, A, E)
By line_inequality on Line(D, E), f, E we get f != Line(D, E)
By reverse_direction on D, A we get 180 == direction(D, A) - direction(A, D) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on B, A, D we get B not in Line(A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on E, G, B we get E not in Line(B, G)
By not_in_line_equivalent_to_not_collinear_v0_r on G, E, F we get G not in Line(E, F)
By sss_anti_congruence_v0 on A, B, E, B, A, E we get anti_congruent_triangles(A, B, E, B, A, E)
By reverse_direction on E, G we get 180 == direction(E, G) - direction(G, E) mod 360
By isosceles_triangle_properties on E, C, B we get distance(B, E) == distance(C, E), angle(C, B, E) == angle(E, C, B) mod 360
By sas_anti_congruence on B, E, C, C, E, B we get anti_congruent_triangles(B, C, E, C, B, E)
By collinear_definition on C, A, G we get A in Line(C, G), G in Line(A, C), Line(A, C) == Line(C, G), 0 == 2 * angle(A, C, G) mod 360
By sss_anti_congruence_v1 on A, E, B, B, E, A we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v0 on B, E, A, A, E, B we get anti_congruent_triangles(A, B, E, B, A, E)
By not_in_line_equivalent_to_not_collinear_v0_r on G, E, B we get G not in Line(B, E)
By reverse_direction on G, E we get 180 == direction(G, E) - direction(E, G) mod 360
By reverse_direction on D, B we get 180 == direction(D, B) - direction(B, D) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on H, B, G we get H not in Line(B, G)
By sas_anti_congruence on B, E, A, A, E, B we get anti_congruent_triangles(A, B, E, B, A, E)
By sas_anti_congruence on C, E, B, B, E, C we get anti_congruent_triangles(B, C, E, C, B, E)
By sss_anti_congruence_v0 on B, E, A, A, E, B we get anti_congruent_triangles(A, B, E, B, A, E)
By not_in_line_equivalent_to_not_collinear_v0_r on D, E, B we get D not in Line(B, E)
By sss_anti_congruence_v0 on E, A, C, E, C, A we get anti_congruent_triangles(A, C, E, C, A, E)
By sas_anti_congruence on B, E, D, D, E, B we get anti_congruent_triangles(B, D, E, D, B, E)
By sss_anti_congruence_v0 on A, B, E, B, A, E we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v0 on E, A, B, E, B, A we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v1 on E, B, A, E, A, B we get anti_congruent_triangles(A, B, E, B, A, E)
By reverse_direction on A, E we get 180 == direction(A, E) - direction(E, A) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on H, E, D we get H not in Line(D, E)
By sss_anti_congruence_v1 on E, B, A, E, A, B we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v1 on A, E, B, B, E, A we get anti_congruent_triangles(A, B, E, B, A, E)
By isosceles_triangle_properties on E, C, A we get distance(A, E) == distance(C, E), angle(C, A, E) == angle(E, C, A) mod 360
By sss_anti_congruence_v0 on E, A, B, E, B, A we get anti_congruent_triangles(A, B, E, B, A, E)
By reverse_direction on D, E we get 180 == direction(D, E) - direction(E, D) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on C, B, E we get C not in Line(B, E)
By sas_anti_congruence on D, E, A, A, E, D we get anti_congruent_triangles(A, D, E, D, A, E)
By sss_anti_congruence_v1 on C, A, E, A, C, E we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v1 on A, E, C, C, E, A we get anti_congruent_triangles(A, C, E, C, A, E)
By not_in_line_equivalent_to_not_collinear_v0_r on D, C, E we get D not in Line(C, E)
By sss_anti_congruence_v0 on C, E, A, A, E, C we get anti_congruent_triangles(A, C, E, C, A, E)
By not_in_line_equivalent_to_not_collinear_v0_r on E, A, H we get E not in Line(A, H)
By reverse_direction on C, A we get 180 == direction(C, A) - direction(A, C) mod 360
By reverse_direction on A, B we get 180 == direction(A, B) - direction(B, A) mod 360
By isosceles_trapezoids_are_concyclic_v1 on B, A, D, C we get isosceles_trapezoid(B, A, D, C)
By reverse_direction on E, B we get 180 == direction(E, B) - direction(B, E) mod 360
By line_inequality on Line(A, D), f, D we get f != Line(A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on A, H, E we get A not in Line(E, H)
By line_inequality on Line(D, F), h, D we get h != Line(D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on A, C, E we get A not in Line(C, E)
By reverse_direction on A, D we get 180 == direction(A, D) - direction(D, A) mod 360
By sss_anti_congruence_v0 on A, B, E, B, A, E we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v0 on C, E, A, A, E, C we get anti_congruent_triangles(A, C, E, C, A, E)
By line_inequality on Line(A, H), h, H we get h != Line(A, H)
By not_in_line_equivalent_to_not_collinear_v0_r on E, B, D we get E not in Line(B, D)
By sas_anti_congruence on D, E, C, C, E, D we get anti_congruent_triangles(C, D, E, D, C, E)
By not_in_line_equivalent_to_not_collinear_v0_r on E, F, D we get E not in Line(D, F)
By sas_anti_congruence on C, E, A, A, E, C we get anti_congruent_triangles(A, C, E, C, A, E)
By reverse_direction on C, E we get 180 == direction(C, E) - direction(E, C) mod 360
By reverse_direction on G, B we get 180 == direction(G, B) - direction(B, G) mod 360
By sss_anti_congruence_v1 on E, C, A, E, A, C we get anti_congruent_triangles(A, C, E, C, A, E)
By reverse_direction on A, C we get 180 == direction(A, C) - direction(C, A) mod 360
By sss_anti_congruence_v1 on A, E, B, B, E, A we get anti_congruent_triangles(A, B, E, B, A, E)
By reverse_direction on B, G we get 180 == direction(B, G) - direction(G, B) mod 360
By isosceles_trapezoids_are_concyclic_v1 on C, D, B, A we get isosceles_trapezoid(B, A, C, D)
By sss_anti_congruence_v1 on B, A, E, A, B, E we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v1 on E, B, A, E, A, B we get anti_congruent_triangles(A, B, E, B, A, E)
By reverse_direction on B, C we get 180 == direction(B, C) - direction(C, B) mod 360
By sss_anti_congruence_v0 on A, B, E, B, A, E we get anti_congruent_triangles(A, B, E, B, A, E)
By not_in_line_equivalent_to_not_collinear_v0_r on C, E, H we get C not in Line(E, H)
By sss_anti_congruence_v1 on A, E, C, C, E, A we get anti_congruent_triangles(A, C, E, C, A, E)
By sss_anti_congruence_v1 on C, A, E, A, C, E we get anti_congruent_triangles(A, C, E, C, A, E)
By not_in_line_equivalent_to_not_collinear_v0_r on H, C, D we get H not in Line(C, D)
By not_in_line_equivalent_to_not_collinear_v0_r on A, F, E we get A not in Line(E, F)
By sss_anti_congruence_v1 on C, A, E, A, C, E we get anti_congruent_triangles(A, C, E, C, A, E)
By collinear_definition on C, F, A we get F in Line(A, C), A in Line(C, F), Line(A, C) == Line(C, F), 0 == 2 * angle(F, C, A) mod 360
By reverse_direction on G, C we get 180 == direction(G, C) - direction(C, G) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on A, G, E we get A not in Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on F, B, D we get F not in Line(B, D)
By sss_anti_congruence_v0 on C, E, A, A, E, C we get anti_congruent_triangles(A, C, E, C, A, E)
By isosceles_triangle_properties on E, D, A we get distance(A, E) == distance(D, E), angle(D, A, E) == angle(E, D, A) mod 360
By isosceles_trapezoids_are_concyclic_v1 on D, C, B, A we get isosceles_trapezoid(B, A, D, C)
By sss_anti_congruence_v0 on E, A, C, E, C, A we get anti_congruent_triangles(A, C, E, C, A, E)
By line_inequality on Line(A, D), g, A we get g != Line(A, D)
By line_inequality on Line(E, H), h, E we get h != Line(E, H)
By not_in_line_equivalent_to_not_collinear_v0_r on E, B, C we get E not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on G, C, B we get G not in Line(B, C)
By line_inequality on Line(A, E), h, E we get h != Line(A, E)
By not_in_line_equivalent_to_not_collinear_v0_r on A, D, E we get A not in Line(D, E)
By line_inequality on Line(A, E), f, E we get f != Line(A, E)
By not_in_line_equivalent_to_not_collinear_v0_r on A, B, G we get A not in Line(B, G)
By not_in_line_equivalent_to_not_collinear_v0_r on C, A, H we get C not in Line(A, H)
By not_in_line_equivalent_to_not_collinear_v0_r on B, E, A we get B not in Line(A, E)
By line_inequality on Line(E, F), f, F we get f != Line(E, F)
By not_in_line_equivalent_to_not_collinear_v0_r on C, G, E we get C not in Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on G, E, D we get G not in Line(D, E)
By line_inequality on Line(D, F), g, F we get g != Line(D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on D, A, H we get D not in Line(A, H)
By line_inequality on Line(B, C), f, C we get f != Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on B, D, F we get B not in Line(D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on F, C, B we get F not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on A, F, D we get A not in Line(D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on D, E, H we get D not in Line(E, H)
By line_inequality on Line(A, E), g, A we get g != Line(A, E)
By line_inequality on Line(D, F), f, F we get f != Line(D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on G, H, D we get G not in Line(D, H)
By not_in_line_equivalent_to_not_collinear_v0_r on C, E, A we get C not in Line(A, E)
By not_in_line_equivalent_to_not_collinear_v0_r on F, E, C we get F not in Line(C, E)
By not_in_line_equivalent_to_not_collinear_v0_r on E, H, D we get E not in Line(D, H)
By line_inequality on Line(A, H), f, H we get f != Line(A, H)
By line_inequality on Line(E, G), h, E we get h != Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on F, H, A we get F not in Line(A, H)
By not_in_line_equivalent_to_not_collinear_v0_r on A, B, D we get A not in Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on G, D, F we get G not in Line(D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on A, E, B we get A not in Line(B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on C, B, G we get C not in Line(B, G)
By not_in_line_equivalent_to_not_collinear_v0_r on H, D, A we get H not in Line(A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on F, B, G we get F not in Line(B, G)
By not_in_line_equivalent_to_not_collinear_v0_r on F, D, H we get F not in Line(D, H)
By not_in_line_equivalent_to_not_collinear_v0_r on B, E, C we get B not in Line(C, E)
By line_inequality on Line(B, G), g, G we get g != Line(B, G)
By not_in_line_equivalent_to_not_collinear_v0_r on A, C, B we get A not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on H, G, E we get H not in Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on C, F, D we get C not in Line(D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on C, A, D we get C not in Line(A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on G, A, D we get G not in Line(A, D)
By line_inequality on Line(D, H), f, H we get f != Line(D, H)
By not_in_line_equivalent_to_not_collinear_v0_r on G, H, A we get G not in Line(A, H)
By not_in_line_equivalent_to_not_collinear_v0_r on C, E, D we get C not in Line(D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on D, F, E we get D not in Line(E, F)
By not_in_line_equivalent_to_not_collinear_v0_r on H, C, E we get H not in Line(C, E)
By not_in_line_equivalent_to_not_collinear_v0_r on F, E, G we get F not in Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on H, E, A we get H not in Line(A, E)
By not_in_line_equivalent_to_not_collinear_v0_r on D, B, C we get D not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on D, E, A we get D not in Line(A, E)
By line_inequality on Line(B, D), h, B we get h != Line(B, D)
By line_inequality on Line(E, F), g, F we get g != Line(E, F)
By not_in_line_equivalent_to_not_collinear_v0_r on B, H, D we get B not in Line(D, H)
By not_in_line_equivalent_to_not_collinear_v0_r on C, E, F we get C not in Line(E, F)
By not_in_line_equivalent_to_not_collinear_v0_r on F, D, E we get F not in Line(D, E)
By line_inequality on Line(A, D), h, D we get h != Line(A, D)
By line_inequality on Line(B, C), h, B we get h != Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on G, E, H we get G not in Line(E, H)
By not_in_line_equivalent_to_not_collinear_v0_r on G, E, C we get G not in Line(C, E)
By line_inequality on Line(C, E), f, E we get f != Line(C, E)
By not_in_line_equivalent_to_not_collinear_v0_r on G, A, E we get G not in Line(A, E)
By line_inequality on Line(B, G), h, B we get h != Line(B, G)
By not_in_line_equivalent_to_not_collinear_v0_r on E, D, A we get E not in Line(A, D)
By line_inequality on Line(B, E), h, B we get h != Line(B, E)
By line_inequality on Line(B, E), f, E we get f != Line(B, E)
By line_inequality on Line(B, G), f, G we get f != Line(B, G)
By not_in_line_equivalent_to_not_collinear_v0_r on B, E, G we get B not in Line(E, G)
By line_inequality on Line(E, G), g, G we get g != Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on C, B, D we get C not in Line(B, D)
By line_inequality on Line(A, H), g, A we get g != Line(A, H)
By not_in_line_equivalent_to_not_collinear_v0_r on B, E, H we get B not in Line(E, H)
By line_inequality on Line(B, D), f, D we get f != Line(B, D)
By line_inequality on Line(C, E), h, E we get h != Line(C, E)
By same_angle_v1 on A, C, G, H we get angle(C, A, H) == angle(G, A, H) mod 360
By same_angle_v1 on A, C, F, H we get angle(C, A, H) == angle(F, A, H) mod 360
By collinear_definition on F, C, A we get C in Line(A, F), A in Line(C, F), Line(A, F) == Line(C, F), 0 == 2 * angle(C, F, A) mod 360
By reverse_direction on H, D we get 180 == direction(H, D) - direction(D, H) mod 360
By radical_axis_definition_v0_r on C, k, e we get C in radical_axis(e, k)
By radical_axis_definition_v0_r on B, e, c we get B in radical_axis(c, e)
By collinear_definition on F, A, C we get A in Line(C, F), C in Line(A, F), Line(A, F) == Line(C, F), 0 == 2 * angle(A, F, C) mod 360
By collinear_definition on A, C, G we get C in Line(A, G), G in Line(A, C), Line(A, C) == Line(A, G), 0 == 2 * angle(C, A, G) mod 360
By radical_axis_definition_v0_r on D, d, c we get D in radical_axis(c, d)
By radical_axis_definition_v0_r on A, d, c we get A in radical_axis(c, d)
By radical_axis_definition_v0_r on E, d, e we get E in radical_axis(d, e)
By collinear_definition on G, C, A we get C in Line(A, G), A in Line(C, G), Line(A, G) == Line(C, G), 0 == 2 * angle(C, G, A) mod 360
By radical_axis_definition_v0_r on D, k, d we get D in radical_axis(d, k)
By radical_axis_definition_v0_r on C, k, c we get C in radical_axis(c, k)
By radical_axis_definition_v0_r on C, c, e we get C in radical_axis(c, e)
By radical_axis_definition_v0_r on E, k, e we get E in radical_axis(e, k)
By radical_axis_definition_v0_r on D, c, k we get D in radical_axis(c, k)
By collinear_definition on G, A, C we get A in Line(C, G), C in Line(A, G), Line(A, G) == Line(C, G), 0 == 2 * angle(A, G, C) mod 360
By collinear_definition on A, F, C we get F in Line(A, C), C in Line(A, F), Line(A, C) == Line(A, F), 0 == 2 * angle(F, A, C) mod 360
By radical_axis_definition_v0_r on E, k, d we get E in radical_axis(d, k)
By collinear_definition on A, G, C we get G in Line(A, C), C in Line(A, G), Line(A, C) == Line(A, G), 0 == 2 * angle(G, A, C) mod 360
By reverse_direction on H, A we get 180 == direction(H, A) - direction(A, H) mod 360
By collinear_definition on A, C, F we get C in Line(A, F), F in Line(A, C), Line(A, C) == Line(A, F), 0 == 2 * angle(C, A, F) mod 360
By reverse_direction on H, E we get 180 == direction(H, E) - direction(E, H) mod 360
By sss_anti_congruence_v0 on E, H, D, D, H, E we get anti_congruent_triangles(D, E, H, E, D, H)
By sss_anti_congruence_v0 on E, A, H, A, E, H we get anti_congruent_triangles(A, E, H, E, A, H)
By sss_anti_congruence_v0 on H, E, A, H, A, E we get anti_congruent_triangles(A, E, H, E, A, H)
By sss_anti_congruence_v0 on A, H, E, E, H, A we get anti_congruent_triangles(A, E, H, E, A, H)
By sss_anti_congruence_v0 on E, H, D, D, H, E we get anti_congruent_triangles(D, E, H, E, D, H)
By sss_anti_congruence_v1 on H, A, E, H, E, A we get anti_congruent_triangles(A, E, H, E, A, H)
By sss_anti_congruence_v1 on H, E, D, H, D, E we get anti_congruent_triangles(D, E, H, E, D, H)
By sss_anti_congruence_v0 on H, D, E, H, E, D we get anti_congruent_triangles(D, E, H, E, D, H)
By sss_anti_congruence_v1 on D, H, E, E, H, D we get anti_congruent_triangles(D, E, H, E, D, H)
By sss_anti_congruence_v0 on H, E, A, H, A, E we get anti_congruent_triangles(A, E, H, E, A, H)
By sss_anti_congruence_v0 on E, A, H, A, E, H we get anti_congruent_triangles(A, E, H, E, A, H)
By sas_anti_congruence on D, H, A, A, H, D we get anti_congruent_triangles(A, D, H, D, A, H)
By sss_anti_congruence_v0 on D, E, H, E, D, H we get anti_congruent_triangles(D, E, H, E, D, H)
By sss_anti_congruence_v0 on H, E, A, H, A, E we get anti_congruent_triangles(A, E, H, E, A, H)
By sss_anti_congruence_v1 on D, H, E, E, H, D we get anti_congruent_triangles(D, E, H, E, D, H)
By sss_anti_congruence_v0 on E, A, H, A, E, H we get anti_congruent_triangles(A, E, H, E, A, H)
By sss_anti_congruence_v1 on A, E, H, E, A, H we get anti_congruent_triangles(A, E, H, E, A, H)
By sas_anti_congruence on D, H, E, E, H, D we get anti_congruent_triangles(D, E, H, E, D, H)
By sss_anti_congruence_v0 on D, E, H, E, D, H we get anti_congruent_triangles(D, E, H, E, D, H)
By sss_anti_congruence_v0 on D, E, H, E, D, H we get anti_congruent_triangles(D, E, H, E, D, H)
By sss_anti_congruence_v1 on E, H, A, A, H, E we get anti_congruent_triangles(A, E, H, E, A, H)
By sas_anti_congruence on E, H, A, A, H, E we get anti_congruent_triangles(A, E, H, E, A, H)
By sss_anti_congruence_v0 on E, H, D, D, H, E we get anti_congruent_triangles(D, E, H, E, D, H)
By sss_anti_congruence_v1 on H, A, E, H, E, A we get anti_congruent_triangles(A, E, H, E, A, H)
By sss_anti_congruence_v1 on A, E, H, E, A, H we get anti_congruent_triangles(A, E, H, E, A, H)
By isosceles_triangle_properties on H, E, D we get distance(D, H) == distance(E, H), angle(E, D, H) == angle(H, E, D) mod 360
By sss_anti_congruence_v0 on H, D, E, H, E, D we get anti_congruent_triangles(D, E, H, E, D, H)
By sss_anti_congruence_v1 on E, D, H, D, E, H we get anti_congruent_triangles(D, E, H, E, D, H)
By sss_anti_congruence_v0 on D, E, H, E, D, H we get anti_congruent_triangles(D, E, H, E, D, H)
By isosceles_triangle_properties on H, E, A we get distance(A, H) == distance(E, H), angle(E, A, H) == angle(H, E, A) mod 360
By sss_anti_congruence_v0 on E, A, H, A, E, H we get anti_congruent_triangles(A, E, H, E, A, H)
By sss_anti_congruence_v1 on A, E, H, E, A, H we get anti_congruent_triangles(A, E, H, E, A, H)
By sss_anti_congruence_v0 on D, E, H, E, D, H we get anti_congruent_triangles(D, E, H, E, D, H)
By isosceles_triangle_properties on H, D, E we get distance(D, H) == distance(E, H), angle(D, E, H) == angle(H, D, E) mod 360
By isosceles_triangle_properties on H, A, E we get distance(A, H) == distance(E, H), angle(A, E, H) == angle(H, A, E) mod 360
By sss_anti_congruence_v0 on E, H, D, D, H, E we get anti_congruent_triangles(D, E, H, E, D, H)
By sss_anti_congruence_v1 on E, D, H, D, E, H we get anti_congruent_triangles(D, E, H, E, D, H)
By sss_anti_congruence_v0 on A, H, E, E, H, A we get anti_congruent_triangles(A, E, H, E, A, H)
By sss_anti_congruence_v1 on E, H, A, A, H, E we get anti_congruent_triangles(A, E, H, E, A, H)
By sss_anti_congruence_v1 on D, H, E, E, H, D we get anti_congruent_triangles(D, E, H, E, D, H)
By sss_anti_congruence_v1 on E, D, H, D, E, H we get anti_congruent_triangles(D, E, H, E, D, H)
By sss_anti_congruence_v1 on H, A, E, H, E, A we get anti_congruent_triangles(A, E, H, E, A, H)
By sss_anti_congruence_v0 on H, E, A, H, A, E we get anti_congruent_triangles(A, E, H, E, A, H)
By sss_anti_congruence_v0 on H, E, A, H, A, E we get anti_congruent_triangles(A, E, H, E, A, H)
By sss_anti_congruence_v1 on H, E, D, H, D, E we get anti_congruent_triangles(D, E, H, E, D, H)
By sss_anti_congruence_v1 on E, H, A, A, H, E we get anti_congruent_triangles(A, E, H, E, A, H)
By sss_anti_congruence_v0 on A, H, E, E, H, A we get anti_congruent_triangles(A, E, H, E, A, H)
By sss_anti_congruence_v0 on H, D, E, H, E, D we get anti_congruent_triangles(D, E, H, E, D, H)
By sas_anti_congruence on E, H, D, D, H, E we get anti_congruent_triangles(D, E, H, E, D, H)
By sss_anti_congruence_v1 on H, E, D, H, D, E we get anti_congruent_triangles(D, E, H, E, D, H)
By sss_anti_congruence_v0 on E, A, H, A, E, H we get anti_congruent_triangles(A, E, H, E, A, H)
By sas_anti_congruence on A, H, D, D, H, A we get anti_congruent_triangles(A, D, H, D, A, H)
By sss_anti_congruence_v0 on A, H, E, E, H, A we get anti_congruent_triangles(A, E, H, E, A, H)
By isosceles_triangle_properties on H, A, D we get distance(A, H) == distance(D, H), angle(A, D, H) == angle(H, A, D) mod 360
By sss_anti_congruence_v0 on E, H, D, D, H, E we get anti_congruent_triangles(D, E, H, E, D, H)
By sss_anti_congruence_v1 on H, E, D, H, D, E we get anti_congruent_triangles(D, E, H, E, D, H)
By sss_anti_congruence_v1 on A, E, H, E, A, H we get anti_congruent_triangles(A, E, H, E, A, H)
By sss_anti_congruence_v1 on E, D, H, D, E, H we get anti_congruent_triangles(D, E, H, E, D, H)
By isosceles_triangle_properties on H, D, A we get distance(A, H) == distance(D, H), angle(D, A, H) == angle(H, D, A) mod 360
By sas_anti_congruence on A, H, E, E, H, A we get anti_congruent_triangles(A, E, H, E, A, H)
By sss_anti_congruence_v1 on D, H, E, E, H, D we get anti_congruent_triangles(D, E, H, E, D, H)
By sss_anti_congruence_v1 on H, A, E, H, E, A we get anti_congruent_triangles(A, E, H, E, A, H)
By sss_anti_congruence_v1 on D, H, E, E, H, D we get anti_congruent_triangles(D, E, H, E, D, H)
By sss_anti_congruence_v1 on H, E, D, H, D, E we get anti_congruent_triangles(D, E, H, E, D, H)
By sss_anti_congruence_v1 on E, H, A, A, H, E we get anti_congruent_triangles(A, E, H, E, A, H)
By sss_anti_congruence_v0 on H, D, E, H, E, D we get anti_congruent_triangles(D, E, H, E, D, H)
By sss_anti_congruence_v1 on E, D, H, D, E, H we get anti_congruent_triangles(D, E, H, E, D, H)
By sss_anti_congruence_v1 on A, E, H, E, A, H we get anti_congruent_triangles(A, E, H, E, A, H)
By sss_anti_congruence_v1 on E, H, A, A, H, E we get anti_congruent_triangles(A, E, H, E, A, H)
By sss_anti_congruence_v0 on H, D, E, H, E, D we get anti_congruent_triangles(D, E, H, E, D, H)
By sss_anti_congruence_v0 on A, H, E, E, H, A we get anti_congruent_triangles(A, E, H, E, A, H)
By sss_anti_congruence_v1 on H, A, E, H, E, A we get anti_congruent_triangles(A, E, H, E, A, H)
By sss_anti_congruence_v0 on D, E, H, A, E, H we get anti_congruent_triangles(A, E, H, D, E, H)
By sss_congruence_v1 on A, E, H, E, D, H we get congruent_triangles(A, E, H, E, D, H)
By sss_anti_congruence_v0 on E, H, D, E, H, A we get anti_congruent_triangles(A, E, H, D, E, H)
By sss_anti_congruence_v0 on D, E, H, A, E, H we get anti_congruent_triangles(A, E, H, D, E, H)
By sss_anti_congruence_v1 on E, H, A, E, H, D we get anti_congruent_triangles(A, E, H, D, E, H)
By sss_congruence_v0 on D, E, H, E, A, H we get congruent_triangles(A, E, H, E, D, H)
By sss_anti_congruence_v0 on A, H, E, D, H, E we get anti_congruent_triangles(A, E, H, D, E, H)
By sss_anti_congruence_v0 on H, D, E, H, A, E we get anti_congruent_triangles(A, E, H, D, E, H)
By sss_anti_congruence_v1 on H, E, D, H, E, A we get anti_congruent_triangles(A, E, H, D, E, H)
By sss_congruence_v1 on D, H, E, E, H, A we get congruent_triangles(A, E, H, E, D, H)
By sss_congruence_v1 on H, A, E, H, E, D we get congruent_triangles(A, E, H, E, D, H)
By sss_congruence_v0 on D, E, H, E, A, H we get congruent_triangles(A, E, H, E, D, H)
By sss_congruence_v0 on H, E, A, H, D, E we get congruent_triangles(A, E, H, E, D, H)
By sss_congruence_v1 on A, E, H, E, D, H we get congruent_triangles(A, E, H, E, D, H)
By sss_anti_congruence_v1 on H, E, D, H, E, A we get anti_congruent_triangles(A, E, H, D, E, H)
By sss_anti_congruence_v0 on E, H, D, E, H, A we get anti_congruent_triangles(A, E, H, D, E, H)
By sss_congruence_v0 on E, A, H, D, E, H we get congruent_triangles(A, E, H, E, D, H)
By sss_congruence_v0 on H, E, A, H, D, E we get congruent_triangles(A, E, H, E, D, H)
By sss_congruence_v1 on H, A, E, H, E, D we get congruent_triangles(A, E, H, E, D, H)
By sss_congruence_v1 on H, E, D, H, A, E we get congruent_triangles(A, E, H, E, D, H)
By sss_anti_congruence_v1 on A, E, H, D, E, H we get anti_congruent_triangles(A, E, H, D, E, H)
By sss_anti_congruence_v1 on E, D, H, E, A, H we get anti_congruent_triangles(A, E, H, D, E, H)
By sss_anti_congruence_v0 on E, H, D, E, H, A we get anti_congruent_triangles(A, E, H, D, E, H)
By sss_congruence_v0 on E, H, D, A, H, E we get congruent_triangles(A, E, H, E, D, H)
By sss_congruence_v0 on E, A, H, D, E, H we get congruent_triangles(A, E, H, E, D, H)
By sss_anti_congruence_v0 on E, A, H, E, D, H we get anti_congruent_triangles(A, E, H, D, E, H)
By sss_anti_congruence_v1 on D, H, E, A, H, E we get anti_congruent_triangles(A, E, H, D, E, H)
By sss_anti_congruence_v1 on H, E, D, H, E, A we get anti_congruent_triangles(A, E, H, D, E, H)
By sss_congruence_v0 on H, E, A, H, D, E we get congruent_triangles(A, E, H, E, D, H)
By sss_anti_congruence_v1 on H, A, E, H, D, E we get anti_congruent_triangles(A, E, H, D, E, H)
By sss_congruence_v1 on E, H, A, D, H, E we get congruent_triangles(A, E, H, E, D, H)
By sss_congruence_v1 on H, E, D, H, A, E we get congruent_triangles(A, E, H, E, D, H)
By sss_congruence_v1 on E, H, A, D, H, E we get congruent_triangles(A, E, H, E, D, H)
By sss_congruence_v1 on H, E, D, H, A, E we get congruent_triangles(A, E, H, E, D, H)
By sss_anti_congruence_v1 on E, D, H, E, A, H we get anti_congruent_triangles(A, E, H, D, E, H)
By sss_congruence_v0 on H, E, A, H, D, E we get congruent_triangles(A, E, H, E, D, H)
By sss_anti_congruence_v1 on D, H, E, A, H, E we get anti_congruent_triangles(A, E, H, D, E, H)
By sss_congruence_v0 on A, H, E, E, H, D we get congruent_triangles(A, E, H, E, D, H)
By sss_anti_congruence_v1 on D, H, E, A, H, E we get anti_congruent_triangles(A, E, H, D, E, H)
By sss_congruence_v0 on A, H, E, E, H, D we get congruent_triangles(A, E, H, E, D, H)
By sss_congruence_v1 on H, E, D, H, A, E we get congruent_triangles(A, E, H, E, D, H)
By sss_anti_congruence_v1 on A, E, H, D, E, H we get anti_congruent_triangles(A, E, H, D, E, H)
By sss_anti_congruence_v0 on H, D, E, H, A, E we get anti_congruent_triangles(A, E, H, D, E, H)
By sss_anti_congruence_v0 on E, A, H, E, D, H we get anti_congruent_triangles(A, E, H, D, E, H)
By sss_anti_congruence_v0 on H, E, A, H, E, D we get anti_congruent_triangles(A, E, H, D, E, H)
By sss_congruence_v0 on E, H, D, A, H, E we get congruent_triangles(A, E, H, E, D, H)
By sss_anti_congruence_v1 on H, A, E, H, D, E we get anti_congruent_triangles(A, E, H, D, E, H)
By sss_anti_congruence_v0 on E, A, H, E, D, H we get anti_congruent_triangles(A, E, H, D, E, H)
By sss_congruence_v0 on H, E, A, H, D, E we get congruent_triangles(A, E, H, E, D, H)
By perpendicular_bisector_sufficient_conditions on A, D, E, H we get Line(E, H) == perpendicular_bisector(A, D)
By sss_congruence_v1 on D, H, E, E, H, A we get congruent_triangles(A, E, H, E, D, H)
By sss_congruence_v1 on H, A, E, H, E, D we get congruent_triangles(A, E, H, E, D, H)
By sss_anti_congruence_v0 on H, E, A, H, E, D we get anti_congruent_triangles(A, E, H, D, E, H)
By sss_congruence_v0 on E, H, D, A, H, E we get congruent_triangles(A, E, H, E, D, H)
By sss_anti_congruence_v0 on A, H, E, D, H, E we get anti_congruent_triangles(A, E, H, D, E, H)
By sss_congruence_v1 on H, A, E, H, E, D we get congruent_triangles(A, E, H, E, D, H)
By sss_congruence_v0 on A, H, E, E, H, D we get congruent_triangles(A, E, H, E, D, H)
By sss_congruence_v1 on E, H, A, D, H, E we get congruent_triangles(A, E, H, E, D, H)
By sss_congruence_v0 on A, H, E, E, H, D we get congruent_triangles(A, E, H, E, D, H)
By sss_anti_congruence_v0 on E, H, D, E, H, A we get anti_congruent_triangles(A, E, H, D, E, H)
By sss_congruence_v1 on D, H, E, E, H, A we get congruent_triangles(A, E, H, E, D, H)
By sss_congruence_v1 on H, E, D, H, A, E we get congruent_triangles(A, E, H, E, D, H)
By sss_anti_congruence_v1 on H, A, E, H, D, E we get anti_congruent_triangles(A, E, H, D, E, H)
By sss_congruence_v1 on E, D, H, A, E, H we get congruent_triangles(A, E, H, E, D, H)
By sss_anti_congruence_v1 on E, H, A, E, H, D we get anti_congruent_triangles(A, E, H, D, E, H)
By sss_anti_congruence_v0 on D, E, H, A, E, H we get anti_congruent_triangles(A, E, H, D, E, H)
By sss_congruence_v0 on A, H, E, E, H, D we get congruent_triangles(A, E, H, E, D, H)
By sss_congruence_v0 on E, H, D, A, H, E we get congruent_triangles(A, E, H, E, D, H)
By sss_congruence_v1 on E, D, H, A, E, H we get congruent_triangles(A, E, H, E, D, H)
By sss_anti_congruence_v1 on H, A, E, H, D, E we get anti_congruent_triangles(A, E, H, D, E, H)
By sss_anti_congruence_v0 on H, E, A, H, E, D we get anti_congruent_triangles(A, E, H, D, E, H)
By sss_anti_congruence_v1 on E, D, H, E, A, H we get anti_congruent_triangles(A, E, H, D, E, H)
By sss_anti_congruence_v1 on D, H, E, A, H, E we get anti_congruent_triangles(A, E, H, D, E, H)
By sss_congruence_v1 on D, H, E, E, H, A we get congruent_triangles(A, E, H, E, D, H)
By sss_congruence_v0 on E, H, D, A, H, E we get congruent_triangles(A, E, H, E, D, H)
By sss_congruence_v1 on H, A, E, H, E, D we get congruent_triangles(A, E, H, E, D, H)
By sss_anti_congruence_v0 on E, A, H, E, D, H we get anti_congruent_triangles(A, E, H, D, E, H)
By sss_congruence_v1 on E, H, A, D, H, E we get congruent_triangles(A, E, H, E, D, H)
By sss_anti_congruence_v1 on E, H, A, E, H, D we get anti_congruent_triangles(A, E, H, D, E, H)
By sss_congruence_v1 on E, D, H, A, E, H we get congruent_triangles(A, E, H, E, D, H)
By sss_congruence_v1 on A, E, H, E, D, H we get congruent_triangles(A, E, H, E, D, H)
By sss_anti_congruence_v1 on H, E, D, H, E, A we get anti_congruent_triangles(A, E, H, D, E, H)
By sss_anti_congruence_v0 on A, H, E, D, H, E we get anti_congruent_triangles(A, E, H, D, E, H)
By sss_anti_congruence_v1 on E, D, H, E, A, H we get anti_congruent_triangles(A, E, H, D, E, H)
By sss_congruence_v0 on H, D, E, H, E, A we get congruent_triangles(A, E, H, E, D, H)
By sss_congruence_v0 on D, E, H, E, A, H we get congruent_triangles(A, E, H, E, D, H)
By sss_anti_congruence_v1 on H, E, D, H, E, A we get anti_congruent_triangles(A, E, H, D, E, H)
By sss_anti_congruence_v0 on H, D, E, H, A, E we get anti_congruent_triangles(A, E, H, D, E, H)
By sss_congruence_v0 on E, A, H, D, E, H we get congruent_triangles(A, E, H, E, D, H)
By sss_congruence_v0 on D, E, H, E, A, H we get congruent_triangles(A, E, H, E, D, H)
By sss_anti_congruence_v0 on E, H, D, E, H, A we get anti_congruent_triangles(A, E, H, D, E, H)
By sss_congruence_v0 on H, D, E, H, E, A we get congruent_triangles(A, E, H, E, D, H)
By sss_anti_congruence_v1 on A, E, H, D, E, H we get anti_congruent_triangles(A, E, H, D, E, H)
By sss_anti_congruence_v1 on E, H, A, E, H, D we get anti_congruent_triangles(A, E, H, D, E, H)
By sss_anti_congruence_v1 on E, D, H, E, A, H we get anti_congruent_triangles(A, E, H, D, E, H)
By sss_congruence_v1 on E, H, A, D, H, E we get congruent_triangles(A, E, H, E, D, H)
By sss_anti_congruence_v0 on H, E, A, H, E, D we get anti_congruent_triangles(A, E, H, D, E, H)
By sss_congruence_v1 on E, D, H, A, E, H we get congruent_triangles(A, E, H, E, D, H)
By sss_anti_congruence_v1 on A, E, H, D, E, H we get anti_congruent_triangles(A, E, H, D, E, H)
By sss_congruence_v1 on A, E, H, E, D, H we get congruent_triangles(A, E, H, E, D, H)
By sss_anti_congruence_v0 on A, H, E, D, H, E we get anti_congruent_triangles(A, E, H, D, E, H)
By sss_anti_congruence_v0 on H, D, E, H, A, E we get anti_congruent_triangles(A, E, H, D, E, H)
By sss_congruence_v0 on H, D, E, H, E, A we get congruent_triangles(A, E, H, E, D, H)
By sss_congruence_v1 on D, H, E, E, H, A we get congruent_triangles(A, E, H, E, D, H)
By sss_congruence_v1 on E, D, H, A, E, H we get congruent_triangles(A, E, H, E, D, H)
By sss_anti_congruence_v0 on H, D, E, H, A, E we get anti_congruent_triangles(A, E, H, D, E, H)
By sss_anti_congruence_v0 on E, A, H, E, D, H we get anti_congruent_triangles(A, E, H, D, E, H)
By sss_congruence_v0 on E, A, H, D, E, H we get congruent_triangles(A, E, H, E, D, H)
By sss_congruence_v0 on H, D, E, H, E, A we get congruent_triangles(A, E, H, E, D, H)
By sss_anti_congruence_v1 on E, H, A, E, H, D we get anti_congruent_triangles(A, E, H, D, E, H)
By sss_anti_congruence_v0 on D, E, H, A, E, H we get anti_congruent_triangles(A, E, H, D, E, H)
By sss_anti_congruence_v1 on A, E, H, D, E, H we get anti_congruent_triangles(A, E, H, D, E, H)
By sss_congruence_v0 on E, A, H, D, E, H we get congruent_triangles(A, E, H, E, D, H)
By sss_anti_congruence_v0 on A, H, E, D, H, E we get anti_congruent_triangles(A, E, H, D, E, H)
By sss_anti_congruence_v1 on H, A, E, H, D, E we get anti_congruent_triangles(A, E, H, D, E, H)
By sss_congruence_v1 on A, E, H, E, D, H we get congruent_triangles(A, E, H, E, D, H)
By sss_congruence_v0 on H, D, E, H, E, A we get congruent_triangles(A, E, H, E, D, H)
By sss_congruence_v0 on D, E, H, E, A, H we get congruent_triangles(A, E, H, E, D, H)
By sss_anti_congruence_v0 on H, E, A, H, E, D we get anti_congruent_triangles(A, E, H, D, E, H)
By sss_anti_congruence_v0 on D, E, H, A, E, H we get anti_congruent_triangles(A, E, H, D, E, H)
By sss_anti_congruence_v1 on D, H, E, A, H, E we get anti_congruent_triangles(A, E, H, D, E, H)
By power_of_a_point_definition on A, G, C, e we get log(power_of_a_point(A, e)) == log(distance(A, G)) + log(distance(A, C))
By power_of_a_point_definition on A, F, C, k we get log(power_of_a_point(A, k)) == log(distance(A, F)) + log(distance(A, C))
By power_of_a_point_definition on G, C, A, c we get log(power_of_a_point(G, c)) == log(distance(C, G)) + log(distance(A, G))
By power_of_a_point_definition on F, A, C, c we get log(power_of_a_point(F, c)) == log(distance(A, F)) + log(distance(C, F))
By concyclic_sufficient_conditions_v0 on A, G, E, D we get concyclic(A, D, E, G)
By line_intersection_definition on F, h, Line(D, F) we get F == line_intersection(h, Line(D, F))
By line_intersection_definition on C, Line(C, E), h we get C == line_intersection(h, Line(C, E))
By line_intersection_definition on B, f, Line(B, E) we get B == line_intersection(f, Line(B, E))
By perpendicular_line_definition on D, Line(A, D), Line(E, H) we get Line(A, D) == perpendicular_line(D, Line(E, H))
By line_intersection_definition on D, Line(A, D), g we get D == line_intersection(g, Line(A, D))
By line_intersection_definition on C, Line(B, C), h we get C == line_intersection(h, Line(B, C))
By median_definition on H, A, D, Line(E, H) we get Line(E, H) == median(H, A, D)
By line_intersection_definition on D, g, Line(D, F) we get D == line_intersection(g, Line(D, F))
By line_intersection_definition on G, Line(B, G), h we get G == line_intersection(h, Line(B, G))
By perpendicular_line_definition on A, Line(A, D), Line(E, H) we get Line(A, D) == perpendicular_line(A, Line(E, H))
By line_intersection_definition on F, h, Line(E, F) we get F == line_intersection(h, Line(E, F))
By perpendicular_line_definition on H, Line(E, H), Line(A, D) we get Line(E, H) == perpendicular_line(H, Line(A, D))
By line_intersection_definition on A, Line(A, D), h we get A == line_intersection(h, Line(A, D))
By line_intersection_definition on A, Line(A, E), h we get A == line_intersection(h, Line(A, E))
By line_intersection_definition on A, Line(A, E), f we get A == line_intersection(f, Line(A, E))
By line_intersection_definition on A, h, Line(A, H) we get A == line_intersection(h, Line(A, H))
By line_intersection_definition on B, f, Line(B, D) we get B == line_intersection(f, Line(B, D))
By line_intersection_definition on G, h, Line(E, G) we get G == line_intersection(h, Line(E, G))
By line_intersection_definition on B, f, Line(B, G) we get B == line_intersection(f, Line(B, G))
By line_intersection_definition on A, f, Line(A, D) we get A == line_intersection(f, Line(A, D))
By line_intersection_definition on A, Line(A, H), f we get A == line_intersection(f, Line(A, H))
By perpendicular_line_definition on E, Line(E, H), Line(A, D) we get Line(E, H) == perpendicular_line(E, Line(A, D))
By median_definition on E, D, A, Line(E, H) we get Line(E, H) == median(E, A, D)
By line_intersection_definition on B, Line(B, C), f we get B == line_intersection(f, Line(B, C))
By perpendicular_direction_conditions_v0 on E, G, B, A we get perpendicular(Line(A, B), Line(E, G))
By between_implies_orientation on G, A, F, C we get orientation(A, F, G) == orientation(C, G, F) mod 360, orientation(A, C, G) == orientation(A, F, G) mod 360
By same_angle_converse_v0 on B, D, G, C we get collinear(B, D, G)
By perpendicular_direction_conditions_v0 on A, D, F, E we get perpendicular(Line(A, D), Line(E, F))
By between_imply_not_between on C, F, A we get collinear_and_not_between(A, C, F)
By perpendicular_direction_conditions_v0 on E, G, C, D we get perpendicular(Line(C, D), Line(E, G))
By between_implies_orientation on F, G, C, A we get orientation(A, F, C) == orientation(C, F, G) mod 360, orientation(A, F, G) == orientation(C, F, G) mod 360
By between_implies_orientation on F, A, C, G we get orientation(A, C, F) == orientation(C, G, F) mod 360, orientation(A, C, F) == orientation(A, G, F) mod 360
By between_imply_not_between on D, midpoint(A, D), A we get collinear_and_not_between(A, D, midpoint(A, D))
By between_implies_orientation on G, C, F, A we get orientation(A, G, F) == orientation(C, F, G) mod 360, orientation(A, G, C) == orientation(C, F, G) mod 360
By between_imply_not_between on G, C, A we get collinear_and_not_between(A, G, C)
By between_imply_not_between on A, midpoint(A, D), D we get collinear_and_not_between(D, A, midpoint(A, D))
By between_imply_not_between on A, F, C we get collinear_and_not_between(C, A, F)
By between_imply_not_between on A, C, G we get collinear_and_not_between(C, A, G)
By circle_radius_v0_r on G, e we get radius(e) == distance(G, center(e))
By circle_radius_v0_r on C, e we get radius(e) == distance(C, center(e))
By circle_radius_v0_r on D, k we get radius(k) == distance(D, center(k))
By circle_radius_v0_r on B, e we get radius(e) == distance(B, center(e))
By circle_radius_v0_r on C, k we get radius(k) == distance(C, center(k))
By circle_radius_v0_r on E, e we get radius(e) == distance(E, center(e))
By circle_radius_v0_r on E, k we get radius(k) == distance(E, center(k))
By circle_radius_v0_r on F, k we get radius(k) == distance(F, center(k))
By angle_to_center on E, C, F, k we get 2 * angle(E, C, F) == angle(E, center(k), F) mod 360
By angle_to_center on C, F, E, k we get 2 * angle(C, F, E) == angle(C, center(k), E) mod 360
By angle_to_center on D, C, F, k we get 2 * angle(D, C, F) == angle(D, center(k), F) mod 360
By angle_to_center on D, F, E, k we get 2 * angle(D, F, E) == angle(D, center(k), E) mod 360
By angle_to_center on G, B, C, e we get 2 * angle(G, B, C) == angle(G, center(e), C) mod 360
By angle_to_center on B, G, C, e we get 2 * angle(B, G, C) == angle(B, center(e), C) mod 360
By angle_to_center on F, C, D, k we get 2 * angle(F, C, D) == angle(F, center(k), D) mod 360
By angle_to_center on E, G, B, e we get 2 * angle(E, G, B) == angle(E, center(e), B) mod 360
By angle_to_center on B, E, G, e we get 2 * angle(B, E, G) == angle(B, center(e), G) mod 360
By angle_to_center on B, E, C, e we get 2 * angle(B, E, C) == angle(B, center(e), C) mod 360
By center_not_on_circle on e we get center(e) not in e
By angle_to_center on B, G, E, e we get 2 * angle(B, G, E) == angle(B, center(e), E) mod 360
By angle_to_center on G, E, C, e we get 2 * angle(G, E, C) == angle(G, center(e), C) mod 360
By angle_to_center on C, E, D, k we get 2 * angle(C, E, D) == angle(C, center(k), D) mod 360
By angle_to_center on G, B, E, e we get 2 * angle(G, B, E) == angle(G, center(e), E) mod 360
By angle_to_center on C, G, E, e we get 2 * angle(C, G, E) == angle(C, center(e), E) mod 360
By angle_to_center on F, D, E, k we get 2 * angle(F, D, E) == angle(F, center(k), E) mod 360
By angle_to_center on E, D, F, k we get 2 * angle(E, D, F) == angle(E, center(k), F) mod 360
By angle_to_center on E, F, D, k we get 2 * angle(E, F, D) == angle(E, center(k), D) mod 360
By angle_to_center on D, F, C, k we get 2 * angle(D, F, C) == angle(D, center(k), C) mod 360
By angle_to_center on E, C, B, e we get 2 * angle(E, C, B) == angle(E, center(e), B) mod 360
By angle_to_center on G, C, E, e we get 2 * angle(G, C, E) == angle(G, center(e), E) mod 360
By angle_to_center on F, C, E, k we get 2 * angle(F, C, E) == angle(F, center(k), E) mod 360
By angle_to_center on D, E, F, k we get 2 * angle(D, E, F) == angle(D, center(k), F) mod 360
By angle_to_center on C, E, F, k we get 2 * angle(C, E, F) == angle(C, center(k), F) mod 360
By angle_to_center on C, F, D, k we get 2 * angle(C, F, D) == angle(C, center(k), D) mod 360
By angle_to_center on C, B, G, e we get 2 * angle(C, B, G) == angle(C, center(e), G) mod 360
By angle_to_center on C, D, E, k we get 2 * angle(C, D, E) == angle(C, center(k), E) mod 360
By angle_to_center on D, C, E, k we get 2 * angle(D, C, E) == angle(D, center(k), E) mod 360
By angle_to_center on C, B, E, e we get 2 * angle(C, B, E) == angle(C, center(e), E) mod 360
By angle_to_center on E, C, G, e we get 2 * angle(E, C, G) == angle(E, center(e), G) mod 360
By angle_to_center on C, E, B, e we get 2 * angle(C, E, B) == angle(C, center(e), B) mod 360
By angle_to_center on F, E, D, k we get 2 * angle(F, E, D) == angle(F, center(k), D) mod 360
By angle_to_center on G, C, B, e we get 2 * angle(G, C, B) == angle(G, center(e), B) mod 360
By angle_to_center on E, C, D, k we get 2 * angle(E, C, D) == angle(E, center(k), D) mod 360
By angle_to_center on E, B, C, e we get 2 * angle(E, B, C) == angle(E, center(e), C) mod 360
By angle_to_center on F, E, C, k we get 2 * angle(F, E, C) == angle(F, center(k), C) mod 360
By angle_to_center on D, E, C, k we get 2 * angle(D, E, C) == angle(D, center(k), C) mod 360
By angle_to_center on C, G, B, e we get 2 * angle(C, G, B) == angle(C, center(e), B) mod 360
By angle_to_center on B, C, E, e we get 2 * angle(B, C, E) == angle(B, center(e), E) mod 360
By angle_to_center on C, E, G, e we get 2 * angle(C, E, G) == angle(C, center(e), G) mod 360
By angle_to_center on F, D, C, k we get 2 * angle(F, D, C) == angle(F, center(k), C) mod 360
By same_angle_v1 on F, C, G, E we get angle(C, F, E) == angle(G, F, E) mod 360
By angle_to_center on E, G, C, e we get 2 * angle(E, G, C) == angle(E, center(e), C) mod 360
By angle_to_center on G, E, B, e we get 2 * angle(G, E, B) == angle(G, center(e), B) mod 360
By angle_to_center on C, D, F, k we get 2 * angle(C, D, F) == angle(C, center(k), F) mod 360
By angle_to_center on E, F, C, k we get 2 * angle(E, F, C) == angle(E, center(k), C) mod 360
By angle_to_center on E, D, C, k we get 2 * angle(E, D, C) == angle(E, center(k), C) mod 360
By angle_to_center on B, C, G, e we get 2 * angle(B, C, G) == angle(B, center(e), G) mod 360
By angle_to_center on E, B, G, e we get 2 * angle(E, B, G) == angle(E, center(e), G) mod 360
By center_not_on_circle on k we get center(k) not in k
By same_angle_v0 on G, A, F, B we get angle(A, G, B) == angle(F, G, B) mod 360
By same_angle_v1 on F, G, C, D we get angle(C, F, D) == angle(G, F, D) mod 360
By same_angle_v3 on F, A, G, D we get angle(A, F, D) == angle(G, F, D) + 180 mod 360
By divide_by_2_mod_180_v1 on C, A, H, E, B, A we get angle(C, A, H) == angle(E, B, A) mod 360
By same_angle_v0 on G, F, C, E we get angle(C, G, E) == angle(F, G, E) mod 360
By same_angle_v0 on G, C, F, B we get angle(C, G, B) == angle(F, G, B) mod 360
By same_angle_v2 on F, A, G, E we get angle(A, F, E) == angle(G, F, E) + 180 mod 360
By same_angle_v0 on G, F, A, E we get angle(A, G, E) == angle(F, G, E) mod 360
By divide_by_2_mod_180_v0 on D, E, F, H, E, A we get angle(D, E, F) == angle(H, E, A) mod 360
By line_inequality on Line(A, D), Line(C, E), D we get Line(A, D) != Line(C, E)
By divide_by_2_mod_180_v1 on F, A, B, A, E, H we get angle(A, E, H) == angle(F, A, B) mod 360
By in_imply_collinear on midpoint(A, D), E, H we get collinear(E, H, midpoint(A, D))
By divide_by_2_mod_180_v1 on G, A, B, E, D, H we get angle(E, D, H) == angle(G, A, B) mod 360
By divide_by_2_mod_180_v0 on H, D, E, B, A, F we get angle(B, A, F) == angle(H, D, E) mod 360
By divide_by_2_mod_180_v3 on B, D, C, H, E, A we get angle(B, D, C) == angle(H, E, A) + 180 mod 360
By divide_by_2_mod_180_v3 on H, E, D, F, C, D we get angle(H, E, D) == angle(F, C, D) + 180 mod 360
By probably_between_and_collinear_implies_between on A, F, G we get between(A, F, G)
By divide_by_2_mod_180_v0 on H, D, E, D, E, F we get angle(D, E, F) == angle(H, D, E) mod 360
By divide_by_2_mod_180_v2 on C, D, B, H, E, D we get angle(C, D, B) == angle(H, E, D) + 180 mod 360
By divide_by_2_mod_180_v3 on D, C, A, H, D, E we get angle(D, C, A) == angle(H, D, E) + 180 mod 360
By divide_by_2_mod_180_v1 on A, E, H, A, B, D we get angle(A, B, D) == angle(A, E, H) mod 360
By divide_by_2_mod_180_v0 on H, A, F, A, B, E we get angle(A, B, E) == angle(H, A, F) mod 360
By line_inequality on Line(D, H), Line(E, G), H we get Line(D, H) != Line(E, G)
By divide_by_2_mod_180_v3 on D, C, A, D, E, H we get angle(D, C, A) == angle(D, E, H) + 180 mod 360
By divide_by_2_mod_180_v1 on G, A, B, H, E, D we get angle(G, A, B) == angle(H, E, D) mod 360
By divide_by_2_mod_180_v0 on B, A, C, H, D, E we get angle(B, A, C) == angle(H, D, E) mod 360
By line_inequality on Line(D, F), Line(B, E), F we get Line(B, E) != Line(D, F)
By line_inequality on Line(D, F), Line(D, H), F we get Line(D, F) != Line(D, H)
By divide_by_2_mod_180_v1 on C, A, H, B, A, E we get angle(B, A, E) == angle(C, A, H) mod 360
By divide_by_2_mod_180_v1 on H, A, E, F, A, B we get angle(F, A, B) == angle(H, A, E) mod 360
By divide_by_2_mod_180_v0 on H, A, G, A, B, E we get angle(A, B, E) == angle(H, A, G) mod 360
By probably_between_and_collinear_implies_between on F, C, G we get between(F, C, G)
By divide_by_2_mod_180_v2 on C, D, B, E, D, H we get angle(C, D, B) == angle(E, D, H) + 180 mod 360
By divide_by_2_mod_180_v0 on H, A, C, A, B, E we get angle(A, B, E) == angle(H, A, C) mod 360
By divide_by_2_mod_180_v1 on F, A, H, B, A, E we get angle(B, A, E) == angle(F, A, H) mod 360
By divide_by_2_mod_180_v3 on D, C, F, D, E, H we get angle(D, C, F) == angle(D, E, H) + 180 mod 360
By divide_by_2_mod_180_v1 on A, E, H, G, A, B we get angle(A, E, H) == angle(G, A, B) mod 360
By divide_by_2_mod_180_v0 on B, A, F, H, E, A we get angle(B, A, F) == angle(H, E, A) mod 360
By divide_by_2_mod_180_v0 on D, C, G, H, D, E we get angle(D, C, G) == angle(H, D, E) mod 360
By divide_by_2_mod_180_v2 on C, D, B, H, A, E we get angle(C, D, B) == angle(H, A, E) + 180 mod 360
By divide_by_2_mod_180_v0 on H, A, C, E, A, B we get angle(E, A, B) == angle(H, A, C) mod 360
By divide_by_2_mod_180_v3 on D, C, A, H, E, A we get angle(D, C, A) == angle(H, E, A) + 180 mod 360
By divide_by_2_mod_180_v0 on D, E, H, D, C, G we get angle(D, C, G) == angle(D, E, H) mod 360
By between_imply_segment_sum on A, C, G we get distance(A, G) == distance(A, C) + distance(C, G)
By divide_by_2_mod_180_v0 on B, A, G, H, D, E we get angle(B, A, G) == angle(H, D, E) mod 360
By divide_by_2_mod_180_v1 on A, E, H, C, A, B we get angle(A, E, H) == angle(C, A, B) mod 360
By divide_by_2_mod_180_v0 on D, B, A, H, D, E we get angle(D, B, A) == angle(H, D, E) mod 360
By divide_by_2_mod_180_v1 on G, C, D, H, E, D we get angle(G, C, D) == angle(H, E, D) mod 360
By divide_by_2_mod_180_v1 on H, A, E, C, A, B we get angle(C, A, B) == angle(H, A, E) mod 360
By aa_anti_similarity on E, B, G, E, A, G we get anti_similar_triangles(A, E, G, B, E, G)
By divide_by_2_mod_180_v0 on E, A, H, D, C, G we get angle(D, C, G) == angle(E, A, H) mod 360
By divide_by_2_mod_180_v2 on F, C, D, A, E, H we get angle(F, C, D) == angle(A, E, H) + 180 mod 360
By divide_by_2_mod_180_v0 on D, E, H, D, B, A we get angle(D, B, A) == angle(D, E, H) mod 360
By divide_by_2_mod_180_v3 on E, D, H, C, D, B we get angle(E, D, H) == angle(C, D, B) + 180 mod 360
By divide_by_2_mod_180_v3 on B, D, C, H, D, E we get angle(B, D, C) == angle(H, D, E) + 180 mod 360
By divide_by_2_mod_180_v0 on D, B, A, H, E, A we get angle(D, B, A) == angle(H, E, A) mod 360
By divide_by_2_mod_180_v3 on B, D, C, E, A, H we get angle(B, D, C) == angle(E, A, H) + 180 mod 360
By divide_by_2_mod_180_v2 on E, A, H, B, D, C we get angle(E, A, H) == angle(B, D, C) + 180 mod 360
By line_inequality on Line(E, F), Line(A, H), F we get Line(A, H) != Line(E, F)
By line_inequality on Line(C, E), g, E we get g != Line(C, E)
By divide_by_2_mod_180_v3 on D, C, F, H, D, E we get angle(D, C, F) == angle(H, D, E) + 180 mod 360
By divide_by_2_mod_180_v3 on A, E, H, A, C, D we get angle(A, E, H) == angle(A, C, D) + 180 mod 360
By divide_by_2_mod_180_v2 on D, E, H, D, C, A we get angle(D, E, H) == angle(D, C, A) + 180 mod 360
By divide_by_2_mod_180_v1 on A, E, H, F, E, D we get angle(A, E, H) == angle(F, E, D) mod 360
By divide_by_2_mod_180_v1 on B, A, E, G, A, H we get angle(B, A, E) == angle(G, A, H) mod 360
By divide_by_2_mod_180_v1 on H, A, E, F, E, D we get angle(F, E, D) == angle(H, A, E) mod 360
By divide_by_2_mod_180_v1 on A, B, D, E, D, H we get angle(A, B, D) == angle(E, D, H) mod 360
By aa_anti_similarity on E, A, F, E, D, F we get anti_similar_triangles(A, E, F, D, E, F)
By divide_by_2_mod_180_v1 on E, B, A, F, A, H we get angle(E, B, A) == angle(F, A, H) mod 360
By divide_by_2_mod_180_v1 on E, B, A, G, A, H we get angle(E, B, A) == angle(G, A, H) mod 360
By line_inequality on Line(B, G), Line(E, H), B we get Line(B, G) != Line(E, H)
By line_inequality on g, Line(B, D), C we get g != Line(B, D)
By isosceles_trapezoid_properties on D, C, B, A we get parallel(Line(A, B), Line(C, D)), distance(A, D) == distance(B, C), angle(A, D, C) == angle(D, C, B), angle(B, A, D) == angle(C, B, A)
By divide_by_2_mod_180_v2 on H, E, A, D, C, A we get angle(H, E, A) == angle(D, C, A) + 180 mod 360
By divide_by_2_mod_180_v0 on B, A, C, H, E, A we get angle(B, A, C) == angle(H, E, A) mod 360
By divide_by_2_mod_180_v1 on F, E, D, E, D, H we get angle(E, D, H) == angle(F, E, D) mod 360
By divide_by_2_mod_180_v1 on A, B, D, H, A, E we get angle(A, B, D) == angle(H, A, E) mod 360
By divide_by_2_mod_180_v0 on H, E, A, B, A, G we get angle(B, A, G) == angle(H, E, A) mod 360
By line_inequality on Line(A, H), Line(D, F), H we get Line(A, H) != Line(D, F)
By divide_by_2_mod_180_v2 on H, E, A, B, D, C we get angle(H, E, A) == angle(B, D, C) + 180 mod 360
By between_imply_segment_sum on C, F, A we get distance(A, C) == distance(C, F) + distance(A, F)
By divide_by_2_mod_180_v0 on D, E, H, B, A, F we get angle(B, A, F) == angle(D, E, H) mod 360
By line_inequality on Line(C, E), Line(B, G), C we get Line(B, G) != Line(C, E)
By divide_by_2_mod_180_v2 on H, D, E, D, C, A we get angle(H, D, E) == angle(D, C, A) + 180 mod 360
By divide_by_2_mod_180_v1 on G, C, D, A, E, H we get angle(A, E, H) == angle(G, C, D) mod 360
By line_inequality on Line(E, H), Line(D, F), E we get Line(D, F) != Line(E, H)
By divide_by_2_mod_180_v2 on A, C, D, H, E, D we get angle(A, C, D) == angle(H, E, D) + 180 mod 360
By divide_by_2_mod_180_v0 on D, E, H, D, E, F we get angle(D, E, F) == angle(D, E, H) mod 360
By divide_by_2_mod_180_v3 on A, E, H, C, D, B we get angle(A, E, H) == angle(C, D, B) + 180 mod 360
By divide_by_2_mod_180_v0 on E, A, B, H, A, F we get angle(E, A, B) == angle(H, A, F) mod 360
By line_inequality on Line(E, H), Line(D, H), E we get Line(D, H) != Line(E, H)
By divide_by_2_mod_180_v0 on E, A, H, B, A, F we get angle(B, A, F) == angle(E, A, H) mod 360
By divide_by_2_mod_180_v1 on H, A, E, G, C, D we get angle(G, C, D) == angle(H, A, E) mod 360
By divide_by_2_mod_180_v0 on D, C, G, H, E, A we get angle(D, C, G) == angle(H, E, A) mod 360
By divide_by_2_mod_180_v2 on H, D, E, D, C, F we get angle(H, D, E) == angle(D, C, F) + 180 mod 360
By divide_by_2_mod_180_v0 on B, A, C, E, A, H we get angle(B, A, C) == angle(E, A, H) mod 360
By divide_by_2_mod_180_v1 on E, D, H, C, A, B we get angle(C, A, B) == angle(E, D, H) mod 360
By divide_by_2_mod_180_v2 on A, C, D, H, A, E we get angle(A, C, D) == angle(H, A, E) + 180 mod 360
By collinear_definition on A, G, F we get G in Line(A, F), F in Line(A, G), Line(A, F) == Line(A, G), 0 == 2 * angle(G, A, F) mod 360
By divide_by_2_mod_180_v0 on E, A, B, H, A, G we get angle(E, A, B) == angle(H, A, G) mod 360
By divide_by_2_mod_180_v1 on H, E, D, F, A, B we get angle(F, A, B) == angle(H, E, D) mod 360
By divide_by_2_mod_180_v1 on H, E, D, A, B, D we get angle(A, B, D) == angle(H, E, D) mod 360
By divide_by_2_mod_180_v3 on H, A, E, F, C, D we get angle(H, A, E) == angle(F, C, D) + 180 mod 360
By divide_by_2_mod_180_v3 on E, D, H, A, C, D we get angle(E, D, H) == angle(A, C, D) + 180 mod 360
By divide_by_2_mod_180_v0 on E, A, H, D, E, F we get angle(D, E, F) == angle(E, A, H) mod 360
By divide_by_2_mod_180_v1 on G, A, B, H, A, E we get angle(G, A, B) == angle(H, A, E) mod 360
By line_inequality on Line(D, F), Line(B, D), F we get Line(B, D) != Line(D, F)
By divide_by_2_mod_180_v3 on H, A, E, C, D, B we get angle(H, A, E) == angle(C, D, B) + 180 mod 360
By divide_by_2_mod_180_v2 on D, E, H, B, D, C we get angle(D, E, H) == angle(B, D, C) + 180 mod 360
By line_inequality on Line(A, E), Line(C, E), A we get Line(A, E) != Line(C, E)
By divide_by_2_mod_180_v2 on H, D, E, B, D, C we get angle(H, D, E) == angle(B, D, C) + 180 mod 360
By divide_by_2_mod_180_v2 on C, D, B, A, E, H we get angle(C, D, B) == angle(A, E, H) + 180 mod 360
By divide_by_2_mod_180_v0 on B, A, C, D, E, H we get angle(B, A, C) == angle(D, E, H) mod 360
By divide_by_2_mod_180_v1 on E, D, H, G, C, D we get angle(E, D, H) == angle(G, C, D) mod 360
By line_inequality on Line(D, F), Line(C, E), D we get Line(C, E) != Line(D, F)
By collinear_definition on C, G, F we get G in Line(C, F), F in Line(C, G), Line(C, F) == Line(C, G), 0 == 2 * angle(G, C, F) mod 360
By divide_by_2_mod_180_v3 on H, E, D, A, C, D we get angle(H, E, D) == angle(A, C, D) + 180 mod 360
By aa_anti_similarity on E, F, A, E, F, D we get anti_similar_triangles(A, E, F, D, E, F)
By line_inequality on Line(D, H), Line(C, E), D we get Line(C, E) != Line(D, H)
By divide_by_2_mod_180_v1 on H, E, D, C, A, B we get angle(C, A, B) == angle(H, E, D) mod 360
By line_inequality on Line(B, G), Line(A, E), B we get Line(A, E) != Line(B, G)
By isosceles_trapezoid_properties on D, C, A, B we get parallel(Line(A, B), Line(C, D)), distance(A, C) == distance(B, D), angle(B, D, C) == angle(D, C, A), angle(A, B, D) == angle(C, A, B)
By divide_by_2_mod_180_v0 on E, A, H, B, A, G we get angle(B, A, G) == angle(E, A, H) mod 360
By line_inequality on Line(D, E), g, E we get g != Line(D, E)
By line_inequality on Line(D, E), Line(B, C), D we get Line(B, C) != Line(D, E)
By divide_by_2_mod_180_v2 on H, E, A, D, C, F we get angle(H, E, A) == angle(D, C, F) + 180 mod 360
By line_inequality on Line(B, C), Line(A, H), B we get Line(A, H) != Line(B, C)
By aa_anti_similarity on E, G, B, E, G, A we get anti_similar_triangles(A, E, G, B, E, G)
By divide_by_2_mod_180_v2 on F, C, D, H, E, D we get angle(F, C, D) == angle(H, E, D) + 180 mod 360
By divide_by_2_mod_180_v3 on B, D, C, D, E, H we get angle(B, D, C) == angle(D, E, H) + 180 mod 360
By line_inequality on g, Line(E, H), D we get g != Line(E, H)
By divide_by_2_mod_180_v3 on D, C, A, E, A, H we get angle(D, C, A) == angle(E, A, H) + 180 mod 360
By line_inequality on Line(B, E), Line(D, H), B we get Line(B, E) != Line(D, H)
By divide_by_2_mod_180_v1 on F, E, D, H, E, D we get angle(F, E, D) == angle(H, E, D) mod 360
By divide_by_2_mod_180_v3 on E, D, H, F, C, D we get angle(E, D, H) == angle(F, C, D) + 180 mod 360
By divide_by_2_mod_180_v3 on H, A, E, A, C, D we get angle(H, A, E) == angle(A, C, D) + 180 mod 360
By isosceles_trapezoid_properties on A, B, C, D we get parallel(Line(A, B), Line(C, D)), distance(A, D) == distance(B, C), angle(A, B, C) == angle(D, A, B), angle(B, C, D) == angle(C, D, A)
By divide_by_2_mod_180_v3 on A, E, H, F, C, D we get angle(A, E, H) == angle(F, C, D) + 180 mod 360
By divide_by_2_mod_180_v2 on D, E, H, D, C, F we get angle(D, E, H) == angle(D, C, F) + 180 mod 360
By divide_by_2_mod_180_v2 on A, C, D, A, E, H we get angle(A, C, D) == angle(A, E, H) + 180 mod 360
By line_inequality on Line(A, D), Line(B, C), D we get Line(A, D) != Line(B, C)
By isosceles_trapezoid_properties on B, A, C, D we get parallel(Line(A, B), Line(C, D)), distance(A, C) == distance(B, D), angle(B, A, C) == angle(D, B, A), angle(A, C, D) == angle(C, D, B)
By aa_anti_similarity on E, D, F, E, A, F we get anti_similar_triangles(A, E, F, D, E, F)
By line_inequality on Line(A, H), Line(B, E), H we get Line(A, H) != Line(B, E)
By divide_by_2_mod_180_v0 on B, A, G, D, E, H we get angle(B, A, G) == angle(D, E, H) mod 360
By divide_by_2_mod_180_v0 on D, B, A, E, A, H we get angle(D, B, A) == angle(E, A, H) mod 360
By divide_by_2_mod_180_v3 on H, E, D, C, D, B we get angle(H, E, D) == angle(C, D, B) + 180 mod 360
By divide_by_2_mod_180_v1 on E, D, H, F, A, B we get angle(E, D, H) == angle(F, A, B) mod 360
By line_inequality on Line(B, C), Line(E, F), C we get Line(B, C) != Line(E, F)
By line_inequality on Line(D, F), Line(B, G), F we get Line(B, G) != Line(D, F)
By divide_by_2_mod_180_v2 on A, C, D, E, D, H we get angle(A, C, D) == angle(E, D, H) + 180 mod 360
By line_circle_intersection_has_at_most_two_points_0 on D, A, midpoint(A, D), c we get midpoint(A, D) not in c
By line_inequality on Line(E, G), Line(B, C), G we get Line(B, C) != Line(E, G)
By line_inequality on Line(B, D), Line(E, F), B we get Line(B, D) != Line(E, F)
By divide_by_2_mod_180_v2 on F, C, D, H, A, E we get angle(F, C, D) == angle(H, A, E) + 180 mod 360
By line_inequality on Line(B, D), Line(A, E), D we get Line(A, E) != Line(B, D)
By line_inequality on Line(B, G), Line(A, D), G we get Line(A, D) != Line(B, G)
By line_inequality on Line(E, G), Line(B, G), E we get Line(B, G) != Line(E, G)
By line_inequality on Line(B, E), Line(A, E), B we get Line(A, E) != Line(B, E)
By line_inequality on Line(C, E), Line(E, G), C we get Line(C, E) != Line(E, G)
By divide_by_2_mod_180_v2 on E, A, H, D, C, F we get angle(E, A, H) == angle(D, C, F) + 180 mod 360
By collinear_definition on C, F, G we get F in Line(C, G), G in Line(C, F), Line(C, F) == Line(C, G), 0 == 2 * angle(F, C, G) mod 360
By aa_anti_similarity on E, A, G, E, B, G we get anti_similar_triangles(A, E, G, B, E, G)
By divide_by_2_mod_180_v2 on E, A, H, D, C, A we get angle(E, A, H) == angle(D, C, A) + 180 mod 360
By divide_by_2_mod_180_v2 on F, C, D, E, D, H we get angle(F, C, D) == angle(E, D, H) + 180 mod 360
By line_inequality on Line(A, H), Line(A, D), H we get Line(A, D) != Line(A, H)
By line_inequality on Line(D, H), Line(A, D), H we get Line(A, D) != Line(D, H)
By aa_anti_similarity on E, F, D, E, F, A we get anti_similar_triangles(A, E, F, D, E, F)
By line_inequality on Line(B, D), Line(C, E), B we get Line(B, D) != Line(C, E)
By line_inequality on Line(D, E), Line(E, F), D we get Line(D, E) != Line(E, F)
By line_inequality on Line(A, H), Line(D, E), H we get Line(A, H) != Line(D, E)
By divide_by_2_mod_180_v3 on D, C, F, E, A, H we get angle(D, C, F) == angle(E, A, H) + 180 mod 360
By line_circle_intersection_has_at_most_two_points_0 on A, D, midpoint(A, D), d we get midpoint(A, D) not in d
By line_inequality on radical_axis(d, e), Line(B, C), E we get Line(B, C) != radical_axis(d, e)
By line_inequality on Line(B, D), Line(B, C), D we get Line(B, C) != Line(B, D)
By divide_by_2_mod_180_v3 on D, C, F, H, E, A we get angle(D, C, F) == angle(H, E, A) + 180 mod 360
By line_inequality on Line(A, E), Line(A, H), E we get Line(A, E) != Line(A, H)
By line_inequality on Line(E, F), Line(B, E), F we get Line(B, E) != Line(E, F)
By line_inequality on Line(E, H), Line(C, E), H we get Line(C, E) != Line(E, H)
By line_inequality on radical_axis(d, e), Line(A, H), E we get Line(A, H) != radical_axis(d, e)
By line_inequality on Line(B, C), Line(D, H), B we get Line(B, C) != Line(D, H)
By line_inequality on Line(D, H), Line(A, E), H we get Line(A, E) != Line(D, H)
By aa_anti_similarity on E, G, A, E, G, B we get anti_similar_triangles(A, E, G, B, E, G)
By collinear_definition on A, F, G we get F in Line(A, G), G in Line(A, F), Line(A, F) == Line(A, G), 0 == 2 * angle(F, A, G) mod 360
By line_inequality on Line(E, G), Line(D, E), G we get Line(D, E) != Line(E, G)
By line_inequality on Line(B, D), Line(B, E), D we get Line(B, D) != Line(B, E)
By line_inequality on Line(A, H), Line(D, H), A we get Line(A, H) != Line(D, H)
By line_inequality on radical_axis(d, e), Line(B, G), E we get Line(B, G) != radical_axis(d, e)
By line_inequality on Line(B, D), Line(A, D), B we get Line(A, D) != Line(B, D)
By line_inequality on Line(C, E), Line(B, E), C we get Line(B, E) != Line(C, E)
By line_inequality on Line(D, H), Line(B, D), H we get Line(B, D) != Line(D, H)
By line_inequality on Line(E, H), Line(A, H), E we get Line(A, H) != Line(E, H)
By line_inequality on Line(B, D), Line(E, G), D we get Line(B, D) != Line(E, G)
By line_inequality on Line(A, D), Line(D, E), A we get Line(A, D) != Line(D, E)
By line_inequality on radical_axis(d, e), Line(A, D), E we get Line(A, D) != radical_axis(d, e)
By line_inequality on Line(D, E), Line(A, E), D we get Line(A, E) != Line(D, E)
By line_inequality on Line(E, H), Line(B, D), E we get Line(B, D) != Line(E, H)
By line_inequality on radical_axis(d, e), Line(B, D), E we get Line(B, D) != radical_axis(d, e)
By line_inequality on Line(D, F), Line(B, C), D we get Line(B, C) != Line(D, F)
By line_inequality on Line(E, F), Line(C, E), F we get Line(C, E) != Line(E, F)
By line_inequality on Line(E, H), Line(B, C), H we get Line(B, C) != Line(E, H)
By line_inequality on Line(A, E), Line(E, G), A we get Line(A, E) != Line(E, G)
By line_inequality on Line(E, G), Line(B, E), G we get Line(B, E) != Line(E, G)
By line_inequality on Line(A, E), Line(B, C), A we get Line(A, E) != Line(B, C)
By line_inequality on Line(D, F), Line(E, G), F we get Line(D, F) != Line(E, G)
By line_inequality on Line(D, H), Line(D, E), H we get Line(D, E) != Line(D, H)
By line_inequality on Line(E, H), Line(A, D), E we get Line(A, D) != Line(E, H)
By line_inequality on Line(E, F), Line(B, G), E we get Line(B, G) != Line(E, F)
By line_inequality on Line(B, D), Line(D, E), B we get Line(B, D) != Line(D, E)
By line_inequality on Line(B, D), Line(A, H), D we get Line(A, H) != Line(B, D)
By line_inequality on Line(A, H), Line(C, E), H we get Line(A, H) != Line(C, E)
By line_inequality on Line(E, F), Line(E, G), F we get Line(E, F) != Line(E, G)
By line_inequality on radical_axis(d, e), f, E we get f != radical_axis(d, e)
By line_inequality on Line(A, D), Line(B, E), A we get Line(A, D) != Line(B, E)
By line_inequality on Line(E, G), Line(A, H), G we get Line(A, H) != Line(E, G)
By line_inequality on Line(B, E), g, B we get g != Line(B, E)
By line_inequality on Line(D, H), g, H we get g != Line(D, H)
By line_inequality on Line(D, E), Line(C, E), D we get Line(C, E) != Line(D, E)
By line_inequality on Line(B, C), Line(B, G), C we get Line(B, C) != Line(B, G)
By line_inequality on Line(B, E), Line(B, C), E we get Line(B, C) != Line(B, E)
By line_inequality on Line(E, F), Line(D, F), E we get Line(D, F) != Line(E, F)
By line_inequality on Line(D, F), Line(A, E), D we get Line(A, E) != Line(D, F)
By line_inequality on Line(E, H), Line(E, G), H we get Line(E, G) != Line(E, H)
By line_inequality on Line(D, F), Line(A, D), F we get Line(A, D) != Line(D, F)
By line_inequality on Line(A, D), Line(E, F), A we get Line(A, D) != Line(E, F)
By line_inequality on Line(A, D), Line(E, G), D we get Line(A, D) != Line(E, G)
By line_inequality on radical_axis(d, e), Line(D, F), E we get Line(D, F) != radical_axis(d, e)
By line_inequality on Line(D, E), Line(B, G), E we get Line(B, G) != Line(D, E)
By line_inequality on Line(C, E), Line(B, C), E we get Line(B, C) != Line(C, E)
By line_inequality on Line(A, H), Line(B, G), H we get Line(A, H) != Line(B, G)
By line_inequality on Line(A, E), Line(E, H), A we get Line(A, E) != Line(E, H)
By line_inequality on Line(E, F), Line(D, H), E we get Line(D, H) != Line(E, F)
By line_inequality on Line(B, C), g, B we get g != Line(B, C)
By line_inequality on Line(B, E), Line(B, G), E we get Line(B, E) != Line(B, G)
By line_inequality on Line(E, H), Line(D, E), H we get Line(D, E) != Line(E, H)
By line_inequality on Line(B, G), Line(D, H), G we get Line(B, G) != Line(D, H)
By line_inequality on Line(A, E), Line(E, F), A we get Line(A, E) != Line(E, F)
By line_containment_inequality on midpoint(A, D), G, Line(E, H) we get G != midpoint(A, D)
By line_containment_inequality on midpoint(A, D), B, Line(E, H) we get B != midpoint(A, D)
By line_inequality on Line(B, E), Line(D, E), B we get Line(B, E) != Line(D, E)
By line_inequality on Line(E, H), Line(B, E), H we get Line(B, E) != Line(E, H)
By line_inequality on radical_axis(d, e), Line(D, H), E we get Line(D, H) != radical_axis(d, e)
By line_inequality on radical_axis(d, e), g, E we get g != radical_axis(d, e)
By line_inequality on radical_axis(d, e), h, E we get h != radical_axis(d, e)
By line_inequality on Line(D, F), Line(D, E), F we get Line(D, E) != Line(D, F)
By line_containment_inequality on midpoint(A, D), C, Line(E, H) we get C != midpoint(A, D)
By line_inequality on Line(A, E), Line(A, D), E we get Line(A, D) != Line(A, E)
By tangent_chord_angle_v0 on E, H, A, D we get tangent(Line(D, E), Circle(A, E, H))
By tangent_chord_angle_v1 on E, D, H, A we get tangent(Line(A, E), Circle(D, E, H))
By isosceles_triangle_midpoint on H, A, D we get midpoint(A, D) in median(H, A, D)
By tangent_chord_angle_v0 on D, E, B, F we get tangent(Line(D, F), Circle(B, D, E))
By internal_angle_bisector_definition_v0_r on A, E, D, H we get Line(E, H) == internal_angle_bisector(A, H, D)
By external_angle_bisector_definition_v0_r on G, A, F, C we get Line(A, C) == external_angle_bisector(F, C, G)
By external_angle_bisector_definition_v0_r on C, E, D, F we get Line(E, F) == external_angle_bisector(C, F, D)
By collinear_definition on G, A, F we get A in Line(F, G), F in Line(A, G), Line(A, G) == Line(F, G), 0 == 2 * angle(A, G, F) mod 360
By internal_angle_bisector_definition_v0_r on F, E, B, D we get Line(D, E) == internal_angle_bisector(B, D, F)
By internal_angle_bisector_definition_v0_r on A, E, B, G we get Line(E, G) == internal_angle_bisector(A, G, B)
By collinear_definition on F, C, G we get C in Line(F, G), G in Line(C, F), Line(C, F) == Line(F, G), 0 == 2 * angle(C, F, G) mod 360
By internal_angle_bisector_definition_v0_r on C, G, C, A we get Line(A, G) == internal_angle_bisector(C, A, C)
By internal_angle_bisector_definition_v0_r on A, F, A, C we get Line(C, F) == internal_angle_bisector(A, C, A)
By perpendicular_bisector_properties on D, A we get perpendicular(Line(A, D), perpendicular_bisector(A, D)), midpoint(A, D) == line_intersection(Line(A, D), perpendicular_bisector(A, D))
By collinear_definition on A, D, midpoint(A, D) we get D in Line(A, midpoint(A, D)), midpoint(A, D) in Line(A, D), Line(A, D) == Line(A, midpoint(A, D)), 0 == 2 * angle(D, A, midpoint(A, D)) mod 360
By internal_angle_bisector_definition_v0_r on A, E, D, F we get Line(E, F) == internal_angle_bisector(A, F, D)
By internal_angle_bisector_definition_v0_r on C, A, C, F we get Line(A, F) == internal_angle_bisector(C, F, C)
By internal_angle_bisector_definition_v0_r on F, C, G, A we get Line(A, C) == internal_angle_bisector(F, A, G)
By internal_angle_bisector_definition_v0_r on B, E, C, G we get Line(E, G) == internal_angle_bisector(B, G, C)
By internal_angle_bisector_definition_v0_r on A, G, A, C we get Line(C, G) == internal_angle_bisector(A, C, A)
By collinear_definition on G, C, F we get C in Line(F, G), F in Line(C, G), Line(C, G) == Line(F, G), 0 == 2 * angle(C, G, F) mod 360
By internal_angle_bisector_definition_v0_r on A, C, A, G we get Line(C, G) == internal_angle_bisector(A, G, A)
By internal_angle_bisector_definition_v0_r on A, C, A, F we get Line(C, F) == internal_angle_bisector(A, F, A)
By collinear_definition on G, F, C we get F in Line(C, G), C in Line(F, G), Line(C, G) == Line(F, G), 0 == 2 * angle(F, G, C) mod 360
By isosceles_triangle_midpoint on E, D, A we get midpoint(A, D) in median(E, A, D)
By isosceles_triangle_altitude_v1 on midpoint(A, D), D, A we get identical(perpendicular_bisector(A, D), internal_angle_bisector(A, midpoint(A, D), D), perpendicular_line(midpoint(A, D), Line(A, D)))
By collinear_definition on F, A, G we get A in Line(F, G), G in Line(A, F), Line(A, F) == Line(F, G), 0 == 2 * angle(A, F, G) mod 360
By internal_angle_bisector_definition_v0_r on G, C, G, A we get Line(A, C) == internal_angle_bisector(G, A, G)
By collinear_definition on D, A, midpoint(A, D) we get A in Line(D, midpoint(A, D)), midpoint(A, D) in Line(A, D), Line(A, D) == Line(D, midpoint(A, D)), 0 == 2 * angle(A, D, midpoint(A, D)) mod 360
By collinear_definition on D, midpoint(A, D), A we get midpoint(A, D) in Line(A, D), A in Line(D, midpoint(A, D)), Line(A, D) == Line(D, midpoint(A, D)), 0 == 2 * angle(midpoint(A, D), D, A) mod 360
By internal_angle_bisector_definition_v0_r on F, A, F, C we get Line(A, C) == internal_angle_bisector(F, C, F)
By collinear_definition on F, G, C we get G in Line(C, F), C in Line(F, G), Line(C, F) == Line(F, G), 0 == 2 * angle(G, F, C) mod 360
By collinear_definition on A, midpoint(A, D), D we get midpoint(A, D) in Line(A, D), D in Line(A, midpoint(A, D)), Line(A, D) == Line(A, midpoint(A, D)), 0 == 2 * angle(midpoint(A, D), A, D) mod 360
By internal_angle_bisector_definition_v0_r on G, A, G, C we get Line(A, C) == internal_angle_bisector(G, C, G)
By internal_angle_bisector_definition_v0_r on C, F, C, A we get Line(A, F) == internal_angle_bisector(C, A, C)
By internal_angle_bisector_definition_v0_r on C, A, C, G we get Line(A, G) == internal_angle_bisector(C, G, C)
By perpendicular_lines_draw_intersection on Line(E, H), Line(A, D) we get exists(line_intersection(Line(A, D), Line(E, H)))
By internal_angle_bisector_definition_v0_r on F, C, F, A we get Line(A, C) == internal_angle_bisector(F, A, F)
By internal_angle_bisector_definition_v0_r on D, H, A, E we get Line(E, H) == internal_angle_bisector(A, E, D)
By collinear_definition on G, F, A we get F in Line(A, G), A in Line(F, G), Line(A, G) == Line(F, G), 0 == 2 * angle(F, G, A) mod 360
By collinear_definition on F, G, A we get G in Line(A, F), A in Line(F, G), Line(A, F) == Line(F, G), 0 == 2 * angle(G, F, A) mod 360
By isosceles_triangle_altitude_v3 on midpoint(A, D), A, D we get identical(perpendicular_bisector(A, D), internal_angle_bisector(A, midpoint(A, D), D), perpendicular_line(midpoint(A, D), Line(A, D)))
By isosceles_triangle_altitude_v1 on midpoint(A, D), A, D we get identical(perpendicular_bisector(A, D), internal_angle_bisector(A, midpoint(A, D), D), perpendicular_line(midpoint(A, D), Line(A, D)))
By isosceles_triangle_altitude_v3 on midpoint(A, D), D, A we get identical(perpendicular_bisector(A, D), internal_angle_bisector(A, midpoint(A, D), D), perpendicular_line(midpoint(A, D), Line(A, D)))
By altitude_definition on A, H, E, Line(A, D) we get Line(A, D) == altitude(A, E, H)
By log_of_2_times_distance on D, A, midpoint(A, D), A we get log(distance(A, D)) == 0.6931471805599453 + log(distance(A, midpoint(A, D)))
By anti_similar_triangle_basic_properties on C, A, E, A, C, E we get not_collinear(A, C, E), not_collinear(A, C, E), angle(C, A, E) == 0 - angle(A, C, E) mod 360, angle(A, E, C) == 0 - angle(C, E, A) mod 360, angle(E, C, A) == 0 - angle(E, A, C) mod 360, log(distance(A, C)) + log(distance(A, E)) == log(distance(A, C)) + log(distance(C, E)), log(distance(A, E)) + log(distance(A, E)) == log(distance(C, E)) + log(distance(C, E)), log(distance(A, E)) + log(distance(A, C)) == log(distance(C, E)) + log(distance(A, C))
By log_of_2_times_distance on C, B, midpoint(A, D), D we get log(distance(B, C)) == 0.6931471805599453 + log(distance(D, midpoint(A, D)))
By log_of_2_times_distance on B, C, midpoint(A, D), A we get log(distance(B, C)) == 0.6931471805599453 + log(distance(A, midpoint(A, D)))
By altitude_definition on E, A, D, Line(E, H) we get Line(E, H) == altitude(E, A, D)
By log_of_2_times_distance on A, D, midpoint(A, D), D we get log(distance(A, D)) == 0.6931471805599453 + log(distance(D, midpoint(A, D)))
By altitude_definition on D, E, H, Line(A, D) we get Line(A, D) == altitude(D, E, H)
By isosceles_triangle_altitude_v3 on H, A, D we get identical(perpendicular_bisector(A, D), internal_angle_bisector(A, H, D), perpendicular_line(H, Line(A, D)))
By collinear_definition on midpoint(A, D), D, A we get D in Line(A, midpoint(A, D)), A in Line(D, midpoint(A, D)), Line(A, midpoint(A, D)) == Line(D, midpoint(A, D)), 0 == 2 * angle(D, midpoint(A, D), A) mod 360
By isosceles_triangle_altitude_v3 on E, A, D we get identical(perpendicular_bisector(A, D), internal_angle_bisector(A, E, D), perpendicular_line(E, Line(A, D)))
By collinear_definition on midpoint(A, D), A, D we get A in Line(D, midpoint(A, D)), D in Line(A, midpoint(A, D)), Line(A, midpoint(A, D)) == Line(D, midpoint(A, D)), 0 == 2 * angle(A, midpoint(A, D), D) mod 360
By isosceles_triangle_properties on midpoint(A, D), A, D we get distance(A, midpoint(A, D)) == distance(D, midpoint(A, D)), angle(A, D, midpoint(A, D)) == angle(midpoint(A, D), A, D) mod 360
By isosceles_triangle_properties on midpoint(A, D), D, A we get distance(A, midpoint(A, D)) == distance(D, midpoint(A, D)), angle(D, A, midpoint(A, D)) == angle(midpoint(A, D), D, A) mod 360
By altitude_definition on H, D, A, Line(E, H) we get Line(E, H) == altitude(H, A, D)
By isosceles_triangle_altitude_v3 on E, D, A we get identical(perpendicular_bisector(A, D), internal_angle_bisector(A, E, D), perpendicular_line(E, Line(A, D)))
By isosceles_triangle_altitude_v3 on H, D, A we get identical(perpendicular_bisector(A, D), internal_angle_bisector(A, H, D), perpendicular_line(H, Line(A, D)))
By anti_similar_triangle_basic_properties on E, A, D, E, D, A we get not_collinear(A, D, E), not_collinear(A, D, E), angle(E, A, D) == 0 - angle(E, D, A) mod 360, angle(A, D, E) == 0 - angle(D, A, E) mod 360, angle(D, E, A) == 0 - angle(A, E, D) mod 360, log(distance(A, E)) + log(distance(A, D)) == log(distance(D, E)) + log(distance(A, D)), log(distance(A, D)) + log(distance(A, E)) == log(distance(A, D)) + log(distance(D, E)), log(distance(A, E)) + log(distance(A, E)) == log(distance(D, E)) + log(distance(D, E))
By anti_similar_triangle_basic_properties on D, E, C, C, E, D we get not_collinear(C, D, E), not_collinear(C, D, E), angle(D, E, C) == 0 - angle(C, E, D) mod 360, angle(E, C, D) == 0 - angle(E, D, C) mod 360, angle(C, D, E) == 0 - angle(D, C, E) mod 360, log(distance(C, E)) + log(distance(C, E)) == log(distance(D, E)) + log(distance(D, E)), log(distance(C, E)) + log(distance(C, D)) == log(distance(D, E)) + log(distance(C, D)), log(distance(C, D)) + log(distance(C, E)) == log(distance(C, D)) + log(distance(D, E))
By anti_similar_triangle_basic_properties on B, D, E, D, B, E we get not_collinear(B, D, E), not_collinear(B, D, E), angle(B, D, E) == 0 - angle(D, B, E) mod 360, angle(D, E, B) == 0 - angle(B, E, D) mod 360, angle(E, B, D) == 0 - angle(E, D, B) mod 360, log(distance(B, D)) + log(distance(B, E)) == log(distance(B, D)) + log(distance(D, E)), log(distance(B, E)) + log(distance(B, E)) == log(distance(D, E)) + log(distance(D, E)), log(distance(B, E)) + log(distance(B, D)) == log(distance(D, E)) + log(distance(B, D))
By anti_similar_triangle_basic_properties on E, B, C, E, C, B we get not_collinear(B, C, E), not_collinear(B, C, E), angle(E, B, C) == 0 - angle(E, C, B) mod 360, angle(B, C, E) == 0 - angle(C, B, E) mod 360, angle(C, E, B) == 0 - angle(B, E, C) mod 360, log(distance(B, E)) + log(distance(B, C)) == log(distance(C, E)) + log(distance(B, C)), log(distance(B, C)) + log(distance(B, E)) == log(distance(B, C)) + log(distance(C, E)), log(distance(B, E)) + log(distance(B, E)) == log(distance(C, E)) + log(distance(C, E))
By anti_similar_triangle_basic_properties on A, H, D, D, H, A we get not_collinear(A, D, H), not_collinear(A, D, H), angle(A, H, D) == 0 - angle(D, H, A) mod 360, angle(H, D, A) == 0 - angle(H, A, D) mod 360, angle(D, A, H) == 0 - angle(A, D, H) mod 360, log(distance(A, H)) + log(distance(A, H)) == log(distance(D, H)) + log(distance(D, H)), log(distance(A, H)) + log(distance(A, D)) == log(distance(D, H)) + log(distance(A, D)), log(distance(A, D)) + log(distance(A, H)) == log(distance(A, D)) + log(distance(D, H))
By anti_similar_triangle_basic_properties on A, E, B, B, E, A we get not_collinear(A, B, E), not_collinear(A, B, E), angle(A, E, B) == 0 - angle(B, E, A) mod 360, angle(E, B, A) == 0 - angle(E, A, B) mod 360, angle(B, A, E) == 0 - angle(A, B, E) mod 360, log(distance(A, E)) + log(distance(A, E)) == log(distance(B, E)) + log(distance(B, E)), log(distance(A, E)) + log(distance(A, B)) == log(distance(B, E)) + log(distance(A, B)), log(distance(A, B)) + log(distance(A, E)) == log(distance(A, B)) + log(distance(B, E))
By anti_similar_triangle_basic_properties on H, D, E, H, E, D we get not_collinear(D, E, H), not_collinear(D, E, H), angle(H, D, E) == 0 - angle(H, E, D) mod 360, angle(D, E, H) == 0 - angle(E, D, H) mod 360, angle(E, H, D) == 0 - angle(D, H, E) mod 360, log(distance(D, H)) + log(distance(D, E)) == log(distance(E, H)) + log(distance(D, E)), log(distance(D, E)) + log(distance(D, H)) == log(distance(D, E)) + log(distance(E, H)), log(distance(D, H)) + log(distance(D, H)) == log(distance(E, H)) + log(distance(E, H))
By anti_similar_triangle_basic_properties on A, E, H, E, A, H we get not_collinear(A, E, H), not_collinear(A, E, H), angle(A, E, H) == 0 - angle(E, A, H) mod 360, angle(E, H, A) == 0 - angle(A, H, E) mod 360, angle(H, A, E) == 0 - angle(H, E, A) mod 360, log(distance(A, E)) + log(distance(A, H)) == log(distance(A, E)) + log(distance(E, H)), log(distance(A, H)) + log(distance(A, H)) == log(distance(E, H)) + log(distance(E, H)), log(distance(A, H)) + log(distance(A, E)) == log(distance(E, H)) + log(distance(A, E))
By power_of_a_point_definition on G, F, C, k we get log(power_of_a_point(G, k)) == log(distance(F, G)) + log(distance(C, G))
By power_of_a_point_definition on F, C, G, e we get log(power_of_a_point(F, e)) == log(distance(C, F)) + log(distance(F, G))
By anti_similar_triangle_basic_properties on A, D, B, B, C, A we get not_collinear(A, B, D), not_collinear(A, B, C), angle(A, D, B) == 0 - angle(B, C, A) mod 360, angle(D, B, A) == 0 - angle(C, A, B) mod 360, angle(B, A, D) == 0 - angle(A, B, C) mod 360, log(distance(A, D)) + log(distance(A, C)) == log(distance(B, C)) + log(distance(B, D)), log(distance(A, C)) + log(distance(A, B)) == log(distance(B, D)) + log(distance(A, B)), log(distance(A, B)) + log(distance(A, D)) == log(distance(A, B)) + log(distance(B, C))
By between_implies_angles on A, midpoint(A, D), D we get 180 == angle(A, midpoint(A, D), D) mod 360, 0 == angle(midpoint(A, D), D, A) mod 360, 0 == angle(D, A, midpoint(A, D)) mod 360
By anti_similar_triangle_basic_properties on D, B, C, C, A, D we get not_collinear(B, C, D), not_collinear(A, C, D), angle(D, B, C) == 0 - angle(C, A, D) mod 360, angle(B, C, D) == 0 - angle(A, D, C) mod 360, angle(C, D, B) == 0 - angle(D, C, A) mod 360, log(distance(A, C)) + log(distance(B, C)) == log(distance(B, D)) + log(distance(A, D)), log(distance(A, D)) + log(distance(C, D)) == log(distance(B, C)) + log(distance(C, D)), log(distance(C, D)) + log(distance(A, C)) == log(distance(C, D)) + log(distance(B, D))
By anti_similar_triangle_basic_properties on A, C, D, B, D, C we get not_collinear(A, C, D), not_collinear(B, C, D), angle(A, C, D) == 0 - angle(B, D, C) mod 360, angle(C, D, A) == 0 - angle(D, C, B) mod 360, angle(D, A, C) == 0 - angle(C, B, D) mod 360, log(distance(A, C)) + log(distance(C, D)) == log(distance(B, D)) + log(distance(C, D)), log(distance(C, D)) + log(distance(A, D)) == log(distance(C, D)) + log(distance(B, C)), log(distance(A, D)) + log(distance(B, D)) == log(distance(B, C)) + log(distance(A, C))
By between_implies_angles on D, midpoint(A, D), A we get 180 == angle(D, midpoint(A, D), A) mod 360, 0 == angle(midpoint(A, D), A, D) mod 360, 0 == angle(A, D, midpoint(A, D)) mod 360
By similar_triangle_basic_properties on E, H, D, A, H, E we get not_collinear(D, E, H), not_collinear(A, E, H), angle(A, H, E) == angle(E, H, D) mod 360, angle(H, D, E) == angle(H, E, A) mod 360, angle(D, E, H) == angle(E, A, H) mod 360, log(distance(A, H)) + log(distance(D, H)) == log(distance(E, H)) + log(distance(E, H)), log(distance(D, H)) + log(distance(A, E)) == log(distance(E, H)) + log(distance(D, E)), log(distance(A, E)) + log(distance(E, H)) == log(distance(D, E)) + log(distance(A, H))
By anti_similar_triangle_basic_properties on H, D, E, H, A, E we get not_collinear(D, E, H), not_collinear(A, E, H), angle(H, D, E) == 0 - angle(H, A, E) mod 360, angle(D, E, H) == 0 - angle(A, E, H) mod 360, angle(E, H, D) == 0 - angle(E, H, A) mod 360, log(distance(A, H)) + log(distance(D, E)) == log(distance(D, H)) + log(distance(A, E)), log(distance(A, E)) + log(distance(E, H)) == log(distance(D, E)) + log(distance(E, H)), log(distance(E, H)) + log(distance(A, H)) == log(distance(E, H)) + log(distance(D, H))
By anti_similar_triangle_basic_properties on C, E, A, D, E, B we get not_collinear(A, C, E), not_collinear(B, D, E), angle(C, E, A) == 0 - angle(D, E, B) mod 360, angle(E, A, C) == 0 - angle(E, B, D) mod 360, angle(A, C, E) == 0 - angle(B, D, E) mod 360, log(distance(C, E)) + log(distance(B, E)) == log(distance(D, E)) + log(distance(A, E)), log(distance(A, E)) + log(distance(B, D)) == log(distance(B, E)) + log(distance(A, C)), log(distance(A, C)) + log(distance(D, E)) == log(distance(B, D)) + log(distance(C, E))
By similar_triangle_basic_properties on B, E, D, C, E, A we get not_collinear(B, D, E), not_collinear(A, C, E), angle(B, E, D) == angle(C, E, A) mod 360, angle(E, A, C) == angle(E, D, B) mod 360, angle(A, C, E) == angle(D, B, E) mod 360, log(distance(B, E)) + log(distance(A, E)) == log(distance(C, E)) + log(distance(D, E)), log(distance(A, E)) + log(distance(B, D)) == log(distance(D, E)) + log(distance(A, C)), log(distance(A, C)) + log(distance(B, E)) == log(distance(B, D)) + log(distance(C, E))
By anti_similar_triangle_basic_properties on D, B, E, C, A, E we get not_collinear(B, D, E), not_collinear(A, C, E), angle(D, B, E) == 0 - angle(C, A, E) mod 360, angle(B, E, D) == 0 - angle(A, E, C) mod 360, angle(E, D, B) == 0 - angle(E, C, A) mod 360, log(distance(A, C)) + log(distance(B, E)) == log(distance(B, D)) + log(distance(A, E)), log(distance(A, E)) + log(distance(D, E)) == log(distance(B, E)) + log(distance(C, E)), log(distance(C, E)) + log(distance(B, D)) == log(distance(D, E)) + log(distance(A, C))
By similar_triangle_basic_properties on B, D, E, C, A, E we get not_collinear(B, D, E), not_collinear(A, C, E), angle(B, D, E) == angle(C, A, E) mod 360, angle(A, E, C) == angle(D, E, B) mod 360, angle(E, B, D) == angle(E, C, A) mod 360, log(distance(A, C)) + log(distance(D, E)) == log(distance(B, D)) + log(distance(A, E)), log(distance(A, E)) + log(distance(B, E)) == log(distance(D, E)) + log(distance(C, E)), log(distance(B, E)) + log(distance(A, C)) == log(distance(C, E)) + log(distance(B, D))
By similar_triangle_basic_properties on E, H, A, D, H, E we get not_collinear(A, E, H), not_collinear(D, E, H), angle(D, H, E) == angle(E, H, A) mod 360, angle(H, A, E) == angle(H, E, D) mod 360, angle(A, E, H) == angle(E, D, H) mod 360, log(distance(D, H)) + log(distance(A, H)) == log(distance(E, H)) + log(distance(E, H)), log(distance(A, H)) + log(distance(D, E)) == log(distance(E, H)) + log(distance(A, E)), log(distance(A, E)) + log(distance(D, H)) == log(distance(D, E)) + log(distance(E, H))
By anti_similar_triangle_basic_properties on E, D, H, E, A, H we get not_collinear(D, E, H), not_collinear(A, E, H), angle(E, D, H) == 0 - angle(E, A, H) mod 360, angle(D, H, E) == 0 - angle(A, H, E) mod 360, angle(H, E, D) == 0 - angle(H, E, A) mod 360, log(distance(A, E)) + log(distance(D, H)) == log(distance(D, E)) + log(distance(A, H)), log(distance(A, H)) + log(distance(E, H)) == log(distance(D, H)) + log(distance(E, H)), log(distance(E, H)) + log(distance(A, E)) == log(distance(E, H)) + log(distance(D, E))
By anti_similar_triangle_basic_properties on E, B, C, E, A, D we get not_collinear(B, C, E), not_collinear(A, D, E), angle(E, B, C) == 0 - angle(E, A, D) mod 360, angle(B, C, E) == 0 - angle(A, D, E) mod 360, angle(C, E, B) == 0 - angle(D, E, A) mod 360, log(distance(A, E)) + log(distance(B, C)) == log(distance(B, E)) + log(distance(A, D)), log(distance(A, D)) + log(distance(C, E)) == log(distance(B, C)) + log(distance(D, E)), log(distance(C, E)) + log(distance(A, E)) == log(distance(D, E)) + log(distance(B, E))
By similar_triangle_basic_properties on D, E, A, B, E, C we get not_collinear(A, D, E), not_collinear(B, C, E), angle(B, E, C) == angle(D, E, A) mod 360, angle(E, A, D) == angle(E, C, B) mod 360, angle(A, D, E) == angle(C, B, E) mod 360, log(distance(B, E)) + log(distance(A, E)) == log(distance(D, E)) + log(distance(C, E)), log(distance(A, E)) + log(distance(B, C)) == log(distance(C, E)) + log(distance(A, D)), log(distance(A, D)) + log(distance(B, E)) == log(distance(B, C)) + log(distance(D, E))
By anti_similar_triangle_basic_properties on E, C, B, E, D, A we get not_collinear(B, C, E), not_collinear(A, D, E), angle(E, C, B) == 0 - angle(E, D, A) mod 360, angle(C, B, E) == 0 - angle(D, A, E) mod 360, angle(B, E, C) == 0 - angle(A, E, D) mod 360, log(distance(C, E)) + log(distance(A, D)) == log(distance(D, E)) + log(distance(B, C)), log(distance(A, D)) + log(distance(B, E)) == log(distance(B, C)) + log(distance(A, E)), log(distance(A, E)) + log(distance(C, E)) == log(distance(B, E)) + log(distance(D, E))
By similar_triangle_basic_properties on C, E, B, A, E, D we get not_collinear(B, C, E), not_collinear(A, D, E), angle(A, E, D) == angle(C, E, B) mod 360, angle(E, B, C) == angle(E, D, A) mod 360, angle(B, C, E) == angle(D, A, E) mod 360, log(distance(A, E)) + log(distance(B, E)) == log(distance(C, E)) + log(distance(D, E)), log(distance(B, E)) + log(distance(A, D)) == log(distance(D, E)) + log(distance(B, C)), log(distance(A, D)) + log(distance(C, E)) == log(distance(B, C)) + log(distance(A, E))
By radical_axis_is_perpendicular_to_center_line on g, c, k we get perpendicular(g, Line(center(c), center(k)))
By radical_axis_is_perpendicular_to_center_line on Line(B, C), c, e we get perpendicular(Line(B, C), Line(center(c), center(e)))
By perpendicular_line_definition on E, Line(E, F), Line(A, D) we get Line(E, F) == perpendicular_line(E, Line(A, D))
By concurrent_sufficient_conditions on Line(A, D), Line(D, F), g we get concurrent(g, Line(A, D), Line(D, F))
By concurrent_sufficient_conditions on Line(B, C), Line(C, E), h we get concurrent(h, Line(B, C), Line(C, E))
By line_intersection_definition on E, Line(B, E), Line(E, G) we get E == line_intersection(Line(B, E), Line(E, G))
By perpendicular_line_definition on C, g, Line(E, G) we get g == perpendicular_line(C, Line(E, G))
By concurrent_sufficient_conditions on Line(A, H), Line(A, D), f we get concurrent(f, Line(A, D), Line(A, H))
By concurrent_sufficient_conditions on Line(B, E), Line(B, G), f we get concurrent(f, Line(B, E), Line(B, G))
By line_intersection_definition on C, Line(B, C), g we get C == line_intersection(g, Line(B, C))
By concurrent_sufficient_conditions on Line(A, D), Line(A, E), h we get concurrent(h, Line(A, D), Line(A, E))
By perpendicular_line_definition on A, Line(A, D), Line(E, F) we get Line(A, D) == perpendicular_line(A, Line(E, F))
By line_intersection_definition on E, Line(E, F), Line(D, E) we get E == line_intersection(Line(D, E), Line(E, F))
By line_intersection_definition on E, Line(C, E), Line(A, E) we get E == line_intersection(Line(A, E), Line(C, E))
By line_intersection_definition on E, Line(E, H), Line(B, E) we get E == line_intersection(Line(B, E), Line(E, H))
By concurrent_sufficient_conditions on Line(C, E), Line(B, C), h we get concurrent(h, Line(B, C), Line(C, E))
By line_intersection_definition on E, Line(C, E), Line(E, H) we get E == line_intersection(Line(C, E), Line(E, H))
By concurrent_sufficient_conditions on Line(B, C), Line(B, G), f we get concurrent(f, Line(B, C), Line(B, G))
By line_intersection_definition on E, Line(D, E), Line(A, E) we get E == line_intersection(Line(A, E), Line(D, E))
By line_intersection_definition on D, Line(D, E), g we get D == line_intersection(g, Line(D, E))
By line_intersection_definition on D, Line(D, F), Line(B, D) we get D == line_intersection(Line(B, D), Line(D, F))
By perpendicular_line_definition on D, g, Line(E, G) we get g == perpendicular_line(D, Line(E, G))
By line_intersection_definition on B, Line(B, D), Line(B, E) we get B == line_intersection(Line(B, D), Line(B, E))
By concurrent_sufficient_conditions on g, Line(C, E), h we get concurrent(g, h, Line(C, E))
By concurrent_sufficient_conditions on Line(A, E), Line(A, D), f we get concurrent(f, Line(A, D), Line(A, E))
By line_intersection_definition on E, Line(E, G), Line(D, E) we get E == line_intersection(Line(D, E), Line(E, G))
By line_intersection_definition on E, Line(E, H), Line(A, E) we get E == line_intersection(Line(A, E), Line(E, H))
By line_intersection_definition on E, Line(D, E), Line(B, E) we get E == line_intersection(Line(B, E), Line(D, E))
By line_intersection_definition on A, Line(A, D), Line(A, H) we get A == line_intersection(Line(A, D), Line(A, H))
By concurrent_sufficient_conditions on Line(B, C), Line(B, E), f we get concurrent(f, Line(B, C), Line(B, E))
By line_intersection_definition on D, Line(A, D), Line(B, D) we get D == line_intersection(Line(A, D), Line(B, D))
By line_intersection_definition on E, Line(A, E), Line(E, F) we get E == line_intersection(Line(A, E), Line(E, F))
By line_intersection_definition on D, Line(A, D), Line(D, F) we get D == line_intersection(Line(A, D), Line(D, F))
By perpendicular_line_definition on E, Line(E, G), g we get Line(E, G) == perpendicular_line(E, g)
By concurrent_sufficient_conditions on Line(B, E), Line(B, C), f we get concurrent(f, Line(B, C), Line(B, E))
By concurrent_sufficient_conditions on Line(B, D), Line(B, C), f we get concurrent(f, Line(B, C), Line(B, D))
By line_intersection_definition on E, Line(E, G), Line(E, H) we get E == line_intersection(Line(E, G), Line(E, H))
By concurrent_sufficient_conditions on Line(B, C), g, h we get concurrent(g, h, Line(B, C))
By line_intersection_definition on H, Line(D, H), Line(E, H) we get H == line_intersection(Line(D, H), Line(E, H))
By perpendicular_line_definition on G, Line(E, G), g we get Line(E, G) == perpendicular_line(G, g)
By line_intersection_definition on D, Line(D, F), Line(D, H) we get D == line_intersection(Line(D, F), Line(D, H))
By concurrent_sufficient_conditions on Line(A, D), Line(A, H), f we get concurrent(f, Line(A, D), Line(A, H))
By line_intersection_definition on A, Line(A, E), Line(A, D) we get A == line_intersection(Line(A, D), Line(A, E))
By line_intersection_definition on E, Line(B, E), Line(E, F) we get E == line_intersection(Line(B, E), Line(E, F))
By concurrent_sufficient_conditions on Line(B, C), Line(B, D), f we get concurrent(f, Line(B, C), Line(B, D))
By line_intersection_definition on H, Line(E, H), Line(A, H) we get H == line_intersection(Line(A, H), Line(E, H))
By line_intersection_definition on F, Line(E, F), Line(D, F) we get F == line_intersection(Line(D, F), Line(E, F))
By line_intersection_definition on D, g, Line(D, H) we get D == line_intersection(g, Line(D, H))
By concurrent_sufficient_conditions on Line(B, D), Line(B, E), f we get concurrent(f, Line(B, D), Line(B, E))
By perpendicular_line_definition on midpoint(A, D), Line(A, D), Line(E, F) we get Line(A, D) == perpendicular_line(midpoint(A, D), Line(E, F))
By line_intersection_definition on C, Line(C, E), g we get C == line_intersection(g, Line(C, E))
By concurrent_sufficient_conditions on Line(A, E), Line(A, H), f we get concurrent(f, Line(A, E), Line(A, H))
By concurrent_sufficient_conditions on Line(B, G), Line(E, G), h we get concurrent(h, Line(B, G), Line(E, G))
By concurrent_sufficient_conditions on Line(A, E), Line(A, H), h we get concurrent(h, Line(A, E), Line(A, H))
By line_intersection_definition on E, Line(E, G), Line(C, E) we get E == line_intersection(Line(C, E), Line(E, G))
By line_intersection_definition on E, Line(D, E), Line(C, E) we get E == line_intersection(Line(C, E), Line(D, E))
By line_intersection_definition on C, Line(B, C), Line(C, E) we get C == line_intersection(Line(B, C), Line(C, E))
By line_intersection_definition on H, Line(A, H), Line(D, H) we get H == line_intersection(Line(A, H), Line(D, H))
By perpendicular_line_definition on D, Line(A, D), Line(E, F) we get Line(A, D) == perpendicular_line(D, Line(E, F))
By line_intersection_definition on D, Line(D, H), Line(B, D) we get D == line_intersection(Line(B, D), Line(D, H))
By line_intersection_definition on B, Line(B, D), Line(B, C) we get B == line_intersection(Line(B, C), Line(B, D))
By line_intersection_definition on D, Line(D, E), Line(B, D) we get D == line_intersection(Line(B, D), Line(D, E))
By concurrent_sufficient_conditions on Line(D, F), Line(E, F), h we get concurrent(h, Line(D, F), Line(E, F))
By line_intersection_definition on D, Line(D, E), Line(D, H) we get D == line_intersection(Line(D, E), Line(D, H))
By line_intersection_definition on D, Line(B, D), g we get D == line_intersection(g, Line(B, D))
By perpendicular_line_definition on midpoint(A, D), Line(A, D), Line(E, H) we get Line(A, D) == perpendicular_line(midpoint(A, D), Line(E, H))
By line_intersection_definition on D, Line(D, F), Line(D, E) we get D == line_intersection(Line(D, E), Line(D, F))
By line_intersection_definition on E, Line(D, E), Line(E, H) we get E == line_intersection(Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on Line(A, H), Line(A, E), h we get concurrent(h, Line(A, E), Line(A, H))
By perpendicular_line_definition on B, f, Line(E, G) we get f == perpendicular_line(B, Line(E, G))
By line_intersection_definition on E, Line(B, E), Line(C, E) we get E == line_intersection(Line(B, E), Line(C, E))
By line_intersection_definition on B, Line(B, E), Line(B, C) we get B == line_intersection(Line(B, C), Line(B, E))
By concurrent_sufficient_conditions on Line(A, D), Line(A, E), f we get concurrent(f, Line(A, D), Line(A, E))
By concurrent_sufficient_conditions on Line(B, G), Line(B, C), f we get concurrent(f, Line(B, C), Line(B, G))
By line_intersection_definition on B, Line(B, E), Line(B, G) we get B == line_intersection(Line(B, E), Line(B, G))
By line_intersection_definition on A, Line(A, H), Line(A, E) we get A == line_intersection(Line(A, E), Line(A, H))
By line_intersection_definition on E, Line(E, G), Line(E, F) we get E == line_intersection(Line(E, F), Line(E, G))
By line_intersection_definition on B, Line(B, C), Line(B, G) we get B == line_intersection(Line(B, C), Line(B, G))
By line_intersection_definition on E, Line(B, E), Line(A, E) we get E == line_intersection(Line(A, E), Line(B, E))
By concurrent_sufficient_conditions on Line(E, G), Line(B, G), h we get concurrent(h, Line(B, G), Line(E, G))
By perpendicular_line_definition on G, Line(E, G), f we get Line(E, G) == perpendicular_line(G, f)
By line_intersection_definition on D, Line(A, D), Line(D, E) we get D == line_intersection(Line(A, D), Line(D, E))
By concurrent_sufficient_conditions on Line(C, E), g, h we get concurrent(g, h, Line(C, E))
By line_intersection_definition on D, Line(D, H), Line(A, D) we get D == line_intersection(Line(A, D), Line(D, H))
By line_intersection_definition on E, Line(C, E), Line(E, F) we get E == line_intersection(Line(C, E), Line(E, F))
By concurrent_sufficient_conditions on Line(A, H), Line(A, E), f we get concurrent(f, Line(A, E), Line(A, H))
By line_intersection_definition on E, Line(A, E), Line(E, G) we get E == line_intersection(Line(A, E), Line(E, G))
By line_intersection_definition on G, Line(E, G), Line(B, G) we get G == line_intersection(Line(B, G), Line(E, G))
By concurrent_sufficient_conditions on Line(B, G), Line(B, E), f we get concurrent(f, Line(B, E), Line(B, G))
By concurrent_sufficient_conditions on g, Line(B, C), h we get concurrent(g, h, Line(B, C))
By concurrent_sufficient_conditions on Line(B, E), Line(B, D), f we get concurrent(f, Line(B, D), Line(B, E))
By concurrent_sufficient_conditions on Line(A, D), Line(A, H), h we get concurrent(h, Line(A, D), Line(A, H))
By concurrent_sufficient_conditions on Line(A, H), Line(A, D), h we get concurrent(h, Line(A, D), Line(A, H))
By concurrent_sufficient_conditions on Line(E, F), Line(D, F), h we get concurrent(h, Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on Line(D, F), Line(A, D), g we get concurrent(g, Line(A, D), Line(D, F))
By perpendicular_line_definition on A, f, Line(E, G) we get f == perpendicular_line(A, Line(E, G))
By concurrent_sufficient_conditions on Line(A, E), Line(A, D), h we get concurrent(h, Line(A, D), Line(A, E))
By perpendicular_line_definition on E, Line(E, G), f we get Line(E, G) == perpendicular_line(E, f)
By perpendicular_line_definition on F, Line(E, F), Line(A, D) we get Line(E, F) == perpendicular_line(F, Line(A, D))
By line_unique_intersection_v1 on Line(D, H), Line(E, H), H, midpoint(A, D) we get midpoint(A, D) not in Line(D, H)
By line_unique_intersection_v1 on Line(D, E), Line(A, D), D, midpoint(A, D) we get midpoint(A, D) not in Line(D, E)
By line_unique_intersection_v1 on Line(B, D), Line(A, D), D, midpoint(A, D) we get midpoint(A, D) not in Line(B, D)
By line_unique_intersection_v1 on Line(A, H), Line(A, D), A, midpoint(A, D) we get midpoint(A, D) not in Line(A, H)
By line_unique_intersection_v1 on Line(E, G), Line(E, H), E, midpoint(A, D) we get midpoint(A, D) not in Line(E, G)
By line_unique_intersection_v1 on g, Line(A, D), D, midpoint(A, D) we get midpoint(A, D) not in g
By line_unique_intersection_v1 on h, Line(A, D), A, midpoint(A, D) we get midpoint(A, D) not in h
By line_unique_intersection_v1 on Line(D, F), Line(A, D), D, midpoint(A, D) we get midpoint(A, D) not in Line(D, F)
By line_unique_intersection_v1 on f, Line(A, D), A, midpoint(A, D) we get midpoint(A, D) not in f
By line_unique_intersection_v1 on Line(A, E), Line(E, H), E, midpoint(A, D) we get midpoint(A, D) not in Line(A, E)
By line_unique_intersection_v1 on Line(B, E), Line(E, H), E, midpoint(A, D) we get midpoint(A, D) not in Line(B, E)
By line_unique_intersection_v1 on Line(C, E), Line(E, H), E, midpoint(A, D) we get midpoint(A, D) not in Line(C, E)
By collinear_and_not_between_implies_orientation on B, midpoint(A, D), D, A we get orientation(A, B, D) == orientation(B, D, midpoint(A, D)) mod 360
By same_angle_converse_v0 on E, H, F, D we get collinear(E, F, H)
By collinear_and_not_between_implies_orientation on B, D, A, midpoint(A, D) we get orientation(A, D, B) == orientation(A, midpoint(A, D), B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, D), D, E, F we get 180 == 2 * direction(midpoint(A, D), D) - 2 * direction(E, F) mod 360
By collinear_and_not_between_implies_orientation on C, midpoint(A, D), D, A we get orientation(A, C, D) == orientation(C, D, midpoint(A, D)) mod 360
By same_angle_v0 on B, D, G, A we get angle(D, B, A) == angle(G, B, A) mod 360
By perpendicular_direction_conditions_v0_r on E, F, midpoint(A, D), A we get 180 == 2 * direction(E, F) - 2 * direction(midpoint(A, D), A) mod 360
By collinear_and_not_between_implies_orientation on C, midpoint(A, D), A, D we get orientation(A, D, C) == orientation(A, midpoint(A, D), C) mod 360
By collinear_and_not_between_implies_orientation on midpoint(A, D), A, G, C we get orientation(A, midpoint(A, D), G) == orientation(C, midpoint(A, D), G) mod 360
By perpendicular_direction_conditions_v0_r on E, H, midpoint(A, D), D we get 180 == 2 * direction(E, H) - 2 * direction(midpoint(A, D), D) mod 360
By perpendicular_direction_conditions_v0_r on H, E, midpoint(A, D), A we get 180 == 2 * direction(H, E) - 2 * direction(midpoint(A, D), A) mod 360
By collinear_and_not_between_implies_orientation on E, midpoint(A, D), A, D we get orientation(A, D, E) == orientation(A, midpoint(A, D), E) mod 360
By between_implies_orientation on C, D, midpoint(A, D), A we get orientation(A, C, midpoint(A, D)) == orientation(C, D, midpoint(A, D)) mod 360, orientation(A, C, D) == orientation(C, D, midpoint(A, D)) mod 360
By between_implies_orientation on E, A, midpoint(A, D), D we get orientation(A, midpoint(A, D), E) == orientation(D, E, midpoint(A, D)) mod 360, orientation(A, D, E) == orientation(A, midpoint(A, D), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, D), A, F, E we get 180 == 2 * direction(midpoint(A, D), A) - 2 * direction(F, E) mod 360
By collinear_and_not_between_implies_orientation on G, midpoint(A, D), A, D we get orientation(A, D, G) == orientation(A, midpoint(A, D), G) mod 360
By projection_definition on D, midpoint(A, D), Line(E, H) we get midpoint(A, D) == projection(D, Line(E, H))
By perpendicular_direction_conditions_v0_r on midpoint(A, D), D, H, E we get 180 == 2 * direction(midpoint(A, D), D) - 2 * direction(H, E) mod 360
By collinear_and_not_between_implies_orientation on midpoint(A, D), C, A, G we get orientation(A, C, midpoint(A, D)) == orientation(A, G, midpoint(A, D)) mod 360
By between_implies_orientation on midpoint(A, D), A, C, G we get orientation(A, C, midpoint(A, D)) == orientation(C, G, midpoint(A, D)) mod 360, orientation(A, C, midpoint(A, D)) == orientation(A, G, midpoint(A, D)) mod 360
By perpendicular_direction_conditions_v0_r on E, F, midpoint(A, D), D we get 180 == 2 * direction(E, F) - 2 * direction(midpoint(A, D), D) mod 360
By perpendicular_direction_conditions_v0_r on F, E, midpoint(A, D), A we get 180 == 2 * direction(F, E) - 2 * direction(midpoint(A, D), A) mod 360
By collinear_and_not_between_implies_orientation on G, midpoint(A, D), D, A we get orientation(A, G, D) == orientation(D, midpoint(A, D), G) mod 360
By perpendicular_direction_conditions_v0_r on H, E, midpoint(A, D), D we get 180 == 2 * direction(H, E) - 2 * direction(midpoint(A, D), D) mod 360
By between_implies_orientation on B, A, midpoint(A, D), D we get orientation(A, midpoint(A, D), B) == orientation(B, midpoint(A, D), D) mod 360, orientation(A, D, B) == orientation(A, midpoint(A, D), B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, D), D, E, H we get 180 == 2 * direction(midpoint(A, D), D) - 2 * direction(E, H) mod 360
By between_implies_orientation on E, D, midpoint(A, D), A we get orientation(A, E, midpoint(A, D)) == orientation(D, midpoint(A, D), E) mod 360, orientation(A, E, D) == orientation(D, midpoint(A, D), E) mod 360
By perpendicular_direction_conditions_v0_r on E, H, midpoint(A, D), A we get 180 == 2 * direction(E, H) - 2 * direction(midpoint(A, D), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, D), A, E, F we get 180 == 2 * direction(midpoint(A, D), A) - 2 * direction(E, F) mod 360
By between_implies_orientation on B, D, midpoint(A, D), A we get orientation(A, B, midpoint(A, D)) == orientation(B, D, midpoint(A, D)) mod 360, orientation(A, B, D) == orientation(B, D, midpoint(A, D)) mod 360
By collinear_and_not_between_implies_orientation on H, midpoint(A, D), A, D we get orientation(A, D, H) == orientation(A, midpoint(A, D), H) mod 360
By between_implies_orientation on midpoint(A, D), G, C, A we get orientation(A, midpoint(A, D), C) == orientation(C, midpoint(A, D), G) mod 360, orientation(A, midpoint(A, D), G) == orientation(C, midpoint(A, D), G) mod 360
By between_imply_not_between on G, C, F we get collinear_and_not_between(C, G, F)
By collinear_and_not_between_implies_orientation on H, midpoint(A, D), D, A we get orientation(A, H, D) == orientation(D, midpoint(A, D), H) mod 360
By between_implies_orientation on G, D, midpoint(A, D), A we get orientation(A, G, midpoint(A, D)) == orientation(D, midpoint(A, D), G) mod 360, orientation(A, G, D) == orientation(D, midpoint(A, D), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, D), A, H, E we get 180 == 2 * direction(midpoint(A, D), A) - 2 * direction(H, E) mod 360
By perpendicular_direction_conditions_v0_r on F, E, midpoint(A, D), D we get 180 == 2 * direction(F, E) - 2 * direction(midpoint(A, D), D) mod 360
By projection_definition on H, midpoint(A, D), Line(A, D) we get midpoint(A, D) == projection(H, Line(A, D))
By between_implies_orientation on H, A, midpoint(A, D), D we get orientation(A, midpoint(A, D), H) == orientation(D, H, midpoint(A, D)) mod 360, orientation(A, D, H) == orientation(A, midpoint(A, D), H) mod 360
By projection_definition on A, midpoint(A, D), Line(E, H) we get midpoint(A, D) == projection(A, Line(E, H))
By perpendicular_direction_conditions_v0_r on midpoint(A, D), D, F, E we get 180 == 2 * direction(midpoint(A, D), D) - 2 * direction(F, E) mod 360
By projection_definition on E, midpoint(A, D), Line(A, D) we get midpoint(A, D) == projection(E, Line(A, D))
By perpendicular_direction_conditions_v0_r on midpoint(A, D), A, E, H we get 180 == 2 * direction(midpoint(A, D), A) - 2 * direction(E, H) mod 360
By between_implies_orientation on C, A, midpoint(A, D), D we get orientation(A, midpoint(A, D), C) == orientation(C, midpoint(A, D), D) mod 360, orientation(A, D, C) == orientation(A, midpoint(A, D), C) mod 360
By between_implies_orientation on G, A, midpoint(A, D), D we get orientation(A, midpoint(A, D), G) == orientation(D, G, midpoint(A, D)) mod 360, orientation(A, D, G) == orientation(A, midpoint(A, D), G) mod 360
By between_implies_orientation on H, D, midpoint(A, D), A we get orientation(A, H, midpoint(A, D)) == orientation(D, midpoint(A, D), H) mod 360, orientation(A, H, D) == orientation(D, midpoint(A, D), H) mod 360
By between_imply_not_between on G, F, A we get collinear_and_not_between(A, G, F)
By between_imply_not_between on F, C, G we get collinear_and_not_between(C, F, G)
By between_imply_not_between on A, F, G we get collinear_and_not_between(F, A, G)
By different_points_v1 on G, center(e) we get 0 != distance(G, center(e))
By different_points_v1 on C, center(k) we get 0 != distance(C, center(k))
By different_points_v1 on D, center(k) we get 0 != distance(D, center(k))
By different_points_v1 on center(k), F we get 0 != distance(F, center(k))
By perpendicular_direction_conditions_v0_r on A, D, midpoint(A, D), E we get 180 == 2 * direction(A, D) - 2 * direction(midpoint(A, D), E) mod 360
By same_angle_v2 on D, G, B, E we get angle(G, D, E) == angle(B, D, E) + 180 mod 360
By different_points_v1 on center(e), C we get 0 != distance(C, center(e))
By different_points_v1 on center(e), E we get 0 != distance(E, center(e))
By same_angle_v3 on D, G, B, H we get angle(G, D, H) == angle(B, D, H) + 180 mod 360
By same_angle_v1 on G, B, D, F we get angle(B, G, F) == angle(D, G, F) mod 360
By different_points_v1 on midpoint(A, D), H we get 0 != distance(H, midpoint(A, D))
By perpendicular_direction_conditions_v0_r on midpoint(A, D), A, midpoint(A, D), H we get 180 == 2 * direction(midpoint(A, D), A) - 2 * direction(midpoint(A, D), H) mod 360
By different_points_v1 on E, center(k) we get 0 != distance(E, center(k))
By different_points_v1 on B, center(e) we get 0 != distance(B, center(e))
By different_points_v1 on E, midpoint(A, D) we get 0 != distance(E, midpoint(A, D))
By same_angle_v1 on G, D, B, C we get angle(B, G, C) == angle(D, G, C) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(A, D), midpoint(A, D), H we get 180 == 2 * direction(D, midpoint(A, D)) - 2 * direction(midpoint(A, D), H) mod 360
By same_angle_v1 on G, B, D, E we get angle(B, G, E) == angle(D, G, E) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(A, D), D, midpoint(A, D) we get 180 == 2 * direction(E, midpoint(A, D)) - 2 * direction(D, midpoint(A, D)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on C, D, midpoint(A, D) we get not_collinear(C, D, midpoint(A, D)), exists(Line(D, midpoint(A, D)))
By perpendicular_direction_conditions_v0_r on midpoint(A, D), E, D, midpoint(A, D) we get 180 == 2 * direction(midpoint(A, D), E) - 2 * direction(D, midpoint(A, D)) mod 360
By same_angle_v3 on D, G, B, C we get angle(G, D, C) == angle(B, D, C) + 180 mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(A, D), A, D we get 180 == 2 * direction(H, midpoint(A, D)) - 2 * direction(A, D) mod 360
By same_angle_v2 on D, G, B, F we get angle(G, D, F) == angle(B, D, F) + 180 mod 360
By same_angle_v1 on G, B, D, A we get angle(B, G, A) == angle(D, G, A) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(A, D), D, A we get 180 == 2 * direction(E, midpoint(A, D)) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(A, D), A, midpoint(A, D) we get 180 == 2 * direction(E, midpoint(A, D)) - 2 * direction(A, midpoint(A, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, A, E, midpoint(A, D) we get 180 == 2 * direction(D, A) - 2 * direction(E, midpoint(A, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, D), A, E, midpoint(A, D) we get 180 == 2 * direction(midpoint(A, D), A) - 2 * direction(E, midpoint(A, D)) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(A, D), D, midpoint(A, D) we get 180 == 2 * direction(H, midpoint(A, D)) - 2 * direction(D, midpoint(A, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, D), A, midpoint(A, D), E we get 180 == 2 * direction(midpoint(A, D), A) - 2 * direction(midpoint(A, D), E) mod 360
By same_angle_v2 on D, G, B, A we get angle(G, D, A) == angle(B, D, A) + 180 mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, D), E, A, midpoint(A, D) we get 180 == 2 * direction(midpoint(A, D), E) - 2 * direction(A, midpoint(A, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, D), D, E, midpoint(A, D) we get 180 == 2 * direction(midpoint(A, D), D) - 2 * direction(E, midpoint(A, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, D), E, D, A we get 180 == 2 * direction(midpoint(A, D), E) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on A, D, E, midpoint(A, D) we get 180 == 2 * direction(A, D) - 2 * direction(E, midpoint(A, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, D), D, midpoint(A, D), H we get 180 == 2 * direction(midpoint(A, D), D) - 2 * direction(midpoint(A, D), H) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(A, D), midpoint(A, D), H we get 180 == 2 * direction(A, midpoint(A, D)) - 2 * direction(midpoint(A, D), H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, D), H, midpoint(A, D), D we get 180 == 2 * direction(midpoint(A, D), H) - 2 * direction(midpoint(A, D), D) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(A, D), midpoint(A, D), E we get 180 == 2 * direction(D, midpoint(A, D)) - 2 * direction(midpoint(A, D), E) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(A, D), midpoint(A, D), D we get 180 == 2 * direction(H, midpoint(A, D)) - 2 * direction(midpoint(A, D), D) mod 360
By perpendicular_direction_conditions_v0_r on D, A, H, midpoint(A, D) we get 180 == 2 * direction(D, A) - 2 * direction(H, midpoint(A, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, D), A, H, midpoint(A, D) we get 180 == 2 * direction(midpoint(A, D), A) - 2 * direction(H, midpoint(A, D)) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(A, D), midpoint(A, D), E we get 180 == 2 * direction(A, midpoint(A, D)) - 2 * direction(midpoint(A, D), E) mod 360
By perpendicular_direction_conditions_v0_r on D, A, midpoint(A, D), E we get 180 == 2 * direction(D, A) - 2 * direction(midpoint(A, D), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, D), D, H, midpoint(A, D) we get 180 == 2 * direction(midpoint(A, D), D) - 2 * direction(H, midpoint(A, D)) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(A, D), midpoint(A, D), A we get 180 == 2 * direction(H, midpoint(A, D)) - 2 * direction(midpoint(A, D), A) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(A, D), D, A we get 180 == 2 * direction(H, midpoint(A, D)) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(A, D), midpoint(A, D), D we get 180 == 2 * direction(E, midpoint(A, D)) - 2 * direction(midpoint(A, D), D) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(A, D), H, midpoint(A, D) we get 180 == 2 * direction(D, midpoint(A, D)) - 2 * direction(H, midpoint(A, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, D), H, D, A we get 180 == 2 * direction(midpoint(A, D), H) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, D), H, midpoint(A, D), A we get 180 == 2 * direction(midpoint(A, D), H) - 2 * direction(midpoint(A, D), A) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(A, D), E, midpoint(A, D) we get 180 == 2 * direction(A, midpoint(A, D)) - 2 * direction(E, midpoint(A, D)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(A, D), midpoint(A, D), A we get 180 == 2 * direction(E, midpoint(A, D)) - 2 * direction(midpoint(A, D), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, D), E, midpoint(A, D), D we get 180 == 2 * direction(midpoint(A, D), E) - 2 * direction(midpoint(A, D), D) mod 360
By perpendicular_direction_conditions_v0_r on A, D, midpoint(A, D), H we get 180 == 2 * direction(A, D) - 2 * direction(midpoint(A, D), H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, D), E, midpoint(A, D), A we get 180 == 2 * direction(midpoint(A, D), E) - 2 * direction(midpoint(A, D), A) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(A, D), A, midpoint(A, D) we get 180 == 2 * direction(H, midpoint(A, D)) - 2 * direction(A, midpoint(A, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, A, midpoint(A, D), H we get 180 == 2 * direction(D, A) - 2 * direction(midpoint(A, D), H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, D), H, A, midpoint(A, D) we get 180 == 2 * direction(midpoint(A, D), H) - 2 * direction(A, midpoint(A, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(A, D), E, midpoint(A, D) we get 180 == 2 * direction(D, midpoint(A, D)) - 2 * direction(E, midpoint(A, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, D), E, A, D we get 180 == 2 * direction(midpoint(A, D), E) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, D), D, midpoint(A, D), E we get 180 == 2 * direction(midpoint(A, D), D) - 2 * direction(midpoint(A, D), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, D), H, D, midpoint(A, D) we get 180 == 2 * direction(midpoint(A, D), H) - 2 * direction(D, midpoint(A, D)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(A, D), A, D we get 180 == 2 * direction(E, midpoint(A, D)) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(A, D), H, midpoint(A, D) we get 180 == 2 * direction(A, midpoint(A, D)) - 2 * direction(H, midpoint(A, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, D), H, A, D we get 180 == 2 * direction(midpoint(A, D), H) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on A, D, H, midpoint(A, D) we get 180 == 2 * direction(A, D) - 2 * direction(H, midpoint(A, D)) mod 360
By anti_congruence_from_anti_similar_triangles on E, D, F, E, A, F we get anti_congruent_triangles(A, E, F, D, E, F)
By line_inequality on Line(E, center(k)), h, E we get h != Line(E, center(k))
By line_inequality on Line(C, center(k)), Line(E, F), C we get Line(E, F) != Line(C, center(k))
By probably_between_and_collinear_implies_between on G, D, B we get between(B, D, G)
By asa_anti_congruence on E, G, A, E, G, B we get anti_congruent_triangles(A, E, G, B, E, G)
By sas_anti_congruence on A, E, F, D, E, F we get anti_congruent_triangles(A, E, F, D, E, F)
By aa_similarity on B, A, G, E, A, H we get similar_triangles(A, B, G, A, E, H)
By not_in_line_equivalent_to_not_collinear_v0 on C, midpoint(A, D), E we get not_collinear(C, E, midpoint(A, D)), exists(Line(E, midpoint(A, D)))
By sas_anti_congruence on D, E, F, A, E, F we get anti_congruent_triangles(A, E, F, D, E, F)
By line_inequality on Line(G, center(e)), Line(E, H), G we get Line(E, H) != Line(G, center(e))
By reverse_direction on D, midpoint(A, D) we get 180 == direction(D, midpoint(A, D)) - direction(midpoint(A, D), D) mod 360
By asa_anti_congruence on E, G, B, E, G, A we get anti_congruent_triangles(A, E, G, B, E, G)
By internal_angle_bisector_definition_v0_r on A, F, D, E we get Line(E, F) == internal_angle_bisector(A, E, D)
By concyclic_definition_0 on D, E, A, G we get G in Circle(A, D, E)
By line_inequality on Line(F, center(k)), Line(B, G), F we get Line(B, G) != Line(F, center(k))
By anti_congruence_from_anti_similar_triangles on E, A, F, E, D, F we get anti_congruent_triangles(A, E, F, D, E, F)
By aa_anti_similarity on B, A, G, A, E, H we get anti_similar_triangles(A, B, G, E, A, H)
By not_in_line_equivalent_to_not_collinear_v0 on G, D, midpoint(A, D) we get not_collinear(D, G, midpoint(A, D)), exists(Line(D, midpoint(A, D)))
By sas_anti_congruence on F, E, D, F, E, A we get anti_congruent_triangles(A, E, F, D, E, F)
By not_in_line_equivalent_to_not_collinear_v0 on B, E, midpoint(A, D) we get not_collinear(B, E, midpoint(A, D)), exists(Line(E, midpoint(A, D)))
By asa_anti_congruence on E, A, F, E, D, F we get anti_congruent_triangles(A, E, F, D, E, F)
By not_in_line_equivalent_to_not_collinear_v0 on E, midpoint(A, D), D we get not_collinear(D, E, midpoint(A, D)), exists(Line(D, midpoint(A, D)))
By aa_anti_similarity on A, H, E, B, G, A we get anti_similar_triangles(A, B, G, E, A, H)
By line_circle_intersection_has_at_most_two_points_0 on B, D, G, Circle(B, D, E) we get G not in Circle(B, D, E)
By not_in_line_equivalent_to_not_collinear_v0 on D, H, midpoint(A, D) we get not_collinear(D, H, midpoint(A, D)), exists(Line(H, midpoint(A, D)))
By line_inequality on Line(C, center(k)), Line(E, G), C we get Line(E, G) != Line(C, center(k))
By between_imply_segment_sum on F, C, G we get distance(F, G) == distance(C, F) + distance(C, G)
By line_inequality on Line(E, center(k)), Line(B, D), E we get Line(B, D) != Line(E, center(k))
By line_inequality on Line(C, center(e)), Line(A, E), C we get Line(A, E) != Line(C, center(e))
By aa_similarity on E, H, A, B, G, A we get similar_triangles(A, B, G, A, E, H)
By asa_anti_congruence on E, F, A, E, F, D we get anti_congruent_triangles(A, E, F, D, E, F)
By line_inequality on Line(F, center(k)), Line(A, H), F we get Line(A, H) != Line(F, center(k))
By sas_anti_congruence on B, E, G, A, E, G we get anti_congruent_triangles(A, E, G, B, E, G)
By aa_similarity on D, E, H, B, A, G we get similar_triangles(A, B, G, E, D, H)
By anti_congruence_from_anti_similar_triangles on E, A, G, E, B, G we get anti_congruent_triangles(A, E, G, B, E, G)
By collinear_definition on B, G, D we get G in Line(B, D), D in Line(B, G), Line(B, D) == Line(B, G), 0 == 2 * angle(G, B, D) mod 360
By asa_anti_congruence on G, E, A, G, E, B we get anti_congruent_triangles(A, E, G, B, E, G)
By anti_congruence_from_anti_similar_triangles on E, G, A, E, G, B we get anti_congruent_triangles(A, E, G, B, E, G)
By tangent_chord_angle_reverse_v2 on D, B, E, F we get angle(B, E, D) == angle(B, D, F) + 180 mod 360
By line_containment_inequality on midpoint(A, D), F, Line(A, D) we get F != midpoint(A, D)
By sas_anti_congruence on F, E, A, F, E, D we get anti_congruent_triangles(A, E, F, D, E, F)
By not_in_line_equivalent_to_not_collinear_v0 on B, D, midpoint(A, D) we get not_collinear(B, D, midpoint(A, D)), exists(Line(D, midpoint(A, D)))
By not_in_line_equivalent_to_not_collinear_v0 on C, A, midpoint(A, D) we get not_collinear(A, C, midpoint(A, D)), exists(Line(A, midpoint(A, D)))
By asa_anti_congruence on B, E, G, A, E, G we get anti_congruent_triangles(A, E, G, B, E, G)
By aa_anti_similarity on E, H, D, B, G, A we get anti_similar_triangles(A, B, G, D, E, H)
By altitude_definition on E, A, D, Line(E, F) we get Line(E, F) == altitude(E, A, D)
By reverse_direction on midpoint(A, D), D we get 180 == direction(midpoint(A, D), D) - direction(D, midpoint(A, D)) mod 360
By anti_congruence_from_anti_similar_triangles on E, B, G, E, A, G we get anti_congruent_triangles(A, E, G, B, E, G)
By sas_anti_congruence on A, E, G, B, E, G we get anti_congruent_triangles(A, E, G, B, E, G)
By asa_anti_congruence on E, F, D, E, F, A we get anti_congruent_triangles(A, E, F, D, E, F)
By double_perpendicular_and_parallel_v0 on Line(E, F), Line(A, D), Line(E, H) we get parallel(Line(E, F), Line(E, H))
By reverse_direction on midpoint(A, D), A we get 180 == direction(midpoint(A, D), A) - direction(A, midpoint(A, D)) mod 360
By anti_congruence_from_anti_similar_triangles on E, F, D, E, F, A we get anti_congruent_triangles(A, E, F, D, E, F)
By aa_similarity on B, A, G, D, E, H we get similar_triangles(A, B, G, E, D, H)
By line_inequality on Line(G, center(e)), Line(D, E), G we get Line(D, E) != Line(G, center(e))
By aa_anti_similarity on B, G, A, E, H, D we get anti_similar_triangles(A, B, G, D, E, H)
By aa_similarity on B, G, A, E, H, A we get similar_triangles(A, B, G, A, E, H)
By asa_anti_congruence on F, E, A, F, E, D we get anti_congruent_triangles(A, E, F, D, E, F)
By collinear_definition on B, D, G we get D in Line(B, G), G in Line(B, D), Line(B, D) == Line(B, G), 0 == 2 * angle(D, B, G) mod 360
By anti_congruence_from_anti_similar_triangles on E, F, A, E, F, D we get anti_congruent_triangles(A, E, F, D, E, F)
By asa_anti_congruence on F, E, D, F, E, A we get anti_congruent_triangles(A, E, F, D, E, F)
By not_in_line_equivalent_to_not_collinear_v0 on B, midpoint(A, D), H we get not_collinear(B, H, midpoint(A, D)), exists(Line(H, midpoint(A, D)))
By asa_anti_congruence on D, E, F, A, E, F we get anti_congruent_triangles(A, E, F, D, E, F)
By anti_congruence_from_anti_similar_triangles on A, E, G, B, E, G we get anti_congruent_triangles(A, E, G, B, E, G)
By between_imply_segment_sum on A, F, G we get distance(A, G) == distance(A, F) + distance(F, G)
By aa_similarity on E, A, H, B, A, G we get similar_triangles(A, B, G, A, E, H)
By anti_congruence_from_anti_similar_triangles on G, E, A, G, E, B we get anti_congruent_triangles(A, E, G, B, E, G)
By not_in_line_equivalent_to_not_collinear_v0 on H, A, midpoint(A, D) we get not_collinear(A, H, midpoint(A, D)), exists(Line(A, midpoint(A, D)))
By anti_congruence_from_anti_similar_triangles on G, E, B, G, E, A we get anti_congruent_triangles(A, E, G, B, E, G)
By anti_congruence_from_anti_similar_triangles on A, E, F, D, E, F we get anti_congruent_triangles(A, E, F, D, E, F)
By aa_anti_similarity on B, G, A, A, H, E we get anti_similar_triangles(A, B, G, E, A, H)
By asa_anti_congruence on G, E, B, G, E, A we get anti_congruent_triangles(A, E, G, B, E, G)
By sas_anti_congruence on G, E, A, G, E, B we get anti_congruent_triangles(A, E, G, B, E, G)
By asa_anti_congruence on A, E, G, B, E, G we get anti_congruent_triangles(A, E, G, B, E, G)
By line_inequality on Line(E, center(e)), Line(B, D), E we get Line(B, D) != Line(E, center(e))
By not_in_line_equivalent_to_not_collinear_v0 on B, A, midpoint(A, D) we get not_collinear(A, B, midpoint(A, D)), exists(Line(A, midpoint(A, D)))
By anti_congruence_from_anti_similar_triangles on F, E, A, F, E, D we get anti_congruent_triangles(A, E, F, D, E, F)
By asa_anti_congruence on A, E, F, D, E, F we get anti_congruent_triangles(A, E, F, D, E, F)
By asa_anti_congruence on E, D, F, E, A, F we get anti_congruent_triangles(A, E, F, D, E, F)
By line_inequality on Line(C, center(k)), Line(B, D), C we get Line(B, D) != Line(C, center(k))
By line_inequality on Line(F, center(k)), Line(B, C), F we get Line(B, C) != Line(F, center(k))
By aa_anti_similarity on E, D, H, B, A, G we get anti_similar_triangles(A, B, G, D, E, H)
By anti_congruence_from_anti_similar_triangles on B, E, G, A, E, G we get anti_congruent_triangles(A, E, G, B, E, G)
By line_inequality on Line(G, center(e)), Line(E, F), G we get Line(E, F) != Line(G, center(e))
By asa_anti_congruence on E, B, G, E, A, G we get anti_congruent_triangles(A, E, G, B, E, G)
By line_inequality on Line(B, center(e)), h, B we get h != Line(B, center(e))
By aa_anti_similarity on A, E, H, B, A, G we get anti_similar_triangles(A, B, G, E, A, H)
By not_in_line_equivalent_to_not_collinear_v0 on G, midpoint(A, D), E we get not_collinear(E, G, midpoint(A, D)), exists(Line(E, midpoint(A, D)))
By sas_anti_congruence on G, E, B, G, E, A we get anti_congruent_triangles(A, E, G, B, E, G)
By not_in_line_equivalent_to_not_collinear_v0 on C, H, midpoint(A, D) we get not_collinear(C, H, midpoint(A, D)), exists(Line(H, midpoint(A, D)))
By anti_congruence_from_anti_similar_triangles on F, E, D, F, E, A we get anti_congruent_triangles(A, E, F, D, E, F)
By anti_congruence_from_anti_similar_triangles on E, G, B, E, G, A we get anti_congruent_triangles(A, E, G, B, E, G)
By reverse_direction on A, midpoint(A, D) we get 180 == direction(A, midpoint(A, D)) - direction(midpoint(A, D), A) mod 360
By aa_anti_similarity on B, A, G, E, D, H we get anti_similar_triangles(A, B, G, D, E, H)
By aa_similarity on D, H, E, B, G, A we get similar_triangles(A, B, G, E, D, H)
By anti_congruence_from_anti_similar_triangles on D, E, F, A, E, F we get anti_congruent_triangles(A, E, F, D, E, F)
By line_inequality on Line(G, center(e)), Line(C, E), G we get Line(C, E) != Line(G, center(e))
By asa_anti_congruence on E, A, G, E, B, G we get anti_congruent_triangles(A, E, G, B, E, G)
By aa_similarity on B, G, A, D, H, E we get similar_triangles(A, B, G, E, D, H)
By line_inequality on Line(E, center(e)), f, E we get f != Line(E, center(e))
By line_inequality on Line(B, center(e)), Line(E, H), B we get Line(E, H) != Line(B, center(e))
By line_inequality on Line(G, center(e)), Line(A, H), G we get Line(A, H) != Line(G, center(e))
By line_inequality on Line(E, center(e)), h, E we get h != Line(E, center(e))
By line_inequality on Line(C, center(k)), Line(B, E), C we get Line(B, E) != Line(C, center(k))
By not_in_line_equivalent_to_not_collinear_v0 on A, midpoint(A, D), E we get not_collinear(A, E, midpoint(A, D)), exists(Line(E, midpoint(A, D)))
By not_in_line_equivalent_to_not_collinear_v0 on F, midpoint(A, D), D we get not_collinear(D, F, midpoint(A, D)), exists(Line(D, midpoint(A, D)))
By line_inequality on Line(D, center(k)), h, D we get h != Line(D, center(k))
By line_inequality on Line(G, center(e)), Line(B, C), G we get Line(B, C) != Line(G, center(e))
By not_in_line_equivalent_to_not_collinear_v0 on G, midpoint(A, D), H we get not_collinear(G, H, midpoint(A, D)), exists(Line(H, midpoint(A, D)))
By line_inequality on Line(C, center(k)), f, C we get f != Line(C, center(k))
By line_inequality on Line(C, center(k)), Line(D, H), C we get Line(D, H) != Line(C, center(k))
By line_inequality on Line(E, center(e)), Line(D, H), E we get Line(D, H) != Line(E, center(e))
By line_inequality on Line(G, center(e)), Line(D, F), G we get Line(D, F) != Line(G, center(e))
By line_inequality on Line(B, center(e)), Line(D, F), B we get Line(D, F) != Line(B, center(e))
By line_inequality on Line(C, center(e)), Line(E, G), C we get Line(E, G) != Line(C, center(e))
By not_in_line_equivalent_to_not_collinear_v0 on F, A, midpoint(A, D) we get not_collinear(A, F, midpoint(A, D)), exists(Line(A, midpoint(A, D)))
By line_inequality on Line(C, center(e)), f, C we get f != Line(C, center(e))
By not_in_line_equivalent_to_not_collinear_v0 on G, A, midpoint(A, D) we get not_collinear(A, G, midpoint(A, D)), exists(Line(A, midpoint(A, D)))
By line_inequality on Line(C, center(e)), Line(D, E), C we get Line(D, E) != Line(C, center(e))
By line_inequality on Line(B, center(e)), Line(A, H), B we get Line(A, H) != Line(B, center(e))
By line_inequality on Line(C, center(e)), Line(E, F), C we get Line(E, F) != Line(C, center(e))
By line_inequality on Line(G, center(e)), Line(A, D), G we get Line(A, D) != Line(G, center(e))
By line_inequality on Line(F, center(k)), Line(B, D), F we get Line(B, D) != Line(F, center(k))
By line_inequality on Line(B, center(e)), Line(E, F), B we get Line(E, F) != Line(B, center(e))
By line_inequality on Line(E, center(k)), Line(A, D), E we get Line(A, D) != Line(E, center(k))
By line_inequality on Line(F, center(k)), Line(A, D), F we get Line(A, D) != Line(F, center(k))
By line_inequality on Line(C, center(k)), Line(A, D), C we get Line(A, D) != Line(C, center(k))
By line_inequality on Line(D, center(k)), Line(A, E), D we get Line(A, E) != Line(D, center(k))
By line_inequality on Line(C, center(e)), Line(D, H), C we get Line(D, H) != Line(C, center(e))
By line_inequality on Line(E, center(k)), Line(D, H), E we get Line(D, H) != Line(E, center(k))
By line_inequality on Line(G, center(e)), g, G we get g != Line(G, center(e))
By line_inequality on Line(C, center(e)), Line(B, G), C we get Line(B, G) != Line(C, center(e))
By line_inequality on Line(C, center(e)), Line(B, D), C we get Line(B, D) != Line(C, center(e))
By line_inequality on Line(E, center(e)), Line(A, D), E we get Line(A, D) != Line(E, center(e))
By line_inequality on Line(E, center(e)), Line(B, C), E we get Line(B, C) != Line(E, center(e))
By line_inequality on Line(G, center(e)), f, G we get f != Line(G, center(e))
By line_inequality on Line(D, center(k)), Line(B, E), D we get Line(B, E) != Line(D, center(k))
By line_inequality on Line(E, center(k)), Line(A, H), E we get Line(A, H) != Line(E, center(k))
By line_inequality on Line(B, center(e)), g, B we get g != Line(B, center(e))
By line_inequality on Line(E, center(k)), f, E we get f != Line(E, center(k))
By line_inequality on Line(C, center(k)), Line(D, F), C we get Line(D, F) != Line(C, center(k))
By line_inequality on Line(E, center(k)), g, E we get g != Line(E, center(k))
By line_inequality on Line(C, center(k)), Line(D, E), C we get Line(D, E) != Line(C, center(k))
By line_inequality on Line(C, center(e)), Line(D, F), C we get Line(D, F) != Line(C, center(e))
By line_inequality on Line(D, center(k)), Line(E, F), D we get Line(E, F) != Line(D, center(k))
By line_inequality on Line(E, center(k)), Line(B, G), E we get Line(B, G) != Line(E, center(k))
By line_inequality on Line(E, center(e)), g, E we get g != Line(E, center(e))
By line_inequality on Line(F, center(k)), g, F we get g != Line(F, center(k))
By line_circle_intersection_has_at_most_two_points_0 on E, H, midpoint(A, D), Circle(D, E, H) we get midpoint(A, D) not in Circle(D, E, H)
By line_inequality on Line(F, center(k)), Line(C, E), F we get Line(C, E) != Line(F, center(k))
By line_inequality on Line(D, center(k)), Line(E, G), D we get Line(E, G) != Line(D, center(k))
By line_inequality on Line(D, center(k)), Line(E, H), D we get Line(E, H) != Line(D, center(k))
By line_inequality on Line(G, center(e)), Line(A, E), G we get Line(A, E) != Line(G, center(e))
By line_circle_intersection_has_at_most_two_points_0 on H, E, midpoint(A, D), Circle(A, E, H) we get midpoint(A, D) not in Circle(A, E, H)
By line_inequality on Line(D, center(k)), Line(B, C), D we get Line(B, C) != Line(D, center(k))
By line_inequality on Line(C, center(e)), Line(B, E), C we get Line(B, E) != Line(C, center(e))
By line_inequality on Line(D, center(k)), f, D we get f != Line(D, center(k))
By line_inequality on Line(C, center(k)), Line(B, G), C we get Line(B, G) != Line(C, center(k))
By line_inequality on Line(C, center(k)), Line(A, E), C we get Line(A, E) != Line(C, center(k))
By line_inequality on Line(D, center(k)), Line(A, H), D we get Line(A, H) != Line(D, center(k))
By line_inequality on Line(C, center(k)), Line(E, H), C we get Line(E, H) != Line(C, center(k))
By line_inequality on Line(B, center(e)), Line(A, E), B we get Line(A, E) != Line(B, center(e))
By line_inequality on Line(E, center(k)), Line(D, F), E we get Line(D, F) != Line(E, center(k))
By line_inequality on Line(G, center(e)), Line(B, E), G we get Line(B, E) != Line(G, center(e))
By line_inequality on Line(B, center(e)), Line(E, G), B we get Line(E, G) != Line(B, center(e))
By line_inequality on Line(C, center(k)), Line(A, H), C we get Line(A, H) != Line(C, center(k))
By line_inequality on Line(F, center(k)), f, F we get f != Line(F, center(k))
By line_inequality on Line(F, center(k)), Line(B, E), F we get Line(B, E) != Line(F, center(k))
By line_inequality on Line(G, center(e)), Line(D, H), G we get Line(D, H) != Line(G, center(e))
By line_inequality on Line(E, center(k)), Line(B, C), E we get Line(B, C) != Line(E, center(k))
By line_inequality on Line(B, center(e)), Line(A, D), B we get Line(A, D) != Line(B, center(e))
By line_inequality on Line(B, center(e)), Line(C, E), B we get Line(C, E) != Line(B, center(e))
By line_inequality on Line(F, center(k)), Line(A, E), F we get Line(A, E) != Line(F, center(k))
By line_inequality on Line(E, center(e)), Line(A, H), E we get Line(A, H) != Line(E, center(e))
By line_inequality on Line(F, center(k)), Line(D, H), F we get Line(D, H) != Line(F, center(k))
By line_inequality on Line(C, center(e)), Line(A, D), C we get Line(A, D) != Line(C, center(e))
By line_inequality on Line(E, center(e)), Line(B, G), E we get Line(B, G) != Line(E, center(e))
By line_inequality on Line(B, center(e)), Line(D, E), B we get Line(D, E) != Line(B, center(e))
By line_inequality on Line(E, center(e)), Line(D, F), E we get Line(D, F) != Line(E, center(e))
By line_inequality on Line(B, center(e)), Line(D, H), B we get Line(D, H) != Line(B, center(e))
By line_inequality on Line(F, center(k)), Line(E, G), F we get Line(E, G) != Line(F, center(k))
By line_inequality on Line(C, center(e)), Line(E, H), C we get Line(E, H) != Line(C, center(e))
By line_inequality on Line(D, center(k)), Line(C, E), D we get Line(C, E) != Line(D, center(k))
By line_inequality on Line(F, center(k)), Line(D, E), F we get Line(D, E) != Line(F, center(k))
By line_inequality on Line(C, center(e)), Line(A, H), C we get Line(A, H) != Line(C, center(e))
By collinear_definition on D, B, G we get B in Line(D, G), G in Line(B, D), Line(B, D) == Line(D, G), 0 == 2 * angle(B, D, G) mod 360
By external_angle_bisector_definition_v0_r on A, C, G, F we get Line(C, F) == external_angle_bisector(A, F, G)
By perpendicular_angle_conditions_v0 on D, midpoint(A, D), H we get angle(D, midpoint(A, D), H) == orientation(D, midpoint(A, D), H) mod 360
By concyclic_definition_1 on G, E, D, A we get Circle(A, D, E) == Circle(D, E, G)
By internal_angle_bisector_definition_v0_r on F, C, A, G we get Line(C, G) == internal_angle_bisector(A, G, F)
By external_angle_bisector_definition_v0_r on G, F, A, C we get Line(C, F) == external_angle_bisector(A, C, G)
By internal_angle_bisector_definition_v0_r on C, A, G, F we get Line(A, F) == internal_angle_bisector(C, F, G)
By internal_angle_bisector_definition_v0_r on F, C, F, G we get Line(C, G) == internal_angle_bisector(F, G, F)
By reverse_direction on center(k), C we get 180 == direction(center(k), C) - direction(C, center(k)) mod 360
By power_of_a_point_on_circle on D, Circle(D, E, H) we get 0 == power_of_a_point(D, Circle(D, E, H))
By concyclic_definition_1 on G, A, D, E we get Circle(A, D, E) == Circle(A, D, G)
By external_angle_bisector_definition_v0_r on A, G, C, F we get Line(F, G) == external_angle_bisector(A, F, C)
By reverse_direction on center(k), F we get 180 == direction(center(k), F) - direction(F, center(k)) mod 360
By external_angle_bisector_definition_v0_r on G, E, D, F we get Line(E, F) == external_angle_bisector(D, F, G)
By draw_point_of_tangency on Line(D, E), Circle(A, E, H) we get exists(line_circle_tangent_point(Line(D, E), Circle(A, E, H)))
By concyclic_definition_0 on D, G, A, E we get E in Circle(A, D, G)
By internal_angle_bisector_definition_v0_r on A, F, C, G we get Line(F, G) == internal_angle_bisector(A, G, C)
By internal_angle_bisector_definition_v0_r on B, E, F, G we get Line(E, G) == internal_angle_bisector(B, G, F)
By concyclic_definition_0 on D, E, G, A we get A in Circle(D, E, G)
By internal_angle_bisector_definition_v0_r on G, F, C, A we get Line(A, F) == internal_angle_bisector(C, A, G)
By concyclic_definition_1 on D, A, E, G we get Circle(A, D, E) == Circle(A, E, G)
By concyclic_definition_0 on E, A, G, D we get D in Circle(A, E, G)
By internal_angle_bisector_definition_v0_r on A, D, A, midpoint(A, D) we get Line(D, midpoint(A, D)) == internal_angle_bisector(A, midpoint(A, D), A)
By perpendicular_lines_draw_intersection on Line(A, D), Line(E, F) we get exists(line_intersection(Line(A, D), Line(E, F)))
By collinear_definition on G, D, B we get D in Line(B, G), B in Line(D, G), Line(B, G) == Line(D, G), 0 == 2 * angle(D, G, B) mod 360
By power_of_a_point_in_circle on A, Circle(A, E, H) we get 0 == power_of_a_point(A, Circle(A, E, H))
By perpendicular_angle_conditions_v0 on E, midpoint(A, D), A we get angle(E, midpoint(A, D), A) == orientation(A, E, midpoint(A, D)) mod 360
By internal_angle_bisector_definition_v0 on D, midpoint(A, D), A, E we get angle(D, E, midpoint(A, D)) == angle(midpoint(A, D), E, A) mod 360
By power_of_a_point_on_circle on E, Circle(A, E, H) we get 0 == power_of_a_point(E, Circle(A, E, H))
By internal_angle_bisector_definition_v0_r on C, A, F, G we get Line(A, G) == internal_angle_bisector(C, G, F)
By internal_angle_bisector_definition_v0 on A, midpoint(A, D), D, H we get angle(A, H, midpoint(A, D)) == angle(midpoint(A, D), H, D) mod 360
By reverse_direction on center(k), E we get 180 == direction(center(k), E) - direction(E, center(k)) mod 360
By collinear_definition on H, midpoint(A, D), E we get midpoint(A, D) in Line(E, H), E in Line(H, midpoint(A, D)), Line(E, H) == Line(H, midpoint(A, D)), 0 == 2 * angle(midpoint(A, D), H, E) mod 360
By internal_angle_bisector_definition_v0_r on C, G, F, A we get Line(A, G) == internal_angle_bisector(C, A, F)
By internal_angle_bisector_definition_v0_r on F, G, A, C we get Line(C, G) == internal_angle_bisector(A, C, F)
By internal_angle_bisector_definition_v0 on A, H, D, midpoint(A, D) we get angle(A, midpoint(A, D), H) == angle(H, midpoint(A, D), D) mod 360
By perpendicular_lines_draw_intersection on Line(E, G), g we get exists(line_intersection(g, Line(E, G)))
By internal_angle_bisector_definition_v0_r on B, E, C, center(e) we get Line(E, center(e)) == internal_angle_bisector(B, center(e), C)
By internal_angle_bisector_definition_v0 on D, H, A, midpoint(A, D) we get angle(D, midpoint(A, D), H) == angle(H, midpoint(A, D), A) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(A, D), D, midpoint(A, D), A we get Line(A, D) == internal_angle_bisector(midpoint(A, D), A, midpoint(A, D))
By power_of_a_point_in_circle on B, Circle(B, D, E) we get 0 == power_of_a_point(B, Circle(B, D, E))
By power_of_a_point_in_circle on E, Circle(D, E, H) we get 0 == power_of_a_point(E, Circle(D, E, H))
By reverse_direction on center(e), G we get 180 == direction(center(e), G) - direction(G, center(e)) mod 360
By internal_angle_bisector_definition_v0_r on C, E, D, center(k) we get Line(E, center(k)) == internal_angle_bisector(C, center(k), D)
By internal_angle_bisector_definition_v0 on A, E, D, midpoint(A, D) we get angle(A, midpoint(A, D), E) == angle(E, midpoint(A, D), D) mod 360
By power_of_a_point_in_circle on H, Circle(A, E, H) we get 0 == power_of_a_point(H, Circle(A, E, H))
By power_of_a_point_on_circle on D, Circle(B, D, E) we get 0 == power_of_a_point(D, Circle(B, D, E))
By reverse_direction on center(k), D we get 180 == direction(center(k), D) - direction(D, center(k)) mod 360
By reverse_direction on center(e), E we get 180 == direction(center(e), E) - direction(E, center(e)) mod 360
By internal_angle_bisector_definition_v0_r on A, G, B, E we get Line(E, G) == internal_angle_bisector(A, E, B)
By internal_angle_bisector_definition_v0_r on midpoint(A, D), A, midpoint(A, D), D we get Line(A, D) == internal_angle_bisector(midpoint(A, D), D, midpoint(A, D))
By collinear_definition on E, midpoint(A, D), H we get midpoint(A, D) in Line(E, H), H in Line(E, midpoint(A, D)), Line(E, H) == Line(E, midpoint(A, D)), 0 == 2 * angle(midpoint(A, D), E, H) mod 360
By power_of_a_point_on_circle on H, Circle(D, E, H) we get 0 == power_of_a_point(H, Circle(D, E, H))
By internal_angle_bisector_definition_v0_r on D, A, D, midpoint(A, D) we get Line(A, midpoint(A, D)) == internal_angle_bisector(D, midpoint(A, D), D)
By internal_angle_bisector_definition_v0 on D, midpoint(A, D), A, H we get angle(D, H, midpoint(A, D)) == angle(midpoint(A, D), H, A) mod 360
By power_of_a_point_on_circle on E, Circle(B, D, E) we get 0 == power_of_a_point(E, Circle(B, D, E))
By internal_angle_bisector_definition_v0_r on G, A, G, F we get Line(A, F) == internal_angle_bisector(G, F, G)
By internal_angle_bisector_definition_v0 on A, midpoint(A, D), D, E we get angle(A, E, midpoint(A, D)) == angle(midpoint(A, D), E, D) mod 360
By reverse_direction on center(e), C we get 180 == direction(center(e), C) - direction(C, center(e)) mod 360
By perpendicular_angle_conditions_v0 on H, midpoint(A, D), A we get angle(H, midpoint(A, D), A) == orientation(A, H, midpoint(A, D)) mod 360
By collinear_definition on G, B, D we get B in Line(D, G), D in Line(B, G), Line(B, G) == Line(D, G), 0 == 2 * angle(B, G, D) mod 360
By internal_angle_bisector_definition_v0_r on D, midpoint(A, D), D, A we get Line(A, midpoint(A, D)) == internal_angle_bisector(D, A, D)
By perpendicular_angle_conditions_v0 on D, midpoint(A, D), E we get angle(D, midpoint(A, D), E) == orientation(D, midpoint(A, D), E) mod 360
By reverse_direction on center(e), B we get 180 == direction(center(e), B) - direction(B, center(e)) mod 360
By perpendicular_angle_conditions_v0 on E, midpoint(A, D), D we get angle(E, midpoint(A, D), D) == orientation(D, E, midpoint(A, D)) mod 360
By perpendicular_angle_conditions_v0 on A, midpoint(A, D), E we get angle(A, midpoint(A, D), E) == orientation(A, midpoint(A, D), E) mod 360
By collinear_definition on D, G, B we get G in Line(B, D), B in Line(D, G), Line(B, D) == Line(D, G), 0 == 2 * angle(G, D, B) mod 360
By perpendicular_angle_conditions_v0 on H, midpoint(A, D), D we get angle(H, midpoint(A, D), D) == orientation(D, H, midpoint(A, D)) mod 360
By perpendicular_angle_conditions_v0 on A, midpoint(A, D), H we get angle(A, midpoint(A, D), H) == orientation(A, midpoint(A, D), H) mod 360
By internal_angle_bisector_definition_v0 on D, E, A, midpoint(A, D) we get angle(D, midpoint(A, D), E) == angle(E, midpoint(A, D), A) mod 360
By collinear_definition on H, E, midpoint(A, D) we get E in Line(H, midpoint(A, D)), midpoint(A, D) in Line(E, H), Line(E, H) == Line(H, midpoint(A, D)), 0 == 2 * angle(E, H, midpoint(A, D)) mod 360
By collinear_definition on E, H, midpoint(A, D) we get H in Line(E, midpoint(A, D)), midpoint(A, D) in Line(E, H), Line(E, H) == Line(E, midpoint(A, D)), 0 == 2 * angle(H, E, midpoint(A, D)) mod 360
By internal_angle_bisector_definition_v0_r on A, midpoint(A, D), A, D we get Line(D, midpoint(A, D)) == internal_angle_bisector(A, D, A)
By internal_angle_bisector_definition_v0_r on F, A, F, G we get Line(A, G) == internal_angle_bisector(F, G, F)
By internal_angle_bisector_definition_v0_r on G, C, G, F we get Line(C, F) == internal_angle_bisector(G, F, G)
By perpendicular_lines_draw_intersection on Line(E, G), f we get exists(line_intersection(f, Line(E, G)))
By draw_point_of_tangency on Line(A, E), Circle(D, E, H) we get exists(line_circle_tangent_point(Line(A, E), Circle(D, E, H)))
By draw_point_of_tangency on Line(D, F), Circle(B, D, E) we get exists(line_circle_tangent_point(Line(D, F), Circle(B, D, E)))
By anti_similar_triangle_basic_properties on F, E, A, F, E, D we get not_collinear(A, E, F), not_collinear(D, E, F), angle(F, E, A) == 0 - angle(F, E, D) mod 360, angle(E, A, F) == 0 - angle(E, D, F) mod 360, angle(A, F, E) == 0 - angle(D, F, E) mod 360, log(distance(E, F)) + log(distance(A, E)) == log(distance(E, F)) + log(distance(D, E)), log(distance(A, E)) + log(distance(D, F)) == log(distance(D, E)) + log(distance(A, F)), log(distance(A, F)) + log(distance(E, F)) == log(distance(D, F)) + log(distance(E, F))
By anti_similar_triangle_basic_properties on B, G, E, A, G, E we get not_collinear(B, E, G), not_collinear(A, E, G), angle(B, G, E) == 0 - angle(A, G, E) mod 360, angle(G, E, B) == 0 - angle(G, E, A) mod 360, angle(E, B, G) == 0 - angle(E, A, G) mod 360, log(distance(A, G)) + log(distance(E, G)) == log(distance(B, G)) + log(distance(E, G)), log(distance(E, G)) + log(distance(A, E)) == log(distance(E, G)) + log(distance(B, E)), log(distance(A, E)) + log(distance(B, G)) == log(distance(B, E)) + log(distance(A, G))
By isosceles_triangle_properties on center(k), D, C we get distance(C, center(k)) == distance(D, center(k)), angle(D, C, center(k)) == angle(center(k), D, C) mod 360
By collinear_definition on midpoint(A, D), H, E we get H in Line(E, midpoint(A, D)), E in Line(H, midpoint(A, D)), Line(E, midpoint(A, D)) == Line(H, midpoint(A, D)), 0 == 2 * angle(H, midpoint(A, D), E) mod 360
By isosceles_triangle_properties on center(e), B, C we get distance(B, center(e)) == distance(C, center(e)), angle(B, C, center(e)) == angle(center(e), B, C) mod 360
By concyclic_definition_1 on D, E, G, A we get Circle(A, E, G) == Circle(D, E, G)
By anti_similar_triangle_basic_properties on E, F, A, E, F, D we get not_collinear(A, E, F), not_collinear(D, E, F), angle(E, F, A) == 0 - angle(E, F, D) mod 360, angle(F, A, E) == 0 - angle(F, D, E) mod 360, angle(A, E, F) == 0 - angle(D, E, F) mod 360, log(distance(E, F)) + log(distance(A, F)) == log(distance(E, F)) + log(distance(D, F)), log(distance(A, F)) + log(distance(D, E)) == log(distance(D, F)) + log(distance(A, E)), log(distance(A, E)) + log(distance(E, F)) == log(distance(D, E)) + log(distance(E, F))
By altitude_definition on E, D, C, Line(E, G) we get Line(E, G) == altitude(E, C, D)
By power_of_a_point_definition on midpoint(A, D), D, A, d we get log(power_of_a_point(midpoint(A, D), d)) == log(distance(D, midpoint(A, D))) + log(distance(A, midpoint(A, D)))
By altitude_definition on D, E, G, g we get g == altitude(D, E, G)
By altitude_definition on G, B, A, Line(E, G) we get Line(E, G) == altitude(G, A, B)
By isosceles_triangle_properties on center(e), C, B we get distance(B, center(e)) == distance(C, center(e)), angle(C, B, center(e)) == angle(center(e), C, B) mod 360
By altitude_definition on B, G, E, f we get f == altitude(B, E, G)
By anti_similar_triangle_basic_properties on B, E, G, A, E, G we get not_collinear(B, E, G), not_collinear(A, E, G), angle(B, E, G) == 0 - angle(A, E, G) mod 360, angle(E, G, B) == 0 - angle(E, G, A) mod 360, angle(G, B, E) == 0 - angle(G, A, E) mod 360, log(distance(A, E)) + log(distance(E, G)) == log(distance(B, E)) + log(distance(E, G)), log(distance(E, G)) + log(distance(A, G)) == log(distance(E, G)) + log(distance(B, G)), log(distance(A, G)) + log(distance(B, E)) == log(distance(B, G)) + log(distance(A, E))
By altitude_definition on G, D, C, Line(E, G) we get Line(E, G) == altitude(G, C, D)
By altitude_definition on A, F, E, Line(A, D) we get Line(A, D) == altitude(A, E, F)
By isosceles_triangle_properties on center(e), B, G we get distance(B, center(e)) == distance(G, center(e)), angle(B, G, center(e)) == angle(center(e), B, G) mod 360
By concyclic_definition_1 on A, D, G, E we get Circle(A, D, G) == Circle(D, E, G)
By isosceles_triangle_properties on center(e), C, E we get distance(C, center(e)) == distance(E, center(e)), angle(C, E, center(e)) == angle(center(e), C, E) mod 360
By isosceles_triangle_properties on center(e), E, G we get distance(E, center(e)) == distance(G, center(e)), angle(E, G, center(e)) == angle(center(e), E, G) mod 360
By radical_axis_definition_v0 on midpoint(A, D), d, c we get power_of_a_point(midpoint(A, D), c) == power_of_a_point(midpoint(A, D), d)
By isosceles_triangle_properties on center(e), E, B we get distance(B, center(e)) == distance(E, center(e)), angle(E, B, center(e)) == angle(center(e), E, B) mod 360
By isosceles_triangle_properties on center(k), F, D we get distance(D, center(k)) == distance(F, center(k)), angle(F, D, center(k)) == angle(center(k), F, D) mod 360
By isosceles_triangle_properties on center(e), E, C we get distance(C, center(e)) == distance(E, center(e)), angle(E, C, center(e)) == angle(center(e), E, C) mod 360
By isosceles_triangle_properties on center(e), B, E we get distance(B, center(e)) == distance(E, center(e)), angle(B, E, center(e)) == angle(center(e), B, E) mod 360
By isosceles_triangle_properties on center(k), D, F we get distance(D, center(k)) == distance(F, center(k)), angle(D, F, center(k)) == angle(center(k), D, F) mod 360
By concyclic_definition_1 on E, G, A, D we get Circle(A, D, G) == Circle(A, E, G)
By isosceles_triangle_properties on center(k), E, D we get distance(D, center(k)) == distance(E, center(k)), angle(E, D, center(k)) == angle(center(k), E, D) mod 360
By isosceles_triangle_properties on center(k), E, F we get distance(E, center(k)) == distance(F, center(k)), angle(E, F, center(k)) == angle(center(k), E, F) mod 360
By isosceles_triangle_properties on center(k), D, E we get distance(D, center(k)) == distance(E, center(k)), angle(D, E, center(k)) == angle(center(k), D, E) mod 360
By isosceles_triangle_properties on center(k), F, C we get distance(C, center(k)) == distance(F, center(k)), angle(F, C, center(k)) == angle(center(k), F, C) mod 360
By altitude_definition on D, F, E, Line(A, D) we get Line(A, D) == altitude(D, E, F)
By isosceles_triangle_properties on center(k), C, E we get distance(C, center(k)) == distance(E, center(k)), angle(C, E, center(k)) == angle(center(k), C, E) mod 360
By isosceles_triangle_properties on center(e), G, C we get distance(C, center(e)) == distance(G, center(e)), angle(G, C, center(e)) == angle(center(e), G, C) mod 360
By altitude_definition on A, E, G, f we get f == altitude(A, E, G)
By altitude_definition on C, E, G, g we get g == altitude(C, E, G)
By isosceles_triangle_properties on center(e), G, B we get distance(B, center(e)) == distance(G, center(e)), angle(G, B, center(e)) == angle(center(e), G, B) mod 360
By isosceles_triangle_properties on center(k), F, E we get distance(E, center(k)) == distance(F, center(k)), angle(F, E, center(k)) == angle(center(k), F, E) mod 360
By isosceles_triangle_properties on center(k), E, C we get distance(C, center(k)) == distance(E, center(k)), angle(E, C, center(k)) == angle(center(k), E, C) mod 360
By isosceles_triangle_properties on center(e), C, G we get distance(C, center(e)) == distance(G, center(e)), angle(C, G, center(e)) == angle(center(e), C, G) mod 360
By isosceles_triangle_properties on center(e), G, E we get distance(E, center(e)) == distance(G, center(e)), angle(G, E, center(e)) == angle(center(e), G, E) mod 360
By collinear_definition on midpoint(A, D), E, H we get E in Line(H, midpoint(A, D)), H in Line(E, midpoint(A, D)), Line(E, midpoint(A, D)) == Line(H, midpoint(A, D)), 0 == 2 * angle(E, midpoint(A, D), H) mod 360
By altitude_definition on E, B, A, Line(E, G) we get Line(E, G) == altitude(E, A, B)
By isosceles_triangle_properties on center(k), C, F we get distance(C, center(k)) == distance(F, center(k)), angle(C, F, center(k)) == angle(center(k), C, F) mod 360
By altitude_definition on F, D, A, Line(E, F) we get Line(E, F) == altitude(F, A, D)
By isosceles_triangle_properties on center(k), C, D we get distance(C, center(k)) == distance(D, center(k)), angle(C, D, center(k)) == angle(center(k), C, D) mod 360
By power_of_a_point_definition on midpoint(A, D), A, D, c we get log(power_of_a_point(midpoint(A, D), c)) == log(distance(A, midpoint(A, D))) + log(distance(D, midpoint(A, D)))
By power_of_a_point_tangent on A, E, Circle(D, E, H) we get 2 * log(distance(A, E)) == log(power_of_a_point(A, Circle(D, E, H)))
By power_of_a_point_definition on G, B, D, c we get log(power_of_a_point(G, c)) == log(distance(B, G)) + log(distance(D, G))
By power_of_a_point_tangent on D, E, Circle(A, E, H) we get 2 * log(distance(D, E)) == log(power_of_a_point(D, Circle(A, E, H)))
By perpendicular_bisector_sufficient_conditions on C, D, E, center(k) we get Line(E, center(k)) == perpendicular_bisector(C, D)
By power_of_a_point_definition on D, G, B, e we get log(power_of_a_point(D, e)) == log(distance(D, G)) + log(distance(B, D))
By perpendicular_bisector_sufficient_conditions on C, B, E, center(e) we get Line(E, center(e)) == perpendicular_bisector(B, C)
By power_of_a_point_tangent on F, D, Circle(B, D, E) we get 2 * log(distance(D, F)) == log(power_of_a_point(F, Circle(B, D, E)))
By perpendicular_line_definition on E, Line(E, center(k)), g we get Line(E, center(k)) == perpendicular_line(E, g)
By radical_axis_of_intersecting_circles_v0 on E, G, e, d we get Line(E, G) == radical_axis(d, e)
By line_definition on midpoint(A, D), F, Line(E, F) we get Line(E, F) == Line(F, midpoint(A, D))
By concyclic_sufficient_conditions_v1 on F, G, D, center(k) we get concyclic(D, F, G, center(k))
By circle_intersection_is_on_radical_axis on G, d, e we get G in radical_axis(d, e)
By line_definition on F, H, Line(E, F) we get Line(E, F) == Line(F, H)
By angles_on_chord_v0 on D, G, E, A, d we get angle(D, A, G) == angle(D, E, G) mod 360
By angles_on_chord_v1 on G, D, E, A, d we get angle(G, A, D) == angle(G, E, D) mod 360
By perpendicular_line_definition on line_intersection(f, Line(E, G)), f, Line(E, G) we get f == perpendicular_line(line_intersection(f, Line(E, G)), Line(E, G))
By median_definition on E, C, D, Line(E, center(k)) we get median(E, C, D) == Line(E, center(k))
By median_definition on F, D, A, Line(E, F) we get Line(E, F) == median(F, A, D)
By perpendicular_line_definition on line_intersection(g, Line(E, G)), Line(E, G), g we get Line(E, G) == perpendicular_line(line_intersection(g, Line(E, G)), g)
By median_definition on E, C, B, Line(E, center(e)) we get median(E, B, C) == Line(E, center(e))
By perpendicular_line_definition on E, Line(E, center(e)), Line(B, C) we get Line(E, center(e)) == perpendicular_line(E, Line(B, C))
By perpendicular_line_definition on D, g, Line(E, center(k)) we get g == perpendicular_line(D, Line(E, center(k)))
By perpendicular_line_definition on line_intersection(g, Line(E, G)), Line(E, G), f we get Line(E, G) == perpendicular_line(line_intersection(g, Line(E, G)), f)
By perpendicular_line_definition on line_intersection(g, Line(E, G)), g, Line(E, G) we get g == perpendicular_line(line_intersection(g, Line(E, G)), Line(E, G))
By perpendicular_line_definition on center(k), Line(E, center(k)), g we get Line(E, center(k)) == perpendicular_line(center(k), g)
By perpendicular_line_definition on line_intersection(f, Line(E, G)), Line(E, G), f we get Line(E, G) == perpendicular_line(line_intersection(f, Line(E, G)), f)
By perpendicular_line_definition on line_intersection(g, Line(E, G)), g, Line(E, center(k)) we get g == perpendicular_line(line_intersection(g, Line(E, G)), Line(E, center(k)))
By perpendicular_line_definition on line_intersection(f, Line(E, G)), Line(E, G), g we get Line(E, G) == perpendicular_line(line_intersection(f, Line(E, G)), g)
By perpendicular_line_definition on B, Line(B, C), Line(E, center(e)) we get Line(B, C) == perpendicular_line(B, Line(E, center(e)))
By perpendicular_line_definition on C, Line(B, C), Line(E, center(e)) we get Line(B, C) == perpendicular_line(C, Line(E, center(e)))
By perpendicular_line_definition on C, g, Line(E, center(k)) we get g == perpendicular_line(C, Line(E, center(k)))
By perpendicular_line_definition on center(e), Line(E, center(e)), Line(B, C) we get Line(E, center(e)) == perpendicular_line(center(e), Line(B, C))
By circle_radius_v0_r on G, d we get radius(d) == distance(G, center(d))
By angle_to_center on E, D, G, d we get 2 * angle(E, D, G) == angle(E, center(d), G) mod 360
By angle_to_center on G, D, A, d we get 2 * angle(G, D, A) == angle(G, center(d), A) mod 360
By angle_to_center on G, A, D, d we get 2 * angle(G, A, D) == angle(G, center(d), D) mod 360
By perpendicular_direction_conditions_v0 on A, midpoint(A, D), G, center(e) we get perpendicular(Line(G, center(e)), Line(A, midpoint(A, D)))
By angle_to_center on A, E, G, d we get 2 * angle(A, E, G) == angle(A, center(d), G) mod 360
By angle_to_center on G, E, D, d we get 2 * angle(G, E, D) == angle(G, center(d), D) mod 360
By angle_to_center on G, A, E, d we get 2 * angle(G, A, E) == angle(G, center(d), E) mod 360
By angle_to_center on G, E, A, d we get 2 * angle(G, E, A) == angle(G, center(d), A) mod 360
By angle_to_center on D, E, G, d we get 2 * angle(D, E, G) == angle(D, center(d), G) mod 360
By angle_to_center on E, A, G, d we get 2 * angle(E, A, G) == angle(E, center(d), G) mod 360
By collinear_and_not_between_implies_orientation on midpoint(A, D), C, G, F we get orientation(C, midpoint(A, D), G) == orientation(F, midpoint(A, D), G) mod 360
By angle_to_center on G, D, E, d we get 2 * angle(G, D, E) == angle(G, center(d), E) mod 360
By same_angle_v0 on D, midpoint(A, D), A, B we get angle(A, D, B) == angle(midpoint(A, D), D, B) mod 360
By angle_to_center on A, D, G, d we get 2 * angle(A, D, G) == angle(A, center(d), G) mod 360
By between_implies_orientation on midpoint(A, D), A, F, C we get orientation(A, F, midpoint(A, D)) == orientation(C, midpoint(A, D), F) mod 360, orientation(A, C, midpoint(A, D)) == orientation(A, F, midpoint(A, D)) mod 360
By angle_to_center on D, A, G, d we get 2 * angle(D, A, G) == angle(D, center(d), G) mod 360
By same_angle_v1 on E, F, H, B we get angle(F, E, B) == angle(H, E, B) mod 360
By same_angle_v0 on A, D, midpoint(A, D), C we get angle(D, A, C) == angle(midpoint(A, D), A, C) mod 360
By same_angle_v0 on E, H, midpoint(A, D), A we get angle(H, E, A) == angle(midpoint(A, D), E, A) mod 360
By same_angle_v1 on A, G, C, midpoint(A, D) we get angle(C, A, midpoint(A, D)) == angle(G, A, midpoint(A, D)) mod 360
By same_angle_v1 on D, midpoint(A, D), A, G we get angle(A, D, G) == angle(midpoint(A, D), D, G) mod 360
By perpendicular_direction_conditions_v0 on A, D, G, center(e) we get perpendicular(Line(A, D), Line(G, center(e)))
By same_angle_v3 on H, E, midpoint(A, D), D we get angle(E, H, D) == angle(midpoint(A, D), H, D) + 180 mod 360
By perpendicular_direction_conditions_v0 on center(k), E, A, B we get perpendicular(Line(A, B), Line(E, center(k)))
By collinear_and_not_between_implies_orientation on midpoint(A, D), F, C, A we get orientation(A, midpoint(A, D), C) == orientation(C, F, midpoint(A, D)) mod 360
By same_angle_v0 on D, A, midpoint(A, D), H we get angle(A, D, H) == angle(midpoint(A, D), D, H) mod 360
By same_angle_v2 on H, midpoint(A, D), E, A we get angle(E, H, A) + 180 == angle(midpoint(A, D), H, A) mod 360
By same_angle_v0 on D, A, midpoint(A, D), E we get angle(A, D, E) == angle(midpoint(A, D), D, E) mod 360
By same_angle_v1 on E, H, F, G we get angle(F, E, G) == angle(H, E, G) mod 360
By perpendicular_direction_conditions_v0 on center(e), G, midpoint(A, D), D we get perpendicular(Line(G, center(e)), Line(D, midpoint(A, D)))
By same_angle_v1 on E, midpoint(A, D), H, D we get angle(H, E, D) == angle(midpoint(A, D), E, D) mod 360
By same_angle_v1 on A, D, midpoint(A, D), B we get angle(D, A, B) == angle(midpoint(A, D), A, B) mod 360
By between_implies_orientation on midpoint(A, D), G, D, B we get orientation(B, midpoint(A, D), D) == orientation(D, midpoint(A, D), G) mod 360, orientation(B, midpoint(A, D), G) == orientation(D, midpoint(A, D), G) mod 360
By same_angle_v0 on A, D, midpoint(A, D), G we get angle(D, A, G) == angle(midpoint(A, D), A, G) mod 360
By same_angle_v1 on E, F, H, C we get angle(F, E, C) == angle(H, E, C) mod 360
By same_angle_v1 on A, midpoint(A, D), D, H we get angle(D, A, H) == angle(midpoint(A, D), A, H) mod 360
By same_angle_v1 on A, midpoint(A, D), D, E we get angle(D, A, E) == angle(midpoint(A, D), A, E) mod 360
By same_angle_v1 on D, A, midpoint(A, D), C we get angle(A, D, C) == angle(midpoint(A, D), D, C) mod 360
By same_angle_v3 on D, G, B, midpoint(A, D) we get angle(G, D, midpoint(A, D)) == angle(B, D, midpoint(A, D)) + 180 mod 360
By between_imply_not_between on B, midpoint(B, C), C we get collinear_and_not_between(C, B, midpoint(B, C))
By collinear_and_not_between_implies_orientation on midpoint(A, D), A, G, F we get orientation(A, midpoint(A, D), G) == orientation(F, midpoint(A, D), G) mod 360
By collinear_and_not_between_implies_orientation on F, midpoint(A, D), D, A we get orientation(A, F, D) == orientation(D, midpoint(A, D), F) mod 360
By between_implies_orientation on midpoint(A, D), F, C, G we get orientation(C, G, midpoint(A, D)) == orientation(C, midpoint(A, D), F) mod 360, orientation(C, midpoint(A, D), F) == orientation(F, G, midpoint(A, D)) mod 360
By between_implies_orientation on midpoint(A, D), G, C, F we get orientation(C, F, midpoint(A, D)) == orientation(C, midpoint(A, D), G) mod 360, orientation(C, midpoint(A, D), G) == orientation(F, midpoint(A, D), G) mod 360
By between_implies_orientation on midpoint(A, D), A, F, G we get orientation(A, F, midpoint(A, D)) == orientation(F, G, midpoint(A, D)) mod 360, orientation(A, F, midpoint(A, D)) == orientation(A, G, midpoint(A, D)) mod 360
By between_implies_orientation on F, A, midpoint(A, D), D we get orientation(A, midpoint(A, D), F) == orientation(D, F, midpoint(A, D)) mod 360, orientation(A, D, F) == orientation(A, midpoint(A, D), F) mod 360
By between_implies_orientation on midpoint(A, D), B, D, G we get orientation(B, D, midpoint(A, D)) == orientation(D, G, midpoint(A, D)) mod 360, orientation(B, D, midpoint(A, D)) == orientation(B, G, midpoint(A, D)) mod 360
By between_imply_not_between on C, midpoint(B, C), B we get collinear_and_not_between(B, C, midpoint(B, C))
By between_implies_orientation on F, D, midpoint(A, D), A we get orientation(A, F, midpoint(A, D)) == orientation(D, midpoint(A, D), F) mod 360, orientation(A, F, D) == orientation(D, midpoint(A, D), F) mod 360
By between_implies_orientation on midpoint(A, D), C, F, A we get orientation(A, midpoint(A, D), F) == orientation(C, F, midpoint(A, D)) mod 360, orientation(A, midpoint(A, D), C) == orientation(C, F, midpoint(A, D)) mod 360
By between_implies_orientation on midpoint(A, D), G, F, A we get orientation(A, midpoint(A, D), F) == orientation(F, midpoint(A, D), G) mod 360, orientation(A, midpoint(A, D), G) == orientation(F, midpoint(A, D), G) mod 360
By between_imply_not_between on B, D, G we get collinear_and_not_between(D, B, G)
By between_imply_not_between on D, midpoint(C, D), C we get collinear_and_not_between(C, D, midpoint(C, D))
By between_imply_not_between on C, midpoint(C, D), D we get collinear_and_not_between(D, C, midpoint(C, D))
By between_imply_not_between on G, D, B we get collinear_and_not_between(B, G, D)
By parallel_line_definition on line_intersection(g, Line(E, G)), g, f we get g == parallel_line(line_intersection(g, Line(E, G)), f)
By parallel_line_definition on line_intersection(f, Line(E, G)), f, g we get f == parallel_line(line_intersection(f, Line(E, G)), g)
By same_angle_v0 on F, H, E, D we get angle(E, F, D) == angle(H, F, D) mod 360
By same_angle_v0 on F, H, E, G we get angle(E, F, G) == angle(H, F, G) mod 360
By same_angle_v0 on F, H, E, C we get angle(E, F, C) == angle(H, F, C) mod 360
By same_angle_v1 on F, E, H, A we get angle(E, F, A) == angle(H, F, A) mod 360
By divide_by_2_mod_180_v3 on B, G, A, D, H, midpoint(A, D) we get angle(B, G, A) == angle(D, H, midpoint(A, D)) + 180 mod 360
By same_angle_v3 on H, F, E, A we get angle(F, H, A) == angle(E, H, A) + 180 mod 360
By same_angle_v2 on H, E, F, D we get angle(E, H, D) == angle(F, H, D) + 180 mod 360
By divide_by_2_mod_180_v3 on D, C, F, midpoint(A, D), E, A we get angle(D, C, F) == angle(midpoint(A, D), E, A) + 180 mod 360
By divide_by_2_mod_180_v0 on B, A, F, midpoint(A, D), E, A we get angle(B, A, F) == angle(midpoint(A, D), E, A) mod 360
By asa_anti_congruence on E, midpoint(A, D), A, E, midpoint(A, D), D we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By divide_by_2_mod_180_v0 on B, A, F, D, E, midpoint(A, D) we get angle(B, A, F) == angle(D, E, midpoint(A, D)) mod 360
By divide_by_2_mod_180_v0 on H, E, A, D, E, midpoint(A, D) we get angle(H, E, A) == angle(D, E, midpoint(A, D)) mod 360
By tangent_point_is_unique on D, line_circle_tangent_point(Line(D, F), Circle(B, D, E)), Circle(B, D, E), Line(D, F) we get D == line_circle_tangent_point(Line(D, F), Circle(B, D, E))
By divide_by_2_mod_180_v0 on D, C, G, D, E, midpoint(A, D) we get angle(D, C, G) == angle(D, E, midpoint(A, D)) mod 360
By in_imply_collinear on line_intersection(g, Line(E, G)), G, E we get collinear(E, G, line_intersection(g, Line(E, G)))
By divide_by_2_mod_180_v3 on D, G, C, D, H, midpoint(A, D) we get angle(D, G, C) == angle(D, H, midpoint(A, D)) + 180 mod 360
By divide_by_2_mod_180_v2 on D, E, midpoint(A, D), D, C, F we get angle(D, C, F) + 180 == angle(D, E, midpoint(A, D)) mod 360
By divide_by_2_mod_180_v0 on D, B, A, D, E, midpoint(A, D) we get angle(D, B, A) == angle(D, E, midpoint(A, D)) mod 360
By in_imply_collinear on F, H, midpoint(A, D) we get collinear(F, H, midpoint(A, D))
By divide_by_2_mod_180_v1 on A, E, midpoint(A, D), F, A, B we get angle(F, A, B) == angle(A, E, midpoint(A, D)) mod 360
By sss_anti_congruence_v0 on H, A, midpoint(A, D), H, D, midpoint(A, D) we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By similar_triangle_basic_properties on A, G, B, E, H, D we get not_collinear(A, B, G), not_collinear(D, E, H), angle(A, G, B) == angle(E, H, D) mod 360, angle(G, B, A) == angle(H, D, E) mod 360, angle(B, A, G) == angle(D, E, H) mod 360, log(distance(A, G)) + log(distance(D, H)) == log(distance(E, H)) + log(distance(B, G)), log(distance(B, G)) + log(distance(D, E)) == log(distance(D, H)) + log(distance(A, B)), log(distance(A, B)) + log(distance(E, H)) == log(distance(D, E)) + log(distance(A, G))
By sss_anti_congruence_v1 on E, D, midpoint(A, D), E, A, midpoint(A, D) we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By probably_between_and_collinear_implies_between on F, H, E we get between(E, H, F)
By divide_by_2_mod_180_v2 on F, C, D, midpoint(A, D), E, D we get angle(F, C, D) == angle(midpoint(A, D), E, D) + 180 mod 360
By sss_anti_similarity_v0 on G, D, E, G, C, E we get anti_similar_triangles(C, E, G, D, E, G)
By divide_by_2_mod_180_v1 on midpoint(A, D), E, D, F, A, B we get angle(F, A, B) == angle(midpoint(A, D), E, D) mod 360
By divide_by_2_mod_180_v3 on midpoint(A, D), H, D, F, G, D we get angle(F, G, D) + 180 == angle(midpoint(A, D), H, D) mod 360
By divide_by_2_mod_180_v2 on midpoint(A, D), H, A, B, G, A we get angle(B, G, A) + 180 == angle(midpoint(A, D), H, A) mod 360
By sss_anti_similarity_v1 on G, C, E, G, D, E we get anti_similar_triangles(C, E, G, D, E, G)
By divide_by_2_mod_180_v1 on midpoint(A, D), E, D, A, E, H we get angle(A, E, H) == angle(midpoint(A, D), E, D) mod 360
By divide_by_2_mod_180_v1 on A, E, midpoint(A, D), H, A, E we get angle(H, A, E) == angle(A, E, midpoint(A, D)) mod 360
By asa_anti_congruence on E, midpoint(A, D), D, E, midpoint(A, D), A we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By divide_by_2_mod_180_v3 on A, H, midpoint(A, D), A, G, D we get angle(A, G, D) + 180 == angle(A, H, midpoint(A, D)) mod 360
By divide_by_2_mod_180_v3 on midpoint(A, D), H, D, E, H, D we get angle(E, H, D) + 180 == angle(midpoint(A, D), H, D) mod 360
By in_imply_collinear on F, midpoint(A, D), E we get collinear(E, F, midpoint(A, D))
By in_imply_collinear on line_intersection(f, Line(E, G)), A, B we get collinear(A, B, line_intersection(f, Line(E, G)))
By sss_anti_congruence_v0 on midpoint(A, D), D, H, midpoint(A, D), A, H we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By reverse_direction on midpoint(A, D), H we get 180 == direction(midpoint(A, D), H) - direction(H, midpoint(A, D)) mod 360
By sss_anti_similarity_v1 on D, F, A, A, F, D we get anti_similar_triangles(A, D, F, D, A, F)
By divide_by_2_mod_180_v0 on E, A, H, D, E, midpoint(A, D) we get angle(E, A, H) == angle(D, E, midpoint(A, D)) mod 360
By divide_by_2_mod_180_v3 on E, H, A, D, H, midpoint(A, D) we get angle(E, H, A) == angle(D, H, midpoint(A, D)) + 180 mod 360
By divide_by_2_mod_180_v1 on A, B, D, A, E, midpoint(A, D) we get angle(A, B, D) == angle(A, E, midpoint(A, D)) mod 360
By divide_by_2_mod_180_v3 on midpoint(A, D), H, D, F, G, B we get angle(F, G, B) + 180 == angle(midpoint(A, D), H, D) mod 360
By divide_by_2_mod_180_v2 on D, H, midpoint(A, D), B, G, F we get angle(B, G, F) + 180 == angle(D, H, midpoint(A, D)) mod 360
By divide_by_2_mod_180_v0 on midpoint(A, D), E, A, G, B, A we get angle(G, B, A) == angle(midpoint(A, D), E, A) mod 360
By divide_by_2_mod_180_v3 on D, H, E, midpoint(A, D), H, A we get angle(D, H, E) == angle(midpoint(A, D), H, A) + 180 mod 360
By sss_anti_similarity_v0 on E, C, G, E, D, G we get anti_similar_triangles(C, E, G, D, E, G)
By divide_by_2_mod_180_v2 on D, H, midpoint(A, D), D, G, F we get angle(D, G, F) + 180 == angle(D, H, midpoint(A, D)) mod 360
By divide_by_2_mod_180_v1 on A, E, D, A, H, midpoint(A, D) we get angle(A, E, D) == angle(A, H, midpoint(A, D)) mod 360
By divide_by_2_mod_180_v1 on midpoint(A, D), E, D, H, A, E we get angle(H, A, E) == angle(midpoint(A, D), E, D) mod 360
By divide_by_2_mod_180_v3 on A, H, midpoint(A, D), C, G, D we get angle(C, G, D) + 180 == angle(A, H, midpoint(A, D)) mod 360
By divide_by_2_mod_180_v0 on midpoint(A, D), H, A, B, E, C we get angle(B, E, C) == angle(midpoint(A, D), H, A) mod 360
By divide_by_2_mod_180_v3 on B, D, C, midpoint(A, D), E, A we get angle(B, D, C) == angle(midpoint(A, D), E, A) + 180 mod 360
By divide_by_2_mod_180_v1 on A, B, D, midpoint(A, D), E, D we get angle(A, B, D) == angle(midpoint(A, D), E, D) mod 360
By divide_by_2_mod_180_v0 on B, E, C, D, H, midpoint(A, D) we get angle(B, E, C) == angle(D, H, midpoint(A, D)) mod 360
By divide_by_2_mod_180_v0 on D, E, midpoint(A, D), G, B, A we get angle(G, B, A) == angle(D, E, midpoint(A, D)) mod 360
By divide_by_2_mod_180_v1 on C, D, G, A, E, midpoint(A, D) we get angle(C, D, G) == angle(A, E, midpoint(A, D)) mod 360
By divide_by_2_mod_180_v0 on D, E, midpoint(A, D), D, E, H we get angle(D, E, H) == angle(D, E, midpoint(A, D)) mod 360
By divide_by_2_mod_180_v1 on C, D, G, midpoint(A, D), E, D we get angle(C, D, G) == angle(midpoint(A, D), E, D) mod 360
By sss_anti_congruence_v0 on H, A, midpoint(A, D), H, D, midpoint(A, D) we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sss_anti_congruence_v1 on A, D, F, D, A, F we get anti_congruent_triangles(A, D, F, D, A, F)
By divide_by_2_mod_180_v2 on midpoint(A, D), H, A, D, H, E we get angle(D, H, E) + 180 == angle(midpoint(A, D), H, A) mod 360
By divide_by_2_mod_180_v2 on D, H, midpoint(A, D), D, G, C we get angle(D, G, C) + 180 == angle(D, H, midpoint(A, D)) mod 360
By divide_by_2_mod_180_v2 on C, D, B, A, E, midpoint(A, D) we get angle(C, D, B) == angle(A, E, midpoint(A, D)) + 180 mod 360
By divide_by_2_mod_180_v2 on A, H, E, A, H, midpoint(A, D) we get angle(A, H, E) == angle(A, H, midpoint(A, D)) + 180 mod 360
By divide_by_2_mod_180_v2 on A, G, B, midpoint(A, D), H, D we get angle(A, G, B) == angle(midpoint(A, D), H, D) + 180 mod 360
By similar_triangle_basic_properties on E, D, H, A, B, G we get not_collinear(D, E, H), not_collinear(A, B, G), angle(A, B, G) == angle(E, D, H) mod 360, angle(B, G, A) == angle(D, H, E) mod 360, angle(G, A, B) == angle(H, E, D) mod 360, log(distance(A, B)) + log(distance(D, H)) == log(distance(D, E)) + log(distance(B, G)), log(distance(B, G)) + log(distance(E, H)) == log(distance(D, H)) + log(distance(A, G)), log(distance(A, G)) + log(distance(D, E)) == log(distance(E, H)) + log(distance(A, B))
By sss_anti_congruence_v0 on E, A, midpoint(A, D), E, D, midpoint(A, D) we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By divide_by_2_mod_180_v1 on A, E, H, A, E, midpoint(A, D) we get angle(A, E, H) == angle(A, E, midpoint(A, D)) mod 360
By in_imply_collinear on line_circle_tangent_point(Line(D, E), Circle(A, E, H)), D, E we get collinear(D, E, line_circle_tangent_point(Line(D, E), Circle(A, E, H)))
By in_imply_concyclic on H, D, E, line_circle_tangent_point(Line(A, E), Circle(D, E, H)) we get concyclic(D, E, H, line_circle_tangent_point(Line(A, E), Circle(D, E, H)))
By divide_by_2_mod_180_v0 on D, E, F, D, E, midpoint(A, D) we get angle(D, E, F) == angle(D, E, midpoint(A, D)) mod 360
By sss_anti_congruence_v1 on H, midpoint(A, D), A, H, midpoint(A, D), D we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By divide_by_2_mod_180_v0 on D, E, A, midpoint(A, D), H, A we get angle(D, E, A) == angle(midpoint(A, D), H, A) mod 360
By sss_anti_congruence_v1 on D, midpoint(A, D), E, A, midpoint(A, D), E we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By in_imply_collinear on line_circle_tangent_point(Line(D, F), Circle(B, D, E)), D, F we get collinear(D, F, line_circle_tangent_point(Line(D, F), Circle(B, D, E)))
By in_imply_collinear on line_intersection(g, Line(E, G)), D, C we get collinear(C, D, line_intersection(g, Line(E, G)))
By in_imply_collinear on line_circle_tangent_point(Line(A, E), Circle(D, E, H)), A, E we get collinear(A, E, line_circle_tangent_point(Line(A, E), Circle(D, E, H)))
By divide_by_2_mod_180_v2 on A, C, D, A, E, midpoint(A, D) we get angle(A, C, D) == angle(A, E, midpoint(A, D)) + 180 mod 360
By divide_by_2_mod_180_v0 on D, E, midpoint(A, D), B, A, C we get angle(B, A, C) == angle(D, E, midpoint(A, D)) mod 360
By divide_by_2_mod_180_v0 on midpoint(A, D), E, A, F, E, A we get angle(F, E, A) == angle(midpoint(A, D), E, A) mod 360
By divide_by_2_mod_180_v2 on A, G, D, A, H, midpoint(A, D) we get angle(A, G, D) == angle(A, H, midpoint(A, D)) + 180 mod 360
By divide_by_2_mod_180_v1 on A, B, G, midpoint(A, D), E, D we get angle(A, B, G) == angle(midpoint(A, D), E, D) mod 360
By divide_by_2_mod_180_v1 on A, E, midpoint(A, D), A, E, F we get angle(A, E, F) == angle(A, E, midpoint(A, D)) mod 360
By divide_by_2_mod_180_v2 on C, G, D, midpoint(A, D), H, D we get angle(C, G, D) == angle(midpoint(A, D), H, D) + 180 mod 360
By sss_anti_similarity_v1 on G, C, E, G, D, E we get anti_similar_triangles(C, E, G, D, E, G)
By divide_by_2_mod_180_v2 on midpoint(A, D), E, A, D, C, F we get angle(D, C, F) + 180 == angle(midpoint(A, D), E, A) mod 360
By divide_by_2_mod_180_v1 on H, E, D, A, E, midpoint(A, D) we get angle(H, E, D) == angle(A, E, midpoint(A, D)) mod 360
By divide_by_2_mod_180_v1 on midpoint(A, D), E, D, C, A, B we get angle(C, A, B) == angle(midpoint(A, D), E, D) mod 360
By in_imply_collinear on line_intersection(f, Line(E, G)), E, G we get collinear(E, G, line_intersection(f, Line(E, G)))
By sas_anti_congruence on A, F, D, D, F, A we get anti_congruent_triangles(A, D, F, D, A, F)
By divide_by_2_mod_180_v0 on G, D, C, midpoint(A, D), E, A we get angle(G, D, C) == angle(midpoint(A, D), E, A) mod 360
By sas_anti_similarity on E, G, D, E, G, C we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_similarity_v1 on A, D, F, D, A, F we get anti_similar_triangles(A, D, F, D, A, F)
By divide_by_2_mod_180_v2 on A, G, B, A, H, midpoint(A, D) we get angle(A, G, B) == angle(A, H, midpoint(A, D)) + 180 mod 360
By aa_anti_similarity on D, midpoint(A, D), H, A, midpoint(A, D), H we get anti_similar_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By divide_by_2_mod_180_v0 on G, D, C, D, E, midpoint(A, D) we get angle(G, D, C) == angle(D, E, midpoint(A, D)) mod 360
By divide_by_2_mod_180_v2 on F, G, B, midpoint(A, D), H, D we get angle(F, G, B) == angle(midpoint(A, D), H, D) + 180 mod 360
By divide_by_2_mod_180_v0 on D, E, midpoint(A, D), H, D, E we get angle(H, D, E) == angle(D, E, midpoint(A, D)) mod 360
By divide_by_2_mod_180_v0 on midpoint(A, D), E, A, D, E, F we get angle(D, E, F) == angle(midpoint(A, D), E, A) mod 360
By in_imply_collinear on midpoint(C, D), center(k), E we get collinear(E, center(k), midpoint(C, D))
By sss_anti_congruence_v1 on D, midpoint(A, D), E, A, midpoint(A, D), E we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By sss_anti_congruence_v1 on H, midpoint(A, D), A, H, midpoint(A, D), D we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By in_imply_collinear on midpoint(B, C), center(e), E we get collinear(E, center(e), midpoint(B, C))
By divide_by_2_mod_180_v3 on A, H, midpoint(A, D), C, G, B we get angle(C, G, B) + 180 == angle(A, H, midpoint(A, D)) mod 360
By divide_by_2_mod_180_v1 on A, E, midpoint(A, D), F, E, D we get angle(F, E, D) == angle(A, E, midpoint(A, D)) mod 360
By divide_by_2_mod_180_v2 on F, G, D, midpoint(A, D), H, D we get angle(F, G, D) == angle(midpoint(A, D), H, D) + 180 mod 360
By sss_anti_congruence_v0 on A, F, D, D, F, A we get anti_congruent_triangles(A, D, F, D, A, F)
By divide_by_2_mod_180_v1 on midpoint(A, D), E, D, G, C, D we get angle(G, C, D) == angle(midpoint(A, D), E, D) mod 360
By sas_anti_similarity on E, C, G, E, D, G we get anti_similar_triangles(C, E, G, D, E, G)
By divide_by_2_mod_180_v3 on A, H, midpoint(A, D), A, G, B we get angle(A, G, B) + 180 == angle(A, H, midpoint(A, D)) mod 360
By tangent_point_is_unique on E, line_circle_tangent_point(Line(A, E), Circle(D, E, H)), Circle(D, E, H), Line(A, E) we get E == line_circle_tangent_point(Line(A, E), Circle(D, E, H))
By divide_by_2_mod_180_v1 on midpoint(A, D), H, D, C, E, B we get angle(C, E, B) == angle(midpoint(A, D), H, D) mod 360
By sss_anti_congruence_v1 on E, D, midpoint(A, D), E, A, midpoint(A, D) we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By tangent_point_is_unique on E, line_circle_tangent_point(Line(D, E), Circle(A, E, H)), Circle(A, E, H), Line(D, E) we get E == line_circle_tangent_point(Line(D, E), Circle(A, E, H))
By divide_by_2_mod_180_v3 on midpoint(A, D), H, D, A, G, D we get angle(A, G, D) + 180 == angle(midpoint(A, D), H, D) mod 360
By divide_by_2_mod_180_v2 on D, H, midpoint(A, D), B, G, C we get angle(B, G, C) + 180 == angle(D, H, midpoint(A, D)) mod 360
By divide_by_2_mod_180_v3 on A, H, midpoint(A, D), E, H, D we get angle(E, H, D) + 180 == angle(A, H, midpoint(A, D)) mod 360
By divide_by_2_mod_180_v0 on D, E, H, midpoint(A, D), E, A we get angle(D, E, H) == angle(midpoint(A, D), E, A) mod 360
By sss_anti_similarity_v0 on D, E, G, C, E, G we get anti_similar_triangles(C, E, G, D, E, G)
By divide_by_2_mod_180_v0 on midpoint(A, D), E, A, D, B, A we get angle(D, B, A) == angle(midpoint(A, D), E, A) mod 360
By similar_triangle_basic_properties on B, A, G, D, C, G we get not_collinear(A, B, G), not_collinear(C, D, G), angle(B, A, G) == angle(D, C, G) mod 360, angle(A, G, B) == angle(C, G, D) mod 360, angle(G, B, A) == angle(G, D, C) mod 360, log(distance(A, B)) + log(distance(C, G)) == log(distance(C, D)) + log(distance(A, G)), log(distance(A, G)) + log(distance(D, G)) == log(distance(C, G)) + log(distance(B, G)), log(distance(B, G)) + log(distance(C, D)) == log(distance(D, G)) + log(distance(A, B))
By divide_by_2_mod_180_v3 on midpoint(A, D), E, D, F, C, D we get angle(F, C, D) + 180 == angle(midpoint(A, D), E, D) mod 360
By divide_by_2_mod_180_v0 on E, A, H, midpoint(A, D), E, A we get angle(E, A, H) == angle(midpoint(A, D), E, A) mod 360
By divide_by_2_mod_180_v2 on E, H, D, A, H, midpoint(A, D) we get angle(E, H, D) == angle(A, H, midpoint(A, D)) + 180 mod 360
By divide_by_2_mod_180_v3 on D, H, E, D, H, midpoint(A, D) we get angle(D, H, E) == angle(D, H, midpoint(A, D)) + 180 mod 360
By sss_anti_congruence_v1 on F, A, D, F, D, A we get anti_congruent_triangles(A, D, F, D, A, F)
By divide_by_2_mod_180_v0 on B, A, G, D, E, midpoint(A, D) we get angle(B, A, G) == angle(D, E, midpoint(A, D)) mod 360
By sas_anti_congruence on E, midpoint(A, D), A, E, midpoint(A, D), D we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By divide_by_2_mod_180_v1 on E, D, H, A, E, midpoint(A, D) we get angle(E, D, H) == angle(A, E, midpoint(A, D)) mod 360
By divide_by_2_mod_180_v2 on C, D, B, midpoint(A, D), E, D we get angle(C, D, B) == angle(midpoint(A, D), E, D) + 180 mod 360
By asa_anti_congruence on H, midpoint(A, D), D, H, midpoint(A, D), A we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By divide_by_2_mod_180_v3 on D, C, F, D, E, midpoint(A, D) we get angle(D, C, F) == angle(D, E, midpoint(A, D)) + 180 mod 360
By double_perpendicular_and_parallel_v0 on Line(E, center(k)), g, Line(E, G) we get parallel(Line(E, G), Line(E, center(k)))
By anti_similar_triangle_basic_properties on C, G, D, D, H, E we get not_collinear(C, D, G), not_collinear(D, E, H), angle(C, G, D) == 0 - angle(D, H, E) mod 360, angle(G, D, C) == 0 - angle(H, E, D) mod 360, angle(D, C, G) == 0 - angle(E, D, H) mod 360, log(distance(C, G)) + log(distance(E, H)) == log(distance(D, H)) + log(distance(D, G)), log(distance(D, G)) + log(distance(D, E)) == log(distance(E, H)) + log(distance(C, D)), log(distance(C, D)) + log(distance(D, H)) == log(distance(D, E)) + log(distance(C, G))
By divide_by_2_mod_180_v1 on F, E, D, midpoint(A, D), E, D we get angle(F, E, D) == angle(midpoint(A, D), E, D) mod 360
By sss_anti_congruence_v1 on E, midpoint(A, D), A, E, midpoint(A, D), D we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By divide_by_2_mod_180_v1 on midpoint(A, D), E, D, G, A, B we get angle(G, A, B) == angle(midpoint(A, D), E, D) mod 360
By divide_by_2_mod_180_v2 on C, G, D, A, H, midpoint(A, D) we get angle(C, G, D) == angle(A, H, midpoint(A, D)) + 180 mod 360
By similar_triangle_basic_properties on H, A, E, G, A, B we get not_collinear(A, E, H), not_collinear(A, B, G), angle(G, A, B) == angle(H, A, E) mod 360, angle(A, B, G) == angle(A, E, H) mod 360, angle(B, G, A) == angle(E, H, A) mod 360, log(distance(A, G)) + log(distance(A, E)) == log(distance(A, H)) + log(distance(A, B)), log(distance(A, B)) + log(distance(E, H)) == log(distance(A, E)) + log(distance(B, G)), log(distance(B, G)) + log(distance(A, H)) == log(distance(E, H)) + log(distance(A, G))
By divide_by_2_mod_180_v1 on A, B, G, A, E, midpoint(A, D) we get angle(A, B, G) == angle(A, E, midpoint(A, D)) mod 360
By sss_anti_congruence_v0 on D, E, midpoint(A, D), A, E, midpoint(A, D) we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By divide_by_2_mod_180_v3 on D, G, A, D, H, midpoint(A, D) we get angle(D, G, A) == angle(D, H, midpoint(A, D)) + 180 mod 360
By line_containment_inequality on line_circle_tangent_point(Line(D, F), Circle(B, D, E)), C, Line(D, F) we get C != line_circle_tangent_point(Line(D, F), Circle(B, D, E))
By similar_triangle_basic_properties on D, C, G, E, A, H we get not_collinear(C, D, G), not_collinear(A, E, H), angle(D, C, G) == angle(E, A, H) mod 360, angle(A, H, E) == angle(C, G, D) mod 360, angle(G, D, C) == angle(H, E, A) mod 360, log(distance(A, E)) + log(distance(C, G)) == log(distance(C, D)) + log(distance(A, H)), log(distance(A, H)) + log(distance(D, G)) == log(distance(C, G)) + log(distance(E, H)), log(distance(D, G)) + log(distance(A, E)) == log(distance(E, H)) + log(distance(C, D))
By divide_by_2_mod_180_v3 on midpoint(A, D), H, D, A, H, E we get angle(A, H, E) + 180 == angle(midpoint(A, D), H, D) mod 360
By divide_by_2_mod_180_v2 on A, G, D, midpoint(A, D), H, D we get angle(A, G, D) == angle(midpoint(A, D), H, D) + 180 mod 360
By sss_anti_congruence_v1 on D, midpoint(A, D), E, A, midpoint(A, D), E we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By divide_by_2_mod_180_v3 on D, G, A, midpoint(A, D), H, A we get angle(D, G, A) == angle(midpoint(A, D), H, A) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(A, D), E, D, A, E, F we get angle(A, E, F) == angle(midpoint(A, D), E, D) mod 360
By sss_anti_congruence_v0 on A, midpoint(A, D), E, D, midpoint(A, D), E we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By anti_similar_triangle_basic_properties on H, E, A, G, C, D we get not_collinear(A, E, H), not_collinear(C, D, G), angle(H, E, A) == 0 - angle(G, C, D) mod 360, angle(E, A, H) == 0 - angle(C, D, G) mod 360, angle(A, H, E) == 0 - angle(D, G, C) mod 360, log(distance(C, G)) + log(distance(A, E)) == log(distance(E, H)) + log(distance(C, D)), log(distance(A, E)) + log(distance(D, G)) == log(distance(C, D)) + log(distance(A, H)), log(distance(A, H)) + log(distance(C, G)) == log(distance(D, G)) + log(distance(E, H))
By divide_by_2_mod_180_v2 on D, E, midpoint(A, D), B, D, C we get angle(B, D, C) + 180 == angle(D, E, midpoint(A, D)) mod 360
By divide_by_2_mod_180_v3 on B, G, C, midpoint(A, D), H, A we get angle(B, G, C) == angle(midpoint(A, D), H, A) + 180 mod 360
By similar_triangle_basic_properties on C, D, G, A, E, H we get not_collinear(C, D, G), not_collinear(A, E, H), angle(A, E, H) == angle(C, D, G) mod 360, angle(D, G, C) == angle(E, H, A) mod 360, angle(G, C, D) == angle(H, A, E) mod 360, log(distance(A, E)) + log(distance(D, G)) == log(distance(C, D)) + log(distance(E, H)), log(distance(D, G)) + log(distance(A, H)) == log(distance(E, H)) + log(distance(C, G)), log(distance(A, H)) + log(distance(C, D)) == log(distance(C, G)) + log(distance(A, E))
By sss_anti_congruence_v0 on midpoint(A, D), D, H, midpoint(A, D), A, H we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By divide_by_2_mod_180_v1 on midpoint(A, D), H, D, A, E, D we get angle(A, E, D) == angle(midpoint(A, D), H, D) mod 360
By anti_similar_triangle_basic_properties on G, B, A, G, C, D we get not_collinear(A, B, G), not_collinear(C, D, G), angle(G, B, A) == 0 - angle(G, C, D) mod 360, angle(B, A, G) == 0 - angle(C, D, G) mod 360, angle(A, G, B) == 0 - angle(D, G, C) mod 360, log(distance(B, G)) + log(distance(C, D)) == log(distance(C, G)) + log(distance(A, B)), log(distance(A, B)) + log(distance(D, G)) == log(distance(C, D)) + log(distance(A, G)), log(distance(A, G)) + log(distance(C, G)) == log(distance(D, G)) + log(distance(B, G))
By divide_by_2_mod_180_v1 on A, E, midpoint(A, D), G, C, D we get angle(G, C, D) == angle(A, E, midpoint(A, D)) mod 360
By divide_by_2_mod_180_v1 on C, E, B, A, H, midpoint(A, D) we get angle(C, E, B) == angle(A, H, midpoint(A, D)) mod 360
By divide_by_2_mod_180_v3 on D, G, C, midpoint(A, D), H, A we get angle(D, G, C) == angle(midpoint(A, D), H, A) + 180 mod 360
By divide_by_2_mod_180_v3 on midpoint(A, D), E, D, C, D, B we get angle(C, D, B) + 180 == angle(midpoint(A, D), E, D) mod 360
By divide_by_2_mod_180_v3 on B, G, F, midpoint(A, D), H, A we get angle(B, G, F) == angle(midpoint(A, D), H, A) + 180 mod 360
By divide_by_2_mod_180_v3 on E, H, A, midpoint(A, D), H, A we get angle(E, H, A) == angle(midpoint(A, D), H, A) + 180 mod 360
By anti_similar_triangle_basic_properties on H, A, E, G, B, A we get not_collinear(A, E, H), not_collinear(A, B, G), angle(H, A, E) == 0 - angle(G, B, A) mod 360, angle(A, E, H) == 0 - angle(B, A, G) mod 360, angle(E, H, A) == 0 - angle(A, G, B) mod 360, log(distance(A, H)) + log(distance(A, B)) == log(distance(B, G)) + log(distance(A, E)), log(distance(A, B)) + log(distance(E, H)) == log(distance(A, E)) + log(distance(A, G)), log(distance(A, G)) + log(distance(A, H)) == log(distance(E, H)) + log(distance(B, G))
By divide_by_2_mod_180_v2 on D, H, midpoint(A, D), D, H, E we get angle(D, H, E) + 180 == angle(D, H, midpoint(A, D)) mod 360
By sas_anti_congruence on H, midpoint(A, D), A, H, midpoint(A, D), D we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By divide_by_2_mod_180_v1 on midpoint(A, D), E, D, E, D, H we get angle(E, D, H) == angle(midpoint(A, D), E, D) mod 360
By sss_anti_congruence_v0 on midpoint(A, D), H, A, midpoint(A, D), H, D we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sss_anti_similarity_v1 on F, A, D, F, D, A we get anti_similar_triangles(A, D, F, D, A, F)
By divide_by_2_mod_180_v2 on C, G, B, midpoint(A, D), H, D we get angle(C, G, B) == angle(midpoint(A, D), H, D) + 180 mod 360
By aa_anti_similarity on D, midpoint(A, D), E, A, midpoint(A, D), E we get anti_similar_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By divide_by_2_mod_180_v2 on midpoint(A, D), H, A, D, G, C we get angle(D, G, C) + 180 == angle(midpoint(A, D), H, A) mod 360
By sas_anti_congruence on E, midpoint(A, D), D, E, midpoint(A, D), A we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By sss_anti_similarity_v0 on G, D, E, G, C, E we get anti_similar_triangles(C, E, G, D, E, G)
By divide_by_2_mod_180_v1 on G, A, B, A, E, midpoint(A, D) we get angle(G, A, B) == angle(A, E, midpoint(A, D)) mod 360
By sss_anti_similarity_v1 on E, D, G, E, C, G we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_similarity_v0 on E, G, D, E, G, C we get anti_similar_triangles(C, E, G, D, E, G)
By divide_by_2_mod_180_v0 on midpoint(A, D), E, A, B, A, C we get angle(B, A, C) == angle(midpoint(A, D), E, A) mod 360
By divide_by_2_mod_180_v3 on midpoint(A, D), H, D, C, G, D we get angle(C, G, D) + 180 == angle(midpoint(A, D), H, D) mod 360
By sss_anti_similarity_v1 on G, E, D, G, E, C we get anti_similar_triangles(C, E, G, D, E, G)
By divide_by_2_mod_180_v2 on midpoint(A, D), H, A, B, G, C we get angle(B, G, C) + 180 == angle(midpoint(A, D), H, A) mod 360
By sss_anti_congruence_v0 on H, midpoint(A, D), D, H, midpoint(A, D), A we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sss_anti_congruence_v1 on midpoint(A, D), A, H, midpoint(A, D), D, H we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By divide_by_2_mod_180_v2 on C, G, B, A, H, midpoint(A, D) we get angle(C, G, B) == angle(A, H, midpoint(A, D)) + 180 mod 360
By sss_anti_congruence_v0 on A, midpoint(A, D), E, D, midpoint(A, D), E we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By divide_by_2_mod_180_v2 on midpoint(A, D), E, A, D, C, A we get angle(D, C, A) + 180 == angle(midpoint(A, D), E, A) mod 360
By sss_anti_congruence_v1 on D, midpoint(A, D), H, A, midpoint(A, D), H we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By divide_by_2_mod_180_v0 on F, E, A, D, E, midpoint(A, D) we get angle(F, E, A) == angle(D, E, midpoint(A, D)) mod 360
By sss_anti_similarity_v0 on G, E, C, G, E, D we get anti_similar_triangles(C, E, G, D, E, G)
By divide_by_2_mod_180_v3 on B, G, F, D, H, midpoint(A, D) we get angle(B, G, F) == angle(D, H, midpoint(A, D)) + 180 mod 360
By anti_similar_triangle_basic_properties on B, G, A, E, H, D we get not_collinear(A, B, G), not_collinear(D, E, H), angle(B, G, A) == 0 - angle(E, H, D) mod 360, angle(G, A, B) == 0 - angle(H, D, E) mod 360, angle(A, B, G) == 0 - angle(D, E, H) mod 360, log(distance(B, G)) + log(distance(D, H)) == log(distance(E, H)) + log(distance(A, G)), log(distance(A, G)) + log(distance(D, E)) == log(distance(D, H)) + log(distance(A, B)), log(distance(A, B)) + log(distance(E, H)) == log(distance(D, E)) + log(distance(B, G))
By sss_anti_similarity_v1 on D, G, E, C, G, E we get anti_similar_triangles(C, E, G, D, E, G)
By divide_by_2_mod_180_v0 on B, A, G, midpoint(A, D), E, A we get angle(B, A, G) == angle(midpoint(A, D), E, A) mod 360
By aa_anti_similarity on D, E, midpoint(A, D), A, E, midpoint(A, D) we get anti_similar_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By asa_anti_congruence on midpoint(A, D), E, A, midpoint(A, D), E, D we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By divide_by_2_mod_180_v3 on B, G, C, D, H, midpoint(A, D) we get angle(B, G, C) == angle(D, H, midpoint(A, D)) + 180 mod 360
By divide_by_2_mod_180_v3 on B, D, C, D, E, midpoint(A, D) we get angle(B, D, C) == angle(D, E, midpoint(A, D)) + 180 mod 360
By in_imply_concyclic on E, D, B, line_circle_tangent_point(Line(D, F), Circle(B, D, E)) we get concyclic(B, D, E, line_circle_tangent_point(Line(D, F), Circle(B, D, E)))
By sss_anti_congruence_v0 on D, E, midpoint(A, D), A, E, midpoint(A, D) we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By divide_by_2_mod_180_v2 on D, H, midpoint(A, D), E, H, A we get angle(E, H, A) + 180 == angle(D, H, midpoint(A, D)) mod 360
By divide_by_2_mod_180_v3 on A, E, midpoint(A, D), C, D, B we get angle(C, D, B) + 180 == angle(A, E, midpoint(A, D)) mod 360
By divide_by_2_mod_180_v3 on A, H, midpoint(A, D), F, G, B we get angle(F, G, B) + 180 == angle(A, H, midpoint(A, D)) mod 360
By sss_anti_similarity_v0 on D, A, F, A, D, F we get anti_similar_triangles(A, D, F, D, A, F)
By sss_anti_similarity_v1 on D, G, E, C, G, E we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v1 on A, E, midpoint(A, D), D, E, midpoint(A, D) we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By sss_anti_similarity_v0 on F, D, A, F, A, D we get anti_similar_triangles(A, D, F, D, A, F)
By divide_by_2_mod_180_v3 on A, H, midpoint(A, D), F, G, D we get angle(F, G, D) + 180 == angle(A, H, midpoint(A, D)) mod 360
By sss_anti_congruence_v1 on E, D, midpoint(A, D), E, A, midpoint(A, D) we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By sss_anti_similarity_v1 on F, A, D, F, D, A we get anti_similar_triangles(A, D, F, D, A, F)
By aa_anti_similarity on E, G, D, E, G, C we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v0 on D, H, midpoint(A, D), A, H, midpoint(A, D) we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sss_anti_similarity_v0 on C, G, E, D, G, E we get anti_similar_triangles(C, E, G, D, E, G)
By divide_by_2_mod_180_v2 on A, H, E, midpoint(A, D), H, D we get angle(A, H, E) == angle(midpoint(A, D), H, D) + 180 mod 360
By divide_by_2_mod_180_v1 on A, E, midpoint(A, D), C, A, B we get angle(C, A, B) == angle(A, E, midpoint(A, D)) mod 360
By divide_by_2_mod_180_v2 on F, G, D, A, H, midpoint(A, D) we get angle(F, G, D) == angle(A, H, midpoint(A, D)) + 180 mod 360
By sss_anti_similarity_v1 on A, D, F, D, A, F we get anti_similar_triangles(A, D, F, D, A, F)
By sss_anti_similarity_v0 on A, F, D, D, F, A we get anti_similar_triangles(A, D, F, D, A, F)
By sas_anti_similarity on E, D, G, E, C, G we get anti_similar_triangles(C, E, G, D, E, G)
By divide_by_2_mod_180_v0 on midpoint(A, D), E, A, D, C, G we get angle(D, C, G) == angle(midpoint(A, D), E, A) mod 360
By sss_anti_congruence_v1 on D, midpoint(A, D), H, A, midpoint(A, D), H we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By divide_by_2_mod_180_v0 on D, E, A, D, H, midpoint(A, D) we get angle(D, E, A) == angle(D, H, midpoint(A, D)) mod 360
By line_containment_inequality on line_intersection(f, Line(E, G)), C, f we get C != line_intersection(f, Line(E, G))
By divide_by_2_mod_180_v2 on F, C, D, A, E, midpoint(A, D) we get angle(F, C, D) == angle(A, E, midpoint(A, D)) + 180 mod 360
By sss_anti_congruence_v1 on E, D, midpoint(A, D), E, A, midpoint(A, D) we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By line_containment_inequality on line_circle_tangent_point(Line(A, E), Circle(D, E, H)), D, Line(A, E) we get D != line_circle_tangent_point(Line(A, E), Circle(D, E, H))
By divide_by_2_mod_180_v3 on A, E, midpoint(A, D), A, C, D we get angle(A, C, D) + 180 == angle(A, E, midpoint(A, D)) mod 360
By sss_anti_similarity_v1 on G, C, E, G, D, E we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v1 on midpoint(A, D), H, D, midpoint(A, D), H, A we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By divide_by_2_mod_180_v2 on D, H, midpoint(A, D), B, G, A we get angle(B, G, A) + 180 == angle(D, H, midpoint(A, D)) mod 360
By divide_by_2_mod_180_v2 on midpoint(A, D), H, A, D, G, F we get angle(D, G, F) + 180 == angle(midpoint(A, D), H, A) mod 360
By sas_anti_congruence on H, midpoint(A, D), D, H, midpoint(A, D), A we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sss_anti_congruence_v0 on A, F, D, D, F, A we get anti_congruent_triangles(A, D, F, D, A, F)
By anti_similar_triangle_basic_properties on B, A, G, E, D, H we get not_collinear(A, B, G), not_collinear(D, E, H), angle(B, A, G) == 0 - angle(E, D, H) mod 360, angle(A, G, B) == 0 - angle(D, H, E) mod 360, angle(G, B, A) == 0 - angle(H, E, D) mod 360, log(distance(A, B)) + log(distance(D, H)) == log(distance(D, E)) + log(distance(A, G)), log(distance(A, G)) + log(distance(E, H)) == log(distance(D, H)) + log(distance(B, G)), log(distance(B, G)) + log(distance(D, E)) == log(distance(E, H)) + log(distance(A, B))
By sss_anti_similarity_v1 on D, F, A, A, F, D we get anti_similar_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v1 on midpoint(A, D), A, E, midpoint(A, D), D, E we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By divide_by_2_mod_180_v2 on F, G, B, A, H, midpoint(A, D) we get angle(F, G, B) == angle(A, H, midpoint(A, D)) + 180 mod 360
By double_perpendicular_and_parallel_v0_r on g, Line(E, center(k)), f we get perpendicular(f, Line(E, center(k)))
By sss_anti_congruence_v0 on E, A, midpoint(A, D), E, D, midpoint(A, D) we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By sss_anti_congruence_v1 on midpoint(A, D), H, D, midpoint(A, D), H, A we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sss_anti_congruence_v1 on D, midpoint(A, D), E, A, midpoint(A, D), E we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By divide_by_2_mod_180_v3 on D, C, A, D, E, midpoint(A, D) we get angle(D, C, A) == angle(D, E, midpoint(A, D)) + 180 mod 360
By similar_triangle_basic_properties on G, A, B, G, C, D we get not_collinear(A, B, G), not_collinear(C, D, G), angle(G, A, B) == angle(G, C, D) mod 360, angle(A, B, G) == angle(C, D, G) mod 360, angle(B, G, A) == angle(D, G, C) mod 360, log(distance(A, G)) + log(distance(C, D)) == log(distance(C, G)) + log(distance(A, B)), log(distance(A, B)) + log(distance(D, G)) == log(distance(C, D)) + log(distance(B, G)), log(distance(B, G)) + log(distance(C, G)) == log(distance(D, G)) + log(distance(A, G))
By similar_triangle_basic_properties on E, D, H, C, D, G we get not_collinear(D, E, H), not_collinear(C, D, G), angle(C, D, G) == angle(E, D, H) mod 360, angle(D, G, C) == angle(D, H, E) mod 360, angle(G, C, D) == angle(H, E, D) mod 360, log(distance(C, D)) + log(distance(D, H)) == log(distance(D, E)) + log(distance(D, G)), log(distance(D, G)) + log(distance(E, H)) == log(distance(D, H)) + log(distance(C, G)), log(distance(C, G)) + log(distance(D, E)) == log(distance(E, H)) + log(distance(C, D))
By anti_similar_triangle_basic_properties on B, G, A, C, G, D we get not_collinear(A, B, G), not_collinear(C, D, G), angle(B, G, A) == 0 - angle(C, G, D) mod 360, angle(G, A, B) == 0 - angle(G, D, C) mod 360, angle(A, B, G) == 0 - angle(D, C, G) mod 360, log(distance(B, G)) + log(distance(D, G)) == log(distance(C, G)) + log(distance(A, G)), log(distance(A, G)) + log(distance(C, D)) == log(distance(D, G)) + log(distance(A, B)), log(distance(A, B)) + log(distance(C, G)) == log(distance(C, D)) + log(distance(B, G))
By sss_anti_similarity_v1 on E, G, C, E, G, D we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v1 on A, E, midpoint(A, D), D, E, midpoint(A, D) we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By divide_by_2_mod_180_v2 on midpoint(A, D), H, A, B, G, F we get angle(B, G, F) + 180 == angle(midpoint(A, D), H, A) mod 360
By sss_anti_congruence_v1 on E, midpoint(A, D), A, E, midpoint(A, D), D we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By line_containment_inequality on line_circle_tangent_point(Line(D, E), Circle(A, E, H)), F, Line(D, E) we get F != line_circle_tangent_point(Line(D, E), Circle(A, E, H))
By divide_by_2_mod_180_v2 on midpoint(A, D), E, A, B, D, C we get angle(B, D, C) + 180 == angle(midpoint(A, D), E, A) mod 360
By sss_anti_congruence_v0 on E, A, midpoint(A, D), E, D, midpoint(A, D) we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By sss_anti_similarity_v1 on A, D, F, D, A, F we get anti_similar_triangles(A, D, F, D, A, F)
By divide_by_2_mod_180_v3 on midpoint(A, D), H, D, A, G, B we get angle(A, G, B) + 180 == angle(midpoint(A, D), H, D) mod 360
By sss_anti_congruence_v1 on D, midpoint(A, D), H, A, midpoint(A, D), H we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By collinear_definition on E, H, F we get H in Line(E, F), F in Line(E, H), Line(E, F) == Line(E, H), 0 == 2 * angle(H, E, F) mod 360
By sss_anti_similarity_v1 on G, E, D, G, E, C we get anti_similar_triangles(C, E, G, D, E, G)
By divide_by_2_mod_180_v3 on midpoint(A, D), H, D, C, G, B we get angle(C, G, B) + 180 == angle(midpoint(A, D), H, D) mod 360
By sss_anti_congruence_v1 on F, A, D, F, D, A we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_similarity_v1 on C, E, G, D, E, G we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v0 on midpoint(A, D), D, E, midpoint(A, D), A, E we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By sss_anti_congruence_v0 on H, A, midpoint(A, D), H, D, midpoint(A, D) we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sss_anti_congruence_v1 on midpoint(A, D), A, H, midpoint(A, D), D, H we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sss_anti_congruence_v0 on midpoint(A, D), D, E, midpoint(A, D), A, E we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By sss_anti_congruence_v0 on E, midpoint(A, D), D, E, midpoint(A, D), A we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By sss_anti_congruence_v1 on E, midpoint(A, D), A, E, midpoint(A, D), D we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By sss_anti_similarity_v1 on C, E, G, D, E, G we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v0 on midpoint(A, D), H, A, midpoint(A, D), H, D we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sss_anti_similarity_v0 on E, G, D, E, G, C we get anti_similar_triangles(C, E, G, D, E, G)
By divide_by_2_mod_180_v3 on A, E, midpoint(A, D), F, C, D we get angle(F, C, D) + 180 == angle(A, E, midpoint(A, D)) mod 360
By sss_anti_similarity_v0 on A, F, D, D, F, A we get anti_similar_triangles(A, D, F, D, A, F)
By similar_triangle_basic_properties on G, D, C, H, D, E we get not_collinear(C, D, G), not_collinear(D, E, H), angle(G, D, C) == angle(H, D, E) mod 360, angle(D, C, G) == angle(D, E, H) mod 360, angle(C, G, D) == angle(E, H, D) mod 360, log(distance(D, G)) + log(distance(D, E)) == log(distance(D, H)) + log(distance(C, D)), log(distance(C, D)) + log(distance(E, H)) == log(distance(D, E)) + log(distance(C, G)), log(distance(C, G)) + log(distance(D, H)) == log(distance(E, H)) + log(distance(D, G))
By sss_anti_congruence_v0 on midpoint(A, D), D, E, midpoint(A, D), A, E we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By anti_similar_triangle_basic_properties on A, E, H, D, C, G we get not_collinear(A, E, H), not_collinear(C, D, G), angle(A, E, H) == 0 - angle(D, C, G) mod 360, angle(E, H, A) == 0 - angle(C, G, D) mod 360, angle(H, A, E) == 0 - angle(G, D, C) mod 360, log(distance(A, E)) + log(distance(C, G)) == log(distance(C, D)) + log(distance(E, H)), log(distance(C, G)) + log(distance(A, H)) == log(distance(E, H)) + log(distance(D, G)), log(distance(A, H)) + log(distance(C, D)) == log(distance(D, G)) + log(distance(A, E))
By sss_anti_congruence_v0 on E, midpoint(A, D), D, E, midpoint(A, D), A we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By sss_anti_congruence_v0 on H, midpoint(A, D), D, H, midpoint(A, D), A we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sss_anti_similarity_v0 on A, F, D, D, F, A we get anti_similar_triangles(A, D, F, D, A, F)
By sss_anti_similarity_v0 on C, G, E, D, G, E we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v1 on A, D, F, D, A, F we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v1 on H, midpoint(A, D), A, H, midpoint(A, D), D we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By divide_by_2_mod_180_v3 on A, H, midpoint(A, D), A, H, E we get angle(A, H, E) + 180 == angle(A, H, midpoint(A, D)) mod 360
By sss_anti_similarity_v1 on D, G, E, C, G, E we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v0 on D, E, midpoint(A, D), A, E, midpoint(A, D) we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By sss_anti_similarity_v0 on C, G, E, D, G, E we get anti_similar_triangles(C, E, G, D, E, G)
By divide_by_2_mod_180_v2 on midpoint(A, D), H, A, D, G, A we get angle(D, G, A) + 180 == angle(midpoint(A, D), H, A) mod 360
By sss_anti_congruence_v1 on D, F, A, A, F, D we get anti_congruent_triangles(A, D, F, D, A, F)
By divide_by_2_mod_180_v2 on D, H, midpoint(A, D), D, G, A we get angle(D, G, A) + 180 == angle(D, H, midpoint(A, D)) mod 360
By sss_anti_similarity_v1 on G, C, E, G, D, E we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_similarity_v0 on E, C, G, E, D, G we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v1 on H, D, midpoint(A, D), H, A, midpoint(A, D) we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sss_anti_congruence_v0 on midpoint(A, D), E, A, midpoint(A, D), E, D we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By sss_anti_congruence_v1 on E, midpoint(A, D), A, E, midpoint(A, D), D we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By sss_anti_congruence_v1 on H, D, midpoint(A, D), H, A, midpoint(A, D) we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sss_anti_congruence_v0 on H, midpoint(A, D), D, H, midpoint(A, D), A we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sss_anti_congruence_v0 on E, midpoint(A, D), D, E, midpoint(A, D), A we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By sss_anti_similarity_v0 on F, D, A, F, A, D we get anti_similar_triangles(A, D, F, D, A, F)
By line_containment_inequality on line_circle_tangent_point(Line(D, E), Circle(A, E, H)), C, Line(D, E) we get C != line_circle_tangent_point(Line(D, E), Circle(A, E, H))
By sss_anti_congruence_v0 on F, D, A, F, A, D we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_similarity_v1 on E, D, G, E, C, G we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v0 on D, A, F, A, D, F we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_similarity_v0 on G, E, C, G, E, D we get anti_similar_triangles(C, E, G, D, E, G)
By isosceles_triangle_properties on F, A, D we get distance(A, F) == distance(D, F), angle(A, D, F) == angle(F, A, D) mod 360
By sas_anti_congruence on D, midpoint(A, D), H, A, midpoint(A, D), H we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sss_anti_congruence_v0 on F, D, A, F, A, D we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v1 on midpoint(A, D), H, D, midpoint(A, D), H, A we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sas_anti_congruence on D, E, midpoint(A, D), A, E, midpoint(A, D) we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By sss_anti_similarity_v0 on G, E, C, G, E, D we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v1 on D, midpoint(A, D), E, A, midpoint(A, D), E we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By divide_by_2_mod_180_v0 on midpoint(A, D), E, A, H, D, E we get angle(H, D, E) == angle(midpoint(A, D), E, A) mod 360
By sss_anti_similarity_v0 on D, A, F, A, D, F we get anti_similar_triangles(A, D, F, D, A, F)
By divide_by_2_mod_180_v3 on D, G, F, midpoint(A, D), H, A we get angle(D, G, F) == angle(midpoint(A, D), H, A) + 180 mod 360
By sss_anti_congruence_v0 on A, F, D, D, F, A we get anti_congruent_triangles(A, D, F, D, A, F)
By divide_by_2_mod_180_v2 on D, E, midpoint(A, D), D, C, A we get angle(D, C, A) + 180 == angle(D, E, midpoint(A, D)) mod 360
By sss_anti_congruence_v1 on A, D, F, D, A, F we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v0 on A, F, D, D, F, A we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v0 on A, midpoint(A, D), E, D, midpoint(A, D), E we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By in_imply_concyclic on A, H, E, line_circle_tangent_point(Line(D, E), Circle(A, E, H)) we get concyclic(A, E, H, line_circle_tangent_point(Line(D, E), Circle(A, E, H)))
By sss_anti_similarity_v1 on A, D, F, D, A, F we get anti_similar_triangles(A, D, F, D, A, F)
By sss_anti_similarity_v0 on G, E, C, G, E, D we get anti_similar_triangles(C, E, G, D, E, G)
By sas_anti_congruence on A, H, midpoint(A, D), D, H, midpoint(A, D) we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sas_anti_similarity on D, F, A, A, F, D we get anti_similar_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v1 on D, midpoint(A, D), H, A, midpoint(A, D), H we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By aa_anti_similarity on E, C, G, E, D, G we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_similarity_v1 on E, G, C, E, G, D we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v0 on H, midpoint(A, D), D, H, midpoint(A, D), A we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sss_anti_similarity_v1 on D, F, A, A, F, D we get anti_similar_triangles(A, D, F, D, A, F)
By aa_anti_similarity on A, E, midpoint(A, D), D, E, midpoint(A, D) we get anti_similar_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By divide_by_2_mod_180_v3 on B, G, A, midpoint(A, D), H, A we get angle(B, G, A) == angle(midpoint(A, D), H, A) + 180 mod 360
By sss_anti_similarity_v1 on A, D, F, D, A, F we get anti_similar_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v1 on F, A, D, F, D, A we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v0 on A, F, D, D, F, A we get anti_congruent_triangles(A, D, F, D, A, F)
By divide_by_2_mod_180_v2 on A, C, D, midpoint(A, D), E, D we get angle(A, C, D) == angle(midpoint(A, D), E, D) + 180 mod 360
By sas_anti_congruence on A, midpoint(A, D), H, D, midpoint(A, D), H we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sss_anti_congruence_v0 on H, A, midpoint(A, D), H, D, midpoint(A, D) we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sss_anti_congruence_v1 on D, F, A, A, F, D we get anti_congruent_triangles(A, D, F, D, A, F)
By sas_anti_congruence on A, midpoint(A, D), E, D, midpoint(A, D), E we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By sss_anti_similarity_v1 on E, D, G, E, C, G we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v0 on F, D, A, F, A, D we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_similarity_v0 on A, F, D, D, F, A we get anti_similar_triangles(A, D, F, D, A, F)
By anti_similar_triangle_basic_properties on C, D, G, D, E, H we get not_collinear(C, D, G), not_collinear(D, E, H), angle(C, D, G) == 0 - angle(D, E, H) mod 360, angle(D, G, C) == 0 - angle(E, H, D) mod 360, angle(G, C, D) == 0 - angle(H, D, E) mod 360, log(distance(C, D)) + log(distance(E, H)) == log(distance(D, E)) + log(distance(D, G)), log(distance(D, G)) + log(distance(D, H)) == log(distance(E, H)) + log(distance(C, G)), log(distance(C, G)) + log(distance(D, E)) == log(distance(D, H)) + log(distance(C, D))
By sss_anti_similarity_v0 on A, F, D, D, F, A we get anti_similar_triangles(A, D, F, D, A, F)
By divide_by_2_mod_180_v3 on midpoint(A, D), E, D, A, C, D we get angle(A, C, D) + 180 == angle(midpoint(A, D), E, D) mod 360
By sss_anti_congruence_v0 on E, A, midpoint(A, D), E, D, midpoint(A, D) we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By similar_triangle_basic_properties on H, E, A, G, B, A we get not_collinear(A, E, H), not_collinear(A, B, G), angle(G, B, A) == angle(H, E, A) mod 360, angle(B, A, G) == angle(E, A, H) mod 360, angle(A, G, B) == angle(A, H, E) mod 360, log(distance(B, G)) + log(distance(A, E)) == log(distance(E, H)) + log(distance(A, B)), log(distance(A, B)) + log(distance(A, H)) == log(distance(A, E)) + log(distance(A, G)), log(distance(A, G)) + log(distance(E, H)) == log(distance(A, H)) + log(distance(B, G))
By anti_similar_triangle_basic_properties on A, H, E, B, G, A we get not_collinear(A, E, H), not_collinear(A, B, G), angle(A, H, E) == 0 - angle(B, G, A) mod 360, angle(H, E, A) == 0 - angle(G, A, B) mod 360, angle(E, A, H) == 0 - angle(A, B, G) mod 360, log(distance(A, H)) + log(distance(A, G)) == log(distance(B, G)) + log(distance(E, H)), log(distance(A, G)) + log(distance(A, E)) == log(distance(E, H)) + log(distance(A, B)), log(distance(A, B)) + log(distance(A, H)) == log(distance(A, E)) + log(distance(B, G))
By sss_anti_similarity_v1 on D, F, A, A, F, D we get anti_similar_triangles(A, D, F, D, A, F)
By sss_anti_similarity_v1 on D, G, E, C, G, E we get anti_similar_triangles(C, E, G, D, E, G)
By divide_by_2_mod_180_v3 on D, C, A, midpoint(A, D), E, A we get angle(D, C, A) == angle(midpoint(A, D), E, A) + 180 mod 360
By sss_anti_congruence_v0 on F, D, A, F, A, D we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v0 on H, midpoint(A, D), D, H, midpoint(A, D), A we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sss_anti_congruence_v1 on midpoint(A, D), E, D, midpoint(A, D), E, A we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By sss_anti_similarity_v0 on G, D, E, G, C, E we get anti_similar_triangles(C, E, G, D, E, G)
By between_imply_segment_sum on G, D, B we get distance(B, G) == distance(D, G) + distance(B, D)
By line_circle_intersection_has_at_most_two_points_0 on C, B, midpoint(B, C), e we get midpoint(B, C) not in e
By sss_anti_congruence_v1 on H, D, midpoint(A, D), H, A, midpoint(A, D) we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sss_anti_congruence_v1 on midpoint(A, D), A, E, midpoint(A, D), D, E we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By sss_anti_congruence_v0 on A, midpoint(A, D), E, D, midpoint(A, D), E we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By sss_anti_congruence_v1 on A, D, F, D, A, F we get anti_congruent_triangles(A, D, F, D, A, F)
By divide_by_2_mod_180_v3 on D, G, F, D, H, midpoint(A, D) we get angle(D, G, F) == angle(D, H, midpoint(A, D)) + 180 mod 360
By sss_anti_similarity_v1 on G, C, E, G, D, E we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v0 on A, midpoint(A, D), H, D, midpoint(A, D), H we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sss_anti_congruence_v0 on H, A, midpoint(A, D), H, D, midpoint(A, D) we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sss_anti_congruence_v0 on midpoint(A, D), H, A, midpoint(A, D), H, D we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sas_anti_similarity on D, G, E, C, G, E we get anti_similar_triangles(C, E, G, D, E, G)
By line_circle_intersection_has_at_most_two_points_0 on E, H, F, Circle(A, E, H) we get F not in Circle(A, E, H)
By sss_anti_congruence_v1 on H, D, midpoint(A, D), H, A, midpoint(A, D) we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sss_anti_congruence_v1 on A, D, F, D, A, F we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_similarity_v0 on G, D, E, G, C, E we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_similarity_v0 on F, D, A, F, A, D we get anti_similar_triangles(A, D, F, D, A, F)
By asa_anti_congruence on H, midpoint(A, D), A, H, midpoint(A, D), D we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sss_anti_similarity_v0 on F, D, A, F, A, D we get anti_similar_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v1 on E, D, midpoint(A, D), E, A, midpoint(A, D) we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By sss_anti_congruence_v0 on D, E, midpoint(A, D), A, E, midpoint(A, D) we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By sss_anti_similarity_v0 on G, E, C, G, E, D we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v0 on midpoint(A, D), E, A, midpoint(A, D), E, D we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By sss_anti_congruence_v0 on midpoint(A, D), H, A, midpoint(A, D), H, D we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sss_anti_congruence_v0 on D, A, F, A, D, F we get anti_congruent_triangles(A, D, F, D, A, F)
By sas_anti_congruence on A, E, midpoint(A, D), D, E, midpoint(A, D) we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By sss_anti_congruence_v0 on A, midpoint(A, D), E, D, midpoint(A, D), E we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By sss_anti_congruence_v1 on E, midpoint(A, D), A, E, midpoint(A, D), D we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By asa_anti_congruence on midpoint(A, D), H, D, midpoint(A, D), H, A we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sss_anti_similarity_v0 on E, G, D, E, G, C we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_similarity_v0 on F, D, A, F, A, D we get anti_similar_triangles(A, D, F, D, A, F)
By sss_anti_similarity_v1 on E, G, C, E, G, D we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v1 on D, F, A, A, F, D we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v1 on midpoint(A, D), A, E, midpoint(A, D), D, E we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By sss_anti_congruence_v0 on D, H, midpoint(A, D), A, H, midpoint(A, D) we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By isosceles_triangle_properties on F, D, A we get distance(A, F) == distance(D, F), angle(D, A, F) == angle(F, D, A) mod 360
By sss_anti_congruence_v0 on D, A, F, A, D, F we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v0 on midpoint(A, D), D, E, midpoint(A, D), A, E we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By sss_anti_similarity_v0 on F, D, A, F, A, D we get anti_similar_triangles(A, D, F, D, A, F)
By sss_anti_similarity_v0 on E, C, G, E, D, G we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v1 on H, midpoint(A, D), A, H, midpoint(A, D), D we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sss_anti_similarity_v0 on E, C, G, E, D, G we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v0 on A, midpoint(A, D), H, D, midpoint(A, D), H we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sss_anti_congruence_v0 on midpoint(A, D), D, H, midpoint(A, D), A, H we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sss_anti_similarity_v1 on C, E, G, D, E, G we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v0 on midpoint(A, D), E, A, midpoint(A, D), E, D we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By sss_anti_congruence_v1 on midpoint(A, D), A, H, midpoint(A, D), D, H we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sas_anti_similarity on G, D, E, G, C, E we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_similarity_v1 on G, E, D, G, E, C we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_similarity_v0 on G, D, E, G, C, E we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_similarity_v0 on D, A, F, A, D, F we get anti_similar_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v1 on A, H, midpoint(A, D), D, H, midpoint(A, D) we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sss_anti_similarity_v1 on D, F, A, A, F, D we get anti_similar_triangles(A, D, F, D, A, F)
By sss_anti_similarity_v1 on F, A, D, F, D, A we get anti_similar_triangles(A, D, F, D, A, F)
By sss_anti_similarity_v1 on D, G, E, C, G, E we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v0 on A, midpoint(A, D), H, D, midpoint(A, D), H we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sss_anti_similarity_v0 on D, A, F, A, D, F we get anti_similar_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v0 on E, A, midpoint(A, D), E, D, midpoint(A, D) we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By sss_anti_congruence_v0 on midpoint(A, D), D, H, midpoint(A, D), A, H we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sss_anti_congruence_v1 on D, midpoint(A, D), H, A, midpoint(A, D), H we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By aa_anti_similarity on E, G, C, E, G, D we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v1 on A, H, midpoint(A, D), D, H, midpoint(A, D) we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sss_anti_congruence_v1 on A, H, midpoint(A, D), D, H, midpoint(A, D) we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sss_anti_similarity_v1 on E, G, C, E, G, D we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v0 on midpoint(A, D), D, H, midpoint(A, D), A, H we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sss_anti_congruence_v0 on A, midpoint(A, D), H, D, midpoint(A, D), H we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By line_containment_inequality on line_intersection(g, Line(E, G)), B, Line(E, G) we get B != line_intersection(g, Line(E, G))
By sss_anti_similarity_v0 on E, G, D, E, G, C we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_similarity_v0 on D, E, G, C, E, G we get anti_similar_triangles(C, E, G, D, E, G)
By sas_anti_similarity on E, G, C, E, G, D we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v0 on A, F, D, D, F, A we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v1 on midpoint(A, D), E, D, midpoint(A, D), E, A we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By sss_anti_congruence_v0 on D, E, midpoint(A, D), A, E, midpoint(A, D) we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By sss_anti_congruence_v1 on midpoint(A, D), H, D, midpoint(A, D), H, A we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sss_anti_congruence_v0 on H, midpoint(A, D), D, H, midpoint(A, D), A we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sss_anti_congruence_v1 on A, E, midpoint(A, D), D, E, midpoint(A, D) we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By sss_anti_congruence_v0 on D, A, F, A, D, F we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v1 on A, H, midpoint(A, D), D, H, midpoint(A, D) we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sss_anti_congruence_v0 on midpoint(A, D), D, H, midpoint(A, D), A, H we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sss_anti_congruence_v1 on midpoint(A, D), E, D, midpoint(A, D), E, A we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By sss_anti_congruence_v0 on F, D, A, F, A, D we get anti_congruent_triangles(A, D, F, D, A, F)
By sas_anti_congruence on D, H, midpoint(A, D), A, H, midpoint(A, D) we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By altitude_definition on E, C, D, Line(E, center(k)) we get altitude(E, C, D) == Line(E, center(k))
By sss_anti_congruence_v0 on H, A, midpoint(A, D), H, D, midpoint(A, D) we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(A, D), G, C we get not_collinear(C, G, midpoint(A, D)), exists(Line(C, G))
By sss_anti_similarity_v0 on G, E, C, G, E, D we get anti_similar_triangles(C, E, G, D, E, G)
By sas_anti_congruence on midpoint(A, D), E, A, midpoint(A, D), E, D we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By sss_anti_congruence_v0 on D, A, F, A, D, F we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v1 on F, A, D, F, D, A we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v1 on midpoint(A, D), A, H, midpoint(A, D), D, H we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By line_circle_intersection_has_at_most_two_points_0 on E, F, H, k we get H not in k
By sss_anti_congruence_v1 on D, F, A, A, F, D we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v1 on midpoint(A, D), A, H, midpoint(A, D), D, H we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(A, D), B, G we get not_collinear(B, G, midpoint(A, D)), exists(Line(B, G))
By sss_anti_similarity_v0 on E, G, D, E, G, C we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v0 on F, D, A, F, A, D we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v1 on E, midpoint(A, D), A, E, midpoint(A, D), D we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By sss_anti_congruence_v1 on midpoint(A, D), H, D, midpoint(A, D), H, A we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sss_anti_congruence_v1 on midpoint(A, D), E, D, midpoint(A, D), E, A we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By line_containment_inequality on line_intersection(g, Line(E, G)), midpoint(A, D), g we get midpoint(A, D) != line_intersection(g, Line(E, G))
By sss_anti_similarity_v1 on G, E, D, G, E, C we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_similarity_v0 on D, E, G, C, E, G we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v1 on E, D, midpoint(A, D), E, A, midpoint(A, D) we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By reverse_direction on E, midpoint(A, D) we get 180 == direction(E, midpoint(A, D)) - direction(midpoint(A, D), E) mod 360
By aa_anti_similarity on A, midpoint(A, D), H, D, midpoint(A, D), H we get anti_similar_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sss_anti_similarity_v0 on E, C, G, E, D, G we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_similarity_v0 on A, F, D, D, F, A we get anti_similar_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v1 on midpoint(A, D), H, D, midpoint(A, D), H, A we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sss_anti_congruence_v0 on midpoint(A, D), D, E, midpoint(A, D), A, E we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By sss_anti_congruence_v0 on midpoint(A, D), D, E, midpoint(A, D), A, E we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By asa_anti_congruence on midpoint(A, D), H, A, midpoint(A, D), H, D we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sss_anti_congruence_v0 on D, A, F, A, D, F we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v1 on F, A, D, F, D, A we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v0 on D, H, midpoint(A, D), A, H, midpoint(A, D) we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(A, D), G, F we get not_collinear(F, G, midpoint(A, D)), exists(Line(F, G))
By sss_anti_similarity_v0 on C, G, E, D, G, E we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v0 on midpoint(A, D), E, A, midpoint(A, D), E, D we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By sss_anti_congruence_v1 on D, midpoint(A, D), H, A, midpoint(A, D), H we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sss_anti_congruence_v0 on E, midpoint(A, D), D, E, midpoint(A, D), A we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By sss_anti_congruence_v1 on D, F, A, A, F, D we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v1 on A, E, midpoint(A, D), D, E, midpoint(A, D) we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By sss_anti_congruence_v0 on D, H, midpoint(A, D), A, H, midpoint(A, D) we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By aa_anti_similarity on E, D, G, E, C, G we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v0 on E, midpoint(A, D), D, E, midpoint(A, D), A we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By sss_anti_congruence_v1 on A, H, midpoint(A, D), D, H, midpoint(A, D) we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sss_anti_congruence_v1 on H, midpoint(A, D), A, H, midpoint(A, D), D we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sas_anti_congruence on midpoint(A, D), E, D, midpoint(A, D), E, A we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By sss_anti_similarity_v0 on D, E, G, C, E, G we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_similarity_v1 on F, A, D, F, D, A we get anti_similar_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v0 on midpoint(A, D), E, A, midpoint(A, D), E, D we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By sss_anti_similarity_v1 on F, A, D, F, D, A we get anti_similar_triangles(A, D, F, D, A, F)
By reverse_direction on midpoint(A, D), E we get 180 == direction(midpoint(A, D), E) - direction(E, midpoint(A, D)) mod 360
By sss_anti_congruence_v0 on D, H, midpoint(A, D), A, H, midpoint(A, D) we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sss_anti_similarity_v1 on G, C, E, G, D, E we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v1 on D, midpoint(A, D), E, A, midpoint(A, D), E we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By sss_anti_congruence_v1 on midpoint(A, D), A, E, midpoint(A, D), D, E we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By asa_anti_congruence on midpoint(A, D), E, D, midpoint(A, D), E, A we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By sss_anti_similarity_v0 on C, G, E, D, G, E we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_similarity_v1 on C, E, G, D, E, G we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v1 on midpoint(A, D), E, D, midpoint(A, D), E, A we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By sss_anti_similarity_v0 on E, G, D, E, G, C we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v0 on A, midpoint(A, D), H, D, midpoint(A, D), H we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By line_containment_inequality on line_circle_tangent_point(Line(D, E), Circle(A, E, H)), H, Line(D, E) we get H != line_circle_tangent_point(Line(D, E), Circle(A, E, H))
By sss_anti_similarity_v1 on E, G, C, E, G, D we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v1 on A, E, midpoint(A, D), D, E, midpoint(A, D) we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By sss_anti_similarity_v1 on E, G, C, E, G, D we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_similarity_v1 on F, A, D, F, D, A we get anti_similar_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v0 on A, midpoint(A, D), H, D, midpoint(A, D), H we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sss_anti_similarity_v1 on C, E, G, D, E, G we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_similarity_v0 on C, G, E, D, G, E we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_similarity_v0 on D, E, G, C, E, G we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_similarity_v0 on D, A, F, A, D, F we get anti_similar_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v1 on F, A, D, F, D, A we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v1 on midpoint(A, D), A, E, midpoint(A, D), D, E we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By sss_anti_congruence_v1 on midpoint(A, D), A, H, midpoint(A, D), D, H we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sas_anti_similarity on C, G, E, D, G, E we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v0 on D, H, midpoint(A, D), A, H, midpoint(A, D) we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By collinear_definition on E, F, H we get F in Line(E, H), H in Line(E, F), Line(E, F) == Line(E, H), 0 == 2 * angle(F, E, H) mod 360
By sss_anti_similarity_v1 on G, E, D, G, E, C we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v1 on H, D, midpoint(A, D), H, A, midpoint(A, D) we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sss_anti_similarity_v1 on A, D, F, D, A, F we get anti_similar_triangles(A, D, F, D, A, F)
By reverse_direction on H, midpoint(A, D) we get 180 == direction(H, midpoint(A, D)) - direction(midpoint(A, D), H) mod 360
By sas_anti_congruence on midpoint(A, D), H, D, midpoint(A, D), H, A we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sss_anti_similarity_v1 on D, G, E, C, G, E we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v0 on E, midpoint(A, D), D, E, midpoint(A, D), A we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By sss_anti_similarity_v0 on D, E, G, C, E, G we get anti_similar_triangles(C, E, G, D, E, G)
By aa_anti_similarity on A, midpoint(A, D), E, D, midpoint(A, D), E we get anti_similar_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By line_containment_inequality on line_intersection(f, Line(E, G)), H, Line(E, G) we get H != line_intersection(f, Line(E, G))
By sss_anti_similarity_v1 on E, D, G, E, C, G we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_similarity_v1 on G, E, D, G, E, C we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v0 on midpoint(A, D), E, A, midpoint(A, D), E, D we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By sss_anti_similarity_v1 on C, E, G, D, E, G we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v1 on A, H, midpoint(A, D), D, H, midpoint(A, D) we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sas_anti_similarity on A, F, D, D, F, A we get anti_similar_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v0 on A, midpoint(A, D), E, D, midpoint(A, D), E we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By sss_anti_congruence_v0 on D, E, midpoint(A, D), A, E, midpoint(A, D) we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By sss_anti_congruence_v0 on midpoint(A, D), H, A, midpoint(A, D), H, D we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sss_anti_similarity_v0 on D, A, F, A, D, F we get anti_similar_triangles(A, D, F, D, A, F)
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(A, D), F, C we get not_collinear(C, F, midpoint(A, D)), exists(Line(C, F))
By sas_anti_congruence on midpoint(A, D), H, A, midpoint(A, D), H, D we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By aa_anti_similarity on A, H, midpoint(A, D), D, H, midpoint(A, D) we get anti_similar_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sas_anti_congruence on D, F, A, A, F, D we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v0 on E, A, midpoint(A, D), E, D, midpoint(A, D) we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By line_containment_inequality on line_intersection(g, Line(E, G)), G, g we get G != line_intersection(g, Line(E, G))
By sss_anti_congruence_v1 on A, D, F, D, A, F we get anti_congruent_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v1 on midpoint(A, D), A, E, midpoint(A, D), D, E we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By sss_anti_congruence_v0 on midpoint(A, D), H, A, midpoint(A, D), H, D we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sss_anti_similarity_v1 on E, D, G, E, C, G we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v1 on midpoint(A, D), E, D, midpoint(A, D), E, A we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By sss_anti_congruence_v1 on H, midpoint(A, D), A, H, midpoint(A, D), D we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sss_anti_congruence_v1 on D, F, A, A, F, D we get anti_congruent_triangles(A, D, F, D, A, F)
By aa_anti_similarity on D, H, midpoint(A, D), A, H, midpoint(A, D) we get anti_similar_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sss_anti_similarity_v1 on E, D, G, E, C, G we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_similarity_v1 on D, F, A, A, F, D we get anti_similar_triangles(A, D, F, D, A, F)
By sss_anti_congruence_v1 on H, D, midpoint(A, D), H, A, midpoint(A, D) we get anti_congruent_triangles(A, H, midpoint(A, D), D, H, midpoint(A, D))
By sas_anti_similarity on G, C, E, G, D, E we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_congruence_v1 on A, E, midpoint(A, D), D, E, midpoint(A, D) we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By sss_anti_similarity_v0 on G, D, E, G, C, E we get anti_similar_triangles(C, E, G, D, E, G)
By sss_anti_similarity_v0 on E, C, G, E, D, G we get anti_similar_triangles(C, E, G, D, E, G)
By sas_anti_congruence on D, midpoint(A, D), E, A, midpoint(A, D), E we get anti_congruent_triangles(A, E, midpoint(A, D), D, E, midpoint(A, D))
By line_containment_inequality on line_circle_tangent_point(Line(A, E), Circle(D, E, H)), G, Line(A, E) we get G != line_circle_tangent_point(Line(A, E), Circle(D, E, H))
By line_containment_inequality on line_intersection(g, Line(E, G)), H, g we get H != line_intersection(g, Line(E, G))
By line_containment_inequality on line_intersection(f, Line(E, G)), A, Line(E, G) we get A != line_intersection(f, Line(E, G))
By line_circle_intersection_has_at_most_two_points_0 on B, C, midpoint(B, C), c we get midpoint(B, C) not in c
By line_circle_intersection_has_at_most_two_points_0 on D, C, midpoint(C, D), k we get midpoint(C, D) not in k
By line_containment_inequality on line_intersection(g, Line(E, G)), F, g we get F != line_intersection(g, Line(E, G))
By line_containment_inequality on line_circle_tangent_point(Line(A, E), Circle(D, E, H)), midpoint(A, D), Line(A, E) we get midpoint(A, D) != line_circle_tangent_point(Line(A, E), Circle(D, E, H))
By line_containment_inequality on line_intersection(g, Line(E, G)), A, Line(E, G) we get A != line_intersection(g, Line(E, G))
By line_containment_inequality on line_circle_tangent_point(Line(D, F), Circle(B, D, E)), midpoint(A, D), Line(D, F) we get midpoint(A, D) != line_circle_tangent_point(Line(D, F), Circle(B, D, E))
By line_containment_inequality on line_intersection(f, Line(E, G)), D, Line(E, G) we get D != line_intersection(f, Line(E, G))
By line_containment_inequality on line_intersection(f, Line(E, G)), F, f we get F != line_intersection(f, Line(E, G))
By line_containment_inequality on line_circle_tangent_point(Line(D, F), Circle(B, D, E)), A, Line(D, F) we get A != line_circle_tangent_point(Line(D, F), Circle(B, D, E))
By line_containment_inequality on line_intersection(g, Line(E, G)), C, Line(E, G) we get C != line_intersection(g, Line(E, G))
By line_containment_inequality on line_circle_tangent_point(Line(D, F), Circle(B, D, E)), H, Line(D, F) we get H != line_circle_tangent_point(Line(D, F), Circle(B, D, E))
By line_containment_inequality on line_intersection(f, Line(E, G)), G, f we get G != line_intersection(f, Line(E, G))
By line_containment_inequality on line_circle_tangent_point(Line(A, E), Circle(D, E, H)), C, Line(A, E) we get C != line_circle_tangent_point(Line(A, E), Circle(D, E, H))
By line_containment_inequality on line_intersection(f, Line(E, G)), midpoint(A, D), Line(E, G) we get midpoint(A, D) != line_intersection(f, Line(E, G))
By line_containment_inequality on line_circle_tangent_point(Line(D, E), Circle(A, E, H)), midpoint(A, D), Line(D, E) we get midpoint(A, D) != line_circle_tangent_point(Line(D, E), Circle(A, E, H))
By line_containment_inequality on line_intersection(g, Line(E, G)), D, Line(E, G) we get D != line_intersection(g, Line(E, G))
By line_containment_inequality on line_circle_tangent_point(Line(D, E), Circle(A, E, H)), A, Line(D, E) we get A != line_circle_tangent_point(Line(D, E), Circle(A, E, H))
By line_circle_intersection_has_at_most_two_points_0 on H, E, F, Circle(D, E, H) we get F not in Circle(D, E, H)
By line_containment_inequality on line_circle_tangent_point(Line(D, E), Circle(A, E, H)), G, Line(D, E) we get G != line_circle_tangent_point(Line(D, E), Circle(A, E, H))
By line_containment_inequality on line_circle_tangent_point(Line(A, E), Circle(D, E, H)), H, Line(A, E) we get H != line_circle_tangent_point(Line(A, E), Circle(D, E, H))
By line_circle_intersection_has_at_most_two_points_0 on D, C, midpoint(C, D), c we get midpoint(C, D) not in c
By line_containment_inequality on line_circle_tangent_point(Line(A, E), Circle(D, E, H)), F, Line(A, E) we get F != line_circle_tangent_point(Line(A, E), Circle(D, E, H))
By line_containment_inequality on line_circle_tangent_point(Line(D, F), Circle(B, D, E)), E, Line(D, F) we get E != line_circle_tangent_point(Line(D, F), Circle(B, D, E))
By line_containment_inequality on line_circle_tangent_point(Line(D, E), Circle(A, E, H)), B, Line(D, E) we get B != line_circle_tangent_point(Line(D, E), Circle(A, E, H))
By line_containment_inequality on line_intersection(f, Line(E, G)), B, Line(E, G) we get B != line_intersection(f, Line(E, G))
By line_containment_inequality on line_circle_tangent_point(Line(D, F), Circle(B, D, E)), B, Line(D, F) we get B != line_circle_tangent_point(Line(D, F), Circle(B, D, E))
By line_containment_inequality on line_intersection(f, Line(E, G)), E, f we get E != line_intersection(f, Line(E, G))
By line_containment_inequality on line_circle_tangent_point(Line(D, F), Circle(B, D, E)), G, Line(D, F) we get G != line_circle_tangent_point(Line(D, F), Circle(B, D, E))
By line_containment_inequality on line_intersection(g, Line(E, G)), E, g we get E != line_intersection(g, Line(E, G))
By line_containment_inequality on line_circle_tangent_point(Line(A, E), Circle(D, E, H)), B, Line(A, E) we get B != line_circle_tangent_point(Line(A, E), Circle(D, E, H))
By circumcenter_perpendicular_bisectors on A, D, C we get circumcenter(A, C, D) in perpendicular_bisector(A, D), circumcenter(A, C, D) in perpendicular_bisector(C, D), circumcenter(A, C, D) in perpendicular_bisector(A, C)
By circumcenter_perpendicular_bisectors on B, C, D we get circumcenter(B, C, D) in perpendicular_bisector(B, C), circumcenter(B, C, D) in perpendicular_bisector(C, D), circumcenter(B, C, D) in perpendicular_bisector(B, D)
By external_angle_bisector_definition_v0_r on E, A, E, midpoint(A, D) we get Line(A, midpoint(A, D)) == external_angle_bisector(E, midpoint(A, D), E)
By external_angle_bisector_definition_v0_r on D, H, D, midpoint(A, D) we get Line(H, midpoint(A, D)) == external_angle_bisector(D, midpoint(A, D), D)
By external_angle_bisector_definition_v0_r on H, D, E, midpoint(A, D) we get Line(D, midpoint(A, D)) == external_angle_bisector(E, midpoint(A, D), H)
By isogonal_conjugate_sufficient_conditions_v1 on G, F, D, E, E we get E == isogonal_conjugate(E, D, F, G)
By log_of_2_times_distance on C, B, midpoint(B, C), B we get log(distance(B, C)) == 0.6931471805599453 + log(distance(B, midpoint(B, C)))
By perpendicular_lines_draw_intersection on Line(E, center(k)), g we get exists(line_intersection(g, Line(E, center(k))))
By external_angle_bisector_definition_v0_r on G, E, F, D we get Line(D, E) == external_angle_bisector(F, D, G)
By external_angle_bisector_definition_v0_r on A, H, A, midpoint(A, D) we get Line(H, midpoint(A, D)) == external_angle_bisector(A, midpoint(A, D), A)
By log_of_2_times_distance on B, C, midpoint(B, C), C we get log(distance(B, C)) == 0.6931471805599453 + log(distance(C, midpoint(B, C)))
By external_angle_bisector_definition_v0_r on H, A, E, midpoint(A, D) we get Line(A, midpoint(A, D)) == external_angle_bisector(E, midpoint(A, D), H)
By internal_angle_bisector_definition_v0_r on F, E, D, G we get Line(E, G) == internal_angle_bisector(D, G, F)
By perpendicular_bisector_properties on C, D we get perpendicular(Line(C, D), perpendicular_bisector(C, D)), midpoint(C, D) == line_intersection(Line(C, D), perpendicular_bisector(C, D))
By external_angle_bisector_definition_v0_r on H, D, H, midpoint(A, D) we get Line(D, midpoint(A, D)) == external_angle_bisector(H, midpoint(A, D), H)
By power_of_a_point_on_circle on line_circle_tangent_point(Line(A, E), Circle(D, E, H)), Circle(D, E, H) we get 0 == power_of_a_point(line_circle_tangent_point(Line(A, E), Circle(D, E, H)), Circle(D, E, H))
By external_angle_bisector_definition_v0_r on D, E, D, midpoint(A, D) we get Line(E, midpoint(A, D)) == external_angle_bisector(D, midpoint(A, D), D)
By isosceles_triangle_altitude_v3 on E, C, D we get identical(perpendicular_bisector(C, D), internal_angle_bisector(C, E, D), perpendicular_line(E, Line(C, D)))
By collinear_definition on C, B, midpoint(B, C) we get B in Line(C, midpoint(B, C)), midpoint(B, C) in Line(B, C), Line(B, C) == Line(C, midpoint(B, C)), 0 == 2 * angle(B, C, midpoint(B, C)) mod 360
By internal_angle_bisector_definition_v0_r on D, B, D, G we get Line(B, G) == internal_angle_bisector(D, G, D)
By internal_angle_bisector_definition_v0_r on G, B, G, D we get Line(B, D) == internal_angle_bisector(G, D, G)
By internal_angle_bisector_definition_v0_r on B, center(e), C, E we get Line(E, center(e)) == internal_angle_bisector(B, E, C)
By collinear_definition on F, H, E we get H in Line(E, F), E in Line(F, H), Line(E, F) == Line(F, H), 0 == 2 * angle(H, F, E) mod 360
By perpendicular_lines_draw_intersection on Line(B, C), Line(E, center(e)) we get exists(line_intersection(Line(B, C), Line(E, center(e))))
By external_angle_bisector_definition_v0_r on E, D, E, midpoint(A, D) we get Line(D, midpoint(A, D)) == external_angle_bisector(E, midpoint(A, D), E)
By external_angle_bisector_definition_v0_r on H, A, H, midpoint(A, D) we get Line(A, midpoint(A, D)) == external_angle_bisector(H, midpoint(A, D), H)
By internal_angle_bisector_definition_v0_r on midpoint(A, D), E, midpoint(A, D), H we get Line(E, H) == internal_angle_bisector(midpoint(A, D), H, midpoint(A, D))
By collinear_definition on H, F, E we get F in Line(E, H), E in Line(F, H), Line(E, H) == Line(F, H), 0 == 2 * angle(F, H, E) mod 360
By internal_angle_bisector_definition_v0_r on H, E, H, midpoint(A, D) we get Line(E, midpoint(A, D)) == internal_angle_bisector(H, midpoint(A, D), H)
By isosceles_triangle_midpoint on E, B, C we get midpoint(B, C) in median(E, B, C)
By internal_angle_bisector_definition_v0_r on H, midpoint(A, D), H, E we get Line(E, midpoint(A, D)) == internal_angle_bisector(H, E, H)
By log_of_2_times_distance on D, C, midpoint(C, D), C we get log(distance(C, D)) == 0.6931471805599453 + log(distance(C, midpoint(C, D)))
By power_of_a_point_in_circle on line_circle_tangent_point(Line(D, F), Circle(B, D, E)), Circle(B, D, E) we get 0 == power_of_a_point(line_circle_tangent_point(Line(D, F), Circle(B, D, E)), Circle(B, D, E))
By isosceles_triangle_altitude_v3 on center(k), D, C we get identical(perpendicular_bisector(C, D), internal_angle_bisector(C, center(k), D), perpendicular_line(center(k), Line(C, D)))
By isosceles_triangle_midpoint on F, D, A we get midpoint(A, D) in median(F, A, D)
By collinear_definition on B, midpoint(B, C), C we get midpoint(B, C) in Line(B, C), C in Line(B, midpoint(B, C)), Line(B, C) == Line(B, midpoint(B, C)), 0 == 2 * angle(midpoint(B, C), B, C) mod 360
By power_of_a_point_on_circle on line_circle_tangent_point(Line(D, E), Circle(A, E, H)), Circle(A, E, H) we get 0 == power_of_a_point(line_circle_tangent_point(Line(D, E), Circle(A, E, H)), Circle(A, E, H))
By log_of_2_times_distance on D, A, C, midpoint(B, C) we get log(distance(A, D)) == 0.6931471805599453 + log(distance(C, midpoint(B, C)))
By power_of_a_point_on_circle on G, d we get 0 == power_of_a_point(G, d)
By internal_angle_bisector_definition_v0_r on D, G, D, B we get Line(B, G) == internal_angle_bisector(D, B, D)
By isosceles_triangle_midpoint on E, C, D we get midpoint(C, D) in median(E, C, D)
By log_of_2_times_distance on D, A, B, midpoint(B, C) we get log(distance(A, D)) == 0.6931471805599453 + log(distance(B, midpoint(B, C)))
By internal_angle_bisector_definition_v0_r on E, H, E, midpoint(A, D) we get Line(H, midpoint(A, D)) == internal_angle_bisector(E, midpoint(A, D), E)
By internal_angle_bisector_definition_v0_r on G, D, G, B we get Line(B, D) == internal_angle_bisector(G, B, G)
By internal_angle_bisector_definition_v0_r on B, G, B, D we get Line(D, G) == internal_angle_bisector(B, D, B)
By internal_angle_bisector_definition_v0_r on D, center(k), C, E we get Line(E, center(k)) == internal_angle_bisector(C, E, D)
By collinear_definition on C, D, midpoint(C, D) we get D in Line(C, midpoint(C, D)), midpoint(C, D) in Line(C, D), Line(C, D) == Line(C, midpoint(C, D)), 0 == 2 * angle(D, C, midpoint(C, D)) mod 360
By collinear_definition on C, midpoint(C, D), D we get midpoint(C, D) in Line(C, D), D in Line(C, midpoint(C, D)), Line(C, D) == Line(C, midpoint(C, D)), 0 == 2 * angle(midpoint(C, D), C, D) mod 360
By internal_angle_bisector_definition_v0_r on E, midpoint(A, D), E, H we get Line(H, midpoint(A, D)) == internal_angle_bisector(E, H, E)
By external_angle_bisector_definition_v0_r on A, E, A, midpoint(A, D) we get Line(E, midpoint(A, D)) == external_angle_bisector(A, midpoint(A, D), A)
By perpendicular_bisector_properties on B, C we get perpendicular(Line(B, C), perpendicular_bisector(B, C)), midpoint(B, C) == line_intersection(Line(B, C), perpendicular_bisector(B, C))
By collinear_definition on B, C, midpoint(B, C) we get C in Line(B, midpoint(B, C)), midpoint(B, C) in Line(B, C), Line(B, C) == Line(B, midpoint(B, C)), 0 == 2 * angle(C, B, midpoint(B, C)) mod 360
By collinear_definition on F, E, H we get E in Line(F, H), H in Line(E, F), Line(E, F) == Line(F, H), 0 == 2 * angle(E, F, H) mod 360
By collinear_definition on D, C, midpoint(C, D) we get C in Line(D, midpoint(C, D)), midpoint(C, D) in Line(C, D), Line(C, D) == Line(D, midpoint(C, D)), 0 == 2 * angle(C, D, midpoint(C, D)) mod 360
By collinear_definition on D, midpoint(C, D), C we get midpoint(C, D) in Line(C, D), C in Line(D, midpoint(C, D)), Line(C, D) == Line(D, midpoint(C, D)), 0 == 2 * angle(midpoint(C, D), D, C) mod 360
By internal_angle_bisector_definition_v0_r on D, E, C, G we get Line(E, G) == internal_angle_bisector(C, G, D)
By isosceles_triangle_altitude_v1 on midpoint(B, C), B, C we get identical(perpendicular_bisector(B, C), internal_angle_bisector(B, midpoint(B, C), C), perpendicular_line(midpoint(B, C), Line(B, C)))
By internal_angle_bisector_definition_v0_r on D, E, A, G we get Line(E, G) == internal_angle_bisector(A, G, D)
By internal_angle_bisector_definition_v0_r on midpoint(A, D), H, midpoint(A, D), E we get Line(E, H) == internal_angle_bisector(midpoint(A, D), E, midpoint(A, D))
By log_of_2_times_distance on C, D, D, midpoint(C, D) we get log(distance(C, D)) == 0.6931471805599453 + log(distance(D, midpoint(C, D)))
By isosceles_triangle_altitude_v1 on midpoint(C, D), D, C we get identical(perpendicular_bisector(C, D), internal_angle_bisector(C, midpoint(C, D), D), perpendicular_line(midpoint(C, D), Line(C, D)))
By collinear_definition on C, midpoint(B, C), B we get midpoint(B, C) in Line(B, C), B in Line(C, midpoint(B, C)), Line(B, C) == Line(C, midpoint(B, C)), 0 == 2 * angle(midpoint(B, C), C, B) mod 360
By internal_angle_bisector_definition_v0_r on B, D, B, G we get Line(D, G) == internal_angle_bisector(B, G, B)
By isosceles_triangle_altitude_v1 on midpoint(C, D), C, D we get identical(perpendicular_bisector(C, D), internal_angle_bisector(C, midpoint(C, D), D), perpendicular_line(midpoint(C, D), Line(C, D)))
By collinear_definition on H, E, F we get E in Line(F, H), F in Line(E, H), Line(E, H) == Line(F, H), 0 == 2 * angle(E, H, F) mod 360
By isosceles_triangle_altitude_v3 on center(e), B, C we get identical(perpendicular_bisector(B, C), internal_angle_bisector(B, center(e), C), perpendicular_line(center(e), Line(B, C)))
By isosceles_triangle_altitude_v3 on midpoint(C, D), C, D we get identical(perpendicular_bisector(C, D), internal_angle_bisector(C, midpoint(C, D), D), perpendicular_line(midpoint(C, D), Line(C, D)))
By isosceles_triangle_altitude_v1 on midpoint(B, C), C, B we get identical(perpendicular_bisector(B, C), internal_angle_bisector(B, midpoint(B, C), C), perpendicular_line(midpoint(B, C), Line(B, C)))
By isosceles_triangle_altitude_v2 on center(e), C, B we get identical(perpendicular_bisector(B, C), internal_angle_bisector(B, center(e), C), perpendicular_line(center(e), Line(B, C)))
By isosceles_triangle_altitude_v2 on center(k), C, D we get identical(perpendicular_bisector(C, D), internal_angle_bisector(C, center(k), D), perpendicular_line(center(k), Line(C, D)))
By isosceles_triangle_altitude_v3 on center(e), C, B we get identical(perpendicular_bisector(B, C), internal_angle_bisector(B, center(e), C), perpendicular_line(center(e), Line(B, C)))
By isosceles_triangle_altitude_v3 on center(k), C, D we get identical(perpendicular_bisector(C, D), internal_angle_bisector(C, center(k), D), perpendicular_line(center(k), Line(C, D)))
By isosceles_triangle_altitude_v2 on center(k), D, C we get identical(perpendicular_bisector(C, D), internal_angle_bisector(C, center(k), D), perpendicular_line(center(k), Line(C, D)))
By isosceles_triangle_altitude_v2 on center(e), B, C we get identical(perpendicular_bisector(B, C), internal_angle_bisector(B, center(e), C), perpendicular_line(center(e), Line(B, C)))
By isosceles_triangle_altitude_v3 on midpoint(B, C), B, C we get identical(perpendicular_bisector(B, C), internal_angle_bisector(B, midpoint(B, C), C), perpendicular_line(midpoint(B, C), Line(B, C)))
By isosceles_triangle_altitude_v3 on midpoint(B, C), C, B we get identical(perpendicular_bisector(B, C), internal_angle_bisector(B, midpoint(B, C), C), perpendicular_line(midpoint(B, C), Line(B, C)))
By isosceles_triangle_altitude_v3 on midpoint(C, D), D, C we get identical(perpendicular_bisector(C, D), internal_angle_bisector(C, midpoint(C, D), D), perpendicular_line(midpoint(C, D), Line(C, D)))
By isosceles_triangle_altitude_v3 on E, D, C we get identical(perpendicular_bisector(C, D), internal_angle_bisector(C, E, D), perpendicular_line(E, Line(C, D)))
By isosceles_triangle_altitude_v1 on E, D, C we get identical(perpendicular_bisector(C, D), internal_angle_bisector(C, E, D), perpendicular_line(E, Line(C, D)))
By isosceles_triangle_altitude_v1 on E, C, D we get identical(perpendicular_bisector(C, D), internal_angle_bisector(C, E, D), perpendicular_line(E, Line(C, D)))
By altitude_definition on F, midpoint(A, D), A, Line(E, F) we get Line(E, F) == altitude(F, A, midpoint(A, D))
By collinear_definition on midpoint(C, D), D, C we get D in Line(C, midpoint(C, D)), C in Line(D, midpoint(C, D)), Line(C, midpoint(C, D)) == Line(D, midpoint(C, D)), 0 == 2 * angle(D, midpoint(C, D), C) mod 360
By isosceles_triangle_properties on midpoint(B, C), C, B we get distance(B, midpoint(B, C)) == distance(C, midpoint(B, C)), angle(C, B, midpoint(B, C)) == angle(midpoint(B, C), C, B) mod 360
By power_of_a_point_definition on F, A, G, d we get log(power_of_a_point(F, d)) == log(distance(A, F)) + log(distance(F, G))
By altitude_definition on H, D, midpoint(A, D), Line(E, F) we get Line(E, F) == altitude(H, D, midpoint(A, D))
By altitude_definition on A, H, midpoint(A, D), Line(A, D) we get Line(A, D) == altitude(A, H, midpoint(A, D))
By altitude_definition on D, midpoint(A, D), E, Line(A, D) we get Line(A, D) == altitude(D, E, midpoint(A, D))
By radical_axis_definition_v0 on line_intersection(g, Line(E, G)), k, c we get power_of_a_point(line_intersection(g, Line(E, G)), c) == power_of_a_point(line_intersection(g, Line(E, G)), k)
By altitude_definition on D, midpoint(A, D), H, Line(A, D) we get Line(A, D) == altitude(D, H, midpoint(A, D))
By isosceles_triangle_properties on midpoint(C, D), C, D we get distance(C, midpoint(C, D)) == distance(D, midpoint(C, D)), angle(C, D, midpoint(C, D)) == angle(midpoint(C, D), C, D) mod 360
By power_of_a_point_definition on G, D, B, Circle(B, D, E) we get log(distance(D, G)) + log(distance(B, G)) == log(power_of_a_point(G, Circle(B, D, E)))
By isosceles_triangle_properties on midpoint(B, C), B, C we get distance(B, midpoint(B, C)) == distance(C, midpoint(B, C)), angle(B, C, midpoint(B, C)) == angle(midpoint(B, C), B, C) mod 360
By altitude_definition on E, D, midpoint(A, D), Line(E, F) we get Line(E, F) == altitude(E, D, midpoint(A, D))
By radical_axis_definition_v0 on line_circle_tangent_point(Line(D, E), Circle(A, E, H)), d, k we get power_of_a_point(line_circle_tangent_point(Line(D, E), Circle(A, E, H)), d) == power_of_a_point(line_circle_tangent_point(Line(D, E), Circle(A, E, H)), k)
By altitude_definition on H, midpoint(A, D), A, Line(E, F) we get Line(E, F) == altitude(H, A, midpoint(A, D))
By altitude_definition on E, B, C, Line(E, center(e)) we get altitude(E, B, C) == Line(E, center(e))
By collinear_definition on midpoint(B, C), C, B we get C in Line(B, midpoint(B, C)), B in Line(C, midpoint(B, C)), Line(B, midpoint(B, C)) == Line(C, midpoint(B, C)), 0 == 2 * angle(C, midpoint(B, C), B) mod 360
By collinear_definition on midpoint(B, C), B, C we get B in Line(C, midpoint(B, C)), C in Line(B, midpoint(B, C)), Line(B, midpoint(B, C)) == Line(C, midpoint(B, C)), 0 == 2 * angle(B, midpoint(B, C), C) mod 360
By power_of_a_point_definition on C, G, A, d we get log(power_of_a_point(C, d)) == log(distance(C, G)) + log(distance(A, C))
By altitude_definition on A, midpoint(A, D), E, Line(A, D) we get Line(A, D) == altitude(A, E, midpoint(A, D))
By isosceles_triangle_altitude_v3 on E, B, C we get identical(perpendicular_bisector(B, C), internal_angle_bisector(B, E, C), perpendicular_line(E, Line(B, C)))
By isosceles_triangle_altitude_v3 on E, C, B we get identical(perpendicular_bisector(B, C), internal_angle_bisector(B, E, C), perpendicular_line(E, Line(B, C)))
By collinear_definition on midpoint(C, D), C, D we get C in Line(D, midpoint(C, D)), D in Line(C, midpoint(C, D)), Line(C, midpoint(C, D)) == Line(D, midpoint(C, D)), 0 == 2 * angle(C, midpoint(C, D), D) mod 360
By isosceles_triangle_properties on midpoint(C, D), D, C we get distance(C, midpoint(C, D)) == distance(D, midpoint(C, D)), angle(D, C, midpoint(C, D)) == angle(midpoint(C, D), D, C) mod 360
By altitude_definition on F, midpoint(A, D), D, Line(E, F) we get Line(E, F) == altitude(F, D, midpoint(A, D))
By altitude_definition on E, A, midpoint(A, D), Line(E, F) we get Line(E, F) == altitude(E, A, midpoint(A, D))
By power_of_a_point_definition on B, G, D, d we get log(power_of_a_point(B, d)) == log(distance(B, G)) + log(distance(B, D))
By isosceles_trapezoid_perpendicular_bisector on D, C, B, A we get perpendicular_bisector(A, B) == perpendicular_bisector(C, D)
By isosceles_triangle_altitude_v2 on E, B, A we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, E, B), perpendicular_line(E, Line(A, B)))
By perpendicular_bisector_sufficient_conditions on A, B, E, G we get Line(E, G) == perpendicular_bisector(A, B)
By isosceles_triangle_altitude_v1 on G, B, A we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, G, B), perpendicular_line(G, Line(A, B)))
By isosceles_triangle_altitude_v2 on E, A, B we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, E, B), perpendicular_line(E, Line(A, B)))
By isosceles_triangle_altitude_v1 on E, B, A we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, E, B), perpendicular_line(E, Line(A, B)))
By isosceles_triangle_altitude_v2 on G, B, A we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, G, B), perpendicular_line(G, Line(A, B)))
By isosceles_triangle_altitude_v2 on G, A, B we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, G, B), perpendicular_line(G, Line(A, B)))
By isosceles_triangle_altitude_v1 on E, A, B we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, E, B), perpendicular_line(E, Line(A, B)))
By isosceles_triangle_altitude_v1 on G, A, B we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, G, B), perpendicular_line(G, Line(A, B)))
By between_implies_angles on C, midpoint(B, C), B we get 180 == angle(C, midpoint(B, C), B) mod 360, 0 == angle(midpoint(B, C), B, C) mod 360, 0 == angle(B, C, midpoint(B, C)) mod 360
By power_of_a_point_definition on midpoint(A, D), E, H, Circle(D, E, H) we get log(power_of_a_point(midpoint(A, D), Circle(D, E, H))) == log(distance(E, midpoint(A, D))) + log(distance(H, midpoint(A, D)))
By between_implies_angles on B, midpoint(B, C), C we get 180 == angle(B, midpoint(B, C), C) mod 360, 0 == angle(midpoint(B, C), C, B) mod 360, 0 == angle(C, B, midpoint(B, C)) mod 360
By between_implies_angles on D, midpoint(C, D), C we get 180 == angle(D, midpoint(C, D), C) mod 360, 0 == angle(midpoint(C, D), C, D) mod 360, 0 == angle(C, D, midpoint(C, D)) mod 360
By between_implies_angles on C, midpoint(C, D), D we get 180 == angle(C, midpoint(C, D), D) mod 360, 0 == angle(midpoint(C, D), D, C) mod 360, 0 == angle(D, C, midpoint(C, D)) mod 360
By power_of_a_point_definition on midpoint(A, D), E, H, Circle(A, E, H) we get log(power_of_a_point(midpoint(A, D), Circle(A, E, H))) == log(distance(E, midpoint(A, D))) + log(distance(H, midpoint(A, D)))
By concyclic_sufficient_conditions_v1 on G, D, H, F we get concyclic(D, F, G, H)
By line_definition on line_intersection(f, Line(E, G)), A, f we get f == Line(A, line_intersection(f, Line(E, G)))
By line_definition on midpoint(C, D), G, Line(E, G) we get Line(E, G) == Line(G, midpoint(C, D))
By line_definition on line_intersection(f, Line(E, G)), B, f we get f == Line(B, line_intersection(f, Line(E, G)))
By concyclic_sufficient_conditions_v0 on F, H, D, center(k) we get concyclic(D, F, H, center(k))
By line_definition on E, line_intersection(f, Line(E, G)), Line(E, G) we get Line(E, G) == Line(E, line_intersection(f, Line(E, G)))
By line_definition on line_intersection(f, Line(E, G)), G, Line(E, G) we get Line(E, G) == Line(G, line_intersection(f, Line(E, G)))
By perpendicular_line_definition on C, h, perpendicular_bisector(A, C) we get h == perpendicular_line(C, perpendicular_bisector(A, C))
By perpendicular_line_definition on midpoint(A, B), Line(E, G), g we get Line(E, G) == perpendicular_line(midpoint(A, B), g)
By circumcenter_perpendicular_bisectors on C, A, B we get circumcenter(A, B, C) in perpendicular_bisector(A, C), circumcenter(A, B, C) in perpendicular_bisector(A, B), circumcenter(A, B, C) in perpendicular_bisector(B, C)
By circumcenter_perpendicular_bisectors on D, B, A we get circumcenter(A, B, D) in perpendicular_bisector(B, D), circumcenter(A, B, D) in perpendicular_bisector(A, B), circumcenter(A, B, D) in perpendicular_bisector(A, D)
By perpendicular_line_definition on midpoint(B, C), Line(B, C), median(E, B, C) we get Line(B, C) == perpendicular_line(midpoint(B, C), median(E, B, C))
By perpendicular_line_definition on A, h, perpendicular_bisector(A, C) we get h == perpendicular_line(A, perpendicular_bisector(A, C))
By median_definition on E, B, A, Line(E, G) we get Line(E, G) == median(E, A, B)
By perpendicular_line_definition on midpoint(A, D), Line(A, D), Line(G, center(e)) we get Line(A, D) == perpendicular_line(midpoint(A, D), Line(G, center(e)))
By perpendicular_line_definition on center(k), Line(E, G), f we get Line(E, G) == perpendicular_line(center(k), f)
By perpendicular_line_definition on A, Line(A, D), Line(G, center(e)) we get Line(A, D) == perpendicular_line(A, Line(G, center(e)))
By perpendicular_line_definition on D, Line(B, D), perpendicular_bisector(B, D) we get Line(B, D) == perpendicular_line(D, perpendicular_bisector(B, D))
By perpendicular_line_definition on G, Line(G, center(e)), Line(A, D) we get Line(G, center(e)) == perpendicular_line(G, Line(A, D))
By line_intersection_definition on center(k), Line(F, center(k)), Line(E, G) we get center(k) == line_intersection(Line(E, G), Line(F, center(k)))
By perpendicular_line_definition on D, Line(A, D), Line(G, center(e)) we get Line(A, D) == perpendicular_line(D, Line(G, center(e)))
By perpendicular_line_definition on E, perpendicular_bisector(A, C), h we get perpendicular_line(E, h) == perpendicular_bisector(A, C)
By median_definition on G, C, D, Line(E, G) we get Line(E, G) == median(G, C, D)
By perpendicular_line_definition on E, perpendicular_bisector(B, D), Line(B, D) we get perpendicular_bisector(B, D) == perpendicular_line(E, Line(B, D))
By perpendicular_line_definition on F, h, perpendicular_bisector(A, C) we get h == perpendicular_line(F, perpendicular_bisector(A, C))
By perpendicular_line_definition on center(e), Line(G, center(e)), Line(A, D) we get Line(G, center(e)) == perpendicular_line(center(e), Line(A, D))
By perpendicular_line_definition on G, Line(B, D), perpendicular_bisector(B, D) we get Line(B, D) == perpendicular_line(G, perpendicular_bisector(B, D))
By line_intersection_definition on center(k), Line(D, center(k)), Line(E, G) we get center(k) == line_intersection(Line(E, G), Line(D, center(k)))
By line_intersection_definition on center(k), Line(C, center(k)), Line(E, G) we get center(k) == line_intersection(Line(E, G), Line(C, center(k)))
By median_definition on G, A, B, Line(E, G) we get Line(E, G) == median(G, A, B)
By median_definition on E, C, A, perpendicular_bisector(A, C) we get median(E, A, C) == perpendicular_bisector(A, C)
By median_definition on E, D, B, perpendicular_bisector(B, D) we get median(E, B, D) == perpendicular_bisector(B, D)
By perpendicular_line_definition on G, h, perpendicular_bisector(A, C) we get h == perpendicular_line(G, perpendicular_bisector(A, C))
By perpendicular_line_definition on B, Line(B, D), perpendicular_bisector(B, D) we get Line(B, D) == perpendicular_line(B, perpendicular_bisector(B, D))
By line_unique_intersection_v1 on Line(B, C), g, C, midpoint(C, D) we get midpoint(C, D) not in Line(B, C)
By line_unique_intersection_v1 on Line(A, E), Line(E, G), E, center(k) we get center(k) not in Line(A, E)
By line_unique_intersection_v1 on Line(D, center(k)), Line(E, G), center(k), E we get E not in Line(D, center(k))
By line_unique_intersection_v1 on Line(B, E), f, B, line_intersection(f, Line(E, G)) we get line_intersection(f, Line(E, G)) not in Line(B, E)
By line_unique_intersection_v1 on Line(D, E), Line(E, G), E, line_intersection(f, Line(E, G)) we get line_intersection(f, Line(E, G)) not in Line(D, E)
By line_unique_intersection_v1 on Line(C, E), Line(B, C), C, midpoint(B, C) we get midpoint(B, C) not in Line(C, E)
By line_unique_intersection_v1 on Line(A, E), f, A, line_intersection(f, Line(E, G)) we get line_intersection(f, Line(E, G)) not in Line(A, E)
By line_unique_intersection_v1 on Line(B, D), Line(E, G), G, midpoint(C, D) we get midpoint(C, D) not in Line(B, D)
By line_unique_intersection_v1 on h, f, A, line_intersection(f, Line(E, G)) we get line_intersection(f, Line(E, G)) not in h
By line_unique_intersection_v1 on Line(F, center(k)), Line(E, G), center(k), E we get E not in Line(F, center(k))
By line_unique_intersection_v1 on Line(B, E), Line(E, G), E, center(k) we get center(k) not in Line(B, E)
By line_unique_intersection_v1 on Line(D, E), Line(E, G), E, center(k) we get center(k) not in Line(D, E)
By line_unique_intersection_v1 on Line(E, F), Line(E, G), E, center(k) we get center(k) not in Line(E, F)
By line_unique_intersection_v1 on Line(A, D), f, A, line_intersection(f, Line(E, G)) we get line_intersection(f, Line(E, G)) not in Line(A, D)
By line_unique_intersection_v1 on Line(A, E), Line(E, G), E, midpoint(C, D) we get midpoint(C, D) not in Line(A, E)
By line_unique_intersection_v1 on Line(B, D), Line(B, C), B, midpoint(B, C) we get midpoint(B, C) not in Line(B, D)
By line_unique_intersection_v1 on Line(C, E), Line(E, G), E, line_intersection(f, Line(E, G)) we get line_intersection(f, Line(E, G)) not in Line(C, E)
By line_unique_intersection_v1 on Line(C, E), Line(E, G), E, center(k) we get center(k) not in Line(C, E)
By line_unique_intersection_v1 on median(E, B, C), Line(B, C), midpoint(B, C), B we get B not in median(E, B, C)
By line_unique_intersection_v1 on median(E, B, C), Line(B, C), midpoint(B, C), C we get C not in median(E, B, C)
By line_unique_intersection_v1 on Line(D, H), g, D, midpoint(C, D) we get midpoint(C, D) not in Line(D, H)
By line_unique_intersection_v1 on Line(C, E), g, C, midpoint(C, D) we get midpoint(C, D) not in Line(C, E)
By line_unique_intersection_v1 on f, Line(B, C), B, midpoint(B, C) we get midpoint(B, C) not in f
By line_unique_intersection_v1 on Line(D, E), Line(E, G), E, midpoint(C, D) we get midpoint(C, D) not in Line(D, E)
By line_unique_intersection_v1 on Line(B, D), f, B, line_intersection(f, Line(E, G)) we get line_intersection(f, Line(E, G)) not in Line(B, D)
By line_unique_intersection_v1 on Line(C, center(k)), Line(E, G), center(k), E we get E not in Line(C, center(k))
By line_unique_intersection_v1 on Line(E, F), Line(E, G), E, line_intersection(f, Line(E, G)) we get line_intersection(f, Line(E, G)) not in Line(E, F)
By line_unique_intersection_v1 on h, Line(B, C), C, midpoint(B, C) we get midpoint(B, C) not in h
By line_unique_intersection_v1 on Line(E, F), Line(E, G), E, midpoint(C, D) we get midpoint(C, D) not in Line(E, F)
By line_unique_intersection_v1 on Line(A, H), f, A, line_intersection(f, Line(E, G)) we get line_intersection(f, Line(E, G)) not in Line(A, H)
By line_unique_intersection_v1 on Line(A, D), g, D, midpoint(C, D) we get midpoint(C, D) not in Line(A, D)
By line_unique_intersection_v1 on h, g, C, midpoint(C, D) we get midpoint(C, D) not in h
By line_unique_intersection_v1 on Line(B, C), f, B, line_intersection(f, Line(E, G)) we get line_intersection(f, Line(E, G)) not in Line(B, C)
By line_unique_intersection_v1 on Line(B, E), Line(E, G), E, midpoint(C, D) we get midpoint(C, D) not in Line(B, E)
By line_unique_intersection_v1 on Line(D, F), g, D, midpoint(C, D) we get midpoint(C, D) not in Line(D, F)
By line_unique_intersection_v1 on Line(B, E), Line(B, C), B, midpoint(B, C) we get midpoint(B, C) not in Line(B, E)
By line_unique_intersection_v1 on g, Line(B, C), C, midpoint(B, C) we get midpoint(B, C) not in g
By collinear_and_not_between_implies_orientation on H, D, C, midpoint(C, D) we get orientation(C, D, H) == orientation(C, midpoint(C, D), H) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(f, Line(E, G)), C, A, F we get orientation(A, C, line_intersection(f, Line(E, G))) == orientation(A, F, line_intersection(f, Line(E, G))) mod 360
By same_angle_v1 on A, C, F, midpoint(A, D) we get angle(C, A, midpoint(A, D)) == angle(F, A, midpoint(A, D)) mod 360
By projection_definition on F, midpoint(A, D), Line(A, D) we get midpoint(A, D) == projection(F, Line(A, D))
By perpendicular_direction_conditions_v0 on B, midpoint(B, C), H, G we get perpendicular(Line(G, H), Line(B, midpoint(B, C)))
By collinear_and_not_between_implies_orientation on F, D, C, midpoint(C, D) we get orientation(C, D, F) == orientation(C, midpoint(C, D), F) mod 360
By same_angle_v1 on D, A, midpoint(A, D), F we get angle(A, D, F) == angle(midpoint(A, D), D, F) mod 360
By perpendicular_direction_conditions_v0 on C, midpoint(B, C), H, G we get perpendicular(Line(G, H), Line(C, midpoint(B, C)))
By perpendicular_direction_conditions_v0_r on midpoint(C, D), D, G, E we get 180 == 2 * direction(midpoint(C, D), D) - 2 * direction(G, E) mod 360
By collinear_and_not_between_implies_orientation on midpoint(A, D), D, C, midpoint(C, D) we get orientation(C, D, midpoint(A, D)) == orientation(C, midpoint(C, D), midpoint(A, D)) mod 360
By perpendicular_direction_conditions_v0_r on center(e), E, midpoint(B, C), C we get 180 == 2 * direction(center(e), E) - 2 * direction(midpoint(B, C), C) mod 360
By collinear_and_not_between_implies_orientation on midpoint(C, D), F, A, C we get orientation(A, C, midpoint(C, D)) == orientation(A, F, midpoint(C, D)) mod 360
By between_implies_orientation on midpoint(C, D), E, H, F we get orientation(E, H, midpoint(C, D)) == orientation(F, midpoint(C, D), H) mod 360, orientation(E, F, midpoint(C, D)) == orientation(E, H, midpoint(C, D)) mod 360
By between_implies_orientation on H, D, midpoint(C, D), C we get orientation(C, H, midpoint(C, D)) == orientation(D, midpoint(C, D), H) mod 360, orientation(C, H, D) == orientation(D, midpoint(C, D), H) mod 360
By collinear_and_not_between_implies_orientation on midpoint(C, D), F, A, G we get orientation(A, F, midpoint(C, D)) == orientation(A, G, midpoint(C, D)) mod 360
By between_implies_orientation on A, D, midpoint(C, D), C we get orientation(A, D, midpoint(C, D)) == orientation(A, midpoint(C, D), C) mod 360, orientation(A, D, C) == orientation(A, D, midpoint(C, D)) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(f, Line(E, G)), A, G, C we get orientation(A, line_intersection(f, Line(E, G)), G) == orientation(C, line_intersection(f, Line(E, G)), G) mod 360
By between_implies_orientation on midpoint(C, D), G, D, B we get orientation(B, midpoint(C, D), D) == orientation(D, midpoint(C, D), G) mod 360, orientation(B, midpoint(C, D), G) == orientation(D, midpoint(C, D), G) mod 360
By between_implies_orientation on midpoint(C, D), A, midpoint(A, D), D we get orientation(A, midpoint(A, D), midpoint(C, D)) == orientation(D, midpoint(C, D), midpoint(A, D)) mod 360, orientation(A, D, midpoint(C, D)) == orientation(A, midpoint(A, D), midpoint(C, D)) mod 360
By between_implies_orientation on midpoint(C, D), C, F, A we get orientation(A, midpoint(C, D), F) == orientation(C, F, midpoint(C, D)) mod 360, orientation(A, midpoint(C, D), C) == orientation(C, F, midpoint(C, D)) mod 360
By collinear_and_not_between_implies_orientation on midpoint(C, D), G, B, D we get orientation(B, D, midpoint(C, D)) == orientation(B, G, midpoint(C, D)) mod 360
By same_angle_v1 on A, G, F, midpoint(A, D) we get angle(F, A, midpoint(A, D)) == angle(G, A, midpoint(A, D)) mod 360
By collinear_and_not_between_implies_orientation on midpoint(A, D), midpoint(C, D), D, C we get orientation(C, midpoint(A, D), D) == orientation(D, midpoint(C, D), midpoint(A, D)) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(f, Line(E, G)), C, A, G we get orientation(A, C, line_intersection(f, Line(E, G))) == orientation(A, G, line_intersection(f, Line(E, G))) mod 360
By projection_definition on D, midpoint(C, D), Line(E, G) we get midpoint(C, D) == projection(D, Line(E, G))
By collinear_and_not_between_implies_orientation on A, midpoint(C, D), C, D we get orientation(A, C, D) == orientation(A, C, midpoint(C, D)) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(f, Line(E, G)), A, D, midpoint(A, D) we get orientation(A, line_intersection(f, Line(E, G)), D) == orientation(D, midpoint(A, D), line_intersection(f, Line(E, G))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), D, E, center(k) we get 180 == 2 * direction(midpoint(C, D), D) - 2 * direction(E, center(k)) mod 360
By perpendicular_direction_conditions_v0 on H, G, C, B we get perpendicular(Line(B, C), Line(G, H))
By between_implies_orientation on midpoint(A, D), D, midpoint(C, D), C we get orientation(C, midpoint(A, D), midpoint(C, D)) == orientation(D, midpoint(C, D), midpoint(A, D)) mod 360, orientation(C, midpoint(A, D), D) == orientation(D, midpoint(C, D), midpoint(A, D)) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(f, Line(E, G)), F, G, C we get orientation(C, line_intersection(f, Line(E, G)), G) == orientation(F, line_intersection(f, Line(E, G)), G) mod 360
By same_angle_v3 on H, E, F, G we get angle(E, H, G) == angle(F, H, G) + 180 mod 360
By same_angle_v0 on A, D, midpoint(A, D), F we get angle(D, A, F) == angle(midpoint(A, D), A, F) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(f, Line(E, G)), A, C, F we get orientation(A, line_intersection(f, Line(E, G)), C) == orientation(C, F, line_intersection(f, Line(E, G))) mod 360
By perpendicular_direction_conditions_v0_r on G, E, midpoint(C, D), C we get 180 == 2 * direction(G, E) - 2 * direction(midpoint(C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), D, center(k), E we get 180 == 2 * direction(midpoint(C, D), D) - 2 * direction(center(k), E) mod 360
By between_implies_orientation on B, C, midpoint(C, D), D we get orientation(B, C, midpoint(C, D)) == orientation(B, midpoint(C, D), D) mod 360, orientation(B, C, D) == orientation(B, C, midpoint(C, D)) mod 360
By collinear_and_not_between_implies_orientation on midpoint(C, D), C, F, G we get orientation(C, midpoint(C, D), F) == orientation(F, G, midpoint(C, D)) mod 360
By collinear_and_not_between_implies_orientation on midpoint(C, D), A, G, F we get orientation(A, midpoint(C, D), G) == orientation(F, midpoint(C, D), G) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(f, Line(E, G)), G, F, C we get orientation(C, line_intersection(f, Line(E, G)), F) == orientation(F, G, line_intersection(f, Line(E, G))) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(f, Line(E, G)), B, G, D we get orientation(B, line_intersection(f, Line(E, G)), G) == orientation(D, line_intersection(f, Line(E, G)), G) mod 360
By collinear_and_not_between_implies_orientation on G, midpoint(C, D), C, D we get orientation(C, D, G) == orientation(C, midpoint(C, D), G) mod 360
By between_implies_orientation on midpoint(C, D), A, C, G we get orientation(A, C, midpoint(C, D)) == orientation(C, G, midpoint(C, D)) mod 360, orientation(A, C, midpoint(C, D)) == orientation(A, G, midpoint(C, D)) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(f, Line(E, G)), D, B, G we get orientation(B, D, line_intersection(f, Line(E, G))) == orientation(B, G, line_intersection(f, Line(E, G))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), C, G, E we get 180 == 2 * direction(midpoint(C, D), C) - 2 * direction(G, E) mod 360
By perpendicular_direction_conditions_v0_r on E, center(k), midpoint(C, D), D we get 180 == 2 * direction(E, center(k)) - 2 * direction(midpoint(C, D), D) mod 360
By between_implies_orientation on midpoint(C, D), A, F, G we get orientation(A, F, midpoint(C, D)) == orientation(F, G, midpoint(C, D)) mod 360, orientation(A, F, midpoint(C, D)) == orientation(A, G, midpoint(C, D)) mod 360
By between_implies_orientation on center(k), F, H, E we get orientation(E, center(k), H) == orientation(F, H, center(k)) mod 360, orientation(E, center(k), F) == orientation(F, H, center(k)) mod 360
By between_implies_orientation on midpoint(C, D), G, F, A we get orientation(A, midpoint(C, D), F) == orientation(F, midpoint(C, D), G) mod 360, orientation(A, midpoint(C, D), G) == orientation(F, midpoint(C, D), G) mod 360
By between_implies_orientation on line_intersection(f, Line(E, G)), G, C, A we get orientation(A, line_intersection(f, Line(E, G)), C) == orientation(C, line_intersection(f, Line(E, G)), G) mod 360, orientation(A, line_intersection(f, Line(E, G)), G) == orientation(C, line_intersection(f, Line(E, G)), G) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(f, Line(E, G)), G, A, F we get orientation(A, F, line_intersection(f, Line(E, G))) == orientation(A, G, line_intersection(f, Line(E, G))) mod 360
By between_implies_orientation on midpoint(A, D), C, midpoint(C, D), D we get orientation(C, midpoint(C, D), midpoint(A, D)) == orientation(D, midpoint(A, D), midpoint(C, D)) mod 360, orientation(C, D, midpoint(A, D)) == orientation(C, midpoint(C, D), midpoint(A, D)) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(f, Line(E, G)), F, G, A we get orientation(A, line_intersection(f, Line(E, G)), G) == orientation(F, line_intersection(f, Line(E, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on center(e), E, midpoint(B, C), B we get 180 == 2 * direction(center(e), E) - 2 * direction(midpoint(B, C), B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), C, E, G we get 180 == 2 * direction(midpoint(C, D), C) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, C), C, E, center(e) we get 180 == 2 * direction(midpoint(B, C), C) - 2 * direction(E, center(e)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, C), C, center(e), E we get 180 == 2 * direction(midpoint(B, C), C) - 2 * direction(center(e), E) mod 360
By between_implies_orientation on E, B, midpoint(B, C), C we get orientation(B, midpoint(B, C), E) == orientation(C, E, midpoint(B, C)) mod 360, orientation(B, C, E) == orientation(B, midpoint(B, C), E) mod 360
By collinear_and_not_between_implies_orientation on E, midpoint(C, D), D, C we get orientation(C, E, D) == orientation(D, midpoint(C, D), E) mod 360
By collinear_and_not_between_implies_orientation on G, C, D, midpoint(C, D) we get orientation(C, G, D) == orientation(D, midpoint(C, D), G) mod 360
By collinear_and_not_between_implies_orientation on F, C, D, midpoint(C, D) we get orientation(C, F, D) == orientation(D, midpoint(C, D), F) mod 360
By collinear_and_not_between_implies_orientation on midpoint(C, D), C, G, F we get orientation(C, midpoint(C, D), G) == orientation(F, midpoint(C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, C), B, E, center(e) we get 180 == 2 * direction(midpoint(B, C), B) - 2 * direction(E, center(e)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), C, center(k), E we get 180 == 2 * direction(midpoint(C, D), C) - 2 * direction(center(k), E) mod 360
By between_implies_orientation on line_intersection(f, Line(E, G)), C, F, A we get orientation(A, line_intersection(f, Line(E, G)), F) == orientation(C, F, line_intersection(f, Line(E, G))) mod 360, orientation(A, line_intersection(f, Line(E, G)), C) == orientation(C, F, line_intersection(f, Line(E, G))) mod 360
By between_implies_orientation on midpoint(C, D), G, C, A we get orientation(A, midpoint(C, D), C) == orientation(C, midpoint(C, D), G) mod 360, orientation(A, midpoint(C, D), G) == orientation(C, midpoint(C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on center(k), E, midpoint(C, D), D we get 180 == 2 * direction(center(k), E) - 2 * direction(midpoint(C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on E, G, midpoint(C, D), C we get 180 == 2 * direction(E, G) - 2 * direction(midpoint(C, D), C) mod 360
By collinear_and_not_between_implies_orientation on midpoint(C, D), midpoint(A, D), D, A we get orientation(A, midpoint(C, D), D) == orientation(D, midpoint(A, D), midpoint(C, D)) mod 360
By between_implies_orientation on line_intersection(f, Line(E, G)), G, C, F we get orientation(C, F, line_intersection(f, Line(E, G))) == orientation(C, line_intersection(f, Line(E, G)), G) mod 360, orientation(C, line_intersection(f, Line(E, G)), G) == orientation(F, line_intersection(f, Line(E, G)), G) mod 360
By between_implies_orientation on midpoint(C, D), D, midpoint(A, D), A we get orientation(A, midpoint(C, D), midpoint(A, D)) == orientation(D, midpoint(A, D), midpoint(C, D)) mod 360, orientation(A, midpoint(C, D), D) == orientation(D, midpoint(A, D), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), C, E, center(k) we get 180 == 2 * direction(midpoint(C, D), C) - 2 * direction(E, center(k)) mod 360
By between_implies_orientation on midpoint(A, D), F, H, E we get orientation(E, midpoint(A, D), H) == orientation(F, H, midpoint(A, D)) mod 360, orientation(E, midpoint(A, D), F) == orientation(F, H, midpoint(A, D)) mod 360
By between_implies_orientation on E, C, midpoint(B, C), B we get orientation(B, E, midpoint(B, C)) == orientation(C, midpoint(B, C), E) mod 360, orientation(B, E, C) == orientation(C, midpoint(B, C), E) mod 360
By between_implies_orientation on F, D, midpoint(C, D), C we get orientation(C, F, midpoint(C, D)) == orientation(D, midpoint(C, D), F) mod 360, orientation(C, F, D) == orientation(D, midpoint(C, D), F) mod 360
By between_implies_orientation on line_intersection(f, Line(E, G)), A, C, G we get orientation(A, C, line_intersection(f, Line(E, G))) == orientation(C, G, line_intersection(f, Line(E, G))) mod 360, orientation(A, C, line_intersection(f, Line(E, G))) == orientation(A, G, line_intersection(f, Line(E, G))) mod 360
By between_implies_orientation on G, C, midpoint(C, D), D we get orientation(C, midpoint(C, D), G) == orientation(D, G, midpoint(C, D)) mod 360, orientation(C, D, G) == orientation(C, midpoint(C, D), G) mod 360
By collinear_and_not_between_implies_orientation on E, D, C, midpoint(C, D) we get orientation(C, D, E) == orientation(C, midpoint(C, D), E) mod 360
By between_implies_orientation on line_intersection(f, Line(E, G)), B, D, G we get orientation(B, D, line_intersection(f, Line(E, G))) == orientation(D, G, line_intersection(f, Line(E, G))) mod 360, orientation(B, D, line_intersection(f, Line(E, G))) == orientation(B, G, line_intersection(f, Line(E, G))) mod 360
By perpendicular_direction_conditions_v0_r on E, center(e), midpoint(B, C), B we get 180 == 2 * direction(E, center(e)) - 2 * direction(midpoint(B, C), B) mod 360
By between_implies_orientation on line_intersection(f, Line(E, G)), D, midpoint(A, D), A we get orientation(A, line_intersection(f, Line(E, G)), midpoint(A, D)) == orientation(D, midpoint(A, D), line_intersection(f, Line(E, G))) mod 360, orientation(A, line_intersection(f, Line(E, G)), D) == orientation(D, midpoint(A, D), line_intersection(f, Line(E, G))) mod 360
By perpendicular_direction_conditions_v0_r on G, E, midpoint(C, D), D we get 180 == 2 * direction(G, E) - 2 * direction(midpoint(C, D), D) mod 360
By between_implies_orientation on G, D, midpoint(C, D), C we get orientation(C, G, midpoint(C, D)) == orientation(D, midpoint(C, D), G) mod 360, orientation(C, G, D) == orientation(D, midpoint(C, D), G) mod 360
By between_implies_orientation on midpoint(C, D), F, H, E we get orientation(E, midpoint(C, D), H) == orientation(F, H, midpoint(C, D)) mod 360, orientation(E, midpoint(C, D), F) == orientation(F, H, midpoint(C, D)) mod 360
By between_implies_orientation on midpoint(C, D), G, C, F we get orientation(C, F, midpoint(C, D)) == orientation(C, midpoint(C, D), G) mod 360, orientation(C, midpoint(C, D), G) == orientation(F, midpoint(C, D), G) mod 360
By between_implies_orientation on E, C, midpoint(C, D), D we get orientation(C, midpoint(C, D), E) == orientation(D, E, midpoint(C, D)) mod 360, orientation(C, D, E) == orientation(C, midpoint(C, D), E) mod 360
By between_implies_orientation on midpoint(C, D), B, D, G we get orientation(B, D, midpoint(C, D)) == orientation(D, G, midpoint(C, D)) mod 360, orientation(B, D, midpoint(C, D)) == orientation(B, G, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on E, center(k), midpoint(C, D), C we get 180 == 2 * direction(E, center(k)) - 2 * direction(midpoint(C, D), C) mod 360
By between_implies_orientation on center(k), E, H, F we get orientation(E, H, center(k)) == orientation(F, center(k), H) mod 360, orientation(E, F, center(k)) == orientation(E, H, center(k)) mod 360
By projection_definition on E, midpoint(B, C), Line(B, C) we get midpoint(B, C) == projection(E, Line(B, C))
By between_implies_orientation on midpoint(C, D), A, F, C we get orientation(A, F, midpoint(C, D)) == orientation(C, midpoint(C, D), F) mod 360, orientation(A, C, midpoint(C, D)) == orientation(A, F, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), D, E, G we get 180 == 2 * direction(midpoint(C, D), D) - 2 * direction(E, G) mod 360
By between_implies_orientation on midpoint(A, D), E, H, F we get orientation(E, H, midpoint(A, D)) == orientation(F, midpoint(A, D), H) mod 360, orientation(E, F, midpoint(A, D)) == orientation(E, H, midpoint(A, D)) mod 360
By projection_definition on C, midpoint(B, C), median(E, B, C) we get midpoint(B, C) == projection(C, median(E, B, C))
By between_implies_orientation on A, C, midpoint(C, D), D we get orientation(A, C, midpoint(C, D)) == orientation(A, midpoint(C, D), D) mod 360, orientation(A, C, D) == orientation(A, C, midpoint(C, D)) mod 360
By between_implies_orientation on line_intersection(f, Line(E, G)), G, F, A we get orientation(A, line_intersection(f, Line(E, G)), F) == orientation(F, line_intersection(f, Line(E, G)), G) mod 360, orientation(A, line_intersection(f, Line(E, G)), G) == orientation(F, line_intersection(f, Line(E, G)), G) mod 360
By between_implies_orientation on F, C, midpoint(C, D), D we get orientation(C, midpoint(C, D), F) == orientation(D, F, midpoint(C, D)) mod 360, orientation(C, D, F) == orientation(C, midpoint(C, D), F) mod 360
By between_implies_orientation on line_intersection(f, Line(E, G)), A, midpoint(A, D), D we get orientation(A, midpoint(A, D), line_intersection(f, Line(E, G))) == orientation(D, line_intersection(f, Line(E, G)), midpoint(A, D)) mod 360, orientation(A, D, line_intersection(f, Line(E, G))) == orientation(A, midpoint(A, D), line_intersection(f, Line(E, G))) mod 360
By projection_definition on E, midpoint(C, D), g we get midpoint(C, D) == projection(E, g)
By between_implies_orientation on line_intersection(f, Line(E, G)), G, D, B we get orientation(B, line_intersection(f, Line(E, G)), D) == orientation(D, line_intersection(f, Line(E, G)), G) mod 360, orientation(B, line_intersection(f, Line(E, G)), G) == orientation(D, line_intersection(f, Line(E, G)), G) mod 360
By between_imply_not_between on C, midpoint(A, C), A we get collinear_and_not_between(A, C, midpoint(A, C))
By perpendicular_direction_conditions_v0_r on center(k), E, midpoint(C, D), C we get 180 == 2 * direction(center(k), E) - 2 * direction(midpoint(C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on E, center(e), midpoint(B, C), C we get 180 == 2 * direction(E, center(e)) - 2 * direction(midpoint(B, C), C) mod 360
By between_imply_not_between on A, midpoint(A, C), C we get collinear_and_not_between(C, A, midpoint(A, C))
By collinear_and_not_between_implies_orientation on B, C, D, midpoint(C, D) we get orientation(B, D, C) == orientation(B, D, midpoint(C, D)) mod 360
By between_implies_orientation on line_intersection(f, Line(E, G)), A, F, C we get orientation(A, F, line_intersection(f, Line(E, G))) == orientation(C, line_intersection(f, Line(E, G)), F) mod 360, orientation(A, C, line_intersection(f, Line(E, G))) == orientation(A, F, line_intersection(f, Line(E, G))) mod 360
By between_implies_orientation on line_intersection(f, Line(E, G)), F, H, E we get orientation(E, line_intersection(f, Line(E, G)), H) == orientation(F, H, line_intersection(f, Line(E, G))) mod 360, orientation(E, line_intersection(f, Line(E, G)), F) == orientation(F, H, line_intersection(f, Line(E, G))) mod 360
By projection_definition on B, midpoint(B, C), median(E, B, C) we get midpoint(B, C) == projection(B, median(E, B, C))
By between_implies_orientation on line_intersection(f, Line(E, G)), F, C, G we get orientation(C, G, line_intersection(f, Line(E, G))) == orientation(C, line_intersection(f, Line(E, G)), F) mod 360, orientation(C, line_intersection(f, Line(E, G)), F) == orientation(F, G, line_intersection(f, Line(E, G))) mod 360
By between_implies_orientation on midpoint(C, D), F, C, G we get orientation(C, G, midpoint(C, D)) == orientation(C, midpoint(C, D), F) mod 360, orientation(C, midpoint(C, D), F) == orientation(F, G, midpoint(C, D)) mod 360
By between_implies_orientation on H, C, midpoint(C, D), D we get orientation(C, midpoint(C, D), H) == orientation(D, H, midpoint(C, D)) mod 360, orientation(C, D, H) == orientation(C, midpoint(C, D), H) mod 360
By between_implies_orientation on line_intersection(f, Line(E, G)), E, H, F we get orientation(E, H, line_intersection(f, Line(E, G))) == orientation(F, line_intersection(f, Line(E, G)), H) mod 360, orientation(E, F, line_intersection(f, Line(E, G))) == orientation(E, H, line_intersection(f, Line(E, G))) mod 360
By perpendicular_direction_conditions_v0_r on E, G, midpoint(C, D), D we get 180 == 2 * direction(E, G) - 2 * direction(midpoint(C, D), D) mod 360
By between_implies_orientation on line_intersection(f, Line(E, G)), A, F, G we get orientation(A, F, line_intersection(f, Line(E, G))) == orientation(F, G, line_intersection(f, Line(E, G))) mod 360, orientation(A, F, line_intersection(f, Line(E, G))) == orientation(A, G, line_intersection(f, Line(E, G))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, C), B, center(e), E we get 180 == 2 * direction(midpoint(B, C), B) - 2 * direction(center(e), E) mod 360
By projection_definition on C, midpoint(C, D), Line(E, G) we get midpoint(C, D) == projection(C, Line(E, G))
By between_implies_orientation on B, D, midpoint(C, D), C we get orientation(B, D, midpoint(C, D)) == orientation(B, midpoint(C, D), C) mod 360, orientation(B, D, C) == orientation(B, D, midpoint(C, D)) mod 360
By between_implies_orientation on E, D, midpoint(C, D), C we get orientation(C, E, midpoint(C, D)) == orientation(D, midpoint(C, D), E) mod 360, orientation(C, E, D) == orientation(D, midpoint(C, D), E) mod 360
By between_imply_not_between on E, H, F we get collinear_and_not_between(F, E, H)
By between_imply_not_between on A, midpoint(A, B), B we get collinear_and_not_between(B, A, midpoint(A, B))
By between_imply_not_between on F, H, E we get collinear_and_not_between(E, F, H)
By between_imply_not_between on B, midpoint(B, D), D we get collinear_and_not_between(D, B, midpoint(B, D))
By between_imply_not_between on B, midpoint(A, B), A we get collinear_and_not_between(A, B, midpoint(A, B))
By between_imply_not_between on D, midpoint(B, D), B we get collinear_and_not_between(B, D, midpoint(B, D))
By different_points_v1 on midpoint(C, D), E we get 0 != distance(E, midpoint(C, D))
By same_angle_v0 on F, E, midpoint(A, D), D we get angle(E, F, D) == angle(midpoint(A, D), F, D) mod 360
By same_angle_v3 on midpoint(A, D), D, A, F we get angle(D, midpoint(A, D), F) == angle(A, midpoint(A, D), F) + 180 mod 360
By different_points_v1 on E, midpoint(B, C) we get 0 != distance(E, midpoint(B, C))
By different_points_v1 on midpoint(A, D), F we get 0 != distance(F, midpoint(A, D))
By different_points_v1 on F, H we get 0 != distance(F, H)
By same_angle_v3 on midpoint(A, D), F, H, A we get angle(F, midpoint(A, D), A) == angle(H, midpoint(A, D), A) + 180 mod 360
By same_angle_v0 on F, midpoint(A, D), E, C we get angle(E, F, C) == angle(midpoint(A, D), F, C) mod 360
By same_angle_v0 on F, H, midpoint(A, D), G we get angle(H, F, G) == angle(midpoint(A, D), F, G) mod 360
By same_angle_v0 on F, midpoint(A, D), E, G we get angle(E, F, G) == angle(midpoint(A, D), F, G) mod 360
By same_angle_v0 on G, F, A, H we get angle(A, G, H) == angle(F, G, H) mod 360
By perpendicular_direction_conditions_v0_r on B, C, midpoint(B, C), E we get 180 == 2 * direction(B, C) - 2 * direction(midpoint(B, C), E) mod 360
By same_angle_v1 on G, D, B, H we get angle(B, G, H) == angle(D, G, H) mod 360
By same_angle_v2 on midpoint(A, D), F, E, A we get angle(F, midpoint(A, D), A) == angle(E, midpoint(A, D), A) + 180 mod 360
By same_angle_v1 on F, E, midpoint(A, D), A we get angle(E, F, A) == angle(midpoint(A, D), F, A) mod 360
By orthocenter_concurrency on H, A, midpoint(A, D) we get orthocenter(A, H, midpoint(A, D)) in altitude(H, A, midpoint(A, D)), orthocenter(A, H, midpoint(A, D)) in altitude(A, H, midpoint(A, D)), orthocenter(A, H, midpoint(A, D)) in altitude(midpoint(A, D), A, H)
By same_angle_v1 on F, G, C, midpoint(A, D) we get angle(C, F, midpoint(A, D)) == angle(G, F, midpoint(A, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, C), E, midpoint(B, C), B we get 180 == 2 * direction(midpoint(B, C), E) - 2 * direction(midpoint(B, C), B) mod 360
By orthocenter_concurrency on E, D, midpoint(A, D) we get orthocenter(D, E, midpoint(A, D)) in altitude(E, D, midpoint(A, D)), orthocenter(D, E, midpoint(A, D)) in altitude(D, E, midpoint(A, D)), orthocenter(D, E, midpoint(A, D)) in altitude(midpoint(A, D), D, E)
By perpendicular_direction_conditions_v0_r on midpoint(C, D), E, C, D we get 180 == 2 * direction(midpoint(C, D), E) - 2 * direction(C, D) mod 360
By same_angle_v3 on F, A, C, midpoint(A, D) we get angle(A, F, midpoint(A, D)) == angle(C, F, midpoint(A, D)) + 180 mod 360
By same_angle_v2 on midpoint(A, D), E, F, D we get angle(E, midpoint(A, D), D) == angle(F, midpoint(A, D), D) + 180 mod 360
By same_angle_v3 on F, A, G, midpoint(A, D) we get angle(A, F, midpoint(A, D)) == angle(G, F, midpoint(A, D)) + 180 mod 360
By same_angle_v0 on F, midpoint(A, D), H, C we get angle(H, F, C) == angle(midpoint(A, D), F, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, C), E, C, midpoint(B, C) we get 180 == 2 * direction(midpoint(B, C), E) - 2 * direction(C, midpoint(B, C)) mod 360
By perpendicular_direction_conditions_v0_r on A, B, midpoint(C, D), E we get 180 == 2 * direction(A, B) - 2 * direction(midpoint(C, D), E) mod 360
By perpendicular_direction_conditions_v0_r on C, D, E, midpoint(C, D) we get 180 == 2 * direction(C, D) - 2 * direction(E, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), D, midpoint(C, D), E we get 180 == 2 * direction(midpoint(C, D), D) - 2 * direction(midpoint(C, D), E) mod 360
By same_angle_v0 on G, C, F, H we get angle(C, G, H) == angle(F, G, H) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(A, D), D, A we get 180 == 2 * direction(F, midpoint(A, D)) - 2 * direction(D, A) mod 360
By same_angle_v0 on G, C, A, H we get angle(A, G, H) == angle(C, G, H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), D, E, midpoint(C, D) we get 180 == 2 * direction(midpoint(C, D), D) - 2 * direction(E, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(C, D), midpoint(C, D), C we get 180 == 2 * direction(E, midpoint(C, D)) - 2 * direction(midpoint(C, D), C) mod 360
By same_angle_v1 on F, H, midpoint(A, D), A we get angle(H, F, A) == angle(midpoint(A, D), F, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), E, D, midpoint(C, D) we get 180 == 2 * direction(midpoint(C, D), E) - 2 * direction(D, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, C), E, B, midpoint(B, C) we get 180 == 2 * direction(midpoint(B, C), E) - 2 * direction(B, midpoint(B, C)) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(A, D), midpoint(A, D), F we get 180 == 2 * direction(A, midpoint(A, D)) - 2 * direction(midpoint(A, D), F) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(C, D), midpoint(C, D), D we get 180 == 2 * direction(E, midpoint(C, D)) - 2 * direction(midpoint(C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(A, D), A, midpoint(A, D) we get 180 == 2 * direction(F, midpoint(A, D)) - 2 * direction(A, midpoint(A, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, C), B, E, midpoint(B, C) we get 180 == 2 * direction(midpoint(B, C), B) - 2 * direction(E, midpoint(B, C)) mod 360
By same_angle_v0 on F, H, midpoint(A, D), D we get angle(H, F, D) == angle(midpoint(A, D), F, D) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(A, D), D, midpoint(A, D) we get 180 == 2 * direction(F, midpoint(A, D)) - 2 * direction(D, midpoint(A, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(C, D), midpoint(C, D), E we get 180 == 2 * direction(D, midpoint(C, D)) - 2 * direction(midpoint(C, D), E) mod 360
By same_angle_v2 on midpoint(A, D), H, F, D we get angle(H, midpoint(A, D), D) == angle(F, midpoint(A, D), D) + 180 mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, D), F, A, D we get 180 == 2 * direction(midpoint(A, D), F) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on B, A, midpoint(C, D), E we get 180 == 2 * direction(B, A) - 2 * direction(midpoint(C, D), E) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(A, D), F, midpoint(A, D) we get 180 == 2 * direction(D, midpoint(A, D)) - 2 * direction(F, midpoint(A, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, C), E, midpoint(B, C), C we get 180 == 2 * direction(midpoint(B, C), E) - 2 * direction(midpoint(B, C), C) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(C, D), E, midpoint(C, D) we get 180 == 2 * direction(C, midpoint(C, D)) - 2 * direction(E, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, C), E, C, B we get 180 == 2 * direction(midpoint(B, C), E) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(B, C), midpoint(B, C), B we get 180 == 2 * direction(E, midpoint(B, C)) - 2 * direction(midpoint(B, C), B) mod 360
By orthocenter_concurrency on E, A, midpoint(A, D) we get orthocenter(A, E, midpoint(A, D)) in altitude(E, A, midpoint(A, D)), orthocenter(A, E, midpoint(A, D)) in altitude(A, E, midpoint(A, D)), orthocenter(A, E, midpoint(A, D)) in altitude(midpoint(A, D), A, E)
By perpendicular_direction_conditions_v0_r on midpoint(C, D), E, midpoint(C, D), D we get 180 == 2 * direction(midpoint(C, D), E) - 2 * direction(midpoint(C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(B, C), E, midpoint(B, C) we get 180 == 2 * direction(C, midpoint(B, C)) - 2 * direction(E, midpoint(B, C)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), E, B, A we get 180 == 2 * direction(midpoint(C, D), E) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, D), F, A, midpoint(A, D) we get 180 == 2 * direction(midpoint(A, D), F) - 2 * direction(A, midpoint(A, D)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(C, D), D, midpoint(C, D) we get 180 == 2 * direction(E, midpoint(C, D)) - 2 * direction(D, midpoint(C, D)) mod 360
By orthocenter_concurrency on H, D, midpoint(A, D) we get orthocenter(D, H, midpoint(A, D)) in altitude(H, D, midpoint(A, D)), orthocenter(D, H, midpoint(A, D)) in altitude(D, H, midpoint(A, D)), orthocenter(D, H, midpoint(A, D)) in altitude(midpoint(A, D), D, H)
By perpendicular_direction_conditions_v0_r on E, midpoint(B, C), midpoint(B, C), C we get 180 == 2 * direction(E, midpoint(B, C)) - 2 * direction(midpoint(B, C), C) mod 360
By in_imply_collinear on midpoint(A, B), G, E we get collinear(E, G, midpoint(A, B))
By perpendicular_direction_conditions_v0_r on E, midpoint(C, D), A, B we get 180 == 2 * direction(E, midpoint(C, D)) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(B, C), B, midpoint(B, C) we get 180 == 2 * direction(E, midpoint(B, C)) - 2 * direction(B, midpoint(B, C)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), E, D, C we get 180 == 2 * direction(midpoint(C, D), E) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(B, C), B, C we get 180 == 2 * direction(E, midpoint(B, C)) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), E, midpoint(C, D), C we get 180 == 2 * direction(midpoint(C, D), E) - 2 * direction(midpoint(C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, C), B, midpoint(B, C), E we get 180 == 2 * direction(midpoint(B, C), B) - 2 * direction(midpoint(B, C), E) mod 360
By perpendicular_direction_conditions_v0_r on B, C, E, midpoint(B, C) we get 180 == 2 * direction(B, C) - 2 * direction(E, midpoint(B, C)) mod 360
By perpendicular_direction_conditions_v0_r on C, B, E, midpoint(B, C) we get 180 == 2 * direction(C, B) - 2 * direction(E, midpoint(B, C)) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(A, D), midpoint(A, D), D we get 180 == 2 * direction(F, midpoint(A, D)) - 2 * direction(midpoint(A, D), D) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(A, D), midpoint(A, D), A we get 180 == 2 * direction(F, midpoint(A, D)) - 2 * direction(midpoint(A, D), A) mod 360
By perpendicular_direction_conditions_v0_r on C, B, midpoint(B, C), E we get 180 == 2 * direction(C, B) - 2 * direction(midpoint(B, C), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), E, A, B we get 180 == 2 * direction(midpoint(C, D), E) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(B, C), midpoint(B, C), E we get 180 == 2 * direction(C, midpoint(B, C)) - 2 * direction(midpoint(B, C), E) mod 360
By in_imply_collinear on G, center(k), E we get collinear(E, G, center(k))
By perpendicular_direction_conditions_v0_r on E, midpoint(C, D), D, C we get 180 == 2 * direction(E, midpoint(C, D)) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, C), C, E, midpoint(B, C) we get 180 == 2 * direction(midpoint(B, C), C) - 2 * direction(E, midpoint(B, C)) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(A, D), A, D we get 180 == 2 * direction(F, midpoint(A, D)) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(C, D), midpoint(C, D), E we get 180 == 2 * direction(C, midpoint(C, D)) - 2 * direction(midpoint(C, D), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), C, midpoint(C, D), E we get 180 == 2 * direction(midpoint(C, D), C) - 2 * direction(midpoint(C, D), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), C, E, midpoint(C, D) we get 180 == 2 * direction(midpoint(C, D), C) - 2 * direction(E, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(B, C), midpoint(B, C), E we get 180 == 2 * direction(B, midpoint(B, C)) - 2 * direction(midpoint(B, C), E) mod 360
By perpendicular_direction_conditions_v0_r on B, A, E, midpoint(C, D) we get 180 == 2 * direction(B, A) - 2 * direction(E, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(C, D), C, midpoint(C, D) we get 180 == 2 * direction(E, midpoint(C, D)) - 2 * direction(C, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, D), F, D, midpoint(A, D) we get 180 == 2 * direction(midpoint(A, D), F) - 2 * direction(D, midpoint(A, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, A, midpoint(A, D), F we get 180 == 2 * direction(D, A) - 2 * direction(midpoint(A, D), F) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(A, D), F, midpoint(A, D) we get 180 == 2 * direction(A, midpoint(A, D)) - 2 * direction(F, midpoint(A, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, D), F, D, A we get 180 == 2 * direction(midpoint(A, D), F) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(C, D), C, D we get 180 == 2 * direction(E, midpoint(C, D)) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, D), A, midpoint(A, D), F we get 180 == 2 * direction(midpoint(A, D), A) - 2 * direction(midpoint(A, D), F) mod 360
By perpendicular_direction_conditions_v0_r on A, D, midpoint(A, D), F we get 180 == 2 * direction(A, D) - 2 * direction(midpoint(A, D), F) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(B, C), E, midpoint(B, C) we get 180 == 2 * direction(B, midpoint(B, C)) - 2 * direction(E, midpoint(B, C)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, C), C, midpoint(B, C), E we get 180 == 2 * direction(midpoint(B, C), C) - 2 * direction(midpoint(B, C), E) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(C, D), E, midpoint(C, D) we get 180 == 2 * direction(D, midpoint(C, D)) - 2 * direction(E, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, A, F, midpoint(A, D) we get 180 == 2 * direction(D, A) - 2 * direction(F, midpoint(A, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, C), E, B, C we get 180 == 2 * direction(midpoint(B, C), E) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on A, D, F, midpoint(A, D) we get 180 == 2 * direction(A, D) - 2 * direction(F, midpoint(A, D)) mod 360
By perpendicular_direction_conditions_v0_r on A, B, E, midpoint(C, D) we get 180 == 2 * direction(A, B) - 2 * direction(E, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, C, midpoint(C, D), E we get 180 == 2 * direction(D, C) - 2 * direction(midpoint(C, D), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), E, C, midpoint(C, D) we get 180 == 2 * direction(midpoint(C, D), E) - 2 * direction(C, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, C, E, midpoint(C, D) we get 180 == 2 * direction(D, C) - 2 * direction(E, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(B, C), C, midpoint(B, C) we get 180 == 2 * direction(E, midpoint(B, C)) - 2 * direction(C, midpoint(B, C)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(A, D), midpoint(A, D), F we get 180 == 2 * direction(D, midpoint(A, D)) - 2 * direction(midpoint(A, D), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, D), F, midpoint(A, D), D we get 180 == 2 * direction(midpoint(A, D), F) - 2 * direction(midpoint(A, D), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, D), A, F, midpoint(A, D) we get 180 == 2 * direction(midpoint(A, D), A) - 2 * direction(F, midpoint(A, D)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(C, D), B, A we get 180 == 2 * direction(E, midpoint(C, D)) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(B, C), C, B we get 180 == 2 * direction(E, midpoint(B, C)) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, D), F, midpoint(A, D), A we get 180 == 2 * direction(midpoint(A, D), F) - 2 * direction(midpoint(A, D), A) mod 360
By perpendicular_direction_conditions_v0_r on C, D, midpoint(C, D), E we get 180 == 2 * direction(C, D) - 2 * direction(midpoint(C, D), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, D), D, F, midpoint(A, D) we get 180 == 2 * direction(midpoint(A, D), D) - 2 * direction(F, midpoint(A, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, D), D, midpoint(A, D), F we get 180 == 2 * direction(midpoint(A, D), D) - 2 * direction(midpoint(A, D), F) mod 360
By reverse_direction on C, midpoint(C, D) we get 180 == direction(C, midpoint(C, D)) - direction(midpoint(C, D), C) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on D, midpoint(C, D), E we get not_collinear(D, E, midpoint(C, D)), exists(Line(E, midpoint(C, D)))
By in_imply_collinear on midpoint(A, B), center(k), E we get collinear(E, center(k), midpoint(A, B))
By point_on_perpendicular_bisector on C, D, line_intersection(f, Line(E, G)), Line(E, G) we get distance(C, line_intersection(f, Line(E, G))) == distance(D, line_intersection(f, Line(E, G)))
By in_imply_collinear on line_intersection(f, Line(E, G)), E, midpoint(C, D) we get collinear(E, midpoint(C, D), line_intersection(f, Line(E, G)))
By not_in_line_equivalent_to_not_collinear_v0 on C, E, center(k) we get not_collinear(C, E, center(k)), exists(Line(E, center(k)))
By internal_angle_bisector_definition_v0 on A, center(k), B, E we get angle(A, E, center(k)) == angle(center(k), E, B) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on H, midpoint(C, D), C we get not_collinear(C, H, midpoint(C, D)), exists(Line(C, midpoint(C, D)))
By in_imply_collinear on line_intersection(f, Line(E, G)), center(k), E we get collinear(E, center(k), line_intersection(f, Line(E, G)))
By not_in_line_equivalent_to_not_collinear_v0 on B, E, midpoint(C, D) we get not_collinear(B, E, midpoint(C, D)), exists(Line(E, midpoint(C, D)))
By in_imply_collinear on midpoint(A, B), E, midpoint(C, D) we get collinear(E, midpoint(A, B), midpoint(C, D))
By not_in_line_equivalent_to_not_collinear_v0 on B, midpoint(C, D), C we get not_collinear(B, C, midpoint(C, D)), exists(Line(C, midpoint(C, D)))
By line_inequality on Line(G, H), Line(B, C), G we get Line(B, C) != Line(G, H)
By line_inequality on perpendicular_bisector(A, C), g, E we get g != perpendicular_bisector(A, C)
By double_perpendicular_and_parallel_v0 on Line(G, center(e)), Line(A, D), Line(E, F) we get parallel(Line(E, F), Line(G, center(e)))
By not_in_line_equivalent_to_not_collinear_v0 on D, center(k), E we get not_collinear(D, E, center(k)), exists(Line(E, center(k)))
By point_on_perpendicular_bisector on A, B, center(k), Line(E, G) we get distance(A, center(k)) == distance(B, center(k))
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(A, D), C, midpoint(C, D) we get not_collinear(C, midpoint(A, D), midpoint(C, D)), exists(Line(C, midpoint(C, D)))
By collinear_definition on H, midpoint(A, D), F we get midpoint(A, D) in Line(F, H), F in Line(H, midpoint(A, D)), Line(F, H) == Line(H, midpoint(A, D)), 0 == 2 * angle(midpoint(A, D), H, F) mod 360
By collinear_definition on H, F, midpoint(A, D) we get F in Line(H, midpoint(A, D)), midpoint(A, D) in Line(F, H), Line(F, H) == Line(H, midpoint(A, D)), 0 == 2 * angle(F, H, midpoint(A, D)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on B, midpoint(C, D), D we get not_collinear(B, D, midpoint(C, D)), exists(Line(D, midpoint(C, D)))
By aa_anti_similarity on A, F, H, D, F, H we get anti_similar_triangles(A, F, H, D, F, H)
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(A, D), E, midpoint(C, D) we get not_collinear(E, midpoint(A, D), midpoint(C, D)), exists(Line(E, midpoint(C, D)))
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(A, D), D, midpoint(C, D) we get not_collinear(D, midpoint(A, D), midpoint(C, D)), exists(Line(D, midpoint(C, D)))
By collinear_definition on E, F, midpoint(A, D) we get F in Line(E, midpoint(A, D)), midpoint(A, D) in Line(E, F), Line(E, F) == Line(E, midpoint(A, D)), 0 == 2 * angle(F, E, midpoint(A, D)) mod 360
By line_circle_intersection_has_at_most_two_points_0 on E, G, midpoint(C, D), e we get midpoint(C, D) not in e
By point_on_perpendicular_bisector on D, C, midpoint(A, B), Line(E, G) we get distance(C, midpoint(A, B)) == distance(D, midpoint(A, B))
By line_inequality on perpendicular_bisector(B, D), g, E we get g != perpendicular_bisector(B, D)
By not_in_line_equivalent_to_not_collinear_v0 on G, C, midpoint(C, D) we get not_collinear(C, G, midpoint(C, D)), exists(Line(C, midpoint(C, D)))
By line_containment_inequality on midpoint(B, C), D, Line(B, C) we get D != midpoint(B, C)
By aa_anti_similarity on D, F, H, A, F, H we get anti_similar_triangles(A, F, H, D, F, H)
By not_in_line_equivalent_to_not_collinear_v0 on F, midpoint(C, D), D we get not_collinear(D, F, midpoint(C, D)), exists(Line(D, midpoint(C, D)))
By reverse_direction on midpoint(C, D), C we get 180 == direction(midpoint(C, D), C) - direction(C, midpoint(C, D)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on D, B, midpoint(B, C) we get not_collinear(B, D, midpoint(B, C)), exists(Line(B, midpoint(B, C)))
By not_in_line_equivalent_to_not_collinear_v0 on A, midpoint(C, D), E we get not_collinear(A, E, midpoint(C, D)), exists(Line(E, midpoint(C, D)))
By internal_angle_bisector_definition_v0 on midpoint(A, D), F, midpoint(A, D), E we get angle(F, E, midpoint(A, D)) == angle(midpoint(A, D), E, F) mod 360
By reverse_direction on B, midpoint(B, C) we get 180 == direction(B, midpoint(B, C)) - direction(midpoint(B, C), B) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on E, C, midpoint(B, C) we get not_collinear(C, E, midpoint(B, C)), exists(Line(C, midpoint(B, C)))
By not_in_line_equivalent_to_not_collinear_v0 on F, midpoint(B, C), C we get not_collinear(C, F, midpoint(B, C)), exists(Line(C, midpoint(B, C)))
By internal_angle_bisector_definition_v0 on B, center(k), A, E we get angle(B, E, center(k)) == angle(center(k), E, A) mod 360
By reverse_direction on midpoint(B, C), C we get 180 == direction(midpoint(B, C), C) - direction(C, midpoint(B, C)) mod 360
By point_on_perpendicular_bisector on B, A, midpoint(C, D), Line(E, G) we get distance(A, midpoint(C, D)) == distance(B, midpoint(C, D))
By reverse_direction on D, midpoint(C, D) we get 180 == direction(D, midpoint(C, D)) - direction(midpoint(C, D), D) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on G, midpoint(C, D), D we get not_collinear(D, G, midpoint(C, D)), exists(Line(D, midpoint(C, D)))
By internal_angle_bisector_definition_v0 on midpoint(A, D), F, midpoint(A, D), H we get angle(F, H, midpoint(A, D)) == angle(midpoint(A, D), H, F) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on E, C, midpoint(C, D) we get not_collinear(C, E, midpoint(C, D)), exists(Line(C, midpoint(C, D)))
By line_inequality on perpendicular_bisector(A, C), Line(B, C), E we get Line(B, C) != perpendicular_bisector(A, C)
By reverse_direction on midpoint(B, C), B we get 180 == direction(midpoint(B, C), B) - direction(B, midpoint(B, C)) mod 360
By collinear_definition on E, midpoint(A, D), F we get midpoint(A, D) in Line(E, F), F in Line(E, midpoint(A, D)), Line(E, F) == Line(E, midpoint(A, D)), 0 == 2 * angle(midpoint(A, D), E, F) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on G, B, midpoint(B, C) we get not_collinear(B, G, midpoint(B, C)), exists(Line(B, midpoint(B, C)))
By reverse_direction on midpoint(C, D), D we get 180 == direction(midpoint(C, D), D) - direction(D, midpoint(C, D)) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on A, G, H we get A not in Line(G, H)
By not_in_line_equivalent_to_not_collinear_v0 on A, center(k), E we get not_collinear(A, E, center(k)), exists(Line(E, center(k)))
By not_in_line_equivalent_to_not_collinear_v0 on E, midpoint(B, C), B we get not_collinear(B, E, midpoint(B, C)), exists(Line(B, midpoint(B, C)))
By line_inequality on Line(G, H), Line(A, D), H we get Line(A, D) != Line(G, H)
By line_containment_inequality on midpoint(B, C), H, Line(B, C) we get H != midpoint(B, C)
By not_in_line_equivalent_to_not_collinear_v0 on B, center(k), E we get not_collinear(B, E, center(k)), exists(Line(E, center(k)))
By between_imply_segment_sum on E, H, F we get distance(E, F) == distance(E, H) + distance(F, H)
By aa_anti_similarity on D, H, F, A, H, F we get anti_similar_triangles(A, F, H, D, F, H)
By not_in_line_equivalent_to_not_collinear_v0 on F, B, midpoint(B, C) we get not_collinear(B, F, midpoint(B, C)), exists(Line(B, midpoint(B, C)))
By not_in_line_equivalent_to_not_collinear_v0 on H, center(k), E we get not_collinear(E, H, center(k)), exists(Line(E, center(k)))
By line_inequality on Line(G, H), Line(A, E), G we get Line(A, E) != Line(G, H)
By reverse_direction on C, midpoint(B, C) we get 180 == direction(C, midpoint(B, C)) - direction(midpoint(B, C), C) mod 360
By point_on_perpendicular_bisector on A, B, line_intersection(f, Line(E, G)), Line(E, G) we get distance(A, line_intersection(f, Line(E, G))) == distance(B, line_intersection(f, Line(E, G)))
By line_containment_inequality on center(k), B, Line(E, G) we get B != center(k)
By line_inequality on perpendicular_bisector(B, D), Line(B, C), E we get Line(B, C) != perpendicular_bisector(B, D)
By line_circle_intersection_has_at_most_two_points_0 on G, E, line_intersection(f, Line(E, G)), e we get line_intersection(f, Line(E, G)) not in e
By not_in_line_equivalent_to_not_collinear_v0 on G, C, midpoint(B, C) we get not_collinear(C, G, midpoint(B, C)), exists(Line(C, midpoint(B, C)))
By not_in_line_equivalent_to_not_collinear_v0 on A, midpoint(C, D), D we get not_collinear(A, D, midpoint(C, D)), exists(Line(D, midpoint(C, D)))
By aa_anti_similarity on A, H, F, D, H, F we get anti_similar_triangles(A, F, H, D, F, H)
By not_in_line_equivalent_to_not_collinear_v0 on A, midpoint(B, C), C we get not_collinear(A, C, midpoint(B, C)), exists(Line(C, midpoint(B, C)))
By line_inequality on perpendicular_bisector(B, D), Line(A, D), E we get Line(A, D) != perpendicular_bisector(B, D)
By not_in_line_equivalent_to_not_collinear_v0 on F, E, midpoint(C, D) we get not_collinear(E, F, midpoint(C, D)), exists(Line(E, midpoint(C, D)))
By not_in_line_equivalent_to_not_collinear_v0 on H, midpoint(B, C), C we get not_collinear(C, H, midpoint(B, C)), exists(Line(C, midpoint(B, C)))
By line_inequality on perpendicular_bisector(A, C), h, E we get h != perpendicular_bisector(A, C)
By line_inequality on Line(G, H), Line(C, E), H we get Line(C, E) != Line(G, H)
By not_in_line_equivalent_to_not_collinear_v0 on A, midpoint(C, D), C we get not_collinear(A, C, midpoint(C, D)), exists(Line(C, midpoint(C, D)))
By not_in_line_equivalent_to_not_collinear_v0 on D, midpoint(B, C), C we get not_collinear(C, D, midpoint(B, C)), exists(Line(C, midpoint(B, C)))
By line_inequality on Line(G, H), g, H we get g != Line(G, H)
By line_containment_inequality on midpoint(A, B), H, Line(E, G) we get H != midpoint(A, B)
By not_in_line_equivalent_to_not_collinear_v0 on F, E, center(k) we get not_collinear(E, F, center(k)), exists(Line(E, center(k)))
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(A, D), center(k), E we get not_collinear(E, center(k), midpoint(A, D)), exists(Line(E, center(k)))
By line_containment_inequality on midpoint(A, B), C, Line(E, G) we get C != midpoint(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on midpoint(A, D), G, H we get midpoint(A, D) not in Line(G, H)
By line_inequality on Line(G, H), Line(E, G), H we get Line(E, G) != Line(G, H)
By not_in_line_equivalent_to_not_collinear_v0 on A, midpoint(B, C), B we get not_collinear(A, B, midpoint(B, C)), exists(Line(B, midpoint(B, C)))
By not_in_line_equivalent_to_not_collinear_v0 on H, midpoint(B, C), B we get not_collinear(B, H, midpoint(B, C)), exists(Line(B, midpoint(B, C)))
By line_inequality on Line(G, H), Line(B, E), G we get Line(B, E) != Line(G, H)
By line_circle_intersection_has_at_most_two_points_0 on A, C, midpoint(A, C), c we get midpoint(A, C) not in c
By not_in_line_equivalent_to_not_collinear_v0 on B, midpoint(A, D), F we get not_collinear(B, F, midpoint(A, D)), exists(Line(F, midpoint(A, D)))
By not_in_line_equivalent_to_not_collinear_v0_r on C, G, H we get C not in Line(G, H)
By not_in_line_equivalent_to_not_collinear_v0 on F, midpoint(C, D), C we get not_collinear(C, F, midpoint(C, D)), exists(Line(C, midpoint(C, D)))
By not_in_line_equivalent_to_not_collinear_v0 on H, D, midpoint(C, D) we get not_collinear(D, H, midpoint(C, D)), exists(Line(D, midpoint(C, D)))
By not_in_line_equivalent_to_not_collinear_v0 on H, midpoint(C, D), E we get not_collinear(E, H, midpoint(C, D)), exists(Line(E, midpoint(C, D)))
By line_inequality on Line(G, H), Line(D, F), G we get Line(D, F) != Line(G, H)
By not_in_line_equivalent_to_not_collinear_v0_r on E, H, G we get E not in Line(G, H)
By line_containment_inequality on midpoint(A, B), D, Line(E, G) we get D != midpoint(A, B)
By line_inequality on Line(G, H), Line(D, H), G we get Line(D, H) != Line(G, H)
By not_in_line_equivalent_to_not_collinear_v0_r on F, H, G we get F not in Line(G, H)
By line_containment_inequality on midpoint(A, B), midpoint(A, D), Line(E, G) we get midpoint(A, B) != midpoint(A, D)
By line_inequality on perpendicular_bisector(B, D), Line(A, H), E we get Line(A, H) != perpendicular_bisector(B, D)
By line_circle_intersection_has_at_most_two_points_0 on D, B, midpoint(B, D), Circle(B, D, E) we get midpoint(B, D) not in Circle(B, D, E)
By line_inequality on Line(G, H), Line(D, E), G we get Line(D, E) != Line(G, H)
By line_inequality on perpendicular_bisector(A, C), f, E we get f != perpendicular_bisector(A, C)
By line_inequality on perpendicular_bisector(B, D), Line(B, D), E we get Line(B, D) != perpendicular_bisector(B, D)
By line_inequality on perpendicular_bisector(A, C), Line(A, H), E we get Line(A, H) != perpendicular_bisector(A, C)
By line_containment_inequality on midpoint(B, C), F, Line(B, C) we get F != midpoint(B, C)
By line_inequality on Line(G, H), f, G we get f != Line(G, H)
By line_inequality on perpendicular_bisector(B, D), h, E we get h != perpendicular_bisector(B, D)
By line_circle_intersection_has_at_most_two_points_0 on A, B, line_intersection(f, Line(E, G)), c we get line_intersection(f, Line(E, G)) not in c
By line_circle_intersection_has_at_most_two_points_0 on A, B, midpoint(A, B), c we get midpoint(A, B) not in c
By line_inequality on perpendicular_bisector(B, D), f, E we get f != perpendicular_bisector(B, D)
By line_containment_inequality on midpoint(B, C), G, Line(B, C) we get G != midpoint(B, C)
By line_inequality on perpendicular_bisector(A, C), Line(A, D), E we get Line(A, D) != perpendicular_bisector(A, C)
By line_circle_intersection_has_at_most_two_points_0 on G, E, midpoint(C, D), d we get midpoint(C, D) not in d
By line_inequality on perpendicular_bisector(A, C), Line(B, D), E we get Line(B, D) != perpendicular_bisector(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on B, H, G we get B not in Line(G, H)
By line_inequality on Line(G, H), Line(B, D), H we get Line(B, D) != Line(G, H)
By line_inequality on perpendicular_bisector(B, D), Line(D, F), E we get Line(D, F) != perpendicular_bisector(B, D)
By line_circle_intersection_has_at_most_two_points_0 on B, D, midpoint(B, D), c we get midpoint(B, D) not in c
By line_containment_inequality on midpoint(B, C), A, Line(B, C) we get A != midpoint(B, C)
By line_circle_intersection_has_at_most_two_points_0 on E, G, line_intersection(f, Line(E, G)), d we get line_intersection(f, Line(E, G)) not in d
By line_inequality on perpendicular_bisector(A, C), Line(D, H), E we get Line(D, H) != perpendicular_bisector(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on D, G, H we get D not in Line(G, H)
By line_containment_inequality on center(k), midpoint(A, D), Line(E, G) we get center(k) != midpoint(A, D)
By line_containment_inequality on midpoint(A, B), F, Line(E, G) we get F != midpoint(A, B)
By line_inequality on Line(G, H), h, H we get h != Line(G, H)
By line_circle_intersection_has_at_most_two_points_0 on E, F, midpoint(A, D), k we get midpoint(A, D) not in k
By line_inequality on perpendicular_bisector(B, D), Line(D, H), E we get Line(D, H) != perpendicular_bisector(B, D)
By line_inequality on Line(G, H), Line(E, F), G we get Line(E, F) != Line(G, H)
By line_inequality on perpendicular_bisector(A, C), Line(D, F), E we get Line(D, F) != perpendicular_bisector(A, C)
By line_containment_inequality on center(k), A, Line(E, G) we get A != center(k)
By line_inequality on Line(G, H), Line(A, H), G we get Line(A, H) != Line(G, H)
By perpendicular_lines_draw_intersection on perpendicular_bisector(A, C), h we get exists(line_intersection(h, perpendicular_bisector(A, C)))
By sss_anti_congruence_v0 on D, H, G, G, H, D we get anti_congruent_triangles(D, G, H, G, D, H)
By sas_anti_similarity on D, C, E, G, D, H we get anti_similar_triangles(C, D, E, D, G, H)
By sas_similarity on E, D, C, H, D, G we get similar_triangles(C, D, E, G, D, H)
By internal_angle_bisector_definition_v0 on B, midpoint(B, C), C, E we get angle(B, E, midpoint(B, C)) == angle(midpoint(B, C), E, C) mod 360
By log_of_2_times_distance on B, D, midpoint(B, D), B we get log(distance(B, D)) == 0.6931471805599453 + log(distance(B, midpoint(B, D)))
By aa_similarity on B, E, A, G, H, A we get similar_triangles(A, B, E, A, G, H)
By concyclic_definition_0 on F, center(k), D, G we get G in Circle(D, F, center(k))
By internal_angle_bisector_definition_v0_r on F, E, midpoint(A, D), H we get Line(E, H) == internal_angle_bisector(F, H, midpoint(A, D))
By aa_anti_similarity on G, A, H, A, B, E we get anti_similar_triangles(A, B, E, G, A, H)
By sas_anti_similarity on H, A, G, E, B, A we get anti_similar_triangles(A, B, E, G, A, H)
By isosceles_triangle_properties on H, G, A we get distance(A, H) == distance(G, H), angle(G, A, H) == angle(H, G, A) mod 360
By aa_similarity on G, A, H, B, A, E we get similar_triangles(A, B, E, A, G, H)
By isosceles_triangle_midpoint on G, A, B we get midpoint(A, B) in median(G, A, B)
By sss_anti_congruence_v0 on G, E, H, E, G, H we get anti_congruent_triangles(E, G, H, G, E, H)
By sss_anti_congruence_v1 on G, A, H, A, G, H we get anti_congruent_triangles(A, G, H, G, A, H)
By sss_anti_congruence_v0 on G, H, A, A, H, G we get anti_congruent_triangles(A, G, H, G, A, H)
By aa_similarity on C, E, D, G, H, D we get similar_triangles(C, D, E, G, D, H)
By perpendicular_lines_draw_intersection on Line(B, D), perpendicular_bisector(B, D) we get exists(line_intersection(Line(B, D), perpendicular_bisector(B, D)))
By sss_anti_congruence_v1 on A, H, G, G, H, A we get anti_congruent_triangles(A, G, H, G, A, H)
By internal_angle_bisector_definition_v0_r on midpoint(C, D), D, midpoint(C, D), C we get Line(C, D) == internal_angle_bisector(midpoint(C, D), C, midpoint(C, D))
By internal_angle_bisector_definition_v0 on D, midpoint(A, D), A, F we get angle(D, F, midpoint(A, D)) == angle(midpoint(A, D), F, A) mod 360
By sss_anti_congruence_v1 on G, H, E, E, H, G we get anti_congruent_triangles(E, G, H, G, E, H)
By log_of_2_times_distance on A, C, C, midpoint(A, C) we get log(distance(A, C)) == 0.6931471805599453 + log(distance(C, midpoint(A, C)))
By sss_anti_congruence_v1 on H, E, G, H, G, E we get anti_congruent_triangles(E, G, H, G, E, H)
By concyclic_definition_0 on F, G, D, center(k) we get center(k) in Circle(D, F, G)
By aa_similarity on G, H, A, B, E, A we get similar_triangles(A, B, E, A, G, H)
By sss_anti_congruence_v0 on G, H, A, A, H, G we get anti_congruent_triangles(A, G, H, G, A, H)
By sss_anti_congruence_v0 on A, G, H, G, A, H we get anti_congruent_triangles(A, G, H, G, A, H)
By sss_anti_congruence_v0 on H, G, E, H, E, G we get anti_congruent_triangles(E, G, H, G, E, H)
By perpendicular_angle_conditions_v0 on E, midpoint(C, D), C we get angle(E, midpoint(C, D), C) == orientation(C, E, midpoint(C, D)) mod 360
By sss_anti_congruence_v0 on A, G, H, G, A, H we get anti_congruent_triangles(A, G, H, G, A, H)
By collinear_definition on E, midpoint(C, D), G we get midpoint(C, D) in Line(E, G), G in Line(E, midpoint(C, D)), Line(E, G) == Line(E, midpoint(C, D)), 0 == 2 * angle(midpoint(C, D), E, G) mod 360
By log_of_2_times_distance on B, D, C, midpoint(A, C) we get log(distance(B, D)) == 0.6931471805599453 + log(distance(C, midpoint(A, C)))
By sss_anti_congruence_v1 on D, G, H, G, D, H we get anti_congruent_triangles(D, G, H, G, D, H)
By sss_anti_congruence_v0 on E, H, G, G, H, E we get anti_congruent_triangles(E, G, H, G, E, H)
By external_angle_bisector_definition_v0 on D, midpoint(A, D), C, F we get 180 == angle(D, F, midpoint(A, D)) + angle(C, F, midpoint(A, D)) mod 360
By internal_angle_bisector_definition_v0_r on H, E, H, F we get Line(E, F) == internal_angle_bisector(H, F, H)
By sss_anti_congruence_v1 on H, E, G, H, G, E we get anti_congruent_triangles(E, G, H, G, E, H)
By sss_anti_congruence_v1 on H, E, G, H, G, E we get anti_congruent_triangles(E, G, H, G, E, H)
By internal_angle_bisector_definition_v0 on A, midpoint(C, D), B, E we get angle(A, E, midpoint(C, D)) == angle(midpoint(C, D), E, B) mod 360
By sss_anti_congruence_v0 on H, G, E, H, E, G we get anti_congruent_triangles(E, G, H, G, E, H)
By log_of_2_times_distance on A, B, midpoint(A, B), A we get log(distance(A, B)) == 0.6931471805599453 + log(distance(A, midpoint(A, B)))
By internal_angle_bisector_definition_v0_r on F, H, midpoint(A, D), E we get Line(E, H) == internal_angle_bisector(F, E, midpoint(A, D))
By collinear_definition on C, A, midpoint(A, C) we get A in Line(C, midpoint(A, C)), midpoint(A, C) in Line(A, C), Line(A, C) == Line(C, midpoint(A, C)), 0 == 2 * angle(A, C, midpoint(A, C)) mod 360
By collinear_definition on E, center(k), midpoint(C, D) we get center(k) in Line(E, midpoint(C, D)), midpoint(C, D) in Line(E, center(k)), Line(E, center(k)) == Line(E, midpoint(C, D)), 0 == 2 * angle(center(k), E, midpoint(C, D)) mod 360
By sss_anti_congruence_v0 on G, H, A, A, H, G we get anti_congruent_triangles(A, G, H, G, A, H)
By perpendicular_angle_conditions_v0 on E, midpoint(B, C), B we get angle(E, midpoint(B, C), B) == orientation(B, E, midpoint(B, C)) mod 360
By collinear_definition on midpoint(A, D), E, F we get E in Line(F, midpoint(A, D)), F in Line(E, midpoint(A, D)), Line(E, midpoint(A, D)) == Line(F, midpoint(A, D)), 0 == 2 * angle(E, midpoint(A, D), F) mod 360
By sas_similarity on C, D, E, G, D, H we get similar_triangles(C, D, E, G, D, H)
By internal_angle_bisector_definition_v0_r on B, C, B, midpoint(B, C) we get Line(C, midpoint(B, C)) == internal_angle_bisector(B, midpoint(B, C), B)
By isosceles_triangle_midpoint on G, C, D we get midpoint(C, D) in median(G, C, D)
By sss_anti_congruence_v0 on E, H, G, G, H, E we get anti_congruent_triangles(E, G, H, G, E, H)
By internal_angle_bisector_definition_v0 on C, E, B, midpoint(B, C) we get angle(C, midpoint(B, C), E) == angle(E, midpoint(B, C), B) mod 360
By perpendicular_angle_conditions_v0 on C, midpoint(C, D), E we get angle(C, midpoint(C, D), E) == orientation(C, midpoint(C, D), E) mod 360
By sss_anti_congruence_v1 on G, H, D, D, H, G we get anti_congruent_triangles(D, G, H, G, D, H)
By sss_anti_congruence_v0 on G, E, H, E, G, H we get anti_congruent_triangles(E, G, H, G, E, H)
By sss_anti_congruence_v0 on A, G, H, G, A, H we get anti_congruent_triangles(A, G, H, G, A, H)
By sss_anti_congruence_v1 on H, E, G, H, G, E we get anti_congruent_triangles(E, G, H, G, E, H)
By sas_anti_similarity on A, B, E, G, A, H we get anti_similar_triangles(A, B, E, G, A, H)
By sss_anti_congruence_v0 on H, G, E, H, E, G we get anti_congruent_triangles(E, G, H, G, E, H)
By sss_anti_congruence_v0 on H, A, G, H, G, A we get anti_congruent_triangles(A, G, H, G, A, H)
By sss_anti_congruence_v0 on D, H, G, G, H, D we get anti_congruent_triangles(D, G, H, G, D, H)
By sss_anti_congruence_v1 on H, G, A, H, A, G we get anti_congruent_triangles(A, G, H, G, A, H)
By collinear_definition on F, midpoint(A, D), E we get midpoint(A, D) in Line(E, F), E in Line(F, midpoint(A, D)), Line(E, F) == Line(F, midpoint(A, D)), 0 == 2 * angle(midpoint(A, D), F, E) mod 360
By sss_anti_congruence_v1 on D, G, H, G, D, H we get anti_congruent_triangles(D, G, H, G, D, H)
By collinear_definition on B, midpoint(A, B), A we get midpoint(A, B) in Line(A, B), A in Line(B, midpoint(A, B)), Line(A, B) == Line(B, midpoint(A, B)), 0 == 2 * angle(midpoint(A, B), B, A) mod 360
By sss_anti_congruence_v1 on G, H, E, E, H, G we get anti_congruent_triangles(E, G, H, G, E, H)
By sas_anti_similarity on E, B, A, H, A, G we get anti_similar_triangles(A, B, E, G, A, H)
By aa_anti_similarity on D, C, E, G, D, H we get anti_similar_triangles(C, D, E, D, G, H)
By sss_anti_congruence_v1 on E, G, H, G, E, H we get anti_congruent_triangles(E, G, H, G, E, H)
By internal_angle_bisector_definition_v0 on B, E, C, midpoint(B, C) we get angle(B, midpoint(B, C), E) == angle(E, midpoint(B, C), C) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(C, D), C, midpoint(C, D), D we get Line(C, D) == internal_angle_bisector(midpoint(C, D), D, midpoint(C, D))
By isosceles_triangle_properties on H, G, E we get distance(E, H) == distance(G, H), angle(G, E, H) == angle(H, G, E) mod 360
By sss_anti_congruence_v0 on G, H, A, A, H, G we get anti_congruent_triangles(A, G, H, G, A, H)
By sas_similarity on B, A, E, G, A, H we get similar_triangles(A, B, E, A, G, H)
By sss_anti_congruence_v0 on H, A, G, H, G, A we get anti_congruent_triangles(A, G, H, G, A, H)
By external_angle_bisector_definition_v0 on D, F, D, midpoint(A, D) we get 180 == angle(D, midpoint(A, D), F) + angle(D, midpoint(A, D), F) mod 360
By sss_anti_congruence_v1 on G, H, D, D, H, G we get anti_congruent_triangles(D, G, H, G, D, H)
By sss_anti_congruence_v1 on H, D, G, H, G, D we get anti_congruent_triangles(D, G, H, G, D, H)
By sss_anti_congruence_v1 on G, A, H, A, G, H we get anti_congruent_triangles(A, G, H, G, A, H)
By power_of_a_point_definition on midpoint(C, D), C, D, c we get log(power_of_a_point(midpoint(C, D), c)) == log(distance(C, midpoint(C, D))) + log(distance(D, midpoint(C, D)))
By sss_anti_congruence_v0 on A, G, H, G, A, H we get anti_congruent_triangles(A, G, H, G, A, H)
By sss_anti_congruence_v1 on G, H, D, D, H, G we get anti_congruent_triangles(D, G, H, G, D, H)
By log_of_2_times_distance on B, D, A, midpoint(A, C) we get log(distance(B, D)) == 0.6931471805599453 + log(distance(A, midpoint(A, C)))
By sss_anti_congruence_v0 on H, G, D, H, D, G we get anti_congruent_triangles(D, G, H, G, D, H)
By aa_similarity on G, D, H, C, D, E we get similar_triangles(C, D, E, G, D, H)
By perpendicular_angle_conditions_v0 on E, midpoint(B, C), C we get angle(E, midpoint(B, C), C) == orientation(C, E, midpoint(B, C)) mod 360
By sas_similarity on H, A, G, E, A, B we get similar_triangles(A, B, E, A, G, H)
By collinear_definition on E, line_intersection(f, Line(E, G)), G we get line_intersection(f, Line(E, G)) in Line(E, G), G in Line(E, line_intersection(f, Line(E, G))), Line(E, G) == Line(E, line_intersection(f, Line(E, G))), 0 == 2 * angle(line_intersection(f, Line(E, G)), E, G) mod 360
By perpendicular_angle_conditions_v0 on E, midpoint(C, D), D we get angle(E, midpoint(C, D), D) == orientation(D, E, midpoint(C, D)) mod 360
By isosceles_triangle_midpoint on E, B, A we get midpoint(A, B) in median(E, A, B)
By log_of_2_times_distance on C, A, midpoint(B, D), D we get log(distance(A, C)) == 0.6931471805599453 + log(distance(D, midpoint(B, D)))
By sss_anti_congruence_v1 on G, H, D, D, H, G we get anti_congruent_triangles(D, G, H, G, D, H)
By collinear_definition on A, C, midpoint(A, C) we get C in Line(A, midpoint(A, C)), midpoint(A, C) in Line(A, C), Line(A, C) == Line(A, midpoint(A, C)), 0 == 2 * angle(C, A, midpoint(A, C)) mod 360
By sss_anti_congruence_v0 on A, G, H, G, A, H we get anti_congruent_triangles(A, G, H, G, A, H)
By sss_anti_congruence_v1 on D, G, H, G, D, H we get anti_congruent_triangles(D, G, H, G, D, H)
By sas_anti_similarity on G, A, H, A, B, E we get anti_similar_triangles(A, B, E, G, A, H)
By sss_anti_congruence_v0 on E, H, G, G, H, E we get anti_congruent_triangles(E, G, H, G, E, H)
By internal_angle_bisector_definition_v0_r on B, midpoint(B, C), B, C we get Line(C, midpoint(B, C)) == internal_angle_bisector(B, C, B)
By sss_anti_congruence_v1 on G, H, E, E, H, G we get anti_congruent_triangles(E, G, H, G, E, H)
By perpendicular_bisector_properties on A, C we get perpendicular(Line(A, C), perpendicular_bisector(A, C)), midpoint(A, C) == line_intersection(Line(A, C), perpendicular_bisector(A, C))
By sss_anti_congruence_v0 on H, G, E, H, E, G we get anti_congruent_triangles(E, G, H, G, E, H)
By perpendicular_bisector_properties on B, A we get perpendicular(Line(A, B), perpendicular_bisector(A, B)), midpoint(A, B) == line_intersection(Line(A, B), perpendicular_bisector(A, B))
By sss_anti_congruence_v1 on H, E, G, H, G, E we get anti_congruent_triangles(E, G, H, G, E, H)
By log_of_2_times_distance on A, B, midpoint(A, B), B we get log(distance(A, B)) == 0.6931471805599453 + log(distance(B, midpoint(A, B)))
By collinear_definition on E, G, midpoint(C, D) we get G in Line(E, midpoint(C, D)), midpoint(C, D) in Line(E, G), Line(E, G) == Line(E, midpoint(C, D)), 0 == 2 * angle(G, E, midpoint(C, D)) mod 360
By sss_anti_congruence_v1 on E, G, H, G, E, H we get anti_congruent_triangles(E, G, H, G, E, H)
By isosceles_triangle_altitude_v1 on midpoint(A, C), A, C we get identical(perpendicular_bisector(A, C), internal_angle_bisector(A, midpoint(A, C), C), perpendicular_line(midpoint(A, C), Line(A, C)))
By aa_anti_similarity on A, E, B, G, H, A we get anti_similar_triangles(A, B, E, G, A, H)
By internal_angle_bisector_definition_v0 on A, F, D, midpoint(A, D) we get angle(A, midpoint(A, D), F) == angle(F, midpoint(A, D), D) mod 360
By sss_anti_congruence_v0 on G, D, H, D, G, H we get anti_congruent_triangles(D, G, H, G, D, H)
By sas_anti_similarity on G, D, H, D, C, E we get anti_similar_triangles(C, D, E, D, G, H)
By sss_anti_congruence_v0 on H, A, G, H, G, A we get anti_congruent_triangles(A, G, H, G, A, H)
By aa_similarity on B, A, E, G, A, H we get similar_triangles(A, B, E, A, G, H)
By perpendicular_angle_conditions_v0 on B, midpoint(B, C), E we get angle(B, midpoint(B, C), E) == orientation(B, midpoint(B, C), E) mod 360
By sas_anti_congruence on E, H, G, G, H, E we get anti_congruent_triangles(E, G, H, G, E, H)
By sss_anti_congruence_v1 on G, A, H, A, G, H we get anti_congruent_triangles(A, G, H, G, A, H)
By sss_anti_congruence_v1 on G, H, D, D, H, G we get anti_congruent_triangles(D, G, H, G, D, H)
By aa_anti_similarity on G, H, D, D, E, C we get anti_similar_triangles(C, D, E, D, G, H)
By sss_anti_congruence_v1 on H, G, A, H, A, G we get anti_congruent_triangles(A, G, H, G, A, H)
By internal_angle_bisector_definition_v0 on D, F, A, midpoint(A, D) we get angle(D, midpoint(A, D), F) == angle(F, midpoint(A, D), A) mod 360
By collinear_definition on F, H, midpoint(A, D) we get H in Line(F, midpoint(A, D)), midpoint(A, D) in Line(F, H), Line(F, H) == Line(F, midpoint(A, D)), 0 == 2 * angle(H, F, midpoint(A, D)) mod 360
By sss_anti_congruence_v1 on H, G, A, H, A, G we get anti_congruent_triangles(A, G, H, G, A, H)
By aa_similarity on C, D, E, G, D, H we get similar_triangles(C, D, E, G, D, H)
By collinear_definition on B, D, midpoint(B, D) we get D in Line(B, midpoint(B, D)), midpoint(B, D) in Line(B, D), Line(B, D) == Line(B, midpoint(B, D)), 0 == 2 * angle(D, B, midpoint(B, D)) mod 360
By internal_angle_bisector_definition_v0_r on C, midpoint(B, C), C, B we get Line(B, midpoint(B, C)) == internal_angle_bisector(C, B, C)
By sss_anti_congruence_v1 on G, A, H, A, G, H we get anti_congruent_triangles(A, G, H, G, A, H)
By collinear_definition on B, A, line_intersection(f, Line(E, G)) we get A in Line(B, line_intersection(f, Line(E, G))), line_intersection(f, Line(E, G)) in Line(A, B), Line(A, B) == Line(B, line_intersection(f, Line(E, G))), 0 == 2 * angle(A, B, line_intersection(f, Line(E, G))) mod 360
By power_of_a_point_definition on midpoint(C, D), D, C, k we get log(power_of_a_point(midpoint(C, D), k)) == log(distance(D, midpoint(C, D))) + log(distance(C, midpoint(C, D)))
By internal_angle_bisector_definition_v0_r on C, B, C, midpoint(B, C) we get Line(B, midpoint(B, C)) == internal_angle_bisector(C, midpoint(B, C), C)
By collinear_definition on G, line_intersection(f, Line(E, G)), E we get line_intersection(f, Line(E, G)) in Line(E, G), E in Line(G, line_intersection(f, Line(E, G))), Line(E, G) == Line(G, line_intersection(f, Line(E, G))), 0 == 2 * angle(line_intersection(f, Line(E, G)), G, E) mod 360
By sss_anti_congruence_v0 on H, G, E, H, E, G we get anti_congruent_triangles(E, G, H, G, E, H)
By internal_angle_bisector_definition_v0 on C, midpoint(C, D), D, E we get angle(C, E, midpoint(C, D)) == angle(midpoint(C, D), E, D) mod 360
By sas_anti_similarity on H, D, G, E, C, D we get anti_similar_triangles(C, D, E, D, G, H)
By aa_anti_similarity on A, B, E, G, A, H we get anti_similar_triangles(A, B, E, G, A, H)
By perpendicular_angle_conditions_v0 on C, midpoint(B, C), E we get angle(C, midpoint(B, C), E) == orientation(C, midpoint(B, C), E) mod 360
By perpendicular_angle_conditions_v0 on A, midpoint(A, D), F we get angle(A, midpoint(A, D), F) == orientation(A, midpoint(A, D), F) mod 360
By internal_angle_bisector_definition_v0 on C, midpoint(B, C), B, E we get angle(C, E, midpoint(B, C)) == angle(midpoint(B, C), E, B) mod 360
By collinear_definition on E, midpoint(B, C), center(e) we get midpoint(B, C) in Line(E, center(e)), center(e) in Line(E, midpoint(B, C)), Line(E, center(e)) == Line(E, midpoint(B, C)), 0 == 2 * angle(midpoint(B, C), E, center(e)) mod 360
By sss_anti_congruence_v0 on D, H, G, G, H, D we get anti_congruent_triangles(D, G, H, G, D, H)
By isosceles_triangle_midpoint on E, C, A we get midpoint(A, C) in median(E, A, C)
By sss_anti_congruence_v0 on G, H, A, A, H, G we get anti_congruent_triangles(A, G, H, G, A, H)
By sss_anti_congruence_v0 on H, G, D, H, D, G we get anti_congruent_triangles(D, G, H, G, D, H)
By collinear_definition on D, midpoint(B, D), B we get midpoint(B, D) in Line(B, D), B in Line(D, midpoint(B, D)), Line(B, D) == Line(D, midpoint(B, D)), 0 == 2 * angle(midpoint(B, D), D, B) mod 360
By sss_anti_congruence_v1 on H, E, G, H, G, E we get anti_congruent_triangles(E, G, H, G, E, H)
By sss_anti_congruence_v0 on G, E, H, E, G, H we get anti_congruent_triangles(E, G, H, G, E, H)
By collinear_definition on midpoint(A, D), H, F we get H in Line(F, midpoint(A, D)), F in Line(H, midpoint(A, D)), Line(F, midpoint(A, D)) == Line(H, midpoint(A, D)), 0 == 2 * angle(H, midpoint(A, D), F) mod 360
By isosceles_triangle_midpoint on E, B, D we get midpoint(B, D) in median(E, B, D)
By sas_similarity on E, A, B, H, A, G we get similar_triangles(A, B, E, A, G, H)
By sss_anti_congruence_v0 on H, A, G, H, G, A we get anti_congruent_triangles(A, G, H, G, A, H)
By collinear_definition on F, midpoint(A, D), H we get midpoint(A, D) in Line(F, H), H in Line(F, midpoint(A, D)), Line(F, H) == Line(F, midpoint(A, D)), 0 == 2 * angle(midpoint(A, D), F, H) mod 360
By internal_angle_bisector_definition_v0 on B, midpoint(C, D), A, E we get angle(B, E, midpoint(C, D)) == angle(midpoint(C, D), E, A) mod 360
By collinear_definition on E, midpoint(C, D), center(k) we get midpoint(C, D) in Line(E, center(k)), center(k) in Line(E, midpoint(C, D)), Line(E, center(k)) == Line(E, midpoint(C, D)), 0 == 2 * angle(midpoint(C, D), E, center(k)) mod 360
By isosceles_triangle_altitude_v3 on midpoint(A, C), A, C we get identical(perpendicular_bisector(A, C), internal_angle_bisector(A, midpoint(A, C), C), perpendicular_line(midpoint(A, C), Line(A, C)))
By sss_anti_congruence_v1 on D, G, H, G, D, H we get anti_congruent_triangles(D, G, H, G, D, H)
By sss_anti_congruence_v0 on D, H, G, G, H, D we get anti_congruent_triangles(D, G, H, G, D, H)
By sss_anti_congruence_v1 on H, D, G, H, G, D we get anti_congruent_triangles(D, G, H, G, D, H)
By sss_anti_congruence_v1 on A, H, G, G, H, A we get anti_congruent_triangles(A, G, H, G, A, H)
By sss_anti_congruence_v1 on H, G, A, H, A, G we get anti_congruent_triangles(A, G, H, G, A, H)
By collinear_definition on G, midpoint(C, D), E we get midpoint(C, D) in Line(E, G), E in Line(G, midpoint(C, D)), Line(E, G) == Line(G, midpoint(C, D)), 0 == 2 * angle(midpoint(C, D), G, E) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(B, C), B, midpoint(B, C), C we get Line(B, C) == internal_angle_bisector(midpoint(B, C), C, midpoint(B, C))
By sas_anti_congruence on A, H, G, G, H, A we get anti_congruent_triangles(A, G, H, G, A, H)
By sss_anti_congruence_v1 on A, H, G, G, H, A we get anti_congruent_triangles(A, G, H, G, A, H)
By isosceles_triangle_altitude_v3 on midpoint(A, B), A, B we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, midpoint(A, B), B), perpendicular_line(midpoint(A, B), Line(A, B)))
By perpendicular_angle_conditions_v0 on D, midpoint(A, D), F we get angle(D, midpoint(A, D), F) == orientation(D, midpoint(A, D), F) mod 360
By collinear_definition on B, midpoint(B, D), D we get midpoint(B, D) in Line(B, D), D in Line(B, midpoint(B, D)), Line(B, D) == Line(B, midpoint(B, D)), 0 == 2 * angle(midpoint(B, D), B, D) mod 360
By collinear_definition on B, A, midpoint(A, B) we get A in Line(B, midpoint(A, B)), midpoint(A, B) in Line(A, B), Line(A, B) == Line(B, midpoint(A, B)), 0 == 2 * angle(A, B, midpoint(A, B)) mod 360
By external_angle_bisector_definition_v0 on A, F, A, midpoint(A, D) we get 180 == angle(A, midpoint(A, D), F) + angle(A, midpoint(A, D), F) mod 360
By sss_anti_congruence_v1 on G, H, E, E, H, G we get anti_congruent_triangles(E, G, H, G, E, H)
By aa_similarity on G, H, D, C, E, D we get similar_triangles(C, D, E, G, D, H)
By sss_anti_congruence_v1 on G, H, D, D, H, G we get anti_congruent_triangles(D, G, H, G, D, H)
By internal_angle_bisector_definition_v0_r on C, D, C, midpoint(C, D) we get Line(D, midpoint(C, D)) == internal_angle_bisector(C, midpoint(C, D), C)
By isosceles_triangle_properties on H, E, G we get distance(E, H) == distance(G, H), angle(E, G, H) == angle(H, E, G) mod 360
By sas_similarity on H, D, G, E, D, C we get similar_triangles(C, D, E, G, D, H)
By internal_angle_bisector_definition_v0 on A, midpoint(A, D), D, F we get angle(A, F, midpoint(A, D)) == angle(midpoint(A, D), F, D) mod 360
By collinear_definition on midpoint(A, D), F, H we get F in Line(H, midpoint(A, D)), H in Line(F, midpoint(A, D)), Line(F, midpoint(A, D)) == Line(H, midpoint(A, D)), 0 == 2 * angle(F, midpoint(A, D), H) mod 360
By sas_similarity on G, A, H, B, A, E we get similar_triangles(A, B, E, A, G, H)
By sss_anti_congruence_v0 on A, G, H, G, A, H we get anti_congruent_triangles(A, G, H, G, A, H)
By sss_anti_congruence_v0 on H, G, D, H, D, G we get anti_congruent_triangles(D, G, H, G, D, H)
By sss_anti_congruence_v0 on G, D, H, D, G, H we get anti_congruent_triangles(D, G, H, G, D, H)
By sss_anti_congruence_v1 on A, H, G, G, H, A we get anti_congruent_triangles(A, G, H, G, A, H)
By reverse_direction on H, G we get 180 == direction(H, G) - direction(G, H) mod 360
By sss_anti_congruence_v1 on H, D, G, H, G, D we get anti_congruent_triangles(D, G, H, G, D, H)
By internal_angle_bisector_definition_v0_r on D, midpoint(C, D), D, C we get Line(C, midpoint(C, D)) == internal_angle_bisector(D, C, D)
By sss_anti_congruence_v1 on E, G, H, G, E, H we get anti_congruent_triangles(E, G, H, G, E, H)
By perpendicular_angle_conditions_v0 on F, midpoint(A, D), D we get angle(F, midpoint(A, D), D) == orientation(D, F, midpoint(A, D)) mod 360
By isosceles_triangle_properties on H, G, D we get distance(D, H) == distance(G, H), angle(G, D, H) == angle(H, G, D) mod 360
By sss_anti_congruence_v0 on H, G, E, H, E, G we get anti_congruent_triangles(E, G, H, G, E, H)
By sss_anti_congruence_v0 on D, H, G, G, H, D we get anti_congruent_triangles(D, G, H, G, D, H)
By perpendicular_angle_conditions_v0 on F, midpoint(A, D), A we get angle(F, midpoint(A, D), A) == orientation(A, F, midpoint(A, D)) mod 360
By internal_angle_bisector_definition_v0 on E, F, E, midpoint(A, D) we get angle(E, midpoint(A, D), F) == angle(F, midpoint(A, D), E) mod 360
By sss_anti_congruence_v0 on G, D, H, D, G, H we get anti_congruent_triangles(D, G, H, G, D, H)
By internal_angle_bisector_definition_v0 on H, F, H, midpoint(A, D) we get angle(F, midpoint(A, D), H) == angle(H, midpoint(A, D), F) mod 360
By sss_anti_congruence_v1 on D, G, H, G, D, H we get anti_congruent_triangles(D, G, H, G, D, H)
By sss_anti_congruence_v0 on E, H, G, G, H, E we get anti_congruent_triangles(E, G, H, G, E, H)
By collinear_definition on G, E, midpoint(C, D) we get E in Line(G, midpoint(C, D)), midpoint(C, D) in Line(E, G), Line(E, G) == Line(G, midpoint(C, D)), 0 == 2 * angle(E, G, midpoint(C, D)) mod 360
By isosceles_triangle_properties on H, A, G we get distance(A, H) == distance(G, H), angle(A, G, H) == angle(H, A, G) mod 360
By internal_angle_bisector_definition_v0 on D, midpoint(C, D), C, E we get angle(D, E, midpoint(C, D)) == angle(midpoint(C, D), E, C) mod 360
By sss_anti_congruence_v1 on G, A, H, A, G, H we get anti_congruent_triangles(A, G, H, G, A, H)
By internal_angle_bisector_definition_v0_r on F, H, F, E we get Line(E, H) == internal_angle_bisector(F, E, F)
By sss_anti_congruence_v1 on H, G, A, H, A, G we get anti_congruent_triangles(A, G, H, G, A, H)
By sss_anti_congruence_v0 on G, E, H, E, G, H we get anti_congruent_triangles(E, G, H, G, E, H)
By sss_anti_congruence_v0 on H, G, D, H, D, G we get anti_congruent_triangles(D, G, H, G, D, H)
By sss_anti_congruence_v0 on E, H, G, G, H, E we get anti_congruent_triangles(E, G, H, G, E, H)
By sss_anti_congruence_v1 on A, H, G, G, H, A we get anti_congruent_triangles(A, G, H, G, A, H)
By sss_anti_congruence_v0 on G, D, H, D, G, H we get anti_congruent_triangles(D, G, H, G, D, H)
By collinear_definition on midpoint(A, D), F, E we get F in Line(E, midpoint(A, D)), E in Line(F, midpoint(A, D)), Line(E, midpoint(A, D)) == Line(F, midpoint(A, D)), 0 == 2 * angle(F, midpoint(A, D), E) mod 360
By collinear_definition on F, E, midpoint(A, D) we get E in Line(F, midpoint(A, D)), midpoint(A, D) in Line(E, F), Line(E, F) == Line(F, midpoint(A, D)), 0 == 2 * angle(E, F, midpoint(A, D)) mod 360
By collinear_definition on A, midpoint(A, C), C we get midpoint(A, C) in Line(A, C), C in Line(A, midpoint(A, C)), Line(A, C) == Line(A, midpoint(A, C)), 0 == 2 * angle(midpoint(A, C), A, C) mod 360
By sss_anti_congruence_v1 on E, G, H, G, E, H we get anti_congruent_triangles(E, G, H, G, E, H)
By sss_anti_congruence_v1 on H, G, A, H, A, G we get anti_congruent_triangles(A, G, H, G, A, H)
By internal_angle_bisector_definition_v0 on C, E, D, midpoint(C, D) we get angle(C, midpoint(C, D), E) == angle(E, midpoint(C, D), D) mod 360
By log_of_2_times_distance on D, B, midpoint(B, D), D we get log(distance(B, D)) == 0.6931471805599453 + log(distance(D, midpoint(B, D)))
By sas_anti_congruence on G, H, A, A, H, G we get anti_congruent_triangles(A, G, H, G, A, H)
By internal_angle_bisector_definition_v0_r on midpoint(B, C), C, midpoint(B, C), B we get Line(B, C) == internal_angle_bisector(midpoint(B, C), B, midpoint(B, C))
By collinear_definition on A, line_intersection(f, Line(E, G)), B we get line_intersection(f, Line(E, G)) in Line(A, B), B in Line(A, line_intersection(f, Line(E, G))), Line(A, B) == Line(A, line_intersection(f, Line(E, G))), 0 == 2 * angle(line_intersection(f, Line(E, G)), A, B) mod 360
By collinear_definition on A, B, midpoint(A, B) we get B in Line(A, midpoint(A, B)), midpoint(A, B) in Line(A, B), Line(A, B) == Line(A, midpoint(A, B)), 0 == 2 * angle(B, A, midpoint(A, B)) mod 360
By collinear_definition on B, line_intersection(f, Line(E, G)), A we get line_intersection(f, Line(E, G)) in Line(A, B), A in Line(B, line_intersection(f, Line(E, G))), Line(A, B) == Line(B, line_intersection(f, Line(E, G))), 0 == 2 * angle(line_intersection(f, Line(E, G)), B, A) mod 360
By sss_anti_congruence_v1 on G, A, H, A, G, H we get anti_congruent_triangles(A, G, H, G, A, H)
By sas_anti_similarity on E, C, D, H, D, G we get anti_similar_triangles(C, D, E, D, G, H)
By sss_anti_congruence_v1 on A, H, G, G, H, A we get anti_congruent_triangles(A, G, H, G, A, H)
By sss_anti_congruence_v1 on E, G, H, G, E, H we get anti_congruent_triangles(E, G, H, G, E, H)
By sas_anti_congruence on G, H, E, E, H, G we get anti_congruent_triangles(E, G, H, G, E, H)
By sss_anti_congruence_v0 on D, H, G, G, H, D we get anti_congruent_triangles(D, G, H, G, D, H)
By sss_anti_congruence_v0 on H, A, G, H, G, A we get anti_congruent_triangles(A, G, H, G, A, H)
By collinear_definition on E, G, line_intersection(f, Line(E, G)) we get G in Line(E, line_intersection(f, Line(E, G))), line_intersection(f, Line(E, G)) in Line(E, G), Line(E, G) == Line(E, line_intersection(f, Line(E, G))), 0 == 2 * angle(G, E, line_intersection(f, Line(E, G))) mod 360
By sas_similarity on G, D, H, C, D, E we get similar_triangles(C, D, E, G, D, H)
By perpendicular_lines_draw_intersection on Line(G, center(e)), Line(A, D) we get exists(line_intersection(Line(A, D), Line(G, center(e))))
By sss_anti_congruence_v0 on G, H, A, A, H, G we get anti_congruent_triangles(A, G, H, G, A, H)
By collinear_definition on A, midpoint(A, B), B we get midpoint(A, B) in Line(A, B), B in Line(A, midpoint(A, B)), Line(A, B) == Line(A, midpoint(A, B)), 0 == 2 * angle(midpoint(A, B), A, B) mod 360
By sss_anti_congruence_v0 on H, G, D, H, D, G we get anti_congruent_triangles(D, G, H, G, D, H)
By perpendicular_angle_conditions_v0 on D, midpoint(C, D), E we get angle(D, midpoint(C, D), E) == orientation(D, midpoint(C, D), E) mod 360
By collinear_definition on G, E, line_intersection(f, Line(E, G)) we get E in Line(G, line_intersection(f, Line(E, G))), line_intersection(f, Line(E, G)) in Line(E, G), Line(E, G) == Line(G, line_intersection(f, Line(E, G))), 0 == 2 * angle(E, G, line_intersection(f, Line(E, G))) mod 360
By sss_anti_congruence_v0 on G, D, H, D, G, H we get anti_congruent_triangles(D, G, H, G, D, H)
By sss_anti_congruence_v1 on H, D, G, H, G, D we get anti_congruent_triangles(D, G, H, G, D, H)
By internal_angle_bisector_definition_v0_r on E, H, E, F we get Line(F, H) == internal_angle_bisector(E, F, E)
By internal_angle_bisector_definition_v0_r on D, C, D, midpoint(C, D) we get Line(C, midpoint(C, D)) == internal_angle_bisector(D, midpoint(C, D), D)
By sss_anti_congruence_v0 on G, E, H, E, G, H we get anti_congruent_triangles(E, G, H, G, E, H)
By sss_anti_congruence_v0 on H, A, G, H, G, A we get anti_congruent_triangles(A, G, H, G, A, H)
By sss_anti_congruence_v1 on E, G, H, G, E, H we get anti_congruent_triangles(E, G, H, G, E, H)
By sss_anti_congruence_v1 on H, D, G, H, G, D we get anti_congruent_triangles(D, G, H, G, D, H)
By aa_anti_similarity on G, H, A, A, E, B we get anti_similar_triangles(A, B, E, G, A, H)
By sss_anti_congruence_v1 on D, G, H, G, D, H we get anti_congruent_triangles(D, G, H, G, D, H)
By sas_anti_congruence on D, H, G, G, H, D we get anti_congruent_triangles(D, G, H, G, D, H)
By external_angle_bisector_definition_v0 on G, midpoint(A, D), D, F we get 180 == angle(G, F, midpoint(A, D)) + angle(D, F, midpoint(A, D)) mod 360
By collinear_definition on D, B, midpoint(B, D) we get B in Line(D, midpoint(B, D)), midpoint(B, D) in Line(B, D), Line(B, D) == Line(D, midpoint(B, D)), 0 == 2 * angle(B, D, midpoint(B, D)) mod 360
By internal_angle_bisector_definition_v0_r on C, midpoint(C, D), C, D we get Line(D, midpoint(C, D)) == internal_angle_bisector(C, D, C)
By sss_anti_congruence_v0 on G, D, H, D, G, H we get anti_congruent_triangles(D, G, H, G, D, H)
By aa_anti_similarity on D, E, C, G, H, D we get anti_similar_triangles(C, D, E, D, G, H)
By internal_angle_bisector_definition_v0 on D, E, C, midpoint(C, D) we get angle(D, midpoint(C, D), E) == angle(E, midpoint(C, D), C) mod 360
By log_of_2_times_distance on C, A, midpoint(B, D), B we get log(distance(A, C)) == 0.6931471805599453 + log(distance(B, midpoint(B, D)))
By sss_anti_congruence_v1 on H, D, G, H, G, D we get anti_congruent_triangles(D, G, H, G, D, H)
By sss_anti_congruence_v0 on H, G, D, H, D, G we get anti_congruent_triangles(D, G, H, G, D, H)
By isosceles_triangle_properties on H, D, G we get distance(D, H) == distance(G, H), angle(D, G, H) == angle(H, D, G) mod 360
By sss_anti_congruence_v0 on E, H, G, G, H, E we get anti_congruent_triangles(E, G, H, G, E, H)
By collinear_definition on C, midpoint(A, C), A we get midpoint(A, C) in Line(A, C), A in Line(C, midpoint(A, C)), Line(A, C) == Line(C, midpoint(A, C)), 0 == 2 * angle(midpoint(A, C), C, A) mod 360
By sss_anti_congruence_v0 on G, E, H, E, G, H we get anti_congruent_triangles(E, G, H, G, E, H)
By collinear_definition on E, center(e), midpoint(B, C) we get center(e) in Line(E, midpoint(B, C)), midpoint(B, C) in Line(E, center(e)), Line(E, center(e)) == Line(E, midpoint(B, C)), 0 == 2 * angle(center(e), E, midpoint(B, C)) mod 360
By log_of_2_times_distance on C, A, A, midpoint(A, C) we get log(distance(A, C)) == 0.6931471805599453 + log(distance(A, midpoint(A, C)))
By sas_anti_congruence on G, H, D, D, H, G we get anti_congruent_triangles(D, G, H, G, D, H)
By sss_anti_congruence_v1 on G, H, E, E, H, G we get anti_congruent_triangles(E, G, H, G, E, H)
By collinear_definition on A, B, line_intersection(f, Line(E, G)) we get B in Line(A, line_intersection(f, Line(E, G))), line_intersection(f, Line(E, G)) in Line(A, B), Line(A, B) == Line(A, line_intersection(f, Line(E, G))), 0 == 2 * angle(B, A, line_intersection(f, Line(E, G))) mod 360
By aa_anti_similarity on G, D, H, D, C, E we get anti_similar_triangles(C, D, E, D, G, H)
By sss_anti_congruence_v1 on G, H, E, E, H, G we get anti_congruent_triangles(E, G, H, G, E, H)
By internal_angle_bisector_definition_v0_r on F, E, F, H we get Line(E, H) == internal_angle_bisector(F, H, F)
By isosceles_triangle_altitude_v3 on midpoint(A, B), B, A we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, midpoint(A, B), B), perpendicular_line(midpoint(A, B), Line(A, B)))
By perpendicular_bisector_properties on D, B we get perpendicular(Line(B, D), perpendicular_bisector(B, D)), midpoint(B, D) == line_intersection(Line(B, D), perpendicular_bisector(B, D))
By isosceles_triangle_altitude_v1 on midpoint(B, D), B, D we get identical(perpendicular_bisector(B, D), internal_angle_bisector(B, midpoint(B, D), D), perpendicular_line(midpoint(B, D), Line(B, D)))
By isosceles_triangle_altitude_v1 on midpoint(A, B), B, A we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, midpoint(A, B), B), perpendicular_line(midpoint(A, B), Line(A, B)))
By isosceles_triangle_altitude_v3 on midpoint(B, D), B, D we get identical(perpendicular_bisector(B, D), internal_angle_bisector(B, midpoint(B, D), D), perpendicular_line(midpoint(B, D), Line(B, D)))
By isosceles_triangle_altitude_v1 on midpoint(A, B), A, B we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, midpoint(A, B), B), perpendicular_line(midpoint(A, B), Line(A, B)))
By isosceles_triangle_altitude_v3 on midpoint(A, C), C, A we get identical(perpendicular_bisector(A, C), internal_angle_bisector(A, midpoint(A, C), C), perpendicular_line(midpoint(A, C), Line(A, C)))
By isosceles_triangle_altitude_v3 on midpoint(B, D), D, B we get identical(perpendicular_bisector(B, D), internal_angle_bisector(B, midpoint(B, D), D), perpendicular_line(midpoint(B, D), Line(B, D)))
By isosceles_triangle_altitude_v1 on midpoint(A, C), C, A we get identical(perpendicular_bisector(A, C), internal_angle_bisector(A, midpoint(A, C), C), perpendicular_line(midpoint(A, C), Line(A, C)))
By isosceles_triangle_altitude_v1 on midpoint(B, D), D, B we get identical(perpendicular_bisector(B, D), internal_angle_bisector(B, midpoint(B, D), D), perpendicular_line(midpoint(B, D), Line(B, D)))
By isosceles_triangle_properties on midpoint(A, C), C, A we get distance(A, midpoint(A, C)) == distance(C, midpoint(A, C)), angle(C, A, midpoint(A, C)) == angle(midpoint(A, C), C, A) mod 360
By altitude_definition on E, F, A, perpendicular_bisector(A, C) we get altitude(E, A, F) == perpendicular_bisector(A, C)
By collinear_definition on midpoint(A, B), A, B we get A in Line(B, midpoint(A, B)), B in Line(A, midpoint(A, B)), Line(A, midpoint(A, B)) == Line(B, midpoint(A, B)), 0 == 2 * angle(A, midpoint(A, B), B) mod 360
By altitude_definition on D, F, H, Line(A, D) we get Line(A, D) == altitude(D, F, H)
By radical_axis_definition_v0 on midpoint(B, C), c, e we get power_of_a_point(midpoint(B, C), c) == power_of_a_point(midpoint(B, C), e)
By radical_axis_definition_v0 on midpoint(C, D), e, d we get power_of_a_point(midpoint(C, D), d) == power_of_a_point(midpoint(C, D), e)
By concyclic_definition_1 on center(k), F, D, G we get Circle(D, F, G) == Circle(D, F, center(k))
By altitude_definition on A, F, H, Line(A, D) we get Line(A, D) == altitude(A, F, H)
By altitude_definition on E, C, F, perpendicular_bisector(A, C) we get altitude(E, C, F) == perpendicular_bisector(A, C)
By altitude_definition on E, G, C, perpendicular_bisector(A, C) we get altitude(E, C, G) == perpendicular_bisector(A, C)
By collinear_definition on line_intersection(f, Line(E, G)), G, E we get G in Line(E, line_intersection(f, Line(E, G))), E in Line(G, line_intersection(f, Line(E, G))), Line(E, line_intersection(f, Line(E, G))) == Line(G, line_intersection(f, Line(E, G))), 0 == 2 * angle(G, line_intersection(f, Line(E, G)), E) mod 360
By collinear_definition on midpoint(C, D), G, E we get G in Line(E, midpoint(C, D)), E in Line(G, midpoint(C, D)), Line(E, midpoint(C, D)) == Line(G, midpoint(C, D)), 0 == 2 * angle(G, midpoint(C, D), E) mod 360
By collinear_definition on line_intersection(f, Line(E, G)), A, B we get A in Line(B, line_intersection(f, Line(E, G))), B in Line(A, line_intersection(f, Line(E, G))), Line(A, line_intersection(f, Line(E, G))) == Line(B, line_intersection(f, Line(E, G))), 0 == 2 * angle(A, line_intersection(f, Line(E, G)), B) mod 360
By collinear_definition on midpoint(A, C), A, C we get A in Line(C, midpoint(A, C)), C in Line(A, midpoint(A, C)), Line(A, midpoint(A, C)) == Line(C, midpoint(A, C)), 0 == 2 * angle(A, midpoint(A, C), C) mod 360
By isosceles_triangle_properties on midpoint(A, B), A, B we get distance(A, midpoint(A, B)) == distance(B, midpoint(A, B)), angle(A, B, midpoint(A, B)) == angle(midpoint(A, B), A, B) mod 360
By altitude_definition on G, D, A, Line(G, center(e)) we get altitude(G, A, D) == Line(G, center(e))
By altitude_definition on E, G, D, perpendicular_bisector(B, D) we get altitude(E, D, G) == perpendicular_bisector(B, D)
By altitude_definition on A, midpoint(A, D), F, Line(A, D) we get Line(A, D) == altitude(A, F, midpoint(A, D))
By power_of_a_point_definition on midpoint(B, C), C, B, c we get log(power_of_a_point(midpoint(B, C), c)) == log(distance(C, midpoint(B, C))) + log(distance(B, midpoint(B, C)))
By altitude_definition on E, A, C, perpendicular_bisector(A, C) we get altitude(E, A, C) == perpendicular_bisector(A, C)
By collinear_definition on midpoint(B, D), B, D we get B in Line(D, midpoint(B, D)), D in Line(B, midpoint(B, D)), Line(B, midpoint(B, D)) == Line(D, midpoint(B, D)), 0 == 2 * angle(B, midpoint(B, D), D) mod 360
By altitude_definition on G, midpoint(A, D), A, Line(G, center(e)) we get Line(G, center(e)) == altitude(G, A, midpoint(A, D))
By radical_axis_definition_v0 on line_intersection(f, Line(E, G)), d, e we get power_of_a_point(line_intersection(f, Line(E, G)), d) == power_of_a_point(line_intersection(f, Line(E, G)), e)
By altitude_definition on E, B, D, perpendicular_bisector(B, D) we get altitude(E, B, D) == perpendicular_bisector(B, D)
By altitude_definition on D, F, midpoint(A, D), Line(A, D) we get Line(A, D) == altitude(D, F, midpoint(A, D))
By altitude_definition on E, G, A, perpendicular_bisector(A, C) we get altitude(E, A, G) == perpendicular_bisector(A, C)
By collinear_definition on line_intersection(f, Line(E, G)), B, A we get B in Line(A, line_intersection(f, Line(E, G))), A in Line(B, line_intersection(f, Line(E, G))), Line(A, line_intersection(f, Line(E, G))) == Line(B, line_intersection(f, Line(E, G))), 0 == 2 * angle(B, line_intersection(f, Line(E, G)), A) mod 360
By altitude_definition on E, B, G, perpendicular_bisector(B, D) we get altitude(E, B, G) == perpendicular_bisector(B, D)
By isosceles_triangle_properties on midpoint(B, D), B, D we get distance(B, midpoint(B, D)) == distance(D, midpoint(B, D)), angle(B, D, midpoint(B, D)) == angle(midpoint(B, D), B, D) mod 360
By isosceles_triangle_properties on midpoint(B, D), D, B we get distance(B, midpoint(B, D)) == distance(D, midpoint(B, D)), angle(D, B, midpoint(B, D)) == angle(midpoint(B, D), D, B) mod 360
By isosceles_triangle_properties on midpoint(A, C), A, C we get distance(A, midpoint(A, C)) == distance(C, midpoint(A, C)), angle(A, C, midpoint(A, C)) == angle(midpoint(A, C), A, C) mod 360
By altitude_definition on E, G, F, perpendicular_bisector(A, C) we get altitude(E, F, G) == perpendicular_bisector(A, C)
By radical_axis_definition_v0 on midpoint(A, B), e, d we get power_of_a_point(midpoint(A, B), d) == power_of_a_point(midpoint(A, B), e)
By collinear_definition on midpoint(A, C), C, A we get C in Line(A, midpoint(A, C)), A in Line(C, midpoint(A, C)), Line(A, midpoint(A, C)) == Line(C, midpoint(A, C)), 0 == 2 * angle(C, midpoint(A, C), A) mod 360
By altitude_definition on G, midpoint(A, D), D, Line(G, center(e)) we get Line(G, center(e)) == altitude(G, D, midpoint(A, D))
By isosceles_triangle_altitude_v3 on E, C, A we get identical(perpendicular_bisector(A, C), internal_angle_bisector(A, E, C), perpendicular_line(E, Line(A, C)))
By collinear_definition on midpoint(B, D), D, B we get D in Line(B, midpoint(B, D)), B in Line(D, midpoint(B, D)), Line(B, midpoint(B, D)) == Line(D, midpoint(B, D)), 0 == 2 * angle(D, midpoint(B, D), B) mod 360
By collinear_definition on midpoint(A, B), B, A we get B in Line(A, midpoint(A, B)), A in Line(B, midpoint(A, B)), Line(A, midpoint(A, B)) == Line(B, midpoint(A, B)), 0 == 2 * angle(B, midpoint(A, B), A) mod 360
By radical_axis_definition_v0 on center(k), e, d we get power_of_a_point(center(k), d) == power_of_a_point(center(k), e)
By power_of_a_point_definition on midpoint(B, C), B, C, e we get log(power_of_a_point(midpoint(B, C), e)) == log(distance(B, midpoint(B, C))) + log(distance(C, midpoint(B, C)))
By isosceles_triangle_properties on midpoint(A, B), B, A we get distance(A, midpoint(A, B)) == distance(B, midpoint(A, B)), angle(B, A, midpoint(A, B)) == angle(midpoint(A, B), B, A) mod 360
By collinear_definition on line_intersection(f, Line(E, G)), E, G we get E in Line(G, line_intersection(f, Line(E, G))), G in Line(E, line_intersection(f, Line(E, G))), Line(E, line_intersection(f, Line(E, G))) == Line(G, line_intersection(f, Line(E, G))), 0 == 2 * angle(E, line_intersection(f, Line(E, G)), G) mod 360
By collinear_definition on midpoint(C, D), E, G we get E in Line(G, midpoint(C, D)), G in Line(E, midpoint(C, D)), Line(E, midpoint(C, D)) == Line(G, midpoint(C, D)), 0 == 2 * angle(E, midpoint(C, D), G) mod 360
By isosceles_triangle_altitude_v3 on E, D, B we get identical(perpendicular_bisector(B, D), internal_angle_bisector(B, E, D), perpendicular_line(E, Line(B, D)))
By isosceles_triangle_altitude_v3 on E, A, C we get identical(perpendicular_bisector(A, C), internal_angle_bisector(A, E, C), perpendicular_line(E, Line(A, C)))
By isosceles_triangle_altitude_v3 on E, B, D we get identical(perpendicular_bisector(B, D), internal_angle_bisector(B, E, D), perpendicular_line(E, Line(B, D)))
By power_of_a_point_definition on F, H, E, Circle(D, E, H) we get log(distance(F, H)) + log(distance(E, F)) == log(power_of_a_point(F, Circle(D, E, H)))
By power_of_a_point_definition on F, E, H, Circle(A, E, H) we get log(distance(E, F)) + log(distance(F, H)) == log(power_of_a_point(F, Circle(A, E, H)))
By power_of_a_point_definition on H, F, E, k we get log(power_of_a_point(H, k)) == log(distance(F, H)) + log(distance(E, H))
By excenter_concurrency_alternate on G, F, D we get excenter(G, D, F) in external_angle_bisector(D, F, G), excenter(G, D, F) in external_angle_bisector(F, D, G), excenter(G, D, F) in internal_angle_bisector(D, G, F)
By between_implies_angles on B, midpoint(B, D), D we get 180 == angle(B, midpoint(B, D), D) mod 360, 0 == angle(midpoint(B, D), D, B) mod 360, 0 == angle(D, B, midpoint(B, D)) mod 360
By between_implies_angles on A, midpoint(A, B), B we get 180 == angle(A, midpoint(A, B), B) mod 360, 0 == angle(midpoint(A, B), B, A) mod 360, 0 == angle(B, A, midpoint(A, B)) mod 360
By between_implies_angles on D, midpoint(B, D), B we get 180 == angle(D, midpoint(B, D), B) mod 360, 0 == angle(midpoint(B, D), B, D) mod 360, 0 == angle(B, D, midpoint(B, D)) mod 360
By between_implies_angles on A, midpoint(A, C), C we get 180 == angle(A, midpoint(A, C), C) mod 360, 0 == angle(midpoint(A, C), C, A) mod 360, 0 == angle(C, A, midpoint(A, C)) mod 360
By between_implies_angles on B, midpoint(A, B), A we get 180 == angle(B, midpoint(A, B), A) mod 360, 0 == angle(midpoint(A, B), A, B) mod 360, 0 == angle(A, B, midpoint(A, B)) mod 360
By between_implies_angles on C, midpoint(A, C), A we get 180 == angle(C, midpoint(A, C), A) mod 360, 0 == angle(midpoint(A, C), A, C) mod 360, 0 == angle(A, C, midpoint(A, C)) mod 360
