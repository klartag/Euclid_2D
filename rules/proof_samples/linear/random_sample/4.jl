Assumptions:
A, B, C, D, E, F, G: Point
f, g, h: Line
c: Circle
distinct(A, B, C, D, E, F, G)
distinct(f, g, h)
f == external_angle_bisector(B, A, C)
g == internal_angle_bisector(A, C, B)
c == Circle(A, B, C)
h == internal_angle_bisector(A, B, C)
D == line_intersection(f, g)
E == midpoint(C, D)
F in f, c
G == line_intersection(g, h)

Embedding:
c := {"center": {"x": "-2.835245376477041556739777661277912557125091552734375", "y": "7.9754635624993799325466170557774603366851806640625"}, "radius_squared": "12.9091572116905553002652595750987529754638671875"}
C := {"x": "-5.9401080244596385573913428366329616125941300744432176024144084242679886281976747001495969960452902613492872015369140592499282181549772080529215567597079354058181983363613972402914498237556991829068907606555076160454097753220069825856075017121178024645492162055925963185612842794852322075631395945286499338584839464183299940040362505123511411163091452293355477839679283807684335512016066849033038784342616618805258946213379109714108346022335394600715503185039673967707173286779919220721549522111163473666057466504990117440942495451246317866704783885323848353943808939635725602715258572685352840009088025455759364199259393594686852112250176092994746615131300230075394698843731140988234312210671999843068970213471985956061088155357335403896048486072546617619395160936845193877246594438598522176944836807832175707746302998177244381239988224513380124383210147184045812443551852060563485993041879715902306521536476065591662697625743033714237619470566403654827526640961893253852475593121947840557661241591093580067325416829734899237609551882162219278847592417793932637113311392092759415851142952394956180902134743979225448460745404520557629067697488617527768552572183269807713838267190330058361248346781405233834059872840131650962318782600165240523990695028794427744538568606587061023767235396264331554643691287515721561436135158645695562003973980211088124404340831865792025539038386411890745055541298757851027301425755471276742269620596314101216360228691067196976790176346500831946975395071391287409115760196137366130072127820887209449962248807355149583303241581088163849766272493064437812198079537615464794862312238286655096834997463345942214201957496692384507702970509444994886564201579569208629748852096926868888278396285707693114050596534915748575831007442875160989016374489402686436582745241927990397269308547622806204337246513058737548077607889732062124103235464341658268240241119322603162175798889995731471278760237088190912675076700782433721000371661148147628934673413722918800882541350856020582782", "y": "9.7834970657434573323904711058102297920691122497332146326897313897825086530087476645062809919601018179777648637684334847574393577658777984642473003273511004527261384650551529893455321209285595239487509883870525556265549737413153773732822115826406904555871281743764920801134665958703484860605325808424281848413238296707993838028708886170292244947655815013770106414211454843556233862849146464412600437043249778063261808292126369172499443629102267639730766277182483689321058315768292725796776678621116558505781822147149938412056606949908234485948390018304966301639631876096160091291198803592311235161297057501612845900140508263294400706426510311833990244698505182689790691886329587051393854075461477957458084792585461566504308228435769580562823680903870500240348410966861134409151543173176205037489444058634783220946676813103722064044998210786489114463581609142800829864723860861380050707873583035293570513490452100655209776588791826781209769540243502280050935825843807801778692798055642042791007909315289989509961653370435069434831347203202768633719563953324898743990195408740399956643255185407005256705057411058308856178252934752275170092650239568712403219273595955838792259883083352089430989549229215510604310467253760111170885325814869265488652523660809504467777814879300799790226302323093499807907060891865105554877047018881956128393052233844428705209592928719974998095608775635480089116881505665551742347897161866125144149655251262520198387377526328448596989789471782844457575018823050489101813096715949454527120442809352656379382309931575779001977356088875633692686188146027284900386294723020199710425355989930033494770820195415732348750941832174605136535931210278197042682501366527416163589856521926461858040533725862842409405043530385394219763685186454541095894089234558263462847981806776685535832538782699059330560214265479263760823700205652907552292103066853388687332002452792559660498700452612386484818408547053815646001069301857781526143054829101630309933823775129328548493557139130085117008"}
B := {"x": "-5.4002041000053394755636550040506646085447434061048912836534392135819194501218128126045868655552627017616926799038520206859016462061129568074848108919944147687736238366302696876975097247986665195607148520894721064687084254805462040897549327923870013126188990004382027168526549989943444238880095176471705893458531861195314852749501823753346588664558969493216259308533550430432015675340428252625642401728203548679935892317572045391968920687040324716401138314895292106154308291248870159289305158086278350988774814205473977521617807608876290098850696243746128053917453829081870134199242499463913734782841311565927422008755893440863541130043737717957886728695829006601456688864240943430743473868652903941554705385086086542874478199809546748963627731539173907637101489526610181082784841080978607685082601339140047288457140482333682323034053172231293422739362556849590618333203139111921697123808389347773529135111938185199274764737396548309414354072492424199274238655820750549443043414653733419013354692967792033777808534494474738981029221539564370555434678129323473441538403301109493681550514378689483347787425962929608080512199357996255316266408942725677686280025685531586413428202089430126992827633351395203482677223035681526409340463766351685534187780319124524308951734293019511171495720534540832954165764216437981061192530318009122745319026108253016510566668826904706766743950722953882997179939172349909369009664914028253566682329151376089942698338269879636872684040255284179166416350738458251410386635760945271168131057080326920710997449701032942764500330469726283545263576675101570942877762014957649922890314009834886953010807798297621990395311207643464064353464716586290665694574246637653216007427690708970957496040854539921606380548612356915919748332897074881795541217974577994822343286421908180311316494143630390478412745586746611757388246814028800110336403905990866590199973423981626858698816323505534654790349545135506595821716715608133660723110665079148782671816107569163733801500260059968630003", "y": "10.491441296559568284062934183954556987550065493426454352272042137477198230040442231494221378056687229014467734625955344343878163583895276463454126935851922621213208539032170885340795954672280773616317675258042986332158431651043029844439090428155610238374443450411645722146041679680823187398621922624352867063079653246085539589533696491558073939668570674690176635007702931633764445311755105146075012522415402395353205736841026807715186163956703010959250261219062410416410522762523731917080373070140057588866110169176400551155816796972630557925843114904591605929015166271364078361890478509922371212654224950056516386242057789884875115758503582925359244945344187934363103722922097257038217501291609979389075773165675607376137488155033397256619190301671516415193106305187640864273669553718849535168455376384024275304469326836451304679550977055564404349502758307674999724580995932242634662847065719075318511308658297734995795850154069164640044304722935159954639950186909124174866011277632853048256100795304408625798276900358948623688461904085991908105107208381702623252483020871477748321095334731349323194945387927830790020799683906867251257615391286507477897924035930933852911023371147221402065443992112275695635612008412924862813567500816980841884291198003603231625248532257802731600364356181797199504815214673687418774785650415244992233338571710730504736774848318320641865052207433605876631464883409183806371598564477973457915683557906042987824790456602778033280004228903877442755068133022354923917485261048168778932886652858595749342646313177070057698391479554436673546785938099247694771021613164317368383739646496037779640497208038105143850204857919888723895493189106370224393407292396872156097295626637565528212124294841656787173608455934798866639134837742036962920913086058012871169323985174508448247309117784116230145303318667201972427643728685787629321729831106351133609564695125990873018206060662256448648323448533008129397402048436885694604676564806591525422602242418147538040739583856872266226"}
A := {"x": "-4.1165129323870719632857045922169376946991536231126841707841287731371171009628127735611607624710454612298107720535706159908605637540325937278734059245821582941250198793525092252567730434597884168496032943379657901452212138616254887740454633292179391294535968580600953340612286257169125892483081363878754405451373059841326708481069649472897221133745413532199073274296820925108657618554873778316858812234418791044152612159820225321020881457190747370207805808613520209391110667954914264408350053746378842006023850391574982557698840086289708821269501145635025647099404486998008678174569754986970610205797645430181509685387019663594867125214346656145887541047503338285337963009685256496271748955212698333645865246236689427470042200980210983167302525693882733972347261450525136648557698727454617925751576678449836856888502705948310324031727022466546648077711679303636242167006748575779242891360167406896699986942250128063927661839613882362334325812374012611068131956994352074030387937571663266228880171678044519410774674807070518039954328895039102794434956811444585300452198810761931261262774523800860454986107814352266297026122656236186010754621445332660498583081486963341577655962094270929401780595656941518766106489920650490413623124740356542411328476583552989204676004190196559449181588333007409647240330944363923771009038691425339492148832143287860698134939434352524763125315587262353044734130303900457234662830179702545882816640454606592603323531801632577018908635997983224605187257874271363911061226915897845292344272541399206553340284098703180492359802178308480034455650812000975881581772585578446451322634662600875557289297697763125782769674311135802047554225724293473174406360506968516928198542269240114610133360930222902746638403304312434997836731062342212086370105318162409988451527890645726271472666358402344634626274783840755354583416574530918906121958049246889543669813342765388866567856505095444879261016337474090815956392465968954742088111505019656522424513533842906327747195375998792705913", "y": "11.332174849140352337297656317868838284662788399753829231768439139116562412091482550810226166047417699931659337866222010713788053218906725022994977065237393725561682632547648501914522391347652502406719853084033509994306747250232673144955889230383189051255281806195150702617837655550580247129983365378350896247100255179620435810683498955424559359582417243160811173801958279126507886486610983018014368010628034318818467006641893520726601822053180533482842432567387198617367237745698801271747484402048020658099355495399002233046172853187867945294804396850572263377901206119873723935908923537622152384955947169156551077231954954722800953634914812640559428687470664423584388327599117327036428312679687185723288440303919511629046417204307268892508227747293588536780519880304058688329964024483055400099754628946295827116329044578854755192742936381234262332889788307447732358488446987837083343326670360638915132544037740583691782351201101578679530790307521458840854223822646303461002887224795440826028685914369472121138188154148819479216783140613436849950391965521566927619567384844464631512961338821287283747839941564916521357074364132971941928355220887113562876615008137012286378451463015955298387138060440717149368484812281371954539387842839266865786163737138975913327953447955856055911158067030421757385059218858190283091119524101607526257619938870083058404468047305914175669071738743126803994610261989623658893048271902507740422183021601508761581704086851021370002546644394268643943550965920764966872594223193411083496173684004728915073765076309310662342908318198245610847637787796710243818011677072391388040035298602772577054889958593488025429545289356651434746137675231931439557072979369273000416023388374217421142621935401294837176889701316816412043531918538249022243752174482821611953081924062372998384483368650754785541342596793673071940501989497806324758221342591909967999036039186120106362983273309341184051185679635916923118571342688051147734441828883268228927188811206919076614911787175822699821"}
h := {"point": {"x": "-5.4002041000053394755636550040506646085447434061048912836534392135819194501218128126045868655552627017616926799038520206859016462061129568074848108919944147687736238366302696876975097247986665195607148520894721064687084254805462040897549327923870013126188990004382027168526549989943444238880095176471705893458531861195314852749501823753346588664558969493216259308533550430432015675340428252625642401728203548679935892317572045391968920687040324716401138314895292106154308291248870159289305158086278350988774814205473977521617807608876290098850696243746128053917453829081870134199242499463913734782841311565927422008755893440863541130043737717957886728695829006601456688864240943430743473868652903941554705385086086542874478199809546748963627731539173907637101489526610181082784841080978607685082601339140047288457140482333682323034053172231293422739362556849590618333203139111921697123808389347773529135111938185199274764737396548309414354072492424199274238655820750549443043414653733419013354692967792033777808534494474738981029221539564370555434678129323473441538403301109493681550514378689483347787425962929608080512199357996255316266408942725677686280025685531586413428202089430126992827633351395203482677223035681526409340463766351685534187780319124524308951734293019511171495720534540832954165764216437981061192530318009122745319026108253016510566668826904706766743950722953882997179939172349909369009664914028253566682329151376089942698338269879636872684040255284179166416350738458251410386635760945271168131057080326920710997449701032942764500330469726283545263576675101570942877762014957649922890314009834886953010807798297621990395311207643464064353464716586290665694574246637653216007427690708970957496040854539921606380548612356915919748332897074881795541217974577994822343286421908180311316494143630390478412745586746611757388246814028800110336403905990866590199973423981626858698816323505534654790349545135506595821716715608133660723110665079148782671816107569163733801500260059968630003", "y": "10.491441296559568284062934183954556987550065493426454352272042137477198230040442231494221378056687229014467734625955344343878163583895276463454126935851922621213208539032170885340795954672280773616317675258042986332158431651043029844439090428155610238374443450411645722146041679680823187398621922624352867063079653246085539589533696491558073939668570674690176635007702931633764445311755105146075012522415402395353205736841026807715186163956703010959250261219062410416410522762523731917080373070140057588866110169176400551155816796972630557925843114904591605929015166271364078361890478509922371212654224950056516386242057789884875115758503582925359244945344187934363103722922097257038217501291609979389075773165675607376137488155033397256619190301671516415193106305187640864273669553718849535168455376384024275304469326836451304679550977055564404349502758307674999724580995932242634662847065719075318511308658297734995795850154069164640044304722935159954639950186909124174866011277632853048256100795304408625798276900358948623688461904085991908105107208381702623252483020871477748321095334731349323194945387927830790020799683906867251257615391286507477897924035930933852911023371147221402065443992112275695635612008412924862813567500816980841884291198003603231625248532257802731600364356181797199504815214673687418774785650415244992233338571710730504736774848318320641865052207433605876631464883409183806371598564477973457915683557906042987824790456602778033280004228903877442755068133022354923917485261048168778932886652858595749342646313177070057698391479554436673546785938099247694771021613164317368383739646496037779640497208038105143850204857919888723895493189106370224393407292396872156097295626637565528212124294841656787173608455934798866639134837742036962920913086058012871169323985174508448247309117784116230145303318667201972427643728685787629321729831106351133609564695125990873018206060662256448648323448533008129397402048436885694604676564806591525422602242418147538040739583856872266226"}, "direction": {"x": "0.23014121992084669653956205517674544344466507792602108770212217658108282213265510916444915903588819525852971065072893026534558671495609841901488509760216946819852827391141630567130127007177336763889239911127543288322105628561327296908509946353945885751041069885383387468584148723857200039898593229119816562585238770058780036395358396008031363239703710489755226707305398701011501627734539752876382422688651304516105230780508310367158191649088855439136136776602445874537775001739296949998802130881245356456945555470895165475266967134647615951380407678257467588487901115415244944838902135619303105271933970573515634712960270469017260692479824323151561401388058503502977770927707522594552980059970670876059242093841438083493128053928456837258693584551515974450767298105154143875546683089201058897230303027487272419750254197650001143438619239091524309251067503160050039885085616187035581930037287293757375358564426499922208068981203739060503654478979522995875511955135614571400470641894277278444504134370456359589387006467392648923141660252012078144727961474553420957206912308095504541247172687260868589242933306845777973786261688382245183925224056753583357169468867980957398450711209549562290285391455265164658685251987015711703772455629215119983631968768059893053803314732595597103423160264645175062678955887614355154333044899798598118170665821772756111124575789486511280263839330709431633293247646037819102716636639863356178375897301905797066901596882807756197870676268442082738491339029292908619489631162176076477440639035052837216020263724747913366615419754945913980303628655552480191321037898514156615688986527035467234172463497555282231375805648635471829372027757143345305140647854964885883780416744756868659982387863997041984997198044034405320976967012941070342873588260268952960991412321554463891919060044389283016566719024997029706156201588274957890834429133642143202993046263625326849781695144436456013611234395537433418118760861248708096817910192092442105111448302733171038339518619556078752283", "y": "-0.24726428898525557554941900810358073826292808593656327633049302118673348223683608286216073008059823474943146421960744002227241694193162987584469046827552267795940070630210711509902342847518803830451494746727984261406885000711304070514053494619602228918137791456879797031957304564758277840250662144061797406322483118253159653674186275956367992497186876464834365429151973036080238486892166348055161562052213390890584351862336664509598261319723976865914465625036152171234016328728022095978113915747383931897654830704181421405281487936669879529514928476046147223149265823015273447765661735138567769918844664359458957688723363786615461609238087696365415092144526500004310290205841348740101972378787010033609268331192977483733938318125811413366881402307880027131081272723603738600546912614080553325477306467628025539871563305055519727827639962322169291780024072368185718954398346012687952220822588402750051405566725878107622518290012142779861090708885611955029387265733011137573980022152956379969669939639299287837966710053954827547504778290737390611280919019958226696582942227681653714322932184101102738044524348896323587077323789454597043306125426846013568913352812402618316488736990918299546256667797752862720051727584392261568151619302946045918449855666182552753501313557470302017493800041110554481103349572577697967114210407988927769119111244963076541535473102562654157471078394823022260319898214839290357605658009020685279959862935603628824442793543541703570132531423193855049594556557560241236805633707310398428365870019720350484346235452410716213023523798858662777875672088915766117512111183919769240026733556449978024381705169829581451450808688019284636582597461893229240824669123012702102538299518752016426926322945351624445848632409491263048064121486018948396726912780175813363698235027663695431870121625697402643082508389531263827538210610670678421399566638849765054576642846234588503732207973292558616990610831597549501052949159098432329785267466291086806631796089708443613625145184530400094676"}}
g := {"point": {"x": "-5.9401080244596385573913428366329616125941300744432176024144084242679886281976747001495969960452902613492872015369140592499282181549772080529215567597079354058181983363613972402914498237556991829068907606555076160454097753220069825856075017121178024645492162055925963185612842794852322075631395945286499338584839464183299940040362505123511411163091452293355477839679283807684335512016066849033038784342616618805258946213379109714108346022335394600715503185039673967707173286779919220721549522111163473666057466504990117440942495451246317866704783885323848353943808939635725602715258572685352840009088025455759364199259393594686852112250176092994746615131300230075394698843731140988234312210671999843068970213471985956061088155357335403896048486072546617619395160936845193877246594438598522176944836807832175707746302998177244381239988224513380124383210147184045812443551852060563485993041879715902306521536476065591662697625743033714237619470566403654827526640961893253852475593121947840557661241591093580067325416829734899237609551882162219278847592417793932637113311392092759415851142952394956180902134743979225448460745404520557629067697488617527768552572183269807713838267190330058361248346781405233834059872840131650962318782600165240523990695028794427744538568606587061023767235396264331554643691287515721561436135158645695562003973980211088124404340831865792025539038386411890745055541298757851027301425755471276742269620596314101216360228691067196976790176346500831946975395071391287409115760196137366130072127820887209449962248807355149583303241581088163849766272493064437812198079537615464794862312238286655096834997463345942214201957496692384507702970509444994886564201579569208629748852096926868888278396285707693114050596534915748575831007442875160989016374489402686436582745241927990397269308547622806204337246513058737548077607889732062124103235464341658268240241119322603162175798889995731471278760237088190912675076700782433721000371661148147628934673413722918800882541350856020582782", "y": "9.7834970657434573323904711058102297920691122497332146326897313897825086530087476645062809919601018179777648637684334847574393577658777984642473003273511004527261384650551529893455321209285595239487509883870525556265549737413153773732822115826406904555871281743764920801134665958703484860605325808424281848413238296707993838028708886170292244947655815013770106414211454843556233862849146464412600437043249778063261808292126369172499443629102267639730766277182483689321058315768292725796776678621116558505781822147149938412056606949908234485948390018304966301639631876096160091291198803592311235161297057501612845900140508263294400706426510311833990244698505182689790691886329587051393854075461477957458084792585461566504308228435769580562823680903870500240348410966861134409151543173176205037489444058634783220946676813103722064044998210786489114463581609142800829864723860861380050707873583035293570513490452100655209776588791826781209769540243502280050935825843807801778692798055642042791007909315289989509961653370435069434831347203202768633719563953324898743990195408740399956643255185407005256705057411058308856178252934752275170092650239568712403219273595955838792259883083352089430989549229215510604310467253760111170885325814869265488652523660809504467777814879300799790226302323093499807907060891865105554877047018881956128393052233844428705209592928719974998095608775635480089116881505665551742347897161866125144149655251262520198387377526328448596989789471782844457575018823050489101813096715949454527120442809352656379382309931575779001977356088875633692686188146027284900386294723020199710425355989930033494770820195415732348750941832174605136535931210278197042682501366527416163589856521926461858040533725862842409405043530385394219763685186454541095894089234558263462847981806776685535832538782699059330560214265479263760823700205652907552292103066853388687332002452792559660498700452612386484818408547053815646001069301857781526143054829101630309933823775129328548493557139130085117008"}, "direction": {"x": "1.3686346357494272576521110722842312586364150934797683374943115764499534458201506265265487714802725098889991118151286379347383457890406541298794060509129847581944663145155571939637877549069762841307019183629372838579318837359253579377131867019149288345523951991341973091030775273253587993973379436312797942798440030605377204455861122496108354879136656143883203298014938290706067347645604969163212568618364283553973326516056778188233243759972237219025536425319043222318950422386849240462131202963206212335964415039050009830442409467843367236108471854345277206085972348596946877325390291498304747480105822719561623326668445052199420086258172939886252216673697866088311302062912377368131067154933199752359650423527850667836147294198100131375054199762437823031898903425104047278325211057913824446316381874066413057698485195381911820199089685977484605862625952840337711456314278832506702696063707065837386582918759854113288530274150604814862323355006702316685831013549268611051185200910048901513765803739653746393339177155450849070576195470002677362419130802693322656946675404685995521408075354686930027648275669502434863362959029751639421122438944757128582648550984734250229179236602953791956512100059746058050813556416308836662053541877571290590709437272075123889991772041581655864477331285963651307737114509106586045401436897939026761529364257925053971723441629441403253192387608566727729052243073569821827971285339464559615710368650295301213331822221214394214199742435925731847821747550153088248815933899899365963166986208555198642558497042019610199529824530011741805823729071473005439746340894843540243681196909126489056080656893704063272496832828272741521322309882180484339706538893752677496752158222605561895102772777346485588179175403579471614982574447225531324021204297111197751532790439338297757646901906605253813272281008054739715121513140490847573267102659952526679121338003990986931124041146040864143153245759206388587149535471357928307701603376433576261516409015991448126465795853537102384675", "y": "1.4424652131741301136842548945668204265646921837764309794200198716986500495384782573634060748950388225505851611047287481152483855342931753939200365732333718111452177115662451411982741886445756216712055790310820972335662198139918203278059439286857508448657191463730856657621350093958534603038353626103895871246686847102666497290427582976796594286223097299904534742866633889751222954541963418946894654358406801481252342057059236665021651920295460616729805470555751244086547459526632957167604020985980977934913488943114347475909620453145399965348278058485744357809290091865123126547797033742463053298951079560477394968317039733258247129347552047373725574513484165072125267882424499369030318978772421443473330762391449992247900007145939253070945596505988930800472889809011981788296100891533416242921789687119119906950407582764327418830477248873589770491829223850043844800135675836451535302397402934543245049103116185107259005269992286897572247624757584452897920252859565913159880283098441911986639840604136006169123196986801702292248341461913258232151234742435402695902454916634653374394645923365253226305376121929021643343457953639286373421320278884696178310711360969371403934026522180636845810101767870148406554854849122040421573922760445294654921548224711972393505135877196790116847292202676648257997868107651908408657265484284580023649530830505395967354994086181137966326769407436450961436357602073697577266356960298311535884864071103133833515997142902912223513742442132241933156516098540990953858664447534471820202943529321462865392681977421928344508121238310446737547128110864538724956012320054246282627090759605809237319450558076085904381509913503597278014512863579612680472097321744991990664466000224129053288577564503952460796879403188115853530405751411859014775678157226034047833131612959655943483568057985163342273414985802175079774226682765808842824922385003023934443531642382039147217190786202628387854358397373503124437118014873291920442506333130355035602484340925489196129053652733751351878"}}
f := {"point": {"x": "-4.1165129323870719632857045922169376946991536231126841707841287731371171009628127735611607624710454612298107720535706159908605637540325937278734059245821582941250198793525092252567730434597884168496032943379657901452212138616254887740454633292179391294535968580600953340612286257169125892483081363878754405451373059841326708481069649472897221133745413532199073274296820925108657618554873778316858812234418791044152612159820225321020881457190747370207805808613520209391110667954914264408350053746378842006023850391574982557698840086289708821269501145635025647099404486998008678174569754986970610205797645430181509685387019663594867125214346656145887541047503338285337963009685256496271748955212698333645865246236689427470042200980210983167302525693882733972347261450525136648557698727454617925751576678449836856888502705948310324031727022466546648077711679303636242167006748575779242891360167406896699986942250128063927661839613882362334325812374012611068131956994352074030387937571663266228880171678044519410774674807070518039954328895039102794434956811444585300452198810761931261262774523800860454986107814352266297026122656236186010754621445332660498583081486963341577655962094270929401780595656941518766106489920650490413623124740356542411328476583552989204676004190196559449181588333007409647240330944363923771009038691425339492148832143287860698134939434352524763125315587262353044734130303900457234662830179702545882816640454606592603323531801632577018908635997983224605187257874271363911061226915897845292344272541399206553340284098703180492359802178308480034455650812000975881581772585578446451322634662600875557289297697763125782769674311135802047554225724293473174406360506968516928198542269240114610133360930222902746638403304312434997836731062342212086370105318162409988451527890645726271472666358402344634626274783840755354583416574530918906121958049246889543669813342765388866567856505095444879261016337474090815956392465968954742088111505019656522424513533842906327747195375998792705913", "y": "11.332174849140352337297656317868838284662788399753829231768439139116562412091482550810226166047417699931659337866222010713788053218906725022994977065237393725561682632547648501914522391347652502406719853084033509994306747250232673144955889230383189051255281806195150702617837655550580247129983365378350896247100255179620435810683498955424559359582417243160811173801958279126507886486610983018014368010628034318818467006641893520726601822053180533482842432567387198617367237745698801271747484402048020658099355495399002233046172853187867945294804396850572263377901206119873723935908923537622152384955947169156551077231954954722800953634914812640559428687470664423584388327599117327036428312679687185723288440303919511629046417204307268892508227747293588536780519880304058688329964024483055400099754628946295827116329044578854755192742936381234262332889788307447732358488446987837083343326670360638915132544037740583691782351201101578679530790307521458840854223822646303461002887224795440826028685914369472121138188154148819479216783140613436849950391965521566927619567384844464631512961338821287283747839941564916521357074364132971941928355220887113562876615008137012286378451463015955298387138060440717149368484812281371954539387842839266865786163737138975913327953447955856055911158067030421757385059218858190283091119524101607526257619938870083058404468047305914175669071738743126803994610261989623658893048271902507740422183021601508761581704086851021370002546644394268643943550965920764966872594223193411083496173684004728915073765076309310662342908318198245610847637787796710243818011677072391388040035298602772577054889958593488025429545289356651434746137675231931439557072979369273000416023388374217421142621935401294837176889701316816412043531918538249022243752174482821611953081924062372998384483368650754785541342596793673071940501989497806324758221342591909967999036039186120106362983273309341184051185679635916923118571342688051147734441828883268228927188811206919076614911787175822699821"}, "direction": {"x": "-0.074328897686126321279418605704798534472202890895695381698252933335936939297326965374736953959476707533850273997069959637729511568079415602560357250939418824082518681746781690580295296203356203164417649774147077204098018486308777671826723145982840846891335841520346199598008369813708329228851534792641225121520868144680058054048467661227052970481995950410645206651190327213999974747649495405364817433000187526200275543537259276158827035532510572286500258380573160990119708098023099490789013591986533055974611287811619371802373588594863924485815376086196607925769133819048206989417605738247073179019364633007881318587678985906070375387232308257243736663547823869216911154661716375561635310545363577817848840787624766487506267385971983289147349101555032354020493403968636957149997348293318530704587266072347786342049487245682936465222482414386986065100313228466546859336542742487265434949460727066844709977602551582463262914219899106387273816741604389942957306079632714375179219468704406457771658254223705958880347611323759244155958902120800675795900464287408341103040079851921590346004285721627126134334860233668974100034199832226754286576334820261201663925170707891375926926931511410617635107263455208355885294026209963976277877014586057611952668133504260730687503705266991463054457674181332512326437708793046255691014715514776520100375542538747991073718613926540748486681172297291888434338531617520306668888481743194598295895017396113765164667305556336423382133446464382883153737910508630740724661580942979924500626614154461962545078117024488027385910611948213061117201896421074452767663078848876387682111807568261198485754206125334317614261627454904030793989680940852215249684518354984355140933044884338071845622191300234757560724054626250388627193700770908284383975374713620688150898369217399809352534384317963998420570362340177671968865181392684054997819896516936142742868729184252249183146988757191756151488890539774203116284788019784700068532051782552899196594390239994769384990614051390080975682", "y": "0.099427003940624150368276885451173964490647032138221408271516656700978707534729502939725058440701367579268851954979340292364461044675193676129595763364713264381855568157313467554617607857294979166772049178658596790085148773659435662392380727025898184732437905419832801232798740936235256123906572407266982542237379345494876748133581249645690936427958123101258356588819471455966492086169261198128453707257110627514693841213698072911107125383661489908078102768895113909390911644881909217225518049180367681980048993285408440964576996962794318981710266389757626553395604382924970137377003748134035380449707560020638544670926787316065367626914221122165090454275112363610454076794495436927911315598311443285947758053697324630182242453386683216684876461445284362363756015354156912425176838780008644483922826947562710021648783775515613006856132147456394159689249645456279210912387957743690925060041064165968545546786392848170969702168124793862612230291659955574482725320010289981274969560138452126034657956359588012061708134650709638472341159466295977046588691457547333423005512953981984287915941523660658468584150426791644154463746060783958735824350993805140416551533830205597701713229463237373534640779163964038130157595692215528947033229253248687489209428782329792092951503421271803003272438668041020906378017400040194531342952888817096044991604864016089784165387002466971049294606735131427261792301496306524257186705313514732917937549865072844232627159624832708081010627515885859658519432467711311721374687052002988752745209722618131740019190080461076374229169358142566903809448149668569439395641144726818935322271932014799681399183719332110077292021514930164734480014811899861427875350437391544717581553382806532722253805685812935140031992141201765141681203796630847735312056615419493016240031053462087608607557654377034463518103403892769805242328615378108519157981276764034957692602961378489465668188681590096294619078310209320714208055602872924176084470046432389581943482911256412580172573049017523858472"}}
G := {"x": "-5.3349349756320991296131688458914577794679715474888570316046859918764819893595592026063097565922577659428091590190937241202557449573719545239545208104410960075774971863245512475347967823646295912843823041555434570262744272085245052422356467894526190633568229881827961893023013154227260680876775065366180178262558554793677301897178184169738845177127218739542755258043857227581587626003290821553826290368369851391569592252220666160230642024024611066030256582079460551409948142253769938137823943708536718244597267312195773445116534804240756338713489044698026473644128295163165927373973956580418582525875309613054212902677444160542940198432481652009437248297312782057648399096917079514786422651561203906058850864020854139249457167840760881906251323996804557611818046018283752367392226683818178196093189160966870144942553020028644132253268483387906138134713840826074151235993729648618740749169166990385579855544405749629043531664761375310670336635712603144985217160804028112263214564447697157456638758552361623708926752329679853917271712165100671414588775907566388172772091454453784953091899008273096243239055084944752923775962551066010031620122240615927324331134158787231959149547870333414926662996518300820727960606616803996577617552574237382126901828141900852938865370697780965337687976226670300145651917032800377912383644639863308462433562697047892560204959863194475765227562854779491817625168903507948608271552060283072387788453757824031100230229232593178884019432046529398943458557281771430018522741418688886850385152265871888196138690563931747698365141579225308847494317134903951840710401332569572697185042792364265402557170517258482374724057957588322789433867177743864066958203390605972220660497524052820120618999222037406657316423796908171809407105014954549901017579262462272484325354361007215057206247872730542198242640189857712319443255147863749308044896016581255372576705406205933447514245468795749312598301411480590058907868615703003696322444449626721301639524773497739873589778585699467651396", "y": "10.421315989861402093861889788342963676942657590139894120847938898849737770400580689637015837146525984643636531454382127291124348326489689779341096317214016989903495576857113451902870347595248849604343314653559380774486604364164136389037154016399587800113735797534012309143527279401693983331336823754358570530882729349724969373894323559607841665201865278474583546647794461127225484622947632596540865765728462691228295373392409014226390816288568097434157634827611647405914685545835675133828487106081328197573577403262063504814963615402129058746610259124584120221288068507756286280482665809048247918780837375080060443254816979737522017051307617274495194461326253484664216181110283574710714939189993497657471195089925140176397025294272803649035436114397929447155717342624423452318347914066108342476218252263585621907458126577829582469348409653607533509798369101171435414698795330475978494342763890643583090717647429195208754832543696024927288184898601055817292675267797642817179306328596077114638858598740006533706521312878587579129895515552481253254133443110371061230153581911637139214445946521560022172087380005167447336964208303372769409094150223624727965440869327909164546198013989041243317273090137465119238311414572943884144441499390027694552550751951408748173707510320472792554068428286511910883197584158475110522509519449483329019842903044792800267360965203620381686461703724042317018141290457609930673302942441237280631416790868735393921643130794343632895531794003886356442838314243827315847998885482040950969185541136755972056490083668381715226893336497593003536001830573076707757957545442351773375068171341869921920163352944637572419004562264056637042225570433969698553002484097417323515847264951584436508712778755279425987019005423552047740099349617503990686876947251980695404930838538813465434747240883705871406262890687251978604885195331831263783464078932702779199314711742079707048840455838212997828400062911719491162075783414155514334734344887706972934242764760211445727544533797096454776"}
F := {"x": "0.02167864328562534146009015798386899094993528594902966796837233753731995407951416672071669066334610541035815043082770665719680139820268250143012723997663407474620691919108338055063033421385812432150706050663479929871226214655490201647512806613497409634364764718158000210583249457535988355285807774237290337812313605914377945168890339012766659521055649764974478987435417657406709506178838335875983108611419731806023843671760389999984345338303305841210060983340187022578503589476384977657969249375786508276101269369253796132027925867689027989584289412616606152298155199696332187959271966433765913615922142230450762919470189416597352322257616707547522015576966843018806505288110850836053263351699288302289679556775185135945089111427547996731724908482431862961037345005049686621031770832336696108929014401849025645461870847248470473532160294253609480683178207580608924345670917697368648322133091474912588977145064997996441764606812538010188845706764610090799613693931528333280531974350593987006153559989599642210915418593444204693148846568692642808882265449230968028166673082919515761519727378000072515449771969663244786923113403756303641512691090808282646164954427899361641910575350665399576004913804865453863602206247808172313428336748924409448774368920332822878662719682012564866941206783624751285078604592481771559544605363948190856985142915438216435843322226543872385186266509527381968773270472307253165814107652419492783663302780519632047959031051391538617786760828918358113030692462605864209546020310384548437730426389714237525798350626564017696100878653647888772449314001302123467371122856394409120394901480518464929780983356507843935585509766033518974603886537333124971774172973509204127150706637473478349552957417011091973678178984859000378905009205246163236518106165459941294888809774725962494435975452736229688529486778049985581069194760544292556236295309735900097018080305817442172522270079192503386753746519781252858706084626538435452993499093814443503777895178592759708655264417684745443022", "y": "5.7966697776281085093678128120224080824383802570699130713932450601844082334491639234977804906337391286289724372446500608507595358786796393777919290736669268710380528737072212593656295477211901842056138176143324026674063417075178997201402551110629498746199136318007347271797039847130834057755616220178161654649324108836755962863915764108872086665175106625389052216864704073360361685032722344091109851365008849416249308090758471701843526917910080193776728581286424567216119569555042169737038116332691209756629234401355691260637471609627468561639768666555195787683529717257593673500899104161381033745433797731858286810038059509429409387746407827105497827717033316572113157117173062273827458416867734781153889999443241865273103613299445542956699238160762860850281993217745443517420806016992271096883110728242342581634233713038846576955929718732465553292341706888596362444863395722498699962267112072671264086435667361359091244873471957535496272876380852460979656736677751792170893829245478801173719255307081073867501468778458058564826647197488419739417704537042309110901979545737457397265292690060171480367163594840851980293375497396308591812458588128606632954637536322775733583512722053918362379879343884143961490207818715181015842230934856460009858030105544103702609529899247243585461464740183158368655309883874495542348790655989039104267057163044991900294863863156225568140744438843208790909226332212478594982150809688612942004336670912785265630494073882461807080492088121856032391521459590291780791845755194005599187126770063448136014032877483181839175052571531851429653550546885535910573076370906887740589862763241557561953819085911152729252839667016523324399471212784437524598341533107214174812575701997822910420817036322597446212688337320743141871443006540405221375592293301778562322025827150195123182042491383580676780092733355783992878036273171737241755321439517015584351128463537692657955955766675641595208648158457316519687994475891396974304934987145905181984048153633431716014586869230484517446"}
D := {"x": "-4.2725964805757758055662558555081438724205891696120778129889544036957510524810157559364613934273947579295149393812638998635896161153159803479131094726495645835567330519483630835976586125671286675685931622156990578566917775427370071481195852598150814985922487534882023587738106596598958629074441043973509491128804555690507168658055213494955959682944618117361832746052901305043970254739360728511239889303050963966404469632702365676865218915395138570924117324290291195819301708099517846030834670767987502250571608379917594121534452972297480873832338573950716776921092636414413520632055647514961701478196297322725382733332453084299848671510830914254128217517766629759470277663046061623254843852154277374142442569789284480499795138279887998631970592651430219018589612491080190452004836782415298623939869484292779618674202065036145560091507989704632992639036519577689175268802604924868140928329007667502796000691107738279973732140036807196849586039908240181814115815057570151213038948157948397242459495487934163234339961209878538435906950182289526031840472595421863687024256891100214025047022935215618467976248526407471161802437636545124909867859796369417823549953316413571606244138727213448205267927802402767147593244427325006107500882695121717814095205430872452546801527643332813496758488548027977095367949697425456353255251207869766355618431121649994439762048934936025108872693984283241089685606308323357521284504432312423349121759267793649082381808796344669001240318926506887156694398678909319095909861869489152231974656016178948988880859346325462565534159805555445485147883434380192364723090863241332467434729423953130345064052289258406139119407208087168954545127790624795651716357858243345097207029670649438133904694346574626046518822444034799022806731117162601554558837890203136160494059540675211215015545932602262631546602936799148668442683179462035312580186124884798333476087843980473774838730632668148360516210747687457781605375726866856261928750272980556712374767139837368816316209118746677667835", "y": "11.540962010580007353099153742232351184040557598544748241627691365983934290999064713374665239041380656689859690845172987622573896407312051666658895029924504062956825586849204081478246864157803163169408642713383088713725726483794178022480101461923479602999145100303644241988510749856561359287388879222718342455619437569279390383504312179144520816020503194017053187067371507908284495456500797894263192655648038605330801277745577198025475978700235047595921863455084298718836288988425031272140414814433498735199771425387558456610229043202928769624052320807794158146730630467607153413855559258966591871368327593798510082453028763313396040606421368821884935185913894802410793063051241740124480522958077438812238592486398325609216729924951054437481176562598175490444747020200750781159415673447748547190509248071483781589477791489292965272152756933857616865593362154708825189420818679086647972260057747804564763084523390110341470864735325192449110934619835716821655690336182781467167125741442204371401220741834573927313393337337981082854392627459859697969521272203154950365798771396716317166188480782127838598210062154455283203291458819355018118401670612941968324308765464528475877129341426942085303383900456046807276564527235840226593557181314961588537933550338396689178257721096390668503915906434205203898415050894553624157635398247013489725237919701322389480522293576029214566402148490134329016613296556180984932990399157088071661672496814424160345562026573340272876854503674759530961072137263717394330910413455918680717035548199681696269634065751855130440476812607030448657496129709835226566462654153932968932443157260614380020812155666942666123071516818157928928837473152250732055478343885535340186822565967941456889155483125503920512985350573374926906908801523838908515423060068074566856378655354389506836511965209246271533623923779909967603528529686880323098282579416946240622786651474260280405699087902996240908597134339889501437418304307570419626067241089810769034820891588687851800520985097185073675"}
E := {"x": "-5.1063522525177071814787993460705527425073596220276477077016814139818698403393452280430291947363425096394010704590889795567589171351465942004173331161787499946874656941548801619445542181614139252377419614356033369510507764323719948668635434859664419815707324795403993386675474695725640352352918494630004414856822009936903554349208859309233685423018035205358655292866092556364152883377713788772139336822833791385831707923040737695486782468865266585819810254664982581763237497439718533376192096439575487958314537442453855781238474211771899370268561229637282565432450788025069561673657110100157270743642161389242373466295923339493350391880503503624437416324533429917432488253388601305744578031413138608605706391630635218280441646818611701264009539361988418318992386713962692164625715610506910400442353146062477663210252531606694970665748107109006558511123333380867493856177228492715813460685443691702551261113791901935818214882889920455543602755237321918320821228009731702532757270639948118900060368539513871650832689019806718836758251032225872655344032506607898162068784141596486720449082943805287324439191635193348305131591520532841269467778642493472796051262749841689660041202958771753283258137291904000490826558633728328534909832647643479169042950229833440145670048124959937260262861972146154325005820492470588957345693183257730958811202550930541282083194883400908567205866185347565917370573803540604274292965093891850045695689932053875149371018743705932989015247636503859551834896875150303252512811032813259181023391918533079219421554076840306074418700693321804667457077963722315088460585200428398631148520831119892720949524876302174176660682352389776731124049150034895269140279718906276863477940883788153511091545316141159580284709489475273799318869280018881271787606189802911298538402391301600806142427240112534417941924724928943108260145534597048718341710794613228300858164481651538468507264761331939915897485492387824347140226213824644991464560967064352170654720276780143808599375234801349125308", "y": "10.662229538161732342744812424021290488054834924138981437158711377883221472003906188940473115500741237333812277306803236190006627086594925065453097678637802257841482025952178535411889492543181343559079815550217822170140350112554777697881156522282085029293136637340068161050988672863454922673960730032573263648471633620039387093187600398086872655393042347697031914244258496131953940870707722167761618179986508205828491053479107057637710170805230905784499245586666333825471060282627151925909041338272577292888976820051276148907944869096876109109445661319145394155346909038611581271487719809098857693749016671979897336233539794821418055624536200002641979827882206535694931125842100222631932965252112617279023535872472241129823776384264006246881772326492612757239794058443432111037284995382684525469726826967481051842072736399832585838326289006253264155975761534494454087946602382612326521523708025666960907216784300087931224261807253935285043944322092972413374636460281780822518202773503204325251005836681786439154779337190744013168763673890068280670738833767822412382409156135378156415256999661414182134357901630143084410558376147291267563833347284906604323118062530056177551558824881075514201169411688798933853805626305925671841044881400944068701592958209673567978019604513235323763273069371777592344560570040532089822670050067604551282271571542882630000740793224013357187981513026841168964150723561368079583890057671850293038319010970338090092149889603092566287916725426521988359287009784383152256110042525432066714539914567473667103932529454716515319106210747296908963057472156281858302546063227976469987489378126808864748947087604257950499082850017809221291215297090035218161864240269138478272904109080293821346604427855894080726744851805957174441638660084646509052415991761950456570588418016029030209882921739576102294822675163918171842949275126085539163746443051142554677993448376758123227784566582117444695218994522635533018762617246674286120186361999986900014101634550810353324938349505096792688"}

Need to prove:
concyclic(A, E, F, G)

Proof:
By line_definition on G, D, g we get g == Line(D, G)
By line_definition on D, A, f we get f == Line(A, D)
By line_definition on D, F, f we get f == Line(D, F)
By line_definition on A, F, f we get f == Line(A, F)
By line_definition on C, D, g we get g == Line(C, D)
By line_definition on G, C, g we get g == Line(C, G)
By line_definition on B, G, h we get h == Line(B, G)
By circle_definition on C, B, F, c we get c == Circle(B, C, F)
By circle_definition on B, A, F, c we get c == Circle(A, B, F)
By circle_definition on A, F, C, c we get c == Circle(A, C, F)
By between_imply_not_between on D, E, C we get collinear_and_not_between(C, D, E)
By between_imply_not_between on C, E, D we get collinear_and_not_between(D, C, E)
By in_imply_concyclic on B, A, C, F we get concyclic(A, B, C, F)
By angle_bisector_draw_angle_v1 on B, A, C we get exists(Line(A, B), Line(A, C))
By angle_bisector_draw_angle_v0 on A, C, B we get exists(Line(A, C), Line(B, C))
By angle_bisector_draw_angle_v1 on C, A, B we get exists(Line(A, B), Line(A, C))
By angle_bisector_draw_angle_v0 on B, C, A we get exists(Line(A, C), Line(B, C))
By angle_bisector_draw_angle_v0 on C, B, A we get exists(Line(A, B), Line(B, C))
By angle_bisector_draw_angle_v0 on A, B, C we get exists(Line(A, B), Line(B, C))
By power_of_a_point_in_circle on B, c we get 0 == power_of_a_point(B, c)
By power_of_a_point_on_circle on C, c we get 0 == power_of_a_point(C, c)
By power_of_a_point_in_circle on F, c we get 0 == power_of_a_point(F, c)
By power_of_a_point_on_circle on A, c we get 0 == power_of_a_point(A, c)
By angles_on_chord_v0 on C, F, A, B, c we get angle(C, A, F) == angle(C, B, F) mod 360
By angles_on_chord_v0 on A, B, F, C, c we get angle(A, C, B) == angle(A, F, B) mod 360
By angles_on_chord_v1 on C, B, A, F, c we get angle(C, A, B) == angle(C, F, B) mod 360
By angles_on_chord_v2 on C, A, B, F, c we get angle(C, B, A) == angle(C, F, A) + 180 mod 360
By angles_on_chord_v2 on F, B, C, A, c we get angle(F, C, B) == angle(F, A, B) + 180 mod 360
By angles_on_chord_v1 on B, A, F, C, c we get angle(B, C, A) == angle(B, F, A) mod 360
By angles_on_chord_v1 on F, C, A, B, c we get angle(F, A, C) == angle(F, B, C) mod 360
By angles_on_chord_v2 on A, C, F, B, c we get angle(A, F, C) == angle(A, B, C) + 180 mod 360
By angles_on_chord_v1 on A, F, B, C, c we get angle(A, B, F) == angle(A, C, F) mod 360
By angles_on_chord_v0 on B, C, F, A, c we get angle(B, A, C) == angle(B, F, C) mod 360
By angles_on_chord_v2 on B, F, A, C, c we get angle(B, A, F) == angle(B, C, F) + 180 mod 360
By angles_on_chord_v3 on A, C, B, F, c we get angle(A, B, C) == angle(A, F, C) + 180 mod 360
By angles_on_chord_v0 on F, A, B, C, c we get angle(F, B, A) == angle(F, C, A) mod 360
By angles_on_chord_v3 on F, B, A, C, c we get angle(F, A, B) == angle(F, C, B) + 180 mod 360
By angles_on_chord_v3 on B, F, C, A, c we get angle(B, C, F) == angle(B, A, F) + 180 mod 360
By angles_on_chord_v3 on C, A, F, B, c we get angle(C, F, A) == angle(C, B, A) + 180 mod 360
By collinear_definition on D, C, E we get C in Line(D, E), E in Line(C, D), Line(C, D) == Line(D, E), 0 == 2 * angle(C, D, E) mod 360
By collinear_definition on C, E, D we get E in Line(C, D), D in Line(C, E), Line(C, D) == Line(C, E), 0 == 2 * angle(E, C, D) mod 360
By log_of_2_times_distance on D, C, C, E we get log(distance(C, D)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(C, E))
By collinear_definition on C, D, E we get D in Line(C, E), E in Line(C, D), Line(C, D) == Line(C, E), 0 == 2 * angle(D, C, E) mod 360
By log_of_2_times_distance on D, C, D, E we get log(distance(C, D)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(D, E))
By collinear_definition on E, D, C we get D in Line(C, E), C in Line(D, E), Line(C, E) == Line(D, E), 0 == 2 * angle(D, E, C) mod 360
By collinear_definition on D, E, C we get E in Line(C, D), C in Line(D, E), Line(C, D) == Line(D, E), 0 == 2 * angle(E, D, C) mod 360
By collinear_definition on E, C, D we get C in Line(D, E), D in Line(C, E), Line(C, E) == Line(D, E), 0 == 2 * angle(C, E, D) mod 360
By excenter_concurrency on B, C, A we get excenter(B, A, C) in external_angle_bisector(A, C, B), excenter(B, A, C) in external_angle_bisector(B, A, C), excenter(B, A, C) in internal_angle_bisector(A, B, C)
By incenter_concurrency on A, B, C we get incenter(A, B, C) in internal_angle_bisector(A, B, C), incenter(A, B, C) in internal_angle_bisector(A, C, B), incenter(A, B, C) in internal_angle_bisector(B, A, C)
By excenter_concurrency on C, B, A we get excenter(C, A, B) in external_angle_bisector(A, B, C), excenter(C, A, B) in external_angle_bisector(B, A, C), excenter(C, A, B) in internal_angle_bisector(A, C, B)
By between_implies_angles on D, E, C we get 180 == angle(D, E, C) mod 360, 0 == angle(E, C, D) mod 360, 0 == angle(C, D, E) mod 360
By between_implies_angles on C, E, D we get 180 == angle(C, E, D) mod 360, 0 == angle(E, D, C) mod 360, 0 == angle(D, C, E) mod 360
By line_definition on excenter(B, A, C), D, f we get f == Line(D, excenter(B, A, C))
By line_definition on F, excenter(B, A, C), f we get f == Line(F, excenter(B, A, C))
By line_definition on excenter(B, A, C), B, h we get h == Line(B, excenter(B, A, C))
By line_definition on excenter(B, A, C), C, external_angle_bisector(A, C, B) we get external_angle_bisector(A, C, B) == Line(C, excenter(B, A, C))
By line_definition on E, G, g we get g == Line(E, G)
By line_definition on B, D, external_angle_bisector(A, B, C) we get Line(B, D) == external_angle_bisector(A, B, C)
By line_definition on A, excenter(B, A, C), f we get f == Line(A, excenter(B, A, C))
By line_definition on A, G, internal_angle_bisector(B, A, C) we get Line(A, G) == internal_angle_bisector(B, A, C)
By line_definition on G, excenter(B, A, C), h we get h == Line(G, excenter(B, A, C))
By line_intersection_definition on C, external_angle_bisector(A, C, B), Line(A, C) we get C == line_intersection(Line(A, C), external_angle_bisector(A, C, B))
By line_intersection_definition on A, Line(A, C), Line(A, B) we get A == line_intersection(Line(A, B), Line(A, C))
By line_intersection_definition on B, h, external_angle_bisector(A, B, C) we get B == line_intersection(h, external_angle_bisector(A, B, C))
By line_intersection_definition on C, external_angle_bisector(A, C, B), g we get C == line_intersection(g, external_angle_bisector(A, C, B))
By line_intersection_definition on B, Line(B, F), external_angle_bisector(A, B, C) we get B == line_intersection(Line(B, F), external_angle_bisector(A, B, C))
By line_intersection_definition on F, f, Line(B, F) we get F == line_intersection(f, Line(B, F))
By line_intersection_definition on A, internal_angle_bisector(B, A, C), Line(A, C) we get A == line_intersection(Line(A, C), internal_angle_bisector(B, A, C))
By line_intersection_definition on C, Line(A, C), Line(C, F) we get C == line_intersection(Line(A, C), Line(C, F))
By line_intersection_definition on C, Line(B, C), g we get C == line_intersection(g, Line(B, C))
By line_intersection_definition on B, Line(B, C), Line(B, F) we get B == line_intersection(Line(B, C), Line(B, F))
By line_intersection_definition on C, Line(B, C), external_angle_bisector(A, C, B) we get C == line_intersection(Line(B, C), external_angle_bisector(A, C, B))
By line_intersection_definition on A, internal_angle_bisector(B, A, C), Line(A, B) we get A == line_intersection(Line(A, B), internal_angle_bisector(B, A, C))
By line_intersection_definition on A, f, Line(A, C) we get A == line_intersection(f, Line(A, C))
By line_intersection_definition on B, Line(A, B), Line(B, C) we get B == line_intersection(Line(A, B), Line(B, C))
By line_intersection_definition on F, Line(B, F), Line(C, F) we get F == line_intersection(Line(B, F), Line(C, F))
By line_intersection_definition on B, Line(B, F), h we get B == line_intersection(h, Line(B, F))
By line_intersection_definition on A, internal_angle_bisector(B, A, C), f we get A == line_intersection(f, internal_angle_bisector(B, A, C))
By line_intersection_definition on B, Line(A, B), Line(B, F) we get B == line_intersection(Line(A, B), Line(B, F))
By line_intersection_definition on C, Line(B, C), Line(A, C) we get C == line_intersection(Line(A, C), Line(B, C))
By line_intersection_definition on B, Line(B, C), external_angle_bisector(A, B, C) we get B == line_intersection(Line(B, C), external_angle_bisector(A, B, C))
By line_intersection_definition on F, Line(C, F), f we get F == line_intersection(f, Line(C, F))
By line_intersection_definition on A, f, Line(A, B) we get A == line_intersection(f, Line(A, B))
By line_intersection_definition on C, Line(A, C), g we get C == line_intersection(g, Line(A, C))
By line_intersection_definition on C, Line(C, F), external_angle_bisector(A, C, B) we get C == line_intersection(Line(C, F), external_angle_bisector(A, C, B))
By line_intersection_definition on B, Line(B, C), h we get B == line_intersection(h, Line(B, C))
By line_intersection_definition on C, g, Line(C, F) we get C == line_intersection(g, Line(C, F))
By line_intersection_definition on B, Line(A, B), h we get B == line_intersection(h, Line(A, B))
By line_intersection_definition on B, Line(A, B), external_angle_bisector(A, B, C) we get B == line_intersection(Line(A, B), external_angle_bisector(A, B, C))
By line_intersection_definition on C, Line(B, C), Line(C, F) we get C == line_intersection(Line(B, C), Line(C, F))
By same_angle_v0 on C, E, D, B we get angle(D, C, B) == angle(E, C, B) mod 360
By same_angle_v1 on C, D, E, F we get angle(D, C, F) == angle(E, C, F) mod 360
By same_angle_v1 on C, E, D, A we get angle(D, C, A) == angle(E, C, A) mod 360
By same_angle_v0 on D, E, C, F we get angle(C, D, F) == angle(E, D, F) mod 360
By same_angle_v0 on D, C, E, A we get angle(C, D, A) == angle(E, D, A) mod 360
By in_imply_collinear on G, E, C we get collinear(C, E, G)
By in_imply_collinear on F, D, A we get collinear(A, D, F)
By in_imply_collinear on excenter(B, A, C), A, F we get collinear(A, F, excenter(B, A, C))
By in_imply_collinear on excenter(B, A, C), G, B we get collinear(B, G, excenter(B, A, C))
By in_imply_collinear on E, G, D we get collinear(D, E, G)
By in_imply_collinear on C, G, D we get collinear(C, D, G)
By in_imply_collinear on excenter(B, A, C), F, D we get collinear(D, F, excenter(B, A, C))
By in_imply_collinear on excenter(B, A, C), D, A we get collinear(A, D, excenter(B, A, C))
By reverse_direction on C, F we get 180 == direction(C, F) - direction(F, C) mod 360
By external_angle_bisector_definition_v0 on B, F, C, A we get 180 == angle(B, A, F) + angle(C, A, F) mod 360
By angle_bisectors_are_perpendicular on B, A, C we get perpendicular(external_angle_bisector(B, A, C), internal_angle_bisector(B, A, C))
By angle_bisectors_are_perpendicular on C, B, A we get perpendicular(external_angle_bisector(A, B, C), internal_angle_bisector(A, B, C))
By internal_angle_bisector_definition_v0 on B, D, A, C we get angle(B, C, D) == angle(D, C, A) mod 360
By reverse_direction on B, C we get 180 == direction(B, C) - direction(C, B) mod 360
By reverse_direction on F, B we get 180 == direction(F, B) - direction(B, F) mod 360
By reverse_direction on C, A we get 180 == direction(C, A) - direction(A, C) mod 360
By reverse_direction on B, A we get 180 == direction(B, A) - direction(A, B) mod 360
By reverse_direction on A, F we get 180 == direction(A, F) - direction(F, A) mod 360
By internal_angle_bisector_definition_v0 on A, D, B, C we get angle(A, C, D) == angle(D, C, B) mod 360
By reverse_direction on C, B we get 180 == direction(C, B) - direction(B, C) mod 360
By reverse_direction on D, C we get 180 == direction(D, C) - direction(C, D) mod 360
By reverse_direction on F, A we get 180 == direction(F, A) - direction(A, F) mod 360
By reverse_direction on C, E we get 180 == direction(C, E) - direction(E, C) mod 360
By reverse_direction on A, B we get 180 == direction(A, B) - direction(B, A) mod 360
By reverse_direction on E, D we get 180 == direction(E, D) - direction(D, E) mod 360
By reverse_direction on A, C we get 180 == direction(A, C) - direction(C, A) mod 360
By reverse_direction on B, F we get 180 == direction(B, F) - direction(F, B) mod 360
By internal_angle_bisector_definition_v0 on A, E, B, C we get angle(A, C, E) == angle(E, C, B) mod 360
By internal_angle_bisector_definition_v0 on B, E, A, C we get angle(B, C, E) == angle(E, C, A) mod 360
By reverse_direction on E, C we get 180 == direction(E, C) - direction(C, E) mod 360
By reverse_direction on D, E we get 180 == direction(D, E) - direction(E, D) mod 360
By reverse_direction on F, C we get 180 == direction(F, C) - direction(C, F) mod 360
By reverse_direction on C, D we get 180 == direction(C, D) - direction(D, C) mod 360
By angle_bisectors_are_perpendicular on B, C, A we get perpendicular(external_angle_bisector(A, C, B), internal_angle_bisector(A, C, B))
By external_angle_bisector_definition_v0 on C, D, B, A we get 180 == angle(C, A, D) + angle(B, A, D) mod 360
By internal_angle_bisector_definition_v0_r on C, D, C, E we get Line(D, E) == internal_angle_bisector(C, E, C)
By internal_angle_bisector_definition_v0 on A, G, B, C we get angle(A, C, G) == angle(G, C, B) mod 360
By internal_angle_bisector_definition_v0_r on E, D, E, C we get Line(C, D) == internal_angle_bisector(E, C, E)
By internal_angle_bisector_definition_v0_r on D, E, D, C we get Line(C, E) == internal_angle_bisector(D, C, D)
By internal_angle_bisector_definition_v0_r on D, C, D, E we get Line(C, E) == internal_angle_bisector(D, E, D)
By internal_angle_bisector_definition_v0_r on C, E, C, D we get Line(D, E) == internal_angle_bisector(C, D, C)
By internal_angle_bisector_definition_v0 on B, G, A, C we get angle(B, C, G) == angle(G, C, A) mod 360
By internal_angle_bisector_definition_v0 on A, G, C, B we get angle(A, B, G) == angle(G, B, C) mod 360
By internal_angle_bisector_definition_v0 on C, G, A, B we get angle(C, B, G) == angle(G, B, A) mod 360
By internal_angle_bisector_definition_v0_r on E, C, E, D we get Line(C, D) == internal_angle_bisector(E, D, E)
By excenter_concurrency on A, B, C we get excenter(A, B, C) in external_angle_bisector(A, B, C), excenter(A, B, C) in external_angle_bisector(A, C, B), excenter(A, B, C) in internal_angle_bisector(B, A, C)
By concurrent_sufficient_conditions on Line(B, C), Line(C, F), external_angle_bisector(A, C, B) we get concurrent(Line(B, C), Line(C, F), external_angle_bisector(A, C, B))
By concurrent_sufficient_conditions on g, Line(A, C), Line(C, F) we get concurrent(g, Line(A, C), Line(C, F))
By concurrent_sufficient_conditions on Line(B, F), Line(B, C), Line(A, B) we get concurrent(Line(A, B), Line(B, C), Line(B, F))
By concurrent_sufficient_conditions on Line(B, D), Line(B, F), h we get concurrent(h, Line(B, D), Line(B, F))
By concurrent_sufficient_conditions on f, Line(A, B), Line(A, C) we get concurrent(f, Line(A, B), Line(A, C))
By concurrent_sufficient_conditions on Line(A, C), Line(A, B), Line(A, G) we get concurrent(Line(A, B), Line(A, C), Line(A, G))
By concurrent_sufficient_conditions on Line(B, F), Line(B, C), h we get concurrent(h, Line(B, C), Line(B, F))
By concurrent_sufficient_conditions on Line(B, C), Line(A, B), h we get concurrent(h, Line(A, B), Line(B, C))
By line_definition on D, excenter(A, B, C), Line(B, D) we get Line(B, D) == Line(D, excenter(A, B, C))
By concurrent_sufficient_conditions on Line(A, C), Line(B, C), Line(C, F) we get concurrent(Line(A, C), Line(B, C), Line(C, F))
By concurrent_sufficient_conditions on Line(C, F), Line(B, C), g we get concurrent(g, Line(B, C), Line(C, F))
By concurrent_sufficient_conditions on g, Line(C, F), Line(B, C) we get concurrent(g, Line(B, C), Line(C, F))
By concurrent_sufficient_conditions on h, Line(A, B), Line(B, D) we get concurrent(h, Line(A, B), Line(B, D))
By concurrent_sufficient_conditions on external_angle_bisector(A, C, B), Line(C, F), Line(A, C) we get concurrent(Line(A, C), Line(C, F), external_angle_bisector(A, C, B))
By concurrent_sufficient_conditions on Line(B, C), external_angle_bisector(A, C, B), Line(C, F) we get concurrent(Line(B, C), Line(C, F), external_angle_bisector(A, C, B))
By concurrent_sufficient_conditions on Line(C, F), external_angle_bisector(A, C, B), g we get concurrent(g, Line(C, F), external_angle_bisector(A, C, B))
By concurrent_sufficient_conditions on g, Line(B, C), Line(A, C) we get concurrent(g, Line(A, C), Line(B, C))
By concurrent_sufficient_conditions on Line(A, C), f, Line(A, G) we get concurrent(f, Line(A, C), Line(A, G))
By concurrent_sufficient_conditions on g, Line(C, F), Line(A, C) we get concurrent(g, Line(A, C), Line(C, F))
By concurrent_sufficient_conditions on h, Line(B, C), Line(B, D) we get concurrent(h, Line(B, C), Line(B, D))
By concurrent_sufficient_conditions on Line(A, B), Line(A, C), Line(A, G) we get concurrent(Line(A, B), Line(A, C), Line(A, G))
By concurrent_sufficient_conditions on f, Line(A, G), Line(A, B) we get concurrent(f, Line(A, B), Line(A, G))
By concurrent_sufficient_conditions on Line(A, B), Line(B, C), h we get concurrent(h, Line(A, B), Line(B, C))
By concurrent_sufficient_conditions on g, Line(B, C), external_angle_bisector(A, C, B) we get concurrent(g, Line(B, C), external_angle_bisector(A, C, B))
By concurrent_sufficient_conditions on Line(B, D), Line(B, F), Line(B, C) we get concurrent(Line(B, C), Line(B, D), Line(B, F))
By concurrent_sufficient_conditions on Line(A, B), f, Line(A, G) we get concurrent(f, Line(A, B), Line(A, G))
By concurrent_sufficient_conditions on Line(B, D), Line(A, B), h we get concurrent(h, Line(A, B), Line(B, D))
By concurrent_sufficient_conditions on Line(A, G), f, Line(A, B) we get concurrent(f, Line(A, B), Line(A, G))
By concurrent_sufficient_conditions on Line(A, C), Line(A, G), f we get concurrent(f, Line(A, C), Line(A, G))
By concurrent_sufficient_conditions on h, Line(B, C), Line(B, F) we get concurrent(h, Line(B, C), Line(B, F))
By concurrent_sufficient_conditions on Line(A, C), g, Line(C, F) we get concurrent(g, Line(A, C), Line(C, F))
By concurrent_sufficient_conditions on Line(B, C), g, external_angle_bisector(A, C, B) we get concurrent(g, Line(B, C), external_angle_bisector(A, C, B))
By concurrent_sufficient_conditions on g, Line(A, C), external_angle_bisector(A, C, B) we get concurrent(g, Line(A, C), external_angle_bisector(A, C, B))
By concurrent_sufficient_conditions on Line(A, G), Line(A, C), Line(A, B) we get concurrent(Line(A, B), Line(A, C), Line(A, G))
By concurrent_sufficient_conditions on Line(A, B), Line(A, G), f we get concurrent(f, Line(A, B), Line(A, G))
By concurrent_sufficient_conditions on Line(A, B), Line(B, D), Line(B, C) we get concurrent(Line(A, B), Line(B, C), Line(B, D))
By concurrent_sufficient_conditions on Line(A, C), Line(B, C), external_angle_bisector(A, C, B) we get concurrent(Line(A, C), Line(B, C), external_angle_bisector(A, C, B))
By concurrent_sufficient_conditions on Line(B, C), Line(B, D), Line(A, B) we get concurrent(Line(A, B), Line(B, C), Line(B, D))
By concurrent_sufficient_conditions on Line(B, D), Line(B, C), Line(A, B) we get concurrent(Line(A, B), Line(B, C), Line(B, D))
By concurrent_sufficient_conditions on external_angle_bisector(A, C, B), Line(A, C), Line(B, C) we get concurrent(Line(A, C), Line(B, C), external_angle_bisector(A, C, B))
By concurrent_sufficient_conditions on Line(A, C), external_angle_bisector(A, C, B), Line(C, F) we get concurrent(Line(A, C), Line(C, F), external_angle_bisector(A, C, B))
By concurrent_sufficient_conditions on f, Line(A, B), Line(A, G) we get concurrent(f, Line(A, B), Line(A, G))
By concurrent_sufficient_conditions on external_angle_bisector(A, C, B), Line(B, C), Line(C, F) we get concurrent(Line(B, C), Line(C, F), external_angle_bisector(A, C, B))
By concurrent_sufficient_conditions on Line(C, F), external_angle_bisector(A, C, B), Line(A, C) we get concurrent(Line(A, C), Line(C, F), external_angle_bisector(A, C, B))
By line_definition on excenter(B, A, C), excenter(A, B, C), external_angle_bisector(A, C, B) we get external_angle_bisector(A, C, B) == Line(excenter(A, B, C), excenter(B, A, C))
By concurrent_sufficient_conditions on Line(A, C), f, Line(A, B) we get concurrent(f, Line(A, B), Line(A, C))
By concurrent_sufficient_conditions on Line(B, D), Line(B, F), Line(A, B) we get concurrent(Line(A, B), Line(B, D), Line(B, F))
By concurrent_sufficient_conditions on Line(B, C), Line(B, D), h we get concurrent(h, Line(B, C), Line(B, D))
By concurrent_sufficient_conditions on g, external_angle_bisector(A, C, B), Line(C, F) we get concurrent(g, Line(C, F), external_angle_bisector(A, C, B))
By concurrent_sufficient_conditions on Line(A, C), g, Line(B, C) we get concurrent(g, Line(A, C), Line(B, C))
By concurrent_sufficient_conditions on Line(A, C), external_angle_bisector(A, C, B), g we get concurrent(g, Line(A, C), external_angle_bisector(A, C, B))
By concurrent_sufficient_conditions on Line(B, D), h, Line(A, B) we get concurrent(h, Line(A, B), Line(B, D))
By concurrent_sufficient_conditions on f, Line(B, F), Line(C, F) we get concurrent(f, Line(B, F), Line(C, F))
By concurrent_sufficient_conditions on Line(B, D), Line(B, C), Line(B, F) we get concurrent(Line(B, C), Line(B, D), Line(B, F))
By concurrent_sufficient_conditions on Line(A, B), Line(B, D), Line(B, F) we get concurrent(Line(A, B), Line(B, D), Line(B, F))
By concurrent_sufficient_conditions on Line(B, F), Line(B, C), Line(B, D) we get concurrent(Line(B, C), Line(B, D), Line(B, F))
By concurrent_sufficient_conditions on Line(B, D), Line(A, B), Line(B, C) we get concurrent(Line(A, B), Line(B, C), Line(B, D))
By concurrent_sufficient_conditions on Line(B, C), Line(C, F), Line(A, C) we get concurrent(Line(A, C), Line(B, C), Line(C, F))
By concurrent_sufficient_conditions on h, Line(B, D), Line(B, C) we get concurrent(h, Line(B, C), Line(B, D))
By concurrent_sufficient_conditions on Line(A, B), Line(B, F), Line(B, C) we get concurrent(Line(A, B), Line(B, C), Line(B, F))
By concurrent_sufficient_conditions on external_angle_bisector(A, C, B), g, Line(C, F) we get concurrent(g, Line(C, F), external_angle_bisector(A, C, B))
By concurrent_sufficient_conditions on Line(B, C), h, Line(B, D) we get concurrent(h, Line(B, C), Line(B, D))
By concurrent_sufficient_conditions on Line(B, C), Line(B, F), Line(B, D) we get concurrent(Line(B, C), Line(B, D), Line(B, F))
By concurrent_sufficient_conditions on external_angle_bisector(A, C, B), g, Line(A, C) we get concurrent(g, Line(A, C), external_angle_bisector(A, C, B))
By line_definition on excenter(A, B, C), C, external_angle_bisector(A, C, B) we get external_angle_bisector(A, C, B) == Line(C, excenter(A, B, C))
By concurrent_sufficient_conditions on Line(B, C), h, Line(B, F) we get concurrent(h, Line(B, C), Line(B, F))
By concurrent_sufficient_conditions on f, Line(A, C), Line(A, B) we get concurrent(f, Line(A, B), Line(A, C))
By concurrent_sufficient_conditions on h, Line(B, F), Line(B, C) we get concurrent(h, Line(B, C), Line(B, F))
By concurrent_sufficient_conditions on Line(B, D), Line(B, C), h we get concurrent(h, Line(B, C), Line(B, D))
By concurrent_sufficient_conditions on external_angle_bisector(A, C, B), Line(B, C), Line(A, C) we get concurrent(Line(A, C), Line(B, C), external_angle_bisector(A, C, B))
By line_definition on excenter(A, B, C), A, Line(A, G) we get Line(A, G) == Line(A, excenter(A, B, C))
By concurrent_sufficient_conditions on Line(A, B), h, Line(B, C) we get concurrent(h, Line(A, B), Line(B, C))
By concurrent_sufficient_conditions on Line(B, D), Line(A, B), Line(B, F) we get concurrent(Line(A, B), Line(B, D), Line(B, F))
By concurrent_sufficient_conditions on Line(B, F), f, Line(C, F) we get concurrent(f, Line(B, F), Line(C, F))
By concurrent_sufficient_conditions on Line(A, C), Line(A, B), f we get concurrent(f, Line(A, B), Line(A, C))
By concurrent_sufficient_conditions on g, Line(C, F), external_angle_bisector(A, C, B) we get concurrent(g, Line(C, F), external_angle_bisector(A, C, B))
By concurrent_sufficient_conditions on Line(B, F), h, Line(B, D) we get concurrent(h, Line(B, D), Line(B, F))
By concurrent_sufficient_conditions on Line(A, C), Line(C, F), Line(B, C) we get concurrent(Line(A, C), Line(B, C), Line(C, F))
By concurrent_sufficient_conditions on Line(A, B), h, Line(B, F) we get concurrent(h, Line(A, B), Line(B, F))
By concurrent_sufficient_conditions on Line(B, F), Line(B, D), h we get concurrent(h, Line(B, D), Line(B, F))
By concurrent_sufficient_conditions on Line(A, B), h, Line(B, D) we get concurrent(h, Line(A, B), Line(B, D))
By concurrent_sufficient_conditions on Line(B, F), Line(B, D), Line(A, B) we get concurrent(Line(A, B), Line(B, D), Line(B, F))
By concurrent_sufficient_conditions on Line(B, C), Line(A, B), Line(B, D) we get concurrent(Line(A, B), Line(B, C), Line(B, D))
By concurrent_sufficient_conditions on Line(B, F), Line(B, D), Line(B, C) we get concurrent(Line(B, C), Line(B, D), Line(B, F))
By concurrent_sufficient_conditions on Line(B, C), external_angle_bisector(A, C, B), g we get concurrent(g, Line(B, C), external_angle_bisector(A, C, B))
By concurrent_sufficient_conditions on h, Line(B, D), Line(B, F) we get concurrent(h, Line(B, D), Line(B, F))
By concurrent_sufficient_conditions on Line(A, C), g, external_angle_bisector(A, C, B) we get concurrent(g, Line(A, C), external_angle_bisector(A, C, B))
By line_definition on G, excenter(A, B, C), Line(A, G) we get Line(A, G) == Line(G, excenter(A, B, C))
By concurrent_sufficient_conditions on Line(A, C), Line(A, G), Line(A, B) we get concurrent(Line(A, B), Line(A, C), Line(A, G))
By line_definition on excenter(A, B, C), B, Line(B, D) we get Line(B, D) == Line(B, excenter(A, B, C))
By concurrent_sufficient_conditions on Line(C, F), Line(B, C), Line(A, C) we get concurrent(Line(A, C), Line(B, C), Line(C, F))
By concurrent_sufficient_conditions on Line(B, F), Line(C, F), f we get concurrent(f, Line(B, F), Line(C, F))
By concurrent_sufficient_conditions on Line(B, C), g, Line(C, F) we get concurrent(g, Line(B, C), Line(C, F))
By concurrent_sufficient_conditions on external_angle_bisector(A, C, B), Line(B, C), g we get concurrent(g, Line(B, C), external_angle_bisector(A, C, B))
By concurrent_sufficient_conditions on Line(A, B), f, Line(A, C) we get concurrent(f, Line(A, B), Line(A, C))
By concurrent_sufficient_conditions on Line(A, B), Line(A, C), f we get concurrent(f, Line(A, B), Line(A, C))
By concurrent_sufficient_conditions on Line(C, F), external_angle_bisector(A, C, B), Line(B, C) we get concurrent(Line(B, C), Line(C, F), external_angle_bisector(A, C, B))
By concurrent_sufficient_conditions on Line(B, C), Line(A, C), Line(C, F) we get concurrent(Line(A, C), Line(B, C), Line(C, F))
By concurrent_sufficient_conditions on Line(A, G), Line(A, B), f we get concurrent(f, Line(A, B), Line(A, G))
By concurrent_sufficient_conditions on Line(B, C), Line(B, F), Line(A, B) we get concurrent(Line(A, B), Line(B, C), Line(B, F))
By concurrent_sufficient_conditions on Line(A, C), Line(C, F), external_angle_bisector(A, C, B) we get concurrent(Line(A, C), Line(C, F), external_angle_bisector(A, C, B))
By concurrent_sufficient_conditions on Line(C, F), Line(A, C), external_angle_bisector(A, C, B) we get concurrent(Line(A, C), Line(C, F), external_angle_bisector(A, C, B))
By concurrent_sufficient_conditions on Line(A, B), Line(B, F), h we get concurrent(h, Line(A, B), Line(B, F))
By concurrent_sufficient_conditions on external_angle_bisector(A, C, B), Line(A, C), Line(C, F) we get concurrent(Line(A, C), Line(C, F), external_angle_bisector(A, C, B))
By concurrent_sufficient_conditions on external_angle_bisector(A, C, B), Line(C, F), g we get concurrent(g, Line(C, F), external_angle_bisector(A, C, B))
By concurrent_sufficient_conditions on Line(B, C), Line(A, B), Line(B, F) we get concurrent(Line(A, B), Line(B, C), Line(B, F))
By concurrent_sufficient_conditions on f, Line(A, C), Line(A, G) we get concurrent(f, Line(A, C), Line(A, G))
By concurrent_sufficient_conditions on f, Line(C, F), Line(B, F) we get concurrent(f, Line(B, F), Line(C, F))
By concurrent_sufficient_conditions on Line(C, F), f, Line(B, F) we get concurrent(f, Line(B, F), Line(C, F))
By concurrent_sufficient_conditions on Line(A, G), Line(A, B), Line(A, C) we get concurrent(Line(A, B), Line(A, C), Line(A, G))
By concurrent_sufficient_conditions on Line(A, B), Line(A, G), Line(A, C) we get concurrent(Line(A, B), Line(A, C), Line(A, G))
By concurrent_sufficient_conditions on Line(B, C), Line(A, C), g we get concurrent(g, Line(A, C), Line(B, C))
By concurrent_sufficient_conditions on h, Line(A, B), Line(B, C) we get concurrent(h, Line(A, B), Line(B, C))
By concurrent_sufficient_conditions on Line(A, G), f, Line(A, C) we get concurrent(f, Line(A, C), Line(A, G))
By concurrent_sufficient_conditions on Line(B, C), g, Line(A, C) we get concurrent(g, Line(A, C), Line(B, C))
By concurrent_sufficient_conditions on Line(C, F), Line(A, C), g we get concurrent(g, Line(A, C), Line(C, F))
By concurrent_sufficient_conditions on Line(B, D), h, Line(B, C) we get concurrent(h, Line(B, C), Line(B, D))
By concurrent_sufficient_conditions on h, Line(B, F), Line(B, D) we get concurrent(h, Line(B, D), Line(B, F))
By concurrent_sufficient_conditions on Line(A, B), Line(B, C), Line(B, D) we get concurrent(Line(A, B), Line(B, C), Line(B, D))
By concurrent_sufficient_conditions on Line(A, B), Line(B, F), Line(B, D) we get concurrent(Line(A, B), Line(B, D), Line(B, F))
By concurrent_sufficient_conditions on Line(A, C), Line(C, F), g we get concurrent(g, Line(A, C), Line(C, F))
By concurrent_sufficient_conditions on Line(B, C), Line(B, F), h we get concurrent(h, Line(B, C), Line(B, F))
By concurrent_sufficient_conditions on Line(C, F), g, Line(A, C) we get concurrent(g, Line(A, C), Line(C, F))
By concurrent_sufficient_conditions on Line(A, G), Line(A, C), f we get concurrent(f, Line(A, C), Line(A, G))
By concurrent_sufficient_conditions on Line(A, B), Line(B, D), h we get concurrent(h, Line(A, B), Line(B, D))
By concurrent_sufficient_conditions on g, Line(B, C), Line(C, F) we get concurrent(g, Line(B, C), Line(C, F))
By concurrent_sufficient_conditions on Line(C, F), g, Line(B, C) we get concurrent(g, Line(B, C), Line(C, F))
By concurrent_sufficient_conditions on Line(B, D), h, Line(B, F) we get concurrent(h, Line(B, D), Line(B, F))
By concurrent_sufficient_conditions on g, Line(A, C), Line(B, C) we get concurrent(g, Line(A, C), Line(B, C))
By concurrent_sufficient_conditions on Line(B, F), h, Line(B, C) we get concurrent(h, Line(B, C), Line(B, F))
By concurrent_sufficient_conditions on Line(B, C), Line(C, F), g we get concurrent(g, Line(B, C), Line(C, F))
By concurrent_sufficient_conditions on Line(B, F), Line(A, B), Line(B, D) we get concurrent(Line(A, B), Line(B, D), Line(B, F))
By concurrent_sufficient_conditions on Line(B, F), Line(A, B), h we get concurrent(h, Line(A, B), Line(B, F))
By concurrent_sufficient_conditions on Line(B, C), Line(A, C), external_angle_bisector(A, C, B) we get concurrent(Line(A, C), Line(B, C), external_angle_bisector(A, C, B))
By concurrent_sufficient_conditions on external_angle_bisector(A, C, B), Line(C, F), Line(B, C) we get concurrent(Line(B, C), Line(C, F), external_angle_bisector(A, C, B))
By concurrent_sufficient_conditions on Line(A, C), external_angle_bisector(A, C, B), Line(B, C) we get concurrent(Line(A, C), Line(B, C), external_angle_bisector(A, C, B))
By concurrent_sufficient_conditions on Line(B, C), Line(B, D), Line(B, F) we get concurrent(Line(B, C), Line(B, D), Line(B, F))
By concurrent_sufficient_conditions on f, Line(A, G), Line(A, C) we get concurrent(f, Line(A, C), Line(A, G))
By concurrent_sufficient_conditions on h, Line(B, F), Line(A, B) we get concurrent(h, Line(A, B), Line(B, F))
By concurrent_sufficient_conditions on external_angle_bisector(A, C, B), Line(A, C), g we get concurrent(g, Line(A, C), external_angle_bisector(A, C, B))
By concurrent_sufficient_conditions on Line(C, F), Line(B, F), f we get concurrent(f, Line(B, F), Line(C, F))
By concurrent_sufficient_conditions on Line(C, F), Line(B, C), external_angle_bisector(A, C, B) we get concurrent(Line(B, C), Line(C, F), external_angle_bisector(A, C, B))
By concurrent_sufficient_conditions on Line(C, F), g, external_angle_bisector(A, C, B) we get concurrent(g, Line(C, F), external_angle_bisector(A, C, B))
By concurrent_sufficient_conditions on Line(B, F), Line(A, B), Line(B, C) we get concurrent(Line(A, B), Line(B, C), Line(B, F))
By concurrent_sufficient_conditions on Line(B, F), h, Line(A, B) we get concurrent(h, Line(A, B), Line(B, F))
By concurrent_sufficient_conditions on external_angle_bisector(A, C, B), g, Line(B, C) we get concurrent(g, Line(B, C), external_angle_bisector(A, C, B))
By concurrent_sufficient_conditions on Line(B, C), h, Line(A, B) we get concurrent(h, Line(A, B), Line(B, C))
By concurrent_sufficient_conditions on h, Line(A, B), Line(B, F) we get concurrent(h, Line(A, B), Line(B, F))
By concurrent_sufficient_conditions on Line(C, F), Line(A, C), Line(B, C) we get concurrent(Line(A, C), Line(B, C), Line(C, F))
By concurrent_sufficient_conditions on g, external_angle_bisector(A, C, B), Line(A, C) we get concurrent(g, Line(A, C), external_angle_bisector(A, C, B))
By concurrent_sufficient_conditions on Line(A, C), Line(B, C), g we get concurrent(g, Line(A, C), Line(B, C))
By concurrent_sufficient_conditions on g, external_angle_bisector(A, C, B), Line(B, C) we get concurrent(g, Line(B, C), external_angle_bisector(A, C, B))
By concurrent_sufficient_conditions on Line(A, B), Line(B, C), Line(B, F) we get concurrent(Line(A, B), Line(B, C), Line(B, F))
By concurrent_sufficient_conditions on Line(B, C), external_angle_bisector(A, C, B), Line(A, C) we get concurrent(Line(A, C), Line(B, C), external_angle_bisector(A, C, B))
By concurrent_sufficient_conditions on h, Line(B, D), Line(A, B) we get concurrent(h, Line(A, B), Line(B, D))
By concurrent_sufficient_conditions on h, Line(B, C), Line(A, B) we get concurrent(h, Line(A, B), Line(B, C))
By chords_on_equal_angles_v1 on F, A, C, F, A, B, c we get distance(B, F) == distance(C, F)
By perpendicular_line_definition on excenter(A, B, C), external_angle_bisector(A, C, B), g we get external_angle_bisector(A, C, B) == perpendicular_line(excenter(A, B, C), g)
By perpendicular_line_definition on G, g, external_angle_bisector(A, C, B) we get g == perpendicular_line(G, external_angle_bisector(A, C, B))
By perpendicular_line_definition on D, g, external_angle_bisector(A, C, B) we get g == perpendicular_line(D, external_angle_bisector(A, C, B))
By perpendicular_line_definition on G, h, Line(B, D) we get h == perpendicular_line(G, Line(B, D))
By perpendicular_line_definition on excenter(A, B, C), Line(B, D), h we get Line(B, D) == perpendicular_line(excenter(A, B, C), h)
By perpendicular_line_definition on G, Line(A, G), f we get Line(A, G) == perpendicular_line(G, f)
By perpendicular_line_definition on B, Line(B, D), h we get Line(B, D) == perpendicular_line(B, h)
By perpendicular_line_definition on F, f, Line(A, G) we get f == perpendicular_line(F, Line(A, G))
By perpendicular_line_definition on C, external_angle_bisector(A, C, B), g we get perpendicular_line(C, g) == external_angle_bisector(A, C, B)
By perpendicular_line_definition on B, h, Line(B, D) we get h == perpendicular_line(B, Line(B, D))
By perpendicular_line_definition on excenter(A, B, C), Line(A, G), f we get Line(A, G) == perpendicular_line(excenter(A, B, C), f)
By perpendicular_line_definition on C, g, external_angle_bisector(A, C, B) we get g == perpendicular_line(C, external_angle_bisector(A, C, B))
By perpendicular_line_definition on excenter(B, A, C), f, Line(A, G) we get f == perpendicular_line(excenter(B, A, C), Line(A, G))
By perpendicular_line_definition on A, f, Line(A, G) we get f == perpendicular_line(A, Line(A, G))
By perpendicular_line_definition on A, Line(A, G), f we get Line(A, G) == perpendicular_line(A, f)
By perpendicular_line_definition on excenter(B, A, C), h, Line(B, D) we get h == perpendicular_line(excenter(B, A, C), Line(B, D))
By perpendicular_line_definition on E, g, external_angle_bisector(A, C, B) we get g == perpendicular_line(E, external_angle_bisector(A, C, B))
By perpendicular_line_definition on D, f, Line(A, G) we get f == perpendicular_line(D, Line(A, G))
By perpendicular_line_definition on excenter(B, A, C), external_angle_bisector(A, C, B), g we get external_angle_bisector(A, C, B) == perpendicular_line(excenter(B, A, C), g)
By perpendicular_line_definition on D, Line(B, D), h we get Line(B, D) == perpendicular_line(D, h)
By same_angle_v1 on C, G, D, F we get angle(D, C, F) == angle(G, C, F) mod 360
By same_angle_v1 on C, E, G, A we get angle(E, C, A) == angle(G, C, A) mod 360
By same_angle_v0 on C, G, E, B we get angle(E, C, B) == angle(G, C, B) mod 360
By same_angle_v1 on C, D, G, A we get angle(D, C, A) == angle(G, C, A) mod 360
By same_angle_v0 on C, D, G, B we get angle(D, C, B) == angle(G, C, B) mod 360
By same_angle_v1 on D, F, A, C we get angle(A, D, C) == angle(F, D, C) mod 360
By same_angle_v1 on D, A, F, E we get angle(A, D, E) == angle(F, D, E) mod 360
By same_angle_v1 on C, G, E, F we get angle(E, C, F) == angle(G, C, F) mod 360
By same_angle_v3 on A, D, F, C we get angle(D, A, C) == angle(F, A, C) + 180 mod 360
By same_angle_v3 on A, D, F, B we get angle(D, A, B) == angle(F, A, B) + 180 mod 360
By divide_by_2_mod_180_v0 on D, A, B, F, C, B we get angle(D, A, B) == angle(F, C, B) mod 360
By same_angle_v0 on D, G, C, F we get angle(C, D, F) == angle(G, D, F) mod 360
By same_angle_v0 on F, A, D, C we get angle(A, F, C) == angle(D, F, C) mod 360
By same_angle_v2 on A, D, F, G we get angle(D, A, G) == angle(F, A, G) + 180 mod 360
By perpendicular_direction_conditions_v0_r on G, A, A, F we get 180 == 2 * direction(G, A) - 2 * direction(A, F) mod 360
By same_angle_v0 on F, D, A, B we get angle(A, F, B) == angle(D, F, B) mod 360
By same_angle_v1 on D, A, F, B we get angle(A, D, B) == angle(F, D, B) mod 360
By same_angle_v0 on D, G, C, A we get angle(C, D, A) == angle(G, D, A) mod 360
By same_angle_v0 on D, E, G, A we get angle(E, D, A) == angle(G, D, A) mod 360
By perpendicular_direction_conditions_v0_r on A, D, G, A we get 180 == 2 * direction(A, D) - 2 * direction(G, A) mod 360
By same_angle_v1 on D, E, C, B we get angle(C, D, B) == angle(E, D, B) mod 360
By perpendicular_direction_conditions_v0_r on D, E, excenter(B, A, C), C we get 180 == 2 * direction(D, E) - 2 * direction(excenter(B, A, C), C) mod 360
By perpendicular_direction_conditions_v0_r on C, excenter(B, A, C), C, E we get 180 == 2 * direction(C, excenter(B, A, C)) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on E, C, C, excenter(B, A, C) we get 180 == 2 * direction(E, C) - 2 * direction(C, excenter(B, A, C)) mod 360
By perpendicular_direction_conditions_v0_r on B, G, D, B we get 180 == 2 * direction(B, G) - 2 * direction(D, B) mod 360
By projection_definition on excenter(B, A, C), A, Line(A, G) we get A == projection(excenter(B, A, C), Line(A, G))
By perpendicular_direction_conditions_v0_r on G, A, D, F we get 180 == 2 * direction(G, A) - 2 * direction(D, F) mod 360
By projection_definition on D, C, external_angle_bisector(A, C, B) we get C == projection(D, external_angle_bisector(A, C, B))
By perpendicular_direction_conditions_v0_r on C, excenter(B, A, C), C, D we get 180 == 2 * direction(C, excenter(B, A, C)) - 2 * direction(C, D) mod 360
By same_angle_v0 on D, E, G, F we get angle(E, D, F) == angle(G, D, F) mod 360
By perpendicular_direction_conditions_v0_r on E, D, excenter(B, A, C), C we get 180 == 2 * direction(E, D) - 2 * direction(excenter(B, A, C), C) mod 360
By probably_between_and_collinear_implies_between on G, E, D we get between(D, E, G)
By perpendicular_direction_conditions_v0_r on G, A, F, A we get 180 == 2 * direction(G, A) - 2 * direction(F, A) mod 360
By projection_definition on excenter(B, A, C), C, g we get C == projection(excenter(B, A, C), g)
By perpendicular_direction_conditions_v0_r on A, G, D, A we get 180 == 2 * direction(A, G) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on C, D, excenter(B, A, C), C we get 180 == 2 * direction(C, D) - 2 * direction(excenter(B, A, C), C) mod 360
By projection_definition on D, B, h we get B == projection(D, h)
By projection_definition on excenter(B, A, C), B, Line(B, D) we get B == projection(excenter(B, A, C), Line(B, D))
By perpendicular_direction_conditions_v0_r on A, D, A, G we get 180 == 2 * direction(A, D) - 2 * direction(A, G) mod 360
By in_imply_collinear on excenter(A, B, C), B, D we get collinear(B, D, excenter(A, B, C))
By perpendicular_direction_conditions_v0_r on G, A, A, D we get 180 == 2 * direction(G, A) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on C, D, C, excenter(B, A, C) we get 180 == 2 * direction(C, D) - 2 * direction(C, excenter(B, A, C)) mod 360
By same_angle_v1 on D, F, A, G we get angle(A, D, G) == angle(F, D, G) mod 360
By perpendicular_direction_conditions_v0_r on C, excenter(B, A, C), E, C we get 180 == 2 * direction(C, excenter(B, A, C)) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on D, E, C, excenter(B, A, C) we get 180 == 2 * direction(D, E) - 2 * direction(C, excenter(B, A, C)) mod 360
By perpendicular_direction_conditions_v0_r on C, excenter(B, A, C), D, E we get 180 == 2 * direction(C, excenter(B, A, C)) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on D, F, G, A we get 180 == 2 * direction(D, F) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, A, C), C, D, C we get 180 == 2 * direction(excenter(B, A, C), C) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, A, C), C, E, C we get 180 == 2 * direction(excenter(B, A, C), C) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, A, C), C, E, D we get 180 == 2 * direction(excenter(B, A, C), C) - 2 * direction(E, D) mod 360
By divide_by_2_mod_180_v0 on E, C, B, A, C, G we get angle(A, C, G) == angle(E, C, B) mod 360
By perpendicular_direction_conditions_v0_r on D, C, excenter(B, A, C), C we get 180 == 2 * direction(D, C) - 2 * direction(excenter(B, A, C), C) mod 360
By perpendicular_direction_conditions_v0_r on C, G, C, excenter(B, A, C) we get 180 == 2 * direction(C, G) - 2 * direction(C, excenter(B, A, C)) mod 360
By projection_definition on G, C, external_angle_bisector(A, C, B) we get C == projection(G, external_angle_bisector(A, C, B))
By perpendicular_direction_conditions_v0_r on B, G, B, D we get 180 == 2 * direction(B, G) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on C, G, excenter(B, A, C), C we get 180 == 2 * direction(C, G) - 2 * direction(excenter(B, A, C), C) mod 360
By perpendicular_direction_conditions_v0_r on A, F, A, G we get 180 == 2 * direction(A, F) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on D, C, C, excenter(B, A, C) we get 180 == 2 * direction(D, C) - 2 * direction(C, excenter(B, A, C)) mod 360
By projection_definition on F, A, Line(A, G) we get A == projection(F, Line(A, G))
By perpendicular_direction_conditions_v0_r on A, G, A, D we get 180 == 2 * direction(A, G) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on G, A, D, A we get 180 == 2 * direction(G, A) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on A, F, G, A we get 180 == 2 * direction(A, F) - 2 * direction(G, A) mod 360
By divide_by_2_mod_180_v0 on D, A, B, C, B, F we get angle(C, B, F) == angle(D, A, B) mod 360
By projection_definition on G, A, f we get A == projection(G, f)
By perpendicular_direction_conditions_v0_r on C, E, C, excenter(B, A, C) we get 180 == 2 * direction(C, E) - 2 * direction(C, excenter(B, A, C)) mod 360
By perpendicular_direction_conditions_v0_r on A, G, F, A we get 180 == 2 * direction(A, G) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on D, A, A, G we get 180 == 2 * direction(D, A) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on A, G, A, F we get 180 == 2 * direction(A, G) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on A, G, D, F we get 180 == 2 * direction(A, G) - 2 * direction(D, F) mod 360
By projection_definition on G, B, Line(B, D) we get B == projection(G, Line(B, D))
By perpendicular_direction_conditions_v0_r on excenter(B, A, C), C, C, D we get 180 == 2 * direction(excenter(B, A, C), C) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on D, B, B, G we get 180 == 2 * direction(D, B) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on C, excenter(B, A, C), C, G we get 180 == 2 * direction(C, excenter(B, A, C)) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on D, A, G, A we get 180 == 2 * direction(D, A) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, A, C), C, C, E we get 180 == 2 * direction(excenter(B, A, C), C) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on D, F, A, G we get 180 == 2 * direction(D, F) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on C, E, excenter(B, A, C), C we get 180 == 2 * direction(C, E) - 2 * direction(excenter(B, A, C), C) mod 360
By perpendicular_direction_conditions_v0_r on E, C, excenter(B, A, C), C we get 180 == 2 * direction(E, C) - 2 * direction(excenter(B, A, C), C) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, A, C), C, D, E we get 180 == 2 * direction(excenter(B, A, C), C) - 2 * direction(D, E) mod 360
By divide_by_2_mod_180_v0 on G, C, B, A, C, E we get angle(A, C, E) == angle(G, C, B) mod 360
By projection_definition on D, A, Line(A, G) we get A == projection(D, Line(A, G))
By perpendicular_direction_conditions_v0_r on F, A, A, G we get 180 == 2 * direction(F, A) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, A, C), C, C, G we get 180 == 2 * direction(excenter(B, A, C), C) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on B, D, B, G we get 180 == 2 * direction(B, D) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on F, A, G, A we get 180 == 2 * direction(F, A) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on C, excenter(B, A, C), D, C we get 180 == 2 * direction(C, excenter(B, A, C)) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on E, D, C, excenter(B, A, C) we get 180 == 2 * direction(E, D) - 2 * direction(C, excenter(B, A, C)) mod 360
By perpendicular_direction_conditions_v0_r on C, excenter(B, A, C), E, D we get 180 == 2 * direction(C, excenter(B, A, C)) - 2 * direction(E, D) mod 360
By projection_definition on E, C, external_angle_bisector(A, C, B) we get C == projection(E, external_angle_bisector(A, C, B))
By divide_by_2_mod_180_v1 on B, C, G, D, C, A we get angle(B, C, G) == angle(D, C, A) mod 360
By divide_by_2_mod_180_v3 on C, A, D, C, B, F we get angle(C, A, D) == angle(C, B, F) + 180 mod 360
By probably_between_and_collinear_implies_between on C, G, D we get between(C, G, D)
By divide_by_2_mod_180_v1 on F, B, C, B, A, D we get angle(B, A, D) == angle(F, B, C) mod 360
By probably_between_and_collinear_implies_between on C, G, E we get between(C, G, E)
By probably_between_and_collinear_implies_between on D, A, F we get between(D, A, F)
By divide_by_2_mod_180_v1 on E, C, F, G, B, C we get angle(E, C, F) == angle(G, B, C) mod 360
By in_imply_collinear on excenter(A, B, C), C, excenter(B, A, C) we get collinear(C, excenter(A, B, C), excenter(B, A, C))
By divide_by_2_mod_180_v0 on A, C, D, G, C, B we get angle(A, C, D) == angle(G, C, B) mod 360
By divide_by_2_mod_180_v0 on F, C, E, G, B, A we get angle(F, C, E) == angle(G, B, A) mod 360
By divide_by_2_mod_180_v3 on F, A, B, D, A, B we get angle(F, A, B) == angle(D, A, B) + 180 mod 360
By divide_by_2_mod_180_v0 on A, C, G, D, C, B we get angle(A, C, G) == angle(D, C, B) mod 360
By in_imply_collinear on excenter(A, B, C), A, G we get collinear(A, G, excenter(A, B, C))
By divide_by_2_mod_180_v1 on G, C, A, B, C, D we get angle(B, C, D) == angle(G, C, A) mod 360
By divide_by_2_mod_180_v2 on C, A, F, C, A, D we get angle(C, A, F) == angle(C, A, D) + 180 mod 360
By divide_by_2_mod_180_v2 on D, A, C, B, C, F we get angle(D, A, C) == angle(B, C, F) + 180 mod 360
By divide_by_2_mod_180_v1 on B, C, G, B, C, D we get angle(B, C, D) == angle(B, C, G) mod 360
By divide_by_2_mod_180_v3 on B, A, D, B, A, F we get angle(B, A, D) == angle(B, A, F) + 180 mod 360
By divide_by_2_mod_180_v1 on F, A, B, C, A, D we get angle(C, A, D) == angle(F, A, B) mod 360
By divide_by_2_mod_180_v0 on B, A, F, D, A, C we get angle(B, A, F) == angle(D, A, C) mod 360
By divide_by_2_mod_180_v0 on A, C, G, A, C, E we get angle(A, C, E) == angle(A, C, G) mod 360
By divide_by_2_mod_180_v1 on G, B, C, D, C, F we get angle(D, C, F) == angle(G, B, C) mod 360
By divide_by_2_mod_180_v0 on F, C, D, G, B, A we get angle(F, C, D) == angle(G, B, A) mod 360
By divide_by_2_mod_180_v2 on F, C, B, C, A, D we get angle(F, C, B) == angle(C, A, D) + 180 mod 360
By divide_by_2_mod_180_v0 on F, C, E, C, B, G we get angle(C, B, G) == angle(F, C, E) mod 360
By divide_by_2_mod_180_v2 on B, A, F, B, A, D we get angle(B, A, F) == angle(B, A, D) + 180 mod 360
By divide_by_2_mod_180_v1 on E, C, A, B, C, G we get angle(B, C, G) == angle(E, C, A) mod 360
By divide_by_2_mod_180_v0 on C, B, G, F, C, D we get angle(C, B, G) == angle(F, C, D) mod 360
By divide_by_2_mod_180_v1 on D, C, F, A, B, G we get angle(A, B, G) == angle(D, C, F) mod 360
By divide_by_2_mod_180_v1 on A, B, G, E, C, F we get angle(A, B, G) == angle(E, C, F) mod 360
By divide_by_2_mod_180_v3 on F, B, C, D, A, C we get angle(F, B, C) == angle(D, A, C) + 180 mod 360
By isosceles_triangle_from_angles on F, C, B we get isosceles_triangle(F, B, C)
By divide_by_2_mod_180_v1 on F, A, C, B, A, D we get angle(B, A, D) == angle(F, A, C) mod 360
By divide_by_2_mod_180_v1 on B, C, E, B, C, G we get angle(B, C, E) == angle(B, C, G) mod 360
By divide_by_2_mod_180_v0 on A, C, D, A, C, G we get angle(A, C, D) == angle(A, C, G) mod 360
By divide_by_2_mod_180_v3 on C, A, D, C, A, F we get angle(C, A, D) == angle(C, A, F) + 180 mod 360
By divide_by_2_mod_180_v1 on G, C, A, B, C, E we get angle(B, C, E) == angle(G, C, A) mod 360
By collinear_definition on D, F, A we get F in Line(A, D), A in Line(D, F), Line(A, D) == Line(D, F), 0 == 2 * angle(F, D, A) mod 360
By divide_by_2_mod_180_v3 on C, A, D, F, C, B we get angle(C, A, D) == angle(F, C, B) + 180 mod 360
By divide_by_2_mod_180_v1 on B, A, D, B, C, F we get angle(B, A, D) == angle(B, C, F) mod 360
By collinear_definition on C, G, E we get G in Line(C, E), E in Line(C, G), Line(C, E) == Line(C, G), 0 == 2 * angle(G, C, E) mod 360
By divide_by_2_mod_180_v3 on F, A, C, D, A, C we get angle(F, A, C) == angle(D, A, C) + 180 mod 360
By reverse_direction on A, D we get 180 == direction(A, D) - direction(D, A) mod 360
By divide_by_2_mod_180_v0 on C, A, F, D, A, B we get angle(C, A, F) == angle(D, A, B) mod 360
By divide_by_2_mod_180_v2 on C, B, F, C, A, D we get angle(C, B, F) == angle(C, A, D) + 180 mod 360
By isosceles_triangle_from_angles on F, B, C we get isosceles_triangle(F, B, C)
By divide_by_2_mod_180_v3 on B, C, F, D, A, C we get angle(B, C, F) == angle(D, A, C) + 180 mod 360
By internal_angle_bisector_definition_v0 on E, G, E, C we get angle(E, C, G) == angle(G, C, E) mod 360
By collinear_definition on C, E, G we get E in Line(C, G), G in Line(C, E), Line(C, E) == Line(C, G), 0 == 2 * angle(E, C, G) mod 360
By divide_by_2_mod_180_v2 on D, A, C, F, B, C we get angle(D, A, C) == angle(F, B, C) + 180 mod 360
By collinear_definition on C, D, G we get D in Line(C, G), G in Line(C, D), Line(C, D) == Line(C, G), 0 == 2 * angle(D, C, G) mod 360
By collinear_definition on A, F, D we get F in Line(A, D), D in Line(A, F), Line(A, D) == Line(A, F), 0 == 2 * angle(F, A, D) mod 360
By collinear_definition on D, A, F we get A in Line(D, F), F in Line(A, D), Line(A, D) == Line(D, F), 0 == 2 * angle(A, D, F) mod 360
By internal_angle_bisector_definition_v0 on D, G, D, C we get angle(D, C, G) == angle(G, C, D) mod 360
By reverse_direction on D, A we get 180 == direction(D, A) - direction(A, D) mod 360
By collinear_definition on A, D, F we get D in Line(A, F), F in Line(A, D), Line(A, D) == Line(A, F), 0 == 2 * angle(D, A, F) mod 360
By collinear_definition on C, G, D we get G in Line(C, D), D in Line(C, G), Line(C, D) == Line(C, G), 0 == 2 * angle(G, C, D) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, A, C), D, G, A we get 180 == 2 * direction(excenter(B, A, C), D) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, A, C), B, D, B we get 180 == 2 * direction(excenter(B, A, C), B) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on C, excenter(B, A, C), G, D we get 180 == 2 * direction(C, excenter(B, A, C)) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on B, D, G, excenter(B, A, C) we get 180 == 2 * direction(B, D) - 2 * direction(G, excenter(B, A, C)) mod 360
By perpendicular_direction_conditions_v0_r on C, excenter(B, A, C), D, G we get 180 == 2 * direction(C, excenter(B, A, C)) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, A, C), C, D, G we get 180 == 2 * direction(excenter(B, A, C), C) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on D, B, excenter(B, A, C), G we get 180 == 2 * direction(D, B) - 2 * direction(excenter(B, A, C), G) mod 360
By perpendicular_direction_conditions_v0_r on G, excenter(B, A, C), B, D we get 180 == 2 * direction(G, excenter(B, A, C)) - 2 * direction(B, D) mod 360
By same_angle_v1 on D, G, E, B we get angle(E, D, B) == angle(G, D, B) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, A, C), C, G, C we get 180 == 2 * direction(excenter(B, A, C), C) - 2 * direction(G, C) mod 360
By same_angle_v1 on D, G, C, B we get angle(C, D, B) == angle(G, D, B) mod 360
By perpendicular_direction_conditions_v0_r on F, D, A, G we get 180 == 2 * direction(F, D) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on A, G, F, D we get 180 == 2 * direction(A, G) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on D, excenter(B, A, C), A, G we get 180 == 2 * direction(D, excenter(B, A, C)) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on B, D, excenter(B, A, C), B we get 180 == 2 * direction(B, D) - 2 * direction(excenter(B, A, C), B) mod 360
By perpendicular_direction_conditions_v0_r on A, excenter(B, A, C), A, G we get 180 == 2 * direction(A, excenter(B, A, C)) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on E, G, C, excenter(B, A, C) we get 180 == 2 * direction(E, G) - 2 * direction(C, excenter(B, A, C)) mod 360
By perpendicular_direction_conditions_v0_r on G, A, excenter(B, A, C), F we get 180 == 2 * direction(G, A) - 2 * direction(excenter(B, A, C), F) mod 360
By perpendicular_direction_conditions_v0_r on A, G, excenter(B, A, C), D we get 180 == 2 * direction(A, G) - 2 * direction(excenter(B, A, C), D) mod 360
By perpendicular_direction_conditions_v0_r on D, G, excenter(B, A, C), C we get 180 == 2 * direction(D, G) - 2 * direction(excenter(B, A, C), C) mod 360
By perpendicular_direction_conditions_v0_r on G, A, A, excenter(B, A, C) we get 180 == 2 * direction(G, A) - 2 * direction(A, excenter(B, A, C)) mod 360
By perpendicular_direction_conditions_v0_r on G, B, B, D we get 180 == 2 * direction(G, B) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on G, excenter(B, A, C), D, B we get 180 == 2 * direction(G, excenter(B, A, C)) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on G, A, F, excenter(B, A, C) we get 180 == 2 * direction(G, A) - 2 * direction(F, excenter(B, A, C)) mod 360
By perpendicular_direction_conditions_v0_r on C, excenter(B, A, C), G, C we get 180 == 2 * direction(C, excenter(B, A, C)) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on D, G, C, excenter(B, A, C) we get 180 == 2 * direction(D, G) - 2 * direction(C, excenter(B, A, C)) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, A, C), F, G, A we get 180 == 2 * direction(excenter(B, A, C), F) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on A, G, D, excenter(B, A, C) we get 180 == 2 * direction(A, G) - 2 * direction(D, excenter(B, A, C)) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, A, C), B, B, D we get 180 == 2 * direction(excenter(B, A, C), B) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on G, D, excenter(B, A, C), C we get 180 == 2 * direction(G, D) - 2 * direction(excenter(B, A, C), C) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, A, C), G, D, B we get 180 == 2 * direction(excenter(B, A, C), G) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on G, A, F, D we get 180 == 2 * direction(G, A) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, A, C), D, A, G we get 180 == 2 * direction(excenter(B, A, C), D) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, A, C), C, G, E we get 180 == 2 * direction(excenter(B, A, C), C) - 2 * direction(G, E) mod 360
By perpendicular_direction_conditions_v0_r on G, A, D, excenter(B, A, C) we get 180 == 2 * direction(G, A) - 2 * direction(D, excenter(B, A, C)) mod 360
By perpendicular_direction_conditions_v0_r on G, D, C, excenter(B, A, C) we get 180 == 2 * direction(G, D) - 2 * direction(C, excenter(B, A, C)) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, A, C), G, B, D we get 180 == 2 * direction(excenter(B, A, C), G) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on D, B, B, excenter(B, A, C) we get 180 == 2 * direction(D, B) - 2 * direction(B, excenter(B, A, C)) mod 360
By perpendicular_direction_conditions_v0_r on G, B, D, B we get 180 == 2 * direction(G, B) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on B, excenter(B, A, C), D, B we get 180 == 2 * direction(B, excenter(B, A, C)) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on E, G, excenter(B, A, C), C we get 180 == 2 * direction(E, G) - 2 * direction(excenter(B, A, C), C) mod 360
By perpendicular_direction_conditions_v0_r on F, excenter(B, A, C), G, A we get 180 == 2 * direction(F, excenter(B, A, C)) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on D, B, excenter(B, A, C), B we get 180 == 2 * direction(D, B) - 2 * direction(excenter(B, A, C), B) mod 360
By perpendicular_direction_conditions_v0_r on D, B, G, excenter(B, A, C) we get 180 == 2 * direction(D, B) - 2 * direction(G, excenter(B, A, C)) mod 360
By perpendicular_direction_conditions_v0_r on A, G, excenter(B, A, C), F we get 180 == 2 * direction(A, G) - 2 * direction(excenter(B, A, C), F) mod 360
By perpendicular_direction_conditions_v0_r on A, G, A, excenter(B, A, C) we get 180 == 2 * direction(A, G) - 2 * direction(A, excenter(B, A, C)) mod 360
By perpendicular_direction_conditions_v0_r on G, A, excenter(B, A, C), A we get 180 == 2 * direction(G, A) - 2 * direction(excenter(B, A, C), A) mod 360
By perpendicular_direction_conditions_v0_r on F, excenter(B, A, C), A, G we get 180 == 2 * direction(F, excenter(B, A, C)) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, A, C), C, G, D we get 180 == 2 * direction(excenter(B, A, C), C) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on B, D, B, excenter(B, A, C) we get 180 == 2 * direction(B, D) - 2 * direction(B, excenter(B, A, C)) mod 360
By perpendicular_direction_conditions_v0_r on D, B, G, B we get 180 == 2 * direction(D, B) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on G, E, excenter(B, A, C), C we get 180 == 2 * direction(G, E) - 2 * direction(excenter(B, A, C), C) mod 360
By perpendicular_direction_conditions_v0_r on D, excenter(B, A, C), G, A we get 180 == 2 * direction(D, excenter(B, A, C)) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on G, C, excenter(B, A, C), C we get 180 == 2 * direction(G, C) - 2 * direction(excenter(B, A, C), C) mod 360
By perpendicular_direction_conditions_v0_r on A, G, excenter(B, A, C), A we get 180 == 2 * direction(A, G) - 2 * direction(excenter(B, A, C), A) mod 360
By perpendicular_direction_conditions_v0_r on B, D, excenter(B, A, C), G we get 180 == 2 * direction(B, D) - 2 * direction(excenter(B, A, C), G) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, A, C), A, G, A we get 180 == 2 * direction(excenter(B, A, C), A) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on G, E, C, excenter(B, A, C) we get 180 == 2 * direction(G, E) - 2 * direction(C, excenter(B, A, C)) mod 360
By perpendicular_direction_conditions_v0_r on A, G, F, excenter(B, A, C) we get 180 == 2 * direction(A, G) - 2 * direction(F, excenter(B, A, C)) mod 360
By perpendicular_direction_conditions_v0_r on C, excenter(B, A, C), G, E we get 180 == 2 * direction(C, excenter(B, A, C)) - 2 * direction(G, E) mod 360
By perpendicular_direction_conditions_v0_r on F, D, G, A we get 180 == 2 * direction(F, D) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, A, C), F, A, G we get 180 == 2 * direction(excenter(B, A, C), F) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, A, C), A, A, G we get 180 == 2 * direction(excenter(B, A, C), A) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on A, excenter(B, A, C), G, A we get 180 == 2 * direction(A, excenter(B, A, C)) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on G, A, excenter(B, A, C), D we get 180 == 2 * direction(G, A) - 2 * direction(excenter(B, A, C), D) mod 360
By perpendicular_direction_conditions_v0_r on G, C, C, excenter(B, A, C) we get 180 == 2 * direction(G, C) - 2 * direction(C, excenter(B, A, C)) mod 360
By perpendicular_direction_conditions_v0_r on B, excenter(B, A, C), B, D we get 180 == 2 * direction(B, excenter(B, A, C)) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, A, C), C, E, G we get 180 == 2 * direction(excenter(B, A, C), C) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on B, D, G, B we get 180 == 2 * direction(B, D) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on C, excenter(B, A, C), E, G we get 180 == 2 * direction(C, excenter(B, A, C)) - 2 * direction(E, G) mod 360
By collinear_definition on E, G, C we get G in Line(C, E), C in Line(E, G), Line(C, E) == Line(E, G), 0 == 2 * angle(G, E, C) mod 360
By internal_angle_bisector_definition_v0 on E, G, E, D we get angle(E, D, G) == angle(G, D, E) mod 360
By external_angle_bisector_definition_v0 on C, excenter(B, A, C), B, A we get 180 == angle(C, A, excenter(B, A, C)) + angle(B, A, excenter(B, A, C)) mod 360
By collinear_definition on D, excenter(B, A, C), A we get excenter(B, A, C) in Line(A, D), A in Line(D, excenter(B, A, C)), Line(A, D) == Line(D, excenter(B, A, C)), 0 == 2 * angle(excenter(B, A, C), D, A) mod 360
By perpendicular_angle_conditions_v0 on G, A, F we get angle(G, A, F) == orientation(A, F, G) mod 360
By collinear_definition on A, F, excenter(B, A, C) we get F in Line(A, excenter(B, A, C)), excenter(B, A, C) in Line(A, F), Line(A, F) == Line(A, excenter(B, A, C)), 0 == 2 * angle(F, A, excenter(B, A, C)) mod 360
By collinear_definition on B, G, excenter(B, A, C) we get G in Line(B, excenter(B, A, C)), excenter(B, A, C) in Line(B, G), Line(B, G) == Line(B, excenter(B, A, C)), 0 == 2 * angle(G, B, excenter(B, A, C)) mod 360
By reverse_direction on C, G we get 180 == direction(C, G) - direction(G, C) mod 360
By collinear_definition on E, C, G we get C in Line(E, G), G in Line(C, E), Line(C, E) == Line(E, G), 0 == 2 * angle(C, E, G) mod 360
By collinear_definition on F, A, D we get A in Line(D, F), D in Line(A, F), Line(A, F) == Line(D, F), 0 == 2 * angle(A, F, D) mod 360
By internal_angle_bisector_definition_v0 on C, G, C, E we get angle(C, E, G) == angle(G, E, C) mod 360
By collinear_definition on D, G, C we get G in Line(C, D), C in Line(D, G), Line(C, D) == Line(D, G), 0 == 2 * angle(G, D, C) mod 360
By collinear_definition on F, A, excenter(B, A, C) we get A in Line(F, excenter(B, A, C)), excenter(B, A, C) in Line(A, F), Line(A, F) == Line(F, excenter(B, A, C)), 0 == 2 * angle(A, F, excenter(B, A, C)) mod 360
By internal_angle_bisector_definition_v0 on D, G, D, E we get angle(D, E, G) == angle(G, E, D) mod 360
By collinear_definition on A, D, excenter(B, A, C) we get D in Line(A, excenter(B, A, C)), excenter(B, A, C) in Line(A, D), Line(A, D) == Line(A, excenter(B, A, C)), 0 == 2 * angle(D, A, excenter(B, A, C)) mod 360
By internal_angle_bisector_definition_v0 on C, excenter(B, A, C), A, B we get angle(C, B, excenter(B, A, C)) == angle(excenter(B, A, C), B, A) mod 360
By internal_angle_bisector_definition_v0 on C, G, B, A we get angle(C, A, G) == angle(G, A, B) mod 360
By collinear_definition on D, F, excenter(B, A, C) we get F in Line(D, excenter(B, A, C)), excenter(B, A, C) in Line(D, F), Line(D, F) == Line(D, excenter(B, A, C)), 0 == 2 * angle(F, D, excenter(B, A, C)) mod 360
By collinear_definition on F, excenter(B, A, C), A we get excenter(B, A, C) in Line(A, F), A in Line(F, excenter(B, A, C)), Line(A, F) == Line(F, excenter(B, A, C)), 0 == 2 * angle(excenter(B, A, C), F, A) mod 360
By external_angle_bisector_definition_v0 on A, D, C, B we get 180 == angle(A, B, D) + angle(C, B, D) mod 360
By collinear_definition on B, excenter(B, A, C), G we get excenter(B, A, C) in Line(B, G), G in Line(B, excenter(B, A, C)), Line(B, G) == Line(B, excenter(B, A, C)), 0 == 2 * angle(excenter(B, A, C), B, G) mod 360
By collinear_definition on E, G, D we get G in Line(D, E), D in Line(E, G), Line(D, E) == Line(E, G), 0 == 2 * angle(G, E, D) mod 360
By perpendicular_angle_conditions_v0 on E, C, excenter(B, A, C) we get angle(E, C, excenter(B, A, C)) == orientation(C, excenter(B, A, C), E) mod 360
By internal_angle_bisector_definition_v0 on A, excenter(B, A, C), C, B we get angle(A, B, excenter(B, A, C)) == angle(excenter(B, A, C), B, C) mod 360
By internal_angle_bisector_definition_v0 on C, G, C, D we get angle(C, D, G) == angle(G, D, C) mod 360
By internal_angle_bisector_definition_v0 on B, G, C, A we get angle(B, A, G) == angle(G, A, C) mod 360
By perpendicular_angle_conditions_v0 on D, C, excenter(B, A, C) we get angle(D, C, excenter(B, A, C)) == orientation(C, excenter(B, A, C), D) mod 360
By perpendicular_angle_conditions_v0 on G, C, excenter(B, A, C) we get angle(G, C, excenter(B, A, C)) == orientation(C, excenter(B, A, C), G) mod 360
By perpendicular_angle_conditions_v0 on G, A, D we get angle(G, A, D) == orientation(A, D, G) mod 360
By perpendicular_angle_conditions_v0 on G, B, D we get angle(G, B, D) == orientation(B, D, G) mod 360
By collinear_definition on D, excenter(B, A, C), F we get excenter(B, A, C) in Line(D, F), F in Line(D, excenter(B, A, C)), Line(D, F) == Line(D, excenter(B, A, C)), 0 == 2 * angle(excenter(B, A, C), D, F) mod 360
By external_angle_bisector_definition_v0 on A, excenter(B, A, C), B, C we get 180 == angle(A, C, excenter(B, A, C)) + angle(B, C, excenter(B, A, C)) mod 360
By perpendicular_angle_conditions_v0 on F, A, G we get angle(F, A, G) == orientation(A, G, F) mod 360
By collinear_definition on D, E, G we get E in Line(D, G), G in Line(D, E), Line(D, E) == Line(D, G), 0 == 2 * angle(E, D, G) mod 360
By perpendicular_angle_conditions_v0 on D, B, G we get angle(D, B, G) == orientation(B, G, D) mod 360
By collinear_definition on D, G, E we get G in Line(D, E), E in Line(D, G), Line(D, E) == Line(D, G), 0 == 2 * angle(G, D, E) mod 360
By collinear_definition on D, C, G we get C in Line(D, G), G in Line(C, D), Line(C, D) == Line(D, G), 0 == 2 * angle(C, D, G) mod 360
By collinear_definition on F, D, A we get D in Line(A, F), A in Line(D, F), Line(A, F) == Line(D, F), 0 == 2 * angle(D, F, A) mod 360
By perpendicular_angle_conditions_v0 on excenter(B, A, C), C, E we get angle(excenter(B, A, C), C, E) == orientation(C, E, excenter(B, A, C)) mod 360
By collinear_definition on E, D, G we get D in Line(E, G), G in Line(D, E), Line(D, E) == Line(E, G), 0 == 2 * angle(D, E, G) mod 360
By perpendicular_angle_conditions_v0 on D, A, G we get angle(D, A, G) == orientation(A, G, D) mod 360
By reverse_direction on D, F we get 180 == direction(D, F) - direction(F, D) mod 360
By collinear_definition on A, excenter(B, A, C), F we get excenter(B, A, C) in Line(A, F), F in Line(A, excenter(B, A, C)), Line(A, F) == Line(A, excenter(B, A, C)), 0 == 2 * angle(excenter(B, A, C), A, F) mod 360
By perpendicular_angle_conditions_v0 on excenter(B, A, C), C, D we get angle(excenter(B, A, C), C, D) == orientation(C, D, excenter(B, A, C)) mod 360
By collinear_definition on D, A, excenter(B, A, C) we get A in Line(D, excenter(B, A, C)), excenter(B, A, C) in Line(A, D), Line(A, D) == Line(D, excenter(B, A, C)), 0 == 2 * angle(A, D, excenter(B, A, C)) mod 360
By reverse_direction on B, G we get 180 == direction(B, G) - direction(G, B) mod 360
By collinear_definition on A, excenter(B, A, C), D we get excenter(B, A, C) in Line(A, D), D in Line(A, excenter(B, A, C)), Line(A, D) == Line(A, excenter(B, A, C)), 0 == 2 * angle(excenter(B, A, C), A, D) mod 360
By perpendicular_angle_conditions_v0 on excenter(B, A, C), C, G we get angle(excenter(B, A, C), C, G) == orientation(C, G, excenter(B, A, C)) mod 360
By same_angle_v3 on G, C, E, A we get angle(C, G, A) == angle(E, G, A) + 180 mod 360
By same_angle_v0 on G, D, E, B we get angle(D, G, B) == angle(E, G, B) mod 360
By same_angle_v3 on G, D, C, B we get angle(D, G, B) == angle(C, G, B) + 180 mod 360
By same_angle_v3 on G, E, C, B we get angle(E, G, B) == angle(C, G, B) + 180 mod 360
By same_angle_v3 on G, C, D, A we get angle(C, G, A) == angle(D, G, A) + 180 mod 360
By same_angle_v1 on G, D, E, A we get angle(D, G, A) == angle(E, G, A) mod 360
By collinear_definition on excenter(B, A, C), A, F we get A in Line(F, excenter(B, A, C)), F in Line(A, excenter(B, A, C)), Line(A, excenter(B, A, C)) == Line(F, excenter(B, A, C)), 0 == 2 * angle(A, excenter(B, A, C), F) mod 360
By altitude_definition on excenter(A, B, C), G, excenter(B, A, C), Line(B, D) we get Line(B, D) == altitude(excenter(A, B, C), G, excenter(B, A, C))
By collinear_definition on F, D, excenter(B, A, C) we get D in Line(F, excenter(B, A, C)), excenter(B, A, C) in Line(D, F), Line(D, F) == Line(F, excenter(B, A, C)), 0 == 2 * angle(D, F, excenter(B, A, C)) mod 360
By altitude_definition on excenter(A, B, C), E, D, external_angle_bisector(A, C, B) we get external_angle_bisector(A, C, B) == altitude(excenter(A, B, C), D, E)
By collinear_definition on excenter(B, A, C), F, D we get F in Line(D, excenter(B, A, C)), D in Line(F, excenter(B, A, C)), Line(D, excenter(B, A, C)) == Line(F, excenter(B, A, C)), 0 == 2 * angle(F, excenter(B, A, C), D) mod 360
By altitude_definition on excenter(A, B, C), excenter(B, A, C), A, Line(A, G) we get Line(A, G) == altitude(excenter(A, B, C), A, excenter(B, A, C))
By altitude_definition on excenter(B, A, C), C, G, external_angle_bisector(A, C, B) we get external_angle_bisector(A, C, B) == altitude(excenter(B, A, C), C, G)
By perpendicular_angle_conditions_v0 on excenter(B, A, C), B, D we get angle(excenter(B, A, C), B, D) == orientation(B, D, excenter(B, A, C)) mod 360
By altitude_definition on excenter(A, B, C), A, F, Line(A, G) we get Line(A, G) == altitude(excenter(A, B, C), A, F)
By altitude_definition on excenter(B, A, C), D, B, h we get h == altitude(excenter(B, A, C), B, D)
By altitude_definition on G, excenter(B, A, C), A, Line(A, G) we get Line(A, G) == altitude(G, A, excenter(B, A, C))
By altitude_definition on excenter(B, A, C), E, D, external_angle_bisector(A, C, B) we get external_angle_bisector(A, C, B) == altitude(excenter(B, A, C), D, E)
By altitude_definition on F, A, G, f we get f == altitude(F, A, G)
By altitude_definition on E, excenter(B, A, C), C, g we get g == altitude(E, C, excenter(B, A, C))
By altitude_definition on excenter(B, A, C), E, C, external_angle_bisector(A, C, B) we get external_angle_bisector(A, C, B) == altitude(excenter(B, A, C), C, E)
By altitude_definition on excenter(A, B, C), A, D, Line(A, G) we get Line(A, G) == altitude(excenter(A, B, C), A, D)
By perpendicular_angle_conditions_v0 on D, B, excenter(B, A, C) we get angle(D, B, excenter(B, A, C)) == orientation(B, excenter(B, A, C), D) mod 360
By collinear_definition on G, C, E we get C in Line(E, G), E in Line(C, G), Line(C, G) == Line(E, G), 0 == 2 * angle(C, G, E) mod 360
By altitude_definition on excenter(A, B, C), G, C, external_angle_bisector(A, C, B) we get external_angle_bisector(A, C, B) == altitude(excenter(A, B, C), C, G)
By collinear_definition on excenter(B, A, C), B, G we get B in Line(G, excenter(B, A, C)), G in Line(B, excenter(B, A, C)), Line(B, excenter(B, A, C)) == Line(G, excenter(B, A, C)), 0 == 2 * angle(B, excenter(B, A, C), G) mod 360
By perpendicular_angle_conditions_v0 on G, A, excenter(B, A, C) we get angle(G, A, excenter(B, A, C)) == orientation(A, excenter(B, A, C), G) mod 360
By altitude_definition on excenter(B, A, C), A, G, f we get f == altitude(excenter(B, A, C), A, G)
By altitude_definition on D, G, excenter(B, A, C), Line(B, D) we get Line(B, D) == altitude(D, G, excenter(B, A, C))
By altitude_definition on G, excenter(B, A, C), C, g we get g == altitude(G, C, excenter(B, A, C))
By altitude_definition on excenter(A, B, C), B, G, Line(B, D) we get Line(B, D) == altitude(excenter(A, B, C), B, G)
By altitude_definition on G, A, D, Line(A, G) we get Line(A, G) == altitude(G, A, D)
By altitude_definition on excenter(A, B, C), C, D, external_angle_bisector(A, C, B) we get external_angle_bisector(A, C, B) == altitude(excenter(A, B, C), C, D)
By altitude_definition on excenter(A, B, C), E, G, external_angle_bisector(A, C, B) we get external_angle_bisector(A, C, B) == altitude(excenter(A, B, C), E, G)
By collinear_definition on excenter(B, A, C), D, F we get D in Line(F, excenter(B, A, C)), F in Line(D, excenter(B, A, C)), Line(D, excenter(B, A, C)) == Line(F, excenter(B, A, C)), 0 == 2 * angle(D, excenter(B, A, C), F) mod 360
By altitude_definition on excenter(A, B, C), excenter(B, A, C), F, Line(A, G) we get Line(A, G) == altitude(excenter(A, B, C), F, excenter(B, A, C))
By altitude_definition on excenter(B, A, C), G, D, external_angle_bisector(A, C, B) we get external_angle_bisector(A, C, B) == altitude(excenter(B, A, C), D, G)
By altitude_definition on excenter(A, B, C), E, C, external_angle_bisector(A, C, B) we get external_angle_bisector(A, C, B) == altitude(excenter(A, B, C), C, E)
By altitude_definition on excenter(A, B, C), F, D, Line(A, G) we get Line(A, G) == altitude(excenter(A, B, C), D, F)
By altitude_definition on G, F, A, Line(A, G) we get Line(A, G) == altitude(G, A, F)
By altitude_definition on excenter(A, B, C), D, G, external_angle_bisector(A, C, B) we get external_angle_bisector(A, C, B) == altitude(excenter(A, B, C), D, G)
By altitude_definition on excenter(B, A, C), E, G, external_angle_bisector(A, C, B) we get external_angle_bisector(A, C, B) == altitude(excenter(B, A, C), E, G)
By altitude_definition on G, excenter(B, A, C), D, Line(A, G) we get Line(A, G) == altitude(G, D, excenter(B, A, C))
By altitude_definition on G, F, excenter(B, A, C), Line(A, G) we get Line(A, G) == altitude(G, F, excenter(B, A, C))
By collinear_definition on G, excenter(B, A, C), B we get excenter(B, A, C) in Line(B, G), B in Line(G, excenter(B, A, C)), Line(B, G) == Line(G, excenter(B, A, C)), 0 == 2 * angle(excenter(B, A, C), G, B) mod 360
By altitude_definition on D, B, G, Line(B, D) we get Line(B, D) == altitude(D, B, G)
By collinear_definition on F, excenter(B, A, C), D we get excenter(B, A, C) in Line(D, F), D in Line(F, excenter(B, A, C)), Line(D, F) == Line(F, excenter(B, A, C)), 0 == 2 * angle(excenter(B, A, C), F, D) mod 360
By collinear_definition on G, E, C we get E in Line(C, G), C in Line(E, G), Line(C, G) == Line(E, G), 0 == 2 * angle(E, G, C) mod 360
By collinear_definition on G, D, C we get D in Line(C, G), C in Line(D, G), Line(C, G) == Line(D, G), 0 == 2 * angle(D, G, C) mod 360
By collinear_definition on excenter(B, A, C), F, A we get F in Line(A, excenter(B, A, C)), A in Line(F, excenter(B, A, C)), Line(A, excenter(B, A, C)) == Line(F, excenter(B, A, C)), 0 == 2 * angle(F, excenter(B, A, C), A) mod 360
By collinear_definition on G, C, D we get C in Line(D, G), D in Line(C, G), Line(C, G) == Line(D, G), 0 == 2 * angle(C, G, D) mod 360
By altitude_definition on D, G, A, f we get f == altitude(D, A, G)
By altitude_definition on excenter(A, B, C), excenter(B, A, C), B, Line(B, D) we get Line(B, D) == altitude(excenter(A, B, C), B, excenter(B, A, C))
By altitude_definition on excenter(A, B, C), D, excenter(B, A, C), Line(A, G) we get Line(A, G) == altitude(excenter(A, B, C), D, excenter(B, A, C))
By collinear_definition on excenter(B, A, C), A, D we get A in Line(D, excenter(B, A, C)), D in Line(A, excenter(B, A, C)), Line(A, excenter(B, A, C)) == Line(D, excenter(B, A, C)), 0 == 2 * angle(A, excenter(B, A, C), D) mod 360
By collinear_definition on excenter(B, A, C), G, B we get G in Line(B, excenter(B, A, C)), B in Line(G, excenter(B, A, C)), Line(B, excenter(B, A, C)) == Line(G, excenter(B, A, C)), 0 == 2 * angle(G, excenter(B, A, C), B) mod 360
By altitude_definition on G, D, F, Line(A, G) we get Line(A, G) == altitude(G, D, F)
By collinear_definition on G, E, D we get E in Line(D, G), D in Line(E, G), Line(D, G) == Line(E, G), 0 == 2 * angle(E, G, D) mod 360
By altitude_definition on excenter(B, A, C), D, C, external_angle_bisector(A, C, B) we get external_angle_bisector(A, C, B) == altitude(excenter(B, A, C), C, D)
By collinear_definition on G, B, excenter(B, A, C) we get B in Line(G, excenter(B, A, C)), excenter(B, A, C) in Line(B, G), Line(B, G) == Line(G, excenter(B, A, C)), 0 == 2 * angle(B, G, excenter(B, A, C)) mod 360
By altitude_definition on D, excenter(B, A, C), B, Line(B, D) we get Line(B, D) == altitude(D, B, excenter(B, A, C))
By perpendicular_angle_conditions_v0 on excenter(B, A, C), A, G we get angle(excenter(B, A, C), A, G) == orientation(A, G, excenter(B, A, C)) mod 360
By altitude_definition on D, excenter(B, A, C), C, g we get g == altitude(D, C, excenter(B, A, C))
By altitude_definition on G, B, D, h we get h == altitude(G, B, D)
By collinear_definition on G, D, E we get D in Line(E, G), E in Line(D, G), Line(D, G) == Line(E, G), 0 == 2 * angle(D, G, E) mod 360
By collinear_definition on excenter(B, A, C), D, A we get D in Line(A, excenter(B, A, C)), A in Line(D, excenter(B, A, C)), Line(A, excenter(B, A, C)) == Line(D, excenter(B, A, C)), 0 == 2 * angle(D, excenter(B, A, C), A) mod 360
By anti_similar_triangle_basic_properties on F, B, C, F, C, B we get angle(F, B, C) == 0 - angle(F, C, B) mod 360, angle(B, C, F) == 0 - angle(C, B, F) mod 360, angle(C, F, B) == 0 - angle(B, F, C) mod 360, log(distance(B, F)) + log(distance(B, C)) == log(distance(C, F)) + log(distance(B, C)), log(distance(B, C)) + log(distance(B, F)) == log(distance(B, C)) + log(distance(C, F)), log(distance(B, F)) + log(distance(B, F)) == log(distance(C, F)) + log(distance(C, F))
By power_of_a_point_definition on D, A, F, c we get log(power_of_a_point(D, c)) == log(distance(A, D)) + log(distance(D, F))
By power_of_a_point_definition on excenter(B, A, C), F, A, c we get log(power_of_a_point(excenter(B, A, C), c)) == log(distance(F, excenter(B, A, C))) + log(distance(A, excenter(B, A, C)))
By concyclic_sufficient_conditions_v1 on D, B, G, A we get concyclic(A, B, D, G)
By orthocenter_concurrency on excenter(B, A, C), D, G we get orthocenter(D, G, excenter(B, A, C)) in altitude(excenter(B, A, C), D, G), orthocenter(D, G, excenter(B, A, C)) in altitude(D, G, excenter(B, A, C)), orthocenter(D, G, excenter(B, A, C)) in altitude(G, D, excenter(B, A, C))
By projection_definition on excenter(A, B, C), C, g we get C == projection(excenter(A, B, C), g)
By projection_definition on excenter(A, B, C), B, h we get B == projection(excenter(A, B, C), h)
By projection_definition on excenter(A, B, C), A, f we get A == projection(excenter(A, B, C), f)
By between_imply_not_between on C, G, D we get collinear_and_not_between(D, C, G)
By between_imply_not_between on D, A, F we get collinear_and_not_between(A, D, F)
By between_imply_not_between on F, A, D we get collinear_and_not_between(A, F, D)
By between_imply_not_between on D, G, C we get collinear_and_not_between(C, D, G)
By between_imply_not_between on D, E, G we get collinear_and_not_between(E, D, G)
By between_imply_not_between on G, E, D we get collinear_and_not_between(D, G, E)
By between_imply_not_between on E, G, C we get collinear_and_not_between(C, E, G)
By between_imply_not_between on C, G, E we get collinear_and_not_between(E, C, G)
By perpendicular_direction_conditions_v0_r on A, D, G, excenter(A, B, C) we get 180 == 2 * direction(A, D) - 2 * direction(G, excenter(A, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, A, C), excenter(A, B, C), E, G we get 180 == 2 * direction(excenter(B, A, C), excenter(A, B, C)) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on D, excenter(A, B, C), excenter(B, A, C), G we get 180 == 2 * direction(D, excenter(A, B, C)) - 2 * direction(excenter(B, A, C), G) mod 360
By perpendicular_direction_conditions_v0_r on G, D, excenter(A, B, C), excenter(B, A, C) we get 180 == 2 * direction(G, D) - 2 * direction(excenter(A, B, C), excenter(B, A, C)) mod 360
By perpendicular_direction_conditions_v0_r on excenter(A, B, C), C, G, D we get 180 == 2 * direction(excenter(A, B, C), C) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on excenter(A, B, C), C, D, C we get 180 == 2 * direction(excenter(A, B, C), C) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on G, excenter(B, A, C), excenter(A, B, C), B we get 180 == 2 * direction(G, excenter(B, A, C)) - 2 * direction(excenter(A, B, C), B) mod 360
By perpendicular_direction_conditions_v0_r on excenter(A, B, C), excenter(B, A, C), E, C we get 180 == 2 * direction(excenter(A, B, C), excenter(B, A, C)) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on D, G, excenter(B, A, C), excenter(A, B, C) we get 180 == 2 * direction(D, G) - 2 * direction(excenter(B, A, C), excenter(A, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on C, E, C, excenter(A, B, C) we get 180 == 2 * direction(C, E) - 2 * direction(C, excenter(A, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on D, excenter(A, B, C), G, excenter(B, A, C) we get 180 == 2 * direction(D, excenter(A, B, C)) - 2 * direction(G, excenter(B, A, C)) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, A, C), F, A, excenter(A, B, C) we get 180 == 2 * direction(excenter(B, A, C), F) - 2 * direction(A, excenter(A, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on B, G, excenter(A, B, C), B we get 180 == 2 * direction(B, G) - 2 * direction(excenter(A, B, C), B) mod 360
By perpendicular_direction_conditions_v0_r on excenter(A, B, C), G, F, excenter(B, A, C) we get 180 == 2 * direction(excenter(A, B, C), G) - 2 * direction(F, excenter(B, A, C)) mod 360
By perpendicular_direction_conditions_v0_r on C, excenter(A, B, C), E, D we get 180 == 2 * direction(C, excenter(A, B, C)) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on excenter(A, B, C), excenter(B, A, C), G, C we get 180 == 2 * direction(excenter(A, B, C), excenter(B, A, C)) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on excenter(A, B, C), A, D, F we get 180 == 2 * direction(excenter(A, B, C), A) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on C, excenter(A, B, C), C, G we get 180 == 2 * direction(C, excenter(A, B, C)) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, A, C), D, excenter(A, B, C), G we get 180 == 2 * direction(excenter(B, A, C), D) - 2 * direction(excenter(A, B, C), G) mod 360
By perpendicular_direction_conditions_v0_r on C, excenter(A, B, C), G, E we get 180 == 2 * direction(C, excenter(A, B, C)) - 2 * direction(G, E) mod 360
By perpendicular_direction_conditions_v0_r on G, excenter(B, A, C), D, excenter(A, B, C) we get 180 == 2 * direction(G, excenter(B, A, C)) - 2 * direction(D, excenter(A, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, A, C), G, D, excenter(A, B, C) we get 180 == 2 * direction(excenter(B, A, C), G) - 2 * direction(D, excenter(A, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on A, excenter(B, A, C), excenter(A, B, C), G we get 180 == 2 * direction(A, excenter(B, A, C)) - 2 * direction(excenter(A, B, C), G) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, A, C), B, excenter(A, B, C), D we get 180 == 2 * direction(excenter(B, A, C), B) - 2 * direction(excenter(A, B, C), D) mod 360
By perpendicular_direction_conditions_v0_r on excenter(A, B, C), excenter(B, A, C), D, G we get 180 == 2 * direction(excenter(A, B, C), excenter(B, A, C)) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on D, C, excenter(A, B, C), C we get 180 == 2 * direction(D, C) - 2 * direction(excenter(A, B, C), C) mod 360
By perpendicular_direction_conditions_v0_r on excenter(A, B, C), A, D, excenter(B, A, C) we get 180 == 2 * direction(excenter(A, B, C), A) - 2 * direction(D, excenter(B, A, C)) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, A, C), excenter(A, B, C), D, E we get 180 == 2 * direction(excenter(B, A, C), excenter(A, B, C)) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on E, G, C, excenter(A, B, C) we get 180 == 2 * direction(E, G) - 2 * direction(C, excenter(A, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on C, excenter(A, B, C), E, C we get 180 == 2 * direction(C, excenter(A, B, C)) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on D, excenter(B, A, C), excenter(A, B, C), A we get 180 == 2 * direction(D, excenter(B, A, C)) - 2 * direction(excenter(A, B, C), A) mod 360
By perpendicular_direction_conditions_v0_r on G, E, excenter(B, A, C), excenter(A, B, C) we get 180 == 2 * direction(G, E) - 2 * direction(excenter(B, A, C), excenter(A, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on excenter(A, B, C), D, excenter(B, A, C), G we get 180 == 2 * direction(excenter(A, B, C), D) - 2 * direction(excenter(B, A, C), G) mod 360
By perpendicular_direction_conditions_v0_r on excenter(A, B, C), D, G, excenter(B, A, C) we get 180 == 2 * direction(excenter(A, B, C), D) - 2 * direction(G, excenter(B, A, C)) mod 360
By perpendicular_direction_conditions_v0_r on excenter(A, B, C), excenter(B, A, C), G, E we get 180 == 2 * direction(excenter(A, B, C), excenter(B, A, C)) - 2 * direction(G, E) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, A, C), F, G, excenter(A, B, C) we get 180 == 2 * direction(excenter(B, A, C), F) - 2 * direction(G, excenter(A, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on D, excenter(B, A, C), excenter(A, B, C), G we get 180 == 2 * direction(D, excenter(B, A, C)) - 2 * direction(excenter(A, B, C), G) mod 360
By perpendicular_direction_conditions_v0_r on C, E, excenter(B, A, C), excenter(A, B, C) we get 180 == 2 * direction(C, E) - 2 * direction(excenter(B, A, C), excenter(A, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on C, E, excenter(A, B, C), excenter(B, A, C) we get 180 == 2 * direction(C, E) - 2 * direction(excenter(A, B, C), excenter(B, A, C)) mod 360
By perpendicular_direction_conditions_v0_r on E, G, excenter(A, B, C), excenter(B, A, C) we get 180 == 2 * direction(E, G) - 2 * direction(excenter(A, B, C), excenter(B, A, C)) mod 360
By perpendicular_direction_conditions_v0_r on D, C, excenter(A, B, C), excenter(B, A, C) we get 180 == 2 * direction(D, C) - 2 * direction(excenter(A, B, C), excenter(B, A, C)) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, A, C), excenter(A, B, C), C, D we get 180 == 2 * direction(excenter(B, A, C), excenter(A, B, C)) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on D, F, G, excenter(A, B, C) we get 180 == 2 * direction(D, F) - 2 * direction(G, excenter(A, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on excenter(A, B, C), B, G, B we get 180 == 2 * direction(excenter(A, B, C), B) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on G, B, D, excenter(A, B, C) we get 180 == 2 * direction(G, B) - 2 * direction(D, excenter(A, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on G, E, C, excenter(A, B, C) we get 180 == 2 * direction(G, E) - 2 * direction(C, excenter(A, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on excenter(A, B, C), G, excenter(B, A, C), A we get 180 == 2 * direction(excenter(A, B, C), G) - 2 * direction(excenter(B, A, C), A) mod 360
By perpendicular_direction_conditions_v0_r on C, G, excenter(A, B, C), excenter(B, A, C) we get 180 == 2 * direction(C, G) - 2 * direction(excenter(A, B, C), excenter(B, A, C)) mod 360
By perpendicular_direction_conditions_v0_r on G, E, excenter(A, B, C), C we get 180 == 2 * direction(G, E) - 2 * direction(excenter(A, B, C), C) mod 360
By perpendicular_direction_conditions_v0_r on G, excenter(A, B, C), F, excenter(B, A, C) we get 180 == 2 * direction(G, excenter(A, B, C)) - 2 * direction(F, excenter(B, A, C)) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, A, C), F, excenter(A, B, C), A we get 180 == 2 * direction(excenter(B, A, C), F) - 2 * direction(excenter(A, B, C), A) mod 360
By perpendicular_direction_conditions_v0_r on E, C, excenter(B, A, C), excenter(A, B, C) we get 180 == 2 * direction(E, C) - 2 * direction(excenter(B, A, C), excenter(A, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on A, D, excenter(A, B, C), G we get 180 == 2 * direction(A, D) - 2 * direction(excenter(A, B, C), G) mod 360
By perpendicular_direction_conditions_v0_r on B, excenter(A, B, C), G, B we get 180 == 2 * direction(B, excenter(A, B, C)) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on A, excenter(A, B, C), A, F we get 180 == 2 * direction(A, excenter(A, B, C)) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on A, excenter(B, A, C), G, excenter(A, B, C) we get 180 == 2 * direction(A, excenter(B, A, C)) - 2 * direction(G, excenter(A, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on E, D, excenter(B, A, C), excenter(A, B, C) we get 180 == 2 * direction(E, D) - 2 * direction(excenter(B, A, C), excenter(A, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, A, C), B, D, excenter(A, B, C) we get 180 == 2 * direction(excenter(B, A, C), B) - 2 * direction(D, excenter(A, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on G, D, C, excenter(A, B, C) we get 180 == 2 * direction(G, D) - 2 * direction(C, excenter(A, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on excenter(A, B, C), excenter(B, A, C), D, C we get 180 == 2 * direction(excenter(A, B, C), excenter(B, A, C)) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on G, excenter(A, B, C), excenter(B, A, C), F we get 180 == 2 * direction(G, excenter(A, B, C)) - 2 * direction(excenter(B, A, C), F) mod 360
By perpendicular_direction_conditions_v0_r on D, excenter(A, B, C), excenter(B, A, C), B we get 180 == 2 * direction(D, excenter(A, B, C)) - 2 * direction(excenter(B, A, C), B) mod 360
By perpendicular_direction_conditions_v0_r on excenter(A, B, C), A, excenter(B, A, C), F we get 180 == 2 * direction(excenter(A, B, C), A) - 2 * direction(excenter(B, A, C), F) mod 360
By perpendicular_direction_conditions_v0_r on D, excenter(B, A, C), A, excenter(A, B, C) we get 180 == 2 * direction(D, excenter(B, A, C)) - 2 * direction(A, excenter(A, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on A, excenter(A, B, C), F, excenter(B, A, C) we get 180 == 2 * direction(A, excenter(A, B, C)) - 2 * direction(F, excenter(B, A, C)) mod 360
By perpendicular_direction_conditions_v0_r on B, excenter(A, B, C), B, G we get 180 == 2 * direction(B, excenter(A, B, C)) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on D, E, excenter(A, B, C), C we get 180 == 2 * direction(D, E) - 2 * direction(excenter(A, B, C), C) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, A, C), excenter(A, B, C), G, D we get 180 == 2 * direction(excenter(B, A, C), excenter(A, B, C)) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, A, C), D, A, excenter(A, B, C) we get 180 == 2 * direction(excenter(B, A, C), D) - 2 * direction(A, excenter(A, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on B, excenter(B, A, C), excenter(A, B, C), B we get 180 == 2 * direction(B, excenter(B, A, C)) - 2 * direction(excenter(A, B, C), B) mod 360
By perpendicular_direction_conditions_v0_r on A, D, excenter(A, B, C), A we get 180 == 2 * direction(A, D) - 2 * direction(excenter(A, B, C), A) mod 360
By perpendicular_direction_conditions_v0_r on excenter(A, B, C), A, A, excenter(B, A, C) we get 180 == 2 * direction(excenter(A, B, C), A) - 2 * direction(A, excenter(B, A, C)) mod 360
By perpendicular_direction_conditions_v0_r on C, excenter(A, B, C), G, D we get 180 == 2 * direction(C, excenter(A, B, C)) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on B, excenter(A, B, C), G, excenter(B, A, C) we get 180 == 2 * direction(B, excenter(A, B, C)) - 2 * direction(G, excenter(B, A, C)) mod 360
By perpendicular_direction_conditions_v0_r on G, excenter(B, A, C), B, excenter(A, B, C) we get 180 == 2 * direction(G, excenter(B, A, C)) - 2 * direction(B, excenter(A, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, A, C), excenter(A, B, C), G, C we get 180 == 2 * direction(excenter(B, A, C), excenter(A, B, C)) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on F, A, G, excenter(A, B, C) we get 180 == 2 * direction(F, A) - 2 * direction(G, excenter(A, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on C, excenter(A, B, C), C, D we get 180 == 2 * direction(C, excenter(A, B, C)) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on F, A, A, excenter(A, B, C) we get 180 == 2 * direction(F, A) - 2 * direction(A, excenter(A, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on excenter(A, B, C), B, G, excenter(B, A, C) we get 180 == 2 * direction(excenter(A, B, C), B) - 2 * direction(G, excenter(B, A, C)) mod 360
By perpendicular_direction_conditions_v0_r on F, A, excenter(A, B, C), A we get 180 == 2 * direction(F, A) - 2 * direction(excenter(A, B, C), A) mod 360
By perpendicular_direction_conditions_v0_r on F, D, excenter(A, B, C), A we get 180 == 2 * direction(F, D) - 2 * direction(excenter(A, B, C), A) mod 360
By perpendicular_direction_conditions_v0_r on B, G, excenter(A, B, C), D we get 180 == 2 * direction(B, G) - 2 * direction(excenter(A, B, C), D) mod 360
By perpendicular_direction_conditions_v0_r on D, A, excenter(A, B, C), G we get 180 == 2 * direction(D, A) - 2 * direction(excenter(A, B, C), G) mod 360
By perpendicular_direction_conditions_v0_r on G, excenter(A, B, C), A, F we get 180 == 2 * direction(G, excenter(A, B, C)) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on A, F, A, excenter(A, B, C) we get 180 == 2 * direction(A, F) - 2 * direction(A, excenter(A, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on B, excenter(A, B, C), B, excenter(B, A, C) we get 180 == 2 * direction(B, excenter(A, B, C)) - 2 * direction(B, excenter(B, A, C)) mod 360
By perpendicular_direction_conditions_v0_r on D, E, excenter(A, B, C), excenter(B, A, C) we get 180 == 2 * direction(D, E) - 2 * direction(excenter(A, B, C), excenter(B, A, C)) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, A, C), A, G, excenter(A, B, C) we get 180 == 2 * direction(excenter(B, A, C), A) - 2 * direction(G, excenter(A, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on C, G, excenter(B, A, C), excenter(A, B, C) we get 180 == 2 * direction(C, G) - 2 * direction(excenter(B, A, C), excenter(A, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, A, C), excenter(A, B, C), C, G we get 180 == 2 * direction(excenter(B, A, C), excenter(A, B, C)) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on B, excenter(B, A, C), excenter(A, B, C), D we get 180 == 2 * direction(B, excenter(B, A, C)) - 2 * direction(excenter(A, B, C), D) mod 360
By perpendicular_direction_conditions_v0_r on G, excenter(A, B, C), A, excenter(B, A, C) we get 180 == 2 * direction(G, excenter(A, B, C)) - 2 * direction(A, excenter(B, A, C)) mod 360
By perpendicular_direction_conditions_v0_r on D, C, excenter(B, A, C), excenter(A, B, C) we get 180 == 2 * direction(D, C) - 2 * direction(excenter(B, A, C), excenter(A, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on A, excenter(A, B, C), F, A we get 180 == 2 * direction(A, excenter(A, B, C)) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on G, excenter(A, B, C), D, A we get 180 == 2 * direction(G, excenter(A, B, C)) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, A, C), excenter(A, B, C), E, D we get 180 == 2 * direction(excenter(B, A, C), excenter(A, B, C)) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on excenter(A, B, C), G, A, D we get 180 == 2 * direction(excenter(A, B, C), G) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on excenter(A, B, C), G, D, F we get 180 == 2 * direction(excenter(A, B, C), G) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on excenter(A, B, C), D, B, G we get 180 == 2 * direction(excenter(A, B, C), D) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on excenter(A, B, C), G, F, D we get 180 == 2 * direction(excenter(A, B, C), G) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, A, C), A, A, excenter(A, B, C) we get 180 == 2 * direction(excenter(B, A, C), A) - 2 * direction(A, excenter(A, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on E, C, excenter(A, B, C), C we get 180 == 2 * direction(E, C) - 2 * direction(excenter(A, B, C), C) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, A, C), G, excenter(A, B, C), D we get 180 == 2 * direction(excenter(B, A, C), G) - 2 * direction(excenter(A, B, C), D) mod 360
By perpendicular_direction_conditions_v0_r on A, excenter(A, B, C), D, A we get 180 == 2 * direction(A, excenter(A, B, C)) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on F, D, excenter(A, B, C), G we get 180 == 2 * direction(F, D) - 2 * direction(excenter(A, B, C), G) mod 360
By perpendicular_direction_conditions_v0_r on C, G, C, excenter(A, B, C) we get 180 == 2 * direction(C, G) - 2 * direction(C, excenter(A, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on A, D, A, excenter(A, B, C) we get 180 == 2 * direction(A, D) - 2 * direction(A, excenter(A, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on C, D, excenter(A, B, C), excenter(B, A, C) we get 180 == 2 * direction(C, D) - 2 * direction(excenter(A, B, C), excenter(B, A, C)) mod 360
By perpendicular_direction_conditions_v0_r on excenter(A, B, C), excenter(B, A, C), E, D we get 180 == 2 * direction(excenter(A, B, C), excenter(B, A, C)) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, A, C), A, excenter(A, B, C), G we get 180 == 2 * direction(excenter(B, A, C), A) - 2 * direction(excenter(A, B, C), G) mod 360
By perpendicular_direction_conditions_v0_r on B, excenter(B, A, C), D, excenter(A, B, C) we get 180 == 2 * direction(B, excenter(B, A, C)) - 2 * direction(D, excenter(A, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on C, excenter(A, B, C), D, C we get 180 == 2 * direction(C, excenter(A, B, C)) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on D, A, G, excenter(A, B, C) we get 180 == 2 * direction(D, A) - 2 * direction(G, excenter(A, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on excenter(A, B, C), D, excenter(B, A, C), B we get 180 == 2 * direction(excenter(A, B, C), D) - 2 * direction(excenter(B, A, C), B) mod 360
By perpendicular_direction_conditions_v0_r on A, excenter(A, B, C), excenter(B, A, C), F we get 180 == 2 * direction(A, excenter(A, B, C)) - 2 * direction(excenter(B, A, C), F) mod 360
By perpendicular_direction_conditions_v0_r on D, excenter(A, B, C), B, excenter(B, A, C) we get 180 == 2 * direction(D, excenter(A, B, C)) - 2 * direction(B, excenter(B, A, C)) mod 360
By perpendicular_direction_conditions_v0_r on C, excenter(A, B, C), D, E we get 180 == 2 * direction(C, excenter(A, B, C)) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on A, excenter(A, B, C), excenter(B, A, C), A we get 180 == 2 * direction(A, excenter(A, B, C)) - 2 * direction(excenter(B, A, C), A) mod 360
By perpendicular_direction_conditions_v0_r on D, G, excenter(A, B, C), excenter(B, A, C) we get 180 == 2 * direction(D, G) - 2 * direction(excenter(A, B, C), excenter(B, A, C)) mod 360
By perpendicular_direction_conditions_v0_r on D, G, excenter(A, B, C), C we get 180 == 2 * direction(D, G) - 2 * direction(excenter(A, B, C), C) mod 360
By perpendicular_direction_conditions_v0_r on excenter(A, B, C), G, D, A we get 180 == 2 * direction(excenter(A, B, C), G) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on E, D, excenter(A, B, C), C we get 180 == 2 * direction(E, D) - 2 * direction(excenter(A, B, C), C) mod 360
By perpendicular_direction_conditions_v0_r on G, B, B, excenter(A, B, C) we get 180 == 2 * direction(G, B) - 2 * direction(B, excenter(A, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on C, D, excenter(A, B, C), C we get 180 == 2 * direction(C, D) - 2 * direction(excenter(A, B, C), C) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, A, C), A, excenter(A, B, C), A we get 180 == 2 * direction(excenter(B, A, C), A) - 2 * direction(excenter(A, B, C), A) mod 360
By perpendicular_direction_conditions_v0_r on E, C, excenter(A, B, C), excenter(B, A, C) we get 180 == 2 * direction(E, C) - 2 * direction(excenter(A, B, C), excenter(B, A, C)) mod 360
By perpendicular_direction_conditions_v0_r on excenter(A, B, C), excenter(B, A, C), C, E we get 180 == 2 * direction(excenter(A, B, C), excenter(B, A, C)) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, A, C), G, B, excenter(A, B, C) we get 180 == 2 * direction(excenter(B, A, C), G) - 2 * direction(B, excenter(A, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on excenter(A, B, C), C, C, E we get 180 == 2 * direction(excenter(A, B, C), C) - 2 * direction(C, E) mod 360
By divide_by_2_mod_180_v2 on A, G, D, D, B, C we get angle(A, G, D) == angle(D, B, C) + 180 mod 360
By perpendicular_direction_conditions_v0_r on D, excenter(A, B, C), B, G we get 180 == 2 * direction(D, excenter(A, B, C)) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on excenter(A, B, C), C, E, C we get 180 == 2 * direction(excenter(A, B, C), C) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on D, G, C, excenter(A, B, C) we get 180 == 2 * direction(D, G) - 2 * direction(C, excenter(A, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on B, excenter(A, B, C), excenter(B, A, C), B we get 180 == 2 * direction(B, excenter(A, B, C)) - 2 * direction(excenter(B, A, C), B) mod 360
By perpendicular_direction_conditions_v0_r on C, D, C, excenter(A, B, C) we get 180 == 2 * direction(C, D) - 2 * direction(C, excenter(A, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on excenter(A, B, C), excenter(B, A, C), C, D we get 180 == 2 * direction(excenter(A, B, C), excenter(B, A, C)) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on excenter(A, B, C), A, excenter(B, A, C), D we get 180 == 2 * direction(excenter(A, B, C), A) - 2 * direction(excenter(B, A, C), D) mod 360
By divide_by_2_mod_180_v0 on G, A, C, B, D, C we get angle(B, D, C) == angle(G, A, C) mod 360
By perpendicular_direction_conditions_v0_r on excenter(A, B, C), C, E, G we get 180 == 2 * direction(excenter(A, B, C), C) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, A, C), excenter(A, B, C), D, C we get 180 == 2 * direction(excenter(B, A, C), excenter(A, B, C)) - 2 * direction(D, C) mod 360
By divide_by_2_mod_180_v0 on G, A, C, B, D, E we get angle(B, D, E) == angle(G, A, C) mod 360
By perpendicular_direction_conditions_v0_r on E, C, C, excenter(A, B, C) we get 180 == 2 * direction(E, C) - 2 * direction(C, excenter(A, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on excenter(A, B, C), C, C, D we get 180 == 2 * direction(excenter(A, B, C), C) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on excenter(A, B, C), A, F, A we get 180 == 2 * direction(excenter(A, B, C), A) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on excenter(A, B, C), B, excenter(B, A, C), G we get 180 == 2 * direction(excenter(A, B, C), B) - 2 * direction(excenter(B, A, C), G) mod 360
By perpendicular_direction_conditions_v0_r on A, excenter(A, B, C), D, excenter(B, A, C) we get 180 == 2 * direction(A, excenter(A, B, C)) - 2 * direction(D, excenter(B, A, C)) mod 360
By perpendicular_direction_conditions_v0_r on F, excenter(B, A, C), excenter(A, B, C), A we get 180 == 2 * direction(F, excenter(B, A, C)) - 2 * direction(excenter(A, B, C), A) mod 360
By perpendicular_direction_conditions_v0_r on G, B, excenter(A, B, C), D we get 180 == 2 * direction(G, B) - 2 * direction(excenter(A, B, C), D) mod 360
By perpendicular_direction_conditions_v0_r on excenter(A, B, C), excenter(B, A, C), D, E we get 180 == 2 * direction(excenter(A, B, C), excenter(B, A, C)) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on E, G, excenter(B, A, C), excenter(A, B, C) we get 180 == 2 * direction(E, G) - 2 * direction(excenter(B, A, C), excenter(A, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on B, G, D, excenter(A, B, C) we get 180 == 2 * direction(B, G) - 2 * direction(D, excenter(A, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on G, excenter(A, B, C), excenter(B, A, C), A we get 180 == 2 * direction(G, excenter(A, B, C)) - 2 * direction(excenter(B, A, C), A) mod 360
By perpendicular_direction_conditions_v0_r on D, A, excenter(A, B, C), A we get 180 == 2 * direction(D, A) - 2 * direction(excenter(A, B, C), A) mod 360
By perpendicular_direction_conditions_v0_r on F, A, excenter(A, B, C), G we get 180 == 2 * direction(F, A) - 2 * direction(excenter(A, B, C), G) mod 360
By perpendicular_direction_conditions_v0_r on D, C, C, excenter(A, B, C) we get 180 == 2 * direction(D, C) - 2 * direction(C, excenter(A, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on D, E, C, excenter(A, B, C) we get 180 == 2 * direction(D, E) - 2 * direction(C, excenter(A, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on excenter(A, B, C), C, G, E we get 180 == 2 * direction(excenter(A, B, C), C) - 2 * direction(G, E) mod 360
By perpendicular_direction_conditions_v0_r on excenter(A, B, C), D, G, B we get 180 == 2 * direction(excenter(A, B, C), D) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on excenter(A, B, C), excenter(B, A, C), E, G we get 180 == 2 * direction(excenter(A, B, C), excenter(B, A, C)) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on excenter(A, B, C), G, D, excenter(B, A, C) we get 180 == 2 * direction(excenter(A, B, C), G) - 2 * direction(D, excenter(B, A, C)) mod 360
By perpendicular_direction_conditions_v0_r on excenter(A, B, C), C, E, D we get 180 == 2 * direction(excenter(A, B, C), C) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on excenter(A, B, C), A, D, A we get 180 == 2 * direction(excenter(A, B, C), A) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on excenter(A, B, C), B, B, G we get 180 == 2 * direction(excenter(A, B, C), B) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on G, excenter(B, A, C), excenter(A, B, C), D we get 180 == 2 * direction(G, excenter(B, A, C)) - 2 * direction(excenter(A, B, C), D) mod 360
By perpendicular_direction_conditions_v0_r on F, D, A, excenter(A, B, C) we get 180 == 2 * direction(F, D) - 2 * direction(A, excenter(A, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on excenter(A, B, C), G, excenter(B, A, C), D we get 180 == 2 * direction(excenter(A, B, C), G) - 2 * direction(excenter(B, A, C), D) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, A, C), excenter(A, B, C), E, C we get 180 == 2 * direction(excenter(B, A, C), excenter(A, B, C)) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on excenter(A, B, C), G, A, excenter(B, A, C) we get 180 == 2 * direction(excenter(A, B, C), G) - 2 * direction(A, excenter(B, A, C)) mod 360
By perpendicular_direction_conditions_v0_r on G, excenter(A, B, C), D, excenter(B, A, C) we get 180 == 2 * direction(G, excenter(A, B, C)) - 2 * direction(D, excenter(B, A, C)) mod 360
By perpendicular_direction_conditions_v0_r on E, D, excenter(A, B, C), excenter(B, A, C) we get 180 == 2 * direction(E, D) - 2 * direction(excenter(A, B, C), excenter(B, A, C)) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, A, C), G, excenter(A, B, C), B we get 180 == 2 * direction(excenter(B, A, C), G) - 2 * direction(excenter(A, B, C), B) mod 360
By perpendicular_direction_conditions_v0_r on E, G, excenter(A, B, C), C we get 180 == 2 * direction(E, G) - 2 * direction(excenter(A, B, C), C) mod 360
By perpendicular_direction_conditions_v0_r on G, excenter(A, B, C), D, F we get 180 == 2 * direction(G, excenter(A, B, C)) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, A, C), D, G, excenter(A, B, C) we get 180 == 2 * direction(excenter(B, A, C), D) - 2 * direction(G, excenter(A, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on C, D, excenter(B, A, C), excenter(A, B, C) we get 180 == 2 * direction(C, D) - 2 * direction(excenter(B, A, C), excenter(A, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on G, D, excenter(A, B, C), C we get 180 == 2 * direction(G, D) - 2 * direction(excenter(A, B, C), C) mod 360
By perpendicular_direction_conditions_v0_r on G, C, excenter(A, B, C), C we get 180 == 2 * direction(G, C) - 2 * direction(excenter(A, B, C), C) mod 360
By perpendicular_direction_conditions_v0_r on B, excenter(B, A, C), B, excenter(A, B, C) we get 180 == 2 * direction(B, excenter(B, A, C)) - 2 * direction(B, excenter(A, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on excenter(A, B, C), A, F, D we get 180 == 2 * direction(excenter(A, B, C), A) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on excenter(A, B, C), A, excenter(B, A, C), A we get 180 == 2 * direction(excenter(A, B, C), A) - 2 * direction(excenter(B, A, C), A) mod 360
By divide_by_2_mod_180_v1 on G, D, B, G, A, B we get angle(G, A, B) == angle(G, D, B) mod 360
By perpendicular_direction_conditions_v0_r on G, D, excenter(B, A, C), excenter(A, B, C) we get 180 == 2 * direction(G, D) - 2 * direction(excenter(B, A, C), excenter(A, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on B, excenter(A, B, C), excenter(B, A, C), G we get 180 == 2 * direction(B, excenter(A, B, C)) - 2 * direction(excenter(B, A, C), G) mod 360
By perpendicular_direction_conditions_v0_r on D, excenter(B, A, C), G, excenter(A, B, C) we get 180 == 2 * direction(D, excenter(B, A, C)) - 2 * direction(G, excenter(A, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on A, excenter(A, B, C), excenter(B, A, C), D we get 180 == 2 * direction(A, excenter(A, B, C)) - 2 * direction(excenter(B, A, C), D) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, A, C), D, excenter(A, B, C), A we get 180 == 2 * direction(excenter(B, A, C), D) - 2 * direction(excenter(A, B, C), A) mod 360
By perpendicular_direction_conditions_v0_r on A, F, G, excenter(A, B, C) we get 180 == 2 * direction(A, F) - 2 * direction(G, excenter(A, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, A, C), excenter(A, B, C), C, E we get 180 == 2 * direction(excenter(B, A, C), excenter(A, B, C)) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on E, D, C, excenter(A, B, C) we get 180 == 2 * direction(E, D) - 2 * direction(C, excenter(A, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on C, E, excenter(A, B, C), C we get 180 == 2 * direction(C, E) - 2 * direction(excenter(A, B, C), C) mod 360
By perpendicular_direction_conditions_v0_r on excenter(A, B, C), A, A, F we get 180 == 2 * direction(excenter(A, B, C), A) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on excenter(A, B, C), C, D, E we get 180 == 2 * direction(excenter(A, B, C), C) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on excenter(A, B, C), A, F, excenter(B, A, C) we get 180 == 2 * direction(excenter(A, B, C), A) - 2 * direction(F, excenter(B, A, C)) mod 360
By perpendicular_direction_conditions_v0_r on D, F, A, excenter(A, B, C) we get 180 == 2 * direction(D, F) - 2 * direction(A, excenter(A, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on G, excenter(A, B, C), F, A we get 180 == 2 * direction(G, excenter(A, B, C)) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on A, excenter(B, A, C), excenter(A, B, C), A we get 180 == 2 * direction(A, excenter(B, A, C)) - 2 * direction(excenter(A, B, C), A) mod 360
By perpendicular_direction_conditions_v0_r on G, C, C, excenter(A, B, C) we get 180 == 2 * direction(G, C) - 2 * direction(C, excenter(A, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on excenter(A, B, C), C, D, G we get 180 == 2 * direction(excenter(A, B, C), C) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on D, F, excenter(A, B, C), A we get 180 == 2 * direction(D, F) - 2 * direction(excenter(A, B, C), A) mod 360
By perpendicular_direction_conditions_v0_r on G, excenter(A, B, C), F, D we get 180 == 2 * direction(G, excenter(A, B, C)) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on C, excenter(A, B, C), G, C we get 180 == 2 * direction(C, excenter(A, B, C)) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on excenter(A, B, C), G, excenter(B, A, C), F we get 180 == 2 * direction(excenter(A, B, C), G) - 2 * direction(excenter(B, A, C), F) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, A, C), excenter(A, B, C), G, E we get 180 == 2 * direction(excenter(B, A, C), excenter(A, B, C)) - 2 * direction(G, E) mod 360
By perpendicular_direction_conditions_v0_r on A, F, excenter(A, B, C), A we get 180 == 2 * direction(A, F) - 2 * direction(excenter(A, B, C), A) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, A, C), excenter(A, B, C), D, G we get 180 == 2 * direction(excenter(B, A, C), excenter(A, B, C)) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on excenter(A, B, C), excenter(B, A, C), C, G we get 180 == 2 * direction(excenter(A, B, C), excenter(B, A, C)) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on A, excenter(B, A, C), A, excenter(A, B, C) we get 180 == 2 * direction(A, excenter(B, A, C)) - 2 * direction(A, excenter(A, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on A, excenter(A, B, C), A, D we get 180 == 2 * direction(A, excenter(A, B, C)) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on excenter(A, B, C), D, B, excenter(B, A, C) we get 180 == 2 * direction(excenter(A, B, C), D) - 2 * direction(B, excenter(B, A, C)) mod 360
By perpendicular_direction_conditions_v0_r on excenter(A, B, C), B, excenter(B, A, C), B we get 180 == 2 * direction(excenter(A, B, C), B) - 2 * direction(excenter(B, A, C), B) mod 360
By perpendicular_direction_conditions_v0_r on A, excenter(A, B, C), F, D we get 180 == 2 * direction(A, excenter(A, B, C)) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, A, C), B, B, excenter(A, B, C) we get 180 == 2 * direction(excenter(B, A, C), B) - 2 * direction(B, excenter(A, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on G, B, excenter(A, B, C), B we get 180 == 2 * direction(G, B) - 2 * direction(excenter(A, B, C), B) mod 360
By perpendicular_direction_conditions_v0_r on B, G, B, excenter(A, B, C) we get 180 == 2 * direction(B, G) - 2 * direction(B, excenter(A, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on F, excenter(B, A, C), A, excenter(A, B, C) we get 180 == 2 * direction(F, excenter(B, A, C)) - 2 * direction(A, excenter(A, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on F, D, G, excenter(A, B, C) we get 180 == 2 * direction(F, D) - 2 * direction(G, excenter(A, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on C, G, excenter(A, B, C), C we get 180 == 2 * direction(C, G) - 2 * direction(excenter(A, B, C), C) mod 360
By perpendicular_direction_conditions_v0_r on A, excenter(A, B, C), D, F we get 180 == 2 * direction(A, excenter(A, B, C)) - 2 * direction(D, F) mod 360
By divide_by_2_mod_180_v1 on G, A, B, E, D, B we get angle(E, D, B) == angle(G, A, B) mod 360
By perpendicular_direction_conditions_v0_r on G, E, excenter(A, B, C), excenter(B, A, C) we get 180 == 2 * direction(G, E) - 2 * direction(excenter(A, B, C), excenter(B, A, C)) mod 360
By perpendicular_direction_conditions_v0_r on D, F, excenter(A, B, C), G we get 180 == 2 * direction(D, F) - 2 * direction(excenter(A, B, C), G) mod 360
By perpendicular_direction_conditions_v0_r on G, C, excenter(A, B, C), excenter(B, A, C) we get 180 == 2 * direction(G, C) - 2 * direction(excenter(A, B, C), excenter(B, A, C)) mod 360
By perpendicular_direction_conditions_v0_r on C, excenter(A, B, C), E, G we get 180 == 2 * direction(C, excenter(A, B, C)) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on D, excenter(A, B, C), G, B we get 180 == 2 * direction(D, excenter(A, B, C)) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on excenter(A, B, C), excenter(B, A, C), G, D we get 180 == 2 * direction(excenter(A, B, C), excenter(B, A, C)) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on A, F, excenter(A, B, C), G we get 180 == 2 * direction(A, F) - 2 * direction(excenter(A, B, C), G) mod 360
By perpendicular_direction_conditions_v0_r on C, excenter(A, B, C), D, G we get 180 == 2 * direction(C, excenter(A, B, C)) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on G, excenter(A, B, C), A, D we get 180 == 2 * direction(G, excenter(A, B, C)) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on excenter(A, B, C), G, A, F we get 180 == 2 * direction(excenter(A, B, C), G) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on F, excenter(B, A, C), excenter(A, B, C), G we get 180 == 2 * direction(F, excenter(B, A, C)) - 2 * direction(excenter(A, B, C), G) mod 360
By perpendicular_direction_conditions_v0_r on G, excenter(A, B, C), excenter(B, A, C), D we get 180 == 2 * direction(G, excenter(A, B, C)) - 2 * direction(excenter(B, A, C), D) mod 360
By perpendicular_direction_conditions_v0_r on D, A, A, excenter(A, B, C) we get 180 == 2 * direction(D, A) - 2 * direction(A, excenter(A, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on D, E, excenter(B, A, C), excenter(A, B, C) we get 180 == 2 * direction(D, E) - 2 * direction(excenter(B, A, C), excenter(A, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on A, excenter(A, B, C), A, excenter(B, A, C) we get 180 == 2 * direction(A, excenter(A, B, C)) - 2 * direction(A, excenter(B, A, C)) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, A, C), B, excenter(A, B, C), B we get 180 == 2 * direction(excenter(B, A, C), B) - 2 * direction(excenter(A, B, C), B) mod 360
By perpendicular_direction_conditions_v0_r on F, excenter(B, A, C), G, excenter(A, B, C) we get 180 == 2 * direction(F, excenter(B, A, C)) - 2 * direction(G, excenter(A, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on C, excenter(A, B, C), C, E we get 180 == 2 * direction(C, excenter(A, B, C)) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on excenter(B, A, C), F, excenter(A, B, C), G we get 180 == 2 * direction(excenter(B, A, C), F) - 2 * direction(excenter(A, B, C), G) mod 360
By perpendicular_direction_conditions_v0_r on G, C, excenter(B, A, C), excenter(A, B, C) we get 180 == 2 * direction(G, C) - 2 * direction(excenter(B, A, C), excenter(A, B, C)) mod 360
By perpendicular_direction_conditions_v0_r on excenter(A, B, C), C, C, G we get 180 == 2 * direction(excenter(A, B, C), C) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on excenter(A, B, C), C, G, C we get 180 == 2 * direction(excenter(A, B, C), C) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on excenter(A, B, C), G, F, A we get 180 == 2 * direction(excenter(A, B, C), G) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on excenter(A, B, C), B, B, excenter(B, A, C) we get 180 == 2 * direction(excenter(A, B, C), B) - 2 * direction(B, excenter(B, A, C)) mod 360
By perpendicular_direction_conditions_v0_r on excenter(A, B, C), A, A, D we get 180 == 2 * direction(excenter(A, B, C), A) - 2 * direction(A, D) mod 360
By divide_by_2_mod_180_v0 on B, D, G, B, A, G we get angle(B, A, G) == angle(B, D, G) mod 360
By divide_by_2_mod_180_v0 on A, G, D, A, B, D we get angle(A, B, D) == angle(A, G, D) mod 360
By divide_by_2_mod_180_v0 on B, D, G, G, A, C we get angle(B, D, G) == angle(G, A, C) mod 360
By divide_by_2_mod_180_v1 on C, A, G, C, D, B we get angle(C, A, G) == angle(C, D, B) mod 360
By divide_by_2_mod_180_v1 on E, D, B, C, A, G we get angle(C, A, G) == angle(E, D, B) mod 360
By divide_by_2_mod_180_v0 on B, A, G, B, D, E we get angle(B, A, G) == angle(B, D, E) mod 360
By divide_by_2_mod_180_v1 on C, D, B, G, A, B we get angle(C, D, B) == angle(G, A, B) mod 360
By reverse_direction on E, G we get 180 == direction(E, G) - direction(G, E) mod 360
By divide_by_2_mod_180_v0 on C, B, D, C, G, A we get angle(C, B, D) == angle(C, G, A) mod 360
By divide_by_2_mod_180_v0 on B, D, C, B, A, G we get angle(B, A, G) == angle(B, D, C) mod 360
By reverse_direction on D, excenter(B, A, C) we get 180 == direction(D, excenter(B, A, C)) - direction(excenter(B, A, C), D) mod 360
By divide_by_2_mod_180_v3 on A, G, C, A, B, D we get angle(A, G, C) == angle(A, B, D) + 180 mod 360
By divide_by_2_mod_180_v1 on C, A, G, G, D, B we get angle(C, A, G) == angle(G, D, B) mod 360
By divide_by_2_mod_180_v3 on D, B, C, A, G, E we get angle(D, B, C) == angle(A, G, E) + 180 mod 360
By divide_by_2_mod_180_v3 on E, G, A, C, B, D we get angle(E, G, A) == angle(C, B, D) + 180 mod 360
By reverse_direction on G, excenter(B, A, C) we get 180 == direction(G, excenter(B, A, C)) - direction(excenter(B, A, C), G) mod 360
By divide_by_2_mod_180_v3 on D, B, C, A, G, D we get angle(D, B, C) == angle(A, G, D) + 180 mod 360
By divide_by_2_mod_180_v0 on A, B, D, A, G, E we get angle(A, B, D) == angle(A, G, E) mod 360
By reverse_direction on F, excenter(B, A, C) we get 180 == direction(F, excenter(B, A, C)) - direction(excenter(B, A, C), F) mod 360
By divide_by_2_mod_180_v1 on E, G, A, D, B, A we get angle(D, B, A) == angle(E, G, A) mod 360
By divide_by_2_mod_180_v3 on D, G, A, C, B, D we get angle(D, G, A) == angle(C, B, D) + 180 mod 360
By divide_by_2_mod_180_v3 on D, B, A, C, G, A we get angle(D, B, A) == angle(C, G, A) + 180 mod 360
By divide_by_2_mod_180_v2 on C, B, D, D, G, A we get angle(C, B, D) == angle(D, G, A) + 180 mod 360
By divide_by_2_mod_180_v2 on C, G, A, D, B, A we get angle(C, G, A) == angle(D, B, A) + 180 mod 360
By between_imply_segment_sum on C, G, E we get distance(C, E) == distance(C, G) + distance(E, G)
By divide_by_2_mod_180_v2 on A, G, E, D, B, C we get angle(A, G, E) == angle(D, B, C) + 180 mod 360
By divide_by_2_mod_180_v1 on D, G, A, D, B, A we get angle(D, B, A) == angle(D, G, A) mod 360
By reverse_direction on excenter(B, A, C), F we get 180 == direction(excenter(B, A, C), F) - direction(F, excenter(B, A, C)) mod 360
By isosceles_triangle_from_angles on F, D, C we get isosceles_triangle(F, C, D)
By reverse_direction on A, G we get 180 == direction(A, G) - direction(G, A) mod 360
By anti_similar_triangle_basic_properties on C, D, F, D, C, F we get angle(C, D, F) == 0 - angle(D, C, F) mod 360, angle(D, F, C) == 0 - angle(C, F, D) mod 360, angle(F, C, D) == 0 - angle(F, D, C) mod 360, log(distance(C, D)) + log(distance(C, F)) == log(distance(C, D)) + log(distance(D, F)), log(distance(C, F)) + log(distance(C, F)) == log(distance(D, F)) + log(distance(D, F)), log(distance(C, F)) + log(distance(C, D)) == log(distance(D, F)) + log(distance(C, D))
By isosceles_triangle_from_angles on F, C, D we get isosceles_triangle(F, C, D)
By reverse_direction on excenter(B, A, C), C we get 180 == direction(excenter(B, A, C), C) - direction(C, excenter(B, A, C)) mod 360
By between_implies_angles on C, G, E we get 180 == angle(C, G, E) mod 360, 0 == angle(G, E, C) mod 360, 0 == angle(E, C, G) mod 360
By divide_by_2_mod_180_v1 on D, B, C, A, G, C we get angle(A, G, C) == angle(D, B, C) mod 360
By divide_by_2_mod_180_v2 on C, B, D, E, G, A we get angle(C, B, D) == angle(E, G, A) + 180 mod 360
By between_imply_segment_sum on D, A, F we get distance(D, F) == distance(A, D) + distance(A, F)
By reverse_direction on excenter(B, A, C), B we get 180 == direction(excenter(B, A, C), B) - direction(B, excenter(B, A, C)) mod 360
By reverse_direction on excenter(B, A, C), D we get 180 == direction(excenter(B, A, C), D) - direction(D, excenter(B, A, C)) mod 360
By asa_anti_congruence on D, C, F, C, D, F we get anti_congruent_triangles(C, D, F, D, C, F)
By reverse_direction on excenter(B, A, C), G we get 180 == direction(excenter(B, A, C), G) - direction(G, excenter(B, A, C)) mod 360
By reverse_direction on D, B we get 180 == direction(D, B) - direction(B, D) mod 360
By between_implies_angles on D, E, G we get 180 == angle(D, E, G) mod 360, 0 == angle(E, G, D) mod 360, 0 == angle(G, D, E) mod 360
By reverse_direction on B, excenter(B, A, C) we get 180 == direction(B, excenter(B, A, C)) - direction(excenter(B, A, C), B) mod 360
By anti_congruence_from_anti_similar_triangles on D, C, F, C, D, F we get anti_congruent_triangles(C, D, F, D, C, F)
By between_imply_segment_sum on C, G, D we get distance(C, D) == distance(C, G) + distance(D, G)
By between_implies_angles on G, E, D we get 180 == angle(G, E, D) mod 360, 0 == angle(E, D, G) mod 360, 0 == angle(D, G, E) mod 360
By reverse_direction on G, E we get 180 == direction(G, E) - direction(E, G) mod 360
By divide_by_2_mod_180_v2 on A, B, D, A, G, C we get angle(A, B, D) == angle(A, G, C) + 180 mod 360
By between_imply_segment_sum on D, E, G we get distance(D, G) == distance(D, E) + distance(E, G)
By anti_congruence_from_anti_similar_triangles on C, D, F, D, C, F we get anti_congruent_triangles(C, D, F, D, C, F)
By reverse_direction on A, excenter(B, A, C) we get 180 == direction(A, excenter(B, A, C)) - direction(excenter(B, A, C), A) mod 360
By between_implies_angles on E, G, C we get 180 == angle(E, G, C) mod 360, 0 == angle(G, C, E) mod 360, 0 == angle(C, E, G) mod 360
By asa_anti_congruence on C, D, F, D, C, F we get anti_congruent_triangles(C, D, F, D, C, F)
By reverse_direction on G, A we get 180 == direction(G, A) - direction(A, G) mod 360
By reverse_direction on excenter(B, A, C), A we get 180 == direction(excenter(B, A, C), A) - direction(A, excenter(B, A, C)) mod 360
By reverse_direction on B, D we get 180 == direction(B, D) - direction(D, B) mod 360
By reverse_direction on C, excenter(B, A, C) we get 180 == direction(C, excenter(B, A, C)) - direction(excenter(B, A, C), C) mod 360
By perpendicular_angle_conditions_v0 on excenter(B, A, C), A, excenter(A, B, C) we get angle(excenter(B, A, C), A, excenter(A, B, C)) == orientation(A, excenter(A, B, C), excenter(B, A, C)) mod 360
By perpendicular_angle_conditions_v0 on F, A, excenter(A, B, C) we get angle(F, A, excenter(A, B, C)) == orientation(A, excenter(A, B, C), F) mod 360
By internal_angle_bisector_definition_v0_r on D, F, D, excenter(B, A, C) we get Line(F, excenter(B, A, C)) == internal_angle_bisector(D, excenter(B, A, C), D)
By external_angle_bisector_definition_v0_r on D, G, D, B we get Line(B, G) == external_angle_bisector(D, B, D)
By external_angle_bisector_definition_v0_r on D, excenter(B, A, C), G, C we get external_angle_bisector(D, C, G) == Line(C, excenter(B, A, C))
By external_angle_bisector_definition_v0_r on E, D, C, G we get Line(D, G) == external_angle_bisector(C, G, E)
By external_angle_bisector_definition_v0_r on E, excenter(B, A, C), D, C we get external_angle_bisector(D, C, E) == Line(C, excenter(B, A, C))
By perpendicular_angle_conditions_v0 on G, C, excenter(A, B, C) we get angle(G, C, excenter(A, B, C)) == orientation(C, excenter(A, B, C), G) mod 360
By external_angle_bisector_definition_v0_r on D, E, C, G we get Line(E, G) == external_angle_bisector(C, G, D)
By internal_angle_bisector_definition_v0_r on excenter(B, A, C), G, excenter(B, A, C), B we get Line(B, G) == internal_angle_bisector(excenter(B, A, C), B, excenter(B, A, C))
By external_angle_bisector_definition_v0_r on G, D, G, A we get Line(A, D) == external_angle_bisector(G, A, G)
By external_angle_bisector_definition_v0_r on D, excenter(B, A, C), D, C we get external_angle_bisector(D, C, D) == Line(C, excenter(B, A, C))
By internal_angle_bisector_definition_v0 on C, excenter(A, B, C), B, A we get angle(C, A, excenter(A, B, C)) == angle(excenter(A, B, C), A, B) mod 360
By external_angle_bisector_definition_v0_r on excenter(B, A, C), D, excenter(B, A, C), C we get Line(C, D) == external_angle_bisector(excenter(B, A, C), C, excenter(B, A, C))
By internal_angle_bisector_definition_v0_r on F, excenter(B, A, C), F, D we get internal_angle_bisector(F, D, F) == Line(D, excenter(B, A, C))
By perpendicular_angle_conditions_v0 on excenter(A, B, C), C, D we get angle(excenter(A, B, C), C, D) == orientation(C, D, excenter(A, B, C)) mod 360
By external_angle_bisector_definition_v0_r on E, excenter(B, A, C), E, C we get external_angle_bisector(E, C, E) == Line(C, excenter(B, A, C))
By external_angle_bisector_definition_v0_r on G, excenter(B, A, C), E, C we get external_angle_bisector(E, C, G) == Line(C, excenter(B, A, C))
By external_angle_bisector_definition_v0_r on excenter(B, A, C), D, excenter(B, A, C), B we get Line(B, D) == external_angle_bisector(excenter(B, A, C), B, excenter(B, A, C))
By external_angle_bisector_definition_v0_r on D, G, D, A we get Line(A, G) == external_angle_bisector(D, A, D)
By internal_angle_bisector_definition_v0_r on B, excenter(B, A, C), B, G we get internal_angle_bisector(B, G, B) == Line(G, excenter(B, A, C))
By external_angle_bisector_definition_v0_r on F, G, F, A we get Line(A, G) == external_angle_bisector(F, A, F)
By internal_angle_bisector_definition_v0_r on G, E, D, C we get Line(C, E) == internal_angle_bisector(D, C, G)
By perpendicular_angle_conditions_v0 on excenter(B, A, C), B, excenter(A, B, C) we get angle(excenter(B, A, C), B, excenter(A, B, C)) == orientation(B, excenter(A, B, C), excenter(B, A, C)) mod 360
By internal_angle_bisector_definition_v0_r on G, D, E, C we get Line(C, D) == internal_angle_bisector(E, C, G)
By internal_angle_bisector_definition_v0_r on E, G, C, D we get Line(D, G) == internal_angle_bisector(C, D, E)
By external_angle_bisector_definition_v0_r on G, D, G, B we get Line(B, D) == external_angle_bisector(G, B, G)
By collinear_definition on excenter(B, A, C), C, excenter(A, B, C) we get C in Line(excenter(A, B, C), excenter(B, A, C)), excenter(A, B, C) in Line(C, excenter(B, A, C)), Line(C, excenter(B, A, C)) == Line(excenter(A, B, C), excenter(B, A, C)), 0 == 2 * angle(C, excenter(B, A, C), excenter(A, B, C)) mod 360
By collinear_definition on G, A, excenter(A, B, C) we get A in Line(G, excenter(A, B, C)), excenter(A, B, C) in Line(A, G), Line(A, G) == Line(G, excenter(A, B, C)), 0 == 2 * angle(A, G, excenter(A, B, C)) mod 360
By internal_angle_bisector_definition_v0_r on excenter(B, A, C), A, excenter(B, A, C), D we get Line(A, D) == internal_angle_bisector(excenter(B, A, C), D, excenter(B, A, C))
By external_angle_bisector_definition_v0_r on excenter(B, A, C), E, excenter(B, A, C), C we get Line(C, E) == external_angle_bisector(excenter(B, A, C), C, excenter(B, A, C))
By external_angle_bisector_definition_v0_r on F, excenter(B, A, C), D, A we get external_angle_bisector(D, A, F) == Line(A, excenter(B, A, C))
By perpendicular_angle_conditions_v0 on excenter(A, B, C), B, G we get angle(excenter(A, B, C), B, G) == orientation(B, G, excenter(A, B, C)) mod 360
By external_angle_bisector_definition_v0_r on excenter(B, A, C), G, excenter(B, A, C), A we get Line(A, G) == external_angle_bisector(excenter(B, A, C), A, excenter(B, A, C))
By external_angle_bisector_definition_v0_r on G, excenter(B, A, C), G, C we get external_angle_bisector(G, C, G) == Line(C, excenter(B, A, C))
By internal_angle_bisector_definition_v0_r on C, E, C, G we get Line(E, G) == internal_angle_bisector(C, G, C)
By external_angle_bisector_definition_v0_r on D, G, C, E we get Line(E, G) == external_angle_bisector(C, E, D)
By internal_angle_bisector_definition_v0_r on G, E, C, D we get Line(D, E) == internal_angle_bisector(C, D, G)
By internal_angle_bisector_definition_v0_r on D, G, F, A we get Line(A, G) == internal_angle_bisector(D, A, F)
By external_angle_bisector_definition_v0 on C, excenter(A, B, C), A, B we get 180 == angle(C, B, excenter(A, B, C)) + angle(A, B, excenter(A, B, C)) mod 360
By internal_angle_bisector_definition_v0_r on excenter(B, A, C), D, excenter(B, A, C), F we get Line(D, F) == internal_angle_bisector(excenter(B, A, C), F, excenter(B, A, C))
By collinear_definition on excenter(B, A, C), excenter(A, B, C), C we get excenter(A, B, C) in Line(C, excenter(B, A, C)), C in Line(excenter(A, B, C), excenter(B, A, C)), Line(C, excenter(B, A, C)) == Line(excenter(A, B, C), excenter(B, A, C)), 0 == 2 * angle(excenter(A, B, C), excenter(B, A, C), C) mod 360
By internal_angle_bisector_definition_v0_r on excenter(B, A, C), D, excenter(B, A, C), A we get Line(A, D) == internal_angle_bisector(excenter(B, A, C), A, excenter(B, A, C))
By perpendicular_angle_conditions_v0 on excenter(A, B, C), C, G we get angle(excenter(A, B, C), C, G) == orientation(C, G, excenter(A, B, C)) mod 360
By external_angle_bisector_definition_v0 on A, excenter(A, B, C), B, C we get 180 == angle(A, C, excenter(A, B, C)) + angle(B, C, excenter(A, B, C)) mod 360
By external_angle_bisector_definition_v0_r on D, excenter(B, A, C), D, B we get external_angle_bisector(D, B, D) == Line(B, excenter(B, A, C))
By internal_angle_bisector_definition_v0_r on D, C, E, G we get Line(C, G) == internal_angle_bisector(D, G, E)
By external_angle_bisector_definition_v0_r on G, F, G, A we get Line(A, F) == external_angle_bisector(G, A, G)
By internal_angle_bisector_definition_v0_r on A, excenter(B, A, C), A, D we get internal_angle_bisector(A, D, A) == Line(D, excenter(B, A, C))
By internal_angle_bisector_definition_v0_r on G, excenter(B, A, C), G, B we get internal_angle_bisector(G, B, G) == Line(B, excenter(B, A, C))
By collinear_definition on B, D, excenter(A, B, C) we get D in Line(B, excenter(A, B, C)), excenter(A, B, C) in Line(B, D), Line(B, D) == Line(B, excenter(A, B, C)), 0 == 2 * angle(D, B, excenter(A, B, C)) mod 360
By collinear_definition on A, G, excenter(A, B, C) we get G in Line(A, excenter(A, B, C)), excenter(A, B, C) in Line(A, G), Line(A, G) == Line(A, excenter(A, B, C)), 0 == 2 * angle(G, A, excenter(A, B, C)) mod 360
By perpendicular_angle_conditions_v0 on G, B, excenter(A, B, C) we get angle(G, B, excenter(A, B, C)) == orientation(B, excenter(A, B, C), G) mod 360
By internal_angle_bisector_definition_v0_r on G, D, G, E we get Line(D, E) == internal_angle_bisector(G, E, G)
By perpendicular_angle_conditions_v0 on excenter(A, B, C), C, E we get angle(excenter(A, B, C), C, E) == orientation(C, E, excenter(A, B, C)) mod 360
By internal_angle_bisector_definition_v0_r on excenter(B, A, C), A, excenter(B, A, C), F we get Line(A, F) == internal_angle_bisector(excenter(B, A, C), F, excenter(B, A, C))
By internal_angle_bisector_definition_v0_r on A, D, A, excenter(B, A, C) we get Line(D, excenter(B, A, C)) == internal_angle_bisector(A, excenter(B, A, C), A)
By collinear_definition on C, excenter(A, B, C), excenter(B, A, C) we get excenter(A, B, C) in Line(C, excenter(B, A, C)), excenter(B, A, C) in Line(C, excenter(A, B, C)), Line(C, excenter(A, B, C)) == Line(C, excenter(B, A, C)), 0 == 2 * angle(excenter(A, B, C), C, excenter(B, A, C)) mod 360
By external_angle_bisector_definition_v0_r on G, excenter(B, A, C), G, A we get external_angle_bisector(G, A, G) == Line(A, excenter(B, A, C))
By perpendicular_angle_conditions_v0 on D, A, excenter(A, B, C) we get angle(D, A, excenter(A, B, C)) == orientation(A, excenter(A, B, C), D) mod 360
By collinear_definition on B, excenter(A, B, C), D we get excenter(A, B, C) in Line(B, D), D in Line(B, excenter(A, B, C)), Line(B, D) == Line(B, excenter(A, B, C)), 0 == 2 * angle(excenter(A, B, C), B, D) mod 360
By internal_angle_bisector_definition_v0_r on D, G, E, C we get Line(C, G) == internal_angle_bisector(D, C, E)
By external_angle_bisector_definition_v0_r on excenter(B, A, C), G, excenter(B, A, C), C we get Line(C, G) == external_angle_bisector(excenter(B, A, C), C, excenter(B, A, C))
By perpendicular_angle_conditions_v0 on D, C, excenter(A, B, C) we get angle(D, C, excenter(A, B, C)) == orientation(C, excenter(A, B, C), D) mod 360
By internal_angle_bisector_definition_v0_r on D, A, D, excenter(B, A, C) we get Line(A, excenter(B, A, C)) == internal_angle_bisector(D, excenter(B, A, C), D)
By internal_angle_bisector_definition_v0_r on A, F, A, D we get Line(D, F) == internal_angle_bisector(A, D, A)
By internal_angle_bisector_definition_v0_r on G, E, G, D we get Line(D, E) == internal_angle_bisector(G, D, G)
By internal_angle_bisector_definition_v0_r on A, F, A, excenter(B, A, C) we get Line(F, excenter(B, A, C)) == internal_angle_bisector(A, excenter(B, A, C), A)
By internal_angle_bisector_definition_v0_r on F, excenter(B, A, C), F, A we get internal_angle_bisector(F, A, F) == Line(A, excenter(B, A, C))
By collinear_definition on C, excenter(B, A, C), excenter(A, B, C) we get excenter(B, A, C) in Line(C, excenter(A, B, C)), excenter(A, B, C) in Line(C, excenter(B, A, C)), Line(C, excenter(A, B, C)) == Line(C, excenter(B, A, C)), 0 == 2 * angle(excenter(B, A, C), C, excenter(A, B, C)) mod 360
By collinear_definition on D, excenter(A, B, C), B we get excenter(A, B, C) in Line(B, D), B in Line(D, excenter(A, B, C)), Line(B, D) == Line(D, excenter(A, B, C)), 0 == 2 * angle(excenter(A, B, C), D, B) mod 360
By internal_angle_bisector_definition_v0 on B, excenter(A, B, C), C, A we get angle(B, A, excenter(A, B, C)) == angle(excenter(A, B, C), A, C) mod 360
By internal_angle_bisector_definition_v0_r on G, E, G, C we get Line(C, E) == internal_angle_bisector(G, C, G)
By perpendicular_angle_conditions_v0 on excenter(A, B, C), A, D we get angle(excenter(A, B, C), A, D) == orientation(A, D, excenter(A, B, C)) mod 360
By internal_angle_bisector_definition_v0_r on G, C, G, D we get Line(C, D) == internal_angle_bisector(G, D, G)
By internal_angle_bisector_definition_v0_r on D, excenter(B, A, C), D, F we get internal_angle_bisector(D, F, D) == Line(F, excenter(B, A, C))
By internal_angle_bisector_definition_v0_r on A, excenter(B, A, C), A, F we get internal_angle_bisector(A, F, A) == Line(F, excenter(B, A, C))
By internal_angle_bisector_definition_v0_r on excenter(B, A, C), F, excenter(B, A, C), D we get Line(D, F) == internal_angle_bisector(excenter(B, A, C), D, excenter(B, A, C))
By internal_angle_bisector_definition_v0_r on C, D, C, G we get Line(D, G) == internal_angle_bisector(C, G, C)
By internal_angle_bisector_definition_v0_r on A, excenter(B, A, C), F, D we get internal_angle_bisector(A, D, F) == Line(D, excenter(B, A, C))
By internal_angle_bisector_definition_v0_r on D, E, D, G we get Line(E, G) == internal_angle_bisector(D, G, D)
By internal_angle_bisector_definition_v0_r on F, A, F, D we get Line(A, D) == internal_angle_bisector(F, D, F)
By collinear_definition on G, excenter(A, B, C), A we get excenter(A, B, C) in Line(A, G), A in Line(G, excenter(A, B, C)), Line(A, G) == Line(G, excenter(A, B, C)), 0 == 2 * angle(excenter(A, B, C), G, A) mod 360
By internal_angle_bisector_definition_v0_r on F, A, F, excenter(B, A, C) we get Line(A, excenter(B, A, C)) == internal_angle_bisector(F, excenter(B, A, C), F)
By internal_angle_bisector_definition_v0_r on D, excenter(B, A, C), A, F we get internal_angle_bisector(A, F, D) == Line(F, excenter(B, A, C))
By perpendicular_angle_conditions_v0 on excenter(A, B, C), B, excenter(B, A, C) we get angle(excenter(A, B, C), B, excenter(B, A, C)) == orientation(B, excenter(B, A, C), excenter(A, B, C)) mod 360
By internal_angle_bisector_definition_v0_r on G, C, G, E we get Line(C, E) == internal_angle_bisector(G, E, G)
By perpendicular_angle_conditions_v0 on excenter(A, B, C), A, F we get angle(excenter(A, B, C), A, F) == orientation(A, F, excenter(A, B, C)) mod 360
By internal_angle_bisector_definition_v0_r on G, C, E, D we get Line(C, D) == internal_angle_bisector(E, D, G)
By internal_angle_bisector_definition_v0_r on D, A, D, F we get Line(A, F) == internal_angle_bisector(D, F, D)
By internal_angle_bisector_definition_v0_r on D, F, D, A we get Line(A, F) == internal_angle_bisector(D, A, D)
By internal_angle_bisector_definition_v0_r on F, D, F, excenter(B, A, C) we get Line(D, excenter(B, A, C)) == internal_angle_bisector(F, excenter(B, A, C), F)
By internal_angle_bisector_definition_v0_r on excenter(B, A, C), B, excenter(B, A, C), G we get Line(B, G) == internal_angle_bisector(excenter(B, A, C), G, excenter(B, A, C))
By collinear_definition on A, excenter(A, B, C), G we get excenter(A, B, C) in Line(A, G), G in Line(A, excenter(A, B, C)), Line(A, G) == Line(A, excenter(A, B, C)), 0 == 2 * angle(excenter(A, B, C), A, G) mod 360
By internal_angle_bisector_definition_v0_r on G, B, G, excenter(B, A, C) we get Line(B, excenter(B, A, C)) == internal_angle_bisector(G, excenter(B, A, C), G)
By internal_angle_bisector_definition_v0_r on E, C, E, G we get Line(C, G) == internal_angle_bisector(E, G, E)
By internal_angle_bisector_definition_v0_r on E, D, E, G we get Line(D, G) == internal_angle_bisector(E, G, E)
By internal_angle_bisector_definition_v0_r on G, D, G, C we get Line(C, D) == internal_angle_bisector(G, C, G)
By internal_angle_bisector_definition_v0_r on F, D, F, A we get Line(A, D) == internal_angle_bisector(F, A, F)
By internal_angle_bisector_definition_v0_r on D, excenter(B, A, C), D, A we get internal_angle_bisector(D, A, D) == Line(A, excenter(B, A, C))
By internal_angle_bisector_definition_v0_r on D, C, D, G we get Line(C, G) == internal_angle_bisector(D, G, D)
By internal_angle_bisector_definition_v0_r on excenter(B, A, C), F, excenter(B, A, C), A we get Line(A, F) == internal_angle_bisector(excenter(B, A, C), A, excenter(B, A, C))
By collinear_definition on D, B, excenter(A, B, C) we get B in Line(D, excenter(A, B, C)), excenter(A, B, C) in Line(B, D), Line(B, D) == Line(D, excenter(A, B, C)), 0 == 2 * angle(B, D, excenter(A, B, C)) mod 360
By internal_angle_bisector_definition_v0_r on A, D, A, F we get Line(D, F) == internal_angle_bisector(A, F, A)
By internal_angle_bisector_definition_v0_r on B, G, B, excenter(B, A, C) we get Line(G, excenter(B, A, C)) == internal_angle_bisector(B, excenter(B, A, C), B)
By perpendicular_angle_conditions_v0 on excenter(A, B, C), A, excenter(B, A, C) we get angle(excenter(A, B, C), A, excenter(B, A, C)) == orientation(A, excenter(B, A, C), excenter(A, B, C)) mod 360
By perpendicular_angle_conditions_v0 on E, C, excenter(A, B, C) we get angle(E, C, excenter(A, B, C)) == orientation(C, excenter(A, B, C), E) mod 360
By altitude_definition on F, excenter(A, B, C), G, f we get f == altitude(F, G, excenter(A, B, C))
By altitude_definition on D, G, excenter(A, B, C), f we get f == altitude(D, G, excenter(A, B, C))
By altitude_definition on G, D, excenter(A, B, C), h we get h == altitude(G, D, excenter(A, B, C))
By altitude_definition on E, excenter(A, B, C), excenter(B, A, C), g we get g == altitude(E, excenter(A, B, C), excenter(B, A, C))
By altitude_definition on G, excenter(A, B, C), excenter(B, A, C), g we get g == altitude(G, excenter(A, B, C), excenter(B, A, C))
By altitude_definition on excenter(B, A, C), excenter(A, B, C), A, f we get f == altitude(excenter(B, A, C), A, excenter(A, B, C))
By collinear_definition on excenter(A, B, C), A, G we get A in Line(G, excenter(A, B, C)), G in Line(A, excenter(A, B, C)), Line(A, excenter(A, B, C)) == Line(G, excenter(A, B, C)), 0 == 2 * angle(A, excenter(A, B, C), G) mod 360
By altitude_definition on F, excenter(A, B, C), A, f we get f == altitude(F, A, excenter(A, B, C))
By altitude_definition on D, excenter(A, B, C), C, g we get g == altitude(D, C, excenter(A, B, C))
By collinear_definition on excenter(A, B, C), G, A we get G in Line(A, excenter(A, B, C)), A in Line(G, excenter(A, B, C)), Line(A, excenter(A, B, C)) == Line(G, excenter(A, B, C)), 0 == 2 * angle(G, excenter(A, B, C), A) mod 360
By collinear_definition on excenter(A, B, C), B, D we get B in Line(D, excenter(A, B, C)), D in Line(B, excenter(A, B, C)), Line(B, excenter(A, B, C)) == Line(D, excenter(A, B, C)), 0 == 2 * angle(B, excenter(A, B, C), D) mod 360
By altitude_definition on excenter(B, A, C), G, excenter(A, B, C), f we get f == altitude(excenter(B, A, C), G, excenter(A, B, C))
By altitude_definition on excenter(B, A, C), excenter(A, B, C), D, h we get h == altitude(excenter(B, A, C), D, excenter(A, B, C))
By altitude_definition on D, excenter(A, B, C), excenter(B, A, C), g we get g == altitude(D, excenter(A, B, C), excenter(B, A, C))
By altitude_definition on E, C, excenter(A, B, C), g we get g == altitude(E, C, excenter(A, B, C))
By altitude_definition on G, B, excenter(A, B, C), h we get h == altitude(G, B, excenter(A, B, C))
By altitude_definition on D, excenter(A, B, C), A, f we get f == altitude(D, A, excenter(A, B, C))
By collinear_definition on excenter(A, B, C), excenter(B, A, C), C we get excenter(B, A, C) in Line(C, excenter(A, B, C)), C in Line(excenter(A, B, C), excenter(B, A, C)), Line(C, excenter(A, B, C)) == Line(excenter(A, B, C), excenter(B, A, C)), 0 == 2 * angle(excenter(B, A, C), excenter(A, B, C), C) mod 360
By altitude_definition on G, C, excenter(A, B, C), g we get g == altitude(G, C, excenter(A, B, C))
By collinear_definition on excenter(A, B, C), D, B we get D in Line(B, excenter(A, B, C)), B in Line(D, excenter(A, B, C)), Line(B, excenter(A, B, C)) == Line(D, excenter(A, B, C)), 0 == 2 * angle(D, excenter(A, B, C), B) mod 360
By collinear_definition on excenter(A, B, C), C, excenter(B, A, C) we get C in Line(excenter(A, B, C), excenter(B, A, C)), excenter(B, A, C) in Line(C, excenter(A, B, C)), Line(C, excenter(A, B, C)) == Line(excenter(A, B, C), excenter(B, A, C)), 0 == 2 * angle(C, excenter(A, B, C), excenter(B, A, C)) mod 360
By altitude_definition on excenter(B, A, C), B, excenter(A, B, C), h we get h == altitude(excenter(B, A, C), B, excenter(A, B, C))
By similar_triangle_basic_properties on C, D, A, C, B, G we get angle(C, B, G) == angle(C, D, A) mod 360, angle(B, G, C) == angle(D, A, C) mod 360, angle(A, C, D) == angle(G, C, B) mod 360, log(distance(B, C)) + log(distance(A, D)) == log(distance(C, D)) + log(distance(B, G)), log(distance(A, D)) + log(distance(C, G)) == log(distance(B, G)) + log(distance(A, C)), log(distance(A, C)) + log(distance(B, C)) == log(distance(C, G)) + log(distance(C, D))
By similar_triangle_basic_properties on D, C, A, B, C, G we get angle(B, C, G) == angle(D, C, A) mod 360, angle(C, A, D) == angle(C, G, B) mod 360, angle(A, D, C) == angle(G, B, C) mod 360, log(distance(B, C)) + log(distance(A, C)) == log(distance(C, D)) + log(distance(C, G)), log(distance(A, C)) + log(distance(B, G)) == log(distance(C, G)) + log(distance(A, D)), log(distance(A, D)) + log(distance(B, C)) == log(distance(B, G)) + log(distance(C, D))
By line_definition on orthocenter(D, G, excenter(B, A, C)), excenter(B, A, C), perpendicular_line(C, g) we get perpendicular_line(C, g) == Line(excenter(B, A, C), orthocenter(D, G, excenter(B, A, C)))
By line_definition on A, orthocenter(D, G, excenter(B, A, C)), Line(A, G) we get Line(A, G) == Line(A, orthocenter(D, G, excenter(B, A, C)))
By line_definition on orthocenter(D, G, excenter(B, A, C)), G, Line(A, G) we get Line(A, G) == Line(G, orthocenter(D, G, excenter(B, A, C)))
By line_definition on orthocenter(D, G, excenter(B, A, C)), D, Line(B, D) we get Line(B, D) == Line(D, orthocenter(D, G, excenter(B, A, C)))
By line_definition on B, orthocenter(D, G, excenter(B, A, C)), Line(B, D) we get Line(B, D) == Line(B, orthocenter(D, G, excenter(B, A, C)))
By line_intersection_definition on orthocenter(D, G, excenter(B, A, C)), Line(A, G), perpendicular_line(C, g) we get orthocenter(D, G, excenter(B, A, C)) == line_intersection(Line(A, G), perpendicular_line(C, g))
By line_intersection_definition on orthocenter(D, G, excenter(B, A, C)), perpendicular_line(C, g), Line(B, D) we get orthocenter(D, G, excenter(B, A, C)) == line_intersection(Line(B, D), perpendicular_line(C, g))
By line_intersection_definition on orthocenter(D, G, excenter(B, A, C)), Line(A, G), Line(B, D) we get orthocenter(D, G, excenter(B, A, C)) == line_intersection(Line(A, G), Line(B, D))
By line_definition on C, orthocenter(D, G, excenter(B, A, C)), perpendicular_line(C, g) we get perpendicular_line(C, g) == Line(C, orthocenter(D, G, excenter(B, A, C)))
By orthocenter_concurrency on D, excenter(A, B, C), G we get orthocenter(D, G, excenter(A, B, C)) in altitude(D, G, excenter(A, B, C)), orthocenter(D, G, excenter(A, B, C)) in altitude(excenter(A, B, C), D, G), orthocenter(D, G, excenter(A, B, C)) in altitude(G, D, excenter(A, B, C))
By orthocenter_concurrency on excenter(A, B, C), excenter(B, A, C), D we get orthocenter(D, excenter(A, B, C), excenter(B, A, C)) in altitude(excenter(A, B, C), D, excenter(B, A, C)), orthocenter(D, excenter(A, B, C), excenter(B, A, C)) in altitude(excenter(B, A, C), D, excenter(A, B, C)), orthocenter(D, excenter(A, B, C), excenter(B, A, C)) in altitude(D, excenter(A, B, C), excenter(B, A, C))
By perpendicular_line_definition on orthocenter(D, G, excenter(B, A, C)), Line(A, G), f we get Line(A, G) == perpendicular_line(orthocenter(D, G, excenter(B, A, C)), f)
By perpendicular_line_definition on orthocenter(D, G, excenter(B, A, C)), perpendicular_line(C, g), g we get perpendicular_line(C, g) == perpendicular_line(orthocenter(D, G, excenter(B, A, C)), g)
By orthocenter_concurrency on excenter(B, A, C), excenter(A, B, C), G we get orthocenter(G, excenter(A, B, C), excenter(B, A, C)) in altitude(excenter(B, A, C), G, excenter(A, B, C)), orthocenter(G, excenter(A, B, C), excenter(B, A, C)) in altitude(excenter(A, B, C), G, excenter(B, A, C)), orthocenter(G, excenter(A, B, C), excenter(B, A, C)) in altitude(G, excenter(A, B, C), excenter(B, A, C))
By perpendicular_line_definition on orthocenter(D, G, excenter(B, A, C)), Line(B, D), h we get Line(B, D) == perpendicular_line(orthocenter(D, G, excenter(B, A, C)), h)
By line_unique_intersection on perpendicular_line(C, g), Line(B, D), excenter(A, B, C), orthocenter(D, G, excenter(B, A, C)) we get excenter(A, B, C) == orthocenter(D, G, excenter(B, A, C))
By circle_by_three_points_and_center on F, D, B, C we get F == center(Circle(B, C, D))
By in_imply_collinear on orthocenter(D, G, excenter(B, A, C)), excenter(A, B, C), C we get collinear(C, excenter(A, B, C), orthocenter(D, G, excenter(B, A, C)))
By in_imply_collinear on orthocenter(D, G, excenter(B, A, C)), G, excenter(A, B, C) we get collinear(G, excenter(A, B, C), orthocenter(D, G, excenter(B, A, C)))
By in_imply_collinear on orthocenter(D, G, excenter(B, A, C)), excenter(A, B, C), excenter(B, A, C) we get collinear(excenter(A, B, C), excenter(B, A, C), orthocenter(D, G, excenter(B, A, C)))
By in_imply_collinear on orthocenter(D, G, excenter(B, A, C)), excenter(A, B, C), D we get collinear(D, excenter(A, B, C), orthocenter(D, G, excenter(B, A, C)))
By in_imply_collinear on orthocenter(D, G, excenter(B, A, C)), A, G we get collinear(A, G, orthocenter(D, G, excenter(B, A, C)))
By in_imply_collinear on orthocenter(D, G, excenter(B, A, C)), excenter(B, A, C), C we get collinear(C, excenter(B, A, C), orthocenter(D, G, excenter(B, A, C)))
By in_imply_collinear on orthocenter(D, G, excenter(B, A, C)), B, excenter(A, B, C) we get collinear(B, excenter(A, B, C), orthocenter(D, G, excenter(B, A, C)))
By reverse_direction on excenter(A, B, C), C we get 180 == direction(excenter(A, B, C), C) - direction(C, excenter(A, B, C)) mod 360
By in_imply_collinear on orthocenter(D, G, excenter(B, A, C)), B, D we get collinear(B, D, orthocenter(D, G, excenter(B, A, C)))
By in_imply_collinear on orthocenter(D, G, excenter(B, A, C)), excenter(A, B, C), A we get collinear(A, excenter(A, B, C), orthocenter(D, G, excenter(B, A, C)))
By reverse_direction on G, excenter(A, B, C) we get 180 == direction(G, excenter(A, B, C)) - direction(excenter(A, B, C), G) mod 360
By isosceles_triangle_properties on F, B, D we get distance(B, F) == distance(D, F), angle(B, D, F) == angle(F, B, D) mod 360
By reverse_direction on excenter(A, B, C), excenter(B, A, C) we get 180 == direction(excenter(A, B, C), excenter(B, A, C)) - direction(excenter(B, A, C), excenter(A, B, C)) mod 360
By isosceles_triangle_properties on F, D, B we get distance(B, F) == distance(D, F), angle(D, B, F) == angle(F, D, B) mod 360
By reverse_direction on C, excenter(A, B, C) we get 180 == direction(C, excenter(A, B, C)) - direction(excenter(A, B, C), C) mod 360
By sas_anti_similarity on B, F, D, D, F, B we get anti_similar_triangles(B, D, F, D, B, F)
By reverse_direction on excenter(A, B, C), A we get 180 == direction(excenter(A, B, C), A) - direction(A, excenter(A, B, C)) mod 360
By reverse_direction on excenter(A, B, C), B we get 180 == direction(excenter(A, B, C), B) - direction(B, excenter(A, B, C)) mod 360
By reverse_direction on D, excenter(A, B, C) we get 180 == direction(D, excenter(A, B, C)) - direction(excenter(A, B, C), D) mod 360
By sas_anti_congruence on D, F, B, B, F, D we get anti_congruent_triangles(B, D, F, D, B, F)
By reverse_direction on excenter(A, B, C), G we get 180 == direction(excenter(A, B, C), G) - direction(G, excenter(A, B, C)) mod 360
By reverse_direction on excenter(A, B, C), D we get 180 == direction(excenter(A, B, C), D) - direction(D, excenter(A, B, C)) mod 360
By sas_anti_similarity on D, F, B, B, F, D we get anti_similar_triangles(B, D, F, D, B, F)
By sas_anti_congruence on B, F, D, D, F, B we get anti_congruent_triangles(B, D, F, D, B, F)
By reverse_direction on B, excenter(A, B, C) we get 180 == direction(B, excenter(A, B, C)) - direction(excenter(A, B, C), B) mod 360
By reverse_direction on excenter(B, A, C), excenter(A, B, C) we get 180 == direction(excenter(B, A, C), excenter(A, B, C)) - direction(excenter(A, B, C), excenter(B, A, C)) mod 360
By reverse_direction on A, excenter(A, B, C) we get 180 == direction(A, excenter(A, B, C)) - direction(excenter(A, B, C), A) mod 360
By external_angle_bisector_definition_v0_r on excenter(A, B, C), G, excenter(A, B, C), B we get Line(B, G) == external_angle_bisector(excenter(A, B, C), B, excenter(A, B, C))
By concyclic_definition_0 on G, B, D, A we get A in Circle(B, D, G)
By external_angle_bisector_definition_v0_r on excenter(A, B, C), F, excenter(A, B, C), A we get Line(A, F) == external_angle_bisector(excenter(A, B, C), A, excenter(A, B, C))
By internal_angle_bisector_definition_v0_r on excenter(B, A, C), excenter(A, B, C), excenter(B, A, C), C we get Line(C, excenter(A, B, C)) == internal_angle_bisector(excenter(B, A, C), C, excenter(B, A, C))
By internal_angle_bisector_definition_v0_r on A, excenter(A, B, C), A, G we get internal_angle_bisector(A, G, A) == Line(G, excenter(A, B, C))
By external_angle_bisector_definition_v0_r on D, C, G, E we get Line(C, E) == external_angle_bisector(D, E, G)
By external_angle_bisector_definition_v0_r on excenter(A, B, C), excenter(B, A, C), excenter(A, B, C), B we get Line(B, excenter(B, A, C)) == external_angle_bisector(excenter(A, B, C), B, excenter(A, B, C))
By concyclic_definition_0 on A, B, G, D we get D in Circle(A, B, G)
By external_angle_bisector_definition_v0_r on excenter(A, B, C), D, excenter(A, B, C), C we get Line(C, D) == external_angle_bisector(excenter(A, B, C), C, excenter(A, B, C))
By external_angle_bisector_definition_v0_r on excenter(A, B, C), excenter(B, A, C), excenter(A, B, C), A we get Line(A, excenter(B, A, C)) == external_angle_bisector(excenter(A, B, C), A, excenter(A, B, C))
By external_angle_bisector_definition_v0_r on excenter(A, B, C), E, excenter(A, B, C), C we get Line(C, E) == external_angle_bisector(excenter(A, B, C), C, excenter(A, B, C))
By concyclic_definition_0 on A, B, D, G we get G in Circle(A, B, D)
By internal_angle_bisector_definition_v0_r on B, excenter(A, B, C), B, D we get internal_angle_bisector(B, D, B) == Line(D, excenter(A, B, C))
By internal_angle_bisector_definition_v0_r on excenter(A, B, C), C, excenter(A, B, C), excenter(B, A, C) we get Line(C, excenter(B, A, C)) == internal_angle_bisector(excenter(A, B, C), excenter(B, A, C), excenter(A, B, C))
By external_angle_bisector_definition_v0_r on excenter(A, B, C), G, excenter(A, B, C), C we get Line(C, G) == external_angle_bisector(excenter(A, B, C), C, excenter(A, B, C))
By internal_angle_bisector_definition_v0_r on D, excenter(A, B, C), D, B we get internal_angle_bisector(D, B, D) == Line(B, excenter(A, B, C))
By internal_angle_bisector_definition_v0_r on D, B, D, excenter(A, B, C) we get Line(B, excenter(A, B, C)) == internal_angle_bisector(D, excenter(A, B, C), D)
By isosceles_triangle_midpoint on F, D, C we get midpoint(C, D) in median(F, C, D)
By internal_angle_bisector_definition_v0_r on B, D, B, excenter(A, B, C) we get Line(D, excenter(A, B, C)) == internal_angle_bisector(B, excenter(A, B, C), B)
By concyclic_definition_0 on G, A, D, B we get B in Circle(A, D, G)
By internal_angle_bisector_definition_v0_r on excenter(B, A, C), C, excenter(B, A, C), excenter(A, B, C) we get Line(C, excenter(A, B, C)) == internal_angle_bisector(excenter(B, A, C), excenter(A, B, C), excenter(B, A, C))
By internal_angle_bisector_definition_v0_r on A, G, A, excenter(A, B, C) we get Line(G, excenter(A, B, C)) == internal_angle_bisector(A, excenter(A, B, C), A)
By internal_angle_bisector_definition_v0_r on C, D, G, E we get Line(D, E) == internal_angle_bisector(C, E, G)
By internal_angle_bisector_definition_v0_r on excenter(A, B, C), D, excenter(A, B, C), B we get Line(B, D) == internal_angle_bisector(excenter(A, B, C), B, excenter(A, B, C))
By internal_angle_bisector_definition_v0_r on excenter(A, B, C), excenter(B, A, C), excenter(A, B, C), C we get Line(C, excenter(B, A, C)) == internal_angle_bisector(excenter(A, B, C), C, excenter(A, B, C))
By internal_angle_bisector_definition_v0_r on C, excenter(B, A, C), C, excenter(A, B, C) we get Line(excenter(A, B, C), excenter(B, A, C)) == internal_angle_bisector(C, excenter(A, B, C), C)
By internal_angle_bisector_definition_v0_r on excenter(A, B, C), B, excenter(A, B, C), D we get Line(B, D) == internal_angle_bisector(excenter(A, B, C), D, excenter(A, B, C))
By external_angle_bisector_definition_v0_r on excenter(A, B, C), D, excenter(A, B, C), A we get Line(A, D) == external_angle_bisector(excenter(A, B, C), A, excenter(A, B, C))
By internal_angle_bisector_definition_v0_r on C, excenter(A, B, C), C, excenter(B, A, C) we get Line(excenter(A, B, C), excenter(B, A, C)) == internal_angle_bisector(C, excenter(B, A, C), C)
By internal_angle_bisector_definition_v0_r on G, excenter(A, B, C), G, A we get internal_angle_bisector(G, A, G) == Line(A, excenter(A, B, C))
By internal_angle_bisector_definition_v0_r on excenter(A, B, C), G, excenter(A, B, C), A we get Line(A, G) == internal_angle_bisector(excenter(A, B, C), A, excenter(A, B, C))
By internal_angle_bisector_definition_v0_r on excenter(A, B, C), A, excenter(A, B, C), G we get Line(A, G) == internal_angle_bisector(excenter(A, B, C), G, excenter(A, B, C))
By internal_angle_bisector_definition_v0_r on G, A, G, excenter(A, B, C) we get Line(A, excenter(A, B, C)) == internal_angle_bisector(G, excenter(A, B, C), G)
By altitude_definition on orthocenter(D, G, excenter(B, A, C)), D, excenter(B, A, C), Line(A, G) we get Line(A, G) == altitude(orthocenter(D, G, excenter(B, A, C)), D, excenter(B, A, C))
By altitude_definition on orthocenter(D, G, excenter(B, A, C)), D, E, perpendicular_line(C, g) we get perpendicular_line(C, g) == altitude(orthocenter(D, G, excenter(B, A, C)), D, E)
By altitude_definition on orthocenter(D, G, excenter(B, A, C)), A, F, Line(A, G) we get Line(A, G) == altitude(orthocenter(D, G, excenter(B, A, C)), A, F)
By altitude_definition on orthocenter(D, G, excenter(B, A, C)), C, D, perpendicular_line(C, g) we get perpendicular_line(C, g) == altitude(orthocenter(D, G, excenter(B, A, C)), C, D)
By concyclic_definition_1 on B, D, G, A we get Circle(A, D, G) == Circle(B, D, G)
By altitude_definition on orthocenter(D, G, excenter(B, A, C)), B, G, Line(B, D) we get Line(B, D) == altitude(orthocenter(D, G, excenter(B, A, C)), B, G)
By concyclic_definition_1 on D, A, G, B we get Circle(A, B, G) == Circle(A, D, G)
By sas_anti_congruence on F, C, E, F, D, E we get anti_congruent_triangles(C, E, F, D, E, F)
By sas_anti_similarity on F, C, E, F, D, E we get anti_similar_triangles(C, E, F, D, E, F)
By concyclic_definition_1 on G, B, D, A we get Circle(A, B, D) == Circle(B, D, G)
By similar_triangle_basic_properties on C, D, B, C, A, G we get angle(C, A, G) == angle(C, D, B) mod 360, angle(A, G, C) == angle(D, B, C) mod 360, angle(B, C, D) == angle(G, C, A) mod 360, log(distance(A, C)) + log(distance(B, D)) == log(distance(C, D)) + log(distance(A, G)), log(distance(A, G)) + log(distance(B, C)) == log(distance(B, D)) + log(distance(C, G)), log(distance(B, C)) + log(distance(A, C)) == log(distance(C, G)) + log(distance(C, D))
By altitude_definition on orthocenter(D, G, excenter(B, A, C)), A, excenter(B, A, C), Line(A, G) we get Line(A, G) == altitude(orthocenter(D, G, excenter(B, A, C)), A, excenter(B, A, C))
By concyclic_definition_1 on G, A, D, B we get Circle(A, B, D) == Circle(A, D, G)
By concyclic_definition_1 on D, B, A, G we get Circle(A, B, D) == Circle(A, B, G)
By altitude_definition on orthocenter(D, G, excenter(B, A, C)), G, excenter(B, A, C), Line(B, D) we get Line(B, D) == altitude(orthocenter(D, G, excenter(B, A, C)), G, excenter(B, A, C))
By altitude_definition on orthocenter(D, G, excenter(B, A, C)), E, G, perpendicular_line(C, g) we get perpendicular_line(C, g) == altitude(orthocenter(D, G, excenter(B, A, C)), E, G)
By altitude_definition on orthocenter(D, G, excenter(B, A, C)), B, excenter(B, A, C), Line(B, D) we get Line(B, D) == altitude(orthocenter(D, G, excenter(B, A, C)), B, excenter(B, A, C))
By similar_triangle_basic_properties on C, B, D, C, G, A we get angle(C, B, D) == angle(C, G, A) mod 360, angle(B, D, C) == angle(G, A, C) mod 360, angle(A, C, G) == angle(D, C, B) mod 360, log(distance(B, C)) + log(distance(A, G)) == log(distance(C, G)) + log(distance(B, D)), log(distance(A, G)) + log(distance(C, D)) == log(distance(B, D)) + log(distance(A, C)), log(distance(A, C)) + log(distance(B, C)) == log(distance(C, D)) + log(distance(C, G))
By altitude_definition on orthocenter(D, G, excenter(B, A, C)), D, G, perpendicular_line(C, g) we get perpendicular_line(C, g) == altitude(orthocenter(D, G, excenter(B, A, C)), D, G)
By sas_anti_congruence on E, C, F, E, D, F we get anti_congruent_triangles(C, E, F, D, E, F)
By sas_anti_similarity on E, D, F, E, C, F we get anti_similar_triangles(C, E, F, D, E, F)
By altitude_definition on orthocenter(D, G, excenter(B, A, C)), C, E, perpendicular_line(C, g) we get perpendicular_line(C, g) == altitude(orthocenter(D, G, excenter(B, A, C)), C, E)
By altitude_definition on orthocenter(D, G, excenter(B, A, C)), D, A, Line(A, G) we get Line(A, G) == altitude(orthocenter(D, G, excenter(B, A, C)), A, D)
By sas_anti_similarity on F, D, E, F, C, E we get anti_similar_triangles(C, E, F, D, E, F)
By sas_anti_similarity on E, C, F, E, D, F we get anti_similar_triangles(C, E, F, D, E, F)
By sas_anti_congruence on E, D, F, E, C, F we get anti_congruent_triangles(C, E, F, D, E, F)
By concyclic_definition_1 on A, B, G, D we get Circle(A, B, G) == Circle(B, D, G)
By altitude_definition on orthocenter(D, G, excenter(B, A, C)), C, G, perpendicular_line(C, g) we get perpendicular_line(C, g) == altitude(orthocenter(D, G, excenter(B, A, C)), C, G)
By altitude_definition on orthocenter(D, G, excenter(B, A, C)), F, excenter(B, A, C), Line(A, G) we get Line(A, G) == altitude(orthocenter(D, G, excenter(B, A, C)), F, excenter(B, A, C))
By sas_anti_congruence on F, D, E, F, C, E we get anti_congruent_triangles(C, E, F, D, E, F)
By altitude_definition on orthocenter(D, G, excenter(B, A, C)), D, F, Line(A, G) we get Line(A, G) == altitude(orthocenter(D, G, excenter(B, A, C)), D, F)
By line_definition on orthocenter(D, excenter(A, B, C), excenter(B, A, C)), orthocenter(G, excenter(A, B, C), excenter(B, A, C)), g we get g == Line(orthocenter(D, excenter(A, B, C), excenter(B, A, C)), orthocenter(G, excenter(A, B, C), excenter(B, A, C)))
By line_definition on C, orthocenter(D, G, excenter(A, B, C)), perpendicular_line(C, g) we get perpendicular_line(C, g) == Line(C, orthocenter(D, G, excenter(A, B, C)))
By line_intersection_definition on orthocenter(G, excenter(A, B, C), excenter(B, A, C)), f, g we get line_intersection(f, g) == orthocenter(G, excenter(A, B, C), excenter(B, A, C))
By line_definition on E, orthocenter(D, excenter(A, B, C), excenter(B, A, C)), g we get g == Line(E, orthocenter(D, excenter(A, B, C), excenter(B, A, C)))
By line_intersection_definition on orthocenter(D, excenter(A, B, C), excenter(B, A, C)), Line(A, G), g we get line_intersection(g, Line(A, G)) == orthocenter(D, excenter(A, B, C), excenter(B, A, C))
By line_intersection_definition on orthocenter(G, excenter(A, B, C), excenter(B, A, C)), f, Line(B, D) we get line_intersection(f, Line(B, D)) == orthocenter(G, excenter(A, B, C), excenter(B, A, C))
By line_definition on orthocenter(D, excenter(A, B, C), excenter(B, A, C)), D, g we get g == Line(D, orthocenter(D, excenter(A, B, C), excenter(B, A, C)))
By line_intersection_definition on orthocenter(G, excenter(A, B, C), excenter(B, A, C)), Line(B, D), g we get line_intersection(g, Line(B, D)) == orthocenter(G, excenter(A, B, C), excenter(B, A, C))
By line_intersection_definition on orthocenter(D, excenter(A, B, C), excenter(B, A, C)), g, h we get line_intersection(g, h) == orthocenter(D, excenter(A, B, C), excenter(B, A, C))
By line_definition on B, orthocenter(D, excenter(A, B, C), excenter(B, A, C)), h we get h == Line(B, orthocenter(D, excenter(A, B, C), excenter(B, A, C)))
By line_definition on orthocenter(D, G, excenter(A, B, C)), orthocenter(D, excenter(A, B, C), excenter(B, A, C)), h we get h == Line(orthocenter(D, G, excenter(A, B, C)), orthocenter(D, excenter(A, B, C), excenter(B, A, C)))
By line_definition on excenter(B, A, C), orthocenter(G, excenter(A, B, C), excenter(B, A, C)), f we get f == Line(excenter(B, A, C), orthocenter(G, excenter(A, B, C), excenter(B, A, C)))
By line_definition on orthocenter(G, excenter(A, B, C), excenter(B, A, C)), A, f we get f == Line(A, orthocenter(G, excenter(A, B, C), excenter(B, A, C)))
By line_intersection_definition on orthocenter(D, G, excenter(A, B, C)), h, perpendicular_line(C, g) we get orthocenter(D, G, excenter(A, B, C)) == line_intersection(h, perpendicular_line(C, g))
By line_definition on orthocenter(D, excenter(A, B, C), excenter(B, A, C)), C, g we get g == Line(C, orthocenter(D, excenter(A, B, C), excenter(B, A, C)))
By line_intersection_definition on orthocenter(D, G, excenter(A, B, C)), f, h we get line_intersection(f, h) == orthocenter(D, G, excenter(A, B, C))
By line_definition on orthocenter(G, excenter(A, B, C), excenter(B, A, C)), E, g we get g == Line(E, orthocenter(G, excenter(A, B, C), excenter(B, A, C)))
By line_definition on orthocenter(D, G, excenter(A, B, C)), D, f we get f == Line(D, orthocenter(D, G, excenter(A, B, C)))
By line_definition on A, orthocenter(D, G, excenter(A, B, C)), f we get f == Line(A, orthocenter(D, G, excenter(A, B, C)))
By line_definition on G, orthocenter(D, G, excenter(A, B, C)), h we get h == Line(G, orthocenter(D, G, excenter(A, B, C)))
By line_definition on orthocenter(G, excenter(A, B, C), excenter(B, A, C)), orthocenter(D, G, excenter(A, B, C)), f we get f == Line(orthocenter(D, G, excenter(A, B, C)), orthocenter(G, excenter(A, B, C), excenter(B, A, C)))
By line_definition on orthocenter(D, excenter(A, B, C), excenter(B, A, C)), excenter(A, B, C), Line(A, G) we get Line(A, G) == Line(excenter(A, B, C), orthocenter(D, excenter(A, B, C), excenter(B, A, C)))
By line_definition on excenter(A, B, C), orthocenter(G, excenter(A, B, C), excenter(B, A, C)), Line(B, D) we get Line(B, D) == Line(excenter(A, B, C), orthocenter(G, excenter(A, B, C), excenter(B, A, C)))
By line_definition on G, orthocenter(G, excenter(A, B, C), excenter(B, A, C)), g we get g == Line(G, orthocenter(G, excenter(A, B, C), excenter(B, A, C)))
By line_definition on B, orthocenter(G, excenter(A, B, C), excenter(B, A, C)), Line(B, D) we get Line(B, D) == Line(B, orthocenter(G, excenter(A, B, C), excenter(B, A, C)))
By line_definition on F, orthocenter(D, G, excenter(A, B, C)), f we get f == Line(F, orthocenter(D, G, excenter(A, B, C)))
By line_definition on C, orthocenter(G, excenter(A, B, C), excenter(B, A, C)), g we get g == Line(C, orthocenter(G, excenter(A, B, C), excenter(B, A, C)))
By line_intersection_definition on orthocenter(D, G, excenter(A, B, C)), perpendicular_line(C, g), f we get orthocenter(D, G, excenter(A, B, C)) == line_intersection(f, perpendicular_line(C, g))
By line_intersection_definition on orthocenter(D, excenter(A, B, C), excenter(B, A, C)), h, Line(A, G) we get line_intersection(h, Line(A, G)) == orthocenter(D, excenter(A, B, C), excenter(B, A, C))
By line_definition on excenter(B, A, C), orthocenter(D, excenter(A, B, C), excenter(B, A, C)), h we get h == Line(excenter(B, A, C), orthocenter(D, excenter(A, B, C), excenter(B, A, C)))
By line_definition on orthocenter(D, G, excenter(A, B, C)), B, h we get h == Line(B, orthocenter(D, G, excenter(A, B, C)))
By line_definition on excenter(A, B, C), orthocenter(D, G, excenter(A, B, C)), perpendicular_line(C, g) we get perpendicular_line(C, g) == Line(excenter(A, B, C), orthocenter(D, G, excenter(A, B, C)))
By line_definition on orthocenter(D, excenter(A, B, C), excenter(B, A, C)), A, Line(A, G) we get Line(A, G) == Line(A, orthocenter(D, excenter(A, B, C), excenter(B, A, C)))
By line_definition on orthocenter(G, excenter(A, B, C), excenter(B, A, C)), F, f we get f == Line(F, orthocenter(G, excenter(A, B, C), excenter(B, A, C)))
By angles_on_chord_v2 on B, A, D, G, Circle(A, B, D) we get angle(B, D, A) == angle(B, G, A) + 180 mod 360
By angles_on_chord_v3 on A, B, D, G, Circle(A, B, D) we get angle(A, D, B) == angle(A, G, B) + 180 mod 360
By angles_on_chord_v3 on B, A, G, D, Circle(A, B, D) we get angle(B, G, A) == angle(B, D, A) + 180 mod 360
By angles_on_chord_v2 on A, B, G, D, Circle(A, B, D) we get angle(A, G, B) == angle(A, D, B) + 180 mod 360
By perpendicular_line_definition on orthocenter(D, G, excenter(A, B, C)), f, Line(A, G) we get f == perpendicular_line(orthocenter(D, G, excenter(A, B, C)), Line(A, G))
By perpendicular_line_definition on orthocenter(D, excenter(A, B, C), excenter(B, A, C)), Line(A, G), f we get Line(A, G) == perpendicular_line(orthocenter(D, excenter(A, B, C), excenter(B, A, C)), f)
By line_intersection_definition on F, Line(B, F), Line(E, F) we get F == line_intersection(Line(B, F), Line(E, F))
By line_intersection_definition on E, g, Line(E, F) we get E == line_intersection(g, Line(E, F))
By perpendicular_line_definition on orthocenter(G, excenter(A, B, C), excenter(B, A, C)), f, Line(A, G) we get f == perpendicular_line(orthocenter(G, excenter(A, B, C), excenter(B, A, C)), Line(A, G))
By line_intersection_definition on F, Line(E, F), f we get F == line_intersection(f, Line(E, F))
By perpendicular_line_definition on orthocenter(G, excenter(A, B, C), excenter(B, A, C)), g, perpendicular_line(C, g) we get g == perpendicular_line(orthocenter(G, excenter(A, B, C), excenter(B, A, C)), perpendicular_line(C, g))
By radical_axis_of_intersecting_circles_v0 on B, A, Circle(A, B, D), c we get Line(A, B) == radical_axis(c, Circle(A, B, D))
By line_intersection_definition on F, Line(C, F), Line(E, F) we get F == line_intersection(Line(C, F), Line(E, F))
By radical_axis_of_intersecting_circles_v0 on C, B, c, Circle(B, C, D) we get Line(B, C) == radical_axis(c, Circle(B, C, D))
By perpendicular_line_definition on orthocenter(D, excenter(A, B, C), excenter(B, A, C)), h, Line(B, D) we get h == perpendicular_line(orthocenter(D, excenter(A, B, C), excenter(B, A, C)), Line(B, D))
By perpendicular_line_definition on orthocenter(D, G, excenter(A, B, C)), perpendicular_line(C, g), g we get perpendicular_line(C, g) == perpendicular_line(orthocenter(D, G, excenter(A, B, C)), g)
By radical_axis_of_intersecting_circles_v0 on D, B, Circle(A, B, D), Circle(B, C, D) we get Line(B, D) == radical_axis(Circle(A, B, D), Circle(B, C, D))
By line_unique_intersection on h, g, orthocenter(D, excenter(A, B, C), excenter(B, A, C)), G we get G == orthocenter(D, excenter(A, B, C), excenter(B, A, C))
By perpendicular_line_definition on orthocenter(D, excenter(A, B, C), excenter(B, A, C)), g, perpendicular_line(C, g) we get g == perpendicular_line(orthocenter(D, excenter(A, B, C), excenter(B, A, C)), perpendicular_line(C, g))
By perpendicular_line_definition on orthocenter(D, G, excenter(A, B, C)), h, Line(B, D) we get h == perpendicular_line(orthocenter(D, G, excenter(A, B, C)), Line(B, D))
By perpendicular_line_definition on orthocenter(G, excenter(A, B, C), excenter(B, A, C)), Line(B, D), h we get Line(B, D) == perpendicular_line(orthocenter(G, excenter(A, B, C), excenter(B, A, C)), h)
By line_unique_intersection on f, g, orthocenter(G, excenter(A, B, C), excenter(B, A, C)), D we get D == orthocenter(G, excenter(A, B, C), excenter(B, A, C))
By line_unique_intersection on perpendicular_line(C, g), h, orthocenter(D, G, excenter(A, B, C)), excenter(B, A, C) we get excenter(B, A, C) == orthocenter(D, G, excenter(A, B, C))
By perpendicular_direction_conditions_v0 on G, D, F, E we get perpendicular(Line(D, G), Line(E, F))
By perpendicular_direction_conditions_v0 on D, C, E, F we get perpendicular(Line(C, D), Line(E, F))
By same_angle_v0 on E, C, G, F we get angle(C, E, F) == angle(G, E, F) mod 360
By perpendicular_direction_conditions_v0 on E, F, D, E we get perpendicular(Line(D, E), Line(E, F))
By same_angle_v2 on E, G, D, F we get angle(G, E, F) == angle(D, E, F) + 180 mod 360
By same_angle_v0 on F, A, D, E we get angle(A, F, E) == angle(D, F, E) mod 360
By perpendicular_direction_conditions_v0 on E, G, E, F we get perpendicular(Line(E, F), Line(E, G))
By perpendicular_direction_conditions_v0 on G, C, F, E we get perpendicular(Line(C, G), Line(E, F))
By perpendicular_direction_conditions_v0 on F, E, C, E we get perpendicular(Line(C, E), Line(E, F))
By circle_radius_v0_r on C, Circle(B, C, D) we get radius(Circle(B, C, D)) == distance(C, center(Circle(B, C, D)))
By circle_radius_v0_r on B, Circle(B, C, D) we get radius(Circle(B, C, D)) == distance(B, center(Circle(B, C, D)))
By circle_radius_v0_r on D, Circle(B, C, D) we get radius(Circle(B, C, D)) == distance(D, center(Circle(B, C, D)))
By in_imply_collinear on orthocenter(D, G, excenter(A, B, C)), A, excenter(B, A, C) we get collinear(A, excenter(B, A, C), orthocenter(D, G, excenter(A, B, C)))
By divide_by_2_mod_180_v1 on D, E, F, F, A, G we get angle(D, E, F) == angle(F, A, G) mod 360
By in_imply_collinear on orthocenter(D, G, excenter(A, B, C)), F, excenter(B, A, C) we get collinear(F, excenter(B, A, C), orthocenter(D, G, excenter(A, B, C)))
By in_imply_collinear on orthocenter(D, G, excenter(A, B, C)), D, A we get collinear(A, D, orthocenter(D, G, excenter(A, B, C)))
By divide_by_2_mod_180_v1 on E, F, D, D, G, A we get angle(D, G, A) == angle(E, F, D) mod 360
By divide_by_2_mod_180_v1 on D, G, A, C, F, E we get angle(C, F, E) == angle(D, G, A) mod 360
By in_imply_collinear on orthocenter(G, excenter(A, B, C), excenter(B, A, C)), E, C we get collinear(C, E, orthocenter(G, excenter(A, B, C), excenter(B, A, C)))
By divide_by_2_mod_180_v1 on F, A, G, F, E, C we get angle(F, A, G) == angle(F, E, C) mod 360
By divide_by_2_mod_180_v0 on F, E, D, D, A, G we get angle(D, A, G) == angle(F, E, D) mod 360
By divide_by_2_mod_180_v2 on E, F, C, A, G, C we get angle(E, F, C) == angle(A, G, C) + 180 mod 360
By divide_by_2_mod_180_v0 on G, A, F, F, E, D we get angle(F, E, D) == angle(G, A, F) mod 360
By divide_by_2_mod_180_v1 on F, E, C, G, A, D we get angle(F, E, C) == angle(G, A, D) mod 360
By divide_by_2_mod_180_v2 on E, F, C, D, B, C we get angle(E, F, C) == angle(D, B, C) + 180 mod 360
By in_imply_collinear on orthocenter(D, G, excenter(A, B, C)), excenter(A, B, C), C we get collinear(C, excenter(A, B, C), orthocenter(D, G, excenter(A, B, C)))
By in_imply_collinear on orthocenter(G, excenter(A, B, C), excenter(B, A, C)), D, excenter(B, A, C) we get collinear(D, excenter(B, A, C), orthocenter(G, excenter(A, B, C), excenter(B, A, C)))
By divide_by_2_mod_180_v1 on C, F, E, E, G, A we get angle(C, F, E) == angle(E, G, A) mod 360
By divide_by_2_mod_180_v0 on A, G, E, D, F, E we get angle(A, G, E) == angle(D, F, E) mod 360
By in_imply_collinear on orthocenter(G, excenter(A, B, C), excenter(B, A, C)), G, E we get collinear(E, G, orthocenter(G, excenter(A, B, C), excenter(B, A, C)))
By in_imply_collinear on orthocenter(G, excenter(A, B, C), excenter(B, A, C)), D, B we get collinear(B, D, orthocenter(G, excenter(A, B, C), excenter(B, A, C)))
By in_imply_collinear on orthocenter(D, G, excenter(A, B, C)), excenter(B, A, C), G we get collinear(G, excenter(B, A, C), orthocenter(D, G, excenter(A, B, C)))
By in_imply_collinear on orthocenter(G, excenter(A, B, C), excenter(B, A, C)), G, C we get collinear(C, G, orthocenter(G, excenter(A, B, C), excenter(B, A, C)))
By divide_by_2_mod_180_v2 on F, E, D, G, A, D we get angle(F, E, D) == angle(G, A, D) + 180 mod 360
By divide_by_2_mod_180_v0 on A, G, E, E, F, C we get angle(A, G, E) == angle(E, F, C) mod 360
By in_imply_collinear on orthocenter(D, excenter(A, B, C), excenter(B, A, C)), G, E we get collinear(E, G, orthocenter(D, excenter(A, B, C), excenter(B, A, C)))
By in_imply_collinear on orthocenter(G, excenter(A, B, C), excenter(B, A, C)), F, A we get collinear(A, F, orthocenter(G, excenter(A, B, C), excenter(B, A, C)))
By in_imply_collinear on orthocenter(D, G, excenter(A, B, C)), F, A we get collinear(A, F, orthocenter(D, G, excenter(A, B, C)))
By in_imply_collinear on orthocenter(G, excenter(A, B, C), excenter(B, A, C)), G, D we get collinear(D, G, orthocenter(G, excenter(A, B, C), excenter(B, A, C)))
By in_imply_collinear on orthocenter(G, excenter(A, B, C), excenter(B, A, C)), B, excenter(A, B, C) we get collinear(B, excenter(A, B, C), orthocenter(G, excenter(A, B, C), excenter(B, A, C)))
By in_imply_collinear on orthocenter(D, G, excenter(A, B, C)), D, F we get collinear(D, F, orthocenter(D, G, excenter(A, B, C)))
By in_imply_collinear on orthocenter(D, excenter(A, B, C), excenter(B, A, C)), E, D we get collinear(D, E, orthocenter(D, excenter(A, B, C), excenter(B, A, C)))
By divide_by_2_mod_180_v1 on D, B, A, C, F, E we get angle(C, F, E) == angle(D, B, A) mod 360
By divide_by_2_mod_180_v1 on D, E, F, D, B, G we get angle(D, B, G) == angle(D, E, F) mod 360
By divide_by_2_mod_180_v2 on C, E, F, F, A, G we get angle(C, E, F) == angle(F, A, G) + 180 mod 360
By in_imply_collinear on orthocenter(D, G, excenter(A, B, C)), excenter(A, B, C), excenter(B, A, C) we get collinear(excenter(A, B, C), excenter(B, A, C), orthocenter(D, G, excenter(A, B, C)))
By in_imply_collinear on orthocenter(D, excenter(A, B, C), excenter(B, A, C)), E, C we get collinear(C, E, orthocenter(D, excenter(A, B, C), excenter(B, A, C)))
By divide_by_2_mod_180_v1 on E, G, A, E, F, D we get angle(E, F, D) == angle(E, G, A) mod 360
By in_imply_collinear on orthocenter(D, excenter(A, B, C), excenter(B, A, C)), B, excenter(B, A, C) we get collinear(B, excenter(B, A, C), orthocenter(D, excenter(A, B, C), excenter(B, A, C)))
By in_imply_collinear on orthocenter(G, excenter(A, B, C), excenter(B, A, C)), D, excenter(A, B, C) we get collinear(D, excenter(A, B, C), orthocenter(G, excenter(A, B, C), excenter(B, A, C)))
By in_imply_collinear on orthocenter(D, excenter(A, B, C), excenter(B, A, C)), D, C we get collinear(C, D, orthocenter(D, excenter(A, B, C), excenter(B, A, C)))
By divide_by_2_mod_180_v2 on F, E, D, D, B, G we get angle(F, E, D) == angle(D, B, G) + 180 mod 360
By divide_by_2_mod_180_v2 on G, A, F, F, E, C we get angle(G, A, F) == angle(F, E, C) + 180 mod 360
By in_imply_collinear on orthocenter(D, G, excenter(A, B, C)), C, excenter(B, A, C) we get collinear(C, excenter(B, A, C), orthocenter(D, G, excenter(A, B, C)))
By in_imply_collinear on orthocenter(D, G, excenter(A, B, C)), excenter(B, A, C), B we get collinear(B, excenter(B, A, C), orthocenter(D, G, excenter(A, B, C)))
By in_imply_collinear on orthocenter(D, excenter(A, B, C), excenter(B, A, C)), G, A we get collinear(A, G, orthocenter(D, excenter(A, B, C), excenter(B, A, C)))
By in_imply_collinear on orthocenter(G, excenter(A, B, C), excenter(B, A, C)), A, D we get collinear(A, D, orthocenter(G, excenter(A, B, C), excenter(B, A, C)))
By in_imply_collinear on orthocenter(D, excenter(A, B, C), excenter(B, A, C)), G, D we get collinear(D, G, orthocenter(D, excenter(A, B, C), excenter(B, A, C)))
By divide_by_2_mod_180_v3 on F, A, G, C, E, F we get angle(F, A, G) == angle(C, E, F) + 180 mod 360
By in_imply_collinear on orthocenter(D, G, excenter(A, B, C)), B, G we get collinear(B, G, orthocenter(D, G, excenter(A, B, C)))
By in_imply_collinear on orthocenter(G, excenter(A, B, C), excenter(B, A, C)), E, D we get collinear(D, E, orthocenter(G, excenter(A, B, C), excenter(B, A, C)))
By in_imply_collinear on orthocenter(G, excenter(A, B, C), excenter(B, A, C)), F, excenter(B, A, C) we get collinear(F, excenter(B, A, C), orthocenter(G, excenter(A, B, C), excenter(B, A, C)))
By divide_by_2_mod_180_v1 on G, A, D, D, E, F we get angle(D, E, F) == angle(G, A, D) mod 360
By in_imply_collinear on orthocenter(D, excenter(A, B, C), excenter(B, A, C)), G, excenter(B, A, C) we get collinear(G, excenter(B, A, C), orthocenter(D, excenter(A, B, C), excenter(B, A, C)))
By in_imply_collinear on orthocenter(D, excenter(A, B, C), excenter(B, A, C)), B, G we get collinear(B, G, orthocenter(D, excenter(A, B, C), excenter(B, A, C)))
By divide_by_2_mod_180_v2 on D, F, E, D, B, C we get angle(D, F, E) == angle(D, B, C) + 180 mod 360
By in_imply_collinear on orthocenter(D, excenter(A, B, C), excenter(B, A, C)), excenter(A, B, C), A we get collinear(A, excenter(A, B, C), orthocenter(D, excenter(A, B, C), excenter(B, A, C)))
By divide_by_2_mod_180_v3 on G, A, D, F, E, D we get angle(G, A, D) == angle(F, E, D) + 180 mod 360
By divide_by_2_mod_180_v3 on F, A, G, F, E, D we get angle(F, A, G) == angle(F, E, D) + 180 mod 360
By in_imply_collinear on orthocenter(D, excenter(A, B, C), excenter(B, A, C)), C, G we get collinear(C, G, orthocenter(D, excenter(A, B, C), excenter(B, A, C)))
By divide_by_2_mod_180_v0 on E, F, C, A, B, D we get angle(A, B, D) == angle(E, F, C) mod 360
By in_imply_collinear on orthocenter(G, excenter(A, B, C), excenter(B, A, C)), excenter(B, A, C), A we get collinear(A, excenter(B, A, C), orthocenter(G, excenter(A, B, C), excenter(B, A, C)))
By in_imply_collinear on orthocenter(G, excenter(A, B, C), excenter(B, A, C)), F, D we get collinear(D, F, orthocenter(G, excenter(A, B, C), excenter(B, A, C)))
By in_imply_collinear on orthocenter(D, G, excenter(A, B, C)), D, excenter(B, A, C) we get collinear(D, excenter(B, A, C), orthocenter(D, G, excenter(A, B, C)))
By divide_by_2_mod_180_v2 on C, G, A, C, F, E we get angle(C, G, A) == angle(C, F, E) + 180 mod 360
By in_imply_collinear on orthocenter(G, excenter(A, B, C), excenter(B, A, C)), C, D we get collinear(C, D, orthocenter(G, excenter(A, B, C), excenter(B, A, C)))
By in_imply_collinear on orthocenter(D, excenter(A, B, C), excenter(B, A, C)), excenter(A, B, C), G we get collinear(G, excenter(A, B, C), orthocenter(D, excenter(A, B, C), excenter(B, A, C)))
By divide_by_2_mod_180_v3 on D, E, F, G, A, F we get angle(D, E, F) == angle(G, A, F) + 180 mod 360
By divide_by_2_mod_180_v3 on D, B, C, D, F, E we get angle(D, B, C) == angle(D, F, E) + 180 mod 360
By divide_by_2_mod_180_v0 on D, F, E, A, G, D we get angle(A, G, D) == angle(D, F, E) mod 360
By divide_by_2_mod_180_v3 on F, E, C, G, A, F we get angle(F, E, C) == angle(G, A, F) + 180 mod 360
By divide_by_2_mod_180_v3 on E, F, D, C, B, D we get angle(E, F, D) == angle(C, B, D) + 180 mod 360
By divide_by_2_mod_180_v0 on G, B, D, F, E, D we get angle(F, E, D) == angle(G, B, D) mod 360
By divide_by_2_mod_180_v0 on C, E, F, G, B, D we get angle(C, E, F) == angle(G, B, D) mod 360
By divide_by_2_mod_180_v2 on C, E, F, G, A, D we get angle(C, E, F) == angle(G, A, D) + 180 mod 360
By divide_by_2_mod_180_v2 on D, F, E, A, G, C we get angle(D, F, E) == angle(A, G, C) + 180 mod 360
By divide_by_2_mod_180_v0 on A, G, D, E, F, C we get angle(A, G, D) == angle(E, F, C) mod 360
By divide_by_2_mod_180_v2 on C, G, A, E, F, D we get angle(C, G, A) == angle(E, F, D) + 180 mod 360
By divide_by_2_mod_180_v3 on D, E, F, D, A, G we get angle(D, E, F) == angle(D, A, G) + 180 mod 360
By divide_by_2_mod_180_v0 on G, A, F, C, E, F we get angle(C, E, F) == angle(G, A, F) mod 360
By divide_by_2_mod_180_v0 on A, B, D, D, F, E we get angle(A, B, D) == angle(D, F, E) mod 360
By divide_by_2_mod_180_v0 on C, E, F, D, A, G we get angle(C, E, F) == angle(D, A, G) mod 360
By divide_by_2_mod_180_v3 on D, B, G, C, E, F we get angle(D, B, G) == angle(C, E, F) + 180 mod 360
By divide_by_2_mod_180_v1 on D, B, A, E, F, D we get angle(D, B, A) == angle(E, F, D) mod 360
By divide_by_2_mod_180_v2 on F, E, D, F, A, G we get angle(F, E, D) == angle(F, A, G) + 180 mod 360
By divide_by_2_mod_180_v3 on F, E, C, G, B, D we get angle(F, E, C) == angle(G, B, D) + 180 mod 360
By divide_by_2_mod_180_v3 on D, E, F, G, B, D we get angle(D, E, F) == angle(G, B, D) + 180 mod 360
By divide_by_2_mod_180_v3 on F, E, C, D, A, G we get angle(F, E, C) == angle(D, A, G) + 180 mod 360
By divide_by_2_mod_180_v2 on C, B, D, C, F, E we get angle(C, B, D) == angle(C, F, E) + 180 mod 360
By divide_by_2_mod_180_v2 on G, A, F, D, E, F we get angle(G, A, F) == angle(D, E, F) + 180 mod 360
By divide_by_2_mod_180_v1 on D, B, G, F, E, C we get angle(D, B, G) == angle(F, E, C) mod 360
By divide_by_2_mod_180_v2 on G, B, D, D, E, F we get angle(G, B, D) == angle(D, E, F) + 180 mod 360
By divide_by_2_mod_180_v3 on C, F, E, C, G, A we get angle(C, F, E) == angle(C, G, A) + 180 mod 360
By divide_by_2_mod_180_v3 on C, F, E, C, B, D we get angle(C, F, E) == angle(C, B, D) + 180 mod 360
By divide_by_2_mod_180_v3 on A, G, C, E, F, C we get angle(A, G, C) == angle(E, F, C) + 180 mod 360
By divide_by_2_mod_180_v2 on D, A, G, D, E, F we get angle(D, A, G) == angle(D, E, F) + 180 mod 360
By divide_by_2_mod_180_v2 on G, B, D, F, E, C we get angle(G, B, D) == angle(F, E, C) + 180 mod 360
By divide_by_2_mod_180_v2 on D, A, G, F, E, C we get angle(D, A, G) == angle(F, E, C) + 180 mod 360
By reverse_direction on E, F we get 180 == direction(E, F) - direction(F, E) mod 360
By divide_by_2_mod_180_v2 on C, E, F, D, B, G we get angle(C, E, F) == angle(D, B, G) + 180 mod 360
By divide_by_2_mod_180_v3 on D, B, C, E, F, C we get angle(D, B, C) == angle(E, F, C) + 180 mod 360
By divide_by_2_mod_180_v2 on C, B, D, E, F, D we get angle(C, B, D) == angle(E, F, D) + 180 mod 360
By divide_by_2_mod_180_v3 on D, B, G, F, E, D we get angle(D, B, G) == angle(F, E, D) + 180 mod 360
By divide_by_2_mod_180_v3 on G, A, D, C, E, F we get angle(G, A, D) == angle(C, E, F) + 180 mod 360
By divide_by_2_mod_180_v3 on A, G, C, D, F, E we get angle(A, G, C) == angle(D, F, E) + 180 mod 360
By divide_by_2_mod_180_v3 on E, F, D, C, G, A we get angle(E, F, D) == angle(C, G, A) + 180 mod 360
By reverse_direction on F, E we get 180 == direction(F, E) - direction(E, F) mod 360
By anti_similar_triangle_basic_properties on F, E, D, F, E, C we get angle(F, E, D) == 0 - angle(F, E, C) mod 360, angle(E, D, F) == 0 - angle(E, C, F) mod 360, angle(D, F, E) == 0 - angle(C, F, E) mod 360, log(distance(E, F)) + log(distance(C, E)) == log(distance(E, F)) + log(distance(D, E)), log(distance(C, E)) + log(distance(D, F)) == log(distance(D, E)) + log(distance(C, F)), log(distance(C, F)) + log(distance(E, F)) == log(distance(D, F)) + log(distance(E, F))
By internal_angle_bisector_definition_v0_r on D, E, C, F we get Line(E, F) == internal_angle_bisector(C, F, D)
By power_of_a_point_on_circle on B, Circle(B, C, D) we get 0 == power_of_a_point(B, Circle(B, C, D))
By external_angle_bisector_definition_v0_r on C, F, C, E we get Line(E, F) == external_angle_bisector(C, E, C)
By external_angle_bisector_definition_v0_r on F, D, F, E we get Line(D, E) == external_angle_bisector(F, E, F)
By power_of_a_point_on_circle on D, Circle(B, C, D) we get 0 == power_of_a_point(D, Circle(B, C, D))
By power_of_a_point_on_circle on G, Circle(A, B, D) we get 0 == power_of_a_point(G, Circle(A, B, D))
By power_of_a_point_on_circle on D, Circle(A, B, D) we get 0 == power_of_a_point(D, Circle(A, B, D))
By external_angle_bisector_definition_v0_r on D, F, D, E we get Line(E, F) == external_angle_bisector(D, E, D)
By external_angle_bisector_definition_v0_r on F, C, F, E we get Line(C, E) == external_angle_bisector(F, E, F)
By power_of_a_point_on_circle on C, Circle(B, C, D) we get 0 == power_of_a_point(C, Circle(B, C, D))
By power_of_a_point_in_circle on B, Circle(A, B, D) we get 0 == power_of_a_point(B, Circle(A, B, D))
By internal_angle_bisector_definition_v0_r on D, F, C, E we get Line(E, F) == internal_angle_bisector(C, E, D)
By power_of_a_point_in_circle on A, Circle(A, B, D) we get 0 == power_of_a_point(A, Circle(A, B, D))
By altitude_definition on orthocenter(D, G, excenter(A, B, C)), excenter(A, B, C), G, f we get f == altitude(orthocenter(D, G, excenter(A, B, C)), G, excenter(A, B, C))
By altitude_definition on orthocenter(D, excenter(A, B, C), excenter(B, A, C)), excenter(A, B, C), C, g we get g == altitude(orthocenter(D, excenter(A, B, C), excenter(B, A, C)), C, excenter(A, B, C))
By altitude_definition on orthocenter(D, excenter(A, B, C), excenter(B, A, C)), B, D, h we get h == altitude(orthocenter(D, excenter(A, B, C), excenter(B, A, C)), B, D)
By altitude_definition on orthocenter(G, excenter(A, B, C), excenter(B, A, C)), A, G, f we get f == altitude(orthocenter(G, excenter(A, B, C), excenter(B, A, C)), A, G)
By altitude_definition on orthocenter(D, G, excenter(A, B, C)), D, C, perpendicular_line(C, g) we get perpendicular_line(C, g) == altitude(orthocenter(D, G, excenter(A, B, C)), C, D)
By altitude_definition on orthocenter(D, excenter(A, B, C), excenter(B, A, C)), excenter(B, A, C), A, Line(A, G) we get Line(A, G) == altitude(orthocenter(D, excenter(A, B, C), excenter(B, A, C)), A, excenter(B, A, C))
By altitude_definition on orthocenter(D, G, excenter(A, B, C)), E, G, perpendicular_line(C, g) we get perpendicular_line(C, g) == altitude(orthocenter(D, G, excenter(A, B, C)), E, G)
By altitude_definition on orthocenter(G, excenter(A, B, C), excenter(B, A, C)), B, G, Line(B, D) we get Line(B, D) == altitude(orthocenter(G, excenter(A, B, C), excenter(B, A, C)), B, G)
By altitude_definition on orthocenter(D, G, excenter(A, B, C)), G, C, perpendicular_line(C, g) we get perpendicular_line(C, g) == altitude(orthocenter(D, G, excenter(A, B, C)), C, G)
By altitude_definition on orthocenter(G, excenter(A, B, C), excenter(B, A, C)), excenter(B, A, C), G, Line(B, D) we get Line(B, D) == altitude(orthocenter(G, excenter(A, B, C), excenter(B, A, C)), G, excenter(B, A, C))
By altitude_definition on orthocenter(D, excenter(A, B, C), excenter(B, A, C)), F, A, Line(A, G) we get Line(A, G) == altitude(orthocenter(D, excenter(A, B, C), excenter(B, A, C)), A, F)
By altitude_definition on orthocenter(G, excenter(A, B, C), excenter(B, A, C)), excenter(A, B, C), excenter(B, A, C), g we get g == altitude(orthocenter(G, excenter(A, B, C), excenter(B, A, C)), excenter(A, B, C), excenter(B, A, C))
By altitude_definition on orthocenter(G, excenter(A, B, C), excenter(B, A, C)), C, excenter(B, A, C), g we get g == altitude(orthocenter(G, excenter(A, B, C), excenter(B, A, C)), C, excenter(B, A, C))
By altitude_definition on orthocenter(D, G, excenter(A, B, C)), D, E, perpendicular_line(C, g) we get perpendicular_line(C, g) == altitude(orthocenter(D, G, excenter(A, B, C)), D, E)
By altitude_definition on orthocenter(D, G, excenter(A, B, C)), D, excenter(A, B, C), h we get h == altitude(orthocenter(D, G, excenter(A, B, C)), D, excenter(A, B, C))
By altitude_definition on orthocenter(D, excenter(A, B, C), excenter(B, A, C)), D, A, Line(A, G) we get Line(A, G) == altitude(orthocenter(D, excenter(A, B, C), excenter(B, A, C)), A, D)
By altitude_definition on orthocenter(D, excenter(A, B, C), excenter(B, A, C)), excenter(A, B, C), excenter(B, A, C), g we get g == altitude(orthocenter(D, excenter(A, B, C), excenter(B, A, C)), excenter(A, B, C), excenter(B, A, C))
By altitude_definition on orthocenter(D, excenter(A, B, C), excenter(B, A, C)), D, F, Line(A, G) we get Line(A, G) == altitude(orthocenter(D, excenter(A, B, C), excenter(B, A, C)), D, F)
By altitude_definition on orthocenter(D, G, excenter(A, B, C)), excenter(A, B, C), B, h we get h == altitude(orthocenter(D, G, excenter(A, B, C)), B, excenter(A, B, C))
By power_of_a_point_definition on C, G, D, Circle(A, B, D) we get log(distance(C, G)) + log(distance(C, D)) == log(power_of_a_point(C, Circle(A, B, D)))
By altitude_definition on orthocenter(D, excenter(A, B, C), excenter(B, A, C)), C, excenter(B, A, C), g we get g == altitude(orthocenter(D, excenter(A, B, C), excenter(B, A, C)), C, excenter(B, A, C))
By altitude_definition on orthocenter(G, excenter(A, B, C), excenter(B, A, C)), B, excenter(B, A, C), Line(B, D) we get Line(B, D) == altitude(orthocenter(G, excenter(A, B, C), excenter(B, A, C)), B, excenter(B, A, C))
By altitude_definition on orthocenter(D, G, excenter(A, B, C)), A, G, f we get f == altitude(orthocenter(D, G, excenter(A, B, C)), A, G)
By altitude_definition on orthocenter(D, G, excenter(A, B, C)), G, D, perpendicular_line(C, g) we get perpendicular_line(C, g) == altitude(orthocenter(D, G, excenter(A, B, C)), D, G)
By altitude_definition on orthocenter(D, G, excenter(A, B, C)), E, C, perpendicular_line(C, g) we get perpendicular_line(C, g) == altitude(orthocenter(D, G, excenter(A, B, C)), C, E)
By altitude_definition on orthocenter(G, excenter(A, B, C), excenter(B, A, C)), A, excenter(A, B, C), f we get f == altitude(orthocenter(G, excenter(A, B, C), excenter(B, A, C)), A, excenter(A, B, C))
By altitude_definition on orthocenter(D, G, excenter(A, B, C)), A, excenter(A, B, C), f we get f == altitude(orthocenter(D, G, excenter(A, B, C)), A, excenter(A, B, C))
By altitude_definition on orthocenter(D, excenter(A, B, C), excenter(B, A, C)), F, excenter(B, A, C), Line(A, G) we get Line(A, G) == altitude(orthocenter(D, excenter(A, B, C), excenter(B, A, C)), F, excenter(B, A, C))
By perpendicular_bisector_sufficient_conditions on C, D, F, E we get Line(E, F) == perpendicular_bisector(C, D)
By altitude_definition on orthocenter(G, excenter(A, B, C), excenter(B, A, C)), excenter(A, B, C), G, f we get f == altitude(orthocenter(G, excenter(A, B, C), excenter(B, A, C)), G, excenter(A, B, C))
By altitude_definition on orthocenter(G, excenter(A, B, C), excenter(B, A, C)), C, excenter(A, B, C), g we get g == altitude(orthocenter(G, excenter(A, B, C), excenter(B, A, C)), C, excenter(A, B, C))
By altitude_definition on orthocenter(D, excenter(A, B, C), excenter(B, A, C)), excenter(A, B, C), D, h we get h == altitude(orthocenter(D, excenter(A, B, C), excenter(B, A, C)), D, excenter(A, B, C))
By altitude_definition on orthocenter(D, G, excenter(A, B, C)), D, B, h we get h == altitude(orthocenter(D, G, excenter(A, B, C)), B, D)
By altitude_definition on orthocenter(D, excenter(A, B, C), excenter(B, A, C)), D, excenter(B, A, C), Line(A, G) we get Line(A, G) == altitude(orthocenter(D, excenter(A, B, C), excenter(B, A, C)), D, excenter(B, A, C))
By altitude_definition on orthocenter(D, excenter(A, B, C), excenter(B, A, C)), excenter(A, B, C), B, h we get h == altitude(orthocenter(D, excenter(A, B, C), excenter(B, A, C)), B, excenter(A, B, C))
By power_of_a_point_definition on E, D, C, Circle(B, C, D) we get log(distance(D, E)) + log(distance(C, E)) == log(power_of_a_point(E, Circle(B, C, D)))
By power_of_a_point_definition on F, D, A, Circle(A, B, D) we get log(distance(D, F)) + log(distance(A, F)) == log(power_of_a_point(F, Circle(A, B, D)))
By power_of_a_point_definition on excenter(B, A, C), A, D, Circle(A, B, D) we get log(power_of_a_point(excenter(B, A, C), Circle(A, B, D))) == log(distance(A, excenter(B, A, C))) + log(distance(D, excenter(B, A, C)))
By power_of_a_point_definition on E, D, G, Circle(A, B, D) we get log(distance(D, E)) + log(distance(E, G)) == log(power_of_a_point(E, Circle(A, B, D)))
By power_of_a_point_definition on G, C, D, Circle(B, C, D) we get log(distance(C, G)) + log(distance(D, G)) == log(power_of_a_point(G, Circle(B, C, D)))
By isosceles_triangle_altitude_v0 on F, D, C we get identical(perpendicular_bisector(C, D), internal_angle_bisector(C, F, D), perpendicular_line(F, Line(C, D)))
By power_of_a_point_definition on excenter(A, B, C), A, G, Circle(A, B, D) we get log(power_of_a_point(excenter(A, B, C), Circle(A, B, D))) == log(distance(A, excenter(A, B, C))) + log(distance(G, excenter(A, B, C)))
By power_of_a_point_definition on excenter(B, A, C), B, G, Circle(A, B, D) we get log(power_of_a_point(excenter(B, A, C), Circle(A, B, D))) == log(distance(B, excenter(B, A, C))) + log(distance(G, excenter(B, A, C)))
By power_of_a_point_definition on excenter(A, B, C), D, B, Circle(A, B, D) we get log(power_of_a_point(excenter(A, B, C), Circle(A, B, D))) == log(distance(D, excenter(A, B, C))) + log(distance(B, excenter(A, B, C)))
By power_of_a_point_definition on excenter(A, B, C), B, D, Circle(B, C, D) we get log(power_of_a_point(excenter(A, B, C), Circle(B, C, D))) == log(distance(B, excenter(A, B, C))) + log(distance(D, excenter(A, B, C)))
By isosceles_triangle_altitude_v0 on F, C, D we get identical(perpendicular_bisector(C, D), internal_angle_bisector(C, F, D), perpendicular_line(F, Line(C, D)))
By concurrent_sufficient_conditions on Line(E, F), f, Line(B, F) we get concurrent(f, Line(B, F), Line(E, F))
By concyclic_sufficient_conditions_v0 on A, F, E, G we get concyclic(A, E, F, G)
By concurrent_sufficient_conditions on Line(B, F), Line(C, F), Line(E, F) we get concurrent(Line(B, F), Line(C, F), Line(E, F))
By concurrent_sufficient_conditions on Line(E, F), Line(C, F), Line(B, F) we get concurrent(Line(B, F), Line(C, F), Line(E, F))
By concurrent_sufficient_conditions on Line(E, F), Line(B, F), f we get concurrent(f, Line(B, F), Line(E, F))
By concurrent_sufficient_conditions on f, Line(E, F), Line(B, F) we get concurrent(f, Line(B, F), Line(E, F))
By concurrent_sufficient_conditions on Line(B, F), f, Line(E, F) we get concurrent(f, Line(B, F), Line(E, F))
By concurrent_sufficient_conditions on Line(C, F), f, Line(E, F) we get concurrent(f, Line(C, F), Line(E, F))
By concurrent_sufficient_conditions on Line(C, F), Line(E, F), Line(B, F) we get concurrent(Line(B, F), Line(C, F), Line(E, F))
By concurrent_sufficient_conditions on Line(B, F), Line(E, F), Line(C, F) we get concurrent(Line(B, F), Line(C, F), Line(E, F))
By concurrent_sufficient_conditions on f, Line(E, F), Line(C, F) we get concurrent(f, Line(C, F), Line(E, F))
By concurrent_sufficient_conditions on Line(E, F), f, Line(C, F) we get concurrent(f, Line(C, F), Line(E, F))
By concurrent_sufficient_conditions on Line(C, F), Line(B, F), Line(E, F) we get concurrent(Line(B, F), Line(C, F), Line(E, F))
By concurrent_sufficient_conditions on Line(C, F), Line(E, F), f we get concurrent(f, Line(C, F), Line(E, F))
By concurrent_sufficient_conditions on f, Line(C, F), Line(E, F) we get concurrent(f, Line(C, F), Line(E, F))
By concurrent_sufficient_conditions on Line(B, F), Line(E, F), f we get concurrent(f, Line(B, F), Line(E, F))
By concurrent_sufficient_conditions on Line(E, F), Line(B, F), Line(C, F) we get concurrent(Line(B, F), Line(C, F), Line(E, F))
By concurrent_sufficient_conditions on f, Line(B, F), Line(E, F) we get concurrent(f, Line(B, F), Line(E, F))
By concurrent_sufficient_conditions on Line(E, F), Line(C, F), f we get concurrent(f, Line(C, F), Line(E, F))
By perpendicular_line_definition on E, g, Line(E, F) we get g == perpendicular_line(E, Line(E, F))
By perpendicular_line_definition on C, g, Line(E, F) we get g == perpendicular_line(C, Line(E, F))
By perpendicular_line_definition on G, g, Line(E, F) we get g == perpendicular_line(G, Line(E, F))
By perpendicular_line_definition on D, g, Line(E, F) we get g == perpendicular_line(D, Line(E, F))
By projection_definition on F, E, g we get E == projection(F, g)
By circle_radius_v0_r on A, c we get radius(c) == distance(A, center(c))
By circle_radius_v0_r on G, Circle(A, B, D) we get radius(Circle(A, B, D)) == distance(G, center(Circle(A, B, D)))
By circle_radius_v0_r on C, c we get radius(c) == distance(C, center(c))
By circle_radius_v0_r on A, Circle(A, B, D) we get radius(Circle(A, B, D)) == distance(A, center(Circle(A, B, D)))
By circle_radius_v0_r on D, Circle(A, B, D) we get radius(Circle(A, B, D)) == distance(D, center(Circle(A, B, D)))
By circle_radius_v0_r on B, c we get radius(c) == distance(B, center(c))
By circle_radius_v0_r on F, c we get radius(c) == distance(F, center(c))
By circle_radius_v0_r on B, Circle(A, B, D) we get radius(Circle(A, B, D)) == distance(B, center(Circle(A, B, D)))
By angle_to_center on G, D, B, Circle(A, B, D) we get 2 * angle(G, D, B) == angle(G, center(Circle(A, B, D)), B) mod 360
By angle_to_center on C, F, A, c we get 2 * angle(C, F, A) == angle(C, center(c), A) mod 360
By angle_to_center on C, B, F, c we get 2 * angle(C, B, F) == angle(C, center(c), F) mod 360
By angle_to_center on D, B, G, Circle(A, B, D) we get 2 * angle(D, B, G) == angle(D, center(Circle(A, B, D)), G) mod 360
By angle_to_center on B, C, F, c we get 2 * angle(B, C, F) == angle(B, center(c), F) mod 360
By angle_to_center on G, B, A, Circle(A, B, D) we get 2 * angle(G, B, A) == angle(G, center(Circle(A, B, D)), A) mod 360
By angle_to_center on D, G, B, Circle(A, B, D) we get 2 * angle(D, G, B) == angle(D, center(Circle(A, B, D)), B) mod 360
By angle_to_center on A, G, B, Circle(A, B, D) we get 2 * angle(A, G, B) == angle(A, center(Circle(A, B, D)), B) mod 360
By angle_to_center on A, C, B, c we get 2 * angle(A, C, B) == angle(A, center(c), B) mod 360
By angle_to_center on G, A, B, Circle(A, B, D) we get 2 * angle(G, A, B) == angle(G, center(Circle(A, B, D)), B) mod 360
By angle_to_center on C, A, B, c we get 2 * angle(C, A, B) == angle(C, center(c), B) mod 360
By angle_to_center on B, A, D, Circle(A, B, D) we get 2 * angle(B, A, D) == angle(B, center(Circle(A, B, D)), D) mod 360
By angle_to_center on G, B, D, Circle(A, B, D) we get 2 * angle(G, B, D) == angle(G, center(Circle(A, B, D)), D) mod 360
By angle_to_center on A, B, D, Circle(A, B, D) we get 2 * angle(A, B, D) == angle(A, center(Circle(A, B, D)), D) mod 360
By angle_to_center on F, B, A, c we get 2 * angle(F, B, A) == angle(F, center(c), A) mod 360
By angle_to_center on B, A, C, c we get 2 * angle(B, A, C) == angle(B, center(c), C) mod 360
By angle_to_center on F, A, C, c we get 2 * angle(F, A, C) == angle(F, center(c), C) mod 360
By angle_to_center on B, A, F, c we get 2 * angle(B, A, F) == angle(B, center(c), F) mod 360
By angle_to_center on F, C, B, c we get 2 * angle(F, C, B) == angle(F, center(c), B) mod 360
By angle_to_center on B, G, D, Circle(A, B, D) we get 2 * angle(B, G, D) == angle(B, center(Circle(A, B, D)), D) mod 360
By angle_to_center on B, F, A, c we get 2 * angle(B, F, A) == angle(B, center(c), A) mod 360
By angle_to_center on A, B, G, Circle(A, B, D) we get 2 * angle(A, B, G) == angle(A, center(Circle(A, B, D)), G) mod 360
By angle_to_center on A, D, G, Circle(A, B, D) we get 2 * angle(A, D, G) == angle(A, center(Circle(A, B, D)), G) mod 360
By angle_to_center on A, G, D, Circle(A, B, D) we get 2 * angle(A, G, D) == angle(A, center(Circle(A, B, D)), D) mod 360
By angle_to_center on F, C, A, c we get 2 * angle(F, C, A) == angle(F, center(c), A) mod 360
By angle_to_center on B, G, A, Circle(A, B, D) we get 2 * angle(B, G, A) == angle(B, center(Circle(A, B, D)), A) mod 360
By angle_to_center on B, A, G, Circle(A, B, D) we get 2 * angle(B, A, G) == angle(B, center(Circle(A, B, D)), G) mod 360
By angle_to_center on B, F, C, c we get 2 * angle(B, F, C) == angle(B, center(c), C) mod 360
By angle_to_center on B, D, A, Circle(A, B, D) we get 2 * angle(B, D, A) == angle(B, center(Circle(A, B, D)), A) mod 360
By angle_to_center on D, B, A, Circle(A, B, D) we get 2 * angle(D, B, A) == angle(D, center(Circle(A, B, D)), A) mod 360
By angle_to_center on F, A, B, c we get 2 * angle(F, A, B) == angle(F, center(c), B) mod 360
By angle_to_center on A, D, B, Circle(A, B, D) we get 2 * angle(A, D, B) == angle(A, center(Circle(A, B, D)), B) mod 360
By angle_to_center on D, A, G, Circle(A, B, D) we get 2 * angle(D, A, G) == angle(D, center(Circle(A, B, D)), G) mod 360
By angle_to_center on C, A, F, c we get 2 * angle(C, A, F) == angle(C, center(c), F) mod 360
By angle_to_center on D, A, B, Circle(A, B, D) we get 2 * angle(D, A, B) == angle(D, center(Circle(A, B, D)), B) mod 360
By angle_to_center on F, B, C, c we get 2 * angle(F, B, C) == angle(F, center(c), C) mod 360
By angle_to_center on A, F, C, c we get 2 * angle(A, F, C) == angle(A, center(c), C) mod 360
By angle_to_center on A, C, F, c we get 2 * angle(A, C, F) == angle(A, center(c), F) mod 360
By angle_to_center on B, D, G, Circle(A, B, D) we get 2 * angle(B, D, G) == angle(B, center(Circle(A, B, D)), G) mod 360
By angle_to_center on A, B, C, c we get 2 * angle(A, B, C) == angle(A, center(c), C) mod 360
By angle_to_center on A, F, B, c we get 2 * angle(A, F, B) == angle(A, center(c), B) mod 360
By angle_to_center on C, F, B, c we get 2 * angle(C, F, B) == angle(C, center(c), B) mod 360
By angle_to_center on G, D, A, Circle(A, B, D) we get 2 * angle(G, D, A) == angle(G, center(Circle(A, B, D)), A) mod 360
By angle_to_center on B, C, A, c we get 2 * angle(B, C, A) == angle(B, center(c), A) mod 360
By angle_to_center on A, B, F, c we get 2 * angle(A, B, F) == angle(A, center(c), F) mod 360
By angle_to_center on D, G, A, Circle(A, B, D) we get 2 * angle(D, G, A) == angle(D, center(Circle(A, B, D)), A) mod 360
By angle_to_center on G, A, D, Circle(A, B, D) we get 2 * angle(G, A, D) == angle(G, center(Circle(A, B, D)), D) mod 360
By angle_to_center on C, B, A, c we get 2 * angle(C, B, A) == angle(C, center(c), A) mod 360
By projection_definition on C, E, Line(E, F) we get E == projection(C, Line(E, F))
By projection_definition on D, E, Line(E, F) we get E == projection(D, Line(E, F))
By projection_definition on G, E, Line(E, F) we get E == projection(G, Line(E, F))
By similar_triangle_basic_properties on G, D, A, F, C, E we get angle(F, C, E) == angle(G, D, A) mod 360, angle(C, E, F) == angle(D, A, G) mod 360, angle(A, G, D) == angle(E, F, C) mod 360, log(distance(C, F)) + log(distance(A, D)) == log(distance(D, G)) + log(distance(C, E)), log(distance(A, D)) + log(distance(E, F)) == log(distance(C, E)) + log(distance(A, G)), log(distance(A, G)) + log(distance(C, F)) == log(distance(E, F)) + log(distance(D, G))
By similar_triangle_basic_properties on D, G, A, C, F, E we get angle(C, F, E) == angle(D, G, A) mod 360, angle(F, E, C) == angle(G, A, D) mod 360, angle(A, D, G) == angle(E, C, F) mod 360, log(distance(C, F)) + log(distance(A, G)) == log(distance(D, G)) + log(distance(E, F)), log(distance(A, G)) + log(distance(C, E)) == log(distance(E, F)) + log(distance(A, D)), log(distance(A, D)) + log(distance(C, F)) == log(distance(C, E)) + log(distance(D, G))
By anti_similar_triangle_basic_properties on D, E, F, D, A, G we get angle(D, E, F) == 0 - angle(D, A, G) mod 360, angle(E, F, D) == 0 - angle(A, G, D) mod 360, angle(F, D, E) == 0 - angle(G, D, A) mod 360, log(distance(A, D)) + log(distance(E, F)) == log(distance(D, E)) + log(distance(A, G)), log(distance(A, G)) + log(distance(D, F)) == log(distance(E, F)) + log(distance(D, G)), log(distance(D, F)) + log(distance(A, D)) == log(distance(D, G)) + log(distance(D, E))
By anti_similar_triangle_basic_properties on G, A, D, F, E, D we get angle(G, A, D) == 0 - angle(F, E, D) mod 360, angle(A, D, G) == 0 - angle(E, D, F) mod 360, angle(D, G, A) == 0 - angle(D, F, E) mod 360, log(distance(A, G)) + log(distance(D, E)) == log(distance(E, F)) + log(distance(A, D)), log(distance(A, D)) + log(distance(D, F)) == log(distance(D, E)) + log(distance(D, G)), log(distance(D, F)) + log(distance(A, G)) == log(distance(D, G)) + log(distance(E, F))
By double_perpendicular_and_parallel_v0 on Line(E, F), g, perpendicular_line(C, g) we get parallel(Line(E, F), perpendicular_line(C, g))
By external_angle_bisector_definition_v0_r on C, F, G, E we get Line(E, F) == external_angle_bisector(C, E, G)
By external_angle_bisector_definition_v0_r on G, F, G, E we get Line(E, F) == external_angle_bisector(G, E, G)
By internal_angle_bisector_definition_v0_r on A, E, C, F we get Line(E, F) == internal_angle_bisector(A, F, C)
By internal_angle_bisector_definition_v0_r on G, F, D, E we get Line(E, F) == internal_angle_bisector(D, E, G)
By altitude_definition on F, D, C, Line(E, F) we get Line(E, F) == altitude(F, C, D)
By altitude_definition on F, E, D, Line(E, F) we get Line(E, F) == altitude(F, D, E)
By altitude_definition on F, G, E, Line(E, F) we get Line(E, F) == altitude(F, E, G)
By altitude_definition on F, G, C, Line(E, F) we get Line(E, F) == altitude(F, C, G)
By altitude_definition on D, E, F, g we get g == altitude(D, E, F)
By altitude_definition on F, E, C, Line(E, F) we get Line(E, F) == altitude(F, C, E)
By altitude_definition on F, D, G, Line(E, F) we get Line(E, F) == altitude(F, D, G)
By altitude_definition on G, E, F, g we get g == altitude(G, E, F)
By altitude_definition on C, F, E, g we get g == altitude(C, E, F)
