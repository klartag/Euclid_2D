Assumptions:
A, B, C, D, E, F, G, H, I: Point
f, g, h, i, j, k: Line
c, d: Circle
distinct(A, B, C, D, E, F, G, H, I)
distinct(f, g, h, i, j, k)
distinct(c, d)
f == Line(A, B)
g == Line(B, C)
h == parallel_line(C, f)
i == parallel_line(A, g)
D == line_intersection(h, i)
j == internal_angle_bisector(B, C, D)
k == external_angle_bisector(A, D, C)
E == line_intersection(i, j)
F == line_intersection(f, k)
c == Circle(A, B, E)
d == Circle(A, D, F)
G in c, d
H in h, d
I == line_intersection(g, k)

Embedding:
C := {"x": "0.430000002231648525974350150136160664260387420654296875", "y": "-2.323146070990619538321197978802956640720367431640625"}
B := {"x": "0.77798249453488288462921218524570576846599578857421875", "y": "-0.05529904332674846767492482513262075372040271759033203125"}
g := {"point": {"x": "0.77798249453488288462921218524570576846599578857421875", "y": "-0.05529904332674846767492482513262075372040271759033203125"}, "direction": {"x": "-0.347982492303234358654862035109545104205608367919921875", "y": "-2.26784702766387107064627315367033588699996471405029296875"}}
A := {"x": "-0.5831949458737233360494656153605319559574127197265625", "y": "-1.2475263827412845785147510468959808349609375"}
i := {"point": {"x": "-0.5831949458737233360494656153605319559574127197265625", "y": "-1.2475263827412845785147510468959808349609375"}, "direction": {"x": "-0.347982492303234358654862035109545104205608367919921875", "y": "-2.26784702766387107064627315367033588699996471405029296875"}}
f := {"point": {"x": "-0.5831949458737233360494656153605319559574127197265625", "y": "-1.2475263827412845785147510468959808349609375"}, "direction": {"x": "1.36117744040860622067867780060623772442340850830078125", "y": "1.19222733941453611083982622176336008124053478240966796875"}}
h := {"point": {"x": "0.430000002231648525974350150136160664260387420654296875", "y": "-2.323146070990619538321197978802956640720367431640625"}, "direction": {"x": "1.36117744040860622067867780060623772442340850830078125", "y": "1.19222733941453611083982622176336008124053478240966796875"}}
D := {"x": "-0.931177438176957694704327650470077060163021087646484375", "y": "-3.51537341040515564916102420056631672196090221405029296875"}
k := {"point": {"x": "-0.931177438176957694704327650470077060163021087646484375", "y": "-3.51537341040515564916102420056631672196090221405029296875"}, "direction": {"x": "-0.60058202721414679102188206400009105714921890678805144447484299531242122933953281494919429205528862985133792066659286043196644678469209827530325795269477196094491158681338119880176105018554953633175833018214364686938010434790029231248425813698510988946534325754544468239884505282730066575463231796184304299891522272514434659510729874621783119610836617250857049120441820756944438394707663068038422484928581434645061049962138912456805977463287854978726003594024065769061395116142101062535230674282860043816248912906794425414179737074669786299140121536380736089582360674805259799823437432816447788560178443201561730870899845568437811504616151302929904990522819050429368440466739243120637354192788345465508189471179379487384562423432989088677341712438753224941941236931778967845011974891233767600932640281835617920972694370229888055749835227354944741809766491099054854097348067537370867327714236883804922095580967927765351674601417354354698827268700412757564712103927165146079027421090511447464886785042815486262156592337092654692755433265167266050540804572087923251556717089856294169875796050151684120596697049275315295308988299446360477431645827406191090356600124207642265644788405779587071687735515783916216422627045105770924601809457434077555482299572755379627759540800775154020955174775315827745965507972847985682681519597576099550575053180516753941807570590504437232127461361024570533746783723010717184822592302054679561676007254836070539502242206737686547047859621827088039698241286468093680180456909465290598430897563147847764443247833437718664046776331885348084320079218536618933717522470751998745757494810187773805265744143621589413684360095216956264159429823239278010816578495841702516133877279320065468499381584036908538827677897755074596555520407052623352148718434838219868460292332742799546746862726185705537810183887389486532849255482340712165801689825365476432213585171326163831431989143510958738301809979607245390846685183252776981188666084782278816434695554150057942531179181604296655919", "y": "0.32955247455289340768944845009728096365543701017187795920804841519124846640499533595449989098588241536849432962802111357141433028711682202806784413996528400306776768013973725908460793138062395203263603463927744378718465466484017769829180894706691595914841804951112965666103634523697014768184129181755840827772825122196955990491601610221839032075532303336220256004298872131635176993378069053563123200669529245082030520634519263691277846116053560597878060895805440430277847432601666926711005868948961084329796387414128543553923788180201210263967714242136355631704331561655914681440891002642968720351858623508945559057151155659651717858754702993508570094694743251439704414207822920664558860547774141451140056416521392547848210845958466791019911416893916458790469473989713359293511329530416929553346253659445778825692312623141114454157735958302573776156474928880732476276476959382564869763029282332859096290950192204971004852095971673243426663640174575507587487453949790271386963361748768662439085501328756266041849337868190916825734713139785056987205663865916086772382130750627000144569145207552641702553930616850287079643458822116566507527037159379756749724306762427262783255213477581128736833780504593282168687243540086194101167530181768325913301038454856268764870684265990750024197974683827012708733607081471166845786750041680634501558024763817426726913129596620880582557835989006550115654914698499899760641076941715518328473435307051843959670991881676406894084594786772225534074985883085701449135420797245066429034964349637889684294669082872416213723949052739526009514756019082023535642072784011782915649346650670007530924890046516136947421374969548222837627115320336201738189340064618869709260131546250915206385475079951856534981112698399234886833828082523991674478732597972665123091511051120890296934245418654608328502510367647224729432555793419066475814144454939592890186896463502445712229082407464796901766935533276517972613958048427801078822245577933230048605692471802193676872681839458179647849"}}
F := {"x": "-2.3091463753858615002639388237982656813062872737898639153577766604768140753913628992751377696426345636358872853195966842944214927556125281761409933541443477405614514380498265563836671089359100902142708066963114763888781998284893201146875954723495205418727873668894368084987358503800815420314733994635120236550989434030185614310658784449673000107881845492907139350428242364860665997089690469954473744073537083242202363666721314744477722044355330192360894423690456253696883902281759947101752262309577331044652481131976431090066882556270640555035131709779706155373092718875136514835626068197643262984729075319757051132730379882119699333368419590961033780891449331398128933397391166893673195331594497928584001007441436812100289539354649234671439812339823848050425318395544883254108925083795029520617928445889108715996332411320529973549611925416391270622462084584662810404537570370234019763680112422696187341491984948897804391923271618335889204147521724001210490026572699976182405500765993204882061576652286941594115752622271301419653017229938556532857884363074974082745018319318346200457198845995796979511769757700149187486102313320733361886895858932174173224807969992981179679002989775101054769951292358373075224505315312969700127473986398522677530033785218367846492698418920420111133219197775043212797282161199295325659786603083083130171766188729321336511176443755375713721570019671530674221874301224973568266549745948613802223602301904978727166820754088092984086710103958676126223104240895819312314100189282353655365763732208160695644167607863029367335596350212226233752096143637646401619199823235393422179730967863424521068102599433612925742668152736318615555421122005933666359257883859902325013471559367875326635257243925437890966109646339601326072813241418870439400771684857693059684623921604702158326008105048120037829614916371248265220609912099234470345850360083442112772389253210531111356157155014882891045034348536009917164581546173982288602304534837030197244843968170848912208734303527583306779", "y": "-2.7592517608435482711599622717651579473926852040615633755366483421126150108503713864659534174824559199969418777121870114786481323381349736057169538033742841092003774356049379897229628565487518000786712241799743743266027401389802233433758886891281338041803471401460666817800286756157257988500347923631093032053519980133277009289069755794014127242170319880768876291811905359074821072425139461776781402791750127575032915380049463734827467570062347738768764401240373984878922539658292807000435534222503481527339305036896394749946887705988961773491506791699215715136573860950963325527833819491159075507579697028804839454217788534429196890252863149647236903049549279056260053087014693448296501924743752950795957715567550509697780227897949157238233165534173096550752400109378303622805570041515048115022528167516323317479192565176946663819790221664065604875098181619982577733075438746151364990567319955747387412690938139671795408430100847558492516855418628132676644829314678631044764867997382871224761032162909927916406047009404546727490177089559109662564590678955668792277419944715307820503284535712108420031597236481806587306301023518288438016655044180186762417384456320559049312848450371731905152698052512812784199946218761607614767709263777712926039151983804928542750377103595942116234133658953909147956819112156133447064917755759892935319602119381662624237186152912319457391323408681348368830047032401383396197651763141129054716402861962155747172316082242801163573343143735741954493997071815453089618097459873142621630635449731196916593090572745111536495281518464350236536144650522885852767251829648364760366845434860617912372645924965292575125668286117507493092207678864331777461428451021742004812148773136180376873380776395228117449377459644910556733163447753218754951186562004132458806579349976385977278915258662374981237850015972526884816685651381260174727055538748171437185610432811924959642545818032219790409961621537348553246711573666209093116242713614948786811866510667176537791847061843151717915"}
d := {"center": {"x": "-1.1705957557229171742605852138689842016933549698005625955646677540714671247245127284682448967199181691997573832584184598203566968250988510054650399439095125065974520939933404445262969306538431276078864843508230897372039718605836508024729923671904081484904905710273245459998575236485804267532716364518874199179181296603332199747766619817793774605275439477586117501854035162126368735657259102277122462097547264709420248727226091327015694197518892097152927278404022031723153902272944664996767532114955619599561256702148352802523019367236569318580444417278971335546300851583422653612047096751779224247938056407336809287314696638930029586875526498401013937411507549460306980668287506045659410855920374606604683161332481200081165581475495121831613284123355393466081911908204055394358612114804972276628604075451754773166958534509090605710997449679756308712034092197383979567303056108019332424971378115909985063719732603848384702244485853879455465716065320490908043298845564040750222641578686084333720886044561542813368423592781967637120824692964921452250475930891941701160349957013395844746529300055106870964715300301343504223034882568231162655968844910831497234546295914592222773401685609718640863623415897765082101567857349009934567547256648973784187799245655189350315152784367952147001398797663582567165360083950089530248953630830892060859895097839972647512825782172900467245472217519071150234180727376476006682988205975087222839730225753325592287328320684740809931813343985992862759321475335711620602574784559727296996794886377110254053418750951014100760740979175661678610146410716897285178463699892121568356416586269297826214480729407726355731697065919560059176824871597461902262889629781663373859175017090535802577161538442485401059200393304963841232151617004505672762147982291980413000317918948179855487568112501731385201082954578731892166220224417366339344018195642137987488513608587045754074803594477557293114270333245524083411144646823115608000023068080748349354824615298508817820575329648613465049", "y": "-2.3180155958630588341190644771684521182540038064555012868149532759695846592498453145914234838958007853991231540584068872910892363364231702777896814147463689372993858000830900203588522831299384619012831990391670922058570877347733354366086820362748502483535249652584694962961169531604895783364962868295237419085766706332639071524037938427052797273287931456627203781538763569815427389512116420286405391478629746160567281796193029441473039527327109037060255933176706169657988154044572845390984049992739975579008613565314291655494363855560211767849748654494945086971380632831317897214212565527155765918650144280293001703782449417664857595652233023449735308216912257036515159396653997289610652550406630725932865053303216619961333331873453908663102035242849282695807677817675340129991455282985857534568923048323717725654540371256955677671805295140530622399686726838474468931868817357350832810616350738470359606906221781783724828889009960060639705971486476649737188165106239637039226142764614361457902636115037407742880160059249192391042969704465300090111627662207588470097932961716534658436112504417286856749170129916093539171567332770679558731744813376661068401860961521415829977907898221626474479139914698752055617140176312056470554001902586334114213247614799100709551032183005724828153223070469590445408763186671145379135920560517363489969475983107556469200652395592260343267785234462120160356502452062366211946494290132106558816599945421726106999557402073338776686707810599199207174801850078835964063305733850801954366259921831647175064558059758620377142533441954806925262968667208794481620377113847099529522860516481121877976738831532017718178289591572549657675131145526824474253097867037732947409673716279256684966033561727003916945565440346835120809512067739478148421198021935176640621342437850792935824045344873577473075270259809153928330306112910272632696945836905551597145254707938521903966677462174127186737756418590880756042245512016319716621329620397844827514802914557363017457482701776602763278"}, "radius_squared": "1.490986866821564199953057320858374233395746511588541859472784249331289533046955735378863093403497761567092191888481888734231069452558615212914264170518810857566189456252584921030630274691807887719743224112003586135084630999271235688217004606166347652001167989892304732598936788053265032573776927878527580634167954572382696394043509082602110161795685607897346458465064658575472758038314082198586170077599389120924182870884196446808591945389565866442210211309790748321505418198545758468261796789379327000494758752004716300273523610582560236711262306266709175904113844409783764149757547452115496592747742621064808590013221474594666077787599992290355671991900016234422409614827520648352626840906370826841911097104460242913859870908405037050400933110254301373046431547712428072269687161130063982855574268866410977606443696464768468433656074447526694424343137505095077968755284067873518158600846553060060220597582272872780451510048134290124441551822043217864631835388708886351340485927725694821787249965559355216440307442799977596247555189081750719873546734930689581346242873447466111622574746928137629277060369675876830790943644990160508523616083461037217508241328198838959522236326051989995384343017591827529863205322294915457262133773664606429994436619530564379012010269238356436666114916550900291852240018447123813699040722735747746734620720938399792947858242337474361233462841212213844434937403828257009764435399241970242087777202719331892265356773311142178422612982324113514392557212896093858863838447353034326414632855168603567531157640507507941442529327836799685533979215450831167816867098011077076067758979230897322141310952718776235858155031312889263636783131020423187637890647759972801651533421710305294297353502601884938724910676554096236491377920850489406582070444627843298956753315553779637762109308830182550357473231891674418820861632271308597913800966191677283511040507019789497168726617888627060065465644737476790685894546936499042909607733823009197367062759728757576692323830529500164621"}
j := {"point": {"x": "0.430000002231648525974350150136160664260387420654296875", "y": "-2.323146070990619538321197978802956640720367431640625"}, "direction": {"x": "-0.60058202721414679102188206400009105714921890678805144447484299531242122933953281494919429205528862985133792066659286043196644678469209827530325795269477196094491158681338119880176105018554953633175833018214364686938010434790029231248425813698510988946534325754544468239884505282730066575463231796184304299891522272514434659510729874621783119610836617250857049120441820756944438394707663068038422484928581434645061049962138912456805977463287854978726003594024065769061395116142101062535230674282860043816248912906794425414179737074669786299140121536380736089582360674805259799823437432816447788560178443201561730870899845568437811504616151302929904990522819050429368440466739243120637354192788345465508189471179379487384562423432989088677341712438753224941941236931778967845011974891233767600932640281835617920972694370229888055749835227354944741809766491099054854097348067537370867327714236883804922095580967927765351674601417354354698827268700412757564712103927165146079027421090511447464886785042815486262156592337092654692755433265167266050540804572087923251556717089856294169875796050151684120596697049275315295308988299446360477431645827406191090356600124207642265644788405779587071687735515783916216422627045105770924601809457434077555482299572755379627759540800775154020955174775315827745965507972847985682681519597576099550575053180516753941807570590504437232127461361024570533746783723010717184822592302054679561676007254836070539502242206737686547047859621827088039698241286468093680180456909465290598430897563147847764443247833437718664046776331885348084320079218536618933717522470751998745757494810187773805265744143621589413684360095216956264159429823239278010816578495841702516133877279320065468499381584036908538827677897755074596555520407052623352148718434838219868460292332742799546746862726185705537810183887389486532849255482340712165801689825365476432213585171326163831431989143510958738301809979607245390846685183252776981188666084782278816434695554150057942531179181604296655919", "y": "0.32955247455289340768944845009728096365543701017187795920804841519124846640499533595449989098588241536849432962802111357141433028711682202806784413996528400306776768013973725908460793138062395203263603463927744378718465466484017769829180894706691595914841804951112965666103634523697014768184129181755840827772825122196955990491601610221839032075532303336220256004298872131635176993378069053563123200669529245082030520634519263691277846116053560597878060895805440430277847432601666926711005868948961084329796387414128543553923788180201210263967714242136355631704331561655914681440891002642968720351858623508945559057151155659651717858754702993508570094694743251439704414207822920664558860547774141451140056416521392547848210845958466791019911416893916458790469473989713359293511329530416929553346253659445778825692312623141114454157735958302573776156474928880732476276476959382564869763029282332859096290950192204971004852095971673243426663640174575507587487453949790271386963361748768662439085501328756266041849337868190916825734713139785056987205663865916086772382130750627000144569145207552641702553930616850287079643458822116566507527037159379756749724306762427262783255213477581128736833780504593282168687243540086194101167530181768325913301038454856268764870684265990750024197974683827012708733607081471166845786750041680634501558024763817426726913129596620880582557835989006550115654914698499899760641076941715518328473435307051843959670991881676406894084594786772225534074985883085701449135420797245066429034964349637889684294669082872416213723949052739526009514756019082023535642072784011782915649346650670007530924890046516136947421374969548222837627115320336201738189340064618869709260131546250915206385475079951856534981112698399234886833828082523991674478732597972665123091511051120890296934245418654608328502510367647224729432555793419066475814144454939592890186896463502445712229082407464796901766935533276517972613958048427801078822245577933230048605692471802193676872681839458179647849"}}
E := {"x": "-0.65673986706047982468127341931878029644365643705018637138735019999691752343116401384410516510594266332392178332218379305742191176085502815502094876583770202793721920097296699428035045904427158586395202225837886059892296378509955682646112140815372448359586996899130593748481290725699123399539444417172984011882865659696135682996221815302569206867709392779353142258248911150664999287995365397465387030743196346339348434841979091977705514002102035580311133456414157145663211124723535744241578561722783295230475177244074709218080020437355157670386906352361881479948812819800408496266381834766623752114381993760987394114565167923017122156128843878501132950338161767095198310388229254799161258475797497546902213885755050433506422139184580582283593089901733902743137607349889562293999243512055304791050432491571891236112052511057246350083993609114501416980715267822876055020244357380454272129366133240035774142711308908570489297651383724847410868010986744628751094648934830372872227107010379235040996347673427022265320979994521949403304903647877186910559944524870993527112442684343963321125198673290636503484369058056817539417432708923824328132804256729810314324485647866403792409357392511541539867012592922156275212632195305839491900738893184339542061421226259078006993325956361625636668886338032442251496225926971557265042858921441919722838251746521748462284935192416927177054377506951799735997235312522610873443539095954985604557869449920840932362698668121222426719301312333880366957074266245688328313968812790074425763058856775989569645242033715712270460315981134595617939657959068337109298077991817714657034563481239679694233628529654955428168714246440488143220552315214285038629363051768535042804277864955062203046356231026406908749304036861509001858843402790427055915042463761511473079484986195372587111835781952104112271280421193362663661802378167673639101115850405142171029515293637478366794625756288575592001539839115266809860991962066973014707164707772024287137842104973741239384899212078618179321", "y": "-1.7268281711997067616058889450843418389376652170680871827805792823685536268484899643518074191854134942116989355088348126336513312791635636993038763663617789750716447395470606074930141279246818118298101435192199585439731780910693952227820191898599315814062343480645221541981919396201967998450332988931763476821322327801262043796978108568287353047870358335921319236134155737287265610815612870746121159969635461916143880529863889150619221065806744255475984638298376269942499494061108950420037822273400044387590581706870050468281405525484382688916205245833388221946898981516118907662641930164264070469115953426796533370603349125489056039000990902254858925269666971669158641678043688950893471506045434454255272902118550845150679124957202016157310288793584920650981588013806654198213918569576920867193915326789133529457387719079312765141267412486129943530976485591244071892254645257175060731358954105487228054432268730228278843942466117392269570294944143814972496248577717971700616424731857584996947363360334367659340384721328923020360471111055273167000815461888908572385031478199773291724368211126305472235649244827306144283148687493511458394384369004168701020666982643025663868673693383937778130821534735899392260784493348045336410711186651627368883521256878621014701492220298017388609086389698492670513534735208685325343035514313678881282298716606544811431839040612779167747015046836181936171765204424943065526135531162881974802138838359617698534190343153238593198756994623774017644101343014981245291500000743175783369279347415009174394368381792145579365950001972219309142728343252533187803301709632259164229814945066734281535700366240606616240691966250782714533837336232584768565334665115793168766701964612784726322850826409194743551594520588737750152412572081377332251625742696940160333439669482749605719286517912081348493659408825146487714517788926146665207268572806727140395478050360788264154482997029820574569435205729823610959085201431628381232101639176265410960066907205285663941442421222150308259"}
c := {"center": {"x": "1.0544599597218734359049767824353649913184729708015256282014409166447083763537984414639598574182935939133163669559628921459167627057115602040175984432203659986759613467396236526617587597499253436576157857329361028537659168804520706183152846417099561599215132761997669471281512521288853011460794004924707198984504485254357752122050649013966720851089873771873156651484763951110613952687541918460152382772602118981959970870735243590576173962052866702315441532302324717488223389190597838068158773751918262321488514033846140851655892970229250031702762844239532364452956644184674465172952221755634171126443809588050502802108161925372785954899928637414480692034350896184168963147008743955843370656411938564808743350100911568976270172128296502058495979767607885463569127103240861652539284721153816910535480504501796815816299145691582991569492165975082095997007425496460531843504043907078092974502018090509274548616413966376548931645984284842727760098916067872451047809600892241858672379907261653661666831062140269600593266745679059922397557463458957600778175150907941215666312862031092395194799863415729084044123295645819031318431179564017269783748881139297592888873134680400093200853066399392612447610593955179321455500355851868772634689848967403388175351758438877130896908852649593053689908389858879289470589390287700568522055514810464535313709988297952749493307074492014848621758079223036351718631977957533066455667512990418160353734748031868358362622359496101078838540449977444402838867047257658969356510984867930080091027811246089022091834751796127766234275791140446845752817458348406367117842914297175175373919019358946683968253646620770165599960728899524228975675863556653088559443842300811113197261421189517755052239501117052035670256091418944285203968499578690893594145045474092680995227826982058158576217102455036405450634934696948861307846736844507881430645418625000775399323941348436646083236193731387657475054011549004422764298593995929010628158598538628408108033463384147655547641105437866935563", "y": "-1.744104398138537968788110826821498202956887233925378532970249348433812040459350145562477448806476590811310751428751840025761408187320629105702428702129538827509893444491515646994071312430166745003152527279510236638596484976652930428327826137636568483637205439564954968271688807564996203856083209339192447252619362513540965037622975544737015448822660196302457055569250362727153554443094248469289525677406500592872024393214959572942565344187189468365488201342226875537025324481923748827133105327742342040267886042525743214038715519353641481659898831582414088021071379477869668850145396729247566731549532505090749041339000802605700364332421309705041122849837612976408400464466647729960145673737054477307167587129139793877302216049658266347688546423622911835694841858632727559437009787469497826188715242531224947859048601195495998662476645039498516712325949310277251956149064371057946233705437834021439263421427338816871716854446227829527641930800531849577935275767537683581501761839549505255760427038866457383539203639987069052328111347345839805003858217257038192470402059275523226712023052323577087249706360671803564494454011224706056353992990393191217284083714848244315430459495180803416272872802951807140865237831671875841540033808153598937919428687813298262516626241421574305584188282838624492186834780170833198136804695102600883221274988345560387576238097536102252489328535458428800043702708720533959012518665655113361320466223510081949154199876781530863434237121125447527165208812600901774656332919629377264749978597585363745683607862022807396511733066192990479453846921468677529668846683728361237441184890839164781155453809766706023021689295419060249366657475693270906845373983566661197399608749583303492061791152897906008024100312315348688833290351234223298679242267735177877747766990406427816082978930435724049809517675709570759198069176321529026642545468707588404502130310725905628280118106113443065597681204320176440802424274293508279069828738143170326421616850163210105539955061988721600667"}, "radius_squared": "2.9285033151971978004871944432195545350379524540145514680129136988525402760029418257459668461301209948363503205697869262548757023609557541815996112398291069314672859916386858661611493722073321911144826050656457991341327404890744707486118252892350837774903610765839550076309564498585850757414910345751085899693865005081863484548145443846980172695941728328684152811577542294919920270253755088173702894124294317761421603115934751016292812814584275380390544855454009643178455779845582586542249039238875826534074632542600349296288106259567513436513279041863694512170023366177451135989239053311557317003397389146573444929731343061305981016030156504829355171377678120617543760234761066277633695165190295694969320977394122813232334161321894451815984809623500302476982351148292797437861985798311717872925475316797872073137414052748386237537289175059050581138112948503473042558212214314837207693338441181194398680036285214106613938445444574673658704392292716354820704897374213487078126568265389625185051390886333059684690760724521554568983811371174428734810241387581783484677891907953117529166285469829549845048469019105188133466282417193033375149071516096624647554750136028858335205591579858321173768198590319706879895387750380577226452962412907325230795558214564782385636667863478341678689503980229450441787695368189057789680167174083461604969336763817630135568117243828295435982744780754103635739024481515833709125301043801250466843000329026139060375030463904256841080122467172973675690689522255832689236520002166713673385150172485864582683157838132221111967893158278838224397964907921083778640776699659473678313304824819244189537316705741083561722890270906136649241299539618962587975346321041435021639756454913467461704064474424281667962840545084755132980353619513571877569651465316912875484975979217511946985100531797496856759239368729856442759672847506785182893712558958478293821181689335676874832842771954953352493401750201959063719744036114066057176729872318174096517719503294712798195546980989100456844"}
I := {"x": "0.15556243111517065595129591898486390054102277005799887138735019999691752343116401384410516510594266332392178332218379305742191176085502815502094876583770202793721920097296699428035045904427158586395202225837886059892296378509955682646112140815372448359586996899130593748481290725699123399539444417172984011882865659696135682996221815302569206867709392779353142258248911150664999287995365397465387030743196346339348434841979091977705514002102035580311133456414157145663211124723535744241578561722783295230475177244074709218080020437355157670386906352361881479948812819800408496266381834766623752114381993760987394114565167923017122156128843878501132950338161767095198310388229254799161258475797497546902213885755050433506422139184580582283593089901733902743137607349889562293999243512055304791050432491571891236112052511057246350083993609114501416980715267822876055020244357380454272129366133240035774142711308908570489297651383724847410868010986744628751094648934830372872227107010379235040996347673427022265320979994521949403304903647877186910559944524870993527112442684343963321125198673290636503484369058056817539417432708923824328132804256729810314324485647866403792409357392511541539867012592922156275212632195305839491900738893184339542061421226259078006993325956361625636668886338032442251496225926971557265042858921441919722838251746521748462284935192416927177054377506951799735997235312522610873443539095954985604557869449920840932362698668121222426719301312333880366957074266245688328313968812790074425763058856775989569645242033715712270460315981134595617939657959068337109298077991817714657034563481239679694233628529654955428168714246440488143220552315214285038629363051768535042804277864955062203046356231026406908749304036861509001858843402790427055915042463761511473079484986195372587111835781952104112271280421193362663661802378167673639101115850405142171029515293637478366794625756288575592001539839115266809860991962066973014707164707772024287137842104973741239384899212078618179321", "y": "-4.1116913101960684258763332342849315237436044286228307859694207176314463731515100356481925808145865057883010644911651873663486687208364363006961236336382210249283552604529393925069858720753181881701898564807800414560268219089306047772179808101400684185937656519354778458018080603798032001549667011068236523178677672198737956203021891431712646952129641664078680763865844262712734389184387129253878840030364538083856119470136110849380778934193255744524015361701623730057500505938891049579962177726599955612409418293129949531718594474515617311083794754166611778053101018483881092337358069835735929530884046573203466629396650874510943960999009097745141074730333028330841358321956311049106528493954565545744727097881449154849320875042797983842689711206415079349018411986193345801786081430423079132806084673210866470542612280920687234858732587513870056469023514408755928107745354742824939268641045894512771945567731269771721156057533882607730429705055856185027503751422282028299383575268142415003052636639665632340659615278671076979639528888944726832999184538111091427614968521800226708275631788873694527764350755172693855716851312506488541605615630995831298979333017356974336131326306616062221869178465264100607739215506651954663589288813348372631116478743121378985298507779701982611390913610301507329486465264791314674656964485686321118717701283393455188568160959387220832252984953163818063828234795575056934473864468837118025197861161640382301465809656846761406801243005376225982355898656985018754708499999256824216630720652584990825605631618207854420634049998027780690857271656747466812196698290367740835770185054933265718464299633759393383759308033749217285466162663767415231434665334884206831233298035387215273677149173590805256448405479411262249847587427918622667748374257303059839666560330517250394280713482087918651506340591174853512285482211073853334792731427193272859604521949639211735845517002970179425430564794270176389040914798568371618767898360823734589039933092794714336058557578777849691741"}
H := {"x": "-0.015221236411288058206718782757990147389503115500422805821246264094452080507989324916517021339102739005795539627060635749618065778811714007530831191500728888012207738967358956655392678834562831357689654111697647188787131246450405849134615445705591791304061878826715313443305774354917651945865171225733468814238069372160649088360800411141627564903035613218918667459398338084397032553365884844259586816872449580447295553504336325876768542543880996730740806908467479092293495875453537582286329665083945332343692323935930812076512588437750616018205555232806601368464674761978407181463775456706926492703204741510542842037473771750345041264359977459544570555417187675142931915663320822679984860541119885212144095405712323997144778678030612094330373064388270382631177080246202529567695688445188174532730792702602214874635327047715804203270848939015965905858461207145286886749932055018762998148407589615422230558412747013370457562422023958475100138801949688842959363552262741303203701323939994175529509936818237832802292022665958502978655621517790784611122821952561993841404142235334698922663259527995251780021544574785861182386132758586631677865793665280551161084978511028504681493544686521348107146781031782922391344416666369047688826565049866065077368411566208463559842720164480997731009357925963223741036559098922610776084723252293171618110612067863892109414121290412885979138377743543660087753955051514627889878625766503459259685387378910421346406289379658088963182942582528406051123998623271494298705570480377294262232196241201203125755141472964997781132335813018757174124266634978599219310982171698951235903628353817762555860107127616441364389705214915376329144877994116388446030275005013242447173303162479575663911783562525187823228628594397725743872638006312651220074797213230303805673258086702619190849274042052721727579035306909906014663874613619700165793017239593058013081756210729341110176532135592548488223802616195297219035467463309944080010384583381905468094007159395351045532444655440902176817", "y": "-2.7131062018599442608528915811834320892874457190063179221624861365496414415997558385915416690321988361827829268683719858882077959593989872636316024519936754863571811603511558449494145529777884800104756546523592846069002085097636185491470361791093404669178551200007386104686200720497218093913330941789447099543438157170140009206727135116428596309999645399242893573662785309127713629313324909606385869724067216372393387498583243521309127941672711747101652154849818568450978236307962010850905290499907799238591194742450995493765326754418041112313682506127169060840711365543555016600568564081097677110170765658564546432930122112480542644095413977913765782624197046997413636872570994167100855441944530979753378338114223535303540045505002356809316525798534955537046965758528205557493524218217993334007405105109107880590596937987398906979425785181229198610867428414159831527492966996237332348287732103629357405582679610917950905307382928104008840210189471498676200095334926647899812461160858836444870840822235323216498940692294991896268544023551377952473463604387228901143672702167991050136569827186250523321730498388880778004561850159758794403398086123062366816177371327424161114191604037373892098393997554348074236868620772321566926434741684904544022260247730547326936050626389570114809906312890235136179951861069405916999876169848963878873529539386932553934442055955670594352290720643617348736508522277443332006623727454114960243941165926025026810791784949261173103530189425474302017498937053106571886437323005553153195217507323115943937603540561899006576356896869105655026157252682227626452958849391709385651377271002910799465078364477778553530756805624590076498811064383838953129184169184394261434856151950280897474082610968677912334413780004801847067915525332758585350281412548035855051079508508157179666996617353363040490663935984846495905699142511959133209662414403178872429184534268893737343655600847652637051520492371432456269141196633761924892639728711532016979632859904638750068870560526366118922"}
G := {"x": "-0.13869929091266860474745399706700749939831160991364477920017857348635944967848277270567568992477409197220779394428375084545058652962857420458468428032652535344275594196854957847194474226770980539974428159040383406882210022391586434031269576717277938650934469525330251537503861570894710800975595479969259881696445206439922454224127963416811630130932284353105561776821967467655706086774757668868149344612511291613655011394250267016904601405669138615722291840782223379278471115445781003339273833637223707832394697410905703044673009900401118092857341848331114632872660966315183774675744409583180942243836900550914225622925093824628723227296369166618881930319633617292939437906413487706818532705121802672964737878204817373336252658961906439093381814198226738344178573455643380254163335297700049556428727794610231850420719609913751244081745061522519067266884096193191948949818776478881448267842073726635253135869089181933845702435133838387100325167338423460719445902072335414343756491491546579533332234343307453864908290019583059827661920092100965491177510420879660779520091507106888846734057467811785500980788345440353772543205873927472814841098383981446434026157482555238920764333482069347168467685833685410900812887286808906395564073187668550377911335825011961765498549901007632946420907809437313075363953947771248792077556880964152472207321567585883623485224934940223359465719978471978711292070729755258531461389801484233351264490659037389966073098284594155941374644687717713804984478400000502240294817658864672237350785881438122730454322134259802246487872741984493455533142283068173481854670974618140583512967513670059485669908794925866810566938894879729399831511882774603917557548813717948612306405210730087606902551054319498146299714372510416853835898256029954274025527734756508942759718705685975604924287276515337406777736977190832726523730527905649593646121211213113687412983915867849960399247815386833090815462584803749658497407235614589577370769926747277822297067705426769073797378207053108566385", "y": "-2.9708375874761444572084404498365175637486688562194174540804450419835749221492346278472864008000824739273753683846430370067157686993929921639089681748918912005465777953842844073227362950648326804446989428710385261737109465135652244131406336731679123552369389562158968024695880662821175919996093648017631972448290354731706851610114754256072905474055793921883948833597920658772438487249347410794953754191975882462056175245929055559084053504918565156439546472179286680067316149735295136900049491019397872264587122175435794824239196382265859344059527713846292012891787086501370785269681836101804712908401659465244401030986114201817229567867600285792409175979909561721992241765215306364546537241719561700652393631089004344651034477663275904395851300726267048114386918799749750259412748822806058795035762697950604154714232082142818723875263682055456910741135582394605716609704706597307594756383848132003788445220374524835470961770540371176238160221347435876710448851515684160200489081186097843972206521859361181655061935220022857530067122888487194654763701104085099485905078144123980550742832349171448790774735656582583653995913981046313804715755864925649682280280506029580730875883427156143052195458268571566000865597364591615624890451238402449906549287510721233407797732024251469674147147865142175889264509241478112116287352745661902064025364406796276157365306287454121228168488309371738666202429714346480536786813935102150138803241756798114905299624041967628237724118912293815687123358449037737327169720678531672648138285235648124628381232954302599559983085248282841772487845207026630963300359012302075518638967805297130197459857009529825901232286709533160134649086060452337313246114315679872700589068803261091113791777080829984674868311440082626848887009647750506756977769210800415515144848461528595078648707739909186636417141030832062775561009271152798852740934231864356316979126720342501500266411803311978200768455205484265784928410857334032054152186920585905749153665661278192554852142077308695495936"}

Need to prove:
concyclic(C, G, H, I)

Proof:
By line_definition on I, C, g we get g == Line(C, I)
By line_definition on C, D, h we get h == Line(C, D)
By line_definition on A, E, i we get i == Line(A, E)
By line_definition on C, H, h we get h == Line(C, H)
By line_definition on I, B, g we get g == Line(B, I)
By line_definition on D, I, k we get k == Line(D, I)
By line_definition on F, B, f we get f == Line(B, F)
By line_definition on A, F, f we get f == Line(A, F)
By line_definition on D, F, k we get k == Line(D, F)
By line_definition on F, I, k we get k == Line(F, I)
By line_definition on D, E, i we get i == Line(D, E)
By line_definition on E, C, j we get j == Line(C, E)
By line_definition on D, H, h we get h == Line(D, H)
By line_definition on D, A, i we get i == Line(A, D)
By circle_definition on A, G, E, c we get c == Circle(A, E, G)
By circle_definition on H, D, A, d we get d == Circle(A, D, H)
By line_intersection_definition on D, i, k we get D == line_intersection(i, k)
By circle_definition on A, H, F, d we get d == Circle(A, F, H)
By circle_definition on A, G, B, c we get c == Circle(A, B, G)
By circle_definition on F, D, G, d we get d == Circle(D, F, G)
By line_intersection_definition on C, j, h we get C == line_intersection(h, j)
By circle_definition on A, G, H, d we get d == Circle(A, G, H)
By circle_definition on A, G, D, d we get d == Circle(A, D, G)
By circle_definition on B, G, E, c we get c == Circle(B, E, G)
By circle_definition on A, F, G, d we get d == Circle(A, F, G)
By circle_definition on F, G, H, d we get d == Circle(F, G, H)
By circle_definition on H, D, F, d we get d == Circle(D, F, H)
By circle_definition on G, D, H, d we get d == Circle(D, G, H)
By line_intersection_definition on D, k, h we get D == line_intersection(h, k)
By line_intersection_definition on C, g, h we get C == line_intersection(g, h)
By line_intersection_definition on B, f, g we get B == line_intersection(f, g)
By line_intersection_definition on A, f, i we get A == line_intersection(f, i)
By line_intersection_definition on C, j, g we get C == line_intersection(g, j)
By line_unique_intersection_v1 on j, h, C, H we get H not in j
By line_unique_intersection_v1 on h, g, C, I we get I not in h
By line_unique_intersection_v1 on g, h, C, H we get H not in g
By line_unique_intersection_v1 on g, k, I, D we get D not in g
By line_unique_intersection_v1 on j, i, E, D we get D not in j
By line_unique_intersection_v1 on f, k, F, D we get D not in f
By line_unique_intersection_v1 on i, k, D, I we get I not in i
By line_unique_intersection_v1 on k, h, D, C we get C not in k
By line_unique_intersection_v1 on i, k, D, F we get F not in i
By line_unique_intersection_v1 on k, f, F, B we get B not in k
By line_unique_intersection_v1 on h, k, D, F we get F not in h
By line_unique_intersection_v1 on j, g, C, B we get B not in j
By line_unique_intersection_v1 on i, f, A, B we get B not in i
By line_unique_intersection_v1 on g, k, I, F we get F not in g
By line_unique_intersection_v1 on i, j, E, C we get C not in i
By line_unique_intersection_v1 on h, i, D, A we get A not in h
By line_unique_intersection_v1 on f, g, B, I we get I not in f
By line_unique_intersection_v1 on k, i, D, E we get E not in k
By line_unique_intersection_v1 on h, i, D, E we get E not in h
By line_unique_intersection_v1 on j, i, E, A we get A not in j
By line_unique_intersection_v1 on j, g, C, I we get I not in j
By line_unique_intersection_v1 on g, j, C, E we get E not in g
By line_unique_intersection_v1 on k, i, D, A we get A not in k
By line_unique_intersection_v1 on i, h, D, H we get H not in i
By line_unique_intersection_v1 on f, i, A, E we get E not in f
By line_unique_intersection_v1 on g, f, B, A we get A not in g
By line_unique_intersection_v1 on h, g, C, B we get B not in h
By line_unique_intersection_v1 on k, h, D, H we get H not in k
By line_unique_intersection_v1 on f, g, B, C we get C not in f
By parallel_line_definition on I, g, i we get g == parallel_line(I, i)
By parallel_line_definition on B, g, i we get g == parallel_line(B, i)
By parallel_line_definition on F, f, h we get f == parallel_line(F, h)
By parallel_line_definition on E, i, g we get i == parallel_line(E, g)
By parallel_line_definition on A, f, h we get f == parallel_line(A, h)
By parallel_line_definition on C, g, i we get g == parallel_line(C, i)
By parallel_line_definition on D, h, f we get h == parallel_line(D, f)
By parallel_line_definition on D, i, g we get i == parallel_line(D, g)
By parallel_line_definition on B, f, h we get f == parallel_line(B, h)
By parallel_line_definition on H, h, f we get h == parallel_line(H, f)
By different_points_v1 on C, B we get 0 != distance(B, C)
By different_points_v1 on A, B we get 0 != distance(A, B)
By in_imply_collinear on F, B, A we get collinear(A, B, F)
By in_imply_collinear on I, C, B we get collinear(B, C, I)
By in_imply_concyclic on F, A, D, G we get concyclic(A, D, F, G)
By not_in_line_equivalent_to_not_collinear_v0_r on G, B, C we get G not in Line(B, C)
By in_imply_concyclic on E, A, B, G we get concyclic(A, B, E, G)
By in_imply_concyclic on A, F, D, H we get concyclic(A, D, F, H)
By not_in_line_equivalent_to_not_collinear_v0_r on I, A, B we get I not in Line(A, B)
By circle_circle_intersection_has_at_most_two_points_0 on A, G, H, d, c we get H not in c
By not_in_line_equivalent_to_not_collinear_v0_r on D, C, B we get D not in Line(B, C)
By angle_bisector_draw_angle_v0 on B, C, D we get exists(Line(B, C), Line(C, D))
By angle_bisector_draw_angle_v1 on C, D, A we get exists(Line(A, D), Line(C, D))
By not_in_line_equivalent_to_not_collinear_v0_r on E, A, B we get E not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on C, A, B we get C not in Line(A, B)
By angle_bisector_draw_angle_v0 on D, C, B we get exists(Line(B, C), Line(C, D))
By circle_circle_intersection_has_at_most_two_points_0 on G, A, F, d, c we get F not in c
By circle_circle_intersection_has_at_most_two_points_0 on A, G, D, d, c we get D not in c
By angle_bisector_draw_angle_v1 on A, D, C we get exists(Line(A, D), Line(C, D))
By circle_circle_intersection_has_at_most_two_points_0 on A, G, E, c, d we get E not in d
By not_in_line_equivalent_to_not_collinear_v0_r on H, B, C we get H not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on G, A, B we get G not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on H, A, B we get H not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on E, C, B we get E not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on A, C, B we get A not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on F, B, C we get F not in Line(B, C)
By circle_circle_intersection_has_at_most_two_points_0 on A, G, B, c, d we get B not in d
By not_in_line_equivalent_to_not_collinear_v0_r on D, B, A we get D not in Line(A, B)
By power_of_a_point_on_circle on A, c we get 0 == power_of_a_point(A, c)
By power_of_a_point_on_circle on E, c we get 0 == power_of_a_point(E, c)
By power_of_a_point_in_circle on B, c we get 0 == power_of_a_point(B, c)
By power_of_a_point_on_circle on G, d we get 0 == power_of_a_point(G, d)
By power_of_a_point_on_circle on F, d we get 0 == power_of_a_point(F, d)
By power_of_a_point_in_circle on G, c we get 0 == power_of_a_point(G, c)
By power_of_a_point_in_circle on D, d we get 0 == power_of_a_point(D, d)
By angles_on_chord_v2 on H, F, G, A, d we get angle(H, G, F) == angle(H, A, F) + 180 mod 360
By angles_on_chord_v1 on F, A, H, G, d we get angle(F, G, A) == angle(F, H, A) mod 360
By angles_on_chord_v2 on F, H, A, G, d we get angle(F, A, H) == angle(F, G, H) + 180 mod 360
By angles_on_chord_v2 on E, B, A, G, c we get angle(E, A, B) == angle(E, G, B) + 180 mod 360
By power_of_a_point_on_circle on H, d we get 0 == power_of_a_point(H, d)
By power_of_a_point_on_circle on A, d we get 0 == power_of_a_point(A, d)
By angles_on_chord_v0 on H, A, D, G, d we get angle(H, D, A) == angle(H, G, A) mod 360
By angles_on_chord_v1 on G, D, A, F, d we get angle(G, A, D) == angle(G, F, D) mod 360
By angles_on_chord_v0 on A, F, H, D, d we get angle(A, D, F) == angle(A, H, F) mod 360
By angles_on_chord_v1 on B, G, E, A, c we get angle(B, A, G) == angle(B, E, G) mod 360
By angles_on_chord_v0 on F, D, A, G, d we get angle(F, A, D) == angle(F, G, D) mod 360
By angles_on_chord_v1 on A, H, F, D, d we get angle(A, D, H) == angle(A, F, H) mod 360
By angles_on_chord_v0 on D, G, H, F, d we get angle(D, F, G) == angle(D, H, G) mod 360
By angles_on_chord_v0 on H, A, F, D, d we get angle(H, D, A) == angle(H, F, A) mod 360
By angles_on_chord_v2 on G, A, F, H, d we get angle(G, F, A) == angle(G, H, A) + 180 mod 360
By angles_on_chord_v0 on G, A, F, D, d we get angle(G, D, A) == angle(G, F, A) mod 360
By angles_on_chord_v2 on F, H, A, D, d we get angle(F, A, H) == angle(F, D, H) + 180 mod 360
By angles_on_chord_v2 on G, A, D, H, d we get angle(G, D, A) == angle(G, H, A) + 180 mod 360
By angles_on_chord_v3 on D, A, G, F, d we get angle(D, G, A) == angle(D, F, A) + 180 mod 360
By angles_on_chord_v3 on D, H, G, A, d we get angle(D, G, H) == angle(D, A, H) + 180 mod 360
By angles_on_chord_v0 on D, G, A, F, d we get angle(D, A, G) == angle(D, F, G) mod 360
By angles_on_chord_v0 on H, F, G, D, d we get angle(H, D, F) == angle(H, G, F) mod 360
By angles_on_chord_v1 on A, H, G, F, d we get angle(A, F, H) == angle(A, G, H) mod 360
By angles_on_chord_v3 on G, A, B, E, c we get angle(G, B, A) == angle(G, E, A) + 180 mod 360
By angles_on_chord_v0 on F, G, H, A, d we get angle(F, A, G) == angle(F, H, G) mod 360
By angles_on_chord_v3 on A, G, D, H, d we get angle(A, D, G) == angle(A, H, G) + 180 mod 360
By angles_on_chord_v0 on A, F, H, G, d we get angle(A, G, F) == angle(A, H, F) mod 360
By angles_on_chord_v0 on G, H, D, A, d we get angle(G, A, H) == angle(G, D, H) mod 360
By angles_on_chord_v1 on G, E, A, B, c we get angle(G, A, E) == angle(G, B, E) mod 360
By angles_on_chord_v0 on A, D, G, H, d we get angle(A, G, D) == angle(A, H, D) mod 360
By angles_on_chord_v0 on A, E, G, B, c we get angle(A, B, E) == angle(A, G, E) mod 360
By angles_on_chord_v3 on E, B, G, A, c we get angle(E, G, B) == angle(E, A, B) + 180 mod 360
By angles_on_chord_v2 on H, F, D, A, d we get angle(H, D, F) == angle(H, A, F) + 180 mod 360
By angles_on_chord_v0 on E, G, A, B, c we get angle(E, A, G) == angle(E, B, G) mod 360
By angles_on_chord_v0 on G, H, F, D, d we get angle(G, D, H) == angle(G, F, H) mod 360
By angles_on_chord_v1 on H, G, A, F, d we get angle(H, A, G) == angle(H, F, G) mod 360
By angles_on_chord_v2 on A, D, H, F, d we get angle(A, H, D) == angle(A, F, D) + 180 mod 360
By angles_on_chord_v1 on G, D, H, A, d we get angle(G, A, D) == angle(G, H, D) mod 360
By angles_on_chord_v3 on F, H, D, A, d we get angle(F, D, H) == angle(F, A, H) + 180 mod 360
By angles_on_chord_v1 on F, A, D, G, d we get angle(F, D, A) == angle(F, G, A) mod 360
By angles_on_chord_v3 on G, A, H, F, d we get angle(G, H, A) == angle(G, F, A) + 180 mod 360
By angles_on_chord_v3 on A, G, E, B, c we get angle(A, E, G) == angle(A, B, G) + 180 mod 360
By angles_on_chord_v1 on F, H, G, D, d we get angle(F, D, H) == angle(F, G, H) mod 360
By angles_on_chord_v3 on A, D, F, H, d we get angle(A, F, D) == angle(A, H, D) + 180 mod 360
By angles_on_chord_v0 on B, A, E, G, c we get angle(B, E, A) == angle(B, G, A) mod 360
By angles_on_chord_v0 on D, H, F, A, d we get angle(D, A, H) == angle(D, F, H) mod 360
By angles_on_chord_v1 on D, A, H, G, d we get angle(D, G, A) == angle(D, H, A) mod 360
By angles_on_chord_v1 on D, F, H, G, d we get angle(D, G, F) == angle(D, H, F) mod 360
By angles_on_chord_v2 on A, D, G, F, d we get angle(A, G, D) == angle(A, F, D) + 180 mod 360
By angles_on_chord_v0 on F, D, H, A, d we get angle(F, A, D) == angle(F, H, D) mod 360
By angles_on_chord_v3 on G, A, H, D, d we get angle(G, H, A) == angle(G, D, A) + 180 mod 360
By angles_on_chord_v1 on A, B, G, E, c we get angle(A, E, B) == angle(A, G, B) mod 360
By angles_on_chord_v2 on G, F, D, H, d we get angle(G, D, F) == angle(G, H, F) + 180 mod 360
By angles_on_chord_v1 on G, D, H, F, d we get angle(G, F, D) == angle(G, H, D) mod 360
By angles_on_chord_v2 on B, E, G, A, c we get angle(B, G, E) == angle(B, A, E) + 180 mod 360
By angles_on_chord_v1 on A, H, D, G, d we get angle(A, D, H) == angle(A, G, H) mod 360
By angles_on_chord_v2 on G, A, E, B, c we get angle(G, E, A) == angle(G, B, A) + 180 mod 360
By angles_on_chord_v2 on D, A, F, G, d we get angle(D, F, A) == angle(D, G, A) + 180 mod 360
By angles_on_chord_v3 on D, H, G, F, d we get angle(D, G, H) == angle(D, F, H) + 180 mod 360
By angles_on_chord_v1 on H, G, A, D, d we get angle(H, A, G) == angle(H, D, G) mod 360
By angles_on_chord_v3 on G, F, H, D, d we get angle(G, H, F) == angle(G, D, F) + 180 mod 360
By angles_on_chord_v0 on D, G, H, A, d we get angle(D, A, G) == angle(D, H, G) mod 360
By angles_on_chord_v1 on G, F, A, H, d we get angle(G, A, F) == angle(G, H, F) mod 360
By angles_on_chord_v3 on F, G, D, A, d we get angle(F, D, G) == angle(F, A, G) + 180 mod 360
By angles_on_chord_v1 on F, A, D, H, d we get angle(F, D, A) == angle(F, H, A) mod 360
By angles_on_chord_v2 on A, G, H, F, d we get angle(A, H, G) == angle(A, F, G) + 180 mod 360
By angles_on_chord_v3 on A, D, F, G, d we get angle(A, F, D) == angle(A, G, D) + 180 mod 360
By angles_on_chord_v1 on H, D, F, A, d we get angle(H, A, D) == angle(H, F, D) mod 360
By angles_on_chord_v0 on H, A, F, G, d we get angle(H, F, A) == angle(H, G, A) mod 360
By angles_on_chord_v1 on D, F, G, A, d we get angle(D, A, F) == angle(D, G, F) mod 360
By angles_on_chord_v2 on A, G, H, D, d we get angle(A, H, G) == angle(A, D, G) + 180 mod 360
By angles_on_chord_v3 on A, G, F, H, d we get angle(A, F, G) == angle(A, H, G) + 180 mod 360
By angles_on_chord_v0 on A, F, D, G, d we get angle(A, D, F) == angle(A, G, F) mod 360
By angles_on_chord_v1 on D, F, H, A, d we get angle(D, A, F) == angle(D, H, F) mod 360
By angles_on_chord_v2 on H, D, G, F, d we get angle(H, G, D) == angle(H, F, D) + 180 mod 360
By angles_on_chord_v2 on H, D, G, A, d we get angle(H, G, D) == angle(H, A, D) + 180 mod 360
By angles_on_chord_v2 on G, F, D, A, d we get angle(G, D, F) == angle(G, A, F) + 180 mod 360
By angles_on_chord_v3 on G, F, A, D, d we get angle(G, A, F) == angle(G, D, F) + 180 mod 360
By angles_on_chord_v0 on G, H, A, F, d we get angle(G, A, H) == angle(G, F, H) mod 360
By angles_on_chord_v3 on B, E, A, G, c we get angle(B, A, E) == angle(B, G, E) + 180 mod 360
By angles_on_chord_v1 on A, G, F, D, d we get angle(A, D, G) == angle(A, F, G) mod 360
By angles_on_chord_v0 on F, D, H, G, d we get angle(F, G, D) == angle(F, H, D) mod 360
By angles_on_chord_v3 on H, F, A, G, d we get angle(H, A, F) == angle(H, G, F) + 180 mod 360
By angles_on_chord_v2 on F, G, H, D, d we get angle(F, H, G) == angle(F, D, G) + 180 mod 360
By angles_on_chord_v0 on G, B, E, A, c we get angle(G, A, B) == angle(G, E, B) mod 360
By angles_on_chord_v3 on F, G, D, H, d we get angle(F, D, G) == angle(F, H, G) + 180 mod 360
By angles_on_chord_v1 on E, A, B, G, c we get angle(E, B, A) == angle(E, G, A) mod 360
By angles_on_chord_v1 on H, G, D, F, d we get angle(H, D, G) == angle(H, F, G) mod 360
By angles_on_chord_v2 on D, A, F, H, d we get angle(D, F, A) == angle(D, H, A) + 180 mod 360
By angles_on_chord_v2 on A, G, B, E, c we get angle(A, B, G) == angle(A, E, G) + 180 mod 360
By angles_on_chord_v2 on F, G, A, D, d we get angle(F, A, G) == angle(F, D, G) + 180 mod 360
By angles_on_chord_v3 on H, D, F, G, d we get angle(H, F, D) == angle(H, G, D) + 180 mod 360
By angles_on_chord_v3 on H, F, A, D, d we get angle(H, A, F) == angle(H, D, F) + 180 mod 360
By angles_on_chord_v3 on F, H, G, A, d we get angle(F, G, H) == angle(F, A, H) + 180 mod 360
By angles_on_chord_v3 on D, A, H, F, d we get angle(D, H, A) == angle(D, F, A) + 180 mod 360
By angles_on_chord_v3 on H, D, A, G, d we get angle(H, A, D) == angle(H, G, D) + 180 mod 360
By angles_on_chord_v2 on D, H, A, G, d we get angle(D, A, H) == angle(D, G, H) + 180 mod 360
By angles_on_chord_v2 on D, H, F, G, d we get angle(D, F, H) == angle(D, G, H) + 180 mod 360
By concyclic_sufficient_conditions_v1 on D, G, H, A we get concyclic(A, D, G, H)
By concyclic_sufficient_conditions_v1 on D, G, H, F we get concyclic(D, F, G, H)
By concyclic_sufficient_conditions_v0 on A, F, H, G we get concyclic(A, F, G, H)
By angles_on_equal_chords_v1 on D, G, F, A, D, H, d we get angle(A, D, H) == angle(D, G, F) mod 360
By angles_on_equal_chords_v1 on D, A, F, A, D, H, d we get angle(A, D, H) == angle(D, A, F) mod 360
By angles_on_equal_chords_v3 on F, D, H, D, F, A, d we get angle(F, D, H) == angle(D, F, A) + 180 mod 360
By angles_on_equal_chords_v0 on A, G, D, H, G, F, d we get angle(A, G, D) == angle(H, G, F) mod 360
By angles_on_equal_chords_v1 on D, H, F, A, F, H, d we get angle(A, F, H) == angle(D, H, F) mod 360
By angles_on_equal_chords_v2 on H, D, F, A, F, D, d we get angle(H, D, F) == angle(A, F, D) + 180 mod 360
By angles_on_equal_chords_v1 on D, H, F, A, G, H, d we get angle(A, G, H) == angle(D, H, F) mod 360
By angles_on_equal_chords_v0 on H, G, A, F, G, D, d we get angle(F, G, D) == angle(H, G, A) mod 360
By angles_on_equal_chords_v0 on H, F, A, F, A, D, d we get angle(F, A, D) == angle(H, F, A) mod 360
By angles_on_equal_chords_v1 on A, D, H, D, H, F, d we get angle(A, D, H) == angle(D, H, F) mod 360
By angles_on_equal_chords_v2 on F, A, H, D, G, A, d we get angle(F, A, H) == angle(D, G, A) + 180 mod 360
By angles_on_equal_chords_v0 on H, G, A, F, A, D, d we get angle(F, A, D) == angle(H, G, A) mod 360
By angles_on_equal_chords_v1 on A, F, D, H, A, F, d we get angle(A, F, D) == angle(H, A, F) mod 360
By angles_on_equal_chords_v0 on F, H, D, H, F, A, d we get angle(F, H, D) == angle(H, F, A) mod 360
By angles_on_equal_chords_v0 on H, F, A, F, G, D, d we get angle(F, G, D) == angle(H, F, A) mod 360
By angles_on_equal_chords_v3 on F, G, H, D, F, A, d we get angle(F, G, H) == angle(D, F, A) + 180 mod 360
By angles_on_equal_chords_v0 on A, H, D, H, G, F, d we get angle(A, H, D) == angle(H, G, F) mod 360
By angles_on_equal_chords_v1 on F, D, H, D, G, A, d we get angle(D, G, A) == angle(F, D, H) mod 360
By angles_on_equal_chords_v2 on H, G, F, A, F, D, d we get angle(H, G, F) == angle(A, F, D) + 180 mod 360
By angles_on_equal_chords_v1 on F, G, H, D, H, A, d we get angle(D, H, A) == angle(F, G, H) mod 360
By angles_on_equal_chords_v1 on A, F, H, D, A, F, d we get angle(A, F, H) == angle(D, A, F) mod 360
By angles_on_equal_chords_v0 on H, D, A, F, G, D, d we get angle(F, G, D) == angle(H, D, A) mod 360
By angles_on_equal_chords_v0 on D, F, A, F, A, H, d we get angle(D, F, A) == angle(F, A, H) mod 360
By angles_on_equal_chords_v1 on A, F, H, D, G, F, d we get angle(A, F, H) == angle(D, G, F) mod 360
By angles_on_equal_chords_v0 on F, H, D, H, D, A, d we get angle(F, H, D) == angle(H, D, A) mod 360
By angles_on_equal_chords_v1 on D, A, F, A, G, H, d we get angle(A, G, H) == angle(D, A, F) mod 360
By angles_on_equal_chords_v1 on F, D, H, D, H, A, d we get angle(D, H, A) == angle(F, D, H) mod 360
By angles_on_equal_chords_v0 on F, A, D, H, D, A, d we get angle(F, A, D) == angle(H, D, A) mod 360
By angles_on_equal_chords_v1 on D, G, F, A, G, H, d we get angle(A, G, H) == angle(D, G, F) mod 360
By angles_on_equal_chords_v1 on D, G, A, F, G, H, d we get angle(D, G, A) == angle(F, G, H) mod 360
By angles_on_equal_chords_v3 on D, G, A, F, A, H, d we get angle(D, G, A) == angle(F, A, H) + 180 mod 360
By angles_on_equal_chords_v2 on F, A, H, D, H, A, d we get angle(F, A, H) == angle(D, H, A) + 180 mod 360
By angles_on_equal_chords_v3 on H, A, F, A, G, D, d we get angle(H, A, F) == angle(A, G, D) + 180 mod 360
By angles_on_equal_chords_v0 on A, H, D, H, D, F, d we get angle(A, H, D) == angle(H, D, F) mod 360
By angles_on_equal_chords_v0 on F, H, D, H, G, A, d we get angle(F, H, D) == angle(H, G, A) mod 360
By angles_on_equal_chords_v2 on D, F, A, F, G, H, d we get angle(D, F, A) == angle(F, G, H) + 180 mod 360
By angles_on_equal_chords_v3 on H, A, F, A, H, D, d we get angle(H, A, F) == angle(A, H, D) + 180 mod 360
By angles_on_equal_chords_v2 on D, F, A, F, D, H, d we get angle(D, F, A) == angle(F, D, H) + 180 mod 360
By angles_on_equal_chords_v3 on A, F, D, H, G, F, d we get angle(A, F, D) == angle(H, G, F) + 180 mod 360
By angles_on_equal_chords_v2 on A, G, D, H, A, F, d we get angle(A, G, D) == angle(H, A, F) + 180 mod 360
By angles_on_equal_chords_v0 on H, D, F, A, G, D, d we get angle(A, G, D) == angle(H, D, F) mod 360
By angles_on_equal_chords_v2 on A, H, D, H, A, F, d we get angle(A, H, D) == angle(H, A, F) + 180 mod 360
By angles_on_equal_chords_v3 on D, H, A, F, A, H, d we get angle(D, H, A) == angle(F, A, H) + 180 mod 360
By angles_on_equal_chords_v3 on A, F, D, H, D, F, d we get angle(A, F, D) == angle(H, D, F) + 180 mod 360
By radical_axis_of_intersecting_circles_v0 on A, G, d, c we get Line(A, G) == radical_axis(c, d)
By same_angle_v2 on A, F, B, H we get angle(F, A, H) == angle(B, A, H) + 180 mod 360
By same_angle_v2 on A, F, B, G we get angle(F, A, G) == angle(B, A, G) + 180 mod 360
By same_angle_v2 on A, F, B, D we get angle(F, A, D) == angle(B, A, D) + 180 mod 360
By same_angle_v2 on A, F, B, E we get angle(F, A, E) == angle(B, A, E) + 180 mod 360
By different_points_v1 on C, I we get 0 != distance(C, I)
By different_points_v1 on G, F we get 0 != distance(F, G)
By different_points_v1 on A, E we get 0 != distance(A, E)
By different_points_v1 on H, F we get 0 != distance(F, H)
By different_points_v1 on G, D we get 0 != distance(D, G)
By different_points_v1 on F, A we get 0 != distance(A, F)
By different_points_v1 on F, I we get 0 != distance(F, I)
By different_points_v1 on E, B we get 0 != distance(B, E)
By different_points_v1 on I, B we get 0 != distance(B, I)
By different_points_v1 on E, G we get 0 != distance(E, G)
By different_points_v1 on D, E we get 0 != distance(D, E)
By different_points_v1 on H, C we get 0 != distance(C, H)
By different_points_v1 on D, A we get 0 != distance(A, D)
By different_points_v1 on D, C we get 0 != distance(C, D)
By different_points_v1 on F, D we get 0 != distance(D, F)
By different_points_v1 on G, A we get 0 != distance(A, G)
By different_points_v1 on B, G we get 0 != distance(B, G)
By different_points_v1 on F, B we get 0 != distance(B, F)
By different_points_v1 on I, D we get 0 != distance(D, I)
By different_points_v1 on E, C we get 0 != distance(C, E)
By different_points_v1 on H, A we get 0 != distance(A, H)
By different_points_v1 on H, G we get 0 != distance(G, H)
By different_points_v1 on D, H we get 0 != distance(D, H)
By same_angle_v1 on F, A, B, H we get angle(A, F, H) == angle(B, F, H) mod 360
By same_angle_v0 on B, F, A, G we get angle(A, B, G) == angle(F, B, G) mod 360
By same_angle_v0 on B, A, F, E we get angle(A, B, E) == angle(F, B, E) mod 360
By same_angle_v1 on F, B, A, G we get angle(A, F, G) == angle(B, F, G) mod 360
By same_angle_v1 on F, A, B, D we get angle(A, F, D) == angle(B, F, D) mod 360
By in_imply_collinear on I, D, F we get collinear(D, F, I)
By isosceles_trapezoids_are_concyclic_v1 on H, D, F, A we get isosceles_trapezoid(F, A, H, D)
By in_imply_collinear on E, D, A we get collinear(A, D, E)
By probably_between_and_collinear_implies_between on I, C, B we get between(B, C, I)
By reverse_direction on A, H we get 180 == direction(A, H) - direction(H, A) mod 360
By probably_between_and_collinear_implies_between on F, A, B we get between(B, A, F)
By parallel_line_angles_reverse_v3 on B, A, D, H we get angle(B, A, D) == angle(H, D, A) + 180 mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on G, F, I we get G not in Line(F, I)
By not_in_line_equivalent_to_not_collinear_v0_r on B, D, G we get B not in Line(D, G)
By in_imply_collinear on H, D, C we get collinear(C, D, H)
By parallel_line_angles_reverse_v1 on D, H, A, B we get angle(B, A, H) == angle(D, H, A) mod 360
By line_inequality on Line(F, H), j, H we get j != Line(F, H)
By not_in_line_equivalent_to_not_collinear_v0_r on H, D, G we get H not in Line(D, G)
By reverse_direction on F, A we get 180 == direction(F, A) - direction(A, F) mod 360
By parallel_line_angles_reverse_v2 on H, D, A, B we get angle(H, D, A) == angle(B, A, D) + 180 mod 360
By line_inequality on Line(D, G), j, D we get j != Line(D, G)
By isosceles_trapezoids_are_concyclic_v1 on H, D, A, F we get isosceles_trapezoid(A, F, H, D)
By reverse_direction on G, D we get 180 == direction(G, D) - direction(D, G) mod 360
By reverse_direction on A, E we get 180 == direction(A, E) - direction(E, A) mod 360
By reverse_direction on E, A we get 180 == direction(E, A) - direction(A, E) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on H, G, B we get H not in Line(B, G)
By reverse_direction on F, D we get 180 == direction(F, D) - direction(D, F) mod 360
By reverse_direction on D, A we get 180 == direction(D, A) - direction(A, D) mod 360
By isosceles_trapezoids_are_concyclic_v1 on A, F, D, H we get isosceles_trapezoid(A, F, D, H)
By reverse_direction on B, E we get 180 == direction(B, E) - direction(E, B) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on I, G, D we get I not in Line(D, G)
By reverse_direction on H, A we get 180 == direction(H, A) - direction(A, H) mod 360
By reverse_direction on D, H we get 180 == direction(D, H) - direction(H, D) mod 360
By reverse_direction on B, G we get 180 == direction(B, G) - direction(G, B) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on I, G, H we get I not in Line(G, H)
By line_inequality on Line(E, G), g, G we get g != Line(E, G)
By line_inequality on Line(F, G), h, F we get h != Line(F, G)
By reverse_direction on B, A we get 180 == direction(B, A) - direction(A, B) mod 360
By isosceles_trapezoids_are_concyclic_v1 on F, A, D, H we get isosceles_trapezoid(D, H, F, A)
By reverse_direction on H, G we get 180 == direction(H, G) - direction(G, H) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on G, C, H we get G not in Line(C, H)
By not_in_line_equivalent_to_not_collinear_v0_r on F, C, E we get F not in Line(C, E)
By reverse_direction on F, H we get 180 == direction(F, H) - direction(H, F) mod 360
By collinear_definition on A, F, B we get F in Line(A, B), B in Line(A, F), Line(A, B) == Line(A, F), 0 == 2 * angle(F, A, B) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on A, G, F we get A not in Line(F, G)
By not_in_line_equivalent_to_not_collinear_v0_r on I, F, G we get I not in Line(F, G)
By line_inequality on Line(A, H), k, A we get k != Line(A, H)
By not_in_line_equivalent_to_not_collinear_v0_r on F, E, B we get F not in Line(B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on B, A, H we get B not in Line(A, H)
By reverse_direction on F, G we get 180 == direction(F, G) - direction(G, F) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on A, G, H we get A not in Line(G, H)
By reverse_direction on D, F we get 180 == direction(D, F) - direction(F, D) mod 360
By isosceles_trapezoids_are_concyclic_v1 on F, A, H, D we get isosceles_trapezoid(F, A, H, D)
By reverse_direction on G, A we get 180 == direction(G, A) - direction(A, G) mod 360
By line_inequality on Line(A, G), j, A we get j != Line(A, G)
By line_inequality on Line(D, G), g, D we get g != Line(D, G)
By reverse_direction on E, G we get 180 == direction(E, G) - direction(G, E) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on D, H, A we get D not in Line(A, H)
By reverse_direction on A, F we get 180 == direction(A, F) - direction(F, A) mod 360
By reverse_direction on A, G we get 180 == direction(A, G) - direction(G, A) mod 360
By reverse_direction on G, F we get 180 == direction(G, F) - direction(F, G) mod 360
By isosceles_trapezoids_are_concyclic_v1 on D, H, A, F we get isosceles_trapezoid(A, F, D, H)
By not_in_line_equivalent_to_not_collinear_v0_r on E, G, A we get E not in Line(A, G)
By reverse_direction on A, D we get 180 == direction(A, D) - direction(D, A) mod 360
By line_inequality on Line(G, H), f, H we get f != Line(G, H)
By reverse_direction on A, B we get 180 == direction(A, B) - direction(B, A) mod 360
By isosceles_trapezoids_are_concyclic_v1 on A, F, H, D we get isosceles_trapezoid(A, F, H, D)
By reverse_direction on D, G we get 180 == direction(D, G) - direction(G, D) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on C, F, H we get C not in Line(F, H)
By reverse_direction on E, B we get 180 == direction(E, B) - direction(B, E) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on D, G, F we get D not in Line(F, G)
By not_in_line_equivalent_to_not_collinear_v0_r on G, F, D we get G not in Line(D, F)
By reverse_direction on G, H we get 180 == direction(G, H) - direction(H, G) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on D, H, F we get D not in Line(F, H)
By reverse_direction on G, E we get 180 == direction(G, E) - direction(E, G) mod 360
By isosceles_trapezoids_are_concyclic_v1 on D, H, F, A we get isosceles_trapezoid(D, H, F, A)
By collinear_definition on A, B, F we get B in Line(A, F), F in Line(A, B), Line(A, B) == Line(A, F), 0 == 2 * angle(B, A, F) mod 360
By line_inequality on Line(B, E), i, B we get i != Line(B, E)
By reverse_direction on H, D we get 180 == direction(H, D) - direction(D, H) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on F, A, G we get F not in Line(A, G)
By reverse_direction on H, F we get 180 == direction(H, F) - direction(F, H) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on E, H, F we get E not in Line(F, H)
By line_inequality on Line(B, G), h, B we get h != Line(B, G)
By not_in_line_equivalent_to_not_collinear_v0_r on E, H, G we get E not in Line(G, H)
By not_in_line_equivalent_to_not_collinear_v0_r on I, F, H we get I not in Line(F, H)
By reverse_direction on G, B we get 180 == direction(G, B) - direction(B, G) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on D, G, E we get D not in Line(E, G)
By line_inequality on Line(F, G), i, F we get i != Line(F, G)
By not_in_line_equivalent_to_not_collinear_v0_r on A, G, B we get A not in Line(B, G)
By not_in_line_equivalent_to_not_collinear_v0_r on H, G, E we get H not in Line(E, G)
By line_inequality on Line(F, H), f, H we get f != Line(F, H)
By line_inequality on Line(G, H), k, H we get k != Line(G, H)
By not_in_line_equivalent_to_not_collinear_v0_r on C, D, G we get C not in Line(D, G)
By line_inequality on Line(B, E), g, E we get g != Line(B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on D, A, G we get D not in Line(A, G)
By line_inequality on Line(B, G), g, G we get g != Line(B, G)
By not_in_line_equivalent_to_not_collinear_v0_r on F, D, G we get F not in Line(D, G)
By not_in_line_equivalent_to_not_collinear_v0_r on C, F, G we get C not in Line(F, G)
By not_in_line_equivalent_to_not_collinear_v0_r on G, H, D we get G not in Line(D, H)
By not_in_line_equivalent_to_not_collinear_v0_r on D, G, B we get D not in Line(B, G)
By not_in_line_equivalent_to_not_collinear_v0_r on C, E, G we get C not in Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on B, G, E we get B not in Line(E, G)
By line_inequality on Line(E, G), f, E we get f != Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on B, H, G we get B not in Line(G, H)
By line_inequality on Line(A, H), j, A we get j != Line(A, H)
By line_inequality on Line(D, G), f, G we get f != Line(D, G)
By not_in_line_equivalent_to_not_collinear_v0_r on I, A, H we get I not in Line(A, H)
By not_in_line_equivalent_to_not_collinear_v0_r on D, H, G we get D not in Line(G, H)
By not_in_line_equivalent_to_not_collinear_v0_r on F, A, H we get F not in Line(A, H)
By not_in_line_equivalent_to_not_collinear_v0_r on F, H, G we get F not in Line(G, H)
By not_in_line_equivalent_to_not_collinear_v0_r on F, G, E we get F not in Line(E, G)
By line_inequality on Line(E, G), h, E we get h != Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on G, D, A we get G not in Line(A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on C, H, A we get C not in Line(A, H)
By not_in_line_equivalent_to_not_collinear_v0_r on B, F, H we get B not in Line(F, H)
By not_in_line_equivalent_to_not_collinear_v0_r on B, F, G we get B not in Line(F, G)
By not_in_line_equivalent_to_not_collinear_v0_r on G, A, H we get G not in Line(A, H)
By not_in_line_equivalent_to_not_collinear_v0_r on E, A, H we get E not in Line(A, H)
By not_in_line_equivalent_to_not_collinear_v0_r on A, G, E we get A not in Line(E, G)
By line_inequality on Line(B, G), j, B we get j != Line(B, G)
By line_inequality on Line(F, G), g, G we get g != Line(F, G)
By not_in_line_equivalent_to_not_collinear_v0_r on I, E, B we get I not in Line(B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on C, A, G we get C not in Line(A, G)
By line_inequality on Line(B, G), i, B we get i != Line(B, G)
By line_inequality on Line(B, G), f, G we get f != Line(B, G)
By not_in_line_equivalent_to_not_collinear_v0_r on H, B, E we get H not in Line(B, E)
By line_inequality on Line(B, E), h, B we get h != Line(B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on C, B, G we get C not in Line(B, G)
By line_inequality on Line(F, H), i, F we get i != Line(F, H)
By line_inequality on Line(A, G), h, A we get h != Line(A, G)
By not_in_line_equivalent_to_not_collinear_v0_r on A, H, F we get A not in Line(F, H)
By line_inequality on Line(E, G), k, E we get k != Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on G, E, C we get G not in Line(C, E)
By not_in_line_equivalent_to_not_collinear_v0_r on H, G, F we get H not in Line(F, G)
By line_inequality on Line(B, G), k, B we get k != Line(B, G)
By not_in_line_equivalent_to_not_collinear_v0_r on C, G, H we get C not in Line(G, H)
By not_in_line_equivalent_to_not_collinear_v0_r on G, B, E we get G not in Line(B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on I, B, G we get I not in Line(B, G)
By line_inequality on Line(A, G), g, G we get g != Line(A, G)
By line_inequality on Line(G, H), j, H we get j != Line(G, H)
By not_in_line_equivalent_to_not_collinear_v0_r on A, E, B we get A not in Line(B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on A, D, G we get A not in Line(D, G)
By line_inequality on Line(F, H), h, F we get h != Line(F, H)
By line_inequality on Line(A, H), g, H we get g != Line(A, H)
By line_inequality on Line(G, H), i, H we get i != Line(G, H)
By line_inequality on Line(A, H), i, H we get i != Line(A, H)
By line_inequality on Line(G, H), g, H we get g != Line(G, H)
By not_in_line_equivalent_to_not_collinear_v0_r on G, E, A we get G not in Line(A, E)
By line_inequality on Line(F, H), g, F we get g != Line(F, H)
By not_in_line_equivalent_to_not_collinear_v0_r on E, G, F we get E not in Line(F, G)
By not_in_line_equivalent_to_not_collinear_v0_r on F, G, B we get F not in Line(B, G)
By line_inequality on Line(A, H), f, H we get f != Line(A, H)
By line_inequality on Line(F, H), k, H we get k != Line(F, H)
By not_in_line_equivalent_to_not_collinear_v0_r on D, E, B we get D not in Line(B, E)
By line_inequality on Line(A, H), h, A we get h != Line(A, H)
By not_in_line_equivalent_to_not_collinear_v0_r on E, D, G we get E not in Line(D, G)
By line_inequality on Line(B, E), j, B we get j != Line(B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on G, C, D we get G not in Line(C, D)
By not_in_line_equivalent_to_not_collinear_v0_r on G, H, F we get G not in Line(F, H)
By not_in_line_equivalent_to_not_collinear_v0_r on B, A, G we get B not in Line(A, G)
By not_in_line_equivalent_to_not_collinear_v0_r on G, E, D we get G not in Line(D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on E, G, B we get E not in Line(B, G)
By line_inequality on Line(A, G), k, A we get k != Line(A, G)
By not_in_line_equivalent_to_not_collinear_v0_r on C, E, B we get C not in Line(B, E)
By line_inequality on Line(A, G), f, G we get f != Line(A, G)
By not_in_line_equivalent_to_not_collinear_v0_r on H, A, G we get H not in Line(A, G)
By line_inequality on Line(B, E), f, E we get f != Line(B, E)
By line_inequality on Line(F, G), f, G we get f != Line(F, G)
By not_in_line_equivalent_to_not_collinear_v0_r on G, D, I we get G not in Line(D, I)
By line_inequality on Line(B, E), k, E we get k != Line(B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on I, G, E we get I not in Line(E, G)
By same_angle_v0 on B, F, A, C we get angle(A, B, C) == angle(F, B, C) mod 360
By same_angle_v1 on F, B, A, I we get angle(A, F, I) == angle(B, F, I) mod 360
By same_angle_v1 on B, I, C, A we get angle(C, B, A) == angle(I, B, A) mod 360
By same_angle_v0 on B, F, A, I we get angle(A, B, I) == angle(F, B, I) mod 360
By same_angle_v1 on B, C, I, G we get angle(C, B, G) == angle(I, B, G) mod 360
By same_angle_v1 on B, C, I, E we get angle(C, B, E) == angle(I, B, E) mod 360
By parallel_line_angles_reverse_v1 on D, H, F, B we get angle(B, F, H) == angle(D, H, F) mod 360
By parallel_line_angles_reverse_v0 on C, H, A, F we get angle(C, H, A) == angle(F, A, H) mod 360
By parallel_line_angles_reverse_v2 on C, H, F, A we get angle(C, H, F) == angle(A, F, H) + 180 mod 360
By parallel_line_angles_reverse_v3 on B, A, D, C we get angle(B, A, D) == angle(C, D, A) + 180 mod 360
By parallel_line_angles_reverse_v3 on C, B, A, E we get angle(C, B, A) == angle(E, A, B) + 180 mod 360
By parallel_line_angles_reverse_v2 on D, A, B, C we get angle(D, A, B) == angle(C, B, A) + 180 mod 360
By radical_axis_definition_v0_r on A, d, c we get A in radical_axis(c, d)
By parallel_line_angles_reverse_v2 on E, A, B, C we get angle(E, A, B) == angle(C, B, A) + 180 mod 360
By parallel_line_angles_reverse_v2 on H, D, F, B we get angle(H, D, F) == angle(B, F, D) + 180 mod 360
By parallel_line_angles_reverse_v3 on B, F, D, H we get angle(B, F, D) == angle(H, D, F) + 180 mod 360
By parallel_line_angles_reverse_v2 on C, D, A, B we get angle(C, D, A) == angle(B, A, D) + 180 mod 360
By parallel_line_angles_reverse_v1 on A, E, B, C we get angle(A, E, B) == angle(C, B, E) mod 360
By parallel_line_angles_reverse_v0 on F, A, D, C we get angle(C, D, A) == angle(F, A, D) mod 360
By parallel_line_angles_reverse_v3 on C, B, A, D we get angle(C, B, A) == angle(D, A, B) + 180 mod 360
By parallel_line_angles_reverse_v1 on A, E, B, I we get angle(A, E, B) == angle(I, B, E) mod 360
By collinear_definition on F, A, B we get A in Line(B, F), B in Line(A, F), Line(A, F) == Line(B, F), 0 == 2 * angle(A, F, B) mod 360
By parallel_line_angles_reverse_v2 on D, A, B, I we get angle(D, A, B) == angle(I, B, A) + 180 mod 360
By parallel_line_angles_reverse_v2 on C, H, A, B we get angle(C, H, A) == angle(B, A, H) + 180 mod 360
By parallel_line_angles_reverse_v3 on I, B, A, D we get angle(I, B, A) == angle(D, A, B) + 180 mod 360
By collinear_definition on F, B, A we get B in Line(A, F), A in Line(B, F), Line(A, F) == Line(B, F), 0 == 2 * angle(B, F, A) mod 360
By collinear_definition on B, A, F we get A in Line(B, F), F in Line(A, B), Line(A, B) == Line(B, F), 0 == 2 * angle(A, B, F) mod 360
By parallel_line_angles_reverse_v2 on C, D, F, A we get angle(C, D, F) == angle(A, F, D) + 180 mod 360
By parallel_line_angles_reverse_v3 on A, F, H, C we get angle(A, F, H) == angle(C, H, F) + 180 mod 360
By parallel_line_angles_reverse_v2 on E, A, B, I we get angle(E, A, B) == angle(I, B, A) + 180 mod 360
By parallel_line_angles_reverse_v3 on I, B, A, E we get angle(I, B, A) == angle(E, A, B) + 180 mod 360
By external_angle_bisector_definition_v0 on A, F, C, D we get 180 == angle(A, D, F) + angle(C, D, F) mod 360
By radical_axis_definition_v0_r on G, c, d we get G in radical_axis(c, d)
By parallel_line_angles_reverse_v3 on A, F, D, C we get angle(A, F, D) == angle(C, D, F) + 180 mod 360
By parallel_line_angles_reverse_v3 on B, A, H, C we get angle(B, A, H) == angle(C, H, A) + 180 mod 360
By collinear_definition on B, F, A we get F in Line(A, B), A in Line(B, F), Line(A, B) == Line(B, F), 0 == 2 * angle(F, B, A) mod 360
By same_angle_v0 on I, B, C, D we get angle(B, I, D) == angle(C, I, D) mod 360
By same_angle_v0 on I, C, B, F we get angle(B, I, F) == angle(C, I, F) mod 360
By same_angle_v3 on C, B, I, E we get angle(B, C, E) == angle(I, C, E) + 180 mod 360
By same_angle_v2 on C, B, I, D we get angle(B, C, D) == angle(I, C, D) + 180 mod 360
By same_angle_v2 on C, B, I, H we get angle(B, C, H) == angle(I, C, H) + 180 mod 360
By same_angle_v1 on B, C, I, F we get angle(C, B, F) == angle(I, B, F) mod 360
By parallel_line_angles_reverse_v2 on C, H, F, B we get angle(C, H, F) == angle(B, F, H) + 180 mod 360
By parallel_line_angles_reverse_v2 on C, D, F, B we get angle(C, D, F) == angle(B, F, D) + 180 mod 360
By parallel_line_angles_reverse_v3 on C, B, E, D we get angle(C, B, E) == angle(D, E, B) + 180 mod 360
By parallel_line_angles_reverse_v3 on I, B, E, D we get angle(I, B, E) == angle(D, E, B) + 180 mod 360
By parallel_line_angles_reverse_v3 on B, F, D, C we get angle(B, F, D) == angle(C, D, F) + 180 mod 360
By collinear_definition on B, I, C we get I in Line(B, C), C in Line(B, I), Line(B, C) == Line(B, I), 0 == 2 * angle(I, B, C) mod 360
By parallel_line_angles_reverse_v2 on D, E, B, C we get angle(D, E, B) == angle(C, B, E) + 180 mod 360
By collinear_definition on I, C, B we get C in Line(B, I), B in Line(C, I), Line(B, I) == Line(C, I), 0 == 2 * angle(C, I, B) mod 360
By parallel_line_angles_reverse_v3 on B, F, H, C we get angle(B, F, H) == angle(C, H, F) + 180 mod 360
By parallel_line_angles_reverse_v2 on D, E, B, I we get angle(D, E, B) == angle(I, B, E) + 180 mod 360
By collinear_definition on C, B, I we get B in Line(C, I), I in Line(B, C), Line(B, C) == Line(C, I), 0 == 2 * angle(B, C, I) mod 360
By collinear_definition on C, I, B we get I in Line(B, C), B in Line(C, I), Line(B, C) == Line(C, I), 0 == 2 * angle(I, C, B) mod 360
By collinear_definition on B, C, I we get C in Line(B, I), I in Line(B, C), Line(B, C) == Line(B, I), 0 == 2 * angle(C, B, I) mod 360
By external_angle_bisector_definition_v0 on A, I, C, D we get 180 == angle(A, D, I) + angle(C, D, I) mod 360
By collinear_definition on I, B, C we get B in Line(C, I), C in Line(B, I), Line(B, I) == Line(C, I), 0 == 2 * angle(B, I, C) mod 360
By parallel_line_angles_reverse_v2 on B, C, D, A we get angle(B, C, D) == angle(A, D, C) + 180 mod 360
By parallel_line_angles_reverse_v3 on A, D, I, C we get angle(A, D, I) == angle(C, I, D) + 180 mod 360
By parallel_line_angles_reverse_v2 on C, I, D, A we get angle(C, I, D) == angle(A, D, I) + 180 mod 360
By parallel_line_angles_reverse_v1 on I, C, E, A we get angle(A, E, C) == angle(I, C, E) mod 360
By parallel_line_angles_reverse_v1 on I, C, D, A we get angle(A, D, C) == angle(I, C, D) mod 360
By parallel_line_angles_reverse_v3 on A, D, C, B we get angle(A, D, C) == angle(B, C, D) + 180 mod 360
By parallel_line_angles_reverse_v3 on H, C, B, A we get angle(H, C, B) == angle(A, B, C) + 180 mod 360
By parallel_line_angles_reverse_v2 on A, B, C, H we get angle(A, B, C) == angle(H, C, B) + 180 mod 360
By parallel_line_angles_reverse_v2 on A, B, C, D we get angle(A, B, C) == angle(D, C, B) + 180 mod 360
By parallel_line_angles_reverse_v3 on D, C, B, A we get angle(D, C, B) == angle(A, B, C) + 180 mod 360
By parallel_line_angles_reverse_v2 on B, I, D, A we get angle(B, I, D) == angle(A, D, I) + 180 mod 360
By parallel_line_angles_reverse_v3 on A, E, C, B we get angle(A, E, C) == angle(B, C, E) + 180 mod 360
By internal_angle_bisector_definition_v0 on B, E, D, C we get angle(B, C, E) == angle(E, C, D) mod 360
By parallel_line_angles_reverse_v3 on A, D, I, B we get angle(A, D, I) == angle(B, I, D) + 180 mod 360
By parallel_line_angles_reverse_v2 on B, C, E, A we get angle(B, C, E) == angle(A, E, C) + 180 mod 360
By internal_angle_bisector_definition_v0 on D, E, B, C we get angle(D, C, E) == angle(E, C, B) mod 360
By parallel_line_angles_reverse_v2 on B, I, D, E we get angle(B, I, D) == angle(E, D, I) + 180 mod 360
By parallel_line_angles_reverse_v2 on F, B, C, H we get angle(F, B, C) == angle(H, C, B) + 180 mod 360
By parallel_line_angles_reverse_v3 on D, C, B, F we get angle(D, C, B) == angle(F, B, C) + 180 mod 360
By parallel_line_angles_reverse_v3 on E, D, C, B we get angle(E, D, C) == angle(B, C, D) + 180 mod 360
By parallelogram_parallel_definition on A, D, C, B we get parallelogram(A, B, C, D)
By parallel_line_angles_reverse_v3 on I, C, E, D we get angle(I, C, E) == angle(D, E, C) + 180 mod 360
By parallel_line_angles_reverse_v0 on D, E, C, B we get angle(B, C, E) == angle(D, E, C) mod 360
By parallel_line_angles_reverse_v2 on D, E, C, I we get angle(D, E, C) == angle(I, C, E) + 180 mod 360
By parallel_line_angles_reverse_v2 on F, B, C, D we get angle(F, B, C) == angle(D, C, B) + 180 mod 360
By parallel_line_angles_reverse_v2 on B, C, D, E we get angle(B, C, D) == angle(E, D, C) + 180 mod 360
By parallel_line_angles_reverse_v1 on I, C, D, E we get angle(E, D, C) == angle(I, C, D) mod 360
By parallel_line_angles_reverse_v3 on E, D, I, C we get angle(E, D, I) == angle(C, I, D) + 180 mod 360
By parallel_line_angles_reverse_v2 on C, I, D, E we get angle(C, I, D) == angle(E, D, I) + 180 mod 360
By parallelogram_parallel_definition on A, B, C, D we get parallelogram(A, B, C, D)
By parallelogram_parallel_definition on D, A, B, C we get parallelogram(A, B, C, D)
By parallel_line_angles_reverse_v3 on E, D, I, B we get angle(E, D, I) == angle(B, I, D) + 180 mod 360
By parallelogram_parallel_definition on B, C, D, A we get parallelogram(A, B, C, D)
By power_of_a_point_definition on B, A, F, d we get log(power_of_a_point(B, d)) == log(distance(A, B)) + log(distance(B, F))
By parallel_line_angles_reverse_v3 on H, C, B, F we get angle(H, C, B) == angle(F, B, C) + 180 mod 360
By parallelogram_parallel_definition on C, B, A, D we get parallelogram(A, B, C, D)
By parallelogram_parallel_definition on B, A, D, C we get parallelogram(A, B, C, D)
By power_of_a_point_definition on F, A, B, c we get log(power_of_a_point(F, c)) == log(distance(A, F)) + log(distance(B, F))
By parallelogram_parallel_definition on D, C, B, A we get parallelogram(A, B, C, D)
By parallelogram_parallel_definition on C, D, A, B we get parallelogram(A, B, C, D)
By concyclic_sufficient_conditions_v1 on B, C, H, F we get concyclic(B, C, F, H)
By chords_on_equal_angles_v1 on H, D, F, A, H, F, d we get distance(A, F) == distance(F, H)
By chords_on_equal_angles_v1 on A, H, F, A, G, D, d we get distance(A, D) == distance(A, F)
By line_intersection_definition on A, Line(A, H), i we get A == line_intersection(i, Line(A, H))
By line_intersection_definition on H, Line(F, H), h we get H == line_intersection(h, Line(F, H))
By line_intersection_definition on B, g, Line(B, E) we get B == line_intersection(g, Line(B, E))
By line_intersection_definition on B, Line(B, E), f we get B == line_intersection(f, Line(B, E))
By line_intersection_definition on B, Line(B, G), f we get B == line_intersection(f, Line(B, G))
By line_intersection_definition on F, Line(F, H), k we get F == line_intersection(k, Line(F, H))
By line_intersection_definition on A, f, Line(A, H) we get A == line_intersection(f, Line(A, H))
By line_intersection_definition on H, Line(A, H), h we get H == line_intersection(h, Line(A, H))
By line_intersection_definition on E, Line(B, E), i we get E == line_intersection(i, Line(B, E))
By line_intersection_definition on F, f, Line(F, H) we get F == line_intersection(f, Line(F, H))
By line_intersection_definition on A, Line(A, G), f we get A == line_intersection(f, Line(A, G))
By line_intersection_definition on F, Line(F, G), f we get F == line_intersection(f, Line(F, G))
By line_intersection_definition on B, Line(B, G), g we get B == line_intersection(g, Line(B, G))
By line_intersection_definition on E, j, Line(B, E) we get E == line_intersection(j, Line(B, E))
By same_angle_v1 on I, F, D, C we get angle(D, I, C) == angle(F, I, C) mod 360
By same_angle_v0 on A, E, D, H we get angle(D, A, H) == angle(E, A, H) mod 360
By same_angle_v3 on D, I, F, H we get angle(I, D, H) == angle(F, D, H) + 180 mod 360
By same_angle_v2 on E, D, A, G we get angle(D, E, G) == angle(A, E, G) + 180 mod 360
By same_angle_v0 on D, A, E, F we get angle(A, D, F) == angle(E, D, F) mod 360
By same_angle_v0 on F, I, D, G we get angle(D, F, G) == angle(I, F, G) mod 360
By same_angle_v1 on D, H, C, I we get angle(C, D, I) == angle(H, D, I) mod 360
By same_angle_v0 on D, C, H, E we get angle(C, D, E) == angle(H, D, E) mod 360
By same_angle_v1 on D, C, H, G we get angle(C, D, G) == angle(H, D, G) mod 360
By same_angle_v2 on D, I, F, A we get angle(I, D, A) == angle(F, D, A) + 180 mod 360
By same_angle_v1 on D, E, A, H we get angle(A, D, H) == angle(E, D, H) mod 360
By same_angle_v1 on I, F, D, B we get angle(D, I, B) == angle(F, I, B) mod 360
By same_angle_v1 on D, E, A, G we get angle(A, D, G) == angle(E, D, G) mod 360
By same_angle_v0 on F, D, I, H we get angle(D, F, H) == angle(I, F, H) mod 360
By same_angle_v3 on D, I, F, C we get angle(I, D, C) == angle(F, D, C) + 180 mod 360
By same_angle_v0 on F, D, I, A we get angle(D, F, A) == angle(I, F, A) mod 360
By same_angle_v3 on H, D, C, G we get angle(D, H, G) == angle(C, H, G) + 180 mod 360
By same_angle_v0 on F, I, D, B we get angle(D, F, B) == angle(I, F, B) mod 360
By same_angle_v3 on D, I, F, G we get angle(I, D, G) == angle(F, D, G) + 180 mod 360
By same_angle_v3 on D, I, F, E we get angle(I, D, E) == angle(F, D, E) + 180 mod 360
By same_angle_v1 on C, H, D, E we get angle(D, C, E) == angle(H, C, E) mod 360
By between_imply_not_between on B, C, I we get collinear_and_not_between(C, B, I)
By between_imply_not_between on F, A, B we get collinear_and_not_between(A, F, B)
By between_imply_not_between on I, C, B we get collinear_and_not_between(B, I, C)
By between_imply_not_between on B, A, F we get collinear_and_not_between(A, B, F)
By circle_radius_v0_r on A, c we get radius(c) == distance(A, center(c))
By circle_radius_v0_r on G, c we get radius(c) == distance(G, center(c))
By circle_radius_v0_r on D, d we get radius(d) == distance(D, center(d))
By circle_radius_v0_r on H, d we get radius(d) == distance(H, center(d))
By circle_radius_v0_r on G, d we get radius(d) == distance(G, center(d))
By circle_radius_v0_r on F, d we get radius(d) == distance(F, center(d))
By circle_radius_v0_r on E, c we get radius(c) == distance(E, center(c))
By circle_radius_v0_r on B, c we get radius(c) == distance(B, center(c))
By circle_radius_v0_r on A, d we get radius(d) == distance(A, center(d))
By angle_to_center on A, D, G, d we get 2 * angle(A, D, G) == angle(A, center(d), G) mod 360
By angle_to_center on D, F, G, d we get 2 * angle(D, F, G) == angle(D, center(d), G) mod 360
By angle_to_center on A, H, F, d we get 2 * angle(A, H, F) == angle(A, center(d), F) mod 360
By angle_to_center on A, G, D, d we get 2 * angle(A, G, D) == angle(A, center(d), D) mod 360
By angle_to_center on A, F, H, d we get 2 * angle(A, F, H) == angle(A, center(d), H) mod 360
By angle_to_center on A, H, G, d we get 2 * angle(A, H, G) == angle(A, center(d), G) mod 360
By angle_to_center on H, D, A, d we get 2 * angle(H, D, A) == angle(H, center(d), A) mod 360
By angle_to_center on F, H, A, d we get 2 * angle(F, H, A) == angle(F, center(d), A) mod 360
By angle_to_center on B, G, A, c we get 2 * angle(B, G, A) == angle(B, center(c), A) mod 360
By angle_to_center on F, G, H, d we get 2 * angle(F, G, H) == angle(F, center(d), H) mod 360
By angle_to_center on G, D, F, d we get 2 * angle(G, D, F) == angle(G, center(d), F) mod 360
By angle_to_center on F, G, D, d we get 2 * angle(F, G, D) == angle(F, center(d), D) mod 360
By angle_to_center on D, G, A, d we get 2 * angle(D, G, A) == angle(D, center(d), A) mod 360
By angle_to_center on H, G, F, d we get 2 * angle(H, G, F) == angle(H, center(d), F) mod 360
By angle_to_center on A, B, E, c we get 2 * angle(A, B, E) == angle(A, center(c), E) mod 360
By angle_to_center on H, F, A, d we get 2 * angle(H, F, A) == angle(H, center(d), A) mod 360
By angle_to_center on G, A, F, d we get 2 * angle(G, A, F) == angle(G, center(d), F) mod 360
By angle_to_center on G, H, A, d we get 2 * angle(G, H, A) == angle(G, center(d), A) mod 360
By angle_to_center on E, B, A, c we get 2 * angle(E, B, A) == angle(E, center(c), A) mod 360
By angle_to_center on D, G, H, d we get 2 * angle(D, G, H) == angle(D, center(d), H) mod 360
By angle_to_center on B, A, E, c we get 2 * angle(B, A, E) == angle(B, center(c), E) mod 360
By angle_to_center on A, F, G, d we get 2 * angle(A, F, G) == angle(A, center(d), G) mod 360
By angle_to_center on E, G, B, c we get 2 * angle(E, G, B) == angle(E, center(c), B) mod 360
By angle_to_center on H, A, D, d we get 2 * angle(H, A, D) == angle(H, center(d), D) mod 360
By angle_to_center on H, A, F, d we get 2 * angle(H, A, F) == angle(H, center(d), F) mod 360
By angle_to_center on H, D, F, d we get 2 * angle(H, D, F) == angle(H, center(d), F) mod 360
By angle_to_center on G, A, B, c we get 2 * angle(G, A, B) == angle(G, center(c), B) mod 360
By center_not_on_circle on d we get center(d) not in d
By angle_to_center on G, A, E, c we get 2 * angle(G, A, E) == angle(G, center(c), E) mod 360
By angle_to_center on G, F, D, d we get 2 * angle(G, F, D) == angle(G, center(d), D) mod 360
By angle_to_center on A, G, F, d we get 2 * angle(A, G, F) == angle(A, center(d), F) mod 360
By angle_to_center on G, F, H, d we get 2 * angle(G, F, H) == angle(G, center(d), H) mod 360
By angle_to_center on G, E, A, c we get 2 * angle(G, E, A) == angle(G, center(c), A) mod 360
By angle_to_center on F, A, D, d we get 2 * angle(F, A, D) == angle(F, center(d), D) mod 360
By angle_to_center on A, E, B, c we get 2 * angle(A, E, B) == angle(A, center(c), B) mod 360
By angle_to_center on D, H, A, d we get 2 * angle(D, H, A) == angle(D, center(d), A) mod 360
By angle_to_center on E, A, B, c we get 2 * angle(E, A, B) == angle(E, center(c), B) mod 360
By angle_to_center on B, E, G, c we get 2 * angle(B, E, G) == angle(B, center(c), G) mod 360
By angle_to_center on F, A, H, d we get 2 * angle(F, A, H) == angle(F, center(d), H) mod 360
By angle_to_center on F, H, D, d we get 2 * angle(F, H, D) == angle(F, center(d), D) mod 360
By angle_to_center on A, D, H, d we get 2 * angle(A, D, H) == angle(A, center(d), H) mod 360
By angle_to_center on G, B, A, c we get 2 * angle(G, B, A) == angle(G, center(c), A) mod 360
By angle_to_center on H, G, A, d we get 2 * angle(H, G, A) == angle(H, center(d), A) mod 360
By angle_to_center on H, D, G, d we get 2 * angle(H, D, G) == angle(H, center(d), G) mod 360
By angle_to_center on E, G, A, c we get 2 * angle(E, G, A) == angle(E, center(c), A) mod 360
By angle_to_center on B, A, G, c we get 2 * angle(B, A, G) == angle(B, center(c), G) mod 360
By angle_to_center on D, H, F, d we get 2 * angle(D, H, F) == angle(D, center(d), F) mod 360
By angle_to_center on A, F, D, d we get 2 * angle(A, F, D) == angle(A, center(d), D) mod 360
By angle_to_center on D, A, F, d we get 2 * angle(D, A, F) == angle(D, center(d), F) mod 360
By angle_to_center on D, A, G, d we get 2 * angle(D, A, G) == angle(D, center(d), G) mod 360
By angle_to_center on E, B, G, c we get 2 * angle(E, B, G) == angle(E, center(c), G) mod 360
By angle_to_center on A, D, F, d we get 2 * angle(A, D, F) == angle(A, center(d), F) mod 360
By angle_to_center on H, A, G, d we get 2 * angle(H, A, G) == angle(H, center(d), G) mod 360
By angle_to_center on H, F, D, d we get 2 * angle(H, F, D) == angle(H, center(d), D) mod 360
By angle_to_center on A, H, D, d we get 2 * angle(A, H, D) == angle(A, center(d), D) mod 360
By angle_to_center on A, E, G, c we get 2 * angle(A, E, G) == angle(A, center(c), G) mod 360
By angle_to_center on F, H, G, d we get 2 * angle(F, H, G) == angle(F, center(d), G) mod 360
By angle_to_center on G, F, A, d we get 2 * angle(G, F, A) == angle(G, center(d), A) mod 360
By angle_to_center on G, A, D, d we get 2 * angle(G, A, D) == angle(G, center(d), D) mod 360
By angle_to_center on G, D, H, d we get 2 * angle(G, D, H) == angle(G, center(d), H) mod 360
By angle_to_center on F, D, A, d we get 2 * angle(F, D, A) == angle(F, center(d), A) mod 360
By angle_to_center on A, B, G, c we get 2 * angle(A, B, G) == angle(A, center(c), G) mod 360
By angle_to_center on G, A, H, d we get 2 * angle(G, A, H) == angle(G, center(d), H) mod 360
By angle_to_center on H, F, G, d we get 2 * angle(H, F, G) == angle(H, center(d), G) mod 360
By angle_to_center on F, D, H, d we get 2 * angle(F, D, H) == angle(F, center(d), H) mod 360
By angle_to_center on D, G, F, d we get 2 * angle(D, G, F) == angle(D, center(d), F) mod 360
By angle_to_center on D, F, H, d we get 2 * angle(D, F, H) == angle(D, center(d), H) mod 360
By angle_to_center on F, D, G, d we get 2 * angle(F, D, G) == angle(F, center(d), G) mod 360
By angle_to_center on G, B, E, c we get 2 * angle(G, B, E) == angle(G, center(c), E) mod 360
By angle_to_center on H, G, D, d we get 2 * angle(H, G, D) == angle(H, center(d), D) mod 360
By angle_to_center on G, E, B, c we get 2 * angle(G, E, B) == angle(G, center(c), B) mod 360
By angle_to_center on D, H, G, d we get 2 * angle(D, H, G) == angle(D, center(d), G) mod 360
By angle_to_center on B, G, E, c we get 2 * angle(B, G, E) == angle(B, center(c), E) mod 360
By angle_to_center on G, D, A, d we get 2 * angle(G, D, A) == angle(G, center(d), A) mod 360
By angle_to_center on A, G, B, c we get 2 * angle(A, G, B) == angle(A, center(c), B) mod 360
By angle_to_center on F, G, A, d we get 2 * angle(F, G, A) == angle(F, center(d), A) mod 360
By angle_to_center on F, A, G, d we get 2 * angle(F, A, G) == angle(F, center(d), G) mod 360
By angle_to_center on B, E, A, c we get 2 * angle(B, E, A) == angle(B, center(c), A) mod 360
By angle_to_center on D, F, A, d we get 2 * angle(D, F, A) == angle(D, center(d), A) mod 360
By angle_to_center on D, A, H, d we get 2 * angle(D, A, H) == angle(D, center(d), H) mod 360
By angle_to_center on G, H, F, d we get 2 * angle(G, H, F) == angle(G, center(d), F) mod 360
By angle_to_center on A, G, E, c we get 2 * angle(A, G, E) == angle(A, center(c), E) mod 360
By angle_to_center on E, A, G, c we get 2 * angle(E, A, G) == angle(E, center(c), G) mod 360
By angle_to_center on G, H, D, d we get 2 * angle(G, H, D) == angle(G, center(d), D) mod 360
By angle_to_center on A, G, H, d we get 2 * angle(A, G, H) == angle(A, center(d), H) mod 360
By divide_by_2_mod_180_v2 on E, C, I, C, D, I we get angle(E, C, I) == angle(C, D, I) + 180 mod 360
By center_not_on_circle on c we get center(c) not in c
By divide_by_2_mod_180_v2 on I, D, C, A, E, C we get angle(I, D, C) == angle(A, E, C) + 180 mod 360
By divide_by_2_mod_180_v2 on C, I, D, D, H, A we get angle(C, I, D) == angle(D, H, A) + 180 mod 360
By divide_by_2_mod_180_v1 on D, H, A, A, D, I we get angle(A, D, I) == angle(D, H, A) mod 360
By divide_by_2_mod_180_v2 on D, E, C, D, G, A we get angle(D, E, C) == angle(D, G, A) + 180 mod 360
By divide_by_2_mod_180_v1 on A, H, C, C, E, D we get angle(A, H, C) == angle(C, E, D) mod 360
By divide_by_2_mod_180_v2 on C, I, D, A, E, C we get angle(C, I, D) == angle(A, E, C) + 180 mod 360
By divide_by_2_mod_180_v3 on C, E, D, I, D, A we get angle(C, E, D) == angle(I, D, A) + 180 mod 360
By divide_by_2_mod_180_v1 on F, D, A, D, I, B we get angle(D, I, B) == angle(F, D, A) mod 360
By divide_by_2_mod_180_v0 on A, H, D, I, D, A we get angle(A, H, D) == angle(I, D, A) mod 360
By divide_by_2_mod_180_v0 on D, E, C, D, F, A we get angle(D, E, C) == angle(D, F, A) mod 360
By divide_by_2_mod_180_v1 on A, D, I, A, E, C we get angle(A, D, I) == angle(A, E, C) mod 360
By divide_by_2_mod_180_v1 on I, C, E, D, H, A we get angle(D, H, A) == angle(I, C, E) mod 360
By divide_by_2_mod_180_v3 on D, I, B, C, D, F we get angle(D, I, B) == angle(C, D, F) + 180 mod 360
By probably_between_and_collinear_implies_between on D, H, C we get between(C, H, D)
By divide_by_2_mod_180_v3 on C, E, D, H, A, B we get angle(C, E, D) == angle(H, A, B) + 180 mod 360
By probably_between_and_collinear_implies_between on F, D, I we get between(F, D, I)
By divide_by_2_mod_180_v0 on E, C, I, H, D, F we get angle(E, C, I) == angle(H, D, F) mod 360
By divide_by_2_mod_180_v0 on E, C, I, C, D, F we get angle(C, D, F) == angle(E, C, I) mod 360
By divide_by_2_mod_180_v2 on I, D, A, D, C, E we get angle(I, D, A) == angle(D, C, E) + 180 mod 360
By divide_by_2_mod_180_v0 on D, E, C, A, H, F we get angle(A, H, F) == angle(D, E, C) mod 360
By divide_by_2_mod_180_v2 on F, A, H, E, D, I we get angle(F, A, H) == angle(E, D, I) + 180 mod 360
By divide_by_2_mod_180_v0 on A, G, F, E, C, D we get angle(A, G, F) == angle(E, C, D) mod 360
By divide_by_2_mod_180_v2 on A, H, D, D, C, E we get angle(A, H, D) == angle(D, C, E) + 180 mod 360
By divide_by_2_mod_180_v2 on I, D, C, F, D, H we get angle(I, D, C) == angle(F, D, H) + 180 mod 360
By divide_by_2_mod_180_v3 on E, C, B, A, G, D we get angle(E, C, B) == angle(A, G, D) + 180 mod 360
By divide_by_2_mod_180_v1 on I, C, E, F, D, H we get angle(F, D, H) == angle(I, C, E) mod 360
By isosceles_triangle_from_angles on A, D, F we get isosceles_triangle(A, D, F)
By divide_by_2_mod_180_v1 on E, C, B, H, A, F we get angle(E, C, B) == angle(H, A, F) mod 360
By divide_by_2_mod_180_v0 on E, C, D, C, I, D we get angle(C, I, D) == angle(E, C, D) mod 360
By divide_by_2_mod_180_v3 on F, D, C, I, D, C we get angle(F, D, C) == angle(I, D, C) + 180 mod 360
By divide_by_2_mod_180_v1 on D, I, C, E, C, B we get angle(D, I, C) == angle(E, C, B) mod 360
By divide_by_2_mod_180_v0 on I, D, E, H, D, F we get angle(H, D, F) == angle(I, D, E) mod 360
By divide_by_2_mod_180_v3 on F, D, A, C, E, A we get angle(F, D, A) == angle(C, E, A) + 180 mod 360
By divide_by_2_mod_180_v2 on E, C, D, B, A, H we get angle(E, C, D) == angle(B, A, H) + 180 mod 360
By asa_congruence on H, A, F, F, D, A we get congruent_triangles(A, D, F, F, A, H)
By divide_by_2_mod_180_v0 on H, A, B, E, C, I we get angle(E, C, I) == angle(H, A, B) mod 360
By divide_by_2_mod_180_v2 on C, D, F, E, C, B we get angle(C, D, F) == angle(E, C, B) + 180 mod 360
By divide_by_2_mod_180_v0 on C, E, A, A, H, D we get angle(A, H, D) == angle(C, E, A) mod 360
By divide_by_2_mod_180_v1 on I, C, E, F, G, H we get angle(F, G, H) == angle(I, C, E) mod 360
By divide_by_2_mod_180_v0 on B, I, D, A, H, F we get angle(A, H, F) == angle(B, I, D) mod 360
By divide_by_2_mod_180_v0 on C, I, D, D, F, B we get angle(C, I, D) == angle(D, F, B) mod 360
By divide_by_2_mod_180_v2 on B, I, D, D, H, A we get angle(B, I, D) == angle(D, H, A) + 180 mod 360
By divide_by_2_mod_180_v0 on B, I, D, D, E, C we get angle(B, I, D) == angle(D, E, C) mod 360
By divide_by_2_mod_180_v2 on H, A, B, C, D, I we get angle(H, A, B) == angle(C, D, I) + 180 mod 360
By divide_by_2_mod_180_v0 on C, E, A, H, G, F we get angle(C, E, A) == angle(H, G, F) mod 360
By divide_by_2_mod_180_v2 on A, H, D, D, I, C we get angle(A, H, D) == angle(D, I, C) + 180 mod 360
By divide_by_2_mod_180_v3 on D, C, E, H, A, B we get angle(D, C, E) == angle(H, A, B) + 180 mod 360
By divide_by_2_mod_180_v3 on A, D, I, A, D, F we get angle(A, D, I) == angle(A, D, F) + 180 mod 360
By divide_by_2_mod_180_v0 on C, D, F, I, D, E we get angle(C, D, F) == angle(I, D, E) mod 360
By divide_by_2_mod_180_v3 on A, D, I, F, A, H we get angle(A, D, I) == angle(F, A, H) + 180 mod 360
By divide_by_2_mod_180_v3 on A, H, C, E, C, I we get angle(A, H, C) == angle(E, C, I) + 180 mod 360
By divide_by_2_mod_180_v1 on E, D, I, I, C, E we get angle(E, D, I) == angle(I, C, E) mod 360
By divide_by_2_mod_180_v3 on C, D, I, A, G, D we get angle(C, D, I) == angle(A, G, D) + 180 mod 360
By divide_by_2_mod_180_v1 on F, D, H, E, D, I we get angle(E, D, I) == angle(F, D, H) mod 360
By divide_by_2_mod_180_v2 on H, G, F, E, C, B we get angle(H, G, F) == angle(E, C, B) + 180 mod 360
By divide_by_2_mod_180_v2 on B, C, E, A, D, I we get angle(B, C, E) == angle(A, D, I) + 180 mod 360
By divide_by_2_mod_180_v2 on A, G, D, C, D, I we get angle(A, G, D) == angle(C, D, I) + 180 mod 360
By divide_by_2_mod_180_v0 on D, F, B, I, D, C we get angle(D, F, B) == angle(I, D, C) mod 360
By divide_by_2_mod_180_v2 on A, D, F, E, D, I we get angle(A, D, F) == angle(E, D, I) + 180 mod 360
By divide_by_2_mod_180_v0 on A, D, F, I, D, C we get angle(A, D, F) == angle(I, D, C) mod 360
By probably_between_and_collinear_implies_between on D, E, A we get between(A, E, D)
By divide_by_2_mod_180_v1 on H, A, F, D, I, C we get angle(D, I, C) == angle(H, A, F) mod 360
By divide_by_2_mod_180_v3 on E, C, B, I, D, A we get angle(E, C, B) == angle(I, D, A) + 180 mod 360
By divide_by_2_mod_180_v3 on E, D, I, D, F, B we get angle(E, D, I) == angle(D, F, B) + 180 mod 360
By divide_by_2_mod_180_v3 on A, D, I, B, C, E we get angle(A, D, I) == angle(B, C, E) + 180 mod 360
By divide_by_2_mod_180_v1 on A, F, D, D, C, E we get angle(A, F, D) == angle(D, C, E) mod 360
By divide_by_2_mod_180_v3 on C, D, I, A, H, D we get angle(C, D, I) == angle(A, H, D) + 180 mod 360
By divide_by_2_mod_180_v3 on B, A, H, B, C, E we get angle(B, A, H) == angle(B, C, E) + 180 mod 360
By divide_by_2_mod_180_v1 on F, D, A, D, I, C we get angle(D, I, C) == angle(F, D, A) mod 360
By divide_by_2_mod_180_v1 on A, E, C, F, G, H we get angle(A, E, C) == angle(F, G, H) mod 360
By divide_by_2_mod_180_v3 on C, D, I, E, C, I we get angle(C, D, I) == angle(E, C, I) + 180 mod 360
By divide_by_2_mod_180_v0 on B, I, D, A, D, F we get angle(A, D, F) == angle(B, I, D) mod 360
By divide_by_2_mod_180_v3 on A, D, I, D, F, B we get angle(A, D, I) == angle(D, F, B) + 180 mod 360
By divide_by_2_mod_180_v2 on C, D, F, D, C, E we get angle(C, D, F) == angle(D, C, E) + 180 mod 360
By divide_by_2_mod_180_v2 on C, H, A, E, D, I we get angle(C, H, A) == angle(E, D, I) + 180 mod 360
By divide_by_2_mod_180_v1 on C, E, D, C, D, I we get angle(C, D, I) == angle(C, E, D) mod 360
By divide_by_2_mod_180_v0 on A, H, F, I, D, C we get angle(A, H, F) == angle(I, D, C) mod 360
By divide_by_2_mod_180_v0 on C, D, F, C, E, A we get angle(C, D, F) == angle(C, E, A) mod 360
By divide_by_2_mod_180_v0 on B, I, D, D, F, A we get angle(B, I, D) == angle(D, F, A) mod 360
By congruence_from_similar_triangles on F, D, A, H, A, F we get congruent_triangles(A, D, F, F, A, H)
By divide_by_2_mod_180_v1 on D, I, C, F, G, A we get angle(D, I, C) == angle(F, G, A) mod 360
By divide_by_2_mod_180_v3 on D, I, B, A, H, D we get angle(D, I, B) == angle(A, H, D) + 180 mod 360
By divide_by_2_mod_180_v0 on B, C, E, A, D, F we get angle(A, D, F) == angle(B, C, E) mod 360
By divide_by_2_mod_180_v3 on D, I, B, H, A, B we get angle(D, I, B) == angle(H, A, B) + 180 mod 360
By divide_by_2_mod_180_v2 on H, A, B, D, C, E we get angle(H, A, B) == angle(D, C, E) + 180 mod 360
By divide_by_2_mod_180_v0 on C, I, D, A, H, F we get angle(A, H, F) == angle(C, I, D) mod 360
By divide_by_2_mod_180_v1 on A, E, C, D, G, A we get angle(A, E, C) == angle(D, G, A) mod 360
By divide_by_2_mod_180_v0 on A, H, F, E, C, D we get angle(A, H, F) == angle(E, C, D) mod 360
By divide_by_2_mod_180_v1 on F, G, A, D, C, E we get angle(D, C, E) == angle(F, G, A) mod 360
By divide_by_2_mod_180_v3 on F, D, C, C, I, D we get angle(F, D, C) == angle(C, I, D) + 180 mod 360
By divide_by_2_mod_180_v3 on H, A, F, C, E, A we get angle(H, A, F) == angle(C, E, A) + 180 mod 360
By divide_by_2_mod_180_v2 on A, G, F, I, C, E we get angle(A, G, F) == angle(I, C, E) + 180 mod 360
By divide_by_2_mod_180_v2 on B, C, E, F, G, H we get angle(B, C, E) == angle(F, G, H) + 180 mod 360
By divide_by_2_mod_180_v2 on C, D, F, C, E, D we get angle(C, D, F) == angle(C, E, D) + 180 mod 360
By divide_by_2_mod_180_v1 on H, A, F, D, C, E we get angle(D, C, E) == angle(H, A, F) mod 360
By divide_by_2_mod_180_v3 on C, E, D, A, H, D we get angle(C, E, D) == angle(A, H, D) + 180 mod 360
By divide_by_2_mod_180_v2 on H, G, F, C, E, D we get angle(H, G, F) == angle(C, E, D) + 180 mod 360
By reverse_direction on B, I we get 180 == direction(B, I) - direction(I, B) mod 360
By collinear_definition on A, E, D we get E in Line(A, D), D in Line(A, E), Line(A, D) == Line(A, E), 0 == 2 * angle(E, A, D) mod 360
By divide_by_2_mod_180_v3 on A, E, C, B, I, D we get angle(A, E, C) == angle(B, I, D) + 180 mod 360
By divide_by_2_mod_180_v3 on I, C, E, C, I, D we get angle(I, C, E) == angle(C, I, D) + 180 mod 360
By divide_by_2_mod_180_v2 on C, E, A, B, F, D we get angle(C, E, A) == angle(B, F, D) + 180 mod 360
By divide_by_2_mod_180_v2 on B, I, D, F, D, C we get angle(B, I, D) == angle(F, D, C) + 180 mod 360
By divide_by_2_mod_180_v3 on C, D, I, H, A, B we get angle(C, D, I) == angle(H, A, B) + 180 mod 360
By divide_by_2_mod_180_v2 on A, D, F, A, D, I we get angle(A, D, F) == angle(A, D, I) + 180 mod 360
By divide_by_2_mod_180_v1 on F, G, A, D, I, B we get angle(D, I, B) == angle(F, G, A) mod 360
By divide_by_2_mod_180_v0 on E, C, I, I, D, E we get angle(E, C, I) == angle(I, D, E) mod 360
By divide_by_2_mod_180_v0 on H, G, F, E, C, I we get angle(E, C, I) == angle(H, G, F) mod 360
By divide_by_2_mod_180_v1 on E, D, I, A, E, C we get angle(A, E, C) == angle(E, D, I) mod 360
By collinear_definition on E, A, D we get A in Line(D, E), D in Line(A, E), Line(A, E) == Line(D, E), 0 == 2 * angle(A, E, D) mod 360
By divide_by_2_mod_180_v3 on E, D, I, A, H, F we get angle(E, D, I) == angle(A, H, F) + 180 mod 360
By divide_by_2_mod_180_v2 on A, H, F, A, E, C we get angle(A, H, F) == angle(A, E, C) + 180 mod 360
By divide_by_2_mod_180_v0 on D, F, A, I, D, C we get angle(D, F, A) == angle(I, D, C) mod 360
By anti_congruence_from_anti_similar_triangles on D, I, C, I, D, C we get anti_congruent_triangles(C, D, I, C, I, D)
By divide_by_2_mod_180_v0 on C, I, D, D, E, C we get angle(C, I, D) == angle(D, E, C) mod 360
By divide_by_2_mod_180_v2 on B, C, E, E, D, I we get angle(B, C, E) == angle(E, D, I) + 180 mod 360
By divide_by_2_mod_180_v2 on F, A, H, A, D, I we get angle(F, A, H) == angle(A, D, I) + 180 mod 360
By divide_by_2_mod_180_v1 on C, E, D, B, F, D we get angle(B, F, D) == angle(C, E, D) mod 360
By divide_by_2_mod_180_v3 on E, D, I, D, E, C we get angle(E, D, I) == angle(D, E, C) + 180 mod 360
By divide_by_2_mod_180_v3 on A, E, C, D, F, B we get angle(A, E, C) == angle(D, F, B) + 180 mod 360
By divide_by_2_mod_180_v3 on D, C, E, I, D, A we get angle(D, C, E) == angle(I, D, A) + 180 mod 360
By divide_by_2_mod_180_v0 on A, G, D, E, C, I we get angle(A, G, D) == angle(E, C, I) mod 360
By divide_by_2_mod_180_v0 on F, A, H, E, C, D we get angle(E, C, D) == angle(F, A, H) mod 360
By divide_by_2_mod_180_v0 on C, D, F, I, D, A we get angle(C, D, F) == angle(I, D, A) mod 360
By divide_by_2_mod_180_v0 on B, I, D, F, A, H we get angle(B, I, D) == angle(F, A, H) mod 360
By divide_by_2_mod_180_v3 on B, A, H, D, E, C we get angle(B, A, H) == angle(D, E, C) + 180 mod 360
By divide_by_2_mod_180_v3 on I, C, E, B, I, D we get angle(I, C, E) == angle(B, I, D) + 180 mod 360
By divide_by_2_mod_180_v3 on C, E, D, H, D, F we get angle(C, E, D) == angle(H, D, F) + 180 mod 360
By divide_by_2_mod_180_v1 on D, I, B, D, C, E we get angle(D, C, E) == angle(D, I, B) mod 360
By divide_by_2_mod_180_v2 on I, D, E, F, G, A we get angle(I, D, E) == angle(F, G, A) + 180 mod 360
By divide_by_2_mod_180_v1 on D, C, E, B, F, D we get angle(B, F, D) == angle(D, C, E) mod 360
By divide_by_2_mod_180_v3 on F, D, C, E, C, D we get angle(F, D, C) == angle(E, C, D) + 180 mod 360
By divide_by_2_mod_180_v1 on E, D, I, F, D, C we get angle(E, D, I) == angle(F, D, C) mod 360
By divide_by_2_mod_180_v3 on A, F, D, E, C, I we get angle(A, F, D) == angle(E, C, I) + 180 mod 360
By divide_by_2_mod_180_v3 on D, I, B, H, G, F we get angle(D, I, B) == angle(H, G, F) + 180 mod 360
By divide_by_2_mod_180_v3 on D, G, A, D, E, C we get angle(D, G, A) == angle(D, E, C) + 180 mod 360
By divide_by_2_mod_180_v1 on A, H, C, E, C, B we get angle(A, H, C) == angle(E, C, B) mod 360
By divide_by_2_mod_180_v3 on C, D, I, C, D, F we get angle(C, D, I) == angle(C, D, F) + 180 mod 360
By divide_by_2_mod_180_v2 on B, I, D, B, A, H we get angle(B, I, D) == angle(B, A, H) + 180 mod 360
By divide_by_2_mod_180_v1 on C, E, D, A, F, D we get angle(A, F, D) == angle(C, E, D) mod 360
By divide_by_2_mod_180_v1 on A, D, I, F, D, C we get angle(A, D, I) == angle(F, D, C) mod 360
By divide_by_2_mod_180_v1 on C, E, D, D, I, B we get angle(C, E, D) == angle(D, I, B) mod 360
By divide_by_2_mod_180_v0 on C, H, A, C, I, D we get angle(C, H, A) == angle(C, I, D) mod 360
By divide_by_2_mod_180_v1 on E, C, B, A, F, D we get angle(A, F, D) == angle(E, C, B) mod 360
By divide_by_2_mod_180_v1 on C, D, I, A, H, C we get angle(A, H, C) == angle(C, D, I) mod 360
By divide_by_2_mod_180_v0 on C, H, A, D, E, C we get angle(C, H, A) == angle(D, E, C) mod 360
By divide_by_2_mod_180_v3 on D, I, C, H, A, B we get angle(D, I, C) == angle(H, A, B) + 180 mod 360
By divide_by_2_mod_180_v0 on I, D, E, A, H, D we get angle(A, H, D) == angle(I, D, E) mod 360
By divide_by_2_mod_180_v2 on F, A, H, A, E, C we get angle(F, A, H) == angle(A, E, C) + 180 mod 360
By divide_by_2_mod_180_v0 on F, A, H, C, I, D we get angle(C, I, D) == angle(F, A, H) mod 360
By divide_by_2_mod_180_v0 on A, G, F, D, E, C we get angle(A, G, F) == angle(D, E, C) mod 360
By divide_by_2_mod_180_v3 on D, G, A, B, I, D we get angle(D, G, A) == angle(B, I, D) + 180 mod 360
By divide_by_2_mod_180_v0 on C, I, D, B, C, E we get angle(B, C, E) == angle(C, I, D) mod 360
By divide_by_2_mod_180_v1 on A, F, D, D, I, C we get angle(A, F, D) == angle(D, I, C) mod 360
By divide_by_2_mod_180_v3 on F, G, H, C, I, D we get angle(F, G, H) == angle(C, I, D) + 180 mod 360
By divide_by_2_mod_180_v1 on C, E, D, F, D, A we get angle(C, E, D) == angle(F, D, A) mod 360
By divide_by_2_mod_180_v0 on C, E, A, A, G, D we get angle(A, G, D) == angle(C, E, A) mod 360
By divide_by_2_mod_180_v3 on F, D, H, B, C, E we get angle(F, D, H) == angle(B, C, E) + 180 mod 360
By line_inequality on Line(E, G), i, G we get i != Line(E, G)
By divide_by_2_mod_180_v2 on A, G, F, E, D, I we get angle(A, G, F) == angle(E, D, I) + 180 mod 360
By divide_by_2_mod_180_v3 on D, I, C, H, D, F we get angle(D, I, C) == angle(H, D, F) + 180 mod 360
By divide_by_2_mod_180_v0 on I, D, A, H, D, F we get angle(H, D, F) == angle(I, D, A) mod 360
By divide_by_2_mod_180_v2 on C, H, A, A, E, C we get angle(C, H, A) == angle(A, E, C) + 180 mod 360
By divide_by_2_mod_180_v1 on A, D, I, D, G, A we get angle(A, D, I) == angle(D, G, A) mod 360
By divide_by_2_mod_180_v2 on C, E, A, F, G, A we get angle(C, E, A) == angle(F, G, A) + 180 mod 360
By divide_by_2_mod_180_v2 on I, D, C, B, A, H we get angle(I, D, C) == angle(B, A, H) + 180 mod 360
By collinear_definition on D, C, H we get C in Line(D, H), H in Line(C, D), Line(C, D) == Line(D, H), 0 == 2 * angle(C, D, H) mod 360
By divide_by_2_mod_180_v1 on A, F, D, D, I, B we get angle(A, F, D) == angle(D, I, B) mod 360
By divide_by_2_mod_180_v2 on E, C, I, D, I, B we get angle(E, C, I) == angle(D, I, B) + 180 mod 360
By divide_by_2_mod_180_v1 on C, D, I, E, C, B we get angle(C, D, I) == angle(E, C, B) mod 360
By divide_by_2_mod_180_v0 on I, D, C, D, E, C we get angle(D, E, C) == angle(I, D, C) mod 360
By divide_by_2_mod_180_v3 on F, D, H, D, E, C we get angle(F, D, H) == angle(D, E, C) + 180 mod 360
By divide_by_2_mod_180_v3 on B, F, D, E, C, I we get angle(B, F, D) == angle(E, C, I) + 180 mod 360
By congruence_from_similar_triangles on H, A, F, F, D, A we get congruent_triangles(A, D, F, F, A, H)
By divide_by_2_mod_180_v2 on C, E, A, D, I, B we get angle(C, E, A) == angle(D, I, B) + 180 mod 360
By divide_by_2_mod_180_v1 on F, D, H, A, D, I we get angle(A, D, I) == angle(F, D, H) mod 360
By divide_by_2_mod_180_v2 on D, F, B, E, D, I we get angle(D, F, B) == angle(E, D, I) + 180 mod 360
By divide_by_2_mod_180_v3 on A, F, D, I, D, A we get angle(A, F, D) == angle(I, D, A) + 180 mod 360
By divide_by_2_mod_180_v0 on B, C, E, F, A, H we get angle(B, C, E) == angle(F, A, H) mod 360
By divide_by_2_mod_180_v2 on C, D, F, D, I, C we get angle(C, D, F) == angle(D, I, C) + 180 mod 360
By divide_by_2_mod_180_v3 on D, H, A, D, E, C we get angle(D, H, A) == angle(D, E, C) + 180 mod 360
By divide_by_2_mod_180_v2 on I, D, E, H, A, F we get angle(I, D, E) == angle(H, A, F) + 180 mod 360
By line_inequality on Line(B, E), Line(A, G), E we get Line(A, G) != Line(B, E)
By divide_by_2_mod_180_v0 on B, C, E, I, D, C we get angle(B, C, E) == angle(I, D, C) mod 360
By divide_by_2_mod_180_v0 on C, H, A, E, C, D we get angle(C, H, A) == angle(E, C, D) mod 360
By divide_by_2_mod_180_v3 on E, C, B, C, D, F we get angle(E, C, B) == angle(C, D, F) + 180 mod 360
By divide_by_2_mod_180_v2 on E, C, D, A, D, I we get angle(E, C, D) == angle(A, D, I) + 180 mod 360
By divide_by_2_mod_180_v3 on E, C, B, H, A, B we get angle(E, C, B) == angle(H, A, B) + 180 mod 360
By divide_by_2_mod_180_v1 on A, H, C, D, I, B we get angle(A, H, C) == angle(D, I, B) mod 360
By divide_by_2_mod_180_v1 on A, E, C, D, H, A we get angle(A, E, C) == angle(D, H, A) mod 360
By divide_by_2_mod_180_v3 on F, G, A, I, D, E we get angle(F, G, A) == angle(I, D, E) + 180 mod 360
By divide_by_2_mod_180_v1 on D, C, E, A, H, C we get angle(A, H, C) == angle(D, C, E) mod 360
By divide_by_2_mod_180_v0 on B, C, E, D, F, A we get angle(B, C, E) == angle(D, F, A) mod 360
By divide_by_2_mod_180_v2 on C, E, A, A, F, D we get angle(C, E, A) == angle(A, F, D) + 180 mod 360
By divide_by_2_mod_180_v1 on D, I, C, F, H, A we get angle(D, I, C) == angle(F, H, A) mod 360
By divide_by_2_mod_180_v0 on I, D, E, A, G, D we get angle(A, G, D) == angle(I, D, E) mod 360
By divide_by_2_mod_180_v1 on A, E, C, F, D, C we get angle(A, E, C) == angle(F, D, C) mod 360
By divide_by_2_mod_180_v2 on A, H, D, C, D, I we get angle(A, H, D) == angle(C, D, I) + 180 mod 360
By divide_by_2_mod_180_v0 on I, D, A, H, A, B we get angle(H, A, B) == angle(I, D, A) mod 360
By divide_by_2_mod_180_v1 on C, D, I, A, F, D we get angle(A, F, D) == angle(C, D, I) mod 360
By divide_by_2_mod_180_v3 on A, E, C, F, A, H we get angle(A, E, C) == angle(F, A, H) + 180 mod 360
By divide_by_2_mod_180_v3 on C, E, D, H, G, F we get angle(C, E, D) == angle(H, G, F) + 180 mod 360
By divide_by_2_mod_180_v0 on D, F, A, C, I, D we get angle(C, I, D) == angle(D, F, A) mod 360
By divide_by_2_mod_180_v3 on E, D, I, D, F, A we get angle(E, D, I) == angle(D, F, A) + 180 mod 360
By divide_by_2_mod_180_v1 on B, F, D, C, D, I we get angle(B, F, D) == angle(C, D, I) mod 360
By divide_by_2_mod_180_v0 on H, A, B, I, D, E we get angle(H, A, B) == angle(I, D, E) mod 360
By divide_by_2_mod_180_v2 on E, C, I, A, H, C we get angle(E, C, I) == angle(A, H, C) + 180 mod 360
By divide_by_2_mod_180_v2 on E, C, I, B, F, D we get angle(E, C, I) == angle(B, F, D) + 180 mod 360
By divide_by_2_mod_180_v3 on I, C, E, A, D, F we get angle(I, C, E) == angle(A, D, F) + 180 mod 360
By collinear_definition on D, I, F we get I in Line(D, F), F in Line(D, I), Line(D, F) == Line(D, I), 0 == 2 * angle(I, D, F) mod 360
By divide_by_2_mod_180_v1 on E, D, I, D, G, A we get angle(D, G, A) == angle(E, D, I) mod 360
By asa_anti_congruence on C, E, D, E, C, D we get anti_congruent_triangles(C, D, E, E, D, C)
By divide_by_2_mod_180_v2 on I, D, E, F, D, A we get angle(I, D, E) == angle(F, D, A) + 180 mod 360
By divide_by_2_mod_180_v1 on D, H, A, E, D, I we get angle(D, H, A) == angle(E, D, I) mod 360
By divide_by_2_mod_180_v1 on D, I, C, B, F, D we get angle(B, F, D) == angle(D, I, C) mod 360
By asa_anti_congruence on I, D, C, D, I, C we get anti_congruent_triangles(C, D, I, C, I, D)
By divide_by_2_mod_180_v0 on D, E, C, D, F, B we get angle(D, E, C) == angle(D, F, B) mod 360
By divide_by_2_mod_180_v2 on H, A, B, E, C, B we get angle(H, A, B) == angle(E, C, B) + 180 mod 360
By divide_by_2_mod_180_v2 on D, E, C, F, D, C we get angle(D, E, C) == angle(F, D, C) + 180 mod 360
By divide_by_2_mod_180_v2 on D, E, C, A, D, I we get angle(D, E, C) == angle(A, D, I) + 180 mod 360
By divide_by_2_mod_180_v2 on E, C, D, F, D, C we get angle(E, C, D) == angle(F, D, C) + 180 mod 360
By divide_by_2_mod_180_v1 on F, H, A, C, D, I we get angle(C, D, I) == angle(F, H, A) mod 360
By divide_by_2_mod_180_v2 on D, E, C, F, D, H we get angle(D, E, C) == angle(F, D, H) + 180 mod 360
By divide_by_2_mod_180_v2 on D, F, A, E, D, I we get angle(D, F, A) == angle(E, D, I) + 180 mod 360
By divide_by_2_mod_180_v3 on F, D, C, B, I, D we get angle(F, D, C) == angle(B, I, D) + 180 mod 360
By divide_by_2_mod_180_v2 on I, D, A, A, H, C we get angle(I, D, A) == angle(A, H, C) + 180 mod 360
By divide_by_2_mod_180_v3 on D, G, A, C, I, D we get angle(D, G, A) == angle(C, I, D) + 180 mod 360
By divide_by_2_mod_180_v1 on C, E, D, D, I, C we get angle(C, E, D) == angle(D, I, C) mod 360
By divide_by_2_mod_180_v2 on H, D, F, D, I, B we get angle(H, D, F) == angle(D, I, B) + 180 mod 360
By divide_by_2_mod_180_v0 on D, F, B, B, C, E we get angle(B, C, E) == angle(D, F, B) mod 360
By divide_by_2_mod_180_v2 on A, G, D, E, C, B we get angle(A, G, D) == angle(E, C, B) + 180 mod 360
By divide_by_2_mod_180_v3 on A, E, C, A, H, F we get angle(A, E, C) == angle(A, H, F) + 180 mod 360
By divide_by_2_mod_180_v0 on B, I, D, D, F, B we get angle(B, I, D) == angle(D, F, B) mod 360
By divide_by_2_mod_180_v2 on B, C, E, F, D, H we get angle(B, C, E) == angle(F, D, H) + 180 mod 360
By divide_by_2_mod_180_v0 on I, D, A, A, G, D we get angle(A, G, D) == angle(I, D, A) mod 360
By divide_by_2_mod_180_v2 on I, D, E, E, C, B we get angle(I, D, E) == angle(E, C, B) + 180 mod 360
By divide_by_2_mod_180_v2 on E, C, D, F, G, H we get angle(E, C, D) == angle(F, G, H) + 180 mod 360
By divide_by_2_mod_180_v2 on H, D, F, C, E, D we get angle(H, D, F) == angle(C, E, D) + 180 mod 360
By divide_by_2_mod_180_v2 on H, A, B, C, E, D we get angle(H, A, B) == angle(C, E, D) + 180 mod 360
By divide_by_2_mod_180_v3 on F, D, A, I, D, E we get angle(F, D, A) == angle(I, D, E) + 180 mod 360
By divide_by_2_mod_180_v0 on C, E, A, H, A, B we get angle(C, E, A) == angle(H, A, B) mod 360
By divide_by_2_mod_180_v3 on A, E, C, A, D, F we get angle(A, E, C) == angle(A, D, F) + 180 mod 360
By divide_by_2_mod_180_v1 on E, C, B, D, I, B we get angle(D, I, B) == angle(E, C, B) mod 360
By reverse_direction on I, B we get 180 == direction(I, B) - direction(B, I) mod 360
By divide_by_2_mod_180_v3 on D, I, C, E, C, I we get angle(D, I, C) == angle(E, C, I) + 180 mod 360
By divide_by_2_mod_180_v1 on C, E, D, F, G, A we get angle(C, E, D) == angle(F, G, A) mod 360
By divide_by_2_mod_180_v3 on D, C, E, C, D, F we get angle(D, C, E) == angle(C, D, F) + 180 mod 360
By divide_by_2_mod_180_v3 on D, H, A, E, C, D we get angle(D, H, A) == angle(E, C, D) + 180 mod 360
By divide_by_2_mod_180_v3 on H, A, F, E, C, I we get angle(H, A, F) == angle(E, C, I) + 180 mod 360
By divide_by_2_mod_180_v2 on E, C, I, F, G, A we get angle(E, C, I) == angle(F, G, A) + 180 mod 360
By divide_by_2_mod_180_v2 on I, D, E, A, H, C we get angle(I, D, E) == angle(A, H, C) + 180 mod 360
By divide_by_2_mod_180_v2 on C, D, F, D, I, B we get angle(C, D, F) == angle(D, I, B) + 180 mod 360
By divide_by_2_mod_180_v0 on E, C, D, D, F, A we get angle(D, F, A) == angle(E, C, D) mod 360
By divide_by_2_mod_180_v3 on D, I, B, C, E, A we get angle(D, I, B) == angle(C, E, A) + 180 mod 360
By divide_by_2_mod_180_v0 on C, E, A, H, D, F we get angle(C, E, A) == angle(H, D, F) mod 360
By divide_by_2_mod_180_v2 on H, G, F, D, C, E we get angle(H, G, F) == angle(D, C, E) + 180 mod 360
By divide_by_2_mod_180_v2 on C, E, A, H, A, F we get angle(C, E, A) == angle(H, A, F) + 180 mod 360
By divide_by_2_mod_180_v3 on E, D, I, E, C, D we get angle(E, D, I) == angle(E, C, D) + 180 mod 360
By divide_by_2_mod_180_v0 on I, D, E, C, E, A we get angle(C, E, A) == angle(I, D, E) mod 360
By divide_by_2_mod_180_v3 on D, G, A, E, C, D we get angle(D, G, A) == angle(E, C, D) + 180 mod 360
By divide_by_2_mod_180_v3 on A, D, I, C, H, A we get angle(A, D, I) == angle(C, H, A) + 180 mod 360
By divide_by_2_mod_180_v1 on D, G, A, I, C, E we get angle(D, G, A) == angle(I, C, E) mod 360
By divide_by_2_mod_180_v3 on F, D, H, C, I, D we get angle(F, D, H) == angle(C, I, D) + 180 mod 360
By divide_by_2_mod_180_v1 on I, C, E, F, D, C we get angle(F, D, C) == angle(I, C, E) mod 360
By divide_by_2_mod_180_v2 on C, I, D, F, G, H we get angle(C, I, D) == angle(F, G, H) + 180 mod 360
By divide_by_2_mod_180_v1 on E, C, B, F, D, A we get angle(E, C, B) == angle(F, D, A) mod 360
By divide_by_2_mod_180_v0 on B, I, D, B, C, E we get angle(B, C, E) == angle(B, I, D) mod 360
By divide_by_2_mod_180_v3 on D, C, E, A, H, D we get angle(D, C, E) == angle(A, H, D) + 180 mod 360
By divide_by_2_mod_180_v1 on B, F, D, E, C, B we get angle(B, F, D) == angle(E, C, B) mod 360
By divide_by_2_mod_180_v2 on B, I, D, I, C, E we get angle(B, I, D) == angle(I, C, E) + 180 mod 360
By divide_by_2_mod_180_v2 on D, F, B, I, C, E we get angle(D, F, B) == angle(I, C, E) + 180 mod 360
By divide_by_2_mod_180_v3 on A, H, C, I, D, A we get angle(A, H, C) == angle(I, D, A) + 180 mod 360
By divide_by_2_mod_180_v2 on I, D, A, F, G, A we get angle(I, D, A) == angle(F, G, A) + 180 mod 360
By divide_by_2_mod_180_v3 on D, I, B, H, D, F we get angle(D, I, B) == angle(H, D, F) + 180 mod 360
By divide_by_2_mod_180_v3 on A, H, C, C, E, A we get angle(A, H, C) == angle(C, E, A) + 180 mod 360
By divide_by_2_mod_180_v2 on E, C, I, F, H, A we get angle(E, C, I) == angle(F, H, A) + 180 mod 360
By line_inequality on Line(E, G), Line(A, H), G we get Line(A, H) != Line(E, G)
By divide_by_2_mod_180_v2 on C, D, F, C, D, I we get angle(C, D, F) == angle(C, D, I) + 180 mod 360
By divide_by_2_mod_180_v1 on C, E, D, H, A, F we get angle(C, E, D) == angle(H, A, F) mod 360
By divide_by_2_mod_180_v2 on H, A, B, D, I, C we get angle(H, A, B) == angle(D, I, C) + 180 mod 360
By divide_by_2_mod_180_v2 on E, C, D, D, H, A we get angle(E, C, D) == angle(D, H, A) + 180 mod 360
By divide_by_2_mod_180_v3 on B, F, D, C, E, A we get angle(B, F, D) == angle(C, E, A) + 180 mod 360
By divide_by_2_mod_180_v1 on A, D, I, I, C, E we get angle(A, D, I) == angle(I, C, E) mod 360
By divide_by_2_mod_180_v2 on B, C, E, B, A, H we get angle(B, C, E) == angle(B, A, H) + 180 mod 360
By divide_by_2_mod_180_v3 on I, C, E, D, F, B we get angle(I, C, E) == angle(D, F, B) + 180 mod 360
By divide_by_2_mod_180_v3 on F, D, A, I, D, A we get angle(F, D, A) == angle(I, D, A) + 180 mod 360
By divide_by_2_mod_180_v3 on E, D, I, F, A, H we get angle(E, D, I) == angle(F, A, H) + 180 mod 360
By divide_by_2_mod_180_v3 on B, A, H, B, I, D we get angle(B, A, H) == angle(B, I, D) + 180 mod 360
By divide_by_2_mod_180_v3 on A, E, C, C, I, D we get angle(A, E, C) == angle(C, I, D) + 180 mod 360
By divide_by_2_mod_180_v2 on C, E, A, D, I, C we get angle(C, E, A) == angle(D, I, C) + 180 mod 360
By divide_by_2_mod_180_v2 on H, D, F, E, C, B we get angle(H, D, F) == angle(E, C, B) + 180 mod 360
By divide_by_2_mod_180_v3 on I, C, E, F, A, H we get angle(I, C, E) == angle(F, A, H) + 180 mod 360
By divide_by_2_mod_180_v3 on I, C, E, A, H, F we get angle(I, C, E) == angle(A, H, F) + 180 mod 360
By divide_by_2_mod_180_v2 on I, D, A, C, E, D we get angle(I, D, A) == angle(C, E, D) + 180 mod 360
By divide_by_2_mod_180_v0 on A, D, F, C, I, D we get angle(A, D, F) == angle(C, I, D) mod 360
By divide_by_2_mod_180_v2 on I, D, C, I, C, E we get angle(I, D, C) == angle(I, C, E) + 180 mod 360
By divide_by_2_mod_180_v1 on F, H, A, C, E, D we get angle(C, E, D) == angle(F, H, A) mod 360
By divide_by_2_mod_180_v2 on I, D, C, D, G, A we get angle(I, D, C) == angle(D, G, A) + 180 mod 360
By divide_by_2_mod_180_v1 on A, D, I, B, A, H we get angle(A, D, I) == angle(B, A, H) mod 360
By divide_by_2_mod_180_v0 on C, I, D, A, G, F we get angle(A, G, F) == angle(C, I, D) mod 360
By divide_by_2_mod_180_v3 on D, H, A, I, D, C we get angle(D, H, A) == angle(I, D, C) + 180 mod 360
By divide_by_2_mod_180_v1 on E, D, I, F, G, H we get angle(E, D, I) == angle(F, G, H) mod 360
By divide_by_2_mod_180_v2 on H, G, F, C, D, I we get angle(H, G, F) == angle(C, D, I) + 180 mod 360
By divide_by_2_mod_180_v2 on D, E, C, B, A, H we get angle(D, E, C) == angle(B, A, H) + 180 mod 360
By divide_by_2_mod_180_v1 on D, I, B, H, A, F we get angle(D, I, B) == angle(H, A, F) mod 360
By divide_by_2_mod_180_v3 on E, D, I, A, G, F we get angle(E, D, I) == angle(A, G, F) + 180 mod 360
By divide_by_2_mod_180_v0 on D, F, B, E, C, D we get angle(D, F, B) == angle(E, C, D) mod 360
By divide_by_2_mod_180_v1 on F, D, H, A, E, C we get angle(A, E, C) == angle(F, D, H) mod 360
By divide_by_2_mod_180_v0 on D, E, C, F, A, H we get angle(D, E, C) == angle(F, A, H) mod 360
By divide_by_2_mod_180_v3 on F, D, C, B, C, E we get angle(F, D, C) == angle(B, C, E) + 180 mod 360
By divide_by_2_mod_180_v3 on A, E, C, I, D, C we get angle(A, E, C) == angle(I, D, C) + 180 mod 360
By divide_by_2_mod_180_v0 on I, D, C, F, A, H we get angle(F, A, H) == angle(I, D, C) mod 360
By divide_by_2_mod_180_v2 on A, G, D, C, E, D we get angle(A, G, D) == angle(C, E, D) + 180 mod 360
By divide_by_2_mod_180_v0 on B, I, D, E, C, D we get angle(B, I, D) == angle(E, C, D) mod 360
By divide_by_2_mod_180_v2 on H, D, F, C, D, I we get angle(H, D, F) == angle(C, D, I) + 180 mod 360
By divide_by_2_mod_180_v0 on E, C, I, A, H, D we get angle(A, H, D) == angle(E, C, I) mod 360
By divide_by_2_mod_180_v2 on D, E, C, E, D, I we get angle(D, E, C) == angle(E, D, I) + 180 mod 360
By divide_by_2_mod_180_v2 on C, I, D, F, D, C we get angle(C, I, D) == angle(F, D, C) + 180 mod 360
By divide_by_2_mod_180_v3 on F, D, H, I, D, C we get angle(F, D, H) == angle(I, D, C) + 180 mod 360
By divide_by_2_mod_180_v3 on A, E, C, C, H, A we get angle(A, E, C) == angle(C, H, A) + 180 mod 360
By divide_by_2_mod_180_v3 on D, C, E, A, G, D we get angle(D, C, E) == angle(A, G, D) + 180 mod 360
By divide_by_2_mod_180_v1 on A, D, I, F, G, H we get angle(A, D, I) == angle(F, G, H) mod 360
By divide_by_2_mod_180_v0 on B, I, D, A, G, F we get angle(A, G, F) == angle(B, I, D) mod 360
By divide_by_2_mod_180_v3 on A, D, I, D, F, A we get angle(A, D, I) == angle(D, F, A) + 180 mod 360
By divide_by_2_mod_180_v3 on E, C, B, A, H, D we get angle(E, C, B) == angle(A, H, D) + 180 mod 360
By divide_by_2_mod_180_v0 on A, D, F, D, E, C we get angle(A, D, F) == angle(D, E, C) mod 360
By divide_by_2_mod_180_v3 on E, D, I, B, C, E we get angle(E, D, I) == angle(B, C, E) + 180 mod 360
By divide_by_2_mod_180_v1 on F, H, A, D, C, E we get angle(D, C, E) == angle(F, H, A) mod 360
By anti_congruence_from_anti_similar_triangles on D, F, A, F, D, A we get anti_congruent_triangles(A, D, F, A, F, D)
By divide_by_2_mod_180_v1 on D, I, C, D, C, E we get angle(D, C, E) == angle(D, I, C) mod 360
By divide_by_2_mod_180_v3 on E, C, B, H, D, F we get angle(E, C, B) == angle(H, D, F) + 180 mod 360
By divide_by_2_mod_180_v3 on D, I, C, A, H, D we get angle(D, I, C) == angle(A, H, D) + 180 mod 360
By divide_by_2_mod_180_v0 on B, I, D, C, H, A we get angle(B, I, D) == angle(C, H, A) mod 360
By divide_by_2_mod_180_v2 on H, A, B, D, I, B we get angle(H, A, B) == angle(D, I, B) + 180 mod 360
By divide_by_2_mod_180_v3 on F, D, H, E, C, D we get angle(F, D, H) == angle(E, C, D) + 180 mod 360
By divide_by_2_mod_180_v0 on B, C, E, A, H, F we get angle(A, H, F) == angle(B, C, E) mod 360
By divide_by_2_mod_180_v0 on C, E, A, I, D, A we get angle(C, E, A) == angle(I, D, A) mod 360
By divide_by_2_mod_180_v3 on A, D, I, E, C, D we get angle(A, D, I) == angle(E, C, D) + 180 mod 360
By divide_by_2_mod_180_v3 on D, I, B, A, G, D we get angle(D, I, B) == angle(A, G, D) + 180 mod 360
By asa_anti_congruence on A, H, F, H, A, F we get anti_congruent_triangles(A, F, H, H, F, A)
By divide_by_2_mod_180_v2 on I, D, C, F, G, H we get angle(I, D, C) == angle(F, G, H) + 180 mod 360
By divide_by_2_mod_180_v2 on D, E, C, D, H, A we get angle(D, E, C) == angle(D, H, A) + 180 mod 360
By divide_by_2_mod_180_v2 on C, E, A, C, D, I we get angle(C, E, A) == angle(C, D, I) + 180 mod 360
By divide_by_2_mod_180_v2 on A, D, F, I, C, E we get angle(A, D, F) == angle(I, C, E) + 180 mod 360
By divide_by_2_mod_180_v2 on H, G, F, D, I, C we get angle(H, G, F) == angle(D, I, C) + 180 mod 360
By divide_by_2_mod_180_v3 on D, G, A, B, C, E we get angle(D, G, A) == angle(B, C, E) + 180 mod 360
By divide_by_2_mod_180_v0 on A, D, F, E, C, D we get angle(A, D, F) == angle(E, C, D) mod 360
By collinear_definition on F, D, I we get D in Line(F, I), I in Line(D, F), Line(D, F) == Line(F, I), 0 == 2 * angle(D, F, I) mod 360
By divide_by_2_mod_180_v3 on D, I, C, C, D, F we get angle(D, I, C) == angle(C, D, F) + 180 mod 360
By divide_by_2_mod_180_v2 on A, H, F, I, C, E we get angle(A, H, F) == angle(I, C, E) + 180 mod 360
By line_inequality on Line(A, H), Line(F, G), H we get Line(A, H) != Line(F, G)
By divide_by_2_mod_180_v3 on B, A, H, I, D, C we get angle(B, A, H) == angle(I, D, C) + 180 mod 360
By divide_by_2_mod_180_v0 on B, C, E, A, G, F we get angle(A, G, F) == angle(B, C, E) mod 360
By divide_by_2_mod_180_v2 on A, G, F, A, D, I we get angle(A, G, F) == angle(A, D, I) + 180 mod 360
By divide_by_2_mod_180_v3 on A, D, I, A, G, F we get angle(A, D, I) == angle(A, G, F) + 180 mod 360
By divide_by_2_mod_180_v2 on I, D, C, D, H, A we get angle(I, D, C) == angle(D, H, A) + 180 mod 360
By divide_by_2_mod_180_v2 on A, H, D, D, I, B we get angle(A, H, D) == angle(D, I, B) + 180 mod 360
By divide_by_2_mod_180_v3 on F, D, H, B, I, D we get angle(F, D, H) == angle(B, I, D) + 180 mod 360
By divide_by_2_mod_180_v3 on F, D, C, D, E, C we get angle(F, D, C) == angle(D, E, C) + 180 mod 360
By divide_by_2_mod_180_v3 on F, G, H, D, E, C we get angle(F, G, H) == angle(D, E, C) + 180 mod 360
By divide_by_2_mod_180_v1 on B, F, D, D, I, B we get angle(B, F, D) == angle(D, I, B) mod 360
By divide_by_2_mod_180_v3 on C, D, I, H, D, F we get angle(C, D, I) == angle(H, D, F) + 180 mod 360
By divide_by_2_mod_180_v3 on H, A, F, I, D, E we get angle(H, A, F) == angle(I, D, E) + 180 mod 360
By divide_by_2_mod_180_v0 on E, C, D, I, D, C we get angle(E, C, D) == angle(I, D, C) mod 360
By divide_by_2_mod_180_v2 on I, D, A, H, A, F we get angle(I, D, A) == angle(H, A, F) + 180 mod 360
By anti_congruence_from_anti_similar_triangles on I, D, C, D, I, C we get anti_congruent_triangles(C, D, I, C, I, D)
By divide_by_2_mod_180_v1 on F, D, A, C, D, I we get angle(C, D, I) == angle(F, D, A) mod 360
By divide_by_2_mod_180_v2 on A, G, D, D, C, E we get angle(A, G, D) == angle(D, C, E) + 180 mod 360
By divide_by_2_mod_180_v2 on C, H, A, I, C, E we get angle(C, H, A) == angle(I, C, E) + 180 mod 360
By divide_by_2_mod_180_v3 on F, D, A, E, C, I we get angle(F, D, A) == angle(E, C, I) + 180 mod 360
By divide_by_2_mod_180_v2 on A, G, F, A, E, C we get angle(A, G, F) == angle(A, E, C) + 180 mod 360
By divide_by_2_mod_180_v3 on B, A, H, C, I, D we get angle(B, A, H) == angle(C, I, D) + 180 mod 360
By divide_by_2_mod_180_v2 on I, D, E, D, C, E we get angle(I, D, E) == angle(D, C, E) + 180 mod 360
By divide_by_2_mod_180_v3 on A, F, D, C, E, A we get angle(A, F, D) == angle(C, E, A) + 180 mod 360
By divide_by_2_mod_180_v2 on A, H, D, E, C, B we get angle(A, H, D) == angle(E, C, B) + 180 mod 360
By divide_by_2_mod_180_v3 on E, C, B, H, G, F we get angle(E, C, B) == angle(H, G, F) + 180 mod 360
By divide_by_2_mod_180_v2 on C, H, A, A, D, I we get angle(C, H, A) == angle(A, D, I) + 180 mod 360
By divide_by_2_mod_180_v2 on C, E, A, F, D, A we get angle(C, E, A) == angle(F, D, A) + 180 mod 360
By divide_by_2_mod_180_v1 on B, A, H, A, E, C we get angle(A, E, C) == angle(B, A, H) mod 360
By divide_by_2_mod_180_v1 on B, A, H, E, D, I we get angle(B, A, H) == angle(E, D, I) mod 360
By divide_by_2_mod_180_v0 on A, G, F, I, D, C we get angle(A, G, F) == angle(I, D, C) mod 360
By divide_by_2_mod_180_v2 on C, E, A, F, H, A we get angle(C, E, A) == angle(F, H, A) + 180 mod 360
By divide_by_2_mod_180_v3 on B, F, D, I, D, A we get angle(B, F, D) == angle(I, D, A) + 180 mod 360
By divide_by_2_mod_180_v2 on B, I, D, D, G, A we get angle(B, I, D) == angle(D, G, A) + 180 mod 360
By isosceles_trapezoid_properties on F, A, H, D we get parallel(Line(A, F), Line(D, H)), distance(A, H) == distance(D, F), angle(D, F, A) == angle(F, A, H), angle(A, H, D) == angle(H, D, F)
By collinear_definition on D, F, I we get F in Line(D, I), I in Line(D, F), Line(D, F) == Line(D, I), 0 == 2 * angle(F, D, I) mod 360
By asa_anti_congruence on D, I, C, I, D, C we get anti_congruent_triangles(C, D, I, C, I, D)
By divide_by_2_mod_180_v3 on D, H, A, C, I, D we get angle(D, H, A) == angle(C, I, D) + 180 mod 360
By divide_by_2_mod_180_v3 on C, E, D, I, D, E we get angle(C, E, D) == angle(I, D, E) + 180 mod 360
By divide_by_2_mod_180_v3 on A, D, I, D, E, C we get angle(A, D, I) == angle(D, E, C) + 180 mod 360
By divide_by_2_mod_180_v2 on A, G, D, D, I, B we get angle(A, G, D) == angle(D, I, B) + 180 mod 360
By divide_by_2_mod_180_v2 on A, H, F, A, D, I we get angle(A, H, F) == angle(A, D, I) + 180 mod 360
By collinear_definition on E, D, A we get D in Line(A, E), A in Line(D, E), Line(A, E) == Line(D, E), 0 == 2 * angle(D, E, A) mod 360
By divide_by_2_mod_180_v1 on I, C, E, B, A, H we get angle(B, A, H) == angle(I, C, E) mod 360
By between_imply_segment_sum on B, A, F we get distance(B, F) == distance(A, B) + distance(A, F)
By divide_by_2_mod_180_v3 on E, D, I, C, H, A we get angle(E, D, I) == angle(C, H, A) + 180 mod 360
By isosceles_triangle_from_angles on C, I, D we get isosceles_triangle(C, D, I)
By divide_by_2_mod_180_v3 on D, H, A, B, C, E we get angle(D, H, A) == angle(B, C, E) + 180 mod 360
By divide_by_2_mod_180_v1 on F, G, A, E, C, B we get angle(E, C, B) == angle(F, G, A) mod 360
By divide_by_2_mod_180_v2 on I, D, E, B, F, D we get angle(I, D, E) == angle(B, F, D) + 180 mod 360
By divide_by_2_mod_180_v2 on I, D, A, E, C, B we get angle(I, D, A) == angle(E, C, B) + 180 mod 360
By divide_by_2_mod_180_v2 on D, F, A, I, C, E we get angle(D, F, A) == angle(I, C, E) + 180 mod 360
By divide_by_2_mod_180_v3 on F, H, A, E, C, I we get angle(F, H, A) == angle(E, C, I) + 180 mod 360
By divide_by_2_mod_180_v2 on D, F, A, A, E, C we get angle(D, F, A) == angle(A, E, C) + 180 mod 360
By line_inequality on Line(G, H), Line(B, G), H we get Line(B, G) != Line(G, H)
By divide_by_2_mod_180_v1 on D, C, E, F, D, A we get angle(D, C, E) == angle(F, D, A) mod 360
By divide_by_2_mod_180_v2 on B, I, D, F, G, H we get angle(B, I, D) == angle(F, G, H) + 180 mod 360
By divide_by_2_mod_180_v2 on D, F, B, A, E, C we get angle(D, F, B) == angle(A, E, C) + 180 mod 360
By divide_by_2_mod_180_v2 on C, I, D, B, A, H we get angle(C, I, D) == angle(B, A, H) + 180 mod 360
By divide_by_2_mod_180_v2 on D, F, A, A, D, I we get angle(D, F, A) == angle(A, D, I) + 180 mod 360
By divide_by_2_mod_180_v3 on D, C, E, H, G, F we get angle(D, C, E) == angle(H, G, F) + 180 mod 360
By divide_by_2_mod_180_v3 on D, I, C, H, G, F we get angle(D, I, C) == angle(H, G, F) + 180 mod 360
By divide_by_2_mod_180_v0 on I, D, C, C, H, A we get angle(C, H, A) == angle(I, D, C) mod 360
By divide_by_2_mod_180_v3 on E, D, I, A, D, F we get angle(E, D, I) == angle(A, D, F) + 180 mod 360
By divide_by_2_mod_180_v0 on H, G, F, I, D, A we get angle(H, G, F) == angle(I, D, A) mod 360
By isosceles_triangle_from_angles on F, H, A we get isosceles_triangle(F, A, H)
By divide_by_2_mod_180_v0 on E, C, I, I, D, A we get angle(E, C, I) == angle(I, D, A) mod 360
By divide_by_2_mod_180_v2 on E, C, I, H, A, F we get angle(E, C, I) == angle(H, A, F) + 180 mod 360
By divide_by_2_mod_180_v3 on D, C, E, I, D, E we get angle(D, C, E) == angle(I, D, E) + 180 mod 360
By line_inequality on Line(B, E), Line(A, H), E we get Line(A, H) != Line(B, E)
By divide_by_2_mod_180_v2 on E, C, I, F, D, A we get angle(E, C, I) == angle(F, D, A) + 180 mod 360
By divide_by_2_mod_180_v2 on B, I, D, F, D, H we get angle(B, I, D) == angle(F, D, H) + 180 mod 360
By divide_by_2_mod_180_v3 on F, G, A, E, C, I we get angle(F, G, A) == angle(E, C, I) + 180 mod 360
By divide_by_2_mod_180_v2 on B, C, E, D, H, A we get angle(B, C, E) == angle(D, H, A) + 180 mod 360
By divide_by_2_mod_180_v2 on I, D, E, A, F, D we get angle(I, D, E) == angle(A, F, D) + 180 mod 360
By divide_by_2_mod_180_v3 on F, H, A, I, D, A we get angle(F, H, A) == angle(I, D, A) + 180 mod 360
By asa_congruence on F, D, A, H, A, F we get congruent_triangles(A, D, F, F, A, H)
By divide_by_2_mod_180_v3 on E, C, B, I, D, E we get angle(E, C, B) == angle(I, D, E) + 180 mod 360
By divide_by_2_mod_180_v2 on I, D, A, B, F, D we get angle(I, D, A) == angle(B, F, D) + 180 mod 360
By divide_by_2_mod_180_v3 on A, F, D, I, D, E we get angle(A, F, D) == angle(I, D, E) + 180 mod 360
By divide_by_2_mod_180_v3 on D, H, A, B, I, D we get angle(D, H, A) == angle(B, I, D) + 180 mod 360
By divide_by_2_mod_180_v0 on C, H, A, B, C, E we get angle(B, C, E) == angle(C, H, A) mod 360
By divide_by_2_mod_180_v3 on C, D, I, H, G, F we get angle(C, D, I) == angle(H, G, F) + 180 mod 360
By anti_congruence_from_anti_similar_triangles on A, H, F, H, A, F we get anti_congruent_triangles(A, F, H, H, F, A)
By asa_congruence on A, H, F, D, F, A we get congruent_triangles(A, D, F, F, A, H)
By divide_by_2_mod_180_v3 on F, G, H, E, C, D we get angle(F, G, H) == angle(E, C, D) + 180 mod 360
By divide_by_2_mod_180_v0 on I, D, E, H, G, F we get angle(H, G, F) == angle(I, D, E) mod 360
By divide_by_2_mod_180_v1 on H, A, F, C, D, I we get angle(C, D, I) == angle(H, A, F) mod 360
By isosceles_triangle_from_angles on A, F, D we get isosceles_triangle(A, D, F)
By divide_by_2_mod_180_v3 on C, D, I, C, E, A we get angle(C, D, I) == angle(C, E, A) + 180 mod 360
By divide_by_2_mod_180_v3 on F, G, H, I, D, C we get angle(F, G, H) == angle(I, D, C) + 180 mod 360
By divide_by_2_mod_180_v2 on A, G, D, D, I, C we get angle(A, G, D) == angle(D, I, C) + 180 mod 360
By divide_by_2_mod_180_v2 on D, F, B, A, D, I we get angle(D, F, B) == angle(A, D, I) + 180 mod 360
By divide_by_2_mod_180_v1 on D, I, B, F, H, A we get angle(D, I, B) == angle(F, H, A) mod 360
By divide_by_2_mod_180_v1 on E, C, B, F, H, A we get angle(E, C, B) == angle(F, H, A) mod 360
By divide_by_2_mod_180_v2 on A, D, F, A, E, C we get angle(A, D, F) == angle(A, E, C) + 180 mod 360
By divide_by_2_mod_180_v2 on H, D, F, D, C, E we get angle(H, D, F) == angle(D, C, E) + 180 mod 360
By line_inequality on Line(B, E), Line(F, H), B we get Line(B, E) != Line(F, H)
By congruence_from_similar_triangles on D, F, A, A, H, F we get congruent_triangles(A, D, F, F, A, H)
By divide_by_2_mod_180_v2 on C, I, D, D, G, A we get angle(C, I, D) == angle(D, G, A) + 180 mod 360
By divide_by_2_mod_180_v1 on A, H, C, D, I, C we get angle(A, H, C) == angle(D, I, C) mod 360
By divide_by_2_mod_180_v3 on I, C, E, I, D, C we get angle(I, C, E) == angle(I, D, C) + 180 mod 360
By divide_by_2_mod_180_v3 on F, G, H, B, C, E we get angle(F, G, H) == angle(B, C, E) + 180 mod 360
By divide_by_2_mod_180_v3 on D, C, E, H, D, F we get angle(D, C, E) == angle(H, D, F) + 180 mod 360
By divide_by_2_mod_180_v2 on H, G, F, D, I, B we get angle(H, G, F) == angle(D, I, B) + 180 mod 360
By congruence_from_similar_triangles on A, H, F, D, F, A we get congruent_triangles(A, D, F, F, A, H)
By collinear_definition on D, A, E we get A in Line(D, E), E in Line(A, D), Line(A, D) == Line(D, E), 0 == 2 * angle(A, D, E) mod 360
By divide_by_2_mod_180_v1 on C, D, I, D, C, E we get angle(C, D, I) == angle(D, C, E) mod 360
By divide_by_2_mod_180_v2 on I, D, A, A, F, D we get angle(I, D, A) == angle(A, F, D) + 180 mod 360
By collinear_definition on H, C, D we get C in Line(D, H), D in Line(C, H), Line(C, H) == Line(D, H), 0 == 2 * angle(C, H, D) mod 360
By divide_by_2_mod_180_v3 on I, C, E, D, F, A we get angle(I, C, E) == angle(D, F, A) + 180 mod 360
By divide_by_2_mod_180_v2 on A, H, D, C, E, D we get angle(A, H, D) == angle(C, E, D) + 180 mod 360
By divide_by_2_mod_180_v3 on H, A, F, I, D, A we get angle(H, A, F) == angle(I, D, A) + 180 mod 360
By divide_by_2_mod_180_v2 on E, C, I, D, I, C we get angle(E, C, I) == angle(D, I, C) + 180 mod 360
By divide_by_2_mod_180_v2 on F, A, H, I, C, E we get angle(F, A, H) == angle(I, C, E) + 180 mod 360
By divide_by_2_mod_180_v3 on D, G, A, I, D, C we get angle(D, G, A) == angle(I, D, C) + 180 mod 360
By divide_by_2_mod_180_v2 on A, H, F, E, D, I we get angle(A, H, F) == angle(E, D, I) + 180 mod 360
By divide_by_2_mod_180_v1 on F, G, A, C, D, I we get angle(C, D, I) == angle(F, G, A) mod 360
By divide_by_2_mod_180_v3 on A, E, C, A, G, F we get angle(A, E, C) == angle(A, G, F) + 180 mod 360
By divide_by_2_mod_180_v2 on H, D, F, D, I, C we get angle(H, D, F) == angle(D, I, C) + 180 mod 360
By divide_by_2_mod_180_v3 on C, E, D, A, G, D we get angle(C, E, D) == angle(A, G, D) + 180 mod 360
By divide_by_2_mod_180_v3 on F, G, A, C, E, A we get angle(F, G, A) == angle(C, E, A) + 180 mod 360
By divide_by_2_mod_180_v3 on I, C, E, A, G, F we get angle(I, C, E) == angle(A, G, F) + 180 mod 360
By divide_by_2_mod_180_v2 on E, C, D, F, D, H we get angle(E, C, D) == angle(F, D, H) + 180 mod 360
By reverse_direction on I, C we get 180 == direction(I, C) - direction(C, I) mod 360
By divide_by_2_mod_180_v2 on C, E, A, A, H, C we get angle(C, E, A) == angle(A, H, C) + 180 mod 360
By divide_by_2_mod_180_v3 on F, H, A, I, D, E we get angle(F, H, A) == angle(I, D, E) + 180 mod 360
By divide_by_2_mod_180_v2 on I, D, E, F, H, A we get angle(I, D, E) == angle(F, H, A) + 180 mod 360
By divide_by_2_mod_180_v3 on F, H, A, C, E, A we get angle(F, H, A) == angle(C, E, A) + 180 mod 360
By between_imply_segment_sum on I, C, B we get distance(B, I) == distance(C, I) + distance(B, C)
By collinear_definition on H, D, C we get D in Line(C, H), C in Line(D, H), Line(C, H) == Line(D, H), 0 == 2 * angle(D, H, C) mod 360
By divide_by_2_mod_180_v3 on D, I, C, A, G, D we get angle(D, I, C) == angle(A, G, D) + 180 mod 360
By divide_by_2_mod_180_v2 on E, C, D, E, D, I we get angle(E, C, D) == angle(E, D, I) + 180 mod 360
By divide_by_2_mod_180_v2 on B, I, D, A, E, C we get angle(B, I, D) == angle(A, E, C) + 180 mod 360
By divide_by_2_mod_180_v3 on I, C, E, C, H, A we get angle(I, C, E) == angle(C, H, A) + 180 mod 360
By divide_by_2_mod_180_v3 on B, A, H, E, C, D we get angle(B, A, H) == angle(E, C, D) + 180 mod 360
By divide_by_2_mod_180_v3 on C, E, D, C, D, F we get angle(C, E, D) == angle(C, D, F) + 180 mod 360
By isosceles_trapezoid_properties on H, C, B, F we get parallel(Line(B, F), Line(C, H)), distance(B, C) == distance(F, H), angle(F, H, C) == angle(H, C, B), angle(B, F, H) == angle(C, B, F)
By divide_by_2_mod_180_v3 on A, H, C, I, D, E we get angle(A, H, C) == angle(I, D, E) + 180 mod 360
By divide_by_2_mod_180_v3 on A, E, C, D, F, A we get angle(A, E, C) == angle(D, F, A) + 180 mod 360
By divide_by_2_mod_180_v3 on A, D, I, A, H, F we get angle(A, D, I) == angle(A, H, F) + 180 mod 360
By divide_by_2_mod_180_v3 on B, F, D, I, D, E we get angle(B, F, D) == angle(I, D, E) + 180 mod 360
By divide_by_2_mod_180_v3 on D, I, B, E, C, I we get angle(D, I, B) == angle(E, C, I) + 180 mod 360
By line_inequality on Line(F, H), Line(E, G), H we get Line(E, G) != Line(F, H)
By collinear_definition on D, E, A we get E in Line(A, D), A in Line(D, E), Line(A, D) == Line(D, E), 0 == 2 * angle(E, D, A) mod 360
By divide_by_2_mod_180_v2 on B, C, E, F, D, C we get angle(B, C, E) == angle(F, D, C) + 180 mod 360
By anti_congruence_from_anti_similar_triangles on C, E, D, E, C, D we get anti_congruent_triangles(C, D, E, E, D, C)
By divide_by_2_mod_180_v2 on E, C, I, A, F, D we get angle(E, C, I) == angle(A, F, D) + 180 mod 360
By divide_by_2_mod_180_v3 on F, G, A, I, D, A we get angle(F, G, A) == angle(I, D, A) + 180 mod 360
By divide_by_2_mod_180_v3 on D, I, C, C, E, A we get angle(D, I, C) == angle(C, E, A) + 180 mod 360
By asa_congruence on D, F, A, A, H, F we get congruent_triangles(A, D, F, F, A, H)
By divide_by_2_mod_180_v2 on C, I, D, F, D, H we get angle(C, I, D) == angle(F, D, H) + 180 mod 360
By isosceles_triangle_from_angles on C, D, I we get isosceles_triangle(C, D, I)
By divide_by_2_mod_180_v3 on F, G, H, B, I, D we get angle(F, G, H) == angle(B, I, D) + 180 mod 360
By line_inequality on Line(F, H), Line(A, G), H we get Line(A, G) != Line(F, H)
By divide_by_2_mod_180_v2 on I, D, E, C, E, D we get angle(I, D, E) == angle(C, E, D) + 180 mod 360
By reverse_direction on C, B we get 180 == direction(C, B) - direction(B, C) mod 360
By collinear_definition on I, F, D we get F in Line(D, I), D in Line(F, I), Line(D, I) == Line(F, I), 0 == 2 * angle(F, I, D) mod 360
By divide_by_2_mod_180_v2 on I, D, A, F, H, A we get angle(I, D, A) == angle(F, H, A) + 180 mod 360
By reverse_direction on I, F we get 180 == direction(I, F) - direction(F, I) mod 360
By line_inequality on Line(E, G), Line(G, H), E we get Line(E, G) != Line(G, H)
By reverse_direction on C, I we get 180 == direction(C, I) - direction(I, C) mod 360
By line_inequality on Line(D, G), i, G we get i != Line(D, G)
By isosceles_trapezoid_properties on D, H, A, F we get parallel(Line(A, F), Line(D, H)), distance(A, H) == distance(D, F), angle(D, H, A) == angle(F, D, H), angle(A, F, D) == angle(H, A, F)
By reverse_direction on F, I we get 180 == direction(F, I) - direction(I, F) mod 360
By reverse_direction on C, E we get 180 == direction(C, E) - direction(E, C) mod 360
By isosceles_trapezoid_properties on H, D, A, F we get parallel(Line(A, F), Line(D, H)), distance(A, D) == distance(F, H), angle(F, H, D) == angle(H, D, A), angle(A, F, H) == angle(D, A, F)
By line_inequality on Line(G, H), Line(A, H), G we get Line(A, H) != Line(G, H)
By isosceles_triangle_from_angles on D, C, E we get isosceles_triangle(D, C, E)
By reverse_direction on C, D we get 180 == direction(C, D) - direction(D, C) mod 360
By divide_by_2_mod_180_v2 on B, C, E, D, G, A we get angle(B, C, E) == angle(D, G, A) + 180 mod 360
By isosceles_triangle_from_angles on D, E, C we get isosceles_triangle(D, C, E)
By divide_by_2_mod_180_v2 on C, I, D, I, C, E we get angle(C, I, D) == angle(I, C, E) + 180 mod 360
By reverse_direction on D, C we get 180 == direction(D, C) - direction(C, D) mod 360
By reverse_direction on I, D we get 180 == direction(I, D) - direction(D, I) mod 360
By reverse_direction on D, I we get 180 == direction(D, I) - direction(I, D) mod 360
By divide_by_2_mod_180_v2 on D, E, C, F, G, H we get angle(D, E, C) == angle(F, G, H) + 180 mod 360
By asa_anti_congruence on F, D, A, D, F, A we get anti_congruent_triangles(A, D, F, A, F, D)
By divide_by_2_mod_180_v2 on E, C, D, D, G, A we get angle(E, C, D) == angle(D, G, A) + 180 mod 360
By line_inequality on Line(F, G), Line(B, E), F we get Line(B, E) != Line(F, G)
By reverse_direction on C, H we get 180 == direction(C, H) - direction(H, C) mod 360
By isosceles_trapezoid_properties on F, B, C, H we get parallel(Line(B, F), Line(C, H)), distance(B, C) == distance(F, H), angle(F, B, C) == angle(H, F, B), angle(B, C, H) == angle(C, H, F)
By collinear_definition on C, D, H we get D in Line(C, H), H in Line(C, D), Line(C, D) == Line(C, H), 0 == 2 * angle(D, C, H) mod 360
By line_inequality on h, Line(G, H), C we get h != Line(G, H)
By isosceles_triangle_from_angles on F, A, H we get isosceles_triangle(F, A, H)
By line_inequality on Line(D, G), Line(A, H), D we get Line(A, H) != Line(D, G)
By line_inequality on Line(A, G), Line(D, G), A we get Line(A, G) != Line(D, G)
By collinear_definition on D, H, C we get H in Line(C, D), C in Line(D, H), Line(C, D) == Line(D, H), 0 == 2 * angle(H, D, C) mod 360
By anti_congruence_from_anti_similar_triangles on F, D, A, D, F, A we get anti_congruent_triangles(A, D, F, A, F, D)
By asa_anti_congruence on E, C, D, C, E, D we get anti_congruent_triangles(C, D, E, E, D, C)
By collinear_definition on F, I, D we get I in Line(D, F), D in Line(F, I), Line(D, F) == Line(F, I), 0 == 2 * angle(I, F, D) mod 360
By line_inequality on Line(G, H), Line(A, G), H we get Line(A, G) != Line(G, H)
By line_inequality on Line(B, E), Line(D, G), E we get Line(B, E) != Line(D, G)
By collinear_definition on A, D, E we get D in Line(A, E), E in Line(A, D), Line(A, D) == Line(A, E), 0 == 2 * angle(D, A, E) mod 360
By reverse_direction on E, C we get 180 == direction(E, C) - direction(C, E) mod 360
By reverse_direction on B, C we get 180 == direction(B, C) - direction(C, B) mod 360
By asa_anti_congruence on D, F, A, F, D, A we get anti_congruent_triangles(A, D, F, A, F, D)
By asa_anti_congruence on H, A, F, A, H, F we get anti_congruent_triangles(A, F, H, H, F, A)
By line_inequality on k, Line(F, G), D we get k != Line(F, G)
By collinear_definition on C, H, D we get H in Line(C, D), D in Line(C, H), Line(C, D) == Line(C, H), 0 == 2 * angle(H, C, D) mod 360
By line_circle_intersection_has_at_most_two_points_0 on D, H, C, d we get C not in d
By isosceles_trapezoid_properties on F, A, D, H we get parallel(Line(A, F), Line(D, H)), distance(A, D) == distance(F, H), angle(F, A, D) == angle(H, F, A), angle(A, D, H) == angle(D, H, F)
By collinear_definition on I, D, F we get D in Line(F, I), F in Line(D, I), Line(D, I) == Line(F, I), 0 == 2 * angle(D, I, F) mod 360
By line_inequality on Line(G, H), Line(F, G), H we get Line(F, G) != Line(G, H)
By anti_congruence_from_anti_similar_triangles on E, C, D, C, E, D we get anti_congruent_triangles(C, D, E, E, D, C)
By anti_congruence_from_anti_similar_triangles on H, A, F, A, H, F we get anti_congruent_triangles(A, F, H, H, F, A)
By reverse_direction on H, C we get 180 == direction(H, C) - direction(C, H) mod 360
By line_inequality on k, Line(D, G), I we get k != Line(D, G)
By line_inequality on Line(F, H), Line(F, G), H we get Line(F, G) != Line(F, H)
By line_inequality on Line(F, H), Line(B, G), H we get Line(B, G) != Line(F, H)
By line_inequality on Line(A, H), Line(F, H), A we get Line(A, H) != Line(F, H)
By line_inequality on Line(B, G), Line(D, G), B we get Line(B, G) != Line(D, G)
By line_inequality on Line(D, G), Line(F, H), G we get Line(D, G) != Line(F, H)
By line_inequality on Line(G, H), Line(B, E), G we get Line(B, E) != Line(G, H)
By line_inequality on i, Line(A, G), E we get i != Line(A, G)
By line_inequality on Line(B, E), Line(B, G), E we get Line(B, E) != Line(B, G)
By line_inequality on Line(B, G), Line(A, H), G we get Line(A, H) != Line(B, G)
By line_inequality on Line(A, G), Line(B, G), A we get Line(A, G) != Line(B, G)
By line_inequality on Line(G, H), Line(D, G), H we get Line(D, G) != Line(G, H)
By line_inequality on j, Line(F, G), E we get j != Line(F, G)
By line_inequality on Line(B, G), Line(E, G), B we get Line(B, G) != Line(E, G)
By line_inequality on Line(A, G), Line(F, G), A we get Line(A, G) != Line(F, G)
By line_inequality on Line(A, G), Line(A, H), G we get Line(A, G) != Line(A, H)
By line_inequality on Line(E, G), Line(F, G), E we get Line(E, G) != Line(F, G)
By line_inequality on h, Line(D, G), C we get h != Line(D, G)
By line_circle_intersection_has_at_most_two_points_0 on D, F, I, d we get I not in d
By line_inequality on Line(E, G), Line(A, G), E we get Line(A, G) != Line(E, G)
By line_inequality on Line(D, G), Line(F, G), D we get Line(D, G) != Line(F, G)
By line_inequality on Line(E, G), Line(B, E), G we get Line(B, E) != Line(E, G)
By line_inequality on Line(F, G), Line(B, G), F we get Line(B, G) != Line(F, G)
By line_inequality on Line(G, H), Line(F, H), G we get Line(F, H) != Line(G, H)
By line_inequality on Line(E, G), Line(D, G), E we get Line(D, G) != Line(E, G)
By line_inequality on j, Line(E, G), C we get j != Line(E, G)
By external_angle_bisector_definition_v0_r on F, A, D, H we get Line(A, H) == external_angle_bisector(D, H, F)
By internal_angle_bisector_definition_v0_r on I, B, I, C we get Line(B, C) == internal_angle_bisector(I, C, I)
By external_angle_bisector_definition_v0_r on C, I, E, D we get Line(D, I) == external_angle_bisector(C, D, E)
By external_angle_bisector_definition_v0_r on H, F, A, D we get Line(D, F) == external_angle_bisector(A, D, H)
By external_angle_bisector_definition_v0_r on H, F, A, G we get Line(F, G) == external_angle_bisector(A, G, H)
By external_angle_bisector_definition_v0_r on I, E, D, C we get Line(C, E) == external_angle_bisector(D, C, I)
By internal_angle_bisector_definition_v0_r on F, B, F, A we get Line(A, B) == internal_angle_bisector(F, A, F)
By external_angle_bisector_definition_v0_r on D, A, F, G we get Line(A, G) == external_angle_bisector(D, G, F)
By internal_angle_bisector_definition_v0_r on B, I, B, C we get Line(C, I) == internal_angle_bisector(B, C, B)
By internal_angle_bisector_definition_v0_r on B, F, B, A we get Line(A, F) == internal_angle_bisector(B, A, B)
By internal_angle_bisector_definition_v0_r on B, A, B, F we get Line(A, F) == internal_angle_bisector(B, F, B)
By internal_angle_bisector_definition_v0_r on F, A, C, H we get Line(A, H) == internal_angle_bisector(C, H, F)
By internal_angle_bisector_definition_v0_r on C, B, C, I we get Line(B, I) == internal_angle_bisector(C, I, C)
By internal_angle_bisector_definition_v0_r on I, C, I, B we get Line(B, C) == internal_angle_bisector(I, B, I)
By internal_angle_bisector_definition_v0_r on A, B, A, F we get Line(B, F) == internal_angle_bisector(A, F, A)
By internal_angle_bisector_definition_v0_r on F, A, F, B we get Line(A, B) == internal_angle_bisector(F, B, F)
By internal_angle_bisector_definition_v0_r on C, I, C, B we get Line(B, I) == internal_angle_bisector(C, B, C)
By internal_angle_bisector_definition_v0_r on B, C, B, I we get Line(C, I) == internal_angle_bisector(B, I, B)
By internal_angle_bisector_definition_v0_r on A, F, A, B we get Line(B, F) == internal_angle_bisector(A, B, A)
By anti_similar_triangle_basic_properties on H, A, F, A, H, F we get not_collinear(A, F, H), not_collinear(A, F, H), angle(H, A, F) == 0 - angle(A, H, F) mod 360, angle(A, F, H) == 0 - angle(H, F, A) mod 360, angle(F, H, A) == 0 - angle(F, A, H) mod 360, log(distance(A, H)) + log(distance(A, F)) == log(distance(A, H)) + log(distance(F, H)), log(distance(A, F)) + log(distance(A, F)) == log(distance(F, H)) + log(distance(F, H)), log(distance(A, F)) + log(distance(A, H)) == log(distance(F, H)) + log(distance(A, H))
By sas_congruence on D, A, B, B, C, D we get congruent_triangles(A, B, D, C, D, B)
By anti_similar_triangle_basic_properties on F, D, A, D, F, A we get not_collinear(A, D, F), not_collinear(A, D, F), angle(F, D, A) == 0 - angle(D, F, A) mod 360, angle(D, A, F) == 0 - angle(F, A, D) mod 360, angle(A, F, D) == 0 - angle(A, D, F) mod 360, log(distance(D, F)) + log(distance(A, D)) == log(distance(D, F)) + log(distance(A, F)), log(distance(A, D)) + log(distance(A, D)) == log(distance(A, F)) + log(distance(A, F)), log(distance(A, D)) + log(distance(D, F)) == log(distance(A, F)) + log(distance(D, F))
By sas_congruence on A, B, C, C, D, A we get congruent_triangles(A, B, C, C, D, A)
By sas_congruence on D, C, B, B, A, D we get congruent_triangles(A, B, D, C, D, B)
By sas_congruence on B, C, D, D, A, B we get congruent_triangles(A, B, D, C, D, B)
By sas_congruence on C, B, A, A, D, C we get congruent_triangles(A, B, C, C, D, A)
By sas_congruence on A, D, C, C, B, A we get congruent_triangles(A, B, C, C, D, A)
By sas_congruence on B, A, D, D, C, B we get congruent_triangles(A, B, D, C, D, B)
By sas_congruence on C, D, A, A, B, C we get congruent_triangles(A, B, C, C, D, A)
By anti_similar_triangle_basic_properties on I, D, C, D, I, C we get not_collinear(C, D, I), not_collinear(C, D, I), angle(I, D, C) == 0 - angle(D, I, C) mod 360, angle(D, C, I) == 0 - angle(I, C, D) mod 360, angle(C, I, D) == 0 - angle(C, D, I) mod 360, log(distance(D, I)) + log(distance(C, D)) == log(distance(D, I)) + log(distance(C, I)), log(distance(C, D)) + log(distance(C, D)) == log(distance(C, I)) + log(distance(C, I)), log(distance(C, D)) + log(distance(D, I)) == log(distance(C, I)) + log(distance(D, I))
By anti_similar_triangle_basic_properties on E, C, D, C, E, D we get not_collinear(C, D, E), not_collinear(C, D, E), angle(E, C, D) == 0 - angle(C, E, D) mod 360, angle(C, D, E) == 0 - angle(E, D, C) mod 360, angle(D, E, C) == 0 - angle(D, C, E) mod 360, log(distance(C, E)) + log(distance(C, D)) == log(distance(C, E)) + log(distance(D, E)), log(distance(C, D)) + log(distance(C, D)) == log(distance(D, E)) + log(distance(D, E)), log(distance(C, D)) + log(distance(C, E)) == log(distance(D, E)) + log(distance(C, E))
By similar_triangle_basic_properties on A, D, F, F, A, H we get not_collinear(A, D, F), not_collinear(A, F, H), angle(A, D, F) == angle(F, A, H) mod 360, angle(A, H, F) == angle(D, F, A) mod 360, angle(F, A, D) == angle(H, F, A) mod 360, log(distance(A, D)) + log(distance(A, H)) == log(distance(A, F)) + log(distance(D, F)), log(distance(A, H)) + log(distance(A, F)) == log(distance(D, F)) + log(distance(F, H)), log(distance(A, F)) + log(distance(A, F)) == log(distance(F, H)) + log(distance(A, D))
By sas_anti_congruence on H, F, B, C, B, F we get anti_congruent_triangles(B, C, F, F, H, B)
By sas_anti_congruence on C, H, F, H, C, B we get anti_congruent_triangles(B, C, H, F, H, C)
By sas_anti_congruence on B, A, H, C, D, F we get anti_congruent_triangles(A, B, H, D, C, F)
By isosceles_trapezoid_symmetry on C, H, F, B we get isosceles_trapezoid(B, F, C, H)
By sas_anti_congruence on F, D, C, H, A, B we get anti_congruent_triangles(A, B, H, D, C, F)
By sas_anti_congruence on F, H, C, B, C, H we get anti_congruent_triangles(B, C, H, F, H, C)
By anti_similar_triangle_basic_properties on D, F, A, H, A, F we get not_collinear(A, D, F), not_collinear(A, F, H), angle(D, F, A) == 0 - angle(H, A, F) mod 360, angle(F, A, D) == 0 - angle(A, F, H) mod 360, angle(A, D, F) == 0 - angle(F, H, A) mod 360, log(distance(A, H)) + log(distance(A, F)) == log(distance(D, F)) + log(distance(A, F)), log(distance(A, F)) + log(distance(A, D)) == log(distance(A, F)) + log(distance(F, H)), log(distance(A, D)) + log(distance(A, H)) == log(distance(F, H)) + log(distance(D, F))
By sas_anti_congruence on F, B, C, B, F, H we get anti_congruent_triangles(B, C, F, F, H, B)
By power_of_a_point_definition on D, E, A, c we get log(power_of_a_point(D, c)) == log(distance(D, E)) + log(distance(A, D))
By sas_anti_congruence on H, A, B, F, D, C we get anti_congruent_triangles(A, B, H, D, C, F)
By sas_anti_congruence on B, F, H, F, B, C we get anti_congruent_triangles(B, C, F, F, H, B)
By similar_triangle_basic_properties on D, A, F, A, F, H we get not_collinear(A, D, F), not_collinear(A, F, H), angle(A, F, H) == angle(D, A, F) mod 360, angle(A, F, D) == angle(F, H, A) mod 360, angle(F, D, A) == angle(H, A, F) mod 360, log(distance(A, D)) + log(distance(F, H)) == log(distance(A, F)) + log(distance(A, F)), log(distance(A, F)) + log(distance(A, H)) == log(distance(F, H)) + log(distance(D, F)), log(distance(A, H)) + log(distance(A, D)) == log(distance(D, F)) + log(distance(A, F))
By sas_anti_congruence on H, C, B, C, H, F we get anti_congruent_triangles(B, C, H, F, H, C)
By isosceles_trapezoid_symmetry on F, B, C, H we get isosceles_trapezoid(F, B, H, C)
By sas_anti_congruence on C, B, F, H, F, B we get anti_congruent_triangles(B, C, F, F, H, B)
By sas_anti_congruence on C, D, F, B, A, H we get anti_congruent_triangles(A, B, H, D, C, F)
By sas_anti_congruence on B, C, H, F, H, C we get anti_congruent_triangles(B, C, H, F, H, C)
By isosceles_trapezoid_symmetry on H, C, B, F we get isosceles_trapezoid(F, B, H, C)
By power_of_a_point_definition on E, A, D, d we get log(power_of_a_point(E, d)) == log(distance(A, E)) + log(distance(D, E))
By isosceles_trapezoid_symmetry on B, F, H, C we get isosceles_trapezoid(B, F, C, H)
By anti_similar_triangle_basic_properties on A, D, H, F, H, D we get not_collinear(A, D, H), not_collinear(D, F, H), angle(A, D, H) == 0 - angle(F, H, D) mod 360, angle(D, H, A) == 0 - angle(H, D, F) mod 360, angle(H, A, D) == 0 - angle(D, F, H) mod 360, log(distance(A, D)) + log(distance(D, H)) == log(distance(F, H)) + log(distance(D, H)), log(distance(D, H)) + log(distance(A, H)) == log(distance(D, H)) + log(distance(D, F)), log(distance(A, H)) + log(distance(F, H)) == log(distance(D, F)) + log(distance(A, D))
By anti_similar_triangle_basic_properties on D, H, F, H, D, A we get not_collinear(D, F, H), not_collinear(A, D, H), angle(D, H, F) == 0 - angle(H, D, A) mod 360, angle(H, F, D) == 0 - angle(D, A, H) mod 360, angle(F, D, H) == 0 - angle(A, H, D) mod 360, log(distance(D, H)) + log(distance(A, D)) == log(distance(D, H)) + log(distance(F, H)), log(distance(A, D)) + log(distance(D, F)) == log(distance(F, H)) + log(distance(A, H)), log(distance(A, H)) + log(distance(D, H)) == log(distance(D, F)) + log(distance(D, H))
By similar_triangle_basic_properties on F, D, G, B, E, G we get not_collinear(D, F, G), not_collinear(B, E, G), angle(B, E, G) == angle(F, D, G) mod 360, angle(D, G, F) == angle(E, G, B) mod 360, angle(G, B, E) == angle(G, F, D) mod 360, log(distance(B, E)) + log(distance(D, G)) == log(distance(D, F)) + log(distance(E, G)), log(distance(D, G)) + log(distance(B, G)) == log(distance(E, G)) + log(distance(F, G)), log(distance(B, G)) + log(distance(D, F)) == log(distance(F, G)) + log(distance(B, E))
By similar_triangle_basic_properties on F, G, D, B, G, E we get not_collinear(D, F, G), not_collinear(B, E, G), angle(B, G, E) == angle(F, G, D) mod 360, angle(G, D, F) == angle(G, E, B) mod 360, angle(D, F, G) == angle(E, B, G) mod 360, log(distance(B, G)) + log(distance(D, G)) == log(distance(F, G)) + log(distance(E, G)), log(distance(D, G)) + log(distance(B, E)) == log(distance(E, G)) + log(distance(D, F)), log(distance(B, E)) + log(distance(F, G)) == log(distance(D, F)) + log(distance(B, G))
By line_intersection_definition on G, Line(E, G), Line(G, H) we get G == line_intersection(Line(E, G), Line(G, H))
By line_intersection_definition on H, Line(F, H), Line(A, H) we get H == line_intersection(Line(A, H), Line(F, H))
By line_intersection_definition on H, h, Line(G, H) we get H == line_intersection(h, Line(G, H))
By line_intersection_definition on G, Line(D, G), Line(G, H) we get G == line_intersection(Line(D, G), Line(G, H))
By concurrent_sufficient_conditions on Line(B, E), Line(B, G), g we get concurrent(g, Line(B, E), Line(B, G))
By concurrent_sufficient_conditions on Line(F, H), Line(F, G), f we get concurrent(f, Line(F, G), Line(F, H))
By line_intersection_definition on G, Line(F, G), Line(D, G) we get G == line_intersection(Line(D, G), Line(F, G))
By concurrent_sufficient_conditions on Line(F, G), k, f we get concurrent(f, k, Line(F, G))
By concurrent_sufficient_conditions on Line(B, E), Line(B, G), f we get concurrent(f, Line(B, E), Line(B, G))
By concurrent_sufficient_conditions on Line(A, H), Line(F, H), h we get concurrent(h, Line(A, H), Line(F, H))
By line_intersection_definition on G, Line(F, G), Line(B, G) we get G == line_intersection(Line(B, G), Line(F, G))
By line_intersection_definition on E, i, Line(E, G) we get E == line_intersection(i, Line(E, G))
By line_intersection_definition on G, Line(D, G), Line(B, G) we get G == line_intersection(Line(B, G), Line(D, G))
By line_intersection_definition on G, Line(E, G), Line(B, G) we get G == line_intersection(Line(B, G), Line(E, G))
By line_intersection_definition on G, Line(E, G), Line(A, G) we get G == line_intersection(Line(A, G), Line(E, G))
By line_intersection_definition on G, Line(A, G), Line(G, H) we get G == line_intersection(Line(A, G), Line(G, H))
By line_intersection_definition on F, Line(F, G), k we get F == line_intersection(k, Line(F, G))
By line_intersection_definition on A, Line(A, G), Line(A, H) we get A == line_intersection(Line(A, G), Line(A, H))
By line_intersection_definition on A, Line(A, G), i we get A == line_intersection(i, Line(A, G))
By line_intersection_definition on G, Line(A, G), Line(F, G) we get G == line_intersection(Line(A, G), Line(F, G))
By line_intersection_definition on D, h, Line(D, G) we get D == line_intersection(h, Line(D, G))
By line_intersection_definition on G, Line(F, G), Line(E, G) we get G == line_intersection(Line(E, G), Line(F, G))
By line_intersection_definition on B, Line(B, G), Line(B, E) we get B == line_intersection(Line(B, E), Line(B, G))
By line_intersection_definition on G, Line(A, G), Line(B, G) we get G == line_intersection(Line(A, G), Line(B, G))
By line_intersection_definition on G, Line(G, H), Line(F, G) we get G == line_intersection(Line(F, G), Line(G, H))
By concurrent_sufficient_conditions on Line(A, H), Line(A, G), f we get concurrent(f, Line(A, G), Line(A, H))
By concurrent_sufficient_conditions on Line(A, G), i, f we get concurrent(f, i, Line(A, G))
By line_intersection_definition on H, Line(A, H), Line(G, H) we get H == line_intersection(Line(A, H), Line(G, H))
By line_intersection_definition on D, i, Line(D, G) we get D == line_intersection(i, Line(D, G))
By line_intersection_definition on D, k, Line(D, G) we get D == line_intersection(k, Line(D, G))
By line_intersection_definition on G, Line(A, G), Line(D, G) we get G == line_intersection(Line(A, G), Line(D, G))
By line_intersection_definition on E, Line(E, G), j we get E == line_intersection(j, Line(E, G))
By line_intersection_definition on G, Line(E, G), Line(D, G) we get G == line_intersection(Line(D, G), Line(E, G))
By line_intersection_definition on G, Line(G, H), Line(B, G) we get G == line_intersection(Line(B, G), Line(G, H))
By line_intersection_definition on H, Line(F, H), Line(G, H) we get H == line_intersection(Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(F, H), Line(A, H), h we get concurrent(h, Line(A, H), Line(F, H))
By concurrent_sufficient_conditions on Line(A, G), Line(A, H), f we get concurrent(f, Line(A, G), Line(A, H))
By concurrent_sufficient_conditions on k, Line(F, G), f we get concurrent(f, k, Line(F, G))
By line_intersection_definition on F, Line(F, G), Line(F, H) we get F == line_intersection(Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on Line(F, G), Line(F, H), f we get concurrent(f, Line(F, G), Line(F, H))
By line_intersection_definition on E, Line(B, E), Line(E, G) we get E == line_intersection(Line(B, E), Line(E, G))
By concurrent_sufficient_conditions on Line(B, G), Line(B, E), f we get concurrent(f, Line(B, E), Line(B, G))
By concurrent_sufficient_conditions on i, Line(A, G), f we get concurrent(f, i, Line(A, G))
By concurrent_sufficient_conditions on Line(B, G), Line(B, E), g we get concurrent(g, Line(B, E), Line(B, G))
By same_angle_v1 on C, D, H, A we get angle(D, C, A) == angle(H, C, A) mod 360
By same_angle_v1 on D, E, A, B we get angle(A, D, B) == angle(E, D, B) mod 360
By same_angle_v0 on F, D, I, C we get angle(D, F, C) == angle(I, F, C) mod 360
By same_angle_v1 on B, C, I, H we get angle(C, B, H) == angle(I, B, H) mod 360
By same_angle_v1 on B, C, I, D we get angle(C, B, D) == angle(I, B, D) mod 360
By same_angle_v2 on A, F, B, C we get angle(F, A, C) == angle(B, A, C) + 180 mod 360
By same_angle_v0 on D, H, C, B we get angle(C, D, B) == angle(H, D, B) mod 360
By same_angle_v0 on B, F, A, D we get angle(A, B, D) == angle(F, B, D) mod 360
By same_angle_v3 on C, B, I, A we get angle(B, C, A) == angle(I, C, A) + 180 mod 360
By same_angle_v2 on D, I, F, B we get angle(I, D, B) == angle(F, D, B) + 180 mod 360
By same_angle_v0 on A, D, E, C we get angle(D, A, C) == angle(E, A, C) mod 360
By same_angle_v2 on C, B, I, F we get angle(B, C, F) == angle(I, C, F) + 180 mod 360
By same_angle_v1 on F, B, A, C we get angle(A, F, C) == angle(B, F, C) mod 360
By same_angle_v2 on H, C, D, B we get angle(C, H, B) == angle(D, H, B) + 180 mod 360
By between_imply_not_between on A, E, D we get collinear_and_not_between(D, A, E)
By between_imply_not_between on D, H, C we get collinear_and_not_between(C, D, H)
By between_imply_not_between on D, E, A we get collinear_and_not_between(A, D, E)
By between_imply_not_between on I, D, F we get collinear_and_not_between(D, I, F)
By between_imply_not_between on F, D, I we get collinear_and_not_between(D, F, I)
By between_imply_not_between on C, H, D we get collinear_and_not_between(D, C, H)
By different_points_v1 on B, center(c) we get 0 != distance(B, center(c))
By different_points_v1 on C, A we get 0 != distance(A, C)
By different_points_v1 on center(c), G we get 0 != distance(G, center(c))
By different_points_v1 on D, B we get 0 != distance(B, D)
By different_points_v1 on A, center(c) we get 0 != distance(A, center(c))
By different_points_v1 on C, F we get 0 != distance(C, F)
By different_points_v1 on center(d), H we get 0 != distance(H, center(d))
By different_points_v1 on center(d), A we get 0 != distance(A, center(d))
By different_points_v1 on F, center(d) we get 0 != distance(F, center(d))
By different_points_v1 on G, center(d) we get 0 != distance(G, center(d))
By different_points_v1 on B, H we get 0 != distance(B, H)
By sas_congruence on E, D, C, I, C, D we get congruent_triangles(C, D, E, D, C, I)
By different_points_v1 on center(d), D we get 0 != distance(D, center(d))
By different_points_v1 on E, center(c) we get 0 != distance(E, center(c))
By parallel_line_angles_reverse_v1 on A, F, C, D we get angle(A, F, C) == angle(D, C, F) mod 360
By parallel_line_angles_reverse_v1 on A, F, C, H we get angle(A, F, C) == angle(H, C, F) mod 360
By sas_anti_congruence on C, D, E, I, C, D we get anti_congruent_triangles(C, D, E, I, C, D)
By parallel_line_angles_v1 on E, C, I, F we get parallel(Line(C, E), Line(F, I))
By anti_similar_triangle_basic_properties on F, A, H, C, D, I we get not_collinear(A, F, H), not_collinear(C, D, I), angle(F, A, H) == 0 - angle(C, D, I) mod 360, angle(A, H, F) == 0 - angle(D, I, C) mod 360, angle(H, F, A) == 0 - angle(I, C, D) mod 360, log(distance(A, F)) + log(distance(D, I)) == log(distance(C, D)) + log(distance(A, H)), log(distance(A, H)) + log(distance(C, I)) == log(distance(D, I)) + log(distance(F, H)), log(distance(C, I)) + log(distance(A, F)) == log(distance(F, H)) + log(distance(C, D))
By parallel_line_angles_reverse_v1 on E, D, B, I we get angle(E, D, B) == angle(I, B, D) mod 360
By parallel_line_angles_reverse_v3 on H, C, A, F we get angle(H, C, A) == angle(F, A, C) + 180 mod 360
By anti_similar_triangle_basic_properties on C, I, D, F, H, A we get not_collinear(C, D, I), not_collinear(A, F, H), angle(C, I, D) == 0 - angle(F, H, A) mod 360, angle(I, D, C) == 0 - angle(H, A, F) mod 360, angle(D, C, I) == 0 - angle(A, F, H) mod 360, log(distance(C, I)) + log(distance(A, H)) == log(distance(F, H)) + log(distance(D, I)), log(distance(A, H)) + log(distance(C, D)) == log(distance(D, I)) + log(distance(A, F)), log(distance(A, F)) + log(distance(C, I)) == log(distance(C, D)) + log(distance(F, H))
By similar_triangle_basic_properties on A, H, F, I, D, C we get not_collinear(A, F, H), not_collinear(C, D, I), angle(A, H, F) == angle(I, D, C) mod 360, angle(D, C, I) == angle(H, F, A) mod 360, angle(C, I, D) == angle(F, A, H) mod 360, log(distance(A, H)) + log(distance(C, D)) == log(distance(D, I)) + log(distance(F, H)), log(distance(C, D)) + log(distance(A, F)) == log(distance(F, H)) + log(distance(C, I)), log(distance(A, F)) + log(distance(D, I)) == log(distance(C, I)) + log(distance(A, H))
By parallel_line_angles_reverse_v1 on H, C, A, B we get angle(B, A, C) == angle(H, C, A) mod 360
By parallel_line_angles_reverse_v1 on A, D, B, I we get angle(A, D, B) == angle(I, B, D) mod 360
By anti_similar_triangle_basic_properties on C, I, D, D, C, E we get not_collinear(C, D, I), not_collinear(C, D, E), angle(C, I, D) == 0 - angle(D, C, E) mod 360, angle(I, D, C) == 0 - angle(C, E, D) mod 360, angle(D, C, I) == 0 - angle(E, D, C) mod 360, log(distance(C, D)) + log(distance(D, I)) == log(distance(C, I)) + log(distance(C, E)), log(distance(C, E)) + log(distance(C, D)) == log(distance(D, I)) + log(distance(D, E)), log(distance(C, D)) + log(distance(C, D)) == log(distance(D, E)) + log(distance(C, I))
By parallel_line_angles_reverse_v0 on A, B, D, H we get angle(A, B, D) == angle(H, D, B) mod 360
By parallel_line_angles_reverse_v3 on I, C, A, E we get angle(I, C, A) == angle(E, A, C) + 180 mod 360
By similar_triangle_basic_properties on C, E, D, D, I, C we get not_collinear(C, D, E), not_collinear(C, D, I), angle(C, E, D) == angle(D, I, C) mod 360, angle(E, D, C) == angle(I, C, D) mod 360, angle(C, D, I) == angle(D, C, E) mod 360, log(distance(C, E)) + log(distance(C, I)) == log(distance(D, I)) + log(distance(D, E)), log(distance(C, I)) + log(distance(C, D)) == log(distance(D, E)) + log(distance(C, D)), log(distance(C, D)) + log(distance(C, E)) == log(distance(C, D)) + log(distance(D, I))
By anti_similar_triangle_basic_properties on I, C, D, F, A, D we get not_collinear(C, D, I), not_collinear(A, D, F), angle(I, C, D) == 0 - angle(F, A, D) mod 360, angle(C, D, I) == 0 - angle(A, D, F) mod 360, angle(D, I, C) == 0 - angle(D, F, A) mod 360, log(distance(A, F)) + log(distance(C, D)) == log(distance(C, I)) + log(distance(A, D)), log(distance(A, D)) + log(distance(D, I)) == log(distance(C, D)) + log(distance(D, F)), log(distance(D, F)) + log(distance(C, I)) == log(distance(D, I)) + log(distance(A, F))
By anti_congruence_from_anti_similar_triangles on D, C, E, C, I, D we get anti_congruent_triangles(C, D, E, I, C, D)
By similar_triangle_basic_properties on D, I, C, F, D, A we get not_collinear(C, D, I), not_collinear(A, D, F), angle(D, I, C) == angle(F, D, A) mod 360, angle(D, A, F) == angle(I, C, D) mod 360, angle(A, F, D) == angle(C, D, I) mod 360, log(distance(D, F)) + log(distance(C, I)) == log(distance(D, I)) + log(distance(A, D)), log(distance(A, D)) + log(distance(C, D)) == log(distance(C, I)) + log(distance(A, F)), log(distance(A, F)) + log(distance(D, I)) == log(distance(C, D)) + log(distance(D, F))
By anti_similar_triangle_basic_properties on H, A, F, E, C, D we get not_collinear(A, F, H), not_collinear(C, D, E), angle(H, A, F) == 0 - angle(E, C, D) mod 360, angle(A, F, H) == 0 - angle(C, D, E) mod 360, angle(F, H, A) == 0 - angle(D, E, C) mod 360, log(distance(A, H)) + log(distance(C, D)) == log(distance(C, E)) + log(distance(A, F)), log(distance(A, F)) + log(distance(D, E)) == log(distance(C, D)) + log(distance(F, H)), log(distance(D, E)) + log(distance(A, H)) == log(distance(F, H)) + log(distance(C, E))
By parallel_line_angles_reverse_v3 on D, H, B, A we get angle(D, H, B) == angle(A, B, H) + 180 mod 360
By line_inequality on Line(E, center(c)), h, E we get h != Line(E, center(c))
By parallel_line_angles_v1 on D, I, C, E we get parallel(Line(C, E), Line(D, I))
By parallel_line_angles_reverse_v2 on F, B, H, D we get angle(F, B, H) == angle(D, H, B) + 180 mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on G, B, D we get G not in Line(B, D)
By parallel_line_angles_v1 on F, D, C, E we get parallel(Line(C, E), Line(D, F))
By similar_triangle_basic_properties on A, D, F, C, I, D we get not_collinear(A, D, F), not_collinear(C, D, I), angle(A, D, F) == angle(C, I, D) mod 360, angle(D, F, A) == angle(I, D, C) mod 360, angle(D, C, I) == angle(F, A, D) mod 360, log(distance(A, D)) + log(distance(D, I)) == log(distance(C, I)) + log(distance(D, F)), log(distance(D, F)) + log(distance(C, D)) == log(distance(D, I)) + log(distance(A, F)), log(distance(A, F)) + log(distance(C, I)) == log(distance(C, D)) + log(distance(A, D))
By parallel_line_angles_reverse_v3 on D, H, B, F we get angle(D, H, B) == angle(F, B, H) + 180 mod 360
By line_inequality on Line(B, H), i, B we get i != Line(B, H)
By anti_similar_triangle_basic_properties on F, D, A, I, D, C we get not_collinear(A, D, F), not_collinear(C, D, I), angle(F, D, A) == 0 - angle(I, D, C) mod 360, angle(D, A, F) == 0 - angle(D, C, I) mod 360, angle(A, F, D) == 0 - angle(C, I, D) mod 360, log(distance(D, F)) + log(distance(C, D)) == log(distance(D, I)) + log(distance(A, D)), log(distance(A, D)) + log(distance(C, I)) == log(distance(C, D)) + log(distance(A, F)), log(distance(A, F)) + log(distance(D, I)) == log(distance(C, I)) + log(distance(D, F))
By congruence_from_similar_triangles on C, D, I, D, C, E we get congruent_triangles(C, D, E, D, C, I)
By similar_triangle_basic_properties on C, D, E, H, F, A we get not_collinear(C, D, E), not_collinear(A, F, H), angle(C, D, E) == angle(H, F, A) mod 360, angle(D, E, C) == angle(F, A, H) mod 360, angle(A, H, F) == angle(E, C, D) mod 360, log(distance(C, D)) + log(distance(A, F)) == log(distance(F, H)) + log(distance(D, E)), log(distance(A, F)) + log(distance(C, E)) == log(distance(D, E)) + log(distance(A, H)), log(distance(A, H)) + log(distance(C, D)) == log(distance(C, E)) + log(distance(F, H))
By aa_similarity on G, B, F, G, E, D we get similar_triangles(B, F, G, E, D, G)
By parallel_line_angles_reverse_v0 on H, D, B, F we get angle(F, B, D) == angle(H, D, B) mod 360
By line_inequality on Line(H, center(d)), k, H we get k != Line(H, center(d))
By parallel_line_angles_reverse_v0 on C, D, B, F we get angle(C, D, B) == angle(F, B, D) mod 360
By similar_triangle_basic_properties on C, E, D, H, A, F we get not_collinear(C, D, E), not_collinear(A, F, H), angle(C, E, D) == angle(H, A, F) mod 360, angle(A, F, H) == angle(E, D, C) mod 360, angle(D, C, E) == angle(F, H, A) mod 360, log(distance(A, H)) + log(distance(D, E)) == log(distance(C, E)) + log(distance(A, F)), log(distance(A, F)) + log(distance(C, D)) == log(distance(D, E)) + log(distance(F, H)), log(distance(C, D)) + log(distance(A, H)) == log(distance(F, H)) + log(distance(C, E))
By congruence_from_similar_triangles on C, D, E, D, C, I we get congruent_triangles(C, D, E, D, C, I)
By parallel_line_angles_reverse_v2 on F, A, C, D we get angle(F, A, C) == angle(D, C, A) + 180 mod 360
By line_inequality on Line(H, center(d)), Line(B, E), H we get Line(B, E) != Line(H, center(d))
By line_inequality on Line(B, H), Line(D, G), B we get Line(B, H) != Line(D, G)
By parallel_line_angles_reverse_v3 on I, C, A, D we get angle(I, C, A) == angle(D, A, C) + 180 mod 360
By anti_congruence_from_anti_similar_triangles on C, D, E, I, C, D we get anti_congruent_triangles(C, D, E, I, C, D)
By parallel_line_angles_reverse_v0 on E, A, C, B we get angle(B, C, A) == angle(E, A, C) mod 360
By parallel_line_angles_reverse_v2 on F, A, C, H we get angle(F, A, C) == angle(H, C, A) + 180 mod 360
By parallel_line_angles_reverse_v1 on C, B, D, E we get angle(C, B, D) == angle(E, D, B) mod 360
By line_inequality on Line(C, F), Line(E, G), F we get Line(C, F) != Line(E, G)
By asa_anti_congruence on D, C, I, E, D, C we get anti_congruent_triangles(C, D, E, I, C, D)
By anti_similar_triangle_basic_properties on D, F, A, C, E, D we get not_collinear(A, D, F), not_collinear(C, D, E), angle(D, F, A) == 0 - angle(C, E, D) mod 360, angle(F, A, D) == 0 - angle(E, D, C) mod 360, angle(A, D, F) == 0 - angle(D, C, E) mod 360, log(distance(C, E)) + log(distance(A, F)) == log(distance(D, F)) + log(distance(D, E)), log(distance(A, F)) + log(distance(C, D)) == log(distance(D, E)) + log(distance(A, D)), log(distance(A, D)) + log(distance(C, E)) == log(distance(C, D)) + log(distance(D, F))
By parallel_line_angles_reverse_v2 on D, A, C, I we get angle(D, A, C) == angle(I, C, A) + 180 mod 360
By similar_triangle_basic_properties on I, C, D, A, F, H we get not_collinear(C, D, I), not_collinear(A, F, H), angle(A, F, H) == angle(I, C, D) mod 360, angle(C, D, I) == angle(F, H, A) mod 360, angle(D, I, C) == angle(H, A, F) mod 360, log(distance(A, F)) + log(distance(C, D)) == log(distance(C, I)) + log(distance(F, H)), log(distance(C, D)) + log(distance(A, H)) == log(distance(F, H)) + log(distance(D, I)), log(distance(A, H)) + log(distance(C, I)) == log(distance(D, I)) + log(distance(A, F))
By anti_congruence_from_anti_similar_triangles on D, E, C, C, D, I we get anti_congruent_triangles(C, D, E, I, C, D)
By between_imply_segment_sum on D, E, A we get distance(A, D) == distance(D, E) + distance(A, E)
By line_inequality on Line(G, center(c)), f, G we get f != Line(G, center(c))
By between_imply_segment_sum on D, H, C we get distance(C, D) == distance(D, H) + distance(C, H)
By anti_similar_triangle_basic_properties on D, E, C, C, D, I we get not_collinear(C, D, E), not_collinear(C, D, I), angle(D, E, C) == 0 - angle(C, D, I) mod 360, angle(E, C, D) == 0 - angle(D, I, C) mod 360, angle(C, D, E) == 0 - angle(I, C, D) mod 360, log(distance(C, D)) + log(distance(C, E)) == log(distance(D, E)) + log(distance(D, I)), log(distance(C, E)) + log(distance(C, I)) == log(distance(D, I)) + log(distance(C, D)), log(distance(C, D)) + log(distance(C, D)) == log(distance(C, I)) + log(distance(D, E))
By line_inequality on Line(B, H), Line(G, H), B we get Line(B, H) != Line(G, H)
By line_inequality on Line(A, C), Line(B, G), C we get Line(A, C) != Line(B, G)
By asa_congruence on C, D, I, D, C, E we get congruent_triangles(C, D, E, D, C, I)
By line_inequality on Line(B, center(c)), i, B we get i != Line(B, center(c))
By line_inequality on Line(A, center(c)), Line(G, H), A we get Line(G, H) != Line(A, center(c))
By line_inequality on Line(D, center(d)), Line(F, G), D we get Line(F, G) != Line(D, center(d))
By not_in_line_equivalent_to_not_collinear_v0_r on F, B, D we get F not in Line(B, D)
By asa_congruence on E, D, C, I, C, D we get congruent_triangles(C, D, E, D, C, I)
By similar_triangle_basic_properties on C, E, D, F, D, A we get not_collinear(C, D, E), not_collinear(A, D, F), angle(C, E, D) == angle(F, D, A) mod 360, angle(D, A, F) == angle(E, D, C) mod 360, angle(A, F, D) == angle(D, C, E) mod 360, log(distance(C, E)) + log(distance(A, D)) == log(distance(D, F)) + log(distance(D, E)), log(distance(A, D)) + log(distance(C, D)) == log(distance(D, E)) + log(distance(A, F)), log(distance(A, F)) + log(distance(C, E)) == log(distance(C, D)) + log(distance(D, F))
By parallel_line_angles_reverse_v3 on D, C, A, F we get angle(D, C, A) == angle(F, A, C) + 180 mod 360
By asa_anti_congruence on C, D, I, D, E, C we get anti_congruent_triangles(C, D, E, I, C, D)
By asa_anti_congruence on D, E, C, C, D, I we get anti_congruent_triangles(C, D, E, I, C, D)
By parallel_line_angles_reverse_v2 on E, A, C, I we get angle(E, A, C) == angle(I, C, A) + 180 mod 360
By anti_congruence_from_anti_similar_triangles on D, C, I, E, D, C we get anti_congruent_triangles(C, D, E, I, C, D)
By isosceles_trapezoid_properties on F, B, H, C we get parallel(Line(B, F), Line(C, H)), distance(B, H) == distance(C, F), angle(C, F, B) == angle(F, B, H), angle(B, H, C) == angle(H, C, F)
By line_inequality on Line(B, H), Line(E, G), B we get Line(B, H) != Line(E, G)
By anti_similar_triangle_basic_properties on A, H, F, C, E, D we get not_collinear(A, F, H), not_collinear(C, D, E), angle(A, H, F) == 0 - angle(C, E, D) mod 360, angle(H, F, A) == 0 - angle(E, D, C) mod 360, angle(F, A, H) == 0 - angle(D, C, E) mod 360, log(distance(A, H)) + log(distance(D, E)) == log(distance(C, E)) + log(distance(F, H)), log(distance(D, E)) + log(distance(A, F)) == log(distance(F, H)) + log(distance(C, D)), log(distance(A, F)) + log(distance(C, E)) == log(distance(C, D)) + log(distance(A, H))
By asa_congruence on I, C, D, E, D, C we get congruent_triangles(C, D, E, D, C, I)
By not_in_line_equivalent_to_not_collinear_v0_r on G, F, C we get G not in Line(C, F)
By not_in_line_equivalent_to_not_collinear_v0_r on H, A, C we get H not in Line(A, C)
By anti_congruence_from_anti_similar_triangles on E, D, C, D, C, I we get anti_congruent_triangles(C, D, E, I, C, D)
By line_inequality on Line(G, center(c)), j, G we get j != Line(G, center(c))
By sas_anti_congruence on E, D, C, D, C, I we get anti_congruent_triangles(C, D, E, I, C, D)
By not_in_line_equivalent_to_not_collinear_v0_r on C, D, B we get C not in Line(B, D)
By parallel_line_angles_reverse_v2 on A, B, H, D we get angle(A, B, H) == angle(D, H, B) + 180 mod 360
By asa_anti_congruence on D, C, E, C, I, D we get anti_congruent_triangles(C, D, E, I, C, D)
By aa_similarity on G, F, B, G, D, E we get similar_triangles(B, F, G, E, D, G)
By asa_anti_congruence on C, D, E, I, C, D we get anti_congruent_triangles(C, D, E, I, C, D)
By line_inequality on Line(A, center(c)), Line(F, H), A we get Line(F, H) != Line(A, center(c))
By line_inequality on Line(C, F), Line(D, G), C we get Line(C, F) != Line(D, G)
By line_inequality on Line(F, center(d)), i, F we get i != Line(F, center(d))
By line_inequality on Line(B, D), Line(G, H), B we get Line(B, D) != Line(G, H)
By anti_congruence_from_anti_similar_triangles on C, I, D, D, C, E we get anti_congruent_triangles(C, D, E, I, C, D)
By line_inequality on Line(C, F), i, F we get i != Line(C, F)
By asa_anti_congruence on C, I, D, D, C, E we get anti_congruent_triangles(C, D, E, I, C, D)
By between_imply_segment_sum on F, D, I we get distance(F, I) == distance(D, F) + distance(D, I)
By asa_congruence on D, E, C, C, I, D we get congruent_triangles(C, D, E, D, C, I)
By sas_anti_congruence on I, C, D, C, D, E we get anti_congruent_triangles(C, D, E, I, C, D)
By anti_congruence_from_anti_similar_triangles on I, C, D, C, D, E we get anti_congruent_triangles(C, D, E, I, C, D)
By line_inequality on Line(B, H), Line(F, H), B we get Line(B, H) != Line(F, H)
By line_inequality on Line(B, D), Line(F, H), B we get Line(B, D) != Line(F, H)
By congruence_from_similar_triangles on D, C, I, C, D, E we get congruent_triangles(C, D, E, D, C, I)
By line_inequality on Line(B, center(c)), h, B we get h != Line(B, center(c))
By congruence_from_similar_triangles on I, C, D, E, D, C we get congruent_triangles(C, D, E, D, C, I)
By congruence_from_similar_triangles on E, D, C, I, C, D we get congruent_triangles(C, D, E, D, C, I)
By line_inequality on Line(A, C), f, C we get f != Line(A, C)
By line_inequality on Line(D, center(d)), Line(F, H), D we get Line(F, H) != Line(D, center(d))
By line_inequality on Line(G, center(c)), k, G we get k != Line(G, center(c))
By aa_similarity on G, D, E, G, F, B we get similar_triangles(B, F, G, E, D, G)
By sas_anti_congruence on D, C, I, E, D, C we get anti_congruent_triangles(C, D, E, I, C, D)
By sas_congruence on C, D, E, D, C, I we get congruent_triangles(C, D, E, D, C, I)
By line_inequality on Line(F, center(d)), Line(D, G), F we get Line(D, G) != Line(F, center(d))
By line_inequality on Line(A, center(c)), Line(F, G), A we get Line(F, G) != Line(A, center(c))
By line_inequality on Line(H, center(d)), Line(B, G), H we get Line(B, G) != Line(H, center(d))
By line_inequality on Line(D, center(d)), g, D we get g != Line(D, center(d))
By not_in_line_equivalent_to_not_collinear_v0_r on D, F, C we get D not in Line(C, F)
By line_inequality on Line(A, C), k, A we get k != Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on E, C, A we get E not in Line(A, C)
By line_inequality on Line(C, F), Line(A, H), C we get Line(A, H) != Line(C, F)
By line_inequality on Line(E, center(c)), Line(B, G), E we get Line(B, G) != Line(E, center(c))
By line_inequality on Line(D, center(d)), Line(B, G), D we get Line(B, G) != Line(D, center(d))
By asa_anti_congruence on I, C, D, C, D, E we get anti_congruent_triangles(C, D, E, I, C, D)
By isosceles_trapezoid_properties on B, F, C, H we get parallel(Line(B, F), Line(C, H)), distance(B, H) == distance(C, F), angle(B, F, C) == angle(H, B, F), angle(C, H, B) == angle(F, C, H)
By line_inequality on Line(B, H), k, B we get k != Line(B, H)
By sas_congruence on I, C, D, E, D, C we get congruent_triangles(C, D, E, D, C, I)
By line_inequality on Line(B, D), Line(A, G), B we get Line(A, G) != Line(B, D)
By asa_congruence on C, I, D, D, E, C we get congruent_triangles(C, D, E, D, C, I)
By line_inequality on Line(C, F), Line(A, G), F we get Line(A, G) != Line(C, F)
By congruence_from_similar_triangles on D, E, C, C, I, D we get congruent_triangles(C, D, E, D, C, I)
By line_inequality on Line(F, center(d)), Line(B, G), F we get Line(B, G) != Line(F, center(d))
By asa_congruence on D, C, I, C, D, E we get congruent_triangles(C, D, E, D, C, I)
By asa_congruence on C, D, E, D, C, I we get congruent_triangles(C, D, E, D, C, I)
By line_inequality on Line(B, D), Line(A, H), D we get Line(A, H) != Line(B, D)
By asa_congruence on D, C, E, C, D, I we get congruent_triangles(C, D, E, D, C, I)
By aa_similarity on G, E, D, G, B, F we get similar_triangles(B, F, G, E, D, G)
By sas_congruence on D, C, I, C, D, E we get congruent_triangles(C, D, E, D, C, I)
By not_in_line_equivalent_to_not_collinear_v0_r on I, C, A we get I not in Line(A, C)
By line_inequality on Line(A, C), i, C we get i != Line(A, C)
By line_inequality on Line(B, D), f, D we get f != Line(B, D)
By line_inequality on Line(A, center(c)), j, A we get j != Line(A, center(c))
By not_in_line_equivalent_to_not_collinear_v0_r on H, D, B we get H not in Line(B, D)
By asa_anti_congruence on E, D, C, D, C, I we get anti_congruent_triangles(C, D, E, I, C, D)
By line_inequality on Line(C, F), Line(B, E), C we get Line(B, E) != Line(C, F)
By line_inequality on Line(B, H), Line(B, G), H we get Line(B, G) != Line(B, H)
By congruence_from_similar_triangles on C, I, D, D, E, C we get congruent_triangles(C, D, E, D, C, I)
By not_in_line_equivalent_to_not_collinear_v0_r on B, F, C we get B not in Line(C, F)
By anti_congruence_from_anti_similar_triangles on C, D, I, D, E, C we get anti_congruent_triangles(C, D, E, I, C, D)
By not_in_line_equivalent_to_not_collinear_v0_r on D, C, A we get D not in Line(A, C)
By congruence_from_similar_triangles on D, C, E, C, D, I we get congruent_triangles(C, D, E, D, C, I)
By line_inequality on Line(E, center(c)), Line(F, H), E we get Line(F, H) != Line(E, center(c))
By line_inequality on Line(A, C), Line(D, G), A we get Line(A, C) != Line(D, G)
By line_inequality on Line(B, H), Line(F, G), H we get Line(B, H) != Line(F, G)
By line_inequality on Line(G, center(d)), k, G we get k != Line(G, center(d))
By line_inequality on Line(B, center(c)), k, B we get k != Line(B, center(c))
By line_inequality on Line(D, center(d)), Line(E, G), D we get Line(E, G) != Line(D, center(d))
By not_in_line_equivalent_to_not_collinear_v0_r on D, B, H we get D not in Line(B, H)
By line_inequality on Line(B, D), g, D we get g != Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on E, H, B we get E not in Line(B, H)
By not_in_line_equivalent_to_not_collinear_v0_r on A, D, B we get A not in Line(B, D)
By line_inequality on Line(A, center(c)), g, A we get g != Line(A, center(c))
By line_inequality on Line(B, D), k, B we get k != Line(B, D)
By line_inequality on Line(F, center(d)), h, F we get h != Line(F, center(d))
By line_inequality on Line(G, center(c)), Line(F, H), G we get Line(F, H) != Line(G, center(c))
By not_in_line_equivalent_to_not_collinear_v0_r on E, B, D we get E not in Line(B, D)
By line_inequality on Line(H, center(d)), i, H we get i != Line(H, center(d))
By not_in_line_equivalent_to_not_collinear_v0_r on B, C, A we get B not in Line(A, C)
By line_inequality on Line(H, center(d)), Line(A, G), H we get Line(A, G) != Line(H, center(d))
By line_inequality on Line(F, center(d)), Line(G, H), F we get Line(G, H) != Line(F, center(d))
By line_inequality on Line(G, center(c)), h, G we get h != Line(G, center(c))
By line_inequality on Line(B, D), Line(B, E), D we get Line(B, D) != Line(B, E)
By line_inequality on Line(C, F), Line(B, G), F we get Line(B, G) != Line(C, F)
By line_inequality on Line(B, D), h, B we get h != Line(B, D)
By line_inequality on Line(A, C), Line(G, H), C we get Line(A, C) != Line(G, H)
By line_inequality on Line(A, C), j, A we get j != Line(A, C)
By line_inequality on Line(F, center(d)), j, F we get j != Line(F, center(d))
By line_inequality on Line(A, center(d)), j, A we get j != Line(A, center(d))
By line_inequality on Line(A, center(d)), Line(F, H), A we get Line(F, H) != Line(A, center(d))
By not_in_line_equivalent_to_not_collinear_v0_r on F, A, C we get F not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on G, B, H we get G not in Line(B, H)
By line_inequality on Line(E, center(c)), f, E we get f != Line(E, center(c))
By line_inequality on Line(B, D), j, D we get j != Line(B, D)
By line_inequality on Line(B, D), Line(E, G), B we get Line(B, D) != Line(E, G)
By line_inequality on Line(F, center(d)), g, F we get g != Line(F, center(d))
By line_inequality on Line(B, H), Line(A, H), B we get Line(A, H) != Line(B, H)
By line_inequality on Line(G, center(c)), Line(A, H), G we get Line(A, H) != Line(G, center(c))
By line_inequality on Line(C, F), Line(G, H), F we get Line(C, F) != Line(G, H)
By line_inequality on Line(A, center(c)), Line(B, G), A we get Line(B, G) != Line(A, center(c))
By line_inequality on Line(A, C), Line(F, G), A we get Line(A, C) != Line(F, G)
By line_inequality on Line(G, center(c)), i, G we get i != Line(G, center(c))
By line_inequality on Line(D, center(d)), Line(A, G), D we get Line(A, G) != Line(D, center(d))
By not_in_line_equivalent_to_not_collinear_v0_r on E, F, C we get E not in Line(C, F)
By line_inequality on Line(A, C), Line(B, E), A we get Line(A, C) != Line(B, E)
By line_inequality on Line(B, D), i, B we get i != Line(B, D)
By line_inequality on Line(E, center(c)), Line(G, H), E we get Line(G, H) != Line(E, center(c))
By not_in_line_equivalent_to_not_collinear_v0_r on A, C, F we get A not in Line(C, F)
By line_inequality on Line(B, H), Line(A, G), H we get Line(A, G) != Line(B, H)
By line_inequality on Line(H, center(d)), j, H we get j != Line(H, center(d))
By line_inequality on Line(A, C), Line(A, H), C we get Line(A, C) != Line(A, H)
By line_inequality on Line(E, center(c)), Line(D, G), E we get Line(D, G) != Line(E, center(c))
By not_in_line_equivalent_to_not_collinear_v0_r on G, C, A we get G not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on H, F, C we get H not in Line(C, F)
By line_inequality on Line(D, center(d)), Line(A, H), D we get Line(A, H) != Line(D, center(d))
By line_inequality on Line(E, center(c)), k, E we get k != Line(E, center(c))
By line_inequality on Line(B, D), Line(D, G), B we get Line(B, D) != Line(D, G)
By line_inequality on Line(A, center(c)), h, A we get h != Line(A, center(c))
By line_inequality on Line(C, F), Line(F, H), C we get Line(C, F) != Line(F, H)
By line_inequality on Line(B, center(c)), Line(D, G), B we get Line(D, G) != Line(B, center(c))
By line_inequality on Line(G, center(d)), i, G we get i != Line(G, center(d))
By line_inequality on Line(C, F), Line(F, G), C we get Line(C, F) != Line(F, G)
By line_inequality on Line(A, center(d)), Line(B, E), A we get Line(B, E) != Line(A, center(d))
By line_inequality on Line(F, center(d)), Line(A, G), F we get Line(A, G) != Line(F, center(d))
By line_inequality on Line(F, center(d)), Line(E, G), F we get Line(E, G) != Line(F, center(d))
By line_inequality on Line(A, center(c)), k, A we get k != Line(A, center(c))
By line_inequality on Line(B, center(c)), Line(A, H), B we get Line(A, H) != Line(B, center(c))
By not_in_line_equivalent_to_not_collinear_v0_r on I, H, B we get I not in Line(B, H)
By line_inequality on Line(D, center(d)), Line(B, E), D we get Line(B, E) != Line(D, center(d))
By line_inequality on Line(B, center(c)), Line(E, G), B we get Line(E, G) != Line(B, center(c))
By not_in_line_equivalent_to_not_collinear_v0_r on I, D, B we get I not in Line(B, D)
By line_inequality on Line(B, D), Line(F, G), D we get Line(B, D) != Line(F, G)
By line_inequality on Line(A, center(d)), Line(G, H), A we get Line(G, H) != Line(A, center(d))
By line_inequality on Line(H, center(d)), f, H we get f != Line(H, center(d))
By line_inequality on Line(A, center(d)), g, A we get g != Line(A, center(d))
By line_inequality on Line(G, center(d)), g, G we get g != Line(G, center(d))
By line_inequality on Line(G, center(c)), Line(B, E), G we get Line(B, E) != Line(G, center(c))
By line_inequality on Line(A, center(d)), Line(F, G), A we get Line(F, G) != Line(A, center(d))
By line_inequality on Line(C, F), k, C we get k != Line(C, F)
By line_inequality on Line(A, center(c)), Line(D, G), A we get Line(D, G) != Line(A, center(c))
By line_inequality on Line(C, F), g, F we get g != Line(C, F)
By line_inequality on Line(A, center(d)), h, A we get h != Line(A, center(d))
By not_in_line_equivalent_to_not_collinear_v0_r on F, B, H we get F not in Line(B, H)
By line_inequality on Line(E, center(c)), Line(A, H), E we get Line(A, H) != Line(E, center(c))
By line_inequality on Line(G, center(d)), Line(A, H), G we get Line(A, H) != Line(G, center(d))
By line_inequality on Line(G, center(d)), Line(B, E), G we get Line(B, E) != Line(G, center(d))
By line_inequality on Line(H, center(d)), g, H we get g != Line(H, center(d))
By line_inequality on Line(H, center(d)), Line(F, G), H we get Line(F, G) != Line(H, center(d))
By line_inequality on Line(G, center(d)), h, G we get h != Line(G, center(d))
By line_inequality on Line(B, H), h, B we get h != Line(B, H)
By line_inequality on Line(C, F), f, C we get f != Line(C, F)
By line_inequality on Line(B, H), g, H we get g != Line(B, H)
By line_inequality on Line(G, center(d)), Line(F, H), G we get Line(F, H) != Line(G, center(d))
By line_inequality on Line(H, center(d)), Line(E, G), H we get Line(E, G) != Line(H, center(d))
By not_in_line_equivalent_to_not_collinear_v0_r on I, C, F we get I not in Line(C, F)
By line_inequality on Line(B, center(c)), Line(F, G), B we get Line(F, G) != Line(B, center(c))
By line_inequality on Line(A, C), h, A we get h != Line(A, C)
By line_inequality on Line(D, center(d)), Line(G, H), D we get Line(G, H) != Line(D, center(d))
By line_inequality on Line(A, center(d)), Line(E, G), A we get Line(E, G) != Line(A, center(d))
By line_inequality on Line(B, H), Line(B, E), H we get Line(B, E) != Line(B, H)
By line_inequality on Line(B, H), j, B we get j != Line(B, H)
By line_inequality on Line(G, center(d)), j, G we get j != Line(G, center(d))
By line_inequality on Line(G, center(c)), g, G we get g != Line(G, center(c))
By line_inequality on Line(B, center(c)), Line(G, H), B we get Line(G, H) != Line(B, center(c))
By line_inequality on Line(D, center(d)), j, D we get j != Line(D, center(d))
By not_in_line_equivalent_to_not_collinear_v0_r on A, B, H we get A not in Line(B, H)
By line_inequality on Line(D, center(d)), f, D we get f != Line(D, center(d))
By line_inequality on Line(A, C), g, A we get g != Line(A, C)
By line_inequality on Line(A, center(d)), Line(B, G), A we get Line(B, G) != Line(A, center(d))
By not_in_line_equivalent_to_not_collinear_v0_r on C, H, B we get C not in Line(B, H)
By line_inequality on Line(B, H), f, H we get f != Line(B, H)
By line_inequality on Line(A, center(c)), Line(B, E), A we get Line(B, E) != Line(A, center(c))
By line_inequality on Line(C, F), h, F we get h != Line(C, F)
By line_inequality on Line(H, center(d)), Line(D, G), H we get Line(D, G) != Line(H, center(d))
By line_inequality on Line(A, center(c)), Line(E, G), A we get Line(E, G) != Line(A, center(c))
By line_inequality on Line(A, center(d)), k, A we get k != Line(A, center(d))
By line_inequality on Line(B, center(c)), Line(F, H), B we get Line(F, H) != Line(B, center(c))
By line_inequality on Line(C, F), j, F we get j != Line(C, F)
By line_inequality on Line(F, center(d)), Line(A, H), F we get Line(A, H) != Line(F, center(d))
By line_inequality on Line(A, C), Line(F, H), A we get Line(A, C) != Line(F, H)
By line_inequality on Line(E, center(c)), Line(F, G), E we get Line(F, G) != Line(E, center(c))
By line_inequality on Line(B, center(c)), j, B we get j != Line(B, center(c))
By line_inequality on Line(G, center(d)), f, G we get f != Line(G, center(d))
By line_inequality on Line(E, center(c)), g, E we get g != Line(E, center(c))
By line_inequality on Line(E, center(c)), Line(A, G), E we get Line(A, G) != Line(E, center(c))
By line_inequality on Line(A, C), Line(E, G), C we get Line(A, C) != Line(E, G)
By line_inequality on Line(A, C), Line(A, G), C we get Line(A, C) != Line(A, G)
By line_inequality on Line(A, center(d)), Line(D, G), A we get Line(D, G) != Line(A, center(d))
By line_inequality on Line(B, center(c)), Line(A, G), B we get Line(A, G) != Line(B, center(c))
By line_inequality on Line(B, D), Line(B, G), D we get Line(B, D) != Line(B, G)
By line_inequality on Line(F, center(d)), Line(B, E), F we get Line(B, E) != Line(F, center(d))
By tangent_chord_angle_v1 on D, C, E, F we get tangent(Line(D, F), Circle(C, D, E))
By tangent_chord_angle_v1 on C, I, D, E we get tangent(Line(C, E), Circle(C, D, I))
By reverse_direction on center(c), G we get 180 == direction(center(c), G) - direction(G, center(c)) mod 360
By internal_angle_bisector_definition_v0_r on A, F, H, center(d) we get Line(F, center(d)) == internal_angle_bisector(A, center(d), H)
By internal_angle_bisector_definition_v0_r on A, D, A, E we get Line(D, E) == internal_angle_bisector(A, E, A)
By external_angle_bisector_definition_v0_r on E, F, H, D we get Line(D, F) == external_angle_bisector(E, D, H)
By tangent_chord_angle_v1 on D, E, C, I we get tangent(Line(D, I), Circle(C, D, E))
By external_angle_bisector_definition_v0_r on I, E, H, C we get Line(C, E) == external_angle_bisector(H, C, I)
By internal_angle_bisector_definition_v0_r on D, E, D, A we get Line(A, E) == internal_angle_bisector(D, A, D)
By reverse_direction on center(d), H we get 180 == direction(center(d), H) - direction(H, center(d)) mod 360
By internal_angle_bisector_definition_v0_r on H, E, B, C we get Line(C, E) == internal_angle_bisector(B, C, H)
By external_angle_bisector_definition_v0_r on H, I, E, D we get Line(D, I) == external_angle_bisector(E, D, H)
By internal_angle_bisector_definition_v0_r on D, A, D, E we get Line(A, E) == internal_angle_bisector(D, E, D)
By concyclic_definition_0 on C, B, H, F we get F in Circle(B, C, H)
By concyclic_definition_0 on H, B, F, C we get C in Circle(B, F, H)
By internal_angle_bisector_definition_v0_r on I, D, I, F we get Line(D, F) == internal_angle_bisector(I, F, I)
By concyclic_definition_0 on C, F, H, B we get B in Circle(C, F, H)
By internal_angle_bisector_definition_v0_r on F, I, F, D we get Line(D, I) == internal_angle_bisector(F, D, F)
By reverse_direction on center(c), B we get 180 == direction(center(c), B) - direction(B, center(c)) mod 360
By internal_angle_bisector_definition_v0_r on H, C, H, D we get Line(C, D) == internal_angle_bisector(H, D, H)
By internal_angle_bisector_definition_v0_r on C, D, C, H we get Line(D, H) == internal_angle_bisector(C, H, C)
By internal_angle_bisector_definition_v0_r on D, C, D, H we get Line(C, H) == internal_angle_bisector(D, H, D)
By concyclic_definition_0 on F, C, B, H we get H in Circle(B, C, F)
By internal_angle_bisector_definition_v0_r on C, H, C, D we get Line(D, H) == internal_angle_bisector(C, D, C)
By reverse_direction on center(c), E we get 180 == direction(center(c), E) - direction(E, center(c)) mod 360
By reverse_direction on center(d), D we get 180 == direction(center(d), D) - direction(D, center(d)) mod 360
By reverse_direction on center(d), F we get 180 == direction(center(d), F) - direction(F, center(d)) mod 360
By internal_angle_bisector_definition_v0_r on D, I, D, F we get Line(F, I) == internal_angle_bisector(D, F, D)
By internal_angle_bisector_definition_v0_r on D, H, D, C we get Line(C, H) == internal_angle_bisector(D, C, D)
By internal_angle_bisector_definition_v0_r on F, A, D, center(d) we get Line(A, center(d)) == internal_angle_bisector(D, center(d), F)
By reverse_direction on center(d), A we get 180 == direction(center(d), A) - direction(A, center(d)) mod 360
By reverse_direction on center(c), A we get 180 == direction(center(c), A) - direction(A, center(c)) mod 360
By internal_angle_bisector_definition_v0_r on A, E, A, D we get Line(D, E) == internal_angle_bisector(A, D, A)
By internal_angle_bisector_definition_v0_r on H, D, H, C we get Line(C, D) == internal_angle_bisector(H, C, H)
By internal_angle_bisector_definition_v0_r on E, D, E, A we get Line(A, D) == internal_angle_bisector(E, A, E)
By internal_angle_bisector_definition_v0_r on I, F, I, D we get Line(D, F) == internal_angle_bisector(I, D, I)
By internal_angle_bisector_definition_v0_r on E, A, E, D we get Line(A, D) == internal_angle_bisector(E, D, E)
By internal_angle_bisector_definition_v0_r on F, D, F, I we get Line(D, I) == internal_angle_bisector(F, I, F)
By internal_angle_bisector_definition_v0_r on D, F, D, I we get Line(F, I) == internal_angle_bisector(D, I, D)
By reverse_direction on center(d), G we get 180 == direction(center(d), G) - direction(G, center(d)) mod 360
By anti_similar_triangle_basic_properties on E, C, D, F, I, B we get not_collinear(C, D, E), not_collinear(B, F, I), angle(E, C, D) == 0 - angle(F, I, B) mod 360, angle(C, D, E) == 0 - angle(I, B, F) mod 360, angle(D, E, C) == 0 - angle(B, F, I) mod 360, log(distance(C, E)) + log(distance(B, I)) == log(distance(F, I)) + log(distance(C, D)), log(distance(B, I)) + log(distance(D, E)) == log(distance(C, D)) + log(distance(B, F)), log(distance(B, F)) + log(distance(C, E)) == log(distance(D, E)) + log(distance(F, I))
By anti_similar_triangle_basic_properties on B, A, H, C, D, F we get not_collinear(A, B, H), not_collinear(C, D, F), angle(B, A, H) == 0 - angle(C, D, F) mod 360, angle(A, H, B) == 0 - angle(D, F, C) mod 360, angle(H, B, A) == 0 - angle(F, C, D) mod 360, log(distance(A, B)) + log(distance(D, F)) == log(distance(C, D)) + log(distance(A, H)), log(distance(A, H)) + log(distance(C, F)) == log(distance(D, F)) + log(distance(B, H)), log(distance(B, H)) + log(distance(C, D)) == log(distance(C, F)) + log(distance(A, B))
By anti_similar_triangle_basic_properties on A, F, H, F, B, I we get not_collinear(A, F, H), not_collinear(B, F, I), angle(A, F, H) == 0 - angle(F, B, I) mod 360, angle(F, H, A) == 0 - angle(B, I, F) mod 360, angle(H, A, F) == 0 - angle(I, F, B) mod 360, log(distance(A, F)) + log(distance(B, I)) == log(distance(B, F)) + log(distance(F, H)), log(distance(B, I)) + log(distance(A, H)) == log(distance(F, H)) + log(distance(F, I)), log(distance(A, H)) + log(distance(B, F)) == log(distance(F, I)) + log(distance(A, F))
By similar_triangle_basic_properties on F, H, A, B, F, I we get not_collinear(A, F, H), not_collinear(B, F, I), angle(B, F, I) == angle(F, H, A) mod 360, angle(F, I, B) == angle(H, A, F) mod 360, angle(A, F, H) == angle(I, B, F) mod 360, log(distance(B, F)) + log(distance(A, H)) == log(distance(F, H)) + log(distance(F, I)), log(distance(A, H)) + log(distance(B, I)) == log(distance(F, I)) + log(distance(A, F)), log(distance(A, F)) + log(distance(B, F)) == log(distance(B, I)) + log(distance(F, H))
By anti_similar_triangle_basic_properties on F, I, B, I, D, C we get not_collinear(B, F, I), not_collinear(C, D, I), angle(F, I, B) == 0 - angle(I, D, C) mod 360, angle(I, B, F) == 0 - angle(D, C, I) mod 360, angle(B, F, I) == 0 - angle(C, I, D) mod 360, log(distance(D, I)) + log(distance(B, I)) == log(distance(F, I)) + log(distance(C, D)), log(distance(B, I)) + log(distance(C, I)) == log(distance(C, D)) + log(distance(B, F)), log(distance(B, F)) + log(distance(D, I)) == log(distance(C, I)) + log(distance(F, I))
By similar_triangle_basic_properties on B, I, F, A, D, F we get not_collinear(B, F, I), not_collinear(A, D, F), angle(A, D, F) == angle(B, I, F) mod 360, angle(D, F, A) == angle(I, F, B) mod 360, angle(F, A, D) == angle(F, B, I) mod 360, log(distance(A, D)) + log(distance(F, I)) == log(distance(B, I)) + log(distance(D, F)), log(distance(D, F)) + log(distance(B, F)) == log(distance(F, I)) + log(distance(A, F)), log(distance(A, F)) + log(distance(B, I)) == log(distance(B, F)) + log(distance(A, D))
By similar_triangle_basic_properties on B, C, A, D, A, C we get not_collinear(A, B, C), not_collinear(A, C, D), angle(B, C, A) == angle(D, A, C) mod 360, angle(A, C, D) == angle(C, A, B) mod 360, angle(A, B, C) == angle(C, D, A) mod 360, log(distance(A, D)) + log(distance(A, C)) == log(distance(B, C)) + log(distance(A, C)), log(distance(A, C)) + log(distance(A, B)) == log(distance(A, C)) + log(distance(C, D)), log(distance(A, B)) + log(distance(A, D)) == log(distance(C, D)) + log(distance(B, C))
By anti_similar_triangle_basic_properties on B, F, I, B, I, F we get not_collinear(B, F, I), not_collinear(B, F, I), angle(B, F, I) == 0 - angle(B, I, F) mod 360, angle(F, I, B) == 0 - angle(I, F, B) mod 360, angle(I, B, F) == 0 - angle(F, B, I) mod 360, log(distance(B, F)) + log(distance(F, I)) == log(distance(B, I)) + log(distance(F, I)), log(distance(F, I)) + log(distance(B, F)) == log(distance(F, I)) + log(distance(B, I)), log(distance(B, F)) + log(distance(B, F)) == log(distance(B, I)) + log(distance(B, I))
By similar_triangle_basic_properties on B, F, I, A, F, D we get not_collinear(B, F, I), not_collinear(A, D, F), angle(A, F, D) == angle(B, F, I) mod 360, angle(F, D, A) == angle(F, I, B) mod 360, angle(D, A, F) == angle(I, B, F) mod 360, log(distance(A, F)) + log(distance(F, I)) == log(distance(B, F)) + log(distance(D, F)), log(distance(D, F)) + log(distance(B, I)) == log(distance(F, I)) + log(distance(A, D)), log(distance(A, D)) + log(distance(B, F)) == log(distance(B, I)) + log(distance(A, F))
By anti_similar_triangle_basic_properties on F, B, I, I, C, D we get not_collinear(B, F, I), not_collinear(C, D, I), angle(F, B, I) == 0 - angle(I, C, D) mod 360, angle(B, I, F) == 0 - angle(C, D, I) mod 360, angle(I, F, B) == 0 - angle(D, I, C) mod 360, log(distance(B, F)) + log(distance(C, D)) == log(distance(C, I)) + log(distance(B, I)), log(distance(B, I)) + log(distance(D, I)) == log(distance(C, D)) + log(distance(F, I)), log(distance(D, I)) + log(distance(B, F)) == log(distance(F, I)) + log(distance(C, I))
By similar_triangle_basic_properties on F, B, I, C, D, E we get not_collinear(B, F, I), not_collinear(C, D, E), angle(C, D, E) == angle(F, B, I) mod 360, angle(B, I, F) == angle(D, E, C) mod 360, angle(E, C, D) == angle(I, F, B) mod 360, log(distance(B, F)) + log(distance(D, E)) == log(distance(C, D)) + log(distance(B, I)), log(distance(B, I)) + log(distance(C, E)) == log(distance(D, E)) + log(distance(F, I)), log(distance(C, E)) + log(distance(B, F)) == log(distance(F, I)) + log(distance(C, D))
By anti_similar_triangle_basic_properties on F, A, D, I, B, F we get not_collinear(A, D, F), not_collinear(B, F, I), angle(F, A, D) == 0 - angle(I, B, F) mod 360, angle(A, D, F) == 0 - angle(B, F, I) mod 360, angle(D, F, A) == 0 - angle(F, I, B) mod 360, log(distance(A, F)) + log(distance(B, F)) == log(distance(B, I)) + log(distance(A, D)), log(distance(A, D)) + log(distance(F, I)) == log(distance(B, F)) + log(distance(D, F)), log(distance(D, F)) + log(distance(B, I)) == log(distance(F, I)) + log(distance(A, F))
By concyclic_definition_1 on C, F, B, H we get Circle(B, C, F) == Circle(B, F, H)
By isosceles_triangle_properties on center(d), A, F we get distance(A, center(d)) == distance(F, center(d)), angle(A, F, center(d)) == angle(center(d), A, F) mod 360
By concyclic_definition_1 on H, B, C, F we get Circle(B, C, F) == Circle(B, C, H)
By anti_similar_triangle_basic_properties on F, D, A, I, F, B we get not_collinear(A, D, F), not_collinear(B, F, I), angle(F, D, A) == 0 - angle(I, F, B) mod 360, angle(D, A, F) == 0 - angle(F, B, I) mod 360, angle(A, F, D) == 0 - angle(B, I, F) mod 360, log(distance(D, F)) + log(distance(B, F)) == log(distance(F, I)) + log(distance(A, D)), log(distance(A, D)) + log(distance(B, I)) == log(distance(B, F)) + log(distance(A, F)), log(distance(A, F)) + log(distance(F, I)) == log(distance(B, I)) + log(distance(D, F))
By similar_triangle_basic_properties on D, C, B, B, A, D we get not_collinear(B, C, D), not_collinear(A, B, D), angle(B, A, D) == angle(D, C, B) mod 360, angle(A, D, B) == angle(C, B, D) mod 360, angle(B, D, C) == angle(D, B, A) mod 360, log(distance(A, B)) + log(distance(B, C)) == log(distance(C, D)) + log(distance(A, D)), log(distance(A, D)) + log(distance(B, D)) == log(distance(B, C)) + log(distance(B, D)), log(distance(B, D)) + log(distance(A, B)) == log(distance(B, D)) + log(distance(C, D))
By similar_triangle_basic_properties on A, B, D, C, D, B we get not_collinear(A, B, D), not_collinear(B, C, D), angle(A, B, D) == angle(C, D, B) mod 360, angle(B, D, A) == angle(D, B, C) mod 360, angle(B, C, D) == angle(D, A, B) mod 360, log(distance(A, B)) + log(distance(B, D)) == log(distance(C, D)) + log(distance(B, D)), log(distance(B, D)) + log(distance(A, D)) == log(distance(B, D)) + log(distance(B, C)), log(distance(A, D)) + log(distance(C, D)) == log(distance(B, C)) + log(distance(A, B))
By similar_triangle_basic_properties on F, I, B, D, I, C we get not_collinear(B, F, I), not_collinear(C, D, I), angle(D, I, C) == angle(F, I, B) mod 360, angle(I, B, F) == angle(I, C, D) mod 360, angle(B, F, I) == angle(C, D, I) mod 360, log(distance(D, I)) + log(distance(B, I)) == log(distance(F, I)) + log(distance(C, I)), log(distance(B, I)) + log(distance(C, D)) == log(distance(C, I)) + log(distance(B, F)), log(distance(B, F)) + log(distance(D, I)) == log(distance(C, D)) + log(distance(F, I))
By isosceles_triangle_properties on center(c), A, E we get distance(A, center(c)) == distance(E, center(c)), angle(A, E, center(c)) == angle(center(c), A, E) mod 360
By concyclic_definition_1 on C, B, H, F we get Circle(B, C, H) == Circle(B, F, H)
By concyclic_definition_1 on C, H, F, B we get Circle(B, F, H) == Circle(C, F, H)
By concyclic_definition_1 on B, F, C, H we get Circle(B, C, F) == Circle(C, F, H)
By anti_similar_triangle_basic_properties on F, A, H, B, F, I we get not_collinear(A, F, H), not_collinear(B, F, I), angle(F, A, H) == 0 - angle(B, F, I) mod 360, angle(A, H, F) == 0 - angle(F, I, B) mod 360, angle(H, F, A) == 0 - angle(I, B, F) mod 360, log(distance(A, F)) + log(distance(F, I)) == log(distance(B, F)) + log(distance(A, H)), log(distance(A, H)) + log(distance(B, I)) == log(distance(F, I)) + log(distance(F, H)), log(distance(B, I)) + log(distance(A, F)) == log(distance(F, H)) + log(distance(B, F))
By isosceles_triangle_properties on center(d), H, D we get distance(D, center(d)) == distance(H, center(d)), angle(H, D, center(d)) == angle(center(d), H, D) mod 360
By isosceles_triangle_properties on center(d), A, D we get distance(A, center(d)) == distance(D, center(d)), angle(A, D, center(d)) == angle(center(d), A, D) mod 360
By isosceles_triangle_properties on center(d), D, G we get distance(D, center(d)) == distance(G, center(d)), angle(D, G, center(d)) == angle(center(d), D, G) mod 360
By anti_similar_triangle_basic_properties on F, B, I, E, D, C we get not_collinear(B, F, I), not_collinear(C, D, E), angle(F, B, I) == 0 - angle(E, D, C) mod 360, angle(B, I, F) == 0 - angle(D, C, E) mod 360, angle(I, F, B) == 0 - angle(C, E, D) mod 360, log(distance(B, F)) + log(distance(C, D)) == log(distance(D, E)) + log(distance(B, I)), log(distance(B, I)) + log(distance(C, E)) == log(distance(C, D)) + log(distance(F, I)), log(distance(C, E)) + log(distance(B, F)) == log(distance(F, I)) + log(distance(D, E))
By similar_triangle_basic_properties on B, I, F, F, A, H we get not_collinear(B, F, I), not_collinear(A, F, H), angle(B, I, F) == angle(F, A, H) mod 360, angle(A, H, F) == angle(I, F, B) mod 360, angle(F, B, I) == angle(H, F, A) mod 360, log(distance(A, F)) + log(distance(F, I)) == log(distance(B, I)) + log(distance(A, H)), log(distance(A, H)) + log(distance(B, F)) == log(distance(F, I)) + log(distance(F, H)), log(distance(B, F)) + log(distance(A, F)) == log(distance(F, H)) + log(distance(B, I))
By similar_triangle_basic_properties on C, I, D, B, I, F we get not_collinear(C, D, I), not_collinear(B, F, I), angle(B, I, F) == angle(C, I, D) mod 360, angle(I, D, C) == angle(I, F, B) mod 360, angle(D, C, I) == angle(F, B, I) mod 360, log(distance(B, I)) + log(distance(D, I)) == log(distance(C, I)) + log(distance(F, I)), log(distance(D, I)) + log(distance(B, F)) == log(distance(F, I)) + log(distance(C, D)), log(distance(B, F)) + log(distance(C, I)) == log(distance(C, D)) + log(distance(B, I))
By isosceles_triangle_properties on center(c), E, A we get distance(A, center(c)) == distance(E, center(c)), angle(E, A, center(c)) == angle(center(c), E, A) mod 360
By isosceles_triangle_properties on center(c), B, E we get distance(B, center(c)) == distance(E, center(c)), angle(B, E, center(c)) == angle(center(c), B, E) mod 360
By isosceles_triangle_properties on center(c), E, G we get distance(E, center(c)) == distance(G, center(c)), angle(E, G, center(c)) == angle(center(c), E, G) mod 360
By isosceles_triangle_properties on center(c), B, A we get distance(A, center(c)) == distance(B, center(c)), angle(B, A, center(c)) == angle(center(c), B, A) mod 360
By isosceles_triangle_properties on center(d), G, A we get distance(A, center(d)) == distance(G, center(d)), angle(G, A, center(d)) == angle(center(d), G, A) mod 360
By isosceles_triangle_properties on center(d), D, A we get distance(A, center(d)) == distance(D, center(d)), angle(D, A, center(d)) == angle(center(d), D, A) mod 360
By isosceles_triangle_properties on center(c), G, B we get distance(B, center(c)) == distance(G, center(c)), angle(G, B, center(c)) == angle(center(c), G, B) mod 360
By concyclic_definition_1 on B, H, C, F we get Circle(B, C, H) == Circle(C, F, H)
By anti_similar_triangle_basic_properties on B, H, A, C, F, D we get not_collinear(A, B, H), not_collinear(C, D, F), angle(B, H, A) == 0 - angle(C, F, D) mod 360, angle(H, A, B) == 0 - angle(F, D, C) mod 360, angle(A, B, H) == 0 - angle(D, C, F) mod 360, log(distance(B, H)) + log(distance(D, F)) == log(distance(C, F)) + log(distance(A, H)), log(distance(A, H)) + log(distance(C, D)) == log(distance(D, F)) + log(distance(A, B)), log(distance(A, B)) + log(distance(C, F)) == log(distance(C, D)) + log(distance(B, H))
By similar_triangle_basic_properties on B, F, I, D, C, E we get not_collinear(B, F, I), not_collinear(C, D, E), angle(B, F, I) == angle(D, C, E) mod 360, angle(C, E, D) == angle(F, I, B) mod 360, angle(E, D, C) == angle(I, B, F) mod 360, log(distance(B, F)) + log(distance(C, E)) == log(distance(C, D)) + log(distance(F, I)), log(distance(C, E)) + log(distance(B, I)) == log(distance(F, I)) + log(distance(D, E)), log(distance(B, I)) + log(distance(C, D)) == log(distance(D, E)) + log(distance(B, F))
By isosceles_triangle_properties on center(d), G, D we get distance(D, center(d)) == distance(G, center(d)), angle(G, D, center(d)) == angle(center(d), G, D) mod 360
By isosceles_triangle_properties on center(d), D, F we get distance(D, center(d)) == distance(F, center(d)), angle(D, F, center(d)) == angle(center(d), D, F) mod 360
By isosceles_triangle_properties on center(d), F, H we get distance(F, center(d)) == distance(H, center(d)), angle(F, H, center(d)) == angle(center(d), F, H) mod 360
By isosceles_triangle_properties on center(d), H, F we get distance(F, center(d)) == distance(H, center(d)), angle(H, F, center(d)) == angle(center(d), H, F) mod 360
By isosceles_triangle_properties on center(d), A, G we get distance(A, center(d)) == distance(G, center(d)), angle(A, G, center(d)) == angle(center(d), A, G) mod 360
By isosceles_triangle_properties on center(c), A, B we get distance(A, center(c)) == distance(B, center(c)), angle(A, B, center(c)) == angle(center(c), A, B) mod 360
By isosceles_triangle_properties on center(d), G, F we get distance(F, center(d)) == distance(G, center(d)), angle(G, F, center(d)) == angle(center(d), G, F) mod 360
By isosceles_triangle_properties on center(d), F, D we get distance(D, center(d)) == distance(F, center(d)), angle(F, D, center(d)) == angle(center(d), F, D) mod 360
By isosceles_triangle_properties on center(d), A, H we get distance(A, center(d)) == distance(H, center(d)), angle(A, H, center(d)) == angle(center(d), A, H) mod 360
By isosceles_triangle_properties on center(d), F, G we get distance(F, center(d)) == distance(G, center(d)), angle(F, G, center(d)) == angle(center(d), F, G) mod 360
By isosceles_triangle_properties on center(d), H, G we get distance(G, center(d)) == distance(H, center(d)), angle(H, G, center(d)) == angle(center(d), H, G) mod 360
By isosceles_triangle_properties on center(d), G, H we get distance(G, center(d)) == distance(H, center(d)), angle(G, H, center(d)) == angle(center(d), G, H) mod 360
By isosceles_triangle_properties on center(d), F, A we get distance(A, center(d)) == distance(F, center(d)), angle(F, A, center(d)) == angle(center(d), F, A) mod 360
By isosceles_triangle_properties on center(c), B, G we get distance(B, center(c)) == distance(G, center(c)), angle(B, G, center(c)) == angle(center(c), B, G) mod 360
By isosceles_triangle_properties on center(d), D, H we get distance(D, center(d)) == distance(H, center(d)), angle(D, H, center(d)) == angle(center(d), D, H) mod 360
By isosceles_triangle_properties on center(c), G, A we get distance(A, center(c)) == distance(G, center(c)), angle(G, A, center(c)) == angle(center(c), G, A) mod 360
By isosceles_triangle_properties on center(c), E, B we get distance(B, center(c)) == distance(E, center(c)), angle(E, B, center(c)) == angle(center(c), E, B) mod 360
By isosceles_triangle_properties on center(c), A, G we get distance(A, center(c)) == distance(G, center(c)), angle(A, G, center(c)) == angle(center(c), A, G) mod 360
By isosceles_triangle_properties on center(c), G, E we get distance(E, center(c)) == distance(G, center(c)), angle(G, E, center(c)) == angle(center(c), G, E) mod 360
By isosceles_triangle_properties on center(d), H, A we get distance(A, center(d)) == distance(H, center(d)), angle(H, A, center(d)) == angle(center(d), H, A) mod 360
By anti_similar_triangle_basic_properties on B, F, C, F, B, H we get not_collinear(B, C, F), not_collinear(B, F, H), angle(B, F, C) == 0 - angle(F, B, H) mod 360, angle(F, C, B) == 0 - angle(B, H, F) mod 360, angle(C, B, F) == 0 - angle(H, F, B) mod 360, log(distance(B, F)) + log(distance(B, H)) == log(distance(B, F)) + log(distance(C, F)), log(distance(B, H)) + log(distance(B, C)) == log(distance(C, F)) + log(distance(F, H)), log(distance(B, C)) + log(distance(B, F)) == log(distance(F, H)) + log(distance(B, F))
By perpendicular_bisector_sufficient_conditions on A, H, F, center(d) we get Line(F, center(d)) == perpendicular_bisector(A, H)
By perpendicular_bisector_sufficient_conditions on F, D, center(d), A we get Line(A, center(d)) == perpendicular_bisector(D, F)
By power_of_a_point_definition on I, D, F, d we get log(power_of_a_point(I, d)) == log(distance(D, I)) + log(distance(F, I))
By power_of_a_point_definition on C, D, H, d we get log(power_of_a_point(C, d)) == log(distance(C, D)) + log(distance(C, H))
By anti_similar_triangle_basic_properties on F, H, C, B, C, H we get not_collinear(C, F, H), not_collinear(B, C, H), angle(F, H, C) == 0 - angle(B, C, H) mod 360, angle(H, C, F) == 0 - angle(C, H, B) mod 360, angle(C, F, H) == 0 - angle(H, B, C) mod 360, log(distance(B, C)) + log(distance(C, H)) == log(distance(F, H)) + log(distance(C, H)), log(distance(C, H)) + log(distance(B, H)) == log(distance(C, H)) + log(distance(C, F)), log(distance(B, H)) + log(distance(F, H)) == log(distance(C, F)) + log(distance(B, C))
By anti_similar_triangle_basic_properties on C, H, F, H, C, B we get not_collinear(C, F, H), not_collinear(B, C, H), angle(C, H, F) == 0 - angle(H, C, B) mod 360, angle(H, F, C) == 0 - angle(C, B, H) mod 360, angle(F, C, H) == 0 - angle(B, H, C) mod 360, log(distance(C, H)) + log(distance(B, C)) == log(distance(C, H)) + log(distance(F, H)), log(distance(B, C)) + log(distance(C, F)) == log(distance(F, H)) + log(distance(B, H)), log(distance(B, H)) + log(distance(C, H)) == log(distance(C, F)) + log(distance(C, H))
By line_intersection_definition on C, Line(A, C), j we get C == line_intersection(j, Line(A, C))
By line_intersection_definition on H, h, Line(B, H) we get H == line_intersection(h, Line(B, H))
By line_intersection_definition on D, i, Line(B, D) we get D == line_intersection(i, Line(B, D))
By line_intersection_definition on A, Line(A, C), Line(A, H) we get A == line_intersection(Line(A, C), Line(A, H))
By line_intersection_definition on A, Line(A, C), i we get A == line_intersection(i, Line(A, C))
By line_intersection_definition on A, Line(A, C), Line(A, G) we get A == line_intersection(Line(A, C), Line(A, G))
By line_intersection_definition on F, Line(C, F), k we get F == line_intersection(k, Line(C, F))
By line_intersection_definition on C, h, Line(C, F) we get C == line_intersection(h, Line(C, F))
By perpendicular_line_definition on A, Line(A, H), Line(F, center(d)) we get Line(A, H) == perpendicular_line(A, Line(F, center(d)))
By median_definition on A, D, F, Line(A, center(d)) we get median(A, D, F) == Line(A, center(d))
By line_intersection_definition on B, f, Line(B, D) we get B == line_intersection(f, Line(B, D))
By line_intersection_definition on B, Line(B, E), Line(B, H) we get B == line_intersection(Line(B, E), Line(B, H))
By line_intersection_definition on C, Line(A, C), g we get C == line_intersection(g, Line(A, C))
By perpendicular_line_definition on D, k, Line(A, center(d)) we get k == perpendicular_line(D, Line(A, center(d)))
By line_intersection_definition on C, j, Line(C, F) we get C == line_intersection(j, Line(C, F))
By perpendicular_line_definition on center(d), Line(A, center(d)), k we get Line(A, center(d)) == perpendicular_line(center(d), k)
By line_intersection_definition on C, Line(A, C), h we get C == line_intersection(h, Line(A, C))
By line_intersection_definition on C, Line(C, F), g we get C == line_intersection(g, Line(C, F))
By line_intersection_definition on B, Line(B, H), Line(B, G) we get B == line_intersection(Line(B, G), Line(B, H))
By perpendicular_line_definition on I, k, Line(A, center(d)) we get k == perpendicular_line(I, Line(A, center(d)))
By line_intersection_definition on B, g, Line(B, H) we get B == line_intersection(g, Line(B, H))
By line_intersection_definition on A, f, Line(A, C) we get A == line_intersection(f, Line(A, C))
By line_intersection_definition on F, Line(C, F), Line(F, H) we get F == line_intersection(Line(C, F), Line(F, H))
By perpendicular_line_definition on center(d), Line(F, center(d)), Line(A, H) we get Line(F, center(d)) == perpendicular_line(center(d), Line(A, H))
By line_intersection_definition on B, Line(B, D), Line(B, E) we get B == line_intersection(Line(B, D), Line(B, E))
By line_intersection_definition on D, h, Line(B, D) we get D == line_intersection(h, Line(B, D))
By perpendicular_line_definition on A, Line(A, center(d)), k we get Line(A, center(d)) == perpendicular_line(A, k)
By line_intersection_definition on B, Line(B, D), g we get B == line_intersection(g, Line(B, D))
By line_intersection_definition on D, Line(B, D), k we get D == line_intersection(k, Line(B, D))
By perpendicular_line_definition on F, Line(F, center(d)), Line(A, H) we get Line(F, center(d)) == perpendicular_line(F, Line(A, H))
By perpendicular_line_definition on H, Line(A, H), Line(F, center(d)) we get Line(A, H) == perpendicular_line(H, Line(F, center(d)))
By median_definition on F, H, A, Line(F, center(d)) we get median(F, A, H) == Line(F, center(d))
By line_intersection_definition on H, Line(B, H), Line(A, H) we get H == line_intersection(Line(A, H), Line(B, H))
By line_intersection_definition on B, Line(B, H), f we get B == line_intersection(f, Line(B, H))
By line_intersection_definition on F, Line(C, F), Line(F, G) we get F == line_intersection(Line(C, F), Line(F, G))
By line_intersection_definition on D, Line(B, D), Line(D, G) we get D == line_intersection(Line(B, D), Line(D, G))
By line_intersection_definition on H, Line(F, H), Line(B, H) we get H == line_intersection(Line(B, H), Line(F, H))
By perpendicular_line_definition on F, k, Line(A, center(d)) we get k == perpendicular_line(F, Line(A, center(d)))
By line_intersection_definition on H, Line(G, H), Line(B, H) we get H == line_intersection(Line(B, H), Line(G, H))
By line_intersection_definition on B, Line(B, G), Line(B, D) we get B == line_intersection(Line(B, D), Line(B, G))
By line_intersection_definition on F, f, Line(C, F) we get F == line_intersection(f, Line(C, F))
By perpendicular_direction_conditions_v0 on E, C, A, center(d) we get perpendicular(Line(C, E), Line(A, center(d)))
By between_imply_not_between on F, midpoint(D, F), D we get collinear_and_not_between(D, F, midpoint(D, F))
By between_imply_not_between on D, midpoint(D, F), F we get collinear_and_not_between(F, D, midpoint(D, F))
By between_imply_not_between on H, midpoint(A, H), A we get collinear_and_not_between(A, H, midpoint(A, H))
By between_imply_not_between on A, midpoint(A, H), H we get collinear_and_not_between(H, A, midpoint(A, H))
By parallel_line_definition on F, k, j we get k == parallel_line(F, j)
By parallel_line_definition on E, j, k we get j == parallel_line(E, k)
By parallel_line_definition on C, j, k we get j == parallel_line(C, k)
By parallel_line_definition on D, k, j we get k == parallel_line(D, j)
By parallel_line_definition on I, k, j we get k == parallel_line(I, j)
By in_imply_collinear on midpoint(D, F), center(d), A we get collinear(A, center(d), midpoint(D, F))
By parallelogram_parallel_definition on I, D, E, C we get parallelogram(C, E, D, I)
By in_imply_collinear on midpoint(A, H), center(d), F we get collinear(F, center(d), midpoint(A, H))
By similar_triangle_basic_properties on B, G, F, E, G, D we get not_collinear(B, F, G), not_collinear(D, E, G), angle(B, G, F) == angle(E, G, D) mod 360, angle(G, D, E) == angle(G, F, B) mod 360, angle(D, E, G) == angle(F, B, G) mod 360, log(distance(B, G)) + log(distance(D, G)) == log(distance(E, G)) + log(distance(F, G)), log(distance(D, G)) + log(distance(B, F)) == log(distance(F, G)) + log(distance(D, E)), log(distance(B, F)) + log(distance(E, G)) == log(distance(D, E)) + log(distance(B, G))
By parallel_line_angles_reverse_v0 on D, F, C, E we get angle(D, F, C) == angle(E, C, F) mod 360
By parallel_line_angles_reverse_v0 on E, C, F, I we get angle(E, C, F) == angle(I, F, C) mod 360
By parallelogram_parallel_definition on D, E, C, I we get parallelogram(C, E, D, I)
By line_inequality on Line(E, center(c)), Line(C, F), E we get Line(C, F) != Line(E, center(c))
By line_inequality on Line(H, center(d)), Line(B, D), H we get Line(B, D) != Line(H, center(d))
By parallelogram_parallel_definition on E, C, I, D we get parallelogram(C, E, D, I)
By line_inequality on Line(E, center(c)), Line(B, D), E we get Line(B, D) != Line(E, center(c))
By parallelogram_parallel_definition on C, E, D, I we get parallelogram(C, E, D, I)
By line_inequality on Line(E, center(c)), Line(B, H), E we get Line(B, H) != Line(E, center(c))
By parallelogram_parallel_definition on E, D, I, C we get parallelogram(C, E, D, I)
By parallelogram_parallel_definition on D, I, C, E we get parallelogram(C, E, D, I)
By line_inequality on Line(A, C), Line(B, D), A we get Line(A, C) != Line(B, D)
By similar_triangle_basic_properties on G, E, D, G, B, F we get not_collinear(D, E, G), not_collinear(B, F, G), angle(G, B, F) == angle(G, E, D) mod 360, angle(B, F, G) == angle(E, D, G) mod 360, angle(D, G, E) == angle(F, G, B) mod 360, log(distance(B, G)) + log(distance(D, E)) == log(distance(E, G)) + log(distance(B, F)), log(distance(B, F)) + log(distance(D, G)) == log(distance(D, E)) + log(distance(F, G)), log(distance(D, G)) + log(distance(B, G)) == log(distance(F, G)) + log(distance(E, G))
By parallelogram_parallel_definition on I, C, E, D we get parallelogram(C, E, D, I)
By line_inequality on Line(H, center(d)), Line(A, C), H we get Line(A, C) != Line(H, center(d))
By line_circle_intersection_has_at_most_two_points_0 on D, E, A, Circle(C, D, E) we get A not in Circle(C, D, E)
By line_inequality on Line(A, center(c)), Line(C, F), A we get Line(C, F) != Line(A, center(c))
By line_inequality on Line(B, center(c)), Line(A, C), B we get Line(A, C) != Line(B, center(c))
By line_circle_intersection_has_at_most_two_points_0 on C, D, H, Circle(C, D, E) we get H not in Circle(C, D, E)
By double_perpendicular_and_parallel_v0_r on k, Line(A, center(d)), j we get perpendicular(j, Line(A, center(d)))
By line_inequality on Line(B, D), Line(C, F), D we get Line(B, D) != Line(C, F)
By line_inequality on Line(G, center(d)), Line(C, F), G we get Line(C, F) != Line(G, center(d))
By line_inequality on Line(A, C), Line(B, H), C we get Line(A, C) != Line(B, H)
By line_inequality on Line(A, center(c)), Line(B, D), A we get Line(B, D) != Line(A, center(c))
By parallelogram_parallel_definition on C, I, D, E we get parallelogram(C, E, D, I)
By line_inequality on Line(G, center(c)), Line(B, H), G we get Line(B, H) != Line(G, center(c))
By line_inequality on Line(F, center(d)), Line(A, C), F we get Line(A, C) != Line(F, center(d))
By line_inequality on Line(A, center(d)), Line(B, H), A we get Line(B, H) != Line(A, center(d))
By line_circle_intersection_has_at_most_two_points_0 on B, F, A, Circle(B, C, F) we get A not in Circle(B, C, F)
By line_inequality on Line(C, F), Line(B, H), C we get Line(B, H) != Line(C, F)
By line_inequality on Line(H, center(d)), Line(C, F), H we get Line(C, F) != Line(H, center(d))
By line_inequality on Line(G, center(c)), Line(C, F), G we get Line(C, F) != Line(G, center(c))
By line_inequality on Line(D, center(d)), Line(A, C), D we get Line(A, C) != Line(D, center(d))
By line_inequality on Line(F, center(d)), Line(B, H), F we get Line(B, H) != Line(F, center(d))
By line_inequality on Line(A, C), Line(C, F), A we get Line(A, C) != Line(C, F)
By line_inequality on Line(A, center(d)), Line(C, F), A we get Line(C, F) != Line(A, center(d))
By line_circle_intersection_has_at_most_two_points_0 on D, C, H, Circle(C, D, I) we get H not in Circle(C, D, I)
By line_circle_intersection_has_at_most_two_points_0 on B, C, I, Circle(B, C, F) we get I not in Circle(B, C, F)
By line_inequality on Line(G, center(d)), Line(A, C), G we get Line(A, C) != Line(G, center(d))
By line_inequality on Line(B, H), Line(B, D), H we get Line(B, D) != Line(B, H)
By line_circle_intersection_has_at_most_two_points_0 on I, C, B, Circle(C, D, I) we get B not in Circle(C, D, I)
By line_circle_intersection_has_at_most_two_points_0 on I, D, F, Circle(C, D, I) we get F not in Circle(C, D, I)
By line_inequality on Line(G, center(d)), Line(B, H), G we get Line(B, H) != Line(G, center(d))
By line_inequality on Line(A, center(c)), Line(B, H), A we get Line(B, H) != Line(A, center(c))
By line_inequality on Line(G, center(d)), Line(B, D), G we get Line(B, D) != Line(G, center(d))
By line_circle_intersection_has_at_most_two_points_0 on C, H, D, Circle(B, C, F) we get D not in Circle(B, C, F)
By line_inequality on Line(F, center(d)), Line(B, D), F we get Line(B, D) != Line(F, center(d))
By line_inequality on Line(B, center(c)), Line(C, F), B we get Line(C, F) != Line(B, center(c))
By line_circle_intersection_has_at_most_two_points_0 on H, A, midpoint(A, H), d we get midpoint(A, H) not in d
By line_inequality on Line(D, center(d)), Line(B, H), D we get Line(B, H) != Line(D, center(d))
By line_inequality on Line(E, center(c)), Line(A, C), E we get Line(A, C) != Line(E, center(c))
By line_inequality on Line(G, center(c)), Line(A, C), G we get Line(A, C) != Line(G, center(c))
By line_circle_intersection_has_at_most_two_points_0 on D, F, midpoint(D, F), d we get midpoint(D, F) not in d
By line_inequality on Line(G, center(c)), Line(B, D), G we get Line(B, D) != Line(G, center(c))
By line_inequality on Line(D, center(d)), Line(C, F), D we get Line(C, F) != Line(D, center(d))
By line_inequality on Line(A, center(d)), Line(B, D), A we get Line(B, D) != Line(A, center(d))
By power_of_a_point_in_circle on E, Circle(C, D, E) we get 0 == power_of_a_point(E, Circle(C, D, E))
By power_of_a_point_in_circle on H, Circle(B, C, F) we get 0 == power_of_a_point(H, Circle(B, C, F))
By internal_angle_bisector_definition_v0_r on D, center(d), F, A we get Line(A, center(d)) == internal_angle_bisector(D, A, F)
By perpendicular_lines_draw_intersection on k, Line(A, center(d)) we get exists(line_intersection(k, Line(A, center(d))))
By power_of_a_point_on_circle on F, Circle(B, C, F) we get 0 == power_of_a_point(F, Circle(B, C, F))
By log_of_2_times_distance on F, D, midpoint(A, H), A we get log(distance(D, F)) == 0.6931471805599453 + log(distance(A, midpoint(A, H)))
By power_of_a_point_on_circle on D, Circle(C, D, I) we get 0 == power_of_a_point(D, Circle(C, D, I))
By log_of_2_times_distance on D, F, F, midpoint(D, F) we get log(distance(D, F)) == 0.6931471805599453 + log(distance(F, midpoint(D, F)))
By log_of_2_times_distance on F, D, midpoint(D, F), D we get log(distance(D, F)) == 0.6931471805599453 + log(distance(D, midpoint(D, F)))
By collinear_definition on F, midpoint(D, F), D we get midpoint(D, F) in Line(D, F), D in Line(F, midpoint(D, F)), Line(D, F) == Line(F, midpoint(D, F)), 0 == 2 * angle(midpoint(D, F), F, D) mod 360
By power_of_a_point_on_circle on C, Circle(B, C, F) we get 0 == power_of_a_point(C, Circle(B, C, F))
By isosceles_triangle_altitude_v3 on midpoint(A, H), A, H we get identical(perpendicular_bisector(A, H), internal_angle_bisector(A, midpoint(A, H), H), perpendicular_line(midpoint(A, H), Line(A, H)))
By power_of_a_point_in_circle on C, Circle(C, D, I) we get 0 == power_of_a_point(C, Circle(C, D, I))
By power_of_a_point_on_circle on C, Circle(C, D, E) we get 0 == power_of_a_point(C, Circle(C, D, E))
By isosceles_triangle_midpoint on A, D, F we get midpoint(D, F) in median(A, D, F)
By collinear_definition on A, H, midpoint(A, H) we get H in Line(A, midpoint(A, H)), midpoint(A, H) in Line(A, H), Line(A, H) == Line(A, midpoint(A, H)), 0 == 2 * angle(H, A, midpoint(A, H)) mod 360
By isosceles_triangle_altitude_v1 on midpoint(D, F), D, F we get identical(perpendicular_bisector(D, F), internal_angle_bisector(D, midpoint(D, F), F), perpendicular_line(midpoint(D, F), Line(D, F)))
By log_of_2_times_distance on H, A, midpoint(D, F), F we get log(distance(A, H)) == 0.6931471805599453 + log(distance(F, midpoint(D, F)))
By perpendicular_bisector_properties on F, D we get perpendicular(Line(D, F), perpendicular_bisector(D, F)), midpoint(D, F) == line_intersection(Line(D, F), perpendicular_bisector(D, F))
By collinear_definition on F, D, midpoint(D, F) we get D in Line(F, midpoint(D, F)), midpoint(D, F) in Line(D, F), Line(D, F) == Line(F, midpoint(D, F)), 0 == 2 * angle(D, F, midpoint(D, F)) mod 360
By log_of_2_times_distance on H, A, A, midpoint(A, H) we get log(distance(A, H)) == 0.6931471805599453 + log(distance(A, midpoint(A, H)))
By power_of_a_point_on_circle on B, Circle(B, C, F) we get 0 == power_of_a_point(B, Circle(B, C, F))
By internal_angle_bisector_definition_v0_r on A, center(d), H, F we get Line(F, center(d)) == internal_angle_bisector(A, F, H)
By power_of_a_point_in_circle on I, Circle(C, D, I) we get 0 == power_of_a_point(I, Circle(C, D, I))
By isosceles_triangle_altitude_v3 on center(d), D, F we get identical(perpendicular_bisector(D, F), internal_angle_bisector(D, center(d), F), perpendicular_line(center(d), Line(D, F)))
By collinear_definition on A, midpoint(A, H), H we get midpoint(A, H) in Line(A, H), H in Line(A, midpoint(A, H)), Line(A, H) == Line(A, midpoint(A, H)), 0 == 2 * angle(midpoint(A, H), A, H) mod 360
By log_of_2_times_distance on H, A, H, midpoint(A, H) we get log(distance(A, H)) == 0.6931471805599453 + log(distance(H, midpoint(A, H)))
By perpendicular_bisector_properties on A, H we get perpendicular(Line(A, H), perpendicular_bisector(A, H)), midpoint(A, H) == line_intersection(Line(A, H), perpendicular_bisector(A, H))
By isosceles_triangle_altitude_v3 on midpoint(A, H), H, A we get identical(perpendicular_bisector(A, H), internal_angle_bisector(A, midpoint(A, H), H), perpendicular_line(midpoint(A, H), Line(A, H)))
By power_of_a_point_on_circle on D, Circle(C, D, E) we get 0 == power_of_a_point(D, Circle(C, D, E))
By isosceles_triangle_midpoint on F, H, A we get midpoint(A, H) in median(F, A, H)
By log_of_2_times_distance on H, A, D, midpoint(D, F) we get log(distance(A, H)) == 0.6931471805599453 + log(distance(D, midpoint(D, F)))
By collinear_definition on H, midpoint(A, H), A we get midpoint(A, H) in Line(A, H), A in Line(H, midpoint(A, H)), Line(A, H) == Line(H, midpoint(A, H)), 0 == 2 * angle(midpoint(A, H), H, A) mod 360
By collinear_definition on H, A, midpoint(A, H) we get A in Line(H, midpoint(A, H)), midpoint(A, H) in Line(A, H), Line(A, H) == Line(H, midpoint(A, H)), 0 == 2 * angle(A, H, midpoint(A, H)) mod 360
By collinear_definition on D, midpoint(D, F), F we get midpoint(D, F) in Line(D, F), F in Line(D, midpoint(D, F)), Line(D, F) == Line(D, midpoint(D, F)), 0 == 2 * angle(midpoint(D, F), D, F) mod 360
By collinear_definition on D, F, midpoint(D, F) we get F in Line(D, midpoint(D, F)), midpoint(D, F) in Line(D, F), Line(D, F) == Line(D, midpoint(D, F)), 0 == 2 * angle(F, D, midpoint(D, F)) mod 360
By draw_point_of_tangency on k, Circle(C, D, E) we get exists(line_circle_tangent_point(k, Circle(C, D, E)))
By log_of_2_times_distance on D, F, midpoint(A, H), H we get log(distance(D, F)) == 0.6931471805599453 + log(distance(H, midpoint(A, H)))
By isosceles_triangle_altitude_v2 on center(d), A, H we get identical(perpendicular_bisector(A, H), internal_angle_bisector(A, center(d), H), perpendicular_line(center(d), Line(A, H)))
By isosceles_triangle_altitude_v3 on midpoint(D, F), F, D we get identical(perpendicular_bisector(D, F), internal_angle_bisector(D, midpoint(D, F), F), perpendicular_line(midpoint(D, F), Line(D, F)))
By perpendicular_lines_draw_intersection on Line(F, center(d)), Line(A, H) we get exists(line_intersection(Line(A, H), Line(F, center(d))))
By isosceles_triangle_altitude_v2 on center(d), H, A we get identical(perpendicular_bisector(A, H), internal_angle_bisector(A, center(d), H), perpendicular_line(center(d), Line(A, H)))
By draw_point_of_tangency on j, Circle(C, D, I) we get exists(line_circle_tangent_point(j, Circle(C, D, I)))
By isosceles_triangle_altitude_v3 on center(d), A, H we get identical(perpendicular_bisector(A, H), internal_angle_bisector(A, center(d), H), perpendicular_line(center(d), Line(A, H)))
By isosceles_triangle_altitude_v3 on center(d), H, A we get identical(perpendicular_bisector(A, H), internal_angle_bisector(A, center(d), H), perpendicular_line(center(d), Line(A, H)))
By isosceles_triangle_altitude_v1 on midpoint(A, H), A, H we get identical(perpendicular_bisector(A, H), internal_angle_bisector(A, midpoint(A, H), H), perpendicular_line(midpoint(A, H), Line(A, H)))
By isosceles_triangle_altitude_v3 on center(d), F, D we get identical(perpendicular_bisector(D, F), internal_angle_bisector(D, center(d), F), perpendicular_line(center(d), Line(D, F)))
By isosceles_triangle_altitude_v3 on midpoint(D, F), D, F we get identical(perpendicular_bisector(D, F), internal_angle_bisector(D, midpoint(D, F), F), perpendicular_line(midpoint(D, F), Line(D, F)))
By isosceles_triangle_altitude_v1 on midpoint(A, H), H, A we get identical(perpendicular_bisector(A, H), internal_angle_bisector(A, midpoint(A, H), H), perpendicular_line(midpoint(A, H), Line(A, H)))
By isosceles_triangle_altitude_v2 on center(d), F, D we get identical(perpendicular_bisector(D, F), internal_angle_bisector(D, center(d), F), perpendicular_line(center(d), Line(D, F)))
By isosceles_triangle_altitude_v2 on center(d), D, F we get identical(perpendicular_bisector(D, F), internal_angle_bisector(D, center(d), F), perpendicular_line(center(d), Line(D, F)))
By isosceles_triangle_altitude_v1 on midpoint(D, F), F, D we get identical(perpendicular_bisector(D, F), internal_angle_bisector(D, midpoint(D, F), F), perpendicular_line(midpoint(D, F), Line(D, F)))
By sas_congruence on E, D, I, I, C, E we get congruent_triangles(C, E, I, D, I, E)
By isosceles_triangle_altitude_v3 on F, A, H we get identical(perpendicular_bisector(A, H), internal_angle_bisector(A, F, H), perpendicular_line(F, Line(A, H)))
By isosceles_triangle_properties on midpoint(D, F), D, F we get distance(D, midpoint(D, F)) == distance(F, midpoint(D, F)), angle(D, F, midpoint(D, F)) == angle(midpoint(D, F), D, F) mod 360
By altitude_definition on A, F, I, Line(A, center(d)) we get altitude(A, F, I) == Line(A, center(d))
By isosceles_triangle_properties on midpoint(D, F), F, D we get distance(D, midpoint(D, F)) == distance(F, midpoint(D, F)), angle(F, D, midpoint(D, F)) == angle(midpoint(D, F), F, D) mod 360
By isosceles_triangle_properties on midpoint(A, H), A, H we get distance(A, midpoint(A, H)) == distance(H, midpoint(A, H)), angle(A, H, midpoint(A, H)) == angle(midpoint(A, H), A, H) mod 360
By sas_congruence on I, D, E, E, C, I we get congruent_triangles(C, E, I, D, I, E)
By sas_similarity on E, C, I, I, D, E we get similar_triangles(C, E, I, D, I, E)
By altitude_definition on A, D, I, Line(A, center(d)) we get altitude(A, D, I) == Line(A, center(d))
By sas_congruence on E, C, I, I, D, E we get congruent_triangles(C, E, I, D, I, E)
By altitude_definition on A, D, F, Line(A, center(d)) we get altitude(A, D, F) == Line(A, center(d))
By isosceles_triangle_altitude_v3 on F, H, A we get identical(perpendicular_bisector(A, H), internal_angle_bisector(A, F, H), perpendicular_line(F, Line(A, H)))
By altitude_definition on F, H, A, Line(F, center(d)) we get altitude(F, A, H) == Line(F, center(d))
By power_of_a_point_tangent on I, D, Circle(C, D, E) we get 2 * log(distance(D, I)) == log(power_of_a_point(I, Circle(C, D, E)))
By sas_congruence on I, C, E, E, D, I we get congruent_triangles(C, E, I, D, I, E)
By collinear_definition on midpoint(D, F), F, D we get F in Line(D, midpoint(D, F)), D in Line(F, midpoint(D, F)), Line(D, midpoint(D, F)) == Line(F, midpoint(D, F)), 0 == 2 * angle(F, midpoint(D, F), D) mod 360
By collinear_definition on midpoint(A, H), H, A we get H in Line(A, midpoint(A, H)), A in Line(H, midpoint(A, H)), Line(A, midpoint(A, H)) == Line(H, midpoint(A, H)), 0 == 2 * angle(H, midpoint(A, H), A) mod 360
By sas_similarity on E, D, I, I, C, E we get similar_triangles(C, E, I, D, I, E)
By collinear_definition on midpoint(D, F), D, F we get D in Line(F, midpoint(D, F)), F in Line(D, midpoint(D, F)), Line(D, midpoint(D, F)) == Line(F, midpoint(D, F)), 0 == 2 * angle(D, midpoint(D, F), F) mod 360
By sas_similarity on I, C, E, E, D, I we get similar_triangles(C, E, I, D, I, E)
By collinear_definition on midpoint(A, H), A, H we get A in Line(H, midpoint(A, H)), H in Line(A, midpoint(A, H)), Line(A, midpoint(A, H)) == Line(H, midpoint(A, H)), 0 == 2 * angle(A, midpoint(A, H), H) mod 360
By sas_similarity on I, D, E, E, C, I we get similar_triangles(C, E, I, D, I, E)
By isosceles_triangle_properties on midpoint(A, H), H, A we get distance(A, midpoint(A, H)) == distance(H, midpoint(A, H)), angle(H, A, midpoint(A, H)) == angle(midpoint(A, H), H, A) mod 360
By power_of_a_point_tangent on F, D, Circle(C, D, E) we get 2 * log(distance(D, F)) == log(power_of_a_point(F, Circle(C, D, E)))
By power_of_a_point_tangent on E, C, Circle(C, D, I) we get 2 * log(distance(C, E)) == log(power_of_a_point(E, Circle(C, D, I)))
By isosceles_triangle_altitude_v3 on A, F, D we get identical(perpendicular_bisector(D, F), internal_angle_bisector(D, A, F), perpendicular_line(A, Line(D, F)))
By isosceles_triangle_altitude_v3 on A, D, F we get identical(perpendicular_bisector(D, F), internal_angle_bisector(D, A, F), perpendicular_line(A, Line(D, F)))
By triangle_homothety_v0 on C, E, D, F, I, B we get similar_triangles(B, F, I, D, C, E), concurrent(Line(B, D), Line(C, F), Line(E, I))
By triangle_homothety_v0 on D, C, E, B, F, I we get similar_triangles(B, F, I, D, C, E), concurrent(Line(B, D), Line(C, F), Line(E, I))
By triangle_homothety_v0 on E, D, C, I, B, F we get similar_triangles(B, F, I, D, C, E), concurrent(Line(B, D), Line(C, F), Line(E, I))
By triangle_homothety_v0 on B, F, I, D, C, E we get similar_triangles(B, F, I, D, C, E), concurrent(Line(B, D), Line(C, F), Line(E, I))
By triangle_homothety_v0 on B, I, F, D, E, C we get similar_triangles(B, F, I, D, C, E), concurrent(Line(B, D), Line(C, F), Line(E, I))
By triangle_homothety_v0 on C, D, E, F, B, I we get similar_triangles(B, F, I, D, C, E), concurrent(Line(B, D), Line(C, F), Line(E, I))
By triangle_homothety_v0 on D, E, C, B, I, F we get similar_triangles(B, F, I, D, C, E), concurrent(Line(B, D), Line(C, F), Line(E, I))
By triangle_homothety_v0 on I, F, B, E, C, D we get similar_triangles(B, F, I, D, C, E), concurrent(Line(B, D), Line(C, F), Line(E, I))
By triangle_homothety_v0 on I, B, F, E, D, C we get similar_triangles(B, F, I, D, C, E), concurrent(Line(B, D), Line(C, F), Line(E, I))
By triangle_homothety_v0 on E, C, D, I, F, B we get similar_triangles(B, F, I, D, C, E), concurrent(Line(B, D), Line(C, F), Line(E, I))
By triangle_homothety_v0 on F, I, B, C, E, D we get similar_triangles(B, F, I, D, C, E), concurrent(Line(B, D), Line(C, F), Line(E, I))
By triangle_homothety_v0 on F, B, I, C, D, E we get similar_triangles(B, F, I, D, C, E), concurrent(Line(B, D), Line(C, F), Line(E, I))
By between_implies_angles on F, midpoint(D, F), D we get 180 == angle(F, midpoint(D, F), D) mod 360, 0 == angle(midpoint(D, F), D, F) mod 360, 0 == angle(D, F, midpoint(D, F)) mod 360
By between_implies_angles on A, midpoint(A, H), H we get 180 == angle(A, midpoint(A, H), H) mod 360, 0 == angle(midpoint(A, H), H, A) mod 360, 0 == angle(H, A, midpoint(A, H)) mod 360
By between_implies_angles on H, midpoint(A, H), A we get 180 == angle(H, midpoint(A, H), A) mod 360, 0 == angle(midpoint(A, H), A, H) mod 360, 0 == angle(A, H, midpoint(A, H)) mod 360
By between_implies_angles on D, midpoint(D, F), F we get 180 == angle(D, midpoint(D, F), F) mod 360, 0 == angle(midpoint(D, F), F, D) mod 360, 0 == angle(F, D, midpoint(D, F)) mod 360
By line_intersection_definition on C, Line(A, C), Line(C, F) we get C == line_intersection(Line(A, C), Line(C, F))
By perpendicular_line_definition on midpoint(D, F), median(A, D, F), j we get median(A, D, F) == perpendicular_line(midpoint(D, F), j)
By perpendicular_line_definition on line_circle_tangent_point(j, Circle(C, D, I)), j, median(A, D, F) we get j == perpendicular_line(line_circle_tangent_point(j, Circle(C, D, I)), median(A, D, F))
By concurrent_sufficient_conditions on Line(A, C), Line(C, F), g we get concurrent(g, Line(A, C), Line(C, F))
By concurrent_sufficient_conditions on Line(A, C), Line(C, F), j we get concurrent(j, Line(A, C), Line(C, F))
By concurrent_sufficient_conditions on Line(B, D), Line(B, H), g we get concurrent(g, Line(B, D), Line(B, H))
By concurrent_sufficient_conditions on Line(B, H), Line(B, D), Line(B, G) we get concurrent(Line(B, D), Line(B, G), Line(B, H))
By concurrent_sufficient_conditions on Line(A, C), Line(C, F), h we get concurrent(h, Line(A, C), Line(C, F))
By concurrent_sufficient_conditions on Line(C, F), Line(A, C), j we get concurrent(j, Line(A, C), Line(C, F))
By line_intersection_definition on B, Line(B, H), Line(B, D) we get B == line_intersection(Line(B, D), Line(B, H))
By concurrent_sufficient_conditions on Line(B, D), Line(B, H), f we get concurrent(f, Line(B, D), Line(B, H))
By concurrent_sufficient_conditions on Line(B, H), Line(B, D), f we get concurrent(f, Line(B, D), Line(B, H))
By concurrent_sufficient_conditions on Line(B, H), Line(B, D), Line(B, E) we get concurrent(Line(B, D), Line(B, E), Line(B, H))
By concurrent_sufficient_conditions on Line(C, F), Line(A, C), h we get concurrent(h, Line(A, C), Line(C, F))
By perpendicular_line_definition on C, j, median(A, D, F) we get j == perpendicular_line(C, median(A, D, F))
By perpendicular_line_definition on E, j, median(A, D, F) we get j == perpendicular_line(E, median(A, D, F))
By perpendicular_line_definition on A, median(A, D, F), j we get median(A, D, F) == perpendicular_line(A, j)
By perpendicular_line_definition on center(d), median(A, D, F), j we get median(A, D, F) == perpendicular_line(center(d), j)
By concurrent_sufficient_conditions on Line(B, D), Line(B, H), Line(B, E) we get concurrent(Line(B, D), Line(B, E), Line(B, H))
By perpendicular_line_definition on line_circle_tangent_point(k, Circle(C, D, E)), k, median(A, D, F) we get k == perpendicular_line(line_circle_tangent_point(k, Circle(C, D, E)), median(A, D, F))
By concurrent_sufficient_conditions on Line(C, F), Line(A, C), g we get concurrent(g, Line(A, C), Line(C, F))
By concurrent_sufficient_conditions on Line(B, H), Line(B, D), g we get concurrent(g, Line(B, D), Line(B, H))
By perpendicular_line_definition on midpoint(A, H), Line(A, H), median(F, A, H) we get Line(A, H) == perpendicular_line(midpoint(A, H), median(F, A, H))
By perpendicular_line_definition on midpoint(D, F), k, median(A, D, F) we get k == perpendicular_line(midpoint(D, F), median(A, D, F))
By concurrent_sufficient_conditions on Line(B, D), Line(B, H), Line(B, G) we get concurrent(Line(B, D), Line(B, G), Line(B, H))
By line_unique_intersection_v1 on i, Line(A, H), A, midpoint(A, H) we get midpoint(A, H) not in i
By line_unique_intersection_v1 on f, k, F, midpoint(D, F) we get midpoint(D, F) not in f
By line_unique_intersection_v1 on Line(B, D), k, D, midpoint(D, F) we get midpoint(D, F) not in Line(B, D)
By line_unique_intersection_v1 on Line(F, H), Line(A, H), H, midpoint(A, H) we get midpoint(A, H) not in Line(F, H)
By line_unique_intersection_v1 on f, Line(A, H), A, midpoint(A, H) we get midpoint(A, H) not in f
By line_unique_intersection_v1 on median(F, A, H), Line(A, H), midpoint(A, H), H we get H not in median(F, A, H)
By line_unique_intersection_v1 on h, Line(A, H), H, midpoint(A, H) we get midpoint(A, H) not in h
By line_unique_intersection_v1 on Line(D, G), k, D, midpoint(D, F) we get midpoint(D, F) not in Line(D, G)
By line_unique_intersection_v1 on Line(G, H), Line(A, H), H, midpoint(A, H) we get midpoint(A, H) not in Line(G, H)
By line_unique_intersection_v1 on h, k, D, midpoint(D, F) we get midpoint(D, F) not in h
By line_unique_intersection_v1 on median(A, D, F), k, midpoint(D, F), F we get F not in median(A, D, F)
By line_unique_intersection_v1 on Line(F, H), k, F, midpoint(D, F) we get midpoint(D, F) not in Line(F, H)
By line_unique_intersection_v1 on Line(C, F), k, F, midpoint(D, F) we get midpoint(D, F) not in Line(C, F)
By line_unique_intersection_v1 on Line(F, G), k, F, midpoint(D, F) we get midpoint(D, F) not in Line(F, G)
By line_unique_intersection_v1 on median(F, A, H), Line(A, H), midpoint(A, H), A we get A not in median(F, A, H)
By line_unique_intersection_v1 on Line(B, H), Line(A, H), H, midpoint(A, H) we get midpoint(A, H) not in Line(B, H)
By line_unique_intersection_v1 on median(A, D, F), k, midpoint(D, F), D we get D not in median(A, D, F)
By line_unique_intersection_v1 on Line(A, G), Line(A, H), A, midpoint(A, H) we get midpoint(A, H) not in Line(A, G)
By line_unique_intersection_v1 on i, k, D, midpoint(D, F) we get midpoint(D, F) not in i
By line_unique_intersection_v1 on Line(A, C), Line(A, H), A, midpoint(A, H) we get midpoint(A, H) not in Line(A, C)
By same_angle_converse_v1 on D, midpoint(D, F), I, F we get collinear(D, I, midpoint(D, F))
By same_angle_converse_v0 on F, midpoint(D, F), I, D we get collinear(F, I, midpoint(D, F))
By perpendicular_direction_conditions_v0_r on midpoint(A, H), A, center(d), F we get 180 == 2 * direction(midpoint(A, H), A) - 2 * direction(center(d), F) mod 360
By same_angle_v0 on I, C, B, E we get angle(B, I, E) == angle(C, I, E) mod 360
By between_implies_orientation on A, F, midpoint(D, F), D we get orientation(A, F, midpoint(D, F)) == orientation(A, midpoint(D, F), D) mod 360, orientation(A, F, D) == orientation(A, F, midpoint(D, F)) mod 360
By same_angle_v3 on E, D, A, I we get angle(D, E, I) == angle(A, E, I) + 180 mod 360
By between_implies_orientation on F, H, midpoint(A, H), A we get orientation(A, F, midpoint(A, H)) == orientation(F, H, midpoint(A, H)) mod 360, orientation(A, F, H) == orientation(F, H, midpoint(A, H)) mod 360
By perpendicular_direction_conditions_v0_r on center(d), A, midpoint(D, F), F we get 180 == 2 * direction(center(d), A) - 2 * direction(midpoint(D, F), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(D, F), F, A, center(d) we get 180 == 2 * direction(midpoint(D, F), F) - 2 * direction(A, center(d)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, H), H, center(d), F we get 180 == 2 * direction(midpoint(A, H), H) - 2 * direction(center(d), F) mod 360
By between_implies_orientation on F, A, midpoint(A, H), H we get orientation(A, midpoint(A, H), F) == orientation(F, midpoint(A, H), H) mod 360, orientation(A, H, F) == orientation(A, midpoint(A, H), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, H), A, F, center(d) we get 180 == 2 * direction(midpoint(A, H), A) - 2 * direction(F, center(d)) mod 360
By projection_definition on F, midpoint(D, F), median(A, D, F) we get midpoint(D, F) == projection(F, median(A, D, F))
By perpendicular_direction_conditions_v0_r on center(d), A, midpoint(D, F), D we get 180 == 2 * direction(center(d), A) - 2 * direction(midpoint(D, F), D) mod 360
By projection_definition on F, midpoint(A, H), Line(A, H) we get midpoint(A, H) == projection(F, Line(A, H))
By perpendicular_direction_conditions_v0_r on F, center(d), midpoint(A, H), A we get 180 == 2 * direction(F, center(d)) - 2 * direction(midpoint(A, H), A) mod 360
By same_angle_v1 on I, F, D, E we get angle(D, I, E) == angle(F, I, E) mod 360
By collinear_and_not_between_implies_orientation on A, midpoint(D, F), D, F we get orientation(A, D, F) == orientation(A, D, midpoint(D, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, H), H, F, center(d) we get 180 == 2 * direction(midpoint(A, H), H) - 2 * direction(F, center(d)) mod 360
By perpendicular_direction_conditions_v0_r on A, center(d), midpoint(D, F), D we get 180 == 2 * direction(A, center(d)) - 2 * direction(midpoint(D, F), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(D, F), D, center(d), A we get 180 == 2 * direction(midpoint(D, F), D) - 2 * direction(center(d), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(D, F), F, center(d), A we get 180 == 2 * direction(midpoint(D, F), F) - 2 * direction(center(d), A) mod 360
By perpendicular_direction_conditions_v0_r on center(d), F, midpoint(A, H), H we get 180 == 2 * direction(center(d), F) - 2 * direction(midpoint(A, H), H) mod 360
By projection_definition on D, midpoint(D, F), median(A, D, F) we get midpoint(D, F) == projection(D, median(A, D, F))
By perpendicular_direction_conditions_v0_r on F, center(d), midpoint(A, H), H we get 180 == 2 * direction(F, center(d)) - 2 * direction(midpoint(A, H), H) mod 360
By between_implies_orientation on A, D, midpoint(D, F), F we get orientation(A, D, midpoint(D, F)) == orientation(A, midpoint(D, F), F) mod 360, orientation(A, D, F) == orientation(A, D, midpoint(D, F)) mod 360
By projection_definition on A, midpoint(A, H), median(F, A, H) we get midpoint(A, H) == projection(A, median(F, A, H))
By projection_definition on H, midpoint(A, H), median(F, A, H) we get midpoint(A, H) == projection(H, median(F, A, H))
By perpendicular_direction_conditions_v0_r on center(d), F, midpoint(A, H), A we get 180 == 2 * direction(center(d), F) - 2 * direction(midpoint(A, H), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(D, F), D, A, center(d) we get 180 == 2 * direction(midpoint(D, F), D) - 2 * direction(A, center(d)) mod 360
By perpendicular_direction_conditions_v0_r on A, center(d), midpoint(D, F), F we get 180 == 2 * direction(A, center(d)) - 2 * direction(midpoint(D, F), F) mod 360
By projection_definition on A, midpoint(D, F), k we get midpoint(D, F) == projection(A, k)
By parallel_line_definition on line_circle_tangent_point(k, Circle(C, D, E)), k, j we get k == parallel_line(line_circle_tangent_point(k, Circle(C, D, E)), j)
By parallel_line_definition on line_circle_tangent_point(j, Circle(C, D, I)), j, k we get j == parallel_line(line_circle_tangent_point(j, Circle(C, D, I)), k)
By parallel_line_definition on midpoint(D, F), k, j we get k == parallel_line(midpoint(D, F), j)
By different_points_v1 on E, I we get 0 != distance(E, I)
By different_points_v1 on F, midpoint(A, H) we get 0 != distance(F, midpoint(A, H))
By different_points_v1 on midpoint(D, F), A we get 0 != distance(A, midpoint(D, F))
By perpendicular_direction_conditions_v0_r on A, midpoint(D, F), I, D we get 180 == 2 * direction(A, midpoint(D, F)) - 2 * direction(I, D) mod 360
By perpendicular_direction_conditions_v0_r on C, E, A, midpoint(D, F) we get 180 == 2 * direction(C, E) - 2 * direction(A, midpoint(D, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(D, F), A, F, I we get 180 == 2 * direction(midpoint(D, F), A) - 2 * direction(F, I) mod 360
By parallel_line_angles_reverse_v3 on A, E, I, C we get angle(A, E, I) == angle(C, I, E) + 180 mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(D, F), I, F we get 180 == 2 * direction(A, midpoint(D, F)) - 2 * direction(I, F) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(A, H), F, midpoint(A, H) we get 180 == 2 * direction(A, midpoint(A, H)) - 2 * direction(F, midpoint(A, H)) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(A, H), A, H we get 180 == 2 * direction(F, midpoint(A, H)) - 2 * direction(A, H) mod 360
By perpendicular_direction_conditions_v0_r on I, D, midpoint(D, F), A we get 180 == 2 * direction(I, D) - 2 * direction(midpoint(D, F), A) mod 360
By perpendicular_direction_conditions_v0_r on F, D, A, midpoint(D, F) we get 180 == 2 * direction(F, D) - 2 * direction(A, midpoint(D, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(D, F), A, C, E we get 180 == 2 * direction(midpoint(D, F), A) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(D, F), A, midpoint(D, F) we get 180 == 2 * direction(F, midpoint(D, F)) - 2 * direction(A, midpoint(D, F)) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(D, F), C, E we get 180 == 2 * direction(A, midpoint(D, F)) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on D, F, midpoint(D, F), A we get 180 == 2 * direction(D, F) - 2 * direction(midpoint(D, F), A) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(D, F), F, midpoint(D, F) we get 180 == 2 * direction(A, midpoint(D, F)) - 2 * direction(F, midpoint(D, F)) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(D, F), D, F we get 180 == 2 * direction(A, midpoint(D, F)) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(D, F), A, D, midpoint(D, F) we get 180 == 2 * direction(midpoint(D, F), A) - 2 * direction(D, midpoint(D, F)) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(A, H), A, midpoint(A, H) we get 180 == 2 * direction(F, midpoint(A, H)) - 2 * direction(A, midpoint(A, H)) mod 360
By perpendicular_direction_conditions_v0_r on D, I, midpoint(D, F), A we get 180 == 2 * direction(D, I) - 2 * direction(midpoint(D, F), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, H), F, midpoint(A, H), A we get 180 == 2 * direction(midpoint(A, H), F) - 2 * direction(midpoint(A, H), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(D, F), A, F, D we get 180 == 2 * direction(midpoint(D, F), A) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(D, F), E, C we get 180 == 2 * direction(A, midpoint(D, F)) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(D, F), A, I, F we get 180 == 2 * direction(midpoint(D, F), A) - 2 * direction(I, F) mod 360
By perpendicular_direction_conditions_v0_r on E, C, A, midpoint(D, F) we get 180 == 2 * direction(E, C) - 2 * direction(A, midpoint(D, F)) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(A, H), midpoint(A, H), H we get 180 == 2 * direction(F, midpoint(A, H)) - 2 * direction(midpoint(A, H), H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(D, F), F, A, midpoint(D, F) we get 180 == 2 * direction(midpoint(D, F), F) - 2 * direction(A, midpoint(D, F)) mod 360
By perpendicular_direction_conditions_v0_r on E, C, midpoint(D, F), A we get 180 == 2 * direction(E, C) - 2 * direction(midpoint(D, F), A) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(D, F), midpoint(D, F), A we get 180 == 2 * direction(D, midpoint(D, F)) - 2 * direction(midpoint(D, F), A) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(D, F), A, midpoint(D, F) we get 180 == 2 * direction(D, midpoint(D, F)) - 2 * direction(A, midpoint(D, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, H), F, A, H we get 180 == 2 * direction(midpoint(A, H), F) - 2 * direction(A, H) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(A, H), H, midpoint(A, H) we get 180 == 2 * direction(F, midpoint(A, H)) - 2 * direction(H, midpoint(A, H)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(D, F), F, midpoint(D, F), A we get 180 == 2 * direction(midpoint(D, F), F) - 2 * direction(midpoint(D, F), A) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(A, H), midpoint(A, H), F we get 180 == 2 * direction(A, midpoint(A, H)) - 2 * direction(midpoint(A, H), F) mod 360
By perpendicular_direction_conditions_v0_r on D, F, A, midpoint(D, F) we get 180 == 2 * direction(D, F) - 2 * direction(A, midpoint(D, F)) mod 360
By perpendicular_direction_conditions_v0_r on F, D, midpoint(D, F), A we get 180 == 2 * direction(F, D) - 2 * direction(midpoint(D, F), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, H), A, midpoint(A, H), F we get 180 == 2 * direction(midpoint(A, H), A) - 2 * direction(midpoint(A, H), F) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(A, H), F, midpoint(A, H) we get 180 == 2 * direction(H, midpoint(A, H)) - 2 * direction(F, midpoint(A, H)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, H), A, F, midpoint(A, H) we get 180 == 2 * direction(midpoint(A, H), A) - 2 * direction(F, midpoint(A, H)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, H), F, H, midpoint(A, H) we get 180 == 2 * direction(midpoint(A, H), F) - 2 * direction(H, midpoint(A, H)) mod 360
By perpendicular_direction_conditions_v0_r on F, I, A, midpoint(D, F) we get 180 == 2 * direction(F, I) - 2 * direction(A, midpoint(D, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, H), F, A, midpoint(A, H) we get 180 == 2 * direction(midpoint(A, H), F) - 2 * direction(A, midpoint(A, H)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(D, F), A, D, F we get 180 == 2 * direction(midpoint(D, F), A) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(D, F), F, I we get 180 == 2 * direction(A, midpoint(D, F)) - 2 * direction(F, I) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(D, F), A, F, midpoint(D, F) we get 180 == 2 * direction(midpoint(D, F), A) - 2 * direction(F, midpoint(D, F)) mod 360
By perpendicular_direction_conditions_v0_r on I, F, midpoint(D, F), A we get 180 == 2 * direction(I, F) - 2 * direction(midpoint(D, F), A) mod 360
By perpendicular_direction_conditions_v0_r on C, E, midpoint(D, F), A we get 180 == 2 * direction(C, E) - 2 * direction(midpoint(D, F), A) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(A, H), midpoint(A, H), A we get 180 == 2 * direction(F, midpoint(A, H)) - 2 * direction(midpoint(A, H), A) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(D, F), midpoint(D, F), F we get 180 == 2 * direction(A, midpoint(D, F)) - 2 * direction(midpoint(D, F), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(D, F), D, midpoint(D, F), A we get 180 == 2 * direction(midpoint(D, F), D) - 2 * direction(midpoint(D, F), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(D, F), A, midpoint(D, F), F we get 180 == 2 * direction(midpoint(D, F), A) - 2 * direction(midpoint(D, F), F) mod 360
By perpendicular_direction_conditions_v0_r on F, I, midpoint(D, F), A we get 180 == 2 * direction(F, I) - 2 * direction(midpoint(D, F), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, H), H, F, midpoint(A, H) we get 180 == 2 * direction(midpoint(A, H), H) - 2 * direction(F, midpoint(A, H)) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(D, F), midpoint(D, F), D we get 180 == 2 * direction(A, midpoint(D, F)) - 2 * direction(midpoint(D, F), D) mod 360
By perpendicular_direction_conditions_v0_r on A, H, midpoint(A, H), F we get 180 == 2 * direction(A, H) - 2 * direction(midpoint(A, H), F) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(A, H), H, A we get 180 == 2 * direction(F, midpoint(A, H)) - 2 * direction(H, A) mod 360
By perpendicular_direction_conditions_v0_r on D, I, A, midpoint(D, F) we get 180 == 2 * direction(D, I) - 2 * direction(A, midpoint(D, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, H), H, midpoint(A, H), F we get 180 == 2 * direction(midpoint(A, H), H) - 2 * direction(midpoint(A, H), F) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(D, F), midpoint(D, F), A we get 180 == 2 * direction(F, midpoint(D, F)) - 2 * direction(midpoint(D, F), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, H), F, midpoint(A, H), H we get 180 == 2 * direction(midpoint(A, H), F) - 2 * direction(midpoint(A, H), H) mod 360
By perpendicular_direction_conditions_v0_r on H, A, midpoint(A, H), F we get 180 == 2 * direction(H, A) - 2 * direction(midpoint(A, H), F) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(D, F), F, D we get 180 == 2 * direction(A, midpoint(D, F)) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(D, F), D, midpoint(D, F) we get 180 == 2 * direction(A, midpoint(D, F)) - 2 * direction(D, midpoint(D, F)) mod 360
By perpendicular_direction_conditions_v0_r on A, H, F, midpoint(A, H) we get 180 == 2 * direction(A, H) - 2 * direction(F, midpoint(A, H)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(D, F), A, D, I we get 180 == 2 * direction(midpoint(D, F), A) - 2 * direction(D, I) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(D, F), A, I, D we get 180 == 2 * direction(midpoint(D, F), A) - 2 * direction(I, D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, H), F, H, A we get 180 == 2 * direction(midpoint(A, H), F) - 2 * direction(H, A) mod 360
By perpendicular_direction_conditions_v0_r on H, A, F, midpoint(A, H) we get 180 == 2 * direction(H, A) - 2 * direction(F, midpoint(A, H)) mod 360
By perpendicular_direction_conditions_v0_r on I, D, A, midpoint(D, F) we get 180 == 2 * direction(I, D) - 2 * direction(A, midpoint(D, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(D, F), A, E, C we get 180 == 2 * direction(midpoint(D, F), A) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(D, F), A, midpoint(D, F), D we get 180 == 2 * direction(midpoint(D, F), A) - 2 * direction(midpoint(D, F), D) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(A, H), midpoint(A, H), F we get 180 == 2 * direction(H, midpoint(A, H)) - 2 * direction(midpoint(A, H), F) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(D, F), D, I we get 180 == 2 * direction(A, midpoint(D, F)) - 2 * direction(D, I) mod 360
By perpendicular_direction_conditions_v0_r on I, F, A, midpoint(D, F) we get 180 == 2 * direction(I, F) - 2 * direction(A, midpoint(D, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(D, F), D, A, midpoint(D, F) we get 180 == 2 * direction(midpoint(D, F), D) - 2 * direction(A, midpoint(D, F)) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on B, I, E we get B not in Line(E, I)
By in_imply_collinear on line_intersection(Line(B, D), Line(C, F)), D, B we get collinear(B, D, line_intersection(Line(B, D), Line(C, F)))
By in_imply_collinear on line_intersection(Line(B, D), Line(C, F)), I, E we get collinear(E, I, line_intersection(Line(B, D), Line(C, F)))
By in_imply_collinear on line_intersection(Line(B, D), Line(C, F)), F, C we get collinear(C, F, line_intersection(Line(B, D), Line(C, F)))
By parallel_line_angles_reverse_v0 on B, I, E, D we get angle(B, I, E) == angle(D, E, I) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on G, E, I we get G not in Line(E, I)
By parallel_line_angles_reverse_v2 on C, I, E, A we get angle(C, I, E) == angle(A, E, I) + 180 mod 360
By tangent_point_is_unique on C, line_circle_tangent_point(j, Circle(C, D, I)), Circle(C, D, I), j we get C == line_circle_tangent_point(j, Circle(C, D, I))
By in_imply_collinear on line_circle_tangent_point(k, Circle(C, D, E)), midpoint(D, F), F we get collinear(F, midpoint(D, F), line_circle_tangent_point(k, Circle(C, D, E)))
By not_in_line_equivalent_to_not_collinear_v0 on I, midpoint(A, H), H we get not_collinear(H, I, midpoint(A, H)), exists(Line(H, midpoint(A, H)))
By in_imply_collinear on line_circle_tangent_point(j, Circle(C, D, I)), C, E we get collinear(C, E, line_circle_tangent_point(j, Circle(C, D, I)))
By tangent_point_is_unique on D, line_circle_tangent_point(k, Circle(C, D, E)), Circle(C, D, E), k we get D == line_circle_tangent_point(k, Circle(C, D, E))
By in_imply_collinear on line_circle_tangent_point(k, Circle(C, D, E)), I, F we get collinear(F, I, line_circle_tangent_point(k, Circle(C, D, E)))
By parallel_line_angles_reverse_v3 on A, E, I, B we get angle(A, E, I) == angle(B, I, E) + 180 mod 360
By line_inequality on Line(E, I), Line(A, G), E we get Line(A, G) != Line(E, I)
By in_imply_collinear on line_circle_tangent_point(k, Circle(C, D, E)), I, D we get collinear(D, I, line_circle_tangent_point(k, Circle(C, D, E)))
By in_imply_collinear on line_circle_tangent_point(k, Circle(C, D, E)), F, D we get collinear(D, F, line_circle_tangent_point(k, Circle(C, D, E)))
By in_imply_collinear on line_circle_tangent_point(k, Circle(C, D, E)), D, midpoint(D, F) we get collinear(D, midpoint(D, F), line_circle_tangent_point(k, Circle(C, D, E)))
By line_inequality on Line(E, I), Line(F, H), I we get Line(E, I) != Line(F, H)
By parallel_line_angles_reverse_v1 on F, I, E, C we get angle(C, E, I) == angle(F, I, E) mod 360
By reverse_direction on midpoint(A, H), A we get 180 == direction(midpoint(A, H), A) - direction(A, midpoint(A, H)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on H, D, midpoint(D, F) we get not_collinear(D, H, midpoint(D, F)), exists(Line(D, midpoint(D, F)))
By parallel_line_angles_reverse_v2 on B, I, E, A we get angle(B, I, E) == angle(A, E, I) + 180 mod 360
By line_inequality on Line(E, I), Line(B, H), E we get Line(B, H) != Line(E, I)
By not_in_line_equivalent_to_not_collinear_v0 on D, midpoint(A, H), A we get not_collinear(A, D, midpoint(A, H)), exists(Line(A, midpoint(A, H)))
By in_imply_concyclic on C, D, E, line_circle_tangent_point(k, Circle(C, D, E)) we get concyclic(C, D, E, line_circle_tangent_point(k, Circle(C, D, E)))
By line_inequality on Line(E, I), g, E we get g != Line(E, I)
By not_in_line_equivalent_to_not_collinear_v0 on G, F, midpoint(D, F) we get not_collinear(F, G, midpoint(D, F)), exists(Line(F, midpoint(D, F)))
By line_containment_inequality on line_intersection(Line(B, D), Line(C, F)), C, Line(B, D) we get C != line_intersection(Line(B, D), Line(C, F))
By reverse_direction on D, midpoint(D, F) we get 180 == direction(D, midpoint(D, F)) - direction(midpoint(D, F), D) mod 360
By external_angle_bisector_definition_v0 on F, midpoint(A, H), D, H we get 180 == angle(F, H, midpoint(A, H)) + angle(D, H, midpoint(A, H)) mod 360
By reverse_direction on midpoint(D, F), D we get 180 == direction(midpoint(D, F), D) - direction(D, midpoint(D, F)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on B, H, midpoint(A, H) we get not_collinear(B, H, midpoint(A, H)), exists(Line(H, midpoint(A, H)))
By in_imply_concyclic on C, D, I, line_circle_tangent_point(j, Circle(C, D, I)) we get concyclic(C, D, I, line_circle_tangent_point(j, Circle(C, D, I)))
By not_in_line_equivalent_to_not_collinear_v0 on B, F, midpoint(D, F) we get not_collinear(B, F, midpoint(D, F)), exists(Line(F, midpoint(D, F)))
By internal_angle_bisector_definition_v0 on I, midpoint(D, F), I, F we get angle(I, F, midpoint(D, F)) == angle(midpoint(D, F), F, I) mod 360
By line_inequality on Line(E, I), j, I we get j != Line(E, I)
By internal_angle_bisector_definition_v0 on F, midpoint(A, H), C, H we get angle(F, H, midpoint(A, H)) == angle(midpoint(A, H), H, C) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on F, midpoint(A, H), A we get not_collinear(A, F, midpoint(A, H)), exists(Line(A, midpoint(A, H)))
By line_containment_inequality on line_circle_tangent_point(j, Circle(C, D, I)), H, j we get H != line_circle_tangent_point(j, Circle(C, D, I))
By line_containment_inequality on line_intersection(Line(B, D), Line(C, F)), E, Line(C, F) we get E != line_intersection(Line(B, D), Line(C, F))
By external_angle_bisector_definition_v0 on A, midpoint(D, F), H, D we get 180 == angle(A, D, midpoint(D, F)) + angle(H, D, midpoint(D, F)) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on D, I, E we get D not in Line(E, I)
By line_containment_inequality on line_circle_tangent_point(k, Circle(C, D, E)), G, k we get G != line_circle_tangent_point(k, Circle(C, D, E))
By not_in_line_equivalent_to_not_collinear_v0 on E, F, midpoint(D, F) we get not_collinear(E, F, midpoint(D, F)), exists(Line(F, midpoint(D, F)))
By not_in_line_equivalent_to_not_collinear_v0 on G, D, midpoint(D, F) we get not_collinear(D, G, midpoint(D, F)), exists(Line(D, midpoint(D, F)))
By line_inequality on Line(E, I), Line(A, H), I we get Line(A, H) != Line(E, I)
By external_angle_bisector_definition_v0 on H, midpoint(D, F), E, D we get 180 == angle(H, D, midpoint(D, F)) + angle(E, D, midpoint(D, F)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on C, midpoint(A, H), H we get not_collinear(C, H, midpoint(A, H)), exists(Line(H, midpoint(A, H)))
By not_in_line_equivalent_to_not_collinear_v0 on H, F, midpoint(D, F) we get not_collinear(F, H, midpoint(D, F)), exists(Line(F, midpoint(D, F)))
By external_angle_bisector_definition_v0 on C, midpoint(D, F), E, D we get 180 == angle(C, D, midpoint(D, F)) + angle(E, D, midpoint(D, F)) mod 360
By line_containment_inequality on line_intersection(Line(B, D), Line(C, F)), F, Line(B, D) we get F != line_intersection(Line(B, D), Line(C, F))
By external_angle_bisector_definition_v0 on C, midpoint(D, F), A, D we get 180 == angle(C, D, midpoint(D, F)) + angle(A, D, midpoint(D, F)) mod 360
By reverse_direction on H, midpoint(A, H) we get 180 == direction(H, midpoint(A, H)) - direction(midpoint(A, H), H) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on B, midpoint(A, H), A we get not_collinear(A, B, midpoint(A, H)), exists(Line(A, midpoint(A, H)))
By not_in_line_equivalent_to_not_collinear_v0 on E, H, midpoint(A, H) we get not_collinear(E, H, midpoint(A, H)), exists(Line(H, midpoint(A, H)))
By internal_angle_bisector_definition_v0 on I, midpoint(D, F), I, D we get angle(I, D, midpoint(D, F)) == angle(midpoint(D, F), D, I) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on G, A, midpoint(A, H) we get not_collinear(A, G, midpoint(A, H)), exists(Line(A, midpoint(A, H)))
By line_containment_inequality on line_circle_tangent_point(j, Circle(C, D, I)), I, j we get I != line_circle_tangent_point(j, Circle(C, D, I))
By reverse_direction on A, midpoint(A, H) we get 180 == direction(A, midpoint(A, H)) - direction(midpoint(A, H), A) mod 360
By internal_angle_bisector_definition_v0 on C, midpoint(A, H), F, H we get angle(C, H, midpoint(A, H)) == angle(midpoint(A, H), H, F) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on F, I, E we get F not in Line(E, I)
By not_in_line_equivalent_to_not_collinear_v0 on C, midpoint(D, F), F we get not_collinear(C, F, midpoint(D, F)), exists(Line(F, midpoint(D, F)))
By reverse_direction on F, midpoint(D, F) we get 180 == direction(F, midpoint(D, F)) - direction(midpoint(D, F), F) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on E, midpoint(D, F), D we get not_collinear(D, E, midpoint(D, F)), exists(Line(D, midpoint(D, F)))
By line_inequality on Line(E, I), Line(B, G), E we get Line(B, G) != Line(E, I)
By line_inequality on Line(E, I), Line(D, G), I we get Line(D, G) != Line(E, I)
By not_in_line_equivalent_to_not_collinear_v0_r on C, E, I we get C not in Line(E, I)
By reverse_direction on midpoint(A, H), H we get 180 == direction(midpoint(A, H), H) - direction(H, midpoint(A, H)) mod 360
By reverse_direction on midpoint(D, F), F we get 180 == direction(midpoint(D, F), F) - direction(F, midpoint(D, F)) mod 360
By line_containment_inequality on line_circle_tangent_point(k, Circle(C, D, E)), E, k we get E != line_circle_tangent_point(k, Circle(C, D, E))
By not_in_line_equivalent_to_not_collinear_v0 on F, H, midpoint(A, H) we get not_collinear(F, H, midpoint(A, H)), exists(Line(H, midpoint(A, H)))
By line_containment_inequality on line_circle_tangent_point(j, Circle(C, D, I)), F, j we get F != line_circle_tangent_point(j, Circle(C, D, I))
By not_in_line_equivalent_to_not_collinear_v0 on A, F, midpoint(D, F) we get not_collinear(A, F, midpoint(D, F)), exists(Line(F, midpoint(D, F)))
By not_in_line_equivalent_to_not_collinear_v0 on B, D, midpoint(D, F) we get not_collinear(B, D, midpoint(D, F)), exists(Line(D, midpoint(D, F)))
By not_in_line_equivalent_to_not_collinear_v0 on D, H, midpoint(A, H) we get not_collinear(D, H, midpoint(A, H)), exists(Line(H, midpoint(A, H)))
By not_in_line_equivalent_to_not_collinear_v0_r on H, I, E we get H not in Line(E, I)
By line_inequality on Line(E, I), h, E we get h != Line(E, I)
By not_in_line_equivalent_to_not_collinear_v0 on I, A, midpoint(A, H) we get not_collinear(A, I, midpoint(A, H)), exists(Line(A, midpoint(A, H)))
By not_in_line_equivalent_to_not_collinear_v0_r on A, I, E we get A not in Line(E, I)
By line_containment_inequality on midpoint(A, H), B, Line(A, H) we get B != midpoint(A, H)
By line_containment_inequality on line_intersection(Line(B, D), Line(C, F)), H, Line(B, D) we get H != line_intersection(Line(B, D), Line(C, F))
By line_inequality on Line(E, I), Line(G, H), I we get Line(E, I) != Line(G, H)
By not_in_line_equivalent_to_not_collinear_v0 on E, midpoint(A, H), A we get not_collinear(A, E, midpoint(A, H)), exists(Line(A, midpoint(A, H)))
By line_inequality on Line(E, I), k, E we get k != Line(E, I)
By line_containment_inequality on midpoint(D, F), B, k we get B != midpoint(D, F)
By line_containment_inequality on line_circle_tangent_point(k, Circle(C, D, E)), H, k we get H != line_circle_tangent_point(k, Circle(C, D, E))
By line_inequality on Line(E, I), f, E we get f != Line(E, I)
By line_containment_inequality on midpoint(A, H), C, Line(A, H) we get C != midpoint(A, H)
By not_in_line_equivalent_to_not_collinear_v0 on G, H, midpoint(A, H) we get not_collinear(G, H, midpoint(A, H)), exists(Line(H, midpoint(A, H)))
By line_containment_inequality on midpoint(D, F), E, k we get E != midpoint(D, F)
By not_in_line_equivalent_to_not_collinear_v0 on C, A, midpoint(A, H) we get not_collinear(A, C, midpoint(A, H)), exists(Line(A, midpoint(A, H)))
By line_containment_inequality on line_circle_tangent_point(k, Circle(C, D, E)), B, k we get B != line_circle_tangent_point(k, Circle(C, D, E))
By line_containment_inequality on midpoint(D, F), C, k we get C != midpoint(D, F)
By line_inequality on Line(E, I), i, I we get i != Line(E, I)
By not_in_line_equivalent_to_not_collinear_v0 on C, D, midpoint(D, F) we get not_collinear(C, D, midpoint(D, F)), exists(Line(D, midpoint(D, F)))
By line_containment_inequality on midpoint(D, F), G, k we get G != midpoint(D, F)
By line_containment_inequality on line_circle_tangent_point(j, Circle(C, D, I)), A, j we get A != line_circle_tangent_point(j, Circle(C, D, I))
By line_inequality on Line(E, I), Line(A, C), I we get Line(A, C) != Line(E, I)
By not_in_line_equivalent_to_not_collinear_v0 on A, D, midpoint(D, F) we get not_collinear(A, D, midpoint(D, F)), exists(Line(D, midpoint(D, F)))
By line_containment_inequality on line_intersection(Line(B, D), Line(C, F)), G, Line(C, F) we get G != line_intersection(Line(B, D), Line(C, F))
By line_containment_inequality on line_circle_tangent_point(k, Circle(C, D, E)), A, k we get A != line_circle_tangent_point(k, Circle(C, D, E))
By line_inequality on Line(E, I), Line(E, G), I we get Line(E, G) != Line(E, I)
By line_containment_inequality on line_intersection(Line(B, D), Line(C, F)), A, Line(B, D) we get A != line_intersection(Line(B, D), Line(C, F))
By line_containment_inequality on line_circle_tangent_point(j, Circle(C, D, I)), G, j we get G != line_circle_tangent_point(j, Circle(C, D, I))
By line_containment_inequality on line_circle_tangent_point(j, Circle(C, D, I)), D, j we get D != line_circle_tangent_point(j, Circle(C, D, I))
By line_containment_inequality on line_intersection(Line(B, D), Line(C, F)), I, Line(C, F) we get I != line_intersection(Line(B, D), Line(C, F))
By line_containment_inequality on midpoint(A, H), G, Line(A, H) we get G != midpoint(A, H)
By line_containment_inequality on midpoint(A, H), I, Line(A, H) we get I != midpoint(A, H)
By line_inequality on Line(E, I), Line(F, G), E we get Line(E, I) != Line(F, G)
By line_containment_inequality on midpoint(A, H), E, Line(A, H) we get E != midpoint(A, H)
By line_containment_inequality on midpoint(A, H), D, Line(A, H) we get D != midpoint(A, H)
By line_inequality on Line(E, I), Line(B, E), I we get Line(B, E) != Line(E, I)
By line_containment_inequality on line_intersection(Line(B, D), Line(C, F)), B, Line(C, F) we get B != line_intersection(Line(B, D), Line(C, F))
By line_containment_inequality on midpoint(D, F), H, k we get H != midpoint(D, F)
By line_containment_inequality on line_circle_tangent_point(k, Circle(C, D, E)), C, k we get C != line_circle_tangent_point(k, Circle(C, D, E))
By line_containment_inequality on line_circle_tangent_point(j, Circle(C, D, I)), B, j we get B != line_circle_tangent_point(j, Circle(C, D, I))
By line_containment_inequality on line_intersection(Line(B, D), Line(C, F)), D, Line(C, F) we get D != line_intersection(Line(B, D), Line(C, F))
By perpendicular_angle_conditions_v0 on D, midpoint(D, F), A we get angle(D, midpoint(D, F), A) == orientation(A, D, midpoint(D, F)) mod 360
By internal_angle_bisector_definition_v0 on A, midpoint(A, H), H, F we get angle(A, F, midpoint(A, H)) == angle(midpoint(A, H), F, H) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(D, F), F, midpoint(D, F), D we get Line(D, F) == internal_angle_bisector(midpoint(D, F), D, midpoint(D, F))
By similar_triangle_basic_properties on C, E, I, D, I, E we get not_collinear(C, E, I), not_collinear(D, E, I), angle(C, E, I) == angle(D, I, E) mod 360, angle(E, I, C) == angle(I, E, D) mod 360, angle(E, D, I) == angle(I, C, E) mod 360, log(distance(C, E)) + log(distance(E, I)) == log(distance(D, I)) + log(distance(E, I)), log(distance(E, I)) + log(distance(C, I)) == log(distance(E, I)) + log(distance(D, E)), log(distance(C, I)) + log(distance(D, I)) == log(distance(D, E)) + log(distance(C, E))
By collinear_definition on F, midpoint(A, H), center(d) we get midpoint(A, H) in Line(F, center(d)), center(d) in Line(F, midpoint(A, H)), Line(F, center(d)) == Line(F, midpoint(A, H)), 0 == 2 * angle(midpoint(A, H), F, center(d)) mod 360
By external_angle_bisector_definition_v0_r on I, F, midpoint(D, F), D we get Line(D, F) == external_angle_bisector(I, D, midpoint(D, F))
By internal_angle_bisector_definition_v0_r on D, F, D, midpoint(D, F) we get Line(F, midpoint(D, F)) == internal_angle_bisector(D, midpoint(D, F), D)
By power_of_a_point_in_circle on line_circle_tangent_point(j, Circle(C, D, I)), Circle(C, D, I) we get 0 == power_of_a_point(line_circle_tangent_point(j, Circle(C, D, I)), Circle(C, D, I))
By power_of_a_point_in_circle on line_circle_tangent_point(k, Circle(C, D, E)), Circle(C, D, E) we get 0 == power_of_a_point(line_circle_tangent_point(k, Circle(C, D, E)), Circle(C, D, E))
By perpendicular_lines_draw_intersection on j, median(A, D, F) we get exists(line_intersection(j, median(A, D, F)))
By perpendicular_angle_conditions_v0 on A, midpoint(A, H), F we get angle(A, midpoint(A, H), F) == orientation(A, midpoint(A, H), F) mod 360
By internal_angle_bisector_definition_v0_r on H, midpoint(A, H), H, A we get Line(A, midpoint(A, H)) == internal_angle_bisector(H, A, H)
By internal_angle_bisector_definition_v0 on H, F, A, midpoint(A, H) we get angle(F, midpoint(A, H), A) == angle(H, midpoint(A, H), F) mod 360
By internal_angle_bisector_definition_v0 on A, F, H, midpoint(A, H) we get angle(A, midpoint(A, H), F) == angle(F, midpoint(A, H), H) mod 360
By internal_angle_bisector_definition_v0 on D, midpoint(D, F), F, A we get angle(D, A, midpoint(D, F)) == angle(midpoint(D, F), A, F) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(A, H), H, midpoint(A, H), A we get Line(A, H) == internal_angle_bisector(midpoint(A, H), A, midpoint(A, H))
By internal_angle_bisector_definition_v0_r on F, D, F, midpoint(D, F) we get Line(D, midpoint(D, F)) == internal_angle_bisector(F, midpoint(D, F), F)
By internal_angle_bisector_definition_v0 on D, A, F, midpoint(D, F) we get angle(A, midpoint(D, F), F) == angle(D, midpoint(D, F), A) mod 360
By perpendicular_angle_conditions_v0 on A, midpoint(D, F), F we get angle(A, midpoint(D, F), F) == orientation(A, midpoint(D, F), F) mod 360
By perpendicular_angle_conditions_v0 on H, midpoint(A, H), F we get angle(H, midpoint(A, H), F) == orientation(F, H, midpoint(A, H)) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(D, F), D, I, F we get Line(D, F) == internal_angle_bisector(I, F, midpoint(D, F))
By perpendicular_angle_conditions_v0 on A, midpoint(D, F), D we get angle(A, midpoint(D, F), D) == orientation(A, midpoint(D, F), D) mod 360
By internal_angle_bisector_definition_v0 on F, A, D, midpoint(D, F) we get angle(A, midpoint(D, F), D) == angle(F, midpoint(D, F), A) mod 360
By perpendicular_angle_conditions_v0 on F, midpoint(A, H), A we get angle(F, midpoint(A, H), A) == orientation(A, F, midpoint(A, H)) mod 360
By collinear_definition on A, midpoint(D, F), center(d) we get midpoint(D, F) in Line(A, center(d)), center(d) in Line(A, midpoint(D, F)), Line(A, center(d)) == Line(A, midpoint(D, F)), 0 == 2 * angle(midpoint(D, F), A, center(d)) mod 360
By perpendicular_angle_conditions_v0 on F, midpoint(A, H), H we get angle(F, midpoint(A, H), H) == orientation(F, midpoint(A, H), H) mod 360
By internal_angle_bisector_definition_v0_r on A, H, A, midpoint(A, H) we get Line(H, midpoint(A, H)) == internal_angle_bisector(A, midpoint(A, H), A)
By internal_angle_bisector_definition_v0_r on H, A, H, midpoint(A, H) we get Line(A, midpoint(A, H)) == internal_angle_bisector(H, midpoint(A, H), H)
By internal_angle_bisector_definition_v0_r on midpoint(A, H), A, midpoint(A, H), H we get Line(A, H) == internal_angle_bisector(midpoint(A, H), H, midpoint(A, H))
By internal_angle_bisector_definition_v0_r on A, midpoint(A, H), A, H we get Line(H, midpoint(A, H)) == internal_angle_bisector(A, H, A)
By collinear_definition on F, center(d), midpoint(A, H) we get center(d) in Line(F, midpoint(A, H)), midpoint(A, H) in Line(F, center(d)), Line(F, center(d)) == Line(F, midpoint(A, H)), 0 == 2 * angle(center(d), F, midpoint(A, H)) mod 360
By internal_angle_bisector_definition_v0 on H, midpoint(A, H), A, F we get angle(H, F, midpoint(A, H)) == angle(midpoint(A, H), F, A) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(D, F), D, midpoint(D, F), F we get Line(D, F) == internal_angle_bisector(midpoint(D, F), F, midpoint(D, F))
By internal_angle_bisector_definition_v0 on F, midpoint(D, F), D, A we get angle(F, A, midpoint(D, F)) == angle(midpoint(D, F), A, D) mod 360
By collinear_definition on A, center(d), midpoint(D, F) we get center(d) in Line(A, midpoint(D, F)), midpoint(D, F) in Line(A, center(d)), Line(A, center(d)) == Line(A, midpoint(D, F)), 0 == 2 * angle(center(d), A, midpoint(D, F)) mod 360
By perpendicular_angle_conditions_v0 on F, midpoint(D, F), A we get angle(F, midpoint(D, F), A) == orientation(A, F, midpoint(D, F)) mod 360
By sas_anti_similarity on D, G, F, A, B, I we get anti_similar_triangles(A, B, I, D, G, F)
By power_of_a_point_definition on midpoint(D, F), F, D, d we get log(power_of_a_point(midpoint(D, F), d)) == log(distance(F, midpoint(D, F))) + log(distance(D, midpoint(D, F)))
By sas_anti_similarity on B, G, E, I, B, A we get anti_similar_triangles(A, B, I, E, G, B)
By power_of_a_point_definition on H, D, C, Circle(C, D, E) we get log(distance(D, H)) + log(distance(C, H)) == log(power_of_a_point(H, Circle(C, D, E)))
By altitude_definition on A, C, E, median(A, D, F) we get median(A, D, F) == altitude(A, C, E)
By sas_anti_similarity on A, B, I, E, G, B we get anti_similar_triangles(A, B, I, E, G, B)
By power_of_a_point_definition on midpoint(A, H), H, A, d we get log(power_of_a_point(midpoint(A, H), d)) == log(distance(H, midpoint(A, H))) + log(distance(A, midpoint(A, H)))
By power_of_a_point_definition on B, I, C, Circle(C, D, I) we get log(distance(B, I)) + log(distance(B, C)) == log(power_of_a_point(B, Circle(C, D, I)))
By power_of_a_point_definition on A, D, E, Circle(C, D, E) we get log(distance(A, D)) + log(distance(A, E)) == log(power_of_a_point(A, Circle(C, D, E)))
By power_of_a_point_definition on D, C, H, Circle(B, C, F) we get log(distance(C, D)) + log(distance(D, H)) == log(power_of_a_point(D, Circle(B, C, F)))
By power_of_a_point_definition on I, B, C, Circle(B, C, F) we get log(distance(B, I)) + log(distance(C, I)) == log(power_of_a_point(I, Circle(B, C, F)))
By power_of_a_point_definition on A, F, B, Circle(B, C, F) we get log(distance(A, F)) + log(distance(A, B)) == log(power_of_a_point(A, Circle(B, C, F)))
By sas_anti_similarity on F, G, D, I, B, A we get anti_similar_triangles(A, B, I, D, G, F)
By power_of_a_point_tangent on midpoint(D, F), D, Circle(C, D, E) we get 2 * log(distance(D, midpoint(D, F))) == log(power_of_a_point(midpoint(D, F), Circle(C, D, E)))
By sas_anti_similarity on I, B, A, F, G, D we get anti_similar_triangles(A, B, I, D, G, F)
By sas_anti_similarity on E, G, B, A, B, I we get anti_similar_triangles(A, B, I, E, G, B)
By power_of_a_point_definition on F, I, D, Circle(C, D, I) we get log(distance(F, I)) + log(distance(D, F)) == log(power_of_a_point(F, Circle(C, D, I)))
By power_of_a_point_definition on H, D, C, Circle(C, D, I) we get log(distance(D, H)) + log(distance(C, H)) == log(power_of_a_point(H, Circle(C, D, I)))
By sas_anti_similarity on I, B, A, B, G, E we get anti_similar_triangles(A, B, I, E, G, B)
By sas_anti_similarity on A, B, I, D, G, F we get anti_similar_triangles(A, B, I, D, G, F)
By line_definition on D, line_intersection(Line(B, D), Line(C, F)), Line(B, D) we get Line(B, D) == Line(D, line_intersection(Line(B, D), Line(C, F)))
By line_definition on line_intersection(Line(B, D), Line(C, F)), I, Line(E, I) we get Line(E, I) == Line(I, line_intersection(Line(B, D), Line(C, F)))
By concyclic_sufficient_conditions_v0 on A, midpoint(A, H), F, midpoint(D, F) we get concyclic(A, F, midpoint(A, H), midpoint(D, F))
By line_definition on line_intersection(Line(B, D), Line(C, F)), B, Line(B, D) we get Line(B, D) == Line(B, line_intersection(Line(B, D), Line(C, F)))
By line_definition on line_intersection(Line(B, D), Line(C, F)), C, Line(C, F) we get Line(C, F) == Line(C, line_intersection(Line(B, D), Line(C, F)))
By line_definition on F, line_intersection(Line(B, D), Line(C, F)), Line(C, F) we get Line(C, F) == Line(F, line_intersection(Line(B, D), Line(C, F)))
By line_definition on E, line_intersection(Line(B, D), Line(C, F)), Line(E, I) we get Line(E, I) == Line(E, line_intersection(Line(B, D), Line(C, F)))
By line_intersection_definition on I, k, Line(E, I) we get I == line_intersection(k, Line(E, I))
By perpendicular_line_definition on line_intersection(j, median(A, D, F)), j, median(A, D, F) we get j == perpendicular_line(line_intersection(j, median(A, D, F)), median(A, D, F))
By perpendicular_line_definition on line_intersection(j, median(A, D, F)), median(A, D, F), k we get median(A, D, F) == perpendicular_line(line_intersection(j, median(A, D, F)), k)
By perpendicular_line_definition on line_intersection(j, median(A, D, F)), median(A, D, F), j we get median(A, D, F) == perpendicular_line(line_intersection(j, median(A, D, F)), j)
By line_intersection_definition on E, Line(E, I), i we get E == line_intersection(i, Line(E, I))
By line_intersection_definition on E, Line(B, E), Line(E, I) we get E == line_intersection(Line(B, E), Line(E, I))
By line_intersection_definition on E, j, Line(E, I) we get E == line_intersection(j, Line(E, I))
By line_intersection_definition on I, g, Line(E, I) we get I == line_intersection(g, Line(E, I))
By line_intersection_definition on E, Line(E, G), Line(E, I) we get E == line_intersection(Line(E, G), Line(E, I))
By line_unique_intersection_v1 on k, Line(E, I), I, line_intersection(Line(B, D), Line(C, F)) we get line_intersection(Line(B, D), Line(C, F)) not in k
By line_unique_intersection_v1 on j, Line(E, I), E, line_intersection(Line(B, D), Line(C, F)) we get line_intersection(Line(B, D), Line(C, F)) not in j
By line_unique_intersection_v1 on f, Line(B, D), B, line_intersection(Line(B, D), Line(C, F)) we get line_intersection(Line(B, D), Line(C, F)) not in f
By line_unique_intersection_v1 on g, Line(B, D), B, line_intersection(Line(B, D), Line(C, F)) we get line_intersection(Line(B, D), Line(C, F)) not in g
By line_unique_intersection_v1 on h, Line(C, F), C, line_intersection(Line(B, D), Line(C, F)) we get line_intersection(Line(B, D), Line(C, F)) not in h
By line_unique_intersection_v1 on Line(A, C), Line(C, F), C, line_intersection(Line(B, D), Line(C, F)) we get line_intersection(Line(B, D), Line(C, F)) not in Line(A, C)
By line_unique_intersection_v1 on Line(F, G), Line(C, F), F, line_intersection(Line(B, D), Line(C, F)) we get line_intersection(Line(B, D), Line(C, F)) not in Line(F, G)
By line_unique_intersection_v1 on Line(D, G), Line(B, D), D, line_intersection(Line(B, D), Line(C, F)) we get line_intersection(Line(B, D), Line(C, F)) not in Line(D, G)
By line_unique_intersection_v1 on Line(B, G), Line(B, D), B, line_intersection(Line(B, D), Line(C, F)) we get line_intersection(Line(B, D), Line(C, F)) not in Line(B, G)
By line_unique_intersection_v1 on i, Line(E, I), E, line_intersection(Line(B, D), Line(C, F)) we get line_intersection(Line(B, D), Line(C, F)) not in i
By line_unique_intersection_v1 on Line(F, H), Line(C, F), F, line_intersection(Line(B, D), Line(C, F)) we get line_intersection(Line(B, D), Line(C, F)) not in Line(F, H)
By line_unique_intersection_v1 on Line(B, E), Line(B, D), B, line_intersection(Line(B, D), Line(C, F)) we get line_intersection(Line(B, D), Line(C, F)) not in Line(B, E)
By line_unique_intersection_v1 on Line(B, H), Line(B, D), B, line_intersection(Line(B, D), Line(C, F)) we get line_intersection(Line(B, D), Line(C, F)) not in Line(B, H)
By line_unique_intersection_v1 on Line(E, G), Line(E, I), E, line_intersection(Line(B, D), Line(C, F)) we get line_intersection(Line(B, D), Line(C, F)) not in Line(E, G)
By same_angle_v1 on I, D, F, A we get angle(D, I, A) == angle(F, I, A) mod 360
By same_angle_converse_v0 on A, I, G, B we get collinear(A, G, I)
By same_angle_v0 on I, C, B, A we get angle(B, I, A) == angle(C, I, A) mod 360
By collinear_and_not_between_implies_orientation on C, A, H, midpoint(A, H) we get orientation(A, C, H) == orientation(C, H, midpoint(A, H)) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(Line(B, D), Line(C, F)), E, D, A we get orientation(A, line_intersection(Line(B, D), Line(C, F)), D) == orientation(D, E, line_intersection(Line(B, D), Line(C, F))) mod 360
By collinear_and_not_between_implies_orientation on midpoint(A, H), I, F, D we get orientation(D, midpoint(A, H), F) == orientation(F, I, midpoint(A, H)) mod 360
By between_implies_orientation on line_intersection(Line(B, D), Line(C, F)), B, A, F we get orientation(A, F, line_intersection(Line(B, D), Line(C, F))) == orientation(A, line_intersection(Line(B, D), Line(C, F)), B) mod 360, orientation(A, line_intersection(Line(B, D), Line(C, F)), B) == orientation(B, F, line_intersection(Line(B, D), Line(C, F))) mod 360
By collinear_and_not_between_implies_orientation on H, D, F, midpoint(D, F) we get orientation(D, H, F) == orientation(F, midpoint(D, F), H) mod 360
By collinear_and_not_between_implies_orientation on C, D, F, midpoint(D, F) we get orientation(C, F, D) == orientation(C, F, midpoint(D, F)) mod 360
By same_angle_v0 on F, D, midpoint(D, F), A we get angle(D, F, A) == angle(midpoint(D, F), F, A) mod 360
By collinear_and_not_between_implies_orientation on B, A, H, midpoint(A, H) we get orientation(A, B, H) == orientation(B, H, midpoint(A, H)) mod 360
By collinear_and_not_between_implies_orientation on E, midpoint(D, F), F, D we get orientation(D, E, F) == orientation(E, F, midpoint(D, F)) mod 360
By between_implies_orientation on B, F, midpoint(D, F), D we get orientation(B, F, midpoint(D, F)) == orientation(B, midpoint(D, F), D) mod 360, orientation(B, F, D) == orientation(B, F, midpoint(D, F)) mod 360
By collinear_and_not_between_implies_orientation on midpoint(A, H), I, B, C we get orientation(B, C, midpoint(A, H)) == orientation(B, I, midpoint(A, H)) mod 360
By same_angle_v0 on A, E, D, I we get angle(D, A, I) == angle(E, A, I) mod 360
By between_implies_orientation on line_intersection(Line(B, D), Line(C, F)), I, C, B we get orientation(B, line_intersection(Line(B, D), Line(C, F)), C) == orientation(C, line_intersection(Line(B, D), Line(C, F)), I) mod 360, orientation(B, line_intersection(Line(B, D), Line(C, F)), I) == orientation(C, line_intersection(Line(B, D), Line(C, F)), I) mod 360
By collinear_and_not_between_implies_orientation on C, H, A, midpoint(A, H) we get orientation(A, H, C) == orientation(A, midpoint(A, H), C) mod 360
By same_angle_v0 on F, midpoint(D, F), I, A we get angle(I, F, A) == angle(midpoint(D, F), F, A) mod 360
By same_angle_v1 on A, H, midpoint(A, H), F we get angle(H, A, F) == angle(midpoint(A, H), A, F) mod 360
By same_angle_v3 on A, F, B, I we get angle(F, A, I) == angle(B, A, I) + 180 mod 360
By between_implies_orientation on E, H, midpoint(A, H), A we get orientation(A, E, midpoint(A, H)) == orientation(E, H, midpoint(A, H)) mod 360, orientation(A, E, H) == orientation(E, H, midpoint(A, H)) mod 360
By collinear_and_not_between_implies_orientation on midpoint(A, H), B, I, C we get orientation(B, midpoint(A, H), I) == orientation(C, midpoint(A, H), I) mod 360
By collinear_and_not_between_implies_orientation on midpoint(A, H), D, A, E we get orientation(A, D, midpoint(A, H)) == orientation(A, E, midpoint(A, H)) mod 360
By collinear_and_not_between_implies_orientation on midpoint(A, H), E, D, A we get orientation(A, midpoint(A, H), D) == orientation(D, E, midpoint(A, H)) mod 360
By collinear_and_not_between_implies_orientation on midpoint(D, F), A, B, F we get orientation(A, midpoint(D, F), B) == orientation(B, F, midpoint(D, F)) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(Line(B, D), Line(C, F)), D, C, H we get orientation(C, D, line_intersection(Line(B, D), Line(C, F))) == orientation(C, H, line_intersection(Line(B, D), Line(C, F))) mod 360
By between_implies_orientation on B, H, midpoint(A, H), A we get orientation(A, B, midpoint(A, H)) == orientation(B, H, midpoint(A, H)) mod 360, orientation(A, B, H) == orientation(B, H, midpoint(A, H)) mod 360
By collinear_and_not_between_implies_orientation on I, midpoint(A, H), A, H we get orientation(A, H, I) == orientation(A, midpoint(A, H), I) mod 360
By between_implies_orientation on H, D, midpoint(D, F), F we get orientation(D, midpoint(D, F), H) == orientation(F, H, midpoint(D, F)) mod 360, orientation(D, F, H) == orientation(D, midpoint(D, F), H) mod 360
By collinear_and_not_between_implies_orientation on midpoint(A, H), F, B, A we get orientation(A, midpoint(A, H), B) == orientation(B, F, midpoint(A, H)) mod 360
By collinear_and_not_between_implies_orientation on G, midpoint(A, H), H, A we get orientation(A, G, H) == orientation(G, H, midpoint(A, H)) mod 360
By between_implies_orientation on midpoint(A, H), I, D, F we get orientation(D, F, midpoint(A, H)) == orientation(D, midpoint(A, H), I) mod 360, orientation(D, midpoint(A, H), I) == orientation(F, midpoint(A, H), I) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(Line(B, D), Line(C, F)), D, A, E we get orientation(A, D, line_intersection(Line(B, D), Line(C, F))) == orientation(A, E, line_intersection(Line(B, D), Line(C, F))) mod 360
By collinear_and_not_between_implies_orientation on B, midpoint(D, F), D, F we get orientation(B, D, F) == orientation(B, D, midpoint(D, F)) mod 360
By between_implies_orientation on midpoint(A, H), D, E, A we get orientation(A, midpoint(A, H), E) == orientation(D, E, midpoint(A, H)) mod 360, orientation(A, midpoint(A, H), D) == orientation(D, E, midpoint(A, H)) mod 360
By collinear_and_not_between_implies_orientation on midpoint(D, F), E, A, D we get orientation(A, D, midpoint(D, F)) == orientation(A, E, midpoint(D, F)) mod 360
By between_implies_orientation on midpoint(A, H), F, D, I we get orientation(D, I, midpoint(A, H)) == orientation(D, midpoint(A, H), F) mod 360, orientation(D, midpoint(A, H), F) == orientation(F, I, midpoint(A, H)) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(Line(B, D), Line(C, F)), D, I, F we get orientation(D, line_intersection(Line(B, D), Line(C, F)), I) == orientation(F, line_intersection(Line(B, D), Line(C, F)), I) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(Line(B, D), Line(C, F)), D, F, I we get orientation(D, line_intersection(Line(B, D), Line(C, F)), F) == orientation(F, I, line_intersection(Line(B, D), Line(C, F))) mod 360
By between_implies_orientation on midpoint(D, F), D, H, C we get orientation(C, midpoint(D, F), H) == orientation(D, H, midpoint(D, F)) mod 360, orientation(C, midpoint(D, F), D) == orientation(D, H, midpoint(D, F)) mod 360
By between_implies_orientation on midpoint(D, F), D, E, A we get orientation(A, midpoint(D, F), E) == orientation(D, E, midpoint(D, F)) mod 360, orientation(A, midpoint(D, F), D) == orientation(D, E, midpoint(D, F)) mod 360
By between_implies_orientation on C, H, midpoint(A, H), A we get orientation(A, C, midpoint(A, H)) == orientation(C, H, midpoint(A, H)) mod 360, orientation(A, C, H) == orientation(C, H, midpoint(A, H)) mod 360
By between_implies_orientation on midpoint(D, F), F, A, B we get orientation(A, B, midpoint(D, F)) == orientation(A, midpoint(D, F), F) mod 360, orientation(A, midpoint(D, F), F) == orientation(B, midpoint(D, F), F) mod 360
By between_implies_orientation on E, A, midpoint(A, H), H we get orientation(A, midpoint(A, H), E) == orientation(E, midpoint(A, H), H) mod 360, orientation(A, H, E) == orientation(A, midpoint(A, H), E) mod 360
By between_implies_orientation on line_intersection(Line(B, D), Line(C, F)), A, E, D we get orientation(A, E, line_intersection(Line(B, D), Line(C, F))) == orientation(D, line_intersection(Line(B, D), Line(C, F)), E) mod 360, orientation(A, D, line_intersection(Line(B, D), Line(C, F))) == orientation(A, E, line_intersection(Line(B, D), Line(C, F))) mod 360
By between_implies_orientation on midpoint(D, F), B, A, F we get orientation(A, F, midpoint(D, F)) == orientation(A, midpoint(D, F), B) mod 360, orientation(A, midpoint(D, F), B) == orientation(B, F, midpoint(D, F)) mod 360
By between_implies_orientation on C, A, midpoint(A, H), H we get orientation(A, midpoint(A, H), C) == orientation(C, midpoint(A, H), H) mod 360, orientation(A, H, C) == orientation(A, midpoint(A, H), C) mod 360
By collinear_and_not_between_implies_orientation on G, midpoint(D, F), F, D we get orientation(D, G, F) == orientation(F, midpoint(D, F), G) mod 360
By between_implies_orientation on midpoint(D, F), A, E, D we get orientation(A, E, midpoint(D, F)) == orientation(D, midpoint(D, F), E) mod 360, orientation(A, D, midpoint(D, F)) == orientation(A, E, midpoint(D, F)) mod 360
By collinear_and_not_between_implies_orientation on midpoint(A, H), C, D, H we get orientation(C, midpoint(A, H), D) == orientation(D, H, midpoint(A, H)) mod 360
By collinear_and_not_between_implies_orientation on midpoint(D, F), D, C, H we get orientation(C, D, midpoint(D, F)) == orientation(C, H, midpoint(D, F)) mod 360
By between_implies_orientation on C, D, midpoint(D, F), F we get orientation(C, D, midpoint(D, F)) == orientation(C, midpoint(D, F), F) mod 360, orientation(C, D, F) == orientation(C, D, midpoint(D, F)) mod 360
By collinear_and_not_between_implies_orientation on midpoint(A, H), D, C, H we get orientation(C, D, midpoint(A, H)) == orientation(C, H, midpoint(A, H)) mod 360
By collinear_and_not_between_implies_orientation on D, H, A, midpoint(A, H) we get orientation(A, H, D) == orientation(A, midpoint(A, H), D) mod 360
By collinear_and_not_between_implies_orientation on I, A, H, midpoint(A, H) we get orientation(A, I, H) == orientation(H, midpoint(A, H), I) mod 360
By collinear_and_not_between_implies_orientation on B, H, A, midpoint(A, H) we get orientation(A, H, B) == orientation(A, midpoint(A, H), B) mod 360
By between_implies_orientation on B, A, midpoint(A, H), H we get orientation(A, midpoint(A, H), B) == orientation(B, midpoint(A, H), H) mod 360, orientation(A, H, B) == orientation(A, midpoint(A, H), B) mod 360
By collinear_and_not_between_implies_orientation on midpoint(A, H), B, F, A we get orientation(A, midpoint(A, H), F) == orientation(B, midpoint(A, H), F) mod 360
By collinear_and_not_between_implies_orientation on E, F, D, midpoint(D, F) we get orientation(D, F, E) == orientation(D, midpoint(D, F), E) mod 360
By between_implies_orientation on G, D, midpoint(D, F), F we get orientation(D, midpoint(D, F), G) == orientation(F, G, midpoint(D, F)) mod 360, orientation(D, F, G) == orientation(D, midpoint(D, F), G) mod 360
By between_implies_orientation on E, F, midpoint(D, F), D we get orientation(D, E, midpoint(D, F)) == orientation(E, F, midpoint(D, F)) mod 360, orientation(D, E, F) == orientation(E, F, midpoint(D, F)) mod 360
By between_implies_orientation on G, A, midpoint(A, H), H we get orientation(A, midpoint(A, H), G) == orientation(G, midpoint(A, H), H) mod 360, orientation(A, H, G) == orientation(A, midpoint(A, H), G) mod 360
By between_implies_orientation on midpoint(A, H), D, H, C we get orientation(C, midpoint(A, H), H) == orientation(D, H, midpoint(A, H)) mod 360, orientation(C, midpoint(A, H), D) == orientation(D, H, midpoint(A, H)) mod 360
By between_implies_orientation on I, A, midpoint(A, H), H we get orientation(A, midpoint(A, H), I) == orientation(H, I, midpoint(A, H)) mod 360, orientation(A, H, I) == orientation(A, midpoint(A, H), I) mod 360
By between_implies_orientation on C, F, midpoint(D, F), D we get orientation(C, F, midpoint(D, F)) == orientation(C, midpoint(D, F), D) mod 360, orientation(C, F, D) == orientation(C, F, midpoint(D, F)) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(Line(B, D), Line(C, F)), I, B, C we get orientation(B, C, line_intersection(Line(B, D), Line(C, F))) == orientation(B, I, line_intersection(Line(B, D), Line(C, F))) mod 360
By between_implies_orientation on B, D, midpoint(D, F), F we get orientation(B, D, midpoint(D, F)) == orientation(B, midpoint(D, F), F) mod 360, orientation(B, D, F) == orientation(B, D, midpoint(D, F)) mod 360
By between_implies_orientation on E, D, midpoint(D, F), F we get orientation(D, midpoint(D, F), E) == orientation(E, midpoint(D, F), F) mod 360, orientation(D, F, E) == orientation(D, midpoint(D, F), E) mod 360
By between_implies_orientation on line_intersection(Line(B, D), Line(C, F)), C, H, D we get orientation(C, H, line_intersection(Line(B, D), Line(C, F))) == orientation(D, line_intersection(Line(B, D), Line(C, F)), H) mod 360, orientation(C, D, line_intersection(Line(B, D), Line(C, F))) == orientation(C, H, line_intersection(Line(B, D), Line(C, F))) mod 360
By between_implies_orientation on midpoint(A, H), C, H, D we get orientation(C, H, midpoint(A, H)) == orientation(D, midpoint(A, H), H) mod 360, orientation(C, D, midpoint(A, H)) == orientation(C, H, midpoint(A, H)) mod 360
By collinear_and_not_between_implies_orientation on D, A, H, midpoint(A, H) we get orientation(A, D, H) == orientation(D, H, midpoint(A, H)) mod 360
By between_implies_orientation on line_intersection(Line(B, D), Line(C, F)), D, E, A we get orientation(A, line_intersection(Line(B, D), Line(C, F)), E) == orientation(D, E, line_intersection(Line(B, D), Line(C, F))) mod 360, orientation(A, line_intersection(Line(B, D), Line(C, F)), D) == orientation(D, E, line_intersection(Line(B, D), Line(C, F))) mod 360
By between_implies_orientation on H, F, midpoint(D, F), D we get orientation(D, H, midpoint(D, F)) == orientation(F, midpoint(D, F), H) mod 360, orientation(D, H, F) == orientation(F, midpoint(D, F), H) mod 360
By between_implies_orientation on line_intersection(Line(B, D), Line(C, F)), F, D, I we get orientation(D, I, line_intersection(Line(B, D), Line(C, F))) == orientation(D, line_intersection(Line(B, D), Line(C, F)), F) mod 360, orientation(D, line_intersection(Line(B, D), Line(C, F)), F) == orientation(F, I, line_intersection(Line(B, D), Line(C, F))) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(Line(B, D), Line(C, F)), H, D, C we get orientation(C, line_intersection(Line(B, D), Line(C, F)), D) == orientation(D, H, line_intersection(Line(B, D), Line(C, F))) mod 360
By between_implies_orientation on midpoint(A, H), F, A, B we get orientation(A, B, midpoint(A, H)) == orientation(A, midpoint(A, H), F) mod 360, orientation(A, midpoint(A, H), F) == orientation(B, midpoint(A, H), F) mod 360
By between_implies_orientation on G, F, midpoint(D, F), D we get orientation(D, G, midpoint(D, F)) == orientation(F, midpoint(D, F), G) mod 360, orientation(D, G, F) == orientation(F, midpoint(D, F), G) mod 360
By between_implies_orientation on I, H, midpoint(A, H), A we get orientation(A, I, midpoint(A, H)) == orientation(H, midpoint(A, H), I) mod 360, orientation(A, I, H) == orientation(H, midpoint(A, H), I) mod 360
By between_implies_orientation on D, A, midpoint(A, H), H we get orientation(A, midpoint(A, H), D) == orientation(D, midpoint(A, H), H) mod 360, orientation(A, H, D) == orientation(A, midpoint(A, H), D) mod 360
By between_implies_orientation on midpoint(A, H), B, A, F we get orientation(A, F, midpoint(A, H)) == orientation(A, midpoint(A, H), B) mod 360, orientation(A, midpoint(A, H), B) == orientation(B, F, midpoint(A, H)) mod 360
By between_implies_orientation on line_intersection(Line(B, D), Line(C, F)), B, C, I we get orientation(B, C, line_intersection(Line(B, D), Line(C, F))) == orientation(C, I, line_intersection(Line(B, D), Line(C, F))) mod 360, orientation(B, C, line_intersection(Line(B, D), Line(C, F))) == orientation(B, I, line_intersection(Line(B, D), Line(C, F))) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(Line(B, D), Line(C, F)), A, F, B we get orientation(A, line_intersection(Line(B, D), Line(C, F)), F) == orientation(B, line_intersection(Line(B, D), Line(C, F)), F) mod 360
By between_implies_orientation on line_intersection(Line(B, D), Line(C, F)), D, H, C we get orientation(C, line_intersection(Line(B, D), Line(C, F)), H) == orientation(D, H, line_intersection(Line(B, D), Line(C, F))) mod 360, orientation(C, line_intersection(Line(B, D), Line(C, F)), D) == orientation(D, H, line_intersection(Line(B, D), Line(C, F))) mod 360
By between_implies_orientation on midpoint(D, F), C, H, D we get orientation(C, H, midpoint(D, F)) == orientation(D, midpoint(D, F), H) mod 360, orientation(C, D, midpoint(D, F)) == orientation(C, H, midpoint(D, F)) mod 360
By between_implies_orientation on G, H, midpoint(A, H), A we get orientation(A, G, midpoint(A, H)) == orientation(G, H, midpoint(A, H)) mod 360, orientation(A, G, H) == orientation(G, H, midpoint(A, H)) mod 360
By between_implies_orientation on midpoint(A, H), B, C, I we get orientation(B, C, midpoint(A, H)) == orientation(C, I, midpoint(A, H)) mod 360, orientation(B, C, midpoint(A, H)) == orientation(B, I, midpoint(A, H)) mod 360
By between_implies_orientation on line_intersection(Line(B, D), Line(C, F)), I, D, F we get orientation(D, F, line_intersection(Line(B, D), Line(C, F))) == orientation(D, line_intersection(Line(B, D), Line(C, F)), I) mod 360, orientation(D, line_intersection(Line(B, D), Line(C, F)), I) == orientation(F, line_intersection(Line(B, D), Line(C, F)), I) mod 360
By between_implies_orientation on midpoint(A, H), I, C, B we get orientation(B, midpoint(A, H), C) == orientation(C, midpoint(A, H), I) mod 360, orientation(B, midpoint(A, H), I) == orientation(C, midpoint(A, H), I) mod 360
By between_implies_orientation on line_intersection(Line(B, D), Line(C, F)), F, A, B we get orientation(A, B, line_intersection(Line(B, D), Line(C, F))) == orientation(A, line_intersection(Line(B, D), Line(C, F)), F) mod 360, orientation(A, line_intersection(Line(B, D), Line(C, F)), F) == orientation(B, line_intersection(Line(B, D), Line(C, F)), F) mod 360
By between_implies_orientation on midpoint(A, H), A, E, D we get orientation(A, E, midpoint(A, H)) == orientation(D, midpoint(A, H), E) mod 360, orientation(A, D, midpoint(A, H)) == orientation(A, E, midpoint(A, H)) mod 360
By between_implies_orientation on D, H, midpoint(A, H), A we get orientation(A, D, midpoint(A, H)) == orientation(D, H, midpoint(A, H)) mod 360, orientation(A, D, H) == orientation(D, H, midpoint(A, H)) mod 360
By parallel_line_definition on line_intersection(j, median(A, D, F)), j, k we get j == parallel_line(line_intersection(j, median(A, D, F)), k)
By different_points_v1 on A, I we get 0 != distance(A, I)
By parallel_line_angles_reverse_v0 on B, I, A, E we get angle(B, I, A) == angle(E, A, I) mod 360
By sss_anti_congruence_v1 on midpoint(A, H), F, H, midpoint(A, H), F, A we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By divide_by_2_mod_180_v0 on F, A, midpoint(D, F), H, F, midpoint(A, H) we get angle(F, A, midpoint(D, F)) == angle(H, F, midpoint(A, H)) mod 360
By divide_by_2_mod_180_v0 on F, A, midpoint(D, F), midpoint(A, H), F, A we get angle(F, A, midpoint(D, F)) == angle(midpoint(A, H), F, A) mod 360
By parallel_line_angles_reverse_v0 on D, A, I, C we get angle(C, I, A) == angle(D, A, I) mod 360
By parallel_line_angles_reverse_v0 on B, I, A, D we get angle(B, I, A) == angle(D, A, I) mod 360
By divide_by_2_mod_180_v0 on midpoint(A, H), F, A, midpoint(D, F), A, D we get angle(midpoint(A, H), F, A) == angle(midpoint(D, F), A, D) mod 360
By sss_anti_congruence_v0 on midpoint(A, H), F, A, midpoint(A, H), F, H we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By in_imply_collinear on line_intersection(j, median(A, D, F)), E, C we get collinear(C, E, line_intersection(j, median(A, D, F)))
By line_containment_inequality on line_intersection(j, median(A, D, F)), F, median(A, D, F) we get F != line_intersection(j, median(A, D, F))
By in_imply_collinear on line_intersection(j, median(A, D, F)), midpoint(D, F), A we get collinear(A, midpoint(D, F), line_intersection(j, median(A, D, F)))
By sss_anti_congruence_v1 on A, F, midpoint(A, H), H, F, midpoint(A, H) we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By in_imply_collinear on line_intersection(j, median(A, D, F)), A, center(d) we get collinear(A, center(d), line_intersection(j, median(A, D, F)))
By sss_anti_congruence_v1 on midpoint(D, F), D, A, midpoint(D, F), F, A we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By divide_by_2_mod_180_v1 on D, A, midpoint(D, F), midpoint(A, H), F, H we get angle(D, A, midpoint(D, F)) == angle(midpoint(A, H), F, H) mod 360
By asa_anti_congruence on midpoint(D, F), A, F, midpoint(D, F), A, D we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sss_anti_congruence_v0 on F, A, midpoint(A, H), F, H, midpoint(A, H) we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By sss_anti_congruence_v0 on H, F, midpoint(A, H), A, F, midpoint(A, H) we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By parallel_line_angles_reverse_v0 on E, A, I, C we get angle(C, I, A) == angle(E, A, I) mod 360
By sss_anti_congruence_v1 on A, F, midpoint(D, F), A, D, midpoint(D, F) we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By divide_by_2_mod_180_v1 on A, F, midpoint(A, H), midpoint(D, F), A, F we get angle(A, F, midpoint(A, H)) == angle(midpoint(D, F), A, F) mod 360
By divide_by_2_mod_180_v1 on midpoint(A, H), F, H, midpoint(D, F), A, F we get angle(midpoint(A, H), F, H) == angle(midpoint(D, F), A, F) mod 360
By sss_anti_congruence_v0 on A, D, midpoint(D, F), A, F, midpoint(D, F) we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sss_anti_congruence_v0 on midpoint(D, F), F, A, midpoint(D, F), D, A we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sas_anti_congruence on D, A, midpoint(D, F), F, A, midpoint(D, F) we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By asa_anti_congruence on midpoint(A, H), F, H, midpoint(A, H), F, A we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(A, H), F, B we get not_collinear(B, F, midpoint(A, H)), exists(Line(B, F))
By sss_anti_congruence_v1 on midpoint(D, F), D, A, midpoint(D, F), F, A we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By divide_by_2_mod_180_v0 on H, F, midpoint(A, H), midpoint(D, F), A, D we get angle(H, F, midpoint(A, H)) == angle(midpoint(D, F), A, D) mod 360
By sss_anti_congruence_v1 on H, midpoint(A, H), F, A, midpoint(A, H), F we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By divide_by_2_mod_180_v1 on D, A, midpoint(D, F), A, F, midpoint(A, H) we get angle(A, F, midpoint(A, H)) == angle(D, A, midpoint(D, F)) mod 360
By sas_anti_congruence on midpoint(A, H), F, A, midpoint(A, H), F, H we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By line_inequality on median(A, D, F), f, midpoint(D, F) we get f != median(A, D, F)
By sas_anti_congruence on F, midpoint(D, F), A, D, midpoint(D, F), A we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sss_anti_congruence_v0 on A, midpoint(D, F), F, A, midpoint(D, F), D we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sss_anti_congruence_v1 on F, H, midpoint(A, H), F, A, midpoint(A, H) we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By sss_anti_congruence_v1 on F, midpoint(D, F), A, D, midpoint(D, F), A we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sss_anti_congruence_v0 on F, midpoint(A, H), H, F, midpoint(A, H), A we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(A, H), E, D we get not_collinear(D, E, midpoint(A, H)), exists(Line(D, E))
By sas_anti_congruence on midpoint(A, H), H, F, midpoint(D, F), D, A we get anti_congruent_triangles(A, D, midpoint(D, F), F, H, midpoint(A, H))
By sss_anti_congruence_v1 on A, F, midpoint(D, F), A, D, midpoint(D, F) we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sss_anti_congruence_v0 on A, midpoint(D, F), F, A, midpoint(D, F), D we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sss_anti_congruence_v1 on A, midpoint(D, F), D, A, midpoint(D, F), F we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sas_anti_congruence on A, F, midpoint(A, H), H, F, midpoint(A, H) we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By line_inequality on Line(A, I), k, A we get k != Line(A, I)
By asa_anti_congruence on A, midpoint(D, F), D, A, midpoint(D, F), F we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By line_inequality on Line(A, I), Line(B, D), A we get Line(A, I) != Line(B, D)
By sss_anti_congruence_v0 on A, midpoint(D, F), F, A, midpoint(D, F), D we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By line_inequality on Line(A, I), Line(E, G), I we get Line(A, I) != Line(E, G)
By sss_anti_congruence_v1 on H, midpoint(A, H), F, A, midpoint(A, H), F we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By sss_anti_congruence_v0 on A, D, midpoint(D, F), A, F, midpoint(D, F) we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sss_anti_congruence_v1 on D, A, midpoint(D, F), F, A, midpoint(D, F) we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By aa_anti_similarity on F, midpoint(D, F), A, D, midpoint(D, F), A we get anti_similar_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sss_anti_congruence_v1 on F, midpoint(A, H), A, F, midpoint(A, H), H we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By asa_anti_congruence on midpoint(A, H), F, A, midpoint(A, H), F, H we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By sss_anti_congruence_v1 on midpoint(D, F), A, F, midpoint(D, F), A, D we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sss_anti_congruence_v1 on F, midpoint(D, F), A, D, midpoint(D, F), A we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sss_anti_congruence_v1 on F, midpoint(D, F), A, D, midpoint(D, F), A we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sss_anti_congruence_v1 on D, A, midpoint(D, F), F, A, midpoint(D, F) we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sss_anti_congruence_v1 on A, midpoint(D, F), D, A, midpoint(D, F), F we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sss_anti_congruence_v0 on A, midpoint(D, F), F, A, midpoint(D, F), D we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sss_anti_congruence_v1 on midpoint(D, F), A, F, midpoint(D, F), A, D we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sss_anti_congruence_v0 on F, midpoint(A, H), H, F, midpoint(A, H), A we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By asa_anti_congruence on midpoint(D, F), A, D, midpoint(D, F), A, F we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By line_inequality on Line(A, I), Line(B, E), I we get Line(A, I) != Line(B, E)
By sss_anti_congruence_v1 on F, H, midpoint(A, H), F, A, midpoint(A, H) we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By reverse_direction on A, midpoint(D, F) we get 180 == direction(A, midpoint(D, F)) - direction(midpoint(D, F), A) mod 360
By sss_anti_congruence_v1 on A, F, midpoint(D, F), A, D, midpoint(D, F) we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sss_anti_congruence_v1 on A, F, midpoint(D, F), A, D, midpoint(D, F) we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sas_anti_similarity on midpoint(A, H), H, F, midpoint(D, F), D, A we get anti_similar_triangles(A, D, midpoint(D, F), F, H, midpoint(A, H))
By sss_anti_congruence_v1 on F, midpoint(A, H), A, F, midpoint(A, H), H we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By sss_anti_congruence_v1 on midpoint(A, H), A, F, midpoint(A, H), H, F we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By sss_anti_congruence_v1 on midpoint(A, H), A, F, midpoint(A, H), H, F we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By sas_anti_congruence on F, A, midpoint(D, F), D, A, midpoint(D, F) we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sss_anti_congruence_v1 on F, midpoint(A, H), A, F, midpoint(A, H), H we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By sss_anti_congruence_v0 on F, midpoint(A, H), H, F, midpoint(A, H), A we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By aa_anti_similarity on D, midpoint(D, F), A, F, midpoint(D, F), A we get anti_similar_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By line_inequality on f, median(F, A, H), A we get f != median(F, A, H)
By aa_anti_similarity on F, midpoint(A, H), H, A, midpoint(D, F), D we get anti_similar_triangles(A, D, midpoint(D, F), F, H, midpoint(A, H))
By sas_anti_congruence on F, midpoint(A, H), A, F, midpoint(A, H), H we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By sas_anti_congruence on F, H, midpoint(A, H), A, D, midpoint(D, F) we get anti_congruent_triangles(A, D, midpoint(D, F), F, H, midpoint(A, H))
By sss_anti_congruence_v1 on H, midpoint(A, H), F, A, midpoint(A, H), F we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By sss_anti_congruence_v0 on F, A, midpoint(D, F), D, A, midpoint(D, F) we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sss_anti_congruence_v0 on midpoint(A, H), F, A, midpoint(A, H), F, H we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By sss_anti_congruence_v1 on A, F, midpoint(A, H), H, F, midpoint(A, H) we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By sss_anti_congruence_v0 on F, A, midpoint(D, F), D, A, midpoint(D, F) we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sss_anti_congruence_v0 on F, midpoint(A, H), H, F, midpoint(A, H), A we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By aa_anti_similarity on H, midpoint(A, H), F, A, midpoint(A, H), F we get anti_similar_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By sss_anti_congruence_v0 on midpoint(A, H), H, F, midpoint(A, H), A, F we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By sss_anti_congruence_v0 on A, midpoint(A, H), F, H, midpoint(A, H), F we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By sss_anti_congruence_v0 on midpoint(D, F), A, D, midpoint(D, F), A, F we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sss_anti_congruence_v1 on A, F, midpoint(D, F), A, D, midpoint(D, F) we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sss_anti_congruence_v0 on A, midpoint(D, F), F, A, midpoint(D, F), D we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By aa_anti_similarity on D, A, midpoint(D, F), F, A, midpoint(D, F) we get anti_similar_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sss_anti_congruence_v1 on midpoint(A, H), A, F, midpoint(A, H), H, F we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By sss_anti_congruence_v0 on midpoint(A, H), F, A, midpoint(A, H), F, H we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By sss_anti_congruence_v0 on F, A, midpoint(A, H), F, H, midpoint(A, H) we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By sas_anti_congruence on A, midpoint(D, F), D, A, midpoint(D, F), F we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sss_anti_congruence_v0 on A, D, midpoint(D, F), A, F, midpoint(D, F) we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sas_anti_similarity on A, D, midpoint(D, F), F, H, midpoint(A, H) we get anti_similar_triangles(A, D, midpoint(D, F), F, H, midpoint(A, H))
By not_in_line_equivalent_to_not_collinear_v0_r on E, I, A we get E not in Line(A, I)
By sss_anti_congruence_v1 on midpoint(A, H), F, H, midpoint(A, H), F, A we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By sss_anti_congruence_v0 on D, midpoint(D, F), A, F, midpoint(D, F), A we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sss_anti_congruence_v0 on A, midpoint(A, H), F, H, midpoint(A, H), F we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By aa_anti_similarity on A, D, midpoint(D, F), F, H, midpoint(A, H) we get anti_similar_triangles(A, D, midpoint(D, F), F, H, midpoint(A, H))
By sas_anti_congruence on H, midpoint(A, H), F, A, midpoint(A, H), F we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By not_in_line_equivalent_to_not_collinear_v0 on H, center(d), F we get not_collinear(F, H, center(d)), exists(Line(F, center(d)))
By line_inequality on Line(A, center(c)), Line(E, I), A we get Line(E, I) != Line(A, center(c))
By sss_anti_congruence_v0 on midpoint(D, F), A, D, midpoint(D, F), A, F we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sss_anti_congruence_v1 on midpoint(A, H), F, H, midpoint(A, H), F, A we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By point_on_perpendicular_bisector on F, D, line_intersection(j, median(A, D, F)), median(A, D, F) we get distance(D, line_intersection(j, median(A, D, F))) == distance(F, line_intersection(j, median(A, D, F)))
By sss_anti_congruence_v1 on D, A, midpoint(D, F), F, A, midpoint(D, F) we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sss_anti_congruence_v0 on D, midpoint(D, F), A, F, midpoint(D, F), A we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sss_anti_congruence_v1 on H, midpoint(A, H), F, A, midpoint(A, H), F we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By line_inequality on Line(A, I), Line(F, G), A we get Line(A, I) != Line(F, G)
By sss_anti_congruence_v0 on F, A, midpoint(D, F), D, A, midpoint(D, F) we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sss_anti_congruence_v1 on D, A, midpoint(D, F), F, A, midpoint(D, F) we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sss_anti_congruence_v0 on A, midpoint(A, H), F, H, midpoint(A, H), F we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By asa_anti_congruence on F, midpoint(A, H), H, F, midpoint(A, H), A we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By sss_anti_congruence_v0 on midpoint(D, F), A, D, midpoint(D, F), A, F we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sss_anti_congruence_v0 on F, A, midpoint(D, F), D, A, midpoint(D, F) we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sas_anti_congruence on midpoint(D, F), A, D, midpoint(D, F), A, F we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sss_anti_congruence_v0 on D, midpoint(D, F), A, F, midpoint(D, F), A we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By aa_anti_similarity on A, midpoint(D, F), D, F, midpoint(A, H), H we get anti_similar_triangles(A, D, midpoint(D, F), F, H, midpoint(A, H))
By sss_anti_congruence_v0 on D, midpoint(D, F), A, F, midpoint(D, F), A we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By reverse_direction on F, midpoint(A, H) we get 180 == direction(F, midpoint(A, H)) - direction(midpoint(A, H), F) mod 360
By sss_anti_congruence_v1 on D, A, midpoint(D, F), F, A, midpoint(D, F) we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sas_anti_congruence on midpoint(A, H), F, H, midpoint(A, H), F, A we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By sss_anti_congruence_v0 on A, midpoint(A, H), F, H, midpoint(A, H), F we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By sss_anti_congruence_v1 on midpoint(D, F), D, A, midpoint(D, F), F, A we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sss_anti_congruence_v0 on midpoint(D, F), F, A, midpoint(D, F), D, A we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sss_anti_congruence_v0 on midpoint(D, F), F, A, midpoint(D, F), D, A we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sss_anti_congruence_v1 on H, midpoint(A, H), F, A, midpoint(A, H), F we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By sss_anti_congruence_v1 on midpoint(A, H), F, H, midpoint(A, H), F, A we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By sss_anti_congruence_v0 on F, A, midpoint(A, H), F, H, midpoint(A, H) we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By line_inequality on Line(A, I), Line(B, H), I we get Line(A, I) != Line(B, H)
By sss_anti_congruence_v1 on midpoint(A, H), A, F, midpoint(A, H), H, F we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By sss_anti_congruence_v1 on A, F, midpoint(D, F), A, D, midpoint(D, F) we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By aa_anti_similarity on F, A, midpoint(D, F), D, A, midpoint(D, F) we get anti_similar_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sss_anti_congruence_v0 on midpoint(A, H), H, F, midpoint(A, H), A, F we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By sss_anti_congruence_v0 on F, midpoint(A, H), H, F, midpoint(A, H), A we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By sss_anti_congruence_v0 on A, midpoint(A, H), F, H, midpoint(A, H), F we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By sss_anti_congruence_v0 on A, D, midpoint(D, F), A, F, midpoint(D, F) we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sss_anti_congruence_v0 on midpoint(A, H), F, A, midpoint(A, H), F, H we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By sss_anti_congruence_v1 on F, midpoint(A, H), A, F, midpoint(A, H), H we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By sss_anti_congruence_v0 on F, A, midpoint(A, H), F, H, midpoint(A, H) we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By sss_anti_congruence_v1 on F, midpoint(A, H), A, F, midpoint(A, H), H we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By sas_anti_similarity on F, H, midpoint(A, H), A, D, midpoint(D, F) we get anti_similar_triangles(A, D, midpoint(D, F), F, H, midpoint(A, H))
By line_containment_inequality on line_intersection(j, median(A, D, F)), B, j we get B != line_intersection(j, median(A, D, F))
By sss_anti_congruence_v1 on F, H, midpoint(A, H), F, A, midpoint(A, H) we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By sss_anti_congruence_v1 on A, midpoint(D, F), D, A, midpoint(D, F), F we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sss_anti_congruence_v0 on F, A, midpoint(A, H), F, H, midpoint(A, H) we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By sas_anti_congruence on F, midpoint(A, H), H, F, midpoint(A, H), A we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By asa_anti_congruence on H, midpoint(A, H), F, D, midpoint(D, F), A we get anti_congruent_triangles(A, D, midpoint(D, F), F, H, midpoint(A, H))
By line_inequality on Line(A, I), Line(F, H), I we get Line(A, I) != Line(F, H)
By sss_anti_congruence_v0 on A, D, midpoint(D, F), A, F, midpoint(D, F) we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sas_anti_congruence on A, midpoint(D, F), F, A, midpoint(D, F), D we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By not_in_line_equivalent_to_not_collinear_v0_r on midpoint(A, H), A, I we get midpoint(A, H) not in Line(A, I)
By sss_anti_congruence_v1 on F, midpoint(D, F), A, D, midpoint(D, F), A we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sas_anti_similarity on midpoint(D, F), D, A, midpoint(A, H), H, F we get anti_similar_triangles(A, D, midpoint(D, F), F, H, midpoint(A, H))
By sss_anti_congruence_v1 on midpoint(D, F), A, F, midpoint(D, F), A, D we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sss_anti_congruence_v1 on D, A, midpoint(D, F), F, A, midpoint(D, F) we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sss_anti_congruence_v0 on D, midpoint(D, F), A, F, midpoint(D, F), A we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sss_anti_congruence_v0 on H, F, midpoint(A, H), A, F, midpoint(A, H) we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By sss_anti_congruence_v0 on midpoint(A, H), H, F, midpoint(A, H), A, F we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(D, F), B, A we get not_collinear(A, B, midpoint(D, F)), exists(Line(A, B))
By sss_anti_congruence_v0 on midpoint(A, H), H, F, midpoint(A, H), A, F we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By sas_anti_congruence on D, midpoint(D, F), A, F, midpoint(D, F), A we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sss_anti_congruence_v0 on F, midpoint(A, H), H, F, midpoint(A, H), A we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By sss_anti_congruence_v1 on midpoint(D, F), A, F, midpoint(D, F), A, D we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sss_anti_congruence_v0 on A, midpoint(D, F), F, A, midpoint(D, F), D we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sss_anti_congruence_v1 on F, H, midpoint(A, H), F, A, midpoint(A, H) we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By aa_anti_similarity on A, F, midpoint(A, H), H, F, midpoint(A, H) we get anti_similar_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By sas_anti_congruence on A, D, midpoint(D, F), F, H, midpoint(A, H) we get anti_congruent_triangles(A, D, midpoint(D, F), F, H, midpoint(A, H))
By sss_anti_congruence_v0 on A, midpoint(A, H), F, H, midpoint(A, H), F we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By asa_anti_congruence on D, midpoint(D, F), A, H, midpoint(A, H), F we get anti_congruent_triangles(A, D, midpoint(D, F), F, H, midpoint(A, H))
By sss_anti_congruence_v0 on midpoint(D, F), A, D, midpoint(D, F), A, F we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By not_in_line_equivalent_to_not_collinear_v0 on D, center(d), A we get not_collinear(A, D, center(d)), exists(Line(A, center(d)))
By asa_anti_congruence on F, midpoint(A, H), A, F, midpoint(A, H), H we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By aa_anti_similarity on H, F, midpoint(A, H), A, F, midpoint(A, H) we get anti_similar_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By sss_anti_congruence_v1 on F, H, midpoint(A, H), F, A, midpoint(A, H) we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By sss_anti_congruence_v1 on H, midpoint(A, H), F, A, midpoint(A, H), F we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By sss_anti_congruence_v1 on midpoint(D, F), D, A, midpoint(D, F), F, A we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sss_anti_congruence_v1 on midpoint(A, H), F, H, midpoint(A, H), F, A we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By sss_anti_congruence_v1 on midpoint(A, H), F, H, midpoint(A, H), F, A we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By sss_anti_congruence_v1 on A, midpoint(D, F), D, A, midpoint(D, F), F we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By asa_anti_congruence on A, midpoint(D, F), F, A, midpoint(D, F), D we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sss_anti_congruence_v0 on F, A, midpoint(A, H), F, H, midpoint(A, H) we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By not_in_line_equivalent_to_not_collinear_v0_r on C, I, A we get C not in Line(A, I)
By sss_anti_congruence_v0 on H, F, midpoint(A, H), A, F, midpoint(A, H) we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(D, F), E, A we get not_collinear(A, E, midpoint(D, F)), exists(Line(A, E))
By sss_anti_congruence_v0 on midpoint(A, H), H, F, midpoint(A, H), A, F we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By sss_anti_congruence_v0 on midpoint(A, H), F, A, midpoint(A, H), F, H we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By not_in_line_equivalent_to_not_collinear_v0 on A, F, center(d) we get not_collinear(A, F, center(d)), exists(Line(F, center(d)))
By sss_anti_congruence_v0 on H, F, midpoint(A, H), A, F, midpoint(A, H) we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By sss_anti_congruence_v1 on midpoint(D, F), D, A, midpoint(D, F), F, A we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sas_anti_congruence on midpoint(D, F), D, A, midpoint(A, H), H, F we get anti_congruent_triangles(A, D, midpoint(D, F), F, H, midpoint(A, H))
By sss_anti_congruence_v1 on midpoint(A, H), A, F, midpoint(A, H), H, F we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By sss_anti_congruence_v1 on midpoint(D, F), D, A, midpoint(D, F), F, A we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sss_anti_congruence_v0 on midpoint(A, H), H, F, midpoint(A, H), A, F we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By sss_anti_congruence_v0 on F, A, midpoint(D, F), D, A, midpoint(D, F) we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sss_anti_congruence_v0 on midpoint(D, F), F, A, midpoint(D, F), D, A we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sss_anti_congruence_v1 on A, F, midpoint(A, H), H, F, midpoint(A, H) we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By asa_anti_congruence on midpoint(A, H), H, F, midpoint(D, F), D, A we get anti_congruent_triangles(A, D, midpoint(D, F), F, H, midpoint(A, H))
By sss_anti_congruence_v0 on midpoint(D, F), F, A, midpoint(D, F), D, A we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sss_anti_congruence_v1 on A, midpoint(D, F), D, A, midpoint(D, F), F we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sss_anti_congruence_v1 on A, F, midpoint(A, H), H, F, midpoint(A, H) we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By sss_anti_congruence_v1 on midpoint(D, F), A, F, midpoint(D, F), A, D we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sss_anti_congruence_v1 on midpoint(A, H), A, F, midpoint(A, H), H, F we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By not_in_line_equivalent_to_not_collinear_v0_r on B, I, A we get B not in Line(A, I)
By sas_anti_congruence on A, midpoint(A, H), F, H, midpoint(A, H), F we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By sss_anti_congruence_v0 on midpoint(D, F), A, D, midpoint(D, F), A, F we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sss_anti_congruence_v1 on A, F, midpoint(A, H), H, F, midpoint(A, H) we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By sss_anti_congruence_v0 on midpoint(D, F), F, A, midpoint(D, F), D, A we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By aa_anti_similarity on F, H, midpoint(A, H), A, D, midpoint(D, F) we get anti_similar_triangles(A, D, midpoint(D, F), F, H, midpoint(A, H))
By reverse_direction on midpoint(A, H), F we get 180 == direction(midpoint(A, H), F) - direction(F, midpoint(A, H)) mod 360
By sss_anti_congruence_v1 on F, midpoint(A, H), A, F, midpoint(A, H), H we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By sss_anti_congruence_v1 on F, H, midpoint(A, H), F, A, midpoint(A, H) we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By aa_anti_similarity on A, midpoint(A, H), F, H, midpoint(A, H), F we get anti_similar_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By sss_anti_congruence_v0 on midpoint(D, F), A, D, midpoint(D, F), A, F we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sss_anti_congruence_v1 on F, midpoint(D, F), A, D, midpoint(D, F), A we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sss_anti_congruence_v0 on D, midpoint(D, F), A, F, midpoint(D, F), A we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By line_inequality on i, median(A, D, F), D we get i != median(A, D, F)
By sss_anti_congruence_v1 on midpoint(D, F), A, F, midpoint(D, F), A, D we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sss_anti_congruence_v0 on F, A, midpoint(D, F), D, A, midpoint(D, F) we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sss_anti_congruence_v0 on midpoint(A, H), F, A, midpoint(A, H), F, H we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By sas_anti_congruence on midpoint(D, F), A, F, midpoint(D, F), A, D we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sss_anti_congruence_v1 on A, F, midpoint(A, H), H, F, midpoint(A, H) we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By line_inequality on Line(A, I), Line(A, H), I we get Line(A, H) != Line(A, I)
By sss_anti_congruence_v0 on A, D, midpoint(D, F), A, F, midpoint(D, F) we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By asa_anti_congruence on midpoint(D, F), D, A, midpoint(A, H), H, F we get anti_congruent_triangles(A, D, midpoint(D, F), F, H, midpoint(A, H))
By sss_anti_congruence_v1 on F, midpoint(D, F), A, D, midpoint(D, F), A we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sas_anti_congruence on H, F, midpoint(A, H), A, F, midpoint(A, H) we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By sss_anti_congruence_v0 on H, F, midpoint(A, H), A, F, midpoint(A, H) we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By line_inequality on Line(G, center(d)), Line(E, I), G we get Line(E, I) != Line(G, center(d))
By sss_anti_congruence_v1 on A, midpoint(D, F), D, A, midpoint(D, F), F we get anti_congruent_triangles(A, D, midpoint(D, F), A, F, midpoint(D, F))
By sss_anti_congruence_v0 on H, F, midpoint(A, H), A, F, midpoint(A, H) we get anti_congruent_triangles(A, F, midpoint(A, H), H, F, midpoint(A, H))
By reverse_direction on midpoint(D, F), A we get 180 == direction(midpoint(D, F), A) - direction(A, midpoint(D, F)) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on H, I, A we get H not in Line(A, I)
By line_inequality on median(F, A, H), Line(E, I), F we get Line(E, I) != median(F, A, H)
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(A, H), C, D we get not_collinear(C, D, midpoint(A, H)), exists(Line(C, D))
By line_inequality on Line(A, center(c)), median(F, A, H), A we get median(F, A, H) != Line(A, center(c))
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(D, F), C, H we get not_collinear(C, H, midpoint(D, F)), exists(Line(C, H))
By line_inequality on median(A, D, F), median(F, A, H), A we get median(A, D, F) != median(F, A, H)
By line_containment_inequality on line_intersection(j, median(A, D, F)), H, j we get H != line_intersection(j, median(A, D, F))
By not_in_line_equivalent_to_not_collinear_v0_r on D, I, A we get D not in Line(A, I)
By line_containment_inequality on line_intersection(Line(B, D), Line(C, F)), midpoint(D, F), Line(C, F) we get midpoint(D, F) != line_intersection(Line(B, D), Line(C, F))
By line_inequality on Line(H, center(d)), median(F, A, H), H we get median(F, A, H) != Line(H, center(d))
By line_containment_inequality on line_intersection(j, median(A, D, F)), I, j we get I != line_intersection(j, median(A, D, F))
By not_in_line_equivalent_to_not_collinear_v0_r on F, A, I we get F not in Line(A, I)
By line_inequality on Line(A, I), Line(B, G), A we get Line(A, I) != Line(B, G)
By line_inequality on Line(A, I), h, A we get h != Line(A, I)
By line_inequality on Line(A, I), Line(D, G), I we get Line(A, I) != Line(D, G)
By line_containment_inequality on line_intersection(j, median(A, D, F)), D, j we get D != line_intersection(j, median(A, D, F))
By line_inequality on Line(A, I), g, A we get g != Line(A, I)
By line_inequality on Line(A, I), Line(C, F), I we get Line(A, I) != Line(C, F)
By line_inequality on Line(A, I), i, I we get i != Line(A, I)
By line_circle_intersection_has_at_most_two_points_0 on F, C, line_intersection(Line(B, D), Line(C, F)), Circle(B, C, F) we get line_intersection(Line(B, D), Line(C, F)) not in Circle(B, C, F)
By line_inequality on Line(A, I), Line(G, H), A we get Line(A, I) != Line(G, H)
By line_inequality on Line(A, I), j, A we get j != Line(A, I)
By line_inequality on Line(A, I), median(F, A, H), A we get Line(A, I) != median(F, A, H)
By line_inequality on median(A, D, F), Line(E, I), A we get Line(E, I) != median(A, D, F)
By line_containment_inequality on line_intersection(j, median(A, D, F)), A, j we get A != line_intersection(j, median(A, D, F))
By line_inequality on Line(D, center(d)), Line(E, I), D we get Line(E, I) != Line(D, center(d))
By line_inequality on Line(A, I), Line(E, I), A we get Line(A, I) != Line(E, I)
By line_containment_inequality on line_intersection(j, median(A, D, F)), G, j we get G != line_intersection(j, median(A, D, F))
By line_inequality on median(F, A, H), Line(F, H), midpoint(A, H) we get Line(F, H) != median(F, A, H)
By line_inequality on Line(G, center(c)), Line(E, I), G we get Line(E, I) != Line(G, center(c))
By line_inequality on Line(A, I), f, I we get f != Line(A, I)
By line_inequality on Line(H, center(d)), Line(E, I), H we get Line(E, I) != Line(H, center(d))
By line_inequality on Line(D, center(d)), median(A, D, F), D we get median(A, D, F) != Line(D, center(d))
By line_inequality on Line(A, I), Line(A, C), I we get Line(A, C) != Line(A, I)
By line_inequality on Line(B, center(c)), Line(E, I), B we get Line(E, I) != Line(B, center(c))
By external_angle_bisector_definition_v0_r on F, H, F, midpoint(A, H) we get Line(H, midpoint(A, H)) == external_angle_bisector(F, midpoint(A, H), F)
By anti_similar_triangle_basic_properties on G, F, D, B, I, A we get not_collinear(D, F, G), not_collinear(A, B, I), angle(G, F, D) == 0 - angle(B, I, A) mod 360, angle(F, D, G) == 0 - angle(I, A, B) mod 360, angle(D, G, F) == 0 - angle(A, B, I) mod 360, log(distance(B, I)) + log(distance(D, F)) == log(distance(F, G)) + log(distance(A, I)), log(distance(A, I)) + log(distance(D, G)) == log(distance(D, F)) + log(distance(A, B)), log(distance(A, B)) + log(distance(F, G)) == log(distance(D, G)) + log(distance(B, I))
By external_angle_bisector_definition_v0_r on H, F, H, midpoint(A, H) we get Line(F, midpoint(A, H)) == external_angle_bisector(H, midpoint(A, H), H)
By external_angle_bisector_definition_v0_r on A, F, A, midpoint(D, F) we get Line(F, midpoint(D, F)) == external_angle_bisector(A, midpoint(D, F), A)
By external_angle_bisector_definition_v0_r on D, A, D, midpoint(D, F) we get Line(A, midpoint(D, F)) == external_angle_bisector(D, midpoint(D, F), D)
By external_angle_bisector_definition_v0_r on F, midpoint(D, F), I, D we get Line(D, midpoint(D, F)) == external_angle_bisector(F, D, I)
By external_angle_bisector_definition_v0_r on A, F, A, midpoint(A, H) we get Line(F, midpoint(A, H)) == external_angle_bisector(A, midpoint(A, H), A)
By collinear_definition on F, line_intersection(Line(B, D), Line(C, F)), C we get line_intersection(Line(B, D), Line(C, F)) in Line(C, F), C in Line(F, line_intersection(Line(B, D), Line(C, F))), Line(C, F) == Line(F, line_intersection(Line(B, D), Line(C, F))), 0 == 2 * angle(line_intersection(Line(B, D), Line(C, F)), F, C) mod 360
By external_angle_bisector_definition_v0_r on F, A, F, midpoint(A, H) we get Line(A, midpoint(A, H)) == external_angle_bisector(F, midpoint(A, H), F)
By internal_angle_bisector_definition_v0_r on center(d), midpoint(D, F), center(d), A we get Line(A, midpoint(D, F)) == internal_angle_bisector(center(d), A, center(d))
By internal_angle_bisector_definition_v0_r on midpoint(D, F), I, D, F we get Line(F, I) == internal_angle_bisector(D, F, midpoint(D, F))
By collinear_definition on C, F, line_intersection(Line(B, D), Line(C, F)) we get F in Line(C, line_intersection(Line(B, D), Line(C, F))), line_intersection(Line(B, D), Line(C, F)) in Line(C, F), Line(C, F) == Line(C, line_intersection(Line(B, D), Line(C, F))), 0 == 2 * angle(F, C, line_intersection(Line(B, D), Line(C, F))) mod 360
By external_angle_bisector_definition_v0_r on F, A, F, midpoint(D, F) we get Line(A, midpoint(D, F)) == external_angle_bisector(F, midpoint(D, F), F)
By collinear_definition on D, line_intersection(Line(B, D), Line(C, F)), B we get line_intersection(Line(B, D), Line(C, F)) in Line(B, D), B in Line(D, line_intersection(Line(B, D), Line(C, F))), Line(B, D) == Line(D, line_intersection(Line(B, D), Line(C, F))), 0 == 2 * angle(line_intersection(Line(B, D), Line(C, F)), D, B) mod 360
By anti_similar_triangle_basic_properties on B, A, I, G, E, B we get not_collinear(A, B, I), not_collinear(B, E, G), angle(B, A, I) == 0 - angle(G, E, B) mod 360, angle(A, I, B) == 0 - angle(E, B, G) mod 360, angle(I, B, A) == 0 - angle(B, G, E) mod 360, log(distance(A, B)) + log(distance(B, E)) == log(distance(E, G)) + log(distance(A, I)), log(distance(A, I)) + log(distance(B, G)) == log(distance(B, E)) + log(distance(B, I)), log(distance(B, G)) + log(distance(A, B)) == log(distance(B, I)) + log(distance(E, G))
By collinear_definition on E, I, line_intersection(Line(B, D), Line(C, F)) we get I in Line(E, line_intersection(Line(B, D), Line(C, F))), line_intersection(Line(B, D), Line(C, F)) in Line(E, I), Line(E, I) == Line(E, line_intersection(Line(B, D), Line(C, F))), 0 == 2 * angle(I, E, line_intersection(Line(B, D), Line(C, F))) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(D, F), center(d), midpoint(D, F), A we get Line(A, center(d)) == internal_angle_bisector(midpoint(D, F), A, midpoint(D, F))
By anti_similar_triangle_basic_properties on E, G, B, A, B, I we get not_collinear(B, E, G), not_collinear(A, B, I), angle(E, G, B) == 0 - angle(A, B, I) mod 360, angle(G, B, E) == 0 - angle(B, I, A) mod 360, angle(B, E, G) == 0 - angle(I, A, B) mod 360, log(distance(A, B)) + log(distance(B, G)) == log(distance(E, G)) + log(distance(B, I)), log(distance(B, G)) + log(distance(A, I)) == log(distance(B, I)) + log(distance(B, E)), log(distance(A, I)) + log(distance(E, G)) == log(distance(B, E)) + log(distance(A, B))
By external_angle_bisector_definition_v0_r on A, D, A, midpoint(D, F) we get Line(D, midpoint(D, F)) == external_angle_bisector(A, midpoint(D, F), A)
By collinear_definition on E, line_intersection(Line(B, D), Line(C, F)), I we get line_intersection(Line(B, D), Line(C, F)) in Line(E, I), I in Line(E, line_intersection(Line(B, D), Line(C, F))), Line(E, I) == Line(E, line_intersection(Line(B, D), Line(C, F))), 0 == 2 * angle(line_intersection(Line(B, D), Line(C, F)), E, I) mod 360
By anti_similar_triangle_basic_properties on G, D, F, B, A, I we get not_collinear(D, F, G), not_collinear(A, B, I), angle(G, D, F) == 0 - angle(B, A, I) mod 360, angle(D, F, G) == 0 - angle(A, I, B) mod 360, angle(F, G, D) == 0 - angle(I, B, A) mod 360, log(distance(A, B)) + log(distance(D, F)) == log(distance(D, G)) + log(distance(A, I)), log(distance(A, I)) + log(distance(F, G)) == log(distance(D, F)) + log(distance(B, I)), log(distance(B, I)) + log(distance(D, G)) == log(distance(F, G)) + log(distance(A, B))
By collinear_definition on D, B, line_intersection(Line(B, D), Line(C, F)) we get B in Line(D, line_intersection(Line(B, D), Line(C, F))), line_intersection(Line(B, D), Line(C, F)) in Line(B, D), Line(B, D) == Line(D, line_intersection(Line(B, D), Line(C, F))), 0 == 2 * angle(B, D, line_intersection(Line(B, D), Line(C, F))) mod 360
By collinear_definition on B, line_intersection(Line(B, D), Line(C, F)), D we get line_intersection(Line(B, D), Line(C, F)) in Line(B, D), D in Line(B, line_intersection(Line(B, D), Line(C, F))), Line(B, D) == Line(B, line_intersection(Line(B, D), Line(C, F))), 0 == 2 * angle(line_intersection(Line(B, D), Line(C, F)), B, D) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(D, F), I, F, D we get Line(D, I) == internal_angle_bisector(F, D, midpoint(D, F))
By internal_angle_bisector_definition_v0_r on midpoint(A, H), center(d), midpoint(A, H), F we get Line(F, center(d)) == internal_angle_bisector(midpoint(A, H), F, midpoint(A, H))
By collinear_definition on B, D, line_intersection(Line(B, D), Line(C, F)) we get D in Line(B, line_intersection(Line(B, D), Line(C, F))), line_intersection(Line(B, D), Line(C, F)) in Line(B, D), Line(B, D) == Line(B, line_intersection(Line(B, D), Line(C, F))), 0 == 2 * angle(D, B, line_intersection(Line(B, D), Line(C, F))) mod 360
By collinear_definition on I, line_intersection(Line(B, D), Line(C, F)), E we get line_intersection(Line(B, D), Line(C, F)) in Line(E, I), E in Line(I, line_intersection(Line(B, D), Line(C, F))), Line(E, I) == Line(I, line_intersection(Line(B, D), Line(C, F))), 0 == 2 * angle(line_intersection(Line(B, D), Line(C, F)), I, E) mod 360
By internal_angle_bisector_definition_v0_r on D, midpoint(D, F), I, F we get Line(F, midpoint(D, F)) == internal_angle_bisector(D, F, I)
By collinear_definition on C, line_intersection(Line(B, D), Line(C, F)), F we get line_intersection(Line(B, D), Line(C, F)) in Line(C, F), F in Line(C, line_intersection(Line(B, D), Line(C, F))), Line(C, F) == Line(C, line_intersection(Line(B, D), Line(C, F))), 0 == 2 * angle(line_intersection(Line(B, D), Line(C, F)), C, F) mod 360
By collinear_definition on I, E, line_intersection(Line(B, D), Line(C, F)) we get E in Line(I, line_intersection(Line(B, D), Line(C, F))), line_intersection(Line(B, D), Line(C, F)) in Line(E, I), Line(E, I) == Line(I, line_intersection(Line(B, D), Line(C, F))), 0 == 2 * angle(E, I, line_intersection(Line(B, D), Line(C, F))) mod 360
By collinear_definition on F, C, line_intersection(Line(B, D), Line(C, F)) we get C in Line(F, line_intersection(Line(B, D), Line(C, F))), line_intersection(Line(B, D), Line(C, F)) in Line(C, F), Line(C, F) == Line(F, line_intersection(Line(B, D), Line(C, F))), 0 == 2 * angle(C, F, line_intersection(Line(B, D), Line(C, F))) mod 360
By internal_angle_bisector_definition_v0_r on center(d), midpoint(A, H), center(d), F we get Line(F, midpoint(A, H)) == internal_angle_bisector(center(d), F, center(d))
By altitude_definition on A, F, midpoint(A, H), Line(A, H) we get Line(A, H) == altitude(A, F, midpoint(A, H))
By altitude_definition on F, midpoint(A, H), H, median(F, A, H) we get median(F, A, H) == altitude(F, H, midpoint(A, H))
By altitude_definition on F, A, midpoint(D, F), k we get k == altitude(F, A, midpoint(D, F))
By altitude_definition on D, midpoint(D, F), A, k we get k == altitude(D, A, midpoint(D, F))
By altitude_definition on A, D, midpoint(D, F), median(A, D, F) we get median(A, D, F) == altitude(A, D, midpoint(D, F))
By collinear_definition on line_intersection(Line(B, D), Line(C, F)), B, D we get B in Line(D, line_intersection(Line(B, D), Line(C, F))), D in Line(B, line_intersection(Line(B, D), Line(C, F))), Line(B, line_intersection(Line(B, D), Line(C, F))) == Line(D, line_intersection(Line(B, D), Line(C, F))), 0 == 2 * angle(B, line_intersection(Line(B, D), Line(C, F)), D) mod 360
By altitude_definition on F, A, midpoint(A, H), median(F, A, H) we get median(F, A, H) == altitude(F, A, midpoint(A, H))
By altitude_definition on A, midpoint(D, F), F, median(A, D, F) we get median(A, D, F) == altitude(A, F, midpoint(D, F))
By collinear_definition on line_intersection(Line(B, D), Line(C, F)), E, I we get E in Line(I, line_intersection(Line(B, D), Line(C, F))), I in Line(E, line_intersection(Line(B, D), Line(C, F))), Line(E, line_intersection(Line(B, D), Line(C, F))) == Line(I, line_intersection(Line(B, D), Line(C, F))), 0 == 2 * angle(E, line_intersection(Line(B, D), Line(C, F)), I) mod 360
By collinear_definition on line_intersection(Line(B, D), Line(C, F)), F, C we get F in Line(C, line_intersection(Line(B, D), Line(C, F))), C in Line(F, line_intersection(Line(B, D), Line(C, F))), Line(C, line_intersection(Line(B, D), Line(C, F))) == Line(F, line_intersection(Line(B, D), Line(C, F))), 0 == 2 * angle(F, line_intersection(Line(B, D), Line(C, F)), C) mod 360
By altitude_definition on H, midpoint(A, H), F, Line(A, H) we get Line(A, H) == altitude(H, F, midpoint(A, H))
By collinear_definition on line_intersection(Line(B, D), Line(C, F)), C, F we get C in Line(F, line_intersection(Line(B, D), Line(C, F))), F in Line(C, line_intersection(Line(B, D), Line(C, F))), Line(C, line_intersection(Line(B, D), Line(C, F))) == Line(F, line_intersection(Line(B, D), Line(C, F))), 0 == 2 * angle(C, line_intersection(Line(B, D), Line(C, F)), F) mod 360
By collinear_definition on line_intersection(Line(B, D), Line(C, F)), I, E we get I in Line(E, line_intersection(Line(B, D), Line(C, F))), E in Line(I, line_intersection(Line(B, D), Line(C, F))), Line(E, line_intersection(Line(B, D), Line(C, F))) == Line(I, line_intersection(Line(B, D), Line(C, F))), 0 == 2 * angle(I, line_intersection(Line(B, D), Line(C, F)), E) mod 360
By collinear_definition on line_intersection(Line(B, D), Line(C, F)), D, B we get D in Line(B, line_intersection(Line(B, D), Line(C, F))), B in Line(D, line_intersection(Line(B, D), Line(C, F))), Line(B, line_intersection(Line(B, D), Line(C, F))) == Line(D, line_intersection(Line(B, D), Line(C, F))), 0 == 2 * angle(D, line_intersection(Line(B, D), Line(C, F)), B) mod 360
By sas_anti_congruence on midpoint(A, H), H, D, midpoint(D, F), D, H we get anti_congruent_triangles(D, H, midpoint(A, H), H, D, midpoint(D, F))
By sas_anti_congruence on D, H, midpoint(A, H), H, D, midpoint(D, F) we get anti_congruent_triangles(D, H, midpoint(A, H), H, D, midpoint(D, F))
By sas_anti_similarity on midpoint(A, H), H, D, midpoint(D, F), D, H we get anti_similar_triangles(D, H, midpoint(A, H), H, D, midpoint(D, F))
By sas_anti_similarity on midpoint(D, F), D, H, midpoint(A, H), H, D we get anti_similar_triangles(D, H, midpoint(A, H), H, D, midpoint(D, F))
By sas_anti_congruence on H, D, midpoint(D, F), D, H, midpoint(A, H) we get anti_congruent_triangles(D, H, midpoint(A, H), H, D, midpoint(D, F))
By sas_anti_congruence on midpoint(D, F), D, H, midpoint(A, H), H, D we get anti_congruent_triangles(D, H, midpoint(A, H), H, D, midpoint(D, F))
By sas_anti_similarity on D, H, midpoint(A, H), H, D, midpoint(D, F) we get anti_similar_triangles(D, H, midpoint(A, H), H, D, midpoint(D, F))
By sas_anti_similarity on H, D, midpoint(D, F), D, H, midpoint(A, H) we get anti_similar_triangles(D, H, midpoint(A, H), H, D, midpoint(D, F))
By line_definition on A, line_intersection(j, median(A, D, F)), median(A, D, F) we get median(A, D, F) == Line(A, line_intersection(j, median(A, D, F)))
By concyclic_sufficient_conditions_v0 on D, midpoint(D, F), H, midpoint(A, H) we get concyclic(D, H, midpoint(A, H), midpoint(D, F))
By line_intersection_definition on A, Line(A, I), i we get A == line_intersection(i, Line(A, I))
By line_intersection_definition on F, median(F, A, H), Line(F, H) we get F == line_intersection(Line(F, H), median(F, A, H))
By line_intersection_definition on A, f, median(A, D, F) we get A == line_intersection(f, median(A, D, F))
By line_intersection_definition on I, Line(A, I), Line(E, I) we get I == line_intersection(Line(A, I), Line(E, I))
By line_intersection_definition on center(d), median(A, D, F), median(F, A, H) we get center(d) == line_intersection(median(A, D, F), median(F, A, H))
By line_intersection_definition on A, f, Line(A, I) we get A == line_intersection(f, Line(A, I))
By line_intersection_definition on I, k, Line(A, I) we get I == line_intersection(k, Line(A, I))
By median_definition on H, F, D, Line(H, midpoint(D, F)) we get median(H, D, F) == Line(H, midpoint(D, F))
By line_intersection_definition on F, median(F, A, H), f we get F == line_intersection(f, median(F, A, H))
By line_intersection_definition on A, median(A, D, F), i we get A == line_intersection(i, median(A, D, F))
By line_intersection_definition on center(d), median(F, A, H), Line(H, center(d)) we get center(d) == line_intersection(median(F, A, H), Line(H, center(d)))
By line_intersection_definition on center(d), Line(D, center(d)), median(A, D, F) we get center(d) == line_intersection(median(A, D, F), Line(D, center(d)))
By line_intersection_definition on I, Line(A, I), g we get I == line_intersection(g, Line(A, I))
By median_definition on D, H, A, Line(D, midpoint(A, H)) we get median(D, A, H) == Line(D, midpoint(A, H))
By line_intersection_definition on A, Line(A, C), Line(A, I) we get A == line_intersection(Line(A, C), Line(A, I))
By line_intersection_definition on A, Line(A, I), Line(A, H) we get A == line_intersection(Line(A, H), Line(A, I))
By line_unique_intersection_v1 on f, median(F, A, H), F, center(d) we get center(d) not in f
By line_unique_intersection_v1 on median(F, A, H), f, F, B we get B not in median(F, A, H)
By line_unique_intersection_v1 on Line(F, H), median(F, A, H), F, center(d) we get center(d) not in Line(F, H)
By line_unique_intersection_v1 on i, median(A, D, F), A, line_intersection(j, median(A, D, F)) we get line_intersection(j, median(A, D, F)) not in i
By same_angle_v0 on A, E, D, midpoint(A, H) we get angle(D, A, midpoint(A, H)) == angle(E, A, midpoint(A, H)) mod 360
By line_unique_intersection_v1 on median(A, D, F), i, A, E we get E not in median(A, D, F)
By line_unique_intersection_v1 on Line(H, center(d)), median(F, A, H), center(d), F we get F not in Line(H, center(d))
By line_unique_intersection_v1 on Line(A, I), Line(E, I), I, line_intersection(Line(B, D), Line(C, F)) we get line_intersection(Line(B, D), Line(C, F)) not in Line(A, I)
By line_unique_intersection_v1 on i, median(A, D, F), A, center(d) we get center(d) not in i
By line_unique_intersection_v1 on median(A, D, F), f, A, B we get B not in median(A, D, F)
By line_unique_intersection_v1 on f, median(A, D, F), A, line_intersection(j, median(A, D, F)) we get line_intersection(j, median(A, D, F)) not in f
By line_unique_intersection_v1 on Line(D, center(d)), median(A, D, F), center(d), A we get A not in Line(D, center(d))
By same_angle_v0 on F, midpoint(D, F), D, C we get angle(D, F, C) == angle(midpoint(D, F), F, C) mod 360
By same_angle_v0 on H, midpoint(A, H), A, G we get angle(A, H, G) == angle(midpoint(A, H), H, G) mod 360
By same_angle_v0 on F, D, midpoint(D, F), G we get angle(D, F, G) == angle(midpoint(D, F), F, G) mod 360
By same_angle_v1 on A, H, midpoint(A, H), G we get angle(H, A, G) == angle(midpoint(A, H), A, G) mod 360
By same_angle_v1 on A, H, midpoint(A, H), D we get angle(H, A, D) == angle(midpoint(A, H), A, D) mod 360
By between_implies_orientation on line_intersection(j, median(A, D, F)), B, A, F we get orientation(A, F, line_intersection(j, median(A, D, F))) == orientation(A, line_intersection(j, median(A, D, F)), B) mod 360, orientation(A, line_intersection(j, median(A, D, F)), B) == orientation(B, F, line_intersection(j, median(A, D, F))) mod 360
By same_angle_v2 on midpoint(A, H), A, H, D we get angle(A, midpoint(A, H), D) == angle(H, midpoint(A, H), D) + 180 mod 360
By same_angle_v0 on D, H, C, midpoint(A, H) we get angle(C, D, midpoint(A, H)) == angle(H, D, midpoint(A, H)) mod 360
By same_angle_v3 on D, I, midpoint(D, F), G we get angle(I, D, G) == angle(midpoint(D, F), D, G) + 180 mod 360
By same_angle_v1 on A, midpoint(A, H), H, I we get angle(H, A, I) == angle(midpoint(A, H), A, I) mod 360
By same_angle_v0 on A, midpoint(A, H), H, B we get angle(H, A, B) == angle(midpoint(A, H), A, B) mod 360
By same_angle_v0 on F, midpoint(D, F), D, H we get angle(D, F, H) == angle(midpoint(D, F), F, H) mod 360
By same_angle_v1 on F, A, B, midpoint(A, H) we get angle(A, F, midpoint(A, H)) == angle(B, F, midpoint(A, H)) mod 360
By same_angle_v0 on A, G, I, H we get angle(G, A, H) == angle(I, A, H) mod 360
By same_angle_v0 on F, I, midpoint(D, F), G we get angle(I, F, G) == angle(midpoint(D, F), F, G) mod 360
By same_angle_v0 on F, midpoint(D, F), I, H we get angle(I, F, H) == angle(midpoint(D, F), F, H) mod 360
By same_angle_v0 on F, I, midpoint(D, F), C we get angle(I, F, C) == angle(midpoint(D, F), F, C) mod 360
By same_angle_v3 on midpoint(D, F), D, F, H we get angle(D, midpoint(D, F), H) == angle(F, midpoint(D, F), H) + 180 mod 360
By collinear_and_not_between_implies_orientation on line_intersection(j, median(A, D, F)), B, F, A we get orientation(A, line_intersection(j, median(A, D, F)), F) == orientation(B, line_intersection(j, median(A, D, F)), F) mod 360
By same_angle_v0 on F, midpoint(D, F), D, B we get angle(D, F, B) == angle(midpoint(D, F), F, B) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(j, median(A, D, F)), F, I, D we get orientation(D, line_intersection(j, median(A, D, F)), I) == orientation(F, line_intersection(j, median(A, D, F)), I) mod 360
By same_angle_v1 on A, midpoint(A, H), H, E we get angle(H, A, E) == angle(midpoint(A, H), A, E) mod 360
By same_angle_v3 on D, I, midpoint(D, F), B we get angle(I, D, B) == angle(midpoint(D, F), D, B) + 180 mod 360
By same_angle_v1 on H, midpoint(A, H), A, B we get angle(A, H, B) == angle(midpoint(A, H), H, B) mod 360
By same_angle_v1 on F, A, B, midpoint(D, F) we get angle(A, F, midpoint(D, F)) == angle(B, F, midpoint(D, F)) mod 360
By same_angle_v2 on H, C, D, midpoint(D, F) we get angle(C, H, midpoint(D, F)) == angle(D, H, midpoint(D, F)) + 180 mod 360
By same_angle_v0 on A, G, I, midpoint(A, H) we get angle(G, A, midpoint(A, H)) == angle(I, A, midpoint(A, H)) mod 360
By same_angle_v3 on A, F, B, midpoint(A, H) we get angle(F, A, midpoint(A, H)) == angle(B, A, midpoint(A, H)) + 180 mod 360
By same_angle_v3 on A, F, B, midpoint(D, F) we get angle(F, A, midpoint(D, F)) == angle(B, A, midpoint(D, F)) + 180 mod 360
By same_angle_v1 on A, E, D, midpoint(D, F) we get angle(D, A, midpoint(D, F)) == angle(E, A, midpoint(D, F)) mod 360
By same_angle_v0 on A, G, I, C we get angle(G, A, C) == angle(I, A, C) mod 360
By same_angle_v0 on A, midpoint(A, H), H, C we get angle(H, A, C) == angle(midpoint(A, H), A, C) mod 360
By same_angle_v1 on D, midpoint(D, F), F, G we get angle(F, D, G) == angle(midpoint(D, F), D, G) mod 360
By same_angle_v1 on D, F, midpoint(D, F), B we get angle(F, D, B) == angle(midpoint(D, F), D, B) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(Line(B, D), Line(C, F)), F, D, midpoint(D, F) we get orientation(D, F, line_intersection(Line(B, D), Line(C, F))) == orientation(D, midpoint(D, F), line_intersection(Line(B, D), Line(C, F))) mod 360
By between_implies_orientation on line_intersection(j, median(A, D, F)), F, A, B we get orientation(A, B, line_intersection(j, median(A, D, F))) == orientation(A, line_intersection(j, median(A, D, F)), F) mod 360, orientation(A, line_intersection(j, median(A, D, F)), F) == orientation(B, line_intersection(j, median(A, D, F)), F) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(Line(B, D), Line(C, F)), midpoint(D, F), F, D we get orientation(D, line_intersection(Line(B, D), Line(C, F)), F) == orientation(F, midpoint(D, F), line_intersection(Line(B, D), Line(C, F))) mod 360
By between_implies_orientation on line_intersection(j, median(A, D, F)), F, D, I we get orientation(D, I, line_intersection(j, median(A, D, F))) == orientation(D, line_intersection(j, median(A, D, F)), F) mod 360, orientation(D, line_intersection(j, median(A, D, F)), F) == orientation(F, I, line_intersection(j, median(A, D, F))) mod 360
By between_implies_orientation on line_intersection(Line(B, D), Line(C, F)), F, midpoint(D, F), D we get orientation(D, line_intersection(Line(B, D), Line(C, F)), midpoint(D, F)) == orientation(F, midpoint(D, F), line_intersection(Line(B, D), Line(C, F))) mod 360, orientation(D, line_intersection(Line(B, D), Line(C, F)), F) == orientation(F, midpoint(D, F), line_intersection(Line(B, D), Line(C, F))) mod 360
By same_angle_v1 on D, A, E, midpoint(A, H) we get angle(A, D, midpoint(A, H)) == angle(E, D, midpoint(A, H)) mod 360
By same_angle_v0 on F, midpoint(D, F), I, B we get angle(I, F, B) == angle(midpoint(D, F), F, B) mod 360
By between_implies_orientation on line_intersection(Line(B, D), Line(C, F)), D, midpoint(D, F), F we get orientation(D, midpoint(D, F), line_intersection(Line(B, D), Line(C, F))) == orientation(F, line_intersection(Line(B, D), Line(C, F)), midpoint(D, F)) mod 360, orientation(D, F, line_intersection(Line(B, D), Line(C, F))) == orientation(D, midpoint(D, F), line_intersection(Line(B, D), Line(C, F))) mod 360
By between_implies_orientation on line_intersection(j, median(A, D, F)), I, D, F we get orientation(D, F, line_intersection(j, median(A, D, F))) == orientation(D, line_intersection(j, median(A, D, F)), I) mod 360, orientation(D, line_intersection(j, median(A, D, F)), I) == orientation(F, line_intersection(j, median(A, D, F)), I) mod 360
By different_points_v1 on I, line_intersection(Line(B, D), Line(C, F)) we get 0 != distance(I, line_intersection(Line(B, D), Line(C, F)))
By same_angle_v2 on G, A, I, D we get angle(A, G, D) == angle(I, G, D) + 180 mod 360
By different_points_v1 on F, line_intersection(Line(B, D), Line(C, F)) we get 0 != distance(F, line_intersection(Line(B, D), Line(C, F)))
By different_points_v1 on C, line_intersection(Line(B, D), Line(C, F)) we get 0 != distance(C, line_intersection(Line(B, D), Line(C, F)))
By same_angle_v3 on G, A, I, E we get angle(A, G, E) == angle(I, G, E) + 180 mod 360
By different_points_v1 on line_intersection(Line(B, D), Line(C, F)), E we get 0 != distance(E, line_intersection(Line(B, D), Line(C, F)))
By orthocenter_concurrency on H, F, midpoint(A, H) we get orthocenter(F, H, midpoint(A, H)) in altitude(H, F, midpoint(A, H)), orthocenter(F, H, midpoint(A, H)) in altitude(F, H, midpoint(A, H)), orthocenter(F, H, midpoint(A, H)) in altitude(midpoint(A, H), F, H)
By different_points_v1 on B, line_intersection(Line(B, D), Line(C, F)) we get 0 != distance(B, line_intersection(Line(B, D), Line(C, F)))
By different_points_v1 on H, midpoint(D, F) we get 0 != distance(H, midpoint(D, F))
By orthocenter_concurrency on A, F, midpoint(A, H) we get orthocenter(A, F, midpoint(A, H)) in altitude(A, F, midpoint(A, H)), orthocenter(A, F, midpoint(A, H)) in altitude(F, A, midpoint(A, H)), orthocenter(A, F, midpoint(A, H)) in altitude(midpoint(A, H), A, F)
By same_angle_v1 on I, A, G, B we get angle(A, I, B) == angle(G, I, B) mod 360
By different_points_v1 on D, line_intersection(Line(B, D), Line(C, F)) we get 0 != distance(D, line_intersection(Line(B, D), Line(C, F)))
By same_angle_v1 on I, G, A, C we get angle(A, I, C) == angle(G, I, C) mod 360
By different_points_v1 on midpoint(A, H), D we get 0 != distance(D, midpoint(A, H))
By same_angle_v2 on G, I, A, B we get angle(I, G, B) == angle(A, G, B) + 180 mod 360
By same_angle_v0 on I, G, A, D we get angle(A, I, D) == angle(G, I, D) mod 360
By same_angle_v0 on I, A, G, F we get angle(A, I, F) == angle(G, I, F) mod 360
By same_angle_v0 on I, G, A, E we get angle(A, I, E) == angle(G, I, E) mod 360
By same_angle_v3 on G, I, A, H we get angle(I, G, H) == angle(A, G, H) + 180 mod 360
By same_angle_v3 on G, A, I, F we get angle(A, G, F) == angle(I, G, F) + 180 mod 360
By orthocenter_concurrency on A, F, midpoint(D, F) we get orthocenter(A, F, midpoint(D, F)) in altitude(A, F, midpoint(D, F)), orthocenter(A, F, midpoint(D, F)) in altitude(F, A, midpoint(D, F)), orthocenter(A, F, midpoint(D, F)) in altitude(midpoint(D, F), A, F)
By orthocenter_concurrency on D, A, midpoint(D, F) we get orthocenter(A, D, midpoint(D, F)) in altitude(D, A, midpoint(D, F)), orthocenter(A, D, midpoint(D, F)) in altitude(A, D, midpoint(D, F)), orthocenter(A, D, midpoint(D, F)) in altitude(midpoint(D, F), A, D)
By not_in_line_equivalent_to_not_collinear_v0 on B, line_intersection(Line(B, D), Line(C, F)), F we get not_collinear(B, F, line_intersection(Line(B, D), Line(C, F))), exists(Line(F, line_intersection(Line(B, D), Line(C, F))))
By not_in_line_equivalent_to_not_collinear_v0 on F, line_intersection(Line(B, D), Line(C, F)), E we get not_collinear(E, F, line_intersection(Line(B, D), Line(C, F))), exists(Line(E, line_intersection(Line(B, D), Line(C, F))))
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(D, F), B, line_intersection(Line(B, D), Line(C, F)) we get not_collinear(B, midpoint(D, F), line_intersection(Line(B, D), Line(C, F))), exists(Line(B, line_intersection(Line(B, D), Line(C, F))))
By parallel_line_angles_reverse_v0 on E, C, F, midpoint(D, F) we get angle(E, C, F) == angle(midpoint(D, F), F, C) mod 360
By probably_between_and_collinear_implies_between on A, G, I we get between(A, G, I)
By reverse_direction on line_intersection(Line(B, D), Line(C, F)), I we get 180 == direction(line_intersection(Line(B, D), Line(C, F)), I) - direction(I, line_intersection(Line(B, D), Line(C, F))) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on line_intersection(Line(B, D), Line(C, F)), E, C we get not_collinear(C, E, line_intersection(Line(B, D), Line(C, F))), exists(Line(C, E))
By reverse_direction on D, line_intersection(Line(B, D), Line(C, F)) we get 180 == direction(D, line_intersection(Line(B, D), Line(C, F))) - direction(line_intersection(Line(B, D), Line(C, F)), D) mod 360
By sss_anti_congruence_v1 on F, midpoint(D, F), H, A, midpoint(A, H), D we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By sss_anti_congruence_v1 on F, midpoint(D, F), H, A, midpoint(A, H), D we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By not_in_line_equivalent_to_not_collinear_v0 on E, D, line_intersection(Line(B, D), Line(C, F)) we get not_collinear(D, E, line_intersection(Line(B, D), Line(C, F))), exists(Line(D, line_intersection(Line(B, D), Line(C, F))))
By sss_anti_congruence_v0 on A, midpoint(A, H), D, F, midpoint(D, F), H we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By not_in_line_equivalent_to_not_collinear_v0 on line_intersection(Line(B, D), Line(C, F)), F, A we get not_collinear(A, F, line_intersection(Line(B, D), Line(C, F))), exists(Line(A, F))
By not_in_line_equivalent_to_not_collinear_v0 on line_intersection(Line(B, D), Line(C, F)), D, H we get not_collinear(D, H, line_intersection(Line(B, D), Line(C, F))), exists(Line(D, H))
By sss_anti_congruence_v0 on F, H, midpoint(D, F), A, D, midpoint(A, H) we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By not_in_line_equivalent_to_not_collinear_v0 on line_intersection(Line(B, D), Line(C, F)), I, B we get not_collinear(B, I, line_intersection(Line(B, D), Line(C, F))), exists(Line(B, I))
By sss_anti_congruence_v1 on D, midpoint(A, H), A, H, midpoint(D, F), F we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By reverse_direction on line_intersection(Line(B, D), Line(C, F)), D we get 180 == direction(line_intersection(Line(B, D), Line(C, F)), D) - direction(D, line_intersection(Line(B, D), Line(C, F))) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on H, line_intersection(Line(B, D), Line(C, F)), C we get not_collinear(C, H, line_intersection(Line(B, D), Line(C, F))), exists(Line(C, line_intersection(Line(B, D), Line(C, F))))
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(D, F), C, line_intersection(Line(B, D), Line(C, F)) we get not_collinear(C, midpoint(D, F), line_intersection(Line(B, D), Line(C, F))), exists(Line(C, line_intersection(Line(B, D), Line(C, F))))
By sss_anti_congruence_v1 on A, D, midpoint(A, H), F, H, midpoint(D, F) we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By sss_anti_congruence_v1 on midpoint(A, H), A, D, midpoint(D, F), F, H we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By not_in_line_equivalent_to_not_collinear_v0 on G, F, line_intersection(Line(B, D), Line(C, F)) we get not_collinear(F, G, line_intersection(Line(B, D), Line(C, F))), exists(Line(F, line_intersection(Line(B, D), Line(C, F))))
By reverse_direction on midpoint(A, H), D we get 180 == direction(midpoint(A, H), D) - direction(D, midpoint(A, H)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on A, line_intersection(Line(B, D), Line(C, F)), B we get not_collinear(A, B, line_intersection(Line(B, D), Line(C, F))), exists(Line(B, line_intersection(Line(B, D), Line(C, F))))
By not_in_line_equivalent_to_not_collinear_v0 on line_intersection(Line(B, D), Line(C, F)), F, midpoint(D, F) we get not_collinear(F, midpoint(D, F), line_intersection(Line(B, D), Line(C, F))), exists(Line(F, midpoint(D, F)))
By not_in_line_equivalent_to_not_collinear_v0 on G, line_intersection(Line(B, D), Line(C, F)), D we get not_collinear(D, G, line_intersection(Line(B, D), Line(C, F))), exists(Line(D, line_intersection(Line(B, D), Line(C, F))))
By reverse_direction on B, line_intersection(Line(B, D), Line(C, F)) we get 180 == direction(B, line_intersection(Line(B, D), Line(C, F))) - direction(line_intersection(Line(B, D), Line(C, F)), B) mod 360
By line_inequality on Line(H, midpoint(D, F)), median(F, A, H), H we get median(F, A, H) != Line(H, midpoint(D, F))
By sss_anti_congruence_v0 on A, midpoint(A, H), D, F, midpoint(D, F), H we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By sss_anti_congruence_v1 on D, midpoint(A, H), A, H, midpoint(D, F), F we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By sss_anti_congruence_v1 on H, F, midpoint(D, F), D, A, midpoint(A, H) we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By sss_anti_congruence_v0 on F, H, midpoint(D, F), A, D, midpoint(A, H) we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By reverse_direction on D, midpoint(A, H) we get 180 == direction(D, midpoint(A, H)) - direction(midpoint(A, H), D) mod 360
By sss_anti_congruence_v0 on H, midpoint(D, F), F, D, midpoint(A, H), A we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By sss_anti_congruence_v0 on H, midpoint(D, F), F, D, midpoint(A, H), A we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By reverse_direction on C, line_intersection(Line(B, D), Line(C, F)) we get 180 == direction(C, line_intersection(Line(B, D), Line(C, F))) - direction(line_intersection(Line(B, D), Line(C, F)), C) mod 360
By sss_anti_congruence_v0 on D, A, midpoint(A, H), H, F, midpoint(D, F) we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By not_in_line_equivalent_to_not_collinear_v0_r on D, H, midpoint(D, F) we get D not in Line(H, midpoint(D, F))
By sss_anti_congruence_v0 on F, H, midpoint(D, F), A, D, midpoint(A, H) we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By reverse_direction on line_intersection(Line(B, D), Line(C, F)), C we get 180 == direction(line_intersection(Line(B, D), Line(C, F)), C) - direction(C, line_intersection(Line(B, D), Line(C, F))) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on A, line_intersection(Line(B, D), Line(C, F)), D we get not_collinear(A, D, line_intersection(Line(B, D), Line(C, F))), exists(Line(D, line_intersection(Line(B, D), Line(C, F))))
By not_in_line_equivalent_to_not_collinear_v0 on B, C, line_intersection(Line(B, D), Line(C, F)) we get not_collinear(B, C, line_intersection(Line(B, D), Line(C, F))), exists(Line(C, line_intersection(Line(B, D), Line(C, F))))
By not_in_line_equivalent_to_not_collinear_v0 on line_intersection(Line(B, D), Line(C, F)), D, C we get not_collinear(C, D, line_intersection(Line(B, D), Line(C, F))), exists(Line(C, D))
By sss_anti_congruence_v1 on H, F, midpoint(D, F), D, A, midpoint(A, H) we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By sss_anti_congruence_v1 on midpoint(D, F), H, F, midpoint(A, H), D, A we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By not_in_line_equivalent_to_not_collinear_v0 on H, E, line_intersection(Line(B, D), Line(C, F)) we get not_collinear(E, H, line_intersection(Line(B, D), Line(C, F))), exists(Line(E, line_intersection(Line(B, D), Line(C, F))))
By line_inequality on Line(H, midpoint(D, F)), Line(D, G), midpoint(D, F) we get Line(D, G) != Line(H, midpoint(D, F))
By sss_anti_congruence_v1 on midpoint(A, H), A, D, midpoint(D, F), F, H we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By collinear_definition on A, G, I we get G in Line(A, I), I in Line(A, G), Line(A, G) == Line(A, I), 0 == 2 * angle(G, A, I) mod 360
By reverse_direction on line_intersection(Line(B, D), Line(C, F)), E we get 180 == direction(line_intersection(Line(B, D), Line(C, F)), E) - direction(E, line_intersection(Line(B, D), Line(C, F))) mod 360
By sss_anti_congruence_v0 on midpoint(D, F), F, H, midpoint(A, H), A, D we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By not_in_line_equivalent_to_not_collinear_v0 on H, I, line_intersection(Line(B, D), Line(C, F)) we get not_collinear(H, I, line_intersection(Line(B, D), Line(C, F))), exists(Line(I, line_intersection(Line(B, D), Line(C, F))))
By not_in_line_equivalent_to_not_collinear_v0 on line_intersection(Line(B, D), Line(C, F)), E, G we get not_collinear(E, G, line_intersection(Line(B, D), Line(C, F))), exists(Line(E, G))
By line_containment_inequality on line_intersection(j, median(A, D, F)), line_intersection(Line(B, D), Line(C, F)), j we get line_intersection(j, median(A, D, F)) != line_intersection(Line(B, D), Line(C, F))
By sss_anti_congruence_v1 on H, F, midpoint(D, F), D, A, midpoint(A, H) we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By line_inequality on Line(D, midpoint(A, H)), Line(A, G), D we get Line(A, G) != Line(D, midpoint(A, H))
By sss_anti_congruence_v0 on midpoint(D, F), F, H, midpoint(A, H), A, D we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By sss_anti_congruence_v0 on A, midpoint(A, H), D, F, midpoint(D, F), H we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By sss_anti_congruence_v1 on midpoint(A, H), A, D, midpoint(D, F), F, H we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By line_inequality on Line(D, midpoint(A, H)), Line(A, H), D we get Line(A, H) != Line(D, midpoint(A, H))
By sss_anti_congruence_v1 on A, D, midpoint(A, H), F, H, midpoint(D, F) we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By not_in_line_equivalent_to_not_collinear_v0_r on center(d), A, D we get center(d) not in Line(A, D)
By sss_anti_congruence_v0 on midpoint(A, H), D, A, midpoint(D, F), H, F we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By sss_anti_congruence_v1 on midpoint(D, F), H, F, midpoint(A, H), D, A we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By sss_anti_congruence_v1 on H, F, midpoint(D, F), D, A, midpoint(A, H) we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By sss_anti_congruence_v0 on D, A, midpoint(A, H), H, F, midpoint(D, F) we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By not_in_line_equivalent_to_not_collinear_v0 on line_intersection(Line(B, D), Line(C, F)), F, H we get not_collinear(F, H, line_intersection(Line(B, D), Line(C, F))), exists(Line(F, H))
By not_in_line_equivalent_to_not_collinear_v0 on line_intersection(Line(B, D), Line(C, F)), midpoint(D, F), D we get not_collinear(D, midpoint(D, F), line_intersection(Line(B, D), Line(C, F))), exists(Line(D, midpoint(D, F)))
By sss_anti_congruence_v0 on A, midpoint(A, H), D, F, midpoint(D, F), H we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By sss_anti_congruence_v1 on D, midpoint(A, H), A, H, midpoint(D, F), F we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By not_in_line_equivalent_to_not_collinear_v0 on A, line_intersection(Line(B, D), Line(C, F)), C we get not_collinear(A, C, line_intersection(Line(B, D), Line(C, F))), exists(Line(C, line_intersection(Line(B, D), Line(C, F))))
By not_in_line_equivalent_to_not_collinear_v0 on B, line_intersection(Line(B, D), Line(C, F)), E we get not_collinear(B, E, line_intersection(Line(B, D), Line(C, F))), exists(Line(E, line_intersection(Line(B, D), Line(C, F))))
By not_in_line_equivalent_to_not_collinear_v0_r on B, midpoint(A, H), F we get B not in Line(F, midpoint(A, H))
By sss_anti_congruence_v0 on midpoint(D, F), F, H, midpoint(A, H), A, D we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By not_in_line_equivalent_to_not_collinear_v0_r on E, A, midpoint(D, F) we get E not in Line(A, midpoint(D, F))
By not_in_line_equivalent_to_not_collinear_v0 on line_intersection(Line(B, D), Line(C, F)), I, C we get not_collinear(C, I, line_intersection(Line(B, D), Line(C, F))), exists(Line(C, I))
By not_in_line_equivalent_to_not_collinear_v0 on G, B, line_intersection(Line(B, D), Line(C, F)) we get not_collinear(B, G, line_intersection(Line(B, D), Line(C, F))), exists(Line(B, line_intersection(Line(B, D), Line(C, F))))
By sss_anti_congruence_v0 on H, midpoint(D, F), F, D, midpoint(A, H), A we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By sss_anti_congruence_v0 on midpoint(A, H), D, A, midpoint(D, F), H, F we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By line_inequality on Line(H, midpoint(D, F)), f, H we get f != Line(H, midpoint(D, F))
By sss_anti_congruence_v0 on midpoint(A, H), D, A, midpoint(D, F), H, F we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By sss_anti_congruence_v0 on midpoint(A, H), D, A, midpoint(D, F), H, F we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By not_in_line_equivalent_to_not_collinear_v0 on I, D, line_intersection(Line(B, D), Line(C, F)) we get not_collinear(D, I, line_intersection(Line(B, D), Line(C, F))), exists(Line(D, line_intersection(Line(B, D), Line(C, F))))
By sss_anti_congruence_v1 on D, midpoint(A, H), A, H, midpoint(D, F), F we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By sss_anti_congruence_v1 on H, F, midpoint(D, F), D, A, midpoint(A, H) we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By sss_anti_congruence_v1 on D, midpoint(A, H), A, H, midpoint(D, F), F we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By reverse_direction on line_intersection(Line(B, D), Line(C, F)), B we get 180 == direction(line_intersection(Line(B, D), Line(C, F)), B) - direction(B, line_intersection(Line(B, D), Line(C, F))) mod 360
By sss_anti_congruence_v1 on F, midpoint(D, F), H, A, midpoint(A, H), D we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By collinear_definition on A, I, G we get I in Line(A, G), G in Line(A, I), Line(A, G) == Line(A, I), 0 == 2 * angle(I, A, G) mod 360
By sss_anti_congruence_v0 on midpoint(A, H), D, A, midpoint(D, F), H, F we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By line_inequality on Line(D, midpoint(A, H)), Line(A, I), midpoint(A, H) we get Line(A, I) != Line(D, midpoint(A, H))
By sss_anti_congruence_v0 on A, midpoint(A, H), D, F, midpoint(D, F), H we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By sss_anti_congruence_v1 on midpoint(D, F), H, F, midpoint(A, H), D, A we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By reverse_direction on midpoint(D, F), H we get 180 == direction(midpoint(D, F), H) - direction(H, midpoint(D, F)) mod 360
By sss_anti_congruence_v0 on F, H, midpoint(D, F), A, D, midpoint(A, H) we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By sss_anti_congruence_v0 on midpoint(D, F), F, H, midpoint(A, H), A, D we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By line_inequality on Line(H, midpoint(D, F)), Line(A, G), H we get Line(A, G) != Line(H, midpoint(D, F))
By line_inequality on Line(H, midpoint(D, F)), i, H we get i != Line(H, midpoint(D, F))
By sss_anti_congruence_v0 on F, H, midpoint(D, F), A, D, midpoint(A, H) we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By line_circle_intersection_has_at_most_two_points_0 on A, G, I, c we get I not in c
By not_in_line_equivalent_to_not_collinear_v0 on D, F, line_intersection(Line(B, D), Line(C, F)) we get not_collinear(D, F, line_intersection(Line(B, D), Line(C, F))), exists(Line(F, line_intersection(Line(B, D), Line(C, F))))
By reverse_direction on E, line_intersection(Line(B, D), Line(C, F)) we get 180 == direction(E, line_intersection(Line(B, D), Line(C, F))) - direction(line_intersection(Line(B, D), Line(C, F)), E) mod 360
By sss_anti_congruence_v0 on D, A, midpoint(A, H), H, F, midpoint(D, F) we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By sss_anti_congruence_v1 on D, midpoint(A, H), A, H, midpoint(D, F), F we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By sss_anti_congruence_v1 on midpoint(A, H), A, D, midpoint(D, F), F, H we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By sss_anti_congruence_v0 on H, midpoint(D, F), F, D, midpoint(A, H), A we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By sss_anti_congruence_v1 on midpoint(D, F), H, F, midpoint(A, H), D, A we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By line_inequality on Line(H, midpoint(D, F)), Line(E, G), H we get Line(E, G) != Line(H, midpoint(D, F))
By sss_anti_congruence_v1 on midpoint(D, F), H, F, midpoint(A, H), D, A we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By sss_anti_congruence_v0 on A, midpoint(A, H), D, F, midpoint(D, F), H we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By reverse_direction on I, line_intersection(Line(B, D), Line(C, F)) we get 180 == direction(I, line_intersection(Line(B, D), Line(C, F))) - direction(line_intersection(Line(B, D), Line(C, F)), I) mod 360
By sss_anti_congruence_v1 on H, F, midpoint(D, F), D, A, midpoint(A, H) we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By sss_anti_congruence_v1 on F, midpoint(D, F), H, A, midpoint(A, H), D we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By sss_anti_congruence_v1 on midpoint(D, F), H, F, midpoint(A, H), D, A we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By sss_anti_congruence_v1 on A, D, midpoint(A, H), F, H, midpoint(D, F) we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By sss_anti_congruence_v0 on D, A, midpoint(A, H), H, F, midpoint(D, F) we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By sss_anti_congruence_v1 on A, D, midpoint(A, H), F, H, midpoint(D, F) we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By line_inequality on Line(D, midpoint(A, H)), Line(A, C), midpoint(A, H) we get Line(A, C) != Line(D, midpoint(A, H))
By reverse_direction on line_intersection(Line(B, D), Line(C, F)), F we get 180 == direction(line_intersection(Line(B, D), Line(C, F)), F) - direction(F, line_intersection(Line(B, D), Line(C, F))) mod 360
By sss_anti_congruence_v1 on midpoint(A, H), A, D, midpoint(D, F), F, H we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By not_in_line_equivalent_to_not_collinear_v0 on line_intersection(Line(B, D), Line(C, F)), F, I we get not_collinear(F, I, line_intersection(Line(B, D), Line(C, F))), exists(Line(F, I))
By sss_anti_congruence_v1 on F, midpoint(D, F), H, A, midpoint(A, H), D we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By sss_anti_congruence_v0 on D, A, midpoint(A, H), H, F, midpoint(D, F) we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By reverse_direction on H, midpoint(D, F) we get 180 == direction(H, midpoint(D, F)) - direction(midpoint(D, F), H) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on center(d), F, A we get center(d) not in Line(A, F)
By sss_anti_congruence_v1 on A, D, midpoint(A, H), F, H, midpoint(D, F) we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By not_in_line_equivalent_to_not_collinear_v0 on G, I, line_intersection(Line(B, D), Line(C, F)) we get not_collinear(G, I, line_intersection(Line(B, D), Line(C, F))), exists(Line(I, line_intersection(Line(B, D), Line(C, F))))
By line_inequality on Line(D, midpoint(A, H)), i, midpoint(A, H) we get i != Line(D, midpoint(A, H))
By not_in_line_equivalent_to_not_collinear_v0 on line_intersection(Line(B, D), Line(C, F)), E, A we get not_collinear(A, E, line_intersection(Line(B, D), Line(C, F))), exists(Line(A, E))
By sss_anti_congruence_v0 on D, A, midpoint(A, H), H, F, midpoint(D, F) we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By sss_anti_congruence_v1 on midpoint(A, H), A, D, midpoint(D, F), F, H we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By not_in_line_equivalent_to_not_collinear_v0_r on H, D, midpoint(A, H) we get H not in Line(D, midpoint(A, H))
By sss_anti_congruence_v0 on midpoint(D, F), F, H, midpoint(A, H), A, D we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By sss_anti_congruence_v0 on H, midpoint(D, F), F, D, midpoint(A, H), A we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By sss_anti_congruence_v0 on midpoint(A, H), D, A, midpoint(D, F), H, F we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By reverse_direction on F, line_intersection(Line(B, D), Line(C, F)) we get 180 == direction(F, line_intersection(Line(B, D), Line(C, F))) - direction(line_intersection(Line(B, D), Line(C, F)), F) mod 360
By sss_anti_congruence_v0 on midpoint(D, F), F, H, midpoint(A, H), A, D we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By sss_anti_congruence_v0 on H, midpoint(D, F), F, D, midpoint(A, H), A we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By sss_anti_congruence_v0 on F, H, midpoint(D, F), A, D, midpoint(A, H) we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By line_inequality on Line(D, midpoint(A, H)), h, midpoint(A, H) we get h != Line(D, midpoint(A, H))
By not_in_line_equivalent_to_not_collinear_v0 on H, line_intersection(Line(B, D), Line(C, F)), B we get not_collinear(B, H, line_intersection(Line(B, D), Line(C, F))), exists(Line(B, line_intersection(Line(B, D), Line(C, F))))
By sss_anti_congruence_v1 on F, midpoint(D, F), H, A, midpoint(A, H), D we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By sss_anti_congruence_v1 on A, D, midpoint(A, H), F, H, midpoint(D, F) we get anti_congruent_triangles(A, D, midpoint(A, H), F, H, midpoint(D, F))
By not_in_line_equivalent_to_not_collinear_v0 on G, C, line_intersection(Line(B, D), Line(C, F)) we get not_collinear(C, G, line_intersection(Line(B, D), Line(C, F))), exists(Line(C, line_intersection(Line(B, D), Line(C, F))))
By line_inequality on Line(H, midpoint(D, F)), Line(A, I), H we get Line(A, I) != Line(H, midpoint(D, F))
By line_inequality on Line(D, midpoint(A, H)), j, D we get j != Line(D, midpoint(A, H))
By line_inequality on Line(D, midpoint(A, H)), Line(C, F), D we get Line(C, F) != Line(D, midpoint(A, H))
By not_in_line_equivalent_to_not_collinear_v0_r on F, midpoint(D, F), H we get F not in Line(H, midpoint(D, F))
By not_in_line_equivalent_to_not_collinear_v0 on A, I, line_intersection(Line(B, D), Line(C, F)) we get not_collinear(A, I, line_intersection(Line(B, D), Line(C, F))), exists(Line(I, line_intersection(Line(B, D), Line(C, F))))
By line_inequality on Line(H, midpoint(D, F)), g, H we get g != Line(H, midpoint(D, F))
By line_inequality on Line(D, midpoint(A, H)), Line(E, G), D we get Line(E, G) != Line(D, midpoint(A, H))
By not_in_line_equivalent_to_not_collinear_v0_r on B, midpoint(D, F), A we get B not in Line(A, midpoint(D, F))
By not_in_line_equivalent_to_not_collinear_v0_r on E, D, midpoint(A, H) we get E not in Line(D, midpoint(A, H))
By line_inequality on Line(D, midpoint(A, H)), Line(G, H), midpoint(A, H) we get Line(G, H) != Line(D, midpoint(A, H))
By line_inequality on Line(D, center(d)), Line(A, I), D we get Line(A, I) != Line(D, center(d))
By line_inequality on Line(H, midpoint(D, F)), Line(C, F), H we get Line(C, F) != Line(H, midpoint(D, F))
By not_in_line_equivalent_to_not_collinear_v0_r on C, H, midpoint(D, F) we get C not in Line(H, midpoint(D, F))
By not_in_line_equivalent_to_not_collinear_v0_r on A, midpoint(A, H), D we get A not in Line(D, midpoint(A, H))
By line_inequality on Line(H, midpoint(D, F)), Line(B, G), H we get Line(B, G) != Line(H, midpoint(D, F))
By line_inequality on Line(D, midpoint(A, H)), f, midpoint(A, H) we get f != Line(D, midpoint(A, H))
By line_inequality on Line(D, midpoint(A, H)), Line(F, H), D we get Line(F, H) != Line(D, midpoint(A, H))
By line_inequality on Line(H, midpoint(D, F)), Line(F, G), midpoint(D, F) we get Line(F, G) != Line(H, midpoint(D, F))
By line_inequality on Line(H, midpoint(D, F)), Line(E, I), H we get Line(E, I) != Line(H, midpoint(D, F))
By line_inequality on Line(H, center(d)), Line(A, I), H we get Line(A, I) != Line(H, center(d))
By line_inequality on Line(H, midpoint(D, F)), j, H we get j != Line(H, midpoint(D, F))
By line_inequality on Line(D, midpoint(A, H)), Line(F, G), D we get Line(F, G) != Line(D, midpoint(A, H))
By line_inequality on Line(E, center(c)), Line(A, I), E we get Line(A, I) != Line(E, center(c))
By line_inequality on Line(D, midpoint(A, H)), Line(B, E), D we get Line(B, E) != Line(D, midpoint(A, H))
By line_inequality on Line(D, midpoint(A, H)), Line(E, I), D we get Line(E, I) != Line(D, midpoint(A, H))
By line_inequality on Line(B, center(c)), Line(A, I), B we get Line(A, I) != Line(B, center(c))
By not_in_line_equivalent_to_not_collinear_v0_r on C, D, midpoint(A, H) we get C not in Line(D, midpoint(A, H))
By line_inequality on Line(H, midpoint(D, F)), Line(B, D), H we get Line(B, D) != Line(H, midpoint(D, F))
By line_inequality on Line(H, midpoint(D, F)), h, midpoint(D, F) we get h != Line(H, midpoint(D, F))
By line_inequality on Line(D, midpoint(A, H)), Line(B, H), D we get Line(B, H) != Line(D, midpoint(A, H))
By line_inequality on Line(H, midpoint(D, F)), k, H we get k != Line(H, midpoint(D, F))
By line_inequality on Line(D, midpoint(A, H)), Line(B, G), D we get Line(B, G) != Line(D, midpoint(A, H))
By line_inequality on Line(D, midpoint(A, H)), median(A, D, F), D we get median(A, D, F) != Line(D, midpoint(A, H))
By line_inequality on Line(H, midpoint(D, F)), Line(F, H), midpoint(D, F) we get Line(F, H) != Line(H, midpoint(D, F))
By line_inequality on Line(D, midpoint(A, H)), g, D we get g != Line(D, midpoint(A, H))
By line_inequality on Line(H, midpoint(D, F)), Line(B, E), H we get Line(B, E) != Line(H, midpoint(D, F))
By line_inequality on Line(H, midpoint(D, F)), Line(A, C), H we get Line(A, C) != Line(H, midpoint(D, F))
By tangent_chord_angle_v1 on A, F, center(d), D we get tangent(Line(A, D), Circle(A, F, center(d)))
By anti_similar_triangle_basic_properties on D, A, I, G, A, D we get not_collinear(A, D, I), not_collinear(A, D, G), angle(D, A, I) == 0 - angle(G, A, D) mod 360, angle(A, I, D) == 0 - angle(A, D, G) mod 360, angle(I, D, A) == 0 - angle(D, G, A) mod 360, log(distance(A, D)) + log(distance(A, D)) == log(distance(A, G)) + log(distance(A, I)), log(distance(A, D)) + log(distance(D, I)) == log(distance(A, I)) + log(distance(D, G)), log(distance(D, G)) + log(distance(A, D)) == log(distance(D, I)) + log(distance(A, G))
By internal_angle_bisector_definition_v0_r on line_intersection(Line(B, D), Line(C, F)), E, line_intersection(Line(B, D), Line(C, F)), I we get Line(E, I) == internal_angle_bisector(line_intersection(Line(B, D), Line(C, F)), I, line_intersection(Line(B, D), Line(C, F)))
By tangent_chord_angle_v1 on F, A, center(d), H we get tangent(Line(F, H), Circle(A, F, center(d)))
By altitude_definition on F, A, center(d), k we get k == altitude(F, A, center(d))
By tangent_chord_angle_v1 on F, H, center(d), A we get tangent(Line(A, F), Circle(F, H, center(d)))
By anti_similar_triangle_basic_properties on I, A, F, F, A, G we get not_collinear(A, F, I), not_collinear(A, F, G), angle(I, A, F) == 0 - angle(F, A, G) mod 360, angle(A, F, I) == 0 - angle(A, G, F) mod 360, angle(F, I, A) == 0 - angle(G, F, A) mod 360, log(distance(A, F)) + log(distance(A, F)) == log(distance(A, I)) + log(distance(A, G)), log(distance(A, F)) + log(distance(F, G)) == log(distance(A, G)) + log(distance(F, I)), log(distance(F, G)) + log(distance(A, I)) == log(distance(F, I)) + log(distance(A, F))
By internal_angle_bisector_definition_v0_r on C, F, C, line_intersection(Line(B, D), Line(C, F)) we get Line(F, line_intersection(Line(B, D), Line(C, F))) == internal_angle_bisector(C, line_intersection(Line(B, D), Line(C, F)), C)
By tangent_chord_angle_v1 on A, D, center(d), F we get tangent(Line(A, F), Circle(A, D, center(d)))
By collinear_definition on I, A, G we get A in Line(G, I), G in Line(A, I), Line(A, I) == Line(G, I), 0 == 2 * angle(A, I, G) mod 360
By internal_angle_bisector_definition_v0_r on I, line_intersection(Line(B, D), Line(C, F)), I, E we get internal_angle_bisector(I, E, I) == Line(E, line_intersection(Line(B, D), Line(C, F)))
By altitude_definition on H, F, center(d), Line(A, H) we get Line(A, H) == altitude(H, F, center(d))
By concyclic_definition_0 on midpoint(A, H), A, F, midpoint(D, F) we get midpoint(D, F) in Circle(A, F, midpoint(A, H))
By internal_angle_bisector_definition_v0_r on E, line_intersection(Line(B, D), Line(C, F)), E, I we get internal_angle_bisector(E, I, E) == Line(I, line_intersection(Line(B, D), Line(C, F)))
By altitude_definition on D, center(d), A, k we get k == altitude(D, A, center(d))
By altitude_definition on A, center(d), F, Line(A, H) we get Line(A, H) == altitude(A, F, center(d))
By internal_angle_bisector_definition_v0_r on D, B, D, line_intersection(Line(B, D), Line(C, F)) we get Line(B, line_intersection(Line(B, D), Line(C, F))) == internal_angle_bisector(D, line_intersection(Line(B, D), Line(C, F)), D)
By internal_angle_bisector_definition_v0_r on I, E, I, line_intersection(Line(B, D), Line(C, F)) we get Line(E, line_intersection(Line(B, D), Line(C, F))) == internal_angle_bisector(I, line_intersection(Line(B, D), Line(C, F)), I)
By internal_angle_bisector_definition_v0_r on line_intersection(Line(B, D), Line(C, F)), F, line_intersection(Line(B, D), Line(C, F)), C we get Line(C, F) == internal_angle_bisector(line_intersection(Line(B, D), Line(C, F)), C, line_intersection(Line(B, D), Line(C, F)))
By internal_angle_bisector_definition_v0_r on line_intersection(Line(B, D), Line(C, F)), C, line_intersection(Line(B, D), Line(C, F)), F we get Line(C, F) == internal_angle_bisector(line_intersection(Line(B, D), Line(C, F)), F, line_intersection(Line(B, D), Line(C, F)))
By power_of_a_point_definition on I, A, G, d we get log(power_of_a_point(I, d)) == log(distance(A, I)) + log(distance(G, I))
By collinear_definition on G, A, I we get A in Line(G, I), I in Line(A, G), Line(A, G) == Line(G, I), 0 == 2 * angle(A, G, I) mod 360
By collinear_definition on A, line_intersection(j, median(A, D, F)), midpoint(D, F) we get line_intersection(j, median(A, D, F)) in Line(A, midpoint(D, F)), midpoint(D, F) in Line(A, line_intersection(j, median(A, D, F))), Line(A, midpoint(D, F)) == Line(A, line_intersection(j, median(A, D, F))), 0 == 2 * angle(line_intersection(j, median(A, D, F)), A, midpoint(D, F)) mod 360
By internal_angle_bisector_definition_v0_r on line_intersection(Line(B, D), Line(C, F)), D, line_intersection(Line(B, D), Line(C, F)), B we get Line(B, D) == internal_angle_bisector(line_intersection(Line(B, D), Line(C, F)), B, line_intersection(Line(B, D), Line(C, F)))
By concyclic_definition_0 on A, F, midpoint(D, F), midpoint(A, H) we get midpoint(A, H) in Circle(A, F, midpoint(D, F))
By internal_angle_bisector_definition_v0_r on C, line_intersection(Line(B, D), Line(C, F)), C, F we get internal_angle_bisector(C, F, C) == Line(F, line_intersection(Line(B, D), Line(C, F)))
By collinear_definition on A, center(d), line_intersection(j, median(A, D, F)) we get center(d) in Line(A, line_intersection(j, median(A, D, F))), line_intersection(j, median(A, D, F)) in Line(A, center(d)), Line(A, center(d)) == Line(A, line_intersection(j, median(A, D, F))), 0 == 2 * angle(center(d), A, line_intersection(j, median(A, D, F))) mod 360
By internal_angle_bisector_definition_v0_r on line_intersection(Line(B, D), Line(C, F)), I, line_intersection(Line(B, D), Line(C, F)), E we get Line(E, I) == internal_angle_bisector(line_intersection(Line(B, D), Line(C, F)), E, line_intersection(Line(B, D), Line(C, F)))
By internal_angle_bisector_definition_v0_r on B, D, B, line_intersection(Line(B, D), Line(C, F)) we get Line(D, line_intersection(Line(B, D), Line(C, F))) == internal_angle_bisector(B, line_intersection(Line(B, D), Line(C, F)), B)
By internal_angle_bisector_definition_v0_r on B, line_intersection(Line(B, D), Line(C, F)), B, D we get internal_angle_bisector(B, D, B) == Line(D, line_intersection(Line(B, D), Line(C, F)))
By collinear_definition on A, midpoint(D, F), line_intersection(j, median(A, D, F)) we get midpoint(D, F) in Line(A, line_intersection(j, median(A, D, F))), line_intersection(j, median(A, D, F)) in Line(A, midpoint(D, F)), Line(A, midpoint(D, F)) == Line(A, line_intersection(j, median(A, D, F))), 0 == 2 * angle(midpoint(D, F), A, line_intersection(j, median(A, D, F))) mod 360
By internal_angle_bisector_definition_v0_r on line_intersection(Line(B, D), Line(C, F)), B, line_intersection(Line(B, D), Line(C, F)), D we get Line(B, D) == internal_angle_bisector(line_intersection(Line(B, D), Line(C, F)), D, line_intersection(Line(B, D), Line(C, F)))
By internal_angle_bisector_definition_v0_r on F, line_intersection(Line(B, D), Line(C, F)), F, C we get internal_angle_bisector(F, C, F) == Line(C, line_intersection(Line(B, D), Line(C, F)))
By collinear_definition on A, line_intersection(j, median(A, D, F)), center(d) we get line_intersection(j, median(A, D, F)) in Line(A, center(d)), center(d) in Line(A, line_intersection(j, median(A, D, F))), Line(A, center(d)) == Line(A, line_intersection(j, median(A, D, F))), 0 == 2 * angle(line_intersection(j, median(A, D, F)), A, center(d)) mod 360
By internal_angle_bisector_definition_v0_r on D, line_intersection(Line(B, D), Line(C, F)), D, B we get internal_angle_bisector(D, B, D) == Line(B, line_intersection(Line(B, D), Line(C, F)))
By internal_angle_bisector_definition_v0_r on E, I, E, line_intersection(Line(B, D), Line(C, F)) we get Line(I, line_intersection(Line(B, D), Line(C, F))) == internal_angle_bisector(E, line_intersection(Line(B, D), Line(C, F)), E)
By internal_angle_bisector_definition_v0_r on F, C, F, line_intersection(Line(B, D), Line(C, F)) we get Line(C, line_intersection(Line(B, D), Line(C, F))) == internal_angle_bisector(F, line_intersection(Line(B, D), Line(C, F)), F)
By collinear_definition on I, G, A we get G in Line(A, I), A in Line(G, I), Line(A, I) == Line(G, I), 0 == 2 * angle(G, I, A) mod 360
By collinear_definition on G, I, A we get I in Line(A, G), A in Line(G, I), Line(A, G) == Line(G, I), 0 == 2 * angle(I, G, A) mod 360
By isosceles_triangle_altitude_v1 on line_intersection(j, median(A, D, F)), F, D we get identical(perpendicular_bisector(D, F), internal_angle_bisector(D, line_intersection(j, median(A, D, F)), F), perpendicular_line(line_intersection(j, median(A, D, F)), Line(D, F)))
By isosceles_triangle_altitude_v1 on line_intersection(j, median(A, D, F)), D, F we get identical(perpendicular_bisector(D, F), internal_angle_bisector(D, line_intersection(j, median(A, D, F)), F), perpendicular_line(line_intersection(j, median(A, D, F)), Line(D, F)))
By anti_similar_triangle_basic_properties on A, midpoint(D, F), D, F, midpoint(A, H), H we get not_collinear(A, D, midpoint(D, F)), not_collinear(F, H, midpoint(A, H)), angle(A, midpoint(D, F), D) == 0 - angle(F, midpoint(A, H), H) mod 360, angle(midpoint(D, F), D, A) == 0 - angle(midpoint(A, H), H, F) mod 360, angle(D, A, midpoint(D, F)) == 0 - angle(H, F, midpoint(A, H)) mod 360, log(distance(A, midpoint(D, F))) + log(distance(H, midpoint(A, H))) == log(distance(F, midpoint(A, H))) + log(distance(D, midpoint(D, F))), log(distance(D, midpoint(D, F))) + log(distance(F, H)) == log(distance(H, midpoint(A, H))) + log(distance(A, D)), log(distance(A, D)) + log(distance(F, midpoint(A, H))) == log(distance(F, H)) + log(distance(A, midpoint(D, F)))
By similar_triangle_basic_properties on F, A, midpoint(A, H), A, D, midpoint(D, F) we get not_collinear(A, F, midpoint(A, H)), not_collinear(A, D, midpoint(D, F)), angle(A, D, midpoint(D, F)) == angle(F, A, midpoint(A, H)) mod 360, angle(A, midpoint(A, H), F) == angle(D, midpoint(D, F), A) mod 360, angle(midpoint(A, H), F, A) == angle(midpoint(D, F), A, D) mod 360, log(distance(A, D)) + log(distance(A, midpoint(A, H))) == log(distance(A, F)) + log(distance(D, midpoint(D, F))), log(distance(A, midpoint(A, H))) + log(distance(A, midpoint(D, F))) == log(distance(D, midpoint(D, F))) + log(distance(F, midpoint(A, H))), log(distance(A, midpoint(D, F))) + log(distance(A, F)) == log(distance(F, midpoint(A, H))) + log(distance(A, D))
By sas_anti_similarity on G, D, I, F, A, I we get anti_similar_triangles(A, F, I, D, G, I)
By anti_similar_triangle_basic_properties on D, midpoint(D, F), H, H, midpoint(A, H), D we get not_collinear(D, H, midpoint(D, F)), not_collinear(D, H, midpoint(A, H)), angle(D, midpoint(D, F), H) == 0 - angle(H, midpoint(A, H), D) mod 360, angle(midpoint(D, F), H, D) == 0 - angle(midpoint(A, H), D, H) mod 360, angle(H, D, midpoint(D, F)) == 0 - angle(D, H, midpoint(A, H)) mod 360, log(distance(D, midpoint(D, F))) + log(distance(D, midpoint(A, H))) == log(distance(H, midpoint(A, H))) + log(distance(H, midpoint(D, F))), log(distance(D, midpoint(A, H))) + log(distance(D, H)) == log(distance(H, midpoint(D, F))) + log(distance(D, H)), log(distance(D, H)) + log(distance(D, midpoint(D, F))) == log(distance(D, H)) + log(distance(H, midpoint(A, H)))
By anti_similar_triangle_basic_properties on D, midpoint(D, F), A, H, midpoint(A, H), F we get not_collinear(A, D, midpoint(D, F)), not_collinear(F, H, midpoint(A, H)), angle(D, midpoint(D, F), A) == 0 - angle(H, midpoint(A, H), F) mod 360, angle(midpoint(D, F), A, D) == 0 - angle(midpoint(A, H), F, H) mod 360, angle(A, D, midpoint(D, F)) == 0 - angle(F, H, midpoint(A, H)) mod 360, log(distance(D, midpoint(D, F))) + log(distance(F, midpoint(A, H))) == log(distance(H, midpoint(A, H))) + log(distance(A, midpoint(D, F))), log(distance(A, midpoint(D, F))) + log(distance(F, H)) == log(distance(F, midpoint(A, H))) + log(distance(A, D)), log(distance(A, D)) + log(distance(H, midpoint(A, H))) == log(distance(F, H)) + log(distance(D, midpoint(D, F)))
By anti_similar_triangle_basic_properties on midpoint(A, H), A, F, midpoint(D, F), F, A we get not_collinear(A, F, midpoint(A, H)), not_collinear(A, F, midpoint(D, F)), angle(midpoint(A, H), A, F) == 0 - angle(midpoint(D, F), F, A) mod 360, angle(A, F, midpoint(A, H)) == 0 - angle(F, A, midpoint(D, F)) mod 360, angle(F, midpoint(A, H), A) == 0 - angle(A, midpoint(D, F), F) mod 360, log(distance(A, midpoint(A, H))) + log(distance(A, F)) == log(distance(F, midpoint(D, F))) + log(distance(A, F)), log(distance(A, F)) + log(distance(A, midpoint(D, F))) == log(distance(A, F)) + log(distance(F, midpoint(A, H))), log(distance(A, midpoint(D, F))) + log(distance(A, midpoint(A, H))) == log(distance(F, midpoint(A, H))) + log(distance(F, midpoint(D, F)))
By similar_triangle_basic_properties on A, F, midpoint(D, F), F, H, midpoint(A, H) we get not_collinear(A, F, midpoint(D, F)), not_collinear(F, H, midpoint(A, H)), angle(A, F, midpoint(D, F)) == angle(F, H, midpoint(A, H)) mod 360, angle(F, midpoint(D, F), A) == angle(H, midpoint(A, H), F) mod 360, angle(midpoint(A, H), F, H) == angle(midpoint(D, F), A, F) mod 360, log(distance(A, F)) + log(distance(H, midpoint(A, H))) == log(distance(F, H)) + log(distance(F, midpoint(D, F))), log(distance(F, midpoint(D, F))) + log(distance(F, midpoint(A, H))) == log(distance(H, midpoint(A, H))) + log(distance(A, midpoint(D, F))), log(distance(A, midpoint(D, F))) + log(distance(F, H)) == log(distance(F, midpoint(A, H))) + log(distance(A, F))
By anti_similar_triangle_basic_properties on center(d), H, F, center(d), F, H we get not_collinear(F, H, center(d)), not_collinear(F, H, center(d)), angle(center(d), H, F) == 0 - angle(center(d), F, H) mod 360, angle(H, F, center(d)) == 0 - angle(F, H, center(d)) mod 360, angle(F, center(d), H) == 0 - angle(H, center(d), F) mod 360, log(distance(F, center(d))) + log(distance(F, H)) == log(distance(H, center(d))) + log(distance(F, H)), log(distance(F, H)) + log(distance(F, center(d))) == log(distance(F, H)) + log(distance(H, center(d))), log(distance(F, center(d))) + log(distance(F, center(d))) == log(distance(H, center(d))) + log(distance(H, center(d)))
By concyclic_definition_1 on midpoint(D, F), F, A, midpoint(A, H) we get Circle(A, F, midpoint(A, H)) == Circle(A, F, midpoint(D, F))
By anti_similar_triangle_basic_properties on center(d), A, F, center(d), F, A we get not_collinear(A, F, center(d)), not_collinear(A, F, center(d)), angle(center(d), A, F) == 0 - angle(center(d), F, A) mod 360, angle(A, F, center(d)) == 0 - angle(F, A, center(d)) mod 360, angle(F, center(d), A) == 0 - angle(A, center(d), F) mod 360, log(distance(A, center(d))) + log(distance(A, F)) == log(distance(F, center(d))) + log(distance(A, F)), log(distance(A, F)) + log(distance(A, center(d))) == log(distance(A, F)) + log(distance(F, center(d))), log(distance(A, center(d))) + log(distance(A, center(d))) == log(distance(F, center(d))) + log(distance(F, center(d)))
By similar_triangle_basic_properties on F, midpoint(A, H), A, A, midpoint(D, F), D we get not_collinear(A, F, midpoint(A, H)), not_collinear(A, D, midpoint(D, F)), angle(A, midpoint(D, F), D) == angle(F, midpoint(A, H), A) mod 360, angle(midpoint(A, H), A, F) == angle(midpoint(D, F), D, A) mod 360, angle(A, F, midpoint(A, H)) == angle(D, A, midpoint(D, F)) mod 360, log(distance(A, midpoint(D, F))) + log(distance(A, midpoint(A, H))) == log(distance(F, midpoint(A, H))) + log(distance(D, midpoint(D, F))), log(distance(A, midpoint(A, H))) + log(distance(A, D)) == log(distance(D, midpoint(D, F))) + log(distance(A, F)), log(distance(A, D)) + log(distance(F, midpoint(A, H))) == log(distance(A, F)) + log(distance(A, midpoint(D, F)))
By similar_triangle_basic_properties on midpoint(D, F), F, A, midpoint(A, H), H, F we get not_collinear(A, F, midpoint(D, F)), not_collinear(F, H, midpoint(A, H)), angle(midpoint(A, H), H, F) == angle(midpoint(D, F), F, A) mod 360, angle(F, A, midpoint(D, F)) == angle(H, F, midpoint(A, H)) mod 360, angle(A, midpoint(D, F), F) == angle(F, midpoint(A, H), H) mod 360, log(distance(F, midpoint(D, F))) + log(distance(F, H)) == log(distance(H, midpoint(A, H))) + log(distance(A, F)), log(distance(A, F)) + log(distance(F, midpoint(A, H))) == log(distance(F, H)) + log(distance(A, midpoint(D, F))), log(distance(A, midpoint(D, F))) + log(distance(H, midpoint(A, H))) == log(distance(F, midpoint(A, H))) + log(distance(F, midpoint(D, F)))
By sas_anti_similarity on F, A, I, G, D, I we get anti_similar_triangles(A, F, I, D, G, I)
By isosceles_triangle_properties on line_intersection(j, median(A, D, F)), F, D we get distance(D, line_intersection(j, median(A, D, F))) == distance(F, line_intersection(j, median(A, D, F))), angle(F, D, line_intersection(j, median(A, D, F))) == angle(line_intersection(j, median(A, D, F)), F, D) mod 360
By anti_similar_triangle_basic_properties on A, D, center(d), D, A, center(d) we get not_collinear(A, D, center(d)), not_collinear(A, D, center(d)), angle(A, D, center(d)) == 0 - angle(D, A, center(d)) mod 360, angle(D, center(d), A) == 0 - angle(A, center(d), D) mod 360, angle(center(d), A, D) == 0 - angle(center(d), D, A) mod 360, log(distance(A, D)) + log(distance(A, center(d))) == log(distance(A, D)) + log(distance(D, center(d))), log(distance(A, center(d))) + log(distance(A, center(d))) == log(distance(D, center(d))) + log(distance(D, center(d))), log(distance(A, center(d))) + log(distance(A, D)) == log(distance(D, center(d))) + log(distance(A, D))
By sas_anti_similarity on I, F, G, I, A, D we get anti_similar_triangles(A, D, I, F, G, I)
By isosceles_triangle_properties on line_intersection(j, median(A, D, F)), D, F we get distance(D, line_intersection(j, median(A, D, F))) == distance(F, line_intersection(j, median(A, D, F))), angle(D, F, line_intersection(j, median(A, D, F))) == angle(line_intersection(j, median(A, D, F)), D, F) mod 360
By sas_anti_similarity on I, A, D, I, F, G we get anti_similar_triangles(A, D, I, F, G, I)
By sas_anti_similarity on G, F, I, D, A, I we get anti_similar_triangles(A, D, I, F, G, I)
By sas_anti_similarity on I, D, G, I, A, F we get anti_similar_triangles(A, F, I, D, G, I)
By altitude_definition on E, A, midpoint(D, F), j we get j == altitude(E, A, midpoint(D, F))
By sas_anti_similarity on D, A, I, G, F, I we get anti_similar_triangles(A, D, I, F, G, I)
By sas_anti_similarity on I, A, F, I, D, G we get anti_similar_triangles(A, F, I, D, G, I)
By isosceles_triangle_altitude_v3 on line_intersection(j, median(A, D, F)), F, D we get identical(perpendicular_bisector(D, F), internal_angle_bisector(D, line_intersection(j, median(A, D, F)), F), perpendicular_line(line_intersection(j, median(A, D, F)), Line(D, F)))
By isosceles_triangle_altitude_v3 on line_intersection(j, median(A, D, F)), D, F we get identical(perpendicular_bisector(D, F), internal_angle_bisector(D, line_intersection(j, median(A, D, F)), F), perpendicular_line(line_intersection(j, median(A, D, F)), Line(D, F)))
By isosceles_triangle_altitude_v3 on line_intersection(j, median(A, D, F)), F, D we get identical(perpendicular_bisector(D, F), internal_angle_bisector(D, line_intersection(j, median(A, D, F)), F), perpendicular_line(line_intersection(j, median(A, D, F)), Line(D, F)))
By isosceles_triangle_altitude_v3 on line_intersection(j, median(A, D, F)), D, F we get identical(perpendicular_bisector(D, F), internal_angle_bisector(D, line_intersection(j, median(A, D, F)), F), perpendicular_line(line_intersection(j, median(A, D, F)), Line(D, F)))
By anti_similar_triangle_basic_properties on F, H, center(d), F, A, center(d) we get not_collinear(F, H, center(d)), not_collinear(A, F, center(d)), angle(F, H, center(d)) == 0 - angle(F, A, center(d)) mod 360, angle(H, center(d), F) == 0 - angle(A, center(d), F) mod 360, angle(center(d), F, H) == 0 - angle(center(d), F, A) mod 360, log(distance(A, F)) + log(distance(H, center(d))) == log(distance(F, H)) + log(distance(A, center(d))), log(distance(A, center(d))) + log(distance(F, center(d))) == log(distance(H, center(d))) + log(distance(F, center(d))), log(distance(F, center(d))) + log(distance(A, F)) == log(distance(F, center(d))) + log(distance(F, H))
By anti_similar_triangle_basic_properties on center(d), F, A, center(d), D, A we get not_collinear(A, F, center(d)), not_collinear(A, D, center(d)), angle(center(d), F, A) == 0 - angle(center(d), D, A) mod 360, angle(F, A, center(d)) == 0 - angle(D, A, center(d)) mod 360, angle(A, center(d), F) == 0 - angle(A, center(d), D) mod 360, log(distance(D, center(d))) + log(distance(A, F)) == log(distance(F, center(d))) + log(distance(A, D)), log(distance(A, D)) + log(distance(A, center(d))) == log(distance(A, F)) + log(distance(A, center(d))), log(distance(A, center(d))) + log(distance(D, center(d))) == log(distance(A, center(d))) + log(distance(F, center(d)))
By anti_similar_triangle_basic_properties on D, center(d), A, F, center(d), A we get not_collinear(A, D, center(d)), not_collinear(A, F, center(d)), angle(D, center(d), A) == 0 - angle(F, center(d), A) mod 360, angle(center(d), A, D) == 0 - angle(center(d), A, F) mod 360, angle(A, D, center(d)) == 0 - angle(A, F, center(d)) mod 360, log(distance(D, center(d))) + log(distance(A, center(d))) == log(distance(F, center(d))) + log(distance(A, center(d))), log(distance(A, center(d))) + log(distance(A, D)) == log(distance(A, center(d))) + log(distance(A, F)), log(distance(A, D)) + log(distance(F, center(d))) == log(distance(A, F)) + log(distance(D, center(d)))
By similar_triangle_basic_properties on A, center(d), D, F, center(d), A we get not_collinear(A, D, center(d)), not_collinear(A, F, center(d)), angle(A, center(d), D) == angle(F, center(d), A) mod 360, angle(center(d), A, F) == angle(center(d), D, A) mod 360, angle(A, F, center(d)) == angle(D, A, center(d)) mod 360, log(distance(A, center(d))) + log(distance(A, center(d))) == log(distance(F, center(d))) + log(distance(D, center(d))), log(distance(A, center(d))) + log(distance(A, D)) == log(distance(D, center(d))) + log(distance(A, F)), log(distance(A, D)) + log(distance(F, center(d))) == log(distance(A, F)) + log(distance(A, center(d)))
By anti_similar_triangle_basic_properties on F, center(d), A, F, center(d), H we get not_collinear(A, F, center(d)), not_collinear(F, H, center(d)), angle(F, center(d), A) == 0 - angle(F, center(d), H) mod 360, angle(center(d), A, F) == 0 - angle(center(d), H, F) mod 360, angle(A, F, center(d)) == 0 - angle(H, F, center(d)) mod 360, log(distance(F, center(d))) + log(distance(A, center(d))) == log(distance(F, center(d))) + log(distance(H, center(d))), log(distance(A, center(d))) + log(distance(F, H)) == log(distance(H, center(d))) + log(distance(A, F)), log(distance(A, F)) + log(distance(F, center(d))) == log(distance(F, H)) + log(distance(F, center(d)))
By similar_triangle_basic_properties on F, center(d), A, H, center(d), F we get not_collinear(A, F, center(d)), not_collinear(F, H, center(d)), angle(F, center(d), A) == angle(H, center(d), F) mod 360, angle(center(d), A, F) == angle(center(d), F, H) mod 360, angle(A, F, center(d)) == angle(F, H, center(d)) mod 360, log(distance(F, center(d))) + log(distance(F, center(d))) == log(distance(H, center(d))) + log(distance(A, center(d))), log(distance(A, center(d))) + log(distance(F, H)) == log(distance(F, center(d))) + log(distance(A, F)), log(distance(A, F)) + log(distance(H, center(d))) == log(distance(F, H)) + log(distance(F, center(d)))
By similar_triangle_basic_properties on center(d), A, D, center(d), F, A we get not_collinear(A, D, center(d)), not_collinear(A, F, center(d)), angle(center(d), A, D) == angle(center(d), F, A) mod 360, angle(A, D, center(d)) == angle(F, A, center(d)) mod 360, angle(A, center(d), F) == angle(D, center(d), A) mod 360, log(distance(A, center(d))) + log(distance(A, F)) == log(distance(F, center(d))) + log(distance(A, D)), log(distance(A, D)) + log(distance(A, center(d))) == log(distance(A, F)) + log(distance(D, center(d))), log(distance(A, center(d))) + log(distance(A, center(d))) == log(distance(D, center(d))) + log(distance(F, center(d)))
By similar_triangle_basic_properties on F, center(d), H, A, center(d), F we get not_collinear(F, H, center(d)), not_collinear(A, F, center(d)), angle(A, center(d), F) == angle(F, center(d), H) mod 360, angle(center(d), F, A) == angle(center(d), H, F) mod 360, angle(F, A, center(d)) == angle(H, F, center(d)) mod 360, log(distance(A, center(d))) + log(distance(H, center(d))) == log(distance(F, center(d))) + log(distance(F, center(d))), log(distance(F, center(d))) + log(distance(F, H)) == log(distance(H, center(d))) + log(distance(A, F)), log(distance(A, F)) + log(distance(F, center(d))) == log(distance(F, H)) + log(distance(A, center(d)))
By similar_triangle_basic_properties on A, center(d), D, H, center(d), F we get not_collinear(A, D, center(d)), not_collinear(F, H, center(d)), angle(A, center(d), D) == angle(H, center(d), F) mod 360, angle(center(d), D, A) == angle(center(d), F, H) mod 360, angle(D, A, center(d)) == angle(F, H, center(d)) mod 360, log(distance(A, center(d))) + log(distance(F, center(d))) == log(distance(H, center(d))) + log(distance(D, center(d))), log(distance(D, center(d))) + log(distance(F, H)) == log(distance(F, center(d))) + log(distance(A, D)), log(distance(A, D)) + log(distance(H, center(d))) == log(distance(F, H)) + log(distance(A, center(d)))
By similar_triangle_basic_properties on center(d), H, F, center(d), A, D we get not_collinear(F, H, center(d)), not_collinear(A, D, center(d)), angle(center(d), A, D) == angle(center(d), H, F) mod 360, angle(A, D, center(d)) == angle(H, F, center(d)) mod 360, angle(D, center(d), A) == angle(F, center(d), H) mod 360, log(distance(A, center(d))) + log(distance(F, H)) == log(distance(H, center(d))) + log(distance(A, D)), log(distance(A, D)) + log(distance(F, center(d))) == log(distance(F, H)) + log(distance(D, center(d))), log(distance(D, center(d))) + log(distance(H, center(d))) == log(distance(F, center(d))) + log(distance(A, center(d)))
By anti_similar_triangle_basic_properties on F, center(d), H, A, center(d), D we get not_collinear(F, H, center(d)), not_collinear(A, D, center(d)), angle(F, center(d), H) == 0 - angle(A, center(d), D) mod 360, angle(center(d), H, F) == 0 - angle(center(d), D, A) mod 360, angle(H, F, center(d)) == 0 - angle(D, A, center(d)) mod 360, log(distance(A, center(d))) + log(distance(H, center(d))) == log(distance(F, center(d))) + log(distance(D, center(d))), log(distance(D, center(d))) + log(distance(F, H)) == log(distance(H, center(d))) + log(distance(A, D)), log(distance(A, D)) + log(distance(F, center(d))) == log(distance(F, H)) + log(distance(A, center(d)))
By anti_similar_triangle_basic_properties on F, H, center(d), A, D, center(d) we get not_collinear(F, H, center(d)), not_collinear(A, D, center(d)), angle(F, H, center(d)) == 0 - angle(A, D, center(d)) mod 360, angle(H, center(d), F) == 0 - angle(D, center(d), A) mod 360, angle(center(d), F, H) == 0 - angle(center(d), A, D) mod 360, log(distance(A, D)) + log(distance(H, center(d))) == log(distance(F, H)) + log(distance(D, center(d))), log(distance(D, center(d))) + log(distance(F, center(d))) == log(distance(H, center(d))) + log(distance(A, center(d))), log(distance(A, center(d))) + log(distance(F, H)) == log(distance(F, center(d))) + log(distance(A, D))
By power_of_a_point_definition on line_intersection(Line(B, D), Line(C, F)), F, C, Circle(B, C, F) we get log(power_of_a_point(line_intersection(Line(B, D), Line(C, F)), Circle(B, C, F))) == log(distance(F, line_intersection(Line(B, D), Line(C, F)))) + log(distance(C, line_intersection(Line(B, D), Line(C, F))))
By concyclic_sufficient_conditions_v1 on C, H, G, I we get concyclic(C, G, H, I)
By line_intersection_definition on orthocenter(F, H, midpoint(A, H)), Line(A, H), median(F, A, H) we get orthocenter(F, H, midpoint(A, H)) == line_intersection(Line(A, H), median(F, A, H))
By line_intersection_definition on orthocenter(A, D, midpoint(D, F)), k, median(A, D, F) we get orthocenter(A, D, midpoint(D, F)) == line_intersection(k, median(A, D, F))
By line_intersection_definition on orthocenter(A, F, midpoint(A, H)), Line(A, H), median(F, A, H) we get orthocenter(A, F, midpoint(A, H)) == line_intersection(Line(A, H), median(F, A, H))
By line_intersection_definition on orthocenter(A, F, midpoint(D, F)), median(A, D, F), k we get orthocenter(A, F, midpoint(D, F)) == line_intersection(k, median(A, D, F))
By perpendicular_line_definition on orthocenter(A, F, midpoint(D, F)), median(A, D, F), k we get median(A, D, F) == perpendicular_line(orthocenter(A, F, midpoint(D, F)), k)
By perpendicular_line_definition on orthocenter(A, F, midpoint(D, F)), median(A, D, F), j we get median(A, D, F) == perpendicular_line(orthocenter(A, F, midpoint(D, F)), j)
By perpendicular_line_definition on orthocenter(F, H, midpoint(A, H)), Line(A, H), median(F, A, H) we get Line(A, H) == perpendicular_line(orthocenter(F, H, midpoint(A, H)), median(F, A, H))
By perpendicular_line_definition on F, f, altitude(midpoint(D, F), A, F) we get f == perpendicular_line(F, altitude(midpoint(D, F), A, F))
By line_intersection_definition on D, i, median(D, A, H) we get D == line_intersection(i, median(D, A, H))
By perpendicular_line_definition on F, Line(F, H), altitude(midpoint(A, H), F, H) we get Line(F, H) == perpendicular_line(F, altitude(midpoint(A, H), F, H))
By line_intersection_definition on H, Line(F, H), median(H, D, F) we get H == line_intersection(Line(F, H), median(H, D, F))
By line_intersection_definition on midpoint(D, F), k, median(H, D, F) we get midpoint(D, F) == line_intersection(k, median(H, D, F))
By perpendicular_line_definition on orthocenter(A, F, midpoint(A, H)), altitude(midpoint(A, H), A, F), f we get altitude(midpoint(A, H), A, F) == perpendicular_line(orthocenter(A, F, midpoint(A, H)), f)
By line_intersection_definition on D, h, median(D, A, H) we get D == line_intersection(h, median(D, A, H))
By perpendicular_line_definition on D, i, altitude(midpoint(D, F), A, D) we get i == perpendicular_line(D, altitude(midpoint(D, F), A, D))
By line_intersection_definition on midpoint(A, H), median(D, A, H), Line(A, H) we get midpoint(A, H) == line_intersection(Line(A, H), median(D, A, H))
By perpendicular_line_definition on F, f, altitude(midpoint(A, H), A, F) we get f == perpendicular_line(F, altitude(midpoint(A, H), A, F))
By perpendicular_line_definition on A, f, altitude(midpoint(A, H), A, F) we get f == perpendicular_line(A, altitude(midpoint(A, H), A, F))
By perpendicular_line_definition on orthocenter(A, F, midpoint(D, F)), altitude(midpoint(D, F), A, F), f we get altitude(midpoint(D, F), A, F) == perpendicular_line(orthocenter(A, F, midpoint(D, F)), f)
By perpendicular_line_definition on A, f, altitude(midpoint(D, F), A, F) we get f == perpendicular_line(A, altitude(midpoint(D, F), A, F))
By line_intersection_definition on H, h, median(H, D, F) we get H == line_intersection(h, median(H, D, F))
By perpendicular_line_definition on B, f, altitude(midpoint(A, H), A, F) we get f == perpendicular_line(B, altitude(midpoint(A, H), A, F))
By perpendicular_line_definition on orthocenter(A, F, midpoint(D, F)), k, median(A, D, F) we get k == perpendicular_line(orthocenter(A, F, midpoint(D, F)), median(A, D, F))
By perpendicular_line_definition on orthocenter(A, D, midpoint(D, F)), median(A, D, F), j we get median(A, D, F) == perpendicular_line(orthocenter(A, D, midpoint(D, F)), j)
By perpendicular_line_definition on H, Line(F, H), altitude(midpoint(A, H), F, H) we get Line(F, H) == perpendicular_line(H, altitude(midpoint(A, H), F, H))
By perpendicular_line_definition on orthocenter(A, D, midpoint(D, F)), k, median(A, D, F) we get k == perpendicular_line(orthocenter(A, D, midpoint(D, F)), median(A, D, F))
By perpendicular_line_definition on A, i, altitude(midpoint(D, F), A, D) we get i == perpendicular_line(A, altitude(midpoint(D, F), A, D))
By perpendicular_line_definition on orthocenter(F, H, midpoint(A, H)), altitude(midpoint(A, H), F, H), Line(F, H) we get altitude(midpoint(A, H), F, H) == perpendicular_line(orthocenter(F, H, midpoint(A, H)), Line(F, H))
By perpendicular_line_definition on orthocenter(A, D, midpoint(D, F)), median(A, D, F), k we get median(A, D, F) == perpendicular_line(orthocenter(A, D, midpoint(D, F)), k)
By perpendicular_line_definition on orthocenter(A, F, midpoint(A, H)), Line(A, H), median(F, A, H) we get Line(A, H) == perpendicular_line(orthocenter(A, F, midpoint(A, H)), median(F, A, H))
By perpendicular_line_definition on orthocenter(A, D, midpoint(D, F)), altitude(midpoint(D, F), A, D), i we get altitude(midpoint(D, F), A, D) == perpendicular_line(orthocenter(A, D, midpoint(D, F)), i)
By perpendicular_line_definition on orthocenter(A, F, midpoint(A, H)), median(F, A, H), Line(A, H) we get median(F, A, H) == perpendicular_line(orthocenter(A, F, midpoint(A, H)), Line(A, H))
By perpendicular_line_definition on orthocenter(F, H, midpoint(A, H)), median(F, A, H), Line(A, H) we get median(F, A, H) == perpendicular_line(orthocenter(F, H, midpoint(A, H)), Line(A, H))
By perpendicular_line_definition on E, i, altitude(midpoint(D, F), A, D) we get i == perpendicular_line(E, altitude(midpoint(D, F), A, D))
By perpendicular_line_definition on B, f, altitude(midpoint(D, F), A, F) we get f == perpendicular_line(B, altitude(midpoint(D, F), A, F))
By line_unique_intersection_v0 on Line(A, H), median(F, A, H), midpoint(A, H), orthocenter(A, F, midpoint(A, H)) we get midpoint(A, H) == orthocenter(A, F, midpoint(A, H))
By line_unique_intersection_v0 on k, median(A, D, F), orthocenter(A, D, midpoint(D, F)), midpoint(D, F) we get midpoint(D, F) == orthocenter(A, D, midpoint(D, F))
By line_unique_intersection_v0 on median(A, D, F), k, orthocenter(A, D, midpoint(D, F)), orthocenter(A, F, midpoint(D, F)) we get orthocenter(A, D, midpoint(D, F)) == orthocenter(A, F, midpoint(D, F))
By line_unique_intersection_v0 on median(A, D, F), k, orthocenter(A, F, midpoint(D, F)), midpoint(D, F) we get midpoint(D, F) == orthocenter(A, F, midpoint(D, F))
By line_unique_intersection_v0 on median(F, A, H), Line(A, H), orthocenter(F, H, midpoint(A, H)), orthocenter(A, F, midpoint(A, H)) we get orthocenter(A, F, midpoint(A, H)) == orthocenter(F, H, midpoint(A, H))
By line_unique_intersection_v0 on median(F, A, H), Line(A, H), orthocenter(F, H, midpoint(A, H)), midpoint(A, H) we get midpoint(A, H) == orthocenter(F, H, midpoint(A, H))
By between_implies_orientation on midpoint(A, H), I, G, A we get orientation(A, midpoint(A, H), G) == orientation(G, midpoint(A, H), I) mod 360, orientation(A, midpoint(A, H), I) == orientation(G, midpoint(A, H), I) mod 360
By between_implies_orientation on line_intersection(j, median(A, D, F)), A, G, I we get orientation(A, G, line_intersection(j, median(A, D, F))) == orientation(G, I, line_intersection(j, median(A, D, F))) mod 360, orientation(A, G, line_intersection(j, median(A, D, F))) == orientation(A, I, line_intersection(j, median(A, D, F))) mod 360
By between_implies_orientation on line_intersection(Line(B, D), Line(C, F)), I, G, A we get orientation(A, line_intersection(Line(B, D), Line(C, F)), G) == orientation(G, line_intersection(Line(B, D), Line(C, F)), I) mod 360, orientation(A, line_intersection(Line(B, D), Line(C, F)), I) == orientation(G, line_intersection(Line(B, D), Line(C, F)), I) mod 360
By between_implies_orientation on line_intersection(Line(B, D), Line(C, F)), A, G, I we get orientation(A, G, line_intersection(Line(B, D), Line(C, F))) == orientation(G, I, line_intersection(Line(B, D), Line(C, F))) mod 360, orientation(A, G, line_intersection(Line(B, D), Line(C, F))) == orientation(A, I, line_intersection(Line(B, D), Line(C, F))) mod 360
By between_implies_orientation on line_intersection(j, median(A, D, F)), I, G, A we get orientation(A, line_intersection(j, median(A, D, F)), G) == orientation(G, line_intersection(j, median(A, D, F)), I) mod 360, orientation(A, line_intersection(j, median(A, D, F)), I) == orientation(G, line_intersection(j, median(A, D, F)), I) mod 360
By projection_definition on A, line_intersection(j, median(A, D, F)), j we get projection(A, j) == line_intersection(j, median(A, D, F))
By between_implies_orientation on midpoint(A, H), A, G, I we get orientation(A, G, midpoint(A, H)) == orientation(G, I, midpoint(A, H)) mod 360, orientation(A, G, midpoint(A, H)) == orientation(A, I, midpoint(A, H)) mod 360
By between_imply_not_between on I, G, A we get collinear_and_not_between(A, I, G)
By between_imply_not_between on A, G, I we get collinear_and_not_between(G, A, I)
By parallel_line_definition on orthocenter(A, F, midpoint(D, F)), k, j we get k == parallel_line(orthocenter(A, F, midpoint(D, F)), j)
By parallel_line_definition on orthocenter(A, D, midpoint(D, F)), k, j we get k == parallel_line(orthocenter(A, D, midpoint(D, F)), j)
By perpendicular_direction_conditions_v0_r on line_intersection(j, median(A, D, F)), A, D, I we get 180 == 2 * direction(line_intersection(j, median(A, D, F)), A) - 2 * direction(D, I) mod 360
By different_points_v1 on line_intersection(j, median(A, D, F)), F we get 0 != distance(F, line_intersection(j, median(A, D, F)))
By different_points_v1 on A, line_intersection(j, median(A, D, F)) we get 0 != distance(A, line_intersection(j, median(A, D, F)))
By different_points_v1 on line_intersection(j, median(A, D, F)), D we get 0 != distance(D, line_intersection(j, median(A, D, F)))
By reverse_orientation on line_intersection(Line(B, D), Line(C, F)), B, I we get orientation(B, I, line_intersection(Line(B, D), Line(C, F))) == 0 - orientation(B, line_intersection(Line(B, D), Line(C, F)), I) mod 360
By point_on_perpendicular_bisector on F, D, orthocenter(A, F, midpoint(D, F)), median(A, D, F) we get distance(D, orthocenter(A, F, midpoint(D, F))) == distance(F, orthocenter(A, F, midpoint(D, F)))
By in_imply_collinear on orthocenter(A, D, midpoint(D, F)), D, F we get collinear(D, F, orthocenter(A, D, midpoint(D, F)))
By perpendicular_direction_conditions_v0_r on line_intersection(j, median(A, D, F)), A, F, D we get 180 == 2 * direction(line_intersection(j, median(A, D, F)), A) - 2 * direction(F, D) mod 360
By between_imply_segment_sum on I, G, A we get distance(A, I) == distance(G, I) + distance(A, G)
By perpendicular_direction_conditions_v0_r on line_intersection(j, median(A, D, F)), A, C, E we get 180 == 2 * direction(line_intersection(j, median(A, D, F)), A) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on D, I, line_intersection(j, median(A, D, F)), A we get 180 == 2 * direction(D, I) - 2 * direction(line_intersection(j, median(A, D, F)), A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, median(A, D, F)), A, I, F we get 180 == 2 * direction(line_intersection(j, median(A, D, F)), A) - 2 * direction(I, F) mod 360
By perpendicular_direction_conditions_v0_r on I, F, line_intersection(j, median(A, D, F)), A we get 180 == 2 * direction(I, F) - 2 * direction(line_intersection(j, median(A, D, F)), A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, median(A, D, F)), A, D, F we get 180 == 2 * direction(line_intersection(j, median(A, D, F)), A) - 2 * direction(D, F) mod 360
By in_imply_collinear on orthocenter(A, F, midpoint(D, F)), D, midpoint(D, F) we get collinear(D, midpoint(D, F), orthocenter(A, F, midpoint(D, F)))
By in_imply_collinear on orthocenter(A, F, midpoint(D, F)), F, D we get collinear(D, F, orthocenter(A, F, midpoint(D, F)))
By perpendicular_direction_conditions_v0_r on line_intersection(j, median(A, D, F)), A, midpoint(D, F), D we get 180 == 2 * direction(line_intersection(j, median(A, D, F)), A) - 2 * direction(midpoint(D, F), D) mod 360
By orthocenter_concurrency on F, A, center(d) we get orthocenter(A, F, center(d)) in altitude(F, A, center(d)), orthocenter(A, F, center(d)) in altitude(A, F, center(d)), orthocenter(A, F, center(d)) in altitude(center(d), A, F)
By perpendicular_direction_conditions_v0_r on D, midpoint(D, F), line_intersection(j, median(A, D, F)), A we get 180 == 2 * direction(D, midpoint(D, F)) - 2 * direction(line_intersection(j, median(A, D, F)), A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, median(A, D, F)), A, D, midpoint(D, F) we get 180 == 2 * direction(line_intersection(j, median(A, D, F)), A) - 2 * direction(D, midpoint(D, F)) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(D, F), line_intersection(j, median(A, D, F)), A we get 180 == 2 * direction(F, midpoint(D, F)) - 2 * direction(line_intersection(j, median(A, D, F)), A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, median(A, D, F)), A, E, C we get 180 == 2 * direction(line_intersection(j, median(A, D, F)), A) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, median(A, D, F)), A, F, I we get 180 == 2 * direction(line_intersection(j, median(A, D, F)), A) - 2 * direction(F, I) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, median(A, D, F)), A, midpoint(D, F), F we get 180 == 2 * direction(line_intersection(j, median(A, D, F)), A) - 2 * direction(midpoint(D, F), F) mod 360
By in_imply_collinear on orthocenter(A, F, midpoint(D, F)), A, center(d) we get collinear(A, center(d), orthocenter(A, F, midpoint(D, F)))
By perpendicular_direction_conditions_v0_r on D, F, line_intersection(j, median(A, D, F)), A we get 180 == 2 * direction(D, F) - 2 * direction(line_intersection(j, median(A, D, F)), A) mod 360
By perpendicular_direction_conditions_v0_r on F, D, line_intersection(j, median(A, D, F)), A we get 180 == 2 * direction(F, D) - 2 * direction(line_intersection(j, median(A, D, F)), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(D, F), D, line_intersection(j, median(A, D, F)), A we get 180 == 2 * direction(midpoint(D, F), D) - 2 * direction(line_intersection(j, median(A, D, F)), A) mod 360
By perpendicular_direction_conditions_v0_r on F, I, line_intersection(j, median(A, D, F)), A we get 180 == 2 * direction(F, I) - 2 * direction(line_intersection(j, median(A, D, F)), A) mod 360
By perpendicular_direction_conditions_v0_r on C, E, line_intersection(j, median(A, D, F)), A we get 180 == 2 * direction(C, E) - 2 * direction(line_intersection(j, median(A, D, F)), A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, median(A, D, F)), A, F, midpoint(D, F) we get 180 == 2 * direction(line_intersection(j, median(A, D, F)), A) - 2 * direction(F, midpoint(D, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(D, F), F, line_intersection(j, median(A, D, F)), A we get 180 == 2 * direction(midpoint(D, F), F) - 2 * direction(line_intersection(j, median(A, D, F)), A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, median(A, D, F)), A, I, D we get 180 == 2 * direction(line_intersection(j, median(A, D, F)), A) - 2 * direction(I, D) mod 360
By perpendicular_direction_conditions_v0_r on I, D, line_intersection(j, median(A, D, F)), A we get 180 == 2 * direction(I, D) - 2 * direction(line_intersection(j, median(A, D, F)), A) mod 360
By perpendicular_direction_conditions_v0_r on E, C, line_intersection(j, median(A, D, F)), A we get 180 == 2 * direction(E, C) - 2 * direction(line_intersection(j, median(A, D, F)), A) mod 360
By in_imply_collinear on orthocenter(F, H, midpoint(A, H)), center(d), F we get collinear(F, center(d), orthocenter(F, H, midpoint(A, H)))
By in_imply_collinear on orthocenter(A, F, midpoint(A, H)), H, midpoint(A, H) we get collinear(H, midpoint(A, H), orthocenter(A, F, midpoint(A, H)))
By in_imply_collinear on orthocenter(F, H, midpoint(A, H)), A, midpoint(A, H) we get collinear(A, midpoint(A, H), orthocenter(F, H, midpoint(A, H)))
By in_imply_collinear on orthocenter(A, D, midpoint(D, F)), A, line_intersection(j, median(A, D, F)) we get collinear(A, orthocenter(A, D, midpoint(D, F)), line_intersection(j, median(A, D, F)))
By line_containment_inequality on orthocenter(A, F, midpoint(D, F)), H, k we get H != orthocenter(A, F, midpoint(D, F))
By in_imply_collinear on orthocenter(A, F, midpoint(D, F)), D, I we get collinear(D, I, orthocenter(A, F, midpoint(D, F)))
By in_imply_collinear on orthocenter(F, H, midpoint(A, H)), A, H we get collinear(A, H, orthocenter(F, H, midpoint(A, H)))
By in_imply_collinear on orthocenter(A, F, midpoint(A, H)), F, midpoint(A, H) we get collinear(F, midpoint(A, H), orthocenter(A, F, midpoint(A, H)))
By in_imply_collinear on orthocenter(F, H, midpoint(A, H)), F, midpoint(A, H) we get collinear(F, midpoint(A, H), orthocenter(F, H, midpoint(A, H)))
By in_imply_collinear on orthocenter(A, F, midpoint(D, F)), F, I we get collinear(F, I, orthocenter(A, F, midpoint(D, F)))
By in_imply_collinear on orthocenter(F, H, midpoint(A, H)), H, midpoint(A, H) we get collinear(H, midpoint(A, H), orthocenter(F, H, midpoint(A, H)))
By in_imply_collinear on orthocenter(A, D, midpoint(D, F)), I, F we get collinear(F, I, orthocenter(A, D, midpoint(D, F)))
By in_imply_collinear on orthocenter(A, D, midpoint(D, F)), A, center(d) we get collinear(A, center(d), orthocenter(A, D, midpoint(D, F)))
By in_imply_collinear on orthocenter(A, D, midpoint(D, F)), midpoint(D, F), D we get collinear(D, midpoint(D, F), orthocenter(A, D, midpoint(D, F)))
By in_imply_collinear on orthocenter(A, F, midpoint(D, F)), A, midpoint(D, F) we get collinear(A, midpoint(D, F), orthocenter(A, F, midpoint(D, F)))
By reverse_orientation on midpoint(D, F), F, line_intersection(Line(B, D), Line(C, F)) we get orientation(F, line_intersection(Line(B, D), Line(C, F)), midpoint(D, F)) == 0 - orientation(F, midpoint(D, F), line_intersection(Line(B, D), Line(C, F))) mod 360
By in_imply_collinear on orthocenter(A, D, midpoint(D, F)), midpoint(D, F), F we get collinear(F, midpoint(D, F), orthocenter(A, D, midpoint(D, F)))
By in_imply_collinear on orthocenter(A, F, midpoint(A, H)), midpoint(A, H), A we get collinear(A, midpoint(A, H), orthocenter(A, F, midpoint(A, H)))
By reverse_orientation on D, line_intersection(Line(B, D), Line(C, F)), A we get orientation(A, D, line_intersection(Line(B, D), Line(C, F))) == 0 - orientation(A, line_intersection(Line(B, D), Line(C, F)), D) mod 360
By reverse_orientation on line_intersection(Line(B, D), Line(C, F)), C, H we get orientation(C, H, line_intersection(Line(B, D), Line(C, F))) == 0 - orientation(C, line_intersection(Line(B, D), Line(C, F)), H) mod 360
By in_imply_collinear on orthocenter(A, D, midpoint(D, F)), I, D we get collinear(D, I, orthocenter(A, D, midpoint(D, F)))
By in_imply_collinear on orthocenter(A, F, midpoint(D, F)), midpoint(D, F), F we get collinear(F, midpoint(D, F), orthocenter(A, F, midpoint(D, F)))
By in_imply_collinear on orthocenter(A, F, midpoint(D, F)), A, line_intersection(j, median(A, D, F)) we get collinear(A, orthocenter(A, F, midpoint(D, F)), line_intersection(j, median(A, D, F)))
By in_imply_collinear on orthocenter(A, D, midpoint(D, F)), A, midpoint(D, F) we get collinear(A, midpoint(D, F), orthocenter(A, D, midpoint(D, F)))
By in_imply_collinear on orthocenter(A, F, midpoint(A, H)), A, H we get collinear(A, H, orthocenter(A, F, midpoint(A, H)))
By in_imply_collinear on orthocenter(A, F, midpoint(A, H)), center(d), F we get collinear(F, center(d), orthocenter(A, F, midpoint(A, H)))
By reverse_orientation on D, F, line_intersection(Line(B, D), Line(C, F)) we get orientation(D, F, line_intersection(Line(B, D), Line(C, F))) == 0 - orientation(D, line_intersection(Line(B, D), Line(C, F)), F) mod 360
By reverse_orientation on line_intersection(Line(B, D), Line(C, F)), midpoint(D, F), D we get orientation(D, line_intersection(Line(B, D), Line(C, F)), midpoint(D, F)) == 0 - orientation(D, midpoint(D, F), line_intersection(Line(B, D), Line(C, F))) mod 360
By reverse_orientation on A, F, line_intersection(Line(B, D), Line(C, F)) we get orientation(A, F, line_intersection(Line(B, D), Line(C, F))) == 0 - orientation(A, line_intersection(Line(B, D), Line(C, F)), F) mod 360
By reverse_orientation on line_intersection(Line(B, D), Line(C, F)), H, D we get orientation(D, line_intersection(Line(B, D), Line(C, F)), H) == 0 - orientation(D, H, line_intersection(Line(B, D), Line(C, F))) mod 360
By line_inequality on Line(F, line_intersection(j, median(A, D, F))), Line(E, I), F we get Line(E, I) != Line(F, line_intersection(j, median(A, D, F)))
By reverse_orientation on midpoint(D, F), line_intersection(Line(B, D), Line(C, F)), D we get orientation(D, midpoint(D, F), line_intersection(Line(B, D), Line(C, F))) == 0 - orientation(D, line_intersection(Line(B, D), Line(C, F)), midpoint(D, F)) mod 360
By reverse_orientation on D, line_intersection(Line(B, D), Line(C, F)), I we get orientation(D, line_intersection(Line(B, D), Line(C, F)), I) == 0 - orientation(D, I, line_intersection(Line(B, D), Line(C, F))) mod 360
By point_on_perpendicular_bisector on H, A, orthocenter(A, F, midpoint(A, H)), median(F, A, H) we get distance(A, orthocenter(A, F, midpoint(A, H))) == distance(H, orthocenter(A, F, midpoint(A, H)))
By reverse_orientation on line_intersection(Line(B, D), Line(C, F)), H, C we get orientation(C, line_intersection(Line(B, D), Line(C, F)), H) == 0 - orientation(C, H, line_intersection(Line(B, D), Line(C, F))) mod 360
By reverse_orientation on line_intersection(Line(B, D), Line(C, F)), D, C we get orientation(C, line_intersection(Line(B, D), Line(C, F)), D) == 0 - orientation(C, D, line_intersection(Line(B, D), Line(C, F))) mod 360
By point_on_perpendicular_bisector on H, A, orthocenter(F, H, midpoint(A, H)), median(F, A, H) we get distance(A, orthocenter(F, H, midpoint(A, H))) == distance(H, orthocenter(F, H, midpoint(A, H)))
By reverse_orientation on F, I, line_intersection(Line(B, D), Line(C, F)) we get orientation(F, I, line_intersection(Line(B, D), Line(C, F))) == 0 - orientation(F, line_intersection(Line(B, D), Line(C, F)), I) mod 360
By line_inequality on median(H, D, F), median(D, A, H), H we get median(D, A, H) != median(H, D, F)
By reverse_orientation on A, line_intersection(Line(B, D), Line(C, F)), D we get orientation(A, line_intersection(Line(B, D), Line(C, F)), D) == 0 - orientation(A, D, line_intersection(Line(B, D), Line(C, F))) mod 360
By reverse_orientation on line_intersection(Line(B, D), Line(C, F)), A, E we get orientation(A, E, line_intersection(Line(B, D), Line(C, F))) == 0 - orientation(A, line_intersection(Line(B, D), Line(C, F)), E) mod 360
By line_inequality on Line(F, line_intersection(j, median(A, D, F))), i, F we get i != Line(F, line_intersection(j, median(A, D, F)))
By reverse_orientation on line_intersection(Line(B, D), Line(C, F)), F, D we get orientation(D, line_intersection(Line(B, D), Line(C, F)), F) == 0 - orientation(D, F, line_intersection(Line(B, D), Line(C, F))) mod 360
By reverse_orientation on A, line_intersection(Line(B, D), Line(C, F)), E we get orientation(A, line_intersection(Line(B, D), Line(C, F)), E) == 0 - orientation(A, E, line_intersection(Line(B, D), Line(C, F))) mod 360
By line_inequality on altitude(midpoint(D, F), A, F), f, midpoint(D, F) we get f != altitude(midpoint(D, F), A, F)
By point_on_perpendicular_bisector on D, F, orthocenter(A, D, midpoint(D, F)), median(A, D, F) we get distance(D, orthocenter(A, D, midpoint(D, F))) == distance(F, orthocenter(A, D, midpoint(D, F)))
By not_in_line_equivalent_to_not_collinear_v0 on line_intersection(j, median(A, D, F)), E, A we get not_collinear(A, E, line_intersection(j, median(A, D, F))), exists(Line(A, E))
By not_in_line_equivalent_to_not_collinear_v0 on line_intersection(j, median(A, D, F)), B, F we get not_collinear(B, F, line_intersection(j, median(A, D, F))), exists(Line(B, F))
By reverse_orientation on F, line_intersection(Line(B, D), Line(C, F)), B we get orientation(B, F, line_intersection(Line(B, D), Line(C, F))) == 0 - orientation(B, line_intersection(Line(B, D), Line(C, F)), F) mod 360
By reverse_orientation on line_intersection(Line(B, D), Line(C, F)), B, C we get orientation(B, C, line_intersection(Line(B, D), Line(C, F))) == 0 - orientation(B, line_intersection(Line(B, D), Line(C, F)), C) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on B, line_intersection(j, median(A, D, F)), A we get not_collinear(A, B, line_intersection(j, median(A, D, F))), exists(Line(A, line_intersection(j, median(A, D, F))))
By line_containment_inequality on orthocenter(F, H, midpoint(A, H)), D, Line(A, H) we get D != orthocenter(F, H, midpoint(A, H))
By reverse_orientation on line_intersection(Line(B, D), Line(C, F)), D, E we get orientation(D, E, line_intersection(Line(B, D), Line(C, F))) == 0 - orientation(D, line_intersection(Line(B, D), Line(C, F)), E) mod 360
By reverse_orientation on I, F, line_intersection(Line(B, D), Line(C, F)) we get orientation(F, line_intersection(Line(B, D), Line(C, F)), I) == 0 - orientation(F, I, line_intersection(Line(B, D), Line(C, F))) mod 360
By reverse_orientation on F, B, line_intersection(Line(B, D), Line(C, F)) we get orientation(B, line_intersection(Line(B, D), Line(C, F)), F) == 0 - orientation(B, F, line_intersection(Line(B, D), Line(C, F))) mod 360
By line_inequality on altitude(midpoint(A, H), F, H), f, midpoint(A, H) we get f != altitude(midpoint(A, H), F, H)
By double_perpendicular_and_parallel_v0_r on f, altitude(midpoint(D, F), A, F), h we get perpendicular(h, altitude(midpoint(D, F), A, F))
By line_containment_inequality on orthocenter(A, F, midpoint(A, H)), I, Line(A, H) we get I != orthocenter(A, F, midpoint(A, H))
By reverse_orientation on I, line_intersection(Line(B, D), Line(C, F)), D we get orientation(D, I, line_intersection(Line(B, D), Line(C, F))) == 0 - orientation(D, line_intersection(Line(B, D), Line(C, F)), I) mod 360
By line_inequality on altitude(midpoint(D, F), A, F), Line(B, D), midpoint(D, F) we get Line(B, D) != altitude(midpoint(D, F), A, F)
By line_inequality on Line(D, line_intersection(j, median(A, D, F))), f, line_intersection(j, median(A, D, F)) we get f != Line(D, line_intersection(j, median(A, D, F)))
By reverse_orientation on B, line_intersection(Line(B, D), Line(C, F)), A we get orientation(A, B, line_intersection(Line(B, D), Line(C, F))) == 0 - orientation(A, line_intersection(Line(B, D), Line(C, F)), B) mod 360
By reverse_orientation on midpoint(D, F), line_intersection(Line(B, D), Line(C, F)), F we get orientation(F, midpoint(D, F), line_intersection(Line(B, D), Line(C, F))) == 0 - orientation(F, line_intersection(Line(B, D), Line(C, F)), midpoint(D, F)) mod 360
By internal_angle_bisector_definition_v0 on F, line_intersection(j, median(A, D, F)), D, A we get angle(F, A, line_intersection(j, median(A, D, F))) == angle(line_intersection(j, median(A, D, F)), A, D) mod 360
By line_containment_inequality on orthocenter(F, H, midpoint(A, H)), I, Line(A, H) we get I != orthocenter(F, H, midpoint(A, H))
By line_containment_inequality on orthocenter(A, F, midpoint(A, H)), E, Line(A, H) we get E != orthocenter(A, F, midpoint(A, H))
By line_circle_intersection_has_at_most_two_points_0 on A, D, E, Circle(A, D, center(d)) we get E not in Circle(A, D, center(d))
By line_containment_inequality on orthocenter(A, F, midpoint(A, H)), D, Line(A, H) we get D != orthocenter(A, F, midpoint(A, H))
By reverse_orientation on I, C, line_intersection(Line(B, D), Line(C, F)) we get orientation(C, line_intersection(Line(B, D), Line(C, F)), I) == 0 - orientation(C, I, line_intersection(Line(B, D), Line(C, F))) mod 360
By line_inequality on Line(F, line_intersection(j, median(A, D, F))), Line(B, E), F we get Line(B, E) != Line(F, line_intersection(j, median(A, D, F)))
By reverse_orientation on B, line_intersection(Line(B, D), Line(C, F)), C we get orientation(B, line_intersection(Line(B, D), Line(C, F)), C) == 0 - orientation(B, C, line_intersection(Line(B, D), Line(C, F))) mod 360
By reverse_orientation on line_intersection(Line(B, D), Line(C, F)), C, I we get orientation(C, I, line_intersection(Line(B, D), Line(C, F))) == 0 - orientation(C, line_intersection(Line(B, D), Line(C, F)), I) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on center(d), B, A we get not_collinear(A, B, center(d)), exists(Line(A, B))
By not_in_line_equivalent_to_not_collinear_v0 on center(d), E, A we get not_collinear(A, E, center(d)), exists(Line(A, E))
By line_inequality on Line(D, line_intersection(j, median(A, D, F))), Line(F, H), D we get Line(F, H) != Line(D, line_intersection(j, median(A, D, F)))
By reverse_orientation on E, D, line_intersection(Line(B, D), Line(C, F)) we get orientation(D, line_intersection(Line(B, D), Line(C, F)), E) == 0 - orientation(D, E, line_intersection(Line(B, D), Line(C, F))) mod 360
By line_inequality on Line(D, line_intersection(j, median(A, D, F))), Line(E, I), D we get Line(E, I) != Line(D, line_intersection(j, median(A, D, F)))
By reverse_orientation on line_intersection(Line(B, D), Line(C, F)), B, A we get orientation(A, line_intersection(Line(B, D), Line(C, F)), B) == 0 - orientation(A, B, line_intersection(Line(B, D), Line(C, F))) mod 360
By reverse_orientation on line_intersection(Line(B, D), Line(C, F)), F, A we get orientation(A, line_intersection(Line(B, D), Line(C, F)), F) == 0 - orientation(A, F, line_intersection(Line(B, D), Line(C, F))) mod 360
By internal_angle_bisector_definition_v0 on D, line_intersection(j, median(A, D, F)), F, A we get angle(D, A, line_intersection(j, median(A, D, F))) == angle(line_intersection(j, median(A, D, F)), A, F) mod 360
By reverse_orientation on line_intersection(Line(B, D), Line(C, F)), D, H we get orientation(D, H, line_intersection(Line(B, D), Line(C, F))) == 0 - orientation(D, line_intersection(Line(B, D), Line(C, F)), H) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on F, A, line_intersection(j, median(A, D, F)) we get not_collinear(A, F, line_intersection(j, median(A, D, F))), exists(Line(A, line_intersection(j, median(A, D, F))))
By line_inequality on Line(F, line_intersection(j, median(A, D, F))), g, F we get g != Line(F, line_intersection(j, median(A, D, F)))
By line_containment_inequality on orthocenter(F, H, midpoint(A, H)), H, median(F, A, H) we get H != orthocenter(F, H, midpoint(A, H))
By double_perpendicular_and_parallel_v0 on altitude(midpoint(A, H), A, F), f, altitude(midpoint(D, F), A, F) we get parallel(altitude(midpoint(A, H), A, F), altitude(midpoint(D, F), A, F))
By line_inequality on Line(D, line_intersection(j, median(A, D, F))), Line(F, G), D we get Line(F, G) != Line(D, line_intersection(j, median(A, D, F)))
By reverse_orientation on line_intersection(Line(B, D), Line(C, F)), I, B we get orientation(B, line_intersection(Line(B, D), Line(C, F)), I) == 0 - orientation(B, I, line_intersection(Line(B, D), Line(C, F))) mod 360
By line_inequality on Line(D, line_intersection(j, median(A, D, F))), median(H, D, F), D we get median(H, D, F) != Line(D, line_intersection(j, median(A, D, F)))
By line_containment_inequality on orthocenter(A, F, midpoint(D, F)), B, k we get B != orthocenter(A, F, midpoint(D, F))
By line_containment_inequality on orthocenter(A, F, midpoint(A, H)), B, median(F, A, H) we get B != orthocenter(A, F, midpoint(A, H))
By double_perpendicular_and_parallel_v0_r on f, altitude(midpoint(A, H), A, F), h we get perpendicular(h, altitude(midpoint(A, H), A, F))
By reverse_orientation on D, line_intersection(Line(B, D), Line(C, F)), C we get orientation(C, D, line_intersection(Line(B, D), Line(C, F))) == 0 - orientation(C, line_intersection(Line(B, D), Line(C, F)), D) mod 360
By double_perpendicular_and_parallel_v0_r on i, altitude(midpoint(D, F), A, D), g we get perpendicular(g, altitude(midpoint(D, F), A, D))
By line_inequality on altitude(midpoint(D, F), A, D), Line(F, H), midpoint(D, F) we get Line(F, H) != altitude(midpoint(D, F), A, D)
By line_inequality on altitude(midpoint(D, F), A, D), Line(B, D), midpoint(D, F) we get Line(B, D) != altitude(midpoint(D, F), A, D)
By not_in_line_equivalent_to_not_collinear_v0 on center(d), B, F we get not_collinear(B, F, center(d)), exists(Line(B, F))
By line_inequality on Line(F, line_intersection(j, median(A, D, F))), median(A, D, F), F we get median(A, D, F) != Line(F, line_intersection(j, median(A, D, F)))
By line_containment_inequality on orthocenter(A, D, midpoint(D, F)), E, median(A, D, F) we get E != orthocenter(A, D, midpoint(D, F))
By not_in_line_equivalent_to_not_collinear_v0 on line_intersection(j, median(A, D, F)), D, E we get not_collinear(D, E, line_intersection(j, median(A, D, F))), exists(Line(D, E))
By line_containment_inequality on orthocenter(A, F, midpoint(D, F)), A, k we get A != orthocenter(A, F, midpoint(D, F))
By line_inequality on Line(F, line_intersection(j, median(A, D, F))), Line(D, G), F we get Line(D, G) != Line(F, line_intersection(j, median(A, D, F)))
By line_inequality on Line(D, line_intersection(j, median(A, D, F))), j, D we get j != Line(D, line_intersection(j, median(A, D, F)))
By line_containment_inequality on B, center(d), f we get B != center(d)
By not_in_line_equivalent_to_not_collinear_v0 on center(d), E, D we get not_collinear(D, E, center(d)), exists(Line(D, E))
By not_in_line_equivalent_to_not_collinear_v0 on line_intersection(Line(B, D), Line(C, F)), G, A we get not_collinear(A, G, line_intersection(Line(B, D), Line(C, F))), exists(Line(A, G))
By line_circle_intersection_has_at_most_two_points_0 on F, A, B, Circle(A, F, midpoint(A, H)) we get B not in Circle(A, F, midpoint(A, H))
By line_containment_inequality on orthocenter(F, H, midpoint(A, H)), G, Line(A, H) we get G != orthocenter(F, H, midpoint(A, H))
By line_inequality on altitude(midpoint(A, H), F, H), i, midpoint(A, H) we get i != altitude(midpoint(A, H), F, H)
By line_inequality on Line(F, line_intersection(j, median(A, D, F))), Line(B, G), F we get Line(B, G) != Line(F, line_intersection(j, median(A, D, F)))
By line_inequality on Line(D, line_intersection(j, median(A, D, F))), Line(C, F), D we get Line(C, F) != Line(D, line_intersection(j, median(A, D, F)))
By line_inequality on altitude(midpoint(D, F), A, F), Line(F, G), midpoint(D, F) we get Line(F, G) != altitude(midpoint(D, F), A, F)
By line_inequality on Line(E, center(c)), median(A, D, F), E we get median(A, D, F) != Line(E, center(c))
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(A, H), G, I we get not_collinear(G, I, midpoint(A, H)), exists(Line(G, I))
By not_in_line_equivalent_to_not_collinear_v0 on line_intersection(j, median(A, D, F)), A, D we get not_collinear(A, D, line_intersection(j, median(A, D, F))), exists(Line(A, D))
By line_circle_intersection_has_at_most_two_points_0 on midpoint(D, F), F, D, Circle(A, F, midpoint(A, H)) we get D not in Circle(A, F, midpoint(A, H))
By line_containment_inequality on orthocenter(A, F, midpoint(A, H)), G, Line(A, H) we get G != orthocenter(A, F, midpoint(A, H))
By line_inequality on Line(D, line_intersection(j, median(A, D, F))), median(A, D, F), D we get median(A, D, F) != Line(D, line_intersection(j, median(A, D, F)))
By line_inequality on altitude(midpoint(A, H), A, F), i, midpoint(A, H) we get i != altitude(midpoint(A, H), A, F)
By line_containment_inequality on orthocenter(A, D, midpoint(D, F)), F, median(A, D, F) we get F != orthocenter(A, D, midpoint(D, F))
By line_inequality on altitude(midpoint(D, F), A, F), Line(D, G), midpoint(D, F) we get Line(D, G) != altitude(midpoint(D, F), A, F)
By line_containment_inequality on orthocenter(A, D, midpoint(D, F)), A, k we get A != orthocenter(A, D, midpoint(D, F))
By line_containment_inequality on orthocenter(F, H, midpoint(A, H)), F, Line(A, H) we get F != orthocenter(F, H, midpoint(A, H))
By line_inequality on Line(F, line_intersection(j, median(A, D, F))), h, F we get h != Line(F, line_intersection(j, median(A, D, F)))
By line_inequality on Line(D, line_intersection(j, median(A, D, F))), Line(B, G), D we get Line(B, G) != Line(D, line_intersection(j, median(A, D, F)))
By line_inequality on altitude(midpoint(D, F), A, D), Line(D, G), midpoint(D, F) we get Line(D, G) != altitude(midpoint(D, F), A, D)
By line_inequality on Line(F, line_intersection(j, median(A, D, F))), Line(B, D), F we get Line(B, D) != Line(F, line_intersection(j, median(A, D, F)))
By line_inequality on Line(B, center(c)), median(F, A, H), B we get median(F, A, H) != Line(B, center(c))
By line_inequality on altitude(midpoint(A, H), F, H), Line(A, C), midpoint(A, H) we get Line(A, C) != altitude(midpoint(A, H), F, H)
By line_inequality on altitude(midpoint(D, F), A, D), i, midpoint(D, F) we get i != altitude(midpoint(D, F), A, D)
By line_inequality on Line(F, H), Line(H, center(d)), F we get Line(F, H) != Line(H, center(d))
By line_circle_intersection_has_at_most_two_points_0 on A, F, B, Circle(A, F, center(d)) we get B not in Circle(A, F, center(d))
By line_inequality on altitude(midpoint(D, F), A, F), i, midpoint(D, F) we get i != altitude(midpoint(D, F), A, F)
By line_containment_inequality on orthocenter(F, H, midpoint(A, H)), C, Line(A, H) we get C != orthocenter(F, H, midpoint(A, H))
By line_inequality on altitude(midpoint(A, H), A, F), h, midpoint(A, H) we get h != altitude(midpoint(A, H), A, F)
By line_inequality on altitude(midpoint(A, H), A, F), Line(G, H), midpoint(A, H) we get Line(G, H) != altitude(midpoint(A, H), A, F)
By line_inequality on Line(F, line_intersection(j, median(A, D, F))), f, line_intersection(j, median(A, D, F)) we get f != Line(F, line_intersection(j, median(A, D, F)))
By line_inequality on Line(B, center(c)), median(A, D, F), B we get median(A, D, F) != Line(B, center(c))
By line_inequality on altitude(midpoint(A, H), F, H), Line(B, H), midpoint(A, H) we get Line(B, H) != altitude(midpoint(A, H), F, H)
By line_inequality on Line(D, line_intersection(j, median(A, D, F))), Line(B, E), D we get Line(B, E) != Line(D, line_intersection(j, median(A, D, F)))
By line_inequality on altitude(midpoint(D, F), A, D), h, midpoint(D, F) we get h != altitude(midpoint(D, F), A, D)
By line_containment_inequality on orthocenter(A, F, midpoint(D, F)), G, k we get G != orthocenter(A, F, midpoint(D, F))
By line_inequality on Line(D, line_intersection(j, median(A, D, F))), Line(A, C), D we get Line(A, C) != Line(D, line_intersection(j, median(A, D, F)))
By line_containment_inequality on orthocenter(A, F, midpoint(A, H)), C, Line(A, H) we get C != orthocenter(A, F, midpoint(A, H))
By line_containment_inequality on orthocenter(A, D, midpoint(D, F)), B, median(A, D, F) we get B != orthocenter(A, D, midpoint(D, F))
By line_inequality on altitude(midpoint(A, H), A, F), f, midpoint(A, H) we get f != altitude(midpoint(A, H), A, F)
By line_containment_inequality on orthocenter(A, D, midpoint(D, F)), H, k we get H != orthocenter(A, D, midpoint(D, F))
By line_containment_inequality on orthocenter(A, F, midpoint(D, F)), E, k we get E != orthocenter(A, F, midpoint(D, F))
By line_inequality on Line(D, center(d)), median(H, D, F), D we get median(H, D, F) != Line(D, center(d))
By line_containment_inequality on orthocenter(A, F, midpoint(A, H)), F, Line(A, H) we get F != orthocenter(A, F, midpoint(A, H))
By line_containment_inequality on orthocenter(A, D, midpoint(D, F)), D, median(A, D, F) we get D != orthocenter(A, D, midpoint(D, F))
By line_inequality on Line(E, center(c)), median(D, A, H), E we get median(D, A, H) != Line(E, center(c))
By line_inequality on Line(D, line_intersection(j, median(A, D, F))), i, line_intersection(j, median(A, D, F)) we get i != Line(D, line_intersection(j, median(A, D, F)))
By line_containment_inequality on orthocenter(A, D, midpoint(D, F)), C, k we get C != orthocenter(A, D, midpoint(D, F))
By line_inequality on altitude(midpoint(D, F), A, F), Line(F, H), midpoint(D, F) we get Line(F, H) != altitude(midpoint(D, F), A, F)
By line_inequality on Line(F, line_intersection(j, median(A, D, F))), Line(A, C), F we get Line(A, C) != Line(F, line_intersection(j, median(A, D, F)))
By line_containment_inequality on orthocenter(A, F, midpoint(D, F)), line_intersection(Line(B, D), Line(C, F)), k we get orthocenter(A, F, midpoint(D, F)) != line_intersection(Line(B, D), Line(C, F))
By line_inequality on altitude(midpoint(D, F), A, F), Line(C, F), midpoint(D, F) we get Line(C, F) != altitude(midpoint(D, F), A, F)
By line_containment_inequality on orthocenter(A, F, midpoint(D, F)), D, median(A, D, F) we get D != orthocenter(A, F, midpoint(D, F))
By line_containment_inequality on orthocenter(A, F, midpoint(A, H)), H, median(F, A, H) we get H != orthocenter(A, F, midpoint(A, H))
By line_inequality on Line(H, center(d)), median(D, A, H), H we get median(D, A, H) != Line(H, center(d))
By line_containment_inequality on orthocenter(F, H, midpoint(A, H)), B, median(F, A, H) we get B != orthocenter(F, H, midpoint(A, H))
By line_inequality on Line(D, center(d)), i, center(d) we get i != Line(D, center(d))
By line_inequality on altitude(midpoint(A, H), F, H), Line(G, H), midpoint(A, H) we get Line(G, H) != altitude(midpoint(A, H), F, H)
By line_inequality on altitude(midpoint(A, H), F, H), h, midpoint(A, H) we get h != altitude(midpoint(A, H), F, H)
By line_inequality on Line(D, line_intersection(j, median(A, D, F))), Line(E, G), D we get Line(E, G) != Line(D, line_intersection(j, median(A, D, F)))
By line_inequality on Line(F, line_intersection(j, median(A, D, F))), j, F we get j != Line(F, line_intersection(j, median(A, D, F)))
By line_inequality on Line(F, line_intersection(j, median(A, D, F))), Line(B, H), F we get Line(B, H) != Line(F, line_intersection(j, median(A, D, F)))
By line_inequality on altitude(midpoint(A, H), A, F), Line(F, H), midpoint(A, H) we get Line(F, H) != altitude(midpoint(A, H), A, F)
By line_containment_inequality on E, line_intersection(j, median(A, D, F)), i we get E != line_intersection(j, median(A, D, F))
By line_containment_inequality on center(d), E, median(A, D, F) we get E != center(d)
By line_containment_inequality on orthocenter(A, D, midpoint(D, F)), line_intersection(Line(B, D), Line(C, F)), k we get orthocenter(A, D, midpoint(D, F)) != line_intersection(Line(B, D), Line(C, F))
By line_inequality on Line(D, line_intersection(j, median(A, D, F))), Line(A, G), D we get Line(A, G) != Line(D, line_intersection(j, median(A, D, F)))
By line_inequality on altitude(midpoint(A, H), F, H), Line(F, H), midpoint(A, H) we get Line(F, H) != altitude(midpoint(A, H), F, H)
By line_inequality on altitude(midpoint(D, F), A, F), h, midpoint(D, F) we get h != altitude(midpoint(D, F), A, F)
By line_inequality on Line(D, line_intersection(j, median(A, D, F))), Line(B, H), D we get Line(B, H) != Line(D, line_intersection(j, median(A, D, F)))
By line_containment_inequality on orthocenter(A, F, midpoint(D, F)), F, median(A, D, F) we get F != orthocenter(A, F, midpoint(D, F))
By line_containment_inequality on orthocenter(F, H, midpoint(A, H)), A, median(F, A, H) we get A != orthocenter(F, H, midpoint(A, H))
By line_inequality on Line(D, line_intersection(j, median(A, D, F))), Line(A, H), D we get Line(A, H) != Line(D, line_intersection(j, median(A, D, F)))
By line_inequality on Line(F, line_intersection(j, median(A, D, F))), Line(A, G), F we get Line(A, G) != Line(F, line_intersection(j, median(A, D, F)))
By line_containment_inequality on orthocenter(F, H, midpoint(A, H)), E, Line(A, H) we get E != orthocenter(F, H, midpoint(A, H))
By line_containment_inequality on orthocenter(A, F, midpoint(A, H)), A, median(F, A, H) we get A != orthocenter(A, F, midpoint(A, H))
By line_inequality on altitude(midpoint(A, H), A, F), Line(B, H), midpoint(A, H) we get Line(B, H) != altitude(midpoint(A, H), A, F)
By line_containment_inequality on orthocenter(A, F, midpoint(D, F)), C, k we get C != orthocenter(A, F, midpoint(D, F))
By line_inequality on altitude(midpoint(D, F), A, D), Line(C, F), midpoint(D, F) we get Line(C, F) != altitude(midpoint(D, F), A, D)
By line_inequality on Line(F, line_intersection(j, median(A, D, F))), Line(E, G), F we get Line(E, G) != Line(F, line_intersection(j, median(A, D, F)))
By line_inequality on Line(F, line_intersection(j, median(A, D, F))), Line(A, H), F we get Line(A, H) != Line(F, line_intersection(j, median(A, D, F)))
By line_containment_inequality on orthocenter(A, D, midpoint(D, F)), G, k we get G != orthocenter(A, D, midpoint(D, F))
By line_inequality on Line(F, line_intersection(j, median(A, D, F))), Line(H, center(d)), F we get Line(H, center(d)) != Line(F, line_intersection(j, median(A, D, F)))
By line_inequality on Line(D, line_intersection(j, median(A, D, F))), g, D we get g != Line(D, line_intersection(j, median(A, D, F)))
By line_circle_intersection_has_at_most_two_points_0 on A, midpoint(A, H), H, Circle(A, F, midpoint(A, H)) we get H not in Circle(A, F, midpoint(A, H))
By line_inequality on Line(A, center(c)), Line(D, center(d)), A we get Line(A, center(c)) != Line(D, center(d))
By line_inequality on Line(A, center(c)), median(D, A, H), A we get median(D, A, H) != Line(A, center(c))
By line_inequality on altitude(midpoint(A, H), A, F), Line(A, C), midpoint(A, H) we get Line(A, C) != altitude(midpoint(A, H), A, F)
By line_inequality on altitude(midpoint(A, H), A, F), Line(A, G), midpoint(A, H) we get Line(A, G) != altitude(midpoint(A, H), A, F)
By line_inequality on altitude(midpoint(D, F), A, D), f, midpoint(D, F) we get f != altitude(midpoint(D, F), A, D)
By line_inequality on altitude(midpoint(D, F), A, D), Line(F, G), midpoint(D, F) we get Line(F, G) != altitude(midpoint(D, F), A, D)
By line_inequality on altitude(midpoint(A, H), F, H), Line(A, G), midpoint(A, H) we get Line(A, G) != altitude(midpoint(A, H), F, H)
By line_inequality on Line(F, line_intersection(j, median(A, D, F))), Line(G, H), F we get Line(G, H) != Line(F, line_intersection(j, median(A, D, F)))
By line_inequality on Line(F, line_intersection(j, median(A, D, F))), median(H, D, F), F we get median(H, D, F) != Line(F, line_intersection(j, median(A, D, F)))
By line_inequality on Line(D, line_intersection(j, median(A, D, F))), Line(G, H), D we get Line(G, H) != Line(D, line_intersection(j, median(A, D, F)))
By power_of_a_point_tangent_converse_v0 on A, I, G, D we get tangent(Line(A, D), Circle(D, G, I))
By tangent_chord_angle_v1 on I, F, G, B we get tangent(Line(B, I), Circle(F, G, I))
By tangent_chord_angle_v1 on F, I, G, B we get tangent(Line(B, F), Circle(F, G, I))
By power_of_a_point_tangent_converse_v0 on A, G, I, F we get tangent(Line(A, F), Circle(F, G, I))
By tangent_chord_angle_v1 on D, I, G, E we get tangent(Line(D, E), Circle(D, G, I))
By power_of_a_point_in_circle on A, Circle(A, D, center(d)) we get 0 == power_of_a_point(A, Circle(A, D, center(d)))
By tangent_chord_angle_v1 on I, F, G, C we get tangent(Line(C, I), Circle(F, G, I))
By tangent_chord_angle_v1 on B, I, G, E we get tangent(Line(B, E), Circle(B, G, I))
By perpendicular_lines_draw_intersection on i, altitude(midpoint(D, F), A, D) we get exists(line_intersection(i, altitude(midpoint(D, F), A, D)))
By concyclic_definition_0 on midpoint(D, F), D, H, midpoint(A, H) we get midpoint(A, H) in Circle(D, H, midpoint(D, F))
By external_angle_bisector_definition_v0_r on B, midpoint(D, F), D, A we get Line(A, midpoint(D, F)) == external_angle_bisector(B, A, D)
By power_of_a_point_on_circle on midpoint(A, H), Circle(A, F, midpoint(A, H)) we get 0 == power_of_a_point(midpoint(A, H), Circle(A, F, midpoint(A, H)))
By internal_angle_bisector_definition_v0_r on line_intersection(j, median(A, D, F)), center(d), line_intersection(j, median(A, D, F)), A we get Line(A, center(d)) == internal_angle_bisector(line_intersection(j, median(A, D, F)), A, line_intersection(j, median(A, D, F)))
By external_angle_bisector_definition_v0_r on B, midpoint(D, F), E, A we get Line(A, midpoint(D, F)) == external_angle_bisector(B, A, E)
By power_of_a_point_in_circle on A, Circle(A, F, midpoint(A, H)) we get 0 == power_of_a_point(A, Circle(A, F, midpoint(A, H)))
By power_of_a_point_in_circle on F, Circle(A, F, midpoint(A, H)) we get 0 == power_of_a_point(F, Circle(A, F, midpoint(A, H)))
By perpendicular_lines_draw_intersection on altitude(midpoint(A, H), A, F), f we get exists(line_intersection(f, altitude(midpoint(A, H), A, F)))
By internal_angle_bisector_definition_v0_r on B, midpoint(A, H), H, F we get Line(F, midpoint(A, H)) == internal_angle_bisector(B, F, H)
By power_of_a_point_on_circle on F, Circle(A, F, center(d)) we get 0 == power_of_a_point(F, Circle(A, F, center(d)))
By reverse_direction on D, line_intersection(j, median(A, D, F)) we get 180 == direction(D, line_intersection(j, median(A, D, F))) - direction(line_intersection(j, median(A, D, F)), D) mod 360
By power_of_a_point_on_circle on F, Circle(F, H, center(d)) we get 0 == power_of_a_point(F, Circle(F, H, center(d)))
By power_of_a_point_in_circle on center(d), Circle(A, D, center(d)) we get 0 == power_of_a_point(center(d), Circle(A, D, center(d)))
By internal_angle_bisector_definition_v0_r on I, F, H, G we get Line(F, G) == internal_angle_bisector(H, G, I)
By internal_angle_bisector_definition_v0_r on A, I, A, G we get Line(G, I) == internal_angle_bisector(A, G, A)
By radical_axis_definition_v0 on I, c, d we get power_of_a_point(I, c) == power_of_a_point(I, d)
By power_of_a_point_in_circle on A, Circle(A, F, center(d)) we get 0 == power_of_a_point(A, Circle(A, F, center(d)))
By internal_angle_bisector_definition_v0_r on G, A, G, I we get Line(A, I) == internal_angle_bisector(G, I, G)
By reverse_direction on F, line_intersection(j, median(A, D, F)) we get 180 == direction(F, line_intersection(j, median(A, D, F))) - direction(line_intersection(j, median(A, D, F)), F) mod 360
By draw_point_of_tangency on i, Circle(A, F, center(d)) we get exists(line_circle_tangent_point(i, Circle(A, F, center(d))))
By power_of_a_point_in_circle on D, Circle(A, D, center(d)) we get 0 == power_of_a_point(D, Circle(A, D, center(d)))
By internal_angle_bisector_definition_v0_r on F, midpoint(D, F), E, A we get Line(A, midpoint(D, F)) == internal_angle_bisector(E, A, F)
By concyclic_definition_0 on H, midpoint(A, H), D, midpoint(D, F) we get midpoint(D, F) in Circle(D, H, midpoint(A, H))
By draw_point_of_tangency on f, Circle(A, D, center(d)) we get exists(line_circle_tangent_point(f, Circle(A, D, center(d))))
By perpendicular_lines_draw_intersection on altitude(midpoint(D, F), A, F), f we get exists(line_intersection(f, altitude(midpoint(D, F), A, F)))
By internal_angle_bisector_definition_v0_r on line_intersection(j, median(A, D, F)), midpoint(D, F), line_intersection(j, median(A, D, F)), A we get Line(A, midpoint(D, F)) == internal_angle_bisector(line_intersection(j, median(A, D, F)), A, line_intersection(j, median(A, D, F)))
By power_of_a_point_on_circle on midpoint(D, F), Circle(A, F, midpoint(A, H)) we get 0 == power_of_a_point(midpoint(D, F), Circle(A, F, midpoint(A, H)))
By power_of_a_point_in_circle on H, Circle(F, H, center(d)) we get 0 == power_of_a_point(H, Circle(F, H, center(d)))
By reverse_direction on A, line_intersection(j, median(A, D, F)) we get 180 == direction(A, line_intersection(j, median(A, D, F))) - direction(line_intersection(j, median(A, D, F)), A) mod 360
By internal_angle_bisector_definition_v0_r on I, A, I, G we get Line(A, G) == internal_angle_bisector(I, G, I)
By draw_point_of_tangency on Line(F, H), Circle(A, F, center(d)) we get exists(line_circle_tangent_point(Line(F, H), Circle(A, F, center(d))))
By power_of_a_point_on_circle on center(d), Circle(F, H, center(d)) we get 0 == power_of_a_point(center(d), Circle(F, H, center(d)))
By power_of_a_point_in_circle on center(d), Circle(A, F, center(d)) we get 0 == power_of_a_point(center(d), Circle(A, F, center(d)))
By internal_angle_bisector_definition_v0_r on I, G, I, A we get Line(A, G) == internal_angle_bisector(I, A, I)
By internal_angle_bisector_definition_v0_r on A, G, A, I we get Line(G, I) == internal_angle_bisector(A, I, A)
By internal_angle_bisector_definition_v0_r on G, I, G, A we get Line(A, I) == internal_angle_bisector(G, A, G)
By perpendicular_lines_draw_intersection on Line(F, H), altitude(midpoint(A, H), F, H) we get exists(line_intersection(Line(F, H), altitude(midpoint(A, H), F, H)))
By draw_point_of_tangency on f, Circle(F, H, center(d)) we get exists(line_circle_tangent_point(f, Circle(F, H, center(d))))
By altitude_definition on midpoint(D, F), A, E, altitude(midpoint(D, F), A, D) we get altitude(midpoint(D, F), A, D) == altitude(midpoint(D, F), A, E)
By concyclic_definition_1 on midpoint(D, F), D, H, midpoint(A, H) we get Circle(D, H, midpoint(A, H)) == Circle(D, H, midpoint(D, F))
By power_of_a_point_definition on I, A, G, c we get log(power_of_a_point(I, c)) == log(distance(A, I)) + log(distance(G, I))
By altitude_definition on midpoint(D, F), D, E, altitude(midpoint(D, F), A, D) we get altitude(midpoint(D, F), A, D) == altitude(midpoint(D, F), D, E)
By altitude_definition on midpoint(A, H), B, F, altitude(midpoint(A, H), A, F) we get altitude(midpoint(A, H), A, F) == altitude(midpoint(A, H), B, F)
By power_of_a_point_tangent on H, F, Circle(A, F, center(d)) we get 2 * log(distance(F, H)) == log(power_of_a_point(H, Circle(A, F, center(d))))
By altitude_definition on midpoint(A, H), A, B, altitude(midpoint(A, H), A, F) we get altitude(midpoint(A, H), A, B) == altitude(midpoint(A, H), A, F)
By power_of_a_point_tangent on D, A, Circle(A, F, center(d)) we get 2 * log(distance(A, D)) == log(power_of_a_point(D, Circle(A, F, center(d))))
By power_of_a_point_tangent on F, A, Circle(A, D, center(d)) we get 2 * log(distance(A, F)) == log(power_of_a_point(F, Circle(A, D, center(d))))
By altitude_definition on midpoint(D, F), A, B, altitude(midpoint(D, F), A, F) we get altitude(midpoint(D, F), A, B) == altitude(midpoint(D, F), A, F)
By altitude_definition on midpoint(D, F), F, B, altitude(midpoint(D, F), A, F) we get altitude(midpoint(D, F), A, F) == altitude(midpoint(D, F), B, F)
By power_of_a_point_tangent on A, F, Circle(F, H, center(d)) we get 2 * log(distance(A, F)) == log(power_of_a_point(A, Circle(F, H, center(d))))
By power_of_a_point_tangent on E, A, Circle(A, F, center(d)) we get 2 * log(distance(A, E)) == log(power_of_a_point(E, Circle(A, F, center(d))))
By power_of_a_point_tangent on B, A, Circle(A, D, center(d)) we get 2 * log(distance(A, B)) == log(power_of_a_point(B, Circle(A, D, center(d))))
By power_of_a_point_tangent on B, F, Circle(F, H, center(d)) we get 2 * log(distance(B, F)) == log(power_of_a_point(B, Circle(F, H, center(d))))
By internal_angle_bisector_definition_v0 on D, A, F, line_intersection(j, median(A, D, F)) we get angle(A, line_intersection(j, median(A, D, F)), F) == angle(D, line_intersection(j, median(A, D, F)), A) mod 360
By internal_angle_bisector_definition_v0 on F, A, D, line_intersection(j, median(A, D, F)) we get angle(A, line_intersection(j, median(A, D, F)), D) == angle(F, line_intersection(j, median(A, D, F)), A) mod 360
By sas_anti_similarity on B, A, midpoint(A, H), C, D, midpoint(D, F) we get anti_similar_triangles(A, B, midpoint(A, H), D, C, midpoint(D, F))
By sas_anti_similarity on G, D, C, H, A, I we get anti_similar_triangles(A, H, I, D, G, C)
By sas_anti_congruence on C, D, midpoint(D, F), B, A, midpoint(A, H) we get anti_congruent_triangles(A, B, midpoint(A, H), D, C, midpoint(D, F))
By sas_anti_congruence on midpoint(A, H), A, B, midpoint(D, F), D, C we get anti_congruent_triangles(A, B, midpoint(A, H), D, C, midpoint(D, F))
By sas_anti_similarity on I, A, H, C, D, G we get anti_similar_triangles(A, H, I, D, G, C)
By sas_anti_similarity on midpoint(A, H), A, B, midpoint(D, F), D, C we get anti_similar_triangles(A, B, midpoint(A, H), D, C, midpoint(D, F))
By sas_anti_similarity on C, D, midpoint(D, F), B, A, midpoint(A, H) we get anti_similar_triangles(A, B, midpoint(A, H), D, C, midpoint(D, F))
By sas_anti_congruence on B, H, midpoint(A, H), C, F, midpoint(D, F) we get anti_congruent_triangles(B, H, midpoint(A, H), C, F, midpoint(D, F))
By sas_anti_similarity on H, A, I, G, D, C we get anti_similar_triangles(A, H, I, D, G, C)
By sas_anti_congruence on C, F, midpoint(D, F), B, H, midpoint(A, H) we get anti_congruent_triangles(B, H, midpoint(A, H), C, F, midpoint(D, F))
By sas_anti_congruence on midpoint(A, H), H, B, midpoint(D, F), F, C we get anti_congruent_triangles(B, H, midpoint(A, H), C, F, midpoint(D, F))
By sas_anti_congruence on midpoint(D, F), F, C, midpoint(A, H), H, B we get anti_congruent_triangles(B, H, midpoint(A, H), C, F, midpoint(D, F))
By sas_anti_congruence on B, A, midpoint(A, H), C, D, midpoint(D, F) we get anti_congruent_triangles(A, B, midpoint(A, H), D, C, midpoint(D, F))
By sas_anti_similarity on midpoint(D, F), D, C, midpoint(A, H), A, B we get anti_similar_triangles(A, B, midpoint(A, H), D, C, midpoint(D, F))
By sas_anti_similarity on C, F, midpoint(D, F), B, H, midpoint(A, H) we get anti_similar_triangles(B, H, midpoint(A, H), C, F, midpoint(D, F))
By sas_anti_similarity on C, D, G, I, A, H we get anti_similar_triangles(A, H, I, D, G, C)
By sas_anti_similarity on midpoint(A, H), H, B, midpoint(D, F), F, C we get anti_similar_triangles(B, H, midpoint(A, H), C, F, midpoint(D, F))
By sas_anti_congruence on midpoint(D, F), D, C, midpoint(A, H), A, B we get anti_congruent_triangles(A, B, midpoint(A, H), D, C, midpoint(D, F))
By sas_anti_similarity on B, H, midpoint(A, H), C, F, midpoint(D, F) we get anti_similar_triangles(B, H, midpoint(A, H), C, F, midpoint(D, F))
By sas_anti_similarity on midpoint(D, F), F, C, midpoint(A, H), H, B we get anti_similar_triangles(B, H, midpoint(A, H), C, F, midpoint(D, F))
