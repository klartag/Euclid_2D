Assumptions:
A, B, C, D, X: Point
distinct(A, B, C, D, X)
concyclic(A, B, C, D)
X == line_intersection(Line(A, C), Line(B, D))

Embedding:
D := {"x": "-0.59507528490123118292132176065933890640735626220703125", "y": "-0.80366996043134431015886320892604999244213104248046875"}
C := {"x": "0.05420862028810879973406144927139393985271453857421875", "y": "-0.99852963175183717670080341122229583561420440673828125"}
B := {"x": "-0.74979409781457639905255518897320143878459930419921875", "y": "0.66167122567210479022747904309653677046298980712890625"}
A := {"x": "-0.95922898344812677093314039570226745149112338166770202232991738619450536602448920536198890928082132034025572630023623498315437015953836888585852644555432873162826974727375079913010855386146848519771864577703471455188038845245029695706448134917916191482491163248560913061513743695812118202099869289441024969664103264967549296563805952035720209309943242640100402450182530544662889228869030817050707874253860618990267202491085273279619469221231902524142819518216097800672353312201445414265925170493526934573233368454194567511611731618011433023512109674344848174596692540034545737752080859735128434088985257632095233856450130100234324653252091023693760974015472050882960280525803039794901381414656373463328909031828125245455167099540152774800749859719645926440973841682457811101489082381954781591719562611667057150188807084941606766020863586861427535241076913316381672653091984420533305955155881941758398005145040227952754049178627816448757424718363671788465799486368451293469429915456622451564484861677096818768770694677046196240536397322886074901342507428236091699554533664593888196624703882969496932268427538294855028408528275700218550432178710357317695965496564623598029760132434362684663721812517424038405130958704122548304594159438856130751452239046312423261083981865699844099041963992310636821912685986583573337570540780286241296151344032461774088567117443392443379073273452386751896310693670601504095431752260201835547749528788028418167065551967124174201545091903421194008192000498830835979097715399963409603813380747672453267695064364514744667997893013742494970980216244673674723355890373022699170006970473212111500313834249195849603974974938073014231235364445542867120709278133681223396400868729193739571353196893455645410410510457989954108382008774534629253771107108874532912576127681160411224037558313338215295537796498482659601701624823674758489626208296988946994103010336082074230161634010918128481325919066633705204393403989918977349645092891726416064067966637622667832750238297443535127651", "y": "-0.28263007149465422900528617174664001595461543619223049514981586571458134983336169011246232555632972524158682947049478156415806073671963231831958704494435275557936597690896434979325962559991755836197690081552386459469005400327102120720998988654621615800996215857465010796881773207566282229614633288459184427838813748326288516030127708827235473685761413472165748290366436711908568544711613456473928963449117418154751475050767469141657872879355672356189023846222966825192830970043042034634889909320599372428812573329499052410538335454176402361573759378695095583565984715237727692866878485642575412901561669873744807840271443327372319660417790902353461728040129014115945218702482906405605108842612279630787133906250904340599985466248985025618938503861345893681449830967223100721398092345188713012015583618540723243437037424099842508054267578283287417071472467542809890301364441901167910150460231174280775316825958033353355729064250533620739686503176144515306881950457456890344617856257070586222604975724502270296864388078399537543242273679873711073567119358560579899016547645598295222714685875782061083085585056792258563398376133442916883162849979712303752424705804046791498855369400016563570460076153708425614206215226381821566010295274626702879787874939404140327115853430025611150568195875615489575604153372663055925499764942782375290712611831012029469594121201806873596088696222938207580255256783265658338743139678266821365007440282967245298907594416568478113522671609855705885514555632863417225840149874358229841338768483960703676609724856424466426889084602226415805158860755358281417553835936238335555170664428265942604502304410517227120682029191231885839540330231878023801914507538009119303171740551938888448212889977864738742497766436715705604230930443097715431261980053974505051434374974917193578409036691492058758239436755728655753758633805019800013722038413584525018457806233499887324183224940784725739706156195414816880694489064758588485311819680502095431732815397197364036830437774404522858143"}
X := {"x": "-0.62517357406567100361004124984942009697852952544421901845048541670609093638848276623458111811600067300344361674971737968072399493122681127815519042480991060470446558135988977705680175552475093002303600214870577313333173650366807927815643258231502962413863107288987238694582594796330824558378085495668838987432226523866653171736118395091726631668059125645342106605268961458443197146296900147661709823629627288019393436497654754724821234811983654332456405454268382632089540220047183470332936648025889148235315857903834363816022239825410675472571490562298453184874208132906876542982336163849495689912208925152119455930052710539956779307855877072525693788704604701689786903979787873996014804081114009985046999814423343585896847496859117012123171608131692836456584390065326638952442095599152232118640152921331910728990084371502295427810353866396605894935220872576907571766972646004007660611711903241724545090938980099925419537952245847799578803776597366031652335274196420110340769955368290603385637962695291900006512498151538492858959688152115399077788068311565686254320064825326589813453583939947158854296814861992195494459725773504824020690704896517942702664421104466579366157940029279610770755755473580314083584628726314593491031288469353699861505912964195710113635296485075284515690395425773957299621460127068304576881946994080318069089088136059561205383083600233643622315311949823605039218756996144301070333113211820986625171392752487496377892467216901003406328917990526443770884210934427322950687288764389489362639044728522461863360779019735104055622144255377416615657165666045092227038890177949295049988274710028807224936346350107244794655508861315532601162707978317486526965257387169781446446284837223104418765341732737083829909590108903204823769629593881910568442205258531251693078296521978063593968996460875258161687677349590608409413765976665633565273822189547379773879296945020206513777028906283961026326685602862362011967973633337108469166283075506324515713098013298776532979948435034946527149", "y": "-0.51860919817868460578706891146723917028223905487876308512561541893178334343438829416165467171116751514944494686582692403696338406737685817420207902778979031722676270100030352933119029306145514403732000658140626101742633235086372118261085399482100497612969372668823741020129149991935132454388750092935578145090119530248851204895738950832854262048681569946509802204835349886907766549966857741304310120330960161732724672304737097216056183425551192706085977935715929716889121344447138615685664220639244488267834003357542430222950447570998796813253929245578245377801342256062854069147773934429318201831906571021810185138261037894797941866395705114842296024974181426555934259617964377013265990168388372771126328925238919844892929604424748629472345360377598142978394941195244380733484520623230514270324317678285568737919977021735109474877985262433520817488776117314427327352952708903238750574785371942625934687827366487368152335642463504934596864171300551911138608238820582069551463812497424858915787068307573650799135249559364144822575571083741063946713168333221394679654855792808689094340843488050461699897865622734299991673717388594816886729953824764605901358735716393945895904809484721447921823634498295882790269306655113252770411613156148267844220494346818467117405460054439611589446376177678005774413346082454564994632774303208261660793939844956974896792393833119343796896621120188227721022374372866530070956878602302784391231915852593230343499176869572798848811414305266092589067762584486639997436597092140429313850001150907733097908005577778913207120233209450156563590833315793750498921048855207188094973773093062952481044393440604382765635425555841581932157890425681391653212301059813904503906480233802102028520146595274920559012548453764516546651866032933254112731587589332043262917495173012709223888089534090212308703739876628332554961096018742045240338305673314115514971031655557519981991466688282163045681142444343657323547264975308162422765041833942040716037315651807391500639027996077536433798"}

Need to prove:
distance(A, X) * distance(C, X) == distance(B, X) * distance(D, X)

Proof:
By in_imply_collinear on X, A, C we get collinear(A, C, X)
By in_imply_collinear on X, B, D we get collinear(B, D, X)
By concyclic_definition_0 on A, C, B, D we get D in Circle(A, B, C)
By power_of_a_point_definition on X, C, A, Circle(A, B, C) we get log(distance(C, X)) + log(distance(A, X)) == log(power_of_a_point(X, Circle(A, B, C)))
By power_of_a_point_definition on X, D, B, Circle(A, B, C) we get log(distance(D, X)) + log(distance(B, X)) == log(power_of_a_point(X, Circle(A, B, C)))
