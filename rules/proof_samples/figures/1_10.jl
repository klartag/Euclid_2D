Assumptions:
A, B, C, D, E, O: Point
distinct(A, B, C, D, E, O)
not_collinear(A, B, C)
collinear(A, B, D)
collinear(A, C, E)
concyclic(B, C, D, E)
O == center(Circle(A, D, E))

Embedding:
A := {"x": "0.6502035952086024916951600971515290439128875732421875", "y": "1.5526848532338102248928635162883438169956207275390625"}
B := {"x": "0.6575252736559284993944629604811780154705047607421875", "y": "-0.90000788977629053722040453067165799438953399658203125"}
C := {"x": "-0.99068312197563390686383399952319450676441192626953125", "y": "0.58569051086847256915035586644080467522144317626953125"}
D := {"x": "0.62688426557721789118950190122403978718066041534149743475584542890936526435651169984661751332604599325186569553692631807720154084301042547489363995950732722848527555778220472296939735862593774836580916144210148708103457370219076488821736428610439632801301390614512201604214119593608289642762712313351793525989314938672106110473740824100599652396414247681288304935052119090671791846422471213719301979586499201353912835364934382481288705132734921160552086747159634464359393043882891607486743658768545686326648305139791924005553234095024143659634349166429066087165932188068003139836754596992687103220117612941200322435769328149473759296872003530400158015003236775950172491680326911938994956370735551404911931529322953036120763439924777875397530770667968625564177137795804700825101377099786218910582144377461462604731399805156779803807344254834868612416129103504082312010464664238493941659828716159464971733985503405574359986163302029993495114376823691888358688377588261692300655739162589865853297242641583672353010231358104370831373300402748522466844293798877773851860585568524231676766673828148378728324758544753896692819212697219825003916587074455420273658169713877313119156483166214546311321756309940660054231678012960945949737813437909069731653909952733272685941585071438779734614956738819035849507097480540580907838234732206327718683190723695256308765533643857961426125266694431732037600034552958003600026392824052847424325865022360510837889385684089592789417639965252776002170372727134876259923999871984141348568936352227248477531163748166792981478574138855386093631830332730097404891799246473959309777813846382517227375333286016000410396508663324755689501800619767025671994684177892463326693114118866245719946512861220355832188472899157680073148368545659360847885373286710884480316803025454652817418988925989389974842881055822638206562819878552291238008674861287410593575979238604838711834216950449714088721811751042937782502793838548639624942195252949041432146258350271743731193287292575859304496", "y": "9.364438806952712976025597098112883465629617011349749728409285284299008933457844537920981785713825161240119505720429949442525153330733700815538481241887659415818153011448620206794215664398135787643851524855988480672756231095223267224165760161597000885801066803547790342020938271013316658264327101195029853873609501223975254478648312351053947155063269412255948791350388077081819515116421692308756945860408705243333201701254068191302957031458649014053557006893401198608369268215651938602657498674072940528335144406872587750089996575807515779127667783766996252043409972997982763705866279582474694924744754897118785743665242707761162549544654807825572919694125025901626999285174205947011129963453586696019479954043821448106652977201894720610802931167836478524171673726822994017338711529627695158987867452094132367465515290763003904835861577688149897653065896704223453790123963986224974342353935348505188355243951563593813544420066171005335112620794414836475271969547883594926050365797783280407886085411771959167666188808727157417038574647613610477285360848853677823716850489483296745076876804594039628512338073216477718117139249646371694551730409651766562478140737235371671357259679455301952720097105523995594329837798472082662160471242888480995598753290200220526528034251167659189569318573972236401928788764489672135084150324792053659072168107951960640082639176456388537538347799882807999160884479581847766540814238705055065778685454679168653545333330381805510626624491769672867761803369986294681894830216202223780083115362752057446520955598979342037074797406563934096302862710988174033000163591643763365606060818384290731596188406502728052597838751517586609854766976409181183136269527126147924340636708973262551589097560929812169643770677411364899636080347396457025019413501644591740727024714688450166800092977738939801902774942496977031375587847079661401519919234017369091100862599527764560978608893856356790915225671972763331564628706466632834549907459329126441571224852358368720777492527254169625061"}
E := {"x": "9.316954240821082050184801328780874456245946989992023373834055359477002156154412659816443920135498046875", "y": "6.660105586933022941184716407959074549363079243089307326434436902495850318928205524571239948272705078125"}
O := {"x": "4.1804998439402879332187782078549936673241680980002039826060877335737154353790822905935869480132132445761535924663567639085145832834102153198606459553193605116759723771208201947332160047214976959462959068150657441384858372779252318271712230257790425953886693383553924361927542495843406824531418979958847384938580645701393194145507065352489522920119389705640541810908381524552074552016743552172057607605587478557946342313594821320840650204437469640323564802715037653753496604813045492685831113108645296126650548954392214005244747506364206106284911568151742497193876744561672008063777613937722555380549496910595401715686236839744141057900155371615918812804825367796029998293180281706294671667058007747230774857401036966924991820252814218411212735907653778885396585245402716279586173908953157848268051414972094925176264862895482419036361490432456803559812516386452990205233955499519435569660598757165556915173396554962385412150645054190330156603595568439436118493376440928238195178830659342939812058430745920082676353895834234944265121030391658218641516976392489281874748128003527998523462748090064971114745920217919253331781289558617683536253817075560994887127534113072015442000984623395850816959863487446816961962035096217611204547552446815281632387199729231993225146546360005961433295467665432908801015968504337429160100416700327189550485035938265692950953219994796080071473142870707676355402539350725158066617740664903673340149153115299877494724208642265221469654954324656634540923641225196767123826751198050953887360598328722112379744996832544769860517729087723379081577354958606827705162340843398290676415054955485191718056579978569956221695296810490501819556009775906316674544000175662958875095790750558276203419363359613359460764561041518615488345155138812068690043227954838190619978808298228068842642791527589136313699849362641330500207172228119344696269145950858682872220634455908968236538531470846337986812566191364096858019883436365170402211967857297207402155220670663773544586717335831218235", "y": "5.4691351325778492255511643976725867007014834576099150728957999187000296181243788621897579398152179762943549997910142050912028413499571281300981059457659978688665375789142048426567110655814800055744099958617230516282751553808760769911973946332764342460382687978128088812653336639498199367036249326272107816332875499777507826947730216352631956078098477671905297932294898688266699900751046674652180505106763991233679773168053711576142599884699465784291682560392602399160918893072735779205158007003798756922140187444959623847745631268200150938901931002383345137257031548153933614584551877399100819391501517150282834159257497370134478942897071916957043597828430677158566246210326870102128394722748683761974512933729070995468461692277530990779210315387232038990308235348682782524644107012528246814295090643824539551192306533003356763261847177298911857269677701610257184809829734412258748834191267671132461439454662796718302223076680356090701152826482664485126392899385085177950932017191998885446326905920463707321094808496745127497288046316750061055247514729645221133081373010331958348608908676013453328931686463559854501770037498489258165912262077515277538294760502386922888714462286680727364512447274921077226836383273672977938791785691441984120336874933792967012767447673524385788889903355707699304470838721653539239980149505471353544488537943040643796462316223928078550579747542460633277387853764107813963331860276368118112190714188664305799494136959980188066535651206171902789846941825883808612861234737652852795771021858258433643747891710407043030926862245700008261654114683330223969232308201888949508543510658990949512603816593416912331951632523988330600081809847302552713510192670304276347113741739153854469975935031154781073531944302120514519073492916925236901542813448105083595969563589980767133817355634871215773911487295054318819624098408000857709396004695673253332129800804589985137647228196582345157330558277915257824472148010656509449070317091547100601326996467745914934226897100113713969274"}

Need to prove:
perpendicular(Line(A, O), Line(B, C))

Proof:
By circle_radius_v0_r on E, Circle(A, D, E) we get radius(Circle(A, D, E)) == distance(E, center(Circle(A, D, E)))
By circle_radius_v0_r on A, Circle(A, D, E) we get radius(Circle(A, D, E)) == distance(A, center(Circle(A, D, E)))
By concyclic_definition_0 on B, D, C, E we get E in Circle(B, C, D)
By angle_to_center on E, A, D, Circle(A, D, E) we get 2 * angle(E, A, D) == angle(E, center(Circle(A, D, E)), D) mod 360
By angle_to_center on A, E, D, Circle(A, D, E) we get 2 * angle(A, E, D) == angle(A, center(Circle(A, D, E)), D) mod 360
By same_angle_v2 on A, B, D, O we get angle(B, A, O) == angle(D, A, O) + 180 mod 360
By same_angle_v0 on B, A, D, C we get angle(A, B, C) == angle(D, B, C) mod 360
By collinear_definition on E, C, A we get C in Line(A, E), A in Line(C, E), Line(A, E) == Line(C, E), 0 == 2 * angle(C, E, A) mod 360
By angles_on_chord_v0 on D, C, B, E, Circle(B, C, D) we get angle(D, B, C) == angle(D, E, C) mod 360
By reverse_direction on B, A we get 180 == direction(B, A) - direction(A, B) mod 360
By reverse_direction on A, E we get 180 == direction(A, E) - direction(E, A) mod 360
By reverse_direction on B, C we get 180 == direction(B, C) - direction(C, B) mod 360
By reverse_direction on A, O we get 180 == direction(A, O) - direction(O, A) mod 360
By reverse_direction on O, E we get 180 == direction(O, E) - direction(E, O) mod 360
By isosceles_triangle_properties on O, E, A we get distance(A, O) == distance(E, O), angle(E, A, O) == angle(O, E, A) mod 360
By perpendicular_direction_conditions_v0 on C, B, O, A we get perpendicular(Line(A, O), Line(B, C))
