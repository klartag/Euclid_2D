Assumptions:
A, B, C, P, K, L, M, S: Point
distinct(A, B, C, K, L, M, P, S)
identical(orientation(A, B, P), orientation(A, P, C), orientation(B, C, P))
K in Line(A, P), Circle(A, B, C)
L in Line(B, P), Circle(A, B, C)
M in Line(C, P), Circle(A, B, C)
S in Line(A, B), point_circle_tangent_line(C, Circle(A, B, C))
distance(C, S) == distance(P, S)

Embedding:
C := {"x": "-4.18577729030296286083512313780374825000762939453125", "y": "-0.376094047672529130377228057113825343549251556396484375"}
B := {"x": "-7.73090043885587174798956766608171164989471435546875", "y": "1.302351292863245024733487298362888395786285400390625"}
A := {"x": "7.433249994919673753202005173079669475555419921875", "y": "4.96899111296994533404358662664890289306640625"}
S := {"x": "-9.3052771791576587865061586544503045951829349129391314547560813276115659044957583867046401359928638956850130755401916442307679433102310514583368813824467530367271569819618392304180985719388303677785392547677034681439970501440718827080443088870755919441713751267340106891122963817921997490701409300666973371445728370752235267131558197542200292122301258291071495277971971514938120211382076159193153295038063544713717515125152210356826684429989375352824003005416781339024775580513714240437272095142943737333346085724475289956433154172749200256258362741022750462767580910792560090973517018926448481099874486841229468822974555191374956943107545482968438945035731743303929854858315082154102701431393350613458960397358787087520787946145960167841278860044580335920504301199768624064245561936541034981450268256556130111000305771241506840249540388637655600410531631184253867595413381003182934909075171484192052474576786563357511090338439055709925650817477121534310649796474671554493612240289464097022847292555502183730877592459122674117674609260782889322578303919918612903306247226419904196428555173420206046718308278589130194391553578904573393372619230553591392088510999143513619728932873761208872046032292317813958772974166060554866110967892501980961722456528079287370495736204099497494570086419230490227811621847000221231259141140601651500616626711334348157262219326150278271565007451566412348531655755185618452207670676976240458351491027818277438268989069090643142759884337050618653968719296396635184708741166145010578097192843678062420587066793556646353415650204806864013379552837747137569692832711146095776734261904514532553763849818851209471274355985361550915016365585640825128835336996553314255898413842104566353911318547547190586414331707003585405096490364623975436840501214945266631560027856562639611023452948446743470298701141029599696346098798521384125309567347926631971130204491540088767132000591699628414503803692672259659044011761499017979347382250461429706113599619830889830738404297077647686535", "y": "0.92167237035778903892909805033605272030948962710056996467541869903197567715467579765243788749833595246455061603081053546914271692412078423293412163369449156170700555971556348793172126695287587324186603554649934145996501238309694604564981599099400475778039158610471384154158011799554262456984961272359337748172961490807006953537799489159545732775878920652019283476209437314453377237314400084440473985946812133729534982902497883579236526116172015518821919132549455764124802870878189749785259597056015677038171717735296303999517330564202309802512148759294601701929709493046197458425149917604937642995698336535203441021607390444919169213926912448665571687308671688065394849959003272832083111671636819553922147018521340635637004270420221680046988062316421230905321113526902874646078150885686263426838152922976813666832419515408297104674385216718585819993838484078721100602905772016104637231194199958450905941271579097018575716503591558746887974078651907918557725938152527246567929362175434747698999070078649232752280695271478616250097223577405674493851225756382060961547738818964244768940891165155368983217850875577065244873199225490230020463351256951482007292629973134437498201975211824130523389454087937287909957762764922371069820887362409842426325287896955193441991603124832331179325835677165183767115712563561331335641586135386187433058285098900879258556701889271814653157975913854214425086492405172321327150618926655188238410477354362690054007856548690014395710383064796433590479483253499901641653101797570308339289418560571464960977008322471334676471911243253607467281119398983408934299000733911180178181516718191670146240197515948625004544474228431435504850860869654261020432098912794666256755815999974461451987361842240674846166895175273878651293679087896655666204853562357619878950180722527145188913491883382872369835190691133139796070883226994696826065760993137146719462082918096375458462681913218167422812459823884542745991173947121589895356198686767713042855482868997744286494416871726474892573"}
P := {"x": "-4.0487364311556321765794458834334621952819443096785737438005738853104235394568531818578037308234215443262072065446471089938356324527635274296181599592824563335512980770614017134921078893240566506671073476667658994285856585698101798663794888590643367533464731318387755243923619422910704706941627850206084259671836676435329060198351963966937380045374602121332075648603453819489208731598119188559167418536106019024633946084367379259310494215356807150549072270759030412494319541575947377931664573655622167259446652726211842929141751275915351120611294233915293479060746406499960613343421703188805999686468429229325569493042409362233233849376579825099843847122094560323620844263083222127974537803371536776650081942980458029352777809379161835597757481715684893249307489711153257750461556018186168221364234865594099009910025109269060874905000535630189822527893000308267988030735679126293593094037326030287208846253434888606869256264334056276558542188728641269635704872310881021623014350724993036426649512717601596784629959442959278364775364248598744315816807264532949527361535253337685725841719931681075071388088608123350218523069007506561222498203837838222906218914950085907426155922430753222203836140596197889371474367147811397001021469235974660386611238296532050560525446256327208796087603763993639837399205574922439033985239984862548396756716088097197044854007729106016612529661091830214503854144847885329722960494897914154111550232551087721099195491354813092870351772263949774400674403298950850253534128407088981210055855389515719901578297321906080711391367452061118348858668508222784039565034111152708335539193009771539099671558295492636398283454723657363463789323806280756183015259048656242881735811247049710470090954035366124075009610132300332752621503377655209780755704117807049520048890587155636840218394360306607430751867748784765500575427237769757317909629070974811413932276459071751025435914679134262251685347213101935233901100062557445841933575889110056330040424881386013157655058918644085030631", "y": "0.40956285829539720733271913079226200162991951090579354870957437435622624381992591917835585699492276701736123764514406107051954783209682867751141443476950093593430466487491862243621783869768551105664663530854650245006603432702031583063768125434097094140457585576284468385420064117550169848621828990418847267422394154870708631696453106526833186182403299344144728938615674803696915797161306521253369255896330725188136316383585480468528154338915943354409080178858053920921558561275031776078244116350335022926719796368065783764256741582077017695941326929189855149811931989450047317444322186325128945833820768699793687100035885828854653852515539731052265920956150907704363210918725940964777145280592090764760329811203731613036867041861293863260426717810239295898574564672503394140823213498156193958010917147320343160640988956884790968038925069173789787545725268059423875657689713842788621849371466950063776790624488404072540023535973840302573147365132061678215190558424950988129458288405446974299220804444234341883678533786396360752690967557578375471700805784730516258573876005434716345548448769731249320655600130860984927663944197851108813313110627447833806978362428603795449981386351303870858067164759511822593538882326571377919320607297637004190281484829109301537281904852220721720126353786480849851182206048028456912583663660962596214400232511565563639694630091454804979945967424652673281432445784353199095544692954022038699424656487409696563266563558130477997345879041091418484994466825180573704174194533514797777750539270450906007300972985143752814533353636696774914710167544476178001521000321187222469442771919016223625965628547088341307988646775328556509197069120722703293605070734921417757145850622936368003077821913586601349345438083198656871243339226135196989588973681526737292851360223785599982300742033321095983394952114059992737591593427905614004628036558065556261256918830313013120396938065990721915528556756678947116497137682438306646040395685204470708529085837989823378910099293312858673063"}
M := {"x": "-0.69821853780962870883873390452340509429440362210247131963784147761814135122000409816678314493384776200223290822144665281343209173335352612800491990369855553581028247914106040206125584549225565284308332898574798321320343267173849953271817450293398590236586727743758054642562356258119720469591967113363813238105596636225480178180656289265572284818836966831655535100895471440219521949677092621676940544890618356311698230824425468454919174681391302867708731797987421947537987696524424331101441459606714406444464667777202810591306222563462122943120886717306310244268191573885496193634110840087723661143187329626996161258726178684461453764277085795914663823138843790722459363218555622461424830433141330813401605849867815326837863765894628804358872897592139153270997743737489951130147365938818255698644857664544412714869965965955447935014688202305013713548827064835674437795009622433789628200642164236932605831609586829657057097402723935292635153996734767605570748870519095818512715366851525780404320146079592326813348401766814428506059287267739815477413694170439633216501734390892597844062035474187203096530866036667414626211501705602807119355785919537460175188746788693203399874507493871178324387214563028435658867439663743651456447100372583807808617020946628503126520503336431156351756285160184725117152047675265704237992218366556093215177107476371537321006185510246519017602023944421847857319610407675520638747998984375455607965031331570916123365460337913198534184621639563387393826430138613690913807001998989975175003045203157318766000708126904707223883532811487482959939320678514202634769021151588500756662567758281291543882438962728877981486176094063472881302545676972860489707142124447760909451090965821619148943344575595600056453187050202478914563518512292083623978588486148337635023853405338002029839586430188467271557423737498535279130685178781076122468236668335219585805466445142643733140152347377897322932207100635469458948376807716191683590402046576115086881599508681898364568071877498449255425", "y": "19.618122537904421340490476883723688059525824740705954142050663246442865670129468930982659548793770655336645272632836805330365558946480634126020556013297022385960279097556917897450686776840760953116992445225367774070133567223108895391021272614888537561263383736199406634362371996334020793239260119845031200122292185132320128560314080801054653760068413296495842833884479361501275931151150156025794720095965377055036027962783894962650981457502184699092828963923832488391878344335670529392594120700065317167162580970696923668208646531848623003485211240208874181671660750584665921864703270039272036624903196711900922687501813931880225141765177848766520290528570085026937496314710817021489725609534782227638948288618339608421113631339575810221813240635482184512358443012314917152002209644684334328380578084775496959962394413132947022762685730226287215519347174407486607019006031250018865337831234794851896139348571212421271042175395080710482721100952902873777108091538221205770060390929599769322500699091644456208608067334816923084025553108733413448345216024007331746427242965672077993016915704612257999350194683582915401041822101929702103180826017141887079904709609110836906577566328200252690323149715751238669631818346483792477718861132852955196931134166988628482866693004894478739024389617064566960131544641972957866159861533848101636068957681775579486745904250151591135251147513091947654179588195008004810410886492220710775757134115869596828186204947518680640433748497501359795021880480807192001904447290316468849702884679649706410801300032639221548043650971921646143774170150566970296386660842905488124791008438417044307973930629031730992585263961290837427153548077466031046178874061646362601694084190974276324568288095792373096989285383943160391108916469792376324851894373329038762149132872029566344094263898286260499574227091096699659843038038390171195973726823698747503399273731048884555551865183631046495585666061327455074143007384989056342951522753074090235850721460747673769925442635365260537144"}
L := {"x": "-0.060030948570020726665997304501567152399092359471228180862364995778567103887343593543085661034846694028233595719046997495444532422510027013387176672861651866250420946047269184368761975032981594748306477371777042614414431608036293223346878672966789073945145507659647921239887339429216828039219813255280103660022321357662416936297335596565893298523436991577581285396821404966467143330198973008401292414545220163892521882351272366255890602074035240222374881687458419375340060923537649320514350802012947607750446314374922465895900052720594036230857301335516465036231752640913835289165820828760924271376131850489430146027367257408261443197874093264150926742336658846693651156843453626078188437994053877970281164782143783299519194057666870445902498533685055460542059840867739437654224561728200664902289664503476709258350459140505755813581213681679950174926534380311927373612701121971553404842012987051317639037552805512149675851400864310573291754151948426986665624113280506738475412300398413261112222144225159898070208202951300546389922153043133907849425171183920977060828603129475197350802503802207495266932655607363888061268746076783085630397900304926172874102348310197026385332504802014456477317856410067718812221251968546657875649006006875210787682248074430212841762322038912307165031318937094222677150199470047370913823137541854704805754854167953711117536407274656786108291661317030958412298723290417081002142443998058062551364245072984578784530857650931416053578251756667804131424134508292512383335825221015727843409322923296857703894852554954133583950877786483842665544076771763812475186950636161668868815165471811840369023421937548798517760885100124557664803997242387948034563835675452702413274182678261351705326768016292606352270197429567204114776573959620406529018156876996151972069936667146311984753415603181619951000922862153390868276043093309981541995472625828156373175791193900825781711900598097335247639580826667283670938275073586990482138894026224381074867150174375060008592132770713033963456", "y": "-0.55755053380305229354889844902715736654099936110602110113399902370021276750121443481583526864918190985053440687563141879576467570385327294057510282844475884469795503201043080709262679458927958434722971880578801344468540581351264514046653401395568523924607129139339888385205021574932337547698649113445649021644948316662239573977374924795521520347262401056838056377636278977485157558146836890507668242781993891669442503411282348929283098946647192810304337238873965321683856718103500599136479794471222825449054447839874396411449620586517783941944524192265341097992599938170929581951235959566064014308367703595837699407854170752277895309028205840645775962405496636841248778048234862657319281775714123286653850480751602169959793136219782554632593867369675700380655343072883326004998660404659435666420300231089875115055591667387335749290988315067953702784378158391915355833836623260407753891629536305470864287330847165314311537084066205272835479775580961549224113838406017607055022286103848625281172608759506001273417372826249266186995106367093512001847049493145774508159420267587791262696680009926330272476601408194844394810398164994395820740781464594326803767587151621380355790635820698987711231892526839076510185599720378198227676513214372699321979695231374916614219660818534068037414638743208333855367910897977777570528838361454788130107632694545167037333759473860377585005562102657843703164425331487210482002924945074721284109416922317486352298759365295346990191378686787160368864748817652396581939158085122767519433059222895336141423877484651376679729235462059915466623701092790763578051217032295807839920341034253169763529547121735321167220760400196512521102015750117137769946233394545134022393121401859313141589754718883734785056666620809235962895962779682707618431984098044588877120553319324564010455184334687573942293375406262489716832621259587258267283140686141193795566666370473312860046294501732017487998721673750284425449110135528772127062984767897077869460080992019456525611508501092160106597"}
K := {"x": "-5.2186055954832298004229577293788575435381566621419375382218097290568497558362063387368616206767294253021511370509349197081926065542186796730480182434875064179580983790506688573905493898010559947819431016818521690104066599534197605322417382599730044461860883321864904708514461861294805521591695156485398388692191960065022393836401672851381510848847663826887968075120200825636645524577867601809763786701715946862707748490112534235225588009530212675710801806089166905940769101492219545408381484043546928782941147595801612309418248998549501731435382304896425068183292970453273301215576562444360956293892952427293867870401114487986155157419254744157335474130649583152133959421663269426129534978763049804185905208724454470727799034755647597281095200672239037145731479735602120037997905952691258836294923134872806832931682988963316272078995738793192755114045463194009561081357829404867212879236320801581047391231950809925276815870467406689686476952885641269843659910335257566800086973867451225191361853252590881539377631102593518601940238753254924078756303928624806064173603968711240110753547380384035269082965542314155734510788124213626726154756207172475138334909219816718270580886816795901099336802980901123910087864304088355063941034899685017911000480161760725691118739534746948787292795369271990868556173247730975458866263264278270541786619523129506979763769570408860603490843200308356457126283136827461817826301503681895462477955353428893614767618252767013770250423317321015137425853264310808245158692586642639019699959193409884142537049068534434195158262480318879806524385211830803439345368982962198841251874995023874276327585181527863104388728103853944919734726298954287047807953296556950242855945948075109647358067155025152310730926364772097090452568151469665361899310409902059034160980844957837144889577780895512597466571942992778681611443946150487993331964454452391775147469062048379266203811905181150396928239462320184347183653533422475844708188795785872458148653140372407883734249774343409610475", "y": "-0.054985201959622584465080993234478777288651305963587813533226917800054625320002638184574951314488126683588980495995059818074934652229774896348891976047553621390659083332132268422090317248114951513284023214923490217854944557572656646924447352616594784863650234905961654363014292507599666446124096529682198904314066523266348172331004947922050172799191625036291636477826977111716013882668361515100306184286622776689226624679795773147870638768632093394980731398011508199203514640937053056877896923335736492618533153138808799940593450580212548423998425182291952038652489609300364720800527143389777479766989926966162816531016638932747075862241458947312163960014648456094322432643407515181284419578010597625305526358944376514115006977658254422413042878504782598863799605842581857561254852851377687328720485863406042058525994665431746278562635341819603038915635214786920645680871443983801048490506088023733625113574005997179147993680798233553442288136494071859430100159037856027447902996463804181268935194834384897639827645082095634869900850968214725395446420548857295908439342645536709920828056605573509412632706953747471013776510341658408546229134907435715000542898541172007726263643746690956565598700662472629098930699335894974729674010261653050283250568140394879960831314609986782144094702693004481639365075617199971031398052639088321681901423135716666707801893263816068876147636862420474050904927278943443149407087186313401821665507576789989533481798323311128787634602836856924371342941865389768729707830451282309666543406215940795572597927825884316491867758663408440022943638004988387197223629287711917435034963554480528743314863497669298787379139561452172858968221630653421441252045512433463549545785185205425544615620419102718442004994041228604734866584278711968332604276682830976461033780685273124368852035804349524375795357566074600465451419766335874382406659029987943844334748159263853249261474317623129539521614865433123019731797568949440927836505775875033753285099834207302601114693082286066459742"}

Need to prove:
distance(K, M) == distance(L, M)

Proof:
By line_definition on S, B, Line(A, B) we get Line(A, B) == Line(B, S)
By line_definition on L, B, Line(B, P) we get Line(B, L) == Line(B, P)
By line_definition on M, C, Line(C, P) we get Line(C, M) == Line(C, P)
By line_definition on L, P, Line(B, P) we get Line(B, P) == Line(L, P)
By line_definition on K, A, Line(A, P) we get Line(A, K) == Line(A, P)
By line_definition on K, P, Line(A, P) we get Line(A, P) == Line(K, P)
By line_definition on C, S, point_circle_tangent_line(C, Circle(A, B, C)) we get Line(C, S) == point_circle_tangent_line(C, Circle(A, B, C))
By line_definition on P, M, Line(C, P) we get Line(C, P) == Line(M, P)
By line_definition on S, A, Line(A, B) we get Line(A, B) == Line(A, S)
By circle_definition on L, K, C, Circle(A, B, C) we get Circle(A, B, C) == Circle(C, K, L)
By circle_definition on M, C, A, Circle(A, B, C) we get Circle(A, B, C) == Circle(A, C, M)
By circle_definition on M, B, L, Circle(A, B, C) we get Circle(A, B, C) == Circle(B, L, M)
By circle_definition on B, C, M, Circle(A, B, C) we get Circle(A, B, C) == Circle(B, C, M)
By circle_definition on C, M, L, Circle(A, B, C) we get Circle(A, B, C) == Circle(C, L, M)
By circle_definition on M, B, A, Circle(A, B, C) we get Circle(A, B, C) == Circle(A, B, M)
By circle_definition on B, A, L, Circle(A, B, C) we get Circle(A, B, C) == Circle(A, B, L)
By circle_definition on C, K, M, Circle(A, B, C) we get Circle(A, B, C) == Circle(C, K, M)
By circle_definition on K, C, B, Circle(A, B, C) we get Circle(A, B, C) == Circle(B, C, K)
By circle_definition on K, M, B, Circle(A, B, C) we get Circle(A, B, C) == Circle(B, K, M)
By line_intersection_definition on P, Line(B, P), Line(C, P) we get P == line_intersection(Line(B, P), Line(C, P))
By circle_definition on B, K, L, Circle(A, B, C) we get Circle(A, B, C) == Circle(B, K, L)
By circle_definition on L, A, M, Circle(A, B, C) we get Circle(A, B, C) == Circle(A, L, M)
By circle_definition on L, A, K, Circle(A, B, C) we get Circle(A, B, C) == Circle(A, K, L)
By circle_definition on A, M, K, Circle(A, B, C) we get Circle(A, B, C) == Circle(A, K, M)
By circle_definition on A, K, B, Circle(A, B, C) we get Circle(A, B, C) == Circle(A, B, K)
By circle_definition on B, L, C, Circle(A, B, C) we get Circle(A, B, C) == Circle(B, C, L)
By line_intersection_definition on P, Line(A, P), Line(C, P) we get P == line_intersection(Line(A, P), Line(C, P))
By line_intersection_definition on S, Line(A, B), point_circle_tangent_line(C, Circle(A, B, C)) we get S == line_intersection(Line(A, B), point_circle_tangent_line(C, Circle(A, B, C)))
By circle_definition on A, C, K, Circle(A, B, C) we get Circle(A, B, C) == Circle(A, C, K)
By circle_definition on L, M, K, Circle(A, B, C) we get Circle(A, B, C) == Circle(K, L, M)
By circle_definition on C, L, A, Circle(A, B, C) we get Circle(A, B, C) == Circle(A, C, L)
By line_intersection_definition on P, Line(B, P), Line(A, P) we get P == line_intersection(Line(A, P), Line(B, P))
By line_intersection_definition on C, Line(C, P), point_circle_tangent_line(C, Circle(A, B, C)) we get C == line_intersection(Line(C, P), point_circle_tangent_line(C, Circle(A, B, C)))
By line_intersection_definition on A, Line(A, P), Line(A, B) we get A == line_intersection(Line(A, B), Line(A, P))
By line_intersection_definition on B, Line(B, P), Line(A, B) we get B == line_intersection(Line(A, B), Line(B, P))
By in_imply_collinear on L, B, P we get collinear(B, L, P)
By in_imply_collinear on K, A, P we get collinear(A, K, P)
By in_imply_collinear on S, B, A we get collinear(A, B, S)
By in_imply_concyclic on B, C, A, L we get concyclic(A, B, C, L)
By in_imply_collinear on M, P, C we get collinear(C, M, P)
By in_imply_concyclic on B, A, C, K we get concyclic(A, B, C, K)
By in_imply_concyclic on A, B, C, M we get concyclic(A, B, C, M)
By angles_on_chord_v0 on K, A, B, M, Circle(A, B, C) we get angle(K, B, A) == angle(K, M, A) mod 360
By angles_on_chord_v1 on A, L, M, K, Circle(A, B, C) we get angle(A, K, L) == angle(A, M, L) mod 360
By power_of_a_point_in_circle on B, Circle(A, B, C) we get 0 == power_of_a_point(B, Circle(A, B, C))
By angles_on_chord_v2 on M, L, A, C, Circle(A, B, C) we get angle(M, A, L) == angle(M, C, L) + 180 mod 360
By angles_on_chord_v1 on L, C, B, M, Circle(A, B, C) we get angle(L, B, C) == angle(L, M, C) mod 360
By power_of_a_point_in_circle on C, Circle(A, B, C) we get 0 == power_of_a_point(C, Circle(A, B, C))
By angles_on_chord_v0 on A, K, L, C, Circle(A, B, C) we get angle(A, C, K) == angle(A, L, K) mod 360
By angles_on_chord_v3 on K, A, C, M, Circle(A, B, C) we get angle(K, C, A) == angle(K, M, A) + 180 mod 360
By angles_on_chord_v2 on C, A, B, L, Circle(A, B, C) we get angle(C, B, A) == angle(C, L, A) + 180 mod 360
By angles_on_chord_v3 on B, L, C, A, Circle(A, B, C) we get angle(B, C, L) == angle(B, A, L) + 180 mod 360
By power_of_a_point_on_circle on A, Circle(A, B, C) we get 0 == power_of_a_point(A, Circle(A, B, C))
By angles_on_chord_v1 on M, A, B, C, Circle(A, B, C) we get angle(M, B, A) == angle(M, C, A) mod 360
By angles_on_chord_v1 on A, K, B, M, Circle(A, B, C) we get angle(A, B, K) == angle(A, M, K) mod 360
By power_of_a_point_on_circle on L, Circle(A, B, C) we get 0 == power_of_a_point(L, Circle(A, B, C))
By angles_on_chord_v3 on L, K, B, C, Circle(A, B, C) we get angle(L, B, K) == angle(L, C, K) + 180 mod 360
By angles_on_chord_v1 on K, M, C, L, Circle(A, B, C) we get angle(K, C, M) == angle(K, L, M) mod 360
By angles_on_chord_v0 on B, K, C, M, Circle(A, B, C) we get angle(B, C, K) == angle(B, M, K) mod 360
By angles_on_chord_v1 on L, C, A, M, Circle(A, B, C) we get angle(L, A, C) == angle(L, M, C) mod 360
By power_of_a_point_on_circle on K, Circle(A, B, C) we get 0 == power_of_a_point(K, Circle(A, B, C))
By angles_on_chord_v3 on C, B, L, K, Circle(A, B, C) we get angle(C, L, B) == angle(C, K, B) + 180 mod 360
By angles_on_chord_v3 on A, C, M, L, Circle(A, B, C) we get angle(A, M, C) == angle(A, L, C) + 180 mod 360
By power_of_a_point_in_circle on M, Circle(A, B, C) we get 0 == power_of_a_point(M, Circle(A, B, C))
By angles_on_chord_v1 on A, L, B, M, Circle(A, B, C) we get angle(A, B, L) == angle(A, M, L) mod 360
By angles_on_chord_v0 on B, C, L, M, Circle(A, B, C) we get angle(B, L, C) == angle(B, M, C) mod 360
By angles_on_chord_v2 on B, L, A, K, Circle(A, B, C) we get angle(B, A, L) == angle(B, K, L) + 180 mod 360
By angles_on_chord_v3 on M, L, C, A, Circle(A, B, C) we get angle(M, C, L) == angle(M, A, L) + 180 mod 360
By angles_on_chord_v0 on A, M, K, C, Circle(A, B, C) we get angle(A, C, M) == angle(A, K, M) mod 360
By angles_on_chord_v0 on B, L, A, M, Circle(A, B, C) we get angle(B, A, L) == angle(B, M, L) mod 360
By angles_on_chord_v0 on C, L, K, B, Circle(A, B, C) we get angle(C, B, L) == angle(C, K, L) mod 360
By angles_on_chord_v3 on C, M, L, B, Circle(A, B, C) we get angle(C, L, M) == angle(C, B, M) + 180 mod 360
By angles_on_chord_v0 on C, L, M, K, Circle(A, B, C) we get angle(C, K, L) == angle(C, M, L) mod 360
By angles_on_chord_v1 on A, C, M, B, Circle(A, B, C) we get angle(A, B, C) == angle(A, M, C) mod 360
By angles_on_chord_v0 on A, M, L, C, Circle(A, B, C) we get angle(A, C, M) == angle(A, L, M) mod 360
By angles_on_chord_v2 on M, K, L, B, Circle(A, B, C) we get angle(M, L, K) == angle(M, B, K) + 180 mod 360
By angles_on_chord_v1 on L, K, A, M, Circle(A, B, C) we get angle(L, A, K) == angle(L, M, K) mod 360
By angles_on_chord_v0 on K, C, B, L, Circle(A, B, C) we get angle(K, B, C) == angle(K, L, C) mod 360
By angles_on_chord_v1 on M, L, C, B, Circle(A, B, C) we get angle(M, B, L) == angle(M, C, L) mod 360
By draw_point_of_tangency on point_circle_tangent_line(C, Circle(A, B, C)), Circle(A, B, C) we get exists(line_circle_tangent_point(point_circle_tangent_line(C, Circle(A, B, C)), Circle(A, B, C)))
By angles_on_chord_v1 on K, B, L, C, Circle(A, B, C) we get angle(K, C, B) == angle(K, L, B) mod 360
By angles_on_chord_v0 on L, A, C, B, Circle(A, B, C) we get angle(L, B, A) == angle(L, C, A) mod 360
By angles_on_chord_v1 on C, K, L, A, Circle(A, B, C) we get angle(C, A, K) == angle(C, L, K) mod 360
By angles_on_chord_v1 on K, B, A, C, Circle(A, B, C) we get angle(K, A, B) == angle(K, C, B) mod 360
By angles_on_chord_v3 on M, C, K, L, Circle(A, B, C) we get angle(M, K, C) == angle(M, L, C) + 180 mod 360
By angles_on_chord_v2 on K, L, M, C, Circle(A, B, C) we get angle(K, M, L) == angle(K, C, L) + 180 mod 360
By angles_on_chord_v0 on K, L, A, M, Circle(A, B, C) we get angle(K, A, L) == angle(K, M, L) mod 360
By angles_on_chord_v0 on B, K, M, L, Circle(A, B, C) we get angle(B, L, K) == angle(B, M, K) mod 360
By angles_on_chord_v0 on M, B, C, L, Circle(A, B, C) we get angle(M, C, B) == angle(M, L, B) mod 360
By angles_on_chord_v0 on K, L, A, B, Circle(A, B, C) we get angle(K, A, L) == angle(K, B, L) mod 360
By angles_on_chord_v2 on A, C, L, K, Circle(A, B, C) we get angle(A, L, C) == angle(A, K, C) + 180 mod 360
By angles_on_chord_v1 on K, A, C, L, Circle(A, B, C) we get angle(K, C, A) == angle(K, L, A) mod 360
By angles_on_chord_v2 on B, L, A, C, Circle(A, B, C) we get angle(B, A, L) == angle(B, C, L) + 180 mod 360
By angles_on_chord_v3 on M, K, B, L, Circle(A, B, C) we get angle(M, B, K) == angle(M, L, K) + 180 mod 360
By angles_on_chord_v2 on M, L, A, K, Circle(A, B, C) we get angle(M, A, L) == angle(M, K, L) + 180 mod 360
By angles_on_chord_v1 on M, A, L, C, Circle(A, B, C) we get angle(M, C, A) == angle(M, L, A) mod 360
By angles_on_chord_v0 on B, C, L, A, Circle(A, B, C) we get angle(B, A, C) == angle(B, L, C) mod 360
By angles_on_chord_v3 on A, K, M, L, Circle(A, B, C) we get angle(A, M, K) == angle(A, L, K) + 180 mod 360
By angles_on_chord_v1 on B, M, C, L, Circle(A, B, C) we get angle(B, C, M) == angle(B, L, M) mod 360
By angles_on_chord_v2 on K, M, B, C, Circle(A, B, C) we get angle(K, B, M) == angle(K, C, M) + 180 mod 360
By angles_on_chord_v0 on L, A, C, K, Circle(A, B, C) we get angle(L, C, A) == angle(L, K, A) mod 360
By angles_on_chord_v2 on L, K, C, M, Circle(A, B, C) we get angle(L, C, K) == angle(L, M, K) + 180 mod 360
By angles_on_chord_v3 on K, A, L, B, Circle(A, B, C) we get angle(K, L, A) == angle(K, B, A) + 180 mod 360
By angles_on_chord_v0 on B, K, A, C, Circle(A, B, C) we get angle(B, A, K) == angle(B, C, K) mod 360
By angles_on_chord_v1 on A, C, K, M, Circle(A, B, C) we get angle(A, K, C) == angle(A, M, C) mod 360
By angles_on_chord_v1 on M, A, K, L, Circle(A, B, C) we get angle(M, K, A) == angle(M, L, A) mod 360
By angles_on_chord_v2 on M, C, L, K, Circle(A, B, C) we get angle(M, L, C) == angle(M, K, C) + 180 mod 360
By angles_on_chord_v1 on M, A, L, B, Circle(A, B, C) we get angle(M, B, A) == angle(M, L, A) mod 360
By angles_on_chord_v3 on B, C, K, M, Circle(A, B, C) we get angle(B, K, C) == angle(B, M, C) + 180 mod 360
By angles_on_chord_v0 on L, A, M, K, Circle(A, B, C) we get angle(L, K, A) == angle(L, M, A) mod 360
By angles_on_chord_v3 on K, L, C, A, Circle(A, B, C) we get angle(K, C, L) == angle(K, A, L) + 180 mod 360
By angles_on_chord_v0 on L, B, C, K, Circle(A, B, C) we get angle(L, C, B) == angle(L, K, B) mod 360
By angles_on_chord_v0 on M, B, K, L, Circle(A, B, C) we get angle(M, K, B) == angle(M, L, B) mod 360
By angles_on_chord_v2 on B, L, M, K, Circle(A, B, C) we get angle(B, M, L) == angle(B, K, L) + 180 mod 360
By angles_on_chord_v0 on A, M, L, K, Circle(A, B, C) we get angle(A, K, M) == angle(A, L, M) mod 360
By angles_on_chord_v1 on L, C, K, A, Circle(A, B, C) we get angle(L, A, C) == angle(L, K, C) mod 360
By angles_on_chord_v3 on L, M, A, B, Circle(A, B, C) we get angle(L, A, M) == angle(L, B, M) + 180 mod 360
By angles_on_chord_v2 on C, B, K, L, Circle(A, B, C) we get angle(C, K, B) == angle(C, L, B) + 180 mod 360
By angles_on_chord_v1 on K, M, A, L, Circle(A, B, C) we get angle(K, A, M) == angle(K, L, M) mod 360
By angles_on_chord_v0 on L, M, K, C, Circle(A, B, C) we get angle(L, C, M) == angle(L, K, M) mod 360
By angles_on_chord_v2 on M, C, L, B, Circle(A, B, C) we get angle(M, L, C) == angle(M, B, C) + 180 mod 360
By angles_on_chord_v1 on L, C, M, K, Circle(A, B, C) we get angle(L, K, C) == angle(L, M, C) mod 360
By angles_on_chord_v0 on K, C, B, A, Circle(A, B, C) we get angle(K, A, C) == angle(K, B, C) mod 360
By angles_on_chord_v0 on B, C, A, M, Circle(A, B, C) we get angle(B, A, C) == angle(B, M, C) mod 360
By angles_on_chord_v3 on B, A, L, M, Circle(A, B, C) we get angle(B, L, A) == angle(B, M, A) + 180 mod 360
By angles_on_chord_v3 on B, L, K, A, Circle(A, B, C) we get angle(B, K, L) == angle(B, A, L) + 180 mod 360
By angles_on_chord_v2 on K, L, B, C, Circle(A, B, C) we get angle(K, B, L) == angle(K, C, L) + 180 mod 360
By angles_on_chord_v1 on C, K, M, A, Circle(A, B, C) we get angle(C, A, K) == angle(C, M, K) mod 360
By angles_on_chord_v2 on M, C, A, B, Circle(A, B, C) we get angle(M, A, C) == angle(M, B, C) + 180 mod 360
By angles_on_chord_v3 on A, B, M, C, Circle(A, B, C) we get angle(A, M, B) == angle(A, C, B) + 180 mod 360
By angles_on_chord_v0 on A, B, K, C, Circle(A, B, C) we get angle(A, C, B) == angle(A, K, B) mod 360
By angles_on_chord_v0 on A, M, B, C, Circle(A, B, C) we get angle(A, B, M) == angle(A, C, M) mod 360
By angles_on_chord_v1 on M, A, K, C, Circle(A, B, C) we get angle(M, C, A) == angle(M, K, A) mod 360
By angles_on_chord_v0 on M, K, C, L, Circle(A, B, C) we get angle(M, C, K) == angle(M, L, K) mod 360
By angles_on_chord_v0 on K, C, L, M, Circle(A, B, C) we get angle(K, L, C) == angle(K, M, C) mod 360
By angles_on_chord_v1 on A, L, M, C, Circle(A, B, C) we get angle(A, C, L) == angle(A, M, L) mod 360
By angles_on_chord_v1 on K, M, A, C, Circle(A, B, C) we get angle(K, A, M) == angle(K, C, M) mod 360
By angles_on_chord_v1 on C, K, L, B, Circle(A, B, C) we get angle(C, B, K) == angle(C, L, K) mod 360
By angles_on_chord_v3 on B, L, C, M, Circle(A, B, C) we get angle(B, C, L) == angle(B, M, L) + 180 mod 360
By angles_on_chord_v0 on L, A, M, C, Circle(A, B, C) we get angle(L, C, A) == angle(L, M, A) mod 360
By angles_on_chord_v0 on A, M, B, K, Circle(A, B, C) we get angle(A, B, M) == angle(A, K, M) mod 360
By angles_on_chord_v2 on M, K, C, B, Circle(A, B, C) we get angle(M, C, K) == angle(M, B, K) + 180 mod 360
By angles_on_chord_v3 on B, C, K, A, Circle(A, B, C) we get angle(B, K, C) == angle(B, A, C) + 180 mod 360
By angles_on_chord_v1 on B, M, L, A, Circle(A, B, C) we get angle(B, A, M) == angle(B, L, M) mod 360
By angles_on_chord_v0 on C, M, K, B, Circle(A, B, C) we get angle(C, B, M) == angle(C, K, M) mod 360
By angles_on_chord_v0 on M, B, K, C, Circle(A, B, C) we get angle(M, C, B) == angle(M, K, B) mod 360
By angles_on_chord_v1 on C, B, L, M, Circle(A, B, C) we get angle(C, L, B) == angle(C, M, B) mod 360
By angles_on_chord_v2 on C, M, B, L, Circle(A, B, C) we get angle(C, B, M) == angle(C, L, M) + 180 mod 360
By angles_on_chord_v1 on A, L, B, K, Circle(A, B, C) we get angle(A, B, L) == angle(A, K, L) mod 360
By angles_on_chord_v2 on A, B, C, M, Circle(A, B, C) we get angle(A, C, B) == angle(A, M, B) + 180 mod 360
By angles_on_chord_v0 on L, M, K, B, Circle(A, B, C) we get angle(L, B, M) == angle(L, K, M) mod 360
By angles_on_chord_v0 on K, C, M, A, Circle(A, B, C) we get angle(K, A, C) == angle(K, M, C) mod 360
By angles_on_chord_v0 on M, B, C, A, Circle(A, B, C) we get angle(M, A, B) == angle(M, C, B) mod 360
By angles_on_chord_v1 on K, B, A, M, Circle(A, B, C) we get angle(K, A, B) == angle(K, M, B) mod 360
By angles_on_chord_v3 on L, B, M, K, Circle(A, B, C) we get angle(L, M, B) == angle(L, K, B) + 180 mod 360
By angles_on_chord_v2 on K, A, M, C, Circle(A, B, C) we get angle(K, M, A) == angle(K, C, A) + 180 mod 360
By angles_on_chord_v1 on K, B, L, A, Circle(A, B, C) we get angle(K, A, B) == angle(K, L, B) mod 360
By angles_on_chord_v3 on C, M, L, K, Circle(A, B, C) we get angle(C, L, M) == angle(C, K, M) + 180 mod 360
By angles_on_chord_v1 on M, L, K, C, Circle(A, B, C) we get angle(M, C, L) == angle(M, K, L) mod 360
By angles_on_chord_v3 on M, L, K, A, Circle(A, B, C) we get angle(M, K, L) == angle(M, A, L) + 180 mod 360
By angles_on_chord_v1 on C, M, L, A, Circle(A, B, C) we get angle(C, A, M) == angle(C, L, M) mod 360
By angles_on_chord_v1 on L, K, M, B, Circle(A, B, C) we get angle(L, B, K) == angle(L, M, K) mod 360
By angles_on_chord_v2 on K, L, A, C, Circle(A, B, C) we get angle(K, A, L) == angle(K, C, L) + 180 mod 360
By angles_on_chord_v2 on K, A, M, L, Circle(A, B, C) we get angle(K, M, A) == angle(K, L, A) + 180 mod 360
By angles_on_chord_v1 on B, M, K, L, Circle(A, B, C) we get angle(B, K, M) == angle(B, L, M) mod 360
By angles_on_chord_v3 on C, A, L, B, Circle(A, B, C) we get angle(C, L, A) == angle(C, B, A) + 180 mod 360
By angles_on_chord_v3 on B, A, C, M, Circle(A, B, C) we get angle(B, C, A) == angle(B, M, A) + 180 mod 360
By angles_on_chord_v0 on B, K, L, C, Circle(A, B, C) we get angle(B, C, K) == angle(B, L, K) mod 360
By angles_on_chord_v3 on M, L, B, A, Circle(A, B, C) we get angle(M, B, L) == angle(M, A, L) + 180 mod 360
By angles_on_chord_v0 on M, K, A, L, Circle(A, B, C) we get angle(M, A, K) == angle(M, L, K) mod 360
By angles_on_chord_v1 on C, K, M, L, Circle(A, B, C) we get angle(C, L, K) == angle(C, M, K) mod 360
By angles_on_chord_v3 on K, M, A, B, Circle(A, B, C) we get angle(K, A, M) == angle(K, B, M) + 180 mod 360
By angles_on_chord_v1 on C, B, A, L, Circle(A, B, C) we get angle(C, A, B) == angle(C, L, B) mod 360
By angles_on_chord_v3 on K, L, C, B, Circle(A, B, C) we get angle(K, C, L) == angle(K, B, L) + 180 mod 360
By angles_on_chord_v0 on K, C, B, M, Circle(A, B, C) we get angle(K, B, C) == angle(K, M, C) mod 360
By angles_on_chord_v0 on M, K, C, A, Circle(A, B, C) we get angle(M, A, K) == angle(M, C, K) mod 360
By angles_on_chord_v0 on L, A, K, B, Circle(A, B, C) we get angle(L, B, A) == angle(L, K, A) mod 360
By angles_on_chord_v0 on K, C, A, L, Circle(A, B, C) we get angle(K, A, C) == angle(K, L, C) mod 360
By angles_on_chord_v2 on A, K, L, B, Circle(A, B, C) we get angle(A, L, K) == angle(A, B, K) + 180 mod 360
By angles_on_chord_v3 on C, M, A, K, Circle(A, B, C) we get angle(C, A, M) == angle(C, K, M) + 180 mod 360
By angles_on_chord_v3 on C, B, A, K, Circle(A, B, C) we get angle(C, A, B) == angle(C, K, B) + 180 mod 360
By angles_on_chord_v2 on M, K, A, B, Circle(A, B, C) we get angle(M, A, K) == angle(M, B, K) + 180 mod 360
By angles_on_chord_v1 on B, A, K, C, Circle(A, B, C) we get angle(B, C, A) == angle(B, K, A) mod 360
By angles_on_chord_v2 on A, K, C, B, Circle(A, B, C) we get angle(A, C, K) == angle(A, B, K) + 180 mod 360
By angles_on_chord_v0 on C, A, K, M, Circle(A, B, C) we get angle(C, K, A) == angle(C, M, A) mod 360
By angles_on_chord_v1 on C, B, A, M, Circle(A, B, C) we get angle(C, A, B) == angle(C, M, B) mod 360
By angles_on_chord_v2 on A, K, C, M, Circle(A, B, C) we get angle(A, C, K) == angle(A, M, K) + 180 mod 360
By angles_on_chord_v0 on C, A, M, B, Circle(A, B, C) we get angle(C, B, A) == angle(C, M, A) mod 360
By angles_on_chord_v3 on M, K, B, A, Circle(A, B, C) we get angle(M, B, K) == angle(M, A, K) + 180 mod 360
By angles_on_chord_v0 on M, B, L, A, Circle(A, B, C) we get angle(M, A, B) == angle(M, L, B) mod 360
By angles_on_chord_v0 on L, M, B, C, Circle(A, B, C) we get angle(L, B, M) == angle(L, C, M) mod 360
By angles_on_chord_v1 on B, L, K, C, Circle(A, B, C) we get angle(B, C, L) == angle(B, K, L) mod 360
By angles_on_chord_v1 on L, B, M, A, Circle(A, B, C) we get angle(L, A, B) == angle(L, M, B) mod 360
By angles_on_chord_v2 on M, C, A, K, Circle(A, B, C) we get angle(M, A, C) == angle(M, K, C) + 180 mod 360
By angles_on_chord_v0 on C, L, B, M, Circle(A, B, C) we get angle(C, B, L) == angle(C, M, L) mod 360
By angles_on_chord_v0 on B, K, M, A, Circle(A, B, C) we get angle(B, A, K) == angle(B, M, K) mod 360
By angles_on_chord_v2 on B, C, A, K, Circle(A, B, C) we get angle(B, A, C) == angle(B, K, C) + 180 mod 360
By angles_on_chord_v3 on C, B, M, K, Circle(A, B, C) we get angle(C, M, B) == angle(C, K, B) + 180 mod 360
By angles_on_chord_v3 on C, A, L, K, Circle(A, B, C) we get angle(C, L, A) == angle(C, K, A) + 180 mod 360
By angles_on_chord_v1 on C, K, B, M, Circle(A, B, C) we get angle(C, B, K) == angle(C, M, K) mod 360
By angles_on_chord_v1 on L, K, B, A, Circle(A, B, C) we get angle(L, A, K) == angle(L, B, K) mod 360
By angles_on_chord_v0 on A, B, C, L, Circle(A, B, C) we get angle(A, C, B) == angle(A, L, B) mod 360
By angles_on_chord_v0 on A, B, K, L, Circle(A, B, C) we get angle(A, K, B) == angle(A, L, B) mod 360
By angles_on_chord_v0 on C, L, A, B, Circle(A, B, C) we get angle(C, A, L) == angle(C, B, L) mod 360
By angles_on_chord_v3 on C, M, A, B, Circle(A, B, C) we get angle(C, A, M) == angle(C, B, M) + 180 mod 360
By angles_on_chord_v2 on L, M, B, A, Circle(A, B, C) we get angle(L, B, M) == angle(L, A, M) + 180 mod 360
By angles_on_chord_v2 on L, M, K, A, Circle(A, B, C) we get angle(L, K, M) == angle(L, A, M) + 180 mod 360
By angles_on_chord_v3 on A, B, M, K, Circle(A, B, C) we get angle(A, M, B) == angle(A, K, B) + 180 mod 360
By angles_on_chord_v0 on B, K, L, A, Circle(A, B, C) we get angle(B, A, K) == angle(B, L, K) mod 360
By angles_on_chord_v2 on C, M, K, L, Circle(A, B, C) we get angle(C, K, M) == angle(C, L, M) + 180 mod 360
By angles_on_chord_v1 on A, L, B, C, Circle(A, B, C) we get angle(A, B, L) == angle(A, C, L) mod 360
By angles_on_chord_v2 on C, B, K, A, Circle(A, B, C) we get angle(C, K, B) == angle(C, A, B) + 180 mod 360
By angles_on_chord_v1 on M, A, K, B, Circle(A, B, C) we get angle(M, B, A) == angle(M, K, A) mod 360
By angles_on_chord_v1 on B, M, C, A, Circle(A, B, C) we get angle(B, A, M) == angle(B, C, M) mod 360
By angles_on_chord_v2 on A, B, K, M, Circle(A, B, C) we get angle(A, K, B) == angle(A, M, B) + 180 mod 360
By angles_on_chord_v3 on B, L, K, M, Circle(A, B, C) we get angle(B, K, L) == angle(B, M, L) + 180 mod 360
By angles_on_chord_v1 on B, M, K, A, Circle(A, B, C) we get angle(B, A, M) == angle(B, K, M) mod 360
By angles_on_chord_v3 on L, K, M, C, Circle(A, B, C) we get angle(L, M, K) == angle(L, C, K) + 180 mod 360
By angles_on_chord_v2 on B, A, M, L, Circle(A, B, C) we get angle(B, M, A) == angle(B, L, A) + 180 mod 360
By angles_on_chord_v0 on C, L, A, K, Circle(A, B, C) we get angle(C, A, L) == angle(C, K, L) mod 360
By angles_on_chord_v3 on L, B, M, C, Circle(A, B, C) we get angle(L, M, B) == angle(L, C, B) + 180 mod 360
By angles_on_chord_v1 on M, C, B, K, Circle(A, B, C) we get angle(M, B, C) == angle(M, K, C) mod 360
By angles_on_chord_v0 on C, L, A, M, Circle(A, B, C) we get angle(C, A, L) == angle(C, M, L) mod 360
By angles_on_chord_v3 on A, K, M, C, Circle(A, B, C) we get angle(A, M, K) == angle(A, C, K) + 180 mod 360
By angles_on_chord_v2 on B, A, M, K, Circle(A, B, C) we get angle(B, M, A) == angle(B, K, A) + 180 mod 360
By angles_on_chord_v0 on K, L, B, M, Circle(A, B, C) we get angle(K, B, L) == angle(K, M, L) mod 360
By angles_on_chord_v3 on A, K, B, C, Circle(A, B, C) we get angle(A, B, K) == angle(A, C, K) + 180 mod 360
By angles_on_chord_v1 on B, A, L, K, Circle(A, B, C) we get angle(B, K, A) == angle(B, L, A) mod 360
By angles_on_chord_v1 on B, M, C, K, Circle(A, B, C) we get angle(B, C, M) == angle(B, K, M) mod 360
By angles_on_chord_v2 on C, M, K, A, Circle(A, B, C) we get angle(C, K, M) == angle(C, A, M) + 180 mod 360
By angles_on_chord_v2 on A, K, L, M, Circle(A, B, C) we get angle(A, L, K) == angle(A, M, K) + 180 mod 360
By angles_on_chord_v2 on B, C, L, K, Circle(A, B, C) we get angle(B, L, C) == angle(B, K, C) + 180 mod 360
By angles_on_chord_v2 on A, C, L, M, Circle(A, B, C) we get angle(A, L, C) == angle(A, M, C) + 180 mod 360
By angles_on_chord_v0 on L, A, B, M, Circle(A, B, C) we get angle(L, B, A) == angle(L, M, A) mod 360
By angles_on_chord_v0 on M, C, A, L, Circle(A, B, C) we get angle(M, A, C) == angle(M, L, C) mod 360
By angles_on_chord_v2 on L, B, K, A, Circle(A, B, C) we get angle(L, K, B) == angle(L, A, B) + 180 mod 360
By angles_on_chord_v1 on A, C, B, K, Circle(A, B, C) we get angle(A, B, C) == angle(A, K, C) mod 360
By angles_on_chord_v1 on K, B, M, C, Circle(A, B, C) we get angle(K, C, B) == angle(K, M, B) mod 360
By angles_on_chord_v2 on B, C, M, K, Circle(A, B, C) we get angle(B, M, C) == angle(B, K, C) + 180 mod 360
By angles_on_chord_v3 on L, M, A, K, Circle(A, B, C) we get angle(L, A, M) == angle(L, K, M) + 180 mod 360
By angles_on_chord_v3 on K, M, C, B, Circle(A, B, C) we get angle(K, C, M) == angle(K, B, M) + 180 mod 360
By angles_on_chord_v3 on K, A, L, M, Circle(A, B, C) we get angle(K, L, A) == angle(K, M, A) + 180 mod 360
By angles_on_chord_v2 on A, C, L, B, Circle(A, B, C) we get angle(A, L, C) == angle(A, B, C) + 180 mod 360
By angles_on_chord_v1 on B, A, L, C, Circle(A, B, C) we get angle(B, C, A) == angle(B, L, A) mod 360
By angles_on_chord_v2 on K, A, B, L, Circle(A, B, C) we get angle(K, B, A) == angle(K, L, A) + 180 mod 360
By angles_on_chord_v1 on M, L, B, K, Circle(A, B, C) we get angle(M, B, L) == angle(M, K, L) mod 360
By angles_on_chord_v0 on M, B, K, A, Circle(A, B, C) we get angle(M, A, B) == angle(M, K, B) mod 360
By angles_on_chord_v3 on B, A, K, M, Circle(A, B, C) we get angle(B, K, A) == angle(B, M, A) + 180 mod 360
By angles_on_chord_v3 on M, C, B, A, Circle(A, B, C) we get angle(M, B, C) == angle(M, A, C) + 180 mod 360
By angles_on_chord_v2 on K, M, B, A, Circle(A, B, C) we get angle(K, B, M) == angle(K, A, M) + 180 mod 360
By angles_on_chord_v2 on M, L, A, B, Circle(A, B, C) we get angle(M, A, L) == angle(M, B, L) + 180 mod 360
By angles_on_chord_v1 on L, C, K, B, Circle(A, B, C) we get angle(L, B, C) == angle(L, K, C) mod 360
By angles_on_chord_v0 on C, A, B, K, Circle(A, B, C) we get angle(C, B, A) == angle(C, K, A) mod 360
By angles_on_chord_v1 on C, K, A, B, Circle(A, B, C) we get angle(C, A, K) == angle(C, B, K) mod 360
By angles_on_chord_v2 on C, A, K, L, Circle(A, B, C) we get angle(C, K, A) == angle(C, L, A) + 180 mod 360
By angles_on_chord_v3 on B, C, K, L, Circle(A, B, C) we get angle(B, K, C) == angle(B, L, C) + 180 mod 360
By angles_on_chord_v2 on B, L, M, C, Circle(A, B, C) we get angle(B, M, L) == angle(B, C, L) + 180 mod 360
By angles_on_chord_v3 on L, B, A, K, Circle(A, B, C) we get angle(L, A, B) == angle(L, K, B) + 180 mod 360
By angles_on_chord_v1 on K, B, M, L, Circle(A, B, C) we get angle(K, L, B) == angle(K, M, B) mod 360
By angles_on_chord_v2 on L, M, C, A, Circle(A, B, C) we get angle(L, C, M) == angle(L, A, M) + 180 mod 360
By angles_on_chord_v2 on L, K, C, B, Circle(A, B, C) we get angle(L, C, K) == angle(L, B, K) + 180 mod 360
By angles_on_chord_v0 on A, M, L, B, Circle(A, B, C) we get angle(A, B, M) == angle(A, L, M) mod 360
By angles_on_chord_v1 on A, L, K, C, Circle(A, B, C) we get angle(A, C, L) == angle(A, K, L) mod 360
By angles_on_chord_v3 on M, C, B, L, Circle(A, B, C) we get angle(M, B, C) == angle(M, L, C) + 180 mod 360
By angles_on_chord_v3 on M, K, B, C, Circle(A, B, C) we get angle(M, B, K) == angle(M, C, K) + 180 mod 360
By angles_on_chord_v2 on B, A, M, C, Circle(A, B, C) we get angle(B, M, A) == angle(B, C, A) + 180 mod 360
By angles_on_chord_v2 on L, K, C, A, Circle(A, B, C) we get angle(L, C, K) == angle(L, A, K) + 180 mod 360
By angles_on_chord_v3 on K, M, L, B, Circle(A, B, C) we get angle(K, L, M) == angle(K, B, M) + 180 mod 360
By angles_on_chord_v3 on K, L, C, M, Circle(A, B, C) we get angle(K, C, L) == angle(K, M, L) + 180 mod 360
By angles_on_chord_v3 on L, M, A, C, Circle(A, B, C) we get angle(L, A, M) == angle(L, C, M) + 180 mod 360
By angles_on_chord_v3 on A, K, B, L, Circle(A, B, C) we get angle(A, B, K) == angle(A, L, K) + 180 mod 360
By angles_on_chord_v2 on K, A, B, C, Circle(A, B, C) we get angle(K, B, A) == angle(K, C, A) + 180 mod 360
By angles_on_chord_v2 on K, M, B, L, Circle(A, B, C) we get angle(K, B, M) == angle(K, L, M) + 180 mod 360
By angles_on_chord_v3 on A, C, K, L, Circle(A, B, C) we get angle(A, K, C) == angle(A, L, C) + 180 mod 360
By angles_on_chord_v2 on L, B, C, A, Circle(A, B, C) we get angle(L, C, B) == angle(L, A, B) + 180 mod 360
By angles_on_chord_v3 on A, B, M, L, Circle(A, B, C) we get angle(A, M, B) == angle(A, L, B) + 180 mod 360
By angles_on_chord_v2 on L, B, C, M, Circle(A, B, C) we get angle(L, C, B) == angle(L, M, B) + 180 mod 360
By angles_on_chord_v2 on C, A, M, L, Circle(A, B, C) we get angle(C, M, A) == angle(C, L, A) + 180 mod 360
By angles_on_chord_v3 on L, K, A, C, Circle(A, B, C) we get angle(L, A, K) == angle(L, C, K) + 180 mod 360
By angles_on_chord_v1 on L, C, A, B, Circle(A, B, C) we get angle(L, A, C) == angle(L, B, C) mod 360
By angles_on_chord_v3 on K, A, C, B, Circle(A, B, C) we get angle(K, C, A) == angle(K, B, A) + 180 mod 360
By angles_on_chord_v2 on L, B, K, M, Circle(A, B, C) we get angle(L, K, B) == angle(L, M, B) + 180 mod 360
By angles_on_chord_v2 on C, B, K, M, Circle(A, B, C) we get angle(C, K, B) == angle(C, M, B) + 180 mod 360
By angles_on_chord_v3 on C, A, L, M, Circle(A, B, C) we get angle(C, L, A) == angle(C, M, A) + 180 mod 360
By angles_on_chord_v3 on L, B, A, C, Circle(A, B, C) we get angle(L, A, B) == angle(L, C, B) + 180 mod 360
By angles_on_chord_v3 on A, C, B, L, Circle(A, B, C) we get angle(A, B, C) == angle(A, L, C) + 180 mod 360
By angles_on_chord_v3 on M, C, K, A, Circle(A, B, C) we get angle(M, K, C) == angle(M, A, C) + 180 mod 360
By angles_on_chord_v2 on C, M, B, A, Circle(A, B, C) we get angle(C, B, M) == angle(C, A, M) + 180 mod 360
By angles_on_chord_v2 on A, B, L, M, Circle(A, B, C) we get angle(A, L, B) == angle(A, M, B) + 180 mod 360
By isosceles_triangle_properties on S, C, P we get distance(C, S) == distance(P, S), angle(C, P, S) == angle(S, C, P) mod 360
By isosceles_triangle_properties on S, P, C we get distance(C, S) == distance(P, S), angle(P, C, S) == angle(S, P, C) mod 360
By concyclic_sufficient_conditions_v1 on K, M, A, C we get concyclic(A, C, K, M)
By concyclic_sufficient_conditions_v1 on A, L, B, M we get concyclic(A, B, L, M)
By concyclic_sufficient_conditions_v1 on A, L, C, K we get concyclic(A, C, K, L)
By concyclic_sufficient_conditions_v0 on A, B, K, M we get concyclic(A, B, K, M)
By concyclic_sufficient_conditions_v0 on M, K, A, L we get concyclic(A, K, L, M)
By concyclic_sufficient_conditions_v1 on C, M, B, K we get concyclic(B, C, K, M)
By concyclic_sufficient_conditions_v1 on K, B, M, L we get concyclic(B, K, L, M)
By concyclic_sufficient_conditions_v1 on C, L, M, K we get concyclic(C, K, L, M)
By concyclic_sufficient_conditions_v0 on C, M, L, B we get concyclic(B, C, L, M)
By concyclic_sufficient_conditions_v1 on K, B, A, L we get concyclic(A, B, K, L)
By concyclic_sufficient_conditions_v1 on B, L, C, K we get concyclic(B, C, K, L)
By concyclic_sufficient_conditions_v0 on C, A, L, M we get concyclic(A, C, L, M)
By concurrent_sufficient_conditions on Line(C, M), Line(B, L), Line(A, K) we get concurrent(Line(A, K), Line(B, L), Line(C, M))
By line_definition on S, line_circle_tangent_point(Line(C, S), Circle(A, B, C)), Line(C, S) we get Line(C, S) == Line(S, line_circle_tangent_point(Line(C, S), Circle(A, B, C)))
By concurrent_sufficient_conditions on Line(A, K), Line(C, M), Line(B, L) we get concurrent(Line(A, K), Line(B, L), Line(C, M))
By concurrent_sufficient_conditions on Line(C, M), Line(A, K), Line(B, L) we get concurrent(Line(A, K), Line(B, L), Line(C, M))
By concurrent_sufficient_conditions on Line(A, K), Line(B, L), Line(C, M) we get concurrent(Line(A, K), Line(B, L), Line(C, M))
By concurrent_sufficient_conditions on Line(B, L), Line(C, M), Line(A, K) we get concurrent(Line(A, K), Line(B, L), Line(C, M))
By concurrent_sufficient_conditions on Line(B, L), Line(A, K), Line(C, M) we get concurrent(Line(A, K), Line(B, L), Line(C, M))
By line_intersection_definition on B, Line(B, C), Line(B, M) we get B == line_intersection(Line(B, C), Line(B, M))
By line_intersection_definition on K, Line(B, K), Line(C, K) we get K == line_intersection(Line(B, K), Line(C, K))
By line_intersection_definition on P, Line(A, K), Line(P, S) we get P == line_intersection(Line(A, K), Line(P, S))
By circle_definition on line_circle_tangent_point(Line(C, S), Circle(A, B, C)), L, K, Circle(A, B, C) we get Circle(A, B, C) == Circle(K, L, line_circle_tangent_point(Line(C, S), Circle(A, B, C)))
By circle_definition on A, L, line_circle_tangent_point(Line(C, S), Circle(A, B, C)), Circle(A, B, C) we get Circle(A, B, C) == Circle(A, L, line_circle_tangent_point(Line(C, S), Circle(A, B, C)))
By line_intersection_definition on K, Line(K, L), Line(C, K) we get K == line_intersection(Line(C, K), Line(K, L))
By circle_definition on K, line_circle_tangent_point(Line(C, S), Circle(A, B, C)), M, Circle(A, B, C) we get Circle(A, B, C) == Circle(K, M, line_circle_tangent_point(Line(C, S), Circle(A, B, C)))
By circle_definition on B, M, line_circle_tangent_point(Line(C, S), Circle(A, B, C)), Circle(A, B, C) we get Circle(A, B, C) == Circle(B, M, line_circle_tangent_point(Line(C, S), Circle(A, B, C)))
By circle_definition on L, line_circle_tangent_point(Line(C, S), Circle(A, B, C)), M, Circle(A, B, C) we get Circle(A, B, C) == Circle(L, M, line_circle_tangent_point(Line(C, S), Circle(A, B, C)))
By line_intersection_definition on L, Line(L, M), Line(A, L) we get L == line_intersection(Line(A, L), Line(L, M))
By line_intersection_definition on K, Line(C, K), Line(A, K) we get K == line_intersection(Line(A, K), Line(C, K))
By line_intersection_definition on L, Line(B, L), Line(C, L) we get L == line_intersection(Line(B, L), Line(C, L))
By line_intersection_definition on L, Line(L, M), Line(K, L) we get L == line_intersection(Line(K, L), Line(L, M))
By line_intersection_definition on A, Line(A, L), Line(A, C) we get A == line_intersection(Line(A, C), Line(A, L))
By line_intersection_definition on A, Line(A, K), Line(A, L) we get A == line_intersection(Line(A, K), Line(A, L))
By line_intersection_definition on M, Line(C, M), Line(B, M) we get M == line_intersection(Line(B, M), Line(C, M))
By circle_definition on line_circle_tangent_point(Line(C, S), Circle(A, B, C)), B, K, Circle(A, B, C) we get Circle(A, B, C) == Circle(B, K, line_circle_tangent_point(Line(C, S), Circle(A, B, C)))
By line_intersection_definition on M, Line(L, M), Line(A, M) we get M == line_intersection(Line(A, M), Line(L, M))
By line_intersection_definition on K, Line(K, M), Line(K, L) we get K == line_intersection(Line(K, L), Line(K, M))
By circle_definition on line_circle_tangent_point(Line(C, S), Circle(A, B, C)), A, K, Circle(A, B, C) we get Circle(A, B, C) == Circle(A, K, line_circle_tangent_point(Line(C, S), Circle(A, B, C)))
By line_intersection_definition on B, Line(A, B), Line(B, M) we get B == line_intersection(Line(A, B), Line(B, M))
By line_intersection_definition on C, Line(C, M), Line(C, L) we get C == line_intersection(Line(C, L), Line(C, M))
By line_intersection_definition on C, Line(B, C), Line(A, C) we get C == line_intersection(Line(A, C), Line(B, C))
By line_intersection_definition on A, Line(A, C), Line(A, K) we get A == line_intersection(Line(A, C), Line(A, K))
By line_intersection_definition on B, Line(B, M), Line(B, K) we get B == line_intersection(Line(B, K), Line(B, M))
By circle_definition on A, B, line_circle_tangent_point(Line(C, S), Circle(A, B, C)), Circle(A, B, C) we get Circle(A, B, C) == Circle(A, B, line_circle_tangent_point(Line(C, S), Circle(A, B, C)))
By line_intersection_definition on L, Line(K, L), Line(C, L) we get L == line_intersection(Line(C, L), Line(K, L))
By line_intersection_definition on A, Line(A, M), Line(A, B) we get A == line_intersection(Line(A, B), Line(A, M))
By circle_definition on A, M, line_circle_tangent_point(Line(C, S), Circle(A, B, C)), Circle(A, B, C) we get Circle(A, B, C) == Circle(A, M, line_circle_tangent_point(Line(C, S), Circle(A, B, C)))
By line_intersection_definition on M, Line(L, M), Line(K, M) we get M == line_intersection(Line(K, M), Line(L, M))
By line_intersection_definition on P, Line(P, S), Line(B, L) we get P == line_intersection(Line(B, L), Line(P, S))
By circle_definition on B, line_circle_tangent_point(Line(C, S), Circle(A, B, C)), L, Circle(A, B, C) we get Circle(A, B, C) == Circle(B, L, line_circle_tangent_point(Line(C, S), Circle(A, B, C)))
By line_intersection_definition on K, Line(B, K), Line(A, K) we get K == line_intersection(Line(A, K), Line(B, K))
By line_intersection_definition on S, Line(C, S), Line(P, S) we get S == line_intersection(Line(C, S), Line(P, S))
By line_intersection_definition on A, Line(A, B), Line(A, L) we get A == line_intersection(Line(A, B), Line(A, L))
By line_intersection_definition on C, Line(C, K), Line(C, L) we get C == line_intersection(Line(C, K), Line(C, L))
By line_intersection_definition on C, Line(C, L), Line(A, C) we get C == line_intersection(Line(A, C), Line(C, L))
By line_intersection_definition on K, Line(K, L), Line(B, K) we get K == line_intersection(Line(B, K), Line(K, L))
By line_intersection_definition on A, Line(A, B), Line(A, C) we get A == line_intersection(Line(A, B), Line(A, C))
By line_intersection_definition on M, Line(C, M), Line(A, M) we get M == line_intersection(Line(A, M), Line(C, M))
By line_intersection_definition on C, Line(C, M), Line(B, C) we get C == line_intersection(Line(B, C), Line(C, M))
By line_intersection_definition on B, Line(A, B), Line(B, C) we get B == line_intersection(Line(A, B), Line(B, C))
By line_intersection_definition on B, Line(B, L), Line(B, M) we get B == line_intersection(Line(B, L), Line(B, M))
By line_intersection_definition on S, Line(A, B), Line(P, S) we get S == line_intersection(Line(A, B), Line(P, S))
By line_intersection_definition on L, Line(A, L), Line(K, L) we get L == line_intersection(Line(A, L), Line(K, L))
By line_intersection_definition on B, Line(B, L), Line(B, K) we get B == line_intersection(Line(B, K), Line(B, L))
By line_intersection_definition on L, Line(B, L), Line(A, L) we get L == line_intersection(Line(A, L), Line(B, L))
By line_intersection_definition on M, Line(C, M), Line(L, M) we get M == line_intersection(Line(C, M), Line(L, M))
By line_intersection_definition on M, Line(K, M), Line(A, M) we get M == line_intersection(Line(A, M), Line(K, M))
By line_intersection_definition on A, Line(A, M), Line(A, C) we get A == line_intersection(Line(A, C), Line(A, M))
By line_intersection_definition on C, Line(C, M), Line(A, C) we get C == line_intersection(Line(A, C), Line(C, M))
By line_intersection_definition on B, Line(B, C), Line(B, K) we get B == line_intersection(Line(B, C), Line(B, K))
By line_intersection_definition on K, Line(K, L), Line(A, K) we get K == line_intersection(Line(A, K), Line(K, L))
By line_intersection_definition on C, Line(C, M), Line(C, K) we get C == line_intersection(Line(C, K), Line(C, M))
By line_intersection_definition on C, Line(B, C), Line(C, K) we get C == line_intersection(Line(B, C), Line(C, K))
By line_intersection_definition on A, Line(A, M), Line(A, K) we get A == line_intersection(Line(A, K), Line(A, M))
By line_intersection_definition on C, Line(B, C), Line(C, S) we get C == line_intersection(Line(B, C), Line(C, S))
By line_intersection_definition on M, Line(K, M), Line(C, M) we get M == line_intersection(Line(C, M), Line(K, M))
By line_intersection_definition on C, Line(A, C), Line(C, K) we get C == line_intersection(Line(A, C), Line(C, K))
By line_intersection_definition on C, Line(C, L), Line(C, S) we get C == line_intersection(Line(C, L), Line(C, S))
By line_intersection_definition on L, Line(B, L), Line(L, M) we get L == line_intersection(Line(B, L), Line(L, M))
By line_intersection_definition on P, Line(P, S), Line(C, M) we get P == line_intersection(Line(C, M), Line(P, S))
By line_intersection_definition on K, Line(K, M), Line(C, K) we get K == line_intersection(Line(C, K), Line(K, M))
By line_intersection_definition on L, Line(C, L), Line(A, L) we get L == line_intersection(Line(A, L), Line(C, L))
By line_intersection_definition on C, Line(A, C), Line(C, S) we get C == line_intersection(Line(A, C), Line(C, S))
By line_intersection_definition on M, Line(L, M), Line(B, M) we get M == line_intersection(Line(B, M), Line(L, M))
By line_intersection_definition on B, Line(B, K), Line(A, B) we get B == line_intersection(Line(A, B), Line(B, K))
By line_intersection_definition on K, Line(K, M), Line(A, K) we get K == line_intersection(Line(A, K), Line(K, M))
By line_intersection_definition on C, Line(C, S), Line(C, K) we get C == line_intersection(Line(C, K), Line(C, S))
By line_intersection_definition on L, Line(L, M), Line(C, L) we get L == line_intersection(Line(C, L), Line(L, M))
By line_intersection_definition on B, Line(B, C), Line(B, L) we get B == line_intersection(Line(B, C), Line(B, L))
By line_intersection_definition on A, Line(A, M), Line(A, L) we get A == line_intersection(Line(A, L), Line(A, M))
By line_intersection_definition on M, Line(A, M), Line(B, M) we get M == line_intersection(Line(A, M), Line(B, M))
By line_intersection_definition on C, Line(B, C), Line(C, L) we get C == line_intersection(Line(B, C), Line(C, L))
By line_intersection_definition on L, Line(K, L), Line(B, L) we get L == line_intersection(Line(B, L), Line(K, L))
By line_intersection_definition on M, Line(K, M), Line(B, M) we get M == line_intersection(Line(B, M), Line(K, M))
By line_intersection_definition on K, Line(K, M), Line(B, K) we get K == line_intersection(Line(B, K), Line(K, M))
By same_angle_v0 on C, M, P, S we get angle(M, C, S) == angle(P, C, S) mod 360
By same_angle_v1 on C, M, P, A we get angle(M, C, A) == angle(P, C, A) mod 360
By same_angle_v0 on C, M, P, B we get angle(M, C, B) == angle(P, C, B) mod 360
By same_angle_v1 on C, P, M, L we get angle(M, C, L) == angle(P, C, L) mod 360
By same_angle_v0 on C, M, P, K we get angle(M, C, K) == angle(P, C, K) mod 360
By same_angle_v0 on K, A, P, M we get angle(A, K, M) == angle(P, K, M) mod 360
By same_angle_v0 on A, S, B, L we get angle(B, A, L) == angle(S, A, L) mod 360
By same_angle_v3 on P, M, C, S we get angle(M, P, S) == angle(C, P, S) + 180 mod 360
By same_angle_v2 on B, A, S, M we get angle(A, B, M) == angle(S, B, M) + 180 mod 360
By same_angle_v3 on B, S, A, K we get angle(S, B, K) == angle(A, B, K) + 180 mod 360
By same_angle_v0 on A, P, K, L we get angle(K, A, L) == angle(P, A, L) mod 360
By same_angle_v1 on M, C, P, B we get angle(C, M, B) == angle(P, M, B) mod 360
By same_angle_v1 on B, L, P, K we get angle(L, B, K) == angle(P, B, K) mod 360
By same_angle_v1 on L, P, B, A we get angle(B, L, A) == angle(P, L, A) mod 360
By same_angle_v0 on A, S, B, K we get angle(B, A, K) == angle(S, A, K) mod 360
By same_angle_v0 on L, P, B, C we get angle(B, L, C) == angle(P, L, C) mod 360
By same_angle_v0 on M, C, P, L we get angle(C, M, L) == angle(P, M, L) mod 360
By same_angle_v0 on M, P, C, A we get angle(C, M, A) == angle(P, M, A) mod 360
By same_angle_v1 on A, P, K, M we get angle(K, A, M) == angle(P, A, M) mod 360
By same_angle_v1 on M, P, C, K we get angle(C, M, K) == angle(P, M, K) mod 360
By same_angle_v0 on B, L, P, A we get angle(L, B, A) == angle(P, B, A) mod 360
By same_angle_v1 on A, K, P, B we get angle(K, A, B) == angle(P, A, B) mod 360
By same_angle_v0 on L, P, B, K we get angle(B, L, K) == angle(P, L, K) mod 360
By same_angle_v1 on A, S, B, M we get angle(B, A, M) == angle(S, A, M) mod 360
By same_angle_v3 on B, S, A, C we get angle(S, B, C) == angle(A, B, C) + 180 mod 360
By same_angle_v1 on K, A, P, C we get angle(A, K, C) == angle(P, K, C) mod 360
By same_angle_v0 on A, K, P, C we get angle(K, A, C) == angle(P, A, C) mod 360
By same_angle_v0 on K, P, A, B we get angle(A, K, B) == angle(P, K, B) mod 360
By same_angle_v1 on B, P, L, C we get angle(L, B, C) == angle(P, B, C) mod 360
By same_angle_v0 on B, P, L, M we get angle(L, B, M) == angle(P, B, M) mod 360
By same_angle_v1 on L, B, P, M we get angle(B, L, M) == angle(P, L, M) mod 360
By same_angle_v1 on K, P, A, L we get angle(A, K, L) == angle(P, K, L) mod 360
By same_angle_v3 on B, S, A, L we get angle(S, B, L) == angle(A, B, L) + 180 mod 360
By same_angle_v0 on A, B, S, C we get angle(B, A, C) == angle(S, A, C) mod 360
By in_imply_concyclic on L, B, C, line_circle_tangent_point(Line(C, S), Circle(A, B, C)) we get concyclic(B, C, L, line_circle_tangent_point(Line(C, S), Circle(A, B, C)))
By probably_between_and_collinear_implies_between on C, P, M we get between(C, P, M)
By probably_between_and_collinear_implies_between on B, P, L we get between(B, P, L)
By reverse_direction on L, M we get 180 == direction(L, M) - direction(M, L) mod 360
By probably_between_and_collinear_implies_between on S, B, A we get between(A, B, S)
By probably_between_and_collinear_implies_between on K, P, A we get between(A, P, K)
By in_imply_concyclic on B, L, M, line_circle_tangent_point(Line(C, S), Circle(A, B, C)) we get concyclic(B, L, M, line_circle_tangent_point(Line(C, S), Circle(A, B, C)))
By in_imply_concyclic on K, B, L, line_circle_tangent_point(Line(C, S), Circle(A, B, C)) we get concyclic(B, K, L, line_circle_tangent_point(Line(C, S), Circle(A, B, C)))
By tangent_chord_angle_reverse_v0 on C, M, L, S we get angle(M, C, S) == angle(M, L, C) mod 360
By tangent_chord_angle_reverse_v3 on C, L, A, S we get angle(L, A, C) == angle(L, C, S) + 180 mod 360
By tangent_chord_angle_reverse_v3 on C, L, K, S we get angle(L, K, C) == angle(L, C, S) + 180 mod 360
By in_imply_concyclic on K, C, M, line_circle_tangent_point(Line(C, S), Circle(A, B, C)) we get concyclic(C, K, M, line_circle_tangent_point(Line(C, S), Circle(A, B, C)))
By tangent_chord_angle_reverse_v0 on C, K, L, S we get angle(K, C, S) == angle(K, L, C) mod 360
By in_imply_concyclic on A, B, K, line_circle_tangent_point(Line(C, S), Circle(A, B, C)) we get concyclic(A, B, K, line_circle_tangent_point(Line(C, S), Circle(A, B, C)))
By in_imply_concyclic on K, L, C, line_circle_tangent_point(Line(C, S), Circle(A, B, C)) we get concyclic(C, K, L, line_circle_tangent_point(Line(C, S), Circle(A, B, C)))
By in_imply_concyclic on A, M, L, line_circle_tangent_point(Line(C, S), Circle(A, B, C)) we get concyclic(A, L, M, line_circle_tangent_point(Line(C, S), Circle(A, B, C)))
By tangent_chord_angle_reverse_v3 on C, M, K, S we get angle(M, K, C) == angle(M, C, S) + 180 mod 360
By in_imply_concyclic on K, B, C, line_circle_tangent_point(Line(C, S), Circle(A, B, C)) we get concyclic(B, C, K, line_circle_tangent_point(Line(C, S), Circle(A, B, C)))
By in_imply_concyclic on C, B, A, line_circle_tangent_point(Line(C, S), Circle(A, B, C)) we get concyclic(A, B, C, line_circle_tangent_point(Line(C, S), Circle(A, B, C)))
By in_imply_concyclic on L, K, M, line_circle_tangent_point(Line(C, S), Circle(A, B, C)) we get concyclic(K, L, M, line_circle_tangent_point(Line(C, S), Circle(A, B, C)))
By in_imply_collinear on line_circle_tangent_point(Line(C, S), Circle(A, B, C)), S, C we get collinear(C, S, line_circle_tangent_point(Line(C, S), Circle(A, B, C)))
By tangent_chord_angle_reverse_v3 on C, M, B, S we get angle(M, B, C) == angle(M, C, S) + 180 mod 360
By reverse_direction on C, M we get 180 == direction(C, M) - direction(M, C) mod 360
By in_imply_concyclic on K, A, C, line_circle_tangent_point(Line(C, S), Circle(A, B, C)) we get concyclic(A, C, K, line_circle_tangent_point(Line(C, S), Circle(A, B, C)))
By in_imply_concyclic on B, M, A, line_circle_tangent_point(Line(C, S), Circle(A, B, C)) we get concyclic(A, B, M, line_circle_tangent_point(Line(C, S), Circle(A, B, C)))
By tangent_point_is_unique on C, line_circle_tangent_point(Line(C, S), Circle(A, B, C)), Circle(A, B, C), Line(C, S) we get C == line_circle_tangent_point(Line(C, S), Circle(A, B, C))
By in_imply_concyclic on M, B, K, line_circle_tangent_point(Line(C, S), Circle(A, B, C)) we get concyclic(B, K, M, line_circle_tangent_point(Line(C, S), Circle(A, B, C)))
By reverse_direction on M, B we get 180 == direction(M, B) - direction(B, M) mod 360
By in_imply_concyclic on M, C, L, line_circle_tangent_point(Line(C, S), Circle(A, B, C)) we get concyclic(C, L, M, line_circle_tangent_point(Line(C, S), Circle(A, B, C)))
By reverse_direction on C, K we get 180 == direction(C, K) - direction(K, C) mod 360
By in_imply_concyclic on L, A, K, line_circle_tangent_point(Line(C, S), Circle(A, B, C)) we get concyclic(A, K, L, line_circle_tangent_point(Line(C, S), Circle(A, B, C)))
By reverse_direction on M, L we get 180 == direction(M, L) - direction(L, M) mod 360
By tangent_chord_angle_reverse_v0 on C, A, L, S we get angle(A, C, S) == angle(A, L, C) mod 360
By tangent_chord_angle_reverse_v3 on C, A, B, S we get angle(A, B, C) == angle(A, C, S) + 180 mod 360
By tangent_chord_angle_reverse_v0 on C, B, L, S we get angle(B, C, S) == angle(B, L, C) mod 360
By reverse_direction on B, L we get 180 == direction(B, L) - direction(L, B) mod 360
By tangent_chord_angle_reverse_v0 on C, K, B, S we get angle(K, B, C) == angle(K, C, S) mod 360
By reverse_direction on L, A we get 180 == direction(L, A) - direction(A, L) mod 360
By tangent_chord_angle_reverse_v0 on C, M, A, S we get angle(M, A, C) == angle(M, C, S) mod 360
By reverse_direction on L, B we get 180 == direction(L, B) - direction(B, L) mod 360
By tangent_chord_angle_reverse_v0 on C, B, A, S we get angle(B, A, C) == angle(B, C, S) mod 360
By reverse_direction on L, K we get 180 == direction(L, K) - direction(K, L) mod 360
By reverse_direction on K, A we get 180 == direction(K, A) - direction(A, K) mod 360
By reverse_direction on P, C we get 180 == direction(P, C) - direction(C, P) mod 360
By reverse_direction on K, C we get 180 == direction(K, C) - direction(C, K) mod 360
By tangent_chord_angle_reverse_v0 on C, K, A, S we get angle(K, A, C) == angle(K, C, S) mod 360
By in_imply_concyclic on B, A, L, line_circle_tangent_point(Line(C, S), Circle(A, B, C)) we get concyclic(A, B, L, line_circle_tangent_point(Line(C, S), Circle(A, B, C)))
By reverse_direction on A, B we get 180 == direction(A, B) - direction(B, A) mod 360
By in_imply_concyclic on A, M, C, line_circle_tangent_point(Line(C, S), Circle(A, B, C)) we get concyclic(A, C, M, line_circle_tangent_point(Line(C, S), Circle(A, B, C)))
By in_imply_concyclic on L, A, C, line_circle_tangent_point(Line(C, S), Circle(A, B, C)) we get concyclic(A, C, L, line_circle_tangent_point(Line(C, S), Circle(A, B, C)))
By reverse_direction on K, B we get 180 == direction(K, B) - direction(B, K) mod 360
By tangent_chord_angle_reverse_v3 on C, B, K, S we get angle(B, K, C) == angle(B, C, S) + 180 mod 360
By in_imply_concyclic on K, M, A, line_circle_tangent_point(Line(C, S), Circle(A, B, C)) we get concyclic(A, K, M, line_circle_tangent_point(Line(C, S), Circle(A, B, C)))
By in_imply_concyclic on B, C, M, line_circle_tangent_point(Line(C, S), Circle(A, B, C)) we get concyclic(B, C, M, line_circle_tangent_point(Line(C, S), Circle(A, B, C)))
By collinear_definition on C, P, M we get P in Line(C, M), M in Line(C, P), Line(C, M) == Line(C, P), 0 == 2 * angle(P, C, M) mod 360
By tangent_chord_angle_reverse_v3 on C, L, B, S we get angle(L, B, C) == angle(L, C, S) + 180 mod 360
By tangent_chord_angle_reverse_v3 on C, A, M, S we get angle(A, M, C) == angle(A, C, S) + 180 mod 360
By reverse_direction on C, P we get 180 == direction(C, P) - direction(P, C) mod 360
By tangent_chord_angle_reverse_v3 on C, A, K, S we get angle(A, K, C) == angle(A, C, S) + 180 mod 360
By reverse_direction on K, M we get 180 == direction(K, M) - direction(M, K) mod 360
By tangent_chord_angle_reverse_v3 on C, L, M, S we get angle(L, M, C) == angle(L, C, S) + 180 mod 360
By reverse_direction on M, A we get 180 == direction(M, A) - direction(A, M) mod 360
By tangent_chord_angle_reverse_v0 on C, B, M, S we get angle(B, C, S) == angle(B, M, C) mod 360
By reverse_direction on A, L we get 180 == direction(A, L) - direction(L, A) mod 360
By reverse_direction on M, K we get 180 == direction(M, K) - direction(K, M) mod 360
By tangent_chord_angle_reverse_v0 on C, K, M, S we get angle(K, C, S) == angle(K, M, C) mod 360
By reverse_direction on A, C we get 180 == direction(A, C) - direction(C, A) mod 360
By reverse_direction on C, B we get 180 == direction(C, B) - direction(B, C) mod 360
By reverse_direction on B, M we get 180 == direction(B, M) - direction(M, B) mod 360
By reverse_direction on A, M we get 180 == direction(A, M) - direction(M, A) mod 360
By reverse_direction on L, C we get 180 == direction(L, C) - direction(C, L) mod 360
By reverse_direction on B, K we get 180 == direction(B, K) - direction(K, B) mod 360
By reverse_direction on K, L we get 180 == direction(K, L) - direction(L, K) mod 360
By reverse_direction on B, C we get 180 == direction(B, C) - direction(C, B) mod 360
By reverse_direction on B, A we get 180 == direction(B, A) - direction(A, B) mod 360
By reverse_direction on M, C we get 180 == direction(M, C) - direction(C, M) mod 360
By reverse_direction on C, L we get 180 == direction(C, L) - direction(L, C) mod 360
By collinear_definition on C, M, P we get M in Line(C, P), P in Line(C, M), Line(C, M) == Line(C, P), 0 == 2 * angle(M, C, P) mod 360
By reverse_direction on A, K we get 180 == direction(A, K) - direction(K, A) mod 360
By reverse_direction on C, A we get 180 == direction(C, A) - direction(A, C) mod 360
By same_angle_v2 on P, K, A, C we get angle(K, P, C) == angle(A, P, C) + 180 mod 360
By same_angle_v2 on P, M, C, K we get angle(M, P, K) == angle(C, P, K) + 180 mod 360
By same_angle_v2 on P, C, M, A we get angle(C, P, A) == angle(M, P, A) + 180 mod 360
By same_angle_v2 on P, B, L, S we get angle(B, P, S) == angle(L, P, S) + 180 mod 360
By same_angle_v2 on B, S, A, P we get angle(S, B, P) == angle(A, B, P) + 180 mod 360
By same_angle_v2 on P, C, M, L we get angle(C, P, L) == angle(M, P, L) + 180 mod 360
By same_angle_v3 on P, A, K, S we get angle(A, P, S) == angle(K, P, S) + 180 mod 360
By same_angle_v3 on P, B, L, C we get angle(B, P, C) == angle(L, P, C) + 180 mod 360
By same_angle_v1 on A, K, P, S we get angle(K, A, S) == angle(P, A, S) mod 360
By same_angle_v3 on P, M, C, B we get angle(M, P, B) == angle(C, P, B) + 180 mod 360
By same_angle_v1 on B, L, P, S we get angle(L, B, S) == angle(P, B, S) mod 360
By same_angle_v0 on A, B, S, P we get angle(B, A, P) == angle(S, A, P) mod 360
By collinear_definition on B, L, P we get L in Line(B, P), P in Line(B, L), Line(B, L) == Line(B, P), 0 == 2 * angle(L, B, P) mod 360
By collinear_definition on M, C, P we get C in Line(M, P), P in Line(C, M), Line(C, M) == Line(M, P), 0 == 2 * angle(C, M, P) mod 360
By power_of_a_point_on_circle on line_circle_tangent_point(Line(C, S), Circle(A, B, C)), Circle(A, B, C) we get 0 == power_of_a_point(line_circle_tangent_point(Line(C, S), Circle(A, B, C)), Circle(A, B, C))
By collinear_definition on K, A, P we get A in Line(K, P), P in Line(A, K), Line(A, K) == Line(K, P), 0 == 2 * angle(A, K, P) mod 360
By collinear_definition on P, M, C we get M in Line(C, P), C in Line(M, P), Line(C, P) == Line(M, P), 0 == 2 * angle(M, P, C) mod 360
By collinear_definition on L, P, B we get P in Line(B, L), B in Line(L, P), Line(B, L) == Line(L, P), 0 == 2 * angle(P, L, B) mod 360
By collinear_definition on M, P, C we get P in Line(C, M), C in Line(M, P), Line(C, M) == Line(M, P), 0 == 2 * angle(P, M, C) mod 360
By collinear_definition on P, C, M we get C in Line(M, P), M in Line(C, P), Line(C, P) == Line(M, P), 0 == 2 * angle(C, P, M) mod 360
By collinear_definition on A, B, S we get B in Line(A, S), S in Line(A, B), Line(A, B) == Line(A, S), 0 == 2 * angle(B, A, S) mod 360
By collinear_definition on A, P, K we get P in Line(A, K), K in Line(A, P), Line(A, K) == Line(A, P), 0 == 2 * angle(P, A, K) mod 360
By collinear_definition on B, S, A we get S in Line(A, B), A in Line(B, S), Line(A, B) == Line(B, S), 0 == 2 * angle(S, B, A) mod 360
By collinear_definition on B, P, L we get P in Line(B, L), L in Line(B, P), Line(B, L) == Line(B, P), 0 == 2 * angle(P, B, L) mod 360
By reverse_direction on C, S we get 180 == direction(C, S) - direction(S, C) mod 360
By collinear_definition on A, K, P we get K in Line(A, P), P in Line(A, K), Line(A, K) == Line(A, P), 0 == 2 * angle(K, A, P) mod 360
By collinear_definition on L, B, P we get B in Line(L, P), P in Line(B, L), Line(B, L) == Line(L, P), 0 == 2 * angle(B, L, P) mod 360
By collinear_definition on K, P, A we get P in Line(A, K), A in Line(K, P), Line(A, K) == Line(K, P), 0 == 2 * angle(P, K, A) mod 360
By collinear_definition on A, S, B we get S in Line(A, B), B in Line(A, S), Line(A, B) == Line(A, S), 0 == 2 * angle(S, A, B) mod 360
By collinear_definition on B, A, S we get A in Line(B, S), S in Line(A, B), Line(A, B) == Line(B, S), 0 == 2 * angle(A, B, S) mod 360
By reverse_direction on P, S we get 180 == direction(P, S) - direction(S, P) mod 360
By same_angle_v2 on P, A, K, B we get angle(A, P, B) == angle(K, P, B) + 180 mod 360
By same_angle_v3 on P, K, A, L we get angle(K, P, L) == angle(A, P, L) + 180 mod 360
By same_angle_v2 on P, A, K, M we get angle(A, P, M) == angle(K, P, M) + 180 mod 360
By same_angle_v2 on P, L, B, A we get angle(L, P, A) == angle(B, P, A) + 180 mod 360
By same_angle_v3 on P, B, L, K we get angle(B, P, K) == angle(L, P, K) + 180 mod 360
By same_angle_v1 on S, A, B, P we get angle(A, S, P) == angle(B, S, P) mod 360
By same_angle_v1 on S, B, A, C we get angle(A, S, C) == angle(B, S, C) mod 360
By same_angle_v3 on P, L, B, M we get angle(L, P, M) == angle(B, P, M) + 180 mod 360
By collinear_definition on S, B, A we get B in Line(A, S), A in Line(B, S), Line(A, S) == Line(B, S), 0 == 2 * angle(B, S, A) mod 360
By collinear_definition on P, L, B we get L in Line(B, P), B in Line(L, P), Line(B, P) == Line(L, P), 0 == 2 * angle(L, P, B) mod 360
By collinear_definition on S, A, B we get A in Line(B, S), B in Line(A, S), Line(A, S) == Line(B, S), 0 == 2 * angle(A, S, B) mod 360
By collinear_definition on P, K, A we get K in Line(A, P), A in Line(K, P), Line(A, P) == Line(K, P), 0 == 2 * angle(K, P, A) mod 360
By aa_anti_similarity on S, C, P, S, P, C we get anti_similar_triangles(C, P, S, P, C, S)
By collinear_definition on P, A, K we get A in Line(K, P), K in Line(A, P), Line(A, P) == Line(K, P), 0 == 2 * angle(A, P, K) mod 360
By aa_anti_similarity on S, P, C, S, C, P we get anti_similar_triangles(C, P, S, P, C, S)
By collinear_definition on P, B, L we get B in Line(L, P), L in Line(B, P), Line(B, P) == Line(L, P), 0 == 2 * angle(B, P, L) mod 360
By power_of_a_point_tangent on S, C, Circle(A, B, C) we get 2 * log(distance(C, S)) == log(power_of_a_point(S, Circle(A, B, C)))
By power_of_a_point_definition on P, L, B, Circle(A, B, C) we get log(distance(L, P)) + log(distance(B, P)) == log(power_of_a_point(P, Circle(A, B, C)))
By power_of_a_point_definition on P, K, A, Circle(A, B, C) we get log(distance(K, P)) + log(distance(A, P)) == log(power_of_a_point(P, Circle(A, B, C)))
By power_of_a_point_definition on S, B, A, Circle(A, B, C) we get log(distance(B, S)) + log(distance(A, S)) == log(power_of_a_point(S, Circle(A, B, C)))
By power_of_a_point_definition on P, C, M, Circle(A, B, C) we get log(distance(C, P)) + log(distance(M, P)) == log(power_of_a_point(P, Circle(A, B, C)))
By concurrent_sufficient_conditions on Line(C, M), Line(A, M), Line(L, M) we get concurrent(Line(A, M), Line(C, M), Line(L, M))
By concurrent_sufficient_conditions on Line(A, K), Line(A, L), Line(A, C) we get concurrent(Line(A, C), Line(A, K), Line(A, L))
By concurrent_sufficient_conditions on Line(C, L), Line(L, M), Line(K, L) we get concurrent(Line(C, L), Line(K, L), Line(L, M))
By concurrent_sufficient_conditions on Line(A, C), Line(B, C), Line(C, M) we get concurrent(Line(A, C), Line(B, C), Line(C, M))
By concurrent_sufficient_conditions on Line(C, M), Line(B, M), Line(K, M) we get concurrent(Line(B, M), Line(C, M), Line(K, M))
By concurrent_sufficient_conditions on Line(C, S), Line(A, C), Line(C, L) we get concurrent(Line(A, C), Line(C, L), Line(C, S))
By concurrent_sufficient_conditions on Line(A, K), Line(P, S), Line(B, L) we get concurrent(Line(A, K), Line(B, L), Line(P, S))
By concurrent_sufficient_conditions on Line(L, M), Line(A, M), Line(C, M) we get concurrent(Line(A, M), Line(C, M), Line(L, M))
By concurrent_sufficient_conditions on Line(A, L), Line(A, C), Line(A, M) we get concurrent(Line(A, C), Line(A, L), Line(A, M))
By concurrent_sufficient_conditions on Line(P, S), Line(A, K), Line(C, M) we get concurrent(Line(A, K), Line(C, M), Line(P, S))
By concurrent_sufficient_conditions on Line(K, M), Line(C, M), Line(A, M) we get concurrent(Line(A, M), Line(C, M), Line(K, M))
By concurrent_sufficient_conditions on Line(B, M), Line(C, M), Line(A, M) we get concurrent(Line(A, M), Line(B, M), Line(C, M))
By concurrent_sufficient_conditions on Line(L, M), Line(B, L), Line(K, L) we get concurrent(Line(B, L), Line(K, L), Line(L, M))
By concurrent_sufficient_conditions on Line(C, M), Line(A, C), Line(C, K) we get concurrent(Line(A, C), Line(C, K), Line(C, M))
By concurrent_sufficient_conditions on Line(B, K), Line(K, L), Line(C, K) we get concurrent(Line(B, K), Line(C, K), Line(K, L))
By concurrent_sufficient_conditions on Line(B, K), Line(K, L), Line(K, M) we get concurrent(Line(B, K), Line(K, L), Line(K, M))
By concurrent_sufficient_conditions on Line(L, M), Line(C, L), Line(B, L) we get concurrent(Line(B, L), Line(C, L), Line(L, M))
By concurrent_sufficient_conditions on Line(C, K), Line(C, L), Line(C, M) we get concurrent(Line(C, K), Line(C, L), Line(C, M))
By concurrent_sufficient_conditions on Line(A, K), Line(K, L), Line(K, M) we get concurrent(Line(A, K), Line(K, L), Line(K, M))
By concurrent_sufficient_conditions on Line(B, K), Line(B, M), Line(A, B) we get concurrent(Line(A, B), Line(B, K), Line(B, M))
By concurrent_sufficient_conditions on Line(K, L), Line(C, K), Line(A, K) we get concurrent(Line(A, K), Line(C, K), Line(K, L))
By concurrent_sufficient_conditions on Line(B, L), Line(P, S), Line(A, K) we get concurrent(Line(A, K), Line(B, L), Line(P, S))
By concurrent_sufficient_conditions on Line(A, L), Line(A, M), Line(A, C) we get concurrent(Line(A, C), Line(A, L), Line(A, M))
By concurrent_sufficient_conditions on Line(A, C), Line(A, B), Line(A, K) we get concurrent(Line(A, B), Line(A, C), Line(A, K))
By concurrent_sufficient_conditions on Line(B, C), Line(C, S), Line(C, L) we get concurrent(Line(B, C), Line(C, L), Line(C, S))
By concurrent_sufficient_conditions on Line(B, L), Line(L, M), Line(A, L) we get concurrent(Line(A, L), Line(B, L), Line(L, M))
By concurrent_sufficient_conditions on Line(B, L), Line(P, S), Line(C, M) we get concurrent(Line(B, L), Line(C, M), Line(P, S))
By concurrent_sufficient_conditions on Line(B, C), Line(C, K), Line(A, C) we get concurrent(Line(A, C), Line(B, C), Line(C, K))
By concurrent_sufficient_conditions on Line(C, K), Line(B, K), Line(A, K) we get concurrent(Line(A, K), Line(B, K), Line(C, K))
By concurrent_sufficient_conditions on Line(A, M), Line(K, M), Line(B, M) we get concurrent(Line(A, M), Line(B, M), Line(K, M))
By concurrent_sufficient_conditions on Line(B, L), Line(B, M), Line(B, C) we get concurrent(Line(B, C), Line(B, L), Line(B, M))
By concurrent_sufficient_conditions on Line(P, S), Line(A, B), Line(C, S) we get concurrent(Line(A, B), Line(C, S), Line(P, S))
By concurrent_sufficient_conditions on Line(C, L), Line(K, L), Line(A, L) we get concurrent(Line(A, L), Line(C, L), Line(K, L))
By concurrent_sufficient_conditions on Line(C, L), Line(L, M), Line(B, L) we get concurrent(Line(B, L), Line(C, L), Line(L, M))
By concurrent_sufficient_conditions on Line(B, K), Line(A, K), Line(K, M) we get concurrent(Line(A, K), Line(B, K), Line(K, M))
By concurrent_sufficient_conditions on Line(A, K), Line(A, C), Line(A, M) we get concurrent(Line(A, C), Line(A, K), Line(A, M))
By concurrent_sufficient_conditions on Line(A, K), Line(K, M), Line(B, K) we get concurrent(Line(A, K), Line(B, K), Line(K, M))
By concurrent_sufficient_conditions on Line(K, M), Line(C, M), Line(B, M) we get concurrent(Line(B, M), Line(C, M), Line(K, M))
By concurrent_sufficient_conditions on Line(B, C), Line(B, M), Line(B, L) we get concurrent(Line(B, C), Line(B, L), Line(B, M))
By concurrent_sufficient_conditions on Line(C, L), Line(C, S), Line(C, M) we get concurrent(Line(C, L), Line(C, M), Line(C, S))
By concurrent_sufficient_conditions on Line(K, L), Line(C, K), Line(B, K) we get concurrent(Line(B, K), Line(C, K), Line(K, L))
By concurrent_sufficient_conditions on Line(A, L), Line(A, C), Line(A, K) we get concurrent(Line(A, C), Line(A, K), Line(A, L))
By concurrent_sufficient_conditions on Line(A, B), Line(A, C), Line(A, K) we get concurrent(Line(A, B), Line(A, C), Line(A, K))
By concurrent_sufficient_conditions on Line(A, K), Line(A, M), Line(A, C) we get concurrent(Line(A, C), Line(A, K), Line(A, M))
By concurrent_sufficient_conditions on Line(A, C), Line(B, C), Line(C, S) we get concurrent(Line(A, C), Line(B, C), Line(C, S))
By concurrent_sufficient_conditions on Line(A, C), Line(C, L), Line(C, K) we get concurrent(Line(A, C), Line(C, K), Line(C, L))
By concurrent_sufficient_conditions on Line(C, M), Line(B, M), Line(A, M) we get concurrent(Line(A, M), Line(B, M), Line(C, M))
By concurrent_sufficient_conditions on Line(K, L), Line(B, L), Line(L, M) we get concurrent(Line(B, L), Line(K, L), Line(L, M))
By concurrent_sufficient_conditions on Line(B, M), Line(B, K), Line(A, B) we get concurrent(Line(A, B), Line(B, K), Line(B, M))
By concurrent_sufficient_conditions on Line(A, L), Line(A, M), Line(A, K) we get concurrent(Line(A, K), Line(A, L), Line(A, M))
By concurrent_sufficient_conditions on Line(B, K), Line(B, C), Line(B, M) we get concurrent(Line(B, C), Line(B, K), Line(B, M))
By concurrent_sufficient_conditions on Line(B, C), Line(B, K), Line(B, L) we get concurrent(Line(B, C), Line(B, K), Line(B, L))
By concurrent_sufficient_conditions on Line(B, M), Line(A, M), Line(L, M) we get concurrent(Line(A, M), Line(B, M), Line(L, M))
By concurrent_sufficient_conditions on Line(B, C), Line(C, S), Line(C, M) we get concurrent(Line(B, C), Line(C, M), Line(C, S))
By concurrent_sufficient_conditions on Line(B, K), Line(C, K), Line(K, M) we get concurrent(Line(B, K), Line(C, K), Line(K, M))
By concurrent_sufficient_conditions on Line(K, L), Line(A, K), Line(B, K) we get concurrent(Line(A, K), Line(B, K), Line(K, L))
By concurrent_sufficient_conditions on Line(A, M), Line(A, B), Line(A, L) we get concurrent(Line(A, B), Line(A, L), Line(A, M))
By concurrent_sufficient_conditions on Line(A, B), Line(A, L), Line(A, K) we get concurrent(Line(A, B), Line(A, K), Line(A, L))
By concurrent_sufficient_conditions on Line(A, B), Line(B, M), Line(B, C) we get concurrent(Line(A, B), Line(B, C), Line(B, M))
By concurrent_sufficient_conditions on Line(P, S), Line(B, L), Line(A, K) we get concurrent(Line(A, K), Line(B, L), Line(P, S))
By concurrent_sufficient_conditions on Line(A, K), Line(A, L), Line(A, M) we get concurrent(Line(A, K), Line(A, L), Line(A, M))
By concurrent_sufficient_conditions on Line(C, K), Line(C, M), Line(C, S) we get concurrent(Line(C, K), Line(C, M), Line(C, S))
By concurrent_sufficient_conditions on Line(C, M), Line(A, C), Line(C, S) we get concurrent(Line(A, C), Line(C, M), Line(C, S))
By concurrent_sufficient_conditions on Line(B, M), Line(B, L), Line(A, B) we get concurrent(Line(A, B), Line(B, L), Line(B, M))
By concurrent_sufficient_conditions on Line(C, K), Line(B, K), Line(K, M) we get concurrent(Line(B, K), Line(C, K), Line(K, M))
By concurrent_sufficient_conditions on Line(A, K), Line(C, K), Line(K, L) we get concurrent(Line(A, K), Line(C, K), Line(K, L))
By concurrent_sufficient_conditions on Line(C, M), Line(B, M), Line(L, M) we get concurrent(Line(B, M), Line(C, M), Line(L, M))
By concurrent_sufficient_conditions on Line(B, C), Line(C, K), Line(C, S) we get concurrent(Line(B, C), Line(C, K), Line(C, S))
By concurrent_sufficient_conditions on Line(C, K), Line(A, C), Line(C, L) we get concurrent(Line(A, C), Line(C, K), Line(C, L))
By concurrent_sufficient_conditions on Line(B, L), Line(B, C), Line(B, K) we get concurrent(Line(B, C), Line(B, K), Line(B, L))
By concurrent_sufficient_conditions on Line(C, K), Line(C, L), Line(B, C) we get concurrent(Line(B, C), Line(C, K), Line(C, L))
By concurrent_sufficient_conditions on Line(B, M), Line(B, K), Line(B, L) we get concurrent(Line(B, K), Line(B, L), Line(B, M))
By concurrent_sufficient_conditions on Line(A, L), Line(B, L), Line(L, M) we get concurrent(Line(A, L), Line(B, L), Line(L, M))
By concurrent_sufficient_conditions on Line(A, K), Line(A, B), Line(A, C) we get concurrent(Line(A, B), Line(A, C), Line(A, K))
By concurrent_sufficient_conditions on Line(L, M), Line(A, L), Line(C, L) we get concurrent(Line(A, L), Line(C, L), Line(L, M))
By concurrent_sufficient_conditions on Line(K, M), Line(L, M), Line(A, M) we get concurrent(Line(A, M), Line(K, M), Line(L, M))
By concurrent_sufficient_conditions on Line(A, C), Line(A, K), Line(A, L) we get concurrent(Line(A, C), Line(A, K), Line(A, L))
By concurrent_sufficient_conditions on Line(B, L), Line(C, L), Line(A, L) we get concurrent(Line(A, L), Line(B, L), Line(C, L))
By concurrent_sufficient_conditions on Line(C, K), Line(A, K), Line(K, M) we get concurrent(Line(A, K), Line(C, K), Line(K, M))
By concurrent_sufficient_conditions on Line(K, M), Line(C, K), Line(K, L) we get concurrent(Line(C, K), Line(K, L), Line(K, M))
By concurrent_sufficient_conditions on Line(L, M), Line(K, M), Line(B, M) we get concurrent(Line(B, M), Line(K, M), Line(L, M))
By concurrent_sufficient_conditions on Line(A, L), Line(B, L), Line(C, L) we get concurrent(Line(A, L), Line(B, L), Line(C, L))
By concurrent_sufficient_conditions on Line(C, L), Line(C, S), Line(B, C) we get concurrent(Line(B, C), Line(C, L), Line(C, S))
By concurrent_sufficient_conditions on Line(C, L), Line(C, S), Line(C, K) we get concurrent(Line(C, K), Line(C, L), Line(C, S))
By concurrent_sufficient_conditions on Line(A, K), Line(B, K), Line(K, L) we get concurrent(Line(A, K), Line(B, K), Line(K, L))
By concurrent_sufficient_conditions on Line(C, L), Line(K, L), Line(B, L) we get concurrent(Line(B, L), Line(C, L), Line(K, L))
By concurrent_sufficient_conditions on Line(L, M), Line(A, M), Line(K, M) we get concurrent(Line(A, M), Line(K, M), Line(L, M))
By concurrent_sufficient_conditions on Line(A, C), Line(C, K), Line(C, S) we get concurrent(Line(A, C), Line(C, K), Line(C, S))
By concurrent_sufficient_conditions on Line(C, K), Line(B, K), Line(K, L) we get concurrent(Line(B, K), Line(C, K), Line(K, L))
By concurrent_sufficient_conditions on Line(B, L), Line(B, C), Line(B, M) we get concurrent(Line(B, C), Line(B, L), Line(B, M))
By concurrent_sufficient_conditions on Line(A, L), Line(A, B), Line(A, M) we get concurrent(Line(A, B), Line(A, L), Line(A, M))
By concurrent_sufficient_conditions on Line(C, K), Line(K, L), Line(K, M) we get concurrent(Line(C, K), Line(K, L), Line(K, M))
By concurrent_sufficient_conditions on Line(P, S), Line(A, K), Line(B, L) we get concurrent(Line(A, K), Line(B, L), Line(P, S))
By concurrent_sufficient_conditions on Line(A, L), Line(K, L), Line(L, M) we get concurrent(Line(A, L), Line(K, L), Line(L, M))
By concurrent_sufficient_conditions on Line(C, L), Line(B, C), Line(A, C) we get concurrent(Line(A, C), Line(B, C), Line(C, L))
By concurrent_sufficient_conditions on Line(A, K), Line(K, L), Line(B, K) we get concurrent(Line(A, K), Line(B, K), Line(K, L))
By concurrent_sufficient_conditions on Line(B, C), Line(A, C), Line(C, M) we get concurrent(Line(A, C), Line(B, C), Line(C, M))
By concurrent_sufficient_conditions on Line(A, M), Line(A, L), Line(A, C) we get concurrent(Line(A, C), Line(A, L), Line(A, M))
By concurrent_sufficient_conditions on Line(K, M), Line(A, K), Line(K, L) we get concurrent(Line(A, K), Line(K, L), Line(K, M))
By concurrent_sufficient_conditions on Line(C, K), Line(A, C), Line(B, C) we get concurrent(Line(A, C), Line(B, C), Line(C, K))
By concurrent_sufficient_conditions on Line(A, L), Line(L, M), Line(K, L) we get concurrent(Line(A, L), Line(K, L), Line(L, M))
By concurrent_sufficient_conditions on Line(C, M), Line(C, K), Line(B, C) we get concurrent(Line(B, C), Line(C, K), Line(C, M))
By concurrent_sufficient_conditions on Line(L, M), Line(C, M), Line(K, M) we get concurrent(Line(C, M), Line(K, M), Line(L, M))
By concurrent_sufficient_conditions on Line(K, L), Line(A, K), Line(K, M) we get concurrent(Line(A, K), Line(K, L), Line(K, M))
By concurrent_sufficient_conditions on Line(C, L), Line(A, L), Line(L, M) we get concurrent(Line(A, L), Line(C, L), Line(L, M))
By concurrent_sufficient_conditions on Line(L, M), Line(A, M), Line(B, M) we get concurrent(Line(A, M), Line(B, M), Line(L, M))
By concurrent_sufficient_conditions on Line(C, S), Line(C, M), Line(A, C) we get concurrent(Line(A, C), Line(C, M), Line(C, S))
By concurrent_sufficient_conditions on Line(L, M), Line(K, L), Line(C, L) we get concurrent(Line(C, L), Line(K, L), Line(L, M))
By concurrent_sufficient_conditions on Line(C, K), Line(C, S), Line(B, C) we get concurrent(Line(B, C), Line(C, K), Line(C, S))
By concurrent_sufficient_conditions on Line(K, M), Line(B, K), Line(K, L) we get concurrent(Line(B, K), Line(K, L), Line(K, M))
By concurrent_sufficient_conditions on Line(C, M), Line(A, M), Line(K, M) we get concurrent(Line(A, M), Line(C, M), Line(K, M))
By concurrent_sufficient_conditions on Line(A, M), Line(C, M), Line(K, M) we get concurrent(Line(A, M), Line(C, M), Line(K, M))
By concurrent_sufficient_conditions on Line(A, M), Line(B, M), Line(K, M) we get concurrent(Line(A, M), Line(B, M), Line(K, M))
By concurrent_sufficient_conditions on Line(A, M), Line(L, M), Line(K, M) we get concurrent(Line(A, M), Line(K, M), Line(L, M))
By concurrent_sufficient_conditions on Line(A, K), Line(A, L), Line(A, B) we get concurrent(Line(A, B), Line(A, K), Line(A, L))
By concurrent_sufficient_conditions on Line(K, L), Line(L, M), Line(A, L) we get concurrent(Line(A, L), Line(K, L), Line(L, M))
By concurrent_sufficient_conditions on Line(B, L), Line(A, B), Line(B, C) we get concurrent(Line(A, B), Line(B, C), Line(B, L))
By concurrent_sufficient_conditions on Line(A, K), Line(A, C), Line(A, B) we get concurrent(Line(A, B), Line(A, C), Line(A, K))
By concurrent_sufficient_conditions on Line(K, L), Line(C, K), Line(K, M) we get concurrent(Line(C, K), Line(K, L), Line(K, M))
By concurrent_sufficient_conditions on Line(C, K), Line(A, K), Line(K, L) we get concurrent(Line(A, K), Line(C, K), Line(K, L))
By concurrent_sufficient_conditions on Line(K, M), Line(B, K), Line(C, K) we get concurrent(Line(B, K), Line(C, K), Line(K, M))
By concurrent_sufficient_conditions on Line(K, M), Line(L, M), Line(B, M) we get concurrent(Line(B, M), Line(K, M), Line(L, M))
By concurrent_sufficient_conditions on Line(A, M), Line(A, K), Line(A, B) we get concurrent(Line(A, B), Line(A, K), Line(A, M))
By concurrent_sufficient_conditions on Line(B, C), Line(C, S), Line(C, K) we get concurrent(Line(B, C), Line(C, K), Line(C, S))
By concurrent_sufficient_conditions on Line(A, C), Line(C, L), Line(B, C) we get concurrent(Line(A, C), Line(B, C), Line(C, L))
By concurrent_sufficient_conditions on Line(C, M), Line(L, M), Line(A, M) we get concurrent(Line(A, M), Line(C, M), Line(L, M))
By concurrent_sufficient_conditions on Line(A, C), Line(B, C), Line(C, K) we get concurrent(Line(A, C), Line(B, C), Line(C, K))
By concurrent_sufficient_conditions on Line(A, B), Line(A, C), Line(A, L) we get concurrent(Line(A, B), Line(A, C), Line(A, L))
By concurrent_sufficient_conditions on Line(C, L), Line(A, L), Line(K, L) we get concurrent(Line(A, L), Line(C, L), Line(K, L))
By concurrent_sufficient_conditions on Line(A, C), Line(A, K), Line(A, M) we get concurrent(Line(A, C), Line(A, K), Line(A, M))
By concurrent_sufficient_conditions on Line(B, L), Line(C, L), Line(K, L) we get concurrent(Line(B, L), Line(C, L), Line(K, L))
By concurrent_sufficient_conditions on Line(C, L), Line(A, C), Line(B, C) we get concurrent(Line(A, C), Line(B, C), Line(C, L))
By concurrent_sufficient_conditions on Line(B, K), Line(K, M), Line(K, L) we get concurrent(Line(B, K), Line(K, L), Line(K, M))
By concurrent_sufficient_conditions on Line(P, S), Line(C, S), Line(A, B) we get concurrent(Line(A, B), Line(C, S), Line(P, S))
By concurrent_sufficient_conditions on Line(C, S), Line(A, C), Line(C, M) we get concurrent(Line(A, C), Line(C, M), Line(C, S))
By concurrent_sufficient_conditions on Line(C, S), Line(A, C), Line(B, C) we get concurrent(Line(A, C), Line(B, C), Line(C, S))
By concurrent_sufficient_conditions on Line(C, S), Line(C, L), Line(C, M) we get concurrent(Line(C, L), Line(C, M), Line(C, S))
By concurrent_sufficient_conditions on Line(A, K), Line(A, B), Line(A, M) we get concurrent(Line(A, B), Line(A, K), Line(A, M))
By concurrent_sufficient_conditions on Line(C, M), Line(B, C), Line(C, S) we get concurrent(Line(B, C), Line(C, M), Line(C, S))
By concurrent_sufficient_conditions on Line(C, L), Line(B, C), Line(C, K) we get concurrent(Line(B, C), Line(C, K), Line(C, L))
By concurrent_sufficient_conditions on Line(C, M), Line(P, S), Line(B, L) we get concurrent(Line(B, L), Line(C, M), Line(P, S))
By concurrent_sufficient_conditions on Line(A, K), Line(A, M), Line(A, B) we get concurrent(Line(A, B), Line(A, K), Line(A, M))
By concurrent_sufficient_conditions on Line(B, C), Line(A, C), Line(C, S) we get concurrent(Line(A, C), Line(B, C), Line(C, S))
By concurrent_sufficient_conditions on Line(K, M), Line(B, M), Line(C, M) we get concurrent(Line(B, M), Line(C, M), Line(K, M))
By concurrent_sufficient_conditions on Line(A, L), Line(A, K), Line(A, B) we get concurrent(Line(A, B), Line(A, K), Line(A, L))
By concurrent_sufficient_conditions on Line(K, L), Line(A, L), Line(B, L) we get concurrent(Line(A, L), Line(B, L), Line(K, L))
By concurrent_sufficient_conditions on Line(C, M), Line(C, L), Line(C, S) we get concurrent(Line(C, L), Line(C, M), Line(C, S))
By concurrent_sufficient_conditions on Line(C, S), Line(C, L), Line(B, C) we get concurrent(Line(B, C), Line(C, L), Line(C, S))
By concurrent_sufficient_conditions on Line(A, K), Line(A, B), Line(A, L) we get concurrent(Line(A, B), Line(A, K), Line(A, L))
By concurrent_sufficient_conditions on Line(B, K), Line(B, M), Line(B, L) we get concurrent(Line(B, K), Line(B, L), Line(B, M))
By concurrent_sufficient_conditions on Line(A, C), Line(A, M), Line(A, L) we get concurrent(Line(A, C), Line(A, L), Line(A, M))
By concurrent_sufficient_conditions on Line(C, M), Line(C, L), Line(A, C) we get concurrent(Line(A, C), Line(C, L), Line(C, M))
By concurrent_sufficient_conditions on Line(L, M), Line(A, L), Line(B, L) we get concurrent(Line(A, L), Line(B, L), Line(L, M))
By concurrent_sufficient_conditions on Line(C, L), Line(C, S), Line(A, C) we get concurrent(Line(A, C), Line(C, L), Line(C, S))
By concurrent_sufficient_conditions on Line(B, K), Line(B, L), Line(B, M) we get concurrent(Line(B, K), Line(B, L), Line(B, M))
By concurrent_sufficient_conditions on Line(K, L), Line(L, M), Line(B, L) we get concurrent(Line(B, L), Line(K, L), Line(L, M))
By concurrent_sufficient_conditions on Line(L, M), Line(C, M), Line(A, M) we get concurrent(Line(A, M), Line(C, M), Line(L, M))
By concurrent_sufficient_conditions on Line(A, M), Line(A, L), Line(A, K) we get concurrent(Line(A, K), Line(A, L), Line(A, M))
By concurrent_sufficient_conditions on Line(K, L), Line(A, L), Line(C, L) we get concurrent(Line(A, L), Line(C, L), Line(K, L))
By concurrent_sufficient_conditions on Line(A, K), Line(B, K), Line(C, K) we get concurrent(Line(A, K), Line(B, K), Line(C, K))
By concurrent_sufficient_conditions on Line(A, C), Line(A, L), Line(A, K) we get concurrent(Line(A, C), Line(A, K), Line(A, L))
By concurrent_sufficient_conditions on Line(C, S), Line(C, M), Line(B, C) we get concurrent(Line(B, C), Line(C, M), Line(C, S))
By concurrent_sufficient_conditions on Line(K, M), Line(A, M), Line(B, M) we get concurrent(Line(A, M), Line(B, M), Line(K, M))
By concurrent_sufficient_conditions on Line(C, K), Line(A, C), Line(C, M) we get concurrent(Line(A, C), Line(C, K), Line(C, M))
By concurrent_sufficient_conditions on Line(B, C), Line(C, S), Line(A, C) we get concurrent(Line(A, C), Line(B, C), Line(C, S))
By concurrent_sufficient_conditions on Line(A, M), Line(A, C), Line(A, K) we get concurrent(Line(A, C), Line(A, K), Line(A, M))
By concurrent_sufficient_conditions on Line(B, M), Line(L, M), Line(C, M) we get concurrent(Line(B, M), Line(C, M), Line(L, M))
By concurrent_sufficient_conditions on Line(A, M), Line(B, M), Line(L, M) we get concurrent(Line(A, M), Line(B, M), Line(L, M))
By concurrent_sufficient_conditions on Line(C, M), Line(A, K), Line(P, S) we get concurrent(Line(A, K), Line(C, M), Line(P, S))
By concurrent_sufficient_conditions on Line(K, M), Line(C, K), Line(B, K) we get concurrent(Line(B, K), Line(C, K), Line(K, M))
By concurrent_sufficient_conditions on Line(B, M), Line(C, M), Line(L, M) we get concurrent(Line(B, M), Line(C, M), Line(L, M))
By concurrent_sufficient_conditions on Line(C, L), Line(B, C), Line(C, S) we get concurrent(Line(B, C), Line(C, L), Line(C, S))
By concurrent_sufficient_conditions on Line(B, C), Line(C, L), Line(A, C) we get concurrent(Line(A, C), Line(B, C), Line(C, L))
By concurrent_sufficient_conditions on Line(B, K), Line(B, M), Line(B, C) we get concurrent(Line(B, C), Line(B, K), Line(B, M))
By concurrent_sufficient_conditions on Line(A, K), Line(K, L), Line(C, K) we get concurrent(Line(A, K), Line(C, K), Line(K, L))
By concurrent_sufficient_conditions on Line(A, B), Line(B, L), Line(B, M) we get concurrent(Line(A, B), Line(B, L), Line(B, M))
By concurrent_sufficient_conditions on Line(A, K), Line(C, M), Line(P, S) we get concurrent(Line(A, K), Line(C, M), Line(P, S))
By concurrent_sufficient_conditions on Line(P, S), Line(B, L), Line(C, M) we get concurrent(Line(B, L), Line(C, M), Line(P, S))
By concurrent_sufficient_conditions on Line(K, L), Line(A, K), Line(C, K) we get concurrent(Line(A, K), Line(C, K), Line(K, L))
By concurrent_sufficient_conditions on Line(K, M), Line(A, M), Line(C, M) we get concurrent(Line(A, M), Line(C, M), Line(K, M))
By concurrent_sufficient_conditions on Line(C, M), Line(B, C), Line(C, K) we get concurrent(Line(B, C), Line(C, K), Line(C, M))
By concurrent_sufficient_conditions on Line(K, M), Line(L, M), Line(C, M) we get concurrent(Line(C, M), Line(K, M), Line(L, M))
By concurrent_sufficient_conditions on Line(B, K), Line(A, B), Line(B, C) we get concurrent(Line(A, B), Line(B, C), Line(B, K))
By concurrent_sufficient_conditions on Line(B, C), Line(C, M), Line(A, C) we get concurrent(Line(A, C), Line(B, C), Line(C, M))
By concurrent_sufficient_conditions on Line(K, L), Line(B, K), Line(K, M) we get concurrent(Line(B, K), Line(K, L), Line(K, M))
By concurrent_sufficient_conditions on Line(K, M), Line(C, K), Line(A, K) we get concurrent(Line(A, K), Line(C, K), Line(K, M))
By concurrent_sufficient_conditions on Line(B, L), Line(C, L), Line(L, M) we get concurrent(Line(B, L), Line(C, L), Line(L, M))
By concurrent_sufficient_conditions on Line(B, L), Line(B, K), Line(A, B) we get concurrent(Line(A, B), Line(B, K), Line(B, L))
By concurrent_sufficient_conditions on Line(A, C), Line(C, M), Line(C, L) we get concurrent(Line(A, C), Line(C, L), Line(C, M))
By concurrent_sufficient_conditions on Line(A, B), Line(B, L), Line(B, K) we get concurrent(Line(A, B), Line(B, K), Line(B, L))
By concurrent_sufficient_conditions on Line(C, M), Line(C, K), Line(C, S) we get concurrent(Line(C, K), Line(C, M), Line(C, S))
By concurrent_sufficient_conditions on Line(B, L), Line(B, K), Line(B, C) we get concurrent(Line(B, C), Line(B, K), Line(B, L))
By concurrent_sufficient_conditions on Line(K, M), Line(B, M), Line(L, M) we get concurrent(Line(B, M), Line(K, M), Line(L, M))
By concurrent_sufficient_conditions on Line(B, C), Line(A, B), Line(B, K) we get concurrent(Line(A, B), Line(B, C), Line(B, K))
By concurrent_sufficient_conditions on Line(A, C), Line(C, M), Line(B, C) we get concurrent(Line(A, C), Line(B, C), Line(C, M))
By concurrent_sufficient_conditions on Line(A, B), Line(B, C), Line(B, K) we get concurrent(Line(A, B), Line(B, C), Line(B, K))
By concurrent_sufficient_conditions on Line(C, S), Line(C, L), Line(A, C) we get concurrent(Line(A, C), Line(C, L), Line(C, S))
By concurrent_sufficient_conditions on Line(A, K), Line(B, L), Line(P, S) we get concurrent(Line(A, K), Line(B, L), Line(P, S))
By concurrent_sufficient_conditions on Line(B, L), Line(A, L), Line(C, L) we get concurrent(Line(A, L), Line(B, L), Line(C, L))
By concurrent_sufficient_conditions on Line(B, C), Line(B, L), Line(A, B) we get concurrent(Line(A, B), Line(B, C), Line(B, L))
By concurrent_sufficient_conditions on Line(C, K), Line(C, L), Line(A, C) we get concurrent(Line(A, C), Line(C, K), Line(C, L))
By concurrent_sufficient_conditions on Line(C, L), Line(L, M), Line(A, L) we get concurrent(Line(A, L), Line(C, L), Line(L, M))
By concurrent_sufficient_conditions on Line(C, L), Line(C, K), Line(C, M) we get concurrent(Line(C, K), Line(C, L), Line(C, M))
By concurrent_sufficient_conditions on Line(C, M), Line(C, K), Line(C, L) we get concurrent(Line(C, K), Line(C, L), Line(C, M))
By concurrent_sufficient_conditions on Line(C, M), Line(L, M), Line(B, M) we get concurrent(Line(B, M), Line(C, M), Line(L, M))
By concurrent_sufficient_conditions on Line(A, B), Line(A, K), Line(A, C) we get concurrent(Line(A, B), Line(A, C), Line(A, K))
By concurrent_sufficient_conditions on Line(B, C), Line(C, L), Line(C, K) we get concurrent(Line(B, C), Line(C, K), Line(C, L))
By concurrent_sufficient_conditions on Line(A, M), Line(K, M), Line(C, M) we get concurrent(Line(A, M), Line(C, M), Line(K, M))
By concurrent_sufficient_conditions on Line(B, C), Line(B, L), Line(B, K) we get concurrent(Line(B, C), Line(B, K), Line(B, L))
By concurrent_sufficient_conditions on Line(A, C), Line(A, M), Line(A, K) we get concurrent(Line(A, C), Line(A, K), Line(A, M))
By concurrent_sufficient_conditions on Line(A, K), Line(A, C), Line(A, L) we get concurrent(Line(A, C), Line(A, K), Line(A, L))
By concurrent_sufficient_conditions on Line(A, M), Line(K, M), Line(L, M) we get concurrent(Line(A, M), Line(K, M), Line(L, M))
By concurrent_sufficient_conditions on Line(C, L), Line(B, L), Line(A, L) we get concurrent(Line(A, L), Line(B, L), Line(C, L))
By concurrent_sufficient_conditions on Line(A, L), Line(C, L), Line(K, L) we get concurrent(Line(A, L), Line(C, L), Line(K, L))
By concurrent_sufficient_conditions on Line(C, M), Line(C, S), Line(C, K) we get concurrent(Line(C, K), Line(C, M), Line(C, S))
By concurrent_sufficient_conditions on Line(B, C), Line(A, C), Line(C, L) we get concurrent(Line(A, C), Line(B, C), Line(C, L))
By concurrent_sufficient_conditions on Line(C, M), Line(K, M), Line(B, M) we get concurrent(Line(B, M), Line(C, M), Line(K, M))
By concurrent_sufficient_conditions on Line(B, M), Line(K, M), Line(A, M) we get concurrent(Line(A, M), Line(B, M), Line(K, M))
By concurrent_sufficient_conditions on Line(C, M), Line(K, M), Line(A, M) we get concurrent(Line(A, M), Line(C, M), Line(K, M))
By concurrent_sufficient_conditions on Line(A, C), Line(A, B), Line(A, L) we get concurrent(Line(A, B), Line(A, C), Line(A, L))
By concurrent_sufficient_conditions on Line(C, S), Line(B, C), Line(C, L) we get concurrent(Line(B, C), Line(C, L), Line(C, S))
By concurrent_sufficient_conditions on Line(B, M), Line(K, M), Line(L, M) we get concurrent(Line(B, M), Line(K, M), Line(L, M))
By concurrent_sufficient_conditions on Line(B, M), Line(A, B), Line(B, K) we get concurrent(Line(A, B), Line(B, K), Line(B, M))
By concurrent_sufficient_conditions on Line(K, M), Line(A, M), Line(L, M) we get concurrent(Line(A, M), Line(K, M), Line(L, M))
By concurrent_sufficient_conditions on Line(C, L), Line(C, M), Line(C, S) we get concurrent(Line(C, L), Line(C, M), Line(C, S))
By concurrent_sufficient_conditions on Line(B, K), Line(A, B), Line(B, L) we get concurrent(Line(A, B), Line(B, K), Line(B, L))
By concurrent_sufficient_conditions on Line(C, M), Line(P, S), Line(A, K) we get concurrent(Line(A, K), Line(C, M), Line(P, S))
By concurrent_sufficient_conditions on Line(C, M), Line(C, K), Line(A, C) we get concurrent(Line(A, C), Line(C, K), Line(C, M))
By concurrent_sufficient_conditions on Line(L, M), Line(B, M), Line(C, M) we get concurrent(Line(B, M), Line(C, M), Line(L, M))
By concurrent_sufficient_conditions on Line(C, K), Line(C, S), Line(C, M) we get concurrent(Line(C, K), Line(C, M), Line(C, S))
By concurrent_sufficient_conditions on Line(B, L), Line(B, M), Line(B, K) we get concurrent(Line(B, K), Line(B, L), Line(B, M))
By concurrent_sufficient_conditions on Line(B, C), Line(C, K), Line(C, L) we get concurrent(Line(B, C), Line(C, K), Line(C, L))
By concurrent_sufficient_conditions on Line(A, M), Line(A, K), Line(A, L) we get concurrent(Line(A, K), Line(A, L), Line(A, M))
By concurrent_sufficient_conditions on Line(B, K), Line(A, K), Line(K, L) we get concurrent(Line(A, K), Line(B, K), Line(K, L))
By concurrent_sufficient_conditions on Line(B, L), Line(K, L), Line(L, M) we get concurrent(Line(B, L), Line(K, L), Line(L, M))
By concurrent_sufficient_conditions on Line(A, B), Line(A, C), Line(A, M) we get concurrent(Line(A, B), Line(A, C), Line(A, M))
By concurrent_sufficient_conditions on Line(B, K), Line(K, M), Line(C, K) we get concurrent(Line(B, K), Line(C, K), Line(K, M))
By concurrent_sufficient_conditions on Line(B, K), Line(K, L), Line(A, K) we get concurrent(Line(A, K), Line(B, K), Line(K, L))
By concurrent_sufficient_conditions on Line(K, M), Line(B, K), Line(A, K) we get concurrent(Line(A, K), Line(B, K), Line(K, M))
By concurrent_sufficient_conditions on Line(K, L), Line(B, L), Line(C, L) we get concurrent(Line(B, L), Line(C, L), Line(K, L))
By concurrent_sufficient_conditions on Line(A, M), Line(A, B), Line(A, K) we get concurrent(Line(A, B), Line(A, K), Line(A, M))
By concurrent_sufficient_conditions on Line(B, L), Line(K, L), Line(C, L) we get concurrent(Line(B, L), Line(C, L), Line(K, L))
By concurrent_sufficient_conditions on Line(A, C), Line(C, K), Line(C, M) we get concurrent(Line(A, C), Line(C, K), Line(C, M))
By concurrent_sufficient_conditions on Line(B, L), Line(C, M), Line(P, S) we get concurrent(Line(B, L), Line(C, M), Line(P, S))
By concurrent_sufficient_conditions on Line(L, M), Line(K, M), Line(A, M) we get concurrent(Line(A, M), Line(K, M), Line(L, M))
By concurrent_sufficient_conditions on Line(A, C), Line(B, C), Line(C, L) we get concurrent(Line(A, C), Line(B, C), Line(C, L))
By concurrent_sufficient_conditions on Line(C, K), Line(K, M), Line(A, K) we get concurrent(Line(A, K), Line(C, K), Line(K, M))
By concurrent_sufficient_conditions on Line(A, B), Line(B, K), Line(B, M) we get concurrent(Line(A, B), Line(B, K), Line(B, M))
By concurrent_sufficient_conditions on Line(C, S), Line(A, C), Line(C, K) we get concurrent(Line(A, C), Line(C, K), Line(C, S))
By concurrent_sufficient_conditions on Line(C, S), Line(B, C), Line(C, M) we get concurrent(Line(B, C), Line(C, M), Line(C, S))
By concurrent_sufficient_conditions on Line(K, L), Line(B, K), Line(A, K) we get concurrent(Line(A, K), Line(B, K), Line(K, L))
By concurrent_sufficient_conditions on Line(A, C), Line(C, S), Line(C, K) we get concurrent(Line(A, C), Line(C, K), Line(C, S))
By concurrent_sufficient_conditions on Line(A, K), Line(A, M), Line(A, L) we get concurrent(Line(A, K), Line(A, L), Line(A, M))
By concurrent_sufficient_conditions on Line(L, M), Line(K, L), Line(B, L) we get concurrent(Line(B, L), Line(K, L), Line(L, M))
By concurrent_sufficient_conditions on Line(L, M), Line(B, M), Line(A, M) we get concurrent(Line(A, M), Line(B, M), Line(L, M))
By concurrent_sufficient_conditions on Line(A, B), Line(A, M), Line(A, K) we get concurrent(Line(A, B), Line(A, K), Line(A, M))
By concurrent_sufficient_conditions on Line(A, C), Line(C, K), Line(C, L) we get concurrent(Line(A, C), Line(C, K), Line(C, L))
By concurrent_sufficient_conditions on Line(C, L), Line(C, K), Line(C, S) we get concurrent(Line(C, K), Line(C, L), Line(C, S))
By concurrent_sufficient_conditions on Line(A, B), Line(B, L), Line(B, C) we get concurrent(Line(A, B), Line(B, C), Line(B, L))
By concurrent_sufficient_conditions on Line(C, K), Line(A, K), Line(B, K) we get concurrent(Line(A, K), Line(B, K), Line(C, K))
By concurrent_sufficient_conditions on Line(A, L), Line(A, K), Line(A, C) we get concurrent(Line(A, C), Line(A, K), Line(A, L))
By concurrent_sufficient_conditions on Line(K, L), Line(A, L), Line(L, M) we get concurrent(Line(A, L), Line(K, L), Line(L, M))
By concurrent_sufficient_conditions on Line(C, S), Line(P, S), Line(A, B) we get concurrent(Line(A, B), Line(C, S), Line(P, S))
By concurrent_sufficient_conditions on Line(L, M), Line(K, M), Line(C, M) we get concurrent(Line(C, M), Line(K, M), Line(L, M))
By concurrent_sufficient_conditions on Line(C, S), Line(C, M), Line(C, L) we get concurrent(Line(C, L), Line(C, M), Line(C, S))
By concurrent_sufficient_conditions on Line(A, L), Line(A, B), Line(A, K) we get concurrent(Line(A, B), Line(A, K), Line(A, L))
By concurrent_sufficient_conditions on Line(C, S), Line(C, L), Line(C, K) we get concurrent(Line(C, K), Line(C, L), Line(C, S))
By concurrent_sufficient_conditions on Line(A, B), Line(A, L), Line(A, C) we get concurrent(Line(A, B), Line(A, C), Line(A, L))
By concurrent_sufficient_conditions on Line(C, S), Line(C, M), Line(C, K) we get concurrent(Line(C, K), Line(C, M), Line(C, S))
By concurrent_sufficient_conditions on Line(A, B), Line(B, M), Line(B, K) we get concurrent(Line(A, B), Line(B, K), Line(B, M))
By concurrent_sufficient_conditions on Line(C, M), Line(B, L), Line(P, S) we get concurrent(Line(B, L), Line(C, M), Line(P, S))
By concurrent_sufficient_conditions on Line(L, M), Line(B, L), Line(A, L) we get concurrent(Line(A, L), Line(B, L), Line(L, M))
By concurrent_sufficient_conditions on Line(L, M), Line(B, L), Line(C, L) we get concurrent(Line(B, L), Line(C, L), Line(L, M))
By concurrent_sufficient_conditions on Line(C, L), Line(C, K), Line(A, C) we get concurrent(Line(A, C), Line(C, K), Line(C, L))
By concurrent_sufficient_conditions on Line(A, L), Line(C, L), Line(L, M) we get concurrent(Line(A, L), Line(C, L), Line(L, M))
By concurrent_sufficient_conditions on Line(C, M), Line(L, M), Line(K, M) we get concurrent(Line(C, M), Line(K, M), Line(L, M))
By concurrent_sufficient_conditions on Line(C, M), Line(A, C), Line(B, C) we get concurrent(Line(A, C), Line(B, C), Line(C, M))
By concurrent_sufficient_conditions on Line(B, M), Line(A, B), Line(B, C) we get concurrent(Line(A, B), Line(B, C), Line(B, M))
By concurrent_sufficient_conditions on Line(B, K), Line(B, C), Line(B, L) we get concurrent(Line(B, C), Line(B, K), Line(B, L))
By concurrent_sufficient_conditions on Line(A, B), Line(B, K), Line(B, C) we get concurrent(Line(A, B), Line(B, C), Line(B, K))
By concurrent_sufficient_conditions on Line(B, L), Line(A, B), Line(B, M) we get concurrent(Line(A, B), Line(B, L), Line(B, M))
By concurrent_sufficient_conditions on Line(B, C), Line(B, K), Line(A, B) we get concurrent(Line(A, B), Line(B, C), Line(B, K))
By concurrent_sufficient_conditions on Line(C, K), Line(K, L), Line(A, K) we get concurrent(Line(A, K), Line(C, K), Line(K, L))
By concurrent_sufficient_conditions on Line(K, L), Line(C, L), Line(A, L) we get concurrent(Line(A, L), Line(C, L), Line(K, L))
By concurrent_sufficient_conditions on Line(C, L), Line(C, M), Line(A, C) we get concurrent(Line(A, C), Line(C, L), Line(C, M))
By concurrent_sufficient_conditions on Line(A, C), Line(C, S), Line(C, L) we get concurrent(Line(A, C), Line(C, L), Line(C, S))
By concurrent_sufficient_conditions on Line(A, L), Line(K, L), Line(C, L) we get concurrent(Line(A, L), Line(C, L), Line(K, L))
By concurrent_sufficient_conditions on Line(A, M), Line(A, C), Line(A, B) we get concurrent(Line(A, B), Line(A, C), Line(A, M))
By concurrent_sufficient_conditions on Line(B, M), Line(L, M), Line(K, M) we get concurrent(Line(B, M), Line(K, M), Line(L, M))
By concurrent_sufficient_conditions on Line(K, M), Line(K, L), Line(C, K) we get concurrent(Line(C, K), Line(K, L), Line(K, M))
By concurrent_sufficient_conditions on Line(A, L), Line(B, L), Line(K, L) we get concurrent(Line(A, L), Line(B, L), Line(K, L))
By concurrent_sufficient_conditions on Line(A, C), Line(A, K), Line(A, B) we get concurrent(Line(A, B), Line(A, C), Line(A, K))
By concurrent_sufficient_conditions on Line(K, L), Line(C, L), Line(B, L) we get concurrent(Line(B, L), Line(C, L), Line(K, L))
By concurrent_sufficient_conditions on Line(P, S), Line(C, M), Line(B, L) we get concurrent(Line(B, L), Line(C, M), Line(P, S))
By concurrent_sufficient_conditions on Line(A, L), Line(A, B), Line(A, C) we get concurrent(Line(A, B), Line(A, C), Line(A, L))
By concurrent_sufficient_conditions on Line(A, K), Line(C, K), Line(B, K) we get concurrent(Line(A, K), Line(B, K), Line(C, K))
By concurrent_sufficient_conditions on Line(B, M), Line(C, M), Line(K, M) we get concurrent(Line(B, M), Line(C, M), Line(K, M))
By concurrent_sufficient_conditions on Line(C, M), Line(A, C), Line(C, L) we get concurrent(Line(A, C), Line(C, L), Line(C, M))
By concurrent_sufficient_conditions on Line(B, M), Line(B, C), Line(A, B) we get concurrent(Line(A, B), Line(B, C), Line(B, M))
By concurrent_sufficient_conditions on Line(L, M), Line(A, L), Line(K, L) we get concurrent(Line(A, L), Line(K, L), Line(L, M))
By concurrent_sufficient_conditions on Line(A, M), Line(C, M), Line(L, M) we get concurrent(Line(A, M), Line(C, M), Line(L, M))
By concurrent_sufficient_conditions on Line(A, M), Line(C, M), Line(B, M) we get concurrent(Line(A, M), Line(B, M), Line(C, M))
By concurrent_sufficient_conditions on Line(K, M), Line(B, M), Line(A, M) we get concurrent(Line(A, M), Line(B, M), Line(K, M))
By concurrent_sufficient_conditions on Line(A, K), Line(C, K), Line(K, M) we get concurrent(Line(A, K), Line(C, K), Line(K, M))
By concurrent_sufficient_conditions on Line(B, K), Line(B, C), Line(A, B) we get concurrent(Line(A, B), Line(B, C), Line(B, K))
By concurrent_sufficient_conditions on Line(A, M), Line(L, M), Line(C, M) we get concurrent(Line(A, M), Line(C, M), Line(L, M))
By concurrent_sufficient_conditions on Line(C, S), Line(B, C), Line(C, K) we get concurrent(Line(B, C), Line(C, K), Line(C, S))
By concurrent_sufficient_conditions on Line(B, C), Line(C, M), Line(C, L) we get concurrent(Line(B, C), Line(C, L), Line(C, M))
By concurrent_sufficient_conditions on Line(B, C), Line(C, M), Line(C, S) we get concurrent(Line(B, C), Line(C, M), Line(C, S))
By concurrent_sufficient_conditions on Line(B, C), Line(C, L), Line(C, M) we get concurrent(Line(B, C), Line(C, L), Line(C, M))
By concurrent_sufficient_conditions on Line(B, C), Line(A, C), Line(C, K) we get concurrent(Line(A, C), Line(B, C), Line(C, K))
By concurrent_sufficient_conditions on Line(C, L), Line(C, M), Line(B, C) we get concurrent(Line(B, C), Line(C, L), Line(C, M))
By concurrent_sufficient_conditions on Line(K, L), Line(L, M), Line(C, L) we get concurrent(Line(C, L), Line(K, L), Line(L, M))
By concurrent_sufficient_conditions on Line(K, M), Line(K, L), Line(A, K) we get concurrent(Line(A, K), Line(K, L), Line(K, M))
By concurrent_sufficient_conditions on Line(B, C), Line(B, K), Line(B, M) we get concurrent(Line(B, C), Line(B, K), Line(B, M))
By concurrent_sufficient_conditions on Line(C, K), Line(C, S), Line(A, C) we get concurrent(Line(A, C), Line(C, K), Line(C, S))
By concurrent_sufficient_conditions on Line(A, B), Line(C, S), Line(P, S) we get concurrent(Line(A, B), Line(C, S), Line(P, S))
By concurrent_sufficient_conditions on Line(B, K), Line(C, K), Line(K, L) we get concurrent(Line(B, K), Line(C, K), Line(K, L))
By concurrent_sufficient_conditions on Line(C, K), Line(A, C), Line(C, S) we get concurrent(Line(A, C), Line(C, K), Line(C, S))
By concurrent_sufficient_conditions on Line(L, M), Line(K, L), Line(A, L) we get concurrent(Line(A, L), Line(K, L), Line(L, M))
By concurrent_sufficient_conditions on Line(C, M), Line(K, M), Line(L, M) we get concurrent(Line(C, M), Line(K, M), Line(L, M))
By concurrent_sufficient_conditions on Line(C, S), Line(C, K), Line(A, C) we get concurrent(Line(A, C), Line(C, K), Line(C, S))
By concurrent_sufficient_conditions on Line(A, K), Line(K, M), Line(K, L) we get concurrent(Line(A, K), Line(K, L), Line(K, M))
By concurrent_sufficient_conditions on Line(C, L), Line(C, K), Line(B, C) we get concurrent(Line(B, C), Line(C, K), Line(C, L))
By concurrent_sufficient_conditions on Line(B, C), Line(A, B), Line(B, L) we get concurrent(Line(A, B), Line(B, C), Line(B, L))
By concurrent_sufficient_conditions on Line(C, M), Line(B, C), Line(A, C) we get concurrent(Line(A, C), Line(B, C), Line(C, M))
By concurrent_sufficient_conditions on Line(C, M), Line(C, L), Line(C, K) we get concurrent(Line(C, K), Line(C, L), Line(C, M))
By concurrent_sufficient_conditions on Line(A, C), Line(C, S), Line(C, M) we get concurrent(Line(A, C), Line(C, M), Line(C, S))
By concurrent_sufficient_conditions on Line(C, M), Line(C, S), Line(B, C) we get concurrent(Line(B, C), Line(C, M), Line(C, S))
By concurrent_sufficient_conditions on Line(L, M), Line(C, L), Line(A, L) we get concurrent(Line(A, L), Line(C, L), Line(L, M))
By concurrent_sufficient_conditions on Line(B, M), Line(A, M), Line(C, M) we get concurrent(Line(A, M), Line(B, M), Line(C, M))
By concurrent_sufficient_conditions on Line(A, L), Line(A, M), Line(A, B) we get concurrent(Line(A, B), Line(A, L), Line(A, M))
By concurrent_sufficient_conditions on Line(K, M), Line(C, M), Line(L, M) we get concurrent(Line(C, M), Line(K, M), Line(L, M))
By concurrent_sufficient_conditions on Line(A, K), Line(B, K), Line(K, M) we get concurrent(Line(A, K), Line(B, K), Line(K, M))
By concurrent_sufficient_conditions on Line(C, M), Line(C, S), Line(C, L) we get concurrent(Line(C, L), Line(C, M), Line(C, S))
By concurrent_sufficient_conditions on Line(A, B), Line(B, K), Line(B, L) we get concurrent(Line(A, B), Line(B, K), Line(B, L))
By concurrent_sufficient_conditions on Line(B, C), Line(B, M), Line(A, B) we get concurrent(Line(A, B), Line(B, C), Line(B, M))
By concurrent_sufficient_conditions on Line(K, M), Line(K, L), Line(B, K) we get concurrent(Line(B, K), Line(K, L), Line(K, M))
By concurrent_sufficient_conditions on Line(C, K), Line(B, C), Line(A, C) we get concurrent(Line(A, C), Line(B, C), Line(C, K))
By concurrent_sufficient_conditions on Line(B, L), Line(B, M), Line(A, B) we get concurrent(Line(A, B), Line(B, L), Line(B, M))
By concurrent_sufficient_conditions on Line(K, L), Line(K, M), Line(B, K) we get concurrent(Line(B, K), Line(K, L), Line(K, M))
By concurrent_sufficient_conditions on Line(A, C), Line(A, B), Line(A, M) we get concurrent(Line(A, B), Line(A, C), Line(A, M))
By concurrent_sufficient_conditions on Line(B, C), Line(B, M), Line(B, K) we get concurrent(Line(B, C), Line(B, K), Line(B, M))
By concurrent_sufficient_conditions on Line(K, L), Line(B, L), Line(A, L) we get concurrent(Line(A, L), Line(B, L), Line(K, L))
By concurrent_sufficient_conditions on Line(C, S), Line(C, K), Line(C, L) we get concurrent(Line(C, K), Line(C, L), Line(C, S))
By concurrent_sufficient_conditions on Line(B, L), Line(B, C), Line(A, B) we get concurrent(Line(A, B), Line(B, C), Line(B, L))
By concurrent_sufficient_conditions on Line(B, M), Line(A, B), Line(B, L) we get concurrent(Line(A, B), Line(B, L), Line(B, M))
By concurrent_sufficient_conditions on Line(C, L), Line(A, C), Line(C, M) we get concurrent(Line(A, C), Line(C, L), Line(C, M))
By concurrent_sufficient_conditions on Line(B, C), Line(A, B), Line(B, M) we get concurrent(Line(A, B), Line(B, C), Line(B, M))
By concurrent_sufficient_conditions on Line(A, C), Line(A, L), Line(A, B) we get concurrent(Line(A, B), Line(A, C), Line(A, L))
By concurrent_sufficient_conditions on Line(A, L), Line(A, K), Line(A, M) we get concurrent(Line(A, K), Line(A, L), Line(A, M))
By concurrent_sufficient_conditions on Line(C, K), Line(C, M), Line(B, C) we get concurrent(Line(B, C), Line(C, K), Line(C, M))
By concurrent_sufficient_conditions on Line(K, L), Line(K, M), Line(A, K) we get concurrent(Line(A, K), Line(K, L), Line(K, M))
By concurrent_sufficient_conditions on Line(B, L), Line(L, M), Line(C, L) we get concurrent(Line(B, L), Line(C, L), Line(L, M))
By concurrent_sufficient_conditions on Line(B, K), Line(B, L), Line(A, B) we get concurrent(Line(A, B), Line(B, K), Line(B, L))
By concurrent_sufficient_conditions on Line(C, S), Line(B, C), Line(A, C) we get concurrent(Line(A, C), Line(B, C), Line(C, S))
By concurrent_sufficient_conditions on Line(C, L), Line(B, C), Line(C, M) we get concurrent(Line(B, C), Line(C, L), Line(C, M))
By concurrent_sufficient_conditions on Line(B, M), Line(K, M), Line(C, M) we get concurrent(Line(B, M), Line(C, M), Line(K, M))
By concurrent_sufficient_conditions on Line(A, M), Line(A, C), Line(A, L) we get concurrent(Line(A, C), Line(A, L), Line(A, M))
By concurrent_sufficient_conditions on Line(A, C), Line(C, M), Line(C, K) we get concurrent(Line(A, C), Line(C, K), Line(C, M))
By concurrent_sufficient_conditions on Line(A, C), Line(A, L), Line(A, M) we get concurrent(Line(A, C), Line(A, L), Line(A, M))
By concurrent_sufficient_conditions on Line(B, K), Line(B, L), Line(B, C) we get concurrent(Line(B, C), Line(B, K), Line(B, L))
By concurrent_sufficient_conditions on Line(C, K), Line(B, C), Line(C, M) we get concurrent(Line(B, C), Line(C, K), Line(C, M))
By concurrent_sufficient_conditions on Line(B, L), Line(L, M), Line(K, L) we get concurrent(Line(B, L), Line(K, L), Line(L, M))
By concurrent_sufficient_conditions on Line(K, L), Line(K, M), Line(C, K) we get concurrent(Line(C, K), Line(K, L), Line(K, M))
By concurrent_sufficient_conditions on Line(A, C), Line(C, K), Line(B, C) we get concurrent(Line(A, C), Line(B, C), Line(C, K))
By concurrent_sufficient_conditions on Line(B, M), Line(B, C), Line(B, L) we get concurrent(Line(B, C), Line(B, L), Line(B, M))
By concurrent_sufficient_conditions on Line(B, L), Line(A, K), Line(P, S) we get concurrent(Line(A, K), Line(B, L), Line(P, S))
By concurrent_sufficient_conditions on Line(A, B), Line(P, S), Line(C, S) we get concurrent(Line(A, B), Line(C, S), Line(P, S))
By concurrent_sufficient_conditions on Line(A, K), Line(K, M), Line(C, K) we get concurrent(Line(A, K), Line(C, K), Line(K, M))
By concurrent_sufficient_conditions on Line(B, M), Line(A, M), Line(K, M) we get concurrent(Line(A, M), Line(B, M), Line(K, M))
By concurrent_sufficient_conditions on Line(B, L), Line(B, K), Line(B, M) we get concurrent(Line(B, K), Line(B, L), Line(B, M))
By concurrent_sufficient_conditions on Line(C, K), Line(B, C), Line(C, S) we get concurrent(Line(B, C), Line(C, K), Line(C, S))
By concurrent_sufficient_conditions on Line(C, K), Line(C, M), Line(C, L) we get concurrent(Line(C, K), Line(C, L), Line(C, M))
By concurrent_sufficient_conditions on Line(C, K), Line(B, C), Line(C, L) we get concurrent(Line(B, C), Line(C, K), Line(C, L))
By concurrent_sufficient_conditions on Line(B, L), Line(K, L), Line(A, L) we get concurrent(Line(A, L), Line(B, L), Line(K, L))
By concurrent_sufficient_conditions on Line(C, S), Line(A, B), Line(P, S) we get concurrent(Line(A, B), Line(C, S), Line(P, S))
By concurrent_sufficient_conditions on Line(A, M), Line(A, B), Line(A, C) we get concurrent(Line(A, B), Line(A, C), Line(A, M))
By concurrent_sufficient_conditions on Line(B, M), Line(B, K), Line(B, C) we get concurrent(Line(B, C), Line(B, K), Line(B, M))
By concurrent_sufficient_conditions on Line(C, L), Line(A, L), Line(B, L) we get concurrent(Line(A, L), Line(B, L), Line(C, L))
By concurrent_sufficient_conditions on Line(B, K), Line(A, B), Line(B, M) we get concurrent(Line(A, B), Line(B, K), Line(B, M))
By concurrent_sufficient_conditions on Line(A, C), Line(C, L), Line(C, S) we get concurrent(Line(A, C), Line(C, L), Line(C, S))
By concurrent_sufficient_conditions on Line(A, L), Line(L, M), Line(C, L) we get concurrent(Line(A, L), Line(C, L), Line(L, M))
By concurrent_sufficient_conditions on Line(C, K), Line(K, M), Line(K, L) we get concurrent(Line(C, K), Line(K, L), Line(K, M))
By concurrent_sufficient_conditions on Line(C, K), Line(C, S), Line(C, L) we get concurrent(Line(C, K), Line(C, L), Line(C, S))
By concurrent_sufficient_conditions on Line(A, K), Line(P, S), Line(C, M) we get concurrent(Line(A, K), Line(C, M), Line(P, S))
By concurrent_sufficient_conditions on Line(P, S), Line(C, M), Line(A, K) we get concurrent(Line(A, K), Line(C, M), Line(P, S))
By concurrent_sufficient_conditions on Line(K, M), Line(A, K), Line(B, K) we get concurrent(Line(A, K), Line(B, K), Line(K, M))
By concurrent_sufficient_conditions on Line(C, K), Line(C, M), Line(A, C) we get concurrent(Line(A, C), Line(C, K), Line(C, M))
By concurrent_sufficient_conditions on Line(A, B), Line(A, M), Line(A, L) we get concurrent(Line(A, B), Line(A, L), Line(A, M))
By concurrent_sufficient_conditions on Line(B, C), Line(B, L), Line(B, M) we get concurrent(Line(B, C), Line(B, L), Line(B, M))
By concurrent_sufficient_conditions on Line(C, K), Line(K, M), Line(B, K) we get concurrent(Line(B, K), Line(C, K), Line(K, M))
By concurrent_sufficient_conditions on Line(C, L), Line(A, C), Line(C, S) we get concurrent(Line(A, C), Line(C, L), Line(C, S))
By concurrent_sufficient_conditions on Line(A, L), Line(L, M), Line(B, L) we get concurrent(Line(A, L), Line(B, L), Line(L, M))
By concurrent_sufficient_conditions on Line(C, L), Line(C, M), Line(C, K) we get concurrent(Line(C, K), Line(C, L), Line(C, M))
By concurrent_sufficient_conditions on Line(B, K), Line(K, M), Line(A, K) we get concurrent(Line(A, K), Line(B, K), Line(K, M))
By concurrent_sufficient_conditions on Line(B, M), Line(B, L), Line(B, C) we get concurrent(Line(B, C), Line(B, L), Line(B, M))
By concurrent_sufficient_conditions on Line(B, K), Line(C, K), Line(A, K) we get concurrent(Line(A, K), Line(B, K), Line(C, K))
By concurrent_sufficient_conditions on Line(C, L), Line(K, L), Line(L, M) we get concurrent(Line(C, L), Line(K, L), Line(L, M))
By concurrent_sufficient_conditions on Line(B, M), Line(L, M), Line(A, M) we get concurrent(Line(A, M), Line(B, M), Line(L, M))
By concurrent_sufficient_conditions on Line(C, M), Line(A, M), Line(B, M) we get concurrent(Line(A, M), Line(B, M), Line(C, M))
By concurrent_sufficient_conditions on Line(B, L), Line(A, B), Line(B, K) we get concurrent(Line(A, B), Line(B, K), Line(B, L))
By concurrent_sufficient_conditions on Line(A, B), Line(A, M), Line(A, C) we get concurrent(Line(A, B), Line(A, C), Line(A, M))
By concurrent_sufficient_conditions on Line(A, L), Line(A, C), Line(A, B) we get concurrent(Line(A, B), Line(A, C), Line(A, L))
By concurrent_sufficient_conditions on Line(C, M), Line(C, L), Line(B, C) we get concurrent(Line(B, C), Line(C, L), Line(C, M))
By concurrent_sufficient_conditions on Line(C, S), Line(C, K), Line(C, M) we get concurrent(Line(C, K), Line(C, M), Line(C, S))
By concurrent_sufficient_conditions on Line(L, M), Line(B, M), Line(K, M) we get concurrent(Line(B, M), Line(K, M), Line(L, M))
By concurrent_sufficient_conditions on Line(C, L), Line(B, L), Line(L, M) we get concurrent(Line(B, L), Line(C, L), Line(L, M))
By concurrent_sufficient_conditions on Line(A, B), Line(B, C), Line(B, L) we get concurrent(Line(A, B), Line(B, C), Line(B, L))
By concurrent_sufficient_conditions on Line(A, B), Line(A, K), Line(A, M) we get concurrent(Line(A, B), Line(A, K), Line(A, M))
By concurrent_sufficient_conditions on Line(K, L), Line(B, K), Line(C, K) we get concurrent(Line(B, K), Line(C, K), Line(K, L))
By concurrent_sufficient_conditions on Line(A, C), Line(C, L), Line(C, M) we get concurrent(Line(A, C), Line(C, L), Line(C, M))
By concurrent_sufficient_conditions on Line(A, C), Line(A, M), Line(A, B) we get concurrent(Line(A, B), Line(A, C), Line(A, M))
By concurrent_sufficient_conditions on Line(B, C), Line(C, L), Line(C, S) we get concurrent(Line(B, C), Line(C, L), Line(C, S))
By concurrent_sufficient_conditions on Line(K, M), Line(A, K), Line(C, K) we get concurrent(Line(A, K), Line(C, K), Line(K, M))
By concurrent_sufficient_conditions on Line(A, C), Line(C, S), Line(B, C) we get concurrent(Line(A, C), Line(B, C), Line(C, S))
By concurrent_sufficient_conditions on Line(C, K), Line(K, L), Line(B, K) we get concurrent(Line(B, K), Line(C, K), Line(K, L))
By concurrent_sufficient_conditions on Line(A, L), Line(C, L), Line(B, L) we get concurrent(Line(A, L), Line(B, L), Line(C, L))
By concurrent_sufficient_conditions on Line(A, B), Line(B, C), Line(B, M) we get concurrent(Line(A, B), Line(B, C), Line(B, M))
By concurrent_sufficient_conditions on Line(A, C), Line(C, M), Line(C, S) we get concurrent(Line(A, C), Line(C, M), Line(C, S))
By concurrent_sufficient_conditions on Line(L, M), Line(C, L), Line(K, L) we get concurrent(Line(C, L), Line(K, L), Line(L, M))
By concurrent_sufficient_conditions on Line(L, M), Line(C, M), Line(B, M) we get concurrent(Line(B, M), Line(C, M), Line(L, M))
By concurrent_sufficient_conditions on Line(A, M), Line(A, L), Line(A, B) we get concurrent(Line(A, B), Line(A, L), Line(A, M))
By concurrent_sufficient_conditions on Line(C, M), Line(C, S), Line(A, C) we get concurrent(Line(A, C), Line(C, M), Line(C, S))
By concurrent_sufficient_conditions on Line(A, B), Line(A, L), Line(A, M) we get concurrent(Line(A, B), Line(A, L), Line(A, M))
By concurrent_sufficient_conditions on Line(B, M), Line(B, C), Line(B, K) we get concurrent(Line(B, C), Line(B, K), Line(B, M))
By concurrent_sufficient_conditions on Line(C, K), Line(C, L), Line(C, S) we get concurrent(Line(C, K), Line(C, L), Line(C, S))
By concurrent_sufficient_conditions on Line(A, L), Line(K, L), Line(B, L) we get concurrent(Line(A, L), Line(B, L), Line(K, L))
By concurrent_sufficient_conditions on Line(B, C), Line(C, K), Line(C, M) we get concurrent(Line(B, C), Line(C, K), Line(C, M))
By concurrent_sufficient_conditions on Line(B, L), Line(A, L), Line(L, M) we get concurrent(Line(A, L), Line(B, L), Line(L, M))
By concurrent_sufficient_conditions on Line(C, S), Line(C, K), Line(B, C) we get concurrent(Line(B, C), Line(C, K), Line(C, S))
By concurrent_sufficient_conditions on Line(K, L), Line(C, L), Line(L, M) we get concurrent(Line(C, L), Line(K, L), Line(L, M))
By concurrent_sufficient_conditions on Line(A, M), Line(B, M), Line(C, M) we get concurrent(Line(A, M), Line(B, M), Line(C, M))
By concurrent_sufficient_conditions on Line(A, B), Line(B, M), Line(B, L) we get concurrent(Line(A, B), Line(B, L), Line(B, M))
By concurrent_sufficient_conditions on Line(C, L), Line(A, C), Line(C, K) we get concurrent(Line(A, C), Line(C, K), Line(C, L))
By concurrent_sufficient_conditions on Line(A, M), Line(A, K), Line(A, C) we get concurrent(Line(A, C), Line(A, K), Line(A, M))
By concurrent_sufficient_conditions on Line(C, L), Line(B, L), Line(K, L) we get concurrent(Line(B, L), Line(C, L), Line(K, L))
By concurrent_sufficient_conditions on Line(B, K), Line(A, K), Line(C, K) we get concurrent(Line(A, K), Line(B, K), Line(C, K))
By concurrent_sufficient_conditions on Line(C, M), Line(B, C), Line(C, L) we get concurrent(Line(B, C), Line(C, L), Line(C, M))
By concurrent_sufficient_conditions on Line(A, B), Line(A, K), Line(A, L) we get concurrent(Line(A, B), Line(A, K), Line(A, L))
By concurrent_sufficient_conditions on Line(A, M), Line(L, M), Line(B, M) we get concurrent(Line(A, M), Line(B, M), Line(L, M))
By concurrent_sufficient_conditions on Line(B, C), Line(C, M), Line(C, K) we get concurrent(Line(B, C), Line(C, K), Line(C, M))
By concurrent_sufficient_conditions on Line(B, M), Line(B, L), Line(B, K) we get concurrent(Line(B, K), Line(B, L), Line(B, M))
By concurrent_sufficient_conditions on Line(B, L), Line(A, L), Line(K, L) we get concurrent(Line(A, L), Line(B, L), Line(K, L))
By between_imply_not_between on C, P, M we get collinear_and_not_between(M, C, P)
By between_imply_not_between on K, P, A we get collinear_and_not_between(A, K, P)
By between_imply_not_between on A, B, S we get collinear_and_not_between(B, A, S)
By between_imply_not_between on S, B, A we get collinear_and_not_between(A, S, B)
By between_imply_not_between on B, P, L we get collinear_and_not_between(L, B, P)
By between_imply_not_between on L, P, B we get collinear_and_not_between(B, L, P)
By between_imply_not_between on A, P, K we get collinear_and_not_between(K, A, P)
By between_imply_not_between on M, P, C we get collinear_and_not_between(C, M, P)
By reverse_direction on A, P we get 180 == direction(A, P) - direction(P, A) mod 360
By reverse_direction on P, L we get 180 == direction(P, L) - direction(L, P) mod 360
By between_imply_segment_sum on L, P, B we get distance(B, L) == distance(L, P) + distance(B, P)
By reverse_direction on P, A we get 180 == direction(P, A) - direction(A, P) mod 360
By between_imply_segment_sum on K, P, A we get distance(A, K) == distance(K, P) + distance(A, P)
By reverse_direction on L, P we get 180 == direction(L, P) - direction(P, L) mod 360
By reverse_direction on P, B we get 180 == direction(P, B) - direction(B, P) mod 360
By between_imply_segment_sum on C, P, M we get distance(C, M) == distance(C, P) + distance(M, P)
By reverse_direction on B, S we get 180 == direction(B, S) - direction(S, B) mod 360
By reverse_direction on P, K we get 180 == direction(P, K) - direction(K, P) mod 360
By reverse_direction on S, B we get 180 == direction(S, B) - direction(B, S) mod 360
By reverse_direction on S, A we get 180 == direction(S, A) - direction(A, S) mod 360
By between_imply_segment_sum on A, B, S we get distance(A, S) == distance(A, B) + distance(B, S)
By reverse_direction on A, S we get 180 == direction(A, S) - direction(S, A) mod 360
By reverse_direction on B, P we get 180 == direction(B, P) - direction(P, B) mod 360
By reverse_direction on K, P we get 180 == direction(K, P) - direction(P, K) mod 360
By internal_angle_bisector_definition_v0_r on K, P, K, A we get Line(A, P) == internal_angle_bisector(K, A, K)
By internal_angle_bisector_definition_v0_r on P, A, P, K we get Line(A, K) == internal_angle_bisector(P, K, P)
By internal_angle_bisector_definition_v0_r on P, L, P, B we get Line(B, L) == internal_angle_bisector(P, B, P)
By anti_similar_triangle_basic_properties on S, P, C, S, C, P we get angle(S, P, C) == 0 - angle(S, C, P) mod 360, angle(P, C, S) == 0 - angle(C, P, S) mod 360, angle(C, S, P) == 0 - angle(P, S, C) mod 360, log(distance(C, S)) + log(distance(C, P)) == log(distance(P, S)) + log(distance(C, P)), log(distance(C, P)) + log(distance(C, S)) == log(distance(C, P)) + log(distance(P, S)), log(distance(C, S)) + log(distance(C, S)) == log(distance(P, S)) + log(distance(P, S))
By internal_angle_bisector_definition_v0_r on P, C, P, M we get Line(C, M) == internal_angle_bisector(P, M, P)
By internal_angle_bisector_definition_v0_r on A, S, A, B we get Line(B, S) == internal_angle_bisector(A, B, A)
By internal_angle_bisector_definition_v0_r on P, M, P, C we get Line(C, M) == internal_angle_bisector(P, C, P)
By internal_angle_bisector_definition_v0_r on C, M, C, P we get Line(M, P) == internal_angle_bisector(C, P, C)
By internal_angle_bisector_definition_v0_r on B, L, B, P we get Line(L, P) == internal_angle_bisector(B, P, B)
By internal_angle_bisector_definition_v0_r on S, A, S, B we get Line(A, B) == internal_angle_bisector(S, B, S)
By internal_angle_bisector_definition_v0_r on A, B, A, S we get Line(B, S) == internal_angle_bisector(A, S, A)
By internal_angle_bisector_definition_v0_r on M, C, M, P we get Line(C, P) == internal_angle_bisector(M, P, M)
By internal_angle_bisector_definition_v0_r on M, P, M, C we get Line(C, P) == internal_angle_bisector(M, C, M)
By internal_angle_bisector_definition_v0_r on S, B, S, A we get Line(A, B) == internal_angle_bisector(S, A, S)
By internal_angle_bisector_definition_v0_r on B, S, B, A we get Line(A, S) == internal_angle_bisector(B, A, B)
By internal_angle_bisector_definition_v0_r on P, K, P, A we get Line(A, K) == internal_angle_bisector(P, A, P)
By internal_angle_bisector_definition_v0_r on B, A, B, S we get Line(A, S) == internal_angle_bisector(B, S, B)
By internal_angle_bisector_definition_v0_r on P, B, P, L we get Line(B, L) == internal_angle_bisector(P, L, P)
By internal_angle_bisector_definition_v0_r on K, A, K, P we get Line(A, P) == internal_angle_bisector(K, P, K)
By internal_angle_bisector_definition_v0_r on L, P, L, B we get Line(B, P) == internal_angle_bisector(L, B, L)
By internal_angle_bisector_definition_v0_r on B, P, B, L we get Line(L, P) == internal_angle_bisector(B, L, B)
By internal_angle_bisector_definition_v0_r on C, P, C, M we get Line(M, P) == internal_angle_bisector(C, M, C)
By internal_angle_bisector_definition_v0_r on A, P, A, K we get Line(K, P) == internal_angle_bisector(A, K, A)
By internal_angle_bisector_definition_v0_r on A, K, A, P we get Line(K, P) == internal_angle_bisector(A, P, A)
By internal_angle_bisector_definition_v0_r on L, B, L, P we get Line(B, P) == internal_angle_bisector(L, P, L)
By anti_similar_triangle_basic_properties on C, P, L, B, P, M we get angle(C, P, L) == 0 - angle(B, P, M) mod 360, angle(P, L, C) == 0 - angle(P, M, B) mod 360, angle(L, C, P) == 0 - angle(M, B, P) mod 360, log(distance(B, P)) + log(distance(L, P)) == log(distance(C, P)) + log(distance(M, P)), log(distance(L, P)) + log(distance(B, M)) == log(distance(M, P)) + log(distance(C, L)), log(distance(B, M)) + log(distance(C, P)) == log(distance(C, L)) + log(distance(B, P))
By anti_similar_triangle_basic_properties on B, C, S, C, A, S we get angle(B, C, S) == 0 - angle(C, A, S) mod 360, angle(C, S, B) == 0 - angle(A, S, C) mod 360, angle(S, B, C) == 0 - angle(S, C, A) mod 360, log(distance(A, C)) + log(distance(C, S)) == log(distance(B, C)) + log(distance(A, S)), log(distance(A, S)) + log(distance(B, S)) == log(distance(C, S)) + log(distance(C, S)), log(distance(B, S)) + log(distance(A, C)) == log(distance(C, S)) + log(distance(B, C))
By anti_similar_triangle_basic_properties on P, K, M, P, C, A we get angle(P, K, M) == 0 - angle(P, C, A) mod 360, angle(K, M, P) == 0 - angle(C, A, P) mod 360, angle(M, P, K) == 0 - angle(A, P, C) mod 360, log(distance(C, P)) + log(distance(K, M)) == log(distance(K, P)) + log(distance(A, C)), log(distance(A, C)) + log(distance(M, P)) == log(distance(K, M)) + log(distance(A, P)), log(distance(A, P)) + log(distance(K, P)) == log(distance(M, P)) + log(distance(C, P))
By anti_similar_triangle_basic_properties on B, K, P, A, L, P we get angle(B, K, P) == 0 - angle(A, L, P) mod 360, angle(K, P, B) == 0 - angle(L, P, A) mod 360, angle(P, B, K) == 0 - angle(P, A, L) mod 360, log(distance(A, L)) + log(distance(K, P)) == log(distance(B, K)) + log(distance(L, P)), log(distance(K, P)) + log(distance(A, P)) == log(distance(L, P)) + log(distance(B, P)), log(distance(A, P)) + log(distance(B, K)) == log(distance(B, P)) + log(distance(A, L))
By anti_similar_triangle_basic_properties on P, L, M, P, C, B we get angle(P, L, M) == 0 - angle(P, C, B) mod 360, angle(L, M, P) == 0 - angle(C, B, P) mod 360, angle(M, P, L) == 0 - angle(B, P, C) mod 360, log(distance(C, P)) + log(distance(L, M)) == log(distance(L, P)) + log(distance(B, C)), log(distance(B, C)) + log(distance(M, P)) == log(distance(L, M)) + log(distance(B, P)), log(distance(B, P)) + log(distance(L, P)) == log(distance(M, P)) + log(distance(C, P))
By anti_similar_triangle_basic_properties on A, P, B, L, P, K we get angle(A, P, B) == 0 - angle(L, P, K) mod 360, angle(P, B, A) == 0 - angle(P, K, L) mod 360, angle(B, A, P) == 0 - angle(K, L, P) mod 360, log(distance(A, P)) + log(distance(K, P)) == log(distance(L, P)) + log(distance(B, P)), log(distance(B, P)) + log(distance(K, L)) == log(distance(K, P)) + log(distance(A, B)), log(distance(A, B)) + log(distance(L, P)) == log(distance(K, L)) + log(distance(A, P))
By anti_similar_triangle_basic_properties on K, P, M, C, P, A we get angle(K, P, M) == 0 - angle(C, P, A) mod 360, angle(P, M, K) == 0 - angle(P, A, C) mod 360, angle(M, K, P) == 0 - angle(A, C, P) mod 360, log(distance(C, P)) + log(distance(M, P)) == log(distance(K, P)) + log(distance(A, P)), log(distance(A, P)) + log(distance(K, M)) == log(distance(M, P)) + log(distance(A, C)), log(distance(A, C)) + log(distance(K, P)) == log(distance(K, M)) + log(distance(C, P))
By anti_similar_triangle_basic_properties on S, A, C, S, C, B we get angle(S, A, C) == 0 - angle(S, C, B) mod 360, angle(A, C, S) == 0 - angle(C, B, S) mod 360, angle(C, S, A) == 0 - angle(B, S, C) mod 360, log(distance(A, S)) + log(distance(B, C)) == log(distance(C, S)) + log(distance(A, C)), log(distance(A, C)) + log(distance(B, S)) == log(distance(B, C)) + log(distance(C, S)), log(distance(B, S)) + log(distance(A, S)) == log(distance(C, S)) + log(distance(C, S))
By anti_similar_triangle_basic_properties on K, P, C, M, P, A we get angle(K, P, C) == 0 - angle(M, P, A) mod 360, angle(P, C, K) == 0 - angle(P, A, M) mod 360, angle(C, K, P) == 0 - angle(A, M, P) mod 360, log(distance(K, P)) + log(distance(A, P)) == log(distance(M, P)) + log(distance(C, P)), log(distance(A, P)) + log(distance(C, K)) == log(distance(C, P)) + log(distance(A, M)), log(distance(A, M)) + log(distance(K, P)) == log(distance(C, K)) + log(distance(M, P))
By anti_similar_triangle_basic_properties on P, A, B, P, L, K we get angle(P, A, B) == 0 - angle(P, L, K) mod 360, angle(A, B, P) == 0 - angle(L, K, P) mod 360, angle(B, P, A) == 0 - angle(K, P, L) mod 360, log(distance(A, P)) + log(distance(K, L)) == log(distance(L, P)) + log(distance(A, B)), log(distance(A, B)) + log(distance(K, P)) == log(distance(K, L)) + log(distance(B, P)), log(distance(B, P)) + log(distance(L, P)) == log(distance(K, P)) + log(distance(A, P))
By anti_similar_triangle_basic_properties on C, P, B, L, P, M we get angle(C, P, B) == 0 - angle(L, P, M) mod 360, angle(P, B, C) == 0 - angle(P, M, L) mod 360, angle(B, C, P) == 0 - angle(M, L, P) mod 360, log(distance(C, P)) + log(distance(M, P)) == log(distance(L, P)) + log(distance(B, P)), log(distance(B, P)) + log(distance(L, M)) == log(distance(M, P)) + log(distance(B, C)), log(distance(B, C)) + log(distance(L, P)) == log(distance(L, M)) + log(distance(C, P))
By anti_similar_triangle_basic_properties on P, K, B, P, L, A we get angle(P, K, B) == 0 - angle(P, L, A) mod 360, angle(K, B, P) == 0 - angle(L, A, P) mod 360, angle(B, P, K) == 0 - angle(A, P, L) mod 360, log(distance(K, P)) + log(distance(A, L)) == log(distance(L, P)) + log(distance(B, K)), log(distance(A, L)) + log(distance(B, P)) == log(distance(B, K)) + log(distance(A, P)), log(distance(A, P)) + log(distance(K, P)) == log(distance(B, P)) + log(distance(L, P))
By anti_similar_triangle_basic_properties on C, L, P, B, M, P we get angle(C, L, P) == 0 - angle(B, M, P) mod 360, angle(L, P, C) == 0 - angle(M, P, B) mod 360, angle(P, C, L) == 0 - angle(P, B, M) mod 360, log(distance(B, M)) + log(distance(L, P)) == log(distance(C, L)) + log(distance(M, P)), log(distance(L, P)) + log(distance(B, P)) == log(distance(M, P)) + log(distance(C, P)), log(distance(B, P)) + log(distance(C, L)) == log(distance(C, P)) + log(distance(B, M))
By anti_similar_triangle_basic_properties on P, K, C, P, M, A we get angle(P, K, C) == 0 - angle(P, M, A) mod 360, angle(K, C, P) == 0 - angle(M, A, P) mod 360, angle(C, P, K) == 0 - angle(A, P, M) mod 360, log(distance(K, P)) + log(distance(A, M)) == log(distance(M, P)) + log(distance(C, K)), log(distance(A, M)) + log(distance(C, P)) == log(distance(C, K)) + log(distance(A, P)), log(distance(A, P)) + log(distance(K, P)) == log(distance(C, P)) + log(distance(M, P))
By sas_anti_similarity on B, S, P, P, S, A we get anti_similar_triangles(A, P, S, P, B, S)
By sas_anti_similarity on A, S, P, P, S, B we get anti_similar_triangles(A, P, S, P, B, S)
By sas_anti_similarity on P, S, B, A, S, P we get anti_similar_triangles(A, P, S, P, B, S)
By sas_anti_similarity on P, S, A, B, S, P we get anti_similar_triangles(A, P, S, P, B, S)
By power_of_a_point_tangent_converse_v0 on S, B, A, P we get tangent(Line(P, S), Circle(A, B, P))
By chords_on_equal_angles_v0 on M, C, L, K, A, M, Circle(A, B, C) we get distance(K, M) == distance(L, M)
By radical_axis_of_intersecting_circles_v0 on B, A, Circle(A, B, P), Circle(A, B, C) we get Line(A, B) == radical_axis(Circle(A, B, C), Circle(A, B, P))
By parallel_line_angles_v1 on K, L, P, S we get parallel(Line(K, L), Line(P, S))
By anti_similar_triangle_basic_properties on S, P, B, S, A, P we get angle(S, P, B) == 0 - angle(S, A, P) mod 360, angle(P, B, S) == 0 - angle(A, P, S) mod 360, angle(B, S, P) == 0 - angle(P, S, A) mod 360, log(distance(A, S)) + log(distance(B, P)) == log(distance(P, S)) + log(distance(A, P)), log(distance(A, P)) + log(distance(B, S)) == log(distance(B, P)) + log(distance(P, S)), log(distance(B, S)) + log(distance(A, S)) == log(distance(P, S)) + log(distance(P, S))
By anti_similar_triangle_basic_properties on S, P, A, S, B, P we get angle(S, P, A) == 0 - angle(S, B, P) mod 360, angle(P, A, S) == 0 - angle(B, P, S) mod 360, angle(A, S, P) == 0 - angle(P, S, B) mod 360, log(distance(B, S)) + log(distance(A, P)) == log(distance(P, S)) + log(distance(B, P)), log(distance(A, P)) + log(distance(P, S)) == log(distance(B, P)) + log(distance(A, S)), log(distance(A, S)) + log(distance(B, S)) == log(distance(P, S)) + log(distance(P, S))
By anti_similar_triangle_basic_properties on K, L, M, L, K, M we get angle(K, L, M) == 0 - angle(L, K, M) mod 360, angle(L, M, K) == 0 - angle(K, M, L) mod 360, angle(M, K, L) == 0 - angle(M, L, K) mod 360, log(distance(K, L)) + log(distance(K, M)) == log(distance(K, L)) + log(distance(L, M)), log(distance(K, M)) + log(distance(K, M)) == log(distance(L, M)) + log(distance(L, M)), log(distance(K, M)) + log(distance(K, L)) == log(distance(L, M)) + log(distance(K, L))
By asa_anti_congruence on K, L, M, L, K, M we get anti_congruent_triangles(K, L, M, L, K, M)
By isosceles_triangle_from_angles on M, L, K we get isosceles_triangle(M, K, L)
By asa_anti_congruence on L, K, M, K, L, M we get anti_congruent_triangles(K, L, M, L, K, M)
By anti_congruence_from_anti_similar_triangles on L, K, M, K, L, M we get anti_congruent_triangles(K, L, M, L, K, M)
By isosceles_triangle_from_angles on M, K, L we get isosceles_triangle(M, K, L)
By anti_congruence_from_anti_similar_triangles on K, L, M, L, K, M we get anti_congruent_triangles(K, L, M, L, K, M)
By external_angle_bisector_definition_v0_r on L, M, P, A we get Line(A, M) == external_angle_bisector(L, A, P)
By external_angle_bisector_definition_v0_r on L, M, K, A we get Line(A, M) == external_angle_bisector(K, A, L)
By external_angle_bisector_definition_v0_r on L, M, K, B we get Line(B, M) == external_angle_bisector(K, B, L)
By power_of_a_point_on_circle on A, Circle(A, B, P) we get 0 == power_of_a_point(A, Circle(A, B, P))
By external_angle_bisector_definition_v0_r on P, M, K, B we get Line(B, M) == external_angle_bisector(K, B, P)
By power_of_a_point_on_circle on B, Circle(A, B, P) we get 0 == power_of_a_point(B, Circle(A, B, P))
By internal_angle_bisector_definition_v0_r on K, P, L, C we get Line(C, P) == internal_angle_bisector(K, C, L)
By power_of_a_point_in_circle on P, Circle(A, B, P) we get 0 == power_of_a_point(P, Circle(A, B, P))
By internal_angle_bisector_definition_v0_r on L, M, K, C we get Line(C, M) == internal_angle_bisector(K, C, L)
By draw_point_of_tangency on Line(P, S), Circle(A, B, P) we get exists(line_circle_tangent_point(Line(P, S), Circle(A, B, P)))
By power_of_a_point_definition on S, B, A, Circle(A, B, P) we get log(distance(B, S)) + log(distance(A, S)) == log(power_of_a_point(S, Circle(A, B, P)))
By power_of_a_point_tangent on S, P, Circle(A, B, P) we get 2 * log(distance(P, S)) == log(power_of_a_point(S, Circle(A, B, P)))
By power_of_a_point_definition on L, P, B, Circle(A, B, P) we get log(distance(L, P)) + log(distance(B, L)) == log(power_of_a_point(L, Circle(A, B, P)))
By power_of_a_point_definition on K, P, A, Circle(A, B, P) we get log(distance(K, P)) + log(distance(A, K)) == log(power_of_a_point(K, Circle(A, B, P)))
