Assumptions:
A, B, C, J, M, K, L, F, G, S, T: Point
distinct(A, B, C, F, G, J, K, L, M, S, T)
J == excenter(A, B, C)
M == line_circle_tangent_point(Line(B, C), excircle(A, B, C))
K == line_circle_tangent_point(Line(A, B), excircle(A, B, C))
L == line_circle_tangent_point(Line(A, C), excircle(A, B, C))
F in Line(L, M), Line(B, J)
G in Line(K, M), Line(C, J)
S in Line(A, F), Line(B, C)
T in Line(A, G), Line(B, C)

Embedding:
C := {"x": "3.016022967681919908500276505947113037109375", "y": "-4.0759782006877731674876486067660152912139892578125"}
B := {"x": "-0.51768491162980090347645045767421834170818328857421875", "y": "-2.626713067799460787909993086941540241241455078125"}
A := {"x": "7.89788084690801905907164837117306888103485107421875", "y": "-1.6633265931936607184837839668034575879573822021484375"}
K := {"x": "-0.91226797608611559082928816714303380706260730933352982904609047782057688714542863254449834234173418835315772055205660708812834195574456700859711053480941964750556440574798196531158659039563955279466605738024122154305543943022476560737633441268569288469300334598995242790604200229415677678133862826611495043447217543985891139357384015777168793196018333513049063700069399963228845625867714402766243785057483184859277370387894385596687681680692057773747974148384642327449430342850873647108254768454516321277257868715001648652744050651242717455951424037039540437500402432063182176383895994452778236382411611773908355689062376320691857942769562699625718419756496251130527227898689013240587292961500627203449526067383724033242220096631587046633414936231886266535838006900974898060348428923387698920603581402683406203752913661985041415281568370196973646379032988945961425377247638398695502056242016284154502273628589973830560835786142432611460113126618821324641112693766731640560310409590723383899277593076251313794644519129468269760152416050116861559108292903562844643523867568292352866082651599487935140395040706263380085731191002751395700797010049303718666939240585601979121397190420289067308542593485997196605002523773837386441767272303981857756075218735835165085119513746401229115028557689454619840065703728082472359312452394093618588221855317900607638318066376464159505162076562300780423339148448256020589912544345760987262562531971529761629157103257448237698088285653462185142400360983966528000379009725057302939976306563177237909534582611801636424697056327836557680119810646936678997627566694582871301575862277649827049322530462743298200425972132308121353965940057728743770987715375622617359584222725745863970389633430062856314682997752576288311518463278681101731402013585133848533231607967450272349771656423945366432293610908040248850666064062815263820551986096075458079690549395579285458083139171929168731006755452301650586964989127629121161577058402397202602390815812725268980776613026841982830384", "y": "-2.6718836479259441322771304450167037123275212416402452849904712277993502414976069878199415051860001390821927723195274869009141134391429223746177094231893029764404780254479339346388231036101576873196368951595979893912623537157448168889269569140773706243521904769891503157454681890021511734365537426147073399787383952147224137341350243449851957227126577409180250716914340869039196456267220741009955426042073005976126834358735335701808521612377648156807276608537191168272687484645398618619098215875476965144398225042905126792230971614777752758028693320109724012396580577645425250325960224134977086811583341814620124234364297994303955781844038294624925636394871810660987536883082188584709703327373789903181011192497657008531498500762045068363960670146230352132735803851255427128352878333084467016017289935034958900783576557254835006389999313033007708051191047318212854052921718539524834758202407071025254731764635507276203751355278034517594415577037674190660025953741128201985682204680564305552666648552856259915588400537411988948791579603614732027232954099151937979497963174026960017171211255979446517572392457937707047923102548039740209451844942146242425423724771392082006671244221492495592933932485194472190586568961893557899493330799076590554108726801315914063706185408578977014473396224962987829929399273095965771751005027775680522018287525281446663528325740852650328816517802854178291646209035127493789791008198698297354873456957239186323515121654361157198866564859767240456100976957754220371950608912214715182878632852828817965399312041995639198745654857338271721614859635339549560797884432171005179625548794864714405348386362383542332134453508621431236368114374397192136611975889522416113750344650901619162989566582923212236654129707113098203105967985046205159400739689081659411468750270598942750383565203153416401459810281844310071701735584655723371228262907707378003995834930743485585874031624603852449404913715172187224545653588408312750737803383047336576918316482354644246197178680868287175503"}
M := {"x": "-0.15022797686032624488252621718506035511479842701015207134588061882904226419909783642620569209947948295487069397733835012385904720136988457228084893916249309212551998219781455572206082924033396660361407706762381241891476736958669488054912107008559854269277778490252364153199740939817476408198534135706636638480970464693095726487551684465087792210755996852109476011071679704833517925848106405914473228145913006553419071572328147104918222648630651739540127642507762530545242751949699654377926510081339663773524990758076902265746634918780442912784560663380423743160428567252131736346334786780489759959365298325987268306069617200157695105802767942719245969286070240167590951901245553711813818593253972577289128951784811725364524296775464216035012430520817178057068780171705052872701548726323848219154138180198281635111165582474458897982528843124930319625405698329425602213656436552367023496948227890849668366079037047869447151900277641215089906536356089609241120212304414267113848877589809024733648646867000549008569922314217183511701396300477916888046009692703562554010643477669340390763472929214881299887755344301087025256284546522246119232963027981162629460957380162051635521851072033829031018588979493727447011478436268196423666647571470712249400626870208096076706562441223900501015428528186900794765581848315468908356780023575424806484138839438777117625227865766674465004441560389454628974603904086730373627316146756940508077028592398892129902696627790361111083547163880823325074995895866589539052380241270011951802653896264204787770413449774126634149827260891297324932480074073451333542404835904297263563699603104988833379259971914944860738962295428796598119285843129118814176081549876260188628129204745991665568675989666513119525211420369707376937363054479006874476240368487775702776887877403631449141074532627758480408625762098550362024819804536129679217244850336829239951075583275159788456775452863213899108972129937936909190178931535427923902085427736176769349062601944330505984522274137539941231", "y": "-2.7774166747719592562933988031750257688895176196438074881014334882443051845291610547537891312678076021184302479044144178658080026630248210518208544718509882261585306673579350764643584023516963127012452956523155778424984522838857740322854538521222859346292266563358476006955247406445479415711948135936900939423720928084210273667276504867031165182357380564618074908853048489013762597754039967659912926578521801717853811324736896956327628139318367013557470029424240150261814545567720035150316210429923132423159702037927217698494890635297847118821621613930232869375340560760978044622439963260977158386097118731491916210272832831753622110844360258404415573532552378822766684998132448951682192789364080552562215171715856808350510865376658743997136050280432334835400114874414038047968361994014198705968009206182061190175784499346963477574680017525812753462413232805330091730101689262294065961154611941979957756971435533833025468854159866747727673681222034402131150341680457724185466303689768506481911310327508633378576765566178760242257447235018644400556062086472895281691821945030255576323850660807148083015418127435323615770061902483930560359808977453541676429330041002170392761846675759553918830233839656114911600873420611066700155447190589800982489373108828623683326632682989902185518351791626773971393709744615495703541618676628139513686608456736443263973703551227544876798210360965031718315372628968604175458440071333630522761419957365107576178975399747567754566955113459994102915415473026570638652588430836813794099788554657491751906774084972937234104692006961718017260417636065742282464173255571058181332992615590223030822899469280867151277772938442427478296288891534956438090984577995880619045657186849091777897923185186173600222593951743497098508714513689380850627686475230788011782107673909950320894961118030460087819095943060705556996254008090381011325197298193388449937911570507757613397254258848227716195286265462688291270961342534481032573346533905295221801936029386296678523911187486267265831"}
J := {"x": "-0.73653380021321542115189174293074904259172655042318006783232736769880628596079606172641680715198348543126934326867642705910559451428168929371301278248949947159295603575476481350707342985935234079392216826579232977098390768235867029758130269776679282751259052233035833796435297982005084770405002556716813062846732285195082971710283712149080226655877853833393093994104888004520679874318924824796307638630974644870172409469590741080718926526278659632850282677181057905994183265744905074025351166238860080337763807428332673856988032994347195304297480815356224567480577275444257327014950875978884499631661012165142371368340357122058259467693900932741343795075118973391105460841397621398376533294001275091276338555782372696820871430430783238738710839035911381650238203084812226122823417744868367761020134180755696821165869609507117475701509119840470344449095543066028885222210836565663251880451922171173028219400429049439469567206767829847690554617499527215285818780151045434726770204419264974308316170342113726504509029069978848913619653353881269339944721345626320220367036101884683944373118056901528682678508011780102890871167005293976442844399595645154892240395340609947125480631544206235559687543229718996171993595255436116395551249819664696958313857383411302744306883310009993416815733598029177220533887080439469015242602927127533559219588367045046945227596184202172086285092367059316276419578693104764590224865318058858020620782376339451533963982555713406922657508737031092229030168754311703225480281934290621727498268771198727803237542974427067978146913030393861833785724774755958538376615787643724738601119768292003924181808281590580147406048816563763481282235878547261082702037434342629497134087212861502756828058918817000930750339465822100948837968575589113349637479630063474910533049266741533789673566199952421678148081298024336884576857089216862630583017746659740035263788939445017109228010004906990190036044901009928672574742921787060780769513148651228415759964906090432289397642386508397017537", "y": "-4.2069918854439986976879050004436791047192658173203807152676862582542511433529500843323754687322759855174831560311635646436782497316291467379942685113725201941595055576690416923213775051195208424860989643326299317628529535984455577061669638729748917625702599761859054928379242042587259177428642131456929219774021817967651511116432223048331664641879519518223636431478673817584640434731557762231352237210610582034273440066760811210111853368213733313746640809867720338715639269149172120001308891328632251341220065645340796983118230503295969037397984939640569420311862377996673909466625574174331598179071766768866716034489949498266762944374949380137947742129856561764740963428153036388801295989390571290943200914632574284429476278671156884842592964198061823121175880759082140548866368357105593139497571014924714037171566785264324579494033924346565303506442220719114422569532160770307062866502347428153884267328139333616513940084869668316506662126138676922773362843341122300085840628423679216028209647990530422480292606842327084905062770421830050881097863321374891238399568653316523906501686653465795805868289483461057266109735346298380758340094737133079279371105365042335795954352719622812089788041269428455694334836452292376107433626039135144177054985210484776598057974577078428365794997423011698804383449273910857378302858761715888537528599439730258891443203014959499852839652772466242059603627294014425582650578661711155527919741386711180854635133559151945330949384468749366290376289698666978567299825053301622163020610657576751051454563953748561676958444374648702465996281729115550660652889671167434099813988807692998264299926674693391212421617596768741646208846094411423406685294761764913820513396737590372535336509152246516287793942070282348931322051506609383102266118950494874119066699605080993700462835040434860284935174679387691131990827776084906054579400156448808129289665288297286527705057652564522476256180850310980739476728289489715299429116391411096928195960687792817309196711464754463758866"}
G := {"x": "7.9760682352655482495294003305167351194013051018130490022171337090194449800275860954169801117583509926508029845233807680002045224221739527748134851734946982537479186862175793778566668521731134568430555099147927689104989408410861238812124877740404008702299659893446185294790676821835260927077412693257512847159451268949830394956045823813660925661681747305916714924897319297188148802170103701361838354491029877552954914913674976212774379426690655881009266139937233221730620339716757620536077442064899001854668870336718401296915397872962979230954184207821162126227199508671507578240871614984034637906091891209928744703814831694626880956128527554830902633543849029639940047327829600987179394570431558401285092897240340347466985190397657229721182211695765434427772447111011197928260328722039683353267135996853088920635300881955876036350582722966937997351562374384728445429462686218192998058031802856328340243065531179860558128343864417410021958529479620904700152598025582643718029077525070468994706556536759732827479917833095759993796748299559971406731073733825257465774105757893569645346021372304619880002012758802251435636906470857159418838461459323482899022679198693766298499353772755365970443431015796315983874480720310917632737315993472269924277414168176282829413206815291616567716209486263876918630759871622469368370436882847416673995979605757785094674329671701925781289851349011215416929910815504418613979886167782438802556033617316500653765285017345114622024141586711602724807324697380645772799659090639256924554011275457718379784859474545592846329003860146438161445742841294279654848610282627107295111275888053304421013688786127208035914615466517066307153049461058497666237432673626542561519703162719259050386371409009567956985937528935515771955553486438172953545896218932659103742170384895875605029869533114319203757971401880303241184067807855037876561579242566376951768910237228759494161037579532818880357006951330995872647965807987488205149108989643430639262331754531747940717926644646382818681", "y": "-3.9028072542484175820872358568075271614215890227290140889764706850151497348039780302824798485804980214962879069503988649358878401348676722251440138175307545050855666696181309252264836144657996109430139823450051606949658436952373198073933107724768313744395581907871494531745375873068589115020183999005367181928864245938680999941208790969110991694163116512563162794374247818079150893098423238118353405306153609691239000783482829911372723515908886969141761320141277735615432490221255579099073585734565479018079169976588494637959622429633695062394765308876230585907052226138302030231005442090043946250213938368526599359232084250380765139189489263373580020542880063213772722709568760663448697835701788890170603040717286984528932807063877454512890852066810235783329866987204623490713727326864088539261961004076924002874512483856924590894730598558511143843304848407321304567590403864486803529248700067010891315409427595213621997558467410277663757135764086283125142254026342435523624944442733699849647654346898747708331520797320936426933537107550035531303594668829418310111992226808627678812331665538855871812779370653124780820530419769397392594913797006925120393602009037598246123657952345016870659628300828404993967045490859968159688276157823784384230189042531304277062215990624662835223894368202076074260784645816920627091889951289808289709989590598829704664283854317712686127439193152536362764951583604440723850933184501500934128240237994701872819639680090796203339864173878667117109104121895565134006815097901130054612546120166655563259108476449084810174952487689936776161618400561852366081723145117468313613539539228939502584184337738889752323285387682346934354725115228946363798294548190914245282794836369765522887650632810405124468588696864375582066569484987350840270632386042692485294178814174296645015463485659212006020115945205022822933443718581770449478029064995522836657964281613147730529436819591189237300981550593508610497616971546633665958960161508053661699718788798168522657396662087258020994"}
T := {"x": "8.0542556236230774399871522898604013577677591294073480044342674180388899600551721908339602235167019853016059690467615360004090448443479055496269703469893965074958373724351587557133337043462269136861110198295855378209978816821722477624249755480808017404599319786892370589581353643670521854154825386515025694318902537899660789912091647627321851323363494611833429849794638594376297604340207402723676708982059755105909829827349952425548758853381311762018532279874466443461240679433515241072154884129798003709337740673436802593830795745925958461908368415642324252454399017343015156481743229968069275812183782419857489407629663389253761912257055109661805267087698059279880094655659201974358789140863116802570185794480680694933970380795314459442364423391530868855544894222022395856520657444079366706534271993706177841270601763911752072701165445933875994703124748769456890858925372436385996116063605712656680486131062359721116256687728834820043917058959241809400305196051165287436058155050140937989413113073519465654959835666191519987593496599119942813462147467650514931548211515787139290692042744609239760004025517604502871273812941714318837676922918646965798045358397387532596998707545510731940886862031592631967748961440621835265474631986944539848554828336352565658826413630583233135432418972527753837261519743244938736740873765694833347991959211515570189348659343403851562579702698022430833859821631008837227959772335564877605112067234633001307530570034690229244048283173423205449614649394761291545599318181278513849108022550915436759569718949091185692658007720292876322891485682588559309697220565254214590222551776106608842027377572254416071829230933034132614306098922116995332474865347253085123039406325438518100772742818019135913971875057871031543911106972876345907091792437865318207484340769791751210059739066228638407515942803760606482368135615710075753123158485132753903537820474457518988322075159065637760714013902661991745295931615974976410298217979286861278524663509063495881435853289292765637363", "y": "-6.1422879153031744456906877468115967348857958433095906779529413700302994696079560605649596971609960429925758139007977298717756802697353444502880276350615090101711333392362618504529672289315992218860279646900103213899316873904746396147866215449536627488791163815742989063490751746137178230040367998010734363857728491877361999882417581938221983388326233025126325588748495636158301786196846476236706810612307219382478001566965659822745447031817773938283522640282555471230864980442511158198147171469130958036158339953176989275919244859267390124789530617752461171814104452276604060462010884180087892500427876737053198718464168500761530278378978526747160041085760126427545445419137521326897395671403577780341206081434573969057865614127754909025781704133620471566659733974409246981427454653728177078523922008153848005749024967713849181789461197117022287686609696814642609135180807728973607058497400134021782630818855190427243995116934820555327514271528172566250284508052684871047249888885467399699295308693797495416663041594641872853867074215100071062607189337658836620223984453617255357624663331077711743625558741306249561641060839538794785189827594013850240787204018075196492247315904690033741319256601656809987934090981719936319376552315647568768460378085062608554124431981249325670447788736404152148521569291633841254183779902579616579419979181197659409328567708635425372254878386305072725529903167208881447701866369003001868256480475989403745639279360181592406679728347757334234218208243791130268013630195802260109225092240333311126518216952898169620349904975379873552323236801123704732163446290234936627227079078457879005168368675477779504646570775364693868709450230457892727596589096381828490565589672739531045775301265620810248937177393728751164133138969974701680541264772085384970588357628348593290030926971318424012040231890410045645866887437163540898956058129991045673315928563226295461058873639182378474601963101187017220995233943093267331917920323016107323399437577596337045314793324174516041989"}
L := {"x": "-0.051955066836454759071087006741510859460981759509614645946935693416320493776402782897023207257328412555674891134801008839882204457558260779906889732045247111168088101083063125524268554949111859662510712090856032081546715121365093240048391139009711239643508853194228519665029736794492921159109371744884574012765454894253883048993784972731310515073449040888093989239845789663880798559461510540685171127190957115312270252082475780589280172964249654328426114937629685562046153893886221624907986545621632702983549381387853997220052434260549530488694062350645635074877953608033567335478723551544540226273776255800499810753961447810038124193698003385389650669441869424568185702385361178796622207503910567531238657962797669887653832187848623602744033539502116697528867104340870718237545877492299216531542019778635712694842503218126262918702927994250673766842219135166257909432142302355926580230901801115985732614000040107769212128226162415655233177718491772848991624421390301184727798951668331552928369230669644826607325828186568342009438845249426867757377783086153661706465816869383730403084446796208433368105809992352660229018738935687580162784995724542558300644142523690481346208203977219625157705737997791310993844132351682034657726247134018169492575359929962116327230762090191831577508721310580118799558341141489153386168499237497846731130586555442554140484341636185732634858380939839020300355291639207916656501860895196862200303028369118258057463401758715995260949833574524586820114521984540314336274816065031951140497492232453453419849733356038031401888978059240683016654594718213489554809225006821158911415039018976165165176799990493538484679910854250968488099884478883021139616845633099892812331238920247102595719082190563818001980692519087215964312218964025751384305259549032601926890665388933845463126983803957004812660134505165003999557668468407791017703739924522316673837716486637135798519168484115677498885361548314394414876283221124395498767889107467697202805646946903868796407882511090398788145", "y": "-5.5921964765690011692527820531147172166046307341023524475778850915865408470708336837785529478857859741250988485717194805853499676381124623349651456713447301031134584860348843377002208884357536452773391175067701619675152354441120039397478290462635154555640011756176438928755416347057188524841371788839891687360194941217815406943480798046664817328746150203254050155624744069520405802518016650712777197723795351294128580389119607469318525631277296554051158587657587630194457856602716622967238998337942426607973202431063502642607129109780165835263584704202357320690271158762322814880160562177051665102794472364814645246357101800524630073422378829971820960710005030507549510978618851416631650628763183207544822184816493150133641279321639711386748168345257480008567371878055570735021595883845512731245509786742889317056424205960550935662149721950397585549292811601229452557748216275356302923515006794985050276284675988898404027277518158227234812808632920995454769951457151759676444432491707893826363167087690284498048232935035636471684263728793017244479623220235968917720812594232045719044353970943633196559978556990115686643079060081707105292392057454624659436278085571229279299988006135455041578652598484844381976252011962940349492978245598057210814776344121498060712364917014622784903955445892486066829593489140862005936514608496981753853599032054279918589359938245618014321115989212398539145196530281769751632915878828738670362843610445020098023672507935456802116129895690811832333169934540997993318028333240810577744339203260768639779331042137065386553455794324228066605125552922798884724790241239571568886144814643221054576229507176923900845392242007605173016998823759692912868337464202505660815472324615837982459188157469859834139435676731277683409696895845852375125821988403364303224606934841338469871333605196815628124631764957525185576408848499984740725279481797059766068139309783299095806375391863239971665352171010064405817210539260748551857825344408010901160472595327483754562806041747248698331"}
F := {"x": "-0.22841536521785543534027817652872659348125245460445107356301432784848724422668393184318580385783047560567367850071911812406356962354383734709433411265719134587343866841539393357872768141344742344666958698241658132941370821067281876176160884412599941292274377424714217101106509158170085678972661068281765110075483154191399676048009922601697048827573469911276625260044872676715005947549143419532856773056211782082968220709077909232662016915537210549632789041880094747851446149117275859738700930730329682320213694125260915234900613648410235222326402741592045005432423653967207518755050936620836139020284210425274715344217934146426504667088043491028272304724560536566991425179541563583607764297569556590140057924188215200034376200752036513246834547478471522334793251281817032155304835946720681751825498148729170841464174402033219261488356072794310293141029442176710056508283298734297004077266256454133070796734348846475028435338921815315309491831152298656242646192560240704294139652840513714680714212234597877283369100645174783449668879296077630955356747030956137211751701056605036844223686652261080099907882932323601381625349255093840307617577621215991619687749367099714620515388799587488735452899137456887285756285639377372751039807506193411492174768551970924370838630594140066178177523390825669981073180564540162592061148852049591546443934897016628064368524582785932277902955050501608798273712059130916513426177824581328533637364765563898667555546801241507331324963030996850573148242869673047267048971147662581197342766650841388585619008195230055097439865862355678939389908487016247882028507662175370214676458483638033043516147833187025219885116960599459669649780453714095476550408286141685803825160831938582169432390079762192689384586709724865096492897918860736409935202557814366740198591726362387499439769863770950517988339780901582773865497883086508444833037276000598757640177955562754730067151248191402702679041643247895635669837011410309975393175324170483161972380147261809913163788720601368128045", "y": "-0.5379360137172023926899469131709561954253107990632308991249628032291554497251830244713092826873095806221423409540155529299201625281571488266768406543202337210729639977398041512378747878858967017582313133073104171475326085886484542248921430796454545601896684655486981475209871533376890300691764136931533757494856682145529273726067713897920173488194264052054912114478800670934611704655616729541559521272368192026614810541254067044954904623409480044415708709282962414646382055346464456051242624695357653405080532061338723060535268205664152056426856305054002283468288334622676014391434521170933212135883180362965316851040748581372856971654870995030835552989672315608993962288563688288233494953662291662391612130998569823821578058312781289484245198213622099052070247887209414557254634667150110166706048202105137187301272015490038886679949418967301609619108384398008787162511285397807262431905911874969066441562007938619403471295692456470063916545457948119006008087654115288661841359247034806632263655980609885670245244768857823815323910127468608869252467417643476971579829718221627897511518995268292211202638756782198834949531482714533167764895180446616556035728031964572146638188723414537048170605538827709917633827929751098540467171032766016598259184066297319406264416692365239350294457423424697897132925098798575076449728725338331223976618866137613559309419696909832190670771167812495355550421045364163451607506886832129588633179719370405703359335719656771551227090939581326985806311351131005504645773332935683739487242434490836188647665608523852423929739519271781241098799235503889916382450110453589867719453076361283528238715131541977398954487550760080543941563776306010074292690029804966373762862350479326255010272552375768475754005254879121516442145028702030010357054089188095526487928859735653675879497632371248081798979997855682734062810289508610561847168233197865613279947288894609882867817439257038478894304714869179680773344370987847366614386372397241560102217240588128155866514525399009244836"}
S := {"x": "-8.3547115773437299297522047242305220679973559834276521471260286556969744884533678636863716077156609512113473570014382362481271392470876746941886682253143826917468773368307878671574553628268948468933391739648331626588274164213456375235232176882519988258454875484942843420221301831634017135794532213656353022015096630838279935209601984520339409765514693982255325052008974535343001189509828683906571354611242356416593644141815581846532403383107442109926557808376018949570289229823455171947740186146065936464042738825052183046980122729682047044465280548318409001086484730793441503751010187324167227804056842085054943068843586829285300933417608698205654460944912107313398285035908312716721552859513911318028011584837643040006875240150407302649366909495694304466958650256363406431060967189344136350365099629745834168292834880406643852297671214558862058628205888435342011301656659746859400815453251290826614159346869769295005687067784363063061898366230459731248529238512048140858827930568102742936142842446919575456673820129034956689933775859215526191071349406191227442350340211321007368844737330452216019981576586464720276325069851018768061523515524243198323937549873419942924103077759917497747090579827491377457151257127875474550207961501238682298434953710394184874167726118828013235635504678165133996214636112908032518412229770409918309288786979403325612873704916557186455580591010100321759654742411826183302685235564916265706727472953112779733511109360248301466264992606199370114629648573934609453409794229532516239468553330168277717123801639046011019487973172471135787877981697403249576405701532435074042935291696727606608703229566637405043977023392119891933929956090742819095310081657228337160765032166387716433886478015952438537876917341944973019298579583772147281987040511562873348039718345272477499887953972754190103597667956180316554773099576617301688966607455200119751528035591112550946013430249638280540535808328649579127133967402282061995078635064834096632394476029452361982632757744120273625613", "y": "0.58745456575925593310389014046154519710676060402197570175007439354168910054963395105738143462538083875571531809196889414015967494368570234664631869135953255785407200452039169752425042422820659648353737338537916570493478282270309155021571384070909087962066306890260370495802569332462193986164717261369324850102866357089414525478645722041596530236114718958901757710423986581307765906887665409168809574552636159467703789174918659100901907531810399111685825814340751707072358893070710878975147506092846931898389358773225538789294635886716958871462873898919954330634233307546479712171309576581335757282336392740693662979185028372542860566902580099383288940206553687820120754228726234235330100926754166752167757380028603523568438833744374210315096035727558018958595042255811708854907306656997796665879035957897256253974559690199222266401011620653967807617832312039824256749774292043854751361881762500618671168759841227611930574086150870598721669090841037619879838246917694226763172815059303867354726880387802286595095104622843523693521797450627822614950651647130460568403405635567442049769620094634155775947224864356023301009370345709336644702096391067668879285439360708557067236225531709259036587889223445801647323441404978029190656579344679668034816318674053611874711666152695212994110851531506042057341498024028498471005425493233375520467622677247728813811606061803356186584576643750092888991579092716730967849862263357408227336405612591885932813285606864568975458181208373460283873772977379889907084533341286325210255151310183276227046687829522951521405209614564375178024015289922201672350997790928202645610938472774329435225697369160452020910248984798389121168724473879798514146199403900672524742752990413474899794548952484630484919894902417569671157099425959399792858918216238089470241422805286926482410047352575038364020400042886345318743794209827788763056635336042687734401054222107802342643651214859230422113905702616406384533112580243052667712272552055168797955655188237436882669709492019815103286"}

Need to prove:
M == midpoint(S, T)

Proof:
By line_definition on A, T, Line(A, G) we get Line(A, G) == Line(A, T)
By line_definition on T, B, Line(B, C) we get Line(B, C) == Line(B, T)
By line_definition on G, C, Line(C, J) we get Line(C, G) == Line(C, J)
By line_definition on C, S, Line(B, C) we get Line(B, C) == Line(C, S)
By line_definition on F, J, Line(B, J) we get Line(B, J) == Line(F, J)
By line_definition on B, K, Line(A, B) we get Line(A, B) == Line(B, K)
By line_definition on L, A, Line(A, C) we get Line(A, C) == Line(A, L)
By line_definition on L, F, Line(L, M) we get Line(F, L) == Line(L, M)
By line_definition on J, C, external_angle_bisector(A, C, B) we get Line(C, J) == external_angle_bisector(A, C, B)
By line_definition on T, G, Line(A, G) we get Line(A, G) == Line(G, T)
By line_definition on S, T, Line(B, C) we get Line(B, C) == Line(S, T)
By line_definition on M, S, Line(B, C) we get Line(B, C) == Line(M, S)
By line_definition on G, M, Line(K, M) we get Line(G, M) == Line(K, M)
By line_definition on B, F, Line(B, J) we get Line(B, F) == Line(B, J)
By line_definition on M, F, Line(L, M) we get Line(F, M) == Line(L, M)
By line_definition on S, B, Line(B, C) we get Line(B, C) == Line(B, S)
By line_definition on F, S, Line(A, F) we get Line(A, F) == Line(F, S)
By line_definition on A, S, Line(A, F) we get Line(A, F) == Line(A, S)
By line_definition on J, A, internal_angle_bisector(B, A, C) we get Line(A, J) == internal_angle_bisector(B, A, C)
By line_definition on T, M, Line(B, C) we get Line(B, C) == Line(M, T)
By line_definition on K, A, Line(A, B) we get Line(A, B) == Line(A, K)
By line_definition on T, C, Line(B, C) we get Line(B, C) == Line(C, T)
By line_definition on C, L, Line(A, C) we get Line(A, C) == Line(C, L)
By line_definition on J, G, Line(C, J) we get Line(C, J) == Line(G, J)
By line_definition on G, K, Line(K, M) we get Line(G, K) == Line(K, M)
By line_definition on B, J, external_angle_bisector(A, B, C) we get Line(B, J) == external_angle_bisector(A, B, C)
By line_definition on B, M, Line(B, C) we get Line(B, C) == Line(B, M)
By line_definition on M, C, Line(B, C) we get Line(B, C) == Line(C, M)
By tangent_definition_from_perpendicularity_v0 on L, Line(A, C), excircle(A, B, C) we get perpendicular(Line(A, C), Line(L, center(excircle(A, B, C))))
By tangent_definition_from_perpendicularity_v0 on M, Line(B, C), excircle(A, B, C) we get perpendicular(Line(B, C), Line(M, center(excircle(A, B, C))))
By tangent_definition_from_perpendicularity_v0 on K, Line(A, B), excircle(A, B, C) we get perpendicular(Line(A, B), Line(K, center(excircle(A, B, C))))
By tangent_lengths_equal on B, Line(B, C), Line(A, B), excircle(A, B, C) we get distance(B, line_circle_tangent_point(Line(A, B), excircle(A, B, C))) == distance(B, line_circle_tangent_point(Line(B, C), excircle(A, B, C)))
By tangent_lengths_equal on A, Line(A, C), Line(A, B), excircle(A, B, C) we get distance(A, line_circle_tangent_point(Line(A, B), excircle(A, B, C))) == distance(A, line_circle_tangent_point(Line(A, C), excircle(A, B, C)))
By circle_definition on L, M, K, excircle(A, B, C) we get Circle(K, L, M) == excircle(A, B, C)
By tangent_lengths_equal on C, Line(B, C), Line(A, C), excircle(A, B, C) we get distance(C, line_circle_tangent_point(Line(A, C), excircle(A, B, C))) == distance(C, line_circle_tangent_point(Line(B, C), excircle(A, B, C)))
By line_intersection_definition on M, Line(K, M), Line(L, M) we get M == line_intersection(Line(K, M), Line(L, M))
By line_intersection_definition on A, Line(A, G), Line(A, F) we get A == line_intersection(Line(A, F), Line(A, G))
By line_intersection_definition on J, Line(C, J), Line(B, J) we get J == line_intersection(Line(B, J), Line(C, J))
By line_intersection_definition on A, Line(A, B), Line(A, G) we get A == line_intersection(Line(A, B), Line(A, G))
By line_intersection_definition on J, Line(B, J), external_angle_bisector(A, C, B) we get J == line_intersection(Line(B, J), external_angle_bisector(A, C, B))
By line_intersection_definition on K, Line(K, M), Line(A, B) we get K == line_intersection(Line(A, B), Line(K, M))
By line_intersection_definition on A, Line(A, B), Line(A, F) we get A == line_intersection(Line(A, B), Line(A, F))
By line_intersection_definition on A, Line(A, C), Line(A, G) we get A == line_intersection(Line(A, C), Line(A, G))
By line_intersection_definition on T, Line(B, C), Line(A, G) we get T == line_intersection(Line(A, G), Line(B, C))
By line_intersection_definition on A, Line(A, B), internal_angle_bisector(B, A, C) we get A == line_intersection(Line(A, B), internal_angle_bisector(B, A, C))
By line_intersection_definition on F, Line(B, J), Line(L, M) we get F == line_intersection(Line(B, J), Line(L, M))
By line_intersection_definition on B, Line(B, C), external_angle_bisector(A, B, C) we get B == line_intersection(Line(B, C), external_angle_bisector(A, B, C))
By line_intersection_definition on A, Line(A, C), Line(A, F) we get A == line_intersection(Line(A, C), Line(A, F))
By line_intersection_definition on B, Line(B, C), Line(B, J) we get B == line_intersection(Line(B, C), Line(B, J))
By line_intersection_definition on C, Line(A, C), external_angle_bisector(A, C, B) we get C == line_intersection(Line(A, C), external_angle_bisector(A, C, B))
By line_intersection_definition on C, Line(B, C), Line(A, C) we get C == line_intersection(Line(A, C), Line(B, C))
By line_intersection_definition on G, Line(C, J), Line(K, M) we get G == line_intersection(Line(C, J), Line(K, M))
By line_intersection_definition on L, Line(A, C), Line(L, M) we get L == line_intersection(Line(A, C), Line(L, M))
By line_intersection_definition on B, Line(B, C), Line(A, B) we get B == line_intersection(Line(A, B), Line(B, C))
By line_intersection_definition on A, Line(A, C), internal_angle_bisector(B, A, C) we get A == line_intersection(Line(A, C), internal_angle_bisector(B, A, C))
By line_intersection_definition on A, Line(A, G), internal_angle_bisector(B, A, C) we get A == line_intersection(Line(A, G), internal_angle_bisector(B, A, C))
By line_intersection_definition on B, Line(B, J), Line(A, B) we get B == line_intersection(Line(A, B), Line(B, J))
By line_intersection_definition on F, Line(L, M), Line(A, F) we get F == line_intersection(Line(A, F), Line(L, M))
By line_intersection_definition on M, Line(B, C), Line(K, M) we get M == line_intersection(Line(B, C), Line(K, M))
By line_intersection_definition on C, Line(B, C), Line(C, J) we get C == line_intersection(Line(B, C), Line(C, J))
By line_intersection_definition on M, Line(B, C), Line(L, M) we get M == line_intersection(Line(B, C), Line(L, M))
By line_intersection_definition on A, Line(A, B), Line(A, C) we get A == line_intersection(Line(A, B), Line(A, C))
By line_intersection_definition on F, Line(A, F), Line(B, J) we get F == line_intersection(Line(A, F), Line(B, J))
By line_intersection_definition on G, Line(C, J), Line(A, G) we get G == line_intersection(Line(A, G), Line(C, J))
By line_intersection_definition on J, external_angle_bisector(A, B, C), Line(C, J) we get J == line_intersection(Line(C, J), external_angle_bisector(A, B, C))
By line_intersection_definition on J, Line(B, J), internal_angle_bisector(B, A, C) we get J == line_intersection(Line(B, J), internal_angle_bisector(B, A, C))
By line_intersection_definition on C, Line(A, C), Line(C, J) we get C == line_intersection(Line(A, C), Line(C, J))
By line_intersection_definition on B, Line(A, B), external_angle_bisector(A, B, C) we get B == line_intersection(Line(A, B), external_angle_bisector(A, B, C))
By line_intersection_definition on C, external_angle_bisector(A, C, B), Line(B, C) we get C == line_intersection(Line(B, C), external_angle_bisector(A, C, B))
By line_intersection_definition on A, internal_angle_bisector(B, A, C), Line(A, F) we get A == line_intersection(Line(A, F), internal_angle_bisector(B, A, C))
By line_intersection_definition on G, Line(K, M), Line(A, G) we get G == line_intersection(Line(A, G), Line(K, M))
By line_intersection_definition on S, Line(A, F), Line(B, C) we get S == line_intersection(Line(A, F), Line(B, C))
By line_intersection_definition on J, Line(C, J), internal_angle_bisector(B, A, C) we get J == line_intersection(Line(C, J), internal_angle_bisector(B, A, C))
By between_imply_not_between on S, midpoint(S, T), T we get collinear_and_not_between(T, S, midpoint(S, T))
By between_imply_not_between on T, midpoint(S, T), S we get collinear_and_not_between(S, T, midpoint(S, T))
By circle_radius_v0_r on M, excircle(A, B, C) we get radius(excircle(A, B, C)) == distance(M, center(excircle(A, B, C)))
By circle_radius_v0_r on L, excircle(A, B, C) we get radius(excircle(A, B, C)) == distance(L, center(excircle(A, B, C)))
By circle_radius_v0_r on K, excircle(A, B, C) we get radius(excircle(A, B, C)) == distance(K, center(excircle(A, B, C)))
By in_imply_collinear on S, F, A we get collinear(A, F, S)
By in_imply_collinear on L, A, C we get collinear(A, C, L)
By in_imply_collinear on T, G, A we get collinear(A, G, T)
By in_imply_collinear on F, J, B we get collinear(B, F, J)
By in_imply_collinear on G, M, K we get collinear(G, K, M)
By in_imply_collinear on S, B, C we get collinear(B, C, S)
By in_imply_collinear on K, A, B we get collinear(A, B, K)
By in_imply_collinear on M, B, C we get collinear(B, C, M)
By in_imply_collinear on G, J, C we get collinear(C, G, J)
By in_imply_collinear on F, L, M we get collinear(F, L, M)
By in_imply_collinear on T, C, B we get collinear(B, C, T)
By power_of_a_point_in_circle on M, excircle(A, B, C) we get 0 == power_of_a_point(M, excircle(A, B, C))
By power_of_a_point_in_circle on K, excircle(A, B, C) we get 0 == power_of_a_point(K, excircle(A, B, C))
By angle_to_center on M, K, L, excircle(A, B, C) we get 2 * angle(M, K, L) == angle(M, center(excircle(A, B, C)), L) mod 360
By power_of_a_point_on_circle on L, excircle(A, B, C) we get 0 == power_of_a_point(L, excircle(A, B, C))
By angle_to_center on M, L, K, excircle(A, B, C) we get 2 * angle(M, L, K) == angle(M, center(excircle(A, B, C)), K) mod 360
By angle_to_center on L, M, K, excircle(A, B, C) we get 2 * angle(L, M, K) == angle(L, center(excircle(A, B, C)), K) mod 360
By angle_to_center on K, M, L, excircle(A, B, C) we get 2 * angle(K, M, L) == angle(K, center(excircle(A, B, C)), L) mod 360
By angle_to_center on K, L, M, excircle(A, B, C) we get 2 * angle(K, L, M) == angle(K, center(excircle(A, B, C)), M) mod 360
By angle_to_center on L, K, M, excircle(A, B, C) we get 2 * angle(L, K, M) == angle(L, center(excircle(A, B, C)), M) mod 360
By log_of_2_times_distance on T, S, midpoint(S, T), T we get log(distance(S, T)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(T, midpoint(S, T)))
By log_of_2_times_distance on S, T, S, midpoint(S, T) we get log(distance(S, T)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(S, midpoint(S, T)))
By collinear_definition on T, S, midpoint(S, T) we get S in Line(T, midpoint(S, T)), midpoint(S, T) in Line(S, T), Line(S, T) == Line(T, midpoint(S, T)), 0 == 2 * angle(S, T, midpoint(S, T)) mod 360
By collinear_definition on T, midpoint(S, T), S we get midpoint(S, T) in Line(S, T), S in Line(T, midpoint(S, T)), Line(S, T) == Line(T, midpoint(S, T)), 0 == 2 * angle(midpoint(S, T), T, S) mod 360
By collinear_definition on midpoint(S, T), T, S we get T in Line(S, midpoint(S, T)), S in Line(T, midpoint(S, T)), Line(S, midpoint(S, T)) == Line(T, midpoint(S, T)), 0 == 2 * angle(T, midpoint(S, T), S) mod 360
By collinear_definition on midpoint(S, T), S, T we get S in Line(T, midpoint(S, T)), T in Line(S, midpoint(S, T)), Line(S, midpoint(S, T)) == Line(T, midpoint(S, T)), 0 == 2 * angle(S, midpoint(S, T), T) mod 360
By collinear_definition on S, T, midpoint(S, T) we get T in Line(S, midpoint(S, T)), midpoint(S, T) in Line(S, T), Line(S, T) == Line(S, midpoint(S, T)), 0 == 2 * angle(T, S, midpoint(S, T)) mod 360
By collinear_definition on S, midpoint(S, T), T we get midpoint(S, T) in Line(S, T), T in Line(S, midpoint(S, T)), Line(S, T) == Line(S, midpoint(S, T)), 0 == 2 * angle(midpoint(S, T), S, T) mod 360
By between_implies_angles on T, midpoint(S, T), S we get 180 == angle(T, midpoint(S, T), S) mod 360, 0 == angle(midpoint(S, T), S, T) mod 360, 0 == angle(S, T, midpoint(S, T)) mod 360
By between_implies_angles on S, midpoint(S, T), T we get 180 == angle(S, midpoint(S, T), T) mod 360, 0 == angle(midpoint(S, T), T, S) mod 360, 0 == angle(T, S, midpoint(S, T)) mod 360
By concurrent_sufficient_conditions on Line(B, C), Line(G, K), Line(F, L) we get concurrent(Line(B, C), Line(F, L), Line(G, K))
By concurrent_sufficient_conditions on Line(A, G), Line(A, C), Line(A, J) we get concurrent(Line(A, C), Line(A, G), Line(A, J))
By concurrent_sufficient_conditions on Line(B, F), Line(A, F), Line(F, L) we get concurrent(Line(A, F), Line(B, F), Line(F, L))
By concurrent_sufficient_conditions on Line(A, G), Line(A, B), Line(A, C) we get concurrent(Line(A, B), Line(A, C), Line(A, G))
By concurrent_sufficient_conditions on Line(A, J), Line(A, B), Line(A, F) we get concurrent(Line(A, B), Line(A, F), Line(A, J))
By concurrent_sufficient_conditions on Line(A, G), Line(A, J), Line(A, F) we get concurrent(Line(A, F), Line(A, G), Line(A, J))
By concurrent_sufficient_conditions on Line(A, C), Line(A, F), Line(A, B) we get concurrent(Line(A, B), Line(A, C), Line(A, F))
By concurrent_sufficient_conditions on Line(G, K), Line(F, L), Line(B, C) we get concurrent(Line(B, C), Line(F, L), Line(G, K))
By concurrent_sufficient_conditions on Line(A, G), Line(A, B), Line(A, J) we get concurrent(Line(A, B), Line(A, G), Line(A, J))
By concurrent_sufficient_conditions on Line(A, C), Line(A, B), Line(A, G) we get concurrent(Line(A, B), Line(A, C), Line(A, G))
By concurrent_sufficient_conditions on Line(A, J), Line(A, G), Line(A, F) we get concurrent(Line(A, F), Line(A, G), Line(A, J))
By concurrent_sufficient_conditions on Line(A, G), Line(A, B), Line(A, F) we get concurrent(Line(A, B), Line(A, F), Line(A, G))
By concurrent_sufficient_conditions on Line(A, F), Line(A, B), Line(A, J) we get concurrent(Line(A, B), Line(A, F), Line(A, J))
By concurrent_sufficient_conditions on Line(A, C), Line(A, G), Line(A, B) we get concurrent(Line(A, B), Line(A, C), Line(A, G))
By concurrent_sufficient_conditions on Line(A, C), Line(A, B), Line(A, J) we get concurrent(Line(A, B), Line(A, C), Line(A, J))
By concurrent_sufficient_conditions on Line(A, C), Line(A, J), Line(A, F) we get concurrent(Line(A, C), Line(A, F), Line(A, J))
By concurrent_sufficient_conditions on Line(G, K), Line(B, C), Line(F, L) we get concurrent(Line(B, C), Line(F, L), Line(G, K))
By concurrent_sufficient_conditions on Line(C, G), Line(G, K), Line(A, G) we get concurrent(Line(A, G), Line(C, G), Line(G, K))
By concurrent_sufficient_conditions on Line(B, C), Line(F, L), Line(G, K) we get concurrent(Line(B, C), Line(F, L), Line(G, K))
By concurrent_sufficient_conditions on Line(A, J), Line(A, B), Line(A, G) we get concurrent(Line(A, B), Line(A, G), Line(A, J))
By concurrent_sufficient_conditions on Line(A, G), Line(C, G), Line(G, K) we get concurrent(Line(A, G), Line(C, G), Line(G, K))
By concurrent_sufficient_conditions on Line(A, J), Line(A, C), Line(A, B) we get concurrent(Line(A, B), Line(A, C), Line(A, J))
By line_definition on B, midpoint(S, T), Line(B, C) we get Line(B, C) == Line(B, midpoint(S, T))
By concurrent_sufficient_conditions on Line(B, F), Line(A, B), Line(B, C) we get concurrent(Line(A, B), Line(B, C), Line(B, F))
By concurrent_sufficient_conditions on Line(B, F), Line(F, L), Line(A, F) we get concurrent(Line(A, F), Line(B, F), Line(F, L))
By concurrent_sufficient_conditions on Line(A, G), Line(A, F), Line(A, B) we get concurrent(Line(A, B), Line(A, F), Line(A, G))
By concurrent_sufficient_conditions on Line(A, B), Line(A, F), Line(A, G) we get concurrent(Line(A, B), Line(A, F), Line(A, G))
By concurrent_sufficient_conditions on Line(A, J), Line(A, B), Line(A, C) we get concurrent(Line(A, B), Line(A, C), Line(A, J))
By concurrent_sufficient_conditions on Line(A, C), Line(B, C), Line(C, G) we get concurrent(Line(A, C), Line(B, C), Line(C, G))
By concurrent_sufficient_conditions on Line(A, B), Line(A, J), Line(A, C) we get concurrent(Line(A, B), Line(A, C), Line(A, J))
By concurrent_sufficient_conditions on Line(A, F), Line(A, G), Line(A, B) we get concurrent(Line(A, B), Line(A, F), Line(A, G))
By concurrent_sufficient_conditions on Line(A, G), Line(A, C), Line(A, F) we get concurrent(Line(A, C), Line(A, F), Line(A, G))
By concurrent_sufficient_conditions on Line(B, C), Line(B, F), Line(A, B) we get concurrent(Line(A, B), Line(B, C), Line(B, F))
By concurrent_sufficient_conditions on Line(B, F), Line(B, C), Line(A, B) we get concurrent(Line(A, B), Line(B, C), Line(B, F))
By concurrent_sufficient_conditions on Line(A, F), Line(A, J), Line(A, B) we get concurrent(Line(A, B), Line(A, F), Line(A, J))
By concurrent_sufficient_conditions on Line(A, F), Line(A, C), Line(A, G) we get concurrent(Line(A, C), Line(A, F), Line(A, G))
By concurrent_sufficient_conditions on Line(C, G), Line(A, C), Line(B, C) we get concurrent(Line(A, C), Line(B, C), Line(C, G))
By concurrent_sufficient_conditions on Line(A, F), Line(A, C), Line(A, J) we get concurrent(Line(A, C), Line(A, F), Line(A, J))
By concurrent_sufficient_conditions on Line(B, C), Line(A, C), Line(C, G) we get concurrent(Line(A, C), Line(B, C), Line(C, G))
By concurrent_sufficient_conditions on Line(A, C), Line(A, G), Line(A, J) we get concurrent(Line(A, C), Line(A, G), Line(A, J))
By concurrent_sufficient_conditions on Line(C, G), Line(B, C), Line(A, C) we get concurrent(Line(A, C), Line(B, C), Line(C, G))
By concurrent_sufficient_conditions on Line(A, C), Line(A, F), Line(A, G) we get concurrent(Line(A, C), Line(A, F), Line(A, G))
By concurrent_sufficient_conditions on Line(A, B), Line(A, C), Line(A, F) we get concurrent(Line(A, B), Line(A, C), Line(A, F))
By concurrent_sufficient_conditions on Line(A, B), Line(A, G), Line(A, C) we get concurrent(Line(A, B), Line(A, C), Line(A, G))
By concurrent_sufficient_conditions on Line(A, B), Line(A, F), Line(A, C) we get concurrent(Line(A, B), Line(A, C), Line(A, F))
By concurrent_sufficient_conditions on Line(A, B), Line(A, F), Line(A, J) we get concurrent(Line(A, B), Line(A, F), Line(A, J))
By concurrent_sufficient_conditions on Line(A, F), Line(A, G), Line(A, J) we get concurrent(Line(A, F), Line(A, G), Line(A, J))
By concurrent_sufficient_conditions on Line(A, J), Line(A, F), Line(A, B) we get concurrent(Line(A, B), Line(A, F), Line(A, J))
By concurrent_sufficient_conditions on Line(A, G), Line(A, J), Line(A, C) we get concurrent(Line(A, C), Line(A, G), Line(A, J))
By concurrent_sufficient_conditions on Line(A, C), Line(A, J), Line(A, G) we get concurrent(Line(A, C), Line(A, G), Line(A, J))
By concurrent_sufficient_conditions on Line(A, B), Line(A, C), Line(A, G) we get concurrent(Line(A, B), Line(A, C), Line(A, G))
By line_definition on C, midpoint(S, T), Line(B, C) we get Line(B, C) == Line(C, midpoint(S, T))
By concurrent_sufficient_conditions on Line(A, B), Line(A, G), Line(A, J) we get concurrent(Line(A, B), Line(A, G), Line(A, J))
By concurrent_sufficient_conditions on Line(A, B), Line(A, J), Line(A, G) we get concurrent(Line(A, B), Line(A, G), Line(A, J))
By concurrent_sufficient_conditions on Line(A, J), Line(A, C), Line(A, G) we get concurrent(Line(A, C), Line(A, G), Line(A, J))
By concurrent_sufficient_conditions on Line(A, J), Line(A, F), Line(A, C) we get concurrent(Line(A, C), Line(A, F), Line(A, J))
By concurrent_sufficient_conditions on Line(F, L), Line(B, F), Line(A, F) we get concurrent(Line(A, F), Line(B, F), Line(F, L))
By concurrent_sufficient_conditions on Line(A, B), Line(A, J), Line(A, F) we get concurrent(Line(A, B), Line(A, F), Line(A, J))
By concurrent_sufficient_conditions on Line(A, B), Line(A, G), Line(A, F) we get concurrent(Line(A, B), Line(A, F), Line(A, G))
By concurrent_sufficient_conditions on Line(A, F), Line(A, B), Line(A, G) we get concurrent(Line(A, B), Line(A, F), Line(A, G))
By concurrent_sufficient_conditions on Line(A, F), Line(A, C), Line(A, B) we get concurrent(Line(A, B), Line(A, C), Line(A, F))
By concurrent_sufficient_conditions on Line(A, B), Line(B, F), Line(B, C) we get concurrent(Line(A, B), Line(B, C), Line(B, F))
By concurrent_sufficient_conditions on Line(A, B), Line(A, C), Line(A, J) we get concurrent(Line(A, B), Line(A, C), Line(A, J))
By concurrent_sufficient_conditions on Line(B, C), Line(C, G), Line(A, C) we get concurrent(Line(A, C), Line(B, C), Line(C, G))
By concurrent_sufficient_conditions on Line(A, F), Line(F, L), Line(B, F) we get concurrent(Line(A, F), Line(B, F), Line(F, L))
By concurrent_sufficient_conditions on Line(A, B), Line(B, C), Line(B, F) we get concurrent(Line(A, B), Line(B, C), Line(B, F))
By concurrent_sufficient_conditions on Line(A, J), Line(A, C), Line(A, F) we get concurrent(Line(A, C), Line(A, F), Line(A, J))
By concurrent_sufficient_conditions on Line(A, J), Line(A, G), Line(A, B) we get concurrent(Line(A, B), Line(A, G), Line(A, J))
By concurrent_sufficient_conditions on Line(A, G), Line(G, K), Line(C, G) we get concurrent(Line(A, G), Line(C, G), Line(G, K))
By concurrent_sufficient_conditions on Line(A, G), Line(A, J), Line(A, B) we get concurrent(Line(A, B), Line(A, G), Line(A, J))
By concurrent_sufficient_conditions on Line(A, F), Line(A, B), Line(A, C) we get concurrent(Line(A, B), Line(A, C), Line(A, F))
By concurrent_sufficient_conditions on Line(F, L), Line(A, F), Line(B, F) we get concurrent(Line(A, F), Line(B, F), Line(F, L))
By concurrent_sufficient_conditions on Line(A, C), Line(A, G), Line(A, F) we get concurrent(Line(A, C), Line(A, F), Line(A, G))
By concurrent_sufficient_conditions on Line(A, J), Line(A, G), Line(A, C) we get concurrent(Line(A, C), Line(A, G), Line(A, J))
By concurrent_sufficient_conditions on Line(F, L), Line(B, C), Line(G, K) we get concurrent(Line(B, C), Line(F, L), Line(G, K))
By concurrent_sufficient_conditions on Line(A, C), Line(A, F), Line(A, J) we get concurrent(Line(A, C), Line(A, F), Line(A, J))
By concurrent_sufficient_conditions on Line(A, F), Line(A, G), Line(A, C) we get concurrent(Line(A, C), Line(A, F), Line(A, G))
By concurrent_sufficient_conditions on Line(A, F), Line(A, J), Line(A, C) we get concurrent(Line(A, C), Line(A, F), Line(A, J))
By concurrent_sufficient_conditions on Line(G, K), Line(A, G), Line(C, G) we get concurrent(Line(A, G), Line(C, G), Line(G, K))
By concurrent_sufficient_conditions on Line(A, F), Line(B, F), Line(F, L) we get concurrent(Line(A, F), Line(B, F), Line(F, L))
By concurrent_sufficient_conditions on Line(A, G), Line(A, F), Line(A, C) we get concurrent(Line(A, C), Line(A, F), Line(A, G))
By concurrent_sufficient_conditions on Line(A, G), Line(A, C), Line(A, B) we get concurrent(Line(A, B), Line(A, C), Line(A, G))
By concurrent_sufficient_conditions on Line(A, G), Line(A, F), Line(A, J) we get concurrent(Line(A, F), Line(A, G), Line(A, J))
By concurrent_sufficient_conditions on Line(G, K), Line(C, G), Line(A, G) we get concurrent(Line(A, G), Line(C, G), Line(G, K))
By concurrent_sufficient_conditions on Line(A, C), Line(C, G), Line(B, C) we get concurrent(Line(A, C), Line(B, C), Line(C, G))
By concurrent_sufficient_conditions on Line(A, C), Line(A, B), Line(A, F) we get concurrent(Line(A, B), Line(A, C), Line(A, F))
By concurrent_sufficient_conditions on Line(C, G), Line(A, G), Line(G, K) we get concurrent(Line(A, G), Line(C, G), Line(G, K))
By concurrent_sufficient_conditions on Line(B, C), Line(A, B), Line(B, F) we get concurrent(Line(A, B), Line(B, C), Line(B, F))
By concurrent_sufficient_conditions on Line(A, F), Line(A, J), Line(A, G) we get concurrent(Line(A, F), Line(A, G), Line(A, J))
By concurrent_sufficient_conditions on Line(A, J), Line(A, F), Line(A, G) we get concurrent(Line(A, F), Line(A, G), Line(A, J))
By concurrent_sufficient_conditions on Line(A, C), Line(A, J), Line(A, B) we get concurrent(Line(A, B), Line(A, C), Line(A, J))
By concurrent_sufficient_conditions on Line(F, L), Line(G, K), Line(B, C) we get concurrent(Line(B, C), Line(F, L), Line(G, K))
By perpendicular_line_definition on L, Line(J, L), Line(A, C) we get Line(J, L) == perpendicular_line(L, Line(A, C))
By perpendicular_line_definition on C, Line(A, C), Line(J, L) we get Line(A, C) == perpendicular_line(C, Line(J, L))
By perpendicular_line_definition on S, Line(B, C), Line(J, M) we get Line(B, C) == perpendicular_line(S, Line(J, M))
By line_intersection_definition on L, Line(F, L), Line(K, L) we get L == line_intersection(Line(F, L), Line(K, L))
By line_intersection_definition on L, Line(J, L), Line(K, L) we get L == line_intersection(Line(J, L), Line(K, L))
By line_intersection_definition on J, Line(B, F), Line(J, L) we get J == line_intersection(Line(B, F), Line(J, L))
By perpendicular_line_definition on B, Line(A, B), Line(J, K) we get Line(A, B) == perpendicular_line(B, Line(J, K))
By perpendicular_line_definition on A, Line(A, C), Line(J, L) we get Line(A, C) == perpendicular_line(A, Line(J, L))
By perpendicular_line_definition on C, Line(B, C), Line(J, M) we get Line(B, C) == perpendicular_line(C, Line(J, M))
By line_intersection_definition on K, Line(G, K), Line(K, L) we get K == line_intersection(Line(G, K), Line(K, L))
By line_intersection_definition on J, Line(C, G), Line(J, M) we get J == line_intersection(Line(C, G), Line(J, M))
By line_intersection_definition on M, Line(G, K), Line(J, M) we get M == line_intersection(Line(G, K), Line(J, M))
By line_intersection_definition on L, Line(K, L), Line(A, C) we get L == line_intersection(Line(A, C), Line(K, L))
By line_intersection_definition on J, Line(J, M), Line(J, L) we get J == line_intersection(Line(J, L), Line(J, M))
By line_intersection_definition on K, Line(J, K), Line(K, L) we get K == line_intersection(Line(J, K), Line(K, L))
By line_intersection_definition on J, Line(J, K), Line(J, L) we get J == line_intersection(Line(J, K), Line(J, L))
By perpendicular_line_definition on M, Line(J, M), Line(B, C) we get Line(J, M) == perpendicular_line(M, Line(B, C))
By line_intersection_definition on J, Line(B, F), Line(J, M) we get J == line_intersection(Line(B, F), Line(J, M))
By line_intersection_definition on J, Line(A, J), Line(J, L) we get J == line_intersection(Line(A, J), Line(J, L))
By perpendicular_line_definition on M, Line(B, C), Line(J, M) we get Line(B, C) == perpendicular_line(M, Line(J, M))
By perpendicular_line_definition on B, Line(B, C), Line(J, M) we get Line(B, C) == perpendicular_line(B, Line(J, M))
By line_intersection_definition on J, Line(J, K), Line(J, M) we get J == line_intersection(Line(J, K), Line(J, M))
By perpendicular_line_definition on L, Line(A, C), Line(J, L) we get Line(A, C) == perpendicular_line(L, Line(J, L))
By line_intersection_definition on L, Line(F, L), Line(J, L) we get L == line_intersection(Line(F, L), Line(J, L))
By line_intersection_definition on K, Line(K, L), Line(A, B) we get K == line_intersection(Line(A, B), Line(K, L))
By line_intersection_definition on K, Line(G, K), Line(J, K) we get K == line_intersection(Line(G, K), Line(J, K))
By line_intersection_definition on J, Line(J, K), Line(C, G) we get J == line_intersection(Line(C, G), Line(J, K))
By perpendicular_line_definition on midpoint(S, T), Line(B, C), Line(J, M) we get Line(B, C) == perpendicular_line(midpoint(S, T), Line(J, M))
By line_intersection_definition on J, Line(A, J), Line(J, K) we get J == line_intersection(Line(A, J), Line(J, K))
By perpendicular_line_definition on K, Line(A, B), Line(J, K) we get Line(A, B) == perpendicular_line(K, Line(J, K))
By line_intersection_definition on K, Line(A, B), Line(J, K) we get K == line_intersection(Line(A, B), Line(J, K))
By perpendicular_line_definition on J, Line(J, L), Line(A, C) we get Line(J, L) == perpendicular_line(J, Line(A, C))
By line_intersection_definition on M, Line(F, L), Line(J, M) we get M == line_intersection(Line(F, L), Line(J, M))
By line_intersection_definition on J, Line(A, J), Line(J, M) we get J == line_intersection(Line(A, J), Line(J, M))
By line_intersection_definition on J, Line(B, F), Line(J, K) we get J == line_intersection(Line(B, F), Line(J, K))
By line_intersection_definition on M, Line(J, M), Line(B, C) we get M == line_intersection(Line(B, C), Line(J, M))
By line_intersection_definition on L, Line(A, C), Line(J, L) we get L == line_intersection(Line(A, C), Line(J, L))
By perpendicular_line_definition on A, Line(A, B), Line(J, K) we get Line(A, B) == perpendicular_line(A, Line(J, K))
By perpendicular_line_definition on J, Line(J, M), Line(B, C) we get Line(J, M) == perpendicular_line(J, Line(B, C))
By perpendicular_line_definition on J, Line(J, K), Line(A, B) we get Line(J, K) == perpendicular_line(J, Line(A, B))
By perpendicular_line_definition on T, Line(B, C), Line(J, M) we get Line(B, C) == perpendicular_line(T, Line(J, M))
By line_intersection_definition on J, Line(J, L), Line(C, G) we get J == line_intersection(Line(C, G), Line(J, L))
By perpendicular_line_definition on K, Line(J, K), Line(A, B) we get Line(J, K) == perpendicular_line(K, Line(A, B))
By perpendicular_direction_conditions_v0_r on midpoint(S, T), T, J, M we get 180 == 2 * direction(midpoint(S, T), T) - 2 * direction(J, M) mod 360
By perpendicular_direction_conditions_v0_r on S, T, J, M we get 180 == 2 * direction(S, T) - 2 * direction(J, M) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(S, T), S, J, M we get 180 == 2 * direction(midpoint(S, T), S) - 2 * direction(J, M) mod 360
By perpendicular_direction_conditions_v0_r on J, M, S, midpoint(S, T) we get 180 == 2 * direction(J, M) - 2 * direction(S, midpoint(S, T)) mod 360
By perpendicular_direction_conditions_v0_r on J, M, midpoint(S, T), T we get 180 == 2 * direction(J, M) - 2 * direction(midpoint(S, T), T) mod 360
By perpendicular_direction_conditions_v0_r on J, M, midpoint(S, T), S we get 180 == 2 * direction(J, M) - 2 * direction(midpoint(S, T), S) mod 360
By perpendicular_direction_conditions_v0_r on S, midpoint(S, T), J, M we get 180 == 2 * direction(S, midpoint(S, T)) - 2 * direction(J, M) mod 360
By perpendicular_direction_conditions_v0_r on J, M, S, T we get 180 == 2 * direction(J, M) - 2 * direction(S, T) mod 360
By perpendicular_direction_conditions_v0_r on T, midpoint(S, T), J, M we get 180 == 2 * direction(T, midpoint(S, T)) - 2 * direction(J, M) mod 360
By perpendicular_direction_conditions_v0_r on J, M, T, S we get 180 == 2 * direction(J, M) - 2 * direction(T, S) mod 360
By perpendicular_direction_conditions_v0_r on J, M, T, midpoint(S, T) we get 180 == 2 * direction(J, M) - 2 * direction(T, midpoint(S, T)) mod 360
By perpendicular_direction_conditions_v0_r on T, S, J, M we get 180 == 2 * direction(T, S) - 2 * direction(J, M) mod 360
By same_angle_v0 on L, F, M, K we get angle(F, L, K) == angle(M, L, K) mod 360
By perpendicular_direction_conditions_v0_r on M, J, T, S we get 180 == 2 * direction(M, J) - 2 * direction(T, S) mod 360
By perpendicular_direction_conditions_v0_r on S, M, J, M we get 180 == 2 * direction(S, M) - 2 * direction(J, M) mod 360
By perpendicular_direction_conditions_v0_r on J, M, T, B we get 180 == 2 * direction(J, M) - 2 * direction(T, B) mod 360
By perpendicular_direction_conditions_v0_r on T, M, J, M we get 180 == 2 * direction(T, M) - 2 * direction(J, M) mod 360
By perpendicular_direction_conditions_v0_r on J, M, C, B we get 180 == 2 * direction(J, M) - 2 * direction(C, B) mod 360
By same_angle_v3 on M, K, G, L we get angle(K, M, L) == angle(G, M, L) + 180 mod 360
By probably_between_and_collinear_implies_between on S, B, C we get between(C, B, S)
By perpendicular_direction_conditions_v0_r on J, M, M, S we get 180 == 2 * direction(J, M) - 2 * direction(M, S) mod 360
By projection_definition on S, M, Line(J, M) we get M == projection(S, Line(J, M))
By perpendicular_direction_conditions_v0_r on J, L, A, L we get 180 == 2 * direction(J, L) - 2 * direction(A, L) mod 360
By same_angle_v1 on K, M, G, L we get angle(G, K, L) == angle(M, K, L) mod 360
By in_imply_collinear on midpoint(S, T), M, B we get collinear(B, M, midpoint(S, T))
By same_angle_v2 on M, F, L, K we get angle(F, M, K) == angle(L, M, K) + 180 mod 360
By perpendicular_direction_conditions_v0_r on J, M, B, C we get 180 == 2 * direction(J, M) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on C, A, J, L we get 180 == 2 * direction(C, A) - 2 * direction(J, L) mod 360
By perpendicular_direction_conditions_v0_r on J, M, C, M we get 180 == 2 * direction(J, M) - 2 * direction(C, M) mod 360
By perpendicular_direction_conditions_v0_r on M, T, J, M we get 180 == 2 * direction(M, T) - 2 * direction(J, M) mod 360
By perpendicular_direction_conditions_v0_r on C, B, J, M we get 180 == 2 * direction(C, B) - 2 * direction(J, M) mod 360
By perpendicular_direction_conditions_v0_r on M, J, S, midpoint(S, T) we get 180 == 2 * direction(M, J) - 2 * direction(S, midpoint(S, T)) mod 360
By in_imply_collinear on T, B, M we get collinear(B, M, T)
By perpendicular_direction_conditions_v0_r on J, M, B, S we get 180 == 2 * direction(J, M) - 2 * direction(B, S) mod 360
By perpendicular_direction_conditions_v0_r on S, T, M, J we get 180 == 2 * direction(S, T) - 2 * direction(M, J) mod 360
By perpendicular_direction_conditions_v0_r on M, J, T, midpoint(S, T) we get 180 == 2 * direction(M, J) - 2 * direction(T, midpoint(S, T)) mod 360
By perpendicular_direction_conditions_v0_r on J, L, C, A we get 180 == 2 * direction(J, L) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on S, midpoint(S, T), M, J we get 180 == 2 * direction(S, midpoint(S, T)) - 2 * direction(M, J) mod 360
By perpendicular_direction_conditions_v0_r on J, K, B, A we get 180 == 2 * direction(J, K) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on C, S, J, M we get 180 == 2 * direction(C, S) - 2 * direction(J, M) mod 360
By projection_definition on J, L, Line(A, C) we get L == projection(J, Line(A, C))
By in_imply_collinear on T, M, C we get collinear(C, M, T)
By perpendicular_direction_conditions_v0_r on M, S, J, M we get 180 == 2 * direction(M, S) - 2 * direction(J, M) mod 360
By perpendicular_direction_conditions_v0_r on J, L, L, C we get 180 == 2 * direction(J, L) - 2 * direction(L, C) mod 360
By projection_definition on J, M, Line(B, C) we get M == projection(J, Line(B, C))
By tangents_angle_bisector on C, L, M, Circle(K, L, M) we get angle(L, C, center(Circle(K, L, M))) == angle(center(Circle(K, L, M)), C, M) mod 360
By perpendicular_direction_conditions_v0_r on B, M, J, M we get 180 == 2 * direction(B, M) - 2 * direction(J, M) mod 360
By perpendicular_direction_conditions_v0_r on S, B, J, M we get 180 == 2 * direction(S, B) - 2 * direction(J, M) mod 360
By perpendicular_direction_conditions_v0_r on C, L, J, L we get 180 == 2 * direction(C, L) - 2 * direction(J, L) mod 360
By projection_definition on A, K, Line(J, K) we get K == projection(A, Line(J, K))
By perpendicular_direction_conditions_v0_r on J, K, K, A we get 180 == 2 * direction(J, K) - 2 * direction(K, A) mod 360
By perpendicular_direction_conditions_v0_r on T, B, J, M we get 180 == 2 * direction(T, B) - 2 * direction(J, M) mod 360
By perpendicular_direction_conditions_v0_r on J, M, T, C we get 180 == 2 * direction(J, M) - 2 * direction(T, C) mod 360
By projection_definition on C, M, Line(J, M) we get M == projection(C, Line(J, M))
By perpendicular_direction_conditions_v0_r on M, J, midpoint(S, T), T we get 180 == 2 * direction(M, J) - 2 * direction(midpoint(S, T), T) mod 360
By in_imply_collinear on M, C, S we get collinear(C, M, S)
By probably_between_and_collinear_implies_between on C, M, B we get between(B, M, C)
By perpendicular_direction_conditions_v0_r on T, midpoint(S, T), M, J we get 180 == 2 * direction(T, midpoint(S, T)) - 2 * direction(M, J) mod 360
By perpendicular_direction_conditions_v0_r on J, K, B, K we get 180 == 2 * direction(J, K) - 2 * direction(B, K) mod 360
By perpendicular_direction_conditions_v0_r on A, L, J, L we get 180 == 2 * direction(A, L) - 2 * direction(J, L) mod 360
By in_imply_collinear on S, M, B we get collinear(B, M, S)
By perpendicular_direction_conditions_v0_r on J, M, S, M we get 180 == 2 * direction(J, M) - 2 * direction(S, M) mod 360
By projection_definition on A, L, Line(J, L) we get L == projection(A, Line(J, L))
By tangents_angle_bisector on A, L, K, Circle(K, L, M) we get angle(L, A, center(Circle(K, L, M))) == angle(center(Circle(K, L, M)), A, K) mod 360
By projection_definition on C, L, Line(J, L) we get L == projection(C, Line(J, L))
By perpendicular_direction_conditions_v0_r on A, C, J, L we get 180 == 2 * direction(A, C) - 2 * direction(J, L) mod 360
By perpendicular_direction_conditions_v0_r on C, M, J, M we get 180 == 2 * direction(C, M) - 2 * direction(J, M) mod 360
By perpendicular_direction_conditions_v0_r on M, B, J, M we get 180 == 2 * direction(M, B) - 2 * direction(J, M) mod 360
By perpendicular_direction_conditions_v0_r on A, K, J, K we get 180 == 2 * direction(A, K) - 2 * direction(J, K) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(S, T), T, M, J we get 180 == 2 * direction(midpoint(S, T), T) - 2 * direction(M, J) mod 360
By probably_between_and_collinear_implies_between on J, B, F we get between(F, B, J)
By perpendicular_direction_conditions_v0_r on J, M, C, T we get 180 == 2 * direction(J, M) - 2 * direction(C, T) mod 360
By perpendicular_direction_conditions_v0_r on B, T, J, M we get 180 == 2 * direction(B, T) - 2 * direction(J, M) mod 360
By perpendicular_direction_conditions_v0_r on M, C, J, M we get 180 == 2 * direction(M, C) - 2 * direction(J, M) mod 360
By perpendicular_direction_conditions_v0_r on A, B, J, K we get 180 == 2 * direction(A, B) - 2 * direction(J, K) mod 360
By projection_definition on J, K, Line(A, B) we get K == projection(J, Line(A, B))
By probably_between_and_collinear_implies_between on G, M, K we get between(G, M, K)
By projection_definition on B, M, Line(J, M) we get M == projection(B, Line(J, M))
By perpendicular_direction_conditions_v0_r on J, M, C, S we get 180 == 2 * direction(J, M) - 2 * direction(C, S) mod 360
By perpendicular_direction_conditions_v0_r on B, K, J, K we get 180 == 2 * direction(B, K) - 2 * direction(J, K) mod 360
By perpendicular_direction_conditions_v0_r on T, C, J, M we get 180 == 2 * direction(T, C) - 2 * direction(J, M) mod 360
By probably_between_and_collinear_implies_between on A, B, K we get between(A, B, K)
By perpendicular_direction_conditions_v0_r on M, J, S, T we get 180 == 2 * direction(M, J) - 2 * direction(S, T) mod 360
By probably_between_and_collinear_implies_between on L, M, F we get between(F, M, L)
By perpendicular_direction_conditions_v0_r on J, M, T, M we get 180 == 2 * direction(J, M) - 2 * direction(T, M) mod 360
By perpendicular_direction_conditions_v0_r on B, A, J, K we get 180 == 2 * direction(B, A) - 2 * direction(J, K) mod 360
By perpendicular_direction_conditions_v0_r on M, J, midpoint(S, T), S we get 180 == 2 * direction(M, J) - 2 * direction(midpoint(S, T), S) mod 360
By perpendicular_direction_conditions_v0_r on J, L, C, L we get 180 == 2 * direction(J, L) - 2 * direction(C, L) mod 360
By perpendicular_direction_conditions_v0_r on J, M, M, B we get 180 == 2 * direction(J, M) - 2 * direction(M, B) mod 360
By in_imply_collinear on M, T, midpoint(S, T) we get collinear(M, T, midpoint(S, T))
By perpendicular_direction_conditions_v0_r on K, B, J, K we get 180 == 2 * direction(K, B) - 2 * direction(J, K) mod 360
By perpendicular_direction_conditions_v0_r on J, M, S, C we get 180 == 2 * direction(J, M) - 2 * direction(S, C) mod 360
By perpendicular_direction_conditions_v0_r on B, S, J, M we get 180 == 2 * direction(B, S) - 2 * direction(J, M) mod 360
By in_imply_collinear on M, S, T we get collinear(M, S, T)
By perpendicular_direction_conditions_v0_r on L, C, J, L we get 180 == 2 * direction(L, C) - 2 * direction(J, L) mod 360
By perpendicular_direction_conditions_v0_r on J, L, L, A we get 180 == 2 * direction(J, L) - 2 * direction(L, A) mod 360
By perpendicular_direction_conditions_v0_r on S, C, J, M we get 180 == 2 * direction(S, C) - 2 * direction(J, M) mod 360
By perpendicular_direction_conditions_v0_r on J, M, M, C we get 180 == 2 * direction(J, M) - 2 * direction(M, C) mod 360
By perpendicular_direction_conditions_v0_r on K, A, J, K we get 180 == 2 * direction(K, A) - 2 * direction(J, K) mod 360
By perpendicular_direction_conditions_v0_r on C, T, J, M we get 180 == 2 * direction(C, T) - 2 * direction(J, M) mod 360
By projection_definition on T, M, Line(J, M) we get M == projection(T, Line(J, M))
By perpendicular_direction_conditions_v0_r on J, L, A, C we get 180 == 2 * direction(J, L) - 2 * direction(A, C) mod 360
By probably_between_and_collinear_implies_between on T, G, A we get between(A, G, T)
By perpendicular_direction_conditions_v0_r on J, M, B, M we get 180 == 2 * direction(J, M) - 2 * direction(B, M) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(S, T), S, M, J we get 180 == 2 * direction(midpoint(S, T), S) - 2 * direction(M, J) mod 360
By perpendicular_direction_conditions_v0_r on T, S, M, J we get 180 == 2 * direction(T, S) - 2 * direction(M, J) mod 360
By perpendicular_direction_conditions_v0_r on J, M, S, B we get 180 == 2 * direction(J, M) - 2 * direction(S, B) mod 360
By perpendicular_direction_conditions_v0_r on J, M, M, T we get 180 == 2 * direction(J, M) - 2 * direction(M, T) mod 360
By perpendicular_direction_conditions_v0_r on B, C, J, M we get 180 == 2 * direction(B, C) - 2 * direction(J, M) mod 360
By perpendicular_direction_conditions_v0_r on L, A, J, L we get 180 == 2 * direction(L, A) - 2 * direction(J, L) mod 360
By perpendicular_direction_conditions_v0_r on J, K, A, B we get 180 == 2 * direction(J, K) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on J, K, K, B we get 180 == 2 * direction(J, K) - 2 * direction(K, B) mod 360
By projection_definition on B, K, Line(J, K) we get K == projection(B, Line(J, K))
By perpendicular_direction_conditions_v0_r on J, K, A, K we get 180 == 2 * direction(J, K) - 2 * direction(A, K) mod 360
By perpendicular_direction_conditions_v0_r on J, M, B, T we get 180 == 2 * direction(J, M) - 2 * direction(B, T) mod 360
By tangents_angle_bisector on A, K, L, Circle(K, L, M) we get angle(K, A, center(Circle(K, L, M))) == angle(center(Circle(K, L, M)), A, L) mod 360
By tangents_angle_bisector on B, K, M, Circle(K, L, M) we get angle(K, B, center(Circle(K, L, M))) == angle(center(Circle(K, L, M)), B, M) mod 360
By in_imply_collinear on C, midpoint(S, T), T we get collinear(C, T, midpoint(S, T))
By probably_between_and_collinear_implies_between on G, C, J we get between(G, C, J)
By tangents_angle_bisector on B, M, K, Circle(K, L, M) we get angle(M, B, center(Circle(K, L, M))) == angle(center(Circle(K, L, M)), B, K) mod 360
By tangents_angle_bisector on C, M, L, Circle(K, L, M) we get angle(M, C, center(Circle(K, L, M))) == angle(center(Circle(K, L, M)), C, L) mod 360
By in_imply_collinear on midpoint(S, T), S, M we get collinear(M, S, midpoint(S, T))
By in_imply_collinear on B, T, S we get collinear(B, S, T)
By in_imply_collinear on midpoint(S, T), T, B we get collinear(B, T, midpoint(S, T))
By probably_between_and_collinear_implies_between on A, C, L we get between(A, C, L)
By probably_between_and_collinear_implies_between on B, C, T we get between(B, C, T)
By in_imply_collinear on midpoint(S, T), S, C we get collinear(C, S, midpoint(S, T))
By in_imply_collinear on midpoint(S, T), B, S we get collinear(B, S, midpoint(S, T))
By probably_between_and_collinear_implies_between on A, F, S we get between(A, F, S)
By in_imply_collinear on T, C, S we get collinear(C, S, T)
By in_imply_collinear on midpoint(S, T), C, B we get collinear(B, C, midpoint(S, T))
By in_imply_collinear on midpoint(S, T), C, M we get collinear(C, M, midpoint(S, T))
By reverse_direction on S, T we get 180 == direction(S, T) - direction(T, S) mod 360
By reverse_direction on K, M we get 180 == direction(K, M) - direction(M, K) mod 360
By reverse_direction on T, midpoint(S, T) we get 180 == direction(T, midpoint(S, T)) - direction(midpoint(S, T), T) mod 360
By reverse_direction on midpoint(S, T), S we get 180 == direction(midpoint(S, T), S) - direction(S, midpoint(S, T)) mod 360
By reverse_direction on M, K we get 180 == direction(M, K) - direction(K, M) mod 360
By reverse_direction on L, M we get 180 == direction(L, M) - direction(M, L) mod 360
By reverse_direction on S, midpoint(S, T) we get 180 == direction(S, midpoint(S, T)) - direction(midpoint(S, T), S) mod 360
By reverse_direction on L, K we get 180 == direction(L, K) - direction(K, L) mod 360
By reverse_direction on midpoint(S, T), T we get 180 == direction(midpoint(S, T), T) - direction(T, midpoint(S, T)) mod 360
By reverse_direction on K, L we get 180 == direction(K, L) - direction(L, K) mod 360
By reverse_direction on T, S we get 180 == direction(T, S) - direction(S, T) mod 360
By reverse_direction on M, L we get 180 == direction(M, L) - direction(L, M) mod 360
By same_angle_v3 on M, L, F, C we get angle(L, M, C) == angle(F, M, C) + 180 mod 360
By same_angle_v3 on M, L, F, G we get angle(L, M, G) == angle(F, M, G) + 180 mod 360
By same_angle_v0 on J, G, C, M we get angle(C, J, M) == angle(G, J, M) mod 360
By same_angle_v0 on K, G, M, B we get angle(G, K, B) == angle(M, K, B) mod 360
By same_angle_v0 on L, A, C, M we get angle(A, L, M) == angle(C, L, M) mod 360
By perpendicular_direction_conditions_v0_r on C, L, L, J we get 180 == 2 * direction(C, L) - 2 * direction(L, J) mod 360
By same_angle_v0 on J, F, B, K we get angle(B, J, K) == angle(F, J, K) mod 360
By same_angle_v3 on M, B, C, K we get angle(B, M, K) == angle(C, M, K) + 180 mod 360
By same_angle_v0 on K, M, G, A we get angle(G, K, A) == angle(M, K, A) mod 360
By same_angle_v3 on M, G, K, S we get angle(G, M, S) == angle(K, M, S) + 180 mod 360
By same_angle_v3 on M, F, L, S we get angle(F, M, S) == angle(L, M, S) + 180 mod 360
By same_angle_v1 on J, F, B, M we get angle(B, J, M) == angle(F, J, M) mod 360
By same_angle_v1 on J, B, F, L we get angle(B, J, L) == angle(F, J, L) mod 360
By same_angle_v1 on K, A, B, M we get angle(A, K, M) == angle(B, K, M) mod 360
By same_angle_v0 on L, A, C, K we get angle(A, L, K) == angle(C, L, K) mod 360
By same_angle_v1 on S, F, A, T we get angle(A, S, T) == angle(F, S, T) mod 360
By same_angle_v0 on T, A, G, S we get angle(A, T, S) == angle(G, T, S) mod 360
By same_angle_v1 on J, G, C, L we get angle(C, J, L) == angle(G, J, L) mod 360
By same_angle_v3 on M, K, G, J we get angle(K, M, J) == angle(G, M, J) + 180 mod 360
By perpendicular_direction_conditions_v0_r on B, C, M, J we get 180 == 2 * direction(B, C) - 2 * direction(M, J) mod 360
By same_angle_v3 on M, G, K, B we get angle(G, M, B) == angle(K, M, B) + 180 mod 360
By same_angle_v2 on M, F, L, J we get angle(F, M, J) == angle(L, M, J) + 180 mod 360
By same_angle_v1 on L, F, M, C we get angle(F, L, C) == angle(M, L, C) mod 360
By same_angle_v0 on J, C, G, K we get angle(C, J, K) == angle(G, J, K) mod 360
By same_angle_v3 on M, F, L, B we get angle(F, M, B) == angle(L, M, B) + 180 mod 360
By perpendicular_direction_conditions_v0_r on M, J, T, M we get 180 == 2 * direction(M, J) - 2 * direction(T, M) mod 360
By same_angle_v3 on M, G, K, F we get angle(G, M, F) == angle(K, M, F) + 180 mod 360
By perpendicular_direction_conditions_v0_r on M, J, S, M we get 180 == 2 * direction(M, J) - 2 * direction(S, M) mod 360
By perpendicular_direction_conditions_v0_r on T, M, M, J we get 180 == 2 * direction(T, M) - 2 * direction(M, J) mod 360
By perpendicular_direction_conditions_v0_r on K, J, B, A we get 180 == 2 * direction(K, J) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on M, J, M, T we get 180 == 2 * direction(M, J) - 2 * direction(M, T) mod 360
By perpendicular_direction_conditions_v0_r on K, B, K, J we get 180 == 2 * direction(K, B) - 2 * direction(K, J) mod 360
By perpendicular_direction_conditions_v0_r on A, L, L, J we get 180 == 2 * direction(A, L) - 2 * direction(L, J) mod 360
By same_angle_v1 on L, F, M, A we get angle(F, L, A) == angle(M, L, A) mod 360
By same_angle_v3 on M, B, C, L we get angle(B, M, L) == angle(C, M, L) + 180 mod 360
By perpendicular_direction_conditions_v0_r on M, S, M, J we get 180 == 2 * direction(M, S) - 2 * direction(M, J) mod 360
By perpendicular_direction_conditions_v0_r on K, J, A, B we get 180 == 2 * direction(K, J) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on L, A, L, J we get 180 == 2 * direction(L, A) - 2 * direction(L, J) mod 360
By perpendicular_direction_conditions_v0_r on M, J, C, B we get 180 == 2 * direction(M, J) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on C, B, M, J we get 180 == 2 * direction(C, B) - 2 * direction(M, J) mod 360
By same_angle_v2 on M, L, F, T we get angle(L, M, T) == angle(F, M, T) + 180 mod 360
By same_angle_v1 on K, G, M, J we get angle(G, K, J) == angle(M, K, J) mod 360
By perpendicular_direction_conditions_v0_r on M, J, T, C we get 180 == 2 * direction(M, J) - 2 * direction(T, C) mod 360
By same_angle_v3 on M, K, G, T we get angle(K, M, T) == angle(G, M, T) + 180 mod 360
By same_angle_v0 on L, M, F, J we get angle(F, L, J) == angle(M, L, J) mod 360
By perpendicular_direction_conditions_v0_r on M, J, B, S we get 180 == 2 * direction(M, J) - 2 * direction(B, S) mod 360
By perpendicular_direction_conditions_v0_r on K, J, K, A we get 180 == 2 * direction(K, J) - 2 * direction(K, A) mod 360
By perpendicular_direction_conditions_v0_r on K, J, B, K we get 180 == 2 * direction(K, J) - 2 * direction(B, K) mod 360
By perpendicular_direction_conditions_v0_r on K, J, A, K we get 180 == 2 * direction(K, J) - 2 * direction(A, K) mod 360
By same_angle_v1 on K, A, B, L we get angle(A, K, L) == angle(B, K, L) mod 360
By perpendicular_direction_conditions_v0_r on B, S, M, J we get 180 == 2 * direction(B, S) - 2 * direction(M, J) mod 360
By same_angle_v3 on M, K, G, C we get angle(K, M, C) == angle(G, M, C) + 180 mod 360
By perpendicular_direction_conditions_v0_r on C, S, M, J we get 180 == 2 * direction(C, S) - 2 * direction(M, J) mod 360
By perpendicular_direction_conditions_v0_r on M, J, B, T we get 180 == 2 * direction(M, J) - 2 * direction(B, T) mod 360
By perpendicular_direction_conditions_v0_r on L, J, A, C we get 180 == 2 * direction(L, J) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on M, B, M, J we get 180 == 2 * direction(M, B) - 2 * direction(M, J) mod 360
By perpendicular_direction_conditions_v0_r on M, J, S, B we get 180 == 2 * direction(M, J) - 2 * direction(S, B) mod 360
By perpendicular_direction_conditions_v0_r on L, J, L, A we get 180 == 2 * direction(L, J) - 2 * direction(L, A) mod 360
By perpendicular_direction_conditions_v0_r on B, M, M, J we get 180 == 2 * direction(B, M) - 2 * direction(M, J) mod 360
By perpendicular_direction_conditions_v0_r on S, M, M, J we get 180 == 2 * direction(S, M) - 2 * direction(M, J) mod 360
By perpendicular_direction_conditions_v0_r on M, J, B, C we get 180 == 2 * direction(M, J) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on L, J, L, C we get 180 == 2 * direction(L, J) - 2 * direction(L, C) mod 360
By perpendicular_direction_conditions_v0_r on M, J, C, T we get 180 == 2 * direction(M, J) - 2 * direction(C, T) mod 360
By perpendicular_direction_conditions_v0_r on C, M, M, J we get 180 == 2 * direction(C, M) - 2 * direction(M, J) mod 360
By perpendicular_direction_conditions_v0_r on B, T, M, J we get 180 == 2 * direction(B, T) - 2 * direction(M, J) mod 360
By perpendicular_direction_conditions_v0_r on S, C, M, J we get 180 == 2 * direction(S, C) - 2 * direction(M, J) mod 360
By perpendicular_direction_conditions_v0_r on L, J, C, L we get 180 == 2 * direction(L, J) - 2 * direction(C, L) mod 360
By perpendicular_direction_conditions_v0_r on M, C, M, J we get 180 == 2 * direction(M, C) - 2 * direction(M, J) mod 360
By perpendicular_direction_conditions_v0_r on M, T, M, J we get 180 == 2 * direction(M, T) - 2 * direction(M, J) mod 360
By perpendicular_direction_conditions_v0_r on M, J, S, C we get 180 == 2 * direction(M, J) - 2 * direction(S, C) mod 360
By tangent_chord_angle_reverse_v2 on M, L, K, B we get angle(L, K, M) == angle(L, M, B) + 180 mod 360
By perpendicular_direction_conditions_v0_r on M, J, T, B we get 180 == 2 * direction(M, J) - 2 * direction(T, B) mod 360
By perpendicular_direction_conditions_v0_r on A, B, K, J we get 180 == 2 * direction(A, B) - 2 * direction(K, J) mod 360
By perpendicular_direction_conditions_v0_r on L, C, L, J we get 180 == 2 * direction(L, C) - 2 * direction(L, J) mod 360
By perpendicular_direction_conditions_v0_r on A, C, L, J we get 180 == 2 * direction(A, C) - 2 * direction(L, J) mod 360
By perpendicular_direction_conditions_v0_r on B, A, K, J we get 180 == 2 * direction(B, A) - 2 * direction(K, J) mod 360
By perpendicular_direction_conditions_v0_r on M, J, B, M we get 180 == 2 * direction(M, J) - 2 * direction(B, M) mod 360
By perpendicular_direction_conditions_v0_r on C, A, L, J we get 180 == 2 * direction(C, A) - 2 * direction(L, J) mod 360
By perpendicular_direction_conditions_v0_r on M, J, M, S we get 180 == 2 * direction(M, J) - 2 * direction(M, S) mod 360
By perpendicular_direction_conditions_v0_r on S, B, M, J we get 180 == 2 * direction(S, B) - 2 * direction(M, J) mod 360
By perpendicular_direction_conditions_v0_r on T, C, M, J we get 180 == 2 * direction(T, C) - 2 * direction(M, J) mod 360
By perpendicular_direction_conditions_v0_r on K, A, K, J we get 180 == 2 * direction(K, A) - 2 * direction(K, J) mod 360
By perpendicular_direction_conditions_v0_r on M, J, M, B we get 180 == 2 * direction(M, J) - 2 * direction(M, B) mod 360
By perpendicular_direction_conditions_v0_r on K, J, K, B we get 180 == 2 * direction(K, J) - 2 * direction(K, B) mod 360
By perpendicular_direction_conditions_v0_r on A, K, K, J we get 180 == 2 * direction(A, K) - 2 * direction(K, J) mod 360
By perpendicular_direction_conditions_v0_r on L, J, A, L we get 180 == 2 * direction(L, J) - 2 * direction(A, L) mod 360
By perpendicular_direction_conditions_v0_r on L, J, C, A we get 180 == 2 * direction(L, J) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on M, J, C, M we get 180 == 2 * direction(M, J) - 2 * direction(C, M) mod 360
By perpendicular_direction_conditions_v0_r on B, K, K, J we get 180 == 2 * direction(B, K) - 2 * direction(K, J) mod 360
By perpendicular_direction_conditions_v0_r on C, T, M, J we get 180 == 2 * direction(C, T) - 2 * direction(M, J) mod 360
By perpendicular_direction_conditions_v0_r on M, J, M, C we get 180 == 2 * direction(M, J) - 2 * direction(M, C) mod 360
By perpendicular_direction_conditions_v0_r on M, J, C, S we get 180 == 2 * direction(M, J) - 2 * direction(C, S) mod 360
By perpendicular_direction_conditions_v0_r on T, B, M, J we get 180 == 2 * direction(T, B) - 2 * direction(M, J) mod 360
By tangent_chord_angle_reverse_v2 on L, K, M, A we get angle(K, M, L) == angle(K, L, A) + 180 mod 360
By tangent_chord_angle_reverse_v1 on L, M, K, C we get angle(M, K, L) == angle(M, L, C) mod 360
By tangent_chord_angle_reverse_v1 on M, K, L, B we get angle(K, L, M) == angle(K, M, B) mod 360
By tangent_chord_angle_reverse_v2 on L, K, M, C we get angle(K, M, L) == angle(K, L, C) + 180 mod 360
By tangent_chord_angle_reverse_v1 on M, K, L, S we get angle(K, L, M) == angle(K, M, S) mod 360
By perpendicular_lines_draw_intersection on Line(B, C), Line(J, M) we get exists(line_intersection(Line(B, C), Line(J, M)))
By tangent_chord_angle_reverse_v0 on M, L, K, T we get angle(L, K, M) == angle(L, M, T) mod 360
By tangent_chord_angle_reverse_v0 on M, L, K, C we get angle(L, K, M) == angle(L, M, C) mod 360
By tangent_chord_angle_reverse_v2 on M, L, K, S we get angle(L, K, M) == angle(L, M, S) + 180 mod 360
By tangent_chord_angle_reverse_v1 on L, M, K, A we get angle(M, K, L) == angle(M, L, A) mod 360
By reverse_direction on J, K we get 180 == direction(J, K) - direction(K, J) mod 360
By tangent_chord_angle_reverse_v3 on K, L, M, B we get angle(L, M, K) == angle(L, K, B) + 180 mod 360
By tangent_chord_angle_reverse_v3 on K, L, M, A we get angle(L, M, K) == angle(L, K, A) + 180 mod 360
By tangent_chord_angle_reverse_v3 on M, K, L, T we get angle(K, L, M) == angle(K, M, T) + 180 mod 360
By tangent_chord_angle_reverse_v3 on M, K, L, C we get angle(K, L, M) == angle(K, M, C) + 180 mod 360
By collinear_definition on M, G, K we get G in Line(K, M), K in Line(G, M), Line(G, M) == Line(K, M), 0 == 2 * angle(G, M, K) mod 360
By tangent_chord_angle_reverse_v0 on K, M, L, B we get angle(M, K, B) == angle(M, L, K) mod 360
By collinear_definition on M, K, G we get K in Line(G, M), G in Line(K, M), Line(G, M) == Line(K, M), 0 == 2 * angle(K, M, G) mod 360
By tangent_chord_angle_reverse_v0 on K, M, L, A we get angle(M, K, A) == angle(M, L, K) mod 360
By reverse_direction on J, L we get 180 == direction(J, L) - direction(L, J) mod 360
By collinear_definition on M, L, F we get L in Line(F, M), F in Line(L, M), Line(F, M) == Line(L, M), 0 == 2 * angle(L, M, F) mod 360
By collinear_definition on M, F, L we get F in Line(L, M), L in Line(F, M), Line(F, M) == Line(L, M), 0 == 2 * angle(F, M, L) mod 360
By collinear_definition on K, G, M we get G in Line(K, M), M in Line(G, K), Line(G, K) == Line(K, M), 0 == 2 * angle(G, K, M) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(S, T), S, midpoint(S, T), T we get Line(S, T) == internal_angle_bisector(midpoint(S, T), T, midpoint(S, T))
By collinear_definition on L, F, M we get F in Line(L, M), M in Line(F, L), Line(F, L) == Line(L, M), 0 == 2 * angle(F, L, M) mod 360
By collinear_definition on L, M, F we get M in Line(F, L), F in Line(L, M), Line(F, L) == Line(L, M), 0 == 2 * angle(M, L, F) mod 360
By internal_angle_bisector_definition_v0_r on S, T, S, midpoint(S, T) we get Line(T, midpoint(S, T)) == internal_angle_bisector(S, midpoint(S, T), S)
By collinear_definition on K, M, G we get M in Line(G, K), G in Line(K, M), Line(G, K) == Line(K, M), 0 == 2 * angle(M, K, G) mod 360
By internal_angle_bisector_definition_v0_r on S, midpoint(S, T), S, T we get internal_angle_bisector(S, T, S) == Line(T, midpoint(S, T))
By perpendicular_lines_draw_intersection on Line(A, C), Line(J, L) we get exists(line_intersection(Line(A, C), Line(J, L)))
By internal_angle_bisector_definition_v0_r on midpoint(S, T), T, midpoint(S, T), S we get Line(S, T) == internal_angle_bisector(midpoint(S, T), S, midpoint(S, T))
By reverse_direction on J, M we get 180 == direction(J, M) - direction(M, J) mod 360
By internal_angle_bisector_definition_v0_r on T, midpoint(S, T), T, S we get internal_angle_bisector(T, S, T) == Line(S, midpoint(S, T))
By internal_angle_bisector_definition_v0_r on T, S, T, midpoint(S, T) we get Line(S, midpoint(S, T)) == internal_angle_bisector(T, midpoint(S, T), T)
By perpendicular_lines_draw_intersection on Line(J, K), Line(A, B) we get exists(line_intersection(Line(A, B), Line(J, K)))
By same_angle_v0 on A, S, F, T we get angle(F, A, T) == angle(S, A, T) mod 360
By same_angle_v0 on A, L, C, T we get angle(C, A, T) == angle(L, A, T) mod 360
By same_angle_v1 on A, T, G, S we get angle(G, A, S) == angle(T, A, S) mod 360
By same_angle_v0 on J, C, G, B we get angle(C, J, B) == angle(G, J, B) mod 360
By same_angle_v0 on G, M, K, T we get angle(K, G, T) == angle(M, G, T) mod 360
By same_angle_v0 on A, B, K, L we get angle(B, A, L) == angle(K, A, L) mod 360
By same_angle_v1 on C, M, B, A we get angle(B, C, A) == angle(M, C, A) mod 360
By same_angle_v2 on B, S, C, K we get angle(S, B, K) == angle(C, B, K) + 180 mod 360
By same_angle_v0 on A, F, S, B we get angle(F, A, B) == angle(S, A, B) mod 360
By same_angle_v0 on A, S, F, C we get angle(F, A, C) == angle(S, A, C) mod 360
By same_angle_v0 on A, S, F, J we get angle(F, A, J) == angle(S, A, J) mod 360
By same_angle_v2 on C, J, G, L we get angle(J, C, L) == angle(G, C, L) + 180 mod 360
By same_angle_v0 on J, G, C, F we get angle(C, J, F) == angle(G, J, F) mod 360
By same_angle_v3 on G, A, T, J we get angle(A, G, J) == angle(T, G, J) + 180 mod 360
By same_angle_v1 on A, T, G, C we get angle(G, A, C) == angle(T, A, C) mod 360
By same_angle_v3 on B, K, A, J we get angle(K, B, J) == angle(A, B, J) + 180 mod 360
By same_angle_v1 on J, B, F, C we get angle(B, J, C) == angle(F, J, C) mod 360
By same_angle_v3 on M, C, B, F we get angle(C, M, F) == angle(B, M, F) + 180 mod 360
By same_angle_v0 on A, B, K, J we get angle(B, A, J) == angle(K, A, J) mod 360
By same_angle_v3 on B, A, K, S we get angle(A, B, S) == angle(K, B, S) + 180 mod 360
By same_angle_v0 on A, F, S, L we get angle(F, A, L) == angle(S, A, L) mod 360
By same_angle_v0 on B, C, T, A we get angle(C, B, A) == angle(T, B, A) mod 360
By same_angle_v1 on K, A, B, G we get angle(A, K, G) == angle(B, K, G) mod 360
By same_angle_v1 on T, C, B, G we get angle(B, T, G) == angle(C, T, G) mod 360
By same_angle_v0 on B, M, C, F we get angle(C, B, F) == angle(M, B, F) mod 360
By same_angle_v3 on B, C, S, A we get angle(C, B, A) == angle(S, B, A) + 180 mod 360
By same_angle_v1 on A, T, G, K we get angle(G, A, K) == angle(T, A, K) mod 360
By same_angle_v0 on F, B, J, L we get angle(B, F, L) == angle(J, F, L) mod 360
By same_angle_v1 on F, J, B, S we get angle(B, F, S) == angle(J, F, S) mod 360
By same_angle_v3 on C, T, B, A we get angle(T, C, A) == angle(B, C, A) + 180 mod 360
By same_angle_v1 on J, F, B, G we get angle(B, J, G) == angle(F, J, G) mod 360
By same_angle_v3 on B, K, A, M we get angle(K, B, M) == angle(A, B, M) + 180 mod 360
By same_angle_v2 on C, A, L, M we get angle(A, C, M) == angle(L, C, M) + 180 mod 360
By same_angle_v0 on C, M, B, J we get angle(B, C, J) == angle(M, C, J) mod 360
By same_angle_v1 on A, C, L, S we get angle(C, A, S) == angle(L, A, S) mod 360
By same_angle_v1 on B, C, T, K we get angle(C, B, K) == angle(T, B, K) mod 360
By same_angle_v2 on F, S, A, L we get angle(S, F, L) == angle(A, F, L) + 180 mod 360
By same_angle_v2 on B, J, F, C we get angle(J, B, C) == angle(F, B, C) + 180 mod 360
By same_angle_v2 on C, G, J, B we get angle(G, C, B) == angle(J, C, B) + 180 mod 360
By same_angle_v2 on C, B, T, J we get angle(B, C, J) == angle(T, C, J) + 180 mod 360
By same_angle_v0 on G, K, M, C we get angle(K, G, C) == angle(M, G, C) mod 360
By same_angle_v1 on B, M, C, J we get angle(C, B, J) == angle(M, B, J) mod 360
By same_angle_v2 on B, F, J, S we get angle(F, B, S) == angle(J, B, S) + 180 mod 360
By same_angle_v0 on A, L, C, G we get angle(C, A, G) == angle(L, A, G) mod 360
By same_angle_v1 on A, T, G, L we get angle(G, A, L) == angle(T, A, L) mod 360
By same_angle_v0 on G, K, M, J we get angle(K, G, J) == angle(M, G, J) mod 360
By same_angle_v0 on T, G, A, C we get angle(A, T, C) == angle(G, T, C) mod 360
By same_angle_v0 on B, C, M, A we get angle(C, B, A) == angle(M, B, A) mod 360
By same_angle_v3 on B, J, F, A we get angle(J, B, A) == angle(F, B, A) + 180 mod 360
By same_angle_v2 on C, G, J, A we get angle(G, C, A) == angle(J, C, A) + 180 mod 360
By same_angle_v2 on C, T, B, G we get angle(T, C, G) == angle(B, C, G) + 180 mod 360
By same_angle_v2 on G, A, T, K we get angle(A, G, K) == angle(T, G, K) + 180 mod 360
By same_angle_v2 on B, S, C, J we get angle(S, B, J) == angle(C, B, J) + 180 mod 360
By same_angle_v3 on B, A, K, F we get angle(A, B, F) == angle(K, B, F) + 180 mod 360
By same_angle_v1 on B, T, C, J we get angle(C, B, J) == angle(T, B, J) mod 360
By same_angle_v1 on S, A, F, C we get angle(A, S, C) == angle(F, S, C) mod 360
By same_angle_v3 on F, S, A, M we get angle(S, F, M) == angle(A, F, M) + 180 mod 360
By same_angle_v0 on A, B, K, T we get angle(B, A, T) == angle(K, A, T) mod 360
By same_angle_v0 on C, B, S, J we get angle(B, C, J) == angle(S, C, J) mod 360
By same_angle_v0 on B, T, C, F we get angle(C, B, F) == angle(T, B, F) mod 360
By same_angle_v2 on G, A, T, C we get angle(A, G, C) == angle(T, G, C) + 180 mod 360
By same_angle_v3 on C, A, L, J we get angle(A, C, J) == angle(L, C, J) + 180 mod 360
By same_angle_v2 on C, A, L, S we get angle(A, C, S) == angle(L, C, S) + 180 mod 360
By same_angle_v0 on S, C, B, F we get angle(B, S, F) == angle(C, S, F) mod 360
By same_angle_v0 on L, A, C, J we get angle(A, L, J) == angle(C, L, J) mod 360
By same_angle_v1 on A, G, T, F we get angle(G, A, F) == angle(T, A, F) mod 360
By same_angle_v1 on A, C, L, K we get angle(C, A, K) == angle(L, A, K) mod 360
By same_angle_v2 on C, G, J, S we get angle(G, C, S) == angle(J, C, S) + 180 mod 360
By same_angle_v0 on A, K, B, G we get angle(B, A, G) == angle(K, A, G) mod 360
By same_angle_v2 on B, J, F, M we get angle(J, B, M) == angle(F, B, M) + 180 mod 360
By same_angle_v0 on L, C, A, F we get angle(A, L, F) == angle(C, L, F) mod 360
By same_angle_v0 on G, J, C, T we get angle(C, G, T) == angle(J, G, T) mod 360
By same_angle_v0 on F, B, J, M we get angle(B, F, M) == angle(J, F, M) mod 360
By same_angle_v1 on C, B, M, G we get angle(B, C, G) == angle(M, C, G) mod 360
By same_angle_v3 on C, A, L, B we get angle(A, C, B) == angle(L, C, B) + 180 mod 360
By same_angle_v1 on F, M, L, J we get angle(L, F, J) == angle(M, F, J) mod 360
By same_angle_v0 on T, A, G, B we get angle(A, T, B) == angle(G, T, B) mod 360
By same_angle_v1 on A, K, B, S we get angle(B, A, S) == angle(K, A, S) mod 360
By same_angle_v2 on C, L, A, G we get angle(L, C, G) == angle(A, C, G) + 180 mod 360
By same_angle_v1 on A, C, L, B we get angle(C, A, B) == angle(L, A, B) mod 360
By same_angle_v0 on S, C, B, A we get angle(B, S, A) == angle(C, S, A) mod 360
By same_angle_v1 on B, C, M, K we get angle(C, B, K) == angle(M, B, K) mod 360
By same_angle_v3 on B, J, F, T we get angle(J, B, T) == angle(F, B, T) + 180 mod 360
By same_angle_v2 on G, A, T, M we get angle(A, G, M) == angle(T, G, M) + 180 mod 360
By same_angle_v0 on T, A, G, M we get angle(A, T, M) == angle(G, T, M) mod 360
By same_angle_v0 on F, J, B, A we get angle(B, F, A) == angle(J, F, A) mod 360
By same_angle_v1 on A, G, T, B we get angle(G, A, B) == angle(T, A, B) mod 360
By same_angle_v1 on F, L, M, S we get angle(L, F, S) == angle(M, F, S) mod 360
By same_angle_v0 on C, B, M, L we get angle(B, C, L) == angle(M, C, L) mod 360
By same_angle_v1 on G, J, C, K we get angle(C, G, K) == angle(J, G, K) mod 360
By same_angle_v3 on F, S, A, B we get angle(S, F, B) == angle(A, F, B) + 180 mod 360
By same_angle_v0 on J, G, C, A we get angle(C, J, A) == angle(G, J, A) mod 360
By same_angle_v1 on K, B, A, J we get angle(A, K, J) == angle(B, K, J) mod 360
By same_angle_v3 on B, F, J, K we get angle(F, B, K) == angle(J, B, K) + 180 mod 360
By same_angle_v2 on C, B, T, L we get angle(B, C, L) == angle(T, C, L) + 180 mod 360
By same_angle_v2 on B, C, S, F we get angle(C, B, F) == angle(S, B, F) + 180 mod 360
By same_angle_v1 on G, K, M, A we get angle(K, G, A) == angle(M, G, A) mod 360
By same_angle_v0 on A, F, S, G we get angle(F, A, G) == angle(S, A, G) mod 360
By same_angle_v1 on J, B, F, A we get angle(B, J, A) == angle(F, J, A) mod 360
By same_angle_v1 on F, M, L, B we get angle(L, F, B) == angle(M, F, B) mod 360
By same_angle_v1 on G, C, J, M we get angle(C, G, M) == angle(J, G, M) mod 360
By same_angle_v3 on B, K, A, T we get angle(K, B, T) == angle(A, B, T) + 180 mod 360
By same_angle_v1 on A, T, G, J we get angle(G, A, J) == angle(T, A, J) mod 360
By same_angle_v1 on S, F, A, B we get angle(A, S, B) == angle(F, S, B) mod 360
By same_angle_v3 on C, L, A, T we get angle(L, C, T) == angle(A, C, T) + 180 mod 360
By same_angle_v0 on F, M, L, A we get angle(L, F, A) == angle(M, F, A) mod 360
By same_angle_v0 on C, S, B, L we get angle(B, C, L) == angle(S, C, L) mod 360
By same_angle_v1 on A, C, L, J we get angle(C, A, J) == angle(L, A, J) mod 360
By same_angle_v1 on T, B, C, A we get angle(B, T, A) == angle(C, T, A) mod 360
By same_angle_v1 on G, C, J, A we get angle(C, G, A) == angle(J, G, A) mod 360
By same_angle_v0 on A, F, S, K we get angle(F, A, K) == angle(S, A, K) mod 360
By same_angle_v3 on M, C, B, G we get angle(C, M, G) == angle(B, M, G) + 180 mod 360
By same_angle_v2 on C, J, G, T we get angle(J, C, T) == angle(G, C, T) + 180 mod 360
By same_angle_v1 on A, C, L, F we get angle(C, A, F) == angle(L, A, F) mod 360
By same_angle_v1 on C, B, S, A we get angle(B, C, A) == angle(S, C, A) mod 360
By same_angle_v1 on A, K, B, F we get angle(B, A, F) == angle(K, A, F) mod 360
By same_angle_v0 on A, K, B, C we get angle(B, A, C) == angle(K, A, C) mod 360
By same_angle_v2 on M, B, C, J we get angle(B, M, J) == angle(C, M, J) + 180 mod 360
By same_angle_v3 on B, K, A, C we get angle(K, B, C) == angle(A, B, C) + 180 mod 360
By same_angle_v1 on C, S, B, G we get angle(B, C, G) == angle(S, C, G) mod 360
By same_angle_v3 on C, G, J, M we get angle(G, C, M) == angle(J, C, M) + 180 mod 360
By same_angle_v1 on S, A, F, M we get angle(A, S, M) == angle(F, S, M) mod 360
By same_angle_v2 on F, S, A, J we get angle(S, F, J) == angle(A, F, J) + 180 mod 360
By altitude_definition on B, J, M, Line(B, C) we get Line(B, C) == altitude(B, J, M)
By altitude_definition on S, M, J, Line(B, C) we get Line(B, C) == altitude(S, J, M)
By collinear_definition on G, A, T we get A in Line(G, T), T in Line(A, G), Line(A, G) == Line(G, T), 0 == 2 * angle(A, G, T) mod 360
By altitude_definition on J, C, S, Line(J, M) we get Line(J, M) == altitude(J, C, S)
By altitude_definition on J, T, midpoint(S, T), Line(J, M) we get Line(J, M) == altitude(J, T, midpoint(S, T))
By altitude_definition on C, M, J, Line(B, C) we get Line(B, C) == altitude(C, J, M)
By collinear_definition on G, K, M we get K in Line(G, M), M in Line(G, K), Line(G, K) == Line(G, M), 0 == 2 * angle(K, G, M) mod 360
By altitude_definition on C, J, L, Line(A, C) we get Line(A, C) == altitude(C, J, L)
By altitude_definition on J, L, A, Line(J, L) we get Line(J, L) == altitude(J, A, L)
By collinear_definition on G, T, A we get T in Line(A, G), A in Line(G, T), Line(A, G) == Line(G, T), 0 == 2 * angle(T, G, A) mod 360
By altitude_definition on J, C, T, Line(J, M) we get Line(J, M) == altitude(J, C, T)
By perpendicular_angle_conditions_v0 on J, M, B we get angle(J, M, B) == orientation(B, J, M) mod 360
By collinear_definition on B, A, K we get A in Line(B, K), K in Line(A, B), Line(A, B) == Line(B, K), 0 == 2 * angle(A, B, K) mod 360
By altitude_definition on J, L, C, Line(J, L) we get Line(J, L) == altitude(J, C, L)
By altitude_definition on J, B, S, Line(J, M) we get Line(J, M) == altitude(J, B, S)
By perpendicular_angle_conditions_v0 on C, L, J we get angle(C, L, J) == orientation(C, L, J) mod 360
By altitude_definition on J, B, C, Line(J, M) we get Line(J, M) == altitude(J, B, C)
By collinear_definition on A, B, K we get B in Line(A, K), K in Line(A, B), Line(A, B) == Line(A, K), 0 == 2 * angle(B, A, K) mod 360
By altitude_definition on J, B, K, Line(J, K) we get Line(J, K) == altitude(J, B, K)
By collinear_definition on T, A, G we get A in Line(G, T), G in Line(A, T), Line(A, T) == Line(G, T), 0 == 2 * angle(A, T, G) mod 360
By collinear_definition on G, J, C we get J in Line(C, G), C in Line(G, J), Line(C, G) == Line(G, J), 0 == 2 * angle(J, G, C) mod 360
By isosceles_triangle_properties on J, L, K we get distance(J, K) == distance(J, L), angle(J, L, K) == angle(L, K, J) mod 360
By altitude_definition on J, A, K, Line(J, K) we get Line(J, K) == altitude(J, A, K)
By perpendicular_angle_conditions_v0 on A, K, J we get angle(A, K, J) == orientation(A, K, J) mod 360
By collinear_definition on B, C, S we get C in Line(B, S), S in Line(B, C), Line(B, C) == Line(B, S), 0 == 2 * angle(C, B, S) mod 360
By collinear_definition on M, B, C we get B in Line(C, M), C in Line(B, M), Line(B, M) == Line(C, M), 0 == 2 * angle(B, M, C) mod 360
By isosceles_triangle_properties on J, M, K we get distance(J, K) == distance(J, M), angle(J, M, K) == angle(M, K, J) mod 360
By collinear_definition on J, C, G we get C in Line(G, J), G in Line(C, J), Line(C, J) == Line(G, J), 0 == 2 * angle(C, J, G) mod 360
By isosceles_triangle_properties on C, L, M we get distance(C, L) == distance(C, M), angle(C, L, M) == angle(L, M, C) mod 360
By collinear_definition on B, S, C we get S in Line(B, C), C in Line(B, S), Line(B, C) == Line(B, S), 0 == 2 * angle(S, B, C) mod 360
By sas_anti_congruence on L, J, K, K, J, L we get anti_congruent_triangles(J, K, L, J, L, K)
By collinear_definition on B, J, F we get J in Line(B, F), F in Line(B, J), Line(B, F) == Line(B, J), 0 == 2 * angle(J, B, F) mod 360
By isosceles_triangle_properties on J, L, M we get distance(J, L) == distance(J, M), angle(J, L, M) == angle(L, M, J) mod 360
By collinear_definition on F, J, B we get J in Line(B, F), B in Line(F, J), Line(B, F) == Line(F, J), 0 == 2 * angle(J, F, B) mod 360
By perpendicular_angle_conditions_v0 on J, M, S we get angle(J, M, S) == orientation(J, M, S) mod 360
By collinear_definition on A, T, G we get T in Line(A, G), G in Line(A, T), Line(A, G) == Line(A, T), 0 == 2 * angle(T, A, G) mod 360
By isosceles_triangle_properties on A, K, L we get distance(A, K) == distance(A, L), angle(A, K, L) == angle(K, L, A) mod 360
By collinear_definition on C, B, T we get B in Line(C, T), T in Line(B, C), Line(B, C) == Line(C, T), 0 == 2 * angle(B, C, T) mod 360
By altitude_definition on J, S, midpoint(S, T), Line(J, M) we get Line(J, M) == altitude(J, S, midpoint(S, T))
By collinear_definition on B, K, A we get K in Line(A, B), A in Line(B, K), Line(A, B) == Line(B, K), 0 == 2 * angle(K, B, A) mod 360
By collinear_definition on C, L, A we get L in Line(A, C), A in Line(C, L), Line(A, C) == Line(C, L), 0 == 2 * angle(L, C, A) mod 360
By collinear_definition on F, A, S we get A in Line(F, S), S in Line(A, F), Line(A, F) == Line(F, S), 0 == 2 * angle(A, F, S) mod 360
By collinear_definition on L, A, C we get A in Line(C, L), C in Line(A, L), Line(A, L) == Line(C, L), 0 == 2 * angle(A, L, C) mod 360
By collinear_definition on S, B, C we get B in Line(C, S), C in Line(B, S), Line(B, S) == Line(C, S), 0 == 2 * angle(B, S, C) mod 360
By collinear_definition on M, C, B we get C in Line(B, M), B in Line(C, M), Line(B, M) == Line(C, M), 0 == 2 * angle(C, M, B) mod 360
By sas_anti_congruence on L, J, M, M, J, L we get anti_congruent_triangles(J, L, M, J, M, L)
By isosceles_triangle_properties on J, M, L we get distance(J, L) == distance(J, M), angle(J, M, L) == angle(M, L, J) mod 360
By collinear_definition on C, B, M we get B in Line(C, M), M in Line(B, C), Line(B, C) == Line(C, M), 0 == 2 * angle(B, C, M) mod 360
By isosceles_triangle_properties on J, K, M we get distance(J, K) == distance(J, M), angle(J, K, M) == angle(K, M, J) mod 360
By collinear_definition on G, C, J we get C in Line(G, J), J in Line(C, G), Line(C, G) == Line(G, J), 0 == 2 * angle(C, G, J) mod 360
By collinear_definition on A, G, T we get G in Line(A, T), T in Line(A, G), Line(A, G) == Line(A, T), 0 == 2 * angle(G, A, T) mod 360
By perpendicular_angle_conditions_v0 on J, K, A we get angle(J, K, A) == orientation(A, J, K) mod 360
By altitude_definition on T, J, M, Line(B, C) we get Line(B, C) == altitude(T, J, M)
By collinear_definition on B, M, C we get M in Line(B, C), C in Line(B, M), Line(B, C) == Line(B, M), 0 == 2 * angle(M, B, C) mod 360
By altitude_definition on J, B, T, Line(J, M) we get Line(J, M) == altitude(J, B, T)
By isosceles_triangle_properties on A, L, K we get distance(A, K) == distance(A, L), angle(A, L, K) == angle(L, K, A) mod 360
By altitude_definition on B, K, J, Line(A, B) we get Line(A, B) == altitude(B, J, K)
By collinear_definition on A, S, F we get S in Line(A, F), F in Line(A, S), Line(A, F) == Line(A, S), 0 == 2 * angle(S, A, F) mod 360
By altitude_definition on J, M, C, Line(J, M) we get Line(J, M) == altitude(J, C, M)
By perpendicular_angle_conditions_v0 on J, K, B we get angle(J, K, B) == orientation(B, J, K) mod 360
By collinear_definition on F, L, M we get L in Line(F, M), M in Line(F, L), Line(F, L) == Line(F, M), 0 == 2 * angle(L, F, M) mod 360
By altitude_definition on J, M, S, Line(J, M) we get Line(J, M) == altitude(J, M, S)
By collinear_definition on K, B, A we get B in Line(A, K), A in Line(B, K), Line(A, K) == Line(B, K), 0 == 2 * angle(B, K, A) mod 360
By perpendicular_angle_conditions_v0 on J, M, C we get angle(J, M, C) == orientation(C, J, M) mod 360
By collinear_definition on A, C, L we get C in Line(A, L), L in Line(A, C), Line(A, C) == Line(A, L), 0 == 2 * angle(C, A, L) mod 360
By perpendicular_angle_conditions_v0 on J, L, A we get angle(J, L, A) == orientation(A, J, L) mod 360
By altitude_definition on J, M, B, Line(J, M) we get Line(J, M) == altitude(J, B, M)
By altitude_definition on J, B, A, Line(J, K) we get Line(J, K) == altitude(J, A, B)
By collinear_definition on T, G, A we get G in Line(A, T), A in Line(G, T), Line(A, T) == Line(G, T), 0 == 2 * angle(G, T, A) mod 360
By altitude_definition on J, M, T, Line(J, M) we get Line(J, M) == altitude(J, M, T)
By collinear_definition on F, S, A we get S in Line(A, F), A in Line(F, S), Line(A, F) == Line(F, S), 0 == 2 * angle(S, F, A) mod 360
By altitude_definition on J, A, C, Line(J, L) we get Line(J, L) == altitude(J, A, C)
By collinear_definition on K, A, B we get A in Line(B, K), B in Line(A, K), Line(A, K) == Line(B, K), 0 == 2 * angle(A, K, B) mod 360
By collinear_definition on C, T, B we get T in Line(B, C), B in Line(C, T), Line(B, C) == Line(C, T), 0 == 2 * angle(T, C, B) mod 360
By sas_anti_congruence on K, J, M, M, J, K we get anti_congruent_triangles(J, K, M, J, M, K)
By collinear_definition on J, B, F we get B in Line(F, J), F in Line(B, J), Line(B, J) == Line(F, J), 0 == 2 * angle(B, J, F) mod 360
By collinear_definition on F, B, J we get B in Line(F, J), J in Line(B, F), Line(B, F) == Line(F, J), 0 == 2 * angle(B, F, J) mod 360
By collinear_definition on T, C, B we get C in Line(B, T), B in Line(C, T), Line(B, T) == Line(C, T), 0 == 2 * angle(C, T, B) mod 360
By collinear_definition on S, C, B we get C in Line(B, S), B in Line(C, S), Line(B, S) == Line(C, S), 0 == 2 * angle(C, S, B) mod 360
By collinear_definition on B, T, C we get T in Line(B, C), C in Line(B, T), Line(B, C) == Line(B, T), 0 == 2 * angle(T, B, C) mod 360
By collinear_definition on C, M, B we get M in Line(B, C), B in Line(C, M), Line(B, C) == Line(C, M), 0 == 2 * angle(M, C, B) mod 360
By collinear_definition on C, J, G we get J in Line(C, G), G in Line(C, J), Line(C, G) == Line(C, J), 0 == 2 * angle(J, C, G) mod 360
By collinear_definition on A, F, S we get F in Line(A, S), S in Line(A, F), Line(A, F) == Line(A, S), 0 == 2 * angle(F, A, S) mod 360
By collinear_definition on T, B, C we get B in Line(C, T), C in Line(B, T), Line(B, T) == Line(C, T), 0 == 2 * angle(B, T, C) mod 360
By perpendicular_angle_conditions_v0 on J, M, T we get angle(J, M, T) == orientation(J, M, T) mod 360
By collinear_definition on L, C, A we get C in Line(A, L), A in Line(C, L), Line(A, L) == Line(C, L), 0 == 2 * angle(C, L, A) mod 360
By altitude_definition on A, J, L, Line(A, C) we get Line(A, C) == altitude(A, J, L)
By collinear_definition on B, C, M we get C in Line(B, M), M in Line(B, C), Line(B, C) == Line(B, M), 0 == 2 * angle(C, B, M) mod 360
By perpendicular_angle_conditions_v0 on C, M, J we get angle(C, M, J) == orientation(C, M, J) mod 360
By collinear_definition on A, L, C we get L in Line(A, C), C in Line(A, L), Line(A, C) == Line(A, L), 0 == 2 * angle(L, A, C) mod 360
By collinear_definition on C, A, L we get A in Line(C, L), L in Line(A, C), Line(A, C) == Line(C, L), 0 == 2 * angle(A, C, L) mod 360
By sas_anti_congruence on M, J, L, L, J, M we get anti_congruent_triangles(J, L, M, J, M, L)
By perpendicular_angle_conditions_v0 on J, L, C we get angle(J, L, C) == orientation(C, J, L) mod 360
By isosceles_triangle_properties on B, K, M we get distance(B, K) == distance(B, M), angle(B, K, M) == angle(K, M, B) mod 360
By collinear_definition on J, G, C we get G in Line(C, J), C in Line(G, J), Line(C, J) == Line(G, J), 0 == 2 * angle(G, J, C) mod 360
By isosceles_triangle_properties on B, M, K we get distance(B, K) == distance(B, M), angle(B, M, K) == angle(M, K, B) mod 360
By collinear_definition on C, S, B we get S in Line(B, C), B in Line(C, S), Line(B, C) == Line(C, S), 0 == 2 * angle(S, C, B) mod 360
By collinear_definition on G, M, K we get M in Line(G, K), K in Line(G, M), Line(G, K) == Line(G, M), 0 == 2 * angle(M, G, K) mod 360
By perpendicular_angle_conditions_v0 on B, K, J we get angle(B, K, J) == orientation(B, K, J) mod 360
By collinear_definition on A, K, B we get K in Line(A, B), B in Line(A, K), Line(A, B) == Line(A, K), 0 == 2 * angle(K, A, B) mod 360
By collinear_definition on B, C, T we get C in Line(B, T), T in Line(B, C), Line(B, C) == Line(B, T), 0 == 2 * angle(C, B, T) mod 360
By isosceles_triangle_properties on C, M, L we get distance(C, L) == distance(C, M), angle(C, M, L) == angle(M, L, C) mod 360
By sas_anti_congruence on M, J, K, K, J, M we get anti_congruent_triangles(J, K, M, J, M, K)
By sas_anti_congruence on K, J, L, L, J, K we get anti_congruent_triangles(J, K, L, J, L, K)
By collinear_definition on B, F, J we get F in Line(B, J), J in Line(B, F), Line(B, F) == Line(B, J), 0 == 2 * angle(F, B, J) mod 360
By altitude_definition on J, S, T, Line(J, M) we get Line(J, M) == altitude(J, S, T)
By collinear_definition on C, G, J we get G in Line(C, J), J in Line(C, G), Line(C, G) == Line(C, J), 0 == 2 * angle(G, C, J) mod 360
By isosceles_triangle_properties on J, K, L we get distance(J, K) == distance(J, L), angle(J, K, L) == angle(K, L, J) mod 360
By altitude_definition on A, J, K, Line(A, B) we get Line(A, B) == altitude(A, J, K)
By collinear_definition on S, F, A we get F in Line(A, S), A in Line(F, S), Line(A, S) == Line(F, S), 0 == 2 * angle(F, S, A) mod 360
By perpendicular_angle_conditions_v0 on A, L, J we get angle(A, L, J) == orientation(A, L, J) mod 360
By collinear_definition on S, A, F we get A in Line(F, S), F in Line(A, S), Line(A, S) == Line(F, S), 0 == 2 * angle(A, S, F) mod 360
By collinear_definition on C, B, S we get B in Line(C, S), S in Line(B, C), Line(B, C) == Line(C, S), 0 == 2 * angle(B, C, S) mod 360
By perpendicular_angle_conditions_v0 on T, M, J we get angle(T, M, J) == orientation(J, T, M) mod 360
By perpendicular_angle_conditions_v0 on S, M, J we get angle(S, M, J) == orientation(J, S, M) mod 360
By collinear_definition on J, F, B we get F in Line(B, J), B in Line(F, J), Line(B, J) == Line(F, J), 0 == 2 * angle(F, J, B) mod 360
By perpendicular_angle_conditions_v0 on B, M, J we get angle(B, M, J) == orientation(B, M, J) mod 360
By collinear_definition on F, M, L we get M in Line(F, L), L in Line(F, M), Line(F, L) == Line(F, M), 0 == 2 * angle(M, F, L) mod 360
By external_angle_bisector_definition_v0 on A, G, B, C we get 180 == angle(A, C, G) + angle(B, C, G) mod 360
By perpendicular_bisector_sufficient_conditions on K, M, B, J we get Line(B, J) == perpendicular_bisector(K, M)
By perpendicular_bisector_sufficient_conditions on M, L, C, J we get Line(C, J) == perpendicular_bisector(L, M)
By internal_angle_bisector_definition_v0 on C, J, B, A we get angle(C, A, J) == angle(J, A, B) mod 360
By perpendicular_bisector_sufficient_conditions on L, K, A, J we get Line(A, J) == perpendicular_bisector(K, L)
By external_angle_bisector_definition_v0 on B, J, A, C we get 180 == angle(B, C, J) + angle(A, C, J) mod 360
By power_of_a_point_tangent on S, M, Circle(K, L, M) we get 2 * log(distance(M, S)) == log(power_of_a_point(S, Circle(K, L, M)))
By power_of_a_point_tangent on A, K, Circle(K, L, M) we get 2 * log(distance(A, K)) == log(power_of_a_point(A, Circle(K, L, M)))
By external_angle_bisector_definition_v0 on A, J, C, B we get 180 == angle(A, B, J) + angle(C, B, J) mod 360
By power_of_a_point_tangent on C, L, Circle(K, L, M) we get 2 * log(distance(C, L)) == log(power_of_a_point(C, Circle(K, L, M)))
By external_angle_bisector_definition_v0 on C, F, A, B we get 180 == angle(C, B, F) + angle(A, B, F) mod 360
By power_of_a_point_tangent on C, M, Circle(K, L, M) we get 2 * log(distance(C, M)) == log(power_of_a_point(C, Circle(K, L, M)))
By internal_angle_bisector_definition_v0 on B, J, C, A we get angle(B, A, J) == angle(J, A, C) mod 360
By power_of_a_point_tangent on T, M, Circle(K, L, M) we get 2 * log(distance(M, T)) == log(power_of_a_point(T, Circle(K, L, M)))
By power_of_a_point_tangent on B, K, Circle(K, L, M) we get 2 * log(distance(B, K)) == log(power_of_a_point(B, Circle(K, L, M)))
By power_of_a_point_tangent on B, M, Circle(K, L, M) we get 2 * log(distance(B, M)) == log(power_of_a_point(B, Circle(K, L, M)))
By power_of_a_point_tangent on A, L, Circle(K, L, M) we get 2 * log(distance(A, L)) == log(power_of_a_point(A, Circle(K, L, M)))
By power_of_a_point_definition on F, L, M, Circle(K, L, M) we get log(distance(F, L)) + log(distance(F, M)) == log(power_of_a_point(F, Circle(K, L, M)))
By power_of_a_point_definition on G, M, K, Circle(K, L, M) we get log(distance(G, M)) + log(distance(G, K)) == log(power_of_a_point(G, Circle(K, L, M)))
By concurrent_sufficient_conditions on Line(K, L), Line(J, K), Line(A, B) we get concurrent(Line(A, B), Line(J, K), Line(K, L))
By concyclic_sufficient_conditions_v1 on J, K, A, L we get concyclic(A, J, K, L)
By concurrent_sufficient_conditions on Line(B, F), Line(J, L), Line(A, J) we get concurrent(Line(A, J), Line(B, F), Line(J, L))
By concurrent_sufficient_conditions on Line(J, M), Line(A, J), Line(B, F) we get concurrent(Line(A, J), Line(B, F), Line(J, M))
By concurrent_sufficient_conditions on Line(J, K), Line(J, M), Line(C, G) we get concurrent(Line(C, G), Line(J, K), Line(J, M))
By concurrent_sufficient_conditions on Line(G, K), Line(A, B), Line(K, L) we get concurrent(Line(A, B), Line(G, K), Line(K, L))
By concurrent_sufficient_conditions on Line(K, L), Line(G, K), Line(A, B) we get concurrent(Line(A, B), Line(G, K), Line(K, L))
By concurrent_sufficient_conditions on Line(C, G), Line(B, F), Line(J, M) we get concurrent(Line(B, F), Line(C, G), Line(J, M))
By concurrent_sufficient_conditions on Line(C, G), Line(A, J), Line(J, K) we get concurrent(Line(A, J), Line(C, G), Line(J, K))
By concurrent_sufficient_conditions on Line(J, M), Line(B, F), Line(C, G) we get concurrent(Line(B, F), Line(C, G), Line(J, M))
By line_definition on B, midpoint(K, M), Line(B, F) we get Line(B, F) == Line(B, midpoint(K, M))
By concurrent_sufficient_conditions on Line(A, J), Line(C, G), Line(J, M) we get concurrent(Line(A, J), Line(C, G), Line(J, M))
By concurrent_sufficient_conditions on Line(K, L), Line(F, L), Line(A, C) we get concurrent(Line(A, C), Line(F, L), Line(K, L))
By concurrent_sufficient_conditions on Line(G, K), Line(F, L), Line(J, M) we get concurrent(Line(F, L), Line(G, K), Line(J, M))
By concyclic_sufficient_conditions_v1 on J, M, C, L we get concyclic(C, J, L, M)
By concurrent_sufficient_conditions on Line(F, L), Line(A, C), Line(K, L) we get concurrent(Line(A, C), Line(F, L), Line(K, L))
By concurrent_sufficient_conditions on Line(J, L), Line(A, C), Line(F, L) we get concurrent(Line(A, C), Line(F, L), Line(J, L))
By concurrent_sufficient_conditions on Line(K, L), Line(A, C), Line(F, L) we get concurrent(Line(A, C), Line(F, L), Line(K, L))
By concurrent_sufficient_conditions on Line(K, L), Line(G, K), Line(J, K) we get concurrent(Line(G, K), Line(J, K), Line(K, L))
By line_definition on midpoint(L, M), J, Line(C, G) we get Line(C, G) == Line(J, midpoint(L, M))
By concurrent_sufficient_conditions on Line(J, M), Line(F, L), Line(B, C) we get concurrent(Line(B, C), Line(F, L), Line(J, M))
By concurrent_sufficient_conditions on Line(J, K), Line(K, L), Line(A, B) we get concurrent(Line(A, B), Line(J, K), Line(K, L))
By concurrent_sufficient_conditions on Line(J, M), Line(G, K), Line(B, C) we get concurrent(Line(B, C), Line(G, K), Line(J, M))
By concyclic_sufficient_conditions_v1 on B, M, J, K we get concyclic(B, J, K, M)
By concurrent_sufficient_conditions on Line(F, L), Line(B, C), Line(J, M) we get concurrent(Line(B, C), Line(F, L), Line(J, M))
By concurrent_sufficient_conditions on Line(A, J), Line(J, K), Line(J, M) we get concurrent(Line(A, J), Line(J, K), Line(J, M))
By concurrent_sufficient_conditions on Line(C, G), Line(J, M), Line(A, J) we get concurrent(Line(A, J), Line(C, G), Line(J, M))
By concurrent_sufficient_conditions on Line(J, L), Line(B, F), Line(J, M) we get concurrent(Line(B, F), Line(J, L), Line(J, M))
By concurrent_sufficient_conditions on Line(J, L), Line(J, M), Line(C, G) we get concurrent(Line(C, G), Line(J, L), Line(J, M))
By concurrent_sufficient_conditions on Line(J, L), Line(C, G), Line(A, J) we get concurrent(Line(A, J), Line(C, G), Line(J, L))
By concurrent_sufficient_conditions on Line(J, M), Line(B, F), Line(A, J) we get concurrent(Line(A, J), Line(B, F), Line(J, M))
By concurrent_sufficient_conditions on Line(J, K), Line(A, B), Line(G, K) we get concurrent(Line(A, B), Line(G, K), Line(J, K))
By concurrent_sufficient_conditions on Line(J, K), Line(C, G), Line(J, L) we get concurrent(Line(C, G), Line(J, K), Line(J, L))
By line_definition on C, midpoint(L, M), Line(C, G) we get Line(C, G) == Line(C, midpoint(L, M))
By line_definition on F, midpoint(K, M), Line(B, F) we get Line(B, F) == Line(F, midpoint(K, M))
By line_definition on J, midpoint(K, M), Line(B, F) we get Line(B, F) == Line(J, midpoint(K, M))
By concurrent_sufficient_conditions on Line(J, K), Line(J, M), Line(A, J) we get concurrent(Line(A, J), Line(J, K), Line(J, M))
By concurrent_sufficient_conditions on Line(A, J), Line(J, M), Line(C, G) we get concurrent(Line(A, J), Line(C, G), Line(J, M))
By concurrent_sufficient_conditions on Line(B, F), Line(J, M), Line(C, G) we get concurrent(Line(B, F), Line(C, G), Line(J, M))
By concurrent_sufficient_conditions on Line(G, K), Line(B, C), Line(J, M) we get concurrent(Line(B, C), Line(G, K), Line(J, M))
By concurrent_sufficient_conditions on Line(J, M), Line(J, L), Line(B, F) we get concurrent(Line(B, F), Line(J, L), Line(J, M))
By concurrent_sufficient_conditions on Line(A, J), Line(J, M), Line(J, L) we get concurrent(Line(A, J), Line(J, L), Line(J, M))
By concurrent_sufficient_conditions on Line(C, G), Line(J, L), Line(B, F) we get concurrent(Line(B, F), Line(C, G), Line(J, L))
By concurrent_sufficient_conditions on Line(J, K), Line(J, M), Line(B, F) we get concurrent(Line(B, F), Line(J, K), Line(J, M))
By concurrent_sufficient_conditions on Line(F, L), Line(J, L), Line(K, L) we get concurrent(Line(F, L), Line(J, L), Line(K, L))
By concurrent_sufficient_conditions on Line(F, L), Line(G, K), Line(J, M) we get concurrent(Line(F, L), Line(G, K), Line(J, M))
By concurrent_sufficient_conditions on Line(A, B), Line(J, K), Line(K, L) we get concurrent(Line(A, B), Line(J, K), Line(K, L))
By concurrent_sufficient_conditions on Line(G, K), Line(J, K), Line(A, B) we get concurrent(Line(A, B), Line(G, K), Line(J, K))
By concurrent_sufficient_conditions on Line(C, G), Line(B, F), Line(J, K) we get concurrent(Line(B, F), Line(C, G), Line(J, K))
By concurrent_sufficient_conditions on Line(J, L), Line(F, L), Line(K, L) we get concurrent(Line(F, L), Line(J, L), Line(K, L))
By concurrent_sufficient_conditions on Line(A, J), Line(C, G), Line(J, L) we get concurrent(Line(A, J), Line(C, G), Line(J, L))
By concurrent_sufficient_conditions on Line(B, C), Line(F, L), Line(J, M) we get concurrent(Line(B, C), Line(F, L), Line(J, M))
By concurrent_sufficient_conditions on Line(J, L), Line(A, J), Line(J, M) we get concurrent(Line(A, J), Line(J, L), Line(J, M))
By line_definition on A, midpoint(K, L), Line(A, J) we get Line(A, J) == Line(A, midpoint(K, L))
By concurrent_sufficient_conditions on Line(B, F), Line(J, M), Line(J, L) we get concurrent(Line(B, F), Line(J, L), Line(J, M))
By concurrent_sufficient_conditions on Line(J, M), Line(F, L), Line(G, K) we get concurrent(Line(F, L), Line(G, K), Line(J, M))
By concurrent_sufficient_conditions on Line(J, L), Line(K, L), Line(F, L) we get concurrent(Line(F, L), Line(J, L), Line(K, L))
By concurrent_sufficient_conditions on Line(J, L), Line(J, K), Line(J, M) we get concurrent(Line(J, K), Line(J, L), Line(J, M))
By concurrent_sufficient_conditions on Line(B, F), Line(A, J), Line(J, M) we get concurrent(Line(A, J), Line(B, F), Line(J, M))
By line_definition on J, midpoint(K, L), Line(A, J) we get Line(A, J) == Line(J, midpoint(K, L))
By concurrent_sufficient_conditions on Line(B, F), Line(J, K), Line(J, L) we get concurrent(Line(B, F), Line(J, K), Line(J, L))
By concurrent_sufficient_conditions on Line(A, J), Line(J, L), Line(B, F) we get concurrent(Line(A, J), Line(B, F), Line(J, L))
By concurrent_sufficient_conditions on Line(J, M), Line(J, K), Line(A, J) we get concurrent(Line(A, J), Line(J, K), Line(J, M))
By concurrent_sufficient_conditions on Line(A, C), Line(K, L), Line(J, L) we get concurrent(Line(A, C), Line(J, L), Line(K, L))
By concurrent_sufficient_conditions on Line(J, K), Line(B, F), Line(A, J) we get concurrent(Line(A, J), Line(B, F), Line(J, K))
By concurrent_sufficient_conditions on Line(A, J), Line(B, F), Line(J, K) we get concurrent(Line(A, J), Line(B, F), Line(J, K))
By concurrent_sufficient_conditions on Line(B, C), Line(J, M), Line(F, L) we get concurrent(Line(B, C), Line(F, L), Line(J, M))
By concurrent_sufficient_conditions on Line(K, L), Line(J, L), Line(F, L) we get concurrent(Line(F, L), Line(J, L), Line(K, L))
By concurrent_sufficient_conditions on Line(G, K), Line(K, L), Line(J, K) we get concurrent(Line(G, K), Line(J, K), Line(K, L))
By concurrent_sufficient_conditions on Line(G, K), Line(A, B), Line(J, K) we get concurrent(Line(A, B), Line(G, K), Line(J, K))
By concurrent_sufficient_conditions on Line(J, M), Line(C, G), Line(J, K) we get concurrent(Line(C, G), Line(J, K), Line(J, M))
By concurrent_sufficient_conditions on Line(A, B), Line(J, K), Line(G, K) we get concurrent(Line(A, B), Line(G, K), Line(J, K))
By concurrent_sufficient_conditions on Line(K, L), Line(A, B), Line(J, K) we get concurrent(Line(A, B), Line(J, K), Line(K, L))
By concurrent_sufficient_conditions on Line(J, L), Line(C, G), Line(J, K) we get concurrent(Line(C, G), Line(J, K), Line(J, L))
By concurrent_sufficient_conditions on Line(A, B), Line(G, K), Line(K, L) we get concurrent(Line(A, B), Line(G, K), Line(K, L))
By concurrent_sufficient_conditions on Line(A, C), Line(J, L), Line(F, L) we get concurrent(Line(A, C), Line(F, L), Line(J, L))
By concurrent_sufficient_conditions on Line(C, G), Line(J, K), Line(B, F) we get concurrent(Line(B, F), Line(C, G), Line(J, K))
By concurrent_sufficient_conditions on Line(J, K), Line(J, L), Line(C, G) we get concurrent(Line(C, G), Line(J, K), Line(J, L))
By concurrent_sufficient_conditions on Line(J, K), Line(A, J), Line(C, G) we get concurrent(Line(A, J), Line(C, G), Line(J, K))
By concurrent_sufficient_conditions on Line(K, L), Line(J, K), Line(G, K) we get concurrent(Line(G, K), Line(J, K), Line(K, L))
By concurrent_sufficient_conditions on Line(A, J), Line(J, K), Line(C, G) we get concurrent(Line(A, J), Line(C, G), Line(J, K))
By concurrent_sufficient_conditions on Line(J, L), Line(J, K), Line(C, G) we get concurrent(Line(C, G), Line(J, K), Line(J, L))
By concurrent_sufficient_conditions on Line(C, G), Line(J, K), Line(J, L) we get concurrent(Line(C, G), Line(J, K), Line(J, L))
By concurrent_sufficient_conditions on Line(B, F), Line(J, M), Line(A, J) we get concurrent(Line(A, J), Line(B, F), Line(J, M))
By concurrent_sufficient_conditions on Line(J, M), Line(J, L), Line(C, G) we get concurrent(Line(C, G), Line(J, L), Line(J, M))
By concurrent_sufficient_conditions on Line(B, F), Line(A, J), Line(J, K) we get concurrent(Line(A, J), Line(B, F), Line(J, K))
By concurrent_sufficient_conditions on Line(J, K), Line(B, F), Line(J, M) we get concurrent(Line(B, F), Line(J, K), Line(J, M))
By concurrent_sufficient_conditions on Line(B, F), Line(J, K), Line(C, G) we get concurrent(Line(B, F), Line(C, G), Line(J, K))
By concurrent_sufficient_conditions on Line(J, M), Line(J, L), Line(J, K) we get concurrent(Line(J, K), Line(J, L), Line(J, M))
By concurrent_sufficient_conditions on Line(F, L), Line(J, L), Line(A, C) we get concurrent(Line(A, C), Line(F, L), Line(J, L))
By concurrent_sufficient_conditions on Line(J, L), Line(B, F), Line(A, J) we get concurrent(Line(A, J), Line(B, F), Line(J, L))
By concurrent_sufficient_conditions on Line(F, L), Line(J, M), Line(B, C) we get concurrent(Line(B, C), Line(F, L), Line(J, M))
By concurrent_sufficient_conditions on Line(A, J), Line(B, F), Line(J, L) we get concurrent(Line(A, J), Line(B, F), Line(J, L))
By concurrent_sufficient_conditions on Line(J, K), Line(C, G), Line(A, J) we get concurrent(Line(A, J), Line(C, G), Line(J, K))
By concurrent_sufficient_conditions on Line(J, K), Line(C, G), Line(B, F) we get concurrent(Line(B, F), Line(C, G), Line(J, K))
By concurrent_sufficient_conditions on Line(B, C), Line(G, K), Line(J, M) we get concurrent(Line(B, C), Line(G, K), Line(J, M))
By concurrent_sufficient_conditions on Line(J, K), Line(B, F), Line(J, L) we get concurrent(Line(B, F), Line(J, K), Line(J, L))
By concurrent_sufficient_conditions on Line(A, J), Line(J, K), Line(B, F) we get concurrent(Line(A, J), Line(B, F), Line(J, K))
By concurrent_sufficient_conditions on Line(J, K), Line(G, K), Line(K, L) we get concurrent(Line(G, K), Line(J, K), Line(K, L))
By concurrent_sufficient_conditions on Line(J, M), Line(B, C), Line(G, K) we get concurrent(Line(B, C), Line(G, K), Line(J, M))
By concurrent_sufficient_conditions on Line(A, C), Line(F, L), Line(J, L) we get concurrent(Line(A, C), Line(F, L), Line(J, L))
By concurrent_sufficient_conditions on Line(B, C), Line(J, M), Line(G, K) we get concurrent(Line(B, C), Line(G, K), Line(J, M))
By concurrent_sufficient_conditions on Line(J, M), Line(J, L), Line(A, J) we get concurrent(Line(A, J), Line(J, L), Line(J, M))
By concurrent_sufficient_conditions on Line(J, M), Line(G, K), Line(F, L) we get concurrent(Line(F, L), Line(G, K), Line(J, M))
By concurrent_sufficient_conditions on Line(J, M), Line(C, G), Line(A, J) we get concurrent(Line(A, J), Line(C, G), Line(J, M))
By concurrent_sufficient_conditions on Line(A, J), Line(J, M), Line(J, K) we get concurrent(Line(A, J), Line(J, K), Line(J, M))
By concurrent_sufficient_conditions on Line(B, F), Line(C, G), Line(J, L) we get concurrent(Line(B, F), Line(C, G), Line(J, L))
By concurrent_sufficient_conditions on Line(J, L), Line(J, M), Line(B, F) we get concurrent(Line(B, F), Line(J, L), Line(J, M))
By line_definition on G, midpoint(L, M), Line(C, G) we get Line(C, G) == Line(G, midpoint(L, M))
By concurrent_sufficient_conditions on Line(J, L), Line(A, C), Line(K, L) we get concurrent(Line(A, C), Line(J, L), Line(K, L))
By concurrent_sufficient_conditions on Line(J, K), Line(J, L), Line(A, J) we get concurrent(Line(A, J), Line(J, K), Line(J, L))
By concurrent_sufficient_conditions on Line(C, G), Line(J, M), Line(J, L) we get concurrent(Line(C, G), Line(J, L), Line(J, M))
By concurrent_sufficient_conditions on Line(J, L), Line(J, K), Line(A, J) we get concurrent(Line(A, J), Line(J, K), Line(J, L))
By concurrent_sufficient_conditions on Line(B, F), Line(J, M), Line(J, K) we get concurrent(Line(B, F), Line(J, K), Line(J, M))
By concurrent_sufficient_conditions on Line(F, L), Line(K, L), Line(A, C) we get concurrent(Line(A, C), Line(F, L), Line(K, L))
By concurrent_sufficient_conditions on Line(J, M), Line(C, G), Line(J, L) we get concurrent(Line(C, G), Line(J, L), Line(J, M))
By concurrent_sufficient_conditions on Line(C, G), Line(J, L), Line(A, J) we get concurrent(Line(A, J), Line(C, G), Line(J, L))
By concurrent_sufficient_conditions on Line(J, K), Line(A, J), Line(J, L) we get concurrent(Line(A, J), Line(J, K), Line(J, L))
By concurrent_sufficient_conditions on Line(J, M), Line(C, G), Line(B, F) we get concurrent(Line(B, F), Line(C, G), Line(J, M))
By concurrent_sufficient_conditions on Line(J, L), Line(K, L), Line(A, C) we get concurrent(Line(A, C), Line(J, L), Line(K, L))
By concurrent_sufficient_conditions on Line(A, C), Line(K, L), Line(F, L) we get concurrent(Line(A, C), Line(F, L), Line(K, L))
By concurrent_sufficient_conditions on Line(J, M), Line(J, K), Line(J, L) we get concurrent(Line(J, K), Line(J, L), Line(J, M))
By concurrent_sufficient_conditions on Line(C, G), Line(J, K), Line(J, M) we get concurrent(Line(C, G), Line(J, K), Line(J, M))
By concurrent_sufficient_conditions on Line(J, L), Line(A, J), Line(B, F) we get concurrent(Line(A, J), Line(B, F), Line(J, L))
By concurrent_sufficient_conditions on Line(J, L), Line(A, J), Line(C, G) we get concurrent(Line(A, J), Line(C, G), Line(J, L))
By concurrent_sufficient_conditions on Line(A, J), Line(J, M), Line(B, F) we get concurrent(Line(A, J), Line(B, F), Line(J, M))
By concurrent_sufficient_conditions on Line(J, M), Line(J, K), Line(B, F) we get concurrent(Line(B, F), Line(J, K), Line(J, M))
By concurrent_sufficient_conditions on Line(J, K), Line(K, L), Line(G, K) we get concurrent(Line(G, K), Line(J, K), Line(K, L))
By concurrent_sufficient_conditions on Line(G, K), Line(J, M), Line(F, L) we get concurrent(Line(F, L), Line(G, K), Line(J, M))
By concurrent_sufficient_conditions on Line(J, K), Line(A, J), Line(J, M) we get concurrent(Line(A, J), Line(J, K), Line(J, M))
By concurrent_sufficient_conditions on Line(B, F), Line(J, L), Line(J, M) we get concurrent(Line(B, F), Line(J, L), Line(J, M))
By concurrent_sufficient_conditions on Line(J, K), Line(J, L), Line(B, F) we get concurrent(Line(B, F), Line(J, K), Line(J, L))
By concurrent_sufficient_conditions on Line(C, G), Line(A, J), Line(J, L) we get concurrent(Line(A, J), Line(C, G), Line(J, L))
By concurrent_sufficient_conditions on Line(J, M), Line(B, C), Line(F, L) we get concurrent(Line(B, C), Line(F, L), Line(J, M))
By concurrent_sufficient_conditions on Line(A, B), Line(G, K), Line(J, K) we get concurrent(Line(A, B), Line(G, K), Line(J, K))
By concurrent_sufficient_conditions on Line(J, M), Line(A, J), Line(C, G) we get concurrent(Line(A, J), Line(C, G), Line(J, M))
By concurrent_sufficient_conditions on Line(J, M), Line(A, J), Line(J, L) we get concurrent(Line(A, J), Line(J, L), Line(J, M))
By concurrent_sufficient_conditions on Line(A, J), Line(J, L), Line(J, K) we get concurrent(Line(A, J), Line(J, K), Line(J, L))
By concurrent_sufficient_conditions on Line(G, K), Line(J, K), Line(K, L) we get concurrent(Line(G, K), Line(J, K), Line(K, L))
By concurrent_sufficient_conditions on Line(K, L), Line(A, B), Line(G, K) we get concurrent(Line(A, B), Line(G, K), Line(K, L))
By concurrent_sufficient_conditions on Line(J, M), Line(J, K), Line(C, G) we get concurrent(Line(C, G), Line(J, K), Line(J, M))
By concurrent_sufficient_conditions on Line(B, F), Line(C, G), Line(J, K) we get concurrent(Line(B, F), Line(C, G), Line(J, K))
By concurrent_sufficient_conditions on Line(A, C), Line(F, L), Line(K, L) we get concurrent(Line(A, C), Line(F, L), Line(K, L))
By concurrent_sufficient_conditions on Line(C, G), Line(B, F), Line(J, L) we get concurrent(Line(B, F), Line(C, G), Line(J, L))
By concurrent_sufficient_conditions on Line(B, F), Line(J, K), Line(A, J) we get concurrent(Line(A, J), Line(B, F), Line(J, K))
By concurrent_sufficient_conditions on Line(G, K), Line(K, L), Line(A, B) we get concurrent(Line(A, B), Line(G, K), Line(K, L))
By concurrent_sufficient_conditions on Line(B, F), Line(A, J), Line(J, L) we get concurrent(Line(A, J), Line(B, F), Line(J, L))
By concurrent_sufficient_conditions on Line(A, J), Line(J, K), Line(J, L) we get concurrent(Line(A, J), Line(J, K), Line(J, L))
By concurrent_sufficient_conditions on Line(J, M), Line(A, J), Line(J, K) we get concurrent(Line(A, J), Line(J, K), Line(J, M))
By concurrent_sufficient_conditions on Line(C, G), Line(J, K), Line(A, J) we get concurrent(Line(A, J), Line(C, G), Line(J, K))
By concurrent_sufficient_conditions on Line(F, L), Line(A, C), Line(J, L) we get concurrent(Line(A, C), Line(F, L), Line(J, L))
By concurrent_sufficient_conditions on Line(J, L), Line(C, G), Line(B, F) we get concurrent(Line(B, F), Line(C, G), Line(J, L))
By concurrent_sufficient_conditions on Line(J, K), Line(J, M), Line(J, L) we get concurrent(Line(J, K), Line(J, L), Line(J, M))
By concurrent_sufficient_conditions on Line(J, L), Line(J, M), Line(A, J) we get concurrent(Line(A, J), Line(J, L), Line(J, M))
By concurrent_sufficient_conditions on Line(A, B), Line(K, L), Line(G, K) we get concurrent(Line(A, B), Line(G, K), Line(K, L))
By concurrent_sufficient_conditions on Line(B, F), Line(J, K), Line(J, M) we get concurrent(Line(B, F), Line(J, K), Line(J, M))
By concurrent_sufficient_conditions on Line(F, L), Line(K, L), Line(J, L) we get concurrent(Line(F, L), Line(J, L), Line(K, L))
By concurrent_sufficient_conditions on Line(J, L), Line(C, G), Line(J, M) we get concurrent(Line(C, G), Line(J, L), Line(J, M))
By concurrent_sufficient_conditions on Line(J, L), Line(B, F), Line(J, K) we get concurrent(Line(B, F), Line(J, K), Line(J, L))
By concurrent_sufficient_conditions on Line(F, L), Line(J, M), Line(G, K) we get concurrent(Line(F, L), Line(G, K), Line(J, M))
By concurrent_sufficient_conditions on Line(B, F), Line(C, G), Line(J, M) we get concurrent(Line(B, F), Line(C, G), Line(J, M))
By concurrent_sufficient_conditions on Line(C, G), Line(J, L), Line(J, K) we get concurrent(Line(C, G), Line(J, K), Line(J, L))
By concurrent_sufficient_conditions on Line(K, L), Line(F, L), Line(J, L) we get concurrent(Line(F, L), Line(J, L), Line(K, L))
By concurrent_sufficient_conditions on Line(J, K), Line(A, B), Line(K, L) we get concurrent(Line(A, B), Line(J, K), Line(K, L))
By concurrent_sufficient_conditions on Line(K, L), Line(A, C), Line(J, L) we get concurrent(Line(A, C), Line(J, L), Line(K, L))
By concurrent_sufficient_conditions on Line(C, G), Line(J, M), Line(J, K) we get concurrent(Line(C, G), Line(J, K), Line(J, M))
By concurrent_sufficient_conditions on Line(A, J), Line(B, F), Line(J, M) we get concurrent(Line(A, J), Line(B, F), Line(J, M))
By concurrent_sufficient_conditions on Line(C, G), Line(J, M), Line(B, F) we get concurrent(Line(B, F), Line(C, G), Line(J, M))
By concurrent_sufficient_conditions on Line(A, J), Line(C, G), Line(J, K) we get concurrent(Line(A, J), Line(C, G), Line(J, K))
By concurrent_sufficient_conditions on Line(J, K), Line(A, J), Line(B, F) we get concurrent(Line(A, J), Line(B, F), Line(J, K))
By concurrent_sufficient_conditions on Line(J, M), Line(B, F), Line(J, L) we get concurrent(Line(B, F), Line(J, L), Line(J, M))
By concurrent_sufficient_conditions on Line(A, J), Line(J, L), Line(C, G) we get concurrent(Line(A, J), Line(C, G), Line(J, L))
By concurrent_sufficient_conditions on Line(C, G), Line(J, L), Line(J, M) we get concurrent(Line(C, G), Line(J, L), Line(J, M))
By concurrent_sufficient_conditions on Line(J, L), Line(B, F), Line(C, G) we get concurrent(Line(B, F), Line(C, G), Line(J, L))
By concurrent_sufficient_conditions on Line(K, L), Line(J, L), Line(A, C) we get concurrent(Line(A, C), Line(J, L), Line(K, L))
By concurrent_sufficient_conditions on Line(J, K), Line(C, G), Line(J, M) we get concurrent(Line(C, G), Line(J, K), Line(J, M))
By concurrent_sufficient_conditions on Line(B, F), Line(J, L), Line(J, K) we get concurrent(Line(B, F), Line(J, K), Line(J, L))
By concurrent_sufficient_conditions on Line(G, K), Line(J, M), Line(B, C) we get concurrent(Line(B, C), Line(G, K), Line(J, M))
By concurrent_sufficient_conditions on Line(J, K), Line(J, L), Line(J, M) we get concurrent(Line(J, K), Line(J, L), Line(J, M))
By concurrent_sufficient_conditions on Line(A, B), Line(K, L), Line(J, K) we get concurrent(Line(A, B), Line(J, K), Line(K, L))
By concurrent_sufficient_conditions on Line(J, L), Line(A, J), Line(J, K) we get concurrent(Line(A, J), Line(J, K), Line(J, L))
By concurrent_sufficient_conditions on Line(J, K), Line(B, F), Line(C, G) we get concurrent(Line(B, F), Line(C, G), Line(J, K))
By concurrent_sufficient_conditions on Line(J, L), Line(J, K), Line(B, F) we get concurrent(Line(B, F), Line(J, K), Line(J, L))
By concurrent_sufficient_conditions on Line(C, G), Line(A, J), Line(J, M) we get concurrent(Line(A, J), Line(C, G), Line(J, M))
By concurrent_sufficient_conditions on Line(J, M), Line(B, F), Line(J, K) we get concurrent(Line(B, F), Line(J, K), Line(J, M))
By concurrent_sufficient_conditions on Line(J, K), Line(G, K), Line(A, B) we get concurrent(Line(A, B), Line(G, K), Line(J, K))
By concurrent_sufficient_conditions on Line(A, C), Line(J, L), Line(K, L) we get concurrent(Line(A, C), Line(J, L), Line(K, L))
By concurrent_sufficient_conditions on Line(B, F), Line(J, L), Line(C, G) we get concurrent(Line(B, F), Line(C, G), Line(J, L))
By concurrent_sufficient_conditions on Line(A, J), Line(J, L), Line(J, M) we get concurrent(Line(A, J), Line(J, L), Line(J, M))
By concurrent_sufficient_conditions on Line(J, L), Line(J, M), Line(J, K) we get concurrent(Line(J, K), Line(J, L), Line(J, M))
By concurrent_sufficient_conditions on Line(J, L), Line(F, L), Line(A, C) we get concurrent(Line(A, C), Line(F, L), Line(J, L))
By perpendicular_line_definition on J, Line(C, G), Line(F, L) we get Line(C, G) == perpendicular_line(J, Line(F, L))
By perpendicular_line_definition on G, Line(G, K), Line(B, F) we get Line(G, K) == perpendicular_line(G, Line(B, F))
By perpendicular_line_definition on K, Line(K, L), Line(A, J) we get Line(K, L) == perpendicular_line(K, Line(A, J))
By median_definition on J, L, K, Line(A, J) we get Line(A, J) == median(J, K, L)
By median_definition on F, M, K, Line(B, F) we get Line(B, F) == median(F, K, M)
By median_definition on B, M, K, Line(B, F) we get Line(B, F) == median(B, K, M)
By median_definition on J, M, L, Line(C, G) we get Line(C, G) == median(J, L, M)
By perpendicular_line_definition on G, Line(C, G), Line(F, L) we get Line(C, G) == perpendicular_line(G, Line(F, L))
By median_definition on G, M, L, Line(C, G) we get Line(C, G) == median(G, L, M)
By median_definition on A, L, K, Line(A, J) we get Line(A, J) == median(A, K, L)
By median_definition on J, M, K, Line(B, F) we get Line(B, F) == median(J, K, M)
By perpendicular_line_definition on F, Line(B, F), Line(G, K) we get Line(B, F) == perpendicular_line(F, Line(G, K))
By perpendicular_line_definition on K, Line(G, K), Line(B, F) we get Line(G, K) == perpendicular_line(K, Line(B, F))
By perpendicular_line_definition on J, Line(B, F), Line(G, K) we get Line(B, F) == perpendicular_line(J, Line(G, K))
By median_definition on C, L, M, Line(C, G) we get Line(C, G) == median(C, L, M)
By perpendicular_line_definition on J, Line(A, J), Line(K, L) we get Line(A, J) == perpendicular_line(J, Line(K, L))
By circumcenter_perpendicular_bisectors on K, M, L we get circumcenter(K, L, M) in perpendicular_bisector(K, M), circumcenter(K, L, M) in perpendicular_bisector(L, M), circumcenter(K, L, M) in perpendicular_bisector(K, L)
By perpendicular_line_definition on L, Line(K, L), Line(A, J) we get Line(K, L) == perpendicular_line(L, Line(A, J))
By perpendicular_line_definition on F, Line(F, L), Line(C, G) we get Line(F, L) == perpendicular_line(F, Line(C, G))
By perpendicular_line_definition on M, Line(F, L), Line(C, G) we get Line(F, L) == perpendicular_line(M, Line(C, G))
By perpendicular_line_definition on L, Line(F, L), Line(C, G) we get Line(F, L) == perpendicular_line(L, Line(C, G))
By perpendicular_line_definition on B, Line(B, F), Line(G, K) we get Line(B, F) == perpendicular_line(B, Line(G, K))
By perpendicular_line_definition on A, Line(A, J), Line(K, L) we get Line(A, J) == perpendicular_line(A, Line(K, L))
By perpendicular_line_definition on M, Line(G, K), Line(B, F) we get Line(G, K) == perpendicular_line(M, Line(B, F))
By perpendicular_line_definition on C, Line(C, G), Line(F, L) we get Line(C, G) == perpendicular_line(C, Line(F, L))
By same_angle_v0 on S, C, M, A we get angle(C, S, A) == angle(M, S, A) mod 360
By same_angle_v1 on T, B, S, G we get angle(B, T, G) == angle(S, T, G) mod 360
By same_angle_v1 on T, M, C, G we get angle(C, T, G) == angle(M, T, G) mod 360
By same_angle_v1 on T, B, M, G we get angle(B, T, G) == angle(M, T, G) mod 360
By same_angle_v0 on S, M, C, F we get angle(C, S, F) == angle(M, S, F) mod 360
By perpendicular_direction_conditions_v0_r on G, K, B, F we get 180 == 2 * direction(G, K) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on J, G, M, L we get 180 == 2 * direction(J, G) - 2 * direction(M, L) mod 360
By same_angle_v1 on T, M, C, A we get angle(C, T, A) == angle(M, T, A) mod 360
By perpendicular_direction_conditions_v0_r on K, G, B, F we get 180 == 2 * direction(K, G) - 2 * direction(B, F) mod 360
By same_angle_v0 on S, B, M, F we get angle(B, S, F) == angle(M, S, F) mod 360
By same_angle_v0 on S, B, T, A we get angle(B, S, A) == angle(T, S, A) mod 360
By perpendicular_direction_conditions_v0_r on M, K, B, J we get 180 == 2 * direction(M, K) - 2 * direction(B, J) mod 360
By same_angle_v0 on S, C, T, F we get angle(C, S, F) == angle(T, S, F) mod 360
By same_angle_v1 on T, S, C, A we get angle(C, T, A) == angle(S, T, A) mod 360
By same_angle_v0 on S, M, T, F we get angle(M, S, F) == angle(T, S, F) mod 360
By same_angle_v0 on S, B, M, A we get angle(B, S, A) == angle(M, S, A) mod 360
By same_angle_v0 on S, M, T, A we get angle(M, S, A) == angle(T, S, A) mod 360
By perpendicular_direction_conditions_v0_r on L, M, J, G we get 180 == 2 * direction(L, M) - 2 * direction(J, G) mod 360
By same_angle_v0 on S, B, T, F we get angle(B, S, F) == angle(T, S, F) mod 360
By perpendicular_direction_conditions_v0_r on B, F, K, M we get 180 == 2 * direction(B, F) - 2 * direction(K, M) mod 360
By perpendicular_direction_conditions_v0_r on M, G, J, F we get 180 == 2 * direction(M, G) - 2 * direction(J, F) mod 360
By perpendicular_direction_conditions_v0_r on M, K, B, F we get 180 == 2 * direction(M, K) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on C, J, M, L we get 180 == 2 * direction(C, J) - 2 * direction(M, L) mod 360
By perpendicular_direction_conditions_v0_r on M, F, G, J we get 180 == 2 * direction(M, F) - 2 * direction(G, J) mod 360
By same_angle_v1 on T, M, S, G we get angle(M, T, G) == angle(S, T, G) mod 360
By perpendicular_direction_conditions_v0_r on F, B, G, M we get 180 == 2 * direction(F, B) - 2 * direction(G, M) mod 360
By perpendicular_direction_conditions_v0_r on C, J, F, L we get 180 == 2 * direction(C, J) - 2 * direction(F, L) mod 360
By same_angle_v1 on T, S, M, A we get angle(M, T, A) == angle(S, T, A) mod 360
By same_angle_v1 on T, B, M, A we get angle(B, T, A) == angle(M, T, A) mod 360
By perpendicular_direction_conditions_v0_r on B, F, G, M we get 180 == 2 * direction(B, F) - 2 * direction(G, M) mod 360
By perpendicular_direction_conditions_v0_r on G, J, L, M we get 180 == 2 * direction(G, J) - 2 * direction(L, M) mod 360
By same_angle_v1 on T, B, S, A we get angle(B, T, A) == angle(S, T, A) mod 360
By perpendicular_direction_conditions_v0_r on M, G, B, F we get 180 == 2 * direction(M, G) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on J, F, K, G we get 180 == 2 * direction(J, F) - 2 * direction(K, G) mod 360
By perpendicular_direction_conditions_v0_r on J, B, G, M we get 180 == 2 * direction(J, B) - 2 * direction(G, M) mod 360
By same_angle_v0 on S, T, C, A we get angle(C, S, A) == angle(T, S, A) mod 360
By same_angle_v1 on T, S, C, G we get angle(C, T, G) == angle(S, T, G) mod 360
By perpendicular_direction_conditions_v0_r on B, F, K, G we get 180 == 2 * direction(B, F) - 2 * direction(K, G) mod 360
By perpendicular_direction_conditions_v0_r on F, L, J, G we get 180 == 2 * direction(F, L) - 2 * direction(J, G) mod 360
By perpendicular_direction_conditions_v0_r on G, M, F, J we get 180 == 2 * direction(G, M) - 2 * direction(F, J) mod 360
By perpendicular_direction_conditions_v0_r on F, B, K, G we get 180 == 2 * direction(F, B) - 2 * direction(K, G) mod 360
By perpendicular_direction_conditions_v0_r on C, G, F, M we get 180 == 2 * direction(C, G) - 2 * direction(F, M) mod 360
By perpendicular_direction_conditions_v0_r on K, M, F, J we get 180 == 2 * direction(K, M) - 2 * direction(F, J) mod 360
By perpendicular_direction_conditions_v0_r on C, J, M, F we get 180 == 2 * direction(C, J) - 2 * direction(M, F) mod 360
By perpendicular_direction_conditions_v0_r on B, J, M, G we get 180 == 2 * direction(B, J) - 2 * direction(M, G) mod 360
By perpendicular_direction_conditions_v0_r on K, M, J, F we get 180 == 2 * direction(K, M) - 2 * direction(J, F) mod 360
By perpendicular_direction_conditions_v0_r on L, M, J, C we get 180 == 2 * direction(L, M) - 2 * direction(J, C) mod 360
By perpendicular_direction_conditions_v0_r on F, J, M, G we get 180 == 2 * direction(F, J) - 2 * direction(M, G) mod 360
By perpendicular_direction_conditions_v0_r on G, C, L, M we get 180 == 2 * direction(G, C) - 2 * direction(L, M) mod 360
By perpendicular_direction_conditions_v0_r on F, M, G, C we get 180 == 2 * direction(F, M) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on C, J, L, F we get 180 == 2 * direction(C, J) - 2 * direction(L, F) mod 360
By between_imply_not_between on L, midpoint(K, L), K we get collinear_and_not_between(K, L, midpoint(K, L))
By perpendicular_direction_conditions_v0_r on G, C, M, F we get 180 == 2 * direction(G, C) - 2 * direction(M, F) mod 360
By perpendicular_direction_conditions_v0_r on L, K, A, J we get 180 == 2 * direction(L, K) - 2 * direction(A, J) mod 360
By between_imply_not_between on B, M, C we get collinear_and_not_between(C, B, M)
By perpendicular_direction_conditions_v0_r on F, L, C, G we get 180 == 2 * direction(F, L) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on J, G, M, F we get 180 == 2 * direction(J, G) - 2 * direction(M, F) mod 360
By perpendicular_direction_conditions_v0_r on G, J, F, M we get 180 == 2 * direction(G, J) - 2 * direction(F, M) mod 360
By perpendicular_direction_conditions_v0_r on J, G, L, M we get 180 == 2 * direction(J, G) - 2 * direction(L, M) mod 360
By perpendicular_direction_conditions_v0_r on F, J, M, K we get 180 == 2 * direction(F, J) - 2 * direction(M, K) mod 360
By perpendicular_direction_conditions_v0_r on M, K, J, F we get 180 == 2 * direction(M, K) - 2 * direction(J, F) mod 360
By perpendicular_direction_conditions_v0_r on K, M, B, F we get 180 == 2 * direction(K, M) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on B, J, G, K we get 180 == 2 * direction(B, J) - 2 * direction(G, K) mod 360
By perpendicular_direction_conditions_v0_r on M, F, J, G we get 180 == 2 * direction(M, F) - 2 * direction(J, G) mod 360
By perpendicular_direction_conditions_v0_r on M, K, J, B we get 180 == 2 * direction(M, K) - 2 * direction(J, B) mod 360
By perpendicular_direction_conditions_v0_r on L, M, C, G we get 180 == 2 * direction(L, M) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on B, J, G, M we get 180 == 2 * direction(B, J) - 2 * direction(G, M) mod 360
By perpendicular_direction_conditions_v0_r on M, G, B, J we get 180 == 2 * direction(M, G) - 2 * direction(B, J) mod 360
By perpendicular_direction_conditions_v0_r on M, G, F, J we get 180 == 2 * direction(M, G) - 2 * direction(F, J) mod 360
By perpendicular_direction_conditions_v0_r on L, F, J, G we get 180 == 2 * direction(L, F) - 2 * direction(J, G) mod 360
By perpendicular_direction_conditions_v0_r on C, G, M, L we get 180 == 2 * direction(C, G) - 2 * direction(M, L) mod 360
By perpendicular_direction_conditions_v0_r on J, F, M, K we get 180 == 2 * direction(J, F) - 2 * direction(M, K) mod 360
By perpendicular_direction_conditions_v0_r on F, B, K, M we get 180 == 2 * direction(F, B) - 2 * direction(K, M) mod 360
By perpendicular_direction_conditions_v0_r on M, L, J, G we get 180 == 2 * direction(M, L) - 2 * direction(J, G) mod 360
By perpendicular_direction_conditions_v0_r on J, C, L, M we get 180 == 2 * direction(J, C) - 2 * direction(L, M) mod 360
By perpendicular_direction_conditions_v0_r on M, G, F, B we get 180 == 2 * direction(M, G) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on M, L, G, J we get 180 == 2 * direction(M, L) - 2 * direction(G, J) mod 360
By perpendicular_direction_conditions_v0_r on L, M, G, C we get 180 == 2 * direction(L, M) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on J, A, L, K we get 180 == 2 * direction(J, A) - 2 * direction(L, K) mod 360
By perpendicular_direction_conditions_v0_r on B, F, G, K we get 180 == 2 * direction(B, F) - 2 * direction(G, K) mod 360
By perpendicular_direction_conditions_v0_r on G, M, B, F we get 180 == 2 * direction(G, M) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on C, G, M, F we get 180 == 2 * direction(C, G) - 2 * direction(M, F) mod 360
By perpendicular_direction_conditions_v0_r on G, J, L, F we get 180 == 2 * direction(G, J) - 2 * direction(L, F) mod 360
By perpendicular_direction_conditions_v0_r on B, J, M, K we get 180 == 2 * direction(B, J) - 2 * direction(M, K) mod 360
By perpendicular_direction_conditions_v0_r on M, L, C, J we get 180 == 2 * direction(M, L) - 2 * direction(C, J) mod 360
By perpendicular_direction_conditions_v0_r on F, J, G, M we get 180 == 2 * direction(F, J) - 2 * direction(G, M) mod 360
By perpendicular_direction_conditions_v0_r on L, M, G, J we get 180 == 2 * direction(L, M) - 2 * direction(G, J) mod 360
By perpendicular_direction_conditions_v0_r on F, M, C, G we get 180 == 2 * direction(F, M) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on G, C, F, M we get 180 == 2 * direction(G, C) - 2 * direction(F, M) mod 360
By perpendicular_direction_conditions_v0_r on A, J, L, K we get 180 == 2 * direction(A, J) - 2 * direction(L, K) mod 360
By perpendicular_direction_conditions_v0_r on K, M, F, B we get 180 == 2 * direction(K, M) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on F, J, K, G we get 180 == 2 * direction(F, J) - 2 * direction(K, G) mod 360
By perpendicular_direction_conditions_v0_r on M, K, F, B we get 180 == 2 * direction(M, K) - 2 * direction(F, B) mod 360
By between_imply_not_between on K, midpoint(K, M), M we get collinear_and_not_between(M, K, midpoint(K, M))
By perpendicular_direction_conditions_v0_r on L, F, G, J we get 180 == 2 * direction(L, F) - 2 * direction(G, J) mod 360
By between_imply_not_between on J, B, F we get collinear_and_not_between(B, J, F)
By perpendicular_direction_conditions_v0_r on M, L, J, C we get 180 == 2 * direction(M, L) - 2 * direction(J, C) mod 360
By perpendicular_direction_conditions_v0_r on M, F, J, C we get 180 == 2 * direction(M, F) - 2 * direction(J, C) mod 360
By perpendicular_direction_conditions_v0_r on K, G, B, J we get 180 == 2 * direction(K, G) - 2 * direction(B, J) mod 360
By perpendicular_direction_conditions_v0_r on K, L, J, A we get 180 == 2 * direction(K, L) - 2 * direction(J, A) mod 360
By perpendicular_direction_conditions_v0_r on F, B, M, K we get 180 == 2 * direction(F, B) - 2 * direction(M, K) mod 360
By perpendicular_direction_conditions_v0_r on L, F, C, G we get 180 == 2 * direction(L, F) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on G, J, F, L we get 180 == 2 * direction(G, J) - 2 * direction(F, L) mod 360
By perpendicular_direction_conditions_v0_r on J, F, K, M we get 180 == 2 * direction(J, F) - 2 * direction(K, M) mod 360
By perpendicular_direction_conditions_v0_r on J, C, F, L we get 180 == 2 * direction(J, C) - 2 * direction(F, L) mod 360
By perpendicular_direction_conditions_v0_r on F, B, G, K we get 180 == 2 * direction(F, B) - 2 * direction(G, K) mod 360
By perpendicular_direction_conditions_v0_r on M, K, F, J we get 180 == 2 * direction(M, K) - 2 * direction(F, J) mod 360
By perpendicular_direction_conditions_v0_r on G, M, J, B we get 180 == 2 * direction(G, M) - 2 * direction(J, B) mod 360
By perpendicular_direction_conditions_v0_r on K, M, J, B we get 180 == 2 * direction(K, M) - 2 * direction(J, B) mod 360
By perpendicular_direction_conditions_v0_r on J, B, M, K we get 180 == 2 * direction(J, B) - 2 * direction(M, K) mod 360
By perpendicular_direction_conditions_v0_r on C, J, F, M we get 180 == 2 * direction(C, J) - 2 * direction(F, M) mod 360
By perpendicular_direction_conditions_v0_r on G, K, J, B we get 180 == 2 * direction(G, K) - 2 * direction(J, B) mod 360
By perpendicular_direction_conditions_v0_r on J, B, K, M we get 180 == 2 * direction(J, B) - 2 * direction(K, M) mod 360
By perpendicular_direction_conditions_v0_r on C, G, F, L we get 180 == 2 * direction(C, G) - 2 * direction(F, L) mod 360
By perpendicular_direction_conditions_v0_r on B, J, K, G we get 180 == 2 * direction(B, J) - 2 * direction(K, G) mod 360
By perpendicular_direction_conditions_v0_r on B, F, M, G we get 180 == 2 * direction(B, F) - 2 * direction(M, G) mod 360
By perpendicular_direction_conditions_v0_r on M, G, J, B we get 180 == 2 * direction(M, G) - 2 * direction(J, B) mod 360
By perpendicular_direction_conditions_v0_r on F, J, K, M we get 180 == 2 * direction(F, J) - 2 * direction(K, M) mod 360
By perpendicular_direction_conditions_v0_r on F, L, J, C we get 180 == 2 * direction(F, L) - 2 * direction(J, C) mod 360
By perpendicular_direction_conditions_v0_r on G, M, F, B we get 180 == 2 * direction(G, M) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on J, C, M, L we get 180 == 2 * direction(J, C) - 2 * direction(M, L) mod 360
By perpendicular_direction_conditions_v0_r on M, F, C, G we get 180 == 2 * direction(M, F) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on F, M, J, G we get 180 == 2 * direction(F, M) - 2 * direction(J, G) mod 360
By perpendicular_direction_conditions_v0_r on M, L, C, G we get 180 == 2 * direction(M, L) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on L, K, J, A we get 180 == 2 * direction(L, K) - 2 * direction(J, A) mod 360
By perpendicular_direction_conditions_v0_r on K, G, F, B we get 180 == 2 * direction(K, G) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on K, M, B, J we get 180 == 2 * direction(K, M) - 2 * direction(B, J) mod 360
By perpendicular_direction_conditions_v0_r on K, G, J, F we get 180 == 2 * direction(K, G) - 2 * direction(J, F) mod 360
By perpendicular_direction_conditions_v0_r on G, J, M, L we get 180 == 2 * direction(G, J) - 2 * direction(M, L) mod 360
By perpendicular_direction_conditions_v0_r on B, J, K, M we get 180 == 2 * direction(B, J) - 2 * direction(K, M) mod 360
By perpendicular_direction_conditions_v0_r on J, B, K, G we get 180 == 2 * direction(J, B) - 2 * direction(K, G) mod 360
By perpendicular_direction_conditions_v0_r on K, G, F, J we get 180 == 2 * direction(K, G) - 2 * direction(F, J) mod 360
By perpendicular_direction_conditions_v0_r on C, G, L, M we get 180 == 2 * direction(C, G) - 2 * direction(L, M) mod 360
By between_imply_not_between on C, B, S we get collinear_and_not_between(B, C, S)
By perpendicular_direction_conditions_v0_r on L, F, G, C we get 180 == 2 * direction(L, F) - 2 * direction(G, C) mod 360
By between_imply_not_between on L, midpoint(L, M), M we get collinear_and_not_between(M, L, midpoint(L, M))
By perpendicular_direction_conditions_v0_r on J, F, G, M we get 180 == 2 * direction(J, F) - 2 * direction(G, M) mod 360
By perpendicular_direction_conditions_v0_r on G, K, F, J we get 180 == 2 * direction(G, K) - 2 * direction(F, J) mod 360
By perpendicular_direction_conditions_v0_r on M, L, G, C we get 180 == 2 * direction(M, L) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on G, C, M, L we get 180 == 2 * direction(G, C) - 2 * direction(M, L) mod 360
By perpendicular_direction_conditions_v0_r on J, A, K, L we get 180 == 2 * direction(J, A) - 2 * direction(K, L) mod 360
By perpendicular_direction_conditions_v0_r on F, M, G, J we get 180 == 2 * direction(F, M) - 2 * direction(G, J) mod 360
By perpendicular_direction_conditions_v0_r on J, F, G, K we get 180 == 2 * direction(J, F) - 2 * direction(G, K) mod 360
By perpendicular_direction_conditions_v0_r on J, F, M, G we get 180 == 2 * direction(J, F) - 2 * direction(M, G) mod 360
By perpendicular_direction_conditions_v0_r on J, C, L, F we get 180 == 2 * direction(J, C) - 2 * direction(L, F) mod 360
By perpendicular_direction_conditions_v0_r on G, C, L, F we get 180 == 2 * direction(G, C) - 2 * direction(L, F) mod 360
By perpendicular_direction_conditions_v0_r on F, L, C, J we get 180 == 2 * direction(F, L) - 2 * direction(C, J) mod 360
By perpendicular_direction_conditions_v0_r on J, C, M, F we get 180 == 2 * direction(J, C) - 2 * direction(M, F) mod 360
By perpendicular_direction_conditions_v0_r on J, G, F, L we get 180 == 2 * direction(J, G) - 2 * direction(F, L) mod 360
By perpendicular_direction_conditions_v0_r on F, J, G, K we get 180 == 2 * direction(F, J) - 2 * direction(G, K) mod 360
By perpendicular_direction_conditions_v0_r on L, M, C, J we get 180 == 2 * direction(L, M) - 2 * direction(C, J) mod 360
By perpendicular_direction_conditions_v0_r on G, J, M, F we get 180 == 2 * direction(G, J) - 2 * direction(M, F) mod 360
By perpendicular_direction_conditions_v0_r on J, G, L, F we get 180 == 2 * direction(J, G) - 2 * direction(L, F) mod 360
By perpendicular_direction_conditions_v0_r on J, C, F, M we get 180 == 2 * direction(J, C) - 2 * direction(F, M) mod 360
By perpendicular_direction_conditions_v0_r on G, M, J, F we get 180 == 2 * direction(G, M) - 2 * direction(J, F) mod 360
By perpendicular_direction_conditions_v0_r on J, G, F, M we get 180 == 2 * direction(J, G) - 2 * direction(F, M) mod 360
By perpendicular_direction_conditions_v0_r on J, B, G, K we get 180 == 2 * direction(J, B) - 2 * direction(G, K) mod 360
By between_imply_not_between on K, M, G we get collinear_and_not_between(G, K, M)
By perpendicular_direction_conditions_v0_r on G, K, F, B we get 180 == 2 * direction(G, K) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on K, G, J, B we get 180 == 2 * direction(K, G) - 2 * direction(J, B) mod 360
By perpendicular_direction_conditions_v0_r on K, L, A, J we get 180 == 2 * direction(K, L) - 2 * direction(A, J) mod 360
By perpendicular_direction_conditions_v0_r on C, J, L, M we get 180 == 2 * direction(C, J) - 2 * direction(L, M) mod 360
By perpendicular_direction_conditions_v0_r on A, J, K, L we get 180 == 2 * direction(A, J) - 2 * direction(K, L) mod 360
By perpendicular_direction_conditions_v0_r on F, M, J, C we get 180 == 2 * direction(F, M) - 2 * direction(J, C) mod 360
By perpendicular_direction_conditions_v0_r on F, L, G, J we get 180 == 2 * direction(F, L) - 2 * direction(G, J) mod 360
By perpendicular_direction_conditions_v0_r on M, F, C, J we get 180 == 2 * direction(M, F) - 2 * direction(C, J) mod 360
By perpendicular_direction_conditions_v0_r on F, B, M, G we get 180 == 2 * direction(F, B) - 2 * direction(M, G) mod 360
By perpendicular_direction_conditions_v0_r on M, F, G, C we get 180 == 2 * direction(M, F) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on G, M, B, J we get 180 == 2 * direction(G, M) - 2 * direction(B, J) mod 360
By perpendicular_direction_conditions_v0_r on G, K, B, J we get 180 == 2 * direction(G, K) - 2 * direction(B, J) mod 360
By perpendicular_direction_conditions_v0_r on F, M, C, J we get 180 == 2 * direction(F, M) - 2 * direction(C, J) mod 360
By perpendicular_direction_conditions_v0_r on C, G, L, F we get 180 == 2 * direction(C, G) - 2 * direction(L, F) mod 360
By perpendicular_direction_conditions_v0_r on G, K, J, F we get 180 == 2 * direction(G, K) - 2 * direction(J, F) mod 360
By perpendicular_direction_conditions_v0_r on J, B, M, G we get 180 == 2 * direction(J, B) - 2 * direction(M, G) mod 360
By perpendicular_direction_conditions_v0_r on F, L, G, C we get 180 == 2 * direction(F, L) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on L, F, C, J we get 180 == 2 * direction(L, F) - 2 * direction(C, J) mod 360
By perpendicular_direction_conditions_v0_r on B, F, M, K we get 180 == 2 * direction(B, F) - 2 * direction(M, K) mod 360
By between_imply_not_between on A, B, K we get collinear_and_not_between(B, A, K)
By perpendicular_direction_conditions_v0_r on L, F, J, C we get 180 == 2 * direction(L, F) - 2 * direction(J, C) mod 360
By perpendicular_direction_conditions_v0_r on G, C, F, L we get 180 == 2 * direction(G, C) - 2 * direction(F, L) mod 360
By between_imply_not_between on G, C, J we get collinear_and_not_between(C, G, J)
By between_imply_not_between on M, midpoint(L, M), L we get collinear_and_not_between(L, M, midpoint(L, M))
By between_imply_not_between on S, B, C we get collinear_and_not_between(B, S, C)
By between_imply_not_between on A, G, T we get collinear_and_not_between(G, A, T)
By between_imply_not_between on C, M, B we get collinear_and_not_between(B, C, M)
By between_imply_not_between on L, M, F we get collinear_and_not_between(F, L, M)
By between_imply_not_between on M, midpoint(K, M), K we get collinear_and_not_between(K, M, midpoint(K, M))
By between_imply_not_between on K, midpoint(K, L), L we get collinear_and_not_between(L, K, midpoint(K, L))
By between_imply_not_between on F, B, J we get collinear_and_not_between(B, F, J)
By between_imply_not_between on L, C, A we get collinear_and_not_between(A, L, C)
By between_imply_not_between on F, M, L we get collinear_and_not_between(L, F, M)
By between_imply_not_between on B, C, T we get collinear_and_not_between(C, B, T)
By between_imply_not_between on T, C, B we get collinear_and_not_between(B, T, C)
By between_imply_not_between on K, B, A we get collinear_and_not_between(A, K, B)
By between_imply_not_between on A, F, S we get collinear_and_not_between(F, A, S)
By between_imply_not_between on G, M, K we get collinear_and_not_between(K, G, M)
By between_imply_not_between on T, G, A we get collinear_and_not_between(A, T, G)
By between_imply_not_between on J, C, G we get collinear_and_not_between(C, J, G)
By between_imply_not_between on S, F, A we get collinear_and_not_between(A, S, F)
By between_imply_not_between on A, C, L we get collinear_and_not_between(C, A, L)
By probably_between_and_collinear_implies_between on T, C, M we get between(M, C, T)
By reverse_direction on A, B we get 180 == direction(A, B) - direction(B, A) mod 360
By divide_by_2_mod_180_v1 on A, S, C, F, S, T we get angle(A, S, C) == angle(F, S, T) mod 360
By perpendicular_direction_conditions_v0_r on M, J, midpoint(S, T), B we get 180 == 2 * direction(M, J) - 2 * direction(midpoint(S, T), B) mod 360
By divide_by_2_mod_180_v0 on C, S, F, M, S, A we get angle(C, S, F) == angle(M, S, A) mod 360
By divide_by_2_mod_180_v2 on K, B, C, K, J, M we get angle(K, B, C) == angle(K, J, M) + 180 mod 360
By divide_by_2_mod_180_v1 on F, S, M, A, S, B we get angle(A, S, B) == angle(F, S, M) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(S, T), C, J, M we get 180 == 2 * direction(midpoint(S, T), C) - 2 * direction(J, M) mod 360
By divide_by_2_mod_180_v1 on A, S, B, A, S, M we get angle(A, S, B) == angle(A, S, M) mod 360
By perpendicular_direction_conditions_v0_r on M, J, B, midpoint(S, T) we get 180 == 2 * direction(M, J) - 2 * direction(B, midpoint(S, T)) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(S, T), M, J we get 180 == 2 * direction(C, midpoint(S, T)) - 2 * direction(M, J) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(S, T), M, J we get 180 == 2 * direction(B, midpoint(S, T)) - 2 * direction(M, J) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(S, T), J, M we get 180 == 2 * direction(B, midpoint(S, T)) - 2 * direction(J, M) mod 360
By divide_by_2_mod_180_v1 on M, J, L, S, C, A we get angle(M, J, L) == angle(S, C, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(S, T), B, M, J we get 180 == 2 * direction(midpoint(S, T), B) - 2 * direction(M, J) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(S, T), C, M, J we get 180 == 2 * direction(midpoint(S, T), C) - 2 * direction(M, J) mod 360
By perpendicular_direction_conditions_v0_r on J, M, midpoint(S, T), B we get 180 == 2 * direction(J, M) - 2 * direction(midpoint(S, T), B) mod 360
By perpendicular_direction_conditions_v0_r on J, M, B, midpoint(S, T) we get 180 == 2 * direction(J, M) - 2 * direction(B, midpoint(S, T)) mod 360
By perpendicular_direction_conditions_v0_r on M, J, C, midpoint(S, T) we get 180 == 2 * direction(M, J) - 2 * direction(C, midpoint(S, T)) mod 360
By divide_by_2_mod_180_v0 on L, J, M, L, C, T we get angle(L, C, T) == angle(L, J, M) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(S, T), B, J, M we get 180 == 2 * direction(midpoint(S, T), B) - 2 * direction(J, M) mod 360
By perpendicular_direction_conditions_v0_r on J, M, midpoint(S, T), C we get 180 == 2 * direction(J, M) - 2 * direction(midpoint(S, T), C) mod 360
By perpendicular_direction_conditions_v0_r on M, J, midpoint(S, T), C we get 180 == 2 * direction(M, J) - 2 * direction(midpoint(S, T), C) mod 360
By divide_by_2_mod_180_v1 on F, S, M, A, S, T we get angle(A, S, T) == angle(F, S, M) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(S, T), J, M we get 180 == 2 * direction(C, midpoint(S, T)) - 2 * direction(J, M) mod 360
By divide_by_2_mod_180_v2 on T, C, A, M, J, L we get angle(T, C, A) == angle(M, J, L) + 180 mod 360
By perpendicular_direction_conditions_v0_r on J, M, C, midpoint(S, T) we get 180 == 2 * direction(J, M) - 2 * direction(C, midpoint(S, T)) mod 360
By divide_by_2_mod_180_v1 on B, T, G, S, T, A we get angle(B, T, G) == angle(S, T, A) mod 360
By probably_between_and_collinear_implies_between on T, B, S we get between(S, B, T)
By divide_by_2_mod_180_v2 on L, J, K, L, A, K we get angle(L, J, K) == angle(L, A, K) + 180 mod 360
By divide_by_2_mod_180_v3 on M, B, K, M, J, K we get angle(M, B, K) == angle(M, J, K) + 180 mod 360
By divide_by_2_mod_180_v3 on T, B, K, M, J, K we get angle(T, B, K) == angle(M, J, K) + 180 mod 360
By divide_by_2_mod_180_v1 on F, S, B, A, S, T we get angle(A, S, T) == angle(F, S, B) mod 360
By divide_by_2_mod_180_v0 on A, C, B, L, J, M we get angle(A, C, B) == angle(L, J, M) mod 360
By divide_by_2_mod_180_v1 on A, S, T, A, S, B we get angle(A, S, B) == angle(A, S, T) mod 360
By divide_by_2_mod_180_v2 on M, J, K, C, B, K we get angle(M, J, K) == angle(C, B, K) + 180 mod 360
By divide_by_2_mod_180_v1 on F, S, M, F, S, T we get angle(F, S, M) == angle(F, S, T) mod 360
By in_imply_collinear on midpoint(K, M), F, B we get collinear(B, F, midpoint(K, M))
By probably_between_and_collinear_implies_between on C, M, S we get between(C, M, S)
By probably_between_and_collinear_implies_between on S, B, M we get between(M, B, S)
By in_imply_collinear on midpoint(K, M), J, B we get collinear(B, J, midpoint(K, M))
By divide_by_2_mod_180_v3 on M, J, L, B, C, L we get angle(M, J, L) == angle(B, C, L) + 180 mod 360
By divide_by_2_mod_180_v0 on G, T, S, A, T, M we get angle(A, T, M) == angle(G, T, S) mod 360
By in_imply_collinear on midpoint(L, M), J, C we get collinear(C, J, midpoint(L, M))
By divide_by_2_mod_180_v1 on M, T, A, B, T, G we get angle(B, T, G) == angle(M, T, A) mod 360
By divide_by_2_mod_180_v0 on M, J, K, T, B, A we get angle(M, J, K) == angle(T, B, A) mod 360
By probably_between_and_collinear_implies_between on T, C, S we get between(S, C, T)
By probably_between_and_collinear_implies_between on T, M, S we get between(S, M, T)
By divide_by_2_mod_180_v0 on G, T, S, G, T, C we get angle(G, T, C) == angle(G, T, S) mod 360
By divide_by_2_mod_180_v0 on A, T, S, G, T, B we get angle(A, T, S) == angle(G, T, B) mod 360
By divide_by_2_mod_180_v0 on A, T, B, G, T, S we get angle(A, T, B) == angle(G, T, S) mod 360
By probably_between_and_collinear_implies_between on B, M, T we get between(B, M, T)
By divide_by_2_mod_180_v3 on K, J, L, B, A, C we get angle(K, J, L) == angle(B, A, C) + 180 mod 360
By divide_by_2_mod_180_v1 on F, S, M, F, S, C we get angle(F, S, C) == angle(F, S, M) mod 360
By divide_by_2_mod_180_v0 on G, T, M, A, T, S we get angle(A, T, S) == angle(G, T, M) mod 360
By in_imply_collinear on midpoint(L, M), G, J we get collinear(G, J, midpoint(L, M))
By divide_by_2_mod_180_v1 on M, T, G, S, T, A we get angle(M, T, G) == angle(S, T, A) mod 360
By divide_by_2_mod_180_v0 on A, T, C, G, T, M we get angle(A, T, C) == angle(G, T, M) mod 360
By divide_by_2_mod_180_v1 on K, J, M, A, B, C we get angle(A, B, C) == angle(K, J, M) mod 360
By divide_by_2_mod_180_v0 on M, B, A, M, J, K we get angle(M, B, A) == angle(M, J, K) mod 360
By divide_by_2_mod_180_v1 on F, S, B, F, S, T we get angle(F, S, B) == angle(F, S, T) mod 360
By divide_by_2_mod_180_v1 on A, S, T, F, S, C we get angle(A, S, T) == angle(F, S, C) mod 360
By divide_by_2_mod_180_v1 on F, S, T, F, S, C we get angle(F, S, C) == angle(F, S, T) mod 360
By divide_by_2_mod_180_v0 on A, T, M, G, T, B we get angle(A, T, M) == angle(G, T, B) mod 360
By in_imply_collinear on midpoint(K, M), J, F we get collinear(F, J, midpoint(K, M))
By divide_by_2_mod_180_v0 on S, B, K, M, J, K we get angle(M, J, K) == angle(S, B, K) mod 360
By between_imply_segment_sum on B, M, C we get distance(B, C) == distance(B, M) + distance(C, M)
By divide_by_2_mod_180_v2 on M, J, K, M, B, K we get angle(M, J, K) == angle(M, B, K) + 180 mod 360
By asa_anti_congruence on A, L, J, A, K, J we get anti_congruent_triangles(A, J, K, A, J, L)
By divide_by_2_mod_180_v0 on T, S, A, C, S, F we get angle(C, S, F) == angle(T, S, A) mod 360
By divide_by_2_mod_180_v3 on L, C, S, L, J, M we get angle(L, C, S) == angle(L, J, M) + 180 mod 360
By divide_by_2_mod_180_v3 on K, J, L, K, A, C we get angle(K, J, L) == angle(K, A, C) + 180 mod 360
By collinear_definition on B, T, S we get T in Line(B, S), S in Line(B, T), Line(B, S) == Line(B, T), 0 == 2 * angle(T, B, S) mod 360
By divide_by_2_mod_180_v0 on B, S, F, T, S, A we get angle(B, S, F) == angle(T, S, A) mod 360
By divide_by_2_mod_180_v1 on A, S, M, A, S, T we get angle(A, S, M) == angle(A, S, T) mod 360
By divide_by_2_mod_180_v2 on M, J, K, S, B, A we get angle(M, J, K) == angle(S, B, A) + 180 mod 360
By collinear_definition on T, C, midpoint(S, T) we get C in Line(T, midpoint(S, T)), midpoint(S, T) in Line(C, T), Line(C, T) == Line(T, midpoint(S, T)), 0 == 2 * angle(C, T, midpoint(S, T)) mod 360
By reverse_direction on K, A we get 180 == direction(K, A) - direction(A, K) mod 360
By collinear_definition on M, S, C we get S in Line(C, M), C in Line(M, S), Line(C, M) == Line(M, S), 0 == 2 * angle(S, M, C) mod 360
By divide_by_2_mod_180_v1 on T, C, L, M, J, L we get angle(M, J, L) == angle(T, C, L) mod 360
By divide_by_2_mod_180_v1 on C, T, G, S, T, A we get angle(C, T, G) == angle(S, T, A) mod 360
By collinear_definition on T, S, C we get S in Line(C, T), C in Line(S, T), Line(C, T) == Line(S, T), 0 == 2 * angle(S, T, C) mod 360
By divide_by_2_mod_180_v2 on B, A, L, K, J, L we get angle(B, A, L) == angle(K, J, L) + 180 mod 360
By divide_by_2_mod_180_v1 on A, B, T, K, J, M we get angle(A, B, T) == angle(K, J, M) mod 360
By divide_by_2_mod_180_v1 on F, S, M, F, S, B we get angle(F, S, B) == angle(F, S, M) mod 360
By divide_by_2_mod_180_v3 on K, J, L, B, A, L we get angle(K, J, L) == angle(B, A, L) + 180 mod 360
By divide_by_2_mod_180_v2 on L, J, M, L, C, S we get angle(L, J, M) == angle(L, C, S) + 180 mod 360
By divide_by_2_mod_180_v1 on A, S, C, A, S, T we get angle(A, S, C) == angle(A, S, T) mod 360
By divide_by_2_mod_180_v1 on S, T, G, B, T, A we get angle(B, T, A) == angle(S, T, G) mod 360
By divide_by_2_mod_180_v0 on A, T, M, A, T, B we get angle(A, T, B) == angle(A, T, M) mod 360
By divide_by_2_mod_180_v1 on K, J, M, A, B, M we get angle(A, B, M) == angle(K, J, M) mod 360
By divide_by_2_mod_180_v1 on F, S, C, A, S, M we get angle(A, S, M) == angle(F, S, C) mod 360
By divide_by_2_mod_180_v0 on A, T, S, A, T, B we get angle(A, T, B) == angle(A, T, S) mod 360
By divide_by_2_mod_180_v0 on C, S, A, T, S, F we get angle(C, S, A) == angle(T, S, F) mod 360
By divide_by_2_mod_180_v3 on L, C, M, L, J, M we get angle(L, C, M) == angle(L, J, M) + 180 mod 360
By divide_by_2_mod_180_v2 on A, B, S, K, J, M we get angle(A, B, S) == angle(K, J, M) + 180 mod 360
By between_imply_segment_sum on T, C, B we get distance(B, T) == distance(C, T) + distance(B, C)
By in_imply_collinear on midpoint(K, L), J, A we get collinear(A, J, midpoint(K, L))
By in_imply_collinear on midpoint(L, M), G, C we get collinear(C, G, midpoint(L, M))
By divide_by_2_mod_180_v1 on M, T, G, B, T, A we get angle(B, T, A) == angle(M, T, G) mod 360
By sas_anti_congruence on B, M, J, B, K, J we get anti_congruent_triangles(B, J, K, B, J, M)
By divide_by_2_mod_180_v0 on M, S, F, B, S, A we get angle(B, S, A) == angle(M, S, F) mod 360
By divide_by_2_mod_180_v3 on M, J, L, M, C, L we get angle(M, J, L) == angle(M, C, L) + 180 mod 360
By divide_by_2_mod_180_v2 on M, C, L, M, J, L we get angle(M, C, L) == angle(M, J, L) + 180 mod 360
By divide_by_2_mod_180_v0 on C, S, A, M, S, F we get angle(C, S, A) == angle(M, S, F) mod 360
By divide_by_2_mod_180_v0 on G, T, S, A, T, C we get angle(A, T, C) == angle(G, T, S) mod 360
By divide_by_2_mod_180_v0 on M, S, A, B, S, F we get angle(B, S, F) == angle(M, S, A) mod 360
By collinear_definition on C, M, T we get M in Line(C, T), T in Line(C, M), Line(C, M) == Line(C, T), 0 == 2 * angle(M, C, T) mod 360
By divide_by_2_mod_180_v0 on M, S, A, T, S, F we get angle(M, S, A) == angle(T, S, F) mod 360
By divide_by_2_mod_180_v0 on G, T, M, G, T, B we get angle(G, T, B) == angle(G, T, M) mod 360
By collinear_definition on M, C, T we get C in Line(M, T), T in Line(C, M), Line(C, M) == Line(M, T), 0 == 2 * angle(C, M, T) mod 360
By reverse_direction on S, M we get 180 == direction(S, M) - direction(M, S) mod 360
By divide_by_2_mod_180_v0 on A, T, M, A, T, S we get angle(A, T, M) == angle(A, T, S) mod 360
By divide_by_2_mod_180_v3 on S, B, A, M, J, K we get angle(S, B, A) == angle(M, J, K) + 180 mod 360
By reverse_direction on F, J we get 180 == direction(F, J) - direction(J, F) mod 360
By divide_by_2_mod_180_v3 on M, J, L, T, C, A we get angle(M, J, L) == angle(T, C, A) + 180 mod 360
By divide_by_2_mod_180_v3 on K, J, M, A, B, S we get angle(K, J, M) == angle(A, B, S) + 180 mod 360
By divide_by_2_mod_180_v2 on K, A, L, K, J, L we get angle(K, A, L) == angle(K, J, L) + 180 mod 360
By divide_by_2_mod_180_v1 on B, C, A, M, J, L we get angle(B, C, A) == angle(M, J, L) mod 360
By divide_by_2_mod_180_v2 on B, C, L, M, J, L we get angle(B, C, L) == angle(M, J, L) + 180 mod 360
By divide_by_2_mod_180_v3 on K, J, M, K, B, M we get angle(K, J, M) == angle(K, B, M) + 180 mod 360
By divide_by_2_mod_180_v1 on F, S, T, A, S, M we get angle(A, S, M) == angle(F, S, T) mod 360
By divide_by_2_mod_180_v3 on C, A, K, L, J, K we get angle(C, A, K) == angle(L, J, K) + 180 mod 360
By divide_by_2_mod_180_v1 on C, T, A, M, T, G we get angle(C, T, A) == angle(M, T, G) mod 360
By divide_by_2_mod_180_v2 on L, J, M, L, C, M we get angle(L, J, M) == angle(L, C, M) + 180 mod 360
By divide_by_2_mod_180_v1 on S, T, G, C, T, A we get angle(C, T, A) == angle(S, T, G) mod 360
By divide_by_2_mod_180_v3 on A, C, T, L, J, M we get angle(A, C, T) == angle(L, J, M) + 180 mod 360
By reverse_direction on T, G we get 180 == direction(T, G) - direction(G, T) mod 360
By divide_by_2_mod_180_v2 on L, J, K, C, A, B we get angle(L, J, K) == angle(C, A, B) + 180 mod 360
By divide_by_2_mod_180_v0 on A, T, S, G, T, C we get angle(A, T, S) == angle(G, T, C) mod 360
By divide_by_2_mod_180_v0 on G, T, B, G, T, S we get angle(G, T, B) == angle(G, T, S) mod 360
By divide_by_2_mod_180_v1 on M, J, L, M, C, A we get angle(M, C, A) == angle(M, J, L) mod 360
By divide_by_2_mod_180_v0 on L, J, M, A, C, M we get angle(A, C, M) == angle(L, J, M) mod 360
By reverse_direction on G, M we get 180 == direction(G, M) - direction(M, G) mod 360
By internal_angle_bisector_definition_v0 on midpoint(S, T), C, midpoint(S, T), T we get angle(C, T, midpoint(S, T)) == angle(midpoint(S, T), T, C) mod 360
By reverse_direction on C, A we get 180 == direction(C, A) - direction(A, C) mod 360
By divide_by_2_mod_180_v3 on K, J, M, K, B, T we get angle(K, J, M) == angle(K, B, T) + 180 mod 360
By point_on_perpendicular_bisector on M, K, F, Line(B, F) we get distance(F, K) == distance(F, M)
By between_imply_segment_sum on F, M, L we get distance(F, L) == distance(F, M) + distance(L, M)
By divide_by_2_mod_180_v2 on L, J, M, L, C, B we get angle(L, J, M) == angle(L, C, B) + 180 mod 360
By divide_by_2_mod_180_v1 on F, S, M, A, S, C we get angle(A, S, C) == angle(F, S, M) mod 360
By divide_by_2_mod_180_v3 on K, J, L, K, A, L we get angle(K, J, L) == angle(K, A, L) + 180 mod 360
By divide_by_2_mod_180_v1 on K, B, S, K, J, M we get angle(K, B, S) == angle(K, J, M) mod 360
By collinear_definition on B, M, T we get M in Line(B, T), T in Line(B, M), Line(B, M) == Line(B, T), 0 == 2 * angle(M, B, T) mod 360
By divide_by_2_mod_180_v2 on S, C, L, M, J, L we get angle(S, C, L) == angle(M, J, L) + 180 mod 360
By between_imply_segment_sum on T, G, A we get distance(A, T) == distance(G, T) + distance(A, G)
By reverse_direction on A, T we get 180 == direction(A, T) - direction(T, A) mod 360
By divide_by_2_mod_180_v0 on L, J, M, A, C, S we get angle(A, C, S) == angle(L, J, M) mod 360
By divide_by_2_mod_180_v1 on M, T, A, S, T, G we get angle(M, T, A) == angle(S, T, G) mod 360
By divide_by_2_mod_180_v0 on G, T, C, A, T, M we get angle(A, T, M) == angle(G, T, C) mod 360
By divide_by_2_mod_180_v0 on G, T, M, G, T, S we get angle(G, T, M) == angle(G, T, S) mod 360
By divide_by_2_mod_180_v2 on K, B, M, K, J, M we get angle(K, B, M) == angle(K, J, M) + 180 mod 360
By collinear_definition on T, midpoint(S, T), M we get midpoint(S, T) in Line(M, T), M in Line(T, midpoint(S, T)), Line(M, T) == Line(T, midpoint(S, T)), 0 == 2 * angle(midpoint(S, T), T, M) mod 360
By divide_by_2_mod_180_v3 on C, B, K, M, J, K we get angle(C, B, K) == angle(M, J, K) + 180 mod 360
By divide_by_2_mod_180_v3 on L, A, K, L, J, K we get angle(L, A, K) == angle(L, J, K) + 180 mod 360
By divide_by_2_mod_180_v1 on A, S, B, F, S, T we get angle(A, S, B) == angle(F, S, T) mod 360
By divide_by_2_mod_180_v0 on C, B, A, M, J, K we get angle(C, B, A) == angle(M, J, K) mod 360
By sas_anti_congruence on B, K, J, B, M, J we get anti_congruent_triangles(B, J, K, B, J, M)
By reverse_direction on M, G we get 180 == direction(M, G) - direction(G, M) mod 360
By collinear_definition on S, T, B we get T in Line(B, S), B in Line(S, T), Line(B, S) == Line(S, T), 0 == 2 * angle(T, S, B) mod 360
By divide_by_2_mod_180_v0 on G, T, M, A, T, B we get angle(A, T, B) == angle(G, T, M) mod 360
By reverse_direction on G, C we get 180 == direction(G, C) - direction(C, G) mod 360
By aa_anti_similarity on J, B, K, J, B, M we get anti_similar_triangles(B, J, K, B, J, M)
By asa_anti_congruence on B, K, J, B, M, J we get anti_congruent_triangles(B, J, K, B, J, M)
By internal_angle_bisector_definition_v0 on midpoint(S, T), M, midpoint(S, T), S we get angle(M, S, midpoint(S, T)) == angle(midpoint(S, T), S, M) mod 360
By divide_by_2_mod_180_v3 on K, J, M, K, B, C we get angle(K, J, M) == angle(K, B, C) + 180 mod 360
By between_imply_segment_sum on F, B, J we get distance(F, J) == distance(B, F) + distance(B, J)
By divide_by_2_mod_180_v2 on K, A, C, K, J, L we get angle(K, A, C) == angle(K, J, L) + 180 mod 360
By divide_by_2_mod_180_v0 on B, S, A, T, S, F we get angle(B, S, A) == angle(T, S, F) mod 360
By divide_by_2_mod_180_v2 on K, B, T, K, J, M we get angle(K, B, T) == angle(K, J, M) + 180 mod 360
By divide_by_2_mod_180_v0 on G, T, M, G, T, C we get angle(G, T, C) == angle(G, T, M) mod 360
By divide_by_2_mod_180_v0 on A, T, C, A, T, M we get angle(A, T, C) == angle(A, T, M) mod 360
By collinear_definition on B, M, S we get M in Line(B, S), S in Line(B, M), Line(B, M) == Line(B, S), 0 == 2 * angle(M, B, S) mod 360
By reverse_direction on J, F we get 180 == direction(J, F) - direction(F, J) mod 360
By collinear_definition on T, midpoint(S, T), C we get midpoint(S, T) in Line(C, T), C in Line(T, midpoint(S, T)), Line(C, T) == Line(T, midpoint(S, T)), 0 == 2 * angle(midpoint(S, T), T, C) mod 360
By collinear_definition on C, T, M we get T in Line(C, M), M in Line(C, T), Line(C, M) == Line(C, T), 0 == 2 * angle(T, C, M) mod 360
By reverse_direction on G, J we get 180 == direction(G, J) - direction(J, G) mod 360
By divide_by_2_mod_180_v1 on A, S, M, A, S, C we get angle(A, S, C) == angle(A, S, M) mod 360
By between_imply_segment_sum on S, B, C we get distance(C, S) == distance(B, S) + distance(B, C)
By divide_by_2_mod_180_v1 on C, T, G, M, T, A we get angle(C, T, G) == angle(M, T, A) mod 360
By reverse_direction on A, J we get 180 == direction(A, J) - direction(J, A) mod 360
By collinear_definition on S, midpoint(S, T), M we get midpoint(S, T) in Line(M, S), M in Line(S, midpoint(S, T)), Line(M, S) == Line(S, midpoint(S, T)), 0 == 2 * angle(midpoint(S, T), S, M) mod 360
By divide_by_2_mod_180_v3 on L, C, B, L, J, M we get angle(L, C, B) == angle(L, J, M) + 180 mod 360
By sas_anti_congruence on J, M, B, J, K, B we get anti_congruent_triangles(B, J, K, B, J, M)
By reverse_direction on M, F we get 180 == direction(M, F) - direction(F, M) mod 360
By collinear_definition on T, M, S we get M in Line(S, T), S in Line(M, T), Line(M, T) == Line(S, T), 0 == 2 * angle(M, T, S) mod 360
By between_imply_segment_sum on L, C, A we get distance(A, L) == distance(C, L) + distance(A, C)
By reverse_direction on K, G we get 180 == direction(K, G) - direction(G, K) mod 360
By divide_by_2_mod_180_v2 on L, J, K, C, A, K we get angle(L, J, K) == angle(C, A, K) + 180 mod 360
By divide_by_2_mod_180_v0 on M, S, F, T, S, A we get angle(M, S, F) == angle(T, S, A) mod 360
By internal_angle_bisector_definition_v0 on S, C, S, T we get angle(C, T, S) == angle(S, T, C) mod 360
By reverse_direction on J, B we get 180 == direction(J, B) - direction(B, J) mod 360
By divide_by_2_mod_180_v2 on L, J, M, A, C, T we get angle(L, J, M) == angle(A, C, T) + 180 mod 360
By collinear_definition on M, T, C we get T in Line(C, M), C in Line(M, T), Line(C, M) == Line(M, T), 0 == 2 * angle(T, M, C) mod 360
By divide_by_2_mod_180_v0 on A, T, C, A, T, S we get angle(A, T, C) == angle(A, T, S) mod 360
By sas_anti_congruence on J, M, C, J, L, C we get anti_congruent_triangles(C, J, L, C, J, M)
By reverse_direction on S, B we get 180 == direction(S, B) - direction(B, S) mod 360
By asa_anti_congruence on L, A, J, K, A, J we get anti_congruent_triangles(A, J, K, A, J, L)
By reverse_direction on T, M we get 180 == direction(T, M) - direction(M, T) mod 360
By divide_by_2_mod_180_v2 on M, J, K, T, B, K we get angle(M, J, K) == angle(T, B, K) + 180 mod 360
By reverse_direction on F, L we get 180 == direction(F, L) - direction(L, F) mod 360
By reverse_direction on M, C we get 180 == direction(M, C) - direction(C, M) mod 360
By aa_anti_similarity on J, B, M, J, B, K we get anti_similar_triangles(B, J, K, B, J, M)
By collinear_definition on C, S, M we get S in Line(C, M), M in Line(C, S), Line(C, M) == Line(C, S), 0 == 2 * angle(S, C, M) mod 360
By between_imply_segment_sum on K, B, A we get distance(A, K) == distance(B, K) + distance(A, B)
By reverse_direction on B, A we get 180 == direction(B, A) - direction(A, B) mod 360
By collinear_definition on S, C, T we get C in Line(S, T), T in Line(C, S), Line(C, S) == Line(S, T), 0 == 2 * angle(C, S, T) mod 360
By divide_by_2_mod_180_v2 on L, J, K, L, A, B we get angle(L, J, K) == angle(L, A, B) + 180 mod 360
By divide_by_2_mod_180_v3 on M, J, L, S, C, L we get angle(M, J, L) == angle(S, C, L) + 180 mod 360
By divide_by_2_mod_180_v1 on F, S, B, A, S, M we get angle(A, S, M) == angle(F, S, B) mod 360
By reverse_direction on T, C we get 180 == direction(T, C) - direction(C, T) mod 360
By collinear_definition on S, midpoint(S, T), C we get midpoint(S, T) in Line(C, S), C in Line(S, midpoint(S, T)), Line(C, S) == Line(S, midpoint(S, T)), 0 == 2 * angle(midpoint(S, T), S, C) mod 360
By reverse_direction on C, G we get 180 == direction(C, G) - direction(G, C) mod 360
By between_imply_segment_sum on A, F, S we get distance(A, S) == distance(A, F) + distance(F, S)
By asa_anti_congruence on M, C, J, L, C, J we get anti_congruent_triangles(C, J, L, C, J, M)
By reverse_direction on C, B we get 180 == direction(C, B) - direction(B, C) mod 360
By reverse_direction on F, M we get 180 == direction(F, M) - direction(M, F) mod 360
By aa_anti_similarity on J, A, K, J, A, L we get anti_similar_triangles(A, J, K, A, J, L)
By asa_anti_congruence on L, C, J, M, C, J we get anti_congruent_triangles(C, J, L, C, J, M)
By divide_by_2_mod_180_v3 on L, A, B, L, J, K we get angle(L, A, B) == angle(L, J, K) + 180 mod 360
By divide_by_2_mod_180_v2 on B, A, C, K, J, L we get angle(B, A, C) == angle(K, J, L) + 180 mod 360
By reverse_direction on J, G we get 180 == direction(J, G) - direction(G, J) mod 360
By asa_anti_congruence on B, M, J, B, K, J we get anti_congruent_triangles(B, J, K, B, J, M)
By reverse_direction on C, J we get 180 == direction(C, J) - direction(J, C) mod 360
By asa_anti_congruence on K, A, J, L, A, J we get anti_congruent_triangles(A, J, K, A, J, L)
By sas_anti_congruence on C, M, J, C, L, J we get anti_congruent_triangles(C, J, L, C, J, M)
By reverse_direction on C, T we get 180 == direction(C, T) - direction(T, C) mod 360
By aa_anti_similarity on J, L, A, J, K, A we get anti_similar_triangles(A, J, K, A, J, L)
By reverse_direction on L, C we get 180 == direction(L, C) - direction(C, L) mod 360
By sas_anti_congruence on A, L, J, A, K, J we get anti_congruent_triangles(A, J, K, A, J, L)
By point_on_perpendicular_bisector on M, L, G, Line(C, G) we get distance(G, L) == distance(G, M)
By divide_by_2_mod_180_v3 on C, A, B, L, J, K we get angle(C, A, B) == angle(L, J, K) + 180 mod 360
By reverse_direction on G, T we get 180 == direction(G, T) - direction(T, G) mod 360
By reverse_direction on A, K we get 180 == direction(A, K) - direction(K, A) mod 360
By reverse_direction on J, A we get 180 == direction(J, A) - direction(A, J) mod 360
By aa_anti_similarity on J, M, B, J, K, B we get anti_similar_triangles(B, J, K, B, J, M)
By collinear_definition on C, M, S we get M in Line(C, S), S in Line(C, M), Line(C, M) == Line(C, S), 0 == 2 * angle(M, C, S) mod 360
By internal_angle_bisector_definition_v0 on T, B, T, S we get angle(B, S, T) == angle(T, S, B) mod 360
By collinear_definition on T, S, B we get S in Line(B, T), B in Line(S, T), Line(B, T) == Line(S, T), 0 == 2 * angle(S, T, B) mod 360
By collinear_definition on T, C, M we get C in Line(M, T), M in Line(C, T), Line(C, T) == Line(M, T), 0 == 2 * angle(C, T, M) mod 360
By reverse_direction on J, C we get 180 == direction(J, C) - direction(C, J) mod 360
By reverse_direction on S, A we get 180 == direction(S, A) - direction(A, S) mod 360
By asa_anti_congruence on C, L, J, C, M, J we get anti_congruent_triangles(C, J, L, C, J, M)
By between_imply_segment_sum on G, M, K we get distance(G, K) == distance(G, M) + distance(K, M)
By collinear_definition on S, C, midpoint(S, T) we get C in Line(S, midpoint(S, T)), midpoint(S, T) in Line(C, S), Line(C, S) == Line(S, midpoint(S, T)), 0 == 2 * angle(C, S, midpoint(S, T)) mod 360
By internal_angle_bisector_definition_v0 on S, B, S, T we get angle(B, T, S) == angle(S, T, B) mod 360
By reverse_direction on F, A we get 180 == direction(F, A) - direction(A, F) mod 360
By collinear_definition on T, M, C we get M in Line(C, T), C in Line(M, T), Line(C, T) == Line(M, T), 0 == 2 * angle(M, T, C) mod 360
By sas_anti_congruence on A, K, J, A, L, J we get anti_congruent_triangles(A, J, K, A, J, L)
By reverse_direction on A, S we get 180 == direction(A, S) - direction(S, A) mod 360
By collinear_definition on S, B, M we get B in Line(M, S), M in Line(B, S), Line(B, S) == Line(M, S), 0 == 2 * angle(B, S, M) mod 360
By collinear_definition on S, T, M we get T in Line(M, S), M in Line(S, T), Line(M, S) == Line(S, T), 0 == 2 * angle(T, S, M) mod 360
By collinear_definition on S, T, C we get T in Line(C, S), C in Line(S, T), Line(C, S) == Line(S, T), 0 == 2 * angle(T, S, C) mod 360
By asa_anti_congruence on C, M, J, C, L, J we get anti_congruent_triangles(C, J, L, C, J, M)
By reverse_direction on G, A we get 180 == direction(G, A) - direction(A, G) mod 360
By collinear_definition on T, B, midpoint(S, T) we get B in Line(T, midpoint(S, T)), midpoint(S, T) in Line(B, T), Line(B, T) == Line(T, midpoint(S, T)), 0 == 2 * angle(B, T, midpoint(S, T)) mod 360
By collinear_definition on T, B, M we get B in Line(M, T), M in Line(B, T), Line(B, T) == Line(M, T), 0 == 2 * angle(B, T, M) mod 360
By collinear_definition on M, B, S we get B in Line(M, S), S in Line(B, M), Line(B, M) == Line(M, S), 0 == 2 * angle(B, M, S) mod 360
By aa_anti_similarity on J, C, L, J, C, M we get anti_similar_triangles(C, J, L, C, J, M)
By reverse_direction on T, B we get 180 == direction(T, B) - direction(B, T) mod 360
By internal_angle_bisector_definition_v0 on T, C, T, S we get angle(C, S, T) == angle(T, S, C) mod 360
By collinear_definition on C, T, S we get T in Line(C, S), S in Line(C, T), Line(C, S) == Line(C, T), 0 == 2 * angle(T, C, S) mod 360
By between_imply_segment_sum on G, C, J we get distance(G, J) == distance(C, G) + distance(C, J)
By collinear_definition on M, T, S we get T in Line(M, S), S in Line(M, T), Line(M, S) == Line(M, T), 0 == 2 * angle(T, M, S) mod 360
By collinear_definition on M, T, B we get T in Line(B, M), B in Line(M, T), Line(B, M) == Line(M, T), 0 == 2 * angle(T, M, B) mod 360
By reverse_direction on A, L we get 180 == direction(A, L) - direction(L, A) mod 360
By sas_anti_congruence on J, K, B, J, M, B we get anti_congruent_triangles(B, J, K, B, J, M)
By asa_anti_congruence on A, K, J, A, L, J we get anti_congruent_triangles(A, J, K, A, J, L)
By internal_angle_bisector_definition_v0 on midpoint(S, T), B, midpoint(S, T), T we get angle(B, T, midpoint(S, T)) == angle(midpoint(S, T), T, B) mod 360
By internal_angle_bisector_definition_v0 on S, M, S, T we get angle(M, T, S) == angle(S, T, M) mod 360
By reverse_direction on M, T we get 180 == direction(M, T) - direction(T, M) mod 360
By aa_anti_similarity on J, K, B, J, M, B we get anti_similar_triangles(B, J, K, B, J, M)
By reverse_direction on A, F we get 180 == direction(A, F) - direction(F, A) mod 360
By reverse_direction on M, S we get 180 == direction(M, S) - direction(S, M) mod 360
By collinear_definition on S, B, T we get B in Line(S, T), T in Line(B, S), Line(B, S) == Line(S, T), 0 == 2 * angle(B, S, T) mod 360
By internal_angle_bisector_definition_v0 on midpoint(S, T), C, midpoint(S, T), S we get angle(C, S, midpoint(S, T)) == angle(midpoint(S, T), S, C) mod 360
By reverse_direction on B, F we get 180 == direction(B, F) - direction(F, B) mod 360
By collinear_definition on M, S, T we get S in Line(M, T), T in Line(M, S), Line(M, S) == Line(M, T), 0 == 2 * angle(S, M, T) mod 360
By collinear_definition on B, S, M we get S in Line(B, M), M in Line(B, S), Line(B, M) == Line(B, S), 0 == 2 * angle(S, B, M) mod 360
By sas_anti_congruence on J, L, C, J, M, C we get anti_congruent_triangles(C, J, L, C, J, M)
By collinear_definition on B, S, T we get S in Line(B, T), T in Line(B, S), Line(B, S) == Line(B, T), 0 == 2 * angle(S, B, T) mod 360
By reverse_direction on C, M we get 180 == direction(C, M) - direction(M, C) mod 360
By internal_angle_bisector_definition_v0 on T, M, T, S we get angle(M, S, T) == angle(T, S, M) mod 360
By reverse_direction on F, S we get 180 == direction(F, S) - direction(S, F) mod 360
By collinear_definition on T, B, S we get B in Line(S, T), S in Line(B, T), Line(B, T) == Line(S, T), 0 == 2 * angle(B, T, S) mod 360
By reverse_direction on K, B we get 180 == direction(K, B) - direction(B, K) mod 360
By reverse_direction on L, F we get 180 == direction(L, F) - direction(F, L) mod 360
By collinear_definition on S, midpoint(S, T), B we get midpoint(S, T) in Line(B, S), B in Line(S, midpoint(S, T)), Line(B, S) == Line(S, midpoint(S, T)), 0 == 2 * angle(midpoint(S, T), S, B) mod 360
By collinear_definition on M, C, S we get C in Line(M, S), S in Line(C, M), Line(C, M) == Line(M, S), 0 == 2 * angle(C, M, S) mod 360
By collinear_definition on S, C, M we get C in Line(M, S), M in Line(C, S), Line(C, S) == Line(M, S), 0 == 2 * angle(C, S, M) mod 360
By sas_anti_congruence on J, K, A, J, L, A we get anti_congruent_triangles(A, J, K, A, J, L)
By collinear_definition on S, B, midpoint(S, T) we get B in Line(S, midpoint(S, T)), midpoint(S, T) in Line(B, S), Line(B, S) == Line(S, midpoint(S, T)), 0 == 2 * angle(B, S, midpoint(S, T)) mod 360
By reverse_direction on B, T we get 180 == direction(B, T) - direction(T, B) mod 360
By sas_anti_congruence on C, L, J, C, M, J we get anti_congruent_triangles(C, J, L, C, J, M)
By collinear_definition on T, M, midpoint(S, T) we get M in Line(T, midpoint(S, T)), midpoint(S, T) in Line(M, T), Line(M, T) == Line(T, midpoint(S, T)), 0 == 2 * angle(M, T, midpoint(S, T)) mod 360
By aa_anti_similarity on J, A, L, J, A, K we get anti_similar_triangles(A, J, K, A, J, L)
By sas_anti_congruence on J, L, A, J, K, A we get anti_congruent_triangles(A, J, K, A, J, L)
By aa_anti_similarity on J, M, C, J, L, C we get anti_similar_triangles(C, J, L, C, J, M)
By reverse_direction on L, A we get 180 == direction(L, A) - direction(A, L) mod 360
By reverse_direction on F, B we get 180 == direction(F, B) - direction(B, F) mod 360
By collinear_definition on T, C, S we get C in Line(S, T), S in Line(C, T), Line(C, T) == Line(S, T), 0 == 2 * angle(C, T, S) mod 360
By aa_anti_similarity on J, L, C, J, M, C we get anti_similar_triangles(C, J, L, C, J, M)
By reverse_direction on B, C we get 180 == direction(B, C) - direction(C, B) mod 360
By aa_anti_similarity on J, K, A, J, L, A we get anti_similar_triangles(A, J, K, A, J, L)
By collinear_definition on S, M, B we get M in Line(B, S), B in Line(M, S), Line(B, S) == Line(M, S), 0 == 2 * angle(M, S, B) mod 360
By collinear_definition on T, midpoint(S, T), B we get midpoint(S, T) in Line(B, T), B in Line(T, midpoint(S, T)), Line(B, T) == Line(T, midpoint(S, T)), 0 == 2 * angle(midpoint(S, T), T, B) mod 360
By reverse_direction on G, K we get 180 == direction(G, K) - direction(K, G) mod 360
By collinear_definition on T, S, M we get S in Line(M, T), M in Line(S, T), Line(M, T) == Line(S, T), 0 == 2 * angle(S, T, M) mod 360
By reverse_direction on A, G we get 180 == direction(A, G) - direction(G, A) mod 360
By reverse_direction on T, A we get 180 == direction(T, A) - direction(A, T) mod 360
By internal_angle_bisector_definition_v0 on midpoint(S, T), B, midpoint(S, T), S we get angle(B, S, midpoint(S, T)) == angle(midpoint(S, T), S, B) mod 360
By collinear_definition on S, M, T we get M in Line(S, T), T in Line(M, S), Line(M, S) == Line(S, T), 0 == 2 * angle(M, S, T) mod 360
By reverse_direction on C, S we get 180 == direction(C, S) - direction(S, C) mod 360
By reverse_direction on C, L we get 180 == direction(C, L) - direction(L, C) mod 360
By reverse_direction on A, C we get 180 == direction(A, C) - direction(C, A) mod 360
By collinear_definition on C, S, T we get S in Line(C, T), T in Line(C, S), Line(C, S) == Line(C, T), 0 == 2 * angle(S, C, T) mod 360
By reverse_direction on S, F we get 180 == direction(S, F) - direction(F, S) mod 360
By reverse_direction on M, B we get 180 == direction(M, B) - direction(B, M) mod 360
By reverse_direction on B, M we get 180 == direction(B, M) - direction(M, B) mod 360
By collinear_definition on S, M, C we get M in Line(C, S), C in Line(M, S), Line(C, S) == Line(M, S), 0 == 2 * angle(M, S, C) mod 360
By asa_anti_congruence on M, B, J, K, B, J we get anti_congruent_triangles(B, J, K, B, J, M)
By collinear_definition on M, B, T we get B in Line(M, T), T in Line(B, M), Line(B, M) == Line(M, T), 0 == 2 * angle(B, M, T) mod 360
By collinear_definition on S, M, midpoint(S, T) we get M in Line(S, midpoint(S, T)), midpoint(S, T) in Line(M, S), Line(M, S) == Line(S, midpoint(S, T)), 0 == 2 * angle(M, S, midpoint(S, T)) mod 360
By internal_angle_bisector_definition_v0 on midpoint(S, T), M, midpoint(S, T), T we get angle(M, T, midpoint(S, T)) == angle(midpoint(S, T), T, M) mod 360
By aa_anti_similarity on J, C, M, J, C, L we get anti_similar_triangles(C, J, L, C, J, M)
By reverse_direction on B, J we get 180 == direction(B, J) - direction(J, B) mod 360
By reverse_direction on B, S we get 180 == direction(B, S) - direction(S, B) mod 360
By collinear_definition on B, T, M we get T in Line(B, M), M in Line(B, T), Line(B, M) == Line(B, T), 0 == 2 * angle(T, B, M) mod 360
By collinear_definition on T, M, B we get M in Line(B, T), B in Line(M, T), Line(B, T) == Line(M, T), 0 == 2 * angle(M, T, B) mod 360
By asa_anti_congruence on K, B, J, M, B, J we get anti_congruent_triangles(B, J, K, B, J, M)
By reverse_direction on S, C we get 180 == direction(S, C) - direction(C, S) mod 360
By collinear_definition on M, S, B we get S in Line(B, M), B in Line(M, S), Line(B, M) == Line(M, S), 0 == 2 * angle(S, M, B) mod 360
By reverse_direction on B, K we get 180 == direction(B, K) - direction(K, B) mod 360
By external_angle_bisector_definition_v0_r on A, J, S, C we get Line(C, J) == external_angle_bisector(A, C, S)
By external_angle_bisector_definition_v0_r on T, F, A, B we get Line(B, F) == external_angle_bisector(A, B, T)
By external_angle_bisector_definition_v0_r on K, F, S, B we get Line(B, F) == external_angle_bisector(K, B, S)
By collinear_definition on midpoint(S, T), B, T we get B in Line(T, midpoint(S, T)), T in Line(B, midpoint(S, T)), Line(B, midpoint(S, T)) == Line(T, midpoint(S, T)), 0 == 2 * angle(B, midpoint(S, T), T) mod 360
By internal_angle_bisector_definition_v0_r on M, K, M, G we get Line(G, K) == internal_angle_bisector(M, G, M)
By external_angle_bisector_definition_v0_r on T, J, L, C we get Line(C, J) == external_angle_bisector(L, C, T)
By external_angle_bisector_definition_v0_r on J, S, J, M we get Line(M, S) == external_angle_bisector(J, M, J)
By isosceles_triangle_midpoint on C, L, M we get midpoint(L, M) in median(C, L, M)
By isosceles_triangle_midpoint on J, K, M we get midpoint(K, M) in median(J, K, M)
By external_angle_bisector_definition_v0_r on J, C, J, M we get Line(C, M) == external_angle_bisector(J, M, J)
By external_angle_bisector_definition_v0_r on T, J, A, B we get Line(B, J) == external_angle_bisector(A, B, T)
By external_angle_bisector_definition_v0_r on S, G, A, C we get Line(C, G) == external_angle_bisector(A, C, S)
By external_angle_bisector_definition_v0_r on K, J, S, B we get Line(B, J) == external_angle_bisector(K, B, S)
By internal_angle_bisector_definition_v0_r on G, K, G, M we get Line(K, M) == internal_angle_bisector(G, M, G)
By collinear_definition on C, midpoint(S, T), T we get midpoint(S, T) in Line(C, T), T in Line(C, midpoint(S, T)), Line(C, T) == Line(C, midpoint(S, T)), 0 == 2 * angle(midpoint(S, T), C, T) mod 360
By external_angle_bisector_definition_v0_r on J, T, J, M we get Line(M, T) == external_angle_bisector(J, M, J)
By internal_angle_bisector_definition_v0_r on A, J, T, C we get Line(C, J) == internal_angle_bisector(A, C, T)
By external_angle_bisector_definition_v0_r on S, J, S, M we get Line(J, M) == external_angle_bisector(S, M, S)
By external_angle_bisector_definition_v0_r on A, G, M, C we get Line(C, G) == external_angle_bisector(A, C, M)
By internal_angle_bisector_definition_v0_r on M, C, T, B we get Line(B, C) == internal_angle_bisector(M, B, T)
By external_angle_bisector_definition_v0_r on S, C, M, B we get Line(B, C) == external_angle_bisector(M, B, S)
By external_angle_bisector_definition_v0_r on J, C, J, L we get Line(C, L) == external_angle_bisector(J, L, J)
By internal_angle_bisector_definition_v0_r on C, B, C, M we get Line(B, M) == internal_angle_bisector(C, M, C)
By external_angle_bisector_definition_v0_r on A, J, A, K we get Line(J, K) == external_angle_bisector(A, K, A)
By internal_angle_bisector_definition_v0_r on J, B, J, F we get Line(B, F) == internal_angle_bisector(J, F, J)
By internal_angle_bisector_definition_v0 on S, B, S, midpoint(S, T) we get angle(B, midpoint(S, T), S) == angle(S, midpoint(S, T), B) mod 360
By external_angle_bisector_definition_v0_r on M, J, A, C we get Line(C, J) == external_angle_bisector(A, C, M)
By collinear_definition on C, midpoint(S, T), S we get midpoint(S, T) in Line(C, S), S in Line(C, midpoint(S, T)), Line(C, S) == Line(C, midpoint(S, T)), 0 == 2 * angle(midpoint(S, T), C, S) mod 360
By isosceles_triangle_midpoint on J, M, L we get midpoint(L, M) in median(J, L, M)
By external_angle_bisector_definition_v0_r on T, B, M, C we get Line(B, C) == external_angle_bisector(M, C, T)
By external_angle_bisector_definition_v0_r on C, J, C, L we get Line(J, L) == external_angle_bisector(C, L, C)
By external_angle_bisector_definition_v0_r on M, J, A, B we get Line(B, J) == external_angle_bisector(A, B, M)
By external_angle_bisector_definition_v0_r on M, F, A, B we get Line(B, F) == external_angle_bisector(A, B, M)
By internal_angle_bisector_definition_v0_r on K, M, K, G we get Line(G, M) == internal_angle_bisector(K, G, K)
By internal_angle_bisector_definition_v0 on T, B, T, midpoint(S, T) we get angle(B, midpoint(S, T), T) == angle(T, midpoint(S, T), B) mod 360
By external_angle_bisector_definition_v0_r on B, J, B, M we get Line(J, M) == external_angle_bisector(B, M, B)
By external_angle_bisector_definition_v0_r on T, G, L, C we get Line(C, G) == external_angle_bisector(L, C, T)
By internal_angle_bisector_definition_v0_r on K, A, K, B we get Line(A, B) == internal_angle_bisector(K, B, K)
By internal_angle_bisector_definition_v0_r on F, L, F, M we get Line(L, M) == internal_angle_bisector(F, M, F)
By collinear_definition on L, midpoint(L, M), M we get midpoint(L, M) in Line(L, M), M in Line(L, midpoint(L, M)), Line(L, M) == Line(L, midpoint(L, M)), 0 == 2 * angle(midpoint(L, M), L, M) mod 360
By internal_angle_bisector_definition_v0_r on S, J, L, C we get Line(C, J) == internal_angle_bisector(L, C, S)
By external_angle_bisector_definition_v0_r on B, J, S, M we get Line(J, M) == external_angle_bisector(B, M, S)
By internal_angle_bisector_definition_v0_r on K, J, C, A we get Line(A, J) == internal_angle_bisector(C, A, K)
By internal_angle_bisector_definition_v0_r on L, M, L, F we get Line(F, M) == internal_angle_bisector(L, F, L)
By external_angle_bisector_definition_v0_r on T, J, T, M we get Line(J, M) == external_angle_bisector(T, M, T)
By external_angle_bisector_definition_v0_r on T, J, C, M we get Line(J, M) == external_angle_bisector(C, M, T)
By external_angle_bisector_definition_v0_r on J, B, J, K we get Line(B, K) == external_angle_bisector(J, K, J)
By internal_angle_bisector_definition_v0_r on C, L, C, A we get Line(A, L) == internal_angle_bisector(C, A, C)
By collinear_definition on C, T, midpoint(S, T) we get T in Line(C, midpoint(S, T)), midpoint(S, T) in Line(C, T), Line(C, T) == Line(C, midpoint(S, T)), 0 == 2 * angle(T, C, midpoint(S, T)) mod 360
By collinear_definition on midpoint(S, T), C, S we get C in Line(S, midpoint(S, T)), S in Line(C, midpoint(S, T)), Line(C, midpoint(S, T)) == Line(S, midpoint(S, T)), 0 == 2 * angle(C, midpoint(S, T), S) mod 360
By external_angle_bisector_definition_v0_r on C, J, A, L we get Line(J, L) == external_angle_bisector(A, L, C)
By anti_similar_triangle_basic_properties on A, K, L, A, L, K we get angle(A, K, L) == 0 - angle(A, L, K) mod 360, angle(K, L, A) == 0 - angle(L, K, A) mod 360, angle(L, A, K) == 0 - angle(K, A, L) mod 360, log(distance(A, K)) + log(distance(K, L)) == log(distance(A, L)) + log(distance(K, L)), log(distance(K, L)) + log(distance(A, K)) == log(distance(K, L)) + log(distance(A, L)), log(distance(A, K)) + log(distance(A, K)) == log(distance(A, L)) + log(distance(A, L))
By external_angle_bisector_definition_v0_r on S, C, T, B we get Line(B, C) == external_angle_bisector(S, B, T)
By internal_angle_bisector_definition_v0 on S, C, S, midpoint(S, T) we get angle(C, midpoint(S, T), S) == angle(S, midpoint(S, T), C) mod 360
By internal_angle_bisector_definition_v0_r on J, C, J, G we get Line(C, G) == internal_angle_bisector(J, G, J)
By internal_angle_bisector_definition_v0_r on F, J, F, B we get Line(B, J) == internal_angle_bisector(F, B, F)
By external_angle_bisector_definition_v0_r on J, A, J, K we get Line(A, K) == external_angle_bisector(J, K, J)
By external_angle_bisector_definition_v0_r on A, J, B, K we get Line(J, K) == external_angle_bisector(A, K, B)
By internal_angle_bisector_definition_v0_r on S, C, S, B we get Line(B, C) == internal_angle_bisector(S, B, S)
By internal_angle_bisector_definition_v0_r on B, J, L, A we get Line(A, J) == internal_angle_bisector(B, A, L)
By internal_angle_bisector_definition_v0_r on M, G, M, K we get Line(G, K) == internal_angle_bisector(M, K, M)
By collinear_definition on K, midpoint(K, L), L we get midpoint(K, L) in Line(K, L), L in Line(K, midpoint(K, L)), Line(K, L) == Line(K, midpoint(K, L)), 0 == 2 * angle(midpoint(K, L), K, L) mod 360
By external_angle_bisector_definition_v0_r on J, B, J, M we get Line(B, M) == external_angle_bisector(J, M, J)
By isosceles_triangle_midpoint on A, K, L we get midpoint(K, L) in median(A, K, L)
By internal_angle_bisector_definition_v0_r on J, G, J, C we get Line(C, G) == internal_angle_bisector(J, C, J)
By collinear_definition on L, K, midpoint(K, L) we get K in Line(L, midpoint(K, L)), midpoint(K, L) in Line(K, L), Line(K, L) == Line(L, midpoint(K, L)), 0 == 2 * angle(K, L, midpoint(K, L)) mod 360
By isosceles_triangle_midpoint on B, K, M we get midpoint(K, M) in median(B, K, M)
By internal_angle_bisector_definition_v0_r on S, J, C, M we get Line(J, M) == internal_angle_bisector(C, M, S)
By internal_angle_bisector_definition_v0_r on T, G, T, A we get Line(A, G) == internal_angle_bisector(T, A, T)
By internal_angle_bisector_definition_v0_r on L, J, M, C we get Line(C, J) == internal_angle_bisector(L, C, M)
By internal_angle_bisector_definition_v0_r on J, F, J, B we get Line(B, F) == internal_angle_bisector(J, B, J)
By isosceles_triangle_midpoint on J, K, L we get midpoint(K, L) in median(J, K, L)
By internal_angle_bisector_definition_v0_r on M, B, S, C we get Line(B, C) == internal_angle_bisector(M, C, S)
By internal_angle_bisector_definition_v0_r on M, J, K, B we get Line(B, J) == internal_angle_bisector(K, B, M)
By collinear_definition on C, midpoint(S, T), B we get midpoint(S, T) in Line(B, C), B in Line(C, midpoint(S, T)), Line(B, C) == Line(C, midpoint(S, T)), 0 == 2 * angle(midpoint(S, T), C, B) mod 360
By external_angle_bisector_definition_v0_r on T, B, S, C we get Line(B, C) == external_angle_bisector(S, C, T)
By internal_angle_bisector_definition_v0_r on B, K, B, A we get Line(A, K) == internal_angle_bisector(B, A, B)
By internal_angle_bisector_definition_v0_r on S, J, T, M we get Line(J, M) == internal_angle_bisector(S, M, T)
By external_angle_bisector_definition_v0_r on B, J, B, K we get Line(J, K) == external_angle_bisector(B, K, B)
By internal_angle_bisector_definition_v0_r on L, F, L, M we get Line(F, M) == internal_angle_bisector(L, M, L)
By anti_similar_triangle_basic_properties on L, M, C, M, L, C we get angle(L, M, C) == 0 - angle(M, L, C) mod 360, angle(M, C, L) == 0 - angle(L, C, M) mod 360, angle(C, L, M) == 0 - angle(C, M, L) mod 360, log(distance(L, M)) + log(distance(C, L)) == log(distance(L, M)) + log(distance(C, M)), log(distance(C, L)) + log(distance(C, L)) == log(distance(C, M)) + log(distance(C, M)), log(distance(C, L)) + log(distance(L, M)) == log(distance(C, M)) + log(distance(L, M))
By internal_angle_bisector_definition_v0_r on F, S, F, A we get Line(A, S) == internal_angle_bisector(F, A, F)
By internal_angle_bisector_definition_v0_r on L, A, L, C we get Line(A, C) == internal_angle_bisector(L, C, L)
By external_angle_bisector_definition_v0_r on C, J, C, M we get Line(J, M) == external_angle_bisector(C, M, C)
By collinear_definition on L, M, midpoint(L, M) we get M in Line(L, midpoint(L, M)), midpoint(L, M) in Line(L, M), Line(L, M) == Line(L, midpoint(L, M)), 0 == 2 * angle(M, L, midpoint(L, M)) mod 360
By internal_angle_bisector_definition_v0_r on B, J, T, M we get Line(J, M) == internal_angle_bisector(B, M, T)
By internal_angle_bisector_definition_v0_r on C, J, C, G we get Line(G, J) == internal_angle_bisector(C, G, C)
By external_angle_bisector_definition_v0_r on A, J, A, L we get Line(J, L) == external_angle_bisector(A, L, A)
By internal_angle_bisector_definition_v0_r on A, B, A, K we get Line(B, K) == internal_angle_bisector(A, K, A)
By collinear_definition on M, midpoint(L, M), L we get midpoint(L, M) in Line(L, M), L in Line(M, midpoint(L, M)), Line(L, M) == Line(M, midpoint(L, M)), 0 == 2 * angle(midpoint(L, M), M, L) mod 360
By collinear_definition on B, T, midpoint(S, T) we get T in Line(B, midpoint(S, T)), midpoint(S, T) in Line(B, T), Line(B, T) == Line(B, midpoint(S, T)), 0 == 2 * angle(T, B, midpoint(S, T)) mod 360
By collinear_definition on C, midpoint(S, T), M we get midpoint(S, T) in Line(C, M), M in Line(C, midpoint(S, T)), Line(C, M) == Line(C, midpoint(S, T)), 0 == 2 * angle(midpoint(S, T), C, M) mod 360
By internal_angle_bisector_definition_v0_r on C, G, C, J we get Line(G, J) == internal_angle_bisector(C, J, C)
By collinear_definition on L, midpoint(K, L), K we get midpoint(K, L) in Line(K, L), K in Line(L, midpoint(K, L)), Line(K, L) == Line(L, midpoint(K, L)), 0 == 2 * angle(midpoint(K, L), L, K) mod 360
By internal_angle_bisector_definition_v0_r on T, G, A, C we get Line(C, G) == internal_angle_bisector(A, C, T)
By anti_similar_triangle_basic_properties on B, K, M, B, M, K we get angle(B, K, M) == 0 - angle(B, M, K) mod 360, angle(K, M, B) == 0 - angle(M, K, B) mod 360, angle(M, B, K) == 0 - angle(K, B, M) mod 360, log(distance(B, K)) + log(distance(K, M)) == log(distance(B, M)) + log(distance(K, M)), log(distance(K, M)) + log(distance(B, K)) == log(distance(K, M)) + log(distance(B, M)), log(distance(B, K)) + log(distance(B, K)) == log(distance(B, M)) + log(distance(B, M))
By internal_angle_bisector_definition_v0_r on G, A, G, T we get Line(A, T) == internal_angle_bisector(G, T, G)
By internal_angle_bisector_definition_v0_r on L, G, B, C we get Line(C, G) == internal_angle_bisector(B, C, L)
By internal_angle_bisector_definition_v0_r on F, A, F, S we get Line(A, S) == internal_angle_bisector(F, S, F)
By collinear_definition on B, S, midpoint(S, T) we get S in Line(B, midpoint(S, T)), midpoint(S, T) in Line(B, S), Line(B, S) == Line(B, midpoint(S, T)), 0 == 2 * angle(S, B, midpoint(S, T)) mod 360
By collinear_definition on B, M, midpoint(S, T) we get M in Line(B, midpoint(S, T)), midpoint(S, T) in Line(B, M), Line(B, M) == Line(B, midpoint(S, T)), 0 == 2 * angle(M, B, midpoint(S, T)) mod 360
By internal_angle_bisector_definition_v0_r on A, F, S, B we get Line(B, F) == internal_angle_bisector(A, B, S)
By internal_angle_bisector_definition_v0_r on C, T, C, B we get Line(B, T) == internal_angle_bisector(C, B, C)
By internal_angle_bisector_definition_v0_r on M, C, M, B we get Line(B, C) == internal_angle_bisector(M, B, M)
By collinear_definition on K, M, midpoint(K, M) we get M in Line(K, midpoint(K, M)), midpoint(K, M) in Line(K, M), Line(K, M) == Line(K, midpoint(K, M)), 0 == 2 * angle(M, K, midpoint(K, M)) mod 360
By collinear_definition on B, midpoint(S, T), T we get midpoint(S, T) in Line(B, T), T in Line(B, midpoint(S, T)), Line(B, T) == Line(B, midpoint(S, T)), 0 == 2 * angle(midpoint(S, T), B, T) mod 360
By internal_angle_bisector_definition_v0_r on M, G, L, C we get Line(C, G) == internal_angle_bisector(L, C, M)
By collinear_definition on B, midpoint(S, T), M we get midpoint(S, T) in Line(B, M), M in Line(B, midpoint(S, T)), Line(B, M) == Line(B, midpoint(S, T)), 0 == 2 * angle(midpoint(S, T), B, M) mod 360
By internal_angle_bisector_definition_v0_r on B, C, B, S we get Line(C, S) == internal_angle_bisector(B, S, B)
By external_angle_bisector_definition_v0_r on J, A, J, L we get Line(A, L) == external_angle_bisector(J, L, J)
By collinear_definition on M, K, midpoint(K, M) we get K in Line(M, midpoint(K, M)), midpoint(K, M) in Line(K, M), Line(K, M) == Line(M, midpoint(K, M)), 0 == 2 * angle(K, M, midpoint(K, M)) mod 360
By collinear_definition on midpoint(S, T), S, B we get S in Line(B, midpoint(S, T)), B in Line(S, midpoint(S, T)), Line(B, midpoint(S, T)) == Line(S, midpoint(S, T)), 0 == 2 * angle(S, midpoint(S, T), B) mod 360
By internal_angle_bisector_definition_v0_r on A, K, A, B we get Line(B, K) == internal_angle_bisector(A, B, A)
By perpendicular_bisector_properties on L, K we get perpendicular(Line(K, L), perpendicular_bisector(K, L)), midpoint(K, L) == line_intersection(Line(K, L), perpendicular_bisector(K, L))
By internal_angle_bisector_definition_v0_r on A, S, A, F we get Line(F, S) == internal_angle_bisector(A, F, A)
By collinear_definition on C, B, midpoint(S, T) we get B in Line(C, midpoint(S, T)), midpoint(S, T) in Line(B, C), Line(B, C) == Line(C, midpoint(S, T)), 0 == 2 * angle(B, C, midpoint(S, T)) mod 360
By internal_angle_bisector_definition_v0_r on K, J, C, B we get Line(B, J) == internal_angle_bisector(C, B, K)
By internal_angle_bisector_definition_v0_r on F, M, F, L we get Line(L, M) == internal_angle_bisector(F, L, F)
By internal_angle_bisector_definition_v0_r on S, F, S, A we get Line(A, F) == internal_angle_bisector(S, A, S)
By internal_angle_bisector_definition_v0_r on K, B, K, A we get Line(A, B) == internal_angle_bisector(K, A, K)
By internal_angle_bisector_definition_v0_r on T, F, K, B we get Line(B, F) == internal_angle_bisector(K, B, T)
By internal_angle_bisector_definition_v0_r on C, M, C, B we get Line(B, M) == internal_angle_bisector(C, B, C)
By internal_angle_bisector_definition_v0_r on L, G, S, C we get Line(C, G) == internal_angle_bisector(L, C, S)
By internal_angle_bisector_definition_v0_r on A, F, A, S we get Line(F, S) == internal_angle_bisector(A, S, A)
By internal_angle_bisector_definition_v0_r on M, L, M, F we get Line(F, L) == internal_angle_bisector(M, F, M)
By collinear_definition on midpoint(S, T), T, C we get T in Line(C, midpoint(S, T)), C in Line(T, midpoint(S, T)), Line(C, midpoint(S, T)) == Line(T, midpoint(S, T)), 0 == 2 * angle(T, midpoint(S, T), C) mod 360
By internal_angle_bisector_definition_v0_r on C, A, C, L we get Line(A, L) == internal_angle_bisector(C, L, C)
By internal_angle_bisector_definition_v0_r on S, A, S, F we get Line(A, F) == internal_angle_bisector(S, F, S)
By internal_angle_bisector_definition_v0_r on G, M, G, K we get Line(K, M) == internal_angle_bisector(G, K, G)
By collinear_definition on B, midpoint(S, T), S we get midpoint(S, T) in Line(B, S), S in Line(B, midpoint(S, T)), Line(B, S) == Line(B, midpoint(S, T)), 0 == 2 * angle(midpoint(S, T), B, S) mod 360
By collinear_definition on K, L, midpoint(K, L) we get L in Line(K, midpoint(K, L)), midpoint(K, L) in Line(K, L), Line(K, L) == Line(K, midpoint(K, L)), 0 == 2 * angle(L, K, midpoint(K, L)) mod 360
By internal_angle_bisector_definition_v0_r on K, F, C, B we get Line(B, F) == internal_angle_bisector(C, B, K)
By internal_angle_bisector_definition_v0_r on S, B, S, C we get Line(B, C) == internal_angle_bisector(S, C, S)
By collinear_definition on midpoint(S, T), B, S we get B in Line(S, midpoint(S, T)), S in Line(B, midpoint(S, T)), Line(B, midpoint(S, T)) == Line(S, midpoint(S, T)), 0 == 2 * angle(B, midpoint(S, T), S) mod 360
By internal_angle_bisector_definition_v0_r on L, C, L, A we get Line(A, C) == internal_angle_bisector(L, A, L)
By internal_angle_bisector_definition_v0_r on C, S, C, B we get Line(B, S) == internal_angle_bisector(C, B, C)
By internal_angle_bisector_definition_v0_r on L, J, K, A we get Line(A, J) == internal_angle_bisector(K, A, L)
By internal_angle_bisector_definition_v0_r on A, C, A, L we get Line(C, L) == internal_angle_bisector(A, L, A)
By collinear_definition on M, L, midpoint(L, M) we get L in Line(M, midpoint(L, M)), midpoint(L, M) in Line(L, M), Line(L, M) == Line(M, midpoint(L, M)), 0 == 2 * angle(L, M, midpoint(L, M)) mod 360
By collinear_definition on B, C, midpoint(S, T) we get C in Line(B, midpoint(S, T)), midpoint(S, T) in Line(B, C), Line(B, C) == Line(B, midpoint(S, T)), 0 == 2 * angle(C, B, midpoint(S, T)) mod 360
By internal_angle_bisector_definition_v0_r on B, J, L, C we get Line(C, J) == internal_angle_bisector(B, C, L)
By collinear_definition on M, midpoint(K, M), K we get midpoint(K, M) in Line(K, M), K in Line(M, midpoint(K, M)), Line(K, M) == Line(M, midpoint(K, M)), 0 == 2 * angle(midpoint(K, M), M, K) mod 360
By internal_angle_bisector_definition_v0_r on T, B, T, C we get Line(B, C) == internal_angle_bisector(T, C, T)
By internal_angle_bisector_definition_v0_r on C, B, C, S we get Line(B, S) == internal_angle_bisector(C, S, C)
By collinear_definition on K, midpoint(K, M), M we get midpoint(K, M) in Line(K, M), M in Line(K, midpoint(K, M)), Line(K, M) == Line(K, midpoint(K, M)), 0 == 2 * angle(midpoint(K, M), K, M) mod 360
By internal_angle_bisector_definition_v0_r on M, B, M, C we get Line(B, C) == internal_angle_bisector(M, C, M)
By internal_angle_bisector_definition_v0_r on B, J, C, M we get Line(J, M) == internal_angle_bisector(B, M, C)
By internal_angle_bisector_definition_v0_r on A, T, A, G we get Line(G, T) == internal_angle_bisector(A, G, A)
By internal_angle_bisector_definition_v0_r on B, M, B, C we get Line(C, M) == internal_angle_bisector(B, C, B)
By internal_angle_bisector_definition_v0_r on B, T, B, C we get Line(C, T) == internal_angle_bisector(B, C, B)
By collinear_definition on midpoint(S, T), C, T we get C in Line(T, midpoint(S, T)), T in Line(C, midpoint(S, T)), Line(C, midpoint(S, T)) == Line(T, midpoint(S, T)), 0 == 2 * angle(C, midpoint(S, T), T) mod 360
By internal_angle_bisector_definition_v0_r on G, C, G, J we get Line(C, J) == internal_angle_bisector(G, J, G)
By internal_angle_bisector_definition_v0_r on G, T, G, A we get Line(A, T) == internal_angle_bisector(G, A, G)
By internal_angle_bisector_definition_v0_r on B, C, B, M we get Line(C, M) == internal_angle_bisector(B, M, B)
By internal_angle_bisector_definition_v0_r on A, G, A, T we get Line(G, T) == internal_angle_bisector(A, T, A)
By internal_angle_bisector_definition_v0_r on T, J, K, B we get Line(B, J) == internal_angle_bisector(K, B, T)
By perpendicular_bisector_properties on M, L we get perpendicular(Line(L, M), perpendicular_bisector(L, M)), midpoint(L, M) == line_intersection(Line(L, M), perpendicular_bisector(L, M))
By internal_angle_bisector_definition_v0_r on M, F, K, B we get Line(B, F) == internal_angle_bisector(K, B, M)
By internal_angle_bisector_definition_v0_r on B, F, B, J we get Line(F, J) == internal_angle_bisector(B, J, B)
By internal_angle_bisector_definition_v0_r on B, J, B, F we get Line(F, J) == internal_angle_bisector(B, F, B)
By internal_angle_bisector_definition_v0_r on G, J, G, C we get Line(C, J) == internal_angle_bisector(G, C, G)
By collinear_definition on B, midpoint(S, T), C we get midpoint(S, T) in Line(B, C), C in Line(B, midpoint(S, T)), Line(B, C) == Line(B, midpoint(S, T)), 0 == 2 * angle(midpoint(S, T), B, C) mod 360
By internal_angle_bisector_definition_v0_r on S, J, A, B we get Line(B, J) == internal_angle_bisector(A, B, S)
By internal_angle_bisector_definition_v0_r on B, C, B, T we get Line(C, T) == internal_angle_bisector(B, T, B)
By collinear_definition on C, M, midpoint(S, T) we get M in Line(C, midpoint(S, T)), midpoint(S, T) in Line(C, M), Line(C, M) == Line(C, midpoint(S, T)), 0 == 2 * angle(M, C, midpoint(S, T)) mod 360
By collinear_definition on midpoint(S, T), S, C we get S in Line(C, midpoint(S, T)), C in Line(S, midpoint(S, T)), Line(C, midpoint(S, T)) == Line(S, midpoint(S, T)), 0 == 2 * angle(S, midpoint(S, T), C) mod 360
By internal_angle_bisector_definition_v0_r on B, S, B, C we get Line(C, S) == internal_angle_bisector(B, C, B)
By internal_angle_bisector_definition_v0 on T, C, T, midpoint(S, T) we get angle(C, midpoint(S, T), T) == angle(T, midpoint(S, T), C) mod 360
By internal_angle_bisector_definition_v0_r on T, C, T, B we get Line(B, C) == internal_angle_bisector(T, B, T)
By internal_angle_bisector_definition_v0_r on C, B, C, T we get Line(B, T) == internal_angle_bisector(C, T, C)
By internal_angle_bisector_definition_v0_r on M, F, M, L we get Line(F, L) == internal_angle_bisector(M, L, M)
By internal_angle_bisector_definition_v0_r on F, B, F, J we get Line(B, J) == internal_angle_bisector(F, J, F)
By perpendicular_bisector_properties on K, M we get perpendicular(Line(K, M), perpendicular_bisector(K, M)), midpoint(K, M) == line_intersection(Line(K, M), perpendicular_bisector(K, M))
By internal_angle_bisector_definition_v0_r on A, L, A, C we get Line(C, L) == internal_angle_bisector(A, C, A)
By collinear_definition on C, S, midpoint(S, T) we get S in Line(C, midpoint(S, T)), midpoint(S, T) in Line(C, S), Line(C, S) == Line(C, midpoint(S, T)), 0 == 2 * angle(S, C, midpoint(S, T)) mod 360
By internal_angle_bisector_definition_v0_r on B, A, B, K we get Line(A, K) == internal_angle_bisector(B, K, B)
By internal_angle_bisector_definition_v0_r on K, G, K, M we get Line(G, M) == internal_angle_bisector(K, M, K)
By collinear_definition on midpoint(S, T), T, B we get T in Line(B, midpoint(S, T)), B in Line(T, midpoint(S, T)), Line(B, midpoint(S, T)) == Line(T, midpoint(S, T)), 0 == 2 * angle(T, midpoint(S, T), B) mod 360
By internal_angle_bisector_definition_v0_r on T, A, T, G we get Line(A, G) == internal_angle_bisector(T, G, T)
By perpendicular_lines_draw_intersection on Line(F, L), Line(C, G) we get exists(line_intersection(Line(C, G), Line(F, L)))
By perpendicular_lines_draw_intersection on Line(G, K), Line(B, F) we get exists(line_intersection(Line(B, F), Line(G, K)))
By perpendicular_lines_draw_intersection on Line(K, L), Line(A, J) we get exists(line_intersection(Line(A, J), Line(K, L)))
By log_of_2_times_distance on K, L, K, midpoint(K, L) we get log(distance(K, L)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(K, midpoint(K, L)))
By altitude_definition on J, K, M, Line(B, F) we get Line(B, F) == altitude(J, K, M)
By collinear_definition on midpoint(K, M), M, K we get M in Line(K, midpoint(K, M)), K in Line(M, midpoint(K, M)), Line(K, midpoint(K, M)) == Line(M, midpoint(K, M)), 0 == 2 * angle(M, midpoint(K, M), K) mod 360
By altitude_definition on K, F, J, Line(G, K) we get Line(G, K) == altitude(K, F, J)
By altitude_definition on J, midpoint(S, T), B, Line(J, M) we get Line(J, M) == altitude(J, B, midpoint(S, T))
By altitude_definition on F, C, G, Line(F, L) we get Line(F, L) == altitude(F, C, G)
By altitude_definition on B, M, K, Line(B, F) we get Line(B, F) == altitude(B, K, M)
By altitude_definition on F, K, M, Line(B, F) we get Line(B, F) == altitude(F, K, M)
By altitude_definition on B, G, M, Line(B, F) we get Line(B, F) == altitude(B, G, M)
By altitude_definition on M, F, B, Line(G, K) we get Line(G, K) == altitude(M, B, F)
By altitude_definition on M, B, J, Line(G, K) we get Line(G, K) == altitude(M, B, J)
By altitude_definition on L, J, C, Line(F, L) we get Line(F, L) == altitude(L, C, J)
By altitude_definition on A, L, K, Line(A, J) we get Line(A, J) == altitude(A, K, L)
By altitude_definition on J, K, L, Line(A, J) we get Line(A, J) == altitude(J, K, L)
By altitude_definition on J, L, M, Line(C, G) we get Line(C, G) == altitude(J, L, M)
By altitude_definition on G, J, B, Line(G, K) we get Line(G, K) == altitude(G, B, J)
By altitude_definition on B, G, K, Line(B, F) we get Line(B, F) == altitude(B, G, K)
By altitude_definition on M, F, J, Line(G, K) we get Line(G, K) == altitude(M, F, J)
By collinear_definition on midpoint(K, M), K, M we get K in Line(M, midpoint(K, M)), M in Line(K, midpoint(K, M)), Line(K, midpoint(K, M)) == Line(M, midpoint(K, M)), 0 == 2 * angle(K, midpoint(K, M), M) mod 360
By altitude_definition on C, L, M, Line(C, G) we get Line(C, G) == altitude(C, L, M)
By altitude_definition on J, L, F, Line(C, G) we get Line(C, G) == altitude(J, F, L)
By log_of_2_times_distance on L, K, midpoint(K, L), L we get log(distance(K, L)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(L, midpoint(K, L)))
By altitude_definition on M, G, J, Line(F, L) we get Line(F, L) == altitude(M, G, J)
By altitude_definition on M, C, J, Line(F, L) we get Line(F, L) == altitude(M, C, J)
By altitude_definition on M, G, C, Line(F, L) we get Line(F, L) == altitude(M, C, G)
By altitude_definition on J, C, midpoint(S, T), Line(J, M) we get Line(J, M) == altitude(J, C, midpoint(S, T))
By altitude_definition on K, B, J, Line(G, K) we get Line(G, K) == altitude(K, B, J)
By collinear_definition on midpoint(S, T), B, C we get B in Line(C, midpoint(S, T)), C in Line(B, midpoint(S, T)), Line(B, midpoint(S, T)) == Line(C, midpoint(S, T)), 0 == 2 * angle(B, midpoint(S, T), C) mod 360
By altitude_definition on F, C, J, Line(F, L) we get Line(F, L) == altitude(F, C, J)
By collinear_definition on midpoint(K, L), K, L we get K in Line(L, midpoint(K, L)), L in Line(K, midpoint(K, L)), Line(K, midpoint(K, L)) == Line(L, midpoint(K, L)), 0 == 2 * angle(K, midpoint(K, L), L) mod 360
By altitude_definition on C, F, L, Line(C, G) we get Line(C, G) == altitude(C, F, L)
By isosceles_triangle_altitude_v3 on B, M, K we get identical(perpendicular_bisector(K, M), internal_angle_bisector(K, B, M), perpendicular_line(B, Line(K, M)))
By altitude_definition on J, G, K, Line(B, F) we get Line(B, F) == altitude(J, G, K)
By log_of_2_times_distance on L, M, L, midpoint(L, M) we get log(distance(L, M)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(L, midpoint(L, M)))
By altitude_definition on C, M, F, Line(C, G) we get Line(C, G) == altitude(C, F, M)
By altitude_definition on G, F, B, Line(G, K) we get Line(G, K) == altitude(G, B, F)
By altitude_definition on K, B, F, Line(G, K) we get Line(G, K) == altitude(K, B, F)
By altitude_definition on F, K, G, Line(B, F) we get Line(B, F) == altitude(F, G, K)
By altitude_definition on G, J, F, Line(G, K) we get Line(G, K) == altitude(G, F, J)
By altitude_definition on F, M, G, Line(B, F) we get Line(B, F) == altitude(F, G, M)
By altitude_definition on F, J, G, Line(F, L) we get Line(F, L) == altitude(F, G, J)
By altitude_definition on G, F, L, Line(C, G) we get Line(C, G) == altitude(G, F, L)
By collinear_definition on midpoint(K, L), L, K we get L in Line(K, midpoint(K, L)), K in Line(L, midpoint(K, L)), Line(K, midpoint(K, L)) == Line(L, midpoint(K, L)), 0 == 2 * angle(L, midpoint(K, L), K) mod 360
By altitude_definition on L, A, J, Line(K, L) we get Line(K, L) == altitude(L, A, J)
By altitude_definition on J, F, M, Line(C, G) we get Line(C, G) == altitude(J, F, M)
By altitude_definition on J, M, G, Line(B, F) we get Line(B, F) == altitude(J, G, M)
By log_of_2_times_distance on M, L, midpoint(L, M), M we get log(distance(L, M)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(M, midpoint(L, M)))
By collinear_definition on midpoint(L, M), L, M we get L in Line(M, midpoint(L, M)), M in Line(L, midpoint(L, M)), Line(L, midpoint(L, M)) == Line(M, midpoint(L, M)), 0 == 2 * angle(L, midpoint(L, M), M) mod 360
By log_of_2_times_distance on K, M, M, midpoint(K, M) we get log(distance(K, M)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(M, midpoint(K, M)))
By isosceles_triangle_altitude_v3 on C, M, L we get identical(perpendicular_bisector(L, M), internal_angle_bisector(L, C, M), perpendicular_line(C, Line(L, M)))
By altitude_definition on G, M, F, Line(C, G) we get Line(C, G) == altitude(G, F, M)
By isosceles_triangle_altitude_v3 on B, K, M we get identical(perpendicular_bisector(K, M), internal_angle_bisector(K, B, M), perpendicular_line(B, Line(K, M)))
By collinear_definition on midpoint(S, T), C, B we get C in Line(B, midpoint(S, T)), B in Line(C, midpoint(S, T)), Line(B, midpoint(S, T)) == Line(C, midpoint(S, T)), 0 == 2 * angle(C, midpoint(S, T), B) mod 360
By altitude_definition on K, J, A, Line(K, L) we get Line(K, L) == altitude(K, A, J)
By isosceles_triangle_altitude_v3 on J, K, L we get identical(perpendicular_bisector(K, L), internal_angle_bisector(K, J, L), perpendicular_line(J, Line(K, L)))
By collinear_definition on midpoint(L, M), M, L we get M in Line(L, midpoint(L, M)), L in Line(M, midpoint(L, M)), Line(L, midpoint(L, M)) == Line(M, midpoint(L, M)), 0 == 2 * angle(M, midpoint(L, M), L) mod 360
By altitude_definition on G, M, L, Line(C, G) we get Line(C, G) == altitude(G, L, M)
By altitude_definition on L, G, J, Line(F, L) we get Line(F, L) == altitude(L, G, J)
By isosceles_triangle_altitude_v3 on C, L, M we get identical(perpendicular_bisector(L, M), internal_angle_bisector(L, C, M), perpendicular_line(C, Line(L, M)))
By log_of_2_times_distance on K, M, K, midpoint(K, M) we get log(distance(K, M)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(K, midpoint(K, M)))
By altitude_definition on L, C, G, Line(F, L) we get Line(F, L) == altitude(L, C, G)
By isosceles_triangle_altitude_v3 on J, L, K we get identical(perpendicular_bisector(K, L), internal_angle_bisector(K, J, L), perpendicular_line(J, Line(K, L)))
By isosceles_triangle_altitude_v3 on A, L, K we get identical(perpendicular_bisector(K, L), internal_angle_bisector(K, A, L), perpendicular_line(A, Line(K, L)))
By isosceles_triangle_altitude_v3 on J, L, M we get identical(perpendicular_bisector(L, M), internal_angle_bisector(L, J, M), perpendicular_line(J, Line(L, M)))
By isosceles_triangle_altitude_v3 on J, M, L we get identical(perpendicular_bisector(L, M), internal_angle_bisector(L, J, M), perpendicular_line(J, Line(L, M)))
By isosceles_triangle_altitude_v3 on A, K, L we get identical(perpendicular_bisector(K, L), internal_angle_bisector(K, A, L), perpendicular_line(A, Line(K, L)))
By isosceles_triangle_altitude_v3 on J, M, K we get identical(perpendicular_bisector(K, M), internal_angle_bisector(K, J, M), perpendicular_line(J, Line(K, M)))
By isosceles_triangle_altitude_v3 on J, K, M we get identical(perpendicular_bisector(K, M), internal_angle_bisector(K, J, M), perpendicular_line(J, Line(K, M)))
By anti_similar_triangle_basic_properties on L, J, K, K, J, L we get angle(L, J, K) == 0 - angle(K, J, L) mod 360, angle(J, K, L) == 0 - angle(J, L, K) mod 360, angle(K, L, J) == 0 - angle(L, K, J) mod 360, log(distance(J, K)) + log(distance(J, K)) == log(distance(J, L)) + log(distance(J, L)), log(distance(J, K)) + log(distance(K, L)) == log(distance(J, L)) + log(distance(K, L)), log(distance(K, L)) + log(distance(J, K)) == log(distance(K, L)) + log(distance(J, L))
By anti_similar_triangle_basic_properties on M, J, K, K, J, M we get angle(M, J, K) == 0 - angle(K, J, M) mod 360, angle(J, K, M) == 0 - angle(J, M, K) mod 360, angle(K, M, J) == 0 - angle(M, K, J) mod 360, log(distance(J, K)) + log(distance(J, K)) == log(distance(J, M)) + log(distance(J, M)), log(distance(J, K)) + log(distance(K, M)) == log(distance(J, M)) + log(distance(K, M)), log(distance(K, M)) + log(distance(J, K)) == log(distance(K, M)) + log(distance(J, M))
By anti_similar_triangle_basic_properties on L, J, M, M, J, L we get angle(L, J, M) == 0 - angle(M, J, L) mod 360, angle(J, M, L) == 0 - angle(J, L, M) mod 360, angle(M, L, J) == 0 - angle(L, M, J) mod 360, log(distance(J, L)) + log(distance(J, L)) == log(distance(J, M)) + log(distance(J, M)), log(distance(J, L)) + log(distance(L, M)) == log(distance(J, M)) + log(distance(L, M)), log(distance(L, M)) + log(distance(J, L)) == log(distance(L, M)) + log(distance(J, M))
By between_implies_angles on M, midpoint(L, M), L we get 180 == angle(M, midpoint(L, M), L) mod 360, 0 == angle(midpoint(L, M), L, M) mod 360, 0 == angle(L, M, midpoint(L, M)) mod 360
By power_of_a_point_definition on midpoint(L, M), L, M, Circle(K, L, M) we get log(power_of_a_point(midpoint(L, M), Circle(K, L, M))) == log(distance(L, midpoint(L, M))) + log(distance(M, midpoint(L, M)))
By between_implies_angles on M, midpoint(K, M), K we get 180 == angle(M, midpoint(K, M), K) mod 360, 0 == angle(midpoint(K, M), K, M) mod 360, 0 == angle(K, M, midpoint(K, M)) mod 360
By between_implies_angles on K, midpoint(K, L), L we get 180 == angle(K, midpoint(K, L), L) mod 360, 0 == angle(midpoint(K, L), L, K) mod 360, 0 == angle(L, K, midpoint(K, L)) mod 360
By between_implies_angles on K, midpoint(K, M), M we get 180 == angle(K, midpoint(K, M), M) mod 360, 0 == angle(midpoint(K, M), M, K) mod 360, 0 == angle(M, K, midpoint(K, M)) mod 360
By between_implies_angles on L, midpoint(L, M), M we get 180 == angle(L, midpoint(L, M), M) mod 360, 0 == angle(midpoint(L, M), M, L) mod 360, 0 == angle(M, L, midpoint(L, M)) mod 360
By power_of_a_point_definition on midpoint(K, M), K, M, Circle(K, L, M) we get log(power_of_a_point(midpoint(K, M), Circle(K, L, M))) == log(distance(K, midpoint(K, M))) + log(distance(M, midpoint(K, M)))
By power_of_a_point_definition on midpoint(K, L), K, L, Circle(K, L, M) we get log(power_of_a_point(midpoint(K, L), Circle(K, L, M))) == log(distance(K, midpoint(K, L))) + log(distance(L, midpoint(K, L)))
By between_implies_angles on L, midpoint(K, L), K we get 180 == angle(L, midpoint(K, L), K) mod 360, 0 == angle(midpoint(K, L), K, L) mod 360, 0 == angle(K, L, midpoint(K, L)) mod 360
By line_definition on F, midpoint(L, M), Line(F, L) we get Line(F, L) == Line(F, midpoint(L, M))
By line_definition on midpoint(K, M), G, Line(G, K) we get Line(G, K) == Line(G, midpoint(K, M))
By perpendicular_line_definition on midpoint(K, L), Line(K, L), Line(A, J) we get Line(K, L) == perpendicular_line(midpoint(K, L), Line(A, J))
By perpendicular_line_definition on midpoint(K, M), Line(G, K), Line(B, F) we get Line(G, K) == perpendicular_line(midpoint(K, M), Line(B, F))
By perpendicular_line_definition on midpoint(L, M), Line(F, L), Line(C, G) we get Line(F, L) == perpendicular_line(midpoint(L, M), Line(C, G))
By same_angle_converse_v1 on M, F, midpoint(L, M), L we get collinear(F, M, midpoint(L, M))
By same_angle_converse_v1 on M, G, midpoint(K, M), K we get collinear(G, M, midpoint(K, M))
By perpendicular_direction_conditions_v0_r on midpoint(L, M), M, G, C we get 180 == 2 * direction(midpoint(L, M), M) - 2 * direction(G, C) mod 360
By projection_definition on C, midpoint(L, M), Line(F, L) we get midpoint(L, M) == projection(C, Line(F, L))
By perpendicular_direction_conditions_v0_r on midpoint(K, L), K, A, J we get 180 == 2 * direction(midpoint(K, L), K) - 2 * direction(A, J) mod 360
By same_angle_converse_v0 on K, midpoint(K, M), G, M we get collinear(G, K, midpoint(K, M))
By perpendicular_direction_conditions_v0_r on B, J, midpoint(K, M), M we get 180 == 2 * direction(B, J) - 2 * direction(midpoint(K, M), M) mod 360
By projection_definition on L, midpoint(K, L), Line(A, J) we get midpoint(K, L) == projection(L, Line(A, J))
By perpendicular_direction_conditions_v0_r on midpoint(L, M), L, G, C we get 180 == 2 * direction(midpoint(L, M), L) - 2 * direction(G, C) mod 360
By same_angle_converse_v0 on L, midpoint(L, M), F, M we get collinear(F, L, midpoint(L, M))
By perpendicular_direction_conditions_v0_r on midpoint(K, L), L, A, J we get 180 == 2 * direction(midpoint(K, L), L) - 2 * direction(A, J) mod 360
By projection_definition on G, midpoint(L, M), Line(F, L) we get midpoint(L, M) == projection(G, Line(F, L))
By perpendicular_direction_conditions_v0_r on J, F, midpoint(K, M), K we get 180 == 2 * direction(J, F) - 2 * direction(midpoint(K, M), K) mod 360
By between_imply_not_between on M, C, T we get collinear_and_not_between(C, M, T)
By perpendicular_direction_conditions_v0_r on midpoint(K, M), K, J, B we get 180 == 2 * direction(midpoint(K, M), K) - 2 * direction(J, B) mod 360
By projection_definition on J, midpoint(K, M), Line(G, K) we get midpoint(K, M) == projection(J, Line(G, K))
By perpendicular_direction_conditions_v0_r on J, A, midpoint(K, L), L we get 180 == 2 * direction(J, A) - 2 * direction(midpoint(K, L), L) mod 360
By perpendicular_direction_conditions_v0_r on C, G, midpoint(L, M), L we get 180 == 2 * direction(C, G) - 2 * direction(midpoint(L, M), L) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), K, B, J we get 180 == 2 * direction(midpoint(K, M), K) - 2 * direction(B, J) mod 360
By perpendicular_direction_conditions_v0_r on C, J, midpoint(L, M), M we get 180 == 2 * direction(C, J) - 2 * direction(midpoint(L, M), M) mod 360
By perpendicular_direction_conditions_v0_r on J, B, midpoint(K, M), M we get 180 == 2 * direction(J, B) - 2 * direction(midpoint(K, M), M) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), K, J, F we get 180 == 2 * direction(midpoint(K, M), K) - 2 * direction(J, F) mod 360
By projection_definition on J, midpoint(K, L), Line(K, L) we get midpoint(K, L) == projection(J, Line(K, L))
By perpendicular_direction_conditions_v0_r on J, C, midpoint(L, M), L we get 180 == 2 * direction(J, C) - 2 * direction(midpoint(L, M), L) mod 360
By projection_definition on K, midpoint(K, L), Line(A, J) we get midpoint(K, L) == projection(K, Line(A, J))
By projection_definition on B, midpoint(K, M), Line(G, K) we get midpoint(K, M) == projection(B, Line(G, K))
By perpendicular_direction_conditions_v0_r on midpoint(L, M), L, C, G we get 180 == 2 * direction(midpoint(L, M), L) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on C, G, midpoint(L, M), M we get 180 == 2 * direction(C, G) - 2 * direction(midpoint(L, M), M) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), L, G, J we get 180 == 2 * direction(midpoint(L, M), L) - 2 * direction(G, J) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), M, J, C we get 180 == 2 * direction(midpoint(L, M), M) - 2 * direction(J, C) mod 360
By perpendicular_direction_conditions_v0_r on B, F, midpoint(K, M), K we get 180 == 2 * direction(B, F) - 2 * direction(midpoint(K, M), K) mod 360
By projection_definition on F, midpoint(K, M), Line(G, K) we get midpoint(K, M) == projection(F, Line(G, K))
By perpendicular_direction_conditions_v0_r on midpoint(K, M), K, B, F we get 180 == 2 * direction(midpoint(K, M), K) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), M, C, J we get 180 == 2 * direction(midpoint(L, M), M) - 2 * direction(C, J) mod 360
By perpendicular_direction_conditions_v0_r on G, J, midpoint(L, M), M we get 180 == 2 * direction(G, J) - 2 * direction(midpoint(L, M), M) mod 360
By perpendicular_direction_conditions_v0_r on B, J, midpoint(K, M), K we get 180 == 2 * direction(B, J) - 2 * direction(midpoint(K, M), K) mod 360
By between_imply_not_between on T, M, S we get collinear_and_not_between(M, T, S)
By perpendicular_direction_conditions_v0_r on midpoint(K, M), M, F, B we get 180 == 2 * direction(midpoint(K, M), M) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on J, A, midpoint(K, L), K we get 180 == 2 * direction(J, A) - 2 * direction(midpoint(K, L), K) mod 360
By perpendicular_direction_conditions_v0_r on B, F, midpoint(K, M), M we get 180 == 2 * direction(B, F) - 2 * direction(midpoint(K, M), M) mod 360
By perpendicular_direction_conditions_v0_r on J, B, midpoint(K, M), K we get 180 == 2 * direction(J, B) - 2 * direction(midpoint(K, M), K) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), M, C, G we get 180 == 2 * direction(midpoint(L, M), M) - 2 * direction(C, G) mod 360
By projection_definition on J, midpoint(L, M), Line(F, L) we get midpoint(L, M) == projection(J, Line(F, L))
By perpendicular_direction_conditions_v0_r on midpoint(K, L), L, J, A we get 180 == 2 * direction(midpoint(K, L), L) - 2 * direction(J, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), L, C, J we get 180 == 2 * direction(midpoint(L, M), L) - 2 * direction(C, J) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), M, F, J we get 180 == 2 * direction(midpoint(K, M), M) - 2 * direction(F, J) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), K, F, B we get 180 == 2 * direction(midpoint(K, M), K) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on G, C, midpoint(L, M), L we get 180 == 2 * direction(G, C) - 2 * direction(midpoint(L, M), L) mod 360
By perpendicular_direction_conditions_v0_r on F, J, midpoint(K, M), K we get 180 == 2 * direction(F, J) - 2 * direction(midpoint(K, M), K) mod 360
By perpendicular_direction_conditions_v0_r on F, J, midpoint(K, M), M we get 180 == 2 * direction(F, J) - 2 * direction(midpoint(K, M), M) mod 360
By perpendicular_direction_conditions_v0_r on F, B, midpoint(K, M), K we get 180 == 2 * direction(F, B) - 2 * direction(midpoint(K, M), K) mod 360
By projection_definition on M, midpoint(K, M), Line(B, F) we get midpoint(K, M) == projection(M, Line(B, F))
By perpendicular_direction_conditions_v0_r on midpoint(L, M), M, J, G we get 180 == 2 * direction(midpoint(L, M), M) - 2 * direction(J, G) mod 360
By perpendicular_direction_conditions_v0_r on J, G, midpoint(L, M), M we get 180 == 2 * direction(J, G) - 2 * direction(midpoint(L, M), M) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), M, J, B we get 180 == 2 * direction(midpoint(K, M), M) - 2 * direction(J, B) mod 360
By projection_definition on A, midpoint(K, L), Line(K, L) we get midpoint(K, L) == projection(A, Line(K, L))
By projection_definition on L, midpoint(L, M), Line(C, G) we get midpoint(L, M) == projection(L, Line(C, G))
By between_imply_not_between on T, B, S we get collinear_and_not_between(B, T, S)
By perpendicular_direction_conditions_v0_r on J, C, midpoint(L, M), M we get 180 == 2 * direction(J, C) - 2 * direction(midpoint(L, M), M) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), M, B, J we get 180 == 2 * direction(midpoint(K, M), M) - 2 * direction(B, J) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), M, J, F we get 180 == 2 * direction(midpoint(K, M), M) - 2 * direction(J, F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), K, F, J we get 180 == 2 * direction(midpoint(K, M), K) - 2 * direction(F, J) mod 360
By perpendicular_direction_conditions_v0_r on G, J, midpoint(L, M), L we get 180 == 2 * direction(G, J) - 2 * direction(midpoint(L, M), L) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), L, J, G we get 180 == 2 * direction(midpoint(L, M), L) - 2 * direction(J, G) mod 360
By between_imply_not_between on T, C, M we get collinear_and_not_between(C, T, M)
By perpendicular_direction_conditions_v0_r on midpoint(L, M), L, J, C we get 180 == 2 * direction(midpoint(L, M), L) - 2 * direction(J, C) mod 360
By perpendicular_direction_conditions_v0_r on A, J, midpoint(K, L), K we get 180 == 2 * direction(A, J) - 2 * direction(midpoint(K, L), K) mod 360
By perpendicular_direction_conditions_v0_r on G, C, midpoint(L, M), M we get 180 == 2 * direction(G, C) - 2 * direction(midpoint(L, M), M) mod 360
By between_imply_not_between on S, M, T we get collinear_and_not_between(M, S, T)
By perpendicular_direction_conditions_v0_r on J, F, midpoint(K, M), M we get 180 == 2 * direction(J, F) - 2 * direction(midpoint(K, M), M) mod 360
By perpendicular_direction_conditions_v0_r on C, J, midpoint(L, M), L we get 180 == 2 * direction(C, J) - 2 * direction(midpoint(L, M), L) mod 360
By perpendicular_direction_conditions_v0_r on F, B, midpoint(K, M), M we get 180 == 2 * direction(F, B) - 2 * direction(midpoint(K, M), M) mod 360
By perpendicular_direction_conditions_v0_r on A, J, midpoint(K, L), L we get 180 == 2 * direction(A, J) - 2 * direction(midpoint(K, L), L) mod 360
By projection_definition on K, midpoint(K, M), Line(B, F) we get midpoint(K, M) == projection(K, Line(B, F))
By perpendicular_direction_conditions_v0_r on midpoint(K, L), K, J, A we get 180 == 2 * direction(midpoint(K, L), K) - 2 * direction(J, A) mod 360
By projection_definition on M, midpoint(L, M), Line(C, G) we get midpoint(L, M) == projection(M, Line(C, G))
By perpendicular_direction_conditions_v0_r on midpoint(K, M), M, B, F we get 180 == 2 * direction(midpoint(K, M), M) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), M, G, J we get 180 == 2 * direction(midpoint(L, M), M) - 2 * direction(G, J) mod 360
By perpendicular_direction_conditions_v0_r on J, G, midpoint(L, M), L we get 180 == 2 * direction(J, G) - 2 * direction(midpoint(L, M), L) mod 360
By between_imply_not_between on T, M, B we get collinear_and_not_between(B, T, M)
By between_imply_not_between on S, B, T we get collinear_and_not_between(B, S, T)
By between_imply_not_between on S, C, T we get collinear_and_not_between(C, S, T)
By between_imply_not_between on S, M, C we get collinear_and_not_between(C, S, M)
By between_imply_not_between on T, C, S we get collinear_and_not_between(C, T, S)
By between_imply_not_between on C, M, S we get collinear_and_not_between(M, C, S)
By between_imply_not_between on S, B, M we get collinear_and_not_between(B, S, M)
By between_imply_not_between on B, M, T we get collinear_and_not_between(M, B, T)
By between_imply_not_between on M, B, S we get collinear_and_not_between(B, M, S)
By perpendicular_direction_conditions_v0_r on midpoint(K, M), F, M, K we get 180 == 2 * direction(midpoint(K, M), F) - 2 * direction(M, K) mod 360
By divide_by_2_mod_180_v0 on C, J, F, L, M, G we get angle(C, J, F) == angle(L, M, G) mod 360
By divide_by_2_mod_180_v0 on C, L, M, G, J, M we get angle(C, L, M) == angle(G, J, M) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), K, midpoint(K, M), B we get 180 == 2 * direction(midpoint(K, M), K) - 2 * direction(midpoint(K, M), B) mod 360
By divide_by_2_mod_180_v0 on M, J, B, M, K, A we get angle(M, J, B) == angle(M, K, A) mod 360
By divide_by_2_mod_180_v0 on A, C, J, F, M, J we get angle(A, C, J) == angle(F, M, J) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), J, G, K we get 180 == 2 * direction(midpoint(K, M), J) - 2 * direction(G, K) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(K, L), midpoint(K, L), L we get 180 == 2 * direction(A, midpoint(K, L)) - 2 * direction(midpoint(K, L), L) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), C, F, M we get 180 == 2 * direction(midpoint(L, M), C) - 2 * direction(F, M) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, L), A, K, L we get 180 == 2 * direction(midpoint(K, L), A) - 2 * direction(K, L) mod 360
By perpendicular_direction_conditions_v0_r on M, midpoint(K, M), J, midpoint(K, M) we get 180 == 2 * direction(M, midpoint(K, M)) - 2 * direction(J, midpoint(K, M)) mod 360
By divide_by_2_mod_180_v0 on G, C, A, F, L, J we get angle(F, L, J) == angle(G, C, A) mod 360
By perpendicular_direction_conditions_v0_r on K, G, F, midpoint(K, M) we get 180 == 2 * direction(K, G) - 2 * direction(F, midpoint(K, M)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), C, M, F we get 180 == 2 * direction(midpoint(L, M), C) - 2 * direction(M, F) mod 360
By divide_by_2_mod_180_v1 on B, J, A, G, K, L we get angle(B, J, A) == angle(G, K, L) mod 360
By divide_by_2_mod_180_v0 on L, M, C, L, J, G we get angle(L, J, G) == angle(L, M, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), G, F, M we get 180 == 2 * direction(midpoint(L, M), G) - 2 * direction(F, M) mod 360
By orthocenter_concurrency on J, M, G we get orthocenter(G, J, M) in altitude(J, G, M), orthocenter(G, J, M) in altitude(M, G, J), orthocenter(G, J, M) in altitude(G, J, M)
By perpendicular_direction_conditions_v0_r on K, M, midpoint(K, M), F we get 180 == 2 * direction(K, M) - 2 * direction(midpoint(K, M), F) mod 360
By perpendicular_direction_conditions_v0_r on M, K, J, midpoint(K, M) we get 180 == 2 * direction(M, K) - 2 * direction(J, midpoint(K, M)) mod 360
By perpendicular_direction_conditions_v0_r on K, midpoint(K, M), J, midpoint(K, M) we get 180 == 2 * direction(K, midpoint(K, M)) - 2 * direction(J, midpoint(K, M)) mod 360
By perpendicular_direction_conditions_v0_r on L, F, G, midpoint(L, M) we get 180 == 2 * direction(L, F) - 2 * direction(G, midpoint(L, M)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), M, G, midpoint(L, M) we get 180 == 2 * direction(midpoint(L, M), M) - 2 * direction(G, midpoint(L, M)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), F, K, midpoint(K, M) we get 180 == 2 * direction(midpoint(K, M), F) - 2 * direction(K, midpoint(K, M)) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(K, M), midpoint(K, M), M we get 180 == 2 * direction(B, midpoint(K, M)) - 2 * direction(midpoint(K, M), M) mod 360
By perpendicular_direction_conditions_v0_r on K, midpoint(K, M), midpoint(K, M), F we get 180 == 2 * direction(K, midpoint(K, M)) - 2 * direction(midpoint(K, M), F) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(L, M), midpoint(L, M), M we get 180 == 2 * direction(G, midpoint(L, M)) - 2 * direction(midpoint(L, M), M) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(L, M), L, midpoint(L, M) we get 180 == 2 * direction(C, midpoint(L, M)) - 2 * direction(L, midpoint(L, M)) mod 360
By perpendicular_direction_conditions_v0_r on M, K, midpoint(K, M), J we get 180 == 2 * direction(M, K) - 2 * direction(midpoint(K, M), J) mod 360
By perpendicular_direction_conditions_v0_r on M, G, F, midpoint(K, M) we get 180 == 2 * direction(M, G) - 2 * direction(F, midpoint(K, M)) mod 360
By perpendicular_direction_conditions_v0_r on L, midpoint(L, M), G, midpoint(L, M) we get 180 == 2 * direction(L, midpoint(L, M)) - 2 * direction(G, midpoint(L, M)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), M, J, midpoint(K, M) we get 180 == 2 * direction(midpoint(K, M), M) - 2 * direction(J, midpoint(K, M)) mod 360
By perpendicular_direction_conditions_v0_r on G, K, midpoint(K, M), J we get 180 == 2 * direction(G, K) - 2 * direction(midpoint(K, M), J) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(K, L), L, midpoint(K, L) we get 180 == 2 * direction(A, midpoint(K, L)) - 2 * direction(L, midpoint(K, L)) mod 360
By perpendicular_direction_conditions_v0_r on K, G, J, midpoint(K, M) we get 180 == 2 * direction(K, G) - 2 * direction(J, midpoint(K, M)) mod 360
By perpendicular_direction_conditions_v0_r on K, midpoint(K, L), J, midpoint(K, L) we get 180 == 2 * direction(K, midpoint(K, L)) - 2 * direction(J, midpoint(K, L)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, L), A, midpoint(K, L), K we get 180 == 2 * direction(midpoint(K, L), A) - 2 * direction(midpoint(K, L), K) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), C, L, midpoint(L, M) we get 180 == 2 * direction(midpoint(L, M), C) - 2 * direction(L, midpoint(L, M)) mod 360
By divide_by_2_mod_180_v1 on B, K, G, A, J, C we get angle(A, J, C) == angle(B, K, G) mod 360
By perpendicular_direction_conditions_v0_r on J, midpoint(K, L), midpoint(K, L), L we get 180 == 2 * direction(J, midpoint(K, L)) - 2 * direction(midpoint(K, L), L) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), F, M, G we get 180 == 2 * direction(midpoint(K, M), F) - 2 * direction(M, G) mod 360
By perpendicular_direction_conditions_v0_r on M, midpoint(L, M), midpoint(L, M), C we get 180 == 2 * direction(M, midpoint(L, M)) - 2 * direction(midpoint(L, M), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), F, M, midpoint(K, M) we get 180 == 2 * direction(midpoint(K, M), F) - 2 * direction(M, midpoint(K, M)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, L), L, midpoint(K, L), A we get 180 == 2 * direction(midpoint(K, L), L) - 2 * direction(midpoint(K, L), A) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(K, M), midpoint(K, M), K we get 180 == 2 * direction(F, midpoint(K, M)) - 2 * direction(midpoint(K, M), K) mod 360
By perpendicular_direction_conditions_v0_r on L, M, G, midpoint(L, M) we get 180 == 2 * direction(L, M) - 2 * direction(G, midpoint(L, M)) mod 360
By perpendicular_direction_conditions_v0_r on M, L, midpoint(L, M), G we get 180 == 2 * direction(M, L) - 2 * direction(midpoint(L, M), G) mod 360
By perpendicular_direction_conditions_v0_r on L, midpoint(L, M), midpoint(L, M), C we get 180 == 2 * direction(L, midpoint(L, M)) - 2 * direction(midpoint(L, M), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), G, L, midpoint(L, M) we get 180 == 2 * direction(midpoint(L, M), G) - 2 * direction(L, midpoint(L, M)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, L), K, A, midpoint(K, L) we get 180 == 2 * direction(midpoint(K, L), K) - 2 * direction(A, midpoint(K, L)) mod 360
By perpendicular_direction_conditions_v0_r on L, midpoint(K, L), midpoint(K, L), J we get 180 == 2 * direction(L, midpoint(K, L)) - 2 * direction(midpoint(K, L), J) mod 360
By divide_by_2_mod_180_v0 on C, J, F, L, K, B we get angle(C, J, F) == angle(L, K, B) mod 360
By perpendicular_direction_conditions_v0_r on K, M, midpoint(K, M), J we get 180 == 2 * direction(K, M) - 2 * direction(midpoint(K, M), J) mod 360
By perpendicular_direction_conditions_v0_r on K, M, F, midpoint(K, M) we get 180 == 2 * direction(K, M) - 2 * direction(F, midpoint(K, M)) mod 360
By divide_by_2_mod_180_v0 on J, F, M, J, A, L we get angle(J, A, L) == angle(J, F, M) mod 360
By divide_by_2_mod_180_v3 on C, M, K, F, J, K we get angle(C, M, K) == angle(F, J, K) + 180 mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), F, K, M we get 180 == 2 * direction(midpoint(K, M), F) - 2 * direction(K, M) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(K, M), midpoint(K, M), K we get 180 == 2 * direction(B, midpoint(K, M)) - 2 * direction(midpoint(K, M), K) mod 360
By divide_by_2_mod_180_v1 on J, L, F, J, C, B we get angle(J, C, B) == angle(J, L, F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, L), K, midpoint(K, L), A we get 180 == 2 * direction(midpoint(K, L), K) - 2 * direction(midpoint(K, L), A) mod 360
By perpendicular_direction_conditions_v0_r on M, K, F, midpoint(K, M) we get 180 == 2 * direction(M, K) - 2 * direction(F, midpoint(K, M)) mod 360
By perpendicular_direction_conditions_v0_r on M, F, midpoint(L, M), J we get 180 == 2 * direction(M, F) - 2 * direction(midpoint(L, M), J) mod 360
By perpendicular_direction_conditions_v0_r on M, midpoint(K, M), midpoint(K, M), B we get 180 == 2 * direction(M, midpoint(K, M)) - 2 * direction(midpoint(K, M), B) mod 360
By divide_by_2_mod_180_v1 on M, C, G, J, M, F we get angle(J, M, F) == angle(M, C, G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, L), K, J, midpoint(K, L) we get 180 == 2 * direction(midpoint(K, L), K) - 2 * direction(J, midpoint(K, L)) mod 360
By divide_by_2_mod_180_v1 on B, J, C, G, M, L we get angle(B, J, C) == angle(G, M, L) mod 360
By divide_by_2_mod_180_v0 on B, J, K, G, K, A we get angle(B, J, K) == angle(G, K, A) mod 360
By divide_by_2_mod_180_v1 on A, K, L, B, J, G we get angle(A, K, L) == angle(B, J, G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, L), K, midpoint(K, L), J we get 180 == 2 * direction(midpoint(K, L), K) - 2 * direction(midpoint(K, L), J) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), J, midpoint(K, M), K we get 180 == 2 * direction(midpoint(K, M), J) - 2 * direction(midpoint(K, M), K) mod 360
By divide_by_2_mod_180_v2 on T, M, F, G, J, L we get angle(T, M, F) == angle(G, J, L) + 180 mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, L), J, L, midpoint(K, L) we get 180 == 2 * direction(midpoint(K, L), J) - 2 * direction(L, midpoint(K, L)) mod 360
By perpendicular_direction_conditions_v0_r on K, G, midpoint(K, M), J we get 180 == 2 * direction(K, G) - 2 * direction(midpoint(K, M), J) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(K, M), K, G we get 180 == 2 * direction(F, midpoint(K, M)) - 2 * direction(K, G) mod 360
By divide_by_2_mod_180_v0 on A, J, B, G, J, M we get angle(A, J, B) == angle(G, J, M) mod 360
By perpendicular_direction_conditions_v0_r on K, L, A, midpoint(K, L) we get 180 == 2 * direction(K, L) - 2 * direction(A, midpoint(K, L)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), J, K, M we get 180 == 2 * direction(midpoint(K, M), J) - 2 * direction(K, M) mod 360
By perpendicular_direction_conditions_v0_r on G, K, midpoint(K, M), F we get 180 == 2 * direction(G, K) - 2 * direction(midpoint(K, M), F) mod 360
By perpendicular_direction_conditions_v0_r on L, midpoint(L, M), midpoint(L, M), G we get 180 == 2 * direction(L, midpoint(L, M)) - 2 * direction(midpoint(L, M), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), K, midpoint(K, M), J we get 180 == 2 * direction(midpoint(K, M), K) - 2 * direction(midpoint(K, M), J) mod 360
By perpendicular_direction_conditions_v0_r on K, midpoint(K, M), B, midpoint(K, M) we get 180 == 2 * direction(K, midpoint(K, M)) - 2 * direction(B, midpoint(K, M)) mod 360
By perpendicular_direction_conditions_v0_r on M, midpoint(L, M), midpoint(L, M), G we get 180 == 2 * direction(M, midpoint(L, M)) - 2 * direction(midpoint(L, M), G) mod 360
By divide_by_2_mod_180_v1 on M, K, J, M, B, J we get angle(M, B, J) == angle(M, K, J) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(K, M), midpoint(K, M), M we get 180 == 2 * direction(F, midpoint(K, M)) - 2 * direction(midpoint(K, M), M) mod 360
By perpendicular_direction_conditions_v0_r on M, L, midpoint(L, M), J we get 180 == 2 * direction(M, L) - 2 * direction(midpoint(L, M), J) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(K, M), G, K we get 180 == 2 * direction(F, midpoint(K, M)) - 2 * direction(G, K) mod 360
By divide_by_2_mod_180_v1 on A, J, L, F, J, G we get angle(A, J, L) == angle(F, J, G) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(L, M), midpoint(L, M), M we get 180 == 2 * direction(C, midpoint(L, M)) - 2 * direction(midpoint(L, M), M) mod 360
By perpendicular_direction_conditions_v0_r on M, midpoint(K, M), midpoint(K, M), F we get 180 == 2 * direction(M, midpoint(K, M)) - 2 * direction(midpoint(K, M), F) mod 360
By divide_by_2_mod_180_v0 on J, M, L, G, C, A we get angle(G, C, A) == angle(J, M, L) mod 360
By divide_by_2_mod_180_v0 on A, J, B, C, L, F we get angle(A, J, B) == angle(C, L, F) mod 360
By perpendicular_direction_conditions_v0_r on M, G, J, midpoint(K, M) we get 180 == 2 * direction(M, G) - 2 * direction(J, midpoint(K, M)) mod 360
By perpendicular_direction_conditions_v0_r on L, midpoint(K, L), A, midpoint(K, L) we get 180 == 2 * direction(L, midpoint(K, L)) - 2 * direction(A, midpoint(K, L)) mod 360
By divide_by_2_mod_180_v0 on S, C, J, F, L, J we get angle(F, L, J) == angle(S, C, J) mod 360
By divide_by_2_mod_180_v2 on G, J, F, L, M, K we get angle(G, J, F) == angle(L, M, K) + 180 mod 360
By perpendicular_direction_conditions_v0_r on F, L, C, midpoint(L, M) we get 180 == 2 * direction(F, L) - 2 * direction(C, midpoint(L, M)) mod 360
By perpendicular_direction_conditions_v0_r on J, midpoint(K, L), L, midpoint(K, L) we get 180 == 2 * direction(J, midpoint(K, L)) - 2 * direction(L, midpoint(K, L)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), G, L, F we get 180 == 2 * direction(midpoint(L, M), G) - 2 * direction(L, F) mod 360
By divide_by_2_mod_180_v1 on L, F, J, J, G, K we get angle(J, G, K) == angle(L, F, J) mod 360
By divide_by_2_mod_180_v2 on M, L, J, M, C, G we get angle(M, L, J) == angle(M, C, G) + 180 mod 360
By divide_by_2_mod_180_v0 on T, C, G, J, M, L we get angle(J, M, L) == angle(T, C, G) mod 360
By perpendicular_direction_conditions_v0_r on G, K, F, midpoint(K, M) we get 180 == 2 * direction(G, K) - 2 * direction(F, midpoint(K, M)) mod 360
By perpendicular_direction_conditions_v0_r on G, M, B, midpoint(K, M) we get 180 == 2 * direction(G, M) - 2 * direction(B, midpoint(K, M)) mod 360
By perpendicular_direction_conditions_v0_r on L, M, midpoint(L, M), G we get 180 == 2 * direction(L, M) - 2 * direction(midpoint(L, M), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), C, M, midpoint(L, M) we get 180 == 2 * direction(midpoint(L, M), C) - 2 * direction(M, midpoint(L, M)) mod 360
By perpendicular_direction_conditions_v0_r on J, midpoint(K, M), M, midpoint(K, M) we get 180 == 2 * direction(J, midpoint(K, M)) - 2 * direction(M, midpoint(K, M)) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(L, M), F, L we get 180 == 2 * direction(G, midpoint(L, M)) - 2 * direction(F, L) mod 360
By divide_by_2_mod_180_v0 on K, M, J, J, B, M we get angle(J, B, M) == angle(K, M, J) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), G, L, M we get 180 == 2 * direction(midpoint(L, M), G) - 2 * direction(L, M) mod 360
By divide_by_2_mod_180_v0 on C, L, K, G, J, B we get angle(C, L, K) == angle(G, J, B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, L), A, L, K we get 180 == 2 * direction(midpoint(K, L), A) - 2 * direction(L, K) mod 360
By perpendicular_direction_conditions_v0_r on M, F, C, midpoint(L, M) we get 180 == 2 * direction(M, F) - 2 * direction(C, midpoint(L, M)) mod 360
By perpendicular_direction_conditions_v0_r on L, M, J, midpoint(L, M) we get 180 == 2 * direction(L, M) - 2 * direction(J, midpoint(L, M)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), G, M, midpoint(L, M) we get 180 == 2 * direction(midpoint(L, M), G) - 2 * direction(M, midpoint(L, M)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), M, midpoint(L, M), G we get 180 == 2 * direction(midpoint(L, M), M) - 2 * direction(midpoint(L, M), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), C, L, F we get 180 == 2 * direction(midpoint(L, M), C) - 2 * direction(L, F) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(L, M), M, F we get 180 == 2 * direction(G, midpoint(L, M)) - 2 * direction(M, F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), M, F, midpoint(K, M) we get 180 == 2 * direction(midpoint(K, M), M) - 2 * direction(F, midpoint(K, M)) mod 360
By perpendicular_direction_conditions_v0_r on M, midpoint(K, M), F, midpoint(K, M) we get 180 == 2 * direction(M, midpoint(K, M)) - 2 * direction(F, midpoint(K, M)) mod 360
By perpendicular_direction_conditions_v0_r on L, F, C, midpoint(L, M) we get 180 == 2 * direction(L, F) - 2 * direction(C, midpoint(L, M)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, L), J, midpoint(K, L), L we get 180 == 2 * direction(midpoint(K, L), J) - 2 * direction(midpoint(K, L), L) mod 360
By perpendicular_direction_conditions_v0_r on K, M, B, midpoint(K, M) we get 180 == 2 * direction(K, M) - 2 * direction(B, midpoint(K, M)) mod 360
By orthocenter_concurrency on F, G, M we get orthocenter(F, G, M) in altitude(F, G, M), orthocenter(F, G, M) in altitude(G, F, M), orthocenter(F, G, M) in altitude(M, F, G)
By perpendicular_direction_conditions_v0_r on M, midpoint(L, M), G, midpoint(L, M) we get 180 == 2 * direction(M, midpoint(L, M)) - 2 * direction(G, midpoint(L, M)) mod 360
By perpendicular_direction_conditions_v0_r on K, midpoint(K, M), midpoint(K, M), B we get 180 == 2 * direction(K, midpoint(K, M)) - 2 * direction(midpoint(K, M), B) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(L, M), M, midpoint(L, M) we get 180 == 2 * direction(C, midpoint(L, M)) - 2 * direction(M, midpoint(L, M)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), G, F, L we get 180 == 2 * direction(midpoint(L, M), G) - 2 * direction(F, L) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, L), A, midpoint(K, L), L we get 180 == 2 * direction(midpoint(K, L), A) - 2 * direction(midpoint(K, L), L) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(L, M), L, midpoint(L, M) we get 180 == 2 * direction(G, midpoint(L, M)) - 2 * direction(L, midpoint(L, M)) mod 360
By perpendicular_direction_conditions_v0_r on G, M, midpoint(K, M), J we get 180 == 2 * direction(G, M) - 2 * direction(midpoint(K, M), J) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), B, midpoint(K, M), M we get 180 == 2 * direction(midpoint(K, M), B) - 2 * direction(midpoint(K, M), M) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), J, F, L we get 180 == 2 * direction(midpoint(L, M), J) - 2 * direction(F, L) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(K, M), G, M we get 180 == 2 * direction(B, midpoint(K, M)) - 2 * direction(G, M) mod 360
By perpendicular_direction_conditions_v0_r on F, M, midpoint(L, M), J we get 180 == 2 * direction(F, M) - 2 * direction(midpoint(L, M), J) mod 360
By perpendicular_direction_conditions_v0_r on L, K, midpoint(K, L), A we get 180 == 2 * direction(L, K) - 2 * direction(midpoint(K, L), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), J, midpoint(L, M), M we get 180 == 2 * direction(midpoint(L, M), J) - 2 * direction(midpoint(L, M), M) mod 360
By divide_by_2_mod_180_v1 on B, J, A, T, M, L we get angle(B, J, A) == angle(T, M, L) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), J, M, midpoint(K, M) we get 180 == 2 * direction(midpoint(K, M), J) - 2 * direction(M, midpoint(K, M)) mod 360
By perpendicular_direction_conditions_v0_r on M, F, midpoint(L, M), G we get 180 == 2 * direction(M, F) - 2 * direction(midpoint(L, M), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), G, midpoint(L, M), M we get 180 == 2 * direction(midpoint(L, M), G) - 2 * direction(midpoint(L, M), M) mod 360
By perpendicular_direction_conditions_v0_r on K, L, midpoint(K, L), J we get 180 == 2 * direction(K, L) - 2 * direction(midpoint(K, L), J) mod 360
By divide_by_2_mod_180_v3 on J, M, F, S, C, J we get angle(J, M, F) == angle(S, C, J) + 180 mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), B, M, G we get 180 == 2 * direction(midpoint(K, M), B) - 2 * direction(M, G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), F, K, G we get 180 == 2 * direction(midpoint(K, M), F) - 2 * direction(K, G) mod 360
By perpendicular_direction_conditions_v0_r on M, G, midpoint(K, M), F we get 180 == 2 * direction(M, G) - 2 * direction(midpoint(K, M), F) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(L, M), L, M we get 180 == 2 * direction(C, midpoint(L, M)) - 2 * direction(L, M) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), M, B, midpoint(K, M) we get 180 == 2 * direction(midpoint(K, M), M) - 2 * direction(B, midpoint(K, M)) mod 360
By perpendicular_direction_conditions_v0_r on L, M, midpoint(L, M), J we get 180 == 2 * direction(L, M) - 2 * direction(midpoint(L, M), J) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(K, M), M, midpoint(K, M) we get 180 == 2 * direction(F, midpoint(K, M)) - 2 * direction(M, midpoint(K, M)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), J, M, G we get 180 == 2 * direction(midpoint(K, M), J) - 2 * direction(M, G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), B, G, K we get 180 == 2 * direction(midpoint(K, M), B) - 2 * direction(G, K) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), F, G, K we get 180 == 2 * direction(midpoint(K, M), F) - 2 * direction(G, K) mod 360
By perpendicular_direction_conditions_v0_r on J, midpoint(K, M), K, midpoint(K, M) we get 180 == 2 * direction(J, midpoint(K, M)) - 2 * direction(K, midpoint(K, M)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, L), J, K, L we get 180 == 2 * direction(midpoint(K, L), J) - 2 * direction(K, L) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(K, L), midpoint(K, L), K we get 180 == 2 * direction(A, midpoint(K, L)) - 2 * direction(midpoint(K, L), K) mod 360
By perpendicular_direction_conditions_v0_r on L, F, J, midpoint(L, M) we get 180 == 2 * direction(L, F) - 2 * direction(J, midpoint(L, M)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, L), L, J, midpoint(K, L) we get 180 == 2 * direction(midpoint(K, L), L) - 2 * direction(J, midpoint(K, L)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), J, M, midpoint(L, M) we get 180 == 2 * direction(midpoint(L, M), J) - 2 * direction(M, midpoint(L, M)) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(L, M), M, L we get 180 == 2 * direction(C, midpoint(L, M)) - 2 * direction(M, L) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(K, M), K, G we get 180 == 2 * direction(B, midpoint(K, M)) - 2 * direction(K, G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), J, G, M we get 180 == 2 * direction(midpoint(K, M), J) - 2 * direction(G, M) mod 360
By divide_by_2_mod_180_v0 on J, B, C, J, K, G we get angle(J, B, C) == angle(J, K, G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), J, M, L we get 180 == 2 * direction(midpoint(L, M), J) - 2 * direction(M, L) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), L, G, midpoint(L, M) we get 180 == 2 * direction(midpoint(L, M), L) - 2 * direction(G, midpoint(L, M)) mod 360
By perpendicular_direction_conditions_v0_r on L, F, midpoint(L, M), J we get 180 == 2 * direction(L, F) - 2 * direction(midpoint(L, M), J) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), M, midpoint(K, M), B we get 180 == 2 * direction(midpoint(K, M), M) - 2 * direction(midpoint(K, M), B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), M, C, midpoint(L, M) we get 180 == 2 * direction(midpoint(L, M), M) - 2 * direction(C, midpoint(L, M)) mod 360
By perpendicular_direction_conditions_v0_r on M, L, J, midpoint(L, M) we get 180 == 2 * direction(M, L) - 2 * direction(J, midpoint(L, M)) mod 360
By perpendicular_direction_conditions_v0_r on F, M, G, midpoint(L, M) we get 180 == 2 * direction(F, M) - 2 * direction(G, midpoint(L, M)) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(L, M), F, M we get 180 == 2 * direction(C, midpoint(L, M)) - 2 * direction(F, M) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), C, midpoint(L, M), L we get 180 == 2 * direction(midpoint(L, M), C) - 2 * direction(midpoint(L, M), L) mod 360
By divide_by_2_mod_180_v2 on G, J, M, F, M, C we get angle(G, J, M) == angle(F, M, C) + 180 mod 360
By perpendicular_direction_conditions_v0_r on M, midpoint(K, M), midpoint(K, M), J we get 180 == 2 * direction(M, midpoint(K, M)) - 2 * direction(midpoint(K, M), J) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(L, M), L, M we get 180 == 2 * direction(G, midpoint(L, M)) - 2 * direction(L, M) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(K, M), K, M we get 180 == 2 * direction(B, midpoint(K, M)) - 2 * direction(K, M) mod 360
By divide_by_2_mod_180_v1 on M, L, C, M, J, G we get angle(M, J, G) == angle(M, L, C) mod 360
By perpendicular_direction_conditions_v0_r on J, midpoint(K, L), L, K we get 180 == 2 * direction(J, midpoint(K, L)) - 2 * direction(L, K) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(K, M), G, K we get 180 == 2 * direction(B, midpoint(K, M)) - 2 * direction(G, K) mod 360
By perpendicular_direction_conditions_v0_r on J, midpoint(L, M), F, L we get 180 == 2 * direction(J, midpoint(L, M)) - 2 * direction(F, L) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), B, K, midpoint(K, M) we get 180 == 2 * direction(midpoint(K, M), B) - 2 * direction(K, midpoint(K, M)) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(K, M), M, G we get 180 == 2 * direction(F, midpoint(K, M)) - 2 * direction(M, G) mod 360
By perpendicular_direction_conditions_v0_r on J, midpoint(L, M), midpoint(L, M), M we get 180 == 2 * direction(J, midpoint(L, M)) - 2 * direction(midpoint(L, M), M) mod 360
By perpendicular_direction_conditions_v0_r on J, midpoint(K, M), K, G we get 180 == 2 * direction(J, midpoint(K, M)) - 2 * direction(K, G) mod 360
By perpendicular_direction_conditions_v0_r on L, midpoint(L, M), midpoint(L, M), J we get 180 == 2 * direction(L, midpoint(L, M)) - 2 * direction(midpoint(L, M), J) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, L), L, midpoint(K, L), J we get 180 == 2 * direction(midpoint(K, L), L) - 2 * direction(midpoint(K, L), J) mod 360
By perpendicular_direction_conditions_v0_r on G, K, midpoint(K, M), B we get 180 == 2 * direction(G, K) - 2 * direction(midpoint(K, M), B) mod 360
By divide_by_2_mod_180_v0 on G, J, F, L, J, A we get angle(G, J, F) == angle(L, J, A) mod 360
By orthocenter_concurrency on G, F, J we get orthocenter(F, G, J) in altitude(G, F, J), orthocenter(F, G, J) in altitude(F, G, J), orthocenter(F, G, J) in altitude(J, F, G)
By perpendicular_direction_conditions_v0_r on F, L, J, midpoint(L, M) we get 180 == 2 * direction(F, L) - 2 * direction(J, midpoint(L, M)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), J, M, K we get 180 == 2 * direction(midpoint(K, M), J) - 2 * direction(M, K) mod 360
By perpendicular_direction_conditions_v0_r on F, M, J, midpoint(L, M) we get 180 == 2 * direction(F, M) - 2 * direction(J, midpoint(L, M)) mod 360
By perpendicular_direction_conditions_v0_r on F, L, midpoint(L, M), G we get 180 == 2 * direction(F, L) - 2 * direction(midpoint(L, M), G) mod 360
By perpendicular_direction_conditions_v0_r on K, midpoint(K, L), midpoint(K, L), A we get 180 == 2 * direction(K, midpoint(K, L)) - 2 * direction(midpoint(K, L), A) mod 360
By perpendicular_direction_conditions_v0_r on J, midpoint(K, L), K, midpoint(K, L) we get 180 == 2 * direction(J, midpoint(K, L)) - 2 * direction(K, midpoint(K, L)) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(K, L), L, K we get 180 == 2 * direction(A, midpoint(K, L)) - 2 * direction(L, K) mod 360
By perpendicular_direction_conditions_v0_r on L, midpoint(K, L), midpoint(K, L), A we get 180 == 2 * direction(L, midpoint(K, L)) - 2 * direction(midpoint(K, L), A) mod 360
By perpendicular_direction_conditions_v0_r on M, G, midpoint(K, M), J we get 180 == 2 * direction(M, G) - 2 * direction(midpoint(K, M), J) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), L, midpoint(L, M), J we get 180 == 2 * direction(midpoint(L, M), L) - 2 * direction(midpoint(L, M), J) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), C, L, M we get 180 == 2 * direction(midpoint(L, M), C) - 2 * direction(L, M) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), L, midpoint(L, M), G we get 180 == 2 * direction(midpoint(L, M), L) - 2 * direction(midpoint(L, M), G) mod 360
By perpendicular_direction_conditions_v0_r on G, M, midpoint(K, M), B we get 180 == 2 * direction(G, M) - 2 * direction(midpoint(K, M), B) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(K, M), M, midpoint(K, M) we get 180 == 2 * direction(B, midpoint(K, M)) - 2 * direction(M, midpoint(K, M)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), F, midpoint(K, M), M we get 180 == 2 * direction(midpoint(K, M), F) - 2 * direction(midpoint(K, M), M) mod 360
By perpendicular_direction_conditions_v0_r on J, midpoint(L, M), L, midpoint(L, M) we get 180 == 2 * direction(J, midpoint(L, M)) - 2 * direction(L, midpoint(L, M)) mod 360
By perpendicular_direction_conditions_v0_r on J, midpoint(L, M), F, M we get 180 == 2 * direction(J, midpoint(L, M)) - 2 * direction(F, M) mod 360
By perpendicular_direction_conditions_v0_r on M, K, midpoint(K, M), B we get 180 == 2 * direction(M, K) - 2 * direction(midpoint(K, M), B) mod 360
By divide_by_2_mod_180_v2 on K, M, C, B, J, M we get angle(K, M, C) == angle(B, J, M) + 180 mod 360
By divide_by_2_mod_180_v3 on A, J, G, G, M, S we get angle(A, J, G) == angle(G, M, S) + 180 mod 360
By perpendicular_direction_conditions_v0_r on J, midpoint(K, M), midpoint(K, M), K we get 180 == 2 * direction(J, midpoint(K, M)) - 2 * direction(midpoint(K, M), K) mod 360
By divide_by_2_mod_180_v0 on L, M, C, L, J, C we get angle(L, J, C) == angle(L, M, C) mod 360
By perpendicular_direction_conditions_v0_r on M, F, J, midpoint(L, M) we get 180 == 2 * direction(M, F) - 2 * direction(J, midpoint(L, M)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), J, K, G we get 180 == 2 * direction(midpoint(K, M), J) - 2 * direction(K, G) mod 360
By divide_by_2_mod_180_v0 on F, M, J, L, C, G we get angle(F, M, J) == angle(L, C, G) mod 360
By perpendicular_direction_conditions_v0_r on K, midpoint(K, L), midpoint(K, L), J we get 180 == 2 * direction(K, midpoint(K, L)) - 2 * direction(midpoint(K, L), J) mod 360
By divide_by_2_mod_180_v0 on M, J, B, B, M, K we get angle(B, M, K) == angle(M, J, B) mod 360
By perpendicular_direction_conditions_v0_r on L, K, A, midpoint(K, L) we get 180 == 2 * direction(L, K) - 2 * direction(A, midpoint(K, L)) mod 360
By perpendicular_direction_conditions_v0_r on F, L, midpoint(L, M), C we get 180 == 2 * direction(F, L) - 2 * direction(midpoint(L, M), C) mod 360
By divide_by_2_mod_180_v3 on B, M, G, B, J, K we get angle(B, M, G) == angle(B, J, K) + 180 mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(K, L), K, midpoint(K, L) we get 180 == 2 * direction(A, midpoint(K, L)) - 2 * direction(K, midpoint(K, L)) mod 360
By perpendicular_direction_conditions_v0_r on L, K, J, midpoint(K, L) we get 180 == 2 * direction(L, K) - 2 * direction(J, midpoint(K, L)) mod 360
By divide_by_2_mod_180_v3 on C, J, L, C, M, F we get angle(C, J, L) == angle(C, M, F) + 180 mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(L, M), M, L we get 180 == 2 * direction(G, midpoint(L, M)) - 2 * direction(M, L) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, L), J, K, midpoint(K, L) we get 180 == 2 * direction(midpoint(K, L), J) - 2 * direction(K, midpoint(K, L)) mod 360
By divide_by_2_mod_180_v3 on F, J, M, K, M, C we get angle(F, J, M) == angle(K, M, C) + 180 mod 360
By perpendicular_direction_conditions_v0_r on G, K, B, midpoint(K, M) we get 180 == 2 * direction(G, K) - 2 * direction(B, midpoint(K, M)) mod 360
By perpendicular_direction_conditions_v0_r on J, midpoint(K, M), K, M we get 180 == 2 * direction(J, midpoint(K, M)) - 2 * direction(K, M) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), C, midpoint(L, M), M we get 180 == 2 * direction(midpoint(L, M), C) - 2 * direction(midpoint(L, M), M) mod 360
By perpendicular_direction_conditions_v0_r on M, L, C, midpoint(L, M) we get 180 == 2 * direction(M, L) - 2 * direction(C, midpoint(L, M)) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(L, M), F, L we get 180 == 2 * direction(C, midpoint(L, M)) - 2 * direction(F, L) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), B, K, G we get 180 == 2 * direction(midpoint(K, M), B) - 2 * direction(K, G) mod 360
By perpendicular_direction_conditions_v0_r on J, midpoint(K, M), M, K we get 180 == 2 * direction(J, midpoint(K, M)) - 2 * direction(M, K) mod 360
By perpendicular_direction_conditions_v0_r on K, midpoint(K, L), A, midpoint(K, L) we get 180 == 2 * direction(K, midpoint(K, L)) - 2 * direction(A, midpoint(K, L)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), L, midpoint(L, M), C we get 180 == 2 * direction(midpoint(L, M), L) - 2 * direction(midpoint(L, M), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, L), A, K, midpoint(K, L) we get 180 == 2 * direction(midpoint(K, L), A) - 2 * direction(K, midpoint(K, L)) mod 360
By perpendicular_direction_conditions_v0_r on K, L, J, midpoint(K, L) we get 180 == 2 * direction(K, L) - 2 * direction(J, midpoint(K, L)) mod 360
By perpendicular_direction_conditions_v0_r on L, F, midpoint(L, M), C we get 180 == 2 * direction(L, F) - 2 * direction(midpoint(L, M), C) mod 360
By perpendicular_direction_conditions_v0_r on J, midpoint(K, L), K, L we get 180 == 2 * direction(J, midpoint(K, L)) - 2 * direction(K, L) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), C, M, L we get 180 == 2 * direction(midpoint(L, M), C) - 2 * direction(M, L) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), B, M, K we get 180 == 2 * direction(midpoint(K, M), B) - 2 * direction(M, K) mod 360
By perpendicular_direction_conditions_v0_r on J, midpoint(K, M), M, G we get 180 == 2 * direction(J, midpoint(K, M)) - 2 * direction(M, G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), G, midpoint(L, M), L we get 180 == 2 * direction(midpoint(L, M), G) - 2 * direction(midpoint(L, M), L) mod 360
By perpendicular_direction_conditions_v0_r on F, L, midpoint(L, M), J we get 180 == 2 * direction(F, L) - 2 * direction(midpoint(L, M), J) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), F, G, M we get 180 == 2 * direction(midpoint(K, M), F) - 2 * direction(G, M) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), J, L, midpoint(L, M) we get 180 == 2 * direction(midpoint(L, M), J) - 2 * direction(L, midpoint(L, M)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, L), J, L, K we get 180 == 2 * direction(midpoint(K, L), J) - 2 * direction(L, K) mod 360
By perpendicular_direction_conditions_v0_r on K, G, midpoint(K, M), F we get 180 == 2 * direction(K, G) - 2 * direction(midpoint(K, M), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), M, midpoint(L, M), J we get 180 == 2 * direction(midpoint(L, M), M) - 2 * direction(midpoint(L, M), J) mod 360
By divide_by_2_mod_180_v1 on M, K, L, M, J, C we get angle(M, J, C) == angle(M, K, L) mod 360
By perpendicular_direction_conditions_v0_r on L, midpoint(L, M), J, midpoint(L, M) we get 180 == 2 * direction(L, midpoint(L, M)) - 2 * direction(J, midpoint(L, M)) mod 360
By perpendicular_direction_conditions_v0_r on G, M, J, midpoint(K, M) we get 180 == 2 * direction(G, M) - 2 * direction(J, midpoint(K, M)) mod 360
By perpendicular_direction_conditions_v0_r on L, M, midpoint(L, M), C we get 180 == 2 * direction(L, M) - 2 * direction(midpoint(L, M), C) mod 360
By perpendicular_direction_conditions_v0_r on M, G, midpoint(K, M), B we get 180 == 2 * direction(M, G) - 2 * direction(midpoint(K, M), B) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(K, M), M, G we get 180 == 2 * direction(B, midpoint(K, M)) - 2 * direction(M, G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), J, L, F we get 180 == 2 * direction(midpoint(L, M), J) - 2 * direction(L, F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), M, midpoint(L, M), C we get 180 == 2 * direction(midpoint(L, M), M) - 2 * direction(midpoint(L, M), C) mod 360
By divide_by_2_mod_180_v2 on G, M, S, K, J, B we get angle(G, M, S) == angle(K, J, B) + 180 mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), J, midpoint(L, M), L we get 180 == 2 * direction(midpoint(L, M), J) - 2 * direction(midpoint(L, M), L) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), J, L, M we get 180 == 2 * direction(midpoint(L, M), J) - 2 * direction(L, M) mod 360
By perpendicular_direction_conditions_v0_r on J, midpoint(L, M), midpoint(L, M), L we get 180 == 2 * direction(J, midpoint(L, M)) - 2 * direction(midpoint(L, M), L) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), K, F, midpoint(K, M) we get 180 == 2 * direction(midpoint(K, M), K) - 2 * direction(F, midpoint(K, M)) mod 360
By divide_by_2_mod_180_v1 on L, A, J, L, F, J we get angle(L, A, J) == angle(L, F, J) mod 360
By divide_by_2_mod_180_v1 on L, F, J, J, A, K we get angle(J, A, K) == angle(L, F, J) mod 360
By perpendicular_direction_conditions_v0_r on J, midpoint(L, M), L, F we get 180 == 2 * direction(J, midpoint(L, M)) - 2 * direction(L, F) mod 360
By perpendicular_direction_conditions_v0_r on L, midpoint(K, L), J, midpoint(K, L) we get 180 == 2 * direction(L, midpoint(K, L)) - 2 * direction(J, midpoint(K, L)) mod 360
By perpendicular_direction_conditions_v0_r on J, midpoint(L, M), M, L we get 180 == 2 * direction(J, midpoint(L, M)) - 2 * direction(M, L) mod 360
By perpendicular_direction_conditions_v0_r on J, midpoint(K, M), G, K we get 180 == 2 * direction(J, midpoint(K, M)) - 2 * direction(G, K) mod 360
By perpendicular_direction_conditions_v0_r on M, midpoint(L, M), C, midpoint(L, M) we get 180 == 2 * direction(M, midpoint(L, M)) - 2 * direction(C, midpoint(L, M)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), K, B, midpoint(K, M) we get 180 == 2 * direction(midpoint(K, M), K) - 2 * direction(B, midpoint(K, M)) mod 360
By divide_by_2_mod_180_v0 on K, A, J, B, F, L we get angle(B, F, L) == angle(K, A, J) mod 360
By perpendicular_direction_conditions_v0_r on M, F, G, midpoint(L, M) we get 180 == 2 * direction(M, F) - 2 * direction(G, midpoint(L, M)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), F, midpoint(K, M), K we get 180 == 2 * direction(midpoint(K, M), F) - 2 * direction(midpoint(K, M), K) mod 360
By divide_by_2_mod_180_v0 on M, G, J, K, A, J we get angle(K, A, J) == angle(M, G, J) mod 360
By perpendicular_direction_conditions_v0_r on F, L, G, midpoint(L, M) we get 180 == 2 * direction(F, L) - 2 * direction(G, midpoint(L, M)) mod 360
By perpendicular_direction_conditions_v0_r on K, G, B, midpoint(K, M) we get 180 == 2 * direction(K, G) - 2 * direction(B, midpoint(K, M)) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(L, M), M, midpoint(L, M) we get 180 == 2 * direction(G, midpoint(L, M)) - 2 * direction(M, midpoint(L, M)) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(L, M), midpoint(L, M), L we get 180 == 2 * direction(C, midpoint(L, M)) - 2 * direction(midpoint(L, M), L) mod 360
By divide_by_2_mod_180_v0 on C, J, M, L, K, M we get angle(C, J, M) == angle(L, K, M) mod 360
By perpendicular_direction_conditions_v0_r on M, midpoint(L, M), midpoint(L, M), J we get 180 == 2 * direction(M, midpoint(L, M)) - 2 * direction(midpoint(L, M), J) mod 360
By divide_by_2_mod_180_v3 on L, M, B, A, J, B we get angle(L, M, B) == angle(A, J, B) + 180 mod 360
By perpendicular_direction_conditions_v0_r on F, M, midpoint(L, M), C we get 180 == 2 * direction(F, M) - 2 * direction(midpoint(L, M), C) mod 360
By perpendicular_direction_conditions_v0_r on L, M, C, midpoint(L, M) we get 180 == 2 * direction(L, M) - 2 * direction(C, midpoint(L, M)) mod 360
By divide_by_2_mod_180_v1 on J, G, M, L, K, J we get angle(J, G, M) == angle(L, K, J) mod 360
By orthocenter_concurrency on M, J, F we get orthocenter(F, J, M) in altitude(M, F, J), orthocenter(F, J, M) in altitude(J, F, M), orthocenter(F, J, M) in altitude(F, J, M)
By perpendicular_direction_conditions_v0_r on M, K, B, midpoint(K, M) we get 180 == 2 * direction(M, K) - 2 * direction(B, midpoint(K, M)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), J, M, F we get 180 == 2 * direction(midpoint(L, M), J) - 2 * direction(M, F) mod 360
By divide_by_2_mod_180_v0 on K, L, J, K, A, J we get angle(K, A, J) == angle(K, L, J) mod 360
By perpendicular_direction_conditions_v0_r on J, midpoint(L, M), M, F we get 180 == 2 * direction(J, midpoint(L, M)) - 2 * direction(M, F) mod 360
By perpendicular_direction_conditions_v0_r on F, M, midpoint(L, M), G we get 180 == 2 * direction(F, M) - 2 * direction(midpoint(L, M), G) mod 360
By perpendicular_direction_conditions_v0_r on L, midpoint(L, M), C, midpoint(L, M) we get 180 == 2 * direction(L, midpoint(L, M)) - 2 * direction(C, midpoint(L, M)) mod 360
By perpendicular_direction_conditions_v0_r on J, midpoint(K, L), midpoint(K, L), K we get 180 == 2 * direction(J, midpoint(K, L)) - 2 * direction(midpoint(K, L), K) mod 360
By perpendicular_direction_conditions_v0_r on K, L, midpoint(K, L), A we get 180 == 2 * direction(K, L) - 2 * direction(midpoint(K, L), A) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(K, M), K, midpoint(K, M) we get 180 == 2 * direction(F, midpoint(K, M)) - 2 * direction(K, midpoint(K, M)) mod 360
By divide_by_2_mod_180_v3 on A, J, L, K, M, L we get angle(A, J, L) == angle(K, M, L) + 180 mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(L, M), midpoint(L, M), L we get 180 == 2 * direction(G, midpoint(L, M)) - 2 * direction(midpoint(L, M), L) mod 360
By divide_by_2_mod_180_v0 on C, J, B, L, K, A we get angle(C, J, B) == angle(L, K, A) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(L, M), M, F we get 180 == 2 * direction(C, midpoint(L, M)) - 2 * direction(M, F) mod 360
By perpendicular_direction_conditions_v0_r on G, M, midpoint(K, M), F we get 180 == 2 * direction(G, M) - 2 * direction(midpoint(K, M), F) mod 360
By divide_by_2_mod_180_v1 on G, K, J, T, B, J we get angle(G, K, J) == angle(T, B, J) mod 360
By perpendicular_direction_conditions_v0_r on G, K, J, midpoint(K, M) we get 180 == 2 * direction(G, K) - 2 * direction(J, midpoint(K, M)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), J, midpoint(K, M), M we get 180 == 2 * direction(midpoint(K, M), J) - 2 * direction(midpoint(K, M), M) mod 360
By perpendicular_direction_conditions_v0_r on M, L, midpoint(L, M), C we get 180 == 2 * direction(M, L) - 2 * direction(midpoint(L, M), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), B, M, midpoint(K, M) we get 180 == 2 * direction(midpoint(K, M), B) - 2 * direction(M, midpoint(K, M)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), B, K, M we get 180 == 2 * direction(midpoint(K, M), B) - 2 * direction(K, M) mod 360
By perpendicular_direction_conditions_v0_r on J, midpoint(K, M), midpoint(K, M), M we get 180 == 2 * direction(J, midpoint(K, M)) - 2 * direction(midpoint(K, M), M) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(K, M), M, K we get 180 == 2 * direction(F, midpoint(K, M)) - 2 * direction(M, K) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), B, midpoint(K, M), K we get 180 == 2 * direction(midpoint(K, M), B) - 2 * direction(midpoint(K, M), K) mod 360
By perpendicular_direction_conditions_v0_r on L, F, midpoint(L, M), G we get 180 == 2 * direction(L, F) - 2 * direction(midpoint(L, M), G) mod 360
By perpendicular_direction_conditions_v0_r on G, M, F, midpoint(K, M) we get 180 == 2 * direction(G, M) - 2 * direction(F, midpoint(K, M)) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(K, M), K, M we get 180 == 2 * direction(F, midpoint(K, M)) - 2 * direction(K, M) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), G, M, L we get 180 == 2 * direction(midpoint(L, M), G) - 2 * direction(M, L) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, L), J, midpoint(K, L), K we get 180 == 2 * direction(midpoint(K, L), J) - 2 * direction(midpoint(K, L), K) mod 360
By divide_by_2_mod_180_v1 on J, L, M, L, C, J we get angle(J, L, M) == angle(L, C, J) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(L, M), F, M we get 180 == 2 * direction(G, midpoint(L, M)) - 2 * direction(F, M) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), B, G, M we get 180 == 2 * direction(midpoint(K, M), B) - 2 * direction(G, M) mod 360
By perpendicular_direction_conditions_v0_r on M, G, B, midpoint(K, M) we get 180 == 2 * direction(M, G) - 2 * direction(B, midpoint(K, M)) mod 360
By perpendicular_direction_conditions_v0_r on K, M, midpoint(K, M), B we get 180 == 2 * direction(K, M) - 2 * direction(midpoint(K, M), B) mod 360
By perpendicular_direction_conditions_v0_r on K, midpoint(K, M), F, midpoint(K, M) we get 180 == 2 * direction(K, midpoint(K, M)) - 2 * direction(F, midpoint(K, M)) mod 360
By divide_by_2_mod_180_v0 on A, J, B, F, M, S we get angle(A, J, B) == angle(F, M, S) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), M, midpoint(K, M), J we get 180 == 2 * direction(midpoint(K, M), M) - 2 * direction(midpoint(K, M), J) mod 360
By perpendicular_direction_conditions_v0_r on K, G, midpoint(K, M), B we get 180 == 2 * direction(K, G) - 2 * direction(midpoint(K, M), B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), J, F, M we get 180 == 2 * direction(midpoint(L, M), J) - 2 * direction(F, M) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(K, M), M, K we get 180 == 2 * direction(B, midpoint(K, M)) - 2 * direction(M, K) mod 360
By divide_by_2_mod_180_v1 on G, M, C, A, J, C we get angle(A, J, C) == angle(G, M, C) mod 360
By perpendicular_direction_conditions_v0_r on K, M, J, midpoint(K, M) we get 180 == 2 * direction(K, M) - 2 * direction(J, midpoint(K, M)) mod 360
By perpendicular_direction_conditions_v0_r on M, midpoint(K, M), B, midpoint(K, M) we get 180 == 2 * direction(M, midpoint(K, M)) - 2 * direction(B, midpoint(K, M)) mod 360
By divide_by_2_mod_180_v0 on J, C, L, M, L, J we get angle(J, C, L) == angle(M, L, J) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(L, M), L, F we get 180 == 2 * direction(G, midpoint(L, M)) - 2 * direction(L, F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), M, midpoint(K, M), F we get 180 == 2 * direction(midpoint(K, M), M) - 2 * direction(midpoint(K, M), F) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(K, L), K, L we get 180 == 2 * direction(A, midpoint(K, L)) - 2 * direction(K, L) mod 360
By divide_by_2_mod_180_v3 on J, L, F, G, C, M we get angle(J, L, F) == angle(G, C, M) + 180 mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), K, midpoint(K, M), F we get 180 == 2 * direction(midpoint(K, M), K) - 2 * direction(midpoint(K, M), F) mod 360
By divide_by_2_mod_180_v2 on M, J, B, B, M, G we get angle(M, J, B) == angle(B, M, G) + 180 mod 360
By divide_by_2_mod_180_v1 on C, G, M, L, F, B we get angle(C, G, M) == angle(L, F, B) mod 360
By perpendicular_direction_conditions_v0_r on M, F, midpoint(L, M), C we get 180 == 2 * direction(M, F) - 2 * direction(midpoint(L, M), C) mod 360
By perpendicular_direction_conditions_v0_r on J, midpoint(L, M), L, M we get 180 == 2 * direction(J, midpoint(L, M)) - 2 * direction(L, M) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, L), L, A, midpoint(K, L) we get 180 == 2 * direction(midpoint(K, L), L) - 2 * direction(A, midpoint(K, L)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), C, F, L we get 180 == 2 * direction(midpoint(L, M), C) - 2 * direction(F, L) mod 360
By divide_by_2_mod_180_v2 on J, K, G, K, B, F we get angle(J, K, G) == angle(K, B, F) + 180 mod 360
By perpendicular_direction_conditions_v0_r on M, K, midpoint(K, M), F we get 180 == 2 * direction(M, K) - 2 * direction(midpoint(K, M), F) mod 360
By perpendicular_direction_conditions_v0_r on K, midpoint(K, M), midpoint(K, M), J we get 180 == 2 * direction(K, midpoint(K, M)) - 2 * direction(midpoint(K, M), J) mod 360
By perpendicular_direction_conditions_v0_r on M, L, G, midpoint(L, M) we get 180 == 2 * direction(M, L) - 2 * direction(G, midpoint(L, M)) mod 360
By perpendicular_direction_conditions_v0_r on F, M, C, midpoint(L, M) we get 180 == 2 * direction(F, M) - 2 * direction(C, midpoint(L, M)) mod 360
By perpendicular_direction_conditions_v0_r on L, K, midpoint(K, L), J we get 180 == 2 * direction(L, K) - 2 * direction(midpoint(K, L), J) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(L, M), L, F we get 180 == 2 * direction(C, midpoint(L, M)) - 2 * direction(L, F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), K, J, midpoint(K, M) we get 180 == 2 * direction(midpoint(K, M), K) - 2 * direction(J, midpoint(K, M)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), M, J, midpoint(L, M) we get 180 == 2 * direction(midpoint(L, M), M) - 2 * direction(J, midpoint(L, M)) mod 360
By perpendicular_direction_conditions_v0_r on M, midpoint(L, M), J, midpoint(L, M) we get 180 == 2 * direction(M, midpoint(L, M)) - 2 * direction(J, midpoint(L, M)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), L, J, midpoint(L, M) we get 180 == 2 * direction(midpoint(L, M), L) - 2 * direction(J, midpoint(L, M)) mod 360
By perpendicular_direction_conditions_v0_r on J, midpoint(K, M), G, M we get 180 == 2 * direction(J, midpoint(K, M)) - 2 * direction(G, M) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), L, C, midpoint(L, M) we get 180 == 2 * direction(midpoint(L, M), L) - 2 * direction(C, midpoint(L, M)) mod 360
By divide_by_2_mod_180_v1 on K, J, F, K, M, B we get angle(K, J, F) == angle(K, M, B) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(K, M), K, midpoint(K, M) we get 180 == 2 * direction(B, midpoint(K, M)) - 2 * direction(K, midpoint(K, M)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, L), A, L, midpoint(K, L) we get 180 == 2 * direction(midpoint(K, L), A) - 2 * direction(L, midpoint(K, L)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), J, K, midpoint(K, M) we get 180 == 2 * direction(midpoint(K, M), J) - 2 * direction(K, midpoint(K, M)) mod 360
By perpendicular_direction_conditions_v0_r on J, midpoint(L, M), M, midpoint(L, M) we get 180 == 2 * direction(J, midpoint(L, M)) - 2 * direction(M, midpoint(L, M)) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(K, M), G, M we get 180 == 2 * direction(F, midpoint(K, M)) - 2 * direction(G, M) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), G, M, F we get 180 == 2 * direction(midpoint(L, M), G) - 2 * direction(M, F) mod 360
By divide_by_2_mod_180_v0 on L, K, G, L, J, C we get angle(L, J, C) == angle(L, K, G) mod 360
By divide_by_2_mod_180_v0 on L, K, M, G, J, M we get angle(G, J, M) == angle(L, K, M) mod 360
By divide_by_2_mod_180_v2 on G, M, S, F, J, M we get angle(G, M, S) == angle(F, J, M) + 180 mod 360
By divide_by_2_mod_180_v3 on L, M, K, G, J, B we get angle(L, M, K) == angle(G, J, B) + 180 mod 360
By divide_by_2_mod_180_v1 on J, A, K, J, G, K we get angle(J, A, K) == angle(J, G, K) mod 360
By divide_by_2_mod_180_v1 on M, J, G, F, J, A we get angle(F, J, A) == angle(M, J, G) mod 360
By divide_by_2_mod_180_v1 on K, L, F, F, J, M we get angle(F, J, M) == angle(K, L, F) mod 360
By divide_by_2_mod_180_v0 on C, J, B, A, L, K we get angle(A, L, K) == angle(C, J, B) mod 360
By divide_by_2_mod_180_v0 on C, J, B, L, M, G we get angle(C, J, B) == angle(L, M, G) mod 360
By divide_by_2_mod_180_v0 on B, F, M, J, A, C we get angle(B, F, M) == angle(J, A, C) mod 360
By divide_by_2_mod_180_v1 on S, B, F, J, M, K we get angle(J, M, K) == angle(S, B, F) mod 360
By divide_by_2_mod_180_v0 on B, J, K, C, M, G we get angle(B, J, K) == angle(C, M, G) mod 360
By divide_by_2_mod_180_v1 on G, K, J, M, B, J we get angle(G, K, J) == angle(M, B, J) mod 360
By divide_by_2_mod_180_v0 on J, A, L, J, K, L we get angle(J, A, L) == angle(J, K, L) mod 360
By divide_by_2_mod_180_v0 on M, J, F, M, L, K we get angle(M, J, F) == angle(M, L, K) mod 360
By divide_by_2_mod_180_v1 on F, J, M, A, J, C we get angle(A, J, C) == angle(F, J, M) mod 360
By divide_by_2_mod_180_v3 on L, M, S, L, J, C we get angle(L, M, S) == angle(L, J, C) + 180 mod 360
By divide_by_2_mod_180_v1 on G, J, L, M, K, L we get angle(G, J, L) == angle(M, K, L) mod 360
By divide_by_2_mod_180_v1 on J, G, M, L, F, B we get angle(J, G, M) == angle(L, F, B) mod 360
By divide_by_2_mod_180_v0 on M, L, J, S, C, J we get angle(M, L, J) == angle(S, C, J) mod 360
By divide_by_2_mod_180_v1 on G, J, L, C, M, L we get angle(C, M, L) == angle(G, J, L) mod 360
By divide_by_2_mod_180_v2 on C, M, F, M, J, G we get angle(C, M, F) == angle(M, J, G) + 180 mod 360
By divide_by_2_mod_180_v1 on J, C, B, L, M, J we get angle(J, C, B) == angle(L, M, J) mod 360
By divide_by_2_mod_180_v0 on F, L, K, C, J, A we get angle(C, J, A) == angle(F, L, K) mod 360
By divide_by_2_mod_180_v0 on B, F, L, B, A, J we get angle(B, A, J) == angle(B, F, L) mod 360
By divide_by_2_mod_180_v0 on B, F, M, K, A, J we get angle(B, F, M) == angle(K, A, J) mod 360
By divide_by_2_mod_180_v0 on C, J, B, L, K, B we get angle(C, J, B) == angle(L, K, B) mod 360
By divide_by_2_mod_180_v2 on C, M, F, C, J, L we get angle(C, M, F) == angle(C, J, L) + 180 mod 360
By divide_by_2_mod_180_v3 on J, B, S, K, M, J we get angle(J, B, S) == angle(K, M, J) + 180 mod 360
By divide_by_2_mod_180_v1 on K, J, A, K, L, A we get angle(K, J, A) == angle(K, L, A) mod 360
By divide_by_2_mod_180_v0 on C, J, M, F, M, S we get angle(C, J, M) == angle(F, M, S) mod 360
By divide_by_2_mod_180_v1 on K, L, A, F, J, C we get angle(F, J, C) == angle(K, L, A) mod 360
By divide_by_2_mod_180_v2 on J, M, L, S, C, G we get angle(J, M, L) == angle(S, C, G) + 180 mod 360
By divide_by_2_mod_180_v1 on L, F, J, C, A, J we get angle(C, A, J) == angle(L, F, J) mod 360
By divide_by_2_mod_180_v0 on L, M, T, A, J, B we get angle(A, J, B) == angle(L, M, T) mod 360
By divide_by_2_mod_180_v2 on G, C, B, J, L, M we get angle(G, C, B) == angle(J, L, M) + 180 mod 360
By divide_by_2_mod_180_v0 on A, L, K, A, J, K we get angle(A, J, K) == angle(A, L, K) mod 360
By divide_by_2_mod_180_v1 on F, B, A, M, K, J we get angle(F, B, A) == angle(M, K, J) mod 360
By divide_by_2_mod_180_v1 on G, M, J, F, B, M we get angle(F, B, M) == angle(G, M, J) mod 360
By divide_by_2_mod_180_v1 on G, M, T, B, J, M we get angle(B, J, M) == angle(G, M, T) mod 360
By divide_by_2_mod_180_v0 on C, J, B, F, M, K we get angle(C, J, B) == angle(F, M, K) mod 360
By divide_by_2_mod_180_v1 on C, G, M, L, F, J we get angle(C, G, M) == angle(L, F, J) mod 360
By divide_by_2_mod_180_v1 on C, J, L, M, L, A we get angle(C, J, L) == angle(M, L, A) mod 360
By divide_by_2_mod_180_v0 on F, J, K, M, K, B we get angle(F, J, K) == angle(M, K, B) mod 360
By divide_by_2_mod_180_v1 on C, G, M, L, A, J we get angle(C, G, M) == angle(L, A, J) mod 360
By divide_by_2_mod_180_v1 on F, L, C, F, J, A we get angle(F, J, A) == angle(F, L, C) mod 360
By divide_by_2_mod_180_v3 on A, J, L, G, M, F we get angle(A, J, L) == angle(G, M, F) + 180 mod 360
By divide_by_2_mod_180_v1 on B, J, C, A, K, L we get angle(A, K, L) == angle(B, J, C) mod 360
By divide_by_2_mod_180_v0 on L, J, C, F, M, B we get angle(F, M, B) == angle(L, J, C) mod 360
By divide_by_2_mod_180_v1 on C, G, M, M, F, J we get angle(C, G, M) == angle(M, F, J) mod 360
By divide_by_2_mod_180_v0 on C, J, A, B, M, K we get angle(B, M, K) == angle(C, J, A) mod 360
By divide_by_2_mod_180_v0 on B, M, K, B, J, K we get angle(B, J, K) == angle(B, M, K) mod 360
By divide_by_2_mod_180_v2 on M, B, F, J, M, K we get angle(M, B, F) == angle(J, M, K) + 180 mod 360
By divide_by_2_mod_180_v2 on J, K, G, F, B, M we get angle(J, K, G) == angle(F, B, M) + 180 mod 360
By divide_by_2_mod_180_v0 on B, F, M, J, A, L we get angle(B, F, M) == angle(J, A, L) mod 360
By divide_by_2_mod_180_v0 on L, J, A, C, J, B we get angle(C, J, B) == angle(L, J, A) mod 360
By divide_by_2_mod_180_v1 on C, G, K, L, K, J we get angle(C, G, K) == angle(L, K, J) mod 360
By divide_by_2_mod_180_v2 on A, J, F, F, M, C we get angle(A, J, F) == angle(F, M, C) + 180 mod 360
By divide_by_2_mod_180_v2 on K, M, C, A, J, C we get angle(K, M, C) == angle(A, J, C) + 180 mod 360
By divide_by_2_mod_180_v0 on G, J, F, C, L, K we get angle(C, L, K) == angle(G, J, F) mod 360
By divide_by_2_mod_180_v0 on K, L, J, K, G, C we get angle(K, G, C) == angle(K, L, J) mod 360
By divide_by_2_mod_180_v1 on J, C, S, J, L, F we get angle(J, C, S) == angle(J, L, F) mod 360
By divide_by_2_mod_180_v2 on G, M, F, F, J, C we get angle(G, M, F) == angle(F, J, C) + 180 mod 360
By divide_by_2_mod_180_v2 on A, J, B, F, M, C we get angle(A, J, B) == angle(F, M, C) + 180 mod 360
By divide_by_2_mod_180_v1 on M, L, C, F, J, A we get angle(F, J, A) == angle(M, L, C) mod 360
By divide_by_2_mod_180_v1 on B, M, F, C, J, L we get angle(B, M, F) == angle(C, J, L) mod 360
By divide_by_2_mod_180_v3 on J, L, F, A, C, J we get angle(J, L, F) == angle(A, C, J) + 180 mod 360
By divide_by_2_mod_180_v1 on J, G, K, M, F, J we get angle(J, G, K) == angle(M, F, J) mod 360
By divide_by_2_mod_180_v1 on J, C, B, J, L, M we get angle(J, C, B) == angle(J, L, M) mod 360
By divide_by_2_mod_180_v1 on K, J, F, B, K, G we get angle(B, K, G) == angle(K, J, F) mod 360
By divide_by_2_mod_180_v0 on L, K, B, G, J, F we get angle(G, J, F) == angle(L, K, B) mod 360
By divide_by_2_mod_180_v0 on M, K, A, F, J, K we get angle(F, J, K) == angle(M, K, A) mod 360
By divide_by_2_mod_180_v1 on J, A, K, L, K, J we get angle(J, A, K) == angle(L, K, J) mod 360
By divide_by_2_mod_180_v2 on B, M, L, M, J, G we get angle(B, M, L) == angle(M, J, G) + 180 mod 360
By divide_by_2_mod_180_v0 on A, L, F, A, J, F we get angle(A, J, F) == angle(A, L, F) mod 360
By divide_by_2_mod_180_v0 on B, J, K, M, K, B we get angle(B, J, K) == angle(M, K, B) mod 360
By divide_by_2_mod_180_v0 on B, F, L, M, G, J we get angle(B, F, L) == angle(M, G, J) mod 360
By divide_by_2_mod_180_v0 on J, B, T, K, M, J we get angle(J, B, T) == angle(K, M, J) mod 360
By divide_by_2_mod_180_v2 on C, M, F, B, J, A we get angle(C, M, F) == angle(B, J, A) + 180 mod 360
By divide_by_2_mod_180_v1 on F, J, A, B, M, F we get angle(B, M, F) == angle(F, J, A) mod 360
By divide_by_2_mod_180_v0 on M, J, F, M, K, B we get angle(M, J, F) == angle(M, K, B) mod 360
By divide_by_2_mod_180_v1 on B, J, A, M, K, L we get angle(B, J, A) == angle(M, K, L) mod 360
By divide_by_2_mod_180_v1 on F, L, C, C, J, L we get angle(C, J, L) == angle(F, L, C) mod 360
By divide_by_2_mod_180_v0 on M, C, J, F, L, J we get angle(F, L, J) == angle(M, C, J) mod 360
By divide_by_2_mod_180_v1 on B, J, M, A, J, G we get angle(A, J, G) == angle(B, J, M) mod 360
By divide_by_2_mod_180_v0 on G, J, A, F, L, K we get angle(F, L, K) == angle(G, J, A) mod 360
By divide_by_2_mod_180_v0 on B, F, M, M, G, J we get angle(B, F, M) == angle(M, G, J) mod 360
By divide_by_2_mod_180_v1 on L, M, J, J, C, S we get angle(J, C, S) == angle(L, M, J) mod 360
By divide_by_2_mod_180_v0 on A, J, F, C, J, M we get angle(A, J, F) == angle(C, J, M) mod 360
By divide_by_2_mod_180_v0 on A, J, F, G, J, M we get angle(A, J, F) == angle(G, J, M) mod 360
By divide_by_2_mod_180_v0 on J, A, L, J, F, L we get angle(J, A, L) == angle(J, F, L) mod 360
By divide_by_2_mod_180_v0 on B, J, K, G, J, A we get angle(B, J, K) == angle(G, J, A) mod 360
By divide_by_2_mod_180_v0 on J, K, L, J, F, M we get angle(J, F, M) == angle(J, K, L) mod 360
By divide_by_2_mod_180_v2 on C, J, A, B, M, G we get angle(C, J, A) == angle(B, M, G) + 180 mod 360
By divide_by_2_mod_180_v0 on K, A, J, J, F, M we get angle(J, F, M) == angle(K, A, J) mod 360
By divide_by_2_mod_180_v0 on J, F, M, K, L, J we get angle(J, F, M) == angle(K, L, J) mod 360
By divide_by_2_mod_180_v1 on L, F, J, C, G, K we get angle(C, G, K) == angle(L, F, J) mod 360
By divide_by_2_mod_180_v1 on G, M, L, A, J, L we get angle(A, J, L) == angle(G, M, L) mod 360
By divide_by_2_mod_180_v1 on K, L, M, K, J, B we get angle(K, J, B) == angle(K, L, M) mod 360
By divide_by_2_mod_180_v2 on C, J, M, F, M, T we get angle(C, J, M) == angle(F, M, T) + 180 mod 360
By divide_by_2_mod_180_v0 on J, C, T, F, M, J we get angle(F, M, J) == angle(J, C, T) mod 360
By divide_by_2_mod_180_v0 on M, G, J, J, F, M we get angle(J, F, M) == angle(M, G, J) mod 360
By divide_by_2_mod_180_v0 on M, G, J, K, L, J we get angle(K, L, J) == angle(M, G, J) mod 360
By divide_by_2_mod_180_v0 on J, K, M, F, B, S we get angle(F, B, S) == angle(J, K, M) mod 360
By divide_by_2_mod_180_v1 on M, K, J, C, B, J we get angle(C, B, J) == angle(M, K, J) mod 360
By divide_by_2_mod_180_v0 on J, B, C, J, K, M we get angle(J, B, C) == angle(J, K, M) mod 360
By divide_by_2_mod_180_v0 on B, A, J, K, G, C we get angle(B, A, J) == angle(K, G, C) mod 360
By divide_by_2_mod_180_v0 on J, A, C, M, G, C we get angle(J, A, C) == angle(M, G, C) mod 360
By divide_by_2_mod_180_v2 on C, J, B, L, M, K we get angle(C, J, B) == angle(L, M, K) + 180 mod 360
By divide_by_2_mod_180_v3 on B, J, C, G, M, F we get angle(B, J, C) == angle(G, M, F) + 180 mod 360
By divide_by_2_mod_180_v1 on L, K, J, M, F, B we get angle(L, K, J) == angle(M, F, B) mod 360
By divide_by_2_mod_180_v3 on M, J, G, C, M, F we get angle(M, J, G) == angle(C, M, F) + 180 mod 360
By divide_by_2_mod_180_v1 on A, J, G, F, J, M we get angle(A, J, G) == angle(F, J, M) mod 360
By divide_by_2_mod_180_v0 on K, G, C, J, F, L we get angle(J, F, L) == angle(K, G, C) mod 360
By divide_by_2_mod_180_v3 on L, M, B, G, J, M we get angle(L, M, B) == angle(G, J, M) + 180 mod 360
By divide_by_2_mod_180_v1 on L, F, J, L, K, J we get angle(L, F, J) == angle(L, K, J) mod 360
By divide_by_2_mod_180_v1 on G, K, L, M, J, C we get angle(G, K, L) == angle(M, J, C) mod 360
By divide_by_2_mod_180_v1 on F, J, G, A, K, L we get angle(A, K, L) == angle(F, J, G) mod 360
By divide_by_2_mod_180_v3 on K, B, F, K, M, J we get angle(K, B, F) == angle(K, M, J) + 180 mod 360
By divide_by_2_mod_180_v0 on K, A, J, J, K, L we get angle(J, K, L) == angle(K, A, J) mod 360
By divide_by_2_mod_180_v3 on M, C, G, M, L, J we get angle(M, C, G) == angle(M, L, J) + 180 mod 360
By divide_by_2_mod_180_v0 on M, J, B, M, L, K we get angle(M, J, B) == angle(M, L, K) mod 360
By divide_by_2_mod_180_v1 on B, M, F, M, J, G we get angle(B, M, F) == angle(M, J, G) mod 360
By divide_by_2_mod_180_v0 on L, M, C, A, J, F we get angle(A, J, F) == angle(L, M, C) mod 360
By divide_by_2_mod_180_v2 on T, B, F, M, K, J we get angle(T, B, F) == angle(M, K, J) + 180 mod 360
By divide_by_2_mod_180_v0 on C, L, F, L, J, C we get angle(C, L, F) == angle(L, J, C) mod 360
By divide_by_2_mod_180_v1 on J, G, K, C, A, J we get angle(C, A, J) == angle(J, G, K) mod 360
By divide_by_2_mod_180_v3 on L, M, S, L, J, G we get angle(L, M, S) == angle(L, J, G) + 180 mod 360
By divide_by_2_mod_180_v2 on K, M, T, A, J, C we get angle(K, M, T) == angle(A, J, C) + 180 mod 360
By divide_by_2_mod_180_v1 on M, J, C, F, J, A we get angle(F, J, A) == angle(M, J, C) mod 360
By divide_by_2_mod_180_v1 on B, J, A, M, J, G we get angle(B, J, A) == angle(M, J, G) mod 360
By divide_by_2_mod_180_v3 on K, J, B, G, M, B we get angle(K, J, B) == angle(G, M, B) + 180 mod 360
By divide_by_2_mod_180_v2 on C, B, F, G, K, J we get angle(C, B, F) == angle(G, K, J) + 180 mod 360
By divide_by_2_mod_180_v3 on T, M, K, M, J, F we get angle(T, M, K) == angle(M, J, F) + 180 mod 360
By divide_by_2_mod_180_v2 on J, K, G, F, B, T we get angle(J, K, G) == angle(F, B, T) + 180 mod 360
By divide_by_2_mod_180_v1 on J, L, K, M, F, J we get angle(J, L, K) == angle(M, F, J) mod 360
By divide_by_2_mod_180_v0 on M, K, B, M, J, B we get angle(M, J, B) == angle(M, K, B) mod 360
By divide_by_2_mod_180_v0 on B, C, J, M, L, J we get angle(B, C, J) == angle(M, L, J) mod 360
By divide_by_2_mod_180_v0 on F, M, K, L, J, A we get angle(F, M, K) == angle(L, J, A) mod 360
By divide_by_2_mod_180_v2 on K, M, C, A, J, G we get angle(K, M, C) == angle(A, J, G) + 180 mod 360
By divide_by_2_mod_180_v0 on C, L, F, A, J, F we get angle(A, J, F) == angle(C, L, F) mod 360
By divide_by_2_mod_180_v1 on J, G, K, J, L, K we get angle(J, G, K) == angle(J, L, K) mod 360
By divide_by_2_mod_180_v3 on T, M, K, C, J, A we get angle(T, M, K) == angle(C, J, A) + 180 mod 360
By divide_by_2_mod_180_v0 on M, G, C, B, F, M we get angle(B, F, M) == angle(M, G, C) mod 360
By divide_by_2_mod_180_v1 on G, K, J, C, B, J we get angle(C, B, J) == angle(G, K, J) mod 360
By divide_by_2_mod_180_v3 on S, C, G, M, L, J we get angle(S, C, G) == angle(M, L, J) + 180 mod 360
By divide_by_2_mod_180_v3 on F, M, G, G, J, F we get angle(F, M, G) == angle(G, J, F) + 180 mod 360
By divide_by_2_mod_180_v3 on J, C, A, J, M, L we get angle(J, C, A) == angle(J, M, L) + 180 mod 360
By divide_by_2_mod_180_v2 on K, M, T, F, J, M we get angle(K, M, T) == angle(F, J, M) + 180 mod 360
By divide_by_2_mod_180_v1 on J, A, B, J, L, K we get angle(J, A, B) == angle(J, L, K) mod 360
By divide_by_2_mod_180_v1 on B, J, G, K, L, A we get angle(B, J, G) == angle(K, L, A) mod 360
By divide_by_2_mod_180_v0 on M, J, F, G, K, A we get angle(G, K, A) == angle(M, J, F) mod 360
By divide_by_2_mod_180_v1 on B, J, A, M, L, A we get angle(B, J, A) == angle(M, L, A) mod 360
By divide_by_2_mod_180_v0 on C, L, M, L, J, G we get angle(C, L, M) == angle(L, J, G) mod 360
By divide_by_2_mod_180_v1 on J, G, M, J, A, K we get angle(J, A, K) == angle(J, G, M) mod 360
By divide_by_2_mod_180_v2 on M, L, J, S, C, G we get angle(M, L, J) == angle(S, C, G) + 180 mod 360
By divide_by_2_mod_180_v2 on L, C, G, J, L, F we get angle(L, C, G) == angle(J, L, F) + 180 mod 360
By divide_by_2_mod_180_v0 on K, L, J, J, F, L we get angle(J, F, L) == angle(K, L, J) mod 360
By divide_by_2_mod_180_v0 on J, B, A, J, M, G we get angle(J, B, A) == angle(J, M, G) mod 360
By divide_by_2_mod_180_v3 on G, J, L, T, M, F we get angle(G, J, L) == angle(T, M, F) + 180 mod 360
By divide_by_2_mod_180_v1 on M, L, C, G, J, L we get angle(G, J, L) == angle(M, L, C) mod 360
By divide_by_2_mod_180_v1 on A, K, M, F, J, M we get angle(A, K, M) == angle(F, J, M) mod 360
By divide_by_2_mod_180_v1 on M, J, G, F, L, C we get angle(F, L, C) == angle(M, J, G) mod 360
By divide_by_2_mod_180_v1 on G, M, J, J, B, S we get angle(G, M, J) == angle(J, B, S) mod 360
By divide_by_2_mod_180_v2 on A, B, F, G, M, J we get angle(A, B, F) == angle(G, M, J) + 180 mod 360
By divide_by_2_mod_180_v1 on M, F, B, J, A, B we get angle(J, A, B) == angle(M, F, B) mod 360
By divide_by_2_mod_180_v3 on C, J, L, B, M, L we get angle(C, J, L) == angle(B, M, L) + 180 mod 360
By divide_by_2_mod_180_v3 on C, J, L, S, M, L we get angle(C, J, L) == angle(S, M, L) + 180 mod 360
By divide_by_2_mod_180_v3 on G, K, J, J, B, A we get angle(G, K, J) == angle(J, B, A) + 180 mod 360
By divide_by_2_mod_180_v1 on A, K, M, K, J, F we get angle(A, K, M) == angle(K, J, F) mod 360
By divide_by_2_mod_180_v3 on F, M, C, L, J, G we get angle(F, M, C) == angle(L, J, G) + 180 mod 360
By divide_by_2_mod_180_v1 on L, C, J, L, M, J we get angle(L, C, J) == angle(L, M, J) mod 360
By divide_by_2_mod_180_v0 on A, J, F, F, M, B we get angle(A, J, F) == angle(F, M, B) mod 360
By divide_by_2_mod_180_v0 on A, J, F, A, L, M we get angle(A, J, F) == angle(A, L, M) mod 360
By divide_by_2_mod_180_v0 on A, J, B, L, K, G we get angle(A, J, B) == angle(L, K, G) mod 360
By divide_by_2_mod_180_v1 on B, J, C, B, K, L we get angle(B, J, C) == angle(B, K, L) mod 360
By divide_by_2_mod_180_v2 on F, M, J, L, C, J we get angle(F, M, J) == angle(L, C, J) + 180 mod 360
By divide_by_2_mod_180_v2 on K, M, C, K, J, B we get angle(K, M, C) == angle(K, J, B) + 180 mod 360
By divide_by_2_mod_180_v0 on B, A, J, M, G, J we get angle(B, A, J) == angle(M, G, J) mod 360
By divide_by_2_mod_180_v0 on A, J, B, F, M, B we get angle(A, J, B) == angle(F, M, B) mod 360
By divide_by_2_mod_180_v1 on K, L, A, A, J, L we get angle(A, J, L) == angle(K, L, A) mod 360
By divide_by_2_mod_180_v0 on M, G, C, J, F, M we get angle(J, F, M) == angle(M, G, C) mod 360
By divide_by_2_mod_180_v1 on K, M, F, F, J, C we get angle(F, J, C) == angle(K, M, F) mod 360
By divide_by_2_mod_180_v0 on F, M, K, C, J, F we get angle(C, J, F) == angle(F, M, K) mod 360
By divide_by_2_mod_180_v2 on F, L, J, B, C, G we get angle(F, L, J) == angle(B, C, G) + 180 mod 360
By divide_by_2_mod_180_v2 on K, M, J, F, B, C we get angle(K, M, J) == angle(F, B, C) + 180 mod 360
By divide_by_2_mod_180_v0 on M, J, B, G, K, B we get angle(G, K, B) == angle(M, J, B) mod 360
By divide_by_2_mod_180_v1 on M, J, C, F, L, C we get angle(F, L, C) == angle(M, J, C) mod 360
By divide_by_2_mod_180_v3 on M, C, G, F, L, J we get angle(M, C, G) == angle(F, L, J) + 180 mod 360
By divide_by_2_mod_180_v3 on F, J, A, C, M, F we get angle(F, J, A) == angle(C, M, F) + 180 mod 360
By divide_by_2_mod_180_v1 on J, L, F, A, C, G we get angle(A, C, G) == angle(J, L, F) mod 360
By divide_by_2_mod_180_v0 on J, F, L, B, A, J we get angle(B, A, J) == angle(J, F, L) mod 360
By divide_by_2_mod_180_v0 on F, B, S, K, M, J we get angle(F, B, S) == angle(K, M, J) mod 360
By divide_by_2_mod_180_v1 on F, L, A, G, J, L we get angle(F, L, A) == angle(G, J, L) mod 360
By divide_by_2_mod_180_v1 on K, J, B, A, K, M we get angle(A, K, M) == angle(K, J, B) mod 360
By divide_by_2_mod_180_v1 on G, J, L, F, L, C we get angle(F, L, C) == angle(G, J, L) mod 360
By divide_by_2_mod_180_v0 on J, K, L, J, A, C we get angle(J, A, C) == angle(J, K, L) mod 360
By divide_by_2_mod_180_v2 on C, J, M, L, M, B we get angle(C, J, M) == angle(L, M, B) + 180 mod 360
By divide_by_2_mod_180_v0 on G, J, F, A, L, K we get angle(A, L, K) == angle(G, J, F) mod 360
By divide_by_2_mod_180_v1 on F, J, G, K, L, A we get angle(F, J, G) == angle(K, L, A) mod 360
By divide_by_2_mod_180_v0 on A, J, F, L, K, M we get angle(A, J, F) == angle(L, K, M) mod 360
By divide_by_2_mod_180_v1 on B, J, A, C, J, L we get angle(B, J, A) == angle(C, J, L) mod 360
By divide_by_2_mod_180_v0 on C, L, M, L, J, C we get angle(C, L, M) == angle(L, J, C) mod 360
By divide_by_2_mod_180_v1 on F, J, A, S, M, F we get angle(F, J, A) == angle(S, M, F) mod 360
By divide_by_2_mod_180_v1 on F, J, A, F, L, A we get angle(F, J, A) == angle(F, L, A) mod 360
By divide_by_2_mod_180_v0 on L, J, C, A, J, F we get angle(A, J, F) == angle(L, J, C) mod 360
By divide_by_2_mod_180_v3 on T, B, J, J, M, G we get angle(T, B, J) == angle(J, M, G) + 180 mod 360
By divide_by_2_mod_180_v1 on B, K, G, F, J, M we get angle(B, K, G) == angle(F, J, M) mod 360
By divide_by_2_mod_180_v1 on L, A, J, L, K, J we get angle(L, A, J) == angle(L, K, J) mod 360
By divide_by_2_mod_180_v1 on J, M, F, J, C, A we get angle(J, C, A) == angle(J, M, F) mod 360
By divide_by_2_mod_180_v0 on J, K, M, J, B, M we get angle(J, B, M) == angle(J, K, M) mod 360
By divide_by_2_mod_180_v1 on S, M, F, M, J, C we get angle(M, J, C) == angle(S, M, F) mod 360
By divide_by_2_mod_180_v2 on F, M, J, A, C, G we get angle(F, M, J) == angle(A, C, G) + 180 mod 360
By divide_by_2_mod_180_v0 on M, J, B, S, M, K we get angle(M, J, B) == angle(S, M, K) mod 360
By divide_by_2_mod_180_v0 on J, M, L, S, C, J we get angle(J, M, L) == angle(S, C, J) mod 360
By divide_by_2_mod_180_v3 on F, B, M, K, M, J we get angle(F, B, M) == angle(K, M, J) + 180 mod 360
By divide_by_2_mod_180_v1 on C, A, J, L, F, B we get angle(C, A, J) == angle(L, F, B) mod 360
By divide_by_2_mod_180_v2 on B, J, K, S, M, G we get angle(B, J, K) == angle(S, M, G) + 180 mod 360
By divide_by_2_mod_180_v3 on C, B, J, J, M, G we get angle(C, B, J) == angle(J, M, G) + 180 mod 360
By divide_by_2_mod_180_v1 on B, K, M, B, J, M we get angle(B, J, M) == angle(B, K, M) mod 360
By divide_by_2_mod_180_v1 on G, M, J, A, B, J we get angle(A, B, J) == angle(G, M, J) mod 360
By divide_by_2_mod_180_v3 on M, J, G, T, M, F we get angle(M, J, G) == angle(T, M, F) + 180 mod 360
By divide_by_2_mod_180_v0 on C, M, G, C, J, A we get angle(C, J, A) == angle(C, M, G) mod 360
By divide_by_2_mod_180_v3 on M, J, G, S, M, L we get angle(M, J, G) == angle(S, M, L) + 180 mod 360
By divide_by_2_mod_180_v0 on F, J, K, F, L, K we get angle(F, J, K) == angle(F, L, K) mod 360
By divide_by_2_mod_180_v0 on L, J, G, L, M, T we get angle(L, J, G) == angle(L, M, T) mod 360
By divide_by_2_mod_180_v2 on L, J, A, L, M, K we get angle(L, J, A) == angle(L, M, K) + 180 mod 360
By divide_by_2_mod_180_v0 on K, A, J, J, F, L we get angle(J, F, L) == angle(K, A, J) mod 360
By divide_by_2_mod_180_v0 on M, B, F, J, M, G we get angle(J, M, G) == angle(M, B, F) mod 360
By divide_by_2_mod_180_v1 on J, M, F, G, C, L we get angle(G, C, L) == angle(J, M, F) mod 360
By divide_by_2_mod_180_v1 on K, L, F, K, J, F we get angle(K, J, F) == angle(K, L, F) mod 360
By divide_by_2_mod_180_v0 on J, F, M, J, A, C we get angle(J, A, C) == angle(J, F, M) mod 360
By divide_by_2_mod_180_v0 on C, J, B, A, J, K we get angle(A, J, K) == angle(C, J, B) mod 360
By divide_by_2_mod_180_v3 on G, C, L, M, L, J we get angle(G, C, L) == angle(M, L, J) + 180 mod 360
By divide_by_2_mod_180_v0 on B, C, J, F, L, J we get angle(B, C, J) == angle(F, L, J) mod 360
By divide_by_2_mod_180_v1 on K, L, C, B, J, C we get angle(B, J, C) == angle(K, L, C) mod 360
By divide_by_2_mod_180_v0 on C, J, M, L, K, G we get angle(C, J, M) == angle(L, K, G) mod 360
By divide_by_2_mod_180_v3 on T, M, K, M, J, B we get angle(T, M, K) == angle(M, J, B) + 180 mod 360
By divide_by_2_mod_180_v0 on K, B, J, J, K, M we get angle(J, K, M) == angle(K, B, J) mod 360
By divide_by_2_mod_180_v0 on A, J, K, G, J, F we get angle(A, J, K) == angle(G, J, F) mod 360
By divide_by_2_mod_180_v0 on K, B, J, K, M, J we get angle(K, B, J) == angle(K, M, J) mod 360
By divide_by_2_mod_180_v0 on A, J, B, L, J, G we get angle(A, J, B) == angle(L, J, G) mod 360
By divide_by_2_mod_180_v2 on L, J, G, L, M, S we get angle(L, J, G) == angle(L, M, S) + 180 mod 360
By divide_by_2_mod_180_v1 on A, K, G, A, J, G we get angle(A, J, G) == angle(A, K, G) mod 360
By divide_by_2_mod_180_v3 on J, M, F, B, C, J we get angle(J, M, F) == angle(B, C, J) + 180 mod 360
By divide_by_2_mod_180_v3 on K, B, F, J, K, G we get angle(K, B, F) == angle(J, K, G) + 180 mod 360
By divide_by_2_mod_180_v2 on F, L, J, S, C, G we get angle(F, L, J) == angle(S, C, G) + 180 mod 360
By divide_by_2_mod_180_v0 on K, G, J, J, A, L we get angle(J, A, L) == angle(K, G, J) mod 360
By divide_by_2_mod_180_v1 on G, K, J, J, B, K we get angle(G, K, J) == angle(J, B, K) mod 360
By divide_by_2_mod_180_v0 on M, G, C, K, A, J we get angle(K, A, J) == angle(M, G, C) mod 360
By divide_by_2_mod_180_v1 on C, A, J, C, G, K we get angle(C, A, J) == angle(C, G, K) mod 360
By divide_by_2_mod_180_v0 on G, J, B, L, M, G we get angle(G, J, B) == angle(L, M, G) mod 360
By divide_by_2_mod_180_v3 on A, J, G, K, M, T we get angle(A, J, G) == angle(K, M, T) + 180 mod 360
By divide_by_2_mod_180_v0 on C, J, M, L, M, T we get angle(C, J, M) == angle(L, M, T) mod 360
By divide_by_2_mod_180_v1 on M, F, B, J, L, K we get angle(J, L, K) == angle(M, F, B) mod 360
By divide_by_2_mod_180_v1 on J, A, B, C, G, M we get angle(C, G, M) == angle(J, A, B) mod 360
By divide_by_2_mod_180_v0 on G, J, A, M, J, B we get angle(G, J, A) == angle(M, J, B) mod 360
By divide_by_2_mod_180_v0 on L, J, C, A, L, F we get angle(A, L, F) == angle(L, J, C) mod 360
By divide_by_2_mod_180_v0 on C, M, G, G, J, A we get angle(C, M, G) == angle(G, J, A) mod 360
By divide_by_2_mod_180_v1 on M, K, J, J, B, K we get angle(J, B, K) == angle(M, K, J) mod 360
By divide_by_2_mod_180_v2 on S, B, J, G, K, J we get angle(S, B, J) == angle(G, K, J) + 180 mod 360
By divide_by_2_mod_180_v0 on A, J, K, L, M, G we get angle(A, J, K) == angle(L, M, G) mod 360
By divide_by_2_mod_180_v1 on C, G, M, C, A, J we get angle(C, A, J) == angle(C, G, M) mod 360
By divide_by_2_mod_180_v0 on M, J, F, T, M, G we get angle(M, J, F) == angle(T, M, G) mod 360
By divide_by_2_mod_180_v1 on G, M, T, K, J, F we get angle(G, M, T) == angle(K, J, F) mod 360
By divide_by_2_mod_180_v3 on F, M, C, G, J, M we get angle(F, M, C) == angle(G, J, M) + 180 mod 360
By divide_by_2_mod_180_v3 on M, J, C, T, M, F we get angle(M, J, C) == angle(T, M, F) + 180 mod 360
By divide_by_2_mod_180_v0 on L, J, G, L, K, G we get angle(L, J, G) == angle(L, K, G) mod 360
By divide_by_2_mod_180_v1 on F, J, A, T, M, L we get angle(F, J, A) == angle(T, M, L) mod 360
By divide_by_2_mod_180_v1 on B, J, A, S, M, F we get angle(B, J, A) == angle(S, M, F) mod 360
By divide_by_2_mod_180_v3 on J, L, M, G, C, B we get angle(J, L, M) == angle(G, C, B) + 180 mod 360
By divide_by_2_mod_180_v1 on C, M, L, B, J, A we get angle(B, J, A) == angle(C, M, L) mod 360
By divide_by_2_mod_180_v3 on F, B, T, J, K, M we get angle(F, B, T) == angle(J, K, M) + 180 mod 360
By divide_by_2_mod_180_v0 on M, G, J, J, A, C we get angle(J, A, C) == angle(M, G, J) mod 360
By divide_by_2_mod_180_v3 on G, K, J, T, B, F we get angle(G, K, J) == angle(T, B, F) + 180 mod 360
By divide_by_2_mod_180_v2 on G, M, S, A, J, C we get angle(G, M, S) == angle(A, J, C) + 180 mod 360
By divide_by_2_mod_180_v0 on A, J, B, C, L, M we get angle(A, J, B) == angle(C, L, M) mod 360
By divide_by_2_mod_180_v1 on M, K, L, F, J, A we get angle(F, J, A) == angle(M, K, L) mod 360
By divide_by_2_mod_180_v3 on A, J, G, K, M, C we get angle(A, J, G) == angle(K, M, C) + 180 mod 360
By divide_by_2_mod_180_v0 on A, L, F, C, J, M we get angle(A, L, F) == angle(C, J, M) mod 360
By divide_by_2_mod_180_v3 on T, C, J, J, M, L we get angle(T, C, J) == angle(J, M, L) + 180 mod 360
By divide_by_2_mod_180_v3 on L, M, B, A, J, F we get angle(L, M, B) == angle(A, J, F) + 180 mod 360
By divide_by_2_mod_180_v1 on B, J, C, K, M, F we get angle(B, J, C) == angle(K, M, F) mod 360
By divide_by_2_mod_180_v2 on F, L, J, J, C, A we get angle(F, L, J) == angle(J, C, A) + 180 mod 360
By divide_by_2_mod_180_v1 on M, J, C, B, J, A we get angle(B, J, A) == angle(M, J, C) mod 360
By divide_by_2_mod_180_v3 on L, M, S, C, J, M we get angle(L, M, S) == angle(C, J, M) + 180 mod 360
By divide_by_2_mod_180_v0 on B, F, L, K, L, J we get angle(B, F, L) == angle(K, L, J) mod 360
By divide_by_2_mod_180_v2 on L, J, G, F, M, C we get angle(L, J, G) == angle(F, M, C) + 180 mod 360
By divide_by_2_mod_180_v1 on L, F, B, J, L, K we get angle(J, L, K) == angle(L, F, B) mod 360
By divide_by_2_mod_180_v1 on K, J, F, A, J, C we get angle(A, J, C) == angle(K, J, F) mod 360
By divide_by_2_mod_180_v2 on K, M, T, A, J, G we get angle(K, M, T) == angle(A, J, G) + 180 mod 360
By divide_by_2_mod_180_v0 on L, M, T, L, J, C we get angle(L, J, C) == angle(L, M, T) mod 360
By divide_by_2_mod_180_v2 on T, M, F, B, J, A we get angle(T, M, F) == angle(B, J, A) + 180 mod 360
By divide_by_2_mod_180_v0 on A, J, K, C, L, K we get angle(A, J, K) == angle(C, L, K) mod 360
By divide_by_2_mod_180_v0 on M, G, C, B, F, L we get angle(B, F, L) == angle(M, G, C) mod 360
By divide_by_2_mod_180_v1 on K, M, S, K, J, B we get angle(K, J, B) == angle(K, M, S) mod 360
By divide_by_2_mod_180_v1 on J, B, K, J, M, K we get angle(J, B, K) == angle(J, M, K) mod 360
By divide_by_2_mod_180_v3 on C, M, K, M, J, B we get angle(C, M, K) == angle(M, J, B) + 180 mod 360
By divide_by_2_mod_180_v1 on K, L, C, B, J, G we get angle(B, J, G) == angle(K, L, C) mod 360
By divide_by_2_mod_180_v1 on J, M, F, B, C, G we get angle(B, C, G) == angle(J, M, F) mod 360
By divide_by_2_mod_180_v3 on F, M, C, L, J, C we get angle(F, M, C) == angle(L, J, C) + 180 mod 360
By divide_by_2_mod_180_v3 on L, M, J, G, C, B we get angle(L, M, J) == angle(G, C, B) + 180 mod 360
By divide_by_2_mod_180_v1 on A, J, C, G, M, T we get angle(A, J, C) == angle(G, M, T) mod 360
By divide_by_2_mod_180_v0 on K, G, C, J, K, L we get angle(J, K, L) == angle(K, G, C) mod 360
By divide_by_2_mod_180_v0 on J, A, L, K, L, J we get angle(J, A, L) == angle(K, L, J) mod 360
By divide_by_2_mod_180_v0 on T, C, G, M, L, J we get angle(M, L, J) == angle(T, C, G) mod 360
By divide_by_2_mod_180_v0 on A, J, B, C, J, M we get angle(A, J, B) == angle(C, J, M) mod 360
By divide_by_2_mod_180_v2 on K, M, T, B, J, M we get angle(K, M, T) == angle(B, J, M) + 180 mod 360
By divide_by_2_mod_180_v3 on J, M, K, C, B, F we get angle(J, M, K) == angle(C, B, F) + 180 mod 360
By divide_by_2_mod_180_v1 on J, L, M, J, C, M we get angle(J, C, M) == angle(J, L, M) mod 360
By divide_by_2_mod_180_v1 on J, G, M, M, F, J we get angle(J, G, M) == angle(M, F, J) mod 360
By divide_by_2_mod_180_v0 on G, K, B, B, J, K we get angle(B, J, K) == angle(G, K, B) mod 360
By divide_by_2_mod_180_v1 on J, M, K, T, B, J we get angle(J, M, K) == angle(T, B, J) mod 360
By divide_by_2_mod_180_v3 on F, B, C, K, M, J we get angle(F, B, C) == angle(K, M, J) + 180 mod 360
By divide_by_2_mod_180_v1 on F, J, A, C, M, L we get angle(C, M, L) == angle(F, J, A) mod 360
By divide_by_2_mod_180_v2 on G, J, A, S, M, G we get angle(G, J, A) == angle(S, M, G) + 180 mod 360
By divide_by_2_mod_180_v2 on S, M, L, M, J, G we get angle(S, M, L) == angle(M, J, G) + 180 mod 360
By divide_by_2_mod_180_v2 on L, J, C, L, M, S we get angle(L, J, C) == angle(L, M, S) + 180 mod 360
By divide_by_2_mod_180_v0 on L, M, C, C, J, M we get angle(C, J, M) == angle(L, M, C) mod 360
By divide_by_2_mod_180_v1 on B, J, M, K, L, M we get angle(B, J, M) == angle(K, L, M) mod 360
By divide_by_2_mod_180_v3 on J, C, M, F, M, J we get angle(J, C, M) == angle(F, M, J) + 180 mod 360
By divide_by_2_mod_180_v3 on J, M, K, J, B, A we get angle(J, M, K) == angle(J, B, A) + 180 mod 360
By divide_by_2_mod_180_v1 on C, J, L, T, M, L we get angle(C, J, L) == angle(T, M, L) mod 360
By divide_by_2_mod_180_v0 on L, J, G, A, L, F we get angle(A, L, F) == angle(L, J, G) mod 360
By divide_by_2_mod_180_v0 on T, B, F, J, M, G we get angle(J, M, G) == angle(T, B, F) mod 360
By divide_by_2_mod_180_v2 on B, M, L, G, J, L we get angle(B, M, L) == angle(G, J, L) + 180 mod 360
By divide_by_2_mod_180_v1 on B, J, C, K, J, A we get angle(B, J, C) == angle(K, J, A) mod 360
By divide_by_2_mod_180_v2 on J, K, M, F, B, C we get angle(J, K, M) == angle(F, B, C) + 180 mod 360
By divide_by_2_mod_180_v1 on J, M, K, F, B, A we get angle(F, B, A) == angle(J, M, K) mod 360
By divide_by_2_mod_180_v2 on M, L, J, B, C, G we get angle(M, L, J) == angle(B, C, G) + 180 mod 360
By divide_by_2_mod_180_v2 on A, J, B, L, M, S we get angle(A, J, B) == angle(L, M, S) + 180 mod 360
By divide_by_2_mod_180_v2 on M, B, F, G, K, J we get angle(M, B, F) == angle(G, K, J) + 180 mod 360
By divide_by_2_mod_180_v2 on J, M, G, S, B, F we get angle(J, M, G) == angle(S, B, F) + 180 mod 360
By divide_by_2_mod_180_v0 on K, L, J, M, G, C we get angle(K, L, J) == angle(M, G, C) mod 360
By divide_by_2_mod_180_v0 on C, M, G, M, J, B we get angle(C, M, G) == angle(M, J, B) mod 360
By divide_by_2_mod_180_v1 on M, F, B, C, A, J we get angle(C, A, J) == angle(M, F, B) mod 360
By divide_by_2_mod_180_v1 on B, J, G, B, K, L we get angle(B, J, G) == angle(B, K, L) mod 360
By divide_by_2_mod_180_v0 on F, M, J, G, C, S we get angle(F, M, J) == angle(G, C, S) mod 360
By divide_by_2_mod_180_v1 on A, J, C, K, L, F we get angle(A, J, C) == angle(K, L, F) mod 360
By divide_by_2_mod_180_v0 on S, M, K, B, J, K we get angle(B, J, K) == angle(S, M, K) mod 360
By divide_by_2_mod_180_v1 on A, K, M, A, J, G we get angle(A, J, G) == angle(A, K, M) mod 360
By divide_by_2_mod_180_v3 on G, K, J, C, B, F we get angle(G, K, J) == angle(C, B, F) + 180 mod 360
By divide_by_2_mod_180_v0 on L, K, B, L, J, A we get angle(L, J, A) == angle(L, K, B) mod 360
By divide_by_2_mod_180_v1 on G, M, C, K, J, B we get angle(G, M, C) == angle(K, J, B) mod 360
By divide_by_2_mod_180_v0 on C, J, F, A, L, K we get angle(A, L, K) == angle(C, J, F) mod 360
By divide_by_2_mod_180_v0 on J, F, M, K, G, J we get angle(J, F, M) == angle(K, G, J) mod 360
By divide_by_2_mod_180_v1 on G, M, T, F, J, M we get angle(F, J, M) == angle(G, M, T) mod 360
By divide_by_2_mod_180_v1 on A, J, L, K, M, F we get angle(A, J, L) == angle(K, M, F) mod 360
By divide_by_2_mod_180_v0 on G, J, B, L, K, B we get angle(G, J, B) == angle(L, K, B) mod 360
By divide_by_2_mod_180_v1 on C, G, K, M, F, J we get angle(C, G, K) == angle(M, F, J) mod 360
By divide_by_2_mod_180_v0 on K, G, J, J, A, C we get angle(J, A, C) == angle(K, G, J) mod 360
By divide_by_2_mod_180_v0 on G, K, A, F, J, K we get angle(F, J, K) == angle(G, K, A) mod 360
By divide_by_2_mod_180_v3 on L, M, S, A, J, B we get angle(L, M, S) == angle(A, J, B) + 180 mod 360
By divide_by_2_mod_180_v1 on F, J, M, B, K, M we get angle(B, K, M) == angle(F, J, M) mod 360
By divide_by_2_mod_180_v1 on J, L, F, G, C, T we get angle(G, C, T) == angle(J, L, F) mod 360
By divide_by_2_mod_180_v2 on M, L, J, J, C, A we get angle(M, L, J) == angle(J, C, A) + 180 mod 360
By divide_by_2_mod_180_v1 on L, A, J, L, F, B we get angle(L, A, J) == angle(L, F, B) mod 360
By divide_by_2_mod_180_v1 on M, F, B, J, G, M we get angle(J, G, M) == angle(M, F, B) mod 360
By divide_by_2_mod_180_v0 on F, L, K, M, J, F we get angle(F, L, K) == angle(M, J, F) mod 360
By divide_by_2_mod_180_v1 on J, A, K, M, F, J we get angle(J, A, K) == angle(M, F, J) mod 360
By divide_by_2_mod_180_v2 on C, M, F, G, J, L we get angle(C, M, F) == angle(G, J, L) + 180 mod 360
By divide_by_2_mod_180_v0 on G, K, B, M, J, F we get angle(G, K, B) == angle(M, J, F) mod 360
By divide_by_2_mod_180_v2 on F, M, J, J, C, M we get angle(F, M, J) == angle(J, C, M) + 180 mod 360
By divide_by_2_mod_180_v2 on K, M, J, F, B, T we get angle(K, M, J) == angle(F, B, T) + 180 mod 360
By divide_by_2_mod_180_v0 on J, K, L, B, F, L we get angle(B, F, L) == angle(J, K, L) mod 360
By divide_by_2_mod_180_v1 on M, J, C, F, L, A we get angle(F, L, A) == angle(M, J, C) mod 360
By divide_by_2_mod_180_v3 on J, L, M, G, C, S we get angle(J, L, M) == angle(G, C, S) + 180 mod 360
By divide_by_2_mod_180_v1 on K, L, C, F, J, C we get angle(F, J, C) == angle(K, L, C) mod 360
By divide_by_2_mod_180_v3 on B, J, A, C, M, F we get angle(B, J, A) == angle(C, M, F) + 180 mod 360
By divide_by_2_mod_180_v1 on A, J, C, B, J, M we get angle(A, J, C) == angle(B, J, M) mod 360
By divide_by_2_mod_180_v1 on F, J, C, A, K, L we get angle(A, K, L) == angle(F, J, C) mod 360
By divide_by_2_mod_180_v1 on A, J, G, K, L, M we get angle(A, J, G) == angle(K, L, M) mod 360
By divide_by_2_mod_180_v0 on C, J, A, G, K, B we get angle(C, J, A) == angle(G, K, B) mod 360
By divide_by_2_mod_180_v1 on L, K, J, C, A, J we get angle(C, A, J) == angle(L, K, J) mod 360
By divide_by_2_mod_180_v2 on B, M, L, F, J, A we get angle(B, M, L) == angle(F, J, A) + 180 mod 360
By divide_by_2_mod_180_v2 on J, B, A, G, K, J we get angle(J, B, A) == angle(G, K, J) + 180 mod 360
By divide_by_2_mod_180_v0 on A, J, B, A, L, M we get angle(A, J, B) == angle(A, L, M) mod 360
By divide_by_2_mod_180_v1 on K, M, F, B, J, G we get angle(B, J, G) == angle(K, M, F) mod 360
By divide_by_2_mod_180_v2 on J, M, G, M, B, J we get angle(J, M, G) == angle(M, B, J) + 180 mod 360
By divide_by_2_mod_180_v1 on M, F, J, J, A, B we get angle(J, A, B) == angle(M, F, J) mod 360
By divide_by_2_mod_180_v0 on L, K, M, L, J, G we get angle(L, J, G) == angle(L, K, M) mod 360
By divide_by_2_mod_180_v1 on G, K, J, S, B, F we get angle(G, K, J) == angle(S, B, F) mod 360
By divide_by_2_mod_180_v2 on L, C, G, L, M, J we get angle(L, C, G) == angle(L, M, J) + 180 mod 360
By divide_by_2_mod_180_v0 on K, M, J, A, B, F we get angle(A, B, F) == angle(K, M, J) mod 360
By divide_by_2_mod_180_v0 on M, C, J, M, L, J we get angle(M, C, J) == angle(M, L, J) mod 360
By divide_by_2_mod_180_v1 on B, J, M, K, L, F we get angle(B, J, M) == angle(K, L, F) mod 360
By divide_by_2_mod_180_v0 on J, F, L, M, G, C we get angle(J, F, L) == angle(M, G, C) mod 360
By divide_by_2_mod_180_v1 on J, L, M, A, C, G we get angle(A, C, G) == angle(J, L, M) mod 360
By divide_by_2_mod_180_v1 on L, F, B, J, A, K we get angle(J, A, K) == angle(L, F, B) mod 360
By divide_by_2_mod_180_v0 on G, J, B, L, K, A we get angle(G, J, B) == angle(L, K, A) mod 360
By divide_by_2_mod_180_v1 on A, K, G, K, J, F we get angle(A, K, G) == angle(K, J, F) mod 360
By divide_by_2_mod_180_v0 on A, J, B, L, M, C we get angle(A, J, B) == angle(L, M, C) mod 360
By divide_by_2_mod_180_v1 on L, A, J, J, L, K we get angle(J, L, K) == angle(L, A, J) mod 360
By divide_by_2_mod_180_v0 on G, J, B, A, J, K we get angle(A, J, K) == angle(G, J, B) mod 360
By divide_by_2_mod_180_v1 on B, K, G, A, J, G we get angle(A, J, G) == angle(B, K, G) mod 360
By divide_by_2_mod_180_v3 on F, M, G, A, J, K we get angle(F, M, G) == angle(A, J, K) + 180 mod 360
By divide_by_2_mod_180_v0 on J, B, M, J, K, G we get angle(J, B, M) == angle(J, K, G) mod 360
By divide_by_2_mod_180_v0 on A, L, M, C, J, M we get angle(A, L, M) == angle(C, J, M) mod 360
By divide_by_2_mod_180_v2 on T, C, G, J, M, F we get angle(T, C, G) == angle(J, M, F) + 180 mod 360
By divide_by_2_mod_180_v1 on T, C, J, J, M, F we get angle(J, M, F) == angle(T, C, J) mod 360
By divide_by_2_mod_180_v2 on B, M, L, B, J, A we get angle(B, M, L) == angle(B, J, A) + 180 mod 360
By divide_by_2_mod_180_v0 on K, G, J, B, A, J we get angle(B, A, J) == angle(K, G, J) mod 360
By divide_by_2_mod_180_v2 on K, M, T, K, J, B we get angle(K, M, T) == angle(K, J, B) + 180 mod 360
By divide_by_2_mod_180_v0 on J, C, L, F, L, J we get angle(F, L, J) == angle(J, C, L) mod 360
By divide_by_2_mod_180_v0 on B, F, M, B, A, J we get angle(B, A, J) == angle(B, F, M) mod 360
By divide_by_2_mod_180_v0 on A, J, F, C, L, M we get angle(A, J, F) == angle(C, L, M) mod 360
By divide_by_2_mod_180_v3 on F, M, T, G, J, M we get angle(F, M, T) == angle(G, J, M) + 180 mod 360
By divide_by_2_mod_180_v0 on A, L, F, G, J, M we get angle(A, L, F) == angle(G, J, M) mod 360
By divide_by_2_mod_180_v2 on B, J, K, C, M, K we get angle(B, J, K) == angle(C, M, K) + 180 mod 360
By divide_by_2_mod_180_v2 on K, M, L, B, J, C we get angle(K, M, L) == angle(B, J, C) + 180 mod 360
By divide_by_2_mod_180_v1 on K, J, F, A, J, G we get angle(A, J, G) == angle(K, J, F) mod 360
By divide_by_2_mod_180_v3 on F, M, T, C, J, M we get angle(F, M, T) == angle(C, J, M) + 180 mod 360
By divide_by_2_mod_180_v0 on L, M, G, L, J, A we get angle(L, J, A) == angle(L, M, G) mod 360
By divide_by_2_mod_180_v0 on T, M, G, M, J, B we get angle(M, J, B) == angle(T, M, G) mod 360
By divide_by_2_mod_180_v0 on K, A, J, K, G, J we get angle(K, A, J) == angle(K, G, J) mod 360
By divide_by_2_mod_180_v2 on J, M, G, T, B, J we get angle(J, M, G) == angle(T, B, J) + 180 mod 360
By divide_by_2_mod_180_v0 on F, J, K, C, J, A we get angle(C, J, A) == angle(F, J, K) mod 360
By divide_by_2_mod_180_v1 on S, M, F, G, J, L we get angle(G, J, L) == angle(S, M, F) mod 360
By divide_by_2_mod_180_v0 on B, J, K, M, L, K we get angle(B, J, K) == angle(M, L, K) mod 360
By divide_by_2_mod_180_v1 on F, J, A, G, K, L we get angle(F, J, A) == angle(G, K, L) mod 360
By divide_by_2_mod_180_v1 on M, L, A, G, J, L we get angle(G, J, L) == angle(M, L, A) mod 360
By divide_by_2_mod_180_v0 on A, J, K, L, K, B we get angle(A, J, K) == angle(L, K, B) mod 360
By divide_by_2_mod_180_v3 on S, M, G, G, J, A we get angle(S, M, G) == angle(G, J, A) + 180 mod 360
By divide_by_2_mod_180_v2 on G, C, M, L, M, J we get angle(G, C, M) == angle(L, M, J) + 180 mod 360
By divide_by_2_mod_180_v0 on L, J, A, L, K, A we get angle(L, J, A) == angle(L, K, A) mod 360
By divide_by_2_mod_180_v0 on G, J, B, A, L, K we get angle(A, L, K) == angle(G, J, B) mod 360
By divide_by_2_mod_180_v0 on L, K, M, L, J, C we get angle(L, J, C) == angle(L, K, M) mod 360
By divide_by_2_mod_180_v0 on M, J, B, G, K, A we get angle(G, K, A) == angle(M, J, B) mod 360
By divide_by_2_mod_180_v2 on A, J, K, F, M, G we get angle(A, J, K) == angle(F, M, G) + 180 mod 360
By divide_by_2_mod_180_v1 on C, G, M, L, K, J we get angle(C, G, M) == angle(L, K, J) mod 360
By divide_by_2_mod_180_v1 on F, L, A, M, J, G we get angle(F, L, A) == angle(M, J, G) mod 360
By divide_by_2_mod_180_v2 on G, M, F, B, J, G we get angle(G, M, F) == angle(B, J, G) + 180 mod 360
By divide_by_2_mod_180_v0 on G, J, A, G, K, A we get angle(G, J, A) == angle(G, K, A) mod 360
By divide_by_2_mod_180_v2 on J, M, G, J, B, K we get angle(J, M, G) == angle(J, B, K) + 180 mod 360
By divide_by_2_mod_180_v1 on J, L, M, G, C, T we get angle(G, C, T) == angle(J, L, M) mod 360
By divide_by_2_mod_180_v3 on K, B, F, J, K, M we get angle(K, B, F) == angle(J, K, M) + 180 mod 360
By divide_by_2_mod_180_v2 on F, M, J, J, C, B we get angle(F, M, J) == angle(J, C, B) + 180 mod 360
By divide_by_2_mod_180_v1 on F, B, C, G, M, J we get angle(F, B, C) == angle(G, M, J) mod 360
By divide_by_2_mod_180_v1 on F, L, C, B, J, A we get angle(B, J, A) == angle(F, L, C) mod 360
By divide_by_2_mod_180_v0 on J, A, L, M, G, C we get angle(J, A, L) == angle(M, G, C) mod 360
By divide_by_2_mod_180_v3 on F, J, C, G, M, F we get angle(F, J, C) == angle(G, M, F) + 180 mod 360
By divide_by_2_mod_180_v2 on F, L, J, G, C, L we get angle(F, L, J) == angle(G, C, L) + 180 mod 360
By divide_by_2_mod_180_v3 on G, J, L, S, M, L we get angle(G, J, L) == angle(S, M, L) + 180 mod 360
By divide_by_2_mod_180_v1 on M, J, C, C, M, L we get angle(C, M, L) == angle(M, J, C) mod 360
By divide_by_2_mod_180_v1 on B, K, M, A, J, C we get angle(A, J, C) == angle(B, K, M) mod 360
By divide_by_2_mod_180_v2 on J, K, M, F, B, M we get angle(J, K, M) == angle(F, B, M) + 180 mod 360
By divide_by_2_mod_180_v2 on K, M, L, B, J, G we get angle(K, M, L) == angle(B, J, G) + 180 mod 360
By divide_by_2_mod_180_v3 on C, M, K, C, J, A we get angle(C, M, K) == angle(C, J, A) + 180 mod 360
By divide_by_2_mod_180_v0 on B, J, K, C, J, A we get angle(B, J, K) == angle(C, J, A) mod 360
By divide_by_2_mod_180_v3 on F, J, M, G, M, B we get angle(F, J, M) == angle(G, M, B) + 180 mod 360
By divide_by_2_mod_180_v0 on J, M, L, B, C, J we get angle(B, C, J) == angle(J, M, L) mod 360
By divide_by_2_mod_180_v1 on C, J, L, S, M, F we get angle(C, J, L) == angle(S, M, F) mod 360
By divide_by_2_mod_180_v3 on L, M, S, G, J, M we get angle(L, M, S) == angle(G, J, M) + 180 mod 360
By divide_by_2_mod_180_v2 on M, L, J, G, C, L we get angle(M, L, J) == angle(G, C, L) + 180 mod 360
By divide_by_2_mod_180_v3 on F, M, C, C, J, M we get angle(F, M, C) == angle(C, J, M) + 180 mod 360
By divide_by_2_mod_180_v0 on J, B, T, J, K, M we get angle(J, B, T) == angle(J, K, M) mod 360
By divide_by_2_mod_180_v1 on M, K, J, S, B, F we get angle(M, K, J) == angle(S, B, F) mod 360
By divide_by_2_mod_180_v0 on T, M, G, G, J, A we get angle(G, J, A) == angle(T, M, G) mod 360
By divide_by_2_mod_180_v3 on F, M, T, L, J, C we get angle(F, M, T) == angle(L, J, C) + 180 mod 360
By divide_by_2_mod_180_v1 on B, M, F, M, J, C we get angle(B, M, F) == angle(M, J, C) mod 360
By divide_by_2_mod_180_v1 on A, J, L, B, J, C we get angle(A, J, L) == angle(B, J, C) mod 360
By divide_by_2_mod_180_v2 on G, J, M, L, M, B we get angle(G, J, M) == angle(L, M, B) + 180 mod 360
By divide_by_2_mod_180_v0 on J, A, C, K, G, C we get angle(J, A, C) == angle(K, G, C) mod 360
By divide_by_2_mod_180_v1 on M, B, J, J, M, K we get angle(J, M, K) == angle(M, B, J) mod 360
By divide_by_2_mod_180_v3 on J, B, S, J, K, M we get angle(J, B, S) == angle(J, K, M) + 180 mod 360
By divide_by_2_mod_180_v3 on A, B, J, J, K, M we get angle(A, B, J) == angle(J, K, M) + 180 mod 360
By divide_by_2_mod_180_v2 on C, M, F, M, J, C we get angle(C, M, F) == angle(M, J, C) + 180 mod 360
By divide_by_2_mod_180_v1 on L, A, J, M, F, B we get angle(L, A, J) == angle(M, F, B) mod 360
By divide_by_2_mod_180_v1 on J, C, S, J, L, M we get angle(J, C, S) == angle(J, L, M) mod 360
By divide_by_2_mod_180_v2 on S, B, J, M, K, J we get angle(S, B, J) == angle(M, K, J) + 180 mod 360
By divide_by_2_mod_180_v0 on B, F, L, J, A, C we get angle(B, F, L) == angle(J, A, C) mod 360
By divide_by_2_mod_180_v0 on A, L, F, A, J, B we get angle(A, J, B) == angle(A, L, F) mod 360
By divide_by_2_mod_180_v0 on G, J, A, G, K, B we get angle(G, J, A) == angle(G, K, B) mod 360
By divide_by_2_mod_180_v0 on C, J, M, C, L, M we get angle(C, J, M) == angle(C, L, M) mod 360
By divide_by_2_mod_180_v3 on M, J, C, S, M, L we get angle(M, J, C) == angle(S, M, L) + 180 mod 360
By between_imply_segment_sum on S, B, T we get distance(S, T) == distance(B, S) + distance(B, T)
By divide_by_2_mod_180_v3 on F, J, M, G, M, S we get angle(F, J, M) == angle(G, M, S) + 180 mod 360
By divide_by_2_mod_180_v1 on M, J, G, S, M, F we get angle(M, J, G) == angle(S, M, F) mod 360
By divide_by_2_mod_180_v1 on K, M, S, K, J, F we get angle(K, J, F) == angle(K, M, S) mod 360
By divide_by_2_mod_180_v1 on M, L, A, F, J, A we get angle(F, J, A) == angle(M, L, A) mod 360
By divide_by_2_mod_180_v0 on F, M, K, A, J, K we get angle(A, J, K) == angle(F, M, K) mod 360
By divide_by_2_mod_180_v1 on F, J, G, K, L, C we get angle(F, J, G) == angle(K, L, C) mod 360
By divide_by_2_mod_180_v1 on K, J, B, K, L, F we get angle(K, J, B) == angle(K, L, F) mod 360
By divide_by_2_mod_180_v0 on G, J, A, B, M, K we get angle(B, M, K) == angle(G, J, A) mod 360
By divide_by_2_mod_180_v2 on F, L, J, M, C, G we get angle(F, L, J) == angle(M, C, G) + 180 mod 360
By divide_by_2_mod_180_v3 on M, J, C, B, M, L we get angle(M, J, C) == angle(B, M, L) + 180 mod 360
By divide_by_2_mod_180_v2 on L, J, C, L, M, B we get angle(L, J, C) == angle(L, M, B) + 180 mod 360
By divide_by_2_mod_180_v0 on J, K, G, A, B, F we get angle(A, B, F) == angle(J, K, G) mod 360
By divide_by_2_mod_180_v0 on F, M, B, C, J, M we get angle(C, J, M) == angle(F, M, B) mod 360
By divide_by_2_mod_180_v2 on G, J, B, L, M, K we get angle(G, J, B) == angle(L, M, K) + 180 mod 360
By divide_by_2_mod_180_v2 on M, C, J, J, M, F we get angle(M, C, J) == angle(J, M, F) + 180 mod 360
By divide_by_2_mod_180_v0 on M, L, K, F, J, K we get angle(F, J, K) == angle(M, L, K) mod 360
By divide_by_2_mod_180_v3 on C, M, K, G, J, A we get angle(C, M, K) == angle(G, J, A) + 180 mod 360
By divide_by_2_mod_180_v0 on S, B, J, J, M, G we get angle(J, M, G) == angle(S, B, J) mod 360
By divide_by_2_mod_180_v2 on F, J, K, T, M, K we get angle(F, J, K) == angle(T, M, K) + 180 mod 360
By divide_by_2_mod_180_v0 on M, L, J, G, C, A we get angle(G, C, A) == angle(M, L, J) mod 360
By divide_by_2_mod_180_v1 on J, G, M, C, A, J we get angle(C, A, J) == angle(J, G, M) mod 360
By divide_by_2_mod_180_v1 on C, G, K, M, F, B we get angle(C, G, K) == angle(M, F, B) mod 360
By divide_by_2_mod_180_v3 on L, C, J, F, M, J we get angle(L, C, J) == angle(F, M, J) + 180 mod 360
By divide_by_2_mod_180_v0 on A, J, F, L, K, G we get angle(A, J, F) == angle(L, K, G) mod 360
By divide_by_2_mod_180_v2 on S, C, J, J, M, F we get angle(S, C, J) == angle(J, M, F) + 180 mod 360
By divide_by_2_mod_180_v0 on G, K, A, C, J, A we get angle(C, J, A) == angle(G, K, A) mod 360
By divide_by_2_mod_180_v2 on S, M, L, C, J, L we get angle(S, M, L) == angle(C, J, L) + 180 mod 360
By divide_by_2_mod_180_v2 on S, M, L, B, J, A we get angle(S, M, L) == angle(B, J, A) + 180 mod 360
By divide_by_2_mod_180_v1 on J, L, K, C, G, M we get angle(C, G, M) == angle(J, L, K) mod 360
By divide_by_2_mod_180_v2 on M, L, J, T, C, J we get angle(M, L, J) == angle(T, C, J) + 180 mod 360
By divide_by_2_mod_180_v1 on T, M, L, G, J, L we get angle(G, J, L) == angle(T, M, L) mod 360
By divide_by_2_mod_180_v1 on M, F, B, J, A, K we get angle(J, A, K) == angle(M, F, B) mod 360
By divide_by_2_mod_180_v3 on T, C, J, F, L, J we get angle(T, C, J) == angle(F, L, J) + 180 mod 360
By divide_by_2_mod_180_v2 on K, M, J, A, B, J we get angle(K, M, J) == angle(A, B, J) + 180 mod 360
By divide_by_2_mod_180_v2 on J, K, M, K, B, F we get angle(J, K, M) == angle(K, B, F) + 180 mod 360
By divide_by_2_mod_180_v1 on J, M, F, S, C, G we get angle(J, M, F) == angle(S, C, G) mod 360
By divide_by_2_mod_180_v1 on B, K, M, A, J, G we get angle(A, J, G) == angle(B, K, M) mod 360
By divide_by_2_mod_180_v1 on M, F, J, L, K, J we get angle(L, K, J) == angle(M, F, J) mod 360
By divide_by_2_mod_180_v3 on M, K, J, J, B, A we get angle(M, K, J) == angle(J, B, A) + 180 mod 360
By divide_by_2_mod_180_v2 on A, J, F, L, M, S we get angle(A, J, F) == angle(L, M, S) + 180 mod 360
By divide_by_2_mod_180_v0 on K, G, J, K, L, J we get angle(K, G, J) == angle(K, L, J) mod 360
By divide_by_2_mod_180_v1 on M, L, A, M, J, C we get angle(M, J, C) == angle(M, L, A) mod 360
By divide_by_2_mod_180_v1 on A, C, G, L, M, J we get angle(A, C, G) == angle(L, M, J) mod 360
By divide_by_2_mod_180_v0 on L, J, G, A, J, F we get angle(A, J, F) == angle(L, J, G) mod 360
By divide_by_2_mod_180_v1 on C, J, L, M, L, C we get angle(C, J, L) == angle(M, L, C) mod 360
By divide_by_2_mod_180_v0 on B, F, L, K, G, C we get angle(B, F, L) == angle(K, G, C) mod 360
By divide_by_2_mod_180_v0 on L, J, C, A, L, M we get angle(A, L, M) == angle(L, J, C) mod 360
By divide_by_2_mod_180_v1 on G, M, T, K, J, B we get angle(G, M, T) == angle(K, J, B) mod 360
By divide_by_2_mod_180_v1 on T, M, L, M, J, G we get angle(M, J, G) == angle(T, M, L) mod 360
By divide_by_2_mod_180_v0 on A, L, M, L, J, G we get angle(A, L, M) == angle(L, J, G) mod 360
By divide_by_2_mod_180_v1 on B, J, A, G, J, L we get angle(B, J, A) == angle(G, J, L) mod 360
By divide_by_2_mod_180_v3 on A, J, C, G, M, S we get angle(A, J, C) == angle(G, M, S) + 180 mod 360
By divide_by_2_mod_180_v1 on T, B, J, M, K, J we get angle(M, K, J) == angle(T, B, J) mod 360
By divide_by_2_mod_180_v0 on B, A, J, J, K, L we get angle(B, A, J) == angle(J, K, L) mod 360
By divide_by_2_mod_180_v3 on B, J, M, K, M, C we get angle(B, J, M) == angle(K, M, C) + 180 mod 360
By divide_by_2_mod_180_v1 on K, M, S, B, J, M we get angle(B, J, M) == angle(K, M, S) mod 360
By divide_by_2_mod_180_v1 on A, J, L, A, K, L we get angle(A, J, L) == angle(A, K, L) mod 360
By divide_by_2_mod_180_v0 on F, J, K, G, K, B we get angle(F, J, K) == angle(G, K, B) mod 360
By divide_by_2_mod_180_v1 on L, A, J, J, G, K we get angle(J, G, K) == angle(L, A, J) mod 360
By divide_by_2_mod_180_v1 on J, L, K, J, G, M we get angle(J, G, M) == angle(J, L, K) mod 360
By divide_by_2_mod_180_v1 on F, B, T, G, M, J we get angle(F, B, T) == angle(G, M, J) mod 360
By divide_by_2_mod_180_v1 on J, G, M, L, F, J we get angle(J, G, M) == angle(L, F, J) mod 360
By divide_by_2_mod_180_v3 on L, M, J, L, C, G we get angle(L, M, J) == angle(L, C, G) + 180 mod 360
By divide_by_2_mod_180_v1 on C, J, L, C, M, L we get angle(C, J, L) == angle(C, M, L) mod 360
By divide_by_2_mod_180_v0 on C, M, G, F, J, K we get angle(C, M, G) == angle(F, J, K) mod 360
By divide_by_2_mod_180_v1 on J, G, K, J, A, B we get angle(J, A, B) == angle(J, G, K) mod 360
By divide_by_2_mod_180_v1 on A, J, L, K, L, C we get angle(A, J, L) == angle(K, L, C) mod 360
By divide_by_2_mod_180_v3 on L, M, J, A, C, J we get angle(L, M, J) == angle(A, C, J) + 180 mod 360
By divide_by_2_mod_180_v1 on J, A, K, J, L, K we get angle(J, A, K) == angle(J, L, K) mod 360
By divide_by_2_mod_180_v1 on F, J, G, K, M, F we get angle(F, J, G) == angle(K, M, F) mod 360
By divide_by_2_mod_180_v0 on M, J, F, B, M, K we get angle(B, M, K) == angle(M, J, F) mod 360
By divide_by_2_mod_180_v2 on K, M, J, F, B, M we get angle(K, M, J) == angle(F, B, M) + 180 mod 360
By divide_by_2_mod_180_v0 on K, G, J, J, K, L we get angle(J, K, L) == angle(K, G, J) mod 360
By divide_by_2_mod_180_v1 on J, L, K, L, F, J we get angle(J, L, K) == angle(L, F, J) mod 360
By divide_by_2_mod_180_v2 on K, M, L, F, J, C we get angle(K, M, L) == angle(F, J, C) + 180 mod 360
By divide_by_2_mod_180_v3 on G, M, J, J, B, M we get angle(G, M, J) == angle(J, B, M) + 180 mod 360
By divide_by_2_mod_180_v2 on J, K, M, A, B, J we get angle(J, K, M) == angle(A, B, J) + 180 mod 360
By divide_by_2_mod_180_v0 on B, J, K, F, L, K we get angle(B, J, K) == angle(F, L, K) mod 360
By divide_by_2_mod_180_v0 on C, J, A, T, M, G we get angle(C, J, A) == angle(T, M, G) mod 360
By divide_by_2_mod_180_v1 on C, A, J, M, F, J we get angle(C, A, J) == angle(M, F, J) mod 360
By divide_by_2_mod_180_v1 on A, J, L, B, K, L we get angle(A, J, L) == angle(B, K, L) mod 360
By divide_by_2_mod_180_v1 on C, G, M, M, F, B we get angle(C, G, M) == angle(M, F, B) mod 360
By divide_by_2_mod_180_v2 on C, J, B, F, M, G we get angle(C, J, B) == angle(F, M, G) + 180 mod 360
By divide_by_2_mod_180_v3 on T, M, K, F, J, K we get angle(T, M, K) == angle(F, J, K) + 180 mod 360
By divide_by_2_mod_180_v2 on L, C, G, J, L, M we get angle(L, C, G) == angle(J, L, M) + 180 mod 360
By divide_by_2_mod_180_v1 on L, A, J, J, G, M we get angle(J, G, M) == angle(L, A, J) mod 360
By divide_by_2_mod_180_v2 on C, B, F, M, K, J we get angle(C, B, F) == angle(M, K, J) + 180 mod 360
By divide_by_2_mod_180_v3 on B, J, A, T, M, F we get angle(B, J, A) == angle(T, M, F) + 180 mod 360
By divide_by_2_mod_180_v0 on A, J, B, L, J, C we get angle(A, J, B) == angle(L, J, C) mod 360
By divide_by_2_mod_180_v0 on K, G, J, J, F, L we get angle(J, F, L) == angle(K, G, J) mod 360
By divide_by_2_mod_180_v0 on G, C, B, F, M, J we get angle(F, M, J) == angle(G, C, B) mod 360
By divide_by_2_mod_180_v3 on G, M, J, J, B, C we get angle(G, M, J) == angle(J, B, C) + 180 mod 360
By divide_by_2_mod_180_v0 on J, M, G, F, B, K we get angle(F, B, K) == angle(J, M, G) mod 360
By divide_by_2_mod_180_v0 on J, K, M, A, B, F we get angle(A, B, F) == angle(J, K, M) mod 360
By divide_by_2_mod_180_v1 on F, J, A, C, J, L we get angle(C, J, L) == angle(F, J, A) mod 360
By divide_by_2_mod_180_v0 on K, G, C, J, F, M we get angle(J, F, M) == angle(K, G, C) mod 360
By divide_by_2_mod_180_v3 on B, M, G, C, J, A we get angle(B, M, G) == angle(C, J, A) + 180 mod 360
By divide_by_2_mod_180_v0 on T, M, G, F, J, K we get angle(F, J, K) == angle(T, M, G) mod 360
By divide_by_2_mod_180_v1 on G, M, L, F, J, G we get angle(F, J, G) == angle(G, M, L) mod 360
By divide_by_2_mod_180_v1 on K, J, A, F, J, G we get angle(F, J, G) == angle(K, J, A) mod 360
By divide_by_2_mod_180_v3 on J, M, F, G, C, A we get angle(J, M, F) == angle(G, C, A) + 180 mod 360
By divide_by_2_mod_180_v1 on K, M, B, F, J, M we get angle(F, J, M) == angle(K, M, B) mod 360
By divide_by_2_mod_180_v3 on J, M, F, M, C, J we get angle(J, M, F) == angle(M, C, J) + 180 mod 360
By divide_by_2_mod_180_v0 on L, M, C, G, J, M we get angle(G, J, M) == angle(L, M, C) mod 360
By divide_by_2_mod_180_v0 on J, F, L, M, G, J we get angle(J, F, L) == angle(M, G, J) mod 360
By divide_by_2_mod_180_v0 on A, J, F, L, M, T we get angle(A, J, F) == angle(L, M, T) mod 360
By divide_by_2_mod_180_v3 on K, J, F, K, M, C we get angle(K, J, F) == angle(K, M, C) + 180 mod 360
By divide_by_2_mod_180_v1 on L, C, J, J, L, F we get angle(J, L, F) == angle(L, C, J) mod 360
By divide_by_2_mod_180_v3 on G, M, J, F, B, S we get angle(G, M, J) == angle(F, B, S) + 180 mod 360
By divide_by_2_mod_180_v0 on C, L, K, C, J, F we get angle(C, J, F) == angle(C, L, K) mod 360
By divide_by_2_mod_180_v0 on G, J, F, L, M, G we get angle(G, J, F) == angle(L, M, G) mod 360
By divide_by_2_mod_180_v2 on M, B, F, M, K, J we get angle(M, B, F) == angle(M, K, J) + 180 mod 360
By divide_by_2_mod_180_v0 on J, A, L, B, F, L we get angle(B, F, L) == angle(J, A, L) mod 360
By divide_by_2_mod_180_v1 on A, J, C, K, J, B we get angle(A, J, C) == angle(K, J, B) mod 360
By divide_by_2_mod_180_v0 on M, K, A, M, J, F we get angle(M, J, F) == angle(M, K, A) mod 360
By divide_by_2_mod_180_v1 on G, C, T, L, M, J we get angle(G, C, T) == angle(L, M, J) mod 360
By divide_by_2_mod_180_v0 on S, M, K, M, J, F we get angle(M, J, F) == angle(S, M, K) mod 360
By divide_by_2_mod_180_v1 on K, M, B, A, J, G we get angle(A, J, G) == angle(K, M, B) mod 360
By divide_by_2_mod_180_v2 on A, C, J, L, M, J we get angle(A, C, J) == angle(L, M, J) + 180 mod 360
By divide_by_2_mod_180_v3 on T, M, K, G, J, A we get angle(T, M, K) == angle(G, J, A) + 180 mod 360
By divide_by_2_mod_180_v2 on G, C, M, J, L, M we get angle(G, C, M) == angle(J, L, M) + 180 mod 360
By divide_by_2_mod_180_v0 on M, J, F, C, M, G we get angle(C, M, G) == angle(M, J, F) mod 360
By divide_by_2_mod_180_v1 on B, J, M, A, K, M we get angle(A, K, M) == angle(B, J, M) mod 360
By divide_by_2_mod_180_v3 on B, J, A, S, M, L we get angle(B, J, A) == angle(S, M, L) + 180 mod 360
By divide_by_2_mod_180_v1 on A, J, G, G, M, C we get angle(A, J, G) == angle(G, M, C) mod 360
By divide_by_2_mod_180_v0 on G, J, M, F, M, B we get angle(F, M, B) == angle(G, J, M) mod 360
By divide_by_2_mod_180_v1 on G, M, L, K, J, A we get angle(G, M, L) == angle(K, J, A) mod 360
By divide_by_2_mod_180_v0 on M, K, A, G, J, A we get angle(G, J, A) == angle(M, K, A) mod 360
By divide_by_2_mod_180_v3 on K, J, F, G, M, S we get angle(K, J, F) == angle(G, M, S) + 180 mod 360
By divide_by_2_mod_180_v1 on B, M, F, G, J, L we get angle(B, M, F) == angle(G, J, L) mod 360
By divide_by_2_mod_180_v1 on A, K, M, A, J, C we get angle(A, J, C) == angle(A, K, M) mod 360
By divide_by_2_mod_180_v1 on C, G, K, J, A, K we get angle(C, G, K) == angle(J, A, K) mod 360
By divide_by_2_mod_180_v2 on J, C, T, J, L, F we get angle(J, C, T) == angle(J, L, F) + 180 mod 360
By divide_by_2_mod_180_v0 on F, M, K, G, J, B we get angle(F, M, K) == angle(G, J, B) mod 360
By divide_by_2_mod_180_v2 on B, C, J, J, M, F we get angle(B, C, J) == angle(J, M, F) + 180 mod 360
By divide_by_2_mod_180_v1 on L, F, J, J, A, B we get angle(J, A, B) == angle(L, F, J) mod 360
By divide_by_2_mod_180_v2 on G, M, B, B, J, M we get angle(G, M, B) == angle(B, J, M) + 180 mod 360
By divide_by_2_mod_180_v2 on K, M, C, F, J, M we get angle(K, M, C) == angle(F, J, M) + 180 mod 360
By divide_by_2_mod_180_v0 on L, M, T, G, J, M we get angle(G, J, M) == angle(L, M, T) mod 360
By divide_by_2_mod_180_v3 on B, M, G, F, J, K we get angle(B, M, G) == angle(F, J, K) + 180 mod 360
By divide_by_2_mod_180_v3 on F, M, G, C, J, B we get angle(F, M, G) == angle(C, J, B) + 180 mod 360
By divide_by_2_mod_180_v0 on M, K, A, C, J, A we get angle(C, J, A) == angle(M, K, A) mod 360
By divide_by_2_mod_180_v0 on J, K, L, M, G, J we get angle(J, K, L) == angle(M, G, J) mod 360
By divide_by_2_mod_180_v2 on A, J, B, F, M, T we get angle(A, J, B) == angle(F, M, T) + 180 mod 360
By divide_by_2_mod_180_v2 on J, K, G, J, B, S we get angle(J, K, G) == angle(J, B, S) + 180 mod 360
By divide_by_2_mod_180_v2 on J, B, M, G, M, J we get angle(J, B, M) == angle(G, M, J) + 180 mod 360
By divide_by_2_mod_180_v1 on G, M, T, A, J, G we get angle(A, J, G) == angle(G, M, T) mod 360
By divide_by_2_mod_180_v1 on A, J, G, K, M, S we get angle(A, J, G) == angle(K, M, S) mod 360
By divide_by_2_mod_180_v2 on G, M, F, F, J, G we get angle(G, M, F) == angle(F, J, G) + 180 mod 360
By divide_by_2_mod_180_v0 on S, M, K, C, J, A we get angle(C, J, A) == angle(S, M, K) mod 360
By divide_by_2_mod_180_v3 on B, J, M, G, M, S we get angle(B, J, M) == angle(G, M, S) + 180 mod 360
By divide_by_2_mod_180_v2 on G, C, M, J, L, F we get angle(G, C, M) == angle(J, L, F) + 180 mod 360
By divide_by_2_mod_180_v0 on C, B, F, J, M, G we get angle(C, B, F) == angle(J, M, G) mod 360
By divide_by_2_mod_180_v2 on B, M, L, M, J, C we get angle(B, M, L) == angle(M, J, C) + 180 mod 360
By divide_by_2_mod_180_v3 on S, M, G, F, J, K we get angle(S, M, G) == angle(F, J, K) + 180 mod 360
By divide_by_2_mod_180_v0 on F, M, S, G, J, M we get angle(F, M, S) == angle(G, J, M) mod 360
By divide_by_2_mod_180_v3 on F, J, G, G, M, F we get angle(F, J, G) == angle(G, M, F) + 180 mod 360
By divide_by_2_mod_180_v0 on C, L, K, L, J, A we get angle(C, L, K) == angle(L, J, A) mod 360
By divide_by_2_mod_180_v0 on C, J, M, C, L, F we get angle(C, J, M) == angle(C, L, F) mod 360
By divide_by_2_mod_180_v0 on M, G, J, J, A, L we get angle(J, A, L) == angle(M, G, J) mod 360
By divide_by_2_mod_180_v0 on K, L, J, B, F, M we get angle(B, F, M) == angle(K, L, J) mod 360
By divide_by_2_mod_180_v2 on A, J, F, F, M, T we get angle(A, J, F) == angle(F, M, T) + 180 mod 360
By divide_by_2_mod_180_v0 on L, J, A, G, J, B we get angle(G, J, B) == angle(L, J, A) mod 360
By divide_by_2_mod_180_v0 on J, C, L, J, M, L we get angle(J, C, L) == angle(J, M, L) mod 360
By divide_by_2_mod_180_v0 on F, J, K, S, M, K we get angle(F, J, K) == angle(S, M, K) mod 360
By divide_by_2_mod_180_v1 on J, A, B, L, F, B we get angle(J, A, B) == angle(L, F, B) mod 360
By divide_by_2_mod_180_v2 on S, M, L, F, J, A we get angle(S, M, L) == angle(F, J, A) + 180 mod 360
By between_imply_segment_sum on T, M, S we get distance(S, T) == distance(M, T) + distance(M, S)
By divide_by_2_mod_180_v1 on C, J, L, F, L, A we get angle(C, J, L) == angle(F, L, A) mod 360
By divide_by_2_mod_180_v0 on F, J, K, G, J, A we get angle(F, J, K) == angle(G, J, A) mod 360
By divide_by_2_mod_180_v3 on F, M, G, C, J, F we get angle(F, M, G) == angle(C, J, F) + 180 mod 360
By divide_by_2_mod_180_v3 on B, C, G, M, L, J we get angle(B, C, G) == angle(M, L, J) + 180 mod 360
By divide_by_2_mod_180_v0 on J, K, L, J, F, L we get angle(J, F, L) == angle(J, K, L) mod 360
By divide_by_2_mod_180_v1 on G, M, J, K, B, F we get angle(G, M, J) == angle(K, B, F) mod 360
By divide_by_2_mod_180_v2 on J, B, C, G, M, J we get angle(J, B, C) == angle(G, M, J) + 180 mod 360
By divide_by_2_mod_180_v0 on A, J, K, L, K, A we get angle(A, J, K) == angle(L, K, A) mod 360
By divide_by_2_mod_180_v0 on F, M, S, L, J, C we get angle(F, M, S) == angle(L, J, C) mod 360
By divide_by_2_mod_180_v2 on T, B, F, G, K, J we get angle(T, B, F) == angle(G, K, J) + 180 mod 360
By divide_by_2_mod_180_v3 on G, J, L, B, M, L we get angle(G, J, L) == angle(B, M, L) + 180 mod 360
By divide_by_2_mod_180_v1 on M, K, L, C, J, L we get angle(C, J, L) == angle(M, K, L) mod 360
By divide_by_2_mod_180_v3 on J, L, F, G, C, S we get angle(J, L, F) == angle(G, C, S) + 180 mod 360
By divide_by_2_mod_180_v0 on F, M, S, L, J, G we get angle(F, M, S) == angle(L, J, G) mod 360
By divide_by_2_mod_180_v3 on L, M, K, A, J, K we get angle(L, M, K) == angle(A, J, K) + 180 mod 360
By divide_by_2_mod_180_v1 on M, F, J, L, A, J we get angle(L, A, J) == angle(M, F, J) mod 360
By divide_by_2_mod_180_v1 on G, M, C, K, J, F we get angle(G, M, C) == angle(K, J, F) mod 360
By divide_by_2_mod_180_v2 on J, K, G, A, B, J we get angle(J, K, G) == angle(A, B, J) + 180 mod 360
By divide_by_2_mod_180_v2 on M, J, B, T, M, K we get angle(M, J, B) == angle(T, M, K) + 180 mod 360
By divide_by_2_mod_180_v0 on G, C, M, F, M, J we get angle(F, M, J) == angle(G, C, M) mod 360
By divide_by_2_mod_180_v1 on K, J, A, B, K, L we get angle(B, K, L) == angle(K, J, A) mod 360
By divide_by_2_mod_180_v1 on K, L, A, B, J, C we get angle(B, J, C) == angle(K, L, A) mod 360
By divide_by_2_mod_180_v2 on F, B, K, M, K, J we get angle(F, B, K) == angle(M, K, J) + 180 mod 360
By divide_by_2_mod_180_v0 on F, L, J, T, C, G we get angle(F, L, J) == angle(T, C, G) mod 360
By divide_by_2_mod_180_v1 on G, J, L, G, K, L we get angle(G, J, L) == angle(G, K, L) mod 360
By divide_by_2_mod_180_v1 on K, J, B, A, K, G we get angle(A, K, G) == angle(K, J, B) mod 360
By divide_by_2_mod_180_v1 on M, L, C, B, J, A we get angle(B, J, A) == angle(M, L, C) mod 360
By divide_by_2_mod_180_v3 on C, M, K, M, J, F we get angle(C, M, K) == angle(M, J, F) + 180 mod 360
By between_imply_segment_sum on S, M, C we get distance(C, S) == distance(M, S) + distance(C, M)
By divide_by_2_mod_180_v2 on T, M, F, M, J, C we get angle(T, M, F) == angle(M, J, C) + 180 mod 360
By divide_by_2_mod_180_v2 on G, M, F, B, J, C we get angle(G, M, F) == angle(B, J, C) + 180 mod 360
By divide_by_2_mod_180_v2 on J, M, L, T, C, J we get angle(J, M, L) == angle(T, C, J) + 180 mod 360
By divide_by_2_mod_180_v2 on L, J, C, F, M, T we get angle(L, J, C) == angle(F, M, T) + 180 mod 360
By divide_by_2_mod_180_v0 on A, J, F, F, M, S we get angle(A, J, F) == angle(F, M, S) mod 360
By divide_by_2_mod_180_v2 on L, J, A, F, M, G we get angle(L, J, A) == angle(F, M, G) + 180 mod 360
By divide_by_2_mod_180_v1 on K, J, B, B, K, G we get angle(B, K, G) == angle(K, J, B) mod 360
By divide_by_2_mod_180_v3 on L, M, K, C, J, F we get angle(L, M, K) == angle(C, J, F) + 180 mod 360
By divide_by_2_mod_180_v3 on G, M, J, K, B, J we get angle(G, M, J) == angle(K, B, J) + 180 mod 360
By divide_by_2_mod_180_v0 on B, F, M, K, G, C we get angle(B, F, M) == angle(K, G, C) mod 360
By divide_by_2_mod_180_v0 on C, J, F, L, K, A we get angle(C, J, F) == angle(L, K, A) mod 360
By divide_by_2_mod_180_v1 on K, L, M, A, J, C we get angle(A, J, C) == angle(K, L, M) mod 360
By divide_by_2_mod_180_v0 on A, L, M, G, J, M we get angle(A, L, M) == angle(G, J, M) mod 360
By divide_by_2_mod_180_v2 on J, M, L, G, C, L we get angle(J, M, L) == angle(G, C, L) + 180 mod 360
By divide_by_2_mod_180_v2 on A, C, J, J, L, F we get angle(A, C, J) == angle(J, L, F) + 180 mod 360
By divide_by_2_mod_180_v2 on F, J, K, S, M, G we get angle(F, J, K) == angle(S, M, G) + 180 mod 360
By divide_by_2_mod_180_v3 on A, J, G, G, M, B we get angle(A, J, G) == angle(G, M, B) + 180 mod 360
By divide_by_2_mod_180_v3 on F, B, T, J, K, G we get angle(F, B, T) == angle(J, K, G) + 180 mod 360
By divide_by_2_mod_180_v3 on G, C, T, F, M, J we get angle(G, C, T) == angle(F, M, J) + 180 mod 360
By divide_by_2_mod_180_v3 on F, M, T, A, J, B we get angle(F, M, T) == angle(A, J, B) + 180 mod 360
By divide_by_2_mod_180_v3 on F, B, C, J, K, M we get angle(F, B, C) == angle(J, K, M) + 180 mod 360
By divide_by_2_mod_180_v1 on K, M, F, K, J, A we get angle(K, J, A) == angle(K, M, F) mod 360
By divide_by_2_mod_180_v2 on G, M, B, F, J, M we get angle(G, M, B) == angle(F, J, M) + 180 mod 360
By divide_by_2_mod_180_v2 on G, M, B, A, J, C we get angle(G, M, B) == angle(A, J, C) + 180 mod 360
By divide_by_2_mod_180_v1 on A, J, L, B, J, G we get angle(A, J, L) == angle(B, J, G) mod 360
By divide_by_2_mod_180_v0 on C, J, F, L, J, A we get angle(C, J, F) == angle(L, J, A) mod 360
By divide_by_2_mod_180_v2 on M, J, F, C, M, K we get angle(M, J, F) == angle(C, M, K) + 180 mod 360
By divide_by_2_mod_180_v3 on J, L, M, J, C, T we get angle(J, L, M) == angle(J, C, T) + 180 mod 360
By divide_by_2_mod_180_v3 on J, C, A, F, L, J we get angle(J, C, A) == angle(F, L, J) + 180 mod 360
By divide_by_2_mod_180_v1 on M, K, L, M, J, G we get angle(M, J, G) == angle(M, K, L) mod 360
By divide_by_2_mod_180_v0 on A, J, B, L, K, M we get angle(A, J, B) == angle(L, K, M) mod 360
By divide_by_2_mod_180_v2 on C, J, A, S, M, G we get angle(C, J, A) == angle(S, M, G) + 180 mod 360
By divide_by_2_mod_180_v1 on G, K, J, F, B, A we get angle(F, B, A) == angle(G, K, J) mod 360
By divide_by_2_mod_180_v2 on B, J, K, B, M, G we get angle(B, J, K) == angle(B, M, G) + 180 mod 360
By divide_by_2_mod_180_v1 on B, J, A, B, M, F we get angle(B, J, A) == angle(B, M, F) mod 360
By divide_by_2_mod_180_v1 on F, J, C, A, J, L we get angle(A, J, L) == angle(F, J, C) mod 360
By divide_by_2_mod_180_v3 on M, C, G, J, M, L we get angle(M, C, G) == angle(J, M, L) + 180 mod 360
By divide_by_2_mod_180_v0 on F, J, K, B, M, K we get angle(B, M, K) == angle(F, J, K) mod 360
By divide_by_2_mod_180_v1 on K, J, F, B, K, M we get angle(B, K, M) == angle(K, J, F) mod 360
By divide_by_2_mod_180_v0 on C, J, F, A, J, K we get angle(A, J, K) == angle(C, J, F) mod 360
By divide_by_2_mod_180_v3 on F, B, M, J, K, G we get angle(F, B, M) == angle(J, K, G) + 180 mod 360
By divide_by_2_mod_180_v1 on L, F, B, L, K, J we get angle(L, F, B) == angle(L, K, J) mod 360
By divide_by_2_mod_180_v0 on M, C, J, J, M, L we get angle(J, M, L) == angle(M, C, J) mod 360
By divide_by_2_mod_180_v1 on J, A, K, C, G, M we get angle(C, G, M) == angle(J, A, K) mod 360
By divide_by_2_mod_180_v1 on C, G, K, L, A, J we get angle(C, G, K) == angle(L, A, J) mod 360
By divide_by_2_mod_180_v3 on F, B, C, J, K, G we get angle(F, B, C) == angle(J, K, G) + 180 mod 360
By divide_by_2_mod_180_v1 on B, J, G, K, J, A we get angle(B, J, G) == angle(K, J, A) mod 360
By divide_by_2_mod_180_v3 on L, M, J, J, C, T we get angle(L, M, J) == angle(J, C, T) + 180 mod 360
By divide_by_2_mod_180_v0 on F, B, S, J, K, G we get angle(F, B, S) == angle(J, K, G) mod 360
By divide_by_2_mod_180_v1 on K, J, F, K, L, M we get angle(K, J, F) == angle(K, L, M) mod 360
By divide_by_2_mod_180_v2 on F, B, K, G, K, J we get angle(F, B, K) == angle(G, K, J) + 180 mod 360
By divide_by_2_mod_180_v3 on J, M, K, T, B, F we get angle(J, M, K) == angle(T, B, F) + 180 mod 360
By divide_by_2_mod_180_v0 on J, K, L, M, G, C we get angle(J, K, L) == angle(M, G, C) mod 360
By divide_by_2_mod_180_v3 on L, M, J, G, C, S we get angle(L, M, J) == angle(G, C, S) + 180 mod 360
By divide_by_2_mod_180_v2 on G, C, S, J, L, M we get angle(G, C, S) == angle(J, L, M) + 180 mod 360
By divide_by_2_mod_180_v3 on J, L, F, G, C, B we get angle(J, L, F) == angle(G, C, B) + 180 mod 360
By divide_by_2_mod_180_v3 on B, J, A, B, M, L we get angle(B, J, A) == angle(B, M, L) + 180 mod 360
By divide_by_2_mod_180_v0 on G, J, A, S, M, K we get angle(G, J, A) == angle(S, M, K) mod 360
By divide_by_2_mod_180_v3 on B, J, C, K, M, L we get angle(B, J, C) == angle(K, M, L) + 180 mod 360
By divide_by_2_mod_180_v1 on G, K, L, M, J, G we get angle(G, K, L) == angle(M, J, G) mod 360
By divide_by_2_mod_180_v2 on J, B, A, M, K, J we get angle(J, B, A) == angle(M, K, J) + 180 mod 360
By divide_by_2_mod_180_v3 on M, K, J, F, B, K we get angle(M, K, J) == angle(F, B, K) + 180 mod 360
By divide_by_2_mod_180_v3 on J, C, B, F, M, J we get angle(J, C, B) == angle(F, M, J) + 180 mod 360
By divide_by_2_mod_180_v0 on G, J, A, M, J, F we get angle(G, J, A) == angle(M, J, F) mod 360
By divide_by_2_mod_180_v3 on T, C, J, M, L, J we get angle(T, C, J) == angle(M, L, J) + 180 mod 360
By divide_by_2_mod_180_v2 on J, C, T, J, L, M we get angle(J, C, T) == angle(J, L, M) + 180 mod 360
By divide_by_2_mod_180_v1 on K, L, M, F, J, M we get angle(F, J, M) == angle(K, L, M) mod 360
By divide_by_2_mod_180_v3 on M, K, J, M, B, F we get angle(M, K, J) == angle(M, B, F) + 180 mod 360
By divide_by_2_mod_180_v1 on F, J, M, A, K, G we get angle(A, K, G) == angle(F, J, M) mod 360
By between_imply_segment_sum on T, C, M we get distance(M, T) == distance(C, T) + distance(C, M)
By divide_by_2_mod_180_v0 on T, M, G, B, J, K we get angle(B, J, K) == angle(T, M, G) mod 360
By divide_by_2_mod_180_v3 on C, M, K, B, J, K we get angle(C, M, K) == angle(B, J, K) + 180 mod 360
By divide_by_2_mod_180_v3 on J, M, F, T, C, G we get angle(J, M, F) == angle(T, C, G) + 180 mod 360
By divide_by_2_mod_180_v0 on J, B, T, J, K, G we get angle(J, B, T) == angle(J, K, G) mod 360
By divide_by_2_mod_180_v0 on C, J, A, M, L, K we get angle(C, J, A) == angle(M, L, K) mod 360
By divide_by_2_mod_180_v1 on A, J, C, K, M, B we get angle(A, J, C) == angle(K, M, B) mod 360
By divide_by_2_mod_180_v1 on J, C, M, J, L, F we get angle(J, C, M) == angle(J, L, F) mod 360
By divide_by_2_mod_180_v0 on J, A, C, J, F, L we get angle(J, A, C) == angle(J, F, L) mod 360
By divide_by_2_mod_180_v0 on C, J, A, M, K, B we get angle(C, J, A) == angle(M, K, B) mod 360
By divide_by_2_mod_180_v3 on K, J, F, G, M, B we get angle(K, J, F) == angle(G, M, B) + 180 mod 360
By divide_by_2_mod_180_v0 on K, L, J, J, A, C we get angle(J, A, C) == angle(K, L, J) mod 360
By divide_by_2_mod_180_v2 on G, J, B, F, M, G we get angle(G, J, B) == angle(F, M, G) + 180 mod 360
By divide_by_2_mod_180_v0 on M, G, C, B, A, J we get angle(B, A, J) == angle(M, G, C) mod 360
By divide_by_2_mod_180_v2 on L, J, G, F, M, T we get angle(L, J, G) == angle(F, M, T) + 180 mod 360
By divide_by_2_mod_180_v1 on B, K, L, F, J, C we get angle(B, K, L) == angle(F, J, C) mod 360
By divide_by_2_mod_180_v3 on J, C, A, M, L, J we get angle(J, C, A) == angle(M, L, J) + 180 mod 360
By divide_by_2_mod_180_v1 on F, L, A, B, J, A we get angle(B, J, A) == angle(F, L, A) mod 360
By divide_by_2_mod_180_v1 on A, K, L, K, J, A we get angle(A, K, L) == angle(K, J, A) mod 360
By divide_by_2_mod_180_v1 on B, J, G, G, M, L we get angle(B, J, G) == angle(G, M, L) mod 360
By divide_by_2_mod_180_v0 on B, F, M, K, G, J we get angle(B, F, M) == angle(K, G, J) mod 360
By divide_by_2_mod_180_v0 on K, L, J, B, A, J we get angle(B, A, J) == angle(K, L, J) mod 360
By divide_by_2_mod_180_v1 on G, M, C, B, J, M we get angle(B, J, M) == angle(G, M, C) mod 360
By divide_by_2_mod_180_v3 on J, L, M, A, C, J we get angle(J, L, M) == angle(A, C, J) + 180 mod 360
By divide_by_2_mod_180_v3 on L, M, B, L, J, C we get angle(L, M, B) == angle(L, J, C) + 180 mod 360
By divide_by_2_mod_180_v1 on F, J, C, G, M, L we get angle(F, J, C) == angle(G, M, L) mod 360
By divide_by_2_mod_180_v1 on K, L, F, A, J, G we get angle(A, J, G) == angle(K, L, F) mod 360
By divide_by_2_mod_180_v2 on G, J, M, F, M, T we get angle(G, J, M) == angle(F, M, T) + 180 mod 360
By divide_by_2_mod_180_v2 on G, C, S, L, M, J we get angle(G, C, S) == angle(L, M, J) + 180 mod 360
By divide_by_2_mod_180_v0 on M, J, B, C, J, A we get angle(C, J, A) == angle(M, J, B) mod 360
By divide_by_2_mod_180_v3 on M, J, C, C, M, F we get angle(M, J, C) == angle(C, M, F) + 180 mod 360
By divide_by_2_mod_180_v3 on K, J, F, K, M, T we get angle(K, J, F) == angle(K, M, T) + 180 mod 360
By divide_by_2_mod_180_v3 on A, B, J, J, K, G we get angle(A, B, J) == angle(J, K, G) + 180 mod 360
By divide_by_2_mod_180_v1 on C, G, K, L, F, B we get angle(C, G, K) == angle(L, F, B) mod 360
By divide_by_2_mod_180_v2 on K, M, J, J, B, S we get angle(K, M, J) == angle(J, B, S) + 180 mod 360
By divide_by_2_mod_180_v3 on A, J, C, K, M, T we get angle(A, J, C) == angle(K, M, T) + 180 mod 360
By divide_by_2_mod_180_v3 on A, B, J, K, M, J we get angle(A, B, J) == angle(K, M, J) + 180 mod 360
By divide_by_2_mod_180_v2 on C, J, A, T, M, K we get angle(C, J, A) == angle(T, M, K) + 180 mod 360
By divide_by_2_mod_180_v2 on J, M, L, B, C, G we get angle(J, M, L) == angle(B, C, G) + 180 mod 360
By divide_by_2_mod_180_v0 on J, F, M, B, A, J we get angle(B, A, J) == angle(J, F, M) mod 360
By divide_by_2_mod_180_v3 on F, J, A, B, M, L we get angle(F, J, A) == angle(B, M, L) + 180 mod 360
By divide_by_2_mod_180_v2 on J, B, T, G, M, J we get angle(J, B, T) == angle(G, M, J) + 180 mod 360
By divide_by_2_mod_180_v1 on L, M, J, J, C, M we get angle(J, C, M) == angle(L, M, J) mod 360
By divide_by_2_mod_180_v0 on G, J, A, M, K, B we get angle(G, J, A) == angle(M, K, B) mod 360
By divide_by_2_mod_180_v1 on L, F, B, J, G, K we get angle(J, G, K) == angle(L, F, B) mod 360
By divide_by_2_mod_180_v3 on J, L, M, L, C, G we get angle(J, L, M) == angle(L, C, G) + 180 mod 360
By divide_by_2_mod_180_v2 on C, M, F, F, J, A we get angle(C, M, F) == angle(F, J, A) + 180 mod 360
By divide_by_2_mod_180_v3 on G, C, L, F, L, J we get angle(G, C, L) == angle(F, L, J) + 180 mod 360
By divide_by_2_mod_180_v1 on K, J, B, B, K, M we get angle(B, K, M) == angle(K, J, B) mod 360
By divide_by_2_mod_180_v3 on J, L, F, J, C, T we get angle(J, L, F) == angle(J, C, T) + 180 mod 360
By divide_by_2_mod_180_v3 on F, M, T, A, J, F we get angle(F, M, T) == angle(A, J, F) + 180 mod 360
By divide_by_2_mod_180_v1 on G, K, L, C, J, L we get angle(C, J, L) == angle(G, K, L) mod 360
By divide_by_2_mod_180_v3 on F, B, A, J, M, G we get angle(F, B, A) == angle(J, M, G) + 180 mod 360
By divide_by_2_mod_180_v3 on J, B, K, J, M, G we get angle(J, B, K) == angle(J, M, G) + 180 mod 360
By divide_by_2_mod_180_v2 on G, J, M, L, M, S we get angle(G, J, M) == angle(L, M, S) + 180 mod 360
By divide_by_2_mod_180_v3 on G, C, L, J, M, L we get angle(G, C, L) == angle(J, M, L) + 180 mod 360
By divide_by_2_mod_180_v3 on L, M, K, C, J, B we get angle(L, M, K) == angle(C, J, B) + 180 mod 360
By divide_by_2_mod_180_v2 on J, K, M, F, B, T we get angle(J, K, M) == angle(F, B, T) + 180 mod 360
By divide_by_2_mod_180_v1 on A, J, C, A, K, G we get angle(A, J, C) == angle(A, K, G) mod 360
By divide_by_2_mod_180_v1 on B, K, G, B, J, M we get angle(B, J, M) == angle(B, K, G) mod 360
By divide_by_2_mod_180_v3 on F, M, G, L, J, A we get angle(F, M, G) == angle(L, J, A) + 180 mod 360
By divide_by_2_mod_180_v2 on F, J, K, C, M, K we get angle(F, J, K) == angle(C, M, K) + 180 mod 360
By divide_by_2_mod_180_v3 on K, J, A, G, M, F we get angle(K, J, A) == angle(G, M, F) + 180 mod 360
By divide_by_2_mod_180_v2 on K, M, L, A, J, L we get angle(K, M, L) == angle(A, J, L) + 180 mod 360
By divide_by_2_mod_180_v3 on J, M, F, J, C, L we get angle(J, M, F) == angle(J, C, L) + 180 mod 360
By divide_by_2_mod_180_v3 on M, K, J, C, B, F we get angle(M, K, J) == angle(C, B, F) + 180 mod 360
By divide_by_2_mod_180_v3 on K, J, B, G, M, S we get angle(K, J, B) == angle(G, M, S) + 180 mod 360
By divide_by_2_mod_180_v3 on F, M, G, G, J, B we get angle(F, M, G) == angle(G, J, B) + 180 mod 360
By divide_by_2_mod_180_v1 on C, G, K, J, L, K we get angle(C, G, K) == angle(J, L, K) mod 360
By divide_by_2_mod_180_v2 on G, M, B, K, J, B we get angle(G, M, B) == angle(K, J, B) + 180 mod 360
By divide_by_2_mod_180_v3 on J, M, K, S, B, J we get angle(J, M, K) == angle(S, B, J) + 180 mod 360
By divide_by_2_mod_180_v3 on S, M, G, B, J, K we get angle(S, M, G) == angle(B, J, K) + 180 mod 360
By divide_by_2_mod_180_v2 on L, J, C, F, M, C we get angle(L, J, C) == angle(F, M, C) + 180 mod 360
By divide_by_2_mod_180_v2 on S, M, L, G, J, L we get angle(S, M, L) == angle(G, J, L) + 180 mod 360
By divide_by_2_mod_180_v2 on G, C, B, J, L, F we get angle(G, C, B) == angle(J, L, F) + 180 mod 360
By divide_by_2_mod_180_v3 on A, C, G, F, M, J we get angle(A, C, G) == angle(F, M, J) + 180 mod 360
By divide_by_2_mod_180_v2 on J, M, L, M, C, G we get angle(J, M, L) == angle(M, C, G) + 180 mod 360
By divide_by_2_mod_180_v2 on G, M, B, K, J, F we get angle(G, M, B) == angle(K, J, F) + 180 mod 360
By divide_by_2_mod_180_v3 on L, M, S, A, J, F we get angle(L, M, S) == angle(A, J, F) + 180 mod 360
By divide_by_2_mod_180_v0 on L, J, G, F, M, B we get angle(F, M, B) == angle(L, J, G) mod 360
By divide_by_2_mod_180_v1 on B, J, M, K, M, B we get angle(B, J, M) == angle(K, M, B) mod 360
By divide_by_2_mod_180_v2 on K, M, L, F, J, G we get angle(K, M, L) == angle(F, J, G) + 180 mod 360
By divide_by_2_mod_180_v1 on M, L, C, M, J, C we get angle(M, J, C) == angle(M, L, C) mod 360
By divide_by_2_mod_180_v1 on C, B, J, J, M, K we get angle(C, B, J) == angle(J, M, K) mod 360
By divide_by_2_mod_180_v1 on L, K, J, J, A, B we get angle(J, A, B) == angle(L, K, J) mod 360
By divide_by_2_mod_180_v2 on G, C, B, L, M, J we get angle(G, C, B) == angle(L, M, J) + 180 mod 360
By divide_by_2_mod_180_v3 on T, M, K, B, J, K we get angle(T, M, K) == angle(B, J, K) + 180 mod 360
By divide_by_2_mod_180_v3 on F, J, G, K, M, L we get angle(F, J, G) == angle(K, M, L) + 180 mod 360
By divide_by_2_mod_180_v1 on L, K, J, J, G, K we get angle(J, G, K) == angle(L, K, J) mod 360
By divide_by_2_mod_180_v2 on J, M, G, F, B, A we get angle(J, M, G) == angle(F, B, A) + 180 mod 360
By divide_by_2_mod_180_v1 on K, J, B, A, J, G we get angle(A, J, G) == angle(K, J, B) mod 360
By divide_by_2_mod_180_v2 on L, J, G, L, M, B we get angle(L, J, G) == angle(L, M, B) + 180 mod 360
By divide_by_2_mod_180_v2 on G, M, F, K, J, A we get angle(G, M, F) == angle(K, J, A) + 180 mod 360
By divide_by_2_mod_180_v1 on G, J, L, F, J, A we get angle(F, J, A) == angle(G, J, L) mod 360
By divide_by_2_mod_180_v1 on F, J, M, K, M, S we get angle(F, J, M) == angle(K, M, S) mod 360
By divide_by_2_mod_180_v3 on S, C, G, J, M, L we get angle(S, C, G) == angle(J, M, L) + 180 mod 360
By divide_by_2_mod_180_v1 on J, G, M, J, A, B we get angle(J, A, B) == angle(J, G, M) mod 360
By divide_by_2_mod_180_v0 on B, F, L, K, G, J we get angle(B, F, L) == angle(K, G, J) mod 360
By divide_by_2_mod_180_v2 on C, J, A, C, M, K we get angle(C, J, A) == angle(C, M, K) + 180 mod 360
By divide_by_2_mod_180_v2 on C, J, M, L, M, S we get angle(C, J, M) == angle(L, M, S) + 180 mod 360
By divide_by_2_mod_180_v2 on F, L, J, T, C, J we get angle(F, L, J) == angle(T, C, J) + 180 mod 360
By divide_by_2_mod_180_v2 on T, M, F, F, J, A we get angle(T, M, F) == angle(F, J, A) + 180 mod 360
By divide_by_2_mod_180_v3 on A, J, C, K, M, C we get angle(A, J, C) == angle(K, M, C) + 180 mod 360
By divide_by_2_mod_180_v1 on K, J, A, F, J, C we get angle(F, J, C) == angle(K, J, A) mod 360
By divide_by_2_mod_180_v2 on C, J, F, F, M, G we get angle(C, J, F) == angle(F, M, G) + 180 mod 360
By divide_by_2_mod_180_v1 on K, M, B, K, J, B we get angle(K, J, B) == angle(K, M, B) mod 360
By divide_by_2_mod_180_v0 on C, J, A, M, J, F we get angle(C, J, A) == angle(M, J, F) mod 360
By divide_by_2_mod_180_v2 on F, M, J, J, C, S we get angle(F, M, J) == angle(J, C, S) + 180 mod 360
By divide_by_2_mod_180_v0 on J, A, L, K, G, C we get angle(J, A, L) == angle(K, G, C) mod 360
By divide_by_2_mod_180_v0 on L, K, A, G, J, F we get angle(G, J, F) == angle(L, K, A) mod 360
By divide_by_2_mod_180_v0 on B, F, M, J, K, L we get angle(B, F, M) == angle(J, K, L) mod 360
By divide_by_2_mod_180_v3 on A, J, C, G, M, B we get angle(A, J, C) == angle(G, M, B) + 180 mod 360
By divide_by_2_mod_180_v0 on C, L, F, L, J, G we get angle(C, L, F) == angle(L, J, G) mod 360
By divide_by_2_mod_180_v3 on J, B, S, J, K, G we get angle(J, B, S) == angle(J, K, G) + 180 mod 360
By internal_angle_bisector_definition_v0 on G, midpoint(K, M), G, M we get angle(G, M, midpoint(K, M)) == angle(midpoint(K, M), M, G) mod 360
By divide_by_2_mod_180_v2 on S, M, L, M, J, C we get angle(S, M, L) == angle(M, J, C) + 180 mod 360
By divide_by_2_mod_180_v1 on M, J, C, T, M, L we get angle(M, J, C) == angle(T, M, L) mod 360
By divide_by_2_mod_180_v3 on L, M, B, C, J, M we get angle(L, M, B) == angle(C, J, M) + 180 mod 360
By divide_by_2_mod_180_v3 on L, M, K, L, J, A we get angle(L, M, K) == angle(L, J, A) + 180 mod 360
By divide_by_2_mod_180_v3 on K, J, B, K, M, C we get angle(K, J, B) == angle(K, M, C) + 180 mod 360
By divide_by_2_mod_180_v1 on B, J, M, A, K, G we get angle(A, K, G) == angle(B, J, M) mod 360
By divide_by_2_mod_180_v3 on J, M, K, F, B, K we get angle(J, M, K) == angle(F, B, K) + 180 mod 360
By divide_by_2_mod_180_v0 on G, J, M, C, L, F we get angle(C, L, F) == angle(G, J, M) mod 360
By divide_by_2_mod_180_v0 on G, J, F, F, M, K we get angle(F, M, K) == angle(G, J, F) mod 360
By divide_by_2_mod_180_v3 on K, J, A, K, M, L we get angle(K, J, A) == angle(K, M, L) + 180 mod 360
By divide_by_2_mod_180_v3 on L, M, K, G, J, F we get angle(L, M, K) == angle(G, J, F) + 180 mod 360
By divide_by_2_mod_180_v2 on G, M, B, A, J, G we get angle(G, M, B) == angle(A, J, G) + 180 mod 360
By divide_by_2_mod_180_v0 on M, J, B, F, L, K we get angle(F, L, K) == angle(M, J, B) mod 360
By divide_by_2_mod_180_v2 on G, M, F, A, J, L we get angle(G, M, F) == angle(A, J, L) + 180 mod 360
By divide_by_2_mod_180_v1 on M, F, B, J, G, K we get angle(J, G, K) == angle(M, F, B) mod 360
By divide_by_2_mod_180_v2 on G, M, S, K, J, F we get angle(G, M, S) == angle(K, J, F) + 180 mod 360
By divide_by_2_mod_180_v3 on M, J, G, B, M, L we get angle(M, J, G) == angle(B, M, L) + 180 mod 360
By divide_by_2_mod_180_v3 on C, J, L, T, M, F we get angle(C, J, L) == angle(T, M, F) + 180 mod 360
By divide_by_2_mod_180_v0 on L, J, A, A, L, K we get angle(A, L, K) == angle(L, J, A) mod 360
By divide_by_2_mod_180_v1 on M, J, G, C, M, L we get angle(C, M, L) == angle(M, J, G) mod 360
By divide_by_2_mod_180_v2 on A, J, F, L, M, B we get angle(A, J, F) == angle(L, M, B) + 180 mod 360
By divide_by_2_mod_180_v2 on A, J, B, L, M, B we get angle(A, J, B) == angle(L, M, B) + 180 mod 360
By divide_by_2_mod_180_v2 on K, M, T, K, J, F we get angle(K, M, T) == angle(K, J, F) + 180 mod 360
By divide_by_2_mod_180_v3 on B, J, M, K, M, T we get angle(B, J, M) == angle(K, M, T) + 180 mod 360
By divide_by_2_mod_180_v2 on G, M, S, A, J, G we get angle(G, M, S) == angle(A, J, G) + 180 mod 360
By divide_by_2_mod_180_v0 on G, J, A, M, L, K we get angle(G, J, A) == angle(M, L, K) mod 360
By divide_by_2_mod_180_v2 on J, C, T, L, M, J we get angle(J, C, T) == angle(L, M, J) + 180 mod 360
By divide_by_2_mod_180_v2 on G, M, S, B, J, M we get angle(G, M, S) == angle(B, J, M) + 180 mod 360
By divide_by_2_mod_180_v3 on F, B, T, K, M, J we get angle(F, B, T) == angle(K, M, J) + 180 mod 360
By divide_by_2_mod_180_v3 on S, C, G, F, L, J we get angle(S, C, G) == angle(F, L, J) + 180 mod 360
By divide_by_2_mod_180_v3 on G, K, J, F, B, K we get angle(G, K, J) == angle(F, B, K) + 180 mod 360
By divide_by_2_mod_180_v3 on M, K, J, T, B, F we get angle(M, K, J) == angle(T, B, F) + 180 mod 360
By divide_by_2_mod_180_v3 on J, C, S, F, M, J we get angle(J, C, S) == angle(F, M, J) + 180 mod 360
By divide_by_2_mod_180_v1 on C, G, K, J, A, B we get angle(C, G, K) == angle(J, A, B) mod 360
By divide_by_2_mod_180_v1 on F, J, M, G, M, C we get angle(F, J, M) == angle(G, M, C) mod 360
By divide_by_2_mod_180_v1 on M, J, G, M, L, A we get angle(M, J, G) == angle(M, L, A) mod 360
By divide_by_2_mod_180_v2 on J, K, G, F, B, C we get angle(J, K, G) == angle(F, B, C) + 180 mod 360
By divide_by_2_mod_180_v2 on J, C, L, J, M, F we get angle(J, C, L) == angle(J, M, F) + 180 mod 360
By divide_by_2_mod_180_v0 on C, L, K, C, J, B we get angle(C, J, B) == angle(C, L, K) mod 360
By divide_by_2_mod_180_v1 on J, L, K, C, A, J we get angle(C, A, J) == angle(J, L, K) mod 360
By divide_by_2_mod_180_v2 on G, C, S, J, L, F we get angle(G, C, S) == angle(J, L, F) + 180 mod 360
By divide_by_2_mod_180_v0 on L, K, G, G, J, M we get angle(G, J, M) == angle(L, K, G) mod 360
By divide_by_2_mod_180_v3 on S, M, G, C, J, A we get angle(S, M, G) == angle(C, J, A) + 180 mod 360
By divide_by_2_mod_180_v2 on A, C, J, J, L, M we get angle(A, C, J) == angle(J, L, M) + 180 mod 360
By divide_by_2_mod_180_v1 on K, J, A, K, L, C we get angle(K, J, A) == angle(K, L, C) mod 360
By divide_by_2_mod_180_v3 on F, B, M, J, K, M we get angle(F, B, M) == angle(J, K, M) + 180 mod 360
By divide_by_2_mod_180_v3 on F, M, T, L, J, G we get angle(F, M, T) == angle(L, J, G) + 180 mod 360
By divide_by_2_mod_180_v2 on K, B, J, G, M, J we get angle(K, B, J) == angle(G, M, J) + 180 mod 360
By divide_by_2_mod_180_v3 on M, K, J, S, B, J we get angle(M, K, J) == angle(S, B, J) + 180 mod 360
By divide_by_2_mod_180_v3 on B, M, G, G, J, A we get angle(B, M, G) == angle(G, J, A) + 180 mod 360
By divide_by_2_mod_180_v3 on B, J, G, G, M, F we get angle(B, J, G) == angle(G, M, F) + 180 mod 360
By divide_by_2_mod_180_v2 on G, J, A, C, M, K we get angle(G, J, A) == angle(C, M, K) + 180 mod 360
By divide_by_2_mod_180_v0 on J, K, G, K, B, J we get angle(J, K, G) == angle(K, B, J) mod 360
By divide_by_2_mod_180_v2 on M, J, F, T, M, K we get angle(M, J, F) == angle(T, M, K) + 180 mod 360
By divide_by_2_mod_180_v3 on B, J, M, G, M, B we get angle(B, J, M) == angle(G, M, B) + 180 mod 360
By divide_by_2_mod_180_v3 on G, K, J, S, B, J we get angle(G, K, J) == angle(S, B, J) + 180 mod 360
By divide_by_2_mod_180_v1 on F, J, G, B, K, L we get angle(B, K, L) == angle(F, J, G) mod 360
By divide_by_2_mod_180_v2 on T, M, F, M, J, G we get angle(T, M, F) == angle(M, J, G) + 180 mod 360
By between_imply_segment_sum on M, B, S we get distance(M, S) == distance(B, M) + distance(B, S)
By divide_by_2_mod_180_v2 on M, J, B, S, M, G we get angle(M, J, B) == angle(S, M, G) + 180 mod 360
By divide_by_2_mod_180_v2 on F, B, S, G, M, J we get angle(F, B, S) == angle(G, M, J) + 180 mod 360
By divide_by_2_mod_180_v3 on J, M, K, M, B, F we get angle(J, M, K) == angle(M, B, F) + 180 mod 360
By reverse_direction on midpoint(S, T), C we get 180 == direction(midpoint(S, T), C) - direction(C, midpoint(S, T)) mod 360
By divide_by_2_mod_180_v3 on B, J, G, K, M, L we get angle(B, J, G) == angle(K, M, L) + 180 mod 360
By divide_by_2_mod_180_v3 on J, L, F, L, C, G we get angle(J, L, F) == angle(L, C, G) + 180 mod 360
By divide_by_2_mod_180_v2 on K, M, L, K, J, A we get angle(K, M, L) == angle(K, J, A) + 180 mod 360
By divide_by_2_mod_180_v2 on C, B, F, J, M, K we get angle(C, B, F) == angle(J, M, K) + 180 mod 360
By divide_by_2_mod_180_v3 on K, J, B, K, M, T we get angle(K, J, B) == angle(K, M, T) + 180 mod 360
By divide_by_2_mod_180_v2 on M, J, F, S, M, G we get angle(M, J, F) == angle(S, M, G) + 180 mod 360
By divide_by_2_mod_180_v2 on A, J, K, L, M, K we get angle(A, J, K) == angle(L, M, K) + 180 mod 360
By divide_by_2_mod_180_v2 on T, B, F, J, M, K we get angle(T, B, F) == angle(J, M, K) + 180 mod 360
By divide_by_2_mod_180_v3 on G, J, L, C, M, F we get angle(G, J, L) == angle(C, M, F) + 180 mod 360
By divide_by_2_mod_180_v3 on B, C, G, F, L, J we get angle(B, C, G) == angle(F, L, J) + 180 mod 360
By divide_by_2_mod_180_v2 on T, M, F, C, J, L we get angle(T, M, F) == angle(C, J, L) + 180 mod 360
By divide_by_2_mod_180_v3 on G, M, J, J, B, T we get angle(G, M, J) == angle(J, B, T) + 180 mod 360
By divide_by_2_mod_180_v2 on G, C, A, J, M, F we get angle(G, C, A) == angle(J, M, F) + 180 mod 360
By divide_by_2_mod_180_v0 on K, A, J, K, G, C we get angle(K, A, J) == angle(K, G, C) mod 360
By divide_by_2_mod_180_v3 on J, L, M, G, C, M we get angle(J, L, M) == angle(G, C, M) + 180 mod 360
By divide_by_2_mod_180_v3 on F, M, C, A, J, F we get angle(F, M, C) == angle(A, J, F) + 180 mod 360
By divide_by_2_mod_180_v3 on F, J, C, K, M, L we get angle(F, J, C) == angle(K, M, L) + 180 mod 360
By divide_by_2_mod_180_v3 on S, M, G, M, J, F we get angle(S, M, G) == angle(M, J, F) + 180 mod 360
By divide_by_2_mod_180_v3 on L, M, B, L, J, G we get angle(L, M, B) == angle(L, J, G) + 180 mod 360
By reverse_direction on K, midpoint(K, M) we get 180 == direction(K, midpoint(K, M)) - direction(midpoint(K, M), K) mod 360
By divide_by_2_mod_180_v3 on B, C, G, J, M, L we get angle(B, C, G) == angle(J, M, L) + 180 mod 360
By divide_by_2_mod_180_v2 on S, B, J, J, M, K we get angle(S, B, J) == angle(J, M, K) + 180 mod 360
By reverse_direction on M, midpoint(L, M) we get 180 == direction(M, midpoint(L, M)) - direction(midpoint(L, M), M) mod 360
By divide_by_2_mod_180_v2 on M, J, F, B, M, G we get angle(M, J, F) == angle(B, M, G) + 180 mod 360
By divide_by_2_mod_180_v3 on S, M, G, M, J, B we get angle(S, M, G) == angle(M, J, B) + 180 mod 360
By divide_by_2_mod_180_v2 on C, J, M, F, M, C we get angle(C, J, M) == angle(F, M, C) + 180 mod 360
By divide_by_2_mod_180_v1 on K, M, S, A, J, C we get angle(A, J, C) == angle(K, M, S) mod 360
By divide_by_2_mod_180_v2 on G, J, A, T, M, K we get angle(G, J, A) == angle(T, M, K) + 180 mod 360
By divide_by_2_mod_180_v2 on K, M, C, K, J, F we get angle(K, M, C) == angle(K, J, F) + 180 mod 360
By divide_by_2_mod_180_v2 on J, B, A, J, M, K we get angle(J, B, A) == angle(J, M, K) + 180 mod 360
By divide_by_2_mod_180_v3 on M, B, J, J, M, G we get angle(M, B, J) == angle(J, M, G) + 180 mod 360
By divide_by_2_mod_180_v2 on M, J, B, C, M, K we get angle(M, J, B) == angle(C, M, K) + 180 mod 360
By divide_by_2_mod_180_v3 on F, J, A, S, M, L we get angle(F, J, A) == angle(S, M, L) + 180 mod 360
By divide_by_2_mod_180_v3 on G, M, J, A, B, F we get angle(G, M, J) == angle(A, B, F) + 180 mod 360
By divide_by_2_mod_180_v2 on F, J, K, B, M, G we get angle(F, J, K) == angle(B, M, G) + 180 mod 360
By divide_by_2_mod_180_v3 on G, K, J, M, B, F we get angle(G, K, J) == angle(M, B, F) + 180 mod 360
By divide_by_2_mod_180_v0 on M, K, A, B, J, K we get angle(B, J, K) == angle(M, K, A) mod 360
By divide_by_2_mod_180_v3 on S, B, F, J, M, G we get angle(S, B, F) == angle(J, M, G) + 180 mod 360
By divide_by_2_mod_180_v3 on F, J, A, T, M, F we get angle(F, J, A) == angle(T, M, F) + 180 mod 360
By divide_by_2_mod_180_v2 on B, M, L, C, J, L we get angle(B, M, L) == angle(C, J, L) + 180 mod 360
By divide_by_2_mod_180_v3 on F, M, C, A, J, B we get angle(F, M, C) == angle(A, J, B) + 180 mod 360
By divide_by_2_mod_180_v2 on G, J, F, F, M, G we get angle(G, J, F) == angle(F, M, G) + 180 mod 360
By reverse_direction on midpoint(K, M), M we get 180 == direction(midpoint(K, M), M) - direction(M, midpoint(K, M)) mod 360
By between_imply_segment_sum on T, C, S we get distance(S, T) == distance(C, T) + distance(C, S)
By divide_by_2_mod_180_v2 on K, M, J, K, B, F we get angle(K, M, J) == angle(K, B, F) + 180 mod 360
By divide_by_2_mod_180_v3 on F, J, M, K, M, T we get angle(F, J, M) == angle(K, M, T) + 180 mod 360
By divide_by_2_mod_180_v3 on B, M, G, M, J, B we get angle(B, M, G) == angle(M, J, B) + 180 mod 360
By divide_by_2_mod_180_v2 on F, M, J, G, C, T we get angle(F, M, J) == angle(G, C, T) + 180 mod 360
By divide_by_2_mod_180_v0 on J, B, C, K, M, J we get angle(J, B, C) == angle(K, M, J) mod 360
By divide_by_2_mod_180_v2 on F, B, K, J, M, K we get angle(F, B, K) == angle(J, M, K) + 180 mod 360
By divide_by_2_mod_180_v3 on B, M, G, M, J, F we get angle(B, M, G) == angle(M, J, F) + 180 mod 360
By internal_angle_bisector_definition_v0 on F, midpoint(L, M), F, M we get angle(F, M, midpoint(L, M)) == angle(midpoint(L, M), M, F) mod 360
By divide_by_2_mod_180_v3 on L, M, J, G, C, M we get angle(L, M, J) == angle(G, C, M) + 180 mod 360
By divide_by_2_mod_180_v2 on J, M, L, J, C, A we get angle(J, M, L) == angle(J, C, A) + 180 mod 360
By divide_by_2_mod_180_v2 on J, M, G, C, B, J we get angle(J, M, G) == angle(C, B, J) + 180 mod 360
By reverse_direction on midpoint(L, M), M we get 180 == direction(midpoint(L, M), M) - direction(M, midpoint(L, M)) mod 360
By divide_by_2_mod_180_v2 on B, J, K, T, M, K we get angle(B, J, K) == angle(T, M, K) + 180 mod 360
By divide_by_2_mod_180_v2 on J, K, M, J, B, S we get angle(J, K, M) == angle(J, B, S) + 180 mod 360
By divide_by_2_mod_180_v2 on G, J, A, B, M, G we get angle(G, J, A) == angle(B, M, G) + 180 mod 360
By internal_angle_bisector_definition_v0 on F, midpoint(L, M), F, L we get angle(F, L, midpoint(L, M)) == angle(midpoint(L, M), L, F) mod 360
By divide_by_2_mod_180_v2 on C, J, F, L, M, K we get angle(C, J, F) == angle(L, M, K) + 180 mod 360
By reverse_direction on M, midpoint(K, M) we get 180 == direction(M, midpoint(K, M)) - direction(midpoint(K, M), M) mod 360
By reverse_direction on K, midpoint(K, L) we get 180 == direction(K, midpoint(K, L)) - direction(midpoint(K, L), K) mod 360
By reverse_direction on L, midpoint(L, M) we get 180 == direction(L, midpoint(L, M)) - direction(midpoint(L, M), L) mod 360
By reverse_direction on midpoint(L, M), L we get 180 == direction(midpoint(L, M), L) - direction(L, midpoint(L, M)) mod 360
By reverse_direction on midpoint(S, T), B we get 180 == direction(midpoint(S, T), B) - direction(B, midpoint(S, T)) mod 360
By reverse_direction on midpoint(K, L), K we get 180 == direction(midpoint(K, L), K) - direction(K, midpoint(K, L)) mod 360
By reverse_direction on midpoint(K, L), L we get 180 == direction(midpoint(K, L), L) - direction(L, midpoint(K, L)) mod 360
By reverse_direction on midpoint(K, M), K we get 180 == direction(midpoint(K, M), K) - direction(K, midpoint(K, M)) mod 360
By reverse_direction on L, midpoint(K, L) we get 180 == direction(L, midpoint(K, L)) - direction(midpoint(K, L), L) mod 360
By between_imply_segment_sum on B, M, T we get distance(B, T) == distance(B, M) + distance(M, T)
By internal_angle_bisector_definition_v0 on G, midpoint(K, M), G, K we get angle(G, K, midpoint(K, M)) == angle(midpoint(K, M), K, G) mod 360
By reverse_direction on C, midpoint(S, T) we get 180 == direction(C, midpoint(S, T)) - direction(midpoint(S, T), C) mod 360
By reverse_direction on B, midpoint(S, T) we get 180 == direction(B, midpoint(S, T)) - direction(midpoint(S, T), B) mod 360
By external_angle_bisector_definition_v0_r on C, B, S, M we get Line(B, M) == external_angle_bisector(C, M, S)
By internal_angle_bisector_definition_v0 on T, midpoint(K, M), K, B we get angle(T, B, midpoint(K, M)) == angle(midpoint(K, M), B, K) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(S, T), B, T, S we get Line(B, S) == internal_angle_bisector(T, S, midpoint(S, T))
By external_angle_bisector_definition_v0_r on C, midpoint(S, T), S, B we get external_angle_bisector(C, B, S) == Line(B, midpoint(S, T))
By external_angle_bisector_definition_v0_r on C, T, S, B we get Line(B, T) == external_angle_bisector(C, B, S)
By internal_angle_bisector_definition_v0_r on T, B, T, M we get Line(B, M) == internal_angle_bisector(T, M, T)
By internal_angle_bisector_definition_v0_r on C, midpoint(S, T), T, B we get internal_angle_bisector(C, B, T) == Line(B, midpoint(S, T))
By collinear_definition on G, C, midpoint(L, M) we get C in Line(G, midpoint(L, M)), midpoint(L, M) in Line(C, G), Line(C, G) == Line(G, midpoint(L, M)), 0 == 2 * angle(C, G, midpoint(L, M)) mod 360
By internal_angle_bisector_definition_v0_r on M, T, C, B we get Line(B, T) == internal_angle_bisector(C, B, M)
By internal_angle_bisector_definition_v0_r on midpoint(S, T), B, C, T we get Line(B, T) == internal_angle_bisector(C, T, midpoint(S, T))
By external_angle_bisector_definition_v0_r on C, T, S, M we get Line(M, T) == external_angle_bisector(C, M, S)
By internal_angle_bisector_definition_v0_r on M, B, C, S we get Line(B, S) == internal_angle_bisector(C, S, M)
By internal_angle_bisector_definition_v0_r on B, C, M, S we get Line(C, S) == internal_angle_bisector(B, S, M)
By external_angle_bisector_definition_v0_r on T, C, S, M we get Line(C, M) == external_angle_bisector(S, M, T)
By internal_angle_bisector_definition_v0_r on F, M, midpoint(L, M), L we get Line(L, M) == internal_angle_bisector(F, L, midpoint(L, M))
By internal_angle_bisector_definition_v0_r on B, T, C, S we get Line(S, T) == internal_angle_bisector(B, S, C)
By internal_angle_bisector_definition_v0_r on midpoint(S, T), C, B, S we get Line(C, S) == internal_angle_bisector(B, S, midpoint(S, T))
By external_angle_bisector_definition_v0_r on B, S, T, C we get Line(C, S) == external_angle_bisector(B, C, T)
By internal_angle_bisector_definition_v0_r on M, T, C, S we get Line(S, T) == internal_angle_bisector(C, S, M)
By internal_angle_bisector_definition_v0_r on M, midpoint(S, T), C, S we get internal_angle_bisector(C, S, M) == Line(S, midpoint(S, T))
By perpendicular_angle_conditions_v0 on A, midpoint(K, L), K we get angle(A, midpoint(K, L), K) == orientation(A, midpoint(K, L), K) mod 360
By internal_angle_bisector_definition_v0 on C, midpoint(L, M), C, G we get angle(C, G, midpoint(L, M)) == angle(midpoint(L, M), G, C) mod 360
By external_angle_bisector_definition_v0 on A, midpoint(L, M), S, C we get 180 == angle(A, C, midpoint(L, M)) + angle(S, C, midpoint(L, M)) mod 360
By anti_similar_triangle_basic_properties on J, L, C, J, M, C we get angle(J, L, C) == 0 - angle(J, M, C) mod 360, angle(L, C, J) == 0 - angle(M, C, J) mod 360, angle(C, J, L) == 0 - angle(C, J, M) mod 360, log(distance(J, L)) + log(distance(C, M)) == log(distance(J, M)) + log(distance(C, L)), log(distance(C, L)) + log(distance(C, J)) == log(distance(C, M)) + log(distance(C, J)), log(distance(C, J)) + log(distance(J, L)) == log(distance(C, J)) + log(distance(J, M))
By internal_angle_bisector_definition_v0_r on K, M, K, midpoint(K, M) we get Line(M, midpoint(K, M)) == internal_angle_bisector(K, midpoint(K, M), K)
By concyclic_definition_0 on M, J, K, B we get B in Circle(J, K, M)
By external_angle_bisector_definition_v0_r on B, S, T, M we get Line(M, S) == external_angle_bisector(B, M, T)
By external_angle_bisector_definition_v0_r on S, M, C, B we get Line(B, M) == external_angle_bisector(C, B, S)
By concyclic_definition_0 on A, L, K, J we get J in Circle(A, K, L)
By external_angle_bisector_definition_v0_r on B, midpoint(S, T), T, C we get external_angle_bisector(B, C, T) == Line(C, midpoint(S, T))
By internal_angle_bisector_definition_v0_r on T, midpoint(S, T), M, S we get internal_angle_bisector(M, S, T) == Line(S, midpoint(S, T))
By concyclic_definition_0 on L, M, J, C we get C in Circle(J, L, M)
By concyclic_definition_0 on J, L, A, K we get K in Circle(A, J, L)
By internal_angle_bisector_definition_v0_r on G, M, midpoint(K, M), K we get Line(K, M) == internal_angle_bisector(G, K, midpoint(K, M))
By internal_angle_bisector_definition_v0_r on C, midpoint(S, T), M, B we get internal_angle_bisector(C, B, M) == Line(B, midpoint(S, T))
By internal_angle_bisector_definition_v0_r on midpoint(S, T), C, midpoint(S, T), B we get Line(B, C) == internal_angle_bisector(midpoint(S, T), B, midpoint(S, T))
By internal_angle_bisector_definition_v0 on K, midpoint(K, L), L, J we get angle(K, J, midpoint(K, L)) == angle(midpoint(K, L), J, L) mod 360
By collinear_definition on C, G, midpoint(L, M) we get G in Line(C, midpoint(L, M)), midpoint(L, M) in Line(C, G), Line(C, G) == Line(C, midpoint(L, M)), 0 == 2 * angle(G, C, midpoint(L, M)) mod 360
By internal_angle_bisector_definition_v0_r on M, T, B, C we get Line(C, T) == internal_angle_bisector(B, C, M)
By internal_angle_bisector_definition_v0_r on B, M, S, T we get Line(M, T) == internal_angle_bisector(B, T, S)
By external_angle_bisector_definition_v0_r on B, S, C, M we get Line(M, S) == external_angle_bisector(B, M, C)
By internal_angle_bisector_definition_v0_r on M, S, B, C we get Line(C, S) == internal_angle_bisector(B, C, M)
By internal_angle_bisector_definition_v0_r on B, midpoint(S, T), S, T we get internal_angle_bisector(B, T, S) == Line(T, midpoint(S, T))
By concyclic_definition_0 on L, J, C, M we get M in Circle(C, J, L)
By collinear_definition on B, F, midpoint(K, M) we get F in Line(B, midpoint(K, M)), midpoint(K, M) in Line(B, F), Line(B, F) == Line(B, midpoint(K, M)), 0 == 2 * angle(F, B, midpoint(K, M)) mod 360
By internal_angle_bisector_definition_v0 on L, midpoint(L, M), B, C we get angle(L, C, midpoint(L, M)) == angle(midpoint(L, M), C, B) mod 360
By internal_angle_bisector_definition_v0_r on B, M, S, C we get Line(C, M) == internal_angle_bisector(B, C, S)
By internal_angle_bisector_definition_v0_r on C, T, C, midpoint(S, T) we get Line(T, midpoint(S, T)) == internal_angle_bisector(C, midpoint(S, T), C)
By internal_angle_bisector_definition_v0 on F, midpoint(K, M), F, J we get angle(F, J, midpoint(K, M)) == angle(midpoint(K, M), J, F) mod 360
By concyclic_definition_0 on J, M, C, L we get L in Circle(C, J, M)
By external_angle_bisector_definition_v0_r on T, C, B, M we get Line(C, M) == external_angle_bisector(B, M, T)
By internal_angle_bisector_definition_v0_r on B, C, midpoint(S, T), T we get Line(C, T) == internal_angle_bisector(B, T, midpoint(S, T))
By internal_angle_bisector_definition_v0_r on C, midpoint(S, T), T, S we get internal_angle_bisector(C, S, T) == Line(S, midpoint(S, T))
By internal_angle_bisector_definition_v0_r on midpoint(S, T), S, C, T we get Line(S, T) == internal_angle_bisector(C, T, midpoint(S, T))
By internal_angle_bisector_definition_v0 on B, midpoint(K, L), L, A we get angle(B, A, midpoint(K, L)) == angle(midpoint(K, L), A, L) mod 360
By anti_similar_triangle_basic_properties on A, K, J, A, L, J we get angle(A, K, J) == 0 - angle(A, L, J) mod 360, angle(K, J, A) == 0 - angle(L, J, A) mod 360, angle(J, A, K) == 0 - angle(J, A, L) mod 360, log(distance(A, K)) + log(distance(J, L)) == log(distance(A, L)) + log(distance(J, K)), log(distance(J, K)) + log(distance(A, J)) == log(distance(J, L)) + log(distance(A, J)), log(distance(A, J)) + log(distance(A, K)) == log(distance(A, J)) + log(distance(A, L))
By internal_angle_bisector_definition_v0 on K, midpoint(K, L), C, A we get angle(K, A, midpoint(K, L)) == angle(midpoint(K, L), A, C) mod 360
By internal_angle_bisector_definition_v0_r on M, K, M, midpoint(K, M) we get Line(K, midpoint(K, M)) == internal_angle_bisector(M, midpoint(K, M), M)
By internal_angle_bisector_definition_v0_r on T, C, T, M we get Line(C, M) == internal_angle_bisector(T, M, T)
By internal_angle_bisector_definition_v0_r on K, midpoint(K, L), K, L we get internal_angle_bisector(K, L, K) == Line(L, midpoint(K, L))
By concyclic_definition_0 on A, K, J, L we get L in Circle(A, J, K)
By collinear_definition on B, midpoint(K, M), J we get midpoint(K, M) in Line(B, J), J in Line(B, midpoint(K, M)), Line(B, J) == Line(B, midpoint(K, M)), 0 == 2 * angle(midpoint(K, M), B, J) mod 360
By internal_angle_bisector_definition_v0 on M, midpoint(L, M), L, J we get angle(M, J, midpoint(L, M)) == angle(midpoint(L, M), J, L) mod 360
By internal_angle_bisector_definition_v0 on K, midpoint(K, M), M, B we get angle(K, B, midpoint(K, M)) == angle(midpoint(K, M), B, M) mod 360
By external_angle_bisector_definition_v0_r on S, B, T, M we get Line(B, M) == external_angle_bisector(S, M, T)
By internal_angle_bisector_definition_v0 on K, midpoint(K, M), M, J we get angle(K, J, midpoint(K, M)) == angle(midpoint(K, M), J, M) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(S, T), M, S, T we get Line(M, T) == internal_angle_bisector(S, T, midpoint(S, T))
By external_angle_bisector_definition_v0_r on midpoint(L, M), L, F, M we get Line(L, M) == external_angle_bisector(F, M, midpoint(L, M))
By perpendicular_angle_conditions_v0 on M, midpoint(K, M), F we get angle(M, midpoint(K, M), F) == orientation(F, M, midpoint(K, M)) mod 360
By external_angle_bisector_definition_v0 on A, midpoint(K, M), C, B we get 180 == angle(A, B, midpoint(K, M)) + angle(C, B, midpoint(K, M)) mod 360
By internal_angle_bisector_definition_v0_r on T, C, M, S we get Line(C, S) == internal_angle_bisector(M, S, T)
By concyclic_definition_0 on L, J, K, A we get A in Circle(J, K, L)
By internal_angle_bisector_definition_v0_r on M, S, C, B we get Line(B, S) == internal_angle_bisector(C, B, M)
By concyclic_definition_0 on M, B, K, J we get J in Circle(B, K, M)
By internal_angle_bisector_definition_v0_r on S, B, C, T we get Line(B, T) == internal_angle_bisector(C, T, S)
By internal_angle_bisector_definition_v0_r on midpoint(L, M), M, midpoint(L, M), L we get Line(L, M) == internal_angle_bisector(midpoint(L, M), L, midpoint(L, M))
By anti_similar_triangle_basic_properties on J, B, M, J, B, K we get angle(J, B, M) == 0 - angle(J, B, K) mod 360, angle(B, M, J) == 0 - angle(B, K, J) mod 360, angle(M, J, B) == 0 - angle(K, J, B) mod 360, log(distance(B, J)) + log(distance(B, K)) == log(distance(B, J)) + log(distance(B, M)), log(distance(B, K)) + log(distance(J, M)) == log(distance(B, M)) + log(distance(J, K)), log(distance(J, K)) + log(distance(B, J)) == log(distance(J, M)) + log(distance(B, J))
By perpendicular_angle_conditions_v0 on L, midpoint(K, L), J we get angle(L, midpoint(K, L), J) == orientation(J, L, midpoint(K, L)) mod 360
By external_angle_bisector_definition_v0 on B, midpoint(L, M), A, C we get 180 == angle(B, C, midpoint(L, M)) + angle(A, C, midpoint(L, M)) mod 360
By internal_angle_bisector_definition_v0 on M, midpoint(K, M), K, B we get angle(M, B, midpoint(K, M)) == angle(midpoint(K, M), B, K) mod 360
By internal_angle_bisector_definition_v0_r on S, midpoint(S, T), M, T we get internal_angle_bisector(M, T, S) == Line(T, midpoint(S, T))
By collinear_definition on A, J, midpoint(K, L) we get J in Line(A, midpoint(K, L)), midpoint(K, L) in Line(A, J), Line(A, J) == Line(A, midpoint(K, L)), 0 == 2 * angle(J, A, midpoint(K, L)) mod 360
By external_angle_bisector_definition_v0_r on C, T, B, M we get Line(M, T) == external_angle_bisector(B, M, C)
By internal_angle_bisector_definition_v0_r on midpoint(S, T), M, midpoint(S, T), B we get Line(B, M) == internal_angle_bisector(midpoint(S, T), B, midpoint(S, T))
By external_angle_bisector_definition_v0_r on T, C, S, midpoint(S, T) we get Line(C, midpoint(S, T)) == external_angle_bisector(S, midpoint(S, T), T)
By internal_angle_bisector_definition_v0_r on M, S, C, T we get Line(S, T) == internal_angle_bisector(C, T, M)
By external_angle_bisector_definition_v0_r on S, B, T, midpoint(S, T) we get Line(B, midpoint(S, T)) == external_angle_bisector(S, midpoint(S, T), T)
By internal_angle_bisector_definition_v0_r on midpoint(S, T), S, midpoint(S, T), C we get Line(C, S) == internal_angle_bisector(midpoint(S, T), C, midpoint(S, T))
By internal_angle_bisector_definition_v0_r on T, S, C, B we get Line(B, S) == internal_angle_bisector(C, B, T)
By perpendicular_angle_conditions_v0 on F, midpoint(K, M), K we get angle(F, midpoint(K, M), K) == orientation(F, midpoint(K, M), K) mod 360
By internal_angle_bisector_definition_v0_r on T, S, C, M we get Line(M, S) == internal_angle_bisector(C, M, T)
By internal_angle_bisector_definition_v0_r on M, C, M, T we get Line(C, T) == internal_angle_bisector(M, T, M)
By internal_angle_bisector_definition_v0_r on M, midpoint(S, T), C, T we get internal_angle_bisector(C, T, M) == Line(T, midpoint(S, T))
By internal_angle_bisector_definition_v0_r on T, C, B, S we get Line(C, S) == internal_angle_bisector(B, S, T)
By perpendicular_angle_conditions_v0 on G, midpoint(L, M), L we get angle(G, midpoint(L, M), L) == orientation(G, midpoint(L, M), L) mod 360
By collinear_definition on G, midpoint(L, M), C we get midpoint(L, M) in Line(C, G), C in Line(G, midpoint(L, M)), Line(C, G) == Line(G, midpoint(L, M)), 0 == 2 * angle(midpoint(L, M), G, C) mod 360
By internal_angle_bisector_definition_v0_r on L, midpoint(K, L), L, K we get internal_angle_bisector(L, K, L) == Line(K, midpoint(K, L))
By internal_angle_bisector_definition_v0_r on T, midpoint(S, T), B, S we get internal_angle_bisector(B, S, T) == Line(S, midpoint(S, T))
By internal_angle_bisector_definition_v0_r on M, T, M, S we get Line(S, T) == internal_angle_bisector(M, S, M)
By internal_angle_bisector_definition_v0_r on T, B, C, M we get Line(B, M) == internal_angle_bisector(C, M, T)
By internal_angle_bisector_definition_v0 on G, midpoint(L, M), G, C we get angle(G, C, midpoint(L, M)) == angle(midpoint(L, M), C, G) mod 360
By internal_angle_bisector_definition_v0_r on S, T, B, M we get Line(M, T) == internal_angle_bisector(B, M, S)
By external_angle_bisector_definition_v0 on A, midpoint(L, M), M, C we get 180 == angle(A, C, midpoint(L, M)) + angle(M, C, midpoint(L, M)) mod 360
By internal_angle_bisector_definition_v0_r on S, midpoint(S, T), B, C we get internal_angle_bisector(B, C, S) == Line(C, midpoint(S, T))
By external_angle_bisector_definition_v0_r on T, M, B, C we get Line(C, M) == external_angle_bisector(B, C, T)
By internal_angle_bisector_definition_v0_r on L, K, L, midpoint(K, L) we get Line(K, midpoint(K, L)) == internal_angle_bisector(L, midpoint(K, L), L)
By concyclic_definition_0 on M, C, L, J we get J in Circle(C, L, M)
By perpendicular_angle_conditions_v0 on C, midpoint(L, M), M we get angle(C, midpoint(L, M), M) == orientation(C, midpoint(L, M), M) mod 360
By perpendicular_angle_conditions_v0 on J, midpoint(K, M), M we get angle(J, midpoint(K, M), M) == orientation(J, midpoint(K, M), M) mod 360
By collinear_definition on J, B, midpoint(K, M) we get B in Line(J, midpoint(K, M)), midpoint(K, M) in Line(B, J), Line(B, J) == Line(J, midpoint(K, M)), 0 == 2 * angle(B, J, midpoint(K, M)) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(S, T), T, midpoint(S, T), C we get Line(C, T) == internal_angle_bisector(midpoint(S, T), C, midpoint(S, T))
By internal_angle_bisector_definition_v0 on K, midpoint(K, M), C, B we get angle(K, B, midpoint(K, M)) == angle(midpoint(K, M), B, C) mod 360
By internal_angle_bisector_definition_v0 on C, midpoint(L, M), C, J we get angle(C, J, midpoint(L, M)) == angle(midpoint(L, M), J, C) mod 360
By perpendicular_angle_conditions_v0 on K, midpoint(K, M), F we get angle(K, midpoint(K, M), F) == orientation(F, K, midpoint(K, M)) mod 360
By perpendicular_angle_conditions_v0 on J, midpoint(K, M), K we get angle(J, midpoint(K, M), K) == orientation(J, midpoint(K, M), K) mod 360
By internal_angle_bisector_definition_v0_r on M, midpoint(S, T), B, T we get internal_angle_bisector(B, T, M) == Line(T, midpoint(S, T))
By internal_angle_bisector_definition_v0 on L, midpoint(K, L), B, A we get angle(L, A, midpoint(K, L)) == angle(midpoint(K, L), A, B) mod 360
By internal_angle_bisector_definition_v0_r on B, M, midpoint(S, T), T we get Line(M, T) == internal_angle_bisector(B, T, midpoint(S, T))
By internal_angle_bisector_definition_v0_r on B, S, C, T we get Line(S, T) == internal_angle_bisector(B, T, C)
By isosceles_triangle_altitude_v1 on F, K, M we get identical(perpendicular_bisector(K, M), internal_angle_bisector(K, F, M), perpendicular_line(F, Line(K, M)))
By internal_angle_bisector_definition_v0_r on M, B, midpoint(S, T), T we get Line(B, T) == internal_angle_bisector(M, T, midpoint(S, T))
By internal_angle_bisector_definition_v0 on T, midpoint(L, M), A, C we get angle(T, C, midpoint(L, M)) == angle(midpoint(L, M), C, A) mod 360
By internal_angle_bisector_definition_v0_r on B, M, T, S we get Line(M, S) == internal_angle_bisector(B, S, T)
By internal_angle_bisector_definition_v0 on C, midpoint(K, M), K, B we get angle(C, B, midpoint(K, M)) == angle(midpoint(K, M), B, K) mod 360
By concyclic_definition_0 on K, B, J, M we get M in Circle(B, J, K)
By internal_angle_bisector_definition_v0_r on midpoint(S, T), M, C, T we get Line(M, T) == internal_angle_bisector(C, T, midpoint(S, T))
By perpendicular_angle_conditions_v0 on B, midpoint(K, M), K we get angle(B, midpoint(K, M), K) == orientation(B, midpoint(K, M), K) mod 360
By collinear_definition on C, midpoint(L, M), G we get midpoint(L, M) in Line(C, G), G in Line(C, midpoint(L, M)), Line(C, G) == Line(C, midpoint(L, M)), 0 == 2 * angle(midpoint(L, M), C, G) mod 360
By perpendicular_angle_conditions_v0 on F, midpoint(K, M), M we get angle(F, midpoint(K, M), M) == orientation(F, midpoint(K, M), M) mod 360
By perpendicular_angle_conditions_v0 on M, midpoint(K, M), B we get angle(M, midpoint(K, M), B) == orientation(B, M, midpoint(K, M)) mod 360
By internal_angle_bisector_definition_v0 on J, midpoint(K, M), J, B we get angle(J, B, midpoint(K, M)) == angle(midpoint(K, M), B, J) mod 360
By external_angle_bisector_definition_v0_r on G, K, midpoint(K, M), M we get Line(K, M) == external_angle_bisector(G, M, midpoint(K, M))
By internal_angle_bisector_definition_v0 on C, midpoint(K, L), B, A we get angle(C, A, midpoint(K, L)) == angle(midpoint(K, L), A, B) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(S, T), C, S, T we get Line(C, T) == internal_angle_bisector(S, T, midpoint(S, T))
By internal_angle_bisector_definition_v0 on M, midpoint(K, M), K, J we get angle(M, J, midpoint(K, M)) == angle(midpoint(K, M), J, K) mod 360
By internal_angle_bisector_definition_v0_r on T, B, M, S we get Line(B, S) == internal_angle_bisector(M, S, T)
By external_angle_bisector_definition_v0 on T, midpoint(L, M), L, C we get 180 == angle(T, C, midpoint(L, M)) + angle(L, C, midpoint(L, M)) mod 360
By internal_angle_bisector_definition_v0_r on M, B, C, T we get Line(B, T) == internal_angle_bisector(C, T, M)
By internal_angle_bisector_definition_v0 on M, midpoint(L, M), L, C we get angle(M, C, midpoint(L, M)) == angle(midpoint(L, M), C, L) mod 360
By collinear_definition on F, J, midpoint(K, M) we get J in Line(F, midpoint(K, M)), midpoint(K, M) in Line(F, J), Line(F, J) == Line(F, midpoint(K, M)), 0 == 2 * angle(J, F, midpoint(K, M)) mod 360
By internal_angle_bisector_definition_v0 on B, midpoint(K, M), B, F we get angle(B, F, midpoint(K, M)) == angle(midpoint(K, M), F, B) mod 360
By internal_angle_bisector_definition_v0 on S, midpoint(L, M), L, C we get angle(S, C, midpoint(L, M)) == angle(midpoint(L, M), C, L) mod 360
By collinear_definition on J, C, midpoint(L, M) we get C in Line(J, midpoint(L, M)), midpoint(L, M) in Line(C, J), Line(C, J) == Line(J, midpoint(L, M)), 0 == 2 * angle(C, J, midpoint(L, M)) mod 360
By internal_angle_bisector_definition_v0 on L, midpoint(K, L), K, J we get angle(L, J, midpoint(K, L)) == angle(midpoint(K, L), J, K) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(K, M), K, midpoint(K, M), M we get Line(K, M) == internal_angle_bisector(midpoint(K, M), M, midpoint(K, M))
By internal_angle_bisector_definition_v0_r on M, B, M, T we get Line(B, T) == internal_angle_bisector(M, T, M)
By collinear_definition on J, midpoint(L, M), G we get midpoint(L, M) in Line(G, J), G in Line(J, midpoint(L, M)), Line(G, J) == Line(J, midpoint(L, M)), 0 == 2 * angle(midpoint(L, M), J, G) mod 360
By internal_angle_bisector_definition_v0 on J, midpoint(L, M), J, C we get angle(J, C, midpoint(L, M)) == angle(midpoint(L, M), C, J) mod 360
By collinear_definition on B, midpoint(K, M), F we get midpoint(K, M) in Line(B, F), F in Line(B, midpoint(K, M)), Line(B, F) == Line(B, midpoint(K, M)), 0 == 2 * angle(midpoint(K, M), B, F) mod 360
By collinear_definition on J, midpoint(K, M), F we get midpoint(K, M) in Line(F, J), F in Line(J, midpoint(K, M)), Line(F, J) == Line(J, midpoint(K, M)), 0 == 2 * angle(midpoint(K, M), J, F) mod 360
By internal_angle_bisector_definition_v0 on L, midpoint(L, M), S, C we get angle(L, C, midpoint(L, M)) == angle(midpoint(L, M), C, S) mod 360
By internal_angle_bisector_definition_v0_r on C, midpoint(S, T), B, T we get internal_angle_bisector(B, T, C) == Line(T, midpoint(S, T))
By internal_angle_bisector_definition_v0_r on M, B, midpoint(S, T), S we get Line(B, S) == internal_angle_bisector(M, S, midpoint(S, T))
By internal_angle_bisector_definition_v0_r on midpoint(S, T), M, B, S we get Line(M, S) == internal_angle_bisector(B, S, midpoint(S, T))
By internal_angle_bisector_definition_v0_r on L, M, L, midpoint(L, M) we get Line(M, midpoint(L, M)) == internal_angle_bisector(L, midpoint(L, M), L)
By internal_angle_bisector_definition_v0_r on C, M, T, B we get Line(B, M) == internal_angle_bisector(C, B, T)
By collinear_definition on J, F, midpoint(K, M) we get F in Line(J, midpoint(K, M)), midpoint(K, M) in Line(F, J), Line(F, J) == Line(J, midpoint(K, M)), 0 == 2 * angle(F, J, midpoint(K, M)) mod 360
By collinear_definition on F, B, midpoint(K, M) we get B in Line(F, midpoint(K, M)), midpoint(K, M) in Line(B, F), Line(B, F) == Line(F, midpoint(K, M)), 0 == 2 * angle(B, F, midpoint(K, M)) mod 360
By internal_angle_bisector_definition_v0 on K, midpoint(K, L), L, A we get angle(K, A, midpoint(K, L)) == angle(midpoint(K, L), A, L) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(S, T), T, C, S we get Line(S, T) == internal_angle_bisector(C, S, midpoint(S, T))
By perpendicular_angle_conditions_v0 on M, midpoint(L, M), G we get angle(M, midpoint(L, M), G) == orientation(G, M, midpoint(L, M)) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(S, T), T, M, S we get Line(S, T) == internal_angle_bisector(M, S, midpoint(S, T))
By internal_angle_bisector_definition_v0_r on M, S, midpoint(S, T), T we get Line(S, T) == internal_angle_bisector(M, T, midpoint(S, T))
By internal_angle_bisector_definition_v0 on A, midpoint(L, M), T, C we get angle(A, C, midpoint(L, M)) == angle(midpoint(L, M), C, T) mod 360
By isosceles_triangle_properties on F, K, M we get distance(F, K) == distance(F, M), angle(F, K, M) == angle(K, M, F) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(S, T), B, C, S we get Line(B, S) == internal_angle_bisector(C, S, midpoint(S, T))
By internal_angle_bisector_definition_v0_r on B, C, S, T we get Line(C, T) == internal_angle_bisector(B, T, S)
By internal_angle_bisector_definition_v0_r on midpoint(S, T), T, midpoint(S, T), B we get Line(B, T) == internal_angle_bisector(midpoint(S, T), B, midpoint(S, T))
By internal_angle_bisector_definition_v0_r on S, T, S, M we get Line(M, T) == internal_angle_bisector(S, M, S)
By internal_angle_bisector_definition_v0_r on M, midpoint(S, T), M, S we get internal_angle_bisector(M, S, M) == Line(S, midpoint(S, T))
By internal_angle_bisector_definition_v0 on K, midpoint(K, M), T, B we get angle(K, B, midpoint(K, M)) == angle(midpoint(K, M), B, T) mod 360
By isosceles_triangle_properties on F, M, K we get distance(F, K) == distance(F, M), angle(F, M, K) == angle(M, K, F) mod 360
By internal_angle_bisector_definition_v0 on L, midpoint(L, M), M, J we get angle(L, J, midpoint(L, M)) == angle(midpoint(L, M), J, M) mod 360
By internal_angle_bisector_definition_v0 on L, midpoint(K, L), K, A we get angle(L, A, midpoint(K, L)) == angle(midpoint(K, L), A, K) mod 360
By internal_angle_bisector_definition_v0_r on B, S, midpoint(S, T), T we get Line(S, T) == internal_angle_bisector(B, T, midpoint(S, T))
By collinear_definition on J, A, midpoint(K, L) we get A in Line(J, midpoint(K, L)), midpoint(K, L) in Line(A, J), Line(A, J) == Line(J, midpoint(K, L)), 0 == 2 * angle(A, J, midpoint(K, L)) mod 360
By internal_angle_bisector_definition_v0 on C, midpoint(K, L), K, A we get angle(C, A, midpoint(K, L)) == angle(midpoint(K, L), A, K) mod 360
By perpendicular_angle_conditions_v0 on G, midpoint(L, M), M we get angle(G, midpoint(L, M), M) == orientation(G, midpoint(L, M), M) mod 360
By internal_angle_bisector_definition_v0_r on B, T, B, midpoint(S, T) we get Line(T, midpoint(S, T)) == internal_angle_bisector(B, midpoint(S, T), B)
By internal_angle_bisector_definition_v0 on F, midpoint(K, M), F, B we get angle(F, B, midpoint(K, M)) == angle(midpoint(K, M), B, F) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(S, T), B, S, T we get Line(B, T) == internal_angle_bisector(S, T, midpoint(S, T))
By internal_angle_bisector_definition_v0_r on S, C, M, T we get Line(C, T) == internal_angle_bisector(M, T, S)
By internal_angle_bisector_definition_v0_r on midpoint(K, L), K, midpoint(K, L), L we get Line(K, L) == internal_angle_bisector(midpoint(K, L), L, midpoint(K, L))
By perpendicular_angle_conditions_v0 on L, midpoint(L, M), G we get angle(L, midpoint(L, M), G) == orientation(G, L, midpoint(L, M)) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(L, M), L, midpoint(L, M), M we get Line(L, M) == internal_angle_bisector(midpoint(L, M), M, midpoint(L, M))
By internal_angle_bisector_definition_v0_r on S, B, S, M we get Line(B, M) == internal_angle_bisector(S, M, S)
By perpendicular_angle_conditions_v0 on L, midpoint(L, M), J we get angle(L, midpoint(L, M), J) == orientation(J, L, midpoint(L, M)) mod 360
By internal_angle_bisector_definition_v0_r on B, T, midpoint(S, T), S we get Line(S, T) == internal_angle_bisector(B, S, midpoint(S, T))
By internal_angle_bisector_definition_v0_r on C, B, T, S we get Line(B, S) == internal_angle_bisector(C, S, T)
By collinear_definition on F, midpoint(K, M), J we get midpoint(K, M) in Line(F, J), J in Line(F, midpoint(K, M)), Line(F, J) == Line(F, midpoint(K, M)), 0 == 2 * angle(midpoint(K, M), F, J) mod 360
By internal_angle_bisector_definition_v0_r on M, C, M, S we get Line(C, S) == internal_angle_bisector(M, S, M)
By internal_angle_bisector_definition_v0_r on B, T, S, C we get Line(C, T) == internal_angle_bisector(B, C, S)
By internal_angle_bisector_definition_v0_r on midpoint(K, L), L, midpoint(K, L), K we get Line(K, L) == internal_angle_bisector(midpoint(K, L), K, midpoint(K, L))
By collinear_definition on A, midpoint(K, L), J we get midpoint(K, L) in Line(A, J), J in Line(A, midpoint(K, L)), Line(A, J) == Line(A, midpoint(K, L)), 0 == 2 * angle(midpoint(K, L), A, J) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(S, T), S, midpoint(S, T), B we get Line(B, S) == internal_angle_bisector(midpoint(S, T), B, midpoint(S, T))
By perpendicular_angle_conditions_v0 on A, midpoint(K, L), L we get angle(A, midpoint(K, L), L) == orientation(A, midpoint(K, L), L) mod 360
By collinear_definition on C, midpoint(L, M), J we get midpoint(L, M) in Line(C, J), J in Line(C, midpoint(L, M)), Line(C, J) == Line(C, midpoint(L, M)), 0 == 2 * angle(midpoint(L, M), C, J) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(S, T), M, midpoint(S, T), C we get Line(C, M) == internal_angle_bisector(midpoint(S, T), C, midpoint(S, T))
By internal_angle_bisector_definition_v0_r on B, M, C, S we get Line(M, S) == internal_angle_bisector(B, S, C)
By perpendicular_angle_conditions_v0 on K, midpoint(K, L), A we get angle(K, midpoint(K, L), A) == orientation(A, K, midpoint(K, L)) mod 360
By internal_angle_bisector_definition_v0_r on M, midpoint(S, T), B, S we get internal_angle_bisector(B, S, M) == Line(S, midpoint(S, T))
By concyclic_definition_0 on J, B, M, K we get K in Circle(B, J, M)
By internal_angle_bisector_definition_v0_r on T, C, midpoint(S, T), S we get Line(C, S) == internal_angle_bisector(T, S, midpoint(S, T))
By perpendicular_angle_conditions_v0 on M, midpoint(K, M), J we get angle(M, midpoint(K, M), J) == orientation(J, M, midpoint(K, M)) mod 360
By internal_angle_bisector_definition_v0_r on M, S, M, T we get Line(S, T) == internal_angle_bisector(M, T, M)
By collinear_definition on J, midpoint(L, M), C we get midpoint(L, M) in Line(C, J), C in Line(J, midpoint(L, M)), Line(C, J) == Line(J, midpoint(L, M)), 0 == 2 * angle(midpoint(L, M), J, C) mod 360
By internal_angle_bisector_definition_v0_r on C, M, B, T we get Line(M, T) == internal_angle_bisector(B, T, C)
By collinear_definition on G, J, midpoint(L, M) we get J in Line(G, midpoint(L, M)), midpoint(L, M) in Line(G, J), Line(G, J) == Line(G, midpoint(L, M)), 0 == 2 * angle(J, G, midpoint(L, M)) mod 360
By perpendicular_angle_conditions_v0 on B, midpoint(K, M), M we get angle(B, midpoint(K, M), M) == orientation(B, midpoint(K, M), M) mod 360
By internal_angle_bisector_definition_v0 on G, midpoint(L, M), G, J we get angle(G, J, midpoint(L, M)) == angle(midpoint(L, M), J, G) mod 360
By internal_angle_bisector_definition_v0 on J, midpoint(K, M), J, F we get angle(J, F, midpoint(K, M)) == angle(midpoint(K, M), F, J) mod 360
By perpendicular_angle_conditions_v0 on L, midpoint(K, L), A we get angle(L, midpoint(K, L), A) == orientation(A, L, midpoint(K, L)) mod 360
By internal_angle_bisector_definition_v0 on J, midpoint(L, M), J, G we get angle(J, G, midpoint(L, M)) == angle(midpoint(L, M), G, J) mod 360
By internal_angle_bisector_definition_v0_r on B, T, M, S we get Line(S, T) == internal_angle_bisector(B, S, M)
By isosceles_triangle_properties on G, M, L we get distance(G, L) == distance(G, M), angle(G, M, L) == angle(M, L, G) mod 360
By external_angle_bisector_definition_v0 on A, midpoint(K, M), T, B we get 180 == angle(A, B, midpoint(K, M)) + angle(T, B, midpoint(K, M)) mod 360
By internal_angle_bisector_definition_v0_r on S, M, C, T we get Line(M, T) == internal_angle_bisector(C, T, S)
By internal_angle_bisector_definition_v0 on B, midpoint(K, L), C, A we get angle(B, A, midpoint(K, L)) == angle(midpoint(K, L), A, C) mod 360
By isosceles_triangle_altitude_v3 on F, M, K we get identical(perpendicular_bisector(K, M), internal_angle_bisector(K, F, M), perpendicular_line(F, Line(K, M)))
By collinear_definition on J, midpoint(K, M), B we get midpoint(K, M) in Line(B, J), B in Line(J, midpoint(K, M)), Line(B, J) == Line(J, midpoint(K, M)), 0 == 2 * angle(midpoint(K, M), J, B) mod 360
By internal_angle_bisector_definition_v0_r on T, S, T, M we get Line(M, S) == internal_angle_bisector(T, M, T)
By internal_angle_bisector_definition_v0_r on B, midpoint(S, T), M, C we get internal_angle_bisector(B, C, M) == Line(C, midpoint(S, T))
By external_angle_bisector_definition_v0 on M, midpoint(K, M), A, B we get 180 == angle(M, B, midpoint(K, M)) + angle(A, B, midpoint(K, M)) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(S, T), M, T, S we get Line(M, S) == internal_angle_bisector(T, S, midpoint(S, T))
By internal_angle_bisector_definition_v0_r on B, S, B, midpoint(S, T) we get Line(S, midpoint(S, T)) == internal_angle_bisector(B, midpoint(S, T), B)
By internal_angle_bisector_definition_v0_r on B, C, B, midpoint(S, T) we get Line(C, midpoint(S, T)) == internal_angle_bisector(B, midpoint(S, T), B)
By internal_angle_bisector_definition_v0 on B, midpoint(L, M), L, C we get angle(B, C, midpoint(L, M)) == angle(midpoint(L, M), C, L) mod 360
By internal_angle_bisector_definition_v0_r on C, M, midpoint(S, T), S we get Line(M, S) == internal_angle_bisector(C, S, midpoint(S, T))
By perpendicular_angle_conditions_v0 on J, midpoint(L, M), M we get angle(J, midpoint(L, M), M) == orientation(J, midpoint(L, M), M) mod 360
By internal_angle_bisector_definition_v0_r on M, midpoint(S, T), M, T we get internal_angle_bisector(M, T, M) == Line(T, midpoint(S, T))
By perpendicular_angle_conditions_v0 on J, midpoint(K, L), L we get angle(J, midpoint(K, L), L) == orientation(J, midpoint(K, L), L) mod 360
By internal_angle_bisector_definition_v0_r on C, M, T, S we get Line(M, S) == internal_angle_bisector(C, S, T)
By internal_angle_bisector_definition_v0_r on S, B, M, T we get Line(B, T) == internal_angle_bisector(M, T, S)
By internal_angle_bisector_definition_v0_r on M, C, B, T we get Line(C, T) == internal_angle_bisector(B, T, M)
By collinear_definition on B, J, midpoint(K, M) we get J in Line(B, midpoint(K, M)), midpoint(K, M) in Line(B, J), Line(B, J) == Line(B, midpoint(K, M)), 0 == 2 * angle(J, B, midpoint(K, M)) mod 360
By internal_angle_bisector_definition_v0_r on M, C, midpoint(S, T), S we get Line(C, S) == internal_angle_bisector(M, S, midpoint(S, T))
By internal_angle_bisector_definition_v0_r on S, C, S, M we get Line(C, M) == internal_angle_bisector(S, M, S)
By perpendicular_angle_conditions_v0 on C, midpoint(L, M), L we get angle(C, midpoint(L, M), L) == orientation(C, midpoint(L, M), L) mod 360
By internal_angle_bisector_definition_v0 on L, midpoint(L, M), M, C we get angle(L, C, midpoint(L, M)) == angle(midpoint(L, M), C, M) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(K, M), M, midpoint(K, M), K we get Line(K, M) == internal_angle_bisector(midpoint(K, M), K, midpoint(K, M))
By internal_angle_bisector_definition_v0_r on B, S, M, T we get Line(S, T) == internal_angle_bisector(B, T, M)
By internal_angle_bisector_definition_v0_r on M, B, M, S we get Line(B, S) == internal_angle_bisector(M, S, M)
By perpendicular_angle_conditions_v0 on M, midpoint(L, M), J we get angle(M, midpoint(L, M), J) == orientation(J, M, midpoint(L, M)) mod 360
By internal_angle_bisector_definition_v0_r on M, L, M, midpoint(L, M) we get Line(L, midpoint(L, M)) == internal_angle_bisector(M, midpoint(L, M), M)
By perpendicular_angle_conditions_v0 on K, midpoint(K, M), B we get angle(K, midpoint(K, M), B) == orientation(B, K, midpoint(K, M)) mod 360
By collinear_definition on J, G, midpoint(L, M) we get G in Line(J, midpoint(L, M)), midpoint(L, M) in Line(G, J), Line(G, J) == Line(J, midpoint(L, M)), 0 == 2 * angle(G, J, midpoint(L, M)) mod 360
By collinear_definition on C, J, midpoint(L, M) we get J in Line(C, midpoint(L, M)), midpoint(L, M) in Line(C, J), Line(C, J) == Line(C, midpoint(L, M)), 0 == 2 * angle(J, C, midpoint(L, M)) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(S, T), C, M, T we get Line(C, T) == internal_angle_bisector(M, T, midpoint(S, T))
By internal_angle_bisector_definition_v0_r on C, S, C, midpoint(S, T) we get Line(S, midpoint(S, T)) == internal_angle_bisector(C, midpoint(S, T), C)
By collinear_definition on G, midpoint(L, M), J we get midpoint(L, M) in Line(G, J), J in Line(G, midpoint(L, M)), Line(G, J) == Line(G, midpoint(L, M)), 0 == 2 * angle(midpoint(L, M), G, J) mod 360
By internal_angle_bisector_definition_v0_r on S, midpoint(S, T), C, T we get internal_angle_bisector(C, T, S) == Line(T, midpoint(S, T))
By isosceles_triangle_properties on G, L, M we get distance(G, L) == distance(G, M), angle(G, L, M) == angle(L, M, G) mod 360
By collinear_definition on J, midpoint(K, L), A we get midpoint(K, L) in Line(A, J), A in Line(J, midpoint(K, L)), Line(A, J) == Line(J, midpoint(K, L)), 0 == 2 * angle(midpoint(K, L), J, A) mod 360
By perpendicular_angle_conditions_v0 on M, midpoint(L, M), C we get angle(M, midpoint(L, M), C) == orientation(C, M, midpoint(L, M)) mod 360
By internal_angle_bisector_definition_v0_r on B, midpoint(S, T), C, S we get internal_angle_bisector(B, S, C) == Line(S, midpoint(S, T))
By perpendicular_angle_conditions_v0 on J, midpoint(L, M), L we get angle(J, midpoint(L, M), L) == orientation(J, midpoint(L, M), L) mod 360
By internal_angle_bisector_definition_v0_r on C, B, C, midpoint(S, T) we get Line(B, midpoint(S, T)) == internal_angle_bisector(C, midpoint(S, T), C)
By perpendicular_angle_conditions_v0 on J, midpoint(K, L), K we get angle(J, midpoint(K, L), K) == orientation(J, midpoint(K, L), K) mod 360
By internal_angle_bisector_definition_v0_r on B, C, S, M we get Line(C, M) == internal_angle_bisector(B, M, S)
By perpendicular_angle_conditions_v0 on K, midpoint(K, L), J we get angle(K, midpoint(K, L), J) == orientation(J, K, midpoint(K, L)) mod 360
By isosceles_triangle_altitude_v0 on G, L, M we get identical(perpendicular_bisector(L, M), internal_angle_bisector(L, G, M), perpendicular_line(G, Line(L, M)))
By perpendicular_angle_conditions_v0 on L, midpoint(L, M), C we get angle(L, midpoint(L, M), C) == orientation(C, L, midpoint(L, M)) mod 360
By external_angle_bisector_definition_v0 on S, midpoint(K, M), K, B we get 180 == angle(S, B, midpoint(K, M)) + angle(K, B, midpoint(K, M)) mod 360
By internal_angle_bisector_definition_v0_r on K, L, K, midpoint(K, L) we get Line(L, midpoint(K, L)) == internal_angle_bisector(K, midpoint(K, L), K)
By internal_angle_bisector_definition_v0_r on midpoint(S, T), B, midpoint(S, T), C we get Line(B, C) == internal_angle_bisector(midpoint(S, T), C, midpoint(S, T))
By internal_angle_bisector_definition_v0 on S, midpoint(K, M), A, B we get angle(S, B, midpoint(K, M)) == angle(midpoint(K, M), B, A) mod 360
By internal_angle_bisector_definition_v0 on B, midpoint(K, M), B, J we get angle(B, J, midpoint(K, M)) == angle(midpoint(K, M), J, B) mod 360
By perpendicular_angle_conditions_v0 on K, midpoint(K, M), J we get angle(K, midpoint(K, M), J) == orientation(J, K, midpoint(K, M)) mod 360
By collinear_definition on F, midpoint(K, M), B we get midpoint(K, M) in Line(B, F), B in Line(F, midpoint(K, M)), Line(B, F) == Line(F, midpoint(K, M)), 0 == 2 * angle(midpoint(K, M), F, B) mod 360
By internal_angle_bisector_definition_v0 on A, midpoint(K, M), S, B we get angle(A, B, midpoint(K, M)) == angle(midpoint(K, M), B, S) mod 360
By isosceles_triangle_altitude_v3 on F, K, M we get identical(perpendicular_bisector(K, M), internal_angle_bisector(K, F, M), perpendicular_line(F, Line(K, M)))
By isosceles_triangle_altitude_v0 on F, M, K we get identical(perpendicular_bisector(K, M), internal_angle_bisector(K, F, M), perpendicular_line(F, Line(K, M)))
By isosceles_triangle_altitude_v0 on F, K, M we get identical(perpendicular_bisector(K, M), internal_angle_bisector(K, F, M), perpendicular_line(F, Line(K, M)))
By isosceles_triangle_altitude_v0 on G, M, L we get identical(perpendicular_bisector(L, M), internal_angle_bisector(L, G, M), perpendicular_line(G, Line(L, M)))
By isosceles_triangle_altitude_v1 on G, L, M we get identical(perpendicular_bisector(L, M), internal_angle_bisector(L, G, M), perpendicular_line(G, Line(L, M)))
By isosceles_triangle_altitude_v1 on F, M, K we get identical(perpendicular_bisector(K, M), internal_angle_bisector(K, F, M), perpendicular_line(F, Line(K, M)))
By isosceles_triangle_altitude_v3 on G, L, M we get identical(perpendicular_bisector(L, M), internal_angle_bisector(L, G, M), perpendicular_line(G, Line(L, M)))
By isosceles_triangle_altitude_v3 on G, M, L we get identical(perpendicular_bisector(L, M), internal_angle_bisector(L, G, M), perpendicular_line(G, Line(L, M)))
By isosceles_triangle_altitude_v1 on G, M, L we get identical(perpendicular_bisector(L, M), internal_angle_bisector(L, G, M), perpendicular_line(G, Line(L, M)))
By sss_anti_congruence_v0 on M, G, J, L, G, J we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v0 on G, L, J, G, M, J we get anti_congruent_triangles(G, J, L, G, J, M)
By concyclic_definition_1 on K, A, L, J we get Circle(A, J, L) == Circle(A, K, L)
By sss_anti_congruence_v0 on F, M, K, F, K, M we get anti_congruent_triangles(F, K, M, F, M, K)
By sss_anti_congruence_v0 on J, M, G, J, L, G we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v1 on F, K, J, F, M, J we get anti_congruent_triangles(F, J, K, F, J, M)
By sas_anti_congruence on F, J, K, F, J, M we get anti_congruent_triangles(F, J, K, F, J, M)
By concyclic_definition_1 on K, A, J, L we get Circle(A, J, K) == Circle(A, J, L)
By concyclic_definition_1 on M, L, J, C we get Circle(C, J, L) == Circle(J, L, M)
By sss_anti_congruence_v1 on J, L, G, J, M, G we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v0 on F, J, K, F, J, M we get anti_congruent_triangles(F, J, K, F, J, M)
By concyclic_definition_1 on A, L, K, J we get Circle(A, K, L) == Circle(J, K, L)
By sss_anti_congruence_v0 on F, B, K, F, B, M we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v1 on K, B, F, M, B, F we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v1 on B, F, K, B, F, M we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v1 on J, L, G, J, M, G we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v1 on L, G, M, M, G, L we get anti_congruent_triangles(G, L, M, G, M, L)
By sss_anti_congruence_v1 on F, K, J, F, M, J we get anti_congruent_triangles(F, J, K, F, J, M)
By collinear_definition on midpoint(L, M), G, C we get G in Line(C, midpoint(L, M)), C in Line(G, midpoint(L, M)), Line(C, midpoint(L, M)) == Line(G, midpoint(L, M)), 0 == 2 * angle(G, midpoint(L, M), C) mod 360
By sss_anti_congruence_v0 on K, F, J, M, F, J we get anti_congruent_triangles(F, J, K, F, J, M)
By concyclic_definition_1 on K, M, J, B we get Circle(B, J, M) == Circle(J, K, M)
By sss_anti_congruence_v1 on G, C, L, G, C, M we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v1 on C, L, G, C, M, G we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v1 on J, M, F, J, K, F we get anti_congruent_triangles(F, J, K, F, J, M)
By altitude_definition on L, midpoint(K, L), J, Line(K, L) we get Line(K, L) == altitude(L, J, midpoint(K, L))
By sss_anti_congruence_v1 on G, M, C, G, L, C we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v1 on L, G, J, M, G, J we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v0 on C, M, G, C, L, G we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v1 on B, F, K, B, F, M we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v1 on K, M, F, M, K, F we get anti_congruent_triangles(F, K, M, F, M, K)
By sss_anti_congruence_v1 on G, M, L, G, L, M we get anti_congruent_triangles(G, L, M, G, M, L)
By sss_anti_congruence_v1 on L, G, J, M, G, J we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v1 on F, K, B, F, M, B we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v0 on F, M, J, F, K, J we get anti_congruent_triangles(F, J, K, F, J, M)
By collinear_definition on midpoint(K, L), J, A we get J in Line(A, midpoint(K, L)), A in Line(J, midpoint(K, L)), Line(A, midpoint(K, L)) == Line(J, midpoint(K, L)), 0 == 2 * angle(J, midpoint(K, L), A) mod 360
By sss_anti_congruence_v0 on J, M, G, J, L, G we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v1 on L, G, J, M, G, J we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v0 on J, G, L, J, G, M we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v0 on J, M, G, J, L, G we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v0 on M, B, F, K, B, F we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v1 on F, K, J, F, M, J we get anti_congruent_triangles(F, J, K, F, J, M)
By sss_anti_congruence_v1 on J, M, F, J, K, F we get anti_congruent_triangles(F, J, K, F, J, M)
By altitude_definition on M, midpoint(L, M), G, Line(F, L) we get Line(F, L) == altitude(M, G, midpoint(L, M))
By sss_anti_congruence_v1 on M, F, J, K, F, J we get anti_congruent_triangles(F, J, K, F, J, M)
By sss_anti_congruence_v1 on L, G, C, M, G, C we get anti_congruent_triangles(C, G, L, C, G, M)
By altitude_definition on G, midpoint(L, M), M, Line(C, G) we get Line(C, G) == altitude(G, M, midpoint(L, M))
By sss_anti_congruence_v0 on M, G, J, L, G, J we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v1 on J, F, K, J, F, M we get anti_congruent_triangles(F, J, K, F, J, M)
By sss_anti_congruence_v1 on M, C, G, L, C, G we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v1 on B, M, F, B, K, F we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v1 on L, G, M, M, G, L we get anti_congruent_triangles(G, L, M, G, M, L)
By sss_anti_congruence_v1 on M, C, G, L, C, G we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v1 on F, B, M, F, B, K we get anti_congruent_triangles(B, F, K, B, F, M)
By concyclic_definition_1 on M, K, J, B we get Circle(B, J, K) == Circle(J, K, M)
By altitude_definition on K, J, midpoint(K, M), Line(G, K) we get Line(G, K) == altitude(K, J, midpoint(K, M))
By altitude_definition on M, midpoint(K, M), B, Line(G, K) we get Line(G, K) == altitude(M, B, midpoint(K, M))
By altitude_definition on M, midpoint(L, M), J, Line(F, L) we get Line(F, L) == altitude(M, J, midpoint(L, M))
By sss_anti_congruence_v0 on M, G, L, L, G, M we get anti_congruent_triangles(G, L, M, G, M, L)
By sss_anti_congruence_v1 on M, F, B, K, F, B we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v0 on J, K, F, J, M, F we get anti_congruent_triangles(F, J, K, F, J, M)
By sss_anti_congruence_v1 on G, J, L, G, J, M we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v0 on M, K, F, K, M, F we get anti_congruent_triangles(F, K, M, F, M, K)
By sss_anti_congruence_v0 on M, J, F, K, J, F we get anti_congruent_triangles(F, J, K, F, J, M)
By sss_anti_congruence_v0 on L, M, G, M, L, G we get anti_congruent_triangles(G, L, M, G, M, L)
By sss_anti_congruence_v0 on L, J, G, M, J, G we get anti_congruent_triangles(G, J, L, G, J, M)
By concyclic_definition_1 on A, L, J, K we get Circle(A, J, L) == Circle(J, K, L)
By sss_anti_congruence_v1 on M, F, B, K, F, B we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v1 on G, M, J, G, L, J we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v1 on B, F, K, B, F, M we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v1 on J, G, M, J, G, L we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v1 on K, B, F, M, B, F we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v0 on F, J, K, F, J, M we get anti_congruent_triangles(F, J, K, F, J, M)
By sss_anti_congruence_v0 on F, M, K, F, K, M we get anti_congruent_triangles(F, K, M, F, M, K)
By sss_anti_congruence_v0 on B, F, M, B, F, K we get anti_congruent_triangles(B, F, K, B, F, M)
By concyclic_definition_1 on J, L, M, C we get Circle(C, L, M) == Circle(J, L, M)
By sss_anti_congruence_v1 on F, K, B, F, M, B we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v1 on F, K, B, F, M, B we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v0 on M, G, C, L, G, C we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v1 on L, G, J, M, G, J we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v1 on M, L, G, L, M, G we get anti_congruent_triangles(G, L, M, G, M, L)
By altitude_definition on C, M, midpoint(L, M), Line(C, G) we get Line(C, G) == altitude(C, M, midpoint(L, M))
By sss_anti_congruence_v0 on F, B, K, F, B, M we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v1 on G, M, J, G, L, J we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v0 on F, M, K, F, K, M we get anti_congruent_triangles(F, K, M, F, M, K)
By sss_anti_congruence_v1 on G, C, L, G, C, M we get anti_congruent_triangles(C, G, L, C, G, M)
By concyclic_definition_1 on M, C, J, L we get Circle(C, J, L) == Circle(C, J, M)
By sss_anti_congruence_v0 on M, G, C, L, G, C we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v0 on M, J, F, K, J, F we get anti_congruent_triangles(F, J, K, F, J, M)
By altitude_definition on G, midpoint(K, M), B, Line(G, K) we get Line(G, K) == altitude(G, B, midpoint(K, M))
By altitude_definition on J, K, midpoint(K, M), Line(B, F) we get Line(B, F) == altitude(J, K, midpoint(K, M))
By sss_anti_congruence_v1 on F, B, M, F, B, K we get anti_congruent_triangles(B, F, K, B, F, M)
By altitude_definition on F, G, midpoint(L, M), Line(F, L) we get Line(F, L) == altitude(F, G, midpoint(L, M))
By sss_anti_congruence_v0 on M, J, F, K, J, F we get anti_congruent_triangles(F, J, K, F, J, M)
By sss_anti_congruence_v1 on M, F, J, K, F, J we get anti_congruent_triangles(F, J, K, F, J, M)
By sss_anti_congruence_v1 on F, B, M, F, B, K we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v0 on F, M, B, F, K, B we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v0 on F, M, J, F, K, J we get anti_congruent_triangles(F, J, K, F, J, M)
By sss_anti_congruence_v1 on M, F, B, K, F, B we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v1 on K, J, F, M, J, F we get anti_congruent_triangles(F, J, K, F, J, M)
By sss_anti_congruence_v1 on F, K, B, F, M, B we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v0 on F, J, K, F, J, M we get anti_congruent_triangles(F, J, K, F, J, M)
By sss_anti_congruence_v1 on F, K, J, F, M, J we get anti_congruent_triangles(F, J, K, F, J, M)
By sss_anti_congruence_v1 on K, B, F, M, B, F we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v0 on F, B, K, F, B, M we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v1 on F, J, M, F, J, K we get anti_congruent_triangles(F, J, K, F, J, M)
By sss_anti_congruence_v1 on J, G, M, J, G, L we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v1 on G, M, L, G, L, M we get anti_congruent_triangles(G, L, M, G, M, L)
By sss_anti_congruence_v0 on J, F, M, J, F, K we get anti_congruent_triangles(F, J, K, F, J, M)
By sss_anti_congruence_v1 on K, M, F, M, K, F we get anti_congruent_triangles(F, K, M, F, M, K)
By sss_anti_congruence_v0 on K, F, J, M, F, J we get anti_congruent_triangles(F, J, K, F, J, M)
By sss_anti_congruence_v0 on C, M, G, C, L, G we get anti_congruent_triangles(C, G, L, C, G, M)
By altitude_definition on K, midpoint(K, M), F, Line(G, K) we get Line(G, K) == altitude(K, F, midpoint(K, M))
By sss_anti_congruence_v1 on L, G, C, M, G, C we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v0 on J, G, L, J, G, M we get anti_congruent_triangles(G, J, L, G, J, M)
By sas_anti_congruence on L, C, G, M, C, G we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v1 on J, M, F, J, K, F we get anti_congruent_triangles(F, J, K, F, J, M)
By sss_anti_congruence_v0 on M, G, L, L, G, M we get anti_congruent_triangles(G, L, M, G, M, L)
By altitude_definition on L, midpoint(K, L), A, Line(K, L) we get Line(K, L) == altitude(L, A, midpoint(K, L))
By sss_anti_congruence_v1 on G, M, J, G, L, J we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v0 on G, L, C, G, M, C we get anti_congruent_triangles(C, G, L, C, G, M)
By collinear_definition on midpoint(K, L), A, J we get A in Line(J, midpoint(K, L)), J in Line(A, midpoint(K, L)), Line(A, midpoint(K, L)) == Line(J, midpoint(K, L)), 0 == 2 * angle(A, midpoint(K, L), J) mod 360
By sss_anti_congruence_v0 on F, M, B, F, K, B we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v1 on M, C, G, L, C, G we get anti_congruent_triangles(C, G, L, C, G, M)
By altitude_definition on C, L, midpoint(L, M), Line(C, G) we get Line(C, G) == altitude(C, L, midpoint(L, M))
By sss_anti_congruence_v0 on M, K, F, K, M, F we get anti_congruent_triangles(F, K, M, F, M, K)
By sss_anti_congruence_v0 on G, J, M, G, J, L we get anti_congruent_triangles(G, J, L, G, J, M)
By concyclic_definition_1 on J, K, B, M we get Circle(B, J, K) == Circle(B, K, M)
By altitude_definition on A, K, midpoint(K, L), Line(A, J) we get Line(A, J) == altitude(A, K, midpoint(K, L))
By sss_anti_congruence_v0 on J, K, F, J, M, F we get anti_congruent_triangles(F, J, K, F, J, M)
By sss_anti_congruence_v0 on K, F, B, M, F, B we get anti_congruent_triangles(B, F, K, B, F, M)
By altitude_definition on L, C, midpoint(L, M), Line(F, L) we get Line(F, L) == altitude(L, C, midpoint(L, M))
By sss_anti_congruence_v1 on F, K, M, F, M, K we get anti_congruent_triangles(F, K, M, F, M, K)
By sss_anti_congruence_v1 on B, F, K, B, F, M we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v0 on K, F, B, M, F, B we get anti_congruent_triangles(B, F, K, B, F, M)
By altitude_definition on J, midpoint(K, L), K, Line(A, J) we get Line(A, J) == altitude(J, K, midpoint(K, L))
By altitude_definition on K, midpoint(K, L), A, Line(K, L) we get Line(K, L) == altitude(K, A, midpoint(K, L))
By altitude_definition on F, M, midpoint(K, M), Line(B, F) we get Line(B, F) == altitude(F, M, midpoint(K, M))
By sss_anti_congruence_v0 on M, G, L, L, G, M we get anti_congruent_triangles(G, L, M, G, M, L)
By sss_anti_congruence_v1 on G, M, L, G, L, M we get anti_congruent_triangles(G, L, M, G, M, L)
By sss_anti_congruence_v0 on B, F, M, B, F, K we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v1 on K, B, F, M, B, F we get anti_congruent_triangles(B, F, K, B, F, M)
By concyclic_definition_1 on M, B, J, K we get Circle(B, J, K) == Circle(B, J, M)
By sss_anti_congruence_v1 on C, G, M, C, G, L we get anti_congruent_triangles(C, G, L, C, G, M)
By concyclic_definition_1 on C, J, M, L we get Circle(C, J, M) == Circle(J, L, M)
By concyclic_definition_1 on L, K, A, J we get Circle(A, J, K) == Circle(A, K, L)
By altitude_definition on G, midpoint(K, M), J, Line(G, K) we get Line(G, K) == altitude(G, J, midpoint(K, M))
By sss_anti_congruence_v0 on F, M, B, F, K, B we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v1 on J, F, K, J, F, M we get anti_congruent_triangles(F, J, K, F, J, M)
By sss_anti_congruence_v1 on G, M, C, G, L, C we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v0 on L, C, G, M, C, G we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v0 on L, C, G, M, C, G we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v0 on M, G, L, L, G, M we get anti_congruent_triangles(G, L, M, G, M, L)
By sss_anti_congruence_v0 on J, K, F, J, M, F we get anti_congruent_triangles(F, J, K, F, J, M)
By sss_anti_congruence_v1 on B, M, F, B, K, F we get anti_congruent_triangles(B, F, K, B, F, M)
By altitude_definition on K, midpoint(K, M), B, Line(G, K) we get Line(G, K) == altitude(K, B, midpoint(K, M))
By sss_anti_congruence_v1 on M, J, G, L, J, G we get anti_congruent_triangles(G, J, L, G, J, M)
By sas_anti_congruence on K, B, F, M, B, F we get anti_congruent_triangles(B, F, K, B, F, M)
By altitude_definition on M, midpoint(K, M), J, Line(G, K) we get Line(G, K) == altitude(M, J, midpoint(K, M))
By sss_anti_congruence_v1 on K, M, F, M, K, F we get anti_congruent_triangles(F, K, M, F, M, K)
By sss_anti_congruence_v0 on C, G, L, C, G, M we get anti_congruent_triangles(C, G, L, C, G, M)
By sas_anti_congruence on L, J, G, M, J, G we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v0 on G, L, M, G, M, L we get anti_congruent_triangles(G, L, M, G, M, L)
By sss_anti_congruence_v0 on F, M, B, F, K, B we get anti_congruent_triangles(B, F, K, B, F, M)
By altitude_definition on B, M, midpoint(K, M), Line(B, F) we get Line(B, F) == altitude(B, M, midpoint(K, M))
By sss_anti_congruence_v1 on K, J, F, M, J, F we get anti_congruent_triangles(F, J, K, F, J, M)
By sss_anti_congruence_v1 on M, F, J, K, F, J we get anti_congruent_triangles(F, J, K, F, J, M)
By sss_anti_congruence_v1 on C, G, M, C, G, L we get anti_congruent_triangles(C, G, L, C, G, M)
By sas_anti_congruence on F, B, K, F, B, M we get anti_congruent_triangles(B, F, K, B, F, M)
By sas_anti_congruence on M, C, G, L, C, G we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v0 on G, L, J, G, M, J we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v0 on G, L, M, G, M, L we get anti_congruent_triangles(G, L, M, G, M, L)
By sss_anti_congruence_v0 on G, L, C, G, M, C we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v1 on M, L, G, L, M, G we get anti_congruent_triangles(G, L, M, G, M, L)
By sss_anti_congruence_v1 on J, G, M, J, G, L we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v1 on J, M, F, J, K, F we get anti_congruent_triangles(F, J, K, F, J, M)
By concyclic_definition_1 on A, J, K, L we get Circle(A, J, K) == Circle(J, K, L)
By sss_anti_congruence_v0 on L, J, G, M, J, G we get anti_congruent_triangles(G, J, L, G, J, M)
By altitude_definition on L, J, midpoint(L, M), Line(F, L) we get Line(F, L) == altitude(L, J, midpoint(L, M))
By sss_anti_congruence_v1 on K, B, F, M, B, F we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v1 on L, G, M, M, G, L we get anti_congruent_triangles(G, L, M, G, M, L)
By sss_anti_congruence_v0 on J, G, L, J, G, M we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v1 on G, M, C, G, L, C we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v1 on K, M, F, M, K, F we get anti_congruent_triangles(F, K, M, F, M, K)
By sas_anti_congruence on G, C, M, G, C, L we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v1 on M, L, G, L, M, G we get anti_congruent_triangles(G, L, M, G, M, L)
By sss_anti_congruence_v1 on G, M, J, G, L, J we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v1 on G, M, C, G, L, C we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v0 on G, J, M, G, J, L we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v1 on K, J, F, M, J, F we get anti_congruent_triangles(F, J, K, F, J, M)
By sss_anti_congruence_v1 on F, K, M, F, M, K we get anti_congruent_triangles(F, K, M, F, M, K)
By sss_anti_congruence_v1 on C, G, M, C, G, L we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v0 on J, F, M, J, F, K we get anti_congruent_triangles(F, J, K, F, J, M)
By sss_anti_congruence_v0 on L, C, G, M, C, G we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v1 on L, G, M, M, G, L we get anti_congruent_triangles(G, L, M, G, M, L)
By sss_anti_congruence_v0 on B, F, M, B, F, K we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v0 on L, J, G, M, J, G we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v1 on F, J, M, F, J, K we get anti_congruent_triangles(F, J, K, F, J, M)
By sss_anti_congruence_v1 on J, L, G, J, M, G we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v0 on M, G, J, L, G, J we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v0 on G, J, M, G, J, L we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v1 on G, J, L, G, J, M we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v1 on F, K, M, F, M, K we get anti_congruent_triangles(F, K, M, F, M, K)
By sss_anti_congruence_v0 on J, M, G, J, L, G we get anti_congruent_triangles(G, J, L, G, J, M)
By concyclic_definition_1 on B, M, K, J we get Circle(B, K, M) == Circle(J, K, M)
By sss_anti_congruence_v0 on K, F, M, M, F, K we get anti_congruent_triangles(F, K, M, F, M, K)
By sss_anti_congruence_v1 on G, M, C, G, L, C we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v0 on G, J, M, G, J, L we get anti_congruent_triangles(G, J, L, G, J, M)
By sas_anti_congruence on K, J, F, M, J, F we get anti_congruent_triangles(F, J, K, F, J, M)
By sss_anti_congruence_v0 on C, G, L, C, G, M we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v0 on K, F, J, M, F, J we get anti_congruent_triangles(F, J, K, F, J, M)
By sss_anti_congruence_v0 on F, J, K, F, J, M we get anti_congruent_triangles(F, J, K, F, J, M)
By sss_anti_congruence_v0 on G, C, M, G, C, L we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v0 on G, J, M, G, J, L we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v1 on K, J, F, M, J, F we get anti_congruent_triangles(F, J, K, F, J, M)
By sss_anti_congruence_v0 on G, C, M, G, C, L we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v1 on F, J, M, F, J, K we get anti_congruent_triangles(F, J, K, F, J, M)
By sss_anti_congruence_v0 on K, F, B, M, F, B we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v0 on M, B, F, K, B, F we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v0 on F, M, J, F, K, J we get anti_congruent_triangles(F, J, K, F, J, M)
By altitude_definition on M, F, midpoint(K, M), Line(G, K) we get Line(G, K) == altitude(M, F, midpoint(K, M))
By altitude_definition on J, midpoint(L, M), L, Line(C, G) we get Line(C, G) == altitude(J, L, midpoint(L, M))
By sss_anti_congruence_v0 on L, C, G, M, C, G we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v1 on M, F, J, K, F, J we get anti_congruent_triangles(F, J, K, F, J, M)
By sss_anti_congruence_v0 on M, G, C, L, G, C we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v1 on K, B, F, M, B, F we get anti_congruent_triangles(B, F, K, B, F, M)
By sas_anti_congruence on M, J, F, K, J, F we get anti_congruent_triangles(F, J, K, F, J, M)
By sss_anti_congruence_v1 on M, C, G, L, C, G we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v1 on M, F, K, K, F, M we get anti_congruent_triangles(F, K, M, F, M, K)
By sss_anti_congruence_v1 on M, F, J, K, F, J we get anti_congruent_triangles(F, J, K, F, J, M)
By sss_anti_congruence_v1 on L, G, J, M, G, J we get anti_congruent_triangles(G, J, L, G, J, M)
By altitude_definition on L, midpoint(L, M), G, Line(F, L) we get Line(F, L) == altitude(L, G, midpoint(L, M))
By sss_anti_congruence_v1 on J, F, K, J, F, M we get anti_congruent_triangles(F, J, K, F, J, M)
By sss_anti_congruence_v0 on K, F, M, M, F, K we get anti_congruent_triangles(F, K, M, F, M, K)
By sss_anti_congruence_v0 on G, L, J, G, M, J we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v1 on M, J, G, L, J, G we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v0 on M, B, F, K, B, F we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v0 on L, M, G, M, L, G we get anti_congruent_triangles(G, L, M, G, M, L)
By sss_anti_congruence_v0 on G, C, M, G, C, L we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v0 on M, G, J, L, G, J we get anti_congruent_triangles(G, J, L, G, J, M)
By concyclic_definition_1 on J, C, M, L we get Circle(C, J, M) == Circle(C, L, M)
By sss_anti_congruence_v1 on M, J, G, L, J, G we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v0 on G, L, C, G, M, C we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v1 on M, J, G, L, J, G we get anti_congruent_triangles(G, J, L, G, J, M)
By altitude_definition on K, midpoint(K, L), J, Line(K, L) we get Line(K, L) == altitude(K, J, midpoint(K, L))
By sss_anti_congruence_v0 on B, K, F, B, M, F we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v1 on L, G, C, M, G, C we get anti_congruent_triangles(C, G, L, C, G, M)
By sas_anti_congruence on M, B, F, K, B, F we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v1 on K, M, F, M, K, F we get anti_congruent_triangles(F, K, M, F, M, K)
By sss_anti_congruence_v1 on C, L, G, C, M, G we get anti_congruent_triangles(C, G, L, C, G, M)
By altitude_definition on A, midpoint(K, L), L, Line(A, J) we get Line(A, J) == altitude(A, L, midpoint(K, L))
By collinear_definition on midpoint(L, M), C, J we get C in Line(J, midpoint(L, M)), J in Line(C, midpoint(L, M)), Line(C, midpoint(L, M)) == Line(J, midpoint(L, M)), 0 == 2 * angle(C, midpoint(L, M), J) mod 360
By sss_anti_congruence_v0 on L, M, G, M, L, G we get anti_congruent_triangles(G, L, M, G, M, L)
By sss_anti_congruence_v0 on M, G, J, L, G, J we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v0 on L, M, G, M, L, G we get anti_congruent_triangles(G, L, M, G, M, L)
By sss_anti_congruence_v1 on G, J, L, G, J, M we get anti_congruent_triangles(G, J, L, G, J, M)
By altitude_definition on J, midpoint(K, L), L, Line(A, J) we get Line(A, J) == altitude(J, L, midpoint(K, L))
By concyclic_definition_1 on J, B, M, K we get Circle(B, J, M) == Circle(B, K, M)
By sss_anti_congruence_v0 on F, M, K, F, K, M we get anti_congruent_triangles(F, K, M, F, M, K)
By sss_anti_congruence_v0 on L, J, G, M, J, G we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v1 on C, L, G, C, M, G we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v0 on K, F, J, M, F, J we get anti_congruent_triangles(F, J, K, F, J, M)
By sss_anti_congruence_v1 on G, M, L, G, L, M we get anti_congruent_triangles(G, L, M, G, M, L)
By sss_anti_congruence_v0 on B, K, F, B, M, F we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v1 on J, F, K, J, F, M we get anti_congruent_triangles(F, J, K, F, J, M)
By altitude_definition on M, C, midpoint(L, M), Line(F, L) we get Line(F, L) == altitude(M, C, midpoint(L, M))
By sss_anti_congruence_v1 on G, J, L, G, J, M we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v0 on L, M, G, M, L, G we get anti_congruent_triangles(G, L, M, G, M, L)
By collinear_definition on midpoint(L, M), G, J we get G in Line(J, midpoint(L, M)), J in Line(G, midpoint(L, M)), Line(G, midpoint(L, M)) == Line(J, midpoint(L, M)), 0 == 2 * angle(G, midpoint(L, M), J) mod 360
By sss_anti_congruence_v0 on F, M, B, F, K, B we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v1 on F, K, M, F, M, K we get anti_congruent_triangles(F, K, M, F, M, K)
By altitude_definition on G, midpoint(K, M), F, Line(G, K) we get Line(G, K) == altitude(G, F, midpoint(K, M))
By sss_anti_congruence_v0 on J, K, F, J, M, F we get anti_congruent_triangles(F, J, K, F, J, M)
By sss_anti_congruence_v1 on C, L, G, C, M, G we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v1 on G, M, C, G, L, C we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v0 on J, K, F, J, M, F we get anti_congruent_triangles(F, J, K, F, J, M)
By sss_anti_congruence_v0 on L, J, G, M, J, G we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v1 on F, K, B, F, M, B we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v1 on B, F, K, B, F, M we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v0 on K, F, B, M, F, B we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v1 on L, G, M, M, G, L we get anti_congruent_triangles(G, L, M, G, M, L)
By sss_anti_congruence_v1 on M, J, G, L, J, G we get anti_congruent_triangles(G, J, L, G, J, M)
By altitude_definition on J, M, midpoint(K, M), Line(B, F) we get Line(B, F) == altitude(J, M, midpoint(K, M))
By sss_anti_congruence_v1 on L, G, J, M, G, J we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v1 on F, B, M, F, B, K we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v1 on F, B, M, F, B, K we get anti_congruent_triangles(B, F, K, B, F, M)
By collinear_definition on midpoint(K, M), B, J we get B in Line(J, midpoint(K, M)), J in Line(B, midpoint(K, M)), Line(B, midpoint(K, M)) == Line(J, midpoint(K, M)), 0 == 2 * angle(B, midpoint(K, M), J) mod 360
By sss_anti_congruence_v0 on K, F, M, M, F, K we get anti_congruent_triangles(F, K, M, F, M, K)
By sss_anti_congruence_v0 on B, F, M, B, F, K we get anti_congruent_triangles(B, F, K, B, F, M)
By concyclic_definition_1 on J, C, L, M we get Circle(C, J, L) == Circle(C, L, M)
By sss_anti_congruence_v0 on F, M, K, F, K, M we get anti_congruent_triangles(F, K, M, F, M, K)
By sss_anti_congruence_v1 on K, J, F, M, J, F we get anti_congruent_triangles(F, J, K, F, J, M)
By sss_anti_congruence_v1 on F, K, M, F, M, K we get anti_congruent_triangles(F, K, M, F, M, K)
By sss_anti_congruence_v1 on M, F, K, K, F, M we get anti_congruent_triangles(F, K, M, F, M, K)
By sss_anti_congruence_v0 on B, F, M, B, F, K we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v0 on C, M, G, C, L, G we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v1 on M, F, J, K, F, J we get anti_congruent_triangles(F, J, K, F, J, M)
By collinear_definition on midpoint(K, M), B, F we get B in Line(F, midpoint(K, M)), F in Line(B, midpoint(K, M)), Line(B, midpoint(K, M)) == Line(F, midpoint(K, M)), 0 == 2 * angle(B, midpoint(K, M), F) mod 360
By collinear_definition on midpoint(L, M), C, G we get C in Line(G, midpoint(L, M)), G in Line(C, midpoint(L, M)), Line(C, midpoint(L, M)) == Line(G, midpoint(L, M)), 0 == 2 * angle(C, midpoint(L, M), G) mod 360
By altitude_definition on B, midpoint(K, M), K, Line(B, F) we get Line(B, F) == altitude(B, K, midpoint(K, M))
By altitude_definition on F, C, midpoint(L, M), Line(F, L) we get Line(F, L) == altitude(F, C, midpoint(L, M))
By sss_anti_congruence_v0 on M, B, F, K, B, F we get anti_congruent_triangles(B, F, K, B, F, M)
By sas_anti_congruence on F, B, M, F, B, K we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v1 on C, L, G, C, M, G we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v0 on K, F, M, M, F, K we get anti_congruent_triangles(F, K, M, F, M, K)
By sss_anti_congruence_v0 on G, L, M, G, M, L we get anti_congruent_triangles(G, L, M, G, M, L)
By sas_anti_congruence on G, C, L, G, C, M we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v1 on M, F, B, K, F, B we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v1 on F, J, M, F, J, K we get anti_congruent_triangles(F, J, K, F, J, M)
By sss_anti_congruence_v0 on J, F, M, J, F, K we get anti_congruent_triangles(F, J, K, F, J, M)
By sss_anti_congruence_v0 on G, L, M, G, M, L we get anti_congruent_triangles(G, L, M, G, M, L)
By sss_anti_congruence_v0 on J, K, F, J, M, F we get anti_congruent_triangles(F, J, K, F, J, M)
By sss_anti_congruence_v0 on C, M, G, C, L, G we get anti_congruent_triangles(C, G, L, C, G, M)
By collinear_definition on midpoint(L, M), J, C we get J in Line(C, midpoint(L, M)), C in Line(J, midpoint(L, M)), Line(C, midpoint(L, M)) == Line(J, midpoint(L, M)), 0 == 2 * angle(J, midpoint(L, M), C) mod 360
By collinear_definition on midpoint(K, M), J, B we get J in Line(B, midpoint(K, M)), B in Line(J, midpoint(K, M)), Line(B, midpoint(K, M)) == Line(J, midpoint(K, M)), 0 == 2 * angle(J, midpoint(K, M), B) mod 360
By altitude_definition on F, midpoint(L, M), J, Line(F, L) we get Line(F, L) == altitude(F, J, midpoint(L, M))
By sss_anti_congruence_v0 on C, G, L, C, G, M we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v0 on C, G, L, C, G, M we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v0 on K, F, M, M, F, K we get anti_congruent_triangles(F, K, M, F, M, K)
By sss_anti_congruence_v1 on M, F, K, K, F, M we get anti_congruent_triangles(F, K, M, F, M, K)
By sss_anti_congruence_v0 on J, M, G, J, L, G we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v0 on G, L, J, G, M, J we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v0 on G, L, J, G, M, J we get anti_congruent_triangles(G, J, L, G, J, M)
By altitude_definition on J, midpoint(L, M), M, Line(C, G) we get Line(C, G) == altitude(J, M, midpoint(L, M))
By sss_anti_congruence_v0 on F, M, K, F, K, M we get anti_congruent_triangles(F, K, M, F, M, K)
By sss_anti_congruence_v0 on L, J, G, M, J, G we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v0 on B, K, F, B, M, F we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v0 on F, M, B, F, K, B we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v1 on G, C, L, G, C, M we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v1 on J, G, M, J, G, L we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v0 on F, M, J, F, K, J we get anti_congruent_triangles(F, J, K, F, J, M)
By sss_anti_congruence_v0 on G, L, C, G, M, C we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v1 on M, L, G, L, M, G we get anti_congruent_triangles(G, L, M, G, M, L)
By sss_anti_congruence_v0 on B, K, F, B, M, F we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v1 on G, M, L, G, L, M we get anti_congruent_triangles(G, L, M, G, M, L)
By sss_anti_congruence_v1 on F, K, M, F, M, K we get anti_congruent_triangles(F, K, M, F, M, K)
By sss_anti_congruence_v0 on L, M, G, M, L, G we get anti_congruent_triangles(G, L, M, G, M, L)
By sss_anti_congruence_v0 on C, M, G, C, L, G we get anti_congruent_triangles(C, G, L, C, G, M)
By altitude_definition on G, midpoint(L, M), L, Line(C, G) we get Line(C, G) == altitude(G, L, midpoint(L, M))
By sss_anti_congruence_v1 on K, M, F, M, K, F we get anti_congruent_triangles(F, K, M, F, M, K)
By sss_anti_congruence_v1 on M, L, G, L, M, G we get anti_congruent_triangles(G, L, M, G, M, L)
By collinear_definition on midpoint(K, M), F, J we get F in Line(J, midpoint(K, M)), J in Line(F, midpoint(K, M)), Line(F, midpoint(K, M)) == Line(J, midpoint(K, M)), 0 == 2 * angle(F, midpoint(K, M), J) mod 360
By sss_anti_congruence_v1 on F, K, J, F, M, J we get anti_congruent_triangles(F, J, K, F, J, M)
By altitude_definition on F, midpoint(K, M), K, Line(B, F) we get Line(B, F) == altitude(F, K, midpoint(K, M))
By sss_anti_congruence_v0 on K, F, J, M, F, J we get anti_congruent_triangles(F, J, K, F, J, M)
By collinear_definition on midpoint(L, M), J, G we get J in Line(G, midpoint(L, M)), G in Line(J, midpoint(L, M)), Line(G, midpoint(L, M)) == Line(J, midpoint(L, M)), 0 == 2 * angle(J, midpoint(L, M), G) mod 360
By sss_anti_congruence_v1 on C, L, G, C, M, G we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v0 on M, B, F, K, B, F we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v0 on L, C, G, M, C, G we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v1 on F, J, M, F, J, K we get anti_congruent_triangles(F, J, K, F, J, M)
By sas_anti_congruence on G, J, L, G, J, M we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v1 on B, M, F, B, K, F we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v0 on M, K, F, K, M, F we get anti_congruent_triangles(F, K, M, F, M, K)
By sss_anti_congruence_v1 on L, G, C, M, G, C we get anti_congruent_triangles(C, G, L, C, G, M)
By sas_anti_congruence on M, J, G, L, J, G we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v1 on M, J, G, L, J, G we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v0 on B, F, M, B, F, K we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v1 on J, G, M, J, G, L we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v0 on F, J, K, F, J, M we get anti_congruent_triangles(F, J, K, F, J, M)
By sss_anti_congruence_v0 on M, K, F, K, M, F we get anti_congruent_triangles(F, K, M, F, M, K)
By sss_anti_congruence_v0 on G, C, M, G, C, L we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v0 on J, G, L, J, G, M we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v1 on C, G, M, C, G, L we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v0 on F, M, J, F, K, J we get anti_congruent_triangles(F, J, K, F, J, M)
By sss_anti_congruence_v1 on B, M, F, B, K, F we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v1 on L, G, M, M, G, L we get anti_congruent_triangles(G, L, M, G, M, L)
By sss_anti_congruence_v1 on F, B, M, F, B, K we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v0 on K, F, B, M, F, B we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v0 on M, G, C, L, G, C we get anti_congruent_triangles(C, G, L, C, G, M)
By collinear_definition on midpoint(K, M), F, B we get F in Line(B, midpoint(K, M)), B in Line(F, midpoint(K, M)), Line(B, midpoint(K, M)) == Line(F, midpoint(K, M)), 0 == 2 * angle(F, midpoint(K, M), B) mod 360
By sss_anti_congruence_v1 on M, C, G, L, C, G we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v0 on J, F, M, J, F, K we get anti_congruent_triangles(F, J, K, F, J, M)
By sss_anti_congruence_v0 on F, B, K, F, B, M we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v0 on G, L, J, G, M, J we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v0 on M, J, F, K, J, F we get anti_congruent_triangles(F, J, K, F, J, M)
By sss_anti_congruence_v0 on G, C, M, G, C, L we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v1 on F, K, B, F, M, B we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v1 on M, F, K, K, F, M we get anti_congruent_triangles(F, K, M, F, M, K)
By sss_anti_congruence_v1 on J, L, G, J, M, G we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v0 on G, L, M, G, M, L we get anti_congruent_triangles(G, L, M, G, M, L)
By sss_anti_congruence_v0 on M, K, F, K, M, F we get anti_congruent_triangles(F, K, M, F, M, K)
By sss_anti_congruence_v0 on M, G, J, L, G, J we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v0 on M, G, L, L, G, M we get anti_congruent_triangles(G, L, M, G, M, L)
By sss_anti_congruence_v1 on G, C, L, G, C, M we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v1 on C, G, M, C, G, L we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v1 on J, L, G, J, M, G we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v0 on G, L, C, G, M, C we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v0 on C, G, L, C, G, M we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v1 on J, L, G, J, M, G we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v1 on B, M, F, B, K, F we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v1 on G, M, J, G, L, J we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v0 on M, G, C, L, G, C we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v1 on J, F, K, J, F, M we get anti_congruent_triangles(F, J, K, F, J, M)
By sss_anti_congruence_v1 on G, C, L, G, C, M we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v0 on G, J, M, G, J, L we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v0 on B, K, F, B, M, F we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v0 on J, G, L, J, G, M we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v0 on F, J, K, F, J, M we get anti_congruent_triangles(F, J, K, F, J, M)
By sss_anti_congruence_v0 on G, C, M, G, C, L we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v1 on M, C, G, L, C, G we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v1 on M, F, B, K, F, B we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v1 on M, F, K, K, F, M we get anti_congruent_triangles(F, K, M, F, M, K)
By sss_anti_congruence_v0 on J, F, M, J, F, K we get anti_congruent_triangles(F, J, K, F, J, M)
By sss_anti_congruence_v1 on F, J, M, F, J, K we get anti_congruent_triangles(F, J, K, F, J, M)
By sss_anti_congruence_v1 on M, F, K, K, F, M we get anti_congruent_triangles(F, K, M, F, M, K)
By sss_anti_congruence_v0 on M, K, F, K, M, F we get anti_congruent_triangles(F, K, M, F, M, K)
By sss_anti_congruence_v1 on M, L, G, L, M, G we get anti_congruent_triangles(G, L, M, G, M, L)
By collinear_definition on midpoint(K, M), J, F we get J in Line(F, midpoint(K, M)), F in Line(J, midpoint(K, M)), Line(F, midpoint(K, M)) == Line(J, midpoint(K, M)), 0 == 2 * angle(J, midpoint(K, M), F) mod 360
By sss_anti_congruence_v1 on G, C, L, G, C, M we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v0 on M, G, C, L, G, C we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v1 on G, M, J, G, L, J we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v0 on J, G, L, J, G, M we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v0 on K, F, J, M, F, J we get anti_congruent_triangles(F, J, K, F, J, M)
By sss_anti_congruence_v1 on G, M, L, G, L, M we get anti_congruent_triangles(G, L, M, G, M, L)
By sss_anti_congruence_v0 on F, M, J, F, K, J we get anti_congruent_triangles(F, J, K, F, J, M)
By sss_anti_congruence_v1 on J, M, F, J, K, F we get anti_congruent_triangles(F, J, K, F, J, M)
By sss_anti_congruence_v0 on G, L, C, G, M, C we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v0 on B, K, F, B, M, F we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v0 on F, B, K, F, B, M we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v1 on F, K, J, F, M, J we get anti_congruent_triangles(F, J, K, F, J, M)
By sss_anti_congruence_v1 on B, F, K, B, F, M we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v0 on G, L, M, G, M, L we get anti_congruent_triangles(G, L, M, G, M, L)
By sss_anti_congruence_v0 on M, J, F, K, J, F we get anti_congruent_triangles(F, J, K, F, J, M)
By sss_anti_congruence_v1 on L, G, C, M, G, C we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v1 on M, F, B, K, F, B we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v0 on J, M, G, J, L, G we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v0 on J, F, M, J, F, K we get anti_congruent_triangles(F, J, K, F, J, M)
By sss_anti_congruence_v1 on C, G, M, C, G, L we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v1 on B, M, F, B, K, F we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v0 on C, M, G, C, L, G we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v1 on G, J, L, G, J, M we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v1 on K, J, F, M, J, F we get anti_congruent_triangles(F, J, K, F, J, M)
By sss_anti_congruence_v0 on M, B, F, K, B, F we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v1 on J, F, K, J, F, M we get anti_congruent_triangles(F, J, K, F, J, M)
By sss_anti_congruence_v1 on G, J, L, G, J, M we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v1 on J, G, M, J, G, L we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v1 on J, M, F, J, K, F we get anti_congruent_triangles(F, J, K, F, J, M)
By sss_anti_congruence_v0 on L, C, G, M, C, G we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v0 on K, F, B, M, F, B we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v0 on F, B, K, F, B, M we get anti_congruent_triangles(B, F, K, B, F, M)
By sss_anti_congruence_v0 on M, G, L, L, G, M we get anti_congruent_triangles(G, L, M, G, M, L)
By sss_anti_congruence_v0 on M, J, F, K, J, F we get anti_congruent_triangles(F, J, K, F, J, M)
By sas_anti_congruence on F, J, M, F, J, K we get anti_congruent_triangles(F, J, K, F, J, M)
By sss_anti_congruence_v0 on C, G, L, C, G, M we get anti_congruent_triangles(C, G, L, C, G, M)
By sas_anti_congruence on G, J, M, G, J, L we get anti_congruent_triangles(G, J, L, G, J, M)
By sss_anti_congruence_v1 on L, G, C, M, G, C we get anti_congruent_triangles(C, G, L, C, G, M)
By sss_anti_congruence_v0 on K, F, M, M, F, K we get anti_congruent_triangles(F, K, M, F, M, K)
By line_definition on midpoint(K, M), orthocenter(G, J, M), Line(B, F) we get Line(B, F) == Line(midpoint(K, M), orthocenter(G, J, M))
By line_definition on orthocenter(F, G, M), orthocenter(F, J, M), Line(C, G) we get Line(C, G) == Line(orthocenter(F, G, M), orthocenter(F, J, M))
By concyclic_sufficient_conditions_v0 on J, F, K, L we get concyclic(F, J, K, L)
By concyclic_sufficient_conditions_v1 on G, K, J, L we get concyclic(G, J, K, L)
By line_intersection_definition on orthocenter(F, G, J), Line(G, K), Line(F, L) we get orthocenter(F, G, J) == line_intersection(Line(F, L), Line(G, K))
By line_definition on M, orthocenter(F, G, M), altitude(M, F, G) we get altitude(M, F, G) == Line(M, orthocenter(F, G, M))
By concyclic_sufficient_conditions_v0 on J, G, K, F we get concyclic(F, G, J, K)
By line_definition on midpoint(L, M), orthocenter(F, G, J), Line(F, L) we get Line(F, L) == Line(midpoint(L, M), orthocenter(F, G, J))
By line_definition on orthocenter(F, G, J), orthocenter(F, J, M), Line(G, K) we get Line(G, K) == Line(orthocenter(F, G, J), orthocenter(F, J, M))
By line_definition on orthocenter(F, G, J), F, Line(F, L) we get Line(F, L) == Line(F, orthocenter(F, G, J))
By line_definition on G, orthocenter(G, J, M), altitude(G, J, M) we get altitude(G, J, M) == Line(G, orthocenter(G, J, M))
By line_definition on orthocenter(F, G, J), L, Line(F, L) we get Line(F, L) == Line(L, orthocenter(F, G, J))
By line_definition on orthocenter(F, G, J), midpoint(K, M), Line(G, K) we get Line(G, K) == Line(midpoint(K, M), orthocenter(F, G, J))
By line_definition on orthocenter(G, J, M), orthocenter(F, G, M), Line(B, F) we get Line(B, F) == Line(orthocenter(F, G, M), orthocenter(G, J, M))
By line_definition on midpoint(L, M), orthocenter(F, G, M), Line(C, G) we get Line(C, G) == Line(midpoint(L, M), orthocenter(F, G, M))
By concyclic_sufficient_conditions_v0 on J, A, K, F we get concyclic(A, F, J, K)
By concyclic_sufficient_conditions_v0 on J, F, L, A we get concyclic(A, F, J, L)
By concyclic_sufficient_conditions_v0 on K, G, J, A we get concyclic(A, G, J, K)
By line_definition on C, orthocenter(F, G, M), Line(C, G) we get Line(C, G) == Line(C, orthocenter(F, G, M))
By line_intersection_definition on orthocenter(F, G, M), Line(B, F), Line(C, G) we get orthocenter(F, G, M) == line_intersection(Line(B, F), Line(C, G))
By concyclic_sufficient_conditions_v0 on L, A, J, G we get concyclic(A, G, J, L)
By line_definition on M, orthocenter(F, J, M), Line(G, K) we get Line(G, K) == Line(M, orthocenter(F, J, M))
By line_definition on midpoint(L, M), orthocenter(G, J, M), Line(F, L) we get Line(F, L) == Line(midpoint(L, M), orthocenter(G, J, M))
By line_definition on orthocenter(G, J, M), M, Line(F, L) we get Line(F, L) == Line(M, orthocenter(G, J, M))
By line_definition on orthocenter(F, G, J), orthocenter(G, J, M), Line(F, L) we get Line(F, L) == Line(orthocenter(F, G, J), orthocenter(G, J, M))
By line_definition on J, orthocenter(G, J, M), Line(B, F) we get Line(B, F) == Line(J, orthocenter(G, J, M))
By line_definition on orthocenter(F, J, M), K, Line(G, K) we get Line(G, K) == Line(K, orthocenter(F, J, M))
By concyclic_sufficient_conditions_v0 on L, G, J, F we get concyclic(F, G, J, L)
By line_intersection_definition on orthocenter(F, J, M), Line(C, G), Line(G, K) we get orthocenter(F, J, M) == line_intersection(Line(C, G), Line(G, K))
By line_definition on orthocenter(F, G, M), G, Line(C, G) we get Line(C, G) == Line(G, orthocenter(F, G, M))
By line_definition on midpoint(K, M), orthocenter(F, G, M), Line(B, F) we get Line(B, F) == Line(midpoint(K, M), orthocenter(F, G, M))
By line_definition on midpoint(K, M), orthocenter(F, J, M), Line(G, K) we get Line(G, K) == Line(midpoint(K, M), orthocenter(F, J, M))
By line_definition on orthocenter(F, J, M), C, Line(C, G) we get Line(C, G) == Line(C, orthocenter(F, J, M))
By line_definition on orthocenter(G, J, M), L, Line(F, L) we get Line(F, L) == Line(L, orthocenter(G, J, M))
By line_definition on orthocenter(F, G, M), B, Line(B, F) we get Line(B, F) == Line(B, orthocenter(F, G, M))
By line_definition on orthocenter(G, J, M), B, Line(B, F) we get Line(B, F) == Line(B, orthocenter(G, J, M))
By line_definition on midpoint(L, M), orthocenter(F, J, M), Line(C, G) we get Line(C, G) == Line(midpoint(L, M), orthocenter(F, J, M))
By line_definition on F, orthocenter(F, G, M), Line(B, F) we get Line(B, F) == Line(F, orthocenter(F, G, M))
By line_definition on G, orthocenter(F, G, J), Line(G, K) we get Line(G, K) == Line(G, orthocenter(F, G, J))
By line_definition on orthocenter(F, G, J), K, Line(G, K) we get Line(G, K) == Line(K, orthocenter(F, G, J))
By line_definition on orthocenter(F, J, M), F, altitude(F, J, M) we get altitude(F, J, M) == Line(F, orthocenter(F, J, M))
By line_definition on J, orthocenter(F, J, M), Line(C, G) we get Line(C, G) == Line(J, orthocenter(F, J, M))
By line_intersection_definition on orthocenter(G, J, M), Line(F, L), Line(B, F) we get orthocenter(G, J, M) == line_intersection(Line(B, F), Line(F, L))
By line_definition on J, orthocenter(F, G, J), altitude(J, F, G) we get altitude(J, F, G) == Line(J, orthocenter(F, G, J))
By perpendicular_line_definition on orthocenter(F, G, M), altitude(M, F, G), Line(F, G) we get altitude(M, F, G) == perpendicular_line(orthocenter(F, G, M), Line(F, G))
By radical_axis_of_intersecting_circles_v0 on L, J, Circle(A, J, K), Circle(C, J, L) we get Line(J, L) == radical_axis(Circle(A, J, K), Circle(C, J, L))
By line_intersection_definition on F, Line(F, G), Line(F, K) we get F == line_intersection(Line(F, G), Line(F, K))
By line_intersection_definition on J, Line(B, F), altitude(J, F, G) we get J == line_intersection(Line(B, F), altitude(J, F, G))
By radical_axis_of_intersecting_circles_v0 on K, L, Circle(A, J, K), Circle(K, L, M) we get Line(K, L) == radical_axis(Circle(A, J, K), Circle(K, L, M))
By perpendicular_line_definition on orthocenter(F, J, M), Line(C, G), Line(F, L) we get Line(C, G) == perpendicular_line(orthocenter(F, J, M), Line(F, L))
By line_intersection_definition on orthocenter(F, G, M), altitude(M, F, G), Line(C, G) we get orthocenter(F, G, M) == line_intersection(Line(C, G), altitude(M, F, G))
By line_intersection_definition on K, Line(G, K), Line(F, K) we get K == line_intersection(Line(F, K), Line(G, K))
By line_intersection_definition on L, Line(A, C), Line(G, L) we get L == line_intersection(Line(A, C), Line(G, L))
By perpendicular_line_definition on orthocenter(G, J, M), Line(F, L), Line(C, G) we get Line(F, L) == perpendicular_line(orthocenter(G, J, M), Line(C, G))
By line_intersection_definition on K, Line(A, B), Line(F, K) we get K == line_intersection(Line(A, B), Line(F, K))
By line_intersection_definition on G, altitude(G, J, M), Line(G, L) we get G == line_intersection(Line(G, L), altitude(G, J, M))
By line_intersection_definition on F, Line(F, G), Line(F, L) we get F == line_intersection(Line(F, G), Line(F, L))
By line_intersection_definition on F, Line(B, F), Line(F, G) we get F == line_intersection(Line(B, F), Line(F, G))
By perpendicular_line_definition on orthocenter(G, J, M), altitude(G, J, M), Line(J, M) we get altitude(G, J, M) == perpendicular_line(orthocenter(G, J, M), Line(J, M))
By perpendicular_line_definition on orthocenter(F, G, J), altitude(J, F, G), Line(F, G) we get altitude(J, F, G) == perpendicular_line(orthocenter(F, G, J), Line(F, G))
By radical_axis_of_intersecting_circles_v0 on M, L, Circle(C, J, L), Circle(K, L, M) we get Line(L, M) == radical_axis(Circle(C, J, L), Circle(K, L, M))
By median_definition on orthocenter(F, G, M), M, L, Line(C, G) we get Line(C, G) == median(orthocenter(F, G, M), L, M)
By radical_axis_of_intersecting_circles_v0 on M, K, Circle(K, L, M), Circle(B, J, K) we get Line(K, M) == radical_axis(Circle(B, J, K), Circle(K, L, M))
By line_intersection_definition on G, Line(G, L), Line(A, G) we get G == line_intersection(Line(A, G), Line(G, L))
By line_intersection_definition on M, altitude(M, F, G), Line(B, C) we get M == line_intersection(Line(B, C), altitude(M, F, G))
By line_intersection_definition on G, Line(G, L), Line(C, G) we get G == line_intersection(Line(C, G), Line(G, L))
By line_intersection_definition on F, Line(A, F), Line(F, G) we get F == line_intersection(Line(A, F), Line(F, G))
By line_intersection_definition on F, Line(F, L), altitude(F, J, M) we get F == line_intersection(Line(F, L), altitude(F, J, M))
By line_intersection_definition on orthocenter(F, G, J), altitude(J, F, G), Line(G, K) we get orthocenter(F, G, J) == line_intersection(Line(G, K), altitude(J, F, G))
By perpendicular_line_definition on orthocenter(F, J, M), Line(G, K), Line(B, F) we get Line(G, K) == perpendicular_line(orthocenter(F, J, M), Line(B, F))
By line_intersection_definition on F, Line(F, L), Line(F, K) we get F == line_intersection(Line(F, K), Line(F, L))
By perpendicular_line_definition on F, Line(F, G), altitude(J, F, G) we get Line(F, G) == perpendicular_line(F, altitude(J, F, G))
By perpendicular_line_definition on orthocenter(F, G, J), Line(G, K), Line(B, F) we get Line(G, K) == perpendicular_line(orthocenter(F, G, J), Line(B, F))
By line_intersection_definition on orthocenter(F, J, M), altitude(F, J, M), Line(G, K) we get orthocenter(F, J, M) == line_intersection(Line(G, K), altitude(F, J, M))
By line_intersection_definition on M, altitude(M, F, G), Line(G, K) we get M == line_intersection(Line(G, K), altitude(M, F, G))
By line_intersection_definition on L, Line(J, L), Line(G, L) we get L == line_intersection(Line(G, L), Line(J, L))
By line_intersection_definition on F, Line(A, F), Line(F, K) we get F == line_intersection(Line(A, F), Line(F, K))
By perpendicular_line_definition on M, Line(J, M), altitude(F, J, M) we get Line(J, M) == perpendicular_line(M, altitude(F, J, M))
By radical_axis_of_intersecting_circles_v0 on M, J, Circle(B, J, K), Circle(C, J, L) we get Line(J, M) == radical_axis(Circle(B, J, K), Circle(C, J, L))
By line_intersection_definition on G, Line(F, G), Line(G, K) we get G == line_intersection(Line(F, G), Line(G, K))
By line_intersection_definition on orthocenter(G, J, M), Line(B, F), altitude(G, J, M) we get orthocenter(G, J, M) == line_intersection(Line(B, F), altitude(G, J, M))
By line_intersection_definition on K, Line(K, L), Line(F, K) we get K == line_intersection(Line(F, K), Line(K, L))
By median_definition on orthocenter(F, J, M), L, M, Line(C, G) we get Line(C, G) == median(orthocenter(F, J, M), L, M)
By line_intersection_definition on J, Line(A, J), altitude(J, F, G) we get J == line_intersection(Line(A, J), altitude(J, F, G))
By line_intersection_definition on F, Line(F, K), altitude(F, J, M) we get F == line_intersection(Line(F, K), altitude(F, J, M))
By line_intersection_definition on J, altitude(J, F, G), Line(J, L) we get J == line_intersection(Line(J, L), altitude(J, F, G))
By line_intersection_definition on orthocenter(F, J, M), Line(C, G), altitude(F, J, M) we get orthocenter(F, J, M) == line_intersection(Line(C, G), altitude(F, J, M))
By perpendicular_line_definition on orthocenter(F, G, M), Line(C, G), Line(F, L) we get Line(C, G) == perpendicular_line(orthocenter(F, G, M), Line(F, L))
By perpendicular_line_definition on orthocenter(F, J, M), altitude(F, J, M), Line(J, M) we get altitude(F, J, M) == perpendicular_line(orthocenter(F, J, M), Line(J, M))
By perpendicular_line_definition on F, Line(F, G), altitude(M, F, G) we get Line(F, G) == perpendicular_line(F, altitude(M, F, G))
By line_intersection_definition on orthocenter(G, J, M), Line(F, L), altitude(G, J, M) we get orthocenter(G, J, M) == line_intersection(Line(F, L), altitude(G, J, M))
By line_intersection_definition on F, Line(B, F), Line(F, K) we get F == line_intersection(Line(B, F), Line(F, K))
By line_intersection_definition on G, altitude(G, J, M), Line(G, K) we get G == line_intersection(Line(G, K), altitude(G, J, M))
By line_intersection_definition on M, Line(F, L), altitude(M, F, G) we get M == line_intersection(Line(F, L), altitude(M, F, G))
By perpendicular_line_definition on M, Line(J, M), altitude(G, J, M) we get Line(J, M) == perpendicular_line(M, altitude(G, J, M))
By line_intersection_definition on J, altitude(J, F, G), Line(C, G) we get J == line_intersection(Line(C, G), altitude(J, F, G))
By median_definition on orthocenter(F, G, M), K, M, Line(B, F) we get Line(B, F) == median(orthocenter(F, G, M), K, M)
By line_intersection_definition on orthocenter(F, G, J), altitude(J, F, G), Line(F, L) we get orthocenter(F, G, J) == line_intersection(Line(F, L), altitude(J, F, G))
By line_intersection_definition on G, Line(G, L), Line(F, G) we get G == line_intersection(Line(F, G), Line(G, L))
By line_intersection_definition on J, altitude(J, F, G), Line(J, K) we get J == line_intersection(Line(J, K), altitude(J, F, G))
By line_intersection_definition on G, Line(F, G), Line(A, G) we get G == line_intersection(Line(A, G), Line(F, G))
By perpendicular_line_definition on J, Line(J, M), altitude(G, J, M) we get Line(J, M) == perpendicular_line(J, altitude(G, J, M))
By line_intersection_definition on F, altitude(F, J, M), Line(B, F) we get F == line_intersection(Line(B, F), altitude(F, J, M))
By radical_axis_of_intersecting_circles_v0 on K, J, Circle(B, J, K), Circle(A, J, K) we get Line(J, K) == radical_axis(Circle(A, J, K), Circle(B, J, K))
By line_intersection_definition on orthocenter(F, G, M), Line(B, F), altitude(M, F, G) we get orthocenter(F, G, M) == line_intersection(Line(B, F), altitude(M, F, G))
By line_intersection_definition on G, Line(C, G), Line(F, G) we get G == line_intersection(Line(C, G), Line(F, G))
By perpendicular_line_definition on J, Line(J, M), altitude(F, J, M) we get Line(J, M) == perpendicular_line(J, altitude(F, J, M))
By perpendicular_line_definition on G, Line(F, G), altitude(M, F, G) we get Line(F, G) == perpendicular_line(G, altitude(M, F, G))
By perpendicular_line_definition on G, Line(F, G), altitude(J, F, G) we get Line(F, G) == perpendicular_line(G, altitude(J, F, G))
By line_intersection_definition on G, Line(G, L), Line(G, K) we get G == line_intersection(Line(G, K), Line(G, L))
By line_intersection_definition on G, Line(C, G), altitude(G, J, M) we get G == line_intersection(Line(C, G), altitude(G, J, M))
By median_definition on orthocenter(G, J, M), K, M, Line(B, F) we get Line(B, F) == median(orthocenter(G, J, M), K, M)
By perpendicular_line_definition on orthocenter(G, J, M), Line(B, F), Line(G, K) we get Line(B, F) == perpendicular_line(orthocenter(G, J, M), Line(G, K))
By line_intersection_definition on F, Line(A, F), altitude(F, J, M) we get F == line_intersection(Line(A, F), altitude(F, J, M))
By line_intersection_definition on G, altitude(G, J, M), Line(A, G) we get G == line_intersection(Line(A, G), altitude(G, J, M))
By line_intersection_definition on L, Line(G, L), Line(K, L) we get L == line_intersection(Line(G, L), Line(K, L))
By line_intersection_definition on L, Line(G, L), Line(F, L) we get L == line_intersection(Line(F, L), Line(G, L))
By perpendicular_line_definition on orthocenter(F, G, M), Line(B, F), Line(G, K) we get Line(B, F) == perpendicular_line(orthocenter(F, G, M), Line(G, K))
By line_intersection_definition on K, Line(J, K), Line(F, K) we get K == line_intersection(Line(F, K), Line(J, K))
By perpendicular_line_definition on orthocenter(F, G, J), Line(F, L), Line(C, G) we get Line(F, L) == perpendicular_line(orthocenter(F, G, J), Line(C, G))
By line_unique_intersection on Line(F, L), Line(B, F), orthocenter(G, J, M), F we get F == orthocenter(G, J, M)
By line_unique_intersection on Line(B, F), Line(C, G), J, orthocenter(F, G, M) we get J == orthocenter(F, G, M)
By line_unique_intersection on Line(F, L), Line(G, K), orthocenter(F, G, J), M we get M == orthocenter(F, G, J)
By line_unique_intersection on Line(C, G), Line(G, K), G, orthocenter(F, J, M) we get G == orthocenter(F, J, M)
By same_angle_v0 on G, K, M, L we get angle(K, G, L) == angle(M, G, L) mod 360
By same_angle_v1 on L, F, M, G we get angle(F, L, G) == angle(M, L, G) mod 360
By same_angle_v0 on K, B, A, F we get angle(A, K, F) == angle(B, K, F) mod 360
By same_angle_v2 on G, A, T, L we get angle(A, G, L) == angle(T, G, L) + 180 mod 360
By same_angle_v3 on F, S, A, K we get angle(S, F, K) == angle(A, F, K) + 180 mod 360
By same_angle_v1 on L, C, A, G we get angle(A, L, G) == angle(C, L, G) mod 360
By same_angle_v0 on K, M, G, F we get angle(G, K, F) == angle(M, K, F) mod 360
By same_angle_v1 on F, M, L, K we get angle(L, F, K) == angle(M, F, K) mod 360
By projection_definition on G, midpoint(K, M), Line(B, F) we get midpoint(K, M) == projection(G, Line(B, F))
By projection_definition on F, midpoint(L, M), Line(C, G) we get midpoint(L, M) == projection(F, Line(C, G))
By same_angle_v1 on G, J, C, F we get angle(C, G, F) == angle(J, G, F) mod 360
By perpendicular_direction_conditions_v0_r on J, midpoint(K, M), midpoint(K, M), G we get 180 == 2 * direction(J, midpoint(K, M)) - 2 * direction(midpoint(K, M), G) mod 360
By same_angle_v1 on G, K, M, F we get angle(K, G, F) == angle(M, G, F) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(K, M), B, J we get 180 == 2 * direction(G, midpoint(K, M)) - 2 * direction(B, J) mod 360
By same_angle_v0 on F, L, M, G we get angle(L, F, G) == angle(M, F, G) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(K, M), midpoint(K, M), G we get 180 == 2 * direction(F, midpoint(K, M)) - 2 * direction(midpoint(K, M), G) mod 360
By perpendicular_direction_conditions_v0_r on J, F, midpoint(K, M), G we get 180 == 2 * direction(J, F) - 2 * direction(midpoint(K, M), G) mod 360
By perpendicular_direction_conditions_v0_r on F, J, G, midpoint(K, M) we get 180 == 2 * direction(F, J) - 2 * direction(G, midpoint(K, M)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), F, G, J we get 180 == 2 * direction(midpoint(L, M), F) - 2 * direction(G, J) mod 360
By same_angle_v3 on G, A, T, F we get angle(A, G, F) == angle(T, G, F) + 180 mod 360
By same_angle_v0 on F, J, B, G we get angle(B, F, G) == angle(J, F, G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), F, midpoint(L, M), C we get 180 == 2 * direction(midpoint(L, M), F) - 2 * direction(midpoint(L, M), C) mod 360
By same_angle_v3 on F, S, A, G we get angle(S, F, G) == angle(A, F, G) + 180 mod 360
By in_imply_collinear on orthocenter(G, J, M), F, L we get collinear(F, L, orthocenter(G, J, M))
By perpendicular_direction_conditions_v0_r on G, C, midpoint(L, M), F we get 180 == 2 * direction(G, C) - 2 * direction(midpoint(L, M), F) mod 360
By perpendicular_direction_conditions_v0_r on J, C, midpoint(L, M), F we get 180 == 2 * direction(J, C) - 2 * direction(midpoint(L, M), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), F, C, G we get 180 == 2 * direction(midpoint(L, M), F) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on B, F, midpoint(K, M), G we get 180 == 2 * direction(B, F) - 2 * direction(midpoint(K, M), G) mod 360
By perpendicular_direction_conditions_v0_r on J, B, midpoint(K, M), G we get 180 == 2 * direction(J, B) - 2 * direction(midpoint(K, M), G) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(K, M), midpoint(K, M), B we get 180 == 2 * direction(G, midpoint(K, M)) - 2 * direction(midpoint(K, M), B) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(L, M), J, midpoint(L, M) we get 180 == 2 * direction(F, midpoint(L, M)) - 2 * direction(J, midpoint(L, M)) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(K, M), B, F we get 180 == 2 * direction(G, midpoint(K, M)) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), F, C, J we get 180 == 2 * direction(midpoint(L, M), F) - 2 * direction(C, J) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), B, midpoint(K, M), G we get 180 == 2 * direction(midpoint(K, M), B) - 2 * direction(midpoint(K, M), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), G, F, J we get 180 == 2 * direction(midpoint(K, M), G) - 2 * direction(F, J) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), F, G, midpoint(K, M) we get 180 == 2 * direction(midpoint(K, M), F) - 2 * direction(G, midpoint(K, M)) mod 360
By perpendicular_direction_conditions_v0_r on C, J, midpoint(L, M), F we get 180 == 2 * direction(C, J) - 2 * direction(midpoint(L, M), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), G, B, J we get 180 == 2 * direction(midpoint(K, M), G) - 2 * direction(B, J) mod 360
By perpendicular_direction_conditions_v0_r on J, G, midpoint(L, M), F we get 180 == 2 * direction(J, G) - 2 * direction(midpoint(L, M), F) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(K, M), midpoint(K, M), G we get 180 == 2 * direction(B, midpoint(K, M)) - 2 * direction(midpoint(K, M), G) mod 360
By perpendicular_direction_conditions_v0_r on C, J, F, midpoint(L, M) we get 180 == 2 * direction(C, J) - 2 * direction(F, midpoint(L, M)) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(L, M), F, midpoint(L, M) we get 180 == 2 * direction(C, midpoint(L, M)) - 2 * direction(F, midpoint(L, M)) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(K, M), F, midpoint(K, M) we get 180 == 2 * direction(G, midpoint(K, M)) - 2 * direction(F, midpoint(K, M)) mod 360
By perpendicular_direction_conditions_v0_r on G, C, F, midpoint(L, M) we get 180 == 2 * direction(G, C) - 2 * direction(F, midpoint(L, M)) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(L, M), F, midpoint(L, M) we get 180 == 2 * direction(G, midpoint(L, M)) - 2 * direction(F, midpoint(L, M)) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(L, M), C, J we get 180 == 2 * direction(F, midpoint(L, M)) - 2 * direction(C, J) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), F, G, midpoint(L, M) we get 180 == 2 * direction(midpoint(L, M), F) - 2 * direction(G, midpoint(L, M)) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(L, M), J, C we get 180 == 2 * direction(F, midpoint(L, M)) - 2 * direction(J, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), F, J, C we get 180 == 2 * direction(midpoint(L, M), F) - 2 * direction(J, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), G, F, midpoint(K, M) we get 180 == 2 * direction(midpoint(K, M), G) - 2 * direction(F, midpoint(K, M)) mod 360
By perpendicular_direction_conditions_v0_r on F, B, G, midpoint(K, M) we get 180 == 2 * direction(F, B) - 2 * direction(G, midpoint(K, M)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), G, J, midpoint(K, M) we get 180 == 2 * direction(midpoint(K, M), G) - 2 * direction(J, midpoint(K, M)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), F, J, midpoint(L, M) we get 180 == 2 * direction(midpoint(L, M), F) - 2 * direction(J, midpoint(L, M)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), G, B, midpoint(K, M) we get 180 == 2 * direction(midpoint(K, M), G) - 2 * direction(B, midpoint(K, M)) mod 360
By perpendicular_direction_conditions_v0_r on C, G, midpoint(L, M), F we get 180 == 2 * direction(C, G) - 2 * direction(midpoint(L, M), F) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(K, M), F, B we get 180 == 2 * direction(G, midpoint(K, M)) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on J, F, G, midpoint(K, M) we get 180 == 2 * direction(J, F) - 2 * direction(G, midpoint(K, M)) mod 360
By perpendicular_direction_conditions_v0_r on J, midpoint(L, M), F, midpoint(L, M) we get 180 == 2 * direction(J, midpoint(L, M)) - 2 * direction(F, midpoint(L, M)) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(K, M), J, F we get 180 == 2 * direction(G, midpoint(K, M)) - 2 * direction(J, F) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(K, M), midpoint(K, M), J we get 180 == 2 * direction(G, midpoint(K, M)) - 2 * direction(midpoint(K, M), J) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(K, M), J, midpoint(K, M) we get 180 == 2 * direction(G, midpoint(K, M)) - 2 * direction(J, midpoint(K, M)) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(K, M), G, midpoint(K, M) we get 180 == 2 * direction(F, midpoint(K, M)) - 2 * direction(G, midpoint(K, M)) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(K, M), midpoint(K, M), F we get 180 == 2 * direction(G, midpoint(K, M)) - 2 * direction(midpoint(K, M), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), G, J, B we get 180 == 2 * direction(midpoint(K, M), G) - 2 * direction(J, B) mod 360
By in_imply_collinear on orthocenter(F, G, J), K, G we get collinear(G, K, orthocenter(F, G, J))
By perpendicular_direction_conditions_v0_r on F, B, midpoint(K, M), G we get 180 == 2 * direction(F, B) - 2 * direction(midpoint(K, M), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), J, G, midpoint(K, M) we get 180 == 2 * direction(midpoint(K, M), J) - 2 * direction(G, midpoint(K, M)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), C, midpoint(L, M), F we get 180 == 2 * direction(midpoint(L, M), C) - 2 * direction(midpoint(L, M), F) mod 360
By perpendicular_direction_conditions_v0_r on J, B, G, midpoint(K, M) we get 180 == 2 * direction(J, B) - 2 * direction(G, midpoint(K, M)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), F, midpoint(L, M), G we get 180 == 2 * direction(midpoint(L, M), F) - 2 * direction(midpoint(L, M), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), F, C, midpoint(L, M) we get 180 == 2 * direction(midpoint(L, M), F) - 2 * direction(C, midpoint(L, M)) mod 360
By in_imply_collinear on orthocenter(G, J, M), F, M we get collinear(F, M, orthocenter(G, J, M))
By perpendicular_direction_conditions_v0_r on J, midpoint(K, M), G, midpoint(K, M) we get 180 == 2 * direction(J, midpoint(K, M)) - 2 * direction(G, midpoint(K, M)) mod 360
By perpendicular_direction_conditions_v0_r on G, J, F, midpoint(L, M) we get 180 == 2 * direction(G, J) - 2 * direction(F, midpoint(L, M)) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(L, M), midpoint(L, M), F we get 180 == 2 * direction(G, midpoint(L, M)) - 2 * direction(midpoint(L, M), F) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(L, M), G, J we get 180 == 2 * direction(F, midpoint(L, M)) - 2 * direction(G, J) mod 360
By perpendicular_direction_conditions_v0_r on B, J, midpoint(K, M), G we get 180 == 2 * direction(B, J) - 2 * direction(midpoint(K, M), G) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(L, M), midpoint(L, M), F we get 180 == 2 * direction(C, midpoint(L, M)) - 2 * direction(midpoint(L, M), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), J, F, midpoint(L, M) we get 180 == 2 * direction(midpoint(L, M), J) - 2 * direction(F, midpoint(L, M)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), G, midpoint(K, M), B we get 180 == 2 * direction(midpoint(K, M), G) - 2 * direction(midpoint(K, M), B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), C, F, midpoint(L, M) we get 180 == 2 * direction(midpoint(L, M), C) - 2 * direction(F, midpoint(L, M)) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(L, M), G, midpoint(L, M) we get 180 == 2 * direction(F, midpoint(L, M)) - 2 * direction(G, midpoint(L, M)) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(L, M), J, G we get 180 == 2 * direction(F, midpoint(L, M)) - 2 * direction(J, G) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(L, M), midpoint(L, M), C we get 180 == 2 * direction(F, midpoint(L, M)) - 2 * direction(midpoint(L, M), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), G, F, B we get 180 == 2 * direction(midpoint(K, M), G) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(L, M), C, midpoint(L, M) we get 180 == 2 * direction(F, midpoint(L, M)) - 2 * direction(C, midpoint(L, M)) mod 360
By perpendicular_direction_conditions_v0_r on G, J, midpoint(L, M), F we get 180 == 2 * direction(G, J) - 2 * direction(midpoint(L, M), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), G, F, midpoint(L, M) we get 180 == 2 * direction(midpoint(L, M), G) - 2 * direction(F, midpoint(L, M)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), F, midpoint(K, M), G we get 180 == 2 * direction(midpoint(K, M), F) - 2 * direction(midpoint(K, M), G) mod 360
By in_imply_collinear on orthocenter(G, J, M), B, F we get collinear(B, F, orthocenter(G, J, M))
By perpendicular_direction_conditions_v0_r on midpoint(K, M), G, J, F we get 180 == 2 * direction(midpoint(K, M), G) - 2 * direction(J, F) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(K, M), G, midpoint(K, M) we get 180 == 2 * direction(B, midpoint(K, M)) - 2 * direction(G, midpoint(K, M)) mod 360
By perpendicular_direction_conditions_v0_r on C, G, F, midpoint(L, M) we get 180 == 2 * direction(C, G) - 2 * direction(F, midpoint(L, M)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), B, G, midpoint(K, M) we get 180 == 2 * direction(midpoint(K, M), B) - 2 * direction(G, midpoint(K, M)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), F, midpoint(L, M), J we get 180 == 2 * direction(midpoint(L, M), F) - 2 * direction(midpoint(L, M), J) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), G, B, F we get 180 == 2 * direction(midpoint(K, M), G) - 2 * direction(B, F) mod 360
By in_imply_collinear on orthocenter(F, G, J), M, F we get collinear(F, M, orthocenter(F, G, J))
By perpendicular_direction_conditions_v0_r on midpoint(K, M), G, midpoint(K, M), F we get 180 == 2 * direction(midpoint(K, M), G) - 2 * direction(midpoint(K, M), F) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(K, M), F, J we get 180 == 2 * direction(G, midpoint(K, M)) - 2 * direction(F, J) mod 360
By in_imply_collinear on orthocenter(F, G, J), G, midpoint(K, M) we get collinear(G, midpoint(K, M), orthocenter(F, G, J))
By perpendicular_direction_conditions_v0_r on F, midpoint(L, M), midpoint(L, M), G we get 180 == 2 * direction(F, midpoint(L, M)) - 2 * direction(midpoint(L, M), G) mod 360
By perpendicular_direction_conditions_v0_r on B, F, G, midpoint(K, M) we get 180 == 2 * direction(B, F) - 2 * direction(G, midpoint(K, M)) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(L, M), C, G we get 180 == 2 * direction(F, midpoint(L, M)) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), F, G, C we get 180 == 2 * direction(midpoint(L, M), F) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), J, midpoint(K, M), G we get 180 == 2 * direction(midpoint(K, M), J) - 2 * direction(midpoint(K, M), G) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(K, M), J, B we get 180 == 2 * direction(G, midpoint(K, M)) - 2 * direction(J, B) mod 360
By perpendicular_direction_conditions_v0_r on J, C, F, midpoint(L, M) we get 180 == 2 * direction(J, C) - 2 * direction(F, midpoint(L, M)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(K, M), G, midpoint(K, M), J we get 180 == 2 * direction(midpoint(K, M), G) - 2 * direction(midpoint(K, M), J) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(K, M), B, midpoint(K, M) we get 180 == 2 * direction(G, midpoint(K, M)) - 2 * direction(B, midpoint(K, M)) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(L, M), G, C we get 180 == 2 * direction(F, midpoint(L, M)) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), G, midpoint(L, M), F we get 180 == 2 * direction(midpoint(L, M), G) - 2 * direction(midpoint(L, M), F) mod 360
By perpendicular_direction_conditions_v0_r on F, J, midpoint(K, M), G we get 180 == 2 * direction(F, J) - 2 * direction(midpoint(K, M), G) mod 360
By perpendicular_direction_conditions_v0_r on J, G, F, midpoint(L, M) we get 180 == 2 * direction(J, G) - 2 * direction(F, midpoint(L, M)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), F, J, G we get 180 == 2 * direction(midpoint(L, M), F) - 2 * direction(J, G) mod 360
By perpendicular_direction_conditions_v0_r on J, midpoint(L, M), midpoint(L, M), F we get 180 == 2 * direction(J, midpoint(L, M)) - 2 * direction(midpoint(L, M), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(L, M), J, midpoint(L, M), F we get 180 == 2 * direction(midpoint(L, M), J) - 2 * direction(midpoint(L, M), F) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(L, M), midpoint(L, M), J we get 180 == 2 * direction(F, midpoint(L, M)) - 2 * direction(midpoint(L, M), J) mod 360
By perpendicular_direction_conditions_v0_r on B, J, G, midpoint(K, M) we get 180 == 2 * direction(B, J) - 2 * direction(G, midpoint(K, M)) mod 360
By in_imply_collinear on orthocenter(F, G, J), M, L we get collinear(L, M, orthocenter(F, G, J))
By in_imply_collinear on orthocenter(G, J, M), L, M we get collinear(L, M, orthocenter(G, J, M))
By in_imply_collinear on orthocenter(G, J, M), F, J we get collinear(F, J, orthocenter(G, J, M))
By in_imply_collinear on orthocenter(F, G, J), midpoint(L, M), F we get collinear(F, midpoint(L, M), orthocenter(F, G, J))
By in_imply_collinear on orthocenter(G, J, M), midpoint(L, M), M we get collinear(M, midpoint(L, M), orthocenter(G, J, M))
By in_imply_collinear on orthocenter(G, J, M), F, midpoint(L, M) we get collinear(F, midpoint(L, M), orthocenter(G, J, M))
By in_imply_collinear on orthocenter(F, G, M), J, G we get collinear(G, J, orthocenter(F, G, M))
By in_imply_collinear on orthocenter(F, G, J), L, midpoint(L, M) we get collinear(L, midpoint(L, M), orthocenter(F, G, J))
By in_imply_collinear on orthocenter(F, J, M), G, midpoint(K, M) we get collinear(G, midpoint(K, M), orthocenter(F, J, M))
By reverse_direction on A, midpoint(K, L) we get 180 == direction(A, midpoint(K, L)) - direction(midpoint(K, L), A) mod 360
By in_imply_collinear on orthocenter(F, J, M), C, J we get collinear(C, J, orthocenter(F, J, M))
By in_imply_collinear on orthocenter(F, G, M), B, F we get collinear(B, F, orthocenter(F, G, M))
By in_imply_collinear on orthocenter(F, J, M), midpoint(L, M), C we get collinear(C, midpoint(L, M), orthocenter(F, J, M))
By in_imply_collinear on orthocenter(G, J, M), midpoint(K, M), F we get collinear(F, midpoint(K, M), orthocenter(G, J, M))
By in_imply_collinear on orthocenter(F, G, M), J, B we get collinear(B, J, orthocenter(F, G, M))
By reverse_direction on midpoint(L, M), G we get 180 == direction(midpoint(L, M), G) - direction(G, midpoint(L, M)) mod 360
By in_imply_collinear on orthocenter(F, G, J), K, midpoint(K, M) we get collinear(K, midpoint(K, M), orthocenter(F, G, J))
By in_imply_collinear on orthocenter(F, G, M), midpoint(L, M), G we get collinear(G, midpoint(L, M), orthocenter(F, G, M))
By in_imply_collinear on orthocenter(F, J, M), G, M we get collinear(G, M, orthocenter(F, J, M))
By aa_anti_similarity on K, J, midpoint(K, M), M, J, midpoint(K, M) we get anti_similar_triangles(J, K, midpoint(K, M), J, M, midpoint(K, M))
By in_imply_collinear on orthocenter(F, J, M), midpoint(K, M), M we get collinear(M, midpoint(K, M), orthocenter(F, J, M))
By in_imply_collinear on orthocenter(F, J, M), G, K we get collinear(G, K, orthocenter(F, J, M))
By in_imply_collinear on orthocenter(G, J, M), J, midpoint(K, M) we get collinear(J, midpoint(K, M), orthocenter(G, J, M))
By in_imply_collinear on orthocenter(F, G, M), G, C we get collinear(C, G, orthocenter(F, G, M))
By in_imply_collinear on orthocenter(F, G, M), midpoint(L, M), C we get collinear(C, midpoint(L, M), orthocenter(F, G, M))
By in_imply_collinear on orthocenter(F, G, J), L, F we get collinear(F, L, orthocenter(F, G, J))
By reverse_direction on midpoint(K, M), F we get 180 == direction(midpoint(K, M), F) - direction(F, midpoint(K, M)) mod 360
By in_imply_collinear on orthocenter(F, G, M), B, midpoint(K, M) we get collinear(B, midpoint(K, M), orthocenter(F, G, M))
By in_imply_collinear on orthocenter(G, J, M), B, midpoint(K, M) we get collinear(B, midpoint(K, M), orthocenter(G, J, M))
By in_imply_collinear on orthocenter(F, G, M), C, J we get collinear(C, J, orthocenter(F, G, M))
By in_imply_collinear on orthocenter(F, J, M), M, K we get collinear(K, M, orthocenter(F, J, M))
By in_imply_collinear on orthocenter(F, G, M), F, J we get collinear(F, J, orthocenter(F, G, M))
By in_imply_collinear on orthocenter(G, J, M), midpoint(L, M), L we get collinear(L, midpoint(L, M), orthocenter(G, J, M))
By in_imply_collinear on orthocenter(F, J, M), G, midpoint(L, M) we get collinear(G, midpoint(L, M), orthocenter(F, J, M))
By in_imply_collinear on orthocenter(G, J, M), B, J we get collinear(B, J, orthocenter(G, J, M))
By in_imply_collinear on orthocenter(F, G, J), G, M we get collinear(G, M, orthocenter(F, G, J))
By in_imply_collinear on orthocenter(F, J, M), G, C we get collinear(C, G, orthocenter(F, J, M))
By in_imply_collinear on orthocenter(F, G, M), J, midpoint(L, M) we get collinear(J, midpoint(L, M), orthocenter(F, G, M))
By aa_anti_similarity on K, midpoint(K, M), J, M, midpoint(K, M), J we get anti_similar_triangles(J, K, midpoint(K, M), J, M, midpoint(K, M))
By in_imply_collinear on orthocenter(F, G, J), K, M we get collinear(K, M, orthocenter(F, G, J))
By in_imply_collinear on orthocenter(F, G, J), midpoint(K, M), M we get collinear(M, midpoint(K, M), orthocenter(F, G, J))
By in_imply_collinear on orthocenter(F, J, M), K, midpoint(K, M) we get collinear(K, midpoint(K, M), orthocenter(F, J, M))
By in_imply_collinear on orthocenter(F, J, M), midpoint(L, M), J we get collinear(J, midpoint(L, M), orthocenter(F, J, M))
By in_imply_collinear on orthocenter(F, G, M), J, midpoint(K, M) we get collinear(J, midpoint(K, M), orthocenter(F, G, M))
By in_imply_collinear on orthocenter(F, J, M), J, G we get collinear(G, J, orthocenter(F, J, M))
By in_imply_collinear on orthocenter(F, G, J), midpoint(L, M), M we get collinear(M, midpoint(L, M), orthocenter(F, G, J))
By in_imply_collinear on orthocenter(F, G, M), F, midpoint(K, M) we get collinear(F, midpoint(K, M), orthocenter(F, G, M))
By point_on_perpendicular_bisector on M, K, orthocenter(F, G, M), Line(B, F) we get distance(K, orthocenter(F, G, M)) == distance(M, orthocenter(F, G, M))
By aa_anti_similarity on L, A, midpoint(K, L), K, A, midpoint(K, L) we get anti_similar_triangles(A, K, midpoint(K, L), A, L, midpoint(K, L))
By aa_anti_similarity on M, C, midpoint(L, M), L, C, midpoint(L, M) we get anti_similar_triangles(C, L, midpoint(L, M), C, M, midpoint(L, M))
By double_perpendicular_and_parallel_v0 on altitude(G, J, M), Line(J, M), altitude(F, J, M) we get parallel(altitude(F, J, M), altitude(G, J, M))
By reverse_direction on J, midpoint(K, M) we get 180 == direction(J, midpoint(K, M)) - direction(midpoint(K, M), J) mod 360
By aa_anti_similarity on K, J, midpoint(K, L), L, J, midpoint(K, L) we get anti_similar_triangles(J, K, midpoint(K, L), J, L, midpoint(K, L))
By double_perpendicular_and_parallel_v0 on altitude(F, J, M), Line(J, M), Line(B, C) we get parallel(Line(B, C), altitude(F, J, M))
By point_on_perpendicular_bisector on M, L, orthocenter(F, J, M), Line(C, G) we get distance(L, orthocenter(F, J, M)) == distance(M, orthocenter(F, J, M))
By aa_anti_similarity on K, midpoint(K, L), A, L, midpoint(K, L), A we get anti_similar_triangles(A, K, midpoint(K, L), A, L, midpoint(K, L))
By point_on_perpendicular_bisector on K, M, orthocenter(G, J, M), Line(B, F) we get distance(K, orthocenter(G, J, M)) == distance(M, orthocenter(G, J, M))
By internal_angle_bisector_definition_v0 on M, midpoint(K, M), K, F we get angle(M, F, midpoint(K, M)) == angle(midpoint(K, M), F, K) mod 360
By reverse_direction on midpoint(K, L), J we get 180 == direction(midpoint(K, L), J) - direction(J, midpoint(K, L)) mod 360
By aa_anti_similarity on K, midpoint(K, M), B, M, midpoint(K, M), B we get anti_similar_triangles(B, K, midpoint(K, M), B, M, midpoint(K, M))
By double_perpendicular_and_parallel_v0 on altitude(G, J, M), Line(J, M), Line(B, C) we get parallel(Line(B, C), altitude(G, J, M))
By double_perpendicular_and_parallel_v0 on altitude(M, F, G), Line(F, G), altitude(J, F, G) we get parallel(altitude(J, F, G), altitude(M, F, G))
By aa_anti_similarity on L, midpoint(L, M), J, M, midpoint(L, M), J we get anti_similar_triangles(J, L, midpoint(L, M), J, M, midpoint(L, M))
By point_on_perpendicular_bisector on M, L, orthocenter(F, G, M), Line(C, G) we get distance(L, orthocenter(F, G, M)) == distance(M, orthocenter(F, G, M))
By reverse_direction on midpoint(L, M), C we get 180 == direction(midpoint(L, M), C) - direction(C, midpoint(L, M)) mod 360
By reverse_direction on midpoint(K, L), A we get 180 == direction(midpoint(K, L), A) - direction(A, midpoint(K, L)) mod 360
By reverse_direction on J, midpoint(K, L) we get 180 == direction(J, midpoint(K, L)) - direction(midpoint(K, L), J) mod 360
By reverse_direction on midpoint(L, M), J we get 180 == direction(midpoint(L, M), J) - direction(J, midpoint(L, M)) mod 360
By reverse_direction on G, midpoint(L, M) we get 180 == direction(G, midpoint(L, M)) - direction(midpoint(L, M), G) mod 360
By internal_angle_bisector_definition_v0 on L, midpoint(L, M), M, G we get angle(L, G, midpoint(L, M)) == angle(midpoint(L, M), G, M) mod 360
By aa_anti_similarity on M, J, midpoint(L, M), L, J, midpoint(L, M) we get anti_similar_triangles(J, L, midpoint(L, M), J, M, midpoint(L, M))
By aa_anti_similarity on L, C, midpoint(L, M), M, C, midpoint(L, M) we get anti_similar_triangles(C, L, midpoint(L, M), C, M, midpoint(L, M))
By aa_anti_similarity on M, J, midpoint(K, M), K, J, midpoint(K, M) we get anti_similar_triangles(J, K, midpoint(K, M), J, M, midpoint(K, M))
By aa_anti_similarity on M, midpoint(K, M), B, K, midpoint(K, M), B we get anti_similar_triangles(B, K, midpoint(K, M), B, M, midpoint(K, M))
By aa_anti_similarity on L, midpoint(K, L), J, K, midpoint(K, L), J we get anti_similar_triangles(J, K, midpoint(K, L), J, L, midpoint(K, L))
By reverse_direction on C, midpoint(L, M) we get 180 == direction(C, midpoint(L, M)) - direction(midpoint(L, M), C) mod 360
By internal_angle_bisector_definition_v0 on K, midpoint(K, M), M, F we get angle(K, F, midpoint(K, M)) == angle(midpoint(K, M), F, M) mod 360
By reverse_direction on F, midpoint(K, M) we get 180 == direction(F, midpoint(K, M)) - direction(midpoint(K, M), F) mod 360
By aa_anti_similarity on K, midpoint(K, L), J, L, midpoint(K, L), J we get anti_similar_triangles(J, K, midpoint(K, L), J, L, midpoint(K, L))
By aa_anti_similarity on M, midpoint(L, M), C, L, midpoint(L, M), C we get anti_similar_triangles(C, L, midpoint(L, M), C, M, midpoint(L, M))
By aa_anti_similarity on L, J, midpoint(K, L), K, J, midpoint(K, L) we get anti_similar_triangles(J, K, midpoint(K, L), J, L, midpoint(K, L))
By internal_angle_bisector_definition_v0 on M, midpoint(L, M), L, G we get angle(M, G, midpoint(L, M)) == angle(midpoint(L, M), G, L) mod 360
By reverse_direction on B, midpoint(K, M) we get 180 == direction(B, midpoint(K, M)) - direction(midpoint(K, M), B) mod 360
By aa_anti_similarity on K, B, midpoint(K, M), M, B, midpoint(K, M) we get anti_similar_triangles(B, K, midpoint(K, M), B, M, midpoint(K, M))
By aa_anti_similarity on L, J, midpoint(L, M), M, J, midpoint(L, M) we get anti_similar_triangles(J, L, midpoint(L, M), J, M, midpoint(L, M))
By reverse_direction on J, midpoint(L, M) we get 180 == direction(J, midpoint(L, M)) - direction(midpoint(L, M), J) mod 360
By aa_anti_similarity on M, B, midpoint(K, M), K, B, midpoint(K, M) we get anti_similar_triangles(B, K, midpoint(K, M), B, M, midpoint(K, M))
By aa_anti_similarity on K, A, midpoint(K, L), L, A, midpoint(K, L) we get anti_similar_triangles(A, K, midpoint(K, L), A, L, midpoint(K, L))
By reverse_direction on midpoint(K, M), J we get 180 == direction(midpoint(K, M), J) - direction(J, midpoint(K, M)) mod 360
By aa_anti_similarity on M, midpoint(L, M), J, L, midpoint(L, M), J we get anti_similar_triangles(J, L, midpoint(L, M), J, M, midpoint(L, M))
By aa_anti_similarity on L, midpoint(K, L), A, K, midpoint(K, L), A we get anti_similar_triangles(A, K, midpoint(K, L), A, L, midpoint(K, L))
By aa_anti_similarity on L, midpoint(L, M), C, M, midpoint(L, M), C we get anti_similar_triangles(C, L, midpoint(L, M), C, M, midpoint(L, M))
By aa_anti_similarity on M, midpoint(K, M), J, K, midpoint(K, M), J we get anti_similar_triangles(J, K, midpoint(K, M), J, M, midpoint(K, M))
By reverse_direction on midpoint(K, M), B we get 180 == direction(midpoint(K, M), B) - direction(B, midpoint(K, M)) mod 360
By anti_similar_triangle_basic_properties on L, K, A, K, M, F we get angle(L, K, A) == 0 - angle(K, M, F) mod 360, angle(K, A, L) == 0 - angle(M, F, K) mod 360, angle(A, L, K) == 0 - angle(F, K, M) mod 360, log(distance(K, L)) + log(distance(F, M)) == log(distance(K, M)) + log(distance(A, K)), log(distance(A, K)) + log(distance(F, K)) == log(distance(F, M)) + log(distance(A, L)), log(distance(A, L)) + log(distance(K, M)) == log(distance(F, K)) + log(distance(K, L))
By external_angle_bisector_definition_v0_r on G, M, G, midpoint(L, M) we get Line(M, midpoint(L, M)) == external_angle_bisector(G, midpoint(L, M), G)
By internal_angle_bisector_definition_v0_r on L, J, K, G we get Line(G, J) == internal_angle_bisector(K, G, L)
By collinear_definition on midpoint(L, M), F, M we get F in Line(M, midpoint(L, M)), M in Line(F, midpoint(L, M)), Line(F, midpoint(L, M)) == Line(M, midpoint(L, M)), 0 == 2 * angle(F, midpoint(L, M), M) mod 360
By external_angle_bisector_definition_v0_r on F, K, F, midpoint(K, M) we get Line(K, midpoint(K, M)) == external_angle_bisector(F, midpoint(K, M), F)
By external_angle_bisector_definition_v0_r on K, midpoint(K, M), G, M we get external_angle_bisector(G, M, K) == Line(M, midpoint(K, M))
By external_angle_bisector_definition_v0_r on F, midpoint(K, M), J, B we get external_angle_bisector(F, B, J) == Line(B, midpoint(K, M))
By external_angle_bisector_definition_v0_r on F, M, F, midpoint(K, M) we get Line(M, midpoint(K, M)) == external_angle_bisector(F, midpoint(K, M), F)
By collinear_definition on F, L, midpoint(L, M) we get L in Line(F, midpoint(L, M)), midpoint(L, M) in Line(F, L), Line(F, L) == Line(F, midpoint(L, M)), 0 == 2 * angle(L, F, midpoint(L, M)) mod 360
By external_angle_bisector_definition_v0_r on L, J, L, midpoint(L, M) we get Line(J, midpoint(L, M)) == external_angle_bisector(L, midpoint(L, M), L)
By internal_angle_bisector_definition_v0_r on J, F, J, midpoint(K, M) we get Line(F, midpoint(K, M)) == internal_angle_bisector(J, midpoint(K, M), J)
By external_angle_bisector_definition_v0_r on K, J, K, midpoint(K, M) we get Line(J, midpoint(K, M)) == external_angle_bisector(K, midpoint(K, M), K)
By anti_similar_triangle_basic_properties on L, M, G, M, L, G we get angle(L, M, G) == 0 - angle(M, L, G) mod 360, angle(M, G, L) == 0 - angle(L, G, M) mod 360, angle(G, L, M) == 0 - angle(G, M, L) mod 360, log(distance(L, M)) + log(distance(G, L)) == log(distance(L, M)) + log(distance(G, M)), log(distance(G, L)) + log(distance(G, L)) == log(distance(G, M)) + log(distance(G, M)), log(distance(G, L)) + log(distance(L, M)) == log(distance(G, M)) + log(distance(L, M))
By external_angle_bisector_definition_v0_r on M, C, M, midpoint(L, M) we get Line(C, midpoint(L, M)) == external_angle_bisector(M, midpoint(L, M), M)
By internal_angle_bisector_definition_v0_r on C, G, C, midpoint(L, M) we get Line(G, midpoint(L, M)) == internal_angle_bisector(C, midpoint(L, M), C)
By external_angle_bisector_definition_v0_r on K, B, K, midpoint(K, M) we get Line(B, midpoint(K, M)) == external_angle_bisector(K, midpoint(K, M), K)
By internal_angle_bisector_definition_v0_r on midpoint(K, M), J, midpoint(K, M), F we get Line(F, J) == internal_angle_bisector(midpoint(K, M), F, midpoint(K, M))
By external_angle_bisector_definition_v0_r on J, L, J, midpoint(L, M) we get Line(L, midpoint(L, M)) == external_angle_bisector(J, midpoint(L, M), J)
By external_angle_bisector_definition_v0_r on B, K, B, midpoint(K, M) we get Line(K, midpoint(K, M)) == external_angle_bisector(B, midpoint(K, M), B)
By external_angle_bisector_definition_v0_r on B, M, B, midpoint(K, M) we get Line(M, midpoint(K, M)) == external_angle_bisector(B, midpoint(K, M), B)
By internal_angle_bisector_definition_v0_r on midpoint(L, M), C, midpoint(L, M), G we get Line(C, G) == internal_angle_bisector(midpoint(L, M), G, midpoint(L, M))
By external_angle_bisector_definition_v0_r on M, J, M, midpoint(K, M) we get Line(J, midpoint(K, M)) == external_angle_bisector(M, midpoint(K, M), M)
By external_angle_bisector_definition_v0_r on A, L, A, midpoint(K, L) we get Line(L, midpoint(K, L)) == external_angle_bisector(A, midpoint(K, L), A)
By external_angle_bisector_definition_v0_r on J, L, J, midpoint(K, L) we get Line(L, midpoint(K, L)) == external_angle_bisector(J, midpoint(K, L), J)
By external_angle_bisector_definition_v0_r on G, L, G, midpoint(L, M) we get Line(L, midpoint(L, M)) == external_angle_bisector(G, midpoint(L, M), G)
By external_angle_bisector_definition_v0_r on C, M, C, midpoint(L, M) we get Line(M, midpoint(L, M)) == external_angle_bisector(C, midpoint(L, M), C)
By internal_angle_bisector_definition_v0_r on J, midpoint(K, L), J, A we get internal_angle_bisector(J, A, J) == Line(A, midpoint(K, L))
By similar_triangle_basic_properties on F, K, M, A, K, L we get angle(A, K, L) == angle(F, K, M) mod 360, angle(K, L, A) == angle(K, M, F) mod 360, angle(L, A, K) == angle(M, F, K) mod 360, log(distance(A, K)) + log(distance(K, M)) == log(distance(F, K)) + log(distance(K, L)), log(distance(K, L)) + log(distance(F, M)) == log(distance(K, M)) + log(distance(A, L)), log(distance(A, L)) + log(distance(F, K)) == log(distance(F, M)) + log(distance(A, K))
By power_of_a_point_in_circle on K, Circle(A, J, K) we get 0 == power_of_a_point(K, Circle(A, J, K))
By anti_similar_triangle_basic_properties on A, K, L, G, L, M we get angle(A, K, L) == 0 - angle(G, L, M) mod 360, angle(K, L, A) == 0 - angle(L, M, G) mod 360, angle(L, A, K) == 0 - angle(M, G, L) mod 360, log(distance(A, K)) + log(distance(L, M)) == log(distance(G, L)) + log(distance(K, L)), log(distance(K, L)) + log(distance(G, M)) == log(distance(L, M)) + log(distance(A, L)), log(distance(A, L)) + log(distance(G, L)) == log(distance(G, M)) + log(distance(A, K))
By external_angle_bisector_definition_v0_r on F, midpoint(L, M), L, M we get external_angle_bisector(F, M, L) == Line(M, midpoint(L, M))
By internal_angle_bisector_definition_v0_r on midpoint(L, M), J, midpoint(L, M), C we get Line(C, J) == internal_angle_bisector(midpoint(L, M), C, midpoint(L, M))
By collinear_definition on midpoint(K, M), G, M we get G in Line(M, midpoint(K, M)), M in Line(G, midpoint(K, M)), Line(G, midpoint(K, M)) == Line(M, midpoint(K, M)), 0 == 2 * angle(G, midpoint(K, M), M) mod 360
By external_angle_bisector_definition_v0_r on A, K, A, midpoint(K, L) we get Line(K, midpoint(K, L)) == external_angle_bisector(A, midpoint(K, L), A)
By anti_similar_triangle_basic_properties on M, L, G, L, K, A we get angle(M, L, G) == 0 - angle(L, K, A) mod 360, angle(L, G, M) == 0 - angle(K, A, L) mod 360, angle(G, M, L) == 0 - angle(A, L, K) mod 360, log(distance(K, L)) + log(distance(G, L)) == log(distance(L, M)) + log(distance(A, K)), log(distance(A, K)) + log(distance(G, M)) == log(distance(G, L)) + log(distance(A, L)), log(distance(A, L)) + log(distance(L, M)) == log(distance(G, M)) + log(distance(K, L))
By external_angle_bisector_definition_v0_r on J, K, J, midpoint(K, L) we get Line(K, midpoint(K, L)) == external_angle_bisector(J, midpoint(K, L), J)
By internal_angle_bisector_definition_v0_r on midpoint(L, M), J, midpoint(L, M), G we get Line(G, J) == internal_angle_bisector(midpoint(L, M), G, midpoint(L, M))
By collinear_definition on F, M, midpoint(L, M) we get M in Line(F, midpoint(L, M)), midpoint(L, M) in Line(F, M), Line(F, M) == Line(F, midpoint(L, M)), 0 == 2 * angle(M, F, midpoint(L, M)) mod 360
By external_angle_bisector_definition_v0_r on J, M, J, midpoint(K, M) we get Line(M, midpoint(K, M)) == external_angle_bisector(J, midpoint(K, M), J)
By external_angle_bisector_definition_v0_r on M, F, M, midpoint(K, M) we get Line(F, midpoint(K, M)) == external_angle_bisector(M, midpoint(K, M), M)
By anti_similar_triangle_basic_properties on K, F, M, L, A, K we get angle(K, F, M) == 0 - angle(L, A, K) mod 360, angle(F, M, K) == 0 - angle(A, K, L) mod 360, angle(M, K, F) == 0 - angle(K, L, A) mod 360, log(distance(A, L)) + log(distance(F, M)) == log(distance(F, K)) + log(distance(A, K)), log(distance(A, K)) + log(distance(K, M)) == log(distance(F, M)) + log(distance(K, L)), log(distance(K, L)) + log(distance(F, K)) == log(distance(K, M)) + log(distance(A, L))
By external_angle_bisector_definition_v0_r on M, B, M, midpoint(K, M) we get Line(B, midpoint(K, M)) == external_angle_bisector(M, midpoint(K, M), M)
By external_angle_bisector_definition_v0_r on K, F, K, midpoint(K, M) we get Line(F, midpoint(K, M)) == external_angle_bisector(K, midpoint(K, M), K)
By internal_angle_bisector_definition_v0_r on midpoint(L, M), G, midpoint(L, M), J we get Line(G, J) == internal_angle_bisector(midpoint(L, M), J, midpoint(L, M))
By similar_triangle_basic_properties on K, A, L, M, G, L we get angle(K, A, L) == angle(M, G, L) mod 360, angle(A, L, K) == angle(G, L, M) mod 360, angle(L, K, A) == angle(L, M, G) mod 360, log(distance(A, K)) + log(distance(G, L)) == log(distance(G, M)) + log(distance(A, L)), log(distance(A, L)) + log(distance(L, M)) == log(distance(G, L)) + log(distance(K, L)), log(distance(K, L)) + log(distance(G, M)) == log(distance(L, M)) + log(distance(A, K))
By perpendicular_angle_conditions_v0 on F, midpoint(L, M), C we get angle(F, midpoint(L, M), C) == orientation(C, F, midpoint(L, M)) mod 360
By internal_angle_bisector_definition_v0_r on L, G, M, midpoint(L, M) we get Line(G, midpoint(L, M)) == internal_angle_bisector(L, midpoint(L, M), M)
By internal_angle_bisector_definition_v0 on L, F, L, midpoint(L, M) we get angle(F, midpoint(L, M), L) == angle(L, midpoint(L, M), F) mod 360
By anti_similar_triangle_basic_properties on M, F, K, K, F, M we get angle(M, F, K) == 0 - angle(K, F, M) mod 360, angle(F, K, M) == 0 - angle(F, M, K) mod 360, angle(K, M, F) == 0 - angle(M, K, F) mod 360, log(distance(F, K)) + log(distance(F, K)) == log(distance(F, M)) + log(distance(F, M)), log(distance(F, K)) + log(distance(K, M)) == log(distance(F, M)) + log(distance(K, M)), log(distance(K, M)) + log(distance(F, K)) == log(distance(K, M)) + log(distance(F, M))
By collinear_definition on midpoint(K, M), K, G we get K in Line(G, midpoint(K, M)), G in Line(K, midpoint(K, M)), Line(G, midpoint(K, M)) == Line(K, midpoint(K, M)), 0 == 2 * angle(K, midpoint(K, M), G) mod 360
By external_angle_bisector_definition_v0_r on J, midpoint(L, M), G, C we get external_angle_bisector(G, C, J) == Line(C, midpoint(L, M))
By collinear_definition on midpoint(L, M), F, L we get F in Line(L, midpoint(L, M)), L in Line(F, midpoint(L, M)), Line(F, midpoint(L, M)) == Line(L, midpoint(L, M)), 0 == 2 * angle(F, midpoint(L, M), L) mod 360
By external_angle_bisector_definition_v0_r on K, A, K, midpoint(K, L) we get Line(A, midpoint(K, L)) == external_angle_bisector(K, midpoint(K, L), K)
By power_of_a_point_in_circle on A, Circle(A, J, K) we get 0 == power_of_a_point(A, Circle(A, J, K))
By external_angle_bisector_definition_v0_r on C, L, C, midpoint(L, M) we get Line(L, midpoint(L, M)) == external_angle_bisector(C, midpoint(L, M), C)
By external_angle_bisector_definition_v0_r on K, J, K, midpoint(K, L) we get Line(J, midpoint(K, L)) == external_angle_bisector(K, midpoint(K, L), K)
By internal_angle_bisector_definition_v0_r on J, G, J, midpoint(L, M) we get Line(G, midpoint(L, M)) == internal_angle_bisector(J, midpoint(L, M), J)
By power_of_a_point_on_circle on K, Circle(B, J, K) we get 0 == power_of_a_point(K, Circle(B, J, K))
By similar_triangle_basic_properties on K, A, L, K, F, M we get angle(K, A, L) == angle(K, F, M) mod 360, angle(A, L, K) == angle(F, M, K) mod 360, angle(L, K, A) == angle(M, K, F) mod 360, log(distance(A, K)) + log(distance(F, M)) == log(distance(F, K)) + log(distance(A, L)), log(distance(A, L)) + log(distance(K, M)) == log(distance(F, M)) + log(distance(K, L)), log(distance(K, L)) + log(distance(F, K)) == log(distance(K, M)) + log(distance(A, K))
By internal_angle_bisector_definition_v0 on M, G, M, midpoint(K, M) we get angle(G, midpoint(K, M), M) == angle(M, midpoint(K, M), G) mod 360
By external_angle_bisector_definition_v0_r on L, A, L, midpoint(K, L) we get Line(A, midpoint(K, L)) == external_angle_bisector(L, midpoint(K, L), L)
By external_angle_bisector_definition_v0_r on L, G, L, midpoint(L, M) we get Line(G, midpoint(L, M)) == external_angle_bisector(L, midpoint(L, M), L)
By similar_triangle_basic_properties on M, L, G, K, L, A we get angle(K, L, A) == angle(M, L, G) mod 360, angle(L, A, K) == angle(L, G, M) mod 360, angle(A, K, L) == angle(G, M, L) mod 360, log(distance(K, L)) + log(distance(G, L)) == log(distance(L, M)) + log(distance(A, L)), log(distance(A, L)) + log(distance(G, M)) == log(distance(G, L)) + log(distance(A, K)), log(distance(A, K)) + log(distance(L, M)) == log(distance(G, M)) + log(distance(K, L))
By internal_angle_bisector_definition_v0_r on G, J, G, midpoint(L, M) we get Line(J, midpoint(L, M)) == internal_angle_bisector(G, midpoint(L, M), G)
By external_angle_bisector_definition_v0_r on M, J, M, midpoint(L, M) we get Line(J, midpoint(L, M)) == external_angle_bisector(M, midpoint(L, M), M)
By internal_angle_bisector_definition_v0_r on C, midpoint(L, M), J, G we get internal_angle_bisector(C, G, J) == Line(G, midpoint(L, M))
By internal_angle_bisector_definition_v0_r on M, J, L, midpoint(L, M) we get Line(J, midpoint(L, M)) == internal_angle_bisector(L, midpoint(L, M), M)
By external_angle_bisector_definition_v0_r on L, C, L, midpoint(L, M) we get Line(C, midpoint(L, M)) == external_angle_bisector(L, midpoint(L, M), L)
By internal_angle_bisector_definition_v0_r on L, F, midpoint(L, M), M we get Line(F, M) == internal_angle_bisector(L, M, midpoint(L, M))
By internal_angle_bisector_definition_v0_r on K, C, L, G we get Line(C, G) == internal_angle_bisector(K, G, L)
By internal_angle_bisector_definition_v0_r on M, J, K, midpoint(K, M) we get Line(J, midpoint(K, M)) == internal_angle_bisector(K, midpoint(K, M), M)
By power_of_a_point_on_circle on L, Circle(C, J, L) we get 0 == power_of_a_point(L, Circle(C, J, L))
By perpendicular_angle_conditions_v0 on F, midpoint(L, M), G we get angle(F, midpoint(L, M), G) == orientation(F, midpoint(L, M), G) mod 360
By internal_angle_bisector_definition_v0_r on A, midpoint(K, L), A, J we get internal_angle_bisector(A, J, A) == Line(J, midpoint(K, L))
By internal_angle_bisector_definition_v0_r on J, A, J, midpoint(K, L) we get Line(A, midpoint(K, L)) == internal_angle_bisector(J, midpoint(K, L), J)
By power_of_a_point_in_circle on L, Circle(A, J, K) we get 0 == power_of_a_point(L, Circle(A, J, K))
By power_of_a_point_on_circle on J, Circle(A, J, K) we get 0 == power_of_a_point(J, Circle(A, J, K))
By external_angle_bisector_definition_v0_r on J, K, J, midpoint(K, M) we get Line(K, midpoint(K, M)) == external_angle_bisector(J, midpoint(K, M), J)
By internal_angle_bisector_definition_v0_r on M, G, midpoint(K, M), K we get Line(G, K) == internal_angle_bisector(M, K, midpoint(K, M))
By internal_angle_bisector_definition_v0_r on midpoint(L, M), C, midpoint(L, M), J we get Line(C, J) == internal_angle_bisector(midpoint(L, M), J, midpoint(L, M))
By collinear_definition on midpoint(L, M), L, F we get L in Line(F, midpoint(L, M)), F in Line(L, midpoint(L, M)), Line(F, midpoint(L, M)) == Line(L, midpoint(L, M)), 0 == 2 * angle(L, midpoint(L, M), F) mod 360
By internal_angle_bisector_definition_v0 on M, midpoint(K, M), M, G we get angle(M, G, midpoint(K, M)) == angle(midpoint(K, M), G, M) mod 360
By perpendicular_lines_draw_intersection on Line(J, M), altitude(F, J, M) we get exists(line_intersection(Line(J, M), altitude(F, J, M)))
By external_angle_bisector_definition_v0_r on L, J, L, midpoint(K, L) we get Line(J, midpoint(K, L)) == external_angle_bisector(L, midpoint(K, L), L)
By internal_angle_bisector_definition_v0_r on K, A, L, midpoint(K, L) we get Line(A, midpoint(K, L)) == internal_angle_bisector(K, midpoint(K, L), L)
By collinear_definition on midpoint(K, M), G, K we get G in Line(K, midpoint(K, M)), K in Line(G, midpoint(K, M)), Line(G, midpoint(K, M)) == Line(K, midpoint(K, M)), 0 == 2 * angle(G, midpoint(K, M), K) mod 360
By perpendicular_angle_conditions_v0 on F, midpoint(K, M), G we get angle(F, midpoint(K, M), G) == orientation(F, midpoint(K, M), G) mod 360
By power_of_a_point_on_circle on J, Circle(B, J, K) we get 0 == power_of_a_point(J, Circle(B, J, K))
By internal_angle_bisector_definition_v0_r on midpoint(L, M), G, midpoint(L, M), C we get Line(C, G) == internal_angle_bisector(midpoint(L, M), C, midpoint(L, M))
By power_of_a_point_in_circle on C, Circle(C, J, L) we get 0 == power_of_a_point(C, Circle(C, J, L))
By power_of_a_point_in_circle on M, Circle(C, J, L) we get 0 == power_of_a_point(M, Circle(C, J, L))
By internal_angle_bisector_definition_v0 on K, midpoint(K, M), K, G we get angle(K, G, midpoint(K, M)) == angle(midpoint(K, M), G, K) mod 360
By internal_angle_bisector_definition_v0_r on B, F, B, midpoint(K, M) we get Line(F, midpoint(K, M)) == internal_angle_bisector(B, midpoint(K, M), B)
By internal_angle_bisector_definition_v0_r on B, midpoint(K, M), J, F we get internal_angle_bisector(B, F, J) == Line(F, midpoint(K, M))
By external_angle_bisector_definition_v0_r on J, M, J, midpoint(L, M) we get Line(M, midpoint(L, M)) == external_angle_bisector(J, midpoint(L, M), J)
By internal_angle_bisector_definition_v0_r on G, midpoint(K, M), M, K we get internal_angle_bisector(G, K, M) == Line(K, midpoint(K, M))
By collinear_definition on F, midpoint(L, M), L we get midpoint(L, M) in Line(F, L), L in Line(F, midpoint(L, M)), Line(F, L) == Line(F, midpoint(L, M)), 0 == 2 * angle(midpoint(L, M), F, L) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(K, M), G, K, M we get Line(G, M) == internal_angle_bisector(K, M, midpoint(K, M))
By internal_angle_bisector_definition_v0_r on F, midpoint(K, M), B, J we get internal_angle_bisector(B, J, F) == Line(J, midpoint(K, M))
By power_of_a_point_on_circle on M, Circle(B, J, K) we get 0 == power_of_a_point(M, Circle(B, J, K))
By internal_angle_bisector_definition_v0_r on L, J, K, midpoint(K, L) we get Line(J, midpoint(K, L)) == internal_angle_bisector(K, midpoint(K, L), L)
By internal_angle_bisector_definition_v0_r on K, B, M, midpoint(K, M) we get Line(B, midpoint(K, M)) == internal_angle_bisector(K, midpoint(K, M), M)
By external_angle_bisector_definition_v0_r on M, G, M, midpoint(L, M) we get Line(G, midpoint(L, M)) == external_angle_bisector(M, midpoint(L, M), M)
By power_of_a_point_on_circle on J, Circle(C, J, L) we get 0 == power_of_a_point(J, Circle(C, J, L))
By internal_angle_bisector_definition_v0 on L, midpoint(L, M), L, F we get angle(L, F, midpoint(L, M)) == angle(midpoint(L, M), F, L) mod 360
By perpendicular_angle_conditions_v0 on J, midpoint(L, M), F we get angle(J, midpoint(L, M), F) == orientation(F, J, midpoint(L, M)) mod 360
By perpendicular_angle_conditions_v0 on G, midpoint(K, M), B we get angle(G, midpoint(K, M), B) == orientation(B, G, midpoint(K, M)) mod 360
By power_of_a_point_in_circle on B, Circle(B, J, K) we get 0 == power_of_a_point(B, Circle(B, J, K))
By internal_angle_bisector_definition_v0_r on F, midpoint(L, M), M, L we get internal_angle_bisector(F, L, M) == Line(L, midpoint(L, M))
By collinear_definition on midpoint(K, M), M, G we get M in Line(G, midpoint(K, M)), G in Line(M, midpoint(K, M)), Line(G, midpoint(K, M)) == Line(M, midpoint(K, M)), 0 == 2 * angle(M, midpoint(K, M), G) mod 360
By perpendicular_angle_conditions_v0 on G, midpoint(L, M), F we get angle(G, midpoint(L, M), F) == orientation(F, G, midpoint(L, M)) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(K, M), F, midpoint(K, M), B we get Line(B, F) == internal_angle_bisector(midpoint(K, M), B, midpoint(K, M))
By internal_angle_bisector_definition_v0 on M, midpoint(L, M), M, F we get angle(M, F, midpoint(L, M)) == angle(midpoint(L, M), F, M) mod 360
By internal_angle_bisector_definition_v0_r on A, J, A, midpoint(K, L) we get Line(J, midpoint(K, L)) == internal_angle_bisector(A, midpoint(K, L), A)
By collinear_definition on G, K, midpoint(K, M) we get K in Line(G, midpoint(K, M)), midpoint(K, M) in Line(G, K), Line(G, K) == Line(G, midpoint(K, M)), 0 == 2 * angle(K, G, midpoint(K, M)) mod 360
By internal_angle_bisector_definition_v0_r on M, F, K, midpoint(K, M) we get Line(F, midpoint(K, M)) == internal_angle_bisector(K, midpoint(K, M), M)
By perpendicular_angle_conditions_v0 on C, midpoint(L, M), F we get angle(C, midpoint(L, M), F) == orientation(C, midpoint(L, M), F) mod 360
By internal_angle_bisector_definition_v0_r on G, C, G, midpoint(L, M) we get Line(C, midpoint(L, M)) == internal_angle_bisector(G, midpoint(L, M), G)
By internal_angle_bisector_definition_v0_r on J, B, J, midpoint(K, M) we get Line(B, midpoint(K, M)) == internal_angle_bisector(J, midpoint(K, M), J)
By internal_angle_bisector_definition_v0_r on L, C, M, midpoint(L, M) we get Line(C, midpoint(L, M)) == internal_angle_bisector(L, midpoint(L, M), M)
By internal_angle_bisector_definition_v0_r on B, J, B, midpoint(K, M) we get Line(J, midpoint(K, M)) == internal_angle_bisector(B, midpoint(K, M), B)
By internal_angle_bisector_definition_v0_r on L, B, K, F we get Line(B, F) == internal_angle_bisector(K, F, L)
By internal_angle_bisector_definition_v0_r on F, B, F, midpoint(K, M) we get Line(B, midpoint(K, M)) == internal_angle_bisector(F, midpoint(K, M), F)
By perpendicular_angle_conditions_v0 on J, midpoint(K, M), G we get angle(J, midpoint(K, M), G) == orientation(G, J, midpoint(K, M)) mod 360
By collinear_definition on G, M, midpoint(K, M) we get M in Line(G, midpoint(K, M)), midpoint(K, M) in Line(G, M), Line(G, M) == Line(G, midpoint(K, M)), 0 == 2 * angle(M, G, midpoint(K, M)) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(K, M), F, midpoint(K, M), J we get Line(F, J) == internal_angle_bisector(midpoint(K, M), J, midpoint(K, M))
By internal_angle_bisector_definition_v0_r on midpoint(K, M), B, midpoint(K, M), F we get Line(B, F) == internal_angle_bisector(midpoint(K, M), F, midpoint(K, M))
By internal_angle_bisector_definition_v0_r on G, midpoint(L, M), C, J we get internal_angle_bisector(C, J, G) == Line(J, midpoint(L, M))
By internal_angle_bisector_definition_v0_r on K, J, L, F we get Line(F, J) == internal_angle_bisector(K, F, L)
By collinear_definition on G, midpoint(K, M), K we get midpoint(K, M) in Line(G, K), K in Line(G, midpoint(K, M)), Line(G, K) == Line(G, midpoint(K, M)), 0 == 2 * angle(midpoint(K, M), G, K) mod 360
By internal_angle_bisector_definition_v0_r on J, C, J, midpoint(L, M) we get Line(C, midpoint(L, M)) == internal_angle_bisector(J, midpoint(L, M), J)
By perpendicular_angle_conditions_v0 on G, midpoint(K, M), J we get angle(G, midpoint(K, M), J) == orientation(G, midpoint(K, M), J) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(K, M), J, midpoint(K, M), B we get Line(B, J) == internal_angle_bisector(midpoint(K, M), B, midpoint(K, M))
By collinear_definition on F, midpoint(L, M), M we get midpoint(L, M) in Line(F, M), M in Line(F, midpoint(L, M)), Line(F, M) == Line(F, midpoint(L, M)), 0 == 2 * angle(midpoint(L, M), F, M) mod 360
By collinear_definition on G, midpoint(K, M), M we get midpoint(K, M) in Line(G, M), M in Line(G, midpoint(K, M)), Line(G, M) == Line(G, midpoint(K, M)), 0 == 2 * angle(midpoint(K, M), G, M) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(L, M), F, M, L we get Line(F, L) == internal_angle_bisector(M, L, midpoint(L, M))
By perpendicular_angle_conditions_v0 on B, midpoint(K, M), G we get angle(B, midpoint(K, M), G) == orientation(B, midpoint(K, M), G) mod 360
By internal_angle_bisector_definition_v0_r on F, J, F, midpoint(K, M) we get Line(J, midpoint(K, M)) == internal_angle_bisector(F, midpoint(K, M), F)
By internal_angle_bisector_definition_v0 on K, G, K, midpoint(K, M) we get angle(G, midpoint(K, M), K) == angle(K, midpoint(K, M), G) mod 360
By internal_angle_bisector_definition_v0_r on C, J, C, midpoint(L, M) we get Line(J, midpoint(L, M)) == internal_angle_bisector(C, midpoint(L, M), C)
By perpendicular_angle_conditions_v0 on F, midpoint(L, M), J we get angle(F, midpoint(L, M), J) == orientation(F, midpoint(L, M), J) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(K, L), J, midpoint(K, L), A we get Line(A, J) == internal_angle_bisector(midpoint(K, L), A, midpoint(K, L))
By internal_angle_bisector_definition_v0_r on midpoint(K, M), B, midpoint(K, M), J we get Line(B, J) == internal_angle_bisector(midpoint(K, M), J, midpoint(K, M))
By perpendicular_angle_conditions_v0 on G, midpoint(K, M), F we get angle(G, midpoint(K, M), F) == orientation(F, G, midpoint(K, M)) mod 360
By collinear_definition on midpoint(L, M), M, F we get M in Line(F, midpoint(L, M)), F in Line(M, midpoint(L, M)), Line(F, midpoint(L, M)) == Line(M, midpoint(L, M)), 0 == 2 * angle(M, midpoint(L, M), F) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(K, L), A, midpoint(K, L), J we get Line(A, J) == internal_angle_bisector(midpoint(K, L), J, midpoint(K, L))
By internal_angle_bisector_definition_v0 on M, F, M, midpoint(L, M) we get angle(F, midpoint(L, M), M) == angle(M, midpoint(L, M), F) mod 360
By perpendicular_lines_draw_intersection on Line(F, G), altitude(J, F, G) we get exists(line_intersection(Line(F, G), altitude(J, F, G)))
By perpendicular_lines_draw_intersection on altitude(M, F, G), Line(F, G) we get exists(line_intersection(Line(F, G), altitude(M, F, G)))
By perpendicular_lines_draw_intersection on altitude(G, J, M), Line(J, M) we get exists(line_intersection(Line(J, M), altitude(G, J, M)))
By altitude_definition on orthocenter(F, G, J), G, midpoint(L, M), Line(F, L) we get Line(F, L) == altitude(orthocenter(F, G, J), G, midpoint(L, M))
By similar_triangle_basic_properties on F, M, B, A, J, B we get angle(A, J, B) == angle(F, M, B) mod 360, angle(J, B, A) == angle(M, B, F) mod 360, angle(B, A, J) == angle(B, F, M) mod 360, log(distance(A, J)) + log(distance(B, M)) == log(distance(F, M)) + log(distance(B, J)), log(distance(B, J)) + log(distance(B, F)) == log(distance(B, M)) + log(distance(A, B)), log(distance(A, B)) + log(distance(F, M)) == log(distance(B, F)) + log(distance(A, J))
By similar_triangle_basic_properties on G, M, C, F, J, M we get angle(F, J, M) == angle(G, M, C) mod 360, angle(J, M, F) == angle(M, C, G) mod 360, angle(C, G, M) == angle(M, F, J) mod 360, log(distance(F, J)) + log(distance(C, M)) == log(distance(G, M)) + log(distance(J, M)), log(distance(C, M)) + log(distance(F, M)) == log(distance(J, M)) + log(distance(C, G)), log(distance(C, G)) + log(distance(F, J)) == log(distance(F, M)) + log(distance(G, M))
By similar_triangle_basic_properties on C, A, J, C, G, M we get angle(C, A, J) == angle(C, G, M) mod 360, angle(A, J, C) == angle(G, M, C) mod 360, angle(J, C, A) == angle(M, C, G) mod 360, log(distance(A, C)) + log(distance(G, M)) == log(distance(C, G)) + log(distance(A, J)), log(distance(A, J)) + log(distance(C, M)) == log(distance(G, M)) + log(distance(C, J)), log(distance(C, J)) + log(distance(C, G)) == log(distance(C, M)) + log(distance(A, C))
By altitude_definition on J, midpoint(K, M), G, Line(B, F) we get Line(B, F) == altitude(J, G, midpoint(K, M))
By anti_similar_triangle_basic_properties on L, M, G, K, M, F we get angle(L, M, G) == 0 - angle(K, M, F) mod 360, angle(M, G, L) == 0 - angle(M, F, K) mod 360, angle(G, L, M) == 0 - angle(F, K, M) mod 360, log(distance(K, M)) + log(distance(G, M)) == log(distance(L, M)) + log(distance(F, M)), log(distance(F, M)) + log(distance(G, L)) == log(distance(G, M)) + log(distance(F, K)), log(distance(F, K)) + log(distance(L, M)) == log(distance(G, L)) + log(distance(K, M))
By anti_similar_triangle_basic_properties on J, L, G, J, M, G we get angle(J, L, G) == 0 - angle(J, M, G) mod 360, angle(L, G, J) == 0 - angle(M, G, J) mod 360, angle(G, J, L) == 0 - angle(G, J, M) mod 360, log(distance(J, L)) + log(distance(G, M)) == log(distance(J, M)) + log(distance(G, L)), log(distance(G, L)) + log(distance(G, J)) == log(distance(G, M)) + log(distance(G, J)), log(distance(G, J)) + log(distance(J, L)) == log(distance(G, J)) + log(distance(J, M))
By anti_similar_triangle_basic_properties on L, G, M, K, F, M we get angle(L, G, M) == 0 - angle(K, F, M) mod 360, angle(G, M, L) == 0 - angle(F, M, K) mod 360, angle(M, L, G) == 0 - angle(M, K, F) mod 360, log(distance(F, K)) + log(distance(G, M)) == log(distance(G, L)) + log(distance(F, M)), log(distance(F, M)) + log(distance(L, M)) == log(distance(G, M)) + log(distance(K, M)), log(distance(K, M)) + log(distance(G, L)) == log(distance(L, M)) + log(distance(F, K))
By anti_similar_triangle_basic_properties on G, C, L, G, C, M we get angle(G, C, L) == 0 - angle(G, C, M) mod 360, angle(C, L, G) == 0 - angle(C, M, G) mod 360, angle(L, G, C) == 0 - angle(M, G, C) mod 360, log(distance(C, G)) + log(distance(C, L)) == log(distance(C, G)) + log(distance(C, M)), log(distance(C, L)) + log(distance(G, M)) == log(distance(C, M)) + log(distance(G, L)), log(distance(G, L)) + log(distance(C, G)) == log(distance(G, M)) + log(distance(C, G))
By altitude_definition on orthocenter(F, G, J), midpoint(K, M), F, Line(G, K) we get Line(G, K) == altitude(orthocenter(F, G, J), F, midpoint(K, M))
By altitude_definition on orthocenter(F, J, M), J, midpoint(K, M), Line(G, K) we get Line(G, K) == altitude(orthocenter(F, J, M), J, midpoint(K, M))
By anti_similar_triangle_basic_properties on M, C, G, L, C, G we get angle(M, C, G) == 0 - angle(L, C, G) mod 360, angle(C, G, M) == 0 - angle(C, G, L) mod 360, angle(G, M, C) == 0 - angle(G, L, C) mod 360, log(distance(C, L)) + log(distance(C, G)) == log(distance(C, M)) + log(distance(C, G)), log(distance(C, G)) + log(distance(G, L)) == log(distance(C, G)) + log(distance(G, M)), log(distance(G, L)) + log(distance(C, M)) == log(distance(G, M)) + log(distance(C, L))
By anti_similar_triangle_basic_properties on B, K, F, B, M, F we get angle(B, K, F) == 0 - angle(B, M, F) mod 360, angle(K, F, B) == 0 - angle(M, F, B) mod 360, angle(F, B, K) == 0 - angle(F, B, M) mod 360, log(distance(B, K)) + log(distance(F, M)) == log(distance(B, M)) + log(distance(F, K)), log(distance(F, K)) + log(distance(B, F)) == log(distance(F, M)) + log(distance(B, F)), log(distance(B, F)) + log(distance(B, K)) == log(distance(B, F)) + log(distance(B, M))
By similar_triangle_basic_properties on M, G, J, B, A, J we get angle(B, A, J) == angle(M, G, J) mod 360, angle(A, J, B) == angle(G, J, M) mod 360, angle(J, B, A) == angle(J, M, G) mod 360, log(distance(A, B)) + log(distance(G, J)) == log(distance(G, M)) + log(distance(A, J)), log(distance(A, J)) + log(distance(J, M)) == log(distance(G, J)) + log(distance(B, J)), log(distance(B, J)) + log(distance(G, M)) == log(distance(J, M)) + log(distance(A, B))
By altitude_definition on J, midpoint(L, M), F, Line(C, G) we get Line(C, G) == altitude(J, F, midpoint(L, M))
By altitude_definition on orthocenter(F, G, J), G, F, altitude(J, F, G) we get altitude(J, F, G) == altitude(orthocenter(F, G, J), F, G)
By altitude_definition on orthocenter(F, J, M), B, midpoint(K, M), Line(G, K) we get Line(G, K) == altitude(orthocenter(F, J, M), B, midpoint(K, M))
By altitude_definition on orthocenter(F, G, M), F, midpoint(L, M), Line(C, G) we get Line(C, G) == altitude(orthocenter(F, G, M), F, midpoint(L, M))
By similar_triangle_basic_properties on C, J, A, C, M, G we get angle(C, J, A) == angle(C, M, G) mod 360, angle(J, A, C) == angle(M, G, C) mod 360, angle(A, C, J) == angle(G, C, M) mod 360, log(distance(C, J)) + log(distance(G, M)) == log(distance(C, M)) + log(distance(A, J)), log(distance(A, J)) + log(distance(C, G)) == log(distance(G, M)) + log(distance(A, C)), log(distance(A, C)) + log(distance(C, M)) == log(distance(C, G)) + log(distance(C, J))
By similar_triangle_basic_properties on M, J, G, B, J, A we get angle(B, J, A) == angle(M, J, G) mod 360, angle(J, A, B) == angle(J, G, M) mod 360, angle(A, B, J) == angle(G, M, J) mod 360, log(distance(B, J)) + log(distance(G, J)) == log(distance(J, M)) + log(distance(A, J)), log(distance(A, J)) + log(distance(G, M)) == log(distance(G, J)) + log(distance(A, B)), log(distance(A, B)) + log(distance(J, M)) == log(distance(G, M)) + log(distance(B, J))
By anti_similar_triangle_basic_properties on M, J, G, L, J, G we get angle(M, J, G) == 0 - angle(L, J, G) mod 360, angle(J, G, M) == 0 - angle(J, G, L) mod 360, angle(G, M, J) == 0 - angle(G, L, J) mod 360, log(distance(J, L)) + log(distance(G, J)) == log(distance(J, M)) + log(distance(G, J)), log(distance(G, J)) + log(distance(G, L)) == log(distance(G, J)) + log(distance(G, M)), log(distance(G, L)) + log(distance(J, M)) == log(distance(G, M)) + log(distance(J, L))
By similar_triangle_basic_properties on G, M, L, F, K, M we get angle(F, K, M) == angle(G, M, L) mod 360, angle(K, M, F) == angle(M, L, G) mod 360, angle(L, G, M) == angle(M, F, K) mod 360, log(distance(F, K)) + log(distance(L, M)) == log(distance(G, M)) + log(distance(K, M)), log(distance(K, M)) + log(distance(G, L)) == log(distance(L, M)) + log(distance(F, M)), log(distance(F, M)) + log(distance(G, M)) == log(distance(G, L)) + log(distance(F, K))
By power_of_a_point_definition on midpoint(K, L), L, K, Circle(A, J, K) we get log(power_of_a_point(midpoint(K, L), Circle(A, J, K))) == log(distance(L, midpoint(K, L))) + log(distance(K, midpoint(K, L)))
By altitude_definition on orthocenter(G, J, M), midpoint(L, M), C, Line(F, L) we get Line(F, L) == altitude(orthocenter(G, J, M), C, midpoint(L, M))
By anti_similar_triangle_basic_properties on B, F, K, B, F, M we get angle(B, F, K) == 0 - angle(B, F, M) mod 360, angle(F, K, B) == 0 - angle(F, M, B) mod 360, angle(K, B, F) == 0 - angle(M, B, F) mod 360, log(distance(B, F)) + log(distance(F, K)) == log(distance(B, F)) + log(distance(F, M)), log(distance(F, K)) + log(distance(B, M)) == log(distance(F, M)) + log(distance(B, K)), log(distance(B, K)) + log(distance(B, F)) == log(distance(B, M)) + log(distance(B, F))
By altitude_definition on G, midpoint(L, M), F, Line(C, G) we get Line(C, G) == altitude(G, F, midpoint(L, M))
By altitude_definition on orthocenter(F, J, M), J, F, Line(G, K) we get Line(G, K) == altitude(orthocenter(F, J, M), F, J)
By altitude_definition on orthocenter(F, G, M), midpoint(L, M), L, Line(C, G) we get Line(C, G) == altitude(orthocenter(F, G, M), L, midpoint(L, M))
By altitude_definition on orthocenter(F, G, J), J, midpoint(K, M), Line(G, K) we get Line(G, K) == altitude(orthocenter(F, G, J), J, midpoint(K, M))
By altitude_definition on orthocenter(F, J, M), F, midpoint(K, M), Line(G, K) we get Line(G, K) == altitude(orthocenter(F, J, M), F, midpoint(K, M))
By altitude_definition on orthocenter(G, J, M), K, G, Line(B, F) we get Line(B, F) == altitude(orthocenter(G, J, M), G, K)
By altitude_definition on orthocenter(F, J, M), F, B, Line(G, K) we get Line(G, K) == altitude(orthocenter(F, J, M), B, F)
By altitude_definition on orthocenter(F, G, M), G, F, altitude(M, F, G) we get altitude(M, F, G) == altitude(orthocenter(F, G, M), F, G)
By similar_triangle_basic_properties on B, M, F, M, J, G we get angle(B, M, F) == angle(M, J, G) mod 360, angle(J, G, M) == angle(M, F, B) mod 360, angle(F, B, M) == angle(G, M, J) mod 360, log(distance(B, M)) + log(distance(G, J)) == log(distance(J, M)) + log(distance(F, M)), log(distance(F, M)) + log(distance(G, M)) == log(distance(G, J)) + log(distance(B, F)), log(distance(B, F)) + log(distance(J, M)) == log(distance(G, M)) + log(distance(B, M))
By altitude_definition on orthocenter(G, J, M), M, midpoint(K, M), Line(B, F) we get Line(B, F) == altitude(orthocenter(G, J, M), M, midpoint(K, M))
By anti_similar_triangle_basic_properties on K, J, F, M, J, F we get angle(K, J, F) == 0 - angle(M, J, F) mod 360, angle(J, F, K) == 0 - angle(J, F, M) mod 360, angle(F, K, J) == 0 - angle(F, M, J) mod 360, log(distance(J, K)) + log(distance(F, J)) == log(distance(J, M)) + log(distance(F, J)), log(distance(F, J)) + log(distance(F, K)) == log(distance(F, J)) + log(distance(F, M)), log(distance(F, K)) + log(distance(J, M)) == log(distance(F, M)) + log(distance(J, K))
By altitude_definition on orthocenter(F, J, M), midpoint(L, M), L, Line(C, G) we get Line(C, G) == altitude(orthocenter(F, J, M), L, midpoint(L, M))
By altitude_definition on orthocenter(F, J, M), F, M, Line(C, G) we get Line(C, G) == altitude(orthocenter(F, J, M), F, M)
By anti_similar_triangle_basic_properties on K, F, J, M, F, J we get angle(K, F, J) == 0 - angle(M, F, J) mod 360, angle(F, J, K) == 0 - angle(F, J, M) mod 360, angle(J, K, F) == 0 - angle(J, M, F) mod 360, log(distance(F, K)) + log(distance(F, J)) == log(distance(F, M)) + log(distance(F, J)), log(distance(F, J)) + log(distance(J, K)) == log(distance(F, J)) + log(distance(J, M)), log(distance(J, K)) + log(distance(F, M)) == log(distance(J, M)) + log(distance(F, K))
By altitude_definition on orthocenter(F, G, J), C, midpoint(L, M), Line(F, L) we get Line(F, L) == altitude(orthocenter(F, G, J), C, midpoint(L, M))
By altitude_definition on orthocenter(F, J, M), midpoint(L, M), M, Line(C, G) we get Line(C, G) == altitude(orthocenter(F, J, M), M, midpoint(L, M))
By altitude_definition on orthocenter(F, G, M), K, midpoint(K, M), Line(B, F) we get Line(B, F) == altitude(orthocenter(F, G, M), K, midpoint(K, M))
By similar_triangle_basic_properties on J, F, M, J, A, C we get angle(J, A, C) == angle(J, F, M) mod 360, angle(A, C, J) == angle(F, M, J) mod 360, angle(C, J, A) == angle(M, J, F) mod 360, log(distance(A, J)) + log(distance(F, M)) == log(distance(F, J)) + log(distance(A, C)), log(distance(A, C)) + log(distance(J, M)) == log(distance(F, M)) + log(distance(C, J)), log(distance(C, J)) + log(distance(F, J)) == log(distance(J, M)) + log(distance(A, J))
By altitude_definition on orthocenter(F, G, M), G, M, Line(B, F) we get Line(B, F) == altitude(orthocenter(F, G, M), G, M)
By altitude_definition on orthocenter(F, J, M), L, F, Line(C, G) we get Line(C, G) == altitude(orthocenter(F, J, M), F, L)
By similar_triangle_basic_properties on M, F, B, J, A, B we get angle(J, A, B) == angle(M, F, B) mod 360, angle(A, B, J) == angle(F, B, M) mod 360, angle(B, J, A) == angle(B, M, F) mod 360, log(distance(A, J)) + log(distance(B, F)) == log(distance(F, M)) + log(distance(A, B)), log(distance(A, B)) + log(distance(B, M)) == log(distance(B, F)) + log(distance(B, J)), log(distance(B, J)) + log(distance(F, M)) == log(distance(B, M)) + log(distance(A, J))
By altitude_definition on orthocenter(G, J, M), C, J, Line(F, L) we get Line(F, L) == altitude(orthocenter(G, J, M), C, J)
By similar_triangle_basic_properties on M, G, J, B, F, M we get angle(B, F, M) == angle(M, G, J) mod 360, angle(F, M, B) == angle(G, J, M) mod 360, angle(J, M, G) == angle(M, B, F) mod 360, log(distance(B, F)) + log(distance(G, J)) == log(distance(G, M)) + log(distance(F, M)), log(distance(F, M)) + log(distance(J, M)) == log(distance(G, J)) + log(distance(B, M)), log(distance(B, M)) + log(distance(G, M)) == log(distance(J, M)) + log(distance(B, F))
By altitude_definition on orthocenter(G, J, M), midpoint(L, M), J, Line(F, L) we get Line(F, L) == altitude(orthocenter(G, J, M), J, midpoint(L, M))
By similar_triangle_basic_properties on K, F, M, M, G, L we get angle(K, F, M) == angle(M, G, L) mod 360, angle(F, M, K) == angle(G, L, M) mod 360, angle(L, M, G) == angle(M, K, F) mod 360, log(distance(F, K)) + log(distance(G, L)) == log(distance(G, M)) + log(distance(F, M)), log(distance(F, M)) + log(distance(L, M)) == log(distance(G, L)) + log(distance(K, M)), log(distance(K, M)) + log(distance(G, M)) == log(distance(L, M)) + log(distance(F, K))
By altitude_definition on orthocenter(G, J, M), J, M, altitude(G, J, M) we get altitude(G, J, M) == altitude(orthocenter(G, J, M), J, M)
By altitude_definition on orthocenter(G, J, M), C, G, Line(F, L) we get Line(F, L) == altitude(orthocenter(G, J, M), C, G)
By altitude_definition on orthocenter(G, J, M), M, K, Line(B, F) we get Line(B, F) == altitude(orthocenter(G, J, M), K, M)
By similar_triangle_basic_properties on M, G, C, J, F, M we get angle(J, F, M) == angle(M, G, C) mod 360, angle(F, M, J) == angle(G, C, M) mod 360, angle(C, M, G) == angle(M, J, F) mod 360, log(distance(F, J)) + log(distance(C, G)) == log(distance(G, M)) + log(distance(F, M)), log(distance(C, G)) + log(distance(J, M)) == log(distance(F, M)) + log(distance(C, M)), log(distance(C, M)) + log(distance(F, J)) == log(distance(J, M)) + log(distance(G, M))
By altitude_definition on F, G, midpoint(K, M), Line(B, F) we get Line(B, F) == altitude(F, G, midpoint(K, M))
By altitude_definition on orthocenter(F, G, J), B, J, Line(G, K) we get Line(G, K) == altitude(orthocenter(F, G, J), B, J)
By altitude_definition on orthocenter(F, G, J), G, J, Line(F, L) we get Line(F, L) == altitude(orthocenter(F, G, J), G, J)
By altitude_definition on orthocenter(F, G, M), L, M, Line(C, G) we get Line(C, G) == altitude(orthocenter(F, G, M), L, M)
By altitude_definition on orthocenter(F, G, J), C, J, Line(F, L) we get Line(F, L) == altitude(orthocenter(F, G, J), C, J)
By altitude_definition on orthocenter(F, G, J), midpoint(K, M), B, Line(G, K) we get Line(G, K) == altitude(orthocenter(F, G, J), B, midpoint(K, M))
By altitude_definition on orthocenter(G, J, M), midpoint(K, M), G, Line(B, F) we get Line(B, F) == altitude(orthocenter(G, J, M), G, midpoint(K, M))
By similar_triangle_basic_properties on C, A, J, M, F, J we get angle(C, A, J) == angle(M, F, J) mod 360, angle(A, J, C) == angle(F, J, M) mod 360, angle(J, C, A) == angle(J, M, F) mod 360, log(distance(A, C)) + log(distance(F, J)) == log(distance(F, M)) + log(distance(A, J)), log(distance(A, J)) + log(distance(J, M)) == log(distance(F, J)) + log(distance(C, J)), log(distance(C, J)) + log(distance(F, M)) == log(distance(J, M)) + log(distance(A, C))
By altitude_definition on C, midpoint(L, M), F, Line(C, G) we get Line(C, G) == altitude(C, F, midpoint(L, M))
By power_of_a_point_definition on F, M, L, Circle(C, J, L) we get log(distance(F, M)) + log(distance(F, L)) == log(power_of_a_point(F, Circle(C, J, L)))
By altitude_definition on orthocenter(F, G, M), K, M, Line(B, F) we get Line(B, F) == altitude(orthocenter(F, G, M), K, M)
By altitude_definition on orthocenter(G, J, M), G, M, Line(B, F) we get Line(B, F) == altitude(orthocenter(G, J, M), G, M)
By altitude_definition on orthocenter(F, G, M), midpoint(L, M), M, Line(C, G) we get Line(C, G) == altitude(orthocenter(F, G, M), M, midpoint(L, M))
By altitude_definition on orthocenter(F, G, J), midpoint(L, M), J, Line(F, L) we get Line(F, L) == altitude(orthocenter(F, G, J), J, midpoint(L, M))
By altitude_definition on orthocenter(G, J, M), midpoint(L, M), G, Line(F, L) we get Line(F, L) == altitude(orthocenter(G, J, M), G, midpoint(L, M))
By altitude_definition on orthocenter(F, G, M), G, midpoint(K, M), Line(B, F) we get Line(B, F) == altitude(orthocenter(F, G, M), G, midpoint(K, M))
By altitude_definition on B, G, midpoint(K, M), Line(B, F) we get Line(B, F) == altitude(B, G, midpoint(K, M))
By altitude_definition on orthocenter(G, J, M), J, G, Line(F, L) we get Line(F, L) == altitude(orthocenter(G, J, M), G, J)
By altitude_definition on orthocenter(F, G, J), J, F, Line(G, K) we get Line(G, K) == altitude(orthocenter(F, G, J), F, J)
By power_of_a_point_definition on midpoint(L, M), L, M, Circle(C, J, L) we get log(power_of_a_point(midpoint(L, M), Circle(C, J, L))) == log(distance(L, midpoint(L, M))) + log(distance(M, midpoint(L, M)))
By altitude_definition on orthocenter(F, J, M), F, midpoint(L, M), Line(C, G) we get Line(C, G) == altitude(orthocenter(F, J, M), F, midpoint(L, M))
By altitude_definition on orthocenter(F, G, J), F, B, Line(G, K) we get Line(G, K) == altitude(orthocenter(F, G, J), B, F)
By altitude_definition on orthocenter(F, G, M), L, F, Line(C, G) we get Line(C, G) == altitude(orthocenter(F, G, M), F, L)
By altitude_definition on orthocenter(F, J, M), B, J, Line(G, K) we get Line(G, K) == altitude(orthocenter(F, J, M), B, J)
By altitude_definition on orthocenter(F, G, M), M, F, Line(C, G) we get Line(C, G) == altitude(orthocenter(F, G, M), F, M)
By altitude_definition on orthocenter(G, J, M), K, midpoint(K, M), Line(B, F) we get Line(B, F) == altitude(orthocenter(G, J, M), K, midpoint(K, M))
By altitude_definition on orthocenter(F, J, M), M, L, Line(C, G) we get Line(C, G) == altitude(orthocenter(F, J, M), L, M)
By altitude_definition on orthocenter(F, G, M), midpoint(K, M), M, Line(B, F) we get Line(B, F) == altitude(orthocenter(F, G, M), M, midpoint(K, M))
By power_of_a_point_definition on midpoint(K, M), M, K, Circle(B, J, K) we get log(power_of_a_point(midpoint(K, M), Circle(B, J, K))) == log(distance(M, midpoint(K, M))) + log(distance(K, midpoint(K, M)))
By altitude_definition on orthocenter(F, J, M), J, M, altitude(F, J, M) we get altitude(F, J, M) == altitude(orthocenter(F, J, M), J, M)
By altitude_definition on orthocenter(F, G, M), G, K, Line(B, F) we get Line(B, F) == altitude(orthocenter(F, G, M), G, K)
By altitude_definition on orthocenter(F, G, J), C, G, Line(F, L) we get Line(F, L) == altitude(orthocenter(F, G, J), C, G)
By power_of_a_point_definition on G, M, K, Circle(B, J, K) we get log(distance(G, M)) + log(distance(G, K)) == log(power_of_a_point(G, Circle(B, J, K)))
By anti_similar_triangle_basic_properties on J, G, M, K, F, B we get angle(J, G, M) == 0 - angle(K, F, B) mod 360, angle(G, M, J) == 0 - angle(F, B, K) mod 360, angle(M, J, G) == 0 - angle(B, K, F) mod 360, log(distance(F, K)) + log(distance(G, M)) == log(distance(G, J)) + log(distance(B, F)), log(distance(B, F)) + log(distance(J, M)) == log(distance(G, M)) + log(distance(B, K)), log(distance(B, K)) + log(distance(G, J)) == log(distance(J, M)) + log(distance(F, K))
By power_of_a_point_definition on T, M, B, Circle(B, J, K) we get log(distance(M, T)) + log(distance(B, T)) == log(power_of_a_point(T, Circle(B, J, K)))
By anti_similar_triangle_basic_properties on M, G, C, J, F, K we get angle(M, G, C) == 0 - angle(J, F, K) mod 360, angle(G, C, M) == 0 - angle(F, K, J) mod 360, angle(C, M, G) == 0 - angle(K, J, F) mod 360, log(distance(F, J)) + log(distance(C, G)) == log(distance(G, M)) + log(distance(F, K)), log(distance(C, G)) + log(distance(J, K)) == log(distance(F, K)) + log(distance(C, M)), log(distance(C, M)) + log(distance(F, J)) == log(distance(J, K)) + log(distance(G, M))
By anti_similar_triangle_basic_properties on C, L, G, C, J, A we get angle(C, L, G) == 0 - angle(C, J, A) mod 360, angle(L, G, C) == 0 - angle(J, A, C) mod 360, angle(G, C, L) == 0 - angle(A, C, J) mod 360, log(distance(C, J)) + log(distance(G, L)) == log(distance(C, L)) + log(distance(A, J)), log(distance(A, J)) + log(distance(C, G)) == log(distance(G, L)) + log(distance(A, C)), log(distance(A, C)) + log(distance(C, L)) == log(distance(C, G)) + log(distance(C, J))
By anti_similar_triangle_basic_properties on J, K, F, M, C, G we get angle(J, K, F) == 0 - angle(M, C, G) mod 360, angle(K, F, J) == 0 - angle(C, G, M) mod 360, angle(F, J, K) == 0 - angle(G, M, C) mod 360, log(distance(C, M)) + log(distance(F, K)) == log(distance(J, K)) + log(distance(C, G)), log(distance(C, G)) + log(distance(F, J)) == log(distance(F, K)) + log(distance(G, M)), log(distance(F, J)) + log(distance(C, M)) == log(distance(G, M)) + log(distance(J, K))
By power_of_a_point_definition on T, C, M, Circle(C, J, L) we get log(distance(C, T)) + log(distance(M, T)) == log(power_of_a_point(T, Circle(C, J, L)))
By anti_similar_triangle_basic_properties on J, F, K, J, A, C we get angle(J, F, K) == 0 - angle(J, A, C) mod 360, angle(F, K, J) == 0 - angle(A, C, J) mod 360, angle(K, J, F) == 0 - angle(C, J, A) mod 360, log(distance(A, J)) + log(distance(F, K)) == log(distance(F, J)) + log(distance(A, C)), log(distance(A, C)) + log(distance(J, K)) == log(distance(F, K)) + log(distance(C, J)), log(distance(C, J)) + log(distance(F, J)) == log(distance(J, K)) + log(distance(A, J))
By anti_similar_triangle_basic_properties on B, J, A, L, J, G we get angle(B, J, A) == 0 - angle(L, J, G) mod 360, angle(J, A, B) == 0 - angle(J, G, L) mod 360, angle(A, B, J) == 0 - angle(G, L, J) mod 360, log(distance(B, J)) + log(distance(G, J)) == log(distance(J, L)) + log(distance(A, J)), log(distance(A, J)) + log(distance(G, L)) == log(distance(G, J)) + log(distance(A, B)), log(distance(A, B)) + log(distance(J, L)) == log(distance(G, L)) + log(distance(B, J))
By anti_similar_triangle_basic_properties on F, K, B, G, J, M we get angle(F, K, B) == 0 - angle(G, J, M) mod 360, angle(K, B, F) == 0 - angle(J, M, G) mod 360, angle(B, F, K) == 0 - angle(M, G, J) mod 360, log(distance(F, K)) + log(distance(J, M)) == log(distance(G, J)) + log(distance(B, K)), log(distance(B, K)) + log(distance(G, M)) == log(distance(J, M)) + log(distance(B, F)), log(distance(B, F)) + log(distance(G, J)) == log(distance(G, M)) + log(distance(F, K))
By anti_similar_triangle_basic_properties on J, L, G, M, B, F we get angle(J, L, G) == 0 - angle(M, B, F) mod 360, angle(L, G, J) == 0 - angle(B, F, M) mod 360, angle(G, J, L) == 0 - angle(F, M, B) mod 360, log(distance(B, M)) + log(distance(G, L)) == log(distance(J, L)) + log(distance(B, F)), log(distance(B, F)) + log(distance(G, J)) == log(distance(G, L)) + log(distance(F, M)), log(distance(F, M)) + log(distance(J, L)) == log(distance(G, J)) + log(distance(B, M))
By anti_similar_triangle_basic_properties on C, G, L, M, F, J we get angle(C, G, L) == 0 - angle(M, F, J) mod 360, angle(G, L, C) == 0 - angle(F, J, M) mod 360, angle(L, C, G) == 0 - angle(J, M, F) mod 360, log(distance(C, G)) + log(distance(F, J)) == log(distance(F, M)) + log(distance(G, L)), log(distance(F, J)) + log(distance(C, L)) == log(distance(G, L)) + log(distance(J, M)), log(distance(C, L)) + log(distance(F, M)) == log(distance(J, M)) + log(distance(C, G))
By power_of_a_point_definition on C, L, A, Circle(A, J, K) we get log(distance(C, L)) + log(distance(A, C)) == log(power_of_a_point(C, Circle(A, J, K)))
By anti_similar_triangle_basic_properties on C, A, J, C, G, L we get angle(C, A, J) == 0 - angle(C, G, L) mod 360, angle(A, J, C) == 0 - angle(G, L, C) mod 360, angle(J, C, A) == 0 - angle(L, C, G) mod 360, log(distance(A, C)) + log(distance(G, L)) == log(distance(C, G)) + log(distance(A, J)), log(distance(A, J)) + log(distance(C, L)) == log(distance(G, L)) + log(distance(C, J)), log(distance(C, J)) + log(distance(C, G)) == log(distance(C, L)) + log(distance(A, C))
By anti_similar_triangle_basic_properties on K, B, F, J, B, A we get angle(K, B, F) == 0 - angle(J, B, A) mod 360, angle(B, F, K) == 0 - angle(B, A, J) mod 360, angle(F, K, B) == 0 - angle(A, J, B) mod 360, log(distance(B, J)) + log(distance(B, F)) == log(distance(B, K)) + log(distance(A, B)), log(distance(A, B)) + log(distance(F, K)) == log(distance(B, F)) + log(distance(A, J)), log(distance(A, J)) + log(distance(B, K)) == log(distance(F, K)) + log(distance(B, J))
By power_of_a_point_definition on C, M, B, Circle(B, J, K) we get log(distance(C, M)) + log(distance(B, C)) == log(power_of_a_point(C, Circle(B, J, K)))
By power_of_a_point_definition on S, B, M, Circle(B, J, K) we get log(distance(B, S)) + log(distance(M, S)) == log(power_of_a_point(S, Circle(B, J, K)))
By anti_similar_triangle_basic_properties on J, K, F, J, C, A we get angle(J, K, F) == 0 - angle(J, C, A) mod 360, angle(K, F, J) == 0 - angle(C, A, J) mod 360, angle(F, J, K) == 0 - angle(A, J, C) mod 360, log(distance(C, J)) + log(distance(F, K)) == log(distance(J, K)) + log(distance(A, C)), log(distance(A, C)) + log(distance(F, J)) == log(distance(F, K)) + log(distance(A, J)), log(distance(A, J)) + log(distance(J, K)) == log(distance(F, J)) + log(distance(C, J))
By power_of_a_point_definition on A, B, K, Circle(B, J, K) we get log(distance(A, B)) + log(distance(A, K)) == log(power_of_a_point(A, Circle(B, J, K)))
By anti_similar_triangle_basic_properties on F, M, J, G, C, L we get angle(F, M, J) == 0 - angle(G, C, L) mod 360, angle(M, J, F) == 0 - angle(C, L, G) mod 360, angle(J, F, M) == 0 - angle(L, G, C) mod 360, log(distance(C, G)) + log(distance(J, M)) == log(distance(F, M)) + log(distance(C, L)), log(distance(C, L)) + log(distance(F, J)) == log(distance(J, M)) + log(distance(G, L)), log(distance(F, J)) + log(distance(C, G)) == log(distance(G, L)) + log(distance(F, M))
By anti_similar_triangle_basic_properties on L, G, J, B, A, J we get angle(L, G, J) == 0 - angle(B, A, J) mod 360, angle(G, J, L) == 0 - angle(A, J, B) mod 360, angle(J, L, G) == 0 - angle(J, B, A) mod 360, log(distance(A, B)) + log(distance(G, J)) == log(distance(G, L)) + log(distance(A, J)), log(distance(A, J)) + log(distance(J, L)) == log(distance(G, J)) + log(distance(B, J)), log(distance(B, J)) + log(distance(G, L)) == log(distance(J, L)) + log(distance(A, B))
By anti_similar_triangle_basic_properties on F, B, K, A, B, J we get angle(F, B, K) == 0 - angle(A, B, J) mod 360, angle(B, K, F) == 0 - angle(B, J, A) mod 360, angle(K, F, B) == 0 - angle(J, A, B) mod 360, log(distance(A, B)) + log(distance(B, K)) == log(distance(B, F)) + log(distance(B, J)), log(distance(B, J)) + log(distance(F, K)) == log(distance(B, K)) + log(distance(A, J)), log(distance(A, J)) + log(distance(B, F)) == log(distance(F, K)) + log(distance(A, B))
By anti_similar_triangle_basic_properties on B, M, F, L, J, G we get angle(B, M, F) == 0 - angle(L, J, G) mod 360, angle(M, F, B) == 0 - angle(J, G, L) mod 360, angle(F, B, M) == 0 - angle(G, L, J) mod 360, log(distance(B, M)) + log(distance(G, J)) == log(distance(J, L)) + log(distance(F, M)), log(distance(F, M)) + log(distance(G, L)) == log(distance(G, J)) + log(distance(B, F)), log(distance(B, F)) + log(distance(J, L)) == log(distance(G, L)) + log(distance(B, M))
By power_of_a_point_definition on B, C, M, Circle(C, J, L) we get log(distance(B, C)) + log(distance(B, M)) == log(power_of_a_point(B, Circle(C, J, L)))
By power_of_a_point_definition on B, A, K, Circle(A, J, K) we get log(distance(A, B)) + log(distance(B, K)) == log(power_of_a_point(B, Circle(A, J, K)))
By power_of_a_point_definition on A, L, C, Circle(C, J, L) we get log(distance(A, L)) + log(distance(A, C)) == log(power_of_a_point(A, Circle(C, J, L)))
By power_of_a_point_definition on S, M, C, Circle(C, J, L) we get log(distance(M, S)) + log(distance(C, S)) == log(power_of_a_point(S, Circle(C, J, L)))
By power_of_a_point_definition on midpoint(K, M), B, J, Circle(B, J, K) we get log(power_of_a_point(midpoint(K, M), Circle(B, J, K))) == log(distance(B, midpoint(K, M))) + log(distance(J, midpoint(K, M)))
By similar_triangle_basic_properties on C, G, L, K, F, J we get angle(C, G, L) == angle(K, F, J) mod 360, angle(F, J, K) == angle(G, L, C) mod 360, angle(J, K, F) == angle(L, C, G) mod 360, log(distance(C, G)) + log(distance(F, J)) == log(distance(F, K)) + log(distance(G, L)), log(distance(F, J)) + log(distance(C, L)) == log(distance(G, L)) + log(distance(J, K)), log(distance(C, L)) + log(distance(F, K)) == log(distance(J, K)) + log(distance(C, G))
By similar_triangle_basic_properties on F, B, K, G, L, J we get angle(F, B, K) == angle(G, L, J) mod 360, angle(B, K, F) == angle(L, J, G) mod 360, angle(J, G, L) == angle(K, F, B) mod 360, log(distance(B, F)) + log(distance(J, L)) == log(distance(G, L)) + log(distance(B, K)), log(distance(B, K)) + log(distance(G, J)) == log(distance(J, L)) + log(distance(F, K)), log(distance(F, K)) + log(distance(G, L)) == log(distance(G, J)) + log(distance(B, F))
By similar_triangle_basic_properties on J, F, K, L, G, C we get angle(J, F, K) == angle(L, G, C) mod 360, angle(F, K, J) == angle(G, C, L) mod 360, angle(C, L, G) == angle(K, J, F) mod 360, log(distance(F, J)) + log(distance(C, G)) == log(distance(G, L)) + log(distance(F, K)), log(distance(C, G)) + log(distance(J, K)) == log(distance(F, K)) + log(distance(C, L)), log(distance(C, L)) + log(distance(F, J)) == log(distance(J, K)) + log(distance(G, L))
By power_of_a_point_definition on midpoint(L, M), J, C, Circle(C, J, L) we get log(power_of_a_point(midpoint(L, M), Circle(C, J, L))) == log(distance(J, midpoint(L, M))) + log(distance(C, midpoint(L, M)))
By power_of_a_point_definition on midpoint(K, L), J, A, Circle(A, J, K) we get log(power_of_a_point(midpoint(K, L), Circle(A, J, K))) == log(distance(J, midpoint(K, L))) + log(distance(A, midpoint(K, L)))
By similar_triangle_basic_properties on F, K, B, G, J, L we get angle(F, K, B) == angle(G, J, L) mod 360, angle(J, L, G) == angle(K, B, F) mod 360, angle(B, F, K) == angle(L, G, J) mod 360, log(distance(F, K)) + log(distance(J, L)) == log(distance(G, J)) + log(distance(B, K)), log(distance(B, K)) + log(distance(G, L)) == log(distance(J, L)) + log(distance(B, F)), log(distance(B, F)) + log(distance(G, J)) == log(distance(G, L)) + log(distance(F, K))
By power_of_a_point_definition on F, B, J, Circle(B, J, K) we get log(distance(B, F)) + log(distance(F, J)) == log(power_of_a_point(F, Circle(B, J, K)))
By power_of_a_point_definition on G, C, J, Circle(C, J, L) we get log(distance(C, G)) + log(distance(G, J)) == log(power_of_a_point(G, Circle(C, J, L)))
By concurrent_sufficient_conditions on Line(G, L), Line(A, C), Line(K, L) we get concurrent(Line(A, C), Line(G, L), Line(K, L))
By concurrent_sufficient_conditions on Line(A, F), Line(F, L), Line(F, K) we get concurrent(Line(A, F), Line(F, K), Line(F, L))
By concurrent_sufficient_conditions on Line(K, L), Line(J, K), Line(F, K) we get concurrent(Line(F, K), Line(J, K), Line(K, L))
By concurrent_sufficient_conditions on Line(F, G), Line(C, G), Line(G, K) we get concurrent(Line(C, G), Line(F, G), Line(G, K))
By concurrent_sufficient_conditions on Line(F, G), Line(C, G), Line(A, G) we get concurrent(Line(A, G), Line(C, G), Line(F, G))
By concurrent_sufficient_conditions on Line(G, K), Line(F, K), Line(J, K) we get concurrent(Line(F, K), Line(G, K), Line(J, K))
By concyclic_sufficient_conditions_v0 on L, F, K, A we get concyclic(A, F, K, L)
By concurrent_sufficient_conditions on Line(G, L), Line(K, L), Line(A, C) we get concurrent(Line(A, C), Line(G, L), Line(K, L))
By concurrent_sufficient_conditions on Line(K, L), Line(A, B), Line(F, K) we get concurrent(Line(A, B), Line(F, K), Line(K, L))
By concurrent_sufficient_conditions on Line(A, G), Line(F, G), Line(C, G) we get concurrent(Line(A, G), Line(C, G), Line(F, G))
By concurrent_sufficient_conditions on Line(G, L), Line(F, L), Line(K, L) we get concurrent(Line(F, L), Line(G, L), Line(K, L))
By concurrent_sufficient_conditions on Line(A, G), Line(G, L), Line(G, K) we get concurrent(Line(A, G), Line(G, K), Line(G, L))
By concurrent_sufficient_conditions on Line(F, G), Line(G, K), Line(C, G) we get concurrent(Line(C, G), Line(F, G), Line(G, K))
By concurrent_sufficient_conditions on Line(B, F), Line(F, K), Line(F, G) we get concurrent(Line(B, F), Line(F, G), Line(F, K))
By concurrent_sufficient_conditions on Line(F, L), Line(F, G), Line(A, F) we get concurrent(Line(A, F), Line(F, G), Line(F, L))
By concurrent_sufficient_conditions on Line(A, B), Line(J, K), Line(F, K) we get concurrent(Line(A, B), Line(F, K), Line(J, K))
By concurrent_sufficient_conditions on Line(G, K), Line(K, L), Line(F, K) we get concurrent(Line(F, K), Line(G, K), Line(K, L))
By concurrent_sufficient_conditions on Line(A, C), Line(J, L), Line(G, L) we get concurrent(Line(A, C), Line(G, L), Line(J, L))
By concurrent_sufficient_conditions on Line(F, G), Line(A, G), Line(G, L) we get concurrent(Line(A, G), Line(F, G), Line(G, L))
By concurrent_sufficient_conditions on Line(G, K), Line(G, L), Line(F, G) we get concurrent(Line(F, G), Line(G, K), Line(G, L))
By concurrent_sufficient_conditions on Line(F, K), Line(A, F), Line(F, L) we get concurrent(Line(A, F), Line(F, K), Line(F, L))
By concurrent_sufficient_conditions on Line(G, L), Line(F, G), Line(A, G) we get concurrent(Line(A, G), Line(F, G), Line(G, L))
By concurrent_sufficient_conditions on Line(G, K), Line(C, G), Line(G, L) we get concurrent(Line(C, G), Line(G, K), Line(G, L))
By concurrent_sufficient_conditions on Line(F, K), Line(A, F), Line(F, G) we get concurrent(Line(A, F), Line(F, G), Line(F, K))
By concurrent_sufficient_conditions on Line(K, L), Line(G, L), Line(J, L) we get concurrent(Line(G, L), Line(J, L), Line(K, L))
By concyclic_sufficient_conditions_v0 on G, K, A, L we get concyclic(A, G, K, L)
By concurrent_sufficient_conditions on Line(A, C), Line(F, L), Line(G, L) we get concurrent(Line(A, C), Line(F, L), Line(G, L))
By concurrent_sufficient_conditions on Line(F, K), Line(J, K), Line(G, K) we get concurrent(Line(F, K), Line(G, K), Line(J, K))
By concurrent_sufficient_conditions on Line(C, G), Line(A, G), Line(G, L) we get concurrent(Line(A, G), Line(C, G), Line(G, L))
By concurrent_sufficient_conditions on Line(A, F), Line(B, F), Line(F, K) we get concurrent(Line(A, F), Line(B, F), Line(F, K))
By concurrent_sufficient_conditions on Line(F, G), Line(F, K), Line(A, F) we get concurrent(Line(A, F), Line(F, G), Line(F, K))
By concurrent_sufficient_conditions on Line(A, F), Line(F, L), Line(F, G) we get concurrent(Line(A, F), Line(F, G), Line(F, L))
By concurrent_sufficient_conditions on Line(F, L), Line(F, G), Line(F, K) we get concurrent(Line(F, G), Line(F, K), Line(F, L))
By concurrent_sufficient_conditions on Line(G, K), Line(F, G), Line(C, G) we get concurrent(Line(C, G), Line(F, G), Line(G, K))
By concurrent_sufficient_conditions on Line(G, K), Line(F, K), Line(K, L) we get concurrent(Line(F, K), Line(G, K), Line(K, L))
By concurrent_sufficient_conditions on Line(C, G), Line(F, G), Line(G, L) we get concurrent(Line(C, G), Line(F, G), Line(G, L))
By concurrent_sufficient_conditions on Line(A, G), Line(G, K), Line(F, G) we get concurrent(Line(A, G), Line(F, G), Line(G, K))
By concurrent_sufficient_conditions on Line(J, K), Line(F, K), Line(A, B) we get concurrent(Line(A, B), Line(F, K), Line(J, K))
By concurrent_sufficient_conditions on Line(J, L), Line(A, C), Line(G, L) we get concurrent(Line(A, C), Line(G, L), Line(J, L))
By concurrent_sufficient_conditions on Line(F, K), Line(K, L), Line(J, K) we get concurrent(Line(F, K), Line(J, K), Line(K, L))
By concurrent_sufficient_conditions on Line(G, L), Line(K, L), Line(F, L) we get concurrent(Line(F, L), Line(G, L), Line(K, L))
By concyclic_sufficient_conditions_v0 on F, K, G, L we get concyclic(F, G, K, L)
By concurrent_sufficient_conditions on Line(A, F), Line(B, F), Line(F, G) we get concurrent(Line(A, F), Line(B, F), Line(F, G))
By concurrent_sufficient_conditions on Line(G, L), Line(A, G), Line(G, K) we get concurrent(Line(A, G), Line(G, K), Line(G, L))
By concurrent_sufficient_conditions on Line(F, G), Line(B, F), Line(A, F) we get concurrent(Line(A, F), Line(B, F), Line(F, G))
By concurrent_sufficient_conditions on Line(B, F), Line(A, F), Line(F, K) we get concurrent(Line(A, F), Line(B, F), Line(F, K))
By concurrent_sufficient_conditions on Line(K, L), Line(J, L), Line(G, L) we get concurrent(Line(G, L), Line(J, L), Line(K, L))
By concurrent_sufficient_conditions on Line(F, G), Line(F, L), Line(F, K) we get concurrent(Line(F, G), Line(F, K), Line(F, L))
By concurrent_sufficient_conditions on Line(G, K), Line(F, G), Line(A, G) we get concurrent(Line(A, G), Line(F, G), Line(G, K))
By line_definition on line_intersection(Line(F, G), Line(J, M)), G, Line(F, G) we get Line(F, G) == Line(G, line_intersection(Line(F, G), Line(J, M)))
By concurrent_sufficient_conditions on Line(A, F), Line(F, K), Line(F, G) we get concurrent(Line(A, F), Line(F, G), Line(F, K))
By concurrent_sufficient_conditions on Line(F, K), Line(G, K), Line(K, L) we get concurrent(Line(F, K), Line(G, K), Line(K, L))
By concurrent_sufficient_conditions on Line(A, G), Line(G, L), Line(C, G) we get concurrent(Line(A, G), Line(C, G), Line(G, L))
By concurrent_sufficient_conditions on Line(G, L), Line(G, K), Line(A, G) we get concurrent(Line(A, G), Line(G, K), Line(G, L))
By concurrent_sufficient_conditions on Line(F, G), Line(G, K), Line(G, L) we get concurrent(Line(F, G), Line(G, K), Line(G, L))
By line_definition on line_intersection(Line(F, G), Line(J, M)), F, Line(F, G) we get Line(F, G) == Line(F, line_intersection(Line(F, G), Line(J, M)))
By concurrent_sufficient_conditions on Line(G, L), Line(A, C), Line(F, L) we get concurrent(Line(A, C), Line(F, L), Line(G, L))
By concurrent_sufficient_conditions on Line(A, B), Line(K, L), Line(F, K) we get concurrent(Line(A, B), Line(F, K), Line(K, L))
By concurrent_sufficient_conditions on Line(F, L), Line(F, K), Line(B, F) we get concurrent(Line(B, F), Line(F, K), Line(F, L))
By concurrent_sufficient_conditions on Line(J, K), Line(A, B), Line(F, K) we get concurrent(Line(A, B), Line(F, K), Line(J, K))
By concurrent_sufficient_conditions on Line(F, G), Line(G, K), Line(A, G) we get concurrent(Line(A, G), Line(F, G), Line(G, K))
By concurrent_sufficient_conditions on Line(B, F), Line(A, F), Line(F, G) we get concurrent(Line(A, F), Line(B, F), Line(F, G))
By concurrent_sufficient_conditions on Line(B, F), Line(F, L), Line(F, G) we get concurrent(Line(B, F), Line(F, G), Line(F, L))
By concurrent_sufficient_conditions on Line(A, G), Line(F, G), Line(G, L) we get concurrent(Line(A, G), Line(F, G), Line(G, L))
By concurrent_sufficient_conditions on Line(F, K), Line(B, F), Line(A, F) we get concurrent(Line(A, F), Line(B, F), Line(F, K))
By concurrent_sufficient_conditions on Line(A, G), Line(G, K), Line(G, L) we get concurrent(Line(A, G), Line(G, K), Line(G, L))
By concurrent_sufficient_conditions on Line(B, F), Line(F, L), Line(F, K) we get concurrent(Line(B, F), Line(F, K), Line(F, L))
By concurrent_sufficient_conditions on Line(G, L), Line(K, L), Line(J, L) we get concurrent(Line(G, L), Line(J, L), Line(K, L))
By concurrent_sufficient_conditions on Line(G, L), Line(G, K), Line(F, G) we get concurrent(Line(F, G), Line(G, K), Line(G, L))
By concurrent_sufficient_conditions on Line(A, F), Line(F, G), Line(F, K) we get concurrent(Line(A, F), Line(F, G), Line(F, K))
By concurrent_sufficient_conditions on Line(A, F), Line(F, G), Line(B, F) we get concurrent(Line(A, F), Line(B, F), Line(F, G))
By concurrent_sufficient_conditions on Line(C, G), Line(F, G), Line(G, K) we get concurrent(Line(C, G), Line(F, G), Line(G, K))
By concurrent_sufficient_conditions on Line(C, G), Line(G, K), Line(G, L) we get concurrent(Line(C, G), Line(G, K), Line(G, L))
By concurrent_sufficient_conditions on Line(K, L), Line(G, K), Line(F, K) we get concurrent(Line(F, K), Line(G, K), Line(K, L))
By concurrent_sufficient_conditions on Line(F, K), Line(B, F), Line(F, G) we get concurrent(Line(B, F), Line(F, G), Line(F, K))
By concurrent_sufficient_conditions on Line(F, G), Line(A, G), Line(G, K) we get concurrent(Line(A, G), Line(F, G), Line(G, K))
By concurrent_sufficient_conditions on Line(J, K), Line(F, K), Line(K, L) we get concurrent(Line(F, K), Line(J, K), Line(K, L))
By concurrent_sufficient_conditions on Line(G, L), Line(F, G), Line(G, K) we get concurrent(Line(F, G), Line(G, K), Line(G, L))
By concurrent_sufficient_conditions on Line(K, L), Line(F, K), Line(J, K) we get concurrent(Line(F, K), Line(J, K), Line(K, L))
By concurrent_sufficient_conditions on Line(B, F), Line(F, G), Line(F, L) we get concurrent(Line(B, F), Line(F, G), Line(F, L))
By concurrent_sufficient_conditions on Line(G, L), Line(J, L), Line(F, L) we get concurrent(Line(F, L), Line(G, L), Line(J, L))
By concurrent_sufficient_conditions on Line(F, L), Line(F, K), Line(A, F) we get concurrent(Line(A, F), Line(F, K), Line(F, L))
By concurrent_sufficient_conditions on Line(B, F), Line(F, K), Line(F, L) we get concurrent(Line(B, F), Line(F, K), Line(F, L))
By concurrent_sufficient_conditions on Line(F, K), Line(K, L), Line(G, K) we get concurrent(Line(F, K), Line(G, K), Line(K, L))
By concurrent_sufficient_conditions on Line(F, L), Line(G, L), Line(J, L) we get concurrent(Line(F, L), Line(G, L), Line(J, L))
By concurrent_sufficient_conditions on Line(F, G), Line(F, K), Line(B, F) we get concurrent(Line(B, F), Line(F, G), Line(F, K))
By concurrent_sufficient_conditions on Line(F, K), Line(A, B), Line(K, L) we get concurrent(Line(A, B), Line(F, K), Line(K, L))
By concurrent_sufficient_conditions on Line(F, K), Line(A, F), Line(B, F) we get concurrent(Line(A, F), Line(B, F), Line(F, K))
By concurrent_sufficient_conditions on Line(F, K), Line(G, K), Line(J, K) we get concurrent(Line(F, K), Line(G, K), Line(J, K))
By concurrent_sufficient_conditions on Line(A, B), Line(F, K), Line(G, K) we get concurrent(Line(A, B), Line(F, K), Line(G, K))
By concurrent_sufficient_conditions on Line(C, G), Line(G, K), Line(F, G) we get concurrent(Line(C, G), Line(F, G), Line(G, K))
By concurrent_sufficient_conditions on Line(F, G), Line(A, F), Line(B, F) we get concurrent(Line(A, F), Line(B, F), Line(F, G))
By concurrent_sufficient_conditions on Line(G, K), Line(F, G), Line(G, L) we get concurrent(Line(F, G), Line(G, K), Line(G, L))
By concurrent_sufficient_conditions on Line(F, L), Line(A, F), Line(F, G) we get concurrent(Line(A, F), Line(F, G), Line(F, L))
By concurrent_sufficient_conditions on Line(A, G), Line(G, L), Line(F, G) we get concurrent(Line(A, G), Line(F, G), Line(G, L))
By concurrent_sufficient_conditions on Line(F, K), Line(F, L), Line(B, F) we get concurrent(Line(B, F), Line(F, K), Line(F, L))
By concurrent_sufficient_conditions on Line(B, F), Line(F, G), Line(F, K) we get concurrent(Line(B, F), Line(F, G), Line(F, K))
By concurrent_sufficient_conditions on Line(F, L), Line(A, C), Line(G, L) we get concurrent(Line(A, C), Line(F, L), Line(G, L))
By concurrent_sufficient_conditions on Line(G, L), Line(A, G), Line(C, G) we get concurrent(Line(A, G), Line(C, G), Line(G, L))
By concurrent_sufficient_conditions on Line(C, G), Line(A, G), Line(F, G) we get concurrent(Line(A, G), Line(C, G), Line(F, G))
By concurrent_sufficient_conditions on Line(K, L), Line(G, L), Line(A, C) we get concurrent(Line(A, C), Line(G, L), Line(K, L))
By concurrent_sufficient_conditions on Line(J, K), Line(G, K), Line(F, K) we get concurrent(Line(F, K), Line(G, K), Line(J, K))
By concurrent_sufficient_conditions on Line(F, G), Line(B, F), Line(F, K) we get concurrent(Line(B, F), Line(F, G), Line(F, K))
By concurrent_sufficient_conditions on Line(C, G), Line(G, L), Line(A, G) we get concurrent(Line(A, G), Line(C, G), Line(G, L))
By concurrent_sufficient_conditions on Line(G, L), Line(G, K), Line(C, G) we get concurrent(Line(C, G), Line(G, K), Line(G, L))
By concurrent_sufficient_conditions on Line(G, K), Line(F, K), Line(A, B) we get concurrent(Line(A, B), Line(F, K), Line(G, K))
By concurrent_sufficient_conditions on Line(A, C), Line(G, L), Line(K, L) we get concurrent(Line(A, C), Line(G, L), Line(K, L))
By concurrent_sufficient_conditions on Line(K, L), Line(G, L), Line(F, L) we get concurrent(Line(F, L), Line(G, L), Line(K, L))
By concurrent_sufficient_conditions on Line(F, K), Line(F, G), Line(B, F) we get concurrent(Line(B, F), Line(F, G), Line(F, K))
By concurrent_sufficient_conditions on Line(J, K), Line(F, K), Line(G, K) we get concurrent(Line(F, K), Line(G, K), Line(J, K))
By concurrent_sufficient_conditions on Line(F, K), Line(B, F), Line(F, L) we get concurrent(Line(B, F), Line(F, K), Line(F, L))
By concurrent_sufficient_conditions on Line(F, K), Line(A, B), Line(J, K) we get concurrent(Line(A, B), Line(F, K), Line(J, K))
By concurrent_sufficient_conditions on Line(C, G), Line(G, L), Line(F, G) we get concurrent(Line(C, G), Line(F, G), Line(G, L))
By concurrent_sufficient_conditions on Line(A, G), Line(C, G), Line(G, L) we get concurrent(Line(A, G), Line(C, G), Line(G, L))
By concurrent_sufficient_conditions on Line(J, L), Line(G, L), Line(F, L) we get concurrent(Line(F, L), Line(G, L), Line(J, L))
By concurrent_sufficient_conditions on Line(B, F), Line(F, K), Line(A, F) we get concurrent(Line(A, F), Line(B, F), Line(F, K))
By concurrent_sufficient_conditions on Line(J, L), Line(F, L), Line(G, L) we get concurrent(Line(F, L), Line(G, L), Line(J, L))
By concurrent_sufficient_conditions on Line(G, L), Line(A, G), Line(F, G) we get concurrent(Line(A, G), Line(F, G), Line(G, L))
By concurrent_sufficient_conditions on Line(F, L), Line(J, L), Line(G, L) we get concurrent(Line(F, L), Line(G, L), Line(J, L))
By concurrent_sufficient_conditions on Line(G, L), Line(J, L), Line(A, C) we get concurrent(Line(A, C), Line(G, L), Line(J, L))
By concurrent_sufficient_conditions on Line(G, K), Line(A, G), Line(G, L) we get concurrent(Line(A, G), Line(G, K), Line(G, L))
By concurrent_sufficient_conditions on Line(G, K), Line(C, G), Line(F, G) we get concurrent(Line(C, G), Line(F, G), Line(G, K))
By line_definition on M, line_intersection(Line(F, G), Line(J, M)), Line(J, M) we get Line(J, M) == Line(M, line_intersection(Line(F, G), Line(J, M)))
By concurrent_sufficient_conditions on Line(G, L), Line(C, G), Line(G, K) we get concurrent(Line(C, G), Line(G, K), Line(G, L))
By concurrent_sufficient_conditions on Line(C, G), Line(F, G), Line(A, G) we get concurrent(Line(A, G), Line(C, G), Line(F, G))
By concurrent_sufficient_conditions on Line(C, G), Line(G, L), Line(G, K) we get concurrent(Line(C, G), Line(G, K), Line(G, L))
By line_definition on line_intersection(Line(F, G), Line(J, M)), J, Line(J, M) we get Line(J, M) == Line(J, line_intersection(Line(F, G), Line(J, M)))
By concurrent_sufficient_conditions on Line(F, K), Line(F, G), Line(A, F) we get concurrent(Line(A, F), Line(F, G), Line(F, K))
By concurrent_sufficient_conditions on Line(J, L), Line(K, L), Line(G, L) we get concurrent(Line(G, L), Line(J, L), Line(K, L))
By concurrent_sufficient_conditions on Line(B, F), Line(F, G), Line(A, F) we get concurrent(Line(A, F), Line(B, F), Line(F, G))
By concurrent_sufficient_conditions on Line(F, L), Line(K, L), Line(G, L) we get concurrent(Line(F, L), Line(G, L), Line(K, L))
By concurrent_sufficient_conditions on Line(A, G), Line(C, G), Line(F, G) we get concurrent(Line(A, G), Line(C, G), Line(F, G))
By concurrent_sufficient_conditions on Line(K, L), Line(F, K), Line(G, K) we get concurrent(Line(F, K), Line(G, K), Line(K, L))
By concurrent_sufficient_conditions on Line(K, L), Line(F, K), Line(A, B) we get concurrent(Line(A, B), Line(F, K), Line(K, L))
By concurrent_sufficient_conditions on Line(F, G), Line(G, L), Line(C, G) we get concurrent(Line(C, G), Line(F, G), Line(G, L))
By concurrent_sufficient_conditions on Line(F, L), Line(F, G), Line(B, F) we get concurrent(Line(B, F), Line(F, G), Line(F, L))
By concurrent_sufficient_conditions on Line(F, L), Line(G, L), Line(K, L) we get concurrent(Line(F, L), Line(G, L), Line(K, L))
By concurrent_sufficient_conditions on Line(J, L), Line(G, L), Line(K, L) we get concurrent(Line(G, L), Line(J, L), Line(K, L))
By concurrent_sufficient_conditions on Line(F, G), Line(A, F), Line(F, L) we get concurrent(Line(A, F), Line(F, G), Line(F, L))
By concurrent_sufficient_conditions on Line(G, L), Line(J, L), Line(K, L) we get concurrent(Line(G, L), Line(J, L), Line(K, L))
By concurrent_sufficient_conditions on Line(F, K), Line(G, K), Line(A, B) we get concurrent(Line(A, B), Line(F, K), Line(G, K))
By concurrent_sufficient_conditions on Line(F, L), Line(B, F), Line(F, K) we get concurrent(Line(B, F), Line(F, K), Line(F, L))
By concurrent_sufficient_conditions on Line(F, G), Line(F, L), Line(B, F) we get concurrent(Line(B, F), Line(F, G), Line(F, L))
By concurrent_sufficient_conditions on Line(F, G), Line(C, G), Line(G, L) we get concurrent(Line(C, G), Line(F, G), Line(G, L))
By concurrent_sufficient_conditions on Line(F, K), Line(F, L), Line(F, G) we get concurrent(Line(F, G), Line(F, K), Line(F, L))
By concurrent_sufficient_conditions on Line(F, K), Line(F, L), Line(A, F) we get concurrent(Line(A, F), Line(F, K), Line(F, L))
By concurrent_sufficient_conditions on Line(F, L), Line(G, L), Line(A, C) we get concurrent(Line(A, C), Line(F, L), Line(G, L))
By concurrent_sufficient_conditions on Line(G, K), Line(A, B), Line(F, K) we get concurrent(Line(A, B), Line(F, K), Line(G, K))
By concurrent_sufficient_conditions on Line(F, G), Line(G, L), Line(G, K) we get concurrent(Line(F, G), Line(G, K), Line(G, L))
By concurrent_sufficient_conditions on Line(G, K), Line(J, K), Line(F, K) we get concurrent(Line(F, K), Line(G, K), Line(J, K))
By concurrent_sufficient_conditions on Line(F, G), Line(A, F), Line(F, K) we get concurrent(Line(A, F), Line(F, G), Line(F, K))
By concurrent_sufficient_conditions on Line(A, G), Line(F, G), Line(G, K) we get concurrent(Line(A, G), Line(F, G), Line(G, K))
By concurrent_sufficient_conditions on Line(G, K), Line(A, G), Line(F, G) we get concurrent(Line(A, G), Line(F, G), Line(G, K))
By concurrent_sufficient_conditions on Line(G, L), Line(F, L), Line(J, L) we get concurrent(Line(F, L), Line(G, L), Line(J, L))
By concurrent_sufficient_conditions on Line(K, L), Line(F, L), Line(G, L) we get concurrent(Line(F, L), Line(G, L), Line(K, L))
By concurrent_sufficient_conditions on Line(F, L), Line(F, K), Line(F, G) we get concurrent(Line(F, G), Line(F, K), Line(F, L))
By concurrent_sufficient_conditions on Line(G, L), Line(F, L), Line(A, C) we get concurrent(Line(A, C), Line(F, L), Line(G, L))
By concurrent_sufficient_conditions on Line(G, L), Line(F, G), Line(C, G) we get concurrent(Line(C, G), Line(F, G), Line(G, L))
By concurrent_sufficient_conditions on Line(A, C), Line(K, L), Line(G, L) we get concurrent(Line(A, C), Line(G, L), Line(K, L))
By concurrent_sufficient_conditions on Line(G, L), Line(A, C), Line(J, L) we get concurrent(Line(A, C), Line(G, L), Line(J, L))
By concurrent_sufficient_conditions on Line(A, F), Line(F, G), Line(F, L) we get concurrent(Line(A, F), Line(F, G), Line(F, L))
By concurrent_sufficient_conditions on Line(J, K), Line(K, L), Line(F, K) we get concurrent(Line(F, K), Line(J, K), Line(K, L))
By concurrent_sufficient_conditions on Line(F, G), Line(F, K), Line(F, L) we get concurrent(Line(F, G), Line(F, K), Line(F, L))
By concurrent_sufficient_conditions on Line(F, L), Line(A, F), Line(F, K) we get concurrent(Line(A, F), Line(F, K), Line(F, L))
By concurrent_sufficient_conditions on Line(A, B), Line(F, K), Line(K, L) we get concurrent(Line(A, B), Line(F, K), Line(K, L))
By concurrent_sufficient_conditions on Line(F, L), Line(B, F), Line(F, G) we get concurrent(Line(B, F), Line(F, G), Line(F, L))
By concurrent_sufficient_conditions on Line(A, F), Line(F, K), Line(B, F) we get concurrent(Line(A, F), Line(B, F), Line(F, K))
By concurrent_sufficient_conditions on Line(A, C), Line(G, L), Line(J, L) we get concurrent(Line(A, C), Line(G, L), Line(J, L))
By concurrent_sufficient_conditions on Line(F, G), Line(F, L), Line(A, F) we get concurrent(Line(A, F), Line(F, G), Line(F, L))
By concurrent_sufficient_conditions on Line(G, K), Line(G, L), Line(C, G) we get concurrent(Line(C, G), Line(G, K), Line(G, L))
By concurrent_sufficient_conditions on Line(A, B), Line(G, K), Line(F, K) we get concurrent(Line(A, B), Line(F, K), Line(G, K))
By concurrent_sufficient_conditions on Line(A, F), Line(F, K), Line(F, L) we get concurrent(Line(A, F), Line(F, K), Line(F, L))
By concurrent_sufficient_conditions on Line(K, L), Line(A, C), Line(G, L) we get concurrent(Line(A, C), Line(G, L), Line(K, L))
By concurrent_sufficient_conditions on Line(A, B), Line(F, K), Line(J, K) we get concurrent(Line(A, B), Line(F, K), Line(J, K))
By concurrent_sufficient_conditions on Line(J, L), Line(G, L), Line(A, C) we get concurrent(Line(A, C), Line(G, L), Line(J, L))
By concurrent_sufficient_conditions on Line(F, G), Line(A, G), Line(C, G) we get concurrent(Line(A, G), Line(C, G), Line(F, G))
By concurrent_sufficient_conditions on Line(F, K), Line(J, K), Line(K, L) we get concurrent(Line(F, K), Line(J, K), Line(K, L))
By concurrent_sufficient_conditions on Line(G, L), Line(C, G), Line(A, G) we get concurrent(Line(A, G), Line(C, G), Line(G, L))
By concurrent_sufficient_conditions on Line(G, L), Line(C, G), Line(F, G) we get concurrent(Line(C, G), Line(F, G), Line(G, L))
By concurrent_sufficient_conditions on Line(F, K), Line(K, L), Line(A, B) we get concurrent(Line(A, B), Line(F, K), Line(K, L))
By concurrent_sufficient_conditions on Line(F, K), Line(F, G), Line(F, L) we get concurrent(Line(F, G), Line(F, K), Line(F, L))
By concurrent_sufficient_conditions on Line(G, K), Line(G, L), Line(A, G) we get concurrent(Line(A, G), Line(G, K), Line(G, L))
By concurrent_sufficient_conditions on Line(F, K), Line(J, K), Line(A, B) we get concurrent(Line(A, B), Line(F, K), Line(J, K))
By concurrent_sufficient_conditions on Line(F, G), Line(G, L), Line(A, G) we get concurrent(Line(A, G), Line(F, G), Line(G, L))
By concurrent_sufficient_conditions on Line(F, K), Line(A, B), Line(G, K) we get concurrent(Line(A, B), Line(F, K), Line(G, K))
By concurrent_sufficient_conditions on Line(A, C), Line(G, L), Line(F, L) we get concurrent(Line(A, C), Line(F, L), Line(G, L))
By concurrent_sufficient_conditions on Line(F, G), Line(B, F), Line(F, L) we get concurrent(Line(B, F), Line(F, G), Line(F, L))
By perpendicular_line_definition on line_intersection(Line(F, G), Line(J, M)), Line(J, M), Line(B, C) we get Line(J, M) == perpendicular_line(line_intersection(Line(F, G), Line(J, M)), Line(B, C))
By perpendicular_line_definition on line_intersection(Line(F, G), Line(J, M)), Line(J, M), Line(F, G) we get Line(J, M) == perpendicular_line(line_intersection(Line(F, G), Line(J, M)), Line(F, G))
By perpendicular_line_definition on line_intersection(Line(F, G), Line(J, M)), Line(F, G), Line(J, M) we get Line(F, G) == perpendicular_line(line_intersection(Line(F, G), Line(J, M)), Line(J, M))
By perpendicular_direction_conditions_v0_r on F, G, J, M we get 180 == 2 * direction(F, G) - 2 * direction(J, M) mod 360
By perpendicular_direction_conditions_v0_r on M, J, F, G we get 180 == 2 * direction(M, J) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on J, M, F, G we get 180 == 2 * direction(J, M) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on G, F, M, J we get 180 == 2 * direction(G, F) - 2 * direction(M, J) mod 360
By perpendicular_direction_conditions_v0_r on J, M, G, F we get 180 == 2 * direction(J, M) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on M, J, G, F we get 180 == 2 * direction(M, J) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on F, G, M, J we get 180 == 2 * direction(F, G) - 2 * direction(M, J) mod 360
By perpendicular_direction_conditions_v0_r on G, F, J, M we get 180 == 2 * direction(G, F) - 2 * direction(J, M) mod 360
By parallel_line_definition on B, Line(B, C), Line(F, G) we get Line(B, C) == parallel_line(B, Line(F, G))
By parallel_line_definition on midpoint(S, T), Line(B, C), Line(F, G) we get Line(B, C) == parallel_line(midpoint(S, T), Line(F, G))
By circle_radius_v0_r on J, Circle(B, J, K) we get radius(Circle(B, J, K)) == distance(J, center(Circle(B, J, K)))
By circle_radius_v0_r on J, Circle(C, J, L) we get radius(Circle(C, J, L)) == distance(J, center(Circle(C, J, L)))
By parallel_line_definition on M, Line(B, C), Line(F, G) we get Line(B, C) == parallel_line(M, Line(F, G))
By parallel_line_definition on F, Line(F, G), Line(B, C) we get Line(F, G) == parallel_line(F, Line(B, C))
By parallel_line_definition on S, Line(B, C), Line(F, G) we get Line(B, C) == parallel_line(S, Line(F, G))
By circle_radius_v0_r on L, Circle(A, J, K) we get radius(Circle(A, J, K)) == distance(L, center(Circle(A, J, K)))
By parallel_line_definition on C, Line(B, C), Line(F, G) we get Line(B, C) == parallel_line(C, Line(F, G))
By circle_radius_v0_r on K, Circle(B, J, K) we get radius(Circle(B, J, K)) == distance(K, center(Circle(B, J, K)))
By circle_radius_v0_r on C, Circle(C, J, L) we get radius(Circle(C, J, L)) == distance(C, center(Circle(C, J, L)))
By circle_radius_v0_r on A, Circle(A, J, K) we get radius(Circle(A, J, K)) == distance(A, center(Circle(A, J, K)))
By parallel_line_definition on line_intersection(Line(F, G), Line(J, M)), Line(F, G), Line(B, C) we get Line(F, G) == parallel_line(line_intersection(Line(F, G), Line(J, M)), Line(B, C))
By parallel_line_definition on G, Line(F, G), Line(B, C) we get Line(F, G) == parallel_line(G, Line(B, C))
By angle_to_center on B, M, K, Circle(B, J, K) we get 2 * angle(B, M, K) == angle(B, center(Circle(B, J, K)), K) mod 360
By parallel_line_definition on T, Line(B, C), Line(F, G) we get Line(B, C) == parallel_line(T, Line(F, G))
By circle_radius_v0_r on J, Circle(A, J, K) we get radius(Circle(A, J, K)) == distance(J, center(Circle(A, J, K)))
By circle_radius_v0_r on M, Circle(C, J, L) we get radius(Circle(C, J, L)) == distance(M, center(Circle(C, J, L)))
By circle_radius_v0_r on B, Circle(B, J, K) we get radius(Circle(B, J, K)) == distance(B, center(Circle(B, J, K)))
By circle_radius_v0_r on K, Circle(A, J, K) we get radius(Circle(A, J, K)) == distance(K, center(Circle(A, J, K)))
By circle_radius_v0_r on L, Circle(C, J, L) we get radius(Circle(C, J, L)) == distance(L, center(Circle(C, J, L)))
By circle_radius_v0_r on M, Circle(B, J, K) we get radius(Circle(B, J, K)) == distance(M, center(Circle(B, J, K)))
By angle_to_center on M, B, J, Circle(B, J, K) we get 2 * angle(M, B, J) == angle(M, center(Circle(B, J, K)), J) mod 360
By angle_to_center on K, B, M, Circle(B, J, K) we get 2 * angle(K, B, M) == angle(K, center(Circle(B, J, K)), M) mod 360
By angle_to_center on L, J, A, Circle(A, J, K) we get 2 * angle(L, J, A) == angle(L, center(Circle(A, J, K)), A) mod 360
By angle_to_center on A, K, J, Circle(A, J, K) we get 2 * angle(A, K, J) == angle(A, center(Circle(A, J, K)), J) mod 360
By angle_to_center on B, M, J, Circle(B, J, K) we get 2 * angle(B, M, J) == angle(B, center(Circle(B, J, K)), J) mod 360
By angle_to_center on J, K, A, Circle(A, J, K) we get 2 * angle(J, K, A) == angle(J, center(Circle(A, J, K)), A) mod 360
By angle_to_center on J, L, A, Circle(A, J, K) we get 2 * angle(J, L, A) == angle(J, center(Circle(A, J, K)), A) mod 360
By angle_to_center on K, M, B, Circle(B, J, K) we get 2 * angle(K, M, B) == angle(K, center(Circle(B, J, K)), B) mod 360
By angle_to_center on M, B, K, Circle(B, J, K) we get 2 * angle(M, B, K) == angle(M, center(Circle(B, J, K)), K) mod 360
By angle_to_center on J, B, M, Circle(B, J, K) we get 2 * angle(J, B, M) == angle(J, center(Circle(B, J, K)), M) mod 360
By angle_to_center on L, A, J, Circle(A, J, K) we get 2 * angle(L, A, J) == angle(L, center(Circle(A, J, K)), J) mod 360
By angle_to_center on M, J, C, Circle(C, J, L) we get 2 * angle(M, J, C) == angle(M, center(Circle(C, J, L)), C) mod 360
By angle_to_center on B, K, J, Circle(B, J, K) we get 2 * angle(B, K, J) == angle(B, center(Circle(B, J, K)), J) mod 360
By angle_to_center on C, L, J, Circle(C, J, L) we get 2 * angle(C, L, J) == angle(C, center(Circle(C, J, L)), J) mod 360
By angle_to_center on M, K, J, Circle(B, J, K) we get 2 * angle(M, K, J) == angle(M, center(Circle(B, J, K)), J) mod 360
By angle_to_center on L, C, M, Circle(C, J, L) we get 2 * angle(L, C, M) == angle(L, center(Circle(C, J, L)), M) mod 360
By angle_to_center on J, A, K, Circle(A, J, K) we get 2 * angle(J, A, K) == angle(J, center(Circle(A, J, K)), K) mod 360
By angle_to_center on M, K, B, Circle(B, J, K) we get 2 * angle(M, K, B) == angle(M, center(Circle(B, J, K)), B) mod 360
By angle_to_center on C, J, L, Circle(C, J, L) we get 2 * angle(C, J, L) == angle(C, center(Circle(C, J, L)), L) mod 360
By angle_to_center on B, J, M, Circle(B, J, K) we get 2 * angle(B, J, M) == angle(B, center(Circle(B, J, K)), M) mod 360
By angle_to_center on L, C, J, Circle(C, J, L) we get 2 * angle(L, C, J) == angle(L, center(Circle(C, J, L)), J) mod 360
By angle_to_center on A, L, J, Circle(A, J, K) we get 2 * angle(A, L, J) == angle(A, center(Circle(A, J, K)), J) mod 360
By angle_to_center on C, M, J, Circle(C, J, L) we get 2 * angle(C, M, J) == angle(C, center(Circle(C, J, L)), J) mod 360
By angle_to_center on J, M, B, Circle(B, J, K) we get 2 * angle(J, M, B) == angle(J, center(Circle(B, J, K)), B) mod 360
By angle_to_center on K, L, J, Circle(A, J, K) we get 2 * angle(K, L, J) == angle(K, center(Circle(A, J, K)), J) mod 360
By angle_to_center on J, C, L, Circle(C, J, L) we get 2 * angle(J, C, L) == angle(J, center(Circle(C, J, L)), L) mod 360
By angle_to_center on J, M, K, Circle(B, J, K) we get 2 * angle(J, M, K) == angle(J, center(Circle(B, J, K)), K) mod 360
By angle_to_center on J, M, L, Circle(C, J, L) we get 2 * angle(J, M, L) == angle(J, center(Circle(C, J, L)), L) mod 360
By angle_to_center on M, C, L, Circle(C, J, L) we get 2 * angle(M, C, L) == angle(M, center(Circle(C, J, L)), L) mod 360
By angle_to_center on K, J, A, Circle(A, J, K) we get 2 * angle(K, J, A) == angle(K, center(Circle(A, J, K)), A) mod 360
By angle_to_center on K, J, B, Circle(B, J, K) we get 2 * angle(K, J, B) == angle(K, center(Circle(B, J, K)), B) mod 360
By angle_to_center on K, J, L, Circle(A, J, K) we get 2 * angle(K, J, L) == angle(K, center(Circle(A, J, K)), L) mod 360
By angle_to_center on J, K, B, Circle(B, J, K) we get 2 * angle(J, K, B) == angle(J, center(Circle(B, J, K)), B) mod 360
By angle_to_center on J, B, K, Circle(B, J, K) we get 2 * angle(J, B, K) == angle(J, center(Circle(B, J, K)), K) mod 360
By angle_to_center on L, A, K, Circle(A, J, K) we get 2 * angle(L, A, K) == angle(L, center(Circle(A, J, K)), K) mod 360
By angle_to_center on K, L, A, Circle(A, J, K) we get 2 * angle(K, L, A) == angle(K, center(Circle(A, J, K)), A) mod 360
By angle_to_center on C, M, L, Circle(C, J, L) we get 2 * angle(C, M, L) == angle(C, center(Circle(C, J, L)), L) mod 360
By angle_to_center on L, M, J, Circle(C, J, L) we get 2 * angle(L, M, J) == angle(L, center(Circle(C, J, L)), J) mod 360
By angle_to_center on J, M, C, Circle(C, J, L) we get 2 * angle(J, M, C) == angle(J, center(Circle(C, J, L)), C) mod 360
By angle_to_center on L, J, K, Circle(A, J, K) we get 2 * angle(L, J, K) == angle(L, center(Circle(A, J, K)), K) mod 360
By angle_to_center on J, K, M, Circle(B, J, K) we get 2 * angle(J, K, M) == angle(J, center(Circle(B, J, K)), M) mod 360
By angle_to_center on J, L, K, Circle(A, J, K) we get 2 * angle(J, L, K) == angle(J, center(Circle(A, J, K)), K) mod 360
By angle_to_center on M, J, L, Circle(C, J, L) we get 2 * angle(M, J, L) == angle(M, center(Circle(C, J, L)), L) mod 360
By angle_to_center on K, A, J, Circle(A, J, K) we get 2 * angle(K, A, J) == angle(K, center(Circle(A, J, K)), J) mod 360
By angle_to_center on C, J, M, Circle(C, J, L) we get 2 * angle(C, J, M) == angle(C, center(Circle(C, J, L)), M) mod 360
By angle_to_center on J, A, L, Circle(A, J, K) we get 2 * angle(J, A, L) == angle(J, center(Circle(A, J, K)), L) mod 360
By angle_to_center on A, J, L, Circle(A, J, K) we get 2 * angle(A, J, L) == angle(A, center(Circle(A, J, K)), L) mod 360
By angle_to_center on L, K, A, Circle(A, J, K) we get 2 * angle(L, K, A) == angle(L, center(Circle(A, J, K)), A) mod 360
By angle_to_center on K, A, L, Circle(A, J, K) we get 2 * angle(K, A, L) == angle(K, center(Circle(A, J, K)), L) mod 360
By angle_to_center on K, M, J, Circle(B, J, K) we get 2 * angle(K, M, J) == angle(K, center(Circle(B, J, K)), J) mod 360
By angle_to_center on A, K, L, Circle(A, J, K) we get 2 * angle(A, K, L) == angle(A, center(Circle(A, J, K)), L) mod 360
By angle_to_center on C, L, M, Circle(C, J, L) we get 2 * angle(C, L, M) == angle(C, center(Circle(C, J, L)), M) mod 360
By angle_to_center on L, J, M, Circle(C, J, L) we get 2 * angle(L, J, M) == angle(L, center(Circle(C, J, L)), M) mod 360
By angle_to_center on B, K, M, Circle(B, J, K) we get 2 * angle(B, K, M) == angle(B, center(Circle(B, J, K)), M) mod 360
By angle_to_center on M, C, J, Circle(C, J, L) we get 2 * angle(M, C, J) == angle(M, center(Circle(C, J, L)), J) mod 360
By angle_to_center on M, L, C, Circle(C, J, L) we get 2 * angle(M, L, C) == angle(M, center(Circle(C, J, L)), C) mod 360
By angle_to_center on A, L, K, Circle(A, J, K) we get 2 * angle(A, L, K) == angle(A, center(Circle(A, J, K)), K) mod 360
By angle_to_center on L, J, C, Circle(C, J, L) we get 2 * angle(L, J, C) == angle(L, center(Circle(C, J, L)), C) mod 360
By angle_to_center on K, J, M, Circle(B, J, K) we get 2 * angle(K, J, M) == angle(K, center(Circle(B, J, K)), M) mod 360
By angle_to_center on M, L, J, Circle(C, J, L) we get 2 * angle(M, L, J) == angle(M, center(Circle(C, J, L)), J) mod 360
By angle_to_center on K, B, J, Circle(B, J, K) we get 2 * angle(K, B, J) == angle(K, center(Circle(B, J, K)), J) mod 360
By angle_to_center on J, C, M, Circle(C, J, L) we get 2 * angle(J, C, M) == angle(J, center(Circle(C, J, L)), M) mod 360
By angle_to_center on M, J, B, Circle(B, J, K) we get 2 * angle(M, J, B) == angle(M, center(Circle(B, J, K)), B) mod 360
By angle_to_center on J, L, C, Circle(C, J, L) we get 2 * angle(J, L, C) == angle(J, center(Circle(C, J, L)), C) mod 360
By angle_to_center on J, L, M, Circle(C, J, L) we get 2 * angle(J, L, M) == angle(J, center(Circle(C, J, L)), M) mod 360
By angle_to_center on L, K, J, Circle(A, J, K) we get 2 * angle(L, K, J) == angle(L, center(Circle(A, J, K)), J) mod 360
By angle_to_center on J, K, L, Circle(A, J, K) we get 2 * angle(J, K, L) == angle(J, center(Circle(A, J, K)), L) mod 360
By angle_to_center on M, J, K, Circle(B, J, K) we get 2 * angle(M, J, K) == angle(M, center(Circle(B, J, K)), K) mod 360
By angle_to_center on A, J, K, Circle(A, J, K) we get 2 * angle(A, J, K) == angle(A, center(Circle(A, J, K)), K) mod 360
By angle_to_center on L, M, C, Circle(C, J, L) we get 2 * angle(L, M, C) == angle(L, center(Circle(C, J, L)), C) mod 360
By angle_to_center on B, J, K, Circle(B, J, K) we get 2 * angle(B, J, K) == angle(B, center(Circle(B, J, K)), K) mod 360
By parallel_line_angles_reverse_v2 on F, G, T, S we get angle(F, G, T) == angle(S, T, G) + 180 mod 360
By parallel_line_angles_reverse_v1 on G, F, M, S we get angle(G, F, M) == angle(S, M, F) mod 360
By parallel_line_angles_reverse_v3 on G, F, M, C we get angle(G, F, M) == angle(C, M, F) + 180 mod 360
By parallel_line_angles_reverse_v2 on F, G, M, S we get angle(F, G, M) == angle(S, M, G) + 180 mod 360
By parallel_line_angles_reverse_v0 on T, M, G, F we get angle(F, G, M) == angle(T, M, G) mod 360
By parallel_line_angles_reverse_v3 on G, F, B, T we get angle(G, F, B) == angle(T, B, F) + 180 mod 360
By concyclic_definition_0 on L, K, J, G we get G in Circle(J, K, L)
By parallel_line_angles_reverse_v2 on F, G, T, B we get angle(F, G, T) == angle(B, T, G) + 180 mod 360
By concyclic_definition_0 on L, K, J, F we get F in Circle(J, K, L)
By in_imply_collinear on line_intersection(Line(F, G), Line(J, M)), G, F we get collinear(F, G, line_intersection(Line(F, G), Line(J, M)))
By parallel_line_angles_reverse_v3 on B, T, G, F we get angle(B, T, G) == angle(F, G, T) + 180 mod 360
By in_imply_collinear on line_intersection(Line(F, G), Line(J, M)), M, J we get collinear(J, M, line_intersection(Line(F, G), Line(J, M)))
By sas_anti_similarity on F, B, A, K, B, J we get anti_similar_triangles(A, B, F, J, B, K)
By parallel_line_angles_reverse_v3 on M, C, G, F we get angle(M, C, G) == angle(F, G, C) + 180 mod 360
By parallel_line_angles_reverse_v3 on G, F, B, M we get angle(G, F, B) == angle(M, B, F) + 180 mod 360
By concyclic_definition_0 on J, K, A, G we get G in Circle(A, J, K)
By parallel_line_angles_reverse_v3 on M, T, G, F we get angle(M, T, G) == angle(F, G, T) + 180 mod 360
By parallel_line_angles_reverse_v1 on B, M, F, G we get angle(B, M, F) == angle(G, F, M) mod 360
By parallel_line_angles_reverse_v3 on S, C, G, F we get angle(S, C, G) == angle(F, G, C) + 180 mod 360
By parallel_line_angles_reverse_v3 on G, F, S, M we get angle(G, F, S) == angle(M, S, F) + 180 mod 360
By parallel_line_angles_reverse_v1 on S, B, F, G we get angle(G, F, B) == angle(S, B, F) mod 360
By parallel_line_angles_reverse_v3 on G, F, B, C we get angle(G, F, B) == angle(C, B, F) + 180 mod 360
By parallel_line_angles_reverse_v3 on S, M, G, F we get angle(S, M, G) == angle(F, G, M) + 180 mod 360
By parallel_line_angles_reverse_v2 on F, G, C, B we get angle(F, G, C) == angle(B, C, G) + 180 mod 360
By concyclic_definition_0 on K, A, J, F we get F in Circle(A, J, K)
By sas_similarity on F, J, G, B, J, C we get similar_triangles(B, C, J, F, G, J)
By parallel_line_angles_reverse_v2 on M, S, F, G we get angle(M, S, F) == angle(G, F, S) + 180 mod 360
By aa_anti_similarity on L, midpoint(L, M), G, M, midpoint(L, M), G we get anti_similar_triangles(G, L, midpoint(L, M), G, M, midpoint(L, M))
By concyclic_definition_0 on A, J, L, G we get G in Circle(A, J, L)
By parallel_line_angles_reverse_v2 on T, B, F, G we get angle(T, B, F) == angle(G, F, B) + 180 mod 360
By parallel_line_angles_reverse_v2 on C, B, F, G we get angle(C, B, F) == angle(G, F, B) + 180 mod 360
By parallel_line_angles_reverse_v0 on C, M, G, F we get angle(C, M, G) == angle(F, G, M) mod 360
By parallel_line_angles_reverse_v2 on F, G, M, B we get angle(F, G, M) == angle(B, M, G) + 180 mod 360
By parallel_line_angles_reverse_v2 on C, M, F, G we get angle(C, M, F) == angle(G, F, M) + 180 mod 360
By parallel_line_angles_reverse_v0 on F, G, C, T we get angle(F, G, C) == angle(T, C, G) mod 360
By sas_similarity on C, J, B, G, J, F we get similar_triangles(B, C, J, F, G, J)
By sas_anti_similarity on L, M, K, G, M, F we get anti_similar_triangles(F, G, M, K, L, M)
By parallel_line_angles_reverse_v2 on F, G, C, S we get angle(F, G, C) == angle(S, C, G) + 180 mod 360
By parallel_line_angles_reverse_v3 on B, M, G, F we get angle(B, M, G) == angle(F, G, M) + 180 mod 360
By aa_anti_similarity on M, G, midpoint(L, M), L, G, midpoint(L, M) we get anti_similar_triangles(G, L, midpoint(L, M), G, M, midpoint(L, M))
By parallel_line_angles_reverse_v3 on G, F, S, T we get angle(G, F, S) == angle(T, S, F) + 180 mod 360
By parallel_line_angles_reverse_v2 on F, G, T, C we get angle(F, G, T) == angle(C, T, G) + 180 mod 360
By parallel_line_angles_reverse_v3 on S, T, G, F we get angle(S, T, G) == angle(F, G, T) + 180 mod 360
By parallel_line_angles_reverse_v3 on G, F, S, B we get angle(G, F, S) == angle(B, S, F) + 180 mod 360
By parallel_line_angles_reverse_v2 on F, G, C, M we get angle(F, G, C) == angle(M, C, G) + 180 mod 360
By concyclic_definition_0 on A, L, J, F we get F in Circle(A, J, L)
By reverse_direction on F, G we get 180 == direction(F, G) - direction(G, F) mod 360
By sas_similarity on L, K, M, A, K, F we get similar_triangles(A, F, K, L, M, K)
By sas_anti_similarity on K, B, J, F, B, A we get anti_similar_triangles(A, B, F, J, B, K)
By sas_similarity on A, L, G, K, L, M we get similar_triangles(A, G, L, K, M, L)
By sas_similarity on F, J, A, M, J, C we get similar_triangles(A, F, J, C, M, J)
By aa_anti_similarity on K, midpoint(K, M), F, M, midpoint(K, M), F we get anti_similar_triangles(F, K, midpoint(K, M), F, M, midpoint(K, M))
By parallel_line_angles_reverse_v2 on F, G, T, M we get angle(F, G, T) == angle(M, T, G) + 180 mod 360
By parallel_line_angles_reverse_v2 on T, S, F, G we get angle(T, S, F) == angle(G, F, S) + 180 mod 360
By reverse_direction on G, midpoint(K, M) we get 180 == direction(G, midpoint(K, M)) - direction(midpoint(K, M), G) mod 360
By parallel_line_angles_reverse_v3 on G, F, M, T we get angle(G, F, M) == angle(T, M, F) + 180 mod 360
By parallel_line_angles_reverse_v2 on T, M, F, G we get angle(T, M, F) == angle(G, F, M) + 180 mod 360
By sas_similarity on J, C, M, A, C, G we get similar_triangles(A, C, G, J, C, M)
By parallel_line_angles_reverse_v3 on G, F, S, C we get angle(G, F, S) == angle(C, S, F) + 180 mod 360
By sas_anti_similarity on B, J, K, A, J, G we get anti_similar_triangles(A, G, J, B, K, J)
By sas_anti_similarity on L, C, J, G, C, A we get anti_similar_triangles(A, C, G, J, C, L)
By parallel_line_angles_reverse_v3 on B, C, G, F we get angle(B, C, G) == angle(F, G, C) + 180 mod 360
By parallel_line_angles_reverse_v2 on B, S, F, G we get angle(B, S, F) == angle(G, F, S) + 180 mod 360
By reverse_direction on F, midpoint(L, M) we get 180 == direction(F, midpoint(L, M)) - direction(midpoint(L, M), F) mod 360
By sas_similarity on B, J, C, F, J, G we get similar_triangles(B, C, J, F, G, J)
By parallel_line_angles_reverse_v2 on C, S, F, G we get angle(C, S, F) == angle(G, F, S) + 180 mod 360
By sas_similarity on G, J, F, C, J, B we get similar_triangles(B, C, J, F, G, J)
By internal_angle_bisector_definition_v0 on L, midpoint(K, M), K, F we get angle(L, F, midpoint(K, M)) == angle(midpoint(K, M), F, K) mod 360
By sas_similarity on G, C, A, M, C, J we get similar_triangles(A, C, G, J, C, M)
By sas_anti_similarity on C, J, L, A, J, F we get anti_similar_triangles(A, F, J, C, L, J)
By sas_similarity on A, K, F, L, K, M we get similar_triangles(A, F, K, L, M, K)
By sas_similarity on M, J, C, F, J, A we get similar_triangles(A, F, J, C, M, J)
By parallel_line_angles_reverse_v3 on C, T, G, F we get angle(C, T, G) == angle(F, G, T) + 180 mod 360
By sas_anti_similarity on A, B, F, J, B, K we get anti_similar_triangles(A, B, F, J, B, K)
By sas_similarity on M, B, J, F, B, A we get similar_triangles(A, B, F, J, B, M)
By sas_anti_similarity on L, J, C, F, J, A we get anti_similar_triangles(A, F, J, C, L, J)
By aa_anti_similarity on M, F, midpoint(K, M), K, F, midpoint(K, M) we get anti_similar_triangles(F, K, midpoint(K, M), F, M, midpoint(K, M))
By sas_similarity on C, J, M, A, J, F we get similar_triangles(A, F, J, C, M, J)
By internal_angle_bisector_definition_v0 on L, midpoint(L, M), K, G we get angle(L, G, midpoint(L, M)) == angle(midpoint(L, M), G, K) mod 360
By reverse_direction on G, F we get 180 == direction(G, F) - direction(F, G) mod 360
By sas_similarity on M, C, J, G, C, A we get similar_triangles(A, C, G, J, C, M)
By sas_anti_similarity on K, M, L, F, M, G we get anti_similar_triangles(F, G, M, K, L, M)
By sas_anti_similarity on K, J, B, G, J, A we get anti_similar_triangles(A, G, J, B, K, J)
By sas_similarity on A, J, G, B, J, M we get similar_triangles(A, G, J, B, M, J)
By sas_anti_similarity on G, J, A, K, J, B we get anti_similar_triangles(A, G, J, B, K, J)
By internal_angle_bisector_definition_v0 on K, midpoint(K, M), L, F we get angle(K, F, midpoint(K, M)) == angle(midpoint(K, M), F, L) mod 360
By parallel_line_angles_reverse_v2 on M, B, F, G we get angle(M, B, F) == angle(G, F, B) + 180 mod 360
By sas_similarity on F, K, A, M, K, L we get similar_triangles(A, F, K, L, M, K)
By sas_anti_similarity on A, J, F, C, J, L we get anti_similar_triangles(A, F, J, C, L, J)
By sas_similarity on F, B, A, M, B, J we get similar_triangles(A, B, F, J, B, M)
By sas_anti_similarity on F, M, G, K, M, L we get anti_similar_triangles(F, G, M, K, L, M)
By reverse_direction on midpoint(K, M), G we get 180 == direction(midpoint(K, M), G) - direction(G, midpoint(K, M)) mod 360
By sas_anti_similarity on G, C, A, L, C, J we get anti_similar_triangles(A, C, G, J, C, L)
By sas_similarity on G, L, A, M, L, K we get similar_triangles(A, G, L, K, M, L)
By sas_anti_similarity on F, J, A, L, J, C we get anti_similar_triangles(A, F, J, C, L, J)
By sas_anti_similarity on A, C, G, J, C, L we get anti_similar_triangles(A, C, G, J, C, L)
By sas_similarity on B, J, M, A, J, G we get similar_triangles(A, G, J, B, M, J)
By aa_anti_similarity on M, midpoint(K, M), F, K, midpoint(K, M), F we get anti_similar_triangles(F, K, midpoint(K, M), F, M, midpoint(K, M))
By internal_angle_bisector_definition_v0 on K, midpoint(L, M), L, G we get angle(K, G, midpoint(L, M)) == angle(midpoint(L, M), G, L) mod 360
By aa_anti_similarity on K, F, midpoint(K, M), M, F, midpoint(K, M) we get anti_similar_triangles(F, K, midpoint(K, M), F, M, midpoint(K, M))
By sas_similarity on G, J, A, M, J, B we get similar_triangles(A, G, J, B, M, J)
By sas_similarity on A, J, F, C, J, M we get similar_triangles(A, F, J, C, M, J)
By sas_similarity on M, L, K, G, L, A we get similar_triangles(A, G, L, K, M, L)
By aa_anti_similarity on M, midpoint(L, M), G, L, midpoint(L, M), G we get anti_similar_triangles(G, L, midpoint(L, M), G, M, midpoint(L, M))
By sas_anti_similarity on A, J, G, B, J, K we get anti_similar_triangles(A, G, J, B, K, J)
By sas_anti_similarity on J, C, L, A, C, G we get anti_similar_triangles(A, C, G, J, C, L)
By sas_anti_similarity on G, M, F, L, M, K we get anti_similar_triangles(F, G, M, K, L, M)
By sas_similarity on J, B, M, A, B, F we get similar_triangles(A, B, F, J, B, M)
By sas_similarity on A, B, F, J, B, M we get similar_triangles(A, B, F, J, B, M)
By sas_anti_similarity on J, B, K, A, B, F we get anti_similar_triangles(A, B, F, J, B, K)
By sas_similarity on M, J, B, G, J, A we get similar_triangles(A, G, J, B, M, J)
By reverse_direction on midpoint(L, M), F we get 180 == direction(midpoint(L, M), F) - direction(F, midpoint(L, M)) mod 360
By aa_anti_similarity on L, G, midpoint(L, M), M, G, midpoint(L, M) we get anti_similar_triangles(G, L, midpoint(L, M), G, M, midpoint(L, M))
By sas_similarity on K, L, M, A, L, G we get similar_triangles(A, G, L, K, M, L)
By sas_similarity on M, K, L, F, K, A we get similar_triangles(A, F, K, L, M, K)
By sas_similarity on A, C, G, J, C, M we get similar_triangles(A, C, G, J, C, M)
By concyclic_definition_0 on L, F, J, G we get G in Circle(F, J, L)
By concyclic_definition_1 on L, K, J, F we get Circle(F, J, K) == Circle(J, K, L)
By concyclic_definition_1 on L, J, A, G we get Circle(A, G, J) == Circle(A, J, L)
By external_angle_bisector_definition_v0_r on G, J, G, midpoint(K, M) we get Line(J, midpoint(K, M)) == external_angle_bisector(G, midpoint(K, M), G)
By concyclic_definition_1 on A, J, K, G we get Circle(A, J, K) == Circle(G, J, K)
By concyclic_definition_0 on A, K, F, J we get J in Circle(A, F, K)
By concyclic_definition_1 on J, K, A, G we get Circle(A, G, K) == Circle(A, J, K)
By concyclic_definition_0 on J, A, G, L we get L in Circle(A, G, J)
By concyclic_definition_0 on L, J, F, A we get A in Circle(F, J, L)
By external_angle_bisector_definition_v0_r on G, B, G, midpoint(K, M) we get Line(B, midpoint(K, M)) == external_angle_bisector(G, midpoint(K, M), G)
By concyclic_definition_0 on L, F, G, J we get J in Circle(F, G, L)
By external_angle_bisector_definition_v0_r on F, G, F, midpoint(L, M) we get Line(G, midpoint(L, M)) == external_angle_bisector(F, midpoint(L, M), F)
By concyclic_definition_1 on G, J, A, K we get Circle(A, G, J) == Circle(A, J, K)
By concyclic_definition_0 on A, F, J, K we get K in Circle(A, F, J)
By concyclic_definition_0 on L, A, F, J we get J in Circle(A, F, L)
By concyclic_definition_1 on J, K, L, G we get Circle(G, K, L) == Circle(J, K, L)
By concyclic_definition_0 on J, G, K, L we get L in Circle(G, J, K)
By concyclic_definition_0 on K, G, F, J we get J in Circle(F, G, K)
By concyclic_definition_1 on F, L, A, J we get Circle(A, F, L) == Circle(A, J, L)
By concyclic_definition_0 on J, G, K, A we get A in Circle(G, J, K)
By concyclic_definition_0 on J, G, A, K we get K in Circle(A, G, J)
By concyclic_definition_0 on J, K, F, G we get G in Circle(F, J, K)
By external_angle_bisector_definition_v0_r on F, C, F, midpoint(L, M) we get Line(C, midpoint(L, M)) == external_angle_bisector(F, midpoint(L, M), F)
By concyclic_definition_0 on L, G, K, J we get J in Circle(G, K, L)
By concyclic_definition_1 on A, L, J, G we get Circle(A, J, L) == Circle(G, J, L)
By concyclic_definition_0 on A, L, G, J we get J in Circle(A, G, L)
By external_angle_bisector_definition_v0_r on L, F, M, midpoint(L, M) we get Line(F, midpoint(L, M)) == external_angle_bisector(L, midpoint(L, M), M)
By concyclic_definition_0 on F, K, J, L we get L in Circle(F, J, K)
By concyclic_definition_0 on K, L, F, J we get J in Circle(F, K, L)
By internal_angle_bisector_definition_v0_r on M, midpoint(L, M), L, F we get internal_angle_bisector(L, F, M) == Line(F, midpoint(L, M))
By concyclic_definition_1 on L, J, A, F we get Circle(A, F, J) == Circle(A, J, L)
By concyclic_definition_0 on J, F, L, K we get K in Circle(F, J, L)
By concyclic_definition_0 on K, J, F, A we get A in Circle(F, J, K)
By concyclic_definition_1 on G, J, L, K we get Circle(G, J, L) == Circle(J, K, L)
By concyclic_definition_0 on J, G, L, A we get A in Circle(G, J, L)
By concyclic_definition_0 on G, J, K, F we get F in Circle(G, J, K)
By concyclic_definition_1 on K, A, J, F we get Circle(A, F, J) == Circle(A, J, K)
By external_angle_bisector_definition_v0_r on F, J, F, midpoint(L, M) we get Line(J, midpoint(L, M)) == external_angle_bisector(F, midpoint(L, M), F)
By concyclic_definition_1 on F, K, L, J we get Circle(F, K, L) == Circle(J, K, L)
By external_angle_bisector_definition_v0_r on K, G, M, midpoint(K, M) we get Line(G, midpoint(K, M)) == external_angle_bisector(K, midpoint(K, M), M)
By concyclic_definition_0 on K, A, G, J we get J in Circle(A, G, K)
By internal_angle_bisector_definition_v0_r on F, M, F, midpoint(L, M) we get Line(M, midpoint(L, M)) == internal_angle_bisector(F, midpoint(L, M), F)
By concyclic_definition_0 on F, J, G, L we get L in Circle(F, G, J)
By external_angle_bisector_definition_v0_r on G, F, G, midpoint(K, M) we get Line(F, midpoint(K, M)) == external_angle_bisector(G, midpoint(K, M), G)
By concyclic_definition_1 on A, L, J, F we get Circle(A, J, L) == Circle(F, J, L)
By internal_angle_bisector_definition_v0_r on midpoint(L, M), L, midpoint(L, M), F we get Line(F, L) == internal_angle_bisector(midpoint(L, M), F, midpoint(L, M))
By internal_angle_bisector_definition_v0_r on midpoint(L, M), M, midpoint(L, M), F we get Line(F, M) == internal_angle_bisector(midpoint(L, M), F, midpoint(L, M))
By internal_angle_bisector_definition_v0_r on G, M, G, midpoint(K, M) we get Line(M, midpoint(K, M)) == internal_angle_bisector(G, midpoint(K, M), G)
By concyclic_definition_0 on G, J, L, K we get K in Circle(G, J, L)
By concyclic_definition_0 on L, J, G, F we get F in Circle(G, J, L)
By concyclic_definition_1 on A, J, K, F we get Circle(A, J, K) == Circle(F, J, K)
By concyclic_definition_1 on G, J, K, L we get Circle(G, J, K) == Circle(J, K, L)
By concyclic_definition_1 on F, K, A, J we get Circle(A, F, K) == Circle(A, J, K)
By concyclic_definition_0 on J, F, G, K we get K in Circle(F, G, J)
By concyclic_definition_1 on K, J, L, F we get Circle(F, J, L) == Circle(J, K, L)
By concyclic_definition_0 on A, F, J, L we get L in Circle(A, F, J)
By internal_angle_bisector_definition_v0_r on midpoint(K, M), M, midpoint(K, M), G we get Line(G, M) == internal_angle_bisector(midpoint(K, M), G, midpoint(K, M))
By concyclic_definition_1 on G, L, A, J we get Circle(A, G, L) == Circle(A, J, L)
By internal_angle_bisector_definition_v0_r on K, midpoint(K, M), M, G we get internal_angle_bisector(K, G, M) == Line(G, midpoint(K, M))
By internal_angle_bisector_definition_v0_r on F, L, F, midpoint(L, M) we get Line(L, midpoint(L, M)) == internal_angle_bisector(F, midpoint(L, M), F)
By internal_angle_bisector_definition_v0_r on midpoint(K, M), K, midpoint(K, M), G we get Line(G, K) == internal_angle_bisector(midpoint(K, M), G, midpoint(K, M))
By internal_angle_bisector_definition_v0_r on G, K, G, midpoint(K, M) we get Line(K, midpoint(K, M)) == internal_angle_bisector(G, midpoint(K, M), G)
By concyclic_definition_1 on F, G, K, J we get Circle(F, G, K) == Circle(G, J, K)
By altitude_definition on line_intersection(Line(F, G), Line(J, M)), C, M, Line(J, M) we get Line(J, M) == altitude(line_intersection(Line(F, G), Line(J, M)), C, M)
By concyclic_definition_1 on K, J, G, F we get Circle(F, G, J) == Circle(G, J, K)
By concyclic_definition_1 on A, K, G, J we get Circle(A, G, K) == Circle(G, J, K)
By concyclic_definition_1 on A, G, J, K we get Circle(A, G, J) == Circle(G, J, K)
By concyclic_definition_1 on G, K, J, F we get Circle(F, J, K) == Circle(G, J, K)
By concyclic_definition_1 on A, L, G, J we get Circle(A, G, L) == Circle(G, J, L)
By concyclic_definition_1 on J, F, L, K we get Circle(F, J, L) == Circle(F, K, L)
By concyclic_definition_1 on K, A, G, J we get Circle(A, G, J) == Circle(A, G, K)
By altitude_definition on line_intersection(Line(F, G), Line(J, M)), B, M, Line(J, M) we get Line(J, M) == altitude(line_intersection(Line(F, G), Line(J, M)), B, M)
By concyclic_definition_1 on J, K, F, L we get Circle(F, J, K) == Circle(F, K, L)
By concyclic_definition_1 on J, A, F, L we get Circle(A, F, J) == Circle(A, F, L)
By concyclic_definition_1 on K, F, J, A we get Circle(A, F, J) == Circle(F, J, K)
By concyclic_definition_1 on A, F, K, J we get Circle(A, F, K) == Circle(F, J, K)
By concyclic_definition_1 on J, K, G, L we get Circle(G, J, K) == Circle(G, K, L)
By altitude_definition on line_intersection(Line(F, G), Line(J, M)), M, T, Line(J, M) we get Line(J, M) == altitude(line_intersection(Line(F, G), Line(J, M)), M, T)
By altitude_definition on line_intersection(Line(F, G), Line(J, M)), T, midpoint(S, T), Line(J, M) we get Line(J, M) == altitude(line_intersection(Line(F, G), Line(J, M)), T, midpoint(S, T))
By altitude_definition on line_intersection(Line(F, G), Line(J, M)), midpoint(S, T), B, Line(J, M) we get Line(J, M) == altitude(line_intersection(Line(F, G), Line(J, M)), B, midpoint(S, T))
By concyclic_definition_1 on J, G, F, L we get Circle(F, G, J) == Circle(F, G, L)
By concyclic_definition_1 on L, F, J, K we get Circle(F, J, K) == Circle(F, J, L)
By concyclic_definition_1 on J, L, G, F we get Circle(F, G, L) == Circle(G, J, L)
By concyclic_definition_1 on K, F, A, J we get Circle(A, F, J) == Circle(A, F, K)
By concyclic_definition_1 on G, F, J, L we get Circle(F, G, J) == Circle(F, J, L)
By concyclic_definition_1 on L, G, J, A we get Circle(A, G, J) == Circle(G, J, L)
By concyclic_definition_1 on L, G, J, K we get Circle(G, J, K) == Circle(G, J, L)
By concyclic_definition_1 on K, F, J, G we get Circle(F, G, J) == Circle(F, J, K)
By altitude_definition on line_intersection(Line(F, G), Line(J, M)), B, S, Line(J, M) we get Line(J, M) == altitude(line_intersection(Line(F, G), Line(J, M)), B, S)
By concyclic_definition_1 on G, L, F, J we get Circle(F, G, L) == Circle(F, J, L)
By altitude_definition on line_intersection(Line(F, G), Line(J, M)), midpoint(S, T), S, Line(J, M) we get Line(J, M) == altitude(line_intersection(Line(F, G), Line(J, M)), S, midpoint(S, T))
By concyclic_definition_1 on L, F, J, A we get Circle(A, F, J) == Circle(F, J, L)
By concyclic_definition_1 on G, L, J, F we get Circle(F, J, L) == Circle(G, J, L)
By concyclic_definition_1 on J, L, G, K we get Circle(G, J, L) == Circle(G, K, L)
By altitude_definition on line_intersection(Line(F, G), Line(J, M)), C, T, Line(J, M) we get Line(J, M) == altitude(line_intersection(Line(F, G), Line(J, M)), C, T)
By concyclic_definition_1 on L, G, J, F we get Circle(F, G, J) == Circle(G, J, L)
By concyclic_definition_1 on K, G, F, J we get Circle(F, G, J) == Circle(F, G, K)
By concyclic_definition_1 on J, A, G, L we get Circle(A, G, J) == Circle(A, G, L)
By altitude_definition on line_intersection(Line(F, G), Line(J, M)), C, midpoint(S, T), Line(J, M) we get Line(J, M) == altitude(line_intersection(Line(F, G), Line(J, M)), C, midpoint(S, T))
By altitude_definition on line_intersection(Line(F, G), Line(J, M)), S, C, Line(J, M) we get Line(J, M) == altitude(line_intersection(Line(F, G), Line(J, M)), C, S)
By concyclic_definition_1 on G, K, F, J we get Circle(F, G, K) == Circle(F, J, K)
By concyclic_definition_1 on A, F, L, J we get Circle(A, F, L) == Circle(F, J, L)
By altitude_definition on line_intersection(Line(F, G), Line(J, M)), M, S, Line(J, M) we get Line(J, M) == altitude(line_intersection(Line(F, G), Line(J, M)), M, S)
By altitude_definition on line_intersection(Line(F, G), Line(J, M)), S, T, Line(J, M) we get Line(J, M) == altitude(line_intersection(Line(F, G), Line(J, M)), S, T)
By altitude_definition on line_intersection(Line(F, G), Line(J, M)), T, B, Line(J, M) we get Line(J, M) == altitude(line_intersection(Line(F, G), Line(J, M)), B, T)
By radical_axis_definition_v0 on line_intersection(Line(F, G), Line(J, M)), Circle(B, J, K), Circle(C, J, L) we get power_of_a_point(line_intersection(Line(F, G), Line(J, M)), Circle(B, J, K)) == power_of_a_point(line_intersection(Line(F, G), Line(J, M)), Circle(C, J, L))
By altitude_definition on line_intersection(Line(F, G), Line(J, M)), B, C, Line(J, M) we get Line(J, M) == altitude(line_intersection(Line(F, G), Line(J, M)), B, C)
By concyclic_sufficient_conditions_v1 on F, A, G, L we get concyclic(A, F, G, L)
By concyclic_sufficient_conditions_v0 on J, A, S, C we get concyclic(A, C, J, S)
By concyclic_sufficient_conditions_v1 on G, J, F, A we get concyclic(A, F, G, J)
By concyclic_sufficient_conditions_v0 on S, A, K, M we get concyclic(A, K, M, S)
By concyclic_sufficient_conditions_v0 on K, G, F, A we get concyclic(A, F, G, K)
By concyclic_sufficient_conditions_v0 on T, A, J, B we get concyclic(A, B, J, T)
By concyclic_sufficient_conditions_v0 on F, S, M, J we get concyclic(F, J, M, S)
By concyclic_sufficient_conditions_v0 on T, G, J, M we get concyclic(G, J, M, T)
By radical_axis_is_perpendicular_to_center_line on Line(K, L), Circle(K, L, M), Circle(A, F, J) we get perpendicular(Line(K, L), Line(center(Circle(A, F, J)), center(Circle(K, L, M))))
By concyclic_sufficient_conditions_v0 on T, M, L, A we get concyclic(A, L, M, T)
By radical_axis_is_perpendicular_to_center_line on Line(G, K), Circle(K, L, M), Circle(B, J, K) we get perpendicular(Line(G, K), Line(center(Circle(B, J, K)), center(Circle(K, L, M))))
By radical_axis_is_perpendicular_to_center_line on Line(F, L), Circle(C, J, L), Circle(K, L, M) we get perpendicular(Line(F, L), Line(center(Circle(C, J, L)), center(Circle(K, L, M))))
By chords_on_equal_angles_v0 on K, L, F, A, J, G, Circle(A, F, J) we get distance(A, G) == distance(F, K)
By chords_on_equal_angles_v0 on F, L, G, K, J, A, Circle(A, F, J) we get distance(A, K) == distance(F, G)
By chords_on_equal_angles_v0 on A, K, L, F, L, G, Circle(A, F, J) we get distance(A, L) == distance(F, G)
By angles_on_chord_v1 on F, L, K, J, Circle(A, F, J) we get angle(F, J, L) == angle(F, K, L) mod 360
By angles_on_chord_v2 on L, F, K, G, Circle(A, F, J) we get angle(L, K, F) == angle(L, G, F) + 180 mod 360
By angles_on_chord_v1 on L, F, G, A, Circle(A, F, J) we get angle(L, A, F) == angle(L, G, F) mod 360
By chords_on_equal_angles_v0 on F, K, A, G, K, L, Circle(A, F, J) we get distance(A, F) == distance(G, L)
By angles_on_chord_v2 on K, G, A, L, Circle(A, F, J) we get angle(K, A, G) == angle(K, L, G) + 180 mod 360
By angles_on_chord_v2 on K, G, F, J, Circle(A, F, J) we get angle(K, F, G) == angle(K, J, G) + 180 mod 360
By angles_on_chord_v3 on L, F, A, K, Circle(A, F, J) we get angle(L, A, F) == angle(L, K, F) + 180 mod 360
By angles_on_chord_v3 on G, K, A, L, Circle(A, F, J) we get angle(G, A, K) == angle(G, L, K) + 180 mod 360
By angles_on_chord_v3 on K, G, L, A, Circle(A, F, J) we get angle(K, L, G) == angle(K, A, G) + 180 mod 360
By angles_on_chord_v3 on K, G, L, F, Circle(A, F, J) we get angle(K, L, G) == angle(K, F, G) + 180 mod 360
By angles_on_chord_v2 on G, K, L, A, Circle(A, F, J) we get angle(G, L, K) == angle(G, A, K) + 180 mod 360
By angles_on_chord_v2 on K, G, F, L, Circle(A, F, J) we get angle(K, F, G) == angle(K, L, G) + 180 mod 360
By angles_on_chord_v2 on F, L, A, K, Circle(A, F, J) we get angle(F, A, L) == angle(F, K, L) + 180 mod 360
By angles_on_chord_v1 on G, K, A, F, Circle(A, F, J) we get angle(G, A, K) == angle(G, F, K) mod 360
By angles_on_chord_v0 on G, K, L, J, Circle(A, F, J) we get angle(G, J, K) == angle(G, L, K) mod 360
By angles_on_chord_v3 on L, F, G, K, Circle(A, F, J) we get angle(L, G, F) == angle(L, K, F) + 180 mod 360
By angles_on_chord_v1 on K, G, J, L, Circle(A, F, J) we get angle(K, J, G) == angle(K, L, G) mod 360
By angles_on_chord_v0 on K, G, A, F, Circle(A, F, J) we get angle(K, A, G) == angle(K, F, G) mod 360
By angles_on_chord_v3 on G, K, F, L, Circle(A, F, J) we get angle(G, F, K) == angle(G, L, K) + 180 mod 360
By angles_on_chord_v2 on G, K, J, F, Circle(A, F, J) we get angle(G, J, K) == angle(G, F, K) + 180 mod 360
By angles_on_chord_v2 on G, K, L, F, Circle(A, F, J) we get angle(G, L, K) == angle(G, F, K) + 180 mod 360
By angles_on_chord_v3 on L, F, G, J, Circle(A, F, J) we get angle(L, G, F) == angle(L, J, F) + 180 mod 360
By angles_on_chord_v3 on F, L, K, G, Circle(A, F, J) we get angle(F, K, L) == angle(F, G, L) + 180 mod 360
By angles_on_chord_v0 on F, L, G, A, Circle(A, F, J) we get angle(F, A, L) == angle(F, G, L) mod 360
By angles_on_chord_v3 on F, L, K, A, Circle(A, F, J) we get angle(F, K, L) == angle(F, A, L) + 180 mod 360
By angles_on_chord_v2 on L, F, J, G, Circle(A, F, J) we get angle(L, J, F) == angle(L, G, F) + 180 mod 360
By angles_on_chord_v3 on F, L, J, G, Circle(A, F, J) we get angle(F, J, L) == angle(F, G, L) + 180 mod 360
By angles_on_chord_v3 on K, G, J, F, Circle(A, F, J) we get angle(K, J, G) == angle(K, F, G) + 180 mod 360
By angles_on_chord_v3 on G, K, F, J, Circle(A, F, J) we get angle(G, F, K) == angle(G, J, K) + 180 mod 360
By angles_on_chord_v0 on L, F, J, K, Circle(A, F, J) we get angle(L, J, F) == angle(L, K, F) mod 360
By angles_on_chord_v2 on F, L, G, K, Circle(A, F, J) we get angle(F, G, L) == angle(F, K, L) + 180 mod 360
By angles_on_chord_v2 on F, L, G, J, Circle(A, F, J) we get angle(F, G, L) == angle(F, J, L) + 180 mod 360
By angles_on_chord_v2 on L, F, K, A, Circle(A, F, J) we get angle(L, K, F) == angle(L, A, F) + 180 mod 360
By line_intersection_definition on C, Line(C, center(Circle(C, J, L))), Line(A, C) we get C == line_intersection(Line(A, C), Line(C, center(Circle(C, J, L))))
By line_intersection_definition on A, Line(A, F), Line(A, center(Circle(A, F, J))) we get A == line_intersection(Line(A, F), Line(A, center(Circle(A, F, J))))
By line_intersection_definition on L, Line(L, center(Circle(C, J, L))), Line(K, L) we get L == line_intersection(Line(K, L), Line(L, center(Circle(C, J, L))))
By line_intersection_definition on center(Circle(B, J, K)), Line(K, center(Circle(B, J, K))), Line(J, center(Circle(B, J, K))) we get center(Circle(B, J, K)) == line_intersection(Line(J, center(Circle(B, J, K))), Line(K, center(Circle(B, J, K))))
By line_intersection_definition on J, Line(J, L), Line(J, center(Circle(C, J, L))) we get J == line_intersection(Line(J, L), Line(J, center(Circle(C, J, L))))
By line_intersection_definition on B, Line(B, center(Circle(B, J, K))), Line(A, B) we get B == line_intersection(Line(A, B), Line(B, center(Circle(B, J, K))))
By line_intersection_definition on B, Line(B, center(Circle(B, J, K))), Line(B, C) we get B == line_intersection(Line(B, C), Line(B, center(Circle(B, J, K))))
By line_intersection_definition on J, Line(J, center(Circle(C, J, L))), Line(J, M) we get J == line_intersection(Line(J, M), Line(J, center(Circle(C, J, L))))
By line_intersection_definition on center(Circle(B, J, K)), Line(M, center(Circle(B, J, K))), Line(K, center(Circle(B, J, K))) we get center(Circle(B, J, K)) == line_intersection(Line(K, center(Circle(B, J, K))), Line(M, center(Circle(B, J, K))))
By line_intersection_definition on A, Line(A, G), Line(A, center(Circle(A, F, J))) we get A == line_intersection(Line(A, G), Line(A, center(Circle(A, F, J))))
By line_intersection_definition on L, Line(L, center(Circle(A, F, J))), Line(G, L) we get L == line_intersection(Line(G, L), Line(L, center(Circle(A, F, J))))
By line_intersection_definition on center(Circle(A, F, J)), Line(L, center(Circle(A, F, J))), Line(A, center(Circle(A, F, J))) we get center(Circle(A, F, J)) == line_intersection(Line(A, center(Circle(A, F, J))), Line(L, center(Circle(A, F, J))))
By line_intersection_definition on J, Line(J, center(Circle(B, J, K))), Line(A, J) we get J == line_intersection(Line(A, J), Line(J, center(Circle(B, J, K))))
By line_intersection_definition on K, Line(G, K), Line(K, center(Circle(A, F, J))) we get K == line_intersection(Line(G, K), Line(K, center(Circle(A, F, J))))
By line_intersection_definition on center(Circle(A, F, J)), Line(J, center(Circle(A, F, J))), Line(L, center(Circle(A, F, J))) we get center(Circle(A, F, J)) == line_intersection(Line(J, center(Circle(A, F, J))), Line(L, center(Circle(A, F, J))))
By line_intersection_definition on K, Line(K, L), Line(K, center(Circle(A, F, J))) we get K == line_intersection(Line(K, L), Line(K, center(Circle(A, F, J))))
By line_intersection_definition on K, Line(A, B), Line(K, center(Circle(B, J, K))) we get K == line_intersection(Line(A, B), Line(K, center(Circle(B, J, K))))
By line_intersection_definition on M, Line(J, M), Line(M, center(Circle(B, J, K))) we get M == line_intersection(Line(J, M), Line(M, center(Circle(B, J, K))))
By line_intersection_definition on M, Line(J, M), Line(M, center(Circle(C, J, L))) we get M == line_intersection(Line(J, M), Line(M, center(Circle(C, J, L))))
By line_intersection_definition on center(Circle(A, F, J)), Line(L, center(Circle(A, F, J))), Line(K, center(Circle(A, F, J))) we get center(Circle(A, F, J)) == line_intersection(Line(K, center(Circle(A, F, J))), Line(L, center(Circle(A, F, J))))
By line_intersection_definition on J, Line(J, center(Circle(A, F, J))), Line(J, K) we get J == line_intersection(Line(J, K), Line(J, center(Circle(A, F, J))))
By line_intersection_definition on J, Line(J, center(Circle(B, J, K))), Line(J, center(Circle(C, J, L))) we get J == line_intersection(Line(J, center(Circle(B, J, K))), Line(J, center(Circle(C, J, L))))
By line_intersection_definition on M, Line(M, center(Circle(B, J, K))), Line(B, C) we get M == line_intersection(Line(B, C), Line(M, center(Circle(B, J, K))))
By line_intersection_definition on L, Line(L, center(Circle(C, J, L))), Line(A, C) we get L == line_intersection(Line(A, C), Line(L, center(Circle(C, J, L))))
By line_intersection_definition on center(Circle(C, J, L)), Line(C, center(Circle(C, J, L))), Line(L, center(Circle(C, J, L))) we get center(Circle(C, J, L)) == line_intersection(Line(C, center(Circle(C, J, L))), Line(L, center(Circle(C, J, L))))
By line_intersection_definition on center(Circle(C, J, L)), Line(J, center(Circle(C, J, L))), Line(L, center(Circle(C, J, L))) we get center(Circle(C, J, L)) == line_intersection(Line(J, center(Circle(C, J, L))), Line(L, center(Circle(C, J, L))))
By line_intersection_definition on J, Line(J, center(Circle(B, J, K))), Line(J, center(Circle(A, F, J))) we get J == line_intersection(Line(J, center(Circle(A, F, J))), Line(J, center(Circle(B, J, K))))
By line_intersection_definition on K, Line(J, K), Line(K, center(Circle(B, J, K))) we get K == line_intersection(Line(J, K), Line(K, center(Circle(B, J, K))))
By line_intersection_definition on L, Line(G, L), Line(L, center(Circle(C, J, L))) we get L == line_intersection(Line(G, L), Line(L, center(Circle(C, J, L))))
By line_intersection_definition on C, Line(B, C), Line(C, center(Circle(C, J, L))) we get C == line_intersection(Line(B, C), Line(C, center(Circle(C, J, L))))
By line_intersection_definition on L, Line(L, center(Circle(A, F, J))), Line(K, L) we get L == line_intersection(Line(K, L), Line(L, center(Circle(A, F, J))))
By line_intersection_definition on L, Line(F, L), Line(L, center(Circle(C, J, L))) we get L == line_intersection(Line(F, L), Line(L, center(Circle(C, J, L))))
By line_intersection_definition on K, Line(K, center(Circle(A, F, J))), Line(K, center(Circle(B, J, K))) we get K == line_intersection(Line(K, center(Circle(A, F, J))), Line(K, center(Circle(B, J, K))))
By line_intersection_definition on M, Line(F, L), Line(M, center(Circle(C, J, L))) we get M == line_intersection(Line(F, L), Line(M, center(Circle(C, J, L))))
By line_intersection_definition on center(Circle(B, J, K)), Line(M, center(Circle(B, J, K))), Line(J, center(Circle(B, J, K))) we get center(Circle(B, J, K)) == line_intersection(Line(J, center(Circle(B, J, K))), Line(M, center(Circle(B, J, K))))
By line_intersection_definition on M, Line(M, center(Circle(B, J, K))), Line(F, L) we get M == line_intersection(Line(F, L), Line(M, center(Circle(B, J, K))))
By line_intersection_definition on center(Circle(B, J, K)), Line(B, center(Circle(B, J, K))), Line(K, center(Circle(B, J, K))) we get center(Circle(B, J, K)) == line_intersection(Line(B, center(Circle(B, J, K))), Line(K, center(Circle(B, J, K))))
By line_intersection_definition on L, Line(J, L), Line(L, center(Circle(A, F, J))) we get L == line_intersection(Line(J, L), Line(L, center(Circle(A, F, J))))
By line_intersection_definition on center(Circle(A, F, J)), Line(J, center(Circle(A, F, J))), Line(K, center(Circle(A, F, J))) we get center(Circle(A, F, J)) == line_intersection(Line(J, center(Circle(A, F, J))), Line(K, center(Circle(A, F, J))))
By circle_definition on F, G, A, Circle(A, F, J) we get Circle(A, F, G) == Circle(A, F, J)
By line_intersection_definition on K, Line(A, B), Line(K, center(Circle(A, F, J))) we get K == line_intersection(Line(A, B), Line(K, center(Circle(A, F, J))))
By line_intersection_definition on A, Line(A, B), Line(A, center(Circle(A, F, J))) we get A == line_intersection(Line(A, B), Line(A, center(Circle(A, F, J))))
By line_intersection_definition on L, Line(L, center(Circle(C, J, L))), Line(L, center(Circle(A, F, J))) we get L == line_intersection(Line(L, center(Circle(A, F, J))), Line(L, center(Circle(C, J, L))))
By line_intersection_definition on center(Circle(C, J, L)), Line(M, center(Circle(C, J, L))), Line(C, center(Circle(C, J, L))) we get center(Circle(C, J, L)) == line_intersection(Line(C, center(Circle(C, J, L))), Line(M, center(Circle(C, J, L))))
By line_intersection_definition on K, Line(K, center(Circle(B, J, K))), Line(K, L) we get K == line_intersection(Line(K, L), Line(K, center(Circle(B, J, K))))
By line_intersection_definition on J, Line(J, center(Circle(A, F, J))), Line(J, L) we get J == line_intersection(Line(J, L), Line(J, center(Circle(A, F, J))))
By line_intersection_definition on M, Line(M, center(Circle(B, J, K))), Line(G, K) we get M == line_intersection(Line(G, K), Line(M, center(Circle(B, J, K))))
By line_intersection_definition on M, Line(M, center(Circle(C, J, L))), Line(G, K) we get M == line_intersection(Line(G, K), Line(M, center(Circle(C, J, L))))
By line_intersection_definition on A, Line(A, center(Circle(A, F, J))), Line(A, C) we get A == line_intersection(Line(A, C), Line(A, center(Circle(A, F, J))))
By line_intersection_definition on L, Line(F, L), Line(L, center(Circle(A, F, J))) we get L == line_intersection(Line(F, L), Line(L, center(Circle(A, F, J))))
By line_intersection_definition on J, Line(C, G), Line(J, center(Circle(A, F, J))) we get J == line_intersection(Line(C, G), Line(J, center(Circle(A, F, J))))
By line_intersection_definition on J, Line(J, center(Circle(B, J, K))), Line(J, M) we get J == line_intersection(Line(J, M), Line(J, center(Circle(B, J, K))))
By line_intersection_definition on center(Circle(C, J, L)), Line(M, center(Circle(C, J, L))), Line(J, center(Circle(C, J, L))) we get center(Circle(C, J, L)) == line_intersection(Line(J, center(Circle(C, J, L))), Line(M, center(Circle(C, J, L))))
By line_intersection_definition on K, Line(F, K), Line(K, center(Circle(A, F, J))) we get K == line_intersection(Line(F, K), Line(K, center(Circle(A, F, J))))
By line_intersection_definition on J, Line(B, F), Line(J, center(Circle(A, F, J))) we get J == line_intersection(Line(B, F), Line(J, center(Circle(A, F, J))))
By line_intersection_definition on J, Line(J, L), Line(J, center(Circle(B, J, K))) we get J == line_intersection(Line(J, L), Line(J, center(Circle(B, J, K))))
By line_intersection_definition on J, Line(J, center(Circle(C, J, L))), Line(B, F) we get J == line_intersection(Line(B, F), Line(J, center(Circle(C, J, L))))
By line_intersection_definition on K, Line(K, center(Circle(B, J, K))), Line(G, K) we get K == line_intersection(Line(G, K), Line(K, center(Circle(B, J, K))))
By line_intersection_definition on center(Circle(A, F, J)), Line(K, center(Circle(A, F, J))), Line(A, center(Circle(A, F, J))) we get center(Circle(A, F, J)) == line_intersection(Line(A, center(Circle(A, F, J))), Line(K, center(Circle(A, F, J))))
By line_intersection_definition on K, Line(F, K), Line(K, center(Circle(B, J, K))) we get K == line_intersection(Line(F, K), Line(K, center(Circle(B, J, K))))
By line_intersection_definition on K, Line(K, center(Circle(A, F, J))), Line(J, K) we get K == line_intersection(Line(J, K), Line(K, center(Circle(A, F, J))))
By line_intersection_definition on M, Line(M, center(Circle(C, J, L))), Line(M, center(Circle(B, J, K))) we get M == line_intersection(Line(M, center(Circle(B, J, K))), Line(M, center(Circle(C, J, L))))
By line_intersection_definition on center(Circle(C, J, L)), Line(L, center(Circle(C, J, L))), Line(M, center(Circle(C, J, L))) we get center(Circle(C, J, L)) == line_intersection(Line(L, center(Circle(C, J, L))), Line(M, center(Circle(C, J, L))))
By line_intersection_definition on J, Line(J, center(Circle(C, J, L))), Line(A, J) we get J == line_intersection(Line(A, J), Line(J, center(Circle(C, J, L))))
By line_intersection_definition on L, Line(J, L), Line(L, center(Circle(C, J, L))) we get L == line_intersection(Line(J, L), Line(L, center(Circle(C, J, L))))
By line_intersection_definition on J, Line(J, center(Circle(C, J, L))), Line(J, center(Circle(A, F, J))) we get J == line_intersection(Line(J, center(Circle(A, F, J))), Line(J, center(Circle(C, J, L))))
By line_intersection_definition on J, Line(J, center(Circle(A, F, J))), Line(J, M) we get J == line_intersection(Line(J, M), Line(J, center(Circle(A, F, J))))
By line_intersection_definition on M, Line(M, center(Circle(C, J, L))), Line(B, C) we get M == line_intersection(Line(B, C), Line(M, center(Circle(C, J, L))))
By line_intersection_definition on J, Line(C, G), Line(J, center(Circle(B, J, K))) we get J == line_intersection(Line(C, G), Line(J, center(Circle(B, J, K))))
By line_intersection_definition on J, Line(J, center(Circle(B, J, K))), Line(J, K) we get J == line_intersection(Line(J, K), Line(J, center(Circle(B, J, K))))
By line_intersection_definition on J, Line(J, center(Circle(C, J, L))), Line(J, K) we get J == line_intersection(Line(J, K), Line(J, center(Circle(C, J, L))))
By line_intersection_definition on center(Circle(B, J, K)), Line(M, center(Circle(B, J, K))), Line(B, center(Circle(B, J, K))) we get center(Circle(B, J, K)) == line_intersection(Line(B, center(Circle(B, J, K))), Line(M, center(Circle(B, J, K))))
By line_intersection_definition on L, Line(L, center(Circle(A, F, J))), Line(A, C) we get L == line_intersection(Line(A, C), Line(L, center(Circle(A, F, J))))
By circle_radius_v0_r on F, Circle(A, F, J) we get radius(Circle(A, F, J)) == distance(F, center(Circle(A, F, J)))
By circle_radius_v0_r on G, Circle(A, F, J) we get radius(Circle(A, F, J)) == distance(G, center(Circle(A, F, J)))
By angle_to_center on A, L, F, Circle(A, F, J) we get 2 * angle(A, L, F) == angle(A, center(Circle(A, F, J)), F) mod 360
By angle_to_center on K, A, F, Circle(A, F, J) we get 2 * angle(K, A, F) == angle(K, center(Circle(A, F, J)), F) mod 360
By perpendicular_direction_conditions_v0 on A, S, J, B we get perpendicular(Line(A, S), Line(B, J))
By angle_to_center on F, A, L, Circle(A, F, J) we get 2 * angle(F, A, L) == angle(F, center(Circle(A, F, J)), L) mod 360
By angle_to_center on J, K, F, Circle(A, F, J) we get 2 * angle(J, K, F) == angle(J, center(Circle(A, F, J)), F) mod 360
By angle_to_center on L, K, F, Circle(A, F, J) we get 2 * angle(L, K, F) == angle(L, center(Circle(A, F, J)), F) mod 360
By angle_to_center on K, G, F, Circle(A, F, J) we get 2 * angle(K, G, F) == angle(K, center(Circle(A, F, J)), F) mod 360
By angle_to_center on G, A, L, Circle(A, F, J) we get 2 * angle(G, A, L) == angle(G, center(Circle(A, F, J)), L) mod 360
By angle_to_center on A, J, G, Circle(A, F, J) we get 2 * angle(A, J, G) == angle(A, center(Circle(A, F, J)), G) mod 360
By angle_to_center on L, A, G, Circle(A, F, J) we get 2 * angle(L, A, G) == angle(L, center(Circle(A, F, J)), G) mod 360
By same_angle_converse_v1 on center(Circle(A, F, J)), J, A, K we get collinear(A, J, center(Circle(A, F, J)))
By angle_to_center on F, J, L, Circle(A, F, J) we get 2 * angle(F, J, L) == angle(F, center(Circle(A, F, J)), L) mod 360
By angle_to_center on K, J, F, Circle(A, F, J) we get 2 * angle(K, J, F) == angle(K, center(Circle(A, F, J)), F) mod 360
By angle_to_center on L, A, F, Circle(A, F, J) we get 2 * angle(L, A, F) == angle(L, center(Circle(A, F, J)), F) mod 360
By perpendicular_direction_conditions_v0 on T, A, C, G we get perpendicular(Line(A, T), Line(C, G))
By angle_to_center on F, G, K, Circle(A, F, J) we get 2 * angle(F, G, K) == angle(F, center(Circle(A, F, J)), K) mod 360
By angle_to_center on J, G, F, Circle(A, F, J) we get 2 * angle(J, G, F) == angle(J, center(Circle(A, F, J)), F) mod 360
By perpendicular_direction_conditions_v0 on A, F, B, F we get perpendicular(Line(A, F), Line(B, F))
By angle_to_center on G, K, J, Circle(A, F, J) we get 2 * angle(G, K, J) == angle(G, center(Circle(A, F, J)), J) mod 360
By angle_to_center on G, K, A, Circle(A, F, J) we get 2 * angle(G, K, A) == angle(G, center(Circle(A, F, J)), A) mod 360
By angle_to_center on L, K, G, Circle(A, F, J) we get 2 * angle(L, K, G) == angle(L, center(Circle(A, F, J)), G) mod 360
By angle_to_center on A, G, F, Circle(A, F, J) we get 2 * angle(A, G, F) == angle(A, center(Circle(A, F, J)), F) mod 360
By angle_to_center on G, A, J, Circle(A, F, J) we get 2 * angle(G, A, J) == angle(G, center(Circle(A, F, J)), J) mod 360
By angle_to_center on F, K, L, Circle(A, F, J) we get 2 * angle(F, K, L) == angle(F, center(Circle(A, F, J)), L) mod 360
By angle_to_center on F, G, L, Circle(A, F, J) we get 2 * angle(F, G, L) == angle(F, center(Circle(A, F, J)), L) mod 360
By perpendicular_direction_conditions_v0 on A, T, midpoint(L, M), C we get perpendicular(Line(A, T), Line(C, midpoint(L, M)))
By angle_to_center on J, F, G, Circle(A, F, J) we get 2 * angle(J, F, G) == angle(J, center(Circle(A, F, J)), G) mod 360
By angle_to_center on G, F, L, Circle(A, F, J) we get 2 * angle(G, F, L) == angle(G, center(Circle(A, F, J)), L) mod 360
By angle_to_center on F, J, K, Circle(A, F, J) we get 2 * angle(F, J, K) == angle(F, center(Circle(A, F, J)), K) mod 360
By angle_to_center on K, L, F, Circle(A, F, J) we get 2 * angle(K, L, F) == angle(K, center(Circle(A, F, J)), F) mod 360
By angle_to_center on F, A, J, Circle(A, F, J) we get 2 * angle(F, A, J) == angle(F, center(Circle(A, F, J)), J) mod 360
By angle_to_center on A, L, G, Circle(A, F, J) we get 2 * angle(A, L, G) == angle(A, center(Circle(A, F, J)), G) mod 360
By angle_to_center on A, F, G, Circle(A, F, J) we get 2 * angle(A, F, G) == angle(A, center(Circle(A, F, J)), G) mod 360
By angle_to_center on A, K, G, Circle(A, F, J) we get 2 * angle(A, K, G) == angle(A, center(Circle(A, F, J)), G) mod 360
By angle_to_center on F, K, A, Circle(A, F, J) we get 2 * angle(F, K, A) == angle(F, center(Circle(A, F, J)), A) mod 360
By same_angle_converse_v1 on center(Circle(C, J, L)), J, C, L we get collinear(C, J, center(Circle(C, J, L)))
By angle_to_center on G, F, J, Circle(A, F, J) we get 2 * angle(G, F, J) == angle(G, center(Circle(A, F, J)), J) mod 360
By angle_to_center on J, A, G, Circle(A, F, J) we get 2 * angle(J, A, G) == angle(J, center(Circle(A, F, J)), G) mod 360
By angle_to_center on J, K, G, Circle(A, F, J) we get 2 * angle(J, K, G) == angle(J, center(Circle(A, F, J)), G) mod 360
By angle_to_center on G, F, A, Circle(A, F, J) we get 2 * angle(G, F, A) == angle(G, center(Circle(A, F, J)), A) mod 360
By angle_to_center on G, L, K, Circle(A, F, J) we get 2 * angle(G, L, K) == angle(G, center(Circle(A, F, J)), K) mod 360
By angle_to_center on K, L, G, Circle(A, F, J) we get 2 * angle(K, L, G) == angle(K, center(Circle(A, F, J)), G) mod 360
By angle_to_center on F, G, A, Circle(A, F, J) we get 2 * angle(F, G, A) == angle(F, center(Circle(A, F, J)), A) mod 360
By angle_to_center on G, J, A, Circle(A, F, J) we get 2 * angle(G, J, A) == angle(G, center(Circle(A, F, J)), A) mod 360
By angle_to_center on J, A, F, Circle(A, F, J) we get 2 * angle(J, A, F) == angle(J, center(Circle(A, F, J)), F) mod 360
By angle_to_center on G, J, L, Circle(A, F, J) we get 2 * angle(G, J, L) == angle(G, center(Circle(A, F, J)), L) mod 360
By angle_to_center on K, J, G, Circle(A, F, J) we get 2 * angle(K, J, G) == angle(K, center(Circle(A, F, J)), G) mod 360
By angle_to_center on F, K, J, Circle(A, F, J) we get 2 * angle(F, K, J) == angle(F, center(Circle(A, F, J)), J) mod 360
By perpendicular_direction_conditions_v0 on S, F, midpoint(K, M), B we get perpendicular(Line(F, S), Line(B, midpoint(K, M)))
By angle_to_center on J, L, G, Circle(A, F, J) we get 2 * angle(J, L, G) == angle(J, center(Circle(A, F, J)), G) mod 360
By same_angle_converse_v1 on center(Circle(B, J, K)), B, J, M we get collinear(B, J, center(Circle(B, J, K)))
By angle_to_center on K, F, G, Circle(A, F, J) we get 2 * angle(K, F, G) == angle(K, center(Circle(A, F, J)), G) mod 360
By perpendicular_direction_conditions_v0 on J, G, G, A we get perpendicular(Line(A, G), Line(G, J))
By perpendicular_direction_conditions_v0 on F, J, F, S we get perpendicular(Line(F, J), Line(F, S))
By angle_to_center on L, J, G, Circle(A, F, J) we get 2 * angle(L, J, G) == angle(L, center(Circle(A, F, J)), G) mod 360
By angle_to_center on F, G, J, Circle(A, F, J) we get 2 * angle(F, G, J) == angle(F, center(Circle(A, F, J)), J) mod 360
By angle_to_center on F, A, K, Circle(A, F, J) we get 2 * angle(F, A, K) == angle(F, center(Circle(A, F, J)), K) mod 360
By angle_to_center on G, J, K, Circle(A, F, J) we get 2 * angle(G, J, K) == angle(G, center(Circle(A, F, J)), K) mod 360
By angle_to_center on F, J, A, Circle(A, F, J) we get 2 * angle(F, J, A) == angle(F, center(Circle(A, F, J)), A) mod 360
By angle_to_center on L, J, F, Circle(A, F, J) we get 2 * angle(L, J, F) == angle(L, center(Circle(A, F, J)), F) mod 360
By angle_to_center on K, A, G, Circle(A, F, J) we get 2 * angle(K, A, G) == angle(K, center(Circle(A, F, J)), G) mod 360
By angle_to_center on F, L, K, Circle(A, F, J) we get 2 * angle(F, L, K) == angle(F, center(Circle(A, F, J)), K) mod 360
By angle_to_center on G, K, L, Circle(A, F, J) we get 2 * angle(G, K, L) == angle(G, center(Circle(A, F, J)), L) mod 360
By angle_to_center on L, F, G, Circle(A, F, J) we get 2 * angle(L, F, G) == angle(L, center(Circle(A, F, J)), G) mod 360
By angle_to_center on G, A, K, Circle(A, F, J) we get 2 * angle(G, A, K) == angle(G, center(Circle(A, F, J)), K) mod 360
By angle_to_center on F, L, J, Circle(A, F, J) we get 2 * angle(F, L, J) == angle(F, center(Circle(A, F, J)), J) mod 360
By angle_to_center on G, F, K, Circle(A, F, J) we get 2 * angle(G, F, K) == angle(G, center(Circle(A, F, J)), K) mod 360
By angle_to_center on A, J, F, Circle(A, F, J) we get 2 * angle(A, J, F) == angle(A, center(Circle(A, F, J)), F) mod 360
By angle_to_center on J, L, F, Circle(A, F, J) we get 2 * angle(J, L, F) == angle(J, center(Circle(A, F, J)), F) mod 360
By angle_to_center on L, G, F, Circle(A, F, J) we get 2 * angle(L, G, F) == angle(L, center(Circle(A, F, J)), F) mod 360
By angle_to_center on F, L, A, Circle(A, F, J) we get 2 * angle(F, L, A) == angle(F, center(Circle(A, F, J)), A) mod 360
By angle_to_center on A, K, F, Circle(A, F, J) we get 2 * angle(A, K, F) == angle(A, center(Circle(A, F, J)), F) mod 360
By angle_to_center on G, L, A, Circle(A, F, J) we get 2 * angle(G, L, A) == angle(G, center(Circle(A, F, J)), A) mod 360
By angle_to_center on G, L, J, Circle(A, F, J) we get 2 * angle(G, L, J) == angle(G, center(Circle(A, F, J)), J) mod 360
By perpendicular_direction_conditions_v0 on J, C, T, G we get perpendicular(Line(C, J), Line(G, T))
By perpendicular_direction_conditions_v0 on J, midpoint(L, M), A, G we get perpendicular(Line(A, G), Line(J, midpoint(L, M)))
By perpendicular_direction_conditions_v0 on G, A, G, C we get perpendicular(Line(A, G), Line(C, G))
By perpendicular_direction_conditions_v0 on A, S, F, J we get perpendicular(Line(A, S), Line(F, J))
By perpendicular_direction_conditions_v0 on J, C, A, T we get perpendicular(Line(A, T), Line(C, J))
By perpendicular_direction_conditions_v0 on A, G, G, midpoint(L, M) we get perpendicular(Line(A, G), Line(G, midpoint(L, M)))
By perpendicular_direction_conditions_v0 on midpoint(K, M), F, F, S we get perpendicular(Line(F, S), Line(F, midpoint(K, M)))
By perpendicular_direction_conditions_v0 on midpoint(K, M), J, A, S we get perpendicular(Line(A, S), Line(J, midpoint(K, M)))
By perpendicular_direction_conditions_v0 on A, F, B, J we get perpendicular(Line(A, F), Line(B, J))
By perpendicular_direction_conditions_v0 on F, S, B, F we get perpendicular(Line(B, F), Line(F, S))
By perpendicular_direction_conditions_v0 on B, F, S, A we get perpendicular(Line(A, S), Line(B, F))
By perpendicular_direction_conditions_v0 on midpoint(K, M), F, F, A we get perpendicular(Line(A, F), Line(F, midpoint(K, M)))
By perpendicular_direction_conditions_v0 on C, midpoint(L, M), T, G we get perpendicular(Line(G, T), Line(C, midpoint(L, M)))
By perpendicular_direction_conditions_v0 on F, A, J, F we get perpendicular(Line(A, F), Line(F, J))
By perpendicular_direction_conditions_v0 on G, A, midpoint(L, M), C we get perpendicular(Line(A, G), Line(C, midpoint(L, M)))
By perpendicular_direction_conditions_v0 on T, G, G, C we get perpendicular(Line(C, G), Line(G, T))
By perpendicular_direction_conditions_v0 on J, midpoint(L, M), A, T we get perpendicular(Line(A, T), Line(J, midpoint(L, M)))
By perpendicular_direction_conditions_v0 on B, midpoint(K, M), A, F we get perpendicular(Line(A, F), Line(B, midpoint(K, M)))
By perpendicular_direction_conditions_v0 on A, F, midpoint(K, M), J we get perpendicular(Line(A, F), Line(J, midpoint(K, M)))
By perpendicular_direction_conditions_v0 on J, midpoint(L, M), G, T we get perpendicular(Line(G, T), Line(J, midpoint(L, M)))
By perpendicular_direction_conditions_v0 on midpoint(L, M), G, T, A we get perpendicular(Line(A, T), Line(G, midpoint(L, M)))
By perpendicular_direction_conditions_v0 on G, J, G, T we get perpendicular(Line(G, J), Line(G, T))
By perpendicular_direction_conditions_v0 on S, F, B, J we get perpendicular(Line(B, J), Line(F, S))
By perpendicular_direction_conditions_v0 on A, T, G, J we get perpendicular(Line(A, T), Line(G, J))
By perpendicular_direction_conditions_v0 on C, J, A, G we get perpendicular(Line(A, G), Line(C, J))
By perpendicular_direction_conditions_v0 on B, midpoint(K, M), A, S we get perpendicular(Line(A, S), Line(B, midpoint(K, M)))
By perpendicular_direction_conditions_v0 on T, G, midpoint(L, M), G we get perpendicular(Line(G, T), Line(G, midpoint(L, M)))
By perpendicular_direction_conditions_v0 on midpoint(K, M), J, S, F we get perpendicular(Line(F, S), Line(J, midpoint(K, M)))
By perpendicular_direction_conditions_v0 on F, midpoint(K, M), S, A we get perpendicular(Line(A, S), Line(F, midpoint(K, M)))
By projection_definition on line_intersection(Line(F, G), Line(J, M)), M, Line(B, C) we get M == projection(line_intersection(Line(F, G), Line(J, M)), Line(B, C))
By projection_definition on J, line_intersection(Line(F, G), Line(J, M)), Line(F, G) we get projection(J, Line(F, G)) == line_intersection(Line(F, G), Line(J, M))
By projection_definition on F, line_intersection(Line(F, G), Line(J, M)), Line(J, M) we get projection(F, Line(J, M)) == line_intersection(Line(F, G), Line(J, M))
By projection_definition on G, line_intersection(Line(F, G), Line(J, M)), Line(J, M) we get projection(G, Line(J, M)) == line_intersection(Line(F, G), Line(J, M))
By projection_definition on M, line_intersection(Line(F, G), Line(J, M)), Line(F, G) we get projection(M, Line(F, G)) == line_intersection(Line(F, G), Line(J, M))
By angle_to_center on F, K, G, Circle(A, F, J) we get 2 * angle(F, K, G) == angle(F, center(Circle(A, F, J)), G) mod 360
By angle_to_center on G, A, F, Circle(A, F, J) we get 2 * angle(G, A, F) == angle(G, center(Circle(A, F, J)), F) mod 360
By perpendicular_direction_conditions_v0_r on B, T, J, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(B, T) - 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) mod 360
By angle_to_center on G, J, F, Circle(A, F, J) we get 2 * angle(G, J, F) == angle(G, center(Circle(A, F, J)), F) mod 360
By angle_to_center on F, J, G, Circle(A, F, J) we get 2 * angle(F, J, G) == angle(F, center(Circle(A, F, J)), G) mod 360
By angle_to_center on G, L, F, Circle(A, F, J) we get 2 * angle(G, L, F) == angle(G, center(Circle(A, F, J)), F) mod 360
By perpendicular_direction_conditions_v0_r on C, S, line_intersection(Line(F, G), Line(J, M)), J we get 180 == 2 * direction(C, S) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) mod 360
By perpendicular_direction_conditions_v0_r on S, midpoint(S, T), M, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(S, midpoint(S, T)) - 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) mod 360
By angle_to_center on F, A, G, Circle(A, F, J) we get 2 * angle(F, A, G) == angle(F, center(Circle(A, F, J)), G) mod 360
By perpendicular_direction_conditions_v0_r on M, line_intersection(Line(F, G), Line(J, M)), T, S we get 180 == 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(T, S) mod 360
By angle_to_center on F, L, G, Circle(A, F, J) we get 2 * angle(F, L, G) == angle(F, center(Circle(A, F, J)), G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), J, C, midpoint(S, T) we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) - 2 * direction(C, midpoint(S, T)) mod 360
By angle_to_center on G, K, F, Circle(A, F, J) we get 2 * angle(G, K, F) == angle(G, center(Circle(A, F, J)), F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), J, S, M we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) - 2 * direction(S, M) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(S, T), C, M, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(midpoint(S, T), C) - 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on F, G, M, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(F, G) - 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) mod 360
By anti_congruence_from_anti_similar_triangles on F, A, K, A, F, G we get anti_congruent_triangles(A, F, G, F, A, K)
By perpendicular_direction_conditions_v0_r on T, S, J, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(T, S) - 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on M, line_intersection(Line(F, G), Line(J, M)), C, B we get 180 == 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), M, B, C we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on B, M, line_intersection(Line(F, G), Line(J, M)), J we get 180 == 2 * direction(B, M) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) mod 360
By perpendicular_direction_conditions_v0_r on J, line_intersection(Line(F, G), Line(J, M)), B, T we get 180 == 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(B, T) mod 360
By perpendicular_direction_conditions_v0_r on M, J, line_intersection(Line(F, G), Line(J, M)), G we get 180 == 2 * direction(M, J) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(S, T), T, M, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(midpoint(S, T), T) - 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on M, C, line_intersection(Line(F, G), Line(J, M)), J we get 180 == 2 * direction(M, C) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), J, C, S we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) - 2 * direction(C, S) mod 360
By perpendicular_direction_conditions_v0_r on M, S, line_intersection(Line(F, G), Line(J, M)), M we get 180 == 2 * direction(M, S) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), M, midpoint(S, T), B we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) - 2 * direction(midpoint(S, T), B) mod 360
By perpendicular_direction_conditions_v0_r on G, F, line_intersection(Line(F, G), Line(J, M)), M we get 180 == 2 * direction(G, F) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(S, T), line_intersection(Line(F, G), Line(J, M)), M we get 180 == 2 * direction(C, midpoint(S, T)) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(S, T), M, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(C, midpoint(S, T)) - 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), M, B, T we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) - 2 * direction(B, T) mod 360
By perpendicular_direction_conditions_v0_r on M, B, J, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(M, B) - 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on M, T, M, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(M, T) - 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), J, B, C we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on J, line_intersection(Line(F, G), Line(J, M)), T, midpoint(S, T) we get 180 == 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(T, midpoint(S, T)) mod 360
By perpendicular_direction_conditions_v0_r on J, line_intersection(Line(F, G), Line(J, M)), midpoint(S, T), T we get 180 == 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(midpoint(S, T), T) mod 360
By perpendicular_direction_conditions_v0_r on M, S, line_intersection(Line(F, G), Line(J, M)), J we get 180 == 2 * direction(M, S) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), M, T, C we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) - 2 * direction(T, C) mod 360
By perpendicular_direction_conditions_v0_r on M, line_intersection(Line(F, G), Line(J, M)), M, B we get 180 == 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(M, B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(S, T), C, line_intersection(Line(F, G), Line(J, M)), J we get 180 == 2 * direction(midpoint(S, T), C) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) mod 360
By perpendicular_direction_conditions_v0_r on T, S, line_intersection(Line(F, G), Line(J, M)), M we get 180 == 2 * direction(T, S) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) mod 360
By perpendicular_direction_conditions_v0_r on M, line_intersection(Line(F, G), Line(J, M)), C, S we get 180 == 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(C, S) mod 360
By perpendicular_direction_conditions_v0_r on C, B, line_intersection(Line(F, G), Line(J, M)), J we get 180 == 2 * direction(C, B) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), M, midpoint(S, T), T we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) - 2 * direction(midpoint(S, T), T) mod 360
By perpendicular_direction_conditions_v0_r on J, line_intersection(Line(F, G), Line(J, M)), midpoint(S, T), B we get 180 == 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(midpoint(S, T), B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), M, S, C we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) - 2 * direction(S, C) mod 360
By perpendicular_direction_conditions_v0_r on T, M, line_intersection(Line(F, G), Line(J, M)), M we get 180 == 2 * direction(T, M) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) mod 360
By perpendicular_direction_conditions_v0_r on J, line_intersection(Line(F, G), Line(J, M)), T, M we get 180 == 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(T, M) mod 360
By perpendicular_direction_conditions_v0_r on S, T, line_intersection(Line(F, G), Line(J, M)), M we get 180 == 2 * direction(S, T) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), J, B, M we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) - 2 * direction(B, M) mod 360
By perpendicular_direction_conditions_v0_r on S, T, J, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(S, T) - 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), M, T, M we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) - 2 * direction(T, M) mod 360
By perpendicular_direction_conditions_v0_r on M, line_intersection(Line(F, G), Line(J, M)), M, T we get 180 == 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(M, T) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), J, M, S we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) - 2 * direction(M, S) mod 360
By perpendicular_direction_conditions_v0_r on T, B, J, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(T, B) - 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on J, line_intersection(Line(F, G), Line(J, M)), T, B we get 180 == 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(T, B) mod 360
By perpendicular_direction_conditions_v0_r on J, line_intersection(Line(F, G), Line(J, M)), T, S we get 180 == 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(T, S) mod 360
By perpendicular_direction_conditions_v0_r on J, line_intersection(Line(F, G), Line(J, M)), midpoint(S, T), C we get 180 == 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(midpoint(S, T), C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), M, S, midpoint(S, T) we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) - 2 * direction(S, midpoint(S, T)) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(S, T), line_intersection(Line(F, G), Line(J, M)), M we get 180 == 2 * direction(B, midpoint(S, T)) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) mod 360
By perpendicular_direction_conditions_v0_r on C, T, line_intersection(Line(F, G), Line(J, M)), J we get 180 == 2 * direction(C, T) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) mod 360
By perpendicular_direction_conditions_v0_r on C, M, line_intersection(Line(F, G), Line(J, M)), J we get 180 == 2 * direction(C, M) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) mod 360
By perpendicular_direction_conditions_v0_r on M, line_intersection(Line(F, G), Line(J, M)), B, T we get 180 == 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(B, T) mod 360
By perpendicular_direction_conditions_v0_r on F, G, line_intersection(Line(F, G), Line(J, M)), J we get 180 == 2 * direction(F, G) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(S, T), T, line_intersection(Line(F, G), Line(J, M)), J we get 180 == 2 * direction(midpoint(S, T), T) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) mod 360
By perpendicular_direction_conditions_v0_r on M, S, M, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(M, S) - 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(Line(F, G), Line(J, M)), M, J we get 180 == 2 * direction(G, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(M, J) mod 360
By perpendicular_direction_conditions_v0_r on M, line_intersection(Line(F, G), Line(J, M)), midpoint(S, T), T we get 180 == 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(midpoint(S, T), T) mod 360
By perpendicular_direction_conditions_v0_r on B, S, line_intersection(Line(F, G), Line(J, M)), J we get 180 == 2 * direction(B, S) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) mod 360
By perpendicular_direction_conditions_v0_r on B, C, M, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(B, C) - 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(S, T), B, line_intersection(Line(F, G), Line(J, M)), J we get 180 == 2 * direction(midpoint(S, T), B) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(S, T), T, J, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(midpoint(S, T), T) - 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), J, C, M we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) - 2 * direction(C, M) mod 360
By perpendicular_direction_conditions_v0_r on J, line_intersection(Line(F, G), Line(J, M)), M, C we get 180 == 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(M, C) mod 360
By perpendicular_direction_conditions_v0_r on J, line_intersection(Line(F, G), Line(J, M)), S, M we get 180 == 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(S, M) mod 360
By perpendicular_direction_conditions_v0_r on M, line_intersection(Line(F, G), Line(J, M)), B, midpoint(S, T) we get 180 == 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(B, midpoint(S, T)) mod 360
By perpendicular_direction_conditions_v0_r on M, line_intersection(Line(F, G), Line(J, M)), T, C we get 180 == 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(T, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(S, T), B, J, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(midpoint(S, T), B) - 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on M, J, F, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(M, J) - 2 * direction(F, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on T, M, M, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(T, M) - 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), G, M, J we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), G) - 2 * direction(M, J) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(S, T), B, M, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(midpoint(S, T), B) - 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), M, F, G we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on T, C, line_intersection(Line(F, G), Line(J, M)), M we get 180 == 2 * direction(T, C) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) mod 360
By perpendicular_direction_conditions_v0_r on S, B, J, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(S, B) - 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on M, line_intersection(Line(F, G), Line(J, M)), S, midpoint(S, T) we get 180 == 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(S, midpoint(S, T)) mod 360
By perpendicular_direction_conditions_v0_r on J, line_intersection(Line(F, G), Line(J, M)), T, C we get 180 == 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(T, C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), J, T, B we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) - 2 * direction(T, B) mod 360
By perpendicular_direction_conditions_v0_r on T, M, J, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(T, M) - 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), J, B, midpoint(S, T) we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) - 2 * direction(B, midpoint(S, T)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(S, T), S, M, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(midpoint(S, T), S) - 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on J, line_intersection(Line(F, G), Line(J, M)), S, midpoint(S, T) we get 180 == 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(S, midpoint(S, T)) mod 360
By perpendicular_direction_conditions_v0_r on M, line_intersection(Line(F, G), Line(J, M)), M, C we get 180 == 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(M, C) mod 360
By perpendicular_direction_conditions_v0_r on T, midpoint(S, T), M, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(T, midpoint(S, T)) - 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on S, T, M, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(S, T) - 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on J, M, F, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(J, M) - 2 * direction(F, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on S, C, J, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(S, C) - 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on M, line_intersection(Line(F, G), Line(J, M)), G, F we get 180 == 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(S, T), B, line_intersection(Line(F, G), Line(J, M)), M we get 180 == 2 * direction(midpoint(S, T), B) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), J, S, C we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) - 2 * direction(S, C) mod 360
By perpendicular_direction_conditions_v0_r on J, line_intersection(Line(F, G), Line(J, M)), C, S we get 180 == 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(C, S) mod 360
By perpendicular_direction_conditions_v0_r on M, C, M, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(M, C) - 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on M, line_intersection(Line(F, G), Line(J, M)), C, M we get 180 == 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(C, M) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), J, M, T we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) - 2 * direction(M, T) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), J, G, F we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), J, B, T we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) - 2 * direction(B, T) mod 360
By perpendicular_direction_conditions_v0_r on G, F, J, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(G, F) - 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on F, G, line_intersection(Line(F, G), Line(J, M)), M we get 180 == 2 * direction(F, G) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), M, B, midpoint(S, T) we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) - 2 * direction(B, midpoint(S, T)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), F, M, J we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), F) - 2 * direction(M, J) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), J, F, G we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(S, T), T, line_intersection(Line(F, G), Line(J, M)), M we get 180 == 2 * direction(midpoint(S, T), T) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) mod 360
By perpendicular_direction_conditions_v0_r on M, line_intersection(Line(F, G), Line(J, M)), T, M we get 180 == 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(T, M) mod 360
By perpendicular_direction_conditions_v0_r on J, line_intersection(Line(F, G), Line(J, M)), midpoint(S, T), S we get 180 == 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(midpoint(S, T), S) mod 360
By perpendicular_direction_conditions_v0_r on T, C, J, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(T, C) - 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on M, line_intersection(Line(F, G), Line(J, M)), C, T we get 180 == 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(C, T) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), M, M, C we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) - 2 * direction(M, C) mod 360
By perpendicular_direction_conditions_v0_r on C, S, J, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(C, S) - 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on J, line_intersection(Line(F, G), Line(J, M)), B, S we get 180 == 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(B, S) mod 360
By perpendicular_direction_conditions_v0_r on M, S, J, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(M, S) - 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(Line(F, G), Line(J, M)), J, M we get 180 == 2 * direction(G, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(J, M) mod 360
By perpendicular_direction_conditions_v0_r on B, T, M, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(B, T) - 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), J, midpoint(S, T), S we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) - 2 * direction(midpoint(S, T), S) mod 360
By parallel_line_angles_v1 on G, M, S, F we get parallel(Line(F, S), Line(G, M))
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), J, midpoint(S, T), T we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) - 2 * direction(midpoint(S, T), T) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), J, S, midpoint(S, T) we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) - 2 * direction(S, midpoint(S, T)) mod 360
By perpendicular_direction_conditions_v0_r on C, B, line_intersection(Line(F, G), Line(J, M)), M we get 180 == 2 * direction(C, B) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(S, T), S, line_intersection(Line(F, G), Line(J, M)), J we get 180 == 2 * direction(midpoint(S, T), S) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) mod 360
By perpendicular_direction_conditions_v0_r on J, line_intersection(Line(F, G), Line(J, M)), C, M we get 180 == 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(C, M) mod 360
By perpendicular_direction_conditions_v0_r on T, C, line_intersection(Line(F, G), Line(J, M)), J we get 180 == 2 * direction(T, C) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) mod 360
By perpendicular_direction_conditions_v0_r on C, B, M, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(C, B) - 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on S, B, line_intersection(Line(F, G), Line(J, M)), M we get 180 == 2 * direction(S, B) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), M, B, S we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) - 2 * direction(B, S) mod 360
By perpendicular_direction_conditions_v0_r on S, M, line_intersection(Line(F, G), Line(J, M)), M we get 180 == 2 * direction(S, M) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) mod 360
By perpendicular_direction_conditions_v0_r on T, midpoint(S, T), J, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(T, midpoint(S, T)) - 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on B, C, J, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(B, C) - 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on M, line_intersection(Line(F, G), Line(J, M)), S, M we get 180 == 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(S, M) mod 360
By perpendicular_direction_conditions_v0_r on S, M, line_intersection(Line(F, G), Line(J, M)), J we get 180 == 2 * direction(S, M) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) mod 360
By perpendicular_direction_conditions_v0_r on M, line_intersection(Line(F, G), Line(J, M)), S, B we get 180 == 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(S, B) mod 360
By perpendicular_direction_conditions_v0_r on G, F, line_intersection(Line(F, G), Line(J, M)), J we get 180 == 2 * direction(G, F) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) mod 360
By perpendicular_direction_conditions_v0_r on M, line_intersection(Line(F, G), Line(J, M)), B, S we get 180 == 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(B, S) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), M, G, F we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on B, C, line_intersection(Line(F, G), Line(J, M)), M we get 180 == 2 * direction(B, C) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), J, S, B we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) - 2 * direction(S, B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), J, T, M we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) - 2 * direction(T, M) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), J, T, S we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) - 2 * direction(T, S) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), J, midpoint(S, T), B we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) - 2 * direction(midpoint(S, T), B) mod 360
By perpendicular_direction_conditions_v0_r on S, C, line_intersection(Line(F, G), Line(J, M)), M we get 180 == 2 * direction(S, C) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) mod 360
By perpendicular_direction_conditions_v0_r on J, line_intersection(Line(F, G), Line(J, M)), B, C we get 180 == 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on J, M, G, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(J, M) - 2 * direction(G, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on J, line_intersection(Line(F, G), Line(J, M)), M, S we get 180 == 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(M, S) mod 360
By perpendicular_direction_conditions_v0_r on M, T, line_intersection(Line(F, G), Line(J, M)), M we get 180 == 2 * direction(M, T) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) mod 360
By perpendicular_direction_conditions_v0_r on M, line_intersection(Line(F, G), Line(J, M)), M, S we get 180 == 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(M, S) mod 360
By perpendicular_direction_conditions_v0_r on C, T, line_intersection(Line(F, G), Line(J, M)), M we get 180 == 2 * direction(C, T) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) mod 360
By perpendicular_direction_conditions_v0_r on S, B, M, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(S, B) - 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on G, F, M, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(G, F) - 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), J, T, C we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) - 2 * direction(T, C) mod 360
By perpendicular_direction_conditions_v0_r on J, line_intersection(Line(F, G), Line(J, M)), B, M we get 180 == 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(B, M) mod 360
By perpendicular_direction_conditions_v0_r on J, M, line_intersection(Line(F, G), Line(J, M)), F we get 180 == 2 * direction(J, M) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), F) mod 360
By perpendicular_direction_conditions_v0_r on M, line_intersection(Line(F, G), Line(J, M)), midpoint(S, T), S we get 180 == 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(midpoint(S, T), S) mod 360
By perpendicular_direction_conditions_v0_r on C, T, J, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(C, T) - 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on J, line_intersection(Line(F, G), Line(J, M)), M, T we get 180 == 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(M, T) mod 360
By perpendicular_direction_conditions_v0_r on J, line_intersection(Line(F, G), Line(J, M)), B, midpoint(S, T) we get 180 == 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(B, midpoint(S, T)) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(S, T), M, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(B, midpoint(S, T)) - 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on B, M, line_intersection(Line(F, G), Line(J, M)), M we get 180 == 2 * direction(B, M) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) mod 360
By perpendicular_direction_conditions_v0_r on B, M, J, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(B, M) - 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on M, B, line_intersection(Line(F, G), Line(J, M)), J we get 180 == 2 * direction(M, B) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) mod 360
By perpendicular_direction_conditions_v0_r on S, midpoint(S, T), line_intersection(Line(F, G), Line(J, M)), J we get 180 == 2 * direction(S, midpoint(S, T)) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) mod 360
By perpendicular_direction_conditions_v0_r on T, B, line_intersection(Line(F, G), Line(J, M)), M we get 180 == 2 * direction(T, B) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(F, G), Line(J, M)), M, J we get 180 == 2 * direction(F, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(M, J) mod 360
By perpendicular_direction_conditions_v0_r on J, line_intersection(Line(F, G), Line(J, M)), G, F we get 180 == 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(S, T), line_intersection(Line(F, G), Line(J, M)), J we get 180 == 2 * direction(C, midpoint(S, T)) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) mod 360
By perpendicular_direction_conditions_v0_r on J, line_intersection(Line(F, G), Line(J, M)), C, T we get 180 == 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(C, T) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(S, T), S, line_intersection(Line(F, G), Line(J, M)), M we get 180 == 2 * direction(midpoint(S, T), S) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) mod 360
By perpendicular_direction_conditions_v0_r on J, line_intersection(Line(F, G), Line(J, M)), S, T we get 180 == 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(S, T) mod 360
By perpendicular_direction_conditions_v0_r on S, T, line_intersection(Line(F, G), Line(J, M)), J we get 180 == 2 * direction(S, T) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) mod 360
By perpendicular_direction_conditions_v0_r on C, M, M, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(C, M) - 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) mod 360
By parallel_line_angles_v1 on K, G, A, F we get parallel(Line(A, F), Line(G, K))
By perpendicular_direction_conditions_v0_r on C, midpoint(S, T), J, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(C, midpoint(S, T)) - 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on B, T, line_intersection(Line(F, G), Line(J, M)), J we get 180 == 2 * direction(B, T) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) mod 360
By perpendicular_direction_conditions_v0_r on M, line_intersection(Line(F, G), Line(J, M)), T, B we get 180 == 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(T, B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(S, T), S, J, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(midpoint(S, T), S) - 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on M, J, G, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(M, J) - 2 * direction(G, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on T, S, line_intersection(Line(F, G), Line(J, M)), J we get 180 == 2 * direction(T, S) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) mod 360
By perpendicular_direction_conditions_v0_r on J, M, line_intersection(Line(F, G), Line(J, M)), G we get 180 == 2 * direction(J, M) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), G) mod 360
By perpendicular_direction_conditions_v0_r on F, G, J, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(F, G) - 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on S, midpoint(S, T), J, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(S, midpoint(S, T)) - 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), J, T, midpoint(S, T) we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) - 2 * direction(T, midpoint(S, T)) mod 360
By perpendicular_direction_conditions_v0_r on S, C, M, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(S, C) - 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on T, midpoint(S, T), line_intersection(Line(F, G), Line(J, M)), M we get 180 == 2 * direction(T, midpoint(S, T)) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) mod 360
By perpendicular_direction_conditions_v0_r on M, line_intersection(Line(F, G), Line(J, M)), midpoint(S, T), C we get 180 == 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(midpoint(S, T), C) mod 360
By perpendicular_direction_conditions_v0_r on T, midpoint(S, T), line_intersection(Line(F, G), Line(J, M)), J we get 180 == 2 * direction(T, midpoint(S, T)) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) mod 360
By perpendicular_direction_conditions_v0_r on T, B, line_intersection(Line(F, G), Line(J, M)), J we get 180 == 2 * direction(T, B) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) mod 360
By perpendicular_direction_conditions_v0_r on M, line_intersection(Line(F, G), Line(J, M)), B, C we get 180 == 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), M, C, midpoint(S, T) we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) - 2 * direction(C, midpoint(S, T)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), J, C, T we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) - 2 * direction(C, T) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), J, B, S we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) - 2 * direction(B, S) mod 360
By perpendicular_direction_conditions_v0_r on J, line_intersection(Line(F, G), Line(J, M)), S, B we get 180 == 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(S, B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), J, S, T we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) - 2 * direction(S, T) mod 360
By parallel_line_angles_v1 on T, A, F, L we get parallel(Line(A, T), Line(F, L))
By perpendicular_direction_conditions_v0_r on T, M, line_intersection(Line(F, G), Line(J, M)), J we get 180 == 2 * direction(T, M) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) mod 360
By perpendicular_direction_conditions_v0_r on B, C, line_intersection(Line(F, G), Line(J, M)), J we get 180 == 2 * direction(B, C) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) mod 360
By perpendicular_direction_conditions_v0_r on T, B, M, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(T, B) - 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on M, J, line_intersection(Line(F, G), Line(J, M)), F we get 180 == 2 * direction(M, J) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), F) mod 360
By perpendicular_direction_conditions_v0_r on M, T, J, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(M, T) - 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on M, line_intersection(Line(F, G), Line(J, M)), S, C we get 180 == 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(S, C) mod 360
By perpendicular_direction_conditions_v0_r on M, B, M, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(M, B) - 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on S, B, line_intersection(Line(F, G), Line(J, M)), J we get 180 == 2 * direction(S, B) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) mod 360
By perpendicular_direction_conditions_v0_r on M, line_intersection(Line(F, G), Line(J, M)), C, midpoint(S, T) we get 180 == 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(C, midpoint(S, T)) mod 360
By perpendicular_direction_conditions_v0_r on C, S, M, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(C, S) - 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on C, M, J, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(C, M) - 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on S, midpoint(S, T), line_intersection(Line(F, G), Line(J, M)), M we get 180 == 2 * direction(S, midpoint(S, T)) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), F, J, M we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), F) - 2 * direction(J, M) mod 360
By perpendicular_direction_conditions_v0_r on T, C, M, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(T, C) - 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on M, line_intersection(Line(F, G), Line(J, M)), T, midpoint(S, T) we get 180 == 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(T, midpoint(S, T)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), J, C, B we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on B, S, line_intersection(Line(F, G), Line(J, M)), M we get 180 == 2 * direction(B, S) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), M, M, T we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) - 2 * direction(M, T) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), J, M, B we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) - 2 * direction(M, B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), M, T, midpoint(S, T) we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) - 2 * direction(T, midpoint(S, T)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(S, T), C, J, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(midpoint(S, T), C) - 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on B, M, M, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(B, M) - 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), M, C, S we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) - 2 * direction(C, S) mod 360
By perpendicular_direction_conditions_v0_r on M, B, line_intersection(Line(F, G), Line(J, M)), M we get 180 == 2 * direction(M, B) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) mod 360
By perpendicular_direction_conditions_v0_r on M, line_intersection(Line(F, G), Line(J, M)), midpoint(S, T), B we get 180 == 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(midpoint(S, T), B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(S, T), C, line_intersection(Line(F, G), Line(J, M)), M we get 180 == 2 * direction(midpoint(S, T), C) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), M, C, T we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) - 2 * direction(C, T) mod 360
By perpendicular_direction_conditions_v0_r on M, line_intersection(Line(F, G), Line(J, M)), F, G we get 180 == 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), M, B, M we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) - 2 * direction(B, M) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(S, T), line_intersection(Line(F, G), Line(J, M)), J we get 180 == 2 * direction(B, midpoint(S, T)) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), J, midpoint(S, T), C we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) - 2 * direction(midpoint(S, T), C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), M, T, S we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) - 2 * direction(T, S) mod 360
By perpendicular_direction_conditions_v0_r on B, S, M, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(B, S) - 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), M, M, S we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) - 2 * direction(M, S) mod 360
By perpendicular_direction_conditions_v0_r on J, line_intersection(Line(F, G), Line(J, M)), C, midpoint(S, T) we get 180 == 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(C, midpoint(S, T)) mod 360
By perpendicular_direction_conditions_v0_r on M, C, J, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(M, C) - 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on J, line_intersection(Line(F, G), Line(J, M)), M, B we get 180 == 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(M, B) mod 360
By perpendicular_direction_conditions_v0_r on S, M, J, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(S, M) - 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on J, line_intersection(Line(F, G), Line(J, M)), S, C we get 180 == 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(S, C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), M, C, B we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on M, T, line_intersection(Line(F, G), Line(J, M)), J we get 180 == 2 * direction(M, T) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), M, C, M we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) - 2 * direction(C, M) mod 360
By perpendicular_direction_conditions_v0_r on C, M, line_intersection(Line(F, G), Line(J, M)), M we get 180 == 2 * direction(C, M) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), M, S, B we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) - 2 * direction(S, B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), G, J, M we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), G) - 2 * direction(J, M) mod 360
By perpendicular_direction_conditions_v0_r on S, M, M, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(S, M) - 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(F, G), Line(J, M)), J, M we get 180 == 2 * direction(F, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(J, M) mod 360
By perpendicular_direction_conditions_v0_r on C, S, line_intersection(Line(F, G), Line(J, M)), M we get 180 == 2 * direction(C, S) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), M, midpoint(S, T), S we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) - 2 * direction(midpoint(S, T), S) mod 360
By perpendicular_direction_conditions_v0_r on M, line_intersection(Line(F, G), Line(J, M)), B, M we get 180 == 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(B, M) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(S, T), J, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(B, midpoint(S, T)) - 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on M, line_intersection(Line(F, G), Line(J, M)), S, T we get 180 == 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(S, T) mod 360
By perpendicular_direction_conditions_v0_r on B, T, line_intersection(Line(F, G), Line(J, M)), M we get 180 == 2 * direction(B, T) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) mod 360
By perpendicular_direction_conditions_v0_r on J, line_intersection(Line(F, G), Line(J, M)), F, G we get 180 == 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), M, midpoint(S, T), C we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) - 2 * direction(midpoint(S, T), C) mod 360
By perpendicular_direction_conditions_v0_r on B, S, J, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(B, S) - 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), M, M, B we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) - 2 * direction(M, B) mod 360
By perpendicular_direction_conditions_v0_r on C, B, J, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(C, B) - 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on S, C, line_intersection(Line(F, G), Line(J, M)), J we get 180 == 2 * direction(S, C) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) mod 360
By perpendicular_direction_conditions_v0_r on J, line_intersection(Line(F, G), Line(J, M)), C, B we get 180 == 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on M, C, line_intersection(Line(F, G), Line(J, M)), M we get 180 == 2 * direction(M, C) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), M, T, B we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) - 2 * direction(T, B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), M, S, M we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) - 2 * direction(S, M) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), M, S, T we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) - 2 * direction(S, T) mod 360
By perpendicular_direction_conditions_v0_r on T, S, M, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(T, S) - 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on C, T, M, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(C, T) - 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), J, M, C we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) - 2 * direction(M, C) mod 360
By parallel_line_angles_v1 on T, A, F, M we get parallel(Line(A, T), Line(F, M))
By anti_congruence_from_anti_similar_triangles on F, B, S, F, B, A we get anti_congruent_triangles(A, B, F, S, B, F)
By parallel_line_angles_v1 on A, G, L, M we get parallel(Line(A, G), Line(L, M))
By sas_anti_similarity on midpoint(K, M), M, F, midpoint(L, M), M, G we get anti_similar_triangles(F, M, midpoint(K, M), G, M, midpoint(L, M))
By parallel_line_angles_v1 on A, F, K, M we get parallel(Line(A, F), Line(K, M))
By anti_congruence_from_anti_similar_triangles on G, C, T, G, C, A we get anti_congruent_triangles(A, C, G, T, C, G)
By parallel_line_angles_v1 on A, G, L, F we get parallel(Line(A, G), Line(F, L))
By sas_anti_similarity on midpoint(K, M), K, F, midpoint(L, M), L, G we get anti_similar_triangles(F, K, midpoint(K, M), G, L, midpoint(L, M))
By asa_congruence on M, F, G, F, M, S we get congruent_triangles(F, G, M, M, S, F)
By asa_anti_congruence on G, A, F, A, G, L we get anti_congruent_triangles(A, F, G, G, L, A)
By sas_similarity on midpoint(K, L), K, A, midpoint(K, M), K, F we get similar_triangles(A, K, midpoint(K, L), F, K, midpoint(K, M))
By asa_anti_congruence on G, M, T, G, L, A we get anti_congruent_triangles(A, G, L, T, G, M)
By anti_congruence_from_anti_similar_triangles on S, A, B, A, S, B we get anti_congruent_triangles(A, B, S, S, B, A)
By parallel_line_angles_v1 on S, F, M, K we get parallel(Line(F, S), Line(K, M))
By perpendicular_bisector_sufficient_conditions on K, L, A, center(Circle(A, F, J)) we get perpendicular_bisector(K, L) == Line(A, center(Circle(A, F, J)))
By parallel_line_angles_v0 on A, T, M, L we get parallel(Line(A, T), Line(L, M))
By parallel_line_angles_v1 on S, A, G, K we get parallel(Line(A, S), Line(G, K))
By parallel_line_angles_v1 on K, G, F, S we get parallel(Line(F, S), Line(G, K))
By perpendicular_bisector_sufficient_conditions on K, M, center(Circle(B, J, K)), J we get perpendicular_bisector(K, M) == Line(J, center(Circle(B, J, K)))
By parallel_line_angles_v1 on midpoint(K, M), K, F, A we get parallel(Line(A, F), Line(K, midpoint(K, M)))
By parallel_line_angles_v1 on T, G, F, M we get parallel(Line(F, M), Line(G, T))
By asa_anti_congruence on F, B, S, F, B, A we get anti_congruent_triangles(A, B, F, S, B, F)
By parallel_line_angles_v0 on A, G, M, midpoint(L, M) we get parallel(Line(A, G), Line(M, midpoint(L, M)))
By parallel_line_angles_v1 on T, G, M, midpoint(L, M) we get parallel(Line(G, T), Line(M, midpoint(L, M)))
By anti_congruence_from_anti_similar_triangles on A, F, K, F, A, G we get anti_congruent_triangles(A, F, G, F, A, K)
By anti_congruence_from_anti_similar_triangles on F, B, A, F, B, S we get anti_congruent_triangles(A, B, F, S, B, F)
By asa_anti_congruence on C, G, T, C, G, A we get anti_congruent_triangles(A, C, G, T, C, G)
By asa_anti_congruence on L, G, A, G, M, F we get anti_congruent_triangles(A, G, L, F, M, G)
By anti_congruence_from_anti_similar_triangles on C, G, T, C, G, A we get anti_congruent_triangles(A, C, G, T, C, G)
By sas_anti_similarity on F, K, midpoint(K, M), A, L, midpoint(K, L) we get anti_similar_triangles(A, L, midpoint(K, L), F, K, midpoint(K, M))
By parallel_line_angles_v0 on midpoint(L, M), L, G, T we get parallel(Line(G, T), Line(L, midpoint(L, M)))
By anti_congruence_from_anti_similar_triangles on L, G, A, M, G, T we get anti_congruent_triangles(A, G, L, T, G, M)
By parallel_line_angles_v1 on L, F, G, T we get parallel(Line(F, L), Line(G, T))
By parallel_line_angles_v1 on G, M, S, A we get parallel(Line(A, S), Line(G, M))
By asa_congruence on F, M, S, M, F, G we get congruent_triangles(F, G, M, M, S, F)
By parallel_line_angles_v1 on S, F, M, midpoint(K, M) we get parallel(Line(F, S), Line(M, midpoint(K, M)))
By parallel_line_angles_v1 on A, F, M, G we get parallel(Line(A, F), Line(G, M))
By anti_congruence_from_anti_similar_triangles on G, M, F, L, G, A we get anti_congruent_triangles(A, G, L, F, M, G)
By perpendicular_bisector_sufficient_conditions on L, M, center(Circle(C, J, L)), J we get perpendicular_bisector(L, M) == Line(J, center(Circle(C, J, L)))
By anti_congruence_from_anti_similar_triangles on G, C, A, G, C, T we get anti_congruent_triangles(A, C, G, T, C, G)
By anti_congruence_from_anti_similar_triangles on G, L, A, G, M, T we get anti_congruent_triangles(A, G, L, T, G, M)
By asa_anti_congruence on S, A, B, A, S, B we get anti_congruent_triangles(A, B, S, S, B, A)
By anti_congruence_from_anti_similar_triangles on M, F, S, K, F, A we get anti_congruent_triangles(A, F, K, S, F, M)
By asa_congruence on A, K, F, L, A, G we get congruent_triangles(A, F, K, L, G, A)
By parallel_line_angles_v1 on L, M, G, T we get parallel(Line(G, T), Line(L, M))
By asa_anti_congruence on F, B, A, F, B, S we get anti_congruent_triangles(A, B, F, S, B, F)
By sas_similarity on F, K, midpoint(K, M), G, M, midpoint(L, M) we get similar_triangles(F, K, midpoint(K, M), G, M, midpoint(L, M))
By asa_anti_congruence on M, G, F, G, L, A we get anti_congruent_triangles(A, G, L, F, M, G)
By asa_anti_congruence on A, S, B, S, A, B we get anti_congruent_triangles(A, B, S, S, B, A)
By aa_anti_similarity on A, L, F, G, F, L we get anti_similar_triangles(A, F, L, G, L, F)
By sas_similarity on A, L, midpoint(K, L), F, M, midpoint(K, M) we get similar_triangles(A, L, midpoint(K, L), F, M, midpoint(K, M))
By asa_anti_congruence on L, G, A, M, G, T we get anti_congruent_triangles(A, G, L, T, G, M)
By asa_anti_congruence on T, A, C, A, T, C we get anti_congruent_triangles(A, C, T, T, C, A)
By asa_congruence on L, A, G, A, K, F we get congruent_triangles(A, F, K, L, G, A)
By asa_congruence on M, G, F, G, M, T we get congruent_triangles(F, G, M, T, M, G)
By perpendicular_bisector_sufficient_conditions on K, L, J, center(Circle(A, F, J)) we get perpendicular_bisector(K, L) == Line(J, center(Circle(A, F, J)))
By sas_similarity on midpoint(K, M), K, F, midpoint(K, L), K, A we get similar_triangles(A, K, midpoint(K, L), F, K, midpoint(K, M))
By anti_congruence_from_anti_similar_triangles on F, K, A, M, F, G we get anti_congruent_triangles(A, F, K, G, M, F)
By sas_anti_similarity on midpoint(K, M), K, F, midpoint(K, L), L, A we get anti_similar_triangles(A, L, midpoint(K, L), F, K, midpoint(K, M))
By anti_congruence_from_anti_similar_triangles on F, A, G, A, F, K we get anti_congruent_triangles(A, F, G, F, A, K)
By sas_similarity on midpoint(K, M), M, F, midpoint(K, L), L, A we get similar_triangles(A, L, midpoint(K, L), F, M, midpoint(K, M))
By aa_anti_similarity on F, K, G, A, G, K we get anti_similar_triangles(A, G, K, F, K, G)
By anti_congruence_from_anti_similar_triangles on A, F, G, F, A, K we get anti_congruent_triangles(A, F, G, F, A, K)
By sas_similarity on A, K, midpoint(K, L), G, M, midpoint(L, M) we get similar_triangles(A, K, midpoint(K, L), G, M, midpoint(L, M))
By sas_anti_similarity on F, M, midpoint(K, M), A, K, midpoint(K, L) we get anti_similar_triangles(A, K, midpoint(K, L), F, M, midpoint(K, M))
By sas_similarity on G, L, midpoint(L, M), A, L, midpoint(K, L) we get similar_triangles(A, L, midpoint(K, L), G, L, midpoint(L, M))
By asa_anti_congruence on L, F, A, F, L, G we get anti_congruent_triangles(A, F, L, G, L, F)
By parallel_line_angles_v1 on G, A, F, M we get parallel(Line(A, G), Line(F, M))
By sas_similarity on midpoint(K, L), L, A, midpoint(L, M), L, G we get similar_triangles(A, L, midpoint(K, L), G, L, midpoint(L, M))
By sas_anti_similarity on midpoint(L, M), M, G, midpoint(K, M), M, F we get anti_similar_triangles(F, M, midpoint(K, M), G, M, midpoint(L, M))
By aa_anti_similarity on A, G, K, F, K, G we get anti_similar_triangles(A, G, K, F, K, G)
By parallel_line_angles_v0 on midpoint(K, M), K, F, S we get parallel(Line(F, S), Line(K, midpoint(K, M)))
By asa_anti_congruence on M, F, G, F, K, A we get anti_congruent_triangles(A, F, K, G, M, F)
By asa_congruence on M, G, T, G, M, F we get congruent_triangles(F, G, M, T, M, G)
By sas_anti_similarity on midpoint(L, M), M, G, midpoint(K, L), L, A we get anti_similar_triangles(A, L, midpoint(K, L), G, M, midpoint(L, M))
By sas_similarity on midpoint(L, M), M, G, midpoint(K, L), K, A we get similar_triangles(A, K, midpoint(K, L), G, M, midpoint(L, M))
By sas_anti_similarity on A, K, midpoint(K, L), G, L, midpoint(L, M) we get anti_similar_triangles(A, K, midpoint(K, L), G, L, midpoint(L, M))
By asa_congruence on F, M, G, M, F, S we get congruent_triangles(F, G, M, M, S, F)
By perpendicular_bisector_sufficient_conditions on L, M, center(Circle(C, J, L)), C we get perpendicular_bisector(L, M) == Line(C, center(Circle(C, J, L)))
By perpendicular_bisector_sufficient_conditions on M, K, B, center(Circle(B, J, K)) we get perpendicular_bisector(K, M) == Line(B, center(Circle(B, J, K)))
By sas_similarity on midpoint(K, M), K, F, midpoint(L, M), M, G we get similar_triangles(F, K, midpoint(K, M), G, M, midpoint(L, M))
By anti_congruence_from_anti_similar_triangles on F, K, A, F, M, S we get anti_congruent_triangles(A, F, K, S, F, M)
By asa_anti_congruence on F, K, A, M, F, G we get anti_congruent_triangles(A, F, K, G, M, F)
By anti_congruence_from_anti_similar_triangles on A, S, B, S, A, B we get anti_congruent_triangles(A, B, S, S, B, A)
By congruence_from_similar_triangles on M, G, F, G, M, T we get congruent_triangles(F, G, M, T, M, G)
By asa_congruence on A, L, G, K, A, F we get congruent_triangles(A, F, K, L, G, A)
By anti_congruence_from_anti_similar_triangles on A, G, L, G, A, F we get anti_congruent_triangles(A, F, G, G, L, A)
By asa_anti_congruence on K, F, A, F, M, G we get anti_congruent_triangles(A, F, K, G, M, F)
By isosceles_triangle_from_angles on B, A, S we get isosceles_triangle(B, A, S)
By asa_anti_congruence on G, K, F, K, G, A we get anti_congruent_triangles(A, G, K, F, K, G)
By sas_anti_similarity on F, K, midpoint(K, M), G, L, midpoint(L, M) we get anti_similar_triangles(F, K, midpoint(K, M), G, L, midpoint(L, M))
By aa_anti_similarity on A, F, L, G, L, F we get anti_similar_triangles(A, F, L, G, L, F)
By anti_congruence_from_anti_similar_triangles on F, M, G, K, F, A we get anti_congruent_triangles(A, F, K, G, M, F)
By asa_anti_congruence on G, L, A, G, M, T we get anti_congruent_triangles(A, G, L, T, G, M)
By anti_congruence_from_anti_similar_triangles on K, F, A, M, F, S we get anti_congruent_triangles(A, F, K, S, F, M)
By sas_anti_similarity on G, L, midpoint(L, M), A, K, midpoint(K, L) we get anti_similar_triangles(A, K, midpoint(K, L), G, L, midpoint(L, M))
By asa_anti_congruence on G, L, A, M, G, F we get anti_congruent_triangles(A, G, L, F, M, G)
By sas_similarity on F, M, midpoint(K, M), A, L, midpoint(K, L) we get similar_triangles(A, L, midpoint(K, L), F, M, midpoint(K, M))
By sas_similarity on A, L, midpoint(K, L), G, L, midpoint(L, M) we get similar_triangles(A, L, midpoint(K, L), G, L, midpoint(L, M))
By isosceles_triangle_from_angles on C, T, A we get isosceles_triangle(C, A, T)
By asa_anti_congruence on F, L, G, L, F, A we get anti_congruent_triangles(A, F, L, G, L, F)
By anti_congruence_from_anti_similar_triangles on A, G, F, G, A, L we get anti_congruent_triangles(A, F, G, G, L, A)
By anti_congruence_from_anti_similar_triangles on K, F, A, F, M, G we get anti_congruent_triangles(A, F, K, G, M, F)
By anti_congruence_from_anti_similar_triangles on B, F, A, B, F, S we get anti_congruent_triangles(A, B, F, S, B, F)
By sas_similarity on midpoint(K, L), L, A, midpoint(K, M), M, F we get similar_triangles(A, L, midpoint(K, L), F, M, midpoint(K, M))
By sas_anti_similarity on A, L, midpoint(K, L), G, M, midpoint(L, M) we get anti_similar_triangles(A, L, midpoint(K, L), G, M, midpoint(L, M))
By congruence_from_similar_triangles on G, M, F, M, G, T we get congruent_triangles(F, G, M, T, M, G)
By sas_anti_similarity on midpoint(K, L), L, A, midpoint(L, M), M, G we get anti_similar_triangles(A, L, midpoint(K, L), G, M, midpoint(L, M))
By asa_anti_congruence on K, G, F, G, K, A we get anti_congruent_triangles(A, G, K, F, K, G)
By sas_similarity on G, M, midpoint(L, M), A, K, midpoint(K, L) we get similar_triangles(A, K, midpoint(K, L), G, M, midpoint(L, M))
By parallel_line_angles_v1 on midpoint(L, M), L, G, A we get parallel(Line(A, G), Line(L, midpoint(L, M)))
By sas_similarity on midpoint(L, M), L, G, midpoint(K, M), M, F we get similar_triangles(F, M, midpoint(K, M), G, L, midpoint(L, M))
By isosceles_triangle_from_angles on C, A, T we get isosceles_triangle(C, A, T)
By congruence_from_similar_triangles on A, K, F, L, A, G we get congruent_triangles(A, F, K, L, G, A)
By anti_congruence_from_anti_similar_triangles on B, F, S, B, F, A we get anti_congruent_triangles(A, B, F, S, B, F)
By aa_anti_similarity on G, L, F, A, F, L we get anti_similar_triangles(A, F, L, G, L, F)
By sas_similarity on midpoint(K, M), M, F, midpoint(L, M), L, G we get similar_triangles(F, M, midpoint(K, M), G, L, midpoint(L, M))
By sas_anti_similarity on G, L, midpoint(L, M), F, K, midpoint(K, M) we get anti_similar_triangles(F, K, midpoint(K, M), G, L, midpoint(L, M))
By sas_anti_similarity on midpoint(K, L), L, A, midpoint(K, M), K, F we get anti_similar_triangles(A, L, midpoint(K, L), F, K, midpoint(K, M))
By asa_anti_congruence on F, A, G, A, F, K we get anti_congruent_triangles(A, F, G, F, A, K)
By anti_congruence_from_anti_similar_triangles on C, G, A, C, G, T we get anti_congruent_triangles(A, C, G, T, C, G)
By sas_anti_similarity on midpoint(L, M), L, G, midpoint(K, M), K, F we get anti_similar_triangles(F, K, midpoint(K, M), G, L, midpoint(L, M))
By congruence_from_similar_triangles on M, F, G, F, M, S we get congruent_triangles(F, G, M, M, S, F)
By asa_anti_congruence on M, F, S, K, F, A we get anti_congruent_triangles(A, F, K, S, F, M)
By sas_anti_similarity on midpoint(K, L), K, A, midpoint(K, M), M, F we get anti_similar_triangles(A, K, midpoint(K, L), F, M, midpoint(K, M))
By sas_anti_similarity on midpoint(L, M), L, G, midpoint(K, L), K, A we get anti_similar_triangles(A, K, midpoint(K, L), G, L, midpoint(L, M))
By congruence_from_similar_triangles on M, F, S, F, M, G we get congruent_triangles(F, G, M, M, S, F)
By anti_congruence_from_anti_similar_triangles on M, F, G, F, K, A we get anti_congruent_triangles(A, F, K, G, M, F)
By asa_anti_congruence on L, F, G, F, L, A we get anti_congruent_triangles(A, F, L, G, L, F)
By asa_anti_congruence on G, K, A, K, G, F we get anti_congruent_triangles(A, G, K, F, K, G)
By parallel_line_angles_v0 on S, A, K, M we get parallel(Line(A, S), Line(K, M))
By asa_anti_congruence on A, F, K, F, A, G we get anti_congruent_triangles(A, F, G, F, A, K)
By isosceles_triangle_from_angles on B, S, A we get isosceles_triangle(B, A, S)
By congruence_from_similar_triangles on M, G, T, G, M, F we get congruent_triangles(F, G, M, T, M, G)
By anti_congruence_from_anti_similar_triangles on G, A, F, A, G, L we get anti_congruent_triangles(A, F, G, G, L, A)
By asa_anti_congruence on G, A, L, A, G, F we get anti_congruent_triangles(A, F, G, G, L, A)
By asa_anti_congruence on A, T, C, T, A, C we get anti_congruent_triangles(A, C, T, T, C, A)
By sas_anti_similarity on A, K, midpoint(K, L), F, M, midpoint(K, M) we get anti_similar_triangles(A, K, midpoint(K, L), F, M, midpoint(K, M))
By asa_anti_congruence on F, K, A, F, M, S we get anti_congruent_triangles(A, F, K, S, F, M)
By sas_similarity on midpoint(L, M), L, G, midpoint(K, L), L, A we get similar_triangles(A, L, midpoint(K, L), G, L, midpoint(L, M))
By aa_anti_similarity on F, G, K, A, K, G we get anti_similar_triangles(A, G, K, F, K, G)
By congruence_from_similar_triangles on G, M, T, M, G, F we get congruent_triangles(F, G, M, T, M, G)
By asa_anti_congruence on A, G, F, G, A, L we get anti_congruent_triangles(A, F, G, G, L, A)
By asa_anti_congruence on A, G, L, G, A, F we get anti_congruent_triangles(A, F, G, G, L, A)
By asa_anti_congruence on G, C, A, G, C, T we get anti_congruent_triangles(A, C, G, T, C, G)
By sas_anti_similarity on F, M, midpoint(K, M), G, M, midpoint(L, M) we get anti_similar_triangles(F, M, midpoint(K, M), G, M, midpoint(L, M))
By asa_anti_congruence on G, C, T, G, C, A we get anti_congruent_triangles(A, C, G, T, C, G)
By anti_congruence_from_anti_similar_triangles on M, G, F, G, L, A we get anti_congruent_triangles(A, G, L, F, M, G)
By anti_congruence_from_anti_similar_triangles on M, G, T, L, G, A we get anti_congruent_triangles(A, G, L, T, G, M)
By asa_anti_congruence on F, A, K, A, F, G we get anti_congruent_triangles(A, F, G, F, A, K)
By anti_congruence_from_anti_similar_triangles on A, T, C, T, A, C we get anti_congruent_triangles(A, C, T, T, C, A)
By sas_anti_similarity on midpoint(K, M), M, F, midpoint(K, L), K, A we get anti_similar_triangles(A, K, midpoint(K, L), F, M, midpoint(K, M))
By anti_congruence_from_anti_similar_triangles on G, L, A, M, G, F we get anti_congruent_triangles(A, G, L, F, M, G)
By asa_anti_congruence on F, L, A, L, F, G we get anti_congruent_triangles(A, F, L, G, L, F)
By asa_anti_congruence on C, G, A, C, G, T we get anti_congruent_triangles(A, C, G, T, C, G)
By asa_anti_congruence on F, M, G, K, F, A we get anti_congruent_triangles(A, F, K, G, M, F)
By asa_anti_congruence on K, G, A, G, K, F we get anti_congruent_triangles(A, G, K, F, K, G)
By congruence_from_similar_triangles on F, M, G, M, F, S we get congruent_triangles(F, G, M, M, S, F)
By sas_similarity on midpoint(K, L), K, A, midpoint(L, M), M, G we get similar_triangles(A, K, midpoint(K, L), G, M, midpoint(L, M))
By asa_anti_congruence on K, F, A, M, F, S we get anti_congruent_triangles(A, F, K, S, F, M)
By asa_anti_congruence on F, M, S, F, K, A we get anti_congruent_triangles(A, F, K, S, F, M)
By aa_anti_similarity on G, F, L, A, L, F we get anti_similar_triangles(A, F, L, G, L, F)
By asa_congruence on G, M, T, M, G, F we get congruent_triangles(F, G, M, T, M, G)
By anti_congruence_from_anti_similar_triangles on L, G, A, G, M, F we get anti_congruent_triangles(A, G, L, F, M, G)
By asa_congruence on K, A, F, A, L, G we get congruent_triangles(A, F, K, L, G, A)
By asa_congruence on G, M, F, M, G, T we get congruent_triangles(F, G, M, T, M, G)
By sas_similarity on midpoint(L, M), M, G, midpoint(K, M), K, F we get similar_triangles(F, K, midpoint(K, M), G, M, midpoint(L, M))
By sas_similarity on G, L, midpoint(L, M), F, M, midpoint(K, M) we get similar_triangles(F, M, midpoint(K, M), G, L, midpoint(L, M))
By asa_anti_congruence on G, M, F, L, G, A we get anti_congruent_triangles(A, G, L, F, M, G)
By sas_anti_similarity on A, L, midpoint(K, L), F, K, midpoint(K, M) we get anti_similar_triangles(A, L, midpoint(K, L), F, K, midpoint(K, M))
By asa_anti_congruence on A, F, G, F, A, K we get anti_congruent_triangles(A, F, G, F, A, K)
By sas_anti_similarity on G, M, midpoint(L, M), F, M, midpoint(K, M) we get anti_similar_triangles(F, M, midpoint(K, M), G, M, midpoint(L, M))
By anti_congruence_from_anti_similar_triangles on F, M, S, F, K, A we get anti_congruent_triangles(A, F, K, S, F, M)
By congruence_from_similar_triangles on F, M, S, M, F, G we get congruent_triangles(F, G, M, M, S, F)
By sas_anti_similarity on G, M, midpoint(L, M), A, L, midpoint(K, L) we get anti_similar_triangles(A, L, midpoint(K, L), G, M, midpoint(L, M))
By asa_anti_congruence on B, F, S, B, F, A we get anti_congruent_triangles(A, B, F, S, B, F)
By asa_congruence on M, F, S, F, M, G we get congruent_triangles(F, G, M, M, S, F)
By anti_congruence_from_anti_similar_triangles on G, M, T, G, L, A we get anti_congruent_triangles(A, G, L, T, G, M)
By sas_similarity on F, M, midpoint(K, M), G, L, midpoint(L, M) we get similar_triangles(F, M, midpoint(K, M), G, L, midpoint(L, M))
By asa_anti_congruence on B, F, A, B, F, S we get anti_congruent_triangles(A, B, F, S, B, F)
By aa_anti_similarity on A, K, G, F, G, K we get anti_similar_triangles(A, G, K, F, K, G)
By sas_similarity on A, K, midpoint(K, L), F, K, midpoint(K, M) we get similar_triangles(A, K, midpoint(K, L), F, K, midpoint(K, M))
By asa_anti_congruence on M, G, T, L, G, A we get anti_congruent_triangles(A, G, L, T, G, M)
By congruence_from_similar_triangles on K, A, F, A, L, G we get congruent_triangles(A, F, K, L, G, A)
By anti_congruence_from_anti_similar_triangles on T, A, C, A, T, C we get anti_congruent_triangles(A, C, T, T, C, A)
By sas_similarity on G, M, midpoint(L, M), F, K, midpoint(K, M) we get similar_triangles(F, K, midpoint(K, M), G, M, midpoint(L, M))
By anti_congruence_from_anti_similar_triangles on G, A, L, A, G, F we get anti_congruent_triangles(A, F, G, G, L, A)
By sas_anti_similarity on midpoint(K, L), K, A, midpoint(L, M), L, G we get anti_similar_triangles(A, K, midpoint(K, L), G, L, midpoint(L, M))
By congruence_from_similar_triangles on A, L, G, K, A, F we get congruent_triangles(A, F, K, L, G, A)
By congruence_from_similar_triangles on L, A, G, A, K, F we get congruent_triangles(A, F, K, L, G, A)
By sas_similarity on F, K, midpoint(K, M), A, K, midpoint(K, L) we get similar_triangles(A, K, midpoint(K, L), F, K, midpoint(K, M))
By parallel_line_angles_v0 on midpoint(K, M), M, F, A we get parallel(Line(A, F), Line(M, midpoint(K, M)))
By perpendicular_direction_conditions_v0_r on G, line_intersection(Line(F, G), Line(J, M)), line_intersection(Line(F, G), Line(J, M)), J we get 180 == 2 * direction(G, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), F, line_intersection(Line(F, G), Line(J, M)), M we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), F) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(F, G), Line(J, M)), line_intersection(Line(F, G), Line(J, M)), J we get 180 == 2 * direction(F, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) mod 360
By perpendicular_direction_conditions_v0_r on M, line_intersection(Line(F, G), Line(J, M)), F, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(F, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), F, M, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), F) - 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on J, line_intersection(Line(F, G), Line(J, M)), G, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(G, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), J, line_intersection(Line(F, G), Line(J, M)), F we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), F) mod 360
By similar_triangle_basic_properties on M, L, C, T, A, C we get angle(M, L, C) == angle(T, A, C) mod 360, angle(A, C, T) == angle(L, C, M) mod 360, angle(C, M, L) == angle(C, T, A) mod 360, log(distance(A, T)) + log(distance(C, L)) == log(distance(L, M)) + log(distance(A, C)), log(distance(A, C)) + log(distance(C, M)) == log(distance(C, L)) + log(distance(C, T)), log(distance(C, M)) + log(distance(A, T)) == log(distance(C, T)) + log(distance(L, M))
By perpendicular_direction_conditions_v0_r on J, line_intersection(Line(F, G), Line(J, M)), line_intersection(Line(F, G), Line(J, M)), F we get 180 == 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), F) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(Line(F, G), Line(J, M)), J, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(G, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), M, line_intersection(Line(F, G), Line(J, M)), G we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), G) mod 360
By perpendicular_direction_conditions_v0_r on J, line_intersection(Line(F, G), Line(J, M)), line_intersection(Line(F, G), Line(J, M)), G we get 180 == 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), G, J, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), G) - 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(F, G), Line(J, M)), line_intersection(Line(F, G), Line(J, M)), M we get 180 == 2 * direction(F, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) mod 360
By perpendicular_direction_conditions_v0_r on J, line_intersection(Line(F, G), Line(J, M)), F, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(F, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), F, J, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), F) - 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), G, M, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), G) - 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), G, line_intersection(Line(F, G), Line(J, M)), J we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), G) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(Line(F, G), Line(J, M)), M, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(G, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on M, line_intersection(Line(F, G), Line(J, M)), line_intersection(Line(F, G), Line(J, M)), F we get 180 == 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), G, line_intersection(Line(F, G), Line(J, M)), M we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), G) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), M, F, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) - 2 * direction(F, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), M, G, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) - 2 * direction(G, line_intersection(Line(F, G), Line(J, M))) mod 360
By external_angle_bisector_definition_v0_r on L, S, K, F we get Line(F, S) == external_angle_bisector(K, F, L)
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), J, line_intersection(Line(F, G), Line(J, M)), G we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), G) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(F, G), Line(J, M)), J, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(F, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(J, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), J, G, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) - 2 * direction(G, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), F, line_intersection(Line(F, G), Line(J, M)), J we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), F) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), J, F, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), J) - 2 * direction(F, line_intersection(Line(F, G), Line(J, M))) mod 360
By anti_similar_triangle_basic_properties on F, midpoint(K, M), K, F, midpoint(K, M), M we get angle(F, midpoint(K, M), K) == 0 - angle(F, midpoint(K, M), M) mod 360, angle(midpoint(K, M), K, F) == 0 - angle(midpoint(K, M), M, F) mod 360, angle(K, F, midpoint(K, M)) == 0 - angle(M, F, midpoint(K, M)) mod 360, log(distance(F, midpoint(K, M))) + log(distance(K, midpoint(K, M))) == log(distance(F, midpoint(K, M))) + log(distance(M, midpoint(K, M))), log(distance(K, midpoint(K, M))) + log(distance(F, M)) == log(distance(M, midpoint(K, M))) + log(distance(F, K)), log(distance(F, K)) + log(distance(F, midpoint(K, M))) == log(distance(F, M)) + log(distance(F, midpoint(K, M)))
By perpendicular_direction_conditions_v0_r on M, line_intersection(Line(F, G), Line(J, M)), line_intersection(Line(F, G), Line(J, M)), G we get 180 == 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), G) mod 360
By perpendicular_direction_conditions_v0_r on M, line_intersection(Line(F, G), Line(J, M)), G, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(G, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(Line(F, G), Line(J, M)), line_intersection(Line(F, G), Line(J, M)), M we get 180 == 2 * direction(G, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(F, G), Line(J, M)), M, line_intersection(Line(F, G), Line(J, M)) we get 180 == 2 * direction(F, line_intersection(Line(F, G), Line(J, M))) - 2 * direction(M, line_intersection(Line(F, G), Line(J, M))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, G), Line(J, M)), M, line_intersection(Line(F, G), Line(J, M)), F we get 180 == 2 * direction(line_intersection(Line(F, G), Line(J, M)), M) - 2 * direction(line_intersection(Line(F, G), Line(J, M)), F) mod 360
By external_angle_bisector_definition_v0_r on M, A, L, G we get Line(A, G) == external_angle_bisector(L, G, M)
By external_angle_bisector_definition_v0_r on T, C, T, G we get Line(C, G) == external_angle_bisector(T, G, T)
By external_angle_bisector_definition_v0_r on A, J, A, G we get Line(G, J) == external_angle_bisector(A, G, A)
By reverse_direction on center(Circle(A, F, J)), J we get 180 == direction(center(Circle(A, F, J)), J) - direction(J, center(Circle(A, F, J))) mod 360
By similar_triangle_basic_properties on K, F, A, K, M, L we get angle(K, F, A) == angle(K, M, L) mod 360, angle(F, A, K) == angle(M, L, K) mod 360, angle(A, K, F) == angle(L, K, M) mod 360, log(distance(F, K)) + log(distance(L, M)) == log(distance(K, M)) + log(distance(A, F)), log(distance(A, F)) + log(distance(K, L)) == log(distance(L, M)) + log(distance(A, K)), log(distance(A, K)) + log(distance(K, M)) == log(distance(K, L)) + log(distance(F, K))
By external_angle_bisector_definition_v0_r on K, A, M, F we get Line(A, F) == external_angle_bisector(K, F, M)
By anti_similar_triangle_basic_properties on B, A, F, B, J, K we get angle(B, A, F) == 0 - angle(B, J, K) mod 360, angle(A, F, B) == 0 - angle(J, K, B) mod 360, angle(F, B, A) == 0 - angle(K, B, J) mod 360, log(distance(A, B)) + log(distance(J, K)) == log(distance(B, J)) + log(distance(A, F)), log(distance(A, F)) + log(distance(B, K)) == log(distance(J, K)) + log(distance(B, F)), log(distance(B, F)) + log(distance(B, J)) == log(distance(B, K)) + log(distance(A, B))
By anti_similar_triangle_basic_properties on G, J, A, K, J, B we get angle(G, J, A) == 0 - angle(K, J, B) mod 360, angle(J, A, G) == 0 - angle(J, B, K) mod 360, angle(A, G, J) == 0 - angle(B, K, J) mod 360, log(distance(G, J)) + log(distance(B, J)) == log(distance(J, K)) + log(distance(A, J)), log(distance(A, J)) + log(distance(B, K)) == log(distance(B, J)) + log(distance(A, G)), log(distance(A, G)) + log(distance(J, K)) == log(distance(B, K)) + log(distance(G, J))
By external_angle_bisector_definition_v0_r on L, T, M, G we get Line(G, T) == external_angle_bisector(L, G, M)
By similar_triangle_basic_properties on C, A, T, C, L, M we get angle(C, A, T) == angle(C, L, M) mod 360, angle(A, T, C) == angle(L, M, C) mod 360, angle(M, C, L) == angle(T, C, A) mod 360, log(distance(A, C)) + log(distance(L, M)) == log(distance(C, L)) + log(distance(A, T)), log(distance(A, T)) + log(distance(C, M)) == log(distance(L, M)) + log(distance(C, T)), log(distance(C, M)) + log(distance(A, C)) == log(distance(C, T)) + log(distance(C, L))
By external_angle_bisector_definition_v0_r on B, S, J, F we get Line(F, S) == external_angle_bisector(B, F, J)
By anti_similar_triangle_basic_properties on T, A, C, A, T, C we get angle(T, A, C) == 0 - angle(A, T, C) mod 360, angle(A, C, T) == 0 - angle(T, C, A) mod 360, angle(C, T, A) == 0 - angle(C, A, T) mod 360, log(distance(A, T)) + log(distance(A, C)) == log(distance(A, T)) + log(distance(C, T)), log(distance(A, C)) + log(distance(A, C)) == log(distance(C, T)) + log(distance(C, T)), log(distance(A, C)) + log(distance(A, T)) == log(distance(C, T)) + log(distance(A, T))
By anti_similar_triangle_basic_properties on T, G, M, K, M, L we get angle(T, G, M) == 0 - angle(K, M, L) mod 360, angle(G, M, T) == 0 - angle(M, L, K) mod 360, angle(M, T, G) == 0 - angle(L, K, M) mod 360, log(distance(G, T)) + log(distance(L, M)) == log(distance(K, M)) + log(distance(G, M)), log(distance(G, M)) + log(distance(K, L)) == log(distance(L, M)) + log(distance(M, T)), log(distance(K, L)) + log(distance(G, T)) == log(distance(M, T)) + log(distance(K, M))
By external_angle_bisector_definition_v0_r on C, T, J, G we get Line(G, T) == external_angle_bisector(C, G, J)
By external_angle_bisector_definition_v0_r on J, A, J, G we get Line(A, G) == external_angle_bisector(J, G, J)
By external_angle_bisector_definition_v0_r on J, S, J, F we get Line(F, S) == external_angle_bisector(J, F, J)
By external_angle_bisector_definition_v0_r on A, J, A, F we get Line(F, J) == external_angle_bisector(A, F, A)
By internal_angle_bisector_definition_v0_r on M, B, K, center(Circle(B, J, K)) we get Line(B, center(Circle(B, J, K))) == internal_angle_bisector(K, center(Circle(B, J, K)), M)
By anti_similar_triangle_basic_properties on J, C, L, J, A, F we get angle(J, C, L) == 0 - angle(J, A, F) mod 360, angle(C, L, J) == 0 - angle(A, F, J) mod 360, angle(L, J, C) == 0 - angle(F, J, A) mod 360, log(distance(A, J)) + log(distance(C, L)) == log(distance(C, J)) + log(distance(A, F)), log(distance(A, F)) + log(distance(J, L)) == log(distance(C, L)) + log(distance(F, J)), log(distance(F, J)) + log(distance(C, J)) == log(distance(J, L)) + log(distance(A, J))
By external_angle_bisector_definition_v0_r on C, A, C, G we get Line(A, G) == external_angle_bisector(C, G, C)
By anti_similar_triangle_basic_properties on A, S, B, M, K, B we get angle(A, S, B) == 0 - angle(M, K, B) mod 360, angle(S, B, A) == 0 - angle(K, B, M) mod 360, angle(B, A, S) == 0 - angle(B, M, K) mod 360, log(distance(A, S)) + log(distance(B, K)) == log(distance(K, M)) + log(distance(B, S)), log(distance(B, K)) + log(distance(A, B)) == log(distance(B, S)) + log(distance(B, M)), log(distance(A, B)) + log(distance(K, M)) == log(distance(B, M)) + log(distance(A, S))
By similar_triangle_basic_properties on B, J, M, B, A, F we get angle(B, A, F) == angle(B, J, M) mod 360, angle(A, F, B) == angle(J, M, B) mod 360, angle(F, B, A) == angle(M, B, J) mod 360, log(distance(A, B)) + log(distance(J, M)) == log(distance(B, J)) + log(distance(A, F)), log(distance(A, F)) + log(distance(B, M)) == log(distance(J, M)) + log(distance(B, F)), log(distance(B, F)) + log(distance(B, J)) == log(distance(B, M)) + log(distance(A, B))
By anti_similar_triangle_basic_properties on F, M, G, K, M, L we get angle(F, M, G) == 0 - angle(K, M, L) mod 360, angle(M, G, F) == 0 - angle(M, L, K) mod 360, angle(G, F, M) == 0 - angle(L, K, M) mod 360, log(distance(F, M)) + log(distance(L, M)) == log(distance(K, M)) + log(distance(G, M)), log(distance(G, M)) + log(distance(K, L)) == log(distance(L, M)) + log(distance(F, G)), log(distance(F, G)) + log(distance(K, M)) == log(distance(K, L)) + log(distance(F, M))
By similar_triangle_basic_properties on F, S, B, K, J, B we get angle(F, S, B) == angle(K, J, B) mod 360, angle(J, B, K) == angle(S, B, F) mod 360, angle(B, F, S) == angle(B, K, J) mod 360, log(distance(F, S)) + log(distance(B, J)) == log(distance(J, K)) + log(distance(B, S)), log(distance(B, J)) + log(distance(B, F)) == log(distance(B, S)) + log(distance(B, K)), log(distance(B, F)) + log(distance(J, K)) == log(distance(B, K)) + log(distance(F, S))
By external_angle_bisector_definition_v0 on B, line_intersection(Line(F, G), Line(J, M)), B, M we get 180 == angle(B, M, line_intersection(Line(F, G), Line(J, M))) + angle(B, M, line_intersection(Line(F, G), Line(J, M))) mod 360
By anti_similar_triangle_basic_properties on B, J, K, A, J, G we get angle(B, J, K) == 0 - angle(A, J, G) mod 360, angle(J, K, B) == 0 - angle(J, G, A) mod 360, angle(K, B, J) == 0 - angle(G, A, J) mod 360, log(distance(A, J)) + log(distance(J, K)) == log(distance(B, J)) + log(distance(G, J)), log(distance(G, J)) + log(distance(B, K)) == log(distance(J, K)) + log(distance(A, G)), log(distance(A, G)) + log(distance(B, J)) == log(distance(B, K)) + log(distance(A, J))
By similar_triangle_basic_properties on A, L, G, K, L, M we get angle(A, L, G) == angle(K, L, M) mod 360, angle(L, G, A) == angle(L, M, K) mod 360, angle(G, A, L) == angle(M, K, L) mod 360, log(distance(A, L)) + log(distance(L, M)) == log(distance(K, L)) + log(distance(G, L)), log(distance(G, L)) + log(distance(K, M)) == log(distance(L, M)) + log(distance(A, G)), log(distance(A, G)) + log(distance(K, L)) == log(distance(K, M)) + log(distance(A, L))
By anti_similar_triangle_basic_properties on midpoint(L, M), M, G, midpoint(L, M), L, G we get angle(midpoint(L, M), M, G) == 0 - angle(midpoint(L, M), L, G) mod 360, angle(M, G, midpoint(L, M)) == 0 - angle(L, G, midpoint(L, M)) mod 360, angle(G, midpoint(L, M), M) == 0 - angle(G, midpoint(L, M), L) mod 360, log(distance(L, midpoint(L, M))) + log(distance(G, M)) == log(distance(M, midpoint(L, M))) + log(distance(G, L)), log(distance(G, L)) + log(distance(G, midpoint(L, M))) == log(distance(G, M)) + log(distance(G, midpoint(L, M))), log(distance(G, midpoint(L, M))) + log(distance(L, midpoint(L, M))) == log(distance(G, midpoint(L, M))) + log(distance(M, midpoint(L, M)))
By similar_triangle_basic_properties on A, J, F, C, J, M we get angle(A, J, F) == angle(C, J, M) mod 360, angle(J, F, A) == angle(J, M, C) mod 360, angle(F, A, J) == angle(M, C, J) mod 360, log(distance(A, J)) + log(distance(J, M)) == log(distance(C, J)) + log(distance(F, J)), log(distance(F, J)) + log(distance(C, M)) == log(distance(J, M)) + log(distance(A, F)), log(distance(A, F)) + log(distance(C, J)) == log(distance(C, M)) + log(distance(A, J))
By anti_similar_triangle_basic_properties on F, B, S, M, B, J we get angle(F, B, S) == 0 - angle(M, B, J) mod 360, angle(B, S, F) == 0 - angle(B, J, M) mod 360, angle(S, F, B) == 0 - angle(J, M, B) mod 360, log(distance(B, F)) + log(distance(B, J)) == log(distance(B, M)) + log(distance(B, S)), log(distance(B, J)) + log(distance(F, S)) == log(distance(B, S)) + log(distance(J, M)), log(distance(F, S)) + log(distance(B, M)) == log(distance(J, M)) + log(distance(B, F))
By external_angle_bisector_definition_v0_r on J, A, J, F we get Line(A, F) == external_angle_bisector(J, F, J)
By similar_triangle_basic_properties on F, G, J, B, C, J we get angle(B, C, J) == angle(F, G, J) mod 360, angle(C, J, B) == angle(G, J, F) mod 360, angle(J, B, C) == angle(J, F, G) mod 360, log(distance(B, C)) + log(distance(G, J)) == log(distance(F, G)) + log(distance(C, J)), log(distance(C, J)) + log(distance(F, J)) == log(distance(G, J)) + log(distance(B, J)), log(distance(B, J)) + log(distance(F, G)) == log(distance(F, J)) + log(distance(B, C))
By similar_triangle_basic_properties on M, K, B, S, A, B we get angle(M, K, B) == angle(S, A, B) mod 360, angle(A, B, S) == angle(K, B, M) mod 360, angle(B, M, K) == angle(B, S, A) mod 360, log(distance(A, S)) + log(distance(B, K)) == log(distance(K, M)) + log(distance(A, B)), log(distance(A, B)) + log(distance(B, M)) == log(distance(B, K)) + log(distance(B, S)), log(distance(B, M)) + log(distance(A, S)) == log(distance(B, S)) + log(distance(K, M))
By similar_triangle_basic_properties on J, G, F, J, C, B we get angle(J, C, B) == angle(J, G, F) mod 360, angle(C, B, J) == angle(G, F, J) mod 360, angle(B, J, C) == angle(F, J, G) mod 360, log(distance(C, J)) + log(distance(F, G)) == log(distance(G, J)) + log(distance(B, C)), log(distance(B, C)) + log(distance(F, J)) == log(distance(F, G)) + log(distance(B, J)), log(distance(B, J)) + log(distance(G, J)) == log(distance(F, J)) + log(distance(C, J))
By external_angle_bisector_definition_v0_r on S, B, S, F we get Line(B, F) == external_angle_bisector(S, F, S)
By external_angle_bisector_definition_v0 on S, line_intersection(Line(F, G), Line(J, M)), S, M we get 180 == angle(S, M, line_intersection(Line(F, G), Line(J, M))) + angle(S, M, line_intersection(Line(F, G), Line(J, M))) mod 360
By anti_similar_triangle_basic_properties on K, L, M, F, G, M we get angle(K, L, M) == 0 - angle(F, G, M) mod 360, angle(L, M, K) == 0 - angle(G, M, F) mod 360, angle(M, K, L) == 0 - angle(M, F, G) mod 360, log(distance(F, G)) + log(distance(L, M)) == log(distance(K, L)) + log(distance(G, M)), log(distance(G, M)) + log(distance(K, M)) == log(distance(L, M)) + log(distance(F, M)), log(distance(F, M)) + log(distance(K, L)) == log(distance(K, M)) + log(distance(F, G))
By external_angle_bisector_definition_v0_r on K, S, M, F we get Line(F, S) == external_angle_bisector(K, F, M)
By external_angle_bisector_definition_v0_r on B, S, B, F we get Line(F, S) == external_angle_bisector(B, F, B)
By external_angle_bisector_definition_v0_r on C, A, J, G we get Line(A, G) == external_angle_bisector(C, G, J)
By external_angle_bisector_definition_v0_r on L, T, K, G we get Line(G, T) == external_angle_bisector(K, G, L)
By reverse_direction on center(Circle(C, J, L)), L we get 180 == direction(center(Circle(C, J, L)), L) - direction(L, center(Circle(C, J, L))) mod 360
By power_of_a_point_on_circle on G, Circle(A, F, J) we get 0 == power_of_a_point(G, Circle(A, F, J))
By perpendicular_angle_conditions_v0 on line_intersection(Line(F, G), Line(J, M)), M, C we get angle(line_intersection(Line(F, G), Line(J, M)), M, C) == orientation(C, line_intersection(Line(F, G), Line(J, M)), M) mod 360
By anti_similar_triangle_basic_properties on J, M, C, T, G, C we get angle(J, M, C) == 0 - angle(T, G, C) mod 360, angle(M, C, J) == 0 - angle(G, C, T) mod 360, angle(C, J, M) == 0 - angle(C, T, G) mod 360, log(distance(G, T)) + log(distance(C, M)) == log(distance(J, M)) + log(distance(C, G)), log(distance(C, G)) + log(distance(C, J)) == log(distance(C, M)) + log(distance(C, T)), log(distance(C, J)) + log(distance(G, T)) == log(distance(C, T)) + log(distance(J, M))
By external_angle_bisector_definition_v0_r on K, A, L, F we get Line(A, F) == external_angle_bisector(K, F, L)
By similar_triangle_basic_properties on A, S, B, K, M, B we get angle(A, S, B) == angle(K, M, B) mod 360, angle(M, B, K) == angle(S, B, A) mod 360, angle(B, A, S) == angle(B, K, M) mod 360, log(distance(A, S)) + log(distance(B, M)) == log(distance(K, M)) + log(distance(B, S)), log(distance(B, M)) + log(distance(A, B)) == log(distance(B, S)) + log(distance(B, K)), log(distance(A, B)) + log(distance(K, M)) == log(distance(B, K)) + log(distance(A, S))
By anti_similar_triangle_basic_properties on K, M, L, M, F, S we get angle(K, M, L) == 0 - angle(M, F, S) mod 360, angle(M, L, K) == 0 - angle(F, S, M) mod 360, angle(L, K, M) == 0 - angle(S, M, F) mod 360, log(distance(F, M)) + log(distance(L, M)) == log(distance(K, M)) + log(distance(F, S)), log(distance(F, S)) + log(distance(K, L)) == log(distance(L, M)) + log(distance(M, S)), log(distance(K, L)) + log(distance(F, M)) == log(distance(M, S)) + log(distance(K, M))
By similar_triangle_basic_properties on K, L, M, K, A, F we get angle(K, A, F) == angle(K, L, M) mod 360, angle(A, F, K) == angle(L, M, K) mod 360, angle(F, K, A) == angle(M, K, L) mod 360, log(distance(A, K)) + log(distance(L, M)) == log(distance(K, L)) + log(distance(A, F)), log(distance(A, F)) + log(distance(K, M)) == log(distance(L, M)) + log(distance(F, K)), log(distance(F, K)) + log(distance(K, L)) == log(distance(K, M)) + log(distance(A, K))
By similar_triangle_basic_properties on J, A, F, J, C, M we get angle(J, A, F) == angle(J, C, M) mod 360, angle(A, F, J) == angle(C, M, J) mod 360, angle(F, J, A) == angle(M, J, C) mod 360, log(distance(A, J)) + log(distance(C, M)) == log(distance(C, J)) + log(distance(A, F)), log(distance(A, F)) + log(distance(J, M)) == log(distance(C, M)) + log(distance(F, J)), log(distance(F, J)) + log(distance(C, J)) == log(distance(J, M)) + log(distance(A, J))
By internal_angle_bisector_definition_v0 on S, line_intersection(Line(F, G), Line(J, M)), T, M we get angle(S, M, line_intersection(Line(F, G), Line(J, M))) == angle(line_intersection(Line(F, G), Line(J, M)), M, T) mod 360
By anti_similar_triangle_basic_properties on A, B, F, J, B, K we get angle(A, B, F) == 0 - angle(J, B, K) mod 360, angle(B, F, A) == 0 - angle(B, K, J) mod 360, angle(F, A, B) == 0 - angle(K, J, B) mod 360, log(distance(A, B)) + log(distance(B, K)) == log(distance(B, J)) + log(distance(B, F)), log(distance(B, F)) + log(distance(J, K)) == log(distance(B, K)) + log(distance(A, F)), log(distance(A, F)) + log(distance(B, J)) == log(distance(J, K)) + log(distance(A, B))
By external_angle_bisector_definition_v0_r on J, A, B, F we get Line(A, F) == external_angle_bisector(B, F, J)
By collinear_definition on M, line_intersection(Line(F, G), Line(J, M)), J we get line_intersection(Line(F, G), Line(J, M)) in Line(J, M), J in Line(M, line_intersection(Line(F, G), Line(J, M))), Line(J, M) == Line(M, line_intersection(Line(F, G), Line(J, M))), 0 == 2 * angle(line_intersection(Line(F, G), Line(J, M)), M, J) mod 360
By external_angle_bisector_definition_v0_r on S, J, S, F we get Line(F, J) == external_angle_bisector(S, F, S)
By external_angle_bisector_definition_v0_r on A, B, A, F we get Line(B, F) == external_angle_bisector(A, F, A)
By similar_triangle_basic_properties on M, J, C, G, A, C we get angle(G, A, C) == angle(M, J, C) mod 360, angle(A, C, G) == angle(J, C, M) mod 360, angle(C, G, A) == angle(C, M, J) mod 360, log(distance(A, G)) + log(distance(C, J)) == log(distance(J, M)) + log(distance(A, C)), log(distance(A, C)) + log(distance(C, M)) == log(distance(C, J)) + log(distance(C, G)), log(distance(C, G)) + log(distance(J, M)) == log(distance(C, M)) + log(distance(A, G))
By external_angle_bisector_definition_v0_r on B, A, B, F we get Line(A, F) == external_angle_bisector(B, F, B)
By external_angle_bisector_definition_v0_r on C, T, C, G we get Line(G, T) == external_angle_bisector(C, G, C)
By similar_triangle_basic_properties on L, A, G, L, K, M we get angle(L, A, G) == angle(L, K, M) mod 360, angle(A, G, L) == angle(K, M, L) mod 360, angle(G, L, A) == angle(M, L, K) mod 360, log(distance(A, L)) + log(distance(K, M)) == log(distance(K, L)) + log(distance(A, G)), log(distance(A, G)) + log(distance(L, M)) == log(distance(K, M)) + log(distance(G, L)), log(distance(G, L)) + log(distance(K, L)) == log(distance(L, M)) + log(distance(A, L))
By internal_angle_bisector_definition_v0_r on L, J, K, center(Circle(A, F, J)) we get Line(J, center(Circle(A, F, J))) == internal_angle_bisector(K, center(Circle(A, F, J)), L)
By internal_angle_bisector_definition_v0_r on B, J, B, center(Circle(B, J, K)) we get Line(J, center(Circle(B, J, K))) == internal_angle_bisector(B, center(Circle(B, J, K)), B)
By external_angle_bisector_definition_v0_r on A, C, A, G we get Line(C, G) == external_angle_bisector(A, G, A)
By internal_angle_bisector_definition_v0_r on M, J, L, center(Circle(C, J, L)) we get Line(J, center(Circle(C, J, L))) == internal_angle_bisector(L, center(Circle(C, J, L)), M)
By internal_angle_bisector_definition_v0 on T, line_intersection(Line(F, G), Line(J, M)), B, M we get angle(T, M, line_intersection(Line(F, G), Line(J, M))) == angle(line_intersection(Line(F, G), Line(J, M)), M, B) mod 360
By anti_similar_triangle_basic_properties on C, J, L, A, J, F we get angle(C, J, L) == 0 - angle(A, J, F) mod 360, angle(J, L, C) == 0 - angle(J, F, A) mod 360, angle(L, C, J) == 0 - angle(F, A, J) mod 360, log(distance(A, J)) + log(distance(J, L)) == log(distance(C, J)) + log(distance(F, J)), log(distance(F, J)) + log(distance(C, L)) == log(distance(J, L)) + log(distance(A, F)), log(distance(A, F)) + log(distance(C, J)) == log(distance(C, L)) + log(distance(A, J))
By anti_similar_triangle_basic_properties on M, C, L, A, C, T we get angle(M, C, L) == 0 - angle(A, C, T) mod 360, angle(C, L, M) == 0 - angle(C, T, A) mod 360, angle(L, M, C) == 0 - angle(T, A, C) mod 360, log(distance(A, C)) + log(distance(C, L)) == log(distance(C, M)) + log(distance(C, T)), log(distance(C, L)) + log(distance(A, T)) == log(distance(C, T)) + log(distance(L, M)), log(distance(A, T)) + log(distance(C, M)) == log(distance(L, M)) + log(distance(A, C))
By similar_triangle_basic_properties on A, B, F, J, B, M we get angle(A, B, F) == angle(J, B, M) mod 360, angle(B, F, A) == angle(B, M, J) mod 360, angle(F, A, B) == angle(M, J, B) mod 360, log(distance(A, B)) + log(distance(B, M)) == log(distance(B, J)) + log(distance(B, F)), log(distance(B, F)) + log(distance(J, M)) == log(distance(B, M)) + log(distance(A, F)), log(distance(A, F)) + log(distance(B, J)) == log(distance(J, M)) + log(distance(A, B))
By similar_triangle_basic_properties on G, C, T, L, C, J we get angle(G, C, T) == angle(L, C, J) mod 360, angle(C, J, L) == angle(C, T, G) mod 360, angle(J, L, C) == angle(T, G, C) mod 360, log(distance(C, G)) + log(distance(C, J)) == log(distance(C, L)) + log(distance(C, T)), log(distance(C, J)) + log(distance(G, T)) == log(distance(C, T)) + log(distance(J, L)), log(distance(G, T)) + log(distance(C, L)) == log(distance(J, L)) + log(distance(C, G))
By anti_similar_triangle_basic_properties on T, M, G, K, L, M we get angle(T, M, G) == 0 - angle(K, L, M) mod 360, angle(M, G, T) == 0 - angle(L, M, K) mod 360, angle(G, T, M) == 0 - angle(M, K, L) mod 360, log(distance(K, L)) + log(distance(G, M)) == log(distance(M, T)) + log(distance(L, M)), log(distance(G, M)) + log(distance(K, M)) == log(distance(L, M)) + log(distance(G, T)), log(distance(G, T)) + log(distance(K, L)) == log(distance(K, M)) + log(distance(M, T))
By anti_similar_triangle_basic_properties on A, B, S, M, B, K we get angle(A, B, S) == 0 - angle(M, B, K) mod 360, angle(B, S, A) == 0 - angle(B, K, M) mod 360, angle(S, A, B) == 0 - angle(K, M, B) mod 360, log(distance(A, B)) + log(distance(B, K)) == log(distance(B, M)) + log(distance(B, S)), log(distance(B, K)) + log(distance(A, S)) == log(distance(B, S)) + log(distance(K, M)), log(distance(A, S)) + log(distance(B, M)) == log(distance(K, M)) + log(distance(A, B))
By reverse_direction on center(Circle(B, J, K)), M we get 180 == direction(center(Circle(B, J, K)), M) - direction(M, center(Circle(B, J, K))) mod 360
By internal_angle_bisector_definition_v0_r on J, B, J, center(Circle(B, J, K)) we get Line(B, center(Circle(B, J, K))) == internal_angle_bisector(J, center(Circle(B, J, K)), J)
By similar_triangle_basic_properties on G, T, C, L, J, C we get angle(G, T, C) == angle(L, J, C) mod 360, angle(J, C, L) == angle(T, C, G) mod 360, angle(C, G, T) == angle(C, L, J) mod 360, log(distance(G, T)) + log(distance(C, J)) == log(distance(J, L)) + log(distance(C, T)), log(distance(C, J)) + log(distance(C, G)) == log(distance(C, T)) + log(distance(C, L)), log(distance(C, G)) + log(distance(J, L)) == log(distance(C, L)) + log(distance(G, T))
By anti_similar_triangle_basic_properties on K, L, M, M, S, F we get angle(K, L, M) == 0 - angle(M, S, F) mod 360, angle(L, M, K) == 0 - angle(S, F, M) mod 360, angle(M, K, L) == 0 - angle(F, M, S) mod 360, log(distance(K, L)) + log(distance(F, S)) == log(distance(M, S)) + log(distance(L, M)), log(distance(F, S)) + log(distance(K, M)) == log(distance(L, M)) + log(distance(F, M)), log(distance(F, M)) + log(distance(K, L)) == log(distance(K, M)) + log(distance(M, S))
By anti_similar_triangle_basic_properties on A, C, G, J, C, L we get angle(A, C, G) == 0 - angle(J, C, L) mod 360, angle(C, G, A) == 0 - angle(C, L, J) mod 360, angle(G, A, C) == 0 - angle(L, J, C) mod 360, log(distance(A, C)) + log(distance(C, L)) == log(distance(C, J)) + log(distance(C, G)), log(distance(C, G)) + log(distance(J, L)) == log(distance(C, L)) + log(distance(A, G)), log(distance(A, G)) + log(distance(C, J)) == log(distance(J, L)) + log(distance(A, C))
By similar_triangle_basic_properties on A, G, J, B, M, J we get angle(A, G, J) == angle(B, M, J) mod 360, angle(G, J, A) == angle(M, J, B) mod 360, angle(J, A, G) == angle(J, B, M) mod 360, log(distance(A, G)) + log(distance(J, M)) == log(distance(B, M)) + log(distance(G, J)), log(distance(G, J)) + log(distance(B, J)) == log(distance(J, M)) + log(distance(A, J)), log(distance(A, J)) + log(distance(B, M)) == log(distance(B, J)) + log(distance(A, G))
By anti_similar_triangle_basic_properties on C, A, T, C, M, L we get angle(C, A, T) == 0 - angle(C, M, L) mod 360, angle(A, T, C) == 0 - angle(M, L, C) mod 360, angle(T, C, A) == 0 - angle(L, C, M) mod 360, log(distance(A, C)) + log(distance(L, M)) == log(distance(C, M)) + log(distance(A, T)), log(distance(A, T)) + log(distance(C, L)) == log(distance(L, M)) + log(distance(C, T)), log(distance(C, L)) + log(distance(A, C)) == log(distance(C, T)) + log(distance(C, M))
By perpendicular_angle_conditions_v0 on S, M, line_intersection(Line(F, G), Line(J, M)) we get angle(S, M, line_intersection(Line(F, G), Line(J, M))) == orientation(M, line_intersection(Line(F, G), Line(J, M)), S) mod 360
By internal_angle_bisector_definition_v0_r on L, C, M, center(Circle(C, J, L)) we get Line(C, center(Circle(C, J, L))) == internal_angle_bisector(L, center(Circle(C, J, L)), M)
By external_angle_bisector_definition_v0 on S, line_intersection(Line(F, G), Line(J, M)), B, M we get 180 == angle(S, M, line_intersection(Line(F, G), Line(J, M))) + angle(B, M, line_intersection(Line(F, G), Line(J, M))) mod 360
By external_angle_bisector_definition_v0_r on T, J, T, G we get Line(G, J) == external_angle_bisector(T, G, T)
By external_angle_bisector_definition_v0 on T, line_intersection(Line(F, G), Line(J, M)), T, M we get 180 == angle(T, M, line_intersection(Line(F, G), Line(J, M))) + angle(T, M, line_intersection(Line(F, G), Line(J, M))) mod 360
By internal_angle_bisector_definition_v0 on S, line_intersection(Line(F, G), Line(J, M)), C, M we get angle(S, M, line_intersection(Line(F, G), Line(J, M))) == angle(line_intersection(Line(F, G), Line(J, M)), M, C) mod 360
By anti_similar_triangle_basic_properties on J, L, C, A, G, C we get angle(J, L, C) == 0 - angle(A, G, C) mod 360, angle(L, C, J) == 0 - angle(G, C, A) mod 360, angle(C, J, L) == 0 - angle(C, A, G) mod 360, log(distance(A, G)) + log(distance(C, L)) == log(distance(J, L)) + log(distance(C, G)), log(distance(C, G)) + log(distance(C, J)) == log(distance(C, L)) + log(distance(A, C)), log(distance(A, C)) + log(distance(J, L)) == log(distance(C, J)) + log(distance(A, G))
By isosceles_triangle_midpoint on center(Circle(C, J, L)), M, L we get midpoint(L, M) in median(center(Circle(C, J, L)), L, M)
By similar_triangle_basic_properties on K, B, J, F, B, S we get angle(F, B, S) == angle(K, B, J) mod 360, angle(B, J, K) == angle(B, S, F) mod 360, angle(J, K, B) == angle(S, F, B) mod 360, log(distance(B, F)) + log(distance(B, J)) == log(distance(B, K)) + log(distance(B, S)), log(distance(B, J)) + log(distance(F, S)) == log(distance(B, S)) + log(distance(J, K)), log(distance(F, S)) + log(distance(B, K)) == log(distance(J, K)) + log(distance(B, F))
By anti_similar_triangle_basic_properties on C, M, J, C, G, T we get angle(C, M, J) == 0 - angle(C, G, T) mod 360, angle(M, J, C) == 0 - angle(G, T, C) mod 360, angle(J, C, M) == 0 - angle(T, C, G) mod 360, log(distance(C, G)) + log(distance(J, M)) == log(distance(C, M)) + log(distance(G, T)), log(distance(G, T)) + log(distance(C, J)) == log(distance(J, M)) + log(distance(C, T)), log(distance(C, J)) + log(distance(C, G)) == log(distance(C, T)) + log(distance(C, M))
By anti_similar_triangle_basic_properties on B, A, S, B, S, A we get angle(B, A, S) == 0 - angle(B, S, A) mod 360, angle(A, S, B) == 0 - angle(S, A, B) mod 360, angle(S, B, A) == 0 - angle(A, B, S) mod 360, log(distance(A, B)) + log(distance(A, S)) == log(distance(B, S)) + log(distance(A, S)), log(distance(A, S)) + log(distance(A, B)) == log(distance(A, S)) + log(distance(B, S)), log(distance(A, B)) + log(distance(A, B)) == log(distance(B, S)) + log(distance(B, S))
By internal_angle_bisector_definition_v0_r on A, J, A, center(Circle(A, F, J)) we get Line(J, center(Circle(A, F, J))) == internal_angle_bisector(A, center(Circle(A, F, J)), A)
By reverse_direction on center(Circle(C, J, L)), J we get 180 == direction(center(Circle(C, J, L)), J) - direction(J, center(Circle(C, J, L))) mod 360
By external_angle_bisector_definition_v0_r on K, A, L, G we get Line(A, G) == external_angle_bisector(K, G, L)
By perpendicular_angle_conditions_v0 on line_intersection(Line(F, G), Line(J, M)), M, S we get angle(line_intersection(Line(F, G), Line(J, M)), M, S) == orientation(M, S, line_intersection(Line(F, G), Line(J, M))) mod 360
By internal_angle_bisector_definition_v0 on B, line_intersection(Line(F, G), Line(J, M)), C, M we get angle(B, M, line_intersection(Line(F, G), Line(J, M))) == angle(line_intersection(Line(F, G), Line(J, M)), M, C) mod 360
By reverse_direction on center(Circle(B, J, K)), K we get 180 == direction(center(Circle(B, J, K)), K) - direction(K, center(Circle(B, J, K))) mod 360
By isosceles_triangle_midpoint on center(Circle(A, F, J)), K, L we get midpoint(K, L) in median(center(Circle(A, F, J)), K, L)
By internal_angle_bisector_definition_v0_r on K, A, L, center(Circle(A, F, J)) we get Line(A, center(Circle(A, F, J))) == internal_angle_bisector(K, center(Circle(A, F, J)), L)
By internal_angle_bisector_definition_v0_r on A, J, T, G we get Line(G, J) == internal_angle_bisector(A, G, T)
By internal_angle_bisector_definition_v0 on C, line_intersection(Line(F, G), Line(J, M)), B, M we get angle(C, M, line_intersection(Line(F, G), Line(J, M))) == angle(line_intersection(Line(F, G), Line(J, M)), M, B) mod 360
By power_of_a_point_on_circle on F, Circle(A, F, J) we get 0 == power_of_a_point(F, Circle(A, F, J))
By internal_angle_bisector_definition_v0_r on A, B, S, F we get Line(B, F) == internal_angle_bisector(A, F, S)
By internal_angle_bisector_definition_v0_r on M, J, K, center(Circle(B, J, K)) we get Line(J, center(Circle(B, J, K))) == internal_angle_bisector(K, center(Circle(B, J, K)), M)
By collinear_definition on J, line_intersection(Line(F, G), Line(J, M)), M we get line_intersection(Line(F, G), Line(J, M)) in Line(J, M), M in Line(J, line_intersection(Line(F, G), Line(J, M))), Line(J, M) == Line(J, line_intersection(Line(F, G), Line(J, M))), 0 == 2 * angle(line_intersection(Line(F, G), Line(J, M)), J, M) mod 360
By reverse_direction on center(Circle(C, J, L)), M we get 180 == direction(center(Circle(C, J, L)), M) - direction(M, center(Circle(C, J, L))) mod 360
By collinear_definition on G, line_intersection(Line(F, G), Line(J, M)), F we get line_intersection(Line(F, G), Line(J, M)) in Line(F, G), F in Line(G, line_intersection(Line(F, G), Line(J, M))), Line(F, G) == Line(G, line_intersection(Line(F, G), Line(J, M))), 0 == 2 * angle(line_intersection(Line(F, G), Line(J, M)), G, F) mod 360
By anti_similar_triangle_basic_properties on J, B, M, S, B, F we get angle(J, B, M) == 0 - angle(S, B, F) mod 360, angle(B, M, J) == 0 - angle(B, F, S) mod 360, angle(M, J, B) == 0 - angle(F, S, B) mod 360, log(distance(B, J)) + log(distance(B, F)) == log(distance(B, S)) + log(distance(B, M)), log(distance(B, F)) + log(distance(J, M)) == log(distance(B, M)) + log(distance(F, S)), log(distance(F, S)) + log(distance(B, J)) == log(distance(J, M)) + log(distance(B, S))
By perpendicular_angle_conditions_v0 on line_intersection(Line(F, G), Line(J, M)), M, T we get angle(line_intersection(Line(F, G), Line(J, M)), M, T) == orientation(M, T, line_intersection(Line(F, G), Line(J, M))) mod 360
By similar_triangle_basic_properties on B, J, M, A, J, G we get angle(A, J, G) == angle(B, J, M) mod 360, angle(J, G, A) == angle(J, M, B) mod 360, angle(G, A, J) == angle(M, B, J) mod 360, log(distance(A, J)) + log(distance(J, M)) == log(distance(B, J)) + log(distance(G, J)), log(distance(G, J)) + log(distance(B, M)) == log(distance(J, M)) + log(distance(A, G)), log(distance(A, G)) + log(distance(B, J)) == log(distance(B, M)) + log(distance(A, J))
By collinear_definition on J, M, line_intersection(Line(F, G), Line(J, M)) we get M in Line(J, line_intersection(Line(F, G), Line(J, M))), line_intersection(Line(F, G), Line(J, M)) in Line(J, M), Line(J, M) == Line(J, line_intersection(Line(F, G), Line(J, M))), 0 == 2 * angle(M, J, line_intersection(Line(F, G), Line(J, M))) mod 360
By reverse_direction on center(Circle(A, F, J)), A we get 180 == direction(center(Circle(A, F, J)), A) - direction(A, center(Circle(A, F, J))) mod 360
By perpendicular_angle_conditions_v0 on B, M, line_intersection(Line(F, G), Line(J, M)) we get angle(B, M, line_intersection(Line(F, G), Line(J, M))) == orientation(B, M, line_intersection(Line(F, G), Line(J, M))) mod 360
By reverse_direction on center(Circle(B, J, K)), B we get 180 == direction(center(Circle(B, J, K)), B) - direction(B, center(Circle(B, J, K))) mod 360
By internal_angle_bisector_definition_v0 on C, line_intersection(Line(F, G), Line(J, M)), S, M we get angle(C, M, line_intersection(Line(F, G), Line(J, M))) == angle(line_intersection(Line(F, G), Line(J, M)), M, S) mod 360
By external_angle_bisector_definition_v0_r on J, T, J, G we get Line(G, T) == external_angle_bisector(J, G, J)
By similar_triangle_basic_properties on J, M, C, A, G, C we get angle(A, G, C) == angle(J, M, C) mod 360, angle(G, C, A) == angle(M, C, J) mod 360, angle(C, A, G) == angle(C, J, M) mod 360, log(distance(A, G)) + log(distance(C, M)) == log(distance(J, M)) + log(distance(C, G)), log(distance(C, G)) + log(distance(C, J)) == log(distance(C, M)) + log(distance(A, C)), log(distance(A, C)) + log(distance(J, M)) == log(distance(C, J)) + log(distance(A, G))
By reverse_direction on center(Circle(C, J, L)), C we get 180 == direction(center(Circle(C, J, L)), C) - direction(C, center(Circle(C, J, L))) mod 360
By reverse_direction on center(Circle(B, J, K)), J we get 180 == direction(center(Circle(B, J, K)), J) - direction(J, center(Circle(B, J, K))) mod 360
By reverse_direction on center(Circle(A, F, J)), L we get 180 == direction(center(Circle(A, F, J)), L) - direction(L, center(Circle(A, F, J))) mod 360
By collinear_definition on F, line_intersection(Line(F, G), Line(J, M)), G we get line_intersection(Line(F, G), Line(J, M)) in Line(F, G), G in Line(F, line_intersection(Line(F, G), Line(J, M))), Line(F, G) == Line(F, line_intersection(Line(F, G), Line(J, M))), 0 == 2 * angle(line_intersection(Line(F, G), Line(J, M)), F, G) mod 360
By internal_angle_bisector_definition_v0_r on S, J, A, F we get Line(F, J) == internal_angle_bisector(A, F, S)
By external_angle_bisector_definition_v0 on T, line_intersection(Line(F, G), Line(J, M)), C, M we get 180 == angle(T, M, line_intersection(Line(F, G), Line(J, M))) + angle(C, M, line_intersection(Line(F, G), Line(J, M))) mod 360
By internal_angle_bisector_definition_v0_r on T, C, A, G we get Line(C, G) == internal_angle_bisector(A, G, T)
By perpendicular_angle_conditions_v0 on C, M, line_intersection(Line(F, G), Line(J, M)) we get angle(C, M, line_intersection(Line(F, G), Line(J, M))) == orientation(C, M, line_intersection(Line(F, G), Line(J, M))) mod 360
By internal_angle_bisector_definition_v0_r on J, C, J, center(Circle(C, J, L)) we get Line(C, center(Circle(C, J, L))) == internal_angle_bisector(J, center(Circle(C, J, L)), J)
By isosceles_triangle_midpoint on center(Circle(B, J, K)), K, M we get midpoint(K, M) in median(center(Circle(B, J, K)), K, M)
By collinear_definition on M, J, line_intersection(Line(F, G), Line(J, M)) we get J in Line(M, line_intersection(Line(F, G), Line(J, M))), line_intersection(Line(F, G), Line(J, M)) in Line(J, M), Line(J, M) == Line(M, line_intersection(Line(F, G), Line(J, M))), 0 == 2 * angle(J, M, line_intersection(Line(F, G), Line(J, M))) mod 360
By collinear_definition on F, G, line_intersection(Line(F, G), Line(J, M)) we get G in Line(F, line_intersection(Line(F, G), Line(J, M))), line_intersection(Line(F, G), Line(J, M)) in Line(F, G), Line(F, G) == Line(F, line_intersection(Line(F, G), Line(J, M))), 0 == 2 * angle(G, F, line_intersection(Line(F, G), Line(J, M))) mod 360
By external_angle_bisector_definition_v0 on C, line_intersection(Line(F, G), Line(J, M)), C, M we get 180 == angle(C, M, line_intersection(Line(F, G), Line(J, M))) + angle(C, M, line_intersection(Line(F, G), Line(J, M))) mod 360
By internal_angle_bisector_definition_v0_r on C, J, C, center(Circle(C, J, L)) we get Line(J, center(Circle(C, J, L))) == internal_angle_bisector(C, center(Circle(C, J, L)), C)
By reverse_direction on center(Circle(A, F, J)), K we get 180 == direction(center(Circle(A, F, J)), K) - direction(K, center(Circle(A, F, J))) mod 360
By collinear_definition on G, F, line_intersection(Line(F, G), Line(J, M)) we get F in Line(G, line_intersection(Line(F, G), Line(J, M))), line_intersection(Line(F, G), Line(J, M)) in Line(F, G), Line(F, G) == Line(G, line_intersection(Line(F, G), Line(J, M))), 0 == 2 * angle(F, G, line_intersection(Line(F, G), Line(J, M))) mod 360
By internal_angle_bisector_definition_v0 on B, line_intersection(Line(F, G), Line(J, M)), T, M we get angle(B, M, line_intersection(Line(F, G), Line(J, M))) == angle(line_intersection(Line(F, G), Line(J, M)), M, T) mod 360
By internal_angle_bisector_definition_v0_r on J, A, J, center(Circle(A, F, J)) we get Line(A, center(Circle(A, F, J))) == internal_angle_bisector(J, center(Circle(A, F, J)), J)
By perpendicular_angle_conditions_v0 on line_intersection(Line(F, G), Line(J, M)), M, B we get angle(line_intersection(Line(F, G), Line(J, M)), M, B) == orientation(B, line_intersection(Line(F, G), Line(J, M)), M) mod 360
By perpendicular_angle_conditions_v0 on T, M, line_intersection(Line(F, G), Line(J, M)) we get angle(T, M, line_intersection(Line(F, G), Line(J, M))) == orientation(M, line_intersection(Line(F, G), Line(J, M)), T) mod 360
By internal_angle_bisector_definition_v0 on T, line_intersection(Line(F, G), Line(J, M)), S, M we get angle(T, M, line_intersection(Line(F, G), Line(J, M))) == angle(line_intersection(Line(F, G), Line(J, M)), M, S) mod 360
By anti_similar_triangle_basic_properties on C, T, G, A, J, F we get angle(C, T, G) == 0 - angle(A, J, F) mod 360, angle(T, G, C) == 0 - angle(J, F, A) mod 360, angle(G, C, T) == 0 - angle(F, A, J) mod 360, log(distance(A, J)) + log(distance(G, T)) == log(distance(C, T)) + log(distance(F, J)), log(distance(F, J)) + log(distance(C, G)) == log(distance(G, T)) + log(distance(A, F)), log(distance(A, F)) + log(distance(C, T)) == log(distance(C, G)) + log(distance(A, J))
By anti_similar_triangle_basic_properties on F, A, B, F, S, B we get angle(F, A, B) == 0 - angle(F, S, B) mod 360, angle(A, B, F) == 0 - angle(S, B, F) mod 360, angle(B, F, A) == 0 - angle(B, F, S) mod 360, log(distance(A, F)) + log(distance(B, S)) == log(distance(F, S)) + log(distance(A, B)), log(distance(A, B)) + log(distance(B, F)) == log(distance(B, S)) + log(distance(B, F)), log(distance(B, F)) + log(distance(A, F)) == log(distance(B, F)) + log(distance(F, S))
By anti_similar_triangle_basic_properties on M, G, F, F, A, K we get angle(M, G, F) == 0 - angle(F, A, K) mod 360, angle(G, F, M) == 0 - angle(A, K, F) mod 360, angle(F, M, G) == 0 - angle(K, F, A) mod 360, log(distance(A, F)) + log(distance(F, G)) == log(distance(G, M)) + log(distance(A, K)), log(distance(A, K)) + log(distance(F, M)) == log(distance(F, G)) + log(distance(F, K)), log(distance(F, K)) + log(distance(G, M)) == log(distance(F, M)) + log(distance(A, F))
By altitude_definition on J, line_intersection(Line(F, G), Line(J, M)), F, Line(J, M) we get Line(J, M) == altitude(J, F, line_intersection(Line(F, G), Line(J, M)))
By altitude_definition on M, line_intersection(Line(F, G), Line(J, M)), G, Line(J, M) we get Line(J, M) == altitude(M, G, line_intersection(Line(F, G), Line(J, M)))
By anti_similar_triangle_basic_properties on S, F, B, A, F, B we get angle(S, F, B) == 0 - angle(A, F, B) mod 360, angle(F, B, S) == 0 - angle(F, B, A) mod 360, angle(B, S, F) == 0 - angle(B, A, F) mod 360, log(distance(A, F)) + log(distance(B, F)) == log(distance(F, S)) + log(distance(B, F)), log(distance(B, F)) + log(distance(A, B)) == log(distance(B, F)) + log(distance(B, S)), log(distance(A, B)) + log(distance(F, S)) == log(distance(B, S)) + log(distance(A, F))
By sas_anti_congruence on A, center(Circle(A, F, J)), L, L, center(Circle(A, F, J)), A we get anti_congruent_triangles(A, L, center(Circle(A, F, J)), L, A, center(Circle(A, F, J)))
By similar_triangle_basic_properties on M, G, T, S, F, M we get angle(M, G, T) == angle(S, F, M) mod 360, angle(F, M, S) == angle(G, T, M) mod 360, angle(M, S, F) == angle(T, M, G) mod 360, log(distance(F, S)) + log(distance(G, T)) == log(distance(G, M)) + log(distance(F, M)), log(distance(F, M)) + log(distance(M, T)) == log(distance(G, T)) + log(distance(M, S)), log(distance(M, S)) + log(distance(G, M)) == log(distance(M, T)) + log(distance(F, S))
By anti_similar_triangle_basic_properties on G, C, T, G, C, A we get angle(G, C, T) == 0 - angle(G, C, A) mod 360, angle(C, T, G) == 0 - angle(C, A, G) mod 360, angle(T, G, C) == 0 - angle(A, G, C) mod 360, log(distance(C, G)) + log(distance(A, C)) == log(distance(C, G)) + log(distance(C, T)), log(distance(A, C)) + log(distance(G, T)) == log(distance(C, T)) + log(distance(A, G)), log(distance(A, G)) + log(distance(C, G)) == log(distance(G, T)) + log(distance(C, G))
By perpendicular_angle_conditions_v0 on G, line_intersection(Line(F, G), Line(J, M)), M we get angle(G, line_intersection(Line(F, G), Line(J, M)), M) == orientation(G, line_intersection(Line(F, G), Line(J, M)), M) mod 360
By similar_triangle_basic_properties on F, G, M, T, M, G we get angle(F, G, M) == angle(T, M, G) mod 360, angle(G, M, F) == angle(M, G, T) mod 360, angle(G, T, M) == angle(M, F, G) mod 360, log(distance(F, G)) + log(distance(G, M)) == log(distance(M, T)) + log(distance(G, M)), log(distance(G, M)) + log(distance(F, M)) == log(distance(G, M)) + log(distance(G, T)), log(distance(F, M)) + log(distance(M, T)) == log(distance(G, T)) + log(distance(F, G))
By altitude_definition on B, line_intersection(Line(F, G), Line(J, M)), M, Line(B, C) we get Line(B, C) == altitude(B, M, line_intersection(Line(F, G), Line(J, M)))
By anti_similar_triangle_basic_properties on M, T, G, A, K, F we get angle(M, T, G) == 0 - angle(A, K, F) mod 360, angle(T, G, M) == 0 - angle(K, F, A) mod 360, angle(G, M, T) == 0 - angle(F, A, K) mod 360, log(distance(A, K)) + log(distance(G, T)) == log(distance(M, T)) + log(distance(F, K)), log(distance(F, K)) + log(distance(G, M)) == log(distance(G, T)) + log(distance(A, F)), log(distance(A, F)) + log(distance(M, T)) == log(distance(G, M)) + log(distance(A, K))
By similar_triangle_basic_properties on J, A, G, A, B, F we get angle(A, B, F) == angle(J, A, G) mod 360, angle(A, G, J) == angle(B, F, A) mod 360, angle(F, A, B) == angle(G, J, A) mod 360, log(distance(A, B)) + log(distance(A, G)) == log(distance(A, J)) + log(distance(B, F)), log(distance(A, G)) + log(distance(A, F)) == log(distance(B, F)) + log(distance(G, J)), log(distance(A, F)) + log(distance(A, J)) == log(distance(G, J)) + log(distance(A, B))
By anti_similar_triangle_basic_properties on B, F, S, A, G, J we get angle(B, F, S) == 0 - angle(A, G, J) mod 360, angle(F, S, B) == 0 - angle(G, J, A) mod 360, angle(S, B, F) == 0 - angle(J, A, G) mod 360, log(distance(A, G)) + log(distance(F, S)) == log(distance(B, F)) + log(distance(G, J)), log(distance(F, S)) + log(distance(A, J)) == log(distance(G, J)) + log(distance(B, S)), log(distance(A, J)) + log(distance(B, F)) == log(distance(B, S)) + log(distance(A, G))
By similar_triangle_basic_properties on C, A, G, A, J, F we get angle(A, J, F) == angle(C, A, G) mod 360, angle(A, G, C) == angle(J, F, A) mod 360, angle(F, A, J) == angle(G, C, A) mod 360, log(distance(A, C)) + log(distance(F, J)) == log(distance(A, J)) + log(distance(A, G)), log(distance(A, G)) + log(distance(A, F)) == log(distance(F, J)) + log(distance(C, G)), log(distance(A, F)) + log(distance(A, C)) == log(distance(C, G)) + log(distance(A, J))
By similar_triangle_basic_properties on M, T, G, S, M, F we get angle(M, T, G) == angle(S, M, F) mod 360, angle(M, F, S) == angle(T, G, M) mod 360, angle(F, S, M) == angle(G, M, T) mod 360, log(distance(M, S)) + log(distance(G, T)) == log(distance(M, T)) + log(distance(F, M)), log(distance(F, M)) + log(distance(G, M)) == log(distance(G, T)) + log(distance(F, S)), log(distance(F, S)) + log(distance(M, T)) == log(distance(G, M)) + log(distance(M, S))
By anti_similar_triangle_basic_properties on A, F, K, S, F, M we get angle(A, F, K) == 0 - angle(S, F, M) mod 360, angle(F, K, A) == 0 - angle(F, M, S) mod 360, angle(K, A, F) == 0 - angle(M, S, F) mod 360, log(distance(A, F)) + log(distance(F, M)) == log(distance(F, S)) + log(distance(F, K)), log(distance(F, K)) + log(distance(M, S)) == log(distance(F, M)) + log(distance(A, K)), log(distance(A, K)) + log(distance(F, S)) == log(distance(M, S)) + log(distance(A, F))
By isosceles_triangle_properties on center(Circle(B, J, K)), J, K we get distance(J, center(Circle(B, J, K))) == distance(K, center(Circle(B, J, K))), angle(J, K, center(Circle(B, J, K))) == angle(center(Circle(B, J, K)), J, K) mod 360
By similar_triangle_basic_properties on F, M, G, M, F, S we get angle(F, M, G) == angle(M, F, S) mod 360, angle(F, S, M) == angle(M, G, F) mod 360, angle(G, F, M) == angle(S, M, F) mod 360, log(distance(F, M)) + log(distance(F, S)) == log(distance(F, M)) + log(distance(G, M)), log(distance(F, S)) + log(distance(F, G)) == log(distance(G, M)) + log(distance(M, S)), log(distance(F, G)) + log(distance(F, M)) == log(distance(M, S)) + log(distance(F, M))
By sas_anti_congruence on J, center(Circle(C, J, L)), M, M, center(Circle(C, J, L)), J we get anti_congruent_triangles(J, M, center(Circle(C, J, L)), M, J, center(Circle(C, J, L)))
By similar_triangle_basic_properties on L, A, G, A, K, F we get angle(A, K, F) == angle(L, A, G) mod 360, angle(A, G, L) == angle(K, F, A) mod 360, angle(F, A, K) == angle(G, L, A) mod 360, log(distance(A, K)) + log(distance(A, G)) == log(distance(A, L)) + log(distance(F, K)), log(distance(A, G)) + log(distance(A, F)) == log(distance(F, K)) + log(distance(G, L)), log(distance(A, F)) + log(distance(A, L)) == log(distance(G, L)) + log(distance(A, K))
By anti_similar_triangle_basic_properties on F, J, A, G, T, C we get angle(F, J, A) == 0 - angle(G, T, C) mod 360, angle(J, A, F) == 0 - angle(T, C, G) mod 360, angle(A, F, J) == 0 - angle(C, G, T) mod 360, log(distance(F, J)) + log(distance(C, T)) == log(distance(G, T)) + log(distance(A, J)), log(distance(A, J)) + log(distance(C, G)) == log(distance(C, T)) + log(distance(A, F)), log(distance(A, F)) + log(distance(G, T)) == log(distance(C, G)) + log(distance(F, J))
By isosceles_triangle_properties on center(Circle(B, J, K)), K, B we get distance(B, center(Circle(B, J, K))) == distance(K, center(Circle(B, J, K))), angle(K, B, center(Circle(B, J, K))) == angle(center(Circle(B, J, K)), K, B) mod 360
By collinear_definition on line_intersection(Line(F, G), Line(J, M)), G, F we get G in Line(F, line_intersection(Line(F, G), Line(J, M))), F in Line(G, line_intersection(Line(F, G), Line(J, M))), Line(F, line_intersection(Line(F, G), Line(J, M))) == Line(G, line_intersection(Line(F, G), Line(J, M))), 0 == 2 * angle(G, line_intersection(Line(F, G), Line(J, M)), F) mod 360
By anti_similar_triangle_basic_properties on L, A, G, M, T, G we get angle(L, A, G) == 0 - angle(M, T, G) mod 360, angle(A, G, L) == 0 - angle(T, G, M) mod 360, angle(G, L, A) == 0 - angle(G, M, T) mod 360, log(distance(A, L)) + log(distance(G, T)) == log(distance(M, T)) + log(distance(A, G)), log(distance(A, G)) + log(distance(G, M)) == log(distance(G, T)) + log(distance(G, L)), log(distance(G, L)) + log(distance(M, T)) == log(distance(G, M)) + log(distance(A, L))
By similar_triangle_basic_properties on A, J, G, B, A, F we get angle(A, J, G) == angle(B, A, F) mod 360, angle(A, F, B) == angle(J, G, A) mod 360, angle(F, B, A) == angle(G, A, J) mod 360, log(distance(A, B)) + log(distance(G, J)) == log(distance(A, J)) + log(distance(A, F)), log(distance(A, F)) + log(distance(A, G)) == log(distance(G, J)) + log(distance(B, F)), log(distance(A, G)) + log(distance(A, B)) == log(distance(B, F)) + log(distance(A, J))
By similar_triangle_basic_properties on K, A, F, A, L, G we get angle(A, L, G) == angle(K, A, F) mod 360, angle(A, F, K) == angle(L, G, A) mod 360, angle(F, K, A) == angle(G, A, L) mod 360, log(distance(A, K)) + log(distance(G, L)) == log(distance(A, L)) + log(distance(A, F)), log(distance(A, F)) + log(distance(A, G)) == log(distance(G, L)) + log(distance(F, K)), log(distance(A, G)) + log(distance(A, K)) == log(distance(F, K)) + log(distance(A, L))
By anti_similar_triangle_basic_properties on A, F, K, G, M, F we get angle(A, F, K) == 0 - angle(G, M, F) mod 360, angle(F, K, A) == 0 - angle(M, F, G) mod 360, angle(K, A, F) == 0 - angle(F, G, M) mod 360, log(distance(A, F)) + log(distance(F, M)) == log(distance(G, M)) + log(distance(F, K)), log(distance(F, K)) + log(distance(F, G)) == log(distance(F, M)) + log(distance(A, K)), log(distance(A, K)) + log(distance(G, M)) == log(distance(F, G)) + log(distance(A, F))
By similar_triangle_basic_properties on C, G, A, A, F, J we get angle(A, F, J) == angle(C, G, A) mod 360, angle(F, J, A) == angle(G, A, C) mod 360, angle(A, C, G) == angle(J, A, F) mod 360, log(distance(A, F)) + log(distance(A, G)) == log(distance(C, G)) + log(distance(F, J)), log(distance(A, G)) + log(distance(A, J)) == log(distance(F, J)) + log(distance(A, C)), log(distance(A, C)) + log(distance(A, F)) == log(distance(A, J)) + log(distance(C, G))
By anti_similar_triangle_basic_properties on F, S, M, G, L, A we get angle(F, S, M) == 0 - angle(G, L, A) mod 360, angle(S, M, F) == 0 - angle(L, A, G) mod 360, angle(M, F, S) == 0 - angle(A, G, L) mod 360, log(distance(F, S)) + log(distance(A, L)) == log(distance(G, L)) + log(distance(M, S)), log(distance(A, L)) + log(distance(F, M)) == log(distance(M, S)) + log(distance(A, G)), log(distance(A, G)) + log(distance(F, S)) == log(distance(F, M)) + log(distance(G, L))
By altitude_definition on G, line_intersection(Line(F, G), Line(J, M)), J, Line(F, G) we get Line(F, G) == altitude(G, J, line_intersection(Line(F, G), Line(J, M)))
By altitude_definition on T, M, line_intersection(Line(F, G), Line(J, M)), Line(B, C) we get Line(B, C) == altitude(T, M, line_intersection(Line(F, G), Line(J, M)))
By similar_triangle_basic_properties on M, T, G, G, F, M we get angle(G, F, M) == angle(M, T, G) mod 360, angle(F, M, G) == angle(T, G, M) mod 360, angle(G, M, T) == angle(M, G, F) mod 360, log(distance(F, G)) + log(distance(G, T)) == log(distance(M, T)) + log(distance(F, M)), log(distance(F, M)) + log(distance(G, M)) == log(distance(G, T)) + log(distance(G, M)), log(distance(G, M)) + log(distance(F, G)) == log(distance(G, M)) + log(distance(M, T))
By altitude_definition on C, line_intersection(Line(F, G), Line(J, M)), M, Line(B, C) we get Line(B, C) == altitude(C, M, line_intersection(Line(F, G), Line(J, M)))
By altitude_definition on F, line_intersection(Line(F, G), Line(J, M)), J, Line(F, G) we get Line(F, G) == altitude(F, J, line_intersection(Line(F, G), Line(J, M)))
By anti_similar_triangle_basic_properties on M, S, F, A, L, G we get angle(M, S, F) == 0 - angle(A, L, G) mod 360, angle(S, F, M) == 0 - angle(L, G, A) mod 360, angle(F, M, S) == 0 - angle(G, A, L) mod 360, log(distance(A, L)) + log(distance(F, S)) == log(distance(M, S)) + log(distance(G, L)), log(distance(F, S)) + log(distance(A, G)) == log(distance(G, L)) + log(distance(F, M)), log(distance(A, G)) + log(distance(M, S)) == log(distance(F, M)) + log(distance(A, L))
By altitude_definition on F, M, line_intersection(Line(F, G), Line(J, M)), Line(F, G) we get Line(F, G) == altitude(F, M, line_intersection(Line(F, G), Line(J, M)))
By isosceles_triangle_properties on center(Circle(A, F, J)), J, L we get distance(J, center(Circle(A, F, J))) == distance(L, center(Circle(A, F, J))), angle(J, L, center(Circle(A, F, J))) == angle(center(Circle(A, F, J)), J, L) mod 360
By anti_similar_triangle_basic_properties on G, F, M, L, A, G we get angle(G, F, M) == 0 - angle(L, A, G) mod 360, angle(F, M, G) == 0 - angle(A, G, L) mod 360, angle(M, G, F) == 0 - angle(G, L, A) mod 360, log(distance(A, L)) + log(distance(F, M)) == log(distance(F, G)) + log(distance(A, G)), log(distance(A, G)) + log(distance(G, M)) == log(distance(F, M)) + log(distance(G, L)), log(distance(G, L)) + log(distance(F, G)) == log(distance(G, M)) + log(distance(A, L))
By anti_similar_triangle_basic_properties on F, S, M, F, A, K we get angle(F, S, M) == 0 - angle(F, A, K) mod 360, angle(S, M, F) == 0 - angle(A, K, F) mod 360, angle(M, F, S) == 0 - angle(K, F, A) mod 360, log(distance(A, F)) + log(distance(M, S)) == log(distance(F, S)) + log(distance(A, K)), log(distance(A, K)) + log(distance(F, M)) == log(distance(M, S)) + log(distance(F, K)), log(distance(F, K)) + log(distance(F, S)) == log(distance(F, M)) + log(distance(A, F))
By altitude_definition on S, line_intersection(Line(F, G), Line(J, M)), M, Line(B, C) we get Line(B, C) == altitude(S, M, line_intersection(Line(F, G), Line(J, M)))
By anti_similar_triangle_basic_properties on S, F, B, J, G, A we get angle(S, F, B) == 0 - angle(J, G, A) mod 360, angle(F, B, S) == 0 - angle(G, A, J) mod 360, angle(B, S, F) == 0 - angle(A, J, G) mod 360, log(distance(F, S)) + log(distance(A, G)) == log(distance(G, J)) + log(distance(B, F)), log(distance(A, G)) + log(distance(B, S)) == log(distance(B, F)) + log(distance(A, J)), log(distance(A, J)) + log(distance(F, S)) == log(distance(B, S)) + log(distance(G, J))
By anti_similar_triangle_basic_properties on F, G, M, A, L, G we get angle(F, G, M) == 0 - angle(A, L, G) mod 360, angle(G, M, F) == 0 - angle(L, G, A) mod 360, angle(M, F, G) == 0 - angle(G, A, L) mod 360, log(distance(A, L)) + log(distance(G, M)) == log(distance(F, G)) + log(distance(G, L)), log(distance(G, L)) + log(distance(F, M)) == log(distance(G, M)) + log(distance(A, G)), log(distance(A, G)) + log(distance(F, G)) == log(distance(F, M)) + log(distance(A, L))
By isosceles_triangle_properties on center(Circle(C, J, L)), L, J we get distance(J, center(Circle(C, J, L))) == distance(L, center(Circle(C, J, L))), angle(L, J, center(Circle(C, J, L))) == angle(center(Circle(C, J, L)), L, J) mod 360
By anti_similar_triangle_basic_properties on T, M, G, K, A, F we get angle(T, M, G) == 0 - angle(K, A, F) mod 360, angle(M, G, T) == 0 - angle(A, F, K) mod 360, angle(G, T, M) == 0 - angle(F, K, A) mod 360, log(distance(A, K)) + log(distance(G, M)) == log(distance(M, T)) + log(distance(A, F)), log(distance(A, F)) + log(distance(G, T)) == log(distance(G, M)) + log(distance(F, K)), log(distance(F, K)) + log(distance(M, T)) == log(distance(G, T)) + log(distance(A, K))
By isosceles_triangle_properties on center(Circle(A, F, J)), A, L we get distance(A, center(Circle(A, F, J))) == distance(L, center(Circle(A, F, J))), angle(A, L, center(Circle(A, F, J))) == angle(center(Circle(A, F, J)), A, L) mod 360
By perpendicular_angle_conditions_v0 on J, line_intersection(Line(F, G), Line(J, M)), F we get angle(J, line_intersection(Line(F, G), Line(J, M)), F) == orientation(F, J, line_intersection(Line(F, G), Line(J, M))) mod 360
By power_of_a_point_definition on M, L, F, Circle(A, F, J) we get log(distance(L, M)) + log(distance(F, M)) == log(power_of_a_point(M, Circle(A, F, J)))
By isosceles_triangle_properties on center(Circle(B, J, K)), K, J we get distance(J, center(Circle(B, J, K))) == distance(K, center(Circle(B, J, K))), angle(K, J, center(Circle(B, J, K))) == angle(center(Circle(B, J, K)), K, J) mod 360
By sas_anti_congruence on J, center(Circle(A, F, J)), L, L, center(Circle(A, F, J)), J we get anti_congruent_triangles(J, L, center(Circle(A, F, J)), L, J, center(Circle(A, F, J)))
By isosceles_triangle_properties on center(Circle(C, J, L)), M, L we get distance(L, center(Circle(C, J, L))) == distance(M, center(Circle(C, J, L))), angle(M, L, center(Circle(C, J, L))) == angle(center(Circle(C, J, L)), M, L) mod 360
By sas_anti_congruence on M, center(Circle(B, J, K)), J, J, center(Circle(B, J, K)), M we get anti_congruent_triangles(J, M, center(Circle(B, J, K)), M, J, center(Circle(B, J, K)))
By sas_anti_congruence on M, center(Circle(C, J, L)), L, L, center(Circle(C, J, L)), M we get anti_congruent_triangles(L, M, center(Circle(C, J, L)), M, L, center(Circle(C, J, L)))
By sas_anti_congruence on K, center(Circle(B, J, K)), J, J, center(Circle(B, J, K)), K we get anti_congruent_triangles(J, K, center(Circle(B, J, K)), K, J, center(Circle(B, J, K)))
By sas_anti_congruence on L, center(Circle(C, J, L)), M, M, center(Circle(C, J, L)), L we get anti_congruent_triangles(L, M, center(Circle(C, J, L)), M, L, center(Circle(C, J, L)))
By sas_anti_congruence on B, center(Circle(B, J, K)), K, K, center(Circle(B, J, K)), B we get anti_congruent_triangles(B, K, center(Circle(B, J, K)), K, B, center(Circle(B, J, K)))
By sas_anti_congruence on M, center(Circle(B, J, K)), K, K, center(Circle(B, J, K)), M we get anti_congruent_triangles(K, M, center(Circle(B, J, K)), M, K, center(Circle(B, J, K)))
By power_of_a_point_definition on M, K, G, Circle(A, F, J) we get log(distance(K, M)) + log(distance(G, M)) == log(power_of_a_point(M, Circle(A, F, J)))
By anti_similar_triangle_basic_properties on T, M, G, A, L, G we get angle(T, M, G) == 0 - angle(A, L, G) mod 360, angle(M, G, T) == 0 - angle(L, G, A) mod 360, angle(G, T, M) == 0 - angle(G, A, L) mod 360, log(distance(A, L)) + log(distance(G, M)) == log(distance(M, T)) + log(distance(G, L)), log(distance(G, L)) + log(distance(G, T)) == log(distance(G, M)) + log(distance(A, G)), log(distance(A, G)) + log(distance(M, T)) == log(distance(G, T)) + log(distance(A, L))
By anti_similar_triangle_basic_properties on T, A, S, K, M, L we get angle(T, A, S) == 0 - angle(K, M, L) mod 360, angle(A, S, T) == 0 - angle(M, L, K) mod 360, angle(S, T, A) == 0 - angle(L, K, M) mod 360, log(distance(A, T)) + log(distance(L, M)) == log(distance(K, M)) + log(distance(A, S)), log(distance(A, S)) + log(distance(K, L)) == log(distance(L, M)) + log(distance(S, T)), log(distance(K, L)) + log(distance(A, T)) == log(distance(S, T)) + log(distance(K, M))
By isosceles_triangle_properties on center(Circle(A, F, J)), A, K we get distance(A, center(Circle(A, F, J))) == distance(K, center(Circle(A, F, J))), angle(A, K, center(Circle(A, F, J))) == angle(center(Circle(A, F, J)), A, K) mod 360
By sas_anti_congruence on K, center(Circle(A, F, J)), L, L, center(Circle(A, F, J)), K we get anti_congruent_triangles(K, L, center(Circle(A, F, J)), L, K, center(Circle(A, F, J)))
By isosceles_triangle_properties on center(Circle(A, F, J)), L, A we get distance(A, center(Circle(A, F, J))) == distance(L, center(Circle(A, F, J))), angle(L, A, center(Circle(A, F, J))) == angle(center(Circle(A, F, J)), L, A) mod 360
By isosceles_triangle_properties on center(Circle(C, J, L)), L, C we get distance(C, center(Circle(C, J, L))) == distance(L, center(Circle(C, J, L))), angle(L, C, center(Circle(C, J, L))) == angle(center(Circle(C, J, L)), L, C) mod 360
By sas_anti_congruence on L, center(Circle(C, J, L)), C, C, center(Circle(C, J, L)), L we get anti_congruent_triangles(C, L, center(Circle(C, J, L)), L, C, center(Circle(C, J, L)))
By perpendicular_angle_conditions_v0 on M, line_intersection(Line(F, G), Line(J, M)), G we get angle(M, line_intersection(Line(F, G), Line(J, M)), G) == orientation(G, M, line_intersection(Line(F, G), Line(J, M))) mod 360
By sas_anti_congruence on J, center(Circle(A, F, J)), K, K, center(Circle(A, F, J)), J we get anti_congruent_triangles(J, K, center(Circle(A, F, J)), K, J, center(Circle(A, F, J)))
By anti_similar_triangle_basic_properties on L, M, K, S, A, T we get angle(L, M, K) == 0 - angle(S, A, T) mod 360, angle(M, K, L) == 0 - angle(A, T, S) mod 360, angle(K, L, M) == 0 - angle(T, S, A) mod 360, log(distance(A, S)) + log(distance(K, M)) == log(distance(L, M)) + log(distance(A, T)), log(distance(A, T)) + log(distance(K, L)) == log(distance(K, M)) + log(distance(S, T)), log(distance(K, L)) + log(distance(A, S)) == log(distance(S, T)) + log(distance(L, M))
By isosceles_triangle_properties on center(Circle(C, J, L)), M, J we get distance(J, center(Circle(C, J, L))) == distance(M, center(Circle(C, J, L))), angle(M, J, center(Circle(C, J, L))) == angle(center(Circle(C, J, L)), M, J) mod 360
By isosceles_triangle_properties on center(Circle(B, J, K)), B, K we get distance(B, center(Circle(B, J, K))) == distance(K, center(Circle(B, J, K))), angle(B, K, center(Circle(B, J, K))) == angle(center(Circle(B, J, K)), B, K) mod 360
By sas_anti_congruence on L, center(Circle(A, F, J)), J, J, center(Circle(A, F, J)), L we get anti_congruent_triangles(J, L, center(Circle(A, F, J)), L, J, center(Circle(A, F, J)))
By anti_similar_triangle_basic_properties on A, C, G, T, C, G we get angle(A, C, G) == 0 - angle(T, C, G) mod 360, angle(C, G, A) == 0 - angle(C, G, T) mod 360, angle(G, A, C) == 0 - angle(G, T, C) mod 360, log(distance(A, C)) + log(distance(C, G)) == log(distance(C, T)) + log(distance(C, G)), log(distance(C, G)) + log(distance(A, G)) == log(distance(C, G)) + log(distance(G, T)), log(distance(A, G)) + log(distance(C, T)) == log(distance(G, T)) + log(distance(A, C))
By isosceles_triangle_properties on center(Circle(C, J, L)), J, M we get distance(J, center(Circle(C, J, L))) == distance(M, center(Circle(C, J, L))), angle(J, M, center(Circle(C, J, L))) == angle(center(Circle(C, J, L)), J, M) mod 360
By isosceles_triangle_properties on center(Circle(B, J, K)), M, B we get distance(B, center(Circle(B, J, K))) == distance(M, center(Circle(B, J, K))), angle(M, B, center(Circle(B, J, K))) == angle(center(Circle(B, J, K)), M, B) mod 360
By altitude_definition on J, G, line_intersection(Line(F, G), Line(J, M)), Line(J, M) we get Line(J, M) == altitude(J, G, line_intersection(Line(F, G), Line(J, M)))
By sas_anti_congruence on L, center(Circle(A, F, J)), A, A, center(Circle(A, F, J)), L we get anti_congruent_triangles(A, L, center(Circle(A, F, J)), L, A, center(Circle(A, F, J)))
By altitude_definition on T, J, line_intersection(Line(F, G), Line(J, M)), Line(B, C) we get Line(B, C) == altitude(T, J, line_intersection(Line(F, G), Line(J, M)))
By isosceles_triangle_properties on center(Circle(B, J, K)), J, M we get distance(J, center(Circle(B, J, K))) == distance(M, center(Circle(B, J, K))), angle(J, M, center(Circle(B, J, K))) == angle(center(Circle(B, J, K)), J, M) mod 360
By isosceles_triangle_properties on center(Circle(B, J, K)), M, J we get distance(J, center(Circle(B, J, K))) == distance(M, center(Circle(B, J, K))), angle(M, J, center(Circle(B, J, K))) == angle(center(Circle(B, J, K)), M, J) mod 360
By isosceles_triangle_properties on center(Circle(B, J, K)), B, M we get distance(B, center(Circle(B, J, K))) == distance(M, center(Circle(B, J, K))), angle(B, M, center(Circle(B, J, K))) == angle(center(Circle(B, J, K)), B, M) mod 360
By isosceles_triangle_properties on center(Circle(B, J, K)), K, M we get distance(K, center(Circle(B, J, K))) == distance(M, center(Circle(B, J, K))), angle(K, M, center(Circle(B, J, K))) == angle(center(Circle(B, J, K)), K, M) mod 360
By isosceles_triangle_properties on center(Circle(A, F, J)), K, L we get distance(K, center(Circle(A, F, J))) == distance(L, center(Circle(A, F, J))), angle(K, L, center(Circle(A, F, J))) == angle(center(Circle(A, F, J)), K, L) mod 360
By sas_anti_congruence on B, center(Circle(B, J, K)), M, M, center(Circle(B, J, K)), B we get anti_congruent_triangles(B, M, center(Circle(B, J, K)), M, B, center(Circle(B, J, K)))
By isosceles_triangle_properties on center(Circle(C, J, L)), M, C we get distance(C, center(Circle(C, J, L))) == distance(M, center(Circle(C, J, L))), angle(M, C, center(Circle(C, J, L))) == angle(center(Circle(C, J, L)), M, C) mod 360
By collinear_definition on line_intersection(Line(F, G), Line(J, M)), M, J we get M in Line(J, line_intersection(Line(F, G), Line(J, M))), J in Line(M, line_intersection(Line(F, G), Line(J, M))), Line(J, line_intersection(Line(F, G), Line(J, M))) == Line(M, line_intersection(Line(F, G), Line(J, M))), 0 == 2 * angle(M, line_intersection(Line(F, G), Line(J, M)), J) mod 360
By sas_anti_congruence on K, center(Circle(B, J, K)), B, B, center(Circle(B, J, K)), K we get anti_congruent_triangles(B, K, center(Circle(B, J, K)), K, B, center(Circle(B, J, K)))
By isosceles_triangle_properties on center(Circle(A, F, J)), L, K we get distance(K, center(Circle(A, F, J))) == distance(L, center(Circle(A, F, J))), angle(L, K, center(Circle(A, F, J))) == angle(center(Circle(A, F, J)), L, K) mod 360
By isosceles_triangle_properties on center(Circle(A, F, J)), L, J we get distance(J, center(Circle(A, F, J))) == distance(L, center(Circle(A, F, J))), angle(L, J, center(Circle(A, F, J))) == angle(center(Circle(A, F, J)), L, J) mod 360
By sas_anti_congruence on J, center(Circle(B, J, K)), M, M, center(Circle(B, J, K)), J we get anti_congruent_triangles(J, M, center(Circle(B, J, K)), M, J, center(Circle(B, J, K)))
By altitude_definition on B, line_intersection(Line(F, G), Line(J, M)), J, Line(B, C) we get Line(B, C) == altitude(B, J, line_intersection(Line(F, G), Line(J, M)))
By sas_anti_congruence on A, center(Circle(A, F, J)), K, K, center(Circle(A, F, J)), A we get anti_congruent_triangles(A, K, center(Circle(A, F, J)), K, A, center(Circle(A, F, J)))
By sas_anti_congruence on J, center(Circle(C, J, L)), L, L, center(Circle(C, J, L)), J we get anti_congruent_triangles(J, L, center(Circle(C, J, L)), L, J, center(Circle(C, J, L)))
By collinear_definition on line_intersection(Line(F, G), Line(J, M)), F, G we get F in Line(G, line_intersection(Line(F, G), Line(J, M))), G in Line(F, line_intersection(Line(F, G), Line(J, M))), Line(F, line_intersection(Line(F, G), Line(J, M))) == Line(G, line_intersection(Line(F, G), Line(J, M))), 0 == 2 * angle(F, line_intersection(Line(F, G), Line(J, M)), G) mod 360
By isosceles_triangle_properties on center(Circle(C, J, L)), L, M we get distance(L, center(Circle(C, J, L))) == distance(M, center(Circle(C, J, L))), angle(L, M, center(Circle(C, J, L))) == angle(center(Circle(C, J, L)), L, M) mod 360
By isosceles_triangle_properties on center(Circle(C, J, L)), J, L we get distance(J, center(Circle(C, J, L))) == distance(L, center(Circle(C, J, L))), angle(J, L, center(Circle(C, J, L))) == angle(center(Circle(C, J, L)), J, L) mod 360
By perpendicular_angle_conditions_v0 on J, line_intersection(Line(F, G), Line(J, M)), G we get angle(J, line_intersection(Line(F, G), Line(J, M)), G) == orientation(G, J, line_intersection(Line(F, G), Line(J, M))) mod 360
By isosceles_triangle_properties on center(Circle(C, J, L)), C, M we get distance(C, center(Circle(C, J, L))) == distance(M, center(Circle(C, J, L))), angle(C, M, center(Circle(C, J, L))) == angle(center(Circle(C, J, L)), C, M) mod 360
By altitude_definition on C, J, line_intersection(Line(F, G), Line(J, M)), Line(B, C) we get Line(B, C) == altitude(C, J, line_intersection(Line(F, G), Line(J, M)))
By sas_anti_congruence on L, center(Circle(A, F, J)), K, K, center(Circle(A, F, J)), L we get anti_congruent_triangles(K, L, center(Circle(A, F, J)), L, K, center(Circle(A, F, J)))
By altitude_definition on G, M, line_intersection(Line(F, G), Line(J, M)), Line(F, G) we get Line(F, G) == altitude(G, M, line_intersection(Line(F, G), Line(J, M)))
By perpendicular_angle_conditions_v0 on M, line_intersection(Line(F, G), Line(J, M)), F we get angle(M, line_intersection(Line(F, G), Line(J, M)), F) == orientation(F, M, line_intersection(Line(F, G), Line(J, M))) mod 360
By sas_anti_congruence on L, center(Circle(C, J, L)), J, J, center(Circle(C, J, L)), L we get anti_congruent_triangles(J, L, center(Circle(C, J, L)), L, J, center(Circle(C, J, L)))
By isosceles_triangle_properties on center(Circle(A, F, J)), K, A we get distance(A, center(Circle(A, F, J))) == distance(K, center(Circle(A, F, J))), angle(K, A, center(Circle(A, F, J))) == angle(center(Circle(A, F, J)), K, A) mod 360
By perpendicular_angle_conditions_v0 on G, line_intersection(Line(F, G), Line(J, M)), J we get angle(G, line_intersection(Line(F, G), Line(J, M)), J) == orientation(G, line_intersection(Line(F, G), Line(J, M)), J) mod 360
By sas_anti_congruence on M, center(Circle(C, J, L)), J, J, center(Circle(C, J, L)), M we get anti_congruent_triangles(J, M, center(Circle(C, J, L)), M, J, center(Circle(C, J, L)))
By sas_anti_congruence on K, center(Circle(A, F, J)), J, J, center(Circle(A, F, J)), K we get anti_congruent_triangles(J, K, center(Circle(A, F, J)), K, J, center(Circle(A, F, J)))
By isosceles_triangle_properties on center(Circle(A, F, J)), J, K we get distance(J, center(Circle(A, F, J))) == distance(K, center(Circle(A, F, J))), angle(J, K, center(Circle(A, F, J))) == angle(center(Circle(A, F, J)), J, K) mod 360
By sas_anti_congruence on C, center(Circle(C, J, L)), L, L, center(Circle(C, J, L)), C we get anti_congruent_triangles(C, L, center(Circle(C, J, L)), L, C, center(Circle(C, J, L)))
By altitude_definition on M, F, line_intersection(Line(F, G), Line(J, M)), Line(J, M) we get Line(J, M) == altitude(M, F, line_intersection(Line(F, G), Line(J, M)))
By isosceles_triangle_altitude_v3 on center(Circle(C, J, L)), L, M we get identical(perpendicular_bisector(L, M), internal_angle_bisector(L, center(Circle(C, J, L)), M), perpendicular_line(center(Circle(C, J, L)), Line(L, M)))
By collinear_definition on line_intersection(Line(F, G), Line(J, M)), J, M we get J in Line(M, line_intersection(Line(F, G), Line(J, M))), M in Line(J, line_intersection(Line(F, G), Line(J, M))), Line(J, line_intersection(Line(F, G), Line(J, M))) == Line(M, line_intersection(Line(F, G), Line(J, M))), 0 == 2 * angle(J, line_intersection(Line(F, G), Line(J, M)), M) mod 360
By altitude_definition on S, line_intersection(Line(F, G), Line(J, M)), J, Line(B, C) we get Line(B, C) == altitude(S, J, line_intersection(Line(F, G), Line(J, M)))
By isosceles_triangle_properties on center(Circle(A, F, J)), K, J we get distance(J, center(Circle(A, F, J))) == distance(K, center(Circle(A, F, J))), angle(K, J, center(Circle(A, F, J))) == angle(center(Circle(A, F, J)), K, J) mod 360
By sas_anti_congruence on C, center(Circle(C, J, L)), M, M, center(Circle(C, J, L)), C we get anti_congruent_triangles(C, M, center(Circle(C, J, L)), M, C, center(Circle(C, J, L)))
By isosceles_triangle_properties on center(Circle(B, J, K)), M, K we get distance(K, center(Circle(B, J, K))) == distance(M, center(Circle(B, J, K))), angle(M, K, center(Circle(B, J, K))) == angle(center(Circle(B, J, K)), M, K) mod 360
By sas_anti_congruence on K, center(Circle(B, J, K)), M, M, center(Circle(B, J, K)), K we get anti_congruent_triangles(K, M, center(Circle(B, J, K)), M, K, center(Circle(B, J, K)))
By isosceles_triangle_properties on center(Circle(C, J, L)), C, L we get distance(C, center(Circle(C, J, L))) == distance(L, center(Circle(C, J, L))), angle(C, L, center(Circle(C, J, L))) == angle(center(Circle(C, J, L)), C, L) mod 360
By perpendicular_angle_conditions_v0 on F, line_intersection(Line(F, G), Line(J, M)), J we get angle(F, line_intersection(Line(F, G), Line(J, M)), J) == orientation(F, line_intersection(Line(F, G), Line(J, M)), J) mod 360
By sas_anti_congruence on J, center(Circle(B, J, K)), K, K, center(Circle(B, J, K)), J we get anti_congruent_triangles(J, K, center(Circle(B, J, K)), K, J, center(Circle(B, J, K)))
By sas_anti_congruence on M, center(Circle(B, J, K)), B, B, center(Circle(B, J, K)), M we get anti_congruent_triangles(B, M, center(Circle(B, J, K)), M, B, center(Circle(B, J, K)))
By sas_anti_congruence on M, center(Circle(C, J, L)), C, C, center(Circle(C, J, L)), M we get anti_congruent_triangles(C, M, center(Circle(C, J, L)), M, C, center(Circle(C, J, L)))
By sas_anti_congruence on K, center(Circle(A, F, J)), A, A, center(Circle(A, F, J)), K we get anti_congruent_triangles(A, K, center(Circle(A, F, J)), K, A, center(Circle(A, F, J)))
By perpendicular_angle_conditions_v0 on F, line_intersection(Line(F, G), Line(J, M)), M we get angle(F, line_intersection(Line(F, G), Line(J, M)), M) == orientation(F, line_intersection(Line(F, G), Line(J, M)), M) mod 360
By isosceles_triangle_altitude_v3 on center(Circle(B, J, K)), K, M we get identical(perpendicular_bisector(K, M), internal_angle_bisector(K, center(Circle(B, J, K)), M), perpendicular_line(center(Circle(B, J, K)), Line(K, M)))
By isosceles_triangle_altitude_v3 on center(Circle(C, J, L)), M, L we get identical(perpendicular_bisector(L, M), internal_angle_bisector(L, center(Circle(C, J, L)), M), perpendicular_line(center(Circle(C, J, L)), Line(L, M)))
By isosceles_triangle_altitude_v3 on center(Circle(B, J, K)), M, K we get identical(perpendicular_bisector(K, M), internal_angle_bisector(K, center(Circle(B, J, K)), M), perpendicular_line(center(Circle(B, J, K)), Line(K, M)))
By isosceles_triangle_altitude_v3 on center(Circle(A, F, J)), K, L we get identical(perpendicular_bisector(K, L), internal_angle_bisector(K, center(Circle(A, F, J)), L), perpendicular_line(center(Circle(A, F, J)), Line(K, L)))
By isosceles_triangle_altitude_v3 on center(Circle(A, F, J)), L, K we get identical(perpendicular_bisector(K, L), internal_angle_bisector(K, center(Circle(A, F, J)), L), perpendicular_line(center(Circle(A, F, J)), Line(K, L)))
By similar_triangle_basic_properties on S, T, A, S, M, F we get angle(S, M, F) == angle(S, T, A) mod 360, angle(M, F, S) == angle(T, A, S) mod 360, angle(A, S, T) == angle(F, S, M) mod 360, log(distance(M, S)) + log(distance(A, T)) == log(distance(S, T)) + log(distance(F, M)), log(distance(A, T)) + log(distance(F, S)) == log(distance(F, M)) + log(distance(A, S)), log(distance(A, S)) + log(distance(M, S)) == log(distance(F, S)) + log(distance(S, T))
By similar_triangle_basic_properties on F, G, M, T, S, A we get angle(F, G, M) == angle(T, S, A) mod 360, angle(G, M, F) == angle(S, A, T) mod 360, angle(A, T, S) == angle(M, F, G) mod 360, log(distance(F, G)) + log(distance(A, S)) == log(distance(S, T)) + log(distance(G, M)), log(distance(A, S)) + log(distance(F, M)) == log(distance(G, M)) + log(distance(A, T)), log(distance(A, T)) + log(distance(F, G)) == log(distance(F, M)) + log(distance(S, T))
By anti_similar_triangle_basic_properties on K, M, L, G, A, F we get angle(K, M, L) == 0 - angle(G, A, F) mod 360, angle(M, L, K) == 0 - angle(A, F, G) mod 360, angle(L, K, M) == 0 - angle(F, G, A) mod 360, log(distance(A, G)) + log(distance(L, M)) == log(distance(K, M)) + log(distance(A, F)), log(distance(A, F)) + log(distance(K, L)) == log(distance(L, M)) + log(distance(F, G)), log(distance(F, G)) + log(distance(K, M)) == log(distance(K, L)) + log(distance(A, G))
By anti_similar_triangle_basic_properties on T, S, A, K, A, F we get angle(T, S, A) == 0 - angle(K, A, F) mod 360, angle(S, A, T) == 0 - angle(A, F, K) mod 360, angle(A, T, S) == 0 - angle(F, K, A) mod 360, log(distance(A, K)) + log(distance(A, S)) == log(distance(S, T)) + log(distance(A, F)), log(distance(A, F)) + log(distance(A, T)) == log(distance(A, S)) + log(distance(F, K)), log(distance(A, T)) + log(distance(A, K)) == log(distance(F, K)) + log(distance(S, T))
By sas_anti_congruence on M, center(Circle(C, J, L)), C, L, center(Circle(C, J, L)), C we get anti_congruent_triangles(C, L, center(Circle(C, J, L)), C, M, center(Circle(C, J, L)))
By sas_congruence on K, center(Circle(B, J, K)), B, B, center(Circle(B, J, K)), M we get congruent_triangles(B, K, center(Circle(B, J, K)), M, B, center(Circle(B, J, K)))
By sas_congruence on A, center(Circle(A, F, J)), L, K, center(Circle(A, F, J)), A we get congruent_triangles(A, K, center(Circle(A, F, J)), L, A, center(Circle(A, F, J)))
By anti_similar_triangle_basic_properties on K, F, A, T, A, S we get angle(K, F, A) == 0 - angle(T, A, S) mod 360, angle(F, A, K) == 0 - angle(A, S, T) mod 360, angle(A, K, F) == 0 - angle(S, T, A) mod 360, log(distance(A, T)) + log(distance(A, F)) == log(distance(F, K)) + log(distance(A, S)), log(distance(A, F)) + log(distance(S, T)) == log(distance(A, S)) + log(distance(A, K)), log(distance(A, K)) + log(distance(A, T)) == log(distance(S, T)) + log(distance(F, K))
By anti_similar_triangle_basic_properties on G, A, F, K, F, A we get angle(G, A, F) == 0 - angle(K, F, A) mod 360, angle(A, F, G) == 0 - angle(F, A, K) mod 360, angle(F, G, A) == 0 - angle(A, K, F) mod 360, log(distance(A, G)) + log(distance(A, F)) == log(distance(F, K)) + log(distance(A, F)), log(distance(A, F)) + log(distance(A, K)) == log(distance(A, F)) + log(distance(F, G)), log(distance(A, K)) + log(distance(A, G)) == log(distance(F, G)) + log(distance(F, K))
By sas_anti_congruence on K, center(Circle(A, F, J)), J, L, center(Circle(A, F, J)), J we get anti_congruent_triangles(J, K, center(Circle(A, F, J)), J, L, center(Circle(A, F, J)))
By anti_similar_triangle_basic_properties on A, S, T, G, L, A we get angle(A, S, T) == 0 - angle(G, L, A) mod 360, angle(S, T, A) == 0 - angle(L, A, G) mod 360, angle(T, A, S) == 0 - angle(A, G, L) mod 360, log(distance(A, S)) + log(distance(A, L)) == log(distance(G, L)) + log(distance(S, T)), log(distance(A, L)) + log(distance(A, T)) == log(distance(S, T)) + log(distance(A, G)), log(distance(A, G)) + log(distance(A, S)) == log(distance(A, T)) + log(distance(G, L))
By sas_congruence on M, center(Circle(B, J, K)), J, J, center(Circle(B, J, K)), K we get congruent_triangles(J, K, center(Circle(B, J, K)), M, J, center(Circle(B, J, K)))
By anti_similar_triangle_basic_properties on A, L, G, G, F, A we get angle(A, L, G) == 0 - angle(G, F, A) mod 360, angle(L, G, A) == 0 - angle(F, A, G) mod 360, angle(G, A, L) == 0 - angle(A, G, F) mod 360, log(distance(A, L)) + log(distance(A, F)) == log(distance(F, G)) + log(distance(G, L)), log(distance(A, F)) + log(distance(A, G)) == log(distance(G, L)) + log(distance(A, G)), log(distance(A, G)) + log(distance(A, L)) == log(distance(A, G)) + log(distance(F, G))
By sas_anti_congruence on K, center(Circle(B, J, K)), B, M, center(Circle(B, J, K)), B we get anti_congruent_triangles(B, K, center(Circle(B, J, K)), B, M, center(Circle(B, J, K)))
By sas_congruence on K, center(Circle(A, F, J)), A, A, center(Circle(A, F, J)), L we get congruent_triangles(A, K, center(Circle(A, F, J)), L, A, center(Circle(A, F, J)))
By sas_anti_congruence on J, center(Circle(B, J, K)), K, J, center(Circle(B, J, K)), M we get anti_congruent_triangles(J, K, center(Circle(B, J, K)), J, M, center(Circle(B, J, K)))
By sas_anti_congruence on L, center(Circle(C, J, L)), J, M, center(Circle(C, J, L)), J we get anti_congruent_triangles(J, L, center(Circle(C, J, L)), J, M, center(Circle(C, J, L)))
By sas_anti_congruence on L, center(Circle(C, J, L)), C, M, center(Circle(C, J, L)), C we get anti_congruent_triangles(C, L, center(Circle(C, J, L)), C, M, center(Circle(C, J, L)))
By sas_anti_congruence on M, center(Circle(C, J, L)), J, L, center(Circle(C, J, L)), J we get anti_congruent_triangles(J, L, center(Circle(C, J, L)), J, M, center(Circle(C, J, L)))
By anti_similar_triangle_basic_properties on F, A, G, L, M, K we get angle(F, A, G) == 0 - angle(L, M, K) mod 360, angle(A, G, F) == 0 - angle(M, K, L) mod 360, angle(G, F, A) == 0 - angle(K, L, M) mod 360, log(distance(A, F)) + log(distance(K, M)) == log(distance(L, M)) + log(distance(A, G)), log(distance(A, G)) + log(distance(K, L)) == log(distance(K, M)) + log(distance(F, G)), log(distance(F, G)) + log(distance(L, M)) == log(distance(K, L)) + log(distance(A, F))
By similar_triangle_basic_properties on T, G, M, T, A, S we get angle(T, A, S) == angle(T, G, M) mod 360, angle(A, S, T) == angle(G, M, T) mod 360, angle(M, T, G) == angle(S, T, A) mod 360, log(distance(A, T)) + log(distance(G, M)) == log(distance(G, T)) + log(distance(A, S)), log(distance(A, S)) + log(distance(M, T)) == log(distance(G, M)) + log(distance(S, T)), log(distance(M, T)) + log(distance(A, T)) == log(distance(S, T)) + log(distance(G, T))
By sas_anti_congruence on C, center(Circle(C, J, L)), M, C, center(Circle(C, J, L)), L we get anti_congruent_triangles(C, L, center(Circle(C, J, L)), C, M, center(Circle(C, J, L)))
By sas_congruence on J, center(Circle(B, J, K)), K, M, center(Circle(B, J, K)), J we get congruent_triangles(J, K, center(Circle(B, J, K)), M, J, center(Circle(B, J, K)))
By similar_triangle_basic_properties on F, M, G, G, A, F we get angle(F, M, G) == angle(G, A, F) mod 360, angle(A, F, G) == angle(M, G, F) mod 360, angle(F, G, A) == angle(G, F, M) mod 360, log(distance(A, G)) + log(distance(G, M)) == log(distance(F, M)) + log(distance(A, F)), log(distance(A, F)) + log(distance(F, G)) == log(distance(G, M)) + log(distance(F, G)), log(distance(F, G)) + log(distance(A, G)) == log(distance(F, G)) + log(distance(F, M))
By similar_triangle_basic_properties on S, A, T, S, F, M we get angle(S, A, T) == angle(S, F, M) mod 360, angle(A, T, S) == angle(F, M, S) mod 360, angle(M, S, F) == angle(T, S, A) mod 360, log(distance(A, S)) + log(distance(F, M)) == log(distance(F, S)) + log(distance(A, T)), log(distance(A, T)) + log(distance(M, S)) == log(distance(F, M)) + log(distance(S, T)), log(distance(M, S)) + log(distance(A, S)) == log(distance(S, T)) + log(distance(F, S))
By anti_similar_triangle_basic_properties on A, L, G, T, S, A we get angle(A, L, G) == 0 - angle(T, S, A) mod 360, angle(L, G, A) == 0 - angle(S, A, T) mod 360, angle(G, A, L) == 0 - angle(A, T, S) mod 360, log(distance(A, L)) + log(distance(A, S)) == log(distance(S, T)) + log(distance(G, L)), log(distance(A, S)) + log(distance(A, G)) == log(distance(G, L)) + log(distance(A, T)), log(distance(A, G)) + log(distance(S, T)) == log(distance(A, T)) + log(distance(A, L))
By sas_anti_congruence on J, center(Circle(B, J, K)), M, J, center(Circle(B, J, K)), K we get anti_congruent_triangles(J, K, center(Circle(B, J, K)), J, M, center(Circle(B, J, K)))
By sas_congruence on L, center(Circle(A, F, J)), J, J, center(Circle(A, F, J)), K we get congruent_triangles(J, K, center(Circle(A, F, J)), L, J, center(Circle(A, F, J)))
By similar_triangle_basic_properties on G, T, M, A, T, S we get angle(A, T, S) == angle(G, T, M) mod 360, angle(T, M, G) == angle(T, S, A) mod 360, angle(M, G, T) == angle(S, A, T) mod 360, log(distance(A, T)) + log(distance(M, T)) == log(distance(G, T)) + log(distance(S, T)), log(distance(M, T)) + log(distance(A, S)) == log(distance(S, T)) + log(distance(G, M)), log(distance(A, S)) + log(distance(G, T)) == log(distance(G, M)) + log(distance(A, T))
By sas_anti_congruence on A, center(Circle(A, F, J)), K, A, center(Circle(A, F, J)), L we get anti_congruent_triangles(A, K, center(Circle(A, F, J)), A, L, center(Circle(A, F, J)))
By sas_congruence on J, center(Circle(A, F, J)), K, L, center(Circle(A, F, J)), J we get congruent_triangles(J, K, center(Circle(A, F, J)), L, J, center(Circle(A, F, J)))
By sas_anti_congruence on M, center(Circle(B, J, K)), J, K, center(Circle(B, J, K)), J we get anti_congruent_triangles(J, K, center(Circle(B, J, K)), J, M, center(Circle(B, J, K)))
By sas_congruence on L, center(Circle(C, J, L)), C, C, center(Circle(C, J, L)), M we get congruent_triangles(C, L, center(Circle(C, J, L)), M, C, center(Circle(C, J, L)))
By similar_triangle_basic_properties on F, G, M, G, F, A we get angle(F, G, M) == angle(G, F, A) mod 360, angle(F, A, G) == angle(G, M, F) mod 360, angle(A, G, F) == angle(M, F, G) mod 360, log(distance(F, G)) + log(distance(A, F)) == log(distance(F, G)) + log(distance(G, M)), log(distance(A, F)) + log(distance(F, M)) == log(distance(G, M)) + log(distance(A, G)), log(distance(A, G)) + log(distance(F, G)) == log(distance(F, M)) + log(distance(F, G))
By sas_congruence on B, center(Circle(B, J, K)), K, M, center(Circle(B, J, K)), B we get congruent_triangles(B, K, center(Circle(B, J, K)), M, B, center(Circle(B, J, K)))
By sas_anti_congruence on A, center(Circle(A, F, J)), L, A, center(Circle(A, F, J)), K we get anti_congruent_triangles(A, K, center(Circle(A, F, J)), A, L, center(Circle(A, F, J)))
By sas_congruence on M, center(Circle(C, J, L)), C, C, center(Circle(C, J, L)), L we get congruent_triangles(C, L, center(Circle(C, J, L)), M, C, center(Circle(C, J, L)))
By similar_triangle_basic_properties on A, S, T, M, G, F we get angle(A, S, T) == angle(M, G, F) mod 360, angle(G, F, M) == angle(S, T, A) mod 360, angle(F, M, G) == angle(T, A, S) mod 360, log(distance(A, S)) + log(distance(F, G)) == log(distance(G, M)) + log(distance(S, T)), log(distance(F, G)) + log(distance(A, T)) == log(distance(S, T)) + log(distance(F, M)), log(distance(A, T)) + log(distance(G, M)) == log(distance(F, M)) + log(distance(A, S))
By sas_anti_congruence on L, center(Circle(A, F, J)), A, K, center(Circle(A, F, J)), A we get anti_congruent_triangles(A, K, center(Circle(A, F, J)), A, L, center(Circle(A, F, J)))
By sas_anti_congruence on J, center(Circle(C, J, L)), L, J, center(Circle(C, J, L)), M we get anti_congruent_triangles(J, L, center(Circle(C, J, L)), J, M, center(Circle(C, J, L)))
By sas_congruence on J, center(Circle(A, F, J)), L, K, center(Circle(A, F, J)), J we get congruent_triangles(J, K, center(Circle(A, F, J)), L, J, center(Circle(A, F, J)))
By sas_anti_congruence on K, center(Circle(B, J, K)), J, M, center(Circle(B, J, K)), J we get anti_congruent_triangles(J, K, center(Circle(B, J, K)), J, M, center(Circle(B, J, K)))
By sas_anti_congruence on K, center(Circle(A, F, J)), A, L, center(Circle(A, F, J)), A we get anti_congruent_triangles(A, K, center(Circle(A, F, J)), A, L, center(Circle(A, F, J)))
By sas_congruence on M, center(Circle(C, J, L)), J, J, center(Circle(C, J, L)), L we get congruent_triangles(J, L, center(Circle(C, J, L)), M, J, center(Circle(C, J, L)))
By sas_anti_congruence on J, center(Circle(A, F, J)), K, J, center(Circle(A, F, J)), L we get anti_congruent_triangles(J, K, center(Circle(A, F, J)), J, L, center(Circle(A, F, J)))
By sas_congruence on J, center(Circle(C, J, L)), L, M, center(Circle(C, J, L)), J we get congruent_triangles(J, L, center(Circle(C, J, L)), M, J, center(Circle(C, J, L)))
By sas_anti_congruence on B, center(Circle(B, J, K)), M, B, center(Circle(B, J, K)), K we get anti_congruent_triangles(B, K, center(Circle(B, J, K)), B, M, center(Circle(B, J, K)))
By power_of_a_point_definition on line_intersection(Line(F, G), Line(J, M)), M, J, Circle(B, J, K) we get log(power_of_a_point(line_intersection(Line(F, G), Line(J, M)), Circle(B, J, K))) == log(distance(M, line_intersection(Line(F, G), Line(J, M)))) + log(distance(J, line_intersection(Line(F, G), Line(J, M))))
By sas_congruence on J, center(Circle(C, J, L)), M, L, center(Circle(C, J, L)), J we get congruent_triangles(J, L, center(Circle(C, J, L)), M, J, center(Circle(C, J, L)))
By sas_congruence on C, center(Circle(C, J, L)), M, L, center(Circle(C, J, L)), C we get congruent_triangles(C, L, center(Circle(C, J, L)), M, C, center(Circle(C, J, L)))
By sas_congruence on L, center(Circle(C, J, L)), J, J, center(Circle(C, J, L)), M we get congruent_triangles(J, L, center(Circle(C, J, L)), M, J, center(Circle(C, J, L)))
By power_of_a_point_definition on line_intersection(Line(F, G), Line(J, M)), M, J, Circle(C, J, L) we get log(power_of_a_point(line_intersection(Line(F, G), Line(J, M)), Circle(C, J, L))) == log(distance(M, line_intersection(Line(F, G), Line(J, M)))) + log(distance(J, line_intersection(Line(F, G), Line(J, M))))
By sas_congruence on K, center(Circle(B, J, K)), J, J, center(Circle(B, J, K)), M we get congruent_triangles(J, K, center(Circle(B, J, K)), M, J, center(Circle(B, J, K)))
By power_of_a_point_definition on midpoint(K, M), F, J, Circle(A, F, J) we get log(power_of_a_point(midpoint(K, M), Circle(A, F, J))) == log(distance(F, midpoint(K, M))) + log(distance(J, midpoint(K, M)))
By sas_congruence on L, center(Circle(A, F, J)), A, A, center(Circle(A, F, J)), K we get congruent_triangles(A, K, center(Circle(A, F, J)), L, A, center(Circle(A, F, J)))
By sas_congruence on K, center(Circle(A, F, J)), J, J, center(Circle(A, F, J)), L we get congruent_triangles(J, K, center(Circle(A, F, J)), L, J, center(Circle(A, F, J)))
By sas_congruence on M, center(Circle(B, J, K)), B, B, center(Circle(B, J, K)), K we get congruent_triangles(B, K, center(Circle(B, J, K)), M, B, center(Circle(B, J, K)))
By sas_congruence on B, center(Circle(B, J, K)), M, K, center(Circle(B, J, K)), B we get congruent_triangles(B, K, center(Circle(B, J, K)), M, B, center(Circle(B, J, K)))
By sas_anti_congruence on L, center(Circle(A, F, J)), J, K, center(Circle(A, F, J)), J we get anti_congruent_triangles(J, K, center(Circle(A, F, J)), J, L, center(Circle(A, F, J)))
By sas_anti_congruence on M, center(Circle(B, J, K)), B, K, center(Circle(B, J, K)), B we get anti_congruent_triangles(B, K, center(Circle(B, J, K)), B, M, center(Circle(B, J, K)))
By sas_anti_congruence on J, center(Circle(A, F, J)), L, J, center(Circle(A, F, J)), K we get anti_congruent_triangles(J, K, center(Circle(A, F, J)), J, L, center(Circle(A, F, J)))
By sas_congruence on C, center(Circle(C, J, L)), L, M, center(Circle(C, J, L)), C we get congruent_triangles(C, L, center(Circle(C, J, L)), M, C, center(Circle(C, J, L)))
By sas_congruence on A, center(Circle(A, F, J)), K, L, center(Circle(A, F, J)), A we get congruent_triangles(A, K, center(Circle(A, F, J)), L, A, center(Circle(A, F, J)))
By sas_anti_congruence on C, center(Circle(C, J, L)), L, C, center(Circle(C, J, L)), M we get anti_congruent_triangles(C, L, center(Circle(C, J, L)), C, M, center(Circle(C, J, L)))
By sas_anti_congruence on J, center(Circle(C, J, L)), M, J, center(Circle(C, J, L)), L we get anti_congruent_triangles(J, L, center(Circle(C, J, L)), J, M, center(Circle(C, J, L)))
By sas_anti_congruence on B, center(Circle(B, J, K)), K, B, center(Circle(B, J, K)), M we get anti_congruent_triangles(B, K, center(Circle(B, J, K)), B, M, center(Circle(B, J, K)))
By sas_congruence on J, center(Circle(B, J, K)), M, K, center(Circle(B, J, K)), J we get congruent_triangles(J, K, center(Circle(B, J, K)), M, J, center(Circle(B, J, K)))
By power_of_a_point_definition on midpoint(K, M), G, K, Circle(A, F, J) we get log(power_of_a_point(midpoint(K, M), Circle(A, F, J))) == log(distance(G, midpoint(K, M))) + log(distance(K, midpoint(K, M)))
By power_of_a_point_definition on midpoint(L, M), J, G, Circle(A, F, J) we get log(power_of_a_point(midpoint(L, M), Circle(A, F, J))) == log(distance(J, midpoint(L, M))) + log(distance(G, midpoint(L, M)))
By power_of_a_point_definition on midpoint(L, M), F, L, Circle(A, F, J) we get log(power_of_a_point(midpoint(L, M), Circle(A, F, J))) == log(distance(F, midpoint(L, M))) + log(distance(L, midpoint(L, M)))
By similar_triangle_basic_properties on A, F, G, G, M, T we get angle(A, F, G) == angle(G, M, T) mod 360, angle(F, G, A) == angle(M, T, G) mod 360, angle(G, A, F) == angle(T, G, M) mod 360, log(distance(A, F)) + log(distance(M, T)) == log(distance(G, M)) + log(distance(F, G)), log(distance(F, G)) + log(distance(G, T)) == log(distance(M, T)) + log(distance(A, G)), log(distance(A, G)) + log(distance(G, M)) == log(distance(G, T)) + log(distance(A, F))
By similar_triangle_basic_properties on A, G, F, G, T, M we get angle(A, G, F) == angle(G, T, M) mod 360, angle(G, F, A) == angle(T, M, G) mod 360, angle(F, A, G) == angle(M, G, T) mod 360, log(distance(A, G)) + log(distance(M, T)) == log(distance(G, T)) + log(distance(F, G)), log(distance(F, G)) + log(distance(G, M)) == log(distance(M, T)) + log(distance(A, F)), log(distance(A, F)) + log(distance(G, T)) == log(distance(G, M)) + log(distance(A, G))
By similar_triangle_basic_properties on F, G, A, S, M, F we get angle(F, G, A) == angle(S, M, F) mod 360, angle(G, A, F) == angle(M, F, S) mod 360, angle(A, F, G) == angle(F, S, M) mod 360, log(distance(F, G)) + log(distance(F, M)) == log(distance(M, S)) + log(distance(A, G)), log(distance(A, G)) + log(distance(F, S)) == log(distance(F, M)) + log(distance(A, F)), log(distance(A, F)) + log(distance(M, S)) == log(distance(F, S)) + log(distance(F, G))
By similar_triangle_basic_properties on A, G, F, F, M, S we get angle(A, G, F) == angle(F, M, S) mod 360, angle(G, F, A) == angle(M, S, F) mod 360, angle(F, A, G) == angle(S, F, M) mod 360, log(distance(A, G)) + log(distance(M, S)) == log(distance(F, M)) + log(distance(F, G)), log(distance(F, G)) + log(distance(F, S)) == log(distance(M, S)) + log(distance(A, F)), log(distance(A, F)) + log(distance(F, M)) == log(distance(F, S)) + log(distance(A, G))
By power_of_a_point_definition on T, G, A, Circle(A, F, J) we get log(distance(G, T)) + log(distance(A, T)) == log(power_of_a_point(T, Circle(A, F, J)))
By power_of_a_point_definition on S, F, A, Circle(A, F, J) we get log(distance(F, S)) + log(distance(A, S)) == log(power_of_a_point(S, Circle(A, F, J)))
By power_of_a_point_definition on line_intersection(Line(F, G), Line(J, M)), F, G, Circle(A, F, J) we get log(power_of_a_point(line_intersection(Line(F, G), Line(J, M)), Circle(A, F, J))) == log(distance(F, line_intersection(Line(F, G), Line(J, M)))) + log(distance(G, line_intersection(Line(F, G), Line(J, M))))
By similar_triangle_basic_properties on T, S, A, G, F, A we get angle(G, F, A) == angle(T, S, A) mod 360, angle(F, A, G) == angle(S, A, T) mod 360, angle(A, G, F) == angle(A, T, S) mod 360, log(distance(F, G)) + log(distance(A, S)) == log(distance(S, T)) + log(distance(A, F)), log(distance(A, F)) + log(distance(A, T)) == log(distance(A, S)) + log(distance(A, G)), log(distance(A, G)) + log(distance(S, T)) == log(distance(A, T)) + log(distance(F, G))
By similar_triangle_basic_properties on A, S, T, A, F, G we get angle(A, F, G) == angle(A, S, T) mod 360, angle(F, G, A) == angle(S, T, A) mod 360, angle(G, A, F) == angle(T, A, S) mod 360, log(distance(A, F)) + log(distance(S, T)) == log(distance(A, S)) + log(distance(F, G)), log(distance(F, G)) + log(distance(A, T)) == log(distance(S, T)) + log(distance(A, G)), log(distance(A, G)) + log(distance(A, S)) == log(distance(A, T)) + log(distance(A, F))
By concurrent_sufficient_conditions on Line(L, center(Circle(C, J, L))), Line(G, L), Line(K, L) we get concurrent(Line(G, L), Line(K, L), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(M, center(Circle(C, J, L))), Line(F, L), Line(J, M) we get concurrent(Line(F, L), Line(J, M), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(K, center(Circle(B, J, K))), Line(F, K), Line(G, K) we get concurrent(Line(F, K), Line(G, K), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(L, center(Circle(A, F, G))), Line(K, L), Line(J, L) we get concurrent(Line(J, L), Line(K, L), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(L, center(Circle(C, J, L))), Line(L, center(Circle(A, F, G))), Line(F, L) we get concurrent(Line(F, L), Line(L, center(Circle(A, F, G))), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(G, K), Line(F, L), Line(M, center(Circle(B, J, K))) we get concurrent(Line(F, L), Line(G, K), Line(M, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(L, center(Circle(A, F, G))), Line(L, center(Circle(C, J, L))), Line(K, L) we get concurrent(Line(K, L), Line(L, center(Circle(A, F, G))), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(L, center(Circle(C, J, L))), Line(C, G), Line(M, center(Circle(C, J, L))) we get concurrent(Line(C, G), Line(L, center(Circle(C, J, L))), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(L, center(Circle(C, J, L))), Line(K, L), Line(L, center(Circle(A, F, G))) we get concurrent(Line(K, L), Line(L, center(Circle(A, F, G))), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(J, M), Line(M, center(Circle(B, J, K))), Line(B, C) we get concurrent(Line(B, C), Line(J, M), Line(M, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(G, K), Line(K, center(Circle(A, F, G))), Line(J, K) we get concurrent(Line(G, K), Line(J, K), Line(K, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(M, center(Circle(B, J, K))), Line(F, L), Line(J, M) we get concurrent(Line(F, L), Line(J, M), Line(M, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(K, center(Circle(A, F, G))), Line(F, K), Line(K, L) we get concurrent(Line(F, K), Line(K, L), Line(K, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(G, K), Line(K, center(Circle(A, F, G))), Line(F, K) we get concurrent(Line(F, K), Line(G, K), Line(K, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(L, center(Circle(A, F, G))), Line(L, center(Circle(C, J, L))), Line(G, L) we get concurrent(Line(G, L), Line(L, center(Circle(A, F, G))), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(G, K), Line(F, L), Line(M, center(Circle(C, J, L))) we get concurrent(Line(F, L), Line(G, K), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(G, L), Line(L, center(Circle(A, F, G))), Line(J, L) we get concurrent(Line(G, L), Line(J, L), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(K, center(Circle(A, F, G))), Line(K, center(Circle(B, J, K))), Line(K, L) we get concurrent(Line(K, L), Line(K, center(Circle(A, F, G))), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(F, K), Line(K, center(Circle(A, F, G))), Line(G, K) we get concurrent(Line(F, K), Line(G, K), Line(K, center(Circle(A, F, G))))
By midpoint_definition_v1 on S, T, M we get M == midpoint(S, T)
By concurrent_sufficient_conditions on Line(K, center(Circle(A, F, G))), Line(J, K), Line(G, K) we get concurrent(Line(G, K), Line(J, K), Line(K, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(K, center(Circle(A, F, G))), Line(K, center(Circle(B, J, K))), Line(F, K) we get concurrent(Line(F, K), Line(K, center(Circle(A, F, G))), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(M, center(Circle(B, J, K))), Line(F, L), Line(G, K) we get concurrent(Line(F, L), Line(G, K), Line(M, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(G, K), Line(K, center(Circle(B, J, K))), Line(J, K) we get concurrent(Line(G, K), Line(J, K), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(K, center(Circle(B, J, K))), Line(B, F), Line(M, center(Circle(B, J, K))) we get concurrent(Line(B, F), Line(K, center(Circle(B, J, K))), Line(M, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(K, center(Circle(A, F, G))), Line(K, center(Circle(B, J, K))), Line(G, K) we get concurrent(Line(G, K), Line(K, center(Circle(A, F, G))), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(J, L), Line(L, center(Circle(A, F, G))), Line(K, L) we get concurrent(Line(J, L), Line(K, L), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(A, C), Line(J, L), Line(L, center(Circle(A, F, G))) we get concurrent(Line(A, C), Line(J, L), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(G, L), Line(L, center(Circle(A, F, G))), Line(L, center(Circle(C, J, L))) we get concurrent(Line(G, L), Line(L, center(Circle(A, F, G))), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(K, center(Circle(A, F, G))), Line(G, K), Line(F, K) we get concurrent(Line(F, K), Line(G, K), Line(K, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(F, K), Line(K, L), Line(K, center(Circle(B, J, K))) we get concurrent(Line(F, K), Line(K, L), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(K, center(Circle(A, F, G))), Line(A, B), Line(G, K) we get concurrent(Line(A, B), Line(G, K), Line(K, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(J, L), Line(G, L), Line(L, center(Circle(A, F, G))) we get concurrent(Line(G, L), Line(J, L), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(K, center(Circle(A, F, G))), Line(F, K), Line(J, K) we get concurrent(Line(F, K), Line(J, K), Line(K, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(M, center(Circle(C, J, L))), Line(L, center(Circle(C, J, L))), Line(C, G) we get concurrent(Line(C, G), Line(L, center(Circle(C, J, L))), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(A, C), Line(K, L), Line(L, center(Circle(C, J, L))) we get concurrent(Line(A, C), Line(K, L), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(K, center(Circle(B, J, K))), Line(K, center(Circle(A, F, G))), Line(K, L) we get concurrent(Line(K, L), Line(K, center(Circle(A, F, G))), Line(K, center(Circle(B, J, K))))
By median_definition on center(Circle(C, J, L)), L, M, Line(C, G) we get Line(C, G) == median(center(Circle(C, J, L)), L, M)
By concurrent_sufficient_conditions on Line(A, C), Line(G, L), Line(L, center(Circle(C, J, L))) we get concurrent(Line(A, C), Line(G, L), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(K, L), Line(J, L), Line(L, center(Circle(A, F, G))) we get concurrent(Line(J, L), Line(K, L), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(G, K), Line(M, center(Circle(C, J, L))), Line(J, M) we get concurrent(Line(G, K), Line(J, M), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(K, center(Circle(A, F, G))), Line(J, K), Line(K, L) we get concurrent(Line(J, K), Line(K, L), Line(K, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(L, center(Circle(A, F, G))), Line(L, center(Circle(C, J, L))), Line(F, L) we get concurrent(Line(F, L), Line(L, center(Circle(A, F, G))), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(G, K), Line(K, center(Circle(B, J, K))), Line(F, K) we get concurrent(Line(F, K), Line(G, K), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(M, center(Circle(C, J, L))), Line(B, C), Line(F, L) we get concurrent(Line(B, C), Line(F, L), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(F, L), Line(J, L), Line(L, center(Circle(A, F, G))) we get concurrent(Line(F, L), Line(J, L), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(B, C), Line(G, K), Line(M, center(Circle(C, J, L))) we get concurrent(Line(B, C), Line(G, K), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(A, J), Line(K, center(Circle(A, F, G))), Line(L, center(Circle(A, F, G))) we get concurrent(Line(A, J), Line(K, center(Circle(A, F, G))), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(L, center(Circle(A, F, G))), Line(F, L), Line(K, L) we get concurrent(Line(F, L), Line(K, L), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(K, center(Circle(A, F, G))), Line(K, L), Line(G, K) we get concurrent(Line(G, K), Line(K, L), Line(K, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(G, L), Line(L, center(Circle(C, J, L))), Line(A, C) we get concurrent(Line(A, C), Line(G, L), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(K, L), Line(K, center(Circle(A, F, G))), Line(J, K) we get concurrent(Line(J, K), Line(K, L), Line(K, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(K, center(Circle(B, J, K))), Line(F, K), Line(J, K) we get concurrent(Line(F, K), Line(J, K), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(B, C), Line(J, M), Line(M, center(Circle(B, J, K))) we get concurrent(Line(B, C), Line(J, M), Line(M, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(L, center(Circle(C, J, L))), Line(F, L), Line(J, L) we get concurrent(Line(F, L), Line(J, L), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(F, L), Line(L, center(Circle(C, J, L))), Line(A, C) we get concurrent(Line(A, C), Line(F, L), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(A, B), Line(K, center(Circle(B, J, K))), Line(G, K) we get concurrent(Line(A, B), Line(G, K), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(M, center(Circle(B, J, K))), Line(B, F), Line(K, center(Circle(B, J, K))) we get concurrent(Line(B, F), Line(K, center(Circle(B, J, K))), Line(M, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(L, center(Circle(A, F, G))), Line(F, L), Line(G, L) we get concurrent(Line(F, L), Line(G, L), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(M, center(Circle(C, J, L))), Line(J, M), Line(M, center(Circle(B, J, K))) we get concurrent(Line(J, M), Line(M, center(Circle(B, J, K))), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(A, B), Line(K, center(Circle(A, F, G))), Line(F, K) we get concurrent(Line(A, B), Line(F, K), Line(K, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(F, L), Line(M, center(Circle(C, J, L))), Line(J, M) we get concurrent(Line(F, L), Line(J, M), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(A, B), Line(K, center(Circle(B, J, K))), Line(F, K) we get concurrent(Line(A, B), Line(F, K), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(M, center(Circle(B, J, K))), Line(J, M), Line(G, K) we get concurrent(Line(G, K), Line(J, M), Line(M, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(A, J), Line(L, center(Circle(A, F, G))), Line(K, center(Circle(A, F, G))) we get concurrent(Line(A, J), Line(K, center(Circle(A, F, G))), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(G, L), Line(J, L), Line(L, center(Circle(A, F, G))) we get concurrent(Line(G, L), Line(J, L), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(G, K), Line(A, B), Line(K, center(Circle(B, J, K))) we get concurrent(Line(A, B), Line(G, K), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(M, center(Circle(C, J, L))), Line(M, center(Circle(B, J, K))), Line(J, M) we get concurrent(Line(J, M), Line(M, center(Circle(B, J, K))), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(J, K), Line(F, K), Line(K, center(Circle(A, F, G))) we get concurrent(Line(F, K), Line(J, K), Line(K, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(B, C), Line(M, center(Circle(C, J, L))), Line(G, K) we get concurrent(Line(B, C), Line(G, K), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(L, center(Circle(A, F, G))), Line(G, L), Line(F, L) we get concurrent(Line(F, L), Line(G, L), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(J, L), Line(A, C), Line(L, center(Circle(C, J, L))) we get concurrent(Line(A, C), Line(J, L), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(M, center(Circle(C, J, L))), Line(M, center(Circle(B, J, K))), Line(G, K) we get concurrent(Line(G, K), Line(M, center(Circle(B, J, K))), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(F, K), Line(J, K), Line(K, center(Circle(B, J, K))) we get concurrent(Line(F, K), Line(J, K), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(G, K), Line(K, center(Circle(B, J, K))), Line(K, center(Circle(A, F, G))) we get concurrent(Line(G, K), Line(K, center(Circle(A, F, G))), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(A, C), Line(L, center(Circle(A, F, G))), Line(L, center(Circle(C, J, L))) we get concurrent(Line(A, C), Line(L, center(Circle(A, F, G))), Line(L, center(Circle(C, J, L))))
By line_definition on center(Circle(C, J, L)), midpoint(L, M), Line(C, G) we get Line(C, G) == Line(midpoint(L, M), center(Circle(C, J, L)))
By concurrent_sufficient_conditions on Line(A, B), Line(F, K), Line(K, center(Circle(B, J, K))) we get concurrent(Line(A, B), Line(F, K), Line(K, center(Circle(B, J, K))))
By line_definition on midpoint(K, M), center(Circle(B, J, K)), Line(B, F) we get Line(B, F) == Line(midpoint(K, M), center(Circle(B, J, K)))
By concurrent_sufficient_conditions on Line(K, L), Line(J, L), Line(L, center(Circle(C, J, L))) we get concurrent(Line(J, L), Line(K, L), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(F, K), Line(K, center(Circle(B, J, K))), Line(A, B) we get concurrent(Line(A, B), Line(F, K), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(M, center(Circle(C, J, L))), Line(G, K), Line(M, center(Circle(B, J, K))) we get concurrent(Line(G, K), Line(M, center(Circle(B, J, K))), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(G, K), Line(K, center(Circle(A, F, G))), Line(K, center(Circle(B, J, K))) we get concurrent(Line(G, K), Line(K, center(Circle(A, F, G))), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(M, center(Circle(B, J, K))), Line(B, C), Line(J, M) we get concurrent(Line(B, C), Line(J, M), Line(M, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(J, K), Line(K, center(Circle(B, J, K))), Line(K, L) we get concurrent(Line(J, K), Line(K, L), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(A, B), Line(K, L), Line(K, center(Circle(A, F, G))) we get concurrent(Line(A, B), Line(K, L), Line(K, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(K, L), Line(K, center(Circle(A, F, G))), Line(A, B) we get concurrent(Line(A, B), Line(K, L), Line(K, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(K, center(Circle(B, J, K))), Line(K, L), Line(F, K) we get concurrent(Line(F, K), Line(K, L), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(G, L), Line(A, C), Line(L, center(Circle(C, J, L))) we get concurrent(Line(A, C), Line(G, L), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(K, center(Circle(A, F, G))), Line(F, K), Line(G, K) we get concurrent(Line(F, K), Line(G, K), Line(K, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(L, center(Circle(C, J, L))), Line(A, C), Line(G, L) we get concurrent(Line(A, C), Line(G, L), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(A, B), Line(K, L), Line(K, center(Circle(B, J, K))) we get concurrent(Line(A, B), Line(K, L), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(K, center(Circle(A, F, G))), Line(A, B), Line(K, center(Circle(B, J, K))) we get concurrent(Line(A, B), Line(K, center(Circle(A, F, G))), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(G, L), Line(L, center(Circle(C, J, L))), Line(F, L) we get concurrent(Line(F, L), Line(G, L), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(K, L), Line(A, B), Line(K, center(Circle(B, J, K))) we get concurrent(Line(A, B), Line(K, L), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(K, L), Line(K, center(Circle(A, F, G))), Line(G, K) we get concurrent(Line(G, K), Line(K, L), Line(K, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(M, center(Circle(C, J, L))), Line(G, K), Line(B, C) we get concurrent(Line(B, C), Line(G, K), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(K, center(Circle(B, J, K))), Line(K, L), Line(A, B) we get concurrent(Line(A, B), Line(K, L), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(M, center(Circle(B, J, K))), Line(M, center(Circle(C, J, L))), Line(J, M) we get concurrent(Line(J, M), Line(M, center(Circle(B, J, K))), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(J, K), Line(F, K), Line(K, center(Circle(B, J, K))) we get concurrent(Line(F, K), Line(J, K), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(A, B), Line(G, K), Line(K, center(Circle(A, F, G))) we get concurrent(Line(A, B), Line(G, K), Line(K, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(J, K), Line(K, center(Circle(A, F, G))), Line(K, L) we get concurrent(Line(J, K), Line(K, L), Line(K, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(M, center(Circle(C, J, L))), Line(M, center(Circle(B, J, K))), Line(B, C) we get concurrent(Line(B, C), Line(M, center(Circle(B, J, K))), Line(M, center(Circle(C, J, L))))
By median_definition on center(Circle(B, J, K)), M, K, Line(B, F) we get Line(B, F) == median(center(Circle(B, J, K)), K, M)
By concurrent_sufficient_conditions on Line(G, K), Line(K, center(Circle(A, F, G))), Line(A, B) we get concurrent(Line(A, B), Line(G, K), Line(K, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(F, L), Line(L, center(Circle(C, J, L))), Line(J, L) we get concurrent(Line(F, L), Line(J, L), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(A, C), Line(F, L), Line(L, center(Circle(C, J, L))) we get concurrent(Line(A, C), Line(F, L), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(M, center(Circle(C, J, L))), Line(J, M), Line(F, L) we get concurrent(Line(F, L), Line(J, M), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(J, K), Line(K, center(Circle(A, F, G))), Line(G, K) we get concurrent(Line(G, K), Line(J, K), Line(K, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(L, center(Circle(A, F, G))), Line(J, L), Line(K, L) we get concurrent(Line(J, L), Line(K, L), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(J, K), Line(K, center(Circle(A, F, G))), Line(A, B) we get concurrent(Line(A, B), Line(J, K), Line(K, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(L, center(Circle(A, F, G))), Line(J, L), Line(L, center(Circle(C, J, L))) we get concurrent(Line(J, L), Line(L, center(Circle(A, F, G))), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(G, L), Line(A, C), Line(L, center(Circle(A, F, G))) we get concurrent(Line(A, C), Line(G, L), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(G, K), Line(A, B), Line(K, center(Circle(A, F, G))) we get concurrent(Line(A, B), Line(G, K), Line(K, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(K, center(Circle(B, J, K))), Line(K, L), Line(J, K) we get concurrent(Line(J, K), Line(K, L), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(M, center(Circle(B, J, K))), Line(J, M), Line(B, C) we get concurrent(Line(B, C), Line(J, M), Line(M, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(K, center(Circle(B, J, K))), Line(J, K), Line(K, center(Circle(A, F, G))) we get concurrent(Line(J, K), Line(K, center(Circle(A, F, G))), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(L, center(Circle(A, F, G))), Line(G, L), Line(A, C) we get concurrent(Line(A, C), Line(G, L), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(F, K), Line(J, K), Line(K, center(Circle(A, F, G))) we get concurrent(Line(F, K), Line(J, K), Line(K, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(G, K), Line(J, K), Line(K, center(Circle(B, J, K))) we get concurrent(Line(G, K), Line(J, K), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(G, L), Line(K, L), Line(L, center(Circle(A, F, G))) we get concurrent(Line(G, L), Line(K, L), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(F, K), Line(K, center(Circle(B, J, K))), Line(K, center(Circle(A, F, G))) we get concurrent(Line(F, K), Line(K, center(Circle(A, F, G))), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(F, K), Line(K, center(Circle(B, J, K))), Line(K, L) we get concurrent(Line(F, K), Line(K, L), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(G, L), Line(L, center(Circle(C, J, L))), Line(L, center(Circle(A, F, G))) we get concurrent(Line(G, L), Line(L, center(Circle(A, F, G))), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(G, L), Line(L, center(Circle(C, J, L))), Line(J, L) we get concurrent(Line(G, L), Line(J, L), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(M, center(Circle(B, J, K))), Line(F, L), Line(M, center(Circle(C, J, L))) we get concurrent(Line(F, L), Line(M, center(Circle(B, J, K))), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(M, center(Circle(B, J, K))), Line(M, center(Circle(C, J, L))), Line(F, L) we get concurrent(Line(F, L), Line(M, center(Circle(B, J, K))), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(M, center(Circle(C, J, L))), Line(G, K), Line(J, M) we get concurrent(Line(G, K), Line(J, M), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(K, center(Circle(B, J, K))), Line(A, B), Line(F, K) we get concurrent(Line(A, B), Line(F, K), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(A, C), Line(L, center(Circle(C, J, L))), Line(K, L) we get concurrent(Line(A, C), Line(K, L), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(L, center(Circle(A, F, G))), Line(K, L), Line(F, L) we get concurrent(Line(F, L), Line(K, L), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(L, center(Circle(A, F, G))), Line(K, center(Circle(A, F, G))), Line(A, J) we get concurrent(Line(A, J), Line(K, center(Circle(A, F, G))), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(J, L), Line(L, center(Circle(C, J, L))), Line(G, L) we get concurrent(Line(G, L), Line(J, L), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(L, center(Circle(C, J, L))), Line(M, center(Circle(C, J, L))), Line(C, G) we get concurrent(Line(C, G), Line(L, center(Circle(C, J, L))), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(L, center(Circle(C, J, L))), Line(F, L), Line(A, C) we get concurrent(Line(A, C), Line(F, L), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(A, B), Line(G, K), Line(K, center(Circle(B, J, K))) we get concurrent(Line(A, B), Line(G, K), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(F, L), Line(A, C), Line(L, center(Circle(A, F, G))) we get concurrent(Line(A, C), Line(F, L), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(K, L), Line(K, center(Circle(B, J, K))), Line(K, center(Circle(A, F, G))) we get concurrent(Line(K, L), Line(K, center(Circle(A, F, G))), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(M, center(Circle(C, J, L))), Line(B, C), Line(J, M) we get concurrent(Line(B, C), Line(J, M), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(K, center(Circle(B, J, K))), Line(A, B), Line(K, center(Circle(A, F, G))) we get concurrent(Line(A, B), Line(K, center(Circle(A, F, G))), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(M, center(Circle(C, J, L))), Line(C, G), Line(L, center(Circle(C, J, L))) we get concurrent(Line(C, G), Line(L, center(Circle(C, J, L))), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(K, L), Line(L, center(Circle(C, J, L))), Line(L, center(Circle(A, F, G))) we get concurrent(Line(K, L), Line(L, center(Circle(A, F, G))), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(L, center(Circle(C, J, L))), Line(G, L), Line(L, center(Circle(A, F, G))) we get concurrent(Line(G, L), Line(L, center(Circle(A, F, G))), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(G, K), Line(K, L), Line(K, center(Circle(A, F, G))) we get concurrent(Line(G, K), Line(K, L), Line(K, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(J, K), Line(K, L), Line(K, center(Circle(B, J, K))) we get concurrent(Line(J, K), Line(K, L), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(M, center(Circle(B, J, K))), Line(G, K), Line(M, center(Circle(C, J, L))) we get concurrent(Line(G, K), Line(M, center(Circle(B, J, K))), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(F, K), Line(K, L), Line(K, center(Circle(A, F, G))) we get concurrent(Line(F, K), Line(K, L), Line(K, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(G, L), Line(L, center(Circle(C, J, L))), Line(K, L) we get concurrent(Line(G, L), Line(K, L), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(K, L), Line(A, C), Line(L, center(Circle(C, J, L))) we get concurrent(Line(A, C), Line(K, L), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(L, center(Circle(C, J, L))), Line(J, L), Line(A, C) we get concurrent(Line(A, C), Line(J, L), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(K, center(Circle(B, J, K))), Line(F, K), Line(K, L) we get concurrent(Line(F, K), Line(K, L), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(J, M), Line(M, center(Circle(C, J, L))), Line(M, center(Circle(B, J, K))) we get concurrent(Line(J, M), Line(M, center(Circle(B, J, K))), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(A, C), Line(K, L), Line(L, center(Circle(A, F, G))) we get concurrent(Line(A, C), Line(K, L), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(K, L), Line(A, B), Line(K, center(Circle(A, F, G))) we get concurrent(Line(A, B), Line(K, L), Line(K, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(K, center(Circle(B, J, K))), Line(J, K), Line(F, K) we get concurrent(Line(F, K), Line(J, K), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(J, K), Line(A, B), Line(K, center(Circle(A, F, G))) we get concurrent(Line(A, B), Line(J, K), Line(K, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(F, L), Line(L, center(Circle(C, J, L))), Line(L, center(Circle(A, F, G))) we get concurrent(Line(F, L), Line(L, center(Circle(A, F, G))), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(A, B), Line(K, center(Circle(B, J, K))), Line(K, center(Circle(A, F, G))) we get concurrent(Line(A, B), Line(K, center(Circle(A, F, G))), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(K, center(Circle(B, J, K))), Line(J, K), Line(A, B) we get concurrent(Line(A, B), Line(J, K), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(F, L), Line(J, L), Line(L, center(Circle(C, J, L))) we get concurrent(Line(F, L), Line(J, L), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(J, K), Line(K, center(Circle(B, J, K))), Line(F, K) we get concurrent(Line(F, K), Line(J, K), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(L, center(Circle(C, J, L))), Line(J, L), Line(G, L) we get concurrent(Line(G, L), Line(J, L), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(A, B), Line(K, center(Circle(A, F, G))), Line(K, center(Circle(B, J, K))) we get concurrent(Line(A, B), Line(K, center(Circle(A, F, G))), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(K, L), Line(A, C), Line(L, center(Circle(A, F, G))) we get concurrent(Line(A, C), Line(K, L), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(A, C), Line(L, center(Circle(A, F, G))), Line(G, L) we get concurrent(Line(A, C), Line(G, L), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(K, center(Circle(A, F, G))), Line(G, K), Line(A, B) we get concurrent(Line(A, B), Line(G, K), Line(K, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(K, center(Circle(A, F, G))), Line(F, K), Line(A, B) we get concurrent(Line(A, B), Line(F, K), Line(K, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(F, K), Line(A, B), Line(K, center(Circle(A, F, G))) we get concurrent(Line(A, B), Line(F, K), Line(K, center(Circle(A, F, G))))
By line_definition on F, center(Circle(B, J, K)), Line(B, F) we get Line(B, F) == Line(F, center(Circle(B, J, K)))
By concurrent_sufficient_conditions on Line(M, center(Circle(B, J, K))), Line(B, C), Line(M, center(Circle(C, J, L))) we get concurrent(Line(B, C), Line(M, center(Circle(B, J, K))), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(A, C), Line(L, center(Circle(C, J, L))), Line(G, L) we get concurrent(Line(A, C), Line(G, L), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(K, L), Line(G, K), Line(K, center(Circle(A, F, G))) we get concurrent(Line(G, K), Line(K, L), Line(K, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(K, L), Line(K, center(Circle(B, J, K))), Line(F, K) we get concurrent(Line(F, K), Line(K, L), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(F, K), Line(A, B), Line(K, center(Circle(B, J, K))) we get concurrent(Line(A, B), Line(F, K), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(K, center(Circle(A, F, G))), Line(K, L), Line(J, K) we get concurrent(Line(J, K), Line(K, L), Line(K, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(L, center(Circle(A, F, G))), Line(J, L), Line(A, C) we get concurrent(Line(A, C), Line(J, L), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(K, center(Circle(A, F, G))), Line(J, K), Line(F, K) we get concurrent(Line(F, K), Line(J, K), Line(K, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(L, center(Circle(A, F, G))), Line(K, L), Line(A, C) we get concurrent(Line(A, C), Line(K, L), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(B, C), Line(M, center(Circle(B, J, K))), Line(M, center(Circle(C, J, L))) we get concurrent(Line(B, C), Line(M, center(Circle(B, J, K))), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(F, L), Line(L, center(Circle(A, F, G))), Line(A, C) we get concurrent(Line(A, C), Line(F, L), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(A, C), Line(L, center(Circle(C, J, L))), Line(F, L) we get concurrent(Line(A, C), Line(F, L), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(K, L), Line(L, center(Circle(C, J, L))), Line(J, L) we get concurrent(Line(J, L), Line(K, L), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(C, G), Line(M, center(Circle(C, J, L))), Line(L, center(Circle(C, J, L))) we get concurrent(Line(C, G), Line(L, center(Circle(C, J, L))), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(K, center(Circle(A, F, G))), Line(J, K), Line(K, center(Circle(B, J, K))) we get concurrent(Line(J, K), Line(K, center(Circle(A, F, G))), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(G, K), Line(F, K), Line(K, center(Circle(A, F, G))) we get concurrent(Line(F, K), Line(G, K), Line(K, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(K, center(Circle(A, F, G))), Line(J, K), Line(A, B) we get concurrent(Line(A, B), Line(J, K), Line(K, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(A, C), Line(J, L), Line(L, center(Circle(C, J, L))) we get concurrent(Line(A, C), Line(J, L), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(M, center(Circle(B, J, K))), Line(B, C), Line(G, K) we get concurrent(Line(B, C), Line(G, K), Line(M, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(G, K), Line(K, center(Circle(B, J, K))), Line(A, B) we get concurrent(Line(A, B), Line(G, K), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(M, center(Circle(B, J, K))), Line(B, C), Line(F, L) we get concurrent(Line(B, C), Line(F, L), Line(M, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(K, center(Circle(B, J, K))), Line(K, L), Line(G, K) we get concurrent(Line(G, K), Line(K, L), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(A, B), Line(K, center(Circle(A, F, G))), Line(K, L) we get concurrent(Line(A, B), Line(K, L), Line(K, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(F, K), Line(K, center(Circle(A, F, G))), Line(K, center(Circle(B, J, K))) we get concurrent(Line(F, K), Line(K, center(Circle(A, F, G))), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(F, L), Line(G, L), Line(L, center(Circle(A, F, G))) we get concurrent(Line(F, L), Line(G, L), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(K, center(Circle(B, J, K))), Line(K, center(Circle(A, F, G))), Line(F, K) we get concurrent(Line(F, K), Line(K, center(Circle(A, F, G))), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(L, center(Circle(A, F, G))), Line(G, L), Line(K, L) we get concurrent(Line(G, L), Line(K, L), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(G, L), Line(L, center(Circle(A, F, G))), Line(K, L) we get concurrent(Line(G, L), Line(K, L), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(K, center(Circle(B, J, K))), Line(A, B), Line(J, K) we get concurrent(Line(A, B), Line(J, K), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(K, center(Circle(B, J, K))), Line(F, K), Line(K, center(Circle(A, F, G))) we get concurrent(Line(F, K), Line(K, center(Circle(A, F, G))), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(F, L), Line(M, center(Circle(C, J, L))), Line(G, K) we get concurrent(Line(F, L), Line(G, K), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(K, center(Circle(B, J, K))), Line(K, center(Circle(A, F, G))), Line(A, B) we get concurrent(Line(A, B), Line(K, center(Circle(A, F, G))), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(J, M), Line(F, L), Line(M, center(Circle(B, J, K))) we get concurrent(Line(F, L), Line(J, M), Line(M, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(L, center(Circle(A, F, G))), Line(A, C), Line(L, center(Circle(C, J, L))) we get concurrent(Line(A, C), Line(L, center(Circle(A, F, G))), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(K, center(Circle(A, F, G))), Line(L, center(Circle(A, F, G))), Line(A, J) we get concurrent(Line(A, J), Line(K, center(Circle(A, F, G))), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(F, K), Line(G, K), Line(K, center(Circle(B, J, K))) we get concurrent(Line(F, K), Line(G, K), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(J, M), Line(M, center(Circle(C, J, L))), Line(F, L) we get concurrent(Line(F, L), Line(J, M), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(J, L), Line(L, center(Circle(A, F, G))), Line(G, L) we get concurrent(Line(G, L), Line(J, L), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(K, center(Circle(B, J, K))), Line(G, K), Line(K, L) we get concurrent(Line(G, K), Line(K, L), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(G, K), Line(M, center(Circle(C, J, L))), Line(M, center(Circle(B, J, K))) we get concurrent(Line(G, K), Line(M, center(Circle(B, J, K))), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(B, C), Line(G, K), Line(M, center(Circle(B, J, K))) we get concurrent(Line(B, C), Line(G, K), Line(M, center(Circle(B, J, K))))
By median_definition on center(Circle(A, F, G)), L, K, Line(A, J) we get Line(A, J) == median(center(Circle(A, F, G)), K, L)
By concurrent_sufficient_conditions on Line(M, center(Circle(C, J, L))), Line(F, L), Line(M, center(Circle(B, J, K))) we get concurrent(Line(F, L), Line(M, center(Circle(B, J, K))), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(A, C), Line(L, center(Circle(C, J, L))), Line(L, center(Circle(A, F, G))) we get concurrent(Line(A, C), Line(L, center(Circle(A, F, G))), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(G, L), Line(F, L), Line(L, center(Circle(A, F, G))) we get concurrent(Line(F, L), Line(G, L), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(B, C), Line(M, center(Circle(B, J, K))), Line(G, K) we get concurrent(Line(B, C), Line(G, K), Line(M, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(F, L), Line(B, C), Line(M, center(Circle(B, J, K))) we get concurrent(Line(B, C), Line(F, L), Line(M, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(F, K), Line(K, center(Circle(B, J, K))), Line(J, K) we get concurrent(Line(F, K), Line(J, K), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(L, center(Circle(C, J, L))), Line(A, C), Line(L, center(Circle(A, F, G))) we get concurrent(Line(A, C), Line(L, center(Circle(A, F, G))), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(A, B), Line(K, center(Circle(A, F, G))), Line(G, K) we get concurrent(Line(A, B), Line(G, K), Line(K, center(Circle(A, F, G))))
By line_definition on center(Circle(C, J, L)), G, Line(C, G) we get Line(C, G) == Line(G, center(Circle(C, J, L)))
By concurrent_sufficient_conditions on Line(J, K), Line(K, center(Circle(B, J, K))), Line(A, B) we get concurrent(Line(A, B), Line(J, K), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(L, center(Circle(A, F, G))), Line(F, L), Line(L, center(Circle(C, J, L))) we get concurrent(Line(F, L), Line(L, center(Circle(A, F, G))), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(L, center(Circle(A, F, G))), Line(J, L), Line(G, L) we get concurrent(Line(G, L), Line(J, L), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(L, center(Circle(A, F, G))), Line(A, C), Line(K, L) we get concurrent(Line(A, C), Line(K, L), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(L, center(Circle(C, J, L))), Line(F, L), Line(G, L) we get concurrent(Line(F, L), Line(G, L), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(B, C), Line(F, L), Line(M, center(Circle(C, J, L))) we get concurrent(Line(B, C), Line(F, L), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(K, L), Line(F, K), Line(K, center(Circle(B, J, K))) we get concurrent(Line(F, K), Line(K, L), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(F, L), Line(A, C), Line(L, center(Circle(C, J, L))) we get concurrent(Line(A, C), Line(F, L), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(L, center(Circle(C, J, L))), Line(F, L), Line(L, center(Circle(A, F, G))) we get concurrent(Line(F, L), Line(L, center(Circle(A, F, G))), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(L, center(Circle(C, J, L))), Line(J, L), Line(K, L) we get concurrent(Line(J, L), Line(K, L), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(J, M), Line(M, center(Circle(B, J, K))), Line(F, L) we get concurrent(Line(F, L), Line(J, M), Line(M, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(G, K), Line(M, center(Circle(B, J, K))), Line(J, M) we get concurrent(Line(G, K), Line(J, M), Line(M, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(B, C), Line(M, center(Circle(B, J, K))), Line(F, L) we get concurrent(Line(B, C), Line(F, L), Line(M, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(K, L), Line(G, L), Line(L, center(Circle(C, J, L))) we get concurrent(Line(G, L), Line(K, L), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(M, center(Circle(C, J, L))), Line(F, L), Line(B, C) we get concurrent(Line(B, C), Line(F, L), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(A, C), Line(L, center(Circle(A, F, G))), Line(J, L) we get concurrent(Line(A, C), Line(J, L), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(L, center(Circle(C, J, L))), Line(A, C), Line(F, L) we get concurrent(Line(A, C), Line(F, L), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(K, L), Line(L, center(Circle(C, J, L))), Line(F, L) we get concurrent(Line(F, L), Line(K, L), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(B, F), Line(K, center(Circle(B, J, K))), Line(M, center(Circle(B, J, K))) we get concurrent(Line(B, F), Line(K, center(Circle(B, J, K))), Line(M, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(F, L), Line(M, center(Circle(C, J, L))), Line(B, C) we get concurrent(Line(B, C), Line(F, L), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(J, M), Line(G, K), Line(M, center(Circle(C, J, L))) we get concurrent(Line(G, K), Line(J, M), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(G, K), Line(B, C), Line(M, center(Circle(B, J, K))) we get concurrent(Line(B, C), Line(G, K), Line(M, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(F, L), Line(G, K), Line(M, center(Circle(C, J, L))) we get concurrent(Line(F, L), Line(G, K), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(J, K), Line(K, center(Circle(B, J, K))), Line(K, center(Circle(A, F, G))) we get concurrent(Line(J, K), Line(K, center(Circle(A, F, G))), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(L, center(Circle(C, J, L))), Line(K, L), Line(A, C) we get concurrent(Line(A, C), Line(K, L), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(J, L), Line(A, C), Line(L, center(Circle(A, F, G))) we get concurrent(Line(A, C), Line(J, L), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(F, L), Line(L, center(Circle(A, F, G))), Line(G, L) we get concurrent(Line(F, L), Line(G, L), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(J, L), Line(L, center(Circle(A, F, G))), Line(A, C) we get concurrent(Line(A, C), Line(J, L), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(K, L), Line(F, L), Line(L, center(Circle(A, F, G))) we get concurrent(Line(F, L), Line(K, L), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(J, M), Line(G, K), Line(M, center(Circle(B, J, K))) we get concurrent(Line(G, K), Line(J, M), Line(M, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(J, K), Line(K, L), Line(K, center(Circle(A, F, G))) we get concurrent(Line(J, K), Line(K, L), Line(K, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(M, center(Circle(B, J, K))), Line(G, K), Line(F, L) we get concurrent(Line(F, L), Line(G, K), Line(M, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(B, F), Line(M, center(Circle(B, J, K))), Line(K, center(Circle(B, J, K))) we get concurrent(Line(B, F), Line(K, center(Circle(B, J, K))), Line(M, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(F, L), Line(K, L), Line(L, center(Circle(A, F, G))) we get concurrent(Line(F, L), Line(K, L), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(J, M), Line(M, center(Circle(B, J, K))), Line(G, K) we get concurrent(Line(G, K), Line(J, M), Line(M, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(J, K), Line(A, B), Line(K, center(Circle(B, J, K))) we get concurrent(Line(A, B), Line(J, K), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(G, L), Line(K, L), Line(L, center(Circle(C, J, L))) we get concurrent(Line(G, L), Line(K, L), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(K, L), Line(K, center(Circle(B, J, K))), Line(A, B) we get concurrent(Line(A, B), Line(K, L), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(B, C), Line(F, L), Line(M, center(Circle(B, J, K))) we get concurrent(Line(B, C), Line(F, L), Line(M, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(G, K), Line(M, center(Circle(C, J, L))), Line(B, C) we get concurrent(Line(B, C), Line(G, K), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(J, M), Line(F, L), Line(M, center(Circle(C, J, L))) we get concurrent(Line(F, L), Line(J, M), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(K, center(Circle(B, J, K))), Line(G, K), Line(F, K) we get concurrent(Line(F, K), Line(G, K), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(L, center(Circle(C, J, L))), Line(A, C), Line(K, L) we get concurrent(Line(A, C), Line(K, L), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(J, L), Line(K, L), Line(L, center(Circle(A, F, G))) we get concurrent(Line(J, L), Line(K, L), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(F, L), Line(M, center(Circle(B, J, K))), Line(M, center(Circle(C, J, L))) we get concurrent(Line(F, L), Line(M, center(Circle(B, J, K))), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(J, L), Line(L, center(Circle(A, F, G))), Line(L, center(Circle(C, J, L))) we get concurrent(Line(J, L), Line(L, center(Circle(A, F, G))), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(K, center(Circle(A, F, G))), Line(K, center(Circle(B, J, K))), Line(J, K) we get concurrent(Line(J, K), Line(K, center(Circle(A, F, G))), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(M, center(Circle(B, J, K))), Line(M, center(Circle(C, J, L))), Line(G, K) we get concurrent(Line(G, K), Line(M, center(Circle(B, J, K))), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(L, center(Circle(C, J, L))), Line(G, L), Line(F, L) we get concurrent(Line(F, L), Line(G, L), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(F, L), Line(L, center(Circle(A, F, G))), Line(K, L) we get concurrent(Line(F, L), Line(K, L), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(B, C), Line(J, M), Line(M, center(Circle(C, J, L))) we get concurrent(Line(B, C), Line(J, M), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(K, center(Circle(A, F, G))), Line(K, L), Line(A, B) we get concurrent(Line(A, B), Line(K, L), Line(K, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(K, L), Line(G, L), Line(L, center(Circle(A, F, G))) we get concurrent(Line(G, L), Line(K, L), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(J, M), Line(M, center(Circle(C, J, L))), Line(B, C) we get concurrent(Line(B, C), Line(J, M), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(K, L), Line(K, center(Circle(A, F, G))), Line(K, center(Circle(B, J, K))) we get concurrent(Line(K, L), Line(K, center(Circle(A, F, G))), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(J, L), Line(L, center(Circle(C, J, L))), Line(F, L) we get concurrent(Line(F, L), Line(J, L), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(B, C), Line(M, center(Circle(C, J, L))), Line(F, L) we get concurrent(Line(B, C), Line(F, L), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(K, L), Line(K, center(Circle(A, F, G))), Line(F, K) we get concurrent(Line(F, K), Line(K, L), Line(K, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(K, center(Circle(B, J, K))), Line(K, center(Circle(A, F, G))), Line(J, K) we get concurrent(Line(J, K), Line(K, center(Circle(A, F, G))), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(A, C), Line(L, center(Circle(C, J, L))), Line(J, L) we get concurrent(Line(A, C), Line(J, L), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(F, K), Line(K, center(Circle(B, J, K))), Line(G, K) we get concurrent(Line(F, K), Line(G, K), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(K, L), Line(F, K), Line(K, center(Circle(A, F, G))) we get concurrent(Line(F, K), Line(K, L), Line(K, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(F, K), Line(K, center(Circle(A, F, G))), Line(A, B) we get concurrent(Line(A, B), Line(F, K), Line(K, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(K, L), Line(L, center(Circle(A, F, G))), Line(J, L) we get concurrent(Line(J, L), Line(K, L), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(L, center(Circle(C, J, L))), Line(L, center(Circle(A, F, G))), Line(A, C) we get concurrent(Line(A, C), Line(L, center(Circle(A, F, G))), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(J, K), Line(K, center(Circle(A, F, G))), Line(K, center(Circle(B, J, K))) we get concurrent(Line(J, K), Line(K, center(Circle(A, F, G))), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(L, center(Circle(C, J, L))), Line(F, L), Line(K, L) we get concurrent(Line(F, L), Line(K, L), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(L, center(Circle(A, F, G))), Line(A, C), Line(J, L) we get concurrent(Line(A, C), Line(J, L), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(K, center(Circle(A, F, G))), Line(K, L), Line(K, center(Circle(B, J, K))) we get concurrent(Line(K, L), Line(K, center(Circle(A, F, G))), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(L, center(Circle(A, F, G))), Line(L, center(Circle(C, J, L))), Line(J, L) we get concurrent(Line(J, L), Line(L, center(Circle(A, F, G))), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(L, center(Circle(A, F, G))), Line(L, center(Circle(C, J, L))), Line(A, C) we get concurrent(Line(A, C), Line(L, center(Circle(A, F, G))), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(K, center(Circle(A, F, G))), Line(A, J), Line(L, center(Circle(A, F, G))) we get concurrent(Line(A, J), Line(K, center(Circle(A, F, G))), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(K, center(Circle(A, F, G))), Line(G, K), Line(K, center(Circle(B, J, K))) we get concurrent(Line(G, K), Line(K, center(Circle(A, F, G))), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(G, K), Line(M, center(Circle(B, J, K))), Line(F, L) we get concurrent(Line(F, L), Line(G, K), Line(M, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(J, L), Line(G, L), Line(L, center(Circle(C, J, L))) we get concurrent(Line(G, L), Line(J, L), Line(L, center(Circle(C, J, L))))
By line_definition on center(Circle(A, F, G)), midpoint(K, L), Line(A, J) we get Line(A, J) == Line(midpoint(K, L), center(Circle(A, F, G)))
By concurrent_sufficient_conditions on Line(L, center(Circle(C, J, L))), Line(L, center(Circle(A, F, G))), Line(J, L) we get concurrent(Line(J, L), Line(L, center(Circle(A, F, G))), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(G, K), Line(J, M), Line(M, center(Circle(C, J, L))) we get concurrent(Line(G, K), Line(J, M), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(L, center(Circle(C, J, L))), Line(K, L), Line(G, L) we get concurrent(Line(G, L), Line(K, L), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(F, L), Line(M, center(Circle(B, J, K))), Line(G, K) we get concurrent(Line(F, L), Line(G, K), Line(M, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(F, K), Line(G, K), Line(K, center(Circle(A, F, G))) we get concurrent(Line(F, K), Line(G, K), Line(K, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(K, L), Line(G, K), Line(K, center(Circle(B, J, K))) we get concurrent(Line(G, K), Line(K, L), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(L, center(Circle(C, J, L))), Line(K, L), Line(F, L) we get concurrent(Line(F, L), Line(K, L), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(F, L), Line(L, center(Circle(C, J, L))), Line(G, L) we get concurrent(Line(F, L), Line(G, L), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(A, B), Line(K, center(Circle(B, J, K))), Line(K, L) we get concurrent(Line(A, B), Line(K, L), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(J, L), Line(F, L), Line(L, center(Circle(A, F, G))) we get concurrent(Line(F, L), Line(J, L), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(J, K), Line(K, center(Circle(A, F, G))), Line(F, K) we get concurrent(Line(F, K), Line(J, K), Line(K, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(K, center(Circle(A, F, G))), Line(A, B), Line(F, K) we get concurrent(Line(A, B), Line(F, K), Line(K, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(K, L), Line(J, K), Line(K, center(Circle(B, J, K))) we get concurrent(Line(J, K), Line(K, L), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(F, L), Line(G, K), Line(M, center(Circle(B, J, K))) we get concurrent(Line(F, L), Line(G, K), Line(M, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(L, center(Circle(C, J, L))), Line(A, C), Line(J, L) we get concurrent(Line(A, C), Line(J, L), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(K, L), Line(F, L), Line(L, center(Circle(C, J, L))) we get concurrent(Line(F, L), Line(K, L), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(A, C), Line(L, center(Circle(A, F, G))), Line(K, L) we get concurrent(Line(A, C), Line(K, L), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(L, center(Circle(A, F, G))), Line(K, L), Line(G, L) we get concurrent(Line(G, L), Line(K, L), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(K, center(Circle(B, J, K))), Line(G, K), Line(A, B) we get concurrent(Line(A, B), Line(G, K), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(M, center(Circle(C, J, L))), Line(J, M), Line(G, K) we get concurrent(Line(G, K), Line(J, M), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(F, L), Line(L, center(Circle(A, F, G))), Line(L, center(Circle(C, J, L))) we get concurrent(Line(F, L), Line(L, center(Circle(A, F, G))), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(C, G), Line(L, center(Circle(C, J, L))), Line(M, center(Circle(C, J, L))) we get concurrent(Line(C, G), Line(L, center(Circle(C, J, L))), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(F, L), Line(J, M), Line(M, center(Circle(C, J, L))) we get concurrent(Line(F, L), Line(J, M), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(L, center(Circle(A, F, G))), Line(A, J), Line(K, center(Circle(A, F, G))) we get concurrent(Line(A, J), Line(K, center(Circle(A, F, G))), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(K, center(Circle(B, J, K))), Line(G, K), Line(J, K) we get concurrent(Line(G, K), Line(J, K), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(J, M), Line(M, center(Circle(C, J, L))), Line(G, K) we get concurrent(Line(G, K), Line(J, M), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(K, L), Line(L, center(Circle(A, F, G))), Line(A, C) we get concurrent(Line(A, C), Line(K, L), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(L, center(Circle(C, J, L))), Line(L, center(Circle(A, F, G))), Line(K, L) we get concurrent(Line(K, L), Line(L, center(Circle(A, F, G))), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(J, L), Line(K, L), Line(L, center(Circle(C, J, L))) we get concurrent(Line(J, L), Line(K, L), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(M, center(Circle(B, J, K))), Line(J, M), Line(M, center(Circle(C, J, L))) we get concurrent(Line(J, M), Line(M, center(Circle(B, J, K))), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(B, C), Line(M, center(Circle(C, J, L))), Line(J, M) we get concurrent(Line(B, C), Line(J, M), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(K, center(Circle(B, J, K))), Line(J, K), Line(K, L) we get concurrent(Line(J, K), Line(K, L), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(M, center(Circle(C, J, L))), Line(B, C), Line(G, K) we get concurrent(Line(B, C), Line(G, K), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(K, L), Line(K, center(Circle(B, J, K))), Line(G, K) we get concurrent(Line(G, K), Line(K, L), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(G, K), Line(M, center(Circle(B, J, K))), Line(M, center(Circle(C, J, L))) we get concurrent(Line(G, K), Line(M, center(Circle(B, J, K))), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(F, L), Line(J, M), Line(M, center(Circle(B, J, K))) we get concurrent(Line(F, L), Line(J, M), Line(M, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(G, L), Line(L, center(Circle(A, F, G))), Line(F, L) we get concurrent(Line(F, L), Line(G, L), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(K, center(Circle(A, F, G))), Line(A, B), Line(K, L) we get concurrent(Line(A, B), Line(K, L), Line(K, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(A, B), Line(F, K), Line(K, center(Circle(A, F, G))) we get concurrent(Line(A, B), Line(F, K), Line(K, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(A, C), Line(L, center(Circle(A, F, G))), Line(F, L) we get concurrent(Line(A, C), Line(F, L), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(K, L), Line(L, center(Circle(C, J, L))), Line(A, C) we get concurrent(Line(A, C), Line(K, L), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(J, L), Line(L, center(Circle(C, J, L))), Line(L, center(Circle(A, F, G))) we get concurrent(Line(J, L), Line(L, center(Circle(A, F, G))), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(K, center(Circle(A, F, G))), Line(F, K), Line(K, center(Circle(B, J, K))) we get concurrent(Line(F, K), Line(K, center(Circle(A, F, G))), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(G, L), Line(L, center(Circle(A, F, G))), Line(A, C) we get concurrent(Line(A, C), Line(G, L), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(K, center(Circle(B, J, K))), Line(A, B), Line(K, L) we get concurrent(Line(A, B), Line(K, L), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(B, C), Line(M, center(Circle(C, J, L))), Line(M, center(Circle(B, J, K))) we get concurrent(Line(B, C), Line(M, center(Circle(B, J, K))), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(M, center(Circle(C, J, L))), Line(F, L), Line(G, K) we get concurrent(Line(F, L), Line(G, K), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(K, center(Circle(B, J, K))), Line(J, K), Line(G, K) we get concurrent(Line(G, K), Line(J, K), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(A, C), Line(F, L), Line(L, center(Circle(A, F, G))) we get concurrent(Line(A, C), Line(F, L), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(J, L), Line(L, center(Circle(C, J, L))), Line(K, L) we get concurrent(Line(J, L), Line(K, L), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(K, center(Circle(B, J, K))), Line(G, K), Line(K, center(Circle(A, F, G))) we get concurrent(Line(G, K), Line(K, center(Circle(A, F, G))), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(L, center(Circle(C, J, L))), Line(L, center(Circle(A, F, G))), Line(G, L) we get concurrent(Line(G, L), Line(L, center(Circle(A, F, G))), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(K, center(Circle(B, J, K))), Line(K, L), Line(K, center(Circle(A, F, G))) we get concurrent(Line(K, L), Line(K, center(Circle(A, F, G))), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(G, K), Line(F, K), Line(K, center(Circle(B, J, K))) we get concurrent(Line(F, K), Line(G, K), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(L, center(Circle(C, J, L))), Line(J, L), Line(L, center(Circle(A, F, G))) we get concurrent(Line(J, L), Line(L, center(Circle(A, F, G))), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(M, center(Circle(B, J, K))), Line(M, center(Circle(C, J, L))), Line(B, C) we get concurrent(Line(B, C), Line(M, center(Circle(B, J, K))), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(K, L), Line(L, center(Circle(A, F, G))), Line(F, L) we get concurrent(Line(F, L), Line(K, L), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(L, center(Circle(A, F, G))), Line(J, L), Line(F, L) we get concurrent(Line(F, L), Line(J, L), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(L, center(Circle(C, J, L))), Line(G, L), Line(J, L) we get concurrent(Line(G, L), Line(J, L), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(G, L), Line(F, L), Line(L, center(Circle(C, J, L))) we get concurrent(Line(F, L), Line(G, L), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(A, B), Line(J, K), Line(K, center(Circle(B, J, K))) we get concurrent(Line(A, B), Line(J, K), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(K, center(Circle(A, F, G))), Line(K, L), Line(F, K) we get concurrent(Line(F, K), Line(K, L), Line(K, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(G, K), Line(K, center(Circle(A, F, G))), Line(K, L) we get concurrent(Line(G, K), Line(K, L), Line(K, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(F, K), Line(K, center(Circle(A, F, G))), Line(J, K) we get concurrent(Line(F, K), Line(J, K), Line(K, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(L, center(Circle(A, F, G))), Line(G, L), Line(J, L) we get concurrent(Line(G, L), Line(J, L), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(B, C), Line(M, center(Circle(B, J, K))), Line(J, M) we get concurrent(Line(B, C), Line(J, M), Line(M, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(G, K), Line(M, center(Circle(B, J, K))), Line(B, C) we get concurrent(Line(B, C), Line(G, K), Line(M, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(K, center(Circle(A, F, G))), Line(K, center(Circle(B, J, K))), Line(A, B) we get concurrent(Line(A, B), Line(K, center(Circle(A, F, G))), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(M, center(Circle(C, J, L))), Line(B, C), Line(M, center(Circle(B, J, K))) we get concurrent(Line(B, C), Line(M, center(Circle(B, J, K))), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(A, B), Line(K, center(Circle(A, F, G))), Line(J, K) we get concurrent(Line(A, B), Line(J, K), Line(K, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(K, L), Line(J, K), Line(K, center(Circle(A, F, G))) we get concurrent(Line(J, K), Line(K, L), Line(K, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(G, K), Line(K, center(Circle(B, J, K))), Line(K, L) we get concurrent(Line(G, K), Line(K, L), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(G, L), Line(J, L), Line(L, center(Circle(C, J, L))) we get concurrent(Line(G, L), Line(J, L), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(L, center(Circle(C, J, L))), Line(G, L), Line(A, C) we get concurrent(Line(A, C), Line(G, L), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(M, center(Circle(B, J, K))), Line(G, K), Line(J, M) we get concurrent(Line(G, K), Line(J, M), Line(M, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(F, L), Line(B, C), Line(M, center(Circle(C, J, L))) we get concurrent(Line(B, C), Line(F, L), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(L, center(Circle(A, F, G))), Line(F, L), Line(A, C) we get concurrent(Line(A, C), Line(F, L), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(K, center(Circle(A, F, G))), Line(G, K), Line(K, L) we get concurrent(Line(G, K), Line(K, L), Line(K, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(L, center(Circle(A, F, G))), Line(G, L), Line(L, center(Circle(C, J, L))) we get concurrent(Line(G, L), Line(L, center(Circle(A, F, G))), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(A, B), Line(J, K), Line(K, center(Circle(A, F, G))) we get concurrent(Line(A, B), Line(J, K), Line(K, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(L, center(Circle(A, F, G))), Line(K, L), Line(L, center(Circle(C, J, L))) we get concurrent(Line(K, L), Line(L, center(Circle(A, F, G))), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(J, K), Line(G, K), Line(K, center(Circle(A, F, G))) we get concurrent(Line(G, K), Line(J, K), Line(K, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(L, center(Circle(A, F, G))), Line(A, C), Line(G, L) we get concurrent(Line(A, C), Line(G, L), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(F, L), Line(K, L), Line(L, center(Circle(C, J, L))) we get concurrent(Line(F, L), Line(K, L), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(K, center(Circle(B, J, K))), Line(K, center(Circle(A, F, G))), Line(G, K) we get concurrent(Line(G, K), Line(K, center(Circle(A, F, G))), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(J, L), Line(F, L), Line(L, center(Circle(C, J, L))) we get concurrent(Line(F, L), Line(J, L), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(J, M), Line(B, C), Line(M, center(Circle(C, J, L))) we get concurrent(Line(B, C), Line(J, M), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(J, K), Line(K, center(Circle(B, J, K))), Line(G, K) we get concurrent(Line(G, K), Line(J, K), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(G, K), Line(B, C), Line(M, center(Circle(C, J, L))) we get concurrent(Line(B, C), Line(G, K), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(A, B), Line(K, center(Circle(B, J, K))), Line(J, K) we get concurrent(Line(A, B), Line(J, K), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(F, L), Line(M, center(Circle(B, J, K))), Line(B, C) we get concurrent(Line(B, C), Line(F, L), Line(M, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(F, L), Line(L, center(Circle(C, J, L))), Line(K, L) we get concurrent(Line(F, L), Line(K, L), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(L, center(Circle(C, J, L))), Line(J, L), Line(F, L) we get concurrent(Line(F, L), Line(J, L), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(M, center(Circle(C, J, L))), Line(G, K), Line(F, L) we get concurrent(Line(F, L), Line(G, K), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(L, center(Circle(C, J, L))), Line(K, L), Line(J, L) we get concurrent(Line(J, L), Line(K, L), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(M, center(Circle(C, J, L))), Line(J, M), Line(B, C) we get concurrent(Line(B, C), Line(J, M), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(G, K), Line(K, L), Line(K, center(Circle(B, J, K))) we get concurrent(Line(G, K), Line(K, L), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(A, C), Line(G, L), Line(L, center(Circle(A, F, G))) we get concurrent(Line(A, C), Line(G, L), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(L, center(Circle(A, F, G))), Line(A, C), Line(F, L) we get concurrent(Line(A, C), Line(F, L), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(K, center(Circle(B, J, K))), Line(A, B), Line(G, K) we get concurrent(Line(A, B), Line(G, K), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(M, center(Circle(B, J, K))), Line(J, M), Line(F, L) we get concurrent(Line(F, L), Line(J, M), Line(M, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(F, K), Line(K, center(Circle(A, F, G))), Line(K, L) we get concurrent(Line(F, K), Line(K, L), Line(K, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(G, K), Line(J, K), Line(K, center(Circle(A, F, G))) we get concurrent(Line(G, K), Line(J, K), Line(K, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(K, center(Circle(B, J, K))), Line(M, center(Circle(B, J, K))), Line(B, F) we get concurrent(Line(B, F), Line(K, center(Circle(B, J, K))), Line(M, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(M, center(Circle(B, J, K))), Line(F, L), Line(B, C) we get concurrent(Line(B, C), Line(F, L), Line(M, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(K, center(Circle(B, J, K))), Line(F, K), Line(A, B) we get concurrent(Line(A, B), Line(F, K), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(L, center(Circle(A, F, G))), Line(F, L), Line(J, L) we get concurrent(Line(F, L), Line(J, L), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(F, L), Line(L, center(Circle(A, F, G))), Line(J, L) we get concurrent(Line(F, L), Line(J, L), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(F, L), Line(M, center(Circle(B, J, K))), Line(J, M) we get concurrent(Line(F, L), Line(J, M), Line(M, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(K, center(Circle(A, F, G))), Line(G, K), Line(J, K) we get concurrent(Line(G, K), Line(J, K), Line(K, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(J, L), Line(L, center(Circle(A, F, G))), Line(F, L) we get concurrent(Line(F, L), Line(J, L), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(G, K), Line(J, M), Line(M, center(Circle(B, J, K))) we get concurrent(Line(G, K), Line(J, M), Line(M, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(M, center(Circle(B, J, K))), Line(G, K), Line(B, C) we get concurrent(Line(B, C), Line(G, K), Line(M, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(G, K), Line(M, center(Circle(C, J, L))), Line(F, L) we get concurrent(Line(F, L), Line(G, K), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(M, center(Circle(B, J, K))), Line(K, center(Circle(B, J, K))), Line(B, F) we get concurrent(Line(B, F), Line(K, center(Circle(B, J, K))), Line(M, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(K, L), Line(L, center(Circle(C, J, L))), Line(G, L) we get concurrent(Line(G, L), Line(K, L), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(K, center(Circle(A, F, G))), Line(A, B), Line(J, K) we get concurrent(Line(A, B), Line(J, K), Line(K, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(K, L), Line(K, center(Circle(B, J, K))), Line(J, K) we get concurrent(Line(J, K), Line(K, L), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(J, M), Line(M, center(Circle(B, J, K))), Line(M, center(Circle(C, J, L))) we get concurrent(Line(J, M), Line(M, center(Circle(B, J, K))), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(K, L), Line(L, center(Circle(A, F, G))), Line(L, center(Circle(C, J, L))) we get concurrent(Line(K, L), Line(L, center(Circle(A, F, G))), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(K, L), Line(L, center(Circle(A, F, G))), Line(G, L) we get concurrent(Line(G, L), Line(K, L), Line(L, center(Circle(A, F, G))))
By concurrent_sufficient_conditions on Line(F, L), Line(G, L), Line(L, center(Circle(C, J, L))) we get concurrent(Line(F, L), Line(G, L), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(J, K), Line(G, K), Line(K, center(Circle(B, J, K))) we get concurrent(Line(G, K), Line(J, K), Line(K, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(J, L), Line(L, center(Circle(C, J, L))), Line(A, C) we get concurrent(Line(A, C), Line(J, L), Line(L, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(M, center(Circle(C, J, L))), Line(M, center(Circle(B, J, K))), Line(F, L) we get concurrent(Line(F, L), Line(M, center(Circle(B, J, K))), Line(M, center(Circle(C, J, L))))
By concurrent_sufficient_conditions on Line(J, M), Line(B, C), Line(M, center(Circle(B, J, K))) we get concurrent(Line(B, C), Line(J, M), Line(M, center(Circle(B, J, K))))
By concurrent_sufficient_conditions on Line(F, L), Line(M, center(Circle(C, J, L))), Line(M, center(Circle(B, J, K))) we get concurrent(Line(F, L), Line(M, center(Circle(B, J, K))), Line(M, center(Circle(C, J, L))))
By perpendicular_line_definition on T, Line(A, G), Line(C, G) we get Line(A, G) == perpendicular_line(T, Line(C, G))
By perpendicular_line_definition on J, Line(C, G), Line(A, G) we get Line(C, G) == perpendicular_line(J, Line(A, G))
By line_intersection_definition on F, Line(F, G), Line(F, center(Circle(A, F, G))) we get F == line_intersection(Line(F, G), Line(F, center(Circle(A, F, G))))
By line_intersection_definition on center(Circle(A, F, G)), Line(F, center(Circle(A, F, G))), Line(K, center(Circle(A, F, G))) we get center(Circle(A, F, G)) == line_intersection(Line(F, center(Circle(A, F, G))), Line(K, center(Circle(A, F, G))))
By line_intersection_definition on F, Line(F, center(Circle(A, F, G))), Line(B, F) we get F == line_intersection(Line(B, F), Line(F, center(Circle(A, F, G))))
By line_intersection_definition on center(Circle(A, F, G)), Line(F, center(Circle(A, F, G))), Line(A, J) we get center(Circle(A, F, G)) == line_intersection(Line(A, J), Line(F, center(Circle(A, F, G))))
By line_intersection_definition on center(Circle(B, J, K)), Line(K, center(Circle(B, J, K))), median(center(Circle(B, J, K)), K, M) we get center(Circle(B, J, K)) == line_intersection(Line(K, center(Circle(B, J, K))), median(center(Circle(B, J, K)), K, M))
By line_intersection_definition on center(Circle(A, F, G)), Line(L, center(Circle(A, F, G))), Line(G, center(Circle(A, F, G))) we get center(Circle(A, F, G)) == line_intersection(Line(G, center(Circle(A, F, G))), Line(L, center(Circle(A, F, G))))
By line_intersection_definition on center(Circle(A, F, G)), Line(A, J), Line(G, center(Circle(A, F, G))) we get center(Circle(A, F, G)) == line_intersection(Line(A, J), Line(G, center(Circle(A, F, G))))
By midpoint_definition_v0 on J, C, center(Circle(C, J, L)) we get midpoint(C, J) == center(Circle(C, J, L))
By line_intersection_definition on center(Circle(A, F, G)), median(center(Circle(A, F, G)), K, L), Line(F, center(Circle(A, F, G))) we get center(Circle(A, F, G)) == line_intersection(Line(F, center(Circle(A, F, G))), median(center(Circle(A, F, G)), K, L))
By midpoint_definition_v0 on J, B, center(Circle(B, J, K)) we get midpoint(B, J) == center(Circle(B, J, K))
By perpendicular_line_definition on C, Line(C, G), Line(A, G) we get Line(C, G) == perpendicular_line(C, Line(A, G))
By line_intersection_definition on G, Line(G, center(Circle(A, F, G))), Line(F, G) we get G == line_intersection(Line(F, G), Line(G, center(Circle(A, F, G))))
By line_intersection_definition on midpoint(K, L), Line(K, L), median(center(Circle(A, F, G)), K, L) we get midpoint(K, L) == line_intersection(Line(K, L), median(center(Circle(A, F, G)), K, L))
By line_intersection_definition on F, Line(F, center(Circle(A, F, G))), Line(F, L) we get F == line_intersection(Line(F, L), Line(F, center(Circle(A, F, G))))
By line_intersection_definition on center(Circle(A, F, G)), median(center(Circle(A, F, G)), K, L), Line(G, center(Circle(A, F, G))) we get center(Circle(A, F, G)) == line_intersection(Line(G, center(Circle(A, F, G))), median(center(Circle(A, F, G)), K, L))
By perpendicular_line_definition on midpoint(L, M), Line(C, G), Line(A, G) we get Line(C, G) == perpendicular_line(midpoint(L, M), Line(A, G))
By line_intersection_definition on center(Circle(A, F, G)), median(center(Circle(A, F, G)), K, L), Line(K, center(Circle(A, F, G))) we get center(Circle(A, F, G)) == line_intersection(Line(K, center(Circle(A, F, G))), median(center(Circle(A, F, G)), K, L))
By line_intersection_definition on center(Circle(A, F, G)), Line(G, center(Circle(A, F, G))), Line(F, center(Circle(A, F, G))) we get center(Circle(A, F, G)) == line_intersection(Line(F, center(Circle(A, F, G))), Line(G, center(Circle(A, F, G))))
By perpendicular_line_definition on A, Line(A, G), Line(C, G) we get Line(A, G) == perpendicular_line(A, Line(C, G))
By midpoint_definition_v0 on A, T, G we get G == midpoint(A, T)
By line_intersection_definition on center(Circle(C, J, L)), median(center(Circle(C, J, L)), L, M), Line(M, center(Circle(C, J, L))) we get center(Circle(C, J, L)) == line_intersection(Line(M, center(Circle(C, J, L))), median(center(Circle(C, J, L)), L, M))
By line_intersection_definition on center(Circle(A, F, G)), Line(L, center(Circle(A, F, G))), Line(F, center(Circle(A, F, G))) we get center(Circle(A, F, G)) == line_intersection(Line(F, center(Circle(A, F, G))), Line(L, center(Circle(A, F, G))))
By line_intersection_definition on center(Circle(B, J, K)), Line(M, center(Circle(B, J, K))), median(center(Circle(B, J, K)), K, M) we get center(Circle(B, J, K)) == line_intersection(Line(M, center(Circle(B, J, K))), median(center(Circle(B, J, K)), K, M))
By midpoint_definition_v1 on A, S, F we get F == midpoint(A, S)
By perpendicular_line_definition on F, Line(B, F), Line(A, F) we get Line(B, F) == perpendicular_line(F, Line(A, F))
By line_intersection_definition on center(Circle(A, F, G)), Line(L, center(Circle(A, F, G))), median(center(Circle(A, F, G)), K, L) we get center(Circle(A, F, G)) == line_intersection(Line(L, center(Circle(A, F, G))), median(center(Circle(A, F, G)), K, L))
By line_intersection_definition on G, Line(G, center(Circle(A, F, G))), Line(G, L) we get G == line_intersection(Line(G, L), Line(G, center(Circle(A, F, G))))
By line_intersection_definition on center(Circle(A, F, G)), Line(G, center(Circle(A, F, G))), Line(K, center(Circle(A, F, G))) we get center(Circle(A, F, G)) == line_intersection(Line(G, center(Circle(A, F, G))), Line(K, center(Circle(A, F, G))))
By line_intersection_definition on G, Line(C, G), Line(G, center(Circle(A, F, G))) we get G == line_intersection(Line(C, G), Line(G, center(Circle(A, F, G))))
By line_intersection_definition on G, Line(G, center(Circle(A, F, G))), Line(A, G) we get G == line_intersection(Line(A, G), Line(G, center(Circle(A, F, G))))
By perpendicular_line_definition on S, Line(A, F), Line(B, F) we get Line(A, F) == perpendicular_line(S, Line(B, F))
By line_intersection_definition on midpoint(L, M), median(center(Circle(C, J, L)), L, M), Line(F, L) we get midpoint(L, M) == line_intersection(Line(F, L), median(center(Circle(C, J, L)), L, M))
By perpendicular_line_definition on J, Line(B, F), Line(A, F) we get Line(B, F) == perpendicular_line(J, Line(A, F))
By line_intersection_definition on F, Line(F, center(Circle(A, F, G))), Line(A, F) we get F == line_intersection(Line(A, F), Line(F, center(Circle(A, F, G))))
By line_intersection_definition on center(Circle(C, J, L)), median(center(Circle(C, J, L)), L, M), Line(L, center(Circle(C, J, L))) we get center(Circle(C, J, L)) == line_intersection(Line(L, center(Circle(C, J, L))), median(center(Circle(C, J, L)), L, M))
By perpendicular_line_definition on midpoint(K, M), Line(B, F), Line(A, F) we get Line(B, F) == perpendicular_line(midpoint(K, M), Line(A, F))
By line_intersection_definition on G, Line(G, center(Circle(A, F, G))), Line(G, K) we get G == line_intersection(Line(G, K), Line(G, center(Circle(A, F, G))))
By perpendicular_line_definition on F, Line(A, F), Line(B, F) we get Line(A, F) == perpendicular_line(F, Line(B, F))
By line_intersection_definition on F, Line(F, K), Line(F, center(Circle(A, F, G))) we get F == line_intersection(Line(F, K), Line(F, center(Circle(A, F, G))))
By perpendicular_line_definition on center(Circle(C, J, L)), Line(C, G), Line(A, G) we get Line(C, G) == perpendicular_line(center(Circle(C, J, L)), Line(A, G))
By perpendicular_line_definition on B, Line(B, F), Line(A, F) we get Line(B, F) == perpendicular_line(B, Line(A, F))
By line_intersection_definition on midpoint(K, M), median(center(Circle(B, J, K)), K, M), Line(G, K) we get midpoint(K, M) == line_intersection(Line(G, K), median(center(Circle(B, J, K)), K, M))
By perpendicular_line_definition on center(Circle(B, J, K)), Line(B, F), Line(A, F) we get Line(B, F) == perpendicular_line(center(Circle(B, J, K)), Line(A, F))
By perpendicular_line_definition on G, Line(A, G), Line(C, G) we get Line(A, G) == perpendicular_line(G, Line(C, G))
By midpoint_definition_v0 on A, J, center(Circle(A, F, G)) we get midpoint(A, J) == center(Circle(A, F, G))
By perpendicular_line_definition on G, Line(C, G), Line(A, G) we get Line(C, G) == perpendicular_line(G, Line(A, G))
By perpendicular_line_definition on A, Line(A, F), Line(B, F) we get Line(A, F) == perpendicular_line(A, Line(B, F))
By parallel_line_definition on M, Line(F, L), Line(A, G) we get Line(F, L) == parallel_line(M, Line(A, G))
By parallel_line_definition on K, Line(G, K), Line(A, F) we get Line(G, K) == parallel_line(K, Line(A, F))
By parallel_line_definition on M, Line(G, K), Line(A, F) we get Line(G, K) == parallel_line(M, Line(A, F))
By parallel_line_definition on T, Line(A, G), Line(F, L) we get Line(A, G) == parallel_line(T, Line(F, L))
By parallel_line_definition on F, Line(A, F), Line(G, K) we get Line(A, F) == parallel_line(F, Line(G, K))
By parallel_line_definition on midpoint(K, M), Line(G, K), Line(A, F) we get Line(G, K) == parallel_line(midpoint(K, M), Line(A, F))
By parallel_line_definition on midpoint(L, M), Line(F, L), Line(A, G) we get Line(F, L) == parallel_line(midpoint(L, M), Line(A, G))
By parallel_line_definition on A, Line(A, F), Line(G, K) we get Line(A, F) == parallel_line(A, Line(G, K))
By parallel_line_definition on L, Line(F, L), Line(A, G) we get Line(F, L) == parallel_line(L, Line(A, G))
By parallel_line_definition on G, Line(G, K), Line(A, F) we get Line(G, K) == parallel_line(G, Line(A, F))
By parallel_line_definition on F, Line(F, L), Line(A, G) we get Line(F, L) == parallel_line(F, Line(A, G))
By parallel_line_definition on G, Line(A, G), Line(F, L) we get Line(A, G) == parallel_line(G, Line(F, L))
By parallel_line_definition on S, Line(A, F), Line(G, K) we get Line(A, F) == parallel_line(S, Line(G, K))
By parallel_line_definition on A, Line(A, G), Line(F, L) we get Line(A, G) == parallel_line(A, Line(F, L))
By projection_definition on A, F, Line(B, F) we get F == projection(A, Line(B, F))
By projection_definition on T, G, Line(C, G) we get G == projection(T, Line(C, G))
By projection_definition on midpoint(L, M), G, Line(A, G) we get G == projection(midpoint(L, M), Line(A, G))
By projection_definition on J, G, Line(A, G) we get G == projection(J, Line(A, G))
By in_imply_collinear on midpoint(K, M), B, center(Circle(B, J, K)) we get collinear(B, midpoint(K, M), center(Circle(B, J, K)))
By projection_definition on B, F, Line(A, F) we get F == projection(B, Line(A, F))
By projection_definition on S, F, Line(B, F) we get F == projection(S, Line(B, F))
By projection_definition on C, G, Line(A, G) we get G == projection(C, Line(A, G))
By in_imply_collinear on center(Circle(A, F, G)), J, midpoint(K, L) we get collinear(J, midpoint(K, L), center(Circle(A, F, G)))
By projection_definition on J, F, Line(A, F) we get F == projection(J, Line(A, F))
By projection_definition on midpoint(K, M), F, Line(A, F) we get F == projection(midpoint(K, M), Line(A, F))
By projection_definition on A, G, Line(C, G) we get G == projection(A, Line(C, G))
By in_imply_collinear on midpoint(L, M), J, center(Circle(C, J, L)) we get collinear(J, midpoint(L, M), center(Circle(C, J, L)))
By in_imply_collinear on center(Circle(B, J, K)), F, J we get collinear(F, J, center(Circle(B, J, K)))
By in_imply_collinear on G, center(Circle(C, J, L)), C we get collinear(C, G, center(Circle(C, J, L)))
By parallelogram_parallel_definition on G, F, S, M we get parallelogram(F, G, M, S)
By in_imply_collinear on center(Circle(A, F, G)), A, midpoint(K, L) we get collinear(A, midpoint(K, L), center(Circle(A, F, G)))
By collinear_definition on C, J, center(Circle(C, J, L)) we get J in Line(C, center(Circle(C, J, L))), center(Circle(C, J, L)) in Line(C, J), Line(C, J) == Line(C, center(Circle(C, J, L))), 0 == 2 * angle(J, C, center(Circle(C, J, L))) mod 360
By perpendicular_angle_conditions_v0 on T, G, midpoint(L, M) we get angle(T, G, midpoint(L, M)) == orientation(G, midpoint(L, M), T) mod 360
By in_imply_collinear on center(Circle(B, J, K)), F, B we get collinear(B, F, center(Circle(B, J, K)))
By external_angle_bisector_definition_v0 on T, center(Circle(C, J, L)), L, C we get 180 == angle(T, C, center(Circle(C, J, L))) + angle(L, C, center(Circle(C, J, L))) mod 360
By in_imply_collinear on midpoint(L, M), C, center(Circle(C, J, L)) we get collinear(C, midpoint(L, M), center(Circle(C, J, L)))
By isosceles_trapezoid_properties on A, T, M, L we get parallel(Line(A, T), Line(L, M)), distance(A, L) == distance(M, T), angle(A, T, M) == angle(L, A, T), angle(M, L, A) == angle(T, M, L)
By internal_angle_bisector_definition_v0 on T, center(Circle(C, J, L)), A, C we get angle(T, C, center(Circle(C, J, L))) == angle(center(Circle(C, J, L)), C, A) mod 360
By in_imply_collinear on center(Circle(C, J, L)), J, G we get collinear(G, J, center(Circle(C, J, L)))
By in_imply_collinear on midpoint(K, M), center(Circle(B, J, K)), J we get collinear(J, midpoint(K, M), center(Circle(B, J, K)))
By parallelogram_side_definition on M, F, G, T we get parallelogram(F, G, T, M)
By anti_similar_triangle_basic_properties on F, midpoint(K, M), M, A, midpoint(K, L), K we get angle(F, midpoint(K, M), M) == 0 - angle(A, midpoint(K, L), K) mod 360, angle(midpoint(K, M), M, F) == 0 - angle(midpoint(K, L), K, A) mod 360, angle(M, F, midpoint(K, M)) == 0 - angle(K, A, midpoint(K, L)) mod 360, log(distance(A, midpoint(K, L))) + log(distance(M, midpoint(K, M))) == log(distance(F, midpoint(K, M))) + log(distance(K, midpoint(K, L))), log(distance(K, midpoint(K, L))) + log(distance(F, M)) == log(distance(M, midpoint(K, M))) + log(distance(A, K)), log(distance(A, K)) + log(distance(F, midpoint(K, M))) == log(distance(F, M)) + log(distance(A, midpoint(K, L)))
By parallelogram_parallel_definition on F, S, M, G we get parallelogram(F, G, M, S)
By collinear_definition on A, J, center(Circle(A, F, G)) we get J in Line(A, center(Circle(A, F, G))), center(Circle(A, F, G)) in Line(A, J), Line(A, J) == Line(A, center(Circle(A, F, G))), 0 == 2 * angle(J, A, center(Circle(A, F, G))) mod 360
By anti_similar_triangle_basic_properties on M, midpoint(L, M), G, M, midpoint(K, M), F we get angle(M, midpoint(L, M), G) == 0 - angle(M, midpoint(K, M), F) mod 360, angle(midpoint(L, M), G, M) == 0 - angle(midpoint(K, M), F, M) mod 360, angle(G, M, midpoint(L, M)) == 0 - angle(F, M, midpoint(K, M)) mod 360, log(distance(M, midpoint(K, M))) + log(distance(G, midpoint(L, M))) == log(distance(M, midpoint(L, M))) + log(distance(F, midpoint(K, M))), log(distance(F, midpoint(K, M))) + log(distance(G, M)) == log(distance(G, midpoint(L, M))) + log(distance(F, M)), log(distance(F, M)) + log(distance(M, midpoint(L, M))) == log(distance(G, M)) + log(distance(M, midpoint(K, M)))
By collinear_definition on J, A, center(Circle(A, F, G)) we get A in Line(J, center(Circle(A, F, G))), center(Circle(A, F, G)) in Line(A, J), Line(A, J) == Line(J, center(Circle(A, F, G))), 0 == 2 * angle(A, J, center(Circle(A, F, G))) mod 360
By internal_angle_bisector_definition_v0 on midpoint(K, L), center(Circle(A, F, G)), midpoint(K, L), J we get angle(center(Circle(A, F, G)), J, midpoint(K, L)) == angle(midpoint(K, L), J, center(Circle(A, F, G))) mod 360
By log_of_2_times_distance on T, A, G, T we get log(distance(A, T)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(G, T))
By similar_triangle_basic_properties on midpoint(L, M), G, M, midpoint(K, M), F, K we get angle(midpoint(K, M), F, K) == angle(midpoint(L, M), G, M) mod 360, angle(F, K, midpoint(K, M)) == angle(G, M, midpoint(L, M)) mod 360, angle(K, midpoint(K, M), F) == angle(M, midpoint(L, M), G) mod 360, log(distance(F, midpoint(K, M))) + log(distance(G, M)) == log(distance(G, midpoint(L, M))) + log(distance(F, K)), log(distance(F, K)) + log(distance(M, midpoint(L, M))) == log(distance(G, M)) + log(distance(K, midpoint(K, M))), log(distance(K, midpoint(K, M))) + log(distance(G, midpoint(L, M))) == log(distance(M, midpoint(L, M))) + log(distance(F, midpoint(K, M)))
By parallelogram_parallel_side_definition on M, G, A, F we get parallelogram(A, F, M, G)
By log_of_2_times_distance on T, S, F, G we get log(distance(S, T)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(F, G))
By in_imply_collinear on center(Circle(C, J, L)), midpoint(L, M), G we get collinear(G, midpoint(L, M), center(Circle(C, J, L)))
By log_of_2_times_distance on T, A, F, M we get log(distance(A, T)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(F, M))
By in_imply_collinear on center(Circle(B, J, K)), midpoint(K, M), F we get collinear(F, midpoint(K, M), center(Circle(B, J, K)))
By internal_angle_bisector_definition_v0 on J, center(Circle(A, F, G)), J, A we get angle(J, A, center(Circle(A, F, G))) == angle(center(Circle(A, F, G)), A, J) mod 360
By isosceles_trapezoid_properties on A, G, L, F we get parallel(Line(A, G), Line(F, L)), distance(A, F) == distance(G, L), angle(A, G, L) == angle(F, A, G), angle(G, L, F) == angle(L, F, A)
By anti_similar_triangle_basic_properties on midpoint(L, M), M, G, midpoint(K, M), M, F we get angle(midpoint(L, M), M, G) == 0 - angle(midpoint(K, M), M, F) mod 360, angle(M, G, midpoint(L, M)) == 0 - angle(M, F, midpoint(K, M)) mod 360, angle(G, midpoint(L, M), M) == 0 - angle(F, midpoint(K, M), M) mod 360, log(distance(M, midpoint(K, M))) + log(distance(G, M)) == log(distance(M, midpoint(L, M))) + log(distance(F, M)), log(distance(F, M)) + log(distance(G, midpoint(L, M))) == log(distance(G, M)) + log(distance(F, midpoint(K, M))), log(distance(F, midpoint(K, M))) + log(distance(M, midpoint(L, M))) == log(distance(G, midpoint(L, M))) + log(distance(M, midpoint(K, M)))
By perpendicular_bisector_sufficient_conditions on L, M, midpoint(L, M), center(Circle(C, J, L)) we get perpendicular_bisector(L, M) == Line(midpoint(L, M), center(Circle(C, J, L)))
By internal_angle_bisector_definition_v0 on C, center(Circle(B, J, K)), K, B we get angle(C, B, center(Circle(B, J, K))) == angle(center(Circle(B, J, K)), B, K) mod 360
By perpendicular_bisector_sufficient_conditions on M, K, midpoint(K, M), center(Circle(B, J, K)) we get perpendicular_bisector(K, M) == Line(midpoint(K, M), center(Circle(B, J, K)))
By similar_triangle_basic_properties on midpoint(K, M), M, F, midpoint(K, L), L, A we get angle(midpoint(K, L), L, A) == angle(midpoint(K, M), M, F) mod 360, angle(L, A, midpoint(K, L)) == angle(M, F, midpoint(K, M)) mod 360, angle(A, midpoint(K, L), L) == angle(F, midpoint(K, M), M) mod 360, log(distance(L, midpoint(K, L))) + log(distance(F, M)) == log(distance(M, midpoint(K, M))) + log(distance(A, L)), log(distance(A, L)) + log(distance(F, midpoint(K, M))) == log(distance(F, M)) + log(distance(A, midpoint(K, L))), log(distance(A, midpoint(K, L))) + log(distance(M, midpoint(K, M))) == log(distance(F, midpoint(K, M))) + log(distance(L, midpoint(K, L)))
By internal_angle_bisector_definition_v0 on G, center(Circle(C, J, L)), C, J we get angle(G, J, center(Circle(C, J, L))) == angle(center(Circle(C, J, L)), J, C) mod 360
By parallelogram_parallel_definition on A, G, M, F we get parallelogram(A, F, M, G)
By perpendicular_angle_conditions_v0 on S, F, midpoint(K, M) we get angle(S, F, midpoint(K, M)) == orientation(F, midpoint(K, M), S) mod 360
By collinear_definition on C, center(Circle(C, J, L)), J we get center(Circle(C, J, L)) in Line(C, J), J in Line(C, center(Circle(C, J, L))), Line(C, J) == Line(C, center(Circle(C, J, L))), 0 == 2 * angle(center(Circle(C, J, L)), C, J) mod 360
By internal_angle_bisector_definition_v0 on S, center(Circle(C, J, L)), L, C we get angle(S, C, center(Circle(C, J, L))) == angle(center(Circle(C, J, L)), C, L) mod 360
By collinear_definition on B, J, center(Circle(B, J, K)) we get J in Line(B, center(Circle(B, J, K))), center(Circle(B, J, K)) in Line(B, J), Line(B, J) == Line(B, center(Circle(B, J, K))), 0 == 2 * angle(J, B, center(Circle(B, J, K))) mod 360
By internal_angle_bisector_definition_v0 on T, center(Circle(B, J, K)), K, B we get angle(T, B, center(Circle(B, J, K))) == angle(center(Circle(B, J, K)), B, K) mod 360
By internal_angle_bisector_definition_v0 on A, center(Circle(A, F, G)), A, J we get angle(A, J, center(Circle(A, F, G))) == angle(center(Circle(A, F, G)), J, A) mod 360
By similar_triangle_basic_properties on midpoint(L, M), M, G, midpoint(K, L), K, A we get angle(midpoint(K, L), K, A) == angle(midpoint(L, M), M, G) mod 360, angle(K, A, midpoint(K, L)) == angle(M, G, midpoint(L, M)) mod 360, angle(A, midpoint(K, L), K) == angle(G, midpoint(L, M), M) mod 360, log(distance(K, midpoint(K, L))) + log(distance(G, M)) == log(distance(M, midpoint(L, M))) + log(distance(A, K)), log(distance(A, K)) + log(distance(G, midpoint(L, M))) == log(distance(G, M)) + log(distance(A, midpoint(K, L))), log(distance(A, midpoint(K, L))) + log(distance(M, midpoint(L, M))) == log(distance(G, midpoint(L, M))) + log(distance(K, midpoint(K, L)))
By parallelogram_parallel_definition on F, M, T, G we get parallelogram(F, G, T, M)
By parallelogram_side_definition on T, M, F, G we get parallelogram(F, G, T, M)
By anti_similar_triangle_basic_properties on L, A, midpoint(K, L), K, F, midpoint(K, M) we get angle(L, A, midpoint(K, L)) == 0 - angle(K, F, midpoint(K, M)) mod 360, angle(A, midpoint(K, L), L) == 0 - angle(F, midpoint(K, M), K) mod 360, angle(midpoint(K, L), L, A) == 0 - angle(midpoint(K, M), K, F) mod 360, log(distance(A, L)) + log(distance(F, midpoint(K, M))) == log(distance(F, K)) + log(distance(A, midpoint(K, L))), log(distance(A, midpoint(K, L))) + log(distance(K, midpoint(K, M))) == log(distance(F, midpoint(K, M))) + log(distance(L, midpoint(K, L))), log(distance(K, midpoint(K, M))) + log(distance(A, L)) == log(distance(L, midpoint(K, L))) + log(distance(F, K))
By log_of_2_times_distance on A, S, F, S we get log(distance(A, S)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(F, S))
By similar_triangle_basic_properties on midpoint(K, M), F, M, midpoint(K, L), A, L we get angle(midpoint(K, L), A, L) == angle(midpoint(K, M), F, M) mod 360, angle(A, L, midpoint(K, L)) == angle(F, M, midpoint(K, M)) mod 360, angle(L, midpoint(K, L), A) == angle(M, midpoint(K, M), F) mod 360, log(distance(A, midpoint(K, L))) + log(distance(F, M)) == log(distance(F, midpoint(K, M))) + log(distance(A, L)), log(distance(A, L)) + log(distance(M, midpoint(K, M))) == log(distance(F, M)) + log(distance(L, midpoint(K, L))), log(distance(L, midpoint(K, L))) + log(distance(F, midpoint(K, M))) == log(distance(M, midpoint(K, M))) + log(distance(A, midpoint(K, L)))
By parallelogram_side_definition on F, M, T, G we get parallelogram(F, G, T, M)
By anti_similar_triangle_basic_properties on M, G, midpoint(L, M), L, A, midpoint(K, L) we get angle(M, G, midpoint(L, M)) == 0 - angle(L, A, midpoint(K, L)) mod 360, angle(G, midpoint(L, M), M) == 0 - angle(A, midpoint(K, L), L) mod 360, angle(midpoint(L, M), M, G) == 0 - angle(midpoint(K, L), L, A) mod 360, log(distance(A, L)) + log(distance(G, midpoint(L, M))) == log(distance(G, M)) + log(distance(A, midpoint(K, L))), log(distance(A, midpoint(K, L))) + log(distance(M, midpoint(L, M))) == log(distance(G, midpoint(L, M))) + log(distance(L, midpoint(K, L))), log(distance(L, midpoint(K, L))) + log(distance(G, M)) == log(distance(M, midpoint(L, M))) + log(distance(A, L))
By reverse_direction on projection(F, Line(J, M)), M we get 180 == direction(projection(F, Line(J, M)), M) - direction(M, projection(F, Line(J, M))) mod 360
By internal_angle_bisector_definition_v0 on C, center(Circle(A, F, G)), B, A we get angle(C, A, center(Circle(A, F, G))) == angle(center(Circle(A, F, G)), A, B) mod 360
By anti_similar_triangle_basic_properties on midpoint(K, M), K, F, midpoint(L, M), L, G we get angle(midpoint(K, M), K, F) == 0 - angle(midpoint(L, M), L, G) mod 360, angle(K, F, midpoint(K, M)) == 0 - angle(L, G, midpoint(L, M)) mod 360, angle(F, midpoint(K, M), K) == 0 - angle(G, midpoint(L, M), L) mod 360, log(distance(K, midpoint(K, M))) + log(distance(G, L)) == log(distance(L, midpoint(L, M))) + log(distance(F, K)), log(distance(F, K)) + log(distance(G, midpoint(L, M))) == log(distance(G, L)) + log(distance(F, midpoint(K, M))), log(distance(F, midpoint(K, M))) + log(distance(L, midpoint(L, M))) == log(distance(G, midpoint(L, M))) + log(distance(K, midpoint(K, M)))
By similar_triangle_basic_properties on K, midpoint(K, L), A, M, midpoint(L, M), G we get angle(K, midpoint(K, L), A) == angle(M, midpoint(L, M), G) mod 360, angle(midpoint(K, L), A, K) == angle(midpoint(L, M), G, M) mod 360, angle(A, K, midpoint(K, L)) == angle(G, M, midpoint(L, M)) mod 360, log(distance(K, midpoint(K, L))) + log(distance(G, midpoint(L, M))) == log(distance(M, midpoint(L, M))) + log(distance(A, midpoint(K, L))), log(distance(A, midpoint(K, L))) + log(distance(G, M)) == log(distance(G, midpoint(L, M))) + log(distance(A, K)), log(distance(A, K)) + log(distance(M, midpoint(L, M))) == log(distance(G, M)) + log(distance(K, midpoint(K, L)))
By anti_similar_triangle_basic_properties on G, L, midpoint(L, M), F, K, midpoint(K, M) we get angle(G, L, midpoint(L, M)) == 0 - angle(F, K, midpoint(K, M)) mod 360, angle(L, midpoint(L, M), G) == 0 - angle(K, midpoint(K, M), F) mod 360, angle(midpoint(L, M), G, L) == 0 - angle(midpoint(K, M), F, K) mod 360, log(distance(F, K)) + log(distance(L, midpoint(L, M))) == log(distance(G, L)) + log(distance(K, midpoint(K, M))), log(distance(K, midpoint(K, M))) + log(distance(G, midpoint(L, M))) == log(distance(L, midpoint(L, M))) + log(distance(F, midpoint(K, M))), log(distance(F, midpoint(K, M))) + log(distance(G, L)) == log(distance(G, midpoint(L, M))) + log(distance(F, K))
By parallelogram_parallel_side_definition on M, T, G, F we get parallelogram(F, G, T, M)
By external_angle_bisector_definition_v0 on F, center(Circle(B, J, K)), J, B we get 180 == angle(F, B, center(Circle(B, J, K))) + angle(J, B, center(Circle(B, J, K))) mod 360
By parallelogram_parallel_side_definition on A, F, M, G we get parallelogram(A, F, M, G)
By external_angle_bisector_definition_v0 on M, center(Circle(B, J, K)), A, B we get 180 == angle(M, B, center(Circle(B, J, K))) + angle(A, B, center(Circle(B, J, K))) mod 360
By collinear_definition on B, center(Circle(B, J, K)), J we get center(Circle(B, J, K)) in Line(B, J), J in Line(B, center(Circle(B, J, K))), Line(B, J) == Line(B, center(Circle(B, J, K))), 0 == 2 * angle(center(Circle(B, J, K)), B, J) mod 360
By log_of_2_times_distance on S, T, M, S we get log(distance(S, T)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(M, S))
By log_of_2_times_distance on S, A, G, M we get log(distance(A, S)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(G, M))
By parallelogram_parallel_definition on G, M, S, F we get parallelogram(F, G, M, S)
By isosceles_trapezoid_properties on A, S, M, K we get parallel(Line(A, S), Line(K, M)), distance(A, K) == distance(M, S), angle(A, S, M) == angle(K, A, S), angle(M, K, A) == angle(S, M, K)
By internal_angle_bisector_definition_v0 on F, center(Circle(B, J, K)), F, B we get angle(F, B, center(Circle(B, J, K))) == angle(center(Circle(B, J, K)), B, F) mod 360
By reverse_direction on M, projection(F, Line(J, M)) we get 180 == direction(M, projection(F, Line(J, M))) - direction(projection(F, Line(J, M)), M) mod 360
By external_angle_bisector_definition_v0 on A, center(Circle(C, J, L)), B, C we get 180 == angle(A, C, center(Circle(C, J, L))) + angle(B, C, center(Circle(C, J, L))) mod 360
By similar_triangle_basic_properties on A, L, midpoint(K, L), G, L, midpoint(L, M) we get angle(A, L, midpoint(K, L)) == angle(G, L, midpoint(L, M)) mod 360, angle(L, midpoint(K, L), A) == angle(L, midpoint(L, M), G) mod 360, angle(midpoint(K, L), A, L) == angle(midpoint(L, M), G, L) mod 360, log(distance(A, L)) + log(distance(L, midpoint(L, M))) == log(distance(G, L)) + log(distance(L, midpoint(K, L))), log(distance(L, midpoint(K, L))) + log(distance(G, midpoint(L, M))) == log(distance(L, midpoint(L, M))) + log(distance(A, midpoint(K, L))), log(distance(A, midpoint(K, L))) + log(distance(G, L)) == log(distance(G, midpoint(L, M))) + log(distance(A, L))
By parallelogram_side_definition on A, G, M, F we get parallelogram(A, F, M, G)
By anti_similar_triangle_basic_properties on K, midpoint(K, L), A, M, midpoint(K, M), F we get angle(K, midpoint(K, L), A) == 0 - angle(M, midpoint(K, M), F) mod 360, angle(midpoint(K, L), A, K) == 0 - angle(midpoint(K, M), F, M) mod 360, angle(A, K, midpoint(K, L)) == 0 - angle(F, M, midpoint(K, M)) mod 360, log(distance(K, midpoint(K, L))) + log(distance(F, midpoint(K, M))) == log(distance(M, midpoint(K, M))) + log(distance(A, midpoint(K, L))), log(distance(A, midpoint(K, L))) + log(distance(F, M)) == log(distance(F, midpoint(K, M))) + log(distance(A, K)), log(distance(A, K)) + log(distance(M, midpoint(K, M))) == log(distance(F, M)) + log(distance(K, midpoint(K, L)))
By reverse_direction on F, projection(F, Line(J, M)) we get 180 == direction(F, projection(F, Line(J, M))) - direction(projection(F, Line(J, M)), F) mod 360
By collinear_definition on J, C, center(Circle(C, J, L)) we get C in Line(J, center(Circle(C, J, L))), center(Circle(C, J, L)) in Line(C, J), Line(C, J) == Line(J, center(Circle(C, J, L))), 0 == 2 * angle(C, J, center(Circle(C, J, L))) mod 360
By internal_angle_bisector_definition_v0 on B, center(Circle(B, J, K)), F, J we get angle(B, J, center(Circle(B, J, K))) == angle(center(Circle(B, J, K)), J, F) mod 360
By anti_similar_triangle_basic_properties on K, midpoint(K, L), A, L, midpoint(L, M), G we get angle(K, midpoint(K, L), A) == 0 - angle(L, midpoint(L, M), G) mod 360, angle(midpoint(K, L), A, K) == 0 - angle(midpoint(L, M), G, L) mod 360, angle(A, K, midpoint(K, L)) == 0 - angle(G, L, midpoint(L, M)) mod 360, log(distance(K, midpoint(K, L))) + log(distance(G, midpoint(L, M))) == log(distance(L, midpoint(L, M))) + log(distance(A, midpoint(K, L))), log(distance(A, midpoint(K, L))) + log(distance(G, L)) == log(distance(G, midpoint(L, M))) + log(distance(A, K)), log(distance(A, K)) + log(distance(L, midpoint(L, M))) == log(distance(G, L)) + log(distance(K, midpoint(K, L)))
By internal_angle_bisector_definition_v0 on midpoint(K, M), center(Circle(B, J, K)), midpoint(K, M), B we get angle(center(Circle(B, J, K)), B, midpoint(K, M)) == angle(midpoint(K, M), B, center(Circle(B, J, K))) mod 360
By parallelogram_parallel_side_definition on S, F, G, M we get parallelogram(F, G, M, S)
By similar_triangle_basic_properties on midpoint(L, M), G, L, midpoint(K, M), F, M we get angle(midpoint(K, M), F, M) == angle(midpoint(L, M), G, L) mod 360, angle(F, M, midpoint(K, M)) == angle(G, L, midpoint(L, M)) mod 360, angle(L, midpoint(L, M), G) == angle(M, midpoint(K, M), F) mod 360, log(distance(F, midpoint(K, M))) + log(distance(G, L)) == log(distance(G, midpoint(L, M))) + log(distance(F, M)), log(distance(F, M)) + log(distance(L, midpoint(L, M))) == log(distance(G, L)) + log(distance(M, midpoint(K, M))), log(distance(L, midpoint(L, M))) + log(distance(F, midpoint(K, M))) == log(distance(M, midpoint(K, M))) + log(distance(G, midpoint(L, M)))
By external_angle_bisector_definition_v0 on S, center(Circle(C, J, L)), A, C we get 180 == angle(S, C, center(Circle(C, J, L))) + angle(A, C, center(Circle(C, J, L))) mod 360
By external_angle_bisector_definition_v0 on G, center(Circle(C, J, L)), J, C we get 180 == angle(G, C, center(Circle(C, J, L))) + angle(J, C, center(Circle(C, J, L))) mod 360
By parallelogram_parallel_definition on M, S, F, G we get parallelogram(F, G, M, S)
By similar_triangle_basic_properties on K, F, midpoint(K, M), M, G, midpoint(L, M) we get angle(K, F, midpoint(K, M)) == angle(M, G, midpoint(L, M)) mod 360, angle(F, midpoint(K, M), K) == angle(G, midpoint(L, M), M) mod 360, angle(midpoint(K, M), K, F) == angle(midpoint(L, M), M, G) mod 360, log(distance(F, K)) + log(distance(G, midpoint(L, M))) == log(distance(G, M)) + log(distance(F, midpoint(K, M))), log(distance(F, midpoint(K, M))) + log(distance(M, midpoint(L, M))) == log(distance(G, midpoint(L, M))) + log(distance(K, midpoint(K, M))), log(distance(K, midpoint(K, M))) + log(distance(G, M)) == log(distance(M, midpoint(L, M))) + log(distance(F, K))
By external_angle_bisector_definition_v0 on A, center(Circle(B, J, K)), T, B we get 180 == angle(A, B, center(Circle(B, J, K))) + angle(T, B, center(Circle(B, J, K))) mod 360
By collinear_definition on J, center(Circle(A, F, G)), A we get center(Circle(A, F, G)) in Line(A, J), A in Line(J, center(Circle(A, F, G))), Line(A, J) == Line(J, center(Circle(A, F, G))), 0 == 2 * angle(center(Circle(A, F, G)), J, A) mod 360
By parallelogram_parallel_side_definition on G, A, F, M we get parallelogram(A, F, M, G)
By reverse_direction on projection(F, Line(J, M)), J we get 180 == direction(projection(F, Line(J, M)), J) - direction(J, projection(F, Line(J, M))) mod 360
By similar_triangle_basic_properties on K, A, midpoint(K, L), K, F, midpoint(K, M) we get angle(K, A, midpoint(K, L)) == angle(K, F, midpoint(K, M)) mod 360, angle(A, midpoint(K, L), K) == angle(F, midpoint(K, M), K) mod 360, angle(midpoint(K, L), K, A) == angle(midpoint(K, M), K, F) mod 360, log(distance(A, K)) + log(distance(F, midpoint(K, M))) == log(distance(F, K)) + log(distance(A, midpoint(K, L))), log(distance(A, midpoint(K, L))) + log(distance(K, midpoint(K, M))) == log(distance(F, midpoint(K, M))) + log(distance(K, midpoint(K, L))), log(distance(K, midpoint(K, L))) + log(distance(F, K)) == log(distance(K, midpoint(K, M))) + log(distance(A, K))
By isosceles_trapezoid_properties on K, M, S, A we get parallel(Line(A, S), Line(K, M)), distance(A, K) == distance(M, S), angle(A, K, M) == angle(K, M, S), angle(M, S, A) == angle(S, A, K)
By similar_triangle_basic_properties on A, K, midpoint(K, L), F, K, midpoint(K, M) we get angle(A, K, midpoint(K, L)) == angle(F, K, midpoint(K, M)) mod 360, angle(K, midpoint(K, L), A) == angle(K, midpoint(K, M), F) mod 360, angle(midpoint(K, L), A, K) == angle(midpoint(K, M), F, K) mod 360, log(distance(A, K)) + log(distance(K, midpoint(K, M))) == log(distance(F, K)) + log(distance(K, midpoint(K, L))), log(distance(K, midpoint(K, L))) + log(distance(F, midpoint(K, M))) == log(distance(K, midpoint(K, M))) + log(distance(A, midpoint(K, L))), log(distance(A, midpoint(K, L))) + log(distance(F, K)) == log(distance(F, midpoint(K, M))) + log(distance(A, K))
By isosceles_trapezoid_properties on A, G, F, L we get parallel(Line(A, G), Line(F, L)), distance(A, L) == distance(F, G), angle(A, G, F) == angle(L, A, G), angle(F, L, A) == angle(G, F, L)
By parallelogram_parallel_definition on S, F, G, M we get parallelogram(F, G, M, S)
By internal_angle_bisector_definition_v0 on G, center(Circle(C, J, L)), G, C we get angle(G, C, center(Circle(C, J, L))) == angle(center(Circle(C, J, L)), C, G) mod 360
By reverse_direction on projection(F, Line(J, M)), F we get 180 == direction(projection(F, Line(J, M)), F) - direction(F, projection(F, Line(J, M))) mod 360
By parallelogram_side_definition on G, A, F, M we get parallelogram(A, F, M, G)
By internal_angle_bisector_definition_v0 on F, center(Circle(B, J, K)), F, J we get angle(F, J, center(Circle(B, J, K))) == angle(center(Circle(B, J, K)), J, F) mod 360
By anti_similar_triangle_basic_properties on L, midpoint(K, L), A, K, midpoint(K, M), F we get angle(L, midpoint(K, L), A) == 0 - angle(K, midpoint(K, M), F) mod 360, angle(midpoint(K, L), A, L) == 0 - angle(midpoint(K, M), F, K) mod 360, angle(A, L, midpoint(K, L)) == 0 - angle(F, K, midpoint(K, M)) mod 360, log(distance(K, midpoint(K, M))) + log(distance(A, midpoint(K, L))) == log(distance(L, midpoint(K, L))) + log(distance(F, midpoint(K, M))), log(distance(A, midpoint(K, L))) + log(distance(F, K)) == log(distance(F, midpoint(K, M))) + log(distance(A, L)), log(distance(A, L)) + log(distance(K, midpoint(K, M))) == log(distance(F, K)) + log(distance(L, midpoint(K, L)))
By reverse_direction on J, projection(F, Line(J, M)) we get 180 == direction(J, projection(F, Line(J, M))) - direction(projection(F, Line(J, M)), J) mod 360
By log_of_2_times_distance on A, S, L, G we get log(distance(A, S)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(G, L))
By perpendicular_angle_conditions_v0 on midpoint(L, M), G, T we get angle(midpoint(L, M), G, T) == orientation(G, T, midpoint(L, M)) mod 360
By internal_angle_bisector_definition_v0 on L, center(Circle(C, J, L)), B, C we get angle(L, C, center(Circle(C, J, L))) == angle(center(Circle(C, J, L)), C, B) mod 360
By internal_angle_bisector_definition_v0 on C, center(Circle(C, J, L)), C, J we get angle(C, J, center(Circle(C, J, L))) == angle(center(Circle(C, J, L)), J, C) mod 360
By internal_angle_bisector_definition_v0 on L, center(Circle(A, F, G)), B, A we get angle(L, A, center(Circle(A, F, G))) == angle(center(Circle(A, F, G)), A, B) mod 360
By collinear_definition on J, center(Circle(B, J, K)), B we get center(Circle(B, J, K)) in Line(B, J), B in Line(J, center(Circle(B, J, K))), Line(B, J) == Line(J, center(Circle(B, J, K))), 0 == 2 * angle(center(Circle(B, J, K)), J, B) mod 360
By parallelogram_parallel_side_definition on F, S, M, G we get parallelogram(F, G, M, S)
By internal_angle_bisector_definition_v0 on L, center(Circle(C, J, L)), S, C we get angle(L, C, center(Circle(C, J, L))) == angle(center(Circle(C, J, L)), C, S) mod 360
By internal_angle_bisector_definition_v0 on midpoint(L, M), center(Circle(C, J, L)), midpoint(L, M), J we get angle(center(Circle(C, J, L)), J, midpoint(L, M)) == angle(midpoint(L, M), J, center(Circle(C, J, L))) mod 360
By parallelogram_parallel_definition on F, M, G, A we get parallelogram(A, F, M, G)
By perpendicular_angle_conditions_v0 on A, F, midpoint(K, M) we get angle(A, F, midpoint(K, M)) == orientation(A, F, midpoint(K, M)) mod 360
By external_angle_bisector_definition_v0 on C, center(Circle(B, J, K)), A, B we get 180 == angle(C, B, center(Circle(B, J, K))) + angle(A, B, center(Circle(B, J, K))) mod 360
By parallelogram_side_definition on M, T, G, F we get parallelogram(F, G, T, M)
By perpendicular_bisector_sufficient_conditions on L, K, center(Circle(A, F, G)), midpoint(K, L) we get perpendicular_bisector(K, L) == Line(midpoint(K, L), center(Circle(A, F, G)))
By parallelogram_side_definition on F, A, G, M we get parallelogram(A, F, M, G)
By anti_similar_triangle_basic_properties on A, L, midpoint(K, L), G, M, midpoint(L, M) we get angle(A, L, midpoint(K, L)) == 0 - angle(G, M, midpoint(L, M)) mod 360, angle(L, midpoint(K, L), A) == 0 - angle(M, midpoint(L, M), G) mod 360, angle(midpoint(K, L), A, L) == 0 - angle(midpoint(L, M), G, M) mod 360, log(distance(A, L)) + log(distance(M, midpoint(L, M))) == log(distance(G, M)) + log(distance(L, midpoint(K, L))), log(distance(L, midpoint(K, L))) + log(distance(G, midpoint(L, M))) == log(distance(M, midpoint(L, M))) + log(distance(A, midpoint(K, L))), log(distance(A, midpoint(K, L))) + log(distance(G, M)) == log(distance(G, midpoint(L, M))) + log(distance(A, L))
By parallelogram_parallel_side_definition on M, F, A, G we get parallelogram(A, F, M, G)
By internal_angle_bisector_definition_v0 on C, center(Circle(A, F, G)), K, A we get angle(C, A, center(Circle(A, F, G))) == angle(center(Circle(A, F, G)), A, K) mod 360
By parallelogram_parallel_side_definition on M, G, F, S we get parallelogram(F, G, M, S)
By similar_triangle_basic_properties on midpoint(K, M), M, F, midpoint(L, M), L, G we get angle(midpoint(K, M), M, F) == angle(midpoint(L, M), L, G) mod 360, angle(L, G, midpoint(L, M)) == angle(M, F, midpoint(K, M)) mod 360, angle(F, midpoint(K, M), M) == angle(G, midpoint(L, M), L) mod 360, log(distance(L, midpoint(L, M))) + log(distance(F, M)) == log(distance(M, midpoint(K, M))) + log(distance(G, L)), log(distance(F, M)) + log(distance(G, midpoint(L, M))) == log(distance(G, L)) + log(distance(F, midpoint(K, M))), log(distance(F, midpoint(K, M))) + log(distance(L, midpoint(L, M))) == log(distance(G, midpoint(L, M))) + log(distance(M, midpoint(K, M)))
By parallelogram_parallel_side_definition on G, M, F, A we get parallelogram(A, F, M, G)
By isosceles_trapezoid_properties on A, F, K, G we get parallel(Line(A, F), Line(G, K)), distance(A, G) == distance(F, K), angle(A, F, K) == angle(G, A, F), angle(F, K, G) == angle(K, G, A)
By external_angle_bisector_definition_v0 on A, midpoint(L, M), A, G we get 180 == angle(A, G, midpoint(L, M)) + angle(A, G, midpoint(L, M)) mod 360
By internal_angle_bisector_definition_v0 on B, center(Circle(B, J, K)), B, J we get angle(B, J, center(Circle(B, J, K))) == angle(center(Circle(B, J, K)), J, B) mod 360
By isosceles_trapezoid_properties on F, A, K, G we get parallel(Line(A, F), Line(G, K)), distance(A, K) == distance(F, G), angle(F, A, K) == angle(G, F, A), angle(A, K, G) == angle(K, G, F)
By parallelogram_parallel_side_definition on S, M, G, F we get parallelogram(F, G, M, S)
By anti_similar_triangle_basic_properties on L, G, midpoint(L, M), K, A, midpoint(K, L) we get angle(L, G, midpoint(L, M)) == 0 - angle(K, A, midpoint(K, L)) mod 360, angle(G, midpoint(L, M), L) == 0 - angle(A, midpoint(K, L), K) mod 360, angle(midpoint(L, M), L, G) == 0 - angle(midpoint(K, L), K, A) mod 360, log(distance(A, K)) + log(distance(G, midpoint(L, M))) == log(distance(G, L)) + log(distance(A, midpoint(K, L))), log(distance(A, midpoint(K, L))) + log(distance(L, midpoint(L, M))) == log(distance(G, midpoint(L, M))) + log(distance(K, midpoint(K, L))), log(distance(K, midpoint(K, L))) + log(distance(G, L)) == log(distance(L, midpoint(L, M))) + log(distance(A, K))
By isosceles_trapezoid_properties on L, M, T, A we get parallel(Line(A, T), Line(L, M)), distance(A, L) == distance(M, T), angle(A, L, M) == angle(L, M, T), angle(M, T, A) == angle(T, A, L)
By internal_angle_bisector_definition_v0 on midpoint(K, M), center(Circle(B, J, K)), midpoint(K, M), J we get angle(center(Circle(B, J, K)), J, midpoint(K, M)) == angle(midpoint(K, M), J, center(Circle(B, J, K))) mod 360
By internal_angle_bisector_definition_v0 on J, center(Circle(B, J, K)), J, B we get angle(J, B, center(Circle(B, J, K))) == angle(center(Circle(B, J, K)), B, J) mod 360
By parallelogram_parallel_definition on G, M, F, A we get parallelogram(A, F, M, G)
By external_angle_bisector_definition_v0 on S, center(Circle(B, J, K)), K, B we get 180 == angle(S, B, center(Circle(B, J, K))) + angle(K, B, center(Circle(B, J, K))) mod 360
By perpendicular_angle_conditions_v0 on midpoint(K, M), F, S we get angle(midpoint(K, M), F, S) == orientation(F, S, midpoint(K, M)) mod 360
By isosceles_trapezoid_properties on G, A, F, L we get parallel(Line(A, G), Line(F, L)), distance(A, F) == distance(G, L), angle(G, A, F) == angle(L, G, A), angle(A, F, L) == angle(F, L, G)
By reverse_direction on projection(F, Line(J, M)), G we get 180 == direction(projection(F, Line(J, M)), G) - direction(G, projection(F, Line(J, M))) mod 360
By log_of_2_times_distance on A, T, K, F we get log(distance(A, T)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(F, K))
By collinear_definition on J, B, center(Circle(B, J, K)) we get B in Line(J, center(Circle(B, J, K))), center(Circle(B, J, K)) in Line(B, J), Line(B, J) == Line(J, center(Circle(B, J, K))), 0 == 2 * angle(B, J, center(Circle(B, J, K))) mod 360
By internal_angle_bisector_definition_v0 on S, center(Circle(B, J, K)), A, B we get angle(S, B, center(Circle(B, J, K))) == angle(center(Circle(B, J, K)), B, A) mod 360
By log_of_2_times_distance on A, T, A, G we get log(distance(A, T)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(A, G))
By internal_angle_bisector_definition_v0 on A, center(Circle(C, J, L)), T, C we get angle(A, C, center(Circle(C, J, L))) == angle(center(Circle(C, J, L)), C, T) mod 360
By log_of_2_times_distance on T, S, A, L we get log(distance(S, T)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(A, L))
By parallelogram_parallel_definition on F, G, M, S we get parallelogram(F, G, M, S)
By parallelogram_parallel_definition on F, G, T, M we get parallelogram(F, G, T, M)
By internal_angle_bisector_definition_v0 on J, center(Circle(C, J, L)), J, C we get angle(J, C, center(Circle(C, J, L))) == angle(center(Circle(C, J, L)), C, J) mod 360
By similar_triangle_basic_properties on L, A, midpoint(K, L), L, G, midpoint(L, M) we get angle(L, A, midpoint(K, L)) == angle(L, G, midpoint(L, M)) mod 360, angle(A, midpoint(K, L), L) == angle(G, midpoint(L, M), L) mod 360, angle(midpoint(K, L), L, A) == angle(midpoint(L, M), L, G) mod 360, log(distance(A, L)) + log(distance(G, midpoint(L, M))) == log(distance(G, L)) + log(distance(A, midpoint(K, L))), log(distance(A, midpoint(K, L))) + log(distance(L, midpoint(L, M))) == log(distance(G, midpoint(L, M))) + log(distance(L, midpoint(K, L))), log(distance(L, midpoint(K, L))) + log(distance(G, L)) == log(distance(L, midpoint(L, M))) + log(distance(A, L))
By external_angle_bisector_definition_v0 on T, midpoint(L, M), T, G we get 180 == angle(T, G, midpoint(L, M)) + angle(T, G, midpoint(L, M)) mod 360
By parallelogram_parallel_side_definition on T, G, F, M we get parallelogram(F, G, T, M)
By external_angle_bisector_definition_v0 on A, center(Circle(C, J, L)), M, C we get 180 == angle(A, C, center(Circle(C, J, L))) + angle(M, C, center(Circle(C, J, L))) mod 360
By internal_angle_bisector_definition_v0 on K, center(Circle(B, J, K)), C, B we get angle(K, B, center(Circle(B, J, K))) == angle(center(Circle(B, J, K)), B, C) mod 360
By reverse_direction on G, projection(F, Line(J, M)) we get 180 == direction(G, projection(F, Line(J, M))) - direction(projection(F, Line(J, M)), G) mod 360
By internal_angle_bisector_definition_v0 on B, center(Circle(C, J, L)), L, C we get angle(B, C, center(Circle(C, J, L))) == angle(center(Circle(C, J, L)), C, L) mod 360
By parallelogram_side_definition on G, M, S, F we get parallelogram(F, G, M, S)
By parallelogram_side_definition on F, M, G, A we get parallelogram(A, F, M, G)
By parallelogram_side_definition on M, S, F, G we get parallelogram(F, G, M, S)
By isosceles_trapezoid_properties on G, K, A, F we get parallel(Line(A, F), Line(G, K)), distance(A, K) == distance(F, G), angle(F, G, K) == angle(G, K, A), angle(A, F, G) == angle(K, A, F)
By parallelogram_parallel_definition on G, A, F, M we get parallelogram(A, F, M, G)
By parallelogram_side_definition on G, M, F, A we get parallelogram(A, F, M, G)
By internal_angle_bisector_definition_v0 on A, center(Circle(B, J, K)), S, B we get angle(A, B, center(Circle(B, J, K))) == angle(center(Circle(B, J, K)), B, S) mod 360
By parallelogram_parallel_side_definition on T, M, F, G we get parallelogram(F, G, T, M)
By external_angle_bisector_definition_v0 on S, midpoint(K, M), S, F we get 180 == angle(S, F, midpoint(K, M)) + angle(S, F, midpoint(K, M)) mod 360
By parallelogram_parallel_definition on M, F, G, T we get parallelogram(F, G, T, M)
By parallelogram_parallel_side_definition on G, F, S, M we get parallelogram(F, G, M, S)
By parallelogram_side_definition on T, G, F, M we get parallelogram(F, G, T, M)
By internal_angle_bisector_definition_v0 on G, center(Circle(C, J, L)), G, J we get angle(G, J, center(Circle(C, J, L))) == angle(center(Circle(C, J, L)), J, G) mod 360
By parallelogram_parallel_side_definition on F, M, G, A we get parallelogram(A, F, M, G)
By parallelogram_parallel_side_definition on G, M, S, F we get parallelogram(F, G, M, S)
By internal_angle_bisector_definition_v0 on midpoint(L, M), center(Circle(C, J, L)), midpoint(L, M), C we get angle(center(Circle(C, J, L)), C, midpoint(L, M)) == angle(midpoint(L, M), C, center(Circle(C, J, L))) mod 360
By isosceles_trapezoid_properties on L, F, G, A we get parallel(Line(A, G), Line(F, L)), distance(A, L) == distance(F, G), angle(A, L, F) == angle(L, F, G), angle(F, G, A) == angle(G, A, L)
By isosceles_trapezoid_properties on F, A, G, K we get parallel(Line(A, F), Line(G, K)), distance(A, G) == distance(F, K), angle(F, A, G) == angle(K, F, A), angle(A, G, K) == angle(G, K, F)
By log_of_2_times_distance on S, T, M, T we get log(distance(S, T)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(M, T))
By parallelogram_parallel_definition on G, T, M, F we get parallelogram(F, G, T, M)
By collinear_definition on A, center(Circle(A, F, G)), J we get center(Circle(A, F, G)) in Line(A, J), J in Line(A, center(Circle(A, F, G))), Line(A, J) == Line(A, center(Circle(A, F, G))), 0 == 2 * angle(center(Circle(A, F, G)), A, J) mod 360
By perpendicular_angle_conditions_v0 on A, G, midpoint(L, M) we get angle(A, G, midpoint(L, M)) == orientation(A, G, midpoint(L, M)) mod 360
By internal_angle_bisector_definition_v0 on K, center(Circle(B, J, K)), T, B we get angle(K, B, center(Circle(B, J, K))) == angle(center(Circle(B, J, K)), B, T) mod 360
By parallelogram_side_definition on G, T, M, F we get parallelogram(F, G, T, M)
By parallelogram_side_definition on G, F, S, M we get parallelogram(F, G, M, S)
By internal_angle_bisector_definition_v0 on F, center(Circle(B, J, K)), B, J we get angle(F, J, center(Circle(B, J, K))) == angle(center(Circle(B, J, K)), J, B) mod 360
By parallelogram_side_definition on A, F, M, G we get parallelogram(A, F, M, G)
By parallelogram_side_definition on S, F, G, M we get parallelogram(F, G, M, S)
By parallelogram_side_definition on F, G, M, S we get parallelogram(F, G, M, S)
By external_angle_bisector_definition_v0 on A, midpoint(K, M), A, F we get 180 == angle(A, F, midpoint(K, M)) + angle(A, F, midpoint(K, M)) mod 360
By parallelogram_parallel_definition on G, F, M, T we get parallelogram(F, G, T, M)
By parallelogram_parallel_side_definition on F, G, T, M we get parallelogram(F, G, T, M)
By internal_angle_bisector_definition_v0 on B, center(Circle(A, F, G)), L, A we get angle(B, A, center(Circle(A, F, G))) == angle(center(Circle(A, F, G)), A, L) mod 360
By parallelogram_parallel_side_definition on M, S, F, G we get parallelogram(F, G, M, S)
By parallelogram_side_definition on G, F, M, T we get parallelogram(F, G, T, M)
By parallelogram_parallel_definition on M, F, A, G we get parallelogram(A, F, M, G)
By parallelogram_parallel_definition on T, M, F, G we get parallelogram(F, G, T, M)
By parallelogram_side_definition on M, G, F, S we get parallelogram(F, G, M, S)
By parallelogram_parallel_side_definition on A, G, M, F we get parallelogram(A, F, M, G)
By internal_angle_bisector_definition_v0 on C, center(Circle(C, J, L)), G, J we get angle(C, J, center(Circle(C, J, L))) == angle(center(Circle(C, J, L)), J, G) mod 360
By parallelogram_parallel_definition on T, G, F, M we get parallelogram(F, G, T, M)
By collinear_definition on J, center(Circle(C, J, L)), C we get center(Circle(C, J, L)) in Line(C, J), C in Line(J, center(Circle(C, J, L))), Line(C, J) == Line(J, center(Circle(C, J, L))), 0 == 2 * angle(center(Circle(C, J, L)), J, C) mod 360
By parallelogram_parallel_side_definition on F, G, M, S we get parallelogram(F, G, M, S)
By parallelogram_parallel_side_definition on G, T, M, F we get parallelogram(F, G, T, M)
By internal_angle_bisector_definition_v0 on B, center(Circle(A, F, G)), C, A we get angle(B, A, center(Circle(A, F, G))) == angle(center(Circle(A, F, G)), A, C) mod 360
By parallelogram_parallel_side_definition on M, F, G, T we get parallelogram(F, G, T, M)
By perpendicular_angle_conditions_v0 on midpoint(K, M), F, A we get angle(midpoint(K, M), F, A) == orientation(A, midpoint(K, M), F) mod 360
By internal_angle_bisector_definition_v0 on A, midpoint(L, M), T, G we get angle(A, G, midpoint(L, M)) == angle(midpoint(L, M), G, T) mod 360
By internal_angle_bisector_definition_v0 on T, midpoint(L, M), A, G we get angle(T, G, midpoint(L, M)) == angle(midpoint(L, M), G, A) mod 360
By parallelogram_side_definition on F, S, M, G we get parallelogram(F, G, M, S)
By parallelogram_side_definition on M, F, A, G we get parallelogram(A, F, M, G)
By internal_angle_bisector_definition_v0 on K, center(Circle(A, F, G)), C, A we get angle(K, A, center(Circle(A, F, G))) == angle(center(Circle(A, F, G)), A, C) mod 360
By parallelogram_parallel_side_definition on F, A, G, M we get parallelogram(A, F, M, G)
By parallelogram_parallel_definition on M, G, A, F we get parallelogram(A, F, M, G)
By log_of_2_times_distance on A, S, A, F we get log(distance(A, S)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(A, F))
By perpendicular_angle_conditions_v0 on midpoint(L, M), G, A we get angle(midpoint(L, M), G, A) == orientation(A, midpoint(L, M), G) mod 360
By parallelogram_side_definition on F, G, T, M we get parallelogram(F, G, T, M)
By parallelogram_parallel_definition on A, F, M, G we get parallelogram(A, F, M, G)
By parallelogram_parallel_side_definition on G, F, M, T we get parallelogram(F, G, T, M)
By internal_angle_bisector_definition_v0 on midpoint(K, L), center(Circle(A, F, G)), midpoint(K, L), A we get angle(center(Circle(A, F, G)), A, midpoint(K, L)) == angle(midpoint(K, L), A, center(Circle(A, F, G))) mod 360
By internal_angle_bisector_definition_v0 on A, midpoint(K, M), S, F we get angle(A, F, midpoint(K, M)) == angle(midpoint(K, M), F, S) mod 360
By parallelogram_parallel_definition on F, A, G, M we get parallelogram(A, F, M, G)
By internal_angle_bisector_definition_v0 on S, midpoint(K, M), A, F we get angle(S, F, midpoint(K, M)) == angle(midpoint(K, M), F, A) mod 360
By parallelogram_parallel_definition on M, G, F, S we get parallelogram(F, G, M, S)
By parallelogram_parallel_definition on M, T, G, F we get parallelogram(F, G, T, M)
By parallelogram_side_definition on M, G, A, F we get parallelogram(A, F, M, G)
By parallelogram_parallel_definition on S, M, G, F we get parallelogram(F, G, M, S)
By parallelogram_parallel_side_definition on F, M, T, G we get parallelogram(F, G, T, M)
By parallelogram_side_definition on S, M, G, F we get parallelogram(F, G, M, S)
By log_of_2_times_distance on T, S, K, A we get log(distance(S, T)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(A, K))
By isosceles_triangle_properties on center(Circle(A, F, G)), F, L we get distance(F, center(Circle(A, F, G))) == distance(L, center(Circle(A, F, G))), angle(F, L, center(Circle(A, F, G))) == angle(center(Circle(A, F, G)), F, L) mod 360
By concyclic_definition_0 on T, M, J, G we get G in Circle(J, M, T)
By concyclic_definition_0 on M, S, A, K we get K in Circle(A, M, S)
By concyclic_definition_0 on K, S, M, A we get A in Circle(K, M, S)
By external_angle_bisector_definition_v0_r on J, F, J, projection(F, Line(J, M)) we get Line(F, projection(F, Line(J, M))) == external_angle_bisector(J, projection(F, Line(J, M)), J)
By concyclic_definition_0 on T, J, B, A we get A in Circle(B, J, T)
By external_angle_bisector_definition_v0_r on projection(F, Line(J, M)), T, projection(F, Line(J, M)), M we get Line(M, T) == external_angle_bisector(projection(F, Line(J, M)), M, projection(F, Line(J, M)))
By concyclic_definition_0 on A, K, S, M we get M in Circle(A, K, S)
By isosceles_triangle_properties on center(Circle(A, F, G)), F, K we get distance(F, center(Circle(A, F, G))) == distance(K, center(Circle(A, F, G))), angle(F, K, center(Circle(A, F, G))) == angle(center(Circle(A, F, G)), F, K) mod 360
By external_angle_bisector_definition_v0_r on projection(F, Line(J, M)), C, projection(F, Line(J, M)), M we get Line(C, M) == external_angle_bisector(projection(F, Line(J, M)), M, projection(F, Line(J, M)))
By sas_anti_congruence on G, center(Circle(A, F, G)), L, L, center(Circle(A, F, G)), G we get anti_congruent_triangles(G, L, center(Circle(A, F, G)), L, G, center(Circle(A, F, G)))
By isosceles_triangle_properties on center(Circle(A, F, G)), J, G we get distance(G, center(Circle(A, F, G))) == distance(J, center(Circle(A, F, G))), angle(J, G, center(Circle(A, F, G))) == angle(center(Circle(A, F, G)), J, G) mod 360
By concyclic_definition_0 on S, J, C, A we get A in Circle(C, J, S)
By altitude_definition on center(Circle(C, J, L)), M, L, Line(C, G) we get Line(C, G) == altitude(center(Circle(C, J, L)), L, M)
By concyclic_definition_0 on T, J, A, B we get B in Circle(A, J, T)
By concyclic_definition_0 on L, M, T, A we get A in Circle(L, M, T)
By external_angle_bisector_definition_v0_r on F, J, F, projection(F, Line(J, M)) we get Line(J, projection(F, Line(J, M))) == external_angle_bisector(F, projection(F, Line(J, M)), F)
By concyclic_definition_0 on L, M, A, T we get T in Circle(A, L, M)
By external_angle_bisector_definition_v0_r on projection(F, Line(J, M)), B, projection(F, Line(J, M)), M we get Line(B, M) == external_angle_bisector(projection(F, Line(J, M)), M, projection(F, Line(J, M)))
By sas_anti_congruence on K, center(Circle(A, F, G)), G, G, center(Circle(A, F, G)), K we get anti_congruent_triangles(G, K, center(Circle(A, F, G)), K, G, center(Circle(A, F, G)))
By concyclic_definition_0 on M, S, J, F we get F in Circle(J, M, S)
By external_angle_bisector_definition_v0_r on G, M, G, projection(F, Line(J, M)) we get Line(M, projection(F, Line(J, M))) == external_angle_bisector(G, projection(F, Line(J, M)), G)
By sas_anti_congruence on A, center(Circle(A, F, G)), F, F, center(Circle(A, F, G)), A we get anti_congruent_triangles(A, F, center(Circle(A, F, G)), F, A, center(Circle(A, F, G)))
By isosceles_triangle_properties on center(Circle(A, F, G)), G, L we get distance(G, center(Circle(A, F, G))) == distance(L, center(Circle(A, F, G))), angle(G, L, center(Circle(A, F, G))) == angle(center(Circle(A, F, G)), G, L) mod 360
By concyclic_definition_0 on S, C, A, J we get J in Circle(A, C, S)
By concyclic_definition_0 on J, S, A, C we get C in Circle(A, J, S)
By concyclic_definition_0 on M, T, G, J we get J in Circle(G, M, T)
By isosceles_triangle_properties on center(Circle(A, F, G)), F, A we get distance(A, center(Circle(A, F, G))) == distance(F, center(Circle(A, F, G))), angle(F, A, center(Circle(A, F, G))) == angle(center(Circle(A, F, G)), F, A) mod 360
By sas_anti_congruence on L, center(Circle(A, F, G)), F, F, center(Circle(A, F, G)), L we get anti_congruent_triangles(F, L, center(Circle(A, F, G)), L, F, center(Circle(A, F, G)))
By concyclic_definition_0 on T, M, A, L we get L in Circle(A, M, T)
By sas_anti_congruence on G, center(Circle(A, F, G)), A, A, center(Circle(A, F, G)), G we get anti_congruent_triangles(A, G, center(Circle(A, F, G)), G, A, center(Circle(A, F, G)))
By external_angle_bisector_definition_v0_r on G, J, G, projection(F, Line(J, M)) we get Line(J, projection(F, Line(J, M))) == external_angle_bisector(G, projection(F, Line(J, M)), G)
By concyclic_definition_0 on S, F, J, M we get M in Circle(F, J, S)
By sas_anti_congruence on G, center(Circle(A, F, G)), K, K, center(Circle(A, F, G)), G we get anti_congruent_triangles(G, K, center(Circle(A, F, G)), K, G, center(Circle(A, F, G)))
By concyclic_definition_0 on F, M, S, J we get J in Circle(F, M, S)
By concyclic_definition_0 on M, F, J, S we get S in Circle(F, J, M)
By concyclic_definition_0 on T, A, B, J we get J in Circle(A, B, T)
By external_angle_bisector_definition_v0_r on J, G, J, projection(F, Line(J, M)) we get Line(G, projection(F, Line(J, M))) == external_angle_bisector(J, projection(F, Line(J, M)), J)
By sas_anti_congruence on F, center(Circle(A, F, G)), L, L, center(Circle(A, F, G)), F we get anti_congruent_triangles(F, L, center(Circle(A, F, G)), L, F, center(Circle(A, F, G)))
By concyclic_definition_0 on A, J, C, S we get S in Circle(A, C, J)
By concyclic_definition_0 on L, A, T, M we get M in Circle(A, L, T)
By concyclic_definition_0 on J, M, G, T we get T in Circle(G, J, M)
By altitude_definition on center(Circle(B, J, K)), K, G, Line(B, F) we get Line(B, F) == altitude(center(Circle(B, J, K)), G, K)
By external_angle_bisector_definition_v0_r on projection(F, Line(J, M)), S, projection(F, Line(J, M)), M we get Line(M, S) == external_angle_bisector(projection(F, Line(J, M)), M, projection(F, Line(J, M)))
By internal_angle_bisector_definition_v0_r on J, projection(F, Line(J, M)), J, M we get internal_angle_bisector(J, M, J) == Line(M, projection(F, Line(J, M)))
By concyclic_definition_0 on M, A, K, S we get S in Circle(A, K, M)
By isosceles_triangle_properties on center(Circle(A, F, G)), A, F we get distance(A, center(Circle(A, F, G))) == distance(F, center(Circle(A, F, G))), angle(A, F, center(Circle(A, F, G))) == angle(center(Circle(A, F, G)), A, F) mod 360
By internal_angle_bisector_definition_v0_r on F, G, F, projection(F, Line(J, M)) we get Line(G, projection(F, Line(J, M))) == internal_angle_bisector(F, projection(F, Line(J, M)), F)
By isosceles_triangle_properties on center(Circle(A, F, G)), K, G we get distance(G, center(Circle(A, F, G))) == distance(K, center(Circle(A, F, G))), angle(K, G, center(Circle(A, F, G))) == angle(center(Circle(A, F, G)), K, G) mod 360
By external_angle_bisector_definition_v0_r on M, G, M, projection(F, Line(J, M)) we get Line(G, projection(F, Line(J, M))) == external_angle_bisector(M, projection(F, Line(J, M)), M)
By concyclic_definition_0 on J, A, B, T we get T in Circle(A, B, J)
By isosceles_triangle_properties on center(Circle(A, F, G)), A, G we get distance(A, center(Circle(A, F, G))) == distance(G, center(Circle(A, F, G))), angle(A, G, center(Circle(A, F, G))) == angle(center(Circle(A, F, G)), A, G) mod 360
By sas_anti_congruence on K, center(Circle(A, F, G)), F, F, center(Circle(A, F, G)), K we get anti_congruent_triangles(F, K, center(Circle(A, F, G)), K, F, center(Circle(A, F, G)))
By isosceles_triangle_properties on center(Circle(A, F, G)), J, F we get distance(F, center(Circle(A, F, G))) == distance(J, center(Circle(A, F, G))), angle(J, F, center(Circle(A, F, G))) == angle(center(Circle(A, F, G)), J, F) mod 360
By reverse_direction on center(Circle(A, F, G)), G we get 180 == direction(center(Circle(A, F, G)), G) - direction(G, center(Circle(A, F, G))) mod 360
By concyclic_definition_0 on T, J, G, M we get M in Circle(G, J, T)
By external_angle_bisector_definition_v0_r on M, F, M, projection(F, Line(J, M)) we get Line(F, projection(F, Line(J, M))) == external_angle_bisector(M, projection(F, Line(J, M)), M)
By isosceles_triangle_properties on center(Circle(A, F, G)), K, F we get distance(F, center(Circle(A, F, G))) == distance(K, center(Circle(A, F, G))), angle(K, F, center(Circle(A, F, G))) == angle(center(Circle(A, F, G)), K, F) mod 360
By external_angle_bisector_definition_v0_r on F, M, F, projection(F, Line(J, M)) we get Line(M, projection(F, Line(J, M))) == external_angle_bisector(F, projection(F, Line(J, M)), F)
By internal_angle_bisector_definition_v0_r on M, projection(F, Line(J, M)), M, J we get internal_angle_bisector(M, J, M) == Line(J, projection(F, Line(J, M)))
By internal_angle_bisector_definition_v0_r on J, M, J, projection(F, Line(J, M)) we get Line(M, projection(F, Line(J, M))) == internal_angle_bisector(J, projection(F, Line(J, M)), J)
By isosceles_triangle_properties on center(Circle(A, F, G)), L, G we get distance(G, center(Circle(A, F, G))) == distance(L, center(Circle(A, F, G))), angle(L, G, center(Circle(A, F, G))) == angle(center(Circle(A, F, G)), L, G) mod 360
By sas_anti_congruence on F, center(Circle(A, F, G)), K, K, center(Circle(A, F, G)), F we get anti_congruent_triangles(F, K, center(Circle(A, F, G)), K, F, center(Circle(A, F, G)))
By isosceles_triangle_properties on center(Circle(A, F, G)), L, F we get distance(F, center(Circle(A, F, G))) == distance(L, center(Circle(A, F, G))), angle(L, F, center(Circle(A, F, G))) == angle(center(Circle(A, F, G)), L, F) mod 360
By sas_anti_congruence on J, center(Circle(A, F, G)), F, F, center(Circle(A, F, G)), J we get anti_congruent_triangles(F, J, center(Circle(A, F, G)), J, F, center(Circle(A, F, G)))
By altitude_definition on center(Circle(C, J, L)), L, F, Line(C, G) we get Line(C, G) == altitude(center(Circle(C, J, L)), F, L)
By isosceles_triangle_properties on center(Circle(A, F, G)), F, J we get distance(F, center(Circle(A, F, G))) == distance(J, center(Circle(A, F, G))), angle(F, J, center(Circle(A, F, G))) == angle(center(Circle(A, F, G)), F, J) mod 360
By sas_anti_congruence on J, center(Circle(A, F, G)), G, G, center(Circle(A, F, G)), J we get anti_congruent_triangles(G, J, center(Circle(A, F, G)), J, G, center(Circle(A, F, G)))
By reverse_direction on center(Circle(A, F, G)), F we get 180 == direction(center(Circle(A, F, G)), F) - direction(F, center(Circle(A, F, G))) mod 360
By internal_angle_bisector_definition_v0_r on projection(F, Line(J, M)), J, projection(F, Line(J, M)), M we get Line(J, M) == internal_angle_bisector(projection(F, Line(J, M)), M, projection(F, Line(J, M)))
By sas_anti_congruence on G, center(Circle(A, F, G)), J, J, center(Circle(A, F, G)), G we get anti_congruent_triangles(G, J, center(Circle(A, F, G)), J, G, center(Circle(A, F, G)))
By altitude_definition on center(Circle(A, F, G)), K, L, Line(A, J) we get Line(A, J) == altitude(center(Circle(A, F, G)), K, L)
By internal_angle_bisector_definition_v0_r on G, F, G, projection(F, Line(J, M)) we get Line(F, projection(F, Line(J, M))) == internal_angle_bisector(G, projection(F, Line(J, M)), G)
By internal_angle_bisector_definition_v0_r on projection(F, Line(J, M)), G, projection(F, Line(J, M)), F we get Line(F, G) == internal_angle_bisector(projection(F, Line(J, M)), F, projection(F, Line(J, M)))
By sas_anti_congruence on F, center(Circle(A, F, G)), J, J, center(Circle(A, F, G)), F we get anti_congruent_triangles(F, J, center(Circle(A, F, G)), J, F, center(Circle(A, F, G)))
By altitude_definition on center(Circle(B, J, K)), M, K, Line(B, F) we get Line(B, F) == altitude(center(Circle(B, J, K)), K, M)
By isosceles_triangle_properties on center(Circle(A, F, G)), G, A we get distance(A, center(Circle(A, F, G))) == distance(G, center(Circle(A, F, G))), angle(G, A, center(Circle(A, F, G))) == angle(center(Circle(A, F, G)), G, A) mod 360
By isosceles_triangle_properties on center(Circle(A, F, G)), G, J we get distance(G, center(Circle(A, F, G))) == distance(J, center(Circle(A, F, G))), angle(G, J, center(Circle(A, F, G))) == angle(center(Circle(A, F, G)), G, J) mod 360
By sas_anti_congruence on F, center(Circle(A, F, G)), A, A, center(Circle(A, F, G)), F we get anti_congruent_triangles(A, F, center(Circle(A, F, G)), F, A, center(Circle(A, F, G)))
By isosceles_triangle_properties on center(Circle(A, F, G)), G, K we get distance(G, center(Circle(A, F, G))) == distance(K, center(Circle(A, F, G))), angle(G, K, center(Circle(A, F, G))) == angle(center(Circle(A, F, G)), G, K) mod 360
By internal_angle_bisector_definition_v0_r on M, J, M, projection(F, Line(J, M)) we get Line(J, projection(F, Line(J, M))) == internal_angle_bisector(M, projection(F, Line(J, M)), M)
By internal_angle_bisector_definition_v0_r on G, projection(F, Line(J, M)), G, F we get internal_angle_bisector(G, F, G) == Line(F, projection(F, Line(J, M)))
By sas_anti_congruence on A, center(Circle(A, F, G)), G, G, center(Circle(A, F, G)), A we get anti_congruent_triangles(A, G, center(Circle(A, F, G)), G, A, center(Circle(A, F, G)))
By internal_angle_bisector_definition_v0_r on F, projection(F, Line(J, M)), F, G we get internal_angle_bisector(F, G, F) == Line(G, projection(F, Line(J, M)))
By internal_angle_bisector_definition_v0_r on projection(F, Line(J, M)), F, projection(F, Line(J, M)), G we get Line(F, G) == internal_angle_bisector(projection(F, Line(J, M)), G, projection(F, Line(J, M)))
By internal_angle_bisector_definition_v0_r on projection(F, Line(J, M)), M, projection(F, Line(J, M)), J we get Line(J, M) == internal_angle_bisector(projection(F, Line(J, M)), J, projection(F, Line(J, M)))
By sas_anti_congruence on L, center(Circle(A, F, G)), G, G, center(Circle(A, F, G)), L we get anti_congruent_triangles(G, L, center(Circle(A, F, G)), L, G, center(Circle(A, F, G)))
By anti_similar_triangle_basic_properties on J, center(Circle(B, J, K)), M, M, center(Circle(B, J, K)), J we get angle(J, center(Circle(B, J, K)), M) == 0 - angle(M, center(Circle(B, J, K)), J) mod 360, angle(center(Circle(B, J, K)), M, J) == 0 - angle(center(Circle(B, J, K)), J, M) mod 360, angle(M, J, center(Circle(B, J, K))) == 0 - angle(J, M, center(Circle(B, J, K))) mod 360, log(distance(J, center(Circle(B, J, K)))) + log(distance(J, center(Circle(B, J, K)))) == log(distance(M, center(Circle(B, J, K)))) + log(distance(M, center(Circle(B, J, K)))), log(distance(J, center(Circle(B, J, K)))) + log(distance(J, M)) == log(distance(M, center(Circle(B, J, K)))) + log(distance(J, M)), log(distance(J, M)) + log(distance(J, center(Circle(B, J, K)))) == log(distance(J, M)) + log(distance(M, center(Circle(B, J, K))))
By sas_similarity on J, K, M, J, A, T we get similar_triangles(A, J, T, K, J, M)
By anti_similar_triangle_basic_properties on A, center(Circle(A, F, G)), L, L, center(Circle(A, F, G)), A we get angle(A, center(Circle(A, F, G)), L) == 0 - angle(L, center(Circle(A, F, G)), A) mod 360, angle(center(Circle(A, F, G)), L, A) == 0 - angle(center(Circle(A, F, G)), A, L) mod 360, angle(L, A, center(Circle(A, F, G))) == 0 - angle(A, L, center(Circle(A, F, G))) mod 360, log(distance(A, center(Circle(A, F, G)))) + log(distance(A, center(Circle(A, F, G)))) == log(distance(L, center(Circle(A, F, G)))) + log(distance(L, center(Circle(A, F, G)))), log(distance(A, center(Circle(A, F, G)))) + log(distance(A, L)) == log(distance(L, center(Circle(A, F, G)))) + log(distance(A, L)), log(distance(A, L)) + log(distance(A, center(Circle(A, F, G)))) == log(distance(A, L)) + log(distance(L, center(Circle(A, F, G))))
By sas_anti_congruence on J, M, S, J, K, A we get anti_congruent_triangles(A, J, K, S, J, M)
By sas_anti_congruence on G, center(Circle(A, F, G)), F, F, center(Circle(A, F, G)), G we get anti_congruent_triangles(F, G, center(Circle(A, F, G)), G, F, center(Circle(A, F, G)))
By sas_similarity on F, G, T, T, M, F we get similar_triangles(F, G, T, T, M, F)
By altitude_definition on center(Circle(C, J, L)), midpoint(L, M), F, Line(C, G) we get Line(C, G) == altitude(center(Circle(C, J, L)), F, midpoint(L, M))
By sas_similarity on S, B, J, G, L, J we get similar_triangles(B, J, S, L, J, G)
By anti_similar_triangle_basic_properties on J, K, center(Circle(A, F, G)), K, J, center(Circle(A, F, G)) we get angle(J, K, center(Circle(A, F, G))) == 0 - angle(K, J, center(Circle(A, F, G))) mod 360, angle(K, center(Circle(A, F, G)), J) == 0 - angle(J, center(Circle(A, F, G)), K) mod 360, angle(center(Circle(A, F, G)), J, K) == 0 - angle(center(Circle(A, F, G)), K, J) mod 360, log(distance(J, K)) + log(distance(J, center(Circle(A, F, G)))) == log(distance(J, K)) + log(distance(K, center(Circle(A, F, G)))), log(distance(J, center(Circle(A, F, G)))) + log(distance(J, center(Circle(A, F, G)))) == log(distance(K, center(Circle(A, F, G)))) + log(distance(K, center(Circle(A, F, G)))), log(distance(J, center(Circle(A, F, G)))) + log(distance(J, K)) == log(distance(K, center(Circle(A, F, G)))) + log(distance(J, K))
By concyclic_definition_1 on M, T, G, J we get Circle(G, J, T) == Circle(G, M, T)
By altitude_definition on L, center(Circle(A, F, G)), A, Line(K, L) we get Line(K, L) == altitude(L, A, center(Circle(A, F, G)))
By altitude_definition on A, G, midpoint(L, M), Line(A, G) we get Line(A, G) == altitude(A, G, midpoint(L, M))
By altitude_definition on T, C, center(Circle(C, J, L)), Line(A, G) we get Line(A, G) == altitude(T, C, center(Circle(C, J, L)))
By concyclic_definition_1 on K, A, S, M we get Circle(A, K, S) == Circle(A, M, S)
By anti_similar_triangle_basic_properties on center(Circle(B, J, K)), B, M, center(Circle(B, J, K)), M, B we get angle(center(Circle(B, J, K)), B, M) == 0 - angle(center(Circle(B, J, K)), M, B) mod 360, angle(B, M, center(Circle(B, J, K))) == 0 - angle(M, B, center(Circle(B, J, K))) mod 360, angle(M, center(Circle(B, J, K)), B) == 0 - angle(B, center(Circle(B, J, K)), M) mod 360, log(distance(B, center(Circle(B, J, K)))) + log(distance(B, M)) == log(distance(M, center(Circle(B, J, K)))) + log(distance(B, M)), log(distance(B, M)) + log(distance(B, center(Circle(B, J, K)))) == log(distance(B, M)) + log(distance(M, center(Circle(B, J, K)))), log(distance(B, center(Circle(B, J, K)))) + log(distance(B, center(Circle(B, J, K)))) == log(distance(M, center(Circle(B, J, K)))) + log(distance(M, center(Circle(B, J, K))))
By altitude_definition on A, G, C, Line(A, G) we get Line(A, G) == altitude(A, C, G)
By sas_anti_congruence on A, G, J, T, G, J we get anti_congruent_triangles(A, G, J, T, G, J)
By concyclic_definition_1 on J, T, B, A we get Circle(A, B, T) == Circle(B, J, T)
By altitude_definition on K, center(Circle(B, J, K)), J, Line(G, K) we get Line(G, K) == altitude(K, J, center(Circle(B, J, K)))
By concyclic_definition_1 on M, S, K, A we get Circle(A, K, S) == Circle(K, M, S)
By altitude_definition on A, B, J, Line(A, F) we get Line(A, F) == altitude(A, B, J)
By altitude_definition on G, center(Circle(B, J, K)), B, Line(G, K) we get Line(G, K) == altitude(G, B, center(Circle(B, J, K)))
By anti_similar_triangle_basic_properties on J, M, center(Circle(C, J, L)), M, J, center(Circle(C, J, L)) we get angle(J, M, center(Circle(C, J, L))) == 0 - angle(M, J, center(Circle(C, J, L))) mod 360, angle(M, center(Circle(C, J, L)), J) == 0 - angle(J, center(Circle(C, J, L)), M) mod 360, angle(center(Circle(C, J, L)), J, M) == 0 - angle(center(Circle(C, J, L)), M, J) mod 360, log(distance(J, M)) + log(distance(J, center(Circle(C, J, L)))) == log(distance(J, M)) + log(distance(M, center(Circle(C, J, L)))), log(distance(J, center(Circle(C, J, L)))) + log(distance(J, center(Circle(C, J, L)))) == log(distance(M, center(Circle(C, J, L)))) + log(distance(M, center(Circle(C, J, L)))), log(distance(J, center(Circle(C, J, L)))) + log(distance(J, M)) == log(distance(M, center(Circle(C, J, L)))) + log(distance(J, M))
By concyclic_definition_1 on G, T, M, J we get Circle(G, M, T) == Circle(J, M, T)
By concyclic_definition_1 on S, A, M, K we get Circle(A, K, M) == Circle(A, M, S)
By altitude_definition on A, midpoint(K, M), F, Line(A, F) we get Line(A, F) == altitude(A, F, midpoint(K, M))
By anti_similar_triangle_basic_properties on L, C, center(Circle(C, J, L)), C, L, center(Circle(C, J, L)) we get angle(L, C, center(Circle(C, J, L))) == 0 - angle(C, L, center(Circle(C, J, L))) mod 360, angle(C, center(Circle(C, J, L)), L) == 0 - angle(L, center(Circle(C, J, L)), C) mod 360, angle(center(Circle(C, J, L)), L, C) == 0 - angle(center(Circle(C, J, L)), C, L) mod 360, log(distance(C, L)) + log(distance(C, center(Circle(C, J, L)))) == log(distance(C, L)) + log(distance(L, center(Circle(C, J, L)))), log(distance(C, center(Circle(C, J, L)))) + log(distance(C, center(Circle(C, J, L)))) == log(distance(L, center(Circle(C, J, L)))) + log(distance(L, center(Circle(C, J, L)))), log(distance(C, center(Circle(C, J, L)))) + log(distance(C, L)) == log(distance(L, center(Circle(C, J, L)))) + log(distance(C, L))
By concyclic_definition_1 on T, A, L, M we get Circle(A, L, M) == Circle(A, L, T)
By altitude_definition on center(Circle(B, J, K)), A, F, Line(B, F) we get Line(B, F) == altitude(center(Circle(B, J, K)), A, F)
By concyclic_definition_1 on S, J, F, M we get Circle(F, J, M) == Circle(F, J, S)
By altitude_definition on L, center(Circle(C, J, L)), J, Line(F, L) we get Line(F, L) == altitude(L, J, center(Circle(C, J, L)))
By sas_congruence on S, F, G, G, M, S we get congruent_triangles(F, G, S, M, S, G)
By anti_similar_triangle_basic_properties on J, center(Circle(C, J, L)), L, L, center(Circle(C, J, L)), J we get angle(J, center(Circle(C, J, L)), L) == 0 - angle(L, center(Circle(C, J, L)), J) mod 360, angle(center(Circle(C, J, L)), L, J) == 0 - angle(center(Circle(C, J, L)), J, L) mod 360, angle(L, J, center(Circle(C, J, L))) == 0 - angle(J, L, center(Circle(C, J, L))) mod 360, log(distance(J, center(Circle(C, J, L)))) + log(distance(J, center(Circle(C, J, L)))) == log(distance(L, center(Circle(C, J, L)))) + log(distance(L, center(Circle(C, J, L)))), log(distance(J, center(Circle(C, J, L)))) + log(distance(J, L)) == log(distance(L, center(Circle(C, J, L)))) + log(distance(J, L)), log(distance(J, L)) + log(distance(J, center(Circle(C, J, L)))) == log(distance(J, L)) + log(distance(L, center(Circle(C, J, L))))
By sas_anti_congruence on T, G, J, A, G, J we get anti_congruent_triangles(A, G, J, T, G, J)
By sas_similarity on J, G, T, S, F, B we get similar_triangles(B, F, S, T, G, J)
By sas_congruence on A, K, J, T, M, J we get congruent_triangles(A, J, K, T, J, M)
By sas_anti_similarity on S, F, J, C, G, A we get anti_similar_triangles(A, C, G, J, S, F)
By concyclic_definition_1 on T, A, B, J we get Circle(A, B, J) == Circle(A, B, T)
By anti_similar_triangle_basic_properties on L, M, center(Circle(C, J, L)), M, L, center(Circle(C, J, L)) we get angle(L, M, center(Circle(C, J, L))) == 0 - angle(M, L, center(Circle(C, J, L))) mod 360, angle(M, center(Circle(C, J, L)), L) == 0 - angle(L, center(Circle(C, J, L)), M) mod 360, angle(center(Circle(C, J, L)), L, M) == 0 - angle(center(Circle(C, J, L)), M, L) mod 360, log(distance(L, M)) + log(distance(L, center(Circle(C, J, L)))) == log(distance(L, M)) + log(distance(M, center(Circle(C, J, L)))), log(distance(L, center(Circle(C, J, L)))) + log(distance(L, center(Circle(C, J, L)))) == log(distance(M, center(Circle(C, J, L)))) + log(distance(M, center(Circle(C, J, L)))), log(distance(L, center(Circle(C, J, L)))) + log(distance(L, M)) == log(distance(M, center(Circle(C, J, L)))) + log(distance(L, M))
By sas_anti_similarity on J, G, T, J, M, B we get anti_similar_triangles(B, J, M, T, J, G)
By sas_similarity on J, F, S, J, L, C we get similar_triangles(C, J, L, S, J, F)
By altitude_definition on center(Circle(C, J, L)), A, T, Line(C, G) we get Line(C, G) == altitude(center(Circle(C, J, L)), A, T)
By altitude_definition on L, center(Circle(C, J, L)), C, Line(F, L) we get Line(F, L) == altitude(L, C, center(Circle(C, J, L)))
By sas_congruence on S, M, J, A, L, J we get congruent_triangles(A, J, L, S, J, M)
By sas_similarity on C, L, J, S, F, J we get similar_triangles(C, J, L, S, J, F)
By sas_similarity on F, B, K, S, B, J we get similar_triangles(B, F, K, B, S, J)
By sas_congruence on M, F, A, A, G, M we get congruent_triangles(A, F, M, M, G, A)
By altitude_definition on center(Circle(C, J, L)), A, G, Line(C, G) we get Line(C, G) == altitude(center(Circle(C, J, L)), A, G)
By sas_similarity on A, L, J, S, M, J we get similar_triangles(A, J, L, S, J, M)
By sas_similarity on T, A, J, M, K, J we get similar_triangles(A, J, T, K, J, M)
By altitude_definition on T, J, C, Line(A, G) we get Line(A, G) == altitude(T, C, J)
By altitude_definition on T, C, midpoint(L, M), Line(A, G) we get Line(A, G) == altitude(T, C, midpoint(L, M))
By concyclic_definition_1 on S, J, A, C we get Circle(A, C, J) == Circle(A, J, S)
By sas_anti_similarity on J, C, T, J, M, F we get anti_similar_triangles(C, J, T, M, J, F)
By sas_anti_congruence on F, center(Circle(A, F, G)), K, A, center(Circle(A, F, G)), G we get anti_congruent_triangles(A, G, center(Circle(A, F, G)), F, K, center(Circle(A, F, G)))
By altitude_definition on center(Circle(B, J, K)), G, M, Line(B, F) we get Line(B, F) == altitude(center(Circle(B, J, K)), G, M)
By sas_similarity on S, M, G, G, F, S we get similar_triangles(F, G, S, M, S, G)
By sas_similarity on T, M, F, F, G, T we get similar_triangles(F, G, T, T, M, F)
By concyclic_definition_1 on A, L, T, M we get Circle(A, L, T) == Circle(L, M, T)
By altitude_definition on T, J, center(Circle(C, J, L)), Line(A, G) we get Line(A, G) == altitude(T, J, center(Circle(C, J, L)))
By sas_anti_similarity on A, B, J, S, B, J we get anti_similar_triangles(A, B, J, S, B, J)
By anti_similar_triangle_basic_properties on M, center(Circle(C, J, L)), C, C, center(Circle(C, J, L)), M we get angle(M, center(Circle(C, J, L)), C) == 0 - angle(C, center(Circle(C, J, L)), M) mod 360, angle(center(Circle(C, J, L)), C, M) == 0 - angle(center(Circle(C, J, L)), M, C) mod 360, angle(C, M, center(Circle(C, J, L))) == 0 - angle(M, C, center(Circle(C, J, L))) mod 360, log(distance(C, center(Circle(C, J, L)))) + log(distance(C, center(Circle(C, J, L)))) == log(distance(M, center(Circle(C, J, L)))) + log(distance(M, center(Circle(C, J, L)))), log(distance(C, center(Circle(C, J, L)))) + log(distance(C, M)) == log(distance(M, center(Circle(C, J, L)))) + log(distance(C, M)), log(distance(C, M)) + log(distance(C, center(Circle(C, J, L)))) == log(distance(C, M)) + log(distance(M, center(Circle(C, J, L))))
By altitude_definition on A, midpoint(K, M), B, Line(A, F) we get Line(A, F) == altitude(A, B, midpoint(K, M))
By altitude_definition on A, B, center(Circle(B, J, K)), Line(A, F) we get Line(A, F) == altitude(A, B, center(Circle(B, J, K)))
By sas_anti_similarity on S, B, J, G, M, J we get anti_similar_triangles(B, J, S, M, J, G)
By sas_congruence on F, center(Circle(A, F, G)), G, A, center(Circle(A, F, G)), L we get congruent_triangles(A, L, center(Circle(A, F, G)), F, G, center(Circle(A, F, G)))
By sas_anti_congruence on A, F, J, S, F, J we get anti_congruent_triangles(A, F, J, S, F, J)
By anti_similar_triangle_basic_properties on L, J, center(Circle(A, F, G)), J, L, center(Circle(A, F, G)) we get angle(L, J, center(Circle(A, F, G))) == 0 - angle(J, L, center(Circle(A, F, G))) mod 360, angle(J, center(Circle(A, F, G)), L) == 0 - angle(L, center(Circle(A, F, G)), J) mod 360, angle(center(Circle(A, F, G)), L, J) == 0 - angle(center(Circle(A, F, G)), J, L) mod 360, log(distance(J, L)) + log(distance(J, center(Circle(A, F, G)))) == log(distance(J, L)) + log(distance(L, center(Circle(A, F, G)))), log(distance(J, center(Circle(A, F, G)))) + log(distance(J, center(Circle(A, F, G)))) == log(distance(L, center(Circle(A, F, G)))) + log(distance(L, center(Circle(A, F, G)))), log(distance(J, center(Circle(A, F, G)))) + log(distance(J, L)) == log(distance(L, center(Circle(A, F, G)))) + log(distance(J, L))
By altitude_definition on midpoint(K, M), F, S, Line(B, F) we get Line(B, F) == altitude(midpoint(K, M), F, S)
By sas_congruence on A, L, J, S, M, J we get congruent_triangles(A, J, L, S, J, M)
By altitude_definition on G, J, center(Circle(B, J, K)), Line(G, K) we get Line(G, K) == altitude(G, J, center(Circle(B, J, K)))
By altitude_definition on A, midpoint(L, M), J, Line(A, G) we get Line(A, G) == altitude(A, J, midpoint(L, M))
By sas_anti_congruence on L, center(Circle(A, F, G)), A, F, center(Circle(A, F, G)), G we get anti_congruent_triangles(A, L, center(Circle(A, F, G)), G, F, center(Circle(A, F, G)))
By sas_anti_congruence on J, F, A, J, F, S we get anti_congruent_triangles(A, F, J, S, F, J)
By sas_anti_congruence on F, center(Circle(A, F, G)), G, L, center(Circle(A, F, G)), A we get anti_congruent_triangles(A, L, center(Circle(A, F, G)), G, F, center(Circle(A, F, G)))
By altitude_definition on L, center(Circle(A, F, G)), J, Line(K, L) we get Line(K, L) == altitude(L, J, center(Circle(A, F, G)))
By sas_similarity on F, M, T, T, G, F we get similar_triangles(F, G, T, T, M, F)
By altitude_definition on J, S, F, Line(B, F) we get Line(B, F) == altitude(J, F, S)
By sas_anti_congruence on K, center(Circle(A, F, G)), F, G, center(Circle(A, F, G)), A we get anti_congruent_triangles(A, G, center(Circle(A, F, G)), F, K, center(Circle(A, F, G)))
By altitude_definition on A, midpoint(L, M), C, Line(A, G) we get Line(A, G) == altitude(A, C, midpoint(L, M))
By concyclic_definition_1 on S, A, C, J we get Circle(A, C, J) == Circle(A, C, S)
By sas_similarity on L, C, G, J, C, T we get similar_triangles(C, G, L, C, T, J)
By sas_anti_congruence on A, center(Circle(A, F, G)), F, G, center(Circle(A, F, G)), L we get anti_congruent_triangles(A, F, center(Circle(A, F, G)), G, L, center(Circle(A, F, G)))
By sas_anti_similarity on S, M, J, A, K, J we get anti_similar_triangles(A, J, K, S, J, M)
By sas_anti_similarity on J, M, F, J, C, T we get anti_similar_triangles(C, J, T, M, J, F)
By altitude_definition on M, B, center(Circle(B, J, K)), Line(G, K) we get Line(G, K) == altitude(M, B, center(Circle(B, J, K)))
By altitude_definition on S, J, B, Line(A, F) we get Line(A, F) == altitude(S, B, J)
By concyclic_definition_1 on J, M, F, S we get Circle(F, J, M) == Circle(F, M, S)
By sas_anti_similarity on J, F, S, J, M, C we get anti_similar_triangles(C, J, M, S, J, F)
By sas_congruence on G, F, S, S, M, G we get congruent_triangles(F, G, S, M, S, G)
By sas_anti_congruence on T, M, J, A, L, J we get anti_congruent_triangles(A, J, L, T, J, M)
By altitude_definition on M, center(Circle(C, J, L)), C, Line(F, L) we get Line(F, L) == altitude(M, C, center(Circle(C, J, L)))
By altitude_definition on A, G, J, Line(A, G) we get Line(A, G) == altitude(A, G, J)
By sas_anti_similarity on T, C, J, A, C, J we get anti_similar_triangles(A, C, J, T, C, J)
By concyclic_definition_1 on M, J, G, T we get Circle(G, J, M) == Circle(G, J, T)
By sas_anti_similarity on J, K, A, J, M, S we get anti_similar_triangles(A, J, K, S, J, M)
By concyclic_definition_1 on J, G, M, T we get Circle(G, J, M) == Circle(G, M, T)
By altitude_definition on S, F, midpoint(K, M), Line(A, F) we get Line(A, F) == altitude(S, F, midpoint(K, M))
By sas_congruence on L, center(Circle(A, F, G)), A, G, center(Circle(A, F, G)), F we get congruent_triangles(A, L, center(Circle(A, F, G)), F, G, center(Circle(A, F, G)))
By anti_similar_triangle_basic_properties on center(Circle(B, J, K)), B, K, center(Circle(B, J, K)), K, B we get angle(center(Circle(B, J, K)), B, K) == 0 - angle(center(Circle(B, J, K)), K, B) mod 360, angle(B, K, center(Circle(B, J, K))) == 0 - angle(K, B, center(Circle(B, J, K))) mod 360, angle(K, center(Circle(B, J, K)), B) == 0 - angle(B, center(Circle(B, J, K)), K) mod 360, log(distance(B, center(Circle(B, J, K)))) + log(distance(B, K)) == log(distance(K, center(Circle(B, J, K)))) + log(distance(B, K)), log(distance(B, K)) + log(distance(B, center(Circle(B, J, K)))) == log(distance(B, K)) + log(distance(K, center(Circle(B, J, K)))), log(distance(B, center(Circle(B, J, K)))) + log(distance(B, center(Circle(B, J, K)))) == log(distance(K, center(Circle(B, J, K)))) + log(distance(K, center(Circle(B, J, K))))
By concyclic_definition_1 on S, K, A, M we get Circle(A, K, M) == Circle(A, K, S)
By anti_similar_triangle_basic_properties on L, K, center(Circle(A, F, G)), K, L, center(Circle(A, F, G)) we get angle(L, K, center(Circle(A, F, G))) == 0 - angle(K, L, center(Circle(A, F, G))) mod 360, angle(K, center(Circle(A, F, G)), L) == 0 - angle(L, center(Circle(A, F, G)), K) mod 360, angle(center(Circle(A, F, G)), L, K) == 0 - angle(center(Circle(A, F, G)), K, L) mod 360, log(distance(K, L)) + log(distance(K, center(Circle(A, F, G)))) == log(distance(K, L)) + log(distance(L, center(Circle(A, F, G)))), log(distance(K, center(Circle(A, F, G)))) + log(distance(K, center(Circle(A, F, G)))) == log(distance(L, center(Circle(A, F, G)))) + log(distance(L, center(Circle(A, F, G)))), log(distance(K, center(Circle(A, F, G)))) + log(distance(K, L)) == log(distance(L, center(Circle(A, F, G)))) + log(distance(K, L))
By altitude_definition on A, C, center(Circle(C, J, L)), Line(A, G) we get Line(A, G) == altitude(A, C, center(Circle(C, J, L)))
By sas_anti_similarity on J, B, S, J, B, A we get anti_similar_triangles(A, B, J, S, B, J)
By sas_anti_similarity on S, B, J, F, B, M we get anti_similar_triangles(B, F, M, B, S, J)
By sas_similarity on M, K, J, T, A, J we get similar_triangles(A, J, T, K, J, M)
By sas_congruence on A, center(Circle(A, F, G)), F, L, center(Circle(A, F, G)), G we get congruent_triangles(A, F, center(Circle(A, F, G)), L, G, center(Circle(A, F, G)))
By sas_similarity on J, K, B, J, G, T we get similar_triangles(B, J, K, T, J, G)
By altitude_definition on F, center(Circle(C, J, L)), J, Line(F, L) we get Line(F, L) == altitude(F, J, center(Circle(C, J, L)))
By concyclic_definition_1 on L, T, M, A we get Circle(A, M, T) == Circle(L, M, T)
By sas_anti_similarity on J, M, C, J, F, S we get anti_similar_triangles(C, J, M, S, J, F)
By altitude_definition on A, J, center(Circle(B, J, K)), Line(A, F) we get Line(A, F) == altitude(A, J, center(Circle(B, J, K)))
By sas_congruence on T, M, J, A, K, J we get congruent_triangles(A, J, K, T, J, M)
By concyclic_definition_1 on F, S, J, M we get Circle(F, J, S) == Circle(J, M, S)
By concyclic_definition_1 on A, J, B, T we get Circle(A, B, J) == Circle(B, J, T)
By concyclic_definition_1 on M, T, A, L we get Circle(A, L, T) == Circle(A, M, T)
By altitude_definition on midpoint(K, M), S, A, Line(B, F) we get Line(B, F) == altitude(midpoint(K, M), A, S)
By parallelogram_parallel_side_definition on F, G, midpoint(S, T), S we get parallelogram(F, G, midpoint(S, T), S)
By altitude_definition on T, J, midpoint(L, M), Line(A, G) we get Line(A, G) == altitude(T, J, midpoint(L, M))
By sas_anti_similarity on J, B, S, J, M, G we get anti_similar_triangles(B, J, S, M, J, G)
By altitude_definition on center(Circle(B, J, K)), midpoint(K, M), M, Line(B, F) we get Line(B, F) == altitude(center(Circle(B, J, K)), M, midpoint(K, M))
By concyclic_definition_1 on A, S, J, C we get Circle(A, J, S) == Circle(C, J, S)
By concyclic_definition_1 on J, S, C, A we get Circle(A, C, S) == Circle(C, J, S)
By sas_congruence on A, G, M, M, F, A we get congruent_triangles(A, F, M, M, G, A)
By sas_anti_congruence on J, M, T, J, L, A we get anti_congruent_triangles(A, J, L, T, J, M)
By altitude_definition on A, J, center(Circle(C, J, L)), Line(A, G) we get Line(A, G) == altitude(A, J, center(Circle(C, J, L)))
By concyclic_definition_1 on K, S, M, A we get Circle(A, M, S) == Circle(K, M, S)
By altitude_definition on J, A, S, Line(B, F) we get Line(B, F) == altitude(J, A, S)
By sas_similarity on T, M, J, A, K, J we get similar_triangles(A, J, K, T, J, M)
By altitude_definition on B, S, A, Line(B, F) we get Line(B, F) == altitude(B, A, S)
By sas_anti_congruence on G, center(Circle(A, F, G)), F, K, center(Circle(A, F, G)), A we get anti_congruent_triangles(A, K, center(Circle(A, F, G)), F, G, center(Circle(A, F, G)))
By altitude_definition on center(Circle(C, J, L)), midpoint(L, M), M, Line(C, G) we get Line(C, G) == altitude(center(Circle(C, J, L)), M, midpoint(L, M))
By altitude_definition on A, J, midpoint(K, M), Line(A, F) we get Line(A, F) == altitude(A, J, midpoint(K, M))
By altitude_definition on center(Circle(B, J, K)), F, S, Line(B, F) we get Line(B, F) == altitude(center(Circle(B, J, K)), F, S)
By parallelogram_parallel_side_definition on S, midpoint(S, T), G, F we get parallelogram(F, G, midpoint(S, T), S)
By anti_similar_triangle_basic_properties on center(Circle(B, J, K)), M, K, center(Circle(B, J, K)), K, M we get angle(center(Circle(B, J, K)), M, K) == 0 - angle(center(Circle(B, J, K)), K, M) mod 360, angle(M, K, center(Circle(B, J, K))) == 0 - angle(K, M, center(Circle(B, J, K))) mod 360, angle(K, center(Circle(B, J, K)), M) == 0 - angle(M, center(Circle(B, J, K)), K) mod 360, log(distance(K, center(Circle(B, J, K)))) + log(distance(K, M)) == log(distance(M, center(Circle(B, J, K)))) + log(distance(K, M)), log(distance(K, M)) + log(distance(K, center(Circle(B, J, K)))) == log(distance(K, M)) + log(distance(M, center(Circle(B, J, K)))), log(distance(K, center(Circle(B, J, K)))) + log(distance(K, center(Circle(B, J, K)))) == log(distance(M, center(Circle(B, J, K)))) + log(distance(M, center(Circle(B, J, K))))
By sas_congruence on G, center(Circle(A, F, G)), F, L, center(Circle(A, F, G)), A we get congruent_triangles(A, L, center(Circle(A, F, G)), F, G, center(Circle(A, F, G)))
By parallelogram_parallel_side_definition on G, F, S, midpoint(S, T) we get parallelogram(F, G, midpoint(S, T), S)
By altitude_definition on midpoint(L, M), G, A, Line(C, G) we get Line(C, G) == altitude(midpoint(L, M), A, G)
By altitude_definition on K, A, center(Circle(A, F, G)), Line(K, L) we get Line(K, L) == altitude(K, A, center(Circle(A, F, G)))
By sas_anti_similarity on S, B, J, A, B, J we get anti_similar_triangles(A, B, J, S, B, J)
By altitude_definition on A, J, C, Line(A, G) we get Line(A, G) == altitude(A, C, J)
By isosceles_triangle_properties on center(Circle(A, F, G)), F, G we get distance(F, center(Circle(A, F, G))) == distance(G, center(Circle(A, F, G))), angle(F, G, center(Circle(A, F, G))) == angle(center(Circle(A, F, G)), F, G) mod 360
By altitude_definition on center(Circle(C, J, L)), M, F, Line(C, G) we get Line(C, G) == altitude(center(Circle(C, J, L)), F, M)
By concyclic_definition_1 on T, J, A, B we get Circle(A, B, J) == Circle(A, J, T)
By sas_similarity on J, F, S, T, G, C we get similar_triangles(C, G, T, S, F, J)
By altitude_definition on S, F, B, Line(A, F) we get Line(A, F) == altitude(S, B, F)
By altitude_definition on J, G, T, Line(C, G) we get Line(C, G) == altitude(J, G, T)
By altitude_definition on B, F, A, Line(B, F) we get Line(B, F) == altitude(B, A, F)
By altitude_definition on C, A, T, Line(C, G) we get Line(C, G) == altitude(C, A, T)
By sas_anti_congruence on L, center(Circle(A, F, G)), G, F, center(Circle(A, F, G)), A we get anti_congruent_triangles(A, F, center(Circle(A, F, G)), G, L, center(Circle(A, F, G)))
By sas_anti_similarity on J, C, A, J, C, T we get anti_similar_triangles(A, C, J, T, C, J)
By altitude_definition on center(Circle(C, J, L)), T, G, Line(C, G) we get Line(C, G) == altitude(center(Circle(C, J, L)), G, T)
By sas_similarity on J, A, T, J, K, M we get similar_triangles(A, J, T, K, J, M)
By anti_similar_triangle_basic_properties on A, center(Circle(A, F, G)), K, K, center(Circle(A, F, G)), A we get angle(A, center(Circle(A, F, G)), K) == 0 - angle(K, center(Circle(A, F, G)), A) mod 360, angle(center(Circle(A, F, G)), K, A) == 0 - angle(center(Circle(A, F, G)), A, K) mod 360, angle(K, A, center(Circle(A, F, G))) == 0 - angle(A, K, center(Circle(A, F, G))) mod 360, log(distance(A, center(Circle(A, F, G)))) + log(distance(A, center(Circle(A, F, G)))) == log(distance(K, center(Circle(A, F, G)))) + log(distance(K, center(Circle(A, F, G)))), log(distance(A, center(Circle(A, F, G)))) + log(distance(A, K)) == log(distance(K, center(Circle(A, F, G)))) + log(distance(A, K)), log(distance(A, K)) + log(distance(A, center(Circle(A, F, G)))) == log(distance(A, K)) + log(distance(K, center(Circle(A, F, G))))
By altitude_definition on J, F, A, Line(B, F) we get Line(B, F) == altitude(J, A, F)
By perpendicular_bisector_definition on T, S, Line(J, M) we get Line(J, M) == perpendicular_bisector(S, T)
By altitude_definition on M, J, center(Circle(B, J, K)), Line(G, K) we get Line(G, K) == altitude(M, J, center(Circle(B, J, K)))
By sas_similarity on J, L, G, J, B, S we get similar_triangles(B, J, S, L, J, G)
By sas_anti_similarity on J, M, G, J, B, S we get anti_similar_triangles(B, J, S, M, J, G)
By sas_similarity on J, M, S, J, L, A we get similar_triangles(A, J, L, S, J, M)
By concyclic_definition_1 on L, M, A, T we get Circle(A, L, M) == Circle(A, M, T)
By altitude_definition on center(Circle(B, J, K)), S, A, Line(B, F) we get Line(B, F) == altitude(center(Circle(B, J, K)), A, S)
By sas_anti_similarity on J, A, T, J, M, K we get anti_similar_triangles(A, J, T, M, J, K)
By sas_similarity on J, L, C, J, F, S we get similar_triangles(C, J, L, S, J, F)
By anti_similar_triangle_basic_properties on center(Circle(B, J, K)), J, K, center(Circle(B, J, K)), K, J we get angle(center(Circle(B, J, K)), J, K) == 0 - angle(center(Circle(B, J, K)), K, J) mod 360, angle(J, K, center(Circle(B, J, K))) == 0 - angle(K, J, center(Circle(B, J, K))) mod 360, angle(K, center(Circle(B, J, K)), J) == 0 - angle(J, center(Circle(B, J, K)), K) mod 360, log(distance(J, center(Circle(B, J, K)))) + log(distance(J, K)) == log(distance(K, center(Circle(B, J, K)))) + log(distance(J, K)), log(distance(J, K)) + log(distance(J, center(Circle(B, J, K)))) == log(distance(J, K)) + log(distance(K, center(Circle(B, J, K)))), log(distance(J, center(Circle(B, J, K)))) + log(distance(J, center(Circle(B, J, K)))) == log(distance(K, center(Circle(B, J, K)))) + log(distance(K, center(Circle(B, J, K))))
By sas_similarity on J, B, S, K, B, F we get similar_triangles(B, F, K, B, S, J)
By sas_anti_congruence on A, center(Circle(A, F, G)), G, F, center(Circle(A, F, G)), K we get anti_congruent_triangles(A, G, center(Circle(A, F, G)), F, K, center(Circle(A, F, G)))
By altitude_definition on S, midpoint(K, M), B, Line(A, F) we get Line(A, F) == altitude(S, B, midpoint(K, M))
By altitude_definition on center(Circle(A, F, G)), L, midpoint(K, L), Line(A, J) we get Line(A, J) == altitude(center(Circle(A, F, G)), L, midpoint(K, L))
By sas_anti_similarity on J, B, A, J, B, S we get anti_similar_triangles(A, B, J, S, B, J)
By altitude_definition on center(Circle(B, J, K)), midpoint(K, M), G, Line(B, F) we get Line(B, F) == altitude(center(Circle(B, J, K)), G, midpoint(K, M))
By sas_similarity on J, C, T, L, C, G we get similar_triangles(C, G, L, C, T, J)
By sas_anti_similarity on J, A, S, J, M, L we get anti_similar_triangles(A, J, S, M, J, L)
By sas_anti_congruence on J, C, A, J, C, T we get anti_congruent_triangles(A, C, J, T, C, J)
By sas_congruence on T, G, F, F, M, T we get congruent_triangles(F, G, T, T, M, F)
By sas_similarity on S, F, J, C, L, J we get similar_triangles(C, J, L, S, J, F)
By sas_similarity on S, B, J, F, B, K we get similar_triangles(B, F, K, B, S, J)
By sas_similarity on M, G, A, A, F, M we get similar_triangles(A, F, M, M, G, A)
By altitude_definition on midpoint(L, M), G, T, Line(C, G) we get Line(C, G) == altitude(midpoint(L, M), G, T)
By altitude_definition on A, F, B, Line(A, F) we get Line(A, F) == altitude(A, B, F)
By concyclic_definition_1 on A, M, K, S we get Circle(A, K, M) == Circle(K, M, S)
By altitude_definition on S, J, midpoint(K, M), Line(A, F) we get Line(A, F) == altitude(S, J, midpoint(K, M))
By sas_anti_similarity on J, G, T, J, G, A we get anti_similar_triangles(A, G, J, T, G, J)
By sas_similarity on A, F, M, M, G, A we get similar_triangles(A, F, M, M, G, A)
By concyclic_definition_1 on J, S, F, M we get Circle(F, J, S) == Circle(F, M, S)
By sas_anti_congruence on J, K, A, J, M, S we get anti_congruent_triangles(A, J, K, S, J, M)
By concyclic_definition_1 on J, A, S, C we get Circle(A, C, S) == Circle(A, J, S)
By sas_anti_similarity on T, C, J, F, M, J we get anti_similar_triangles(C, J, T, M, J, F)
By sas_anti_similarity on G, C, M, T, C, J we get anti_similar_triangles(C, G, M, C, T, J)
By sas_congruence on A, center(Circle(A, F, G)), K, G, center(Circle(A, F, G)), F we get congruent_triangles(A, K, center(Circle(A, F, G)), G, F, center(Circle(A, F, G)))
By sas_anti_similarity on S, A, J, L, M, J we get anti_similar_triangles(A, J, S, M, J, L)
By sas_similarity on G, C, L, T, C, J we get similar_triangles(C, G, L, C, T, J)
By sas_congruence on J, L, A, J, M, S we get congruent_triangles(A, J, L, S, J, M)
By sas_anti_similarity on A, C, J, T, C, J we get anti_similar_triangles(A, C, J, T, C, J)
By sas_similarity on C, G, T, S, F, J we get similar_triangles(C, G, T, S, F, J)
By sas_congruence on G, center(Circle(A, F, G)), F, A, center(Circle(A, F, G)), K we get congruent_triangles(A, K, center(Circle(A, F, G)), G, F, center(Circle(A, F, G)))
By sas_similarity on J, M, T, J, K, A we get similar_triangles(A, J, K, T, J, M)
By sas_congruence on F, center(Circle(A, F, G)), K, G, center(Circle(A, F, G)), A we get congruent_triangles(A, G, center(Circle(A, F, G)), K, F, center(Circle(A, F, G)))
By sas_anti_congruence on J, C, T, J, C, A we get anti_congruent_triangles(A, C, J, T, C, J)
By sas_anti_similarity on F, B, M, S, B, J we get anti_similar_triangles(B, F, M, B, S, J)
By sas_anti_similarity on T, G, J, B, M, J we get anti_similar_triangles(B, J, M, T, J, G)
By concyclic_definition_1 on A, L, M, T we get Circle(A, L, M) == Circle(L, M, T)
By sas_anti_similarity on J, G, T, A, F, B we get anti_similar_triangles(A, B, F, J, T, G)
By sas_similarity on J, B, S, J, L, G we get similar_triangles(B, J, S, L, J, G)
By parallelogram_parallel_side_definition on F, G, T, midpoint(S, T) we get parallelogram(F, G, T, midpoint(S, T))
By sas_anti_congruence on S, B, J, A, B, J we get anti_congruent_triangles(A, B, J, S, B, J)
By sas_anti_congruence on J, G, T, J, G, A we get anti_congruent_triangles(A, G, J, T, G, J)
By sas_anti_congruence on J, B, S, J, B, A we get anti_congruent_triangles(A, B, J, S, B, J)
By sas_anti_congruence on F, center(Circle(A, F, G)), G, A, center(Circle(A, F, G)), K we get anti_congruent_triangles(A, K, center(Circle(A, F, G)), F, G, center(Circle(A, F, G)))
By sas_anti_congruence on J, G, A, J, G, T we get anti_congruent_triangles(A, G, J, T, G, J)
By sas_congruence on A, center(Circle(A, F, G)), G, K, center(Circle(A, F, G)), F we get congruent_triangles(A, G, center(Circle(A, F, G)), K, F, center(Circle(A, F, G)))
By sas_anti_similarity on J, M, B, J, G, T we get anti_similar_triangles(B, J, M, T, J, G)
By concyclic_definition_1 on S, M, J, F we get Circle(F, J, M) == Circle(J, M, S)
By sas_congruence on K, center(Circle(A, F, G)), F, A, center(Circle(A, F, G)), G we get congruent_triangles(A, G, center(Circle(A, F, G)), K, F, center(Circle(A, F, G)))
By altitude_definition on C, A, G, Line(C, G) we get Line(C, G) == altitude(C, A, G)
By sas_anti_congruence on F, center(Circle(A, F, G)), G, G, center(Circle(A, F, G)), F we get anti_congruent_triangles(F, G, center(Circle(A, F, G)), G, F, center(Circle(A, F, G)))
By concyclic_definition_1 on J, S, M, F we get Circle(F, M, S) == Circle(J, M, S)
By altitude_definition on T, G, midpoint(L, M), Line(A, G) we get Line(A, G) == altitude(T, G, midpoint(L, M))
By concyclic_definition_1 on B, T, J, A we get Circle(A, J, T) == Circle(B, J, T)
By sas_congruence on A, F, M, M, G, A we get congruent_triangles(A, F, M, M, G, A)
By sas_anti_similarity on A, G, J, T, G, J we get anti_similar_triangles(A, G, J, T, G, J)
By sas_anti_congruence on A, C, J, T, C, J we get anti_congruent_triangles(A, C, J, T, C, J)
By sas_similarity on J, G, T, J, K, B we get similar_triangles(B, J, K, T, J, G)
By parallelogram_parallel_side_definition on G, F, midpoint(S, T), T we get parallelogram(F, G, T, midpoint(S, T))
By altitude_definition on J, G, A, Line(C, G) we get Line(C, G) == altitude(J, A, G)
By sas_anti_similarity on J, C, T, M, C, G we get anti_similar_triangles(C, G, M, C, T, J)
By sas_anti_similarity on J, M, T, J, L, A we get anti_similar_triangles(A, J, L, T, J, M)
By sas_anti_similarity on J, B, S, M, B, F we get anti_similar_triangles(B, F, M, B, S, J)
By altitude_definition on S, center(Circle(B, J, K)), J, Line(A, F) we get Line(A, F) == altitude(S, J, center(Circle(B, J, K)))
By sas_congruence on J, K, A, J, M, T we get congruent_triangles(A, J, K, T, J, M)
By concyclic_definition_1 on J, A, T, B we get Circle(A, B, T) == Circle(A, J, T)
By sas_similarity on J, A, S, J, L, M we get similar_triangles(A, J, S, L, J, M)
By altitude_definition on T, J, G, Line(A, G) we get Line(A, G) == altitude(T, G, J)
By sas_anti_similarity on J, L, A, J, M, T we get anti_similar_triangles(A, J, L, T, J, M)
By sas_anti_similarity on S, F, J, A, F, J we get anti_similar_triangles(A, F, J, S, F, J)
By sas_similarity on J, L, M, J, A, S we get similar_triangles(A, J, S, L, J, M)
By altitude_definition on midpoint(L, M), A, T, Line(C, G) we get Line(C, G) == altitude(midpoint(L, M), A, T)
By sas_anti_similarity on T, G, J, A, G, J we get anti_similar_triangles(A, G, J, T, G, J)
By sas_anti_similarity on K, M, J, T, A, J we get anti_similar_triangles(A, J, T, M, J, K)
By altitude_definition on center(Circle(B, J, K)), K, midpoint(K, M), Line(B, F) we get Line(B, F) == altitude(center(Circle(B, J, K)), K, midpoint(K, M))
By sas_similarity on J, K, A, J, M, T we get similar_triangles(A, J, K, T, J, M)
By sas_similarity on A, K, J, T, M, J we get similar_triangles(A, J, K, T, J, M)
By sas_similarity on S, M, J, A, L, J we get similar_triangles(A, J, L, S, J, M)
By sas_anti_similarity on G, M, J, S, B, J we get anti_similar_triangles(B, J, S, M, J, G)
By altitude_definition on C, T, G, Line(C, G) we get Line(C, G) == altitude(C, G, T)
By sas_similarity on B, K, J, T, G, J we get similar_triangles(B, J, K, T, J, G)
By concyclic_definition_1 on S, J, C, A we get Circle(A, C, J) == Circle(C, J, S)
By parallelogram_parallel_side_definition on T, midpoint(S, T), F, G we get parallelogram(F, G, T, midpoint(S, T))
By sas_similarity on G, M, S, S, F, G we get similar_triangles(F, G, S, M, S, G)
By sas_similarity on S, F, G, G, M, S we get similar_triangles(F, G, S, M, S, G)
By concyclic_definition_1 on G, T, J, M we get Circle(G, J, T) == Circle(J, M, T)
By sas_anti_congruence on T, C, J, A, C, J we get anti_congruent_triangles(A, C, J, T, C, J)
By sas_similarity on B, F, S, T, G, J we get similar_triangles(B, F, S, T, G, J)
By sas_anti_similarity on J, M, K, J, A, T we get anti_similar_triangles(A, J, T, M, J, K)
By altitude_definition on S, center(Circle(B, J, K)), B, Line(A, F) we get Line(A, F) == altitude(S, B, center(Circle(B, J, K)))
By sas_similarity on T, C, J, F, K, J we get similar_triangles(C, J, T, K, J, F)
By sas_similarity on A, G, M, M, F, A we get similar_triangles(A, F, M, M, G, A)
By sas_anti_congruence on A, center(Circle(A, F, G)), K, F, center(Circle(A, F, G)), G we get anti_congruent_triangles(A, K, center(Circle(A, F, G)), F, G, center(Circle(A, F, G)))
By sas_anti_similarity on J, F, A, J, F, S we get anti_similar_triangles(A, F, J, S, F, J)
By altitude_definition on J, T, A, Line(C, G) we get Line(C, G) == altitude(J, A, T)
By sas_anti_similarity on M, B, F, J, B, S we get anti_similar_triangles(B, F, M, B, S, J)
By altitude_definition on T, C, G, Line(A, G) we get Line(A, G) == altitude(T, C, G)
By sas_anti_similarity on A, F, B, J, G, T we get anti_similar_triangles(A, B, F, J, T, G)
By sas_congruence on G, center(Circle(A, F, G)), L, F, center(Circle(A, F, G)), A we get congruent_triangles(A, F, center(Circle(A, F, G)), L, G, center(Circle(A, F, G)))
By sas_congruence on L, center(Circle(A, F, G)), G, A, center(Circle(A, F, G)), F we get congruent_triangles(A, F, center(Circle(A, F, G)), L, G, center(Circle(A, F, G)))
By sas_similarity on T, G, J, B, K, J we get similar_triangles(B, J, K, T, J, G)
By sas_anti_similarity on T, G, J, B, F, A we get anti_similar_triangles(A, B, F, J, T, G)
By sas_similarity on S, A, J, M, L, J we get similar_triangles(A, J, S, L, J, M)
By altitude_definition on A, J, F, Line(A, F) we get Line(A, F) == altitude(A, F, J)
By sas_congruence on F, center(Circle(A, F, G)), A, G, center(Circle(A, F, G)), L we get congruent_triangles(A, F, center(Circle(A, F, G)), L, G, center(Circle(A, F, G)))
By sas_anti_congruence on G, center(Circle(A, F, G)), A, K, center(Circle(A, F, G)), F we get anti_congruent_triangles(A, G, center(Circle(A, F, G)), F, K, center(Circle(A, F, G)))
By sas_anti_similarity on L, M, J, S, A, J we get anti_similar_triangles(A, J, S, M, J, L)
By concyclic_definition_1 on T, M, J, G we get Circle(G, J, M) == Circle(J, M, T)
By sas_anti_similarity on A, F, J, S, F, J we get anti_similar_triangles(A, F, J, S, F, J)
By sas_anti_congruence on J, L, A, J, M, T we get anti_congruent_triangles(A, J, L, T, J, M)
By altitude_definition on center(Circle(C, J, L)), midpoint(L, M), L, Line(C, G) we get Line(C, G) == altitude(center(Circle(C, J, L)), L, midpoint(L, M))
By sas_anti_congruence on A, center(Circle(A, F, G)), L, G, center(Circle(A, F, G)), F we get anti_congruent_triangles(A, L, center(Circle(A, F, G)), G, F, center(Circle(A, F, G)))
By altitude_definition on K, center(Circle(B, J, K)), B, Line(G, K) we get Line(G, K) == altitude(K, B, center(Circle(B, J, K)))
By sas_anti_similarity on B, M, J, T, G, J we get anti_similar_triangles(B, J, M, T, J, G)
By sas_anti_congruence on A, K, J, S, M, J we get anti_congruent_triangles(A, J, K, S, J, M)
By sas_congruence on G, center(Circle(A, F, G)), A, F, center(Circle(A, F, G)), K we get congruent_triangles(A, G, center(Circle(A, F, G)), K, F, center(Circle(A, F, G)))
By sas_similarity on F, K, J, T, C, J we get similar_triangles(C, J, T, K, J, F)
By sas_congruence on A, center(Circle(A, F, G)), L, F, center(Circle(A, F, G)), G we get congruent_triangles(A, L, center(Circle(A, F, G)), F, G, center(Circle(A, F, G)))
By altitude_definition on M, J, center(Circle(C, J, L)), Line(F, L) we get Line(F, L) == altitude(M, J, center(Circle(C, J, L)))
By sas_congruence on J, M, S, J, L, A we get congruent_triangles(A, J, L, S, J, M)
By sas_congruence on F, M, T, T, G, F we get congruent_triangles(F, G, T, T, M, F)
By sas_anti_similarity on J, F, S, A, G, C we get anti_similar_triangles(A, C, G, J, S, F)
By sas_congruence on F, center(Circle(A, F, G)), G, K, center(Circle(A, F, G)), A we get congruent_triangles(A, K, center(Circle(A, F, G)), G, F, center(Circle(A, F, G)))
By sas_similarity on J, C, T, J, K, F we get similar_triangles(C, J, T, K, J, F)
By sas_anti_congruence on G, center(Circle(A, F, G)), F, A, center(Circle(A, F, G)), L we get anti_congruent_triangles(A, L, center(Circle(A, F, G)), G, F, center(Circle(A, F, G)))
By sas_similarity on T, G, C, J, F, S we get similar_triangles(C, G, T, S, F, J)
By sas_anti_similarity on A, G, C, J, F, S we get anti_similar_triangles(A, C, G, J, S, F)
By sas_congruence on G, M, S, S, F, G we get congruent_triangles(F, G, S, M, S, G)
By sas_anti_congruence on F, center(Circle(A, F, G)), A, L, center(Circle(A, F, G)), G we get anti_congruent_triangles(A, F, center(Circle(A, F, G)), G, L, center(Circle(A, F, G)))
By sas_anti_similarity on F, M, J, T, C, J we get anti_similar_triangles(C, J, T, M, J, F)
By altitude_definition on F, C, center(Circle(C, J, L)), Line(F, L) we get Line(F, L) == altitude(F, C, center(Circle(C, J, L)))
By sas_congruence on F, G, T, T, M, F we get congruent_triangles(F, G, T, T, M, F)
By altitude_definition on B, F, S, Line(B, F) we get Line(B, F) == altitude(B, F, S)
By sas_similarity on S, F, J, C, G, T we get similar_triangles(C, G, T, S, F, J)
By sas_anti_similarity on M, C, G, J, C, T we get anti_similar_triangles(C, G, M, C, T, J)
By sas_anti_similarity on A, L, J, T, M, J we get anti_similar_triangles(A, J, L, T, J, M)
By sas_congruence on S, M, G, G, F, S we get congruent_triangles(F, G, S, M, S, G)
By sas_anti_similarity on T, M, J, A, L, J we get anti_similar_triangles(A, J, L, T, J, M)
By altitude_definition on center(Circle(A, F, G)), K, midpoint(K, L), Line(A, J) we get Line(A, J) == altitude(center(Circle(A, F, G)), K, midpoint(K, L))
By sas_anti_similarity on J, G, A, J, G, T we get anti_similar_triangles(A, G, J, T, G, J)
By altitude_definition on K, center(Circle(A, F, G)), J, Line(K, L) we get Line(K, L) == altitude(K, J, center(Circle(A, F, G)))
By parallelogram_parallel_side_definition on midpoint(S, T), S, F, G we get parallelogram(F, G, midpoint(S, T), S)
By sas_anti_similarity on S, F, J, C, M, J we get anti_similar_triangles(C, J, M, S, J, F)
By sas_anti_similarity on J, F, S, J, F, A we get anti_similar_triangles(A, F, J, S, F, J)
By sas_similarity on M, F, A, A, G, M we get similar_triangles(A, F, M, M, G, A)
By altitude_definition on midpoint(K, M), A, F, Line(B, F) we get Line(B, F) == altitude(midpoint(K, M), A, F)
By sas_similarity on T, C, J, G, C, L we get similar_triangles(C, G, L, C, T, J)
By sas_similarity on T, G, J, B, F, S we get similar_triangles(B, F, S, T, G, J)
By sas_anti_congruence on A, B, J, S, B, J we get anti_congruent_triangles(A, B, J, S, B, J)
By altitude_definition on S, F, J, Line(A, F) we get Line(A, F) == altitude(S, F, J)
By sas_similarity on G, F, S, S, M, G we get similar_triangles(F, G, S, M, S, G)
By sas_anti_similarity on T, A, J, K, M, J we get anti_similar_triangles(A, J, T, M, J, K)
By sas_similarity on J, K, F, J, C, T we get similar_triangles(C, J, T, K, J, F)
By sas_anti_congruence on K, center(Circle(A, F, G)), A, G, center(Circle(A, F, G)), F we get anti_congruent_triangles(A, K, center(Circle(A, F, G)), F, G, center(Circle(A, F, G)))
By sas_anti_similarity on J, M, S, J, K, A we get anti_similar_triangles(A, J, K, S, J, M)
By sas_anti_similarity on B, F, A, T, G, J we get anti_similar_triangles(A, B, F, J, T, G)
By sas_anti_similarity on C, M, J, S, F, J we get anti_similar_triangles(C, J, M, S, J, F)
By sas_anti_similarity on A, K, J, S, M, J we get anti_similar_triangles(A, J, K, S, J, M)
By parallelogram_parallel_side_definition on midpoint(S, T), T, G, F we get parallelogram(F, G, T, midpoint(S, T))
By sas_anti_congruence on S, M, J, A, K, J we get anti_congruent_triangles(A, J, K, S, J, M)
By sas_anti_similarity on T, C, J, G, C, M we get anti_similar_triangles(C, G, M, C, T, J)
By sas_anti_congruence on S, F, J, A, F, J we get anti_congruent_triangles(A, F, J, S, F, J)
By sas_anti_congruence on J, B, A, J, B, S we get anti_congruent_triangles(A, B, J, S, B, J)
By sas_congruence on J, M, T, J, K, A we get congruent_triangles(A, J, K, T, J, M)
By sas_similarity on J, L, A, J, M, S we get similar_triangles(A, J, L, S, J, M)
By sas_similarity on T, G, F, F, M, T we get similar_triangles(F, G, T, T, M, F)
By sas_congruence on K, center(Circle(A, F, G)), A, F, center(Circle(A, F, G)), G we get congruent_triangles(A, K, center(Circle(A, F, G)), G, F, center(Circle(A, F, G)))
By sas_anti_similarity on C, G, A, S, F, J we get anti_similar_triangles(A, C, G, J, S, F)
By sas_anti_congruence on G, center(Circle(A, F, G)), L, A, center(Circle(A, F, G)), F we get anti_congruent_triangles(A, F, center(Circle(A, F, G)), G, L, center(Circle(A, F, G)))
By sas_similarity on S, F, B, J, G, T we get similar_triangles(B, F, S, T, G, J)
By sas_anti_congruence on A, L, J, T, M, J we get anti_congruent_triangles(A, J, L, T, J, M)
By sas_anti_similarity on J, M, L, J, A, S we get anti_similar_triangles(A, J, S, M, J, L)
By sas_similarity on G, L, J, S, B, J we get similar_triangles(B, J, S, L, J, G)
By sas_congruence on T, M, F, F, G, T we get congruent_triangles(F, G, T, T, M, F)
By sas_anti_congruence on J, F, S, J, F, A we get anti_congruent_triangles(A, F, J, S, F, J)
By isosceles_triangle_properties on center(Circle(A, F, G)), G, F we get distance(F, center(Circle(A, F, G))) == distance(G, center(Circle(A, F, G))), angle(G, F, center(Circle(A, F, G))) == angle(center(Circle(A, F, G)), G, F) mod 360
By sas_congruence on M, G, A, A, F, M we get congruent_triangles(A, F, M, M, G, A)
By sas_similarity on K, B, F, J, B, S we get similar_triangles(B, F, K, B, S, J)
By sas_anti_similarity on J, C, T, J, C, A we get anti_similar_triangles(A, C, J, T, C, J)
By sas_similarity on M, L, J, S, A, J we get similar_triangles(A, J, S, L, J, M)
By anti_similar_triangle_basic_properties on K, center(Circle(A, F, G)), A, L, center(Circle(A, F, G)), A we get angle(K, center(Circle(A, F, G)), A) == 0 - angle(L, center(Circle(A, F, G)), A) mod 360, angle(center(Circle(A, F, G)), A, K) == 0 - angle(center(Circle(A, F, G)), A, L) mod 360, angle(A, K, center(Circle(A, F, G))) == 0 - angle(A, L, center(Circle(A, F, G))) mod 360, log(distance(K, center(Circle(A, F, G)))) + log(distance(A, center(Circle(A, F, G)))) == log(distance(L, center(Circle(A, F, G)))) + log(distance(A, center(Circle(A, F, G)))), log(distance(A, center(Circle(A, F, G)))) + log(distance(A, K)) == log(distance(A, center(Circle(A, F, G)))) + log(distance(A, L)), log(distance(A, K)) + log(distance(L, center(Circle(A, F, G)))) == log(distance(A, L)) + log(distance(K, center(Circle(A, F, G))))
By anti_similar_triangle_basic_properties on M, C, center(Circle(C, J, L)), L, C, center(Circle(C, J, L)) we get angle(M, C, center(Circle(C, J, L))) == 0 - angle(L, C, center(Circle(C, J, L))) mod 360, angle(C, center(Circle(C, J, L)), M) == 0 - angle(C, center(Circle(C, J, L)), L) mod 360, angle(center(Circle(C, J, L)), M, C) == 0 - angle(center(Circle(C, J, L)), L, C) mod 360, log(distance(C, L)) + log(distance(C, center(Circle(C, J, L)))) == log(distance(C, M)) + log(distance(C, center(Circle(C, J, L)))), log(distance(C, center(Circle(C, J, L)))) + log(distance(L, center(Circle(C, J, L)))) == log(distance(C, center(Circle(C, J, L)))) + log(distance(M, center(Circle(C, J, L)))), log(distance(L, center(Circle(C, J, L)))) + log(distance(C, M)) == log(distance(M, center(Circle(C, J, L)))) + log(distance(C, L))
By anti_similar_triangle_basic_properties on M, J, center(Circle(C, J, L)), L, J, center(Circle(C, J, L)) we get angle(M, J, center(Circle(C, J, L))) == 0 - angle(L, J, center(Circle(C, J, L))) mod 360, angle(J, center(Circle(C, J, L)), M) == 0 - angle(J, center(Circle(C, J, L)), L) mod 360, angle(center(Circle(C, J, L)), M, J) == 0 - angle(center(Circle(C, J, L)), L, J) mod 360, log(distance(J, L)) + log(distance(J, center(Circle(C, J, L)))) == log(distance(J, M)) + log(distance(J, center(Circle(C, J, L)))), log(distance(J, center(Circle(C, J, L)))) + log(distance(L, center(Circle(C, J, L)))) == log(distance(J, center(Circle(C, J, L)))) + log(distance(M, center(Circle(C, J, L)))), log(distance(L, center(Circle(C, J, L)))) + log(distance(J, M)) == log(distance(M, center(Circle(C, J, L)))) + log(distance(J, L))
By similar_triangle_basic_properties on J, center(Circle(A, F, G)), L, K, center(Circle(A, F, G)), J we get angle(J, center(Circle(A, F, G)), L) == angle(K, center(Circle(A, F, G)), J) mod 360, angle(center(Circle(A, F, G)), J, K) == angle(center(Circle(A, F, G)), L, J) mod 360, angle(J, K, center(Circle(A, F, G))) == angle(L, J, center(Circle(A, F, G))) mod 360, log(distance(J, center(Circle(A, F, G)))) + log(distance(J, center(Circle(A, F, G)))) == log(distance(K, center(Circle(A, F, G)))) + log(distance(L, center(Circle(A, F, G)))), log(distance(J, center(Circle(A, F, G)))) + log(distance(J, L)) == log(distance(L, center(Circle(A, F, G)))) + log(distance(J, K)), log(distance(J, K)) + log(distance(J, center(Circle(A, F, G)))) == log(distance(J, L)) + log(distance(K, center(Circle(A, F, G))))
By similar_triangle_basic_properties on center(Circle(A, F, G)), A, K, center(Circle(A, F, G)), L, A we get angle(center(Circle(A, F, G)), A, K) == angle(center(Circle(A, F, G)), L, A) mod 360, angle(A, K, center(Circle(A, F, G))) == angle(L, A, center(Circle(A, F, G))) mod 360, angle(A, center(Circle(A, F, G)), L) == angle(K, center(Circle(A, F, G)), A) mod 360, log(distance(A, center(Circle(A, F, G)))) + log(distance(A, L)) == log(distance(L, center(Circle(A, F, G)))) + log(distance(A, K)), log(distance(A, K)) + log(distance(A, center(Circle(A, F, G)))) == log(distance(A, L)) + log(distance(K, center(Circle(A, F, G)))), log(distance(A, center(Circle(A, F, G)))) + log(distance(A, center(Circle(A, F, G)))) == log(distance(K, center(Circle(A, F, G)))) + log(distance(L, center(Circle(A, F, G))))
By anti_similar_triangle_basic_properties on center(Circle(C, J, L)), C, M, center(Circle(C, J, L)), C, L we get angle(center(Circle(C, J, L)), C, M) == 0 - angle(center(Circle(C, J, L)), C, L) mod 360, angle(C, M, center(Circle(C, J, L))) == 0 - angle(C, L, center(Circle(C, J, L))) mod 360, angle(M, center(Circle(C, J, L)), C) == 0 - angle(L, center(Circle(C, J, L)), C) mod 360, log(distance(C, center(Circle(C, J, L)))) + log(distance(C, L)) == log(distance(C, center(Circle(C, J, L)))) + log(distance(C, M)), log(distance(C, L)) + log(distance(M, center(Circle(C, J, L)))) == log(distance(C, M)) + log(distance(L, center(Circle(C, J, L)))), log(distance(L, center(Circle(C, J, L)))) + log(distance(C, center(Circle(C, J, L)))) == log(distance(M, center(Circle(C, J, L)))) + log(distance(C, center(Circle(C, J, L))))
By similar_triangle_basic_properties on L, J, center(Circle(C, J, L)), J, M, center(Circle(C, J, L)) we get angle(J, M, center(Circle(C, J, L))) == angle(L, J, center(Circle(C, J, L))) mod 360, angle(J, center(Circle(C, J, L)), L) == angle(M, center(Circle(C, J, L)), J) mod 360, angle(center(Circle(C, J, L)), J, M) == angle(center(Circle(C, J, L)), L, J) mod 360, log(distance(J, L)) + log(distance(M, center(Circle(C, J, L)))) == log(distance(J, M)) + log(distance(J, center(Circle(C, J, L)))), log(distance(J, center(Circle(C, J, L)))) + log(distance(J, center(Circle(C, J, L)))) == log(distance(M, center(Circle(C, J, L)))) + log(distance(L, center(Circle(C, J, L)))), log(distance(J, center(Circle(C, J, L)))) + log(distance(J, L)) == log(distance(L, center(Circle(C, J, L)))) + log(distance(J, M))
By similar_triangle_basic_properties on J, center(Circle(A, F, G)), K, L, center(Circle(A, F, G)), J we get angle(J, center(Circle(A, F, G)), K) == angle(L, center(Circle(A, F, G)), J) mod 360, angle(center(Circle(A, F, G)), J, L) == angle(center(Circle(A, F, G)), K, J) mod 360, angle(J, L, center(Circle(A, F, G))) == angle(K, J, center(Circle(A, F, G))) mod 360, log(distance(J, center(Circle(A, F, G)))) + log(distance(J, center(Circle(A, F, G)))) == log(distance(L, center(Circle(A, F, G)))) + log(distance(K, center(Circle(A, F, G)))), log(distance(J, center(Circle(A, F, G)))) + log(distance(J, K)) == log(distance(K, center(Circle(A, F, G)))) + log(distance(J, L)), log(distance(J, K)) + log(distance(L, center(Circle(A, F, G)))) == log(distance(J, L)) + log(distance(J, center(Circle(A, F, G))))
By anti_similar_triangle_basic_properties on M, center(Circle(C, J, L)), J, L, center(Circle(C, J, L)), J we get angle(M, center(Circle(C, J, L)), J) == 0 - angle(L, center(Circle(C, J, L)), J) mod 360, angle(center(Circle(C, J, L)), J, M) == 0 - angle(center(Circle(C, J, L)), J, L) mod 360, angle(J, M, center(Circle(C, J, L))) == 0 - angle(J, L, center(Circle(C, J, L))) mod 360, log(distance(L, center(Circle(C, J, L)))) + log(distance(J, center(Circle(C, J, L)))) == log(distance(M, center(Circle(C, J, L)))) + log(distance(J, center(Circle(C, J, L)))), log(distance(J, center(Circle(C, J, L)))) + log(distance(J, L)) == log(distance(J, center(Circle(C, J, L)))) + log(distance(J, M)), log(distance(J, L)) + log(distance(M, center(Circle(C, J, L)))) == log(distance(J, M)) + log(distance(L, center(Circle(C, J, L))))
By anti_similar_triangle_basic_properties on center(Circle(B, J, K)), M, B, center(Circle(B, J, K)), K, B we get angle(center(Circle(B, J, K)), M, B) == 0 - angle(center(Circle(B, J, K)), K, B) mod 360, angle(M, B, center(Circle(B, J, K))) == 0 - angle(K, B, center(Circle(B, J, K))) mod 360, angle(B, center(Circle(B, J, K)), M) == 0 - angle(B, center(Circle(B, J, K)), K) mod 360, log(distance(K, center(Circle(B, J, K)))) + log(distance(B, M)) == log(distance(M, center(Circle(B, J, K)))) + log(distance(B, K)), log(distance(B, K)) + log(distance(B, center(Circle(B, J, K)))) == log(distance(B, M)) + log(distance(B, center(Circle(B, J, K)))), log(distance(B, center(Circle(B, J, K)))) + log(distance(K, center(Circle(B, J, K)))) == log(distance(B, center(Circle(B, J, K)))) + log(distance(M, center(Circle(B, J, K))))
By perpendicular_bisector_definition on A, S, Line(B, F) we get Line(B, F) == perpendicular_bisector(A, S)
By similar_triangle_basic_properties on A, L, center(Circle(A, F, G)), K, A, center(Circle(A, F, G)) we get angle(A, L, center(Circle(A, F, G))) == angle(K, A, center(Circle(A, F, G))) mod 360, angle(A, center(Circle(A, F, G)), K) == angle(L, center(Circle(A, F, G)), A) mod 360, angle(center(Circle(A, F, G)), A, L) == angle(center(Circle(A, F, G)), K, A) mod 360, log(distance(A, K)) + log(distance(L, center(Circle(A, F, G)))) == log(distance(A, L)) + log(distance(A, center(Circle(A, F, G)))), log(distance(A, center(Circle(A, F, G)))) + log(distance(A, center(Circle(A, F, G)))) == log(distance(L, center(Circle(A, F, G)))) + log(distance(K, center(Circle(A, F, G)))), log(distance(A, center(Circle(A, F, G)))) + log(distance(A, K)) == log(distance(K, center(Circle(A, F, G)))) + log(distance(A, L))
By anti_similar_triangle_basic_properties on J, M, center(Circle(B, J, K)), J, K, center(Circle(B, J, K)) we get angle(J, M, center(Circle(B, J, K))) == 0 - angle(J, K, center(Circle(B, J, K))) mod 360, angle(M, center(Circle(B, J, K)), J) == 0 - angle(K, center(Circle(B, J, K)), J) mod 360, angle(center(Circle(B, J, K)), J, M) == 0 - angle(center(Circle(B, J, K)), J, K) mod 360, log(distance(J, K)) + log(distance(M, center(Circle(B, J, K)))) == log(distance(J, M)) + log(distance(K, center(Circle(B, J, K)))), log(distance(K, center(Circle(B, J, K)))) + log(distance(J, center(Circle(B, J, K)))) == log(distance(M, center(Circle(B, J, K)))) + log(distance(J, center(Circle(B, J, K)))), log(distance(J, center(Circle(B, J, K)))) + log(distance(J, K)) == log(distance(J, center(Circle(B, J, K)))) + log(distance(J, M))
By anti_similar_triangle_basic_properties on J, center(Circle(B, J, K)), M, J, center(Circle(B, J, K)), K we get angle(J, center(Circle(B, J, K)), M) == 0 - angle(J, center(Circle(B, J, K)), K) mod 360, angle(center(Circle(B, J, K)), M, J) == 0 - angle(center(Circle(B, J, K)), K, J) mod 360, angle(M, J, center(Circle(B, J, K))) == 0 - angle(K, J, center(Circle(B, J, K))) mod 360, log(distance(J, center(Circle(B, J, K)))) + log(distance(K, center(Circle(B, J, K)))) == log(distance(J, center(Circle(B, J, K)))) + log(distance(M, center(Circle(B, J, K)))), log(distance(K, center(Circle(B, J, K)))) + log(distance(J, M)) == log(distance(M, center(Circle(B, J, K)))) + log(distance(J, K)), log(distance(J, K)) + log(distance(J, center(Circle(B, J, K)))) == log(distance(J, M)) + log(distance(J, center(Circle(B, J, K))))
By similar_triangle_basic_properties on M, B, center(Circle(B, J, K)), B, K, center(Circle(B, J, K)) we get angle(B, K, center(Circle(B, J, K))) == angle(M, B, center(Circle(B, J, K))) mod 360, angle(B, center(Circle(B, J, K)), M) == angle(K, center(Circle(B, J, K)), B) mod 360, angle(center(Circle(B, J, K)), B, K) == angle(center(Circle(B, J, K)), M, B) mod 360, log(distance(B, K)) + log(distance(B, center(Circle(B, J, K)))) == log(distance(B, M)) + log(distance(K, center(Circle(B, J, K)))), log(distance(B, center(Circle(B, J, K)))) + log(distance(B, center(Circle(B, J, K)))) == log(distance(K, center(Circle(B, J, K)))) + log(distance(M, center(Circle(B, J, K)))), log(distance(B, center(Circle(B, J, K)))) + log(distance(B, M)) == log(distance(M, center(Circle(B, J, K)))) + log(distance(B, K))
By similar_triangle_basic_properties on M, J, center(Circle(B, J, K)), J, K, center(Circle(B, J, K)) we get angle(J, K, center(Circle(B, J, K))) == angle(M, J, center(Circle(B, J, K))) mod 360, angle(J, center(Circle(B, J, K)), M) == angle(K, center(Circle(B, J, K)), J) mod 360, angle(center(Circle(B, J, K)), J, K) == angle(center(Circle(B, J, K)), M, J) mod 360, log(distance(J, K)) + log(distance(J, center(Circle(B, J, K)))) == log(distance(J, M)) + log(distance(K, center(Circle(B, J, K)))), log(distance(J, center(Circle(B, J, K)))) + log(distance(J, center(Circle(B, J, K)))) == log(distance(K, center(Circle(B, J, K)))) + log(distance(M, center(Circle(B, J, K)))), log(distance(J, center(Circle(B, J, K)))) + log(distance(J, M)) == log(distance(M, center(Circle(B, J, K)))) + log(distance(J, K))
By anti_similar_triangle_basic_properties on L, center(Circle(A, F, G)), J, K, center(Circle(A, F, G)), J we get angle(L, center(Circle(A, F, G)), J) == 0 - angle(K, center(Circle(A, F, G)), J) mod 360, angle(center(Circle(A, F, G)), J, L) == 0 - angle(center(Circle(A, F, G)), J, K) mod 360, angle(J, L, center(Circle(A, F, G))) == 0 - angle(J, K, center(Circle(A, F, G))) mod 360, log(distance(K, center(Circle(A, F, G)))) + log(distance(J, center(Circle(A, F, G)))) == log(distance(L, center(Circle(A, F, G)))) + log(distance(J, center(Circle(A, F, G)))), log(distance(J, center(Circle(A, F, G)))) + log(distance(J, K)) == log(distance(J, center(Circle(A, F, G)))) + log(distance(J, L)), log(distance(J, K)) + log(distance(L, center(Circle(A, F, G)))) == log(distance(J, L)) + log(distance(K, center(Circle(A, F, G))))
By similar_triangle_basic_properties on center(Circle(C, J, L)), C, L, center(Circle(C, J, L)), M, C we get angle(center(Circle(C, J, L)), C, L) == angle(center(Circle(C, J, L)), M, C) mod 360, angle(C, L, center(Circle(C, J, L))) == angle(M, C, center(Circle(C, J, L))) mod 360, angle(C, center(Circle(C, J, L)), M) == angle(L, center(Circle(C, J, L)), C) mod 360, log(distance(C, center(Circle(C, J, L)))) + log(distance(C, M)) == log(distance(M, center(Circle(C, J, L)))) + log(distance(C, L)), log(distance(C, L)) + log(distance(C, center(Circle(C, J, L)))) == log(distance(C, M)) + log(distance(L, center(Circle(C, J, L)))), log(distance(C, center(Circle(C, J, L)))) + log(distance(C, center(Circle(C, J, L)))) == log(distance(L, center(Circle(C, J, L)))) + log(distance(M, center(Circle(C, J, L))))
By similar_triangle_basic_properties on center(Circle(C, J, L)), C, M, center(Circle(C, J, L)), L, C we get angle(center(Circle(C, J, L)), C, M) == angle(center(Circle(C, J, L)), L, C) mod 360, angle(C, M, center(Circle(C, J, L))) == angle(L, C, center(Circle(C, J, L))) mod 360, angle(C, center(Circle(C, J, L)), L) == angle(M, center(Circle(C, J, L)), C) mod 360, log(distance(C, center(Circle(C, J, L)))) + log(distance(C, L)) == log(distance(L, center(Circle(C, J, L)))) + log(distance(C, M)), log(distance(C, L)) + log(distance(M, center(Circle(C, J, L)))) == log(distance(C, M)) + log(distance(C, center(Circle(C, J, L)))), log(distance(C, center(Circle(C, J, L)))) + log(distance(C, center(Circle(C, J, L)))) == log(distance(M, center(Circle(C, J, L)))) + log(distance(L, center(Circle(C, J, L))))
By anti_similar_triangle_basic_properties on B, M, center(Circle(B, J, K)), B, K, center(Circle(B, J, K)) we get angle(B, M, center(Circle(B, J, K))) == 0 - angle(B, K, center(Circle(B, J, K))) mod 360, angle(M, center(Circle(B, J, K)), B) == 0 - angle(K, center(Circle(B, J, K)), B) mod 360, angle(center(Circle(B, J, K)), B, M) == 0 - angle(center(Circle(B, J, K)), B, K) mod 360, log(distance(B, K)) + log(distance(M, center(Circle(B, J, K)))) == log(distance(B, M)) + log(distance(K, center(Circle(B, J, K)))), log(distance(K, center(Circle(B, J, K)))) + log(distance(B, center(Circle(B, J, K)))) == log(distance(M, center(Circle(B, J, K)))) + log(distance(B, center(Circle(B, J, K)))), log(distance(B, center(Circle(B, J, K)))) + log(distance(B, K)) == log(distance(B, center(Circle(B, J, K)))) + log(distance(B, M))
By perpendicular_bisector_sufficient_conditions on T, A, C, G we get Line(C, G) == perpendicular_bisector(A, T)
By similar_triangle_basic_properties on J, center(Circle(C, J, L)), M, L, center(Circle(C, J, L)), J we get angle(J, center(Circle(C, J, L)), M) == angle(L, center(Circle(C, J, L)), J) mod 360, angle(center(Circle(C, J, L)), J, L) == angle(center(Circle(C, J, L)), M, J) mod 360, angle(J, L, center(Circle(C, J, L))) == angle(M, J, center(Circle(C, J, L))) mod 360, log(distance(J, center(Circle(C, J, L)))) + log(distance(J, center(Circle(C, J, L)))) == log(distance(L, center(Circle(C, J, L)))) + log(distance(M, center(Circle(C, J, L)))), log(distance(J, center(Circle(C, J, L)))) + log(distance(J, M)) == log(distance(M, center(Circle(C, J, L)))) + log(distance(J, L)), log(distance(J, L)) + log(distance(J, center(Circle(C, J, L)))) == log(distance(J, M)) + log(distance(L, center(Circle(C, J, L))))
By anti_similar_triangle_basic_properties on J, center(Circle(A, F, G)), L, J, center(Circle(A, F, G)), K we get angle(J, center(Circle(A, F, G)), L) == 0 - angle(J, center(Circle(A, F, G)), K) mod 360, angle(center(Circle(A, F, G)), L, J) == 0 - angle(center(Circle(A, F, G)), K, J) mod 360, angle(L, J, center(Circle(A, F, G))) == 0 - angle(K, J, center(Circle(A, F, G))) mod 360, log(distance(J, center(Circle(A, F, G)))) + log(distance(K, center(Circle(A, F, G)))) == log(distance(J, center(Circle(A, F, G)))) + log(distance(L, center(Circle(A, F, G)))), log(distance(K, center(Circle(A, F, G)))) + log(distance(J, L)) == log(distance(L, center(Circle(A, F, G)))) + log(distance(J, K)), log(distance(J, K)) + log(distance(J, center(Circle(A, F, G)))) == log(distance(J, L)) + log(distance(J, center(Circle(A, F, G))))
By anti_similar_triangle_basic_properties on A, center(Circle(A, F, G)), K, A, center(Circle(A, F, G)), L we get angle(A, center(Circle(A, F, G)), K) == 0 - angle(A, center(Circle(A, F, G)), L) mod 360, angle(center(Circle(A, F, G)), K, A) == 0 - angle(center(Circle(A, F, G)), L, A) mod 360, angle(K, A, center(Circle(A, F, G))) == 0 - angle(L, A, center(Circle(A, F, G))) mod 360, log(distance(A, center(Circle(A, F, G)))) + log(distance(K, center(Circle(A, F, G)))) == log(distance(A, center(Circle(A, F, G)))) + log(distance(L, center(Circle(A, F, G)))), log(distance(K, center(Circle(A, F, G)))) + log(distance(A, L)) == log(distance(L, center(Circle(A, F, G)))) + log(distance(A, K)), log(distance(A, K)) + log(distance(A, center(Circle(A, F, G)))) == log(distance(A, L)) + log(distance(A, center(Circle(A, F, G))))
By triangle_homothety_1 on M, F, G, A, T, S we get concurrent(Line(A, M), Line(F, T), Line(G, S))
By similar_triangle_basic_properties on K, B, center(Circle(B, J, K)), B, M, center(Circle(B, J, K)) we get angle(B, M, center(Circle(B, J, K))) == angle(K, B, center(Circle(B, J, K))) mod 360, angle(B, center(Circle(B, J, K)), K) == angle(M, center(Circle(B, J, K)), B) mod 360, angle(center(Circle(B, J, K)), B, M) == angle(center(Circle(B, J, K)), K, B) mod 360, log(distance(B, K)) + log(distance(M, center(Circle(B, J, K)))) == log(distance(B, M)) + log(distance(B, center(Circle(B, J, K)))), log(distance(B, center(Circle(B, J, K)))) + log(distance(B, center(Circle(B, J, K)))) == log(distance(M, center(Circle(B, J, K)))) + log(distance(K, center(Circle(B, J, K)))), log(distance(B, center(Circle(B, J, K)))) + log(distance(B, K)) == log(distance(K, center(Circle(B, J, K)))) + log(distance(B, M))
By triangle_homothety_1 on T, A, S, F, M, G we get concurrent(Line(A, M), Line(F, T), Line(G, S))
By similar_triangle_basic_properties on J, center(Circle(B, J, K)), K, M, center(Circle(B, J, K)), J we get angle(J, center(Circle(B, J, K)), K) == angle(M, center(Circle(B, J, K)), J) mod 360, angle(center(Circle(B, J, K)), J, M) == angle(center(Circle(B, J, K)), K, J) mod 360, angle(J, M, center(Circle(B, J, K))) == angle(K, J, center(Circle(B, J, K))) mod 360, log(distance(J, center(Circle(B, J, K)))) + log(distance(J, center(Circle(B, J, K)))) == log(distance(M, center(Circle(B, J, K)))) + log(distance(K, center(Circle(B, J, K)))), log(distance(J, center(Circle(B, J, K)))) + log(distance(J, K)) == log(distance(K, center(Circle(B, J, K)))) + log(distance(J, M)), log(distance(J, K)) + log(distance(M, center(Circle(B, J, K)))) == log(distance(J, M)) + log(distance(J, center(Circle(B, J, K))))
By triangle_homothety_1 on F, M, G, T, A, S we get concurrent(Line(A, M), Line(F, T), Line(G, S))
By triangle_homothety_1 on S, A, T, G, M, F we get concurrent(Line(A, M), Line(F, T), Line(G, S))
By isosceles_trapezoid_perpendicular_bisector on M, K, A, S we get perpendicular_bisector(A, S) == perpendicular_bisector(K, M)
By triangle_homothety_1 on A, T, S, M, F, G we get concurrent(Line(A, M), Line(F, T), Line(G, S))
By triangle_homothety_1 on A, S, T, M, G, F we get concurrent(Line(A, M), Line(F, T), Line(G, S))
By triangle_homothety_1 on M, G, F, A, S, T we get concurrent(Line(A, M), Line(F, T), Line(G, S))
By isosceles_trapezoid_perpendicular_bisector on M, L, A, T we get perpendicular_bisector(A, T) == perpendicular_bisector(L, M)
By triangle_homothety_1 on T, S, A, F, G, M we get concurrent(Line(A, M), Line(F, T), Line(G, S))
By triangle_homothety_1 on S, T, A, G, F, M we get concurrent(Line(A, M), Line(F, T), Line(G, S))
By triangle_homothety_1 on F, G, M, T, S, A we get concurrent(Line(A, M), Line(F, T), Line(G, S))
By triangle_homothety_1 on G, F, M, S, T, A we get concurrent(Line(A, M), Line(F, T), Line(G, S))
By triangle_homothety_1 on G, M, F, S, A, T we get concurrent(Line(A, M), Line(F, T), Line(G, S))
By sas_anti_similarity on A, C, midpoint(L, M), T, C, midpoint(L, M) we get anti_similar_triangles(A, C, midpoint(L, M), T, C, midpoint(L, M))
By sas_anti_similarity on T, M, projection(F, Line(J, M)), S, M, projection(F, Line(J, M)) we get anti_similar_triangles(M, S, projection(F, Line(J, M)), M, T, projection(F, Line(J, M)))
By sas_anti_congruence on M, G, A, S, F, K we get anti_congruent_triangles(A, G, M, K, F, S)
By isosceles_trapezoids_are_concyclic_v1 on T, A, M, L we get isosceles_trapezoid(M, L, T, A)
By sas_anti_congruence on T, C, L, A, C, M we get anti_congruent_triangles(A, C, M, T, C, L)
By sas_anti_congruence on M, F, A, K, F, S we get anti_congruent_triangles(A, F, M, S, F, K)
By sas_anti_similarity on J, M, S, J, M, T we get anti_similar_triangles(J, M, S, J, M, T)
By sas_anti_similarity on K, F, S, A, G, M we get anti_similar_triangles(A, G, M, K, F, S)
By sas_anti_congruence on A, T, M, T, A, L we get anti_congruent_triangles(A, L, T, T, M, A)
By sas_similarity on T, G, L, K, F, S we get similar_triangles(F, K, S, G, T, L)
By sas_anti_similarity on L, A, T, M, T, A we get anti_similar_triangles(A, L, T, T, M, A)
By sas_anti_similarity on midpoint(L, M), C, A, midpoint(L, M), C, T we get anti_similar_triangles(A, C, midpoint(L, M), T, C, midpoint(L, M))
By sas_anti_congruence on midpoint(L, M), C, T, midpoint(L, M), C, A we get anti_congruent_triangles(A, C, midpoint(L, M), T, C, midpoint(L, M))
By sas_anti_similarity on T, G, L, M, F, A we get anti_similar_triangles(A, F, M, L, G, T)
By sas_anti_congruence on M, C, A, L, C, T we get anti_congruent_triangles(A, C, M, T, C, L)
By sas_anti_similarity on A, F, M, L, G, T we get anti_similar_triangles(A, F, M, L, G, T)
By sas_anti_congruence on A, G, M, T, G, L we get anti_congruent_triangles(A, G, M, T, G, L)
By sas_similarity on K, F, S, T, G, L we get similar_triangles(F, K, S, G, T, L)
By sas_anti_similarity on K, M, S, M, K, A we get anti_similar_triangles(A, K, M, S, M, K)
By sas_anti_congruence on A, C, midpoint(L, M), T, C, midpoint(L, M) we get anti_congruent_triangles(A, C, midpoint(L, M), T, C, midpoint(L, M))
By sas_anti_congruence on A, L, M, T, M, L we get anti_congruent_triangles(A, L, M, T, M, L)
By isosceles_trapezoids_are_concyclic_v1 on M, K, S, A we get isosceles_trapezoid(M, K, S, A)
By sas_anti_similarity on L, M, T, M, L, A we get anti_similar_triangles(A, L, M, T, M, L)
By sas_anti_congruence on L, C, T, M, C, A we get anti_congruent_triangles(A, C, M, T, C, L)
By sas_anti_congruence on L, G, T, A, F, M we get anti_congruent_triangles(A, F, M, L, G, T)
By sas_anti_congruence on A, K, M, S, M, K we get anti_congruent_triangles(A, K, M, S, M, K)
By sas_similarity on L, G, T, S, F, K we get similar_triangles(F, K, S, G, T, L)
By sas_anti_similarity on T, G, L, A, G, M we get anti_similar_triangles(A, G, M, T, G, L)
By sas_anti_similarity on T, C, midpoint(L, M), A, C, midpoint(L, M) we get anti_similar_triangles(A, C, midpoint(L, M), T, C, midpoint(L, M))
By sas_anti_congruence on T, G, L, A, G, M we get anti_congruent_triangles(A, G, M, T, G, L)
By sas_anti_similarity on A, G, M, T, G, L we get anti_similar_triangles(A, G, M, T, G, L)
By sas_anti_congruence on S, M, projection(F, Line(J, M)), T, M, projection(F, Line(J, M)) we get anti_congruent_triangles(M, S, projection(F, Line(J, M)), M, T, projection(F, Line(J, M)))
By sas_anti_similarity on K, B, S, M, B, A we get anti_similar_triangles(A, B, M, S, B, K)
By sas_anti_similarity on M, S, A, K, A, S we get anti_similar_triangles(A, K, S, S, M, A)
By sas_anti_congruence on S, F, K, A, F, M we get anti_congruent_triangles(A, F, M, S, F, K)
By isosceles_trapezoid_symmetry on A, S, M, K we get isosceles_trapezoid(A, S, K, M)
By sas_anti_similarity on A, F, M, S, F, K we get anti_similar_triangles(A, F, M, S, F, K)
By sas_anti_similarity on projection(F, Line(J, M)), M, T, projection(F, Line(J, M)), M, S we get anti_similar_triangles(M, S, projection(F, Line(J, M)), M, T, projection(F, Line(J, M)))
By sas_anti_congruence on M, K, A, K, M, S we get anti_congruent_triangles(A, K, M, S, M, K)
By sas_anti_congruence on projection(F, Line(J, M)), M, S, projection(F, Line(J, M)), M, T we get anti_congruent_triangles(M, S, projection(F, Line(J, M)), M, T, projection(F, Line(J, M)))
By sas_anti_similarity on S, F, K, M, G, A we get anti_similar_triangles(A, G, M, K, F, S)
By sas_anti_similarity on J, M, T, J, M, S we get anti_similar_triangles(J, M, S, J, M, T)
By sas_anti_congruence on K, A, S, M, S, A we get anti_congruent_triangles(A, K, S, S, M, A)
By sas_anti_congruence on midpoint(K, M), B, A, midpoint(K, M), B, S we get anti_congruent_triangles(A, B, midpoint(K, M), S, B, midpoint(K, M))
By sas_anti_similarity on A, B, M, S, B, K we get anti_similar_triangles(A, B, M, S, B, K)
By sas_congruence on K, F, S, T, G, L we get congruent_triangles(F, K, S, G, T, L)
By sas_anti_similarity on A, B, midpoint(K, M), S, B, midpoint(K, M) we get anti_similar_triangles(A, B, midpoint(K, M), S, B, midpoint(K, M))
By power_of_a_point_definition on center(Circle(B, J, K)), B, J, Circle(B, J, K) we get log(power_of_a_point(center(Circle(B, J, K)), Circle(B, J, K))) == log(distance(B, center(Circle(B, J, K)))) + log(distance(J, center(Circle(B, J, K))))
By sas_anti_congruence on T, A, L, A, T, M we get anti_congruent_triangles(A, L, T, T, M, A)
By sas_anti_similarity on L, C, T, M, C, A we get anti_similar_triangles(A, C, M, T, C, L)
By sas_congruence on L, G, T, S, F, K we get congruent_triangles(F, K, S, G, T, L)
By isosceles_trapezoid_symmetry on M, K, A, S we get isosceles_trapezoid(M, K, S, A)
By isosceles_trapezoids_are_concyclic_v1 on A, S, K, M we get isosceles_trapezoid(A, S, K, M)
By sas_anti_similarity on K, F, S, M, F, A we get anti_similar_triangles(A, F, M, S, F, K)
By sas_anti_similarity on M, C, A, L, C, T we get anti_similar_triangles(A, C, M, T, C, L)
By sas_anti_similarity on T, M, L, A, L, M we get anti_similar_triangles(A, L, M, T, M, L)
By sas_anti_congruence on S, M, K, A, K, M we get anti_congruent_triangles(A, K, M, S, M, K)
By sas_anti_congruence on S, A, K, A, S, M we get anti_congruent_triangles(A, K, S, S, M, A)
By sas_anti_similarity on M, K, A, K, M, S we get anti_similar_triangles(A, K, M, S, M, K)
By sas_anti_similarity on A, L, M, T, M, L we get anti_similar_triangles(A, L, M, T, M, L)
By sas_anti_similarity on L, G, T, M, G, A we get anti_similar_triangles(A, G, M, T, G, L)
By isosceles_trapezoids_are_concyclic_v1 on A, T, L, M we get isosceles_trapezoid(A, T, L, M)
By isosceles_trapezoids_are_concyclic_v1 on K, M, A, S we get isosceles_trapezoid(A, S, K, M)
By sas_anti_congruence on M, G, A, L, G, T we get anti_congruent_triangles(A, G, M, T, G, L)
By sas_anti_similarity on A, G, M, K, F, S we get anti_similar_triangles(A, G, M, K, F, S)
By sas_anti_similarity on A, T, M, T, A, L we get anti_similar_triangles(A, L, T, T, M, A)
By sas_anti_congruence on K, B, S, M, B, A we get anti_congruent_triangles(A, B, M, S, B, K)
By isosceles_trapezoid_symmetry on S, A, K, M we get isosceles_trapezoid(M, K, S, A)
By sas_anti_similarity on T, M, J, S, M, J we get anti_similar_triangles(J, M, S, J, M, T)
By sas_anti_congruence on T, M, J, S, M, J we get anti_congruent_triangles(J, M, S, J, M, T)
By sas_congruence on T, G, L, K, F, S we get congruent_triangles(F, K, S, G, T, L)
By sas_anti_congruence on M, S, A, K, A, S we get anti_congruent_triangles(A, K, S, S, M, A)
By sas_anti_congruence on M, F, A, T, G, L we get anti_congruent_triangles(A, F, M, L, G, T)
By power_of_a_point_definition on center(Circle(C, J, L)), J, C, Circle(C, J, L) we get log(power_of_a_point(center(Circle(C, J, L)), Circle(C, J, L))) == log(distance(J, center(Circle(C, J, L)))) + log(distance(C, center(Circle(C, J, L))))
By isosceles_trapezoids_are_concyclic_v1 on S, A, M, K we get isosceles_trapezoid(M, K, S, A)
By isosceles_trapezoid_symmetry on M, L, A, T we get isosceles_trapezoid(M, L, T, A)
By sas_similarity on S, F, K, L, G, T we get similar_triangles(F, K, S, G, T, L)
By sas_anti_similarity on S, M, projection(F, Line(J, M)), T, M, projection(F, Line(J, M)) we get anti_similar_triangles(M, S, projection(F, Line(J, M)), M, T, projection(F, Line(J, M)))
By sas_anti_similarity on S, F, K, A, F, M we get anti_similar_triangles(A, F, M, S, F, K)
By sas_anti_similarity on S, M, K, A, K, M we get anti_similar_triangles(A, K, M, S, M, K)
By sas_anti_congruence on J, M, T, J, M, S we get anti_congruent_triangles(J, M, S, J, M, T)
By sas_anti_congruence on T, M, projection(F, Line(J, M)), S, M, projection(F, Line(J, M)) we get anti_congruent_triangles(M, S, projection(F, Line(J, M)), M, T, projection(F, Line(J, M)))
By sas_anti_congruence on A, S, M, S, A, K we get anti_congruent_triangles(A, K, S, S, M, A)
By sas_anti_congruence on S, M, J, T, M, J we get anti_congruent_triangles(J, M, S, J, M, T)
By sas_anti_similarity on M, L, A, L, M, T we get anti_similar_triangles(A, L, M, T, M, L)
By sas_anti_congruence on M, B, A, K, B, S we get anti_congruent_triangles(A, B, M, S, B, K)
By sas_anti_similarity on midpoint(L, M), C, T, midpoint(L, M), C, A we get anti_similar_triangles(A, C, midpoint(L, M), T, C, midpoint(L, M))
By sas_anti_congruence on M, L, A, L, M, T we get anti_congruent_triangles(A, L, M, T, M, L)
By sas_anti_similarity on midpoint(K, M), B, A, midpoint(K, M), B, S we get anti_similar_triangles(A, B, midpoint(K, M), S, B, midpoint(K, M))
By sas_anti_congruence on A, B, midpoint(K, M), S, B, midpoint(K, M) we get anti_congruent_triangles(A, B, midpoint(K, M), S, B, midpoint(K, M))
By isosceles_trapezoid_symmetry on T, A, L, M we get isosceles_trapezoid(M, L, T, A)
By isosceles_trapezoid_symmetry on K, M, S, A we get isosceles_trapezoid(A, S, K, M)
By sas_anti_similarity on midpoint(K, M), B, S, midpoint(K, M), B, A we get anti_similar_triangles(A, B, midpoint(K, M), S, B, midpoint(K, M))
By sas_anti_similarity on S, M, J, T, M, J we get anti_similar_triangles(J, M, S, J, M, T)
By sas_anti_congruence on S, B, K, A, B, M we get anti_congruent_triangles(A, B, M, S, B, K)
By sas_congruence on S, F, K, L, G, T we get congruent_triangles(F, K, S, G, T, L)
By sas_anti_similarity on T, C, L, A, C, M we get anti_similar_triangles(A, C, M, T, C, L)
By sas_anti_congruence on midpoint(L, M), C, A, midpoint(L, M), C, T we get anti_congruent_triangles(A, C, midpoint(L, M), T, C, midpoint(L, M))
By sas_anti_congruence on T, C, midpoint(L, M), A, C, midpoint(L, M) we get anti_congruent_triangles(A, C, midpoint(L, M), T, C, midpoint(L, M))
By sas_anti_congruence on M, T, A, L, A, T we get anti_congruent_triangles(A, L, T, T, M, A)
By isosceles_triangle_altitude_v2 on C, A, T we get identical(perpendicular_bisector(A, T), internal_angle_bisector(A, C, T), perpendicular_line(C, Line(A, T)))
By sas_anti_congruence on T, M, L, A, L, M we get anti_congruent_triangles(A, L, M, T, M, L)
By sas_anti_congruence on J, M, S, J, M, T we get anti_congruent_triangles(J, M, S, J, M, T)
By sas_anti_similarity on projection(F, Line(J, M)), M, S, projection(F, Line(J, M)), M, T we get anti_similar_triangles(M, S, projection(F, Line(J, M)), M, T, projection(F, Line(J, M)))
By sas_anti_congruence on L, A, T, M, T, A we get anti_congruent_triangles(A, L, T, T, M, A)
By sas_anti_congruence on L, G, T, M, G, A we get anti_congruent_triangles(A, G, M, T, G, L)
By sas_anti_similarity on L, G, T, A, F, M we get anti_similar_triangles(A, F, M, L, G, T)
By sas_anti_similarity on M, G, A, S, F, K we get anti_similar_triangles(A, G, M, K, F, S)
By sas_anti_congruence on T, G, L, M, F, A we get anti_congruent_triangles(A, F, M, L, G, T)
By isosceles_trapezoids_are_concyclic_v1 on L, M, A, T we get isosceles_trapezoid(A, T, L, M)
By sas_anti_similarity on M, F, A, K, F, S we get anti_similar_triangles(A, F, M, S, F, K)
By isosceles_trapezoids_are_concyclic_v1 on M, L, T, A we get isosceles_trapezoid(M, L, T, A)
By sas_anti_congruence on A, F, M, S, F, K we get anti_congruent_triangles(A, F, M, S, F, K)
By sas_anti_similarity on A, K, M, S, M, K we get anti_similar_triangles(A, K, M, S, M, K)
By sas_anti_similarity on M, B, A, K, B, S we get anti_similar_triangles(A, B, M, S, B, K)
By sas_anti_congruence on S, F, K, M, G, A we get anti_congruent_triangles(A, G, M, K, F, S)
By sas_anti_similarity on K, A, S, M, S, A we get anti_similar_triangles(A, K, S, S, M, A)
By isosceles_trapezoid_symmetry on A, T, M, L we get isosceles_trapezoid(A, T, L, M)
By sas_anti_similarity on A, S, M, S, A, K we get anti_similar_triangles(A, K, S, S, M, A)
By sas_anti_congruence on A, C, M, T, C, L we get anti_congruent_triangles(A, C, M, T, C, L)
By sas_anti_similarity on T, A, L, A, T, M we get anti_similar_triangles(A, L, T, T, M, A)
By sas_anti_similarity on M, G, A, L, G, T we get anti_similar_triangles(A, G, M, T, G, L)
By isosceles_trapezoid_symmetry on L, M, T, A we get isosceles_trapezoid(A, T, L, M)
By sas_anti_similarity on M, T, A, L, A, T we get anti_similar_triangles(A, L, T, T, M, A)
By sas_anti_similarity on A, C, M, T, C, L we get anti_similar_triangles(A, C, M, T, C, L)
By sas_anti_congruence on projection(F, Line(J, M)), M, T, projection(F, Line(J, M)), M, S we get anti_congruent_triangles(M, S, projection(F, Line(J, M)), M, T, projection(F, Line(J, M)))
By sas_anti_congruence on K, F, S, A, G, M we get anti_congruent_triangles(A, G, M, K, F, S)
By power_of_a_point_definition on center(Circle(A, F, G)), A, J, Circle(A, F, G) we get log(power_of_a_point(center(Circle(A, F, G)), Circle(A, F, G))) == log(distance(A, center(Circle(A, F, G)))) + log(distance(J, center(Circle(A, F, G))))
By sas_anti_congruence on S, B, midpoint(K, M), A, B, midpoint(K, M) we get anti_congruent_triangles(A, B, midpoint(K, M), S, B, midpoint(K, M))
By sas_anti_similarity on S, A, K, A, S, M we get anti_similar_triangles(A, K, S, S, M, A)
By sas_anti_congruence on A, B, M, S, B, K we get anti_congruent_triangles(A, B, M, S, B, K)
By sas_anti_similarity on S, B, K, A, B, M we get anti_similar_triangles(A, B, M, S, B, K)
By sas_anti_congruence on L, M, T, M, L, A we get anti_congruent_triangles(A, L, M, T, M, L)
By sas_anti_congruence on A, G, M, K, F, S we get anti_congruent_triangles(A, G, M, K, F, S)
By isosceles_triangle_altitude_v2 on C, T, A we get identical(perpendicular_bisector(A, T), internal_angle_bisector(A, C, T), perpendicular_line(C, Line(A, T)))
By sas_anti_congruence on K, F, S, M, F, A we get anti_congruent_triangles(A, F, M, S, F, K)
By sas_anti_congruence on midpoint(K, M), B, S, midpoint(K, M), B, A we get anti_congruent_triangles(A, B, midpoint(K, M), S, B, midpoint(K, M))
By sas_anti_similarity on S, B, midpoint(K, M), A, B, midpoint(K, M) we get anti_similar_triangles(A, B, midpoint(K, M), S, B, midpoint(K, M))
By sas_anti_congruence on K, M, S, M, K, A we get anti_congruent_triangles(A, K, M, S, M, K)
By sas_anti_congruence on A, F, M, L, G, T we get anti_congruent_triangles(A, F, M, L, G, T)
By sas_anti_similarity on M, F, A, T, G, L we get anti_similar_triangles(A, F, M, L, G, T)
By isosceles_triangle_altitude_v2 on B, A, S we get identical(perpendicular_bisector(A, S), internal_angle_bisector(A, B, S), perpendicular_line(B, Line(A, S)))
By isosceles_triangle_altitude_v2 on B, S, A we get identical(perpendicular_bisector(A, S), internal_angle_bisector(A, B, S), perpendicular_line(B, Line(A, S)))
