Assumptions:
A, B, C, D, E, P, Q, R, S, T: Point
distinct(A, B, C, D, E, P, Q, R, S, T)
convex(A, B, C, D, E)
distance(B, C) == distance(D, E)
identical(orientation(A, B, T), orientation(A, T, E), orientation(B, C, T), orientation(C, D, T), orientation(D, E, T))
distance(B, T) == distance(D, T)
distance(C, T) == distance(E, T)
angle(A, E, T) == angle(T, B, A) mod 360
P in Line(C, D), Line(A, B)
Q in Line(C, T), Line(A, B)
R in Line(C, D), Line(A, E)
S in Line(D, T), Line(A, E)
between(P, B, A, Q)
between(R, E, A, S)

Embedding:
T := {"x": "0.4464672019446691564326101797632873058319091796875", "y": "3.7082864535829589414106521871872246265411376953125"}
E := {"x": "-1.6986317342632857307904714616597630083560943603515625", "y": "-6.77638238541166604278487284318543970584869384765625"}
D := {"x": "3.549504353039716786355484146042726933956146240234375", "y": "0.5323326568239734601917234613210894167423248291015625"}
A := {"x": "-5.792706619317026905946477199904620647430419921875", "y": "0.8742417008577658688039946355274878442287445068359375"}
S := {"x": "-16.701063021624170418272426626760166699445321114465832782620058661329269167900354890916778808984390769335191422606074702198380848481915198016030847975991361825859855454936255298311608327502981994482390960006687823647875113302512381127235599077601176474489490926014528596163811961189759822398947236025959889314908614547382858520961579720715682339626926555626592398523715963350165614894550820881384446564428193307499400124004718378558967254417125948200188178141123772436453786157480768146030445625852374866507972284073862872662012572292369393818003402306051249979858130343508202915247248291116540806953247117827086270798708686586879238283932719780175534710412040719587390150807703293589472055018924644189026717745872856079342821739972711134523958804944301727461268421813091178536680246774520846988150059900868462820782277871073905563829636491253597574707693446679098232666683714552244473954841443541064844574068800196867890467818699192344660769715509186571967739156679870434485506693435929614461640630751792844018364183358777095536253979339434373062265174452340486592522894209170827636014510944334081154295541022073856326306179386175179634314102307098294219820801385363281138536309808108345493888322631572463291223872292062171265633725885139959420649526649909318553286150901401677755581860953114155214829821733913045970038810309982411102022061809870469666167258449200584309190520906754202876371691809897297339295313578904359771782210042023604547425598775476957745035394205374042319048706056157282618006825488901948714014452613426599599737811376215500952628541973420449844203164077905653593617357380667145198356034209818632893675663480744108347045528625879442919732791229206816398790767168381290161671378493837419076870570485183935153429153392933050160753546825716498310129699933375105551527051652680744501303540377026531693548837275533307129103282555241700312467453234813735993945064318893181748277177307210725674451910951698191702501588314659175958823257705179512824699284293231611573789850709521727446", "y": "21.25875751364239440601762061131590226459792825559805437818457959646744549627175825654240932923268191213392328395343887748913854385677794816341973223587592189153653745886362716762871529837222637347187538325165125889817735656048583748517247164329118812249168503809495952058835036584466460452853474090885461302871086443350945308913426319740728719423090520665919388127868127821470030526013440518482234337137957778131803106095822019082662973482381142636767544055108384482001921782049628984889102247754620396933678155915405554019470394245029566394555718166573060555568055006379168499569720171197248240470473341650866003803603050027197872370810345547681753502253960757450037936173079343135855395449969688287899668908740502335845898503802168820822349734045271769965867885904991348644714442540144903244284449305691091571271066853157366899736973637104114878675394543606658961947270686923546730775635169888965238168096615452442428058301930027834053999065388687004890729783984465471815360460355682037619239033248078100127471381927630486699382157618444720880677196142673498875083424470997994006505256184718653622375999758732061461761417162838679866747291723022564136348615286567810081086058511468030059490961444272289141982040365973939558528430766647230148598882808514464816238115179852616194690329887291348097822729472019926549548962858219401921250617161921533696400867830690426800147250918339653188674336209242444385794320912695901731374485885289298320680889738788837513052973481861598008022282840950238580593628898504500258625315799680413540703653756815708023881561257276110191603827148593458366240246795432157729235494430728929532733720538357323942584556566720554549044150628891033257265315505944950636022146139547678321267013043517972672552441383080339798191413943667328788129738043968353002172221917098298625903404904039199162318738080649928119343748786616313023226766492560442182581197395609557382944568029243631048336792477689553621145604970678797597741989757277246531351491210069212783185083734403415034"}
B := {"x": "0.5547588799193638741705206921936592765031524427310553865016989871096563075132997583814245293161251462970611217353418142650092937202271127148555621108019036076624562570714255124891349093111692402841829396690180237100529642210727432937756725178675603167963650123825616757434330438032605172224715090067415913107386087170449508820036828299562847698817947053481963350770616594533644692085866666204738727882851063143690590904289357993404470478457278354344615902906480648402609706434548304203774821180653957492689514749350264867082331324660232985911078412867872447669540332559985595112617673343903088489094418921928373057481601191762154140870903783345210476961333502513732983644237737471289437723454352885626001904723643845362915621988576564366458600163801227454242516735179660478067016743432097518015624278754783620182816859200696694692056992963611688046251884024345873814644868581892398427857511091412477677718400798894916192119899768886769061085890058494675493563798908222174914345348299088954589606792473351131935078169641376720910049656713898567577643123185217512637505845395595538854475396211680662109338364410789169637153671659120405250227256067907238095051370987109320698404446490349547506475237090215687902487883069527521196842473075285276077410752326373272001619407128151223192749321473660126859017577547484479761860863096523156437037851317240247176169675377081126467070766294214106178075754249920394849234662187683351534839706510391865727497403159773366830974783190890913962205360020825803958492731198506651516796917764755328990788436394487707445258288149214072704301568029421680859617903491356888937436996259425462903890207708121790565599216656458716395298691971133876831427206932169731456990258211540576430299692982074447072210275041487207449387990466545250710787648005714851072025762539226047218964265807171341146555362958315166169775269102990375121738381317798018142962344228882281892758218021593254278827948458475534660367842019841621075411545458468570152640337423365840205299625807176172232", "y": "8.1471821487649610446849914206287330235532855852106966616541588846947716314691786269892998100322244769179970449049204628513869353564282852910252964484104158706933492918836125395003539455845858641596209498564978138557746998289912716830823916658955437863929386933317081602743942556688921848115325918336017260841636537370123117441289223568011613404427516079145012030818608829756714959410776412253166563567009157247473491176541925834800024144078485633461714177064275212629284348046796949372134935100609490491323430271508749955021447803642766338744459838445251332418720041344112258464296102787078787059208269549854520473037320760495888486788519658970229501705653821639901760691644776066739370115655470807636793475176958259451437346031788100051312528974808497856522016861746397250401413124809759017535003033434108234347358790908087777763993432359694687145987044906029690503244745317476458605117921533408021706675094533590722851917581718817069707581957154500262515459080450575832297772910113780428290067448574173288606419034410849209605194285429798295011654267043884998050032042669911400377916528751286129381436829461362580556796232002280824321282602111431167481753986996413154193311556856758144399981869720699328632730164791153664760968045004127419385830524527204839138795729816240851519696928207364026253439852394671641708650255717659526456975714210472153215929281274502788091925941834066423341785337536041009790545556680844566471164182839728048213642997419766049329496557754724849204629782170486854581115838718748721749874331838293077780005589067899029536305430953372397590476207482613935611941159032880791090360813667040004019892791974999864158213687559210486246990419348397118953912706399268633003778590772451262259372880526414888866079345973735245339004475174680297309445448256711512438817328200736499234761986221378717168363846017782521431589994324088435705178423125676185505556772707899322367880672182618402419949327251335761111427583309042407061763245439556210904405144167138147581207696660971284893"}
C := {"x": "9.4516875777592291367583721243485513191997068984370061533504905379541535186713525312550099005918303595713261674701573527281497102601825812150689499829000356695184727161098476136484026116651403349923594407500896838124098733039308101440125341094784953085393792259823604170277201150843275240413863242415475956420205322199477194620003862526974892293552752865002652625224817799446526744404700254184747333121501684545178713403855460639286974709859161173966894893069182905614351020667421211902487016228877071398222977940998075440856586341171712908216625455550726304323406893924059370199709622992464158276303321090050126593509127914975293928972395933045605986178631365785160495219720383327184930696414865425812106900376378626089348766815574223735318311441891623835782939782093585649185250170281240265137327536832613058902687028070828971910566135190896129515756488578268710277280865998525982062637527186617701024266051654789338788042391176942701606126982628765127363257378132114394177668766591793882049974914586316152883686104251178531120624333918976920550587762432529347297197430503047016543352972461813982378434134829274174914531573075403057829190629944789171438919504806074615101688781378208241391977928105322564399665397271969775777348580848681334189723984639840340397922447243755002470581193923771065505253142274412798397383318952447328927677736172893466360478432433734245722812103726964412919912570451057187372574549515361244217528681828521799242517957220257402149923493702212489063235952534433227672207766576159670788288428008728023760991594376973728577598942415983681486139847638545429165512902232896310139198514278792133807219862171994053222749826864406538550817405897715293038119690104945904661924517430382284006023222606563407259265138253546015205166757411614961874172022195081618871233162034457470921341364389581071726490105216690127619833463257726685394579110295302619422124910885349535324629950188784628902377631517895243584103172999789616234513024289158364119266190082318658318037006824045400947", "y": "9.4906506839406136270167671857899596146359508624612018119668279832925488888631813455606803808040542196284513122522210090071949748225555638773358796452510420362306186151411217876598388706949377754358722991800302680008190961976826736364902798255402256025699956360933588289298983305279746517796850661324051730526504440733785548759852683718013830306112246746702477888274094815008105079315866086604052708896456827006753509537366090918661840104522586603347231276456546217054633297665357710384314876648521640387686443124129623347221282628786608916612653818914941353939416353602308767115179222866624551884595333149355029911248057885544418864263570337506769123304197183198965409272947539543685111665323844126035577000337060901283629794614125492937557880703274353832153755269117890498572080248410117002931578418210638232656481940686300518624231963132536450052271711105923728585929962087335648065169398876216104974809890008745483918610897591782012742604307871975577770062331157502123453737284968395165732989781011969687891232901068229577914501100766613195567830231658295627668561890535475535718291385493990209018613868053431866110435724693072892088095315034642982250690036217349147745895651471640491187519164208974138980358596211314544961400436707236049856757104088426353865769504539445081085472864606132984071072292320274667744349794278965827722392130870172874538159039230769192925239564332397396015727082969010558599365333674370243566535955845587428779340820062631132867183021292047504006083861786147673029166235318005046884591160182717345865037466587965540714460887732983884304135213353551167644657355571765171740367233742022753879335674909491313285962848113273851927108654039286687709203857429832139690561338664247821729116443705254063106191829689628398568856220150053576412572671816071111870137361065943747717153290858671954872608858356770097883928399507281237383122525984209430626424195008729785591417020815289486289519266255880581383666597575068753701598089322163886871699044823484575193243495917524203354"}
R := {"x": "-1.5046582386225814574709627015531310962833399161615620902293340333162278930065808960378056811507131622287884887443479945119491465505601295122424064090286254732383896659897127360626772919350438835987743160440802638969081385002989050900904142644872430874313770080605449826782945352767092431154992675179238695491664609480615157423632824639337394885456822289486001191842162861039063690496114545990789577032207394044819385407672467991899600121646200632454405502765009716553167313635628151827419957929761536179130574632619724022896670441431578083839957885850848624667156076991528004941387370110112652896857183745057169891701864293192843046066337383930730742301586974102603410800417714435940602911343915313106911841617665890619629973082259010368794047670983745377416215673414248467395191524456693512197291028398932798535710949862997986081691282162344403837680828273326081800919168102317371845183940983893252335778288732933494982214249601484074073023650052901992609748058374190195777233302534122622025197608450882955047752003235485123071746376186703924657454625575839773725237590010955923141116414373920414571349478518487978393088257140258062075945071389987859170856721269930207479136354787197772554343700864673565542071646962877840553381264917148388242618628448716882880285625360569029481016717683083771553559163066479828969477188104066613136823855213838373838564523948383399455065244339347469644230168949335010806562633213505891999916550073679748537609717425406021170901089818575354041376944150144180506355048359878268053304107128236174635281971668534524368551861803049592796686935062854022099074452307858708383428390271503893413228976116631266207416641242794701336634528205632955013694024471593362669938672072178319378757630177547783587017355588556033182590898707231164922751954437670215866222462842741294191146958491271721024256797503041109481691836934403052114337227591859873773235509097319611837367067048708380124849264308546195336958645074586946584308165981515329483312046698640972026295312437405534264", "y": "-7.138861905086394877118860915411974914832650537710332371163380383577708622339222379549928588987186566252728427202186190305258709098793518737354966305453034012234319736834254612579499622231136628690791395740990007596085713564941587278592542017546041693619565021499194529569711826241168678544886222086462599637033060228242333423792945219918955591594054045675842867992092400450946821875297342110700489490179184095800454778571155728841733983773472391934610748993240780556942413790819474772527746685248229722669895082465460846501878992033571638511071246673024825205257318163075485515915600971925343663031136405658330045178386476539147547714767050288063114745883352894721997044118924431510687750899860595949123379414141177323989410613871167282668871171787610406290015167633706860749107742372133466458426720424930769579984277540647879804251292184688913494034162518141820198404112710544842377463045605577903725524745879968681006494924914732957168298752357528767953791001953416538609871898711338075009713514785094513139877737917830172264126281682614439524556586743990509758982226802490872510799703866488813976393559743813840875782451824955981513425227642500020181423647030855073567395200250498058132368868979505869111115599897671647673742257704781071493036084435163282693741999235099217732925250249209749352411528020062344855888843281828877670937705797079949884954466468087406878802966038851746851804979150438284670899350087235495730552228096536589521126461222181255258801673846441827596280942792605688421119225326193519865250316053849109546757569201366673334243562610082210028376470932369330720247165047808488890657968914514164595010019103541785796301722682876390233369916955639468668586244243865904071804777964320336030438744377311685435851086072074271621068271879048404450265126228910254727005746912083604848423338438745340592088528559821692546647363689772109860906098371137812772247293065240351499577174889987048609667224945046726431860191232365533972354427950679710537398250372998005785204805700876538391"}
Q := {"x": "-8.1199454674235818519661698260273837341950801868761318684697491001487795404756090544216968130608720616880109494929196326513328368799100604949214176925432835863949187704962332909023292175776097690128015196951679527356540825737795841096395230306190199738492283774078179884300429908306743044326891769544484384335223491368982863884983044787075815068138380192957889572857167876324988065334310356601232719312871399137319329484255958007522019174750870734326444974988753361832058289204744629258354559331519390016299470888886272479608302713528038730000840680716153666902827239148430688434819981927416570284431234004420472800224200926604306801566064935486249405371644936905598940411187796364413649217818931552103049678744631644778858786977736635153101663512863137349331199171292854184832871129992883591946497140695662875252377684213441699938149770285094211699297549555035602472083843369167695590077065173398244724477459687269951283491663379456943132739090268772337924931208598429904791503973125217528386124835072902203500482338299421422020120405345265319699161516089102502866634701671427200169763769037124138479585453580315214411335731679171463747628820246324769416967479457028005971957109470014969125962856592875455968965276459445850397827935952689470225616449181670648079221571172693975187299025645894897749934169896687780431545590994141918968041726296692443714202663451891710761143199139151502425427433746783935159201052682012686780777344240818120500289995147257974011567035938619970715531796959657278853536684942438249121715747588436891168461985193826953897510414546014619493341662582839241544249224507620569232297302271348979237541487777023668977097088633454620021935050271958232963954986164523104458719231036242157847176226222076865139883814794965863398134917272280853504373055911545291655525552524370116847109051695794278343712368895043077283845303288985885365826598278059854358468675238723729562909583851275971219102930701159493735744814989808074108723271186216278468160642153834455356996563068242025652", "y": "-1.7923138798494186153996796413244568741860617431836974887486777194886221033450605965050659342358711996748691852772856199514228701425762303737911645226855522145273395977854422268198631371956846731105133175911811687529676123577994027024470456593611826986430602155784335822490847061539870193244959435076918252953119802072055629571812646750628451293346310556840915226616344210780040647897183730735344936422069884477612854328754273569705093108806072763495142997376412857569326175677476512863000779854695225489088219172620150952173987205278053879467063908031922068508332195987171487819006871942116667657550141639444420248997081936160574112475323182187227809515875565546746462787470153028725376300869761782543279639973722425356111051926513444129903944278662431519762338300542077732813997759752266884850939728568163223409609110614072009065307840944014746357171196297296472389360136207546256720244759849903652988422031295455028048736465482330390249839384150468980183053958027149230815380185399824817589671275208627341491603438169761496291315805059700450058054880990427010049717850092125995607715749385964862804684539171907168608520776741240921074784157825998134657515807560301199516889369556610328126164835213350548555788115980700833224501830815116402760796386606638605013337314154286817247778684906018145151912516413477543503352988374548988831439307402391305259354410889697477339070122792516976578491572812400810722562345530930905375257512346976330734876976624553014168158110906057485071629793563186263682747910919428425910988078658224653264653879043004188329036242261358650755030353827588045519886577646973671999316686480905311805234257808680393444829318653325382554649715980089983271630844178161310252416962767544628583678653480505137416482022768904793853745526306912897096039389730527808665322483133525262772351728687351152385967124903241255654103625855370111723661630247069144316078064483171223032994042383346740768730577090878075824490531973969914565518249492797429402467119498861164788828299439706800696"}
P := {"x": "33.24408033546304038353542610398306591711400531906316732661039083904804777572572031777158266113380922774269460303831812379980928523970661890672857153463634075340007533733711412917719161471355679066134978778141916266194062740531981553981132557590216793171512323846344704873816313659321281549775721600588606744334611436224450500899602776090276423525145143624705220581172406804708579928643704868734665420069883831251231970284344030666482125412204903434641284767850857705053657589108474812156471669768609116872293285105257501590345113579889902779848173468380353070635149735517744178632579925749682509672620646022054612409524160064000171865907436280136403937645745834848919027420544156359891175390374782472946057294754407639736853691350675746136052976455786198724913167024719453142429283903377798262991847830021551022249566477982907135888407032505017019512089361727180611105742063356630307741036289117234475985148377549779816218814746317559920310951939936071218937584648184338254694869992001989646838881678802399236702794954532177528958120211894313914215508444490212792973653425531746168264084721994598038819455216671001075201235326179386994825219608699819342081298427175329492850276500926142678003657465919122728774387596515331442086685487566977029674015309776878695943014441451974653149483490462074288811701781423602008752723634215890334084555543366338999792067223636402234171824233513560829658097824267451373317094237366387795632383735745780235735694907295018602266435101709603577934603949167680667580063318752744217506929866434165792200728970089269681419802146604029946201306675298176294727380217833309702095771468504849157884332411975684699879809766122473222016197934574015418013446882654088771705699573918046580418919888108621968602895767037671981395418071738356789764714940859333245405446884985201103453803452349420424185617114761766871208158156848378144435090754831368710703485177011361977410145687772128204168360594252196316597448219820938095380665782427493218861793854171078767833435913495019347", "y": "45.602681238482814009394154089371777993296564575733860540908417519767847173490667338874778109133865703750762863365643778481661413774799519511859181143397639757843446890297553779726331790926550490944182341618571903404364201680649917706236973529843686714208050978355323929721218237965192741775632819926364308035546421973997871326671109523149939073894649358409221011565890000602275145450893501797503746098315224815420639267014524087847506817286404961549116721221895136425243648013522989324481796696238889496378937276666754042779790801721639055600334902512188304984722590001861452575284970719071205685110367214969213701764811673074656042266761668014498823269739120011245486333636140768954452969842908657732092888692353483072264107842667070468098839779316367472300317501455549086617142001515115133586599778182237363884697313930913434939122965979286825446552627657669427288573971098904707959363824622856955297151098364336978359701004467467500702280689561926080924413634043879135982157168084187988748242103574111190232437241840220506473144460714645155270952219344758070969703576100895417808986901047208752704340184935781033526170790324699265395341684496193786359145090927917665658399082402855934207993962164277691913851858989247580233962422214740265887417930801921511134195813538042069481576219078514028283742530889620240328360376721761896454551530250938504491115712304492868503883706575767816643021020959006355376903632023351478284735373516372864243143617089043587347760925356295974621981348749008316500618786617541409001859379127502984196019256092884534315852175545065932064582809945069940932521643582401267006078312748361283487812503005209823822849942309853834270445928664729009330987570149453081139633081004361859597171831574724776007511749774913915156314183124369733874537087485720636355957095272724704632301233109561910574658629510375255638351755530069944866203482256701638590346085624614638143734961212235782670921624583367088536455987841076478526568196007754942175681122771872614833005156597935023667"}

Need to prove:
concyclic(P, Q, R, S)

Proof:
By line_definition on D, R, Line(C, D) we get Line(C, D) == Line(D, R)
By line_definition on R, P, Line(C, D) we get Line(C, D) == Line(P, R)
By line_definition on S, A, Line(A, E) we get Line(A, E) == Line(A, S)
By line_definition on R, E, Line(A, E) we get Line(A, E) == Line(E, R)
By line_definition on P, D, Line(C, D) we get Line(C, D) == Line(D, P)
By line_definition on E, S, Line(A, E) we get Line(A, E) == Line(E, S)
By line_definition on Q, T, Line(C, T) we get Line(C, T) == Line(Q, T)
By line_definition on A, P, Line(A, B) we get Line(A, B) == Line(A, P)
By line_definition on Q, P, Line(A, B) we get Line(A, B) == Line(P, Q)
By line_definition on A, Q, Line(A, B) we get Line(A, B) == Line(A, Q)
By line_definition on P, C, Line(C, D) we get Line(C, D) == Line(C, P)
By line_definition on C, Q, Line(C, T) we get Line(C, Q) == Line(C, T)
By line_definition on B, Q, Line(A, B) we get Line(A, B) == Line(B, Q)
By line_definition on T, S, Line(D, T) we get Line(D, T) == Line(S, T)
By line_definition on R, C, Line(C, D) we get Line(C, D) == Line(C, R)
By line_definition on A, R, Line(A, E) we get Line(A, E) == Line(A, R)
By line_definition on P, B, Line(A, B) we get Line(A, B) == Line(B, P)
By line_definition on D, S, Line(D, T) we get Line(D, S) == Line(D, T)
By line_definition on S, R, Line(A, E) we get Line(A, E) == Line(R, S)
By line_intersection_definition on E, Line(E, T), Line(A, E) we get E == line_intersection(Line(A, E), Line(E, T))
By line_intersection_definition on B, Line(B, T), Line(A, B) we get B == line_intersection(Line(A, B), Line(B, T))
By line_intersection_definition on T, Line(E, T), Line(B, T) we get T == line_intersection(Line(B, T), Line(E, T))
By line_intersection_definition on T, Line(C, T), Line(D, T) we get T == line_intersection(Line(C, T), Line(D, T))
By line_intersection_definition on T, Line(E, T), Line(D, T) we get T == line_intersection(Line(D, T), Line(E, T))
By line_intersection_definition on R, Line(C, D), Line(A, E) we get R == line_intersection(Line(A, E), Line(C, D))
By line_intersection_definition on D, Line(D, T), Line(C, D) we get D == line_intersection(Line(C, D), Line(D, T))
By line_intersection_definition on T, Line(C, T), Line(B, T) we get T == line_intersection(Line(B, T), Line(C, T))
By line_intersection_definition on Q, Line(C, T), Line(A, B) we get Q == line_intersection(Line(A, B), Line(C, T))
By line_intersection_definition on S, Line(A, E), Line(D, T) we get S == line_intersection(Line(A, E), Line(D, T))
By line_intersection_definition on T, Line(C, T), Line(E, T) we get T == line_intersection(Line(C, T), Line(E, T))
By line_intersection_definition on A, Line(A, B), Line(A, E) we get A == line_intersection(Line(A, B), Line(A, E))
By line_intersection_definition on C, Line(C, D), Line(C, T) we get C == line_intersection(Line(C, D), Line(C, T))
By line_intersection_definition on P, Line(A, B), Line(C, D) we get P == line_intersection(Line(A, B), Line(C, D))
By line_intersection_definition on T, Line(D, T), Line(B, T) we get T == line_intersection(Line(B, T), Line(D, T))
By between_imply_not_between on A, B, P we get collinear_and_not_between(B, A, P)
By between_imply_not_between on R, E, A we get collinear_and_not_between(A, R, E)
By between_imply_not_between on P, B, A we get collinear_and_not_between(A, P, B)
By between_imply_not_between on Q, A, B we get collinear_and_not_between(A, Q, B)
By between_imply_not_between on S, A, E we get collinear_and_not_between(A, S, E)
By between_imply_not_between on A, E, R we get collinear_and_not_between(E, A, R)
By between_imply_not_between on B, A, Q we get collinear_and_not_between(A, B, Q)
By between_imply_not_between on E, A, S we get collinear_and_not_between(A, E, S)
By same_angle_v1 on E, A, S, T we get angle(A, E, T) == angle(S, E, T) mod 360
By same_angle_v2 on B, A, P, T we get angle(A, B, T) == angle(P, B, T) + 180 mod 360
By same_angle_v3 on E, R, A, T we get angle(R, E, T) == angle(A, E, T) + 180 mod 360
By same_angle_v0 on B, A, Q, T we get angle(A, B, T) == angle(Q, B, T) mod 360
By in_imply_collinear on R, D, C we get collinear(C, D, R)
By in_imply_collinear on S, T, D we get collinear(D, S, T)
By between_imply_segment_sum on P, B, A we get distance(A, P) == distance(B, P) + distance(A, B)
By in_imply_collinear on Q, T, C we get collinear(C, Q, T)
By in_imply_collinear on P, D, C we get collinear(C, D, P)
By between_imply_segment_sum on R, E, A we get distance(A, R) == distance(E, R) + distance(A, E)
By between_imply_segment_sum on S, A, E we get distance(E, S) == distance(A, S) + distance(A, E)
By between_imply_segment_sum on B, A, Q we get distance(B, Q) == distance(A, B) + distance(A, Q)
By reverse_direction on B, T we get 180 == direction(B, T) - direction(T, B) mod 360
By collinear_definition on B, A, P we get A in Line(B, P), P in Line(A, B), Line(A, B) == Line(B, P), 0 == 2 * angle(A, B, P) mod 360
By collinear_definition on B, Q, A we get Q in Line(A, B), A in Line(B, Q), Line(A, B) == Line(B, Q), 0 == 2 * angle(Q, B, A) mod 360
By reverse_direction on E, A we get 180 == direction(E, A) - direction(A, E) mod 360
By collinear_definition on E, S, A we get S in Line(A, E), A in Line(E, S), Line(A, E) == Line(E, S), 0 == 2 * angle(S, E, A) mod 360
By reverse_direction on E, T we get 180 == direction(E, T) - direction(T, E) mod 360
By collinear_definition on E, R, A we get R in Line(A, E), A in Line(E, R), Line(A, E) == Line(E, R), 0 == 2 * angle(R, E, A) mod 360
By collinear_definition on B, P, A we get P in Line(A, B), A in Line(B, P), Line(A, B) == Line(B, P), 0 == 2 * angle(P, B, A) mod 360
By collinear_definition on E, A, R we get A in Line(E, R), R in Line(A, E), Line(A, E) == Line(E, R), 0 == 2 * angle(A, E, R) mod 360
By collinear_definition on E, A, S we get A in Line(E, S), S in Line(A, E), Line(A, E) == Line(E, S), 0 == 2 * angle(A, E, S) mod 360
By collinear_definition on B, A, Q we get A in Line(B, Q), Q in Line(A, B), Line(A, B) == Line(B, Q), 0 == 2 * angle(A, B, Q) mod 360
By reverse_direction on B, A we get 180 == direction(B, A) - direction(A, B) mod 360
By same_angle_v0 on A, E, R, B we get angle(E, A, B) == angle(R, A, B) mod 360
By same_angle_v3 on A, E, S, B we get angle(E, A, B) == angle(S, A, B) + 180 mod 360
By same_angle_v3 on A, Q, B, E we get angle(Q, A, E) == angle(B, A, E) + 180 mod 360
By collinear_definition on S, E, A we get E in Line(A, S), A in Line(E, S), Line(A, S) == Line(E, S), 0 == 2 * angle(E, S, A) mod 360
By same_angle_v1 on A, B, P, E we get angle(B, A, E) == angle(P, A, E) mod 360
By collinear_definition on A, B, P we get B in Line(A, P), P in Line(A, B), Line(A, B) == Line(A, P), 0 == 2 * angle(B, A, P) mod 360
By collinear_definition on A, S, E we get S in Line(A, E), E in Line(A, S), Line(A, E) == Line(A, S), 0 == 2 * angle(S, A, E) mod 360
By collinear_definition on A, R, E we get R in Line(A, E), E in Line(A, R), Line(A, E) == Line(A, R), 0 == 2 * angle(R, A, E) mod 360
By collinear_definition on A, E, S we get E in Line(A, S), S in Line(A, E), Line(A, E) == Line(A, S), 0 == 2 * angle(E, A, S) mod 360
By collinear_definition on Q, B, A we get B in Line(A, Q), A in Line(B, Q), Line(A, Q) == Line(B, Q), 0 == 2 * angle(B, Q, A) mod 360
By collinear_definition on R, A, E we get A in Line(E, R), E in Line(A, R), Line(A, R) == Line(E, R), 0 == 2 * angle(A, R, E) mod 360
By collinear_definition on A, Q, B we get Q in Line(A, B), B in Line(A, Q), Line(A, B) == Line(A, Q), 0 == 2 * angle(Q, A, B) mod 360
By collinear_definition on P, B, A we get B in Line(A, P), A in Line(B, P), Line(A, P) == Line(B, P), 0 == 2 * angle(B, P, A) mod 360
By collinear_definition on A, B, Q we get B in Line(A, Q), Q in Line(A, B), Line(A, B) == Line(A, Q), 0 == 2 * angle(B, A, Q) mod 360
By collinear_definition on Q, A, B we get A in Line(B, Q), B in Line(A, Q), Line(A, Q) == Line(B, Q), 0 == 2 * angle(A, Q, B) mod 360
By collinear_definition on P, A, B we get A in Line(B, P), B in Line(A, P), Line(A, P) == Line(B, P), 0 == 2 * angle(A, P, B) mod 360
By collinear_definition on S, A, E we get A in Line(E, S), E in Line(A, S), Line(A, S) == Line(E, S), 0 == 2 * angle(A, S, E) mod 360
By collinear_definition on A, E, R we get E in Line(A, R), R in Line(A, E), Line(A, E) == Line(A, R), 0 == 2 * angle(E, A, R) mod 360
By collinear_definition on A, P, B we get P in Line(A, B), B in Line(A, P), Line(A, B) == Line(A, P), 0 == 2 * angle(P, A, B) mod 360
By collinear_definition on R, E, A we get E in Line(A, R), A in Line(E, R), Line(A, R) == Line(E, R), 0 == 2 * angle(E, R, A) mod 360
By isosceles_triangle_properties on T, C, E we get distance(C, T) == distance(E, T), angle(C, E, T) == angle(T, C, E) mod 360
By isosceles_triangle_properties on T, B, D we get distance(B, T) == distance(D, T), angle(B, D, T) == angle(T, B, D) mod 360
By isosceles_triangle_properties on T, D, B we get distance(B, T) == distance(D, T), angle(D, B, T) == angle(T, D, B) mod 360
By isosceles_triangle_properties on T, E, C we get distance(C, T) == distance(E, T), angle(E, C, T) == angle(T, E, C) mod 360
By between_implies_angles on Q, A, B we get 180 == angle(Q, A, B) mod 360, 0 == angle(A, B, Q) mod 360, 0 == angle(B, Q, A) mod 360
By between_implies_angles on B, A, Q we get 180 == angle(B, A, Q) mod 360, 0 == angle(A, Q, B) mod 360, 0 == angle(Q, B, A) mod 360
By between_implies_angles on S, A, E we get 180 == angle(S, A, E) mod 360, 0 == angle(A, E, S) mod 360, 0 == angle(E, S, A) mod 360
By between_implies_angles on A, B, P we get 180 == angle(A, B, P) mod 360, 0 == angle(B, P, A) mod 360, 0 == angle(P, A, B) mod 360
By between_implies_angles on A, E, R we get 180 == angle(A, E, R) mod 360, 0 == angle(E, R, A) mod 360, 0 == angle(R, A, E) mod 360
By between_implies_angles on P, B, A we get 180 == angle(P, B, A) mod 360, 0 == angle(B, A, P) mod 360, 0 == angle(A, P, B) mod 360
By between_implies_angles on E, A, S we get 180 == angle(E, A, S) mod 360, 0 == angle(A, S, E) mod 360, 0 == angle(S, E, A) mod 360
By between_implies_angles on R, E, A we get 180 == angle(R, E, A) mod 360, 0 == angle(E, A, R) mod 360, 0 == angle(A, R, E) mod 360
By sss_congruence_v0 on E, T, D, C, T, B we get congruent_triangles(B, C, T, D, E, T)
By sss_congruence_v0 on T, D, E, T, B, C we get congruent_triangles(B, C, T, D, E, T)
By sss_congruence_v0 on T, D, E, T, B, C we get congruent_triangles(B, C, T, D, E, T)
By sss_congruence_v0 on D, E, T, B, C, T we get congruent_triangles(B, C, T, D, E, T)
By sss_congruence_v1 on E, D, T, C, B, T we get congruent_triangles(B, C, T, D, E, T)
By sss_congruence_v0 on C, T, B, E, T, D we get congruent_triangles(B, C, T, D, E, T)
By sss_congruence_v1 on E, D, T, C, B, T we get congruent_triangles(B, C, T, D, E, T)
By sss_congruence_v1 on E, D, T, C, B, T we get congruent_triangles(B, C, T, D, E, T)
By sss_congruence_v1 on T, E, D, T, C, B we get congruent_triangles(B, C, T, D, E, T)
By sss_congruence_v1 on T, C, B, T, E, D we get congruent_triangles(B, C, T, D, E, T)
By sss_congruence_v0 on E, T, D, C, T, B we get congruent_triangles(B, C, T, D, E, T)
By sss_congruence_v0 on D, E, T, B, C, T we get congruent_triangles(B, C, T, D, E, T)
By sss_congruence_v1 on T, C, B, T, E, D we get congruent_triangles(B, C, T, D, E, T)
By sss_congruence_v1 on C, B, T, E, D, T we get congruent_triangles(B, C, T, D, E, T)
By sss_congruence_v0 on E, T, D, C, T, B we get congruent_triangles(B, C, T, D, E, T)
By sss_congruence_v1 on T, E, D, T, C, B we get congruent_triangles(B, C, T, D, E, T)
By sss_congruence_v0 on D, E, T, B, C, T we get congruent_triangles(B, C, T, D, E, T)
By sss_congruence_v0 on E, T, D, C, T, B we get congruent_triangles(B, C, T, D, E, T)
By sss_congruence_v1 on D, T, E, B, T, C we get congruent_triangles(B, C, T, D, E, T)
By sss_congruence_v0 on B, C, T, D, E, T we get congruent_triangles(B, C, T, D, E, T)
By sss_congruence_v1 on C, B, T, E, D, T we get congruent_triangles(B, C, T, D, E, T)
By sss_congruence_v0 on C, T, B, E, T, D we get congruent_triangles(B, C, T, D, E, T)
By sss_congruence_v1 on T, E, D, T, C, B we get congruent_triangles(B, C, T, D, E, T)
By sss_congruence_v1 on D, T, E, B, T, C we get congruent_triangles(B, C, T, D, E, T)
By sss_congruence_v1 on C, B, T, E, D, T we get congruent_triangles(B, C, T, D, E, T)
By sss_congruence_v1 on B, T, C, D, T, E we get congruent_triangles(B, C, T, D, E, T)
By sss_congruence_v1 on B, T, C, D, T, E we get congruent_triangles(B, C, T, D, E, T)
By sss_congruence_v0 on D, E, T, B, C, T we get congruent_triangles(B, C, T, D, E, T)
By sss_congruence_v1 on B, T, C, D, T, E we get congruent_triangles(B, C, T, D, E, T)
By sss_congruence_v0 on T, B, C, T, D, E we get congruent_triangles(B, C, T, D, E, T)
By sss_congruence_v0 on T, D, E, T, B, C we get congruent_triangles(B, C, T, D, E, T)
By sss_congruence_v1 on D, T, E, B, T, C we get congruent_triangles(B, C, T, D, E, T)
By sss_congruence_v0 on C, T, B, E, T, D we get congruent_triangles(B, C, T, D, E, T)
By sss_congruence_v0 on B, C, T, D, E, T we get congruent_triangles(B, C, T, D, E, T)
By sss_congruence_v1 on T, C, B, T, E, D we get congruent_triangles(B, C, T, D, E, T)
By sss_congruence_v1 on T, E, D, T, C, B we get congruent_triangles(B, C, T, D, E, T)
By sss_congruence_v1 on T, C, B, T, E, D we get congruent_triangles(B, C, T, D, E, T)
By sss_congruence_v1 on C, B, T, E, D, T we get congruent_triangles(B, C, T, D, E, T)
By sss_congruence_v0 on B, C, T, D, E, T we get congruent_triangles(B, C, T, D, E, T)
By sss_congruence_v0 on T, B, C, T, D, E we get congruent_triangles(B, C, T, D, E, T)
By sss_congruence_v0 on T, D, E, T, B, C we get congruent_triangles(B, C, T, D, E, T)
By sss_congruence_v1 on D, T, E, B, T, C we get congruent_triangles(B, C, T, D, E, T)
By sss_congruence_v0 on E, T, D, C, T, B we get congruent_triangles(B, C, T, D, E, T)
By sss_congruence_v0 on T, B, C, T, D, E we get congruent_triangles(B, C, T, D, E, T)
By sss_congruence_v0 on C, T, B, E, T, D we get congruent_triangles(B, C, T, D, E, T)
By sss_congruence_v1 on T, C, B, T, E, D we get congruent_triangles(B, C, T, D, E, T)
By sss_congruence_v1 on B, T, C, D, T, E we get congruent_triangles(B, C, T, D, E, T)
By sss_congruence_v0 on D, E, T, B, C, T we get congruent_triangles(B, C, T, D, E, T)
By sss_congruence_v1 on E, D, T, C, B, T we get congruent_triangles(B, C, T, D, E, T)
By sss_congruence_v0 on B, C, T, D, E, T we get congruent_triangles(B, C, T, D, E, T)
By sss_congruence_v1 on E, D, T, C, B, T we get congruent_triangles(B, C, T, D, E, T)
By sss_congruence_v0 on T, B, C, T, D, E we get congruent_triangles(B, C, T, D, E, T)
By sss_congruence_v1 on B, T, C, D, T, E we get congruent_triangles(B, C, T, D, E, T)
By sss_congruence_v1 on C, B, T, E, D, T we get congruent_triangles(B, C, T, D, E, T)
By sss_congruence_v0 on T, D, E, T, B, C we get congruent_triangles(B, C, T, D, E, T)
By sss_congruence_v1 on D, T, E, B, T, C we get congruent_triangles(B, C, T, D, E, T)
By sss_congruence_v0 on C, T, B, E, T, D we get congruent_triangles(B, C, T, D, E, T)
By sss_congruence_v0 on B, C, T, D, E, T we get congruent_triangles(B, C, T, D, E, T)
By sss_congruence_v0 on T, B, C, T, D, E we get congruent_triangles(B, C, T, D, E, T)
By sss_congruence_v1 on T, E, D, T, C, B we get congruent_triangles(B, C, T, D, E, T)
By concurrent_sufficient_conditions on Line(C, Q), Line(E, T), Line(B, T) we get concurrent(Line(B, T), Line(C, Q), Line(E, T))
By concurrent_sufficient_conditions on Line(D, S), Line(C, Q), Line(E, T) we get concurrent(Line(C, Q), Line(D, S), Line(E, T))
By concurrent_sufficient_conditions on Line(B, T), Line(E, T), Line(C, Q) we get concurrent(Line(B, T), Line(C, Q), Line(E, T))
By concurrent_sufficient_conditions on Line(E, T), Line(D, S), Line(C, Q) we get concurrent(Line(C, Q), Line(D, S), Line(E, T))
By concurrent_sufficient_conditions on Line(D, S), Line(E, T), Line(B, T) we get concurrent(Line(B, T), Line(D, S), Line(E, T))
By concurrent_sufficient_conditions on Line(C, Q), Line(D, S), Line(E, T) we get concurrent(Line(C, Q), Line(D, S), Line(E, T))
By concurrent_sufficient_conditions on Line(B, T), Line(C, Q), Line(D, S) we get concurrent(Line(B, T), Line(C, Q), Line(D, S))
By concurrent_sufficient_conditions on Line(D, S), Line(B, T), Line(C, Q) we get concurrent(Line(B, T), Line(C, Q), Line(D, S))
By concurrent_sufficient_conditions on Line(E, T), Line(B, T), Line(C, Q) we get concurrent(Line(B, T), Line(C, Q), Line(E, T))
By concurrent_sufficient_conditions on Line(D, S), Line(B, T), Line(E, T) we get concurrent(Line(B, T), Line(D, S), Line(E, T))
By concurrent_sufficient_conditions on Line(C, Q), Line(D, S), Line(B, T) we get concurrent(Line(B, T), Line(C, Q), Line(D, S))
By concurrent_sufficient_conditions on Line(E, T), Line(D, S), Line(B, T) we get concurrent(Line(B, T), Line(D, S), Line(E, T))
By concurrent_sufficient_conditions on Line(D, S), Line(E, T), Line(C, Q) we get concurrent(Line(C, Q), Line(D, S), Line(E, T))
By concurrent_sufficient_conditions on Line(B, T), Line(D, S), Line(C, Q) we get concurrent(Line(B, T), Line(C, Q), Line(D, S))
By concurrent_sufficient_conditions on Line(B, T), Line(C, Q), Line(E, T) we get concurrent(Line(B, T), Line(C, Q), Line(E, T))
By concurrent_sufficient_conditions on Line(C, Q), Line(B, T), Line(D, S) we get concurrent(Line(B, T), Line(C, Q), Line(D, S))
By concurrent_sufficient_conditions on Line(E, T), Line(B, T), Line(D, S) we get concurrent(Line(B, T), Line(D, S), Line(E, T))
By concurrent_sufficient_conditions on Line(E, T), Line(C, Q), Line(D, S) we get concurrent(Line(C, Q), Line(D, S), Line(E, T))
By concurrent_sufficient_conditions on Line(B, T), Line(D, S), Line(E, T) we get concurrent(Line(B, T), Line(D, S), Line(E, T))
By concurrent_sufficient_conditions on Line(D, S), Line(C, Q), Line(B, T) we get concurrent(Line(B, T), Line(C, Q), Line(D, S))
By concurrent_sufficient_conditions on Line(C, Q), Line(B, T), Line(E, T) we get concurrent(Line(B, T), Line(C, Q), Line(E, T))
By concurrent_sufficient_conditions on Line(E, T), Line(C, Q), Line(B, T) we get concurrent(Line(B, T), Line(C, Q), Line(E, T))
By concurrent_sufficient_conditions on Line(B, T), Line(E, T), Line(D, S) we get concurrent(Line(B, T), Line(D, S), Line(E, T))
By concurrent_sufficient_conditions on Line(C, Q), Line(E, T), Line(D, S) we get concurrent(Line(C, Q), Line(D, S), Line(E, T))
By line_intersection_definition on D, Line(D, S), Line(D, E) we get D == line_intersection(Line(D, E), Line(D, S))
By line_intersection_definition on C, Line(C, E), Line(C, D) we get C == line_intersection(Line(C, D), Line(C, E))
By line_intersection_definition on D, Line(B, D), Line(D, E) we get D == line_intersection(Line(B, D), Line(D, E))
By line_intersection_definition on D, Line(B, D), Line(C, D) we get D == line_intersection(Line(B, D), Line(C, D))
By line_intersection_definition on D, Line(C, D), Line(D, E) we get D == line_intersection(Line(C, D), Line(D, E))
By line_intersection_definition on B, Line(A, B), Line(B, D) we get B == line_intersection(Line(A, B), Line(B, D))
By line_intersection_definition on C, Line(B, C), Line(C, Q) we get C == line_intersection(Line(B, C), Line(C, Q))
By line_intersection_definition on C, Line(C, E), Line(B, C) we get C == line_intersection(Line(B, C), Line(C, E))
By line_intersection_definition on E, Line(D, E), Line(C, E) we get E == line_intersection(Line(C, E), Line(D, E))
By line_intersection_definition on E, Line(E, T), Line(C, E) we get E == line_intersection(Line(C, E), Line(E, T))
By line_intersection_definition on B, Line(B, T), Line(B, C) we get B == line_intersection(Line(B, C), Line(B, T))
By line_intersection_definition on B, Line(B, D), Line(B, C) we get B == line_intersection(Line(B, C), Line(B, D))
By line_intersection_definition on E, Line(A, E), Line(C, E) we get E == line_intersection(Line(A, E), Line(C, E))
By line_intersection_definition on E, Line(D, E), Line(A, E) we get E == line_intersection(Line(A, E), Line(D, E))
By line_intersection_definition on B, Line(B, C), Line(A, B) we get B == line_intersection(Line(A, B), Line(B, C))
By line_intersection_definition on E, Line(E, T), Line(D, E) we get E == line_intersection(Line(D, E), Line(E, T))
By line_intersection_definition on D, Line(B, D), Line(D, S) we get D == line_intersection(Line(B, D), Line(D, S))
By line_intersection_definition on C, Line(B, C), Line(C, D) we get C == line_intersection(Line(B, C), Line(C, D))
By line_intersection_definition on B, Line(B, D), Line(B, T) we get B == line_intersection(Line(B, D), Line(B, T))
By line_intersection_definition on C, Line(C, Q), Line(C, E) we get C == line_intersection(Line(C, E), Line(C, Q))
By same_angle_converse_v1 on A, S, R, E we get collinear(A, R, S)
By same_angle_converse_v1 on B, P, Q, T we get collinear(B, P, Q)
By same_angle_converse_v1 on A, P, Q, E we get collinear(A, P, Q)
By same_angle_converse_v1 on E, R, S, A we get collinear(E, R, S)
By same_angle_v2 on B, A, P, C we get angle(A, B, C) == angle(P, B, C) + 180 mod 360
By same_angle_v0 on B, A, Q, D we get angle(A, B, D) == angle(Q, B, D) mod 360
By same_angle_v2 on E, R, A, D we get angle(R, E, D) == angle(A, E, D) + 180 mod 360
By same_angle_v1 on E, A, S, D we get angle(A, E, D) == angle(S, E, D) mod 360
By same_angle_v1 on A, P, B, R we get angle(B, A, R) == angle(P, A, R) mod 360
By same_angle_v1 on E, A, S, C we get angle(A, E, C) == angle(S, E, C) mod 360
By same_angle_v3 on A, Q, B, R we get angle(Q, A, R) == angle(B, A, R) + 180 mod 360
By same_angle_v2 on B, A, P, D we get angle(A, B, D) == angle(P, B, D) + 180 mod 360
By same_angle_v0 on A, R, E, P we get angle(E, A, P) == angle(R, A, P) mod 360
By same_angle_v0 on A, P, B, S we get angle(B, A, S) == angle(P, A, S) mod 360
By same_angle_v3 on A, B, Q, S we get angle(B, A, S) == angle(Q, A, S) + 180 mod 360
By same_angle_v2 on A, S, E, Q we get angle(S, A, Q) == angle(E, A, Q) + 180 mod 360
By same_angle_v3 on E, R, A, C we get angle(R, E, C) == angle(A, E, C) + 180 mod 360
By same_angle_v1 on A, R, E, Q we get angle(E, A, Q) == angle(R, A, Q) mod 360
By same_angle_v2 on A, E, S, P we get angle(E, A, P) == angle(S, A, P) + 180 mod 360
By same_angle_v0 on B, Q, A, C we get angle(A, B, C) == angle(Q, B, C) mod 360
By same_angle_v3 on T, Q, C, D we get angle(Q, T, D) == angle(C, T, D) + 180 mod 360
By same_angle_v0 on C, Q, T, E we get angle(Q, C, E) == angle(T, C, E) mod 360
By same_angle_v1 on D, S, T, B we get angle(S, D, B) == angle(T, D, B) mod 360
By same_angle_v2 on T, Q, C, E we get angle(Q, T, E) == angle(C, T, E) + 180 mod 360
By same_angle_v2 on T, S, D, E we get angle(S, T, E) == angle(D, T, E) + 180 mod 360
By same_angle_v0 on P, B, A, C we get angle(A, P, C) == angle(B, P, C) mod 360
By same_angle_v3 on T, C, Q, B we get angle(C, T, B) == angle(Q, T, B) + 180 mod 360
By same_angle_v1 on C, T, Q, B we get angle(Q, C, B) == angle(T, C, B) mod 360
By same_angle_v3 on T, D, S, C we get angle(D, T, C) == angle(S, T, C) + 180 mod 360
By same_angle_v1 on Q, A, B, C we get angle(A, Q, C) == angle(B, Q, C) mod 360
By in_imply_collinear on P, D, R we get collinear(D, P, R)
By same_angle_v0 on S, A, E, T we get angle(A, S, T) == angle(E, S, T) mod 360
By same_angle_v1 on Q, A, B, T we get angle(A, Q, T) == angle(B, Q, T) mod 360
By same_angle_v0 on D, T, S, E we get angle(S, D, E) == angle(T, D, E) mod 360
By same_angle_v1 on R, E, A, P we get angle(A, R, P) == angle(E, R, P) mod 360
By same_angle_v1 on R, A, E, C we get angle(A, R, C) == angle(E, R, C) mod 360
By same_angle_v1 on R, E, A, D we get angle(A, R, D) == angle(E, R, D) mod 360
By same_angle_v0 on P, B, A, D we get angle(A, P, D) == angle(B, P, D) mod 360
By same_angle_v2 on T, D, S, B we get angle(D, T, B) == angle(S, T, B) + 180 mod 360
By same_angle_v0 on S, A, E, D we get angle(A, S, D) == angle(E, S, D) mod 360
By same_angle_v0 on P, A, B, R we get angle(A, P, R) == angle(B, P, R) mod 360
By probably_between_and_collinear_implies_between on Q, T, C we get between(C, T, Q)
By in_imply_collinear on P, R, C we get collinear(C, P, R)
By probably_between_and_collinear_implies_between on D, C, P we get between(D, C, P)
By probably_between_and_collinear_implies_between on D, T, S we get between(D, T, S)
By probably_between_and_collinear_implies_between on C, D, R we get between(C, D, R)
By reverse_direction on P, B we get 180 == direction(P, B) - direction(B, P) mod 360
By reverse_direction on B, Q we get 180 == direction(B, Q) - direction(Q, B) mod 360
By reverse_direction on T, D we get 180 == direction(T, D) - direction(D, T) mod 360
By reverse_direction on R, A we get 180 == direction(R, A) - direction(A, R) mod 360
By reverse_direction on Q, A we get 180 == direction(Q, A) - direction(A, Q) mod 360
By reverse_direction on S, A we get 180 == direction(S, A) - direction(A, S) mod 360
By reverse_direction on D, T we get 180 == direction(D, T) - direction(T, D) mod 360
By reverse_direction on E, D we get 180 == direction(E, D) - direction(D, E) mod 360
By reverse_direction on E, S we get 180 == direction(E, S) - direction(S, E) mod 360
By reverse_direction on A, P we get 180 == direction(A, P) - direction(P, A) mod 360
By reverse_direction on T, C we get 180 == direction(T, C) - direction(C, T) mod 360
By reverse_direction on A, S we get 180 == direction(A, S) - direction(S, A) mod 360
By aa_anti_similarity on T, B, D, T, D, B we get anti_similar_triangles(B, D, T, D, B, T)
By reverse_direction on A, Q we get 180 == direction(A, Q) - direction(Q, A) mod 360
By aa_anti_similarity on T, C, E, T, E, C we get anti_similar_triangles(C, E, T, E, C, T)
By reverse_direction on E, R we get 180 == direction(E, R) - direction(R, E) mod 360
By reverse_direction on C, E we get 180 == direction(C, E) - direction(E, C) mod 360
By aa_anti_similarity on T, E, C, T, C, E we get anti_similar_triangles(C, E, T, E, C, T)
By reverse_direction on D, B we get 180 == direction(D, B) - direction(B, D) mod 360
By reverse_direction on S, E we get 180 == direction(S, E) - direction(E, S) mod 360
By reverse_direction on Q, B we get 180 == direction(Q, B) - direction(B, Q) mod 360
By reverse_direction on P, A we get 180 == direction(P, A) - direction(A, P) mod 360
By reverse_direction on R, E we get 180 == direction(R, E) - direction(E, R) mod 360
By aa_anti_similarity on T, D, B, T, B, D we get anti_similar_triangles(B, D, T, D, B, T)
By reverse_direction on A, R we get 180 == direction(A, R) - direction(R, A) mod 360
By reverse_direction on C, B we get 180 == direction(C, B) - direction(B, C) mod 360
By reverse_direction on B, C we get 180 == direction(B, C) - direction(C, B) mod 360
By reverse_direction on C, T we get 180 == direction(C, T) - direction(T, C) mod 360
By reverse_direction on E, C we get 180 == direction(E, C) - direction(C, E) mod 360
By reverse_direction on B, D we get 180 == direction(B, D) - direction(D, B) mod 360
By reverse_direction on D, E we get 180 == direction(D, E) - direction(E, D) mod 360
By reverse_direction on B, P we get 180 == direction(B, P) - direction(P, B) mod 360
By same_angle_v1 on D, T, S, C we get angle(S, D, C) == angle(T, D, C) mod 360
By same_angle_v0 on C, Q, T, R we get angle(Q, C, R) == angle(T, C, R) mod 360
By same_angle_v1 on C, D, R, E we get angle(D, C, E) == angle(R, C, E) mod 360
By same_angle_v1 on C, D, R, T we get angle(D, C, T) == angle(R, C, T) mod 360
By same_angle_v3 on C, P, D, E we get angle(P, C, E) == angle(D, C, E) + 180 mod 360
By same_angle_v3 on C, P, D, B we get angle(P, C, B) == angle(D, C, B) + 180 mod 360
By same_angle_v0 on D, P, C, E we get angle(C, D, E) == angle(P, D, E) mod 360
By same_angle_v1 on C, R, D, B we get angle(D, C, B) == angle(R, C, B) mod 360
By same_angle_v1 on S, D, T, A we get angle(D, S, A) == angle(T, S, A) mod 360
By same_angle_v0 on R, D, C, E we get angle(C, R, E) == angle(D, R, E) mod 360
By same_angle_v1 on P, C, D, A we get angle(C, P, A) == angle(D, P, A) mod 360
By same_angle_v1 on S, T, D, E we get angle(D, S, E) == angle(T, S, E) mod 360
By same_angle_v2 on D, C, R, B we get angle(C, D, B) == angle(R, D, B) + 180 mod 360
By same_angle_v0 on Q, C, T, A we get angle(C, Q, A) == angle(T, Q, A) mod 360
By same_angle_v2 on T, C, Q, S we get angle(C, T, S) == angle(Q, T, S) + 180 mod 360
By same_angle_v1 on C, Q, T, P we get angle(Q, C, P) == angle(T, C, P) mod 360
By same_angle_v1 on D, S, T, P we get angle(S, D, P) == angle(T, D, P) mod 360
By same_angle_v0 on R, C, D, A we get angle(C, R, A) == angle(D, R, A) mod 360
By same_angle_v0 on C, Q, T, D we get angle(Q, C, D) == angle(T, C, D) mod 360
By same_angle_v1 on P, D, C, B we get angle(C, P, B) == angle(D, P, B) mod 360
By same_angle_v3 on T, S, D, Q we get angle(S, T, Q) == angle(D, T, Q) + 180 mod 360
By same_angle_v0 on Q, T, C, B we get angle(C, Q, B) == angle(T, Q, B) mod 360
By same_angle_v3 on D, C, R, E we get angle(C, D, E) == angle(R, D, E) + 180 mod 360
By same_angle_v0 on D, C, P, T we get angle(C, D, T) == angle(P, D, T) mod 360
By same_angle_v0 on D, S, T, R we get angle(S, D, R) == angle(T, D, R) mod 360
By same_angle_v2 on D, C, R, T we get angle(C, D, T) == angle(R, D, T) + 180 mod 360
By same_angle_v2 on C, P, D, T we get angle(P, C, T) == angle(D, C, T) + 180 mod 360
By same_angle_v0 on D, P, C, B we get angle(C, D, B) == angle(P, D, B) mod 360
By internal_angle_bisector_definition_v0_r on A, P, A, B we get Line(B, P) == internal_angle_bisector(A, B, A)
By internal_angle_bisector_definition_v0_r on B, Q, B, A we get Line(A, Q) == internal_angle_bisector(B, A, B)
By internal_angle_bisector_definition_v0_r on B, A, B, Q we get Line(A, Q) == internal_angle_bisector(B, Q, B)
By external_angle_bisector_definition_v0_r on Q, A, P, B we get Line(A, B) == external_angle_bisector(P, B, Q)
By internal_angle_bisector_definition_v0_r on R, E, R, A we get Line(A, E) == internal_angle_bisector(R, A, R)
By collinear_definition on T, D, S we get D in Line(S, T), S in Line(D, T), Line(D, T) == Line(S, T), 0 == 2 * angle(D, T, S) mod 360
By external_angle_bisector_definition_v0_r on P, B, Q, A we get Line(A, B) == external_angle_bisector(P, A, Q)
By external_angle_bisector_definition_v0_r on S, A, R, E we get Line(A, E) == external_angle_bisector(R, E, S)
By external_angle_bisector_definition_v0_r on R, E, S, A we get Line(A, E) == external_angle_bisector(R, A, S)
By internal_angle_bisector_definition_v0_r on E, A, E, S we get Line(A, S) == internal_angle_bisector(E, S, E)
By internal_angle_bisector_definition_v0_r on B, A, B, P we get Line(A, P) == internal_angle_bisector(B, P, B)
By internal_angle_bisector_definition_v0_r on P, A, P, B we get Line(A, B) == internal_angle_bisector(P, B, P)
By internal_angle_bisector_definition_v0_r on S, E, S, A we get Line(A, E) == internal_angle_bisector(S, A, S)
By internal_angle_bisector_definition_v0_r on A, Q, A, B we get Line(B, Q) == internal_angle_bisector(A, B, A)
By internal_angle_bisector_definition_v0_r on Q, A, Q, B we get Line(A, B) == internal_angle_bisector(Q, B, Q)
By internal_angle_bisector_definition_v0_r on R, A, R, E we get Line(A, E) == internal_angle_bisector(R, E, R)
By internal_angle_bisector_definition_v0_r on A, B, A, Q we get Line(B, Q) == internal_angle_bisector(A, Q, A)
By internal_angle_bisector_definition_v0_r on A, B, A, P we get Line(B, P) == internal_angle_bisector(A, P, A)
By collinear_definition on T, Q, C we get Q in Line(C, T), C in Line(Q, T), Line(C, T) == Line(Q, T), 0 == 2 * angle(Q, T, C) mod 360
By internal_angle_bisector_definition_v0_r on A, E, A, S we get Line(E, S) == internal_angle_bisector(A, S, A)
By internal_angle_bisector_definition_v0_r on S, A, S, E we get Line(A, E) == internal_angle_bisector(S, E, S)
By collinear_definition on C, T, Q we get T in Line(C, Q), Q in Line(C, T), Line(C, Q) == Line(C, T), 0 == 2 * angle(T, C, Q) mod 360
By internal_angle_bisector_definition_v0_r on A, E, A, R we get Line(E, R) == internal_angle_bisector(A, R, A)
By internal_angle_bisector_definition_v0_r on B, P, B, A we get Line(A, P) == internal_angle_bisector(B, A, B)
By collinear_definition on T, S, D we get S in Line(D, T), D in Line(S, T), Line(D, T) == Line(S, T), 0 == 2 * angle(S, T, D) mod 360
By internal_angle_bisector_definition_v0_r on A, R, A, E we get Line(E, R) == internal_angle_bisector(A, E, A)
By internal_angle_bisector_definition_v0_r on Q, B, Q, A we get Line(A, B) == internal_angle_bisector(Q, A, Q)
By collinear_definition on D, T, S we get T in Line(D, S), S in Line(D, T), Line(D, S) == Line(D, T), 0 == 2 * angle(T, D, S) mod 360
By internal_angle_bisector_definition_v0_r on E, A, E, R we get Line(A, R) == internal_angle_bisector(E, R, E)
By internal_angle_bisector_definition_v0_r on E, R, E, A we get Line(A, R) == internal_angle_bisector(E, A, E)
By collinear_definition on D, S, T we get S in Line(D, T), T in Line(D, S), Line(D, S) == Line(D, T), 0 == 2 * angle(S, D, T) mod 360
By collinear_definition on C, Q, T we get Q in Line(C, T), T in Line(C, Q), Line(C, Q) == Line(C, T), 0 == 2 * angle(Q, C, T) mod 360
By internal_angle_bisector_definition_v0_r on A, S, A, E we get Line(E, S) == internal_angle_bisector(A, E, A)
By collinear_definition on T, C, Q we get C in Line(Q, T), Q in Line(C, T), Line(C, T) == Line(Q, T), 0 == 2 * angle(C, T, Q) mod 360
By internal_angle_bisector_definition_v0_r on E, S, E, A we get Line(A, S) == internal_angle_bisector(E, A, E)
By internal_angle_bisector_definition_v0_r on P, B, P, A we get Line(A, B) == internal_angle_bisector(P, A, P)
By same_angle_v0 on R, D, C, S we get angle(C, R, S) == angle(D, R, S) mod 360
By same_angle_v1 on C, R, D, Q we get angle(D, C, Q) == angle(R, C, Q) mod 360
By same_angle_v0 on Q, T, C, P we get angle(C, Q, P) == angle(T, Q, P) mod 360
By same_angle_v1 on S, T, D, R we get angle(D, S, R) == angle(T, S, R) mod 360
By same_angle_v2 on D, C, R, S we get angle(C, D, S) == angle(R, D, S) + 180 mod 360
By same_angle_v3 on C, P, D, Q we get angle(P, C, Q) == angle(D, C, Q) + 180 mod 360
By same_angle_v0 on D, P, C, S we get angle(C, D, S) == angle(P, D, S) mod 360
By same_angle_v1 on P, D, C, Q we get angle(C, P, Q) == angle(D, P, Q) mod 360
By collinear_definition on S, T, D we get T in Line(D, S), D in Line(S, T), Line(D, S) == Line(S, T), 0 == 2 * angle(T, S, D) mod 360
By collinear_definition on S, D, T we get D in Line(S, T), T in Line(D, S), Line(D, S) == Line(S, T), 0 == 2 * angle(D, S, T) mod 360
By collinear_definition on C, P, D we get P in Line(C, D), D in Line(C, P), Line(C, D) == Line(C, P), 0 == 2 * angle(P, C, D) mod 360
By collinear_definition on D, P, C we get P in Line(C, D), C in Line(D, P), Line(C, D) == Line(D, P), 0 == 2 * angle(P, D, C) mod 360
By collinear_definition on R, D, C we get D in Line(C, R), C in Line(D, R), Line(C, R) == Line(D, R), 0 == 2 * angle(D, R, C) mod 360
By collinear_definition on Q, C, T we get C in Line(Q, T), T in Line(C, Q), Line(C, Q) == Line(Q, T), 0 == 2 * angle(C, Q, T) mod 360
By collinear_definition on Q, T, C we get T in Line(C, Q), C in Line(Q, T), Line(C, Q) == Line(Q, T), 0 == 2 * angle(T, Q, C) mod 360
By collinear_definition on P, C, D we get C in Line(D, P), D in Line(C, P), Line(C, P) == Line(D, P), 0 == 2 * angle(C, P, D) mod 360
By collinear_definition on C, D, P we get D in Line(C, P), P in Line(C, D), Line(C, D) == Line(C, P), 0 == 2 * angle(D, C, P) mod 360
By collinear_definition on D, C, R we get C in Line(D, R), R in Line(C, D), Line(C, D) == Line(D, R), 0 == 2 * angle(C, D, R) mod 360
By collinear_definition on R, C, D we get C in Line(D, R), D in Line(C, R), Line(C, R) == Line(D, R), 0 == 2 * angle(C, R, D) mod 360
By collinear_definition on D, R, C we get R in Line(C, D), C in Line(D, R), Line(C, D) == Line(D, R), 0 == 2 * angle(R, D, C) mod 360
By collinear_definition on C, D, R we get D in Line(C, R), R in Line(C, D), Line(C, D) == Line(C, R), 0 == 2 * angle(D, C, R) mod 360
By collinear_definition on D, C, P we get C in Line(D, P), P in Line(C, D), Line(C, D) == Line(D, P), 0 == 2 * angle(C, D, P) mod 360
By collinear_definition on P, D, C we get D in Line(C, P), C in Line(D, P), Line(C, P) == Line(D, P), 0 == 2 * angle(D, P, C) mod 360
By collinear_definition on C, R, D we get R in Line(C, D), D in Line(C, R), Line(C, D) == Line(C, R), 0 == 2 * angle(R, C, D) mod 360
By similar_triangle_basic_properties on E, T, D, C, T, B we get angle(C, T, B) == angle(E, T, D) mod 360, angle(T, B, C) == angle(T, D, E) mod 360, angle(B, C, T) == angle(D, E, T) mod 360, log(distance(C, T)) + log(distance(D, T)) == log(distance(E, T)) + log(distance(B, T)), log(distance(B, T)) + log(distance(D, E)) == log(distance(D, T)) + log(distance(B, C)), log(distance(B, C)) + log(distance(E, T)) == log(distance(D, E)) + log(distance(C, T))
By similar_triangle_basic_properties on D, T, E, B, T, C we get angle(B, T, C) == angle(D, T, E) mod 360, angle(T, C, B) == angle(T, E, D) mod 360, angle(C, B, T) == angle(E, D, T) mod 360, log(distance(B, T)) + log(distance(E, T)) == log(distance(D, T)) + log(distance(C, T)), log(distance(C, T)) + log(distance(D, E)) == log(distance(E, T)) + log(distance(B, C)), log(distance(B, C)) + log(distance(D, T)) == log(distance(D, E)) + log(distance(B, T))
By concurrent_sufficient_conditions on Line(C, E), Line(A, E), Line(D, E) we get concurrent(Line(A, E), Line(C, E), Line(D, E))
By concurrent_sufficient_conditions on Line(C, Q), Line(C, D), Line(C, E) we get concurrent(Line(C, D), Line(C, E), Line(C, Q))
By concurrent_sufficient_conditions on Line(B, T), Line(A, B), Line(B, D) we get concurrent(Line(A, B), Line(B, D), Line(B, T))
By concurrent_sufficient_conditions on Line(C, Q), Line(C, E), Line(B, C) we get concurrent(Line(B, C), Line(C, E), Line(C, Q))
By concurrent_sufficient_conditions on Line(B, D), Line(D, S), Line(D, E) we get concurrent(Line(B, D), Line(D, E), Line(D, S))
By concurrent_sufficient_conditions on Line(A, B), Line(B, D), Line(B, T) we get concurrent(Line(A, B), Line(B, D), Line(B, T))
By concurrent_sufficient_conditions on Line(D, E), Line(E, T), Line(A, E) we get concurrent(Line(A, E), Line(D, E), Line(E, T))
By concurrent_sufficient_conditions on Line(B, C), Line(A, B), Line(B, D) we get concurrent(Line(A, B), Line(B, C), Line(B, D))
By concurrent_sufficient_conditions on Line(A, E), Line(C, E), Line(D, E) we get concurrent(Line(A, E), Line(C, E), Line(D, E))
By concurrent_sufficient_conditions on Line(C, E), Line(B, C), Line(C, Q) we get concurrent(Line(B, C), Line(C, E), Line(C, Q))
By concurrent_sufficient_conditions on Line(A, B), Line(B, C), Line(B, T) we get concurrent(Line(A, B), Line(B, C), Line(B, T))
By concurrent_sufficient_conditions on Line(A, B), Line(B, D), Line(B, C) we get concurrent(Line(A, B), Line(B, C), Line(B, D))
By concurrent_sufficient_conditions on Line(D, S), Line(C, D), Line(B, D) we get concurrent(Line(B, D), Line(C, D), Line(D, S))
By concurrent_sufficient_conditions on Line(B, T), Line(B, C), Line(B, D) we get concurrent(Line(B, C), Line(B, D), Line(B, T))
By concurrent_sufficient_conditions on Line(C, D), Line(D, E), Line(D, S) we get concurrent(Line(C, D), Line(D, E), Line(D, S))
By concurrent_sufficient_conditions on Line(C, E), Line(E, T), Line(A, E) we get concurrent(Line(A, E), Line(C, E), Line(E, T))
By concurrent_sufficient_conditions on Line(D, E), Line(C, E), Line(E, T) we get concurrent(Line(C, E), Line(D, E), Line(E, T))
By concurrent_sufficient_conditions on Line(E, T), Line(A, E), Line(D, E) we get concurrent(Line(A, E), Line(D, E), Line(E, T))
By concurrent_sufficient_conditions on Line(B, C), Line(C, D), Line(C, E) we get concurrent(Line(B, C), Line(C, D), Line(C, E))
By concurrent_sufficient_conditions on Line(A, E), Line(D, E), Line(C, E) we get concurrent(Line(A, E), Line(C, E), Line(D, E))
By concurrent_sufficient_conditions on Line(C, E), Line(C, Q), Line(C, D) we get concurrent(Line(C, D), Line(C, E), Line(C, Q))
By concurrent_sufficient_conditions on Line(C, D), Line(C, E), Line(C, Q) we get concurrent(Line(C, D), Line(C, E), Line(C, Q))
By concurrent_sufficient_conditions on Line(D, E), Line(B, D), Line(D, S) we get concurrent(Line(B, D), Line(D, E), Line(D, S))
By concurrent_sufficient_conditions on Line(B, C), Line(C, D), Line(C, Q) we get concurrent(Line(B, C), Line(C, D), Line(C, Q))
By concurrent_sufficient_conditions on Line(B, C), Line(C, Q), Line(C, E) we get concurrent(Line(B, C), Line(C, E), Line(C, Q))
By concurrent_sufficient_conditions on Line(E, T), Line(D, E), Line(C, E) we get concurrent(Line(C, E), Line(D, E), Line(E, T))
By concurrent_sufficient_conditions on Line(C, D), Line(D, S), Line(B, D) we get concurrent(Line(B, D), Line(C, D), Line(D, S))
By concurrent_sufficient_conditions on Line(D, E), Line(C, D), Line(D, S) we get concurrent(Line(C, D), Line(D, E), Line(D, S))
By concurrent_sufficient_conditions on Line(B, D), Line(B, T), Line(A, B) we get concurrent(Line(A, B), Line(B, D), Line(B, T))
By concurrent_sufficient_conditions on Line(E, T), Line(C, E), Line(A, E) we get concurrent(Line(A, E), Line(C, E), Line(E, T))
By concurrent_sufficient_conditions on Line(B, T), Line(B, D), Line(B, C) we get concurrent(Line(B, C), Line(B, D), Line(B, T))
By concurrent_sufficient_conditions on Line(D, E), Line(D, S), Line(C, D) we get concurrent(Line(C, D), Line(D, E), Line(D, S))
By concurrent_sufficient_conditions on Line(C, D), Line(B, D), Line(D, E) we get concurrent(Line(B, D), Line(C, D), Line(D, E))
By concurrent_sufficient_conditions on Line(C, E), Line(B, C), Line(C, D) we get concurrent(Line(B, C), Line(C, D), Line(C, E))
By concurrent_sufficient_conditions on Line(A, E), Line(C, E), Line(E, T) we get concurrent(Line(A, E), Line(C, E), Line(E, T))
By concurrent_sufficient_conditions on Line(C, Q), Line(B, C), Line(C, E) we get concurrent(Line(B, C), Line(C, E), Line(C, Q))
By concurrent_sufficient_conditions on Line(C, D), Line(B, C), Line(C, Q) we get concurrent(Line(B, C), Line(C, D), Line(C, Q))
By concurrent_sufficient_conditions on Line(C, D), Line(C, E), Line(B, C) we get concurrent(Line(B, C), Line(C, D), Line(C, E))
By concurrent_sufficient_conditions on Line(D, E), Line(E, T), Line(C, E) we get concurrent(Line(C, E), Line(D, E), Line(E, T))
By concurrent_sufficient_conditions on Line(C, D), Line(C, Q), Line(B, C) we get concurrent(Line(B, C), Line(C, D), Line(C, Q))
By concurrent_sufficient_conditions on Line(D, E), Line(C, E), Line(A, E) we get concurrent(Line(A, E), Line(C, E), Line(D, E))
By concurrent_sufficient_conditions on Line(B, D), Line(B, T), Line(B, C) we get concurrent(Line(B, C), Line(B, D), Line(B, T))
By concurrent_sufficient_conditions on Line(B, T), Line(B, D), Line(A, B) we get concurrent(Line(A, B), Line(B, D), Line(B, T))
By concurrent_sufficient_conditions on Line(C, D), Line(B, C), Line(C, E) we get concurrent(Line(B, C), Line(C, D), Line(C, E))
By concurrent_sufficient_conditions on Line(B, D), Line(B, C), Line(A, B) we get concurrent(Line(A, B), Line(B, C), Line(B, D))
By concurrent_sufficient_conditions on Line(A, B), Line(B, T), Line(B, D) we get concurrent(Line(A, B), Line(B, D), Line(B, T))
By concurrent_sufficient_conditions on Line(B, D), Line(A, B), Line(B, C) we get concurrent(Line(A, B), Line(B, C), Line(B, D))
By concurrent_sufficient_conditions on Line(B, C), Line(B, D), Line(A, B) we get concurrent(Line(A, B), Line(B, C), Line(B, D))
By concurrent_sufficient_conditions on Line(C, D), Line(B, D), Line(D, S) we get concurrent(Line(B, D), Line(C, D), Line(D, S))
By concurrent_sufficient_conditions on Line(B, D), Line(C, D), Line(D, S) we get concurrent(Line(B, D), Line(C, D), Line(D, S))
By concurrent_sufficient_conditions on Line(D, S), Line(D, E), Line(B, D) we get concurrent(Line(B, D), Line(D, E), Line(D, S))
By concurrent_sufficient_conditions on Line(B, T), Line(A, B), Line(B, C) we get concurrent(Line(A, B), Line(B, C), Line(B, T))
By concurrent_sufficient_conditions on Line(D, E), Line(A, E), Line(C, E) we get concurrent(Line(A, E), Line(C, E), Line(D, E))
By concurrent_sufficient_conditions on Line(D, S), Line(B, D), Line(D, E) we get concurrent(Line(B, D), Line(D, E), Line(D, S))
By concurrent_sufficient_conditions on Line(A, B), Line(B, C), Line(B, D) we get concurrent(Line(A, B), Line(B, C), Line(B, D))
By concurrent_sufficient_conditions on Line(A, E), Line(E, T), Line(C, E) we get concurrent(Line(A, E), Line(C, E), Line(E, T))
By concurrent_sufficient_conditions on Line(B, C), Line(B, T), Line(A, B) we get concurrent(Line(A, B), Line(B, C), Line(B, T))
By concurrent_sufficient_conditions on Line(C, D), Line(C, Q), Line(C, E) we get concurrent(Line(C, D), Line(C, E), Line(C, Q))
By concurrent_sufficient_conditions on Line(D, E), Line(C, D), Line(B, D) we get concurrent(Line(B, D), Line(C, D), Line(D, E))
By concurrent_sufficient_conditions on Line(C, E), Line(C, D), Line(B, C) we get concurrent(Line(B, C), Line(C, D), Line(C, E))
By concurrent_sufficient_conditions on Line(D, E), Line(D, S), Line(B, D) we get concurrent(Line(B, D), Line(D, E), Line(D, S))
By concurrent_sufficient_conditions on Line(B, C), Line(B, T), Line(B, D) we get concurrent(Line(B, C), Line(B, D), Line(B, T))
By concurrent_sufficient_conditions on Line(D, S), Line(D, E), Line(C, D) we get concurrent(Line(C, D), Line(D, E), Line(D, S))
By concurrent_sufficient_conditions on Line(C, E), Line(E, T), Line(D, E) we get concurrent(Line(C, E), Line(D, E), Line(E, T))
By concurrent_sufficient_conditions on Line(B, D), Line(B, C), Line(B, T) we get concurrent(Line(B, C), Line(B, D), Line(B, T))
By concurrent_sufficient_conditions on Line(E, T), Line(C, E), Line(D, E) we get concurrent(Line(C, E), Line(D, E), Line(E, T))
By concurrent_sufficient_conditions on Line(E, T), Line(D, E), Line(A, E) we get concurrent(Line(A, E), Line(D, E), Line(E, T))
By concurrent_sufficient_conditions on Line(B, D), Line(D, S), Line(C, D) we get concurrent(Line(B, D), Line(C, D), Line(D, S))
By concurrent_sufficient_conditions on Line(C, E), Line(A, E), Line(E, T) we get concurrent(Line(A, E), Line(C, E), Line(E, T))
By concurrent_sufficient_conditions on Line(A, E), Line(D, E), Line(E, T) we get concurrent(Line(A, E), Line(D, E), Line(E, T))
By concurrent_sufficient_conditions on Line(B, D), Line(D, E), Line(D, S) we get concurrent(Line(B, D), Line(D, E), Line(D, S))
By concurrent_sufficient_conditions on Line(C, Q), Line(C, D), Line(B, C) we get concurrent(Line(B, C), Line(C, D), Line(C, Q))
By concurrent_sufficient_conditions on Line(C, D), Line(D, E), Line(B, D) we get concurrent(Line(B, D), Line(C, D), Line(D, E))
By concurrent_sufficient_conditions on Line(B, C), Line(C, E), Line(C, D) we get concurrent(Line(B, C), Line(C, D), Line(C, E))
By concurrent_sufficient_conditions on Line(D, E), Line(B, D), Line(C, D) we get concurrent(Line(B, D), Line(C, D), Line(D, E))
By concurrent_sufficient_conditions on Line(D, E), Line(A, E), Line(E, T) we get concurrent(Line(A, E), Line(D, E), Line(E, T))
By concurrent_sufficient_conditions on Line(B, D), Line(D, E), Line(C, D) we get concurrent(Line(B, D), Line(C, D), Line(D, E))
By concurrent_sufficient_conditions on Line(C, E), Line(D, E), Line(E, T) we get concurrent(Line(C, E), Line(D, E), Line(E, T))
By concurrent_sufficient_conditions on Line(C, Q), Line(B, C), Line(C, D) we get concurrent(Line(B, C), Line(C, D), Line(C, Q))
By concurrent_sufficient_conditions on Line(C, D), Line(D, S), Line(D, E) we get concurrent(Line(C, D), Line(D, E), Line(D, S))
By concurrent_sufficient_conditions on Line(B, C), Line(A, B), Line(B, T) we get concurrent(Line(A, B), Line(B, C), Line(B, T))
By concurrent_sufficient_conditions on Line(A, E), Line(E, T), Line(D, E) we get concurrent(Line(A, E), Line(D, E), Line(E, T))
By concurrent_sufficient_conditions on Line(D, S), Line(C, D), Line(D, E) we get concurrent(Line(C, D), Line(D, E), Line(D, S))
By concurrent_sufficient_conditions on Line(B, C), Line(B, D), Line(B, T) we get concurrent(Line(B, C), Line(B, D), Line(B, T))
By concurrent_sufficient_conditions on Line(B, C), Line(C, E), Line(C, Q) we get concurrent(Line(B, C), Line(C, E), Line(C, Q))
By concurrent_sufficient_conditions on Line(B, D), Line(C, D), Line(D, E) we get concurrent(Line(B, D), Line(C, D), Line(D, E))
By concurrent_sufficient_conditions on Line(A, B), Line(B, T), Line(B, C) we get concurrent(Line(A, B), Line(B, C), Line(B, T))
By concurrent_sufficient_conditions on Line(E, T), Line(A, E), Line(C, E) we get concurrent(Line(A, E), Line(C, E), Line(E, T))
By concurrent_sufficient_conditions on Line(C, E), Line(C, Q), Line(B, C) we get concurrent(Line(B, C), Line(C, E), Line(C, Q))
By concurrent_sufficient_conditions on Line(C, E), Line(C, D), Line(C, Q) we get concurrent(Line(C, D), Line(C, E), Line(C, Q))
By concurrent_sufficient_conditions on Line(B, D), Line(A, B), Line(B, T) we get concurrent(Line(A, B), Line(B, D), Line(B, T))
By concurrent_sufficient_conditions on Line(B, T), Line(B, C), Line(A, B) we get concurrent(Line(A, B), Line(B, C), Line(B, T))
By concurrent_sufficient_conditions on Line(B, C), Line(C, Q), Line(C, D) we get concurrent(Line(B, C), Line(C, D), Line(C, Q))
By concurrent_sufficient_conditions on Line(C, Q), Line(C, E), Line(C, D) we get concurrent(Line(C, D), Line(C, E), Line(C, Q))
By concurrent_sufficient_conditions on Line(C, E), Line(D, E), Line(A, E) we get concurrent(Line(A, E), Line(C, E), Line(D, E))
By concurrent_sufficient_conditions on Line(D, S), Line(B, D), Line(C, D) we get concurrent(Line(B, D), Line(C, D), Line(D, S))
By same_angle_v0 on S, R, A, T we get angle(A, S, T) == angle(R, S, T) mod 360
By same_angle_v1 on R, S, E, C we get angle(E, R, C) == angle(S, R, C) mod 360
By same_angle_v1 on Q, B, P, C we get angle(B, Q, C) == angle(P, Q, C) mod 360
By same_angle_v0 on P, B, Q, D we get angle(B, P, D) == angle(Q, P, D) mod 360
By same_angle_v0 on P, Q, A, C we get angle(A, P, C) == angle(Q, P, C) mod 360
By same_angle_v1 on P, D, R, Q we get angle(D, P, Q) == angle(R, P, Q) mod 360
By same_angle_v1 on Q, P, A, T we get angle(A, Q, T) == angle(P, Q, T) mod 360
By same_angle_v0 on R, C, P, A we get angle(C, R, A) == angle(P, R, A) mod 360
By same_angle_v1 on P, D, R, A we get angle(D, P, A) == angle(R, P, A) mod 360
By same_angle_v0 on P, Q, A, D we get angle(A, P, D) == angle(Q, P, D) mod 360
By same_angle_v1 on R, E, S, D we get angle(E, R, D) == angle(S, R, D) mod 360
By same_angle_v1 on R, A, S, P we get angle(A, R, P) == angle(S, R, P) mod 360
By same_angle_v1 on R, S, A, C we get angle(A, R, C) == angle(S, R, C) mod 360
By same_angle_v0 on S, R, E, D we get angle(E, S, D) == angle(R, S, D) mod 360
By same_angle_v1 on P, C, R, B we get angle(C, P, B) == angle(R, P, B) mod 360
By same_angle_v0 on R, C, P, E we get angle(C, R, E) == angle(P, R, E) mod 360
By same_angle_v0 on P, A, Q, R we get angle(A, P, R) == angle(Q, P, R) mod 360
By same_angle_v0 on R, D, P, S we get angle(D, R, S) == angle(P, R, S) mod 360
By same_angle_v0 on R, D, P, A we get angle(D, R, A) == angle(P, R, A) mod 360
By same_angle_v1 on P, R, C, A we get angle(C, P, A) == angle(R, P, A) mod 360
By same_angle_v0 on S, R, E, T we get angle(E, S, T) == angle(R, S, T) mod 360
By same_angle_v1 on R, S, A, D we get angle(A, R, D) == angle(S, R, D) mod 360
By same_angle_v1 on P, R, D, B we get angle(D, P, B) == angle(R, P, B) mod 360
By same_angle_v0 on P, B, Q, C we get angle(B, P, C) == angle(Q, P, C) mod 360
By same_angle_v0 on S, A, R, D we get angle(A, S, D) == angle(R, S, D) mod 360
By same_angle_v0 on P, Q, B, R we get angle(B, P, R) == angle(Q, P, R) mod 360
By same_angle_v1 on Q, B, P, T we get angle(B, Q, T) == angle(P, Q, T) mod 360
By same_angle_v0 on R, D, P, E we get angle(D, R, E) == angle(P, R, E) mod 360
By same_angle_v1 on P, C, R, Q we get angle(C, P, Q) == angle(R, P, Q) mod 360
By same_angle_v1 on R, S, E, P we get angle(E, R, P) == angle(S, R, P) mod 360
By same_angle_v1 on Q, P, A, C we get angle(A, Q, C) == angle(P, Q, C) mod 360
By same_angle_v0 on R, C, P, S we get angle(C, R, S) == angle(P, R, S) mod 360
By between_imply_not_between on C, D, R we get collinear_and_not_between(D, C, R)
By between_imply_not_between on C, T, Q we get collinear_and_not_between(Q, C, T)
By between_imply_not_between on D, T, S we get collinear_and_not_between(S, D, T)
By between_imply_not_between on R, D, C we get collinear_and_not_between(C, R, D)
By between_imply_not_between on S, T, D we get collinear_and_not_between(D, S, T)
By between_imply_not_between on D, C, P we get collinear_and_not_between(C, D, P)
By between_imply_not_between on Q, T, C we get collinear_and_not_between(C, Q, T)
By between_imply_not_between on P, C, D we get collinear_and_not_between(C, P, D)
By probably_between_and_collinear_implies_between on Q, A, P we get between(P, A, Q)
By probably_between_and_collinear_implies_between on R, E, S we get between(R, E, S)
By reverse_direction on Q, T we get 180 == direction(Q, T) - direction(T, Q) mod 360
By probably_between_and_collinear_implies_between on R, A, S we get between(R, A, S)
By divide_by_2_mod_180_v1 on E, C, T, T, D, B we get angle(E, C, T) == angle(T, D, B) mod 360
By divide_by_2_mod_180_v0 on Q, B, D, C, E, S we get angle(C, E, S) == angle(Q, B, D) mod 360
By divide_by_2_mod_180_v1 on D, B, A, S, E, C we get angle(D, B, A) == angle(S, E, C) mod 360
By divide_by_2_mod_180_v1 on T, D, B, T, E, C we get angle(T, D, B) == angle(T, E, C) mod 360
By probably_between_and_collinear_implies_between on P, B, Q we get between(P, B, Q)
By divide_by_2_mod_180_v1 on S, D, B, T, E, C we get angle(S, D, B) == angle(T, E, C) mod 360
By divide_by_2_mod_180_v0 on D, B, P, R, E, C we get angle(D, B, P) == angle(R, E, C) mod 360
By probably_between_and_collinear_implies_between on R, C, P we get between(P, C, R)
By probably_between_and_collinear_implies_between on P, D, R we get between(P, D, R)
By divide_by_2_mod_180_v3 on P, B, D, C, E, A we get angle(P, B, D) == angle(C, E, A) + 180 mod 360
By divide_by_2_mod_180_v2 on D, B, P, A, E, C we get angle(D, B, P) == angle(A, E, C) + 180 mod 360
By divide_by_2_mod_180_v0 on C, E, A, A, B, D we get angle(A, B, D) == angle(C, E, A) mod 360
By divide_by_2_mod_180_v1 on E, C, T, D, B, T we get angle(D, B, T) == angle(E, C, T) mod 360
By divide_by_2_mod_180_v0 on B, D, S, Q, C, E we get angle(B, D, S) == angle(Q, C, E) mod 360
By divide_by_2_mod_180_v0 on A, B, D, C, E, S we get angle(A, B, D) == angle(C, E, S) mod 360
By reverse_direction on C, Q we get 180 == direction(C, Q) - direction(Q, C) mod 360
By collinear_definition on P, B, Q we get B in Line(P, Q), Q in Line(B, P), Line(B, P) == Line(P, Q), 0 == 2 * angle(B, P, Q) mod 360
By divide_by_2_mod_180_v0 on C, E, T, B, D, T we get angle(B, D, T) == angle(C, E, T) mod 360
By divide_by_2_mod_180_v1 on E, C, Q, T, D, B we get angle(E, C, Q) == angle(T, D, B) mod 360
By collinear_definition on R, P, C we get P in Line(C, R), C in Line(P, R), Line(C, R) == Line(P, R), 0 == 2 * angle(P, R, C) mod 360
By divide_by_2_mod_180_v1 on A, E, C, D, B, A we get angle(A, E, C) == angle(D, B, A) mod 360
By divide_by_2_mod_180_v0 on C, E, T, B, D, S we get angle(B, D, S) == angle(C, E, T) mod 360
By divide_by_2_mod_180_v2 on A, B, D, C, E, R we get angle(A, B, D) == angle(C, E, R) + 180 mod 360
By divide_by_2_mod_180_v1 on S, E, C, D, B, Q we get angle(D, B, Q) == angle(S, E, C) mod 360
By internal_angle_bisector_definition_v0 on S, R, S, E we get angle(R, E, S) == angle(S, E, R) mod 360
By divide_by_2_mod_180_v2 on R, E, C, D, B, A we get angle(R, E, C) == angle(D, B, A) + 180 mod 360
By divide_by_2_mod_180_v1 on E, C, T, S, D, B we get angle(E, C, T) == angle(S, D, B) mod 360
By divide_by_2_mod_180_v1 on C, E, R, P, B, D we get angle(C, E, R) == angle(P, B, D) mod 360
By divide_by_2_mod_180_v2 on C, E, S, P, B, D we get angle(C, E, S) == angle(P, B, D) + 180 mod 360
By divide_by_2_mod_180_v3 on C, E, R, A, B, D we get angle(C, E, R) == angle(A, B, D) + 180 mod 360
By divide_by_2_mod_180_v0 on Q, B, D, C, E, A we get angle(C, E, A) == angle(Q, B, D) mod 360
By internal_angle_bisector_definition_v0 on A, Q, A, P we get angle(A, P, Q) == angle(Q, P, A) mod 360
By reverse_direction on C, R we get 180 == direction(C, R) - direction(R, C) mod 360
By divide_by_2_mod_180_v1 on E, C, Q, S, D, B we get angle(E, C, Q) == angle(S, D, B) mod 360
By reverse_direction on D, R we get 180 == direction(D, R) - direction(R, D) mod 360
By divide_by_2_mod_180_v1 on D, B, Q, A, E, C we get angle(A, E, C) == angle(D, B, Q) mod 360
By divide_by_2_mod_180_v2 on D, B, P, S, E, C we get angle(D, B, P) == angle(S, E, C) + 180 mod 360
By collinear_definition on R, E, S we get E in Line(R, S), S in Line(E, R), Line(E, R) == Line(R, S), 0 == 2 * angle(E, R, S) mod 360
By divide_by_2_mod_180_v0 on T, B, D, T, C, E we get angle(T, B, D) == angle(T, C, E) mod 360
By between_imply_segment_sum on S, T, D we get distance(D, S) == distance(S, T) + distance(D, T)
By divide_by_2_mod_180_v3 on C, E, R, Q, B, D we get angle(C, E, R) == angle(Q, B, D) + 180 mod 360
By divide_by_2_mod_180_v1 on D, B, T, E, C, Q we get angle(D, B, T) == angle(E, C, Q) mod 360
By divide_by_2_mod_180_v1 on D, B, T, T, E, C we get angle(D, B, T) == angle(T, E, C) mod 360
By divide_by_2_mod_180_v0 on Q, C, E, B, D, T we get angle(B, D, T) == angle(Q, C, E) mod 360
By internal_angle_bisector_definition_v0 on R, S, R, A we get angle(R, A, S) == angle(S, A, R) mod 360
By internal_angle_bisector_definition_v0 on Q, P, Q, B we get angle(P, B, Q) == angle(Q, B, P) mod 360
By divide_by_2_mod_180_v0 on B, D, T, T, C, E we get angle(B, D, T) == angle(T, C, E) mod 360
By between_imply_segment_sum on C, T, Q we get distance(C, Q) == distance(C, T) + distance(Q, T)
By divide_by_2_mod_180_v3 on D, B, A, R, E, C we get angle(D, B, A) == angle(R, E, C) + 180 mod 360
By reverse_direction on D, C we get 180 == direction(D, C) - direction(C, D) mod 360
By divide_by_2_mod_180_v3 on A, E, C, D, B, P we get angle(A, E, C) == angle(D, B, P) + 180 mod 360
By collinear_definition on S, E, R we get E in Line(R, S), R in Line(E, S), Line(E, S) == Line(R, S), 0 == 2 * angle(E, S, R) mod 360
By aa_anti_similarity on S, E, T, Q, B, T we get anti_similar_triangles(B, Q, T, E, S, T)
By collinear_definition on D, P, R we get P in Line(D, R), R in Line(D, P), Line(D, P) == Line(D, R), 0 == 2 * angle(P, D, R) mod 360
By reverse_direction on C, P we get 180 == direction(C, P) - direction(P, C) mod 360
By aa_anti_similarity on Q, B, T, S, E, T we get anti_similar_triangles(B, Q, T, E, S, T)
By divide_by_2_mod_180_v0 on B, D, S, T, C, E we get angle(B, D, S) == angle(T, C, E) mod 360
By divide_by_2_mod_180_v0 on T, B, D, Q, C, E we get angle(Q, C, E) == angle(T, B, D) mod 360
By divide_by_2_mod_180_v2 on R, E, C, D, B, Q we get angle(R, E, C) == angle(D, B, Q) + 180 mod 360
By divide_by_2_mod_180_v3 on P, B, D, C, E, S we get angle(P, B, D) == angle(C, E, S) + 180 mod 360
By divide_by_2_mod_180_v0 on C, E, T, T, B, D we get angle(C, E, T) == angle(T, B, D) mod 360
By reverse_direction on D, P we get 180 == direction(D, P) - direction(P, D) mod 360
By reverse_direction on C, D we get 180 == direction(C, D) - direction(D, C) mod 360
By collinear_definition on E, S, R we get S in Line(E, R), R in Line(E, S), Line(E, R) == Line(E, S), 0 == 2 * angle(S, E, R) mod 360
By sas_similarity on D, T, B, E, T, C we get similar_triangles(B, D, T, C, E, T)
By internal_angle_bisector_definition_v0 on B, P, B, Q we get angle(B, Q, P) == angle(P, Q, B) mod 360
By internal_angle_bisector_definition_v0 on A, P, A, Q we get angle(A, Q, P) == angle(P, Q, A) mod 360
By internal_angle_bisector_definition_v0 on A, S, A, R we get angle(A, R, S) == angle(S, R, A) mod 360
By reverse_direction on P, C we get 180 == direction(P, C) - direction(C, P) mod 360
By reverse_direction on S, T we get 180 == direction(S, T) - direction(T, S) mod 360
By collinear_definition on R, D, P we get D in Line(P, R), P in Line(D, R), Line(D, R) == Line(P, R), 0 == 2 * angle(D, R, P) mod 360
By internal_angle_bisector_definition_v0 on Q, P, Q, A we get angle(P, A, Q) == angle(Q, A, P) mod 360
By collinear_definition on R, C, P we get C in Line(P, R), P in Line(C, R), Line(C, R) == Line(P, R), 0 == 2 * angle(C, R, P) mod 360
By reverse_direction on R, D we get 180 == direction(R, D) - direction(D, R) mod 360
By collinear_definition on R, S, A we get S in Line(A, R), A in Line(R, S), Line(A, R) == Line(R, S), 0 == 2 * angle(S, R, A) mod 360
By collinear_definition on C, R, P we get R in Line(C, P), P in Line(C, R), Line(C, P) == Line(C, R), 0 == 2 * angle(R, C, P) mod 360
By divide_by_2_mod_180_v2 on C, E, A, P, B, D we get angle(C, E, A) == angle(P, B, D) + 180 mod 360
By collinear_definition on Q, A, P we get A in Line(P, Q), P in Line(A, Q), Line(A, Q) == Line(P, Q), 0 == 2 * angle(A, Q, P) mod 360
By reverse_direction on D, S we get 180 == direction(D, S) - direction(S, D) mod 360
By reverse_direction on R, C we get 180 == direction(R, C) - direction(C, R) mod 360
By collinear_definition on B, P, Q we get P in Line(B, Q), Q in Line(B, P), Line(B, P) == Line(B, Q), 0 == 2 * angle(P, B, Q) mod 360
By between_imply_segment_sum on C, D, R we get distance(C, R) == distance(C, D) + distance(D, R)
By collinear_definition on C, P, R we get P in Line(C, R), R in Line(C, P), Line(C, P) == Line(C, R), 0 == 2 * angle(P, C, R) mod 360
By collinear_definition on R, S, E we get S in Line(E, R), E in Line(R, S), Line(E, R) == Line(R, S), 0 == 2 * angle(S, R, E) mod 360
By divide_by_2_mod_180_v2 on Q, B, D, C, E, R we get angle(Q, B, D) == angle(C, E, R) + 180 mod 360
By divide_by_2_mod_180_v3 on D, B, Q, R, E, C we get angle(D, B, Q) == angle(R, E, C) + 180 mod 360
By internal_angle_bisector_definition_v0 on E, S, E, R we get angle(E, R, S) == angle(S, R, E) mod 360
By reverse_direction on R, P we get 180 == direction(R, P) - direction(P, R) mod 360
By reverse_direction on Q, C we get 180 == direction(Q, C) - direction(C, Q) mod 360
By collinear_definition on B, Q, P we get Q in Line(B, P), P in Line(B, Q), Line(B, P) == Line(B, Q), 0 == 2 * angle(Q, B, P) mod 360
By collinear_definition on A, R, S we get R in Line(A, S), S in Line(A, R), Line(A, R) == Line(A, S), 0 == 2 * angle(R, A, S) mod 360
By reverse_direction on P, D we get 180 == direction(P, D) - direction(D, P) mod 360
By collinear_definition on S, R, A we get R in Line(A, S), A in Line(R, S), Line(A, S) == Line(R, S), 0 == 2 * angle(R, S, A) mod 360
By sas_similarity on E, T, C, D, T, B we get similar_triangles(B, D, T, C, E, T)
By collinear_definition on P, D, R we get D in Line(P, R), R in Line(D, P), Line(D, P) == Line(P, R), 0 == 2 * angle(D, P, R) mod 360
By collinear_definition on P, Q, A we get Q in Line(A, P), A in Line(P, Q), Line(A, P) == Line(P, Q), 0 == 2 * angle(Q, P, A) mod 360
By collinear_definition on P, R, D we get R in Line(D, P), D in Line(P, R), Line(D, P) == Line(P, R), 0 == 2 * angle(R, P, D) mod 360
By collinear_definition on D, R, P we get R in Line(D, P), P in Line(D, R), Line(D, P) == Line(D, R), 0 == 2 * angle(R, D, P) mod 360
By internal_angle_bisector_definition_v0 on A, R, A, S we get angle(A, S, R) == angle(R, S, A) mod 360
By reverse_direction on P, Q we get 180 == direction(P, Q) - direction(Q, P) mod 360
By collinear_definition on Q, P, A we get P in Line(A, Q), A in Line(P, Q), Line(A, Q) == Line(P, Q), 0 == 2 * angle(P, Q, A) mod 360
By reverse_direction on Q, P we get 180 == direction(Q, P) - direction(P, Q) mod 360
By collinear_definition on A, S, R we get S in Line(A, R), R in Line(A, S), Line(A, R) == Line(A, S), 0 == 2 * angle(S, A, R) mod 360
By collinear_definition on S, R, E we get R in Line(E, S), E in Line(R, S), Line(E, S) == Line(R, S), 0 == 2 * angle(R, S, E) mod 360
By collinear_definition on A, Q, P we get Q in Line(A, P), P in Line(A, Q), Line(A, P) == Line(A, Q), 0 == 2 * angle(Q, A, P) mod 360
By collinear_definition on P, C, R we get C in Line(P, R), R in Line(C, P), Line(C, P) == Line(P, R), 0 == 2 * angle(C, P, R) mod 360
By collinear_definition on P, R, C we get R in Line(C, P), C in Line(P, R), Line(C, P) == Line(P, R), 0 == 2 * angle(R, P, C) mod 360
By collinear_definition on R, P, D we get P in Line(D, R), D in Line(P, R), Line(D, R) == Line(P, R), 0 == 2 * angle(P, R, D) mod 360
By reverse_direction on R, S we get 180 == direction(R, S) - direction(S, R) mod 360
By between_imply_segment_sum on P, C, D we get distance(D, P) == distance(C, P) + distance(C, D)
By reverse_direction on S, R we get 180 == direction(S, R) - direction(R, S) mod 360
By collinear_definition on P, A, Q we get A in Line(P, Q), Q in Line(A, P), Line(A, P) == Line(P, Q), 0 == 2 * angle(A, P, Q) mod 360
By collinear_definition on Q, P, B we get P in Line(B, Q), B in Line(P, Q), Line(B, Q) == Line(P, Q), 0 == 2 * angle(P, Q, B) mod 360
By reverse_direction on T, S we get 180 == direction(T, S) - direction(S, T) mod 360
By divide_by_2_mod_180_v3 on S, E, C, D, B, P we get angle(S, E, C) == angle(D, B, P) + 180 mod 360
By internal_angle_bisector_definition_v0 on B, Q, B, P we get angle(B, P, Q) == angle(Q, P, B) mod 360
By reverse_direction on P, R we get 180 == direction(P, R) - direction(R, P) mod 360
By collinear_definition on S, A, R we get A in Line(R, S), R in Line(A, S), Line(A, S) == Line(R, S), 0 == 2 * angle(A, S, R) mod 360
By sas_similarity on B, T, D, C, T, E we get similar_triangles(B, D, T, C, E, T)
By collinear_definition on A, P, Q we get P in Line(A, Q), Q in Line(A, P), Line(A, P) == Line(A, Q), 0 == 2 * angle(P, A, Q) mod 360
By sas_similarity on C, T, E, B, T, D we get similar_triangles(B, D, T, C, E, T)
By collinear_definition on R, A, S we get A in Line(R, S), S in Line(A, R), Line(A, R) == Line(R, S), 0 == 2 * angle(A, R, S) mod 360
By reverse_direction on T, Q we get 180 == direction(T, Q) - direction(Q, T) mod 360
By aa_anti_similarity on S, T, E, Q, T, B we get anti_similar_triangles(B, Q, T, E, S, T)
By collinear_definition on P, Q, B we get Q in Line(B, P), B in Line(P, Q), Line(B, P) == Line(P, Q), 0 == 2 * angle(Q, P, B) mod 360
By internal_angle_bisector_definition_v0 on E, R, E, S we get angle(E, S, R) == angle(R, S, E) mod 360
By aa_anti_similarity on Q, T, B, S, T, E we get anti_similar_triangles(B, Q, T, E, S, T)
By collinear_definition on E, R, S we get R in Line(E, S), S in Line(E, R), Line(E, R) == Line(E, S), 0 == 2 * angle(R, E, S) mod 360
By reverse_direction on S, D we get 180 == direction(S, D) - direction(D, S) mod 360
By collinear_definition on Q, B, P we get B in Line(P, Q), P in Line(B, Q), Line(B, Q) == Line(P, Q), 0 == 2 * angle(B, Q, P) mod 360
By internal_angle_bisector_definition_v0_r on D, T, D, S we get Line(S, T) == internal_angle_bisector(D, S, D)
By internal_angle_bisector_definition_v0_r on C, Q, C, T we get Line(Q, T) == internal_angle_bisector(C, T, C)
By external_angle_bisector_definition_v0_r on R, C, P, D we get Line(C, D) == external_angle_bisector(P, D, R)
By internal_angle_bisector_definition_v0_r on S, D, S, T we get Line(D, T) == internal_angle_bisector(S, T, S)
By external_angle_bisector_definition_v0_r on P, D, R, C we get Line(C, D) == external_angle_bisector(P, C, R)
By internal_angle_bisector_definition_v0_r on R, C, R, D we get Line(C, D) == internal_angle_bisector(R, D, R)
By internal_angle_bisector_definition_v0_r on C, D, C, R we get Line(D, R) == internal_angle_bisector(C, R, C)
By anti_similar_triangle_basic_properties on E, T, C, C, T, E we get angle(E, T, C) == 0 - angle(C, T, E) mod 360, angle(T, C, E) == 0 - angle(T, E, C) mod 360, angle(C, E, T) == 0 - angle(E, C, T) mod 360, log(distance(C, T)) + log(distance(C, T)) == log(distance(E, T)) + log(distance(E, T)), log(distance(C, T)) + log(distance(C, E)) == log(distance(E, T)) + log(distance(C, E)), log(distance(C, E)) + log(distance(C, T)) == log(distance(C, E)) + log(distance(E, T))
By anti_similar_triangle_basic_properties on T, D, B, T, B, D we get angle(T, D, B) == 0 - angle(T, B, D) mod 360, angle(D, B, T) == 0 - angle(B, D, T) mod 360, angle(B, T, D) == 0 - angle(D, T, B) mod 360, log(distance(B, T)) + log(distance(B, D)) == log(distance(D, T)) + log(distance(B, D)), log(distance(B, D)) + log(distance(B, T)) == log(distance(B, D)) + log(distance(D, T)), log(distance(B, T)) + log(distance(B, T)) == log(distance(D, T)) + log(distance(D, T))
By internal_angle_bisector_definition_v0_r on C, T, C, Q we get Line(Q, T) == internal_angle_bisector(C, Q, C)
By internal_angle_bisector_definition_v0_r on D, C, D, P we get Line(C, P) == internal_angle_bisector(D, P, D)
By internal_angle_bisector_definition_v0_r on D, C, D, R we get Line(C, R) == internal_angle_bisector(D, R, D)
By internal_angle_bisector_definition_v0_r on Q, T, Q, C we get Line(C, T) == internal_angle_bisector(Q, C, Q)
By internal_angle_bisector_definition_v0_r on D, S, D, T we get Line(S, T) == internal_angle_bisector(D, T, D)
By internal_angle_bisector_definition_v0_r on T, C, T, Q we get Line(C, Q) == internal_angle_bisector(T, Q, T)
By internal_angle_bisector_definition_v0_r on C, D, C, P we get Line(D, P) == internal_angle_bisector(C, P, C)
By internal_angle_bisector_definition_v0_r on Q, C, Q, T we get Line(C, T) == internal_angle_bisector(Q, T, Q)
By internal_angle_bisector_definition_v0_r on T, S, T, D we get Line(D, S) == internal_angle_bisector(T, D, T)
By internal_angle_bisector_definition_v0_r on C, P, C, D we get Line(D, P) == internal_angle_bisector(C, D, C)
By internal_angle_bisector_definition_v0_r on T, Q, T, C we get Line(C, Q) == internal_angle_bisector(T, C, T)
By internal_angle_bisector_definition_v0_r on S, T, S, D we get Line(D, T) == internal_angle_bisector(S, D, S)
By internal_angle_bisector_definition_v0_r on D, R, D, C we get Line(C, R) == internal_angle_bisector(D, C, D)
By internal_angle_bisector_definition_v0_r on D, P, D, C we get Line(C, P) == internal_angle_bisector(D, C, D)
By internal_angle_bisector_definition_v0_r on R, D, R, C we get Line(C, D) == internal_angle_bisector(R, C, R)
By internal_angle_bisector_definition_v0_r on P, C, P, D we get Line(C, D) == internal_angle_bisector(P, D, P)
By internal_angle_bisector_definition_v0_r on C, R, C, D we get Line(D, R) == internal_angle_bisector(C, D, C)
By internal_angle_bisector_definition_v0_r on P, D, P, C we get Line(C, D) == internal_angle_bisector(P, C, P)
By internal_angle_bisector_definition_v0_r on T, D, T, S we get Line(D, S) == internal_angle_bisector(T, S, T)
By between_imply_not_between on S, A, R we get collinear_and_not_between(A, S, R)
By between_imply_not_between on Q, B, P we get collinear_and_not_between(B, Q, P)
By between_imply_not_between on R, D, P we get collinear_and_not_between(D, R, P)
By between_imply_not_between on R, E, S we get collinear_and_not_between(E, R, S)
By between_imply_not_between on P, C, R we get collinear_and_not_between(C, P, R)
By between_imply_not_between on P, B, Q we get collinear_and_not_between(B, P, Q)
By between_imply_not_between on S, E, R we get collinear_and_not_between(E, S, R)
By between_imply_not_between on R, C, P we get collinear_and_not_between(C, R, P)
By between_imply_not_between on P, D, R we get collinear_and_not_between(D, P, R)
By between_imply_not_between on R, A, S we get collinear_and_not_between(A, R, S)
By between_imply_not_between on Q, A, P we get collinear_and_not_between(A, Q, P)
By between_imply_not_between on P, A, Q we get collinear_and_not_between(A, P, Q)
By between_imply_segment_sum on R, E, S we get distance(R, S) == distance(E, R) + distance(E, S)
By similar_triangle_basic_properties on E, T, C, D, T, B we get angle(D, T, B) == angle(E, T, C) mod 360, angle(T, B, D) == angle(T, C, E) mod 360, angle(B, D, T) == angle(C, E, T) mod 360, log(distance(D, T)) + log(distance(C, T)) == log(distance(E, T)) + log(distance(B, T)), log(distance(B, T)) + log(distance(C, E)) == log(distance(C, T)) + log(distance(B, D)), log(distance(B, D)) + log(distance(E, T)) == log(distance(C, E)) + log(distance(D, T))
By similar_triangle_basic_properties on T, D, B, T, E, C we get angle(T, D, B) == angle(T, E, C) mod 360, angle(D, B, T) == angle(E, C, T) mod 360, angle(B, T, D) == angle(C, T, E) mod 360, log(distance(D, T)) + log(distance(C, E)) == log(distance(E, T)) + log(distance(B, D)), log(distance(B, D)) + log(distance(C, T)) == log(distance(C, E)) + log(distance(B, T)), log(distance(B, T)) + log(distance(E, T)) == log(distance(C, T)) + log(distance(D, T))
By between_imply_segment_sum on R, A, S we get distance(R, S) == distance(A, R) + distance(A, S)
By anti_similar_triangle_basic_properties on D, T, B, C, T, E we get angle(D, T, B) == 0 - angle(C, T, E) mod 360, angle(T, B, D) == 0 - angle(T, E, C) mod 360, angle(B, D, T) == 0 - angle(E, C, T) mod 360, log(distance(C, T)) + log(distance(B, T)) == log(distance(D, T)) + log(distance(E, T)), log(distance(B, T)) + log(distance(C, E)) == log(distance(E, T)) + log(distance(B, D)), log(distance(B, D)) + log(distance(C, T)) == log(distance(C, E)) + log(distance(D, T))
By between_imply_segment_sum on Q, B, P we get distance(P, Q) == distance(B, Q) + distance(B, P)
By between_imply_segment_sum on P, D, R we get distance(P, R) == distance(D, P) + distance(D, R)
By between_imply_segment_sum on R, C, P we get distance(P, R) == distance(C, R) + distance(C, P)
By anti_similar_triangle_basic_properties on T, D, B, T, C, E we get angle(T, D, B) == 0 - angle(T, C, E) mod 360, angle(D, B, T) == 0 - angle(C, E, T) mod 360, angle(B, T, D) == 0 - angle(E, T, C) mod 360, log(distance(C, T)) + log(distance(B, D)) == log(distance(D, T)) + log(distance(C, E)), log(distance(B, D)) + log(distance(E, T)) == log(distance(C, E)) + log(distance(B, T)), log(distance(B, T)) + log(distance(C, T)) == log(distance(E, T)) + log(distance(D, T))
By between_imply_segment_sum on Q, A, P we get distance(P, Q) == distance(A, Q) + distance(A, P)
By internal_angle_bisector_definition_v0_r on C, D, R, P we get Line(D, P) == internal_angle_bisector(C, P, R)
By external_angle_bisector_definition_v0_r on E, R, S, A we get Line(A, R) == external_angle_bisector(E, A, S)
By internal_angle_bisector_definition_v0_r on E, A, R, S we get Line(A, S) == internal_angle_bisector(E, S, R)
By external_angle_bisector_definition_v0_r on R, S, A, E we get Line(E, S) == external_angle_bisector(A, E, R)
By external_angle_bisector_definition_v0_r on P, R, D, C we get Line(C, R) == external_angle_bisector(D, C, P)
By internal_angle_bisector_definition_v0_r on Q, B, A, P we get Line(B, P) == internal_angle_bisector(A, P, Q)
By internal_angle_bisector_definition_v0_r on E, A, S, R we get Line(A, R) == internal_angle_bisector(E, R, S)
By internal_angle_bisector_definition_v0_r on D, P, R, C we get Line(C, P) == internal_angle_bisector(D, C, R)
By internal_angle_bisector_definition_v0_r on E, S, A, R we get Line(R, S) == internal_angle_bisector(A, R, E)
By internal_angle_bisector_definition_v0_r on P, C, P, R we get Line(C, R) == internal_angle_bisector(P, R, P)
By internal_angle_bisector_definition_v0_r on R, A, R, S we get Line(A, S) == internal_angle_bisector(R, S, R)
By internal_angle_bisector_definition_v0_r on A, R, S, E we get Line(E, R) == internal_angle_bisector(A, E, S)
By internal_angle_bisector_definition_v0_r on B, Q, A, P we get Line(P, Q) == internal_angle_bisector(A, P, B)
By internal_angle_bisector_definition_v0_r on Q, B, Q, P we get Line(B, P) == internal_angle_bisector(Q, P, Q)
By internal_angle_bisector_definition_v0_r on C, R, P, D we get Line(D, R) == internal_angle_bisector(C, D, P)
By external_angle_bisector_definition_v0_r on R, P, C, D we get Line(D, P) == external_angle_bisector(C, D, R)
By internal_angle_bisector_definition_v0_r on C, D, P, R we get Line(D, R) == internal_angle_bisector(C, R, P)
By internal_angle_bisector_definition_v0_r on Q, P, A, B we get Line(B, P) == internal_angle_bisector(A, B, Q)
By internal_angle_bisector_definition_v0_r on A, R, E, S we get Line(R, S) == internal_angle_bisector(A, S, E)
By external_angle_bisector_definition_v0_r on A, Q, P, B we get Line(B, Q) == external_angle_bisector(A, B, P)
By internal_angle_bisector_definition_v0_r on Q, A, B, P we get Line(A, P) == internal_angle_bisector(B, P, Q)
By external_angle_bisector_definition_v0_r on Q, P, B, A we get Line(A, P) == external_angle_bisector(B, A, Q)
By internal_angle_bisector_definition_v0_r on R, C, R, P we get Line(C, P) == internal_angle_bisector(R, P, R)
By internal_angle_bisector_definition_v0_r on P, B, P, Q we get Line(B, Q) == internal_angle_bisector(P, Q, P)
By internal_angle_bisector_definition_v0_r on A, E, R, S we get Line(E, S) == internal_angle_bisector(A, S, R)
By internal_angle_bisector_definition_v0_r on P, B, A, Q we get Line(B, Q) == internal_angle_bisector(A, Q, P)
By internal_angle_bisector_definition_v0_r on R, C, D, P we get Line(C, P) == internal_angle_bisector(D, P, R)
By internal_angle_bisector_definition_v0_r on A, P, B, Q we get Line(P, Q) == internal_angle_bisector(A, Q, B)
By internal_angle_bisector_definition_v0_r on R, D, R, P we get Line(D, P) == internal_angle_bisector(R, P, R)
By internal_angle_bisector_definition_v0_r on C, P, D, R we get Line(P, R) == internal_angle_bisector(C, R, D)
By internal_angle_bisector_definition_v0_r on R, S, E, A we get Line(A, S) == internal_angle_bisector(E, A, R)
By internal_angle_bisector_definition_v0_r on P, Q, B, A we get Line(A, Q) == internal_angle_bisector(B, A, P)
By internal_angle_bisector_definition_v0_r on D, R, C, P we get Line(P, R) == internal_angle_bisector(C, P, D)
By internal_angle_bisector_definition_v0_r on P, C, D, R we get Line(C, R) == internal_angle_bisector(D, R, P)
By internal_angle_bisector_definition_v0_r on P, A, B, Q we get Line(A, Q) == internal_angle_bisector(B, Q, P)
By internal_angle_bisector_definition_v0_r on Q, A, Q, P we get Line(A, P) == internal_angle_bisector(Q, P, Q)
By internal_angle_bisector_definition_v0_r on A, E, S, R we get Line(E, R) == internal_angle_bisector(A, R, S)
By internal_angle_bisector_definition_v0_r on S, A, S, R we get Line(A, R) == internal_angle_bisector(S, R, S)
By internal_angle_bisector_definition_v0_r on R, E, R, S we get Line(E, S) == internal_angle_bisector(R, S, R)
By internal_angle_bisector_definition_v0_r on S, E, S, R we get Line(E, R) == internal_angle_bisector(S, R, S)
By internal_angle_bisector_definition_v0_r on P, A, P, Q we get Line(A, Q) == internal_angle_bisector(P, Q, P)
By internal_angle_bisector_definition_v0_r on P, D, P, R we get Line(D, R) == internal_angle_bisector(P, R, P)
By anti_similar_triangle_basic_properties on Q, B, T, S, E, T we get angle(Q, B, T) == 0 - angle(S, E, T) mod 360, angle(B, T, Q) == 0 - angle(E, T, S) mod 360, angle(T, Q, B) == 0 - angle(T, S, E) mod 360, log(distance(B, Q)) + log(distance(E, T)) == log(distance(E, S)) + log(distance(B, T)), log(distance(B, T)) + log(distance(S, T)) == log(distance(E, T)) + log(distance(Q, T)), log(distance(Q, T)) + log(distance(E, S)) == log(distance(S, T)) + log(distance(B, Q))
By anti_similar_triangle_basic_properties on E, S, T, B, Q, T we get angle(E, S, T) == 0 - angle(B, Q, T) mod 360, angle(S, T, E) == 0 - angle(Q, T, B) mod 360, angle(T, E, S) == 0 - angle(T, B, Q) mod 360, log(distance(B, Q)) + log(distance(S, T)) == log(distance(E, S)) + log(distance(Q, T)), log(distance(Q, T)) + log(distance(E, T)) == log(distance(S, T)) + log(distance(B, T)), log(distance(B, T)) + log(distance(E, S)) == log(distance(E, T)) + log(distance(B, Q))
By sas_anti_similarity on S, T, Q, C, T, D we get anti_similar_triangles(C, D, T, S, Q, T)
By sas_anti_similarity on Q, T, S, D, T, C we get anti_similar_triangles(C, D, T, S, Q, T)
By sas_anti_similarity on C, T, D, S, T, Q we get anti_similar_triangles(C, D, T, S, Q, T)
By sas_anti_similarity on D, T, C, Q, T, S we get anti_similar_triangles(C, D, T, S, Q, T)
By sas_anti_similarity on C, T, S, D, T, Q we get anti_similar_triangles(C, S, T, D, Q, T)
By sas_anti_similarity on D, B, Q, C, E, S we get anti_similar_triangles(B, D, Q, E, C, S)
By sas_anti_similarity on Q, B, D, S, E, C we get anti_similar_triangles(B, D, Q, E, C, S)
By sas_anti_similarity on Q, T, D, S, T, C we get anti_similar_triangles(C, S, T, D, Q, T)
By sas_anti_similarity on C, E, S, D, B, Q we get anti_similar_triangles(B, D, Q, E, C, S)
By sas_anti_similarity on S, E, C, Q, B, D we get anti_similar_triangles(B, D, Q, E, C, S)
By sas_anti_similarity on S, T, C, Q, T, D we get anti_similar_triangles(C, S, T, D, Q, T)
By sas_anti_similarity on D, T, Q, C, T, S we get anti_similar_triangles(C, S, T, D, Q, T)
By line_intersection_definition on C, Line(B, C), Line(C, S) we get C == line_intersection(Line(B, C), Line(C, S))
By line_intersection_definition on C, Line(C, E), Line(C, S) we get C == line_intersection(Line(C, E), Line(C, S))
By line_intersection_definition on Q, Line(A, B), Line(Q, S) we get Q == line_intersection(Line(A, B), Line(Q, S))
By line_intersection_definition on S, Line(A, E), Line(C, S) we get S == line_intersection(Line(A, E), Line(C, S))
By line_intersection_definition on Q, Line(C, Q), Line(D, Q) we get Q == line_intersection(Line(C, Q), Line(D, Q))
By line_intersection_definition on C, Line(C, S), Line(C, D) we get C == line_intersection(Line(C, D), Line(C, S))
By line_intersection_definition on S, Line(Q, S), Line(C, S) we get S == line_intersection(Line(C, S), Line(Q, S))
By line_intersection_definition on Q, Line(D, Q), Line(A, B) we get Q == line_intersection(Line(A, B), Line(D, Q))
By line_intersection_definition on D, Line(D, S), Line(D, Q) we get D == line_intersection(Line(D, Q), Line(D, S))
By line_intersection_definition on C, Line(C, S), Line(C, Q) we get C == line_intersection(Line(C, Q), Line(C, S))
By line_intersection_definition on D, Line(D, Q), Line(D, E) we get D == line_intersection(Line(D, E), Line(D, Q))
By line_intersection_definition on D, Line(B, D), Line(D, Q) we get D == line_intersection(Line(B, D), Line(D, Q))
By line_intersection_definition on D, Line(C, D), Line(D, Q) we get D == line_intersection(Line(C, D), Line(D, Q))
By line_intersection_definition on Q, Line(Q, S), Line(D, Q) we get Q == line_intersection(Line(D, Q), Line(Q, S))
By line_intersection_definition on S, Line(D, S), Line(Q, S) we get S == line_intersection(Line(D, S), Line(Q, S))
By line_intersection_definition on S, Line(C, S), Line(D, S) we get S == line_intersection(Line(C, S), Line(D, S))
By line_intersection_definition on Q, Line(C, Q), Line(Q, S) we get Q == line_intersection(Line(C, Q), Line(Q, S))
By line_intersection_definition on S, Line(Q, S), Line(A, E) we get S == line_intersection(Line(A, E), Line(Q, S))
By same_angle_v0 on S, D, T, C we get angle(D, S, C) == angle(T, S, C) mod 360
By same_angle_v0 on S, R, A, C we get angle(A, S, C) == angle(R, S, C) mod 360
By same_angle_v1 on S, E, R, Q we get angle(E, S, Q) == angle(R, S, Q) mod 360
By same_angle_v3 on D, C, R, Q we get angle(C, D, Q) == angle(R, D, Q) + 180 mod 360
By same_angle_v1 on C, D, R, S we get angle(D, C, S) == angle(R, C, S) mod 360
By same_angle_v1 on S, A, E, Q we get angle(A, S, Q) == angle(E, S, Q) mod 360
By same_angle_v0 on Q, T, C, S we get angle(C, Q, S) == angle(T, Q, S) mod 360
By same_angle_v3 on C, P, D, S we get angle(P, C, S) == angle(D, C, S) + 180 mod 360
By same_angle_v0 on D, P, C, Q we get angle(C, D, Q) == angle(P, D, Q) mod 360
By same_angle_v1 on Q, P, B, D we get angle(B, Q, D) == angle(P, Q, D) mod 360
By same_angle_v0 on S, R, E, C we get angle(E, S, C) == angle(R, S, C) mod 360
By same_angle_v2 on D, P, R, Q we get angle(P, D, Q) == angle(R, D, Q) + 180 mod 360
By same_angle_v1 on Q, P, A, D we get angle(A, Q, D) == angle(P, Q, D) mod 360
By same_angle_v1 on Q, C, T, D we get angle(C, Q, D) == angle(T, Q, D) mod 360
By same_angle_v0 on S, A, E, C we get angle(A, S, C) == angle(E, S, C) mod 360
By same_angle_v1 on Q, B, A, D we get angle(A, Q, D) == angle(B, Q, D) mod 360
By same_angle_v0 on D, S, T, Q we get angle(S, D, Q) == angle(T, D, Q) mod 360
By same_angle_v2 on C, P, R, S we get angle(P, C, S) == angle(R, C, S) + 180 mod 360
By same_angle_v1 on C, T, Q, S we get angle(Q, C, S) == angle(T, C, S) mod 360
By same_angle_v0 on Q, B, A, S we get angle(A, Q, S) == angle(B, Q, S) mod 360
By same_angle_v0 on Q, A, P, S we get angle(A, Q, S) == angle(P, Q, S) mod 360
By same_angle_v0 on Q, B, P, S we get angle(B, Q, S) == angle(P, Q, S) mod 360
By same_angle_v1 on S, D, T, Q we get angle(D, S, Q) == angle(T, S, Q) mod 360
By same_angle_v1 on S, A, R, Q we get angle(A, S, Q) == angle(R, S, Q) mod 360
By reverse_direction on C, S we get 180 == direction(C, S) - direction(S, C) mod 360
By reverse_direction on Q, D we get 180 == direction(Q, D) - direction(D, Q) mod 360
By reverse_direction on D, Q we get 180 == direction(D, Q) - direction(Q, D) mod 360
By reverse_direction on S, C we get 180 == direction(S, C) - direction(C, S) mod 360
By anti_similar_triangle_basic_properties on S, T, Q, C, T, D we get angle(S, T, Q) == 0 - angle(C, T, D) mod 360, angle(T, Q, S) == 0 - angle(T, D, C) mod 360, angle(Q, S, T) == 0 - angle(D, C, T) mod 360, log(distance(C, T)) + log(distance(Q, T)) == log(distance(S, T)) + log(distance(D, T)), log(distance(D, T)) + log(distance(Q, S)) == log(distance(Q, T)) + log(distance(C, D)), log(distance(C, D)) + log(distance(S, T)) == log(distance(Q, S)) + log(distance(C, T))
By anti_similar_triangle_basic_properties on E, C, S, B, D, Q we get angle(E, C, S) == 0 - angle(B, D, Q) mod 360, angle(C, S, E) == 0 - angle(D, Q, B) mod 360, angle(S, E, C) == 0 - angle(Q, B, D) mod 360, log(distance(B, D)) + log(distance(C, S)) == log(distance(C, E)) + log(distance(D, Q)), log(distance(C, S)) + log(distance(B, Q)) == log(distance(D, Q)) + log(distance(E, S)), log(distance(B, Q)) + log(distance(C, E)) == log(distance(E, S)) + log(distance(B, D))
By anti_similar_triangle_basic_properties on T, D, Q, T, C, S we get angle(T, D, Q) == 0 - angle(T, C, S) mod 360, angle(D, Q, T) == 0 - angle(C, S, T) mod 360, angle(Q, T, D) == 0 - angle(S, T, C) mod 360, log(distance(C, T)) + log(distance(D, Q)) == log(distance(D, T)) + log(distance(C, S)), log(distance(C, S)) + log(distance(Q, T)) == log(distance(D, Q)) + log(distance(S, T)), log(distance(Q, T)) + log(distance(C, T)) == log(distance(S, T)) + log(distance(D, T))
By anti_similar_triangle_basic_properties on Q, T, S, D, T, C we get angle(Q, T, S) == 0 - angle(D, T, C) mod 360, angle(T, S, Q) == 0 - angle(T, C, D) mod 360, angle(S, Q, T) == 0 - angle(C, D, T) mod 360, log(distance(D, T)) + log(distance(S, T)) == log(distance(Q, T)) + log(distance(C, T)), log(distance(C, T)) + log(distance(Q, S)) == log(distance(S, T)) + log(distance(C, D)), log(distance(C, D)) + log(distance(Q, T)) == log(distance(Q, S)) + log(distance(D, T))
By anti_similar_triangle_basic_properties on S, C, T, Q, D, T we get angle(S, C, T) == 0 - angle(Q, D, T) mod 360, angle(C, T, S) == 0 - angle(D, T, Q) mod 360, angle(T, S, C) == 0 - angle(T, Q, D) mod 360, log(distance(C, S)) + log(distance(D, T)) == log(distance(D, Q)) + log(distance(C, T)), log(distance(C, T)) + log(distance(Q, T)) == log(distance(D, T)) + log(distance(S, T)), log(distance(Q, T)) + log(distance(C, S)) == log(distance(S, T)) + log(distance(D, Q))
By concurrent_sufficient_conditions on Line(A, E), Line(C, S), Line(D, S) we get concurrent(Line(A, E), Line(C, S), Line(D, S))
By concurrent_sufficient_conditions on Line(D, E), Line(D, Q), Line(C, D) we get concurrent(Line(C, D), Line(D, E), Line(D, Q))
By concurrent_sufficient_conditions on Line(C, S), Line(Q, S), Line(D, S) we get concurrent(Line(C, S), Line(D, S), Line(Q, S))
By concurrent_sufficient_conditions on Line(D, S), Line(Q, S), Line(A, E) we get concurrent(Line(A, E), Line(D, S), Line(Q, S))
By concurrent_sufficient_conditions on Line(Q, S), Line(D, Q), Line(A, B) we get concurrent(Line(A, B), Line(D, Q), Line(Q, S))
By concurrent_sufficient_conditions on Line(C, Q), Line(D, Q), Line(Q, S) we get concurrent(Line(C, Q), Line(D, Q), Line(Q, S))
By concurrent_sufficient_conditions on Line(C, E), Line(B, C), Line(C, S) we get concurrent(Line(B, C), Line(C, E), Line(C, S))
By concyclic_sufficient_conditions_v0 on S, D, Q, C we get concyclic(C, D, Q, S)
By concyclic_sufficient_conditions_v0 on Q, P, R, S we get concyclic(P, Q, R, S)
By concurrent_sufficient_conditions on Line(C, E), Line(C, S), Line(B, C) we get concurrent(Line(B, C), Line(C, E), Line(C, S))
By concurrent_sufficient_conditions on Line(D, Q), Line(C, Q), Line(A, B) we get concurrent(Line(A, B), Line(C, Q), Line(D, Q))
By concurrent_sufficient_conditions on Line(D, Q), Line(C, Q), Line(Q, S) we get concurrent(Line(C, Q), Line(D, Q), Line(Q, S))
By concurrent_sufficient_conditions on Line(C, S), Line(C, Q), Line(B, C) we get concurrent(Line(B, C), Line(C, Q), Line(C, S))
By concurrent_sufficient_conditions on Line(C, D), Line(D, S), Line(D, Q) we get concurrent(Line(C, D), Line(D, Q), Line(D, S))
By concurrent_sufficient_conditions on Line(Q, S), Line(A, E), Line(C, S) we get concurrent(Line(A, E), Line(C, S), Line(Q, S))
By concurrent_sufficient_conditions on Line(A, E), Line(Q, S), Line(D, S) we get concurrent(Line(A, E), Line(D, S), Line(Q, S))
By concurrent_sufficient_conditions on Line(C, E), Line(C, S), Line(C, D) we get concurrent(Line(C, D), Line(C, E), Line(C, S))
By concurrent_sufficient_conditions on Line(C, D), Line(C, Q), Line(C, S) we get concurrent(Line(C, D), Line(C, Q), Line(C, S))
By concurrent_sufficient_conditions on Line(C, S), Line(C, E), Line(B, C) we get concurrent(Line(B, C), Line(C, E), Line(C, S))
By concurrent_sufficient_conditions on Line(C, D), Line(C, S), Line(B, C) we get concurrent(Line(B, C), Line(C, D), Line(C, S))
By concurrent_sufficient_conditions on Line(Q, S), Line(A, B), Line(C, Q) we get concurrent(Line(A, B), Line(C, Q), Line(Q, S))
By concurrent_sufficient_conditions on Line(B, D), Line(D, Q), Line(D, E) we get concurrent(Line(B, D), Line(D, E), Line(D, Q))
By concurrent_sufficient_conditions on Line(D, Q), Line(C, D), Line(D, S) we get concurrent(Line(C, D), Line(D, Q), Line(D, S))
By concurrent_sufficient_conditions on Line(C, D), Line(C, S), Line(C, Q) we get concurrent(Line(C, D), Line(C, Q), Line(C, S))
By concurrent_sufficient_conditions on Line(Q, S), Line(A, E), Line(D, S) we get concurrent(Line(A, E), Line(D, S), Line(Q, S))
By concurrent_sufficient_conditions on Line(A, E), Line(D, S), Line(C, S) we get concurrent(Line(A, E), Line(C, S), Line(D, S))
By concurrent_sufficient_conditions on Line(D, Q), Line(A, B), Line(C, Q) we get concurrent(Line(A, B), Line(C, Q), Line(D, Q))
By concurrent_sufficient_conditions on Line(C, S), Line(Q, S), Line(A, E) we get concurrent(Line(A, E), Line(C, S), Line(Q, S))
By concurrent_sufficient_conditions on Line(B, C), Line(C, E), Line(C, S) we get concurrent(Line(B, C), Line(C, E), Line(C, S))
By concurrent_sufficient_conditions on Line(B, C), Line(C, D), Line(C, S) we get concurrent(Line(B, C), Line(C, D), Line(C, S))
By concurrent_sufficient_conditions on Line(Q, S), Line(D, S), Line(C, S) we get concurrent(Line(C, S), Line(D, S), Line(Q, S))
By concurrent_sufficient_conditions on Line(C, D), Line(D, Q), Line(D, E) we get concurrent(Line(C, D), Line(D, E), Line(D, Q))
By concurrent_sufficient_conditions on Line(A, B), Line(D, Q), Line(C, Q) we get concurrent(Line(A, B), Line(C, Q), Line(D, Q))
By concurrent_sufficient_conditions on Line(C, S), Line(C, D), Line(B, C) we get concurrent(Line(B, C), Line(C, D), Line(C, S))
By concurrent_sufficient_conditions on Line(C, D), Line(C, E), Line(C, S) we get concurrent(Line(C, D), Line(C, E), Line(C, S))
By concurrent_sufficient_conditions on Line(Q, S), Line(C, Q), Line(D, Q) we get concurrent(Line(C, Q), Line(D, Q), Line(Q, S))
By concurrent_sufficient_conditions on Line(D, Q), Line(B, D), Line(D, E) we get concurrent(Line(B, D), Line(D, E), Line(D, Q))
By concurrent_sufficient_conditions on Line(C, Q), Line(A, B), Line(Q, S) we get concurrent(Line(A, B), Line(C, Q), Line(Q, S))
By concurrent_sufficient_conditions on Line(C, S), Line(A, E), Line(D, S) we get concurrent(Line(A, E), Line(C, S), Line(D, S))
By concurrent_sufficient_conditions on Line(C, S), Line(C, E), Line(C, Q) we get concurrent(Line(C, E), Line(C, Q), Line(C, S))
By concurrent_sufficient_conditions on Line(D, Q), Line(D, E), Line(B, D) we get concurrent(Line(B, D), Line(D, E), Line(D, Q))
By concurrent_sufficient_conditions on Line(C, S), Line(D, S), Line(Q, S) we get concurrent(Line(C, S), Line(D, S), Line(Q, S))
By concurrent_sufficient_conditions on Line(C, S), Line(C, Q), Line(C, E) we get concurrent(Line(C, E), Line(C, Q), Line(C, S))
By concurrent_sufficient_conditions on Line(C, E), Line(C, Q), Line(C, S) we get concurrent(Line(C, E), Line(C, Q), Line(C, S))
By concurrent_sufficient_conditions on Line(C, D), Line(B, C), Line(C, S) we get concurrent(Line(B, C), Line(C, D), Line(C, S))
By concurrent_sufficient_conditions on Line(B, D), Line(C, D), Line(D, Q) we get concurrent(Line(B, D), Line(C, D), Line(D, Q))
By concurrent_sufficient_conditions on Line(C, E), Line(C, S), Line(C, Q) we get concurrent(Line(C, E), Line(C, Q), Line(C, S))
By concurrent_sufficient_conditions on Line(Q, S), Line(C, S), Line(D, S) we get concurrent(Line(C, S), Line(D, S), Line(Q, S))
By concurrent_sufficient_conditions on Line(B, C), Line(C, S), Line(C, D) we get concurrent(Line(B, C), Line(C, D), Line(C, S))
By concurrent_sufficient_conditions on Line(C, S), Line(B, C), Line(C, E) we get concurrent(Line(B, C), Line(C, E), Line(C, S))
By concurrent_sufficient_conditions on Line(D, S), Line(B, D), Line(D, Q) we get concurrent(Line(B, D), Line(D, Q), Line(D, S))
By concurrent_sufficient_conditions on Line(C, S), Line(C, D), Line(C, E) we get concurrent(Line(C, D), Line(C, E), Line(C, S))
By concurrent_sufficient_conditions on Line(D, E), Line(D, Q), Line(B, D) we get concurrent(Line(B, D), Line(D, E), Line(D, Q))
By concurrent_sufficient_conditions on Line(Q, S), Line(A, B), Line(D, Q) we get concurrent(Line(A, B), Line(D, Q), Line(Q, S))
By concurrent_sufficient_conditions on Line(C, Q), Line(C, S), Line(C, E) we get concurrent(Line(C, E), Line(C, Q), Line(C, S))
By concurrent_sufficient_conditions on Line(C, S), Line(D, S), Line(A, E) we get concurrent(Line(A, E), Line(C, S), Line(D, S))
By concurrent_sufficient_conditions on Line(A, E), Line(C, S), Line(Q, S) we get concurrent(Line(A, E), Line(C, S), Line(Q, S))
By concurrent_sufficient_conditions on Line(C, D), Line(D, Q), Line(B, D) we get concurrent(Line(B, D), Line(C, D), Line(D, Q))
By concurrent_sufficient_conditions on Line(Q, S), Line(C, S), Line(A, E) we get concurrent(Line(A, E), Line(C, S), Line(Q, S))
By concurrent_sufficient_conditions on Line(D, Q), Line(C, D), Line(D, E) we get concurrent(Line(C, D), Line(D, E), Line(D, Q))
By concurrent_sufficient_conditions on Line(D, Q), Line(B, D), Line(D, S) we get concurrent(Line(B, D), Line(D, Q), Line(D, S))
By concurrent_sufficient_conditions on Line(Q, S), Line(C, Q), Line(A, B) we get concurrent(Line(A, B), Line(C, Q), Line(Q, S))
By concurrent_sufficient_conditions on Line(D, S), Line(C, S), Line(A, E) we get concurrent(Line(A, E), Line(C, S), Line(D, S))
By concurrent_sufficient_conditions on Line(Q, S), Line(D, S), Line(A, E) we get concurrent(Line(A, E), Line(D, S), Line(Q, S))
By concurrent_sufficient_conditions on Line(C, S), Line(C, D), Line(C, Q) we get concurrent(Line(C, D), Line(C, Q), Line(C, S))
By concurrent_sufficient_conditions on Line(D, Q), Line(C, D), Line(B, D) we get concurrent(Line(B, D), Line(C, D), Line(D, Q))
By concurrent_sufficient_conditions on Line(C, E), Line(C, D), Line(C, S) we get concurrent(Line(C, D), Line(C, E), Line(C, S))
By concurrent_sufficient_conditions on Line(C, S), Line(A, E), Line(Q, S) we get concurrent(Line(A, E), Line(C, S), Line(Q, S))
By concurrent_sufficient_conditions on Line(C, Q), Line(Q, S), Line(D, Q) we get concurrent(Line(C, Q), Line(D, Q), Line(Q, S))
By concurrent_sufficient_conditions on Line(A, E), Line(D, S), Line(Q, S) we get concurrent(Line(A, E), Line(D, S), Line(Q, S))
By concurrent_sufficient_conditions on Line(D, E), Line(D, S), Line(D, Q) we get concurrent(Line(D, E), Line(D, Q), Line(D, S))
By concurrent_sufficient_conditions on Line(C, Q), Line(D, Q), Line(A, B) we get concurrent(Line(A, B), Line(C, Q), Line(D, Q))
By concurrent_sufficient_conditions on Line(D, Q), Line(D, S), Line(B, D) we get concurrent(Line(B, D), Line(D, Q), Line(D, S))
By concurrent_sufficient_conditions on Line(D, Q), Line(D, S), Line(C, D) we get concurrent(Line(C, D), Line(D, Q), Line(D, S))
By concurrent_sufficient_conditions on Line(D, S), Line(A, E), Line(C, S) we get concurrent(Line(A, E), Line(C, S), Line(D, S))
By concurrent_sufficient_conditions on Line(D, S), Line(D, Q), Line(B, D) we get concurrent(Line(B, D), Line(D, Q), Line(D, S))
By concurrent_sufficient_conditions on Line(D, Q), Line(B, D), Line(C, D) we get concurrent(Line(B, D), Line(C, D), Line(D, Q))
By concurrent_sufficient_conditions on Line(C, D), Line(D, Q), Line(D, S) we get concurrent(Line(C, D), Line(D, Q), Line(D, S))
By concurrent_sufficient_conditions on Line(C, Q), Line(C, E), Line(C, S) we get concurrent(Line(C, E), Line(C, Q), Line(C, S))
By concurrent_sufficient_conditions on Line(C, S), Line(C, Q), Line(C, D) we get concurrent(Line(C, D), Line(C, Q), Line(C, S))
By concurrent_sufficient_conditions on Line(D, Q), Line(D, E), Line(D, S) we get concurrent(Line(D, E), Line(D, Q), Line(D, S))
By concurrent_sufficient_conditions on Line(C, D), Line(D, E), Line(D, Q) we get concurrent(Line(C, D), Line(D, E), Line(D, Q))
By concurrent_sufficient_conditions on Line(A, B), Line(D, Q), Line(Q, S) we get concurrent(Line(A, B), Line(D, Q), Line(Q, S))
By concurrent_sufficient_conditions on Line(D, E), Line(B, D), Line(D, Q) we get concurrent(Line(B, D), Line(D, E), Line(D, Q))
By concurrent_sufficient_conditions on Line(D, Q), Line(Q, S), Line(C, Q) we get concurrent(Line(C, Q), Line(D, Q), Line(Q, S))
By concurrent_sufficient_conditions on Line(D, S), Line(D, Q), Line(D, E) we get concurrent(Line(D, E), Line(D, Q), Line(D, S))
By concurrent_sufficient_conditions on Line(C, Q), Line(C, S), Line(B, C) we get concurrent(Line(B, C), Line(C, Q), Line(C, S))
By concurrent_sufficient_conditions on Line(D, E), Line(C, D), Line(D, Q) we get concurrent(Line(C, D), Line(D, E), Line(D, Q))
By concurrent_sufficient_conditions on Line(C, Q), Line(Q, S), Line(A, B) we get concurrent(Line(A, B), Line(C, Q), Line(Q, S))
By concurrent_sufficient_conditions on Line(D, Q), Line(Q, S), Line(A, B) we get concurrent(Line(A, B), Line(D, Q), Line(Q, S))
By concurrent_sufficient_conditions on Line(B, C), Line(C, Q), Line(C, S) we get concurrent(Line(B, C), Line(C, Q), Line(C, S))
By concurrent_sufficient_conditions on Line(D, Q), Line(D, S), Line(D, E) we get concurrent(Line(D, E), Line(D, Q), Line(D, S))
By concurrent_sufficient_conditions on Line(B, D), Line(D, S), Line(D, Q) we get concurrent(Line(B, D), Line(D, Q), Line(D, S))
By concurrent_sufficient_conditions on Line(B, D), Line(D, Q), Line(C, D) we get concurrent(Line(B, D), Line(C, D), Line(D, Q))
By concurrent_sufficient_conditions on Line(D, Q), Line(A, B), Line(Q, S) we get concurrent(Line(A, B), Line(D, Q), Line(Q, S))
By concurrent_sufficient_conditions on Line(B, C), Line(C, S), Line(C, E) we get concurrent(Line(B, C), Line(C, E), Line(C, S))
By concurrent_sufficient_conditions on Line(B, C), Line(C, S), Line(C, Q) we get concurrent(Line(B, C), Line(C, Q), Line(C, S))
By concurrent_sufficient_conditions on Line(C, S), Line(C, E), Line(C, D) we get concurrent(Line(C, D), Line(C, E), Line(C, S))
By concurrent_sufficient_conditions on Line(D, S), Line(D, E), Line(D, Q) we get concurrent(Line(D, E), Line(D, Q), Line(D, S))
By concurrent_sufficient_conditions on Line(D, S), Line(Q, S), Line(C, S) we get concurrent(Line(C, S), Line(D, S), Line(Q, S))
By concurrent_sufficient_conditions on Line(D, S), Line(D, Q), Line(C, D) we get concurrent(Line(C, D), Line(D, Q), Line(D, S))
By concurrent_sufficient_conditions on Line(D, E), Line(D, Q), Line(D, S) we get concurrent(Line(D, E), Line(D, Q), Line(D, S))
By concurrent_sufficient_conditions on Line(D, S), Line(C, D), Line(D, Q) we get concurrent(Line(C, D), Line(D, Q), Line(D, S))
By concurrent_sufficient_conditions on Line(C, Q), Line(C, S), Line(C, D) we get concurrent(Line(C, D), Line(C, Q), Line(C, S))
By concurrent_sufficient_conditions on Line(A, B), Line(C, Q), Line(D, Q) we get concurrent(Line(A, B), Line(C, Q), Line(D, Q))
By concurrent_sufficient_conditions on Line(A, B), Line(Q, S), Line(C, Q) we get concurrent(Line(A, B), Line(C, Q), Line(Q, S))
By concurrent_sufficient_conditions on Line(A, E), Line(Q, S), Line(C, S) we get concurrent(Line(A, E), Line(C, S), Line(Q, S))
By concurrent_sufficient_conditions on Line(C, D), Line(B, D), Line(D, Q) we get concurrent(Line(B, D), Line(C, D), Line(D, Q))
By concurrent_sufficient_conditions on Line(C, S), Line(B, C), Line(C, D) we get concurrent(Line(B, C), Line(C, D), Line(C, S))
By concurrent_sufficient_conditions on Line(D, Q), Line(D, E), Line(C, D) we get concurrent(Line(C, D), Line(D, E), Line(D, Q))
By concurrent_sufficient_conditions on Line(C, S), Line(B, C), Line(C, Q) we get concurrent(Line(B, C), Line(C, Q), Line(C, S))
By concurrent_sufficient_conditions on Line(D, S), Line(C, S), Line(Q, S) we get concurrent(Line(C, S), Line(D, S), Line(Q, S))
By concurrent_sufficient_conditions on Line(A, B), Line(C, Q), Line(Q, S) we get concurrent(Line(A, B), Line(C, Q), Line(Q, S))
By concurrent_sufficient_conditions on Line(C, Q), Line(B, C), Line(C, S) we get concurrent(Line(B, C), Line(C, Q), Line(C, S))
By concurrent_sufficient_conditions on Line(A, B), Line(Q, S), Line(D, Q) we get concurrent(Line(A, B), Line(D, Q), Line(Q, S))
By concurrent_sufficient_conditions on Line(C, Q), Line(A, B), Line(D, Q) we get concurrent(Line(A, B), Line(C, Q), Line(D, Q))
By concurrent_sufficient_conditions on Line(C, Q), Line(C, D), Line(C, S) we get concurrent(Line(C, D), Line(C, Q), Line(C, S))
By concurrent_sufficient_conditions on Line(C, D), Line(C, S), Line(C, E) we get concurrent(Line(C, D), Line(C, E), Line(C, S))
By concurrent_sufficient_conditions on Line(B, D), Line(D, E), Line(D, Q) we get concurrent(Line(B, D), Line(D, E), Line(D, Q))
By concurrent_sufficient_conditions on Line(D, S), Line(A, E), Line(Q, S) we get concurrent(Line(A, E), Line(D, S), Line(Q, S))
By concurrent_sufficient_conditions on Line(Q, S), Line(D, Q), Line(C, Q) we get concurrent(Line(C, Q), Line(D, Q), Line(Q, S))
By concurrent_sufficient_conditions on Line(B, D), Line(D, Q), Line(D, S) we get concurrent(Line(B, D), Line(D, Q), Line(D, S))
By anti_similar_triangle_basic_properties on P, R, A, S, Q, A we get angle(P, R, A) == 0 - angle(S, Q, A) mod 360, angle(R, A, P) == 0 - angle(Q, A, S) mod 360, angle(A, P, R) == 0 - angle(A, S, Q) mod 360, log(distance(P, R)) + log(distance(A, Q)) == log(distance(Q, S)) + log(distance(A, R)), log(distance(A, Q)) + log(distance(A, P)) == log(distance(A, R)) + log(distance(A, S)), log(distance(A, P)) + log(distance(Q, S)) == log(distance(A, S)) + log(distance(P, R))
By anti_similar_triangle_basic_properties on S, A, Q, P, A, R we get angle(S, A, Q) == 0 - angle(P, A, R) mod 360, angle(A, Q, S) == 0 - angle(A, R, P) mod 360, angle(Q, S, A) == 0 - angle(R, P, A) mod 360, log(distance(A, P)) + log(distance(A, Q)) == log(distance(A, S)) + log(distance(A, R)), log(distance(A, Q)) + log(distance(P, R)) == log(distance(A, R)) + log(distance(Q, S)), log(distance(P, R)) + log(distance(A, S)) == log(distance(Q, S)) + log(distance(A, P))
