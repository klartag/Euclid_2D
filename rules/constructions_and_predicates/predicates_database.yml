triangle:
  inputs:
  - A, B, C: Point
  preprocess: symmetric
  conclude:
    - not_collinear(A, B, C)
    - exists(Line(A, B), Line(B, C), Line(C, A))

collinear:
  inputs:
  - A, B, C: Point
  preprocess: symmetric
  conclude:
    - self

collinear_and_not_between: # B in Line(A, C) but not in the segment AC
  inputs:
  - A, B, C: Point
  preprocess: between 
  conclude:
    - self
    - collinear(A, B, C)

probably_between:
  inputs:
  - A, B, C: Point
  preprocess: between
  conclude:
    - self

concyclic:
  inputs:
    - A, B, C, D: Point
  preprocess: symmetric
  conclude:
    - self

concurrent: # three different lines meet at one point
  inputs:
    - l, m, n: Line
  preprocess: symmetric
  conclude:
    #sufficient
    - distinct(l, m, n)
    - line_intersection(l, m) == line_intersection(m, n) 
    #trivial implications
    - line_intersection(m, n) == line_intersection(n, l)

bisect: 
  inputs:
    - l: Line
    - A, B: Point
  preprocess: swap # (l, {A, B})
  conclude:
    #sufficient
    - line_intersection(l, Line(A, B)) == midpoint(A, B)

perpendicular:
  inputs:
    - k, l: Line
  preprocess: symmetric  
  conclude:
    - self
  
parallel:
  inputs:
    - k, l: Line
  preprocess: symmetric
  conclude:
    - self
  
isosceles_triangle:
  inputs:
    - A, B, C: Point
  preprocess: swap
  conclude:
    #sufficient
    - distinct(A, B, C)
    - distance(A, B) == distance(A, C)
    #trivial implications

trapezoid:
  inputs:
    - A, B, C, D: Point
  preprocess: pi_rotate
  conclude:
    #sufficient
    - convex(A, B, C, D)
    - parallel(Line(A, B), Line(C, D))

isosceles_trapezoid:
  inputs:
    - A, B, C, D: Point
  preprocess: pi_rotate
  conclude:
    #sufficient
    - parallel(Line(A, B), Line(C, D))
    - distance(A, D) == distance(B, C)
    #trivial implications
    - angle(B, C, D) == angle(C, D, A) mod 360
    - angle(D, A, B) == angle(A, B, C) mod 360 

parallelogram:
  inputs:
    - A, B, C, D: Point
  preprocess: circle_symmetry
  conclude:
    #sufficient
    - convex(A, B, C, D)
    - parallel(Line(A, B), Line(C, D))
    - parallel(Line(A, D), Line(B, C))
    #trivial implications
    - distance(A, B) == distance(C, D)
    - distance(A, D) == distance(B, C)
    - angle(A, B, C) == angle(C, D, A) mod 360
    - angle(D, A, B) == angle(B, C, D) mod 360

rhombus:
  inputs:
    - A, B, C, D: Point
  preprocess: circle_symmetry
  conclude:
    #sufficient
    - parallelogram(A, B, C, D)
    - distance(A, B) ==  distance(B, C)
    #trivial implications

rectangle:
  inputs:
    - A, B, C, D: Point
  preprocess: circle_symmetry
  conclude:
    #sufficient
    - parallelogram(A, B, C, D)
    - perpendicular(Line(A, B), Line(B, C))
    #trivial implications

square:
  inputs:
    - A, B, C, D: Point
  preprocess: circle_symmetry
  conclude:
    #sufficient
    - rectangle(A, B, C, D)
    - distance(A, B) == distance(B, C)
    #trivial implications

congruent_triangles:
  inputs:
    - A, B, C, X, Y, Z: Point
  preprocess: congruence_triangles
  conclude:
    - not_collinear(A, B, C)
    - not_collinear(X, Y, Z)
    - angle(A, B, C) == angle(X, Y, Z) mod 360
    - angle(B, C, A) == angle(Y, Z, X) mod 360 
    - angle(C, A, B) == angle(Z, X, Y) mod 360
    - distance(A, B) == distance(X, Y)
    - distance(B, C) == distance(Y, Z)
    - distance(C, A) == distance(Z, X)

anti_congruent_triangles:
  inputs:
    - A, B, C, X, Y, Z: Point
  preprocess: congruence_triangles
  conclude:
    - not_collinear(A, B, C)
    - not_collinear(X, Y, Z)
    - angle(A, B, C) == - angle(X, Y, Z) mod 360
    - angle(B, C, A) == - angle(Y, Z, X) mod 360 
    - angle(C, A, B) == - angle(Z, X, Y) mod 360
    - distance(A, B) == distance(X, Y) 
    - distance(B, C) == distance(Y, Z)
    - distance(C, A) == distance(Z, X)

similar_triangles:
  inputs:
    - A, B, C, X, Y, Z: Point
  preprocess: congruence_triangles
  conclude:
    - not_collinear(A, B, C)
    - not_collinear(X, Y, Z)
    - angle(A, B, C) == angle(X, Y, Z) mod 360
    - angle(B, C, A) == angle(Y, Z, X) mod 360 
    - angle(C, A, B) == angle(Z, X, Y) mod 360

anti_similar_triangles:
  inputs:
    - A, B, C, X, Y, Z: Point
  preprocess: congruence_triangles
  conclude:
    - not_collinear(A, B, C)
    - not_collinear(X, Y, Z)
    - angle(A, B, C) + angle(X, Y, Z) == 0 mod 360
    - angle(B, C, A) + angle(Y, Z, X) == 0 mod 360 
    - angle(C, A, B) + angle(Z, X, Y) == 0 mod 360
