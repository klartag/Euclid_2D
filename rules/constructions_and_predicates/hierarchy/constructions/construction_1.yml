circumcenter:
  conclude: ['O == center(Circle(A, B, C))']
  construct:
  - {O: Point}
  inputs:
  - {'A, B, C': Point}
  preprocess: symmetric
  where: ['not_collinear(A, B, C)']
direction:
  construct:
  - {a: Angle}
  inputs:
  - {'A, B': Point}
  where: [A != B, 'exists(Line(A, B))']
excenter:
  conclude: ['P in external_angle_bisector(A, C, B), external_angle_bisector(A, B,
      C), internal_angle_bisector(B, A, C)', 'P == line_intersection(external_angle_bisector(A,
      C, B), external_angle_bisector(A, B, C))']
  construct:
  - {P: Point}
  inputs:
  - {'A, B, C': Point}
  preprocess: swap
  where: ['not_collinear(A, B, C)']
incenter:
  conclude: ['P in internal_angle_bisector(A, B, C), internal_angle_bisector(A, C,
      B), internal_angle_bisector(C, A, B)', 'P == line_intersection(internal_angle_bisector(A,
      B, C), internal_angle_bisector(A, C, B))']
  construct:
  - {P: Point}
  inputs:
  - {'A, B, C': Point}
  preprocess: symmetric
  where: ['not_collinear(A, B, C)']
midpoint:
  conclude: ['between(A, O, B)', 'distance(A, O) == distance(B, O)', '2 * distance(A,
      O) == distance(A, B)']
  construct:
  - {O: Point}
  inputs:
  - {'A, B': Point}
  possible_conclusions: ['A != B => distinct(A, O, B)']
  preprocess: symmetric
parallel_line:
  conclude: [A in l', "parallel(l, l')"]
  construct:
  - {l': Line}
  inputs:
  - {A: Point}
  - {l: Line}
perpendicular_line:
  conclude: [A in l', "perpendicular(l, l')"]
  construct:
  - {l': Line}
  inputs:
  - {A: Point}
  - {l: Line}
radical_axis:
  construct:
  - {l: Line}
  inputs:
  - {'c1, c2': Circle}
  preprocess: symmetric
  where: [center(c1) != center(c2)]
