power_of_a_point_definition:
  inputs:
    - O, A, B: Point
    - c: Circle
  where:
    - A, B in c
    - collinear(O, A, B)
  where_embedding:
    - A != B
    - O not in c
  conclude:
    - log(power_of_a_point(O, c)) == log(distance(O, A)) + log(distance(O, B))

power_of_a_point_in_circle:
  inputs:
    - O: Point
    - c: Circle
  where:
    - O in c
  conclude:
    - power_of_a_point(O, c) == 0

power_of_a_point_tangent:
  inputs:
    - O, A: Point
    - c: Circle
  where:
    - A in c
    - tangent(Line(O, A), c)
  conclude:
    - log(power_of_a_point(O, c)) == 2 * log(distance(O, A))

power_of_a_point_converse:
  inputs:
    - O, A, B, C, D: Point
  where:
    - collinear(O, A, B)
    - collinear(O, C, D)
    - log(distance(O, A)) + log(distance(O, B)) == log(distance(O, C)) + log(distance(O, D))
  where_embedding:
    - Line(A, B) != Line(C, D)
  possible_conclusions:
    - orientation(O, A, C) == 90 mod 360 & orientation(O, C, D) == 90 mod 360 => concyclic(A, B, C, D)
    - orientation(O, A, C) == -90 mod 360 & orientation(O, C, D) == -90 mod 360 => concyclic(A, B, C, D)
  rank: 5

power_of_a_point_tangent_converse:
  inputs:
    - O, A, B, C: Point
  where:
    - collinear(O, A, B)
    - log(distance(O, A)) + log(distance(O, B)) == 2 * log(distance(O, C))
  where_embedding:
    - A != B
    - Line(O, A) != Line(O, C)
  possible_conclusions:
    - orientation(O, A, C) == 90 mod 360 & orientation(O, B, C) == 90 mod 360 =>tangent(Line(O, C), Circle(A, B, C))
    - orientation(O, A, C) == -90 mod 360 & orientation(O, B, C) == -90 mod 360 =>tangent(Line(O, C), Circle(A, B, C))

power_of_a_point_on_circle:
  inputs:
    - A: Point
    - c: Circle
  where:
    - A in c
  conclude:
    - power_of_a_point(A, c) == 0
  metadata: auto
