isogonal_conjugate_definition:
  inputs:
    - A, B, C, P, Q: Point
  where:
    - P == isogonal_conjugate(Q, A, B, C)
  possible_conclusions:
    - orientation(B, A, P) == 90 mod 360 & orientation(Q, A, C) == 90 mod 360 => angle(B, A, P) == angle(Q, A, C) mod 360
    - orientation(B, A, P) == -90 mod 360 & orientation(Q, A, C) == -90 mod 360 => angle(B, A, P) == angle(Q, A, C) mod 360
    - orientation(B, A, P) == 90 mod 360 & orientation(Q, A, C) == -90 mod 360 => angle(B, A, P) == angle(Q, A, C) + 180 mod 360
    - orientation(B, A, P) == -90 mod 360 & orientation(Q, A, C) == 90 mod 360 => angle(B, A, P) == angle(Q, A, C) + 180 mod 360
    - orientation(C, B, P) == 90 mod 360 & orientation(Q, B, A) == 90 mod 360 => angle(C, B, P) == angle(Q, B, A) mod 360
    - orientation(C, B, P) == -90 mod 360 & orientation(Q, B, A) == -90 mod 360 => angle(C, B, P) == angle(Q, B, A) mod 360
    - orientation(C, B, P) == 90 mod 360 & orientation(Q, B, A) == -90 mod 360 => angle(C, B, P) == angle(Q, B, A) + 180 mod 360
    - orientation(C, B, P) == -90 mod 360 & orientation(Q, B, A) == 90 mod 360 => angle(C, B, P) == angle(Q, B, A) + 180 mod 360
    - orientation(A, C, P) == 90 mod 360 & orientation(Q, C, B) == 90 mod 360 => angle(A, C, P) == angle(Q, C, B) mod 360
    - orientation(A, C, P) == -90 mod 360 & orientation(Q, C, B) == -90 mod 360 => angle(A, C, P) == angle(Q, C, B) mod 360
    - orientation(A, C, P) == 90 mod 360 & orientation(Q, C, B) == -90 mod 360 => angle(A, C, P) == angle(Q, C, B) + 180 mod 360
    - orientation(A, C, P) == -90 mod 360 & orientation(Q, C, B) == 90 mod 360 => angle(A, C, P) == angle(Q, C, B) + 180 mod 360

isogonal_conjugate_is_involution:
  inputs:
    - A, B, C, P, Q: Point
  where:
    - P == isogonal_conjugate(Q, A, B, C)
  conclude:
    - Q == isogonal_conjugate(P, A, B, C)

isogonal_conjugate_sufficient_conditions:
  inputs:
  - A, B, C, P, Q: Point
  where:
    - not_collinear(A, B, C)
    - not_one_of(P, A, B, C)
    - not_one_of(Q, A, B, C)
  possible_conclusions:
    - angle(B, A, P) == angle(Q, A, C) mod 360 & angle(C, B, P) == angle(Q, B, A) mod 360 => P == isogonal_conjugate(Q, A, B, C)
    - angle(B, A, P) == angle(Q, A, C) mod 360 & angle(C, B, P) == angle(Q, B, A) + 180 mod 360 => P == isogonal_conjugate(Q, A, B, C)
    - angle(B, A, P) == angle(Q, A, C) + 180 mod 360 & angle(C, B, P) == angle(Q, B, A) mod 360 => P == isogonal_conjugate(Q, A, B, C)
    - angle(B, A, P) == angle(Q, A, C) + 180 mod 360 & angle(C, B, P) == angle(Q, B, A) + 180 mod 360 => P == isogonal_conjugate(Q, A, B, C)
