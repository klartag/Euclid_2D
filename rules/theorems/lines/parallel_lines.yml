parallel_line_definition:
  inputs:
    - A: Point
    - k, l: Line
  where:
    - A in k
    - parallel(k, l)
  conclude:
    - k == parallel_line(A, l)
  rank: 3
  trivial_if_equal:
    - [k, l]

parallel_and_intersecting:
  inputs:
    - l1, l2: Line
    - P: Point
  where:
    - parallel(l1, l2)
    - P in l1, l2
  conclude:
    - l1 == l2
  rank: 3
  trivial_if_equal:
    - [l1, l2]

parallel_line_angles:
  inputs:
    - A, B, C, D: Point
  where:
    - Line(A, B) != Line(C, D)
  possible_conclusions:
    - angle(A, B, C) == angle(D, C, B) mod 360 => parallel(Line(A, B), Line(C, D))
    - angle(A, B, C) == angle(D, C, B) + 180 mod 360 => parallel(Line(A, B), Line(C, D))

parallel_line_angles_reverse:
  inputs:
    - A, B, C, D: Point
  where:
    - Line(A, B) != Line(C, D)
    - exists(Line(B, C))
    - parallel(Line(A, B), Line(C, D))
  possible_conclusions:
    - orientation(A, B, C) == 90 mod 360 & orientation(D, C, B) == 90 mod 360 => angle(A, B, C) == angle(D, C, B) mod 360
    - orientation(A, B, C) == -90 mod 360 & orientation(D, C, B) == -90 mod 360 => angle(A, B, C) == angle(D, C, B) mod 360
    - orientation(A, B, C) == 90 mod 360 & orientation(D, C, B) == -90 mod 360 => angle(A, B, C) == angle(D, C, B) + 180 mod 360
    - orientation(A, B, C) == -90 mod 360 & orientation(D, C, B) == 90 mod 360 => angle(A, B, C) == angle(D, C, B) + 180 mod 360

parallel_lines_are_transitive:
  inputs:
    - k, l, m: Line
  where:
    - parallel(k, l)
    - parallel(l, m)
  conclude:
    - parallel(k, m)
  trivial_if_equal:
    - [k, l]
    - [l, m]
    - [k, m]
